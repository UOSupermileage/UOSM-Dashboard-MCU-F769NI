
UOSM-Dashboard-MCU-F769NI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002454c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000038b8  0802474c  0802474c  0003474c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontSearchFlashSection 00000018  08028004  08028004  00038004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0802801c  0802801c  001c71b8  2**0
                  CONTENTS
  5 .ARM          00000008  0802801c  0802801c  0003801c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  08028024  08028024  001c71b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000018  08028024  08028024  00038024  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   0000000c  0802803c  0802803c  0003803c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000110  20000000  08028048  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 CCMRAM        00009600  20000110  08028158  00040110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0001af70  20009710  08031758  00049710  2**2
                  ALLOC
 12 ._user_heap_stack 00002000  20024680  08031758  00054680  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  001c71b8  2**0
                  CONTENTS, READONLY
 14 ExtFlashSection 00177000  90000000  90000000  00050000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 FontFlashSection 000001a8  90177000  90177000  001c7000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 TextFlashSection 00000010  901771a8  901771a8  001c71a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 17 BufferSection 00177000  c0000000  c0000000  001d0000  2**2
                  ALLOC
 18 .debug_info   00083918  00000000  00000000  001c71e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_abbrev 0000f8bc  00000000  00000000  0024aafe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_aranges 00003848  00000000  00000000  0025a3c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_ranges 000033a8  00000000  00000000  0025dc08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_macro  0003b046  00000000  00000000  00260fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line   00048cd3  00000000  00000000  0029bff6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_str    0014ae13  00000000  00000000  002e4cc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .comment      000000cf  00000000  00000000  0042fadc  2**0
                  CONTENTS, READONLY
 26 .debug_frame  0000f774  00000000  00000000  0042fbac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20009710 	.word	0x20009710
 800021c:	00000000 	.word	0x00000000
 8000220:	08024734 	.word	0x08024734

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20009714 	.word	0x20009714
 800023c:	08024734 	.word	0x08024734

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <vApplicationIdleHook>:
/* Hook prototypes */
void vApplicationIdleHook(void);

/* USER CODE BEGIN 2 */
void vApplicationIdleHook( void )
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80005e8:	bf00      	nop
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr
	...

080005f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f8:	f001 fa03 	bl	8001a02 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fc:	f000 f84c 	bl	8000698 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000600:	f000 fbc6 	bl	8000d90 <MX_GPIO_Init>
  MX_DMA_Init();
 8000604:	f000 fb4e 	bl	8000ca4 <MX_DMA_Init>
  MX_JPEG_Init();
 8000608:	f000 fa50 	bl	8000aac <MX_JPEG_Init>
  MX_LTDC_Init();
 800060c:	f000 fa62 	bl	8000ad4 <MX_LTDC_Init>
  MX_SPI1_Init();
 8000610:	f000 fb0a 	bl	8000c28 <MX_SPI1_Init>
  MX_DMA2D_Init();
 8000614:	f000 f8d2 	bl	80007bc <MX_DMA2D_Init>
  MX_CRC_Init();
 8000618:	f000 f8ae 	bl	8000778 <MX_CRC_Init>
  MX_FMC_Init();
 800061c:	f000 fb68 	bl	8000cf0 <MX_FMC_Init>
  MX_I2C4_Init();
 8000620:	f000 fa04 	bl	8000a2c <MX_I2C4_Init>
  MX_QUADSPI_Init();
 8000624:	f000 fad4 	bl	8000bd0 <MX_QUADSPI_Init>
  MX_DSIHOST_DSI_Init();
 8000628:	f000 f900 	bl	800082c <MX_DSIHOST_DSI_Init>
  MX_LIBJPEG_Init();
 800062c:	f007 fb88 	bl	8007d40 <MX_LIBJPEG_Init>
  MX_TouchGFX_Init();
 8000630:	f00b fa19 	bl	800ba66 <MX_TouchGFX_Init>
  /* Call PreOsInit function */
  MX_TouchGFX_PreOSInit();
 8000634:	f00b fa10 	bl	800ba58 <MX_TouchGFX_PreOSInit>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000638:	f007 fb90 	bl	8007d5c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800063c:	4a0d      	ldr	r2, [pc, #52]	; (8000674 <main+0x80>)
 800063e:	2100      	movs	r1, #0
 8000640:	480d      	ldr	r0, [pc, #52]	; (8000678 <main+0x84>)
 8000642:	f007 fbf5 	bl	8007e30 <osThreadNew>
 8000646:	4603      	mov	r3, r0
 8000648:	4a0c      	ldr	r2, [pc, #48]	; (800067c <main+0x88>)
 800064a:	6013      	str	r3, [r2, #0]

  /* creation of TouchGFXTask */
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 800064c:	4a0c      	ldr	r2, [pc, #48]	; (8000680 <main+0x8c>)
 800064e:	2100      	movs	r1, #0
 8000650:	480c      	ldr	r0, [pc, #48]	; (8000684 <main+0x90>)
 8000652:	f007 fbed 	bl	8007e30 <osThreadNew>
 8000656:	4603      	mov	r3, r0
 8000658:	4a0b      	ldr	r2, [pc, #44]	; (8000688 <main+0x94>)
 800065a:	6013      	str	r3, [r2, #0]

  /* creation of videoTask */
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
 800065c:	4a0b      	ldr	r2, [pc, #44]	; (800068c <main+0x98>)
 800065e:	2100      	movs	r1, #0
 8000660:	480b      	ldr	r0, [pc, #44]	; (8000690 <main+0x9c>)
 8000662:	f007 fbe5 	bl	8007e30 <osThreadNew>
 8000666:	4603      	mov	r3, r0
 8000668:	4a0a      	ldr	r2, [pc, #40]	; (8000694 <main+0xa0>)
 800066a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800066c:	f007 fbaa 	bl	8007dc4 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000670:	e7fe      	b.n	8000670 <main+0x7c>
 8000672:	bf00      	nop
 8000674:	080266f4 	.word	0x080266f4
 8000678:	08000e81 	.word	0x08000e81
 800067c:	20009abc 	.word	0x20009abc
 8000680:	08026718 	.word	0x08026718
 8000684:	0800ba77 	.word	0x0800ba77
 8000688:	20009ac0 	.word	0x20009ac0
 800068c:	0802673c 	.word	0x0802673c
 8000690:	08010801 	.word	0x08010801
 8000694:	20009ac4 	.word	0x20009ac4

08000698 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b094      	sub	sp, #80	; 0x50
 800069c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069e:	f107 031c 	add.w	r3, r7, #28
 80006a2:	2234      	movs	r2, #52	; 0x34
 80006a4:	2100      	movs	r1, #0
 80006a6:	4618      	mov	r0, r3
 80006a8:	f023 f810 	bl	80236cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ac:	f107 0308 	add.w	r3, r7, #8
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
 80006b4:	605a      	str	r2, [r3, #4]
 80006b6:	609a      	str	r2, [r3, #8]
 80006b8:	60da      	str	r2, [r3, #12]
 80006ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006bc:	4b2c      	ldr	r3, [pc, #176]	; (8000770 <SystemClock_Config+0xd8>)
 80006be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c0:	4a2b      	ldr	r2, [pc, #172]	; (8000770 <SystemClock_Config+0xd8>)
 80006c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006c6:	6413      	str	r3, [r2, #64]	; 0x40
 80006c8:	4b29      	ldr	r3, [pc, #164]	; (8000770 <SystemClock_Config+0xd8>)
 80006ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006d0:	607b      	str	r3, [r7, #4]
 80006d2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006d4:	4b27      	ldr	r3, [pc, #156]	; (8000774 <SystemClock_Config+0xdc>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4a26      	ldr	r2, [pc, #152]	; (8000774 <SystemClock_Config+0xdc>)
 80006da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006de:	6013      	str	r3, [r2, #0]
 80006e0:	4b24      	ldr	r3, [pc, #144]	; (8000774 <SystemClock_Config+0xdc>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006e8:	603b      	str	r3, [r7, #0]
 80006ea:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006ec:	2301      	movs	r3, #1
 80006ee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006f4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f6:	2302      	movs	r3, #2
 80006f8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006fa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006fe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000700:	2319      	movs	r3, #25
 8000702:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000704:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000708:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800070a:	2302      	movs	r3, #2
 800070c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800070e:	2302      	movs	r3, #2
 8000710:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 7;
 8000712:	2307      	movs	r3, #7
 8000714:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000716:	f107 031c 	add.w	r3, r7, #28
 800071a:	4618      	mov	r0, r3
 800071c:	f005 fdb2 	bl	8006284 <HAL_RCC_OscConfig>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000726:	f000 fbc5 	bl	8000eb4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800072a:	f005 fc99 	bl	8006060 <HAL_PWREx_EnableOverDrive>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000734:	f000 fbbe 	bl	8000eb4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000738:	230f      	movs	r3, #15
 800073a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800073c:	2302      	movs	r3, #2
 800073e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000740:	2300      	movs	r3, #0
 8000742:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000744:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000748:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800074a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800074e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000750:	f107 0308 	add.w	r3, r7, #8
 8000754:	2106      	movs	r1, #6
 8000756:	4618      	mov	r0, r3
 8000758:	f006 f842 	bl	80067e0 <HAL_RCC_ClockConfig>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000762:	f000 fba7 	bl	8000eb4 <Error_Handler>
  }
}
 8000766:	bf00      	nop
 8000768:	3750      	adds	r7, #80	; 0x50
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	40023800 	.word	0x40023800
 8000774:	40007000 	.word	0x40007000

08000778 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800077c:	4b0d      	ldr	r3, [pc, #52]	; (80007b4 <MX_CRC_Init+0x3c>)
 800077e:	4a0e      	ldr	r2, [pc, #56]	; (80007b8 <MX_CRC_Init+0x40>)
 8000780:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000782:	4b0c      	ldr	r3, [pc, #48]	; (80007b4 <MX_CRC_Init+0x3c>)
 8000784:	2200      	movs	r2, #0
 8000786:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000788:	4b0a      	ldr	r3, [pc, #40]	; (80007b4 <MX_CRC_Init+0x3c>)
 800078a:	2200      	movs	r2, #0
 800078c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800078e:	4b09      	ldr	r3, [pc, #36]	; (80007b4 <MX_CRC_Init+0x3c>)
 8000790:	2200      	movs	r2, #0
 8000792:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000794:	4b07      	ldr	r3, [pc, #28]	; (80007b4 <MX_CRC_Init+0x3c>)
 8000796:	2200      	movs	r2, #0
 8000798:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800079a:	4b06      	ldr	r3, [pc, #24]	; (80007b4 <MX_CRC_Init+0x3c>)
 800079c:	2201      	movs	r2, #1
 800079e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80007a0:	4804      	ldr	r0, [pc, #16]	; (80007b4 <MX_CRC_Init+0x3c>)
 80007a2:	f001 fa61 	bl	8001c68 <HAL_CRC_Init>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80007ac:	f000 fb82 	bl	8000eb4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80007b0:	bf00      	nop
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	2000972c 	.word	0x2000972c
 80007b8:	40023000 	.word	0x40023000

080007bc <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80007c0:	4b18      	ldr	r3, [pc, #96]	; (8000824 <MX_DMA2D_Init+0x68>)
 80007c2:	4a19      	ldr	r2, [pc, #100]	; (8000828 <MX_DMA2D_Init+0x6c>)
 80007c4:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80007c6:	4b17      	ldr	r3, [pc, #92]	; (8000824 <MX_DMA2D_Init+0x68>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80007cc:	4b15      	ldr	r3, [pc, #84]	; (8000824 <MX_DMA2D_Init+0x68>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80007d2:	4b14      	ldr	r3, [pc, #80]	; (8000824 <MX_DMA2D_Init+0x68>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80007d8:	4b12      	ldr	r3, [pc, #72]	; (8000824 <MX_DMA2D_Init+0x68>)
 80007da:	2200      	movs	r2, #0
 80007dc:	639a      	str	r2, [r3, #56]	; 0x38
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80007de:	4b11      	ldr	r3, [pc, #68]	; (8000824 <MX_DMA2D_Init+0x68>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80007e4:	4b0f      	ldr	r3, [pc, #60]	; (8000824 <MX_DMA2D_Init+0x68>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80007ea:	4b0e      	ldr	r3, [pc, #56]	; (8000824 <MX_DMA2D_Init+0x68>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 80007f0:	4b0c      	ldr	r3, [pc, #48]	; (8000824 <MX_DMA2D_Init+0x68>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 80007f6:	4b0b      	ldr	r3, [pc, #44]	; (8000824 <MX_DMA2D_Init+0x68>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80007fc:	4809      	ldr	r0, [pc, #36]	; (8000824 <MX_DMA2D_Init+0x68>)
 80007fe:	f001 fec3 	bl	8002588 <HAL_DMA2D_Init>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_DMA2D_Init+0x50>
  {
    Error_Handler();
 8000808:	f000 fb54 	bl	8000eb4 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800080c:	2101      	movs	r1, #1
 800080e:	4805      	ldr	r0, [pc, #20]	; (8000824 <MX_DMA2D_Init+0x68>)
 8000810:	f002 f824 	bl	800285c <HAL_DMA2D_ConfigLayer>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_DMA2D_Init+0x62>
  {
    Error_Handler();
 800081a:	f000 fb4b 	bl	8000eb4 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800081e:	bf00      	nop
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	20009750 	.word	0x20009750
 8000828:	4002b000 	.word	0x4002b000

0800082c <MX_DSIHOST_DSI_Init>:
  * @brief DSIHOST Initialization Function
  * @param None
  * @retval None
  */
static void MX_DSIHOST_DSI_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b0aa      	sub	sp, #168	; 0xa8
 8000830:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */

  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 8000832:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
 800083a:	605a      	str	r2, [r3, #4]
 800083c:	609a      	str	r2, [r3, #8]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 800083e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000842:	2224      	movs	r2, #36	; 0x24
 8000844:	2100      	movs	r1, #0
 8000846:	4618      	mov	r0, r3
 8000848:	f022 ff40 	bl	80236cc <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 800084c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000850:	2200      	movs	r2, #0
 8000852:	601a      	str	r2, [r3, #0]
 8000854:	605a      	str	r2, [r3, #4]
 8000856:	609a      	str	r2, [r3, #8]
 8000858:	60da      	str	r2, [r3, #12]
 800085a:	611a      	str	r2, [r3, #16]
 800085c:	615a      	str	r2, [r3, #20]
  DSI_LPCmdTypeDef LPCmd = {0};
 800085e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000862:	2234      	movs	r2, #52	; 0x34
 8000864:	2100      	movs	r1, #0
 8000866:	4618      	mov	r0, r3
 8000868:	f022 ff30 	bl	80236cc <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 800086c:	463b      	mov	r3, r7
 800086e:	222c      	movs	r2, #44	; 0x2c
 8000870:	2100      	movs	r1, #0
 8000872:	4618      	mov	r0, r3
 8000874:	f022 ff2a 	bl	80236cc <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 8000878:	4b6a      	ldr	r3, [pc, #424]	; (8000a24 <MX_DSIHOST_DSI_Init+0x1f8>)
 800087a:	4a6b      	ldr	r2, [pc, #428]	; (8000a28 <MX_DSIHOST_DSI_Init+0x1fc>)
 800087c:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 800087e:	4b69      	ldr	r3, [pc, #420]	; (8000a24 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000880:	2200      	movs	r2, #0
 8000882:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 4;
 8000884:	4b67      	ldr	r3, [pc, #412]	; (8000a24 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000886:	2204      	movs	r2, #4
 8000888:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 800088a:	4b66      	ldr	r3, [pc, #408]	; (8000a24 <MX_DSIHOST_DSI_Init+0x1f8>)
 800088c:	2201      	movs	r2, #1
 800088e:	60da      	str	r2, [r3, #12]
  PLLInit.PLLNDIV = 100;
 8000890:	2364      	movs	r3, #100	; 0x64
 8000892:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  PLLInit.PLLIDF = DSI_PLL_IN_DIV5;
 8000896:	2305      	movs	r3, #5
 8000898:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 800089c:	2300      	movs	r3, #0
 800089e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 80008a2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80008a6:	4619      	mov	r1, r3
 80008a8:	485e      	ldr	r0, [pc, #376]	; (8000a24 <MX_DSIHOST_DSI_Init+0x1f8>)
 80008aa:	f002 f875 	bl	8002998 <HAL_DSI_Init>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <MX_DSIHOST_DSI_Init+0x8c>
  {
    Error_Handler();
 80008b4:	f000 fafe 	bl	8000eb4 <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 80008b8:	2301      	movs	r3, #1
 80008ba:	67bb      	str	r3, [r7, #120]	; 0x78
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 80008bc:	2300      	movs	r3, #0
 80008be:	67fb      	str	r3, [r7, #124]	; 0x7c
  HostTimeouts.LowPowerReceptionTimeout = 0;
 80008c0:	2300      	movs	r3, #0
 80008c2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  HostTimeouts.HighSpeedReadTimeout = 0;
 80008c6:	2300      	movs	r3, #0
 80008c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  HostTimeouts.LowPowerReadTimeout = 0;
 80008cc:	2300      	movs	r3, #0
 80008ce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  HostTimeouts.HighSpeedWriteTimeout = 0;
 80008d2:	2300      	movs	r3, #0
 80008d4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 80008d8:	2300      	movs	r3, #0
 80008da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  HostTimeouts.LowPowerWriteTimeout = 0;
 80008de:	2300      	movs	r3, #0
 80008e0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  HostTimeouts.BTATimeout = 0;
 80008e4:	2300      	movs	r3, #0
 80008e6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 80008ea:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80008ee:	4619      	mov	r1, r3
 80008f0:	484c      	ldr	r0, [pc, #304]	; (8000a24 <MX_DSIHOST_DSI_Init+0x1f8>)
 80008f2:	f002 fd03 	bl	80032fc <HAL_DSI_ConfigHostTimeouts>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <MX_DSIHOST_DSI_Init+0xd4>
  {
    Error_Handler();
 80008fc:	f000 fada 	bl	8000eb4 <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 28;
 8000900:	231c      	movs	r3, #28
 8000902:	663b      	str	r3, [r7, #96]	; 0x60
  PhyTimings.ClockLaneLP2HSTime = 33;
 8000904:	2321      	movs	r3, #33	; 0x21
 8000906:	667b      	str	r3, [r7, #100]	; 0x64
  PhyTimings.DataLaneHS2LPTime = 15;
 8000908:	230f      	movs	r3, #15
 800090a:	66bb      	str	r3, [r7, #104]	; 0x68
  PhyTimings.DataLaneLP2HSTime = 25;
 800090c:	2319      	movs	r3, #25
 800090e:	66fb      	str	r3, [r7, #108]	; 0x6c
  PhyTimings.DataLaneMaxReadTime = 0;
 8000910:	2300      	movs	r3, #0
 8000912:	673b      	str	r3, [r7, #112]	; 0x70
  PhyTimings.StopWaitTime = 0;
 8000914:	2300      	movs	r3, #0
 8000916:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000918:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800091c:	4619      	mov	r1, r3
 800091e:	4841      	ldr	r0, [pc, #260]	; (8000a24 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000920:	f002 fc82 	bl	8003228 <HAL_DSI_ConfigPhyTimer>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_DSIHOST_DSI_Init+0x102>
  {
    Error_Handler();
 800092a:	f000 fac3 	bl	8000eb4 <Error_Handler>
  }
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 800092e:	2104      	movs	r1, #4
 8000930:	483c      	ldr	r0, [pc, #240]	; (8000a24 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000932:	f002 fc51 	bl	80031d8 <HAL_DSI_ConfigFlowControl>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <MX_DSIHOST_DSI_Init+0x114>
  {
    Error_Handler();
 800093c:	f000 faba 	bl	8000eb4 <Error_Handler>
  }
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 8000940:	f242 7110 	movw	r1, #10000	; 0x2710
 8000944:	4837      	ldr	r0, [pc, #220]	; (8000a24 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000946:	f002 fda1 	bl	800348c <HAL_DSI_SetLowPowerRXFilter>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <MX_DSIHOST_DSI_Init+0x128>
  {
    Error_Handler();
 8000950:	f000 fab0 	bl	8000eb4 <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_OVF) != HAL_OK)
 8000954:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000958:	4832      	ldr	r0, [pc, #200]	; (8000a24 <MX_DSIHOST_DSI_Init+0x1f8>)
 800095a:	f002 f939 	bl	8002bd0 <HAL_DSI_ConfigErrorMonitor>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_DSIHOST_DSI_Init+0x13c>
  {
    Error_Handler();
 8000964:	f000 faa6 	bl	8000eb4 <Error_Handler>
  }
  LPCmd.LPGenShortWriteNoP = DSI_LP_GSW0P_ENABLE;
 8000968:	f44f 7380 	mov.w	r3, #256	; 0x100
 800096c:	62fb      	str	r3, [r7, #44]	; 0x2c
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 800096e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000972:	633b      	str	r3, [r7, #48]	; 0x30
  LPCmd.LPGenShortWriteTwoP = DSI_LP_GSW2P_ENABLE;
 8000974:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000978:	637b      	str	r3, [r7, #52]	; 0x34
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 800097a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800097e:	63bb      	str	r3, [r7, #56]	; 0x38
  LPCmd.LPGenShortReadOneP = DSI_LP_GSR1P_ENABLE;
 8000980:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000984:	63fb      	str	r3, [r7, #60]	; 0x3c
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8000986:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800098a:	643b      	str	r3, [r7, #64]	; 0x40
  LPCmd.LPGenLongWrite = DSI_LP_GLW_ENABLE;
 800098c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000990:	647b      	str	r3, [r7, #68]	; 0x44
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8000992:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000996:	64bb      	str	r3, [r7, #72]	; 0x48
  LPCmd.LPDcsShortWriteOneP = DSI_LP_DSW1P_ENABLE;
 8000998:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800099c:	64fb      	str	r3, [r7, #76]	; 0x4c
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 800099e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80009a2:	653b      	str	r3, [r7, #80]	; 0x50
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_ENABLE;
 80009a4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80009a8:	657b      	str	r3, [r7, #84]	; 0x54
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 80009aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80009ae:	65bb      	str	r3, [r7, #88]	; 0x58
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_ENABLE;
 80009b0:	2302      	movs	r3, #2
 80009b2:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 80009b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009b8:	4619      	mov	r1, r3
 80009ba:	481a      	ldr	r0, [pc, #104]	; (8000a24 <MX_DSIHOST_DSI_Init+0x1f8>)
 80009bc:	f002 fbae 	bl	800311c <HAL_DSI_ConfigCommand>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_DSIHOST_DSI_Init+0x19e>
  {
    Error_Handler();
 80009c6:	f000 fa75 	bl	8000eb4 <Error_Handler>
  }
  CmdCfg.VirtualChannelID = 0;
 80009ca:	2300      	movs	r3, #0
 80009cc:	603b      	str	r3, [r7, #0]
  CmdCfg.ColorCoding = DSI_RGB565;
 80009ce:	2300      	movs	r3, #0
 80009d0:	607b      	str	r3, [r7, #4]
  CmdCfg.CommandSize = 200;
 80009d2:	23c8      	movs	r3, #200	; 0xc8
 80009d4:	60bb      	str	r3, [r7, #8]
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 80009d6:	2310      	movs	r3, #16
 80009d8:	60fb      	str	r3, [r7, #12]
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 80009da:	2300      	movs	r3, #0
 80009dc:	613b      	str	r3, [r7, #16]
  CmdCfg.HSPolarity = DSI_HSYNC_ACTIVE_LOW;
 80009de:	2304      	movs	r3, #4
 80009e0:	617b      	str	r3, [r7, #20]
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_LOW;
 80009e2:	2302      	movs	r3, #2
 80009e4:	61bb      	str	r3, [r7, #24]
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 80009e6:	2300      	movs	r3, #0
 80009e8:	61fb      	str	r3, [r7, #28]
  CmdCfg.VSyncPol = DSI_VSYNC_FALLING;
 80009ea:	2300      	movs	r3, #0
 80009ec:	623b      	str	r3, [r7, #32]
  CmdCfg.AutomaticRefresh = DSI_AR_DISABLE;
 80009ee:	2300      	movs	r3, #0
 80009f0:	627b      	str	r3, [r7, #36]	; 0x24
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 80009f2:	2301      	movs	r3, #1
 80009f4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 80009f6:	463b      	mov	r3, r7
 80009f8:	4619      	mov	r1, r3
 80009fa:	480a      	ldr	r0, [pc, #40]	; (8000a24 <MX_DSIHOST_DSI_Init+0x1f8>)
 80009fc:	f002 fab4 	bl	8002f68 <HAL_DSI_ConfigAdaptedCommandMode>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_DSIHOST_DSI_Init+0x1de>
  {
    Error_Handler();
 8000a06:	f000 fa55 	bl	8000eb4 <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	4805      	ldr	r0, [pc, #20]	; (8000a24 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000a0e:	f002 fa82 	bl	8002f16 <HAL_DSI_SetGenericVCID>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_DSIHOST_DSI_Init+0x1f0>
  {
    Error_Handler();
 8000a18:	f000 fa4c 	bl	8000eb4 <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */

  /* USER CODE END DSIHOST_Init 2 */

}
 8000a1c:	bf00      	nop
 8000a1e:	37a8      	adds	r7, #168	; 0xa8
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	200097a8 	.word	0x200097a8
 8000a28:	40016c00 	.word	0x40016c00

08000a2c <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000a30:	4b1b      	ldr	r3, [pc, #108]	; (8000aa0 <MX_I2C4_Init+0x74>)
 8000a32:	4a1c      	ldr	r2, [pc, #112]	; (8000aa4 <MX_I2C4_Init+0x78>)
 8000a34:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00C0EAFF;
 8000a36:	4b1a      	ldr	r3, [pc, #104]	; (8000aa0 <MX_I2C4_Init+0x74>)
 8000a38:	4a1b      	ldr	r2, [pc, #108]	; (8000aa8 <MX_I2C4_Init+0x7c>)
 8000a3a:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000a3c:	4b18      	ldr	r3, [pc, #96]	; (8000aa0 <MX_I2C4_Init+0x74>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a42:	4b17      	ldr	r3, [pc, #92]	; (8000aa0 <MX_I2C4_Init+0x74>)
 8000a44:	2201      	movs	r2, #1
 8000a46:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a48:	4b15      	ldr	r3, [pc, #84]	; (8000aa0 <MX_I2C4_Init+0x74>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000a4e:	4b14      	ldr	r3, [pc, #80]	; (8000aa0 <MX_I2C4_Init+0x74>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a54:	4b12      	ldr	r3, [pc, #72]	; (8000aa0 <MX_I2C4_Init+0x74>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a5a:	4b11      	ldr	r3, [pc, #68]	; (8000aa0 <MX_I2C4_Init+0x74>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a60:	4b0f      	ldr	r3, [pc, #60]	; (8000aa0 <MX_I2C4_Init+0x74>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000a66:	480e      	ldr	r0, [pc, #56]	; (8000aa0 <MX_I2C4_Init+0x74>)
 8000a68:	f002 feea 	bl	8003840 <HAL_I2C_Init>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000a72:	f000 fa1f 	bl	8000eb4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a76:	2100      	movs	r1, #0
 8000a78:	4809      	ldr	r0, [pc, #36]	; (8000aa0 <MX_I2C4_Init+0x74>)
 8000a7a:	f002 ff8b 	bl	8003994 <HAL_I2CEx_ConfigAnalogFilter>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000a84:	f000 fa16 	bl	8000eb4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000a88:	2100      	movs	r1, #0
 8000a8a:	4805      	ldr	r0, [pc, #20]	; (8000aa0 <MX_I2C4_Init+0x74>)
 8000a8c:	f002 ffcd 	bl	8003a2a <HAL_I2CEx_ConfigDigitalFilter>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000a96:	f000 fa0d 	bl	8000eb4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000a9a:	bf00      	nop
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	200097c4 	.word	0x200097c4
 8000aa4:	40006000 	.word	0x40006000
 8000aa8:	00c0eaff 	.word	0x00c0eaff

08000aac <MX_JPEG_Init>:
  * @brief JPEG Initialization Function
  * @param None
  * @retval None
  */
static void MX_JPEG_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE END JPEG_Init 0 */

  /* USER CODE BEGIN JPEG_Init 1 */

  /* USER CODE END JPEG_Init 1 */
  hjpeg.Instance = JPEG;
 8000ab0:	4b06      	ldr	r3, [pc, #24]	; (8000acc <MX_JPEG_Init+0x20>)
 8000ab2:	4a07      	ldr	r2, [pc, #28]	; (8000ad0 <MX_JPEG_Init+0x24>)
 8000ab4:	601a      	str	r2, [r3, #0]
  if (HAL_JPEG_Init(&hjpeg) != HAL_OK)
 8000ab6:	4805      	ldr	r0, [pc, #20]	; (8000acc <MX_JPEG_Init+0x20>)
 8000ab8:	f003 f804 	bl	8003ac4 <HAL_JPEG_Init>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <MX_JPEG_Init+0x1a>
  {
    Error_Handler();
 8000ac2:	f000 f9f7 	bl	8000eb4 <Error_Handler>
  }
  /* USER CODE BEGIN JPEG_Init 2 */

  /* USER CODE END JPEG_Init 2 */

}
 8000ac6:	bf00      	nop
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	20009818 	.word	0x20009818
 8000ad0:	50051000 	.word	0x50051000

08000ad4 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b08e      	sub	sp, #56	; 0x38
 8000ad8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000ada:	1d3b      	adds	r3, r7, #4
 8000adc:	2234      	movs	r2, #52	; 0x34
 8000ade:	2100      	movs	r1, #0
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f022 fdf3 	bl	80236cc <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000ae6:	4b38      	ldr	r3, [pc, #224]	; (8000bc8 <MX_LTDC_Init+0xf4>)
 8000ae8:	4a38      	ldr	r2, [pc, #224]	; (8000bcc <MX_LTDC_Init+0xf8>)
 8000aea:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000aec:	4b36      	ldr	r3, [pc, #216]	; (8000bc8 <MX_LTDC_Init+0xf4>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000af2:	4b35      	ldr	r3, [pc, #212]	; (8000bc8 <MX_LTDC_Init+0xf4>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000af8:	4b33      	ldr	r3, [pc, #204]	; (8000bc8 <MX_LTDC_Init+0xf4>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000afe:	4b32      	ldr	r3, [pc, #200]	; (8000bc8 <MX_LTDC_Init+0xf4>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 1;
 8000b04:	4b30      	ldr	r3, [pc, #192]	; (8000bc8 <MX_LTDC_Init+0xf4>)
 8000b06:	2201      	movs	r2, #1
 8000b08:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8000b0a:	4b2f      	ldr	r3, [pc, #188]	; (8000bc8 <MX_LTDC_Init+0xf4>)
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 2;
 8000b10:	4b2d      	ldr	r3, [pc, #180]	; (8000bc8 <MX_LTDC_Init+0xf4>)
 8000b12:	2202      	movs	r2, #2
 8000b14:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 2;
 8000b16:	4b2c      	ldr	r3, [pc, #176]	; (8000bc8 <MX_LTDC_Init+0xf4>)
 8000b18:	2202      	movs	r2, #2
 8000b1a:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 202;
 8000b1c:	4b2a      	ldr	r3, [pc, #168]	; (8000bc8 <MX_LTDC_Init+0xf4>)
 8000b1e:	22ca      	movs	r2, #202	; 0xca
 8000b20:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 482;
 8000b22:	4b29      	ldr	r3, [pc, #164]	; (8000bc8 <MX_LTDC_Init+0xf4>)
 8000b24:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8000b28:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 203;
 8000b2a:	4b27      	ldr	r3, [pc, #156]	; (8000bc8 <MX_LTDC_Init+0xf4>)
 8000b2c:	22cb      	movs	r2, #203	; 0xcb
 8000b2e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 483;
 8000b30:	4b25      	ldr	r3, [pc, #148]	; (8000bc8 <MX_LTDC_Init+0xf4>)
 8000b32:	f240 12e3 	movw	r2, #483	; 0x1e3
 8000b36:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000b38:	4b23      	ldr	r3, [pc, #140]	; (8000bc8 <MX_LTDC_Init+0xf4>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000b40:	4b21      	ldr	r3, [pc, #132]	; (8000bc8 <MX_LTDC_Init+0xf4>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000b48:	4b1f      	ldr	r3, [pc, #124]	; (8000bc8 <MX_LTDC_Init+0xf4>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000b50:	481d      	ldr	r0, [pc, #116]	; (8000bc8 <MX_LTDC_Init+0xf4>)
 8000b52:	f004 ff1b 	bl	800598c <HAL_LTDC_Init>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <MX_LTDC_Init+0x8c>
  {
    Error_Handler();
 8000b5c:	f000 f9aa 	bl	8000eb4 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000b60:	2300      	movs	r3, #0
 8000b62:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 200;
 8000b64:	23c8      	movs	r3, #200	; 0xc8
 8000b66:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 480;
 8000b6c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000b70:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000b72:	2302      	movs	r3, #2
 8000b74:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000b76:	23ff      	movs	r3, #255	; 0xff
 8000b78:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000b7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b82:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000b84:	2305      	movs	r3, #5
 8000b86:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8000b88:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8000b8c:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 200;
 8000b8e:	23c8      	movs	r3, #200	; 0xc8
 8000b90:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 480;
 8000b92:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000b96:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000baa:	1d3b      	adds	r3, r7, #4
 8000bac:	2200      	movs	r2, #0
 8000bae:	4619      	mov	r1, r3
 8000bb0:	4805      	ldr	r0, [pc, #20]	; (8000bc8 <MX_LTDC_Init+0xf4>)
 8000bb2:	f005 f87d 	bl	8005cb0 <HAL_LTDC_ConfigLayer>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_LTDC_Init+0xec>
  {
    Error_Handler();
 8000bbc:	f000 f97a 	bl	8000eb4 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000bc0:	bf00      	nop
 8000bc2:	3738      	adds	r7, #56	; 0x38
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	20009930 	.word	0x20009930
 8000bcc:	40016800 	.word	0x40016800

08000bd0 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000bd4:	4b12      	ldr	r3, [pc, #72]	; (8000c20 <MX_QUADSPI_Init+0x50>)
 8000bd6:	4a13      	ldr	r2, [pc, #76]	; (8000c24 <MX_QUADSPI_Init+0x54>)
 8000bd8:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8000bda:	4b11      	ldr	r3, [pc, #68]	; (8000c20 <MX_QUADSPI_Init+0x50>)
 8000bdc:	2201      	movs	r2, #1
 8000bde:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 16;
 8000be0:	4b0f      	ldr	r3, [pc, #60]	; (8000c20 <MX_QUADSPI_Init+0x50>)
 8000be2:	2210      	movs	r2, #16
 8000be4:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000be6:	4b0e      	ldr	r3, [pc, #56]	; (8000c20 <MX_QUADSPI_Init+0x50>)
 8000be8:	2210      	movs	r2, #16
 8000bea:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 25;
 8000bec:	4b0c      	ldr	r3, [pc, #48]	; (8000c20 <MX_QUADSPI_Init+0x50>)
 8000bee:	2219      	movs	r2, #25
 8000bf0:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE;
 8000bf2:	4b0b      	ldr	r3, [pc, #44]	; (8000c20 <MX_QUADSPI_Init+0x50>)
 8000bf4:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000bf8:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000bfa:	4b09      	ldr	r3, [pc, #36]	; (8000c20 <MX_QUADSPI_Init+0x50>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000c00:	4b07      	ldr	r3, [pc, #28]	; (8000c20 <MX_QUADSPI_Init+0x50>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000c06:	4b06      	ldr	r3, [pc, #24]	; (8000c20 <MX_QUADSPI_Init+0x50>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000c0c:	4804      	ldr	r0, [pc, #16]	; (8000c20 <MX_QUADSPI_Init+0x50>)
 8000c0e:	f005 fa77 	bl	8006100 <HAL_QSPI_Init>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8000c18:	f000 f94c 	bl	8000eb4 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000c1c:	bf00      	nop
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	200099d8 	.word	0x200099d8
 8000c24:	a0001000 	.word	0xa0001000

08000c28 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c2c:	4b1b      	ldr	r3, [pc, #108]	; (8000c9c <MX_SPI1_Init+0x74>)
 8000c2e:	4a1c      	ldr	r2, [pc, #112]	; (8000ca0 <MX_SPI1_Init+0x78>)
 8000c30:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c32:	4b1a      	ldr	r3, [pc, #104]	; (8000c9c <MX_SPI1_Init+0x74>)
 8000c34:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c38:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c3a:	4b18      	ldr	r3, [pc, #96]	; (8000c9c <MX_SPI1_Init+0x74>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c40:	4b16      	ldr	r3, [pc, #88]	; (8000c9c <MX_SPI1_Init+0x74>)
 8000c42:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000c46:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c48:	4b14      	ldr	r3, [pc, #80]	; (8000c9c <MX_SPI1_Init+0x74>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c4e:	4b13      	ldr	r3, [pc, #76]	; (8000c9c <MX_SPI1_Init+0x74>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c54:	4b11      	ldr	r3, [pc, #68]	; (8000c9c <MX_SPI1_Init+0x74>)
 8000c56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c5a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c5c:	4b0f      	ldr	r3, [pc, #60]	; (8000c9c <MX_SPI1_Init+0x74>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c62:	4b0e      	ldr	r3, [pc, #56]	; (8000c9c <MX_SPI1_Init+0x74>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c68:	4b0c      	ldr	r3, [pc, #48]	; (8000c9c <MX_SPI1_Init+0x74>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c6e:	4b0b      	ldr	r3, [pc, #44]	; (8000c9c <MX_SPI1_Init+0x74>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000c74:	4b09      	ldr	r3, [pc, #36]	; (8000c9c <MX_SPI1_Init+0x74>)
 8000c76:	2207      	movs	r2, #7
 8000c78:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c7a:	4b08      	ldr	r3, [pc, #32]	; (8000c9c <MX_SPI1_Init+0x74>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c80:	4b06      	ldr	r3, [pc, #24]	; (8000c9c <MX_SPI1_Init+0x74>)
 8000c82:	2208      	movs	r2, #8
 8000c84:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c86:	4805      	ldr	r0, [pc, #20]	; (8000c9c <MX_SPI1_Init+0x74>)
 8000c88:	f006 fc0a 	bl	80074a0 <HAL_SPI_Init>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000c92:	f000 f90f 	bl	8000eb4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c96:	bf00      	nop
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	20009a24 	.word	0x20009a24
 8000ca0:	40013000 	.word	0x40013000

08000ca4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000caa:	4b10      	ldr	r3, [pc, #64]	; (8000cec <MX_DMA_Init+0x48>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	4a0f      	ldr	r2, [pc, #60]	; (8000cec <MX_DMA_Init+0x48>)
 8000cb0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb6:	4b0d      	ldr	r3, [pc, #52]	; (8000cec <MX_DMA_Init+0x48>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000cbe:	607b      	str	r3, [r7, #4]
 8000cc0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	2105      	movs	r1, #5
 8000cc6:	2038      	movs	r0, #56	; 0x38
 8000cc8:	f000 ffa4 	bl	8001c14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000ccc:	2038      	movs	r0, #56	; 0x38
 8000cce:	f000 ffbd 	bl	8001c4c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	2105      	movs	r1, #5
 8000cd6:	2039      	movs	r0, #57	; 0x39
 8000cd8:	f000 ff9c 	bl	8001c14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000cdc:	2039      	movs	r0, #57	; 0x39
 8000cde:	f000 ffb5 	bl	8001c4c <HAL_NVIC_EnableIRQ>

}
 8000ce2:	bf00      	nop
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	40023800 	.word	0x40023800

08000cf0 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b088      	sub	sp, #32
 8000cf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000cf6:	1d3b      	adds	r3, r7, #4
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	605a      	str	r2, [r3, #4]
 8000cfe:	609a      	str	r2, [r3, #8]
 8000d00:	60da      	str	r2, [r3, #12]
 8000d02:	611a      	str	r2, [r3, #16]
 8000d04:	615a      	str	r2, [r3, #20]
 8000d06:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000d08:	4b1f      	ldr	r3, [pc, #124]	; (8000d88 <MX_FMC_Init+0x98>)
 8000d0a:	4a20      	ldr	r2, [pc, #128]	; (8000d8c <MX_FMC_Init+0x9c>)
 8000d0c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000d0e:	4b1e      	ldr	r3, [pc, #120]	; (8000d88 <MX_FMC_Init+0x98>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000d14:	4b1c      	ldr	r3, [pc, #112]	; (8000d88 <MX_FMC_Init+0x98>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000d1a:	4b1b      	ldr	r3, [pc, #108]	; (8000d88 <MX_FMC_Init+0x98>)
 8000d1c:	2204      	movs	r2, #4
 8000d1e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8000d20:	4b19      	ldr	r3, [pc, #100]	; (8000d88 <MX_FMC_Init+0x98>)
 8000d22:	2220      	movs	r2, #32
 8000d24:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000d26:	4b18      	ldr	r3, [pc, #96]	; (8000d88 <MX_FMC_Init+0x98>)
 8000d28:	2240      	movs	r2, #64	; 0x40
 8000d2a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000d2c:	4b16      	ldr	r3, [pc, #88]	; (8000d88 <MX_FMC_Init+0x98>)
 8000d2e:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000d32:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000d34:	4b14      	ldr	r3, [pc, #80]	; (8000d88 <MX_FMC_Init+0x98>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000d3a:	4b13      	ldr	r3, [pc, #76]	; (8000d88 <MX_FMC_Init+0x98>)
 8000d3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d40:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000d42:	4b11      	ldr	r3, [pc, #68]	; (8000d88 <MX_FMC_Init+0x98>)
 8000d44:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d48:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000d4a:	4b0f      	ldr	r3, [pc, #60]	; (8000d88 <MX_FMC_Init+0x98>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000d50:	2302      	movs	r3, #2
 8000d52:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000d54:	2307      	movs	r3, #7
 8000d56:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000d58:	2304      	movs	r3, #4
 8000d5a:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000d5c:	2307      	movs	r3, #7
 8000d5e:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 2;
 8000d60:	2302      	movs	r3, #2
 8000d62:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000d64:	2302      	movs	r3, #2
 8000d66:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 3;
 8000d68:	2303      	movs	r3, #3
 8000d6a:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000d6c:	1d3b      	adds	r3, r7, #4
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4805      	ldr	r0, [pc, #20]	; (8000d88 <MX_FMC_Init+0x98>)
 8000d72:	f006 fb61 	bl	8007438 <HAL_SDRAM_Init>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000d7c:	f000 f89a 	bl	8000eb4 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000d80:	bf00      	nop
 8000d82:	3720      	adds	r7, #32
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	20009a88 	.word	0x20009a88
 8000d8c:	a0000140 	.word	0xa0000140

08000d90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b08b      	sub	sp, #44	; 0x2c
 8000d94:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d96:	4b39      	ldr	r3, [pc, #228]	; (8000e7c <MX_GPIO_Init+0xec>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9a:	4a38      	ldr	r2, [pc, #224]	; (8000e7c <MX_GPIO_Init+0xec>)
 8000d9c:	f043 0310 	orr.w	r3, r3, #16
 8000da0:	6313      	str	r3, [r2, #48]	; 0x30
 8000da2:	4b36      	ldr	r3, [pc, #216]	; (8000e7c <MX_GPIO_Init+0xec>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da6:	f003 0310 	and.w	r3, r3, #16
 8000daa:	627b      	str	r3, [r7, #36]	; 0x24
 8000dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dae:	4b33      	ldr	r3, [pc, #204]	; (8000e7c <MX_GPIO_Init+0xec>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db2:	4a32      	ldr	r2, [pc, #200]	; (8000e7c <MX_GPIO_Init+0xec>)
 8000db4:	f043 0302 	orr.w	r3, r3, #2
 8000db8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dba:	4b30      	ldr	r3, [pc, #192]	; (8000e7c <MX_GPIO_Init+0xec>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbe:	f003 0302 	and.w	r3, r3, #2
 8000dc2:	623b      	str	r3, [r7, #32]
 8000dc4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000dc6:	4b2d      	ldr	r3, [pc, #180]	; (8000e7c <MX_GPIO_Init+0xec>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dca:	4a2c      	ldr	r2, [pc, #176]	; (8000e7c <MX_GPIO_Init+0xec>)
 8000dcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd2:	4b2a      	ldr	r3, [pc, #168]	; (8000e7c <MX_GPIO_Init+0xec>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000dda:	61fb      	str	r3, [r7, #28]
 8000ddc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dde:	4b27      	ldr	r3, [pc, #156]	; (8000e7c <MX_GPIO_Init+0xec>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de2:	4a26      	ldr	r2, [pc, #152]	; (8000e7c <MX_GPIO_Init+0xec>)
 8000de4:	f043 0308 	orr.w	r3, r3, #8
 8000de8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dea:	4b24      	ldr	r3, [pc, #144]	; (8000e7c <MX_GPIO_Init+0xec>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dee:	f003 0308 	and.w	r3, r3, #8
 8000df2:	61bb      	str	r3, [r7, #24]
 8000df4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000df6:	4b21      	ldr	r3, [pc, #132]	; (8000e7c <MX_GPIO_Init+0xec>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfa:	4a20      	ldr	r2, [pc, #128]	; (8000e7c <MX_GPIO_Init+0xec>)
 8000dfc:	f043 0304 	orr.w	r3, r3, #4
 8000e00:	6313      	str	r3, [r2, #48]	; 0x30
 8000e02:	4b1e      	ldr	r3, [pc, #120]	; (8000e7c <MX_GPIO_Init+0xec>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e06:	f003 0304 	and.w	r3, r3, #4
 8000e0a:	617b      	str	r3, [r7, #20]
 8000e0c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000e0e:	4b1b      	ldr	r3, [pc, #108]	; (8000e7c <MX_GPIO_Init+0xec>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e12:	4a1a      	ldr	r2, [pc, #104]	; (8000e7c <MX_GPIO_Init+0xec>)
 8000e14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e18:	6313      	str	r3, [r2, #48]	; 0x30
 8000e1a:	4b18      	ldr	r3, [pc, #96]	; (8000e7c <MX_GPIO_Init+0xec>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e22:	613b      	str	r3, [r7, #16]
 8000e24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e26:	4b15      	ldr	r3, [pc, #84]	; (8000e7c <MX_GPIO_Init+0xec>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2a:	4a14      	ldr	r2, [pc, #80]	; (8000e7c <MX_GPIO_Init+0xec>)
 8000e2c:	f043 0320 	orr.w	r3, r3, #32
 8000e30:	6313      	str	r3, [r2, #48]	; 0x30
 8000e32:	4b12      	ldr	r3, [pc, #72]	; (8000e7c <MX_GPIO_Init+0xec>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e36:	f003 0320 	and.w	r3, r3, #32
 8000e3a:	60fb      	str	r3, [r7, #12]
 8000e3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e3e:	4b0f      	ldr	r3, [pc, #60]	; (8000e7c <MX_GPIO_Init+0xec>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e42:	4a0e      	ldr	r2, [pc, #56]	; (8000e7c <MX_GPIO_Init+0xec>)
 8000e44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e48:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4a:	4b0c      	ldr	r3, [pc, #48]	; (8000e7c <MX_GPIO_Init+0xec>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e52:	60bb      	str	r3, [r7, #8]
 8000e54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000e56:	4b09      	ldr	r3, [pc, #36]	; (8000e7c <MX_GPIO_Init+0xec>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5a:	4a08      	ldr	r2, [pc, #32]	; (8000e7c <MX_GPIO_Init+0xec>)
 8000e5c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e60:	6313      	str	r3, [r2, #48]	; 0x30
 8000e62:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <MX_GPIO_Init+0xec>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e6a:	607b      	str	r3, [r7, #4]
 8000e6c:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e6e:	bf00      	nop
 8000e70:	372c      	adds	r7, #44	; 0x2c
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	40023800 	.word	0x40023800

08000e80 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000e88:	2001      	movs	r0, #1
 8000e8a:	f007 f877 	bl	8007f7c <osDelay>
 8000e8e:	e7fb      	b.n	8000e88 <StartDefaultTask+0x8>

08000e90 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a04      	ldr	r2, [pc, #16]	; (8000eb0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d101      	bne.n	8000ea6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ea2:	f000 fdbb 	bl	8001a1c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ea6:	bf00      	nop
 8000ea8:	3708      	adds	r7, #8
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	40001000 	.word	0x40001000

08000eb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000eb8:	b672      	cpsid	i
}
 8000eba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ebc:	e7fe      	b.n	8000ebc <Error_Handler+0x8>
	...

08000ec0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000ec6:	4b11      	ldr	r3, [pc, #68]	; (8000f0c <HAL_MspInit+0x4c>)
 8000ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eca:	4a10      	ldr	r2, [pc, #64]	; (8000f0c <HAL_MspInit+0x4c>)
 8000ecc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ed0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ed2:	4b0e      	ldr	r3, [pc, #56]	; (8000f0c <HAL_MspInit+0x4c>)
 8000ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eda:	607b      	str	r3, [r7, #4]
 8000edc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ede:	4b0b      	ldr	r3, [pc, #44]	; (8000f0c <HAL_MspInit+0x4c>)
 8000ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ee2:	4a0a      	ldr	r2, [pc, #40]	; (8000f0c <HAL_MspInit+0x4c>)
 8000ee4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ee8:	6453      	str	r3, [r2, #68]	; 0x44
 8000eea:	4b08      	ldr	r3, [pc, #32]	; (8000f0c <HAL_MspInit+0x4c>)
 8000eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ef2:	603b      	str	r3, [r7, #0]
 8000ef4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	210f      	movs	r1, #15
 8000efa:	f06f 0001 	mvn.w	r0, #1
 8000efe:	f000 fe89 	bl	8001c14 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f02:	bf00      	nop
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	40023800 	.word	0x40023800

08000f10 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b085      	sub	sp, #20
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a0a      	ldr	r2, [pc, #40]	; (8000f48 <HAL_CRC_MspInit+0x38>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d10b      	bne.n	8000f3a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000f22:	4b0a      	ldr	r3, [pc, #40]	; (8000f4c <HAL_CRC_MspInit+0x3c>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	4a09      	ldr	r2, [pc, #36]	; (8000f4c <HAL_CRC_MspInit+0x3c>)
 8000f28:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2e:	4b07      	ldr	r3, [pc, #28]	; (8000f4c <HAL_CRC_MspInit+0x3c>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f36:	60fb      	str	r3, [r7, #12]
 8000f38:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000f3a:	bf00      	nop
 8000f3c:	3714      	adds	r7, #20
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	40023000 	.word	0x40023000
 8000f4c:	40023800 	.word	0x40023800

08000f50 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a0d      	ldr	r2, [pc, #52]	; (8000f94 <HAL_DMA2D_MspInit+0x44>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d113      	bne.n	8000f8a <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000f62:	4b0d      	ldr	r3, [pc, #52]	; (8000f98 <HAL_DMA2D_MspInit+0x48>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f66:	4a0c      	ldr	r2, [pc, #48]	; (8000f98 <HAL_DMA2D_MspInit+0x48>)
 8000f68:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f6e:	4b0a      	ldr	r3, [pc, #40]	; (8000f98 <HAL_DMA2D_MspInit+0x48>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f72:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000f76:	60fb      	str	r3, [r7, #12]
 8000f78:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	2105      	movs	r1, #5
 8000f7e:	205a      	movs	r0, #90	; 0x5a
 8000f80:	f000 fe48 	bl	8001c14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000f84:	205a      	movs	r0, #90	; 0x5a
 8000f86:	f000 fe61 	bl	8001c4c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8000f8a:	bf00      	nop
 8000f8c:	3710      	adds	r7, #16
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	4002b000 	.word	0x4002b000
 8000f98:	40023800 	.word	0x40023800

08000f9c <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b08a      	sub	sp, #40	; 0x28
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa4:	f107 0314 	add.w	r3, r7, #20
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	605a      	str	r2, [r3, #4]
 8000fae:	609a      	str	r2, [r3, #8]
 8000fb0:	60da      	str	r2, [r3, #12]
 8000fb2:	611a      	str	r2, [r3, #16]
  if(hdsi->Instance==DSI)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a1b      	ldr	r2, [pc, #108]	; (8001028 <HAL_DSI_MspInit+0x8c>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d12f      	bne.n	800101e <HAL_DSI_MspInit+0x82>
  {
  /* USER CODE BEGIN DSI_MspInit 0 */

  /* USER CODE END DSI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 8000fbe:	4b1b      	ldr	r3, [pc, #108]	; (800102c <HAL_DSI_MspInit+0x90>)
 8000fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fc2:	4a1a      	ldr	r2, [pc, #104]	; (800102c <HAL_DSI_MspInit+0x90>)
 8000fc4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000fc8:	6453      	str	r3, [r2, #68]	; 0x44
 8000fca:	4b18      	ldr	r3, [pc, #96]	; (800102c <HAL_DSI_MspInit+0x90>)
 8000fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000fd2:	613b      	str	r3, [r7, #16]
 8000fd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000fd6:	4b15      	ldr	r3, [pc, #84]	; (800102c <HAL_DSI_MspInit+0x90>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fda:	4a14      	ldr	r2, [pc, #80]	; (800102c <HAL_DSI_MspInit+0x90>)
 8000fdc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fe2:	4b12      	ldr	r3, [pc, #72]	; (800102c <HAL_DSI_MspInit+0x90>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000fea:	60fb      	str	r3, [r7, #12]
 8000fec:	68fb      	ldr	r3, [r7, #12]
    /**DSIHOST GPIO Configuration
    PJ2     ------> DSIHOST_TE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000fee:	2304      	movs	r3, #4
 8000ff0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 8000ffe:	230d      	movs	r3, #13
 8001000:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001002:	f107 0314 	add.w	r3, r7, #20
 8001006:	4619      	mov	r1, r3
 8001008:	4809      	ldr	r0, [pc, #36]	; (8001030 <HAL_DSI_MspInit+0x94>)
 800100a:	f002 fa6d 	bl	80034e8 <HAL_GPIO_Init>

    /* DSI interrupt Init */
    HAL_NVIC_SetPriority(DSI_IRQn, 5, 0);
 800100e:	2200      	movs	r2, #0
 8001010:	2105      	movs	r1, #5
 8001012:	2062      	movs	r0, #98	; 0x62
 8001014:	f000 fdfe 	bl	8001c14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 8001018:	2062      	movs	r0, #98	; 0x62
 800101a:	f000 fe17 	bl	8001c4c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }

}
 800101e:	bf00      	nop
 8001020:	3728      	adds	r7, #40	; 0x28
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	40016c00 	.word	0x40016c00
 800102c:	40023800 	.word	0x40023800
 8001030:	40022400 	.word	0x40022400

08001034 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b0ae      	sub	sp, #184	; 0xb8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800103c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	605a      	str	r2, [r3, #4]
 8001046:	609a      	str	r2, [r3, #8]
 8001048:	60da      	str	r2, [r3, #12]
 800104a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800104c:	f107 0314 	add.w	r3, r7, #20
 8001050:	2290      	movs	r2, #144	; 0x90
 8001052:	2100      	movs	r1, #0
 8001054:	4618      	mov	r0, r3
 8001056:	f022 fb39 	bl	80236cc <memset>
  if(hi2c->Instance==I2C4)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4a37      	ldr	r2, [pc, #220]	; (800113c <HAL_I2C_MspInit+0x108>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d166      	bne.n	8001132 <HAL_I2C_MspInit+0xfe>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001064:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001068:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 800106a:	2300      	movs	r3, #0
 800106c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001070:	f107 0314 	add.w	r3, r7, #20
 8001074:	4618      	mov	r0, r3
 8001076:	f005 fdb7 	bl	8006be8 <HAL_RCCEx_PeriphCLKConfig>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8001080:	f7ff ff18 	bl	8000eb4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001084:	4b2e      	ldr	r3, [pc, #184]	; (8001140 <HAL_I2C_MspInit+0x10c>)
 8001086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001088:	4a2d      	ldr	r2, [pc, #180]	; (8001140 <HAL_I2C_MspInit+0x10c>)
 800108a:	f043 0302 	orr.w	r3, r3, #2
 800108e:	6313      	str	r3, [r2, #48]	; 0x30
 8001090:	4b2b      	ldr	r3, [pc, #172]	; (8001140 <HAL_I2C_MspInit+0x10c>)
 8001092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001094:	f003 0302 	and.w	r3, r3, #2
 8001098:	613b      	str	r3, [r7, #16]
 800109a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800109c:	4b28      	ldr	r3, [pc, #160]	; (8001140 <HAL_I2C_MspInit+0x10c>)
 800109e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a0:	4a27      	ldr	r2, [pc, #156]	; (8001140 <HAL_I2C_MspInit+0x10c>)
 80010a2:	f043 0308 	orr.w	r3, r3, #8
 80010a6:	6313      	str	r3, [r2, #48]	; 0x30
 80010a8:	4b25      	ldr	r3, [pc, #148]	; (8001140 <HAL_I2C_MspInit+0x10c>)
 80010aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ac:	f003 0308 	and.w	r3, r3, #8
 80010b0:	60fb      	str	r3, [r7, #12]
 80010b2:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PB7     ------> I2C4_SDA
    PD12     ------> I2C4_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80010b4:	2380      	movs	r3, #128	; 0x80
 80010b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010ba:	2312      	movs	r3, #18
 80010bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010c0:	2301      	movs	r3, #1
 80010c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c6:	2303      	movs	r3, #3
 80010c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF11_I2C4;
 80010cc:	230b      	movs	r3, #11
 80010ce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010d2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80010d6:	4619      	mov	r1, r3
 80010d8:	481a      	ldr	r0, [pc, #104]	; (8001144 <HAL_I2C_MspInit+0x110>)
 80010da:	f002 fa05 	bl	80034e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80010de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010e6:	2312      	movs	r3, #18
 80010e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010ec:	2301      	movs	r3, #1
 80010ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010f2:	2303      	movs	r3, #3
 80010f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80010f8:	2304      	movs	r3, #4
 80010fa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010fe:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001102:	4619      	mov	r1, r3
 8001104:	4810      	ldr	r0, [pc, #64]	; (8001148 <HAL_I2C_MspInit+0x114>)
 8001106:	f002 f9ef 	bl	80034e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 800110a:	4b0d      	ldr	r3, [pc, #52]	; (8001140 <HAL_I2C_MspInit+0x10c>)
 800110c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110e:	4a0c      	ldr	r2, [pc, #48]	; (8001140 <HAL_I2C_MspInit+0x10c>)
 8001110:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001114:	6413      	str	r3, [r2, #64]	; 0x40
 8001116:	4b0a      	ldr	r3, [pc, #40]	; (8001140 <HAL_I2C_MspInit+0x10c>)
 8001118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800111e:	60bb      	str	r3, [r7, #8]
 8001120:	68bb      	ldr	r3, [r7, #8]
    /* I2C4 interrupt Init */
    HAL_NVIC_SetPriority(I2C4_EV_IRQn, 5, 0);
 8001122:	2200      	movs	r2, #0
 8001124:	2105      	movs	r1, #5
 8001126:	205f      	movs	r0, #95	; 0x5f
 8001128:	f000 fd74 	bl	8001c14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_EV_IRQn);
 800112c:	205f      	movs	r0, #95	; 0x5f
 800112e:	f000 fd8d 	bl	8001c4c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8001132:	bf00      	nop
 8001134:	37b8      	adds	r7, #184	; 0xb8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	40006000 	.word	0x40006000
 8001140:	40023800 	.word	0x40023800
 8001144:	40020400 	.word	0x40020400
 8001148:	40020c00 	.word	0x40020c00

0800114c <HAL_JPEG_MspInit>:
* This function configures the hardware resources used in this example
* @param hjpeg: JPEG handle pointer
* @retval None
*/
void HAL_JPEG_MspInit(JPEG_HandleTypeDef* hjpeg)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  if(hjpeg->Instance==JPEG)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a48      	ldr	r2, [pc, #288]	; (800127c <HAL_JPEG_MspInit+0x130>)
 800115a:	4293      	cmp	r3, r2
 800115c:	f040 808a 	bne.w	8001274 <HAL_JPEG_MspInit+0x128>
  {
  /* USER CODE BEGIN JPEG_MspInit 0 */

  /* USER CODE END JPEG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_JPEG_CLK_ENABLE();
 8001160:	4b47      	ldr	r3, [pc, #284]	; (8001280 <HAL_JPEG_MspInit+0x134>)
 8001162:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001164:	4a46      	ldr	r2, [pc, #280]	; (8001280 <HAL_JPEG_MspInit+0x134>)
 8001166:	f043 0302 	orr.w	r3, r3, #2
 800116a:	6353      	str	r3, [r2, #52]	; 0x34
 800116c:	4b44      	ldr	r3, [pc, #272]	; (8001280 <HAL_JPEG_MspInit+0x134>)
 800116e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001170:	f003 0302 	and.w	r3, r3, #2
 8001174:	60fb      	str	r3, [r7, #12]
 8001176:	68fb      	ldr	r3, [r7, #12]

    /* JPEG DMA Init */
    /* JPEG_IN Init */
    hdma_jpeg_in.Instance = DMA2_Stream0;
 8001178:	4b42      	ldr	r3, [pc, #264]	; (8001284 <HAL_JPEG_MspInit+0x138>)
 800117a:	4a43      	ldr	r2, [pc, #268]	; (8001288 <HAL_JPEG_MspInit+0x13c>)
 800117c:	601a      	str	r2, [r3, #0]
    hdma_jpeg_in.Init.Channel = DMA_CHANNEL_9;
 800117e:	4b41      	ldr	r3, [pc, #260]	; (8001284 <HAL_JPEG_MspInit+0x138>)
 8001180:	f04f 5290 	mov.w	r2, #301989888	; 0x12000000
 8001184:	605a      	str	r2, [r3, #4]
    hdma_jpeg_in.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001186:	4b3f      	ldr	r3, [pc, #252]	; (8001284 <HAL_JPEG_MspInit+0x138>)
 8001188:	2240      	movs	r2, #64	; 0x40
 800118a:	609a      	str	r2, [r3, #8]
    hdma_jpeg_in.Init.PeriphInc = DMA_PINC_DISABLE;
 800118c:	4b3d      	ldr	r3, [pc, #244]	; (8001284 <HAL_JPEG_MspInit+0x138>)
 800118e:	2200      	movs	r2, #0
 8001190:	60da      	str	r2, [r3, #12]
    hdma_jpeg_in.Init.MemInc = DMA_MINC_ENABLE;
 8001192:	4b3c      	ldr	r3, [pc, #240]	; (8001284 <HAL_JPEG_MspInit+0x138>)
 8001194:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001198:	611a      	str	r2, [r3, #16]
    hdma_jpeg_in.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800119a:	4b3a      	ldr	r3, [pc, #232]	; (8001284 <HAL_JPEG_MspInit+0x138>)
 800119c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011a0:	615a      	str	r2, [r3, #20]
    hdma_jpeg_in.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80011a2:	4b38      	ldr	r3, [pc, #224]	; (8001284 <HAL_JPEG_MspInit+0x138>)
 80011a4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011a8:	619a      	str	r2, [r3, #24]
    hdma_jpeg_in.Init.Mode = DMA_NORMAL;
 80011aa:	4b36      	ldr	r3, [pc, #216]	; (8001284 <HAL_JPEG_MspInit+0x138>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	61da      	str	r2, [r3, #28]
    hdma_jpeg_in.Init.Priority = DMA_PRIORITY_LOW;
 80011b0:	4b34      	ldr	r3, [pc, #208]	; (8001284 <HAL_JPEG_MspInit+0x138>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	621a      	str	r2, [r3, #32]
    hdma_jpeg_in.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80011b6:	4b33      	ldr	r3, [pc, #204]	; (8001284 <HAL_JPEG_MspInit+0x138>)
 80011b8:	2204      	movs	r2, #4
 80011ba:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_jpeg_in.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80011bc:	4b31      	ldr	r3, [pc, #196]	; (8001284 <HAL_JPEG_MspInit+0x138>)
 80011be:	2203      	movs	r2, #3
 80011c0:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_jpeg_in.Init.MemBurst = DMA_MBURST_INC4;
 80011c2:	4b30      	ldr	r3, [pc, #192]	; (8001284 <HAL_JPEG_MspInit+0x138>)
 80011c4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80011c8:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_jpeg_in.Init.PeriphBurst = DMA_PBURST_INC4;
 80011ca:	4b2e      	ldr	r3, [pc, #184]	; (8001284 <HAL_JPEG_MspInit+0x138>)
 80011cc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80011d0:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_jpeg_in) != HAL_OK)
 80011d2:	482c      	ldr	r0, [pc, #176]	; (8001284 <HAL_JPEG_MspInit+0x138>)
 80011d4:	f000 fe32 	bl	8001e3c <HAL_DMA_Init>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <HAL_JPEG_MspInit+0x96>
    {
      Error_Handler();
 80011de:	f7ff fe69 	bl	8000eb4 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmain,hdma_jpeg_in);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4a27      	ldr	r2, [pc, #156]	; (8001284 <HAL_JPEG_MspInit+0x138>)
 80011e6:	631a      	str	r2, [r3, #48]	; 0x30
 80011e8:	4a26      	ldr	r2, [pc, #152]	; (8001284 <HAL_JPEG_MspInit+0x138>)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6393      	str	r3, [r2, #56]	; 0x38

    /* JPEG_OUT Init */
    hdma_jpeg_out.Instance = DMA2_Stream1;
 80011ee:	4b27      	ldr	r3, [pc, #156]	; (800128c <HAL_JPEG_MspInit+0x140>)
 80011f0:	4a27      	ldr	r2, [pc, #156]	; (8001290 <HAL_JPEG_MspInit+0x144>)
 80011f2:	601a      	str	r2, [r3, #0]
    hdma_jpeg_out.Init.Channel = DMA_CHANNEL_9;
 80011f4:	4b25      	ldr	r3, [pc, #148]	; (800128c <HAL_JPEG_MspInit+0x140>)
 80011f6:	f04f 5290 	mov.w	r2, #301989888	; 0x12000000
 80011fa:	605a      	str	r2, [r3, #4]
    hdma_jpeg_out.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011fc:	4b23      	ldr	r3, [pc, #140]	; (800128c <HAL_JPEG_MspInit+0x140>)
 80011fe:	2200      	movs	r2, #0
 8001200:	609a      	str	r2, [r3, #8]
    hdma_jpeg_out.Init.PeriphInc = DMA_PINC_DISABLE;
 8001202:	4b22      	ldr	r3, [pc, #136]	; (800128c <HAL_JPEG_MspInit+0x140>)
 8001204:	2200      	movs	r2, #0
 8001206:	60da      	str	r2, [r3, #12]
    hdma_jpeg_out.Init.MemInc = DMA_MINC_ENABLE;
 8001208:	4b20      	ldr	r3, [pc, #128]	; (800128c <HAL_JPEG_MspInit+0x140>)
 800120a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800120e:	611a      	str	r2, [r3, #16]
    hdma_jpeg_out.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001210:	4b1e      	ldr	r3, [pc, #120]	; (800128c <HAL_JPEG_MspInit+0x140>)
 8001212:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001216:	615a      	str	r2, [r3, #20]
    hdma_jpeg_out.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001218:	4b1c      	ldr	r3, [pc, #112]	; (800128c <HAL_JPEG_MspInit+0x140>)
 800121a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800121e:	619a      	str	r2, [r3, #24]
    hdma_jpeg_out.Init.Mode = DMA_NORMAL;
 8001220:	4b1a      	ldr	r3, [pc, #104]	; (800128c <HAL_JPEG_MspInit+0x140>)
 8001222:	2200      	movs	r2, #0
 8001224:	61da      	str	r2, [r3, #28]
    hdma_jpeg_out.Init.Priority = DMA_PRIORITY_LOW;
 8001226:	4b19      	ldr	r3, [pc, #100]	; (800128c <HAL_JPEG_MspInit+0x140>)
 8001228:	2200      	movs	r2, #0
 800122a:	621a      	str	r2, [r3, #32]
    hdma_jpeg_out.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800122c:	4b17      	ldr	r3, [pc, #92]	; (800128c <HAL_JPEG_MspInit+0x140>)
 800122e:	2204      	movs	r2, #4
 8001230:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_jpeg_out.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001232:	4b16      	ldr	r3, [pc, #88]	; (800128c <HAL_JPEG_MspInit+0x140>)
 8001234:	2203      	movs	r2, #3
 8001236:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_jpeg_out.Init.MemBurst = DMA_MBURST_INC4;
 8001238:	4b14      	ldr	r3, [pc, #80]	; (800128c <HAL_JPEG_MspInit+0x140>)
 800123a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800123e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_jpeg_out.Init.PeriphBurst = DMA_PBURST_INC4;
 8001240:	4b12      	ldr	r3, [pc, #72]	; (800128c <HAL_JPEG_MspInit+0x140>)
 8001242:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001246:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_jpeg_out) != HAL_OK)
 8001248:	4810      	ldr	r0, [pc, #64]	; (800128c <HAL_JPEG_MspInit+0x140>)
 800124a:	f000 fdf7 	bl	8001e3c <HAL_DMA_Init>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <HAL_JPEG_MspInit+0x10c>
    {
      Error_Handler();
 8001254:	f7ff fe2e 	bl	8000eb4 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmaout,hdma_jpeg_out);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	4a0c      	ldr	r2, [pc, #48]	; (800128c <HAL_JPEG_MspInit+0x140>)
 800125c:	635a      	str	r2, [r3, #52]	; 0x34
 800125e:	4a0b      	ldr	r2, [pc, #44]	; (800128c <HAL_JPEG_MspInit+0x140>)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6393      	str	r3, [r2, #56]	; 0x38

    /* JPEG interrupt Init */
    HAL_NVIC_SetPriority(JPEG_IRQn, 5, 0);
 8001264:	2200      	movs	r2, #0
 8001266:	2105      	movs	r1, #5
 8001268:	206c      	movs	r0, #108	; 0x6c
 800126a:	f000 fcd3 	bl	8001c14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
 800126e:	206c      	movs	r0, #108	; 0x6c
 8001270:	f000 fcec 	bl	8001c4c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN JPEG_MspInit 1 */

  /* USER CODE END JPEG_MspInit 1 */
  }

}
 8001274:	bf00      	nop
 8001276:	3710      	adds	r7, #16
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	50051000 	.word	0x50051000
 8001280:	40023800 	.word	0x40023800
 8001284:	20009870 	.word	0x20009870
 8001288:	40026410 	.word	0x40026410
 800128c:	200098d0 	.word	0x200098d0
 8001290:	40026428 	.word	0x40026428

08001294 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b0a8      	sub	sp, #160	; 0xa0
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800129c:	f107 0310 	add.w	r3, r7, #16
 80012a0:	2290      	movs	r2, #144	; 0x90
 80012a2:	2100      	movs	r1, #0
 80012a4:	4618      	mov	r0, r3
 80012a6:	f022 fa11 	bl	80236cc <memset>
  if(hltdc->Instance==LTDC)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a1a      	ldr	r2, [pc, #104]	; (8001318 <HAL_LTDC_MspInit+0x84>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d12c      	bne.n	800130e <HAL_LTDC_MspInit+0x7a>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80012b4:	2308      	movs	r3, #8
 80012b6:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 80012b8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80012bc:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 7;
 80012be:	2307      	movs	r3, #7
 80012c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80012c2:	2302      	movs	r3, #2
 80012c4:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 80012c6:	2300      	movs	r3, #0
 80012c8:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 80012ca:	2301      	movs	r3, #1
 80012cc:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80012ce:	2300      	movs	r3, #0
 80012d0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012d2:	f107 0310 	add.w	r3, r7, #16
 80012d6:	4618      	mov	r0, r3
 80012d8:	f005 fc86 	bl	8006be8 <HAL_RCCEx_PeriphCLKConfig>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <HAL_LTDC_MspInit+0x52>
    {
      Error_Handler();
 80012e2:	f7ff fde7 	bl	8000eb4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80012e6:	4b0d      	ldr	r3, [pc, #52]	; (800131c <HAL_LTDC_MspInit+0x88>)
 80012e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ea:	4a0c      	ldr	r2, [pc, #48]	; (800131c <HAL_LTDC_MspInit+0x88>)
 80012ec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80012f0:	6453      	str	r3, [r2, #68]	; 0x44
 80012f2:	4b0a      	ldr	r3, [pc, #40]	; (800131c <HAL_LTDC_MspInit+0x88>)
 80012f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80012fa:	60fb      	str	r3, [r7, #12]
 80012fc:	68fb      	ldr	r3, [r7, #12]
    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80012fe:	2200      	movs	r2, #0
 8001300:	2105      	movs	r1, #5
 8001302:	2058      	movs	r0, #88	; 0x58
 8001304:	f000 fc86 	bl	8001c14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001308:	2058      	movs	r0, #88	; 0x58
 800130a:	f000 fc9f 	bl	8001c4c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800130e:	bf00      	nop
 8001310:	37a0      	adds	r7, #160	; 0xa0
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	40016800 	.word	0x40016800
 800131c:	40023800 	.word	0x40023800

08001320 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b08c      	sub	sp, #48	; 0x30
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001328:	f107 031c 	add.w	r3, r7, #28
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	605a      	str	r2, [r3, #4]
 8001332:	609a      	str	r2, [r3, #8]
 8001334:	60da      	str	r2, [r3, #12]
 8001336:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a4a      	ldr	r2, [pc, #296]	; (8001468 <HAL_QSPI_MspInit+0x148>)
 800133e:	4293      	cmp	r3, r2
 8001340:	f040 808e 	bne.w	8001460 <HAL_QSPI_MspInit+0x140>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001344:	4b49      	ldr	r3, [pc, #292]	; (800146c <HAL_QSPI_MspInit+0x14c>)
 8001346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001348:	4a48      	ldr	r2, [pc, #288]	; (800146c <HAL_QSPI_MspInit+0x14c>)
 800134a:	f043 0302 	orr.w	r3, r3, #2
 800134e:	6393      	str	r3, [r2, #56]	; 0x38
 8001350:	4b46      	ldr	r3, [pc, #280]	; (800146c <HAL_QSPI_MspInit+0x14c>)
 8001352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001354:	f003 0302 	and.w	r3, r3, #2
 8001358:	61bb      	str	r3, [r7, #24]
 800135a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800135c:	4b43      	ldr	r3, [pc, #268]	; (800146c <HAL_QSPI_MspInit+0x14c>)
 800135e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001360:	4a42      	ldr	r2, [pc, #264]	; (800146c <HAL_QSPI_MspInit+0x14c>)
 8001362:	f043 0310 	orr.w	r3, r3, #16
 8001366:	6313      	str	r3, [r2, #48]	; 0x30
 8001368:	4b40      	ldr	r3, [pc, #256]	; (800146c <HAL_QSPI_MspInit+0x14c>)
 800136a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136c:	f003 0310 	and.w	r3, r3, #16
 8001370:	617b      	str	r3, [r7, #20]
 8001372:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001374:	4b3d      	ldr	r3, [pc, #244]	; (800146c <HAL_QSPI_MspInit+0x14c>)
 8001376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001378:	4a3c      	ldr	r2, [pc, #240]	; (800146c <HAL_QSPI_MspInit+0x14c>)
 800137a:	f043 0302 	orr.w	r3, r3, #2
 800137e:	6313      	str	r3, [r2, #48]	; 0x30
 8001380:	4b3a      	ldr	r3, [pc, #232]	; (800146c <HAL_QSPI_MspInit+0x14c>)
 8001382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001384:	f003 0302 	and.w	r3, r3, #2
 8001388:	613b      	str	r3, [r7, #16]
 800138a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800138c:	4b37      	ldr	r3, [pc, #220]	; (800146c <HAL_QSPI_MspInit+0x14c>)
 800138e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001390:	4a36      	ldr	r2, [pc, #216]	; (800146c <HAL_QSPI_MspInit+0x14c>)
 8001392:	f043 0304 	orr.w	r3, r3, #4
 8001396:	6313      	str	r3, [r2, #48]	; 0x30
 8001398:	4b34      	ldr	r3, [pc, #208]	; (800146c <HAL_QSPI_MspInit+0x14c>)
 800139a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139c:	f003 0304 	and.w	r3, r3, #4
 80013a0:	60fb      	str	r3, [r7, #12]
 80013a2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013a4:	4b31      	ldr	r3, [pc, #196]	; (800146c <HAL_QSPI_MspInit+0x14c>)
 80013a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a8:	4a30      	ldr	r2, [pc, #192]	; (800146c <HAL_QSPI_MspInit+0x14c>)
 80013aa:	f043 0308 	orr.w	r3, r3, #8
 80013ae:	6313      	str	r3, [r2, #48]	; 0x30
 80013b0:	4b2e      	ldr	r3, [pc, #184]	; (800146c <HAL_QSPI_MspInit+0x14c>)
 80013b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b4:	f003 0308 	and.w	r3, r3, #8
 80013b8:	60bb      	str	r3, [r7, #8]
 80013ba:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> QUADSPI_BK1_IO1
    PC9     ------> QUADSPI_BK1_IO0
    PB2     ------> QUADSPI_CLK
    PD13     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80013bc:	2304      	movs	r3, #4
 80013be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c0:	2302      	movs	r3, #2
 80013c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c4:	2300      	movs	r3, #0
 80013c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013c8:	2303      	movs	r3, #3
 80013ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80013cc:	2309      	movs	r3, #9
 80013ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013d0:	f107 031c 	add.w	r3, r7, #28
 80013d4:	4619      	mov	r1, r3
 80013d6:	4826      	ldr	r0, [pc, #152]	; (8001470 <HAL_QSPI_MspInit+0x150>)
 80013d8:	f002 f886 	bl	80034e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80013dc:	2340      	movs	r3, #64	; 0x40
 80013de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e0:	2302      	movs	r3, #2
 80013e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013e4:	2301      	movs	r3, #1
 80013e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013e8:	2303      	movs	r3, #3
 80013ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80013ec:	230a      	movs	r3, #10
 80013ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013f0:	f107 031c 	add.w	r3, r7, #28
 80013f4:	4619      	mov	r1, r3
 80013f6:	481f      	ldr	r0, [pc, #124]	; (8001474 <HAL_QSPI_MspInit+0x154>)
 80013f8:	f002 f876 	bl	80034e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 80013fc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001400:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001402:	2302      	movs	r3, #2
 8001404:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001406:	2300      	movs	r3, #0
 8001408:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800140a:	2303      	movs	r3, #3
 800140c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800140e:	2309      	movs	r3, #9
 8001410:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001412:	f107 031c 	add.w	r3, r7, #28
 8001416:	4619      	mov	r1, r3
 8001418:	4817      	ldr	r0, [pc, #92]	; (8001478 <HAL_QSPI_MspInit+0x158>)
 800141a:	f002 f865 	bl	80034e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800141e:	2304      	movs	r3, #4
 8001420:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001422:	2302      	movs	r3, #2
 8001424:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001426:	2300      	movs	r3, #0
 8001428:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800142a:	2303      	movs	r3, #3
 800142c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800142e:	2309      	movs	r3, #9
 8001430:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001432:	f107 031c 	add.w	r3, r7, #28
 8001436:	4619      	mov	r1, r3
 8001438:	480e      	ldr	r0, [pc, #56]	; (8001474 <HAL_QSPI_MspInit+0x154>)
 800143a:	f002 f855 	bl	80034e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800143e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001442:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001444:	2302      	movs	r3, #2
 8001446:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001448:	2300      	movs	r3, #0
 800144a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800144c:	2303      	movs	r3, #3
 800144e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001450:	2309      	movs	r3, #9
 8001452:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001454:	f107 031c 	add.w	r3, r7, #28
 8001458:	4619      	mov	r1, r3
 800145a:	4808      	ldr	r0, [pc, #32]	; (800147c <HAL_QSPI_MspInit+0x15c>)
 800145c:	f002 f844 	bl	80034e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001460:	bf00      	nop
 8001462:	3730      	adds	r7, #48	; 0x30
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	a0001000 	.word	0xa0001000
 800146c:	40023800 	.word	0x40023800
 8001470:	40021000 	.word	0x40021000
 8001474:	40020400 	.word	0x40020400
 8001478:	40020800 	.word	0x40020800
 800147c:	40020c00 	.word	0x40020c00

08001480 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b08a      	sub	sp, #40	; 0x28
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001488:	f107 0314 	add.w	r3, r7, #20
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	605a      	str	r2, [r3, #4]
 8001492:	609a      	str	r2, [r3, #8]
 8001494:	60da      	str	r2, [r3, #12]
 8001496:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a17      	ldr	r2, [pc, #92]	; (80014fc <HAL_SPI_MspInit+0x7c>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d127      	bne.n	80014f2 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80014a2:	4b17      	ldr	r3, [pc, #92]	; (8001500 <HAL_SPI_MspInit+0x80>)
 80014a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014a6:	4a16      	ldr	r2, [pc, #88]	; (8001500 <HAL_SPI_MspInit+0x80>)
 80014a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80014ac:	6453      	str	r3, [r2, #68]	; 0x44
 80014ae:	4b14      	ldr	r3, [pc, #80]	; (8001500 <HAL_SPI_MspInit+0x80>)
 80014b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014b6:	613b      	str	r3, [r7, #16]
 80014b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ba:	4b11      	ldr	r3, [pc, #68]	; (8001500 <HAL_SPI_MspInit+0x80>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	4a10      	ldr	r2, [pc, #64]	; (8001500 <HAL_SPI_MspInit+0x80>)
 80014c0:	f043 0302 	orr.w	r3, r3, #2
 80014c4:	6313      	str	r3, [r2, #48]	; 0x30
 80014c6:	4b0e      	ldr	r3, [pc, #56]	; (8001500 <HAL_SPI_MspInit+0x80>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	f003 0302 	and.w	r3, r3, #2
 80014ce:	60fb      	str	r3, [r7, #12]
 80014d0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB5     ------> SPI1_MOSI
    PB4     ------> SPI1_MISO
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_3;
 80014d2:	2338      	movs	r3, #56	; 0x38
 80014d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d6:	2302      	movs	r3, #2
 80014d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014da:	2300      	movs	r3, #0
 80014dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014de:	2303      	movs	r3, #3
 80014e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80014e2:	2305      	movs	r3, #5
 80014e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014e6:	f107 0314 	add.w	r3, r7, #20
 80014ea:	4619      	mov	r1, r3
 80014ec:	4805      	ldr	r0, [pc, #20]	; (8001504 <HAL_SPI_MspInit+0x84>)
 80014ee:	f001 fffb 	bl	80034e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80014f2:	bf00      	nop
 80014f4:	3728      	adds	r7, #40	; 0x28
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	40013000 	.word	0x40013000
 8001500:	40023800 	.word	0x40023800
 8001504:	40020400 	.word	0x40020400

08001508 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001508:	b580      	push	{r7, lr}
 800150a:	b086      	sub	sp, #24
 800150c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800150e:	1d3b      	adds	r3, r7, #4
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
 8001514:	605a      	str	r2, [r3, #4]
 8001516:	609a      	str	r2, [r3, #8]
 8001518:	60da      	str	r2, [r3, #12]
 800151a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800151c:	4b3b      	ldr	r3, [pc, #236]	; (800160c <HAL_FMC_MspInit+0x104>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d16f      	bne.n	8001604 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8001524:	4b39      	ldr	r3, [pc, #228]	; (800160c <HAL_FMC_MspInit+0x104>)
 8001526:	2201      	movs	r2, #1
 8001528:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800152a:	4b39      	ldr	r3, [pc, #228]	; (8001610 <HAL_FMC_MspInit+0x108>)
 800152c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800152e:	4a38      	ldr	r2, [pc, #224]	; (8001610 <HAL_FMC_MspInit+0x108>)
 8001530:	f043 0301 	orr.w	r3, r3, #1
 8001534:	6393      	str	r3, [r2, #56]	; 0x38
 8001536:	4b36      	ldr	r3, [pc, #216]	; (8001610 <HAL_FMC_MspInit+0x108>)
 8001538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800153a:	f003 0301 	and.w	r3, r3, #1
 800153e:	603b      	str	r3, [r7, #0]
 8001540:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9
 8001542:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001546:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_7|GPIO_PIN_10
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001548:	2302      	movs	r3, #2
 800154a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154c:	2300      	movs	r3, #0
 800154e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001550:	2303      	movs	r3, #3
 8001552:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001554:	230c      	movs	r3, #12
 8001556:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001558:	1d3b      	adds	r3, r7, #4
 800155a:	4619      	mov	r1, r3
 800155c:	482d      	ldr	r0, [pc, #180]	; (8001614 <HAL_FMC_MspInit+0x10c>)
 800155e:	f001 ffc3 	bl	80034e8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0
 8001562:	f248 1333 	movw	r3, #33075	; 0x8133
 8001566:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001568:	2302      	movs	r3, #2
 800156a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156c:	2300      	movs	r3, #0
 800156e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001570:	2303      	movs	r3, #3
 8001572:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001574:	230c      	movs	r3, #12
 8001576:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001578:	1d3b      	adds	r3, r7, #4
 800157a:	4619      	mov	r1, r3
 800157c:	4826      	ldr	r0, [pc, #152]	; (8001618 <HAL_FMC_MspInit+0x110>)
 800157e:	f001 ffb3 	bl	80034e8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
 8001582:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001586:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001588:	2302      	movs	r3, #2
 800158a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158c:	2300      	movs	r3, #0
 800158e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001590:	2303      	movs	r3, #3
 8001592:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001594:	230c      	movs	r3, #12
 8001596:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001598:	1d3b      	adds	r3, r7, #4
 800159a:	4619      	mov	r1, r3
 800159c:	481f      	ldr	r0, [pc, #124]	; (800161c <HAL_FMC_MspInit+0x114>)
 800159e:	f001 ffa3 	bl	80034e8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_5
 80015a2:	f240 63ff 	movw	r3, #1791	; 0x6ff
 80015a6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_6|GPIO_PIN_1
                          |GPIO_PIN_9|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a8:	2302      	movs	r3, #2
 80015aa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ac:	2300      	movs	r3, #0
 80015ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015b0:	2303      	movs	r3, #3
 80015b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80015b4:	230c      	movs	r3, #12
 80015b6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80015b8:	1d3b      	adds	r3, r7, #4
 80015ba:	4619      	mov	r1, r3
 80015bc:	4818      	ldr	r0, [pc, #96]	; (8001620 <HAL_FMC_MspInit+0x118>)
 80015be:	f001 ff93 	bl	80034e8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80015c2:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80015c6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_15
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c8:	2302      	movs	r3, #2
 80015ca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015cc:	2300      	movs	r3, #0
 80015ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015d0:	2303      	movs	r3, #3
 80015d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80015d4:	230c      	movs	r3, #12
 80015d6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80015d8:	1d3b      	adds	r3, r7, #4
 80015da:	4619      	mov	r1, r3
 80015dc:	4811      	ldr	r0, [pc, #68]	; (8001624 <HAL_FMC_MspInit+0x11c>)
 80015de:	f001 ff83 	bl	80034e8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_5
 80015e2:	f64f 732c 	movw	r3, #65324	; 0xff2c
 80015e6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_9
                          |GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e8:	2302      	movs	r3, #2
 80015ea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ec:	2300      	movs	r3, #0
 80015ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015f0:	2303      	movs	r3, #3
 80015f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80015f4:	230c      	movs	r3, #12
 80015f6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80015f8:	1d3b      	adds	r3, r7, #4
 80015fa:	4619      	mov	r1, r3
 80015fc:	480a      	ldr	r0, [pc, #40]	; (8001628 <HAL_FMC_MspInit+0x120>)
 80015fe:	f001 ff73 	bl	80034e8 <HAL_GPIO_Init>
 8001602:	e000      	b.n	8001606 <HAL_FMC_MspInit+0xfe>
    return;
 8001604:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001606:	3718      	adds	r7, #24
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	20009ac8 	.word	0x20009ac8
 8001610:	40023800 	.word	0x40023800
 8001614:	40021000 	.word	0x40021000
 8001618:	40021800 	.word	0x40021800
 800161c:	40020c00 	.word	0x40020c00
 8001620:	40022000 	.word	0x40022000
 8001624:	40021400 	.word	0x40021400
 8001628:	40021c00 	.word	0x40021c00

0800162c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001634:	f7ff ff68 	bl	8001508 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001638:	bf00      	nop
 800163a:	3708      	adds	r7, #8
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}

08001640 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b08e      	sub	sp, #56	; 0x38
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001648:	2300      	movs	r3, #0
 800164a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800164c:	2300      	movs	r3, #0
 800164e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001650:	4b33      	ldr	r3, [pc, #204]	; (8001720 <HAL_InitTick+0xe0>)
 8001652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001654:	4a32      	ldr	r2, [pc, #200]	; (8001720 <HAL_InitTick+0xe0>)
 8001656:	f043 0310 	orr.w	r3, r3, #16
 800165a:	6413      	str	r3, [r2, #64]	; 0x40
 800165c:	4b30      	ldr	r3, [pc, #192]	; (8001720 <HAL_InitTick+0xe0>)
 800165e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001660:	f003 0310 	and.w	r3, r3, #16
 8001664:	60fb      	str	r3, [r7, #12]
 8001666:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001668:	f107 0210 	add.w	r2, r7, #16
 800166c:	f107 0314 	add.w	r3, r7, #20
 8001670:	4611      	mov	r1, r2
 8001672:	4618      	mov	r0, r3
 8001674:	f005 fa86 	bl	8006b84 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001678:	6a3b      	ldr	r3, [r7, #32]
 800167a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800167c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800167e:	2b00      	cmp	r3, #0
 8001680:	d103      	bne.n	800168a <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001682:	f005 fa6b 	bl	8006b5c <HAL_RCC_GetPCLK1Freq>
 8001686:	6378      	str	r0, [r7, #52]	; 0x34
 8001688:	e004      	b.n	8001694 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800168a:	f005 fa67 	bl	8006b5c <HAL_RCC_GetPCLK1Freq>
 800168e:	4603      	mov	r3, r0
 8001690:	005b      	lsls	r3, r3, #1
 8001692:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001694:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001696:	4a23      	ldr	r2, [pc, #140]	; (8001724 <HAL_InitTick+0xe4>)
 8001698:	fba2 2303 	umull	r2, r3, r2, r3
 800169c:	0c9b      	lsrs	r3, r3, #18
 800169e:	3b01      	subs	r3, #1
 80016a0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80016a2:	4b21      	ldr	r3, [pc, #132]	; (8001728 <HAL_InitTick+0xe8>)
 80016a4:	4a21      	ldr	r2, [pc, #132]	; (800172c <HAL_InitTick+0xec>)
 80016a6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80016a8:	4b1f      	ldr	r3, [pc, #124]	; (8001728 <HAL_InitTick+0xe8>)
 80016aa:	f240 32e7 	movw	r2, #999	; 0x3e7
 80016ae:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80016b0:	4a1d      	ldr	r2, [pc, #116]	; (8001728 <HAL_InitTick+0xe8>)
 80016b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016b4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80016b6:	4b1c      	ldr	r3, [pc, #112]	; (8001728 <HAL_InitTick+0xe8>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016bc:	4b1a      	ldr	r3, [pc, #104]	; (8001728 <HAL_InitTick+0xe8>)
 80016be:	2200      	movs	r2, #0
 80016c0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016c2:	4b19      	ldr	r3, [pc, #100]	; (8001728 <HAL_InitTick+0xe8>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80016c8:	4817      	ldr	r0, [pc, #92]	; (8001728 <HAL_InitTick+0xe8>)
 80016ca:	f005 ff94 	bl	80075f6 <HAL_TIM_Base_Init>
 80016ce:	4603      	mov	r3, r0
 80016d0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80016d4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d11b      	bne.n	8001714 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80016dc:	4812      	ldr	r0, [pc, #72]	; (8001728 <HAL_InitTick+0xe8>)
 80016de:	f005 ffeb 	bl	80076b8 <HAL_TIM_Base_Start_IT>
 80016e2:	4603      	mov	r3, r0
 80016e4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80016e8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d111      	bne.n	8001714 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80016f0:	2036      	movs	r0, #54	; 0x36
 80016f2:	f000 faab 	bl	8001c4c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2b0f      	cmp	r3, #15
 80016fa:	d808      	bhi.n	800170e <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80016fc:	2200      	movs	r2, #0
 80016fe:	6879      	ldr	r1, [r7, #4]
 8001700:	2036      	movs	r0, #54	; 0x36
 8001702:	f000 fa87 	bl	8001c14 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001706:	4a0a      	ldr	r2, [pc, #40]	; (8001730 <HAL_InitTick+0xf0>)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6013      	str	r3, [r2, #0]
 800170c:	e002      	b.n	8001714 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001714:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001718:	4618      	mov	r0, r3
 800171a:	3738      	adds	r7, #56	; 0x38
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	40023800 	.word	0x40023800
 8001724:	431bde83 	.word	0x431bde83
 8001728:	20009acc 	.word	0x20009acc
 800172c:	40001000 	.word	0x40001000
 8001730:	20000008 	.word	0x20000008

08001734 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001738:	e7fe      	b.n	8001738 <NMI_Handler+0x4>

0800173a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800173a:	b480      	push	{r7}
 800173c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800173e:	e7fe      	b.n	800173e <HardFault_Handler+0x4>

08001740 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001744:	e7fe      	b.n	8001744 <MemManage_Handler+0x4>

08001746 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001746:	b480      	push	{r7}
 8001748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800174a:	e7fe      	b.n	800174a <BusFault_Handler+0x4>

0800174c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001750:	e7fe      	b.n	8001750 <UsageFault_Handler+0x4>

08001752 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001752:	b480      	push	{r7}
 8001754:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001756:	bf00      	nop
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr

08001760 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001764:	4802      	ldr	r0, [pc, #8]	; (8001770 <TIM6_DAC_IRQHandler+0x10>)
 8001766:	f006 f81f 	bl	80077a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800176a:	bf00      	nop
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	20009acc 	.word	0x20009acc

08001774 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_jpeg_in);
 8001778:	4802      	ldr	r0, [pc, #8]	; (8001784 <DMA2_Stream0_IRQHandler+0x10>)
 800177a:	f000 fc8f 	bl	800209c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	20009870 	.word	0x20009870

08001788 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_jpeg_out);
 800178c:	4802      	ldr	r0, [pc, #8]	; (8001798 <DMA2_Stream1_IRQHandler+0x10>)
 800178e:	f000 fc85 	bl	800209c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001792:	bf00      	nop
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	200098d0 	.word	0x200098d0

0800179c <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80017a0:	4802      	ldr	r0, [pc, #8]	; (80017ac <LTDC_IRQHandler+0x10>)
 80017a2:	f004 f9c3 	bl	8005b2c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	20009930 	.word	0x20009930

080017b0 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80017b4:	4802      	ldr	r0, [pc, #8]	; (80017c0 <DMA2D_IRQHandler+0x10>)
 80017b6:	f000 ff41 	bl	800263c <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80017ba:	bf00      	nop
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	20009750 	.word	0x20009750

080017c4 <I2C4_EV_IRQHandler>:

/**
  * @brief This function handles I2C4 event interrupt.
  */
void I2C4_EV_IRQHandler(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_EV_IRQn 0 */

  /* USER CODE END I2C4_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c4);
 80017c8:	4802      	ldr	r0, [pc, #8]	; (80017d4 <I2C4_EV_IRQHandler+0x10>)
 80017ca:	f002 f8c9 	bl	8003960 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C4_EV_IRQn 1 */

  /* USER CODE END I2C4_EV_IRQn 1 */
}
 80017ce:	bf00      	nop
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	200097c4 	.word	0x200097c4

080017d8 <DSI_IRQHandler>:

/**
  * @brief This function handles DSI global interrupt.
  */
void DSI_IRQHandler(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 80017dc:	4802      	ldr	r0, [pc, #8]	; (80017e8 <DSI_IRQHandler+0x10>)
 80017de:	f001 fab3 	bl	8002d48 <HAL_DSI_IRQHandler>
  /* USER CODE BEGIN DSI_IRQn 1 */

  /* USER CODE END DSI_IRQn 1 */
}
 80017e2:	bf00      	nop
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	200097a8 	.word	0x200097a8

080017ec <JPEG_IRQHandler>:

/**
  * @brief This function handles JPEG global interrupt.
  */
void JPEG_IRQHandler(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN JPEG_IRQn 0 */

  /* USER CODE END JPEG_IRQn 0 */
  HAL_JPEG_IRQHandler(&hjpeg);
 80017f0:	4802      	ldr	r0, [pc, #8]	; (80017fc <JPEG_IRQHandler+0x10>)
 80017f2:	f002 fc3f 	bl	8004074 <HAL_JPEG_IRQHandler>
  /* USER CODE BEGIN JPEG_IRQn 1 */

  /* USER CODE END JPEG_IRQn 1 */
}
 80017f6:	bf00      	nop
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	20009818 	.word	0x20009818

08001800 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  return 1;
 8001804:	2301      	movs	r3, #1
}
 8001806:	4618      	mov	r0, r3
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr

08001810 <_kill>:

int _kill(int pid, int sig)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800181a:	f021 fef9 	bl	8023610 <__errno>
 800181e:	4603      	mov	r3, r0
 8001820:	2216      	movs	r2, #22
 8001822:	601a      	str	r2, [r3, #0]
  return -1;
 8001824:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001828:	4618      	mov	r0, r3
 800182a:	3708      	adds	r7, #8
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}

08001830 <_exit>:

void _exit (int status)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001838:	f04f 31ff 	mov.w	r1, #4294967295
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	f7ff ffe7 	bl	8001810 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001842:	e7fe      	b.n	8001842 <_exit+0x12>

08001844 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b086      	sub	sp, #24
 8001848:	af00      	add	r7, sp, #0
 800184a:	60f8      	str	r0, [r7, #12]
 800184c:	60b9      	str	r1, [r7, #8]
 800184e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001850:	2300      	movs	r3, #0
 8001852:	617b      	str	r3, [r7, #20]
 8001854:	e00a      	b.n	800186c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001856:	f3af 8000 	nop.w
 800185a:	4601      	mov	r1, r0
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	1c5a      	adds	r2, r3, #1
 8001860:	60ba      	str	r2, [r7, #8]
 8001862:	b2ca      	uxtb	r2, r1
 8001864:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	3301      	adds	r3, #1
 800186a:	617b      	str	r3, [r7, #20]
 800186c:	697a      	ldr	r2, [r7, #20]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	429a      	cmp	r2, r3
 8001872:	dbf0      	blt.n	8001856 <_read+0x12>
  }

  return len;
 8001874:	687b      	ldr	r3, [r7, #4]
}
 8001876:	4618      	mov	r0, r3
 8001878:	3718      	adds	r7, #24
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}

0800187e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800187e:	b580      	push	{r7, lr}
 8001880:	b086      	sub	sp, #24
 8001882:	af00      	add	r7, sp, #0
 8001884:	60f8      	str	r0, [r7, #12]
 8001886:	60b9      	str	r1, [r7, #8]
 8001888:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800188a:	2300      	movs	r3, #0
 800188c:	617b      	str	r3, [r7, #20]
 800188e:	e009      	b.n	80018a4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	1c5a      	adds	r2, r3, #1
 8001894:	60ba      	str	r2, [r7, #8]
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	4618      	mov	r0, r3
 800189a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	3301      	adds	r3, #1
 80018a2:	617b      	str	r3, [r7, #20]
 80018a4:	697a      	ldr	r2, [r7, #20]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	dbf1      	blt.n	8001890 <_write+0x12>
  }
  return len;
 80018ac:	687b      	ldr	r3, [r7, #4]
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3718      	adds	r7, #24
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}

080018b6 <_close>:

int _close(int file)
{
 80018b6:	b480      	push	{r7}
 80018b8:	b083      	sub	sp, #12
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	370c      	adds	r7, #12
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr

080018ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018ce:	b480      	push	{r7}
 80018d0:	b083      	sub	sp, #12
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	6078      	str	r0, [r7, #4]
 80018d6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018de:	605a      	str	r2, [r3, #4]
  return 0;
 80018e0:	2300      	movs	r3, #0
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	370c      	adds	r7, #12
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr

080018ee <_isatty>:

int _isatty(int file)
{
 80018ee:	b480      	push	{r7}
 80018f0:	b083      	sub	sp, #12
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018f6:	2301      	movs	r3, #1
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	370c      	adds	r7, #12
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr

08001904 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001904:	b480      	push	{r7}
 8001906:	b085      	sub	sp, #20
 8001908:	af00      	add	r7, sp, #0
 800190a:	60f8      	str	r0, [r7, #12]
 800190c:	60b9      	str	r1, [r7, #8]
 800190e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001910:	2300      	movs	r3, #0
}
 8001912:	4618      	mov	r0, r3
 8001914:	3714      	adds	r7, #20
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
	...

08001920 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b086      	sub	sp, #24
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001928:	4a14      	ldr	r2, [pc, #80]	; (800197c <_sbrk+0x5c>)
 800192a:	4b15      	ldr	r3, [pc, #84]	; (8001980 <_sbrk+0x60>)
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001934:	4b13      	ldr	r3, [pc, #76]	; (8001984 <_sbrk+0x64>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d102      	bne.n	8001942 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800193c:	4b11      	ldr	r3, [pc, #68]	; (8001984 <_sbrk+0x64>)
 800193e:	4a12      	ldr	r2, [pc, #72]	; (8001988 <_sbrk+0x68>)
 8001940:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001942:	4b10      	ldr	r3, [pc, #64]	; (8001984 <_sbrk+0x64>)
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4413      	add	r3, r2
 800194a:	693a      	ldr	r2, [r7, #16]
 800194c:	429a      	cmp	r2, r3
 800194e:	d207      	bcs.n	8001960 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001950:	f021 fe5e 	bl	8023610 <__errno>
 8001954:	4603      	mov	r3, r0
 8001956:	220c      	movs	r2, #12
 8001958:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800195a:	f04f 33ff 	mov.w	r3, #4294967295
 800195e:	e009      	b.n	8001974 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001960:	4b08      	ldr	r3, [pc, #32]	; (8001984 <_sbrk+0x64>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001966:	4b07      	ldr	r3, [pc, #28]	; (8001984 <_sbrk+0x64>)
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4413      	add	r3, r2
 800196e:	4a05      	ldr	r2, [pc, #20]	; (8001984 <_sbrk+0x64>)
 8001970:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001972:	68fb      	ldr	r3, [r7, #12]
}
 8001974:	4618      	mov	r0, r3
 8001976:	3718      	adds	r7, #24
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	20080000 	.word	0x20080000
 8001980:	00001000 	.word	0x00001000
 8001984:	20009b18 	.word	0x20009b18
 8001988:	20024680 	.word	0x20024680

0800198c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001990:	4b06      	ldr	r3, [pc, #24]	; (80019ac <SystemInit+0x20>)
 8001992:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001996:	4a05      	ldr	r2, [pc, #20]	; (80019ac <SystemInit+0x20>)
 8001998:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800199c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019a0:	bf00      	nop
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	e000ed00 	.word	0xe000ed00

080019b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80019b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019e8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019b4:	480d      	ldr	r0, [pc, #52]	; (80019ec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80019b6:	490e      	ldr	r1, [pc, #56]	; (80019f0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80019b8:	4a0e      	ldr	r2, [pc, #56]	; (80019f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019bc:	e002      	b.n	80019c4 <LoopCopyDataInit>

080019be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019c2:	3304      	adds	r3, #4

080019c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019c8:	d3f9      	bcc.n	80019be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019ca:	4a0b      	ldr	r2, [pc, #44]	; (80019f8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80019cc:	4c0b      	ldr	r4, [pc, #44]	; (80019fc <LoopFillZerobss+0x26>)
  movs r3, #0
 80019ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019d0:	e001      	b.n	80019d6 <LoopFillZerobss>

080019d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019d4:	3204      	adds	r2, #4

080019d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019d8:	d3fb      	bcc.n	80019d2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80019da:	f7ff ffd7 	bl	800198c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019de:	f021 fe2f 	bl	8023640 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019e2:	f7fe fe07 	bl	80005f4 <main>
  bx  lr    
 80019e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80019e8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80019ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019f0:	20000110 	.word	0x20000110
  ldr r2, =_sidata
 80019f4:	08028048 	.word	0x08028048
  ldr r2, =_sbss
 80019f8:	20009710 	.word	0x20009710
  ldr r4, =_ebss
 80019fc:	20024680 	.word	0x20024680

08001a00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a00:	e7fe      	b.n	8001a00 <ADC_IRQHandler>

08001a02 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a02:	b580      	push	{r7, lr}
 8001a04:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a06:	2003      	movs	r0, #3
 8001a08:	f000 f8f9 	bl	8001bfe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a0c:	200f      	movs	r0, #15
 8001a0e:	f7ff fe17 	bl	8001640 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a12:	f7ff fa55 	bl	8000ec0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a16:	2300      	movs	r3, #0
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	bd80      	pop	{r7, pc}

08001a1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a20:	4b06      	ldr	r3, [pc, #24]	; (8001a3c <HAL_IncTick+0x20>)
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	461a      	mov	r2, r3
 8001a26:	4b06      	ldr	r3, [pc, #24]	; (8001a40 <HAL_IncTick+0x24>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4413      	add	r3, r2
 8001a2c:	4a04      	ldr	r2, [pc, #16]	; (8001a40 <HAL_IncTick+0x24>)
 8001a2e:	6013      	str	r3, [r2, #0]
}
 8001a30:	bf00      	nop
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	2000000c 	.word	0x2000000c
 8001a40:	20009b1c 	.word	0x20009b1c

08001a44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  return uwTick;
 8001a48:	4b03      	ldr	r3, [pc, #12]	; (8001a58 <HAL_GetTick+0x14>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	20009b1c 	.word	0x20009b1c

08001a5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b084      	sub	sp, #16
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a64:	f7ff ffee 	bl	8001a44 <HAL_GetTick>
 8001a68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a74:	d005      	beq.n	8001a82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a76:	4b0a      	ldr	r3, [pc, #40]	; (8001aa0 <HAL_Delay+0x44>)
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	4413      	add	r3, r2
 8001a80:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a82:	bf00      	nop
 8001a84:	f7ff ffde 	bl	8001a44 <HAL_GetTick>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	68fa      	ldr	r2, [r7, #12]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d8f7      	bhi.n	8001a84 <HAL_Delay+0x28>
  {
  }
}
 8001a94:	bf00      	nop
 8001a96:	bf00      	nop
 8001a98:	3710      	adds	r7, #16
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	2000000c 	.word	0x2000000c

08001aa4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b085      	sub	sp, #20
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	f003 0307 	and.w	r3, r3, #7
 8001ab2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ab4:	4b0b      	ldr	r3, [pc, #44]	; (8001ae4 <__NVIC_SetPriorityGrouping+0x40>)
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aba:	68ba      	ldr	r2, [r7, #8]
 8001abc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001acc:	4b06      	ldr	r3, [pc, #24]	; (8001ae8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ad2:	4a04      	ldr	r2, [pc, #16]	; (8001ae4 <__NVIC_SetPriorityGrouping+0x40>)
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	60d3      	str	r3, [r2, #12]
}
 8001ad8:	bf00      	nop
 8001ada:	3714      	adds	r7, #20
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr
 8001ae4:	e000ed00 	.word	0xe000ed00
 8001ae8:	05fa0000 	.word	0x05fa0000

08001aec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001af0:	4b04      	ldr	r3, [pc, #16]	; (8001b04 <__NVIC_GetPriorityGrouping+0x18>)
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	0a1b      	lsrs	r3, r3, #8
 8001af6:	f003 0307 	and.w	r3, r3, #7
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr
 8001b04:	e000ed00 	.word	0xe000ed00

08001b08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	4603      	mov	r3, r0
 8001b10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	db0b      	blt.n	8001b32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b1a:	79fb      	ldrb	r3, [r7, #7]
 8001b1c:	f003 021f 	and.w	r2, r3, #31
 8001b20:	4907      	ldr	r1, [pc, #28]	; (8001b40 <__NVIC_EnableIRQ+0x38>)
 8001b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b26:	095b      	lsrs	r3, r3, #5
 8001b28:	2001      	movs	r0, #1
 8001b2a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b32:	bf00      	nop
 8001b34:	370c      	adds	r7, #12
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	e000e100 	.word	0xe000e100

08001b44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	6039      	str	r1, [r7, #0]
 8001b4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	db0a      	blt.n	8001b6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	b2da      	uxtb	r2, r3
 8001b5c:	490c      	ldr	r1, [pc, #48]	; (8001b90 <__NVIC_SetPriority+0x4c>)
 8001b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b62:	0112      	lsls	r2, r2, #4
 8001b64:	b2d2      	uxtb	r2, r2
 8001b66:	440b      	add	r3, r1
 8001b68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b6c:	e00a      	b.n	8001b84 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	b2da      	uxtb	r2, r3
 8001b72:	4908      	ldr	r1, [pc, #32]	; (8001b94 <__NVIC_SetPriority+0x50>)
 8001b74:	79fb      	ldrb	r3, [r7, #7]
 8001b76:	f003 030f 	and.w	r3, r3, #15
 8001b7a:	3b04      	subs	r3, #4
 8001b7c:	0112      	lsls	r2, r2, #4
 8001b7e:	b2d2      	uxtb	r2, r2
 8001b80:	440b      	add	r3, r1
 8001b82:	761a      	strb	r2, [r3, #24]
}
 8001b84:	bf00      	nop
 8001b86:	370c      	adds	r7, #12
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr
 8001b90:	e000e100 	.word	0xe000e100
 8001b94:	e000ed00 	.word	0xe000ed00

08001b98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b089      	sub	sp, #36	; 0x24
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	60f8      	str	r0, [r7, #12]
 8001ba0:	60b9      	str	r1, [r7, #8]
 8001ba2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	f003 0307 	and.w	r3, r3, #7
 8001baa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	f1c3 0307 	rsb	r3, r3, #7
 8001bb2:	2b04      	cmp	r3, #4
 8001bb4:	bf28      	it	cs
 8001bb6:	2304      	movcs	r3, #4
 8001bb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	3304      	adds	r3, #4
 8001bbe:	2b06      	cmp	r3, #6
 8001bc0:	d902      	bls.n	8001bc8 <NVIC_EncodePriority+0x30>
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	3b03      	subs	r3, #3
 8001bc6:	e000      	b.n	8001bca <NVIC_EncodePriority+0x32>
 8001bc8:	2300      	movs	r3, #0
 8001bca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bcc:	f04f 32ff 	mov.w	r2, #4294967295
 8001bd0:	69bb      	ldr	r3, [r7, #24]
 8001bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd6:	43da      	mvns	r2, r3
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	401a      	ands	r2, r3
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001be0:	f04f 31ff 	mov.w	r1, #4294967295
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	fa01 f303 	lsl.w	r3, r1, r3
 8001bea:	43d9      	mvns	r1, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bf0:	4313      	orrs	r3, r2
         );
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3724      	adds	r7, #36	; 0x24
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr

08001bfe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bfe:	b580      	push	{r7, lr}
 8001c00:	b082      	sub	sp, #8
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f7ff ff4c 	bl	8001aa4 <__NVIC_SetPriorityGrouping>
}
 8001c0c:	bf00      	nop
 8001c0e:	3708      	adds	r7, #8
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}

08001c14 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b086      	sub	sp, #24
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	60b9      	str	r1, [r7, #8]
 8001c1e:	607a      	str	r2, [r7, #4]
 8001c20:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001c22:	2300      	movs	r3, #0
 8001c24:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c26:	f7ff ff61 	bl	8001aec <__NVIC_GetPriorityGrouping>
 8001c2a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c2c:	687a      	ldr	r2, [r7, #4]
 8001c2e:	68b9      	ldr	r1, [r7, #8]
 8001c30:	6978      	ldr	r0, [r7, #20]
 8001c32:	f7ff ffb1 	bl	8001b98 <NVIC_EncodePriority>
 8001c36:	4602      	mov	r2, r0
 8001c38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c3c:	4611      	mov	r1, r2
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7ff ff80 	bl	8001b44 <__NVIC_SetPriority>
}
 8001c44:	bf00      	nop
 8001c46:	3718      	adds	r7, #24
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}

08001c4c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	4603      	mov	r3, r0
 8001c54:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f7ff ff54 	bl	8001b08 <__NVIC_EnableIRQ>
}
 8001c60:	bf00      	nop
 8001c62:	3708      	adds	r7, #8
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}

08001c68 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d101      	bne.n	8001c7a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e054      	b.n	8001d24 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	7f5b      	ldrb	r3, [r3, #29]
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d105      	bne.n	8001c90 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2200      	movs	r2, #0
 8001c88:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f7ff f940 	bl	8000f10 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2202      	movs	r2, #2
 8001c94:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	791b      	ldrb	r3, [r3, #4]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d10c      	bne.n	8001cb8 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a22      	ldr	r2, [pc, #136]	; (8001d2c <HAL_CRC_Init+0xc4>)
 8001ca4:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	689a      	ldr	r2, [r3, #8]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f022 0218 	bic.w	r2, r2, #24
 8001cb4:	609a      	str	r2, [r3, #8]
 8001cb6:	e00c      	b.n	8001cd2 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6899      	ldr	r1, [r3, #8]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f000 f834 	bl	8001d30 <HAL_CRCEx_Polynomial_Set>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e028      	b.n	8001d24 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	795b      	ldrb	r3, [r3, #5]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d105      	bne.n	8001ce6 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f04f 32ff 	mov.w	r2, #4294967295
 8001ce2:	611a      	str	r2, [r3, #16]
 8001ce4:	e004      	b.n	8001cf0 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	6912      	ldr	r2, [r2, #16]
 8001cee:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	695a      	ldr	r2, [r3, #20]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	430a      	orrs	r2, r1
 8001d04:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	699a      	ldr	r2, [r3, #24]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	430a      	orrs	r2, r1
 8001d1a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2201      	movs	r2, #1
 8001d20:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8001d22:	2300      	movs	r3, #0
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3708      	adds	r7, #8
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	04c11db7 	.word	0x04c11db7

08001d30 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b087      	sub	sp, #28
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	60f8      	str	r0, [r7, #12]
 8001d38:	60b9      	str	r1, [r7, #8]
 8001d3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001d40:	231f      	movs	r3, #31
 8001d42:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001d44:	bf00      	nop
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	1e5a      	subs	r2, r3, #1
 8001d4a:	613a      	str	r2, [r7, #16]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d009      	beq.n	8001d64 <HAL_CRCEx_Polynomial_Set+0x34>
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	f003 031f 	and.w	r3, r3, #31
 8001d56:	68ba      	ldr	r2, [r7, #8]
 8001d58:	fa22 f303 	lsr.w	r3, r2, r3
 8001d5c:	f003 0301 	and.w	r3, r3, #1
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d0f0      	beq.n	8001d46 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2b18      	cmp	r3, #24
 8001d68:	d846      	bhi.n	8001df8 <HAL_CRCEx_Polynomial_Set+0xc8>
 8001d6a:	a201      	add	r2, pc, #4	; (adr r2, 8001d70 <HAL_CRCEx_Polynomial_Set+0x40>)
 8001d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d70:	08001dff 	.word	0x08001dff
 8001d74:	08001df9 	.word	0x08001df9
 8001d78:	08001df9 	.word	0x08001df9
 8001d7c:	08001df9 	.word	0x08001df9
 8001d80:	08001df9 	.word	0x08001df9
 8001d84:	08001df9 	.word	0x08001df9
 8001d88:	08001df9 	.word	0x08001df9
 8001d8c:	08001df9 	.word	0x08001df9
 8001d90:	08001ded 	.word	0x08001ded
 8001d94:	08001df9 	.word	0x08001df9
 8001d98:	08001df9 	.word	0x08001df9
 8001d9c:	08001df9 	.word	0x08001df9
 8001da0:	08001df9 	.word	0x08001df9
 8001da4:	08001df9 	.word	0x08001df9
 8001da8:	08001df9 	.word	0x08001df9
 8001dac:	08001df9 	.word	0x08001df9
 8001db0:	08001de1 	.word	0x08001de1
 8001db4:	08001df9 	.word	0x08001df9
 8001db8:	08001df9 	.word	0x08001df9
 8001dbc:	08001df9 	.word	0x08001df9
 8001dc0:	08001df9 	.word	0x08001df9
 8001dc4:	08001df9 	.word	0x08001df9
 8001dc8:	08001df9 	.word	0x08001df9
 8001dcc:	08001df9 	.word	0x08001df9
 8001dd0:	08001dd5 	.word	0x08001dd5
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	2b06      	cmp	r3, #6
 8001dd8:	d913      	bls.n	8001e02 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001dde:	e010      	b.n	8001e02 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	2b07      	cmp	r3, #7
 8001de4:	d90f      	bls.n	8001e06 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001dea:	e00c      	b.n	8001e06 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	2b0f      	cmp	r3, #15
 8001df0:	d90b      	bls.n	8001e0a <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001df6:	e008      	b.n	8001e0a <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	75fb      	strb	r3, [r7, #23]
      break;
 8001dfc:	e006      	b.n	8001e0c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001dfe:	bf00      	nop
 8001e00:	e004      	b.n	8001e0c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001e02:	bf00      	nop
 8001e04:	e002      	b.n	8001e0c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001e06:	bf00      	nop
 8001e08:	e000      	b.n	8001e0c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001e0a:	bf00      	nop
  }
  if (status == HAL_OK)
 8001e0c:	7dfb      	ldrb	r3, [r7, #23]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d10d      	bne.n	8001e2e <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	68ba      	ldr	r2, [r7, #8]
 8001e18:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	f023 0118 	bic.w	r1, r3, #24
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	687a      	ldr	r2, [r7, #4]
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001e2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	371c      	adds	r7, #28
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr

08001e3c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b086      	sub	sp, #24
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e44:	2300      	movs	r3, #0
 8001e46:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001e48:	f7ff fdfc 	bl	8001a44 <HAL_GetTick>
 8001e4c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d101      	bne.n	8001e58 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e099      	b.n	8001f8c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2202      	movs	r2, #2
 8001e5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2200      	movs	r2, #0
 8001e64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f022 0201 	bic.w	r2, r2, #1
 8001e76:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e78:	e00f      	b.n	8001e9a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e7a:	f7ff fde3 	bl	8001a44 <HAL_GetTick>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	1ad3      	subs	r3, r2, r3
 8001e84:	2b05      	cmp	r3, #5
 8001e86:	d908      	bls.n	8001e9a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2220      	movs	r2, #32
 8001e8c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2203      	movs	r2, #3
 8001e92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e078      	b.n	8001f8c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 0301 	and.w	r3, r3, #1
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d1e8      	bne.n	8001e7a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001eb0:	697a      	ldr	r2, [r7, #20]
 8001eb2:	4b38      	ldr	r3, [pc, #224]	; (8001f94 <HAL_DMA_Init+0x158>)
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	685a      	ldr	r2, [r3, #4]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ec6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	691b      	ldr	r3, [r3, #16]
 8001ecc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ed2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	699b      	ldr	r3, [r3, #24]
 8001ed8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ede:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6a1b      	ldr	r3, [r3, #32]
 8001ee4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ee6:	697a      	ldr	r2, [r7, #20]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef0:	2b04      	cmp	r3, #4
 8001ef2:	d107      	bne.n	8001f04 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efc:	4313      	orrs	r3, r2
 8001efe:	697a      	ldr	r2, [r7, #20]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	697a      	ldr	r2, [r7, #20]
 8001f0a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	695b      	ldr	r3, [r3, #20]
 8001f12:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	f023 0307 	bic.w	r3, r3, #7
 8001f1a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f20:	697a      	ldr	r2, [r7, #20]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f2a:	2b04      	cmp	r3, #4
 8001f2c:	d117      	bne.n	8001f5e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f32:	697a      	ldr	r2, [r7, #20]
 8001f34:	4313      	orrs	r3, r2
 8001f36:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d00e      	beq.n	8001f5e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f000 faa5 	bl	8002490 <DMA_CheckFifoParam>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d008      	beq.n	8001f5e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2240      	movs	r2, #64	; 0x40
 8001f50:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2201      	movs	r2, #1
 8001f56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e016      	b.n	8001f8c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	697a      	ldr	r2, [r7, #20]
 8001f64:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f000 fa5c 	bl	8002424 <DMA_CalcBaseAndBitshift>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f74:	223f      	movs	r2, #63	; 0x3f
 8001f76:	409a      	lsls	r2, r3
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2201      	movs	r2, #1
 8001f86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001f8a:	2300      	movs	r3, #0
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3718      	adds	r7, #24
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	e010803f 	.word	0xe010803f

08001f98 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b086      	sub	sp, #24
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	60f8      	str	r0, [r7, #12]
 8001fa0:	60b9      	str	r1, [r7, #8]
 8001fa2:	607a      	str	r2, [r7, #4]
 8001fa4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d101      	bne.n	8001fbe <HAL_DMA_Start_IT+0x26>
 8001fba:	2302      	movs	r3, #2
 8001fbc:	e048      	b.n	8002050 <HAL_DMA_Start_IT+0xb8>
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d137      	bne.n	8002042 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	2202      	movs	r2, #2
 8001fd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	68b9      	ldr	r1, [r7, #8]
 8001fe6:	68f8      	ldr	r0, [r7, #12]
 8001fe8:	f000 f9ee 	bl	80023c8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ff0:	223f      	movs	r2, #63	; 0x3f
 8001ff2:	409a      	lsls	r2, r3
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f042 0216 	orr.w	r2, r2, #22
 8002006:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	695a      	ldr	r2, [r3, #20]
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002016:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201c:	2b00      	cmp	r3, #0
 800201e:	d007      	beq.n	8002030 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f042 0208 	orr.w	r2, r2, #8
 800202e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f042 0201 	orr.w	r2, r2, #1
 800203e:	601a      	str	r2, [r3, #0]
 8002040:	e005      	b.n	800204e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	2200      	movs	r2, #0
 8002046:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800204a:	2302      	movs	r3, #2
 800204c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800204e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002050:	4618      	mov	r0, r3
 8002052:	3718      	adds	r7, #24
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}

08002058 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002066:	b2db      	uxtb	r3, r3
 8002068:	2b02      	cmp	r3, #2
 800206a:	d004      	beq.n	8002076 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2280      	movs	r2, #128	; 0x80
 8002070:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e00c      	b.n	8002090 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2205      	movs	r2, #5
 800207a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f022 0201 	bic.w	r2, r2, #1
 800208c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800208e:	2300      	movs	r3, #0
}
 8002090:	4618      	mov	r0, r3
 8002092:	370c      	adds	r7, #12
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b086      	sub	sp, #24
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80020a4:	2300      	movs	r3, #0
 80020a6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80020a8:	4b8e      	ldr	r3, [pc, #568]	; (80022e4 <HAL_DMA_IRQHandler+0x248>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a8e      	ldr	r2, [pc, #568]	; (80022e8 <HAL_DMA_IRQHandler+0x24c>)
 80020ae:	fba2 2303 	umull	r2, r3, r2, r3
 80020b2:	0a9b      	lsrs	r3, r3, #10
 80020b4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ba:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020c6:	2208      	movs	r2, #8
 80020c8:	409a      	lsls	r2, r3
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	4013      	ands	r3, r2
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d01a      	beq.n	8002108 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 0304 	and.w	r3, r3, #4
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d013      	beq.n	8002108 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f022 0204 	bic.w	r2, r2, #4
 80020ee:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020f4:	2208      	movs	r2, #8
 80020f6:	409a      	lsls	r2, r3
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002100:	f043 0201 	orr.w	r2, r3, #1
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800210c:	2201      	movs	r2, #1
 800210e:	409a      	lsls	r2, r3
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	4013      	ands	r3, r2
 8002114:	2b00      	cmp	r3, #0
 8002116:	d012      	beq.n	800213e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	695b      	ldr	r3, [r3, #20]
 800211e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002122:	2b00      	cmp	r3, #0
 8002124:	d00b      	beq.n	800213e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800212a:	2201      	movs	r2, #1
 800212c:	409a      	lsls	r2, r3
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002136:	f043 0202 	orr.w	r2, r3, #2
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002142:	2204      	movs	r2, #4
 8002144:	409a      	lsls	r2, r3
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	4013      	ands	r3, r2
 800214a:	2b00      	cmp	r3, #0
 800214c:	d012      	beq.n	8002174 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0302 	and.w	r3, r3, #2
 8002158:	2b00      	cmp	r3, #0
 800215a:	d00b      	beq.n	8002174 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002160:	2204      	movs	r2, #4
 8002162:	409a      	lsls	r2, r3
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800216c:	f043 0204 	orr.w	r2, r3, #4
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002178:	2210      	movs	r2, #16
 800217a:	409a      	lsls	r2, r3
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	4013      	ands	r3, r2
 8002180:	2b00      	cmp	r3, #0
 8002182:	d043      	beq.n	800220c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0308 	and.w	r3, r3, #8
 800218e:	2b00      	cmp	r3, #0
 8002190:	d03c      	beq.n	800220c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002196:	2210      	movs	r2, #16
 8002198:	409a      	lsls	r2, r3
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d018      	beq.n	80021de <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d108      	bne.n	80021cc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d024      	beq.n	800220c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	4798      	blx	r3
 80021ca:	e01f      	b.n	800220c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d01b      	beq.n	800220c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	4798      	blx	r3
 80021dc:	e016      	b.n	800220c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d107      	bne.n	80021fc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f022 0208 	bic.w	r2, r2, #8
 80021fa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002200:	2b00      	cmp	r3, #0
 8002202:	d003      	beq.n	800220c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002210:	2220      	movs	r2, #32
 8002212:	409a      	lsls	r2, r3
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	4013      	ands	r3, r2
 8002218:	2b00      	cmp	r3, #0
 800221a:	f000 808f 	beq.w	800233c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0310 	and.w	r3, r3, #16
 8002228:	2b00      	cmp	r3, #0
 800222a:	f000 8087 	beq.w	800233c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002232:	2220      	movs	r2, #32
 8002234:	409a      	lsls	r2, r3
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002240:	b2db      	uxtb	r3, r3
 8002242:	2b05      	cmp	r3, #5
 8002244:	d136      	bne.n	80022b4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f022 0216 	bic.w	r2, r2, #22
 8002254:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	695a      	ldr	r2, [r3, #20]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002264:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226a:	2b00      	cmp	r3, #0
 800226c:	d103      	bne.n	8002276 <HAL_DMA_IRQHandler+0x1da>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002272:	2b00      	cmp	r3, #0
 8002274:	d007      	beq.n	8002286 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f022 0208 	bic.w	r2, r2, #8
 8002284:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800228a:	223f      	movs	r2, #63	; 0x3f
 800228c:	409a      	lsls	r2, r3
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2201      	movs	r2, #1
 8002296:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2200      	movs	r2, #0
 800229e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d07e      	beq.n	80023a8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	4798      	blx	r3
        }
        return;
 80022b2:	e079      	b.n	80023a8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d01d      	beq.n	80022fe <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d10d      	bne.n	80022ec <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d031      	beq.n	800233c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	4798      	blx	r3
 80022e0:	e02c      	b.n	800233c <HAL_DMA_IRQHandler+0x2a0>
 80022e2:	bf00      	nop
 80022e4:	20000004 	.word	0x20000004
 80022e8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d023      	beq.n	800233c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	4798      	blx	r3
 80022fc:	e01e      	b.n	800233c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002308:	2b00      	cmp	r3, #0
 800230a:	d10f      	bne.n	800232c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f022 0210 	bic.w	r2, r2, #16
 800231a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2201      	movs	r2, #1
 8002320:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2200      	movs	r2, #0
 8002328:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002330:	2b00      	cmp	r3, #0
 8002332:	d003      	beq.n	800233c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002340:	2b00      	cmp	r3, #0
 8002342:	d032      	beq.n	80023aa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002348:	f003 0301 	and.w	r3, r3, #1
 800234c:	2b00      	cmp	r3, #0
 800234e:	d022      	beq.n	8002396 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2205      	movs	r2, #5
 8002354:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f022 0201 	bic.w	r2, r2, #1
 8002366:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	3301      	adds	r3, #1
 800236c:	60bb      	str	r3, [r7, #8]
 800236e:	697a      	ldr	r2, [r7, #20]
 8002370:	429a      	cmp	r2, r3
 8002372:	d307      	bcc.n	8002384 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0301 	and.w	r3, r3, #1
 800237e:	2b00      	cmp	r3, #0
 8002380:	d1f2      	bne.n	8002368 <HAL_DMA_IRQHandler+0x2cc>
 8002382:	e000      	b.n	8002386 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002384:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2201      	movs	r2, #1
 800238a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2200      	movs	r2, #0
 8002392:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800239a:	2b00      	cmp	r3, #0
 800239c:	d005      	beq.n	80023aa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	4798      	blx	r3
 80023a6:	e000      	b.n	80023aa <HAL_DMA_IRQHandler+0x30e>
        return;
 80023a8:	bf00      	nop
    }
  }
}
 80023aa:	3718      	adds	r7, #24
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80023bc:	4618      	mov	r0, r3
 80023be:	370c      	adds	r7, #12
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr

080023c8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b085      	sub	sp, #20
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	60f8      	str	r0, [r7, #12]
 80023d0:	60b9      	str	r1, [r7, #8]
 80023d2:	607a      	str	r2, [r7, #4]
 80023d4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80023e4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	683a      	ldr	r2, [r7, #0]
 80023ec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	2b40      	cmp	r3, #64	; 0x40
 80023f4:	d108      	bne.n	8002408 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	68ba      	ldr	r2, [r7, #8]
 8002404:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002406:	e007      	b.n	8002418 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	68ba      	ldr	r2, [r7, #8]
 800240e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	687a      	ldr	r2, [r7, #4]
 8002416:	60da      	str	r2, [r3, #12]
}
 8002418:	bf00      	nop
 800241a:	3714      	adds	r7, #20
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr

08002424 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002424:	b480      	push	{r7}
 8002426:	b085      	sub	sp, #20
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	b2db      	uxtb	r3, r3
 8002432:	3b10      	subs	r3, #16
 8002434:	4a13      	ldr	r2, [pc, #76]	; (8002484 <DMA_CalcBaseAndBitshift+0x60>)
 8002436:	fba2 2303 	umull	r2, r3, r2, r3
 800243a:	091b      	lsrs	r3, r3, #4
 800243c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800243e:	4a12      	ldr	r2, [pc, #72]	; (8002488 <DMA_CalcBaseAndBitshift+0x64>)
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	4413      	add	r3, r2
 8002444:	781b      	ldrb	r3, [r3, #0]
 8002446:	461a      	mov	r2, r3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2b03      	cmp	r3, #3
 8002450:	d908      	bls.n	8002464 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	461a      	mov	r2, r3
 8002458:	4b0c      	ldr	r3, [pc, #48]	; (800248c <DMA_CalcBaseAndBitshift+0x68>)
 800245a:	4013      	ands	r3, r2
 800245c:	1d1a      	adds	r2, r3, #4
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	659a      	str	r2, [r3, #88]	; 0x58
 8002462:	e006      	b.n	8002472 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	461a      	mov	r2, r3
 800246a:	4b08      	ldr	r3, [pc, #32]	; (800248c <DMA_CalcBaseAndBitshift+0x68>)
 800246c:	4013      	ands	r3, r2
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002476:	4618      	mov	r0, r3
 8002478:	3714      	adds	r7, #20
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	aaaaaaab 	.word	0xaaaaaaab
 8002488:	08026778 	.word	0x08026778
 800248c:	fffffc00 	.word	0xfffffc00

08002490 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002490:	b480      	push	{r7}
 8002492:	b085      	sub	sp, #20
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002498:	2300      	movs	r3, #0
 800249a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024a0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	699b      	ldr	r3, [r3, #24]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d11f      	bne.n	80024ea <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	2b03      	cmp	r3, #3
 80024ae:	d856      	bhi.n	800255e <DMA_CheckFifoParam+0xce>
 80024b0:	a201      	add	r2, pc, #4	; (adr r2, 80024b8 <DMA_CheckFifoParam+0x28>)
 80024b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024b6:	bf00      	nop
 80024b8:	080024c9 	.word	0x080024c9
 80024bc:	080024db 	.word	0x080024db
 80024c0:	080024c9 	.word	0x080024c9
 80024c4:	0800255f 	.word	0x0800255f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d046      	beq.n	8002562 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024d8:	e043      	b.n	8002562 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024de:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80024e2:	d140      	bne.n	8002566 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024e8:	e03d      	b.n	8002566 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	699b      	ldr	r3, [r3, #24]
 80024ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024f2:	d121      	bne.n	8002538 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	2b03      	cmp	r3, #3
 80024f8:	d837      	bhi.n	800256a <DMA_CheckFifoParam+0xda>
 80024fa:	a201      	add	r2, pc, #4	; (adr r2, 8002500 <DMA_CheckFifoParam+0x70>)
 80024fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002500:	08002511 	.word	0x08002511
 8002504:	08002517 	.word	0x08002517
 8002508:	08002511 	.word	0x08002511
 800250c:	08002529 	.word	0x08002529
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	73fb      	strb	r3, [r7, #15]
      break;
 8002514:	e030      	b.n	8002578 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800251a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d025      	beq.n	800256e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002526:	e022      	b.n	800256e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800252c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002530:	d11f      	bne.n	8002572 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002536:	e01c      	b.n	8002572 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	2b02      	cmp	r3, #2
 800253c:	d903      	bls.n	8002546 <DMA_CheckFifoParam+0xb6>
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	2b03      	cmp	r3, #3
 8002542:	d003      	beq.n	800254c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002544:	e018      	b.n	8002578 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	73fb      	strb	r3, [r7, #15]
      break;
 800254a:	e015      	b.n	8002578 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002550:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d00e      	beq.n	8002576 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	73fb      	strb	r3, [r7, #15]
      break;
 800255c:	e00b      	b.n	8002576 <DMA_CheckFifoParam+0xe6>
      break;
 800255e:	bf00      	nop
 8002560:	e00a      	b.n	8002578 <DMA_CheckFifoParam+0xe8>
      break;
 8002562:	bf00      	nop
 8002564:	e008      	b.n	8002578 <DMA_CheckFifoParam+0xe8>
      break;
 8002566:	bf00      	nop
 8002568:	e006      	b.n	8002578 <DMA_CheckFifoParam+0xe8>
      break;
 800256a:	bf00      	nop
 800256c:	e004      	b.n	8002578 <DMA_CheckFifoParam+0xe8>
      break;
 800256e:	bf00      	nop
 8002570:	e002      	b.n	8002578 <DMA_CheckFifoParam+0xe8>
      break;   
 8002572:	bf00      	nop
 8002574:	e000      	b.n	8002578 <DMA_CheckFifoParam+0xe8>
      break;
 8002576:	bf00      	nop
    }
  } 
  
  return status; 
 8002578:	7bfb      	ldrb	r3, [r7, #15]
}
 800257a:	4618      	mov	r0, r3
 800257c:	3714      	adds	r7, #20
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr
 8002586:	bf00      	nop

08002588 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d101      	bne.n	800259a <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e049      	b.n	800262e <HAL_DMA2D_Init+0xa6>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d106      	bne.n	80025b4 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2200      	movs	r2, #0
 80025aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f7fe fcce 	bl	8000f50 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2202      	movs	r2, #2
 80025b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685a      	ldr	r2, [r3, #4]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	430a      	orrs	r2, r1
 80025d0:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025d8:	f023 0107 	bic.w	r1, r3, #7
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	689a      	ldr	r2, [r3, #8]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	430a      	orrs	r2, r1
 80025e6:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025ee:	4b12      	ldr	r3, [pc, #72]	; (8002638 <HAL_DMA2D_Init+0xb0>)
 80025f0:	4013      	ands	r3, r2
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	68d1      	ldr	r1, [r2, #12]
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	6812      	ldr	r2, [r2, #0]
 80025fa:	430b      	orrs	r3, r1
 80025fc:	6413      	str	r3, [r2, #64]	; 0x40
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002604:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	691b      	ldr	r3, [r3, #16]
 800260c:	051a      	lsls	r2, r3, #20
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	695b      	ldr	r3, [r3, #20]
 8002612:	055b      	lsls	r3, r3, #21
 8002614:	431a      	orrs	r2, r3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	430a      	orrs	r2, r1
 800261c:	635a      	str	r2, [r3, #52]	; 0x34
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2200      	movs	r2, #0
 8002622:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2201      	movs	r2, #1
 8002628:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800262c:	2300      	movs	r3, #0
}
 800262e:	4618      	mov	r0, r3
 8002630:	3708      	adds	r7, #8
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	ffffc000 	.word	0xffffc000

0800263c <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b084      	sub	sp, #16
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	f003 0301 	and.w	r3, r3, #1
 800265a:	2b00      	cmp	r3, #0
 800265c:	d026      	beq.n	80026ac <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002664:	2b00      	cmp	r3, #0
 8002666:	d021      	beq.n	80026ac <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002676:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800267c:	f043 0201 	orr.w	r2, r3, #1
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	655a      	str	r2, [r3, #84]	; 0x54

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	2201      	movs	r2, #1
 800268a:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2204      	movs	r2, #4
 8002690:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2200      	movs	r2, #0
 8002698:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if (hdma2d->XferErrorCallback != NULL)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	69db      	ldr	r3, [r3, #28]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d003      	beq.n	80026ac <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	69db      	ldr	r3, [r3, #28]
 80026a8:	6878      	ldr	r0, [r7, #4]
 80026aa:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	f003 0320 	and.w	r3, r3, #32
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d026      	beq.n	8002704 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d021      	beq.n	8002704 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80026ce:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	2220      	movs	r2, #32
 80026d6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026dc:	f043 0202 	orr.w	r2, r3, #2
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2204      	movs	r2, #4
 80026e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2200      	movs	r2, #0
 80026f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if (hdma2d->XferErrorCallback != NULL)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	69db      	ldr	r3, [r3, #28]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d003      	beq.n	8002704 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	69db      	ldr	r3, [r3, #28]
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	f003 0308 	and.w	r3, r3, #8
 800270a:	2b00      	cmp	r3, #0
 800270c:	d026      	beq.n	800275c <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002714:	2b00      	cmp	r3, #0
 8002716:	d021      	beq.n	800275c <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002726:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	2208      	movs	r2, #8
 800272e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002734:	f043 0204 	orr.w	r2, r3, #4
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2204      	movs	r2, #4
 8002740:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2200      	movs	r2, #0
 8002748:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if (hdma2d->XferErrorCallback != NULL)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	69db      	ldr	r3, [r3, #28]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d003      	beq.n	800275c <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	69db      	ldr	r3, [r3, #28]
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	f003 0304 	and.w	r3, r3, #4
 8002762:	2b00      	cmp	r3, #0
 8002764:	d013      	beq.n	800278e <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800276c:	2b00      	cmp	r3, #0
 800276e:	d00e      	beq.n	800278e <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800277e:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	2204      	movs	r2, #4
 8002786:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	f000 f853 	bl	8002834 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	f003 0302 	and.w	r3, r3, #2
 8002794:	2b00      	cmp	r3, #0
 8002796:	d024      	beq.n	80027e2 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d01f      	beq.n	80027e2 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80027b0:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	2202      	movs	r2, #2
 80027b8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2201      	movs	r2, #1
 80027c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2200      	movs	r2, #0
 80027ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if (hdma2d->XferCpltCallback != NULL)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	699b      	ldr	r3, [r3, #24]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d003      	beq.n	80027e2 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	699b      	ldr	r3, [r3, #24]
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	f003 0310 	and.w	r3, r3, #16
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d01f      	beq.n	800282c <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d01a      	beq.n	800282c <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002804:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	2210      	movs	r2, #16
 800280c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2201      	movs	r2, #1
 800281a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2200      	movs	r2, #0
 8002822:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f000 f80e 	bl	8002848 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 800282c:	bf00      	nop
 800282e:	3710      	adds	r7, #16
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}

08002834 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 800283c:	bf00      	nop
 800283e:	370c      	adds	r7, #12
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr

08002848 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8002850:	bf00      	nop
 8002852:	370c      	adds	r7, #12
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr

0800285c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800285c:	b480      	push	{r7}
 800285e:	b087      	sub	sp, #28
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002874:	2b01      	cmp	r3, #1
 8002876:	d101      	bne.n	800287c <HAL_DMA2D_ConfigLayer+0x20>
 8002878:	2302      	movs	r3, #2
 800287a:	e084      	b.n	8002986 <HAL_DMA2D_ConfigLayer+0x12a>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2201      	movs	r2, #1
 8002880:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2202      	movs	r2, #2
 8002888:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800288c:	683a      	ldr	r2, [r7, #0]
 800288e:	4613      	mov	r3, r2
 8002890:	005b      	lsls	r3, r3, #1
 8002892:	4413      	add	r3, r2
 8002894:	00db      	lsls	r3, r3, #3
 8002896:	3320      	adds	r3, #32
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	4413      	add	r3, r2
 800289c:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	685a      	ldr	r2, [r3, #4]
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	041b      	lsls	r3, r3, #16
 80028a8:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	691b      	ldr	r3, [r3, #16]
 80028ae:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80028b0:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	695b      	ldr	r3, [r3, #20]
 80028b6:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80028b8:	4313      	orrs	r3, r2
 80028ba:	617b      	str	r3, [r7, #20]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 80028bc:	4b35      	ldr	r3, [pc, #212]	; (8002994 <HAL_DMA2D_ConfigLayer+0x138>)
 80028be:	60fb      	str	r3, [r7, #12]
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	2b0a      	cmp	r3, #10
 80028c6:	d003      	beq.n	80028d0 <HAL_DMA2D_ConfigLayer+0x74>
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	2b09      	cmp	r3, #9
 80028ce:	d107      	bne.n	80028e0 <HAL_DMA2D_ConfigLayer+0x84>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80028d8:	697a      	ldr	r2, [r7, #20]
 80028da:	4313      	orrs	r3, r2
 80028dc:	617b      	str	r3, [r7, #20]
 80028de:	e005      	b.n	80028ec <HAL_DMA2D_ConfigLayer+0x90>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	061b      	lsls	r3, r3, #24
 80028e6:	697a      	ldr	r2, [r7, #20]
 80028e8:	4313      	orrs	r3, r2
 80028ea:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d120      	bne.n	8002934 <HAL_DMA2D_ConfigLayer+0xd8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	43db      	mvns	r3, r3
 80028fc:	ea02 0103 	and.w	r1, r2, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	697a      	ldr	r2, [r7, #20]
 8002906:	430a      	orrs	r2, r1
 8002908:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	693a      	ldr	r2, [r7, #16]
 8002910:	6812      	ldr	r2, [r2, #0]
 8002912:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	2b0a      	cmp	r3, #10
 800291a:	d003      	beq.n	8002924 <HAL_DMA2D_ConfigLayer+0xc8>
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	2b09      	cmp	r3, #9
 8002922:	d127      	bne.n	8002974 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	68da      	ldr	r2, [r3, #12]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002930:	629a      	str	r2, [r3, #40]	; 0x28
 8002932:	e01f      	b.n	8002974 <HAL_DMA2D_ConfigLayer+0x118>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	69da      	ldr	r2, [r3, #28]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	43db      	mvns	r3, r3
 800293e:	ea02 0103 	and.w	r1, r2, r3
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	697a      	ldr	r2, [r7, #20]
 8002948:	430a      	orrs	r2, r1
 800294a:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	693a      	ldr	r2, [r7, #16]
 8002952:	6812      	ldr	r2, [r2, #0]
 8002954:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	2b0a      	cmp	r3, #10
 800295c:	d003      	beq.n	8002966 <HAL_DMA2D_ConfigLayer+0x10a>
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	2b09      	cmp	r3, #9
 8002964:	d106      	bne.n	8002974 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	68da      	ldr	r2, [r3, #12]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002972:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2200      	movs	r2, #0
 8002980:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8002984:	2300      	movs	r3, #0
}
 8002986:	4618      	mov	r0, r3
 8002988:	371c      	adds	r7, #28
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr
 8002992:	bf00      	nop
 8002994:	ff33000f 	.word	0xff33000f

08002998 <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b088      	sub	sp, #32
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d101      	bne.n	80029ac <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e109      	b.n	8002bc0 <HAL_DSI_Init+0x228>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	7c5b      	ldrb	r3, [r3, #17]
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d102      	bne.n	80029bc <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f7fe faf0 	bl	8000f9c <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2203      	movs	r2, #3
 80029c0:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 80029c2:	2300      	movs	r3, #0
 80029c4:	613b      	str	r3, [r7, #16]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80029d6:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 80029e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029e6:	613b      	str	r3, [r7, #16]
 80029e8:	693b      	ldr	r3, [r7, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 80029ea:	f7ff f82b 	bl	8001a44 <HAL_GetTick>
 80029ee:	61f8      	str	r0, [r7, #28]

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 80029f0:	e009      	b.n	8002a06 <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80029f2:	f7ff f827 	bl	8001a44 <HAL_GetTick>
 80029f6:	4602      	mov	r2, r0
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a00:	d901      	bls.n	8002a06 <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	e0dc      	b.n	8002bc0 <HAL_DSI_Init+0x228>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002a0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d0ed      	beq.n	80029f2 <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	4b69      	ldr	r3, [pc, #420]	; (8002bc8 <HAL_DSI_Init+0x230>)
 8002a24:	400b      	ands	r3, r1
 8002a26:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	009a      	lsls	r2, r3, #2
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8002a3e:	431a      	orrs	r2, r3
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	041b      	lsls	r3, r3, #16
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8002a46:	431a      	orrs	r2, r3
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	430a      	orrs	r2, r1
 8002a4e:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 8002a52:	2300      	movs	r3, #0
 8002a54:	60fb      	str	r3, [r7, #12]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f042 0201 	orr.w	r2, r2, #1
 8002a66:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8002a72:	f003 0301 	and.w	r3, r3, #1
 8002a76:	60fb      	str	r3, [r7, #12]
 8002a78:	68fb      	ldr	r3, [r7, #12]

  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 8002a7a:	2001      	movs	r0, #1
 8002a7c:	f7fe ffee 	bl	8001a5c <HAL_Delay>

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a80:	f7fe ffe0 	bl	8001a44 <HAL_GetTick>
 8002a84:	61f8      	str	r0, [r7, #28]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8002a86:	e009      	b.n	8002a9c <HAL_DSI_Init+0x104>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8002a88:	f7fe ffdc 	bl	8001a44 <HAL_GetTick>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a96:	d901      	bls.n	8002a9c <HAL_DSI_Init+0x104>
    {
      return HAL_TIMEOUT;
 8002a98:	2303      	movs	r3, #3
 8002a9a:	e091      	b.n	8002bc0 <HAL_DSI_Init+0x228>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002aa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d0ed      	beq.n	8002a88 <HAL_DSI_Init+0xf0>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f042 0206 	orr.w	r2, r2, #6
 8002abc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f022 0203 	bic.w	r2, r2, #3
 8002ad0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	431a      	orrs	r2, r3
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f042 0201 	orr.w	r2, r2, #1
 8002aea:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f022 0203 	bic.w	r2, r2, #3
 8002afe:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	68da      	ldr	r2, [r3, #12]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	430a      	orrs	r2, r1
 8002b14:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	689a      	ldr	r2, [r3, #8]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002b26:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	6899      	ldr	r1, [r3, #8]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	689a      	ldr	r2, [r3, #8]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	430a      	orrs	r2, r1
 8002b38:	609a      	str	r2, [r3, #8]

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d002      	beq.n	8002b48 <HAL_DSI_Init+0x1b0>
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	e000      	b.n	8002b4a <HAL_DSI_Init+0x1b2>
 8002b48:	2301      	movs	r3, #1
 8002b4a:	61bb      	str	r3, [r7, #24]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8002b4c:	69bb      	ldr	r3, [r7, #24]
 8002b4e:	4a1f      	ldr	r2, [pc, #124]	; (8002bcc <HAL_DSI_Init+0x234>)
 8002b50:	fb03 f202 	mul.w	r2, r3, r2
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	f003 0303 	and.w	r3, r3, #3
 8002b5c:	409a      	lsls	r2, r3
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f246 11a8 	movw	r1, #25000	; 0x61a8
 8002b66:	fb01 f303 	mul.w	r3, r1, r3
 8002b6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b6e:	617b      	str	r3, [r7, #20]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002b80:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	697a      	ldr	r2, [r7, #20]
 8002b92:	430a      	orrs	r2, r1
 8002b94:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 8002bbe:	2300      	movs	r3, #0
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3720      	adds	r7, #32
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	fffc8603 	.word	0xfffc8603
 8002bcc:	003d0900 	.word	0x003d0900

08002bd0 <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @arg DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	7c1b      	ldrb	r3, [r3, #16]
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d101      	bne.n	8002be6 <HAL_DSI_ConfigErrorMonitor+0x16>
 8002be2:	2302      	movs	r3, #2
 8002be4:	e0aa      	b.n	8002d3c <HAL_DSI_ConfigErrorMonitor+0x16c>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2201      	movs	r2, #1
 8002bea:	741a      	strb	r2, [r3, #16]

  hdsi->Instance->IER[0U] = 0U;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	683a      	ldr	r2, [r7, #0]
 8002c04:	619a      	str	r2, [r3, #24]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	f003 0301 	and.w	r3, r3, #1
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d00a      	beq.n	8002c26 <HAL_DSI_ConfigErrorMonitor+0x56>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c20:	430b      	orrs	r3, r1
 8002c22:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	f003 0302 	and.w	r3, r3, #2
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d009      	beq.n	8002c44 <HAL_DSI_ConfigErrorMonitor+0x74>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f442 12f8 	orr.w	r2, r2, #2031616	; 0x1f0000
 8002c40:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	f003 0304 	and.w	r3, r3, #4
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d009      	beq.n	8002c62 <HAL_DSI_ConfigErrorMonitor+0x92>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f042 0201 	orr.w	r2, r2, #1
 8002c5e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	f003 0308 	and.w	r3, r3, #8
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d009      	beq.n	8002c80 <HAL_DSI_ConfigErrorMonitor+0xb0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f042 0202 	orr.w	r2, r2, #2
 8002c7c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	f003 0310 	and.w	r3, r3, #16
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d009      	beq.n	8002c9e <HAL_DSI_ConfigErrorMonitor+0xce>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f042 020c 	orr.w	r2, r2, #12
 8002c9a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	f003 0320 	and.w	r3, r3, #32
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d009      	beq.n	8002cbc <HAL_DSI_ConfigErrorMonitor+0xec>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f042 0210 	orr.w	r2, r2, #16
 8002cb8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d009      	beq.n	8002cda <HAL_DSI_ConfigErrorMonitor+0x10a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f042 0220 	orr.w	r2, r2, #32
 8002cd6:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d009      	beq.n	8002cf8 <HAL_DSI_ConfigErrorMonitor+0x128>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002cf4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d009      	beq.n	8002d16 <HAL_DSI_ConfigErrorMonitor+0x146>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002d12:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d009      	beq.n	8002d34 <HAL_DSI_ConfigErrorMonitor+0x164>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f442 52f8 	orr.w	r2, r2, #7936	; 0x1f00
 8002d30:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2200      	movs	r2, #0
 8002d38:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002d3a:	2300      	movs	r3, #0
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	370c      	adds	r7, #12
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr

08002d48 <HAL_DSI_IRQHandler>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
void HAL_DSI_IRQHandler(DSI_HandleTypeDef *hdsi)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  uint32_t ErrorStatus0;
  uint32_t ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002d58:	f003 0301 	and.w	r3, r3, #1
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d00f      	beq.n	8002d80 <HAL_DSI_IRQHandler+0x38>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002d68:	f003 0301 	and.w	r3, r3, #1
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d007      	beq.n	8002d80 <HAL_DSI_IRQHandler+0x38>
    {
      /* Clear the Tearing Effect Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	2201      	movs	r2, #1
 8002d76:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Tearing Effect callback */
      hdsi->TearingEffectCallback(hdsi);
#else
      /*Call legacy Tearing Effect callback*/
      HAL_DSI_TearingEffectCallback(hdsi);
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f000 f8ad 	bl	8002eda <HAL_DSI_TearingEffectCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002d88:	f003 0302 	and.w	r3, r3, #2
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d00f      	beq.n	8002db0 <HAL_DSI_IRQHandler+0x68>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002d98:	f003 0302 	and.w	r3, r3, #2
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d007      	beq.n	8002db0 <HAL_DSI_IRQHandler+0x68>
    {
      /* Clear the End of Refresh Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2202      	movs	r2, #2
 8002da6:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered End of refresh callback */
      hdsi->EndOfRefreshCallback(hdsi);
#else
      /*Call Legacy End of refresh callback */
      HAL_DSI_EndOfRefreshCallback(hdsi);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f000 f89f 	bl	8002eee <HAL_DSI_EndOfRefreshCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	699b      	ldr	r3, [r3, #24]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	f000 808c 	beq.w	8002ed2 <HAL_DSI_IRQHandler+0x18a>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8002dc2:	60fb      	str	r3, [r7, #12]
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002dcc:	68fa      	ldr	r2, [r7, #12]
 8002dce:	4013      	ands	r3, r2
 8002dd0:	60fb      	str	r3, [r7, #12]
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002dda:	60bb      	str	r3, [r7, #8]
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8002de4:	68ba      	ldr	r2, [r7, #8]
 8002de6:	4013      	ands	r3, r2
 8002de8:	60bb      	str	r3, [r7, #8]

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	b29b      	uxth	r3, r3
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d005      	beq.n	8002dfe <HAL_DSI_IRQHandler+0xb6>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	695b      	ldr	r3, [r3, #20]
 8002df6:	f043 0201 	orr.w	r2, r3, #1
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d005      	beq.n	8002e14 <HAL_DSI_IRQHandler+0xcc>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	695b      	ldr	r3, [r3, #20]
 8002e0c:	f043 0202 	orr.w	r2, r3, #2
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	f003 0301 	and.w	r3, r3, #1
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d005      	beq.n	8002e2a <HAL_DSI_IRQHandler+0xe2>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	695b      	ldr	r3, [r3, #20]
 8002e22:	f043 0204 	orr.w	r2, r3, #4
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	f003 0302 	and.w	r3, r3, #2
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d005      	beq.n	8002e40 <HAL_DSI_IRQHandler+0xf8>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	695b      	ldr	r3, [r3, #20]
 8002e38:	f043 0208 	orr.w	r2, r3, #8
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	f003 030c 	and.w	r3, r3, #12
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d005      	beq.n	8002e56 <HAL_DSI_IRQHandler+0x10e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	695b      	ldr	r3, [r3, #20]
 8002e4e:	f043 0210 	orr.w	r2, r3, #16
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	f003 0310 	and.w	r3, r3, #16
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d005      	beq.n	8002e6c <HAL_DSI_IRQHandler+0x124>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	695b      	ldr	r3, [r3, #20]
 8002e64:	f043 0220 	orr.w	r2, r3, #32
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	f003 0320 	and.w	r3, r3, #32
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d005      	beq.n	8002e82 <HAL_DSI_IRQHandler+0x13a>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	695b      	ldr	r3, [r3, #20]
 8002e7a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d005      	beq.n	8002e98 <HAL_DSI_IRQHandler+0x150>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	695b      	ldr	r3, [r3, #20]
 8002e90:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d005      	beq.n	8002eae <HAL_DSI_IRQHandler+0x166>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	695b      	ldr	r3, [r3, #20]
 8002ea6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d005      	beq.n	8002ec4 <HAL_DSI_IRQHandler+0x17c>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	695b      	ldr	r3, [r3, #20]
 8002ebc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	615a      	str	r2, [r3, #20]
    }

    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	695b      	ldr	r3, [r3, #20]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d002      	beq.n	8002ed2 <HAL_DSI_IRQHandler+0x18a>
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Error callback */
      hdsi->ErrorCallback(hdsi);
#else
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	f000 f818 	bl	8002f02 <HAL_DSI_ErrorCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 8002ed2:	bf00      	nop
 8002ed4:	3710      	adds	r7, #16
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}

08002eda <HAL_DSI_TearingEffectCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef *hdsi)
{
 8002eda:	b480      	push	{r7}
 8002edc:	b083      	sub	sp, #12
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_TearingEffectCallback could be implemented in the user file
   */
}
 8002ee2:	bf00      	nop
 8002ee4:	370c      	adds	r7, #12
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr

08002eee <HAL_DSI_EndOfRefreshCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef *hdsi)
{
 8002eee:	b480      	push	{r7}
 8002ef0:	b083      	sub	sp, #12
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_EndOfRefreshCallback could be implemented in the user file
   */
}
 8002ef6:	bf00      	nop
 8002ef8:	370c      	adds	r7, #12
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr

08002f02 <HAL_DSI_ErrorCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_ErrorCallback(DSI_HandleTypeDef *hdsi)
{
 8002f02:	b480      	push	{r7}
 8002f04:	b083      	sub	sp, #12
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_ErrorCallback could be implemented in the user file
   */
}
 8002f0a:	bf00      	nop
 8002f0c:	370c      	adds	r7, #12
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr

08002f16 <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 8002f16:	b480      	push	{r7}
 8002f18:	b083      	sub	sp, #12
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	6078      	str	r0, [r7, #4]
 8002f1e:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	7c1b      	ldrb	r3, [r3, #16]
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d101      	bne.n	8002f2c <HAL_DSI_SetGenericVCID+0x16>
 8002f28:	2302      	movs	r3, #2
 8002f2a:	e016      	b.n	8002f5a <HAL_DSI_SetGenericVCID+0x44>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	741a      	strb	r2, [r3, #16]

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f022 0203 	bic.w	r2, r2, #3
 8002f40:	631a      	str	r2, [r3, #48]	; 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	683a      	ldr	r2, [r7, #0]
 8002f4e:	430a      	orrs	r2, r1
 8002f50:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2200      	movs	r2, #0
 8002f56:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002f58:	2300      	movs	r3, #0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	370c      	adds	r7, #12
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr
	...

08002f68 <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	7c1b      	ldrb	r3, [r3, #16]
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d101      	bne.n	8002f7e <HAL_DSI_ConfigAdaptedCommandMode+0x16>
 8002f7a:	2302      	movs	r3, #2
 8002f7c:	e0c5      	b.n	800310a <HAL_DSI_ConfigAdaptedCommandMode+0x1a2>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2201      	movs	r2, #1
 8002f82:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f042 0201 	orr.w	r2, r2, #1
 8002f92:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f022 0201 	bic.w	r2, r2, #1
 8002fa4:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f042 0201 	orr.w	r2, r2, #1
 8002fb8:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	68da      	ldr	r2, [r3, #12]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f022 0203 	bic.w	r2, r2, #3
 8002fca:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	68d9      	ldr	r1, [r3, #12]
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	430a      	orrs	r2, r1
 8002fdc:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	695a      	ldr	r2, [r3, #20]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f022 0207 	bic.w	r2, r2, #7
 8002fec:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	6959      	ldr	r1, [r3, #20]
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	69da      	ldr	r2, [r3, #28]
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	699b      	ldr	r3, [r3, #24]
 8002ffc:	431a      	orrs	r2, r3
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	695b      	ldr	r3, [r3, #20]
 8003002:	431a      	orrs	r2, r3
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	430a      	orrs	r2, r1
 800300a:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	691a      	ldr	r2, [r3, #16]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f022 020f 	bic.w	r2, r2, #15
 800301a:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	6919      	ldr	r1, [r3, #16]
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	685a      	ldr	r2, [r3, #4]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	430a      	orrs	r2, r1
 800302c:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f022 020e 	bic.w	r2, r2, #14
 800303e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	005a      	lsls	r2, r3, #1
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	430a      	orrs	r2, r1
 8003056:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	4b2c      	ldr	r3, [pc, #176]	; (8003118 <HAL_DSI_ConfigAdaptedCommandMode+0x1b0>)
 8003066:	400b      	ands	r3, r1
 8003068:	6653      	str	r3, [r2, #100]	; 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	689a      	ldr	r2, [r3, #8]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	430a      	orrs	r2, r1
 800307a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800308c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	68da      	ldr	r2, [r3, #12]
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	691b      	ldr	r3, [r3, #16]
 80030a0:	431a      	orrs	r2, r3
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a6:	431a      	orrs	r2, r3
                            CmdCfg->VSyncPol);
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	6a1b      	ldr	r3, [r3, #32]
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 80030ac:	431a      	orrs	r2, r3
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	430a      	orrs	r2, r1
 80030b4:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f022 0201 	bic.w	r2, r2, #1
 80030c6:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	6e99      	ldr	r1, [r3, #104]	; 0x68
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	430a      	orrs	r2, r1
 80030d8:	669a      	str	r2, [r3, #104]	; 0x68

  /* Enable the Tearing Effect interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f042 0201 	orr.w	r2, r2, #1
 80030ea:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f042 0202 	orr.w	r2, r2, #2
 80030fe:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2200      	movs	r2, #0
 8003106:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003108:	2300      	movs	r3, #0
}
 800310a:	4618      	mov	r0, r3
 800310c:	370c      	adds	r7, #12
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr
 8003116:	bf00      	nop
 8003118:	ffff0000 	.word	0xffff0000

0800311c <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 800311c:	b480      	push	{r7}
 800311e:	b083      	sub	sp, #12
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
 8003124:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	7c1b      	ldrb	r3, [r3, #16]
 800312a:	2b01      	cmp	r3, #1
 800312c:	d101      	bne.n	8003132 <HAL_DSI_ConfigCommand+0x16>
 800312e:	2302      	movs	r3, #2
 8003130:	e049      	b.n	80031c6 <HAL_DSI_ConfigCommand+0xaa>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2201      	movs	r2, #1
 8003136:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	6e99      	ldr	r1, [r3, #104]	; 0x68
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	4b24      	ldr	r3, [pc, #144]	; (80031d4 <HAL_DSI_ConfigCommand+0xb8>)
 8003144:	400b      	ands	r3, r1
 8003146:	6693      	str	r3, [r2, #104]	; 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	6e99      	ldr	r1, [r3, #104]	; 0x68
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	681a      	ldr	r2, [r3, #0]
                           LPCmd->LPGenShortWriteOneP | \
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	685b      	ldr	r3, [r3, #4]
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8003156:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortWriteTwoP | \
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	689b      	ldr	r3, [r3, #8]
                           LPCmd->LPGenShortWriteOneP | \
 800315c:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadNoP   | \
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	68db      	ldr	r3, [r3, #12]
                           LPCmd->LPGenShortWriteTwoP | \
 8003162:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadOneP  | \
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	691b      	ldr	r3, [r3, #16]
                           LPCmd->LPGenShortReadNoP   | \
 8003168:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadTwoP  | \
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	695b      	ldr	r3, [r3, #20]
                           LPCmd->LPGenShortReadOneP  | \
 800316e:	431a      	orrs	r2, r3
                           LPCmd->LPGenLongWrite      | \
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	699b      	ldr	r3, [r3, #24]
                           LPCmd->LPGenShortReadTwoP  | \
 8003174:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteNoP  | \
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	69db      	ldr	r3, [r3, #28]
                           LPCmd->LPGenLongWrite      | \
 800317a:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteOneP | \
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	6a1b      	ldr	r3, [r3, #32]
                           LPCmd->LPDcsShortWriteNoP  | \
 8003180:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortReadNoP   | \
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           LPCmd->LPDcsShortWriteOneP | \
 8003186:	431a      	orrs	r2, r3
                           LPCmd->LPDcsLongWrite      | \
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                           LPCmd->LPDcsShortReadNoP   | \
 800318c:	431a      	orrs	r2, r3
                           LPCmd->LPMaxReadPacket);
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                           LPCmd->LPDcsLongWrite      | \
 8003192:	431a      	orrs	r2, r3
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	430a      	orrs	r2, r1
 800319a:	669a      	str	r2, [r3, #104]	; 0x68

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f022 0202 	bic.w	r2, r2, #2
 80031aa:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	6e99      	ldr	r1, [r3, #104]	; 0x68
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	430a      	orrs	r2, r1
 80031bc:	669a      	str	r2, [r3, #104]	; 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80031c4:	2300      	movs	r3, #0
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	370c      	adds	r7, #12
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr
 80031d2:	bf00      	nop
 80031d4:	fef080ff 	.word	0xfef080ff

080031d8 <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @arg DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 80031d8:	b480      	push	{r7}
 80031da:	b083      	sub	sp, #12
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	7c1b      	ldrb	r3, [r3, #16]
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d101      	bne.n	80031ee <HAL_DSI_ConfigFlowControl+0x16>
 80031ea:	2302      	movs	r3, #2
 80031ec:	e016      	b.n	800321c <HAL_DSI_ConfigFlowControl+0x44>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2201      	movs	r2, #1
 80031f2:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f022 021f 	bic.w	r2, r2, #31
 8003202:	62da      	str	r2, [r3, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	683a      	ldr	r2, [r7, #0]
 8003210:	430a      	orrs	r2, r1
 8003212:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2200      	movs	r2, #0
 8003218:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800321a:	2300      	movs	r3, #0
}
 800321c:	4618      	mov	r0, r3
 800321e:	370c      	adds	r7, #12
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr

08003228 <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 8003228:	b480      	push	{r7}
 800322a:	b085      	sub	sp, #20
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	7c1b      	ldrb	r3, [r3, #16]
 8003236:	2b01      	cmp	r3, #1
 8003238:	d101      	bne.n	800323e <HAL_DSI_ConfigPhyTimer+0x16>
 800323a:	2302      	movs	r3, #2
 800323c:	e058      	b.n	80032f0 <HAL_DSI_ConfigPhyTimer+0xc8>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2201      	movs	r2, #1
 8003242:	741a      	strb	r2, [r3, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	4293      	cmp	r3, r2
 800324e:	bf38      	it	cc
 8003250:	4613      	movcc	r3, r2
 8003252:	60fb      	str	r3, [r7, #12]
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 8003264:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	041a      	lsls	r2, r3, #16
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	431a      	orrs	r2, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	430a      	orrs	r2, r1
 800327e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8003292:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	691a      	ldr	r2, [r3, #16]
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	041b      	lsls	r3, r3, #16
 80032a8:	431a      	orrs	r2, r3
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	061b      	lsls	r3, r3, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 80032b0:	431a      	orrs	r2, r3
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	430a      	orrs	r2, r1
 80032b8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80032cc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	695b      	ldr	r3, [r3, #20]
 80032dc:	021a      	lsls	r2, r3, #8
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	430a      	orrs	r2, r1
 80032e4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80032ee:	2300      	movs	r3, #0
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3714      	adds	r7, #20
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr

080032fc <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b083      	sub	sp, #12
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	7c1b      	ldrb	r3, [r3, #16]
 800330a:	2b01      	cmp	r3, #1
 800330c:	d101      	bne.n	8003312 <HAL_DSI_ConfigHostTimeouts+0x16>
 800330e:	2302      	movs	r3, #2
 8003310:	e0b4      	b.n	800347c <HAL_DSI_ConfigHostTimeouts+0x180>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2201      	movs	r2, #1
 8003316:	741a      	strb	r2, [r3, #16]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	689a      	ldr	r2, [r3, #8]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8003326:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	6899      	ldr	r1, [r3, #8]
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	021a      	lsls	r2, r3, #8
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	430a      	orrs	r2, r1
 800333a:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	b292      	uxth	r2, r2
 8003348:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	041a      	lsls	r2, r3, #16
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	430a      	orrs	r2, r1
 800335c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	4b47      	ldr	r3, [pc, #284]	; (8003488 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 800336a:	400b      	ands	r3, r1
 800336c:	6793      	str	r3, [r2, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	689a      	ldr	r2, [r3, #8]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	430a      	orrs	r2, r1
 800337e:	679a      	str	r2, [r3, #120]	; 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	4b3f      	ldr	r3, [pc, #252]	; (8003488 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 800338c:	400b      	ands	r3, r1
 800338e:	67d3      	str	r3, [r2, #124]	; 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	68da      	ldr	r2, [r3, #12]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	430a      	orrs	r2, r1
 80033a0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	4b36      	ldr	r3, [pc, #216]	; (8003488 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 80033b0:	400b      	ands	r3, r1
 80033b2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	691a      	ldr	r2, [r3, #16]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	430a      	orrs	r2, r1
 80033c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	4b2b      	ldr	r3, [pc, #172]	; (8003488 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 80033da:	400b      	ands	r3, r1
 80033dc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	695a      	ldr	r2, [r3, #20]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	430a      	orrs	r2, r1
 80033f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8003406:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	699a      	ldr	r2, [r3, #24]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	430a      	orrs	r2, r1
 800341c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	4b16      	ldr	r3, [pc, #88]	; (8003488 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 800342e:	400b      	ands	r3, r1
 8003430:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	69da      	ldr	r2, [r3, #28]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	430a      	orrs	r2, r1
 8003446:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	4b0c      	ldr	r3, [pc, #48]	; (8003488 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8003458:	400b      	ands	r3, r1
 800345a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	6a1a      	ldr	r2, [r3, #32]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	430a      	orrs	r2, r1
 8003470:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800347a:	2300      	movs	r3, #0
}
 800347c:	4618      	mov	r0, r3
 800347e:	370c      	adds	r7, #12
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr
 8003488:	ffff0000 	.word	0xffff0000

0800348c <HAL_DSI_SetLowPowerRXFilter>:
  *               the configuration information for the DSI.
  * @param  Frequency  cutoff frequency of low-pass filter at the input of LPRX
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	7c1b      	ldrb	r3, [r3, #16]
 800349a:	2b01      	cmp	r3, #1
 800349c:	d101      	bne.n	80034a2 <HAL_DSI_SetLowPowerRXFilter+0x16>
 800349e:	2302      	movs	r3, #2
 80034a0:	e01b      	b.n	80034da <HAL_DSI_SetLowPowerRXFilter+0x4e>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2201      	movs	r2, #1
 80034a6:	741a      	strb	r2, [r3, #16]

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 80034b8:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	065a      	lsls	r2, r3, #25
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	430a      	orrs	r2, r1
 80034ce:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2200      	movs	r2, #0
 80034d6:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80034d8:	2300      	movs	r3, #0
}
 80034da:	4618      	mov	r0, r3
 80034dc:	370c      	adds	r7, #12
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr
	...

080034e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b089      	sub	sp, #36	; 0x24
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80034f2:	2300      	movs	r3, #0
 80034f4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80034f6:	2300      	movs	r3, #0
 80034f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80034fa:	2300      	movs	r3, #0
 80034fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80034fe:	2300      	movs	r3, #0
 8003500:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003502:	2300      	movs	r3, #0
 8003504:	61fb      	str	r3, [r7, #28]
 8003506:	e175      	b.n	80037f4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003508:	2201      	movs	r2, #1
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	fa02 f303 	lsl.w	r3, r2, r3
 8003510:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	697a      	ldr	r2, [r7, #20]
 8003518:	4013      	ands	r3, r2
 800351a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800351c:	693a      	ldr	r2, [r7, #16]
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	429a      	cmp	r2, r3
 8003522:	f040 8164 	bne.w	80037ee <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	f003 0303 	and.w	r3, r3, #3
 800352e:	2b01      	cmp	r3, #1
 8003530:	d005      	beq.n	800353e <HAL_GPIO_Init+0x56>
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	f003 0303 	and.w	r3, r3, #3
 800353a:	2b02      	cmp	r3, #2
 800353c:	d130      	bne.n	80035a0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003544:	69fb      	ldr	r3, [r7, #28]
 8003546:	005b      	lsls	r3, r3, #1
 8003548:	2203      	movs	r2, #3
 800354a:	fa02 f303 	lsl.w	r3, r2, r3
 800354e:	43db      	mvns	r3, r3
 8003550:	69ba      	ldr	r2, [r7, #24]
 8003552:	4013      	ands	r3, r2
 8003554:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	68da      	ldr	r2, [r3, #12]
 800355a:	69fb      	ldr	r3, [r7, #28]
 800355c:	005b      	lsls	r3, r3, #1
 800355e:	fa02 f303 	lsl.w	r3, r2, r3
 8003562:	69ba      	ldr	r2, [r7, #24]
 8003564:	4313      	orrs	r3, r2
 8003566:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	69ba      	ldr	r2, [r7, #24]
 800356c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003574:	2201      	movs	r2, #1
 8003576:	69fb      	ldr	r3, [r7, #28]
 8003578:	fa02 f303 	lsl.w	r3, r2, r3
 800357c:	43db      	mvns	r3, r3
 800357e:	69ba      	ldr	r2, [r7, #24]
 8003580:	4013      	ands	r3, r2
 8003582:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	091b      	lsrs	r3, r3, #4
 800358a:	f003 0201 	and.w	r2, r3, #1
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	fa02 f303 	lsl.w	r3, r2, r3
 8003594:	69ba      	ldr	r2, [r7, #24]
 8003596:	4313      	orrs	r3, r2
 8003598:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	69ba      	ldr	r2, [r7, #24]
 800359e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	f003 0303 	and.w	r3, r3, #3
 80035a8:	2b03      	cmp	r3, #3
 80035aa:	d017      	beq.n	80035dc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	005b      	lsls	r3, r3, #1
 80035b6:	2203      	movs	r2, #3
 80035b8:	fa02 f303 	lsl.w	r3, r2, r3
 80035bc:	43db      	mvns	r3, r3
 80035be:	69ba      	ldr	r2, [r7, #24]
 80035c0:	4013      	ands	r3, r2
 80035c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	689a      	ldr	r2, [r3, #8]
 80035c8:	69fb      	ldr	r3, [r7, #28]
 80035ca:	005b      	lsls	r3, r3, #1
 80035cc:	fa02 f303 	lsl.w	r3, r2, r3
 80035d0:	69ba      	ldr	r2, [r7, #24]
 80035d2:	4313      	orrs	r3, r2
 80035d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	69ba      	ldr	r2, [r7, #24]
 80035da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f003 0303 	and.w	r3, r3, #3
 80035e4:	2b02      	cmp	r3, #2
 80035e6:	d123      	bne.n	8003630 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	08da      	lsrs	r2, r3, #3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	3208      	adds	r2, #8
 80035f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80035f6:	69fb      	ldr	r3, [r7, #28]
 80035f8:	f003 0307 	and.w	r3, r3, #7
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	220f      	movs	r2, #15
 8003600:	fa02 f303 	lsl.w	r3, r2, r3
 8003604:	43db      	mvns	r3, r3
 8003606:	69ba      	ldr	r2, [r7, #24]
 8003608:	4013      	ands	r3, r2
 800360a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	691a      	ldr	r2, [r3, #16]
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	f003 0307 	and.w	r3, r3, #7
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	fa02 f303 	lsl.w	r3, r2, r3
 800361c:	69ba      	ldr	r2, [r7, #24]
 800361e:	4313      	orrs	r3, r2
 8003620:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	08da      	lsrs	r2, r3, #3
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	3208      	adds	r2, #8
 800362a:	69b9      	ldr	r1, [r7, #24]
 800362c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	005b      	lsls	r3, r3, #1
 800363a:	2203      	movs	r2, #3
 800363c:	fa02 f303 	lsl.w	r3, r2, r3
 8003640:	43db      	mvns	r3, r3
 8003642:	69ba      	ldr	r2, [r7, #24]
 8003644:	4013      	ands	r3, r2
 8003646:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	f003 0203 	and.w	r2, r3, #3
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	005b      	lsls	r3, r3, #1
 8003654:	fa02 f303 	lsl.w	r3, r2, r3
 8003658:	69ba      	ldr	r2, [r7, #24]
 800365a:	4313      	orrs	r3, r2
 800365c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	69ba      	ldr	r2, [r7, #24]
 8003662:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800366c:	2b00      	cmp	r3, #0
 800366e:	f000 80be 	beq.w	80037ee <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003672:	4b66      	ldr	r3, [pc, #408]	; (800380c <HAL_GPIO_Init+0x324>)
 8003674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003676:	4a65      	ldr	r2, [pc, #404]	; (800380c <HAL_GPIO_Init+0x324>)
 8003678:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800367c:	6453      	str	r3, [r2, #68]	; 0x44
 800367e:	4b63      	ldr	r3, [pc, #396]	; (800380c <HAL_GPIO_Init+0x324>)
 8003680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003682:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003686:	60fb      	str	r3, [r7, #12]
 8003688:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800368a:	4a61      	ldr	r2, [pc, #388]	; (8003810 <HAL_GPIO_Init+0x328>)
 800368c:	69fb      	ldr	r3, [r7, #28]
 800368e:	089b      	lsrs	r3, r3, #2
 8003690:	3302      	adds	r3, #2
 8003692:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003696:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003698:	69fb      	ldr	r3, [r7, #28]
 800369a:	f003 0303 	and.w	r3, r3, #3
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	220f      	movs	r2, #15
 80036a2:	fa02 f303 	lsl.w	r3, r2, r3
 80036a6:	43db      	mvns	r3, r3
 80036a8:	69ba      	ldr	r2, [r7, #24]
 80036aa:	4013      	ands	r3, r2
 80036ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	4a58      	ldr	r2, [pc, #352]	; (8003814 <HAL_GPIO_Init+0x32c>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d037      	beq.n	8003726 <HAL_GPIO_Init+0x23e>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	4a57      	ldr	r2, [pc, #348]	; (8003818 <HAL_GPIO_Init+0x330>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d031      	beq.n	8003722 <HAL_GPIO_Init+0x23a>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4a56      	ldr	r2, [pc, #344]	; (800381c <HAL_GPIO_Init+0x334>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d02b      	beq.n	800371e <HAL_GPIO_Init+0x236>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	4a55      	ldr	r2, [pc, #340]	; (8003820 <HAL_GPIO_Init+0x338>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d025      	beq.n	800371a <HAL_GPIO_Init+0x232>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4a54      	ldr	r2, [pc, #336]	; (8003824 <HAL_GPIO_Init+0x33c>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d01f      	beq.n	8003716 <HAL_GPIO_Init+0x22e>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4a53      	ldr	r2, [pc, #332]	; (8003828 <HAL_GPIO_Init+0x340>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d019      	beq.n	8003712 <HAL_GPIO_Init+0x22a>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4a52      	ldr	r2, [pc, #328]	; (800382c <HAL_GPIO_Init+0x344>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d013      	beq.n	800370e <HAL_GPIO_Init+0x226>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4a51      	ldr	r2, [pc, #324]	; (8003830 <HAL_GPIO_Init+0x348>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d00d      	beq.n	800370a <HAL_GPIO_Init+0x222>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4a50      	ldr	r2, [pc, #320]	; (8003834 <HAL_GPIO_Init+0x34c>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d007      	beq.n	8003706 <HAL_GPIO_Init+0x21e>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4a4f      	ldr	r2, [pc, #316]	; (8003838 <HAL_GPIO_Init+0x350>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d101      	bne.n	8003702 <HAL_GPIO_Init+0x21a>
 80036fe:	2309      	movs	r3, #9
 8003700:	e012      	b.n	8003728 <HAL_GPIO_Init+0x240>
 8003702:	230a      	movs	r3, #10
 8003704:	e010      	b.n	8003728 <HAL_GPIO_Init+0x240>
 8003706:	2308      	movs	r3, #8
 8003708:	e00e      	b.n	8003728 <HAL_GPIO_Init+0x240>
 800370a:	2307      	movs	r3, #7
 800370c:	e00c      	b.n	8003728 <HAL_GPIO_Init+0x240>
 800370e:	2306      	movs	r3, #6
 8003710:	e00a      	b.n	8003728 <HAL_GPIO_Init+0x240>
 8003712:	2305      	movs	r3, #5
 8003714:	e008      	b.n	8003728 <HAL_GPIO_Init+0x240>
 8003716:	2304      	movs	r3, #4
 8003718:	e006      	b.n	8003728 <HAL_GPIO_Init+0x240>
 800371a:	2303      	movs	r3, #3
 800371c:	e004      	b.n	8003728 <HAL_GPIO_Init+0x240>
 800371e:	2302      	movs	r3, #2
 8003720:	e002      	b.n	8003728 <HAL_GPIO_Init+0x240>
 8003722:	2301      	movs	r3, #1
 8003724:	e000      	b.n	8003728 <HAL_GPIO_Init+0x240>
 8003726:	2300      	movs	r3, #0
 8003728:	69fa      	ldr	r2, [r7, #28]
 800372a:	f002 0203 	and.w	r2, r2, #3
 800372e:	0092      	lsls	r2, r2, #2
 8003730:	4093      	lsls	r3, r2
 8003732:	69ba      	ldr	r2, [r7, #24]
 8003734:	4313      	orrs	r3, r2
 8003736:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003738:	4935      	ldr	r1, [pc, #212]	; (8003810 <HAL_GPIO_Init+0x328>)
 800373a:	69fb      	ldr	r3, [r7, #28]
 800373c:	089b      	lsrs	r3, r3, #2
 800373e:	3302      	adds	r3, #2
 8003740:	69ba      	ldr	r2, [r7, #24]
 8003742:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003746:	4b3d      	ldr	r3, [pc, #244]	; (800383c <HAL_GPIO_Init+0x354>)
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	43db      	mvns	r3, r3
 8003750:	69ba      	ldr	r2, [r7, #24]
 8003752:	4013      	ands	r3, r2
 8003754:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d003      	beq.n	800376a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003762:	69ba      	ldr	r2, [r7, #24]
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	4313      	orrs	r3, r2
 8003768:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800376a:	4a34      	ldr	r2, [pc, #208]	; (800383c <HAL_GPIO_Init+0x354>)
 800376c:	69bb      	ldr	r3, [r7, #24]
 800376e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003770:	4b32      	ldr	r3, [pc, #200]	; (800383c <HAL_GPIO_Init+0x354>)
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	43db      	mvns	r3, r3
 800377a:	69ba      	ldr	r2, [r7, #24]
 800377c:	4013      	ands	r3, r2
 800377e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003788:	2b00      	cmp	r3, #0
 800378a:	d003      	beq.n	8003794 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800378c:	69ba      	ldr	r2, [r7, #24]
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	4313      	orrs	r3, r2
 8003792:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003794:	4a29      	ldr	r2, [pc, #164]	; (800383c <HAL_GPIO_Init+0x354>)
 8003796:	69bb      	ldr	r3, [r7, #24]
 8003798:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800379a:	4b28      	ldr	r3, [pc, #160]	; (800383c <HAL_GPIO_Init+0x354>)
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	43db      	mvns	r3, r3
 80037a4:	69ba      	ldr	r2, [r7, #24]
 80037a6:	4013      	ands	r3, r2
 80037a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d003      	beq.n	80037be <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80037b6:	69ba      	ldr	r2, [r7, #24]
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80037be:	4a1f      	ldr	r2, [pc, #124]	; (800383c <HAL_GPIO_Init+0x354>)
 80037c0:	69bb      	ldr	r3, [r7, #24]
 80037c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80037c4:	4b1d      	ldr	r3, [pc, #116]	; (800383c <HAL_GPIO_Init+0x354>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	43db      	mvns	r3, r3
 80037ce:	69ba      	ldr	r2, [r7, #24]
 80037d0:	4013      	ands	r3, r2
 80037d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d003      	beq.n	80037e8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80037e0:	69ba      	ldr	r2, [r7, #24]
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80037e8:	4a14      	ldr	r2, [pc, #80]	; (800383c <HAL_GPIO_Init+0x354>)
 80037ea:	69bb      	ldr	r3, [r7, #24]
 80037ec:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	3301      	adds	r3, #1
 80037f2:	61fb      	str	r3, [r7, #28]
 80037f4:	69fb      	ldr	r3, [r7, #28]
 80037f6:	2b0f      	cmp	r3, #15
 80037f8:	f67f ae86 	bls.w	8003508 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80037fc:	bf00      	nop
 80037fe:	bf00      	nop
 8003800:	3724      	adds	r7, #36	; 0x24
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr
 800380a:	bf00      	nop
 800380c:	40023800 	.word	0x40023800
 8003810:	40013800 	.word	0x40013800
 8003814:	40020000 	.word	0x40020000
 8003818:	40020400 	.word	0x40020400
 800381c:	40020800 	.word	0x40020800
 8003820:	40020c00 	.word	0x40020c00
 8003824:	40021000 	.word	0x40021000
 8003828:	40021400 	.word	0x40021400
 800382c:	40021800 	.word	0x40021800
 8003830:	40021c00 	.word	0x40021c00
 8003834:	40022000 	.word	0x40022000
 8003838:	40022400 	.word	0x40022400
 800383c:	40013c00 	.word	0x40013c00

08003840 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b082      	sub	sp, #8
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d101      	bne.n	8003852 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e07f      	b.n	8003952 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003858:	b2db      	uxtb	r3, r3
 800385a:	2b00      	cmp	r3, #0
 800385c:	d106      	bne.n	800386c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f7fd fbe4 	bl	8001034 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2224      	movs	r2, #36	; 0x24
 8003870:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f022 0201 	bic.w	r2, r2, #1
 8003882:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	685a      	ldr	r2, [r3, #4]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003890:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	689a      	ldr	r2, [r3, #8]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80038a0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	68db      	ldr	r3, [r3, #12]
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d107      	bne.n	80038ba <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	689a      	ldr	r2, [r3, #8]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80038b6:	609a      	str	r2, [r3, #8]
 80038b8:	e006      	b.n	80038c8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	689a      	ldr	r2, [r3, #8]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80038c6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	2b02      	cmp	r3, #2
 80038ce:	d104      	bne.n	80038da <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80038d8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	6859      	ldr	r1, [r3, #4]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	4b1d      	ldr	r3, [pc, #116]	; (800395c <HAL_I2C_Init+0x11c>)
 80038e6:	430b      	orrs	r3, r1
 80038e8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	68da      	ldr	r2, [r3, #12]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80038f8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	691a      	ldr	r2, [r3, #16]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	695b      	ldr	r3, [r3, #20]
 8003902:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	699b      	ldr	r3, [r3, #24]
 800390a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	430a      	orrs	r2, r1
 8003912:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	69d9      	ldr	r1, [r3, #28]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6a1a      	ldr	r2, [r3, #32]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	430a      	orrs	r2, r1
 8003922:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f042 0201 	orr.w	r2, r2, #1
 8003932:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2200      	movs	r2, #0
 8003938:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2220      	movs	r2, #32
 800393e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2200      	movs	r2, #0
 800394c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003950:	2300      	movs	r3, #0
}
 8003952:	4618      	mov	r0, r3
 8003954:	3708      	adds	r7, #8
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	02008000 	.word	0x02008000

08003960 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b084      	sub	sp, #16
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	699b      	ldr	r3, [r3, #24]
 800396e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800397c:	2b00      	cmp	r3, #0
 800397e:	d005      	beq.n	800398c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003984:	68ba      	ldr	r2, [r7, #8]
 8003986:	68f9      	ldr	r1, [r7, #12]
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	4798      	blx	r3
  }
}
 800398c:	bf00      	nop
 800398e:	3710      	adds	r7, #16
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}

08003994 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003994:	b480      	push	{r7}
 8003996:	b083      	sub	sp, #12
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	2b20      	cmp	r3, #32
 80039a8:	d138      	bne.n	8003a1c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d101      	bne.n	80039b8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80039b4:	2302      	movs	r3, #2
 80039b6:	e032      	b.n	8003a1e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2224      	movs	r2, #36	; 0x24
 80039c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f022 0201 	bic.w	r2, r2, #1
 80039d6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80039e6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	6819      	ldr	r1, [r3, #0]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	683a      	ldr	r2, [r7, #0]
 80039f4:	430a      	orrs	r2, r1
 80039f6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f042 0201 	orr.w	r2, r2, #1
 8003a06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2220      	movs	r2, #32
 8003a0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2200      	movs	r2, #0
 8003a14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	e000      	b.n	8003a1e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003a1c:	2302      	movs	r3, #2
  }
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	370c      	adds	r7, #12
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr

08003a2a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003a2a:	b480      	push	{r7}
 8003a2c:	b085      	sub	sp, #20
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	6078      	str	r0, [r7, #4]
 8003a32:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	2b20      	cmp	r3, #32
 8003a3e:	d139      	bne.n	8003ab4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d101      	bne.n	8003a4e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003a4a:	2302      	movs	r3, #2
 8003a4c:	e033      	b.n	8003ab6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2201      	movs	r2, #1
 8003a52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2224      	movs	r2, #36	; 0x24
 8003a5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f022 0201 	bic.w	r2, r2, #1
 8003a6c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003a7c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	021b      	lsls	r3, r3, #8
 8003a82:	68fa      	ldr	r2, [r7, #12]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	68fa      	ldr	r2, [r7, #12]
 8003a8e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f042 0201 	orr.w	r2, r2, #1
 8003a9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2220      	movs	r2, #32
 8003aa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	e000      	b.n	8003ab6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003ab4:	2302      	movs	r3, #2
  }
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3714      	adds	r7, #20
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr
	...

08003ac4 <HAL_JPEG_Init>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_Init(JPEG_HandleTypeDef *hjpeg)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b082      	sub	sp, #8
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
    99,  99,  99,  99,  99,  99,  99,  99,
    99,  99,  99,  99,  99,  99,  99,  99
  };

  /* Check the JPEG handle allocation */
  if (hjpeg == NULL)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d101      	bne.n	8003ad6 <HAL_JPEG_Init+0x12>
  {
    return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e078      	b.n	8003bc8 <HAL_JPEG_Init+0x104>

    /* Init the low level hardware */
    hjpeg->MspInitCallback(hjpeg);
  }
#else
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d106      	bne.n	8003af0 <HAL_JPEG_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hjpeg->Lock = HAL_UNLOCKED;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_JPEG_MspInit(hjpeg);
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f7fd fb2e 	bl	800114c <HAL_JPEG_MspInit>
  }
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2202      	movs	r2, #2
 8003af4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Start the JPEG Core*/
  __HAL_JPEG_ENABLE(hjpeg);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f042 0201 	orr.w	r2, r2, #1
 8003b06:	631a      	str	r2, [r3, #48]	; 0x30

  /* Stop the JPEG encoding/decoding process*/
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f022 0201 	bic.w	r2, r2, #1
 8003b16:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 8003b26:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable All DMA requests */
  JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_MASK);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
 8003b36:	631a      	str	r2, [r3, #48]	; 0x30

  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b46:	631a      	str	r2, [r3, #48]	; 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b56:	631a      	str	r2, [r3, #48]	; 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8003b66:	639a      	str	r2, [r3, #56]	; 0x38

  /* init default quantization tables*/
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	4a19      	ldr	r2, [pc, #100]	; (8003bd0 <HAL_JPEG_Init+0x10c>)
 8003b6c:	63da      	str	r2, [r3, #60]	; 0x3c
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4a18      	ldr	r2, [pc, #96]	; (8003bd4 <HAL_JPEG_Init+0x110>)
 8003b72:	641a      	str	r2, [r3, #64]	; 0x40
  hjpeg->QuantTable2 = NULL;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2200      	movs	r2, #0
 8003b78:	645a      	str	r2, [r3, #68]	; 0x44
  hjpeg->QuantTable3 = NULL;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	649a      	str	r2, [r3, #72]	; 0x48

  /* init the default Huffman tables*/
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f000 fdab 	bl	80046dc <JPEG_Set_HuffEnc_Mem>
 8003b86:	4603      	mov	r3, r0
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d004      	beq.n	8003b96 <HAL_JPEG_Init+0xd2>
  {
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	651a      	str	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e018      	b.n	8003bc8 <HAL_JPEG_Init+0x104>
  }

  /* Enable header processing*/
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	685a      	ldr	r2, [r3, #4]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ba4:	605a      	str	r2, [r3, #4]

  /* Reset JpegInCount and JpegOutCount */
  hjpeg->JpegInCount = 0;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	621a      	str	r2, [r3, #32]
  hjpeg->JpegOutCount = 0;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_READY;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Reset the JPEG ErrorCode */
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	651a      	str	r2, [r3, #80]	; 0x50

  /*Clear the context filelds*/
  hjpeg->Context = 0;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Return function status */
  return HAL_OK;
 8003bc6:	2300      	movs	r3, #0
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3708      	adds	r7, #8
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	08026960 	.word	0x08026960
 8003bd4:	080269a0 	.word	0x080269a0

08003bd8 <HAL_JPEG_GetInfo>:
  * @param  pInfo pointer to a JPEG_ConfTypeDef structure that contains
  *         The JPEG decoded header information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_GetInfo(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b086      	sub	sp, #24
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	6039      	str	r1, [r7, #0]
  uint32_t yblockNb;
  uint32_t cBblockNb;
  uint32_t cRblockNb;

  /* Check the JPEG handle allocation */
  if ((hjpeg == NULL) || (pInfo == NULL))
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d002      	beq.n	8003bee <HAL_JPEG_GetInfo+0x16>
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d101      	bne.n	8003bf2 <HAL_JPEG_GetInfo+0x1a>
  {
    return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e083      	b.n	8003cfa <HAL_JPEG_GetInfo+0x122>
  }

  /*Read the conf parameters */
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	f003 0303 	and.w	r3, r3, #3
 8003bfc:	2b02      	cmp	r3, #2
 8003bfe:	d103      	bne.n	8003c08 <HAL_JPEG_GetInfo+0x30>
  {
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	2210      	movs	r2, #16
 8003c04:	601a      	str	r2, [r3, #0]
 8003c06:	e017      	b.n	8003c38 <HAL_JPEG_GetInfo+0x60>
  }
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	f003 0303 	and.w	r3, r3, #3
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d103      	bne.n	8003c1e <HAL_JPEG_GetInfo+0x46>
  {
    pInfo->ColorSpace = JPEG_GRAYSCALE_COLORSPACE;
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	601a      	str	r2, [r3, #0]
 8003c1c:	e00c      	b.n	8003c38 <HAL_JPEG_GetInfo+0x60>
  }
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	f003 0303 	and.w	r3, r3, #3
 8003c28:	2b03      	cmp	r3, #3
 8003c2a:	d103      	bne.n	8003c34 <HAL_JPEG_GetInfo+0x5c>
  {
    pInfo->ColorSpace = JPEG_CMYK_COLORSPACE;
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	2230      	movs	r2, #48	; 0x30
 8003c30:	601a      	str	r2, [r3, #0]
 8003c32:	e001      	b.n	8003c38 <HAL_JPEG_GetInfo+0x60>
  }
  else
  {
    return HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	e060      	b.n	8003cfa <HAL_JPEG_GetInfo+0x122>
  }

  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	0c1b      	lsrs	r3, r3, #16
 8003c40:	b29a      	uxth	r2, r3
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	609a      	str	r2, [r3, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	0c1b      	lsrs	r3, r3, #16
 8003c4e:	b29a      	uxth	r2, r3
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	60da      	str	r2, [r3, #12]

  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	2b10      	cmp	r3, #16
 8003c5a:	d003      	beq.n	8003c64 <HAL_JPEG_GetInfo+0x8c>
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	2b30      	cmp	r3, #48	; 0x30
 8003c62:	d140      	bne.n	8003ce6 <HAL_JPEG_GetInfo+0x10e>
  {
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	691b      	ldr	r3, [r3, #16]
 8003c6a:	091b      	lsrs	r3, r3, #4
 8003c6c:	f003 030f 	and.w	r3, r3, #15
 8003c70:	617b      	str	r3, [r7, #20]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	695b      	ldr	r3, [r3, #20]
 8003c78:	091b      	lsrs	r3, r3, #4
 8003c7a:	f003 030f 	and.w	r3, r3, #15
 8003c7e:	613b      	str	r3, [r7, #16]
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	699b      	ldr	r3, [r3, #24]
 8003c86:	091b      	lsrs	r3, r3, #4
 8003c88:	f003 030f 	and.w	r3, r3, #15
 8003c8c:	60fb      	str	r3, [r7, #12]

    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d109      	bne.n	8003ca8 <HAL_JPEG_GetInfo+0xd0>
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d106      	bne.n	8003ca8 <HAL_JPEG_GetInfo+0xd0>
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d103      	bne.n	8003ca8 <HAL_JPEG_GetInfo+0xd0>
    {
      pInfo->ChromaSubsampling = JPEG_422_SUBSAMPLING; /*16x8 block*/
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	2202      	movs	r2, #2
 8003ca4:	605a      	str	r2, [r3, #4]
 8003ca6:	e01d      	b.n	8003ce4 <HAL_JPEG_GetInfo+0x10c>
    }
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d109      	bne.n	8003cc2 <HAL_JPEG_GetInfo+0xea>
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d106      	bne.n	8003cc2 <HAL_JPEG_GetInfo+0xea>
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d103      	bne.n	8003cc2 <HAL_JPEG_GetInfo+0xea>
    {
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	605a      	str	r2, [r3, #4]
 8003cc0:	e010      	b.n	8003ce4 <HAL_JPEG_GetInfo+0x10c>
    }
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	2b03      	cmp	r3, #3
 8003cc6:	d109      	bne.n	8003cdc <HAL_JPEG_GetInfo+0x104>
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d106      	bne.n	8003cdc <HAL_JPEG_GetInfo+0x104>
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d103      	bne.n	8003cdc <HAL_JPEG_GetInfo+0x104>
    {
      pInfo->ChromaSubsampling = JPEG_420_SUBSAMPLING;
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	605a      	str	r2, [r3, #4]
 8003cda:	e003      	b.n	8003ce4 <HAL_JPEG_GetInfo+0x10c>
    }
    else /*Default is 4:4:4*/
    {
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	605a      	str	r2, [r3, #4]
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8003ce2:	e003      	b.n	8003cec <HAL_JPEG_GetInfo+0x114>
 8003ce4:	e002      	b.n	8003cec <HAL_JPEG_GetInfo+0x114>
    }
  }
  else
  {
    pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	605a      	str	r2, [r3, #4]
  }

  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f001 fdef 	bl	80058d0 <JPEG_GetQuality>
 8003cf2:	4602      	mov	r2, r0
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	611a      	str	r2, [r3, #16]

  /* Return function status */
  return HAL_OK;
 8003cf8:	2300      	movs	r3, #0
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3718      	adds	r7, #24
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}

08003d02 <HAL_JPEG_Decode_DMA>:
  * @param  OutDataLength size in bytes of the Output buffer
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Decode_DMA(JPEG_HandleTypeDef *hjpeg, uint8_t *pDataIn, uint32_t InDataLength,
                                       uint8_t *pDataOutMCU, uint32_t OutDataLength)
{
 8003d02:	b580      	push	{r7, lr}
 8003d04:	b084      	sub	sp, #16
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	60f8      	str	r0, [r7, #12]
 8003d0a:	60b9      	str	r1, [r7, #8]
 8003d0c:	607a      	str	r2, [r7, #4]
 8003d0e:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param((InDataLength >= 4UL));
  assert_param((OutDataLength >= 4UL));

  /* Check In/out buffer allocation and size */
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d005      	beq.n	8003d22 <HAL_JPEG_Decode_DMA+0x20>
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d002      	beq.n	8003d22 <HAL_JPEG_Decode_DMA+0x20>
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d101      	bne.n	8003d26 <HAL_JPEG_Decode_DMA+0x24>
  {
    return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e04c      	b.n	8003dc0 <HAL_JPEG_Decode_DMA+0xbe>
  }

  /* Process Locked */
  __HAL_LOCK(hjpeg);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d101      	bne.n	8003d34 <HAL_JPEG_Decode_DMA+0x32>
 8003d30:	2302      	movs	r3, #2
 8003d32:	e045      	b.n	8003dc0 <HAL_JPEG_Decode_DMA+0xbe>
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2201      	movs	r2, #1
 8003d38:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  if (hjpeg->State == HAL_JPEG_STATE_READY)
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d134      	bne.n	8003db2 <HAL_JPEG_Decode_DMA+0xb0>
  {
    /*Change JPEG state*/
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2204      	movs	r2, #4
 8003d4c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

    /*Set the Context to Decode with DMA*/
    hjpeg->Context &= ~(JPEG_CONTEXT_OPERATION_MASK | JPEG_CONTEXT_METHOD_MASK);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d54:	f023 020f 	bic.w	r2, r3, #15
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	655a      	str	r2, [r3, #84]	; 0x54
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d60:	f043 020e 	orr.w	r2, r3, #14
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	655a      	str	r2, [r3, #84]	; 0x54

    /*Store In/out buffers pointers and size*/
    hjpeg->pJpegInBuffPtr = pDataIn;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	68ba      	ldr	r2, [r7, #8]
 8003d6c:	619a      	str	r2, [r3, #24]
    hjpeg->pJpegOutBuffPtr = pDataOutMCU;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	683a      	ldr	r2, [r7, #0]
 8003d72:	61da      	str	r2, [r3, #28]
    hjpeg->InDataLength = InDataLength;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	629a      	str	r2, [r3, #40]	; 0x28
    hjpeg->OutDataLength = OutDataLength;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	69ba      	ldr	r2, [r7, #24]
 8003d7e:	62da      	str	r2, [r3, #44]	; 0x2c

    /*Reset In/out data counter */
    hjpeg->JpegInCount = 0;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2200      	movs	r2, #0
 8003d84:	621a      	str	r2, [r3, #32]
    hjpeg->JpegOutCount = 0;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	625a      	str	r2, [r3, #36]	; 0x24

    /*Init decoding process*/
    JPEG_Init_Process(hjpeg);
 8003d8c:	68f8      	ldr	r0, [r7, #12]
 8003d8e:	f000 ff27 	bl	8004be0 <JPEG_Init_Process>

    /* JPEG decoding process using DMA */
    if (JPEG_DMA_StartProcess(hjpeg) != HAL_OK)
 8003d92:	68f8      	ldr	r0, [r7, #12]
 8003d94:	f001 fa50 	bl	8005238 <JPEG_DMA_StartProcess>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d00f      	beq.n	8003dbe <HAL_JPEG_Decode_DMA+0xbc>
    {
      /* Update State */
      hjpeg->State = HAL_JPEG_STATE_ERROR;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2206      	movs	r2, #6
 8003da2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      /* Process Unlocked */
      __HAL_UNLOCK(hjpeg);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2200      	movs	r2, #0
 8003daa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e006      	b.n	8003dc0 <HAL_JPEG_Decode_DMA+0xbe>
    }
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2200      	movs	r2, #0
 8003db6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    return HAL_BUSY;
 8003dba:	2302      	movs	r3, #2
 8003dbc:	e000      	b.n	8003dc0 <HAL_JPEG_Decode_DMA+0xbe>
  }
  /* Return function status */
  return HAL_OK;
 8003dbe:	2300      	movs	r3, #0
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3710      	adds	r7, #16
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <HAL_JPEG_Pause>:
  *                           JPEG_PAUSE_RESUME_OUTPUT: Pause Output processing
  *                           JPEG_PAUSE_RESUME_INPUT_OUTPUT: Pause Input and Output processing
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Pause(JPEG_HandleTypeDef *hjpeg, uint32_t XferSelection)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b085      	sub	sp, #20
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
 8003dd0:	6039      	str	r1, [r7, #0]
  uint32_t mask = 0;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	60fb      	str	r3, [r7, #12]

  assert_param(IS_JPEG_PAUSE_RESUME_STATE(XferSelection));

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dda:	f003 030c 	and.w	r3, r3, #12
 8003dde:	2b0c      	cmp	r3, #12
 8003de0:	d129      	bne.n	8003e36 <HAL_JPEG_Pause+0x6e>
  {
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	f003 0301 	and.w	r3, r3, #1
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d009      	beq.n	8003e00 <HAL_JPEG_Pause+0x38>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003df0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	655a      	str	r2, [r3, #84]	; 0x54
      mask |= JPEG_DMA_IDMA;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003dfe:	60fb      	str	r3, [r7, #12]
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	f003 0302 	and.w	r3, r3, #2
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d009      	beq.n	8003e1e <HAL_JPEG_Pause+0x56>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e0e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	655a      	str	r2, [r3, #84]	; 0x54
      mask |= JPEG_DMA_ODMA;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003e1c:	60fb      	str	r3, [r7, #12]
    }
    JPEG_DISABLE_DMA(hjpeg, mask);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8003e2a:	43da      	mvns	r2, r3
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	400a      	ands	r2, r1
 8003e32:	631a      	str	r2, [r3, #48]	; 0x30
 8003e34:	e02c      	b.n	8003e90 <HAL_JPEG_Pause+0xc8>

  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e3a:	f003 030c 	and.w	r3, r3, #12
 8003e3e:	2b08      	cmp	r3, #8
 8003e40:	d126      	bne.n	8003e90 <HAL_JPEG_Pause+0xc8>
  {

    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	f003 0301 	and.w	r3, r3, #1
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d009      	beq.n	8003e60 <HAL_JPEG_Pause+0x98>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e50:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	655a      	str	r2, [r3, #84]	; 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f043 0306 	orr.w	r3, r3, #6
 8003e5e:	60fb      	str	r3, [r7, #12]
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	f003 0302 	and.w	r3, r3, #2
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d009      	beq.n	8003e7e <HAL_JPEG_Pause+0xb6>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e6e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	655a      	str	r2, [r3, #84]	; 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8003e7c:	60fb      	str	r3, [r7, #12]
    }
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	43da      	mvns	r2, r3
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	400a      	ands	r2, r1
 8003e8e:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Nothing to do */
  }

  /* Return function status */
  return HAL_OK;
 8003e90:	2300      	movs	r3, #0
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3714      	adds	r7, #20
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr

08003e9e <HAL_JPEG_Resume>:
  *                           JPEG_PAUSE_RESUME_OUTPUT: Resume Output processing
  *                           JPEG_PAUSE_RESUME_INPUT_OUTPUT: Resume Input and Output processing
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Resume(JPEG_HandleTypeDef *hjpeg, uint32_t XferSelection)
{
 8003e9e:	b580      	push	{r7, lr}
 8003ea0:	b084      	sub	sp, #16
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	6078      	str	r0, [r7, #4]
 8003ea6:	6039      	str	r1, [r7, #0]
  uint32_t mask = 0;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	60fb      	str	r3, [r7, #12]

  assert_param(IS_JPEG_PAUSE_RESUME_STATE(XferSelection));

  if ((hjpeg->Context & (JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT)) == 0UL)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eb0:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d101      	bne.n	8003ebc <HAL_JPEG_Resume+0x1e>
  {
    /* if nothing paused to resume return error*/
    return HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e0a9      	b.n	8004010 <HAL_JPEG_Resume+0x172>
  }

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ec0:	f003 030c 	and.w	r3, r3, #12
 8003ec4:	2b0c      	cmp	r3, #12
 8003ec6:	d176      	bne.n	8003fb6 <HAL_JPEG_Resume+0x118>
  {

    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	f003 0301 	and.w	r3, r3, #1
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d030      	beq.n	8003f34 <HAL_JPEG_Resume+0x96>
    {
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ed6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	655a      	str	r2, [r3, #84]	; 0x54
      mask |= JPEG_DMA_IDMA;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003ee4:	60fb      	str	r3, [r7, #12]

      /*JPEG Input DMA transfer data number must be multiple of DMA buffer size
        as the destination is a 32 bits register */
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eea:	f023 0203 	bic.w	r2, r3, #3
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	629a      	str	r2, [r3, #40]	; 0x28

      if (hjpeg->InDataLength > 0UL)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d01c      	beq.n	8003f34 <HAL_JPEG_Resume+0x96>
      {
        /* Start DMA FIFO In transfer */
        if (HAL_DMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	699b      	ldr	r3, [r3, #24]
 8003f02:	4619      	mov	r1, r3
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	3340      	adds	r3, #64	; 0x40
 8003f0a:	461a      	mov	r2, r3
                             hjpeg->InDataLength >> 2) != HAL_OK)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if (HAL_DMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 8003f10:	089b      	lsrs	r3, r3, #2
 8003f12:	f7fe f841 	bl	8001f98 <HAL_DMA_Start_IT>
 8003f16:	4603      	mov	r3, r0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d00b      	beq.n	8003f34 <HAL_JPEG_Resume+0x96>
        {
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f20:	f043 0204 	orr.w	r2, r3, #4
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	651a      	str	r2, [r3, #80]	; 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2206      	movs	r2, #6
 8003f2c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          return HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	e06d      	b.n	8004010 <HAL_JPEG_Resume+0x172>
        }
      }
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	f003 0302 	and.w	r3, r3, #2
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d030      	beq.n	8003fa0 <HAL_JPEG_Resume+0x102>
    {
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f42:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d003      	beq.n	8003f5e <HAL_JPEG_Resume+0xc0>
      {
        JPEG_DMA_PollResidualData(hjpeg);
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f001 fadc 	bl	8005514 <JPEG_DMA_PollResidualData>
 8003f5c:	e020      	b.n	8003fa0 <HAL_JPEG_Resume+0x102>
      }
      else
      {
        mask |= JPEG_DMA_ODMA;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003f64:	60fb      	str	r3, [r7, #12]

        /* Start DMA FIFO Out transfer */
        if (HAL_DMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	3344      	adds	r3, #68	; 0x44
 8003f70:	4619      	mov	r1, r3
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	69db      	ldr	r3, [r3, #28]
 8003f76:	461a      	mov	r2, r3
                             hjpeg->OutDataLength >> 2) != HAL_OK)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if (HAL_DMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8003f7c:	089b      	lsrs	r3, r3, #2
 8003f7e:	f7fe f80b 	bl	8001f98 <HAL_DMA_Start_IT>
 8003f82:	4603      	mov	r3, r0
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d00b      	beq.n	8003fa0 <HAL_JPEG_Resume+0x102>
        {
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f8c:	f043 0204 	orr.w	r2, r3, #4
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	651a      	str	r2, [r3, #80]	; 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2206      	movs	r2, #6
 8003f98:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          return HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	e037      	b.n	8004010 <HAL_JPEG_Resume+0x172>
        }
      }

    }
    JPEG_ENABLE_DMA(hjpeg, mask);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	f403 52c0 	and.w	r2, r3, #6144	; 0x1800
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	430a      	orrs	r2, r1
 8003fb2:	631a      	str	r2, [r3, #48]	; 0x30
 8003fb4:	e02b      	b.n	800400e <HAL_JPEG_Resume+0x170>

  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fba:	f003 030c 	and.w	r3, r3, #12
 8003fbe:	2b08      	cmp	r3, #8
 8003fc0:	d125      	bne.n	800400e <HAL_JPEG_Resume+0x170>
  {
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	f003 0301 	and.w	r3, r3, #1
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d009      	beq.n	8003fe0 <HAL_JPEG_Resume+0x142>
    {
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fd0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	655a      	str	r2, [r3, #84]	; 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f043 0306 	orr.w	r3, r3, #6
 8003fde:	60fb      	str	r3, [r7, #12]
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	f003 0302 	and.w	r3, r3, #2
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d009      	beq.n	8003ffe <HAL_JPEG_Resume+0x160>
    {
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fee:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	655a      	str	r2, [r3, #84]	; 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8003ffc:	60fb      	str	r3, [r7, #12]
    }
    __HAL_JPEG_ENABLE_IT(hjpeg, mask);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	68fa      	ldr	r2, [r7, #12]
 800400a:	430a      	orrs	r2, r1
 800400c:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Nothing to do */
  }

  /* Return function status */
  return HAL_OK;
 800400e:	2300      	movs	r3, #0
}
 8004010:	4618      	mov	r0, r3
 8004012:	3710      	adds	r7, #16
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}

08004018 <HAL_JPEG_ConfigInputBuffer>:
  * @param  pNewInputBuffer Pointer to the new input data buffer
  * @param  InDataLength Size in bytes of the new Input data buffer
  * @retval HAL status
  */
void HAL_JPEG_ConfigInputBuffer(JPEG_HandleTypeDef *hjpeg, uint8_t *pNewInputBuffer, uint32_t InDataLength)
{
 8004018:	b480      	push	{r7}
 800401a:	b085      	sub	sp, #20
 800401c:	af00      	add	r7, sp, #0
 800401e:	60f8      	str	r0, [r7, #12]
 8004020:	60b9      	str	r1, [r7, #8]
 8004022:	607a      	str	r2, [r7, #4]
  hjpeg->pJpegInBuffPtr =  pNewInputBuffer;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	68ba      	ldr	r2, [r7, #8]
 8004028:	619a      	str	r2, [r3, #24]
  hjpeg->InDataLength = InDataLength;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004030:	bf00      	nop
 8004032:	3714      	adds	r7, #20
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr

0800403c <HAL_JPEG_ConfigOutputBuffer>:
  * @param  pNewOutputBuffer Pointer to the new output data buffer
  * @param  OutDataLength Size in bytes of the new Output data buffer
  * @retval HAL status
  */
void HAL_JPEG_ConfigOutputBuffer(JPEG_HandleTypeDef *hjpeg, uint8_t *pNewOutputBuffer, uint32_t OutDataLength)
{
 800403c:	b480      	push	{r7}
 800403e:	b085      	sub	sp, #20
 8004040:	af00      	add	r7, sp, #0
 8004042:	60f8      	str	r0, [r7, #12]
 8004044:	60b9      	str	r1, [r7, #8]
 8004046:	607a      	str	r2, [r7, #4]
  hjpeg->pJpegOutBuffPtr = pNewOutputBuffer;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	68ba      	ldr	r2, [r7, #8]
 800404c:	61da      	str	r2, [r3, #28]
  hjpeg->OutDataLength = OutDataLength;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004054:	bf00      	nop
 8004056:	3714      	adds	r7, #20
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr

08004060 <HAL_JPEG_EncodeCpltCallback>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
__weak void HAL_JPEG_EncodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
{
 8004060:	b480      	push	{r7}
 8004062:	b083      	sub	sp, #12
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  UNUSED(hjpeg);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_EncodeCpltCallback could be implemented in the user file
   */
}
 8004068:	bf00      	nop
 800406a:	370c      	adds	r7, #12
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr

08004074 <HAL_JPEG_IRQHandler>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
void HAL_JPEG_IRQHandler(JPEG_HandleTypeDef *hjpeg)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b082      	sub	sp, #8
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  switch (hjpeg->State)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8004082:	b2db      	uxtb	r3, r3
 8004084:	3b03      	subs	r3, #3
 8004086:	2b01      	cmp	r3, #1
 8004088:	d813      	bhi.n	80040b2 <HAL_JPEG_IRQHandler+0x3e>
  {
    case HAL_JPEG_STATE_BUSY_ENCODING:
    case HAL_JPEG_STATE_BUSY_DECODING:
      /* continue JPEG data encoding/Decoding*/
      /* JPEG data processing : In/Out FIFO transfer*/
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800408e:	f003 030c 	and.w	r3, r3, #12
 8004092:	2b08      	cmp	r3, #8
 8004094:	d103      	bne.n	800409e <HAL_JPEG_IRQHandler+0x2a>
      {
        (void) JPEG_Process(hjpeg);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f000 fe1e 	bl	8004cd8 <JPEG_Process>
      }
      else
      {
        /* Nothing to do */
      }
      break;
 800409c:	e00b      	b.n	80040b6 <HAL_JPEG_IRQHandler+0x42>
      else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040a2:	f003 030c 	and.w	r3, r3, #12
 80040a6:	2b0c      	cmp	r3, #12
 80040a8:	d105      	bne.n	80040b6 <HAL_JPEG_IRQHandler+0x42>
        JPEG_DMA_ContinueProcess(hjpeg);
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f001 f948 	bl	8005340 <JPEG_DMA_ContinueProcess>
      break;
 80040b0:	e001      	b.n	80040b6 <HAL_JPEG_IRQHandler+0x42>

    default:
      break;
 80040b2:	bf00      	nop
 80040b4:	e000      	b.n	80040b8 <HAL_JPEG_IRQHandler+0x44>
      break;
 80040b6:	bf00      	nop
  }
}
 80040b8:	bf00      	nop
 80040ba:	3708      	adds	r7, #8
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}

080040c0 <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b08b      	sub	sp, #44	; 0x2c
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	60f8      	str	r0, [r7, #12]
 80040c8:	60b9      	str	r1, [r7, #8]
 80040ca:	607a      	str	r2, [r7, #4]
 80040cc:	603b      	str	r3, [r7, #0]
  uint32_t l;
  uint32_t code;
  uint32_t si;

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
 80040ce:	2300      	movs	r3, #0
 80040d0:	623b      	str	r3, [r7, #32]
  for (l = 0; l < 16UL; l++)
 80040d2:	2300      	movs	r3, #0
 80040d4:	61fb      	str	r3, [r7, #28]
 80040d6:	e020      	b.n	800411a <JPEG_Bits_To_SizeCodes+0x5a>
  {
    i = (uint32_t)Bits[l];
 80040d8:	68fa      	ldr	r2, [r7, #12]
 80040da:	69fb      	ldr	r3, [r7, #28]
 80040dc:	4413      	add	r3, r2
 80040de:	781b      	ldrb	r3, [r3, #0]
 80040e0:	627b      	str	r3, [r7, #36]	; 0x24
    if ((p + i) > 256UL)
 80040e2:	6a3a      	ldr	r2, [r7, #32]
 80040e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e6:	4413      	add	r3, r2
 80040e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040ec:	d90f      	bls.n	800410e <JPEG_Bits_To_SizeCodes+0x4e>
    {
      /* check for table overflow */
      return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e055      	b.n	800419e <JPEG_Bits_To_SizeCodes+0xde>
    }
    while (i != 0UL)
    {
      Huffsize[p] = (uint8_t) l + 1U;
 80040f2:	69fb      	ldr	r3, [r7, #28]
 80040f4:	b2da      	uxtb	r2, r3
 80040f6:	68b9      	ldr	r1, [r7, #8]
 80040f8:	6a3b      	ldr	r3, [r7, #32]
 80040fa:	440b      	add	r3, r1
 80040fc:	3201      	adds	r2, #1
 80040fe:	b2d2      	uxtb	r2, r2
 8004100:	701a      	strb	r2, [r3, #0]
      p++;
 8004102:	6a3b      	ldr	r3, [r7, #32]
 8004104:	3301      	adds	r3, #1
 8004106:	623b      	str	r3, [r7, #32]
      i--;
 8004108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410a:	3b01      	subs	r3, #1
 800410c:	627b      	str	r3, [r7, #36]	; 0x24
    while (i != 0UL)
 800410e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004110:	2b00      	cmp	r3, #0
 8004112:	d1ee      	bne.n	80040f2 <JPEG_Bits_To_SizeCodes+0x32>
  for (l = 0; l < 16UL; l++)
 8004114:	69fb      	ldr	r3, [r7, #28]
 8004116:	3301      	adds	r3, #1
 8004118:	61fb      	str	r3, [r7, #28]
 800411a:	69fb      	ldr	r3, [r7, #28]
 800411c:	2b0f      	cmp	r3, #15
 800411e:	d9db      	bls.n	80040d8 <JPEG_Bits_To_SizeCodes+0x18>
    }
  }
  Huffsize[p] = 0;
 8004120:	68ba      	ldr	r2, [r7, #8]
 8004122:	6a3b      	ldr	r3, [r7, #32]
 8004124:	4413      	add	r3, r2
 8004126:	2200      	movs	r2, #0
 8004128:	701a      	strb	r2, [r3, #0]
  *LastK = p;
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	6a3a      	ldr	r2, [r7, #32]
 800412e:	601a      	str	r2, [r3, #0]

  /* Figure C.2: Generation of table of Huffman codes */
  code = 0;
 8004130:	2300      	movs	r3, #0
 8004132:	61bb      	str	r3, [r7, #24]
  si = Huffsize[0];
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	781b      	ldrb	r3, [r3, #0]
 8004138:	617b      	str	r3, [r7, #20]
  p = 0;
 800413a:	2300      	movs	r3, #0
 800413c:	623b      	str	r3, [r7, #32]
  while (Huffsize[p] != 0U)
 800413e:	e027      	b.n	8004190 <JPEG_Bits_To_SizeCodes+0xd0>
  {
    while (((uint32_t) Huffsize[p]) == si)
    {
      Huffcode[p] = code;
 8004140:	6a3b      	ldr	r3, [r7, #32]
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	687a      	ldr	r2, [r7, #4]
 8004146:	4413      	add	r3, r2
 8004148:	69ba      	ldr	r2, [r7, #24]
 800414a:	601a      	str	r2, [r3, #0]
      p++;
 800414c:	6a3b      	ldr	r3, [r7, #32]
 800414e:	3301      	adds	r3, #1
 8004150:	623b      	str	r3, [r7, #32]
      code++;
 8004152:	69bb      	ldr	r3, [r7, #24]
 8004154:	3301      	adds	r3, #1
 8004156:	61bb      	str	r3, [r7, #24]
    while (((uint32_t) Huffsize[p]) == si)
 8004158:	68ba      	ldr	r2, [r7, #8]
 800415a:	6a3b      	ldr	r3, [r7, #32]
 800415c:	4413      	add	r3, r2
 800415e:	781b      	ldrb	r3, [r3, #0]
 8004160:	461a      	mov	r2, r3
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	4293      	cmp	r3, r2
 8004166:	d0eb      	beq.n	8004140 <JPEG_Bits_To_SizeCodes+0x80>
    }
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	2b1f      	cmp	r3, #31
 800416c:	d901      	bls.n	8004172 <JPEG_Bits_To_SizeCodes+0xb2>
    {
      return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e015      	b.n	800419e <JPEG_Bits_To_SizeCodes+0xde>
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 8004172:	2201      	movs	r2, #1
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	fa02 f303 	lsl.w	r3, r2, r3
 800417a:	69ba      	ldr	r2, [r7, #24]
 800417c:	429a      	cmp	r2, r3
 800417e:	d301      	bcc.n	8004184 <JPEG_Bits_To_SizeCodes+0xc4>
    {
      return HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	e00c      	b.n	800419e <JPEG_Bits_To_SizeCodes+0xde>
    }
    code <<= 1;
 8004184:	69bb      	ldr	r3, [r7, #24]
 8004186:	005b      	lsls	r3, r3, #1
 8004188:	61bb      	str	r3, [r7, #24]
    si++;
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	3301      	adds	r3, #1
 800418e:	617b      	str	r3, [r7, #20]
  while (Huffsize[p] != 0U)
 8004190:	68ba      	ldr	r2, [r7, #8]
 8004192:	6a3b      	ldr	r3, [r7, #32]
 8004194:	4413      	add	r3, r2
 8004196:	781b      	ldrb	r3, [r3, #0]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d1dd      	bne.n	8004158 <JPEG_Bits_To_SizeCodes+0x98>
  }
  /* Return function status */
  return HAL_OK;
 800419c:	2300      	movs	r3, #0
}
 800419e:	4618      	mov	r0, r3
 80041a0:	372c      	adds	r7, #44	; 0x2c
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr

080041aa <JPEG_ACHuff_BitsVals_To_SizeCodes>:
  * @param  AC_SizeCodesTable pointer to AC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_ACHuff_BitsVals_To_SizeCodes(JPEG_ACHuffTableTypeDef *AC_BitsValsTable,
                                                           JPEG_AC_HuffCodeTableTypeDef *AC_SizeCodesTable)
{
 80041aa:	b580      	push	{r7, lr}
 80041ac:	f5ad 6da5 	sub.w	sp, sp, #1320	; 0x528
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 80041b6:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 80041ba:	6018      	str	r0, [r3, #0]
 80041bc:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 80041c0:	f5a3 63a5 	sub.w	r3, r3, #1320	; 0x528
 80041c4:	6019      	str	r1, [r3, #0]
  uint32_t huffcode[257];
  uint32_t k;
  uint32_t l, lsb, msb;
  uint32_t lastK;

  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 80041c6:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 80041ca:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 80041ce:	6818      	ldr	r0, [r3, #0]
 80041d0:	f107 0308 	add.w	r3, r7, #8
 80041d4:	f107 020c 	add.w	r2, r7, #12
 80041d8:	f507 6182 	add.w	r1, r7, #1040	; 0x410
 80041dc:	f7ff ff70 	bl	80040c0 <JPEG_Bits_To_SizeCodes>
 80041e0:	4603      	mov	r3, r0
 80041e2:	f887 351f 	strb.w	r3, [r7, #1311]	; 0x51f
  if (error != HAL_OK)
 80041e6:	f897 351f 	ldrb.w	r3, [r7, #1311]	; 0x51f
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d002      	beq.n	80041f4 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 80041ee:	f897 351f 	ldrb.w	r3, [r7, #1311]	; 0x51f
 80041f2:	e075      	b.n	80042e0 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
  }

  /* Figure C.3: Ordering procedure for encoding procedure code tables */
  k = 0;
 80041f4:	2300      	movs	r3, #0
 80041f6:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524

  while (k < lastK)
 80041fa:	e067      	b.n	80042cc <JPEG_ACHuff_BitsVals_To_SizeCodes+0x122>
  {
    l = AC_BitsValsTable->HuffVal[k];
 80041fc:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8004200:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 800420a:	4413      	add	r3, r2
 800420c:	3310      	adds	r3, #16
 800420e:	781b      	ldrb	r3, [r3, #0]
 8004210:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
    if (l == 0UL)
 8004214:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 8004218:	2b00      	cmp	r3, #0
 800421a:	d103      	bne.n	8004224 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x7a>
    {
      l = 160; /*l = 0x00 EOB code*/
 800421c:	23a0      	movs	r3, #160	; 0xa0
 800421e:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
 8004222:	e021      	b.n	8004268 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 8004224:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 8004228:	2bf0      	cmp	r3, #240	; 0xf0
 800422a:	d103      	bne.n	8004234 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x8a>
    {
      l = 161;
 800422c:	23a1      	movs	r3, #161	; 0xa1
 800422e:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
 8004232:	e019      	b.n	8004268 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else
    {
      msb = (l & 0xF0UL) >> 4;
 8004234:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 8004238:	091b      	lsrs	r3, r3, #4
 800423a:	f003 030f 	and.w	r3, r3, #15
 800423e:	f8c7 3518 	str.w	r3, [r7, #1304]	; 0x518
      lsb = (l & 0x0FUL);
 8004242:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 8004246:	f003 030f 	and.w	r3, r3, #15
 800424a:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
      l = (msb * 10UL) + lsb - 1UL;
 800424e:	f8d7 2518 	ldr.w	r2, [r7, #1304]	; 0x518
 8004252:	4613      	mov	r3, r2
 8004254:	009b      	lsls	r3, r3, #2
 8004256:	4413      	add	r3, r2
 8004258:	005b      	lsls	r3, r3, #1
 800425a:	461a      	mov	r2, r3
 800425c:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8004260:	4413      	add	r3, r2
 8004262:	3b01      	subs	r3, #1
 8004264:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
    }
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 8004268:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 800426c:	2ba1      	cmp	r3, #161	; 0xa1
 800426e:	d901      	bls.n	8004274 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xca>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 8004270:	2301      	movs	r3, #1
 8004272:	e035      	b.n	80042e0 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
    }
    else
    {
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8004274:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8004278:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 800427c:	f8d7 2524 	ldr.w	r2, [r7, #1316]	; 0x524
 8004280:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004284:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8004288:	f5a3 63a5 	sub.w	r3, r3, #1320	; 0x528
 800428c:	6819      	ldr	r1, [r3, #0]
 800428e:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 8004292:	3328      	adds	r3, #40	; 0x28
 8004294:	009b      	lsls	r3, r3, #2
 8004296:	440b      	add	r3, r1
 8004298:	605a      	str	r2, [r3, #4]
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 800429a:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 800429e:	f5a3 728c 	sub.w	r2, r3, #280	; 0x118
 80042a2:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 80042a6:	4413      	add	r3, r2
 80042a8:	781b      	ldrb	r3, [r3, #0]
 80042aa:	3b01      	subs	r3, #1
 80042ac:	b2d9      	uxtb	r1, r3
 80042ae:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 80042b2:	f5a3 63a5 	sub.w	r3, r3, #1320	; 0x528
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 80042bc:	4413      	add	r3, r2
 80042be:	460a      	mov	r2, r1
 80042c0:	701a      	strb	r2, [r3, #0]
      k++;
 80042c2:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 80042c6:	3301      	adds	r3, #1
 80042c8:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
  while (k < lastK)
 80042cc:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 80042d0:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f8d7 2524 	ldr.w	r2, [r7, #1316]	; 0x524
 80042da:	429a      	cmp	r2, r3
 80042dc:	d38e      	bcc.n	80041fc <JPEG_ACHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 80042de:	2300      	movs	r3, #0
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	f507 67a5 	add.w	r7, r7, #1320	; 0x528
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}

080042ea <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 80042ea:	b580      	push	{r7, lr}
 80042ec:	f5ad 6da4 	sub.w	sp, sp, #1312	; 0x520
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 80042f6:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 80042fa:	6018      	str	r0, [r3, #0]
 80042fc:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8004300:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 8004304:	6019      	str	r1, [r3, #0]
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 8004306:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 800430a:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 800430e:	6818      	ldr	r0, [r3, #0]
 8004310:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 8004314:	f107 0208 	add.w	r2, r7, #8
 8004318:	f207 410c 	addw	r1, r7, #1036	; 0x40c
 800431c:	f7ff fed0 	bl	80040c0 <JPEG_Bits_To_SizeCodes>
 8004320:	4603      	mov	r3, r0
 8004322:	f887 351b 	strb.w	r3, [r7, #1307]	; 0x51b
  if (error != HAL_OK)
 8004326:	f897 351b 	ldrb.w	r3, [r7, #1307]	; 0x51b
 800432a:	2b00      	cmp	r3, #0
 800432c:	d002      	beq.n	8004334 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 800432e:	f897 351b 	ldrb.w	r3, [r7, #1307]	; 0x51b
 8004332:	e048      	b.n	80043c6 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;
 8004334:	2300      	movs	r3, #0
 8004336:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c

  while (k < lastK)
 800433a:	e03d      	b.n	80043b8 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xce>
  {
    l = DC_BitsValsTable->HuffVal[k];
 800433c:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8004340:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 800434a:	4413      	add	r3, r2
 800434c:	3310      	adds	r3, #16
 800434e:	781b      	ldrb	r3, [r3, #0]
 8004350:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 8004354:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8004358:	2b0b      	cmp	r3, #11
 800435a:	d901      	bls.n	8004360 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x76>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 800435c:	2301      	movs	r3, #1
 800435e:	e032      	b.n	80043c6 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
    }
    else
    {
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8004360:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8004364:	f5a3 63a3 	sub.w	r3, r3, #1304	; 0x518
 8004368:	f8d7 251c 	ldr.w	r2, [r7, #1308]	; 0x51c
 800436c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004370:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8004374:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 8004378:	6819      	ldr	r1, [r3, #0]
 800437a:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 800437e:	3302      	adds	r3, #2
 8004380:	009b      	lsls	r3, r3, #2
 8004382:	440b      	add	r3, r1
 8004384:	605a      	str	r2, [r3, #4]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8004386:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 800438a:	f5a3 728a 	sub.w	r2, r3, #276	; 0x114
 800438e:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 8004392:	4413      	add	r3, r2
 8004394:	781b      	ldrb	r3, [r3, #0]
 8004396:	3b01      	subs	r3, #1
 8004398:	b2d9      	uxtb	r1, r3
 800439a:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 800439e:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 80043a8:	4413      	add	r3, r2
 80043aa:	460a      	mov	r2, r1
 80043ac:	701a      	strb	r2, [r3, #0]
      k++;
 80043ae:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 80043b2:	3301      	adds	r3, #1
 80043b4:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c
  while (k < lastK)
 80043b8:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 80043bc:	f8d7 251c 	ldr.w	r2, [r7, #1308]	; 0x51c
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d3bb      	bcc.n	800433c <JPEG_DCHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 80043c4:	2300      	movs	r3, #0
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	f507 67a4 	add.w	r7, r7, #1312	; 0x520
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}

080043d0 <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b09a      	sub	sp, #104	; 0x68
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	60f8      	str	r0, [r7, #12]
 80043d8:	60b9      	str	r1, [r7, #8]
 80043da:	607a      	str	r2, [r7, #4]
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f503 63f8 	add.w	r3, r3, #1984	; 0x7c0
 80043e4:	687a      	ldr	r2, [r7, #4]
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d106      	bne.n	80043f8 <JPEG_Set_HuffDC_Mem+0x28>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f503 63f8 	add.w	r3, r3, #1984	; 0x7c0
 80043f2:	3318      	adds	r3, #24
 80043f4:	663b      	str	r3, [r7, #96]	; 0x60
 80043f6:	e00f      	b.n	8004418 <JPEG_Set_HuffDC_Mem+0x48>
  }
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f503 63fc 	add.w	r3, r3, #2016	; 0x7e0
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	429a      	cmp	r2, r3
 8004404:	d106      	bne.n	8004414 <JPEG_Set_HuffDC_Mem+0x44>
  {
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f503 63fc 	add.w	r3, r3, #2016	; 0x7e0
 800440e:	3318      	adds	r3, #24
 8004410:	663b      	str	r3, [r7, #96]	; 0x60
 8004412:	e001      	b.n	8004418 <JPEG_Set_HuffDC_Mem+0x48>
  }
  else
  {
    return HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	e059      	b.n	80044cc <JPEG_Set_HuffDC_Mem+0xfc>
  }

  if (HuffTableDC != NULL)
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d055      	beq.n	80044ca <JPEG_Set_HuffDC_Mem+0xfa>
  {
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 800441e:	f107 0314 	add.w	r3, r7, #20
 8004422:	4619      	mov	r1, r3
 8004424:	68b8      	ldr	r0, [r7, #8]
 8004426:	f7ff ff60 	bl	80042ea <JPEG_DCHuff_BitsVals_To_SizeCodes>
 800442a:	4603      	mov	r3, r0
 800442c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if (error != HAL_OK)
 8004430:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004434:	2b00      	cmp	r3, #0
 8004436:	d002      	beq.n	800443e <JPEG_Set_HuffDC_Mem+0x6e>
    {
      return  error;
 8004438:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800443c:	e046      	b.n	80044cc <JPEG_Set_HuffDC_Mem+0xfc>
    }
    addressDef = address;
 800443e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004440:	65bb      	str	r3, [r7, #88]	; 0x58
    *addressDef = 0x0FFF0FFF;
 8004442:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004444:	f06f 22f0 	mvn.w	r2, #4026593280	; 0xf000f000
 8004448:	601a      	str	r2, [r3, #0]
    addressDef++;
 800444a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800444c:	3304      	adds	r3, #4
 800444e:	65bb      	str	r3, [r7, #88]	; 0x58
    *addressDef = 0x0FFF0FFF;
 8004450:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004452:	f06f 22f0 	mvn.w	r2, #4026593280	; 0xf000f000
 8004456:	601a      	str	r2, [r3, #0]

    i = JPEG_DC_HUFF_TABLE_SIZE;
 8004458:	230c      	movs	r3, #12
 800445a:	667b      	str	r3, [r7, #100]	; 0x64
    while (i > 1UL)
 800445c:	e032      	b.n	80044c4 <JPEG_Set_HuffDC_Mem+0xf4>
    {
      i--;
 800445e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004460:	3b01      	subs	r3, #1
 8004462:	667b      	str	r3, [r7, #100]	; 0x64
      address --;
 8004464:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004466:	3b04      	subs	r3, #4
 8004468:	663b      	str	r3, [r7, #96]	; 0x60
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800446a:	f107 0214 	add.w	r2, r7, #20
 800446e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004470:	4413      	add	r3, r2
 8004472:	781b      	ldrb	r3, [r3, #0]
 8004474:	021b      	lsls	r3, r3, #8
 8004476:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800447a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800447c:	3302      	adds	r3, #2
 800447e:	009b      	lsls	r3, r3, #2
 8004480:	3368      	adds	r3, #104	; 0x68
 8004482:	443b      	add	r3, r7
 8004484:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8004488:	b2db      	uxtb	r3, r3
 800448a:	4313      	orrs	r3, r2
 800448c:	657b      	str	r3, [r7, #84]	; 0x54
                                                                                   0xFFUL);
      i--;
 800448e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004490:	3b01      	subs	r3, #1
 8004492:	667b      	str	r3, [r7, #100]	; 0x64
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8004494:	f107 0214 	add.w	r2, r7, #20
 8004498:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800449a:	4413      	add	r3, r2
 800449c:	781b      	ldrb	r3, [r3, #0]
 800449e:	021b      	lsls	r3, r3, #8
 80044a0:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80044a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80044a6:	3302      	adds	r3, #2
 80044a8:	009b      	lsls	r3, r3, #2
 80044aa:	3368      	adds	r3, #104	; 0x68
 80044ac:	443b      	add	r3, r7
 80044ae:	f853 3c50 	ldr.w	r3, [r3, #-80]
 80044b2:	b2db      	uxtb	r3, r3
 80044b4:	4313      	orrs	r3, r2
 80044b6:	653b      	str	r3, [r7, #80]	; 0x50
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 80044b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044ba:	041a      	lsls	r2, r3, #16
 80044bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044be:	431a      	orrs	r2, r3
 80044c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80044c2:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 80044c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80044c6:	2b01      	cmp	r3, #1
 80044c8:	d8c9      	bhi.n	800445e <JPEG_Set_HuffDC_Mem+0x8e>
    }
  }

  /* Return function status */
  return HAL_OK;
 80044ca:	2300      	movs	r3, #0
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	3768      	adds	r7, #104	; 0x68
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}

080044d4 <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	f5ad 7d56 	sub.w	sp, sp, #856	; 0x358
 80044da:	af00      	add	r7, sp, #0
 80044dc:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80044e0:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 80044e4:	6018      	str	r0, [r3, #0]
 80044e6:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80044ea:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 80044ee:	6019      	str	r1, [r3, #0]
 80044f0:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80044f4:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 80044f8:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 80044fa:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80044fe:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800450a:	f507 7256 	add.w	r2, r7, #856	; 0x358
 800450e:	f5a2 7255 	sub.w	r2, r2, #852	; 0x354
 8004512:	6812      	ldr	r2, [r2, #0]
 8004514:	429a      	cmp	r2, r3
 8004516:	d10c      	bne.n	8004532 <JPEG_Set_HuffAC_Mem+0x5e>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8004518:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800451c:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004528:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800452c:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 8004530:	e01d      	b.n	800456e <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 8004532:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8004536:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
 8004542:	f507 7256 	add.w	r2, r7, #856	; 0x358
 8004546:	f5a2 7255 	sub.w	r2, r2, #852	; 0x354
 800454a:	6812      	ldr	r2, [r2, #0]
 800454c:	429a      	cmp	r2, r3
 800454e:	d10c      	bne.n	800456a <JPEG_Set_HuffAC_Mem+0x96>
  {
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8004550:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8004554:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
 8004560:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8004564:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 8004568:	e001      	b.n	800456e <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else
  {
    return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e0a8      	b.n	80046c0 <JPEG_Set_HuffAC_Mem+0x1ec>
  }

  if (HuffTableAC != NULL)
 800456e:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8004572:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	2b00      	cmp	r3, #0
 800457a:	f000 80a0 	beq.w	80046be <JPEG_Set_HuffAC_Mem+0x1ea>
  {
    error = JPEG_ACHuff_BitsVals_To_SizeCodes(HuffTableAC, &acSizeCodesTable);
 800457e:	f107 0214 	add.w	r2, r7, #20
 8004582:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8004586:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 800458a:	4611      	mov	r1, r2
 800458c:	6818      	ldr	r0, [r3, #0]
 800458e:	f7ff fe0c 	bl	80041aa <JPEG_ACHuff_BitsVals_To_SizeCodes>
 8004592:	4603      	mov	r3, r0
 8004594:	f887 334b 	strb.w	r3, [r7, #843]	; 0x34b
    if (error != HAL_OK)
 8004598:	f897 334b 	ldrb.w	r3, [r7, #843]	; 0x34b
 800459c:	2b00      	cmp	r3, #0
 800459e:	d002      	beq.n	80045a6 <JPEG_Set_HuffAC_Mem+0xd2>
    {
      return  error;
 80045a0:	f897 334b 	ldrb.w	r3, [r7, #843]	; 0x34b
 80045a4:	e08c      	b.n	80046c0 <JPEG_Set_HuffAC_Mem+0x1ec>
    }
    /* Default values settings: 162:167 FFFh , 168:175 FD0h_FD7h */
    /* Locations 162:175 of each AC table contain information used internally by the core */

    addressDef = address;
 80045a6:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 80045aa:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    for (i = 0; i < 3UL; i++)
 80045ae:	2300      	movs	r3, #0
 80045b0:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 80045b4:	e00e      	b.n	80045d4 <JPEG_Set_HuffAC_Mem+0x100>
    {
      *addressDef = 0x0FFF0FFF;
 80045b6:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 80045ba:	f06f 22f0 	mvn.w	r2, #4026593280	; 0xf000f000
 80045be:	601a      	str	r2, [r3, #0]
      addressDef++;
 80045c0:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 80045c4:	3304      	adds	r3, #4
 80045c6:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    for (i = 0; i < 3UL; i++)
 80045ca:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 80045ce:	3301      	adds	r3, #1
 80045d0:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 80045d4:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 80045d8:	2b02      	cmp	r3, #2
 80045da:	d9ec      	bls.n	80045b6 <JPEG_Set_HuffAC_Mem+0xe2>
    }
    *addressDef = 0x0FD10FD0;
 80045dc:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 80045e0:	4a3a      	ldr	r2, [pc, #232]	; (80046cc <JPEG_Set_HuffAC_Mem+0x1f8>)
 80045e2:	601a      	str	r2, [r3, #0]
    addressDef++;
 80045e4:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 80045e8:	3304      	adds	r3, #4
 80045ea:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    *addressDef = 0x0FD30FD2;
 80045ee:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 80045f2:	4a37      	ldr	r2, [pc, #220]	; (80046d0 <JPEG_Set_HuffAC_Mem+0x1fc>)
 80045f4:	601a      	str	r2, [r3, #0]
    addressDef++;
 80045f6:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 80045fa:	3304      	adds	r3, #4
 80045fc:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    *addressDef = 0x0FD50FD4;
 8004600:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8004604:	4a33      	ldr	r2, [pc, #204]	; (80046d4 <JPEG_Set_HuffAC_Mem+0x200>)
 8004606:	601a      	str	r2, [r3, #0]
    addressDef++;
 8004608:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 800460c:	3304      	adds	r3, #4
 800460e:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    *addressDef = 0x0FD70FD6;
 8004612:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8004616:	4a30      	ldr	r2, [pc, #192]	; (80046d8 <JPEG_Set_HuffAC_Mem+0x204>)
 8004618:	601a      	str	r2, [r3, #0]
    /* end of Locations 162:175  */


    i = JPEG_AC_HUFF_TABLE_SIZE;
 800461a:	23a2      	movs	r3, #162	; 0xa2
 800461c:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
    while (i > 1UL)
 8004620:	e049      	b.n	80046b6 <JPEG_Set_HuffAC_Mem+0x1e2>
    {
      i--;
 8004622:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8004626:	3b01      	subs	r3, #1
 8004628:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
      address--;
 800462c:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8004630:	3b04      	subs	r3, #4
 8004632:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8004636:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800463a:	f5a3 7251 	sub.w	r2, r3, #836	; 0x344
 800463e:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8004642:	4413      	add	r3, r2
 8004644:	781b      	ldrb	r3, [r3, #0]
 8004646:	021b      	lsls	r3, r3, #8
 8004648:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800464c:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8004650:	f5a3 7151 	sub.w	r1, r3, #836	; 0x344
 8004654:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8004658:	3328      	adds	r3, #40	; 0x28
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	440b      	add	r3, r1
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	b2db      	uxtb	r3, r3
 8004662:	4313      	orrs	r3, r2
 8004664:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
                                                                                   0xFFUL);
      i--;
 8004668:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 800466c:	3b01      	subs	r3, #1
 800466e:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8004672:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8004676:	f5a3 7251 	sub.w	r2, r3, #836	; 0x344
 800467a:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 800467e:	4413      	add	r3, r2
 8004680:	781b      	ldrb	r3, [r3, #0]
 8004682:	021b      	lsls	r3, r3, #8
 8004684:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8004688:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800468c:	f5a3 7151 	sub.w	r1, r3, #836	; 0x344
 8004690:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8004694:	3328      	adds	r3, #40	; 0x28
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	440b      	add	r3, r1
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	b2db      	uxtb	r3, r3
 800469e:	4313      	orrs	r3, r2
 80046a0:	f8c7 3340 	str.w	r3, [r7, #832]	; 0x340
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 80046a4:	f8d7 3344 	ldr.w	r3, [r7, #836]	; 0x344
 80046a8:	041a      	lsls	r2, r3, #16
 80046aa:	f8d7 3340 	ldr.w	r3, [r7, #832]	; 0x340
 80046ae:	431a      	orrs	r2, r3
 80046b0:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 80046b4:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 80046b6:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d8b1      	bhi.n	8004622 <JPEG_Set_HuffAC_Mem+0x14e>
    }
  }

  /* Return function status */
  return HAL_OK;
 80046be:	2300      	movs	r3, #0
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	f507 7756 	add.w	r7, r7, #856	; 0x358
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}
 80046ca:	bf00      	nop
 80046cc:	0fd10fd0 	.word	0x0fd10fd0
 80046d0:	0fd30fd2 	.word	0x0fd30fd2
 80046d4:	0fd50fd4 	.word	0x0fd50fd4
 80046d8:	0fd70fd6 	.word	0x0fd70fd6

080046dc <JPEG_Set_HuffEnc_Mem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static HAL_StatusTypeDef JPEG_Set_HuffEnc_Mem(JPEG_HandleTypeDef *hjpeg)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b084      	sub	sp, #16
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef error;

  JPEG_Set_Huff_DHTMem(hjpeg);
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f000 f84d 	bl	8004784 <JPEG_Set_Huff_DHTMem>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC0));
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 80046f2:	461a      	mov	r2, r3
 80046f4:	491f      	ldr	r1, [pc, #124]	; (8004774 <JPEG_Set_HuffEnc_Mem+0x98>)
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f7ff feec 	bl	80044d4 <JPEG_Set_HuffAC_Mem>
 80046fc:	4603      	mov	r3, r0
 80046fe:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8004700:	7bfb      	ldrb	r3, [r7, #15]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d001      	beq.n	800470a <JPEG_Set_HuffEnc_Mem+0x2e>
  {
    return  error;
 8004706:	7bfb      	ldrb	r3, [r7, #15]
 8004708:	e030      	b.n	800476c <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC1));
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 8004712:	461a      	mov	r2, r3
 8004714:	4918      	ldr	r1, [pc, #96]	; (8004778 <JPEG_Set_HuffEnc_Mem+0x9c>)
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f7ff fedc 	bl	80044d4 <JPEG_Set_HuffAC_Mem>
 800471c:	4603      	mov	r3, r0
 800471e:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8004720:	7bfb      	ldrb	r3, [r7, #15]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d001      	beq.n	800472a <JPEG_Set_HuffEnc_Mem+0x4e>
  {
    return  error;
 8004726:	7bfb      	ldrb	r3, [r7, #15]
 8004728:	e020      	b.n	800476c <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC0);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f503 63f8 	add.w	r3, r3, #1984	; 0x7c0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 8004732:	461a      	mov	r2, r3
 8004734:	4911      	ldr	r1, [pc, #68]	; (800477c <JPEG_Set_HuffEnc_Mem+0xa0>)
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f7ff fe4a 	bl	80043d0 <JPEG_Set_HuffDC_Mem>
 800473c:	4603      	mov	r3, r0
 800473e:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8004740:	7bfb      	ldrb	r3, [r7, #15]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d001      	beq.n	800474a <JPEG_Set_HuffEnc_Mem+0x6e>
  {
    return  error;
 8004746:	7bfb      	ldrb	r3, [r7, #15]
 8004748:	e010      	b.n	800476c <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC1);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f503 63fc 	add.w	r3, r3, #2016	; 0x7e0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 8004752:	461a      	mov	r2, r3
 8004754:	490a      	ldr	r1, [pc, #40]	; (8004780 <JPEG_Set_HuffEnc_Mem+0xa4>)
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f7ff fe3a 	bl	80043d0 <JPEG_Set_HuffDC_Mem>
 800475c:	4603      	mov	r3, r0
 800475e:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8004760:	7bfb      	ldrb	r3, [r7, #15]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d001      	beq.n	800476a <JPEG_Set_HuffEnc_Mem+0x8e>
  {
    return  error;
 8004766:	7bfb      	ldrb	r3, [r7, #15]
 8004768:	e000      	b.n	800476c <JPEG_Set_HuffEnc_Mem+0x90>
  }
  /* Return function status */
  return HAL_OK;
 800476a:	2300      	movs	r3, #0
}
 800476c:	4618      	mov	r0, r3
 800476e:	3710      	adds	r7, #16
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}
 8004774:	080267b8 	.word	0x080267b8
 8004778:	0802686c 	.word	0x0802686c
 800477c:	08026780 	.word	0x08026780
 8004780:	0802679c 	.word	0x0802679c

08004784 <JPEG_Set_Huff_DHTMem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Set_Huff_DHTMem(JPEG_HandleTypeDef *hjpeg)
{
 8004784:	b480      	push	{r7}
 8004786:	b08b      	sub	sp, #44	; 0x2c
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  JPEG_ACHuffTableTypeDef *HuffTableAC0 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable;
 800478c:	4b80      	ldr	r3, [pc, #512]	; (8004990 <JPEG_Set_Huff_DHTMem+0x20c>)
 800478e:	61fb      	str	r3, [r7, #28]
  JPEG_ACHuffTableTypeDef *HuffTableAC1 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable;
 8004790:	4b80      	ldr	r3, [pc, #512]	; (8004994 <JPEG_Set_Huff_DHTMem+0x210>)
 8004792:	61bb      	str	r3, [r7, #24]
  JPEG_DCHuffTableTypeDef *HuffTableDC0 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable;
 8004794:	4b80      	ldr	r3, [pc, #512]	; (8004998 <JPEG_Set_Huff_DHTMem+0x214>)
 8004796:	617b      	str	r3, [r7, #20]
  JPEG_DCHuffTableTypeDef *HuffTableDC1 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable;
 8004798:	4b80      	ldr	r3, [pc, #512]	; (800499c <JPEG_Set_Huff_DHTMem+0x218>)
 800479a:	613b      	str	r3, [r7, #16]
  uint32_t value, index;
  __IO uint32_t *address;

  /* DC0 Huffman Table : BITS*/
  /* DC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address to DHTMEM + 3*/
  address = (hjpeg->Instance->DHTMEM + 3);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80047a4:	330c      	adds	r3, #12
 80047a6:	623b      	str	r3, [r7, #32]
  index = 16;
 80047a8:	2310      	movs	r3, #16
 80047aa:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 80047ac:	e01d      	b.n	80047ea <JPEG_Set_Huff_DHTMem+0x66>
  {

    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 80047ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b0:	3b01      	subs	r3, #1
 80047b2:	697a      	ldr	r2, [r7, #20]
 80047b4:	5cd3      	ldrb	r3, [r2, r3]
 80047b6:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 80047b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ba:	3b02      	subs	r3, #2
 80047bc:	6979      	ldr	r1, [r7, #20]
 80047be:	5ccb      	ldrb	r3, [r1, r3]
 80047c0:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 80047c2:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 80047c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c6:	3b03      	subs	r3, #3
 80047c8:	6979      	ldr	r1, [r7, #20]
 80047ca:	5ccb      	ldrb	r3, [r1, r3]
 80047cc:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 80047ce:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->Bits[index - 4UL] & 0xFFUL);
 80047d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047d2:	3a04      	subs	r2, #4
 80047d4:	6979      	ldr	r1, [r7, #20]
 80047d6:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 80047d8:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 80047da:	6a3b      	ldr	r3, [r7, #32]
 80047dc:	601a      	str	r2, [r3, #0]
    address--;
 80047de:	6a3b      	ldr	r3, [r7, #32]
 80047e0:	3b04      	subs	r3, #4
 80047e2:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 80047e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e6:	3b04      	subs	r3, #4
 80047e8:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 80047ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ec:	2b03      	cmp	r3, #3
 80047ee:	d8de      	bhi.n	80047ae <JPEG_Set_Huff_DHTMem+0x2a>

  }
  /* DC0 Huffman Table : Val*/
  /* DC0 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +4 to DHTMEM + 6 */
  address = (hjpeg->Instance->DHTMEM + 6);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80047f8:	3318      	adds	r3, #24
 80047fa:	623b      	str	r3, [r7, #32]
  index = 12;
 80047fc:	230c      	movs	r3, #12
 80047fe:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8004800:	e021      	b.n	8004846 <JPEG_Set_Huff_DHTMem+0xc2>
  {
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8004802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004804:	3b01      	subs	r3, #1
 8004806:	697a      	ldr	r2, [r7, #20]
 8004808:	4413      	add	r3, r2
 800480a:	7c1b      	ldrb	r3, [r3, #16]
 800480c:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800480e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004810:	3b02      	subs	r3, #2
 8004812:	6979      	ldr	r1, [r7, #20]
 8004814:	440b      	add	r3, r1
 8004816:	7c1b      	ldrb	r3, [r3, #16]
 8004818:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800481a:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800481c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481e:	3b03      	subs	r3, #3
 8004820:	6979      	ldr	r1, [r7, #20]
 8004822:	440b      	add	r3, r1
 8004824:	7c1b      	ldrb	r3, [r3, #16]
 8004826:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8004828:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->HuffVal[index - 4UL] & 0xFFUL);
 800482a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800482c:	3a04      	subs	r2, #4
 800482e:	6979      	ldr	r1, [r7, #20]
 8004830:	440a      	add	r2, r1
 8004832:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8004834:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8004836:	6a3b      	ldr	r3, [r7, #32]
 8004838:	601a      	str	r2, [r3, #0]
    address--;
 800483a:	6a3b      	ldr	r3, [r7, #32]
 800483c:	3b04      	subs	r3, #4
 800483e:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8004840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004842:	3b04      	subs	r3, #4
 8004844:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8004846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004848:	2b03      	cmp	r3, #3
 800484a:	d8da      	bhi.n	8004802 <JPEG_Set_Huff_DHTMem+0x7e>
  }

  /* AC0 Huffman Table : BITS*/
  /* AC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 7 to DHTMEM + 10*/
  address = (hjpeg->Instance->DHTMEM + 10UL);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8004854:	3328      	adds	r3, #40	; 0x28
 8004856:	623b      	str	r3, [r7, #32]
  index = 16;
 8004858:	2310      	movs	r3, #16
 800485a:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800485c:	e01d      	b.n	800489a <JPEG_Set_Huff_DHTMem+0x116>
  {

    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800485e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004860:	3b01      	subs	r3, #1
 8004862:	69fa      	ldr	r2, [r7, #28]
 8004864:	5cd3      	ldrb	r3, [r2, r3]
 8004866:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8004868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800486a:	3b02      	subs	r3, #2
 800486c:	69f9      	ldr	r1, [r7, #28]
 800486e:	5ccb      	ldrb	r3, [r1, r3]
 8004870:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8004872:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8004874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004876:	3b03      	subs	r3, #3
 8004878:	69f9      	ldr	r1, [r7, #28]
 800487a:	5ccb      	ldrb	r3, [r1, r3]
 800487c:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800487e:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->Bits[index - 4UL] & 0xFFUL);
 8004880:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004882:	3a04      	subs	r2, #4
 8004884:	69f9      	ldr	r1, [r7, #28]
 8004886:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8004888:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800488a:	6a3b      	ldr	r3, [r7, #32]
 800488c:	601a      	str	r2, [r3, #0]
    address--;
 800488e:	6a3b      	ldr	r3, [r7, #32]
 8004890:	3b04      	subs	r3, #4
 8004892:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8004894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004896:	3b04      	subs	r3, #4
 8004898:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800489a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489c:	2b03      	cmp	r3, #3
 800489e:	d8de      	bhi.n	800485e <JPEG_Set_Huff_DHTMem+0xda>

  }
  /* AC0 Huffman Table : Val*/
  /* AC0 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 11 to DHTMEM + 51 */
  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 51) belong to AC0 VALS table */
  address = (hjpeg->Instance->DHTMEM + 51);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80048a8:	33cc      	adds	r3, #204	; 0xcc
 80048aa:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 80048ac:	6a3b      	ldr	r3, [r7, #32]
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	4b3b      	ldr	r3, [pc, #236]	; (80049a0 <JPEG_Set_Huff_DHTMem+0x21c>)
 80048b2:	4013      	ands	r3, r2
 80048b4:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 80048b6:	69fb      	ldr	r3, [r7, #28]
 80048b8:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80048bc:	021a      	lsls	r2, r3, #8
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	4313      	orrs	r3, r2
 80048c2:	69fa      	ldr	r2, [r7, #28]
 80048c4:	f892 20b0 	ldrb.w	r2, [r2, #176]	; 0xb0
 80048c8:	4313      	orrs	r3, r2
 80048ca:	60fb      	str	r3, [r7, #12]
  *address = value;
 80048cc:	6a3b      	ldr	r3, [r7, #32]
 80048ce:	68fa      	ldr	r2, [r7, #12]
 80048d0:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC0 huffman values */
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 80048d2:	6a3b      	ldr	r3, [r7, #32]
 80048d4:	3b04      	subs	r3, #4
 80048d6:	623b      	str	r3, [r7, #32]
  index = 160;
 80048d8:	23a0      	movs	r3, #160	; 0xa0
 80048da:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 80048dc:	e021      	b.n	8004922 <JPEG_Set_Huff_DHTMem+0x19e>
  {
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 80048de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e0:	3b01      	subs	r3, #1
 80048e2:	69fa      	ldr	r2, [r7, #28]
 80048e4:	4413      	add	r3, r2
 80048e6:	7c1b      	ldrb	r3, [r3, #16]
 80048e8:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 80048ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ec:	3b02      	subs	r3, #2
 80048ee:	69f9      	ldr	r1, [r7, #28]
 80048f0:	440b      	add	r3, r1
 80048f2:	7c1b      	ldrb	r3, [r3, #16]
 80048f4:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 80048f6:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 80048f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fa:	3b03      	subs	r3, #3
 80048fc:	69f9      	ldr	r1, [r7, #28]
 80048fe:	440b      	add	r3, r1
 8004900:	7c1b      	ldrb	r3, [r3, #16]
 8004902:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8004904:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 8004906:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004908:	3a04      	subs	r2, #4
 800490a:	69f9      	ldr	r1, [r7, #28]
 800490c:	440a      	add	r2, r1
 800490e:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8004910:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8004912:	6a3b      	ldr	r3, [r7, #32]
 8004914:	601a      	str	r2, [r3, #0]
    address--;
 8004916:	6a3b      	ldr	r3, [r7, #32]
 8004918:	3b04      	subs	r3, #4
 800491a:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800491c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491e:	3b04      	subs	r3, #4
 8004920:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8004922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004924:	2b03      	cmp	r3, #3
 8004926:	d8da      	bhi.n	80048de <JPEG_Set_Huff_DHTMem+0x15a>
  }

  /* DC1 Huffman Table : BITS*/
  /* DC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM + 51 base address to DHTMEM + 55*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 51) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 51);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8004930:	33cc      	adds	r3, #204	; 0xcc
 8004932:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 8004934:	6a3b      	ldr	r3, [r7, #32]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	b29b      	uxth	r3, r3
 800493a:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	785b      	ldrb	r3, [r3, #1]
 8004940:	061a      	lsls	r2, r3, #24
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	431a      	orrs	r2, r3
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	781b      	ldrb	r3, [r3, #0]
 800494a:	041b      	lsls	r3, r3, #16
 800494c:	4313      	orrs	r3, r2
 800494e:	60fb      	str	r3, [r7, #12]
  *address = value;
 8004950:	6a3b      	ldr	r3, [r7, #32]
 8004952:	68fa      	ldr	r2, [r7, #12]
 8004954:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 55) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 55);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800495e:	33dc      	adds	r3, #220	; 0xdc
 8004960:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 8004962:	6a3b      	ldr	r3, [r7, #32]
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	4b0e      	ldr	r3, [pc, #56]	; (80049a0 <JPEG_Set_Huff_DHTMem+0x21c>)
 8004968:	4013      	ands	r3, r2
 800496a:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->Bits[14] & 0xFFUL);
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	7bdb      	ldrb	r3, [r3, #15]
 8004970:	021a      	lsls	r2, r3, #8
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	4313      	orrs	r3, r2
 8004976:	693a      	ldr	r2, [r7, #16]
 8004978:	7b92      	ldrb	r2, [r2, #14]
 800497a:	4313      	orrs	r3, r2
 800497c:	60fb      	str	r3, [r7, #12]
  *address = value;
 800497e:	6a3b      	ldr	r3, [r7, #32]
 8004980:	68fa      	ldr	r2, [r7, #12]
 8004982:	601a      	str	r2, [r3, #0]

  /*continue setting 12 DC1 huffman Bits from DHTMEM + 54 down to DHTMEM + 52*/
  address--;
 8004984:	6a3b      	ldr	r3, [r7, #32]
 8004986:	3b04      	subs	r3, #4
 8004988:	623b      	str	r3, [r7, #32]
  index = 12;
 800498a:	230c      	movs	r3, #12
 800498c:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800498e:	e027      	b.n	80049e0 <JPEG_Set_Huff_DHTMem+0x25c>
 8004990:	080267b8 	.word	0x080267b8
 8004994:	0802686c 	.word	0x0802686c
 8004998:	08026780 	.word	0x08026780
 800499c:	0802679c 	.word	0x0802679c
 80049a0:	ffff0000 	.word	0xffff0000
  {

    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 80049a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a6:	3301      	adds	r3, #1
 80049a8:	693a      	ldr	r2, [r7, #16]
 80049aa:	5cd3      	ldrb	r3, [r2, r3]
 80049ac:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 80049ae:	6939      	ldr	r1, [r7, #16]
 80049b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b2:	440b      	add	r3, r1
 80049b4:	781b      	ldrb	r3, [r3, #0]
 80049b6:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 80049b8:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 80049ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049bc:	3b01      	subs	r3, #1
 80049be:	6939      	ldr	r1, [r7, #16]
 80049c0:	5ccb      	ldrb	r3, [r1, r3]
 80049c2:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 80049c4:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->Bits[index - 2UL] & 0xFFUL);
 80049c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049c8:	3a02      	subs	r2, #2
 80049ca:	6939      	ldr	r1, [r7, #16]
 80049cc:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 80049ce:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 80049d0:	6a3b      	ldr	r3, [r7, #32]
 80049d2:	601a      	str	r2, [r3, #0]
    address--;
 80049d4:	6a3b      	ldr	r3, [r7, #32]
 80049d6:	3b04      	subs	r3, #4
 80049d8:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 80049da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049dc:	3b04      	subs	r3, #4
 80049de:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 80049e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e2:	2b03      	cmp	r3, #3
 80049e4:	d8de      	bhi.n	80049a4 <JPEG_Set_Huff_DHTMem+0x220>

  }
  /* DC1 Huffman Table : Val*/
  /* DC1 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +55 to DHTMEM + 58 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 55) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 55);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80049ee:	33dc      	adds	r3, #220	; 0xdc
 80049f0:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 80049f2:	6a3b      	ldr	r3, [r7, #32]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	b29b      	uxth	r3, r3
 80049f8:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	7c5b      	ldrb	r3, [r3, #17]
 80049fe:	061a      	lsls	r2, r3, #24
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	431a      	orrs	r2, r3
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	7c1b      	ldrb	r3, [r3, #16]
 8004a08:	041b      	lsls	r3, r3, #16
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 8004a0e:	6a3b      	ldr	r3, [r7, #32]
 8004a10:	68fa      	ldr	r2, [r7, #12]
 8004a12:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 58) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 58);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8004a1c:	33e8      	adds	r3, #232	; 0xe8
 8004a1e:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000UL;
 8004a20:	6a3b      	ldr	r3, [r7, #32]
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	4b6d      	ldr	r3, [pc, #436]	; (8004bdc <JPEG_Set_Huff_DHTMem+0x458>)
 8004a26:	4013      	ands	r3, r2
 8004a28:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	7edb      	ldrb	r3, [r3, #27]
 8004a2e:	021a      	lsls	r2, r3, #8
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	4313      	orrs	r3, r2
 8004a34:	693a      	ldr	r2, [r7, #16]
 8004a36:	7e92      	ldrb	r2, [r2, #26]
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	60fb      	str	r3, [r7, #12]
  *address = value;
 8004a3c:	6a3b      	ldr	r3, [r7, #32]
 8004a3e:	68fa      	ldr	r2, [r7, #12]
 8004a40:	601a      	str	r2, [r3, #0]

  /*continue setting 8 DC1 huffman val from DHTMEM + 57 down to DHTMEM + 56*/
  address--;
 8004a42:	6a3b      	ldr	r3, [r7, #32]
 8004a44:	3b04      	subs	r3, #4
 8004a46:	623b      	str	r3, [r7, #32]
  index = 8;
 8004a48:	2308      	movs	r3, #8
 8004a4a:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8004a4c:	e021      	b.n	8004a92 <JPEG_Set_Huff_DHTMem+0x30e>
  {
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8004a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a50:	3301      	adds	r3, #1
 8004a52:	693a      	ldr	r2, [r7, #16]
 8004a54:	4413      	add	r3, r2
 8004a56:	7c1b      	ldrb	r3, [r3, #16]
 8004a58:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 8004a5a:	6939      	ldr	r1, [r7, #16]
 8004a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5e:	440b      	add	r3, r1
 8004a60:	3310      	adds	r3, #16
 8004a62:	781b      	ldrb	r3, [r3, #0]
 8004a64:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8004a66:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8004a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6a:	3b01      	subs	r3, #1
 8004a6c:	6939      	ldr	r1, [r7, #16]
 8004a6e:	440b      	add	r3, r1
 8004a70:	7c1b      	ldrb	r3, [r3, #16]
 8004a72:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 8004a74:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->HuffVal[index - 2UL] & 0xFFUL);
 8004a76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a78:	3a02      	subs	r2, #2
 8004a7a:	6939      	ldr	r1, [r7, #16]
 8004a7c:	440a      	add	r2, r1
 8004a7e:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8004a80:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8004a82:	6a3b      	ldr	r3, [r7, #32]
 8004a84:	601a      	str	r2, [r3, #0]
    address--;
 8004a86:	6a3b      	ldr	r3, [r7, #32]
 8004a88:	3b04      	subs	r3, #4
 8004a8a:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8004a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a8e:	3b04      	subs	r3, #4
 8004a90:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8004a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a94:	2b03      	cmp	r3, #3
 8004a96:	d8da      	bhi.n	8004a4e <JPEG_Set_Huff_DHTMem+0x2ca>
  }

  /* AC1 Huffman Table : BITS*/
  /* AC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 58 to DHTMEM + 62*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 58) belong to AC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 58);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8004aa0:	33e8      	adds	r3, #232	; 0xe8
 8004aa2:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 8004aa4:	6a3b      	ldr	r3, [r7, #32]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	b29b      	uxth	r3, r3
 8004aaa:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 8004aac:	69bb      	ldr	r3, [r7, #24]
 8004aae:	785b      	ldrb	r3, [r3, #1]
 8004ab0:	061a      	lsls	r2, r3, #24
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	431a      	orrs	r2, r3
 8004ab6:	69bb      	ldr	r3, [r7, #24]
 8004ab8:	781b      	ldrb	r3, [r3, #0]
 8004aba:	041b      	lsls	r3, r3, #16
 8004abc:	4313      	orrs	r3, r2
 8004abe:	60fb      	str	r3, [r7, #12]
  *address = value;
 8004ac0:	6a3b      	ldr	r3, [r7, #32]
 8004ac2:	68fa      	ldr	r2, [r7, #12]
 8004ac4:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 62) belong to Bits Val table */
  address = (hjpeg->Instance->DHTMEM + 62);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8004ace:	33f8      	adds	r3, #248	; 0xf8
 8004ad0:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 8004ad2:	6a3b      	ldr	r3, [r7, #32]
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	4b41      	ldr	r3, [pc, #260]	; (8004bdc <JPEG_Set_Huff_DHTMem+0x458>)
 8004ad8:	4013      	ands	r3, r2
 8004ada:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 8004adc:	69bb      	ldr	r3, [r7, #24]
 8004ade:	7bdb      	ldrb	r3, [r3, #15]
 8004ae0:	021a      	lsls	r2, r3, #8
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	69ba      	ldr	r2, [r7, #24]
 8004ae8:	7b92      	ldrb	r2, [r2, #14]
 8004aea:	4313      	orrs	r3, r2
 8004aec:	60fb      	str	r3, [r7, #12]
  *address = value;
 8004aee:	6a3b      	ldr	r3, [r7, #32]
 8004af0:	68fa      	ldr	r2, [r7, #12]
 8004af2:	601a      	str	r2, [r3, #0]

  /*continue setting 12 AC1 huffman Bits from DHTMEM + 61 down to DHTMEM + 59*/
  address--;
 8004af4:	6a3b      	ldr	r3, [r7, #32]
 8004af6:	3b04      	subs	r3, #4
 8004af8:	623b      	str	r3, [r7, #32]
  index = 12;
 8004afa:	230c      	movs	r3, #12
 8004afc:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8004afe:	e01d      	b.n	8004b3c <JPEG_Set_Huff_DHTMem+0x3b8>
  {

    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8004b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b02:	3301      	adds	r3, #1
 8004b04:	69ba      	ldr	r2, [r7, #24]
 8004b06:	5cd3      	ldrb	r3, [r2, r3]
 8004b08:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 8004b0a:	69b9      	ldr	r1, [r7, #24]
 8004b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0e:	440b      	add	r3, r1
 8004b10:	781b      	ldrb	r3, [r3, #0]
 8004b12:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8004b14:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8004b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b18:	3b01      	subs	r3, #1
 8004b1a:	69b9      	ldr	r1, [r7, #24]
 8004b1c:	5ccb      	ldrb	r3, [r1, r3]
 8004b1e:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 8004b20:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->Bits[index - 2UL] & 0xFFUL);
 8004b22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b24:	3a02      	subs	r2, #2
 8004b26:	69b9      	ldr	r1, [r7, #24]
 8004b28:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8004b2a:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8004b2c:	6a3b      	ldr	r3, [r7, #32]
 8004b2e:	601a      	str	r2, [r3, #0]
    address--;
 8004b30:	6a3b      	ldr	r3, [r7, #32]
 8004b32:	3b04      	subs	r3, #4
 8004b34:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8004b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b38:	3b04      	subs	r3, #4
 8004b3a:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8004b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3e:	2b03      	cmp	r3, #3
 8004b40:	d8de      	bhi.n	8004b00 <JPEG_Set_Huff_DHTMem+0x37c>

  }
  /* AC1 Huffman Table : Val*/
  /* AC1 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 62 to DHTMEM + 102 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 62) belong to AC1 VALS table */
  address = (hjpeg->Instance->DHTMEM + 62);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8004b4a:	33f8      	adds	r3, #248	; 0xf8
 8004b4c:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 8004b4e:	6a3b      	ldr	r3, [r7, #32]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	b29b      	uxth	r3, r3
 8004b54:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 8004b56:	69bb      	ldr	r3, [r7, #24]
 8004b58:	7c5b      	ldrb	r3, [r3, #17]
 8004b5a:	061a      	lsls	r2, r3, #24
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	431a      	orrs	r2, r3
 8004b60:	69bb      	ldr	r3, [r7, #24]
 8004b62:	7c1b      	ldrb	r3, [r3, #16]
 8004b64:	041b      	lsls	r3, r3, #16
 8004b66:	4313      	orrs	r3, r2
 8004b68:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 8004b6a:	6a3b      	ldr	r3, [r7, #32]
 8004b6c:	68fa      	ldr	r2, [r7, #12]
 8004b6e:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC1 huffman values from DHTMEM + 63 to DHTMEM+102 */
  address = (hjpeg->Instance->DHTMEM + 102);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8004b78:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 8004b7c:	623b      	str	r3, [r7, #32]
  index = 160;
 8004b7e:	23a0      	movs	r3, #160	; 0xa0
 8004b80:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8004b82:	e021      	b.n	8004bc8 <JPEG_Set_Huff_DHTMem+0x444>
  {
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8004b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b86:	3301      	adds	r3, #1
 8004b88:	69ba      	ldr	r2, [r7, #24]
 8004b8a:	4413      	add	r3, r2
 8004b8c:	7c1b      	ldrb	r3, [r3, #16]
 8004b8e:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 8004b90:	69b9      	ldr	r1, [r7, #24]
 8004b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b94:	440b      	add	r3, r1
 8004b96:	3310      	adds	r3, #16
 8004b98:	781b      	ldrb	r3, [r3, #0]
 8004b9a:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8004b9c:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8004b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba0:	3b01      	subs	r3, #1
 8004ba2:	69b9      	ldr	r1, [r7, #24]
 8004ba4:	440b      	add	r3, r1
 8004ba6:	7c1b      	ldrb	r3, [r3, #16]
 8004ba8:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 8004baa:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 8004bac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bae:	3a02      	subs	r2, #2
 8004bb0:	69b9      	ldr	r1, [r7, #24]
 8004bb2:	440a      	add	r2, r1
 8004bb4:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8004bb6:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8004bb8:	6a3b      	ldr	r3, [r7, #32]
 8004bba:	601a      	str	r2, [r3, #0]
    address--;
 8004bbc:	6a3b      	ldr	r3, [r7, #32]
 8004bbe:	3b04      	subs	r3, #4
 8004bc0:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8004bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc4:	3b04      	subs	r3, #4
 8004bc6:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8004bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bca:	2b03      	cmp	r3, #3
 8004bcc:	d8da      	bhi.n	8004b84 <JPEG_Set_Huff_DHTMem+0x400>
  }

}
 8004bce:	bf00      	nop
 8004bd0:	bf00      	nop
 8004bd2:	372c      	adds	r7, #44	; 0x2c
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr
 8004bdc:	ffff0000 	.word	0xffff0000

08004be0 <JPEG_Init_Process>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Init_Process(JPEG_HandleTypeDef *hjpeg)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b083      	sub	sp, #12
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  /*Reset pause*/
  hjpeg->Context &= (~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT));
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bec:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	655a      	str	r2, [r3, #84]	; 0x54

  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bf8:	f003 0303 	and.w	r3, r3, #3
 8004bfc:	2b02      	cmp	r3, #2
 8004bfe:	d108      	bne.n	8004c12 <JPEG_Init_Process+0x32>
  {
    /*Set JPEG Codec to Decoding mode */
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	685a      	ldr	r2, [r3, #4]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f042 0208 	orr.w	r2, r2, #8
 8004c0e:	605a      	str	r2, [r3, #4]
 8004c10:	e007      	b.n	8004c22 <JPEG_Init_Process+0x42>
  }
  else /* JPEG_CONTEXT_ENCODE */
  {
    /*Set JPEG Codec to Encoding mode */
    hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_DE;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	685a      	ldr	r2, [r3, #4]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f022 0208 	bic.w	r2, r2, #8
 8004c20:	605a      	str	r2, [r3, #4]
  }

  /*Stop JPEG processing */
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f022 0201 	bic.w	r2, r2, #1
 8004c30:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 8004c40:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable All DMA requests */
  JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_MASK);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
 8004c50:	631a      	str	r2, [r3, #48]	; 0x30
  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c60:	631a      	str	r2, [r3, #48]	; 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c70:	631a      	str	r2, [r3, #48]	; 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8004c80:	639a      	str	r2, [r3, #56]	; 0x38

  /*Start Encoding/Decoding*/
  hjpeg->Instance->CONFR0 |=  JPEG_CONFR0_START;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f042 0201 	orr.w	r2, r2, #1
 8004c90:	601a      	str	r2, [r3, #0]

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c96:	f003 030c 	and.w	r3, r3, #12
 8004c9a:	2b08      	cmp	r3, #8
 8004c9c:	d108      	bne.n	8004cb0 <JPEG_Init_Process+0xd0>
  {
    /*Enable IN/OUT, end of Conversation, and end of header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f042 026e 	orr.w	r2, r2, #110	; 0x6e
 8004cac:	631a      	str	r2, [r3, #48]	; 0x30
  }
  else
  {
    /* Nothing to do */
  }
}
 8004cae:	e00d      	b.n	8004ccc <JPEG_Init_Process+0xec>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cb4:	f003 030c 	and.w	r3, r3, #12
 8004cb8:	2b0c      	cmp	r3, #12
 8004cba:	d107      	bne.n	8004ccc <JPEG_Init_Process+0xec>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8004cca:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004ccc:	bf00      	nop
 8004cce:	370c      	adds	r7, #12
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr

08004cd8 <JPEG_Process>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if the process has ends else JPEG_PROCESS_ONGOING
  */
static uint32_t JPEG_Process(JPEG_HandleTypeDef *hjpeg)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b084      	sub	sp, #16
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;

  /*End of header processing flag */
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ce4:	f003 0303 	and.w	r3, r3, #3
 8004ce8:	2b02      	cmp	r3, #2
 8004cea:	d125      	bne.n	8004d38 <JPEG_Process+0x60>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d01e      	beq.n	8004d38 <JPEG_Process+0x60>
    {
      /*Call Header parsing complete callback */
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	3304      	adds	r3, #4
 8004cfe:	4619      	mov	r1, r3
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f7fe ff69 	bl	8003bd8 <HAL_JPEG_GetInfo>
      /* Reset the ImageQuality */
      hjpeg->Conf.ImageQuality = 0;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	615a      	str	r2, [r3, #20]

      /*Call Info Ready callback */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->InfoReadyCallback(hjpeg, &hjpeg->Conf);
#else
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	3304      	adds	r3, #4
 8004d10:	4619      	mov	r1, r3
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f009 ffe4 	bl	800ece0 <HAL_JPEG_InfoReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d26:	631a      	str	r2, [r3, #48]	; 0x30

      /* Clear header processing done flag */
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d36:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  /*Input FIFO status handling*/
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d116      	bne.n	8004d72 <JPEG_Process+0x9a>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFTF) != 0UL)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d4a:	f003 0302 	and.w	r3, r3, #2
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d004      	beq.n	8004d5c <JPEG_Process+0x84>
    {
      /*Input FIFO threshold flag */
      /*JPEG_FIFO_TH_SIZE words can be written in */
      JPEG_ReadInputData(hjpeg, JPEG_FIFO_TH_SIZE);
 8004d52:	2104      	movs	r1, #4
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	f000 f988 	bl	800506a <JPEG_ReadInputData>
 8004d5a:	e00a      	b.n	8004d72 <JPEG_Process+0x9a>
    }
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFNFF) != 0UL)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d62:	f003 0304 	and.w	r3, r3, #4
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d003      	beq.n	8004d72 <JPEG_Process+0x9a>
    {
      /*Input FIFO Not Full flag */
      /*32-bit value can be written in */
      JPEG_ReadInputData(hjpeg, 1);
 8004d6a:	2101      	movs	r1, #1
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f000 f97c 	bl	800506a <JPEG_ReadInputData>
    }
  }


  /*Output FIFO flag handling*/
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d116      	bne.n	8004dac <JPEG_Process+0xd4>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFTF) != 0UL)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d84:	f003 0308 	and.w	r3, r3, #8
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d004      	beq.n	8004d96 <JPEG_Process+0xbe>
    {
      /*Output FIFO threshold flag */
      /*JPEG_FIFO_TH_SIZE words can be read out */
      JPEG_StoreOutputData(hjpeg, JPEG_FIFO_TH_SIZE);
 8004d8c:	2104      	movs	r1, #4
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f000 f864 	bl	8004e5c <JPEG_StoreOutputData>
 8004d94:	e00a      	b.n	8004dac <JPEG_Process+0xd4>
    }
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d9c:	f003 0310 	and.w	r3, r3, #16
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d003      	beq.n	8004dac <JPEG_Process+0xd4>
    {
      /*Output FIFO Not Empty flag */
      /*32-bit value can be read out */
      JPEG_StoreOutputData(hjpeg, 1);
 8004da4:	2101      	movs	r1, #1
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f000 f858 	bl	8004e5c <JPEG_StoreOutputData>
      /* Nothing to do */
    }
  }

  /*End of Conversion handling :i.e EOC flag is high and OFTF low and OFNEF low*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004db2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004db6:	2b20      	cmp	r3, #32
 8004db8:	d14b      	bne.n	8004e52 <JPEG_Process+0x17a>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f022 0201 	bic.w	r2, r2, #1
 8004dc8:	601a      	str	r2, [r3, #0]

    if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dce:	f003 030c 	and.w	r3, r3, #12
 8004dd2:	2b08      	cmp	r3, #8
 8004dd4:	d107      	bne.n	8004de6 <JPEG_Process+0x10e>
    {
      /* Disable All Interrupts */
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 8004de4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Clear all flags */
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8004df4:	639a      	str	r2, [r3, #56]	; 0x38

    /*Call End of conversion callback */
    if (hjpeg->JpegOutCount > 0UL)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d00a      	beq.n	8004e14 <JPEG_Process+0x13c>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	69d9      	ldr	r1, [r3, #28]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e06:	461a      	mov	r2, r3
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f00a f839 	bl	800ee80 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2200      	movs	r2, #0
 8004e12:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /*Reset Context Operation*/
    tmpContext = hjpeg->Context;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e18:	60fb      	str	r3, [r7, #12]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e1e:	f403 4282 	and.w	r2, r3, #16640	; 0x4100
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2201      	movs	r2, #1
 8004e32:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	f003 0303 	and.w	r3, r3, #3
 8004e3c:	2b02      	cmp	r3, #2
 8004e3e:	d103      	bne.n	8004e48 <JPEG_Process+0x170>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f00a f885 	bl	800ef50 <HAL_JPEG_DecodeCpltCallback>
 8004e46:	e002      	b.n	8004e4e <JPEG_Process+0x176>
    else /* JPEG_CONTEXT_ENCODE */
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->EncodeCpltCallback(hjpeg);
#else
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8004e48:	6878      	ldr	r0, [r7, #4]
 8004e4a:	f7ff f909 	bl	8004060 <HAL_JPEG_EncodeCpltCallback>
#endif
    }

    return JPEG_PROCESS_DONE;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e000      	b.n	8004e54 <JPEG_Process+0x17c>
  }


  return JPEG_PROCESS_ONGOING;
 8004e52:	2300      	movs	r3, #0
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	3710      	adds	r7, #16
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}

08004e5c <JPEG_StoreOutputData>:
  *         the configuration information for JPEG module
  * @param  nbOutputWords Number of output words (of 32 bits) ready from the JPEG peripheral
  * @retval None
  */
static void JPEG_StoreOutputData(JPEG_HandleTypeDef *hjpeg, uint32_t nbOutputWords)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b086      	sub	sp, #24
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
 8004e64:	6039      	str	r1, [r7, #0]
  uint32_t index;
  uint32_t nb_words;
  uint32_t nb_bytes;
  uint32_t dataword;

  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	009b      	lsls	r3, r3, #2
 8004e72:	440b      	add	r3, r1
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d34b      	bcc.n	8004f10 <JPEG_StoreOutputData+0xb4>
  {
    for (index = 0; index < nbOutputWords; index++)
 8004e78:	2300      	movs	r3, #0
 8004e7a:	617b      	str	r3, [r7, #20]
 8004e7c:	e031      	b.n	8004ee2 <JPEG_StoreOutputData+0x86>
    {
      /*Transfer 32 bits from the JPEG output FIFO*/
      dataword = hjpeg->Instance->DOR;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e84:	60bb      	str	r3, [r7, #8]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	69da      	ldr	r2, [r3, #28]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e8e:	4413      	add	r3, r2
 8004e90:	68ba      	ldr	r2, [r7, #8]
 8004e92:	b2d2      	uxtb	r2, r2
 8004e94:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	0a19      	lsrs	r1, r3, #8
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	69da      	ldr	r2, [r3, #28]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea2:	3301      	adds	r3, #1
 8004ea4:	4413      	add	r3, r2
 8004ea6:	b2ca      	uxtb	r2, r1
 8004ea8:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	0c19      	lsrs	r1, r3, #16
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	69da      	ldr	r2, [r3, #28]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb6:	3302      	adds	r3, #2
 8004eb8:	4413      	add	r3, r2
 8004eba:	b2ca      	uxtb	r2, r1
 8004ebc:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	0e19      	lsrs	r1, r3, #24
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	69da      	ldr	r2, [r3, #28]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eca:	3303      	adds	r3, #3
 8004ecc:	4413      	add	r3, r2
 8004ece:	b2ca      	uxtb	r2, r1
 8004ed0:	701a      	strb	r2, [r3, #0]
      hjpeg->JpegOutCount += 4UL;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed6:	1d1a      	adds	r2, r3, #4
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	625a      	str	r2, [r3, #36]	; 0x24
    for (index = 0; index < nbOutputWords; index++)
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	3301      	adds	r3, #1
 8004ee0:	617b      	str	r3, [r7, #20]
 8004ee2:	697a      	ldr	r2, [r7, #20]
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	d3c9      	bcc.n	8004e7e <JPEG_StoreOutputData+0x22>
    }
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	f040 80b5 	bne.w	8005062 <JPEG_StoreOutputData+0x206>
    {
      /*Output Buffer is full, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	69d9      	ldr	r1, [r3, #28]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f00:	461a      	mov	r2, r3
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f009 ffbc 	bl	800ee80 <HAL_JPEG_DataReadyCallback>
#endif /*USE_HAL_JPEG_REGISTER_CALLBACKS*/
      hjpeg->JpegOutCount = 0;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	625a      	str	r2, [r3, #36]	; 0x24
  }
  else
  {
    /* Nothing to do */
  }
}
 8004f0e:	e0a8      	b.n	8005062 <JPEG_StoreOutputData+0x206>
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	f240 80a2 	bls.w	8005062 <JPEG_StoreOutputData+0x206>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f26:	1ad3      	subs	r3, r2, r3
 8004f28:	089b      	lsrs	r3, r3, #2
 8004f2a:	613b      	str	r3, [r7, #16]
    for (index = 0; index < nb_words; index++)
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	617b      	str	r3, [r7, #20]
 8004f30:	e031      	b.n	8004f96 <JPEG_StoreOutputData+0x13a>
      dataword = hjpeg->Instance->DOR;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f38:	60bb      	str	r3, [r7, #8]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	69da      	ldr	r2, [r3, #28]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f42:	4413      	add	r3, r2
 8004f44:	68ba      	ldr	r2, [r7, #8]
 8004f46:	b2d2      	uxtb	r2, r2
 8004f48:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	0a19      	lsrs	r1, r3, #8
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	69da      	ldr	r2, [r3, #28]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f56:	3301      	adds	r3, #1
 8004f58:	4413      	add	r3, r2
 8004f5a:	b2ca      	uxtb	r2, r1
 8004f5c:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	0c19      	lsrs	r1, r3, #16
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	69da      	ldr	r2, [r3, #28]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f6a:	3302      	adds	r3, #2
 8004f6c:	4413      	add	r3, r2
 8004f6e:	b2ca      	uxtb	r2, r1
 8004f70:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	0e19      	lsrs	r1, r3, #24
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	69da      	ldr	r2, [r3, #28]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f7e:	3303      	adds	r3, #3
 8004f80:	4413      	add	r3, r2
 8004f82:	b2ca      	uxtb	r2, r1
 8004f84:	701a      	strb	r2, [r3, #0]
      hjpeg->JpegOutCount += 4UL;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f8a:	1d1a      	adds	r2, r3, #4
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	625a      	str	r2, [r3, #36]	; 0x24
    for (index = 0; index < nb_words; index++)
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	3301      	adds	r3, #1
 8004f94:	617b      	str	r3, [r7, #20]
 8004f96:	697a      	ldr	r2, [r7, #20]
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	d3c9      	bcc.n	8004f32 <JPEG_StoreOutputData+0xd6>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	d10b      	bne.n	8004fc2 <JPEG_StoreOutputData+0x166>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	69d9      	ldr	r1, [r3, #28]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb2:	461a      	mov	r2, r3
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	f009 ff63 	bl	800ee80 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004fc0:	e04f      	b.n	8005062 <JPEG_StoreOutputData+0x206>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fca:	1ad3      	subs	r3, r2, r3
 8004fcc:	60fb      	str	r3, [r7, #12]
      dataword = hjpeg->Instance->DOR;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fd4:	60bb      	str	r3, [r7, #8]
      for (index = 0; index < nb_bytes; index++)
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	617b      	str	r3, [r7, #20]
 8004fda:	e015      	b.n	8005008 <JPEG_StoreOutputData+0x1ac>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	f003 0303 	and.w	r3, r3, #3
 8004fe2:	00db      	lsls	r3, r3, #3
 8004fe4:	68ba      	ldr	r2, [r7, #8]
 8004fe6:	fa22 f103 	lsr.w	r1, r2, r3
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	69da      	ldr	r2, [r3, #28]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff2:	4413      	add	r3, r2
 8004ff4:	b2ca      	uxtb	r2, r1
 8004ff6:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount++;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ffc:	1c5a      	adds	r2, r3, #1
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	625a      	str	r2, [r3, #36]	; 0x24
      for (index = 0; index < nb_bytes; index++)
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	3301      	adds	r3, #1
 8005006:	617b      	str	r3, [r7, #20]
 8005008:	697a      	ldr	r2, [r7, #20]
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	429a      	cmp	r2, r3
 800500e:	d3e5      	bcc.n	8004fdc <JPEG_StoreOutputData+0x180>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	69d9      	ldr	r1, [r3, #28]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005018:	461a      	mov	r2, r3
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f009 ff30 	bl	800ee80 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2200      	movs	r2, #0
 8005024:	625a      	str	r2, [r3, #36]	; 0x24
      nb_bytes = 4UL - nb_bytes;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	f1c3 0304 	rsb	r3, r3, #4
 800502c:	60fb      	str	r3, [r7, #12]
      for (index = nb_bytes; index < 4UL; index++)
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	617b      	str	r3, [r7, #20]
 8005032:	e013      	b.n	800505c <JPEG_StoreOutputData+0x200>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	00db      	lsls	r3, r3, #3
 8005038:	68ba      	ldr	r2, [r7, #8]
 800503a:	fa22 f103 	lsr.w	r1, r2, r3
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	69da      	ldr	r2, [r3, #28]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005046:	4413      	add	r3, r2
 8005048:	b2ca      	uxtb	r2, r1
 800504a:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount++;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005050:	1c5a      	adds	r2, r3, #1
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	625a      	str	r2, [r3, #36]	; 0x24
      for (index = nb_bytes; index < 4UL; index++)
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	3301      	adds	r3, #1
 800505a:	617b      	str	r3, [r7, #20]
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	2b03      	cmp	r3, #3
 8005060:	d9e8      	bls.n	8005034 <JPEG_StoreOutputData+0x1d8>
}
 8005062:	bf00      	nop
 8005064:	3718      	adds	r7, #24
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}

0800506a <JPEG_ReadInputData>:
  *         the configuration information for JPEG module
  * @param  nbRequestWords Number of input words (of 32 bits) that the JPE peripheral request
  * @retval None
  */
static void JPEG_ReadInputData(JPEG_HandleTypeDef *hjpeg, uint32_t nbRequestWords)
{
 800506a:	b580      	push	{r7, lr}
 800506c:	b088      	sub	sp, #32
 800506e:	af00      	add	r7, sp, #0
 8005070:	6078      	str	r0, [r7, #4]
 8005072:	6039      	str	r1, [r7, #0]
  uint32_t nb_bytes = 0;
 8005074:	2300      	movs	r3, #0
 8005076:	61fb      	str	r3, [r7, #28]
  uint32_t nb_words;
  uint32_t index;
  uint32_t dataword;
  uint32_t input_count;

  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800507c:	2b00      	cmp	r3, #0
 800507e:	d002      	beq.n	8005086 <JPEG_ReadInputData+0x1c>
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d104      	bne.n	8005090 <JPEG_ReadInputData+0x26>
  {
    /* No more Input data : nothing to do*/
    (void) HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_INPUT);
 8005086:	2101      	movs	r1, #1
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	f7fe fe9d 	bl	8003dc8 <HAL_JPEG_Pause>
 800508e:	e028      	b.n	80050e2 <JPEG_ReadInputData+0x78>
  }
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6a1b      	ldr	r3, [r3, #32]
 8005098:	429a      	cmp	r2, r3
 800509a:	d906      	bls.n	80050aa <JPEG_ReadInputData+0x40>
  {
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6a1b      	ldr	r3, [r3, #32]
 80050a4:	1ad3      	subs	r3, r2, r3
 80050a6:	61fb      	str	r3, [r7, #28]
 80050a8:	e01b      	b.n	80050e2 <JPEG_ReadInputData+0x78>
  }
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6a1b      	ldr	r3, [r3, #32]
 80050b2:	429a      	cmp	r2, r3
 80050b4:	d115      	bne.n	80050e2 <JPEG_ReadInputData+0x78>
  {
    /*Call HAL_JPEG_GetDataCallback to get new data */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->GetDataCallback(hjpeg, hjpeg->JpegInCount);
#else
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6a1b      	ldr	r3, [r3, #32]
 80050ba:	4619      	mov	r1, r3
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	f009 feab 	bl	800ee18 <HAL_JPEG_GetDataCallback>
#endif /*USE_HAL_JPEG_REGISTER_CALLBACKS*/

    if (hjpeg->InDataLength > 4UL)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050c6:	2b04      	cmp	r3, #4
 80050c8:	d905      	bls.n	80050d6 <JPEG_ReadInputData+0x6c>
    {
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ce:	f023 0203 	bic.w	r2, r3, #3
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	629a      	str	r2, [r3, #40]	; 0x28
    }
    hjpeg->JpegInCount = 0;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2200      	movs	r2, #0
 80050da:	621a      	str	r2, [r3, #32]
    nb_bytes = hjpeg->InDataLength;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050e0:	61fb      	str	r3, [r7, #28]
  }
  else
  {
    /* Nothing to do */
  }
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	f040 809f 	bne.w	800522e <JPEG_ReadInputData+0x1c4>
 80050f0:	69fb      	ldr	r3, [r7, #28]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	f000 809b 	beq.w	800522e <JPEG_ReadInputData+0x1c4>
  {
    nb_words = nb_bytes / 4UL;
 80050f8:	69fb      	ldr	r3, [r7, #28]
 80050fa:	089b      	lsrs	r3, r3, #2
 80050fc:	613b      	str	r3, [r7, #16]
    if (nb_words >= nbRequestWords)
 80050fe:	693a      	ldr	r2, [r7, #16]
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	429a      	cmp	r2, r3
 8005104:	d335      	bcc.n	8005172 <JPEG_ReadInputData+0x108>
    {
      for (index = 0; index < nbRequestWords; index++)
 8005106:	2300      	movs	r3, #0
 8005108:	61bb      	str	r3, [r7, #24]
 800510a:	e02d      	b.n	8005168 <JPEG_ReadInputData+0xfe>
      {
        input_count = hjpeg->JpegInCount;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6a1b      	ldr	r3, [r3, #32]
 8005110:	60fb      	str	r3, [r7, #12]
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	699a      	ldr	r2, [r3, #24]
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	4413      	add	r3, r2
 800511a:	781b      	ldrb	r3, [r3, #0]
 800511c:	4619      	mov	r1, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	699a      	ldr	r2, [r3, #24]
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	3301      	adds	r3, #1
 8005126:	4413      	add	r3, r2
 8005128:	781b      	ldrb	r3, [r3, #0]
 800512a:	021b      	lsls	r3, r3, #8
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800512c:	ea41 0203 	orr.w	r2, r1, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6999      	ldr	r1, [r3, #24]
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	3302      	adds	r3, #2
 8005138:	440b      	add	r3, r1
 800513a:	781b      	ldrb	r3, [r3, #0]
 800513c:	041b      	lsls	r3, r3, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800513e:	ea42 0103 	orr.w	r1, r2, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	699a      	ldr	r2, [r3, #24]
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	3303      	adds	r3, #3
 800514a:	4413      	add	r3, r2
 800514c:	781b      	ldrb	r3, [r3, #0]
 800514e:	061a      	lsls	r2, r3, #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8005154:	430a      	orrs	r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8005156:	641a      	str	r2, [r3, #64]	; 0x40

        hjpeg->JpegInCount += 4UL;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6a1b      	ldr	r3, [r3, #32]
 800515c:	1d1a      	adds	r2, r3, #4
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	621a      	str	r2, [r3, #32]
      for (index = 0; index < nbRequestWords; index++)
 8005162:	69bb      	ldr	r3, [r7, #24]
 8005164:	3301      	adds	r3, #1
 8005166:	61bb      	str	r3, [r7, #24]
 8005168:	69ba      	ldr	r2, [r7, #24]
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	429a      	cmp	r2, r3
 800516e:	d3cd      	bcc.n	800510c <JPEG_ReadInputData+0xa2>
        }
        hjpeg->Instance->DIR = dataword;
      }
    }
  }
}
 8005170:	e05d      	b.n	800522e <JPEG_ReadInputData+0x1c4>
      if (nb_words > 0UL)
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d035      	beq.n	80051e4 <JPEG_ReadInputData+0x17a>
        for (index = 0; index < nb_words; index++)
 8005178:	2300      	movs	r3, #0
 800517a:	61bb      	str	r3, [r7, #24]
 800517c:	e02d      	b.n	80051da <JPEG_ReadInputData+0x170>
          input_count = hjpeg->JpegInCount;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6a1b      	ldr	r3, [r3, #32]
 8005182:	60fb      	str	r3, [r7, #12]
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	699a      	ldr	r2, [r3, #24]
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	4413      	add	r3, r2
 800518c:	781b      	ldrb	r3, [r3, #0]
 800518e:	4619      	mov	r1, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	699a      	ldr	r2, [r3, #24]
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	3301      	adds	r3, #1
 8005198:	4413      	add	r3, r2
 800519a:	781b      	ldrb	r3, [r3, #0]
 800519c:	021b      	lsls	r3, r3, #8
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800519e:	ea41 0203 	orr.w	r2, r1, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6999      	ldr	r1, [r3, #24]
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	3302      	adds	r3, #2
 80051aa:	440b      	add	r3, r1
 80051ac:	781b      	ldrb	r3, [r3, #0]
 80051ae:	041b      	lsls	r3, r3, #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80051b0:	ea42 0103 	orr.w	r1, r2, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	699a      	ldr	r2, [r3, #24]
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	3303      	adds	r3, #3
 80051bc:	4413      	add	r3, r2
 80051be:	781b      	ldrb	r3, [r3, #0]
 80051c0:	061a      	lsls	r2, r3, #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80051c6:	430a      	orrs	r2, r1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80051c8:	641a      	str	r2, [r3, #64]	; 0x40
          hjpeg->JpegInCount += 4UL;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6a1b      	ldr	r3, [r3, #32]
 80051ce:	1d1a      	adds	r2, r3, #4
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	621a      	str	r2, [r3, #32]
        for (index = 0; index < nb_words; index++)
 80051d4:	69bb      	ldr	r3, [r7, #24]
 80051d6:	3301      	adds	r3, #1
 80051d8:	61bb      	str	r3, [r7, #24]
 80051da:	69ba      	ldr	r2, [r7, #24]
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	429a      	cmp	r2, r3
 80051e0:	d3cd      	bcc.n	800517e <JPEG_ReadInputData+0x114>
}
 80051e2:	e024      	b.n	800522e <JPEG_ReadInputData+0x1c4>
        dataword = 0;
 80051e4:	2300      	movs	r3, #0
 80051e6:	617b      	str	r3, [r7, #20]
        for (index = 0; index < nb_bytes; index++)
 80051e8:	2300      	movs	r3, #0
 80051ea:	61bb      	str	r3, [r7, #24]
 80051ec:	e017      	b.n	800521e <JPEG_ReadInputData+0x1b4>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	699a      	ldr	r2, [r3, #24]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6a1b      	ldr	r3, [r3, #32]
 80051f6:	4413      	add	r3, r2
 80051f8:	781b      	ldrb	r3, [r3, #0]
 80051fa:	461a      	mov	r2, r3
 80051fc:	69bb      	ldr	r3, [r7, #24]
 80051fe:	f003 0303 	and.w	r3, r3, #3
 8005202:	00db      	lsls	r3, r3, #3
 8005204:	fa02 f303 	lsl.w	r3, r2, r3
 8005208:	697a      	ldr	r2, [r7, #20]
 800520a:	4313      	orrs	r3, r2
 800520c:	617b      	str	r3, [r7, #20]
          hjpeg->JpegInCount++;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6a1b      	ldr	r3, [r3, #32]
 8005212:	1c5a      	adds	r2, r3, #1
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	621a      	str	r2, [r3, #32]
        for (index = 0; index < nb_bytes; index++)
 8005218:	69bb      	ldr	r3, [r7, #24]
 800521a:	3301      	adds	r3, #1
 800521c:	61bb      	str	r3, [r7, #24]
 800521e:	69ba      	ldr	r2, [r7, #24]
 8005220:	69fb      	ldr	r3, [r7, #28]
 8005222:	429a      	cmp	r2, r3
 8005224:	d3e3      	bcc.n	80051ee <JPEG_ReadInputData+0x184>
        hjpeg->Instance->DIR = dataword;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	697a      	ldr	r2, [r7, #20]
 800522c:	641a      	str	r2, [r3, #64]	; 0x40
}
 800522e:	bf00      	nop
 8005230:	3720      	adds	r7, #32
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}
	...

08005238 <JPEG_DMA_StartProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static HAL_StatusTypeDef JPEG_DMA_StartProcess(JPEG_HandleTypeDef *hjpeg)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b082      	sub	sp, #8
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  if ((hjpeg->InDataLength < 4UL) || (hjpeg->OutDataLength < 4UL))
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005244:	2b03      	cmp	r3, #3
 8005246:	d903      	bls.n	8005250 <JPEG_DMA_StartProcess+0x18>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800524c:	2b03      	cmp	r3, #3
 800524e:	d801      	bhi.n	8005254 <JPEG_DMA_StartProcess+0x1c>
  {
    return HAL_ERROR;
 8005250:	2301      	movs	r3, #1
 8005252:	e068      	b.n	8005326 <JPEG_DMA_StartProcess+0xee>
  }
  /* Reset Ending DMA internal context flag*/
  hjpeg->Context &= ~JPEG_CONTEXT_ENDING_DMA;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005258:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Disable DMA In/Out Request*/
  JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_ODMA | JPEG_DMA_IDMA);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
 800526e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the JPEG DMA In transfer complete callback */
  hjpeg->hdmain->XferCpltCallback = JPEG_DMAInCpltCallback;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005274:	4a2e      	ldr	r2, [pc, #184]	; (8005330 <JPEG_DMA_StartProcess+0xf8>)
 8005276:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Set the DMA In error callback */
  hjpeg->hdmain->XferErrorCallback = JPEG_DMAErrorCallback;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800527c:	4a2d      	ldr	r2, [pc, #180]	; (8005334 <JPEG_DMA_StartProcess+0xfc>)
 800527e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the JPEG DMA Out transfer complete callback */
  hjpeg->hdmaout->XferCpltCallback = JPEG_DMAOutCpltCallback;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005284:	4a2c      	ldr	r2, [pc, #176]	; (8005338 <JPEG_DMA_StartProcess+0x100>)
 8005286:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Set the DMA Out error callback */
  hjpeg->hdmaout->XferErrorCallback = JPEG_DMAErrorCallback;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800528c:	4a29      	ldr	r2, [pc, #164]	; (8005334 <JPEG_DMA_StartProcess+0xfc>)
 800528e:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Set the DMA Out Abort callback */
  hjpeg->hdmaout->XferAbortCallback = JPEG_DMAOutAbortCallback;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005294:	4a29      	ldr	r2, [pc, #164]	; (800533c <JPEG_DMA_StartProcess+0x104>)
 8005296:	651a      	str	r2, [r3, #80]	; 0x50

  /*DMA transfer size must be a multiple of 4 bytes i.e multiple of 32bits words*/
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800529c:	f023 0203 	bic.w	r2, r3, #3
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	629a      	str	r2, [r3, #40]	; 0x28

  /*DMA transfer size must be a multiple of 4 bytes i.e multiple of 32bits words*/
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % 4UL);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052a8:	f023 0203 	bic.w	r2, r3, #3
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Start DMA FIFO In transfer */
  if (HAL_DMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	699b      	ldr	r3, [r3, #24]
 80052b8:	4619      	mov	r1, r3
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	3340      	adds	r3, #64	; 0x40
 80052c0:	461a      	mov	r2, r3
                       hjpeg->InDataLength >> 2)  != HAL_OK)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (HAL_DMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 80052c6:	089b      	lsrs	r3, r3, #2
 80052c8:	f7fc fe66 	bl	8001f98 <HAL_DMA_Start_IT>
 80052cc:	4603      	mov	r3, r0
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d007      	beq.n	80052e2 <JPEG_DMA_StartProcess+0xaa>
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052d6:	f043 0204 	orr.w	r2, r3, #4
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	651a      	str	r2, [r3, #80]	; 0x50
    return HAL_ERROR;
 80052de:	2301      	movs	r3, #1
 80052e0:	e021      	b.n	8005326 <JPEG_DMA_StartProcess+0xee>
  }

  /* Start DMA FIFO Out transfer */
  if (HAL_DMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	3344      	adds	r3, #68	; 0x44
 80052ec:	4619      	mov	r1, r3
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	69db      	ldr	r3, [r3, #28]
 80052f2:	461a      	mov	r2, r3
                       hjpeg->OutDataLength >> 2)  != HAL_OK)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  if (HAL_DMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 80052f8:	089b      	lsrs	r3, r3, #2
 80052fa:	f7fc fe4d 	bl	8001f98 <HAL_DMA_Start_IT>
 80052fe:	4603      	mov	r3, r0
 8005300:	2b00      	cmp	r3, #0
 8005302:	d007      	beq.n	8005314 <JPEG_DMA_StartProcess+0xdc>
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005308:	f043 0204 	orr.w	r2, r3, #4
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	651a      	str	r2, [r3, #80]	; 0x50
    return HAL_ERROR;
 8005310:	2301      	movs	r3, #1
 8005312:	e008      	b.n	8005326 <JPEG_DMA_StartProcess+0xee>
  }

  /* Enable JPEG In/Out DMA requests*/
  JPEG_ENABLE_DMA(hjpeg, JPEG_DMA_IDMA | JPEG_DMA_ODMA);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f442 52c0 	orr.w	r2, r2, #6144	; 0x1800
 8005322:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8005324:	2300      	movs	r3, #0
}
 8005326:	4618      	mov	r0, r3
 8005328:	3708      	adds	r7, #8
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}
 800532e:	bf00      	nop
 8005330:	08005659 	.word	0x08005659
 8005334:	0800583d 	.word	0x0800583d
 8005338:	08005759 	.word	0x08005759
 800533c:	080058a9 	.word	0x080058a9

08005340 <JPEG_DMA_ContinueProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static void JPEG_DMA_ContinueProcess(JPEG_HandleTypeDef *hjpeg)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b082      	sub	sp, #8
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  /*End of header processing flag rises*/
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800534c:	f003 0303 	and.w	r3, r3, #3
 8005350:	2b02      	cmp	r3, #2
 8005352:	d125      	bne.n	80053a0 <JPEG_DMA_ContinueProcess+0x60>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800535a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800535e:	2b00      	cmp	r3, #0
 8005360:	d01e      	beq.n	80053a0 <JPEG_DMA_ContinueProcess+0x60>
    {
      /*Call Header parsing complete callback */
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	3304      	adds	r3, #4
 8005366:	4619      	mov	r1, r3
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f7fe fc35 	bl	8003bd8 <HAL_JPEG_GetInfo>

      /* Reset the ImageQuality */
      hjpeg->Conf.ImageQuality = 0;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2200      	movs	r2, #0
 8005372:	615a      	str	r2, [r3, #20]

      /*Call Info Ready callback */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->InfoReadyCallback(hjpeg, &hjpeg->Conf);
#else
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	3304      	adds	r3, #4
 8005378:	4619      	mov	r1, r3
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f009 fcb0 	bl	800ece0 <HAL_JPEG_InfoReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800538e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Clear header processing done flag */
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800539e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  /*End of Conversion handling*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) != 0UL)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053a6:	f003 0320 	and.w	r3, r3, #32
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d041      	beq.n	8005432 <JPEG_DMA_ContinueProcess+0xf2>
  {
    /*Disabkle JPEG In/Out DMA Requests*/
    JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_ODMA | JPEG_DMA_IDMA);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
 80053bc:	631a      	str	r2, [r3, #48]	; 0x30

    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053c2:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	655a      	str	r2, [r3, #84]	; 0x54

    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f022 0201 	bic.w	r2, r2, #1
 80053d8:	601a      	str	r2, [r3, #0]

    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 80053e8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear all flags */
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80053f8:	639a      	str	r2, [r3, #56]	; 0x38

    if (hjpeg->hdmain->State == HAL_DMA_STATE_BUSY)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005402:	b2db      	uxtb	r3, r3
 8005404:	2b02      	cmp	r3, #2
 8005406:	d104      	bne.n	8005412 <JPEG_DMA_ContinueProcess+0xd2>
    {
      /* Stop the DMA In Xfer*/
      (void) HAL_DMA_Abort_IT(hjpeg->hdmain);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800540c:	4618      	mov	r0, r3
 800540e:	f7fc fe23 	bl	8002058 <HAL_DMA_Abort_IT>
    }

    if (hjpeg->hdmaout->State == HAL_DMA_STATE_BUSY)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005416:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800541a:	b2db      	uxtb	r3, r3
 800541c:	2b02      	cmp	r3, #2
 800541e:	d105      	bne.n	800542c <JPEG_DMA_ContinueProcess+0xec>
    {
      /* Stop the DMA out Xfer*/
      (void) HAL_DMA_Abort_IT(hjpeg->hdmaout);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005424:	4618      	mov	r0, r3
 8005426:	f7fc fe17 	bl	8002058 <HAL_DMA_Abort_IT>
      JPEG_DMA_EndProcess(hjpeg);
    }
  }


}
 800542a:	e002      	b.n	8005432 <JPEG_DMA_ContinueProcess+0xf2>
      JPEG_DMA_EndProcess(hjpeg);
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f000 f805 	bl	800543c <JPEG_DMA_EndProcess>
}
 8005432:	bf00      	nop
 8005434:	3708      	adds	r7, #8
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}
	...

0800543c <JPEG_DMA_EndProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE
  */
static void JPEG_DMA_EndProcess(JPEG_HandleTypeDef *hjpeg)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b084      	sub	sp, #16
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;
  hjpeg->JpegOutCount = hjpeg->OutDataLength - ((hjpeg->hdmaout->Instance->NDTR & DMA_SxNDT) << 2);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	0099      	lsls	r1, r3, #2
 8005452:	4b2f      	ldr	r3, [pc, #188]	; (8005510 <JPEG_DMA_EndProcess+0xd4>)
 8005454:	400b      	ands	r3, r1
 8005456:	1ad2      	subs	r2, r2, r3
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	625a      	str	r2, [r3, #36]	; 0x24

  /*if Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005464:	429a      	cmp	r2, r3
 8005466:	d10a      	bne.n	800547e <JPEG_DMA_EndProcess+0x42>
  {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	69d9      	ldr	r1, [r3, #28]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005470:	461a      	mov	r2, r3
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f009 fd04 	bl	800ee80 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

    hjpeg->JpegOutCount = 0;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2200      	movs	r2, #0
 800547c:	625a      	str	r2, [r3, #36]	; 0x24
  }

  /*Check if remaining data in the output FIFO*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005484:	f003 0310 	and.w	r3, r3, #16
 8005488:	2b00      	cmp	r3, #0
 800548a:	d134      	bne.n	80054f6 <JPEG_DMA_EndProcess+0xba>
  {
    if (hjpeg->JpegOutCount > 0UL)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005490:	2b00      	cmp	r3, #0
 8005492:	d00a      	beq.n	80054aa <JPEG_DMA_EndProcess+0x6e>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	69d9      	ldr	r1, [r3, #28]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800549c:	461a      	mov	r2, r3
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f009 fcee 	bl	800ee80 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2200      	movs	r2, #0
 80054a8:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	681a      	ldr	r2, [r3, #0]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f022 0201 	bic.w	r2, r2, #1
 80054b8:	601a      	str	r2, [r3, #0]

    tmpContext = hjpeg->Context;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054be:	60fb      	str	r3, [r7, #12]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054c4:	f403 4282 	and.w	r2, r3, #16640	; 0x4100
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2200      	movs	r2, #0
 80054d0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2201      	movs	r2, #1
 80054d8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f003 0303 	and.w	r3, r3, #3
 80054e2:	2b02      	cmp	r3, #2
 80054e4:	d103      	bne.n	80054ee <JPEG_DMA_EndProcess+0xb2>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f009 fd32 	bl	800ef50 <HAL_JPEG_DecodeCpltCallback>
  else
  {
    /* Nothing to do */
  }

}
 80054ec:	e00c      	b.n	8005508 <JPEG_DMA_EndProcess+0xcc>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f7fe fdb6 	bl	8004060 <HAL_JPEG_EncodeCpltCallback>
}
 80054f4:	e008      	b.n	8005508 <JPEG_DMA_EndProcess+0xcc>
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d102      	bne.n	8005508 <JPEG_DMA_EndProcess+0xcc>
    JPEG_DMA_PollResidualData(hjpeg);
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f000 f806 	bl	8005514 <JPEG_DMA_PollResidualData>
}
 8005508:	bf00      	nop
 800550a:	3710      	adds	r7, #16
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}
 8005510:	0003fffc 	.word	0x0003fffc

08005514 <JPEG_DMA_PollResidualData>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None.
  */
static void JPEG_DMA_PollResidualData(JPEG_HandleTypeDef *hjpeg)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b086      	sub	sp, #24
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;
  uint32_t count;
  uint32_t dataOut;

  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 800551c:	2310      	movs	r3, #16
 800551e:	617b      	str	r3, [r7, #20]
 8005520:	e04f      	b.n	80055c2 <JPEG_DMA_PollResidualData+0xae>
  {
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005526:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800552a:	2b00      	cmp	r3, #0
 800552c:	d146      	bne.n	80055bc <JPEG_DMA_PollResidualData+0xa8>
    {
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005534:	f003 0310 	and.w	r3, r3, #16
 8005538:	2b00      	cmp	r3, #0
 800553a:	d03f      	beq.n	80055bc <JPEG_DMA_PollResidualData+0xa8>
      {
        dataOut = hjpeg->Instance->DOR;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005542:	60fb      	str	r3, [r7, #12]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	69da      	ldr	r2, [r3, #28]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800554c:	4413      	add	r3, r2
 800554e:	68fa      	ldr	r2, [r7, #12]
 8005550:	b2d2      	uxtb	r2, r2
 8005552:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	0a19      	lsrs	r1, r3, #8
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	69da      	ldr	r2, [r3, #28]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005560:	3301      	adds	r3, #1
 8005562:	4413      	add	r3, r2
 8005564:	b2ca      	uxtb	r2, r1
 8005566:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	0c19      	lsrs	r1, r3, #16
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	69da      	ldr	r2, [r3, #28]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005574:	3302      	adds	r3, #2
 8005576:	4413      	add	r3, r2
 8005578:	b2ca      	uxtb	r2, r1
 800557a:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	0e19      	lsrs	r1, r3, #24
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	69da      	ldr	r2, [r3, #28]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005588:	3303      	adds	r3, #3
 800558a:	4413      	add	r3, r2
 800558c:	b2ca      	uxtb	r2, r1
 800558e:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount += 4UL;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005594:	1d1a      	adds	r2, r3, #4
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	625a      	str	r2, [r3, #36]	; 0x24

        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055a2:	429a      	cmp	r2, r3
 80055a4:	d10a      	bne.n	80055bc <JPEG_DMA_PollResidualData+0xa8>
        {
          /*Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
          hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
          HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	69d9      	ldr	r1, [r3, #28]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ae:	461a      	mov	r2, r3
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f009 fc65 	bl	800ee80 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

          hjpeg->JpegOutCount = 0;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2200      	movs	r2, #0
 80055ba:	625a      	str	r2, [r3, #36]	; 0x24
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	3b01      	subs	r3, #1
 80055c0:	617b      	str	r3, [r7, #20]
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d1ac      	bne.n	8005522 <JPEG_DMA_PollResidualData+0xe>

      }
    }
  }

  tmpContext = hjpeg->Context;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055cc:	613b      	str	r3, [r7, #16]

  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055d4:	f003 0310 	and.w	r3, r3, #16
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d004      	beq.n	80055e6 <JPEG_DMA_PollResidualData+0xd2>
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d133      	bne.n	800564e <JPEG_DMA_PollResidualData+0x13a>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f022 0201 	bic.w	r2, r2, #1
 80055f4:	601a      	str	r2, [r3, #0]

    if (hjpeg->JpegOutCount > 0UL)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d00a      	beq.n	8005614 <JPEG_DMA_PollResidualData+0x100>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	69d9      	ldr	r1, [r3, #28]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005606:	461a      	mov	r2, r3
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	f009 fc39 	bl	800ee80 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2200      	movs	r2, #0
 8005612:	625a      	str	r2, [r3, #36]	; 0x24
    }

    tmpContext = hjpeg->Context;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005618:	613b      	str	r3, [r7, #16]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800561e:	f403 4282 	and.w	r2, r3, #16640	; 0x4100
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2200      	movs	r2, #0
 800562a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2201      	movs	r2, #1
 8005632:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	f003 0303 	and.w	r3, r3, #3
 800563c:	2b02      	cmp	r3, #2
 800563e:	d103      	bne.n	8005648 <JPEG_DMA_PollResidualData+0x134>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f009 fc85 	bl	800ef50 <HAL_JPEG_DecodeCpltCallback>
#else
      HAL_JPEG_EncodeCpltCallback(hjpeg);
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
    }
  }
}
 8005646:	e002      	b.n	800564e <JPEG_DMA_PollResidualData+0x13a>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f7fe fd09 	bl	8004060 <HAL_JPEG_EncodeCpltCallback>
}
 800564e:	bf00      	nop
 8005650:	3718      	adds	r7, #24
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}
	...

08005658 <JPEG_DMAInCpltCallback>:
  * @brief  DMA input transfer complete callback
  * @param  hdma pointer to a DMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_DMAInCpltCallback(DMA_HandleTypeDef *hdma)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b084      	sub	sp, #16
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005664:	60fb      	str	r3, [r7, #12]

  /* Disable The JPEG IT so the DMA Input Callback can not be interrupted by the JPEG EOC IT or JPEG HPD IT */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 8005674:	631a      	str	r2, [r3, #48]	; 0x30

  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800567a:	f248 030c 	movw	r3, #32780	; 0x800c
 800567e:	4013      	ands	r3, r2
 8005680:	2b0c      	cmp	r3, #12
 8005682:	d163      	bne.n	800574c <JPEG_DMAInCpltCallback+0xf4>
      JPEG_CONTEXT_DMA) /* Check if context method is DMA and we are not in ending DMA stage */
  {
    JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_IDMA);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005692:	631a      	str	r2, [r3, #48]	; 0x30

    hjpeg->JpegInCount = hjpeg->InDataLength - ((hdma->Instance->NDTR & DMA_SxNDT) << 2);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	0099      	lsls	r1, r3, #2
 80056a0:	4b2c      	ldr	r3, [pc, #176]	; (8005754 <JPEG_DMAInCpltCallback+0xfc>)
 80056a2:	400b      	ands	r3, r1
 80056a4:	1ad2      	subs	r2, r2, r3
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	621a      	str	r2, [r3, #32]

    /*Call HAL_JPEG_GetDataCallback to get new data */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->GetDataCallback(hjpeg, hjpeg->JpegInCount);
#else
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	6a1b      	ldr	r3, [r3, #32]
 80056ae:	4619      	mov	r1, r3
 80056b0:	68f8      	ldr	r0, [r7, #12]
 80056b2:	f009 fbb1 	bl	800ee18 <HAL_JPEG_GetDataCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

    if (hjpeg->InDataLength >= 4UL)
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ba:	2b03      	cmp	r3, #3
 80056bc:	d906      	bls.n	80056cc <JPEG_DMAInCpltCallback+0x74>
    {
      /*JPEG Input DMA transfer data number must be multiple of 32 bits word
        as the destination is a 32 bits (4 bytes) register */
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056c2:	f023 0203 	bic.w	r2, r3, #3
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	629a      	str	r2, [r3, #40]	; 0x28
 80056ca:	e006      	b.n	80056da <JPEG_DMAInCpltCallback+0x82>
    }
    else if (hjpeg->InDataLength > 0UL)
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d002      	beq.n	80056da <JPEG_DMAInCpltCallback+0x82>
    {
      /*Transfer last data word (i.e last 4 bytes)*/
      hjpeg->InDataLength = 4;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2204      	movs	r2, #4
 80056d8:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d12a      	bne.n	800573c <JPEG_DMAInCpltCallback+0xe4>
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d026      	beq.n	800573c <JPEG_DMAInCpltCallback+0xe4>
    {
      /* Start DMA FIFO In transfer */
      if (HAL_DMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	699b      	ldr	r3, [r3, #24]
 80056f6:	4619      	mov	r1, r3
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	3340      	adds	r3, #64	; 0x40
 80056fe:	461a      	mov	r2, r3
                           hjpeg->InDataLength >> 2) != HAL_OK)
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (HAL_DMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 8005704:	089b      	lsrs	r3, r3, #2
 8005706:	f7fc fc47 	bl	8001f98 <HAL_DMA_Start_IT>
 800570a:	4603      	mov	r3, r0
 800570c:	2b00      	cmp	r3, #0
 800570e:	d00d      	beq.n	800572c <JPEG_DMAInCpltCallback+0xd4>
      {
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005714:	f043 0204 	orr.w	r2, r3, #4
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	651a      	str	r2, [r3, #80]	; 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2206      	movs	r2, #6
 8005720:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
        hjpeg->ErrorCallback(hjpeg);
#else
        HAL_JPEG_ErrorCallback(hjpeg);
 8005724:	68f8      	ldr	r0, [r7, #12]
 8005726:	f009 fc0b 	bl	800ef40 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
        return;
 800572a:	e00f      	b.n	800574c <JPEG_DMAInCpltCallback+0xf4>
      }
      JPEG_ENABLE_DMA(hjpeg, JPEG_DMA_IDMA);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800573a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* JPEG Conversion still on going : Enable the JPEG IT */
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800574a:	631a      	str	r2, [r3, #48]	; 0x30
  }
}
 800574c:	3710      	adds	r7, #16
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}
 8005752:	bf00      	nop
 8005754:	0003fffc 	.word	0x0003fffc

08005758 <JPEG_DMAOutCpltCallback>:
  * @brief  DMA output transfer complete callback
  * @param  hdma pointer to a DMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_DMAOutCpltCallback(DMA_HandleTypeDef *hdma)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b084      	sub	sp, #16
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005764:	60fb      	str	r3, [r7, #12]

  /* Disable The JPEG IT so the DMA Output Callback can not be interrupted by the JPEG EOC IT or JPEG HPD IT */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 8005774:	631a      	str	r2, [r3, #48]	; 0x30

  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800577a:	f248 030c 	movw	r3, #32780	; 0x800c
 800577e:	4013      	ands	r3, r2
 8005780:	2b0c      	cmp	r3, #12
 8005782:	d156      	bne.n	8005832 <JPEG_DMAOutCpltCallback+0xda>
      JPEG_CONTEXT_DMA) /* Check if context method is DMA and we are not in ending DMA stage */
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) == 0UL)
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800578a:	f003 0320 	and.w	r3, r3, #32
 800578e:	2b00      	cmp	r3, #0
 8005790:	d147      	bne.n	8005822 <JPEG_DMAOutCpltCallback+0xca>
    {
      JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_ODMA);
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80057a0:	631a      	str	r2, [r3, #48]	; 0x30
      hjpeg->JpegOutCount = hjpeg->OutDataLength - ((hdma->Instance->NDTR & DMA_SxNDT) << 2);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	0099      	lsls	r1, r3, #2
 80057ae:	4b22      	ldr	r3, [pc, #136]	; (8005838 <JPEG_DMAOutCpltCallback+0xe0>)
 80057b0:	400b      	ands	r3, r1
 80057b2:	1ad2      	subs	r2, r2, r3
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	625a      	str	r2, [r3, #36]	; 0x24

      /*Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	69d9      	ldr	r1, [r3, #28]
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c0:	461a      	mov	r2, r3
 80057c2:	68f8      	ldr	r0, [r7, #12]
 80057c4:	f009 fb5c 	bl	800ee80 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d126      	bne.n	8005822 <JPEG_DMAOutCpltCallback+0xca>
      {
        /* Start DMA FIFO Out transfer */
        if (HAL_DMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	3344      	adds	r3, #68	; 0x44
 80057de:	4619      	mov	r1, r3
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	69db      	ldr	r3, [r3, #28]
 80057e4:	461a      	mov	r2, r3
                             hjpeg->OutDataLength >> 2) != HAL_OK)
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if (HAL_DMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 80057ea:	089b      	lsrs	r3, r3, #2
 80057ec:	f7fc fbd4 	bl	8001f98 <HAL_DMA_Start_IT>
 80057f0:	4603      	mov	r3, r0
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d00d      	beq.n	8005812 <JPEG_DMAOutCpltCallback+0xba>
        {
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057fa:	f043 0204 	orr.w	r2, r3, #4
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	651a      	str	r2, [r3, #80]	; 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2206      	movs	r2, #6
 8005806:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
          hjpeg->ErrorCallback(hjpeg);
#else
          HAL_JPEG_ErrorCallback(hjpeg);
 800580a:	68f8      	ldr	r0, [r7, #12]
 800580c:	f009 fb98 	bl	800ef40 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
          return;
 8005810:	e00f      	b.n	8005832 <JPEG_DMAOutCpltCallback+0xda>
        }
        JPEG_ENABLE_DMA(hjpeg, JPEG_DMA_ODMA);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005820:	631a      	str	r2, [r3, #48]	; 0x30
      }
    }

    /* JPEG Conversion still on going : Enable the JPEG IT */
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8005830:	631a      	str	r2, [r3, #48]	; 0x30
  }
}
 8005832:	3710      	adds	r7, #16
 8005834:	46bd      	mov	sp, r7
 8005836:	bd80      	pop	{r7, pc}
 8005838:	0003fffc 	.word	0x0003fffc

0800583c <JPEG_DMAErrorCallback>:
  * @brief  DMA Transfer error callback
  * @param  hdma pointer to a DMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_DMAErrorCallback(DMA_HandleTypeDef *hdma)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b084      	sub	sp, #16
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005848:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f7fc fdb0 	bl	80023b0 <HAL_DMA_GetError>
 8005850:	4603      	mov	r3, r0
 8005852:	2b02      	cmp	r3, #2
 8005854:	d024      	beq.n	80058a0 <JPEG_DMAErrorCallback+0x64>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	681a      	ldr	r2, [r3, #0]
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f022 0201 	bic.w	r2, r2, #1
 8005864:	601a      	str	r2, [r3, #0]

    /* Disable All Interrupts */
    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 8005874:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable All DMA requests */
    JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_MASK);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
 8005884:	631a      	str	r2, [r3, #48]	; 0x30

    hjpeg->State = HAL_JPEG_STATE_READY;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2201      	movs	r2, #1
 800588a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005892:	f043 0204 	orr.w	r2, r3, #4
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	651a      	str	r2, [r3, #80]	; 0x50
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->ErrorCallback(hjpeg);
#else
    HAL_JPEG_ErrorCallback(hjpeg);
 800589a:	68f8      	ldr	r0, [r7, #12]
 800589c:	f009 fb50 	bl	800ef40 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
  }
}
 80058a0:	bf00      	nop
 80058a2:	3710      	adds	r7, #16
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}

080058a8 <JPEG_DMAOutAbortCallback>:
  * @brief  DMA output Abort callback
  * @param  hdma pointer to a DMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_DMAOutAbortCallback(DMA_HandleTypeDef *hdma)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b084      	sub	sp, #16
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058b4:	60fb      	str	r3, [r7, #12]

  if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d002      	beq.n	80058c8 <JPEG_DMAOutAbortCallback+0x20>
  {
    JPEG_DMA_EndProcess(hjpeg);
 80058c2:	68f8      	ldr	r0, [r7, #12]
 80058c4:	f7ff fdba 	bl	800543c <JPEG_DMA_EndProcess>
  }
}
 80058c8:	bf00      	nop
 80058ca:	3710      	adds	r7, #16
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}

080058d0 <JPEG_GetQuality>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG image quality from 1 to 100.
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b08b      	sub	sp, #44	; 0x2c
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  uint32_t quality = 0;
 80058d8:	2300      	movs	r3, #0
 80058da:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	3350      	adds	r3, #80	; 0x50
 80058e2:	61bb      	str	r3, [r7, #24]

  i = 0;
 80058e4:	2300      	movs	r3, #0
 80058e6:	623b      	str	r3, [r7, #32]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 80058e8:	e042      	b.n	8005970 <JPEG_GetQuality+0xa0>
  {
    quantRow = *tableAddress;
 80058ea:	69bb      	ldr	r3, [r7, #24]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	617b      	str	r3, [r7, #20]
    for (j = 0; j < 4UL; j++)
 80058f0:	2300      	movs	r3, #0
 80058f2:	61fb      	str	r3, [r7, #28]
 80058f4:	e033      	b.n	800595e <JPEG_GetQuality+0x8e>
    {
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 80058f6:	69fb      	ldr	r3, [r7, #28]
 80058f8:	00db      	lsls	r3, r3, #3
 80058fa:	697a      	ldr	r2, [r7, #20]
 80058fc:	fa22 f303 	lsr.w	r3, r2, r3
 8005900:	b2db      	uxtb	r3, r3
 8005902:	613b      	str	r3, [r7, #16]
      if (quantVal == 1UL)
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	2b01      	cmp	r3, #1
 8005908:	d103      	bne.n	8005912 <JPEG_GetQuality+0x42>
      {
        /* if Quantization value = 1 then quality is 100%*/
        quality += 100UL;
 800590a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800590c:	3364      	adds	r3, #100	; 0x64
 800590e:	627b      	str	r3, [r7, #36]	; 0x24
 8005910:	e022      	b.n	8005958 <JPEG_GetQuality+0x88>
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	2264      	movs	r2, #100	; 0x64
 8005916:	fb02 f303 	mul.w	r3, r2, r3
 800591a:	687a      	ldr	r2, [r7, #4]
 800591c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800591e:	6a38      	ldr	r0, [r7, #32]
 8005920:	69f9      	ldr	r1, [r7, #28]
 8005922:	4401      	add	r1, r0
 8005924:	4818      	ldr	r0, [pc, #96]	; (8005988 <JPEG_GetQuality+0xb8>)
 8005926:	5c41      	ldrb	r1, [r0, r1]
 8005928:	440a      	add	r2, r1
 800592a:	7812      	ldrb	r2, [r2, #0]
 800592c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005930:	60fb      	str	r3, [r7, #12]

        if (scale <= 100UL)
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2b64      	cmp	r3, #100	; 0x64
 8005936:	d807      	bhi.n	8005948 <JPEG_GetQuality+0x78>
        {
          quality += (200UL - scale) / 2UL;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 800593e:	085b      	lsrs	r3, r3, #1
 8005940:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005942:	4413      	add	r3, r2
 8005944:	627b      	str	r3, [r7, #36]	; 0x24
 8005946:	e007      	b.n	8005958 <JPEG_GetQuality+0x88>
        }
        else
        {
          quality += 5000UL / scale;
 8005948:	f241 3288 	movw	r2, #5000	; 0x1388
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005952:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005954:	4413      	add	r3, r2
 8005956:	627b      	str	r3, [r7, #36]	; 0x24
    for (j = 0; j < 4UL; j++)
 8005958:	69fb      	ldr	r3, [r7, #28]
 800595a:	3301      	adds	r3, #1
 800595c:	61fb      	str	r3, [r7, #28]
 800595e:	69fb      	ldr	r3, [r7, #28]
 8005960:	2b03      	cmp	r3, #3
 8005962:	d9c8      	bls.n	80058f6 <JPEG_GetQuality+0x26>
        }
      }
    }

    i += 4UL;
 8005964:	6a3b      	ldr	r3, [r7, #32]
 8005966:	3304      	adds	r3, #4
 8005968:	623b      	str	r3, [r7, #32]
    tableAddress ++;
 800596a:	69bb      	ldr	r3, [r7, #24]
 800596c:	3304      	adds	r3, #4
 800596e:	61bb      	str	r3, [r7, #24]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 8005970:	6a3b      	ldr	r3, [r7, #32]
 8005972:	2b3c      	cmp	r3, #60	; 0x3c
 8005974:	d9b9      	bls.n	80058ea <JPEG_GetQuality+0x1a>
  }

  return (quality / 64UL);
 8005976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005978:	099b      	lsrs	r3, r3, #6
}
 800597a:	4618      	mov	r0, r3
 800597c:	372c      	adds	r7, #44	; 0x2c
 800597e:	46bd      	mov	sp, r7
 8005980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005984:	4770      	bx	lr
 8005986:	bf00      	nop
 8005988:	08026920 	.word	0x08026920

0800598c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b084      	sub	sp, #16
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d101      	bne.n	800599e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800599a:	2301      	movs	r3, #1
 800599c:	e0bf      	b.n	8005b1e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80059a4:	b2db      	uxtb	r3, r3
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d106      	bne.n	80059b8 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2200      	movs	r2, #0
 80059ae:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	f7fb fc6e 	bl	8001294 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2202      	movs	r2, #2
 80059bc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	699a      	ldr	r2, [r3, #24]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80059ce:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	6999      	ldr	r1, [r3, #24]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	685a      	ldr	r2, [r3, #4]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	689b      	ldr	r3, [r3, #8]
 80059de:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80059e4:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	691b      	ldr	r3, [r3, #16]
 80059ea:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	430a      	orrs	r2, r1
 80059f2:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	6899      	ldr	r1, [r3, #8]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681a      	ldr	r2, [r3, #0]
 80059fe:	4b4a      	ldr	r3, [pc, #296]	; (8005b28 <HAL_LTDC_Init+0x19c>)
 8005a00:	400b      	ands	r3, r1
 8005a02:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	695b      	ldr	r3, [r3, #20]
 8005a08:	041b      	lsls	r3, r3, #16
 8005a0a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	6899      	ldr	r1, [r3, #8]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	699a      	ldr	r2, [r3, #24]
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	431a      	orrs	r2, r3
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	430a      	orrs	r2, r1
 8005a20:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	68d9      	ldr	r1, [r3, #12]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681a      	ldr	r2, [r3, #0]
 8005a2c:	4b3e      	ldr	r3, [pc, #248]	; (8005b28 <HAL_LTDC_Init+0x19c>)
 8005a2e:	400b      	ands	r3, r1
 8005a30:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	69db      	ldr	r3, [r3, #28]
 8005a36:	041b      	lsls	r3, r3, #16
 8005a38:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	68d9      	ldr	r1, [r3, #12]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6a1a      	ldr	r2, [r3, #32]
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	431a      	orrs	r2, r3
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	430a      	orrs	r2, r1
 8005a4e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	6919      	ldr	r1, [r3, #16]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	4b33      	ldr	r3, [pc, #204]	; (8005b28 <HAL_LTDC_Init+0x19c>)
 8005a5c:	400b      	ands	r3, r1
 8005a5e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a64:	041b      	lsls	r3, r3, #16
 8005a66:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	6919      	ldr	r1, [r3, #16]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	431a      	orrs	r2, r3
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	430a      	orrs	r2, r1
 8005a7c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	6959      	ldr	r1, [r3, #20]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681a      	ldr	r2, [r3, #0]
 8005a88:	4b27      	ldr	r3, [pc, #156]	; (8005b28 <HAL_LTDC_Init+0x19c>)
 8005a8a:	400b      	ands	r3, r1
 8005a8c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a92:	041b      	lsls	r3, r3, #16
 8005a94:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	6959      	ldr	r1, [r3, #20]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	431a      	orrs	r2, r3
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	430a      	orrs	r2, r1
 8005aaa:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005ab2:	021b      	lsls	r3, r3, #8
 8005ab4:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005abc:	041b      	lsls	r3, r3, #16
 8005abe:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8005ace:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005ad6:	68ba      	ldr	r2, [r7, #8]
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	4313      	orrs	r3, r2
 8005adc:	687a      	ldr	r2, [r7, #4]
 8005ade:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8005ae2:	431a      	orrs	r2, r3
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	430a      	orrs	r2, r1
 8005aea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f042 0206 	orr.w	r2, r2, #6
 8005afa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	699a      	ldr	r2, [r3, #24]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f042 0201 	orr.w	r2, r2, #1
 8005b0a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2201      	movs	r2, #1
 8005b18:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8005b1c:	2300      	movs	r3, #0
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3710      	adds	r7, #16
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}
 8005b26:	bf00      	nop
 8005b28:	f000f800 	.word	0xf000f800

08005b2c <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b084      	sub	sp, #16
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b3a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b42:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f003 0304 	and.w	r3, r3, #4
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d023      	beq.n	8005b96 <HAL_LTDC_IRQHandler+0x6a>
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	f003 0304 	and.w	r3, r3, #4
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d01e      	beq.n	8005b96 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f022 0204 	bic.w	r2, r2, #4
 8005b66:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	2204      	movs	r2, #4
 8005b6e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005b76:	f043 0201 	orr.w	r2, r3, #1
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2204      	movs	r2, #4
 8005b84:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005b90:	6878      	ldr	r0, [r7, #4]
 8005b92:	f000 f86f 	bl	8005c74 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	f003 0302 	and.w	r3, r3, #2
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d023      	beq.n	8005be8 <HAL_LTDC_IRQHandler+0xbc>
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	f003 0302 	and.w	r3, r3, #2
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d01e      	beq.n	8005be8 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f022 0202 	bic.w	r2, r2, #2
 8005bb8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	2202      	movs	r2, #2
 8005bc0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005bc8:	f043 0202 	orr.w	r2, r3, #2
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2204      	movs	r2, #4
 8005bd6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f000 f846 	bl	8005c74 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	f003 0301 	and.w	r3, r3, #1
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d01b      	beq.n	8005c2a <HAL_LTDC_IRQHandler+0xfe>
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	f003 0301 	and.w	r3, r3, #1
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d016      	beq.n	8005c2a <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f022 0201 	bic.w	r2, r2, #1
 8005c0a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	2201      	movs	r2, #1
 8005c12:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2201      	movs	r2, #1
 8005c18:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	f000 f82f 	bl	8005c88 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	f003 0308 	and.w	r3, r3, #8
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d01b      	beq.n	8005c6c <HAL_LTDC_IRQHandler+0x140>
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	f003 0308 	and.w	r3, r3, #8
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d016      	beq.n	8005c6c <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f022 0208 	bic.w	r2, r2, #8
 8005c4c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	2208      	movs	r2, #8
 8005c54:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2201      	movs	r2, #1
 8005c5a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2200      	movs	r2, #0
 8005c62:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f000 f818 	bl	8005c9c <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8005c6c:	bf00      	nop
 8005c6e:	3710      	adds	r7, #16
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}

08005c74 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b083      	sub	sp, #12
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8005c7c:	bf00      	nop
 8005c7e:	370c      	adds	r7, #12
 8005c80:	46bd      	mov	sp, r7
 8005c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c86:	4770      	bx	lr

08005c88 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b083      	sub	sp, #12
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8005c90:	bf00      	nop
 8005c92:	370c      	adds	r7, #12
 8005c94:	46bd      	mov	sp, r7
 8005c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9a:	4770      	bx	lr

08005c9c <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b083      	sub	sp, #12
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8005ca4:	bf00      	nop
 8005ca6:	370c      	adds	r7, #12
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr

08005cb0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005cb0:	b5b0      	push	{r4, r5, r7, lr}
 8005cb2:	b084      	sub	sp, #16
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	60f8      	str	r0, [r7, #12]
 8005cb8:	60b9      	str	r1, [r7, #8]
 8005cba:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005cc2:	2b01      	cmp	r3, #1
 8005cc4:	d101      	bne.n	8005cca <HAL_LTDC_ConfigLayer+0x1a>
 8005cc6:	2302      	movs	r3, #2
 8005cc8:	e02c      	b.n	8005d24 <HAL_LTDC_ConfigLayer+0x74>
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	2201      	movs	r2, #1
 8005cce:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2202      	movs	r2, #2
 8005cd6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005cda:	68fa      	ldr	r2, [r7, #12]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2134      	movs	r1, #52	; 0x34
 8005ce0:	fb01 f303 	mul.w	r3, r1, r3
 8005ce4:	4413      	add	r3, r2
 8005ce6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	4614      	mov	r4, r2
 8005cee:	461d      	mov	r5, r3
 8005cf0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005cf2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005cf4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005cf6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005cf8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005cfa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005cfc:	682b      	ldr	r3, [r5, #0]
 8005cfe:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005d00:	687a      	ldr	r2, [r7, #4]
 8005d02:	68b9      	ldr	r1, [r7, #8]
 8005d04:	68f8      	ldr	r0, [r7, #12]
 8005d06:	f000 f811 	bl	8005d2c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	2201      	movs	r2, #1
 8005d10:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	2201      	movs	r2, #1
 8005d16:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005d22:	2300      	movs	r3, #0
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	3710      	adds	r7, #16
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bdb0      	pop	{r4, r5, r7, pc}

08005d2c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b089      	sub	sp, #36	; 0x24
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	60f8      	str	r0, [r7, #12]
 8005d34:	60b9      	str	r1, [r7, #8]
 8005d36:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	685a      	ldr	r2, [r3, #4]
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	68db      	ldr	r3, [r3, #12]
 8005d42:	0c1b      	lsrs	r3, r3, #16
 8005d44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d48:	4413      	add	r3, r2
 8005d4a:	041b      	lsls	r3, r3, #16
 8005d4c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	461a      	mov	r2, r3
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	01db      	lsls	r3, r3, #7
 8005d58:	4413      	add	r3, r2
 8005d5a:	3384      	adds	r3, #132	; 0x84
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	68fa      	ldr	r2, [r7, #12]
 8005d60:	6812      	ldr	r2, [r2, #0]
 8005d62:	4611      	mov	r1, r2
 8005d64:	687a      	ldr	r2, [r7, #4]
 8005d66:	01d2      	lsls	r2, r2, #7
 8005d68:	440a      	add	r2, r1
 8005d6a:	3284      	adds	r2, #132	; 0x84
 8005d6c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005d70:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	68db      	ldr	r3, [r3, #12]
 8005d7c:	0c1b      	lsrs	r3, r3, #16
 8005d7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005d82:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005d84:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4619      	mov	r1, r3
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	01db      	lsls	r3, r3, #7
 8005d90:	440b      	add	r3, r1
 8005d92:	3384      	adds	r3, #132	; 0x84
 8005d94:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005d96:	69fb      	ldr	r3, [r7, #28]
 8005d98:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005d9a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	68da      	ldr	r2, [r3, #12]
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	68db      	ldr	r3, [r3, #12]
 8005da6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005daa:	4413      	add	r3, r2
 8005dac:	041b      	lsls	r3, r3, #16
 8005dae:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	461a      	mov	r2, r3
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	01db      	lsls	r3, r3, #7
 8005dba:	4413      	add	r3, r2
 8005dbc:	3384      	adds	r3, #132	; 0x84
 8005dbe:	689b      	ldr	r3, [r3, #8]
 8005dc0:	68fa      	ldr	r2, [r7, #12]
 8005dc2:	6812      	ldr	r2, [r2, #0]
 8005dc4:	4611      	mov	r1, r2
 8005dc6:	687a      	ldr	r2, [r7, #4]
 8005dc8:	01d2      	lsls	r2, r2, #7
 8005dca:	440a      	add	r2, r1
 8005dcc:	3284      	adds	r2, #132	; 0x84
 8005dce:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005dd2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	689a      	ldr	r2, [r3, #8]
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	68db      	ldr	r3, [r3, #12]
 8005dde:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005de2:	4413      	add	r3, r2
 8005de4:	1c5a      	adds	r2, r3, #1
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4619      	mov	r1, r3
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	01db      	lsls	r3, r3, #7
 8005df0:	440b      	add	r3, r1
 8005df2:	3384      	adds	r3, #132	; 0x84
 8005df4:	4619      	mov	r1, r3
 8005df6:	69fb      	ldr	r3, [r7, #28]
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	461a      	mov	r2, r3
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	01db      	lsls	r3, r3, #7
 8005e06:	4413      	add	r3, r2
 8005e08:	3384      	adds	r3, #132	; 0x84
 8005e0a:	691b      	ldr	r3, [r3, #16]
 8005e0c:	68fa      	ldr	r2, [r7, #12]
 8005e0e:	6812      	ldr	r2, [r2, #0]
 8005e10:	4611      	mov	r1, r2
 8005e12:	687a      	ldr	r2, [r7, #4]
 8005e14:	01d2      	lsls	r2, r2, #7
 8005e16:	440a      	add	r2, r1
 8005e18:	3284      	adds	r2, #132	; 0x84
 8005e1a:	f023 0307 	bic.w	r3, r3, #7
 8005e1e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	461a      	mov	r2, r3
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	01db      	lsls	r3, r3, #7
 8005e2a:	4413      	add	r3, r2
 8005e2c:	3384      	adds	r3, #132	; 0x84
 8005e2e:	461a      	mov	r2, r3
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	691b      	ldr	r3, [r3, #16]
 8005e34:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005e3c:	021b      	lsls	r3, r3, #8
 8005e3e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005e46:	041b      	lsls	r3, r3, #16
 8005e48:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	699b      	ldr	r3, [r3, #24]
 8005e4e:	061b      	lsls	r3, r3, #24
 8005e50:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	461a      	mov	r2, r3
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	01db      	lsls	r3, r3, #7
 8005e5c:	4413      	add	r3, r2
 8005e5e:	3384      	adds	r3, #132	; 0x84
 8005e60:	699b      	ldr	r3, [r3, #24]
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	461a      	mov	r2, r3
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	01db      	lsls	r3, r3, #7
 8005e6c:	4413      	add	r3, r2
 8005e6e:	3384      	adds	r3, #132	; 0x84
 8005e70:	461a      	mov	r2, r3
 8005e72:	2300      	movs	r3, #0
 8005e74:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005e7c:	461a      	mov	r2, r3
 8005e7e:	69fb      	ldr	r3, [r7, #28]
 8005e80:	431a      	orrs	r2, r3
 8005e82:	69bb      	ldr	r3, [r7, #24]
 8005e84:	431a      	orrs	r2, r3
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4619      	mov	r1, r3
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	01db      	lsls	r3, r3, #7
 8005e90:	440b      	add	r3, r1
 8005e92:	3384      	adds	r3, #132	; 0x84
 8005e94:	4619      	mov	r1, r3
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	461a      	mov	r2, r3
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	01db      	lsls	r3, r3, #7
 8005ea6:	4413      	add	r3, r2
 8005ea8:	3384      	adds	r3, #132	; 0x84
 8005eaa:	695b      	ldr	r3, [r3, #20]
 8005eac:	68fa      	ldr	r2, [r7, #12]
 8005eae:	6812      	ldr	r2, [r2, #0]
 8005eb0:	4611      	mov	r1, r2
 8005eb2:	687a      	ldr	r2, [r7, #4]
 8005eb4:	01d2      	lsls	r2, r2, #7
 8005eb6:	440a      	add	r2, r1
 8005eb8:	3284      	adds	r2, #132	; 0x84
 8005eba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005ebe:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	461a      	mov	r2, r3
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	01db      	lsls	r3, r3, #7
 8005eca:	4413      	add	r3, r2
 8005ecc:	3384      	adds	r3, #132	; 0x84
 8005ece:	461a      	mov	r2, r3
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	695b      	ldr	r3, [r3, #20]
 8005ed4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	461a      	mov	r2, r3
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	01db      	lsls	r3, r3, #7
 8005ee0:	4413      	add	r3, r2
 8005ee2:	3384      	adds	r3, #132	; 0x84
 8005ee4:	69da      	ldr	r2, [r3, #28]
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4619      	mov	r1, r3
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	01db      	lsls	r3, r3, #7
 8005ef0:	440b      	add	r3, r1
 8005ef2:	3384      	adds	r3, #132	; 0x84
 8005ef4:	4619      	mov	r1, r3
 8005ef6:	4b58      	ldr	r3, [pc, #352]	; (8006058 <LTDC_SetConfig+0x32c>)
 8005ef8:	4013      	ands	r3, r2
 8005efa:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	69da      	ldr	r2, [r3, #28]
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	6a1b      	ldr	r3, [r3, #32]
 8005f04:	68f9      	ldr	r1, [r7, #12]
 8005f06:	6809      	ldr	r1, [r1, #0]
 8005f08:	4608      	mov	r0, r1
 8005f0a:	6879      	ldr	r1, [r7, #4]
 8005f0c:	01c9      	lsls	r1, r1, #7
 8005f0e:	4401      	add	r1, r0
 8005f10:	3184      	adds	r1, #132	; 0x84
 8005f12:	4313      	orrs	r3, r2
 8005f14:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	461a      	mov	r2, r3
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	01db      	lsls	r3, r3, #7
 8005f20:	4413      	add	r3, r2
 8005f22:	3384      	adds	r3, #132	; 0x84
 8005f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	461a      	mov	r2, r3
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	01db      	lsls	r3, r3, #7
 8005f30:	4413      	add	r3, r2
 8005f32:	3384      	adds	r3, #132	; 0x84
 8005f34:	461a      	mov	r2, r3
 8005f36:	2300      	movs	r3, #0
 8005f38:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	461a      	mov	r2, r3
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	01db      	lsls	r3, r3, #7
 8005f44:	4413      	add	r3, r2
 8005f46:	3384      	adds	r3, #132	; 0x84
 8005f48:	461a      	mov	r2, r3
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f4e:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	691b      	ldr	r3, [r3, #16]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d102      	bne.n	8005f5e <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8005f58:	2304      	movs	r3, #4
 8005f5a:	61fb      	str	r3, [r7, #28]
 8005f5c:	e01b      	b.n	8005f96 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	691b      	ldr	r3, [r3, #16]
 8005f62:	2b01      	cmp	r3, #1
 8005f64:	d102      	bne.n	8005f6c <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8005f66:	2303      	movs	r3, #3
 8005f68:	61fb      	str	r3, [r7, #28]
 8005f6a:	e014      	b.n	8005f96 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	691b      	ldr	r3, [r3, #16]
 8005f70:	2b04      	cmp	r3, #4
 8005f72:	d00b      	beq.n	8005f8c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005f78:	2b02      	cmp	r3, #2
 8005f7a:	d007      	beq.n	8005f8c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005f80:	2b03      	cmp	r3, #3
 8005f82:	d003      	beq.n	8005f8c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005f88:	2b07      	cmp	r3, #7
 8005f8a:	d102      	bne.n	8005f92 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8005f8c:	2302      	movs	r3, #2
 8005f8e:	61fb      	str	r3, [r7, #28]
 8005f90:	e001      	b.n	8005f96 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8005f92:	2301      	movs	r3, #1
 8005f94:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	461a      	mov	r2, r3
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	01db      	lsls	r3, r3, #7
 8005fa0:	4413      	add	r3, r2
 8005fa2:	3384      	adds	r3, #132	; 0x84
 8005fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fa6:	68fa      	ldr	r2, [r7, #12]
 8005fa8:	6812      	ldr	r2, [r2, #0]
 8005faa:	4611      	mov	r1, r2
 8005fac:	687a      	ldr	r2, [r7, #4]
 8005fae:	01d2      	lsls	r2, r2, #7
 8005fb0:	440a      	add	r2, r1
 8005fb2:	3284      	adds	r2, #132	; 0x84
 8005fb4:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8005fb8:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fbe:	69fa      	ldr	r2, [r7, #28]
 8005fc0:	fb02 f303 	mul.w	r3, r2, r3
 8005fc4:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	6859      	ldr	r1, [r3, #4]
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	1acb      	subs	r3, r1, r3
 8005fd0:	69f9      	ldr	r1, [r7, #28]
 8005fd2:	fb01 f303 	mul.w	r3, r1, r3
 8005fd6:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005fd8:	68f9      	ldr	r1, [r7, #12]
 8005fda:	6809      	ldr	r1, [r1, #0]
 8005fdc:	4608      	mov	r0, r1
 8005fde:	6879      	ldr	r1, [r7, #4]
 8005fe0:	01c9      	lsls	r1, r1, #7
 8005fe2:	4401      	add	r1, r0
 8005fe4:	3184      	adds	r1, #132	; 0x84
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	461a      	mov	r2, r3
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	01db      	lsls	r3, r3, #7
 8005ff4:	4413      	add	r3, r2
 8005ff6:	3384      	adds	r3, #132	; 0x84
 8005ff8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4619      	mov	r1, r3
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	01db      	lsls	r3, r3, #7
 8006004:	440b      	add	r3, r1
 8006006:	3384      	adds	r3, #132	; 0x84
 8006008:	4619      	mov	r1, r3
 800600a:	4b14      	ldr	r3, [pc, #80]	; (800605c <LTDC_SetConfig+0x330>)
 800600c:	4013      	ands	r3, r2
 800600e:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	461a      	mov	r2, r3
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	01db      	lsls	r3, r3, #7
 800601a:	4413      	add	r3, r2
 800601c:	3384      	adds	r3, #132	; 0x84
 800601e:	461a      	mov	r2, r3
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006024:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	461a      	mov	r2, r3
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	01db      	lsls	r3, r3, #7
 8006030:	4413      	add	r3, r2
 8006032:	3384      	adds	r3, #132	; 0x84
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	68fa      	ldr	r2, [r7, #12]
 8006038:	6812      	ldr	r2, [r2, #0]
 800603a:	4611      	mov	r1, r2
 800603c:	687a      	ldr	r2, [r7, #4]
 800603e:	01d2      	lsls	r2, r2, #7
 8006040:	440a      	add	r2, r1
 8006042:	3284      	adds	r2, #132	; 0x84
 8006044:	f043 0301 	orr.w	r3, r3, #1
 8006048:	6013      	str	r3, [r2, #0]
}
 800604a:	bf00      	nop
 800604c:	3724      	adds	r7, #36	; 0x24
 800604e:	46bd      	mov	sp, r7
 8006050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006054:	4770      	bx	lr
 8006056:	bf00      	nop
 8006058:	fffff8f8 	.word	0xfffff8f8
 800605c:	fffff800 	.word	0xfffff800

08006060 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b082      	sub	sp, #8
 8006064:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8006066:	2300      	movs	r3, #0
 8006068:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800606a:	4b23      	ldr	r3, [pc, #140]	; (80060f8 <HAL_PWREx_EnableOverDrive+0x98>)
 800606c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800606e:	4a22      	ldr	r2, [pc, #136]	; (80060f8 <HAL_PWREx_EnableOverDrive+0x98>)
 8006070:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006074:	6413      	str	r3, [r2, #64]	; 0x40
 8006076:	4b20      	ldr	r3, [pc, #128]	; (80060f8 <HAL_PWREx_EnableOverDrive+0x98>)
 8006078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800607a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800607e:	603b      	str	r3, [r7, #0]
 8006080:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006082:	4b1e      	ldr	r3, [pc, #120]	; (80060fc <HAL_PWREx_EnableOverDrive+0x9c>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a1d      	ldr	r2, [pc, #116]	; (80060fc <HAL_PWREx_EnableOverDrive+0x9c>)
 8006088:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800608c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800608e:	f7fb fcd9 	bl	8001a44 <HAL_GetTick>
 8006092:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006094:	e009      	b.n	80060aa <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006096:	f7fb fcd5 	bl	8001a44 <HAL_GetTick>
 800609a:	4602      	mov	r2, r0
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	1ad3      	subs	r3, r2, r3
 80060a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80060a4:	d901      	bls.n	80060aa <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80060a6:	2303      	movs	r3, #3
 80060a8:	e022      	b.n	80060f0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80060aa:	4b14      	ldr	r3, [pc, #80]	; (80060fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060b6:	d1ee      	bne.n	8006096 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80060b8:	4b10      	ldr	r3, [pc, #64]	; (80060fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a0f      	ldr	r2, [pc, #60]	; (80060fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80060be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060c2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80060c4:	f7fb fcbe 	bl	8001a44 <HAL_GetTick>
 80060c8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80060ca:	e009      	b.n	80060e0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80060cc:	f7fb fcba 	bl	8001a44 <HAL_GetTick>
 80060d0:	4602      	mov	r2, r0
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	1ad3      	subs	r3, r2, r3
 80060d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80060da:	d901      	bls.n	80060e0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80060dc:	2303      	movs	r3, #3
 80060de:	e007      	b.n	80060f0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80060e0:	4b06      	ldr	r3, [pc, #24]	; (80060fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80060ec:	d1ee      	bne.n	80060cc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80060ee:	2300      	movs	r3, #0
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	3708      	adds	r7, #8
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}
 80060f8:	40023800 	.word	0x40023800
 80060fc:	40007000 	.word	0x40007000

08006100 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b086      	sub	sp, #24
 8006104:	af02      	add	r7, sp, #8
 8006106:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006108:	f7fb fc9c 	bl	8001a44 <HAL_GetTick>
 800610c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d101      	bne.n	8006118 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8006114:	2301      	movs	r3, #1
 8006116:	e067      	b.n	80061e8 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800611e:	b2db      	uxtb	r3, r3
 8006120:	2b00      	cmp	r3, #0
 8006122:	d10b      	bne.n	800613c <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2200      	movs	r2, #0
 8006128:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f7fb f8f7 	bl	8001320 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8006132:	f241 3188 	movw	r1, #5000	; 0x1388
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	f000 f85e 	bl	80061f8 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	689b      	ldr	r3, [r3, #8]
 800614a:	3b01      	subs	r3, #1
 800614c:	021a      	lsls	r2, r3, #8
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	430a      	orrs	r2, r1
 8006154:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800615a:	9300      	str	r3, [sp, #0]
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2200      	movs	r2, #0
 8006160:	2120      	movs	r1, #32
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	f000 f856 	bl	8006214 <QSPI_WaitFlagStateUntilTimeout>
 8006168:	4603      	mov	r3, r0
 800616a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800616c:	7afb      	ldrb	r3, [r7, #11]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d135      	bne.n	80061de <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	681a      	ldr	r2, [r3, #0]
 8006178:	4b1d      	ldr	r3, [pc, #116]	; (80061f0 <HAL_QSPI_Init+0xf0>)
 800617a:	4013      	ands	r3, r2
 800617c:	687a      	ldr	r2, [r7, #4]
 800617e:	6852      	ldr	r2, [r2, #4]
 8006180:	0611      	lsls	r1, r2, #24
 8006182:	687a      	ldr	r2, [r7, #4]
 8006184:	68d2      	ldr	r2, [r2, #12]
 8006186:	4311      	orrs	r1, r2
 8006188:	687a      	ldr	r2, [r7, #4]
 800618a:	69d2      	ldr	r2, [r2, #28]
 800618c:	4311      	orrs	r1, r2
 800618e:	687a      	ldr	r2, [r7, #4]
 8006190:	6a12      	ldr	r2, [r2, #32]
 8006192:	4311      	orrs	r1, r2
 8006194:	687a      	ldr	r2, [r7, #4]
 8006196:	6812      	ldr	r2, [r2, #0]
 8006198:	430b      	orrs	r3, r1
 800619a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	685a      	ldr	r2, [r3, #4]
 80061a2:	4b14      	ldr	r3, [pc, #80]	; (80061f4 <HAL_QSPI_Init+0xf4>)
 80061a4:	4013      	ands	r3, r2
 80061a6:	687a      	ldr	r2, [r7, #4]
 80061a8:	6912      	ldr	r2, [r2, #16]
 80061aa:	0411      	lsls	r1, r2, #16
 80061ac:	687a      	ldr	r2, [r7, #4]
 80061ae:	6952      	ldr	r2, [r2, #20]
 80061b0:	4311      	orrs	r1, r2
 80061b2:	687a      	ldr	r2, [r7, #4]
 80061b4:	6992      	ldr	r2, [r2, #24]
 80061b6:	4311      	orrs	r1, r2
 80061b8:	687a      	ldr	r2, [r7, #4]
 80061ba:	6812      	ldr	r2, [r2, #0]
 80061bc:	430b      	orrs	r3, r1
 80061be:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	681a      	ldr	r2, [r3, #0]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f042 0201 	orr.w	r2, r2, #1
 80061ce:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2200      	movs	r2, #0
 80061d4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2201      	movs	r2, #1
 80061da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2200      	movs	r2, #0
 80061e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80061e6:	7afb      	ldrb	r3, [r7, #11]
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	3710      	adds	r7, #16
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bd80      	pop	{r7, pc}
 80061f0:	00ffff2f 	.word	0x00ffff2f
 80061f4:	ffe0f8fe 	.word	0xffe0f8fe

080061f8 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b083      	sub	sp, #12
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
 8006200:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	683a      	ldr	r2, [r7, #0]
 8006206:	649a      	str	r2, [r3, #72]	; 0x48
}
 8006208:	bf00      	nop
 800620a:	370c      	adds	r7, #12
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr

08006214 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b084      	sub	sp, #16
 8006218:	af00      	add	r7, sp, #0
 800621a:	60f8      	str	r0, [r7, #12]
 800621c:	60b9      	str	r1, [r7, #8]
 800621e:	603b      	str	r3, [r7, #0]
 8006220:	4613      	mov	r3, r2
 8006222:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006224:	e01a      	b.n	800625c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006226:	69bb      	ldr	r3, [r7, #24]
 8006228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800622c:	d016      	beq.n	800625c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800622e:	f7fb fc09 	bl	8001a44 <HAL_GetTick>
 8006232:	4602      	mov	r2, r0
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	1ad3      	subs	r3, r2, r3
 8006238:	69ba      	ldr	r2, [r7, #24]
 800623a:	429a      	cmp	r2, r3
 800623c:	d302      	bcc.n	8006244 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800623e:	69bb      	ldr	r3, [r7, #24]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d10b      	bne.n	800625c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2204      	movs	r2, #4
 8006248:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006250:	f043 0201 	orr.w	r2, r3, #1
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8006258:	2301      	movs	r3, #1
 800625a:	e00e      	b.n	800627a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	689a      	ldr	r2, [r3, #8]
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	4013      	ands	r3, r2
 8006266:	2b00      	cmp	r3, #0
 8006268:	bf14      	ite	ne
 800626a:	2301      	movne	r3, #1
 800626c:	2300      	moveq	r3, #0
 800626e:	b2db      	uxtb	r3, r3
 8006270:	461a      	mov	r2, r3
 8006272:	79fb      	ldrb	r3, [r7, #7]
 8006274:	429a      	cmp	r2, r3
 8006276:	d1d6      	bne.n	8006226 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006278:	2300      	movs	r3, #0
}
 800627a:	4618      	mov	r0, r3
 800627c:	3710      	adds	r7, #16
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}
	...

08006284 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b086      	sub	sp, #24
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800628c:	2300      	movs	r3, #0
 800628e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d101      	bne.n	800629a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006296:	2301      	movs	r3, #1
 8006298:	e29b      	b.n	80067d2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f003 0301 	and.w	r3, r3, #1
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	f000 8087 	beq.w	80063b6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80062a8:	4b96      	ldr	r3, [pc, #600]	; (8006504 <HAL_RCC_OscConfig+0x280>)
 80062aa:	689b      	ldr	r3, [r3, #8]
 80062ac:	f003 030c 	and.w	r3, r3, #12
 80062b0:	2b04      	cmp	r3, #4
 80062b2:	d00c      	beq.n	80062ce <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80062b4:	4b93      	ldr	r3, [pc, #588]	; (8006504 <HAL_RCC_OscConfig+0x280>)
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	f003 030c 	and.w	r3, r3, #12
 80062bc:	2b08      	cmp	r3, #8
 80062be:	d112      	bne.n	80062e6 <HAL_RCC_OscConfig+0x62>
 80062c0:	4b90      	ldr	r3, [pc, #576]	; (8006504 <HAL_RCC_OscConfig+0x280>)
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80062cc:	d10b      	bne.n	80062e6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062ce:	4b8d      	ldr	r3, [pc, #564]	; (8006504 <HAL_RCC_OscConfig+0x280>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d06c      	beq.n	80063b4 <HAL_RCC_OscConfig+0x130>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d168      	bne.n	80063b4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80062e2:	2301      	movs	r3, #1
 80062e4:	e275      	b.n	80067d2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062ee:	d106      	bne.n	80062fe <HAL_RCC_OscConfig+0x7a>
 80062f0:	4b84      	ldr	r3, [pc, #528]	; (8006504 <HAL_RCC_OscConfig+0x280>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a83      	ldr	r2, [pc, #524]	; (8006504 <HAL_RCC_OscConfig+0x280>)
 80062f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062fa:	6013      	str	r3, [r2, #0]
 80062fc:	e02e      	b.n	800635c <HAL_RCC_OscConfig+0xd8>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d10c      	bne.n	8006320 <HAL_RCC_OscConfig+0x9c>
 8006306:	4b7f      	ldr	r3, [pc, #508]	; (8006504 <HAL_RCC_OscConfig+0x280>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a7e      	ldr	r2, [pc, #504]	; (8006504 <HAL_RCC_OscConfig+0x280>)
 800630c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006310:	6013      	str	r3, [r2, #0]
 8006312:	4b7c      	ldr	r3, [pc, #496]	; (8006504 <HAL_RCC_OscConfig+0x280>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4a7b      	ldr	r2, [pc, #492]	; (8006504 <HAL_RCC_OscConfig+0x280>)
 8006318:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800631c:	6013      	str	r3, [r2, #0]
 800631e:	e01d      	b.n	800635c <HAL_RCC_OscConfig+0xd8>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006328:	d10c      	bne.n	8006344 <HAL_RCC_OscConfig+0xc0>
 800632a:	4b76      	ldr	r3, [pc, #472]	; (8006504 <HAL_RCC_OscConfig+0x280>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a75      	ldr	r2, [pc, #468]	; (8006504 <HAL_RCC_OscConfig+0x280>)
 8006330:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006334:	6013      	str	r3, [r2, #0]
 8006336:	4b73      	ldr	r3, [pc, #460]	; (8006504 <HAL_RCC_OscConfig+0x280>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4a72      	ldr	r2, [pc, #456]	; (8006504 <HAL_RCC_OscConfig+0x280>)
 800633c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006340:	6013      	str	r3, [r2, #0]
 8006342:	e00b      	b.n	800635c <HAL_RCC_OscConfig+0xd8>
 8006344:	4b6f      	ldr	r3, [pc, #444]	; (8006504 <HAL_RCC_OscConfig+0x280>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a6e      	ldr	r2, [pc, #440]	; (8006504 <HAL_RCC_OscConfig+0x280>)
 800634a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800634e:	6013      	str	r3, [r2, #0]
 8006350:	4b6c      	ldr	r3, [pc, #432]	; (8006504 <HAL_RCC_OscConfig+0x280>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a6b      	ldr	r2, [pc, #428]	; (8006504 <HAL_RCC_OscConfig+0x280>)
 8006356:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800635a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d013      	beq.n	800638c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006364:	f7fb fb6e 	bl	8001a44 <HAL_GetTick>
 8006368:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800636a:	e008      	b.n	800637e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800636c:	f7fb fb6a 	bl	8001a44 <HAL_GetTick>
 8006370:	4602      	mov	r2, r0
 8006372:	693b      	ldr	r3, [r7, #16]
 8006374:	1ad3      	subs	r3, r2, r3
 8006376:	2b64      	cmp	r3, #100	; 0x64
 8006378:	d901      	bls.n	800637e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800637a:	2303      	movs	r3, #3
 800637c:	e229      	b.n	80067d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800637e:	4b61      	ldr	r3, [pc, #388]	; (8006504 <HAL_RCC_OscConfig+0x280>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006386:	2b00      	cmp	r3, #0
 8006388:	d0f0      	beq.n	800636c <HAL_RCC_OscConfig+0xe8>
 800638a:	e014      	b.n	80063b6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800638c:	f7fb fb5a 	bl	8001a44 <HAL_GetTick>
 8006390:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006392:	e008      	b.n	80063a6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006394:	f7fb fb56 	bl	8001a44 <HAL_GetTick>
 8006398:	4602      	mov	r2, r0
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	1ad3      	subs	r3, r2, r3
 800639e:	2b64      	cmp	r3, #100	; 0x64
 80063a0:	d901      	bls.n	80063a6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80063a2:	2303      	movs	r3, #3
 80063a4:	e215      	b.n	80067d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80063a6:	4b57      	ldr	r3, [pc, #348]	; (8006504 <HAL_RCC_OscConfig+0x280>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d1f0      	bne.n	8006394 <HAL_RCC_OscConfig+0x110>
 80063b2:	e000      	b.n	80063b6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f003 0302 	and.w	r3, r3, #2
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d069      	beq.n	8006496 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80063c2:	4b50      	ldr	r3, [pc, #320]	; (8006504 <HAL_RCC_OscConfig+0x280>)
 80063c4:	689b      	ldr	r3, [r3, #8]
 80063c6:	f003 030c 	and.w	r3, r3, #12
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d00b      	beq.n	80063e6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80063ce:	4b4d      	ldr	r3, [pc, #308]	; (8006504 <HAL_RCC_OscConfig+0x280>)
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	f003 030c 	and.w	r3, r3, #12
 80063d6:	2b08      	cmp	r3, #8
 80063d8:	d11c      	bne.n	8006414 <HAL_RCC_OscConfig+0x190>
 80063da:	4b4a      	ldr	r3, [pc, #296]	; (8006504 <HAL_RCC_OscConfig+0x280>)
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d116      	bne.n	8006414 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80063e6:	4b47      	ldr	r3, [pc, #284]	; (8006504 <HAL_RCC_OscConfig+0x280>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f003 0302 	and.w	r3, r3, #2
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d005      	beq.n	80063fe <HAL_RCC_OscConfig+0x17a>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	68db      	ldr	r3, [r3, #12]
 80063f6:	2b01      	cmp	r3, #1
 80063f8:	d001      	beq.n	80063fe <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80063fa:	2301      	movs	r3, #1
 80063fc:	e1e9      	b.n	80067d2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063fe:	4b41      	ldr	r3, [pc, #260]	; (8006504 <HAL_RCC_OscConfig+0x280>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	691b      	ldr	r3, [r3, #16]
 800640a:	00db      	lsls	r3, r3, #3
 800640c:	493d      	ldr	r1, [pc, #244]	; (8006504 <HAL_RCC_OscConfig+0x280>)
 800640e:	4313      	orrs	r3, r2
 8006410:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006412:	e040      	b.n	8006496 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	68db      	ldr	r3, [r3, #12]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d023      	beq.n	8006464 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800641c:	4b39      	ldr	r3, [pc, #228]	; (8006504 <HAL_RCC_OscConfig+0x280>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a38      	ldr	r2, [pc, #224]	; (8006504 <HAL_RCC_OscConfig+0x280>)
 8006422:	f043 0301 	orr.w	r3, r3, #1
 8006426:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006428:	f7fb fb0c 	bl	8001a44 <HAL_GetTick>
 800642c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800642e:	e008      	b.n	8006442 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006430:	f7fb fb08 	bl	8001a44 <HAL_GetTick>
 8006434:	4602      	mov	r2, r0
 8006436:	693b      	ldr	r3, [r7, #16]
 8006438:	1ad3      	subs	r3, r2, r3
 800643a:	2b02      	cmp	r3, #2
 800643c:	d901      	bls.n	8006442 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800643e:	2303      	movs	r3, #3
 8006440:	e1c7      	b.n	80067d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006442:	4b30      	ldr	r3, [pc, #192]	; (8006504 <HAL_RCC_OscConfig+0x280>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f003 0302 	and.w	r3, r3, #2
 800644a:	2b00      	cmp	r3, #0
 800644c:	d0f0      	beq.n	8006430 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800644e:	4b2d      	ldr	r3, [pc, #180]	; (8006504 <HAL_RCC_OscConfig+0x280>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	691b      	ldr	r3, [r3, #16]
 800645a:	00db      	lsls	r3, r3, #3
 800645c:	4929      	ldr	r1, [pc, #164]	; (8006504 <HAL_RCC_OscConfig+0x280>)
 800645e:	4313      	orrs	r3, r2
 8006460:	600b      	str	r3, [r1, #0]
 8006462:	e018      	b.n	8006496 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006464:	4b27      	ldr	r3, [pc, #156]	; (8006504 <HAL_RCC_OscConfig+0x280>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a26      	ldr	r2, [pc, #152]	; (8006504 <HAL_RCC_OscConfig+0x280>)
 800646a:	f023 0301 	bic.w	r3, r3, #1
 800646e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006470:	f7fb fae8 	bl	8001a44 <HAL_GetTick>
 8006474:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006476:	e008      	b.n	800648a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006478:	f7fb fae4 	bl	8001a44 <HAL_GetTick>
 800647c:	4602      	mov	r2, r0
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	1ad3      	subs	r3, r2, r3
 8006482:	2b02      	cmp	r3, #2
 8006484:	d901      	bls.n	800648a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006486:	2303      	movs	r3, #3
 8006488:	e1a3      	b.n	80067d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800648a:	4b1e      	ldr	r3, [pc, #120]	; (8006504 <HAL_RCC_OscConfig+0x280>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f003 0302 	and.w	r3, r3, #2
 8006492:	2b00      	cmp	r3, #0
 8006494:	d1f0      	bne.n	8006478 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f003 0308 	and.w	r3, r3, #8
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d038      	beq.n	8006514 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	695b      	ldr	r3, [r3, #20]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d019      	beq.n	80064de <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80064aa:	4b16      	ldr	r3, [pc, #88]	; (8006504 <HAL_RCC_OscConfig+0x280>)
 80064ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064ae:	4a15      	ldr	r2, [pc, #84]	; (8006504 <HAL_RCC_OscConfig+0x280>)
 80064b0:	f043 0301 	orr.w	r3, r3, #1
 80064b4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064b6:	f7fb fac5 	bl	8001a44 <HAL_GetTick>
 80064ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80064bc:	e008      	b.n	80064d0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80064be:	f7fb fac1 	bl	8001a44 <HAL_GetTick>
 80064c2:	4602      	mov	r2, r0
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	1ad3      	subs	r3, r2, r3
 80064c8:	2b02      	cmp	r3, #2
 80064ca:	d901      	bls.n	80064d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80064cc:	2303      	movs	r3, #3
 80064ce:	e180      	b.n	80067d2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80064d0:	4b0c      	ldr	r3, [pc, #48]	; (8006504 <HAL_RCC_OscConfig+0x280>)
 80064d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064d4:	f003 0302 	and.w	r3, r3, #2
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d0f0      	beq.n	80064be <HAL_RCC_OscConfig+0x23a>
 80064dc:	e01a      	b.n	8006514 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80064de:	4b09      	ldr	r3, [pc, #36]	; (8006504 <HAL_RCC_OscConfig+0x280>)
 80064e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064e2:	4a08      	ldr	r2, [pc, #32]	; (8006504 <HAL_RCC_OscConfig+0x280>)
 80064e4:	f023 0301 	bic.w	r3, r3, #1
 80064e8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064ea:	f7fb faab 	bl	8001a44 <HAL_GetTick>
 80064ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80064f0:	e00a      	b.n	8006508 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80064f2:	f7fb faa7 	bl	8001a44 <HAL_GetTick>
 80064f6:	4602      	mov	r2, r0
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	1ad3      	subs	r3, r2, r3
 80064fc:	2b02      	cmp	r3, #2
 80064fe:	d903      	bls.n	8006508 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006500:	2303      	movs	r3, #3
 8006502:	e166      	b.n	80067d2 <HAL_RCC_OscConfig+0x54e>
 8006504:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006508:	4b92      	ldr	r3, [pc, #584]	; (8006754 <HAL_RCC_OscConfig+0x4d0>)
 800650a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800650c:	f003 0302 	and.w	r3, r3, #2
 8006510:	2b00      	cmp	r3, #0
 8006512:	d1ee      	bne.n	80064f2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f003 0304 	and.w	r3, r3, #4
 800651c:	2b00      	cmp	r3, #0
 800651e:	f000 80a4 	beq.w	800666a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006522:	4b8c      	ldr	r3, [pc, #560]	; (8006754 <HAL_RCC_OscConfig+0x4d0>)
 8006524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800652a:	2b00      	cmp	r3, #0
 800652c:	d10d      	bne.n	800654a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800652e:	4b89      	ldr	r3, [pc, #548]	; (8006754 <HAL_RCC_OscConfig+0x4d0>)
 8006530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006532:	4a88      	ldr	r2, [pc, #544]	; (8006754 <HAL_RCC_OscConfig+0x4d0>)
 8006534:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006538:	6413      	str	r3, [r2, #64]	; 0x40
 800653a:	4b86      	ldr	r3, [pc, #536]	; (8006754 <HAL_RCC_OscConfig+0x4d0>)
 800653c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800653e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006542:	60bb      	str	r3, [r7, #8]
 8006544:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006546:	2301      	movs	r3, #1
 8006548:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800654a:	4b83      	ldr	r3, [pc, #524]	; (8006758 <HAL_RCC_OscConfig+0x4d4>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006552:	2b00      	cmp	r3, #0
 8006554:	d118      	bne.n	8006588 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8006556:	4b80      	ldr	r3, [pc, #512]	; (8006758 <HAL_RCC_OscConfig+0x4d4>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a7f      	ldr	r2, [pc, #508]	; (8006758 <HAL_RCC_OscConfig+0x4d4>)
 800655c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006560:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006562:	f7fb fa6f 	bl	8001a44 <HAL_GetTick>
 8006566:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006568:	e008      	b.n	800657c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800656a:	f7fb fa6b 	bl	8001a44 <HAL_GetTick>
 800656e:	4602      	mov	r2, r0
 8006570:	693b      	ldr	r3, [r7, #16]
 8006572:	1ad3      	subs	r3, r2, r3
 8006574:	2b64      	cmp	r3, #100	; 0x64
 8006576:	d901      	bls.n	800657c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006578:	2303      	movs	r3, #3
 800657a:	e12a      	b.n	80067d2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800657c:	4b76      	ldr	r3, [pc, #472]	; (8006758 <HAL_RCC_OscConfig+0x4d4>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006584:	2b00      	cmp	r3, #0
 8006586:	d0f0      	beq.n	800656a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	689b      	ldr	r3, [r3, #8]
 800658c:	2b01      	cmp	r3, #1
 800658e:	d106      	bne.n	800659e <HAL_RCC_OscConfig+0x31a>
 8006590:	4b70      	ldr	r3, [pc, #448]	; (8006754 <HAL_RCC_OscConfig+0x4d0>)
 8006592:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006594:	4a6f      	ldr	r2, [pc, #444]	; (8006754 <HAL_RCC_OscConfig+0x4d0>)
 8006596:	f043 0301 	orr.w	r3, r3, #1
 800659a:	6713      	str	r3, [r2, #112]	; 0x70
 800659c:	e02d      	b.n	80065fa <HAL_RCC_OscConfig+0x376>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	689b      	ldr	r3, [r3, #8]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d10c      	bne.n	80065c0 <HAL_RCC_OscConfig+0x33c>
 80065a6:	4b6b      	ldr	r3, [pc, #428]	; (8006754 <HAL_RCC_OscConfig+0x4d0>)
 80065a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065aa:	4a6a      	ldr	r2, [pc, #424]	; (8006754 <HAL_RCC_OscConfig+0x4d0>)
 80065ac:	f023 0301 	bic.w	r3, r3, #1
 80065b0:	6713      	str	r3, [r2, #112]	; 0x70
 80065b2:	4b68      	ldr	r3, [pc, #416]	; (8006754 <HAL_RCC_OscConfig+0x4d0>)
 80065b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065b6:	4a67      	ldr	r2, [pc, #412]	; (8006754 <HAL_RCC_OscConfig+0x4d0>)
 80065b8:	f023 0304 	bic.w	r3, r3, #4
 80065bc:	6713      	str	r3, [r2, #112]	; 0x70
 80065be:	e01c      	b.n	80065fa <HAL_RCC_OscConfig+0x376>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	689b      	ldr	r3, [r3, #8]
 80065c4:	2b05      	cmp	r3, #5
 80065c6:	d10c      	bne.n	80065e2 <HAL_RCC_OscConfig+0x35e>
 80065c8:	4b62      	ldr	r3, [pc, #392]	; (8006754 <HAL_RCC_OscConfig+0x4d0>)
 80065ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065cc:	4a61      	ldr	r2, [pc, #388]	; (8006754 <HAL_RCC_OscConfig+0x4d0>)
 80065ce:	f043 0304 	orr.w	r3, r3, #4
 80065d2:	6713      	str	r3, [r2, #112]	; 0x70
 80065d4:	4b5f      	ldr	r3, [pc, #380]	; (8006754 <HAL_RCC_OscConfig+0x4d0>)
 80065d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065d8:	4a5e      	ldr	r2, [pc, #376]	; (8006754 <HAL_RCC_OscConfig+0x4d0>)
 80065da:	f043 0301 	orr.w	r3, r3, #1
 80065de:	6713      	str	r3, [r2, #112]	; 0x70
 80065e0:	e00b      	b.n	80065fa <HAL_RCC_OscConfig+0x376>
 80065e2:	4b5c      	ldr	r3, [pc, #368]	; (8006754 <HAL_RCC_OscConfig+0x4d0>)
 80065e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065e6:	4a5b      	ldr	r2, [pc, #364]	; (8006754 <HAL_RCC_OscConfig+0x4d0>)
 80065e8:	f023 0301 	bic.w	r3, r3, #1
 80065ec:	6713      	str	r3, [r2, #112]	; 0x70
 80065ee:	4b59      	ldr	r3, [pc, #356]	; (8006754 <HAL_RCC_OscConfig+0x4d0>)
 80065f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065f2:	4a58      	ldr	r2, [pc, #352]	; (8006754 <HAL_RCC_OscConfig+0x4d0>)
 80065f4:	f023 0304 	bic.w	r3, r3, #4
 80065f8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	689b      	ldr	r3, [r3, #8]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d015      	beq.n	800662e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006602:	f7fb fa1f 	bl	8001a44 <HAL_GetTick>
 8006606:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006608:	e00a      	b.n	8006620 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800660a:	f7fb fa1b 	bl	8001a44 <HAL_GetTick>
 800660e:	4602      	mov	r2, r0
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	1ad3      	subs	r3, r2, r3
 8006614:	f241 3288 	movw	r2, #5000	; 0x1388
 8006618:	4293      	cmp	r3, r2
 800661a:	d901      	bls.n	8006620 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800661c:	2303      	movs	r3, #3
 800661e:	e0d8      	b.n	80067d2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006620:	4b4c      	ldr	r3, [pc, #304]	; (8006754 <HAL_RCC_OscConfig+0x4d0>)
 8006622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006624:	f003 0302 	and.w	r3, r3, #2
 8006628:	2b00      	cmp	r3, #0
 800662a:	d0ee      	beq.n	800660a <HAL_RCC_OscConfig+0x386>
 800662c:	e014      	b.n	8006658 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800662e:	f7fb fa09 	bl	8001a44 <HAL_GetTick>
 8006632:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006634:	e00a      	b.n	800664c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006636:	f7fb fa05 	bl	8001a44 <HAL_GetTick>
 800663a:	4602      	mov	r2, r0
 800663c:	693b      	ldr	r3, [r7, #16]
 800663e:	1ad3      	subs	r3, r2, r3
 8006640:	f241 3288 	movw	r2, #5000	; 0x1388
 8006644:	4293      	cmp	r3, r2
 8006646:	d901      	bls.n	800664c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006648:	2303      	movs	r3, #3
 800664a:	e0c2      	b.n	80067d2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800664c:	4b41      	ldr	r3, [pc, #260]	; (8006754 <HAL_RCC_OscConfig+0x4d0>)
 800664e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006650:	f003 0302 	and.w	r3, r3, #2
 8006654:	2b00      	cmp	r3, #0
 8006656:	d1ee      	bne.n	8006636 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006658:	7dfb      	ldrb	r3, [r7, #23]
 800665a:	2b01      	cmp	r3, #1
 800665c:	d105      	bne.n	800666a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800665e:	4b3d      	ldr	r3, [pc, #244]	; (8006754 <HAL_RCC_OscConfig+0x4d0>)
 8006660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006662:	4a3c      	ldr	r2, [pc, #240]	; (8006754 <HAL_RCC_OscConfig+0x4d0>)
 8006664:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006668:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	699b      	ldr	r3, [r3, #24]
 800666e:	2b00      	cmp	r3, #0
 8006670:	f000 80ae 	beq.w	80067d0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006674:	4b37      	ldr	r3, [pc, #220]	; (8006754 <HAL_RCC_OscConfig+0x4d0>)
 8006676:	689b      	ldr	r3, [r3, #8]
 8006678:	f003 030c 	and.w	r3, r3, #12
 800667c:	2b08      	cmp	r3, #8
 800667e:	d06d      	beq.n	800675c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	699b      	ldr	r3, [r3, #24]
 8006684:	2b02      	cmp	r3, #2
 8006686:	d14b      	bne.n	8006720 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006688:	4b32      	ldr	r3, [pc, #200]	; (8006754 <HAL_RCC_OscConfig+0x4d0>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a31      	ldr	r2, [pc, #196]	; (8006754 <HAL_RCC_OscConfig+0x4d0>)
 800668e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006692:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006694:	f7fb f9d6 	bl	8001a44 <HAL_GetTick>
 8006698:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800669a:	e008      	b.n	80066ae <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800669c:	f7fb f9d2 	bl	8001a44 <HAL_GetTick>
 80066a0:	4602      	mov	r2, r0
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	1ad3      	subs	r3, r2, r3
 80066a6:	2b02      	cmp	r3, #2
 80066a8:	d901      	bls.n	80066ae <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80066aa:	2303      	movs	r3, #3
 80066ac:	e091      	b.n	80067d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066ae:	4b29      	ldr	r3, [pc, #164]	; (8006754 <HAL_RCC_OscConfig+0x4d0>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d1f0      	bne.n	800669c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	69da      	ldr	r2, [r3, #28]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6a1b      	ldr	r3, [r3, #32]
 80066c2:	431a      	orrs	r2, r3
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066c8:	019b      	lsls	r3, r3, #6
 80066ca:	431a      	orrs	r2, r3
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066d0:	085b      	lsrs	r3, r3, #1
 80066d2:	3b01      	subs	r3, #1
 80066d4:	041b      	lsls	r3, r3, #16
 80066d6:	431a      	orrs	r2, r3
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066dc:	061b      	lsls	r3, r3, #24
 80066de:	431a      	orrs	r2, r3
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066e4:	071b      	lsls	r3, r3, #28
 80066e6:	491b      	ldr	r1, [pc, #108]	; (8006754 <HAL_RCC_OscConfig+0x4d0>)
 80066e8:	4313      	orrs	r3, r2
 80066ea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80066ec:	4b19      	ldr	r3, [pc, #100]	; (8006754 <HAL_RCC_OscConfig+0x4d0>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a18      	ldr	r2, [pc, #96]	; (8006754 <HAL_RCC_OscConfig+0x4d0>)
 80066f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80066f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066f8:	f7fb f9a4 	bl	8001a44 <HAL_GetTick>
 80066fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80066fe:	e008      	b.n	8006712 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006700:	f7fb f9a0 	bl	8001a44 <HAL_GetTick>
 8006704:	4602      	mov	r2, r0
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	1ad3      	subs	r3, r2, r3
 800670a:	2b02      	cmp	r3, #2
 800670c:	d901      	bls.n	8006712 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800670e:	2303      	movs	r3, #3
 8006710:	e05f      	b.n	80067d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006712:	4b10      	ldr	r3, [pc, #64]	; (8006754 <HAL_RCC_OscConfig+0x4d0>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800671a:	2b00      	cmp	r3, #0
 800671c:	d0f0      	beq.n	8006700 <HAL_RCC_OscConfig+0x47c>
 800671e:	e057      	b.n	80067d0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006720:	4b0c      	ldr	r3, [pc, #48]	; (8006754 <HAL_RCC_OscConfig+0x4d0>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	4a0b      	ldr	r2, [pc, #44]	; (8006754 <HAL_RCC_OscConfig+0x4d0>)
 8006726:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800672a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800672c:	f7fb f98a 	bl	8001a44 <HAL_GetTick>
 8006730:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006732:	e008      	b.n	8006746 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006734:	f7fb f986 	bl	8001a44 <HAL_GetTick>
 8006738:	4602      	mov	r2, r0
 800673a:	693b      	ldr	r3, [r7, #16]
 800673c:	1ad3      	subs	r3, r2, r3
 800673e:	2b02      	cmp	r3, #2
 8006740:	d901      	bls.n	8006746 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8006742:	2303      	movs	r3, #3
 8006744:	e045      	b.n	80067d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006746:	4b03      	ldr	r3, [pc, #12]	; (8006754 <HAL_RCC_OscConfig+0x4d0>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800674e:	2b00      	cmp	r3, #0
 8006750:	d1f0      	bne.n	8006734 <HAL_RCC_OscConfig+0x4b0>
 8006752:	e03d      	b.n	80067d0 <HAL_RCC_OscConfig+0x54c>
 8006754:	40023800 	.word	0x40023800
 8006758:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800675c:	4b1f      	ldr	r3, [pc, #124]	; (80067dc <HAL_RCC_OscConfig+0x558>)
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	699b      	ldr	r3, [r3, #24]
 8006766:	2b01      	cmp	r3, #1
 8006768:	d030      	beq.n	80067cc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006774:	429a      	cmp	r2, r3
 8006776:	d129      	bne.n	80067cc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006782:	429a      	cmp	r2, r3
 8006784:	d122      	bne.n	80067cc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006786:	68fa      	ldr	r2, [r7, #12]
 8006788:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800678c:	4013      	ands	r3, r2
 800678e:	687a      	ldr	r2, [r7, #4]
 8006790:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006792:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006794:	4293      	cmp	r3, r2
 8006796:	d119      	bne.n	80067cc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067a2:	085b      	lsrs	r3, r3, #1
 80067a4:	3b01      	subs	r3, #1
 80067a6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80067a8:	429a      	cmp	r2, r3
 80067aa:	d10f      	bne.n	80067cc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067b6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80067b8:	429a      	cmp	r2, r3
 80067ba:	d107      	bne.n	80067cc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067c6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80067c8:	429a      	cmp	r2, r3
 80067ca:	d001      	beq.n	80067d0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80067cc:	2301      	movs	r3, #1
 80067ce:	e000      	b.n	80067d2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80067d0:	2300      	movs	r3, #0
}
 80067d2:	4618      	mov	r0, r3
 80067d4:	3718      	adds	r7, #24
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}
 80067da:	bf00      	nop
 80067dc:	40023800 	.word	0x40023800

080067e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b084      	sub	sp, #16
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
 80067e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80067ea:	2300      	movs	r3, #0
 80067ec:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d101      	bne.n	80067f8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80067f4:	2301      	movs	r3, #1
 80067f6:	e0d0      	b.n	800699a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80067f8:	4b6a      	ldr	r3, [pc, #424]	; (80069a4 <HAL_RCC_ClockConfig+0x1c4>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f003 030f 	and.w	r3, r3, #15
 8006800:	683a      	ldr	r2, [r7, #0]
 8006802:	429a      	cmp	r2, r3
 8006804:	d910      	bls.n	8006828 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006806:	4b67      	ldr	r3, [pc, #412]	; (80069a4 <HAL_RCC_ClockConfig+0x1c4>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f023 020f 	bic.w	r2, r3, #15
 800680e:	4965      	ldr	r1, [pc, #404]	; (80069a4 <HAL_RCC_ClockConfig+0x1c4>)
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	4313      	orrs	r3, r2
 8006814:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006816:	4b63      	ldr	r3, [pc, #396]	; (80069a4 <HAL_RCC_ClockConfig+0x1c4>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f003 030f 	and.w	r3, r3, #15
 800681e:	683a      	ldr	r2, [r7, #0]
 8006820:	429a      	cmp	r2, r3
 8006822:	d001      	beq.n	8006828 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006824:	2301      	movs	r3, #1
 8006826:	e0b8      	b.n	800699a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f003 0302 	and.w	r3, r3, #2
 8006830:	2b00      	cmp	r3, #0
 8006832:	d020      	beq.n	8006876 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f003 0304 	and.w	r3, r3, #4
 800683c:	2b00      	cmp	r3, #0
 800683e:	d005      	beq.n	800684c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006840:	4b59      	ldr	r3, [pc, #356]	; (80069a8 <HAL_RCC_ClockConfig+0x1c8>)
 8006842:	689b      	ldr	r3, [r3, #8]
 8006844:	4a58      	ldr	r2, [pc, #352]	; (80069a8 <HAL_RCC_ClockConfig+0x1c8>)
 8006846:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800684a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f003 0308 	and.w	r3, r3, #8
 8006854:	2b00      	cmp	r3, #0
 8006856:	d005      	beq.n	8006864 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006858:	4b53      	ldr	r3, [pc, #332]	; (80069a8 <HAL_RCC_ClockConfig+0x1c8>)
 800685a:	689b      	ldr	r3, [r3, #8]
 800685c:	4a52      	ldr	r2, [pc, #328]	; (80069a8 <HAL_RCC_ClockConfig+0x1c8>)
 800685e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006862:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006864:	4b50      	ldr	r3, [pc, #320]	; (80069a8 <HAL_RCC_ClockConfig+0x1c8>)
 8006866:	689b      	ldr	r3, [r3, #8]
 8006868:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	689b      	ldr	r3, [r3, #8]
 8006870:	494d      	ldr	r1, [pc, #308]	; (80069a8 <HAL_RCC_ClockConfig+0x1c8>)
 8006872:	4313      	orrs	r3, r2
 8006874:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f003 0301 	and.w	r3, r3, #1
 800687e:	2b00      	cmp	r3, #0
 8006880:	d040      	beq.n	8006904 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	2b01      	cmp	r3, #1
 8006888:	d107      	bne.n	800689a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800688a:	4b47      	ldr	r3, [pc, #284]	; (80069a8 <HAL_RCC_ClockConfig+0x1c8>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006892:	2b00      	cmp	r3, #0
 8006894:	d115      	bne.n	80068c2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006896:	2301      	movs	r3, #1
 8006898:	e07f      	b.n	800699a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	2b02      	cmp	r3, #2
 80068a0:	d107      	bne.n	80068b2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80068a2:	4b41      	ldr	r3, [pc, #260]	; (80069a8 <HAL_RCC_ClockConfig+0x1c8>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d109      	bne.n	80068c2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80068ae:	2301      	movs	r3, #1
 80068b0:	e073      	b.n	800699a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068b2:	4b3d      	ldr	r3, [pc, #244]	; (80069a8 <HAL_RCC_ClockConfig+0x1c8>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f003 0302 	and.w	r3, r3, #2
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d101      	bne.n	80068c2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80068be:	2301      	movs	r3, #1
 80068c0:	e06b      	b.n	800699a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80068c2:	4b39      	ldr	r3, [pc, #228]	; (80069a8 <HAL_RCC_ClockConfig+0x1c8>)
 80068c4:	689b      	ldr	r3, [r3, #8]
 80068c6:	f023 0203 	bic.w	r2, r3, #3
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	4936      	ldr	r1, [pc, #216]	; (80069a8 <HAL_RCC_ClockConfig+0x1c8>)
 80068d0:	4313      	orrs	r3, r2
 80068d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80068d4:	f7fb f8b6 	bl	8001a44 <HAL_GetTick>
 80068d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80068da:	e00a      	b.n	80068f2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80068dc:	f7fb f8b2 	bl	8001a44 <HAL_GetTick>
 80068e0:	4602      	mov	r2, r0
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	1ad3      	subs	r3, r2, r3
 80068e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d901      	bls.n	80068f2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80068ee:	2303      	movs	r3, #3
 80068f0:	e053      	b.n	800699a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80068f2:	4b2d      	ldr	r3, [pc, #180]	; (80069a8 <HAL_RCC_ClockConfig+0x1c8>)
 80068f4:	689b      	ldr	r3, [r3, #8]
 80068f6:	f003 020c 	and.w	r2, r3, #12
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	685b      	ldr	r3, [r3, #4]
 80068fe:	009b      	lsls	r3, r3, #2
 8006900:	429a      	cmp	r2, r3
 8006902:	d1eb      	bne.n	80068dc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006904:	4b27      	ldr	r3, [pc, #156]	; (80069a4 <HAL_RCC_ClockConfig+0x1c4>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f003 030f 	and.w	r3, r3, #15
 800690c:	683a      	ldr	r2, [r7, #0]
 800690e:	429a      	cmp	r2, r3
 8006910:	d210      	bcs.n	8006934 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006912:	4b24      	ldr	r3, [pc, #144]	; (80069a4 <HAL_RCC_ClockConfig+0x1c4>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f023 020f 	bic.w	r2, r3, #15
 800691a:	4922      	ldr	r1, [pc, #136]	; (80069a4 <HAL_RCC_ClockConfig+0x1c4>)
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	4313      	orrs	r3, r2
 8006920:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006922:	4b20      	ldr	r3, [pc, #128]	; (80069a4 <HAL_RCC_ClockConfig+0x1c4>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f003 030f 	and.w	r3, r3, #15
 800692a:	683a      	ldr	r2, [r7, #0]
 800692c:	429a      	cmp	r2, r3
 800692e:	d001      	beq.n	8006934 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006930:	2301      	movs	r3, #1
 8006932:	e032      	b.n	800699a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f003 0304 	and.w	r3, r3, #4
 800693c:	2b00      	cmp	r3, #0
 800693e:	d008      	beq.n	8006952 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006940:	4b19      	ldr	r3, [pc, #100]	; (80069a8 <HAL_RCC_ClockConfig+0x1c8>)
 8006942:	689b      	ldr	r3, [r3, #8]
 8006944:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	68db      	ldr	r3, [r3, #12]
 800694c:	4916      	ldr	r1, [pc, #88]	; (80069a8 <HAL_RCC_ClockConfig+0x1c8>)
 800694e:	4313      	orrs	r3, r2
 8006950:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f003 0308 	and.w	r3, r3, #8
 800695a:	2b00      	cmp	r3, #0
 800695c:	d009      	beq.n	8006972 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800695e:	4b12      	ldr	r3, [pc, #72]	; (80069a8 <HAL_RCC_ClockConfig+0x1c8>)
 8006960:	689b      	ldr	r3, [r3, #8]
 8006962:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	691b      	ldr	r3, [r3, #16]
 800696a:	00db      	lsls	r3, r3, #3
 800696c:	490e      	ldr	r1, [pc, #56]	; (80069a8 <HAL_RCC_ClockConfig+0x1c8>)
 800696e:	4313      	orrs	r3, r2
 8006970:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006972:	f000 f821 	bl	80069b8 <HAL_RCC_GetSysClockFreq>
 8006976:	4602      	mov	r2, r0
 8006978:	4b0b      	ldr	r3, [pc, #44]	; (80069a8 <HAL_RCC_ClockConfig+0x1c8>)
 800697a:	689b      	ldr	r3, [r3, #8]
 800697c:	091b      	lsrs	r3, r3, #4
 800697e:	f003 030f 	and.w	r3, r3, #15
 8006982:	490a      	ldr	r1, [pc, #40]	; (80069ac <HAL_RCC_ClockConfig+0x1cc>)
 8006984:	5ccb      	ldrb	r3, [r1, r3]
 8006986:	fa22 f303 	lsr.w	r3, r2, r3
 800698a:	4a09      	ldr	r2, [pc, #36]	; (80069b0 <HAL_RCC_ClockConfig+0x1d0>)
 800698c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800698e:	4b09      	ldr	r3, [pc, #36]	; (80069b4 <HAL_RCC_ClockConfig+0x1d4>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4618      	mov	r0, r3
 8006994:	f7fa fe54 	bl	8001640 <HAL_InitTick>

  return HAL_OK;
 8006998:	2300      	movs	r3, #0
}
 800699a:	4618      	mov	r0, r3
 800699c:	3710      	adds	r7, #16
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}
 80069a2:	bf00      	nop
 80069a4:	40023c00 	.word	0x40023c00
 80069a8:	40023800 	.word	0x40023800
 80069ac:	08026760 	.word	0x08026760
 80069b0:	20000004 	.word	0x20000004
 80069b4:	20000008 	.word	0x20000008

080069b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80069b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80069bc:	b090      	sub	sp, #64	; 0x40
 80069be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80069c0:	2300      	movs	r3, #0
 80069c2:	637b      	str	r3, [r7, #52]	; 0x34
 80069c4:	2300      	movs	r3, #0
 80069c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069c8:	2300      	movs	r3, #0
 80069ca:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 80069cc:	2300      	movs	r3, #0
 80069ce:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80069d0:	4b59      	ldr	r3, [pc, #356]	; (8006b38 <HAL_RCC_GetSysClockFreq+0x180>)
 80069d2:	689b      	ldr	r3, [r3, #8]
 80069d4:	f003 030c 	and.w	r3, r3, #12
 80069d8:	2b08      	cmp	r3, #8
 80069da:	d00d      	beq.n	80069f8 <HAL_RCC_GetSysClockFreq+0x40>
 80069dc:	2b08      	cmp	r3, #8
 80069de:	f200 80a1 	bhi.w	8006b24 <HAL_RCC_GetSysClockFreq+0x16c>
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d002      	beq.n	80069ec <HAL_RCC_GetSysClockFreq+0x34>
 80069e6:	2b04      	cmp	r3, #4
 80069e8:	d003      	beq.n	80069f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80069ea:	e09b      	b.n	8006b24 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80069ec:	4b53      	ldr	r3, [pc, #332]	; (8006b3c <HAL_RCC_GetSysClockFreq+0x184>)
 80069ee:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80069f0:	e09b      	b.n	8006b2a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80069f2:	4b53      	ldr	r3, [pc, #332]	; (8006b40 <HAL_RCC_GetSysClockFreq+0x188>)
 80069f4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80069f6:	e098      	b.n	8006b2a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80069f8:	4b4f      	ldr	r3, [pc, #316]	; (8006b38 <HAL_RCC_GetSysClockFreq+0x180>)
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a00:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006a02:	4b4d      	ldr	r3, [pc, #308]	; (8006b38 <HAL_RCC_GetSysClockFreq+0x180>)
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d028      	beq.n	8006a60 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006a0e:	4b4a      	ldr	r3, [pc, #296]	; (8006b38 <HAL_RCC_GetSysClockFreq+0x180>)
 8006a10:	685b      	ldr	r3, [r3, #4]
 8006a12:	099b      	lsrs	r3, r3, #6
 8006a14:	2200      	movs	r2, #0
 8006a16:	623b      	str	r3, [r7, #32]
 8006a18:	627a      	str	r2, [r7, #36]	; 0x24
 8006a1a:	6a3b      	ldr	r3, [r7, #32]
 8006a1c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006a20:	2100      	movs	r1, #0
 8006a22:	4b47      	ldr	r3, [pc, #284]	; (8006b40 <HAL_RCC_GetSysClockFreq+0x188>)
 8006a24:	fb03 f201 	mul.w	r2, r3, r1
 8006a28:	2300      	movs	r3, #0
 8006a2a:	fb00 f303 	mul.w	r3, r0, r3
 8006a2e:	4413      	add	r3, r2
 8006a30:	4a43      	ldr	r2, [pc, #268]	; (8006b40 <HAL_RCC_GetSysClockFreq+0x188>)
 8006a32:	fba0 1202 	umull	r1, r2, r0, r2
 8006a36:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006a38:	460a      	mov	r2, r1
 8006a3a:	62ba      	str	r2, [r7, #40]	; 0x28
 8006a3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a3e:	4413      	add	r3, r2
 8006a40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a44:	2200      	movs	r2, #0
 8006a46:	61bb      	str	r3, [r7, #24]
 8006a48:	61fa      	str	r2, [r7, #28]
 8006a4a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006a4e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006a52:	f7f9 fc45 	bl	80002e0 <__aeabi_uldivmod>
 8006a56:	4602      	mov	r2, r0
 8006a58:	460b      	mov	r3, r1
 8006a5a:	4613      	mov	r3, r2
 8006a5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a5e:	e053      	b.n	8006b08 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006a60:	4b35      	ldr	r3, [pc, #212]	; (8006b38 <HAL_RCC_GetSysClockFreq+0x180>)
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	099b      	lsrs	r3, r3, #6
 8006a66:	2200      	movs	r2, #0
 8006a68:	613b      	str	r3, [r7, #16]
 8006a6a:	617a      	str	r2, [r7, #20]
 8006a6c:	693b      	ldr	r3, [r7, #16]
 8006a6e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006a72:	f04f 0b00 	mov.w	fp, #0
 8006a76:	4652      	mov	r2, sl
 8006a78:	465b      	mov	r3, fp
 8006a7a:	f04f 0000 	mov.w	r0, #0
 8006a7e:	f04f 0100 	mov.w	r1, #0
 8006a82:	0159      	lsls	r1, r3, #5
 8006a84:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006a88:	0150      	lsls	r0, r2, #5
 8006a8a:	4602      	mov	r2, r0
 8006a8c:	460b      	mov	r3, r1
 8006a8e:	ebb2 080a 	subs.w	r8, r2, sl
 8006a92:	eb63 090b 	sbc.w	r9, r3, fp
 8006a96:	f04f 0200 	mov.w	r2, #0
 8006a9a:	f04f 0300 	mov.w	r3, #0
 8006a9e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006aa2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006aa6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006aaa:	ebb2 0408 	subs.w	r4, r2, r8
 8006aae:	eb63 0509 	sbc.w	r5, r3, r9
 8006ab2:	f04f 0200 	mov.w	r2, #0
 8006ab6:	f04f 0300 	mov.w	r3, #0
 8006aba:	00eb      	lsls	r3, r5, #3
 8006abc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006ac0:	00e2      	lsls	r2, r4, #3
 8006ac2:	4614      	mov	r4, r2
 8006ac4:	461d      	mov	r5, r3
 8006ac6:	eb14 030a 	adds.w	r3, r4, sl
 8006aca:	603b      	str	r3, [r7, #0]
 8006acc:	eb45 030b 	adc.w	r3, r5, fp
 8006ad0:	607b      	str	r3, [r7, #4]
 8006ad2:	f04f 0200 	mov.w	r2, #0
 8006ad6:	f04f 0300 	mov.w	r3, #0
 8006ada:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006ade:	4629      	mov	r1, r5
 8006ae0:	028b      	lsls	r3, r1, #10
 8006ae2:	4621      	mov	r1, r4
 8006ae4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006ae8:	4621      	mov	r1, r4
 8006aea:	028a      	lsls	r2, r1, #10
 8006aec:	4610      	mov	r0, r2
 8006aee:	4619      	mov	r1, r3
 8006af0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006af2:	2200      	movs	r2, #0
 8006af4:	60bb      	str	r3, [r7, #8]
 8006af6:	60fa      	str	r2, [r7, #12]
 8006af8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006afc:	f7f9 fbf0 	bl	80002e0 <__aeabi_uldivmod>
 8006b00:	4602      	mov	r2, r0
 8006b02:	460b      	mov	r3, r1
 8006b04:	4613      	mov	r3, r2
 8006b06:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006b08:	4b0b      	ldr	r3, [pc, #44]	; (8006b38 <HAL_RCC_GetSysClockFreq+0x180>)
 8006b0a:	685b      	ldr	r3, [r3, #4]
 8006b0c:	0c1b      	lsrs	r3, r3, #16
 8006b0e:	f003 0303 	and.w	r3, r3, #3
 8006b12:	3301      	adds	r3, #1
 8006b14:	005b      	lsls	r3, r3, #1
 8006b16:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8006b18:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b20:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006b22:	e002      	b.n	8006b2a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006b24:	4b05      	ldr	r3, [pc, #20]	; (8006b3c <HAL_RCC_GetSysClockFreq+0x184>)
 8006b26:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006b28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	3740      	adds	r7, #64	; 0x40
 8006b30:	46bd      	mov	sp, r7
 8006b32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b36:	bf00      	nop
 8006b38:	40023800 	.word	0x40023800
 8006b3c:	00f42400 	.word	0x00f42400
 8006b40:	017d7840 	.word	0x017d7840

08006b44 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006b44:	b480      	push	{r7}
 8006b46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006b48:	4b03      	ldr	r3, [pc, #12]	; (8006b58 <HAL_RCC_GetHCLKFreq+0x14>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b54:	4770      	bx	lr
 8006b56:	bf00      	nop
 8006b58:	20000004 	.word	0x20000004

08006b5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006b60:	f7ff fff0 	bl	8006b44 <HAL_RCC_GetHCLKFreq>
 8006b64:	4602      	mov	r2, r0
 8006b66:	4b05      	ldr	r3, [pc, #20]	; (8006b7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006b68:	689b      	ldr	r3, [r3, #8]
 8006b6a:	0a9b      	lsrs	r3, r3, #10
 8006b6c:	f003 0307 	and.w	r3, r3, #7
 8006b70:	4903      	ldr	r1, [pc, #12]	; (8006b80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006b72:	5ccb      	ldrb	r3, [r1, r3]
 8006b74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	bd80      	pop	{r7, pc}
 8006b7c:	40023800 	.word	0x40023800
 8006b80:	08026770 	.word	0x08026770

08006b84 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006b84:	b480      	push	{r7}
 8006b86:	b083      	sub	sp, #12
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
 8006b8c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	220f      	movs	r2, #15
 8006b92:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006b94:	4b12      	ldr	r3, [pc, #72]	; (8006be0 <HAL_RCC_GetClockConfig+0x5c>)
 8006b96:	689b      	ldr	r3, [r3, #8]
 8006b98:	f003 0203 	and.w	r2, r3, #3
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006ba0:	4b0f      	ldr	r3, [pc, #60]	; (8006be0 <HAL_RCC_GetClockConfig+0x5c>)
 8006ba2:	689b      	ldr	r3, [r3, #8]
 8006ba4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006bac:	4b0c      	ldr	r3, [pc, #48]	; (8006be0 <HAL_RCC_GetClockConfig+0x5c>)
 8006bae:	689b      	ldr	r3, [r3, #8]
 8006bb0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8006bb8:	4b09      	ldr	r3, [pc, #36]	; (8006be0 <HAL_RCC_GetClockConfig+0x5c>)
 8006bba:	689b      	ldr	r3, [r3, #8]
 8006bbc:	08db      	lsrs	r3, r3, #3
 8006bbe:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006bc6:	4b07      	ldr	r3, [pc, #28]	; (8006be4 <HAL_RCC_GetClockConfig+0x60>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f003 020f 	and.w	r2, r3, #15
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	601a      	str	r2, [r3, #0]
}
 8006bd2:	bf00      	nop
 8006bd4:	370c      	adds	r7, #12
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bdc:	4770      	bx	lr
 8006bde:	bf00      	nop
 8006be0:	40023800 	.word	0x40023800
 8006be4:	40023c00 	.word	0x40023c00

08006be8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b088      	sub	sp, #32
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006c00:	2300      	movs	r3, #0
 8006c02:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f003 0301 	and.w	r3, r3, #1
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d012      	beq.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006c10:	4b69      	ldr	r3, [pc, #420]	; (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c12:	689b      	ldr	r3, [r3, #8]
 8006c14:	4a68      	ldr	r2, [pc, #416]	; (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c16:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006c1a:	6093      	str	r3, [r2, #8]
 8006c1c:	4b66      	ldr	r3, [pc, #408]	; (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c1e:	689a      	ldr	r2, [r3, #8]
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c24:	4964      	ldr	r1, [pc, #400]	; (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c26:	4313      	orrs	r3, r2
 8006c28:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d101      	bne.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006c32:	2301      	movs	r3, #1
 8006c34:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d017      	beq.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006c42:	4b5d      	ldr	r3, [pc, #372]	; (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c48:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c50:	4959      	ldr	r1, [pc, #356]	; (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c52:	4313      	orrs	r3, r2
 8006c54:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c60:	d101      	bne.n	8006c66 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8006c62:	2301      	movs	r3, #1
 8006c64:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d101      	bne.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006c6e:	2301      	movs	r3, #1
 8006c70:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d017      	beq.n	8006cae <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006c7e:	4b4e      	ldr	r3, [pc, #312]	; (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c84:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c8c:	494a      	ldr	r1, [pc, #296]	; (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006c9c:	d101      	bne.n	8006ca2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d101      	bne.n	8006cae <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006caa:	2301      	movs	r3, #1
 8006cac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d001      	beq.n	8006cbe <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8006cba:	2301      	movs	r3, #1
 8006cbc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f003 0320 	and.w	r3, r3, #32
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	f000 808b 	beq.w	8006de2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006ccc:	4b3a      	ldr	r3, [pc, #232]	; (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cd0:	4a39      	ldr	r2, [pc, #228]	; (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006cd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006cd6:	6413      	str	r3, [r2, #64]	; 0x40
 8006cd8:	4b37      	ldr	r3, [pc, #220]	; (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ce0:	60bb      	str	r3, [r7, #8]
 8006ce2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006ce4:	4b35      	ldr	r3, [pc, #212]	; (8006dbc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a34      	ldr	r2, [pc, #208]	; (8006dbc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006cea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006cee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006cf0:	f7fa fea8 	bl	8001a44 <HAL_GetTick>
 8006cf4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006cf6:	e008      	b.n	8006d0a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006cf8:	f7fa fea4 	bl	8001a44 <HAL_GetTick>
 8006cfc:	4602      	mov	r2, r0
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	1ad3      	subs	r3, r2, r3
 8006d02:	2b64      	cmp	r3, #100	; 0x64
 8006d04:	d901      	bls.n	8006d0a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8006d06:	2303      	movs	r3, #3
 8006d08:	e38f      	b.n	800742a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006d0a:	4b2c      	ldr	r3, [pc, #176]	; (8006dbc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d0f0      	beq.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006d16:	4b28      	ldr	r3, [pc, #160]	; (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d1e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006d20:	693b      	ldr	r3, [r7, #16]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d035      	beq.n	8006d92 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d2e:	693a      	ldr	r2, [r7, #16]
 8006d30:	429a      	cmp	r2, r3
 8006d32:	d02e      	beq.n	8006d92 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006d34:	4b20      	ldr	r3, [pc, #128]	; (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d3c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006d3e:	4b1e      	ldr	r3, [pc, #120]	; (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d42:	4a1d      	ldr	r2, [pc, #116]	; (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d48:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006d4a:	4b1b      	ldr	r3, [pc, #108]	; (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d4e:	4a1a      	ldr	r2, [pc, #104]	; (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d54:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006d56:	4a18      	ldr	r2, [pc, #96]	; (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d58:	693b      	ldr	r3, [r7, #16]
 8006d5a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006d5c:	4b16      	ldr	r3, [pc, #88]	; (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d60:	f003 0301 	and.w	r3, r3, #1
 8006d64:	2b01      	cmp	r3, #1
 8006d66:	d114      	bne.n	8006d92 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d68:	f7fa fe6c 	bl	8001a44 <HAL_GetTick>
 8006d6c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d6e:	e00a      	b.n	8006d86 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006d70:	f7fa fe68 	bl	8001a44 <HAL_GetTick>
 8006d74:	4602      	mov	r2, r0
 8006d76:	697b      	ldr	r3, [r7, #20]
 8006d78:	1ad3      	subs	r3, r2, r3
 8006d7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d901      	bls.n	8006d86 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8006d82:	2303      	movs	r3, #3
 8006d84:	e351      	b.n	800742a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d86:	4b0c      	ldr	r3, [pc, #48]	; (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d8a:	f003 0302 	and.w	r3, r3, #2
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d0ee      	beq.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d9a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d9e:	d111      	bne.n	8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006da0:	4b05      	ldr	r3, [pc, #20]	; (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006da2:	689b      	ldr	r3, [r3, #8]
 8006da4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006dac:	4b04      	ldr	r3, [pc, #16]	; (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006dae:	400b      	ands	r3, r1
 8006db0:	4901      	ldr	r1, [pc, #4]	; (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006db2:	4313      	orrs	r3, r2
 8006db4:	608b      	str	r3, [r1, #8]
 8006db6:	e00b      	b.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006db8:	40023800 	.word	0x40023800
 8006dbc:	40007000 	.word	0x40007000
 8006dc0:	0ffffcff 	.word	0x0ffffcff
 8006dc4:	4bac      	ldr	r3, [pc, #688]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006dc6:	689b      	ldr	r3, [r3, #8]
 8006dc8:	4aab      	ldr	r2, [pc, #684]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006dca:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006dce:	6093      	str	r3, [r2, #8]
 8006dd0:	4ba9      	ldr	r3, [pc, #676]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006dd2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ddc:	49a6      	ldr	r1, [pc, #664]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006dde:	4313      	orrs	r3, r2
 8006de0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f003 0310 	and.w	r3, r3, #16
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d010      	beq.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006dee:	4ba2      	ldr	r3, [pc, #648]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006df0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006df4:	4aa0      	ldr	r2, [pc, #640]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006df6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006dfa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006dfe:	4b9e      	ldr	r3, [pc, #632]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006e00:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e08:	499b      	ldr	r1, [pc, #620]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006e0a:	4313      	orrs	r3, r2
 8006e0c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d00a      	beq.n	8006e32 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006e1c:	4b96      	ldr	r3, [pc, #600]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e22:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e2a:	4993      	ldr	r1, [pc, #588]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006e2c:	4313      	orrs	r3, r2
 8006e2e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d00a      	beq.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006e3e:	4b8e      	ldr	r3, [pc, #568]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006e40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e44:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e4c:	498a      	ldr	r1, [pc, #552]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006e4e:	4313      	orrs	r3, r2
 8006e50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d00a      	beq.n	8006e76 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006e60:	4b85      	ldr	r3, [pc, #532]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e66:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e6e:	4982      	ldr	r1, [pc, #520]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006e70:	4313      	orrs	r3, r2
 8006e72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d00a      	beq.n	8006e98 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006e82:	4b7d      	ldr	r3, [pc, #500]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006e84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e88:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e90:	4979      	ldr	r1, [pc, #484]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006e92:	4313      	orrs	r3, r2
 8006e94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d00a      	beq.n	8006eba <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006ea4:	4b74      	ldr	r3, [pc, #464]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006eaa:	f023 0203 	bic.w	r2, r3, #3
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006eb2:	4971      	ldr	r1, [pc, #452]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d00a      	beq.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006ec6:	4b6c      	ldr	r3, [pc, #432]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006ec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ecc:	f023 020c 	bic.w	r2, r3, #12
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ed4:	4968      	ldr	r1, [pc, #416]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d00a      	beq.n	8006efe <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006ee8:	4b63      	ldr	r3, [pc, #396]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006eee:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ef6:	4960      	ldr	r1, [pc, #384]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006ef8:	4313      	orrs	r3, r2
 8006efa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d00a      	beq.n	8006f20 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006f0a:	4b5b      	ldr	r3, [pc, #364]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006f0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f10:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f18:	4957      	ldr	r1, [pc, #348]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006f1a:	4313      	orrs	r3, r2
 8006f1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d00a      	beq.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006f2c:	4b52      	ldr	r3, [pc, #328]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f32:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f3a:	494f      	ldr	r1, [pc, #316]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006f3c:	4313      	orrs	r3, r2
 8006f3e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d00a      	beq.n	8006f64 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006f4e:	4b4a      	ldr	r3, [pc, #296]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006f50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f54:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f5c:	4946      	ldr	r1, [pc, #280]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006f5e:	4313      	orrs	r3, r2
 8006f60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d00a      	beq.n	8006f86 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006f70:	4b41      	ldr	r3, [pc, #260]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f76:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f7e:	493e      	ldr	r1, [pc, #248]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006f80:	4313      	orrs	r3, r2
 8006f82:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d00a      	beq.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8006f92:	4b39      	ldr	r3, [pc, #228]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006f94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f98:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fa0:	4935      	ldr	r1, [pc, #212]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006fa2:	4313      	orrs	r3, r2
 8006fa4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d00a      	beq.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006fb4:	4b30      	ldr	r3, [pc, #192]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fba:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006fc2:	492d      	ldr	r1, [pc, #180]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006fc4:	4313      	orrs	r3, r2
 8006fc6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d011      	beq.n	8006ffa <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006fd6:	4b28      	ldr	r3, [pc, #160]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006fd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fdc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006fe4:	4924      	ldr	r1, [pc, #144]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ff0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006ff4:	d101      	bne.n	8006ffa <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f003 0308 	and.w	r3, r3, #8
 8007002:	2b00      	cmp	r3, #0
 8007004:	d001      	beq.n	800700a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8007006:	2301      	movs	r3, #1
 8007008:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007012:	2b00      	cmp	r3, #0
 8007014:	d00a      	beq.n	800702c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007016:	4b18      	ldr	r3, [pc, #96]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007018:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800701c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007024:	4914      	ldr	r1, [pc, #80]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007026:	4313      	orrs	r3, r2
 8007028:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007034:	2b00      	cmp	r3, #0
 8007036:	d00b      	beq.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007038:	4b0f      	ldr	r3, [pc, #60]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800703a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800703e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007048:	490b      	ldr	r1, [pc, #44]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800704a:	4313      	orrs	r3, r2
 800704c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007058:	2b00      	cmp	r3, #0
 800705a:	d00f      	beq.n	800707c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800705c:	4b06      	ldr	r3, [pc, #24]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800705e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007062:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800706c:	4902      	ldr	r1, [pc, #8]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800706e:	4313      	orrs	r3, r2
 8007070:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007074:	e002      	b.n	800707c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8007076:	bf00      	nop
 8007078:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007084:	2b00      	cmp	r3, #0
 8007086:	d00b      	beq.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007088:	4b8a      	ldr	r3, [pc, #552]	; (80072b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800708a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800708e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007098:	4986      	ldr	r1, [pc, #536]	; (80072b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800709a:	4313      	orrs	r3, r2
 800709c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d00b      	beq.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80070ac:	4b81      	ldr	r3, [pc, #516]	; (80072b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80070ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80070b2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80070bc:	497d      	ldr	r1, [pc, #500]	; (80072b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80070be:	4313      	orrs	r3, r2
 80070c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80070c4:	69fb      	ldr	r3, [r7, #28]
 80070c6:	2b01      	cmp	r3, #1
 80070c8:	d006      	beq.n	80070d8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	f000 80d6 	beq.w	8007284 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80070d8:	4b76      	ldr	r3, [pc, #472]	; (80072b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4a75      	ldr	r2, [pc, #468]	; (80072b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80070de:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80070e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80070e4:	f7fa fcae 	bl	8001a44 <HAL_GetTick>
 80070e8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80070ea:	e008      	b.n	80070fe <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80070ec:	f7fa fcaa 	bl	8001a44 <HAL_GetTick>
 80070f0:	4602      	mov	r2, r0
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	1ad3      	subs	r3, r2, r3
 80070f6:	2b64      	cmp	r3, #100	; 0x64
 80070f8:	d901      	bls.n	80070fe <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80070fa:	2303      	movs	r3, #3
 80070fc:	e195      	b.n	800742a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80070fe:	4b6d      	ldr	r3, [pc, #436]	; (80072b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007106:	2b00      	cmp	r3, #0
 8007108:	d1f0      	bne.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f003 0301 	and.w	r3, r3, #1
 8007112:	2b00      	cmp	r3, #0
 8007114:	d021      	beq.n	800715a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800711a:	2b00      	cmp	r3, #0
 800711c:	d11d      	bne.n	800715a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800711e:	4b65      	ldr	r3, [pc, #404]	; (80072b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007120:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007124:	0c1b      	lsrs	r3, r3, #16
 8007126:	f003 0303 	and.w	r3, r3, #3
 800712a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800712c:	4b61      	ldr	r3, [pc, #388]	; (80072b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800712e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007132:	0e1b      	lsrs	r3, r3, #24
 8007134:	f003 030f 	and.w	r3, r3, #15
 8007138:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	685b      	ldr	r3, [r3, #4]
 800713e:	019a      	lsls	r2, r3, #6
 8007140:	693b      	ldr	r3, [r7, #16]
 8007142:	041b      	lsls	r3, r3, #16
 8007144:	431a      	orrs	r2, r3
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	061b      	lsls	r3, r3, #24
 800714a:	431a      	orrs	r2, r3
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	689b      	ldr	r3, [r3, #8]
 8007150:	071b      	lsls	r3, r3, #28
 8007152:	4958      	ldr	r1, [pc, #352]	; (80072b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007154:	4313      	orrs	r3, r2
 8007156:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007162:	2b00      	cmp	r3, #0
 8007164:	d004      	beq.n	8007170 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800716a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800716e:	d00a      	beq.n	8007186 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007178:	2b00      	cmp	r3, #0
 800717a:	d02e      	beq.n	80071da <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007180:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007184:	d129      	bne.n	80071da <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007186:	4b4b      	ldr	r3, [pc, #300]	; (80072b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007188:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800718c:	0c1b      	lsrs	r3, r3, #16
 800718e:	f003 0303 	and.w	r3, r3, #3
 8007192:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007194:	4b47      	ldr	r3, [pc, #284]	; (80072b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007196:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800719a:	0f1b      	lsrs	r3, r3, #28
 800719c:	f003 0307 	and.w	r3, r3, #7
 80071a0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	685b      	ldr	r3, [r3, #4]
 80071a6:	019a      	lsls	r2, r3, #6
 80071a8:	693b      	ldr	r3, [r7, #16]
 80071aa:	041b      	lsls	r3, r3, #16
 80071ac:	431a      	orrs	r2, r3
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	68db      	ldr	r3, [r3, #12]
 80071b2:	061b      	lsls	r3, r3, #24
 80071b4:	431a      	orrs	r2, r3
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	071b      	lsls	r3, r3, #28
 80071ba:	493e      	ldr	r1, [pc, #248]	; (80072b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80071bc:	4313      	orrs	r3, r2
 80071be:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80071c2:	4b3c      	ldr	r3, [pc, #240]	; (80072b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80071c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80071c8:	f023 021f 	bic.w	r2, r3, #31
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071d0:	3b01      	subs	r3, #1
 80071d2:	4938      	ldr	r1, [pc, #224]	; (80072b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80071d4:	4313      	orrs	r3, r2
 80071d6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d01d      	beq.n	8007222 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80071e6:	4b33      	ldr	r3, [pc, #204]	; (80072b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80071e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071ec:	0e1b      	lsrs	r3, r3, #24
 80071ee:	f003 030f 	and.w	r3, r3, #15
 80071f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80071f4:	4b2f      	ldr	r3, [pc, #188]	; (80072b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80071f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071fa:	0f1b      	lsrs	r3, r3, #28
 80071fc:	f003 0307 	and.w	r3, r3, #7
 8007200:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	685b      	ldr	r3, [r3, #4]
 8007206:	019a      	lsls	r2, r3, #6
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	691b      	ldr	r3, [r3, #16]
 800720c:	041b      	lsls	r3, r3, #16
 800720e:	431a      	orrs	r2, r3
 8007210:	693b      	ldr	r3, [r7, #16]
 8007212:	061b      	lsls	r3, r3, #24
 8007214:	431a      	orrs	r2, r3
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	071b      	lsls	r3, r3, #28
 800721a:	4926      	ldr	r1, [pc, #152]	; (80072b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800721c:	4313      	orrs	r3, r2
 800721e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800722a:	2b00      	cmp	r3, #0
 800722c:	d011      	beq.n	8007252 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	685b      	ldr	r3, [r3, #4]
 8007232:	019a      	lsls	r2, r3, #6
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	691b      	ldr	r3, [r3, #16]
 8007238:	041b      	lsls	r3, r3, #16
 800723a:	431a      	orrs	r2, r3
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	68db      	ldr	r3, [r3, #12]
 8007240:	061b      	lsls	r3, r3, #24
 8007242:	431a      	orrs	r2, r3
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	689b      	ldr	r3, [r3, #8]
 8007248:	071b      	lsls	r3, r3, #28
 800724a:	491a      	ldr	r1, [pc, #104]	; (80072b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800724c:	4313      	orrs	r3, r2
 800724e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007252:	4b18      	ldr	r3, [pc, #96]	; (80072b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	4a17      	ldr	r2, [pc, #92]	; (80072b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007258:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800725c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800725e:	f7fa fbf1 	bl	8001a44 <HAL_GetTick>
 8007262:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007264:	e008      	b.n	8007278 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007266:	f7fa fbed 	bl	8001a44 <HAL_GetTick>
 800726a:	4602      	mov	r2, r0
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	1ad3      	subs	r3, r2, r3
 8007270:	2b64      	cmp	r3, #100	; 0x64
 8007272:	d901      	bls.n	8007278 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007274:	2303      	movs	r3, #3
 8007276:	e0d8      	b.n	800742a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007278:	4b0e      	ldr	r3, [pc, #56]	; (80072b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007280:	2b00      	cmp	r3, #0
 8007282:	d0f0      	beq.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007284:	69bb      	ldr	r3, [r7, #24]
 8007286:	2b01      	cmp	r3, #1
 8007288:	f040 80ce 	bne.w	8007428 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800728c:	4b09      	ldr	r3, [pc, #36]	; (80072b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a08      	ldr	r2, [pc, #32]	; (80072b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007292:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007296:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007298:	f7fa fbd4 	bl	8001a44 <HAL_GetTick>
 800729c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800729e:	e00b      	b.n	80072b8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80072a0:	f7fa fbd0 	bl	8001a44 <HAL_GetTick>
 80072a4:	4602      	mov	r2, r0
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	1ad3      	subs	r3, r2, r3
 80072aa:	2b64      	cmp	r3, #100	; 0x64
 80072ac:	d904      	bls.n	80072b8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80072ae:	2303      	movs	r3, #3
 80072b0:	e0bb      	b.n	800742a <HAL_RCCEx_PeriphCLKConfig+0x842>
 80072b2:	bf00      	nop
 80072b4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80072b8:	4b5e      	ldr	r3, [pc, #376]	; (8007434 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80072c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80072c4:	d0ec      	beq.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d003      	beq.n	80072da <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d009      	beq.n	80072ee <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d02e      	beq.n	8007344 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d12a      	bne.n	8007344 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80072ee:	4b51      	ldr	r3, [pc, #324]	; (8007434 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80072f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072f4:	0c1b      	lsrs	r3, r3, #16
 80072f6:	f003 0303 	and.w	r3, r3, #3
 80072fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80072fc:	4b4d      	ldr	r3, [pc, #308]	; (8007434 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80072fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007302:	0f1b      	lsrs	r3, r3, #28
 8007304:	f003 0307 	and.w	r3, r3, #7
 8007308:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	695b      	ldr	r3, [r3, #20]
 800730e:	019a      	lsls	r2, r3, #6
 8007310:	693b      	ldr	r3, [r7, #16]
 8007312:	041b      	lsls	r3, r3, #16
 8007314:	431a      	orrs	r2, r3
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	699b      	ldr	r3, [r3, #24]
 800731a:	061b      	lsls	r3, r3, #24
 800731c:	431a      	orrs	r2, r3
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	071b      	lsls	r3, r3, #28
 8007322:	4944      	ldr	r1, [pc, #272]	; (8007434 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007324:	4313      	orrs	r3, r2
 8007326:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800732a:	4b42      	ldr	r3, [pc, #264]	; (8007434 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800732c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007330:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007338:	3b01      	subs	r3, #1
 800733a:	021b      	lsls	r3, r3, #8
 800733c:	493d      	ldr	r1, [pc, #244]	; (8007434 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800733e:	4313      	orrs	r3, r2
 8007340:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800734c:	2b00      	cmp	r3, #0
 800734e:	d022      	beq.n	8007396 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007354:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007358:	d11d      	bne.n	8007396 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800735a:	4b36      	ldr	r3, [pc, #216]	; (8007434 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800735c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007360:	0e1b      	lsrs	r3, r3, #24
 8007362:	f003 030f 	and.w	r3, r3, #15
 8007366:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007368:	4b32      	ldr	r3, [pc, #200]	; (8007434 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800736a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800736e:	0f1b      	lsrs	r3, r3, #28
 8007370:	f003 0307 	and.w	r3, r3, #7
 8007374:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	695b      	ldr	r3, [r3, #20]
 800737a:	019a      	lsls	r2, r3, #6
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6a1b      	ldr	r3, [r3, #32]
 8007380:	041b      	lsls	r3, r3, #16
 8007382:	431a      	orrs	r2, r3
 8007384:	693b      	ldr	r3, [r7, #16]
 8007386:	061b      	lsls	r3, r3, #24
 8007388:	431a      	orrs	r2, r3
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	071b      	lsls	r3, r3, #28
 800738e:	4929      	ldr	r1, [pc, #164]	; (8007434 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007390:	4313      	orrs	r3, r2
 8007392:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f003 0308 	and.w	r3, r3, #8
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d028      	beq.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80073a2:	4b24      	ldr	r3, [pc, #144]	; (8007434 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80073a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073a8:	0e1b      	lsrs	r3, r3, #24
 80073aa:	f003 030f 	and.w	r3, r3, #15
 80073ae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80073b0:	4b20      	ldr	r3, [pc, #128]	; (8007434 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80073b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073b6:	0c1b      	lsrs	r3, r3, #16
 80073b8:	f003 0303 	and.w	r3, r3, #3
 80073bc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	695b      	ldr	r3, [r3, #20]
 80073c2:	019a      	lsls	r2, r3, #6
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	041b      	lsls	r3, r3, #16
 80073c8:	431a      	orrs	r2, r3
 80073ca:	693b      	ldr	r3, [r7, #16]
 80073cc:	061b      	lsls	r3, r3, #24
 80073ce:	431a      	orrs	r2, r3
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	69db      	ldr	r3, [r3, #28]
 80073d4:	071b      	lsls	r3, r3, #28
 80073d6:	4917      	ldr	r1, [pc, #92]	; (8007434 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80073d8:	4313      	orrs	r3, r2
 80073da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80073de:	4b15      	ldr	r3, [pc, #84]	; (8007434 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80073e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ec:	4911      	ldr	r1, [pc, #68]	; (8007434 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80073ee:	4313      	orrs	r3, r2
 80073f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80073f4:	4b0f      	ldr	r3, [pc, #60]	; (8007434 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4a0e      	ldr	r2, [pc, #56]	; (8007434 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80073fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007400:	f7fa fb20 	bl	8001a44 <HAL_GetTick>
 8007404:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007406:	e008      	b.n	800741a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007408:	f7fa fb1c 	bl	8001a44 <HAL_GetTick>
 800740c:	4602      	mov	r2, r0
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	1ad3      	subs	r3, r2, r3
 8007412:	2b64      	cmp	r3, #100	; 0x64
 8007414:	d901      	bls.n	800741a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007416:	2303      	movs	r3, #3
 8007418:	e007      	b.n	800742a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800741a:	4b06      	ldr	r3, [pc, #24]	; (8007434 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007422:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007426:	d1ef      	bne.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8007428:	2300      	movs	r3, #0
}
 800742a:	4618      	mov	r0, r3
 800742c:	3720      	adds	r7, #32
 800742e:	46bd      	mov	sp, r7
 8007430:	bd80      	pop	{r7, pc}
 8007432:	bf00      	nop
 8007434:	40023800 	.word	0x40023800

08007438 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b082      	sub	sp, #8
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
 8007440:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d101      	bne.n	800744c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8007448:	2301      	movs	r3, #1
 800744a:	e025      	b.n	8007498 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007452:	b2db      	uxtb	r3, r3
 8007454:	2b00      	cmp	r3, #0
 8007456:	d106      	bne.n	8007466 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2200      	movs	r2, #0
 800745c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	f7fa f8e3 	bl	800162c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2202      	movs	r2, #2
 800746a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681a      	ldr	r2, [r3, #0]
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	3304      	adds	r3, #4
 8007476:	4619      	mov	r1, r3
 8007478:	4610      	mov	r0, r2
 800747a:	f000 fb9b 	bl	8007bb4 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6818      	ldr	r0, [r3, #0]
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	685b      	ldr	r3, [r3, #4]
 8007486:	461a      	mov	r2, r3
 8007488:	6839      	ldr	r1, [r7, #0]
 800748a:	f000 fbef 	bl	8007c6c <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2201      	movs	r2, #1
 8007492:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8007496:	2300      	movs	r3, #0
}
 8007498:	4618      	mov	r0, r3
 800749a:	3708      	adds	r7, #8
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}

080074a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b084      	sub	sp, #16
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d101      	bne.n	80074b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80074ae:	2301      	movs	r3, #1
 80074b0:	e09d      	b.n	80075ee <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d108      	bne.n	80074cc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	685b      	ldr	r3, [r3, #4]
 80074be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80074c2:	d009      	beq.n	80074d8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2200      	movs	r2, #0
 80074c8:	61da      	str	r2, [r3, #28]
 80074ca:	e005      	b.n	80074d8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2200      	movs	r2, #0
 80074d0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2200      	movs	r2, #0
 80074d6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2200      	movs	r2, #0
 80074dc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80074e4:	b2db      	uxtb	r3, r3
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d106      	bne.n	80074f8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2200      	movs	r2, #0
 80074ee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f7f9 ffc4 	bl	8001480 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2202      	movs	r2, #2
 80074fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	681a      	ldr	r2, [r3, #0]
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800750e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	68db      	ldr	r3, [r3, #12]
 8007514:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007518:	d902      	bls.n	8007520 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800751a:	2300      	movs	r3, #0
 800751c:	60fb      	str	r3, [r7, #12]
 800751e:	e002      	b.n	8007526 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007520:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007524:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	68db      	ldr	r3, [r3, #12]
 800752a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800752e:	d007      	beq.n	8007540 <HAL_SPI_Init+0xa0>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	68db      	ldr	r3, [r3, #12]
 8007534:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007538:	d002      	beq.n	8007540 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2200      	movs	r2, #0
 800753e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	685b      	ldr	r3, [r3, #4]
 8007544:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	689b      	ldr	r3, [r3, #8]
 800754c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007550:	431a      	orrs	r2, r3
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	691b      	ldr	r3, [r3, #16]
 8007556:	f003 0302 	and.w	r3, r3, #2
 800755a:	431a      	orrs	r2, r3
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	695b      	ldr	r3, [r3, #20]
 8007560:	f003 0301 	and.w	r3, r3, #1
 8007564:	431a      	orrs	r2, r3
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	699b      	ldr	r3, [r3, #24]
 800756a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800756e:	431a      	orrs	r2, r3
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	69db      	ldr	r3, [r3, #28]
 8007574:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007578:	431a      	orrs	r2, r3
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6a1b      	ldr	r3, [r3, #32]
 800757e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007582:	ea42 0103 	orr.w	r1, r2, r3
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800758a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	430a      	orrs	r2, r1
 8007594:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	699b      	ldr	r3, [r3, #24]
 800759a:	0c1b      	lsrs	r3, r3, #16
 800759c:	f003 0204 	and.w	r2, r3, #4
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075a4:	f003 0310 	and.w	r3, r3, #16
 80075a8:	431a      	orrs	r2, r3
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075ae:	f003 0308 	and.w	r3, r3, #8
 80075b2:	431a      	orrs	r2, r3
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	68db      	ldr	r3, [r3, #12]
 80075b8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80075bc:	ea42 0103 	orr.w	r1, r2, r3
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	430a      	orrs	r2, r1
 80075cc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	69da      	ldr	r2, [r3, #28]
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80075dc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2200      	movs	r2, #0
 80075e2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2201      	movs	r2, #1
 80075e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80075ec:	2300      	movs	r3, #0
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	3710      	adds	r7, #16
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}

080075f6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80075f6:	b580      	push	{r7, lr}
 80075f8:	b082      	sub	sp, #8
 80075fa:	af00      	add	r7, sp, #0
 80075fc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d101      	bne.n	8007608 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007604:	2301      	movs	r3, #1
 8007606:	e049      	b.n	800769c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800760e:	b2db      	uxtb	r3, r3
 8007610:	2b00      	cmp	r3, #0
 8007612:	d106      	bne.n	8007622 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2200      	movs	r2, #0
 8007618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	f000 f841 	bl	80076a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2202      	movs	r2, #2
 8007626:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681a      	ldr	r2, [r3, #0]
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	3304      	adds	r3, #4
 8007632:	4619      	mov	r1, r3
 8007634:	4610      	mov	r0, r2
 8007636:	f000 f9ff 	bl	8007a38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2201      	movs	r2, #1
 800763e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2201      	movs	r2, #1
 8007646:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2201      	movs	r2, #1
 800764e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2201      	movs	r2, #1
 8007656:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2201      	movs	r2, #1
 800765e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2201      	movs	r2, #1
 8007666:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2201      	movs	r2, #1
 800766e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2201      	movs	r2, #1
 8007676:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2201      	movs	r2, #1
 800767e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2201      	movs	r2, #1
 8007686:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2201      	movs	r2, #1
 800768e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2201      	movs	r2, #1
 8007696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800769a:	2300      	movs	r3, #0
}
 800769c:	4618      	mov	r0, r3
 800769e:	3708      	adds	r7, #8
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bd80      	pop	{r7, pc}

080076a4 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80076a4:	b480      	push	{r7}
 80076a6:	b083      	sub	sp, #12
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80076ac:	bf00      	nop
 80076ae:	370c      	adds	r7, #12
 80076b0:	46bd      	mov	sp, r7
 80076b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b6:	4770      	bx	lr

080076b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80076b8:	b480      	push	{r7}
 80076ba:	b085      	sub	sp, #20
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076c6:	b2db      	uxtb	r3, r3
 80076c8:	2b01      	cmp	r3, #1
 80076ca:	d001      	beq.n	80076d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80076cc:	2301      	movs	r3, #1
 80076ce:	e054      	b.n	800777a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2202      	movs	r2, #2
 80076d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	68da      	ldr	r2, [r3, #12]
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f042 0201 	orr.w	r2, r2, #1
 80076e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	4a26      	ldr	r2, [pc, #152]	; (8007788 <HAL_TIM_Base_Start_IT+0xd0>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d022      	beq.n	8007738 <HAL_TIM_Base_Start_IT+0x80>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076fa:	d01d      	beq.n	8007738 <HAL_TIM_Base_Start_IT+0x80>
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	4a22      	ldr	r2, [pc, #136]	; (800778c <HAL_TIM_Base_Start_IT+0xd4>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d018      	beq.n	8007738 <HAL_TIM_Base_Start_IT+0x80>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	4a21      	ldr	r2, [pc, #132]	; (8007790 <HAL_TIM_Base_Start_IT+0xd8>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d013      	beq.n	8007738 <HAL_TIM_Base_Start_IT+0x80>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4a1f      	ldr	r2, [pc, #124]	; (8007794 <HAL_TIM_Base_Start_IT+0xdc>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d00e      	beq.n	8007738 <HAL_TIM_Base_Start_IT+0x80>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	4a1e      	ldr	r2, [pc, #120]	; (8007798 <HAL_TIM_Base_Start_IT+0xe0>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d009      	beq.n	8007738 <HAL_TIM_Base_Start_IT+0x80>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4a1c      	ldr	r2, [pc, #112]	; (800779c <HAL_TIM_Base_Start_IT+0xe4>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d004      	beq.n	8007738 <HAL_TIM_Base_Start_IT+0x80>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	4a1b      	ldr	r2, [pc, #108]	; (80077a0 <HAL_TIM_Base_Start_IT+0xe8>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d115      	bne.n	8007764 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	689a      	ldr	r2, [r3, #8]
 800773e:	4b19      	ldr	r3, [pc, #100]	; (80077a4 <HAL_TIM_Base_Start_IT+0xec>)
 8007740:	4013      	ands	r3, r2
 8007742:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	2b06      	cmp	r3, #6
 8007748:	d015      	beq.n	8007776 <HAL_TIM_Base_Start_IT+0xbe>
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007750:	d011      	beq.n	8007776 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	681a      	ldr	r2, [r3, #0]
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f042 0201 	orr.w	r2, r2, #1
 8007760:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007762:	e008      	b.n	8007776 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	681a      	ldr	r2, [r3, #0]
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f042 0201 	orr.w	r2, r2, #1
 8007772:	601a      	str	r2, [r3, #0]
 8007774:	e000      	b.n	8007778 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007776:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007778:	2300      	movs	r3, #0
}
 800777a:	4618      	mov	r0, r3
 800777c:	3714      	adds	r7, #20
 800777e:	46bd      	mov	sp, r7
 8007780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007784:	4770      	bx	lr
 8007786:	bf00      	nop
 8007788:	40010000 	.word	0x40010000
 800778c:	40000400 	.word	0x40000400
 8007790:	40000800 	.word	0x40000800
 8007794:	40000c00 	.word	0x40000c00
 8007798:	40010400 	.word	0x40010400
 800779c:	40014000 	.word	0x40014000
 80077a0:	40001800 	.word	0x40001800
 80077a4:	00010007 	.word	0x00010007

080077a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b082      	sub	sp, #8
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	691b      	ldr	r3, [r3, #16]
 80077b6:	f003 0302 	and.w	r3, r3, #2
 80077ba:	2b02      	cmp	r3, #2
 80077bc:	d122      	bne.n	8007804 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	68db      	ldr	r3, [r3, #12]
 80077c4:	f003 0302 	and.w	r3, r3, #2
 80077c8:	2b02      	cmp	r3, #2
 80077ca:	d11b      	bne.n	8007804 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f06f 0202 	mvn.w	r2, #2
 80077d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2201      	movs	r2, #1
 80077da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	699b      	ldr	r3, [r3, #24]
 80077e2:	f003 0303 	and.w	r3, r3, #3
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d003      	beq.n	80077f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f000 f905 	bl	80079fa <HAL_TIM_IC_CaptureCallback>
 80077f0:	e005      	b.n	80077fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f000 f8f7 	bl	80079e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	f000 f908 	bl	8007a0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2200      	movs	r2, #0
 8007802:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	691b      	ldr	r3, [r3, #16]
 800780a:	f003 0304 	and.w	r3, r3, #4
 800780e:	2b04      	cmp	r3, #4
 8007810:	d122      	bne.n	8007858 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	68db      	ldr	r3, [r3, #12]
 8007818:	f003 0304 	and.w	r3, r3, #4
 800781c:	2b04      	cmp	r3, #4
 800781e:	d11b      	bne.n	8007858 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f06f 0204 	mvn.w	r2, #4
 8007828:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2202      	movs	r2, #2
 800782e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	699b      	ldr	r3, [r3, #24]
 8007836:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800783a:	2b00      	cmp	r3, #0
 800783c:	d003      	beq.n	8007846 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f000 f8db 	bl	80079fa <HAL_TIM_IC_CaptureCallback>
 8007844:	e005      	b.n	8007852 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f000 f8cd 	bl	80079e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f000 f8de 	bl	8007a0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2200      	movs	r2, #0
 8007856:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	691b      	ldr	r3, [r3, #16]
 800785e:	f003 0308 	and.w	r3, r3, #8
 8007862:	2b08      	cmp	r3, #8
 8007864:	d122      	bne.n	80078ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	68db      	ldr	r3, [r3, #12]
 800786c:	f003 0308 	and.w	r3, r3, #8
 8007870:	2b08      	cmp	r3, #8
 8007872:	d11b      	bne.n	80078ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f06f 0208 	mvn.w	r2, #8
 800787c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2204      	movs	r2, #4
 8007882:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	69db      	ldr	r3, [r3, #28]
 800788a:	f003 0303 	and.w	r3, r3, #3
 800788e:	2b00      	cmp	r3, #0
 8007890:	d003      	beq.n	800789a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f000 f8b1 	bl	80079fa <HAL_TIM_IC_CaptureCallback>
 8007898:	e005      	b.n	80078a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f000 f8a3 	bl	80079e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f000 f8b4 	bl	8007a0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2200      	movs	r2, #0
 80078aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	691b      	ldr	r3, [r3, #16]
 80078b2:	f003 0310 	and.w	r3, r3, #16
 80078b6:	2b10      	cmp	r3, #16
 80078b8:	d122      	bne.n	8007900 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	68db      	ldr	r3, [r3, #12]
 80078c0:	f003 0310 	and.w	r3, r3, #16
 80078c4:	2b10      	cmp	r3, #16
 80078c6:	d11b      	bne.n	8007900 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f06f 0210 	mvn.w	r2, #16
 80078d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2208      	movs	r2, #8
 80078d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	69db      	ldr	r3, [r3, #28]
 80078de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d003      	beq.n	80078ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f000 f887 	bl	80079fa <HAL_TIM_IC_CaptureCallback>
 80078ec:	e005      	b.n	80078fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	f000 f879 	bl	80079e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f000 f88a 	bl	8007a0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2200      	movs	r2, #0
 80078fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	691b      	ldr	r3, [r3, #16]
 8007906:	f003 0301 	and.w	r3, r3, #1
 800790a:	2b01      	cmp	r3, #1
 800790c:	d10e      	bne.n	800792c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	68db      	ldr	r3, [r3, #12]
 8007914:	f003 0301 	and.w	r3, r3, #1
 8007918:	2b01      	cmp	r3, #1
 800791a:	d107      	bne.n	800792c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f06f 0201 	mvn.w	r2, #1
 8007924:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f7f9 fab2 	bl	8000e90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	691b      	ldr	r3, [r3, #16]
 8007932:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007936:	2b80      	cmp	r3, #128	; 0x80
 8007938:	d10e      	bne.n	8007958 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	68db      	ldr	r3, [r3, #12]
 8007940:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007944:	2b80      	cmp	r3, #128	; 0x80
 8007946:	d107      	bne.n	8007958 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007950:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f000 f91a 	bl	8007b8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	691b      	ldr	r3, [r3, #16]
 800795e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007962:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007966:	d10e      	bne.n	8007986 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	68db      	ldr	r3, [r3, #12]
 800796e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007972:	2b80      	cmp	r3, #128	; 0x80
 8007974:	d107      	bne.n	8007986 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800797e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	f000 f90d 	bl	8007ba0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	691b      	ldr	r3, [r3, #16]
 800798c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007990:	2b40      	cmp	r3, #64	; 0x40
 8007992:	d10e      	bne.n	80079b2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	68db      	ldr	r3, [r3, #12]
 800799a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800799e:	2b40      	cmp	r3, #64	; 0x40
 80079a0:	d107      	bne.n	80079b2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80079aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f000 f838 	bl	8007a22 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	691b      	ldr	r3, [r3, #16]
 80079b8:	f003 0320 	and.w	r3, r3, #32
 80079bc:	2b20      	cmp	r3, #32
 80079be:	d10e      	bne.n	80079de <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	68db      	ldr	r3, [r3, #12]
 80079c6:	f003 0320 	and.w	r3, r3, #32
 80079ca:	2b20      	cmp	r3, #32
 80079cc:	d107      	bne.n	80079de <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f06f 0220 	mvn.w	r2, #32
 80079d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	f000 f8cd 	bl	8007b78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80079de:	bf00      	nop
 80079e0:	3708      	adds	r7, #8
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd80      	pop	{r7, pc}

080079e6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80079e6:	b480      	push	{r7}
 80079e8:	b083      	sub	sp, #12
 80079ea:	af00      	add	r7, sp, #0
 80079ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80079ee:	bf00      	nop
 80079f0:	370c      	adds	r7, #12
 80079f2:	46bd      	mov	sp, r7
 80079f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f8:	4770      	bx	lr

080079fa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80079fa:	b480      	push	{r7}
 80079fc:	b083      	sub	sp, #12
 80079fe:	af00      	add	r7, sp, #0
 8007a00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007a02:	bf00      	nop
 8007a04:	370c      	adds	r7, #12
 8007a06:	46bd      	mov	sp, r7
 8007a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0c:	4770      	bx	lr

08007a0e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007a0e:	b480      	push	{r7}
 8007a10:	b083      	sub	sp, #12
 8007a12:	af00      	add	r7, sp, #0
 8007a14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007a16:	bf00      	nop
 8007a18:	370c      	adds	r7, #12
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a20:	4770      	bx	lr

08007a22 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007a22:	b480      	push	{r7}
 8007a24:	b083      	sub	sp, #12
 8007a26:	af00      	add	r7, sp, #0
 8007a28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007a2a:	bf00      	nop
 8007a2c:	370c      	adds	r7, #12
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a34:	4770      	bx	lr
	...

08007a38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007a38:	b480      	push	{r7}
 8007a3a:	b085      	sub	sp, #20
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
 8007a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	4a40      	ldr	r2, [pc, #256]	; (8007b4c <TIM_Base_SetConfig+0x114>)
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d013      	beq.n	8007a78 <TIM_Base_SetConfig+0x40>
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a56:	d00f      	beq.n	8007a78 <TIM_Base_SetConfig+0x40>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	4a3d      	ldr	r2, [pc, #244]	; (8007b50 <TIM_Base_SetConfig+0x118>)
 8007a5c:	4293      	cmp	r3, r2
 8007a5e:	d00b      	beq.n	8007a78 <TIM_Base_SetConfig+0x40>
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	4a3c      	ldr	r2, [pc, #240]	; (8007b54 <TIM_Base_SetConfig+0x11c>)
 8007a64:	4293      	cmp	r3, r2
 8007a66:	d007      	beq.n	8007a78 <TIM_Base_SetConfig+0x40>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	4a3b      	ldr	r2, [pc, #236]	; (8007b58 <TIM_Base_SetConfig+0x120>)
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d003      	beq.n	8007a78 <TIM_Base_SetConfig+0x40>
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	4a3a      	ldr	r2, [pc, #232]	; (8007b5c <TIM_Base_SetConfig+0x124>)
 8007a74:	4293      	cmp	r3, r2
 8007a76:	d108      	bne.n	8007a8a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	685b      	ldr	r3, [r3, #4]
 8007a84:	68fa      	ldr	r2, [r7, #12]
 8007a86:	4313      	orrs	r3, r2
 8007a88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	4a2f      	ldr	r2, [pc, #188]	; (8007b4c <TIM_Base_SetConfig+0x114>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d02b      	beq.n	8007aea <TIM_Base_SetConfig+0xb2>
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a98:	d027      	beq.n	8007aea <TIM_Base_SetConfig+0xb2>
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	4a2c      	ldr	r2, [pc, #176]	; (8007b50 <TIM_Base_SetConfig+0x118>)
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d023      	beq.n	8007aea <TIM_Base_SetConfig+0xb2>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	4a2b      	ldr	r2, [pc, #172]	; (8007b54 <TIM_Base_SetConfig+0x11c>)
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d01f      	beq.n	8007aea <TIM_Base_SetConfig+0xb2>
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	4a2a      	ldr	r2, [pc, #168]	; (8007b58 <TIM_Base_SetConfig+0x120>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d01b      	beq.n	8007aea <TIM_Base_SetConfig+0xb2>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	4a29      	ldr	r2, [pc, #164]	; (8007b5c <TIM_Base_SetConfig+0x124>)
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d017      	beq.n	8007aea <TIM_Base_SetConfig+0xb2>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	4a28      	ldr	r2, [pc, #160]	; (8007b60 <TIM_Base_SetConfig+0x128>)
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d013      	beq.n	8007aea <TIM_Base_SetConfig+0xb2>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	4a27      	ldr	r2, [pc, #156]	; (8007b64 <TIM_Base_SetConfig+0x12c>)
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d00f      	beq.n	8007aea <TIM_Base_SetConfig+0xb2>
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	4a26      	ldr	r2, [pc, #152]	; (8007b68 <TIM_Base_SetConfig+0x130>)
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d00b      	beq.n	8007aea <TIM_Base_SetConfig+0xb2>
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	4a25      	ldr	r2, [pc, #148]	; (8007b6c <TIM_Base_SetConfig+0x134>)
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	d007      	beq.n	8007aea <TIM_Base_SetConfig+0xb2>
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	4a24      	ldr	r2, [pc, #144]	; (8007b70 <TIM_Base_SetConfig+0x138>)
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d003      	beq.n	8007aea <TIM_Base_SetConfig+0xb2>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	4a23      	ldr	r2, [pc, #140]	; (8007b74 <TIM_Base_SetConfig+0x13c>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d108      	bne.n	8007afc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007af0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	68db      	ldr	r3, [r3, #12]
 8007af6:	68fa      	ldr	r2, [r7, #12]
 8007af8:	4313      	orrs	r3, r2
 8007afa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	695b      	ldr	r3, [r3, #20]
 8007b06:	4313      	orrs	r3, r2
 8007b08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	68fa      	ldr	r2, [r7, #12]
 8007b0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	689a      	ldr	r2, [r3, #8]
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	681a      	ldr	r2, [r3, #0]
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	4a0a      	ldr	r2, [pc, #40]	; (8007b4c <TIM_Base_SetConfig+0x114>)
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d003      	beq.n	8007b30 <TIM_Base_SetConfig+0xf8>
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	4a0c      	ldr	r2, [pc, #48]	; (8007b5c <TIM_Base_SetConfig+0x124>)
 8007b2c:	4293      	cmp	r3, r2
 8007b2e:	d103      	bne.n	8007b38 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	691a      	ldr	r2, [r3, #16]
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2201      	movs	r2, #1
 8007b3c:	615a      	str	r2, [r3, #20]
}
 8007b3e:	bf00      	nop
 8007b40:	3714      	adds	r7, #20
 8007b42:	46bd      	mov	sp, r7
 8007b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b48:	4770      	bx	lr
 8007b4a:	bf00      	nop
 8007b4c:	40010000 	.word	0x40010000
 8007b50:	40000400 	.word	0x40000400
 8007b54:	40000800 	.word	0x40000800
 8007b58:	40000c00 	.word	0x40000c00
 8007b5c:	40010400 	.word	0x40010400
 8007b60:	40014000 	.word	0x40014000
 8007b64:	40014400 	.word	0x40014400
 8007b68:	40014800 	.word	0x40014800
 8007b6c:	40001800 	.word	0x40001800
 8007b70:	40001c00 	.word	0x40001c00
 8007b74:	40002000 	.word	0x40002000

08007b78 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007b78:	b480      	push	{r7}
 8007b7a:	b083      	sub	sp, #12
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007b80:	bf00      	nop
 8007b82:	370c      	adds	r7, #12
 8007b84:	46bd      	mov	sp, r7
 8007b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8a:	4770      	bx	lr

08007b8c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b083      	sub	sp, #12
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007b94:	bf00      	nop
 8007b96:	370c      	adds	r7, #12
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9e:	4770      	bx	lr

08007ba0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	b083      	sub	sp, #12
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007ba8:	bf00      	nop
 8007baa:	370c      	adds	r7, #12
 8007bac:	46bd      	mov	sp, r7
 8007bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb2:	4770      	bx	lr

08007bb4 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	b083      	sub	sp, #12
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
 8007bbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d121      	bne.n	8007c0a <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681a      	ldr	r2, [r3, #0]
 8007bca:	4b27      	ldr	r3, [pc, #156]	; (8007c68 <FMC_SDRAM_Init+0xb4>)
 8007bcc:	4013      	ands	r3, r2
 8007bce:	683a      	ldr	r2, [r7, #0]
 8007bd0:	6851      	ldr	r1, [r2, #4]
 8007bd2:	683a      	ldr	r2, [r7, #0]
 8007bd4:	6892      	ldr	r2, [r2, #8]
 8007bd6:	4311      	orrs	r1, r2
 8007bd8:	683a      	ldr	r2, [r7, #0]
 8007bda:	68d2      	ldr	r2, [r2, #12]
 8007bdc:	4311      	orrs	r1, r2
 8007bde:	683a      	ldr	r2, [r7, #0]
 8007be0:	6912      	ldr	r2, [r2, #16]
 8007be2:	4311      	orrs	r1, r2
 8007be4:	683a      	ldr	r2, [r7, #0]
 8007be6:	6952      	ldr	r2, [r2, #20]
 8007be8:	4311      	orrs	r1, r2
 8007bea:	683a      	ldr	r2, [r7, #0]
 8007bec:	6992      	ldr	r2, [r2, #24]
 8007bee:	4311      	orrs	r1, r2
 8007bf0:	683a      	ldr	r2, [r7, #0]
 8007bf2:	69d2      	ldr	r2, [r2, #28]
 8007bf4:	4311      	orrs	r1, r2
 8007bf6:	683a      	ldr	r2, [r7, #0]
 8007bf8:	6a12      	ldr	r2, [r2, #32]
 8007bfa:	4311      	orrs	r1, r2
 8007bfc:	683a      	ldr	r2, [r7, #0]
 8007bfe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007c00:	430a      	orrs	r2, r1
 8007c02:	431a      	orrs	r2, r3
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	601a      	str	r2, [r3, #0]
 8007c08:	e026      	b.n	8007c58 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	69d9      	ldr	r1, [r3, #28]
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	6a1b      	ldr	r3, [r3, #32]
 8007c1a:	4319      	orrs	r1, r3
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c20:	430b      	orrs	r3, r1
 8007c22:	431a      	orrs	r2, r3
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	685a      	ldr	r2, [r3, #4]
 8007c2c:	4b0e      	ldr	r3, [pc, #56]	; (8007c68 <FMC_SDRAM_Init+0xb4>)
 8007c2e:	4013      	ands	r3, r2
 8007c30:	683a      	ldr	r2, [r7, #0]
 8007c32:	6851      	ldr	r1, [r2, #4]
 8007c34:	683a      	ldr	r2, [r7, #0]
 8007c36:	6892      	ldr	r2, [r2, #8]
 8007c38:	4311      	orrs	r1, r2
 8007c3a:	683a      	ldr	r2, [r7, #0]
 8007c3c:	68d2      	ldr	r2, [r2, #12]
 8007c3e:	4311      	orrs	r1, r2
 8007c40:	683a      	ldr	r2, [r7, #0]
 8007c42:	6912      	ldr	r2, [r2, #16]
 8007c44:	4311      	orrs	r1, r2
 8007c46:	683a      	ldr	r2, [r7, #0]
 8007c48:	6952      	ldr	r2, [r2, #20]
 8007c4a:	4311      	orrs	r1, r2
 8007c4c:	683a      	ldr	r2, [r7, #0]
 8007c4e:	6992      	ldr	r2, [r2, #24]
 8007c50:	430a      	orrs	r2, r1
 8007c52:	431a      	orrs	r2, r3
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8007c58:	2300      	movs	r3, #0
}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	370c      	adds	r7, #12
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c64:	4770      	bx	lr
 8007c66:	bf00      	nop
 8007c68:	ffff8000 	.word	0xffff8000

08007c6c <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b085      	sub	sp, #20
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	60f8      	str	r0, [r7, #12]
 8007c74:	60b9      	str	r1, [r7, #8]
 8007c76:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d128      	bne.n	8007cd0 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	689b      	ldr	r3, [r3, #8]
 8007c82:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	1e59      	subs	r1, r3, #1
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	685b      	ldr	r3, [r3, #4]
 8007c90:	3b01      	subs	r3, #1
 8007c92:	011b      	lsls	r3, r3, #4
 8007c94:	4319      	orrs	r1, r3
 8007c96:	68bb      	ldr	r3, [r7, #8]
 8007c98:	689b      	ldr	r3, [r3, #8]
 8007c9a:	3b01      	subs	r3, #1
 8007c9c:	021b      	lsls	r3, r3, #8
 8007c9e:	4319      	orrs	r1, r3
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	68db      	ldr	r3, [r3, #12]
 8007ca4:	3b01      	subs	r3, #1
 8007ca6:	031b      	lsls	r3, r3, #12
 8007ca8:	4319      	orrs	r1, r3
 8007caa:	68bb      	ldr	r3, [r7, #8]
 8007cac:	691b      	ldr	r3, [r3, #16]
 8007cae:	3b01      	subs	r3, #1
 8007cb0:	041b      	lsls	r3, r3, #16
 8007cb2:	4319      	orrs	r1, r3
 8007cb4:	68bb      	ldr	r3, [r7, #8]
 8007cb6:	695b      	ldr	r3, [r3, #20]
 8007cb8:	3b01      	subs	r3, #1
 8007cba:	051b      	lsls	r3, r3, #20
 8007cbc:	4319      	orrs	r1, r3
 8007cbe:	68bb      	ldr	r3, [r7, #8]
 8007cc0:	699b      	ldr	r3, [r3, #24]
 8007cc2:	3b01      	subs	r3, #1
 8007cc4:	061b      	lsls	r3, r3, #24
 8007cc6:	430b      	orrs	r3, r1
 8007cc8:	431a      	orrs	r2, r3
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	609a      	str	r2, [r3, #8]
 8007cce:	e02d      	b.n	8007d2c <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	689a      	ldr	r2, [r3, #8]
 8007cd4:	4b19      	ldr	r3, [pc, #100]	; (8007d3c <FMC_SDRAM_Timing_Init+0xd0>)
 8007cd6:	4013      	ands	r3, r2
 8007cd8:	68ba      	ldr	r2, [r7, #8]
 8007cda:	68d2      	ldr	r2, [r2, #12]
 8007cdc:	3a01      	subs	r2, #1
 8007cde:	0311      	lsls	r1, r2, #12
 8007ce0:	68ba      	ldr	r2, [r7, #8]
 8007ce2:	6952      	ldr	r2, [r2, #20]
 8007ce4:	3a01      	subs	r2, #1
 8007ce6:	0512      	lsls	r2, r2, #20
 8007ce8:	430a      	orrs	r2, r1
 8007cea:	431a      	orrs	r2, r3
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	68db      	ldr	r3, [r3, #12]
 8007cf4:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	1e59      	subs	r1, r3, #1
 8007cfe:	68bb      	ldr	r3, [r7, #8]
 8007d00:	685b      	ldr	r3, [r3, #4]
 8007d02:	3b01      	subs	r3, #1
 8007d04:	011b      	lsls	r3, r3, #4
 8007d06:	4319      	orrs	r1, r3
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	689b      	ldr	r3, [r3, #8]
 8007d0c:	3b01      	subs	r3, #1
 8007d0e:	021b      	lsls	r3, r3, #8
 8007d10:	4319      	orrs	r1, r3
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	691b      	ldr	r3, [r3, #16]
 8007d16:	3b01      	subs	r3, #1
 8007d18:	041b      	lsls	r3, r3, #16
 8007d1a:	4319      	orrs	r1, r3
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	699b      	ldr	r3, [r3, #24]
 8007d20:	3b01      	subs	r3, #1
 8007d22:	061b      	lsls	r3, r3, #24
 8007d24:	430b      	orrs	r3, r1
 8007d26:	431a      	orrs	r2, r3
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8007d2c:	2300      	movs	r3, #0
}
 8007d2e:	4618      	mov	r0, r3
 8007d30:	3714      	adds	r7, #20
 8007d32:	46bd      	mov	sp, r7
 8007d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d38:	4770      	bx	lr
 8007d3a:	bf00      	nop
 8007d3c:	ff0f0fff 	.word	0xff0f0fff

08007d40 <MX_LIBJPEG_Init>:
/* USER CODE BEGIN 2 */
/* USER CODE END 2 */

/* LIBJPEG init function */
void MX_LIBJPEG_Init(void)
{
 8007d40:	b480      	push	{r7}
 8007d42:	af00      	add	r7, sp, #0
  */

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 8007d44:	bf00      	nop
 8007d46:	46bd      	mov	sp, r7
 8007d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4c:	4770      	bx	lr

08007d4e <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007d4e:	b480      	push	{r7}
 8007d50:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8007d52:	bf00      	nop
 8007d54:	46bd      	mov	sp, r7
 8007d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5a:	4770      	bx	lr

08007d5c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007d5c:	b480      	push	{r7}
 8007d5e:	b085      	sub	sp, #20
 8007d60:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d62:	f3ef 8305 	mrs	r3, IPSR
 8007d66:	60bb      	str	r3, [r7, #8]
  return(result);
 8007d68:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d10f      	bne.n	8007d8e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d6e:	f3ef 8310 	mrs	r3, PRIMASK
 8007d72:	607b      	str	r3, [r7, #4]
  return(result);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d105      	bne.n	8007d86 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007d7a:	f3ef 8311 	mrs	r3, BASEPRI
 8007d7e:	603b      	str	r3, [r7, #0]
  return(result);
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d007      	beq.n	8007d96 <osKernelInitialize+0x3a>
 8007d86:	4b0e      	ldr	r3, [pc, #56]	; (8007dc0 <osKernelInitialize+0x64>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	2b02      	cmp	r3, #2
 8007d8c:	d103      	bne.n	8007d96 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8007d8e:	f06f 0305 	mvn.w	r3, #5
 8007d92:	60fb      	str	r3, [r7, #12]
 8007d94:	e00c      	b.n	8007db0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007d96:	4b0a      	ldr	r3, [pc, #40]	; (8007dc0 <osKernelInitialize+0x64>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d105      	bne.n	8007daa <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007d9e:	4b08      	ldr	r3, [pc, #32]	; (8007dc0 <osKernelInitialize+0x64>)
 8007da0:	2201      	movs	r2, #1
 8007da2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007da4:	2300      	movs	r3, #0
 8007da6:	60fb      	str	r3, [r7, #12]
 8007da8:	e002      	b.n	8007db0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8007daa:	f04f 33ff 	mov.w	r3, #4294967295
 8007dae:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007db0:	68fb      	ldr	r3, [r7, #12]
}
 8007db2:	4618      	mov	r0, r3
 8007db4:	3714      	adds	r7, #20
 8007db6:	46bd      	mov	sp, r7
 8007db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbc:	4770      	bx	lr
 8007dbe:	bf00      	nop
 8007dc0:	20009b20 	.word	0x20009b20

08007dc4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b084      	sub	sp, #16
 8007dc8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007dca:	f3ef 8305 	mrs	r3, IPSR
 8007dce:	60bb      	str	r3, [r7, #8]
  return(result);
 8007dd0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d10f      	bne.n	8007df6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007dd6:	f3ef 8310 	mrs	r3, PRIMASK
 8007dda:	607b      	str	r3, [r7, #4]
  return(result);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d105      	bne.n	8007dee <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007de2:	f3ef 8311 	mrs	r3, BASEPRI
 8007de6:	603b      	str	r3, [r7, #0]
  return(result);
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d007      	beq.n	8007dfe <osKernelStart+0x3a>
 8007dee:	4b0f      	ldr	r3, [pc, #60]	; (8007e2c <osKernelStart+0x68>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	2b02      	cmp	r3, #2
 8007df4:	d103      	bne.n	8007dfe <osKernelStart+0x3a>
    stat = osErrorISR;
 8007df6:	f06f 0305 	mvn.w	r3, #5
 8007dfa:	60fb      	str	r3, [r7, #12]
 8007dfc:	e010      	b.n	8007e20 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007dfe:	4b0b      	ldr	r3, [pc, #44]	; (8007e2c <osKernelStart+0x68>)
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	2b01      	cmp	r3, #1
 8007e04:	d109      	bne.n	8007e1a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007e06:	f7ff ffa2 	bl	8007d4e <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007e0a:	4b08      	ldr	r3, [pc, #32]	; (8007e2c <osKernelStart+0x68>)
 8007e0c:	2202      	movs	r2, #2
 8007e0e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007e10:	f002 fc70 	bl	800a6f4 <vTaskStartScheduler>
      stat = osOK;
 8007e14:	2300      	movs	r3, #0
 8007e16:	60fb      	str	r3, [r7, #12]
 8007e18:	e002      	b.n	8007e20 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8007e1a:	f04f 33ff 	mov.w	r3, #4294967295
 8007e1e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007e20:	68fb      	ldr	r3, [r7, #12]
}
 8007e22:	4618      	mov	r0, r3
 8007e24:	3710      	adds	r7, #16
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bd80      	pop	{r7, pc}
 8007e2a:	bf00      	nop
 8007e2c:	20009b20 	.word	0x20009b20

08007e30 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b090      	sub	sp, #64	; 0x40
 8007e34:	af04      	add	r7, sp, #16
 8007e36:	60f8      	str	r0, [r7, #12]
 8007e38:	60b9      	str	r1, [r7, #8]
 8007e3a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007e40:	f3ef 8305 	mrs	r3, IPSR
 8007e44:	61fb      	str	r3, [r7, #28]
  return(result);
 8007e46:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	f040 808f 	bne.w	8007f6c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e4e:	f3ef 8310 	mrs	r3, PRIMASK
 8007e52:	61bb      	str	r3, [r7, #24]
  return(result);
 8007e54:	69bb      	ldr	r3, [r7, #24]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d105      	bne.n	8007e66 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007e5a:	f3ef 8311 	mrs	r3, BASEPRI
 8007e5e:	617b      	str	r3, [r7, #20]
  return(result);
 8007e60:	697b      	ldr	r3, [r7, #20]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d003      	beq.n	8007e6e <osThreadNew+0x3e>
 8007e66:	4b44      	ldr	r3, [pc, #272]	; (8007f78 <osThreadNew+0x148>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	2b02      	cmp	r3, #2
 8007e6c:	d07e      	beq.n	8007f6c <osThreadNew+0x13c>
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d07b      	beq.n	8007f6c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8007e74:	2380      	movs	r3, #128	; 0x80
 8007e76:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8007e78:	2318      	movs	r3, #24
 8007e7a:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8007e80:	f04f 33ff 	mov.w	r3, #4294967295
 8007e84:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d045      	beq.n	8007f18 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d002      	beq.n	8007e9a <osThreadNew+0x6a>
        name = attr->name;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	699b      	ldr	r3, [r3, #24]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d002      	beq.n	8007ea8 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	699b      	ldr	r3, [r3, #24]
 8007ea6:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d008      	beq.n	8007ec0 <osThreadNew+0x90>
 8007eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eb0:	2b38      	cmp	r3, #56	; 0x38
 8007eb2:	d805      	bhi.n	8007ec0 <osThreadNew+0x90>
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	685b      	ldr	r3, [r3, #4]
 8007eb8:	f003 0301 	and.w	r3, r3, #1
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d001      	beq.n	8007ec4 <osThreadNew+0x94>
        return (NULL);
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	e054      	b.n	8007f6e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	695b      	ldr	r3, [r3, #20]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d003      	beq.n	8007ed4 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	695b      	ldr	r3, [r3, #20]
 8007ed0:	089b      	lsrs	r3, r3, #2
 8007ed2:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	689b      	ldr	r3, [r3, #8]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d00e      	beq.n	8007efa <osThreadNew+0xca>
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	68db      	ldr	r3, [r3, #12]
 8007ee0:	2b5b      	cmp	r3, #91	; 0x5b
 8007ee2:	d90a      	bls.n	8007efa <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d006      	beq.n	8007efa <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	695b      	ldr	r3, [r3, #20]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d002      	beq.n	8007efa <osThreadNew+0xca>
        mem = 1;
 8007ef4:	2301      	movs	r3, #1
 8007ef6:	623b      	str	r3, [r7, #32]
 8007ef8:	e010      	b.n	8007f1c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	689b      	ldr	r3, [r3, #8]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d10c      	bne.n	8007f1c <osThreadNew+0xec>
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	68db      	ldr	r3, [r3, #12]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d108      	bne.n	8007f1c <osThreadNew+0xec>
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	691b      	ldr	r3, [r3, #16]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d104      	bne.n	8007f1c <osThreadNew+0xec>
          mem = 0;
 8007f12:	2300      	movs	r3, #0
 8007f14:	623b      	str	r3, [r7, #32]
 8007f16:	e001      	b.n	8007f1c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8007f18:	2300      	movs	r3, #0
 8007f1a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8007f1c:	6a3b      	ldr	r3, [r7, #32]
 8007f1e:	2b01      	cmp	r3, #1
 8007f20:	d110      	bne.n	8007f44 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8007f26:	687a      	ldr	r2, [r7, #4]
 8007f28:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007f2a:	9202      	str	r2, [sp, #8]
 8007f2c:	9301      	str	r3, [sp, #4]
 8007f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f30:	9300      	str	r3, [sp, #0]
 8007f32:	68bb      	ldr	r3, [r7, #8]
 8007f34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007f38:	68f8      	ldr	r0, [r7, #12]
 8007f3a:	f002 f9fb 	bl	800a334 <xTaskCreateStatic>
 8007f3e:	4603      	mov	r3, r0
 8007f40:	613b      	str	r3, [r7, #16]
 8007f42:	e013      	b.n	8007f6c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8007f44:	6a3b      	ldr	r3, [r7, #32]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d110      	bne.n	8007f6c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f4c:	b29a      	uxth	r2, r3
 8007f4e:	f107 0310 	add.w	r3, r7, #16
 8007f52:	9301      	str	r3, [sp, #4]
 8007f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f56:	9300      	str	r3, [sp, #0]
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007f5c:	68f8      	ldr	r0, [r7, #12]
 8007f5e:	f002 fa4c 	bl	800a3fa <xTaskCreate>
 8007f62:	4603      	mov	r3, r0
 8007f64:	2b01      	cmp	r3, #1
 8007f66:	d001      	beq.n	8007f6c <osThreadNew+0x13c>
          hTask = NULL;
 8007f68:	2300      	movs	r3, #0
 8007f6a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007f6c:	693b      	ldr	r3, [r7, #16]
}
 8007f6e:	4618      	mov	r0, r3
 8007f70:	3730      	adds	r7, #48	; 0x30
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd80      	pop	{r7, pc}
 8007f76:	bf00      	nop
 8007f78:	20009b20 	.word	0x20009b20

08007f7c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b086      	sub	sp, #24
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f84:	f3ef 8305 	mrs	r3, IPSR
 8007f88:	613b      	str	r3, [r7, #16]
  return(result);
 8007f8a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d10f      	bne.n	8007fb0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f90:	f3ef 8310 	mrs	r3, PRIMASK
 8007f94:	60fb      	str	r3, [r7, #12]
  return(result);
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d105      	bne.n	8007fa8 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007f9c:	f3ef 8311 	mrs	r3, BASEPRI
 8007fa0:	60bb      	str	r3, [r7, #8]
  return(result);
 8007fa2:	68bb      	ldr	r3, [r7, #8]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d007      	beq.n	8007fb8 <osDelay+0x3c>
 8007fa8:	4b0a      	ldr	r3, [pc, #40]	; (8007fd4 <osDelay+0x58>)
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	2b02      	cmp	r3, #2
 8007fae:	d103      	bne.n	8007fb8 <osDelay+0x3c>
    stat = osErrorISR;
 8007fb0:	f06f 0305 	mvn.w	r3, #5
 8007fb4:	617b      	str	r3, [r7, #20]
 8007fb6:	e007      	b.n	8007fc8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8007fb8:	2300      	movs	r3, #0
 8007fba:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d002      	beq.n	8007fc8 <osDelay+0x4c>
      vTaskDelay(ticks);
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	f002 fb60 	bl	800a688 <vTaskDelay>
    }
  }

  return (stat);
 8007fc8:	697b      	ldr	r3, [r7, #20]
}
 8007fca:	4618      	mov	r0, r3
 8007fcc:	3718      	adds	r7, #24
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	bd80      	pop	{r7, pc}
 8007fd2:	bf00      	nop
 8007fd4:	20009b20 	.word	0x20009b20

08007fd8 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b08a      	sub	sp, #40	; 0x28
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007fe4:	f3ef 8305 	mrs	r3, IPSR
 8007fe8:	613b      	str	r3, [r7, #16]
  return(result);
 8007fea:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	f040 8085 	bne.w	80080fc <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ff2:	f3ef 8310 	mrs	r3, PRIMASK
 8007ff6:	60fb      	str	r3, [r7, #12]
  return(result);
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d105      	bne.n	800800a <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007ffe:	f3ef 8311 	mrs	r3, BASEPRI
 8008002:	60bb      	str	r3, [r7, #8]
  return(result);
 8008004:	68bb      	ldr	r3, [r7, #8]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d003      	beq.n	8008012 <osMutexNew+0x3a>
 800800a:	4b3f      	ldr	r3, [pc, #252]	; (8008108 <osMutexNew+0x130>)
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	2b02      	cmp	r3, #2
 8008010:	d074      	beq.n	80080fc <osMutexNew+0x124>
    if (attr != NULL) {
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d003      	beq.n	8008020 <osMutexNew+0x48>
      type = attr->attr_bits;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	685b      	ldr	r3, [r3, #4]
 800801c:	623b      	str	r3, [r7, #32]
 800801e:	e001      	b.n	8008024 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8008020:	2300      	movs	r3, #0
 8008022:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8008024:	6a3b      	ldr	r3, [r7, #32]
 8008026:	f003 0301 	and.w	r3, r3, #1
 800802a:	2b00      	cmp	r3, #0
 800802c:	d002      	beq.n	8008034 <osMutexNew+0x5c>
      rmtx = 1U;
 800802e:	2301      	movs	r3, #1
 8008030:	61fb      	str	r3, [r7, #28]
 8008032:	e001      	b.n	8008038 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8008034:	2300      	movs	r3, #0
 8008036:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8008038:	6a3b      	ldr	r3, [r7, #32]
 800803a:	f003 0308 	and.w	r3, r3, #8
 800803e:	2b00      	cmp	r3, #0
 8008040:	d15c      	bne.n	80080fc <osMutexNew+0x124>
      mem = -1;
 8008042:	f04f 33ff 	mov.w	r3, #4294967295
 8008046:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d015      	beq.n	800807a <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	689b      	ldr	r3, [r3, #8]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d006      	beq.n	8008064 <osMutexNew+0x8c>
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	68db      	ldr	r3, [r3, #12]
 800805a:	2b4f      	cmp	r3, #79	; 0x4f
 800805c:	d902      	bls.n	8008064 <osMutexNew+0x8c>
          mem = 1;
 800805e:	2301      	movs	r3, #1
 8008060:	61bb      	str	r3, [r7, #24]
 8008062:	e00c      	b.n	800807e <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	689b      	ldr	r3, [r3, #8]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d108      	bne.n	800807e <osMutexNew+0xa6>
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	68db      	ldr	r3, [r3, #12]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d104      	bne.n	800807e <osMutexNew+0xa6>
            mem = 0;
 8008074:	2300      	movs	r3, #0
 8008076:	61bb      	str	r3, [r7, #24]
 8008078:	e001      	b.n	800807e <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 800807a:	2300      	movs	r3, #0
 800807c:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800807e:	69bb      	ldr	r3, [r7, #24]
 8008080:	2b01      	cmp	r3, #1
 8008082:	d112      	bne.n	80080aa <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8008084:	69fb      	ldr	r3, [r7, #28]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d007      	beq.n	800809a <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	689b      	ldr	r3, [r3, #8]
 800808e:	4619      	mov	r1, r3
 8008090:	2004      	movs	r0, #4
 8008092:	f001 f9c2 	bl	800941a <xQueueCreateMutexStatic>
 8008096:	6278      	str	r0, [r7, #36]	; 0x24
 8008098:	e016      	b.n	80080c8 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	689b      	ldr	r3, [r3, #8]
 800809e:	4619      	mov	r1, r3
 80080a0:	2001      	movs	r0, #1
 80080a2:	f001 f9ba 	bl	800941a <xQueueCreateMutexStatic>
 80080a6:	6278      	str	r0, [r7, #36]	; 0x24
 80080a8:	e00e      	b.n	80080c8 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 80080aa:	69bb      	ldr	r3, [r7, #24]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d10b      	bne.n	80080c8 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 80080b0:	69fb      	ldr	r3, [r7, #28]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d004      	beq.n	80080c0 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 80080b6:	2004      	movs	r0, #4
 80080b8:	f001 f997 	bl	80093ea <xQueueCreateMutex>
 80080bc:	6278      	str	r0, [r7, #36]	; 0x24
 80080be:	e003      	b.n	80080c8 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 80080c0:	2001      	movs	r0, #1
 80080c2:	f001 f992 	bl	80093ea <xQueueCreateMutex>
 80080c6:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80080c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d00c      	beq.n	80080e8 <osMutexNew+0x110>
        if (attr != NULL) {
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d003      	beq.n	80080dc <osMutexNew+0x104>
          name = attr->name;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	617b      	str	r3, [r7, #20]
 80080da:	e001      	b.n	80080e0 <osMutexNew+0x108>
        } else {
          name = NULL;
 80080dc:	2300      	movs	r3, #0
 80080de:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 80080e0:	6979      	ldr	r1, [r7, #20]
 80080e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80080e4:	f002 f89e 	bl	800a224 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80080e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d006      	beq.n	80080fc <osMutexNew+0x124>
 80080ee:	69fb      	ldr	r3, [r7, #28]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d003      	beq.n	80080fc <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80080f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080f6:	f043 0301 	orr.w	r3, r3, #1
 80080fa:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80080fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80080fe:	4618      	mov	r0, r3
 8008100:	3728      	adds	r7, #40	; 0x28
 8008102:	46bd      	mov	sp, r7
 8008104:	bd80      	pop	{r7, pc}
 8008106:	bf00      	nop
 8008108:	20009b20 	.word	0x20009b20

0800810c <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800810c:	b580      	push	{r7, lr}
 800810e:	b088      	sub	sp, #32
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
 8008114:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	f023 0301 	bic.w	r3, r3, #1
 800811c:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	f003 0301 	and.w	r3, r3, #1
 8008124:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8008126:	2300      	movs	r3, #0
 8008128:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800812a:	f3ef 8305 	mrs	r3, IPSR
 800812e:	613b      	str	r3, [r7, #16]
  return(result);
 8008130:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8008132:	2b00      	cmp	r3, #0
 8008134:	d10f      	bne.n	8008156 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008136:	f3ef 8310 	mrs	r3, PRIMASK
 800813a:	60fb      	str	r3, [r7, #12]
  return(result);
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d105      	bne.n	800814e <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008142:	f3ef 8311 	mrs	r3, BASEPRI
 8008146:	60bb      	str	r3, [r7, #8]
  return(result);
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d007      	beq.n	800815e <osMutexAcquire+0x52>
 800814e:	4b1d      	ldr	r3, [pc, #116]	; (80081c4 <osMutexAcquire+0xb8>)
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	2b02      	cmp	r3, #2
 8008154:	d103      	bne.n	800815e <osMutexAcquire+0x52>
    stat = osErrorISR;
 8008156:	f06f 0305 	mvn.w	r3, #5
 800815a:	61fb      	str	r3, [r7, #28]
 800815c:	e02c      	b.n	80081b8 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 800815e:	69bb      	ldr	r3, [r7, #24]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d103      	bne.n	800816c <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8008164:	f06f 0303 	mvn.w	r3, #3
 8008168:	61fb      	str	r3, [r7, #28]
 800816a:	e025      	b.n	80081b8 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 800816c:	697b      	ldr	r3, [r7, #20]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d011      	beq.n	8008196 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8008172:	6839      	ldr	r1, [r7, #0]
 8008174:	69b8      	ldr	r0, [r7, #24]
 8008176:	f001 f9a1 	bl	80094bc <xQueueTakeMutexRecursive>
 800817a:	4603      	mov	r3, r0
 800817c:	2b01      	cmp	r3, #1
 800817e:	d01b      	beq.n	80081b8 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d003      	beq.n	800818e <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8008186:	f06f 0301 	mvn.w	r3, #1
 800818a:	61fb      	str	r3, [r7, #28]
 800818c:	e014      	b.n	80081b8 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800818e:	f06f 0302 	mvn.w	r3, #2
 8008192:	61fb      	str	r3, [r7, #28]
 8008194:	e010      	b.n	80081b8 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8008196:	6839      	ldr	r1, [r7, #0]
 8008198:	69b8      	ldr	r0, [r7, #24]
 800819a:	f001 fd5b 	bl	8009c54 <xQueueSemaphoreTake>
 800819e:	4603      	mov	r3, r0
 80081a0:	2b01      	cmp	r3, #1
 80081a2:	d009      	beq.n	80081b8 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d003      	beq.n	80081b2 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 80081aa:	f06f 0301 	mvn.w	r3, #1
 80081ae:	61fb      	str	r3, [r7, #28]
 80081b0:	e002      	b.n	80081b8 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 80081b2:	f06f 0302 	mvn.w	r3, #2
 80081b6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80081b8:	69fb      	ldr	r3, [r7, #28]
}
 80081ba:	4618      	mov	r0, r3
 80081bc:	3720      	adds	r7, #32
 80081be:	46bd      	mov	sp, r7
 80081c0:	bd80      	pop	{r7, pc}
 80081c2:	bf00      	nop
 80081c4:	20009b20 	.word	0x20009b20

080081c8 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b088      	sub	sp, #32
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f023 0301 	bic.w	r3, r3, #1
 80081d6:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	f003 0301 	and.w	r3, r3, #1
 80081de:	617b      	str	r3, [r7, #20]

  stat = osOK;
 80081e0:	2300      	movs	r3, #0
 80081e2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80081e4:	f3ef 8305 	mrs	r3, IPSR
 80081e8:	613b      	str	r3, [r7, #16]
  return(result);
 80081ea:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d10f      	bne.n	8008210 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80081f0:	f3ef 8310 	mrs	r3, PRIMASK
 80081f4:	60fb      	str	r3, [r7, #12]
  return(result);
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d105      	bne.n	8008208 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80081fc:	f3ef 8311 	mrs	r3, BASEPRI
 8008200:	60bb      	str	r3, [r7, #8]
  return(result);
 8008202:	68bb      	ldr	r3, [r7, #8]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d007      	beq.n	8008218 <osMutexRelease+0x50>
 8008208:	4b16      	ldr	r3, [pc, #88]	; (8008264 <osMutexRelease+0x9c>)
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	2b02      	cmp	r3, #2
 800820e:	d103      	bne.n	8008218 <osMutexRelease+0x50>
    stat = osErrorISR;
 8008210:	f06f 0305 	mvn.w	r3, #5
 8008214:	61fb      	str	r3, [r7, #28]
 8008216:	e01f      	b.n	8008258 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8008218:	69bb      	ldr	r3, [r7, #24]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d103      	bne.n	8008226 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 800821e:	f06f 0303 	mvn.w	r3, #3
 8008222:	61fb      	str	r3, [r7, #28]
 8008224:	e018      	b.n	8008258 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8008226:	697b      	ldr	r3, [r7, #20]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d009      	beq.n	8008240 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800822c:	69b8      	ldr	r0, [r7, #24]
 800822e:	f001 f90f 	bl	8009450 <xQueueGiveMutexRecursive>
 8008232:	4603      	mov	r3, r0
 8008234:	2b01      	cmp	r3, #1
 8008236:	d00f      	beq.n	8008258 <osMutexRelease+0x90>
        stat = osErrorResource;
 8008238:	f06f 0302 	mvn.w	r3, #2
 800823c:	61fb      	str	r3, [r7, #28]
 800823e:	e00b      	b.n	8008258 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8008240:	2300      	movs	r3, #0
 8008242:	2200      	movs	r2, #0
 8008244:	2100      	movs	r1, #0
 8008246:	69b8      	ldr	r0, [r7, #24]
 8008248:	f001 f9e2 	bl	8009610 <xQueueGenericSend>
 800824c:	4603      	mov	r3, r0
 800824e:	2b01      	cmp	r3, #1
 8008250:	d002      	beq.n	8008258 <osMutexRelease+0x90>
        stat = osErrorResource;
 8008252:	f06f 0302 	mvn.w	r3, #2
 8008256:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8008258:	69fb      	ldr	r3, [r7, #28]
}
 800825a:	4618      	mov	r0, r3
 800825c:	3720      	adds	r7, #32
 800825e:	46bd      	mov	sp, r7
 8008260:	bd80      	pop	{r7, pc}
 8008262:	bf00      	nop
 8008264:	20009b20 	.word	0x20009b20

08008268 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8008268:	b580      	push	{r7, lr}
 800826a:	b08c      	sub	sp, #48	; 0x30
 800826c:	af02      	add	r7, sp, #8
 800826e:	60f8      	str	r0, [r7, #12]
 8008270:	60b9      	str	r1, [r7, #8]
 8008272:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8008274:	2300      	movs	r3, #0
 8008276:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008278:	f3ef 8305 	mrs	r3, IPSR
 800827c:	61bb      	str	r3, [r7, #24]
  return(result);
 800827e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8008280:	2b00      	cmp	r3, #0
 8008282:	f040 8086 	bne.w	8008392 <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008286:	f3ef 8310 	mrs	r3, PRIMASK
 800828a:	617b      	str	r3, [r7, #20]
  return(result);
 800828c:	697b      	ldr	r3, [r7, #20]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d105      	bne.n	800829e <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008292:	f3ef 8311 	mrs	r3, BASEPRI
 8008296:	613b      	str	r3, [r7, #16]
  return(result);
 8008298:	693b      	ldr	r3, [r7, #16]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d003      	beq.n	80082a6 <osSemaphoreNew+0x3e>
 800829e:	4b3f      	ldr	r3, [pc, #252]	; (800839c <osSemaphoreNew+0x134>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	2b02      	cmp	r3, #2
 80082a4:	d075      	beq.n	8008392 <osSemaphoreNew+0x12a>
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d072      	beq.n	8008392 <osSemaphoreNew+0x12a>
 80082ac:	68ba      	ldr	r2, [r7, #8]
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	429a      	cmp	r2, r3
 80082b2:	d86e      	bhi.n	8008392 <osSemaphoreNew+0x12a>
    mem = -1;
 80082b4:	f04f 33ff 	mov.w	r3, #4294967295
 80082b8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d015      	beq.n	80082ec <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	689b      	ldr	r3, [r3, #8]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d006      	beq.n	80082d6 <osSemaphoreNew+0x6e>
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	68db      	ldr	r3, [r3, #12]
 80082cc:	2b4f      	cmp	r3, #79	; 0x4f
 80082ce:	d902      	bls.n	80082d6 <osSemaphoreNew+0x6e>
        mem = 1;
 80082d0:	2301      	movs	r3, #1
 80082d2:	623b      	str	r3, [r7, #32]
 80082d4:	e00c      	b.n	80082f0 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	689b      	ldr	r3, [r3, #8]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d108      	bne.n	80082f0 <osSemaphoreNew+0x88>
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	68db      	ldr	r3, [r3, #12]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d104      	bne.n	80082f0 <osSemaphoreNew+0x88>
          mem = 0;
 80082e6:	2300      	movs	r3, #0
 80082e8:	623b      	str	r3, [r7, #32]
 80082ea:	e001      	b.n	80082f0 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 80082ec:	2300      	movs	r3, #0
 80082ee:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 80082f0:	6a3b      	ldr	r3, [r7, #32]
 80082f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082f6:	d04c      	beq.n	8008392 <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	2b01      	cmp	r3, #1
 80082fc:	d128      	bne.n	8008350 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 80082fe:	6a3b      	ldr	r3, [r7, #32]
 8008300:	2b01      	cmp	r3, #1
 8008302:	d10a      	bne.n	800831a <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	689b      	ldr	r3, [r3, #8]
 8008308:	2203      	movs	r2, #3
 800830a:	9200      	str	r2, [sp, #0]
 800830c:	2200      	movs	r2, #0
 800830e:	2100      	movs	r1, #0
 8008310:	2001      	movs	r0, #1
 8008312:	f000 ff69 	bl	80091e8 <xQueueGenericCreateStatic>
 8008316:	6278      	str	r0, [r7, #36]	; 0x24
 8008318:	e005      	b.n	8008326 <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800831a:	2203      	movs	r2, #3
 800831c:	2100      	movs	r1, #0
 800831e:	2001      	movs	r0, #1
 8008320:	f000 ffe4 	bl	80092ec <xQueueGenericCreate>
 8008324:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8008326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008328:	2b00      	cmp	r3, #0
 800832a:	d022      	beq.n	8008372 <osSemaphoreNew+0x10a>
 800832c:	68bb      	ldr	r3, [r7, #8]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d01f      	beq.n	8008372 <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008332:	2300      	movs	r3, #0
 8008334:	2200      	movs	r2, #0
 8008336:	2100      	movs	r1, #0
 8008338:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800833a:	f001 f969 	bl	8009610 <xQueueGenericSend>
 800833e:	4603      	mov	r3, r0
 8008340:	2b01      	cmp	r3, #1
 8008342:	d016      	beq.n	8008372 <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8008344:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008346:	f001 fe1f 	bl	8009f88 <vQueueDelete>
            hSemaphore = NULL;
 800834a:	2300      	movs	r3, #0
 800834c:	627b      	str	r3, [r7, #36]	; 0x24
 800834e:	e010      	b.n	8008372 <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8008350:	6a3b      	ldr	r3, [r7, #32]
 8008352:	2b01      	cmp	r3, #1
 8008354:	d108      	bne.n	8008368 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	689b      	ldr	r3, [r3, #8]
 800835a:	461a      	mov	r2, r3
 800835c:	68b9      	ldr	r1, [r7, #8]
 800835e:	68f8      	ldr	r0, [r7, #12]
 8008360:	f001 f8e4 	bl	800952c <xQueueCreateCountingSemaphoreStatic>
 8008364:	6278      	str	r0, [r7, #36]	; 0x24
 8008366:	e004      	b.n	8008372 <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8008368:	68b9      	ldr	r1, [r7, #8]
 800836a:	68f8      	ldr	r0, [r7, #12]
 800836c:	f001 f919 	bl	80095a2 <xQueueCreateCountingSemaphore>
 8008370:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8008372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008374:	2b00      	cmp	r3, #0
 8008376:	d00c      	beq.n	8008392 <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d003      	beq.n	8008386 <osSemaphoreNew+0x11e>
          name = attr->name;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	61fb      	str	r3, [r7, #28]
 8008384:	e001      	b.n	800838a <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 8008386:	2300      	movs	r3, #0
 8008388:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800838a:	69f9      	ldr	r1, [r7, #28]
 800838c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800838e:	f001 ff49 	bl	800a224 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8008392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008394:	4618      	mov	r0, r3
 8008396:	3728      	adds	r7, #40	; 0x28
 8008398:	46bd      	mov	sp, r7
 800839a:	bd80      	pop	{r7, pc}
 800839c:	20009b20 	.word	0x20009b20

080083a0 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b088      	sub	sp, #32
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
 80083a8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80083ae:	2300      	movs	r3, #0
 80083b0:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80083b2:	69bb      	ldr	r3, [r7, #24]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d103      	bne.n	80083c0 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80083b8:	f06f 0303 	mvn.w	r3, #3
 80083bc:	61fb      	str	r3, [r7, #28]
 80083be:	e04b      	b.n	8008458 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80083c0:	f3ef 8305 	mrs	r3, IPSR
 80083c4:	617b      	str	r3, [r7, #20]
  return(result);
 80083c6:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d10f      	bne.n	80083ec <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80083cc:	f3ef 8310 	mrs	r3, PRIMASK
 80083d0:	613b      	str	r3, [r7, #16]
  return(result);
 80083d2:	693b      	ldr	r3, [r7, #16]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d105      	bne.n	80083e4 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80083d8:	f3ef 8311 	mrs	r3, BASEPRI
 80083dc:	60fb      	str	r3, [r7, #12]
  return(result);
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d026      	beq.n	8008432 <osSemaphoreAcquire+0x92>
 80083e4:	4b1f      	ldr	r3, [pc, #124]	; (8008464 <osSemaphoreAcquire+0xc4>)
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	2b02      	cmp	r3, #2
 80083ea:	d122      	bne.n	8008432 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d003      	beq.n	80083fa <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 80083f2:	f06f 0303 	mvn.w	r3, #3
 80083f6:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80083f8:	e02d      	b.n	8008456 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 80083fa:	2300      	movs	r3, #0
 80083fc:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80083fe:	f107 0308 	add.w	r3, r7, #8
 8008402:	461a      	mov	r2, r3
 8008404:	2100      	movs	r1, #0
 8008406:	69b8      	ldr	r0, [r7, #24]
 8008408:	f001 fd38 	bl	8009e7c <xQueueReceiveFromISR>
 800840c:	4603      	mov	r3, r0
 800840e:	2b01      	cmp	r3, #1
 8008410:	d003      	beq.n	800841a <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8008412:	f06f 0302 	mvn.w	r3, #2
 8008416:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8008418:	e01d      	b.n	8008456 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d01a      	beq.n	8008456 <osSemaphoreAcquire+0xb6>
 8008420:	4b11      	ldr	r3, [pc, #68]	; (8008468 <osSemaphoreAcquire+0xc8>)
 8008422:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008426:	601a      	str	r2, [r3, #0]
 8008428:	f3bf 8f4f 	dsb	sy
 800842c:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8008430:	e011      	b.n	8008456 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8008432:	6839      	ldr	r1, [r7, #0]
 8008434:	69b8      	ldr	r0, [r7, #24]
 8008436:	f001 fc0d 	bl	8009c54 <xQueueSemaphoreTake>
 800843a:	4603      	mov	r3, r0
 800843c:	2b01      	cmp	r3, #1
 800843e:	d00b      	beq.n	8008458 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d003      	beq.n	800844e <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8008446:	f06f 0301 	mvn.w	r3, #1
 800844a:	61fb      	str	r3, [r7, #28]
 800844c:	e004      	b.n	8008458 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 800844e:	f06f 0302 	mvn.w	r3, #2
 8008452:	61fb      	str	r3, [r7, #28]
 8008454:	e000      	b.n	8008458 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8008456:	bf00      	nop
      }
    }
  }

  return (stat);
 8008458:	69fb      	ldr	r3, [r7, #28]
}
 800845a:	4618      	mov	r0, r3
 800845c:	3720      	adds	r7, #32
 800845e:	46bd      	mov	sp, r7
 8008460:	bd80      	pop	{r7, pc}
 8008462:	bf00      	nop
 8008464:	20009b20 	.word	0x20009b20
 8008468:	e000ed04 	.word	0xe000ed04

0800846c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800846c:	b580      	push	{r7, lr}
 800846e:	b088      	sub	sp, #32
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8008478:	2300      	movs	r3, #0
 800847a:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800847c:	69bb      	ldr	r3, [r7, #24]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d103      	bne.n	800848a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8008482:	f06f 0303 	mvn.w	r3, #3
 8008486:	61fb      	str	r3, [r7, #28]
 8008488:	e03e      	b.n	8008508 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800848a:	f3ef 8305 	mrs	r3, IPSR
 800848e:	617b      	str	r3, [r7, #20]
  return(result);
 8008490:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8008492:	2b00      	cmp	r3, #0
 8008494:	d10f      	bne.n	80084b6 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008496:	f3ef 8310 	mrs	r3, PRIMASK
 800849a:	613b      	str	r3, [r7, #16]
  return(result);
 800849c:	693b      	ldr	r3, [r7, #16]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d105      	bne.n	80084ae <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80084a2:	f3ef 8311 	mrs	r3, BASEPRI
 80084a6:	60fb      	str	r3, [r7, #12]
  return(result);
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d01e      	beq.n	80084ec <osSemaphoreRelease+0x80>
 80084ae:	4b19      	ldr	r3, [pc, #100]	; (8008514 <osSemaphoreRelease+0xa8>)
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	2b02      	cmp	r3, #2
 80084b4:	d11a      	bne.n	80084ec <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 80084b6:	2300      	movs	r3, #0
 80084b8:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80084ba:	f107 0308 	add.w	r3, r7, #8
 80084be:	4619      	mov	r1, r3
 80084c0:	69b8      	ldr	r0, [r7, #24]
 80084c2:	f001 fa4b 	bl	800995c <xQueueGiveFromISR>
 80084c6:	4603      	mov	r3, r0
 80084c8:	2b01      	cmp	r3, #1
 80084ca:	d003      	beq.n	80084d4 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 80084cc:	f06f 0302 	mvn.w	r3, #2
 80084d0:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80084d2:	e018      	b.n	8008506 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 80084d4:	68bb      	ldr	r3, [r7, #8]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d015      	beq.n	8008506 <osSemaphoreRelease+0x9a>
 80084da:	4b0f      	ldr	r3, [pc, #60]	; (8008518 <osSemaphoreRelease+0xac>)
 80084dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084e0:	601a      	str	r2, [r3, #0]
 80084e2:	f3bf 8f4f 	dsb	sy
 80084e6:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80084ea:	e00c      	b.n	8008506 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80084ec:	2300      	movs	r3, #0
 80084ee:	2200      	movs	r2, #0
 80084f0:	2100      	movs	r1, #0
 80084f2:	69b8      	ldr	r0, [r7, #24]
 80084f4:	f001 f88c 	bl	8009610 <xQueueGenericSend>
 80084f8:	4603      	mov	r3, r0
 80084fa:	2b01      	cmp	r3, #1
 80084fc:	d004      	beq.n	8008508 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 80084fe:	f06f 0302 	mvn.w	r3, #2
 8008502:	61fb      	str	r3, [r7, #28]
 8008504:	e000      	b.n	8008508 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8008506:	bf00      	nop
    }
  }

  return (stat);
 8008508:	69fb      	ldr	r3, [r7, #28]
}
 800850a:	4618      	mov	r0, r3
 800850c:	3720      	adds	r7, #32
 800850e:	46bd      	mov	sp, r7
 8008510:	bd80      	pop	{r7, pc}
 8008512:	bf00      	nop
 8008514:	20009b20 	.word	0x20009b20
 8008518:	e000ed04 	.word	0xe000ed04

0800851c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800851c:	b580      	push	{r7, lr}
 800851e:	b08c      	sub	sp, #48	; 0x30
 8008520:	af02      	add	r7, sp, #8
 8008522:	60f8      	str	r0, [r7, #12]
 8008524:	60b9      	str	r1, [r7, #8]
 8008526:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8008528:	2300      	movs	r3, #0
 800852a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800852c:	f3ef 8305 	mrs	r3, IPSR
 8008530:	61bb      	str	r3, [r7, #24]
  return(result);
 8008532:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8008534:	2b00      	cmp	r3, #0
 8008536:	d16f      	bne.n	8008618 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008538:	f3ef 8310 	mrs	r3, PRIMASK
 800853c:	617b      	str	r3, [r7, #20]
  return(result);
 800853e:	697b      	ldr	r3, [r7, #20]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d105      	bne.n	8008550 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008544:	f3ef 8311 	mrs	r3, BASEPRI
 8008548:	613b      	str	r3, [r7, #16]
  return(result);
 800854a:	693b      	ldr	r3, [r7, #16]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d003      	beq.n	8008558 <osMessageQueueNew+0x3c>
 8008550:	4b34      	ldr	r3, [pc, #208]	; (8008624 <osMessageQueueNew+0x108>)
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	2b02      	cmp	r3, #2
 8008556:	d05f      	beq.n	8008618 <osMessageQueueNew+0xfc>
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d05c      	beq.n	8008618 <osMessageQueueNew+0xfc>
 800855e:	68bb      	ldr	r3, [r7, #8]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d059      	beq.n	8008618 <osMessageQueueNew+0xfc>
    mem = -1;
 8008564:	f04f 33ff 	mov.w	r3, #4294967295
 8008568:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d029      	beq.n	80085c4 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	689b      	ldr	r3, [r3, #8]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d012      	beq.n	800859e <osMessageQueueNew+0x82>
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	68db      	ldr	r3, [r3, #12]
 800857c:	2b4f      	cmp	r3, #79	; 0x4f
 800857e:	d90e      	bls.n	800859e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008584:	2b00      	cmp	r3, #0
 8008586:	d00a      	beq.n	800859e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	695a      	ldr	r2, [r3, #20]
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	68b9      	ldr	r1, [r7, #8]
 8008590:	fb01 f303 	mul.w	r3, r1, r3
 8008594:	429a      	cmp	r2, r3
 8008596:	d302      	bcc.n	800859e <osMessageQueueNew+0x82>
        mem = 1;
 8008598:	2301      	movs	r3, #1
 800859a:	623b      	str	r3, [r7, #32]
 800859c:	e014      	b.n	80085c8 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	689b      	ldr	r3, [r3, #8]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d110      	bne.n	80085c8 <osMessageQueueNew+0xac>
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	68db      	ldr	r3, [r3, #12]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d10c      	bne.n	80085c8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d108      	bne.n	80085c8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	695b      	ldr	r3, [r3, #20]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d104      	bne.n	80085c8 <osMessageQueueNew+0xac>
          mem = 0;
 80085be:	2300      	movs	r3, #0
 80085c0:	623b      	str	r3, [r7, #32]
 80085c2:	e001      	b.n	80085c8 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 80085c4:	2300      	movs	r3, #0
 80085c6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80085c8:	6a3b      	ldr	r3, [r7, #32]
 80085ca:	2b01      	cmp	r3, #1
 80085cc:	d10b      	bne.n	80085e6 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	691a      	ldr	r2, [r3, #16]
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	689b      	ldr	r3, [r3, #8]
 80085d6:	2100      	movs	r1, #0
 80085d8:	9100      	str	r1, [sp, #0]
 80085da:	68b9      	ldr	r1, [r7, #8]
 80085dc:	68f8      	ldr	r0, [r7, #12]
 80085de:	f000 fe03 	bl	80091e8 <xQueueGenericCreateStatic>
 80085e2:	6278      	str	r0, [r7, #36]	; 0x24
 80085e4:	e008      	b.n	80085f8 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 80085e6:	6a3b      	ldr	r3, [r7, #32]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d105      	bne.n	80085f8 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 80085ec:	2200      	movs	r2, #0
 80085ee:	68b9      	ldr	r1, [r7, #8]
 80085f0:	68f8      	ldr	r0, [r7, #12]
 80085f2:	f000 fe7b 	bl	80092ec <xQueueGenericCreate>
 80085f6:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80085f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d00c      	beq.n	8008618 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d003      	beq.n	800860c <osMessageQueueNew+0xf0>
        name = attr->name;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	61fb      	str	r3, [r7, #28]
 800860a:	e001      	b.n	8008610 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 800860c:	2300      	movs	r3, #0
 800860e:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8008610:	69f9      	ldr	r1, [r7, #28]
 8008612:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008614:	f001 fe06 	bl	800a224 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8008618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800861a:	4618      	mov	r0, r3
 800861c:	3728      	adds	r7, #40	; 0x28
 800861e:	46bd      	mov	sp, r7
 8008620:	bd80      	pop	{r7, pc}
 8008622:	bf00      	nop
 8008624:	20009b20 	.word	0x20009b20

08008628 <osMessageQueueGet>:
  }

  return (stat);
}

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8008628:	b580      	push	{r7, lr}
 800862a:	b08a      	sub	sp, #40	; 0x28
 800862c:	af00      	add	r7, sp, #0
 800862e:	60f8      	str	r0, [r7, #12]
 8008630:	60b9      	str	r1, [r7, #8]
 8008632:	607a      	str	r2, [r7, #4]
 8008634:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800863a:	2300      	movs	r3, #0
 800863c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800863e:	f3ef 8305 	mrs	r3, IPSR
 8008642:	61fb      	str	r3, [r7, #28]
  return(result);
 8008644:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8008646:	2b00      	cmp	r3, #0
 8008648:	d10f      	bne.n	800866a <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800864a:	f3ef 8310 	mrs	r3, PRIMASK
 800864e:	61bb      	str	r3, [r7, #24]
  return(result);
 8008650:	69bb      	ldr	r3, [r7, #24]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d105      	bne.n	8008662 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008656:	f3ef 8311 	mrs	r3, BASEPRI
 800865a:	617b      	str	r3, [r7, #20]
  return(result);
 800865c:	697b      	ldr	r3, [r7, #20]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d02c      	beq.n	80086bc <osMessageQueueGet+0x94>
 8008662:	4b28      	ldr	r3, [pc, #160]	; (8008704 <osMessageQueueGet+0xdc>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	2b02      	cmp	r3, #2
 8008668:	d128      	bne.n	80086bc <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800866a:	6a3b      	ldr	r3, [r7, #32]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d005      	beq.n	800867c <osMessageQueueGet+0x54>
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d002      	beq.n	800867c <osMessageQueueGet+0x54>
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d003      	beq.n	8008684 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800867c:	f06f 0303 	mvn.w	r3, #3
 8008680:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008682:	e038      	b.n	80086f6 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8008684:	2300      	movs	r3, #0
 8008686:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8008688:	f107 0310 	add.w	r3, r7, #16
 800868c:	461a      	mov	r2, r3
 800868e:	68b9      	ldr	r1, [r7, #8]
 8008690:	6a38      	ldr	r0, [r7, #32]
 8008692:	f001 fbf3 	bl	8009e7c <xQueueReceiveFromISR>
 8008696:	4603      	mov	r3, r0
 8008698:	2b01      	cmp	r3, #1
 800869a:	d003      	beq.n	80086a4 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800869c:	f06f 0302 	mvn.w	r3, #2
 80086a0:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80086a2:	e028      	b.n	80086f6 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 80086a4:	693b      	ldr	r3, [r7, #16]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d025      	beq.n	80086f6 <osMessageQueueGet+0xce>
 80086aa:	4b17      	ldr	r3, [pc, #92]	; (8008708 <osMessageQueueGet+0xe0>)
 80086ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086b0:	601a      	str	r2, [r3, #0]
 80086b2:	f3bf 8f4f 	dsb	sy
 80086b6:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80086ba:	e01c      	b.n	80086f6 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80086bc:	6a3b      	ldr	r3, [r7, #32]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d002      	beq.n	80086c8 <osMessageQueueGet+0xa0>
 80086c2:	68bb      	ldr	r3, [r7, #8]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d103      	bne.n	80086d0 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 80086c8:	f06f 0303 	mvn.w	r3, #3
 80086cc:	627b      	str	r3, [r7, #36]	; 0x24
 80086ce:	e013      	b.n	80086f8 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80086d0:	683a      	ldr	r2, [r7, #0]
 80086d2:	68b9      	ldr	r1, [r7, #8]
 80086d4:	6a38      	ldr	r0, [r7, #32]
 80086d6:	f001 f9d7 	bl	8009a88 <xQueueReceive>
 80086da:	4603      	mov	r3, r0
 80086dc:	2b01      	cmp	r3, #1
 80086de:	d00b      	beq.n	80086f8 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d003      	beq.n	80086ee <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 80086e6:	f06f 0301 	mvn.w	r3, #1
 80086ea:	627b      	str	r3, [r7, #36]	; 0x24
 80086ec:	e004      	b.n	80086f8 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 80086ee:	f06f 0302 	mvn.w	r3, #2
 80086f2:	627b      	str	r3, [r7, #36]	; 0x24
 80086f4:	e000      	b.n	80086f8 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80086f6:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80086f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80086fa:	4618      	mov	r0, r3
 80086fc:	3728      	adds	r7, #40	; 0x28
 80086fe:	46bd      	mov	sp, r7
 8008700:	bd80      	pop	{r7, pc}
 8008702:	bf00      	nop
 8008704:	20009b20 	.word	0x20009b20
 8008708:	e000ed04 	.word	0xe000ed04

0800870c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800870c:	b480      	push	{r7}
 800870e:	b085      	sub	sp, #20
 8008710:	af00      	add	r7, sp, #0
 8008712:	60f8      	str	r0, [r7, #12]
 8008714:	60b9      	str	r1, [r7, #8]
 8008716:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	4a07      	ldr	r2, [pc, #28]	; (8008738 <vApplicationGetIdleTaskMemory+0x2c>)
 800871c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800871e:	68bb      	ldr	r3, [r7, #8]
 8008720:	4a06      	ldr	r2, [pc, #24]	; (800873c <vApplicationGetIdleTaskMemory+0x30>)
 8008722:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2280      	movs	r2, #128	; 0x80
 8008728:	601a      	str	r2, [r3, #0]
}
 800872a:	bf00      	nop
 800872c:	3714      	adds	r7, #20
 800872e:	46bd      	mov	sp, r7
 8008730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008734:	4770      	bx	lr
 8008736:	bf00      	nop
 8008738:	20009b24 	.word	0x20009b24
 800873c:	20009b80 	.word	0x20009b80

08008740 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008740:	b480      	push	{r7}
 8008742:	b085      	sub	sp, #20
 8008744:	af00      	add	r7, sp, #0
 8008746:	60f8      	str	r0, [r7, #12]
 8008748:	60b9      	str	r1, [r7, #8]
 800874a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	4a07      	ldr	r2, [pc, #28]	; (800876c <vApplicationGetTimerTaskMemory+0x2c>)
 8008750:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008752:	68bb      	ldr	r3, [r7, #8]
 8008754:	4a06      	ldr	r2, [pc, #24]	; (8008770 <vApplicationGetTimerTaskMemory+0x30>)
 8008756:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800875e:	601a      	str	r2, [r3, #0]
}
 8008760:	bf00      	nop
 8008762:	3714      	adds	r7, #20
 8008764:	46bd      	mov	sp, r7
 8008766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876a:	4770      	bx	lr
 800876c:	20009d80 	.word	0x20009d80
 8008770:	20009ddc 	.word	0x20009ddc

08008774 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b08a      	sub	sp, #40	; 0x28
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800877c:	2300      	movs	r3, #0
 800877e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008780:	f002 f822 	bl	800a7c8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008784:	4b5b      	ldr	r3, [pc, #364]	; (80088f4 <pvPortMalloc+0x180>)
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d101      	bne.n	8008790 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800878c:	f000 f91a 	bl	80089c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008790:	4b59      	ldr	r3, [pc, #356]	; (80088f8 <pvPortMalloc+0x184>)
 8008792:	681a      	ldr	r2, [r3, #0]
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	4013      	ands	r3, r2
 8008798:	2b00      	cmp	r3, #0
 800879a:	f040 8092 	bne.w	80088c2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d01f      	beq.n	80087e4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 80087a4:	2208      	movs	r2, #8
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	4413      	add	r3, r2
 80087aa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f003 0307 	and.w	r3, r3, #7
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d016      	beq.n	80087e4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	f023 0307 	bic.w	r3, r3, #7
 80087bc:	3308      	adds	r3, #8
 80087be:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	f003 0307 	and.w	r3, r3, #7
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d00c      	beq.n	80087e4 <pvPortMalloc+0x70>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80087ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087ce:	b672      	cpsid	i
 80087d0:	f383 8811 	msr	BASEPRI, r3
 80087d4:	f3bf 8f6f 	isb	sy
 80087d8:	f3bf 8f4f 	dsb	sy
 80087dc:	b662      	cpsie	i
 80087de:	617b      	str	r3, [r7, #20]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80087e0:	bf00      	nop
 80087e2:	e7fe      	b.n	80087e2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d06b      	beq.n	80088c2 <pvPortMalloc+0x14e>
 80087ea:	4b44      	ldr	r3, [pc, #272]	; (80088fc <pvPortMalloc+0x188>)
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	687a      	ldr	r2, [r7, #4]
 80087f0:	429a      	cmp	r2, r3
 80087f2:	d866      	bhi.n	80088c2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80087f4:	4b42      	ldr	r3, [pc, #264]	; (8008900 <pvPortMalloc+0x18c>)
 80087f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80087f8:	4b41      	ldr	r3, [pc, #260]	; (8008900 <pvPortMalloc+0x18c>)
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80087fe:	e004      	b.n	800880a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8008800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008802:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800880a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800880c:	685b      	ldr	r3, [r3, #4]
 800880e:	687a      	ldr	r2, [r7, #4]
 8008810:	429a      	cmp	r2, r3
 8008812:	d903      	bls.n	800881c <pvPortMalloc+0xa8>
 8008814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d1f1      	bne.n	8008800 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800881c:	4b35      	ldr	r3, [pc, #212]	; (80088f4 <pvPortMalloc+0x180>)
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008822:	429a      	cmp	r2, r3
 8008824:	d04d      	beq.n	80088c2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008826:	6a3b      	ldr	r3, [r7, #32]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	2208      	movs	r2, #8
 800882c:	4413      	add	r3, r2
 800882e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008832:	681a      	ldr	r2, [r3, #0]
 8008834:	6a3b      	ldr	r3, [r7, #32]
 8008836:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800883a:	685a      	ldr	r2, [r3, #4]
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	1ad2      	subs	r2, r2, r3
 8008840:	2308      	movs	r3, #8
 8008842:	005b      	lsls	r3, r3, #1
 8008844:	429a      	cmp	r2, r3
 8008846:	d921      	bls.n	800888c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008848:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	4413      	add	r3, r2
 800884e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008850:	69bb      	ldr	r3, [r7, #24]
 8008852:	f003 0307 	and.w	r3, r3, #7
 8008856:	2b00      	cmp	r3, #0
 8008858:	d00c      	beq.n	8008874 <pvPortMalloc+0x100>
	__asm volatile
 800885a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800885e:	b672      	cpsid	i
 8008860:	f383 8811 	msr	BASEPRI, r3
 8008864:	f3bf 8f6f 	isb	sy
 8008868:	f3bf 8f4f 	dsb	sy
 800886c:	b662      	cpsie	i
 800886e:	613b      	str	r3, [r7, #16]
}
 8008870:	bf00      	nop
 8008872:	e7fe      	b.n	8008872 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008876:	685a      	ldr	r2, [r3, #4]
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	1ad2      	subs	r2, r2, r3
 800887c:	69bb      	ldr	r3, [r7, #24]
 800887e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008882:	687a      	ldr	r2, [r7, #4]
 8008884:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008886:	69b8      	ldr	r0, [r7, #24]
 8008888:	f000 f900 	bl	8008a8c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800888c:	4b1b      	ldr	r3, [pc, #108]	; (80088fc <pvPortMalloc+0x188>)
 800888e:	681a      	ldr	r2, [r3, #0]
 8008890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008892:	685b      	ldr	r3, [r3, #4]
 8008894:	1ad3      	subs	r3, r2, r3
 8008896:	4a19      	ldr	r2, [pc, #100]	; (80088fc <pvPortMalloc+0x188>)
 8008898:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800889a:	4b18      	ldr	r3, [pc, #96]	; (80088fc <pvPortMalloc+0x188>)
 800889c:	681a      	ldr	r2, [r3, #0]
 800889e:	4b19      	ldr	r3, [pc, #100]	; (8008904 <pvPortMalloc+0x190>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	429a      	cmp	r2, r3
 80088a4:	d203      	bcs.n	80088ae <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80088a6:	4b15      	ldr	r3, [pc, #84]	; (80088fc <pvPortMalloc+0x188>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	4a16      	ldr	r2, [pc, #88]	; (8008904 <pvPortMalloc+0x190>)
 80088ac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80088ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088b0:	685a      	ldr	r2, [r3, #4]
 80088b2:	4b11      	ldr	r3, [pc, #68]	; (80088f8 <pvPortMalloc+0x184>)
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	431a      	orrs	r2, r3
 80088b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80088bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088be:	2200      	movs	r2, #0
 80088c0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80088c2:	f001 ff8f 	bl	800a7e4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80088c6:	69fb      	ldr	r3, [r7, #28]
 80088c8:	f003 0307 	and.w	r3, r3, #7
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d00c      	beq.n	80088ea <pvPortMalloc+0x176>
	__asm volatile
 80088d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088d4:	b672      	cpsid	i
 80088d6:	f383 8811 	msr	BASEPRI, r3
 80088da:	f3bf 8f6f 	isb	sy
 80088de:	f3bf 8f4f 	dsb	sy
 80088e2:	b662      	cpsie	i
 80088e4:	60fb      	str	r3, [r7, #12]
}
 80088e6:	bf00      	nop
 80088e8:	e7fe      	b.n	80088e8 <pvPortMalloc+0x174>
	return pvReturn;
 80088ea:	69fb      	ldr	r3, [r7, #28]
}
 80088ec:	4618      	mov	r0, r3
 80088ee:	3728      	adds	r7, #40	; 0x28
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bd80      	pop	{r7, pc}
 80088f4:	2001da64 	.word	0x2001da64
 80088f8:	2001da70 	.word	0x2001da70
 80088fc:	2001da68 	.word	0x2001da68
 8008900:	2001da5c 	.word	0x2001da5c
 8008904:	2001da6c 	.word	0x2001da6c

08008908 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b086      	sub	sp, #24
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d04c      	beq.n	80089b4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800891a:	2308      	movs	r3, #8
 800891c:	425b      	negs	r3, r3
 800891e:	697a      	ldr	r2, [r7, #20]
 8008920:	4413      	add	r3, r2
 8008922:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008924:	697b      	ldr	r3, [r7, #20]
 8008926:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008928:	693b      	ldr	r3, [r7, #16]
 800892a:	685a      	ldr	r2, [r3, #4]
 800892c:	4b23      	ldr	r3, [pc, #140]	; (80089bc <vPortFree+0xb4>)
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	4013      	ands	r3, r2
 8008932:	2b00      	cmp	r3, #0
 8008934:	d10c      	bne.n	8008950 <vPortFree+0x48>
	__asm volatile
 8008936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800893a:	b672      	cpsid	i
 800893c:	f383 8811 	msr	BASEPRI, r3
 8008940:	f3bf 8f6f 	isb	sy
 8008944:	f3bf 8f4f 	dsb	sy
 8008948:	b662      	cpsie	i
 800894a:	60fb      	str	r3, [r7, #12]
}
 800894c:	bf00      	nop
 800894e:	e7fe      	b.n	800894e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008950:	693b      	ldr	r3, [r7, #16]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d00c      	beq.n	8008972 <vPortFree+0x6a>
	__asm volatile
 8008958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800895c:	b672      	cpsid	i
 800895e:	f383 8811 	msr	BASEPRI, r3
 8008962:	f3bf 8f6f 	isb	sy
 8008966:	f3bf 8f4f 	dsb	sy
 800896a:	b662      	cpsie	i
 800896c:	60bb      	str	r3, [r7, #8]
}
 800896e:	bf00      	nop
 8008970:	e7fe      	b.n	8008970 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008972:	693b      	ldr	r3, [r7, #16]
 8008974:	685a      	ldr	r2, [r3, #4]
 8008976:	4b11      	ldr	r3, [pc, #68]	; (80089bc <vPortFree+0xb4>)
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	4013      	ands	r3, r2
 800897c:	2b00      	cmp	r3, #0
 800897e:	d019      	beq.n	80089b4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008980:	693b      	ldr	r3, [r7, #16]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d115      	bne.n	80089b4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008988:	693b      	ldr	r3, [r7, #16]
 800898a:	685a      	ldr	r2, [r3, #4]
 800898c:	4b0b      	ldr	r3, [pc, #44]	; (80089bc <vPortFree+0xb4>)
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	43db      	mvns	r3, r3
 8008992:	401a      	ands	r2, r3
 8008994:	693b      	ldr	r3, [r7, #16]
 8008996:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008998:	f001 ff16 	bl	800a7c8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800899c:	693b      	ldr	r3, [r7, #16]
 800899e:	685a      	ldr	r2, [r3, #4]
 80089a0:	4b07      	ldr	r3, [pc, #28]	; (80089c0 <vPortFree+0xb8>)
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	4413      	add	r3, r2
 80089a6:	4a06      	ldr	r2, [pc, #24]	; (80089c0 <vPortFree+0xb8>)
 80089a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80089aa:	6938      	ldr	r0, [r7, #16]
 80089ac:	f000 f86e 	bl	8008a8c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80089b0:	f001 ff18 	bl	800a7e4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80089b4:	bf00      	nop
 80089b6:	3718      	adds	r7, #24
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bd80      	pop	{r7, pc}
 80089bc:	2001da70 	.word	0x2001da70
 80089c0:	2001da68 	.word	0x2001da68

080089c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80089c4:	b480      	push	{r7}
 80089c6:	b085      	sub	sp, #20
 80089c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80089ca:	4b29      	ldr	r3, [pc, #164]	; (8008a70 <prvHeapInit+0xac>)
 80089cc:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80089ce:	4b29      	ldr	r3, [pc, #164]	; (8008a74 <prvHeapInit+0xb0>)
 80089d0:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	f003 0307 	and.w	r3, r3, #7
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d00c      	beq.n	80089f6 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	3307      	adds	r3, #7
 80089e0:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	f023 0307 	bic.w	r3, r3, #7
 80089e8:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80089ea:	68ba      	ldr	r2, [r7, #8]
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	1ad3      	subs	r3, r2, r3
 80089f0:	4a20      	ldr	r2, [pc, #128]	; (8008a74 <prvHeapInit+0xb0>)
 80089f2:	4413      	add	r3, r2
 80089f4:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80089fa:	4a1f      	ldr	r2, [pc, #124]	; (8008a78 <prvHeapInit+0xb4>)
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008a00:	4b1d      	ldr	r3, [pc, #116]	; (8008a78 <prvHeapInit+0xb4>)
 8008a02:	2200      	movs	r2, #0
 8008a04:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	68ba      	ldr	r2, [r7, #8]
 8008a0a:	4413      	add	r3, r2
 8008a0c:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008a0e:	2208      	movs	r2, #8
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	1a9b      	subs	r3, r3, r2
 8008a14:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	f023 0307 	bic.w	r3, r3, #7
 8008a1c:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	4a16      	ldr	r2, [pc, #88]	; (8008a7c <prvHeapInit+0xb8>)
 8008a22:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008a24:	4b15      	ldr	r3, [pc, #84]	; (8008a7c <prvHeapInit+0xb8>)
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	2200      	movs	r2, #0
 8008a2a:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008a2c:	4b13      	ldr	r3, [pc, #76]	; (8008a7c <prvHeapInit+0xb8>)
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	2200      	movs	r2, #0
 8008a32:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	68fa      	ldr	r2, [r7, #12]
 8008a3c:	1ad2      	subs	r2, r2, r3
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008a42:	4b0e      	ldr	r3, [pc, #56]	; (8008a7c <prvHeapInit+0xb8>)
 8008a44:	681a      	ldr	r2, [r3, #0]
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	685b      	ldr	r3, [r3, #4]
 8008a4e:	4a0c      	ldr	r2, [pc, #48]	; (8008a80 <prvHeapInit+0xbc>)
 8008a50:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	685b      	ldr	r3, [r3, #4]
 8008a56:	4a0b      	ldr	r2, [pc, #44]	; (8008a84 <prvHeapInit+0xc0>)
 8008a58:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008a5a:	4b0b      	ldr	r3, [pc, #44]	; (8008a88 <prvHeapInit+0xc4>)
 8008a5c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008a60:	601a      	str	r2, [r3, #0]
}
 8008a62:	bf00      	nop
 8008a64:	3714      	adds	r7, #20
 8008a66:	46bd      	mov	sp, r7
 8008a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6c:	4770      	bx	lr
 8008a6e:	bf00      	nop
 8008a70:	00013880 	.word	0x00013880
 8008a74:	2000a1dc 	.word	0x2000a1dc
 8008a78:	2001da5c 	.word	0x2001da5c
 8008a7c:	2001da64 	.word	0x2001da64
 8008a80:	2001da6c 	.word	0x2001da6c
 8008a84:	2001da68 	.word	0x2001da68
 8008a88:	2001da70 	.word	0x2001da70

08008a8c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008a8c:	b480      	push	{r7}
 8008a8e:	b085      	sub	sp, #20
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008a94:	4b28      	ldr	r3, [pc, #160]	; (8008b38 <prvInsertBlockIntoFreeList+0xac>)
 8008a96:	60fb      	str	r3, [r7, #12]
 8008a98:	e002      	b.n	8008aa0 <prvInsertBlockIntoFreeList+0x14>
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	60fb      	str	r3, [r7, #12]
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	687a      	ldr	r2, [r7, #4]
 8008aa6:	429a      	cmp	r2, r3
 8008aa8:	d8f7      	bhi.n	8008a9a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	685b      	ldr	r3, [r3, #4]
 8008ab2:	68ba      	ldr	r2, [r7, #8]
 8008ab4:	4413      	add	r3, r2
 8008ab6:	687a      	ldr	r2, [r7, #4]
 8008ab8:	429a      	cmp	r2, r3
 8008aba:	d108      	bne.n	8008ace <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	685a      	ldr	r2, [r3, #4]
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	685b      	ldr	r3, [r3, #4]
 8008ac4:	441a      	add	r2, r3
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	685b      	ldr	r3, [r3, #4]
 8008ad6:	68ba      	ldr	r2, [r7, #8]
 8008ad8:	441a      	add	r2, r3
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	429a      	cmp	r2, r3
 8008ae0:	d118      	bne.n	8008b14 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	681a      	ldr	r2, [r3, #0]
 8008ae6:	4b15      	ldr	r3, [pc, #84]	; (8008b3c <prvInsertBlockIntoFreeList+0xb0>)
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	429a      	cmp	r2, r3
 8008aec:	d00d      	beq.n	8008b0a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	685a      	ldr	r2, [r3, #4]
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	685b      	ldr	r3, [r3, #4]
 8008af8:	441a      	add	r2, r3
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	681a      	ldr	r2, [r3, #0]
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	601a      	str	r2, [r3, #0]
 8008b08:	e008      	b.n	8008b1c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008b0a:	4b0c      	ldr	r3, [pc, #48]	; (8008b3c <prvInsertBlockIntoFreeList+0xb0>)
 8008b0c:	681a      	ldr	r2, [r3, #0]
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	601a      	str	r2, [r3, #0]
 8008b12:	e003      	b.n	8008b1c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	681a      	ldr	r2, [r3, #0]
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008b1c:	68fa      	ldr	r2, [r7, #12]
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	429a      	cmp	r2, r3
 8008b22:	d002      	beq.n	8008b2a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	687a      	ldr	r2, [r7, #4]
 8008b28:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008b2a:	bf00      	nop
 8008b2c:	3714      	adds	r7, #20
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b34:	4770      	bx	lr
 8008b36:	bf00      	nop
 8008b38:	2001da5c 	.word	0x2001da5c
 8008b3c:	2001da64 	.word	0x2001da64

08008b40 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008b40:	b480      	push	{r7}
 8008b42:	b083      	sub	sp, #12
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f103 0208 	add.w	r2, r3, #8
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	f04f 32ff 	mov.w	r2, #4294967295
 8008b58:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	f103 0208 	add.w	r2, r3, #8
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	f103 0208 	add.w	r2, r3, #8
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2200      	movs	r2, #0
 8008b72:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008b74:	bf00      	nop
 8008b76:	370c      	adds	r7, #12
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7e:	4770      	bx	lr

08008b80 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008b80:	b480      	push	{r7}
 8008b82:	b083      	sub	sp, #12
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008b8e:	bf00      	nop
 8008b90:	370c      	adds	r7, #12
 8008b92:	46bd      	mov	sp, r7
 8008b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b98:	4770      	bx	lr

08008b9a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008b9a:	b480      	push	{r7}
 8008b9c:	b085      	sub	sp, #20
 8008b9e:	af00      	add	r7, sp, #0
 8008ba0:	6078      	str	r0, [r7, #4]
 8008ba2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	685b      	ldr	r3, [r3, #4]
 8008ba8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	68fa      	ldr	r2, [r7, #12]
 8008bae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	689a      	ldr	r2, [r3, #8]
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	689b      	ldr	r3, [r3, #8]
 8008bbc:	683a      	ldr	r2, [r7, #0]
 8008bbe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	683a      	ldr	r2, [r7, #0]
 8008bc4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	687a      	ldr	r2, [r7, #4]
 8008bca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	1c5a      	adds	r2, r3, #1
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	601a      	str	r2, [r3, #0]
}
 8008bd6:	bf00      	nop
 8008bd8:	3714      	adds	r7, #20
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be0:	4770      	bx	lr

08008be2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008be2:	b480      	push	{r7}
 8008be4:	b085      	sub	sp, #20
 8008be6:	af00      	add	r7, sp, #0
 8008be8:	6078      	str	r0, [r7, #4]
 8008bea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008bf2:	68bb      	ldr	r3, [r7, #8]
 8008bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bf8:	d103      	bne.n	8008c02 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	691b      	ldr	r3, [r3, #16]
 8008bfe:	60fb      	str	r3, [r7, #12]
 8008c00:	e00c      	b.n	8008c1c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	3308      	adds	r3, #8
 8008c06:	60fb      	str	r3, [r7, #12]
 8008c08:	e002      	b.n	8008c10 <vListInsert+0x2e>
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	685b      	ldr	r3, [r3, #4]
 8008c0e:	60fb      	str	r3, [r7, #12]
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	685b      	ldr	r3, [r3, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	68ba      	ldr	r2, [r7, #8]
 8008c18:	429a      	cmp	r2, r3
 8008c1a:	d2f6      	bcs.n	8008c0a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	685a      	ldr	r2, [r3, #4]
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	685b      	ldr	r3, [r3, #4]
 8008c28:	683a      	ldr	r2, [r7, #0]
 8008c2a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	68fa      	ldr	r2, [r7, #12]
 8008c30:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	683a      	ldr	r2, [r7, #0]
 8008c36:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	687a      	ldr	r2, [r7, #4]
 8008c3c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	1c5a      	adds	r2, r3, #1
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	601a      	str	r2, [r3, #0]
}
 8008c48:	bf00      	nop
 8008c4a:	3714      	adds	r7, #20
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c52:	4770      	bx	lr

08008c54 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008c54:	b480      	push	{r7}
 8008c56:	b085      	sub	sp, #20
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	691b      	ldr	r3, [r3, #16]
 8008c60:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	685b      	ldr	r3, [r3, #4]
 8008c66:	687a      	ldr	r2, [r7, #4]
 8008c68:	6892      	ldr	r2, [r2, #8]
 8008c6a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	689b      	ldr	r3, [r3, #8]
 8008c70:	687a      	ldr	r2, [r7, #4]
 8008c72:	6852      	ldr	r2, [r2, #4]
 8008c74:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	685b      	ldr	r3, [r3, #4]
 8008c7a:	687a      	ldr	r2, [r7, #4]
 8008c7c:	429a      	cmp	r2, r3
 8008c7e:	d103      	bne.n	8008c88 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	689a      	ldr	r2, [r3, #8]
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	1e5a      	subs	r2, r3, #1
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	681b      	ldr	r3, [r3, #0]
}
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	3714      	adds	r7, #20
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca6:	4770      	bx	lr

08008ca8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008ca8:	b480      	push	{r7}
 8008caa:	b085      	sub	sp, #20
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	60f8      	str	r0, [r7, #12]
 8008cb0:	60b9      	str	r1, [r7, #8]
 8008cb2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	3b04      	subs	r3, #4
 8008cb8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008cc0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	3b04      	subs	r3, #4
 8008cc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008cc8:	68bb      	ldr	r3, [r7, #8]
 8008cca:	f023 0201 	bic.w	r2, r3, #1
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	3b04      	subs	r3, #4
 8008cd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008cd8:	4a0c      	ldr	r2, [pc, #48]	; (8008d0c <pxPortInitialiseStack+0x64>)
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	3b14      	subs	r3, #20
 8008ce2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008ce4:	687a      	ldr	r2, [r7, #4]
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	3b04      	subs	r3, #4
 8008cee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	f06f 0202 	mvn.w	r2, #2
 8008cf6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	3b20      	subs	r3, #32
 8008cfc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
}
 8008d00:	4618      	mov	r0, r3
 8008d02:	3714      	adds	r7, #20
 8008d04:	46bd      	mov	sp, r7
 8008d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0a:	4770      	bx	lr
 8008d0c:	08008d11 	.word	0x08008d11

08008d10 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008d10:	b480      	push	{r7}
 8008d12:	b085      	sub	sp, #20
 8008d14:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008d16:	2300      	movs	r3, #0
 8008d18:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008d1a:	4b14      	ldr	r3, [pc, #80]	; (8008d6c <prvTaskExitError+0x5c>)
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d22:	d00c      	beq.n	8008d3e <prvTaskExitError+0x2e>
	__asm volatile
 8008d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d28:	b672      	cpsid	i
 8008d2a:	f383 8811 	msr	BASEPRI, r3
 8008d2e:	f3bf 8f6f 	isb	sy
 8008d32:	f3bf 8f4f 	dsb	sy
 8008d36:	b662      	cpsie	i
 8008d38:	60fb      	str	r3, [r7, #12]
}
 8008d3a:	bf00      	nop
 8008d3c:	e7fe      	b.n	8008d3c <prvTaskExitError+0x2c>
	__asm volatile
 8008d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d42:	b672      	cpsid	i
 8008d44:	f383 8811 	msr	BASEPRI, r3
 8008d48:	f3bf 8f6f 	isb	sy
 8008d4c:	f3bf 8f4f 	dsb	sy
 8008d50:	b662      	cpsie	i
 8008d52:	60bb      	str	r3, [r7, #8]
}
 8008d54:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008d56:	bf00      	nop
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d0fc      	beq.n	8008d58 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008d5e:	bf00      	nop
 8008d60:	bf00      	nop
 8008d62:	3714      	adds	r7, #20
 8008d64:	46bd      	mov	sp, r7
 8008d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6a:	4770      	bx	lr
 8008d6c:	20000010 	.word	0x20000010

08008d70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008d70:	4b07      	ldr	r3, [pc, #28]	; (8008d90 <pxCurrentTCBConst2>)
 8008d72:	6819      	ldr	r1, [r3, #0]
 8008d74:	6808      	ldr	r0, [r1, #0]
 8008d76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d7a:	f380 8809 	msr	PSP, r0
 8008d7e:	f3bf 8f6f 	isb	sy
 8008d82:	f04f 0000 	mov.w	r0, #0
 8008d86:	f380 8811 	msr	BASEPRI, r0
 8008d8a:	4770      	bx	lr
 8008d8c:	f3af 8000 	nop.w

08008d90 <pxCurrentTCBConst2>:
 8008d90:	2001dabc 	.word	0x2001dabc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008d94:	bf00      	nop
 8008d96:	bf00      	nop

08008d98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008d98:	4808      	ldr	r0, [pc, #32]	; (8008dbc <prvPortStartFirstTask+0x24>)
 8008d9a:	6800      	ldr	r0, [r0, #0]
 8008d9c:	6800      	ldr	r0, [r0, #0]
 8008d9e:	f380 8808 	msr	MSP, r0
 8008da2:	f04f 0000 	mov.w	r0, #0
 8008da6:	f380 8814 	msr	CONTROL, r0
 8008daa:	b662      	cpsie	i
 8008dac:	b661      	cpsie	f
 8008dae:	f3bf 8f4f 	dsb	sy
 8008db2:	f3bf 8f6f 	isb	sy
 8008db6:	df00      	svc	0
 8008db8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008dba:	bf00      	nop
 8008dbc:	e000ed08 	.word	0xe000ed08

08008dc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b084      	sub	sp, #16
 8008dc4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008dc6:	4b37      	ldr	r3, [pc, #220]	; (8008ea4 <xPortStartScheduler+0xe4>)
 8008dc8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	781b      	ldrb	r3, [r3, #0]
 8008dce:	b2db      	uxtb	r3, r3
 8008dd0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	22ff      	movs	r2, #255	; 0xff
 8008dd6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	781b      	ldrb	r3, [r3, #0]
 8008ddc:	b2db      	uxtb	r3, r3
 8008dde:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008de0:	78fb      	ldrb	r3, [r7, #3]
 8008de2:	b2db      	uxtb	r3, r3
 8008de4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008de8:	b2da      	uxtb	r2, r3
 8008dea:	4b2f      	ldr	r3, [pc, #188]	; (8008ea8 <xPortStartScheduler+0xe8>)
 8008dec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008dee:	4b2f      	ldr	r3, [pc, #188]	; (8008eac <xPortStartScheduler+0xec>)
 8008df0:	2207      	movs	r2, #7
 8008df2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008df4:	e009      	b.n	8008e0a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008df6:	4b2d      	ldr	r3, [pc, #180]	; (8008eac <xPortStartScheduler+0xec>)
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	3b01      	subs	r3, #1
 8008dfc:	4a2b      	ldr	r2, [pc, #172]	; (8008eac <xPortStartScheduler+0xec>)
 8008dfe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008e00:	78fb      	ldrb	r3, [r7, #3]
 8008e02:	b2db      	uxtb	r3, r3
 8008e04:	005b      	lsls	r3, r3, #1
 8008e06:	b2db      	uxtb	r3, r3
 8008e08:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008e0a:	78fb      	ldrb	r3, [r7, #3]
 8008e0c:	b2db      	uxtb	r3, r3
 8008e0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e12:	2b80      	cmp	r3, #128	; 0x80
 8008e14:	d0ef      	beq.n	8008df6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008e16:	4b25      	ldr	r3, [pc, #148]	; (8008eac <xPortStartScheduler+0xec>)
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	f1c3 0307 	rsb	r3, r3, #7
 8008e1e:	2b04      	cmp	r3, #4
 8008e20:	d00c      	beq.n	8008e3c <xPortStartScheduler+0x7c>
	__asm volatile
 8008e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e26:	b672      	cpsid	i
 8008e28:	f383 8811 	msr	BASEPRI, r3
 8008e2c:	f3bf 8f6f 	isb	sy
 8008e30:	f3bf 8f4f 	dsb	sy
 8008e34:	b662      	cpsie	i
 8008e36:	60bb      	str	r3, [r7, #8]
}
 8008e38:	bf00      	nop
 8008e3a:	e7fe      	b.n	8008e3a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008e3c:	4b1b      	ldr	r3, [pc, #108]	; (8008eac <xPortStartScheduler+0xec>)
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	021b      	lsls	r3, r3, #8
 8008e42:	4a1a      	ldr	r2, [pc, #104]	; (8008eac <xPortStartScheduler+0xec>)
 8008e44:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008e46:	4b19      	ldr	r3, [pc, #100]	; (8008eac <xPortStartScheduler+0xec>)
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008e4e:	4a17      	ldr	r2, [pc, #92]	; (8008eac <xPortStartScheduler+0xec>)
 8008e50:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	b2da      	uxtb	r2, r3
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008e5a:	4b15      	ldr	r3, [pc, #84]	; (8008eb0 <xPortStartScheduler+0xf0>)
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	4a14      	ldr	r2, [pc, #80]	; (8008eb0 <xPortStartScheduler+0xf0>)
 8008e60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008e64:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008e66:	4b12      	ldr	r3, [pc, #72]	; (8008eb0 <xPortStartScheduler+0xf0>)
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	4a11      	ldr	r2, [pc, #68]	; (8008eb0 <xPortStartScheduler+0xf0>)
 8008e6c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008e70:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008e72:	f000 f8dd 	bl	8009030 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008e76:	4b0f      	ldr	r3, [pc, #60]	; (8008eb4 <xPortStartScheduler+0xf4>)
 8008e78:	2200      	movs	r2, #0
 8008e7a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008e7c:	f000 f8fc 	bl	8009078 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008e80:	4b0d      	ldr	r3, [pc, #52]	; (8008eb8 <xPortStartScheduler+0xf8>)
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	4a0c      	ldr	r2, [pc, #48]	; (8008eb8 <xPortStartScheduler+0xf8>)
 8008e86:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008e8a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008e8c:	f7ff ff84 	bl	8008d98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008e90:	f001 fe14 	bl	800aabc <vTaskSwitchContext>
	prvTaskExitError();
 8008e94:	f7ff ff3c 	bl	8008d10 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008e98:	2300      	movs	r3, #0
}
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	3710      	adds	r7, #16
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	bd80      	pop	{r7, pc}
 8008ea2:	bf00      	nop
 8008ea4:	e000e400 	.word	0xe000e400
 8008ea8:	2001da74 	.word	0x2001da74
 8008eac:	2001da78 	.word	0x2001da78
 8008eb0:	e000ed20 	.word	0xe000ed20
 8008eb4:	20000010 	.word	0x20000010
 8008eb8:	e000ef34 	.word	0xe000ef34

08008ebc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008ebc:	b480      	push	{r7}
 8008ebe:	b083      	sub	sp, #12
 8008ec0:	af00      	add	r7, sp, #0
	__asm volatile
 8008ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ec6:	b672      	cpsid	i
 8008ec8:	f383 8811 	msr	BASEPRI, r3
 8008ecc:	f3bf 8f6f 	isb	sy
 8008ed0:	f3bf 8f4f 	dsb	sy
 8008ed4:	b662      	cpsie	i
 8008ed6:	607b      	str	r3, [r7, #4]
}
 8008ed8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008eda:	4b10      	ldr	r3, [pc, #64]	; (8008f1c <vPortEnterCritical+0x60>)
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	3301      	adds	r3, #1
 8008ee0:	4a0e      	ldr	r2, [pc, #56]	; (8008f1c <vPortEnterCritical+0x60>)
 8008ee2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008ee4:	4b0d      	ldr	r3, [pc, #52]	; (8008f1c <vPortEnterCritical+0x60>)
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	2b01      	cmp	r3, #1
 8008eea:	d111      	bne.n	8008f10 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008eec:	4b0c      	ldr	r3, [pc, #48]	; (8008f20 <vPortEnterCritical+0x64>)
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	b2db      	uxtb	r3, r3
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d00c      	beq.n	8008f10 <vPortEnterCritical+0x54>
	__asm volatile
 8008ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008efa:	b672      	cpsid	i
 8008efc:	f383 8811 	msr	BASEPRI, r3
 8008f00:	f3bf 8f6f 	isb	sy
 8008f04:	f3bf 8f4f 	dsb	sy
 8008f08:	b662      	cpsie	i
 8008f0a:	603b      	str	r3, [r7, #0]
}
 8008f0c:	bf00      	nop
 8008f0e:	e7fe      	b.n	8008f0e <vPortEnterCritical+0x52>
	}
}
 8008f10:	bf00      	nop
 8008f12:	370c      	adds	r7, #12
 8008f14:	46bd      	mov	sp, r7
 8008f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1a:	4770      	bx	lr
 8008f1c:	20000010 	.word	0x20000010
 8008f20:	e000ed04 	.word	0xe000ed04

08008f24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008f24:	b480      	push	{r7}
 8008f26:	b083      	sub	sp, #12
 8008f28:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008f2a:	4b13      	ldr	r3, [pc, #76]	; (8008f78 <vPortExitCritical+0x54>)
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d10c      	bne.n	8008f4c <vPortExitCritical+0x28>
	__asm volatile
 8008f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f36:	b672      	cpsid	i
 8008f38:	f383 8811 	msr	BASEPRI, r3
 8008f3c:	f3bf 8f6f 	isb	sy
 8008f40:	f3bf 8f4f 	dsb	sy
 8008f44:	b662      	cpsie	i
 8008f46:	607b      	str	r3, [r7, #4]
}
 8008f48:	bf00      	nop
 8008f4a:	e7fe      	b.n	8008f4a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8008f4c:	4b0a      	ldr	r3, [pc, #40]	; (8008f78 <vPortExitCritical+0x54>)
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	3b01      	subs	r3, #1
 8008f52:	4a09      	ldr	r2, [pc, #36]	; (8008f78 <vPortExitCritical+0x54>)
 8008f54:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008f56:	4b08      	ldr	r3, [pc, #32]	; (8008f78 <vPortExitCritical+0x54>)
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d105      	bne.n	8008f6a <vPortExitCritical+0x46>
 8008f5e:	2300      	movs	r3, #0
 8008f60:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008f68:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008f6a:	bf00      	nop
 8008f6c:	370c      	adds	r7, #12
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f74:	4770      	bx	lr
 8008f76:	bf00      	nop
 8008f78:	20000010 	.word	0x20000010
 8008f7c:	00000000 	.word	0x00000000

08008f80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008f80:	f3ef 8009 	mrs	r0, PSP
 8008f84:	f3bf 8f6f 	isb	sy
 8008f88:	4b15      	ldr	r3, [pc, #84]	; (8008fe0 <pxCurrentTCBConst>)
 8008f8a:	681a      	ldr	r2, [r3, #0]
 8008f8c:	f01e 0f10 	tst.w	lr, #16
 8008f90:	bf08      	it	eq
 8008f92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008f96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f9a:	6010      	str	r0, [r2, #0]
 8008f9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008fa0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008fa4:	b672      	cpsid	i
 8008fa6:	f380 8811 	msr	BASEPRI, r0
 8008faa:	f3bf 8f4f 	dsb	sy
 8008fae:	f3bf 8f6f 	isb	sy
 8008fb2:	b662      	cpsie	i
 8008fb4:	f001 fd82 	bl	800aabc <vTaskSwitchContext>
 8008fb8:	f04f 0000 	mov.w	r0, #0
 8008fbc:	f380 8811 	msr	BASEPRI, r0
 8008fc0:	bc09      	pop	{r0, r3}
 8008fc2:	6819      	ldr	r1, [r3, #0]
 8008fc4:	6808      	ldr	r0, [r1, #0]
 8008fc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fca:	f01e 0f10 	tst.w	lr, #16
 8008fce:	bf08      	it	eq
 8008fd0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008fd4:	f380 8809 	msr	PSP, r0
 8008fd8:	f3bf 8f6f 	isb	sy
 8008fdc:	4770      	bx	lr
 8008fde:	bf00      	nop

08008fe0 <pxCurrentTCBConst>:
 8008fe0:	2001dabc 	.word	0x2001dabc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008fe4:	bf00      	nop
 8008fe6:	bf00      	nop

08008fe8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b082      	sub	sp, #8
 8008fec:	af00      	add	r7, sp, #0
	__asm volatile
 8008fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ff2:	b672      	cpsid	i
 8008ff4:	f383 8811 	msr	BASEPRI, r3
 8008ff8:	f3bf 8f6f 	isb	sy
 8008ffc:	f3bf 8f4f 	dsb	sy
 8009000:	b662      	cpsie	i
 8009002:	607b      	str	r3, [r7, #4]
}
 8009004:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009006:	f001 fc9d 	bl	800a944 <xTaskIncrementTick>
 800900a:	4603      	mov	r3, r0
 800900c:	2b00      	cmp	r3, #0
 800900e:	d003      	beq.n	8009018 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009010:	4b06      	ldr	r3, [pc, #24]	; (800902c <SysTick_Handler+0x44>)
 8009012:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009016:	601a      	str	r2, [r3, #0]
 8009018:	2300      	movs	r3, #0
 800901a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	f383 8811 	msr	BASEPRI, r3
}
 8009022:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009024:	bf00      	nop
 8009026:	3708      	adds	r7, #8
 8009028:	46bd      	mov	sp, r7
 800902a:	bd80      	pop	{r7, pc}
 800902c:	e000ed04 	.word	0xe000ed04

08009030 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009030:	b480      	push	{r7}
 8009032:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009034:	4b0b      	ldr	r3, [pc, #44]	; (8009064 <vPortSetupTimerInterrupt+0x34>)
 8009036:	2200      	movs	r2, #0
 8009038:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800903a:	4b0b      	ldr	r3, [pc, #44]	; (8009068 <vPortSetupTimerInterrupt+0x38>)
 800903c:	2200      	movs	r2, #0
 800903e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009040:	4b0a      	ldr	r3, [pc, #40]	; (800906c <vPortSetupTimerInterrupt+0x3c>)
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	4a0a      	ldr	r2, [pc, #40]	; (8009070 <vPortSetupTimerInterrupt+0x40>)
 8009046:	fba2 2303 	umull	r2, r3, r2, r3
 800904a:	099b      	lsrs	r3, r3, #6
 800904c:	4a09      	ldr	r2, [pc, #36]	; (8009074 <vPortSetupTimerInterrupt+0x44>)
 800904e:	3b01      	subs	r3, #1
 8009050:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009052:	4b04      	ldr	r3, [pc, #16]	; (8009064 <vPortSetupTimerInterrupt+0x34>)
 8009054:	2207      	movs	r2, #7
 8009056:	601a      	str	r2, [r3, #0]
}
 8009058:	bf00      	nop
 800905a:	46bd      	mov	sp, r7
 800905c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009060:	4770      	bx	lr
 8009062:	bf00      	nop
 8009064:	e000e010 	.word	0xe000e010
 8009068:	e000e018 	.word	0xe000e018
 800906c:	20000004 	.word	0x20000004
 8009070:	10624dd3 	.word	0x10624dd3
 8009074:	e000e014 	.word	0xe000e014

08009078 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009078:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009088 <vPortEnableVFP+0x10>
 800907c:	6801      	ldr	r1, [r0, #0]
 800907e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009082:	6001      	str	r1, [r0, #0]
 8009084:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009086:	bf00      	nop
 8009088:	e000ed88 	.word	0xe000ed88

0800908c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800908c:	b480      	push	{r7}
 800908e:	b085      	sub	sp, #20
 8009090:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009092:	f3ef 8305 	mrs	r3, IPSR
 8009096:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	2b0f      	cmp	r3, #15
 800909c:	d916      	bls.n	80090cc <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800909e:	4a19      	ldr	r2, [pc, #100]	; (8009104 <vPortValidateInterruptPriority+0x78>)
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	4413      	add	r3, r2
 80090a4:	781b      	ldrb	r3, [r3, #0]
 80090a6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80090a8:	4b17      	ldr	r3, [pc, #92]	; (8009108 <vPortValidateInterruptPriority+0x7c>)
 80090aa:	781b      	ldrb	r3, [r3, #0]
 80090ac:	7afa      	ldrb	r2, [r7, #11]
 80090ae:	429a      	cmp	r2, r3
 80090b0:	d20c      	bcs.n	80090cc <vPortValidateInterruptPriority+0x40>
	__asm volatile
 80090b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090b6:	b672      	cpsid	i
 80090b8:	f383 8811 	msr	BASEPRI, r3
 80090bc:	f3bf 8f6f 	isb	sy
 80090c0:	f3bf 8f4f 	dsb	sy
 80090c4:	b662      	cpsie	i
 80090c6:	607b      	str	r3, [r7, #4]
}
 80090c8:	bf00      	nop
 80090ca:	e7fe      	b.n	80090ca <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80090cc:	4b0f      	ldr	r3, [pc, #60]	; (800910c <vPortValidateInterruptPriority+0x80>)
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80090d4:	4b0e      	ldr	r3, [pc, #56]	; (8009110 <vPortValidateInterruptPriority+0x84>)
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	429a      	cmp	r2, r3
 80090da:	d90c      	bls.n	80090f6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 80090dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090e0:	b672      	cpsid	i
 80090e2:	f383 8811 	msr	BASEPRI, r3
 80090e6:	f3bf 8f6f 	isb	sy
 80090ea:	f3bf 8f4f 	dsb	sy
 80090ee:	b662      	cpsie	i
 80090f0:	603b      	str	r3, [r7, #0]
}
 80090f2:	bf00      	nop
 80090f4:	e7fe      	b.n	80090f4 <vPortValidateInterruptPriority+0x68>
	}
 80090f6:	bf00      	nop
 80090f8:	3714      	adds	r7, #20
 80090fa:	46bd      	mov	sp, r7
 80090fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009100:	4770      	bx	lr
 8009102:	bf00      	nop
 8009104:	e000e3f0 	.word	0xe000e3f0
 8009108:	2001da74 	.word	0x2001da74
 800910c:	e000ed0c 	.word	0xe000ed0c
 8009110:	2001da78 	.word	0x2001da78

08009114 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b084      	sub	sp, #16
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
 800911c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d10c      	bne.n	8009142 <xQueueGenericReset+0x2e>
	__asm volatile
 8009128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800912c:	b672      	cpsid	i
 800912e:	f383 8811 	msr	BASEPRI, r3
 8009132:	f3bf 8f6f 	isb	sy
 8009136:	f3bf 8f4f 	dsb	sy
 800913a:	b662      	cpsie	i
 800913c:	60bb      	str	r3, [r7, #8]
}
 800913e:	bf00      	nop
 8009140:	e7fe      	b.n	8009140 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8009142:	f7ff febb 	bl	8008ebc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	681a      	ldr	r2, [r3, #0]
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800914e:	68f9      	ldr	r1, [r7, #12]
 8009150:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009152:	fb01 f303 	mul.w	r3, r1, r3
 8009156:	441a      	add	r2, r3
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	2200      	movs	r2, #0
 8009160:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	681a      	ldr	r2, [r3, #0]
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	681a      	ldr	r2, [r3, #0]
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009172:	3b01      	subs	r3, #1
 8009174:	68f9      	ldr	r1, [r7, #12]
 8009176:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009178:	fb01 f303 	mul.w	r3, r1, r3
 800917c:	441a      	add	r2, r3
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	22ff      	movs	r2, #255	; 0xff
 8009186:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	22ff      	movs	r2, #255	; 0xff
 800918e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d114      	bne.n	80091c2 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	691b      	ldr	r3, [r3, #16]
 800919c:	2b00      	cmp	r3, #0
 800919e:	d01a      	beq.n	80091d6 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	3310      	adds	r3, #16
 80091a4:	4618      	mov	r0, r3
 80091a6:	f001 fd3d 	bl	800ac24 <xTaskRemoveFromEventList>
 80091aa:	4603      	mov	r3, r0
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d012      	beq.n	80091d6 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80091b0:	4b0c      	ldr	r3, [pc, #48]	; (80091e4 <xQueueGenericReset+0xd0>)
 80091b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091b6:	601a      	str	r2, [r3, #0]
 80091b8:	f3bf 8f4f 	dsb	sy
 80091bc:	f3bf 8f6f 	isb	sy
 80091c0:	e009      	b.n	80091d6 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	3310      	adds	r3, #16
 80091c6:	4618      	mov	r0, r3
 80091c8:	f7ff fcba 	bl	8008b40 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	3324      	adds	r3, #36	; 0x24
 80091d0:	4618      	mov	r0, r3
 80091d2:	f7ff fcb5 	bl	8008b40 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80091d6:	f7ff fea5 	bl	8008f24 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80091da:	2301      	movs	r3, #1
}
 80091dc:	4618      	mov	r0, r3
 80091de:	3710      	adds	r7, #16
 80091e0:	46bd      	mov	sp, r7
 80091e2:	bd80      	pop	{r7, pc}
 80091e4:	e000ed04 	.word	0xe000ed04

080091e8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b08e      	sub	sp, #56	; 0x38
 80091ec:	af02      	add	r7, sp, #8
 80091ee:	60f8      	str	r0, [r7, #12]
 80091f0:	60b9      	str	r1, [r7, #8]
 80091f2:	607a      	str	r2, [r7, #4]
 80091f4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d10c      	bne.n	8009216 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 80091fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009200:	b672      	cpsid	i
 8009202:	f383 8811 	msr	BASEPRI, r3
 8009206:	f3bf 8f6f 	isb	sy
 800920a:	f3bf 8f4f 	dsb	sy
 800920e:	b662      	cpsie	i
 8009210:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009212:	bf00      	nop
 8009214:	e7fe      	b.n	8009214 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009216:	683b      	ldr	r3, [r7, #0]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d10c      	bne.n	8009236 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800921c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009220:	b672      	cpsid	i
 8009222:	f383 8811 	msr	BASEPRI, r3
 8009226:	f3bf 8f6f 	isb	sy
 800922a:	f3bf 8f4f 	dsb	sy
 800922e:	b662      	cpsie	i
 8009230:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009232:	bf00      	nop
 8009234:	e7fe      	b.n	8009234 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d002      	beq.n	8009242 <xQueueGenericCreateStatic+0x5a>
 800923c:	68bb      	ldr	r3, [r7, #8]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d001      	beq.n	8009246 <xQueueGenericCreateStatic+0x5e>
 8009242:	2301      	movs	r3, #1
 8009244:	e000      	b.n	8009248 <xQueueGenericCreateStatic+0x60>
 8009246:	2300      	movs	r3, #0
 8009248:	2b00      	cmp	r3, #0
 800924a:	d10c      	bne.n	8009266 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800924c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009250:	b672      	cpsid	i
 8009252:	f383 8811 	msr	BASEPRI, r3
 8009256:	f3bf 8f6f 	isb	sy
 800925a:	f3bf 8f4f 	dsb	sy
 800925e:	b662      	cpsie	i
 8009260:	623b      	str	r3, [r7, #32]
}
 8009262:	bf00      	nop
 8009264:	e7fe      	b.n	8009264 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d102      	bne.n	8009272 <xQueueGenericCreateStatic+0x8a>
 800926c:	68bb      	ldr	r3, [r7, #8]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d101      	bne.n	8009276 <xQueueGenericCreateStatic+0x8e>
 8009272:	2301      	movs	r3, #1
 8009274:	e000      	b.n	8009278 <xQueueGenericCreateStatic+0x90>
 8009276:	2300      	movs	r3, #0
 8009278:	2b00      	cmp	r3, #0
 800927a:	d10c      	bne.n	8009296 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800927c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009280:	b672      	cpsid	i
 8009282:	f383 8811 	msr	BASEPRI, r3
 8009286:	f3bf 8f6f 	isb	sy
 800928a:	f3bf 8f4f 	dsb	sy
 800928e:	b662      	cpsie	i
 8009290:	61fb      	str	r3, [r7, #28]
}
 8009292:	bf00      	nop
 8009294:	e7fe      	b.n	8009294 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009296:	2350      	movs	r3, #80	; 0x50
 8009298:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800929a:	697b      	ldr	r3, [r7, #20]
 800929c:	2b50      	cmp	r3, #80	; 0x50
 800929e:	d00c      	beq.n	80092ba <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 80092a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092a4:	b672      	cpsid	i
 80092a6:	f383 8811 	msr	BASEPRI, r3
 80092aa:	f3bf 8f6f 	isb	sy
 80092ae:	f3bf 8f4f 	dsb	sy
 80092b2:	b662      	cpsie	i
 80092b4:	61bb      	str	r3, [r7, #24]
}
 80092b6:	bf00      	nop
 80092b8:	e7fe      	b.n	80092b8 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80092ba:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80092bc:	683b      	ldr	r3, [r7, #0]
 80092be:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80092c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d00d      	beq.n	80092e2 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80092c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092c8:	2201      	movs	r2, #1
 80092ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80092ce:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80092d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092d4:	9300      	str	r3, [sp, #0]
 80092d6:	4613      	mov	r3, r2
 80092d8:	687a      	ldr	r2, [r7, #4]
 80092da:	68b9      	ldr	r1, [r7, #8]
 80092dc:	68f8      	ldr	r0, [r7, #12]
 80092de:	f000 f847 	bl	8009370 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80092e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80092e4:	4618      	mov	r0, r3
 80092e6:	3730      	adds	r7, #48	; 0x30
 80092e8:	46bd      	mov	sp, r7
 80092ea:	bd80      	pop	{r7, pc}

080092ec <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b08a      	sub	sp, #40	; 0x28
 80092f0:	af02      	add	r7, sp, #8
 80092f2:	60f8      	str	r0, [r7, #12]
 80092f4:	60b9      	str	r1, [r7, #8]
 80092f6:	4613      	mov	r3, r2
 80092f8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d10c      	bne.n	800931a <xQueueGenericCreate+0x2e>
	__asm volatile
 8009300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009304:	b672      	cpsid	i
 8009306:	f383 8811 	msr	BASEPRI, r3
 800930a:	f3bf 8f6f 	isb	sy
 800930e:	f3bf 8f4f 	dsb	sy
 8009312:	b662      	cpsie	i
 8009314:	613b      	str	r3, [r7, #16]
}
 8009316:	bf00      	nop
 8009318:	e7fe      	b.n	8009318 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800931a:	68bb      	ldr	r3, [r7, #8]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d102      	bne.n	8009326 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8009320:	2300      	movs	r3, #0
 8009322:	61fb      	str	r3, [r7, #28]
 8009324:	e004      	b.n	8009330 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	68ba      	ldr	r2, [r7, #8]
 800932a:	fb02 f303 	mul.w	r3, r2, r3
 800932e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009330:	69fb      	ldr	r3, [r7, #28]
 8009332:	3350      	adds	r3, #80	; 0x50
 8009334:	4618      	mov	r0, r3
 8009336:	f7ff fa1d 	bl	8008774 <pvPortMalloc>
 800933a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800933c:	69bb      	ldr	r3, [r7, #24]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d011      	beq.n	8009366 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009342:	69bb      	ldr	r3, [r7, #24]
 8009344:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009346:	697b      	ldr	r3, [r7, #20]
 8009348:	3350      	adds	r3, #80	; 0x50
 800934a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800934c:	69bb      	ldr	r3, [r7, #24]
 800934e:	2200      	movs	r2, #0
 8009350:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009354:	79fa      	ldrb	r2, [r7, #7]
 8009356:	69bb      	ldr	r3, [r7, #24]
 8009358:	9300      	str	r3, [sp, #0]
 800935a:	4613      	mov	r3, r2
 800935c:	697a      	ldr	r2, [r7, #20]
 800935e:	68b9      	ldr	r1, [r7, #8]
 8009360:	68f8      	ldr	r0, [r7, #12]
 8009362:	f000 f805 	bl	8009370 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009366:	69bb      	ldr	r3, [r7, #24]
	}
 8009368:	4618      	mov	r0, r3
 800936a:	3720      	adds	r7, #32
 800936c:	46bd      	mov	sp, r7
 800936e:	bd80      	pop	{r7, pc}

08009370 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b084      	sub	sp, #16
 8009374:	af00      	add	r7, sp, #0
 8009376:	60f8      	str	r0, [r7, #12]
 8009378:	60b9      	str	r1, [r7, #8]
 800937a:	607a      	str	r2, [r7, #4]
 800937c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800937e:	68bb      	ldr	r3, [r7, #8]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d103      	bne.n	800938c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009384:	69bb      	ldr	r3, [r7, #24]
 8009386:	69ba      	ldr	r2, [r7, #24]
 8009388:	601a      	str	r2, [r3, #0]
 800938a:	e002      	b.n	8009392 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800938c:	69bb      	ldr	r3, [r7, #24]
 800938e:	687a      	ldr	r2, [r7, #4]
 8009390:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009392:	69bb      	ldr	r3, [r7, #24]
 8009394:	68fa      	ldr	r2, [r7, #12]
 8009396:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009398:	69bb      	ldr	r3, [r7, #24]
 800939a:	68ba      	ldr	r2, [r7, #8]
 800939c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800939e:	2101      	movs	r1, #1
 80093a0:	69b8      	ldr	r0, [r7, #24]
 80093a2:	f7ff feb7 	bl	8009114 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80093a6:	69bb      	ldr	r3, [r7, #24]
 80093a8:	78fa      	ldrb	r2, [r7, #3]
 80093aa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80093ae:	bf00      	nop
 80093b0:	3710      	adds	r7, #16
 80093b2:	46bd      	mov	sp, r7
 80093b4:	bd80      	pop	{r7, pc}

080093b6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80093b6:	b580      	push	{r7, lr}
 80093b8:	b082      	sub	sp, #8
 80093ba:	af00      	add	r7, sp, #0
 80093bc:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d00e      	beq.n	80093e2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2200      	movs	r2, #0
 80093c8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	2200      	movs	r2, #0
 80093ce:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2200      	movs	r2, #0
 80093d4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80093d6:	2300      	movs	r3, #0
 80093d8:	2200      	movs	r2, #0
 80093da:	2100      	movs	r1, #0
 80093dc:	6878      	ldr	r0, [r7, #4]
 80093de:	f000 f917 	bl	8009610 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80093e2:	bf00      	nop
 80093e4:	3708      	adds	r7, #8
 80093e6:	46bd      	mov	sp, r7
 80093e8:	bd80      	pop	{r7, pc}

080093ea <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80093ea:	b580      	push	{r7, lr}
 80093ec:	b086      	sub	sp, #24
 80093ee:	af00      	add	r7, sp, #0
 80093f0:	4603      	mov	r3, r0
 80093f2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80093f4:	2301      	movs	r3, #1
 80093f6:	617b      	str	r3, [r7, #20]
 80093f8:	2300      	movs	r3, #0
 80093fa:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80093fc:	79fb      	ldrb	r3, [r7, #7]
 80093fe:	461a      	mov	r2, r3
 8009400:	6939      	ldr	r1, [r7, #16]
 8009402:	6978      	ldr	r0, [r7, #20]
 8009404:	f7ff ff72 	bl	80092ec <xQueueGenericCreate>
 8009408:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800940a:	68f8      	ldr	r0, [r7, #12]
 800940c:	f7ff ffd3 	bl	80093b6 <prvInitialiseMutex>

		return xNewQueue;
 8009410:	68fb      	ldr	r3, [r7, #12]
	}
 8009412:	4618      	mov	r0, r3
 8009414:	3718      	adds	r7, #24
 8009416:	46bd      	mov	sp, r7
 8009418:	bd80      	pop	{r7, pc}

0800941a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800941a:	b580      	push	{r7, lr}
 800941c:	b088      	sub	sp, #32
 800941e:	af02      	add	r7, sp, #8
 8009420:	4603      	mov	r3, r0
 8009422:	6039      	str	r1, [r7, #0]
 8009424:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009426:	2301      	movs	r3, #1
 8009428:	617b      	str	r3, [r7, #20]
 800942a:	2300      	movs	r3, #0
 800942c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800942e:	79fb      	ldrb	r3, [r7, #7]
 8009430:	9300      	str	r3, [sp, #0]
 8009432:	683b      	ldr	r3, [r7, #0]
 8009434:	2200      	movs	r2, #0
 8009436:	6939      	ldr	r1, [r7, #16]
 8009438:	6978      	ldr	r0, [r7, #20]
 800943a:	f7ff fed5 	bl	80091e8 <xQueueGenericCreateStatic>
 800943e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8009440:	68f8      	ldr	r0, [r7, #12]
 8009442:	f7ff ffb8 	bl	80093b6 <prvInitialiseMutex>

		return xNewQueue;
 8009446:	68fb      	ldr	r3, [r7, #12]
	}
 8009448:	4618      	mov	r0, r3
 800944a:	3718      	adds	r7, #24
 800944c:	46bd      	mov	sp, r7
 800944e:	bd80      	pop	{r7, pc}

08009450 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8009450:	b590      	push	{r4, r7, lr}
 8009452:	b087      	sub	sp, #28
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800945c:	693b      	ldr	r3, [r7, #16]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d10c      	bne.n	800947c <xQueueGiveMutexRecursive+0x2c>
	__asm volatile
 8009462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009466:	b672      	cpsid	i
 8009468:	f383 8811 	msr	BASEPRI, r3
 800946c:	f3bf 8f6f 	isb	sy
 8009470:	f3bf 8f4f 	dsb	sy
 8009474:	b662      	cpsie	i
 8009476:	60fb      	str	r3, [r7, #12]
}
 8009478:	bf00      	nop
 800947a:	e7fe      	b.n	800947a <xQueueGiveMutexRecursive+0x2a>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800947c:	693b      	ldr	r3, [r7, #16]
 800947e:	689c      	ldr	r4, [r3, #8]
 8009480:	f001 fd98 	bl	800afb4 <xTaskGetCurrentTaskHandle>
 8009484:	4603      	mov	r3, r0
 8009486:	429c      	cmp	r4, r3
 8009488:	d111      	bne.n	80094ae <xQueueGiveMutexRecursive+0x5e>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800948a:	693b      	ldr	r3, [r7, #16]
 800948c:	68db      	ldr	r3, [r3, #12]
 800948e:	1e5a      	subs	r2, r3, #1
 8009490:	693b      	ldr	r3, [r7, #16]
 8009492:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8009494:	693b      	ldr	r3, [r7, #16]
 8009496:	68db      	ldr	r3, [r3, #12]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d105      	bne.n	80094a8 <xQueueGiveMutexRecursive+0x58>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800949c:	2300      	movs	r3, #0
 800949e:	2200      	movs	r2, #0
 80094a0:	2100      	movs	r1, #0
 80094a2:	6938      	ldr	r0, [r7, #16]
 80094a4:	f000 f8b4 	bl	8009610 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80094a8:	2301      	movs	r3, #1
 80094aa:	617b      	str	r3, [r7, #20]
 80094ac:	e001      	b.n	80094b2 <xQueueGiveMutexRecursive+0x62>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80094ae:	2300      	movs	r3, #0
 80094b0:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80094b2:	697b      	ldr	r3, [r7, #20]
	}
 80094b4:	4618      	mov	r0, r3
 80094b6:	371c      	adds	r7, #28
 80094b8:	46bd      	mov	sp, r7
 80094ba:	bd90      	pop	{r4, r7, pc}

080094bc <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80094bc:	b590      	push	{r4, r7, lr}
 80094be:	b087      	sub	sp, #28
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
 80094c4:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80094ca:	693b      	ldr	r3, [r7, #16]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d10c      	bne.n	80094ea <xQueueTakeMutexRecursive+0x2e>
	__asm volatile
 80094d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094d4:	b672      	cpsid	i
 80094d6:	f383 8811 	msr	BASEPRI, r3
 80094da:	f3bf 8f6f 	isb	sy
 80094de:	f3bf 8f4f 	dsb	sy
 80094e2:	b662      	cpsie	i
 80094e4:	60fb      	str	r3, [r7, #12]
}
 80094e6:	bf00      	nop
 80094e8:	e7fe      	b.n	80094e8 <xQueueTakeMutexRecursive+0x2c>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80094ea:	693b      	ldr	r3, [r7, #16]
 80094ec:	689c      	ldr	r4, [r3, #8]
 80094ee:	f001 fd61 	bl	800afb4 <xTaskGetCurrentTaskHandle>
 80094f2:	4603      	mov	r3, r0
 80094f4:	429c      	cmp	r4, r3
 80094f6:	d107      	bne.n	8009508 <xQueueTakeMutexRecursive+0x4c>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80094f8:	693b      	ldr	r3, [r7, #16]
 80094fa:	68db      	ldr	r3, [r3, #12]
 80094fc:	1c5a      	adds	r2, r3, #1
 80094fe:	693b      	ldr	r3, [r7, #16]
 8009500:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8009502:	2301      	movs	r3, #1
 8009504:	617b      	str	r3, [r7, #20]
 8009506:	e00c      	b.n	8009522 <xQueueTakeMutexRecursive+0x66>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8009508:	6839      	ldr	r1, [r7, #0]
 800950a:	6938      	ldr	r0, [r7, #16]
 800950c:	f000 fba2 	bl	8009c54 <xQueueSemaphoreTake>
 8009510:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8009512:	697b      	ldr	r3, [r7, #20]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d004      	beq.n	8009522 <xQueueTakeMutexRecursive+0x66>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8009518:	693b      	ldr	r3, [r7, #16]
 800951a:	68db      	ldr	r3, [r3, #12]
 800951c:	1c5a      	adds	r2, r3, #1
 800951e:	693b      	ldr	r3, [r7, #16]
 8009520:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8009522:	697b      	ldr	r3, [r7, #20]
	}
 8009524:	4618      	mov	r0, r3
 8009526:	371c      	adds	r7, #28
 8009528:	46bd      	mov	sp, r7
 800952a:	bd90      	pop	{r4, r7, pc}

0800952c <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800952c:	b580      	push	{r7, lr}
 800952e:	b08a      	sub	sp, #40	; 0x28
 8009530:	af02      	add	r7, sp, #8
 8009532:	60f8      	str	r0, [r7, #12]
 8009534:	60b9      	str	r1, [r7, #8]
 8009536:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d10c      	bne.n	8009558 <xQueueCreateCountingSemaphoreStatic+0x2c>
	__asm volatile
 800953e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009542:	b672      	cpsid	i
 8009544:	f383 8811 	msr	BASEPRI, r3
 8009548:	f3bf 8f6f 	isb	sy
 800954c:	f3bf 8f4f 	dsb	sy
 8009550:	b662      	cpsie	i
 8009552:	61bb      	str	r3, [r7, #24]
}
 8009554:	bf00      	nop
 8009556:	e7fe      	b.n	8009556 <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009558:	68ba      	ldr	r2, [r7, #8]
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	429a      	cmp	r2, r3
 800955e:	d90c      	bls.n	800957a <xQueueCreateCountingSemaphoreStatic+0x4e>
	__asm volatile
 8009560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009564:	b672      	cpsid	i
 8009566:	f383 8811 	msr	BASEPRI, r3
 800956a:	f3bf 8f6f 	isb	sy
 800956e:	f3bf 8f4f 	dsb	sy
 8009572:	b662      	cpsie	i
 8009574:	617b      	str	r3, [r7, #20]
}
 8009576:	bf00      	nop
 8009578:	e7fe      	b.n	8009578 <xQueueCreateCountingSemaphoreStatic+0x4c>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800957a:	2302      	movs	r3, #2
 800957c:	9300      	str	r3, [sp, #0]
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	2200      	movs	r2, #0
 8009582:	2100      	movs	r1, #0
 8009584:	68f8      	ldr	r0, [r7, #12]
 8009586:	f7ff fe2f 	bl	80091e8 <xQueueGenericCreateStatic>
 800958a:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800958c:	69fb      	ldr	r3, [r7, #28]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d002      	beq.n	8009598 <xQueueCreateCountingSemaphoreStatic+0x6c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009592:	69fb      	ldr	r3, [r7, #28]
 8009594:	68ba      	ldr	r2, [r7, #8]
 8009596:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009598:	69fb      	ldr	r3, [r7, #28]
	}
 800959a:	4618      	mov	r0, r3
 800959c:	3720      	adds	r7, #32
 800959e:	46bd      	mov	sp, r7
 80095a0:	bd80      	pop	{r7, pc}

080095a2 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80095a2:	b580      	push	{r7, lr}
 80095a4:	b086      	sub	sp, #24
 80095a6:	af00      	add	r7, sp, #0
 80095a8:	6078      	str	r0, [r7, #4]
 80095aa:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d10c      	bne.n	80095cc <xQueueCreateCountingSemaphore+0x2a>
	__asm volatile
 80095b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095b6:	b672      	cpsid	i
 80095b8:	f383 8811 	msr	BASEPRI, r3
 80095bc:	f3bf 8f6f 	isb	sy
 80095c0:	f3bf 8f4f 	dsb	sy
 80095c4:	b662      	cpsie	i
 80095c6:	613b      	str	r3, [r7, #16]
}
 80095c8:	bf00      	nop
 80095ca:	e7fe      	b.n	80095ca <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 80095cc:	683a      	ldr	r2, [r7, #0]
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	429a      	cmp	r2, r3
 80095d2:	d90c      	bls.n	80095ee <xQueueCreateCountingSemaphore+0x4c>
	__asm volatile
 80095d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095d8:	b672      	cpsid	i
 80095da:	f383 8811 	msr	BASEPRI, r3
 80095de:	f3bf 8f6f 	isb	sy
 80095e2:	f3bf 8f4f 	dsb	sy
 80095e6:	b662      	cpsie	i
 80095e8:	60fb      	str	r3, [r7, #12]
}
 80095ea:	bf00      	nop
 80095ec:	e7fe      	b.n	80095ec <xQueueCreateCountingSemaphore+0x4a>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80095ee:	2202      	movs	r2, #2
 80095f0:	2100      	movs	r1, #0
 80095f2:	6878      	ldr	r0, [r7, #4]
 80095f4:	f7ff fe7a 	bl	80092ec <xQueueGenericCreate>
 80095f8:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80095fa:	697b      	ldr	r3, [r7, #20]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d002      	beq.n	8009606 <xQueueCreateCountingSemaphore+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009600:	697b      	ldr	r3, [r7, #20]
 8009602:	683a      	ldr	r2, [r7, #0]
 8009604:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009606:	697b      	ldr	r3, [r7, #20]
	}
 8009608:	4618      	mov	r0, r3
 800960a:	3718      	adds	r7, #24
 800960c:	46bd      	mov	sp, r7
 800960e:	bd80      	pop	{r7, pc}

08009610 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b08e      	sub	sp, #56	; 0x38
 8009614:	af00      	add	r7, sp, #0
 8009616:	60f8      	str	r0, [r7, #12]
 8009618:	60b9      	str	r1, [r7, #8]
 800961a:	607a      	str	r2, [r7, #4]
 800961c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800961e:	2300      	movs	r3, #0
 8009620:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009628:	2b00      	cmp	r3, #0
 800962a:	d10c      	bne.n	8009646 <xQueueGenericSend+0x36>
	__asm volatile
 800962c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009630:	b672      	cpsid	i
 8009632:	f383 8811 	msr	BASEPRI, r3
 8009636:	f3bf 8f6f 	isb	sy
 800963a:	f3bf 8f4f 	dsb	sy
 800963e:	b662      	cpsie	i
 8009640:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009642:	bf00      	nop
 8009644:	e7fe      	b.n	8009644 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009646:	68bb      	ldr	r3, [r7, #8]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d103      	bne.n	8009654 <xQueueGenericSend+0x44>
 800964c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800964e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009650:	2b00      	cmp	r3, #0
 8009652:	d101      	bne.n	8009658 <xQueueGenericSend+0x48>
 8009654:	2301      	movs	r3, #1
 8009656:	e000      	b.n	800965a <xQueueGenericSend+0x4a>
 8009658:	2300      	movs	r3, #0
 800965a:	2b00      	cmp	r3, #0
 800965c:	d10c      	bne.n	8009678 <xQueueGenericSend+0x68>
	__asm volatile
 800965e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009662:	b672      	cpsid	i
 8009664:	f383 8811 	msr	BASEPRI, r3
 8009668:	f3bf 8f6f 	isb	sy
 800966c:	f3bf 8f4f 	dsb	sy
 8009670:	b662      	cpsie	i
 8009672:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009674:	bf00      	nop
 8009676:	e7fe      	b.n	8009676 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009678:	683b      	ldr	r3, [r7, #0]
 800967a:	2b02      	cmp	r3, #2
 800967c:	d103      	bne.n	8009686 <xQueueGenericSend+0x76>
 800967e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009682:	2b01      	cmp	r3, #1
 8009684:	d101      	bne.n	800968a <xQueueGenericSend+0x7a>
 8009686:	2301      	movs	r3, #1
 8009688:	e000      	b.n	800968c <xQueueGenericSend+0x7c>
 800968a:	2300      	movs	r3, #0
 800968c:	2b00      	cmp	r3, #0
 800968e:	d10c      	bne.n	80096aa <xQueueGenericSend+0x9a>
	__asm volatile
 8009690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009694:	b672      	cpsid	i
 8009696:	f383 8811 	msr	BASEPRI, r3
 800969a:	f3bf 8f6f 	isb	sy
 800969e:	f3bf 8f4f 	dsb	sy
 80096a2:	b662      	cpsie	i
 80096a4:	623b      	str	r3, [r7, #32]
}
 80096a6:	bf00      	nop
 80096a8:	e7fe      	b.n	80096a8 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80096aa:	f001 fc93 	bl	800afd4 <xTaskGetSchedulerState>
 80096ae:	4603      	mov	r3, r0
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d102      	bne.n	80096ba <xQueueGenericSend+0xaa>
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d101      	bne.n	80096be <xQueueGenericSend+0xae>
 80096ba:	2301      	movs	r3, #1
 80096bc:	e000      	b.n	80096c0 <xQueueGenericSend+0xb0>
 80096be:	2300      	movs	r3, #0
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d10c      	bne.n	80096de <xQueueGenericSend+0xce>
	__asm volatile
 80096c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096c8:	b672      	cpsid	i
 80096ca:	f383 8811 	msr	BASEPRI, r3
 80096ce:	f3bf 8f6f 	isb	sy
 80096d2:	f3bf 8f4f 	dsb	sy
 80096d6:	b662      	cpsie	i
 80096d8:	61fb      	str	r3, [r7, #28]
}
 80096da:	bf00      	nop
 80096dc:	e7fe      	b.n	80096dc <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80096de:	f7ff fbed 	bl	8008ebc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80096e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80096e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096ea:	429a      	cmp	r2, r3
 80096ec:	d302      	bcc.n	80096f4 <xQueueGenericSend+0xe4>
 80096ee:	683b      	ldr	r3, [r7, #0]
 80096f0:	2b02      	cmp	r3, #2
 80096f2:	d129      	bne.n	8009748 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80096f4:	683a      	ldr	r2, [r7, #0]
 80096f6:	68b9      	ldr	r1, [r7, #8]
 80096f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80096fa:	f000 fc82 	bl	800a002 <prvCopyDataToQueue>
 80096fe:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009704:	2b00      	cmp	r3, #0
 8009706:	d010      	beq.n	800972a <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800970a:	3324      	adds	r3, #36	; 0x24
 800970c:	4618      	mov	r0, r3
 800970e:	f001 fa89 	bl	800ac24 <xTaskRemoveFromEventList>
 8009712:	4603      	mov	r3, r0
 8009714:	2b00      	cmp	r3, #0
 8009716:	d013      	beq.n	8009740 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009718:	4b3f      	ldr	r3, [pc, #252]	; (8009818 <xQueueGenericSend+0x208>)
 800971a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800971e:	601a      	str	r2, [r3, #0]
 8009720:	f3bf 8f4f 	dsb	sy
 8009724:	f3bf 8f6f 	isb	sy
 8009728:	e00a      	b.n	8009740 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800972a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800972c:	2b00      	cmp	r3, #0
 800972e:	d007      	beq.n	8009740 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009730:	4b39      	ldr	r3, [pc, #228]	; (8009818 <xQueueGenericSend+0x208>)
 8009732:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009736:	601a      	str	r2, [r3, #0]
 8009738:	f3bf 8f4f 	dsb	sy
 800973c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009740:	f7ff fbf0 	bl	8008f24 <vPortExitCritical>
				return pdPASS;
 8009744:	2301      	movs	r3, #1
 8009746:	e063      	b.n	8009810 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d103      	bne.n	8009756 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800974e:	f7ff fbe9 	bl	8008f24 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009752:	2300      	movs	r3, #0
 8009754:	e05c      	b.n	8009810 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009756:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009758:	2b00      	cmp	r3, #0
 800975a:	d106      	bne.n	800976a <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800975c:	f107 0314 	add.w	r3, r7, #20
 8009760:	4618      	mov	r0, r3
 8009762:	f001 fac5 	bl	800acf0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009766:	2301      	movs	r3, #1
 8009768:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800976a:	f7ff fbdb 	bl	8008f24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800976e:	f001 f82b 	bl	800a7c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009772:	f7ff fba3 	bl	8008ebc <vPortEnterCritical>
 8009776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009778:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800977c:	b25b      	sxtb	r3, r3
 800977e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009782:	d103      	bne.n	800978c <xQueueGenericSend+0x17c>
 8009784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009786:	2200      	movs	r2, #0
 8009788:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800978c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800978e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009792:	b25b      	sxtb	r3, r3
 8009794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009798:	d103      	bne.n	80097a2 <xQueueGenericSend+0x192>
 800979a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800979c:	2200      	movs	r2, #0
 800979e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80097a2:	f7ff fbbf 	bl	8008f24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80097a6:	1d3a      	adds	r2, r7, #4
 80097a8:	f107 0314 	add.w	r3, r7, #20
 80097ac:	4611      	mov	r1, r2
 80097ae:	4618      	mov	r0, r3
 80097b0:	f001 fab4 	bl	800ad1c <xTaskCheckForTimeOut>
 80097b4:	4603      	mov	r3, r0
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d124      	bne.n	8009804 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80097ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80097bc:	f000 fd19 	bl	800a1f2 <prvIsQueueFull>
 80097c0:	4603      	mov	r3, r0
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d018      	beq.n	80097f8 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80097c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097c8:	3310      	adds	r3, #16
 80097ca:	687a      	ldr	r2, [r7, #4]
 80097cc:	4611      	mov	r1, r2
 80097ce:	4618      	mov	r0, r3
 80097d0:	f001 f9d4 	bl	800ab7c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80097d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80097d6:	f000 fca4 	bl	800a122 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80097da:	f001 f803 	bl	800a7e4 <xTaskResumeAll>
 80097de:	4603      	mov	r3, r0
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	f47f af7c 	bne.w	80096de <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 80097e6:	4b0c      	ldr	r3, [pc, #48]	; (8009818 <xQueueGenericSend+0x208>)
 80097e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097ec:	601a      	str	r2, [r3, #0]
 80097ee:	f3bf 8f4f 	dsb	sy
 80097f2:	f3bf 8f6f 	isb	sy
 80097f6:	e772      	b.n	80096de <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80097f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80097fa:	f000 fc92 	bl	800a122 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80097fe:	f000 fff1 	bl	800a7e4 <xTaskResumeAll>
 8009802:	e76c      	b.n	80096de <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009804:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009806:	f000 fc8c 	bl	800a122 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800980a:	f000 ffeb 	bl	800a7e4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800980e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009810:	4618      	mov	r0, r3
 8009812:	3738      	adds	r7, #56	; 0x38
 8009814:	46bd      	mov	sp, r7
 8009816:	bd80      	pop	{r7, pc}
 8009818:	e000ed04 	.word	0xe000ed04

0800981c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800981c:	b580      	push	{r7, lr}
 800981e:	b08e      	sub	sp, #56	; 0x38
 8009820:	af00      	add	r7, sp, #0
 8009822:	60f8      	str	r0, [r7, #12]
 8009824:	60b9      	str	r1, [r7, #8]
 8009826:	607a      	str	r2, [r7, #4]
 8009828:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800982e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009830:	2b00      	cmp	r3, #0
 8009832:	d10c      	bne.n	800984e <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8009834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009838:	b672      	cpsid	i
 800983a:	f383 8811 	msr	BASEPRI, r3
 800983e:	f3bf 8f6f 	isb	sy
 8009842:	f3bf 8f4f 	dsb	sy
 8009846:	b662      	cpsie	i
 8009848:	627b      	str	r3, [r7, #36]	; 0x24
}
 800984a:	bf00      	nop
 800984c:	e7fe      	b.n	800984c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800984e:	68bb      	ldr	r3, [r7, #8]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d103      	bne.n	800985c <xQueueGenericSendFromISR+0x40>
 8009854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009858:	2b00      	cmp	r3, #0
 800985a:	d101      	bne.n	8009860 <xQueueGenericSendFromISR+0x44>
 800985c:	2301      	movs	r3, #1
 800985e:	e000      	b.n	8009862 <xQueueGenericSendFromISR+0x46>
 8009860:	2300      	movs	r3, #0
 8009862:	2b00      	cmp	r3, #0
 8009864:	d10c      	bne.n	8009880 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8009866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800986a:	b672      	cpsid	i
 800986c:	f383 8811 	msr	BASEPRI, r3
 8009870:	f3bf 8f6f 	isb	sy
 8009874:	f3bf 8f4f 	dsb	sy
 8009878:	b662      	cpsie	i
 800987a:	623b      	str	r3, [r7, #32]
}
 800987c:	bf00      	nop
 800987e:	e7fe      	b.n	800987e <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009880:	683b      	ldr	r3, [r7, #0]
 8009882:	2b02      	cmp	r3, #2
 8009884:	d103      	bne.n	800988e <xQueueGenericSendFromISR+0x72>
 8009886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800988a:	2b01      	cmp	r3, #1
 800988c:	d101      	bne.n	8009892 <xQueueGenericSendFromISR+0x76>
 800988e:	2301      	movs	r3, #1
 8009890:	e000      	b.n	8009894 <xQueueGenericSendFromISR+0x78>
 8009892:	2300      	movs	r3, #0
 8009894:	2b00      	cmp	r3, #0
 8009896:	d10c      	bne.n	80098b2 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8009898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800989c:	b672      	cpsid	i
 800989e:	f383 8811 	msr	BASEPRI, r3
 80098a2:	f3bf 8f6f 	isb	sy
 80098a6:	f3bf 8f4f 	dsb	sy
 80098aa:	b662      	cpsie	i
 80098ac:	61fb      	str	r3, [r7, #28]
}
 80098ae:	bf00      	nop
 80098b0:	e7fe      	b.n	80098b0 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80098b2:	f7ff fbeb 	bl	800908c <vPortValidateInterruptPriority>
	__asm volatile
 80098b6:	f3ef 8211 	mrs	r2, BASEPRI
 80098ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098be:	b672      	cpsid	i
 80098c0:	f383 8811 	msr	BASEPRI, r3
 80098c4:	f3bf 8f6f 	isb	sy
 80098c8:	f3bf 8f4f 	dsb	sy
 80098cc:	b662      	cpsie	i
 80098ce:	61ba      	str	r2, [r7, #24]
 80098d0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80098d2:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80098d4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80098d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80098da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098de:	429a      	cmp	r2, r3
 80098e0:	d302      	bcc.n	80098e8 <xQueueGenericSendFromISR+0xcc>
 80098e2:	683b      	ldr	r3, [r7, #0]
 80098e4:	2b02      	cmp	r3, #2
 80098e6:	d12c      	bne.n	8009942 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80098e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80098ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80098f2:	683a      	ldr	r2, [r7, #0]
 80098f4:	68b9      	ldr	r1, [r7, #8]
 80098f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80098f8:	f000 fb83 	bl	800a002 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80098fc:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8009900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009904:	d112      	bne.n	800992c <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800990a:	2b00      	cmp	r3, #0
 800990c:	d016      	beq.n	800993c <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800990e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009910:	3324      	adds	r3, #36	; 0x24
 8009912:	4618      	mov	r0, r3
 8009914:	f001 f986 	bl	800ac24 <xTaskRemoveFromEventList>
 8009918:	4603      	mov	r3, r0
 800991a:	2b00      	cmp	r3, #0
 800991c:	d00e      	beq.n	800993c <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d00b      	beq.n	800993c <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	2201      	movs	r2, #1
 8009928:	601a      	str	r2, [r3, #0]
 800992a:	e007      	b.n	800993c <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800992c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009930:	3301      	adds	r3, #1
 8009932:	b2db      	uxtb	r3, r3
 8009934:	b25a      	sxtb	r2, r3
 8009936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009938:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800993c:	2301      	movs	r3, #1
 800993e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8009940:	e001      	b.n	8009946 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009942:	2300      	movs	r3, #0
 8009944:	637b      	str	r3, [r7, #52]	; 0x34
 8009946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009948:	613b      	str	r3, [r7, #16]
	__asm volatile
 800994a:	693b      	ldr	r3, [r7, #16]
 800994c:	f383 8811 	msr	BASEPRI, r3
}
 8009950:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009954:	4618      	mov	r0, r3
 8009956:	3738      	adds	r7, #56	; 0x38
 8009958:	46bd      	mov	sp, r7
 800995a:	bd80      	pop	{r7, pc}

0800995c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800995c:	b580      	push	{r7, lr}
 800995e:	b08e      	sub	sp, #56	; 0x38
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
 8009964:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800996a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800996c:	2b00      	cmp	r3, #0
 800996e:	d10c      	bne.n	800998a <xQueueGiveFromISR+0x2e>
	__asm volatile
 8009970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009974:	b672      	cpsid	i
 8009976:	f383 8811 	msr	BASEPRI, r3
 800997a:	f3bf 8f6f 	isb	sy
 800997e:	f3bf 8f4f 	dsb	sy
 8009982:	b662      	cpsie	i
 8009984:	623b      	str	r3, [r7, #32]
}
 8009986:	bf00      	nop
 8009988:	e7fe      	b.n	8009988 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800998a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800998c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800998e:	2b00      	cmp	r3, #0
 8009990:	d00c      	beq.n	80099ac <xQueueGiveFromISR+0x50>
	__asm volatile
 8009992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009996:	b672      	cpsid	i
 8009998:	f383 8811 	msr	BASEPRI, r3
 800999c:	f3bf 8f6f 	isb	sy
 80099a0:	f3bf 8f4f 	dsb	sy
 80099a4:	b662      	cpsie	i
 80099a6:	61fb      	str	r3, [r7, #28]
}
 80099a8:	bf00      	nop
 80099aa:	e7fe      	b.n	80099aa <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80099ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d103      	bne.n	80099bc <xQueueGiveFromISR+0x60>
 80099b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099b6:	689b      	ldr	r3, [r3, #8]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d101      	bne.n	80099c0 <xQueueGiveFromISR+0x64>
 80099bc:	2301      	movs	r3, #1
 80099be:	e000      	b.n	80099c2 <xQueueGiveFromISR+0x66>
 80099c0:	2300      	movs	r3, #0
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d10c      	bne.n	80099e0 <xQueueGiveFromISR+0x84>
	__asm volatile
 80099c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099ca:	b672      	cpsid	i
 80099cc:	f383 8811 	msr	BASEPRI, r3
 80099d0:	f3bf 8f6f 	isb	sy
 80099d4:	f3bf 8f4f 	dsb	sy
 80099d8:	b662      	cpsie	i
 80099da:	61bb      	str	r3, [r7, #24]
}
 80099dc:	bf00      	nop
 80099de:	e7fe      	b.n	80099de <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80099e0:	f7ff fb54 	bl	800908c <vPortValidateInterruptPriority>
	__asm volatile
 80099e4:	f3ef 8211 	mrs	r2, BASEPRI
 80099e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099ec:	b672      	cpsid	i
 80099ee:	f383 8811 	msr	BASEPRI, r3
 80099f2:	f3bf 8f6f 	isb	sy
 80099f6:	f3bf 8f4f 	dsb	sy
 80099fa:	b662      	cpsie	i
 80099fc:	617a      	str	r2, [r7, #20]
 80099fe:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8009a00:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009a02:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a08:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8009a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009a10:	429a      	cmp	r2, r3
 8009a12:	d22b      	bcs.n	8009a6c <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a16:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009a1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a20:	1c5a      	adds	r2, r3, #1
 8009a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a24:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009a26:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009a2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a2e:	d112      	bne.n	8009a56 <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d016      	beq.n	8009a66 <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a3a:	3324      	adds	r3, #36	; 0x24
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	f001 f8f1 	bl	800ac24 <xTaskRemoveFromEventList>
 8009a42:	4603      	mov	r3, r0
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d00e      	beq.n	8009a66 <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d00b      	beq.n	8009a66 <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009a4e:	683b      	ldr	r3, [r7, #0]
 8009a50:	2201      	movs	r2, #1
 8009a52:	601a      	str	r2, [r3, #0]
 8009a54:	e007      	b.n	8009a66 <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009a56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009a5a:	3301      	adds	r3, #1
 8009a5c:	b2db      	uxtb	r3, r3
 8009a5e:	b25a      	sxtb	r2, r3
 8009a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009a66:	2301      	movs	r3, #1
 8009a68:	637b      	str	r3, [r7, #52]	; 0x34
 8009a6a:	e001      	b.n	8009a70 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	637b      	str	r3, [r7, #52]	; 0x34
 8009a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a72:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	f383 8811 	msr	BASEPRI, r3
}
 8009a7a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009a7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009a7e:	4618      	mov	r0, r3
 8009a80:	3738      	adds	r7, #56	; 0x38
 8009a82:	46bd      	mov	sp, r7
 8009a84:	bd80      	pop	{r7, pc}
	...

08009a88 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b08c      	sub	sp, #48	; 0x30
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	60f8      	str	r0, [r7, #12]
 8009a90:	60b9      	str	r1, [r7, #8]
 8009a92:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009a94:	2300      	movs	r3, #0
 8009a96:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d10c      	bne.n	8009abc <xQueueReceive+0x34>
	__asm volatile
 8009aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aa6:	b672      	cpsid	i
 8009aa8:	f383 8811 	msr	BASEPRI, r3
 8009aac:	f3bf 8f6f 	isb	sy
 8009ab0:	f3bf 8f4f 	dsb	sy
 8009ab4:	b662      	cpsie	i
 8009ab6:	623b      	str	r3, [r7, #32]
}
 8009ab8:	bf00      	nop
 8009aba:	e7fe      	b.n	8009aba <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009abc:	68bb      	ldr	r3, [r7, #8]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d103      	bne.n	8009aca <xQueueReceive+0x42>
 8009ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d101      	bne.n	8009ace <xQueueReceive+0x46>
 8009aca:	2301      	movs	r3, #1
 8009acc:	e000      	b.n	8009ad0 <xQueueReceive+0x48>
 8009ace:	2300      	movs	r3, #0
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d10c      	bne.n	8009aee <xQueueReceive+0x66>
	__asm volatile
 8009ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ad8:	b672      	cpsid	i
 8009ada:	f383 8811 	msr	BASEPRI, r3
 8009ade:	f3bf 8f6f 	isb	sy
 8009ae2:	f3bf 8f4f 	dsb	sy
 8009ae6:	b662      	cpsie	i
 8009ae8:	61fb      	str	r3, [r7, #28]
}
 8009aea:	bf00      	nop
 8009aec:	e7fe      	b.n	8009aec <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009aee:	f001 fa71 	bl	800afd4 <xTaskGetSchedulerState>
 8009af2:	4603      	mov	r3, r0
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d102      	bne.n	8009afe <xQueueReceive+0x76>
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d101      	bne.n	8009b02 <xQueueReceive+0x7a>
 8009afe:	2301      	movs	r3, #1
 8009b00:	e000      	b.n	8009b04 <xQueueReceive+0x7c>
 8009b02:	2300      	movs	r3, #0
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d10c      	bne.n	8009b22 <xQueueReceive+0x9a>
	__asm volatile
 8009b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b0c:	b672      	cpsid	i
 8009b0e:	f383 8811 	msr	BASEPRI, r3
 8009b12:	f3bf 8f6f 	isb	sy
 8009b16:	f3bf 8f4f 	dsb	sy
 8009b1a:	b662      	cpsie	i
 8009b1c:	61bb      	str	r3, [r7, #24]
}
 8009b1e:	bf00      	nop
 8009b20:	e7fe      	b.n	8009b20 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009b22:	f7ff f9cb 	bl	8008ebc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b2a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d01f      	beq.n	8009b72 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009b32:	68b9      	ldr	r1, [r7, #8]
 8009b34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b36:	f000 face 	bl	800a0d6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b3c:	1e5a      	subs	r2, r3, #1
 8009b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b40:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b44:	691b      	ldr	r3, [r3, #16]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d00f      	beq.n	8009b6a <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b4c:	3310      	adds	r3, #16
 8009b4e:	4618      	mov	r0, r3
 8009b50:	f001 f868 	bl	800ac24 <xTaskRemoveFromEventList>
 8009b54:	4603      	mov	r3, r0
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d007      	beq.n	8009b6a <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009b5a:	4b3d      	ldr	r3, [pc, #244]	; (8009c50 <xQueueReceive+0x1c8>)
 8009b5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b60:	601a      	str	r2, [r3, #0]
 8009b62:	f3bf 8f4f 	dsb	sy
 8009b66:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009b6a:	f7ff f9db 	bl	8008f24 <vPortExitCritical>
				return pdPASS;
 8009b6e:	2301      	movs	r3, #1
 8009b70:	e069      	b.n	8009c46 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d103      	bne.n	8009b80 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009b78:	f7ff f9d4 	bl	8008f24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009b7c:	2300      	movs	r3, #0
 8009b7e:	e062      	b.n	8009c46 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d106      	bne.n	8009b94 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009b86:	f107 0310 	add.w	r3, r7, #16
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	f001 f8b0 	bl	800acf0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009b90:	2301      	movs	r3, #1
 8009b92:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009b94:	f7ff f9c6 	bl	8008f24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009b98:	f000 fe16 	bl	800a7c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009b9c:	f7ff f98e 	bl	8008ebc <vPortEnterCritical>
 8009ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ba2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009ba6:	b25b      	sxtb	r3, r3
 8009ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bac:	d103      	bne.n	8009bb6 <xQueueReceive+0x12e>
 8009bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bb8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009bbc:	b25b      	sxtb	r3, r3
 8009bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bc2:	d103      	bne.n	8009bcc <xQueueReceive+0x144>
 8009bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009bcc:	f7ff f9aa 	bl	8008f24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009bd0:	1d3a      	adds	r2, r7, #4
 8009bd2:	f107 0310 	add.w	r3, r7, #16
 8009bd6:	4611      	mov	r1, r2
 8009bd8:	4618      	mov	r0, r3
 8009bda:	f001 f89f 	bl	800ad1c <xTaskCheckForTimeOut>
 8009bde:	4603      	mov	r3, r0
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d123      	bne.n	8009c2c <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009be4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009be6:	f000 faee 	bl	800a1c6 <prvIsQueueEmpty>
 8009bea:	4603      	mov	r3, r0
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d017      	beq.n	8009c20 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bf2:	3324      	adds	r3, #36	; 0x24
 8009bf4:	687a      	ldr	r2, [r7, #4]
 8009bf6:	4611      	mov	r1, r2
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	f000 ffbf 	bl	800ab7c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009bfe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c00:	f000 fa8f 	bl	800a122 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009c04:	f000 fdee 	bl	800a7e4 <xTaskResumeAll>
 8009c08:	4603      	mov	r3, r0
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d189      	bne.n	8009b22 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8009c0e:	4b10      	ldr	r3, [pc, #64]	; (8009c50 <xQueueReceive+0x1c8>)
 8009c10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c14:	601a      	str	r2, [r3, #0]
 8009c16:	f3bf 8f4f 	dsb	sy
 8009c1a:	f3bf 8f6f 	isb	sy
 8009c1e:	e780      	b.n	8009b22 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009c20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c22:	f000 fa7e 	bl	800a122 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009c26:	f000 fddd 	bl	800a7e4 <xTaskResumeAll>
 8009c2a:	e77a      	b.n	8009b22 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009c2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c2e:	f000 fa78 	bl	800a122 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009c32:	f000 fdd7 	bl	800a7e4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009c36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c38:	f000 fac5 	bl	800a1c6 <prvIsQueueEmpty>
 8009c3c:	4603      	mov	r3, r0
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	f43f af6f 	beq.w	8009b22 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009c44:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009c46:	4618      	mov	r0, r3
 8009c48:	3730      	adds	r7, #48	; 0x30
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	bd80      	pop	{r7, pc}
 8009c4e:	bf00      	nop
 8009c50:	e000ed04 	.word	0xe000ed04

08009c54 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b08e      	sub	sp, #56	; 0x38
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
 8009c5c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8009c5e:	2300      	movs	r3, #0
 8009c60:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8009c66:	2300      	movs	r3, #0
 8009c68:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d10c      	bne.n	8009c8a <xQueueSemaphoreTake+0x36>
	__asm volatile
 8009c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c74:	b672      	cpsid	i
 8009c76:	f383 8811 	msr	BASEPRI, r3
 8009c7a:	f3bf 8f6f 	isb	sy
 8009c7e:	f3bf 8f4f 	dsb	sy
 8009c82:	b662      	cpsie	i
 8009c84:	623b      	str	r3, [r7, #32]
}
 8009c86:	bf00      	nop
 8009c88:	e7fe      	b.n	8009c88 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d00c      	beq.n	8009cac <xQueueSemaphoreTake+0x58>
	__asm volatile
 8009c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c96:	b672      	cpsid	i
 8009c98:	f383 8811 	msr	BASEPRI, r3
 8009c9c:	f3bf 8f6f 	isb	sy
 8009ca0:	f3bf 8f4f 	dsb	sy
 8009ca4:	b662      	cpsie	i
 8009ca6:	61fb      	str	r3, [r7, #28]
}
 8009ca8:	bf00      	nop
 8009caa:	e7fe      	b.n	8009caa <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009cac:	f001 f992 	bl	800afd4 <xTaskGetSchedulerState>
 8009cb0:	4603      	mov	r3, r0
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d102      	bne.n	8009cbc <xQueueSemaphoreTake+0x68>
 8009cb6:	683b      	ldr	r3, [r7, #0]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d101      	bne.n	8009cc0 <xQueueSemaphoreTake+0x6c>
 8009cbc:	2301      	movs	r3, #1
 8009cbe:	e000      	b.n	8009cc2 <xQueueSemaphoreTake+0x6e>
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d10c      	bne.n	8009ce0 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 8009cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cca:	b672      	cpsid	i
 8009ccc:	f383 8811 	msr	BASEPRI, r3
 8009cd0:	f3bf 8f6f 	isb	sy
 8009cd4:	f3bf 8f4f 	dsb	sy
 8009cd8:	b662      	cpsie	i
 8009cda:	61bb      	str	r3, [r7, #24]
}
 8009cdc:	bf00      	nop
 8009cde:	e7fe      	b.n	8009cde <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009ce0:	f7ff f8ec 	bl	8008ebc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ce8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d024      	beq.n	8009d3a <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cf2:	1e5a      	subs	r2, r3, #1
 8009cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cf6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d104      	bne.n	8009d0a <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8009d00:	f001 fae6 	bl	800b2d0 <pvTaskIncrementMutexHeldCount>
 8009d04:	4602      	mov	r2, r0
 8009d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d08:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d0c:	691b      	ldr	r3, [r3, #16]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d00f      	beq.n	8009d32 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d14:	3310      	adds	r3, #16
 8009d16:	4618      	mov	r0, r3
 8009d18:	f000 ff84 	bl	800ac24 <xTaskRemoveFromEventList>
 8009d1c:	4603      	mov	r3, r0
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d007      	beq.n	8009d32 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009d22:	4b55      	ldr	r3, [pc, #340]	; (8009e78 <xQueueSemaphoreTake+0x224>)
 8009d24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d28:	601a      	str	r2, [r3, #0]
 8009d2a:	f3bf 8f4f 	dsb	sy
 8009d2e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009d32:	f7ff f8f7 	bl	8008f24 <vPortExitCritical>
				return pdPASS;
 8009d36:	2301      	movs	r3, #1
 8009d38:	e099      	b.n	8009e6e <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009d3a:	683b      	ldr	r3, [r7, #0]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d113      	bne.n	8009d68 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d00c      	beq.n	8009d60 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 8009d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d4a:	b672      	cpsid	i
 8009d4c:	f383 8811 	msr	BASEPRI, r3
 8009d50:	f3bf 8f6f 	isb	sy
 8009d54:	f3bf 8f4f 	dsb	sy
 8009d58:	b662      	cpsie	i
 8009d5a:	617b      	str	r3, [r7, #20]
}
 8009d5c:	bf00      	nop
 8009d5e:	e7fe      	b.n	8009d5e <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009d60:	f7ff f8e0 	bl	8008f24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009d64:	2300      	movs	r3, #0
 8009d66:	e082      	b.n	8009e6e <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009d68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d106      	bne.n	8009d7c <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009d6e:	f107 030c 	add.w	r3, r7, #12
 8009d72:	4618      	mov	r0, r3
 8009d74:	f000 ffbc 	bl	800acf0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009d78:	2301      	movs	r3, #1
 8009d7a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009d7c:	f7ff f8d2 	bl	8008f24 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009d80:	f000 fd22 	bl	800a7c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009d84:	f7ff f89a 	bl	8008ebc <vPortEnterCritical>
 8009d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d8a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009d8e:	b25b      	sxtb	r3, r3
 8009d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d94:	d103      	bne.n	8009d9e <xQueueSemaphoreTake+0x14a>
 8009d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d98:	2200      	movs	r2, #0
 8009d9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009da0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009da4:	b25b      	sxtb	r3, r3
 8009da6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009daa:	d103      	bne.n	8009db4 <xQueueSemaphoreTake+0x160>
 8009dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dae:	2200      	movs	r2, #0
 8009db0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009db4:	f7ff f8b6 	bl	8008f24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009db8:	463a      	mov	r2, r7
 8009dba:	f107 030c 	add.w	r3, r7, #12
 8009dbe:	4611      	mov	r1, r2
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	f000 ffab 	bl	800ad1c <xTaskCheckForTimeOut>
 8009dc6:	4603      	mov	r3, r0
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d132      	bne.n	8009e32 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009dcc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009dce:	f000 f9fa 	bl	800a1c6 <prvIsQueueEmpty>
 8009dd2:	4603      	mov	r3, r0
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d026      	beq.n	8009e26 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d109      	bne.n	8009df4 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 8009de0:	f7ff f86c 	bl	8008ebc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009de6:	689b      	ldr	r3, [r3, #8]
 8009de8:	4618      	mov	r0, r3
 8009dea:	f001 f911 	bl	800b010 <xTaskPriorityInherit>
 8009dee:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8009df0:	f7ff f898 	bl	8008f24 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009df6:	3324      	adds	r3, #36	; 0x24
 8009df8:	683a      	ldr	r2, [r7, #0]
 8009dfa:	4611      	mov	r1, r2
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	f000 febd 	bl	800ab7c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009e02:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009e04:	f000 f98d 	bl	800a122 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009e08:	f000 fcec 	bl	800a7e4 <xTaskResumeAll>
 8009e0c:	4603      	mov	r3, r0
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	f47f af66 	bne.w	8009ce0 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 8009e14:	4b18      	ldr	r3, [pc, #96]	; (8009e78 <xQueueSemaphoreTake+0x224>)
 8009e16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e1a:	601a      	str	r2, [r3, #0]
 8009e1c:	f3bf 8f4f 	dsb	sy
 8009e20:	f3bf 8f6f 	isb	sy
 8009e24:	e75c      	b.n	8009ce0 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009e26:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009e28:	f000 f97b 	bl	800a122 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009e2c:	f000 fcda 	bl	800a7e4 <xTaskResumeAll>
 8009e30:	e756      	b.n	8009ce0 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8009e32:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009e34:	f000 f975 	bl	800a122 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009e38:	f000 fcd4 	bl	800a7e4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009e3c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009e3e:	f000 f9c2 	bl	800a1c6 <prvIsQueueEmpty>
 8009e42:	4603      	mov	r3, r0
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	f43f af4b 	beq.w	8009ce0 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8009e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d00d      	beq.n	8009e6c <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8009e50:	f7ff f834 	bl	8008ebc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009e54:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009e56:	f000 f8bc 	bl	8009fd2 <prvGetDisinheritPriorityAfterTimeout>
 8009e5a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e5e:	689b      	ldr	r3, [r3, #8]
 8009e60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009e62:	4618      	mov	r0, r3
 8009e64:	f001 f9ae 	bl	800b1c4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009e68:	f7ff f85c 	bl	8008f24 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009e6c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009e6e:	4618      	mov	r0, r3
 8009e70:	3738      	adds	r7, #56	; 0x38
 8009e72:	46bd      	mov	sp, r7
 8009e74:	bd80      	pop	{r7, pc}
 8009e76:	bf00      	nop
 8009e78:	e000ed04 	.word	0xe000ed04

08009e7c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b08e      	sub	sp, #56	; 0x38
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	60f8      	str	r0, [r7, #12]
 8009e84:	60b9      	str	r1, [r7, #8]
 8009e86:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d10c      	bne.n	8009eac <xQueueReceiveFromISR+0x30>
	__asm volatile
 8009e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e96:	b672      	cpsid	i
 8009e98:	f383 8811 	msr	BASEPRI, r3
 8009e9c:	f3bf 8f6f 	isb	sy
 8009ea0:	f3bf 8f4f 	dsb	sy
 8009ea4:	b662      	cpsie	i
 8009ea6:	623b      	str	r3, [r7, #32]
}
 8009ea8:	bf00      	nop
 8009eaa:	e7fe      	b.n	8009eaa <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009eac:	68bb      	ldr	r3, [r7, #8]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d103      	bne.n	8009eba <xQueueReceiveFromISR+0x3e>
 8009eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d101      	bne.n	8009ebe <xQueueReceiveFromISR+0x42>
 8009eba:	2301      	movs	r3, #1
 8009ebc:	e000      	b.n	8009ec0 <xQueueReceiveFromISR+0x44>
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d10c      	bne.n	8009ede <xQueueReceiveFromISR+0x62>
	__asm volatile
 8009ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ec8:	b672      	cpsid	i
 8009eca:	f383 8811 	msr	BASEPRI, r3
 8009ece:	f3bf 8f6f 	isb	sy
 8009ed2:	f3bf 8f4f 	dsb	sy
 8009ed6:	b662      	cpsie	i
 8009ed8:	61fb      	str	r3, [r7, #28]
}
 8009eda:	bf00      	nop
 8009edc:	e7fe      	b.n	8009edc <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009ede:	f7ff f8d5 	bl	800908c <vPortValidateInterruptPriority>
	__asm volatile
 8009ee2:	f3ef 8211 	mrs	r2, BASEPRI
 8009ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eea:	b672      	cpsid	i
 8009eec:	f383 8811 	msr	BASEPRI, r3
 8009ef0:	f3bf 8f6f 	isb	sy
 8009ef4:	f3bf 8f4f 	dsb	sy
 8009ef8:	b662      	cpsie	i
 8009efa:	61ba      	str	r2, [r7, #24]
 8009efc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009efe:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009f00:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f06:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d02f      	beq.n	8009f6e <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f10:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009f14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009f18:	68b9      	ldr	r1, [r7, #8]
 8009f1a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009f1c:	f000 f8db 	bl	800a0d6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f22:	1e5a      	subs	r2, r3, #1
 8009f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f26:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009f28:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f30:	d112      	bne.n	8009f58 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f34:	691b      	ldr	r3, [r3, #16]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d016      	beq.n	8009f68 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f3c:	3310      	adds	r3, #16
 8009f3e:	4618      	mov	r0, r3
 8009f40:	f000 fe70 	bl	800ac24 <xTaskRemoveFromEventList>
 8009f44:	4603      	mov	r3, r0
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d00e      	beq.n	8009f68 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d00b      	beq.n	8009f68 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	2201      	movs	r2, #1
 8009f54:	601a      	str	r2, [r3, #0]
 8009f56:	e007      	b.n	8009f68 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009f58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009f5c:	3301      	adds	r3, #1
 8009f5e:	b2db      	uxtb	r3, r3
 8009f60:	b25a      	sxtb	r2, r3
 8009f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8009f68:	2301      	movs	r3, #1
 8009f6a:	637b      	str	r3, [r7, #52]	; 0x34
 8009f6c:	e001      	b.n	8009f72 <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 8009f6e:	2300      	movs	r3, #0
 8009f70:	637b      	str	r3, [r7, #52]	; 0x34
 8009f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f74:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009f76:	693b      	ldr	r3, [r7, #16]
 8009f78:	f383 8811 	msr	BASEPRI, r3
}
 8009f7c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009f7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009f80:	4618      	mov	r0, r3
 8009f82:	3738      	adds	r7, #56	; 0x38
 8009f84:	46bd      	mov	sp, r7
 8009f86:	bd80      	pop	{r7, pc}

08009f88 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	b084      	sub	sp, #16
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d10c      	bne.n	8009fb4 <vQueueDelete+0x2c>
	__asm volatile
 8009f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f9e:	b672      	cpsid	i
 8009fa0:	f383 8811 	msr	BASEPRI, r3
 8009fa4:	f3bf 8f6f 	isb	sy
 8009fa8:	f3bf 8f4f 	dsb	sy
 8009fac:	b662      	cpsie	i
 8009fae:	60bb      	str	r3, [r7, #8]
}
 8009fb0:	bf00      	nop
 8009fb2:	e7fe      	b.n	8009fb2 <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8009fb4:	68f8      	ldr	r0, [r7, #12]
 8009fb6:	f000 f95f 	bl	800a278 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d102      	bne.n	8009fca <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 8009fc4:	68f8      	ldr	r0, [r7, #12]
 8009fc6:	f7fe fc9f 	bl	8008908 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8009fca:	bf00      	nop
 8009fcc:	3710      	adds	r7, #16
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	bd80      	pop	{r7, pc}

08009fd2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009fd2:	b480      	push	{r7}
 8009fd4:	b085      	sub	sp, #20
 8009fd6:	af00      	add	r7, sp, #0
 8009fd8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d006      	beq.n	8009ff0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8009fec:	60fb      	str	r3, [r7, #12]
 8009fee:	e001      	b.n	8009ff4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
	}
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	3714      	adds	r7, #20
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a000:	4770      	bx	lr

0800a002 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a002:	b580      	push	{r7, lr}
 800a004:	b086      	sub	sp, #24
 800a006:	af00      	add	r7, sp, #0
 800a008:	60f8      	str	r0, [r7, #12]
 800a00a:	60b9      	str	r1, [r7, #8]
 800a00c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a00e:	2300      	movs	r3, #0
 800a010:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a016:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d10d      	bne.n	800a03c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	2b00      	cmp	r3, #0
 800a026:	d14d      	bne.n	800a0c4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	689b      	ldr	r3, [r3, #8]
 800a02c:	4618      	mov	r0, r3
 800a02e:	f001 f857 	bl	800b0e0 <xTaskPriorityDisinherit>
 800a032:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	2200      	movs	r2, #0
 800a038:	609a      	str	r2, [r3, #8]
 800a03a:	e043      	b.n	800a0c4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d119      	bne.n	800a076 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	6858      	ldr	r0, [r3, #4]
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a04a:	461a      	mov	r2, r3
 800a04c:	68b9      	ldr	r1, [r7, #8]
 800a04e:	f019 fb2f 	bl	80236b0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	685a      	ldr	r2, [r3, #4]
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a05a:	441a      	add	r2, r3
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	685a      	ldr	r2, [r3, #4]
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	689b      	ldr	r3, [r3, #8]
 800a068:	429a      	cmp	r2, r3
 800a06a:	d32b      	bcc.n	800a0c4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	681a      	ldr	r2, [r3, #0]
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	605a      	str	r2, [r3, #4]
 800a074:	e026      	b.n	800a0c4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	68d8      	ldr	r0, [r3, #12]
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a07e:	461a      	mov	r2, r3
 800a080:	68b9      	ldr	r1, [r7, #8]
 800a082:	f019 fb15 	bl	80236b0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	68da      	ldr	r2, [r3, #12]
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a08e:	425b      	negs	r3, r3
 800a090:	441a      	add	r2, r3
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	68da      	ldr	r2, [r3, #12]
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	429a      	cmp	r2, r3
 800a0a0:	d207      	bcs.n	800a0b2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	689a      	ldr	r2, [r3, #8]
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0aa:	425b      	negs	r3, r3
 800a0ac:	441a      	add	r2, r3
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	2b02      	cmp	r3, #2
 800a0b6:	d105      	bne.n	800a0c4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a0b8:	693b      	ldr	r3, [r7, #16]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d002      	beq.n	800a0c4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a0be:	693b      	ldr	r3, [r7, #16]
 800a0c0:	3b01      	subs	r3, #1
 800a0c2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a0c4:	693b      	ldr	r3, [r7, #16]
 800a0c6:	1c5a      	adds	r2, r3, #1
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a0cc:	697b      	ldr	r3, [r7, #20]
}
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	3718      	adds	r7, #24
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	bd80      	pop	{r7, pc}

0800a0d6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a0d6:	b580      	push	{r7, lr}
 800a0d8:	b082      	sub	sp, #8
 800a0da:	af00      	add	r7, sp, #0
 800a0dc:	6078      	str	r0, [r7, #4]
 800a0de:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d018      	beq.n	800a11a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	68da      	ldr	r2, [r3, #12]
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0f0:	441a      	add	r2, r3
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	68da      	ldr	r2, [r3, #12]
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	689b      	ldr	r3, [r3, #8]
 800a0fe:	429a      	cmp	r2, r3
 800a100:	d303      	bcc.n	800a10a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681a      	ldr	r2, [r3, #0]
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	68d9      	ldr	r1, [r3, #12]
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a112:	461a      	mov	r2, r3
 800a114:	6838      	ldr	r0, [r7, #0]
 800a116:	f019 facb 	bl	80236b0 <memcpy>
	}
}
 800a11a:	bf00      	nop
 800a11c:	3708      	adds	r7, #8
 800a11e:	46bd      	mov	sp, r7
 800a120:	bd80      	pop	{r7, pc}

0800a122 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a122:	b580      	push	{r7, lr}
 800a124:	b084      	sub	sp, #16
 800a126:	af00      	add	r7, sp, #0
 800a128:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a12a:	f7fe fec7 	bl	8008ebc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a134:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a136:	e011      	b.n	800a15c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d012      	beq.n	800a166 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	3324      	adds	r3, #36	; 0x24
 800a144:	4618      	mov	r0, r3
 800a146:	f000 fd6d 	bl	800ac24 <xTaskRemoveFromEventList>
 800a14a:	4603      	mov	r3, r0
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d001      	beq.n	800a154 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a150:	f000 fe4a 	bl	800ade8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a154:	7bfb      	ldrb	r3, [r7, #15]
 800a156:	3b01      	subs	r3, #1
 800a158:	b2db      	uxtb	r3, r3
 800a15a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a15c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a160:	2b00      	cmp	r3, #0
 800a162:	dce9      	bgt.n	800a138 <prvUnlockQueue+0x16>
 800a164:	e000      	b.n	800a168 <prvUnlockQueue+0x46>
					break;
 800a166:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	22ff      	movs	r2, #255	; 0xff
 800a16c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a170:	f7fe fed8 	bl	8008f24 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a174:	f7fe fea2 	bl	8008ebc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a17e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a180:	e011      	b.n	800a1a6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	691b      	ldr	r3, [r3, #16]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d012      	beq.n	800a1b0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	3310      	adds	r3, #16
 800a18e:	4618      	mov	r0, r3
 800a190:	f000 fd48 	bl	800ac24 <xTaskRemoveFromEventList>
 800a194:	4603      	mov	r3, r0
 800a196:	2b00      	cmp	r3, #0
 800a198:	d001      	beq.n	800a19e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a19a:	f000 fe25 	bl	800ade8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a19e:	7bbb      	ldrb	r3, [r7, #14]
 800a1a0:	3b01      	subs	r3, #1
 800a1a2:	b2db      	uxtb	r3, r3
 800a1a4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a1a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	dce9      	bgt.n	800a182 <prvUnlockQueue+0x60>
 800a1ae:	e000      	b.n	800a1b2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a1b0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	22ff      	movs	r2, #255	; 0xff
 800a1b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a1ba:	f7fe feb3 	bl	8008f24 <vPortExitCritical>
}
 800a1be:	bf00      	nop
 800a1c0:	3710      	adds	r7, #16
 800a1c2:	46bd      	mov	sp, r7
 800a1c4:	bd80      	pop	{r7, pc}

0800a1c6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a1c6:	b580      	push	{r7, lr}
 800a1c8:	b084      	sub	sp, #16
 800a1ca:	af00      	add	r7, sp, #0
 800a1cc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a1ce:	f7fe fe75 	bl	8008ebc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d102      	bne.n	800a1e0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a1da:	2301      	movs	r3, #1
 800a1dc:	60fb      	str	r3, [r7, #12]
 800a1de:	e001      	b.n	800a1e4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a1e4:	f7fe fe9e 	bl	8008f24 <vPortExitCritical>

	return xReturn;
 800a1e8:	68fb      	ldr	r3, [r7, #12]
}
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	3710      	adds	r7, #16
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	bd80      	pop	{r7, pc}

0800a1f2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a1f2:	b580      	push	{r7, lr}
 800a1f4:	b084      	sub	sp, #16
 800a1f6:	af00      	add	r7, sp, #0
 800a1f8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a1fa:	f7fe fe5f 	bl	8008ebc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a206:	429a      	cmp	r2, r3
 800a208:	d102      	bne.n	800a210 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a20a:	2301      	movs	r3, #1
 800a20c:	60fb      	str	r3, [r7, #12]
 800a20e:	e001      	b.n	800a214 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a210:	2300      	movs	r3, #0
 800a212:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a214:	f7fe fe86 	bl	8008f24 <vPortExitCritical>

	return xReturn;
 800a218:	68fb      	ldr	r3, [r7, #12]
}
 800a21a:	4618      	mov	r0, r3
 800a21c:	3710      	adds	r7, #16
 800a21e:	46bd      	mov	sp, r7
 800a220:	bd80      	pop	{r7, pc}
	...

0800a224 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a224:	b480      	push	{r7}
 800a226:	b085      	sub	sp, #20
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
 800a22c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a22e:	2300      	movs	r3, #0
 800a230:	60fb      	str	r3, [r7, #12]
 800a232:	e014      	b.n	800a25e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a234:	4a0f      	ldr	r2, [pc, #60]	; (800a274 <vQueueAddToRegistry+0x50>)
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d10b      	bne.n	800a258 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a240:	490c      	ldr	r1, [pc, #48]	; (800a274 <vQueueAddToRegistry+0x50>)
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	683a      	ldr	r2, [r7, #0]
 800a246:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a24a:	4a0a      	ldr	r2, [pc, #40]	; (800a274 <vQueueAddToRegistry+0x50>)
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	00db      	lsls	r3, r3, #3
 800a250:	4413      	add	r3, r2
 800a252:	687a      	ldr	r2, [r7, #4]
 800a254:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a256:	e006      	b.n	800a266 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	3301      	adds	r3, #1
 800a25c:	60fb      	str	r3, [r7, #12]
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	2b07      	cmp	r3, #7
 800a262:	d9e7      	bls.n	800a234 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a264:	bf00      	nop
 800a266:	bf00      	nop
 800a268:	3714      	adds	r7, #20
 800a26a:	46bd      	mov	sp, r7
 800a26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a270:	4770      	bx	lr
 800a272:	bf00      	nop
 800a274:	2001da7c 	.word	0x2001da7c

0800a278 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800a278:	b480      	push	{r7}
 800a27a:	b085      	sub	sp, #20
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a280:	2300      	movs	r3, #0
 800a282:	60fb      	str	r3, [r7, #12]
 800a284:	e016      	b.n	800a2b4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800a286:	4a10      	ldr	r2, [pc, #64]	; (800a2c8 <vQueueUnregisterQueue+0x50>)
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	00db      	lsls	r3, r3, #3
 800a28c:	4413      	add	r3, r2
 800a28e:	685b      	ldr	r3, [r3, #4]
 800a290:	687a      	ldr	r2, [r7, #4]
 800a292:	429a      	cmp	r2, r3
 800a294:	d10b      	bne.n	800a2ae <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800a296:	4a0c      	ldr	r2, [pc, #48]	; (800a2c8 <vQueueUnregisterQueue+0x50>)
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	2100      	movs	r1, #0
 800a29c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800a2a0:	4a09      	ldr	r2, [pc, #36]	; (800a2c8 <vQueueUnregisterQueue+0x50>)
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	00db      	lsls	r3, r3, #3
 800a2a6:	4413      	add	r3, r2
 800a2a8:	2200      	movs	r2, #0
 800a2aa:	605a      	str	r2, [r3, #4]
				break;
 800a2ac:	e006      	b.n	800a2bc <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	3301      	adds	r3, #1
 800a2b2:	60fb      	str	r3, [r7, #12]
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	2b07      	cmp	r3, #7
 800a2b8:	d9e5      	bls.n	800a286 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800a2ba:	bf00      	nop
 800a2bc:	bf00      	nop
 800a2be:	3714      	adds	r7, #20
 800a2c0:	46bd      	mov	sp, r7
 800a2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c6:	4770      	bx	lr
 800a2c8:	2001da7c 	.word	0x2001da7c

0800a2cc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	b086      	sub	sp, #24
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	60f8      	str	r0, [r7, #12]
 800a2d4:	60b9      	str	r1, [r7, #8]
 800a2d6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a2dc:	f7fe fdee 	bl	8008ebc <vPortEnterCritical>
 800a2e0:	697b      	ldr	r3, [r7, #20]
 800a2e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a2e6:	b25b      	sxtb	r3, r3
 800a2e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2ec:	d103      	bne.n	800a2f6 <vQueueWaitForMessageRestricted+0x2a>
 800a2ee:	697b      	ldr	r3, [r7, #20]
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a2f6:	697b      	ldr	r3, [r7, #20]
 800a2f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a2fc:	b25b      	sxtb	r3, r3
 800a2fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a302:	d103      	bne.n	800a30c <vQueueWaitForMessageRestricted+0x40>
 800a304:	697b      	ldr	r3, [r7, #20]
 800a306:	2200      	movs	r2, #0
 800a308:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a30c:	f7fe fe0a 	bl	8008f24 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a310:	697b      	ldr	r3, [r7, #20]
 800a312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a314:	2b00      	cmp	r3, #0
 800a316:	d106      	bne.n	800a326 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a318:	697b      	ldr	r3, [r7, #20]
 800a31a:	3324      	adds	r3, #36	; 0x24
 800a31c:	687a      	ldr	r2, [r7, #4]
 800a31e:	68b9      	ldr	r1, [r7, #8]
 800a320:	4618      	mov	r0, r3
 800a322:	f000 fc51 	bl	800abc8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a326:	6978      	ldr	r0, [r7, #20]
 800a328:	f7ff fefb 	bl	800a122 <prvUnlockQueue>
	}
 800a32c:	bf00      	nop
 800a32e:	3718      	adds	r7, #24
 800a330:	46bd      	mov	sp, r7
 800a332:	bd80      	pop	{r7, pc}

0800a334 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a334:	b580      	push	{r7, lr}
 800a336:	b08e      	sub	sp, #56	; 0x38
 800a338:	af04      	add	r7, sp, #16
 800a33a:	60f8      	str	r0, [r7, #12]
 800a33c:	60b9      	str	r1, [r7, #8]
 800a33e:	607a      	str	r2, [r7, #4]
 800a340:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a342:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a344:	2b00      	cmp	r3, #0
 800a346:	d10c      	bne.n	800a362 <xTaskCreateStatic+0x2e>
	__asm volatile
 800a348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a34c:	b672      	cpsid	i
 800a34e:	f383 8811 	msr	BASEPRI, r3
 800a352:	f3bf 8f6f 	isb	sy
 800a356:	f3bf 8f4f 	dsb	sy
 800a35a:	b662      	cpsie	i
 800a35c:	623b      	str	r3, [r7, #32]
}
 800a35e:	bf00      	nop
 800a360:	e7fe      	b.n	800a360 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800a362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a364:	2b00      	cmp	r3, #0
 800a366:	d10c      	bne.n	800a382 <xTaskCreateStatic+0x4e>
	__asm volatile
 800a368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a36c:	b672      	cpsid	i
 800a36e:	f383 8811 	msr	BASEPRI, r3
 800a372:	f3bf 8f6f 	isb	sy
 800a376:	f3bf 8f4f 	dsb	sy
 800a37a:	b662      	cpsie	i
 800a37c:	61fb      	str	r3, [r7, #28]
}
 800a37e:	bf00      	nop
 800a380:	e7fe      	b.n	800a380 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a382:	235c      	movs	r3, #92	; 0x5c
 800a384:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a386:	693b      	ldr	r3, [r7, #16]
 800a388:	2b5c      	cmp	r3, #92	; 0x5c
 800a38a:	d00c      	beq.n	800a3a6 <xTaskCreateStatic+0x72>
	__asm volatile
 800a38c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a390:	b672      	cpsid	i
 800a392:	f383 8811 	msr	BASEPRI, r3
 800a396:	f3bf 8f6f 	isb	sy
 800a39a:	f3bf 8f4f 	dsb	sy
 800a39e:	b662      	cpsie	i
 800a3a0:	61bb      	str	r3, [r7, #24]
}
 800a3a2:	bf00      	nop
 800a3a4:	e7fe      	b.n	800a3a4 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a3a6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a3a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d01e      	beq.n	800a3ec <xTaskCreateStatic+0xb8>
 800a3ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d01b      	beq.n	800a3ec <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a3b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3b6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a3b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a3bc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a3be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3c0:	2202      	movs	r2, #2
 800a3c2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	9303      	str	r3, [sp, #12]
 800a3ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3cc:	9302      	str	r3, [sp, #8]
 800a3ce:	f107 0314 	add.w	r3, r7, #20
 800a3d2:	9301      	str	r3, [sp, #4]
 800a3d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3d6:	9300      	str	r3, [sp, #0]
 800a3d8:	683b      	ldr	r3, [r7, #0]
 800a3da:	687a      	ldr	r2, [r7, #4]
 800a3dc:	68b9      	ldr	r1, [r7, #8]
 800a3de:	68f8      	ldr	r0, [r7, #12]
 800a3e0:	f000 f850 	bl	800a484 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a3e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a3e6:	f000 f8df 	bl	800a5a8 <prvAddNewTaskToReadyList>
 800a3ea:	e001      	b.n	800a3f0 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a3f0:	697b      	ldr	r3, [r7, #20]
	}
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	3728      	adds	r7, #40	; 0x28
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	bd80      	pop	{r7, pc}

0800a3fa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a3fa:	b580      	push	{r7, lr}
 800a3fc:	b08c      	sub	sp, #48	; 0x30
 800a3fe:	af04      	add	r7, sp, #16
 800a400:	60f8      	str	r0, [r7, #12]
 800a402:	60b9      	str	r1, [r7, #8]
 800a404:	603b      	str	r3, [r7, #0]
 800a406:	4613      	mov	r3, r2
 800a408:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a40a:	88fb      	ldrh	r3, [r7, #6]
 800a40c:	009b      	lsls	r3, r3, #2
 800a40e:	4618      	mov	r0, r3
 800a410:	f7fe f9b0 	bl	8008774 <pvPortMalloc>
 800a414:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a416:	697b      	ldr	r3, [r7, #20]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d00e      	beq.n	800a43a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a41c:	205c      	movs	r0, #92	; 0x5c
 800a41e:	f7fe f9a9 	bl	8008774 <pvPortMalloc>
 800a422:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a424:	69fb      	ldr	r3, [r7, #28]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d003      	beq.n	800a432 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a42a:	69fb      	ldr	r3, [r7, #28]
 800a42c:	697a      	ldr	r2, [r7, #20]
 800a42e:	631a      	str	r2, [r3, #48]	; 0x30
 800a430:	e005      	b.n	800a43e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a432:	6978      	ldr	r0, [r7, #20]
 800a434:	f7fe fa68 	bl	8008908 <vPortFree>
 800a438:	e001      	b.n	800a43e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a43a:	2300      	movs	r3, #0
 800a43c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a43e:	69fb      	ldr	r3, [r7, #28]
 800a440:	2b00      	cmp	r3, #0
 800a442:	d017      	beq.n	800a474 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a444:	69fb      	ldr	r3, [r7, #28]
 800a446:	2200      	movs	r2, #0
 800a448:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a44c:	88fa      	ldrh	r2, [r7, #6]
 800a44e:	2300      	movs	r3, #0
 800a450:	9303      	str	r3, [sp, #12]
 800a452:	69fb      	ldr	r3, [r7, #28]
 800a454:	9302      	str	r3, [sp, #8]
 800a456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a458:	9301      	str	r3, [sp, #4]
 800a45a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a45c:	9300      	str	r3, [sp, #0]
 800a45e:	683b      	ldr	r3, [r7, #0]
 800a460:	68b9      	ldr	r1, [r7, #8]
 800a462:	68f8      	ldr	r0, [r7, #12]
 800a464:	f000 f80e 	bl	800a484 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a468:	69f8      	ldr	r0, [r7, #28]
 800a46a:	f000 f89d 	bl	800a5a8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a46e:	2301      	movs	r3, #1
 800a470:	61bb      	str	r3, [r7, #24]
 800a472:	e002      	b.n	800a47a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a474:	f04f 33ff 	mov.w	r3, #4294967295
 800a478:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a47a:	69bb      	ldr	r3, [r7, #24]
	}
 800a47c:	4618      	mov	r0, r3
 800a47e:	3720      	adds	r7, #32
 800a480:	46bd      	mov	sp, r7
 800a482:	bd80      	pop	{r7, pc}

0800a484 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a484:	b580      	push	{r7, lr}
 800a486:	b088      	sub	sp, #32
 800a488:	af00      	add	r7, sp, #0
 800a48a:	60f8      	str	r0, [r7, #12]
 800a48c:	60b9      	str	r1, [r7, #8]
 800a48e:	607a      	str	r2, [r7, #4]
 800a490:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a494:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	009b      	lsls	r3, r3, #2
 800a49a:	461a      	mov	r2, r3
 800a49c:	21a5      	movs	r1, #165	; 0xa5
 800a49e:	f019 f915 	bl	80236cc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a4a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a4a6:	6879      	ldr	r1, [r7, #4]
 800a4a8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800a4ac:	440b      	add	r3, r1
 800a4ae:	009b      	lsls	r3, r3, #2
 800a4b0:	4413      	add	r3, r2
 800a4b2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a4b4:	69bb      	ldr	r3, [r7, #24]
 800a4b6:	f023 0307 	bic.w	r3, r3, #7
 800a4ba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a4bc:	69bb      	ldr	r3, [r7, #24]
 800a4be:	f003 0307 	and.w	r3, r3, #7
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d00c      	beq.n	800a4e0 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800a4c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4ca:	b672      	cpsid	i
 800a4cc:	f383 8811 	msr	BASEPRI, r3
 800a4d0:	f3bf 8f6f 	isb	sy
 800a4d4:	f3bf 8f4f 	dsb	sy
 800a4d8:	b662      	cpsie	i
 800a4da:	617b      	str	r3, [r7, #20]
}
 800a4dc:	bf00      	nop
 800a4de:	e7fe      	b.n	800a4de <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a4e0:	68bb      	ldr	r3, [r7, #8]
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d01f      	beq.n	800a526 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	61fb      	str	r3, [r7, #28]
 800a4ea:	e012      	b.n	800a512 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a4ec:	68ba      	ldr	r2, [r7, #8]
 800a4ee:	69fb      	ldr	r3, [r7, #28]
 800a4f0:	4413      	add	r3, r2
 800a4f2:	7819      	ldrb	r1, [r3, #0]
 800a4f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a4f6:	69fb      	ldr	r3, [r7, #28]
 800a4f8:	4413      	add	r3, r2
 800a4fa:	3334      	adds	r3, #52	; 0x34
 800a4fc:	460a      	mov	r2, r1
 800a4fe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a500:	68ba      	ldr	r2, [r7, #8]
 800a502:	69fb      	ldr	r3, [r7, #28]
 800a504:	4413      	add	r3, r2
 800a506:	781b      	ldrb	r3, [r3, #0]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d006      	beq.n	800a51a <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a50c:	69fb      	ldr	r3, [r7, #28]
 800a50e:	3301      	adds	r3, #1
 800a510:	61fb      	str	r3, [r7, #28]
 800a512:	69fb      	ldr	r3, [r7, #28]
 800a514:	2b0f      	cmp	r3, #15
 800a516:	d9e9      	bls.n	800a4ec <prvInitialiseNewTask+0x68>
 800a518:	e000      	b.n	800a51c <prvInitialiseNewTask+0x98>
			{
				break;
 800a51a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a51c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a51e:	2200      	movs	r2, #0
 800a520:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a524:	e003      	b.n	800a52e <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a528:	2200      	movs	r2, #0
 800a52a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a52e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a530:	2b37      	cmp	r3, #55	; 0x37
 800a532:	d901      	bls.n	800a538 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a534:	2337      	movs	r3, #55	; 0x37
 800a536:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a53a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a53c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a53e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a540:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a542:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a546:	2200      	movs	r2, #0
 800a548:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a54a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a54c:	3304      	adds	r3, #4
 800a54e:	4618      	mov	r0, r3
 800a550:	f7fe fb16 	bl	8008b80 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a556:	3318      	adds	r3, #24
 800a558:	4618      	mov	r0, r3
 800a55a:	f7fe fb11 	bl	8008b80 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a55e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a560:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a562:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a566:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a56a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a56c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a56e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a570:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a572:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a576:	2200      	movs	r2, #0
 800a578:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a57a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a57c:	2200      	movs	r2, #0
 800a57e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a582:	683a      	ldr	r2, [r7, #0]
 800a584:	68f9      	ldr	r1, [r7, #12]
 800a586:	69b8      	ldr	r0, [r7, #24]
 800a588:	f7fe fb8e 	bl	8008ca8 <pxPortInitialiseStack>
 800a58c:	4602      	mov	r2, r0
 800a58e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a590:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a594:	2b00      	cmp	r3, #0
 800a596:	d002      	beq.n	800a59e <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a59a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a59c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a59e:	bf00      	nop
 800a5a0:	3720      	adds	r7, #32
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	bd80      	pop	{r7, pc}
	...

0800a5a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b082      	sub	sp, #8
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a5b0:	f7fe fc84 	bl	8008ebc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a5b4:	4b2d      	ldr	r3, [pc, #180]	; (800a66c <prvAddNewTaskToReadyList+0xc4>)
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	3301      	adds	r3, #1
 800a5ba:	4a2c      	ldr	r2, [pc, #176]	; (800a66c <prvAddNewTaskToReadyList+0xc4>)
 800a5bc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a5be:	4b2c      	ldr	r3, [pc, #176]	; (800a670 <prvAddNewTaskToReadyList+0xc8>)
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d109      	bne.n	800a5da <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a5c6:	4a2a      	ldr	r2, [pc, #168]	; (800a670 <prvAddNewTaskToReadyList+0xc8>)
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a5cc:	4b27      	ldr	r3, [pc, #156]	; (800a66c <prvAddNewTaskToReadyList+0xc4>)
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	2b01      	cmp	r3, #1
 800a5d2:	d110      	bne.n	800a5f6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a5d4:	f000 fc2e 	bl	800ae34 <prvInitialiseTaskLists>
 800a5d8:	e00d      	b.n	800a5f6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a5da:	4b26      	ldr	r3, [pc, #152]	; (800a674 <prvAddNewTaskToReadyList+0xcc>)
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d109      	bne.n	800a5f6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a5e2:	4b23      	ldr	r3, [pc, #140]	; (800a670 <prvAddNewTaskToReadyList+0xc8>)
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5ec:	429a      	cmp	r2, r3
 800a5ee:	d802      	bhi.n	800a5f6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a5f0:	4a1f      	ldr	r2, [pc, #124]	; (800a670 <prvAddNewTaskToReadyList+0xc8>)
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a5f6:	4b20      	ldr	r3, [pc, #128]	; (800a678 <prvAddNewTaskToReadyList+0xd0>)
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	3301      	adds	r3, #1
 800a5fc:	4a1e      	ldr	r2, [pc, #120]	; (800a678 <prvAddNewTaskToReadyList+0xd0>)
 800a5fe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a600:	4b1d      	ldr	r3, [pc, #116]	; (800a678 <prvAddNewTaskToReadyList+0xd0>)
 800a602:	681a      	ldr	r2, [r3, #0]
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a60c:	4b1b      	ldr	r3, [pc, #108]	; (800a67c <prvAddNewTaskToReadyList+0xd4>)
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	429a      	cmp	r2, r3
 800a612:	d903      	bls.n	800a61c <prvAddNewTaskToReadyList+0x74>
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a618:	4a18      	ldr	r2, [pc, #96]	; (800a67c <prvAddNewTaskToReadyList+0xd4>)
 800a61a:	6013      	str	r3, [r2, #0]
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a620:	4613      	mov	r3, r2
 800a622:	009b      	lsls	r3, r3, #2
 800a624:	4413      	add	r3, r2
 800a626:	009b      	lsls	r3, r3, #2
 800a628:	4a15      	ldr	r2, [pc, #84]	; (800a680 <prvAddNewTaskToReadyList+0xd8>)
 800a62a:	441a      	add	r2, r3
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	3304      	adds	r3, #4
 800a630:	4619      	mov	r1, r3
 800a632:	4610      	mov	r0, r2
 800a634:	f7fe fab1 	bl	8008b9a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a638:	f7fe fc74 	bl	8008f24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a63c:	4b0d      	ldr	r3, [pc, #52]	; (800a674 <prvAddNewTaskToReadyList+0xcc>)
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	2b00      	cmp	r3, #0
 800a642:	d00e      	beq.n	800a662 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a644:	4b0a      	ldr	r3, [pc, #40]	; (800a670 <prvAddNewTaskToReadyList+0xc8>)
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a64e:	429a      	cmp	r2, r3
 800a650:	d207      	bcs.n	800a662 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a652:	4b0c      	ldr	r3, [pc, #48]	; (800a684 <prvAddNewTaskToReadyList+0xdc>)
 800a654:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a658:	601a      	str	r2, [r3, #0]
 800a65a:	f3bf 8f4f 	dsb	sy
 800a65e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a662:	bf00      	nop
 800a664:	3708      	adds	r7, #8
 800a666:	46bd      	mov	sp, r7
 800a668:	bd80      	pop	{r7, pc}
 800a66a:	bf00      	nop
 800a66c:	2001df90 	.word	0x2001df90
 800a670:	2001dabc 	.word	0x2001dabc
 800a674:	2001df9c 	.word	0x2001df9c
 800a678:	2001dfac 	.word	0x2001dfac
 800a67c:	2001df98 	.word	0x2001df98
 800a680:	2001dac0 	.word	0x2001dac0
 800a684:	e000ed04 	.word	0xe000ed04

0800a688 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a688:	b580      	push	{r7, lr}
 800a68a:	b084      	sub	sp, #16
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a690:	2300      	movs	r3, #0
 800a692:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	2b00      	cmp	r3, #0
 800a698:	d019      	beq.n	800a6ce <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a69a:	4b14      	ldr	r3, [pc, #80]	; (800a6ec <vTaskDelay+0x64>)
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d00c      	beq.n	800a6bc <vTaskDelay+0x34>
	__asm volatile
 800a6a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6a6:	b672      	cpsid	i
 800a6a8:	f383 8811 	msr	BASEPRI, r3
 800a6ac:	f3bf 8f6f 	isb	sy
 800a6b0:	f3bf 8f4f 	dsb	sy
 800a6b4:	b662      	cpsie	i
 800a6b6:	60bb      	str	r3, [r7, #8]
}
 800a6b8:	bf00      	nop
 800a6ba:	e7fe      	b.n	800a6ba <vTaskDelay+0x32>
			vTaskSuspendAll();
 800a6bc:	f000 f884 	bl	800a7c8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a6c0:	2100      	movs	r1, #0
 800a6c2:	6878      	ldr	r0, [r7, #4]
 800a6c4:	f000 fe18 	bl	800b2f8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a6c8:	f000 f88c 	bl	800a7e4 <xTaskResumeAll>
 800a6cc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d107      	bne.n	800a6e4 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800a6d4:	4b06      	ldr	r3, [pc, #24]	; (800a6f0 <vTaskDelay+0x68>)
 800a6d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6da:	601a      	str	r2, [r3, #0]
 800a6dc:	f3bf 8f4f 	dsb	sy
 800a6e0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a6e4:	bf00      	nop
 800a6e6:	3710      	adds	r7, #16
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	bd80      	pop	{r7, pc}
 800a6ec:	2001dfb8 	.word	0x2001dfb8
 800a6f0:	e000ed04 	.word	0xe000ed04

0800a6f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	b08a      	sub	sp, #40	; 0x28
 800a6f8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a6fe:	2300      	movs	r3, #0
 800a700:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a702:	463a      	mov	r2, r7
 800a704:	1d39      	adds	r1, r7, #4
 800a706:	f107 0308 	add.w	r3, r7, #8
 800a70a:	4618      	mov	r0, r3
 800a70c:	f7fd fffe 	bl	800870c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a710:	6839      	ldr	r1, [r7, #0]
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	68ba      	ldr	r2, [r7, #8]
 800a716:	9202      	str	r2, [sp, #8]
 800a718:	9301      	str	r3, [sp, #4]
 800a71a:	2300      	movs	r3, #0
 800a71c:	9300      	str	r3, [sp, #0]
 800a71e:	2300      	movs	r3, #0
 800a720:	460a      	mov	r2, r1
 800a722:	4923      	ldr	r1, [pc, #140]	; (800a7b0 <vTaskStartScheduler+0xbc>)
 800a724:	4823      	ldr	r0, [pc, #140]	; (800a7b4 <vTaskStartScheduler+0xc0>)
 800a726:	f7ff fe05 	bl	800a334 <xTaskCreateStatic>
 800a72a:	4603      	mov	r3, r0
 800a72c:	4a22      	ldr	r2, [pc, #136]	; (800a7b8 <vTaskStartScheduler+0xc4>)
 800a72e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a730:	4b21      	ldr	r3, [pc, #132]	; (800a7b8 <vTaskStartScheduler+0xc4>)
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d002      	beq.n	800a73e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a738:	2301      	movs	r3, #1
 800a73a:	617b      	str	r3, [r7, #20]
 800a73c:	e001      	b.n	800a742 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a73e:	2300      	movs	r3, #0
 800a740:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a742:	697b      	ldr	r3, [r7, #20]
 800a744:	2b01      	cmp	r3, #1
 800a746:	d102      	bne.n	800a74e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a748:	f000 fe2a 	bl	800b3a0 <xTimerCreateTimerTask>
 800a74c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a74e:	697b      	ldr	r3, [r7, #20]
 800a750:	2b01      	cmp	r3, #1
 800a752:	d118      	bne.n	800a786 <vTaskStartScheduler+0x92>
	__asm volatile
 800a754:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a758:	b672      	cpsid	i
 800a75a:	f383 8811 	msr	BASEPRI, r3
 800a75e:	f3bf 8f6f 	isb	sy
 800a762:	f3bf 8f4f 	dsb	sy
 800a766:	b662      	cpsie	i
 800a768:	613b      	str	r3, [r7, #16]
}
 800a76a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a76c:	4b13      	ldr	r3, [pc, #76]	; (800a7bc <vTaskStartScheduler+0xc8>)
 800a76e:	f04f 32ff 	mov.w	r2, #4294967295
 800a772:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a774:	4b12      	ldr	r3, [pc, #72]	; (800a7c0 <vTaskStartScheduler+0xcc>)
 800a776:	2201      	movs	r2, #1
 800a778:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a77a:	4b12      	ldr	r3, [pc, #72]	; (800a7c4 <vTaskStartScheduler+0xd0>)
 800a77c:	2200      	movs	r2, #0
 800a77e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a780:	f7fe fb1e 	bl	8008dc0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a784:	e010      	b.n	800a7a8 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a786:	697b      	ldr	r3, [r7, #20]
 800a788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a78c:	d10c      	bne.n	800a7a8 <vTaskStartScheduler+0xb4>
	__asm volatile
 800a78e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a792:	b672      	cpsid	i
 800a794:	f383 8811 	msr	BASEPRI, r3
 800a798:	f3bf 8f6f 	isb	sy
 800a79c:	f3bf 8f4f 	dsb	sy
 800a7a0:	b662      	cpsie	i
 800a7a2:	60fb      	str	r3, [r7, #12]
}
 800a7a4:	bf00      	nop
 800a7a6:	e7fe      	b.n	800a7a6 <vTaskStartScheduler+0xb2>
}
 800a7a8:	bf00      	nop
 800a7aa:	3718      	adds	r7, #24
 800a7ac:	46bd      	mov	sp, r7
 800a7ae:	bd80      	pop	{r7, pc}
 800a7b0:	08024774 	.word	0x08024774
 800a7b4:	0800ae01 	.word	0x0800ae01
 800a7b8:	2001dfb4 	.word	0x2001dfb4
 800a7bc:	2001dfb0 	.word	0x2001dfb0
 800a7c0:	2001df9c 	.word	0x2001df9c
 800a7c4:	2001df94 	.word	0x2001df94

0800a7c8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a7c8:	b480      	push	{r7}
 800a7ca:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800a7cc:	4b04      	ldr	r3, [pc, #16]	; (800a7e0 <vTaskSuspendAll+0x18>)
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	3301      	adds	r3, #1
 800a7d2:	4a03      	ldr	r2, [pc, #12]	; (800a7e0 <vTaskSuspendAll+0x18>)
 800a7d4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800a7d6:	bf00      	nop
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7de:	4770      	bx	lr
 800a7e0:	2001dfb8 	.word	0x2001dfb8

0800a7e4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	b084      	sub	sp, #16
 800a7e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a7f2:	4b43      	ldr	r3, [pc, #268]	; (800a900 <xTaskResumeAll+0x11c>)
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d10c      	bne.n	800a814 <xTaskResumeAll+0x30>
	__asm volatile
 800a7fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7fe:	b672      	cpsid	i
 800a800:	f383 8811 	msr	BASEPRI, r3
 800a804:	f3bf 8f6f 	isb	sy
 800a808:	f3bf 8f4f 	dsb	sy
 800a80c:	b662      	cpsie	i
 800a80e:	603b      	str	r3, [r7, #0]
}
 800a810:	bf00      	nop
 800a812:	e7fe      	b.n	800a812 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a814:	f7fe fb52 	bl	8008ebc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a818:	4b39      	ldr	r3, [pc, #228]	; (800a900 <xTaskResumeAll+0x11c>)
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	3b01      	subs	r3, #1
 800a81e:	4a38      	ldr	r2, [pc, #224]	; (800a900 <xTaskResumeAll+0x11c>)
 800a820:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a822:	4b37      	ldr	r3, [pc, #220]	; (800a900 <xTaskResumeAll+0x11c>)
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	2b00      	cmp	r3, #0
 800a828:	d162      	bne.n	800a8f0 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a82a:	4b36      	ldr	r3, [pc, #216]	; (800a904 <xTaskResumeAll+0x120>)
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d05e      	beq.n	800a8f0 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a832:	e02f      	b.n	800a894 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a834:	4b34      	ldr	r3, [pc, #208]	; (800a908 <xTaskResumeAll+0x124>)
 800a836:	68db      	ldr	r3, [r3, #12]
 800a838:	68db      	ldr	r3, [r3, #12]
 800a83a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	3318      	adds	r3, #24
 800a840:	4618      	mov	r0, r3
 800a842:	f7fe fa07 	bl	8008c54 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	3304      	adds	r3, #4
 800a84a:	4618      	mov	r0, r3
 800a84c:	f7fe fa02 	bl	8008c54 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a854:	4b2d      	ldr	r3, [pc, #180]	; (800a90c <xTaskResumeAll+0x128>)
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	429a      	cmp	r2, r3
 800a85a:	d903      	bls.n	800a864 <xTaskResumeAll+0x80>
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a860:	4a2a      	ldr	r2, [pc, #168]	; (800a90c <xTaskResumeAll+0x128>)
 800a862:	6013      	str	r3, [r2, #0]
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a868:	4613      	mov	r3, r2
 800a86a:	009b      	lsls	r3, r3, #2
 800a86c:	4413      	add	r3, r2
 800a86e:	009b      	lsls	r3, r3, #2
 800a870:	4a27      	ldr	r2, [pc, #156]	; (800a910 <xTaskResumeAll+0x12c>)
 800a872:	441a      	add	r2, r3
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	3304      	adds	r3, #4
 800a878:	4619      	mov	r1, r3
 800a87a:	4610      	mov	r0, r2
 800a87c:	f7fe f98d 	bl	8008b9a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a884:	4b23      	ldr	r3, [pc, #140]	; (800a914 <xTaskResumeAll+0x130>)
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a88a:	429a      	cmp	r2, r3
 800a88c:	d302      	bcc.n	800a894 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800a88e:	4b22      	ldr	r3, [pc, #136]	; (800a918 <xTaskResumeAll+0x134>)
 800a890:	2201      	movs	r2, #1
 800a892:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a894:	4b1c      	ldr	r3, [pc, #112]	; (800a908 <xTaskResumeAll+0x124>)
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d1cb      	bne.n	800a834 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d001      	beq.n	800a8a6 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a8a2:	f000 fb67 	bl	800af74 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800a8a6:	4b1d      	ldr	r3, [pc, #116]	; (800a91c <xTaskResumeAll+0x138>)
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d010      	beq.n	800a8d4 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a8b2:	f000 f847 	bl	800a944 <xTaskIncrementTick>
 800a8b6:	4603      	mov	r3, r0
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d002      	beq.n	800a8c2 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800a8bc:	4b16      	ldr	r3, [pc, #88]	; (800a918 <xTaskResumeAll+0x134>)
 800a8be:	2201      	movs	r2, #1
 800a8c0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	3b01      	subs	r3, #1
 800a8c6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d1f1      	bne.n	800a8b2 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800a8ce:	4b13      	ldr	r3, [pc, #76]	; (800a91c <xTaskResumeAll+0x138>)
 800a8d0:	2200      	movs	r2, #0
 800a8d2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a8d4:	4b10      	ldr	r3, [pc, #64]	; (800a918 <xTaskResumeAll+0x134>)
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d009      	beq.n	800a8f0 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a8dc:	2301      	movs	r3, #1
 800a8de:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a8e0:	4b0f      	ldr	r3, [pc, #60]	; (800a920 <xTaskResumeAll+0x13c>)
 800a8e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8e6:	601a      	str	r2, [r3, #0]
 800a8e8:	f3bf 8f4f 	dsb	sy
 800a8ec:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a8f0:	f7fe fb18 	bl	8008f24 <vPortExitCritical>

	return xAlreadyYielded;
 800a8f4:	68bb      	ldr	r3, [r7, #8]
}
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	3710      	adds	r7, #16
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	bd80      	pop	{r7, pc}
 800a8fe:	bf00      	nop
 800a900:	2001dfb8 	.word	0x2001dfb8
 800a904:	2001df90 	.word	0x2001df90
 800a908:	2001df50 	.word	0x2001df50
 800a90c:	2001df98 	.word	0x2001df98
 800a910:	2001dac0 	.word	0x2001dac0
 800a914:	2001dabc 	.word	0x2001dabc
 800a918:	2001dfa4 	.word	0x2001dfa4
 800a91c:	2001dfa0 	.word	0x2001dfa0
 800a920:	e000ed04 	.word	0xe000ed04

0800a924 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a924:	b480      	push	{r7}
 800a926:	b083      	sub	sp, #12
 800a928:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a92a:	4b05      	ldr	r3, [pc, #20]	; (800a940 <xTaskGetTickCount+0x1c>)
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a930:	687b      	ldr	r3, [r7, #4]
}
 800a932:	4618      	mov	r0, r3
 800a934:	370c      	adds	r7, #12
 800a936:	46bd      	mov	sp, r7
 800a938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a93c:	4770      	bx	lr
 800a93e:	bf00      	nop
 800a940:	2001df94 	.word	0x2001df94

0800a944 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a944:	b580      	push	{r7, lr}
 800a946:	b086      	sub	sp, #24
 800a948:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a94a:	2300      	movs	r3, #0
 800a94c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a94e:	4b50      	ldr	r3, [pc, #320]	; (800aa90 <xTaskIncrementTick+0x14c>)
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	2b00      	cmp	r3, #0
 800a954:	f040 808b 	bne.w	800aa6e <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a958:	4b4e      	ldr	r3, [pc, #312]	; (800aa94 <xTaskIncrementTick+0x150>)
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	3301      	adds	r3, #1
 800a95e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a960:	4a4c      	ldr	r2, [pc, #304]	; (800aa94 <xTaskIncrementTick+0x150>)
 800a962:	693b      	ldr	r3, [r7, #16]
 800a964:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a966:	693b      	ldr	r3, [r7, #16]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d122      	bne.n	800a9b2 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800a96c:	4b4a      	ldr	r3, [pc, #296]	; (800aa98 <xTaskIncrementTick+0x154>)
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d00c      	beq.n	800a990 <xTaskIncrementTick+0x4c>
	__asm volatile
 800a976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a97a:	b672      	cpsid	i
 800a97c:	f383 8811 	msr	BASEPRI, r3
 800a980:	f3bf 8f6f 	isb	sy
 800a984:	f3bf 8f4f 	dsb	sy
 800a988:	b662      	cpsie	i
 800a98a:	603b      	str	r3, [r7, #0]
}
 800a98c:	bf00      	nop
 800a98e:	e7fe      	b.n	800a98e <xTaskIncrementTick+0x4a>
 800a990:	4b41      	ldr	r3, [pc, #260]	; (800aa98 <xTaskIncrementTick+0x154>)
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	60fb      	str	r3, [r7, #12]
 800a996:	4b41      	ldr	r3, [pc, #260]	; (800aa9c <xTaskIncrementTick+0x158>)
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	4a3f      	ldr	r2, [pc, #252]	; (800aa98 <xTaskIncrementTick+0x154>)
 800a99c:	6013      	str	r3, [r2, #0]
 800a99e:	4a3f      	ldr	r2, [pc, #252]	; (800aa9c <xTaskIncrementTick+0x158>)
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	6013      	str	r3, [r2, #0]
 800a9a4:	4b3e      	ldr	r3, [pc, #248]	; (800aaa0 <xTaskIncrementTick+0x15c>)
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	3301      	adds	r3, #1
 800a9aa:	4a3d      	ldr	r2, [pc, #244]	; (800aaa0 <xTaskIncrementTick+0x15c>)
 800a9ac:	6013      	str	r3, [r2, #0]
 800a9ae:	f000 fae1 	bl	800af74 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a9b2:	4b3c      	ldr	r3, [pc, #240]	; (800aaa4 <xTaskIncrementTick+0x160>)
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	693a      	ldr	r2, [r7, #16]
 800a9b8:	429a      	cmp	r2, r3
 800a9ba:	d349      	bcc.n	800aa50 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a9bc:	4b36      	ldr	r3, [pc, #216]	; (800aa98 <xTaskIncrementTick+0x154>)
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d104      	bne.n	800a9d0 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a9c6:	4b37      	ldr	r3, [pc, #220]	; (800aaa4 <xTaskIncrementTick+0x160>)
 800a9c8:	f04f 32ff 	mov.w	r2, #4294967295
 800a9cc:	601a      	str	r2, [r3, #0]
					break;
 800a9ce:	e03f      	b.n	800aa50 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a9d0:	4b31      	ldr	r3, [pc, #196]	; (800aa98 <xTaskIncrementTick+0x154>)
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	68db      	ldr	r3, [r3, #12]
 800a9d6:	68db      	ldr	r3, [r3, #12]
 800a9d8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a9da:	68bb      	ldr	r3, [r7, #8]
 800a9dc:	685b      	ldr	r3, [r3, #4]
 800a9de:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a9e0:	693a      	ldr	r2, [r7, #16]
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	429a      	cmp	r2, r3
 800a9e6:	d203      	bcs.n	800a9f0 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a9e8:	4a2e      	ldr	r2, [pc, #184]	; (800aaa4 <xTaskIncrementTick+0x160>)
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a9ee:	e02f      	b.n	800aa50 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a9f0:	68bb      	ldr	r3, [r7, #8]
 800a9f2:	3304      	adds	r3, #4
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	f7fe f92d 	bl	8008c54 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a9fa:	68bb      	ldr	r3, [r7, #8]
 800a9fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d004      	beq.n	800aa0c <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800aa02:	68bb      	ldr	r3, [r7, #8]
 800aa04:	3318      	adds	r3, #24
 800aa06:	4618      	mov	r0, r3
 800aa08:	f7fe f924 	bl	8008c54 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800aa0c:	68bb      	ldr	r3, [r7, #8]
 800aa0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa10:	4b25      	ldr	r3, [pc, #148]	; (800aaa8 <xTaskIncrementTick+0x164>)
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	429a      	cmp	r2, r3
 800aa16:	d903      	bls.n	800aa20 <xTaskIncrementTick+0xdc>
 800aa18:	68bb      	ldr	r3, [r7, #8]
 800aa1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa1c:	4a22      	ldr	r2, [pc, #136]	; (800aaa8 <xTaskIncrementTick+0x164>)
 800aa1e:	6013      	str	r3, [r2, #0]
 800aa20:	68bb      	ldr	r3, [r7, #8]
 800aa22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa24:	4613      	mov	r3, r2
 800aa26:	009b      	lsls	r3, r3, #2
 800aa28:	4413      	add	r3, r2
 800aa2a:	009b      	lsls	r3, r3, #2
 800aa2c:	4a1f      	ldr	r2, [pc, #124]	; (800aaac <xTaskIncrementTick+0x168>)
 800aa2e:	441a      	add	r2, r3
 800aa30:	68bb      	ldr	r3, [r7, #8]
 800aa32:	3304      	adds	r3, #4
 800aa34:	4619      	mov	r1, r3
 800aa36:	4610      	mov	r0, r2
 800aa38:	f7fe f8af 	bl	8008b9a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800aa3c:	68bb      	ldr	r3, [r7, #8]
 800aa3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa40:	4b1b      	ldr	r3, [pc, #108]	; (800aab0 <xTaskIncrementTick+0x16c>)
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa46:	429a      	cmp	r2, r3
 800aa48:	d3b8      	bcc.n	800a9bc <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800aa4a:	2301      	movs	r3, #1
 800aa4c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aa4e:	e7b5      	b.n	800a9bc <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800aa50:	4b17      	ldr	r3, [pc, #92]	; (800aab0 <xTaskIncrementTick+0x16c>)
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa56:	4915      	ldr	r1, [pc, #84]	; (800aaac <xTaskIncrementTick+0x168>)
 800aa58:	4613      	mov	r3, r2
 800aa5a:	009b      	lsls	r3, r3, #2
 800aa5c:	4413      	add	r3, r2
 800aa5e:	009b      	lsls	r3, r3, #2
 800aa60:	440b      	add	r3, r1
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	2b01      	cmp	r3, #1
 800aa66:	d907      	bls.n	800aa78 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800aa68:	2301      	movs	r3, #1
 800aa6a:	617b      	str	r3, [r7, #20]
 800aa6c:	e004      	b.n	800aa78 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800aa6e:	4b11      	ldr	r3, [pc, #68]	; (800aab4 <xTaskIncrementTick+0x170>)
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	3301      	adds	r3, #1
 800aa74:	4a0f      	ldr	r2, [pc, #60]	; (800aab4 <xTaskIncrementTick+0x170>)
 800aa76:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800aa78:	4b0f      	ldr	r3, [pc, #60]	; (800aab8 <xTaskIncrementTick+0x174>)
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d001      	beq.n	800aa84 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800aa80:	2301      	movs	r3, #1
 800aa82:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800aa84:	697b      	ldr	r3, [r7, #20]
}
 800aa86:	4618      	mov	r0, r3
 800aa88:	3718      	adds	r7, #24
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	bd80      	pop	{r7, pc}
 800aa8e:	bf00      	nop
 800aa90:	2001dfb8 	.word	0x2001dfb8
 800aa94:	2001df94 	.word	0x2001df94
 800aa98:	2001df48 	.word	0x2001df48
 800aa9c:	2001df4c 	.word	0x2001df4c
 800aaa0:	2001dfa8 	.word	0x2001dfa8
 800aaa4:	2001dfb0 	.word	0x2001dfb0
 800aaa8:	2001df98 	.word	0x2001df98
 800aaac:	2001dac0 	.word	0x2001dac0
 800aab0:	2001dabc 	.word	0x2001dabc
 800aab4:	2001dfa0 	.word	0x2001dfa0
 800aab8:	2001dfa4 	.word	0x2001dfa4

0800aabc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800aabc:	b480      	push	{r7}
 800aabe:	b085      	sub	sp, #20
 800aac0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800aac2:	4b29      	ldr	r3, [pc, #164]	; (800ab68 <vTaskSwitchContext+0xac>)
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d003      	beq.n	800aad2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800aaca:	4b28      	ldr	r3, [pc, #160]	; (800ab6c <vTaskSwitchContext+0xb0>)
 800aacc:	2201      	movs	r2, #1
 800aace:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800aad0:	e043      	b.n	800ab5a <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
 800aad2:	4b26      	ldr	r3, [pc, #152]	; (800ab6c <vTaskSwitchContext+0xb0>)
 800aad4:	2200      	movs	r2, #0
 800aad6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aad8:	4b25      	ldr	r3, [pc, #148]	; (800ab70 <vTaskSwitchContext+0xb4>)
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	60fb      	str	r3, [r7, #12]
 800aade:	e012      	b.n	800ab06 <vTaskSwitchContext+0x4a>
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d10c      	bne.n	800ab00 <vTaskSwitchContext+0x44>
	__asm volatile
 800aae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaea:	b672      	cpsid	i
 800aaec:	f383 8811 	msr	BASEPRI, r3
 800aaf0:	f3bf 8f6f 	isb	sy
 800aaf4:	f3bf 8f4f 	dsb	sy
 800aaf8:	b662      	cpsie	i
 800aafa:	607b      	str	r3, [r7, #4]
}
 800aafc:	bf00      	nop
 800aafe:	e7fe      	b.n	800aafe <vTaskSwitchContext+0x42>
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	3b01      	subs	r3, #1
 800ab04:	60fb      	str	r3, [r7, #12]
 800ab06:	491b      	ldr	r1, [pc, #108]	; (800ab74 <vTaskSwitchContext+0xb8>)
 800ab08:	68fa      	ldr	r2, [r7, #12]
 800ab0a:	4613      	mov	r3, r2
 800ab0c:	009b      	lsls	r3, r3, #2
 800ab0e:	4413      	add	r3, r2
 800ab10:	009b      	lsls	r3, r3, #2
 800ab12:	440b      	add	r3, r1
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d0e2      	beq.n	800aae0 <vTaskSwitchContext+0x24>
 800ab1a:	68fa      	ldr	r2, [r7, #12]
 800ab1c:	4613      	mov	r3, r2
 800ab1e:	009b      	lsls	r3, r3, #2
 800ab20:	4413      	add	r3, r2
 800ab22:	009b      	lsls	r3, r3, #2
 800ab24:	4a13      	ldr	r2, [pc, #76]	; (800ab74 <vTaskSwitchContext+0xb8>)
 800ab26:	4413      	add	r3, r2
 800ab28:	60bb      	str	r3, [r7, #8]
 800ab2a:	68bb      	ldr	r3, [r7, #8]
 800ab2c:	685b      	ldr	r3, [r3, #4]
 800ab2e:	685a      	ldr	r2, [r3, #4]
 800ab30:	68bb      	ldr	r3, [r7, #8]
 800ab32:	605a      	str	r2, [r3, #4]
 800ab34:	68bb      	ldr	r3, [r7, #8]
 800ab36:	685a      	ldr	r2, [r3, #4]
 800ab38:	68bb      	ldr	r3, [r7, #8]
 800ab3a:	3308      	adds	r3, #8
 800ab3c:	429a      	cmp	r2, r3
 800ab3e:	d104      	bne.n	800ab4a <vTaskSwitchContext+0x8e>
 800ab40:	68bb      	ldr	r3, [r7, #8]
 800ab42:	685b      	ldr	r3, [r3, #4]
 800ab44:	685a      	ldr	r2, [r3, #4]
 800ab46:	68bb      	ldr	r3, [r7, #8]
 800ab48:	605a      	str	r2, [r3, #4]
 800ab4a:	68bb      	ldr	r3, [r7, #8]
 800ab4c:	685b      	ldr	r3, [r3, #4]
 800ab4e:	68db      	ldr	r3, [r3, #12]
 800ab50:	4a09      	ldr	r2, [pc, #36]	; (800ab78 <vTaskSwitchContext+0xbc>)
 800ab52:	6013      	str	r3, [r2, #0]
 800ab54:	4a06      	ldr	r2, [pc, #24]	; (800ab70 <vTaskSwitchContext+0xb4>)
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	6013      	str	r3, [r2, #0]
}
 800ab5a:	bf00      	nop
 800ab5c:	3714      	adds	r7, #20
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab64:	4770      	bx	lr
 800ab66:	bf00      	nop
 800ab68:	2001dfb8 	.word	0x2001dfb8
 800ab6c:	2001dfa4 	.word	0x2001dfa4
 800ab70:	2001df98 	.word	0x2001df98
 800ab74:	2001dac0 	.word	0x2001dac0
 800ab78:	2001dabc 	.word	0x2001dabc

0800ab7c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ab7c:	b580      	push	{r7, lr}
 800ab7e:	b084      	sub	sp, #16
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	6078      	str	r0, [r7, #4]
 800ab84:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d10c      	bne.n	800aba6 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800ab8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab90:	b672      	cpsid	i
 800ab92:	f383 8811 	msr	BASEPRI, r3
 800ab96:	f3bf 8f6f 	isb	sy
 800ab9a:	f3bf 8f4f 	dsb	sy
 800ab9e:	b662      	cpsie	i
 800aba0:	60fb      	str	r3, [r7, #12]
}
 800aba2:	bf00      	nop
 800aba4:	e7fe      	b.n	800aba4 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800aba6:	4b07      	ldr	r3, [pc, #28]	; (800abc4 <vTaskPlaceOnEventList+0x48>)
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	3318      	adds	r3, #24
 800abac:	4619      	mov	r1, r3
 800abae:	6878      	ldr	r0, [r7, #4]
 800abb0:	f7fe f817 	bl	8008be2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800abb4:	2101      	movs	r1, #1
 800abb6:	6838      	ldr	r0, [r7, #0]
 800abb8:	f000 fb9e 	bl	800b2f8 <prvAddCurrentTaskToDelayedList>
}
 800abbc:	bf00      	nop
 800abbe:	3710      	adds	r7, #16
 800abc0:	46bd      	mov	sp, r7
 800abc2:	bd80      	pop	{r7, pc}
 800abc4:	2001dabc 	.word	0x2001dabc

0800abc8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800abc8:	b580      	push	{r7, lr}
 800abca:	b086      	sub	sp, #24
 800abcc:	af00      	add	r7, sp, #0
 800abce:	60f8      	str	r0, [r7, #12]
 800abd0:	60b9      	str	r1, [r7, #8]
 800abd2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d10c      	bne.n	800abf4 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800abda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abde:	b672      	cpsid	i
 800abe0:	f383 8811 	msr	BASEPRI, r3
 800abe4:	f3bf 8f6f 	isb	sy
 800abe8:	f3bf 8f4f 	dsb	sy
 800abec:	b662      	cpsie	i
 800abee:	617b      	str	r3, [r7, #20]
}
 800abf0:	bf00      	nop
 800abf2:	e7fe      	b.n	800abf2 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800abf4:	4b0a      	ldr	r3, [pc, #40]	; (800ac20 <vTaskPlaceOnEventListRestricted+0x58>)
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	3318      	adds	r3, #24
 800abfa:	4619      	mov	r1, r3
 800abfc:	68f8      	ldr	r0, [r7, #12]
 800abfe:	f7fd ffcc 	bl	8008b9a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d002      	beq.n	800ac0e <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800ac08:	f04f 33ff 	mov.w	r3, #4294967295
 800ac0c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ac0e:	6879      	ldr	r1, [r7, #4]
 800ac10:	68b8      	ldr	r0, [r7, #8]
 800ac12:	f000 fb71 	bl	800b2f8 <prvAddCurrentTaskToDelayedList>
	}
 800ac16:	bf00      	nop
 800ac18:	3718      	adds	r7, #24
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	bd80      	pop	{r7, pc}
 800ac1e:	bf00      	nop
 800ac20:	2001dabc 	.word	0x2001dabc

0800ac24 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ac24:	b580      	push	{r7, lr}
 800ac26:	b086      	sub	sp, #24
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	68db      	ldr	r3, [r3, #12]
 800ac30:	68db      	ldr	r3, [r3, #12]
 800ac32:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ac34:	693b      	ldr	r3, [r7, #16]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d10c      	bne.n	800ac54 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800ac3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac3e:	b672      	cpsid	i
 800ac40:	f383 8811 	msr	BASEPRI, r3
 800ac44:	f3bf 8f6f 	isb	sy
 800ac48:	f3bf 8f4f 	dsb	sy
 800ac4c:	b662      	cpsie	i
 800ac4e:	60fb      	str	r3, [r7, #12]
}
 800ac50:	bf00      	nop
 800ac52:	e7fe      	b.n	800ac52 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ac54:	693b      	ldr	r3, [r7, #16]
 800ac56:	3318      	adds	r3, #24
 800ac58:	4618      	mov	r0, r3
 800ac5a:	f7fd fffb 	bl	8008c54 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ac5e:	4b1e      	ldr	r3, [pc, #120]	; (800acd8 <xTaskRemoveFromEventList+0xb4>)
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d11d      	bne.n	800aca2 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ac66:	693b      	ldr	r3, [r7, #16]
 800ac68:	3304      	adds	r3, #4
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	f7fd fff2 	bl	8008c54 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ac70:	693b      	ldr	r3, [r7, #16]
 800ac72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac74:	4b19      	ldr	r3, [pc, #100]	; (800acdc <xTaskRemoveFromEventList+0xb8>)
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	429a      	cmp	r2, r3
 800ac7a:	d903      	bls.n	800ac84 <xTaskRemoveFromEventList+0x60>
 800ac7c:	693b      	ldr	r3, [r7, #16]
 800ac7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac80:	4a16      	ldr	r2, [pc, #88]	; (800acdc <xTaskRemoveFromEventList+0xb8>)
 800ac82:	6013      	str	r3, [r2, #0]
 800ac84:	693b      	ldr	r3, [r7, #16]
 800ac86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac88:	4613      	mov	r3, r2
 800ac8a:	009b      	lsls	r3, r3, #2
 800ac8c:	4413      	add	r3, r2
 800ac8e:	009b      	lsls	r3, r3, #2
 800ac90:	4a13      	ldr	r2, [pc, #76]	; (800ace0 <xTaskRemoveFromEventList+0xbc>)
 800ac92:	441a      	add	r2, r3
 800ac94:	693b      	ldr	r3, [r7, #16]
 800ac96:	3304      	adds	r3, #4
 800ac98:	4619      	mov	r1, r3
 800ac9a:	4610      	mov	r0, r2
 800ac9c:	f7fd ff7d 	bl	8008b9a <vListInsertEnd>
 800aca0:	e005      	b.n	800acae <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800aca2:	693b      	ldr	r3, [r7, #16]
 800aca4:	3318      	adds	r3, #24
 800aca6:	4619      	mov	r1, r3
 800aca8:	480e      	ldr	r0, [pc, #56]	; (800ace4 <xTaskRemoveFromEventList+0xc0>)
 800acaa:	f7fd ff76 	bl	8008b9a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800acae:	693b      	ldr	r3, [r7, #16]
 800acb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acb2:	4b0d      	ldr	r3, [pc, #52]	; (800ace8 <xTaskRemoveFromEventList+0xc4>)
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acb8:	429a      	cmp	r2, r3
 800acba:	d905      	bls.n	800acc8 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800acbc:	2301      	movs	r3, #1
 800acbe:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800acc0:	4b0a      	ldr	r3, [pc, #40]	; (800acec <xTaskRemoveFromEventList+0xc8>)
 800acc2:	2201      	movs	r2, #1
 800acc4:	601a      	str	r2, [r3, #0]
 800acc6:	e001      	b.n	800accc <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800acc8:	2300      	movs	r3, #0
 800acca:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800accc:	697b      	ldr	r3, [r7, #20]
}
 800acce:	4618      	mov	r0, r3
 800acd0:	3718      	adds	r7, #24
 800acd2:	46bd      	mov	sp, r7
 800acd4:	bd80      	pop	{r7, pc}
 800acd6:	bf00      	nop
 800acd8:	2001dfb8 	.word	0x2001dfb8
 800acdc:	2001df98 	.word	0x2001df98
 800ace0:	2001dac0 	.word	0x2001dac0
 800ace4:	2001df50 	.word	0x2001df50
 800ace8:	2001dabc 	.word	0x2001dabc
 800acec:	2001dfa4 	.word	0x2001dfa4

0800acf0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800acf0:	b480      	push	{r7}
 800acf2:	b083      	sub	sp, #12
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800acf8:	4b06      	ldr	r3, [pc, #24]	; (800ad14 <vTaskInternalSetTimeOutState+0x24>)
 800acfa:	681a      	ldr	r2, [r3, #0]
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ad00:	4b05      	ldr	r3, [pc, #20]	; (800ad18 <vTaskInternalSetTimeOutState+0x28>)
 800ad02:	681a      	ldr	r2, [r3, #0]
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	605a      	str	r2, [r3, #4]
}
 800ad08:	bf00      	nop
 800ad0a:	370c      	adds	r7, #12
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad12:	4770      	bx	lr
 800ad14:	2001dfa8 	.word	0x2001dfa8
 800ad18:	2001df94 	.word	0x2001df94

0800ad1c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ad1c:	b580      	push	{r7, lr}
 800ad1e:	b088      	sub	sp, #32
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	6078      	str	r0, [r7, #4]
 800ad24:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d10c      	bne.n	800ad46 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800ad2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad30:	b672      	cpsid	i
 800ad32:	f383 8811 	msr	BASEPRI, r3
 800ad36:	f3bf 8f6f 	isb	sy
 800ad3a:	f3bf 8f4f 	dsb	sy
 800ad3e:	b662      	cpsie	i
 800ad40:	613b      	str	r3, [r7, #16]
}
 800ad42:	bf00      	nop
 800ad44:	e7fe      	b.n	800ad44 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800ad46:	683b      	ldr	r3, [r7, #0]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d10c      	bne.n	800ad66 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800ad4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad50:	b672      	cpsid	i
 800ad52:	f383 8811 	msr	BASEPRI, r3
 800ad56:	f3bf 8f6f 	isb	sy
 800ad5a:	f3bf 8f4f 	dsb	sy
 800ad5e:	b662      	cpsie	i
 800ad60:	60fb      	str	r3, [r7, #12]
}
 800ad62:	bf00      	nop
 800ad64:	e7fe      	b.n	800ad64 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800ad66:	f7fe f8a9 	bl	8008ebc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ad6a:	4b1d      	ldr	r3, [pc, #116]	; (800ade0 <xTaskCheckForTimeOut+0xc4>)
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	685b      	ldr	r3, [r3, #4]
 800ad74:	69ba      	ldr	r2, [r7, #24]
 800ad76:	1ad3      	subs	r3, r2, r3
 800ad78:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ad7a:	683b      	ldr	r3, [r7, #0]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad82:	d102      	bne.n	800ad8a <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ad84:	2300      	movs	r3, #0
 800ad86:	61fb      	str	r3, [r7, #28]
 800ad88:	e023      	b.n	800add2 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	681a      	ldr	r2, [r3, #0]
 800ad8e:	4b15      	ldr	r3, [pc, #84]	; (800ade4 <xTaskCheckForTimeOut+0xc8>)
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	429a      	cmp	r2, r3
 800ad94:	d007      	beq.n	800ada6 <xTaskCheckForTimeOut+0x8a>
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	685b      	ldr	r3, [r3, #4]
 800ad9a:	69ba      	ldr	r2, [r7, #24]
 800ad9c:	429a      	cmp	r2, r3
 800ad9e:	d302      	bcc.n	800ada6 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ada0:	2301      	movs	r3, #1
 800ada2:	61fb      	str	r3, [r7, #28]
 800ada4:	e015      	b.n	800add2 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ada6:	683b      	ldr	r3, [r7, #0]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	697a      	ldr	r2, [r7, #20]
 800adac:	429a      	cmp	r2, r3
 800adae:	d20b      	bcs.n	800adc8 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800adb0:	683b      	ldr	r3, [r7, #0]
 800adb2:	681a      	ldr	r2, [r3, #0]
 800adb4:	697b      	ldr	r3, [r7, #20]
 800adb6:	1ad2      	subs	r2, r2, r3
 800adb8:	683b      	ldr	r3, [r7, #0]
 800adba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800adbc:	6878      	ldr	r0, [r7, #4]
 800adbe:	f7ff ff97 	bl	800acf0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800adc2:	2300      	movs	r3, #0
 800adc4:	61fb      	str	r3, [r7, #28]
 800adc6:	e004      	b.n	800add2 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800adc8:	683b      	ldr	r3, [r7, #0]
 800adca:	2200      	movs	r2, #0
 800adcc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800adce:	2301      	movs	r3, #1
 800add0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800add2:	f7fe f8a7 	bl	8008f24 <vPortExitCritical>

	return xReturn;
 800add6:	69fb      	ldr	r3, [r7, #28]
}
 800add8:	4618      	mov	r0, r3
 800adda:	3720      	adds	r7, #32
 800addc:	46bd      	mov	sp, r7
 800adde:	bd80      	pop	{r7, pc}
 800ade0:	2001df94 	.word	0x2001df94
 800ade4:	2001dfa8 	.word	0x2001dfa8

0800ade8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ade8:	b480      	push	{r7}
 800adea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800adec:	4b03      	ldr	r3, [pc, #12]	; (800adfc <vTaskMissedYield+0x14>)
 800adee:	2201      	movs	r2, #1
 800adf0:	601a      	str	r2, [r3, #0]
}
 800adf2:	bf00      	nop
 800adf4:	46bd      	mov	sp, r7
 800adf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfa:	4770      	bx	lr
 800adfc:	2001dfa4 	.word	0x2001dfa4

0800ae00 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ae00:	b580      	push	{r7, lr}
 800ae02:	b082      	sub	sp, #8
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ae08:	f000 f854 	bl	800aeb4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ae0c:	4b07      	ldr	r3, [pc, #28]	; (800ae2c <prvIdleTask+0x2c>)
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	2b01      	cmp	r3, #1
 800ae12:	d907      	bls.n	800ae24 <prvIdleTask+0x24>
			{
				taskYIELD();
 800ae14:	4b06      	ldr	r3, [pc, #24]	; (800ae30 <prvIdleTask+0x30>)
 800ae16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae1a:	601a      	str	r2, [r3, #0]
 800ae1c:	f3bf 8f4f 	dsb	sy
 800ae20:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800ae24:	f7f5 fbde 	bl	80005e4 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800ae28:	e7ee      	b.n	800ae08 <prvIdleTask+0x8>
 800ae2a:	bf00      	nop
 800ae2c:	2001dac0 	.word	0x2001dac0
 800ae30:	e000ed04 	.word	0xe000ed04

0800ae34 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ae34:	b580      	push	{r7, lr}
 800ae36:	b082      	sub	sp, #8
 800ae38:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	607b      	str	r3, [r7, #4]
 800ae3e:	e00c      	b.n	800ae5a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ae40:	687a      	ldr	r2, [r7, #4]
 800ae42:	4613      	mov	r3, r2
 800ae44:	009b      	lsls	r3, r3, #2
 800ae46:	4413      	add	r3, r2
 800ae48:	009b      	lsls	r3, r3, #2
 800ae4a:	4a12      	ldr	r2, [pc, #72]	; (800ae94 <prvInitialiseTaskLists+0x60>)
 800ae4c:	4413      	add	r3, r2
 800ae4e:	4618      	mov	r0, r3
 800ae50:	f7fd fe76 	bl	8008b40 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	3301      	adds	r3, #1
 800ae58:	607b      	str	r3, [r7, #4]
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	2b37      	cmp	r3, #55	; 0x37
 800ae5e:	d9ef      	bls.n	800ae40 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ae60:	480d      	ldr	r0, [pc, #52]	; (800ae98 <prvInitialiseTaskLists+0x64>)
 800ae62:	f7fd fe6d 	bl	8008b40 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ae66:	480d      	ldr	r0, [pc, #52]	; (800ae9c <prvInitialiseTaskLists+0x68>)
 800ae68:	f7fd fe6a 	bl	8008b40 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ae6c:	480c      	ldr	r0, [pc, #48]	; (800aea0 <prvInitialiseTaskLists+0x6c>)
 800ae6e:	f7fd fe67 	bl	8008b40 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ae72:	480c      	ldr	r0, [pc, #48]	; (800aea4 <prvInitialiseTaskLists+0x70>)
 800ae74:	f7fd fe64 	bl	8008b40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ae78:	480b      	ldr	r0, [pc, #44]	; (800aea8 <prvInitialiseTaskLists+0x74>)
 800ae7a:	f7fd fe61 	bl	8008b40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ae7e:	4b0b      	ldr	r3, [pc, #44]	; (800aeac <prvInitialiseTaskLists+0x78>)
 800ae80:	4a05      	ldr	r2, [pc, #20]	; (800ae98 <prvInitialiseTaskLists+0x64>)
 800ae82:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ae84:	4b0a      	ldr	r3, [pc, #40]	; (800aeb0 <prvInitialiseTaskLists+0x7c>)
 800ae86:	4a05      	ldr	r2, [pc, #20]	; (800ae9c <prvInitialiseTaskLists+0x68>)
 800ae88:	601a      	str	r2, [r3, #0]
}
 800ae8a:	bf00      	nop
 800ae8c:	3708      	adds	r7, #8
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	bd80      	pop	{r7, pc}
 800ae92:	bf00      	nop
 800ae94:	2001dac0 	.word	0x2001dac0
 800ae98:	2001df20 	.word	0x2001df20
 800ae9c:	2001df34 	.word	0x2001df34
 800aea0:	2001df50 	.word	0x2001df50
 800aea4:	2001df64 	.word	0x2001df64
 800aea8:	2001df7c 	.word	0x2001df7c
 800aeac:	2001df48 	.word	0x2001df48
 800aeb0:	2001df4c 	.word	0x2001df4c

0800aeb4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800aeb4:	b580      	push	{r7, lr}
 800aeb6:	b082      	sub	sp, #8
 800aeb8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800aeba:	e019      	b.n	800aef0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800aebc:	f7fd fffe 	bl	8008ebc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aec0:	4b10      	ldr	r3, [pc, #64]	; (800af04 <prvCheckTasksWaitingTermination+0x50>)
 800aec2:	68db      	ldr	r3, [r3, #12]
 800aec4:	68db      	ldr	r3, [r3, #12]
 800aec6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	3304      	adds	r3, #4
 800aecc:	4618      	mov	r0, r3
 800aece:	f7fd fec1 	bl	8008c54 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800aed2:	4b0d      	ldr	r3, [pc, #52]	; (800af08 <prvCheckTasksWaitingTermination+0x54>)
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	3b01      	subs	r3, #1
 800aed8:	4a0b      	ldr	r2, [pc, #44]	; (800af08 <prvCheckTasksWaitingTermination+0x54>)
 800aeda:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800aedc:	4b0b      	ldr	r3, [pc, #44]	; (800af0c <prvCheckTasksWaitingTermination+0x58>)
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	3b01      	subs	r3, #1
 800aee2:	4a0a      	ldr	r2, [pc, #40]	; (800af0c <prvCheckTasksWaitingTermination+0x58>)
 800aee4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800aee6:	f7fe f81d 	bl	8008f24 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800aeea:	6878      	ldr	r0, [r7, #4]
 800aeec:	f000 f810 	bl	800af10 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800aef0:	4b06      	ldr	r3, [pc, #24]	; (800af0c <prvCheckTasksWaitingTermination+0x58>)
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d1e1      	bne.n	800aebc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800aef8:	bf00      	nop
 800aefa:	bf00      	nop
 800aefc:	3708      	adds	r7, #8
 800aefe:	46bd      	mov	sp, r7
 800af00:	bd80      	pop	{r7, pc}
 800af02:	bf00      	nop
 800af04:	2001df64 	.word	0x2001df64
 800af08:	2001df90 	.word	0x2001df90
 800af0c:	2001df78 	.word	0x2001df78

0800af10 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800af10:	b580      	push	{r7, lr}
 800af12:	b084      	sub	sp, #16
 800af14:	af00      	add	r7, sp, #0
 800af16:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d108      	bne.n	800af34 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af26:	4618      	mov	r0, r3
 800af28:	f7fd fcee 	bl	8008908 <vPortFree>
				vPortFree( pxTCB );
 800af2c:	6878      	ldr	r0, [r7, #4]
 800af2e:	f7fd fceb 	bl	8008908 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800af32:	e01a      	b.n	800af6a <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800af3a:	2b01      	cmp	r3, #1
 800af3c:	d103      	bne.n	800af46 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800af3e:	6878      	ldr	r0, [r7, #4]
 800af40:	f7fd fce2 	bl	8008908 <vPortFree>
	}
 800af44:	e011      	b.n	800af6a <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800af4c:	2b02      	cmp	r3, #2
 800af4e:	d00c      	beq.n	800af6a <prvDeleteTCB+0x5a>
	__asm volatile
 800af50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af54:	b672      	cpsid	i
 800af56:	f383 8811 	msr	BASEPRI, r3
 800af5a:	f3bf 8f6f 	isb	sy
 800af5e:	f3bf 8f4f 	dsb	sy
 800af62:	b662      	cpsie	i
 800af64:	60fb      	str	r3, [r7, #12]
}
 800af66:	bf00      	nop
 800af68:	e7fe      	b.n	800af68 <prvDeleteTCB+0x58>
	}
 800af6a:	bf00      	nop
 800af6c:	3710      	adds	r7, #16
 800af6e:	46bd      	mov	sp, r7
 800af70:	bd80      	pop	{r7, pc}
	...

0800af74 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800af74:	b480      	push	{r7}
 800af76:	b083      	sub	sp, #12
 800af78:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800af7a:	4b0c      	ldr	r3, [pc, #48]	; (800afac <prvResetNextTaskUnblockTime+0x38>)
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	2b00      	cmp	r3, #0
 800af82:	d104      	bne.n	800af8e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800af84:	4b0a      	ldr	r3, [pc, #40]	; (800afb0 <prvResetNextTaskUnblockTime+0x3c>)
 800af86:	f04f 32ff 	mov.w	r2, #4294967295
 800af8a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800af8c:	e008      	b.n	800afa0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af8e:	4b07      	ldr	r3, [pc, #28]	; (800afac <prvResetNextTaskUnblockTime+0x38>)
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	68db      	ldr	r3, [r3, #12]
 800af94:	68db      	ldr	r3, [r3, #12]
 800af96:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	685b      	ldr	r3, [r3, #4]
 800af9c:	4a04      	ldr	r2, [pc, #16]	; (800afb0 <prvResetNextTaskUnblockTime+0x3c>)
 800af9e:	6013      	str	r3, [r2, #0]
}
 800afa0:	bf00      	nop
 800afa2:	370c      	adds	r7, #12
 800afa4:	46bd      	mov	sp, r7
 800afa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afaa:	4770      	bx	lr
 800afac:	2001df48 	.word	0x2001df48
 800afb0:	2001dfb0 	.word	0x2001dfb0

0800afb4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800afb4:	b480      	push	{r7}
 800afb6:	b083      	sub	sp, #12
 800afb8:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800afba:	4b05      	ldr	r3, [pc, #20]	; (800afd0 <xTaskGetCurrentTaskHandle+0x1c>)
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	607b      	str	r3, [r7, #4]

		return xReturn;
 800afc0:	687b      	ldr	r3, [r7, #4]
	}
 800afc2:	4618      	mov	r0, r3
 800afc4:	370c      	adds	r7, #12
 800afc6:	46bd      	mov	sp, r7
 800afc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afcc:	4770      	bx	lr
 800afce:	bf00      	nop
 800afd0:	2001dabc 	.word	0x2001dabc

0800afd4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800afd4:	b480      	push	{r7}
 800afd6:	b083      	sub	sp, #12
 800afd8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800afda:	4b0b      	ldr	r3, [pc, #44]	; (800b008 <xTaskGetSchedulerState+0x34>)
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d102      	bne.n	800afe8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800afe2:	2301      	movs	r3, #1
 800afe4:	607b      	str	r3, [r7, #4]
 800afe6:	e008      	b.n	800affa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800afe8:	4b08      	ldr	r3, [pc, #32]	; (800b00c <xTaskGetSchedulerState+0x38>)
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	2b00      	cmp	r3, #0
 800afee:	d102      	bne.n	800aff6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800aff0:	2302      	movs	r3, #2
 800aff2:	607b      	str	r3, [r7, #4]
 800aff4:	e001      	b.n	800affa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800aff6:	2300      	movs	r3, #0
 800aff8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800affa:	687b      	ldr	r3, [r7, #4]
	}
 800affc:	4618      	mov	r0, r3
 800affe:	370c      	adds	r7, #12
 800b000:	46bd      	mov	sp, r7
 800b002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b006:	4770      	bx	lr
 800b008:	2001df9c 	.word	0x2001df9c
 800b00c:	2001dfb8 	.word	0x2001dfb8

0800b010 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b010:	b580      	push	{r7, lr}
 800b012:	b084      	sub	sp, #16
 800b014:	af00      	add	r7, sp, #0
 800b016:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b01c:	2300      	movs	r3, #0
 800b01e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	2b00      	cmp	r3, #0
 800b024:	d051      	beq.n	800b0ca <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b026:	68bb      	ldr	r3, [r7, #8]
 800b028:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b02a:	4b2a      	ldr	r3, [pc, #168]	; (800b0d4 <xTaskPriorityInherit+0xc4>)
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b030:	429a      	cmp	r2, r3
 800b032:	d241      	bcs.n	800b0b8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b034:	68bb      	ldr	r3, [r7, #8]
 800b036:	699b      	ldr	r3, [r3, #24]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	db06      	blt.n	800b04a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b03c:	4b25      	ldr	r3, [pc, #148]	; (800b0d4 <xTaskPriorityInherit+0xc4>)
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b042:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b046:	68bb      	ldr	r3, [r7, #8]
 800b048:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b04a:	68bb      	ldr	r3, [r7, #8]
 800b04c:	6959      	ldr	r1, [r3, #20]
 800b04e:	68bb      	ldr	r3, [r7, #8]
 800b050:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b052:	4613      	mov	r3, r2
 800b054:	009b      	lsls	r3, r3, #2
 800b056:	4413      	add	r3, r2
 800b058:	009b      	lsls	r3, r3, #2
 800b05a:	4a1f      	ldr	r2, [pc, #124]	; (800b0d8 <xTaskPriorityInherit+0xc8>)
 800b05c:	4413      	add	r3, r2
 800b05e:	4299      	cmp	r1, r3
 800b060:	d122      	bne.n	800b0a8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b062:	68bb      	ldr	r3, [r7, #8]
 800b064:	3304      	adds	r3, #4
 800b066:	4618      	mov	r0, r3
 800b068:	f7fd fdf4 	bl	8008c54 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b06c:	4b19      	ldr	r3, [pc, #100]	; (800b0d4 <xTaskPriorityInherit+0xc4>)
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b072:	68bb      	ldr	r3, [r7, #8]
 800b074:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b076:	68bb      	ldr	r3, [r7, #8]
 800b078:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b07a:	4b18      	ldr	r3, [pc, #96]	; (800b0dc <xTaskPriorityInherit+0xcc>)
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	429a      	cmp	r2, r3
 800b080:	d903      	bls.n	800b08a <xTaskPriorityInherit+0x7a>
 800b082:	68bb      	ldr	r3, [r7, #8]
 800b084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b086:	4a15      	ldr	r2, [pc, #84]	; (800b0dc <xTaskPriorityInherit+0xcc>)
 800b088:	6013      	str	r3, [r2, #0]
 800b08a:	68bb      	ldr	r3, [r7, #8]
 800b08c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b08e:	4613      	mov	r3, r2
 800b090:	009b      	lsls	r3, r3, #2
 800b092:	4413      	add	r3, r2
 800b094:	009b      	lsls	r3, r3, #2
 800b096:	4a10      	ldr	r2, [pc, #64]	; (800b0d8 <xTaskPriorityInherit+0xc8>)
 800b098:	441a      	add	r2, r3
 800b09a:	68bb      	ldr	r3, [r7, #8]
 800b09c:	3304      	adds	r3, #4
 800b09e:	4619      	mov	r1, r3
 800b0a0:	4610      	mov	r0, r2
 800b0a2:	f7fd fd7a 	bl	8008b9a <vListInsertEnd>
 800b0a6:	e004      	b.n	800b0b2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b0a8:	4b0a      	ldr	r3, [pc, #40]	; (800b0d4 <xTaskPriorityInherit+0xc4>)
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0ae:	68bb      	ldr	r3, [r7, #8]
 800b0b0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b0b2:	2301      	movs	r3, #1
 800b0b4:	60fb      	str	r3, [r7, #12]
 800b0b6:	e008      	b.n	800b0ca <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b0b8:	68bb      	ldr	r3, [r7, #8]
 800b0ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b0bc:	4b05      	ldr	r3, [pc, #20]	; (800b0d4 <xTaskPriorityInherit+0xc4>)
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0c2:	429a      	cmp	r2, r3
 800b0c4:	d201      	bcs.n	800b0ca <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800b0c6:	2301      	movs	r3, #1
 800b0c8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b0ca:	68fb      	ldr	r3, [r7, #12]
	}
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	3710      	adds	r7, #16
 800b0d0:	46bd      	mov	sp, r7
 800b0d2:	bd80      	pop	{r7, pc}
 800b0d4:	2001dabc 	.word	0x2001dabc
 800b0d8:	2001dac0 	.word	0x2001dac0
 800b0dc:	2001df98 	.word	0x2001df98

0800b0e0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b0e0:	b580      	push	{r7, lr}
 800b0e2:	b086      	sub	sp, #24
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d05a      	beq.n	800b1ac <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b0f6:	4b30      	ldr	r3, [pc, #192]	; (800b1b8 <xTaskPriorityDisinherit+0xd8>)
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	693a      	ldr	r2, [r7, #16]
 800b0fc:	429a      	cmp	r2, r3
 800b0fe:	d00c      	beq.n	800b11a <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800b100:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b104:	b672      	cpsid	i
 800b106:	f383 8811 	msr	BASEPRI, r3
 800b10a:	f3bf 8f6f 	isb	sy
 800b10e:	f3bf 8f4f 	dsb	sy
 800b112:	b662      	cpsie	i
 800b114:	60fb      	str	r3, [r7, #12]
}
 800b116:	bf00      	nop
 800b118:	e7fe      	b.n	800b118 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800b11a:	693b      	ldr	r3, [r7, #16]
 800b11c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d10c      	bne.n	800b13c <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800b122:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b126:	b672      	cpsid	i
 800b128:	f383 8811 	msr	BASEPRI, r3
 800b12c:	f3bf 8f6f 	isb	sy
 800b130:	f3bf 8f4f 	dsb	sy
 800b134:	b662      	cpsie	i
 800b136:	60bb      	str	r3, [r7, #8]
}
 800b138:	bf00      	nop
 800b13a:	e7fe      	b.n	800b13a <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800b13c:	693b      	ldr	r3, [r7, #16]
 800b13e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b140:	1e5a      	subs	r2, r3, #1
 800b142:	693b      	ldr	r3, [r7, #16]
 800b144:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b146:	693b      	ldr	r3, [r7, #16]
 800b148:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b14a:	693b      	ldr	r3, [r7, #16]
 800b14c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b14e:	429a      	cmp	r2, r3
 800b150:	d02c      	beq.n	800b1ac <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b152:	693b      	ldr	r3, [r7, #16]
 800b154:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b156:	2b00      	cmp	r3, #0
 800b158:	d128      	bne.n	800b1ac <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b15a:	693b      	ldr	r3, [r7, #16]
 800b15c:	3304      	adds	r3, #4
 800b15e:	4618      	mov	r0, r3
 800b160:	f7fd fd78 	bl	8008c54 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b164:	693b      	ldr	r3, [r7, #16]
 800b166:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b168:	693b      	ldr	r3, [r7, #16]
 800b16a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b16c:	693b      	ldr	r3, [r7, #16]
 800b16e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b170:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b174:	693b      	ldr	r3, [r7, #16]
 800b176:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b178:	693b      	ldr	r3, [r7, #16]
 800b17a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b17c:	4b0f      	ldr	r3, [pc, #60]	; (800b1bc <xTaskPriorityDisinherit+0xdc>)
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	429a      	cmp	r2, r3
 800b182:	d903      	bls.n	800b18c <xTaskPriorityDisinherit+0xac>
 800b184:	693b      	ldr	r3, [r7, #16]
 800b186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b188:	4a0c      	ldr	r2, [pc, #48]	; (800b1bc <xTaskPriorityDisinherit+0xdc>)
 800b18a:	6013      	str	r3, [r2, #0]
 800b18c:	693b      	ldr	r3, [r7, #16]
 800b18e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b190:	4613      	mov	r3, r2
 800b192:	009b      	lsls	r3, r3, #2
 800b194:	4413      	add	r3, r2
 800b196:	009b      	lsls	r3, r3, #2
 800b198:	4a09      	ldr	r2, [pc, #36]	; (800b1c0 <xTaskPriorityDisinherit+0xe0>)
 800b19a:	441a      	add	r2, r3
 800b19c:	693b      	ldr	r3, [r7, #16]
 800b19e:	3304      	adds	r3, #4
 800b1a0:	4619      	mov	r1, r3
 800b1a2:	4610      	mov	r0, r2
 800b1a4:	f7fd fcf9 	bl	8008b9a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b1a8:	2301      	movs	r3, #1
 800b1aa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b1ac:	697b      	ldr	r3, [r7, #20]
	}
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	3718      	adds	r7, #24
 800b1b2:	46bd      	mov	sp, r7
 800b1b4:	bd80      	pop	{r7, pc}
 800b1b6:	bf00      	nop
 800b1b8:	2001dabc 	.word	0x2001dabc
 800b1bc:	2001df98 	.word	0x2001df98
 800b1c0:	2001dac0 	.word	0x2001dac0

0800b1c4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800b1c4:	b580      	push	{r7, lr}
 800b1c6:	b088      	sub	sp, #32
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	6078      	str	r0, [r7, #4]
 800b1cc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b1d2:	2301      	movs	r3, #1
 800b1d4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d06e      	beq.n	800b2ba <vTaskPriorityDisinheritAfterTimeout+0xf6>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800b1dc:	69bb      	ldr	r3, [r7, #24]
 800b1de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d10c      	bne.n	800b1fe <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 800b1e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1e8:	b672      	cpsid	i
 800b1ea:	f383 8811 	msr	BASEPRI, r3
 800b1ee:	f3bf 8f6f 	isb	sy
 800b1f2:	f3bf 8f4f 	dsb	sy
 800b1f6:	b662      	cpsie	i
 800b1f8:	60fb      	str	r3, [r7, #12]
}
 800b1fa:	bf00      	nop
 800b1fc:	e7fe      	b.n	800b1fc <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b1fe:	69bb      	ldr	r3, [r7, #24]
 800b200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b202:	683a      	ldr	r2, [r7, #0]
 800b204:	429a      	cmp	r2, r3
 800b206:	d902      	bls.n	800b20e <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b208:	683b      	ldr	r3, [r7, #0]
 800b20a:	61fb      	str	r3, [r7, #28]
 800b20c:	e002      	b.n	800b214 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800b20e:	69bb      	ldr	r3, [r7, #24]
 800b210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b212:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b214:	69bb      	ldr	r3, [r7, #24]
 800b216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b218:	69fa      	ldr	r2, [r7, #28]
 800b21a:	429a      	cmp	r2, r3
 800b21c:	d04d      	beq.n	800b2ba <vTaskPriorityDisinheritAfterTimeout+0xf6>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b21e:	69bb      	ldr	r3, [r7, #24]
 800b220:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b222:	697a      	ldr	r2, [r7, #20]
 800b224:	429a      	cmp	r2, r3
 800b226:	d148      	bne.n	800b2ba <vTaskPriorityDisinheritAfterTimeout+0xf6>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800b228:	4b26      	ldr	r3, [pc, #152]	; (800b2c4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	69ba      	ldr	r2, [r7, #24]
 800b22e:	429a      	cmp	r2, r3
 800b230:	d10c      	bne.n	800b24c <vTaskPriorityDisinheritAfterTimeout+0x88>
	__asm volatile
 800b232:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b236:	b672      	cpsid	i
 800b238:	f383 8811 	msr	BASEPRI, r3
 800b23c:	f3bf 8f6f 	isb	sy
 800b240:	f3bf 8f4f 	dsb	sy
 800b244:	b662      	cpsie	i
 800b246:	60bb      	str	r3, [r7, #8]
}
 800b248:	bf00      	nop
 800b24a:	e7fe      	b.n	800b24a <vTaskPriorityDisinheritAfterTimeout+0x86>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b24c:	69bb      	ldr	r3, [r7, #24]
 800b24e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b250:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800b252:	69bb      	ldr	r3, [r7, #24]
 800b254:	69fa      	ldr	r2, [r7, #28]
 800b256:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b258:	69bb      	ldr	r3, [r7, #24]
 800b25a:	699b      	ldr	r3, [r3, #24]
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	db04      	blt.n	800b26a <vTaskPriorityDisinheritAfterTimeout+0xa6>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b260:	69fb      	ldr	r3, [r7, #28]
 800b262:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b266:	69bb      	ldr	r3, [r7, #24]
 800b268:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b26a:	69bb      	ldr	r3, [r7, #24]
 800b26c:	6959      	ldr	r1, [r3, #20]
 800b26e:	693a      	ldr	r2, [r7, #16]
 800b270:	4613      	mov	r3, r2
 800b272:	009b      	lsls	r3, r3, #2
 800b274:	4413      	add	r3, r2
 800b276:	009b      	lsls	r3, r3, #2
 800b278:	4a13      	ldr	r2, [pc, #76]	; (800b2c8 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800b27a:	4413      	add	r3, r2
 800b27c:	4299      	cmp	r1, r3
 800b27e:	d11c      	bne.n	800b2ba <vTaskPriorityDisinheritAfterTimeout+0xf6>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b280:	69bb      	ldr	r3, [r7, #24]
 800b282:	3304      	adds	r3, #4
 800b284:	4618      	mov	r0, r3
 800b286:	f7fd fce5 	bl	8008c54 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800b28a:	69bb      	ldr	r3, [r7, #24]
 800b28c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b28e:	4b0f      	ldr	r3, [pc, #60]	; (800b2cc <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	429a      	cmp	r2, r3
 800b294:	d903      	bls.n	800b29e <vTaskPriorityDisinheritAfterTimeout+0xda>
 800b296:	69bb      	ldr	r3, [r7, #24]
 800b298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b29a:	4a0c      	ldr	r2, [pc, #48]	; (800b2cc <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800b29c:	6013      	str	r3, [r2, #0]
 800b29e:	69bb      	ldr	r3, [r7, #24]
 800b2a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2a2:	4613      	mov	r3, r2
 800b2a4:	009b      	lsls	r3, r3, #2
 800b2a6:	4413      	add	r3, r2
 800b2a8:	009b      	lsls	r3, r3, #2
 800b2aa:	4a07      	ldr	r2, [pc, #28]	; (800b2c8 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800b2ac:	441a      	add	r2, r3
 800b2ae:	69bb      	ldr	r3, [r7, #24]
 800b2b0:	3304      	adds	r3, #4
 800b2b2:	4619      	mov	r1, r3
 800b2b4:	4610      	mov	r0, r2
 800b2b6:	f7fd fc70 	bl	8008b9a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b2ba:	bf00      	nop
 800b2bc:	3720      	adds	r7, #32
 800b2be:	46bd      	mov	sp, r7
 800b2c0:	bd80      	pop	{r7, pc}
 800b2c2:	bf00      	nop
 800b2c4:	2001dabc 	.word	0x2001dabc
 800b2c8:	2001dac0 	.word	0x2001dac0
 800b2cc:	2001df98 	.word	0x2001df98

0800b2d0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800b2d0:	b480      	push	{r7}
 800b2d2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800b2d4:	4b07      	ldr	r3, [pc, #28]	; (800b2f4 <pvTaskIncrementMutexHeldCount+0x24>)
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d004      	beq.n	800b2e6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800b2dc:	4b05      	ldr	r3, [pc, #20]	; (800b2f4 <pvTaskIncrementMutexHeldCount+0x24>)
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b2e2:	3201      	adds	r2, #1
 800b2e4:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800b2e6:	4b03      	ldr	r3, [pc, #12]	; (800b2f4 <pvTaskIncrementMutexHeldCount+0x24>)
 800b2e8:	681b      	ldr	r3, [r3, #0]
	}
 800b2ea:	4618      	mov	r0, r3
 800b2ec:	46bd      	mov	sp, r7
 800b2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f2:	4770      	bx	lr
 800b2f4:	2001dabc 	.word	0x2001dabc

0800b2f8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b2f8:	b580      	push	{r7, lr}
 800b2fa:	b084      	sub	sp, #16
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	6078      	str	r0, [r7, #4]
 800b300:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b302:	4b21      	ldr	r3, [pc, #132]	; (800b388 <prvAddCurrentTaskToDelayedList+0x90>)
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b308:	4b20      	ldr	r3, [pc, #128]	; (800b38c <prvAddCurrentTaskToDelayedList+0x94>)
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	3304      	adds	r3, #4
 800b30e:	4618      	mov	r0, r3
 800b310:	f7fd fca0 	bl	8008c54 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b31a:	d10a      	bne.n	800b332 <prvAddCurrentTaskToDelayedList+0x3a>
 800b31c:	683b      	ldr	r3, [r7, #0]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d007      	beq.n	800b332 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b322:	4b1a      	ldr	r3, [pc, #104]	; (800b38c <prvAddCurrentTaskToDelayedList+0x94>)
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	3304      	adds	r3, #4
 800b328:	4619      	mov	r1, r3
 800b32a:	4819      	ldr	r0, [pc, #100]	; (800b390 <prvAddCurrentTaskToDelayedList+0x98>)
 800b32c:	f7fd fc35 	bl	8008b9a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b330:	e026      	b.n	800b380 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b332:	68fa      	ldr	r2, [r7, #12]
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	4413      	add	r3, r2
 800b338:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b33a:	4b14      	ldr	r3, [pc, #80]	; (800b38c <prvAddCurrentTaskToDelayedList+0x94>)
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	68ba      	ldr	r2, [r7, #8]
 800b340:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b342:	68ba      	ldr	r2, [r7, #8]
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	429a      	cmp	r2, r3
 800b348:	d209      	bcs.n	800b35e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b34a:	4b12      	ldr	r3, [pc, #72]	; (800b394 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b34c:	681a      	ldr	r2, [r3, #0]
 800b34e:	4b0f      	ldr	r3, [pc, #60]	; (800b38c <prvAddCurrentTaskToDelayedList+0x94>)
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	3304      	adds	r3, #4
 800b354:	4619      	mov	r1, r3
 800b356:	4610      	mov	r0, r2
 800b358:	f7fd fc43 	bl	8008be2 <vListInsert>
}
 800b35c:	e010      	b.n	800b380 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b35e:	4b0e      	ldr	r3, [pc, #56]	; (800b398 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b360:	681a      	ldr	r2, [r3, #0]
 800b362:	4b0a      	ldr	r3, [pc, #40]	; (800b38c <prvAddCurrentTaskToDelayedList+0x94>)
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	3304      	adds	r3, #4
 800b368:	4619      	mov	r1, r3
 800b36a:	4610      	mov	r0, r2
 800b36c:	f7fd fc39 	bl	8008be2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b370:	4b0a      	ldr	r3, [pc, #40]	; (800b39c <prvAddCurrentTaskToDelayedList+0xa4>)
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	68ba      	ldr	r2, [r7, #8]
 800b376:	429a      	cmp	r2, r3
 800b378:	d202      	bcs.n	800b380 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b37a:	4a08      	ldr	r2, [pc, #32]	; (800b39c <prvAddCurrentTaskToDelayedList+0xa4>)
 800b37c:	68bb      	ldr	r3, [r7, #8]
 800b37e:	6013      	str	r3, [r2, #0]
}
 800b380:	bf00      	nop
 800b382:	3710      	adds	r7, #16
 800b384:	46bd      	mov	sp, r7
 800b386:	bd80      	pop	{r7, pc}
 800b388:	2001df94 	.word	0x2001df94
 800b38c:	2001dabc 	.word	0x2001dabc
 800b390:	2001df7c 	.word	0x2001df7c
 800b394:	2001df4c 	.word	0x2001df4c
 800b398:	2001df48 	.word	0x2001df48
 800b39c:	2001dfb0 	.word	0x2001dfb0

0800b3a0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b3a0:	b580      	push	{r7, lr}
 800b3a2:	b08a      	sub	sp, #40	; 0x28
 800b3a4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b3aa:	f000 fb15 	bl	800b9d8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b3ae:	4b1d      	ldr	r3, [pc, #116]	; (800b424 <xTimerCreateTimerTask+0x84>)
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d021      	beq.n	800b3fa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b3be:	1d3a      	adds	r2, r7, #4
 800b3c0:	f107 0108 	add.w	r1, r7, #8
 800b3c4:	f107 030c 	add.w	r3, r7, #12
 800b3c8:	4618      	mov	r0, r3
 800b3ca:	f7fd f9b9 	bl	8008740 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b3ce:	6879      	ldr	r1, [r7, #4]
 800b3d0:	68bb      	ldr	r3, [r7, #8]
 800b3d2:	68fa      	ldr	r2, [r7, #12]
 800b3d4:	9202      	str	r2, [sp, #8]
 800b3d6:	9301      	str	r3, [sp, #4]
 800b3d8:	2302      	movs	r3, #2
 800b3da:	9300      	str	r3, [sp, #0]
 800b3dc:	2300      	movs	r3, #0
 800b3de:	460a      	mov	r2, r1
 800b3e0:	4911      	ldr	r1, [pc, #68]	; (800b428 <xTimerCreateTimerTask+0x88>)
 800b3e2:	4812      	ldr	r0, [pc, #72]	; (800b42c <xTimerCreateTimerTask+0x8c>)
 800b3e4:	f7fe ffa6 	bl	800a334 <xTaskCreateStatic>
 800b3e8:	4603      	mov	r3, r0
 800b3ea:	4a11      	ldr	r2, [pc, #68]	; (800b430 <xTimerCreateTimerTask+0x90>)
 800b3ec:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b3ee:	4b10      	ldr	r3, [pc, #64]	; (800b430 <xTimerCreateTimerTask+0x90>)
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d001      	beq.n	800b3fa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b3f6:	2301      	movs	r3, #1
 800b3f8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b3fa:	697b      	ldr	r3, [r7, #20]
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d10c      	bne.n	800b41a <xTimerCreateTimerTask+0x7a>
	__asm volatile
 800b400:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b404:	b672      	cpsid	i
 800b406:	f383 8811 	msr	BASEPRI, r3
 800b40a:	f3bf 8f6f 	isb	sy
 800b40e:	f3bf 8f4f 	dsb	sy
 800b412:	b662      	cpsie	i
 800b414:	613b      	str	r3, [r7, #16]
}
 800b416:	bf00      	nop
 800b418:	e7fe      	b.n	800b418 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800b41a:	697b      	ldr	r3, [r7, #20]
}
 800b41c:	4618      	mov	r0, r3
 800b41e:	3718      	adds	r7, #24
 800b420:	46bd      	mov	sp, r7
 800b422:	bd80      	pop	{r7, pc}
 800b424:	2001dfec 	.word	0x2001dfec
 800b428:	0802477c 	.word	0x0802477c
 800b42c:	0800b571 	.word	0x0800b571
 800b430:	2001dff0 	.word	0x2001dff0

0800b434 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b434:	b580      	push	{r7, lr}
 800b436:	b08a      	sub	sp, #40	; 0x28
 800b438:	af00      	add	r7, sp, #0
 800b43a:	60f8      	str	r0, [r7, #12]
 800b43c:	60b9      	str	r1, [r7, #8]
 800b43e:	607a      	str	r2, [r7, #4]
 800b440:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b442:	2300      	movs	r3, #0
 800b444:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d10c      	bne.n	800b466 <xTimerGenericCommand+0x32>
	__asm volatile
 800b44c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b450:	b672      	cpsid	i
 800b452:	f383 8811 	msr	BASEPRI, r3
 800b456:	f3bf 8f6f 	isb	sy
 800b45a:	f3bf 8f4f 	dsb	sy
 800b45e:	b662      	cpsie	i
 800b460:	623b      	str	r3, [r7, #32]
}
 800b462:	bf00      	nop
 800b464:	e7fe      	b.n	800b464 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b466:	4b1a      	ldr	r3, [pc, #104]	; (800b4d0 <xTimerGenericCommand+0x9c>)
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d02a      	beq.n	800b4c4 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b46e:	68bb      	ldr	r3, [r7, #8]
 800b470:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b47a:	68bb      	ldr	r3, [r7, #8]
 800b47c:	2b05      	cmp	r3, #5
 800b47e:	dc18      	bgt.n	800b4b2 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b480:	f7ff fda8 	bl	800afd4 <xTaskGetSchedulerState>
 800b484:	4603      	mov	r3, r0
 800b486:	2b02      	cmp	r3, #2
 800b488:	d109      	bne.n	800b49e <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b48a:	4b11      	ldr	r3, [pc, #68]	; (800b4d0 <xTimerGenericCommand+0x9c>)
 800b48c:	6818      	ldr	r0, [r3, #0]
 800b48e:	f107 0110 	add.w	r1, r7, #16
 800b492:	2300      	movs	r3, #0
 800b494:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b496:	f7fe f8bb 	bl	8009610 <xQueueGenericSend>
 800b49a:	6278      	str	r0, [r7, #36]	; 0x24
 800b49c:	e012      	b.n	800b4c4 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b49e:	4b0c      	ldr	r3, [pc, #48]	; (800b4d0 <xTimerGenericCommand+0x9c>)
 800b4a0:	6818      	ldr	r0, [r3, #0]
 800b4a2:	f107 0110 	add.w	r1, r7, #16
 800b4a6:	2300      	movs	r3, #0
 800b4a8:	2200      	movs	r2, #0
 800b4aa:	f7fe f8b1 	bl	8009610 <xQueueGenericSend>
 800b4ae:	6278      	str	r0, [r7, #36]	; 0x24
 800b4b0:	e008      	b.n	800b4c4 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b4b2:	4b07      	ldr	r3, [pc, #28]	; (800b4d0 <xTimerGenericCommand+0x9c>)
 800b4b4:	6818      	ldr	r0, [r3, #0]
 800b4b6:	f107 0110 	add.w	r1, r7, #16
 800b4ba:	2300      	movs	r3, #0
 800b4bc:	683a      	ldr	r2, [r7, #0]
 800b4be:	f7fe f9ad 	bl	800981c <xQueueGenericSendFromISR>
 800b4c2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b4c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	3728      	adds	r7, #40	; 0x28
 800b4ca:	46bd      	mov	sp, r7
 800b4cc:	bd80      	pop	{r7, pc}
 800b4ce:	bf00      	nop
 800b4d0:	2001dfec 	.word	0x2001dfec

0800b4d4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b4d4:	b580      	push	{r7, lr}
 800b4d6:	b088      	sub	sp, #32
 800b4d8:	af02      	add	r7, sp, #8
 800b4da:	6078      	str	r0, [r7, #4]
 800b4dc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b4de:	4b23      	ldr	r3, [pc, #140]	; (800b56c <prvProcessExpiredTimer+0x98>)
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	68db      	ldr	r3, [r3, #12]
 800b4e4:	68db      	ldr	r3, [r3, #12]
 800b4e6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b4e8:	697b      	ldr	r3, [r7, #20]
 800b4ea:	3304      	adds	r3, #4
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	f7fd fbb1 	bl	8008c54 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b4f2:	697b      	ldr	r3, [r7, #20]
 800b4f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b4f8:	f003 0304 	and.w	r3, r3, #4
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d024      	beq.n	800b54a <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b500:	697b      	ldr	r3, [r7, #20]
 800b502:	699a      	ldr	r2, [r3, #24]
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	18d1      	adds	r1, r2, r3
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	683a      	ldr	r2, [r7, #0]
 800b50c:	6978      	ldr	r0, [r7, #20]
 800b50e:	f000 f8d3 	bl	800b6b8 <prvInsertTimerInActiveList>
 800b512:	4603      	mov	r3, r0
 800b514:	2b00      	cmp	r3, #0
 800b516:	d021      	beq.n	800b55c <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b518:	2300      	movs	r3, #0
 800b51a:	9300      	str	r3, [sp, #0]
 800b51c:	2300      	movs	r3, #0
 800b51e:	687a      	ldr	r2, [r7, #4]
 800b520:	2100      	movs	r1, #0
 800b522:	6978      	ldr	r0, [r7, #20]
 800b524:	f7ff ff86 	bl	800b434 <xTimerGenericCommand>
 800b528:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b52a:	693b      	ldr	r3, [r7, #16]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d115      	bne.n	800b55c <prvProcessExpiredTimer+0x88>
	__asm volatile
 800b530:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b534:	b672      	cpsid	i
 800b536:	f383 8811 	msr	BASEPRI, r3
 800b53a:	f3bf 8f6f 	isb	sy
 800b53e:	f3bf 8f4f 	dsb	sy
 800b542:	b662      	cpsie	i
 800b544:	60fb      	str	r3, [r7, #12]
}
 800b546:	bf00      	nop
 800b548:	e7fe      	b.n	800b548 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b54a:	697b      	ldr	r3, [r7, #20]
 800b54c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b550:	f023 0301 	bic.w	r3, r3, #1
 800b554:	b2da      	uxtb	r2, r3
 800b556:	697b      	ldr	r3, [r7, #20]
 800b558:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b55c:	697b      	ldr	r3, [r7, #20]
 800b55e:	6a1b      	ldr	r3, [r3, #32]
 800b560:	6978      	ldr	r0, [r7, #20]
 800b562:	4798      	blx	r3
}
 800b564:	bf00      	nop
 800b566:	3718      	adds	r7, #24
 800b568:	46bd      	mov	sp, r7
 800b56a:	bd80      	pop	{r7, pc}
 800b56c:	2001dfe4 	.word	0x2001dfe4

0800b570 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b570:	b580      	push	{r7, lr}
 800b572:	b084      	sub	sp, #16
 800b574:	af00      	add	r7, sp, #0
 800b576:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b578:	f107 0308 	add.w	r3, r7, #8
 800b57c:	4618      	mov	r0, r3
 800b57e:	f000 f857 	bl	800b630 <prvGetNextExpireTime>
 800b582:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b584:	68bb      	ldr	r3, [r7, #8]
 800b586:	4619      	mov	r1, r3
 800b588:	68f8      	ldr	r0, [r7, #12]
 800b58a:	f000 f803 	bl	800b594 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b58e:	f000 f8d5 	bl	800b73c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b592:	e7f1      	b.n	800b578 <prvTimerTask+0x8>

0800b594 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b594:	b580      	push	{r7, lr}
 800b596:	b084      	sub	sp, #16
 800b598:	af00      	add	r7, sp, #0
 800b59a:	6078      	str	r0, [r7, #4]
 800b59c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b59e:	f7ff f913 	bl	800a7c8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b5a2:	f107 0308 	add.w	r3, r7, #8
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	f000 f866 	bl	800b678 <prvSampleTimeNow>
 800b5ac:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b5ae:	68bb      	ldr	r3, [r7, #8]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d130      	bne.n	800b616 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b5b4:	683b      	ldr	r3, [r7, #0]
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d10a      	bne.n	800b5d0 <prvProcessTimerOrBlockTask+0x3c>
 800b5ba:	687a      	ldr	r2, [r7, #4]
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	429a      	cmp	r2, r3
 800b5c0:	d806      	bhi.n	800b5d0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b5c2:	f7ff f90f 	bl	800a7e4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b5c6:	68f9      	ldr	r1, [r7, #12]
 800b5c8:	6878      	ldr	r0, [r7, #4]
 800b5ca:	f7ff ff83 	bl	800b4d4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b5ce:	e024      	b.n	800b61a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b5d0:	683b      	ldr	r3, [r7, #0]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d008      	beq.n	800b5e8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b5d6:	4b13      	ldr	r3, [pc, #76]	; (800b624 <prvProcessTimerOrBlockTask+0x90>)
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d101      	bne.n	800b5e4 <prvProcessTimerOrBlockTask+0x50>
 800b5e0:	2301      	movs	r3, #1
 800b5e2:	e000      	b.n	800b5e6 <prvProcessTimerOrBlockTask+0x52>
 800b5e4:	2300      	movs	r3, #0
 800b5e6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b5e8:	4b0f      	ldr	r3, [pc, #60]	; (800b628 <prvProcessTimerOrBlockTask+0x94>)
 800b5ea:	6818      	ldr	r0, [r3, #0]
 800b5ec:	687a      	ldr	r2, [r7, #4]
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	1ad3      	subs	r3, r2, r3
 800b5f2:	683a      	ldr	r2, [r7, #0]
 800b5f4:	4619      	mov	r1, r3
 800b5f6:	f7fe fe69 	bl	800a2cc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b5fa:	f7ff f8f3 	bl	800a7e4 <xTaskResumeAll>
 800b5fe:	4603      	mov	r3, r0
 800b600:	2b00      	cmp	r3, #0
 800b602:	d10a      	bne.n	800b61a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b604:	4b09      	ldr	r3, [pc, #36]	; (800b62c <prvProcessTimerOrBlockTask+0x98>)
 800b606:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b60a:	601a      	str	r2, [r3, #0]
 800b60c:	f3bf 8f4f 	dsb	sy
 800b610:	f3bf 8f6f 	isb	sy
}
 800b614:	e001      	b.n	800b61a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b616:	f7ff f8e5 	bl	800a7e4 <xTaskResumeAll>
}
 800b61a:	bf00      	nop
 800b61c:	3710      	adds	r7, #16
 800b61e:	46bd      	mov	sp, r7
 800b620:	bd80      	pop	{r7, pc}
 800b622:	bf00      	nop
 800b624:	2001dfe8 	.word	0x2001dfe8
 800b628:	2001dfec 	.word	0x2001dfec
 800b62c:	e000ed04 	.word	0xe000ed04

0800b630 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b630:	b480      	push	{r7}
 800b632:	b085      	sub	sp, #20
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b638:	4b0e      	ldr	r3, [pc, #56]	; (800b674 <prvGetNextExpireTime+0x44>)
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d101      	bne.n	800b646 <prvGetNextExpireTime+0x16>
 800b642:	2201      	movs	r2, #1
 800b644:	e000      	b.n	800b648 <prvGetNextExpireTime+0x18>
 800b646:	2200      	movs	r2, #0
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	2b00      	cmp	r3, #0
 800b652:	d105      	bne.n	800b660 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b654:	4b07      	ldr	r3, [pc, #28]	; (800b674 <prvGetNextExpireTime+0x44>)
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	68db      	ldr	r3, [r3, #12]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	60fb      	str	r3, [r7, #12]
 800b65e:	e001      	b.n	800b664 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b660:	2300      	movs	r3, #0
 800b662:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b664:	68fb      	ldr	r3, [r7, #12]
}
 800b666:	4618      	mov	r0, r3
 800b668:	3714      	adds	r7, #20
 800b66a:	46bd      	mov	sp, r7
 800b66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b670:	4770      	bx	lr
 800b672:	bf00      	nop
 800b674:	2001dfe4 	.word	0x2001dfe4

0800b678 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b678:	b580      	push	{r7, lr}
 800b67a:	b084      	sub	sp, #16
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b680:	f7ff f950 	bl	800a924 <xTaskGetTickCount>
 800b684:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b686:	4b0b      	ldr	r3, [pc, #44]	; (800b6b4 <prvSampleTimeNow+0x3c>)
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	68fa      	ldr	r2, [r7, #12]
 800b68c:	429a      	cmp	r2, r3
 800b68e:	d205      	bcs.n	800b69c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b690:	f000 f93c 	bl	800b90c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	2201      	movs	r2, #1
 800b698:	601a      	str	r2, [r3, #0]
 800b69a:	e002      	b.n	800b6a2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	2200      	movs	r2, #0
 800b6a0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b6a2:	4a04      	ldr	r2, [pc, #16]	; (800b6b4 <prvSampleTimeNow+0x3c>)
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b6a8:	68fb      	ldr	r3, [r7, #12]
}
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	3710      	adds	r7, #16
 800b6ae:	46bd      	mov	sp, r7
 800b6b0:	bd80      	pop	{r7, pc}
 800b6b2:	bf00      	nop
 800b6b4:	2001dff4 	.word	0x2001dff4

0800b6b8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b6b8:	b580      	push	{r7, lr}
 800b6ba:	b086      	sub	sp, #24
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	60f8      	str	r0, [r7, #12]
 800b6c0:	60b9      	str	r1, [r7, #8]
 800b6c2:	607a      	str	r2, [r7, #4]
 800b6c4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b6c6:	2300      	movs	r3, #0
 800b6c8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	68ba      	ldr	r2, [r7, #8]
 800b6ce:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	68fa      	ldr	r2, [r7, #12]
 800b6d4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b6d6:	68ba      	ldr	r2, [r7, #8]
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	429a      	cmp	r2, r3
 800b6dc:	d812      	bhi.n	800b704 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b6de:	687a      	ldr	r2, [r7, #4]
 800b6e0:	683b      	ldr	r3, [r7, #0]
 800b6e2:	1ad2      	subs	r2, r2, r3
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	699b      	ldr	r3, [r3, #24]
 800b6e8:	429a      	cmp	r2, r3
 800b6ea:	d302      	bcc.n	800b6f2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b6ec:	2301      	movs	r3, #1
 800b6ee:	617b      	str	r3, [r7, #20]
 800b6f0:	e01b      	b.n	800b72a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b6f2:	4b10      	ldr	r3, [pc, #64]	; (800b734 <prvInsertTimerInActiveList+0x7c>)
 800b6f4:	681a      	ldr	r2, [r3, #0]
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	3304      	adds	r3, #4
 800b6fa:	4619      	mov	r1, r3
 800b6fc:	4610      	mov	r0, r2
 800b6fe:	f7fd fa70 	bl	8008be2 <vListInsert>
 800b702:	e012      	b.n	800b72a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b704:	687a      	ldr	r2, [r7, #4]
 800b706:	683b      	ldr	r3, [r7, #0]
 800b708:	429a      	cmp	r2, r3
 800b70a:	d206      	bcs.n	800b71a <prvInsertTimerInActiveList+0x62>
 800b70c:	68ba      	ldr	r2, [r7, #8]
 800b70e:	683b      	ldr	r3, [r7, #0]
 800b710:	429a      	cmp	r2, r3
 800b712:	d302      	bcc.n	800b71a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b714:	2301      	movs	r3, #1
 800b716:	617b      	str	r3, [r7, #20]
 800b718:	e007      	b.n	800b72a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b71a:	4b07      	ldr	r3, [pc, #28]	; (800b738 <prvInsertTimerInActiveList+0x80>)
 800b71c:	681a      	ldr	r2, [r3, #0]
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	3304      	adds	r3, #4
 800b722:	4619      	mov	r1, r3
 800b724:	4610      	mov	r0, r2
 800b726:	f7fd fa5c 	bl	8008be2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b72a:	697b      	ldr	r3, [r7, #20]
}
 800b72c:	4618      	mov	r0, r3
 800b72e:	3718      	adds	r7, #24
 800b730:	46bd      	mov	sp, r7
 800b732:	bd80      	pop	{r7, pc}
 800b734:	2001dfe8 	.word	0x2001dfe8
 800b738:	2001dfe4 	.word	0x2001dfe4

0800b73c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b73c:	b580      	push	{r7, lr}
 800b73e:	b08e      	sub	sp, #56	; 0x38
 800b740:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b742:	e0d0      	b.n	800b8e6 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	2b00      	cmp	r3, #0
 800b748:	da1a      	bge.n	800b780 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b74a:	1d3b      	adds	r3, r7, #4
 800b74c:	3304      	adds	r3, #4
 800b74e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b752:	2b00      	cmp	r3, #0
 800b754:	d10c      	bne.n	800b770 <prvProcessReceivedCommands+0x34>
	__asm volatile
 800b756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b75a:	b672      	cpsid	i
 800b75c:	f383 8811 	msr	BASEPRI, r3
 800b760:	f3bf 8f6f 	isb	sy
 800b764:	f3bf 8f4f 	dsb	sy
 800b768:	b662      	cpsie	i
 800b76a:	61fb      	str	r3, [r7, #28]
}
 800b76c:	bf00      	nop
 800b76e:	e7fe      	b.n	800b76e <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b776:	6850      	ldr	r0, [r2, #4]
 800b778:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b77a:	6892      	ldr	r2, [r2, #8]
 800b77c:	4611      	mov	r1, r2
 800b77e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	2b00      	cmp	r3, #0
 800b784:	f2c0 80ae 	blt.w	800b8e4 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b78c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b78e:	695b      	ldr	r3, [r3, #20]
 800b790:	2b00      	cmp	r3, #0
 800b792:	d004      	beq.n	800b79e <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b796:	3304      	adds	r3, #4
 800b798:	4618      	mov	r0, r3
 800b79a:	f7fd fa5b 	bl	8008c54 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b79e:	463b      	mov	r3, r7
 800b7a0:	4618      	mov	r0, r3
 800b7a2:	f7ff ff69 	bl	800b678 <prvSampleTimeNow>
 800b7a6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	2b09      	cmp	r3, #9
 800b7ac:	f200 809b 	bhi.w	800b8e6 <prvProcessReceivedCommands+0x1aa>
 800b7b0:	a201      	add	r2, pc, #4	; (adr r2, 800b7b8 <prvProcessReceivedCommands+0x7c>)
 800b7b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7b6:	bf00      	nop
 800b7b8:	0800b7e1 	.word	0x0800b7e1
 800b7bc:	0800b7e1 	.word	0x0800b7e1
 800b7c0:	0800b7e1 	.word	0x0800b7e1
 800b7c4:	0800b859 	.word	0x0800b859
 800b7c8:	0800b86d 	.word	0x0800b86d
 800b7cc:	0800b8bb 	.word	0x0800b8bb
 800b7d0:	0800b7e1 	.word	0x0800b7e1
 800b7d4:	0800b7e1 	.word	0x0800b7e1
 800b7d8:	0800b859 	.word	0x0800b859
 800b7dc:	0800b86d 	.word	0x0800b86d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b7e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b7e6:	f043 0301 	orr.w	r3, r3, #1
 800b7ea:	b2da      	uxtb	r2, r3
 800b7ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b7f2:	68ba      	ldr	r2, [r7, #8]
 800b7f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7f6:	699b      	ldr	r3, [r3, #24]
 800b7f8:	18d1      	adds	r1, r2, r3
 800b7fa:	68bb      	ldr	r3, [r7, #8]
 800b7fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b7fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b800:	f7ff ff5a 	bl	800b6b8 <prvInsertTimerInActiveList>
 800b804:	4603      	mov	r3, r0
 800b806:	2b00      	cmp	r3, #0
 800b808:	d06d      	beq.n	800b8e6 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b80a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b80c:	6a1b      	ldr	r3, [r3, #32]
 800b80e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b810:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b814:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b818:	f003 0304 	and.w	r3, r3, #4
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d062      	beq.n	800b8e6 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b820:	68ba      	ldr	r2, [r7, #8]
 800b822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b824:	699b      	ldr	r3, [r3, #24]
 800b826:	441a      	add	r2, r3
 800b828:	2300      	movs	r3, #0
 800b82a:	9300      	str	r3, [sp, #0]
 800b82c:	2300      	movs	r3, #0
 800b82e:	2100      	movs	r1, #0
 800b830:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b832:	f7ff fdff 	bl	800b434 <xTimerGenericCommand>
 800b836:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b838:	6a3b      	ldr	r3, [r7, #32]
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d153      	bne.n	800b8e6 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800b83e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b842:	b672      	cpsid	i
 800b844:	f383 8811 	msr	BASEPRI, r3
 800b848:	f3bf 8f6f 	isb	sy
 800b84c:	f3bf 8f4f 	dsb	sy
 800b850:	b662      	cpsie	i
 800b852:	61bb      	str	r3, [r7, #24]
}
 800b854:	bf00      	nop
 800b856:	e7fe      	b.n	800b856 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b85a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b85e:	f023 0301 	bic.w	r3, r3, #1
 800b862:	b2da      	uxtb	r2, r3
 800b864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b866:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b86a:	e03c      	b.n	800b8e6 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b86c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b86e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b872:	f043 0301 	orr.w	r3, r3, #1
 800b876:	b2da      	uxtb	r2, r3
 800b878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b87a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b87e:	68ba      	ldr	r2, [r7, #8]
 800b880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b882:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b886:	699b      	ldr	r3, [r3, #24]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d10c      	bne.n	800b8a6 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 800b88c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b890:	b672      	cpsid	i
 800b892:	f383 8811 	msr	BASEPRI, r3
 800b896:	f3bf 8f6f 	isb	sy
 800b89a:	f3bf 8f4f 	dsb	sy
 800b89e:	b662      	cpsie	i
 800b8a0:	617b      	str	r3, [r7, #20]
}
 800b8a2:	bf00      	nop
 800b8a4:	e7fe      	b.n	800b8a4 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b8a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8a8:	699a      	ldr	r2, [r3, #24]
 800b8aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8ac:	18d1      	adds	r1, r2, r3
 800b8ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b8b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b8b4:	f7ff ff00 	bl	800b6b8 <prvInsertTimerInActiveList>
					break;
 800b8b8:	e015      	b.n	800b8e6 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b8ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b8c0:	f003 0302 	and.w	r3, r3, #2
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d103      	bne.n	800b8d0 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 800b8c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b8ca:	f7fd f81d 	bl	8008908 <vPortFree>
 800b8ce:	e00a      	b.n	800b8e6 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b8d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b8d6:	f023 0301 	bic.w	r3, r3, #1
 800b8da:	b2da      	uxtb	r2, r3
 800b8dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b8e2:	e000      	b.n	800b8e6 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800b8e4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b8e6:	4b08      	ldr	r3, [pc, #32]	; (800b908 <prvProcessReceivedCommands+0x1cc>)
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	1d39      	adds	r1, r7, #4
 800b8ec:	2200      	movs	r2, #0
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	f7fe f8ca 	bl	8009a88 <xQueueReceive>
 800b8f4:	4603      	mov	r3, r0
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	f47f af24 	bne.w	800b744 <prvProcessReceivedCommands+0x8>
	}
}
 800b8fc:	bf00      	nop
 800b8fe:	bf00      	nop
 800b900:	3730      	adds	r7, #48	; 0x30
 800b902:	46bd      	mov	sp, r7
 800b904:	bd80      	pop	{r7, pc}
 800b906:	bf00      	nop
 800b908:	2001dfec 	.word	0x2001dfec

0800b90c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b90c:	b580      	push	{r7, lr}
 800b90e:	b088      	sub	sp, #32
 800b910:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b912:	e04a      	b.n	800b9aa <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b914:	4b2e      	ldr	r3, [pc, #184]	; (800b9d0 <prvSwitchTimerLists+0xc4>)
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	68db      	ldr	r3, [r3, #12]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b91e:	4b2c      	ldr	r3, [pc, #176]	; (800b9d0 <prvSwitchTimerLists+0xc4>)
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	68db      	ldr	r3, [r3, #12]
 800b924:	68db      	ldr	r3, [r3, #12]
 800b926:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	3304      	adds	r3, #4
 800b92c:	4618      	mov	r0, r3
 800b92e:	f7fd f991 	bl	8008c54 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	6a1b      	ldr	r3, [r3, #32]
 800b936:	68f8      	ldr	r0, [r7, #12]
 800b938:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b940:	f003 0304 	and.w	r3, r3, #4
 800b944:	2b00      	cmp	r3, #0
 800b946:	d030      	beq.n	800b9aa <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	699b      	ldr	r3, [r3, #24]
 800b94c:	693a      	ldr	r2, [r7, #16]
 800b94e:	4413      	add	r3, r2
 800b950:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b952:	68ba      	ldr	r2, [r7, #8]
 800b954:	693b      	ldr	r3, [r7, #16]
 800b956:	429a      	cmp	r2, r3
 800b958:	d90e      	bls.n	800b978 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	68ba      	ldr	r2, [r7, #8]
 800b95e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	68fa      	ldr	r2, [r7, #12]
 800b964:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b966:	4b1a      	ldr	r3, [pc, #104]	; (800b9d0 <prvSwitchTimerLists+0xc4>)
 800b968:	681a      	ldr	r2, [r3, #0]
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	3304      	adds	r3, #4
 800b96e:	4619      	mov	r1, r3
 800b970:	4610      	mov	r0, r2
 800b972:	f7fd f936 	bl	8008be2 <vListInsert>
 800b976:	e018      	b.n	800b9aa <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b978:	2300      	movs	r3, #0
 800b97a:	9300      	str	r3, [sp, #0]
 800b97c:	2300      	movs	r3, #0
 800b97e:	693a      	ldr	r2, [r7, #16]
 800b980:	2100      	movs	r1, #0
 800b982:	68f8      	ldr	r0, [r7, #12]
 800b984:	f7ff fd56 	bl	800b434 <xTimerGenericCommand>
 800b988:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d10c      	bne.n	800b9aa <prvSwitchTimerLists+0x9e>
	__asm volatile
 800b990:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b994:	b672      	cpsid	i
 800b996:	f383 8811 	msr	BASEPRI, r3
 800b99a:	f3bf 8f6f 	isb	sy
 800b99e:	f3bf 8f4f 	dsb	sy
 800b9a2:	b662      	cpsie	i
 800b9a4:	603b      	str	r3, [r7, #0]
}
 800b9a6:	bf00      	nop
 800b9a8:	e7fe      	b.n	800b9a8 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b9aa:	4b09      	ldr	r3, [pc, #36]	; (800b9d0 <prvSwitchTimerLists+0xc4>)
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d1af      	bne.n	800b914 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b9b4:	4b06      	ldr	r3, [pc, #24]	; (800b9d0 <prvSwitchTimerLists+0xc4>)
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b9ba:	4b06      	ldr	r3, [pc, #24]	; (800b9d4 <prvSwitchTimerLists+0xc8>)
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	4a04      	ldr	r2, [pc, #16]	; (800b9d0 <prvSwitchTimerLists+0xc4>)
 800b9c0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b9c2:	4a04      	ldr	r2, [pc, #16]	; (800b9d4 <prvSwitchTimerLists+0xc8>)
 800b9c4:	697b      	ldr	r3, [r7, #20]
 800b9c6:	6013      	str	r3, [r2, #0]
}
 800b9c8:	bf00      	nop
 800b9ca:	3718      	adds	r7, #24
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	bd80      	pop	{r7, pc}
 800b9d0:	2001dfe4 	.word	0x2001dfe4
 800b9d4:	2001dfe8 	.word	0x2001dfe8

0800b9d8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b9d8:	b580      	push	{r7, lr}
 800b9da:	b082      	sub	sp, #8
 800b9dc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b9de:	f7fd fa6d 	bl	8008ebc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b9e2:	4b15      	ldr	r3, [pc, #84]	; (800ba38 <prvCheckForValidListAndQueue+0x60>)
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d120      	bne.n	800ba2c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b9ea:	4814      	ldr	r0, [pc, #80]	; (800ba3c <prvCheckForValidListAndQueue+0x64>)
 800b9ec:	f7fd f8a8 	bl	8008b40 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b9f0:	4813      	ldr	r0, [pc, #76]	; (800ba40 <prvCheckForValidListAndQueue+0x68>)
 800b9f2:	f7fd f8a5 	bl	8008b40 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b9f6:	4b13      	ldr	r3, [pc, #76]	; (800ba44 <prvCheckForValidListAndQueue+0x6c>)
 800b9f8:	4a10      	ldr	r2, [pc, #64]	; (800ba3c <prvCheckForValidListAndQueue+0x64>)
 800b9fa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b9fc:	4b12      	ldr	r3, [pc, #72]	; (800ba48 <prvCheckForValidListAndQueue+0x70>)
 800b9fe:	4a10      	ldr	r2, [pc, #64]	; (800ba40 <prvCheckForValidListAndQueue+0x68>)
 800ba00:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ba02:	2300      	movs	r3, #0
 800ba04:	9300      	str	r3, [sp, #0]
 800ba06:	4b11      	ldr	r3, [pc, #68]	; (800ba4c <prvCheckForValidListAndQueue+0x74>)
 800ba08:	4a11      	ldr	r2, [pc, #68]	; (800ba50 <prvCheckForValidListAndQueue+0x78>)
 800ba0a:	2110      	movs	r1, #16
 800ba0c:	200a      	movs	r0, #10
 800ba0e:	f7fd fbeb 	bl	80091e8 <xQueueGenericCreateStatic>
 800ba12:	4603      	mov	r3, r0
 800ba14:	4a08      	ldr	r2, [pc, #32]	; (800ba38 <prvCheckForValidListAndQueue+0x60>)
 800ba16:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ba18:	4b07      	ldr	r3, [pc, #28]	; (800ba38 <prvCheckForValidListAndQueue+0x60>)
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d005      	beq.n	800ba2c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ba20:	4b05      	ldr	r3, [pc, #20]	; (800ba38 <prvCheckForValidListAndQueue+0x60>)
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	490b      	ldr	r1, [pc, #44]	; (800ba54 <prvCheckForValidListAndQueue+0x7c>)
 800ba26:	4618      	mov	r0, r3
 800ba28:	f7fe fbfc 	bl	800a224 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ba2c:	f7fd fa7a 	bl	8008f24 <vPortExitCritical>
}
 800ba30:	bf00      	nop
 800ba32:	46bd      	mov	sp, r7
 800ba34:	bd80      	pop	{r7, pc}
 800ba36:	bf00      	nop
 800ba38:	2001dfec 	.word	0x2001dfec
 800ba3c:	2001dfbc 	.word	0x2001dfbc
 800ba40:	2001dfd0 	.word	0x2001dfd0
 800ba44:	2001dfe4 	.word	0x2001dfe4
 800ba48:	2001dfe8 	.word	0x2001dfe8
 800ba4c:	2001e098 	.word	0x2001e098
 800ba50:	2001dff8 	.word	0x2001dff8
 800ba54:	08024784 	.word	0x08024784

0800ba58 <MX_TouchGFX_PreOSInit>:

/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
 800ba58:	b480      	push	{r7}
 800ba5a:	af00      	add	r7, sp, #0
}
 800ba5c:	bf00      	nop
 800ba5e:	46bd      	mov	sp, r7
 800ba60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba64:	4770      	bx	lr

0800ba66 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 800ba66:	b580      	push	{r7, lr}
 800ba68:	af00      	add	r7, sp, #0
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_components_init();
 800ba6a:	f004 faf5 	bl	8010058 <touchgfx_components_init>
  touchgfx_init();
 800ba6e:	f004 fac9 	bl	8010004 <touchgfx_init>
}
 800ba72:	bf00      	nop
 800ba74:	bd80      	pop	{r7, pc}

0800ba76 <TouchGFX_Task>:

/**
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
 800ba76:	b580      	push	{r7, lr}
 800ba78:	b082      	sub	sp, #8
 800ba7a:	af00      	add	r7, sp, #0
 800ba7c:	6078      	str	r0, [r7, #4]
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 800ba7e:	f004 faf3 	bl	8010068 <touchgfx_taskEntry>
}
 800ba82:	bf00      	nop
 800ba84:	3708      	adds	r7, #8
 800ba86:	46bd      	mov	sp, r7
 800ba88:	bd80      	pop	{r7, pc}
	...

0800ba8c <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 800ba8c:	b480      	push	{r7}
 800ba8e:	b083      	sub	sp, #12
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	6078      	str	r0, [r7, #4]
    {
 800ba94:	4a04      	ldr	r2, [pc, #16]	; (800baa8 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	601a      	str	r2, [r3, #0]
    }
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	4618      	mov	r0, r3
 800ba9e:	370c      	adds	r7, #12
 800baa0:	46bd      	mov	sp, r7
 800baa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa6:	4770      	bx	lr
 800baa8:	080269fc 	.word	0x080269fc

0800baac <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 800baac:	b580      	push	{r7, lr}
 800baae:	b082      	sub	sp, #8
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	6078      	str	r0, [r7, #4]
    }
 800bab4:	6878      	ldr	r0, [r7, #4]
 800bab6:	f7ff ffe9 	bl	800ba8c <_ZN8touchgfx12FontProviderD1Ev>
 800baba:	2104      	movs	r1, #4
 800babc:	6878      	ldr	r0, [r7, #4]
 800babe:	f017 fd46 	bl	802354e <_ZdlPvj>
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	4618      	mov	r0, r3
 800bac6:	3708      	adds	r7, #8
 800bac8:	46bd      	mov	sp, r7
 800baca:	bd80      	pop	{r7, pc}

0800bacc <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 800bacc:	b580      	push	{r7, lr}
 800bace:	b082      	sub	sp, #8
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	6078      	str	r0, [r7, #4]
 800bad4:	460b      	mov	r3, r1
 800bad6:	807b      	strh	r3, [r7, #2]
    switch (typography)
 800bad8:	887b      	ldrh	r3, [r7, #2]
 800bada:	2b02      	cmp	r3, #2
 800badc:	d010      	beq.n	800bb00 <_ZN23ApplicationFontProvider7getFontEt+0x34>
 800bade:	2b02      	cmp	r3, #2
 800bae0:	dc13      	bgt.n	800bb0a <_ZN23ApplicationFontProvider7getFontEt+0x3e>
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d002      	beq.n	800baec <_ZN23ApplicationFontProvider7getFontEt+0x20>
 800bae6:	2b01      	cmp	r3, #1
 800bae8:	d005      	beq.n	800baf6 <_ZN23ApplicationFontProvider7getFontEt+0x2a>
 800baea:	e00e      	b.n	800bb0a <_ZN23ApplicationFontProvider7getFontEt+0x3e>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 800baec:	f001 fdde 	bl	800d6ac <_ZN17TypedTextDatabase8getFontsEv>
 800baf0:	4603      	mov	r3, r0
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	e00a      	b.n	800bb0c <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 800baf6:	f001 fdd9 	bl	800d6ac <_ZN17TypedTextDatabase8getFontsEv>
 800bafa:	4603      	mov	r3, r0
 800bafc:	685b      	ldr	r3, [r3, #4]
 800bafe:	e005      	b.n	800bb0c <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800bb00:	f001 fdd4 	bl	800d6ac <_ZN17TypedTextDatabase8getFontsEv>
 800bb04:	4603      	mov	r3, r0
 800bb06:	689b      	ldr	r3, [r3, #8]
 800bb08:	e000      	b.n	800bb0c <_ZN23ApplicationFontProvider7getFontEt+0x40>
    default:
        return 0;
 800bb0a:	2300      	movs	r3, #0
    }
}
 800bb0c:	4618      	mov	r0, r3
 800bb0e:	3708      	adds	r7, #8
 800bb10:	46bd      	mov	sp, r7
 800bb12:	bd80      	pop	{r7, pc}

0800bb14 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 800bb14:	b580      	push	{r7, lr}
 800bb16:	b082      	sub	sp, #8
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	6078      	str	r0, [r7, #4]
 800bb1c:	4a05      	ldr	r2, [pc, #20]	; (800bb34 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	601a      	str	r2, [r3, #0]
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	4618      	mov	r0, r3
 800bb26:	f7ff ffb1 	bl	800ba8c <_ZN8touchgfx12FontProviderD1Ev>
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	4618      	mov	r0, r3
 800bb2e:	3708      	adds	r7, #8
 800bb30:	46bd      	mov	sp, r7
 800bb32:	bd80      	pop	{r7, pc}
 800bb34:	080269e8 	.word	0x080269e8

0800bb38 <_ZN23ApplicationFontProviderD0Ev>:
 800bb38:	b580      	push	{r7, lr}
 800bb3a:	b082      	sub	sp, #8
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	6078      	str	r0, [r7, #4]
 800bb40:	6878      	ldr	r0, [r7, #4]
 800bb42:	f7ff ffe7 	bl	800bb14 <_ZN23ApplicationFontProviderD1Ev>
 800bb46:	2104      	movs	r1, #4
 800bb48:	6878      	ldr	r0, [r7, #4]
 800bb4a:	f017 fd00 	bl	802354e <_ZdlPvj>
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	4618      	mov	r0, r3
 800bb52:	3708      	adds	r7, #8
 800bb54:	46bd      	mov	sp, r7
 800bb56:	bd80      	pop	{r7, pc}

0800bb58 <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 800bb58:	b480      	push	{r7}
 800bb5a:	b083      	sub	sp, #12
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	6078      	str	r0, [r7, #4]
    {
 800bb60:	4a04      	ldr	r2, [pc, #16]	; (800bb74 <_ZN8touchgfx4FontD1Ev+0x1c>)
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	601a      	str	r2, [r3, #0]
    }
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	4618      	mov	r0, r3
 800bb6a:	370c      	adds	r7, #12
 800bb6c:	46bd      	mov	sp, r7
 800bb6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb72:	4770      	bx	lr
 800bb74:	08026c8c 	.word	0x08026c8c

0800bb78 <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 800bb78:	b580      	push	{r7, lr}
 800bb7a:	b082      	sub	sp, #8
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	6078      	str	r0, [r7, #4]
    }
 800bb80:	6878      	ldr	r0, [r7, #4]
 800bb82:	f7ff ffe9 	bl	800bb58 <_ZN8touchgfx4FontD1Ev>
 800bb86:	2114      	movs	r1, #20
 800bb88:	6878      	ldr	r0, [r7, #4]
 800bb8a:	f017 fce0 	bl	802354e <_ZdlPvj>
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	4618      	mov	r0, r3
 800bb92:	3708      	adds	r7, #8
 800bb94:	46bd      	mov	sp, r7
 800bb96:	bd80      	pop	{r7, pc}

0800bb98 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 800bb98:	b590      	push	{r4, r7, lr}
 800bb9a:	b087      	sub	sp, #28
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	6078      	str	r0, [r7, #4]
 800bba0:	460b      	mov	r3, r1
 800bba2:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 800bba4:	887b      	ldrh	r3, [r7, #2]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d101      	bne.n	800bbae <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 800bbaa:	2300      	movs	r3, #0
 800bbac:	e010      	b.n	800bbd0 <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 800bbae:	2300      	movs	r3, #0
 800bbb0:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 800bbb2:	2300      	movs	r3, #0
 800bbb4:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	3308      	adds	r3, #8
 800bbbc:	681c      	ldr	r4, [r3, #0]
 800bbbe:	f107 030f 	add.w	r3, r7, #15
 800bbc2:	f107 0210 	add.w	r2, r7, #16
 800bbc6:	8879      	ldrh	r1, [r7, #2]
 800bbc8:	6878      	ldr	r0, [r7, #4]
 800bbca:	47a0      	blx	r4
 800bbcc:	6178      	str	r0, [r7, #20]
        return glyph;
 800bbce:	697b      	ldr	r3, [r7, #20]
    }
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	371c      	adds	r7, #28
 800bbd4:	46bd      	mov	sp, r7
 800bbd6:	bd90      	pop	{r4, r7, pc}

0800bbd8 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 800bbd8:	b480      	push	{r7}
 800bbda:	b083      	sub	sp, #12
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	89db      	ldrh	r3, [r3, #14]
    }
 800bbe4:	4618      	mov	r0, r3
 800bbe6:	370c      	adds	r7, #12
 800bbe8:	46bd      	mov	sp, r7
 800bbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbee:	4770      	bx	lr

0800bbf0 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 800bbf0:	b480      	push	{r7}
 800bbf2:	b083      	sub	sp, #12
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	8a1b      	ldrh	r3, [r3, #16]
    }
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	370c      	adds	r7, #12
 800bc00:	46bd      	mov	sp, r7
 800bc02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc06:	4770      	bx	lr

0800bc08 <_ZNK8touchgfx4Font11getBaselineEv>:
     * @return The height in pixels of this font.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
 800bc08:	b480      	push	{r7}
 800bc0a:	b083      	sub	sp, #12
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	6078      	str	r0, [r7, #4]
    {
        return baselineHeight;
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	88db      	ldrh	r3, [r3, #6]
    }
 800bc14:	4618      	mov	r0, r3
 800bc16:	370c      	adds	r7, #12
 800bc18:	46bd      	mov	sp, r7
 800bc1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc1e:	4770      	bx	lr

0800bc20 <_ZNK8touchgfx4Font9getHeightEv>:
     * Returns the height of a font. The font may exceed the top by getPixelsAboveTop() or the
     * bottom by getPixelsBelowBottom.
     *
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
 800bc20:	b480      	push	{r7}
 800bc22:	b083      	sub	sp, #12
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	889b      	ldrh	r3, [r3, #4]
    }
 800bc2c:	4618      	mov	r0, r3
 800bc2e:	370c      	adds	r7, #12
 800bc30:	46bd      	mov	sp, r7
 800bc32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc36:	4770      	bx	lr

0800bc38 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 800bc38:	b480      	push	{r7}
 800bc3a:	b083      	sub	sp, #12
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	7a9b      	ldrb	r3, [r3, #10]
 800bc44:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800bc48:	b2db      	uxtb	r3, r3
    }
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	370c      	adds	r7, #12
 800bc4e:	46bd      	mov	sp, r7
 800bc50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc54:	4770      	bx	lr

0800bc56 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 800bc56:	b480      	push	{r7}
 800bc58:	b083      	sub	sp, #12
 800bc5a:	af00      	add	r7, sp, #0
 800bc5c:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	7a9b      	ldrb	r3, [r3, #10]
 800bc62:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800bc66:	b2db      	uxtb	r3, r3
    }
 800bc68:	4618      	mov	r0, r3
 800bc6a:	370c      	adds	r7, #12
 800bc6c:	46bd      	mov	sp, r7
 800bc6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc72:	4770      	bx	lr

0800bc74 <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 800bc74:	b580      	push	{r7, lr}
 800bc76:	b082      	sub	sp, #8
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	6078      	str	r0, [r7, #4]
 800bc7c:	4a05      	ldr	r2, [pc, #20]	; (800bc94 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	601a      	str	r2, [r3, #0]
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	4618      	mov	r0, r3
 800bc86:	f7ff ff67 	bl	800bb58 <_ZN8touchgfx4FontD1Ev>
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	3708      	adds	r7, #8
 800bc90:	46bd      	mov	sp, r7
 800bc92:	bd80      	pop	{r7, pc}
 800bc94:	08027bdc 	.word	0x08027bdc

0800bc98 <_ZN8touchgfx9ConstFontD0Ev>:
 800bc98:	b580      	push	{r7, lr}
 800bc9a:	b082      	sub	sp, #8
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	6078      	str	r0, [r7, #4]
 800bca0:	6878      	ldr	r0, [r7, #4]
 800bca2:	f7ff ffe7 	bl	800bc74 <_ZN8touchgfx9ConstFontD1Ev>
 800bca6:	211c      	movs	r1, #28
 800bca8:	6878      	ldr	r0, [r7, #4]
 800bcaa:	f017 fc50 	bl	802354e <_ZdlPvj>
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	4618      	mov	r0, r3
 800bcb2:	3708      	adds	r7, #8
 800bcb4:	46bd      	mov	sp, r7
 800bcb6:	bd80      	pop	{r7, pc}

0800bcb8 <_ZN8touchgfx13GeneratedFontD1Ev>:

#include <touchgfx/ConstFont.hpp>

namespace touchgfx
{
class GeneratedFont : public ConstFont
 800bcb8:	b580      	push	{r7, lr}
 800bcba:	b082      	sub	sp, #8
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	6078      	str	r0, [r7, #4]
 800bcc0:	4a05      	ldr	r2, [pc, #20]	; (800bcd8 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	601a      	str	r2, [r3, #0]
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	4618      	mov	r0, r3
 800bcca:	f7ff ffd3 	bl	800bc74 <_ZN8touchgfx9ConstFontD1Ev>
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	4618      	mov	r0, r3
 800bcd2:	3708      	adds	r7, #8
 800bcd4:	46bd      	mov	sp, r7
 800bcd6:	bd80      	pop	{r7, pc}
 800bcd8:	08026a10 	.word	0x08026a10

0800bcdc <_ZN8touchgfx13GeneratedFontD0Ev>:
 800bcdc:	b580      	push	{r7, lr}
 800bcde:	b082      	sub	sp, #8
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	6078      	str	r0, [r7, #4]
 800bce4:	6878      	ldr	r0, [r7, #4]
 800bce6:	f7ff ffe7 	bl	800bcb8 <_ZN8touchgfx13GeneratedFontD1Ev>
 800bcea:	212c      	movs	r1, #44	; 0x2c
 800bcec:	6878      	ldr	r0, [r7, #4]
 800bcee:	f017 fc2e 	bl	802354e <_ZdlPvj>
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	4618      	mov	r0, r3
 800bcf6:	3708      	adds	r7, #8
 800bcf8:	46bd      	mov	sp, r7
 800bcfa:	bd80      	pop	{r7, pc}

0800bcfc <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:

    virtual const uint8_t* getPixelData(const GlyphNode* glyph) const;

    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
 800bcfc:	b480      	push	{r7}
 800bcfe:	b083      	sub	sp, #12
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    }
 800bd08:	4618      	mov	r0, r3
 800bd0a:	370c      	adds	r7, #12
 800bd0c:	46bd      	mov	sp, r7
 800bd0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd12:	4770      	bx	lr

0800bd14 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
 800bd14:	b480      	push	{r7}
 800bd16:	b083      	sub	sp, #12
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	6078      	str	r0, [r7, #4]
    {
        return arabicTable;
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    }
 800bd20:	4618      	mov	r0, r3
 800bd22:	370c      	adds	r7, #12
 800bd24:	46bd      	mov	sp, r7
 800bd26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd2a:	4770      	bx	lr

0800bd2c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 800bd2c:	b580      	push	{r7, lr}
 800bd2e:	b08e      	sub	sp, #56	; 0x38
 800bd30:	af0a      	add	r7, sp, #40	; 0x28
 800bd32:	60f8      	str	r0, [r7, #12]
 800bd34:	60b9      	str	r1, [r7, #8]
 800bd36:	4611      	mov	r1, r2
 800bd38:	461a      	mov	r2, r3
 800bd3a:	460b      	mov	r3, r1
 800bd3c:	80fb      	strh	r3, [r7, #6]
 800bd3e:	4613      	mov	r3, r2
 800bd40:	80bb      	strh	r3, [r7, #4]
    : ConstFont(glyphs, numGlyphs, height, baseline, pixAboveTop, pixBelowBottom, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
      glyphData(glyphDataInternalFlash),
      kerningData(kerningList),
      gsubTable(gsubData),
      arabicTable(formsTable)
 800bd42:	68f8      	ldr	r0, [r7, #12]
 800bd44:	88b9      	ldrh	r1, [r7, #4]
 800bd46:	88fa      	ldrh	r2, [r7, #6]
 800bd48:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800bd4c:	9308      	str	r3, [sp, #32]
 800bd4e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800bd50:	9307      	str	r3, [sp, #28]
 800bd52:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800bd56:	9306      	str	r3, [sp, #24]
 800bd58:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800bd5c:	9305      	str	r3, [sp, #20]
 800bd5e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800bd62:	9304      	str	r3, [sp, #16]
 800bd64:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800bd68:	9303      	str	r3, [sp, #12]
 800bd6a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bd6e:	9302      	str	r3, [sp, #8]
 800bd70:	7f3b      	ldrb	r3, [r7, #28]
 800bd72:	9301      	str	r3, [sp, #4]
 800bd74:	8b3b      	ldrh	r3, [r7, #24]
 800bd76:	9300      	str	r3, [sp, #0]
 800bd78:	460b      	mov	r3, r1
 800bd7a:	68b9      	ldr	r1, [r7, #8]
 800bd7c:	f00a fabc 	bl	80162f8 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 800bd80:	4a09      	ldr	r2, [pc, #36]	; (800bda8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x7c>)
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	601a      	str	r2, [r3, #0]
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bd8a:	61da      	str	r2, [r3, #28]
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bd90:	621a      	str	r2, [r3, #32]
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bd96:	625a      	str	r2, [r3, #36]	; 0x24
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bd9c:	629a      	str	r2, [r3, #40]	; 0x28
{
}
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	4618      	mov	r0, r3
 800bda2:	3710      	adds	r7, #16
 800bda4:	46bd      	mov	sp, r7
 800bda6:	bd80      	pop	{r7, pc}
 800bda8:	08026a10 	.word	0x08026a10

0800bdac <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 800bdac:	b480      	push	{r7}
 800bdae:	b085      	sub	sp, #20
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	6078      	str	r0, [r7, #4]
 800bdb4:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	69db      	ldr	r3, [r3, #28]
 800bdba:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 800bdbc:	683b      	ldr	r3, [r7, #0]
 800bdbe:	889b      	ldrh	r3, [r3, #4]
 800bdc0:	0adb      	lsrs	r3, r3, #11
 800bdc2:	b29b      	uxth	r3, r3
 800bdc4:	009b      	lsls	r3, r3, #2
 800bdc6:	68fa      	ldr	r2, [r7, #12]
 800bdc8:	4413      	add	r3, r2
 800bdca:	681a      	ldr	r2, [r3, #0]
 800bdcc:	683b      	ldr	r3, [r7, #0]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	4413      	add	r3, r2
}
 800bdd2:	4618      	mov	r0, r3
 800bdd4:	3714      	adds	r7, #20
 800bdd6:	46bd      	mov	sp, r7
 800bdd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bddc:	4770      	bx	lr

0800bdde <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800bdde:	b480      	push	{r7}
 800bde0:	b089      	sub	sp, #36	; 0x24
 800bde2:	af00      	add	r7, sp, #0
 800bde4:	60f8      	str	r0, [r7, #12]
 800bde6:	460b      	mov	r3, r1
 800bde8:	607a      	str	r2, [r7, #4]
 800bdea:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d003      	beq.n	800bdfa <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	7b1b      	ldrb	r3, [r3, #12]
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d101      	bne.n	800bdfe <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	e030      	b.n	800be60 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	6a1a      	ldr	r2, [r3, #32]
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 800be06:	697b      	ldr	r3, [r7, #20]
 800be08:	7b5b      	ldrb	r3, [r3, #13]
 800be0a:	021b      	lsls	r3, r3, #8
 800be0c:	b21b      	sxth	r3, r3
 800be0e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800be12:	b219      	sxth	r1, r3
 800be14:	697b      	ldr	r3, [r7, #20]
 800be16:	7adb      	ldrb	r3, [r3, #11]
 800be18:	b21b      	sxth	r3, r3
 800be1a:	430b      	orrs	r3, r1
 800be1c:	b21b      	sxth	r3, r3
 800be1e:	b29b      	uxth	r3, r3
 800be20:	009b      	lsls	r3, r3, #2
 800be22:	4413      	add	r3, r2
 800be24:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	7b1b      	ldrb	r3, [r3, #12]
 800be2a:	837b      	strh	r3, [r7, #26]
 800be2c:	8b7b      	ldrh	r3, [r7, #26]
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d015      	beq.n	800be5e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    {
        if (prevChar == kerndata->unicodePrevChar)
 800be32:	69fb      	ldr	r3, [r7, #28]
 800be34:	881b      	ldrh	r3, [r3, #0]
 800be36:	897a      	ldrh	r2, [r7, #10]
 800be38:	429a      	cmp	r2, r3
 800be3a:	d103      	bne.n	800be44 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
        {
            return kerndata->distance;
 800be3c:	69fb      	ldr	r3, [r7, #28]
 800be3e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800be42:	e00d      	b.n	800be60 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        }
        if (prevChar < kerndata->unicodePrevChar)
 800be44:	69fb      	ldr	r3, [r7, #28]
 800be46:	881b      	ldrh	r3, [r3, #0]
 800be48:	897a      	ldrh	r2, [r7, #10]
 800be4a:	429a      	cmp	r2, r3
 800be4c:	d306      	bcc.n	800be5c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x7e>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800be4e:	8b7b      	ldrh	r3, [r7, #26]
 800be50:	3b01      	subs	r3, #1
 800be52:	837b      	strh	r3, [r7, #26]
 800be54:	69fb      	ldr	r3, [r7, #28]
 800be56:	3304      	adds	r3, #4
 800be58:	61fb      	str	r3, [r7, #28]
 800be5a:	e7e7      	b.n	800be2c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x4e>
        {
            break;
 800be5c:	bf00      	nop
        }
    }
    return 0;
 800be5e:	2300      	movs	r3, #0
}
 800be60:	4618      	mov	r0, r3
 800be62:	3724      	adds	r7, #36	; 0x24
 800be64:	46bd      	mov	sp, r7
 800be66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be6a:	4770      	bx	lr

0800be6c <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800be6c:	b580      	push	{r7, lr}
 800be6e:	af00      	add	r7, sp, #0
 800be70:	4801      	ldr	r0, [pc, #4]	; (800be78 <__tcf_0+0xc>)
 800be72:	f7ff ff21 	bl	800bcb8 <_ZN8touchgfx13GeneratedFontD1Ev>
 800be76:	bd80      	pop	{r7, pc}
 800be78:	2001e0e8 	.word	0x2001e0e8

0800be7c <_Z23getFont_verdana_10_4bppv>:
{
 800be7c:	b580      	push	{r7, lr}
 800be7e:	b08e      	sub	sp, #56	; 0x38
 800be80:	af0e      	add	r7, sp, #56	; 0x38
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800be82:	4b21      	ldr	r3, [pc, #132]	; (800bf08 <_Z23getFont_verdana_10_4bppv+0x8c>)
 800be84:	781b      	ldrb	r3, [r3, #0]
 800be86:	f3bf 8f5b 	dmb	ish
 800be8a:	b2db      	uxtb	r3, r3
 800be8c:	f003 0301 	and.w	r3, r3, #1
 800be90:	2b00      	cmp	r3, #0
 800be92:	bf0c      	ite	eq
 800be94:	2301      	moveq	r3, #1
 800be96:	2300      	movne	r3, #0
 800be98:	b2db      	uxtb	r3, r3
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d030      	beq.n	800bf00 <_Z23getFont_verdana_10_4bppv+0x84>
 800be9e:	481a      	ldr	r0, [pc, #104]	; (800bf08 <_Z23getFont_verdana_10_4bppv+0x8c>)
 800bea0:	f017 fb57 	bl	8023552 <__cxa_guard_acquire>
 800bea4:	4603      	mov	r3, r0
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	bf14      	ite	ne
 800beaa:	2301      	movne	r3, #1
 800beac:	2300      	moveq	r3, #0
 800beae:	b2db      	uxtb	r3, r3
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d025      	beq.n	800bf00 <_Z23getFont_verdana_10_4bppv+0x84>
 800beb4:	2300      	movs	r3, #0
 800beb6:	930c      	str	r3, [sp, #48]	; 0x30
 800beb8:	2300      	movs	r3, #0
 800beba:	930b      	str	r3, [sp, #44]	; 0x2c
 800bebc:	2300      	movs	r3, #0
 800bebe:	930a      	str	r3, [sp, #40]	; 0x28
 800bec0:	233f      	movs	r3, #63	; 0x3f
 800bec2:	9309      	str	r3, [sp, #36]	; 0x24
 800bec4:	4b11      	ldr	r3, [pc, #68]	; (800bf0c <_Z23getFont_verdana_10_4bppv+0x90>)
 800bec6:	9308      	str	r3, [sp, #32]
 800bec8:	4b11      	ldr	r3, [pc, #68]	; (800bf10 <_Z23getFont_verdana_10_4bppv+0x94>)
 800beca:	9307      	str	r3, [sp, #28]
 800becc:	2300      	movs	r3, #0
 800bece:	9306      	str	r3, [sp, #24]
 800bed0:	2300      	movs	r3, #0
 800bed2:	9305      	str	r3, [sp, #20]
 800bed4:	2301      	movs	r3, #1
 800bed6:	9304      	str	r3, [sp, #16]
 800bed8:	2304      	movs	r3, #4
 800beda:	9303      	str	r3, [sp, #12]
 800bedc:	2300      	movs	r3, #0
 800bede:	9302      	str	r3, [sp, #8]
 800bee0:	2300      	movs	r3, #0
 800bee2:	9301      	str	r3, [sp, #4]
 800bee4:	230a      	movs	r3, #10
 800bee6:	9300      	str	r3, [sp, #0]
 800bee8:	230a      	movs	r3, #10
 800beea:	2201      	movs	r2, #1
 800beec:	4909      	ldr	r1, [pc, #36]	; (800bf14 <_Z23getFont_verdana_10_4bppv+0x98>)
 800beee:	480a      	ldr	r0, [pc, #40]	; (800bf18 <_Z23getFont_verdana_10_4bppv+0x9c>)
 800bef0:	f7ff ff1c 	bl	800bd2c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800bef4:	4809      	ldr	r0, [pc, #36]	; (800bf1c <_Z23getFont_verdana_10_4bppv+0xa0>)
 800bef6:	f017 fb77 	bl	80235e8 <atexit>
 800befa:	4803      	ldr	r0, [pc, #12]	; (800bf08 <_Z23getFont_verdana_10_4bppv+0x8c>)
 800befc:	f017 fb35 	bl	802356a <__cxa_guard_release>
    return verdana_10_4bpp;
 800bf00:	4b05      	ldr	r3, [pc, #20]	; (800bf18 <_Z23getFont_verdana_10_4bppv+0x9c>)
}
 800bf02:	4618      	mov	r0, r3
 800bf04:	46bd      	mov	sp, r7
 800bf06:	bd80      	pop	{r7, pc}
 800bf08:	2001e114 	.word	0x2001e114
 800bf0c:	08028004 	.word	0x08028004
 800bf10:	08028010 	.word	0x08028010
 800bf14:	90177178 	.word	0x90177178
 800bf18:	2001e0e8 	.word	0x2001e0e8
 800bf1c:	0800be6d 	.word	0x0800be6d

0800bf20 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800bf20:	b580      	push	{r7, lr}
 800bf22:	af00      	add	r7, sp, #0
 800bf24:	4801      	ldr	r0, [pc, #4]	; (800bf2c <__tcf_0+0xc>)
 800bf26:	f7ff fec7 	bl	800bcb8 <_ZN8touchgfx13GeneratedFontD1Ev>
 800bf2a:	bd80      	pop	{r7, pc}
 800bf2c:	2001e118 	.word	0x2001e118

0800bf30 <_Z23getFont_verdana_20_4bppv>:
{
 800bf30:	b580      	push	{r7, lr}
 800bf32:	b08e      	sub	sp, #56	; 0x38
 800bf34:	af0e      	add	r7, sp, #56	; 0x38
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800bf36:	4b21      	ldr	r3, [pc, #132]	; (800bfbc <_Z23getFont_verdana_20_4bppv+0x8c>)
 800bf38:	781b      	ldrb	r3, [r3, #0]
 800bf3a:	f3bf 8f5b 	dmb	ish
 800bf3e:	b2db      	uxtb	r3, r3
 800bf40:	f003 0301 	and.w	r3, r3, #1
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	bf0c      	ite	eq
 800bf48:	2301      	moveq	r3, #1
 800bf4a:	2300      	movne	r3, #0
 800bf4c:	b2db      	uxtb	r3, r3
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d030      	beq.n	800bfb4 <_Z23getFont_verdana_20_4bppv+0x84>
 800bf52:	481a      	ldr	r0, [pc, #104]	; (800bfbc <_Z23getFont_verdana_20_4bppv+0x8c>)
 800bf54:	f017 fafd 	bl	8023552 <__cxa_guard_acquire>
 800bf58:	4603      	mov	r3, r0
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	bf14      	ite	ne
 800bf5e:	2301      	movne	r3, #1
 800bf60:	2300      	moveq	r3, #0
 800bf62:	b2db      	uxtb	r3, r3
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d025      	beq.n	800bfb4 <_Z23getFont_verdana_20_4bppv+0x84>
 800bf68:	2300      	movs	r3, #0
 800bf6a:	930c      	str	r3, [sp, #48]	; 0x30
 800bf6c:	2300      	movs	r3, #0
 800bf6e:	930b      	str	r3, [sp, #44]	; 0x2c
 800bf70:	2300      	movs	r3, #0
 800bf72:	930a      	str	r3, [sp, #40]	; 0x28
 800bf74:	233f      	movs	r3, #63	; 0x3f
 800bf76:	9309      	str	r3, [sp, #36]	; 0x24
 800bf78:	4b11      	ldr	r3, [pc, #68]	; (800bfc0 <_Z23getFont_verdana_20_4bppv+0x90>)
 800bf7a:	9308      	str	r3, [sp, #32]
 800bf7c:	4b11      	ldr	r3, [pc, #68]	; (800bfc4 <_Z23getFont_verdana_20_4bppv+0x94>)
 800bf7e:	9307      	str	r3, [sp, #28]
 800bf80:	2300      	movs	r3, #0
 800bf82:	9306      	str	r3, [sp, #24]
 800bf84:	2300      	movs	r3, #0
 800bf86:	9305      	str	r3, [sp, #20]
 800bf88:	2301      	movs	r3, #1
 800bf8a:	9304      	str	r3, [sp, #16]
 800bf8c:	2304      	movs	r3, #4
 800bf8e:	9303      	str	r3, [sp, #12]
 800bf90:	2300      	movs	r3, #0
 800bf92:	9302      	str	r3, [sp, #8]
 800bf94:	2300      	movs	r3, #0
 800bf96:	9301      	str	r3, [sp, #4]
 800bf98:	2314      	movs	r3, #20
 800bf9a:	9300      	str	r3, [sp, #0]
 800bf9c:	2314      	movs	r3, #20
 800bf9e:	2201      	movs	r2, #1
 800bfa0:	4909      	ldr	r1, [pc, #36]	; (800bfc8 <_Z23getFont_verdana_20_4bppv+0x98>)
 800bfa2:	480a      	ldr	r0, [pc, #40]	; (800bfcc <_Z23getFont_verdana_20_4bppv+0x9c>)
 800bfa4:	f7ff fec2 	bl	800bd2c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800bfa8:	4809      	ldr	r0, [pc, #36]	; (800bfd0 <_Z23getFont_verdana_20_4bppv+0xa0>)
 800bfaa:	f017 fb1d 	bl	80235e8 <atexit>
 800bfae:	4803      	ldr	r0, [pc, #12]	; (800bfbc <_Z23getFont_verdana_20_4bppv+0x8c>)
 800bfb0:	f017 fadb 	bl	802356a <__cxa_guard_release>
    return verdana_20_4bpp;
 800bfb4:	4b05      	ldr	r3, [pc, #20]	; (800bfcc <_Z23getFont_verdana_20_4bppv+0x9c>)
}
 800bfb6:	4618      	mov	r0, r3
 800bfb8:	46bd      	mov	sp, r7
 800bfba:	bd80      	pop	{r7, pc}
 800bfbc:	2001e144 	.word	0x2001e144
 800bfc0:	08028008 	.word	0x08028008
 800bfc4:	08028014 	.word	0x08028014
 800bfc8:	90177188 	.word	0x90177188
 800bfcc:	2001e118 	.word	0x2001e118
 800bfd0:	0800bf21 	.word	0x0800bf21

0800bfd4 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800bfd4:	b580      	push	{r7, lr}
 800bfd6:	af00      	add	r7, sp, #0
 800bfd8:	4801      	ldr	r0, [pc, #4]	; (800bfe0 <__tcf_0+0xc>)
 800bfda:	f7ff fe6d 	bl	800bcb8 <_ZN8touchgfx13GeneratedFontD1Ev>
 800bfde:	bd80      	pop	{r7, pc}
 800bfe0:	2001e148 	.word	0x2001e148

0800bfe4 <_Z23getFont_verdana_40_4bppv>:
{
 800bfe4:	b580      	push	{r7, lr}
 800bfe6:	b08e      	sub	sp, #56	; 0x38
 800bfe8:	af0e      	add	r7, sp, #56	; 0x38
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800bfea:	4b21      	ldr	r3, [pc, #132]	; (800c070 <_Z23getFont_verdana_40_4bppv+0x8c>)
 800bfec:	781b      	ldrb	r3, [r3, #0]
 800bfee:	f3bf 8f5b 	dmb	ish
 800bff2:	b2db      	uxtb	r3, r3
 800bff4:	f003 0301 	and.w	r3, r3, #1
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	bf0c      	ite	eq
 800bffc:	2301      	moveq	r3, #1
 800bffe:	2300      	movne	r3, #0
 800c000:	b2db      	uxtb	r3, r3
 800c002:	2b00      	cmp	r3, #0
 800c004:	d030      	beq.n	800c068 <_Z23getFont_verdana_40_4bppv+0x84>
 800c006:	481a      	ldr	r0, [pc, #104]	; (800c070 <_Z23getFont_verdana_40_4bppv+0x8c>)
 800c008:	f017 faa3 	bl	8023552 <__cxa_guard_acquire>
 800c00c:	4603      	mov	r3, r0
 800c00e:	2b00      	cmp	r3, #0
 800c010:	bf14      	ite	ne
 800c012:	2301      	movne	r3, #1
 800c014:	2300      	moveq	r3, #0
 800c016:	b2db      	uxtb	r3, r3
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d025      	beq.n	800c068 <_Z23getFont_verdana_40_4bppv+0x84>
 800c01c:	2300      	movs	r3, #0
 800c01e:	930c      	str	r3, [sp, #48]	; 0x30
 800c020:	2300      	movs	r3, #0
 800c022:	930b      	str	r3, [sp, #44]	; 0x2c
 800c024:	2300      	movs	r3, #0
 800c026:	930a      	str	r3, [sp, #40]	; 0x28
 800c028:	233f      	movs	r3, #63	; 0x3f
 800c02a:	9309      	str	r3, [sp, #36]	; 0x24
 800c02c:	4b11      	ldr	r3, [pc, #68]	; (800c074 <_Z23getFont_verdana_40_4bppv+0x90>)
 800c02e:	9308      	str	r3, [sp, #32]
 800c030:	4b11      	ldr	r3, [pc, #68]	; (800c078 <_Z23getFont_verdana_40_4bppv+0x94>)
 800c032:	9307      	str	r3, [sp, #28]
 800c034:	2300      	movs	r3, #0
 800c036:	9306      	str	r3, [sp, #24]
 800c038:	2300      	movs	r3, #0
 800c03a:	9305      	str	r3, [sp, #20]
 800c03c:	2301      	movs	r3, #1
 800c03e:	9304      	str	r3, [sp, #16]
 800c040:	2304      	movs	r3, #4
 800c042:	9303      	str	r3, [sp, #12]
 800c044:	2300      	movs	r3, #0
 800c046:	9302      	str	r3, [sp, #8]
 800c048:	2300      	movs	r3, #0
 800c04a:	9301      	str	r3, [sp, #4]
 800c04c:	2328      	movs	r3, #40	; 0x28
 800c04e:	9300      	str	r3, [sp, #0]
 800c050:	2328      	movs	r3, #40	; 0x28
 800c052:	2201      	movs	r2, #1
 800c054:	4909      	ldr	r1, [pc, #36]	; (800c07c <_Z23getFont_verdana_40_4bppv+0x98>)
 800c056:	480a      	ldr	r0, [pc, #40]	; (800c080 <_Z23getFont_verdana_40_4bppv+0x9c>)
 800c058:	f7ff fe68 	bl	800bd2c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800c05c:	4809      	ldr	r0, [pc, #36]	; (800c084 <_Z23getFont_verdana_40_4bppv+0xa0>)
 800c05e:	f017 fac3 	bl	80235e8 <atexit>
 800c062:	4803      	ldr	r0, [pc, #12]	; (800c070 <_Z23getFont_verdana_40_4bppv+0x8c>)
 800c064:	f017 fa81 	bl	802356a <__cxa_guard_release>
    return verdana_40_4bpp;
 800c068:	4b05      	ldr	r3, [pc, #20]	; (800c080 <_Z23getFont_verdana_40_4bppv+0x9c>)
}
 800c06a:	4618      	mov	r0, r3
 800c06c:	46bd      	mov	sp, r7
 800c06e:	bd80      	pop	{r7, pc}
 800c070:	2001e174 	.word	0x2001e174
 800c074:	0802800c 	.word	0x0802800c
 800c078:	08028018 	.word	0x08028018
 800c07c:	90177198 	.word	0x90177198
 800c080:	2001e148 	.word	0x2001e148
 800c084:	0800bfd5 	.word	0x0800bfd5

0800c088 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800c088:	b480      	push	{r7}
 800c08a:	b083      	sub	sp, #12
 800c08c:	af00      	add	r7, sp, #0
 800c08e:	6078      	str	r0, [r7, #4]
 800c090:	6039      	str	r1, [r7, #0]
 800c092:	683b      	ldr	r3, [r7, #0]
 800c094:	4618      	mov	r0, r3
 800c096:	370c      	adds	r7, #12
 800c098:	46bd      	mov	sp, r7
 800c09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c09e:	4770      	bx	lr

0800c0a0 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800c0a0:	b480      	push	{r7}
 800c0a2:	b083      	sub	sp, #12
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	6078      	str	r0, [r7, #4]
 800c0a8:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800c0aa:	bf00      	nop
 800c0ac:	370c      	adds	r7, #12
 800c0ae:	46bd      	mov	sp, r7
 800c0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b4:	4770      	bx	lr

0800c0b6 <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800c0b6:	b480      	push	{r7}
 800c0b8:	b083      	sub	sp, #12
 800c0ba:	af00      	add	r7, sp, #0
 800c0bc:	6078      	str	r0, [r7, #4]
 800c0be:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800c0c0:	bf00      	nop
 800c0c2:	370c      	adds	r7, #12
 800c0c4:	46bd      	mov	sp, r7
 800c0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ca:	4770      	bx	lr

0800c0cc <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800c0cc:	b480      	push	{r7}
 800c0ce:	b083      	sub	sp, #12
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	6078      	str	r0, [r7, #4]
 800c0d4:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800c0d6:	bf00      	nop
 800c0d8:	370c      	adds	r7, #12
 800c0da:	46bd      	mov	sp, r7
 800c0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e0:	4770      	bx	lr

0800c0e2 <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 800c0e2:	b480      	push	{r7}
 800c0e4:	b083      	sub	sp, #12
 800c0e6:	af00      	add	r7, sp, #0
 800c0e8:	6078      	str	r0, [r7, #4]
 800c0ea:	460b      	mov	r3, r1
 800c0ec:	70fb      	strb	r3, [r7, #3]
    {
        (void)c; // Unused variable
    }
 800c0ee:	bf00      	nop
 800c0f0:	370c      	adds	r7, #12
 800c0f2:	46bd      	mov	sp, r7
 800c0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f8:	4770      	bx	lr

0800c0fa <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 800c0fa:	b480      	push	{r7}
 800c0fc:	b083      	sub	sp, #12
 800c0fe:	af00      	add	r7, sp, #0
 800c100:	6078      	str	r0, [r7, #4]
    {
    }
 800c102:	bf00      	nop
 800c104:	370c      	adds	r7, #12
 800c106:	46bd      	mov	sp, r7
 800c108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c10c:	4770      	bx	lr

0800c10e <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 800c10e:	b480      	push	{r7}
 800c110:	b083      	sub	sp, #12
 800c112:	af00      	add	r7, sp, #0
 800c114:	6078      	str	r0, [r7, #4]
    {
    }
 800c116:	bf00      	nop
 800c118:	370c      	adds	r7, #12
 800c11a:	46bd      	mov	sp, r7
 800c11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c120:	4770      	bx	lr
	...

0800c124 <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 800c124:	b480      	push	{r7}
 800c126:	b083      	sub	sp, #12
 800c128:	af00      	add	r7, sp, #0
 800c12a:	6078      	str	r0, [r7, #4]
    {
 800c12c:	4a04      	ldr	r2, [pc, #16]	; (800c140 <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	601a      	str	r2, [r3, #0]
    }
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	4618      	mov	r0, r3
 800c136:	370c      	adds	r7, #12
 800c138:	46bd      	mov	sp, r7
 800c13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c13e:	4770      	bx	lr
 800c140:	08026b80 	.word	0x08026b80

0800c144 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 800c144:	b580      	push	{r7, lr}
 800c146:	b082      	sub	sp, #8
 800c148:	af00      	add	r7, sp, #0
 800c14a:	6078      	str	r0, [r7, #4]
    }
 800c14c:	6878      	ldr	r0, [r7, #4]
 800c14e:	f7ff ffe9 	bl	800c124 <_ZN8touchgfx15UIEventListenerD1Ev>
 800c152:	2104      	movs	r1, #4
 800c154:	6878      	ldr	r0, [r7, #4]
 800c156:	f017 f9fa 	bl	802354e <_ZdlPvj>
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	4618      	mov	r0, r3
 800c15e:	3708      	adds	r7, #8
 800c160:	46bd      	mov	sp, r7
 800c162:	bd80      	pop	{r7, pc}

0800c164 <_ZN8touchgfx11Application19changeToStartScreenEv>:
     * @note The application will not make a complete restart - if
     *       your Model contains data, this will not be reset, unless
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
 800c164:	b480      	push	{r7}
 800c166:	b083      	sub	sp, #12
 800c168:	af00      	add	r7, sp, #0
 800c16a:	6078      	str	r0, [r7, #4]
    {
    }
 800c16c:	bf00      	nop
 800c16e:	370c      	adds	r7, #12
 800c170:	46bd      	mov	sp, r7
 800c172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c176:	4770      	bx	lr

0800c178 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 800c178:	b480      	push	{r7}
 800c17a:	b083      	sub	sp, #12
 800c17c:	af00      	add	r7, sp, #0
 800c17e:	6078      	str	r0, [r7, #4]
 800c180:	460b      	mov	r3, r1
 800c182:	70fb      	strb	r3, [r7, #3]
    {
        (void)screenId; // Unused variable
    }
 800c184:	bf00      	nop
 800c186:	370c      	adds	r7, #12
 800c188:	46bd      	mov	sp, r7
 800c18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c18e:	4770      	bx	lr

0800c190 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 800c190:	b480      	push	{r7}
 800c192:	b083      	sub	sp, #12
 800c194:	af00      	add	r7, sp, #0
 800c196:	6078      	str	r0, [r7, #4]
 800c198:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	683a      	ldr	r2, [r7, #0]
 800c19e:	f503 7398 	add.w	r3, r3, #304	; 0x130
 800c1a2:	6810      	ldr	r0, [r2, #0]
 800c1a4:	6851      	ldr	r1, [r2, #4]
 800c1a6:	c303      	stmia	r3!, {r0, r1}
    }
 800c1a8:	bf00      	nop
 800c1aa:	370c      	adds	r7, #12
 800c1ac:	46bd      	mov	sp, r7
 800c1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b2:	4770      	bx	lr

0800c1b4 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
        timerWidgets.add(w);
    }

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
 800c1b4:	b580      	push	{r7, lr}
 800c1b6:	b082      	sub	sp, #8
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	6078      	str	r0, [r7, #4]
    {
        timerWidgets.clear();
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	3304      	adds	r3, #4
 800c1c0:	4618      	mov	r0, r3
 800c1c2:	f008 ffcc 	bl	801515e <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    }
 800c1c6:	bf00      	nop
 800c1c8:	3708      	adds	r7, #8
 800c1ca:	46bd      	mov	sp, r7
 800c1cc:	bd80      	pop	{r7, pc}
	...

0800c1d0 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 800c1d0:	b480      	push	{r7}
 800c1d2:	b083      	sub	sp, #12
 800c1d4:	af00      	add	r7, sp, #0
 800c1d6:	6078      	str	r0, [r7, #4]
    {
 800c1d8:	4a04      	ldr	r2, [pc, #16]	; (800c1ec <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	601a      	str	r2, [r3, #0]
    }
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	4618      	mov	r0, r3
 800c1e2:	370c      	adds	r7, #12
 800c1e4:	46bd      	mov	sp, r7
 800c1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ea:	4770      	bx	lr
 800c1ec:	08026b68 	.word	0x08026b68

0800c1f0 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 800c1f0:	b580      	push	{r7, lr}
 800c1f2:	b082      	sub	sp, #8
 800c1f4:	af00      	add	r7, sp, #0
 800c1f6:	6078      	str	r0, [r7, #4]
    }
 800c1f8:	6878      	ldr	r0, [r7, #4]
 800c1fa:	f7ff ffe9 	bl	800c1d0 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800c1fe:	2104      	movs	r1, #4
 800c200:	6878      	ldr	r0, [r7, #4]
 800c202:	f017 f9a4 	bl	802354e <_ZdlPvj>
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	4618      	mov	r0, r3
 800c20a:	3708      	adds	r7, #8
 800c20c:	46bd      	mov	sp, r7
 800c20e:	bd80      	pop	{r7, pc}

0800c210 <_ZN8touchgfx3HAL11getInstanceEv>:
    /**
     * Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 800c210:	b480      	push	{r7}
 800c212:	af00      	add	r7, sp, #0
    {
        return instance;
 800c214:	4b03      	ldr	r3, [pc, #12]	; (800c224 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 800c216:	681b      	ldr	r3, [r3, #0]
    }
 800c218:	4618      	mov	r0, r3
 800c21a:	46bd      	mov	sp, r7
 800c21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c220:	4770      	bx	lr
 800c222:	bf00      	nop
 800c224:	200243dc 	.word	0x200243dc

0800c228 <_ZN8touchgfx3HAL3lcdEv>:
    /**
     * Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 800c228:	b480      	push	{r7}
 800c22a:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 800c22c:	4b0b      	ldr	r3, [pc, #44]	; (800c25c <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 800c234:	2b00      	cmp	r3, #0
 800c236:	d008      	beq.n	800c24a <_ZN8touchgfx3HAL3lcdEv+0x22>
 800c238:	4b08      	ldr	r3, [pc, #32]	; (800c25c <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d003      	beq.n	800c24a <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 800c242:	4b06      	ldr	r3, [pc, #24]	; (800c25c <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c248:	e002      	b.n	800c250 <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        return instance->lcdRef;
 800c24a:	4b04      	ldr	r3, [pc, #16]	; (800c25c <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	689b      	ldr	r3, [r3, #8]
    }
 800c250:	4618      	mov	r0, r3
 800c252:	46bd      	mov	sp, r7
 800c254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c258:	4770      	bx	lr
 800c25a:	bf00      	nop
 800c25c:	200243dc 	.word	0x200243dc

0800c260 <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 800c260:	b480      	push	{r7}
 800c262:	b083      	sub	sp, #12
 800c264:	af00      	add	r7, sp, #0
 800c266:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 800c268:	4a07      	ldr	r2, [pc, #28]	; (800c288 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	601a      	str	r2, [r3, #0]
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	2200      	movs	r2, #0
 800c272:	605a      	str	r2, [r3, #4]
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	2200      	movs	r2, #0
 800c278:	721a      	strb	r2, [r3, #8]
    {
    }
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	4618      	mov	r0, r3
 800c27e:	370c      	adds	r7, #12
 800c280:	46bd      	mov	sp, r7
 800c282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c286:	4770      	bx	lr
 800c288:	08026b44 	.word	0x08026b44

0800c28c <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 800c28c:	b480      	push	{r7}
 800c28e:	b083      	sub	sp, #12
 800c290:	af00      	add	r7, sp, #0
 800c292:	6078      	str	r0, [r7, #4]
    {
 800c294:	4a04      	ldr	r2, [pc, #16]	; (800c2a8 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	601a      	str	r2, [r3, #0]
    }
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	4618      	mov	r0, r3
 800c29e:	370c      	adds	r7, #12
 800c2a0:	46bd      	mov	sp, r7
 800c2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a6:	4770      	bx	lr
 800c2a8:	08026b44 	.word	0x08026b44

0800c2ac <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 800c2ac:	b580      	push	{r7, lr}
 800c2ae:	b082      	sub	sp, #8
 800c2b0:	af00      	add	r7, sp, #0
 800c2b2:	6078      	str	r0, [r7, #4]
    }
 800c2b4:	6878      	ldr	r0, [r7, #4]
 800c2b6:	f7ff ffe9 	bl	800c28c <_ZN8touchgfx10TransitionD1Ev>
 800c2ba:	210c      	movs	r1, #12
 800c2bc:	6878      	ldr	r0, [r7, #4]
 800c2be:	f017 f946 	bl	802354e <_ZdlPvj>
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	4618      	mov	r0, r3
 800c2c6:	3708      	adds	r7, #8
 800c2c8:	46bd      	mov	sp, r7
 800c2ca:	bd80      	pop	{r7, pc}

0800c2cc <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 800c2cc:	b480      	push	{r7}
 800c2ce:	b083      	sub	sp, #12
 800c2d0:	af00      	add	r7, sp, #0
 800c2d2:	6078      	str	r0, [r7, #4]
    {
    }
 800c2d4:	bf00      	nop
 800c2d6:	370c      	adds	r7, #12
 800c2d8:	46bd      	mov	sp, r7
 800c2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2de:	4770      	bx	lr

0800c2e0 <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 800c2e0:	b480      	push	{r7}
 800c2e2:	b083      	sub	sp, #12
 800c2e4:	af00      	add	r7, sp, #0
 800c2e6:	6078      	str	r0, [r7, #4]
    {
    }
 800c2e8:	bf00      	nop
 800c2ea:	370c      	adds	r7, #12
 800c2ec:	46bd      	mov	sp, r7
 800c2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f2:	4770      	bx	lr

0800c2f4 <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 800c2f4:	b480      	push	{r7}
 800c2f6:	b083      	sub	sp, #12
 800c2f8:	af00      	add	r7, sp, #0
 800c2fa:	6078      	str	r0, [r7, #4]
    {
    }
 800c2fc:	bf00      	nop
 800c2fe:	370c      	adds	r7, #12
 800c300:	46bd      	mov	sp, r7
 800c302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c306:	4770      	bx	lr

0800c308 <_ZN8touchgfx10Transition10invalidateEv>:
    /**
     * Invalidates the screen when starting the Transition. Default is
     * to invalidate the whole screen. Subclasses can do partial
     * invalidation.
     */
    virtual void invalidate()
 800c308:	b580      	push	{r7, lr}
 800c30a:	b082      	sub	sp, #8
 800c30c:	af00      	add	r7, sp, #0
 800c30e:	6078      	str	r0, [r7, #4]
    {
        Application::getInstance()->invalidate();
 800c310:	f008 ff00 	bl	8015114 <_ZN8touchgfx11Application11getInstanceEv>
 800c314:	4603      	mov	r3, r0
 800c316:	4618      	mov	r0, r3
 800c318:	f009 fb46 	bl	80159a8 <_ZN8touchgfx11Application10invalidateEv>
    }
 800c31c:	bf00      	nop
 800c31e:	3708      	adds	r7, #8
 800c320:	46bd      	mov	sp, r7
 800c322:	bd80      	pop	{r7, pc}

0800c324 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 800c324:	b480      	push	{r7}
 800c326:	b083      	sub	sp, #12
 800c328:	af00      	add	r7, sp, #0
 800c32a:	6078      	str	r0, [r7, #4]
 800c32c:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	683a      	ldr	r2, [r7, #0]
 800c332:	605a      	str	r2, [r3, #4]
    }
 800c334:	bf00      	nop
 800c336:	370c      	adds	r7, #12
 800c338:	46bd      	mov	sp, r7
 800c33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c33e:	4770      	bx	lr

0800c340 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 800c340:	b580      	push	{r7, lr}
 800c342:	b082      	sub	sp, #8
 800c344:	af00      	add	r7, sp, #0
 800c346:	6078      	str	r0, [r7, #4]
 800c348:	4a05      	ldr	r2, [pc, #20]	; (800c360 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	601a      	str	r2, [r3, #0]
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	4618      	mov	r0, r3
 800c352:	f7ff fee7 	bl	800c124 <_ZN8touchgfx15UIEventListenerD1Ev>
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	4618      	mov	r0, r3
 800c35a:	3708      	adds	r7, #8
 800c35c:	46bd      	mov	sp, r7
 800c35e:	bd80      	pop	{r7, pc}
 800c360:	08027b28 	.word	0x08027b28

0800c364 <_ZN8touchgfx11ApplicationD0Ev>:
 800c364:	b580      	push	{r7, lr}
 800c366:	b082      	sub	sp, #8
 800c368:	af00      	add	r7, sp, #0
 800c36a:	6078      	str	r0, [r7, #4]
 800c36c:	6878      	ldr	r0, [r7, #4]
 800c36e:	f7ff ffe7 	bl	800c340 <_ZN8touchgfx11ApplicationD1Ev>
 800c372:	f44f 719e 	mov.w	r1, #316	; 0x13c
 800c376:	6878      	ldr	r0, [r7, #4]
 800c378:	f017 f8e9 	bl	802354e <_ZdlPvj>
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	4618      	mov	r0, r3
 800c380:	3708      	adds	r7, #8
 800c382:	46bd      	mov	sp, r7
 800c384:	bd80      	pop	{r7, pc}
	...

0800c388 <_ZN8touchgfx14MVPApplicationC1Ev>:
 */
class MVPApplication : public Application
{
public:
    /** Initializes a new instance of the MVPApplication class. */
    MVPApplication()
 800c388:	b580      	push	{r7, lr}
 800c38a:	b082      	sub	sp, #8
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	6078      	str	r0, [r7, #4]
        : currentPresenter(0),
          pendingScreenTransitionCallback(0)
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	4618      	mov	r0, r3
 800c394:	f008 ff84 	bl	80152a0 <_ZN8touchgfx11ApplicationC1Ev>
 800c398:	4a09      	ldr	r2, [pc, #36]	; (800c3c0 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	601a      	str	r2, [r3, #0]
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	2200      	movs	r2, #0
 800c3a2:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	2200      	movs	r2, #0
 800c3aa:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    {
        instance = this;
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	4a04      	ldr	r2, [pc, #16]	; (800c3c4 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 800c3b2:	6013      	str	r3, [r2, #0]
    }
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	3708      	adds	r7, #8
 800c3ba:	46bd      	mov	sp, r7
 800c3bc:	bd80      	pop	{r7, pc}
 800c3be:	bf00      	nop
 800c3c0:	08026af8 	.word	0x08026af8
 800c3c4:	20024428 	.word	0x20024428

0800c3c8 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 800c3c8:	b580      	push	{r7, lr}
 800c3ca:	b082      	sub	sp, #8
 800c3cc:	af00      	add	r7, sp, #0
 800c3ce:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 800c3d0:	6878      	ldr	r0, [r7, #4]
 800c3d2:	f000 f804 	bl	800c3de <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 800c3d6:	bf00      	nop
 800c3d8:	3708      	adds	r7, #8
 800c3da:	46bd      	mov	sp, r7
 800c3dc:	bd80      	pop	{r7, pc}

0800c3de <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 800c3de:	b580      	push	{r7, lr}
 800c3e0:	b082      	sub	sp, #8
 800c3e2:	af00      	add	r7, sp, #0
 800c3e4:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d00f      	beq.n	800c410 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	330c      	adds	r3, #12
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	4610      	mov	r0, r2
 800c404:	4798      	blx	r3
 800c406:	4603      	mov	r3, r0
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d001      	beq.n	800c410 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800c40c:	2301      	movs	r3, #1
 800c40e:	e000      	b.n	800c412 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 800c410:	2300      	movs	r3, #0
 800c412:	2b00      	cmp	r3, #0
 800c414:	d00e      	beq.n	800c434 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	3308      	adds	r3, #8
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	4610      	mov	r0, r2
 800c42a:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	2200      	movs	r2, #0
 800c430:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
        }
    }
 800c434:	bf00      	nop
 800c436:	3708      	adds	r7, #8
 800c438:	46bd      	mov	sp, r7
 800c43a:	bd80      	pop	{r7, pc}

0800c43c <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 800c43c:	b480      	push	{r7}
 800c43e:	b083      	sub	sp, #12
 800c440:	af00      	add	r7, sp, #0
 800c442:	6078      	str	r0, [r7, #4]
 800c444:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	683a      	ldr	r2, [r7, #0]
 800c44a:	601a      	str	r2, [r3, #0]
    }
 800c44c:	bf00      	nop
 800c44e:	370c      	adds	r7, #12
 800c450:	46bd      	mov	sp, r7
 800c452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c456:	4770      	bx	lr

0800c458 <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 800c458:	b580      	push	{r7, lr}
 800c45a:	b082      	sub	sp, #8
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	6078      	str	r0, [r7, #4]
 800c460:	4a05      	ldr	r2, [pc, #20]	; (800c478 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	601a      	str	r2, [r3, #0]
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	4618      	mov	r0, r3
 800c46a:	f7ff ff69 	bl	800c340 <_ZN8touchgfx11ApplicationD1Ev>
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	4618      	mov	r0, r3
 800c472:	3708      	adds	r7, #8
 800c474:	46bd      	mov	sp, r7
 800c476:	bd80      	pop	{r7, pc}
 800c478:	08026af8 	.word	0x08026af8

0800c47c <_ZN8touchgfx14MVPApplicationD0Ev>:
 800c47c:	b580      	push	{r7, lr}
 800c47e:	b082      	sub	sp, #8
 800c480:	af00      	add	r7, sp, #0
 800c482:	6078      	str	r0, [r7, #4]
 800c484:	6878      	ldr	r0, [r7, #4]
 800c486:	f7ff ffe7 	bl	800c458 <_ZN8touchgfx14MVPApplicationD1Ev>
 800c48a:	f44f 71a2 	mov.w	r1, #324	; 0x144
 800c48e:	6878      	ldr	r0, [r7, #4]
 800c490:	f017 f85d 	bl	802354e <_ZdlPvj>
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	4618      	mov	r0, r3
 800c498:	3708      	adds	r7, #8
 800c49a:	46bd      	mov	sp, r7
 800c49c:	bd80      	pop	{r7, pc}
	...

0800c4a0 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 800c4a0:	b580      	push	{r7, lr}
 800c4a2:	b082      	sub	sp, #8
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	6078      	str	r0, [r7, #4]
 800c4a8:	4a08      	ldr	r2, [pc, #32]	; (800c4cc <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	601a      	str	r2, [r3, #0]
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800c4b4:	4618      	mov	r0, r3
 800c4b6:	f000 fac5 	bl	800ca44 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	4618      	mov	r0, r3
 800c4be:	f7ff ffcb 	bl	800c458 <_ZN8touchgfx14MVPApplicationD1Ev>
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	4618      	mov	r0, r3
 800c4c6:	3708      	adds	r7, #8
 800c4c8:	46bd      	mov	sp, r7
 800c4ca:	bd80      	pop	{r7, pc}
 800c4cc:	08026a94 	.word	0x08026a94

0800c4d0 <_ZN23FrontendApplicationBaseD0Ev>:
 800c4d0:	b580      	push	{r7, lr}
 800c4d2:	b082      	sub	sp, #8
 800c4d4:	af00      	add	r7, sp, #0
 800c4d6:	6078      	str	r0, [r7, #4]
 800c4d8:	6878      	ldr	r0, [r7, #4]
 800c4da:	f7ff ffe1 	bl	800c4a0 <_ZN23FrontendApplicationBaseD1Ev>
 800c4de:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 800c4e2:	6878      	ldr	r0, [r7, #4]
 800c4e4:	f017 f833 	bl	802354e <_ZdlPvj>
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	3708      	adds	r7, #8
 800c4ee:	46bd      	mov	sp, r7
 800c4f0:	bd80      	pop	{r7, pc}

0800c4f2 <_ZN23FrontendApplicationBase19changeToStartScreenEv>:

    virtual void changeToStartScreen()
 800c4f2:	b580      	push	{r7, lr}
 800c4f4:	b082      	sub	sp, #8
 800c4f6:	af00      	add	r7, sp, #0
 800c4f8:	6078      	str	r0, [r7, #4]
    {
        gotoscreenScreenNoTransition();
 800c4fa:	6878      	ldr	r0, [r7, #4]
 800c4fc:	f000 f87a 	bl	800c5f4 <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv>
    }
 800c500:	bf00      	nop
 800c502:	3708      	adds	r7, #8
 800c504:	46bd      	mov	sp, r7
 800c506:	bd80      	pop	{r7, pc}

0800c508 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 800c508:	b480      	push	{r7}
 800c50a:	b083      	sub	sp, #12
 800c50c:	af00      	add	r7, sp, #0
 800c50e:	6078      	str	r0, [r7, #4]
    {
        done = true;
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	2201      	movs	r2, #1
 800c514:	721a      	strb	r2, [r3, #8]
    }
 800c516:	bf00      	nop
 800c518:	370c      	adds	r7, #12
 800c51a:	46bd      	mov	sp, r7
 800c51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c520:	4770      	bx	lr

0800c522 <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 800c522:	b480      	push	{r7}
 800c524:	b083      	sub	sp, #12
 800c526:	af00      	add	r7, sp, #0
 800c528:	6078      	str	r0, [r7, #4]
 800c52a:	6039      	str	r1, [r7, #0]
    {
        model = m;
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	683a      	ldr	r2, [r7, #0]
 800c530:	605a      	str	r2, [r3, #4]
    }
 800c532:	bf00      	nop
 800c534:	370c      	adds	r7, #12
 800c536:	46bd      	mov	sp, r7
 800c538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c53c:	4770      	bx	lr
	...

0800c540 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/screen_screen/screenView.hpp>
#include <gui/screen_screen/screenPresenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 800c540:	b580      	push	{r7, lr}
 800c542:	b084      	sub	sp, #16
 800c544:	af00      	add	r7, sp, #0
 800c546:	60f8      	str	r0, [r7, #12]
 800c548:	60b9      	str	r1, [r7, #8]
 800c54a:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	4618      	mov	r0, r3
 800c550:	f7ff ff1a 	bl	800c388 <_ZN8touchgfx14MVPApplicationC1Ev>
 800c554:	4a12      	ldr	r2, [pc, #72]	; (800c5a0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x60>)
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	601a      	str	r2, [r3, #0]
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800c560:	4618      	mov	r0, r3
 800c562:	f000 f89d 	bl	800c6a0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	687a      	ldr	r2, [r7, #4]
 800c56a:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	68ba      	ldr	r2, [r7, #8]
 800c572:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 800c576:	f7ff fe4b 	bl	800c210 <_ZN8touchgfx3HAL11getInstanceEv>
 800c57a:	4603      	mov	r3, r0
 800c57c:	681a      	ldr	r2, [r3, #0]
 800c57e:	3208      	adds	r2, #8
 800c580:	6812      	ldr	r2, [r2, #0]
 800c582:	2100      	movs	r1, #0
 800c584:	4618      	mov	r0, r3
 800c586:	4790      	blx	r2
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 800c588:	f7ff fe4e 	bl	800c228 <_ZN8touchgfx3HAL3lcdEv>
 800c58c:	4603      	mov	r3, r0
 800c58e:	4618      	mov	r0, r3
 800c590:	f010 f8d9 	bl	801c746 <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
}
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	4618      	mov	r0, r3
 800c598:	3710      	adds	r7, #16
 800c59a:	46bd      	mov	sp, r7
 800c59c:	bd80      	pop	{r7, pc}
 800c59e:	bf00      	nop
 800c5a0:	08026a94 	.word	0x08026a94

0800c5a4 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 800c5a4:	b480      	push	{r7}
 800c5a6:	b083      	sub	sp, #12
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	6078      	str	r0, [r7, #4]
 800c5ac:	6039      	str	r1, [r7, #0]
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	4618      	mov	r0, r3
 800c5b2:	370c      	adds	r7, #12
 800c5b4:	46bd      	mov	sp, r7
 800c5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ba:	4770      	bx	lr

0800c5bc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800c5bc:	b580      	push	{r7, lr}
 800c5be:	b082      	sub	sp, #8
 800c5c0:	af00      	add	r7, sp, #0
 800c5c2:	6078      	str	r0, [r7, #4]
 800c5c4:	6039      	str	r1, [r7, #0]
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	683a      	ldr	r2, [r7, #0]
 800c5ca:	4611      	mov	r1, r2
 800c5cc:	4618      	mov	r0, r3
 800c5ce:	f7ff ffe9 	bl	800c5a4 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 800c5d2:	683b      	ldr	r3, [r7, #0]
 800c5d4:	685a      	ldr	r2, [r3, #4]
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	605a      	str	r2, [r3, #4]
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	683a      	ldr	r2, [r7, #0]
 800c5de:	3308      	adds	r3, #8
 800c5e0:	3208      	adds	r2, #8
 800c5e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c5e6:	e883 0003 	stmia.w	r3, {r0, r1}
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	3708      	adds	r7, #8
 800c5f0:	46bd      	mov	sp, r7
 800c5f2:	bd80      	pop	{r7, pc}

0800c5f4 <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv>:
 */

// screen

void FrontendApplicationBase::gotoscreenScreenNoTransition()
{
 800c5f4:	b590      	push	{r4, r7, lr}
 800c5f6:	b089      	sub	sp, #36	; 0x24
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoscreenScreenNoTransitionImpl);
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	f503 74a2 	add.w	r4, r3, #324	; 0x144
 800c602:	4b10      	ldr	r3, [pc, #64]	; (800c644 <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv+0x50>)
 800c604:	61bb      	str	r3, [r7, #24]
 800c606:	2300      	movs	r3, #0
 800c608:	61fb      	str	r3, [r7, #28]
 800c60a:	f107 0008 	add.w	r0, r7, #8
 800c60e:	f107 0318 	add.w	r3, r7, #24
 800c612:	cb0c      	ldmia	r3, {r2, r3}
 800c614:	6879      	ldr	r1, [r7, #4]
 800c616:	f000 f85f 	bl	800c6d8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800c61a:	f107 0308 	add.w	r3, r7, #8
 800c61e:	4619      	mov	r1, r3
 800c620:	4620      	mov	r0, r4
 800c622:	f7ff ffcb 	bl	800c5bc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800c626:	f107 0308 	add.w	r3, r7, #8
 800c62a:	4618      	mov	r0, r3
 800c62c:	f000 fa0a 	bl	800ca44 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	f503 72a2 	add.w	r2, r3, #324	; 0x144
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
}
 800c63c:	bf00      	nop
 800c63e:	3724      	adds	r7, #36	; 0x24
 800c640:	46bd      	mov	sp, r7
 800c642:	bd90      	pop	{r4, r7, pc}
 800c644:	0800c649 	.word	0x0800c649

0800c648 <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoscreenScreenNoTransitionImpl()
{
 800c648:	b580      	push	{r7, lr}
 800c64a:	b084      	sub	sp, #16
 800c64c:	af02      	add	r7, sp, #8
 800c64e:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<screenView, screenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	f503 719e 	add.w	r1, r3, #316	; 0x13c
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800c65c:	461a      	mov	r2, r3
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800c664:	9300      	str	r3, [sp, #0]
 800c666:	4b04      	ldr	r3, [pc, #16]	; (800c678 <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv+0x30>)
 800c668:	4804      	ldr	r0, [pc, #16]	; (800c67c <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv+0x34>)
 800c66a:	f000 f867 	bl	800c73c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800c66e:	bf00      	nop
 800c670:	3708      	adds	r7, #8
 800c672:	46bd      	mov	sp, r7
 800c674:	bd80      	pop	{r7, pc}
 800c676:	bf00      	nop
 800c678:	2002441c 	.word	0x2002441c
 800c67c:	20024418 	.word	0x20024418

0800c680 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 800c680:	b480      	push	{r7}
 800c682:	b083      	sub	sp, #12
 800c684:	af00      	add	r7, sp, #0
 800c686:	6078      	str	r0, [r7, #4]
 800c688:	4a04      	ldr	r2, [pc, #16]	; (800c69c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	601a      	str	r2, [r3, #0]
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	4618      	mov	r0, r3
 800c692:	370c      	adds	r7, #12
 800c694:	46bd      	mov	sp, r7
 800c696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c69a:	4770      	bx	lr
 800c69c:	08026b68 	.word	0x08026b68

0800c6a0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
{
    /** Initializes a new instance of the Callback class. */
    Callback()
 800c6a0:	b580      	push	{r7, lr}
 800c6a2:	b082      	sub	sp, #8
 800c6a4:	af00      	add	r7, sp, #0
 800c6a6:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun(0)
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	4618      	mov	r0, r3
 800c6ac:	f7ff ffe8 	bl	800c680 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800c6b0:	4a08      	ldr	r2, [pc, #32]	; (800c6d4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	601a      	str	r2, [r3, #0]
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	2200      	movs	r2, #0
 800c6ba:	605a      	str	r2, [r3, #4]
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	2200      	movs	r2, #0
 800c6c0:	609a      	str	r2, [r3, #8]
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	2200      	movs	r2, #0
 800c6c6:	60da      	str	r2, [r3, #12]
    {
    }
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	4618      	mov	r0, r3
 800c6cc:	3708      	adds	r7, #8
 800c6ce:	46bd      	mov	sp, r7
 800c6d0:	bd80      	pop	{r7, pc}
 800c6d2:	bf00      	nop
 800c6d4:	08026ae0 	.word	0x08026ae0

0800c6d8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pObject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function takes zero
     *                       arguments.
     */
    Callback(dest_type* pObject, void (dest_type::*pmemfun_0)())
 800c6d8:	b580      	push	{r7, lr}
 800c6da:	b084      	sub	sp, #16
 800c6dc:	af00      	add	r7, sp, #0
 800c6de:	60f8      	str	r0, [r7, #12]
 800c6e0:	60b9      	str	r1, [r7, #8]
 800c6e2:	4639      	mov	r1, r7
 800c6e4:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_0)
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	4618      	mov	r0, r3
 800c6ec:	f7ff ffc8 	bl	800c680 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800c6f0:	4a08      	ldr	r2, [pc, #32]	; (800c714 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	601a      	str	r2, [r3, #0]
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	68ba      	ldr	r2, [r7, #8]
 800c6fa:	605a      	str	r2, [r3, #4]
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	3308      	adds	r3, #8
 800c700:	463a      	mov	r2, r7
 800c702:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c706:	e883 0003 	stmia.w	r3, {r0, r1}
    {
    }
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	4618      	mov	r0, r3
 800c70e:	3710      	adds	r7, #16
 800c710:	46bd      	mov	sp, r7
 800c712:	bd80      	pop	{r7, pc}
 800c714:	08026ae0 	.word	0x08026ae0

0800c718 <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 800c718:	b580      	push	{r7, lr}
 800c71a:	b082      	sub	sp, #8
 800c71c:	af00      	add	r7, sp, #0
 800c71e:	6078      	str	r0, [r7, #4]
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	4618      	mov	r0, r3
 800c724:	f7ff fd9c 	bl	800c260 <_ZN8touchgfx10TransitionC1Ev>
 800c728:	4a03      	ldr	r2, [pc, #12]	; (800c738 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	601a      	str	r2, [r3, #0]
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	4618      	mov	r0, r3
 800c732:	3708      	adds	r7, #8
 800c734:	46bd      	mov	sp, r7
 800c736:	bd80      	pop	{r7, pc}
 800c738:	08026a70 	.word	0x08026a70

0800c73c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800c73c:	b590      	push	{r4, r7, lr}
 800c73e:	b08f      	sub	sp, #60	; 0x3c
 800c740:	af00      	add	r7, sp, #0
 800c742:	60f8      	str	r0, [r7, #12]
 800c744:	60b9      	str	r1, [r7, #8]
 800c746:	607a      	str	r2, [r7, #4]
 800c748:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	689a      	ldr	r2, [r3, #8]
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	689b      	ldr	r3, [r3, #8]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	3320      	adds	r3, #32
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	4610      	mov	r0, r2
 800c75a:	4798      	blx	r3
 800c75c:	4603      	mov	r3, r0
 800c75e:	2b97      	cmp	r3, #151	; 0x97
 800c760:	d805      	bhi.n	800c76e <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x32>
 800c762:	4b7e      	ldr	r3, [pc, #504]	; (800c95c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x220>)
 800c764:	4a7e      	ldr	r2, [pc, #504]	; (800c960 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800c766:	21a3      	movs	r1, #163	; 0xa3
 800c768:	487e      	ldr	r0, [pc, #504]	; (800c964 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800c76a:	f016 ff1f 	bl	80235ac <__assert_func>
 800c76e:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	685a      	ldr	r2, [r3, #4]
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	685b      	ldr	r3, [r3, #4]
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	3320      	adds	r3, #32
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	4610      	mov	r0, r2
 800c780:	4798      	blx	r3
 800c782:	4603      	mov	r3, r0
 800c784:	2b0f      	cmp	r3, #15
 800c786:	d805      	bhi.n	800c794 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x58>
 800c788:	4b77      	ldr	r3, [pc, #476]	; (800c968 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800c78a:	4a75      	ldr	r2, [pc, #468]	; (800c960 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800c78c:	21a4      	movs	r1, #164	; 0xa4
 800c78e:	4875      	ldr	r0, [pc, #468]	; (800c964 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800c790:	f016 ff0c 	bl	80235ac <__assert_func>
 800c794:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	68da      	ldr	r2, [r3, #12]
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	68db      	ldr	r3, [r3, #12]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	3320      	adds	r3, #32
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	4610      	mov	r0, r2
 800c7a6:	4798      	blx	r3
 800c7a8:	4603      	mov	r3, r0
 800c7aa:	2b0b      	cmp	r3, #11
 800c7ac:	d805      	bhi.n	800c7ba <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7e>
 800c7ae:	4b6f      	ldr	r3, [pc, #444]	; (800c96c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800c7b0:	4a6b      	ldr	r2, [pc, #428]	; (800c960 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800c7b2:	21a5      	movs	r1, #165	; 0xa5
 800c7b4:	486b      	ldr	r0, [pc, #428]	; (800c964 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800c7b6:	f016 fef9 	bl	80235ac <__assert_func>
 800c7ba:	bf00      	nop
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	62bb      	str	r3, [r7, #40]	; 0x28
 800c7c0:	68bb      	ldr	r3, [r7, #8]
 800c7c2:	627b      	str	r3, [r7, #36]	; 0x24
 800c7c4:	683b      	ldr	r3, [r7, #0]
 800c7c6:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800c7c8:	f008 fca4 	bl	8015114 <_ZN8touchgfx11Application11getInstanceEv>
 800c7cc:	4603      	mov	r3, r0
 800c7ce:	4618      	mov	r0, r3
 800c7d0:	f7ff fcf0 	bl	800c1b4 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800c7d4:	6a3b      	ldr	r3, [r7, #32]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d008      	beq.n	800c7ee <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb2>
        (*currentTrans)->tearDown();
 800c7dc:	6a3b      	ldr	r3, [r7, #32]
 800c7de:	681a      	ldr	r2, [r3, #0]
 800c7e0:	6a3b      	ldr	r3, [r7, #32]
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	330c      	adds	r3, #12
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	4610      	mov	r0, r2
 800c7ec:	4798      	blx	r3
    if (*currentTrans)
 800c7ee:	6a3b      	ldr	r3, [r7, #32]
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d007      	beq.n	800c806 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xca>
        (*currentTrans)->~Transition();
 800c7f6:	6a3b      	ldr	r3, [r7, #32]
 800c7f8:	681a      	ldr	r2, [r3, #0]
 800c7fa:	6a3b      	ldr	r3, [r7, #32]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	4610      	mov	r0, r2
 800c804:	4798      	blx	r3
    if (*currentScreen)
 800c806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d008      	beq.n	800c820 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe4>
        (*currentScreen)->tearDownScreen();
 800c80e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c810:	681a      	ldr	r2, [r3, #0]
 800c812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	3314      	adds	r3, #20
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	4610      	mov	r0, r2
 800c81e:	4798      	blx	r3
    if (*currentPresenter)
 800c820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	2b00      	cmp	r3, #0
 800c826:	d008      	beq.n	800c83a <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xfe>
        (*currentPresenter)->deactivate();
 800c828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c82a:	681a      	ldr	r2, [r3, #0]
 800c82c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	3304      	adds	r3, #4
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	4610      	mov	r0, r2
 800c838:	4798      	blx	r3
    if (*currentScreen)
 800c83a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d007      	beq.n	800c852 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x116>
        (*currentScreen)->~Screen();
 800c842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c844:	681a      	ldr	r2, [r3, #0]
 800c846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	4610      	mov	r0, r2
 800c850:	4798      	blx	r3
    if (*currentPresenter)
 800c852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	2b00      	cmp	r3, #0
 800c858:	d008      	beq.n	800c86c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x130>
        (*currentPresenter)->~Presenter();
 800c85a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c85c:	681a      	ldr	r2, [r3, #0]
 800c85e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	3308      	adds	r3, #8
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	4610      	mov	r0, r2
 800c86a:	4798      	blx	r3
}
 800c86c:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	68db      	ldr	r3, [r3, #12]
 800c872:	2100      	movs	r1, #0
 800c874:	4618      	mov	r0, r3
 800c876:	f000 f87b 	bl	800c970 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 800c87a:	4603      	mov	r3, r0
 800c87c:	4619      	mov	r1, r3
 800c87e:	200c      	movs	r0, #12
 800c880:	f7ff fc02 	bl	800c088 <_ZnwjPv>
 800c884:	4604      	mov	r4, r0
 800c886:	4620      	mov	r0, r4
 800c888:	f7ff ff46 	bl	800c718 <_ZN8touchgfx12NoTransitionC1Ev>
 800c88c:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	689b      	ldr	r3, [r3, #8]
 800c892:	2100      	movs	r1, #0
 800c894:	4618      	mov	r0, r3
 800c896:	f000 f87e 	bl	800c996 <_ZN8touchgfx17AbstractPartition2atI10screenViewEERT_t>
 800c89a:	4603      	mov	r3, r0
 800c89c:	4619      	mov	r1, r3
 800c89e:	2098      	movs	r0, #152	; 0x98
 800c8a0:	f7ff fbf2 	bl	800c088 <_ZnwjPv>
 800c8a4:	4604      	mov	r4, r0
 800c8a6:	4620      	mov	r0, r4
 800c8a8:	f001 f89a 	bl	800d9e0 <_ZN10screenViewC1Ev>
 800c8ac:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	685b      	ldr	r3, [r3, #4]
 800c8b2:	2100      	movs	r1, #0
 800c8b4:	4618      	mov	r0, r3
 800c8b6:	f000 f881 	bl	800c9bc <_ZN8touchgfx17AbstractPartition2atI15screenPresenterEERT_t>
 800c8ba:	4603      	mov	r3, r0
 800c8bc:	4619      	mov	r1, r3
 800c8be:	2010      	movs	r0, #16
 800c8c0:	f7ff fbe2 	bl	800c088 <_ZnwjPv>
 800c8c4:	4604      	mov	r4, r0
 800c8c6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c8c8:	4620      	mov	r0, r4
 800c8ca:	f001 f833 	bl	800d934 <_ZN15screenPresenterC1ER10screenView>
 800c8ce:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 800c8d0:	683b      	ldr	r3, [r7, #0]
 800c8d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c8d4:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800c8d6:	68bb      	ldr	r3, [r7, #8]
 800c8d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c8da:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c8e0:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800c8e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d002      	beq.n	800c8ee <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 800c8e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8ea:	3304      	adds	r3, #4
 800c8ec:	e000      	b.n	800c8f0 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b4>
 800c8ee:	2300      	movs	r3, #0
 800c8f0:	4619      	mov	r1, r3
 800c8f2:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800c8f4:	f7ff fda2 	bl	800c43c <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800c8f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8fa:	3304      	adds	r3, #4
 800c8fc:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800c8fe:	4618      	mov	r0, r3
 800c900:	f7ff fe0f 	bl	800c522 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800c904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c906:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c908:	4618      	mov	r0, r3
 800c90a:	f000 f86a 	bl	800c9e2 <_ZN8touchgfx4ViewI15screenPresenterE4bindERS1_>
 800c90e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c910:	61fb      	str	r3, [r7, #28]
 800c912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c914:	61bb      	str	r3, [r7, #24]
 800c916:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c918:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 800c91a:	69fb      	ldr	r3, [r7, #28]
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	330c      	adds	r3, #12
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	69f8      	ldr	r0, [r7, #28]
 800c924:	4798      	blx	r3
    newPresenter->activate();
 800c926:	69bb      	ldr	r3, [r7, #24]
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	69b8      	ldr	r0, [r7, #24]
 800c92e:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800c930:	6979      	ldr	r1, [r7, #20]
 800c932:	69f8      	ldr	r0, [r7, #28]
 800c934:	f00a f87e 	bl	8016a34 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800c938:	697b      	ldr	r3, [r7, #20]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	3310      	adds	r3, #16
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	6978      	ldr	r0, [r7, #20]
 800c942:	4798      	blx	r3
    newTransition->invalidate();
 800c944:	697b      	ldr	r3, [r7, #20]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	3314      	adds	r3, #20
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	6978      	ldr	r0, [r7, #20]
 800c94e:	4798      	blx	r3
}
 800c950:	bf00      	nop

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 800c952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800c954:	4618      	mov	r0, r3
 800c956:	373c      	adds	r7, #60	; 0x3c
 800c958:	46bd      	mov	sp, r7
 800c95a:	bd90      	pop	{r4, r7, pc}
 800c95c:	0802478c 	.word	0x0802478c
 800c960:	0802481c 	.word	0x0802481c
 800c964:	08024920 	.word	0x08024920
 800c968:	08024964 	.word	0x08024964
 800c96c:	08024a08 	.word	0x08024a08

0800c970 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 800c970:	b580      	push	{r7, lr}
 800c972:	b082      	sub	sp, #8
 800c974:	af00      	add	r7, sp, #0
 800c976:	6078      	str	r0, [r7, #4]
 800c978:	460b      	mov	r3, r1
 800c97a:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	3324      	adds	r3, #36	; 0x24
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	887a      	ldrh	r2, [r7, #2]
 800c986:	4611      	mov	r1, r2
 800c988:	6878      	ldr	r0, [r7, #4]
 800c98a:	4798      	blx	r3
 800c98c:	4603      	mov	r3, r0
    }
 800c98e:	4618      	mov	r0, r3
 800c990:	3708      	adds	r7, #8
 800c992:	46bd      	mov	sp, r7
 800c994:	bd80      	pop	{r7, pc}

0800c996 <_ZN8touchgfx17AbstractPartition2atI10screenViewEERT_t>:
    T& at(const uint16_t index)
 800c996:	b580      	push	{r7, lr}
 800c998:	b082      	sub	sp, #8
 800c99a:	af00      	add	r7, sp, #0
 800c99c:	6078      	str	r0, [r7, #4]
 800c99e:	460b      	mov	r3, r1
 800c9a0:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	3324      	adds	r3, #36	; 0x24
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	887a      	ldrh	r2, [r7, #2]
 800c9ac:	4611      	mov	r1, r2
 800c9ae:	6878      	ldr	r0, [r7, #4]
 800c9b0:	4798      	blx	r3
 800c9b2:	4603      	mov	r3, r0
    }
 800c9b4:	4618      	mov	r0, r3
 800c9b6:	3708      	adds	r7, #8
 800c9b8:	46bd      	mov	sp, r7
 800c9ba:	bd80      	pop	{r7, pc}

0800c9bc <_ZN8touchgfx17AbstractPartition2atI15screenPresenterEERT_t>:
    T& at(const uint16_t index)
 800c9bc:	b580      	push	{r7, lr}
 800c9be:	b082      	sub	sp, #8
 800c9c0:	af00      	add	r7, sp, #0
 800c9c2:	6078      	str	r0, [r7, #4]
 800c9c4:	460b      	mov	r3, r1
 800c9c6:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	3324      	adds	r3, #36	; 0x24
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	887a      	ldrh	r2, [r7, #2]
 800c9d2:	4611      	mov	r1, r2
 800c9d4:	6878      	ldr	r0, [r7, #4]
 800c9d6:	4798      	blx	r3
 800c9d8:	4603      	mov	r3, r0
    }
 800c9da:	4618      	mov	r0, r3
 800c9dc:	3708      	adds	r7, #8
 800c9de:	46bd      	mov	sp, r7
 800c9e0:	bd80      	pop	{r7, pc}

0800c9e2 <_ZN8touchgfx4ViewI15screenPresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This function
     * is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
 800c9e2:	b480      	push	{r7}
 800c9e4:	b083      	sub	sp, #12
 800c9e6:	af00      	add	r7, sp, #0
 800c9e8:	6078      	str	r0, [r7, #4]
 800c9ea:	6039      	str	r1, [r7, #0]
    {
        presenter = &newPresenter;
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	683a      	ldr	r2, [r7, #0]
 800c9f0:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800c9f2:	bf00      	nop
 800c9f4:	370c      	adds	r7, #12
 800c9f6:	46bd      	mov	sp, r7
 800c9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9fc:	4770      	bx	lr
	...

0800ca00 <_ZN8touchgfx12NoTransitionD1Ev>:
 800ca00:	b580      	push	{r7, lr}
 800ca02:	b082      	sub	sp, #8
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	6078      	str	r0, [r7, #4]
 800ca08:	4a05      	ldr	r2, [pc, #20]	; (800ca20 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	601a      	str	r2, [r3, #0]
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	4618      	mov	r0, r3
 800ca12:	f7ff fc3b 	bl	800c28c <_ZN8touchgfx10TransitionD1Ev>
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	4618      	mov	r0, r3
 800ca1a:	3708      	adds	r7, #8
 800ca1c:	46bd      	mov	sp, r7
 800ca1e:	bd80      	pop	{r7, pc}
 800ca20:	08026a70 	.word	0x08026a70

0800ca24 <_ZN8touchgfx12NoTransitionD0Ev>:
 800ca24:	b580      	push	{r7, lr}
 800ca26:	b082      	sub	sp, #8
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	6078      	str	r0, [r7, #4]
 800ca2c:	6878      	ldr	r0, [r7, #4]
 800ca2e:	f7ff ffe7 	bl	800ca00 <_ZN8touchgfx12NoTransitionD1Ev>
 800ca32:	210c      	movs	r1, #12
 800ca34:	6878      	ldr	r0, [r7, #4]
 800ca36:	f016 fd8a 	bl	802354e <_ZdlPvj>
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	4618      	mov	r0, r3
 800ca3e:	3708      	adds	r7, #8
 800ca40:	46bd      	mov	sp, r7
 800ca42:	bd80      	pop	{r7, pc}

0800ca44 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800ca44:	b580      	push	{r7, lr}
 800ca46:	b082      	sub	sp, #8
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	6078      	str	r0, [r7, #4]
 800ca4c:	4a05      	ldr	r2, [pc, #20]	; (800ca64 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	601a      	str	r2, [r3, #0]
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	4618      	mov	r0, r3
 800ca56:	f7ff fbbb 	bl	800c1d0 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	4618      	mov	r0, r3
 800ca5e:	3708      	adds	r7, #8
 800ca60:	46bd      	mov	sp, r7
 800ca62:	bd80      	pop	{r7, pc}
 800ca64:	08026ae0 	.word	0x08026ae0

0800ca68 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 800ca68:	b580      	push	{r7, lr}
 800ca6a:	b082      	sub	sp, #8
 800ca6c:	af00      	add	r7, sp, #0
 800ca6e:	6078      	str	r0, [r7, #4]
 800ca70:	6878      	ldr	r0, [r7, #4]
 800ca72:	f7ff ffe7 	bl	800ca44 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800ca76:	2110      	movs	r1, #16
 800ca78:	6878      	ldr	r0, [r7, #4]
 800ca7a:	f016 fd68 	bl	802354e <_ZdlPvj>
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	4618      	mov	r0, r3
 800ca82:	3708      	adds	r7, #8
 800ca84:	46bd      	mov	sp, r7
 800ca86:	bd80      	pop	{r7, pc}

0800ca88 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 800ca88:	b580      	push	{r7, lr}
 800ca8a:	b082      	sub	sp, #8
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun)();
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	685b      	ldr	r3, [r3, #4]
 800ca94:	687a      	ldr	r2, [r7, #4]
 800ca96:	68d2      	ldr	r2, [r2, #12]
 800ca98:	1052      	asrs	r2, r2, #1
 800ca9a:	1899      	adds	r1, r3, r2
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	68db      	ldr	r3, [r3, #12]
 800caa0:	f003 0301 	and.w	r3, r3, #1
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d102      	bne.n	800caae <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	689b      	ldr	r3, [r3, #8]
 800caac:	e00a      	b.n	800cac4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	685b      	ldr	r3, [r3, #4]
 800cab2:	687a      	ldr	r2, [r7, #4]
 800cab4:	68d2      	ldr	r2, [r2, #12]
 800cab6:	1052      	asrs	r2, r2, #1
 800cab8:	4413      	add	r3, r2
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	687a      	ldr	r2, [r7, #4]
 800cabe:	6892      	ldr	r2, [r2, #8]
 800cac0:	4413      	add	r3, r2
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	4608      	mov	r0, r1
 800cac6:	4798      	blx	r3
    }
 800cac8:	bf00      	nop
 800caca:	3708      	adds	r7, #8
 800cacc:	46bd      	mov	sp, r7
 800cace:	bd80      	pop	{r7, pc}

0800cad0 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 800cad0:	b480      	push	{r7}
 800cad2:	b083      	sub	sp, #12
 800cad4:	af00      	add	r7, sp, #0
 800cad6:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun != 0);
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	685b      	ldr	r3, [r3, #4]
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d010      	beq.n	800cb02 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	689b      	ldr	r3, [r3, #8]
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d107      	bne.n	800caf8 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	68db      	ldr	r3, [r3, #12]
 800caec:	f003 0301 	and.w	r3, r3, #1
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d101      	bne.n	800caf8 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800caf4:	2301      	movs	r3, #1
 800caf6:	e000      	b.n	800cafa <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 800caf8:	2300      	movs	r3, #0
 800cafa:	2b01      	cmp	r3, #1
 800cafc:	d001      	beq.n	800cb02 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800cafe:	2301      	movs	r3, #1
 800cb00:	e000      	b.n	800cb04 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 800cb02:	2300      	movs	r3, #0
    }
 800cb04:	4618      	mov	r0, r3
 800cb06:	370c      	adds	r7, #12
 800cb08:	46bd      	mov	sp, r7
 800cb0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb0e:	4770      	bx	lr

0800cb10 <_ZN8touchgfx9colortypeC1Em>:
     *
     * @param  col The color.
     *
     * @see Color::getColorFromRGB
     */
    colortype(uint32_t col)
 800cb10:	b480      	push	{r7}
 800cb12:	b083      	sub	sp, #12
 800cb14:	af00      	add	r7, sp, #0
 800cb16:	6078      	str	r0, [r7, #4]
 800cb18:	6039      	str	r1, [r7, #0]
        : color(col)
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	683a      	ldr	r2, [r7, #0]
 800cb1e:	601a      	str	r2, [r3, #0]
    {
    }
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	4618      	mov	r0, r3
 800cb24:	370c      	adds	r7, #12
 800cb26:	46bd      	mov	sp, r7
 800cb28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb2c:	4770      	bx	lr

0800cb2e <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 800cb2e:	b480      	push	{r7}
 800cb30:	b083      	sub	sp, #12
 800cb32:	af00      	add	r7, sp, #0
 800cb34:	6078      	str	r0, [r7, #4]
        : x(0), y(0), width(0), height(0)
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	2200      	movs	r2, #0
 800cb3a:	801a      	strh	r2, [r3, #0]
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	2200      	movs	r2, #0
 800cb40:	805a      	strh	r2, [r3, #2]
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	2200      	movs	r2, #0
 800cb46:	809a      	strh	r2, [r3, #4]
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	2200      	movs	r2, #0
 800cb4c:	80da      	strh	r2, [r3, #6]
    {
    }
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	4618      	mov	r0, r3
 800cb52:	370c      	adds	r7, #12
 800cb54:	46bd      	mov	sp, r7
 800cb56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb5a:	4770      	bx	lr

0800cb5c <_ZN8touchgfx6BitmapC1Et>:
     * Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
 800cb5c:	b480      	push	{r7}
 800cb5e:	b083      	sub	sp, #12
 800cb60:	af00      	add	r7, sp, #0
 800cb62:	6078      	str	r0, [r7, #4]
 800cb64:	460b      	mov	r3, r1
 800cb66:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	887a      	ldrh	r2, [r7, #2]
 800cb6c:	801a      	strh	r2, [r3, #0]
    {
    }
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	4618      	mov	r0, r3
 800cb72:	370c      	adds	r7, #12
 800cb74:	46bd      	mov	sp, r7
 800cb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb7a:	4770      	bx	lr

0800cb7c <_ZN8touchgfx8DrawableC1Ev>:
 */
class Drawable
{
public:
    /** Initializes a new instance of the Drawable class. */
    Drawable()
 800cb7c:	b580      	push	{r7, lr}
 800cb7e:	b082      	sub	sp, #8
 800cb80:	af00      	add	r7, sp, #0
 800cb82:	6078      	str	r0, [r7, #4]
          nextSibling(0),
          nextDrawChainElement(0),
          cachedAbsX(0),
          cachedAbsY(0),
          touchable(false),
          visible(true)
 800cb84:	4a14      	ldr	r2, [pc, #80]	; (800cbd8 <_ZN8touchgfx8DrawableC1Ev+0x5c>)
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	601a      	str	r2, [r3, #0]
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	3304      	adds	r3, #4
 800cb8e:	4618      	mov	r0, r3
 800cb90:	f7ff ffcd 	bl	800cb2e <_ZN8touchgfx4RectC1Ev>
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	330c      	adds	r3, #12
 800cb98:	4618      	mov	r0, r3
 800cb9a:	f7ff ffc8 	bl	800cb2e <_ZN8touchgfx4RectC1Ev>
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	2200      	movs	r2, #0
 800cba2:	615a      	str	r2, [r3, #20]
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	2200      	movs	r2, #0
 800cba8:	619a      	str	r2, [r3, #24]
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	2200      	movs	r2, #0
 800cbae:	61da      	str	r2, [r3, #28]
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	2200      	movs	r2, #0
 800cbb4:	841a      	strh	r2, [r3, #32]
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	2200      	movs	r2, #0
 800cbba:	845a      	strh	r2, [r3, #34]	; 0x22
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	2200      	movs	r2, #0
 800cbc0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	2201      	movs	r2, #1
 800cbc8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    {
    }
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	4618      	mov	r0, r3
 800cbd0:	3708      	adds	r7, #8
 800cbd2:	46bd      	mov	sp, r7
 800cbd4:	bd80      	pop	{r7, pc}
 800cbd6:	bf00      	nop
 800cbd8:	08027b74 	.word	0x08027b74

0800cbdc <_ZN8touchgfx8DrawableD1Ev>:

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 800cbdc:	b480      	push	{r7}
 800cbde:	b083      	sub	sp, #12
 800cbe0:	af00      	add	r7, sp, #0
 800cbe2:	6078      	str	r0, [r7, #4]
    {
 800cbe4:	4a04      	ldr	r2, [pc, #16]	; (800cbf8 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	601a      	str	r2, [r3, #0]
    }
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	4618      	mov	r0, r3
 800cbee:	370c      	adds	r7, #12
 800cbf0:	46bd      	mov	sp, r7
 800cbf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbf6:	4770      	bx	lr
 800cbf8:	08027b74 	.word	0x08027b74

0800cbfc <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 800cbfc:	b580      	push	{r7, lr}
 800cbfe:	b082      	sub	sp, #8
 800cc00:	af00      	add	r7, sp, #0
 800cc02:	6078      	str	r0, [r7, #4]
    }
 800cc04:	6878      	ldr	r0, [r7, #4]
 800cc06:	f7ff ffe9 	bl	800cbdc <_ZN8touchgfx8DrawableD1Ev>
 800cc0a:	2128      	movs	r1, #40	; 0x28
 800cc0c:	6878      	ldr	r0, [r7, #4]
 800cc0e:	f016 fc9e 	bl	802354e <_ZdlPvj>
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	4618      	mov	r0, r3
 800cc16:	3708      	adds	r7, #8
 800cc18:	46bd      	mov	sp, r7
 800cc1a:	bd80      	pop	{r7, pc}

0800cc1c <_ZNK8touchgfx8Drawable17invalidateContentEv>:
     * Tell the framework that the contents of the Drawable needs to be redrawn. If the Drawable is
     * invisible, nothing happens. Subclasses of Drawable are encouraged to implement this function
     * and invalidate as little as possible, i.e. the smallest rectangle covering the visual element(s)
     * drawn by the widget.
     */
    virtual void invalidateContent() const
 800cc1c:	b580      	push	{r7, lr}
 800cc1e:	b082      	sub	sp, #8
 800cc20:	af00      	add	r7, sp, #0
 800cc22:	6078      	str	r0, [r7, #4]
    {
        // Consider checking if *this is in the draw chain
        if (visible)
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d005      	beq.n	800cc3a <_ZNK8touchgfx8Drawable17invalidateContentEv+0x1e>
        {
            invalidate();
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	3314      	adds	r3, #20
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	6878      	ldr	r0, [r7, #4]
 800cc38:	4798      	blx	r3
        }
    }
 800cc3a:	bf00      	nop
 800cc3c:	3708      	adds	r7, #8
 800cc3e:	46bd      	mov	sp, r7
 800cc40:	bd80      	pop	{r7, pc}

0800cc42 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * Function for obtaining the first child of this drawable if any.
     *
     * @return A pointer on the first child drawable if any.
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
 800cc42:	b480      	push	{r7}
 800cc44:	b083      	sub	sp, #12
 800cc46:	af00      	add	r7, sp, #0
 800cc48:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800cc4a:	2300      	movs	r3, #0
    }
 800cc4c:	4618      	mov	r0, r3
 800cc4e:	370c      	adds	r7, #12
 800cc50:	46bd      	mov	sp, r7
 800cc52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc56:	4770      	bx	lr

0800cc58 <_ZN8touchgfx8Drawable11setPositionEssss>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     *
     * @see setXY,setWidthHeight,setPosition(const Drawable&)
     */
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 800cc58:	b580      	push	{r7, lr}
 800cc5a:	b084      	sub	sp, #16
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	60f8      	str	r0, [r7, #12]
 800cc60:	4608      	mov	r0, r1
 800cc62:	4611      	mov	r1, r2
 800cc64:	461a      	mov	r2, r3
 800cc66:	4603      	mov	r3, r0
 800cc68:	817b      	strh	r3, [r7, #10]
 800cc6a:	460b      	mov	r3, r1
 800cc6c:	813b      	strh	r3, [r7, #8]
 800cc6e:	4613      	mov	r3, r2
 800cc70:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 800cc72:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800cc76:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800cc7a:	4619      	mov	r1, r3
 800cc7c:	68f8      	ldr	r0, [r7, #12]
 800cc7e:	f000 f82a 	bl	800ccd6 <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 800cc82:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800cc86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cc8a:	4619      	mov	r1, r3
 800cc8c:	68f8      	ldr	r0, [r7, #12]
 800cc8e:	f000 f87e 	bl	800cd8e <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 800cc92:	bf00      	nop
 800cc94:	3710      	adds	r7, #16
 800cc96:	46bd      	mov	sp, r7
 800cc98:	bd80      	pop	{r7, pc}

0800cc9a <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 800cc9a:	b480      	push	{r7}
 800cc9c:	b083      	sub	sp, #12
 800cc9e:	af00      	add	r7, sp, #0
 800cca0:	6078      	str	r0, [r7, #4]
 800cca2:	460b      	mov	r3, r1
 800cca4:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	887a      	ldrh	r2, [r7, #2]
 800ccaa:	809a      	strh	r2, [r3, #4]
    }
 800ccac:	bf00      	nop
 800ccae:	370c      	adds	r7, #12
 800ccb0:	46bd      	mov	sp, r7
 800ccb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb6:	4770      	bx	lr

0800ccb8 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 800ccb8:	b480      	push	{r7}
 800ccba:	b083      	sub	sp, #12
 800ccbc:	af00      	add	r7, sp, #0
 800ccbe:	6078      	str	r0, [r7, #4]
 800ccc0:	460b      	mov	r3, r1
 800ccc2:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	887a      	ldrh	r2, [r7, #2]
 800ccc8:	80da      	strh	r2, [r3, #6]
    }
 800ccca:	bf00      	nop
 800cccc:	370c      	adds	r7, #12
 800ccce:	46bd      	mov	sp, r7
 800ccd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd4:	4770      	bx	lr

0800ccd6 <_ZN8touchgfx8Drawable5setXYEss>:
     *
     * @see moveTo
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setXY(int16_t x, int16_t y)
 800ccd6:	b580      	push	{r7, lr}
 800ccd8:	b082      	sub	sp, #8
 800ccda:	af00      	add	r7, sp, #0
 800ccdc:	6078      	str	r0, [r7, #4]
 800ccde:	460b      	mov	r3, r1
 800cce0:	807b      	strh	r3, [r7, #2]
 800cce2:	4613      	mov	r3, r2
 800cce4:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	3330      	adds	r3, #48	; 0x30
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800ccf2:	4611      	mov	r1, r2
 800ccf4:	6878      	ldr	r0, [r7, #4]
 800ccf6:	4798      	blx	r3
        setY(y);
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	3334      	adds	r3, #52	; 0x34
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	f9b7 2000 	ldrsh.w	r2, [r7]
 800cd04:	4611      	mov	r1, r2
 800cd06:	6878      	ldr	r0, [r7, #4]
 800cd08:	4798      	blx	r3
    }
 800cd0a:	bf00      	nop
 800cd0c:	3708      	adds	r7, #8
 800cd0e:	46bd      	mov	sp, r7
 800cd10:	bd80      	pop	{r7, pc}

0800cd12 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 800cd12:	b480      	push	{r7}
 800cd14:	b083      	sub	sp, #12
 800cd16:	af00      	add	r7, sp, #0
 800cd18:	6078      	str	r0, [r7, #4]
 800cd1a:	460b      	mov	r3, r1
 800cd1c:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	887a      	ldrh	r2, [r7, #2]
 800cd22:	811a      	strh	r2, [r3, #8]
    }
 800cd24:	bf00      	nop
 800cd26:	370c      	adds	r7, #12
 800cd28:	46bd      	mov	sp, r7
 800cd2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd2e:	4770      	bx	lr

0800cd30 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 800cd30:	b480      	push	{r7}
 800cd32:	b083      	sub	sp, #12
 800cd34:	af00      	add	r7, sp, #0
 800cd36:	6078      	str	r0, [r7, #4]
 800cd38:	460b      	mov	r3, r1
 800cd3a:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	887a      	ldrh	r2, [r7, #2]
 800cd40:	815a      	strh	r2, [r3, #10]
    }
 800cd42:	bf00      	nop
 800cd44:	370c      	adds	r7, #12
 800cd46:	46bd      	mov	sp, r7
 800cd48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd4c:	4770      	bx	lr

0800cd4e <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 800cd4e:	b480      	push	{r7}
 800cd50:	b083      	sub	sp, #12
 800cd52:	af00      	add	r7, sp, #0
 800cd54:	6078      	str	r0, [r7, #4]
    {
    }
 800cd56:	bf00      	nop
 800cd58:	370c      	adds	r7, #12
 800cd5a:	46bd      	mov	sp, r7
 800cd5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd60:	4770      	bx	lr

0800cd62 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800cd62:	b480      	push	{r7}
 800cd64:	b083      	sub	sp, #12
 800cd66:	af00      	add	r7, sp, #0
 800cd68:	6078      	str	r0, [r7, #4]
 800cd6a:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800cd6c:	bf00      	nop
 800cd6e:	370c      	adds	r7, #12
 800cd70:	46bd      	mov	sp, r7
 800cd72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd76:	4770      	bx	lr

0800cd78 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800cd78:	b480      	push	{r7}
 800cd7a:	b083      	sub	sp, #12
 800cd7c:	af00      	add	r7, sp, #0
 800cd7e:	6078      	str	r0, [r7, #4]
 800cd80:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800cd82:	bf00      	nop
 800cd84:	370c      	adds	r7, #12
 800cd86:	46bd      	mov	sp, r7
 800cd88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd8c:	4770      	bx	lr

0800cd8e <_ZN8touchgfx8Drawable14setWidthHeightEss>:
     * coordinates).
     *
     * @param  width  The width.
     * @param  height The height.
     */
    void setWidthHeight(int16_t width, int16_t height)
 800cd8e:	b580      	push	{r7, lr}
 800cd90:	b082      	sub	sp, #8
 800cd92:	af00      	add	r7, sp, #0
 800cd94:	6078      	str	r0, [r7, #4]
 800cd96:	460b      	mov	r3, r1
 800cd98:	807b      	strh	r3, [r7, #2]
 800cd9a:	4613      	mov	r3, r2
 800cd9c:	803b      	strh	r3, [r7, #0]
    {
        setWidth(width);
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	3338      	adds	r3, #56	; 0x38
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800cdaa:	4611      	mov	r1, r2
 800cdac:	6878      	ldr	r0, [r7, #4]
 800cdae:	4798      	blx	r3
        setHeight(height);
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	333c      	adds	r3, #60	; 0x3c
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	f9b7 2000 	ldrsh.w	r2, [r7]
 800cdbc:	4611      	mov	r1, r2
 800cdbe:	6878      	ldr	r0, [r7, #4]
 800cdc0:	4798      	blx	r3
    }
 800cdc2:	bf00      	nop
 800cdc4:	3708      	adds	r7, #8
 800cdc6:	46bd      	mov	sp, r7
 800cdc8:	bd80      	pop	{r7, pc}

0800cdca <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * ignores the event. The event is only received if the drawable is touchable and
     * visible.
     *
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800cdca:	b480      	push	{r7}
 800cdcc:	b083      	sub	sp, #12
 800cdce:	af00      	add	r7, sp, #0
 800cdd0:	6078      	str	r0, [r7, #4]
 800cdd2:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800cdd4:	bf00      	nop
 800cdd6:	370c      	adds	r7, #12
 800cdd8:	46bd      	mov	sp, r7
 800cdda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdde:	4770      	bx	lr

0800cde0 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 800cde0:	b480      	push	{r7}
 800cde2:	b083      	sub	sp, #12
 800cde4:	af00      	add	r7, sp, #0
 800cde6:	6078      	str	r0, [r7, #4]
    {
    }
 800cde8:	bf00      	nop
 800cdea:	370c      	adds	r7, #12
 800cdec:	46bd      	mov	sp, r7
 800cdee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf2:	4770      	bx	lr

0800cdf4 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     *
     * @return true if the Drawable is visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 800cdf4:	b480      	push	{r7}
 800cdf6:	b083      	sub	sp, #12
 800cdf8:	af00      	add	r7, sp, #0
 800cdfa:	6078      	str	r0, [r7, #4]
    {
        return visible;
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 800ce02:	4618      	mov	r0, r3
 800ce04:	370c      	adds	r7, #12
 800ce06:	46bd      	mov	sp, r7
 800ce08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce0c:	4770      	bx	lr

0800ce0e <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 800ce0e:	b480      	push	{r7}
 800ce10:	b083      	sub	sp, #12
 800ce12:	af00      	add	r7, sp, #0
 800ce14:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 800ce1c:	4618      	mov	r0, r3
 800ce1e:	370c      	adds	r7, #12
 800ce20:	46bd      	mov	sp, r7
 800ce22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce26:	4770      	bx	lr

0800ce28 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 800ce28:	b580      	push	{r7, lr}
 800ce2a:	b082      	sub	sp, #8
 800ce2c:	af00      	add	r7, sp, #0
 800ce2e:	6078      	str	r0, [r7, #4]
 800ce30:	460b      	mov	r3, r1
 800ce32:	807b      	strh	r3, [r7, #2]
 800ce34:	4613      	mov	r3, r2
 800ce36:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	3354      	adds	r3, #84	; 0x54
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	8879      	ldrh	r1, [r7, #2]
 800ce42:	687a      	ldr	r2, [r7, #4]
 800ce44:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800ce48:	b292      	uxth	r2, r2
 800ce4a:	1a8a      	subs	r2, r1, r2
 800ce4c:	b292      	uxth	r2, r2
 800ce4e:	b210      	sxth	r0, r2
 800ce50:	8839      	ldrh	r1, [r7, #0]
 800ce52:	687a      	ldr	r2, [r7, #4]
 800ce54:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800ce58:	b292      	uxth	r2, r2
 800ce5a:	1a8a      	subs	r2, r1, r2
 800ce5c:	b292      	uxth	r2, r2
 800ce5e:	b212      	sxth	r2, r2
 800ce60:	4601      	mov	r1, r0
 800ce62:	6878      	ldr	r0, [r7, #4]
 800ce64:	4798      	blx	r3
    }
 800ce66:	bf00      	nop
 800ce68:	3708      	adds	r7, #8
 800ce6a:	46bd      	mov	sp, r7
 800ce6c:	bd80      	pop	{r7, pc}

0800ce6e <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 800ce6e:	b480      	push	{r7}
 800ce70:	b083      	sub	sp, #12
 800ce72:	af00      	add	r7, sp, #0
 800ce74:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ce7c:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ce84:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ce8c:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 800ce8e:	bf00      	nop
 800ce90:	370c      	adds	r7, #12
 800ce92:	46bd      	mov	sp, r7
 800ce94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce98:	4770      	bx	lr

0800ce9a <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 800ce9a:	b580      	push	{r7, lr}
 800ce9c:	b084      	sub	sp, #16
 800ce9e:	af00      	add	r7, sp, #0
 800cea0:	60f8      	str	r0, [r7, #12]
 800cea2:	60b9      	str	r1, [r7, #8]
 800cea4:	607a      	str	r2, [r7, #4]
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
 800cea6:	68f8      	ldr	r0, [r7, #12]
 800cea8:	f7ff ffe1 	bl	800ce6e <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	681a      	ldr	r2, [r3, #0]
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	68fa      	ldr	r2, [r7, #12]
 800ceb8:	601a      	str	r2, [r3, #0]
    }
 800ceba:	bf00      	nop
 800cebc:	3710      	adds	r7, #16
 800cebe:	46bd      	mov	sp, r7
 800cec0:	bd80      	pop	{r7, pc}
	...

0800cec4 <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 800cec4:	b580      	push	{r7, lr}
 800cec6:	b082      	sub	sp, #8
 800cec8:	af00      	add	r7, sp, #0
 800ceca:	6078      	str	r0, [r7, #4]
    {
 800cecc:	4a06      	ldr	r2, [pc, #24]	; (800cee8 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	601a      	str	r2, [r3, #0]
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	3304      	adds	r3, #4
 800ced6:	4618      	mov	r0, r3
 800ced8:	f000 f9ee 	bl	800d2b8 <_ZN8touchgfx9ContainerD1Ev>
    }
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	4618      	mov	r0, r3
 800cee0:	3708      	adds	r7, #8
 800cee2:	46bd      	mov	sp, r7
 800cee4:	bd80      	pop	{r7, pc}
 800cee6:	bf00      	nop
 800cee8:	08027c78 	.word	0x08027c78

0800ceec <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 800ceec:	b580      	push	{r7, lr}
 800ceee:	b082      	sub	sp, #8
 800cef0:	af00      	add	r7, sp, #0
 800cef2:	6078      	str	r0, [r7, #4]
    }
 800cef4:	6878      	ldr	r0, [r7, #4]
 800cef6:	f7ff ffe5 	bl	800cec4 <_ZN8touchgfx6ScreenD1Ev>
 800cefa:	213c      	movs	r1, #60	; 0x3c
 800cefc:	6878      	ldr	r0, [r7, #4]
 800cefe:	f016 fb26 	bl	802354e <_ZdlPvj>
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	4618      	mov	r0, r3
 800cf06:	3708      	adds	r7, #8
 800cf08:	46bd      	mov	sp, r7
 800cf0a:	bd80      	pop	{r7, pc}

0800cf0c <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 800cf0c:	b480      	push	{r7}
 800cf0e:	b083      	sub	sp, #12
 800cf10:	af00      	add	r7, sp, #0
 800cf12:	6078      	str	r0, [r7, #4]
    {
    }
 800cf14:	bf00      	nop
 800cf16:	370c      	adds	r7, #12
 800cf18:	46bd      	mov	sp, r7
 800cf1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf1e:	4770      	bx	lr

0800cf20 <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 800cf20:	b480      	push	{r7}
 800cf22:	b083      	sub	sp, #12
 800cf24:	af00      	add	r7, sp, #0
 800cf26:	6078      	str	r0, [r7, #4]
    {
    }
 800cf28:	bf00      	nop
 800cf2a:	370c      	adds	r7, #12
 800cf2c:	46bd      	mov	sp, r7
 800cf2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf32:	4770      	bx	lr

0800cf34 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
 800cf34:	b480      	push	{r7}
 800cf36:	b083      	sub	sp, #12
 800cf38:	af00      	add	r7, sp, #0
 800cf3a:	6078      	str	r0, [r7, #4]
    {
    }
 800cf3c:	bf00      	nop
 800cf3e:	370c      	adds	r7, #12
 800cf40:	46bd      	mov	sp, r7
 800cf42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf46:	4770      	bx	lr

0800cf48 <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 800cf48:	b480      	push	{r7}
 800cf4a:	b083      	sub	sp, #12
 800cf4c:	af00      	add	r7, sp, #0
 800cf4e:	6078      	str	r0, [r7, #4]
    {
    }
 800cf50:	bf00      	nop
 800cf52:	370c      	adds	r7, #12
 800cf54:	46bd      	mov	sp, r7
 800cf56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf5a:	4770      	bx	lr

0800cf5c <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 800cf5c:	b480      	push	{r7}
 800cf5e:	b083      	sub	sp, #12
 800cf60:	af00      	add	r7, sp, #0
 800cf62:	6078      	str	r0, [r7, #4]
 800cf64:	460b      	mov	r3, r1
 800cf66:	70fb      	strb	r3, [r7, #3]
    {
        (void)key; // Unused variable
    }
 800cf68:	bf00      	nop
 800cf6a:	370c      	adds	r7, #12
 800cf6c:	46bd      	mov	sp, r7
 800cf6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf72:	4770      	bx	lr

0800cf74 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 800cf74:	b580      	push	{r7, lr}
 800cf76:	b082      	sub	sp, #8
 800cf78:	af00      	add	r7, sp, #0
 800cf7a:	6078      	str	r0, [r7, #4]
 800cf7c:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	3304      	adds	r3, #4
 800cf82:	6839      	ldr	r1, [r7, #0]
 800cf84:	4618      	mov	r0, r3
 800cf86:	f005 fe93 	bl	8012cb0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 800cf8a:	bf00      	nop
 800cf8c:	3708      	adds	r7, #8
 800cf8e:	46bd      	mov	sp, r7
 800cf90:	bd80      	pop	{r7, pc}

0800cf92 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     * Since a Widget is only one Drawable, Widget::getLastChild simply yields itself as
     * result, but only if the Widget isVisible and isTouchable.
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
 800cf92:	b580      	push	{r7, lr}
 800cf94:	b084      	sub	sp, #16
 800cf96:	af00      	add	r7, sp, #0
 800cf98:	60f8      	str	r0, [r7, #12]
 800cf9a:	607b      	str	r3, [r7, #4]
 800cf9c:	460b      	mov	r3, r1
 800cf9e:	817b      	strh	r3, [r7, #10]
 800cfa0:	4613      	mov	r3, r2
 800cfa2:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	4618      	mov	r0, r3
 800cfa8:	f7ff ff24 	bl	800cdf4 <_ZNK8touchgfx8Drawable9isVisibleEv>
 800cfac:	4603      	mov	r3, r0
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d008      	beq.n	800cfc4 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	4618      	mov	r0, r3
 800cfb6:	f7ff ff2a 	bl	800ce0e <_ZNK8touchgfx8Drawable11isTouchableEv>
 800cfba:	4603      	mov	r3, r0
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d001      	beq.n	800cfc4 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800cfc0:	2301      	movs	r3, #1
 800cfc2:	e000      	b.n	800cfc6 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 800cfc4:	2300      	movs	r3, #0
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d002      	beq.n	800cfd0 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 800cfca:	68fa      	ldr	r2, [r7, #12]
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	601a      	str	r2, [r3, #0]
        }
    }
 800cfd0:	bf00      	nop
 800cfd2:	3710      	adds	r7, #16
 800cfd4:	46bd      	mov	sp, r7
 800cfd6:	bd80      	pop	{r7, pc}

0800cfd8 <_ZN8touchgfx6WidgetC1Ev>:
class Widget : public Drawable
 800cfd8:	b580      	push	{r7, lr}
 800cfda:	b082      	sub	sp, #8
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	6078      	str	r0, [r7, #4]
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	4618      	mov	r0, r3
 800cfe4:	f7ff fdca 	bl	800cb7c <_ZN8touchgfx8DrawableC1Ev>
 800cfe8:	4a03      	ldr	r2, [pc, #12]	; (800cff8 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	601a      	str	r2, [r3, #0]
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	4618      	mov	r0, r3
 800cff2:	3708      	adds	r7, #8
 800cff4:	46bd      	mov	sp, r7
 800cff6:	bd80      	pop	{r7, pc}
 800cff8:	08026c10 	.word	0x08026c10

0800cffc <_ZN8touchgfx6WidgetD1Ev>:
 800cffc:	b580      	push	{r7, lr}
 800cffe:	b082      	sub	sp, #8
 800d000:	af00      	add	r7, sp, #0
 800d002:	6078      	str	r0, [r7, #4]
 800d004:	4a05      	ldr	r2, [pc, #20]	; (800d01c <_ZN8touchgfx6WidgetD1Ev+0x20>)
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	601a      	str	r2, [r3, #0]
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	4618      	mov	r0, r3
 800d00e:	f7ff fde5 	bl	800cbdc <_ZN8touchgfx8DrawableD1Ev>
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	4618      	mov	r0, r3
 800d016:	3708      	adds	r7, #8
 800d018:	46bd      	mov	sp, r7
 800d01a:	bd80      	pop	{r7, pc}
 800d01c:	08026c10 	.word	0x08026c10

0800d020 <_ZN8touchgfx6WidgetD0Ev>:
 800d020:	b580      	push	{r7, lr}
 800d022:	b082      	sub	sp, #8
 800d024:	af00      	add	r7, sp, #0
 800d026:	6078      	str	r0, [r7, #4]
 800d028:	6878      	ldr	r0, [r7, #4]
 800d02a:	f7ff ffe7 	bl	800cffc <_ZN8touchgfx6WidgetD1Ev>
 800d02e:	2128      	movs	r1, #40	; 0x28
 800d030:	6878      	ldr	r0, [r7, #4]
 800d032:	f016 fa8c 	bl	802354e <_ZdlPvj>
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	4618      	mov	r0, r3
 800d03a:	3708      	adds	r7, #8
 800d03c:	46bd      	mov	sp, r7
 800d03e:	bd80      	pop	{r7, pc}

0800d040 <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 800d040:	b580      	push	{r7, lr}
 800d042:	b082      	sub	sp, #8
 800d044:	af00      	add	r7, sp, #0
 800d046:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0)
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	4618      	mov	r0, r3
 800d04c:	2326      	movs	r3, #38	; 0x26
 800d04e:	461a      	mov	r2, r3
 800d050:	2100      	movs	r1, #0
 800d052:	f016 fb3b 	bl	80236cc <memset>
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	4618      	mov	r0, r3
 800d05a:	f7ff ffbd 	bl	800cfd8 <_ZN8touchgfx6WidgetC1Ev>
 800d05e:	4a09      	ldr	r2, [pc, #36]	; (800d084 <_ZN8touchgfx3BoxC1Ev+0x44>)
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	601a      	str	r2, [r3, #0]
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	22ff      	movs	r2, #255	; 0xff
 800d068:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	3328      	adds	r3, #40	; 0x28
 800d070:	2100      	movs	r1, #0
 800d072:	4618      	mov	r0, r3
 800d074:	f7ff fd4c 	bl	800cb10 <_ZN8touchgfx9colortypeC1Em>
    {
    }
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	4618      	mov	r0, r3
 800d07c:	3708      	adds	r7, #8
 800d07e:	46bd      	mov	sp, r7
 800d080:	bd80      	pop	{r7, pc}
 800d082:	bf00      	nop
 800d084:	080279fc 	.word	0x080279fc

0800d088 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  newColor The color of the box.
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
 800d088:	b480      	push	{r7}
 800d08a:	b083      	sub	sp, #12
 800d08c:	af00      	add	r7, sp, #0
 800d08e:	6078      	str	r0, [r7, #4]
 800d090:	6039      	str	r1, [r7, #0]
    {
        color = newColor;
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	683a      	ldr	r2, [r7, #0]
 800d096:	629a      	str	r2, [r3, #40]	; 0x28
    }
 800d098:	bf00      	nop
 800d09a:	370c      	adds	r7, #12
 800d09c:	46bd      	mov	sp, r7
 800d09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0a2:	4770      	bx	lr

0800d0a4 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
     *
     * @param   bmp (Optional) The bitmap to display.
     *
     * @see setBitmap
     */
    Image(const Bitmap& bmp = Bitmap())
 800d0a4:	b580      	push	{r7, lr}
 800d0a6:	b082      	sub	sp, #8
 800d0a8:	af00      	add	r7, sp, #0
 800d0aa:	6078      	str	r0, [r7, #4]
 800d0ac:	6039      	str	r1, [r7, #0]
        : Widget(), bitmap(bmp), alpha(255)
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	4618      	mov	r0, r3
 800d0b2:	2326      	movs	r3, #38	; 0x26
 800d0b4:	461a      	mov	r2, r3
 800d0b6:	2100      	movs	r1, #0
 800d0b8:	f016 fb08 	bl	80236cc <memset>
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	4618      	mov	r0, r3
 800d0c0:	f7ff ff8a 	bl	800cfd8 <_ZN8touchgfx6WidgetC1Ev>
 800d0c4:	4a09      	ldr	r2, [pc, #36]	; (800d0ec <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x48>)
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	601a      	str	r2, [r3, #0]
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	683a      	ldr	r2, [r7, #0]
 800d0ce:	8812      	ldrh	r2, [r2, #0]
 800d0d0:	84da      	strh	r2, [r3, #38]	; 0x26
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	22ff      	movs	r2, #255	; 0xff
 800d0d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    {
        Image::setBitmap(bmp);
 800d0da:	6839      	ldr	r1, [r7, #0]
 800d0dc:	6878      	ldr	r0, [r7, #4]
 800d0de:	f006 ff91 	bl	8014004 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	4618      	mov	r0, r3
 800d0e6:	3708      	adds	r7, #8
 800d0e8:	46bd      	mov	sp, r7
 800d0ea:	bd80      	pop	{r7, pc}
 800d0ec:	08027a64 	.word	0x08027a64

0800d0f0 <_ZN8touchgfx4ViewI15screenPresenterED1Ev>:
class View : public Screen
 800d0f0:	b580      	push	{r7, lr}
 800d0f2:	b082      	sub	sp, #8
 800d0f4:	af00      	add	r7, sp, #0
 800d0f6:	6078      	str	r0, [r7, #4]
 800d0f8:	4a05      	ldr	r2, [pc, #20]	; (800d110 <_ZN8touchgfx4ViewI15screenPresenterED1Ev+0x20>)
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	601a      	str	r2, [r3, #0]
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	4618      	mov	r0, r3
 800d102:	f7ff fedf 	bl	800cec4 <_ZN8touchgfx6ScreenD1Ev>
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	4618      	mov	r0, r3
 800d10a:	3708      	adds	r7, #8
 800d10c:	46bd      	mov	sp, r7
 800d10e:	bd80      	pop	{r7, pc}
 800d110:	08026bdc 	.word	0x08026bdc

0800d114 <_ZN8touchgfx4ViewI15screenPresenterED0Ev>:
 800d114:	b580      	push	{r7, lr}
 800d116:	b082      	sub	sp, #8
 800d118:	af00      	add	r7, sp, #0
 800d11a:	6078      	str	r0, [r7, #4]
 800d11c:	6878      	ldr	r0, [r7, #4]
 800d11e:	f7ff ffe7 	bl	800d0f0 <_ZN8touchgfx4ViewI15screenPresenterED1Ev>
 800d122:	2140      	movs	r1, #64	; 0x40
 800d124:	6878      	ldr	r0, [r7, #4]
 800d126:	f016 fa12 	bl	802354e <_ZdlPvj>
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	4618      	mov	r0, r3
 800d12e:	3708      	adds	r7, #8
 800d130:	46bd      	mov	sp, r7
 800d132:	bd80      	pop	{r7, pc}

0800d134 <_ZN14screenViewBaseC1Ev>:
/*********************************************************************************/
#include <gui_generated/screen_screen/screenViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <images/BitmapDatabase.hpp>

screenViewBase::screenViewBase()
 800d134:	b590      	push	{r4, r7, lr}
 800d136:	b089      	sub	sp, #36	; 0x24
 800d138:	af02      	add	r7, sp, #8
 800d13a:	6078      	str	r0, [r7, #4]
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	4618      	mov	r0, r3
 800d140:	f000 f8a4 	bl	800d28c <_ZN8touchgfx4ViewI15screenPresenterEC1Ev>
 800d144:	4a35      	ldr	r2, [pc, #212]	; (800d21c <_ZN14screenViewBaseC1Ev+0xe8>)
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	601a      	str	r2, [r3, #0]
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	3340      	adds	r3, #64	; 0x40
 800d14e:	4618      	mov	r0, r3
 800d150:	f7ff ff76 	bl	800d040 <_ZN8touchgfx3BoxC1Ev>
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 800d15a:	f107 0308 	add.w	r3, r7, #8
 800d15e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800d162:	4618      	mov	r0, r3
 800d164:	f7ff fcfa 	bl	800cb5c <_ZN8touchgfx6BitmapC1Et>
 800d168:	f107 0308 	add.w	r3, r7, #8
 800d16c:	4619      	mov	r1, r3
 800d16e:	4620      	mov	r0, r4
 800d170:	f7ff ff98 	bl	800d0a4 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
{
    __background.setPosition(0, 0, 800, 480);
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800d17a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800d17e:	9300      	str	r3, [sp, #0]
 800d180:	f44f 7348 	mov.w	r3, #800	; 0x320
 800d184:	2200      	movs	r2, #0
 800d186:	2100      	movs	r1, #0
 800d188:	f7ff fd66 	bl	800cc58 <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800d192:	2300      	movs	r3, #0
 800d194:	75fb      	strb	r3, [r7, #23]
 800d196:	2300      	movs	r3, #0
 800d198:	75bb      	strb	r3, [r7, #22]
 800d19a:	2300      	movs	r3, #0
 800d19c:	757b      	strb	r3, [r7, #21]
     *
     * @return The color representation depending on LCD color format.
     */
    FORCE_INLINE_FUNCTION static colortype getColorFromRGB(uint8_t red, uint8_t green, uint8_t blue)
    {
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800d19e:	7dfb      	ldrb	r3, [r7, #23]
 800d1a0:	041b      	lsls	r3, r3, #16
 800d1a2:	461a      	mov	r2, r3
 800d1a4:	7dbb      	ldrb	r3, [r7, #22]
 800d1a6:	021b      	lsls	r3, r3, #8
 800d1a8:	431a      	orrs	r2, r3
 800d1aa:	7d7b      	ldrb	r3, [r7, #21]
 800d1ac:	4313      	orrs	r3, r2
 800d1ae:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800d1b2:	f107 0310 	add.w	r3, r7, #16
 800d1b6:	4611      	mov	r1, r2
 800d1b8:	4618      	mov	r0, r3
 800d1ba:	f7ff fca9 	bl	800cb10 <_ZN8touchgfx9colortypeC1Em>
 800d1be:	693b      	ldr	r3, [r7, #16]
 800d1c0:	4619      	mov	r1, r3
 800d1c2:	4620      	mov	r0, r4
 800d1c4:	f7ff ff60 	bl	800d088 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    add(__background);
 800d1c8:	687a      	ldr	r2, [r7, #4]
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	3340      	adds	r3, #64	; 0x40
 800d1ce:	4619      	mov	r1, r3
 800d1d0:	4610      	mov	r0, r2
 800d1d2:	f7ff fecf 	bl	800cf74 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    image1.setXY(0, 0);
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	336c      	adds	r3, #108	; 0x6c
 800d1da:	2200      	movs	r2, #0
 800d1dc:	2100      	movs	r1, #0
 800d1de:	4618      	mov	r0, r3
 800d1e0:	f7ff fd79 	bl	800ccd6 <_ZN8touchgfx8Drawable5setXYEss>
    image1.setBitmap(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_BACKGROUNDS_800X480_POLY_ID));
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 800d1ea:	f107 030c 	add.w	r3, r7, #12
 800d1ee:	2100      	movs	r1, #0
 800d1f0:	4618      	mov	r0, r3
 800d1f2:	f7ff fcb3 	bl	800cb5c <_ZN8touchgfx6BitmapC1Et>
 800d1f6:	f107 030c 	add.w	r3, r7, #12
 800d1fa:	4619      	mov	r1, r3
 800d1fc:	4620      	mov	r0, r4
 800d1fe:	f006 ff01 	bl	8014004 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    add(image1);
 800d202:	687a      	ldr	r2, [r7, #4]
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	336c      	adds	r3, #108	; 0x6c
 800d208:	4619      	mov	r1, r3
 800d20a:	4610      	mov	r0, r2
 800d20c:	f7ff feb2 	bl	800cf74 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	4618      	mov	r0, r3
 800d214:	371c      	adds	r7, #28
 800d216:	46bd      	mov	sp, r7
 800d218:	bd90      	pop	{r4, r7, pc}
 800d21a:	bf00      	nop
 800d21c:	08026ba8 	.word	0x08026ba8

0800d220 <_ZN14screenViewBaseD1Ev>:

screenViewBase::~screenViewBase()
 800d220:	b580      	push	{r7, lr}
 800d222:	b082      	sub	sp, #8
 800d224:	af00      	add	r7, sp, #0
 800d226:	6078      	str	r0, [r7, #4]
 800d228:	4a0a      	ldr	r2, [pc, #40]	; (800d254 <_ZN14screenViewBaseD1Ev+0x34>)
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	601a      	str	r2, [r3, #0]
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	336c      	adds	r3, #108	; 0x6c
 800d232:	4618      	mov	r0, r3
 800d234:	f000 f884 	bl	800d340 <_ZN8touchgfx5ImageD1Ev>
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	3340      	adds	r3, #64	; 0x40
 800d23c:	4618      	mov	r0, r3
 800d23e:	f000 f85d 	bl	800d2fc <_ZN8touchgfx3BoxD1Ev>
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	4618      	mov	r0, r3
 800d246:	f7ff ff53 	bl	800d0f0 <_ZN8touchgfx4ViewI15screenPresenterED1Ev>
{

}
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	4618      	mov	r0, r3
 800d24e:	3708      	adds	r7, #8
 800d250:	46bd      	mov	sp, r7
 800d252:	bd80      	pop	{r7, pc}
 800d254:	08026ba8 	.word	0x08026ba8

0800d258 <_ZN14screenViewBaseD0Ev>:
screenViewBase::~screenViewBase()
 800d258:	b580      	push	{r7, lr}
 800d25a:	b082      	sub	sp, #8
 800d25c:	af00      	add	r7, sp, #0
 800d25e:	6078      	str	r0, [r7, #4]
}
 800d260:	6878      	ldr	r0, [r7, #4]
 800d262:	f7ff ffdd 	bl	800d220 <_ZN14screenViewBaseD1Ev>
 800d266:	2198      	movs	r1, #152	; 0x98
 800d268:	6878      	ldr	r0, [r7, #4]
 800d26a:	f016 f970 	bl	802354e <_ZdlPvj>
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	4618      	mov	r0, r3
 800d272:	3708      	adds	r7, #8
 800d274:	46bd      	mov	sp, r7
 800d276:	bd80      	pop	{r7, pc}

0800d278 <_ZN14screenViewBase11setupScreenEv>:

void screenViewBase::setupScreen()
{
 800d278:	b480      	push	{r7}
 800d27a:	b083      	sub	sp, #12
 800d27c:	af00      	add	r7, sp, #0
 800d27e:	6078      	str	r0, [r7, #4]

}
 800d280:	bf00      	nop
 800d282:	370c      	adds	r7, #12
 800d284:	46bd      	mov	sp, r7
 800d286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d28a:	4770      	bx	lr

0800d28c <_ZN8touchgfx4ViewI15screenPresenterEC1Ev>:
    View()
 800d28c:	b580      	push	{r7, lr}
 800d28e:	b082      	sub	sp, #8
 800d290:	af00      	add	r7, sp, #0
 800d292:	6078      	str	r0, [r7, #4]
        : presenter(0)
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	4618      	mov	r0, r3
 800d298:	f009 fa20 	bl	80166dc <_ZN8touchgfx6ScreenC1Ev>
 800d29c:	4a05      	ldr	r2, [pc, #20]	; (800d2b4 <_ZN8touchgfx4ViewI15screenPresenterEC1Ev+0x28>)
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	601a      	str	r2, [r3, #0]
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	2200      	movs	r2, #0
 800d2a6:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	4618      	mov	r0, r3
 800d2ac:	3708      	adds	r7, #8
 800d2ae:	46bd      	mov	sp, r7
 800d2b0:	bd80      	pop	{r7, pc}
 800d2b2:	bf00      	nop
 800d2b4:	08026bdc 	.word	0x08026bdc

0800d2b8 <_ZN8touchgfx9ContainerD1Ev>:
 * intersect with the geometry of the container will be visible (e.g. setting a
 * container's width to 0 will render all children invisible).
 *
 * @see Drawable
 */
class Container : public Drawable
 800d2b8:	b580      	push	{r7, lr}
 800d2ba:	b082      	sub	sp, #8
 800d2bc:	af00      	add	r7, sp, #0
 800d2be:	6078      	str	r0, [r7, #4]
 800d2c0:	4a05      	ldr	r2, [pc, #20]	; (800d2d8 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	601a      	str	r2, [r3, #0]
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	4618      	mov	r0, r3
 800d2ca:	f7ff fc87 	bl	800cbdc <_ZN8touchgfx8DrawableD1Ev>
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	4618      	mov	r0, r3
 800d2d2:	3708      	adds	r7, #8
 800d2d4:	46bd      	mov	sp, r7
 800d2d6:	bd80      	pop	{r7, pc}
 800d2d8:	08027814 	.word	0x08027814

0800d2dc <_ZN8touchgfx9ContainerD0Ev>:
 800d2dc:	b580      	push	{r7, lr}
 800d2de:	b082      	sub	sp, #8
 800d2e0:	af00      	add	r7, sp, #0
 800d2e2:	6078      	str	r0, [r7, #4]
 800d2e4:	6878      	ldr	r0, [r7, #4]
 800d2e6:	f7ff ffe7 	bl	800d2b8 <_ZN8touchgfx9ContainerD1Ev>
 800d2ea:	212c      	movs	r1, #44	; 0x2c
 800d2ec:	6878      	ldr	r0, [r7, #4]
 800d2ee:	f016 f92e 	bl	802354e <_ZdlPvj>
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	4618      	mov	r0, r3
 800d2f6:	3708      	adds	r7, #8
 800d2f8:	46bd      	mov	sp, r7
 800d2fa:	bd80      	pop	{r7, pc}

0800d2fc <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 800d2fc:	b580      	push	{r7, lr}
 800d2fe:	b082      	sub	sp, #8
 800d300:	af00      	add	r7, sp, #0
 800d302:	6078      	str	r0, [r7, #4]
 800d304:	4a05      	ldr	r2, [pc, #20]	; (800d31c <_ZN8touchgfx3BoxD1Ev+0x20>)
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	601a      	str	r2, [r3, #0]
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	4618      	mov	r0, r3
 800d30e:	f7ff fe75 	bl	800cffc <_ZN8touchgfx6WidgetD1Ev>
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	4618      	mov	r0, r3
 800d316:	3708      	adds	r7, #8
 800d318:	46bd      	mov	sp, r7
 800d31a:	bd80      	pop	{r7, pc}
 800d31c:	080279fc 	.word	0x080279fc

0800d320 <_ZN8touchgfx3BoxD0Ev>:
 800d320:	b580      	push	{r7, lr}
 800d322:	b082      	sub	sp, #8
 800d324:	af00      	add	r7, sp, #0
 800d326:	6078      	str	r0, [r7, #4]
 800d328:	6878      	ldr	r0, [r7, #4]
 800d32a:	f7ff ffe7 	bl	800d2fc <_ZN8touchgfx3BoxD1Ev>
 800d32e:	212c      	movs	r1, #44	; 0x2c
 800d330:	6878      	ldr	r0, [r7, #4]
 800d332:	f016 f90c 	bl	802354e <_ZdlPvj>
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	4618      	mov	r0, r3
 800d33a:	3708      	adds	r7, #8
 800d33c:	46bd      	mov	sp, r7
 800d33e:	bd80      	pop	{r7, pc}

0800d340 <_ZN8touchgfx5ImageD1Ev>:
class Image : public Widget
 800d340:	b580      	push	{r7, lr}
 800d342:	b082      	sub	sp, #8
 800d344:	af00      	add	r7, sp, #0
 800d346:	6078      	str	r0, [r7, #4]
 800d348:	4a05      	ldr	r2, [pc, #20]	; (800d360 <_ZN8touchgfx5ImageD1Ev+0x20>)
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	601a      	str	r2, [r3, #0]
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	4618      	mov	r0, r3
 800d352:	f7ff fe53 	bl	800cffc <_ZN8touchgfx6WidgetD1Ev>
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	4618      	mov	r0, r3
 800d35a:	3708      	adds	r7, #8
 800d35c:	46bd      	mov	sp, r7
 800d35e:	bd80      	pop	{r7, pc}
 800d360:	08027a64 	.word	0x08027a64

0800d364 <_ZN8touchgfx5ImageD0Ev>:
 800d364:	b580      	push	{r7, lr}
 800d366:	b082      	sub	sp, #8
 800d368:	af00      	add	r7, sp, #0
 800d36a:	6078      	str	r0, [r7, #4]
 800d36c:	6878      	ldr	r0, [r7, #4]
 800d36e:	f7ff ffe7 	bl	800d340 <_ZN8touchgfx5ImageD1Ev>
 800d372:	212c      	movs	r1, #44	; 0x2c
 800d374:	6878      	ldr	r0, [r7, #4]
 800d376:	f016 f8ea 	bl	802354e <_ZdlPvj>
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	4618      	mov	r0, r3
 800d37e:	3708      	adds	r7, #8
 800d380:	46bd      	mov	sp, r7
 800d382:	bd80      	pop	{r7, pc}

0800d384 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 800d384:	b480      	push	{r7}
 800d386:	af00      	add	r7, sp, #0
    return bitmap_database;
 800d388:	4b02      	ldr	r3, [pc, #8]	; (800d394 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 800d38a:	4618      	mov	r0, r3
 800d38c:	46bd      	mov	sp, r7
 800d38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d392:	4770      	bx	lr
 800d394:	08026c70 	.word	0x08026c70

0800d398 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 800d398:	b480      	push	{r7}
 800d39a:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 800d39c:	2301      	movs	r3, #1
}
 800d39e:	4618      	mov	r0, r3
 800d3a0:	46bd      	mov	sp, r7
 800d3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3a6:	4770      	bx	lr

0800d3a8 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
     * @param  prevChar The Unicode value of the previous character.
     * @param  glyph    the glyph object for the current character.
     *
     * @return The kerning distance between prevChar and glyph char.
     */
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 800d3a8:	b480      	push	{r7}
 800d3aa:	b085      	sub	sp, #20
 800d3ac:	af00      	add	r7, sp, #0
 800d3ae:	60f8      	str	r0, [r7, #12]
 800d3b0:	460b      	mov	r3, r1
 800d3b2:	607a      	str	r2, [r7, #4]
 800d3b4:	817b      	strh	r3, [r7, #10]
    {
        (void)prevChar; // Unused variable
        (void)glyph;    // Unused variable
        return 0;
 800d3b6:	2300      	movs	r3, #0
    }
 800d3b8:	4618      	mov	r0, r3
 800d3ba:	3714      	adds	r7, #20
 800d3bc:	46bd      	mov	sp, r7
 800d3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3c2:	4770      	bx	lr

0800d3c4 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    /**
     * Gets GSUB table. Currently only used for Devanagari fonts.
     *
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
 800d3c4:	b480      	push	{r7}
 800d3c6:	b083      	sub	sp, #12
 800d3c8:	af00      	add	r7, sp, #0
 800d3ca:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800d3cc:	2300      	movs	r3, #0
    }
 800d3ce:	4618      	mov	r0, r3
 800d3d0:	370c      	adds	r7, #12
 800d3d2:	46bd      	mov	sp, r7
 800d3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3d8:	4770      	bx	lr

0800d3da <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 800d3da:	b480      	push	{r7}
 800d3dc:	b083      	sub	sp, #12
 800d3de:	af00      	add	r7, sp, #0
 800d3e0:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800d3e2:	2300      	movs	r3, #0
    }
 800d3e4:	4618      	mov	r0, r3
 800d3e6:	370c      	adds	r7, #12
 800d3e8:	46bd      	mov	sp, r7
 800d3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ee:	4770      	bx	lr

0800d3f0 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
     *
     * @param  data A reference to the TypedTextData storage array.
     * @param  f    The fonts associated with the array.
     * @param  n    The number of typed texts in the array.
     */
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 800d3f0:	b480      	push	{r7}
 800d3f2:	b085      	sub	sp, #20
 800d3f4:	af00      	add	r7, sp, #0
 800d3f6:	60f8      	str	r0, [r7, #12]
 800d3f8:	60b9      	str	r1, [r7, #8]
 800d3fa:	4613      	mov	r3, r2
 800d3fc:	80fb      	strh	r3, [r7, #6]
    {
        typedTexts = data;
 800d3fe:	4a07      	ldr	r2, [pc, #28]	; (800d41c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	6013      	str	r3, [r2, #0]
        fonts = f;
 800d404:	4a06      	ldr	r2, [pc, #24]	; (800d420 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 800d406:	68bb      	ldr	r3, [r7, #8]
 800d408:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 800d40a:	4a06      	ldr	r2, [pc, #24]	; (800d424 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 800d40c:	88fb      	ldrh	r3, [r7, #6]
 800d40e:	8013      	strh	r3, [r2, #0]
    }
 800d410:	bf00      	nop
 800d412:	3714      	adds	r7, #20
 800d414:	46bd      	mov	sp, r7
 800d416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d41a:	4770      	bx	lr
 800d41c:	2002442c 	.word	0x2002442c
 800d420:	20024434 	.word	0x20024434
 800d424:	20024430 	.word	0x20024430

0800d428 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 800d428:	b40e      	push	{r1, r2, r3}
 800d42a:	b580      	push	{r7, lr}
 800d42c:	b085      	sub	sp, #20
 800d42e:	af00      	add	r7, sp, #0
 800d430:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 800d432:	f107 0320 	add.w	r3, r7, #32
 800d436:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 800d438:	68bb      	ldr	r3, [r7, #8]
 800d43a:	69fa      	ldr	r2, [r7, #28]
 800d43c:	2100      	movs	r1, #0
 800d43e:	6878      	ldr	r0, [r7, #4]
 800d440:	f008 fd82 	bl	8015f48 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 800d444:	4603      	mov	r3, r0
 800d446:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 800d448:	89fb      	ldrh	r3, [r7, #14]
}
 800d44a:	4618      	mov	r0, r3
 800d44c:	3714      	adds	r7, #20
 800d44e:	46bd      	mov	sp, r7
 800d450:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d454:	b003      	add	sp, #12
 800d456:	4770      	bx	lr

0800d458 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 800d458:	b40c      	push	{r2, r3}
 800d45a:	b580      	push	{r7, lr}
 800d45c:	b084      	sub	sp, #16
 800d45e:	af00      	add	r7, sp, #0
 800d460:	6078      	str	r0, [r7, #4]
 800d462:	460b      	mov	r3, r1
 800d464:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 800d466:	f107 031c 	add.w	r3, r7, #28
 800d46a:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 800d46c:	78f9      	ldrb	r1, [r7, #3]
 800d46e:	68bb      	ldr	r3, [r7, #8]
 800d470:	69ba      	ldr	r2, [r7, #24]
 800d472:	6878      	ldr	r0, [r7, #4]
 800d474:	f008 fd68 	bl	8015f48 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 800d478:	4603      	mov	r3, r0
 800d47a:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 800d47c:	89fb      	ldrh	r3, [r7, #14]
}
 800d47e:	4618      	mov	r0, r3
 800d480:	3710      	adds	r7, #16
 800d482:	46bd      	mov	sp, r7
 800d484:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d488:	b002      	add	sp, #8
 800d48a:	4770      	bx	lr

0800d48c <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 800d48c:	b580      	push	{r7, lr}
 800d48e:	b08a      	sub	sp, #40	; 0x28
 800d490:	af00      	add	r7, sp, #0
 800d492:	6078      	str	r0, [r7, #4]
 800d494:	460b      	mov	r3, r1
 800d496:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d016      	beq.n	800d4ce <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	3322      	adds	r3, #34	; 0x22
 800d4a4:	627b      	str	r3, [r7, #36]	; 0x24
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 800d4a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4a8:	8adb      	ldrh	r3, [r3, #22]
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d105      	bne.n	800d4ba <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 800d4ae:	4b43      	ldr	r3, [pc, #268]	; (800d5bc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 800d4b0:	4a43      	ldr	r2, [pc, #268]	; (800d5c0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 800d4b2:	21c5      	movs	r1, #197	; 0xc5
 800d4b4:	4843      	ldr	r0, [pc, #268]	; (800d5c4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800d4b6:	f016 f879 	bl	80235ac <__assert_func>
            return buffer[pos];
 800d4ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4bc:	8a9b      	ldrh	r3, [r3, #20]
 800d4be:	461a      	mov	r2, r3
 800d4c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4c2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d001      	beq.n	800d4ce <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 800d4ca:	2301      	movs	r3, #1
 800d4cc:	e000      	b.n	800d4d0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 800d4ce:	2300      	movs	r3, #0
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d06a      	beq.n	800d5aa <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 800d4d4:	6878      	ldr	r0, [r7, #4]
 800d4d6:	f009 ff79 	bl	80173cc <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	3322      	adds	r3, #34	; 0x22
 800d4de:	623b      	str	r3, [r7, #32]
 800d4e0:	2301      	movs	r3, #1
 800d4e2:	83fb      	strh	r3, [r7, #30]
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 800d4e4:	6a3b      	ldr	r3, [r7, #32]
 800d4e6:	8adb      	ldrh	r3, [r3, #22]
 800d4e8:	8bfa      	ldrh	r2, [r7, #30]
 800d4ea:	429a      	cmp	r2, r3
 800d4ec:	d305      	bcc.n	800d4fa <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 800d4ee:	4b36      	ldr	r3, [pc, #216]	; (800d5c8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 800d4f0:	4a36      	ldr	r2, [pc, #216]	; (800d5cc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 800d4f2:	21cb      	movs	r1, #203	; 0xcb
 800d4f4:	4833      	ldr	r0, [pc, #204]	; (800d5c4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800d4f6:	f016 f859 	bl	80235ac <__assert_func>
            const uint16_t index = pos + offset;
 800d4fa:	6a3b      	ldr	r3, [r7, #32]
 800d4fc:	8a9a      	ldrh	r2, [r3, #20]
 800d4fe:	8bfb      	ldrh	r3, [r7, #30]
 800d500:	4413      	add	r3, r2
 800d502:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 800d504:	8bbb      	ldrh	r3, [r7, #28]
 800d506:	2b09      	cmp	r3, #9
 800d508:	d801      	bhi.n	800d50e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 800d50a:	8bbb      	ldrh	r3, [r7, #28]
 800d50c:	e001      	b.n	800d512 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 800d50e:	8bbb      	ldrh	r3, [r7, #28]
 800d510:	3b0a      	subs	r3, #10
 800d512:	6a3a      	ldr	r2, [r7, #32]
 800d514:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d518:	f640 123f 	movw	r2, #2367	; 0x93f
 800d51c:	4293      	cmp	r3, r2
 800d51e:	bf0c      	ite	eq
 800d520:	2301      	moveq	r3, #1
 800d522:	2300      	movne	r3, #0
 800d524:	b2db      	uxtb	r3, r3
 800d526:	2b00      	cmp	r3, #0
 800d528:	d03f      	beq.n	800d5aa <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	3322      	adds	r3, #34	; 0x22
 800d52e:	687a      	ldr	r2, [r7, #4]
 800d530:	3222      	adds	r2, #34	; 0x22
 800d532:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 800d534:	68ba      	ldr	r2, [r7, #8]
 800d536:	8ad2      	ldrh	r2, [r2, #22]
 800d538:	2a00      	cmp	r2, #0
 800d53a:	d105      	bne.n	800d548 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 800d53c:	4b1f      	ldr	r3, [pc, #124]	; (800d5bc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 800d53e:	4a20      	ldr	r2, [pc, #128]	; (800d5c0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 800d540:	21c5      	movs	r1, #197	; 0xc5
 800d542:	4820      	ldr	r0, [pc, #128]	; (800d5c4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800d544:	f016 f832 	bl	80235ac <__assert_func>
            return buffer[pos];
 800d548:	68ba      	ldr	r2, [r7, #8]
 800d54a:	8a92      	ldrh	r2, [r2, #20]
 800d54c:	4611      	mov	r1, r2
 800d54e:	68ba      	ldr	r2, [r7, #8]
 800d550:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800d554:	613b      	str	r3, [r7, #16]
 800d556:	4613      	mov	r3, r2
 800d558:	81fb      	strh	r3, [r7, #14]
            buffer[pos] = newChar;
        }

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 800d55a:	693b      	ldr	r3, [r7, #16]
 800d55c:	8adb      	ldrh	r3, [r3, #22]
 800d55e:	2b01      	cmp	r3, #1
 800d560:	d806      	bhi.n	800d570 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 800d562:	4b1b      	ldr	r3, [pc, #108]	; (800d5d0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 800d564:	4a1b      	ldr	r2, [pc, #108]	; (800d5d4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 800d566:	f44f 718e 	mov.w	r1, #284	; 0x11c
 800d56a:	4816      	ldr	r0, [pc, #88]	; (800d5c4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800d56c:	f016 f81e 	bl	80235ac <__assert_func>
            const uint16_t index = pos + 1;
 800d570:	693b      	ldr	r3, [r7, #16]
 800d572:	8a9b      	ldrh	r3, [r3, #20]
 800d574:	3301      	adds	r3, #1
 800d576:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 800d578:	89bb      	ldrh	r3, [r7, #12]
 800d57a:	2b09      	cmp	r3, #9
 800d57c:	d801      	bhi.n	800d582 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 800d57e:	89bb      	ldrh	r3, [r7, #12]
 800d580:	e000      	b.n	800d584 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 800d582:	2300      	movs	r3, #0
 800d584:	693a      	ldr	r2, [r7, #16]
 800d586:	89f9      	ldrh	r1, [r7, #14]
 800d588:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 800d58c:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	3322      	adds	r3, #34	; 0x22
 800d592:	61bb      	str	r3, [r7, #24]
 800d594:	f640 133f 	movw	r3, #2367	; 0x93f
 800d598:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 800d59a:	69bb      	ldr	r3, [r7, #24]
 800d59c:	8a9b      	ldrh	r3, [r3, #20]
 800d59e:	4619      	mov	r1, r3
 800d5a0:	69bb      	ldr	r3, [r7, #24]
 800d5a2:	8afa      	ldrh	r2, [r7, #22]
 800d5a4:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 800d5a8:	bf00      	nop
        }
    }
    return getNextChar();
 800d5aa:	6878      	ldr	r0, [r7, #4]
 800d5ac:	f009 fe10 	bl	80171d0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800d5b0:	4603      	mov	r3, r0
}
 800d5b2:	4618      	mov	r0, r3
 800d5b4:	3728      	adds	r7, #40	; 0x28
 800d5b6:	46bd      	mov	sp, r7
 800d5b8:	bd80      	pop	{r7, pc}
 800d5ba:	bf00      	nop
 800d5bc:	08024aac 	.word	0x08024aac
 800d5c0:	08024ab8 	.word	0x08024ab8
 800d5c4:	08024b64 	.word	0x08024b64
 800d5c8:	08024bac 	.word	0x08024bac
 800d5cc:	08024bbc 	.word	0x08024bbc
 800d5d0:	08024c90 	.word	0x08024c90
 800d5d4:	08024c9c 	.word	0x08024c9c

0800d5d8 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 800d5d8:	b580      	push	{r7, lr}
 800d5da:	b082      	sub	sp, #8
 800d5dc:	af00      	add	r7, sp, #0
 800d5de:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 800d5e0:	6878      	ldr	r0, [r7, #4]
 800d5e2:	f009 fdbe 	bl	8017162 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 800d5e6:	bf00      	nop
 800d5e8:	3708      	adds	r7, #8
 800d5ea:	46bd      	mov	sp, r7
 800d5ec:	bd80      	pop	{r7, pc}
	...

0800d5f0 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 800d5f0:	b590      	push	{r4, r7, lr}
 800d5f2:	b085      	sub	sp, #20
 800d5f4:	af00      	add	r7, sp, #0
 800d5f6:	4603      	mov	r3, r0
 800d5f8:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 800d5fa:	2300      	movs	r3, #0
 800d5fc:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 800d5fe:	88fb      	ldrh	r3, [r7, #6]
 800d600:	2b00      	cmp	r3, #0
 800d602:	d127      	bne.n	800d654 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 800d604:	88fb      	ldrh	r3, [r7, #6]
 800d606:	4a1e      	ldr	r2, [pc, #120]	; (800d680 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 800d608:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d016      	beq.n	800d63e <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 800d610:	88fb      	ldrh	r3, [r7, #6]
 800d612:	4a1b      	ldr	r2, [pc, #108]	; (800d680 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 800d614:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d618:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 800d61a:	68bb      	ldr	r3, [r7, #8]
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	68ba      	ldr	r2, [r7, #8]
 800d620:	4413      	add	r3, r2
 800d622:	4a18      	ldr	r2, [pc, #96]	; (800d684 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 800d624:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 800d626:	68bb      	ldr	r3, [r7, #8]
 800d628:	685b      	ldr	r3, [r3, #4]
 800d62a:	68ba      	ldr	r2, [r7, #8]
 800d62c:	4413      	add	r3, r2
 800d62e:	4a16      	ldr	r2, [pc, #88]	; (800d688 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 800d630:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 800d632:	68bb      	ldr	r3, [r7, #8]
 800d634:	689b      	ldr	r3, [r3, #8]
 800d636:	68ba      	ldr	r2, [r7, #8]
 800d638:	4413      	add	r3, r2
 800d63a:	60fb      	str	r3, [r7, #12]
 800d63c:	e00a      	b.n	800d654 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            // Compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 800d63e:	4b11      	ldr	r3, [pc, #68]	; (800d684 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 800d640:	4a12      	ldr	r2, [pc, #72]	; (800d68c <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 800d642:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 800d644:	4a12      	ldr	r2, [pc, #72]	; (800d690 <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 800d646:	4b10      	ldr	r3, [pc, #64]	; (800d688 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 800d648:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 800d64a:	88fb      	ldrh	r3, [r7, #6]
 800d64c:	4a11      	ldr	r2, [pc, #68]	; (800d694 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 800d64e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d652:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	2b00      	cmp	r3, #0
 800d658:	d00d      	beq.n	800d676 <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 800d65a:	4a0f      	ldr	r2, [pc, #60]	; (800d698 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 800d65c:	88fb      	ldrh	r3, [r7, #6]
 800d65e:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 800d660:	f000 f824 	bl	800d6ac <_ZN17TypedTextDatabase8getFontsEv>
 800d664:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 800d666:	f000 f819 	bl	800d69c <_ZN17TypedTextDatabase15getInstanceSizeEv>
 800d66a:	4603      	mov	r3, r0
 800d66c:	461a      	mov	r2, r3
 800d66e:	4621      	mov	r1, r4
 800d670:	68f8      	ldr	r0, [r7, #12]
 800d672:	f7ff febd 	bl	800d3f0 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 800d676:	bf00      	nop
 800d678:	3714      	adds	r7, #20
 800d67a:	46bd      	mov	sp, r7
 800d67c:	bd90      	pop	{r4, r7, pc}
 800d67e:	bf00      	nop
 800d680:	2001e178 	.word	0x2001e178
 800d684:	2001e180 	.word	0x2001e180
 800d688:	2001e184 	.word	0x2001e184
 800d68c:	901771ac 	.word	0x901771ac
 800d690:	901771a8 	.word	0x901771a8
 800d694:	901771b4 	.word	0x901771b4
 800d698:	2001e17c 	.word	0x2001e17c

0800d69c <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 800d69c:	b480      	push	{r7}
 800d69e:	af00      	add	r7, sp, #0
    return 0;
 800d6a0:	2300      	movs	r3, #0
}
 800d6a2:	4618      	mov	r0, r3
 800d6a4:	46bd      	mov	sp, r7
 800d6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6aa:	4770      	bx	lr

0800d6ac <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 800d6ac:	b480      	push	{r7}
 800d6ae:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 800d6b0:	4b02      	ldr	r3, [pc, #8]	; (800d6bc <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 800d6b2:	4618      	mov	r0, r3
 800d6b4:	46bd      	mov	sp, r7
 800d6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ba:	4770      	bx	lr
 800d6bc:	2001e188 	.word	0x2001e188

0800d6c0 <_Z41__static_initialization_and_destruction_0ii>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 800d6c0:	b580      	push	{r7, lr}
 800d6c2:	b082      	sub	sp, #8
 800d6c4:	af00      	add	r7, sp, #0
 800d6c6:	6078      	str	r0, [r7, #4]
 800d6c8:	6039      	str	r1, [r7, #0]
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	2b01      	cmp	r3, #1
 800d6ce:	d113      	bne.n	800d6f8 <_Z41__static_initialization_and_destruction_0ii+0x38>
 800d6d0:	683b      	ldr	r3, [r7, #0]
 800d6d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d6d6:	4293      	cmp	r3, r2
 800d6d8:	d10e      	bne.n	800d6f8 <_Z41__static_initialization_and_destruction_0ii+0x38>
    &(getFont_verdana_20_4bpp()),
 800d6da:	f7fe fc29 	bl	800bf30 <_Z23getFont_verdana_20_4bppv>
 800d6de:	4603      	mov	r3, r0
};
 800d6e0:	4a07      	ldr	r2, [pc, #28]	; (800d700 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800d6e2:	6013      	str	r3, [r2, #0]
    &(getFont_verdana_40_4bpp()),
 800d6e4:	f7fe fc7e 	bl	800bfe4 <_Z23getFont_verdana_40_4bppv>
 800d6e8:	4603      	mov	r3, r0
};
 800d6ea:	4a05      	ldr	r2, [pc, #20]	; (800d700 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800d6ec:	6053      	str	r3, [r2, #4]
    &(getFont_verdana_10_4bpp())
 800d6ee:	f7fe fbc5 	bl	800be7c <_Z23getFont_verdana_10_4bppv>
 800d6f2:	4603      	mov	r3, r0
};
 800d6f4:	4a02      	ldr	r2, [pc, #8]	; (800d700 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800d6f6:	6093      	str	r3, [r2, #8]
} // namespace TypedTextDatabase
 800d6f8:	bf00      	nop
 800d6fa:	3708      	adds	r7, #8
 800d6fc:	46bd      	mov	sp, r7
 800d6fe:	bd80      	pop	{r7, pc}
 800d700:	2001e188 	.word	0x2001e188

0800d704 <_GLOBAL__sub_I_touchgfx_fonts>:
 800d704:	b580      	push	{r7, lr}
 800d706:	af00      	add	r7, sp, #0
 800d708:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800d70c:	2001      	movs	r0, #1
 800d70e:	f7ff ffd7 	bl	800d6c0 <_Z41__static_initialization_and_destruction_0ii>
 800d712:	bd80      	pop	{r7, pc}

0800d714 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 800d714:	b580      	push	{r7, lr}
 800d716:	b082      	sub	sp, #8
 800d718:	af00      	add	r7, sp, #0
 800d71a:	6078      	str	r0, [r7, #4]
 800d71c:	4a05      	ldr	r2, [pc, #20]	; (800d734 <_ZN19FrontendApplicationD1Ev+0x20>)
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	601a      	str	r2, [r3, #0]
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	4618      	mov	r0, r3
 800d726:	f7fe febb 	bl	800c4a0 <_ZN23FrontendApplicationBaseD1Ev>
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	4618      	mov	r0, r3
 800d72e:	3708      	adds	r7, #8
 800d730:	46bd      	mov	sp, r7
 800d732:	bd80      	pop	{r7, pc}
 800d734:	08026ce8 	.word	0x08026ce8

0800d738 <_ZN19FrontendApplicationD0Ev>:
 800d738:	b580      	push	{r7, lr}
 800d73a:	b082      	sub	sp, #8
 800d73c:	af00      	add	r7, sp, #0
 800d73e:	6078      	str	r0, [r7, #4]
 800d740:	6878      	ldr	r0, [r7, #4]
 800d742:	f7ff ffe7 	bl	800d714 <_ZN19FrontendApplicationD1Ev>
 800d746:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 800d74a:	6878      	ldr	r0, [r7, #4]
 800d74c:	f015 feff 	bl	802354e <_ZdlPvj>
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	4618      	mov	r0, r3
 800d754:	3708      	adds	r7, #8
 800d756:	46bd      	mov	sp, r7
 800d758:	bd80      	pop	{r7, pc}

0800d75a <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 800d75a:	b580      	push	{r7, lr}
 800d75c:	b082      	sub	sp, #8
 800d75e:	af00      	add	r7, sp, #0
 800d760:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800d768:	4618      	mov	r0, r3
 800d76a:	f000 f82d 	bl	800d7c8 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	4618      	mov	r0, r3
 800d772:	f007 fd51 	bl	8015218 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 800d776:	bf00      	nop
 800d778:	3708      	adds	r7, #8
 800d77a:	46bd      	mov	sp, r7
 800d77c:	bd80      	pop	{r7, pc}
	...

0800d780 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 800d780:	b580      	push	{r7, lr}
 800d782:	b084      	sub	sp, #16
 800d784:	af00      	add	r7, sp, #0
 800d786:	60f8      	str	r0, [r7, #12]
 800d788:	60b9      	str	r1, [r7, #8]
 800d78a:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	687a      	ldr	r2, [r7, #4]
 800d790:	68b9      	ldr	r1, [r7, #8]
 800d792:	4618      	mov	r0, r3
 800d794:	f7fe fed4 	bl	800c540 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 800d798:	4a03      	ldr	r2, [pc, #12]	; (800d7a8 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	601a      	str	r2, [r3, #0]
{

}
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	4618      	mov	r0, r3
 800d7a2:	3710      	adds	r7, #16
 800d7a4:	46bd      	mov	sp, r7
 800d7a6:	bd80      	pop	{r7, pc}
 800d7a8:	08026ce8 	.word	0x08026ce8

0800d7ac <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 800d7ac:	b480      	push	{r7}
 800d7ae:	b083      	sub	sp, #12
 800d7b0:	af00      	add	r7, sp, #0
 800d7b2:	6078      	str	r0, [r7, #4]
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	2200      	movs	r2, #0
 800d7b8:	601a      	str	r2, [r3, #0]
{

}
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	4618      	mov	r0, r3
 800d7be:	370c      	adds	r7, #12
 800d7c0:	46bd      	mov	sp, r7
 800d7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c6:	4770      	bx	lr

0800d7c8 <_ZN5Model4tickEv>:

void Model::tick()
{
 800d7c8:	b480      	push	{r7}
 800d7ca:	b083      	sub	sp, #12
 800d7cc:	af00      	add	r7, sp, #0
 800d7ce:	6078      	str	r0, [r7, #4]

}
 800d7d0:	bf00      	nop
 800d7d2:	370c      	adds	r7, #12
 800d7d4:	46bd      	mov	sp, r7
 800d7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7da:	4770      	bx	lr

0800d7dc <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 800d7dc:	b480      	push	{r7}
 800d7de:	b083      	sub	sp, #12
 800d7e0:	af00      	add	r7, sp, #0
 800d7e2:	6078      	str	r0, [r7, #4]
    {
    }
 800d7e4:	bf00      	nop
 800d7e6:	370c      	adds	r7, #12
 800d7e8:	46bd      	mov	sp, r7
 800d7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ee:	4770      	bx	lr

0800d7f0 <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 800d7f0:	b480      	push	{r7}
 800d7f2:	b083      	sub	sp, #12
 800d7f4:	af00      	add	r7, sp, #0
 800d7f6:	6078      	str	r0, [r7, #4]
    {
    }
 800d7f8:	bf00      	nop
 800d7fa:	370c      	adds	r7, #12
 800d7fc:	46bd      	mov	sp, r7
 800d7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d802:	4770      	bx	lr

0800d804 <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 800d804:	b480      	push	{r7}
 800d806:	b083      	sub	sp, #12
 800d808:	af00      	add	r7, sp, #0
 800d80a:	6078      	str	r0, [r7, #4]
    {
 800d80c:	4a04      	ldr	r2, [pc, #16]	; (800d820 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	601a      	str	r2, [r3, #0]
    }
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	4618      	mov	r0, r3
 800d816:	370c      	adds	r7, #12
 800d818:	46bd      	mov	sp, r7
 800d81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d81e:	4770      	bx	lr
 800d820:	08026d6c 	.word	0x08026d6c

0800d824 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 800d824:	b580      	push	{r7, lr}
 800d826:	b082      	sub	sp, #8
 800d828:	af00      	add	r7, sp, #0
 800d82a:	6078      	str	r0, [r7, #4]
    }
 800d82c:	6878      	ldr	r0, [r7, #4]
 800d82e:	f7ff ffe9 	bl	800d804 <_ZN8touchgfx9PresenterD1Ev>
 800d832:	2104      	movs	r1, #4
 800d834:	6878      	ldr	r0, [r7, #4]
 800d836:	f015 fe8a 	bl	802354e <_ZdlPvj>
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	4618      	mov	r0, r3
 800d83e:	3708      	adds	r7, #8
 800d840:	46bd      	mov	sp, r7
 800d842:	bd80      	pop	{r7, pc}

0800d844 <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 800d844:	b480      	push	{r7}
 800d846:	b083      	sub	sp, #12
 800d848:	af00      	add	r7, sp, #0
 800d84a:	6078      	str	r0, [r7, #4]
    {
 800d84c:	4a04      	ldr	r2, [pc, #16]	; (800d860 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	601a      	str	r2, [r3, #0]
    }
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	4618      	mov	r0, r3
 800d856:	370c      	adds	r7, #12
 800d858:	46bd      	mov	sp, r7
 800d85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d85e:	4770      	bx	lr
 800d860:	08026d6c 	.word	0x08026d6c

0800d864 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 800d864:	b480      	push	{r7}
 800d866:	b083      	sub	sp, #12
 800d868:	af00      	add	r7, sp, #0
 800d86a:	6078      	str	r0, [r7, #4]
 800d86c:	4a06      	ldr	r2, [pc, #24]	; (800d888 <_ZN13ModelListenerC1Ev+0x24>)
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	601a      	str	r2, [r3, #0]
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	2200      	movs	r2, #0
 800d876:	605a      	str	r2, [r3, #4]
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	4618      	mov	r0, r3
 800d87c:	370c      	adds	r7, #12
 800d87e:	46bd      	mov	sp, r7
 800d880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d884:	4770      	bx	lr
 800d886:	bf00      	nop
 800d888:	08026d5c 	.word	0x08026d5c

0800d88c <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 800d88c:	b480      	push	{r7}
 800d88e:	b083      	sub	sp, #12
 800d890:	af00      	add	r7, sp, #0
 800d892:	6078      	str	r0, [r7, #4]
 800d894:	4a04      	ldr	r2, [pc, #16]	; (800d8a8 <_ZN13ModelListenerD1Ev+0x1c>)
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	601a      	str	r2, [r3, #0]
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	4618      	mov	r0, r3
 800d89e:	370c      	adds	r7, #12
 800d8a0:	46bd      	mov	sp, r7
 800d8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a6:	4770      	bx	lr
 800d8a8:	08026d5c 	.word	0x08026d5c

0800d8ac <_ZN13ModelListenerD0Ev>:
 800d8ac:	b580      	push	{r7, lr}
 800d8ae:	b082      	sub	sp, #8
 800d8b0:	af00      	add	r7, sp, #0
 800d8b2:	6078      	str	r0, [r7, #4]
 800d8b4:	6878      	ldr	r0, [r7, #4]
 800d8b6:	f7ff ffe9 	bl	800d88c <_ZN13ModelListenerD1Ev>
 800d8ba:	2108      	movs	r1, #8
 800d8bc:	6878      	ldr	r0, [r7, #4]
 800d8be:	f015 fe46 	bl	802354e <_ZdlPvj>
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	4618      	mov	r0, r3
 800d8c6:	3708      	adds	r7, #8
 800d8c8:	46bd      	mov	sp, r7
 800d8ca:	bd80      	pop	{r7, pc}

0800d8cc <_ZN15screenPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~screenPresenter() {};
 800d8cc:	b580      	push	{r7, lr}
 800d8ce:	b082      	sub	sp, #8
 800d8d0:	af00      	add	r7, sp, #0
 800d8d2:	6078      	str	r0, [r7, #4]
 800d8d4:	4a09      	ldr	r2, [pc, #36]	; (800d8fc <_ZN15screenPresenterD1Ev+0x30>)
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	601a      	str	r2, [r3, #0]
 800d8da:	4a09      	ldr	r2, [pc, #36]	; (800d900 <_ZN15screenPresenterD1Ev+0x34>)
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	605a      	str	r2, [r3, #4]
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	3304      	adds	r3, #4
 800d8e4:	4618      	mov	r0, r3
 800d8e6:	f7ff ffd1 	bl	800d88c <_ZN13ModelListenerD1Ev>
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	4618      	mov	r0, r3
 800d8ee:	f7ff ff89 	bl	800d804 <_ZN8touchgfx9PresenterD1Ev>
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	4618      	mov	r0, r3
 800d8f6:	3708      	adds	r7, #8
 800d8f8:	46bd      	mov	sp, r7
 800d8fa:	bd80      	pop	{r7, pc}
 800d8fc:	08026d34 	.word	0x08026d34
 800d900:	08026d4c 	.word	0x08026d4c

0800d904 <_ZThn4_N15screenPresenterD1Ev>:
 800d904:	f1a0 0004 	sub.w	r0, r0, #4
 800d908:	e7e0      	b.n	800d8cc <_ZN15screenPresenterD1Ev>
 800d90a:	bf00      	nop

0800d90c <_ZN15screenPresenterD0Ev>:
 800d90c:	b580      	push	{r7, lr}
 800d90e:	b082      	sub	sp, #8
 800d910:	af00      	add	r7, sp, #0
 800d912:	6078      	str	r0, [r7, #4]
 800d914:	6878      	ldr	r0, [r7, #4]
 800d916:	f7ff ffd9 	bl	800d8cc <_ZN15screenPresenterD1Ev>
 800d91a:	2110      	movs	r1, #16
 800d91c:	6878      	ldr	r0, [r7, #4]
 800d91e:	f015 fe16 	bl	802354e <_ZdlPvj>
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	4618      	mov	r0, r3
 800d926:	3708      	adds	r7, #8
 800d928:	46bd      	mov	sp, r7
 800d92a:	bd80      	pop	{r7, pc}

0800d92c <_ZThn4_N15screenPresenterD0Ev>:
 800d92c:	f1a0 0004 	sub.w	r0, r0, #4
 800d930:	e7ec      	b.n	800d90c <_ZN15screenPresenterD0Ev>
	...

0800d934 <_ZN15screenPresenterC1ER10screenView>:
#include <gui/screen_screen/screenView.hpp>
#include <gui/screen_screen/screenPresenter.hpp>

screenPresenter::screenPresenter(screenView& v)
 800d934:	b580      	push	{r7, lr}
 800d936:	b082      	sub	sp, #8
 800d938:	af00      	add	r7, sp, #0
 800d93a:	6078      	str	r0, [r7, #4]
 800d93c:	6039      	str	r1, [r7, #0]
    : view(v)
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	4618      	mov	r0, r3
 800d942:	f7ff ff7f 	bl	800d844 <_ZN8touchgfx9PresenterC1Ev>
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	3304      	adds	r3, #4
 800d94a:	4618      	mov	r0, r3
 800d94c:	f7ff ff8a 	bl	800d864 <_ZN13ModelListenerC1Ev>
 800d950:	4a06      	ldr	r2, [pc, #24]	; (800d96c <_ZN15screenPresenterC1ER10screenView+0x38>)
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	601a      	str	r2, [r3, #0]
 800d956:	4a06      	ldr	r2, [pc, #24]	; (800d970 <_ZN15screenPresenterC1ER10screenView+0x3c>)
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	605a      	str	r2, [r3, #4]
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	683a      	ldr	r2, [r7, #0]
 800d960:	60da      	str	r2, [r3, #12]
{

}
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	4618      	mov	r0, r3
 800d966:	3708      	adds	r7, #8
 800d968:	46bd      	mov	sp, r7
 800d96a:	bd80      	pop	{r7, pc}
 800d96c:	08026d34 	.word	0x08026d34
 800d970:	08026d4c 	.word	0x08026d4c

0800d974 <_ZN15screenPresenter8activateEv>:

void screenPresenter::activate()
{
 800d974:	b480      	push	{r7}
 800d976:	b083      	sub	sp, #12
 800d978:	af00      	add	r7, sp, #0
 800d97a:	6078      	str	r0, [r7, #4]

}
 800d97c:	bf00      	nop
 800d97e:	370c      	adds	r7, #12
 800d980:	46bd      	mov	sp, r7
 800d982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d986:	4770      	bx	lr

0800d988 <_ZN15screenPresenter10deactivateEv>:

void screenPresenter::deactivate()
{
 800d988:	b480      	push	{r7}
 800d98a:	b083      	sub	sp, #12
 800d98c:	af00      	add	r7, sp, #0
 800d98e:	6078      	str	r0, [r7, #4]

}
 800d990:	bf00      	nop
 800d992:	370c      	adds	r7, #12
 800d994:	46bd      	mov	sp, r7
 800d996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d99a:	4770      	bx	lr

0800d99c <_ZN10screenViewD1Ev>:

class screenView : public screenViewBase
{
public:
    screenView();
    virtual ~screenView() {}
 800d99c:	b580      	push	{r7, lr}
 800d99e:	b082      	sub	sp, #8
 800d9a0:	af00      	add	r7, sp, #0
 800d9a2:	6078      	str	r0, [r7, #4]
 800d9a4:	4a05      	ldr	r2, [pc, #20]	; (800d9bc <_ZN10screenViewD1Ev+0x20>)
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	601a      	str	r2, [r3, #0]
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	4618      	mov	r0, r3
 800d9ae:	f7ff fc37 	bl	800d220 <_ZN14screenViewBaseD1Ev>
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	4618      	mov	r0, r3
 800d9b6:	3708      	adds	r7, #8
 800d9b8:	46bd      	mov	sp, r7
 800d9ba:	bd80      	pop	{r7, pc}
 800d9bc:	08026d84 	.word	0x08026d84

0800d9c0 <_ZN10screenViewD0Ev>:
 800d9c0:	b580      	push	{r7, lr}
 800d9c2:	b082      	sub	sp, #8
 800d9c4:	af00      	add	r7, sp, #0
 800d9c6:	6078      	str	r0, [r7, #4]
 800d9c8:	6878      	ldr	r0, [r7, #4]
 800d9ca:	f7ff ffe7 	bl	800d99c <_ZN10screenViewD1Ev>
 800d9ce:	2198      	movs	r1, #152	; 0x98
 800d9d0:	6878      	ldr	r0, [r7, #4]
 800d9d2:	f015 fdbc 	bl	802354e <_ZdlPvj>
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	4618      	mov	r0, r3
 800d9da:	3708      	adds	r7, #8
 800d9dc:	46bd      	mov	sp, r7
 800d9de:	bd80      	pop	{r7, pc}

0800d9e0 <_ZN10screenViewC1Ev>:
#include <gui/screen_screen/screenView.hpp>

screenView::screenView()
 800d9e0:	b580      	push	{r7, lr}
 800d9e2:	b082      	sub	sp, #8
 800d9e4:	af00      	add	r7, sp, #0
 800d9e6:	6078      	str	r0, [r7, #4]
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	4618      	mov	r0, r3
 800d9ec:	f7ff fba2 	bl	800d134 <_ZN14screenViewBaseC1Ev>
 800d9f0:	4a03      	ldr	r2, [pc, #12]	; (800da00 <_ZN10screenViewC1Ev+0x20>)
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	601a      	str	r2, [r3, #0]
{

}
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	4618      	mov	r0, r3
 800d9fa:	3708      	adds	r7, #8
 800d9fc:	46bd      	mov	sp, r7
 800d9fe:	bd80      	pop	{r7, pc}
 800da00:	08026d84 	.word	0x08026d84

0800da04 <_ZN10screenView11setupScreenEv>:

void screenView::setupScreen()
{
 800da04:	b580      	push	{r7, lr}
 800da06:	b082      	sub	sp, #8
 800da08:	af00      	add	r7, sp, #0
 800da0a:	6078      	str	r0, [r7, #4]
    screenViewBase::setupScreen();
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	4618      	mov	r0, r3
 800da10:	f7ff fc32 	bl	800d278 <_ZN14screenViewBase11setupScreenEv>
}
 800da14:	bf00      	nop
 800da16:	3708      	adds	r7, #8
 800da18:	46bd      	mov	sp, r7
 800da1a:	bd80      	pop	{r7, pc}

0800da1c <_ZN10screenView14tearDownScreenEv>:

void screenView::tearDownScreen()
{
 800da1c:	b580      	push	{r7, lr}
 800da1e:	b082      	sub	sp, #8
 800da20:	af00      	add	r7, sp, #0
 800da22:	6078      	str	r0, [r7, #4]
    screenViewBase::tearDownScreen();
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	4618      	mov	r0, r3
 800da28:	f7ff fa84 	bl	800cf34 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 800da2c:	bf00      	nop
 800da2e:	3708      	adds	r7, #8
 800da30:	46bd      	mov	sp, r7
 800da32:	bd80      	pop	{r7, pc}

0800da34 <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 800da34:	b480      	push	{r7}
 800da36:	b083      	sub	sp, #12
 800da38:	af00      	add	r7, sp, #0
 800da3a:	6078      	str	r0, [r7, #4]
    {
 800da3c:	4a04      	ldr	r2, [pc, #16]	; (800da50 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	601a      	str	r2, [r3, #0]
    }
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	4618      	mov	r0, r3
 800da46:	370c      	adds	r7, #12
 800da48:	46bd      	mov	sp, r7
 800da4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da4e:	4770      	bx	lr
 800da50:	08026dd0 	.word	0x08026dd0

0800da54 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 800da54:	b580      	push	{r7, lr}
 800da56:	b082      	sub	sp, #8
 800da58:	af00      	add	r7, sp, #0
 800da5a:	6078      	str	r0, [r7, #4]
    }
 800da5c:	6878      	ldr	r0, [r7, #4]
 800da5e:	f7ff ffe9 	bl	800da34 <_ZN8touchgfx15TouchControllerD1Ev>
 800da62:	2104      	movs	r1, #4
 800da64:	6878      	ldr	r0, [r7, #4]
 800da66:	f015 fd72 	bl	802354e <_ZdlPvj>
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	4618      	mov	r0, r3
 800da6e:	3708      	adds	r7, #8
 800da70:	46bd      	mov	sp, r7
 800da72:	bd80      	pop	{r7, pc}

0800da74 <_ZN20STM32TouchController4initEv>:
/* USER CODE BEGIN STM32TouchController */

#include <STM32TouchController.hpp>

void STM32TouchController::init()
{
 800da74:	b480      	push	{r7}
 800da76:	b083      	sub	sp, #12
 800da78:	af00      	add	r7, sp, #0
 800da7a:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
}
 800da7c:	bf00      	nop
 800da7e:	370c      	adds	r7, #12
 800da80:	46bd      	mov	sp, r7
 800da82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da86:	4770      	bx	lr

0800da88 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 800da88:	b480      	push	{r7}
 800da8a:	b085      	sub	sp, #20
 800da8c:	af00      	add	r7, sp, #0
 800da8e:	60f8      	str	r0, [r7, #12]
 800da90:	60b9      	str	r1, [r7, #8]
 800da92:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    return false;
 800da94:	2300      	movs	r3, #0
}
 800da96:	4618      	mov	r0, r3
 800da98:	3714      	adds	r7, #20
 800da9a:	46bd      	mov	sp, r7
 800da9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daa0:	4770      	bx	lr
	...

0800daa4 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 800daa4:	b580      	push	{r7, lr}
 800daa6:	b082      	sub	sp, #8
 800daa8:	af00      	add	r7, sp, #0
 800daaa:	6078      	str	r0, [r7, #4]
 800daac:	4a05      	ldr	r2, [pc, #20]	; (800dac4 <_ZN20STM32TouchControllerD1Ev+0x20>)
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	601a      	str	r2, [r3, #0]
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	4618      	mov	r0, r3
 800dab6:	f7ff ffbd 	bl	800da34 <_ZN8touchgfx15TouchControllerD1Ev>
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	4618      	mov	r0, r3
 800dabe:	3708      	adds	r7, #8
 800dac0:	46bd      	mov	sp, r7
 800dac2:	bd80      	pop	{r7, pc}
 800dac4:	08026db8 	.word	0x08026db8

0800dac8 <_ZN20STM32TouchControllerD0Ev>:
 800dac8:	b580      	push	{r7, lr}
 800daca:	b082      	sub	sp, #8
 800dacc:	af00      	add	r7, sp, #0
 800dace:	6078      	str	r0, [r7, #4]
 800dad0:	6878      	ldr	r0, [r7, #4]
 800dad2:	f7ff ffe7 	bl	800daa4 <_ZN20STM32TouchControllerD1Ev>
 800dad6:	2104      	movs	r1, #4
 800dad8:	6878      	ldr	r0, [r7, #4]
 800dada:	f015 fd38 	bl	802354e <_ZdlPvj>
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	4618      	mov	r0, r3
 800dae2:	3708      	adds	r7, #8
 800dae4:	46bd      	mov	sp, r7
 800dae6:	bd80      	pop	{r7, pc}

0800dae8 <_ZN8touchgfx4GPIO4initEv>:

/*
 * Perform configuration of IO pins.
 */
void GPIO::init()
{
 800dae8:	b480      	push	{r7}
 800daea:	af00      	add	r7, sp, #0

}
 800daec:	bf00      	nop
 800daee:	46bd      	mov	sp, r7
 800daf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daf4:	4770      	bx	lr
	...

0800daf8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 800daf8:	b480      	push	{r7}
 800dafa:	b083      	sub	sp, #12
 800dafc:	af00      	add	r7, sp, #0
 800dafe:	4603      	mov	r3, r0
 800db00:	71fb      	strb	r3, [r7, #7]
    switch (id)
 800db02:	79fb      	ldrb	r3, [r7, #7]
 800db04:	2b03      	cmp	r3, #3
 800db06:	d80c      	bhi.n	800db22 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x2a>
 800db08:	a201      	add	r2, pc, #4	; (adr r2, 800db10 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>)
 800db0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db0e:	bf00      	nop
 800db10:	0800db21 	.word	0x0800db21
 800db14:	0800db21 	.word	0x0800db21
 800db18:	0800db21 	.word	0x0800db21
 800db1c:	0800db21 	.word	0x0800db21
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_SET);
#endif
        break;
 800db20:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_SET);
#endif
        break;
    }
}
 800db22:	bf00      	nop
 800db24:	370c      	adds	r7, #12
 800db26:	46bd      	mov	sp, r7
 800db28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db2c:	4770      	bx	lr
 800db2e:	bf00      	nop

0800db30 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 800db30:	b480      	push	{r7}
 800db32:	b083      	sub	sp, #12
 800db34:	af00      	add	r7, sp, #0
 800db36:	4603      	mov	r3, r0
 800db38:	71fb      	strb	r3, [r7, #7]
    switch (id)
 800db3a:	79fb      	ldrb	r3, [r7, #7]
 800db3c:	2b03      	cmp	r3, #3
 800db3e:	d80c      	bhi.n	800db5a <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x2a>
 800db40:	a201      	add	r2, pc, #4	; (adr r2, 800db48 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>)
 800db42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db46:	bf00      	nop
 800db48:	0800db59 	.word	0x0800db59
 800db4c:	0800db59 	.word	0x0800db59
 800db50:	0800db59 	.word	0x0800db59
 800db54:	0800db59 	.word	0x0800db59
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_RESET);
#endif
        break;
 800db58:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
#endif
        break;
    }
}
 800db5a:	bf00      	nop
 800db5c:	370c      	adds	r7, #12
 800db5e:	46bd      	mov	sp, r7
 800db60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db64:	4770      	bx	lr
 800db66:	bf00      	nop

0800db68 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 800db68:	b480      	push	{r7}
 800db6a:	b083      	sub	sp, #12
 800db6c:	af00      	add	r7, sp, #0
 800db6e:	4603      	mov	r3, r0
 800db70:	71fb      	strb	r3, [r7, #7]
    switch (id)
 800db72:	79fb      	ldrb	r3, [r7, #7]
 800db74:	2b03      	cmp	r3, #3
 800db76:	d80c      	bhi.n	800db92 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2a>
 800db78:	a201      	add	r2, pc, #4	; (adr r2, 800db80 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>)
 800db7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db7e:	bf00      	nop
 800db80:	0800db91 	.word	0x0800db91
 800db84:	0800db91 	.word	0x0800db91
 800db88:	0800db91 	.word	0x0800db91
 800db8c:	0800db91 	.word	0x0800db91
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
#endif
        break;
 800db90:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
#endif
        break;
    }
}
 800db92:	bf00      	nop
 800db94:	370c      	adds	r7, #12
 800db96:	46bd      	mov	sp, r7
 800db98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db9c:	4770      	bx	lr
 800db9e:	bf00      	nop

0800dba0 <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 800dba0:	b480      	push	{r7}
 800dba2:	b083      	sub	sp, #12
 800dba4:	af00      	add	r7, sp, #0
 800dba6:	6078      	str	r0, [r7, #4]
    {
 800dba8:	4a04      	ldr	r2, [pc, #16]	; (800dbbc <_ZN8touchgfx3HALD1Ev+0x1c>)
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	601a      	str	r2, [r3, #0]
    }
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	4618      	mov	r0, r3
 800dbb2:	370c      	adds	r7, #12
 800dbb4:	46bd      	mov	sp, r7
 800dbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbba:	4770      	bx	lr
 800dbbc:	080278b0 	.word	0x080278b0

0800dbc0 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 800dbc0:	b580      	push	{r7, lr}
 800dbc2:	b082      	sub	sp, #8
 800dbc4:	af00      	add	r7, sp, #0
 800dbc6:	6078      	str	r0, [r7, #4]
    }
 800dbc8:	6878      	ldr	r0, [r7, #4]
 800dbca:	f7ff ffe9 	bl	800dba0 <_ZN8touchgfx3HALD1Ev>
 800dbce:	217c      	movs	r1, #124	; 0x7c
 800dbd0:	6878      	ldr	r0, [r7, #4]
 800dbd2:	f015 fcbc 	bl	802354e <_ZdlPvj>
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	4618      	mov	r0, r3
 800dbda:	3708      	adds	r7, #8
 800dbdc:	46bd      	mov	sp, r7
 800dbde:	bd80      	pop	{r7, pc}

0800dbe0 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 800dbe0:	b480      	push	{r7}
 800dbe2:	b083      	sub	sp, #12
 800dbe4:	af00      	add	r7, sp, #0
 800dbe6:	6078      	str	r0, [r7, #4]
 800dbe8:	460b      	mov	r3, r1
 800dbea:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	78fa      	ldrb	r2, [r7, #3]
 800dbf0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	2201      	movs	r2, #1
 800dbf8:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 800dbfc:	bf00      	nop
 800dbfe:	370c      	adds	r7, #12
 800dc00:	46bd      	mov	sp, r7
 800dc02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc06:	4770      	bx	lr

0800dc08 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 800dc08:	b580      	push	{r7, lr}
 800dc0a:	b082      	sub	sp, #8
 800dc0c:	af00      	add	r7, sp, #0
 800dc0e:	6078      	str	r0, [r7, #4]
 800dc10:	460b      	mov	r3, r1
 800dc12:	807b      	strh	r3, [r7, #2]
 800dc14:	4613      	mov	r3, r2
 800dc16:	803b      	strh	r3, [r7, #0]
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 800dc18:	4b0c      	ldr	r3, [pc, #48]	; (800dc4c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x44>)
 800dc1a:	881b      	ldrh	r3, [r3, #0]
 800dc1c:	887a      	ldrh	r2, [r7, #2]
 800dc1e:	429a      	cmp	r2, r3
 800dc20:	d304      	bcc.n	800dc2c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x24>
 800dc22:	4b0b      	ldr	r3, [pc, #44]	; (800dc50 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x48>)
 800dc24:	881b      	ldrh	r3, [r3, #0]
 800dc26:	883a      	ldrh	r2, [r7, #0]
 800dc28:	429a      	cmp	r2, r3
 800dc2a:	d205      	bcs.n	800dc38 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>
 800dc2c:	4b09      	ldr	r3, [pc, #36]	; (800dc54 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x4c>)
 800dc2e:	4a0a      	ldr	r2, [pc, #40]	; (800dc58 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x50>)
 800dc30:	219e      	movs	r1, #158	; 0x9e
 800dc32:	480a      	ldr	r0, [pc, #40]	; (800dc5c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x54>)
 800dc34:	f015 fcba 	bl	80235ac <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 800dc38:	4a09      	ldr	r2, [pc, #36]	; (800dc60 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x58>)
 800dc3a:	887b      	ldrh	r3, [r7, #2]
 800dc3c:	8013      	strh	r3, [r2, #0]
        FRAME_BUFFER_HEIGHT = height;
 800dc3e:	4a09      	ldr	r2, [pc, #36]	; (800dc64 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x5c>)
 800dc40:	883b      	ldrh	r3, [r7, #0]
 800dc42:	8013      	strh	r3, [r2, #0]
    }
 800dc44:	bf00      	nop
 800dc46:	3708      	adds	r7, #8
 800dc48:	46bd      	mov	sp, r7
 800dc4a:	bd80      	pop	{r7, pc}
 800dc4c:	200243d0 	.word	0x200243d0
 800dc50:	200243d2 	.word	0x200243d2
 800dc54:	08024d50 	.word	0x08024d50
 800dc58:	08024db4 	.word	0x08024db4
 800dc5c:	08024df8 	.word	0x08024df8
 800dc60:	200243d6 	.word	0x200243d6
 800dc64:	200243d8 	.word	0x200243d8

0800dc68 <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 800dc68:	b580      	push	{r7, lr}
 800dc6a:	b082      	sub	sp, #8
 800dc6c:	af00      	add	r7, sp, #0
 800dc6e:	6078      	str	r0, [r7, #4]
    {
        if (useDMAAcceleration)
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d009      	beq.n	800dc8e <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
        {
            return dma.getBlitCaps();
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	685a      	ldr	r2, [r3, #4]
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	685b      	ldr	r3, [r3, #4]
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	4610      	mov	r0, r2
 800dc88:	4798      	blx	r3
 800dc8a:	4603      	mov	r3, r0
 800dc8c:	e000      	b.n	800dc90 <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        }
        return static_cast<BlitOperations>(0);
 800dc8e:	2300      	movs	r3, #0
    }
 800dc90:	4618      	mov	r0, r3
 800dc92:	3708      	adds	r7, #8
 800dc94:	46bd      	mov	sp, r7
 800dc96:	bd80      	pop	{r7, pc}

0800dc98 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    /**
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     */
    virtual void backPorchExited()
 800dc98:	b580      	push	{r7, lr}
 800dc9a:	b082      	sub	sp, #8
 800dc9c:	af00      	add	r7, sp, #0
 800dc9e:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 800dca0:	6878      	ldr	r0, [r7, #4]
 800dca2:	f006 f82f 	bl	8013d04 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	33ac      	adds	r3, #172	; 0xac
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	6878      	ldr	r0, [r7, #4]
 800dcb0:	4798      	blx	r3
    }
 800dcb2:	bf00      	nop
 800dcb4:	3708      	adds	r7, #8
 800dcb6:	46bd      	mov	sp, r7
 800dcb8:	bd80      	pop	{r7, pc}

0800dcba <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 800dcba:	b480      	push	{r7}
 800dcbc:	b083      	sub	sp, #12
 800dcbe:	af00      	add	r7, sp, #0
 800dcc0:	6078      	str	r0, [r7, #4]
 800dcc2:	6039      	str	r1, [r7, #0]
    {
        (void)key; // Unused variable
        return false;
 800dcc4:	2300      	movs	r3, #0
    }
 800dcc6:	4618      	mov	r0, r3
 800dcc8:	370c      	adds	r7, #12
 800dcca:	46bd      	mov	sp, r7
 800dccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcd0:	4770      	bx	lr
	...

0800dcd4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     *
     * @see setAnimationStorage
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 800dcd4:	b580      	push	{r7, lr}
 800dcd6:	b084      	sub	sp, #16
 800dcd8:	af00      	add	r7, sp, #0
 800dcda:	60f8      	str	r0, [r7, #12]
 800dcdc:	60b9      	str	r1, [r7, #8]
 800dcde:	607a      	str	r2, [r7, #4]
 800dce0:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 800dce2:	68bb      	ldr	r3, [r7, #8]
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d106      	bne.n	800dcf6 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 800dce8:	4b0f      	ldr	r3, [pc, #60]	; (800dd28 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x54>)
 800dcea:	4a10      	ldr	r2, [pc, #64]	; (800dd2c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x58>)
 800dcec:	f240 21d2 	movw	r1, #722	; 0x2d2
 800dcf0:	480f      	ldr	r0, [pc, #60]	; (800dd30 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 800dcf2:	f015 fc5b 	bl	80235ac <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	68ba      	ldr	r2, [r7, #8]
 800dcfa:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	687a      	ldr	r2, [r7, #4]
 800dd00:	641a      	str	r2, [r3, #64]	; 0x40
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	bf14      	ite	ne
 800dd08:	2301      	movne	r3, #1
 800dd0a:	2300      	moveq	r3, #0
 800dd0c:	b2da      	uxtb	r2, r3
 800dd0e:	4b09      	ldr	r3, [pc, #36]	; (800dd34 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 800dd10:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	338c      	adds	r3, #140	; 0x8c
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	6839      	ldr	r1, [r7, #0]
 800dd1c:	68f8      	ldr	r0, [r7, #12]
 800dd1e:	4798      	blx	r3
    }
 800dd20:	bf00      	nop
 800dd22:	3710      	adds	r7, #16
 800dd24:	46bd      	mov	sp, r7
 800dd26:	bd80      	pop	{r7, pc}
 800dd28:	08024e3c 	.word	0x08024e3c
 800dd2c:	08024e74 	.word	0x08024e74
 800dd30:	08024df8 	.word	0x08024df8
 800dd34:	200243da 	.word	0x200243da

0800dd38 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
 800dd38:	b480      	push	{r7}
 800dd3a:	b083      	sub	sp, #12
 800dd3c:	af00      	add	r7, sp, #0
 800dd3e:	6078      	str	r0, [r7, #4]
 800dd40:	6039      	str	r1, [r7, #0]
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	683a      	ldr	r2, [r7, #0]
 800dd46:	645a      	str	r2, [r3, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 800dd48:	683b      	ldr	r3, [r7, #0]
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	bf14      	ite	ne
 800dd4e:	2301      	movne	r3, #1
 800dd50:	2300      	moveq	r3, #0
 800dd52:	b2da      	uxtb	r2, r3
 800dd54:	4b03      	ldr	r3, [pc, #12]	; (800dd64 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x2c>)
 800dd56:	701a      	strb	r2, [r3, #0]
    }
 800dd58:	bf00      	nop
 800dd5a:	370c      	adds	r7, #12
 800dd5c:	46bd      	mov	sp, r7
 800dd5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd62:	4770      	bx	lr
 800dd64:	200243db 	.word	0x200243db

0800dd68 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * Gets the flash data reader. This method must be implemented in
     * subclasses that uses a FlashDataReader object.
     *
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
 800dd68:	b480      	push	{r7}
 800dd6a:	b083      	sub	sp, #12
 800dd6c:	af00      	add	r7, sp, #0
 800dd6e:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800dd70:	2300      	movs	r3, #0
    }
 800dd72:	4618      	mov	r0, r3
 800dd74:	370c      	adds	r7, #12
 800dd76:	46bd      	mov	sp, r7
 800dd78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd7c:	4770      	bx	lr

0800dd7e <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 800dd7e:	b580      	push	{r7, lr}
 800dd80:	b082      	sub	sp, #8
 800dd82:	af00      	add	r7, sp, #0
 800dd84:	6078      	str	r0, [r7, #4]
 800dd86:	460b      	mov	r3, r1
 800dd88:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d004      	beq.n	800dd9c <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd96:	887a      	ldrh	r2, [r7, #2]
 800dd98:	4610      	mov	r0, r2
 800dd9a:	4798      	blx	r3
        }
    }
 800dd9c:	bf00      	nop
 800dd9e:	3708      	adds	r7, #8
 800dda0:	46bd      	mov	sp, r7
 800dda2:	bd80      	pop	{r7, pc}

0800dda4 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     * getTFTCurrentLine function is never called and can be disregarded.
     *
     * @return In this default implementation, 0xFFFF is returned to signify "not
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
 800dda4:	b480      	push	{r7}
 800dda6:	b083      	sub	sp, #12
 800dda8:	af00      	add	r7, sp, #0
 800ddaa:	6078      	str	r0, [r7, #4]
    {
        return 0xFFFFu;
 800ddac:	f64f 73ff 	movw	r3, #65535	; 0xffff
    }
 800ddb0:	4618      	mov	r0, r3
 800ddb2:	370c      	adds	r7, #12
 800ddb4:	46bd      	mov	sp, r7
 800ddb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddba:	4770      	bx	lr

0800ddbc <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 800ddbc:	b580      	push	{r7, lr}
 800ddbe:	b082      	sub	sp, #8
 800ddc0:	af00      	add	r7, sp, #0
 800ddc2:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	685a      	ldr	r2, [r3, #4]
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	685b      	ldr	r3, [r3, #4]
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	3318      	adds	r3, #24
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	4610      	mov	r0, r2
 800ddd4:	4798      	blx	r3
 800ddd6:	4603      	mov	r3, r0
    }
 800ddd8:	4618      	mov	r0, r3
 800ddda:	3708      	adds	r7, #8
 800dddc:	46bd      	mov	sp, r7
 800ddde:	bd80      	pop	{r7, pc}

0800dde0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 800dde0:	b480      	push	{r7}
 800dde2:	b085      	sub	sp, #20
 800dde4:	af00      	add	r7, sp, #0
 800dde6:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ddf4:	429a      	cmp	r2, r3
 800ddf6:	d011      	beq.n	800de1c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>
        {
            if (DISPLAY_ROTATION == rotate0)
 800ddf8:	4b14      	ldr	r3, [pc, #80]	; (800de4c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 800ddfa:	781b      	ldrb	r3, [r3, #0]
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d11e      	bne.n	800de3e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 800de00:	4b13      	ldr	r3, [pc, #76]	; (800de50 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 800de02:	881b      	ldrh	r3, [r3, #0]
 800de04:	81bb      	strh	r3, [r7, #12]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 800de06:	4b13      	ldr	r3, [pc, #76]	; (800de54 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 800de08:	881a      	ldrh	r2, [r3, #0]
 800de0a:	4b11      	ldr	r3, [pc, #68]	; (800de50 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 800de0c:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = tmp;
 800de0e:	4a11      	ldr	r2, [pc, #68]	; (800de54 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 800de10:	89bb      	ldrh	r3, [r7, #12]
 800de12:	8013      	strh	r3, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 800de14:	4b0d      	ldr	r3, [pc, #52]	; (800de4c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 800de16:	2201      	movs	r2, #1
 800de18:	701a      	strb	r2, [r3, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
        }
    }
 800de1a:	e010      	b.n	800de3e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
        else if (DISPLAY_ROTATION != rotate0)
 800de1c:	4b0b      	ldr	r3, [pc, #44]	; (800de4c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 800de1e:	781b      	ldrb	r3, [r3, #0]
 800de20:	2b00      	cmp	r3, #0
 800de22:	d00c      	beq.n	800de3e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            const uint16_t tmp = DISPLAY_HEIGHT;
 800de24:	4b0a      	ldr	r3, [pc, #40]	; (800de50 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 800de26:	881b      	ldrh	r3, [r3, #0]
 800de28:	81fb      	strh	r3, [r7, #14]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 800de2a:	4b0a      	ldr	r3, [pc, #40]	; (800de54 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 800de2c:	881a      	ldrh	r2, [r3, #0]
 800de2e:	4b08      	ldr	r3, [pc, #32]	; (800de50 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 800de30:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = tmp;
 800de32:	4a08      	ldr	r2, [pc, #32]	; (800de54 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 800de34:	89fb      	ldrh	r3, [r7, #14]
 800de36:	8013      	strh	r3, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 800de38:	4b04      	ldr	r3, [pc, #16]	; (800de4c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 800de3a:	2200      	movs	r2, #0
 800de3c:	701a      	strb	r2, [r3, #0]
    }
 800de3e:	bf00      	nop
 800de40:	3714      	adds	r7, #20
 800de42:	46bd      	mov	sp, r7
 800de44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de48:	4770      	bx	lr
 800de4a:	bf00      	nop
 800de4c:	200243d4 	.word	0x200243d4
 800de50:	200243d2 	.word	0x200243d2
 800de54:	200243d0 	.word	0x200243d0

0800de58 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 800de58:	b580      	push	{r7, lr}
 800de5a:	b082      	sub	sp, #8
 800de5c:	af00      	add	r7, sp, #0
 800de5e:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	4618      	mov	r0, r3
 800de64:	f005 f9b2 	bl	80131cc <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 800de68:	bf00      	nop
 800de6a:	3708      	adds	r7, #8
 800de6c:	46bd      	mov	sp, r7
 800de6e:	bd80      	pop	{r7, pc}

0800de70 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 800de70:	b580      	push	{r7, lr}
 800de72:	b082      	sub	sp, #8
 800de74:	af00      	add	r7, sp, #0
 800de76:	6078      	str	r0, [r7, #4]
 800de78:	4a05      	ldr	r2, [pc, #20]	; (800de90 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	601a      	str	r2, [r3, #0]
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	4618      	mov	r0, r3
 800de82:	f7ff fe8d 	bl	800dba0 <_ZN8touchgfx3HALD1Ev>
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	4618      	mov	r0, r3
 800de8a:	3708      	adds	r7, #8
 800de8c:	46bd      	mov	sp, r7
 800de8e:	bd80      	pop	{r7, pc}
 800de90:	08027108 	.word	0x08027108

0800de94 <_ZN20TouchGFXGeneratedHALD0Ev>:
 800de94:	b580      	push	{r7, lr}
 800de96:	b082      	sub	sp, #8
 800de98:	af00      	add	r7, sp, #0
 800de9a:	6078      	str	r0, [r7, #4]
 800de9c:	6878      	ldr	r0, [r7, #4]
 800de9e:	f7ff ffe7 	bl	800de70 <_ZN20TouchGFXGeneratedHALD1Ev>
 800dea2:	217c      	movs	r1, #124	; 0x7c
 800dea4:	6878      	ldr	r0, [r7, #4]
 800dea6:	f015 fb52 	bl	802354e <_ZdlPvj>
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	4618      	mov	r0, r3
 800deae:	3708      	adds	r7, #8
 800deb0:	46bd      	mov	sp, r7
 800deb2:	bd80      	pop	{r7, pc}

0800deb4 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 800deb4:	b580      	push	{r7, lr}
 800deb6:	b082      	sub	sp, #8
 800deb8:	af00      	add	r7, sp, #0
 800deba:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	4618      	mov	r0, r3
 800dec0:	f7ff ffca 	bl	800de58 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 800dec4:	bf00      	nop
 800dec6:	3708      	adds	r7, #8
 800dec8:	46bd      	mov	sp, r7
 800deca:	bd80      	pop	{r7, pc}

0800decc <_ZN11TouchGFXHAL10initializeEv>:
/* USER CODE BEGIN TouchGFXHAL.cpp */

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 800decc:	b580      	push	{r7, lr}
 800dece:	b082      	sub	sp, #8
 800ded0:	af00      	add	r7, sp, #0
 800ded2:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	4618      	mov	r0, r3
 800ded8:	f002 fba8 	bl	801062c <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 800dedc:	bf00      	nop
 800dede:	3708      	adds	r7, #8
 800dee0:	46bd      	mov	sp, r7
 800dee2:	bd80      	pop	{r7, pc}

0800dee4 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 800dee4:	b580      	push	{r7, lr}
 800dee6:	b082      	sub	sp, #8
 800dee8:	af00      	add	r7, sp, #0
 800deea:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	4618      	mov	r0, r3
 800def0:	f002 fc1c 	bl	801072c <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 800def4:	4603      	mov	r3, r0
}
 800def6:	4618      	mov	r0, r3
 800def8:	3708      	adds	r7, #8
 800defa:	46bd      	mov	sp, r7
 800defc:	bd80      	pop	{r7, pc}

0800defe <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 800defe:	b580      	push	{r7, lr}
 800df00:	b082      	sub	sp, #8
 800df02:	af00      	add	r7, sp, #0
 800df04:	6078      	str	r0, [r7, #4]
 800df06:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	6839      	ldr	r1, [r7, #0]
 800df0c:	4618      	mov	r0, r3
 800df0e:	f002 fc1b 	bl	8010748 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 800df12:	bf00      	nop
 800df14:	3708      	adds	r7, #8
 800df16:	46bd      	mov	sp, r7
 800df18:	bd80      	pop	{r7, pc}

0800df1a <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 800df1a:	b580      	push	{r7, lr}
 800df1c:	b082      	sub	sp, #8
 800df1e:	af00      	add	r7, sp, #0
 800df20:	6078      	str	r0, [r7, #4]
 800df22:	6039      	str	r1, [r7, #0]
    // be called to notify the touchgfx framework that flush has been performed.
    // To calculate he start adress of rect,
    // use advanceFrameBufferToRect(uint8_t* fbPtr, const touchgfx::Rect& rect)
    // defined in TouchGFXGeneratedHAL.cpp

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	6839      	ldr	r1, [r7, #0]
 800df28:	4618      	mov	r0, r3
 800df2a:	f002 fc18 	bl	801075e <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
}
 800df2e:	bf00      	nop
 800df30:	3708      	adds	r7, #8
 800df32:	46bd      	mov	sp, r7
 800df34:	bd80      	pop	{r7, pc}

0800df36 <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 800df36:	b580      	push	{r7, lr}
 800df38:	b084      	sub	sp, #16
 800df3a:	af00      	add	r7, sp, #0
 800df3c:	60f8      	str	r0, [r7, #12]
 800df3e:	60b9      	str	r1, [r7, #8]
 800df40:	607a      	str	r2, [r7, #4]
 800df42:	603b      	str	r3, [r7, #0]
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 800df44:	68f8      	ldr	r0, [r7, #12]
 800df46:	683b      	ldr	r3, [r7, #0]
 800df48:	687a      	ldr	r2, [r7, #4]
 800df4a:	68b9      	ldr	r1, [r7, #8]
 800df4c:	f002 fc15 	bl	801077a <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>
 800df50:	4603      	mov	r3, r0
}
 800df52:	4618      	mov	r0, r3
 800df54:	3710      	adds	r7, #16
 800df56:	46bd      	mov	sp, r7
 800df58:	bd80      	pop	{r7, pc}

0800df5a <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 800df5a:	b580      	push	{r7, lr}
 800df5c:	b082      	sub	sp, #8
 800df5e:	af00      	add	r7, sp, #0
 800df60:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	4618      	mov	r0, r3
 800df66:	f002 fb95 	bl	8010694 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 800df6a:	bf00      	nop
 800df6c:	3708      	adds	r7, #8
 800df6e:	46bd      	mov	sp, r7
 800df70:	bd80      	pop	{r7, pc}

0800df72 <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 800df72:	b580      	push	{r7, lr}
 800df74:	b082      	sub	sp, #8
 800df76:	af00      	add	r7, sp, #0
 800df78:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	4618      	mov	r0, r3
 800df7e:	f002 fb95 	bl	80106ac <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 800df82:	bf00      	nop
 800df84:	3708      	adds	r7, #8
 800df86:	46bd      	mov	sp, r7
 800df88:	bd80      	pop	{r7, pc}

0800df8a <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 800df8a:	b580      	push	{r7, lr}
 800df8c:	b082      	sub	sp, #8
 800df8e:	af00      	add	r7, sp, #0
 800df90:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	4618      	mov	r0, r3
 800df96:	f002 fb94 	bl	80106c2 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 800df9a:	bf00      	nop
 800df9c:	3708      	adds	r7, #8
 800df9e:	46bd      	mov	sp, r7
 800dfa0:	bd80      	pop	{r7, pc}

0800dfa2 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 800dfa2:	b580      	push	{r7, lr}
 800dfa4:	b082      	sub	sp, #8
 800dfa6:	af00      	add	r7, sp, #0
 800dfa8:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	4618      	mov	r0, r3
 800dfae:	f002 fb93 	bl	80106d8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 800dfb2:	bf00      	nop
 800dfb4:	3708      	adds	r7, #8
 800dfb6:	46bd      	mov	sp, r7
 800dfb8:	bd80      	pop	{r7, pc}

0800dfba <_ZN11TouchGFXHAL10beginFrameEv>:

bool TouchGFXHAL::beginFrame()
{
 800dfba:	b580      	push	{r7, lr}
 800dfbc:	b082      	sub	sp, #8
 800dfbe:	af00      	add	r7, sp, #0
 800dfc0:	6078      	str	r0, [r7, #4]
    return TouchGFXGeneratedHAL::beginFrame();
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	4618      	mov	r0, r3
 800dfc6:	f002 fb91 	bl	80106ec <_ZN20TouchGFXGeneratedHAL10beginFrameEv>
 800dfca:	4603      	mov	r3, r0
}
 800dfcc:	4618      	mov	r0, r3
 800dfce:	3708      	adds	r7, #8
 800dfd0:	46bd      	mov	sp, r7
 800dfd2:	bd80      	pop	{r7, pc}

0800dfd4 <_ZN11TouchGFXHAL8endFrameEv>:

void TouchGFXHAL::endFrame()
{
 800dfd4:	b580      	push	{r7, lr}
 800dfd6:	b082      	sub	sp, #8
 800dfd8:	af00      	add	r7, sp, #0
 800dfda:	6078      	str	r0, [r7, #4]
    TouchGFXGeneratedHAL::endFrame();
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	4618      	mov	r0, r3
 800dfe0:	f002 fb92 	bl	8010708 <_ZN20TouchGFXGeneratedHAL8endFrameEv>
}
 800dfe4:	bf00      	nop
 800dfe6:	3708      	adds	r7, #8
 800dfe8:	46bd      	mov	sp, r7
 800dfea:	bd80      	pop	{r7, pc}

0800dfec <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 800dfec:	b580      	push	{r7, lr}
 800dfee:	b082      	sub	sp, #8
 800dff0:	af00      	add	r7, sp, #0
 800dff2:	6078      	str	r0, [r7, #4]
 800dff4:	4a05      	ldr	r2, [pc, #20]	; (800e00c <_ZN11TouchGFXHALD1Ev+0x20>)
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	601a      	str	r2, [r3, #0]
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	4618      	mov	r0, r3
 800dffe:	f7ff ff37 	bl	800de70 <_ZN20TouchGFXGeneratedHALD1Ev>
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	4618      	mov	r0, r3
 800e006:	3708      	adds	r7, #8
 800e008:	46bd      	mov	sp, r7
 800e00a:	bd80      	pop	{r7, pc}
 800e00c:	08026de8 	.word	0x08026de8

0800e010 <_ZN11TouchGFXHALD0Ev>:
 800e010:	b580      	push	{r7, lr}
 800e012:	b082      	sub	sp, #8
 800e014:	af00      	add	r7, sp, #0
 800e016:	6078      	str	r0, [r7, #4]
 800e018:	6878      	ldr	r0, [r7, #4]
 800e01a:	f7ff ffe7 	bl	800dfec <_ZN11TouchGFXHALD1Ev>
 800e01e:	217c      	movs	r1, #124	; 0x7c
 800e020:	6878      	ldr	r0, [r7, #4]
 800e022:	f015 fa94 	bl	802354e <_ZdlPvj>
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	4618      	mov	r0, r3
 800e02a:	3708      	adds	r7, #8
 800e02c:	46bd      	mov	sp, r7
 800e02e:	bd80      	pop	{r7, pc}

0800e030 <_ZN12MJPEGDecoderD1Ev>:
#include <touchgfx/hal/VideoController.hpp>

class MJPEGDecoder
{
public:
    virtual ~MJPEGDecoder()
 800e030:	b480      	push	{r7}
 800e032:	b083      	sub	sp, #12
 800e034:	af00      	add	r7, sp, #0
 800e036:	6078      	str	r0, [r7, #4]
    {
 800e038:	4a04      	ldr	r2, [pc, #16]	; (800e04c <_ZN12MJPEGDecoderD1Ev+0x1c>)
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	601a      	str	r2, [r3, #0]
    }
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	4618      	mov	r0, r3
 800e042:	370c      	adds	r7, #12
 800e044:	46bd      	mov	sp, r7
 800e046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e04a:	4770      	bx	lr
 800e04c:	08026f04 	.word	0x08026f04

0800e050 <_ZN12MJPEGDecoderD0Ev>:
    virtual ~MJPEGDecoder()
 800e050:	b580      	push	{r7, lr}
 800e052:	b082      	sub	sp, #8
 800e054:	af00      	add	r7, sp, #0
 800e056:	6078      	str	r0, [r7, #4]
    }
 800e058:	6878      	ldr	r0, [r7, #4]
 800e05a:	f7ff ffe9 	bl	800e030 <_ZN12MJPEGDecoderD1Ev>
 800e05e:	2104      	movs	r1, #4
 800e060:	6878      	ldr	r0, [r7, #4]
 800e062:	f015 fa74 	bl	802354e <_ZdlPvj>
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	4618      	mov	r0, r3
 800e06a:	3708      	adds	r7, #8
 800e06c:	46bd      	mov	sp, r7
 800e06e:	bd80      	pop	{r7, pc}

0800e070 <_ZNK20HardwareMJPEGDecoder21getCurrentFrameNumberEv>:
    virtual bool gotoNextFrame();
    //Decode part of the current frame
    virtual bool decodeFrame(const touchgfx::Rect& area, uint8_t* frameBuffer, uint32_t framebuffer_width);
    virtual bool decodeThumbnail(uint32_t frameno, uint8_t* buffer, uint16_t width, uint16_t height);
    virtual void gotoFrame(uint32_t frameno);
    virtual uint32_t getCurrentFrameNumber() const { return frameNumber; }
 800e070:	b480      	push	{r7}
 800e072:	b083      	sub	sp, #12
 800e074:	af00      	add	r7, sp, #0
 800e076:	6078      	str	r0, [r7, #4]
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	695b      	ldr	r3, [r3, #20]
 800e07c:	4618      	mov	r0, r3
 800e07e:	370c      	adds	r7, #12
 800e080:	46bd      	mov	sp, r7
 800e082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e086:	4770      	bx	lr

0800e088 <_ZN20HardwareMJPEGDecoder12getLastErrorEv>:
    virtual void setRepeatVideo(bool repeat);
    virtual void getVideoInfo(touchgfx::VideoInformation* data);

    void setAVIFileBuffer(uint8_t* buffer, uint32_t size) { aviBuffer = buffer, aviBufferLength = size; }

    virtual AVIErrors getLastError() { return lastError; }
 800e088:	b480      	push	{r7}
 800e08a:	b083      	sub	sp, #12
 800e08c:	af00      	add	r7, sp, #0
 800e08e:	6078      	str	r0, [r7, #4]
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e096:	4618      	mov	r0, r3
 800e098:	370c      	adds	r7, #12
 800e09a:	46bd      	mov	sp, r7
 800e09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0a0:	4770      	bx	lr
	...

0800e0a4 <SCB_CleanInvalidateDCache>:
/**
  \brief   Clean & Invalidate D-Cache
  \details Cleans and Invalidates D-Cache
  */
__STATIC_INLINE void SCB_CleanInvalidateDCache (void)
{
 800e0a4:	b480      	push	{r7}
 800e0a6:	b085      	sub	sp, #20
 800e0a8:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800e0aa:	4b21      	ldr	r3, [pc, #132]	; (800e130 <SCB_CleanInvalidateDCache+0x8c>)
 800e0ac:	2200      	movs	r2, #0
 800e0ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800e0b2:	f3bf 8f4f 	dsb	sy
}
 800e0b6:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800e0b8:	4b1d      	ldr	r3, [pc, #116]	; (800e130 <SCB_CleanInvalidateDCache+0x8c>)
 800e0ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e0be:	607b      	str	r3, [r7, #4]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	0b5b      	lsrs	r3, r3, #13
 800e0c4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800e0c8:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	08db      	lsrs	r3, r3, #3
 800e0ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e0d2:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	015a      	lsls	r2, r3, #5
 800e0d8:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800e0dc:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 800e0de:	68ba      	ldr	r2, [r7, #8]
 800e0e0:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800e0e2:	4913      	ldr	r1, [pc, #76]	; (800e130 <SCB_CleanInvalidateDCache+0x8c>)
 800e0e4:	4313      	orrs	r3, r2
 800e0e6:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800e0ea:	68bb      	ldr	r3, [r7, #8]
 800e0ec:	1e5a      	subs	r2, r3, #1
 800e0ee:	60ba      	str	r2, [r7, #8]
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	bf14      	ite	ne
 800e0f4:	2301      	movne	r3, #1
 800e0f6:	2300      	moveq	r3, #0
 800e0f8:	b2db      	uxtb	r3, r3
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d000      	beq.n	800e100 <SCB_CleanInvalidateDCache+0x5c>
      do {
 800e0fe:	e7e9      	b.n	800e0d4 <SCB_CleanInvalidateDCache+0x30>
    } while(sets-- != 0U);
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	1e5a      	subs	r2, r3, #1
 800e104:	60fa      	str	r2, [r7, #12]
 800e106:	2b00      	cmp	r3, #0
 800e108:	bf14      	ite	ne
 800e10a:	2301      	movne	r3, #1
 800e10c:	2300      	moveq	r3, #0
 800e10e:	b2db      	uxtb	r3, r3
 800e110:	2b00      	cmp	r3, #0
 800e112:	d000      	beq.n	800e116 <SCB_CleanInvalidateDCache+0x72>
    do {
 800e114:	e7d9      	b.n	800e0ca <SCB_CleanInvalidateDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 800e116:	f3bf 8f4f 	dsb	sy
}
 800e11a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800e11c:	f3bf 8f6f 	isb	sy
}
 800e120:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 800e122:	bf00      	nop
 800e124:	3714      	adds	r7, #20
 800e126:	46bd      	mov	sp, r7
 800e128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e12c:	4770      	bx	lr
 800e12e:	bf00      	nop
 800e130:	e000ed00 	.word	0xe000ed00

0800e134 <_ZN12MJPEGDecoderC1Ev>:
class MJPEGDecoder
 800e134:	b480      	push	{r7}
 800e136:	b083      	sub	sp, #12
 800e138:	af00      	add	r7, sp, #0
 800e13a:	6078      	str	r0, [r7, #4]
 800e13c:	4a04      	ldr	r2, [pc, #16]	; (800e150 <_ZN12MJPEGDecoderC1Ev+0x1c>)
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	601a      	str	r2, [r3, #0]
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	4618      	mov	r0, r3
 800e146:	370c      	adds	r7, #12
 800e148:	46bd      	mov	sp, r7
 800e14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e14e:	4770      	bx	lr
 800e150:	08026f04 	.word	0x08026f04

0800e154 <_ZN20HardwareMJPEGDecoderC1Ev>:
  uint32_t LastLineHeight;
  uint32_t MCU_pr_line;
  uint32_t bytes_pr_pixel;
} JPEG_ConvertorParams;

HardwareMJPEGDecoder::HardwareMJPEGDecoder()
 800e154:	b580      	push	{r7, lr}
 800e156:	b082      	sub	sp, #8
 800e158:	af00      	add	r7, sp, #0
 800e15a:	6078      	str	r0, [r7, #4]
    : frameNumber(0), currentMovieOffset(0), indexOffset(0), firstFrameOffset(0), lastFrameEnd(0), movieLength(0), movieData(0),
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	4618      	mov	r0, r3
 800e160:	f7ff ffe8 	bl	800e134 <_ZN12MJPEGDecoderC1Ev>
 800e164:	4a21      	ldr	r2, [pc, #132]	; (800e1ec <_ZN20HardwareMJPEGDecoderC1Ev+0x98>)
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	601a      	str	r2, [r3, #0]
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	2200      	movs	r2, #0
 800e16e:	615a      	str	r2, [r3, #20]
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	2200      	movs	r2, #0
 800e174:	619a      	str	r2, [r3, #24]
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	2200      	movs	r2, #0
 800e17a:	61da      	str	r2, [r3, #28]
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	2200      	movs	r2, #0
 800e180:	621a      	str	r2, [r3, #32]
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	2200      	movs	r2, #0
 800e186:	625a      	str	r2, [r3, #36]	; 0x24
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	2200      	movs	r2, #0
 800e18c:	629a      	str	r2, [r3, #40]	; 0x28
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	2200      	movs	r2, #0
 800e192:	62da      	str	r2, [r3, #44]	; 0x2c
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	2200      	movs	r2, #0
 800e198:	631a      	str	r2, [r3, #48]	; 0x30
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	2200      	movs	r2, #0
 800e19e:	635a      	str	r2, [r3, #52]	; 0x34
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	2200      	movs	r2, #0
 800e1a4:	639a      	str	r2, [r3, #56]	; 0x38
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	2200      	movs	r2, #0
 800e1aa:	63da      	str	r2, [r3, #60]	; 0x3c
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	2200      	movs	r2, #0
 800e1b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
{
    //Clear video info
    videoInfo.frame_height = 0;
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	2200      	movs	r2, #0
 800e1b8:	611a      	str	r2, [r3, #16]
    videoInfo.frame_width = 0;
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	2200      	movs	r2, #0
 800e1be:	60da      	str	r2, [r3, #12]
    videoInfo.ms_between_frames = 0;
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	2200      	movs	r2, #0
 800e1c4:	605a      	str	r2, [r3, #4]
    videoInfo.number_of_frames = 0;
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	2200      	movs	r2, #0
 800e1ca:	609a      	str	r2, [r3, #8]

    //Init color tables
    TGFX_JPEG_InitColorTables();
 800e1cc:	f003 fe2e 	bl	8011e2c <TGFX_JPEG_InitColorTables>

    //Create decoding semaphore
    semDecodingDone = SEM_CREATE();
 800e1d0:	2200      	movs	r2, #0
 800e1d2:	2100      	movs	r1, #0
 800e1d4:	2001      	movs	r0, #1
 800e1d6:	f7fa f847 	bl	8008268 <osSemaphoreNew>
 800e1da:	4603      	mov	r3, r0
 800e1dc:	4a04      	ldr	r2, [pc, #16]	; (800e1f0 <_ZN20HardwareMJPEGDecoderC1Ev+0x9c>)
 800e1de:	6013      	str	r3, [r2, #0]
}
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	4618      	mov	r0, r3
 800e1e4:	3708      	adds	r7, #8
 800e1e6:	46bd      	mov	sp, r7
 800e1e8:	bd80      	pop	{r7, pc}
 800e1ea:	bf00      	nop
 800e1ec:	08026ec0 	.word	0x08026ec0
 800e1f0:	2001e1c4 	.word	0x2001e1c4

0800e1f4 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>:

int HardwareMJPEGDecoder::compare(const uint32_t offset, const char* str, uint32_t num)
{
 800e1f4:	b580      	push	{r7, lr}
 800e1f6:	b086      	sub	sp, #24
 800e1f8:	af00      	add	r7, sp, #0
 800e1fa:	60f8      	str	r0, [r7, #12]
 800e1fc:	60b9      	str	r1, [r7, #8]
 800e1fe:	607a      	str	r2, [r7, #4]
 800e200:	603b      	str	r3, [r7, #0]
    const char* src;
    if (reader != 0)
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e206:	2b00      	cmp	r3, #0
 800e208:	d008      	beq.n	800e21c <_ZN20HardwareMJPEGDecoder7compareEmPKcm+0x28>
    {
        // Assuming data is in buffer!
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e20e:	68fb      	ldr	r3, [r7, #12]
 800e210:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e212:	68b9      	ldr	r1, [r7, #8]
 800e214:	1acb      	subs	r3, r1, r3
 800e216:	4413      	add	r3, r2
 800e218:	617b      	str	r3, [r7, #20]
 800e21a:	e004      	b.n	800e226 <_ZN20HardwareMJPEGDecoder7compareEmPKcm+0x32>
    }
    else
    {
        src = (const char*)movieData + offset;
 800e21c:	68fb      	ldr	r3, [r7, #12]
 800e21e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e220:	68bb      	ldr	r3, [r7, #8]
 800e222:	4413      	add	r3, r2
 800e224:	617b      	str	r3, [r7, #20]
    }
    return strncmp(src, str, num);
 800e226:	683a      	ldr	r2, [r7, #0]
 800e228:	6879      	ldr	r1, [r7, #4]
 800e22a:	6978      	ldr	r0, [r7, #20]
 800e22c:	f015 fe78 	bl	8023f20 <strncmp>
 800e230:	4603      	mov	r3, r0
}
 800e232:	4618      	mov	r0, r3
 800e234:	3718      	adds	r7, #24
 800e236:	46bd      	mov	sp, r7
 800e238:	bd80      	pop	{r7, pc}

0800e23a <_ZN20HardwareMJPEGDecoder6getU32Em>:

inline uint32_t HardwareMJPEGDecoder::getU32(const uint32_t offset)
{
 800e23a:	b480      	push	{r7}
 800e23c:	b085      	sub	sp, #20
 800e23e:	af00      	add	r7, sp, #0
 800e240:	6078      	str	r0, [r7, #4]
 800e242:	6039      	str	r1, [r7, #0]
    if (reader != 0)
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d024      	beq.n	800e296 <_ZN20HardwareMJPEGDecoder6getU32Em+0x5c>
    {
        // Assuming data is in buffer!
        const uint32_t index = offset - aviBufferStartOffset;
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e250:	683a      	ldr	r2, [r7, #0]
 800e252:	1ad3      	subs	r3, r2, r3
 800e254:	60bb      	str	r3, [r7, #8]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e25a:	68bb      	ldr	r3, [r7, #8]
 800e25c:	4413      	add	r3, r2
 800e25e:	781b      	ldrb	r3, [r3, #0]
 800e260:	4619      	mov	r1, r3
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e266:	68bb      	ldr	r3, [r7, #8]
 800e268:	3301      	adds	r3, #1
 800e26a:	4413      	add	r3, r2
 800e26c:	781b      	ldrb	r3, [r3, #0]
 800e26e:	021b      	lsls	r3, r3, #8
 800e270:	ea41 0203 	orr.w	r2, r1, r3
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800e278:	68bb      	ldr	r3, [r7, #8]
 800e27a:	3302      	adds	r3, #2
 800e27c:	440b      	add	r3, r1
 800e27e:	781b      	ldrb	r3, [r3, #0]
 800e280:	041b      	lsls	r3, r3, #16
 800e282:	431a      	orrs	r2, r3
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800e288:	68bb      	ldr	r3, [r7, #8]
 800e28a:	3303      	adds	r3, #3
 800e28c:	440b      	add	r3, r1
 800e28e:	781b      	ldrb	r3, [r3, #0]
 800e290:	061b      	lsls	r3, r3, #24
 800e292:	4313      	orrs	r3, r2
 800e294:	e016      	b.n	800e2c4 <_ZN20HardwareMJPEGDecoder6getU32Em+0x8a>
    }
    else
    {
        const uint8_t* const d = movieData + offset;
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e29a:	683b      	ldr	r3, [r7, #0]
 800e29c:	4413      	add	r3, r2
 800e29e:	60fb      	str	r3, [r7, #12]
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	781b      	ldrb	r3, [r3, #0]
 800e2a4:	461a      	mov	r2, r3
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	3301      	adds	r3, #1
 800e2aa:	781b      	ldrb	r3, [r3, #0]
 800e2ac:	021b      	lsls	r3, r3, #8
 800e2ae:	431a      	orrs	r2, r3
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	3302      	adds	r3, #2
 800e2b4:	781b      	ldrb	r3, [r3, #0]
 800e2b6:	041b      	lsls	r3, r3, #16
 800e2b8:	431a      	orrs	r2, r3
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	3303      	adds	r3, #3
 800e2be:	781b      	ldrb	r3, [r3, #0]
 800e2c0:	061b      	lsls	r3, r3, #24
 800e2c2:	4313      	orrs	r3, r2
    }
}
 800e2c4:	4618      	mov	r0, r3
 800e2c6:	3714      	adds	r7, #20
 800e2c8:	46bd      	mov	sp, r7
 800e2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ce:	4770      	bx	lr

0800e2d0 <_ZN20HardwareMJPEGDecoder6getU16Em>:

inline uint32_t HardwareMJPEGDecoder::getU16(const uint32_t offset)
{
 800e2d0:	b480      	push	{r7}
 800e2d2:	b085      	sub	sp, #20
 800e2d4:	af00      	add	r7, sp, #0
 800e2d6:	6078      	str	r0, [r7, #4]
 800e2d8:	6039      	str	r1, [r7, #0]
    if (reader != 0)
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d013      	beq.n	800e30a <_ZN20HardwareMJPEGDecoder6getU16Em+0x3a>
    {
        // Assuming data is in buffer!
        const uint32_t index = offset - aviBufferStartOffset;
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e2e6:	683a      	ldr	r2, [r7, #0]
 800e2e8:	1ad3      	subs	r3, r2, r3
 800e2ea:	60bb      	str	r3, [r7, #8]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8);
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e2f0:	68bb      	ldr	r3, [r7, #8]
 800e2f2:	4413      	add	r3, r2
 800e2f4:	781b      	ldrb	r3, [r3, #0]
 800e2f6:	4619      	mov	r1, r3
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e2fc:	68bb      	ldr	r3, [r7, #8]
 800e2fe:	3301      	adds	r3, #1
 800e300:	4413      	add	r3, r2
 800e302:	781b      	ldrb	r3, [r3, #0]
 800e304:	021b      	lsls	r3, r3, #8
 800e306:	430b      	orrs	r3, r1
 800e308:	e00c      	b.n	800e324 <_ZN20HardwareMJPEGDecoder6getU16Em+0x54>
    }
    else
    {
        const uint8_t* const d = movieData + offset;
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e30e:	683b      	ldr	r3, [r7, #0]
 800e310:	4413      	add	r3, r2
 800e312:	60fb      	str	r3, [r7, #12]
        return d[0] | (d[1] << 8);
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	781b      	ldrb	r3, [r3, #0]
 800e318:	461a      	mov	r2, r3
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	3301      	adds	r3, #1
 800e31e:	781b      	ldrb	r3, [r3, #0]
 800e320:	021b      	lsls	r3, r3, #8
 800e322:	4313      	orrs	r3, r2
    }
}
 800e324:	4618      	mov	r0, r3
 800e326:	3714      	adds	r7, #20
 800e328:	46bd      	mov	sp, r7
 800e32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e32e:	4770      	bx	lr

0800e330 <_ZN20HardwareMJPEGDecoder8readDataEmm>:

const uint8_t* HardwareMJPEGDecoder::readData(uint32_t offset, uint32_t length)
{
 800e330:	b580      	push	{r7, lr}
 800e332:	b084      	sub	sp, #16
 800e334:	af00      	add	r7, sp, #0
 800e336:	60f8      	str	r0, [r7, #12]
 800e338:	60b9      	str	r1, [r7, #8]
 800e33a:	607a      	str	r2, [r7, #4]
    if (reader != 0)
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e340:	2b00      	cmp	r3, #0
 800e342:	d033      	beq.n	800e3ac <_ZN20HardwareMJPEGDecoder8readDataEmm+0x7c>
    {
        if (length > aviBufferLength)
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e348:	687a      	ldr	r2, [r7, #4]
 800e34a:	429a      	cmp	r2, r3
 800e34c:	d909      	bls.n	800e362 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x32>
        {
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	2209      	movs	r2, #9
 800e352:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
            assert(!"Buffer to small");
 800e356:	4b19      	ldr	r3, [pc, #100]	; (800e3bc <_ZN20HardwareMJPEGDecoder8readDataEmm+0x8c>)
 800e358:	4a19      	ldr	r2, [pc, #100]	; (800e3c0 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x90>)
 800e35a:	21a7      	movs	r1, #167	; 0xa7
 800e35c:	4819      	ldr	r0, [pc, #100]	; (800e3c4 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x94>)
 800e35e:	f015 f925 	bl	80235ac <__assert_func>
        }

        reader->seek(offset);
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	330c      	adds	r3, #12
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	68b9      	ldr	r1, [r7, #8]
 800e372:	4610      	mov	r0, r2
 800e374:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	3310      	adds	r3, #16
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	68fa      	ldr	r2, [r7, #12]
 800e386:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800e388:	687a      	ldr	r2, [r7, #4]
 800e38a:	4798      	blx	r3
 800e38c:	4603      	mov	r3, r0
 800e38e:	f083 0301 	eor.w	r3, r3, #1
 800e392:	b2db      	uxtb	r3, r3
 800e394:	2b00      	cmp	r3, #0
 800e396:	d003      	beq.n	800e3a0 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x70>
        {
            lastError = AVI_ERROR_EOF_REACHED;
 800e398:	68fb      	ldr	r3, [r7, #12]
 800e39a:	220d      	movs	r2, #13
 800e39c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        }

        aviBufferStartOffset = offset;
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	68ba      	ldr	r2, [r7, #8]
 800e3a4:	63da      	str	r2, [r3, #60]	; 0x3c
        return aviBuffer;
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3aa:	e003      	b.n	800e3b4 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x84>
    }

    return movieData + offset;
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3b0:	68bb      	ldr	r3, [r7, #8]
 800e3b2:	4413      	add	r3, r2
}
 800e3b4:	4618      	mov	r0, r3
 800e3b6:	3710      	adds	r7, #16
 800e3b8:	46bd      	mov	sp, r7
 800e3ba:	bd80      	pop	{r7, pc}
 800e3bc:	08024ec4 	.word	0x08024ec4
 800e3c0:	08024ed8 	.word	0x08024ed8
 800e3c4:	08024f1c 	.word	0x08024f1c

0800e3c8 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm>:

bool HardwareMJPEGDecoder::decodeNextFrame(uint8_t* buffer, uint16_t buffer_width, uint16_t buffer_height, uint32_t buffer_stride)
{
 800e3c8:	b580      	push	{r7, lr}
 800e3ca:	b08e      	sub	sp, #56	; 0x38
 800e3cc:	af04      	add	r7, sp, #16
 800e3ce:	60f8      	str	r0, [r7, #12]
 800e3d0:	60b9      	str	r1, [r7, #8]
 800e3d2:	4611      	mov	r1, r2
 800e3d4:	461a      	mov	r2, r3
 800e3d6:	460b      	mov	r3, r1
 800e3d8:	80fb      	strh	r3, [r7, #6]
 800e3da:	4613      	mov	r3, r2
 800e3dc:	80bb      	strh	r3, [r7, #4]
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	695b      	ldr	r3, [r3, #20]
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d105      	bne.n	800e3f2 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x2a>
 800e3e6:	4b4e      	ldr	r3, [pc, #312]	; (800e520 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x158>)
 800e3e8:	4a4e      	ldr	r2, [pc, #312]	; (800e524 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x15c>)
 800e3ea:	21b9      	movs	r1, #185	; 0xb9
 800e3ec:	484e      	ldr	r0, [pc, #312]	; (800e528 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x160>)
 800e3ee:	f015 f8dd 	bl	80235ac <__assert_func>

    //find next frame and decode it
    readData(currentMovieOffset, 8);
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	699b      	ldr	r3, [r3, #24]
 800e3f6:	2208      	movs	r2, #8
 800e3f8:	4619      	mov	r1, r3
 800e3fa:	68f8      	ldr	r0, [r7, #12]
 800e3fc:	f7ff ff98 	bl	800e330 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    uint32_t streamNo  = getU16(currentMovieOffset);
 800e400:	68fb      	ldr	r3, [r7, #12]
 800e402:	699b      	ldr	r3, [r3, #24]
 800e404:	4619      	mov	r1, r3
 800e406:	68f8      	ldr	r0, [r7, #12]
 800e408:	f7ff ff62 	bl	800e2d0 <_ZN20HardwareMJPEGDecoder6getU16Em>
 800e40c:	6238      	str	r0, [r7, #32]
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 800e40e:	68fb      	ldr	r3, [r7, #12]
 800e410:	699b      	ldr	r3, [r3, #24]
 800e412:	3302      	adds	r3, #2
 800e414:	4619      	mov	r1, r3
 800e416:	68f8      	ldr	r0, [r7, #12]
 800e418:	f7ff ff5a 	bl	800e2d0 <_ZN20HardwareMJPEGDecoder6getU16Em>
 800e41c:	61f8      	str	r0, [r7, #28]
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	699b      	ldr	r3, [r3, #24]
 800e422:	3304      	adds	r3, #4
 800e424:	4619      	mov	r1, r3
 800e426:	68f8      	ldr	r0, [r7, #12]
 800e428:	f7ff ff07 	bl	800e23a <_ZN20HardwareMJPEGDecoder6getU32Em>
 800e42c:	61b8      	str	r0, [r7, #24]

    const uint16_t STREAM0 = 0x3030;
 800e42e:	f243 0330 	movw	r3, #12336	; 0x3030
 800e432:	82fb      	strh	r3, [r7, #22]
    const uint16_t TYPEDC  = 0x6364;
 800e434:	f246 3364 	movw	r3, #25444	; 0x6364
 800e438:	82bb      	strh	r3, [r7, #20]

    bool isCurrentFrameLast;
    //play frame if we have it all
    if (currentMovieOffset + 8 + chunkSize < movieLength)
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	699a      	ldr	r2, [r3, #24]
 800e43e:	69bb      	ldr	r3, [r7, #24]
 800e440:	4413      	add	r3, r2
 800e442:	f103 0208 	add.w	r2, r3, #8
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e44a:	429a      	cmp	r2, r3
 800e44c:	d255      	bcs.n	800e4fa <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x132>
    {
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 800e44e:	6a3b      	ldr	r3, [r7, #32]
 800e450:	f243 0230 	movw	r2, #12336	; 0x3030
 800e454:	4293      	cmp	r3, r2
 800e456:	d126      	bne.n	800e4a6 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xde>
 800e458:	69fb      	ldr	r3, [r7, #28]
 800e45a:	f246 3264 	movw	r2, #25444	; 0x6364
 800e45e:	4293      	cmp	r3, r2
 800e460:	d121      	bne.n	800e4a6 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xde>
 800e462:	69bb      	ldr	r3, [r7, #24]
 800e464:	2b00      	cmp	r3, #0
 800e466:	d01e      	beq.n	800e4a6 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xde>
        {
            currentMovieOffset += 8;
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	699b      	ldr	r3, [r3, #24]
 800e46c:	f103 0208 	add.w	r2, r3, #8
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	619a      	str	r2, [r3, #24]
            //decode frame
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	699b      	ldr	r3, [r3, #24]
 800e478:	69ba      	ldr	r2, [r7, #24]
 800e47a:	4619      	mov	r1, r3
 800e47c:	68f8      	ldr	r0, [r7, #12]
 800e47e:	f7ff ff57 	bl	800e330 <_ZN20HardwareMJPEGDecoder8readDataEmm>
 800e482:	6138      	str	r0, [r7, #16]
            decodeMJPEGFrame(chunk, chunkSize, buffer, buffer_width, buffer_height, buffer_stride);
 800e484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e486:	9302      	str	r3, [sp, #8]
 800e488:	88bb      	ldrh	r3, [r7, #4]
 800e48a:	9301      	str	r3, [sp, #4]
 800e48c:	88fb      	ldrh	r3, [r7, #6]
 800e48e:	9300      	str	r3, [sp, #0]
 800e490:	68bb      	ldr	r3, [r7, #8]
 800e492:	69ba      	ldr	r2, [r7, #24]
 800e494:	6939      	ldr	r1, [r7, #16]
 800e496:	68f8      	ldr	r0, [r7, #12]
 800e498:	f000 fa8e 	bl	800e9b8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>
            frameNumber++;
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	695b      	ldr	r3, [r3, #20]
 800e4a0:	1c5a      	adds	r2, r3, #1
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	615a      	str	r2, [r3, #20]
        }

        isCurrentFrameLast = false;
 800e4a6:	2300      	movs	r3, #0
 800e4a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        // Advance to next frame
        currentMovieOffset += chunkSize;
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	699a      	ldr	r2, [r3, #24]
 800e4b0:	69bb      	ldr	r3, [r7, #24]
 800e4b2:	441a      	add	r2, r3
 800e4b4:	68fb      	ldr	r3, [r7, #12]
 800e4b6:	619a      	str	r2, [r3, #24]
        if (chunkSize == 0) // Empty frame - Skip
 800e4b8:	69bb      	ldr	r3, [r7, #24]
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d105      	bne.n	800e4ca <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x102>
        {
          currentMovieOffset += 8;
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	699b      	ldr	r3, [r3, #24]
 800e4c2:	f103 0208 	add.w	r2, r3, #8
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	619a      	str	r2, [r3, #24]
        }
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	699b      	ldr	r3, [r3, #24]
 800e4ce:	3301      	adds	r3, #1
 800e4d0:	f023 0201 	bic.w	r2, r3, #1
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	619a      	str	r2, [r3, #24]

        if (currentMovieOffset == lastFrameEnd)
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	699a      	ldr	r2, [r3, #24]
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4e0:	429a      	cmp	r2, r3
 800e4e2:	d114      	bne.n	800e50e <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x146>
        {
            frameNumber = 1;
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	2201      	movs	r2, #1
 800e4e8:	615a      	str	r2, [r3, #20]
            currentMovieOffset = firstFrameOffset; //start over
 800e4ea:	68fb      	ldr	r3, [r7, #12]
 800e4ec:	6a1a      	ldr	r2, [r3, #32]
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	619a      	str	r2, [r3, #24]
            isCurrentFrameLast = true;
 800e4f2:	2301      	movs	r3, #1
 800e4f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e4f8:	e009      	b.n	800e50e <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x146>
        }
    }
    else
    {
        frameNumber = 1;
 800e4fa:	68fb      	ldr	r3, [r7, #12]
 800e4fc:	2201      	movs	r2, #1
 800e4fe:	615a      	str	r2, [r3, #20]
        currentMovieOffset = firstFrameOffset; //start over
 800e500:	68fb      	ldr	r3, [r7, #12]
 800e502:	6a1a      	ldr	r2, [r3, #32]
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	619a      	str	r2, [r3, #24]
        isCurrentFrameLast = true;
 800e508:	2301      	movs	r3, #1
 800e50a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    return !isCurrentFrameLast;
 800e50e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e512:	f083 0301 	eor.w	r3, r3, #1
 800e516:	b2db      	uxtb	r3, r3
}
 800e518:	4618      	mov	r0, r3
 800e51a:	3728      	adds	r7, #40	; 0x28
 800e51c:	46bd      	mov	sp, r7
 800e51e:	bd80      	pop	{r7, pc}
 800e520:	08024f54 	.word	0x08024f54
 800e524:	08024fa0 	.word	0x08024fa0
 800e528:	08024f1c 	.word	0x08024f1c

0800e52c <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv>:

bool HardwareMJPEGDecoder::gotoNextFrame()
{
 800e52c:	b580      	push	{r7, lr}
 800e52e:	b086      	sub	sp, #24
 800e530:	af00      	add	r7, sp, #0
 800e532:	6078      	str	r0, [r7, #4]
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	695b      	ldr	r3, [r3, #20]
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d105      	bne.n	800e548 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x1c>
 800e53c:	4b37      	ldr	r3, [pc, #220]	; (800e61c <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0xf0>)
 800e53e:	4a38      	ldr	r2, [pc, #224]	; (800e620 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0xf4>)
 800e540:	21ed      	movs	r1, #237	; 0xed
 800e542:	4838      	ldr	r0, [pc, #224]	; (800e624 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0xf8>)
 800e544:	f015 f832 	bl	80235ac <__assert_func>

    readData(currentMovieOffset, 8);
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	699b      	ldr	r3, [r3, #24]
 800e54c:	2208      	movs	r2, #8
 800e54e:	4619      	mov	r1, r3
 800e550:	6878      	ldr	r0, [r7, #4]
 800e552:	f7ff feed 	bl	800e330 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	699b      	ldr	r3, [r3, #24]
 800e55a:	3304      	adds	r3, #4
 800e55c:	4619      	mov	r1, r3
 800e55e:	6878      	ldr	r0, [r7, #4]
 800e560:	f7ff fe6b 	bl	800e23a <_ZN20HardwareMJPEGDecoder6getU32Em>
 800e564:	6178      	str	r0, [r7, #20]

    //increment until next video frame
    while (currentMovieOffset + 8 + chunkSize < movieLength)
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	699a      	ldr	r2, [r3, #24]
 800e56a:	697b      	ldr	r3, [r7, #20]
 800e56c:	4413      	add	r3, r2
 800e56e:	f103 0208 	add.w	r2, r3, #8
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e576:	429a      	cmp	r2, r3
 800e578:	d243      	bcs.n	800e602 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0xd6>
    {
        //increment one frame
        currentMovieOffset += chunkSize + 8;
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	699a      	ldr	r2, [r3, #24]
 800e57e:	697b      	ldr	r3, [r7, #20]
 800e580:	4413      	add	r3, r2
 800e582:	f103 0208 	add.w	r2, r3, #8
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	619a      	str	r2, [r3, #24]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	699b      	ldr	r3, [r3, #24]
 800e58e:	3301      	adds	r3, #1
 800e590:	f023 0201 	bic.w	r2, r3, #1
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	619a      	str	r2, [r3, #24]
        frameNumber++;
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	695b      	ldr	r3, [r3, #20]
 800e59c:	1c5a      	adds	r2, r3, #1
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	615a      	str	r2, [r3, #20]

        //next chunk
        readData(currentMovieOffset, 8);
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	699b      	ldr	r3, [r3, #24]
 800e5a6:	2208      	movs	r2, #8
 800e5a8:	4619      	mov	r1, r3
 800e5aa:	6878      	ldr	r0, [r7, #4]
 800e5ac:	f7ff fec0 	bl	800e330 <_ZN20HardwareMJPEGDecoder8readDataEmm>
        //check it is a video frame
        uint32_t streamNo  = getU16(currentMovieOffset);
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	699b      	ldr	r3, [r3, #24]
 800e5b4:	4619      	mov	r1, r3
 800e5b6:	6878      	ldr	r0, [r7, #4]
 800e5b8:	f7ff fe8a 	bl	800e2d0 <_ZN20HardwareMJPEGDecoder6getU16Em>
 800e5bc:	6138      	str	r0, [r7, #16]
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	699b      	ldr	r3, [r3, #24]
 800e5c2:	3302      	adds	r3, #2
 800e5c4:	4619      	mov	r1, r3
 800e5c6:	6878      	ldr	r0, [r7, #4]
 800e5c8:	f7ff fe82 	bl	800e2d0 <_ZN20HardwareMJPEGDecoder6getU16Em>
 800e5cc:	60f8      	str	r0, [r7, #12]
        chunkSize = getU32(currentMovieOffset + 4);
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	699b      	ldr	r3, [r3, #24]
 800e5d2:	3304      	adds	r3, #4
 800e5d4:	4619      	mov	r1, r3
 800e5d6:	6878      	ldr	r0, [r7, #4]
 800e5d8:	f7ff fe2f 	bl	800e23a <_ZN20HardwareMJPEGDecoder6getU32Em>
 800e5dc:	6178      	str	r0, [r7, #20]
        const uint16_t STREAM0 = 0x3030;
 800e5de:	f243 0330 	movw	r3, #12336	; 0x3030
 800e5e2:	817b      	strh	r3, [r7, #10]
        const uint16_t TYPEDC  = 0x6364;
 800e5e4:	f246 3364 	movw	r3, #25444	; 0x6364
 800e5e8:	813b      	strh	r3, [r7, #8]

        if (streamNo == STREAM0 && chunkType == TYPEDC)
 800e5ea:	693b      	ldr	r3, [r7, #16]
 800e5ec:	f243 0230 	movw	r2, #12336	; 0x3030
 800e5f0:	4293      	cmp	r3, r2
 800e5f2:	d1b8      	bne.n	800e566 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x3a>
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	f246 3264 	movw	r2, #25444	; 0x6364
 800e5fa:	4293      	cmp	r3, r2
 800e5fc:	d1b3      	bne.n	800e566 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x3a>
        {
            // Found next frame
            return true;
 800e5fe:	2301      	movs	r3, #1
 800e600:	e007      	b.n	800e612 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0xe6>
        }
    }

    //skip back to first frame
    frameNumber = 1;
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	2201      	movs	r2, #1
 800e606:	615a      	str	r2, [r3, #20]
    currentMovieOffset = firstFrameOffset; //start over
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	6a1a      	ldr	r2, [r3, #32]
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	619a      	str	r2, [r3, #24]
    return false;
 800e610:	2300      	movs	r3, #0
}
 800e612:	4618      	mov	r0, r3
 800e614:	3718      	adds	r7, #24
 800e616:	46bd      	mov	sp, r7
 800e618:	bd80      	pop	{r7, pc}
 800e61a:	bf00      	nop
 800e61c:	08024f54 	.word	0x08024f54
 800e620:	08024ffc 	.word	0x08024ffc
 800e624:	08024f1c 	.word	0x08024f1c

0800e628 <_ZN20HardwareMJPEGDecoder12setVideoDataEPKhm>:

void HardwareMJPEGDecoder::setVideoData(const uint8_t* movie, const uint32_t length)
{
 800e628:	b580      	push	{r7, lr}
 800e62a:	b084      	sub	sp, #16
 800e62c:	af00      	add	r7, sp, #0
 800e62e:	60f8      	str	r0, [r7, #12]
 800e630:	60b9      	str	r1, [r7, #8]
 800e632:	607a      	str	r2, [r7, #4]
    movieData = movie;
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	68ba      	ldr	r2, [r7, #8]
 800e638:	62da      	str	r2, [r3, #44]	; 0x2c
    movieLength = length;
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	687a      	ldr	r2, [r7, #4]
 800e63e:	629a      	str	r2, [r3, #40]	; 0x28
    reader = 0; //not using reader
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	2200      	movs	r2, #0
 800e644:	631a      	str	r2, [r3, #48]	; 0x30

    readVideoHeader();
 800e646:	68f8      	ldr	r0, [r7, #12]
 800e648:	f000 f834 	bl	800e6b4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>
}
 800e64c:	bf00      	nop
 800e64e:	3710      	adds	r7, #16
 800e650:	46bd      	mov	sp, r7
 800e652:	bd80      	pop	{r7, pc}

0800e654 <_ZN20HardwareMJPEGDecoder12setVideoDataERN8touchgfx15VideoDataReaderE>:

void HardwareMJPEGDecoder::setVideoData(touchgfx::VideoDataReader& reader)
{
 800e654:	b580      	push	{r7, lr}
 800e656:	b082      	sub	sp, #8
 800e658:	af00      	add	r7, sp, #0
 800e65a:	6078      	str	r0, [r7, #4]
 800e65c:	6039      	str	r1, [r7, #0]
    this->reader = &reader;
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	683a      	ldr	r2, [r7, #0]
 800e662:	631a      	str	r2, [r3, #48]	; 0x30
    movieData = 0;
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	2200      	movs	r2, #0
 800e668:	62da      	str	r2, [r3, #44]	; 0x2c
    movieLength = reader.getDataLength();
 800e66a:	683b      	ldr	r3, [r7, #0]
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	3308      	adds	r3, #8
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	6838      	ldr	r0, [r7, #0]
 800e674:	4798      	blx	r3
 800e676:	4602      	mov	r2, r0
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	629a      	str	r2, [r3, #40]	; 0x28

    readVideoHeader();
 800e67c:	6878      	ldr	r0, [r7, #4]
 800e67e:	f000 f819 	bl	800e6b4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>
}
 800e682:	bf00      	nop
 800e684:	3708      	adds	r7, #8
 800e686:	46bd      	mov	sp, r7
 800e688:	bd80      	pop	{r7, pc}

0800e68a <_ZN20HardwareMJPEGDecoder8hasVideoEv>:

bool HardwareMJPEGDecoder::hasVideo()
{
 800e68a:	b480      	push	{r7}
 800e68c:	b083      	sub	sp, #12
 800e68e:	af00      	add	r7, sp, #0
 800e690:	6078      	str	r0, [r7, #4]
    return (reader != 0) || (movieData != 0);
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e696:	2b00      	cmp	r3, #0
 800e698:	d103      	bne.n	800e6a2 <_ZN20HardwareMJPEGDecoder8hasVideoEv+0x18>
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d001      	beq.n	800e6a6 <_ZN20HardwareMJPEGDecoder8hasVideoEv+0x1c>
 800e6a2:	2301      	movs	r3, #1
 800e6a4:	e000      	b.n	800e6a8 <_ZN20HardwareMJPEGDecoder8hasVideoEv+0x1e>
 800e6a6:	2300      	movs	r3, #0
}
 800e6a8:	4618      	mov	r0, r3
 800e6aa:	370c      	adds	r7, #12
 800e6ac:	46bd      	mov	sp, r7
 800e6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6b2:	4770      	bx	lr

0800e6b4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>:

void HardwareMJPEGDecoder::readVideoHeader()
{
 800e6b4:	b580      	push	{r7, lr}
 800e6b6:	b08a      	sub	sp, #40	; 0x28
 800e6b8:	af00      	add	r7, sp, #0
 800e6ba:	6078      	str	r0, [r7, #4]
    // Start from the start
    currentMovieOffset = 0;
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	2200      	movs	r2, #0
 800e6c0:	619a      	str	r2, [r3, #24]
    lastError = AVI_NO_ERROR;
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	2200      	movs	r2, #0
 800e6c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    // Make header available in buffer
    readData(0, 72);
 800e6ca:	2248      	movs	r2, #72	; 0x48
 800e6cc:	2100      	movs	r1, #0
 800e6ce:	6878      	ldr	r0, [r7, #4]
 800e6d0:	f7ff fe2e 	bl	800e330 <_ZN20HardwareMJPEGDecoder8readDataEmm>

    // Decode the movie header to find first frame
    // Must be RIFF file
    if (compare(currentMovieOffset, "RIFF", 4))
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	6999      	ldr	r1, [r3, #24]
 800e6d8:	2304      	movs	r3, #4
 800e6da:	4aa5      	ldr	r2, [pc, #660]	; (800e970 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2bc>)
 800e6dc:	6878      	ldr	r0, [r7, #4]
 800e6de:	f7ff fd89 	bl	800e1f4 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 800e6e2:	4603      	mov	r3, r0
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	bf14      	ite	ne
 800e6e8:	2301      	movne	r3, #1
 800e6ea:	2300      	moveq	r3, #0
 800e6ec:	b2db      	uxtb	r3, r3
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d00a      	beq.n	800e708 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x54>
    {
        lastError = AVI_ERROR_NOT_RIFF;
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	2203      	movs	r2, #3
 800e6f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        assert(!"RIFF header not found");
 800e6fa:	4b9e      	ldr	r3, [pc, #632]	; (800e974 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c0>)
 800e6fc:	4a9e      	ldr	r2, [pc, #632]	; (800e978 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c4>)
 800e6fe:	f240 1135 	movw	r1, #309	; 0x135
 800e702:	489e      	ldr	r0, [pc, #632]	; (800e97c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c8>)
 800e704:	f014 ff52 	bl	80235ac <__assert_func>
    }

    //skip fourcc and length
    currentMovieOffset += 8;
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	699b      	ldr	r3, [r3, #24]
 800e70c:	f103 0208 	add.w	r2, r3, #8
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	619a      	str	r2, [r3, #24]
    if (compare(currentMovieOffset, "AVI ", 4))
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	6999      	ldr	r1, [r3, #24]
 800e718:	2304      	movs	r3, #4
 800e71a:	4a99      	ldr	r2, [pc, #612]	; (800e980 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2cc>)
 800e71c:	6878      	ldr	r0, [r7, #4]
 800e71e:	f7ff fd69 	bl	800e1f4 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 800e722:	4603      	mov	r3, r0
 800e724:	2b00      	cmp	r3, #0
 800e726:	bf14      	ite	ne
 800e728:	2301      	movne	r3, #1
 800e72a:	2300      	moveq	r3, #0
 800e72c:	b2db      	uxtb	r3, r3
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d00a      	beq.n	800e748 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x94>
    {
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	2204      	movs	r2, #4
 800e736:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        assert(!"AVI header not found");
 800e73a:	4b92      	ldr	r3, [pc, #584]	; (800e984 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2d0>)
 800e73c:	4a8e      	ldr	r2, [pc, #568]	; (800e978 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c4>)
 800e73e:	f240 113d 	movw	r1, #317	; 0x13d
 800e742:	488e      	ldr	r0, [pc, #568]	; (800e97c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c8>)
 800e744:	f014 ff32 	bl	80235ac <__assert_func>
    }

    currentMovieOffset += 4;
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	699b      	ldr	r3, [r3, #24]
 800e74c:	1d1a      	adds	r2, r3, #4
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	619a      	str	r2, [r3, #24]
    if (compare(currentMovieOffset, "LIST", 4))
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	6999      	ldr	r1, [r3, #24]
 800e756:	2304      	movs	r3, #4
 800e758:	4a8b      	ldr	r2, [pc, #556]	; (800e988 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2d4>)
 800e75a:	6878      	ldr	r0, [r7, #4]
 800e75c:	f7ff fd4a 	bl	800e1f4 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 800e760:	4603      	mov	r3, r0
 800e762:	2b00      	cmp	r3, #0
 800e764:	bf14      	ite	ne
 800e766:	2301      	movne	r3, #1
 800e768:	2300      	moveq	r3, #0
 800e76a:	b2db      	uxtb	r3, r3
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d00a      	beq.n	800e786 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xd2>
    {
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	2205      	movs	r2, #5
 800e774:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        assert(!"AVI LIST not found");
 800e778:	4b84      	ldr	r3, [pc, #528]	; (800e98c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2d8>)
 800e77a:	4a7f      	ldr	r2, [pc, #508]	; (800e978 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c4>)
 800e77c:	f44f 71a2 	mov.w	r1, #324	; 0x144
 800e780:	487e      	ldr	r0, [pc, #504]	; (800e97c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c8>)
 800e782:	f014 ff13 	bl	80235ac <__assert_func>
    }

    //save AVI List info
    const uint32_t aviListSize = getU32(currentMovieOffset + 4);
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	699b      	ldr	r3, [r3, #24]
 800e78a:	3304      	adds	r3, #4
 800e78c:	4619      	mov	r1, r3
 800e78e:	6878      	ldr	r0, [r7, #4]
 800e790:	f7ff fd53 	bl	800e23a <_ZN20HardwareMJPEGDecoder6getU32Em>
 800e794:	61f8      	str	r0, [r7, #28]
    const uint32_t aviListOffset = currentMovieOffset;
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	699b      	ldr	r3, [r3, #24]
 800e79a:	61bb      	str	r3, [r7, #24]
    assert(aviListSize);
 800e79c:	69fb      	ldr	r3, [r7, #28]
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d106      	bne.n	800e7b0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xfc>
 800e7a2:	4b7b      	ldr	r3, [pc, #492]	; (800e990 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2dc>)
 800e7a4:	4a74      	ldr	r2, [pc, #464]	; (800e978 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c4>)
 800e7a6:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 800e7aa:	4874      	ldr	r0, [pc, #464]	; (800e97c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c8>)
 800e7ac:	f014 fefe 	bl	80235ac <__assert_func>

    //look into header to find frame rate
    bool foundFrame = true;
 800e7b0:	2301      	movs	r3, #1
 800e7b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint32_t offset =  currentMovieOffset + 8;
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	699b      	ldr	r3, [r3, #24]
 800e7ba:	3308      	adds	r3, #8
 800e7bc:	617b      	str	r3, [r7, #20]
    if (compare(offset, "hdrl", 4))
 800e7be:	2304      	movs	r3, #4
 800e7c0:	4a74      	ldr	r2, [pc, #464]	; (800e994 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2e0>)
 800e7c2:	6979      	ldr	r1, [r7, #20]
 800e7c4:	6878      	ldr	r0, [r7, #4]
 800e7c6:	f7ff fd15 	bl	800e1f4 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 800e7ca:	4603      	mov	r3, r0
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	bf14      	ite	ne
 800e7d0:	2301      	movne	r3, #1
 800e7d2:	2300      	moveq	r3, #0
 800e7d4:	b2db      	uxtb	r3, r3
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d006      	beq.n	800e7e8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x134>
    {
        lastError = AVI_ERROR_AVI_HDRL_NOT_FOUND;
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	2206      	movs	r2, #6
 800e7de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        foundFrame = false;
 800e7e2:	2300      	movs	r3, #0
 800e7e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    offset += 4;
 800e7e8:	697b      	ldr	r3, [r7, #20]
 800e7ea:	3304      	adds	r3, #4
 800e7ec:	617b      	str	r3, [r7, #20]
    if (compare(offset, "avih", 4))
 800e7ee:	2304      	movs	r3, #4
 800e7f0:	4a69      	ldr	r2, [pc, #420]	; (800e998 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2e4>)
 800e7f2:	6979      	ldr	r1, [r7, #20]
 800e7f4:	6878      	ldr	r0, [r7, #4]
 800e7f6:	f7ff fcfd 	bl	800e1f4 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 800e7fa:	4603      	mov	r3, r0
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	bf14      	ite	ne
 800e800:	2301      	movne	r3, #1
 800e802:	2300      	moveq	r3, #0
 800e804:	b2db      	uxtb	r3, r3
 800e806:	2b00      	cmp	r3, #0
 800e808:	d006      	beq.n	800e818 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x164>
    {
        lastError = AVI_ERROR_AVI_AVIH_NOT_FOUND;
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	2207      	movs	r2, #7
 800e80e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        foundFrame = false;
 800e812:	2300      	movs	r3, #0
 800e814:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if (foundFrame)
 800e818:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d028      	beq.n	800e872 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1be>
    {
        offset += 8; //skip fourcc and cb in AVIMAINHEADER
 800e820:	697b      	ldr	r3, [r7, #20]
 800e822:	3308      	adds	r3, #8
 800e824:	617b      	str	r3, [r7, #20]
        videoInfo.ms_between_frames = getU32(offset)/1000;
 800e826:	6979      	ldr	r1, [r7, #20]
 800e828:	6878      	ldr	r0, [r7, #4]
 800e82a:	f7ff fd06 	bl	800e23a <_ZN20HardwareMJPEGDecoder6getU32Em>
 800e82e:	4603      	mov	r3, r0
 800e830:	4a5a      	ldr	r2, [pc, #360]	; (800e99c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2e8>)
 800e832:	fba2 2303 	umull	r2, r3, r2, r3
 800e836:	099a      	lsrs	r2, r3, #6
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	605a      	str	r2, [r3, #4]
        videoInfo.number_of_frames = getU32(offset + 16);
 800e83c:	697b      	ldr	r3, [r7, #20]
 800e83e:	3310      	adds	r3, #16
 800e840:	4619      	mov	r1, r3
 800e842:	6878      	ldr	r0, [r7, #4]
 800e844:	f7ff fcf9 	bl	800e23a <_ZN20HardwareMJPEGDecoder6getU32Em>
 800e848:	4602      	mov	r2, r0
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	609a      	str	r2, [r3, #8]
        videoInfo.frame_width = getU32(offset + 32);
 800e84e:	697b      	ldr	r3, [r7, #20]
 800e850:	3320      	adds	r3, #32
 800e852:	4619      	mov	r1, r3
 800e854:	6878      	ldr	r0, [r7, #4]
 800e856:	f7ff fcf0 	bl	800e23a <_ZN20HardwareMJPEGDecoder6getU32Em>
 800e85a:	4602      	mov	r2, r0
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	60da      	str	r2, [r3, #12]
        videoInfo.frame_height = getU32(offset + 36);
 800e860:	697b      	ldr	r3, [r7, #20]
 800e862:	3324      	adds	r3, #36	; 0x24
 800e864:	4619      	mov	r1, r3
 800e866:	6878      	ldr	r0, [r7, #4]
 800e868:	f7ff fce7 	bl	800e23a <_ZN20HardwareMJPEGDecoder6getU32Em>
 800e86c:	4602      	mov	r2, r0
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	611a      	str	r2, [r3, #16]
    }
    //skip rest of AVI header, start from end of AVI List

    //look for list with 'movi' header
    uint32_t listOffset = aviListOffset + aviListSize + 8;
 800e872:	69ba      	ldr	r2, [r7, #24]
 800e874:	69fb      	ldr	r3, [r7, #28]
 800e876:	4413      	add	r3, r2
 800e878:	3308      	adds	r3, #8
 800e87a:	623b      	str	r3, [r7, #32]
    readData(listOffset, 12);
 800e87c:	220c      	movs	r2, #12
 800e87e:	6a39      	ldr	r1, [r7, #32]
 800e880:	6878      	ldr	r0, [r7, #4]
 800e882:	f7ff fd55 	bl	800e330 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 800e886:	6a3b      	ldr	r3, [r7, #32]
 800e888:	f103 0108 	add.w	r1, r3, #8
 800e88c:	2304      	movs	r3, #4
 800e88e:	4a44      	ldr	r2, [pc, #272]	; (800e9a0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2ec>)
 800e890:	6878      	ldr	r0, [r7, #4]
 800e892:	f7ff fcaf 	bl	800e1f4 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 800e896:	4603      	mov	r3, r0
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d00b      	beq.n	800e8b4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x200>
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	d106      	bne.n	800e8b4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x200>
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e8aa:	6a3a      	ldr	r2, [r7, #32]
 800e8ac:	429a      	cmp	r2, r3
 800e8ae:	d201      	bcs.n	800e8b4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x200>
 800e8b0:	2301      	movs	r3, #1
 800e8b2:	e000      	b.n	800e8b6 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x202>
 800e8b4:	2300      	movs	r3, #0
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d012      	beq.n	800e8e0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x22c>
    {
        const uint32_t listSize = getU32(listOffset + 4) + 8;
 800e8ba:	6a3b      	ldr	r3, [r7, #32]
 800e8bc:	3304      	adds	r3, #4
 800e8be:	4619      	mov	r1, r3
 800e8c0:	6878      	ldr	r0, [r7, #4]
 800e8c2:	f7ff fcba 	bl	800e23a <_ZN20HardwareMJPEGDecoder6getU32Em>
 800e8c6:	4603      	mov	r3, r0
 800e8c8:	3308      	adds	r3, #8
 800e8ca:	60fb      	str	r3, [r7, #12]
        listOffset += listSize;
 800e8cc:	6a3a      	ldr	r2, [r7, #32]
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	4413      	add	r3, r2
 800e8d2:	623b      	str	r3, [r7, #32]
        readData(listOffset, 12);
 800e8d4:	220c      	movs	r2, #12
 800e8d6:	6a39      	ldr	r1, [r7, #32]
 800e8d8:	6878      	ldr	r0, [r7, #4]
 800e8da:	f7ff fd29 	bl	800e330 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 800e8de:	e7d2      	b.n	800e886 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d2>
    }

    if (lastError != AVI_NO_ERROR)
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d004      	beq.n	800e8f4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x240>
    {
        lastError = AVI_ERROR_MOVI_NOT_FOUND;
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	220a      	movs	r2, #10
 800e8ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return;
 800e8f2:	e05e      	b.n	800e9b2 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2fe>
    }

    //save first frame and end of last frame
    currentMovieOffset = listOffset + 8 + 4; //skip LIST and 'movi'
 800e8f4:	6a3b      	ldr	r3, [r7, #32]
 800e8f6:	f103 020c 	add.w	r2, r3, #12
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	619a      	str	r2, [r3, #24]
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 800e8fe:	6a3b      	ldr	r3, [r7, #32]
 800e900:	3304      	adds	r3, #4
 800e902:	4619      	mov	r1, r3
 800e904:	6878      	ldr	r0, [r7, #4]
 800e906:	f7ff fc98 	bl	800e23a <_ZN20HardwareMJPEGDecoder6getU32Em>
 800e90a:	4602      	mov	r2, r0
 800e90c:	6a3b      	ldr	r3, [r7, #32]
 800e90e:	4413      	add	r3, r2
 800e910:	f103 0208 	add.w	r2, r3, #8
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	625a      	str	r2, [r3, #36]	; 0x24

    //find idx
    const uint32_t listSize = getU32(listOffset+4)+8;
 800e918:	6a3b      	ldr	r3, [r7, #32]
 800e91a:	3304      	adds	r3, #4
 800e91c:	4619      	mov	r1, r3
 800e91e:	6878      	ldr	r0, [r7, #4]
 800e920:	f7ff fc8b 	bl	800e23a <_ZN20HardwareMJPEGDecoder6getU32Em>
 800e924:	4603      	mov	r3, r0
 800e926:	3308      	adds	r3, #8
 800e928:	613b      	str	r3, [r7, #16]
    listOffset += listSize;
 800e92a:	6a3a      	ldr	r2, [r7, #32]
 800e92c:	693b      	ldr	r3, [r7, #16]
 800e92e:	4413      	add	r3, r2
 800e930:	623b      	str	r3, [r7, #32]
    readData(listOffset, 4);
 800e932:	2204      	movs	r2, #4
 800e934:	6a39      	ldr	r1, [r7, #32]
 800e936:	6878      	ldr	r0, [r7, #4]
 800e938:	f7ff fcfa 	bl	800e330 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    if (!compare(listOffset, "idx1", 4))
 800e93c:	2304      	movs	r3, #4
 800e93e:	4a19      	ldr	r2, [pc, #100]	; (800e9a4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2f0>)
 800e940:	6a39      	ldr	r1, [r7, #32]
 800e942:	6878      	ldr	r0, [r7, #4]
 800e944:	f7ff fc56 	bl	800e1f4 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 800e948:	4603      	mov	r3, r0
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	bf0c      	ite	eq
 800e94e:	2301      	moveq	r3, #1
 800e950:	2300      	movne	r3, #0
 800e952:	b2db      	uxtb	r3, r3
 800e954:	2b00      	cmp	r3, #0
 800e956:	d027      	beq.n	800e9a8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2f4>
    {
        indexOffset = listOffset;
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	6a3a      	ldr	r2, [r7, #32]
 800e95c:	61da      	str	r2, [r3, #28]
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
        return;
    }

    //start on first frame
    frameNumber = 1; //next frame number is 1
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	2201      	movs	r2, #1
 800e962:	615a      	str	r2, [r3, #20]
    firstFrameOffset = currentMovieOffset;
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	699a      	ldr	r2, [r3, #24]
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	621a      	str	r2, [r3, #32]
 800e96c:	e021      	b.n	800e9b2 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2fe>
 800e96e:	bf00      	nop
 800e970:	08025030 	.word	0x08025030
 800e974:	08025038 	.word	0x08025038
 800e978:	08025054 	.word	0x08025054
 800e97c:	08024f1c 	.word	0x08024f1c
 800e980:	08025084 	.word	0x08025084
 800e984:	0802508c 	.word	0x0802508c
 800e988:	080250a4 	.word	0x080250a4
 800e98c:	080250ac 	.word	0x080250ac
 800e990:	080250c4 	.word	0x080250c4
 800e994:	080250d0 	.word	0x080250d0
 800e998:	080250d8 	.word	0x080250d8
 800e99c:	10624dd3 	.word	0x10624dd3
 800e9a0:	080250e0 	.word	0x080250e0
 800e9a4:	080250e8 	.word	0x080250e8
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	220b      	movs	r2, #11
 800e9ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return;
 800e9b0:	bf00      	nop
}
 800e9b2:	3728      	adds	r7, #40	; 0x28
 800e9b4:	46bd      	mov	sp, r7
 800e9b6:	bd80      	pop	{r7, pc}

0800e9b8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>:

void HardwareMJPEGDecoder::decodeMJPEGFrame(const uint8_t* const mjpgdata, const uint32_t length, uint8_t* outputBuffer, uint16_t bufferWidth, uint16_t bufferHeight, uint32_t bufferStride)
{
 800e9b8:	b580      	push	{r7, lr}
 800e9ba:	b084      	sub	sp, #16
 800e9bc:	af00      	add	r7, sp, #0
 800e9be:	60f8      	str	r0, [r7, #12]
 800e9c0:	60b9      	str	r1, [r7, #8]
 800e9c2:	607a      	str	r2, [r7, #4]
 800e9c4:	603b      	str	r3, [r7, #0]
    if (length == 0)
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d051      	beq.n	800ea70 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xb8>
    {
        return;
    }

    if (outputBuffer) //only decode if buffers are assigned.
 800e9cc:	683b      	ldr	r3, [r7, #0]
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	d04f      	beq.n	800ea72 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xba>
    {
      // Update JPEG conversion parameters
      JPEG_ConvertorParams.bytes_pr_pixel = 2;
 800e9d2:	4b29      	ldr	r3, [pc, #164]	; (800ea78 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xc0>)
 800e9d4:	2202      	movs	r2, #2
 800e9d6:	611a      	str	r2, [r3, #16]
      JPEG_ConvertorParams.WidthExtend = videoInfo.frame_width;
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	68db      	ldr	r3, [r3, #12]
 800e9dc:	4a26      	ldr	r2, [pc, #152]	; (800ea78 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xc0>)
 800e9de:	6013      	str	r3, [r2, #0]
      if((JPEG_ConvertorParams.WidthExtend % 16) != 0)
 800e9e0:	4b25      	ldr	r3, [pc, #148]	; (800ea78 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xc0>)
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	f003 030f 	and.w	r3, r3, #15
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d006      	beq.n	800e9fa <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x42>
      {
          JPEG_ConvertorParams.WidthExtend += 16 - (JPEG_ConvertorParams.WidthExtend % 16);
 800e9ec:	4b22      	ldr	r3, [pc, #136]	; (800ea78 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xc0>)
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	f023 030f 	bic.w	r3, r3, #15
 800e9f4:	3310      	adds	r3, #16
 800e9f6:	4a20      	ldr	r2, [pc, #128]	; (800ea78 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xc0>)
 800e9f8:	6013      	str	r3, [r2, #0]
      }
      JPEG_ConvertorParams.ScaledWidth = 800 * JPEG_ConvertorParams.bytes_pr_pixel;
 800e9fa:	4b1f      	ldr	r3, [pc, #124]	; (800ea78 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xc0>)
 800e9fc:	691b      	ldr	r3, [r3, #16]
 800e9fe:	f44f 7248 	mov.w	r2, #800	; 0x320
 800ea02:	fb02 f303 	mul.w	r3, r2, r3
 800ea06:	4a1c      	ldr	r2, [pc, #112]	; (800ea78 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xc0>)
 800ea08:	6053      	str	r3, [r2, #4]
      JPEG_ConvertorParams.MCU_pr_line = JPEG_ConvertorParams.WidthExtend / MCU_WIDTH_PIXELS;
 800ea0a:	4b1b      	ldr	r3, [pc, #108]	; (800ea78 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xc0>)
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	091b      	lsrs	r3, r3, #4
 800ea10:	4a19      	ldr	r2, [pc, #100]	; (800ea78 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xc0>)
 800ea12:	60d3      	str	r3, [r2, #12]
      JPEG_ConvertorParams.LastLineHeight = 16 - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	691b      	ldr	r3, [r3, #16]
 800ea18:	f003 030f 	and.w	r3, r3, #15
 800ea1c:	f1c3 0310 	rsb	r3, r3, #16
 800ea20:	4a15      	ldr	r2, [pc, #84]	; (800ea78 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xc0>)
 800ea22:	6093      	str	r3, [r2, #8]

      JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, outputBuffer);
 800ea24:	683b      	ldr	r3, [r7, #0]
 800ea26:	687a      	ldr	r2, [r7, #4]
 800ea28:	68b9      	ldr	r1, [r7, #8]
 800ea2a:	4814      	ldr	r0, [pc, #80]	; (800ea7c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xc4>)
 800ea2c:	f000 f8ec 	bl	800ec08 <JPEG_Decode_DMA>
      do
      {
        JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 800ea30:	4812      	ldr	r0, [pc, #72]	; (800ea7c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xc4>)
 800ea32:	f000 fa9d 	bl	800ef70 <JPEG_OutputHandler>
 800ea36:	4603      	mov	r3, r0
 800ea38:	4a11      	ldr	r2, [pc, #68]	; (800ea80 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xc8>)
 800ea3a:	6013      	str	r3, [r2, #0]

        //If nothing to do, allow other tasks
        if (JpegProcessing_End == 2)
 800ea3c:	4b10      	ldr	r3, [pc, #64]	; (800ea80 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xc8>)
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	2b02      	cmp	r3, #2
 800ea42:	bf0c      	ite	eq
 800ea44:	2301      	moveq	r3, #1
 800ea46:	2300      	movne	r3, #0
 800ea48:	b2db      	uxtb	r3, r3
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d006      	beq.n	800ea5c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xa4>
        {
          SEM_WAIT(semDecodingDone);
 800ea4e:	4b0d      	ldr	r3, [pc, #52]	; (800ea84 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xcc>)
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	f04f 31ff 	mov.w	r1, #4294967295
 800ea56:	4618      	mov	r0, r3
 800ea58:	f7f9 fca2 	bl	80083a0 <osSemaphoreAcquire>
        }
      }
      while(JpegProcessing_End != 1);
 800ea5c:	4b08      	ldr	r3, [pc, #32]	; (800ea80 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xc8>)
 800ea5e:	681b      	ldr	r3, [r3, #0]
 800ea60:	2b01      	cmp	r3, #1
 800ea62:	bf14      	ite	ne
 800ea64:	2301      	movne	r3, #1
 800ea66:	2300      	moveq	r3, #0
 800ea68:	b2db      	uxtb	r3, r3
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d001      	beq.n	800ea72 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xba>
      do
 800ea6e:	e7df      	b.n	800ea30 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x78>
        return;
 800ea70:	bf00      	nop
    }
}
 800ea72:	3710      	adds	r7, #16
 800ea74:	46bd      	mov	sp, r7
 800ea76:	bd80      	pop	{r7, pc}
 800ea78:	2001e1c8 	.word	0x2001e1c8
 800ea7c:	20009818 	.word	0x20009818
 800ea80:	2001e1b4 	.word	0x2001e1b4
 800ea84:	2001e1c4 	.word	0x2001e1c4

0800ea88 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm>:

bool HardwareMJPEGDecoder::decodeFrame(const touchgfx::Rect& area, uint8_t* frameBuffer, uint32_t framebuffer_width)
{
 800ea88:	b580      	push	{r7, lr}
 800ea8a:	b086      	sub	sp, #24
 800ea8c:	af00      	add	r7, sp, #0
 800ea8e:	60f8      	str	r0, [r7, #12]
 800ea90:	60b9      	str	r1, [r7, #8]
 800ea92:	607a      	str	r2, [r7, #4]
 800ea94:	603b      	str	r3, [r7, #0]
     // Assuming that chunk is available and streamNo and chunkType is correct.
    // Check by gotoNextFrame

    readData(currentMovieOffset, 8);
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	699b      	ldr	r3, [r3, #24]
 800ea9a:	2208      	movs	r2, #8
 800ea9c:	4619      	mov	r1, r3
 800ea9e:	68f8      	ldr	r0, [r7, #12]
 800eaa0:	f7ff fc46 	bl	800e330 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    const uint32_t length = getU32(currentMovieOffset + 4);
 800eaa4:	68fb      	ldr	r3, [r7, #12]
 800eaa6:	699b      	ldr	r3, [r3, #24]
 800eaa8:	3304      	adds	r3, #4
 800eaaa:	4619      	mov	r1, r3
 800eaac:	68f8      	ldr	r0, [r7, #12]
 800eaae:	f7ff fbc4 	bl	800e23a <_ZN20HardwareMJPEGDecoder6getU32Em>
 800eab2:	6178      	str	r0, [r7, #20]

    // Ensure whole frame is read
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	699b      	ldr	r3, [r3, #24]
 800eab8:	3308      	adds	r3, #8
 800eaba:	697a      	ldr	r2, [r7, #20]
 800eabc:	4619      	mov	r1, r3
 800eabe:	68f8      	ldr	r0, [r7, #12]
 800eac0:	f7ff fc36 	bl	800e330 <_ZN20HardwareMJPEGDecoder8readDataEmm>
 800eac4:	6138      	str	r0, [r7, #16]

    if (frameBuffer) //only decode if buffers are assigned.
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d015      	beq.n	800eaf8 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x70>
    {
      JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, frameBuffer);
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	697a      	ldr	r2, [r7, #20]
 800ead0:	6939      	ldr	r1, [r7, #16]
 800ead2:	480c      	ldr	r0, [pc, #48]	; (800eb04 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x7c>)
 800ead4:	f000 f898 	bl	800ec08 <JPEG_Decode_DMA>

      do
      {
        JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 800ead8:	480a      	ldr	r0, [pc, #40]	; (800eb04 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x7c>)
 800eada:	f000 fa49 	bl	800ef70 <JPEG_OutputHandler>
 800eade:	4603      	mov	r3, r0
 800eae0:	4a09      	ldr	r2, [pc, #36]	; (800eb08 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x80>)
 800eae2:	6013      	str	r3, [r2, #0]
      }
      while(JpegProcessing_End == 0);
 800eae4:	4b08      	ldr	r3, [pc, #32]	; (800eb08 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x80>)
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	bf0c      	ite	eq
 800eaec:	2301      	moveq	r3, #1
 800eaee:	2300      	movne	r3, #0
 800eaf0:	b2db      	uxtb	r3, r3
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	d000      	beq.n	800eaf8 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x70>
      do
 800eaf6:	e7ef      	b.n	800ead8 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x50>

    }
    return true;
 800eaf8:	2301      	movs	r3, #1
}
 800eafa:	4618      	mov	r0, r3
 800eafc:	3718      	adds	r7, #24
 800eafe:	46bd      	mov	sp, r7
 800eb00:	bd80      	pop	{r7, pc}
 800eb02:	bf00      	nop
 800eb04:	20009818 	.word	0x20009818
 800eb08:	2001e1b4 	.word	0x2001e1b4

0800eb0c <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt>:

bool HardwareMJPEGDecoder::decodeThumbnail(uint32_t frameno, uint8_t* buffer, uint16_t width, uint16_t height)
{
 800eb0c:	b580      	push	{r7, lr}
 800eb0e:	b084      	sub	sp, #16
 800eb10:	af00      	add	r7, sp, #0
 800eb12:	60f8      	str	r0, [r7, #12]
 800eb14:	60b9      	str	r1, [r7, #8]
 800eb16:	607a      	str	r2, [r7, #4]
 800eb18:	807b      	strh	r3, [r7, #2]
    assert(0);
 800eb1a:	4b03      	ldr	r3, [pc, #12]	; (800eb28 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x1c>)
 800eb1c:	4a03      	ldr	r2, [pc, #12]	; (800eb2c <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x20>)
 800eb1e:	f240 11cb 	movw	r1, #459	; 0x1cb
 800eb22:	4803      	ldr	r0, [pc, #12]	; (800eb30 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x24>)
 800eb24:	f014 fd42 	bl	80235ac <__assert_func>
 800eb28:	080250f0 	.word	0x080250f0
 800eb2c:	080250f4 	.word	0x080250f4
 800eb30:	08024f1c 	.word	0x08024f1c

0800eb34 <_ZN20HardwareMJPEGDecoder9gotoFrameEm>:
    return false;
}

void HardwareMJPEGDecoder::gotoFrame(uint32_t frameNumber)
{
 800eb34:	b580      	push	{r7, lr}
 800eb36:	b084      	sub	sp, #16
 800eb38:	af00      	add	r7, sp, #0
 800eb3a:	6078      	str	r0, [r7, #4]
 800eb3c:	6039      	str	r1, [r7, #0]
    if (frameNumber==0)
 800eb3e:	683b      	ldr	r3, [r7, #0]
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d101      	bne.n	800eb48 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x14>
    {
        frameNumber = 1;
 800eb44:	2301      	movs	r3, #1
 800eb46:	603b      	str	r3, [r7, #0]
    }

    if (frameNumber > getNumberOfFrames())
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	332c      	adds	r3, #44	; 0x2c
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	6878      	ldr	r0, [r7, #4]
 800eb52:	4798      	blx	r3
 800eb54:	4602      	mov	r2, r0
 800eb56:	683b      	ldr	r3, [r7, #0]
 800eb58:	4293      	cmp	r3, r2
 800eb5a:	bf8c      	ite	hi
 800eb5c:	2301      	movhi	r3, #1
 800eb5e:	2300      	movls	r3, #0
 800eb60:	b2db      	uxtb	r3, r3
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d006      	beq.n	800eb74 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x40>
    {
        frameNumber = getNumberOfFrames();
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	332c      	adds	r3, #44	; 0x2c
 800eb6c:	681b      	ldr	r3, [r3, #0]
 800eb6e:	6878      	ldr	r0, [r7, #4]
 800eb70:	4798      	blx	r3
 800eb72:	6038      	str	r0, [r7, #0]
    }

    uint32_t offset = indexOffset + 8 + (frameNumber-1)*16;
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	69da      	ldr	r2, [r3, #28]
 800eb78:	683b      	ldr	r3, [r7, #0]
 800eb7a:	3b01      	subs	r3, #1
 800eb7c:	011b      	lsls	r3, r3, #4
 800eb7e:	4413      	add	r3, r2
 800eb80:	3308      	adds	r3, #8
 800eb82:	60fb      	str	r3, [r7, #12]

    readData(offset, 16);
 800eb84:	2210      	movs	r2, #16
 800eb86:	68f9      	ldr	r1, [r7, #12]
 800eb88:	6878      	ldr	r0, [r7, #4]
 800eb8a:	f7ff fbd1 	bl	800e330 <_ZN20HardwareMJPEGDecoder8readDataEmm>

    currentMovieOffset = getU32(offset + 8) + firstFrameOffset - 4;
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	3308      	adds	r3, #8
 800eb92:	4619      	mov	r1, r3
 800eb94:	6878      	ldr	r0, [r7, #4]
 800eb96:	f7ff fb50 	bl	800e23a <_ZN20HardwareMJPEGDecoder6getU32Em>
 800eb9a:	4602      	mov	r2, r0
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	6a1b      	ldr	r3, [r3, #32]
 800eba0:	4413      	add	r3, r2
 800eba2:	1f1a      	subs	r2, r3, #4
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	619a      	str	r2, [r3, #24]
    this->frameNumber = frameNumber;
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	683a      	ldr	r2, [r7, #0]
 800ebac:	615a      	str	r2, [r3, #20]
}
 800ebae:	bf00      	nop
 800ebb0:	3710      	adds	r7, #16
 800ebb2:	46bd      	mov	sp, r7
 800ebb4:	bd80      	pop	{r7, pc}

0800ebb6 <_ZN20HardwareMJPEGDecoder17getNumberOfFramesEv>:

uint32_t HardwareMJPEGDecoder::getNumberOfFrames()
{
 800ebb6:	b480      	push	{r7}
 800ebb8:	b083      	sub	sp, #12
 800ebba:	af00      	add	r7, sp, #0
 800ebbc:	6078      	str	r0, [r7, #4]
    return videoInfo.number_of_frames;
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	689b      	ldr	r3, [r3, #8]
}
 800ebc2:	4618      	mov	r0, r3
 800ebc4:	370c      	adds	r7, #12
 800ebc6:	46bd      	mov	sp, r7
 800ebc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebcc:	4770      	bx	lr

0800ebce <_ZN20HardwareMJPEGDecoder14setRepeatVideoEb>:

void HardwareMJPEGDecoder::setRepeatVideo(bool repeat)
{
 800ebce:	b480      	push	{r7}
 800ebd0:	b083      	sub	sp, #12
 800ebd2:	af00      	add	r7, sp, #0
 800ebd4:	6078      	str	r0, [r7, #4]
 800ebd6:	460b      	mov	r3, r1
 800ebd8:	70fb      	strb	r3, [r7, #3]

}
 800ebda:	bf00      	nop
 800ebdc:	370c      	adds	r7, #12
 800ebde:	46bd      	mov	sp, r7
 800ebe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebe4:	4770      	bx	lr

0800ebe6 <_ZN20HardwareMJPEGDecoder12getVideoInfoEPN8touchgfx16VideoInformationE>:

void HardwareMJPEGDecoder::getVideoInfo(touchgfx::VideoInformation* data)
{
 800ebe6:	b490      	push	{r4, r7}
 800ebe8:	b082      	sub	sp, #8
 800ebea:	af00      	add	r7, sp, #0
 800ebec:	6078      	str	r0, [r7, #4]
 800ebee:	6039      	str	r1, [r7, #0]
    *data = videoInfo;
 800ebf0:	683a      	ldr	r2, [r7, #0]
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	4614      	mov	r4, r2
 800ebf6:	3304      	adds	r3, #4
 800ebf8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ebfa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800ebfe:	bf00      	nop
 800ec00:	3708      	adds	r7, #8
 800ec02:	46bd      	mov	sp, r7
 800ec04:	bc90      	pop	{r4, r7}
 800ec06:	4770      	bx	lr

0800ec08 <JPEG_Decode_DMA>:
  * @param  JPEGImageSize_Bytes    : jpg image size in bytes.
  * @param  DestAddress : ARGB8888 destination Frame Buffer Address.
  * @retval None
  */
uint32_t JPEG_Decode_DMA(JPEG_HandleTypeDef *hjpeg, uint8_t* input, uint32_t chunkSizeIn /* length */, uint8_t* output)
{
 800ec08:	b580      	push	{r7, lr}
 800ec0a:	b088      	sub	sp, #32
 800ec0c:	af02      	add	r7, sp, #8
 800ec0e:	60f8      	str	r0, [r7, #12]
 800ec10:	60b9      	str	r1, [r7, #8]
 800ec12:	607a      	str	r2, [r7, #4]
 800ec14:	603b      	str	r3, [r7, #0]
    FrameBufferAddress = output;
 800ec16:	4a28      	ldr	r2, [pc, #160]	; (800ecb8 <JPEG_Decode_DMA+0xb0>)
 800ec18:	683b      	ldr	r3, [r7, #0]
 800ec1a:	6013      	str	r3, [r2, #0]
    Output_Is_Paused = 0;
 800ec1c:	4b27      	ldr	r3, [pc, #156]	; (800ecbc <JPEG_Decode_DMA+0xb4>)
 800ec1e:	2200      	movs	r2, #0
 800ec20:	601a      	str	r2, [r3, #0]
    JPEG_OUT_Read_BufferIndex = 0;
 800ec22:	4b27      	ldr	r3, [pc, #156]	; (800ecc0 <JPEG_Decode_DMA+0xb8>)
 800ec24:	2200      	movs	r2, #0
 800ec26:	601a      	str	r2, [r3, #0]
    JPEG_OUT_Write_BufferIndex = 0;
 800ec28:	4b26      	ldr	r3, [pc, #152]	; (800ecc4 <JPEG_Decode_DMA+0xbc>)
 800ec2a:	2200      	movs	r2, #0
 800ec2c:	601a      	str	r2, [r3, #0]
    JPEG_InputImageIndex = 0;
 800ec2e:	4b26      	ldr	r3, [pc, #152]	; (800ecc8 <JPEG_Decode_DMA+0xc0>)
 800ec30:	2200      	movs	r2, #0
 800ec32:	601a      	str	r2, [r3, #0]
    JPEG_InputImageAddress = (uint32_t)input;
 800ec34:	68bb      	ldr	r3, [r7, #8]
 800ec36:	4a25      	ldr	r2, [pc, #148]	; (800eccc <JPEG_Decode_DMA+0xc4>)
 800ec38:	6013      	str	r3, [r2, #0]
    JPEG_InputImageSize_Bytes = chunkSizeIn;
 800ec3a:	4a25      	ldr	r2, [pc, #148]	; (800ecd0 <JPEG_Decode_DMA+0xc8>)
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	6013      	str	r3, [r2, #0]
    MCU_BlockIndex = 0;
 800ec40:	4b24      	ldr	r3, [pc, #144]	; (800ecd4 <JPEG_Decode_DMA+0xcc>)
 800ec42:	2200      	movs	r2, #0
 800ec44:	601a      	str	r2, [r3, #0]

    //Init buffers
    for(uint32_t i = 0; i < NB_OUTPUT_DATA_BUFFERS; ++i)
 800ec46:	2300      	movs	r3, #0
 800ec48:	617b      	str	r3, [r7, #20]
 800ec4a:	697b      	ldr	r3, [r7, #20]
 800ec4c:	2b01      	cmp	r3, #1
 800ec4e:	d816      	bhi.n	800ec7e <JPEG_Decode_DMA+0x76>
    {
      Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
 800ec50:	4921      	ldr	r1, [pc, #132]	; (800ecd8 <JPEG_Decode_DMA+0xd0>)
 800ec52:	697a      	ldr	r2, [r7, #20]
 800ec54:	4613      	mov	r3, r2
 800ec56:	005b      	lsls	r3, r3, #1
 800ec58:	4413      	add	r3, r2
 800ec5a:	009b      	lsls	r3, r3, #2
 800ec5c:	440b      	add	r3, r1
 800ec5e:	2200      	movs	r2, #0
 800ec60:	701a      	strb	r2, [r3, #0]
      Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
 800ec62:	491d      	ldr	r1, [pc, #116]	; (800ecd8 <JPEG_Decode_DMA+0xd0>)
 800ec64:	697a      	ldr	r2, [r7, #20]
 800ec66:	4613      	mov	r3, r2
 800ec68:	005b      	lsls	r3, r3, #1
 800ec6a:	4413      	add	r3, r2
 800ec6c:	009b      	lsls	r3, r3, #2
 800ec6e:	440b      	add	r3, r1
 800ec70:	3308      	adds	r3, #8
 800ec72:	2200      	movs	r2, #0
 800ec74:	601a      	str	r2, [r3, #0]
    for(uint32_t i = 0; i < NB_OUTPUT_DATA_BUFFERS; ++i)
 800ec76:	697b      	ldr	r3, [r7, #20]
 800ec78:	3301      	adds	r3, #1
 800ec7a:	617b      	str	r3, [r7, #20]
 800ec7c:	e7e5      	b.n	800ec4a <JPEG_Decode_DMA+0x42>
    }

    //Do not return from this function until done with decoding all chunks.
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 800ec7e:	4b11      	ldr	r3, [pc, #68]	; (800ecc4 <JPEG_Decode_DMA+0xbc>)
 800ec80:	681a      	ldr	r2, [r3, #0]
 800ec82:	4915      	ldr	r1, [pc, #84]	; (800ecd8 <JPEG_Decode_DMA+0xd0>)
 800ec84:	4613      	mov	r3, r2
 800ec86:	005b      	lsls	r3, r3, #1
 800ec88:	4413      	add	r3, r2
 800ec8a:	009b      	lsls	r3, r3, #2
 800ec8c:	440b      	add	r3, r1
 800ec8e:	3304      	adds	r3, #4
 800ec90:	6819      	ldr	r1, [r3, #0]
 800ec92:	4b12      	ldr	r3, [pc, #72]	; (800ecdc <JPEG_Decode_DMA+0xd4>)
 800ec94:	68da      	ldr	r2, [r3, #12]
 800ec96:	4613      	mov	r3, r2
 800ec98:	005b      	lsls	r3, r3, #1
 800ec9a:	4413      	add	r3, r2
 800ec9c:	01db      	lsls	r3, r3, #7
 800ec9e:	9300      	str	r3, [sp, #0]
 800eca0:	460b      	mov	r3, r1
 800eca2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800eca6:	68b9      	ldr	r1, [r7, #8]
 800eca8:	68f8      	ldr	r0, [r7, #12]
 800ecaa:	f7f5 f82a 	bl	8003d02 <HAL_JPEG_Decode_DMA>

    return 0;
 800ecae:	2300      	movs	r3, #0
}
 800ecb0:	4618      	mov	r0, r3
 800ecb2:	3718      	adds	r7, #24
 800ecb4:	46bd      	mov	sp, r7
 800ecb6:	bd80      	pop	{r7, pc}
 800ecb8:	2001e194 	.word	0x2001e194
 800ecbc:	2001e1b0 	.word	0x2001e1b0
 800ecc0:	2001e1a8 	.word	0x2001e1a8
 800ecc4:	2001e1ac 	.word	0x2001e1ac
 800ecc8:	2001e198 	.word	0x2001e198
 800eccc:	2001e1a0 	.word	0x2001e1a0
 800ecd0:	2001e19c 	.word	0x2001e19c
 800ecd4:	2001e1c0 	.word	0x2001e1c0
 800ecd8:	20000014 	.word	0x20000014
 800ecdc:	2001e1c8 	.word	0x2001e1c8

0800ece0 <HAL_JPEG_InfoReadyCallback>:
  * @param hjpeg: JPEG handle pointer
  * @param pInfo: JPEG Info Struct pointer
  * @retval None
  */
void HAL_JPEG_InfoReadyCallback(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{
 800ece0:	b580      	push	{r7, lr}
 800ece2:	b084      	sub	sp, #16
 800ece4:	af00      	add	r7, sp, #0
 800ece6:	6078      	str	r0, [r7, #4]
 800ece8:	6039      	str	r1, [r7, #0]
  if(pInfo->ChromaSubsampling == JPEG_420_SUBSAMPLING)
 800ecea:	683b      	ldr	r3, [r7, #0]
 800ecec:	685b      	ldr	r3, [r3, #4]
 800ecee:	2b01      	cmp	r3, #1
 800ecf0:	d12f      	bne.n	800ed52 <HAL_JPEG_InfoReadyCallback+0x72>
  {
    if((pInfo->ImageWidth % 16) != 0)
 800ecf2:	683b      	ldr	r3, [r7, #0]
 800ecf4:	68db      	ldr	r3, [r3, #12]
 800ecf6:	f003 030f 	and.w	r3, r3, #15
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d007      	beq.n	800ed0e <HAL_JPEG_InfoReadyCallback+0x2e>
      pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
 800ecfe:	683b      	ldr	r3, [r7, #0]
 800ed00:	68db      	ldr	r3, [r3, #12]
 800ed02:	f023 030f 	bic.w	r3, r3, #15
 800ed06:	f103 0210 	add.w	r2, r3, #16
 800ed0a:	683b      	ldr	r3, [r7, #0]
 800ed0c:	60da      	str	r2, [r3, #12]

    if((pInfo->ImageHeight % 16) != 0)
 800ed0e:	683b      	ldr	r3, [r7, #0]
 800ed10:	689b      	ldr	r3, [r3, #8]
 800ed12:	f003 030f 	and.w	r3, r3, #15
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d007      	beq.n	800ed2a <HAL_JPEG_InfoReadyCallback+0x4a>
      pInfo->ImageHeight += (16 - (pInfo->ImageHeight % 16));
 800ed1a:	683b      	ldr	r3, [r7, #0]
 800ed1c:	689b      	ldr	r3, [r3, #8]
 800ed1e:	f023 030f 	bic.w	r3, r3, #15
 800ed22:	f103 0210 	add.w	r2, r3, #16
 800ed26:	683b      	ldr	r3, [r7, #0]
 800ed28:	609a      	str	r2, [r3, #8]

    HAL_StatusTypeDef status = TGFX_JPEG_GetDecodeColorConvertFunc(pInfo, &pConvert_Function, &MCU_TotalNb);
 800ed2a:	4a36      	ldr	r2, [pc, #216]	; (800ee04 <HAL_JPEG_InfoReadyCallback+0x124>)
 800ed2c:	4936      	ldr	r1, [pc, #216]	; (800ee08 <HAL_JPEG_InfoReadyCallback+0x128>)
 800ed2e:	6838      	ldr	r0, [r7, #0]
 800ed30:	f002 ff26 	bl	8011b80 <TGFX_JPEG_GetDecodeColorConvertFunc>
 800ed34:	4603      	mov	r3, r0
 800ed36:	73bb      	strb	r3, [r7, #14]
    if(status != HAL_OK)
 800ed38:	7bbb      	ldrb	r3, [r7, #14]
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d05d      	beq.n	800edfa <HAL_JPEG_InfoReadyCallback+0x11a>
    {
      assert(status == HAL_OK);
 800ed3e:	7bbb      	ldrb	r3, [r7, #14]
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d05a      	beq.n	800edfa <HAL_JPEG_InfoReadyCallback+0x11a>
 800ed44:	4b31      	ldr	r3, [pc, #196]	; (800ee0c <HAL_JPEG_InfoReadyCallback+0x12c>)
 800ed46:	4a32      	ldr	r2, [pc, #200]	; (800ee10 <HAL_JPEG_InfoReadyCallback+0x130>)
 800ed48:	f240 2129 	movw	r1, #553	; 0x229
 800ed4c:	4831      	ldr	r0, [pc, #196]	; (800ee14 <HAL_JPEG_InfoReadyCallback+0x134>)
 800ed4e:	f014 fc2d 	bl	80235ac <__assert_func>
    }
  }
  else
  {
    if(pInfo->ChromaSubsampling == JPEG_422_SUBSAMPLING)
 800ed52:	683b      	ldr	r3, [r7, #0]
 800ed54:	685b      	ldr	r3, [r3, #4]
 800ed56:	2b02      	cmp	r3, #2
 800ed58:	d11b      	bne.n	800ed92 <HAL_JPEG_InfoReadyCallback+0xb2>
    {
      if((pInfo->ImageWidth % 16) != 0)
 800ed5a:	683b      	ldr	r3, [r7, #0]
 800ed5c:	68db      	ldr	r3, [r3, #12]
 800ed5e:	f003 030f 	and.w	r3, r3, #15
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d007      	beq.n	800ed76 <HAL_JPEG_InfoReadyCallback+0x96>
        pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
 800ed66:	683b      	ldr	r3, [r7, #0]
 800ed68:	68db      	ldr	r3, [r3, #12]
 800ed6a:	f023 030f 	bic.w	r3, r3, #15
 800ed6e:	f103 0210 	add.w	r2, r3, #16
 800ed72:	683b      	ldr	r3, [r7, #0]
 800ed74:	60da      	str	r2, [r3, #12]

      if((pInfo->ImageHeight % 8) != 0)
 800ed76:	683b      	ldr	r3, [r7, #0]
 800ed78:	689b      	ldr	r3, [r3, #8]
 800ed7a:	f003 0307 	and.w	r3, r3, #7
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d007      	beq.n	800ed92 <HAL_JPEG_InfoReadyCallback+0xb2>
        pInfo->ImageHeight += (8 - (pInfo->ImageHeight % 8));
 800ed82:	683b      	ldr	r3, [r7, #0]
 800ed84:	689b      	ldr	r3, [r3, #8]
 800ed86:	f023 0307 	bic.w	r3, r3, #7
 800ed8a:	f103 0208 	add.w	r2, r3, #8
 800ed8e:	683b      	ldr	r3, [r7, #0]
 800ed90:	609a      	str	r2, [r3, #8]
    }

    if(pInfo->ChromaSubsampling == JPEG_444_SUBSAMPLING)
 800ed92:	683b      	ldr	r3, [r7, #0]
 800ed94:	685b      	ldr	r3, [r3, #4]
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d11b      	bne.n	800edd2 <HAL_JPEG_InfoReadyCallback+0xf2>
    {
      if((pInfo->ImageWidth % 8) != 0)
 800ed9a:	683b      	ldr	r3, [r7, #0]
 800ed9c:	68db      	ldr	r3, [r3, #12]
 800ed9e:	f003 0307 	and.w	r3, r3, #7
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	d007      	beq.n	800edb6 <HAL_JPEG_InfoReadyCallback+0xd6>
        pInfo->ImageWidth += (8 - (pInfo->ImageWidth % 8));
 800eda6:	683b      	ldr	r3, [r7, #0]
 800eda8:	68db      	ldr	r3, [r3, #12]
 800edaa:	f023 0307 	bic.w	r3, r3, #7
 800edae:	f103 0208 	add.w	r2, r3, #8
 800edb2:	683b      	ldr	r3, [r7, #0]
 800edb4:	60da      	str	r2, [r3, #12]

      if((pInfo->ImageHeight % 8) != 0)
 800edb6:	683b      	ldr	r3, [r7, #0]
 800edb8:	689b      	ldr	r3, [r3, #8]
 800edba:	f003 0307 	and.w	r3, r3, #7
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d007      	beq.n	800edd2 <HAL_JPEG_InfoReadyCallback+0xf2>
        pInfo->ImageHeight += (8 - (pInfo->ImageHeight % 8));
 800edc2:	683b      	ldr	r3, [r7, #0]
 800edc4:	689b      	ldr	r3, [r3, #8]
 800edc6:	f023 0307 	bic.w	r3, r3, #7
 800edca:	f103 0208 	add.w	r2, r3, #8
 800edce:	683b      	ldr	r3, [r7, #0]
 800edd0:	609a      	str	r2, [r3, #8]
    }

    HAL_StatusTypeDef status = JPEG_GetDecodeColorConvertFunc(pInfo, &pConvert_Function, &MCU_TotalNb);
 800edd2:	4a0c      	ldr	r2, [pc, #48]	; (800ee04 <HAL_JPEG_InfoReadyCallback+0x124>)
 800edd4:	490c      	ldr	r1, [pc, #48]	; (800ee08 <HAL_JPEG_InfoReadyCallback+0x128>)
 800edd6:	6838      	ldr	r0, [r7, #0]
 800edd8:	f003 fe28 	bl	8012a2c <JPEG_GetDecodeColorConvertFunc>
 800eddc:	4603      	mov	r3, r0
 800edde:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK)
 800ede0:	7bfb      	ldrb	r3, [r7, #15]
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d009      	beq.n	800edfa <HAL_JPEG_InfoReadyCallback+0x11a>
    {
      assert(status == HAL_OK);
 800ede6:	7bfb      	ldrb	r3, [r7, #15]
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d006      	beq.n	800edfa <HAL_JPEG_InfoReadyCallback+0x11a>
 800edec:	4b07      	ldr	r3, [pc, #28]	; (800ee0c <HAL_JPEG_InfoReadyCallback+0x12c>)
 800edee:	4a08      	ldr	r2, [pc, #32]	; (800ee10 <HAL_JPEG_InfoReadyCallback+0x130>)
 800edf0:	f240 2143 	movw	r1, #579	; 0x243
 800edf4:	4807      	ldr	r0, [pc, #28]	; (800ee14 <HAL_JPEG_InfoReadyCallback+0x134>)
 800edf6:	f014 fbd9 	bl	80235ac <__assert_func>
    }
  }
}
 800edfa:	bf00      	nop
 800edfc:	3710      	adds	r7, #16
 800edfe:	46bd      	mov	sp, r7
 800ee00:	bd80      	pop	{r7, pc}
 800ee02:	bf00      	nop
 800ee04:	2001e1b8 	.word	0x2001e1b8
 800ee08:	2001e1bc 	.word	0x2001e1bc
 800ee0c:	08025150 	.word	0x08025150
 800ee10:	08025164 	.word	0x08025164
 800ee14:	08024f1c 	.word	0x08024f1c

0800ee18 <HAL_JPEG_GetDataCallback>:
  * @param hjpeg: JPEG handle pointer
  * @param NbDecodedData: Number of decoded (consummed) bytes from input buffer
  * @retval None
  */
void HAL_JPEG_GetDataCallback(JPEG_HandleTypeDef *hjpeg, uint32_t NbDecodedData)
{
 800ee18:	b580      	push	{r7, lr}
 800ee1a:	b084      	sub	sp, #16
 800ee1c:	af00      	add	r7, sp, #0
 800ee1e:	6078      	str	r0, [r7, #4]
 800ee20:	6039      	str	r1, [r7, #0]
  //Input buffer has been consumed by the peripheral and to ask for a new data chunk if the operation (encoding/decoding) has not been complete yet.
  JPEG_InputImageIndex += NbDecodedData;
 800ee22:	4b14      	ldr	r3, [pc, #80]	; (800ee74 <HAL_JPEG_GetDataCallback+0x5c>)
 800ee24:	681a      	ldr	r2, [r3, #0]
 800ee26:	683b      	ldr	r3, [r7, #0]
 800ee28:	4413      	add	r3, r2
 800ee2a:	4a12      	ldr	r2, [pc, #72]	; (800ee74 <HAL_JPEG_GetDataCallback+0x5c>)
 800ee2c:	6013      	str	r3, [r2, #0]
  if(JPEG_InputImageIndex < JPEG_InputImageSize_Bytes)
 800ee2e:	4b11      	ldr	r3, [pc, #68]	; (800ee74 <HAL_JPEG_GetDataCallback+0x5c>)
 800ee30:	681a      	ldr	r2, [r3, #0]
 800ee32:	4b11      	ldr	r3, [pc, #68]	; (800ee78 <HAL_JPEG_GetDataCallback+0x60>)
 800ee34:	681b      	ldr	r3, [r3, #0]
 800ee36:	429a      	cmp	r2, r3
 800ee38:	d218      	bcs.n	800ee6c <HAL_JPEG_GetDataCallback+0x54>
  {
    JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 800ee3a:	4b10      	ldr	r3, [pc, #64]	; (800ee7c <HAL_JPEG_GetDataCallback+0x64>)
 800ee3c:	681a      	ldr	r2, [r3, #0]
 800ee3e:	683b      	ldr	r3, [r7, #0]
 800ee40:	4413      	add	r3, r2
 800ee42:	4a0e      	ldr	r2, [pc, #56]	; (800ee7c <HAL_JPEG_GetDataCallback+0x64>)
 800ee44:	6013      	str	r3, [r2, #0]
    uint32_t inDataLength = JPEG_InputImageSize_Bytes - JPEG_InputImageIndex;
 800ee46:	4b0c      	ldr	r3, [pc, #48]	; (800ee78 <HAL_JPEG_GetDataCallback+0x60>)
 800ee48:	681a      	ldr	r2, [r3, #0]
 800ee4a:	4b0a      	ldr	r3, [pc, #40]	; (800ee74 <HAL_JPEG_GetDataCallback+0x5c>)
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	1ad3      	subs	r3, r2, r3
 800ee50:	60fb      	str	r3, [r7, #12]
    HAL_JPEG_ConfigInputBuffer(hjpeg,(uint8_t *)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
 800ee52:	4b0a      	ldr	r3, [pc, #40]	; (800ee7c <HAL_JPEG_GetDataCallback+0x64>)
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	4619      	mov	r1, r3
 800ee58:	68fb      	ldr	r3, [r7, #12]
 800ee5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ee5e:	bf28      	it	cs
 800ee60:	f44f 3380 	movcs.w	r3, #65536	; 0x10000
 800ee64:	461a      	mov	r2, r3
 800ee66:	6878      	ldr	r0, [r7, #4]
 800ee68:	f7f5 f8d6 	bl	8004018 <HAL_JPEG_ConfigInputBuffer>
  }
}
 800ee6c:	bf00      	nop
 800ee6e:	3710      	adds	r7, #16
 800ee70:	46bd      	mov	sp, r7
 800ee72:	bd80      	pop	{r7, pc}
 800ee74:	2001e198 	.word	0x2001e198
 800ee78:	2001e19c 	.word	0x2001e19c
 800ee7c:	2001e1a0 	.word	0x2001e1a0

0800ee80 <HAL_JPEG_DataReadyCallback>:
  * @param pDataOut: pointer to the output data buffer
  * @param OutDataLength: length of output buffer in bytes
  * @retval None
  */
void HAL_JPEG_DataReadyCallback (JPEG_HandleTypeDef *hjpeg, uint8_t *pDataOut, uint32_t OutDataLength)
{
 800ee80:	b580      	push	{r7, lr}
 800ee82:	b084      	sub	sp, #16
 800ee84:	af00      	add	r7, sp, #0
 800ee86:	60f8      	str	r0, [r7, #12]
 800ee88:	60b9      	str	r1, [r7, #8]
 800ee8a:	607a      	str	r2, [r7, #4]
    Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
 800ee8c:	4b27      	ldr	r3, [pc, #156]	; (800ef2c <HAL_JPEG_DataReadyCallback+0xac>)
 800ee8e:	681a      	ldr	r2, [r3, #0]
 800ee90:	4927      	ldr	r1, [pc, #156]	; (800ef30 <HAL_JPEG_DataReadyCallback+0xb0>)
 800ee92:	4613      	mov	r3, r2
 800ee94:	005b      	lsls	r3, r3, #1
 800ee96:	4413      	add	r3, r2
 800ee98:	009b      	lsls	r3, r3, #2
 800ee9a:	440b      	add	r3, r1
 800ee9c:	2201      	movs	r2, #1
 800ee9e:	701a      	strb	r2, [r3, #0]
    Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBufferSize = OutDataLength;
 800eea0:	4b22      	ldr	r3, [pc, #136]	; (800ef2c <HAL_JPEG_DataReadyCallback+0xac>)
 800eea2:	681a      	ldr	r2, [r3, #0]
 800eea4:	4922      	ldr	r1, [pc, #136]	; (800ef30 <HAL_JPEG_DataReadyCallback+0xb0>)
 800eea6:	4613      	mov	r3, r2
 800eea8:	005b      	lsls	r3, r3, #1
 800eeaa:	4413      	add	r3, r2
 800eeac:	009b      	lsls	r3, r3, #2
 800eeae:	440b      	add	r3, r1
 800eeb0:	3308      	adds	r3, #8
 800eeb2:	687a      	ldr	r2, [r7, #4]
 800eeb4:	601a      	str	r2, [r3, #0]

    JPEG_OUT_Write_BufferIndex++;
 800eeb6:	4b1d      	ldr	r3, [pc, #116]	; (800ef2c <HAL_JPEG_DataReadyCallback+0xac>)
 800eeb8:	681b      	ldr	r3, [r3, #0]
 800eeba:	3301      	adds	r3, #1
 800eebc:	4a1b      	ldr	r2, [pc, #108]	; (800ef2c <HAL_JPEG_DataReadyCallback+0xac>)
 800eebe:	6013      	str	r3, [r2, #0]
    if(JPEG_OUT_Write_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
 800eec0:	4b1a      	ldr	r3, [pc, #104]	; (800ef2c <HAL_JPEG_DataReadyCallback+0xac>)
 800eec2:	681b      	ldr	r3, [r3, #0]
 800eec4:	2b01      	cmp	r3, #1
 800eec6:	d902      	bls.n	800eece <HAL_JPEG_DataReadyCallback+0x4e>
    {
      JPEG_OUT_Write_BufferIndex = 0;
 800eec8:	4b18      	ldr	r3, [pc, #96]	; (800ef2c <HAL_JPEG_DataReadyCallback+0xac>)
 800eeca:	2200      	movs	r2, #0
 800eecc:	601a      	str	r2, [r3, #0]
    }

    //if the other buffer is full, then ui thread might be converting it
    if(Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State != JPEG_BUFFER_EMPTY)
 800eece:	4b17      	ldr	r3, [pc, #92]	; (800ef2c <HAL_JPEG_DataReadyCallback+0xac>)
 800eed0:	681a      	ldr	r2, [r3, #0]
 800eed2:	4917      	ldr	r1, [pc, #92]	; (800ef30 <HAL_JPEG_DataReadyCallback+0xb0>)
 800eed4:	4613      	mov	r3, r2
 800eed6:	005b      	lsls	r3, r3, #1
 800eed8:	4413      	add	r3, r2
 800eeda:	009b      	lsls	r3, r3, #2
 800eedc:	440b      	add	r3, r1
 800eede:	781b      	ldrb	r3, [r3, #0]
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	d006      	beq.n	800eef2 <HAL_JPEG_DataReadyCallback+0x72>
    {
      HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 800eee4:	2102      	movs	r1, #2
 800eee6:	68f8      	ldr	r0, [r7, #12]
 800eee8:	f7f4 ff6e 	bl	8003dc8 <HAL_JPEG_Pause>
      Output_Is_Paused = 1;
 800eeec:	4b11      	ldr	r3, [pc, #68]	; (800ef34 <HAL_JPEG_DataReadyCallback+0xb4>)
 800eeee:	2201      	movs	r2, #1
 800eef0:	601a      	str	r2, [r3, #0]
    }
    HAL_JPEG_ConfigOutputBuffer(hjpeg, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 800eef2:	4b0e      	ldr	r3, [pc, #56]	; (800ef2c <HAL_JPEG_DataReadyCallback+0xac>)
 800eef4:	681a      	ldr	r2, [r3, #0]
 800eef6:	490e      	ldr	r1, [pc, #56]	; (800ef30 <HAL_JPEG_DataReadyCallback+0xb0>)
 800eef8:	4613      	mov	r3, r2
 800eefa:	005b      	lsls	r3, r3, #1
 800eefc:	4413      	add	r3, r2
 800eefe:	009b      	lsls	r3, r3, #2
 800ef00:	440b      	add	r3, r1
 800ef02:	3304      	adds	r3, #4
 800ef04:	6819      	ldr	r1, [r3, #0]
 800ef06:	4b0c      	ldr	r3, [pc, #48]	; (800ef38 <HAL_JPEG_DataReadyCallback+0xb8>)
 800ef08:	68da      	ldr	r2, [r3, #12]
 800ef0a:	4613      	mov	r3, r2
 800ef0c:	005b      	lsls	r3, r3, #1
 800ef0e:	4413      	add	r3, r2
 800ef10:	01db      	lsls	r3, r3, #7
 800ef12:	461a      	mov	r2, r3
 800ef14:	68f8      	ldr	r0, [r7, #12]
 800ef16:	f7f5 f891 	bl	800403c <HAL_JPEG_ConfigOutputBuffer>

    // Signal Hardware Decoding to wake up
    SEM_POST(semDecodingDone);
 800ef1a:	4b08      	ldr	r3, [pc, #32]	; (800ef3c <HAL_JPEG_DataReadyCallback+0xbc>)
 800ef1c:	681b      	ldr	r3, [r3, #0]
 800ef1e:	4618      	mov	r0, r3
 800ef20:	f7f9 faa4 	bl	800846c <osSemaphoreRelease>
}
 800ef24:	bf00      	nop
 800ef26:	3710      	adds	r7, #16
 800ef28:	46bd      	mov	sp, r7
 800ef2a:	bd80      	pop	{r7, pc}
 800ef2c:	2001e1ac 	.word	0x2001e1ac
 800ef30:	20000014 	.word	0x20000014
 800ef34:	2001e1b0 	.word	0x2001e1b0
 800ef38:	2001e1c8 	.word	0x2001e1c8
 800ef3c:	2001e1c4 	.word	0x2001e1c4

0800ef40 <HAL_JPEG_ErrorCallback>:
  * @brief  JPEG Error callback
  * @param hjpeg: JPEG handle pointer
  * @retval None
  */
void HAL_JPEG_ErrorCallback(JPEG_HandleTypeDef *hjpeg)
{
 800ef40:	b480      	push	{r7}
 800ef42:	b083      	sub	sp, #12
 800ef44:	af00      	add	r7, sp, #0
 800ef46:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 800ef48:	b672      	cpsid	i
}
 800ef4a:	bf00      	nop
  __disable_irq();
  while (1)
 800ef4c:	e7fe      	b.n	800ef4c <HAL_JPEG_ErrorCallback+0xc>
	...

0800ef50 <HAL_JPEG_DecodeCpltCallback>:
  * @brief  JPEG Decode complete callback
  * @param hjpeg: JPEG handle pointer
  * @retval None
  */
void HAL_JPEG_DecodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
{
 800ef50:	b480      	push	{r7}
 800ef52:	b083      	sub	sp, #12
 800ef54:	af00      	add	r7, sp, #0
 800ef56:	6078      	str	r0, [r7, #4]
  Jpeg_HWDecodingEnd = 1;
 800ef58:	4b04      	ldr	r3, [pc, #16]	; (800ef6c <HAL_JPEG_DecodeCpltCallback+0x1c>)
 800ef5a:	2201      	movs	r2, #1
 800ef5c:	601a      	str	r2, [r3, #0]
}
 800ef5e:	bf00      	nop
 800ef60:	370c      	adds	r7, #12
 800ef62:	46bd      	mov	sp, r7
 800ef64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef68:	4770      	bx	lr
 800ef6a:	bf00      	nop
 800ef6c:	2001e1a4 	.word	0x2001e1a4

0800ef70 <JPEG_OutputHandler>:
  * @brief  JPEG Ouput Data BackGround Postprocessing .
  * @param hjpeg: JPEG handle pointer
  * @retval 1 : if JPEG processing has finished, 0 : if JPEG processing still ongoing
  */
uint32_t JPEG_OutputHandler(JPEG_HandleTypeDef *hjpeg)
{
 800ef70:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ef72:	b087      	sub	sp, #28
 800ef74:	af02      	add	r7, sp, #8
 800ef76:	6078      	str	r0, [r7, #4]
  uint32_t ConvertedDataCount;

  if(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL)
 800ef78:	4b55      	ldr	r3, [pc, #340]	; (800f0d0 <JPEG_OutputHandler+0x160>)
 800ef7a:	681a      	ldr	r2, [r3, #0]
 800ef7c:	4955      	ldr	r1, [pc, #340]	; (800f0d4 <JPEG_OutputHandler+0x164>)
 800ef7e:	4613      	mov	r3, r2
 800ef80:	005b      	lsls	r3, r3, #1
 800ef82:	4413      	add	r3, r2
 800ef84:	009b      	lsls	r3, r3, #2
 800ef86:	440b      	add	r3, r1
 800ef88:	781b      	ldrb	r3, [r3, #0]
 800ef8a:	2b01      	cmp	r3, #1
 800ef8c:	d160      	bne.n	800f050 <JPEG_OutputHandler+0xe0>
  {
    /* Invalidate DCache prior to YCbCr/RGB software conversion. */
    if (SCB->CCR & SCB_CCR_DC_Msk)
 800ef8e:	4b52      	ldr	r3, [pc, #328]	; (800f0d8 <JPEG_OutputHandler+0x168>)
 800ef90:	695b      	ldr	r3, [r3, #20]
 800ef92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	bf14      	ite	ne
 800ef9a:	2301      	movne	r3, #1
 800ef9c:	2300      	moveq	r3, #0
 800ef9e:	b2db      	uxtb	r3, r3
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d001      	beq.n	800efa8 <JPEG_OutputHandler+0x38>
    {
      SCB_CleanInvalidateDCache();
 800efa4:	f7ff f87e 	bl	800e0a4 <SCB_CleanInvalidateDCache>
    }

    MCU_BlockIndex += pConvert_Function(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].DataBuffer, FrameBufferAddress, MCU_BlockIndex, Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].DataBufferSize, &ConvertedDataCount);
 800efa8:	4b4c      	ldr	r3, [pc, #304]	; (800f0dc <JPEG_OutputHandler+0x16c>)
 800efaa:	681c      	ldr	r4, [r3, #0]
 800efac:	4b48      	ldr	r3, [pc, #288]	; (800f0d0 <JPEG_OutputHandler+0x160>)
 800efae:	681a      	ldr	r2, [r3, #0]
 800efb0:	4948      	ldr	r1, [pc, #288]	; (800f0d4 <JPEG_OutputHandler+0x164>)
 800efb2:	4613      	mov	r3, r2
 800efb4:	005b      	lsls	r3, r3, #1
 800efb6:	4413      	add	r3, r2
 800efb8:	009b      	lsls	r3, r3, #2
 800efba:	440b      	add	r3, r1
 800efbc:	3304      	adds	r3, #4
 800efbe:	6818      	ldr	r0, [r3, #0]
 800efc0:	4b47      	ldr	r3, [pc, #284]	; (800f0e0 <JPEG_OutputHandler+0x170>)
 800efc2:	6819      	ldr	r1, [r3, #0]
 800efc4:	4b47      	ldr	r3, [pc, #284]	; (800f0e4 <JPEG_OutputHandler+0x174>)
 800efc6:	681d      	ldr	r5, [r3, #0]
 800efc8:	4b41      	ldr	r3, [pc, #260]	; (800f0d0 <JPEG_OutputHandler+0x160>)
 800efca:	681a      	ldr	r2, [r3, #0]
 800efcc:	4e41      	ldr	r6, [pc, #260]	; (800f0d4 <JPEG_OutputHandler+0x164>)
 800efce:	4613      	mov	r3, r2
 800efd0:	005b      	lsls	r3, r3, #1
 800efd2:	4413      	add	r3, r2
 800efd4:	009b      	lsls	r3, r3, #2
 800efd6:	4433      	add	r3, r6
 800efd8:	3308      	adds	r3, #8
 800efda:	681a      	ldr	r2, [r3, #0]
 800efdc:	f107 030c 	add.w	r3, r7, #12
 800efe0:	9300      	str	r3, [sp, #0]
 800efe2:	4613      	mov	r3, r2
 800efe4:	462a      	mov	r2, r5
 800efe6:	47a0      	blx	r4
 800efe8:	4602      	mov	r2, r0
 800efea:	4b3e      	ldr	r3, [pc, #248]	; (800f0e4 <JPEG_OutputHandler+0x174>)
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	4413      	add	r3, r2
 800eff0:	4a3c      	ldr	r2, [pc, #240]	; (800f0e4 <JPEG_OutputHandler+0x174>)
 800eff2:	6013      	str	r3, [r2, #0]

    Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State = JPEG_BUFFER_EMPTY;
 800eff4:	4b36      	ldr	r3, [pc, #216]	; (800f0d0 <JPEG_OutputHandler+0x160>)
 800eff6:	681a      	ldr	r2, [r3, #0]
 800eff8:	4936      	ldr	r1, [pc, #216]	; (800f0d4 <JPEG_OutputHandler+0x164>)
 800effa:	4613      	mov	r3, r2
 800effc:	005b      	lsls	r3, r3, #1
 800effe:	4413      	add	r3, r2
 800f000:	009b      	lsls	r3, r3, #2
 800f002:	440b      	add	r3, r1
 800f004:	2200      	movs	r2, #0
 800f006:	701a      	strb	r2, [r3, #0]
    Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].DataBufferSize = 0;
 800f008:	4b31      	ldr	r3, [pc, #196]	; (800f0d0 <JPEG_OutputHandler+0x160>)
 800f00a:	681a      	ldr	r2, [r3, #0]
 800f00c:	4931      	ldr	r1, [pc, #196]	; (800f0d4 <JPEG_OutputHandler+0x164>)
 800f00e:	4613      	mov	r3, r2
 800f010:	005b      	lsls	r3, r3, #1
 800f012:	4413      	add	r3, r2
 800f014:	009b      	lsls	r3, r3, #2
 800f016:	440b      	add	r3, r1
 800f018:	3308      	adds	r3, #8
 800f01a:	2200      	movs	r2, #0
 800f01c:	601a      	str	r2, [r3, #0]

    JPEG_OUT_Read_BufferIndex++;
 800f01e:	4b2c      	ldr	r3, [pc, #176]	; (800f0d0 <JPEG_OutputHandler+0x160>)
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	3301      	adds	r3, #1
 800f024:	4a2a      	ldr	r2, [pc, #168]	; (800f0d0 <JPEG_OutputHandler+0x160>)
 800f026:	6013      	str	r3, [r2, #0]
    if(JPEG_OUT_Read_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
 800f028:	4b29      	ldr	r3, [pc, #164]	; (800f0d0 <JPEG_OutputHandler+0x160>)
 800f02a:	681b      	ldr	r3, [r3, #0]
 800f02c:	2b01      	cmp	r3, #1
 800f02e:	d902      	bls.n	800f036 <JPEG_OutputHandler+0xc6>
    {
      JPEG_OUT_Read_BufferIndex = 0;
 800f030:	4b27      	ldr	r3, [pc, #156]	; (800f0d0 <JPEG_OutputHandler+0x160>)
 800f032:	2200      	movs	r2, #0
 800f034:	601a      	str	r2, [r3, #0]
    }

    if(MCU_BlockIndex == MCU_TotalNb)
 800f036:	4b2b      	ldr	r3, [pc, #172]	; (800f0e4 <JPEG_OutputHandler+0x174>)
 800f038:	681a      	ldr	r2, [r3, #0]
 800f03a:	4b2b      	ldr	r3, [pc, #172]	; (800f0e8 <JPEG_OutputHandler+0x178>)
 800f03c:	681b      	ldr	r3, [r3, #0]
 800f03e:	429a      	cmp	r2, r3
 800f040:	bf0c      	ite	eq
 800f042:	2301      	moveq	r3, #1
 800f044:	2300      	movne	r3, #0
 800f046:	b2db      	uxtb	r3, r3
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d02a      	beq.n	800f0a2 <JPEG_OutputHandler+0x132>
    {
      return 1;
 800f04c:	2301      	movs	r3, #1
 800f04e:	e03a      	b.n	800f0c6 <JPEG_OutputHandler+0x156>
    }
  }
  else if((Output_Is_Paused == 1) && \
 800f050:	4b26      	ldr	r3, [pc, #152]	; (800f0ec <JPEG_OutputHandler+0x17c>)
 800f052:	681b      	ldr	r3, [r3, #0]
          (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) &&\
 800f054:	2b01      	cmp	r3, #1
 800f056:	d117      	bne.n	800f088 <JPEG_OutputHandler+0x118>
 800f058:	4b25      	ldr	r3, [pc, #148]	; (800f0f0 <JPEG_OutputHandler+0x180>)
 800f05a:	681a      	ldr	r2, [r3, #0]
 800f05c:	491d      	ldr	r1, [pc, #116]	; (800f0d4 <JPEG_OutputHandler+0x164>)
 800f05e:	4613      	mov	r3, r2
 800f060:	005b      	lsls	r3, r3, #1
 800f062:	4413      	add	r3, r2
 800f064:	009b      	lsls	r3, r3, #2
 800f066:	440b      	add	r3, r1
 800f068:	781b      	ldrb	r3, [r3, #0]
  else if((Output_Is_Paused == 1) && \
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	d10c      	bne.n	800f088 <JPEG_OutputHandler+0x118>
          (Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_EMPTY))
 800f06e:	4b18      	ldr	r3, [pc, #96]	; (800f0d0 <JPEG_OutputHandler+0x160>)
 800f070:	681a      	ldr	r2, [r3, #0]
 800f072:	4918      	ldr	r1, [pc, #96]	; (800f0d4 <JPEG_OutputHandler+0x164>)
 800f074:	4613      	mov	r3, r2
 800f076:	005b      	lsls	r3, r3, #1
 800f078:	4413      	add	r3, r2
 800f07a:	009b      	lsls	r3, r3, #2
 800f07c:	440b      	add	r3, r1
 800f07e:	781b      	ldrb	r3, [r3, #0]
          (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) &&\
 800f080:	2b00      	cmp	r3, #0
 800f082:	d101      	bne.n	800f088 <JPEG_OutputHandler+0x118>
 800f084:	2301      	movs	r3, #1
 800f086:	e000      	b.n	800f08a <JPEG_OutputHandler+0x11a>
 800f088:	2300      	movs	r3, #0
  else if((Output_Is_Paused == 1) && \
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d007      	beq.n	800f09e <JPEG_OutputHandler+0x12e>
  {
    Output_Is_Paused = 0;
 800f08e:	4b17      	ldr	r3, [pc, #92]	; (800f0ec <JPEG_OutputHandler+0x17c>)
 800f090:	2200      	movs	r2, #0
 800f092:	601a      	str	r2, [r3, #0]
    HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 800f094:	2102      	movs	r1, #2
 800f096:	6878      	ldr	r0, [r7, #4]
 800f098:	f7f4 ff01 	bl	8003e9e <HAL_JPEG_Resume>
 800f09c:	e001      	b.n	800f0a2 <JPEG_OutputHandler+0x132>
  }
  else
  {
    return 2;
 800f09e:	2302      	movs	r3, #2
 800f0a0:	e011      	b.n	800f0c6 <JPEG_OutputHandler+0x156>
  }

  if((MCU_BlockIndex == MCU_TotalNb) && (Jpeg_HWDecodingEnd))// decode completed
 800f0a2:	4b10      	ldr	r3, [pc, #64]	; (800f0e4 <JPEG_OutputHandler+0x174>)
 800f0a4:	681a      	ldr	r2, [r3, #0]
 800f0a6:	4b10      	ldr	r3, [pc, #64]	; (800f0e8 <JPEG_OutputHandler+0x178>)
 800f0a8:	681b      	ldr	r3, [r3, #0]
 800f0aa:	429a      	cmp	r2, r3
 800f0ac:	d105      	bne.n	800f0ba <JPEG_OutputHandler+0x14a>
 800f0ae:	4b11      	ldr	r3, [pc, #68]	; (800f0f4 <JPEG_OutputHandler+0x184>)
 800f0b0:	681b      	ldr	r3, [r3, #0]
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d001      	beq.n	800f0ba <JPEG_OutputHandler+0x14a>
 800f0b6:	2301      	movs	r3, #1
 800f0b8:	e000      	b.n	800f0bc <JPEG_OutputHandler+0x14c>
 800f0ba:	2300      	movs	r3, #0
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d001      	beq.n	800f0c4 <JPEG_OutputHandler+0x154>
  {
    return 1;
 800f0c0:	2301      	movs	r3, #1
 800f0c2:	e000      	b.n	800f0c6 <JPEG_OutputHandler+0x156>
  }

  return 0;
 800f0c4:	2300      	movs	r3, #0
}
 800f0c6:	4618      	mov	r0, r3
 800f0c8:	3714      	adds	r7, #20
 800f0ca:	46bd      	mov	sp, r7
 800f0cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f0ce:	bf00      	nop
 800f0d0:	2001e1a8 	.word	0x2001e1a8
 800f0d4:	20000014 	.word	0x20000014
 800f0d8:	e000ed00 	.word	0xe000ed00
 800f0dc:	2001e1bc 	.word	0x2001e1bc
 800f0e0:	2001e194 	.word	0x2001e194
 800f0e4:	2001e1c0 	.word	0x2001e1c0
 800f0e8:	2001e1b8 	.word	0x2001e1b8
 800f0ec:	2001e1b0 	.word	0x2001e1b0
 800f0f0:	2001e1ac 	.word	0x2001e1ac
 800f0f4:	2001e1a4 	.word	0x2001e1a4

0800f0f8 <_ZN20HardwareMJPEGDecoderD1Ev>:
class HardwareMJPEGDecoder : public MJPEGDecoder
 800f0f8:	b580      	push	{r7, lr}
 800f0fa:	b082      	sub	sp, #8
 800f0fc:	af00      	add	r7, sp, #0
 800f0fe:	6078      	str	r0, [r7, #4]
 800f100:	4a05      	ldr	r2, [pc, #20]	; (800f118 <_ZN20HardwareMJPEGDecoderD1Ev+0x20>)
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	601a      	str	r2, [r3, #0]
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	4618      	mov	r0, r3
 800f10a:	f7fe ff91 	bl	800e030 <_ZN12MJPEGDecoderD1Ev>
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	4618      	mov	r0, r3
 800f112:	3708      	adds	r7, #8
 800f114:	46bd      	mov	sp, r7
 800f116:	bd80      	pop	{r7, pc}
 800f118:	08026ec0 	.word	0x08026ec0

0800f11c <_ZN20HardwareMJPEGDecoderD0Ev>:
 800f11c:	b580      	push	{r7, lr}
 800f11e:	b082      	sub	sp, #8
 800f120:	af00      	add	r7, sp, #0
 800f122:	6078      	str	r0, [r7, #4]
 800f124:	6878      	ldr	r0, [r7, #4]
 800f126:	f7ff ffe7 	bl	800f0f8 <_ZN20HardwareMJPEGDecoderD1Ev>
 800f12a:	2144      	movs	r1, #68	; 0x44
 800f12c:	6878      	ldr	r0, [r7, #4]
 800f12e:	f014 fa0e 	bl	802354e <_ZdlPvj>
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	4618      	mov	r0, r3
 800f136:	3708      	adds	r7, #8
 800f138:	46bd      	mov	sp, r7
 800f13a:	bd80      	pop	{r7, pc}

0800f13c <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 800f13c:	b580      	push	{r7, lr}
 800f13e:	af00      	add	r7, sp, #0
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 800f140:	2200      	movs	r2, #0
 800f142:	2101      	movs	r1, #1
 800f144:	2001      	movs	r0, #1
 800f146:	f7f9 f88f 	bl	8008268 <osSemaphoreNew>
 800f14a:	4603      	mov	r3, r0
 800f14c:	4a0f      	ldr	r2, [pc, #60]	; (800f18c <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 800f14e:	6013      	str	r3, [r2, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 800f150:	4b0e      	ldr	r3, [pc, #56]	; (800f18c <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 800f152:	681b      	ldr	r3, [r3, #0]
 800f154:	2b00      	cmp	r3, #0
 800f156:	d105      	bne.n	800f164 <_ZN8touchgfx10OSWrappers10initializeEv+0x28>
 800f158:	4b0d      	ldr	r3, [pc, #52]	; (800f190 <_ZN8touchgfx10OSWrappers10initializeEv+0x54>)
 800f15a:	4a0e      	ldr	r2, [pc, #56]	; (800f194 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 800f15c:	2128      	movs	r1, #40	; 0x28
 800f15e:	480e      	ldr	r0, [pc, #56]	; (800f198 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 800f160:	f014 fa24 	bl	80235ac <__assert_func>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 800f164:	2200      	movs	r2, #0
 800f166:	2104      	movs	r1, #4
 800f168:	2001      	movs	r0, #1
 800f16a:	f7f9 f9d7 	bl	800851c <osMessageQueueNew>
 800f16e:	4603      	mov	r3, r0
 800f170:	4a0a      	ldr	r2, [pc, #40]	; (800f19c <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 800f172:	6013      	str	r3, [r2, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 800f174:	4b09      	ldr	r3, [pc, #36]	; (800f19c <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d105      	bne.n	800f188 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>
 800f17c:	4b08      	ldr	r3, [pc, #32]	; (800f1a0 <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 800f17e:	4a05      	ldr	r2, [pc, #20]	; (800f194 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 800f180:	212c      	movs	r1, #44	; 0x2c
 800f182:	4805      	ldr	r0, [pc, #20]	; (800f198 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 800f184:	f014 fa12 	bl	80235ac <__assert_func>
}
 800f188:	bf00      	nop
 800f18a:	bd80      	pop	{r7, pc}
 800f18c:	2001e1dc 	.word	0x2001e1dc
 800f190:	080251ac 	.word	0x080251ac
 800f194:	080251f8 	.word	0x080251f8
 800f198:	08025228 	.word	0x08025228
 800f19c:	2001e1e0 	.word	0x2001e1e0
 800f1a0:	08025254 	.word	0x08025254

0800f1a4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 800f1a4:	b580      	push	{r7, lr}
 800f1a6:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 800f1a8:	4b04      	ldr	r3, [pc, #16]	; (800f1bc <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 800f1aa:	681b      	ldr	r3, [r3, #0]
 800f1ac:	f04f 31ff 	mov.w	r1, #4294967295
 800f1b0:	4618      	mov	r0, r3
 800f1b2:	f7f9 f8f5 	bl	80083a0 <osSemaphoreAcquire>
}
 800f1b6:	bf00      	nop
 800f1b8:	bd80      	pop	{r7, pc}
 800f1ba:	bf00      	nop
 800f1bc:	2001e1dc 	.word	0x2001e1dc

0800f1c0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 800f1c0:	b580      	push	{r7, lr}
 800f1c2:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 800f1c4:	4b03      	ldr	r3, [pc, #12]	; (800f1d4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 800f1c6:	681b      	ldr	r3, [r3, #0]
 800f1c8:	4618      	mov	r0, r3
 800f1ca:	f7f9 f94f 	bl	800846c <osSemaphoreRelease>
}
 800f1ce:	bf00      	nop
 800f1d0:	bd80      	pop	{r7, pc}
 800f1d2:	bf00      	nop
 800f1d4:	2001e1dc 	.word	0x2001e1dc

0800f1d8 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 800f1d8:	b580      	push	{r7, lr}
 800f1da:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, 0);
 800f1dc:	4b03      	ldr	r3, [pc, #12]	; (800f1ec <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	2100      	movs	r1, #0
 800f1e2:	4618      	mov	r0, r3
 800f1e4:	f7f9 f8dc 	bl	80083a0 <osSemaphoreAcquire>
}
 800f1e8:	bf00      	nop
 800f1ea:	bd80      	pop	{r7, pc}
 800f1ec:	2001e1dc 	.word	0x2001e1dc

0800f1f0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 800f1f0:	b580      	push	{r7, lr}
 800f1f2:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 800f1f4:	4b03      	ldr	r3, [pc, #12]	; (800f204 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 800f1f6:	681b      	ldr	r3, [r3, #0]
 800f1f8:	4618      	mov	r0, r3
 800f1fa:	f7f9 f937 	bl	800846c <osSemaphoreRelease>
}
 800f1fe:	bf00      	nop
 800f200:	bd80      	pop	{r7, pc}
 800f202:	bf00      	nop
 800f204:	2001e1dc 	.word	0x2001e1dc

0800f208 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 800f208:	b580      	push	{r7, lr}
 800f20a:	b082      	sub	sp, #8
 800f20c:	af00      	add	r7, sp, #0
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 800f20e:	4b09      	ldr	r3, [pc, #36]	; (800f234 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 800f210:	6818      	ldr	r0, [r3, #0]
 800f212:	1d39      	adds	r1, r7, #4
 800f214:	2300      	movs	r3, #0
 800f216:	2200      	movs	r2, #0
 800f218:	f7f9 fa06 	bl	8008628 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 800f21c:	4b05      	ldr	r3, [pc, #20]	; (800f234 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 800f21e:	6818      	ldr	r0, [r3, #0]
 800f220:	1d39      	adds	r1, r7, #4
 800f222:	f04f 33ff 	mov.w	r3, #4294967295
 800f226:	2200      	movs	r2, #0
 800f228:	f7f9 f9fe 	bl	8008628 <osMessageQueueGet>
}
 800f22c:	bf00      	nop
 800f22e:	3708      	adds	r7, #8
 800f230:	46bd      	mov	sp, r7
 800f232:	bd80      	pop	{r7, pc}
 800f234:	2001e1e0 	.word	0x2001e1e0

0800f238 <__NVIC_EnableIRQ>:
{
 800f238:	b480      	push	{r7}
 800f23a:	b083      	sub	sp, #12
 800f23c:	af00      	add	r7, sp, #0
 800f23e:	4603      	mov	r3, r0
 800f240:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800f242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f246:	2b00      	cmp	r3, #0
 800f248:	db0b      	blt.n	800f262 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800f24a:	79fb      	ldrb	r3, [r7, #7]
 800f24c:	f003 021f 	and.w	r2, r3, #31
 800f250:	4907      	ldr	r1, [pc, #28]	; (800f270 <__NVIC_EnableIRQ+0x38>)
 800f252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f256:	095b      	lsrs	r3, r3, #5
 800f258:	2001      	movs	r0, #1
 800f25a:	fa00 f202 	lsl.w	r2, r0, r2
 800f25e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800f262:	bf00      	nop
 800f264:	370c      	adds	r7, #12
 800f266:	46bd      	mov	sp, r7
 800f268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f26c:	4770      	bx	lr
 800f26e:	bf00      	nop
 800f270:	e000e100 	.word	0xe000e100

0800f274 <__NVIC_DisableIRQ>:
{
 800f274:	b480      	push	{r7}
 800f276:	b083      	sub	sp, #12
 800f278:	af00      	add	r7, sp, #0
 800f27a:	4603      	mov	r3, r0
 800f27c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800f27e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f282:	2b00      	cmp	r3, #0
 800f284:	db12      	blt.n	800f2ac <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800f286:	79fb      	ldrb	r3, [r7, #7]
 800f288:	f003 021f 	and.w	r2, r3, #31
 800f28c:	490a      	ldr	r1, [pc, #40]	; (800f2b8 <__NVIC_DisableIRQ+0x44>)
 800f28e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f292:	095b      	lsrs	r3, r3, #5
 800f294:	2001      	movs	r0, #1
 800f296:	fa00 f202 	lsl.w	r2, r0, r2
 800f29a:	3320      	adds	r3, #32
 800f29c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800f2a0:	f3bf 8f4f 	dsb	sy
}
 800f2a4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800f2a6:	f3bf 8f6f 	isb	sy
}
 800f2aa:	bf00      	nop
}
 800f2ac:	bf00      	nop
 800f2ae:	370c      	adds	r7, #12
 800f2b0:	46bd      	mov	sp, r7
 800f2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2b6:	4770      	bx	lr
 800f2b8:	e000e100 	.word	0xe000e100

0800f2bc <_ZN8touchgfx9colortypeC1Ev>:
    colortype()
 800f2bc:	b480      	push	{r7}
 800f2be:	b083      	sub	sp, #12
 800f2c0:	af00      	add	r7, sp, #0
 800f2c2:	6078      	str	r0, [r7, #4]
        : color(0)
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	2200      	movs	r2, #0
 800f2c8:	601a      	str	r2, [r3, #0]
    }
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	4618      	mov	r0, r3
 800f2ce:	370c      	adds	r7, #12
 800f2d0:	46bd      	mov	sp, r7
 800f2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2d6:	4770      	bx	lr

0800f2d8 <_ZNK8touchgfx9colortypecvmEv>:
    operator uint32_t() const
 800f2d8:	b480      	push	{r7}
 800f2da:	b083      	sub	sp, #12
 800f2dc:	af00      	add	r7, sp, #0
 800f2de:	6078      	str	r0, [r7, #4]
        return color;
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	681b      	ldr	r3, [r3, #0]
    }
 800f2e4:	4618      	mov	r0, r3
 800f2e6:	370c      	adds	r7, #12
 800f2e8:	46bd      	mov	sp, r7
 800f2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ee:	4770      	bx	lr

0800f2f0 <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 800f2f0:	b480      	push	{r7}
 800f2f2:	b083      	sub	sp, #12
 800f2f4:	af00      	add	r7, sp, #0
 800f2f6:	6078      	str	r0, [r7, #4]
    {
 800f2f8:	4a04      	ldr	r2, [pc, #16]	; (800f30c <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	601a      	str	r2, [r3, #0]
    }
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	4618      	mov	r0, r3
 800f302:	370c      	adds	r7, #12
 800f304:	46bd      	mov	sp, r7
 800f306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f30a:	4770      	bx	lr
 800f30c:	08026f94 	.word	0x08026f94

0800f310 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 800f310:	b580      	push	{r7, lr}
 800f312:	b082      	sub	sp, #8
 800f314:	af00      	add	r7, sp, #0
 800f316:	6078      	str	r0, [r7, #4]
    }
 800f318:	6878      	ldr	r0, [r7, #4]
 800f31a:	f7ff ffe9 	bl	800f2f0 <_ZN8touchgfx9DMA_QueueD1Ev>
 800f31e:	2104      	movs	r1, #4
 800f320:	6878      	ldr	r0, [r7, #4]
 800f322:	f014 f914 	bl	802354e <_ZdlPvj>
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	4618      	mov	r0, r3
 800f32a:	3708      	adds	r7, #8
 800f32c:	46bd      	mov	sp, r7
 800f32e:	bd80      	pop	{r7, pc}

0800f330 <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 800f330:	b580      	push	{r7, lr}
 800f332:	b082      	sub	sp, #8
 800f334:	af00      	add	r7, sp, #0
 800f336:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	681b      	ldr	r3, [r3, #0]
 800f33c:	3344      	adds	r3, #68	; 0x44
 800f33e:	681b      	ldr	r3, [r3, #0]
 800f340:	6878      	ldr	r0, [r7, #4]
 800f342:	4798      	blx	r3
    }
 800f344:	bf00      	nop
 800f346:	3708      	adds	r7, #8
 800f348:	46bd      	mov	sp, r7
 800f34a:	bd80      	pop	{r7, pc}

0800f34c <_ZN8touchgfx13DMA_InterfaceD1Ev>:
    {
        return DMA_TYPE_GENERIC;
    }

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 800f34c:	b480      	push	{r7}
 800f34e:	b083      	sub	sp, #12
 800f350:	af00      	add	r7, sp, #0
 800f352:	6078      	str	r0, [r7, #4]
    {
 800f354:	4a04      	ldr	r2, [pc, #16]	; (800f368 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	601a      	str	r2, [r3, #0]
    }
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	4618      	mov	r0, r3
 800f35e:	370c      	adds	r7, #12
 800f360:	46bd      	mov	sp, r7
 800f362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f366:	4770      	bx	lr
 800f368:	08027988 	.word	0x08027988

0800f36c <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 800f36c:	b580      	push	{r7, lr}
 800f36e:	b082      	sub	sp, #8
 800f370:	af00      	add	r7, sp, #0
 800f372:	6078      	str	r0, [r7, #4]
    }
 800f374:	6878      	ldr	r0, [r7, #4]
 800f376:	f7ff ffe9 	bl	800f34c <_ZN8touchgfx13DMA_InterfaceD1Ev>
 800f37a:	210c      	movs	r1, #12
 800f37c:	6878      	ldr	r0, [r7, #4]
 800f37e:	f014 f8e6 	bl	802354e <_ZdlPvj>
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	4618      	mov	r0, r3
 800f386:	3708      	adds	r7, #8
 800f388:	46bd      	mov	sp, r7
 800f38a:	bd80      	pop	{r7, pc}

0800f38c <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 800f38c:	b480      	push	{r7}
 800f38e:	b083      	sub	sp, #12
 800f390:	af00      	add	r7, sp, #0
 800f392:	6078      	str	r0, [r7, #4]
 800f394:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 800f396:	4a09      	ldr	r2, [pc, #36]	; (800f3bc <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	601a      	str	r2, [r3, #0]
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	683a      	ldr	r2, [r7, #0]
 800f3a0:	605a      	str	r2, [r3, #4]
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	2200      	movs	r2, #0
 800f3a6:	721a      	strb	r2, [r3, #8]
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	2200      	movs	r2, #0
 800f3ac:	725a      	strb	r2, [r3, #9]
    {
    }
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	4618      	mov	r0, r3
 800f3b2:	370c      	adds	r7, #12
 800f3b4:	46bd      	mov	sp, r7
 800f3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ba:	4770      	bx	lr
 800f3bc:	08027988 	.word	0x08027988

0800f3c0 <_ZN8STM32DMA10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_CHROMART type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
 800f3c0:	b480      	push	{r7}
 800f3c2:	b083      	sub	sp, #12
 800f3c4:	af00      	add	r7, sp, #0
 800f3c6:	6078      	str	r0, [r7, #4]
    {
        return touchgfx::DMA_TYPE_CHROMART;
 800f3c8:	2301      	movs	r3, #1
    }
 800f3ca:	4618      	mov	r0, r3
 800f3cc:	370c      	adds	r7, #12
 800f3ce:	46bd      	mov	sp, r7
 800f3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3d4:	4770      	bx	lr

0800f3d6 <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 800f3d6:	b580      	push	{r7, lr}
 800f3d8:	b082      	sub	sp, #8
 800f3da:	af00      	add	r7, sp, #0
 800f3dc:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 800f3de:	687a      	ldr	r2, [r7, #4]
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	681b      	ldr	r3, [r3, #0]
 800f3e4:	3328      	adds	r3, #40	; 0x28
 800f3e6:	681b      	ldr	r3, [r3, #0]
 800f3e8:	4610      	mov	r0, r2
 800f3ea:	4798      	blx	r3
    }
 800f3ec:	bf00      	nop
 800f3ee:	3708      	adds	r7, #8
 800f3f0:	46bd      	mov	sp, r7
 800f3f2:	bd80      	pop	{r7, pc}

0800f3f4 <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 800f3f4:	b580      	push	{r7, lr}
 800f3f6:	b082      	sub	sp, #8
 800f3f8:	af00      	add	r7, sp, #0
 800f3fa:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	685a      	ldr	r2, [r3, #4]
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	685b      	ldr	r3, [r3, #4]
 800f404:	681b      	ldr	r3, [r3, #0]
 800f406:	3314      	adds	r3, #20
 800f408:	681b      	ldr	r3, [r3, #0]
 800f40a:	4610      	mov	r0, r2
 800f40c:	4798      	blx	r3
    }
 800f40e:	bf00      	nop
 800f410:	3708      	adds	r7, #8
 800f412:	46bd      	mov	sp, r7
 800f414:	bd80      	pop	{r7, pc}

0800f416 <DMA2D_XferCpltCallback>:

extern "C" DMA2D_HandleTypeDef hdma2d;

extern "C" {
    static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
    {
 800f416:	b580      	push	{r7, lr}
 800f418:	b082      	sub	sp, #8
 800f41a:	af00      	add	r7, sp, #0
 800f41c:	6078      	str	r0, [r7, #4]
        (void)handle; // Unused argument
        HAL::getInstance()->signalDMAInterrupt();
 800f41e:	f7fc fef7 	bl	800c210 <_ZN8touchgfx3HAL11getInstanceEv>
 800f422:	4603      	mov	r3, r0
 800f424:	4618      	mov	r0, r3
 800f426:	f7ff ffe5 	bl	800f3f4 <_ZN8touchgfx3HAL18signalDMAInterruptEv>
    }
 800f42a:	bf00      	nop
 800f42c:	3708      	adds	r7, #8
 800f42e:	46bd      	mov	sp, r7
 800f430:	bd80      	pop	{r7, pc}

0800f432 <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 800f432:	b580      	push	{r7, lr}
 800f434:	b082      	sub	sp, #8
 800f436:	af00      	add	r7, sp, #0
 800f438:	6078      	str	r0, [r7, #4]
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	330c      	adds	r3, #12
 800f43e:	4618      	mov	r0, r3
 800f440:	f7ff ff3c 	bl	800f2bc <_ZN8touchgfx9colortypeC1Ev>
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	4618      	mov	r0, r3
 800f448:	3708      	adds	r7, #8
 800f44a:	46bd      	mov	sp, r7
 800f44c:	bd80      	pop	{r7, pc}
	...

0800f450 <_ZN8STM32DMAC1Ev>:
}

STM32DMA::STM32DMA()
 800f450:	b5b0      	push	{r4, r5, r7, lr}
 800f452:	b082      	sub	sp, #8
 800f454:	af00      	add	r7, sp, #0
 800f456:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 800f458:	687a      	ldr	r2, [r7, #4]
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	330c      	adds	r3, #12
 800f45e:	4619      	mov	r1, r3
 800f460:	4610      	mov	r0, r2
 800f462:	f7ff ff93 	bl	800f38c <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 800f466:	4a0e      	ldr	r2, [pc, #56]	; (800f4a0 <_ZN8STM32DMAC1Ev+0x50>)
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	601a      	str	r2, [r3, #0]
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	f103 000c 	add.w	r0, r3, #12
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	3320      	adds	r3, #32
 800f476:	2260      	movs	r2, #96	; 0x60
 800f478:	4619      	mov	r1, r3
 800f47a:	f004 fd7d 	bl	8013f78 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	3320      	adds	r3, #32
 800f482:	245f      	movs	r4, #95	; 0x5f
 800f484:	461d      	mov	r5, r3
 800f486:	2c00      	cmp	r4, #0
 800f488:	db05      	blt.n	800f496 <_ZN8STM32DMAC1Ev+0x46>
 800f48a:	4628      	mov	r0, r5
 800f48c:	f7ff ffd1 	bl	800f432 <_ZN8touchgfx6BlitOpC1Ev>
 800f490:	3524      	adds	r5, #36	; 0x24
 800f492:	3c01      	subs	r4, #1
 800f494:	e7f7      	b.n	800f486 <_ZN8STM32DMAC1Ev+0x36>
{
}
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	4618      	mov	r0, r3
 800f49a:	3708      	adds	r7, #8
 800f49c:	46bd      	mov	sp, r7
 800f49e:	bdb0      	pop	{r4, r5, r7, pc}
 800f4a0:	08026f44 	.word	0x08026f44

0800f4a4 <_ZN8STM32DMAD1Ev>:

STM32DMA::~STM32DMA()
 800f4a4:	b580      	push	{r7, lr}
 800f4a6:	b082      	sub	sp, #8
 800f4a8:	af00      	add	r7, sp, #0
 800f4aa:	6078      	str	r0, [r7, #4]
 800f4ac:	4a09      	ldr	r2, [pc, #36]	; (800f4d4 <_ZN8STM32DMAD1Ev+0x30>)
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	601a      	str	r2, [r3, #0]
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
 800f4b2:	205a      	movs	r0, #90	; 0x5a
 800f4b4:	f7ff fede 	bl	800f274 <__NVIC_DisableIRQ>
STM32DMA::~STM32DMA()
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	330c      	adds	r3, #12
 800f4bc:	4618      	mov	r0, r3
 800f4be:	f000 fac7 	bl	800fa50 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	4618      	mov	r0, r3
 800f4c6:	f7ff ff41 	bl	800f34c <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	4618      	mov	r0, r3
 800f4ce:	3708      	adds	r7, #8
 800f4d0:	46bd      	mov	sp, r7
 800f4d2:	bd80      	pop	{r7, pc}
 800f4d4:	08026f44 	.word	0x08026f44

0800f4d8 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 800f4d8:	b580      	push	{r7, lr}
 800f4da:	b082      	sub	sp, #8
 800f4dc:	af00      	add	r7, sp, #0
 800f4de:	6078      	str	r0, [r7, #4]
}
 800f4e0:	6878      	ldr	r0, [r7, #4]
 800f4e2:	f7ff ffdf 	bl	800f4a4 <_ZN8STM32DMAD1Ev>
 800f4e6:	f44f 615a 	mov.w	r1, #3488	; 0xda0
 800f4ea:	6878      	ldr	r0, [r7, #4]
 800f4ec:	f014 f82f 	bl	802354e <_ZdlPvj>
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	4618      	mov	r0, r3
 800f4f4:	3708      	adds	r7, #8
 800f4f6:	46bd      	mov	sp, r7
 800f4f8:	bd80      	pop	{r7, pc}
	...

0800f4fc <_ZN8STM32DMA10initializeEv>:

void STM32DMA::initialize()
{
 800f4fc:	b580      	push	{r7, lr}
 800f4fe:	b084      	sub	sp, #16
 800f500:	af00      	add	r7, sp, #0
 800f502:	6078      	str	r0, [r7, #4]
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800f504:	4b10      	ldr	r3, [pc, #64]	; (800f548 <_ZN8STM32DMA10initializeEv+0x4c>)
 800f506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f508:	4a0f      	ldr	r2, [pc, #60]	; (800f548 <_ZN8STM32DMA10initializeEv+0x4c>)
 800f50a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800f50e:	6313      	str	r3, [r2, #48]	; 0x30
 800f510:	4b0d      	ldr	r3, [pc, #52]	; (800f548 <_ZN8STM32DMA10initializeEv+0x4c>)
 800f512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f514:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f518:	60fb      	str	r3, [r7, #12]
 800f51a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DMA2D_FORCE_RESET();
 800f51c:	4b0a      	ldr	r3, [pc, #40]	; (800f548 <_ZN8STM32DMA10initializeEv+0x4c>)
 800f51e:	691b      	ldr	r3, [r3, #16]
 800f520:	4a09      	ldr	r2, [pc, #36]	; (800f548 <_ZN8STM32DMA10initializeEv+0x4c>)
 800f522:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800f526:	6113      	str	r3, [r2, #16]
    __HAL_RCC_DMA2D_RELEASE_RESET();
 800f528:	4b07      	ldr	r3, [pc, #28]	; (800f548 <_ZN8STM32DMA10initializeEv+0x4c>)
 800f52a:	691b      	ldr	r3, [r3, #16]
 800f52c:	4a06      	ldr	r2, [pc, #24]	; (800f548 <_ZN8STM32DMA10initializeEv+0x4c>)
 800f52e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800f532:	6113      	str	r3, [r2, #16]

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 800f534:	4b05      	ldr	r3, [pc, #20]	; (800f54c <_ZN8STM32DMA10initializeEv+0x50>)
 800f536:	4a06      	ldr	r2, [pc, #24]	; (800f550 <_ZN8STM32DMA10initializeEv+0x54>)
 800f538:	619a      	str	r2, [r3, #24]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
 800f53a:	205a      	movs	r0, #90	; 0x5a
 800f53c:	f7ff fe7c 	bl	800f238 <__NVIC_EnableIRQ>
}
 800f540:	bf00      	nop
 800f542:	3710      	adds	r7, #16
 800f544:	46bd      	mov	sp, r7
 800f546:	bd80      	pop	{r7, pc}
 800f548:	40023800 	.word	0x40023800
 800f54c:	20009750 	.word	0x20009750
 800f550:	0800f417 	.word	0x0800f417

0800f554 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
{
 800f554:	b580      	push	{r7, lr}
 800f556:	b084      	sub	sp, #16
 800f558:	af00      	add	r7, sp, #0
 800f55a:	6078      	str	r0, [r7, #4]
 800f55c:	460b      	mov	r3, r1
 800f55e:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_INPUT_ARGB8888;
 800f560:	2300      	movs	r3, #0
 800f562:	60fb      	str	r3, [r7, #12]

    switch (format)
 800f564:	78fb      	ldrb	r3, [r7, #3]
 800f566:	2b0b      	cmp	r3, #11
 800f568:	d826      	bhi.n	800f5b8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x64>
 800f56a:	a201      	add	r2, pc, #4	; (adr r2, 800f570 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 800f56c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f570:	0800f5ad 	.word	0x0800f5ad
 800f574:	0800f5a7 	.word	0x0800f5a7
 800f578:	0800f5a1 	.word	0x0800f5a1
 800f57c:	0800f5b9 	.word	0x0800f5b9
 800f580:	0800f5b9 	.word	0x0800f5b9
 800f584:	0800f5b9 	.word	0x0800f5b9
 800f588:	0800f5b9 	.word	0x0800f5b9
 800f58c:	0800f5b3 	.word	0x0800f5b3
 800f590:	0800f5b3 	.word	0x0800f5b3
 800f594:	0800f5b3 	.word	0x0800f5b3
 800f598:	0800f5b3 	.word	0x0800f5b3
 800f59c:	0800f5b3 	.word	0x0800f5b3
    {
    case Bitmap::ARGB8888: /* DMA2D input mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 800f5a0:	2300      	movs	r3, #0
 800f5a2:	60fb      	str	r3, [r7, #12]
        break;
 800f5a4:	e00e      	b.n	800f5c4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB888: /* DMA2D input mode set to 24bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB888;
 800f5a6:	2301      	movs	r3, #1
 800f5a8:	60fb      	str	r3, [r7, #12]
        break;
 800f5aa:	e00b      	b.n	800f5c4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB565: /* DMA2D input mode set to 16bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB565;
 800f5ac:	2302      	movs	r3, #2
 800f5ae:	60fb      	str	r3, [r7, #12]
        break;
 800f5b0:	e008      	b.n	800f5c4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* Fall through */
    case Bitmap::L8:       /* DMA2D input mode set to 8bit Color Look up table*/
        dma2dColorMode = DMA2D_INPUT_L8;
 800f5b2:	2305      	movs	r3, #5
 800f5b4:	60fb      	str	r3, [r7, #12]
        break;
 800f5b6:	e005      	b.n	800f5c4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported input format for DMA2D */
        assert(0 && "Unsupported Format!");
 800f5b8:	4b05      	ldr	r3, [pc, #20]	; (800f5d0 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x7c>)
 800f5ba:	4a06      	ldr	r2, [pc, #24]	; (800f5d4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x80>)
 800f5bc:	2166      	movs	r1, #102	; 0x66
 800f5be:	4806      	ldr	r0, [pc, #24]	; (800f5d8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x84>)
 800f5c0:	f013 fff4 	bl	80235ac <__assert_func>
        break;
    }

    return dma2dColorMode;
 800f5c4:	68fb      	ldr	r3, [r7, #12]
}
 800f5c6:	4618      	mov	r0, r3
 800f5c8:	3710      	adds	r7, #16
 800f5ca:	46bd      	mov	sp, r7
 800f5cc:	bd80      	pop	{r7, pc}
 800f5ce:	bf00      	nop
 800f5d0:	08025298 	.word	0x08025298
 800f5d4:	080252b4 	.word	0x080252b4
 800f5d8:	08025300 	.word	0x08025300

0800f5dc <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
{
 800f5dc:	b580      	push	{r7, lr}
 800f5de:	b084      	sub	sp, #16
 800f5e0:	af00      	add	r7, sp, #0
 800f5e2:	6078      	str	r0, [r7, #4]
 800f5e4:	460b      	mov	r3, r1
 800f5e6:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 800f5e8:	2300      	movs	r3, #0
 800f5ea:	60fb      	str	r3, [r7, #12]

    switch (format)
 800f5ec:	78fb      	ldrb	r3, [r7, #3]
 800f5ee:	2b0a      	cmp	r3, #10
 800f5f0:	d821      	bhi.n	800f636 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x5a>
 800f5f2:	a201      	add	r2, pc, #4	; (adr r2, 800f5f8 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 800f5f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5f8:	0800f631 	.word	0x0800f631
 800f5fc:	0800f62b 	.word	0x0800f62b
 800f600:	0800f625 	.word	0x0800f625
 800f604:	0800f637 	.word	0x0800f637
 800f608:	0800f637 	.word	0x0800f637
 800f60c:	0800f637 	.word	0x0800f637
 800f610:	0800f637 	.word	0x0800f637
 800f614:	0800f62b 	.word	0x0800f62b
 800f618:	0800f62b 	.word	0x0800f62b
 800f61c:	0800f62b 	.word	0x0800f62b
 800f620:	0800f62b 	.word	0x0800f62b
    {
    case Bitmap::ARGB8888: /* DMA2D output mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 800f624:	2300      	movs	r3, #0
 800f626:	60fb      	str	r3, [r7, #12]
        break;
 800f628:	e00b      	b.n	800f642 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB888:   /* Fall through */
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* DMA2D output mode set to 24bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 800f62a:	2301      	movs	r3, #1
 800f62c:	60fb      	str	r3, [r7, #12]
        break;
 800f62e:	e008      	b.n	800f642 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB565: /* DMA2D output mode set to 16bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 800f630:	2302      	movs	r3, #2
 800f632:	60fb      	str	r3, [r7, #12]
        break;
 800f634:	e005      	b.n	800f642 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported output format for DMA2D */
        assert(0 && "Unsupported Format!");
 800f636:	4b05      	ldr	r3, [pc, #20]	; (800f64c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>)
 800f638:	4a05      	ldr	r2, [pc, #20]	; (800f650 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x74>)
 800f63a:	2187      	movs	r1, #135	; 0x87
 800f63c:	4805      	ldr	r0, [pc, #20]	; (800f654 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x78>)
 800f63e:	f013 ffb5 	bl	80235ac <__assert_func>
        break;
    }

    return dma2dColorMode;
 800f642:	68fb      	ldr	r3, [r7, #12]
}
 800f644:	4618      	mov	r0, r3
 800f646:	3710      	adds	r7, #16
 800f648:	46bd      	mov	sp, r7
 800f64a:	bd80      	pop	{r7, pc}
 800f64c:	08025298 	.word	0x08025298
 800f650:	0802532c 	.word	0x0802532c
 800f654:	08025300 	.word	0x08025300

0800f658 <_ZN8STM32DMA11getBlitCapsEv>:

BlitOperations STM32DMA::getBlitCaps()
{
 800f658:	b480      	push	{r7}
 800f65a:	b083      	sub	sp, #12
 800f65c:	af00      	add	r7, sp, #0
 800f65e:	6078      	str	r0, [r7, #4]
                                       | BLIT_OP_COPY_L8
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
 800f660:	f240 33ef 	movw	r3, #1007	; 0x3ef
}
 800f664:	4618      	mov	r0, r3
 800f666:	370c      	adds	r7, #12
 800f668:	46bd      	mov	sp, r7
 800f66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f66e:	4770      	bx	lr

0800f670 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 800f670:	b590      	push	{r4, r7, lr}
 800f672:	b089      	sub	sp, #36	; 0x24
 800f674:	af00      	add	r7, sp, #0
 800f676:	6078      	str	r0, [r7, #4]
 800f678:	6039      	str	r1, [r7, #0]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 800f67a:	683b      	ldr	r3, [r7, #0]
 800f67c:	7f5b      	ldrb	r3, [r3, #29]
 800f67e:	4619      	mov	r1, r3
 800f680:	6878      	ldr	r0, [r7, #4]
 800f682:	f7ff ff67 	bl	800f554 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 800f686:	61b8      	str	r0, [r7, #24]
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 800f688:	683b      	ldr	r3, [r7, #0]
 800f68a:	7f9b      	ldrb	r3, [r3, #30]
 800f68c:	4619      	mov	r1, r3
 800f68e:	6878      	ldr	r0, [r7, #4]
 800f690:	f7ff ff60 	bl	800f554 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 800f694:	6178      	str	r0, [r7, #20]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 800f696:	683b      	ldr	r3, [r7, #0]
 800f698:	7f9b      	ldrb	r3, [r3, #30]
 800f69a:	4619      	mov	r1, r3
 800f69c:	6878      	ldr	r0, [r7, #4]
 800f69e:	f7ff ff9d 	bl	800f5dc <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 800f6a2:	6138      	str	r0, [r7, #16]

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 800f6a4:	683b      	ldr	r3, [r7, #0]
 800f6a6:	8b5b      	ldrh	r3, [r3, #26]
 800f6a8:	461a      	mov	r2, r3
 800f6aa:	683b      	ldr	r3, [r7, #0]
 800f6ac:	8a9b      	ldrh	r3, [r3, #20]
 800f6ae:	1ad2      	subs	r2, r2, r3
 800f6b0:	4b92      	ldr	r3, [pc, #584]	; (800f8fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800f6b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration */
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 800f6b4:	683b      	ldr	r3, [r7, #0]
 800f6b6:	8b5b      	ldrh	r3, [r3, #26]
 800f6b8:	461a      	mov	r2, r3
 800f6ba:	683b      	ldr	r3, [r7, #0]
 800f6bc:	8a9b      	ldrh	r3, [r3, #20]
 800f6be:	1ad2      	subs	r2, r2, r3
 800f6c0:	4b8e      	ldr	r3, [pc, #568]	; (800f8fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800f6c2:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration */
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 800f6c4:	683b      	ldr	r3, [r7, #0]
 800f6c6:	8b1b      	ldrh	r3, [r3, #24]
 800f6c8:	461a      	mov	r2, r3
 800f6ca:	683b      	ldr	r3, [r7, #0]
 800f6cc:	8a9b      	ldrh	r3, [r3, #20]
 800f6ce:	1ad2      	subs	r2, r2, r3
 800f6d0:	4b8a      	ldr	r3, [pc, #552]	; (800f8fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800f6d2:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 800f6d4:	4a89      	ldr	r2, [pc, #548]	; (800f8fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800f6d6:	693b      	ldr	r3, [r7, #16]
 800f6d8:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 800f6da:	683b      	ldr	r3, [r7, #0]
 800f6dc:	8adb      	ldrh	r3, [r3, #22]
 800f6de:	461a      	mov	r2, r3
 800f6e0:	683b      	ldr	r3, [r7, #0]
 800f6e2:	8a9b      	ldrh	r3, [r3, #20]
 800f6e4:	041b      	lsls	r3, r3, #16
 800f6e6:	431a      	orrs	r2, r3
 800f6e8:	4b84      	ldr	r3, [pc, #528]	; (800f8fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800f6ea:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800f6ec:	683b      	ldr	r3, [r7, #0]
 800f6ee:	691a      	ldr	r2, [r3, #16]
 800f6f0:	4b82      	ldr	r3, [pc, #520]	; (800f8fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800f6f2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 800f6f4:	683b      	ldr	r3, [r7, #0]
 800f6f6:	685a      	ldr	r2, [r3, #4]
 800f6f8:	4b80      	ldr	r3, [pc, #512]	; (800f8fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800f6fa:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 800f6fc:	683b      	ldr	r3, [r7, #0]
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f704:	d036      	beq.n	800f774 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x104>
 800f706:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f70a:	f200 80e2 	bhi.w	800f8d2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x262>
 800f70e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f712:	d014      	beq.n	800f73e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xce>
 800f714:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f718:	f200 80db 	bhi.w	800f8d2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x262>
 800f71c:	2b80      	cmp	r3, #128	; 0x80
 800f71e:	d059      	beq.n	800f7d4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x164>
 800f720:	2b80      	cmp	r3, #128	; 0x80
 800f722:	f200 80d6 	bhi.w	800f8d2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x262>
 800f726:	2b40      	cmp	r3, #64	; 0x40
 800f728:	f000 80be 	beq.w	800f8a8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x238>
 800f72c:	2b40      	cmp	r3, #64	; 0x40
 800f72e:	f200 80d0 	bhi.w	800f8d2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x262>
 800f732:	2b04      	cmp	r3, #4
 800f734:	d039      	beq.n	800f7aa <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13a>
 800f736:	2b20      	cmp	r3, #32
 800f738:	f000 80b6 	beq.w	800f8a8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x238>
 800f73c:	e0c9      	b.n	800f8d2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x262>
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800f73e:	683b      	ldr	r3, [r7, #0]
 800f740:	7f1b      	ldrb	r3, [r3, #28]
 800f742:	061b      	lsls	r3, r3, #24
 800f744:	4619      	mov	r1, r3
 800f746:	4a6d      	ldr	r2, [pc, #436]	; (800f8fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800f748:	4b6d      	ldr	r3, [pc, #436]	; (800f900 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 800f74a:	430b      	orrs	r3, r1
 800f74c:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 800f74e:	683b      	ldr	r3, [r7, #0]
 800f750:	330c      	adds	r3, #12
 800f752:	4c6a      	ldr	r4, [pc, #424]	; (800f8fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800f754:	4618      	mov	r0, r3
 800f756:	f7ff fdbf 	bl	800f2d8 <_ZNK8touchgfx9colortypecvmEv>
 800f75a:	4603      	mov	r3, r0
 800f75c:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800f75e:	4a67      	ldr	r2, [pc, #412]	; (800f8fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800f760:	697b      	ldr	r3, [r7, #20]
 800f762:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800f764:	683b      	ldr	r3, [r7, #0]
 800f766:	691a      	ldr	r2, [r3, #16]
 800f768:	4b64      	ldr	r3, [pc, #400]	; (800f8fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800f76a:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 800f76c:	4b63      	ldr	r3, [pc, #396]	; (800f8fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800f76e:	4a65      	ldr	r2, [pc, #404]	; (800f904 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 800f770:	601a      	str	r2, [r3, #0]
        break;
 800f772:	e0da      	b.n	800f92a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_A8:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800f774:	683b      	ldr	r3, [r7, #0]
 800f776:	7f1b      	ldrb	r3, [r3, #28]
 800f778:	061b      	lsls	r3, r3, #24
 800f77a:	4619      	mov	r1, r3
 800f77c:	4a5f      	ldr	r2, [pc, #380]	; (800f8fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800f77e:	4b62      	ldr	r3, [pc, #392]	; (800f908 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 800f780:	430b      	orrs	r3, r1
 800f782:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 800f784:	683b      	ldr	r3, [r7, #0]
 800f786:	330c      	adds	r3, #12
 800f788:	4c5c      	ldr	r4, [pc, #368]	; (800f8fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800f78a:	4618      	mov	r0, r3
 800f78c:	f7ff fda4 	bl	800f2d8 <_ZNK8touchgfx9colortypecvmEv>
 800f790:	4603      	mov	r3, r0
 800f792:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800f794:	4a59      	ldr	r2, [pc, #356]	; (800f8fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800f796:	697b      	ldr	r3, [r7, #20]
 800f798:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800f79a:	683b      	ldr	r3, [r7, #0]
 800f79c:	691a      	ldr	r2, [r3, #16]
 800f79e:	4b57      	ldr	r3, [pc, #348]	; (800f8fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800f7a0:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 800f7a2:	4b56      	ldr	r3, [pc, #344]	; (800f8fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800f7a4:	4a57      	ldr	r2, [pc, #348]	; (800f904 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 800f7a6:	601a      	str	r2, [r3, #0]
        break;
 800f7a8:	e0bf      	b.n	800f92a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800f7aa:	683b      	ldr	r3, [r7, #0]
 800f7ac:	7f1b      	ldrb	r3, [r3, #28]
 800f7ae:	061b      	lsls	r3, r3, #24
 800f7b0:	461a      	mov	r2, r3
 800f7b2:	69bb      	ldr	r3, [r7, #24]
 800f7b4:	4313      	orrs	r3, r2
 800f7b6:	4a51      	ldr	r2, [pc, #324]	; (800f8fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800f7b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f7bc:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800f7be:	4a4f      	ldr	r2, [pc, #316]	; (800f8fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800f7c0:	697b      	ldr	r3, [r7, #20]
 800f7c2:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800f7c4:	683b      	ldr	r3, [r7, #0]
 800f7c6:	691a      	ldr	r2, [r3, #16]
 800f7c8:	4b4c      	ldr	r3, [pc, #304]	; (800f8fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800f7ca:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 800f7cc:	4b4b      	ldr	r3, [pc, #300]	; (800f8fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800f7ce:	4a4d      	ldr	r2, [pc, #308]	; (800f904 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 800f7d0:	601a      	str	r2, [r3, #0]
        break;
 800f7d2:	e0aa      	b.n	800f92a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_L8:
        {
            bool blend = true;
 800f7d4:	2301      	movs	r3, #1
 800f7d6:	77fb      	strb	r3, [r7, #31]
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 800f7d8:	683b      	ldr	r3, [r7, #0]
 800f7da:	689b      	ldr	r3, [r3, #8]
 800f7dc:	60fb      	str	r3, [r7, #12]

            /* Write foreground CLUT memory address */
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 800f7de:	68fb      	ldr	r3, [r7, #12]
 800f7e0:	1d1a      	adds	r2, r3, #4
 800f7e2:	4b46      	ldr	r3, [pc, #280]	; (800f8fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800f7e4:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Set DMA2D color mode and alpha mode */
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800f7e6:	683b      	ldr	r3, [r7, #0]
 800f7e8:	7f1b      	ldrb	r3, [r3, #28]
 800f7ea:	061b      	lsls	r3, r3, #24
 800f7ec:	461a      	mov	r2, r3
 800f7ee:	69bb      	ldr	r3, [r7, #24]
 800f7f0:	4313      	orrs	r3, r2
 800f7f2:	4a42      	ldr	r2, [pc, #264]	; (800f8fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800f7f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f7f8:	61d3      	str	r3, [r2, #28]

            /* Write DMA2D BGPFCCR register */
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800f7fa:	4a40      	ldr	r2, [pc, #256]	; (800f8fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800f7fc:	697b      	ldr	r3, [r7, #20]
 800f7fe:	6253      	str	r3, [r2, #36]	; 0x24

            /* Configure DMA2D Stream source2 address */
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800f800:	683b      	ldr	r3, [r7, #0]
 800f802:	691a      	ldr	r2, [r3, #16]
 800f804:	4b3d      	ldr	r3, [pc, #244]	; (800f8fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800f806:	615a      	str	r2, [r3, #20]

            /* Configure CLUT */
            switch ((Bitmap::ClutFormat)palette->format)
 800f808:	68fb      	ldr	r3, [r7, #12]
 800f80a:	881b      	ldrh	r3, [r3, #0]
 800f80c:	b2db      	uxtb	r3, r3
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d002      	beq.n	800f818 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a8>
 800f812:	2b01      	cmp	r3, #1
 800f814:	d00d      	beq.n	800f832 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c2>
 800f816:	e020      	b.n	800f85a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ea>
            {
            case Bitmap::CLUT_FORMAT_L8_ARGB8888:
                /* Write foreground CLUT size and CLUT color mode */
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 800f818:	4b38      	ldr	r3, [pc, #224]	; (800f8fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800f81a:	69da      	ldr	r2, [r3, #28]
 800f81c:	4b3b      	ldr	r3, [pc, #236]	; (800f90c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800f81e:	4013      	ands	r3, r2
 800f820:	68fa      	ldr	r2, [r7, #12]
 800f822:	8852      	ldrh	r2, [r2, #2]
 800f824:	3a01      	subs	r2, #1
 800f826:	0212      	lsls	r2, r2, #8
 800f828:	4611      	mov	r1, r2
 800f82a:	4a34      	ldr	r2, [pc, #208]	; (800f8fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800f82c:	430b      	orrs	r3, r1
 800f82e:	61d3      	str	r3, [r2, #28]
                break;
 800f830:	e01a      	b.n	800f868 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f8>
            case Bitmap::CLUT_FORMAT_L8_RGB888:
                if(blitOp.alpha == 255)
 800f832:	683b      	ldr	r3, [r7, #0]
 800f834:	7f1b      	ldrb	r3, [r3, #28]
 800f836:	2bff      	cmp	r3, #255	; 0xff
 800f838:	d101      	bne.n	800f83e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ce>
                {
                    blend = false;
 800f83a:	2300      	movs	r3, #0
 800f83c:	77fb      	strb	r3, [r7, #31]
                }
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 800f83e:	4b2f      	ldr	r3, [pc, #188]	; (800f8fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800f840:	69da      	ldr	r2, [r3, #28]
 800f842:	4b32      	ldr	r3, [pc, #200]	; (800f90c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800f844:	4013      	ands	r3, r2
 800f846:	68fa      	ldr	r2, [r7, #12]
 800f848:	8852      	ldrh	r2, [r2, #2]
 800f84a:	3a01      	subs	r2, #1
 800f84c:	0212      	lsls	r2, r2, #8
 800f84e:	4313      	orrs	r3, r2
 800f850:	4a2a      	ldr	r2, [pc, #168]	; (800f8fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800f852:	f043 0310 	orr.w	r3, r3, #16
 800f856:	61d3      	str	r3, [r2, #28]
                break;
 800f858:	e006      	b.n	800f868 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f8>

            case Bitmap::CLUT_FORMAT_L8_RGB565:
            default:
                assert(0 && "Unsupported format");
 800f85a:	4b2d      	ldr	r3, [pc, #180]	; (800f910 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 800f85c:	4a2d      	ldr	r2, [pc, #180]	; (800f914 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 800f85e:	f240 1111 	movw	r1, #273	; 0x111
 800f862:	482d      	ldr	r0, [pc, #180]	; (800f918 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 800f864:	f013 fea2 	bl	80235ac <__assert_func>
                break;
            }

            /* Enable the CLUT loading for the foreground */
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 800f868:	4b24      	ldr	r3, [pc, #144]	; (800f8fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800f86a:	69db      	ldr	r3, [r3, #28]
 800f86c:	4a23      	ldr	r2, [pc, #140]	; (800f8fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800f86e:	f043 0320 	orr.w	r3, r3, #32
 800f872:	61d3      	str	r3, [r2, #28]

            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 800f874:	4b21      	ldr	r3, [pc, #132]	; (800f8fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800f876:	69db      	ldr	r3, [r3, #28]
 800f878:	f003 0320 	and.w	r3, r3, #32
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	bf14      	ite	ne
 800f880:	2301      	movne	r3, #1
 800f882:	2300      	moveq	r3, #0
 800f884:	b2db      	uxtb	r3, r3
 800f886:	2b00      	cmp	r3, #0
 800f888:	d000      	beq.n	800f88c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>
 800f88a:	e7f3      	b.n	800f874 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x204>
            {
            }
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 800f88c:	4b1b      	ldr	r3, [pc, #108]	; (800f8fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800f88e:	2210      	movs	r2, #16
 800f890:	609a      	str	r2, [r3, #8]

            /* Set DMA2D mode */
            if(blend)
 800f892:	7ffb      	ldrb	r3, [r7, #31]
 800f894:	2b00      	cmp	r3, #0
 800f896:	d003      	beq.n	800f8a0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x230>
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 800f898:	4b18      	ldr	r3, [pc, #96]	; (800f8fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800f89a:	4a1a      	ldr	r2, [pc, #104]	; (800f904 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 800f89c:	601a      	str	r2, [r3, #0]
            else
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
            }
        }
        break;
 800f89e:	e044      	b.n	800f92a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 800f8a0:	4b16      	ldr	r3, [pc, #88]	; (800f8fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800f8a2:	4a1e      	ldr	r2, [pc, #120]	; (800f91c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 800f8a4:	601a      	str	r2, [r3, #0]
        break;
 800f8a6:	e040      	b.n	800f92a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800f8a8:	683b      	ldr	r3, [r7, #0]
 800f8aa:	7f1b      	ldrb	r3, [r3, #28]
 800f8ac:	061b      	lsls	r3, r3, #24
 800f8ae:	461a      	mov	r2, r3
 800f8b0:	69bb      	ldr	r3, [r7, #24]
 800f8b2:	4313      	orrs	r3, r2
 800f8b4:	4a11      	ldr	r2, [pc, #68]	; (800f8fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800f8b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f8ba:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800f8bc:	4a0f      	ldr	r2, [pc, #60]	; (800f8fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800f8be:	697b      	ldr	r3, [r7, #20]
 800f8c0:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800f8c2:	683b      	ldr	r3, [r7, #0]
 800f8c4:	691a      	ldr	r2, [r3, #16]
 800f8c6:	4b0d      	ldr	r3, [pc, #52]	; (800f8fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800f8c8:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 800f8ca:	4b0c      	ldr	r3, [pc, #48]	; (800f8fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800f8cc:	4a0d      	ldr	r2, [pc, #52]	; (800f904 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 800f8ce:	601a      	str	r2, [r3, #0]
        break;
 800f8d0:	e02b      	b.n	800f92a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800f8d2:	683b      	ldr	r3, [r7, #0]
 800f8d4:	7f1b      	ldrb	r3, [r3, #28]
 800f8d6:	061b      	lsls	r3, r3, #24
 800f8d8:	461a      	mov	r2, r3
 800f8da:	69bb      	ldr	r3, [r7, #24]
 800f8dc:	4313      	orrs	r3, r2
 800f8de:	4a07      	ldr	r2, [pc, #28]	; (800f8fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800f8e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f8e4:	61d3      	str	r3, [r2, #28]

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 800f8e6:	683b      	ldr	r3, [r7, #0]
 800f8e8:	7f5a      	ldrb	r2, [r3, #29]
 800f8ea:	683b      	ldr	r3, [r7, #0]
 800f8ec:	7f9b      	ldrb	r3, [r3, #30]
 800f8ee:	429a      	cmp	r2, r3
 800f8f0:	d016      	beq.n	800f920 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b0>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 800f8f2:	4b02      	ldr	r3, [pc, #8]	; (800f8fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800f8f4:	4a09      	ldr	r2, [pc, #36]	; (800f91c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 800f8f6:	601a      	str	r2, [r3, #0]
        else
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
        }
        break;
 800f8f8:	e016      	b.n	800f928 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b8>
 800f8fa:	bf00      	nop
 800f8fc:	4002b000 	.word	0x4002b000
 800f900:	0002000a 	.word	0x0002000a
 800f904:	00020201 	.word	0x00020201
 800f908:	00020009 	.word	0x00020009
 800f90c:	ffff00ef 	.word	0xffff00ef
 800f910:	08025378 	.word	0x08025378
 800f914:	08025394 	.word	0x08025394
 800f918:	08025300 	.word	0x08025300
 800f91c:	00010201 	.word	0x00010201
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 800f920:	4b04      	ldr	r3, [pc, #16]	; (800f934 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c4>)
 800f922:	f240 2201 	movw	r2, #513	; 0x201
 800f926:	601a      	str	r2, [r3, #0]
        break;
 800f928:	bf00      	nop
    }
}
 800f92a:	bf00      	nop
 800f92c:	3724      	adds	r7, #36	; 0x24
 800f92e:	46bd      	mov	sp, r7
 800f930:	bd90      	pop	{r4, r7, pc}
 800f932:	bf00      	nop
 800f934:	4002b000 	.word	0x4002b000

0800f938 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 800f938:	b590      	push	{r4, r7, lr}
 800f93a:	b085      	sub	sp, #20
 800f93c:	af00      	add	r7, sp, #0
 800f93e:	6078      	str	r0, [r7, #4]
 800f940:	6039      	str	r1, [r7, #0]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 800f942:	683b      	ldr	r3, [r7, #0]
 800f944:	7f9b      	ldrb	r3, [r3, #30]
 800f946:	4619      	mov	r1, r3
 800f948:	6878      	ldr	r0, [r7, #4]
 800f94a:	f7ff fe47 	bl	800f5dc <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 800f94e:	60f8      	str	r0, [r7, #12]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 800f950:	4a3b      	ldr	r2, [pc, #236]	; (800fa40 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 800f952:	68fb      	ldr	r3, [r7, #12]
 800f954:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 800f956:	683b      	ldr	r3, [r7, #0]
 800f958:	8adb      	ldrh	r3, [r3, #22]
 800f95a:	461a      	mov	r2, r3
 800f95c:	683b      	ldr	r3, [r7, #0]
 800f95e:	8a9b      	ldrh	r3, [r3, #20]
 800f960:	041b      	lsls	r3, r3, #16
 800f962:	431a      	orrs	r2, r3
 800f964:	4b36      	ldr	r3, [pc, #216]	; (800fa40 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 800f966:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800f968:	683b      	ldr	r3, [r7, #0]
 800f96a:	691a      	ldr	r2, [r3, #16]
 800f96c:	4b34      	ldr	r3, [pc, #208]	; (800fa40 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 800f96e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 800f970:	683b      	ldr	r3, [r7, #0]
 800f972:	8b5b      	ldrh	r3, [r3, #26]
 800f974:	461a      	mov	r2, r3
 800f976:	683b      	ldr	r3, [r7, #0]
 800f978:	8a9b      	ldrh	r3, [r3, #20]
 800f97a:	1ad2      	subs	r2, r2, r3
 800f97c:	4b30      	ldr	r3, [pc, #192]	; (800fa40 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 800f97e:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 800f980:	683b      	ldr	r3, [r7, #0]
 800f982:	681b      	ldr	r3, [r3, #0]
 800f984:	2b08      	cmp	r3, #8
 800f986:	d12e      	bne.n	800f9e6 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xae>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 800f988:	683b      	ldr	r3, [r7, #0]
 800f98a:	8b5b      	ldrh	r3, [r3, #26]
 800f98c:	461a      	mov	r2, r3
 800f98e:	683b      	ldr	r3, [r7, #0]
 800f990:	8a9b      	ldrh	r3, [r3, #20]
 800f992:	1ad2      	subs	r2, r2, r3
 800f994:	4b2a      	ldr	r3, [pc, #168]	; (800fa40 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 800f996:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 800f998:	683b      	ldr	r3, [r7, #0]
 800f99a:	8b5b      	ldrh	r3, [r3, #26]
 800f99c:	461a      	mov	r2, r3
 800f99e:	683b      	ldr	r3, [r7, #0]
 800f9a0:	8a9b      	ldrh	r3, [r3, #20]
 800f9a2:	1ad2      	subs	r2, r2, r3
 800f9a4:	4b26      	ldr	r3, [pc, #152]	; (800fa40 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 800f9a6:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800f9a8:	4a25      	ldr	r2, [pc, #148]	; (800fa40 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 800f9aa:	68fb      	ldr	r3, [r7, #12]
 800f9ac:	6253      	str	r3, [r2, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 800f9ae:	683b      	ldr	r3, [r7, #0]
 800f9b0:	7f1b      	ldrb	r3, [r3, #28]
 800f9b2:	061b      	lsls	r3, r3, #24
 800f9b4:	4619      	mov	r1, r3
 800f9b6:	4a22      	ldr	r2, [pc, #136]	; (800fa40 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 800f9b8:	4b22      	ldr	r3, [pc, #136]	; (800fa44 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10c>)
 800f9ba:	430b      	orrs	r3, r1
 800f9bc:	61d3      	str	r3, [r2, #28]

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 800f9be:	683b      	ldr	r3, [r7, #0]
 800f9c0:	330c      	adds	r3, #12
 800f9c2:	4c1f      	ldr	r4, [pc, #124]	; (800fa40 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 800f9c4:	4618      	mov	r0, r3
 800f9c6:	f7ff fc87 	bl	800f2d8 <_ZNK8touchgfx9colortypecvmEv>
 800f9ca:	4603      	mov	r3, r0
 800f9cc:	6223      	str	r3, [r4, #32]

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800f9ce:	683b      	ldr	r3, [r7, #0]
 800f9d0:	691a      	ldr	r2, [r3, #16]
 800f9d2:	4b1b      	ldr	r3, [pc, #108]	; (800fa40 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 800f9d4:	615a      	str	r2, [r3, #20]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800f9d6:	683b      	ldr	r3, [r7, #0]
 800f9d8:	691a      	ldr	r2, [r3, #16]
 800f9da:	4b19      	ldr	r3, [pc, #100]	; (800fa40 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 800f9dc:	60da      	str	r2, [r3, #12]

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 800f9de:	4b18      	ldr	r3, [pc, #96]	; (800fa40 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 800f9e0:	4a19      	ldr	r2, [pc, #100]	; (800fa48 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x110>)
 800f9e2:	601a      	str	r2, [r3, #0]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
    }
}
 800f9e4:	e027      	b.n	800fa36 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xfe>
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 800f9e6:	4a16      	ldr	r2, [pc, #88]	; (800fa40 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 800f9e8:	68fb      	ldr	r3, [r7, #12]
 800f9ea:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 800f9ec:	4b14      	ldr	r3, [pc, #80]	; (800fa40 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 800f9ee:	2200      	movs	r2, #0
 800f9f0:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));
 800f9f2:	683b      	ldr	r3, [r7, #0]
 800f9f4:	330c      	adds	r3, #12
 800f9f6:	4618      	mov	r0, r3
 800f9f8:	f7ff fc6e 	bl	800f2d8 <_ZNK8touchgfx9colortypecvmEv>
 800f9fc:	4603      	mov	r3, r0
 800f9fe:	0a1b      	lsrs	r3, r3, #8
 800fa00:	f403 4478 	and.w	r4, r3, #63488	; 0xf800
 800fa04:	683b      	ldr	r3, [r7, #0]
 800fa06:	330c      	adds	r3, #12
 800fa08:	4618      	mov	r0, r3
 800fa0a:	f7ff fc65 	bl	800f2d8 <_ZNK8touchgfx9colortypecvmEv>
 800fa0e:	4603      	mov	r3, r0
 800fa10:	095b      	lsrs	r3, r3, #5
 800fa12:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 800fa16:	431c      	orrs	r4, r3
 800fa18:	683b      	ldr	r3, [r7, #0]
 800fa1a:	330c      	adds	r3, #12
 800fa1c:	4618      	mov	r0, r3
 800fa1e:	f7ff fc5b 	bl	800f2d8 <_ZNK8touchgfx9colortypecvmEv>
 800fa22:	4603      	mov	r3, r0
 800fa24:	08db      	lsrs	r3, r3, #3
 800fa26:	f003 031f 	and.w	r3, r3, #31
 800fa2a:	4a05      	ldr	r2, [pc, #20]	; (800fa40 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 800fa2c:	4323      	orrs	r3, r4
 800fa2e:	6393      	str	r3, [r2, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 800fa30:	4b03      	ldr	r3, [pc, #12]	; (800fa40 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 800fa32:	4a06      	ldr	r2, [pc, #24]	; (800fa4c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x114>)
 800fa34:	601a      	str	r2, [r3, #0]
}
 800fa36:	bf00      	nop
 800fa38:	3714      	adds	r7, #20
 800fa3a:	46bd      	mov	sp, r7
 800fa3c:	bd90      	pop	{r4, r7, pc}
 800fa3e:	bf00      	nop
 800fa40:	4002b000 	.word	0x4002b000
 800fa44:	00010009 	.word	0x00010009
 800fa48:	00020201 	.word	0x00020201
 800fa4c:	00030201 	.word	0x00030201

0800fa50 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 800fa50:	b580      	push	{r7, lr}
 800fa52:	b082      	sub	sp, #8
 800fa54:	af00      	add	r7, sp, #0
 800fa56:	6078      	str	r0, [r7, #4]
 800fa58:	4a05      	ldr	r2, [pc, #20]	; (800fa70 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	601a      	str	r2, [r3, #0]
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	4618      	mov	r0, r3
 800fa62:	f7ff fc45 	bl	800f2f0 <_ZN8touchgfx9DMA_QueueD1Ev>
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	4618      	mov	r0, r3
 800fa6a:	3708      	adds	r7, #8
 800fa6c:	46bd      	mov	sp, r7
 800fa6e:	bd80      	pop	{r7, pc}
 800fa70:	080279d8 	.word	0x080279d8

0800fa74 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 800fa74:	b580      	push	{r7, lr}
 800fa76:	b082      	sub	sp, #8
 800fa78:	af00      	add	r7, sp, #0
 800fa7a:	6078      	str	r0, [r7, #4]
 800fa7c:	6878      	ldr	r0, [r7, #4]
 800fa7e:	f7ff ffe7 	bl	800fa50 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 800fa82:	2114      	movs	r1, #20
 800fa84:	6878      	ldr	r0, [r7, #4]
 800fa86:	f013 fd62 	bl	802354e <_ZdlPvj>
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	4618      	mov	r0, r3
 800fa8e:	3708      	adds	r7, #8
 800fa90:	46bd      	mov	sp, r7
 800fa92:	bd80      	pop	{r7, pc}

0800fa94 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
     * Registers an array of texts. This function is called automatically from
     * touchgfx_generic_init(). Should not be called under normal circumstances.
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
 800fa94:	b480      	push	{r7}
 800fa96:	b083      	sub	sp, #12
 800fa98:	af00      	add	r7, sp, #0
 800fa9a:	6078      	str	r0, [r7, #4]
    {
        texts = t;
 800fa9c:	4a04      	ldr	r2, [pc, #16]	; (800fab0 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	6013      	str	r3, [r2, #0]
    }
 800faa2:	bf00      	nop
 800faa4:	370c      	adds	r7, #12
 800faa6:	46bd      	mov	sp, r7
 800faa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faac:	4770      	bx	lr
 800faae:	bf00      	nop
 800fab0:	20024438 	.word	0x20024438

0800fab4 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 800fab4:	b480      	push	{r7}
 800fab6:	b085      	sub	sp, #20
 800fab8:	af00      	add	r7, sp, #0
 800faba:	60f8      	str	r0, [r7, #12]
 800fabc:	60b9      	str	r1, [r7, #8]
 800fabe:	607a      	str	r2, [r7, #4]
 800fac0:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 800fac2:	4a0b      	ldr	r2, [pc, #44]	; (800faf0 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 800fac4:	68fb      	ldr	r3, [r7, #12]
 800fac6:	601a      	str	r2, [r3, #0]
 800fac8:	68fb      	ldr	r3, [r7, #12]
 800faca:	68ba      	ldr	r2, [r7, #8]
 800facc:	605a      	str	r2, [r3, #4]
 800face:	68fb      	ldr	r3, [r7, #12]
 800fad0:	687a      	ldr	r2, [r7, #4]
 800fad2:	609a      	str	r2, [r3, #8]
 800fad4:	68fb      	ldr	r3, [r7, #12]
 800fad6:	683a      	ldr	r2, [r7, #0]
 800fad8:	60da      	str	r2, [r3, #12]
 800fada:	68fb      	ldr	r3, [r7, #12]
 800fadc:	69ba      	ldr	r2, [r7, #24]
 800fade:	611a      	str	r2, [r3, #16]
    {
    }
 800fae0:	68fb      	ldr	r3, [r7, #12]
 800fae2:	4618      	mov	r0, r3
 800fae4:	3714      	adds	r7, #20
 800fae6:	46bd      	mov	sp, r7
 800fae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faec:	4770      	bx	lr
 800faee:	bf00      	nop
 800faf0:	0802707c 	.word	0x0802707c

0800faf4 <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 800faf4:	b480      	push	{r7}
 800faf6:	b083      	sub	sp, #12
 800faf8:	af00      	add	r7, sp, #0
 800fafa:	6078      	str	r0, [r7, #4]
    {
 800fafc:	4a04      	ldr	r2, [pc, #16]	; (800fb10 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	601a      	str	r2, [r3, #0]
    }
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	4618      	mov	r0, r3
 800fb06:	370c      	adds	r7, #12
 800fb08:	46bd      	mov	sp, r7
 800fb0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb0e:	4770      	bx	lr
 800fb10:	0802707c 	.word	0x0802707c

0800fb14 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 800fb14:	b580      	push	{r7, lr}
 800fb16:	b082      	sub	sp, #8
 800fb18:	af00      	add	r7, sp, #0
 800fb1a:	6078      	str	r0, [r7, #4]
    }
 800fb1c:	6878      	ldr	r0, [r7, #4]
 800fb1e:	f7ff ffe9 	bl	800faf4 <_ZN8touchgfx7MVPHeapD1Ev>
 800fb22:	2114      	movs	r1, #20
 800fb24:	6878      	ldr	r0, [r7, #4]
 800fb26:	f013 fd12 	bl	802354e <_ZdlPvj>
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	4618      	mov	r0, r3
 800fb2e:	3708      	adds	r7, #8
 800fb30:	46bd      	mov	sp, r7
 800fb32:	bd80      	pop	{r7, pc}

0800fb34 <_ZN8touchgfx3LCDD1Ev>:
        : textureMapperClass(0)
    {
    }

    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 800fb34:	b480      	push	{r7}
 800fb36:	b083      	sub	sp, #12
 800fb38:	af00      	add	r7, sp, #0
 800fb3a:	6078      	str	r0, [r7, #4]
    {
 800fb3c:	4a04      	ldr	r2, [pc, #16]	; (800fb50 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	601a      	str	r2, [r3, #0]
    }
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	4618      	mov	r0, r3
 800fb46:	370c      	adds	r7, #12
 800fb48:	46bd      	mov	sp, r7
 800fb4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb4e:	4770      	bx	lr
 800fb50:	08027ad0 	.word	0x08027ad0

0800fb54 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 800fb54:	b580      	push	{r7, lr}
 800fb56:	b082      	sub	sp, #8
 800fb58:	af00      	add	r7, sp, #0
 800fb5a:	6078      	str	r0, [r7, #4]
    }
 800fb5c:	6878      	ldr	r0, [r7, #4]
 800fb5e:	f7ff ffe9 	bl	800fb34 <_ZN8touchgfx3LCDD1Ev>
 800fb62:	2108      	movs	r1, #8
 800fb64:	6878      	ldr	r0, [r7, #4]
 800fb66:	f013 fcf2 	bl	802354e <_ZdlPvj>
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	4618      	mov	r0, r3
 800fb6e:	3708      	adds	r7, #8
 800fb70:	46bd      	mov	sp, r7
 800fb72:	bd80      	pop	{r7, pc}

0800fb74 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 800fb74:	b480      	push	{r7}
 800fb76:	b083      	sub	sp, #12
 800fb78:	af00      	add	r7, sp, #0
 800fb7a:	6078      	str	r0, [r7, #4]
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	2200      	movs	r2, #0
 800fb80:	801a      	strh	r2, [r3, #0]
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	2200      	movs	r2, #0
 800fb86:	805a      	strh	r2, [r3, #2]
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	2200      	movs	r2, #0
 800fb8c:	809a      	strh	r2, [r3, #4]
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	2200      	movs	r2, #0
 800fb92:	80da      	strh	r2, [r3, #6]
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	2200      	movs	r2, #0
 800fb98:	811a      	strh	r2, [r3, #8]
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	2200      	movs	r2, #0
 800fb9e:	815a      	strh	r2, [r3, #10]
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	2200      	movs	r2, #0
 800fba4:	819a      	strh	r2, [r3, #12]
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	2200      	movs	r2, #0
 800fbaa:	739a      	strb	r2, [r3, #14]
        {
        }
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	4618      	mov	r0, r3
 800fbb0:	370c      	adds	r7, #12
 800fbb2:	46bd      	mov	sp, r7
 800fbb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbb8:	4770      	bx	lr

0800fbba <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 800fbba:	b580      	push	{r7, lr}
 800fbbc:	b082      	sub	sp, #8
 800fbbe:	af00      	add	r7, sp, #0
 800fbc0:	6078      	str	r0, [r7, #4]
        : drag(), listener(0), dragThresholdValue(0)
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	4618      	mov	r0, r3
 800fbc6:	f7ff ffd5 	bl	800fb74 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	2200      	movs	r2, #0
 800fbce:	611a      	str	r2, [r3, #16]
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	2200      	movs	r2, #0
 800fbd4:	829a      	strh	r2, [r3, #20]
    {
    }
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	4618      	mov	r0, r3
 800fbda:	3708      	adds	r7, #8
 800fbdc:	46bd      	mov	sp, r7
 800fbde:	bd80      	pop	{r7, pc}

0800fbe0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 800fbe0:	b580      	push	{r7, lr}
 800fbe2:	b084      	sub	sp, #16
 800fbe4:	af00      	add	r7, sp, #0
 800fbe6:	60f8      	str	r0, [r7, #12]
 800fbe8:	60b9      	str	r1, [r7, #8]
 800fbea:	607a      	str	r2, [r7, #4]
 800fbec:	603b      	str	r3, [r7, #0]
          lastRenderMethod(HARDWARE)
 800fbee:	4a55      	ldr	r2, [pc, #340]	; (800fd44 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x164>)
 800fbf0:	68fb      	ldr	r3, [r7, #12]
 800fbf2:	601a      	str	r2, [r3, #0]
 800fbf4:	68fb      	ldr	r3, [r7, #12]
 800fbf6:	68ba      	ldr	r2, [r7, #8]
 800fbf8:	605a      	str	r2, [r3, #4]
 800fbfa:	68fb      	ldr	r3, [r7, #12]
 800fbfc:	687a      	ldr	r2, [r7, #4]
 800fbfe:	609a      	str	r2, [r3, #8]
 800fc00:	68fb      	ldr	r3, [r7, #12]
 800fc02:	683a      	ldr	r2, [r7, #0]
 800fc04:	60da      	str	r2, [r3, #12]
 800fc06:	68fb      	ldr	r3, [r7, #12]
 800fc08:	2200      	movs	r2, #0
 800fc0a:	611a      	str	r2, [r3, #16]
 800fc0c:	68fb      	ldr	r3, [r7, #12]
 800fc0e:	2200      	movs	r2, #0
 800fc10:	615a      	str	r2, [r3, #20]
 800fc12:	68fb      	ldr	r3, [r7, #12]
 800fc14:	2200      	movs	r2, #0
 800fc16:	619a      	str	r2, [r3, #24]
 800fc18:	68fb      	ldr	r3, [r7, #12]
 800fc1a:	331c      	adds	r3, #28
 800fc1c:	4618      	mov	r0, r3
 800fc1e:	f7ff ffcc 	bl	800fbba <_ZN8touchgfx8GesturesC1Ev>
 800fc22:	68fb      	ldr	r3, [r7, #12]
 800fc24:	2200      	movs	r2, #0
 800fc26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800fc2a:	68fb      	ldr	r3, [r7, #12]
 800fc2c:	2200      	movs	r2, #0
 800fc2e:	639a      	str	r2, [r3, #56]	; 0x38
 800fc30:	68fb      	ldr	r3, [r7, #12]
 800fc32:	2200      	movs	r2, #0
 800fc34:	63da      	str	r2, [r3, #60]	; 0x3c
 800fc36:	68fb      	ldr	r3, [r7, #12]
 800fc38:	2200      	movs	r2, #0
 800fc3a:	641a      	str	r2, [r3, #64]	; 0x40
 800fc3c:	68fb      	ldr	r3, [r7, #12]
 800fc3e:	2200      	movs	r2, #0
 800fc40:	645a      	str	r2, [r3, #68]	; 0x44
 800fc42:	68fb      	ldr	r3, [r7, #12]
 800fc44:	2200      	movs	r2, #0
 800fc46:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 800fc4a:	68fb      	ldr	r3, [r7, #12]
 800fc4c:	2201      	movs	r2, #1
 800fc4e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 800fc52:	68fb      	ldr	r3, [r7, #12]
 800fc54:	2200      	movs	r2, #0
 800fc56:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 800fc5a:	68fb      	ldr	r3, [r7, #12]
 800fc5c:	2200      	movs	r2, #0
 800fc5e:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 800fc62:	68fb      	ldr	r3, [r7, #12]
 800fc64:	2200      	movs	r2, #0
 800fc66:	64da      	str	r2, [r3, #76]	; 0x4c
 800fc68:	68fb      	ldr	r3, [r7, #12]
 800fc6a:	3350      	adds	r3, #80	; 0x50
 800fc6c:	4618      	mov	r0, r3
 800fc6e:	f7fc ff5e 	bl	800cb2e <_ZN8touchgfx4RectC1Ev>
 800fc72:	68fb      	ldr	r3, [r7, #12]
 800fc74:	2200      	movs	r2, #0
 800fc76:	659a      	str	r2, [r3, #88]	; 0x58
 800fc78:	68fb      	ldr	r3, [r7, #12]
 800fc7a:	2200      	movs	r2, #0
 800fc7c:	65da      	str	r2, [r3, #92]	; 0x5c
 800fc7e:	68fb      	ldr	r3, [r7, #12]
 800fc80:	2200      	movs	r2, #0
 800fc82:	661a      	str	r2, [r3, #96]	; 0x60
 800fc84:	68fb      	ldr	r3, [r7, #12]
 800fc86:	2201      	movs	r2, #1
 800fc88:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 800fc8c:	68fb      	ldr	r3, [r7, #12]
 800fc8e:	2200      	movs	r2, #0
 800fc90:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 800fc94:	68fb      	ldr	r3, [r7, #12]
 800fc96:	2200      	movs	r2, #0
 800fc98:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 800fc9c:	68fb      	ldr	r3, [r7, #12]
 800fc9e:	2201      	movs	r2, #1
 800fca0:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 800fca4:	68fb      	ldr	r3, [r7, #12]
 800fca6:	2200      	movs	r2, #0
 800fca8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 800fcac:	68fb      	ldr	r3, [r7, #12]
 800fcae:	2200      	movs	r2, #0
 800fcb0:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 800fcb4:	68fb      	ldr	r3, [r7, #12]
 800fcb6:	2200      	movs	r2, #0
 800fcb8:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 800fcbc:	68fb      	ldr	r3, [r7, #12]
 800fcbe:	2200      	movs	r2, #0
 800fcc0:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	2200      	movs	r2, #0
 800fcc8:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 800fccc:	68fb      	ldr	r3, [r7, #12]
 800fcce:	2200      	movs	r2, #0
 800fcd0:	671a      	str	r2, [r3, #112]	; 0x70
 800fcd2:	68fb      	ldr	r3, [r7, #12]
 800fcd4:	2200      	movs	r2, #0
 800fcd6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 800fcda:	68fb      	ldr	r3, [r7, #12]
 800fcdc:	2200      	movs	r2, #0
 800fcde:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 800fce2:	68fb      	ldr	r3, [r7, #12]
 800fce4:	2200      	movs	r2, #0
 800fce6:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 800fcea:	68fb      	ldr	r3, [r7, #12]
 800fcec:	2201      	movs	r2, #1
 800fcee:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 800fcf2:	68fb      	ldr	r3, [r7, #12]
 800fcf4:	2201      	movs	r2, #1
 800fcf6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        instance = this;
 800fcfa:	4a13      	ldr	r2, [pc, #76]	; (800fd48 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x168>)
 800fcfc:	68fb      	ldr	r3, [r7, #12]
 800fcfe:	6013      	str	r3, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 800fd00:	4a12      	ldr	r2, [pc, #72]	; (800fd4c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 800fd02:	8b3b      	ldrh	r3, [r7, #24]
 800fd04:	8013      	strh	r3, [r2, #0]
 800fd06:	4b11      	ldr	r3, [pc, #68]	; (800fd4c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 800fd08:	881a      	ldrh	r2, [r3, #0]
 800fd0a:	4b11      	ldr	r3, [pc, #68]	; (800fd50 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x170>)
 800fd0c:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 800fd0e:	4a11      	ldr	r2, [pc, #68]	; (800fd54 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 800fd10:	8bbb      	ldrh	r3, [r7, #28]
 800fd12:	8013      	strh	r3, [r2, #0]
 800fd14:	4b0f      	ldr	r3, [pc, #60]	; (800fd54 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 800fd16:	881a      	ldrh	r2, [r3, #0]
 800fd18:	4b0f      	ldr	r3, [pc, #60]	; (800fd58 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x178>)
 800fd1a:	801a      	strh	r2, [r3, #0]
        DISPLAY_ROTATION = rotate0;
 800fd1c:	4b0f      	ldr	r3, [pc, #60]	; (800fd5c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x17c>)
 800fd1e:	2200      	movs	r2, #0
 800fd20:	701a      	strb	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 800fd22:	8b3a      	ldrh	r2, [r7, #24]
 800fd24:	8bbb      	ldrh	r3, [r7, #28]
 800fd26:	429a      	cmp	r2, r3
 800fd28:	bf34      	ite	cc
 800fd2a:	2301      	movcc	r3, #1
 800fd2c:	2300      	movcs	r3, #0
 800fd2e:	b2db      	uxtb	r3, r3
 800fd30:	461a      	mov	r2, r3
 800fd32:	68fb      	ldr	r3, [r7, #12]
 800fd34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 800fd38:	68fb      	ldr	r3, [r7, #12]
 800fd3a:	4618      	mov	r0, r3
 800fd3c:	3710      	adds	r7, #16
 800fd3e:	46bd      	mov	sp, r7
 800fd40:	bd80      	pop	{r7, pc}
 800fd42:	bf00      	nop
 800fd44:	080278b0 	.word	0x080278b0
 800fd48:	200243dc 	.word	0x200243dc
 800fd4c:	200243d0 	.word	0x200243d0
 800fd50:	200243d6 	.word	0x200243d6
 800fd54:	200243d2 	.word	0x200243d2
 800fd58:	200243d8 	.word	0x200243d8
 800fd5c:	200243d4 	.word	0x200243d4

0800fd60 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 800fd60:	b580      	push	{r7, lr}
 800fd62:	b082      	sub	sp, #8
 800fd64:	af00      	add	r7, sp, #0
 800fd66:	6078      	str	r0, [r7, #4]
 800fd68:	6039      	str	r1, [r7, #0]
    {
        app.gotoscreenScreenNoTransition();
 800fd6a:	683b      	ldr	r3, [r7, #0]
 800fd6c:	4618      	mov	r0, r3
 800fd6e:	f7fc fc41 	bl	800c5f4 <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv>
    }
 800fd72:	bf00      	nop
 800fd74:	3708      	adds	r7, #8
 800fd76:	46bd      	mov	sp, r7
 800fd78:	bd80      	pop	{r7, pc}
	...

0800fd7c <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 800fd7c:	b580      	push	{r7, lr}
 800fd7e:	b086      	sub	sp, #24
 800fd80:	af02      	add	r7, sp, #8
 800fd82:	60f8      	str	r0, [r7, #12]
 800fd84:	60b9      	str	r1, [r7, #8]
 800fd86:	607a      	str	r2, [r7, #4]
 800fd88:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 800fd8a:	68f8      	ldr	r0, [r7, #12]
 800fd8c:	69bb      	ldr	r3, [r7, #24]
 800fd8e:	9300      	str	r3, [sp, #0]
 800fd90:	683b      	ldr	r3, [r7, #0]
 800fd92:	687a      	ldr	r2, [r7, #4]
 800fd94:	68b9      	ldr	r1, [r7, #8]
 800fd96:	f7ff fe8d 	bl	800fab4 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 800fd9a:	4a04      	ldr	r2, [pc, #16]	; (800fdac <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 800fd9c:	68fb      	ldr	r3, [r7, #12]
 800fd9e:	601a      	str	r2, [r3, #0]
    {

    }
 800fda0:	68fb      	ldr	r3, [r7, #12]
 800fda2:	4618      	mov	r0, r3
 800fda4:	3710      	adds	r7, #16
 800fda6:	46bd      	mov	sp, r7
 800fda8:	bd80      	pop	{r7, pc}
 800fdaa:	bf00      	nop
 800fdac:	08027068 	.word	0x08027068

0800fdb0 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 800fdb0:	b580      	push	{r7, lr}
 800fdb2:	af00      	add	r7, sp, #0
 800fdb4:	4801      	ldr	r0, [pc, #4]	; (800fdbc <__tcf_0+0xc>)
 800fdb6:	f000 f961 	bl	801007c <_ZN12FrontendHeapD1Ev>
 800fdba:	bd80      	pop	{r7, pc}
 800fdbc:	2001e1e4 	.word	0x2001e1e4

0800fdc0 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 800fdc0:	b580      	push	{r7, lr}
 800fdc2:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 800fdc4:	4b12      	ldr	r3, [pc, #72]	; (800fe10 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 800fdc6:	781b      	ldrb	r3, [r3, #0]
 800fdc8:	f3bf 8f5b 	dmb	ish
 800fdcc:	b2db      	uxtb	r3, r3
 800fdce:	f003 0301 	and.w	r3, r3, #1
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	bf0c      	ite	eq
 800fdd6:	2301      	moveq	r3, #1
 800fdd8:	2300      	movne	r3, #0
 800fdda:	b2db      	uxtb	r3, r3
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	d013      	beq.n	800fe08 <_ZN12FrontendHeap11getInstanceEv+0x48>
 800fde0:	480b      	ldr	r0, [pc, #44]	; (800fe10 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 800fde2:	f013 fbb6 	bl	8023552 <__cxa_guard_acquire>
 800fde6:	4603      	mov	r3, r0
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	bf14      	ite	ne
 800fdec:	2301      	movne	r3, #1
 800fdee:	2300      	moveq	r3, #0
 800fdf0:	b2db      	uxtb	r3, r3
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	d008      	beq.n	800fe08 <_ZN12FrontendHeap11getInstanceEv+0x48>
 800fdf6:	4807      	ldr	r0, [pc, #28]	; (800fe14 <_ZN12FrontendHeap11getInstanceEv+0x54>)
 800fdf8:	f000 f868 	bl	800fecc <_ZN12FrontendHeapC1Ev>
 800fdfc:	4806      	ldr	r0, [pc, #24]	; (800fe18 <_ZN12FrontendHeap11getInstanceEv+0x58>)
 800fdfe:	f013 fbf3 	bl	80235e8 <atexit>
 800fe02:	4803      	ldr	r0, [pc, #12]	; (800fe10 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 800fe04:	f013 fbb1 	bl	802356a <__cxa_guard_release>
        return instance;
 800fe08:	4b02      	ldr	r3, [pc, #8]	; (800fe14 <_ZN12FrontendHeap11getInstanceEv+0x54>)
    }
 800fe0a:	4618      	mov	r0, r3
 800fe0c:	bd80      	pop	{r7, pc}
 800fe0e:	bf00      	nop
 800fe10:	2001e424 	.word	0x2001e424
 800fe14:	2001e1e4 	.word	0x2001e1e4
 800fe18:	0800fdb1 	.word	0x0800fdb1

0800fe1c <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 800fe1c:	b580      	push	{r7, lr}
 800fe1e:	b082      	sub	sp, #8
 800fe20:	af00      	add	r7, sp, #0
 800fe22:	6078      	str	r0, [r7, #4]
 800fe24:	4a05      	ldr	r2, [pc, #20]	; (800fe3c <_ZN16FrontendHeapBaseD1Ev+0x20>)
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	601a      	str	r2, [r3, #0]
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	4618      	mov	r0, r3
 800fe2e:	f7ff fe61 	bl	800faf4 <_ZN8touchgfx7MVPHeapD1Ev>
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	4618      	mov	r0, r3
 800fe36:	3708      	adds	r7, #8
 800fe38:	46bd      	mov	sp, r7
 800fe3a:	bd80      	pop	{r7, pc}
 800fe3c:	08027068 	.word	0x08027068

0800fe40 <_ZN16FrontendHeapBaseD0Ev>:
 800fe40:	b580      	push	{r7, lr}
 800fe42:	b082      	sub	sp, #8
 800fe44:	af00      	add	r7, sp, #0
 800fe46:	6078      	str	r0, [r7, #4]
 800fe48:	6878      	ldr	r0, [r7, #4]
 800fe4a:	f7ff ffe7 	bl	800fe1c <_ZN16FrontendHeapBaseD1Ev>
 800fe4e:	2114      	movs	r1, #20
 800fe50:	6878      	ldr	r0, [r7, #4]
 800fe52:	f013 fb7c 	bl	802354e <_ZdlPvj>
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	4618      	mov	r0, r3
 800fe5a:	3708      	adds	r7, #8
 800fe5c:	46bd      	mov	sp, r7
 800fe5e:	bd80      	pop	{r7, pc}

0800fe60 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 800fe60:	b580      	push	{r7, lr}
 800fe62:	b082      	sub	sp, #8
 800fe64:	af00      	add	r7, sp, #0
 800fe66:	6078      	str	r0, [r7, #4]
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	4618      	mov	r0, r3
 800fe6c:	f002 ff0c 	bl	8012c88 <_ZN8touchgfx17AbstractPartitionC1Ev>
 800fe70:	4a03      	ldr	r2, [pc, #12]	; (800fe80 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	601a      	str	r2, [r3, #0]
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	4618      	mov	r0, r3
 800fe7a:	3708      	adds	r7, #8
 800fe7c:	46bd      	mov	sp, r7
 800fe7e:	bd80      	pop	{r7, pc}
 800fe80:	08027034 	.word	0x08027034

0800fe84 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 800fe84:	b580      	push	{r7, lr}
 800fe86:	b082      	sub	sp, #8
 800fe88:	af00      	add	r7, sp, #0
 800fe8a:	6078      	str	r0, [r7, #4]
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	4618      	mov	r0, r3
 800fe90:	f002 fefa 	bl	8012c88 <_ZN8touchgfx17AbstractPartitionC1Ev>
 800fe94:	4a03      	ldr	r2, [pc, #12]	; (800fea4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	601a      	str	r2, [r3, #0]
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	4618      	mov	r0, r3
 800fe9e:	3708      	adds	r7, #8
 800fea0:	46bd      	mov	sp, r7
 800fea2:	bd80      	pop	{r7, pc}
 800fea4:	08027000 	.word	0x08027000

0800fea8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 800fea8:	b580      	push	{r7, lr}
 800feaa:	b082      	sub	sp, #8
 800feac:	af00      	add	r7, sp, #0
 800feae:	6078      	str	r0, [r7, #4]
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	4618      	mov	r0, r3
 800feb4:	f002 fee8 	bl	8012c88 <_ZN8touchgfx17AbstractPartitionC1Ev>
 800feb8:	4a03      	ldr	r2, [pc, #12]	; (800fec8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	601a      	str	r2, [r3, #0]
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	4618      	mov	r0, r3
 800fec2:	3708      	adds	r7, #8
 800fec4:	46bd      	mov	sp, r7
 800fec6:	bd80      	pop	{r7, pc}
 800fec8:	08026fcc 	.word	0x08026fcc

0800fecc <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 800fecc:	b590      	push	{r4, r7, lr}
 800fece:	b085      	sub	sp, #20
 800fed0:	af02      	add	r7, sp, #8
 800fed2:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 800fed4:	6878      	ldr	r0, [r7, #4]
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	f103 0114 	add.w	r1, r3, #20
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	f103 04cc 	add.w	r4, r3, #204	; 0xcc
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	33e4      	adds	r3, #228	; 0xe4
                     app(model, *this)
 800feec:	9300      	str	r3, [sp, #0]
 800feee:	4623      	mov	r3, r4
 800fef0:	f7ff ff44 	bl	800fd7c <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 800fef4:	4a15      	ldr	r2, [pc, #84]	; (800ff4c <_ZN12FrontendHeapC1Ev+0x80>)
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	601a      	str	r2, [r3, #0]
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	3314      	adds	r3, #20
 800fefe:	4618      	mov	r0, r3
 800ff00:	f7ff ffae 	bl	800fe60 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	332c      	adds	r3, #44	; 0x2c
 800ff08:	4618      	mov	r0, r3
 800ff0a:	f7ff ffbb 	bl	800fe84 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	33cc      	adds	r3, #204	; 0xcc
 800ff12:	4618      	mov	r0, r3
 800ff14:	f7ff ffc8 	bl	800fea8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	33e0      	adds	r3, #224	; 0xe0
 800ff1c:	4618      	mov	r0, r3
 800ff1e:	f7fd fc45 	bl	800d7ac <_ZN5ModelC1Ev>
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	f103 00e4 	add.w	r0, r3, #228	; 0xe4
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	33e0      	adds	r3, #224	; 0xe0
 800ff2c:	687a      	ldr	r2, [r7, #4]
 800ff2e:	4619      	mov	r1, r3
 800ff30:	f7fd fc26 	bl	800d780 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
    {
        gotoStartScreen(app);
 800ff34:	687a      	ldr	r2, [r7, #4]
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	33e4      	adds	r3, #228	; 0xe4
 800ff3a:	4619      	mov	r1, r3
 800ff3c:	4610      	mov	r0, r2
 800ff3e:	f7ff ff0f 	bl	800fd60 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	4618      	mov	r0, r3
 800ff46:	370c      	adds	r7, #12
 800ff48:	46bd      	mov	sp, r7
 800ff4a:	bd90      	pop	{r4, r7, pc}
 800ff4c:	08026fb8 	.word	0x08026fb8

0800ff50 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 800ff50:	b580      	push	{r7, lr}
 800ff52:	b086      	sub	sp, #24
 800ff54:	af02      	add	r7, sp, #8
 800ff56:	60f8      	str	r0, [r7, #12]
 800ff58:	60b9      	str	r1, [r7, #8]
 800ff5a:	607a      	str	r2, [r7, #4]
 800ff5c:	603b      	str	r3, [r7, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 800ff5e:	68f8      	ldr	r0, [r7, #12]
 800ff60:	8bbb      	ldrh	r3, [r7, #28]
 800ff62:	9301      	str	r3, [sp, #4]
 800ff64:	8b3b      	ldrh	r3, [r7, #24]
 800ff66:	9300      	str	r3, [sp, #0]
 800ff68:	683b      	ldr	r3, [r7, #0]
 800ff6a:	687a      	ldr	r2, [r7, #4]
 800ff6c:	68b9      	ldr	r1, [r7, #8]
 800ff6e:	f7ff fe37 	bl	800fbe0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 800ff72:	4a04      	ldr	r2, [pc, #16]	; (800ff84 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 800ff74:	68fb      	ldr	r3, [r7, #12]
 800ff76:	601a      	str	r2, [r3, #0]
    }
 800ff78:	68fb      	ldr	r3, [r7, #12]
 800ff7a:	4618      	mov	r0, r3
 800ff7c:	3710      	adds	r7, #16
 800ff7e:	46bd      	mov	sp, r7
 800ff80:	bd80      	pop	{r7, pc}
 800ff82:	bf00      	nop
 800ff84:	08027108 	.word	0x08027108

0800ff88 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 800ff88:	b580      	push	{r7, lr}
 800ff8a:	b086      	sub	sp, #24
 800ff8c:	af02      	add	r7, sp, #8
 800ff8e:	60f8      	str	r0, [r7, #12]
 800ff90:	60b9      	str	r1, [r7, #8]
 800ff92:	607a      	str	r2, [r7, #4]
 800ff94:	603b      	str	r3, [r7, #0]
 800ff96:	68f8      	ldr	r0, [r7, #12]
 800ff98:	8bbb      	ldrh	r3, [r7, #28]
 800ff9a:	9301      	str	r3, [sp, #4]
 800ff9c:	8b3b      	ldrh	r3, [r7, #24]
 800ff9e:	9300      	str	r3, [sp, #0]
 800ffa0:	683b      	ldr	r3, [r7, #0]
 800ffa2:	687a      	ldr	r2, [r7, #4]
 800ffa4:	68b9      	ldr	r1, [r7, #8]
 800ffa6:	f7ff ffd3 	bl	800ff50 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 800ffaa:	4a04      	ldr	r2, [pc, #16]	; (800ffbc <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 800ffac:	68fb      	ldr	r3, [r7, #12]
 800ffae:	601a      	str	r2, [r3, #0]
    }
 800ffb0:	68fb      	ldr	r3, [r7, #12]
 800ffb2:	4618      	mov	r0, r3
 800ffb4:	3710      	adds	r7, #16
 800ffb6:	46bd      	mov	sp, r7
 800ffb8:	bd80      	pop	{r7, pc}
 800ffba:	bf00      	nop
 800ffbc:	08026de8 	.word	0x08026de8

0800ffc0 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 800ffc0:	b480      	push	{r7}
 800ffc2:	b083      	sub	sp, #12
 800ffc4:	af00      	add	r7, sp, #0
 800ffc6:	6078      	str	r0, [r7, #4]
 800ffc8:	4a04      	ldr	r2, [pc, #16]	; (800ffdc <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	601a      	str	r2, [r3, #0]
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	4618      	mov	r0, r3
 800ffd2:	370c      	adds	r7, #12
 800ffd4:	46bd      	mov	sp, r7
 800ffd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffda:	4770      	bx	lr
 800ffdc:	08026dd0 	.word	0x08026dd0

0800ffe0 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 800ffe0:	b580      	push	{r7, lr}
 800ffe2:	b082      	sub	sp, #8
 800ffe4:	af00      	add	r7, sp, #0
 800ffe6:	6078      	str	r0, [r7, #4]
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	4618      	mov	r0, r3
 800ffec:	f7ff ffe8 	bl	800ffc0 <_ZN8touchgfx15TouchControllerC1Ev>
 800fff0:	4a03      	ldr	r2, [pc, #12]	; (8010000 <_ZN20STM32TouchControllerC1Ev+0x20>)
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	601a      	str	r2, [r3, #0]
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	4618      	mov	r0, r3
 800fffa:	3708      	adds	r7, #8
 800fffc:	46bd      	mov	sp, r7
 800fffe:	bd80      	pop	{r7, pc}
 8010000:	08026db8 	.word	0x08026db8

08010004 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 800, 480);

void touchgfx_init()
{
 8010004:	b590      	push	{r4, r7, lr}
 8010006:	b085      	sub	sp, #20
 8010008:	af02      	add	r7, sp, #8
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 801000a:	f7fd f9bb 	bl	800d384 <_ZN14BitmapDatabase11getInstanceEv>
 801000e:	4604      	mov	r4, r0
 8010010:	f7fd f9c2 	bl	800d398 <_ZN14BitmapDatabase15getInstanceSizeEv>
 8010014:	4603      	mov	r3, r0
 8010016:	4619      	mov	r1, r3
 8010018:	2300      	movs	r3, #0
 801001a:	9300      	str	r3, [sp, #0]
 801001c:	2300      	movs	r3, #0
 801001e:	2200      	movs	r2, #0
 8010020:	4620      	mov	r0, r4
 8010022:	f007 fca7 	bl	8017974 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
    TypedText::registerTexts(&texts);
 8010026:	4809      	ldr	r0, [pc, #36]	; (801004c <touchgfx_init+0x48>)
 8010028:	f7ff fd34 	bl	800fa94 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
    Texts::setLanguage(0);
 801002c:	2000      	movs	r0, #0
 801002e:	f7fd fadf 	bl	800d5f0 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 8010032:	4807      	ldr	r0, [pc, #28]	; (8010050 <touchgfx_init+0x4c>)
 8010034:	f007 fc06 	bl	8017844 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

    FrontendHeap& heap = FrontendHeap::getInstance();
 8010038:	f7ff fec2 	bl	800fdc0 <_ZN12FrontendHeap11getInstanceEv>
 801003c:	6078      	str	r0, [r7, #4]
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 801003e:	4805      	ldr	r0, [pc, #20]	; (8010054 <touchgfx_init+0x50>)
 8010040:	f7fd ff44 	bl	800decc <_ZN11TouchGFXHAL10initializeEv>
}
 8010044:	bf00      	nop
 8010046:	370c      	adds	r7, #12
 8010048:	46bd      	mov	sp, r7
 801004a:	bd90      	pop	{r4, r7, pc}
 801004c:	2001f244 	.word	0x2001f244
 8010050:	2000002c 	.word	0x2000002c
 8010054:	2001f248 	.word	0x2001f248

08010058 <touchgfx_components_init>:

void touchgfx_components_init()
{
 8010058:	b480      	push	{r7}
 801005a:	af00      	add	r7, sp, #0
}
 801005c:	bf00      	nop
 801005e:	46bd      	mov	sp, r7
 8010060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010064:	4770      	bx	lr
	...

08010068 <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 8010068:	b580      	push	{r7, lr}
 801006a:	af00      	add	r7, sp, #0
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 801006c:	4802      	ldr	r0, [pc, #8]	; (8010078 <touchgfx_taskEntry+0x10>)
 801006e:	f003 f916 	bl	801329e <_ZN8touchgfx3HAL9taskEntryEv>
}
 8010072:	bf00      	nop
 8010074:	bd80      	pop	{r7, pc}
 8010076:	bf00      	nop
 8010078:	2001f248 	.word	0x2001f248

0801007c <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 801007c:	b580      	push	{r7, lr}
 801007e:	b082      	sub	sp, #8
 8010080:	af00      	add	r7, sp, #0
 8010082:	6078      	str	r0, [r7, #4]
 8010084:	4a0f      	ldr	r2, [pc, #60]	; (80100c4 <_ZN12FrontendHeapD1Ev+0x48>)
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	601a      	str	r2, [r3, #0]
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	33e4      	adds	r3, #228	; 0xe4
 801008e:	4618      	mov	r0, r3
 8010090:	f7fd fb40 	bl	800d714 <_ZN19FrontendApplicationD1Ev>
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	33cc      	adds	r3, #204	; 0xcc
 8010098:	4618      	mov	r0, r3
 801009a:	f000 f827 	bl	80100ec <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	332c      	adds	r3, #44	; 0x2c
 80100a2:	4618      	mov	r0, r3
 80100a4:	f000 f844 	bl	8010130 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	3314      	adds	r3, #20
 80100ac:	4618      	mov	r0, r3
 80100ae:	f000 f861 	bl	8010174 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	4618      	mov	r0, r3
 80100b6:	f7ff feb1 	bl	800fe1c <_ZN16FrontendHeapBaseD1Ev>
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	4618      	mov	r0, r3
 80100be:	3708      	adds	r7, #8
 80100c0:	46bd      	mov	sp, r7
 80100c2:	bd80      	pop	{r7, pc}
 80100c4:	08026fb8 	.word	0x08026fb8

080100c8 <_ZN12FrontendHeapD0Ev>:
 80100c8:	b580      	push	{r7, lr}
 80100ca:	b082      	sub	sp, #8
 80100cc:	af00      	add	r7, sp, #0
 80100ce:	6078      	str	r0, [r7, #4]
 80100d0:	6878      	ldr	r0, [r7, #4]
 80100d2:	f7ff ffd3 	bl	801007c <_ZN12FrontendHeapD1Ev>
 80100d6:	f44f 7110 	mov.w	r1, #576	; 0x240
 80100da:	6878      	ldr	r0, [r7, #4]
 80100dc:	f013 fa37 	bl	802354e <_ZdlPvj>
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	4618      	mov	r0, r3
 80100e4:	3708      	adds	r7, #8
 80100e6:	46bd      	mov	sp, r7
 80100e8:	bd80      	pop	{r7, pc}
	...

080100ec <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
 80100ec:	b580      	push	{r7, lr}
 80100ee:	b082      	sub	sp, #8
 80100f0:	af00      	add	r7, sp, #0
 80100f2:	6078      	str	r0, [r7, #4]
 80100f4:	4a05      	ldr	r2, [pc, #20]	; (801010c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	601a      	str	r2, [r3, #0]
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	4618      	mov	r0, r3
 80100fe:	f002 fdc2 	bl	8012c86 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	4618      	mov	r0, r3
 8010106:	3708      	adds	r7, #8
 8010108:	46bd      	mov	sp, r7
 801010a:	bd80      	pop	{r7, pc}
 801010c:	08026fcc 	.word	0x08026fcc

08010110 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8010110:	b580      	push	{r7, lr}
 8010112:	b082      	sub	sp, #8
 8010114:	af00      	add	r7, sp, #0
 8010116:	6078      	str	r0, [r7, #4]
 8010118:	6878      	ldr	r0, [r7, #4]
 801011a:	f7ff ffe7 	bl	80100ec <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 801011e:	2114      	movs	r1, #20
 8010120:	6878      	ldr	r0, [r7, #4]
 8010122:	f013 fa14 	bl	802354e <_ZdlPvj>
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	4618      	mov	r0, r3
 801012a:	3708      	adds	r7, #8
 801012c:	46bd      	mov	sp, r7
 801012e:	bd80      	pop	{r7, pc}

08010130 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8010130:	b580      	push	{r7, lr}
 8010132:	b082      	sub	sp, #8
 8010134:	af00      	add	r7, sp, #0
 8010136:	6078      	str	r0, [r7, #4]
 8010138:	4a05      	ldr	r2, [pc, #20]	; (8010150 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	601a      	str	r2, [r3, #0]
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	4618      	mov	r0, r3
 8010142:	f002 fda0 	bl	8012c86 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	4618      	mov	r0, r3
 801014a:	3708      	adds	r7, #8
 801014c:	46bd      	mov	sp, r7
 801014e:	bd80      	pop	{r7, pc}
 8010150:	08027000 	.word	0x08027000

08010154 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8010154:	b580      	push	{r7, lr}
 8010156:	b082      	sub	sp, #8
 8010158:	af00      	add	r7, sp, #0
 801015a:	6078      	str	r0, [r7, #4]
 801015c:	6878      	ldr	r0, [r7, #4]
 801015e:	f7ff ffe7 	bl	8010130 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8010162:	21a0      	movs	r1, #160	; 0xa0
 8010164:	6878      	ldr	r0, [r7, #4]
 8010166:	f013 f9f2 	bl	802354e <_ZdlPvj>
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	4618      	mov	r0, r3
 801016e:	3708      	adds	r7, #8
 8010170:	46bd      	mov	sp, r7
 8010172:	bd80      	pop	{r7, pc}

08010174 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8010174:	b580      	push	{r7, lr}
 8010176:	b082      	sub	sp, #8
 8010178:	af00      	add	r7, sp, #0
 801017a:	6078      	str	r0, [r7, #4]
 801017c:	4a05      	ldr	r2, [pc, #20]	; (8010194 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	601a      	str	r2, [r3, #0]
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	4618      	mov	r0, r3
 8010186:	f002 fd7e 	bl	8012c86 <_ZN8touchgfx17AbstractPartitionD1Ev>
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	4618      	mov	r0, r3
 801018e:	3708      	adds	r7, #8
 8010190:	46bd      	mov	sp, r7
 8010192:	bd80      	pop	{r7, pc}
 8010194:	08027034 	.word	0x08027034

08010198 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8010198:	b580      	push	{r7, lr}
 801019a:	b082      	sub	sp, #8
 801019c:	af00      	add	r7, sp, #0
 801019e:	6078      	str	r0, [r7, #4]
 80101a0:	6878      	ldr	r0, [r7, #4]
 80101a2:	f7ff ffe7 	bl	8010174 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80101a6:	2118      	movs	r1, #24
 80101a8:	6878      	ldr	r0, [r7, #4]
 80101aa:	f013 f9d0 	bl	802354e <_ZdlPvj>
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	4618      	mov	r0, r3
 80101b2:	3708      	adds	r7, #8
 80101b4:	46bd      	mov	sp, r7
 80101b6:	bd80      	pop	{r7, pc}

080101b8 <_ZN8touchgfx8LCD16bppD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD16bpp : public LCD
 80101b8:	b580      	push	{r7, lr}
 80101ba:	b082      	sub	sp, #8
 80101bc:	af00      	add	r7, sp, #0
 80101be:	6078      	str	r0, [r7, #4]
 80101c0:	4a05      	ldr	r2, [pc, #20]	; (80101d8 <_ZN8touchgfx8LCD16bppD1Ev+0x20>)
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	601a      	str	r2, [r3, #0]
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	4618      	mov	r0, r3
 80101ca:	f7ff fcb3 	bl	800fb34 <_ZN8touchgfx3LCDD1Ev>
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	4618      	mov	r0, r3
 80101d2:	3708      	adds	r7, #8
 80101d4:	46bd      	mov	sp, r7
 80101d6:	bd80      	pop	{r7, pc}
 80101d8:	08027edc 	.word	0x08027edc

080101dc <_ZN8touchgfx8LCD16bppD0Ev>:
 80101dc:	b580      	push	{r7, lr}
 80101de:	b082      	sub	sp, #8
 80101e0:	af00      	add	r7, sp, #0
 80101e2:	6078      	str	r0, [r7, #4]
 80101e4:	6878      	ldr	r0, [r7, #4]
 80101e6:	f7ff ffe7 	bl	80101b8 <_ZN8touchgfx8LCD16bppD1Ev>
 80101ea:	2178      	movs	r1, #120	; 0x78
 80101ec:	6878      	ldr	r0, [r7, #4]
 80101ee:	f013 f9ae 	bl	802354e <_ZdlPvj>
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	4618      	mov	r0, r3
 80101f6:	3708      	adds	r7, #8
 80101f8:	46bd      	mov	sp, r7
 80101fa:	bd80      	pop	{r7, pc}

080101fc <_Z41__static_initialization_and_destruction_0ii>:
 80101fc:	b580      	push	{r7, lr}
 80101fe:	b084      	sub	sp, #16
 8010200:	af02      	add	r7, sp, #8
 8010202:	6078      	str	r0, [r7, #4]
 8010204:	6039      	str	r1, [r7, #0]
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	2b01      	cmp	r3, #1
 801020a:	d119      	bne.n	8010240 <_Z41__static_initialization_and_destruction_0ii+0x44>
 801020c:	683b      	ldr	r3, [r7, #0]
 801020e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010212:	4293      	cmp	r3, r2
 8010214:	d114      	bne.n	8010240 <_Z41__static_initialization_and_destruction_0ii+0x44>
static STM32TouchController tc;
 8010216:	4818      	ldr	r0, [pc, #96]	; (8010278 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8010218:	f7ff fee2 	bl	800ffe0 <_ZN20STM32TouchControllerC1Ev>
static STM32DMA dma;
 801021c:	4817      	ldr	r0, [pc, #92]	; (801027c <_Z41__static_initialization_and_destruction_0ii+0x80>)
 801021e:	f7ff f917 	bl	800f450 <_ZN8STM32DMAC1Ev>
static LCD16bpp display;
 8010222:	4817      	ldr	r0, [pc, #92]	; (8010280 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8010224:	f00a fca8 	bl	801ab78 <_ZN8touchgfx8LCD16bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 800, 480);
 8010228:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 801022c:	9301      	str	r3, [sp, #4]
 801022e:	f44f 7348 	mov.w	r3, #800	; 0x320
 8010232:	9300      	str	r3, [sp, #0]
 8010234:	4b10      	ldr	r3, [pc, #64]	; (8010278 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8010236:	4a12      	ldr	r2, [pc, #72]	; (8010280 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8010238:	4910      	ldr	r1, [pc, #64]	; (801027c <_Z41__static_initialization_and_destruction_0ii+0x80>)
 801023a:	4812      	ldr	r0, [pc, #72]	; (8010284 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 801023c:	f7ff fea4 	bl	800ff88 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	2b00      	cmp	r3, #0
 8010244:	d113      	bne.n	801026e <_Z41__static_initialization_and_destruction_0ii+0x72>
 8010246:	683b      	ldr	r3, [r7, #0]
 8010248:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801024c:	4293      	cmp	r3, r2
 801024e:	d10e      	bne.n	801026e <_Z41__static_initialization_and_destruction_0ii+0x72>
 8010250:	480c      	ldr	r0, [pc, #48]	; (8010284 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8010252:	f7fd fecb 	bl	800dfec <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 8010256:	480c      	ldr	r0, [pc, #48]	; (8010288 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8010258:	f7fb fc5c 	bl	800bb14 <_ZN23ApplicationFontProviderD1Ev>
static LCD16bpp display;
 801025c:	4808      	ldr	r0, [pc, #32]	; (8010280 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 801025e:	f7ff ffab 	bl	80101b8 <_ZN8touchgfx8LCD16bppD1Ev>
static STM32DMA dma;
 8010262:	4806      	ldr	r0, [pc, #24]	; (801027c <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8010264:	f7ff f91e 	bl	800f4a4 <_ZN8STM32DMAD1Ev>
static STM32TouchController tc;
 8010268:	4803      	ldr	r0, [pc, #12]	; (8010278 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 801026a:	f7fd fc1b 	bl	800daa4 <_ZN20STM32TouchControllerD1Ev>
}
 801026e:	bf00      	nop
 8010270:	3708      	adds	r7, #8
 8010272:	46bd      	mov	sp, r7
 8010274:	bd80      	pop	{r7, pc}
 8010276:	bf00      	nop
 8010278:	2001e428 	.word	0x2001e428
 801027c:	2001e42c 	.word	0x2001e42c
 8010280:	2001f1cc 	.word	0x2001f1cc
 8010284:	2001f248 	.word	0x2001f248
 8010288:	2000002c 	.word	0x2000002c

0801028c <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    {
        INTS_PR_ELEMENT = (sizeof(typename meta::select_type_maxsize<SupportedTypesList>::type) + sizeof(int) - 1) / sizeof(int),
        SIZE_OF_ELEMENT = INTS_PR_ELEMENT * sizeof(int)
    };

    virtual uint16_t capacity() const
 801028c:	b480      	push	{r7}
 801028e:	b083      	sub	sp, #12
 8010290:	af00      	add	r7, sp, #0
 8010292:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 8010294:	2301      	movs	r3, #1
    }
 8010296:	4618      	mov	r0, r3
 8010298:	370c      	adds	r7, #12
 801029a:	46bd      	mov	sp, r7
 801029c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102a0:	4770      	bx	lr

080102a2 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
 80102a2:	b480      	push	{r7}
 80102a4:	b083      	sub	sp, #12
 80102a6:	af00      	add	r7, sp, #0
 80102a8:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 80102aa:	230c      	movs	r3, #12
    }
 80102ac:	4618      	mov	r0, r3
 80102ae:	370c      	adds	r7, #12
 80102b0:	46bd      	mov	sp, r7
 80102b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102b6:	4770      	bx	lr

080102b8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
 80102b8:	b480      	push	{r7}
 80102ba:	b083      	sub	sp, #12
 80102bc:	af00      	add	r7, sp, #0
 80102be:	6078      	str	r0, [r7, #4]
 80102c0:	460b      	mov	r3, r1
 80102c2:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 80102c4:	887a      	ldrh	r2, [r7, #2]
 80102c6:	4613      	mov	r3, r2
 80102c8:	005b      	lsls	r3, r3, #1
 80102ca:	4413      	add	r3, r2
 80102cc:	009b      	lsls	r3, r3, #2
 80102ce:	3308      	adds	r3, #8
 80102d0:	687a      	ldr	r2, [r7, #4]
 80102d2:	4413      	add	r3, r2
    }
 80102d4:	4618      	mov	r0, r3
 80102d6:	370c      	adds	r7, #12
 80102d8:	46bd      	mov	sp, r7
 80102da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102de:	4770      	bx	lr

080102e0 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
 80102e0:	b480      	push	{r7}
 80102e2:	b083      	sub	sp, #12
 80102e4:	af00      	add	r7, sp, #0
 80102e6:	6078      	str	r0, [r7, #4]
 80102e8:	460b      	mov	r3, r1
 80102ea:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 80102ec:	887a      	ldrh	r2, [r7, #2]
 80102ee:	4613      	mov	r3, r2
 80102f0:	005b      	lsls	r3, r3, #1
 80102f2:	4413      	add	r3, r2
 80102f4:	009b      	lsls	r3, r3, #2
 80102f6:	3308      	adds	r3, #8
 80102f8:	687a      	ldr	r2, [r7, #4]
 80102fa:	4413      	add	r3, r2
    }
 80102fc:	4618      	mov	r0, r3
 80102fe:	370c      	adds	r7, #12
 8010300:	46bd      	mov	sp, r7
 8010302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010306:	4770      	bx	lr

08010308 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8010308:	b480      	push	{r7}
 801030a:	b083      	sub	sp, #12
 801030c:	af00      	add	r7, sp, #0
 801030e:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8010310:	2301      	movs	r3, #1
    }
 8010312:	4618      	mov	r0, r3
 8010314:	370c      	adds	r7, #12
 8010316:	46bd      	mov	sp, r7
 8010318:	f85d 7b04 	ldr.w	r7, [sp], #4
 801031c:	4770      	bx	lr

0801031e <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 801031e:	b480      	push	{r7}
 8010320:	b083      	sub	sp, #12
 8010322:	af00      	add	r7, sp, #0
 8010324:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8010326:	2398      	movs	r3, #152	; 0x98
    }
 8010328:	4618      	mov	r0, r3
 801032a:	370c      	adds	r7, #12
 801032c:	46bd      	mov	sp, r7
 801032e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010332:	4770      	bx	lr

08010334 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8010334:	b480      	push	{r7}
 8010336:	b083      	sub	sp, #12
 8010338:	af00      	add	r7, sp, #0
 801033a:	6078      	str	r0, [r7, #4]
 801033c:	460b      	mov	r3, r1
 801033e:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8010340:	887b      	ldrh	r3, [r7, #2]
 8010342:	2298      	movs	r2, #152	; 0x98
 8010344:	fb02 f303 	mul.w	r3, r2, r3
 8010348:	3308      	adds	r3, #8
 801034a:	687a      	ldr	r2, [r7, #4]
 801034c:	4413      	add	r3, r2
    }
 801034e:	4618      	mov	r0, r3
 8010350:	370c      	adds	r7, #12
 8010352:	46bd      	mov	sp, r7
 8010354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010358:	4770      	bx	lr

0801035a <_ZNK8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 801035a:	b480      	push	{r7}
 801035c:	b083      	sub	sp, #12
 801035e:	af00      	add	r7, sp, #0
 8010360:	6078      	str	r0, [r7, #4]
 8010362:	460b      	mov	r3, r1
 8010364:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8010366:	887b      	ldrh	r3, [r7, #2]
 8010368:	2298      	movs	r2, #152	; 0x98
 801036a:	fb02 f303 	mul.w	r3, r2, r3
 801036e:	3308      	adds	r3, #8
 8010370:	687a      	ldr	r2, [r7, #4]
 8010372:	4413      	add	r3, r2
    }
 8010374:	4618      	mov	r0, r3
 8010376:	370c      	adds	r7, #12
 8010378:	46bd      	mov	sp, r7
 801037a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801037e:	4770      	bx	lr

08010380 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8010380:	b480      	push	{r7}
 8010382:	b083      	sub	sp, #12
 8010384:	af00      	add	r7, sp, #0
 8010386:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8010388:	2301      	movs	r3, #1
    }
 801038a:	4618      	mov	r0, r3
 801038c:	370c      	adds	r7, #12
 801038e:	46bd      	mov	sp, r7
 8010390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010394:	4770      	bx	lr

08010396 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8010396:	b480      	push	{r7}
 8010398:	b083      	sub	sp, #12
 801039a:	af00      	add	r7, sp, #0
 801039c:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 801039e:	2310      	movs	r3, #16
    }
 80103a0:	4618      	mov	r0, r3
 80103a2:	370c      	adds	r7, #12
 80103a4:	46bd      	mov	sp, r7
 80103a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103aa:	4770      	bx	lr

080103ac <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 80103ac:	b480      	push	{r7}
 80103ae:	b083      	sub	sp, #12
 80103b0:	af00      	add	r7, sp, #0
 80103b2:	6078      	str	r0, [r7, #4]
 80103b4:	460b      	mov	r3, r1
 80103b6:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80103b8:	887b      	ldrh	r3, [r7, #2]
 80103ba:	011b      	lsls	r3, r3, #4
 80103bc:	3308      	adds	r3, #8
 80103be:	687a      	ldr	r2, [r7, #4]
 80103c0:	4413      	add	r3, r2
    }
 80103c2:	4618      	mov	r0, r3
 80103c4:	370c      	adds	r7, #12
 80103c6:	46bd      	mov	sp, r7
 80103c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103cc:	4770      	bx	lr

080103ce <_ZNK8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 80103ce:	b480      	push	{r7}
 80103d0:	b083      	sub	sp, #12
 80103d2:	af00      	add	r7, sp, #0
 80103d4:	6078      	str	r0, [r7, #4]
 80103d6:	460b      	mov	r3, r1
 80103d8:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80103da:	887b      	ldrh	r3, [r7, #2]
 80103dc:	011b      	lsls	r3, r3, #4
 80103de:	3308      	adds	r3, #8
 80103e0:	687a      	ldr	r2, [r7, #4]
 80103e2:	4413      	add	r3, r2
    }
 80103e4:	4618      	mov	r0, r3
 80103e6:	370c      	adds	r7, #12
 80103e8:	46bd      	mov	sp, r7
 80103ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103ee:	4770      	bx	lr

080103f0 <_GLOBAL__sub_I_touchgfx_init>:
 80103f0:	b580      	push	{r7, lr}
 80103f2:	af00      	add	r7, sp, #0
 80103f4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80103f8:	2001      	movs	r0, #1
 80103fa:	f7ff feff 	bl	80101fc <_Z41__static_initialization_and_destruction_0ii>
 80103fe:	bd80      	pop	{r7, pc}

08010400 <_GLOBAL__sub_D_touchgfx_init>:
 8010400:	b580      	push	{r7, lr}
 8010402:	af00      	add	r7, sp, #0
 8010404:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010408:	2000      	movs	r0, #0
 801040a:	f7ff fef7 	bl	80101fc <_Z41__static_initialization_and_destruction_0ii>
 801040e:	bd80      	pop	{r7, pc}

08010410 <_ZN8touchgfx3HAL18getLCDRefreshCountEv>:
    uint32_t getLCDRefreshCount()
 8010410:	b480      	push	{r7}
 8010412:	b083      	sub	sp, #12
 8010414:	af00      	add	r7, sp, #0
 8010416:	6078      	str	r0, [r7, #4]
        return vSyncForFrame;
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
    }
 801041e:	4618      	mov	r0, r3
 8010420:	370c      	adds	r7, #12
 8010422:	46bd      	mov	sp, r7
 8010424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010428:	4770      	bx	lr
	...

0801042c <_ZN8touchgfx15VideoControllerD1Ev>:
        STOP,      ///< Stop the video
        SET_REPEAT ///< Set repeat mode
    };

    /** Virtual destructor. */
    virtual ~VideoController()
 801042c:	b480      	push	{r7}
 801042e:	b083      	sub	sp, #12
 8010430:	af00      	add	r7, sp, #0
 8010432:	6078      	str	r0, [r7, #4]
    {
 8010434:	4a04      	ldr	r2, [pc, #16]	; (8010448 <_ZN8touchgfx15VideoControllerD1Ev+0x1c>)
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	601a      	str	r2, [r3, #0]
    }
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	4618      	mov	r0, r3
 801043e:	370c      	adds	r7, #12
 8010440:	46bd      	mov	sp, r7
 8010442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010446:	4770      	bx	lr
 8010448:	080270cc 	.word	0x080270cc

0801044c <_ZN8touchgfx15VideoControllerD0Ev>:
    virtual ~VideoController()
 801044c:	b580      	push	{r7, lr}
 801044e:	b082      	sub	sp, #8
 8010450:	af00      	add	r7, sp, #0
 8010452:	6078      	str	r0, [r7, #4]
    }
 8010454:	6878      	ldr	r0, [r7, #4]
 8010456:	f7ff ffe9 	bl	801042c <_ZN8touchgfx15VideoControllerD1Ev>
 801045a:	2104      	movs	r1, #4
 801045c:	6878      	ldr	r0, [r7, #4]
 801045e:	f013 f876 	bl	802354e <_ZdlPvj>
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	4618      	mov	r0, r3
 8010466:	3708      	adds	r7, #8
 8010468:	46bd      	mov	sp, r7
 801046a:	bd80      	pop	{r7, pc}

0801046c <_ZN8touchgfx11VideoWidget14setVideoBufferEPh>:
     * Set video buffer data.
     * Only used when video frames are decoded to a buffer and not directly to the framebuffer.
     *
     * @param [in] videoBuffer Video buffer.
     */
    void setVideoBuffer(uint8_t* const videoBuffer)
 801046c:	b480      	push	{r7}
 801046e:	b083      	sub	sp, #12
 8010470:	af00      	add	r7, sp, #0
 8010472:	6078      	str	r0, [r7, #4]
 8010474:	6039      	str	r1, [r7, #0]
    {
        buffer = videoBuffer;
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	683a      	ldr	r2, [r7, #0]
 801047a:	631a      	str	r2, [r3, #48]	; 0x30
    }
 801047c:	bf00      	nop
 801047e:	370c      	adds	r7, #12
 8010480:	46bd      	mov	sp, r7
 8010482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010486:	4770      	bx	lr

08010488 <_ZN8touchgfx11VideoWidget20setVideoBufferFormatENS_6Bitmap12BitmapFormatEss>:
     *
     * @param bufferFormat Format of the videoBuffer (RGB565 or RGB888)
     * @param width  Width of the videoBuffer in pixels
     * @param height Height of the videoBuffer in pixels
     */
    void setVideoBufferFormat(Bitmap::BitmapFormat bufferFormat, int16_t width, int16_t height)
 8010488:	b480      	push	{r7}
 801048a:	b085      	sub	sp, #20
 801048c:	af00      	add	r7, sp, #0
 801048e:	60f8      	str	r0, [r7, #12]
 8010490:	4608      	mov	r0, r1
 8010492:	4611      	mov	r1, r2
 8010494:	461a      	mov	r2, r3
 8010496:	4603      	mov	r3, r0
 8010498:	72fb      	strb	r3, [r7, #11]
 801049a:	460b      	mov	r3, r1
 801049c:	813b      	strh	r3, [r7, #8]
 801049e:	4613      	mov	r3, r2
 80104a0:	80fb      	strh	r3, [r7, #6]
    {
        format = bufferFormat;
 80104a2:	68fb      	ldr	r3, [r7, #12]
 80104a4:	7afa      	ldrb	r2, [r7, #11]
 80104a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        bufferWidth = width;
 80104aa:	68fb      	ldr	r3, [r7, #12]
 80104ac:	893a      	ldrh	r2, [r7, #8]
 80104ae:	86da      	strh	r2, [r3, #54]	; 0x36
        bufferHeight = height;
 80104b0:	68fb      	ldr	r3, [r7, #12]
 80104b2:	88fa      	ldrh	r2, [r7, #6]
 80104b4:	871a      	strh	r2, [r3, #56]	; 0x38
    }
 80104b6:	bf00      	nop
 80104b8:	3714      	adds	r7, #20
 80104ba:	46bd      	mov	sp, r7
 80104bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104c0:	4770      	bx	lr
	...

080104c4 <__NVIC_EnableIRQ>:
{
 80104c4:	b480      	push	{r7}
 80104c6:	b083      	sub	sp, #12
 80104c8:	af00      	add	r7, sp, #0
 80104ca:	4603      	mov	r3, r0
 80104cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80104ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	db0b      	blt.n	80104ee <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80104d6:	79fb      	ldrb	r3, [r7, #7]
 80104d8:	f003 021f 	and.w	r2, r3, #31
 80104dc:	4907      	ldr	r1, [pc, #28]	; (80104fc <__NVIC_EnableIRQ+0x38>)
 80104de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80104e2:	095b      	lsrs	r3, r3, #5
 80104e4:	2001      	movs	r0, #1
 80104e6:	fa00 f202 	lsl.w	r2, r0, r2
 80104ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80104ee:	bf00      	nop
 80104f0:	370c      	adds	r7, #12
 80104f2:	46bd      	mov	sp, r7
 80104f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104f8:	4770      	bx	lr
 80104fa:	bf00      	nop
 80104fc:	e000e100 	.word	0xe000e100

08010500 <__NVIC_DisableIRQ>:
{
 8010500:	b480      	push	{r7}
 8010502:	b083      	sub	sp, #12
 8010504:	af00      	add	r7, sp, #0
 8010506:	4603      	mov	r3, r0
 8010508:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801050a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801050e:	2b00      	cmp	r3, #0
 8010510:	db12      	blt.n	8010538 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8010512:	79fb      	ldrb	r3, [r7, #7]
 8010514:	f003 021f 	and.w	r2, r3, #31
 8010518:	490a      	ldr	r1, [pc, #40]	; (8010544 <__NVIC_DisableIRQ+0x44>)
 801051a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801051e:	095b      	lsrs	r3, r3, #5
 8010520:	2001      	movs	r0, #1
 8010522:	fa00 f202 	lsl.w	r2, r0, r2
 8010526:	3320      	adds	r3, #32
 8010528:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 801052c:	f3bf 8f4f 	dsb	sy
}
 8010530:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8010532:	f3bf 8f6f 	isb	sy
}
 8010536:	bf00      	nop
}
 8010538:	bf00      	nop
 801053a:	370c      	adds	r7, #12
 801053c:	46bd      	mov	sp, r7
 801053e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010542:	4770      	bx	lr
 8010544:	e000e100 	.word	0xe000e100

08010548 <__NVIC_SetPriority>:
{
 8010548:	b480      	push	{r7}
 801054a:	b083      	sub	sp, #12
 801054c:	af00      	add	r7, sp, #0
 801054e:	4603      	mov	r3, r0
 8010550:	6039      	str	r1, [r7, #0]
 8010552:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8010554:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010558:	2b00      	cmp	r3, #0
 801055a:	db0a      	blt.n	8010572 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801055c:	683b      	ldr	r3, [r7, #0]
 801055e:	b2da      	uxtb	r2, r3
 8010560:	490c      	ldr	r1, [pc, #48]	; (8010594 <__NVIC_SetPriority+0x4c>)
 8010562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010566:	0112      	lsls	r2, r2, #4
 8010568:	b2d2      	uxtb	r2, r2
 801056a:	440b      	add	r3, r1
 801056c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8010570:	e00a      	b.n	8010588 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010572:	683b      	ldr	r3, [r7, #0]
 8010574:	b2da      	uxtb	r2, r3
 8010576:	4908      	ldr	r1, [pc, #32]	; (8010598 <__NVIC_SetPriority+0x50>)
 8010578:	79fb      	ldrb	r3, [r7, #7]
 801057a:	f003 030f 	and.w	r3, r3, #15
 801057e:	3b04      	subs	r3, #4
 8010580:	0112      	lsls	r2, r2, #4
 8010582:	b2d2      	uxtb	r2, r2
 8010584:	440b      	add	r3, r1
 8010586:	761a      	strb	r2, [r3, #24]
}
 8010588:	bf00      	nop
 801058a:	370c      	adds	r7, #12
 801058c:	46bd      	mov	sp, r7
 801058e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010592:	4770      	bx	lr
 8010594:	e000e100 	.word	0xe000e100
 8010598:	e000ed00 	.word	0xe000ed00

0801059c <SCB_CleanInvalidateDCache>:
{
 801059c:	b480      	push	{r7}
 801059e:	b085      	sub	sp, #20
 80105a0:	af00      	add	r7, sp, #0
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80105a2:	4b21      	ldr	r3, [pc, #132]	; (8010628 <SCB_CleanInvalidateDCache+0x8c>)
 80105a4:	2200      	movs	r2, #0
 80105a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80105aa:	f3bf 8f4f 	dsb	sy
}
 80105ae:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 80105b0:	4b1d      	ldr	r3, [pc, #116]	; (8010628 <SCB_CleanInvalidateDCache+0x8c>)
 80105b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80105b6:	607b      	str	r3, [r7, #4]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	0b5b      	lsrs	r3, r3, #13
 80105bc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80105c0:	60fb      	str	r3, [r7, #12]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	08db      	lsrs	r3, r3, #3
 80105c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80105ca:	60bb      	str	r3, [r7, #8]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80105cc:	68fb      	ldr	r3, [r7, #12]
 80105ce:	015a      	lsls	r2, r3, #5
 80105d0:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80105d4:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 80105d6:	68ba      	ldr	r2, [r7, #8]
 80105d8:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80105da:	4913      	ldr	r1, [pc, #76]	; (8010628 <SCB_CleanInvalidateDCache+0x8c>)
 80105dc:	4313      	orrs	r3, r2
 80105de:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 80105e2:	68bb      	ldr	r3, [r7, #8]
 80105e4:	1e5a      	subs	r2, r3, #1
 80105e6:	60ba      	str	r2, [r7, #8]
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	bf14      	ite	ne
 80105ec:	2301      	movne	r3, #1
 80105ee:	2300      	moveq	r3, #0
 80105f0:	b2db      	uxtb	r3, r3
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	d000      	beq.n	80105f8 <SCB_CleanInvalidateDCache+0x5c>
      do {
 80105f6:	e7e9      	b.n	80105cc <SCB_CleanInvalidateDCache+0x30>
    } while(sets-- != 0U);
 80105f8:	68fb      	ldr	r3, [r7, #12]
 80105fa:	1e5a      	subs	r2, r3, #1
 80105fc:	60fa      	str	r2, [r7, #12]
 80105fe:	2b00      	cmp	r3, #0
 8010600:	bf14      	ite	ne
 8010602:	2301      	movne	r3, #1
 8010604:	2300      	moveq	r3, #0
 8010606:	b2db      	uxtb	r3, r3
 8010608:	2b00      	cmp	r3, #0
 801060a:	d000      	beq.n	801060e <SCB_CleanInvalidateDCache+0x72>
    do {
 801060c:	e7d9      	b.n	80105c2 <SCB_CleanInvalidateDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 801060e:	f3bf 8f4f 	dsb	sy
}
 8010612:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8010614:	f3bf 8f6f 	isb	sy
}
 8010618:	bf00      	nop
}
 801061a:	bf00      	nop
 801061c:	3714      	adds	r7, #20
 801061e:	46bd      	mov	sp, r7
 8010620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010624:	4770      	bx	lr
 8010626:	bf00      	nop
 8010628:	e000ed00 	.word	0xe000ed00

0801062c <_ZN20TouchGFXGeneratedHAL10initializeEv>:
    LOCATION_PRAGMA_NOLOAD("TouchGFX_Framebuffer")
    uint32_t frameBuf[(800 * 480 * 2 + 3) / 4] LOCATION_ATTRIBUTE_NOLOAD("TouchGFX_Framebuffer");
}

void TouchGFXGeneratedHAL::initialize()
{
 801062c:	b5b0      	push	{r4, r5, r7, lr}
 801062e:	b082      	sub	sp, #8
 8010630:	af00      	add	r7, sp, #0
 8010632:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	4618      	mov	r0, r3
 8010638:	f002 fe1d 	bl	8013276 <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 801063c:	687d      	ldr	r5, [r7, #4]
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	681b      	ldr	r3, [r3, #0]
 8010642:	3364      	adds	r3, #100	; 0x64
 8010644:	681c      	ldr	r4, [r3, #0]
 8010646:	f004 fd65 	bl	8015114 <_ZN8touchgfx11Application11getInstanceEv>
 801064a:	4603      	mov	r3, r0
 801064c:	4619      	mov	r1, r3
 801064e:	4628      	mov	r0, r5
 8010650:	47a0      	blx	r4
    setFrameBufferStartAddresses((void*)frameBuf, (void*)0, (void*)0);
 8010652:	6878      	ldr	r0, [r7, #4]
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	681b      	ldr	r3, [r3, #0]
 8010658:	3388      	adds	r3, #136	; 0x88
 801065a:	681c      	ldr	r4, [r3, #0]
 801065c:	2300      	movs	r3, #0
 801065e:	2200      	movs	r2, #0
 8010660:	4907      	ldr	r1, [pc, #28]	; (8010680 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x54>)
 8010662:	47a0      	blx	r4
    /*
     * Add hardware decoder to video controller
     */
    videoController.addDecoder(mjpegdecoder1, 0);
 8010664:	2200      	movs	r2, #0
 8010666:	4907      	ldr	r1, [pc, #28]	; (8010684 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x58>)
 8010668:	4807      	ldr	r0, [pc, #28]	; (8010688 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x5c>)
 801066a:	f000 f93d 	bl	80108e8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10addDecoderER12MJPEGDecoderm>
    videoController.setRGBBuffer((uint8_t*)videoRGBBuffer, sizeof(videoRGBBuffer));
 801066e:	4a07      	ldr	r2, [pc, #28]	; (801068c <_ZN20TouchGFXGeneratedHAL10initializeEv+0x60>)
 8010670:	4907      	ldr	r1, [pc, #28]	; (8010690 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x64>)
 8010672:	4805      	ldr	r0, [pc, #20]	; (8010688 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x5c>)
 8010674:	f000 f958 	bl	8010928 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setRGBBufferEPhj>
}
 8010678:	bf00      	nop
 801067a:	3708      	adds	r7, #8
 801067c:	46bd      	mov	sp, r7
 801067e:	bdb0      	pop	{r4, r5, r7, pc}
 8010680:	c00bb800 	.word	0xc00bb800
 8010684:	2001f2c4 	.word	0x2001f2c4
 8010688:	2001f308 	.word	0x2001f308
 801068c:	000bb800 	.word	0x000bb800
 8010690:	c0000000 	.word	0xc0000000

08010694 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 8010694:	b580      	push	{r7, lr}
 8010696:	b082      	sub	sp, #8
 8010698:	af00      	add	r7, sp, #0
 801069a:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 801069c:	2109      	movs	r1, #9
 801069e:	205a      	movs	r0, #90	; 0x5a
 80106a0:	f7ff ff52 	bl	8010548 <__NVIC_SetPriority>
}
 80106a4:	bf00      	nop
 80106a6:	3708      	adds	r7, #8
 80106a8:	46bd      	mov	sp, r7
 80106aa:	bd80      	pop	{r7, pc}

080106ac <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 80106ac:	b580      	push	{r7, lr}
 80106ae:	b082      	sub	sp, #8
 80106b0:	af00      	add	r7, sp, #0
 80106b2:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 80106b4:	205a      	movs	r0, #90	; 0x5a
 80106b6:	f7ff ff05 	bl	80104c4 <__NVIC_EnableIRQ>
}
 80106ba:	bf00      	nop
 80106bc:	3708      	adds	r7, #8
 80106be:	46bd      	mov	sp, r7
 80106c0:	bd80      	pop	{r7, pc}

080106c2 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 80106c2:	b580      	push	{r7, lr}
 80106c4:	b082      	sub	sp, #8
 80106c6:	af00      	add	r7, sp, #0
 80106c8:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 80106ca:	205a      	movs	r0, #90	; 0x5a
 80106cc:	f7ff ff18 	bl	8010500 <__NVIC_DisableIRQ>
}
 80106d0:	bf00      	nop
 80106d2:	3708      	adds	r7, #8
 80106d4:	46bd      	mov	sp, r7
 80106d6:	bd80      	pop	{r7, pc}

080106d8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 80106d8:	b480      	push	{r7}
 80106da:	b083      	sub	sp, #12
 80106dc:	af00      	add	r7, sp, #0
 80106de:	6078      	str	r0, [r7, #4]
}
 80106e0:	bf00      	nop
 80106e2:	370c      	adds	r7, #12
 80106e4:	46bd      	mov	sp, r7
 80106e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ea:	4770      	bx	lr

080106ec <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:

bool TouchGFXGeneratedHAL::beginFrame()
{
 80106ec:	b580      	push	{r7, lr}
 80106ee:	b082      	sub	sp, #8
 80106f0:	af00      	add	r7, sp, #0
 80106f2:	6078      	str	r0, [r7, #4]
    return HAL::beginFrame();
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	4618      	mov	r0, r3
 80106f8:	f002 fda4 	bl	8013244 <_ZN8touchgfx3HAL10beginFrameEv>
 80106fc:	4603      	mov	r3, r0
}
 80106fe:	4618      	mov	r0, r3
 8010700:	3708      	adds	r7, #8
 8010702:	46bd      	mov	sp, r7
 8010704:	bd80      	pop	{r7, pc}
	...

08010708 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:

void TouchGFXGeneratedHAL::endFrame()
{
 8010708:	b580      	push	{r7, lr}
 801070a:	b082      	sub	sp, #8
 801070c:	af00      	add	r7, sp, #0
 801070e:	6078      	str	r0, [r7, #4]
    HAL::endFrame();
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	4618      	mov	r0, r3
 8010714:	f002 fda2 	bl	801325c <_ZN8touchgfx3HAL8endFrameEv>
    videoController.endFrame();
 8010718:	4803      	ldr	r0, [pc, #12]	; (8010728 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x20>)
 801071a:	f000 f91b 	bl	8010954 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE8endFrameEv>
}
 801071e:	bf00      	nop
 8010720:	3708      	adds	r7, #8
 8010722:	46bd      	mov	sp, r7
 8010724:	bd80      	pop	{r7, pc}
 8010726:	bf00      	nop
 8010728:	2001f308 	.word	0x2001f308

0801072c <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:
    fbPtr += rect.y * lcd().framebufferStride() + rect.x * 2;
    return fbPtr;
}

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 801072c:	b480      	push	{r7}
 801072e:	b083      	sub	sp, #12
 8010730:	af00      	add	r7, sp, #0
 8010732:	6078      	str	r0, [r7, #4]
    return (uint16_t*)frameBuf;
 8010734:	4b03      	ldr	r3, [pc, #12]	; (8010744 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
}
 8010736:	4618      	mov	r0, r3
 8010738:	370c      	adds	r7, #12
 801073a:	46bd      	mov	sp, r7
 801073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010740:	4770      	bx	lr
 8010742:	bf00      	nop
 8010744:	c00bb800 	.word	0xc00bb800

08010748 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 8010748:	b480      	push	{r7}
 801074a:	b083      	sub	sp, #12
 801074c:	af00      	add	r7, sp, #0
 801074e:	6078      	str	r0, [r7, #4]
 8010750:	6039      	str	r1, [r7, #0]
    //setTFTFrameBuffer() not used for selected display interface
}
 8010752:	bf00      	nop
 8010754:	370c      	adds	r7, #12
 8010756:	46bd      	mov	sp, r7
 8010758:	f85d 7b04 	ldr.w	r7, [sp], #4
 801075c:	4770      	bx	lr

0801075e <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 801075e:	b580      	push	{r7, lr}
 8010760:	b082      	sub	sp, #8
 8010762:	af00      	add	r7, sp, #0
 8010764:	6078      	str	r0, [r7, #4]
 8010766:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	6839      	ldr	r1, [r7, #0]
 801076c:	4618      	mov	r0, r3
 801076e:	f002 fd33 	bl	80131d8 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 8010772:	bf00      	nop
 8010774:	3708      	adds	r7, #8
 8010776:	46bd      	mov	sp, r7
 8010778:	bd80      	pop	{r7, pc}

0801077a <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 801077a:	b580      	push	{r7, lr}
 801077c:	b084      	sub	sp, #16
 801077e:	af00      	add	r7, sp, #0
 8010780:	60f8      	str	r0, [r7, #12]
 8010782:	60b9      	str	r1, [r7, #8]
 8010784:	607a      	str	r2, [r7, #4]
 8010786:	603b      	str	r3, [r7, #0]
    return HAL::blockCopy(dest, src, numBytes);
 8010788:	68f8      	ldr	r0, [r7, #12]
 801078a:	683b      	ldr	r3, [r7, #0]
 801078c:	687a      	ldr	r2, [r7, #4]
 801078e:	68b9      	ldr	r1, [r7, #8]
 8010790:	f002 fe8d 	bl	80134ae <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 8010794:	4603      	mov	r3, r0
}
 8010796:	4618      	mov	r0, r3
 8010798:	3710      	adds	r7, #16
 801079a:	46bd      	mov	sp, r7
 801079c:	bd80      	pop	{r7, pc}
	...

080107a0 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv>:

void TouchGFXGeneratedHAL::InvalidateCache()
{
 80107a0:	b580      	push	{r7, lr}
 80107a2:	b082      	sub	sp, #8
 80107a4:	af00      	add	r7, sp, #0
 80107a6:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 80107a8:	4b08      	ldr	r3, [pc, #32]	; (80107cc <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x2c>)
 80107aa:	695b      	ldr	r3, [r3, #20]
 80107ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80107b0:	2b00      	cmp	r3, #0
 80107b2:	bf14      	ite	ne
 80107b4:	2301      	movne	r3, #1
 80107b6:	2300      	moveq	r3, #0
 80107b8:	b2db      	uxtb	r3, r3
 80107ba:	2b00      	cmp	r3, #0
 80107bc:	d001      	beq.n	80107c2 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x22>
    {
        SCB_CleanInvalidateDCache();
 80107be:	f7ff feed 	bl	801059c <SCB_CleanInvalidateDCache>
    }
}
 80107c2:	bf00      	nop
 80107c4:	3708      	adds	r7, #8
 80107c6:	46bd      	mov	sp, r7
 80107c8:	bd80      	pop	{r7, pc}
 80107ca:	bf00      	nop
 80107cc:	e000ed00 	.word	0xe000ed00

080107d0 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:

void TouchGFXGeneratedHAL::FlushCache()
{
 80107d0:	b580      	push	{r7, lr}
 80107d2:	b082      	sub	sp, #8
 80107d4:	af00      	add	r7, sp, #0
 80107d6:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 80107d8:	4b08      	ldr	r3, [pc, #32]	; (80107fc <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x2c>)
 80107da:	695b      	ldr	r3, [r3, #20]
 80107dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	bf14      	ite	ne
 80107e4:	2301      	movne	r3, #1
 80107e6:	2300      	moveq	r3, #0
 80107e8:	b2db      	uxtb	r3, r3
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	d001      	beq.n	80107f2 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x22>
    {
        SCB_CleanInvalidateDCache();
 80107ee:	f7ff fed5 	bl	801059c <SCB_CleanInvalidateDCache>
    }
}
 80107f2:	bf00      	nop
 80107f4:	3708      	adds	r7, #8
 80107f6:	46bd      	mov	sp, r7
 80107f8:	bd80      	pop	{r7, pc}
 80107fa:	bf00      	nop
 80107fc:	e000ed00 	.word	0xe000ed00

08010800 <videoTaskFunc>:

extern "C" void videoTaskFunc(void *argument)
{
 8010800:	b580      	push	{r7, lr}
 8010802:	b082      	sub	sp, #8
 8010804:	af00      	add	r7, sp, #0
 8010806:	6078      	str	r0, [r7, #4]
    videoController.decoderTaskEntry();
 8010808:	4803      	ldr	r0, [pc, #12]	; (8010818 <videoTaskFunc+0x18>)
 801080a:	f000 f8e8 	bl	80109de <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv>
}
 801080e:	bf00      	nop
 8010810:	3708      	adds	r7, #8
 8010812:	46bd      	mov	sp, r7
 8010814:	bd80      	pop	{r7, pc}
 8010816:	bf00      	nop
 8010818:	2001f308 	.word	0x2001f308

0801081c <_ZN8touchgfx15VideoControllerC1Ev>:
class VideoController
 801081c:	b480      	push	{r7}
 801081e:	b083      	sub	sp, #12
 8010820:	af00      	add	r7, sp, #0
 8010822:	6078      	str	r0, [r7, #4]
 8010824:	4a04      	ldr	r2, [pc, #16]	; (8010838 <_ZN8touchgfx15VideoControllerC1Ev+0x1c>)
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	601a      	str	r2, [r3, #0]
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	4618      	mov	r0, r3
 801082e:	370c      	adds	r7, #12
 8010830:	46bd      	mov	sp, r7
 8010832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010836:	4770      	bx	lr
 8010838:	080270cc 	.word	0x080270cc

0801083c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EEC1Ev>:

template <uint32_t no_streams, uint32_t width, uint32_t height, uint32_t stride, touchgfx::Bitmap::BitmapFormat output_format>
class DedicatedBufferController : public touchgfx::VideoController
{
public:
    DedicatedBufferController()
 801083c:	b5b0      	push	{r4, r5, r7, lr}
 801083e:	b082      	sub	sp, #8
 8010840:	af00      	add	r7, sp, #0
 8010842:	6078      	str	r0, [r7, #4]
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	4618      	mov	r0, r3
 8010848:	f7ff ffe8 	bl	801081c <_ZN8touchgfx15VideoControllerC1Ev>
 801084c:	4a25      	ldr	r2, [pc, #148]	; (80108e4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EEC1Ev+0xa8>)
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	601a      	str	r2, [r3, #0]
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	330c      	adds	r3, #12
 8010856:	2400      	movs	r4, #0
 8010858:	461d      	mov	r5, r3
 801085a:	2c00      	cmp	r4, #0
 801085c:	db05      	blt.n	801086a <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EEC1Ev+0x2e>
 801085e:	4628      	mov	r0, r5
 8010860:	f000 f971 	bl	8010b46 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE6StreamC1Ev>
 8010864:	3524      	adds	r5, #36	; 0x24
 8010866:	3c01      	subs	r4, #1
 8010868:	e7f7      	b.n	801085a <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EEC1Ev+0x1e>
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	2200      	movs	r2, #0
 801086e:	631a      	str	r2, [r3, #48]	; 0x30
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	2200      	movs	r2, #0
 8010874:	635a      	str	r2, [r3, #52]	; 0x34
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	2200      	movs	r2, #0
 801087a:	639a      	str	r2, [r3, #56]	; 0x38
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	2200      	movs	r2, #0
 8010880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	2201      	movs	r2, #1
 8010888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	2200      	movs	r2, #0
 8010890:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	2200      	movs	r2, #0
 8010898:	641a      	str	r2, [r3, #64]	; 0x40
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	2200      	movs	r2, #0
 801089e:	645a      	str	r2, [r3, #68]	; 0x44
    {
        assert((no_streams > 0) && "Video: Number of streams zero!");

        // Clear arrays
        memset(decodeBuffers, 0, sizeof(decodeBuffers));
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	3308      	adds	r3, #8
 80108a4:	2204      	movs	r2, #4
 80108a6:	2100      	movs	r1, #0
 80108a8:	4618      	mov	r0, r3
 80108aa:	f012 ff0f 	bl	80236cc <memset>
        memset(mjpegDecoders, 0, sizeof(mjpegDecoders));
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	3304      	adds	r3, #4
 80108b2:	2204      	movs	r2, #4
 80108b4:	2100      	movs	r1, #0
 80108b6:	4618      	mov	r0, r3
 80108b8:	f012 ff08 	bl	80236cc <memset>

        // Initialize synchronization primitives
        semDecode = SEM_CREATE(); // Binary semaphore
 80108bc:	2200      	movs	r2, #0
 80108be:	2100      	movs	r1, #0
 80108c0:	2001      	movs	r0, #1
 80108c2:	f7f7 fcd1 	bl	8008268 <osSemaphoreNew>
 80108c6:	4602      	mov	r2, r0
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	641a      	str	r2, [r3, #64]	; 0x40
        mutexBuffers = MUTEX_CREATE();
 80108cc:	2000      	movs	r0, #0
 80108ce:	f7f7 fb83 	bl	8007fd8 <osMutexNew>
 80108d2:	4602      	mov	r2, r0
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	645a      	str	r2, [r3, #68]	; 0x44
    }
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	4618      	mov	r0, r3
 80108dc:	3708      	adds	r7, #8
 80108de:	46bd      	mov	sp, r7
 80108e0:	bdb0      	pop	{r4, r5, r7, pc}
 80108e2:	bf00      	nop
 80108e4:	0802708c 	.word	0x0802708c

080108e8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10addDecoderER12MJPEGDecoderm>:
        bufferRGB = buffer;
        topBufferRGB = bufferRGB;
        sizeBufferRGB = sizeOfBuffer;
    }

    void addDecoder(MJPEGDecoder& decoder, uint32_t index)
 80108e8:	b580      	push	{r7, lr}
 80108ea:	b084      	sub	sp, #16
 80108ec:	af00      	add	r7, sp, #0
 80108ee:	60f8      	str	r0, [r7, #12]
 80108f0:	60b9      	str	r1, [r7, #8]
 80108f2:	607a      	str	r2, [r7, #4]
    {
        // Running in UI thread / main

        assert(index < no_streams);
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	2b00      	cmp	r3, #0
 80108f8:	d006      	beq.n	8010908 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10addDecoderER12MJPEGDecoderm+0x20>
 80108fa:	4b08      	ldr	r3, [pc, #32]	; (801091c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10addDecoderER12MJPEGDecoderm+0x34>)
 80108fc:	4a08      	ldr	r2, [pc, #32]	; (8010920 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10addDecoderER12MJPEGDecoderm+0x38>)
 80108fe:	f240 1103 	movw	r1, #259	; 0x103
 8010902:	4808      	ldr	r0, [pc, #32]	; (8010924 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10addDecoderER12MJPEGDecoderm+0x3c>)
 8010904:	f012 fe52 	bl	80235ac <__assert_func>
        mjpegDecoders[index] = &decoder;
 8010908:	68fa      	ldr	r2, [r7, #12]
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	009b      	lsls	r3, r3, #2
 801090e:	4413      	add	r3, r2
 8010910:	68ba      	ldr	r2, [r7, #8]
 8010912:	605a      	str	r2, [r3, #4]
    }
 8010914:	bf00      	nop
 8010916:	3710      	adds	r7, #16
 8010918:	46bd      	mov	sp, r7
 801091a:	bd80      	pop	{r7, pc}
 801091c:	08025548 	.word	0x08025548
 8010920:	0802555c 	.word	0x0802555c
 8010924:	080256c4 	.word	0x080256c4

08010928 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setRGBBufferEPhj>:
    virtual void setRGBBuffer(uint8_t* buffer, size_t sizeOfBuffer)
 8010928:	b480      	push	{r7}
 801092a:	b085      	sub	sp, #20
 801092c:	af00      	add	r7, sp, #0
 801092e:	60f8      	str	r0, [r7, #12]
 8010930:	60b9      	str	r1, [r7, #8]
 8010932:	607a      	str	r2, [r7, #4]
        bufferRGB = buffer;
 8010934:	68fb      	ldr	r3, [r7, #12]
 8010936:	68ba      	ldr	r2, [r7, #8]
 8010938:	631a      	str	r2, [r3, #48]	; 0x30
        topBufferRGB = bufferRGB;
 801093a:	68fb      	ldr	r3, [r7, #12]
 801093c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801093e:	68fb      	ldr	r3, [r7, #12]
 8010940:	639a      	str	r2, [r3, #56]	; 0x38
        sizeBufferRGB = sizeOfBuffer;
 8010942:	68fb      	ldr	r3, [r7, #12]
 8010944:	687a      	ldr	r2, [r7, #4]
 8010946:	635a      	str	r2, [r3, #52]	; 0x34
    }
 8010948:	bf00      	nop
 801094a:	3714      	adds	r7, #20
 801094c:	46bd      	mov	sp, r7
 801094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010952:	4770      	bx	lr

08010954 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE8endFrameEv>:

    void endFrame()
 8010954:	b580      	push	{r7, lr}
 8010956:	b084      	sub	sp, #16
 8010958:	af00      	add	r7, sp, #0
 801095a:	6078      	str	r0, [r7, #4]
    {
        // Running in UI thread

        // Check if we should invalidate in next frame
        for (uint32_t i = 0; i < no_streams; i++)
 801095c:	2300      	movs	r3, #0
 801095e:	60fb      	str	r3, [r7, #12]
 8010960:	68fb      	ldr	r3, [r7, #12]
 8010962:	2b00      	cmp	r3, #0
 8010964:	d120      	bne.n	80109a8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE8endFrameEv+0x54>
        {
            Stream& stream = streams[i];
 8010966:	68fa      	ldr	r2, [r7, #12]
 8010968:	4613      	mov	r3, r2
 801096a:	00db      	lsls	r3, r3, #3
 801096c:	4413      	add	r3, r2
 801096e:	009b      	lsls	r3, r3, #2
 8010970:	3308      	adds	r3, #8
 8010972:	687a      	ldr	r2, [r7, #4]
 8010974:	4413      	add	r3, r2
 8010976:	3304      	adds	r3, #4
 8010978:	60bb      	str	r3, [r7, #8]
            if (stream.isPlaying || stream.isShowingOneFrame)
 801097a:	68bb      	ldr	r3, [r7, #8]
 801097c:	7f5b      	ldrb	r3, [r3, #29]
 801097e:	2b00      	cmp	r3, #0
 8010980:	d103      	bne.n	801098a <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE8endFrameEv+0x36>
 8010982:	68bb      	ldr	r3, [r7, #8]
 8010984:	7f9b      	ldrb	r3, [r3, #30]
 8010986:	2b00      	cmp	r3, #0
 8010988:	d00a      	beq.n	80109a0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE8endFrameEv+0x4c>
            {
                if (decodeForNextTick(stream))
 801098a:	68b9      	ldr	r1, [r7, #8]
 801098c:	6878      	ldr	r0, [r7, #4]
 801098e:	f000 f912 	bl	8010bb6 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE17decodeForNextTickERNS3_6StreamE>
 8010992:	4603      	mov	r3, r0
 8010994:	2b00      	cmp	r3, #0
 8010996:	d003      	beq.n	80109a0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE8endFrameEv+0x4c>
                {
                    stream.doDecode = true;
 8010998:	68bb      	ldr	r3, [r7, #8]
 801099a:	2201      	movs	r2, #1
 801099c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
        for (uint32_t i = 0; i < no_streams; i++)
 80109a0:	68fb      	ldr	r3, [r7, #12]
 80109a2:	3301      	adds	r3, #1
 80109a4:	60fb      	str	r3, [r7, #12]
 80109a6:	e7db      	b.n	8010960 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE8endFrameEv+0xc>
                }
            }
        }

        // Mark next draw as first
        firstDrawThisFrame = true;
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	2201      	movs	r2, #1
 80109ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        // Signal decoder thread to wake up
        SEM_POST(semDecode);
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80109b4:	4618      	mov	r0, r3
 80109b6:	f7f7 fd59 	bl	800846c <osSemaphoreRelease>
        // Unlock the buffer mutex. FreeRTOS does not allow unlocking a mutex you did not lock
        if (uiHasMutex)
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80109c0:	2b00      	cmp	r3, #0
 80109c2:	d008      	beq.n	80109d6 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE8endFrameEv+0x82>
        {
            MUTEX_UNLOCK(mutexBuffers);
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80109c8:	4618      	mov	r0, r3
 80109ca:	f7f7 fbfd 	bl	80081c8 <osMutexRelease>
            uiHasMutex = false;
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	2200      	movs	r2, #0
 80109d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        }
    }
 80109d6:	bf00      	nop
 80109d8:	3710      	adds	r7, #16
 80109da:	46bd      	mov	sp, r7
 80109dc:	bd80      	pop	{r7, pc}

080109de <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv>:

    void decoderTaskEntry()
 80109de:	b590      	push	{r4, r7, lr}
 80109e0:	b08b      	sub	sp, #44	; 0x2c
 80109e2:	af02      	add	r7, sp, #8
 80109e4:	6078      	str	r0, [r7, #4]
        // Running in Decoder thread!!

        while (1)
        {
            // Wait for synchronisation signal from UI thread
            SEM_WAIT(semDecode);
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80109ea:	f04f 31ff 	mov.w	r1, #4294967295
 80109ee:	4618      	mov	r0, r3
 80109f0:	f7f7 fcd6 	bl	80083a0 <osSemaphoreAcquire>

            // Lock out the UI by taking the mutex
            MUTEX_LOCK(mutexBuffers);
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80109f8:	f04f 31ff 	mov.w	r1, #4294967295
 80109fc:	4618      	mov	r0, r3
 80109fe:	f7f7 fb85 	bl	800810c <osMutexAcquire>

            // Update stream flags
            for (uint32_t i = 0; i < no_streams; i++)
 8010a02:	2300      	movs	r3, #0
 8010a04:	61fb      	str	r3, [r7, #28]
 8010a06:	69fb      	ldr	r3, [r7, #28]
 8010a08:	2b00      	cmp	r3, #0
 8010a0a:	d115      	bne.n	8010a38 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x5a>
            {
                Stream& stream = streams[i];
 8010a0c:	69fa      	ldr	r2, [r7, #28]
 8010a0e:	4613      	mov	r3, r2
 8010a10:	00db      	lsls	r3, r3, #3
 8010a12:	4413      	add	r3, r2
 8010a14:	009b      	lsls	r3, r3, #2
 8010a16:	3308      	adds	r3, #8
 8010a18:	687a      	ldr	r2, [r7, #4]
 8010a1a:	4413      	add	r3, r2
 8010a1c:	3304      	adds	r3, #4
 8010a1e:	617b      	str	r3, [r7, #20]
                if (stream.doDecode)
 8010a20:	697b      	ldr	r3, [r7, #20]
 8010a22:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8010a26:	2b00      	cmp	r3, #0
 8010a28:	d002      	beq.n	8010a30 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x52>
                {
                    stream.doInvalidateOnNextTick = true;
 8010a2a:	697b      	ldr	r3, [r7, #20]
 8010a2c:	2201      	movs	r2, #1
 8010a2e:	77da      	strb	r2, [r3, #31]
            for (uint32_t i = 0; i < no_streams; i++)
 8010a30:	69fb      	ldr	r3, [r7, #28]
 8010a32:	3301      	adds	r3, #1
 8010a34:	61fb      	str	r3, [r7, #28]
 8010a36:	e7e6      	b.n	8010a06 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x28>
                }
            }

            // Now decode all streams marked for invalidation in next tick
            for (uint32_t i = 0; i < no_streams; i++)
 8010a38:	2300      	movs	r3, #0
 8010a3a:	61bb      	str	r3, [r7, #24]
 8010a3c:	69bb      	ldr	r3, [r7, #24]
 8010a3e:	2b00      	cmp	r3, #0
 8010a40:	d17b      	bne.n	8010b3a <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x15c>
            {
                Stream& stream = streams[i];
 8010a42:	69ba      	ldr	r2, [r7, #24]
 8010a44:	4613      	mov	r3, r2
 8010a46:	00db      	lsls	r3, r3, #3
 8010a48:	4413      	add	r3, r2
 8010a4a:	009b      	lsls	r3, r3, #2
 8010a4c:	3308      	adds	r3, #8
 8010a4e:	687a      	ldr	r2, [r7, #4]
 8010a50:	4413      	add	r3, r2
 8010a52:	3304      	adds	r3, #4
 8010a54:	613b      	str	r3, [r7, #16]
                if (stream.doDecode)
 8010a56:	693b      	ldr	r3, [r7, #16]
 8010a58:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	d068      	beq.n	8010b32 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x154>
                {
                    MJPEGDecoder* const decoder = mjpegDecoders[i];
 8010a60:	687a      	ldr	r2, [r7, #4]
 8010a62:	69bb      	ldr	r3, [r7, #24]
 8010a64:	009b      	lsls	r3, r3, #2
 8010a66:	4413      	add	r3, r2
 8010a68:	685b      	ldr	r3, [r3, #4]
 8010a6a:	60fb      	str	r3, [r7, #12]
                    // Seek or increment video frame
                    if (stream.seek_to_frame > 0)
 8010a6c:	693b      	ldr	r3, [r7, #16]
 8010a6e:	695b      	ldr	r3, [r3, #20]
 8010a70:	2b00      	cmp	r3, #0
 8010a72:	d00c      	beq.n	8010a8e <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xb0>
                    {
                        decoder->gotoFrame(stream.seek_to_frame);
 8010a74:	68fb      	ldr	r3, [r7, #12]
 8010a76:	681b      	ldr	r3, [r3, #0]
 8010a78:	3324      	adds	r3, #36	; 0x24
 8010a7a:	681b      	ldr	r3, [r3, #0]
 8010a7c:	693a      	ldr	r2, [r7, #16]
 8010a7e:	6952      	ldr	r2, [r2, #20]
 8010a80:	4611      	mov	r1, r2
 8010a82:	68f8      	ldr	r0, [r7, #12]
 8010a84:	4798      	blx	r3
                        stream.seek_to_frame = 0;
 8010a86:	693b      	ldr	r3, [r7, #16]
 8010a88:	2200      	movs	r2, #0
 8010a8a:	615a      	str	r2, [r3, #20]
 8010a8c:	e01e      	b.n	8010acc <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xee>
                    }
                    else
                    {
                        if (stream.skip_frames > 0)
 8010a8e:	693b      	ldr	r3, [r7, #16]
 8010a90:	699b      	ldr	r3, [r3, #24]
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	d01a      	beq.n	8010acc <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xee>
                        {
                            decoder->gotoFrame(decoder->getCurrentFrameNumber() + stream.skip_frames);
 8010a96:	68fb      	ldr	r3, [r7, #12]
 8010a98:	681b      	ldr	r3, [r3, #0]
 8010a9a:	3324      	adds	r3, #36	; 0x24
 8010a9c:	681c      	ldr	r4, [r3, #0]
 8010a9e:	68fb      	ldr	r3, [r7, #12]
 8010aa0:	681b      	ldr	r3, [r3, #0]
 8010aa2:	3328      	adds	r3, #40	; 0x28
 8010aa4:	681b      	ldr	r3, [r3, #0]
 8010aa6:	68f8      	ldr	r0, [r7, #12]
 8010aa8:	4798      	blx	r3
 8010aaa:	4602      	mov	r2, r0
 8010aac:	693b      	ldr	r3, [r7, #16]
 8010aae:	699b      	ldr	r3, [r3, #24]
 8010ab0:	4413      	add	r3, r2
 8010ab2:	4619      	mov	r1, r3
 8010ab4:	68f8      	ldr	r0, [r7, #12]
 8010ab6:	47a0      	blx	r4
                            stream.frameCount += stream.skip_frames;
 8010ab8:	693b      	ldr	r3, [r7, #16]
 8010aba:	685a      	ldr	r2, [r3, #4]
 8010abc:	693b      	ldr	r3, [r7, #16]
 8010abe:	699b      	ldr	r3, [r3, #24]
 8010ac0:	441a      	add	r2, r3
 8010ac2:	693b      	ldr	r3, [r7, #16]
 8010ac4:	605a      	str	r2, [r3, #4]
                            stream.skip_frames = 0;
 8010ac6:	693b      	ldr	r3, [r7, #16]
 8010ac8:	2200      	movs	r2, #0
 8010aca:	619a      	str	r2, [r3, #24]
                        }
                    }

                    // Decode frame
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 8010acc:	68fb      	ldr	r3, [r7, #12]
 8010ace:	681b      	ldr	r3, [r3, #0]
 8010ad0:	3314      	adds	r3, #20
 8010ad2:	681c      	ldr	r4, [r3, #0]
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	69ba      	ldr	r2, [r7, #24]
 8010ad8:	3202      	adds	r2, #2
 8010ada:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010ade:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 8010ae2:	9300      	str	r3, [sp, #0]
 8010ae4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8010ae8:	f44f 7248 	mov.w	r2, #800	; 0x320
 8010aec:	68f8      	ldr	r0, [r7, #12]
 8010aee:	47a0      	blx	r4
 8010af0:	4603      	mov	r3, r0
 8010af2:	461a      	mov	r2, r3
 8010af4:	693b      	ldr	r3, [r7, #16]
 8010af6:	f883 2020 	strb.w	r2, [r3, #32]
                    stream.frameCount++;
 8010afa:	693b      	ldr	r3, [r7, #16]
 8010afc:	685b      	ldr	r3, [r3, #4]
 8010afe:	1c5a      	adds	r2, r3, #1
 8010b00:	693b      	ldr	r3, [r7, #16]
 8010b02:	605a      	str	r2, [r3, #4]

                    // Update frame number
                    if (stream.hasMoreFrames)
 8010b04:	693b      	ldr	r3, [r7, #16]
 8010b06:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010b0a:	2b00      	cmp	r3, #0
 8010b0c:	d00a      	beq.n	8010b24 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x146>
                    {
                        stream.frameNumber = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
 8010b0e:	68fb      	ldr	r3, [r7, #12]
 8010b10:	681b      	ldr	r3, [r3, #0]
 8010b12:	3328      	adds	r3, #40	; 0x28
 8010b14:	681b      	ldr	r3, [r3, #0]
 8010b16:	68f8      	ldr	r0, [r7, #12]
 8010b18:	4798      	blx	r3
 8010b1a:	4603      	mov	r3, r0
 8010b1c:	1e5a      	subs	r2, r3, #1
 8010b1e:	693b      	ldr	r3, [r7, #16]
 8010b20:	601a      	str	r2, [r3, #0]
 8010b22:	e002      	b.n	8010b2a <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x14c>
                    }
                    else
                    {
                        stream.frameNumber = 1;
 8010b24:	693b      	ldr	r3, [r7, #16]
 8010b26:	2201      	movs	r2, #1
 8010b28:	601a      	str	r2, [r3, #0]
                    }
                    stream.doDecode = false;
 8010b2a:	693b      	ldr	r3, [r7, #16]
 8010b2c:	2200      	movs	r2, #0
 8010b2e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
            for (uint32_t i = 0; i < no_streams; i++)
 8010b32:	69bb      	ldr	r3, [r7, #24]
 8010b34:	3301      	adds	r3, #1
 8010b36:	61bb      	str	r3, [r7, #24]
 8010b38:	e780      	b.n	8010a3c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x5e>
                }
            }

            // Release the stream and decode buffer and let UI continue
            MUTEX_UNLOCK(mutexBuffers);
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010b3e:	4618      	mov	r0, r3
 8010b40:	f7f7 fb42 	bl	80081c8 <osMutexRelease>
        while (1)
 8010b44:	e74f      	b.n	80109e6 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x8>

08010b46 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE6StreamC1Ev>:

private:
    class Stream
    {
    public:
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
 8010b46:	b480      	push	{r7}
 8010b48:	b083      	sub	sp, #12
 8010b4a:	af00      	add	r7, sp, #0
 8010b4c:	6078      	str	r0, [r7, #4]
                   seek_to_frame(0), skip_frames(0),
                   isActive(false), isPlaying(false), isShowingOneFrame(false),
                   doInvalidateOnNextTick(false), hasMoreFrames(false), repeat(true), doDecode(false) {}
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	2200      	movs	r2, #0
 8010b52:	601a      	str	r2, [r3, #0]
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	2200      	movs	r2, #0
 8010b58:	605a      	str	r2, [r3, #4]
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	2200      	movs	r2, #0
 8010b5e:	609a      	str	r2, [r3, #8]
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	2200      	movs	r2, #0
 8010b64:	60da      	str	r2, [r3, #12]
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	2200      	movs	r2, #0
 8010b6a:	611a      	str	r2, [r3, #16]
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	2200      	movs	r2, #0
 8010b70:	615a      	str	r2, [r3, #20]
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	2200      	movs	r2, #0
 8010b76:	619a      	str	r2, [r3, #24]
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	2200      	movs	r2, #0
 8010b7c:	771a      	strb	r2, [r3, #28]
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	2200      	movs	r2, #0
 8010b82:	775a      	strb	r2, [r3, #29]
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	2200      	movs	r2, #0
 8010b88:	779a      	strb	r2, [r3, #30]
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	2200      	movs	r2, #0
 8010b8e:	77da      	strb	r2, [r3, #31]
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	2200      	movs	r2, #0
 8010b94:	f883 2020 	strb.w	r2, [r3, #32]
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	2201      	movs	r2, #1
 8010b9c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	2200      	movs	r2, #0
 8010ba4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	4618      	mov	r0, r3
 8010bac:	370c      	adds	r7, #12
 8010bae:	46bd      	mov	sp, r7
 8010bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bb4:	4770      	bx	lr

08010bb6 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE17decodeForNextTickERNS3_6StreamE>:
    MUTEX_TYPE mutexBuffers;     // Mutual exclusion of the video buffers and stream data

    /**
     * Return true, if new video frame should be decoded for the next tick (keep video decode framerate low)
     */
    bool decodeForNextTick(Stream& stream)
 8010bb6:	b480      	push	{r7}
 8010bb8:	b083      	sub	sp, #12
 8010bba:	af00      	add	r7, sp, #0
 8010bbc:	6078      	str	r0, [r7, #4]
 8010bbe:	6039      	str	r1, [r7, #0]
    {
        // Running in UI thread

        // Compare tickCount/frameCount to frame_rate_ticks/frame_rate_video
        if ((stream.tickCount * stream.frame_rate_video) >= (stream.frame_rate_ticks * stream.frameCount))
 8010bc0:	683b      	ldr	r3, [r7, #0]
 8010bc2:	689b      	ldr	r3, [r3, #8]
 8010bc4:	683a      	ldr	r2, [r7, #0]
 8010bc6:	68d2      	ldr	r2, [r2, #12]
 8010bc8:	fb03 f202 	mul.w	r2, r3, r2
 8010bcc:	683b      	ldr	r3, [r7, #0]
 8010bce:	691b      	ldr	r3, [r3, #16]
 8010bd0:	6839      	ldr	r1, [r7, #0]
 8010bd2:	6849      	ldr	r1, [r1, #4]
 8010bd4:	fb01 f303 	mul.w	r3, r1, r3
 8010bd8:	429a      	cmp	r2, r3
 8010bda:	d322      	bcc.n	8010c22 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE17decodeForNextTickERNS3_6StreamE+0x6c>
        {
            if (allowSkipFrames)
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010be2:	2b00      	cmp	r3, #0
 8010be4:	d01b      	beq.n	8010c1e <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE17decodeForNextTickERNS3_6StreamE+0x68>
            {
                stream.skip_frames = (stream.tickCount * stream.frame_rate_video - stream.frame_rate_ticks * stream.frameCount) / stream.frame_rate_ticks;
 8010be6:	683b      	ldr	r3, [r7, #0]
 8010be8:	689b      	ldr	r3, [r3, #8]
 8010bea:	683a      	ldr	r2, [r7, #0]
 8010bec:	68d2      	ldr	r2, [r2, #12]
 8010bee:	fb03 f202 	mul.w	r2, r3, r2
 8010bf2:	683b      	ldr	r3, [r7, #0]
 8010bf4:	691b      	ldr	r3, [r3, #16]
 8010bf6:	6839      	ldr	r1, [r7, #0]
 8010bf8:	6849      	ldr	r1, [r1, #4]
 8010bfa:	fb01 f303 	mul.w	r3, r1, r3
 8010bfe:	1ad2      	subs	r2, r2, r3
 8010c00:	683b      	ldr	r3, [r7, #0]
 8010c02:	691b      	ldr	r3, [r3, #16]
 8010c04:	fbb2 f2f3 	udiv	r2, r2, r3
 8010c08:	683b      	ldr	r3, [r7, #0]
 8010c0a:	619a      	str	r2, [r3, #24]
                if (stream.skip_frames > 0)
 8010c0c:	683b      	ldr	r3, [r7, #0]
 8010c0e:	699b      	ldr	r3, [r3, #24]
 8010c10:	2b00      	cmp	r3, #0
 8010c12:	d004      	beq.n	8010c1e <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE17decodeForNextTickERNS3_6StreamE+0x68>
                {
                    stream.skip_frames--;
 8010c14:	683b      	ldr	r3, [r7, #0]
 8010c16:	699b      	ldr	r3, [r3, #24]
 8010c18:	1e5a      	subs	r2, r3, #1
 8010c1a:	683b      	ldr	r3, [r7, #0]
 8010c1c:	619a      	str	r2, [r3, #24]
                }
            }
            return true;
 8010c1e:	2301      	movs	r3, #1
 8010c20:	e000      	b.n	8010c24 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE17decodeForNextTickERNS3_6StreamE+0x6e>
        }
        return false;
 8010c22:	2300      	movs	r3, #0
    }
 8010c24:	4618      	mov	r0, r3
 8010c26:	370c      	adds	r7, #12
 8010c28:	46bd      	mov	sp, r7
 8010c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c2e:	4770      	bx	lr

08010c30 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EED1Ev>:
class DedicatedBufferController : public touchgfx::VideoController
 8010c30:	b580      	push	{r7, lr}
 8010c32:	b082      	sub	sp, #8
 8010c34:	af00      	add	r7, sp, #0
 8010c36:	6078      	str	r0, [r7, #4]
 8010c38:	4a05      	ldr	r2, [pc, #20]	; (8010c50 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EED1Ev+0x20>)
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	601a      	str	r2, [r3, #0]
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	4618      	mov	r0, r3
 8010c42:	f7ff fbf3 	bl	801042c <_ZN8touchgfx15VideoControllerD1Ev>
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	4618      	mov	r0, r3
 8010c4a:	3708      	adds	r7, #8
 8010c4c:	46bd      	mov	sp, r7
 8010c4e:	bd80      	pop	{r7, pc}
 8010c50:	0802708c 	.word	0x0802708c

08010c54 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EED0Ev>:
 8010c54:	b580      	push	{r7, lr}
 8010c56:	b082      	sub	sp, #8
 8010c58:	af00      	add	r7, sp, #0
 8010c5a:	6078      	str	r0, [r7, #4]
 8010c5c:	6878      	ldr	r0, [r7, #4]
 8010c5e:	f7ff ffe7 	bl	8010c30 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EED1Ev>
 8010c62:	2148      	movs	r1, #72	; 0x48
 8010c64:	6878      	ldr	r0, [r7, #4]
 8010c66:	f012 fc72 	bl	802354e <_ZdlPvj>
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	4618      	mov	r0, r3
 8010c6e:	3708      	adds	r7, #8
 8010c70:	46bd      	mov	sp, r7
 8010c72:	bd80      	pop	{r7, pc}

08010c74 <_Z41__static_initialization_and_destruction_0ii>:
 8010c74:	b580      	push	{r7, lr}
 8010c76:	b082      	sub	sp, #8
 8010c78:	af00      	add	r7, sp, #0
 8010c7a:	6078      	str	r0, [r7, #4]
 8010c7c:	6039      	str	r1, [r7, #0]
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	2b01      	cmp	r3, #1
 8010c82:	d10a      	bne.n	8010c9a <_Z41__static_initialization_and_destruction_0ii+0x26>
 8010c84:	683b      	ldr	r3, [r7, #0]
 8010c86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010c8a:	4293      	cmp	r3, r2
 8010c8c:	d105      	bne.n	8010c9a <_Z41__static_initialization_and_destruction_0ii+0x26>
HardwareMJPEGDecoder mjpegdecoder1;
 8010c8e:	480c      	ldr	r0, [pc, #48]	; (8010cc0 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8010c90:	f7fd fa60 	bl	800e154 <_ZN20HardwareMJPEGDecoderC1Ev>
DedicatedBufferController<1, 800, 480, 800*2U, Bitmap::RGB565> videoController;
 8010c94:	480b      	ldr	r0, [pc, #44]	; (8010cc4 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8010c96:	f7ff fdd1 	bl	801083c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EEC1Ev>
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	d10a      	bne.n	8010cb6 <_Z41__static_initialization_and_destruction_0ii+0x42>
 8010ca0:	683b      	ldr	r3, [r7, #0]
 8010ca2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010ca6:	4293      	cmp	r3, r2
 8010ca8:	d105      	bne.n	8010cb6 <_Z41__static_initialization_and_destruction_0ii+0x42>
 8010caa:	4806      	ldr	r0, [pc, #24]	; (8010cc4 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8010cac:	f7ff ffc0 	bl	8010c30 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EED1Ev>
HardwareMJPEGDecoder mjpegdecoder1;
 8010cb0:	4803      	ldr	r0, [pc, #12]	; (8010cc0 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8010cb2:	f7fe fa21 	bl	800f0f8 <_ZN20HardwareMJPEGDecoderD1Ev>
}
 8010cb6:	bf00      	nop
 8010cb8:	3708      	adds	r7, #8
 8010cba:	46bd      	mov	sp, r7
 8010cbc:	bd80      	pop	{r7, pc}
 8010cbe:	bf00      	nop
 8010cc0:	2001f2c4 	.word	0x2001f2c4
 8010cc4:	2001f308 	.word	0x2001f308

08010cc8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE>:
    virtual Handle registerVideoWidget(touchgfx::VideoWidget& widget)
 8010cc8:	b580      	push	{r7, lr}
 8010cca:	b084      	sub	sp, #16
 8010ccc:	af00      	add	r7, sp, #0
 8010cce:	6078      	str	r0, [r7, #4]
 8010cd0:	6039      	str	r1, [r7, #0]
        const uint32_t sizeOfOneDecodeBuffer = height * stride;
 8010cd2:	4b1f      	ldr	r3, [pc, #124]	; (8010d50 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x88>)
 8010cd4:	60fb      	str	r3, [r7, #12]
        Handle handle = getFreeHandle();
 8010cd6:	6878      	ldr	r0, [r7, #4]
 8010cd8:	f000 fa82 	bl	80111e0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE13getFreeHandleEv>
 8010cdc:	60b8      	str	r0, [r7, #8]
        streams[handle].isActive = true;
 8010cde:	6879      	ldr	r1, [r7, #4]
 8010ce0:	68ba      	ldr	r2, [r7, #8]
 8010ce2:	4613      	mov	r3, r2
 8010ce4:	00db      	lsls	r3, r3, #3
 8010ce6:	4413      	add	r3, r2
 8010ce8:	009b      	lsls	r3, r3, #2
 8010cea:	440b      	add	r3, r1
 8010cec:	3328      	adds	r3, #40	; 0x28
 8010cee:	2201      	movs	r2, #1
 8010cf0:	701a      	strb	r2, [r3, #0]
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010cf6:	4b16      	ldr	r3, [pc, #88]	; (8010d50 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x88>)
 8010cf8:	4413      	add	r3, r2
 8010cfa:	687a      	ldr	r2, [r7, #4]
 8010cfc:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8010cfe:	687a      	ldr	r2, [r7, #4]
 8010d00:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8010d02:	440a      	add	r2, r1
 8010d04:	4293      	cmp	r3, r2
 8010d06:	d905      	bls.n	8010d14 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x4c>
            assert(0 && "registerVideoWidget: Unable to allocate RGB buffer!");
 8010d08:	4b12      	ldr	r3, [pc, #72]	; (8010d54 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x8c>)
 8010d0a:	4a13      	ldr	r2, [pc, #76]	; (8010d58 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x90>)
 8010d0c:	2152      	movs	r1, #82	; 0x52
 8010d0e:	4813      	ldr	r0, [pc, #76]	; (8010d5c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x94>)
 8010d10:	f012 fc4c 	bl	80235ac <__assert_func>
        decodeBuffers[handle] = (uint32_t*)topBufferRGB;
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	68ba      	ldr	r2, [r7, #8]
 8010d1c:	3202      	adds	r2, #2
 8010d1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        topBufferRGB += sizeOfOneDecodeBuffer;
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010d26:	4b0a      	ldr	r3, [pc, #40]	; (8010d50 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x88>)
 8010d28:	4413      	add	r3, r2
 8010d2a:	687a      	ldr	r2, [r7, #4]
 8010d2c:	6393      	str	r3, [r2, #56]	; 0x38
        widget.setVideoBufferFormat(output_format, width, height);
 8010d2e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8010d32:	f44f 7248 	mov.w	r2, #800	; 0x320
 8010d36:	2100      	movs	r1, #0
 8010d38:	6838      	ldr	r0, [r7, #0]
 8010d3a:	f7ff fba5 	bl	8010488 <_ZN8touchgfx11VideoWidget20setVideoBufferFormatENS_6Bitmap12BitmapFormatEss>
        widget.setVideoBuffer((uint8_t*)0);
 8010d3e:	2100      	movs	r1, #0
 8010d40:	6838      	ldr	r0, [r7, #0]
 8010d42:	f7ff fb93 	bl	801046c <_ZN8touchgfx11VideoWidget14setVideoBufferEPh>
        return handle;
 8010d46:	68bb      	ldr	r3, [r7, #8]
    }
 8010d48:	4618      	mov	r0, r3
 8010d4a:	3710      	adds	r7, #16
 8010d4c:	46bd      	mov	sp, r7
 8010d4e:	bd80      	pop	{r7, pc}
 8010d50:	000bb800 	.word	0x000bb800
 8010d54:	08025704 	.word	0x08025704
 8010d58:	08025740 	.word	0x08025740
 8010d5c:	080256c4 	.word	0x080256c4

08010d60 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE21unregisterVideoWidgetEm>:
    virtual void unregisterVideoWidget(const Handle handle)
 8010d60:	b580      	push	{r7, lr}
 8010d62:	b084      	sub	sp, #16
 8010d64:	af00      	add	r7, sp, #0
 8010d66:	6078      	str	r0, [r7, #4]
 8010d68:	6039      	str	r1, [r7, #0]
        MUTEX_LOCK(mutexBuffers);
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010d6e:	f04f 31ff 	mov.w	r1, #4294967295
 8010d72:	4618      	mov	r0, r3
 8010d74:	f7f7 f9ca 	bl	800810c <osMutexAcquire>
        MUTEX_UNLOCK(mutexBuffers);
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010d7c:	4618      	mov	r0, r3
 8010d7e:	f7f7 fa23 	bl	80081c8 <osMutexRelease>
        streams[handle].isActive = false;
 8010d82:	6879      	ldr	r1, [r7, #4]
 8010d84:	683a      	ldr	r2, [r7, #0]
 8010d86:	4613      	mov	r3, r2
 8010d88:	00db      	lsls	r3, r3, #3
 8010d8a:	4413      	add	r3, r2
 8010d8c:	009b      	lsls	r3, r3, #2
 8010d8e:	440b      	add	r3, r1
 8010d90:	3328      	adds	r3, #40	; 0x28
 8010d92:	2200      	movs	r2, #0
 8010d94:	701a      	strb	r2, [r3, #0]
        bool oneIsActive = false;
 8010d96:	2300      	movs	r3, #0
 8010d98:	73fb      	strb	r3, [r7, #15]
        for (uint32_t i = 0; i < no_streams; i++)
 8010d9a:	2300      	movs	r3, #0
 8010d9c:	60bb      	str	r3, [r7, #8]
 8010d9e:	68bb      	ldr	r3, [r7, #8]
 8010da0:	2b00      	cmp	r3, #0
 8010da2:	d114      	bne.n	8010dce <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE21unregisterVideoWidgetEm+0x6e>
            oneIsActive |= streams[i].isActive;
 8010da4:	6879      	ldr	r1, [r7, #4]
 8010da6:	68ba      	ldr	r2, [r7, #8]
 8010da8:	4613      	mov	r3, r2
 8010daa:	00db      	lsls	r3, r3, #3
 8010dac:	4413      	add	r3, r2
 8010dae:	009b      	lsls	r3, r3, #2
 8010db0:	440b      	add	r3, r1
 8010db2:	3328      	adds	r3, #40	; 0x28
 8010db4:	781a      	ldrb	r2, [r3, #0]
 8010db6:	7bfb      	ldrb	r3, [r7, #15]
 8010db8:	4313      	orrs	r3, r2
 8010dba:	b2db      	uxtb	r3, r3
 8010dbc:	2b00      	cmp	r3, #0
 8010dbe:	bf14      	ite	ne
 8010dc0:	2301      	movne	r3, #1
 8010dc2:	2300      	moveq	r3, #0
 8010dc4:	73fb      	strb	r3, [r7, #15]
        for (uint32_t i = 0; i < no_streams; i++)
 8010dc6:	68bb      	ldr	r3, [r7, #8]
 8010dc8:	3301      	adds	r3, #1
 8010dca:	60bb      	str	r3, [r7, #8]
 8010dcc:	e7e7      	b.n	8010d9e <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE21unregisterVideoWidgetEm+0x3e>
        if (oneIsActive == false)
 8010dce:	7bfb      	ldrb	r3, [r7, #15]
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	d103      	bne.n	8010ddc <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE21unregisterVideoWidgetEm+0x7c>
            topBufferRGB = bufferRGB;
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	639a      	str	r2, [r3, #56]	; 0x38
    }
 8010ddc:	bf00      	nop
 8010dde:	3710      	adds	r7, #16
 8010de0:	46bd      	mov	sp, r7
 8010de2:	bd80      	pop	{r7, pc}

08010de4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm>:
    virtual void setFrameRate(const Handle handle, uint32_t ui_frames, uint32_t video_frames)
 8010de4:	b580      	push	{r7, lr}
 8010de6:	b086      	sub	sp, #24
 8010de8:	af00      	add	r7, sp, #0
 8010dea:	60f8      	str	r0, [r7, #12]
 8010dec:	60b9      	str	r1, [r7, #8]
 8010dee:	607a      	str	r2, [r7, #4]
 8010df0:	603b      	str	r3, [r7, #0]
        assert(handle < no_streams);
 8010df2:	68bb      	ldr	r3, [r7, #8]
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	d005      	beq.n	8010e04 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x20>
 8010df8:	4b0f      	ldr	r3, [pc, #60]	; (8010e38 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x54>)
 8010dfa:	4a10      	ldr	r2, [pc, #64]	; (8010e3c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x58>)
 8010dfc:	2182      	movs	r1, #130	; 0x82
 8010dfe:	4810      	ldr	r0, [pc, #64]	; (8010e40 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x5c>)
 8010e00:	f012 fbd4 	bl	80235ac <__assert_func>
        Stream& stream = streams[handle];
 8010e04:	68ba      	ldr	r2, [r7, #8]
 8010e06:	4613      	mov	r3, r2
 8010e08:	00db      	lsls	r3, r3, #3
 8010e0a:	4413      	add	r3, r2
 8010e0c:	009b      	lsls	r3, r3, #2
 8010e0e:	3308      	adds	r3, #8
 8010e10:	68fa      	ldr	r2, [r7, #12]
 8010e12:	4413      	add	r3, r2
 8010e14:	3304      	adds	r3, #4
 8010e16:	617b      	str	r3, [r7, #20]
        stream.frameCount = 0;
 8010e18:	697b      	ldr	r3, [r7, #20]
 8010e1a:	2200      	movs	r2, #0
 8010e1c:	605a      	str	r2, [r3, #4]
        stream.tickCount = 0;
 8010e1e:	697b      	ldr	r3, [r7, #20]
 8010e20:	2200      	movs	r2, #0
 8010e22:	609a      	str	r2, [r3, #8]
        stream.frame_rate_ticks = ui_frames;
 8010e24:	697b      	ldr	r3, [r7, #20]
 8010e26:	687a      	ldr	r2, [r7, #4]
 8010e28:	611a      	str	r2, [r3, #16]
        stream.frame_rate_video = video_frames;
 8010e2a:	697b      	ldr	r3, [r7, #20]
 8010e2c:	683a      	ldr	r2, [r7, #0]
 8010e2e:	60da      	str	r2, [r3, #12]
    }
 8010e30:	bf00      	nop
 8010e32:	3718      	adds	r7, #24
 8010e34:	46bd      	mov	sp, r7
 8010e36:	bd80      	pop	{r7, pc}
 8010e38:	080258e4 	.word	0x080258e4
 8010e3c:	080258f8 	.word	0x080258f8
 8010e40:	080256c4 	.word	0x080256c4

08010e44 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE>:
    virtual bool updateFrame(const Handle handle, touchgfx::VideoWidget& widget)
 8010e44:	b580      	push	{r7, lr}
 8010e46:	b086      	sub	sp, #24
 8010e48:	af00      	add	r7, sp, #0
 8010e4a:	60f8      	str	r0, [r7, #12]
 8010e4c:	60b9      	str	r1, [r7, #8]
 8010e4e:	607a      	str	r2, [r7, #4]
        assert(handle < no_streams);
 8010e50:	68bb      	ldr	r3, [r7, #8]
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	d005      	beq.n	8010e62 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x1e>
 8010e56:	4b29      	ldr	r3, [pc, #164]	; (8010efc <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0xb8>)
 8010e58:	4a29      	ldr	r2, [pc, #164]	; (8010f00 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0xbc>)
 8010e5a:	21d0      	movs	r1, #208	; 0xd0
 8010e5c:	4829      	ldr	r0, [pc, #164]	; (8010f04 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0xc0>)
 8010e5e:	f012 fba5 	bl	80235ac <__assert_func>
        Stream& stream = streams[handle];
 8010e62:	68ba      	ldr	r2, [r7, #8]
 8010e64:	4613      	mov	r3, r2
 8010e66:	00db      	lsls	r3, r3, #3
 8010e68:	4413      	add	r3, r2
 8010e6a:	009b      	lsls	r3, r3, #2
 8010e6c:	3308      	adds	r3, #8
 8010e6e:	68fa      	ldr	r2, [r7, #12]
 8010e70:	4413      	add	r3, r2
 8010e72:	3304      	adds	r3, #4
 8010e74:	617b      	str	r3, [r7, #20]
        if (stream.isPlaying)
 8010e76:	697b      	ldr	r3, [r7, #20]
 8010e78:	7f5b      	ldrb	r3, [r3, #29]
 8010e7a:	2b00      	cmp	r3, #0
 8010e7c:	d00b      	beq.n	8010e96 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x52>
            stream.tickCount+=HAL::getInstance()->getLCDRefreshCount();
 8010e7e:	f7fb f9c7 	bl	800c210 <_ZN8touchgfx3HAL11getInstanceEv>
 8010e82:	4603      	mov	r3, r0
 8010e84:	4618      	mov	r0, r3
 8010e86:	f7ff fac3 	bl	8010410 <_ZN8touchgfx3HAL18getLCDRefreshCountEv>
 8010e8a:	4602      	mov	r2, r0
 8010e8c:	697b      	ldr	r3, [r7, #20]
 8010e8e:	689b      	ldr	r3, [r3, #8]
 8010e90:	441a      	add	r2, r3
 8010e92:	697b      	ldr	r3, [r7, #20]
 8010e94:	609a      	str	r2, [r3, #8]
        if (stream.doInvalidateOnNextTick)
 8010e96:	697b      	ldr	r3, [r7, #20]
 8010e98:	7fdb      	ldrb	r3, [r3, #31]
 8010e9a:	2b00      	cmp	r3, #0
 8010e9c:	d029      	beq.n	8010ef2 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0xae>
            widget.setVideoBuffer((uint8_t*)decodeBuffers[handle]);
 8010e9e:	68fb      	ldr	r3, [r7, #12]
 8010ea0:	68ba      	ldr	r2, [r7, #8]
 8010ea2:	3202      	adds	r2, #2
 8010ea4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010ea8:	4619      	mov	r1, r3
 8010eaa:	6878      	ldr	r0, [r7, #4]
 8010eac:	f7ff fade 	bl	801046c <_ZN8touchgfx11VideoWidget14setVideoBufferEPh>
            widget.invalidate();
 8010eb0:	687a      	ldr	r2, [r7, #4]
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	681b      	ldr	r3, [r3, #0]
 8010eb6:	3314      	adds	r3, #20
 8010eb8:	681b      	ldr	r3, [r3, #0]
 8010eba:	4610      	mov	r0, r2
 8010ebc:	4798      	blx	r3
            stream.doInvalidateOnNextTick = false;
 8010ebe:	697b      	ldr	r3, [r7, #20]
 8010ec0:	2200      	movs	r2, #0
 8010ec2:	77da      	strb	r2, [r3, #31]
            if (!stream.hasMoreFrames && !stream.repeat)
 8010ec4:	697b      	ldr	r3, [r7, #20]
 8010ec6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010eca:	f083 0301 	eor.w	r3, r3, #1
 8010ece:	b2db      	uxtb	r3, r3
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	d00a      	beq.n	8010eea <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0xa6>
 8010ed4:	697b      	ldr	r3, [r7, #20]
 8010ed6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8010eda:	f083 0301 	eor.w	r3, r3, #1
 8010ede:	b2db      	uxtb	r3, r3
 8010ee0:	2b00      	cmp	r3, #0
 8010ee2:	d002      	beq.n	8010eea <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0xa6>
                stream.isPlaying = false;
 8010ee4:	697b      	ldr	r3, [r7, #20]
 8010ee6:	2200      	movs	r2, #0
 8010ee8:	775a      	strb	r2, [r3, #29]
            return stream.hasMoreFrames;
 8010eea:	697b      	ldr	r3, [r7, #20]
 8010eec:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010ef0:	e000      	b.n	8010ef4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0xb0>
        return true;
 8010ef2:	2301      	movs	r3, #1
    }
 8010ef4:	4618      	mov	r0, r3
 8010ef6:	3718      	adds	r7, #24
 8010ef8:	46bd      	mov	sp, r7
 8010efa:	bd80      	pop	{r7, pc}
 8010efc:	080258e4 	.word	0x080258e4
 8010f00:	08025ab4 	.word	0x08025ab4
 8010f04:	080256c4 	.word	0x080256c4

08010f08 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE>:
    virtual void draw(const Handle handle, const touchgfx::Rect& invalidatedArea, const touchgfx::VideoWidget& widget)
 8010f08:	b580      	push	{r7, lr}
 8010f0a:	b084      	sub	sp, #16
 8010f0c:	af00      	add	r7, sp, #0
 8010f0e:	60f8      	str	r0, [r7, #12]
 8010f10:	60b9      	str	r1, [r7, #8]
 8010f12:	607a      	str	r2, [r7, #4]
 8010f14:	603b      	str	r3, [r7, #0]
        if (firstDrawThisFrame)
 8010f16:	68fb      	ldr	r3, [r7, #12]
 8010f18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010f1c:	2b00      	cmp	r3, #0
 8010f1e:	d00e      	beq.n	8010f3e <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE+0x36>
            MUTEX_LOCK(mutexBuffers);
 8010f20:	68fb      	ldr	r3, [r7, #12]
 8010f22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010f24:	f04f 31ff 	mov.w	r1, #4294967295
 8010f28:	4618      	mov	r0, r3
 8010f2a:	f7f7 f8ef 	bl	800810c <osMutexAcquire>
            firstDrawThisFrame = false;
 8010f2e:	68fb      	ldr	r3, [r7, #12]
 8010f30:	2200      	movs	r2, #0
 8010f32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
            uiHasMutex = true;
 8010f36:	68fb      	ldr	r3, [r7, #12]
 8010f38:	2201      	movs	r2, #1
 8010f3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
 8010f3e:	bf00      	nop
 8010f40:	3710      	adds	r7, #16
 8010f42:	46bd      	mov	sp, r7
 8010f44:	bd80      	pop	{r7, pc}
	...

08010f48 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm>:
    virtual void setVideoData(const Handle handle, const uint8_t* movie, const uint32_t length)
 8010f48:	b580      	push	{r7, lr}
 8010f4a:	b086      	sub	sp, #24
 8010f4c:	af00      	add	r7, sp, #0
 8010f4e:	60f8      	str	r0, [r7, #12]
 8010f50:	60b9      	str	r1, [r7, #8]
 8010f52:	607a      	str	r2, [r7, #4]
 8010f54:	603b      	str	r3, [r7, #0]
        assert(handle < no_streams);
 8010f56:	68bb      	ldr	r3, [r7, #8]
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	d005      	beq.n	8010f68 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm+0x20>
 8010f5c:	4b13      	ldr	r3, [pc, #76]	; (8010fac <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm+0x64>)
 8010f5e:	4a14      	ldr	r2, [pc, #80]	; (8010fb0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm+0x68>)
 8010f60:	2190      	movs	r1, #144	; 0x90
 8010f62:	4814      	ldr	r0, [pc, #80]	; (8010fb4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm+0x6c>)
 8010f64:	f012 fb22 	bl	80235ac <__assert_func>
        Stream& stream = streams[handle];
 8010f68:	68ba      	ldr	r2, [r7, #8]
 8010f6a:	4613      	mov	r3, r2
 8010f6c:	00db      	lsls	r3, r3, #3
 8010f6e:	4413      	add	r3, r2
 8010f70:	009b      	lsls	r3, r3, #2
 8010f72:	3308      	adds	r3, #8
 8010f74:	68fa      	ldr	r2, [r7, #12]
 8010f76:	4413      	add	r3, r2
 8010f78:	3304      	adds	r3, #4
 8010f7a:	617b      	str	r3, [r7, #20]
        stream.frameNumber = 0;
 8010f7c:	697b      	ldr	r3, [r7, #20]
 8010f7e:	2200      	movs	r2, #0
 8010f80:	601a      	str	r2, [r3, #0]
        mjpegDecoders[handle]->setVideoData(movie, length);
 8010f82:	68fa      	ldr	r2, [r7, #12]
 8010f84:	68bb      	ldr	r3, [r7, #8]
 8010f86:	009b      	lsls	r3, r3, #2
 8010f88:	4413      	add	r3, r2
 8010f8a:	6858      	ldr	r0, [r3, #4]
 8010f8c:	68fa      	ldr	r2, [r7, #12]
 8010f8e:	68bb      	ldr	r3, [r7, #8]
 8010f90:	009b      	lsls	r3, r3, #2
 8010f92:	4413      	add	r3, r2
 8010f94:	685b      	ldr	r3, [r3, #4]
 8010f96:	681b      	ldr	r3, [r3, #0]
 8010f98:	3308      	adds	r3, #8
 8010f9a:	681b      	ldr	r3, [r3, #0]
 8010f9c:	683a      	ldr	r2, [r7, #0]
 8010f9e:	6879      	ldr	r1, [r7, #4]
 8010fa0:	4798      	blx	r3
    }
 8010fa2:	bf00      	nop
 8010fa4:	3718      	adds	r7, #24
 8010fa6:	46bd      	mov	sp, r7
 8010fa8:	bd80      	pop	{r7, pc}
 8010faa:	bf00      	nop
 8010fac:	080258e4 	.word	0x080258e4
 8010fb0:	08025c58 	.word	0x08025c58
 8010fb4:	080256c4 	.word	0x080256c4

08010fb8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmRNS0_15VideoDataReaderE>:
    virtual void setVideoData(const Handle handle, VideoDataReader& reader)
 8010fb8:	b580      	push	{r7, lr}
 8010fba:	b084      	sub	sp, #16
 8010fbc:	af00      	add	r7, sp, #0
 8010fbe:	60f8      	str	r0, [r7, #12]
 8010fc0:	60b9      	str	r1, [r7, #8]
 8010fc2:	607a      	str	r2, [r7, #4]
        mjpegDecoders[handle]->setVideoData(reader);
 8010fc4:	68fa      	ldr	r2, [r7, #12]
 8010fc6:	68bb      	ldr	r3, [r7, #8]
 8010fc8:	009b      	lsls	r3, r3, #2
 8010fca:	4413      	add	r3, r2
 8010fcc:	6858      	ldr	r0, [r3, #4]
 8010fce:	68fa      	ldr	r2, [r7, #12]
 8010fd0:	68bb      	ldr	r3, [r7, #8]
 8010fd2:	009b      	lsls	r3, r3, #2
 8010fd4:	4413      	add	r3, r2
 8010fd6:	685b      	ldr	r3, [r3, #4]
 8010fd8:	681b      	ldr	r3, [r3, #0]
 8010fda:	330c      	adds	r3, #12
 8010fdc:	681b      	ldr	r3, [r3, #0]
 8010fde:	6879      	ldr	r1, [r7, #4]
 8010fe0:	4798      	blx	r3
    }
 8010fe2:	bf00      	nop
 8010fe4:	3710      	adds	r7, #16
 8010fe6:	46bd      	mov	sp, r7
 8010fe8:	bd80      	pop	{r7, pc}
	...

08010fec <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm>:
    virtual void setCommand(const Handle handle, Command cmd, uint32_t param)
 8010fec:	b580      	push	{r7, lr}
 8010fee:	b086      	sub	sp, #24
 8010ff0:	af00      	add	r7, sp, #0
 8010ff2:	60f8      	str	r0, [r7, #12]
 8010ff4:	60b9      	str	r1, [r7, #8]
 8010ff6:	603b      	str	r3, [r7, #0]
 8010ff8:	4613      	mov	r3, r2
 8010ffa:	71fb      	strb	r3, [r7, #7]
        assert(handle < no_streams);
 8010ffc:	68bb      	ldr	r3, [r7, #8]
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	d005      	beq.n	801100e <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x22>
 8011002:	4b3a      	ldr	r3, [pc, #232]	; (80110ec <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x100>)
 8011004:	4a3a      	ldr	r2, [pc, #232]	; (80110f0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x104>)
 8011006:	21a2      	movs	r1, #162	; 0xa2
 8011008:	483a      	ldr	r0, [pc, #232]	; (80110f4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x108>)
 801100a:	f012 facf 	bl	80235ac <__assert_func>
        Stream& stream = streams[handle];
 801100e:	68ba      	ldr	r2, [r7, #8]
 8011010:	4613      	mov	r3, r2
 8011012:	00db      	lsls	r3, r3, #3
 8011014:	4413      	add	r3, r2
 8011016:	009b      	lsls	r3, r3, #2
 8011018:	3308      	adds	r3, #8
 801101a:	68fa      	ldr	r2, [r7, #12]
 801101c:	4413      	add	r3, r2
 801101e:	3304      	adds	r3, #4
 8011020:	617b      	str	r3, [r7, #20]
        switch (cmd)
 8011022:	79fb      	ldrb	r3, [r7, #7]
 8011024:	2b05      	cmp	r3, #5
 8011026:	d85c      	bhi.n	80110e2 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0xf6>
 8011028:	a201      	add	r2, pc, #4	; (adr r2, 8011030 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x44>)
 801102a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801102e:	bf00      	nop
 8011030:	08011049 	.word	0x08011049
 8011034:	08011089 	.word	0x08011089
 8011038:	08011091 	.word	0x08011091
 801103c:	080110a5 	.word	0x080110a5
 8011040:	080110bf 	.word	0x080110bf
 8011044:	080110cd 	.word	0x080110cd
            if (mjpegDecoders[handle]->hasVideo())
 8011048:	68fa      	ldr	r2, [r7, #12]
 801104a:	68bb      	ldr	r3, [r7, #8]
 801104c:	009b      	lsls	r3, r3, #2
 801104e:	4413      	add	r3, r2
 8011050:	6859      	ldr	r1, [r3, #4]
 8011052:	68fa      	ldr	r2, [r7, #12]
 8011054:	68bb      	ldr	r3, [r7, #8]
 8011056:	009b      	lsls	r3, r3, #2
 8011058:	4413      	add	r3, r2
 801105a:	685b      	ldr	r3, [r3, #4]
 801105c:	681b      	ldr	r3, [r3, #0]
 801105e:	3310      	adds	r3, #16
 8011060:	681b      	ldr	r3, [r3, #0]
 8011062:	4608      	mov	r0, r1
 8011064:	4798      	blx	r3
 8011066:	4603      	mov	r3, r0
 8011068:	2b00      	cmp	r3, #0
 801106a:	d039      	beq.n	80110e0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0xf4>
                stream.isPlaying = true;
 801106c:	697b      	ldr	r3, [r7, #20]
 801106e:	2201      	movs	r2, #1
 8011070:	775a      	strb	r2, [r3, #29]
                stream.hasMoreFrames = true; // Assume more frames, lowered on end
 8011072:	697b      	ldr	r3, [r7, #20]
 8011074:	2201      	movs	r2, #1
 8011076:	f883 2020 	strb.w	r2, [r3, #32]
                stream.frameCount = 0;
 801107a:	697b      	ldr	r3, [r7, #20]
 801107c:	2200      	movs	r2, #0
 801107e:	605a      	str	r2, [r3, #4]
                stream.tickCount = 0;
 8011080:	697b      	ldr	r3, [r7, #20]
 8011082:	2200      	movs	r2, #0
 8011084:	609a      	str	r2, [r3, #8]
            break;
 8011086:	e02b      	b.n	80110e0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0xf4>
            stream.isPlaying = false;
 8011088:	697b      	ldr	r3, [r7, #20]
 801108a:	2200      	movs	r2, #0
 801108c:	775a      	strb	r2, [r3, #29]
            break;
 801108e:	e028      	b.n	80110e2 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0xf6>
            stream.seek_to_frame = param;
 8011090:	697b      	ldr	r3, [r7, #20]
 8011092:	683a      	ldr	r2, [r7, #0]
 8011094:	615a      	str	r2, [r3, #20]
            stream.frameCount = 0;
 8011096:	697b      	ldr	r3, [r7, #20]
 8011098:	2200      	movs	r2, #0
 801109a:	605a      	str	r2, [r3, #4]
            stream.tickCount = 0;
 801109c:	697b      	ldr	r3, [r7, #20]
 801109e:	2200      	movs	r2, #0
 80110a0:	609a      	str	r2, [r3, #8]
            break;
 80110a2:	e01e      	b.n	80110e2 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0xf6>
            stream.seek_to_frame = param;
 80110a4:	697b      	ldr	r3, [r7, #20]
 80110a6:	683a      	ldr	r2, [r7, #0]
 80110a8:	615a      	str	r2, [r3, #20]
            stream.isShowingOneFrame = true;
 80110aa:	697b      	ldr	r3, [r7, #20]
 80110ac:	2201      	movs	r2, #1
 80110ae:	779a      	strb	r2, [r3, #30]
            stream.frameCount = 0;
 80110b0:	697b      	ldr	r3, [r7, #20]
 80110b2:	2200      	movs	r2, #0
 80110b4:	605a      	str	r2, [r3, #4]
            stream.tickCount = 0;
 80110b6:	697b      	ldr	r3, [r7, #20]
 80110b8:	2200      	movs	r2, #0
 80110ba:	609a      	str	r2, [r3, #8]
            break;
 80110bc:	e011      	b.n	80110e2 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0xf6>
            stream.isPlaying = false;
 80110be:	697b      	ldr	r3, [r7, #20]
 80110c0:	2200      	movs	r2, #0
 80110c2:	775a      	strb	r2, [r3, #29]
            stream.seek_to_frame = 1;
 80110c4:	697b      	ldr	r3, [r7, #20]
 80110c6:	2201      	movs	r2, #1
 80110c8:	615a      	str	r2, [r3, #20]
            break;
 80110ca:	e00a      	b.n	80110e2 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0xf6>
            stream.repeat = (param > 0);
 80110cc:	683b      	ldr	r3, [r7, #0]
 80110ce:	2b00      	cmp	r3, #0
 80110d0:	bf14      	ite	ne
 80110d2:	2301      	movne	r3, #1
 80110d4:	2300      	moveq	r3, #0
 80110d6:	b2da      	uxtb	r2, r3
 80110d8:	697b      	ldr	r3, [r7, #20]
 80110da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            break;
 80110de:	e000      	b.n	80110e2 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0xf6>
            break;
 80110e0:	bf00      	nop
    }
 80110e2:	bf00      	nop
 80110e4:	3718      	adds	r7, #24
 80110e6:	46bd      	mov	sp, r7
 80110e8:	bd80      	pop	{r7, pc}
 80110ea:	bf00      	nop
 80110ec:	080258e4 	.word	0x080258e4
 80110f0:	08025e34 	.word	0x08025e34
 80110f4:	080256c4 	.word	0x080256c4

080110f8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm>:
    virtual uint32_t getCurrentFrameNumber(const Handle handle)
 80110f8:	b580      	push	{r7, lr}
 80110fa:	b084      	sub	sp, #16
 80110fc:	af00      	add	r7, sp, #0
 80110fe:	6078      	str	r0, [r7, #4]
 8011100:	6039      	str	r1, [r7, #0]
        assert(handle < no_streams);
 8011102:	683b      	ldr	r3, [r7, #0]
 8011104:	2b00      	cmp	r3, #0
 8011106:	d005      	beq.n	8011114 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x1c>
 8011108:	4b0a      	ldr	r3, [pc, #40]	; (8011134 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x3c>)
 801110a:	4a0b      	ldr	r2, [pc, #44]	; (8011138 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x40>)
 801110c:	2179      	movs	r1, #121	; 0x79
 801110e:	480b      	ldr	r0, [pc, #44]	; (801113c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x44>)
 8011110:	f012 fa4c 	bl	80235ac <__assert_func>
        const Stream& stream = streams[handle];
 8011114:	683a      	ldr	r2, [r7, #0]
 8011116:	4613      	mov	r3, r2
 8011118:	00db      	lsls	r3, r3, #3
 801111a:	4413      	add	r3, r2
 801111c:	009b      	lsls	r3, r3, #2
 801111e:	3308      	adds	r3, #8
 8011120:	687a      	ldr	r2, [r7, #4]
 8011122:	4413      	add	r3, r2
 8011124:	3304      	adds	r3, #4
 8011126:	60fb      	str	r3, [r7, #12]
        return stream.frameNumber;
 8011128:	68fb      	ldr	r3, [r7, #12]
 801112a:	681b      	ldr	r3, [r3, #0]
    }
 801112c:	4618      	mov	r0, r3
 801112e:	3710      	adds	r7, #16
 8011130:	46bd      	mov	sp, r7
 8011132:	bd80      	pop	{r7, pc}
 8011134:	080258e4 	.word	0x080258e4
 8011138:	08026008 	.word	0x08026008
 801113c:	080256c4 	.word	0x080256c4

08011140 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE>:
    virtual void getVideoInformation(const Handle handle, touchgfx::VideoInformation* data)
 8011140:	b580      	push	{r7, lr}
 8011142:	b084      	sub	sp, #16
 8011144:	af00      	add	r7, sp, #0
 8011146:	60f8      	str	r0, [r7, #12]
 8011148:	60b9      	str	r1, [r7, #8]
 801114a:	607a      	str	r2, [r7, #4]
        assert(handle < no_streams);
 801114c:	68bb      	ldr	r3, [r7, #8]
 801114e:	2b00      	cmp	r3, #0
 8011150:	d006      	beq.n	8011160 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x20>
 8011152:	4b0d      	ldr	r3, [pc, #52]	; (8011188 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x48>)
 8011154:	4a0d      	ldr	r2, [pc, #52]	; (801118c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x4c>)
 8011156:	f44f 71b5 	mov.w	r1, #362	; 0x16a
 801115a:	480d      	ldr	r0, [pc, #52]	; (8011190 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x50>)
 801115c:	f012 fa26 	bl	80235ac <__assert_func>
        mjpegDecoders[handle]->getVideoInfo(data);
 8011160:	68fa      	ldr	r2, [r7, #12]
 8011162:	68bb      	ldr	r3, [r7, #8]
 8011164:	009b      	lsls	r3, r3, #2
 8011166:	4413      	add	r3, r2
 8011168:	6858      	ldr	r0, [r3, #4]
 801116a:	68fa      	ldr	r2, [r7, #12]
 801116c:	68bb      	ldr	r3, [r7, #8]
 801116e:	009b      	lsls	r3, r3, #2
 8011170:	4413      	add	r3, r2
 8011172:	685b      	ldr	r3, [r3, #4]
 8011174:	681b      	ldr	r3, [r3, #0]
 8011176:	3330      	adds	r3, #48	; 0x30
 8011178:	681b      	ldr	r3, [r3, #0]
 801117a:	6879      	ldr	r1, [r7, #4]
 801117c:	4798      	blx	r3
    }
 801117e:	bf00      	nop
 8011180:	3710      	adds	r7, #16
 8011182:	46bd      	mov	sp, r7
 8011184:	bd80      	pop	{r7, pc}
 8011186:	bf00      	nop
 8011188:	080258e4 	.word	0x080258e4
 801118c:	080261c0 	.word	0x080261c0
 8011190:	080256c4 	.word	0x080256c4

08011194 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm>:
    virtual bool getIsPlaying(const Handle handle)
 8011194:	b580      	push	{r7, lr}
 8011196:	b084      	sub	sp, #16
 8011198:	af00      	add	r7, sp, #0
 801119a:	6078      	str	r0, [r7, #4]
 801119c:	6039      	str	r1, [r7, #0]
        assert(handle < no_streams);
 801119e:	683b      	ldr	r3, [r7, #0]
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	d006      	beq.n	80111b2 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x1e>
 80111a4:	4b0b      	ldr	r3, [pc, #44]	; (80111d4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x40>)
 80111a6:	4a0c      	ldr	r2, [pc, #48]	; (80111d8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x44>)
 80111a8:	f44f 71b8 	mov.w	r1, #368	; 0x170
 80111ac:	480b      	ldr	r0, [pc, #44]	; (80111dc <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x48>)
 80111ae:	f012 f9fd 	bl	80235ac <__assert_func>
        Stream& stream = streams[handle];
 80111b2:	683a      	ldr	r2, [r7, #0]
 80111b4:	4613      	mov	r3, r2
 80111b6:	00db      	lsls	r3, r3, #3
 80111b8:	4413      	add	r3, r2
 80111ba:	009b      	lsls	r3, r3, #2
 80111bc:	3308      	adds	r3, #8
 80111be:	687a      	ldr	r2, [r7, #4]
 80111c0:	4413      	add	r3, r2
 80111c2:	3304      	adds	r3, #4
 80111c4:	60fb      	str	r3, [r7, #12]
        return stream.isPlaying;
 80111c6:	68fb      	ldr	r3, [r7, #12]
 80111c8:	7f5b      	ldrb	r3, [r3, #29]
    }
 80111ca:	4618      	mov	r0, r3
 80111cc:	3710      	adds	r7, #16
 80111ce:	46bd      	mov	sp, r7
 80111d0:	bd80      	pop	{r7, pc}
 80111d2:	bf00      	nop
 80111d4:	080258e4 	.word	0x080258e4
 80111d8:	08026370 	.word	0x08026370
 80111dc:	080256c4 	.word	0x080256c4

080111e0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE13getFreeHandleEv>:

    Handle getFreeHandle()
 80111e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80111e2:	b08d      	sub	sp, #52	; 0x34
 80111e4:	af00      	add	r7, sp, #0
 80111e6:	6078      	str	r0, [r7, #4]
    {
        // Running in UI thread

        for (uint32_t i = 0; i < no_streams; i++)
 80111e8:	2300      	movs	r3, #0
 80111ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80111ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111ee:	2b00      	cmp	r3, #0
 80111f0:	d135      	bne.n	801125e <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE13getFreeHandleEv+0x7e>
        {
            if (streams[i].isActive == false)
 80111f2:	6879      	ldr	r1, [r7, #4]
 80111f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80111f6:	4613      	mov	r3, r2
 80111f8:	00db      	lsls	r3, r3, #3
 80111fa:	4413      	add	r3, r2
 80111fc:	009b      	lsls	r3, r3, #2
 80111fe:	440b      	add	r3, r1
 8011200:	3328      	adds	r3, #40	; 0x28
 8011202:	781b      	ldrb	r3, [r3, #0]
 8011204:	2b00      	cmp	r3, #0
 8011206:	d126      	bne.n	8011256 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE13getFreeHandleEv+0x76>
            {
                // Reset stream parameters
                streams[i] = Stream();
 8011208:	f107 0308 	add.w	r3, r7, #8
 801120c:	4618      	mov	r0, r3
 801120e:	f7ff fc9a 	bl	8010b46 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE6StreamC1Ev>
 8011212:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011214:	4613      	mov	r3, r2
 8011216:	00db      	lsls	r3, r3, #3
 8011218:	4413      	add	r3, r2
 801121a:	009b      	lsls	r3, r3, #2
 801121c:	3308      	adds	r3, #8
 801121e:	687a      	ldr	r2, [r7, #4]
 8011220:	4413      	add	r3, r2
 8011222:	3304      	adds	r3, #4
 8011224:	f107 0408 	add.w	r4, r7, #8
 8011228:	469c      	mov	ip, r3
 801122a:	f104 0e20 	add.w	lr, r4, #32
 801122e:	4665      	mov	r5, ip
 8011230:	4626      	mov	r6, r4
 8011232:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8011234:	6028      	str	r0, [r5, #0]
 8011236:	6069      	str	r1, [r5, #4]
 8011238:	60aa      	str	r2, [r5, #8]
 801123a:	60eb      	str	r3, [r5, #12]
 801123c:	3410      	adds	r4, #16
 801123e:	f10c 0c10 	add.w	ip, ip, #16
 8011242:	4574      	cmp	r4, lr
 8011244:	d1f3      	bne.n	801122e <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE13getFreeHandleEv+0x4e>
 8011246:	4663      	mov	r3, ip
 8011248:	4622      	mov	r2, r4
 801124a:	8811      	ldrh	r1, [r2, #0]
 801124c:	7892      	ldrb	r2, [r2, #2]
 801124e:	8019      	strh	r1, [r3, #0]
 8011250:	709a      	strb	r2, [r3, #2]

                return static_cast<VideoController::Handle>(i);
 8011252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011254:	e00a      	b.n	801126c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE13getFreeHandleEv+0x8c>
        for (uint32_t i = 0; i < no_streams; i++)
 8011256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011258:	3301      	adds	r3, #1
 801125a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801125c:	e7c6      	b.n	80111ec <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE13getFreeHandleEv+0xc>
            }
        }

        assert(0 && "Unable to find free video stream handle!");
 801125e:	4b05      	ldr	r3, [pc, #20]	; (8011274 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE13getFreeHandleEv+0x94>)
 8011260:	4a05      	ldr	r2, [pc, #20]	; (8011278 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE13getFreeHandleEv+0x98>)
 8011262:	f240 11c5 	movw	r1, #453	; 0x1c5
 8011266:	4805      	ldr	r0, [pc, #20]	; (801127c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE13getFreeHandleEv+0x9c>)
 8011268:	f012 f9a0 	bl	80235ac <__assert_func>
        return static_cast<VideoController::Handle>(0);
    }
 801126c:	4618      	mov	r0, r3
 801126e:	3734      	adds	r7, #52	; 0x34
 8011270:	46bd      	mov	sp, r7
 8011272:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011274:	080264fc 	.word	0x080264fc
 8011278:	0802652c 	.word	0x0802652c
 801127c:	080256c4 	.word	0x080256c4

08011280 <_GLOBAL__sub_I_mjpegdecoder1>:
 8011280:	b580      	push	{r7, lr}
 8011282:	af00      	add	r7, sp, #0
 8011284:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8011288:	2001      	movs	r0, #1
 801128a:	f7ff fcf3 	bl	8010c74 <_Z41__static_initialization_and_destruction_0ii>
 801128e:	bd80      	pop	{r7, pc}

08011290 <_GLOBAL__sub_D_mjpegdecoder1>:
 8011290:	b580      	push	{r7, lr}
 8011292:	af00      	add	r7, sp, #0
 8011294:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8011298:	2000      	movs	r0, #0
 801129a:	f7ff fceb 	bl	8010c74 <_Z41__static_initialization_and_destruction_0ii>
 801129e:	bd80      	pop	{r7, pc}

080112a0 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks>:
static uint32_t TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
 80112a0:	b480      	push	{r7}
 80112a2:	b097      	sub	sp, #92	; 0x5c
 80112a4:	af00      	add	r7, sp, #0
 80112a6:	60f8      	str	r0, [r7, #12]
 80112a8:	60b9      	str	r1, [r7, #8]
 80112aa:	607a      	str	r2, [r7, #4]
 80112ac:	603b      	str	r3, [r7, #0]
  int32_t c_red, c_blue, c_green;

  uint8_t *pOutAddr, *pOutAddr2;
  uint8_t *pChrom, *pLum;

  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
 80112ae:	683b      	ldr	r3, [r7, #0]
 80112b0:	4a29      	ldr	r2, [pc, #164]	; (8011358 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xb8>)
 80112b2:	fba2 2303 	umull	r2, r3, r2, r3
 80112b6:	0a1b      	lsrs	r3, r3, #8
 80112b8:	633b      	str	r3, [r7, #48]	; 0x30
  currentMCU = BlockIndex;
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	64bb      	str	r3, [r7, #72]	; 0x48

  while(currentMCU < (numberMCU + BlockIndex))
 80112be:	e152      	b.n	8011566 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2c6>
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
 80112c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80112c2:	011a      	lsls	r2, r3, #4
 80112c4:	4b25      	ldr	r3, [pc, #148]	; (801135c <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xbc>)
 80112c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80112c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80112cc:	011b      	lsls	r3, r3, #4
 80112ce:	62fb      	str	r3, [r7, #44]	; 0x2c

    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
 80112d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80112d2:	011b      	lsls	r3, r3, #4
 80112d4:	4a21      	ldr	r2, [pc, #132]	; (801135c <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xbc>)
 80112d6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80112d8:	fbb3 f1f2 	udiv	r1, r3, r2
 80112dc:	fb01 f202 	mul.w	r2, r1, r2
 80112e0:	1a9b      	subs	r3, r3, r2
 80112e2:	62bb      	str	r3, [r7, #40]	; 0x28

    //tgfx: Set stride to the full width of the RGB Buffer, and not the video itself.
    JPEG_ConvertorParams.ScaledWidth = 800 * 2;
 80112e4:	4b1d      	ldr	r3, [pc, #116]	; (801135c <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xbc>)
 80112e6:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80112ea:	629a      	str	r2, [r3, #40]	; 0x28

    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 80112ec:	4b1b      	ldr	r3, [pc, #108]	; (801135c <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xbc>)
 80112ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80112f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80112f2:	fb03 f202 	mul.w	r2, r3, r2
 80112f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112f8:	005b      	lsls	r3, r3, #1
 80112fa:	4413      	add	r3, r2
 80112fc:	647b      	str	r3, [r7, #68]	; 0x44

    currentMCU++;
 80112fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011300:	3301      	adds	r3, #1
 8011302:	64bb      	str	r3, [r7, #72]	; 0x48

    pChrom = pInBuffer + 256; /* pChroma = pInBuffer + 4*64 */
 8011304:	68fb      	ldr	r3, [r7, #12]
 8011306:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801130a:	63bb      	str	r3, [r7, #56]	; 0x38

    pLum = pInBuffer;
 801130c:	68fb      	ldr	r3, [r7, #12]
 801130e:	637b      	str	r3, [r7, #52]	; 0x34

    for(i= 0; i <  16; i+=2)
 8011310:	2300      	movs	r3, #0
 8011312:	657b      	str	r3, [r7, #84]	; 0x54
 8011314:	e11f      	b.n	8011556 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2b6>
    {
      if(i == 8)
 8011316:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011318:	2b08      	cmp	r3, #8
 801131a:	d102      	bne.n	8011322 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x82>
      {
        pLum = pInBuffer + 128;
 801131c:	68fb      	ldr	r3, [r7, #12]
 801131e:	3380      	adds	r3, #128	; 0x80
 8011320:	637b      	str	r3, [r7, #52]	; 0x34
      }

      if(refline < JPEG_ConvertorParams.ScaledWidth * 480)
 8011322:	4b0e      	ldr	r3, [pc, #56]	; (801135c <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xbc>)
 8011324:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011326:	4613      	mov	r3, r2
 8011328:	011b      	lsls	r3, r3, #4
 801132a:	1a9b      	subs	r3, r3, r2
 801132c:	015b      	lsls	r3, r3, #5
 801132e:	461a      	mov	r2, r3
 8011330:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011332:	4293      	cmp	r3, r2
 8011334:	f080 810c 	bcs.w	8011550 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2b0>
      {
        pOutAddr = pOutBuffer + refline;
 8011338:	68ba      	ldr	r2, [r7, #8]
 801133a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801133c:	4413      	add	r3, r2
 801133e:	643b      	str	r3, [r7, #64]	; 0x40
        pOutAddr2 = pOutAddr + JPEG_ConvertorParams.ScaledWidth;
 8011340:	4b06      	ldr	r3, [pc, #24]	; (801135c <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xbc>)
 8011342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011344:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011346:	4413      	add	r3, r2
 8011348:	63fb      	str	r3, [r7, #60]	; 0x3c

        for(k= 0; k<2; k++)
 801134a:	2300      	movs	r3, #0
 801134c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801134e:	e0f2      	b.n	8011536 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x296>
        {
          for(j=0; j < 8; j+=2)
 8011350:	2300      	movs	r3, #0
 8011352:	653b      	str	r3, [r7, #80]	; 0x50
 8011354:	e0e5      	b.n	8011522 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x282>
 8011356:	bf00      	nop
 8011358:	aaaaaaab 	.word	0xaaaaaaab
 801135c:	2001f350 	.word	0x2001f350
          {
            cbcomp = (int32_t)(*(pChrom));
 8011360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011362:	781b      	ldrb	r3, [r3, #0]
 8011364:	627b      	str	r3, [r7, #36]	; 0x24
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 8011366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011368:	009b      	lsls	r3, r3, #2
 801136a:	4a86      	ldr	r2, [pc, #536]	; (8011584 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2e4>)
 801136c:	4413      	add	r3, r2
 801136e:	681b      	ldr	r3, [r3, #0]
 8011370:	623b      	str	r3, [r7, #32]

            crcomp = (int32_t)(*(pChrom + 64));
 8011372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011374:	3340      	adds	r3, #64	; 0x40
 8011376:	781b      	ldrb	r3, [r3, #0]
 8011378:	61fb      	str	r3, [r7, #28]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
 801137a:	69fb      	ldr	r3, [r7, #28]
 801137c:	009b      	lsls	r3, r3, #2
 801137e:	4a82      	ldr	r2, [pc, #520]	; (8011588 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2e8>)
 8011380:	4413      	add	r3, r2
 8011382:	681b      	ldr	r3, [r3, #0]
 8011384:	61bb      	str	r3, [r7, #24]

            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
 8011386:	69fb      	ldr	r3, [r7, #28]
 8011388:	009b      	lsls	r3, r3, #2
 801138a:	4a80      	ldr	r2, [pc, #512]	; (801158c <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2ec>)
 801138c:	4413      	add	r3, r2
 801138e:	681a      	ldr	r2, [r3, #0]
 8011390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011392:	009b      	lsls	r3, r3, #2
 8011394:	497e      	ldr	r1, [pc, #504]	; (8011590 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2f0>)
 8011396:	440b      	add	r3, r1
 8011398:	681b      	ldr	r3, [r3, #0]
 801139a:	4413      	add	r3, r2
 801139c:	141b      	asrs	r3, r3, #16
 801139e:	617b      	str	r3, [r7, #20]
            pOutAddr2[3 + JPEG_GREEN_OFFSET/8] = CLAMP(ycomp + c_green);
            pOutAddr2[3 + JPEG_BLUE_OFFSET/8] = CLAMP(ycomp + c_blue);

#elif (JPEG_RGB_FORMAT == JPEG_RGB565)

            ycomp = (int32_t)(*(pLum +j));
 80113a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80113a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80113a4:	4413      	add	r3, r2
 80113a6:	781b      	ldrb	r3, [r3, #0]
 80113a8:	613b      	str	r3, [r7, #16]

            *(__IO uint16_t *)pOutAddr =
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 80113aa:	693a      	ldr	r2, [r7, #16]
 80113ac:	69bb      	ldr	r3, [r7, #24]
 80113ae:	4413      	add	r3, r2
 80113b0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80113b4:	4a77      	ldr	r2, [pc, #476]	; (8011594 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2f4>)
 80113b6:	5cd3      	ldrb	r3, [r2, r3]
 80113b8:	08db      	lsrs	r3, r3, #3
 80113ba:	b2db      	uxtb	r3, r3
 80113bc:	02db      	lsls	r3, r3, #11
 80113be:	b21a      	sxth	r2, r3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 80113c0:	6939      	ldr	r1, [r7, #16]
 80113c2:	697b      	ldr	r3, [r7, #20]
 80113c4:	440b      	add	r3, r1
 80113c6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80113ca:	4972      	ldr	r1, [pc, #456]	; (8011594 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2f4>)
 80113cc:	5ccb      	ldrb	r3, [r1, r3]
 80113ce:	089b      	lsrs	r3, r3, #2
 80113d0:	b2db      	uxtb	r3, r3
 80113d2:	015b      	lsls	r3, r3, #5
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 80113d4:	b21b      	sxth	r3, r3
 80113d6:	4313      	orrs	r3, r2
 80113d8:	b21a      	sxth	r2, r3
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 80113da:	6939      	ldr	r1, [r7, #16]
 80113dc:	6a3b      	ldr	r3, [r7, #32]
 80113de:	440b      	add	r3, r1
 80113e0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80113e4:	496b      	ldr	r1, [pc, #428]	; (8011594 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2f4>)
 80113e6:	5ccb      	ldrb	r3, [r1, r3]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 80113e8:	08db      	lsrs	r3, r3, #3
 80113ea:	b2db      	uxtb	r3, r3
 80113ec:	b21b      	sxth	r3, r3
 80113ee:	4313      	orrs	r3, r2
 80113f0:	b21b      	sxth	r3, r3
 80113f2:	b29a      	uxth	r2, r3
            *(__IO uint16_t *)pOutAddr =
 80113f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80113f6:	801a      	strh	r2, [r3, #0]
            /**********/
            ycomp = (int32_t)(*(pLum +j +1));
 80113f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80113fa:	3301      	adds	r3, #1
 80113fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80113fe:	4413      	add	r3, r2
 8011400:	781b      	ldrb	r3, [r3, #0]
 8011402:	613b      	str	r3, [r7, #16]

            *((__IO uint16_t *)(pOutAddr + 2)) =
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8011404:	693a      	ldr	r2, [r7, #16]
 8011406:	69bb      	ldr	r3, [r7, #24]
 8011408:	4413      	add	r3, r2
 801140a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801140e:	4a61      	ldr	r2, [pc, #388]	; (8011594 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2f4>)
 8011410:	5cd3      	ldrb	r3, [r2, r3]
 8011412:	08db      	lsrs	r3, r3, #3
 8011414:	b2db      	uxtb	r3, r3
 8011416:	02db      	lsls	r3, r3, #11
 8011418:	b21a      	sxth	r2, r3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 801141a:	6939      	ldr	r1, [r7, #16]
 801141c:	697b      	ldr	r3, [r7, #20]
 801141e:	440b      	add	r3, r1
 8011420:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8011424:	495b      	ldr	r1, [pc, #364]	; (8011594 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2f4>)
 8011426:	5ccb      	ldrb	r3, [r1, r3]
 8011428:	089b      	lsrs	r3, r3, #2
 801142a:	b2db      	uxtb	r3, r3
 801142c:	015b      	lsls	r3, r3, #5
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 801142e:	b21b      	sxth	r3, r3
 8011430:	4313      	orrs	r3, r2
 8011432:	b21a      	sxth	r2, r3
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 8011434:	6939      	ldr	r1, [r7, #16]
 8011436:	6a3b      	ldr	r3, [r7, #32]
 8011438:	440b      	add	r3, r1
 801143a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801143e:	4955      	ldr	r1, [pc, #340]	; (8011594 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2f4>)
 8011440:	5ccb      	ldrb	r3, [r1, r3]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8011442:	08db      	lsrs	r3, r3, #3
 8011444:	b2db      	uxtb	r3, r3
 8011446:	b21b      	sxth	r3, r3
 8011448:	4313      	orrs	r3, r2
 801144a:	b21a      	sxth	r2, r3
            *((__IO uint16_t *)(pOutAddr + 2)) =
 801144c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801144e:	3302      	adds	r3, #2
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8011450:	b292      	uxth	r2, r2
            *((__IO uint16_t *)(pOutAddr + 2)) =
 8011452:	801a      	strh	r2, [r3, #0]

            /**********/
            ycomp = (int32_t)(*(pLum +j +8));
 8011454:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011456:	3308      	adds	r3, #8
 8011458:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801145a:	4413      	add	r3, r2
 801145c:	781b      	ldrb	r3, [r3, #0]
 801145e:	613b      	str	r3, [r7, #16]

            *(__IO uint16_t *)pOutAddr2 =
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8011460:	693a      	ldr	r2, [r7, #16]
 8011462:	69bb      	ldr	r3, [r7, #24]
 8011464:	4413      	add	r3, r2
 8011466:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801146a:	4a4a      	ldr	r2, [pc, #296]	; (8011594 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2f4>)
 801146c:	5cd3      	ldrb	r3, [r2, r3]
 801146e:	08db      	lsrs	r3, r3, #3
 8011470:	b2db      	uxtb	r3, r3
 8011472:	02db      	lsls	r3, r3, #11
 8011474:	b21a      	sxth	r2, r3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8011476:	6939      	ldr	r1, [r7, #16]
 8011478:	697b      	ldr	r3, [r7, #20]
 801147a:	440b      	add	r3, r1
 801147c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8011480:	4944      	ldr	r1, [pc, #272]	; (8011594 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2f4>)
 8011482:	5ccb      	ldrb	r3, [r1, r3]
 8011484:	089b      	lsrs	r3, r3, #2
 8011486:	b2db      	uxtb	r3, r3
 8011488:	015b      	lsls	r3, r3, #5
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 801148a:	b21b      	sxth	r3, r3
 801148c:	4313      	orrs	r3, r2
 801148e:	b21a      	sxth	r2, r3
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 8011490:	6939      	ldr	r1, [r7, #16]
 8011492:	6a3b      	ldr	r3, [r7, #32]
 8011494:	440b      	add	r3, r1
 8011496:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801149a:	493e      	ldr	r1, [pc, #248]	; (8011594 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2f4>)
 801149c:	5ccb      	ldrb	r3, [r1, r3]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 801149e:	08db      	lsrs	r3, r3, #3
 80114a0:	b2db      	uxtb	r3, r3
 80114a2:	b21b      	sxth	r3, r3
 80114a4:	4313      	orrs	r3, r2
 80114a6:	b21b      	sxth	r3, r3
 80114a8:	b29a      	uxth	r2, r3
            *(__IO uint16_t *)pOutAddr2 =
 80114aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80114ac:	801a      	strh	r2, [r3, #0]

            /**********/
            ycomp = (int32_t)(*(pLum +j +8 +1));
 80114ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80114b0:	3309      	adds	r3, #9
 80114b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80114b4:	4413      	add	r3, r2
 80114b6:	781b      	ldrb	r3, [r3, #0]
 80114b8:	613b      	str	r3, [r7, #16]

            *((__IO uint16_t *)(pOutAddr2 +2)) =
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 80114ba:	693a      	ldr	r2, [r7, #16]
 80114bc:	69bb      	ldr	r3, [r7, #24]
 80114be:	4413      	add	r3, r2
 80114c0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80114c4:	4a33      	ldr	r2, [pc, #204]	; (8011594 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2f4>)
 80114c6:	5cd3      	ldrb	r3, [r2, r3]
 80114c8:	08db      	lsrs	r3, r3, #3
 80114ca:	b2db      	uxtb	r3, r3
 80114cc:	02db      	lsls	r3, r3, #11
 80114ce:	b21a      	sxth	r2, r3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 80114d0:	6939      	ldr	r1, [r7, #16]
 80114d2:	697b      	ldr	r3, [r7, #20]
 80114d4:	440b      	add	r3, r1
 80114d6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80114da:	492e      	ldr	r1, [pc, #184]	; (8011594 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2f4>)
 80114dc:	5ccb      	ldrb	r3, [r1, r3]
 80114de:	089b      	lsrs	r3, r3, #2
 80114e0:	b2db      	uxtb	r3, r3
 80114e2:	015b      	lsls	r3, r3, #5
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 80114e4:	b21b      	sxth	r3, r3
 80114e6:	4313      	orrs	r3, r2
 80114e8:	b21a      	sxth	r2, r3
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 80114ea:	6939      	ldr	r1, [r7, #16]
 80114ec:	6a3b      	ldr	r3, [r7, #32]
 80114ee:	440b      	add	r3, r1
 80114f0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80114f4:	4927      	ldr	r1, [pc, #156]	; (8011594 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2f4>)
 80114f6:	5ccb      	ldrb	r3, [r1, r3]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 80114f8:	08db      	lsrs	r3, r3, #3
 80114fa:	b2db      	uxtb	r3, r3
 80114fc:	b21b      	sxth	r3, r3
 80114fe:	4313      	orrs	r3, r2
 8011500:	b21a      	sxth	r2, r3
            *((__IO uint16_t *)(pOutAddr2 +2)) =
 8011502:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011504:	3302      	adds	r3, #2
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8011506:	b292      	uxth	r2, r2
            *((__IO uint16_t *)(pOutAddr2 +2)) =
 8011508:	801a      	strh	r2, [r3, #0]
#endif /* JPEG_RGB_FORMAT */

            pOutAddr += JPEG_BYTES_PER_PIXEL * 2;
 801150a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801150c:	3304      	adds	r3, #4
 801150e:	643b      	str	r3, [r7, #64]	; 0x40
            pOutAddr2 += JPEG_BYTES_PER_PIXEL * 2;
 8011510:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011512:	3304      	adds	r3, #4
 8011514:	63fb      	str	r3, [r7, #60]	; 0x3c

            pChrom++;
 8011516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011518:	3301      	adds	r3, #1
 801151a:	63bb      	str	r3, [r7, #56]	; 0x38
          for(j=0; j < 8; j+=2)
 801151c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801151e:	3302      	adds	r3, #2
 8011520:	653b      	str	r3, [r7, #80]	; 0x50
 8011522:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011524:	2b07      	cmp	r3, #7
 8011526:	f67f af1b 	bls.w	8011360 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xc0>
          }
          pLum += 64;
 801152a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801152c:	3340      	adds	r3, #64	; 0x40
 801152e:	637b      	str	r3, [r7, #52]	; 0x34
        for(k= 0; k<2; k++)
 8011530:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011532:	3301      	adds	r3, #1
 8011534:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011536:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011538:	2b01      	cmp	r3, #1
 801153a:	f67f af09 	bls.w	8011350 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xb0>
        }

        pLum = pLum - 128 + 16;
 801153e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011540:	3b70      	subs	r3, #112	; 0x70
 8011542:	637b      	str	r3, [r7, #52]	; 0x34

        refline += 2*JPEG_ConvertorParams.ScaledWidth;
 8011544:	4b14      	ldr	r3, [pc, #80]	; (8011598 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2f8>)
 8011546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011548:	005b      	lsls	r3, r3, #1
 801154a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801154c:	4413      	add	r3, r2
 801154e:	647b      	str	r3, [r7, #68]	; 0x44
    for(i= 0; i <  16; i+=2)
 8011550:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011552:	3302      	adds	r3, #2
 8011554:	657b      	str	r3, [r7, #84]	; 0x54
 8011556:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011558:	2b0f      	cmp	r3, #15
 801155a:	f67f aedc 	bls.w	8011316 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x76>
      }
    }

    pInBuffer +=  YCBCR_420_BLOCK_SIZE;
 801155e:	68fb      	ldr	r3, [r7, #12]
 8011560:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8011564:	60fb      	str	r3, [r7, #12]
  while(currentMCU < (numberMCU + BlockIndex))
 8011566:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	4413      	add	r3, r2
 801156c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801156e:	429a      	cmp	r2, r3
 8011570:	f4ff aea6 	bcc.w	80112c0 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x20>
  }
  return numberMCU;
 8011574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8011576:	4618      	mov	r0, r3
 8011578:	375c      	adds	r7, #92	; 0x5c
 801157a:	46bd      	mov	sp, r7
 801157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011580:	4770      	bx	lr
 8011582:	bf00      	nop
 8011584:	2001f790 	.word	0x2001f790
 8011588:	2001f390 	.word	0x2001f390
 801158c:	2001fb90 	.word	0x2001fb90
 8011590:	2001ff90 	.word	0x2001ff90
 8011594:	080271d8 	.word	0x080271d8
 8011598:	2001f350 	.word	0x2001f350

0801159c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr422_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
 801159c:	b480      	push	{r7}
 801159e:	b097      	sub	sp, #92	; 0x5c
 80115a0:	af00      	add	r7, sp, #0
 80115a2:	60f8      	str	r0, [r7, #12]
 80115a4:	60b9      	str	r1, [r7, #8]
 80115a6:	607a      	str	r2, [r7, #4]
 80115a8:	603b      	str	r3, [r7, #0]
  int32_t c_red, c_blue, c_green;

  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;

  numberMCU = DataCount / YCBCR_422_BLOCK_SIZE;
 80115aa:	683b      	ldr	r3, [r7, #0]
 80115ac:	0a1b      	lsrs	r3, r3, #8
 80115ae:	637b      	str	r3, [r7, #52]	; 0x34
  currentMCU = BlockIndex;
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	64bb      	str	r3, [r7, #72]	; 0x48

  while(currentMCU < (numberMCU + BlockIndex))
 80115b4:	e0d9      	b.n	801176a <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1ce>
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
 80115b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80115b8:	011a      	lsls	r2, r3, #4
 80115ba:	4b73      	ldr	r3, [pc, #460]	; (8011788 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1ec>)
 80115bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80115be:	fbb2 f3f3 	udiv	r3, r2, r3
 80115c2:	00db      	lsls	r3, r3, #3
 80115c4:	633b      	str	r3, [r7, #48]	; 0x30

    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
 80115c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80115c8:	011b      	lsls	r3, r3, #4
 80115ca:	4a6f      	ldr	r2, [pc, #444]	; (8011788 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1ec>)
 80115cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80115ce:	fbb3 f1f2 	udiv	r1, r3, r2
 80115d2:	fb01 f202 	mul.w	r2, r1, r2
 80115d6:	1a9b      	subs	r3, r3, r2
 80115d8:	62fb      	str	r3, [r7, #44]	; 0x2c

    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 80115da:	4b6b      	ldr	r3, [pc, #428]	; (8011788 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1ec>)
 80115dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80115de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80115e0:	fb03 f202 	mul.w	r2, r3, r2
 80115e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115e6:	005b      	lsls	r3, r3, #1
 80115e8:	4413      	add	r3, r2
 80115ea:	647b      	str	r3, [r7, #68]	; 0x44

    currentMCU++;
 80115ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80115ee:	3301      	adds	r3, #1
 80115f0:	64bb      	str	r3, [r7, #72]	; 0x48

    pChrom = pInBuffer + 128; /* pChroma = pInBuffer + 2*64 */
 80115f2:	68fb      	ldr	r3, [r7, #12]
 80115f4:	3380      	adds	r3, #128	; 0x80
 80115f6:	63fb      	str	r3, [r7, #60]	; 0x3c

    pLum = pInBuffer;
 80115f8:	68fb      	ldr	r3, [r7, #12]
 80115fa:	63bb      	str	r3, [r7, #56]	; 0x38

    for(i= 0; i <  8; i++)
 80115fc:	2300      	movs	r3, #0
 80115fe:	657b      	str	r3, [r7, #84]	; 0x54
 8011600:	e0ab      	b.n	801175a <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1be>
    {
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8011602:	4b61      	ldr	r3, [pc, #388]	; (8011788 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1ec>)
 8011604:	691b      	ldr	r3, [r3, #16]
 8011606:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011608:	429a      	cmp	r2, r3
 801160a:	f080 80a3 	bcs.w	8011754 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1b8>
      {
        pOutAddr = pOutBuffer + refline;
 801160e:	68ba      	ldr	r2, [r7, #8]
 8011610:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011612:	4413      	add	r3, r2
 8011614:	643b      	str	r3, [r7, #64]	; 0x40

        for(k= 0; k<2; k++)
 8011616:	2300      	movs	r3, #0
 8011618:	64fb      	str	r3, [r7, #76]	; 0x4c
 801161a:	e08f      	b.n	801173c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1a0>
        {
          for(j=0; j < 8; j+=2)
 801161c:	2300      	movs	r3, #0
 801161e:	653b      	str	r3, [r7, #80]	; 0x50
 8011620:	e082      	b.n	8011728 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x18c>
          {
            cbcomp = (int32_t)(*(pChrom));
 8011622:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011624:	781b      	ldrb	r3, [r3, #0]
 8011626:	62bb      	str	r3, [r7, #40]	; 0x28
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 8011628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801162a:	009b      	lsls	r3, r3, #2
 801162c:	4a57      	ldr	r2, [pc, #348]	; (801178c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1f0>)
 801162e:	4413      	add	r3, r2
 8011630:	681b      	ldr	r3, [r3, #0]
 8011632:	627b      	str	r3, [r7, #36]	; 0x24

            crcomp = (int32_t)(*(pChrom + 64));
 8011634:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011636:	3340      	adds	r3, #64	; 0x40
 8011638:	781b      	ldrb	r3, [r3, #0]
 801163a:	623b      	str	r3, [r7, #32]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
 801163c:	6a3b      	ldr	r3, [r7, #32]
 801163e:	009b      	lsls	r3, r3, #2
 8011640:	4a53      	ldr	r2, [pc, #332]	; (8011790 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1f4>)
 8011642:	4413      	add	r3, r2
 8011644:	681b      	ldr	r3, [r3, #0]
 8011646:	61fb      	str	r3, [r7, #28]

            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
 8011648:	6a3b      	ldr	r3, [r7, #32]
 801164a:	009b      	lsls	r3, r3, #2
 801164c:	4a51      	ldr	r2, [pc, #324]	; (8011794 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1f8>)
 801164e:	4413      	add	r3, r2
 8011650:	681a      	ldr	r2, [r3, #0]
 8011652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011654:	009b      	lsls	r3, r3, #2
 8011656:	4950      	ldr	r1, [pc, #320]	; (8011798 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1fc>)
 8011658:	440b      	add	r3, r1
 801165a:	681b      	ldr	r3, [r3, #0]
 801165c:	4413      	add	r3, r2
 801165e:	141b      	asrs	r3, r3, #16
 8011660:	61bb      	str	r3, [r7, #24]
            pOutAddr[3 + JPEG_GREEN_OFFSET/8] = CLAMP(ycomp + c_green);
            pOutAddr[3 + JPEG_BLUE_OFFSET/8] = CLAMP(ycomp + c_blue);

#elif (JPEG_RGB_FORMAT == JPEG_RGB565)

            ycomp = (int32_t)(*(pLum +j));
 8011662:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011664:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011666:	4413      	add	r3, r2
 8011668:	781b      	ldrb	r3, [r3, #0]
 801166a:	617b      	str	r3, [r7, #20]

            *(__IO uint16_t *)pOutAddr =
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 801166c:	697a      	ldr	r2, [r7, #20]
 801166e:	69fb      	ldr	r3, [r7, #28]
 8011670:	4413      	add	r3, r2
 8011672:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8011676:	4a49      	ldr	r2, [pc, #292]	; (801179c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x200>)
 8011678:	5cd3      	ldrb	r3, [r2, r3]
 801167a:	08db      	lsrs	r3, r3, #3
 801167c:	b2db      	uxtb	r3, r3
 801167e:	02db      	lsls	r3, r3, #11
 8011680:	b21a      	sxth	r2, r3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8011682:	6979      	ldr	r1, [r7, #20]
 8011684:	69bb      	ldr	r3, [r7, #24]
 8011686:	440b      	add	r3, r1
 8011688:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801168c:	4943      	ldr	r1, [pc, #268]	; (801179c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x200>)
 801168e:	5ccb      	ldrb	r3, [r1, r3]
 8011690:	089b      	lsrs	r3, r3, #2
 8011692:	b2db      	uxtb	r3, r3
 8011694:	015b      	lsls	r3, r3, #5
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8011696:	b21b      	sxth	r3, r3
 8011698:	4313      	orrs	r3, r2
 801169a:	b21a      	sxth	r2, r3
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 801169c:	6979      	ldr	r1, [r7, #20]
 801169e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116a0:	440b      	add	r3, r1
 80116a2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80116a6:	493d      	ldr	r1, [pc, #244]	; (801179c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x200>)
 80116a8:	5ccb      	ldrb	r3, [r1, r3]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 80116aa:	08db      	lsrs	r3, r3, #3
 80116ac:	b2db      	uxtb	r3, r3
 80116ae:	b21b      	sxth	r3, r3
 80116b0:	4313      	orrs	r3, r2
 80116b2:	b21b      	sxth	r3, r3
 80116b4:	b29a      	uxth	r2, r3
            *(__IO uint16_t *)pOutAddr =
 80116b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80116b8:	801a      	strh	r2, [r3, #0]
            /**********/
            ycomp = (int32_t)(*(pLum +j +1));
 80116ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80116bc:	3301      	adds	r3, #1
 80116be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80116c0:	4413      	add	r3, r2
 80116c2:	781b      	ldrb	r3, [r3, #0]
 80116c4:	617b      	str	r3, [r7, #20]

            *((__IO uint16_t *)(pOutAddr + 2)) =
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 80116c6:	697a      	ldr	r2, [r7, #20]
 80116c8:	69fb      	ldr	r3, [r7, #28]
 80116ca:	4413      	add	r3, r2
 80116cc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80116d0:	4a32      	ldr	r2, [pc, #200]	; (801179c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x200>)
 80116d2:	5cd3      	ldrb	r3, [r2, r3]
 80116d4:	08db      	lsrs	r3, r3, #3
 80116d6:	b2db      	uxtb	r3, r3
 80116d8:	02db      	lsls	r3, r3, #11
 80116da:	b21a      	sxth	r2, r3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 80116dc:	6979      	ldr	r1, [r7, #20]
 80116de:	69bb      	ldr	r3, [r7, #24]
 80116e0:	440b      	add	r3, r1
 80116e2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80116e6:	492d      	ldr	r1, [pc, #180]	; (801179c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x200>)
 80116e8:	5ccb      	ldrb	r3, [r1, r3]
 80116ea:	089b      	lsrs	r3, r3, #2
 80116ec:	b2db      	uxtb	r3, r3
 80116ee:	015b      	lsls	r3, r3, #5
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 80116f0:	b21b      	sxth	r3, r3
 80116f2:	4313      	orrs	r3, r2
 80116f4:	b21a      	sxth	r2, r3
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 80116f6:	6979      	ldr	r1, [r7, #20]
 80116f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116fa:	440b      	add	r3, r1
 80116fc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8011700:	4926      	ldr	r1, [pc, #152]	; (801179c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x200>)
 8011702:	5ccb      	ldrb	r3, [r1, r3]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8011704:	08db      	lsrs	r3, r3, #3
 8011706:	b2db      	uxtb	r3, r3
 8011708:	b21b      	sxth	r3, r3
 801170a:	4313      	orrs	r3, r2
 801170c:	b21a      	sxth	r2, r3
            *((__IO uint16_t *)(pOutAddr + 2)) =
 801170e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011710:	3302      	adds	r3, #2
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8011712:	b292      	uxth	r2, r2
            *((__IO uint16_t *)(pOutAddr + 2)) =
 8011714:	801a      	strh	r2, [r3, #0]

#endif /* JPEG_RGB_FORMAT*/

            pOutAddr += JPEG_BYTES_PER_PIXEL * 2;
 8011716:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011718:	3304      	adds	r3, #4
 801171a:	643b      	str	r3, [r7, #64]	; 0x40

            pChrom++;
 801171c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801171e:	3301      	adds	r3, #1
 8011720:	63fb      	str	r3, [r7, #60]	; 0x3c
          for(j=0; j < 8; j+=2)
 8011722:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011724:	3302      	adds	r3, #2
 8011726:	653b      	str	r3, [r7, #80]	; 0x50
 8011728:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801172a:	2b07      	cmp	r3, #7
 801172c:	f67f af79 	bls.w	8011622 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x86>
          }
          pLum += 64;
 8011730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011732:	3340      	adds	r3, #64	; 0x40
 8011734:	63bb      	str	r3, [r7, #56]	; 0x38
        for(k= 0; k<2; k++)
 8011736:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011738:	3301      	adds	r3, #1
 801173a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801173c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801173e:	2b01      	cmp	r3, #1
 8011740:	f67f af6c 	bls.w	801161c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x80>
        }

        pLum = pLum - 128 + 8;
 8011744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011746:	3b78      	subs	r3, #120	; 0x78
 8011748:	63bb      	str	r3, [r7, #56]	; 0x38

        refline += JPEG_ConvertorParams.ScaledWidth;
 801174a:	4b0f      	ldr	r3, [pc, #60]	; (8011788 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1ec>)
 801174c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801174e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011750:	4413      	add	r3, r2
 8011752:	647b      	str	r3, [r7, #68]	; 0x44
    for(i= 0; i <  8; i++)
 8011754:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011756:	3301      	adds	r3, #1
 8011758:	657b      	str	r3, [r7, #84]	; 0x54
 801175a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801175c:	2b07      	cmp	r3, #7
 801175e:	f67f af50 	bls.w	8011602 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x66>
      }
    }

    pInBuffer +=  YCBCR_422_BLOCK_SIZE;
 8011762:	68fb      	ldr	r3, [r7, #12]
 8011764:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8011768:	60fb      	str	r3, [r7, #12]
  while(currentMCU < (numberMCU + BlockIndex))
 801176a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	4413      	add	r3, r2
 8011770:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011772:	429a      	cmp	r2, r3
 8011774:	f4ff af1f 	bcc.w	80115b6 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1a>
  }
  return numberMCU;
 8011778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801177a:	4618      	mov	r0, r3
 801177c:	375c      	adds	r7, #92	; 0x5c
 801177e:	46bd      	mov	sp, r7
 8011780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011784:	4770      	bx	lr
 8011786:	bf00      	nop
 8011788:	2001f350 	.word	0x2001f350
 801178c:	2001f790 	.word	0x2001f790
 8011790:	2001f390 	.word	0x2001f390
 8011794:	2001fb90 	.word	0x2001fb90
 8011798:	2001ff90 	.word	0x2001ff90
 801179c:	080271d8 	.word	0x080271d8

080117a0 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr444_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
 80117a0:	b480      	push	{r7}
 80117a2:	b095      	sub	sp, #84	; 0x54
 80117a4:	af00      	add	r7, sp, #0
 80117a6:	60f8      	str	r0, [r7, #12]
 80117a8:	60b9      	str	r1, [r7, #8]
 80117aa:	607a      	str	r2, [r7, #4]
 80117ac:	603b      	str	r3, [r7, #0]
  int32_t c_red, c_blue, c_green;

  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;

  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
 80117ae:	683b      	ldr	r3, [r7, #0]
 80117b0:	4a58      	ldr	r2, [pc, #352]	; (8011914 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x174>)
 80117b2:	fba2 2303 	umull	r2, r3, r2, r3
 80117b6:	09db      	lsrs	r3, r3, #7
 80117b8:	633b      	str	r3, [r7, #48]	; 0x30
  currentMCU = BlockIndex;
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	647b      	str	r3, [r7, #68]	; 0x44

  while(currentMCU < (numberMCU + BlockIndex))
 80117be:	e09a      	b.n	80118f6 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x156>
  {

    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 80117c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80117c2:	00da      	lsls	r2, r3, #3
 80117c4:	4b54      	ldr	r3, [pc, #336]	; (8011918 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x178>)
 80117c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80117c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80117cc:	00db      	lsls	r3, r3, #3
 80117ce:	62fb      	str	r3, [r7, #44]	; 0x2c

    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 80117d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80117d2:	00db      	lsls	r3, r3, #3
 80117d4:	4a50      	ldr	r2, [pc, #320]	; (8011918 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x178>)
 80117d6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80117d8:	fbb3 f1f2 	udiv	r1, r3, r2
 80117dc:	fb01 f202 	mul.w	r2, r1, r2
 80117e0:	1a9b      	subs	r3, r3, r2
 80117e2:	62bb      	str	r3, [r7, #40]	; 0x28

    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 80117e4:	4b4c      	ldr	r3, [pc, #304]	; (8011918 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x178>)
 80117e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80117e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80117ea:	fb03 f202 	mul.w	r2, r3, r2
 80117ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117f0:	005b      	lsls	r3, r3, #1
 80117f2:	4413      	add	r3, r2
 80117f4:	643b      	str	r3, [r7, #64]	; 0x40

    currentMCU++;
 80117f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80117f8:	3301      	adds	r3, #1
 80117fa:	647b      	str	r3, [r7, #68]	; 0x44

    pChrom = pInBuffer + 64; /* pChroma = pInBuffer + 4*64 */
 80117fc:	68fb      	ldr	r3, [r7, #12]
 80117fe:	3340      	adds	r3, #64	; 0x40
 8011800:	63bb      	str	r3, [r7, #56]	; 0x38

    pLum = pInBuffer;
 8011802:	68fb      	ldr	r3, [r7, #12]
 8011804:	637b      	str	r3, [r7, #52]	; 0x34

    for(i= 0; i <  8; i++)
 8011806:	2300      	movs	r3, #0
 8011808:	64fb      	str	r3, [r7, #76]	; 0x4c
 801180a:	e06e      	b.n	80118ea <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x14a>
    {
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 801180c:	4b42      	ldr	r3, [pc, #264]	; (8011918 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x178>)
 801180e:	691b      	ldr	r3, [r3, #16]
 8011810:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011812:	429a      	cmp	r2, r3
 8011814:	d266      	bcs.n	80118e4 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x144>
      {
        pOutAddr = pOutBuffer+ refline;
 8011816:	68ba      	ldr	r2, [r7, #8]
 8011818:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801181a:	4413      	add	r3, r2
 801181c:	63fb      	str	r3, [r7, #60]	; 0x3c

          for(j=0; j < 8; j++)
 801181e:	2300      	movs	r3, #0
 8011820:	64bb      	str	r3, [r7, #72]	; 0x48
 8011822:	e054      	b.n	80118ce <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x12e>
          {
            cbcomp = (int32_t)(*pChrom);
 8011824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011826:	781b      	ldrb	r3, [r3, #0]
 8011828:	627b      	str	r3, [r7, #36]	; 0x24
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 801182a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801182c:	009b      	lsls	r3, r3, #2
 801182e:	4a3b      	ldr	r2, [pc, #236]	; (801191c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x17c>)
 8011830:	4413      	add	r3, r2
 8011832:	681b      	ldr	r3, [r3, #0]
 8011834:	623b      	str	r3, [r7, #32]

            crcomp = (int32_t)(*(pChrom + 64));
 8011836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011838:	3340      	adds	r3, #64	; 0x40
 801183a:	781b      	ldrb	r3, [r3, #0]
 801183c:	61fb      	str	r3, [r7, #28]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
 801183e:	69fb      	ldr	r3, [r7, #28]
 8011840:	009b      	lsls	r3, r3, #2
 8011842:	4a37      	ldr	r2, [pc, #220]	; (8011920 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x180>)
 8011844:	4413      	add	r3, r2
 8011846:	681b      	ldr	r3, [r3, #0]
 8011848:	61bb      	str	r3, [r7, #24]

            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
 801184a:	69fb      	ldr	r3, [r7, #28]
 801184c:	009b      	lsls	r3, r3, #2
 801184e:	4a35      	ldr	r2, [pc, #212]	; (8011924 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x184>)
 8011850:	4413      	add	r3, r2
 8011852:	681a      	ldr	r2, [r3, #0]
 8011854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011856:	009b      	lsls	r3, r3, #2
 8011858:	4933      	ldr	r1, [pc, #204]	; (8011928 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x188>)
 801185a:	440b      	add	r3, r1
 801185c:	681b      	ldr	r3, [r3, #0]
 801185e:	4413      	add	r3, r2
 8011860:	141b      	asrs	r3, r3, #16
 8011862:	617b      	str	r3, [r7, #20]
            pOutAddr[JPEG_GREEN_OFFSET/8] = CLAMP(ycomp + c_green);
            pOutAddr[JPEG_BLUE_OFFSET/8] = CLAMP(ycomp + c_blue);

#elif (JPEG_RGB_FORMAT == JPEG_RGB565)

            ycomp = (int32_t)(*(pLum +j));
 8011864:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011866:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011868:	4413      	add	r3, r2
 801186a:	781b      	ldrb	r3, [r3, #0]
 801186c:	613b      	str	r3, [r7, #16]

            *(__IO uint16_t *)pOutAddr =
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 801186e:	693a      	ldr	r2, [r7, #16]
 8011870:	69bb      	ldr	r3, [r7, #24]
 8011872:	4413      	add	r3, r2
 8011874:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8011878:	4a2c      	ldr	r2, [pc, #176]	; (801192c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x18c>)
 801187a:	5cd3      	ldrb	r3, [r2, r3]
 801187c:	08db      	lsrs	r3, r3, #3
 801187e:	b2db      	uxtb	r3, r3
 8011880:	02db      	lsls	r3, r3, #11
 8011882:	b21a      	sxth	r2, r3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8011884:	6939      	ldr	r1, [r7, #16]
 8011886:	697b      	ldr	r3, [r7, #20]
 8011888:	440b      	add	r3, r1
 801188a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801188e:	4927      	ldr	r1, [pc, #156]	; (801192c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x18c>)
 8011890:	5ccb      	ldrb	r3, [r1, r3]
 8011892:	089b      	lsrs	r3, r3, #2
 8011894:	b2db      	uxtb	r3, r3
 8011896:	015b      	lsls	r3, r3, #5
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8011898:	b21b      	sxth	r3, r3
 801189a:	4313      	orrs	r3, r2
 801189c:	b21a      	sxth	r2, r3
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 801189e:	6939      	ldr	r1, [r7, #16]
 80118a0:	6a3b      	ldr	r3, [r7, #32]
 80118a2:	440b      	add	r3, r1
 80118a4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80118a8:	4920      	ldr	r1, [pc, #128]	; (801192c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x18c>)
 80118aa:	5ccb      	ldrb	r3, [r1, r3]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 80118ac:	08db      	lsrs	r3, r3, #3
 80118ae:	b2db      	uxtb	r3, r3
 80118b0:	b21b      	sxth	r3, r3
 80118b2:	4313      	orrs	r3, r2
 80118b4:	b21b      	sxth	r3, r3
 80118b6:	b29a      	uxth	r2, r3
            *(__IO uint16_t *)pOutAddr =
 80118b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80118ba:	801a      	strh	r2, [r3, #0]

#endif /* JPEG_RGB_FORMAT */

            pOutAddr += JPEG_BYTES_PER_PIXEL;
 80118bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80118be:	3302      	adds	r3, #2
 80118c0:	63fb      	str	r3, [r7, #60]	; 0x3c

            pChrom++;
 80118c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118c4:	3301      	adds	r3, #1
 80118c6:	63bb      	str	r3, [r7, #56]	; 0x38
          for(j=0; j < 8; j++)
 80118c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80118ca:	3301      	adds	r3, #1
 80118cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80118ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80118d0:	2b07      	cmp	r3, #7
 80118d2:	d9a7      	bls.n	8011824 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x84>
          }
          pLum += 8;
 80118d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80118d6:	3308      	adds	r3, #8
 80118d8:	637b      	str	r3, [r7, #52]	; 0x34

        refline += JPEG_ConvertorParams.ScaledWidth;
 80118da:	4b0f      	ldr	r3, [pc, #60]	; (8011918 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x178>)
 80118dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80118de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80118e0:	4413      	add	r3, r2
 80118e2:	643b      	str	r3, [r7, #64]	; 0x40
    for(i= 0; i <  8; i++)
 80118e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80118e6:	3301      	adds	r3, #1
 80118e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80118ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80118ec:	2b07      	cmp	r3, #7
 80118ee:	d98d      	bls.n	801180c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x6c>
      }
    }

    pInBuffer +=  YCBCR_444_BLOCK_SIZE;
 80118f0:	68fb      	ldr	r3, [r7, #12]
 80118f2:	33c0      	adds	r3, #192	; 0xc0
 80118f4:	60fb      	str	r3, [r7, #12]
  while(currentMCU < (numberMCU + BlockIndex))
 80118f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	4413      	add	r3, r2
 80118fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80118fe:	429a      	cmp	r2, r3
 8011900:	f4ff af5e 	bcc.w	80117c0 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x20>
  }
  return numberMCU;
 8011904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8011906:	4618      	mov	r0, r3
 8011908:	3754      	adds	r7, #84	; 0x54
 801190a:	46bd      	mov	sp, r7
 801190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011910:	4770      	bx	lr
 8011912:	bf00      	nop
 8011914:	aaaaaaab 	.word	0xaaaaaaab
 8011918:	2001f350 	.word	0x2001f350
 801191c:	2001f790 	.word	0x2001f790
 8011920:	2001f390 	.word	0x2001f390
 8011924:	2001fb90 	.word	0x2001fb90
 8011928:	2001ff90 	.word	0x2001ff90
 801192c:	080271d8 	.word	0x080271d8

08011930 <JPEG_MCU_Gray_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_Gray_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
 8011930:	b480      	push	{r7}
 8011932:	b08f      	sub	sp, #60	; 0x3c
 8011934:	af00      	add	r7, sp, #0
 8011936:	60f8      	str	r0, [r7, #12]
 8011938:	60b9      	str	r1, [r7, #8]
 801193a:	607a      	str	r2, [r7, #4]
 801193c:	603b      	str	r3, [r7, #0]
  uint32_t refline;

  uint32_t i,j, ySample;
  uint8_t *pOutAddr,  *pLum;

  numberMCU = DataCount / GRAY_444_BLOCK_SIZE;
 801193e:	683b      	ldr	r3, [r7, #0]
 8011940:	099b      	lsrs	r3, r3, #6
 8011942:	61fb      	str	r3, [r7, #28]
  currentMCU = BlockIndex;
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	637b      	str	r3, [r7, #52]	; 0x34

  while(currentMCU < (numberMCU + BlockIndex))
 8011948:	e05e      	b.n	8011a08 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xd8>
  {
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 801194a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801194c:	00da      	lsls	r2, r3, #3
 801194e:	4b35      	ldr	r3, [pc, #212]	; (8011a24 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xf4>)
 8011950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011952:	fbb2 f3f3 	udiv	r3, r2, r3
 8011956:	00db      	lsls	r3, r3, #3
 8011958:	61bb      	str	r3, [r7, #24]

    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 801195a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801195c:	00db      	lsls	r3, r3, #3
 801195e:	4a31      	ldr	r2, [pc, #196]	; (8011a24 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xf4>)
 8011960:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8011962:	fbb3 f1f2 	udiv	r1, r3, r2
 8011966:	fb01 f202 	mul.w	r2, r1, r2
 801196a:	1a9b      	subs	r3, r3, r2
 801196c:	617b      	str	r3, [r7, #20]

    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 801196e:	4b2d      	ldr	r3, [pc, #180]	; (8011a24 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xf4>)
 8011970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011972:	69ba      	ldr	r2, [r7, #24]
 8011974:	fb03 f202 	mul.w	r2, r3, r2
 8011978:	697b      	ldr	r3, [r7, #20]
 801197a:	005b      	lsls	r3, r3, #1
 801197c:	4413      	add	r3, r2
 801197e:	633b      	str	r3, [r7, #48]	; 0x30

    currentMCU++;
 8011980:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011982:	3301      	adds	r3, #1
 8011984:	637b      	str	r3, [r7, #52]	; 0x34

    pLum = pInBuffer;
 8011986:	68fb      	ldr	r3, [r7, #12]
 8011988:	623b      	str	r3, [r7, #32]

    for(i= 0; i <  8; i++)
 801198a:	2300      	movs	r3, #0
 801198c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801198e:	e035      	b.n	80119fc <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xcc>
    {
      pOutAddr = pOutBuffer + refline;
 8011990:	68ba      	ldr	r2, [r7, #8]
 8011992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011994:	4413      	add	r3, r2
 8011996:	627b      	str	r3, [r7, #36]	; 0x24
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8011998:	4b22      	ldr	r3, [pc, #136]	; (8011a24 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xf4>)
 801199a:	691b      	ldr	r3, [r3, #16]
 801199c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801199e:	429a      	cmp	r2, r3
 80119a0:	d229      	bcs.n	80119f6 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xc6>
      {
        for(j=0; j < 8; j++)
 80119a2:	2300      	movs	r3, #0
 80119a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80119a6:	e01e      	b.n	80119e6 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xb6>
        {
          ySample =   (uint32_t)(*pLum);
 80119a8:	6a3b      	ldr	r3, [r7, #32]
 80119aa:	781b      	ldrb	r3, [r3, #0]
 80119ac:	613b      	str	r3, [r7, #16]
          pOutAddr[1] =  ySample;
          pOutAddr[2] =  ySample;

#elif (JPEG_RGB_FORMAT == JPEG_RGB565)

          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);
 80119ae:	693b      	ldr	r3, [r7, #16]
 80119b0:	08db      	lsrs	r3, r3, #3
 80119b2:	b29b      	uxth	r3, r3
 80119b4:	02db      	lsls	r3, r3, #11
 80119b6:	b29a      	uxth	r2, r3
 80119b8:	693b      	ldr	r3, [r7, #16]
 80119ba:	089b      	lsrs	r3, r3, #2
 80119bc:	b29b      	uxth	r3, r3
 80119be:	015b      	lsls	r3, r3, #5
 80119c0:	b29b      	uxth	r3, r3
 80119c2:	4313      	orrs	r3, r2
 80119c4:	b29a      	uxth	r2, r3
 80119c6:	693b      	ldr	r3, [r7, #16]
 80119c8:	08db      	lsrs	r3, r3, #3
 80119ca:	b29b      	uxth	r3, r3
 80119cc:	4313      	orrs	r3, r2
 80119ce:	b29a      	uxth	r2, r3
 80119d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119d2:	801a      	strh	r2, [r3, #0]

#endif /* JPEG_RGB_FORMAT */

          pOutAddr += JPEG_BYTES_PER_PIXEL;
 80119d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119d6:	3302      	adds	r3, #2
 80119d8:	627b      	str	r3, [r7, #36]	; 0x24
          pLum++;
 80119da:	6a3b      	ldr	r3, [r7, #32]
 80119dc:	3301      	adds	r3, #1
 80119de:	623b      	str	r3, [r7, #32]
        for(j=0; j < 8; j++)
 80119e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119e2:	3301      	adds	r3, #1
 80119e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80119e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119e8:	2b07      	cmp	r3, #7
 80119ea:	d9dd      	bls.n	80119a8 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x78>
        }

        refline += JPEG_ConvertorParams.ScaledWidth;
 80119ec:	4b0d      	ldr	r3, [pc, #52]	; (8011a24 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xf4>)
 80119ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80119f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80119f2:	4413      	add	r3, r2
 80119f4:	633b      	str	r3, [r7, #48]	; 0x30
    for(i= 0; i <  8; i++)
 80119f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119f8:	3301      	adds	r3, #1
 80119fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80119fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119fe:	2b07      	cmp	r3, #7
 8011a00:	d9c6      	bls.n	8011990 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x60>
      }
    }

    pInBuffer +=  GRAY_444_BLOCK_SIZE;
 8011a02:	68fb      	ldr	r3, [r7, #12]
 8011a04:	3340      	adds	r3, #64	; 0x40
 8011a06:	60fb      	str	r3, [r7, #12]
  while(currentMCU < (numberMCU + BlockIndex))
 8011a08:	69fa      	ldr	r2, [r7, #28]
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	4413      	add	r3, r2
 8011a0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011a10:	429a      	cmp	r2, r3
 8011a12:	d39a      	bcc.n	801194a <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x1a>
  }
  return numberMCU;
 8011a14:	69fb      	ldr	r3, [r7, #28]
}
 8011a16:	4618      	mov	r0, r3
 8011a18:	373c      	adds	r7, #60	; 0x3c
 8011a1a:	46bd      	mov	sp, r7
 8011a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a20:	4770      	bx	lr
 8011a22:	bf00      	nop
 8011a24:	2001f350 	.word	0x2001f350

08011a28 <JPEG_MCU_YCCK_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCCK_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
 8011a28:	b480      	push	{r7}
 8011a2a:	b093      	sub	sp, #76	; 0x4c
 8011a2c:	af00      	add	r7, sp, #0
 8011a2e:	60f8      	str	r0, [r7, #12]
 8011a30:	60b9      	str	r1, [r7, #8]
 8011a32:	607a      	str	r2, [r7, #4]
 8011a34:	603b      	str	r3, [r7, #0]

  int32_t c_red, c_blue, c_green;

  uint8_t *pOutAddr, *pChrom;

  numberMCU = DataCount / CMYK_444_BLOCK_SIZE;
 8011a36:	683b      	ldr	r3, [r7, #0]
 8011a38:	0a1b      	lsrs	r3, r3, #8
 8011a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  currentMCU = BlockIndex;
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	63fb      	str	r3, [r7, #60]	; 0x3c

  while(currentMCU < (numberMCU + BlockIndex))
 8011a40:	e08b      	b.n	8011b5a <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x132>
  {

    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 8011a42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011a44:	00da      	lsls	r2, r3, #3
 8011a46:	4b4c      	ldr	r3, [pc, #304]	; (8011b78 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x150>)
 8011a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8011a4e:	00db      	lsls	r3, r3, #3
 8011a50:	62bb      	str	r3, [r7, #40]	; 0x28

    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 8011a52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011a54:	00db      	lsls	r3, r3, #3
 8011a56:	4a48      	ldr	r2, [pc, #288]	; (8011b78 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x150>)
 8011a58:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8011a5a:	fbb3 f1f2 	udiv	r1, r3, r2
 8011a5e:	fb01 f202 	mul.w	r2, r1, r2
 8011a62:	1a9b      	subs	r3, r3, r2
 8011a64:	627b      	str	r3, [r7, #36]	; 0x24

    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8011a66:	4b44      	ldr	r3, [pc, #272]	; (8011b78 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x150>)
 8011a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011a6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011a6c:	fb03 f202 	mul.w	r2, r3, r2
 8011a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a72:	005b      	lsls	r3, r3, #1
 8011a74:	4413      	add	r3, r2
 8011a76:	63bb      	str	r3, [r7, #56]	; 0x38

    currentMCU++;
 8011a78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011a7a:	3301      	adds	r3, #1
 8011a7c:	63fb      	str	r3, [r7, #60]	; 0x3c

    pChrom = pInBuffer;
 8011a7e:	68fb      	ldr	r3, [r7, #12]
 8011a80:	633b      	str	r3, [r7, #48]	; 0x30

    for(i= 0; i <  8; i++)
 8011a82:	2300      	movs	r3, #0
 8011a84:	647b      	str	r3, [r7, #68]	; 0x44
 8011a86:	e061      	b.n	8011b4c <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x124>
    {
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8011a88:	4b3b      	ldr	r3, [pc, #236]	; (8011b78 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x150>)
 8011a8a:	691b      	ldr	r3, [r3, #16]
 8011a8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011a8e:	429a      	cmp	r2, r3
 8011a90:	d259      	bcs.n	8011b46 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x11e>
      {
        pOutAddr = pOutBuffer+ refline;
 8011a92:	68ba      	ldr	r2, [r7, #8]
 8011a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a96:	4413      	add	r3, r2
 8011a98:	637b      	str	r3, [r7, #52]	; 0x34

          for(j=0; j < 8; j++)
 8011a9a:	2300      	movs	r3, #0
 8011a9c:	643b      	str	r3, [r7, #64]	; 0x40
 8011a9e:	e04a      	b.n	8011b36 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x10e>
          {
            color_k = (int32_t)(*(pChrom + 192));
 8011aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011aa2:	33c0      	adds	r3, #192	; 0xc0
 8011aa4:	781b      	ldrb	r3, [r3, #0]
 8011aa6:	623b      	str	r3, [r7, #32]
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
 8011aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011aaa:	781b      	ldrb	r3, [r3, #0]
 8011aac:	461a      	mov	r2, r3
 8011aae:	6a3b      	ldr	r3, [r7, #32]
 8011ab0:	fb02 f303 	mul.w	r3, r2, r3
 8011ab4:	4a31      	ldr	r2, [pc, #196]	; (8011b7c <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x154>)
 8011ab6:	fb82 1203 	smull	r1, r2, r2, r3
 8011aba:	441a      	add	r2, r3
 8011abc:	11d2      	asrs	r2, r2, #7
 8011abe:	17db      	asrs	r3, r3, #31
 8011ac0:	1ad3      	subs	r3, r2, r3
 8011ac2:	61fb      	str	r3, [r7, #28]

            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
 8011ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ac6:	3340      	adds	r3, #64	; 0x40
 8011ac8:	781b      	ldrb	r3, [r3, #0]
 8011aca:	461a      	mov	r2, r3
 8011acc:	6a3b      	ldr	r3, [r7, #32]
 8011ace:	fb02 f303 	mul.w	r3, r2, r3
 8011ad2:	4a2a      	ldr	r2, [pc, #168]	; (8011b7c <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x154>)
 8011ad4:	fb82 1203 	smull	r1, r2, r2, r3
 8011ad8:	441a      	add	r2, r3
 8011ada:	11d2      	asrs	r2, r2, #7
 8011adc:	17db      	asrs	r3, r3, #31
 8011ade:	1ad3      	subs	r3, r2, r3
 8011ae0:	61bb      	str	r3, [r7, #24]

            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
 8011ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ae4:	3380      	adds	r3, #128	; 0x80
 8011ae6:	781b      	ldrb	r3, [r3, #0]
 8011ae8:	461a      	mov	r2, r3
 8011aea:	6a3b      	ldr	r3, [r7, #32]
 8011aec:	fb02 f303 	mul.w	r3, r2, r3
 8011af0:	4a22      	ldr	r2, [pc, #136]	; (8011b7c <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x154>)
 8011af2:	fb82 1203 	smull	r1, r2, r2, r3
 8011af6:	441a      	add	r2, r3
 8011af8:	11d2      	asrs	r2, r2, #7
 8011afa:	17db      	asrs	r3, r3, #31
 8011afc:	1ad3      	subs	r3, r2, r3
 8011afe:	617b      	str	r3, [r7, #20]
          pOutAddr[JPEG_BLUE_OFFSET/8]  =  c_blue;

#elif (JPEG_RGB_FORMAT == JPEG_RGB565)

          *(__IO uint16_t *)pOutAddr =
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
 8011b00:	69fb      	ldr	r3, [r7, #28]
 8011b02:	10db      	asrs	r3, r3, #3
 8011b04:	02db      	lsls	r3, r3, #11
 8011b06:	b21a      	sxth	r2, r3
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
 8011b08:	69bb      	ldr	r3, [r7, #24]
 8011b0a:	109b      	asrs	r3, r3, #2
 8011b0c:	015b      	lsls	r3, r3, #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
 8011b0e:	b21b      	sxth	r3, r3
 8011b10:	4313      	orrs	r3, r2
 8011b12:	b21a      	sxth	r2, r3
            ((c_blue >> 3) << JPEG_BLUE_OFFSET);
 8011b14:	697b      	ldr	r3, [r7, #20]
 8011b16:	10db      	asrs	r3, r3, #3
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
 8011b18:	b21b      	sxth	r3, r3
 8011b1a:	4313      	orrs	r3, r2
 8011b1c:	b21b      	sxth	r3, r3
 8011b1e:	b29a      	uxth	r2, r3
          *(__IO uint16_t *)pOutAddr =
 8011b20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b22:	801a      	strh	r2, [r3, #0]

#endif /* JPEG_RGB_FORMAT */

            pOutAddr += JPEG_BYTES_PER_PIXEL;
 8011b24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b26:	3302      	adds	r3, #2
 8011b28:	637b      	str	r3, [r7, #52]	; 0x34

            pChrom++;
 8011b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b2c:	3301      	adds	r3, #1
 8011b2e:	633b      	str	r3, [r7, #48]	; 0x30
          for(j=0; j < 8; j++)
 8011b30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011b32:	3301      	adds	r3, #1
 8011b34:	643b      	str	r3, [r7, #64]	; 0x40
 8011b36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011b38:	2b07      	cmp	r3, #7
 8011b3a:	d9b1      	bls.n	8011aa0 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x78>
          }

        refline += JPEG_ConvertorParams.ScaledWidth;
 8011b3c:	4b0e      	ldr	r3, [pc, #56]	; (8011b78 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x150>)
 8011b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011b40:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011b42:	4413      	add	r3, r2
 8011b44:	63bb      	str	r3, [r7, #56]	; 0x38
    for(i= 0; i <  8; i++)
 8011b46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011b48:	3301      	adds	r3, #1
 8011b4a:	647b      	str	r3, [r7, #68]	; 0x44
 8011b4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011b4e:	2b07      	cmp	r3, #7
 8011b50:	d99a      	bls.n	8011a88 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x60>
      }
    }

    pInBuffer +=  CMYK_444_BLOCK_SIZE;
 8011b52:	68fb      	ldr	r3, [r7, #12]
 8011b54:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8011b58:	60fb      	str	r3, [r7, #12]
  while(currentMCU < (numberMCU + BlockIndex))
 8011b5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	4413      	add	r3, r2
 8011b60:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011b62:	429a      	cmp	r2, r3
 8011b64:	f4ff af6d 	bcc.w	8011a42 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x1a>
  }
  return numberMCU;
 8011b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8011b6a:	4618      	mov	r0, r3
 8011b6c:	374c      	adds	r7, #76	; 0x4c
 8011b6e:	46bd      	mov	sp, r7
 8011b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b74:	4770      	bx	lr
 8011b76:	bf00      	nop
 8011b78:	2001f350 	.word	0x2001f350
 8011b7c:	80808081 	.word	0x80808081

08011b80 <TGFX_JPEG_GetDecodeColorConvertFunc>:
  *                      depending of the jpeg image color space and chroma sampling info.
  * @param ImageNbMCUs : pointer to uint32_t, used to retrive the total number of MCU blocks in the jpeg image.
  * @retval HAL status : HAL_OK or HAL_ERROR.
  */
HAL_StatusTypeDef TGFX_JPEG_GetDecodeColorConvertFunc(JPEG_ConfTypeDef *pJpegInfo, JPEG_YCbCrToRGB_Convert_Function *pFunction, uint32_t *ImageNbMCUs)
{
 8011b80:	b480      	push	{r7}
 8011b82:	b087      	sub	sp, #28
 8011b84:	af00      	add	r7, sp, #0
 8011b86:	60f8      	str	r0, [r7, #12]
 8011b88:	60b9      	str	r1, [r7, #8]
 8011b8a:	607a      	str	r2, [r7, #4]
  uint32_t hMCU, vMCU;

  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
 8011b8c:	68fb      	ldr	r3, [r7, #12]
 8011b8e:	681b      	ldr	r3, [r3, #0]
 8011b90:	4a7a      	ldr	r2, [pc, #488]	; (8011d7c <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8011b92:	6013      	str	r3, [r2, #0]
  JPEG_ConvertorParams.ImageWidth = pJpegInfo->ImageWidth;
 8011b94:	68fb      	ldr	r3, [r7, #12]
 8011b96:	68db      	ldr	r3, [r3, #12]
 8011b98:	4a78      	ldr	r2, [pc, #480]	; (8011d7c <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8011b9a:	6093      	str	r3, [r2, #8]
  JPEG_ConvertorParams.ImageHeight = pJpegInfo->ImageHeight;
 8011b9c:	68fb      	ldr	r3, [r7, #12]
 8011b9e:	689b      	ldr	r3, [r3, #8]
 8011ba0:	4a76      	ldr	r2, [pc, #472]	; (8011d7c <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8011ba2:	60d3      	str	r3, [r2, #12]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
 8011ba4:	68fb      	ldr	r3, [r7, #12]
 8011ba6:	68db      	ldr	r3, [r3, #12]
 8011ba8:	68fa      	ldr	r2, [r7, #12]
 8011baa:	6892      	ldr	r2, [r2, #8]
 8011bac:	fb02 f303 	mul.w	r3, r2, r3
 8011bb0:	005b      	lsls	r3, r3, #1
 8011bb2:	4a72      	ldr	r2, [pc, #456]	; (8011d7c <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8011bb4:	6113      	str	r3, [r2, #16]

  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;
 8011bb6:	68fb      	ldr	r3, [r7, #12]
 8011bb8:	685b      	ldr	r3, [r3, #4]
 8011bba:	4a70      	ldr	r2, [pc, #448]	; (8011d7c <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8011bbc:	6053      	str	r3, [r2, #4]
  if(JPEG_ConvertorParams.ColorSpace == JPEG_YCBCR_COLORSPACE)
 8011bbe:	4b6f      	ldr	r3, [pc, #444]	; (8011d7c <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8011bc0:	681b      	ldr	r3, [r3, #0]
 8011bc2:	2b10      	cmp	r3, #16
 8011bc4:	d155      	bne.n	8011c72 <TGFX_JPEG_GetDecodeColorConvertFunc+0xf2>
  {
    if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_420_SUBSAMPLING)
 8011bc6:	4b6d      	ldr	r3, [pc, #436]	; (8011d7c <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8011bc8:	685b      	ldr	r3, [r3, #4]
 8011bca:	2b01      	cmp	r3, #1
 8011bcc:	d119      	bne.n	8011c02 <TGFX_JPEG_GetDecodeColorConvertFunc+0x82>
    {
      *pFunction = TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks;
 8011bce:	68bb      	ldr	r3, [r7, #8]
 8011bd0:	4a6b      	ldr	r2, [pc, #428]	; (8011d80 <TGFX_JPEG_GetDecodeColorConvertFunc+0x200>)
 8011bd2:	601a      	str	r2, [r3, #0]

      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;
 8011bd4:	4b69      	ldr	r3, [pc, #420]	; (8011d7c <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8011bd6:	689b      	ldr	r3, [r3, #8]
 8011bd8:	f003 030f 	and.w	r3, r3, #15
 8011bdc:	4a67      	ldr	r2, [pc, #412]	; (8011d7c <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8011bde:	6153      	str	r3, [r2, #20]

      if(JPEG_ConvertorParams.LineOffset != 0)
 8011be0:	4b66      	ldr	r3, [pc, #408]	; (8011d7c <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8011be2:	695b      	ldr	r3, [r3, #20]
 8011be4:	2b00      	cmp	r3, #0
 8011be6:	d005      	beq.n	8011bf4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x74>
      {
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;
 8011be8:	4b64      	ldr	r3, [pc, #400]	; (8011d7c <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8011bea:	695b      	ldr	r3, [r3, #20]
 8011bec:	f1c3 0310 	rsb	r3, r3, #16
 8011bf0:	4a62      	ldr	r2, [pc, #392]	; (8011d7c <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8011bf2:	6153      	str	r3, [r2, #20]
      }
      JPEG_ConvertorParams.H_factor = 16;
 8011bf4:	4b61      	ldr	r3, [pc, #388]	; (8011d7c <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8011bf6:	2210      	movs	r2, #16
 8011bf8:	61da      	str	r2, [r3, #28]
      JPEG_ConvertorParams.V_factor  = 16;
 8011bfa:	4b60      	ldr	r3, [pc, #384]	; (8011d7c <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8011bfc:	2210      	movs	r2, #16
 8011bfe:	621a      	str	r2, [r3, #32]
 8011c00:	e075      	b.n	8011cee <TGFX_JPEG_GetDecodeColorConvertFunc+0x16e>
    }
    else if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_422_SUBSAMPLING)
 8011c02:	4b5e      	ldr	r3, [pc, #376]	; (8011d7c <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8011c04:	685b      	ldr	r3, [r3, #4]
 8011c06:	2b02      	cmp	r3, #2
 8011c08:	d119      	bne.n	8011c3e <TGFX_JPEG_GetDecodeColorConvertFunc+0xbe>
    {
      *pFunction =  JPEG_MCU_YCbCr422_ARGB_ConvertBlocks;
 8011c0a:	68bb      	ldr	r3, [r7, #8]
 8011c0c:	4a5d      	ldr	r2, [pc, #372]	; (8011d84 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8011c0e:	601a      	str	r2, [r3, #0]

      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;
 8011c10:	4b5a      	ldr	r3, [pc, #360]	; (8011d7c <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8011c12:	689b      	ldr	r3, [r3, #8]
 8011c14:	f003 030f 	and.w	r3, r3, #15
 8011c18:	4a58      	ldr	r2, [pc, #352]	; (8011d7c <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8011c1a:	6153      	str	r3, [r2, #20]

      if(JPEG_ConvertorParams.LineOffset != 0)
 8011c1c:	4b57      	ldr	r3, [pc, #348]	; (8011d7c <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8011c1e:	695b      	ldr	r3, [r3, #20]
 8011c20:	2b00      	cmp	r3, #0
 8011c22:	d005      	beq.n	8011c30 <TGFX_JPEG_GetDecodeColorConvertFunc+0xb0>
      {
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;
 8011c24:	4b55      	ldr	r3, [pc, #340]	; (8011d7c <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8011c26:	695b      	ldr	r3, [r3, #20]
 8011c28:	f1c3 0310 	rsb	r3, r3, #16
 8011c2c:	4a53      	ldr	r2, [pc, #332]	; (8011d7c <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8011c2e:	6153      	str	r3, [r2, #20]
      }
      JPEG_ConvertorParams.H_factor = 16;
 8011c30:	4b52      	ldr	r3, [pc, #328]	; (8011d7c <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8011c32:	2210      	movs	r2, #16
 8011c34:	61da      	str	r2, [r3, #28]
      JPEG_ConvertorParams.V_factor  = 8;
 8011c36:	4b51      	ldr	r3, [pc, #324]	; (8011d7c <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8011c38:	2208      	movs	r2, #8
 8011c3a:	621a      	str	r2, [r3, #32]
 8011c3c:	e057      	b.n	8011cee <TGFX_JPEG_GetDecodeColorConvertFunc+0x16e>
    }
    else /*4:4:4*/
    {
      *pFunction =  JPEG_MCU_YCbCr444_ARGB_ConvertBlocks;
 8011c3e:	68bb      	ldr	r3, [r7, #8]
 8011c40:	4a51      	ldr	r2, [pc, #324]	; (8011d88 <TGFX_JPEG_GetDecodeColorConvertFunc+0x208>)
 8011c42:	601a      	str	r2, [r3, #0]

      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
 8011c44:	4b4d      	ldr	r3, [pc, #308]	; (8011d7c <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8011c46:	689b      	ldr	r3, [r3, #8]
 8011c48:	f003 0307 	and.w	r3, r3, #7
 8011c4c:	4a4b      	ldr	r2, [pc, #300]	; (8011d7c <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8011c4e:	6153      	str	r3, [r2, #20]

      if(JPEG_ConvertorParams.LineOffset != 0)
 8011c50:	4b4a      	ldr	r3, [pc, #296]	; (8011d7c <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8011c52:	695b      	ldr	r3, [r3, #20]
 8011c54:	2b00      	cmp	r3, #0
 8011c56:	d005      	beq.n	8011c64 <TGFX_JPEG_GetDecodeColorConvertFunc+0xe4>
      {
        JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;
 8011c58:	4b48      	ldr	r3, [pc, #288]	; (8011d7c <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8011c5a:	695b      	ldr	r3, [r3, #20]
 8011c5c:	f1c3 0308 	rsb	r3, r3, #8
 8011c60:	4a46      	ldr	r2, [pc, #280]	; (8011d7c <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8011c62:	6153      	str	r3, [r2, #20]
      }
      JPEG_ConvertorParams.H_factor = 8;
 8011c64:	4b45      	ldr	r3, [pc, #276]	; (8011d7c <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8011c66:	2208      	movs	r2, #8
 8011c68:	61da      	str	r2, [r3, #28]
      JPEG_ConvertorParams.V_factor  = 8;
 8011c6a:	4b44      	ldr	r3, [pc, #272]	; (8011d7c <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8011c6c:	2208      	movs	r2, #8
 8011c6e:	621a      	str	r2, [r3, #32]
 8011c70:	e03d      	b.n	8011cee <TGFX_JPEG_GetDecodeColorConvertFunc+0x16e>
    }
  }
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_GRAYSCALE_COLORSPACE)
 8011c72:	4b42      	ldr	r3, [pc, #264]	; (8011d7c <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8011c74:	681b      	ldr	r3, [r3, #0]
 8011c76:	2b00      	cmp	r3, #0
 8011c78:	d119      	bne.n	8011cae <TGFX_JPEG_GetDecodeColorConvertFunc+0x12e>
  {
    *pFunction =  JPEG_MCU_Gray_ARGB_ConvertBlocks;
 8011c7a:	68bb      	ldr	r3, [r7, #8]
 8011c7c:	4a43      	ldr	r2, [pc, #268]	; (8011d8c <TGFX_JPEG_GetDecodeColorConvertFunc+0x20c>)
 8011c7e:	601a      	str	r2, [r3, #0]

    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
 8011c80:	4b3e      	ldr	r3, [pc, #248]	; (8011d7c <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8011c82:	689b      	ldr	r3, [r3, #8]
 8011c84:	f003 0307 	and.w	r3, r3, #7
 8011c88:	4a3c      	ldr	r2, [pc, #240]	; (8011d7c <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8011c8a:	6153      	str	r3, [r2, #20]

    if(JPEG_ConvertorParams.LineOffset != 0)
 8011c8c:	4b3b      	ldr	r3, [pc, #236]	; (8011d7c <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8011c8e:	695b      	ldr	r3, [r3, #20]
 8011c90:	2b00      	cmp	r3, #0
 8011c92:	d005      	beq.n	8011ca0 <TGFX_JPEG_GetDecodeColorConvertFunc+0x120>
    {
      JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;
 8011c94:	4b39      	ldr	r3, [pc, #228]	; (8011d7c <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8011c96:	695b      	ldr	r3, [r3, #20]
 8011c98:	f1c3 0308 	rsb	r3, r3, #8
 8011c9c:	4a37      	ldr	r2, [pc, #220]	; (8011d7c <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8011c9e:	6153      	str	r3, [r2, #20]
    }
    JPEG_ConvertorParams.H_factor = 8;
 8011ca0:	4b36      	ldr	r3, [pc, #216]	; (8011d7c <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8011ca2:	2208      	movs	r2, #8
 8011ca4:	61da      	str	r2, [r3, #28]
    JPEG_ConvertorParams.V_factor  = 8;
 8011ca6:	4b35      	ldr	r3, [pc, #212]	; (8011d7c <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8011ca8:	2208      	movs	r2, #8
 8011caa:	621a      	str	r2, [r3, #32]
 8011cac:	e01f      	b.n	8011cee <TGFX_JPEG_GetDecodeColorConvertFunc+0x16e>
  }
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_CMYK_COLORSPACE)
 8011cae:	4b33      	ldr	r3, [pc, #204]	; (8011d7c <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8011cb0:	681b      	ldr	r3, [r3, #0]
 8011cb2:	2b30      	cmp	r3, #48	; 0x30
 8011cb4:	d119      	bne.n	8011cea <TGFX_JPEG_GetDecodeColorConvertFunc+0x16a>
  {
    *pFunction =  JPEG_MCU_YCCK_ARGB_ConvertBlocks;
 8011cb6:	68bb      	ldr	r3, [r7, #8]
 8011cb8:	4a35      	ldr	r2, [pc, #212]	; (8011d90 <TGFX_JPEG_GetDecodeColorConvertFunc+0x210>)
 8011cba:	601a      	str	r2, [r3, #0]

    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
 8011cbc:	4b2f      	ldr	r3, [pc, #188]	; (8011d7c <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8011cbe:	689b      	ldr	r3, [r3, #8]
 8011cc0:	f003 0307 	and.w	r3, r3, #7
 8011cc4:	4a2d      	ldr	r2, [pc, #180]	; (8011d7c <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8011cc6:	6153      	str	r3, [r2, #20]

    if(JPEG_ConvertorParams.LineOffset != 0)
 8011cc8:	4b2c      	ldr	r3, [pc, #176]	; (8011d7c <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8011cca:	695b      	ldr	r3, [r3, #20]
 8011ccc:	2b00      	cmp	r3, #0
 8011cce:	d005      	beq.n	8011cdc <TGFX_JPEG_GetDecodeColorConvertFunc+0x15c>
    {
      JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;
 8011cd0:	4b2a      	ldr	r3, [pc, #168]	; (8011d7c <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8011cd2:	695b      	ldr	r3, [r3, #20]
 8011cd4:	f1c3 0308 	rsb	r3, r3, #8
 8011cd8:	4a28      	ldr	r2, [pc, #160]	; (8011d7c <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8011cda:	6153      	str	r3, [r2, #20]
    }
    JPEG_ConvertorParams.H_factor = 8;
 8011cdc:	4b27      	ldr	r3, [pc, #156]	; (8011d7c <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8011cde:	2208      	movs	r2, #8
 8011ce0:	61da      	str	r2, [r3, #28]
    JPEG_ConvertorParams.V_factor  = 8;
 8011ce2:	4b26      	ldr	r3, [pc, #152]	; (8011d7c <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8011ce4:	2208      	movs	r2, #8
 8011ce6:	621a      	str	r2, [r3, #32]
 8011ce8:	e001      	b.n	8011cee <TGFX_JPEG_GetDecodeColorConvertFunc+0x16e>
  }
  else
  {
    return HAL_ERROR; /* Color space Not supported*/
 8011cea:	2301      	movs	r3, #1
 8011cec:	e040      	b.n	8011d70 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1f0>
  }

  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
 8011cee:	4b23      	ldr	r3, [pc, #140]	; (8011d7c <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8011cf0:	689a      	ldr	r2, [r3, #8]
 8011cf2:	4b22      	ldr	r3, [pc, #136]	; (8011d7c <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8011cf4:	695b      	ldr	r3, [r3, #20]
 8011cf6:	4413      	add	r3, r2
 8011cf8:	4a20      	ldr	r2, [pc, #128]	; (8011d7c <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8011cfa:	6253      	str	r3, [r2, #36]	; 0x24
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
 8011cfc:	4b1f      	ldr	r3, [pc, #124]	; (8011d7c <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8011cfe:	689b      	ldr	r3, [r3, #8]
 8011d00:	005b      	lsls	r3, r3, #1
 8011d02:	4a1e      	ldr	r2, [pc, #120]	; (8011d7c <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8011d04:	6293      	str	r3, [r2, #40]	; 0x28

  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
 8011d06:	4b1d      	ldr	r3, [pc, #116]	; (8011d7c <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8011d08:	689a      	ldr	r2, [r3, #8]
 8011d0a:	4b1c      	ldr	r3, [pc, #112]	; (8011d7c <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8011d0c:	69db      	ldr	r3, [r3, #28]
 8011d0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8011d12:	617b      	str	r3, [r7, #20]
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
 8011d14:	4b19      	ldr	r3, [pc, #100]	; (8011d7c <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8011d16:	689b      	ldr	r3, [r3, #8]
 8011d18:	4a18      	ldr	r2, [pc, #96]	; (8011d7c <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8011d1a:	69d2      	ldr	r2, [r2, #28]
 8011d1c:	fbb3 f1f2 	udiv	r1, r3, r2
 8011d20:	fb01 f202 	mul.w	r2, r1, r2
 8011d24:	1a9b      	subs	r3, r3, r2
 8011d26:	2b00      	cmp	r3, #0
 8011d28:	d002      	beq.n	8011d30 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1b0>
  {
    hMCU++; /*+1 for horizenatl incomplete MCU */
 8011d2a:	697b      	ldr	r3, [r7, #20]
 8011d2c:	3301      	adds	r3, #1
 8011d2e:	617b      	str	r3, [r7, #20]
  }

  vMCU = (JPEG_ConvertorParams.ImageHeight / JPEG_ConvertorParams.V_factor);
 8011d30:	4b12      	ldr	r3, [pc, #72]	; (8011d7c <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8011d32:	68da      	ldr	r2, [r3, #12]
 8011d34:	4b11      	ldr	r3, [pc, #68]	; (8011d7c <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8011d36:	6a1b      	ldr	r3, [r3, #32]
 8011d38:	fbb2 f3f3 	udiv	r3, r2, r3
 8011d3c:	613b      	str	r3, [r7, #16]
  if((JPEG_ConvertorParams.ImageHeight % JPEG_ConvertorParams.V_factor) != 0)
 8011d3e:	4b0f      	ldr	r3, [pc, #60]	; (8011d7c <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8011d40:	68db      	ldr	r3, [r3, #12]
 8011d42:	4a0e      	ldr	r2, [pc, #56]	; (8011d7c <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8011d44:	6a12      	ldr	r2, [r2, #32]
 8011d46:	fbb3 f1f2 	udiv	r1, r3, r2
 8011d4a:	fb01 f202 	mul.w	r2, r1, r2
 8011d4e:	1a9b      	subs	r3, r3, r2
 8011d50:	2b00      	cmp	r3, #0
 8011d52:	d002      	beq.n	8011d5a <TGFX_JPEG_GetDecodeColorConvertFunc+0x1da>
  {
    vMCU++; /*+1 for vertical incomplete MCU */
 8011d54:	693b      	ldr	r3, [r7, #16]
 8011d56:	3301      	adds	r3, #1
 8011d58:	613b      	str	r3, [r7, #16]
  }
  JPEG_ConvertorParams.MCU_Total_Nb = (hMCU * vMCU);
 8011d5a:	697b      	ldr	r3, [r7, #20]
 8011d5c:	693a      	ldr	r2, [r7, #16]
 8011d5e:	fb02 f303 	mul.w	r3, r2, r3
 8011d62:	4a06      	ldr	r2, [pc, #24]	; (8011d7c <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8011d64:	62d3      	str	r3, [r2, #44]	; 0x2c
  *ImageNbMCUs = JPEG_ConvertorParams.MCU_Total_Nb;
 8011d66:	4b05      	ldr	r3, [pc, #20]	; (8011d7c <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8011d68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8011d6e:	2300      	movs	r3, #0
}
 8011d70:	4618      	mov	r0, r3
 8011d72:	371c      	adds	r7, #28
 8011d74:	46bd      	mov	sp, r7
 8011d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d7a:	4770      	bx	lr
 8011d7c:	2001f350 	.word	0x2001f350
 8011d80:	080112a1 	.word	0x080112a1
 8011d84:	0801159d 	.word	0x0801159d
 8011d88:	080117a1 	.word	0x080117a1
 8011d8c:	08011931 	.word	0x08011931
 8011d90:	08011a29 	.word	0x08011a29

08011d94 <TGFX_JPEG_InitPostProcColorTables>:
  * @brief  Initializes the YCbCr -> RGB colors conversion Look Up Tables
  * @param  None
  * @retval None
  */
void TGFX_JPEG_InitPostProcColorTables(void)
{
 8011d94:	b480      	push	{r7}
 8011d96:	b083      	sub	sp, #12
 8011d98:	af00      	add	r7, sp, #0
  int32_t index, i;

  for (i = 0; i <= 255; i++)
 8011d9a:	2300      	movs	r3, #0
 8011d9c:	607b      	str	r3, [r7, #4]
 8011d9e:	e02e      	b.n	8011dfe <TGFX_JPEG_InitPostProcColorTables+0x6a>
  {
    index = (i * 2) - 256;
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	3b80      	subs	r3, #128	; 0x80
 8011da4:	005b      	lsls	r3, r3, #1
 8011da6:	603b      	str	r3, [r7, #0]
    CR_RED_LUT[i] = ( (((int32_t) ((1.40200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
 8011da8:	683b      	ldr	r3, [r7, #0]
 8011daa:	f24b 3274 	movw	r2, #45940	; 0xb374
 8011dae:	fb02 f303 	mul.w	r3, r2, r3
 8011db2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8011db6:	141a      	asrs	r2, r3, #16
 8011db8:	4916      	ldr	r1, [pc, #88]	; (8011e14 <TGFX_JPEG_InitPostProcColorTables+0x80>)
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    CB_BLUE_LUT[i] = ( (((int32_t) ((1.77200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
 8011dc0:	683b      	ldr	r3, [r7, #0]
 8011dc2:	f24e 22d0 	movw	r2, #58064	; 0xe2d0
 8011dc6:	fb02 f303 	mul.w	r3, r2, r3
 8011dca:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8011dce:	141a      	asrs	r2, r3, #16
 8011dd0:	4911      	ldr	r1, [pc, #68]	; (8011e18 <TGFX_JPEG_InitPostProcColorTables+0x84>)
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    CR_GREEN_LUT[i] = (-((int32_t) ((0.71414 / 2) * (1L << 16)))) * index;
 8011dd8:	683b      	ldr	r3, [r7, #0]
 8011dda:	4a10      	ldr	r2, [pc, #64]	; (8011e1c <TGFX_JPEG_InitPostProcColorTables+0x88>)
 8011ddc:	fb03 f202 	mul.w	r2, r3, r2
 8011de0:	490f      	ldr	r1, [pc, #60]	; (8011e20 <TGFX_JPEG_InitPostProcColorTables+0x8c>)
 8011de2:	687b      	ldr	r3, [r7, #4]
 8011de4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    CB_GREEN_LUT[i] = (-((int32_t) ((0.34414 / 2) * (1L << 16)))) * index;
 8011de8:	683b      	ldr	r3, [r7, #0]
 8011dea:	4a0e      	ldr	r2, [pc, #56]	; (8011e24 <TGFX_JPEG_InitPostProcColorTables+0x90>)
 8011dec:	fb03 f202 	mul.w	r2, r3, r2
 8011df0:	490d      	ldr	r1, [pc, #52]	; (8011e28 <TGFX_JPEG_InitPostProcColorTables+0x94>)
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (i = 0; i <= 255; i++)
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	3301      	adds	r3, #1
 8011dfc:	607b      	str	r3, [r7, #4]
 8011dfe:	687b      	ldr	r3, [r7, #4]
 8011e00:	2bff      	cmp	r3, #255	; 0xff
 8011e02:	ddcd      	ble.n	8011da0 <TGFX_JPEG_InitPostProcColorTables+0xc>
  }
}
 8011e04:	bf00      	nop
 8011e06:	bf00      	nop
 8011e08:	370c      	adds	r7, #12
 8011e0a:	46bd      	mov	sp, r7
 8011e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e10:	4770      	bx	lr
 8011e12:	bf00      	nop
 8011e14:	2001f390 	.word	0x2001f390
 8011e18:	2001f790 	.word	0x2001f790
 8011e1c:	ffffa498 	.word	0xffffa498
 8011e20:	2001fb90 	.word	0x2001fb90
 8011e24:	ffffd3f4 	.word	0xffffd3f4
 8011e28:	2001ff90 	.word	0x2001ff90

08011e2c <TGFX_JPEG_InitColorTables>:
  * @brief  Initializes the colors conversion Look Up Tables
  * @param  None
  * @retval None
  */
void TGFX_JPEG_InitColorTables(void)
{
 8011e2c:	b580      	push	{r7, lr}
 8011e2e:	af00      	add	r7, sp, #0

#if (USE_JPEG_ENCODER == 1)
  TGFX_JPEG_InitPreProcColorTables();
 8011e30:	f000 f806 	bl	8011e40 <TGFX_JPEG_InitPreProcColorTables>
  TGFX_JPEG_Init_MCU_LUT();
 8011e34:	f000 f888 	bl	8011f48 <TGFX_JPEG_Init_MCU_LUT>
#endif

#if (USE_JPEG_DECODER == 1)
  TGFX_JPEG_InitPostProcColorTables();
 8011e38:	f7ff ffac 	bl	8011d94 <TGFX_JPEG_InitPostProcColorTables>
#endif

}
 8011e3c:	bf00      	nop
 8011e3e:	bd80      	pop	{r7, pc}

08011e40 <TGFX_JPEG_InitPreProcColorTables>:
  * @brief  Initializes the RGB -> YCbCr colors conversion Look Up Tables
  * @param  None
  * @retval None
  */
void TGFX_JPEG_InitPreProcColorTables(void)
{
 8011e40:	b480      	push	{r7}
 8011e42:	b083      	sub	sp, #12
 8011e44:	af00      	add	r7, sp, #0
  int32_t i;

  for (i = 0; i <= 255; i++)
 8011e46:	2300      	movs	r3, #0
 8011e48:	607b      	str	r3, [r7, #4]
 8011e4a:	e05a      	b.n	8011f02 <TGFX_JPEG_InitPreProcColorTables+0xc2>
  {
    RED_Y_LUT[i]           = ((  ((int32_t) ((0.299 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	f644 428b 	movw	r2, #19595	; 0x4c8b
 8011e52:	fb02 f303 	mul.w	r3, r2, r3
 8011e56:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8011e5a:	141a      	asrs	r2, r3, #16
 8011e5c:	492e      	ldr	r1, [pc, #184]	; (8011f18 <TGFX_JPEG_InitPreProcColorTables+0xd8>)
 8011e5e:	687b      	ldr	r3, [r7, #4]
 8011e60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    GREEN_Y_LUT[i]         = ((  ((int32_t) ((0.587 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	f249 6245 	movw	r2, #38469	; 0x9645
 8011e6a:	fb02 f303 	mul.w	r3, r2, r3
 8011e6e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8011e72:	141a      	asrs	r2, r3, #16
 8011e74:	4929      	ldr	r1, [pc, #164]	; (8011f1c <TGFX_JPEG_InitPreProcColorTables+0xdc>)
 8011e76:	687b      	ldr	r3, [r7, #4]
 8011e78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    BLUE_Y_LUT[i]          = ((  ((int32_t) ((0.114 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	f641 522f 	movw	r2, #7471	; 0x1d2f
 8011e82:	fb02 f303 	mul.w	r3, r2, r3
 8011e86:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8011e8a:	141a      	asrs	r2, r3, #16
 8011e8c:	4924      	ldr	r1, [pc, #144]	; (8011f20 <TGFX_JPEG_InitPreProcColorTables+0xe0>)
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    RED_CB_LUT[i]          = (((-((int32_t) ((0.1687 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	4a23      	ldr	r2, [pc, #140]	; (8011f24 <TGFX_JPEG_InitPreProcColorTables+0xe4>)
 8011e98:	fb02 f303 	mul.w	r3, r2, r3
 8011e9c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8011ea0:	141a      	asrs	r2, r3, #16
 8011ea2:	4921      	ldr	r1, [pc, #132]	; (8011f28 <TGFX_JPEG_InitPreProcColorTables+0xe8>)
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    GREEN_CB_LUT[i]        = (((-((int32_t) ((0.3313 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	4a1f      	ldr	r2, [pc, #124]	; (8011f2c <TGFX_JPEG_InitPreProcColorTables+0xec>)
 8011eae:	fb02 f303 	mul.w	r3, r2, r3
 8011eb2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8011eb6:	141a      	asrs	r2, r3, #16
 8011eb8:	491d      	ldr	r1, [pc, #116]	; (8011f30 <TGFX_JPEG_InitPreProcColorTables+0xf0>)
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    /* BLUE_CB_LUT and RED_CR_LUT are identical */
    BLUE_CB_RED_CR_LUT[i]  = ((  ((int32_t) ((0.5 )    * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8011ec0:	687b      	ldr	r3, [r7, #4]
 8011ec2:	3301      	adds	r3, #1
 8011ec4:	03db      	lsls	r3, r3, #15
 8011ec6:	141a      	asrs	r2, r3, #16
 8011ec8:	491a      	ldr	r1, [pc, #104]	; (8011f34 <TGFX_JPEG_InitPreProcColorTables+0xf4>)
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    GREEN_CR_LUT[i]        = (((-((int32_t) ((0.4187 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	4a19      	ldr	r2, [pc, #100]	; (8011f38 <TGFX_JPEG_InitPreProcColorTables+0xf8>)
 8011ed4:	fb02 f303 	mul.w	r3, r2, r3
 8011ed8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8011edc:	141a      	asrs	r2, r3, #16
 8011ede:	4917      	ldr	r1, [pc, #92]	; (8011f3c <TGFX_JPEG_InitPreProcColorTables+0xfc>)
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    BLUE_CR_LUT[i]         = (((-((int32_t) ((0.0813 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8011ee6:	687b      	ldr	r3, [r7, #4]
 8011ee8:	4a15      	ldr	r2, [pc, #84]	; (8011f40 <TGFX_JPEG_InitPreProcColorTables+0x100>)
 8011eea:	fb02 f303 	mul.w	r3, r2, r3
 8011eee:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8011ef2:	141a      	asrs	r2, r3, #16
 8011ef4:	4913      	ldr	r1, [pc, #76]	; (8011f44 <TGFX_JPEG_InitPreProcColorTables+0x104>)
 8011ef6:	687b      	ldr	r3, [r7, #4]
 8011ef8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (i = 0; i <= 255; i++)
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	3301      	adds	r3, #1
 8011f00:	607b      	str	r3, [r7, #4]
 8011f02:	687b      	ldr	r3, [r7, #4]
 8011f04:	2bff      	cmp	r3, #255	; 0xff
 8011f06:	dda1      	ble.n	8011e4c <TGFX_JPEG_InitPreProcColorTables+0xc>
  }
}
 8011f08:	bf00      	nop
 8011f0a:	bf00      	nop
 8011f0c:	370c      	adds	r7, #12
 8011f0e:	46bd      	mov	sp, r7
 8011f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f14:	4770      	bx	lr
 8011f16:	bf00      	nop
 8011f18:	20020390 	.word	0x20020390
 8011f1c:	20020f90 	.word	0x20020f90
 8011f20:	20021b90 	.word	0x20021b90
 8011f24:	ffffd4d1 	.word	0xffffd4d1
 8011f28:	20020790 	.word	0x20020790
 8011f2c:	ffffab30 	.word	0xffffab30
 8011f30:	20021790 	.word	0x20021790
 8011f34:	20020b90 	.word	0x20020b90
 8011f38:	ffff94d1 	.word	0xffff94d1
 8011f3c:	20021390 	.word	0x20021390
 8011f40:	ffffeb30 	.word	0xffffeb30
 8011f44:	20021f90 	.word	0x20021f90

08011f48 <TGFX_JPEG_Init_MCU_LUT>:
  * @brief  Initializes the MCU Look Up Tables
  * @param  None
  * @retval None
  */
void TGFX_JPEG_Init_MCU_LUT(void)
{
 8011f48:	b480      	push	{r7}
 8011f4a:	b085      	sub	sp, #20
 8011f4c:	af00      	add	r7, sp, #0
  uint32_t i, j, offset;

  /*Y LUT */
  for(i = 0; i < 16; i++)
 8011f4e:	2300      	movs	r3, #0
 8011f50:	60fb      	str	r3, [r7, #12]
 8011f52:	e036      	b.n	8011fc2 <TGFX_JPEG_Init_MCU_LUT+0x7a>
  {
    for(j = 0; j < 16; j++)
 8011f54:	2300      	movs	r3, #0
 8011f56:	60bb      	str	r3, [r7, #8]
 8011f58:	e02d      	b.n	8011fb6 <TGFX_JPEG_Init_MCU_LUT+0x6e>
    {
      offset =  j + (i*8);
 8011f5a:	68fb      	ldr	r3, [r7, #12]
 8011f5c:	00db      	lsls	r3, r3, #3
 8011f5e:	68ba      	ldr	r2, [r7, #8]
 8011f60:	4413      	add	r3, r2
 8011f62:	607b      	str	r3, [r7, #4]
      if((j>=8) && (i>=8)) offset+= 120;
 8011f64:	68bb      	ldr	r3, [r7, #8]
 8011f66:	2b07      	cmp	r3, #7
 8011f68:	d906      	bls.n	8011f78 <TGFX_JPEG_Init_MCU_LUT+0x30>
 8011f6a:	68fb      	ldr	r3, [r7, #12]
 8011f6c:	2b07      	cmp	r3, #7
 8011f6e:	d903      	bls.n	8011f78 <TGFX_JPEG_Init_MCU_LUT+0x30>
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	3378      	adds	r3, #120	; 0x78
 8011f74:	607b      	str	r3, [r7, #4]
 8011f76:	e012      	b.n	8011f9e <TGFX_JPEG_Init_MCU_LUT+0x56>
      else  if((j>=8) && (i<8)) offset+= 56;
 8011f78:	68bb      	ldr	r3, [r7, #8]
 8011f7a:	2b07      	cmp	r3, #7
 8011f7c:	d906      	bls.n	8011f8c <TGFX_JPEG_Init_MCU_LUT+0x44>
 8011f7e:	68fb      	ldr	r3, [r7, #12]
 8011f80:	2b07      	cmp	r3, #7
 8011f82:	d803      	bhi.n	8011f8c <TGFX_JPEG_Init_MCU_LUT+0x44>
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	3338      	adds	r3, #56	; 0x38
 8011f88:	607b      	str	r3, [r7, #4]
 8011f8a:	e008      	b.n	8011f9e <TGFX_JPEG_Init_MCU_LUT+0x56>
      else  if((j<8) && (i>=8)) offset+= 64;
 8011f8c:	68bb      	ldr	r3, [r7, #8]
 8011f8e:	2b07      	cmp	r3, #7
 8011f90:	d805      	bhi.n	8011f9e <TGFX_JPEG_Init_MCU_LUT+0x56>
 8011f92:	68fb      	ldr	r3, [r7, #12]
 8011f94:	2b07      	cmp	r3, #7
 8011f96:	d902      	bls.n	8011f9e <TGFX_JPEG_Init_MCU_LUT+0x56>
 8011f98:	687b      	ldr	r3, [r7, #4]
 8011f9a:	3340      	adds	r3, #64	; 0x40
 8011f9c:	607b      	str	r3, [r7, #4]

      JPEG_Y_MCU_LUT[i*16 + j] = offset;
 8011f9e:	68fb      	ldr	r3, [r7, #12]
 8011fa0:	011a      	lsls	r2, r3, #4
 8011fa2:	68bb      	ldr	r3, [r7, #8]
 8011fa4:	4413      	add	r3, r2
 8011fa6:	687a      	ldr	r2, [r7, #4]
 8011fa8:	b291      	uxth	r1, r2
 8011faa:	4a62      	ldr	r2, [pc, #392]	; (8012134 <TGFX_JPEG_Init_MCU_LUT+0x1ec>)
 8011fac:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(j = 0; j < 16; j++)
 8011fb0:	68bb      	ldr	r3, [r7, #8]
 8011fb2:	3301      	adds	r3, #1
 8011fb4:	60bb      	str	r3, [r7, #8]
 8011fb6:	68bb      	ldr	r3, [r7, #8]
 8011fb8:	2b0f      	cmp	r3, #15
 8011fba:	d9ce      	bls.n	8011f5a <TGFX_JPEG_Init_MCU_LUT+0x12>
  for(i = 0; i < 16; i++)
 8011fbc:	68fb      	ldr	r3, [r7, #12]
 8011fbe:	3301      	adds	r3, #1
 8011fc0:	60fb      	str	r3, [r7, #12]
 8011fc2:	68fb      	ldr	r3, [r7, #12]
 8011fc4:	2b0f      	cmp	r3, #15
 8011fc6:	d9c5      	bls.n	8011f54 <TGFX_JPEG_Init_MCU_LUT+0xc>
    }
  }

  /*Cb Cr K LUT*/
  for(i = 0; i < 16; i++)
 8011fc8:	2300      	movs	r3, #0
 8011fca:	60fb      	str	r3, [r7, #12]
 8011fcc:	e072      	b.n	80120b4 <TGFX_JPEG_Init_MCU_LUT+0x16c>
  {
    for(j = 0; j < 16; j++)
 8011fce:	2300      	movs	r3, #0
 8011fd0:	60bb      	str	r3, [r7, #8]
 8011fd2:	e069      	b.n	80120a8 <TGFX_JPEG_Init_MCU_LUT+0x160>
    {
      offset = i*16 + j;
 8011fd4:	68fb      	ldr	r3, [r7, #12]
 8011fd6:	011b      	lsls	r3, r3, #4
 8011fd8:	68ba      	ldr	r2, [r7, #8]
 8011fda:	4413      	add	r3, r2
 8011fdc:	607b      	str	r3, [r7, #4]

      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
 8011fde:	68bb      	ldr	r3, [r7, #8]
 8011fe0:	085b      	lsrs	r3, r3, #1
 8011fe2:	b29a      	uxth	r2, r3
 8011fe4:	68fb      	ldr	r3, [r7, #12]
 8011fe6:	085b      	lsrs	r3, r3, #1
 8011fe8:	b29b      	uxth	r3, r3
 8011fea:	00db      	lsls	r3, r3, #3
 8011fec:	b29b      	uxth	r3, r3
 8011fee:	4413      	add	r3, r2
 8011ff0:	b29b      	uxth	r3, r3
 8011ff2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8011ff6:	b299      	uxth	r1, r3
 8011ff8:	4a4f      	ldr	r2, [pc, #316]	; (8012138 <TGFX_JPEG_Init_MCU_LUT+0x1f0>)
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
 8012000:	68bb      	ldr	r3, [r7, #8]
 8012002:	085b      	lsrs	r3, r3, #1
 8012004:	b29a      	uxth	r2, r3
 8012006:	68fb      	ldr	r3, [r7, #12]
 8012008:	b29b      	uxth	r3, r3
 801200a:	00db      	lsls	r3, r3, #3
 801200c:	b29b      	uxth	r3, r3
 801200e:	4413      	add	r3, r2
 8012010:	b29b      	uxth	r3, r3
 8012012:	3380      	adds	r3, #128	; 0x80
 8012014:	b299      	uxth	r1, r3
 8012016:	4a49      	ldr	r2, [pc, #292]	; (801213c <TGFX_JPEG_Init_MCU_LUT+0x1f4>)
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
 801201e:	68bb      	ldr	r3, [r7, #8]
 8012020:	085b      	lsrs	r3, r3, #1
 8012022:	b29a      	uxth	r2, r3
 8012024:	68fb      	ldr	r3, [r7, #12]
 8012026:	085b      	lsrs	r3, r3, #1
 8012028:	b29b      	uxth	r3, r3
 801202a:	00db      	lsls	r3, r3, #3
 801202c:	b29b      	uxth	r3, r3
 801202e:	4413      	add	r3, r2
 8012030:	b29b      	uxth	r3, r3
 8012032:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8012036:	b299      	uxth	r1, r3
 8012038:	4a41      	ldr	r2, [pc, #260]	; (8012140 <TGFX_JPEG_Init_MCU_LUT+0x1f8>)
 801203a:	687b      	ldr	r3, [r7, #4]
 801203c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
 8012040:	68bb      	ldr	r3, [r7, #8]
 8012042:	085b      	lsrs	r3, r3, #1
 8012044:	b29a      	uxth	r2, r3
 8012046:	68fb      	ldr	r3, [r7, #12]
 8012048:	b29b      	uxth	r3, r3
 801204a:	00db      	lsls	r3, r3, #3
 801204c:	b29b      	uxth	r3, r3
 801204e:	4413      	add	r3, r2
 8012050:	b29b      	uxth	r3, r3
 8012052:	33c0      	adds	r3, #192	; 0xc0
 8012054:	b299      	uxth	r1, r3
 8012056:	4a3b      	ldr	r2, [pc, #236]	; (8012144 <TGFX_JPEG_Init_MCU_LUT+0x1fc>)
 8012058:	687b      	ldr	r3, [r7, #4]
 801205a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
 801205e:	68bb      	ldr	r3, [r7, #8]
 8012060:	085b      	lsrs	r3, r3, #1
 8012062:	b29a      	uxth	r2, r3
 8012064:	68fb      	ldr	r3, [r7, #12]
 8012066:	085b      	lsrs	r3, r3, #1
 8012068:	b29b      	uxth	r3, r3
 801206a:	00db      	lsls	r3, r3, #3
 801206c:	b29b      	uxth	r3, r3
 801206e:	4413      	add	r3, r2
 8012070:	b29b      	uxth	r3, r3
 8012072:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8012076:	b299      	uxth	r1, r3
 8012078:	4a33      	ldr	r2, [pc, #204]	; (8012148 <TGFX_JPEG_Init_MCU_LUT+0x200>)
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_K_MCU_422_LUT[offset] = (j/2) + ((i/2)*8) + 256;
 8012080:	68bb      	ldr	r3, [r7, #8]
 8012082:	085b      	lsrs	r3, r3, #1
 8012084:	b29a      	uxth	r2, r3
 8012086:	68fb      	ldr	r3, [r7, #12]
 8012088:	085b      	lsrs	r3, r3, #1
 801208a:	b29b      	uxth	r3, r3
 801208c:	00db      	lsls	r3, r3, #3
 801208e:	b29b      	uxth	r3, r3
 8012090:	4413      	add	r3, r2
 8012092:	b29b      	uxth	r3, r3
 8012094:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8012098:	b299      	uxth	r1, r3
 801209a:	4a2c      	ldr	r2, [pc, #176]	; (801214c <TGFX_JPEG_Init_MCU_LUT+0x204>)
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(j = 0; j < 16; j++)
 80120a2:	68bb      	ldr	r3, [r7, #8]
 80120a4:	3301      	adds	r3, #1
 80120a6:	60bb      	str	r3, [r7, #8]
 80120a8:	68bb      	ldr	r3, [r7, #8]
 80120aa:	2b0f      	cmp	r3, #15
 80120ac:	d992      	bls.n	8011fd4 <TGFX_JPEG_Init_MCU_LUT+0x8c>
  for(i = 0; i < 16; i++)
 80120ae:	68fb      	ldr	r3, [r7, #12]
 80120b0:	3301      	adds	r3, #1
 80120b2:	60fb      	str	r3, [r7, #12]
 80120b4:	68fb      	ldr	r3, [r7, #12]
 80120b6:	2b0f      	cmp	r3, #15
 80120b8:	d989      	bls.n	8011fce <TGFX_JPEG_Init_MCU_LUT+0x86>
    }
  }

  for(i = 0; i < 8; i++)
 80120ba:	2300      	movs	r3, #0
 80120bc:	60fb      	str	r3, [r7, #12]
 80120be:	e02e      	b.n	801211e <TGFX_JPEG_Init_MCU_LUT+0x1d6>
  {
    for(j = 0; j < 8; j++)
 80120c0:	2300      	movs	r3, #0
 80120c2:	60bb      	str	r3, [r7, #8]
 80120c4:	e025      	b.n	8012112 <TGFX_JPEG_Init_MCU_LUT+0x1ca>
    {
      offset = i*8 + j;
 80120c6:	68fb      	ldr	r3, [r7, #12]
 80120c8:	00db      	lsls	r3, r3, #3
 80120ca:	68ba      	ldr	r2, [r7, #8]
 80120cc:	4413      	add	r3, r2
 80120ce:	607b      	str	r3, [r7, #4]

      JPEG_Y_MCU_444_LUT[offset]  = offset;
 80120d0:	687b      	ldr	r3, [r7, #4]
 80120d2:	b299      	uxth	r1, r3
 80120d4:	4a1e      	ldr	r2, [pc, #120]	; (8012150 <TGFX_JPEG_Init_MCU_LUT+0x208>)
 80120d6:	687b      	ldr	r3, [r7, #4]
 80120d8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_Cb_MCU_444_LUT[offset] = offset + 64 ;
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	b29b      	uxth	r3, r3
 80120e0:	3340      	adds	r3, #64	; 0x40
 80120e2:	b299      	uxth	r1, r3
 80120e4:	4a1b      	ldr	r2, [pc, #108]	; (8012154 <TGFX_JPEG_Init_MCU_LUT+0x20c>)
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_Cr_MCU_444_LUT[offset] = offset + 128 ;
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	b29b      	uxth	r3, r3
 80120f0:	3380      	adds	r3, #128	; 0x80
 80120f2:	b299      	uxth	r1, r3
 80120f4:	4a18      	ldr	r2, [pc, #96]	; (8012158 <TGFX_JPEG_Init_MCU_LUT+0x210>)
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_K_MCU_444_LUT[offset]  = offset + 192 ;
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	b29b      	uxth	r3, r3
 8012100:	33c0      	adds	r3, #192	; 0xc0
 8012102:	b299      	uxth	r1, r3
 8012104:	4a15      	ldr	r2, [pc, #84]	; (801215c <TGFX_JPEG_Init_MCU_LUT+0x214>)
 8012106:	687b      	ldr	r3, [r7, #4]
 8012108:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(j = 0; j < 8; j++)
 801210c:	68bb      	ldr	r3, [r7, #8]
 801210e:	3301      	adds	r3, #1
 8012110:	60bb      	str	r3, [r7, #8]
 8012112:	68bb      	ldr	r3, [r7, #8]
 8012114:	2b07      	cmp	r3, #7
 8012116:	d9d6      	bls.n	80120c6 <TGFX_JPEG_Init_MCU_LUT+0x17e>
  for(i = 0; i < 8; i++)
 8012118:	68fb      	ldr	r3, [r7, #12]
 801211a:	3301      	adds	r3, #1
 801211c:	60fb      	str	r3, [r7, #12]
 801211e:	68fb      	ldr	r3, [r7, #12]
 8012120:	2b07      	cmp	r3, #7
 8012122:	d9cd      	bls.n	80120c0 <TGFX_JPEG_Init_MCU_LUT+0x178>
    }
  }
}
 8012124:	bf00      	nop
 8012126:	bf00      	nop
 8012128:	3714      	adds	r7, #20
 801212a:	46bd      	mov	sp, r7
 801212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012130:	4770      	bx	lr
 8012132:	bf00      	nop
 8012134:	20022390 	.word	0x20022390
 8012138:	20022610 	.word	0x20022610
 801213c:	20022810 	.word	0x20022810
 8012140:	20022a90 	.word	0x20022a90
 8012144:	20022c90 	.word	0x20022c90
 8012148:	20022f10 	.word	0x20022f10
 801214c:	20023110 	.word	0x20023110
 8012150:	20022590 	.word	0x20022590
 8012154:	20022a10 	.word	0x20022a10
 8012158:	20022e90 	.word	0x20022e90
 801215c:	20023310 	.word	0x20023310

08012160 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr420_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer, 
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
 8012160:	b480      	push	{r7}
 8012162:	b097      	sub	sp, #92	; 0x5c
 8012164:	af00      	add	r7, sp, #0
 8012166:	60f8      	str	r0, [r7, #12]
 8012168:	60b9      	str	r1, [r7, #8]
 801216a:	607a      	str	r2, [r7, #4]
 801216c:	603b      	str	r3, [r7, #0]
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr, *pOutAddr2;
  uint8_t *pChrom, *pLum;
  
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
 801216e:	683b      	ldr	r3, [r7, #0]
 8012170:	4a24      	ldr	r2, [pc, #144]	; (8012204 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xa4>)
 8012172:	fba2 2303 	umull	r2, r3, r2, r3
 8012176:	0a1b      	lsrs	r3, r3, #8
 8012178:	633b      	str	r3, [r7, #48]	; 0x30
  currentMCU = BlockIndex;
 801217a:	687b      	ldr	r3, [r7, #4]
 801217c:	64bb      	str	r3, [r7, #72]	; 0x48
  

  while(currentMCU < (numberMCU + BlockIndex))
 801217e:	e148      	b.n	8012412 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2b2>
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
 8012180:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012182:	011a      	lsls	r2, r3, #4
 8012184:	4b20      	ldr	r3, [pc, #128]	; (8012208 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xa8>)
 8012186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012188:	fbb2 f3f3 	udiv	r3, r2, r3
 801218c:	011b      	lsls	r3, r3, #4
 801218e:	62fb      	str	r3, [r7, #44]	; 0x2c
    
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
 8012190:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012192:	011b      	lsls	r3, r3, #4
 8012194:	4a1c      	ldr	r2, [pc, #112]	; (8012208 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xa8>)
 8012196:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8012198:	fbb3 f1f2 	udiv	r1, r3, r2
 801219c:	fb01 f202 	mul.w	r2, r1, r2
 80121a0:	1a9b      	subs	r3, r3, r2
 80121a2:	62bb      	str	r3, [r7, #40]	; 0x28
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 80121a4:	4b18      	ldr	r3, [pc, #96]	; (8012208 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xa8>)
 80121a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80121a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80121aa:	fb03 f202 	mul.w	r2, r3, r2
 80121ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121b0:	005b      	lsls	r3, r3, #1
 80121b2:	4413      	add	r3, r2
 80121b4:	647b      	str	r3, [r7, #68]	; 0x44

    currentMCU++;
 80121b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80121b8:	3301      	adds	r3, #1
 80121ba:	64bb      	str	r3, [r7, #72]	; 0x48
    
    pChrom = pInBuffer + 256; /* pChroma = pInBuffer + 4*64 */
 80121bc:	68fb      	ldr	r3, [r7, #12]
 80121be:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80121c2:	63bb      	str	r3, [r7, #56]	; 0x38
    
    pLum = pInBuffer;
 80121c4:	68fb      	ldr	r3, [r7, #12]
 80121c6:	637b      	str	r3, [r7, #52]	; 0x34
    
    for(i= 0; i <  16; i+=2)
 80121c8:	2300      	movs	r3, #0
 80121ca:	657b      	str	r3, [r7, #84]	; 0x54
 80121cc:	e119      	b.n	8012402 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2a2>
    {
      if(i == 8)
 80121ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80121d0:	2b08      	cmp	r3, #8
 80121d2:	d102      	bne.n	80121da <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x7a>
      {
        pLum = pInBuffer + 128;
 80121d4:	68fb      	ldr	r3, [r7, #12]
 80121d6:	3380      	adds	r3, #128	; 0x80
 80121d8:	637b      	str	r3, [r7, #52]	; 0x34
      }
      
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 80121da:	4b0b      	ldr	r3, [pc, #44]	; (8012208 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xa8>)
 80121dc:	691b      	ldr	r3, [r3, #16]
 80121de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80121e0:	429a      	cmp	r2, r3
 80121e2:	f080 810b 	bcs.w	80123fc <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x29c>
      {
        pOutAddr = pOutBuffer + refline;
 80121e6:	68ba      	ldr	r2, [r7, #8]
 80121e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80121ea:	4413      	add	r3, r2
 80121ec:	643b      	str	r3, [r7, #64]	; 0x40
        pOutAddr2 = pOutAddr + JPEG_ConvertorParams.ScaledWidth;
 80121ee:	4b06      	ldr	r3, [pc, #24]	; (8012208 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xa8>)
 80121f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80121f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80121f4:	4413      	add	r3, r2
 80121f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        
        for(k= 0; k<2; k++)
 80121f8:	2300      	movs	r3, #0
 80121fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80121fc:	e0f1      	b.n	80123e2 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x282>
        {
          for(j=0; j < 8; j+=2)
 80121fe:	2300      	movs	r3, #0
 8012200:	653b      	str	r3, [r7, #80]	; 0x50
 8012202:	e0e4      	b.n	80123ce <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x26e>
 8012204:	aaaaaaab 	.word	0xaaaaaaab
 8012208:	20023390 	.word	0x20023390
          {           
            cbcomp = (int32_t)(*(pChrom));
 801220c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801220e:	781b      	ldrb	r3, [r3, #0]
 8012210:	627b      	str	r3, [r7, #36]	; 0x24
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 8012212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012214:	009b      	lsls	r3, r3, #2
 8012216:	4a86      	ldr	r2, [pc, #536]	; (8012430 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2d0>)
 8012218:	4413      	add	r3, r2
 801221a:	681b      	ldr	r3, [r3, #0]
 801221c:	623b      	str	r3, [r7, #32]
            
            crcomp = (int32_t)(*(pChrom + 64));
 801221e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012220:	3340      	adds	r3, #64	; 0x40
 8012222:	781b      	ldrb	r3, [r3, #0]
 8012224:	61fb      	str	r3, [r7, #28]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
 8012226:	69fb      	ldr	r3, [r7, #28]
 8012228:	009b      	lsls	r3, r3, #2
 801222a:	4a82      	ldr	r2, [pc, #520]	; (8012434 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2d4>)
 801222c:	4413      	add	r3, r2
 801222e:	681b      	ldr	r3, [r3, #0]
 8012230:	61bb      	str	r3, [r7, #24]
            
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
 8012232:	69fb      	ldr	r3, [r7, #28]
 8012234:	009b      	lsls	r3, r3, #2
 8012236:	4a80      	ldr	r2, [pc, #512]	; (8012438 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2d8>)
 8012238:	4413      	add	r3, r2
 801223a:	681a      	ldr	r2, [r3, #0]
 801223c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801223e:	009b      	lsls	r3, r3, #2
 8012240:	497e      	ldr	r1, [pc, #504]	; (801243c <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2dc>)
 8012242:	440b      	add	r3, r1
 8012244:	681b      	ldr	r3, [r3, #0]
 8012246:	4413      	add	r3, r2
 8012248:	141b      	asrs	r3, r3, #16
 801224a:	617b      	str	r3, [r7, #20]
            pOutAddr2[3 + JPEG_GREEN_OFFSET/8] = CLAMP(ycomp + c_green);
            pOutAddr2[3 + JPEG_BLUE_OFFSET/8] = CLAMP(ycomp + c_blue);
 
#elif (JPEG_RGB_FORMAT == JPEG_RGB565)
          
            ycomp = (int32_t)(*(pLum +j));
 801224c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801224e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012250:	4413      	add	r3, r2
 8012252:	781b      	ldrb	r3, [r3, #0]
 8012254:	613b      	str	r3, [r7, #16]
            
            *(__IO uint16_t *)pOutAddr = 
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8012256:	693a      	ldr	r2, [r7, #16]
 8012258:	69bb      	ldr	r3, [r7, #24]
 801225a:	4413      	add	r3, r2
 801225c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8012260:	4a77      	ldr	r2, [pc, #476]	; (8012440 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2e0>)
 8012262:	5cd3      	ldrb	r3, [r2, r3]
 8012264:	08db      	lsrs	r3, r3, #3
 8012266:	b2db      	uxtb	r3, r3
 8012268:	02db      	lsls	r3, r3, #11
 801226a:	b21a      	sxth	r2, r3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 801226c:	6939      	ldr	r1, [r7, #16]
 801226e:	697b      	ldr	r3, [r7, #20]
 8012270:	440b      	add	r3, r1
 8012272:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8012276:	4972      	ldr	r1, [pc, #456]	; (8012440 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2e0>)
 8012278:	5ccb      	ldrb	r3, [r1, r3]
 801227a:	089b      	lsrs	r3, r3, #2
 801227c:	b2db      	uxtb	r3, r3
 801227e:	015b      	lsls	r3, r3, #5
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8012280:	b21b      	sxth	r3, r3
 8012282:	4313      	orrs	r3, r2
 8012284:	b21a      	sxth	r2, r3
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 8012286:	6939      	ldr	r1, [r7, #16]
 8012288:	6a3b      	ldr	r3, [r7, #32]
 801228a:	440b      	add	r3, r1
 801228c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8012290:	496b      	ldr	r1, [pc, #428]	; (8012440 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2e0>)
 8012292:	5ccb      	ldrb	r3, [r1, r3]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8012294:	08db      	lsrs	r3, r3, #3
 8012296:	b2db      	uxtb	r3, r3
 8012298:	b21b      	sxth	r3, r3
 801229a:	4313      	orrs	r3, r2
 801229c:	b21b      	sxth	r3, r3
 801229e:	b29a      	uxth	r2, r3
            *(__IO uint16_t *)pOutAddr = 
 80122a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80122a2:	801a      	strh	r2, [r3, #0]
            /**********/
            ycomp = (int32_t)(*(pLum +j +1));
 80122a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80122a6:	3301      	adds	r3, #1
 80122a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80122aa:	4413      	add	r3, r2
 80122ac:	781b      	ldrb	r3, [r3, #0]
 80122ae:	613b      	str	r3, [r7, #16]
            
            *((__IO uint16_t *)(pOutAddr + 2)) = 
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 80122b0:	693a      	ldr	r2, [r7, #16]
 80122b2:	69bb      	ldr	r3, [r7, #24]
 80122b4:	4413      	add	r3, r2
 80122b6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80122ba:	4a61      	ldr	r2, [pc, #388]	; (8012440 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2e0>)
 80122bc:	5cd3      	ldrb	r3, [r2, r3]
 80122be:	08db      	lsrs	r3, r3, #3
 80122c0:	b2db      	uxtb	r3, r3
 80122c2:	02db      	lsls	r3, r3, #11
 80122c4:	b21a      	sxth	r2, r3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 80122c6:	6939      	ldr	r1, [r7, #16]
 80122c8:	697b      	ldr	r3, [r7, #20]
 80122ca:	440b      	add	r3, r1
 80122cc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80122d0:	495b      	ldr	r1, [pc, #364]	; (8012440 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2e0>)
 80122d2:	5ccb      	ldrb	r3, [r1, r3]
 80122d4:	089b      	lsrs	r3, r3, #2
 80122d6:	b2db      	uxtb	r3, r3
 80122d8:	015b      	lsls	r3, r3, #5
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 80122da:	b21b      	sxth	r3, r3
 80122dc:	4313      	orrs	r3, r2
 80122de:	b21a      	sxth	r2, r3
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 80122e0:	6939      	ldr	r1, [r7, #16]
 80122e2:	6a3b      	ldr	r3, [r7, #32]
 80122e4:	440b      	add	r3, r1
 80122e6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80122ea:	4955      	ldr	r1, [pc, #340]	; (8012440 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2e0>)
 80122ec:	5ccb      	ldrb	r3, [r1, r3]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 80122ee:	08db      	lsrs	r3, r3, #3
 80122f0:	b2db      	uxtb	r3, r3
 80122f2:	b21b      	sxth	r3, r3
 80122f4:	4313      	orrs	r3, r2
 80122f6:	b21a      	sxth	r2, r3
            *((__IO uint16_t *)(pOutAddr + 2)) = 
 80122f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80122fa:	3302      	adds	r3, #2
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 80122fc:	b292      	uxth	r2, r2
            *((__IO uint16_t *)(pOutAddr + 2)) = 
 80122fe:	801a      	strh	r2, [r3, #0]
            
            /**********/
            ycomp = (int32_t)(*(pLum +j +8));
 8012300:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012302:	3308      	adds	r3, #8
 8012304:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012306:	4413      	add	r3, r2
 8012308:	781b      	ldrb	r3, [r3, #0]
 801230a:	613b      	str	r3, [r7, #16]
            
            *(__IO uint16_t *)pOutAddr2 = 
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 801230c:	693a      	ldr	r2, [r7, #16]
 801230e:	69bb      	ldr	r3, [r7, #24]
 8012310:	4413      	add	r3, r2
 8012312:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8012316:	4a4a      	ldr	r2, [pc, #296]	; (8012440 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2e0>)
 8012318:	5cd3      	ldrb	r3, [r2, r3]
 801231a:	08db      	lsrs	r3, r3, #3
 801231c:	b2db      	uxtb	r3, r3
 801231e:	02db      	lsls	r3, r3, #11
 8012320:	b21a      	sxth	r2, r3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8012322:	6939      	ldr	r1, [r7, #16]
 8012324:	697b      	ldr	r3, [r7, #20]
 8012326:	440b      	add	r3, r1
 8012328:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801232c:	4944      	ldr	r1, [pc, #272]	; (8012440 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2e0>)
 801232e:	5ccb      	ldrb	r3, [r1, r3]
 8012330:	089b      	lsrs	r3, r3, #2
 8012332:	b2db      	uxtb	r3, r3
 8012334:	015b      	lsls	r3, r3, #5
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8012336:	b21b      	sxth	r3, r3
 8012338:	4313      	orrs	r3, r2
 801233a:	b21a      	sxth	r2, r3
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 801233c:	6939      	ldr	r1, [r7, #16]
 801233e:	6a3b      	ldr	r3, [r7, #32]
 8012340:	440b      	add	r3, r1
 8012342:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8012346:	493e      	ldr	r1, [pc, #248]	; (8012440 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2e0>)
 8012348:	5ccb      	ldrb	r3, [r1, r3]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 801234a:	08db      	lsrs	r3, r3, #3
 801234c:	b2db      	uxtb	r3, r3
 801234e:	b21b      	sxth	r3, r3
 8012350:	4313      	orrs	r3, r2
 8012352:	b21b      	sxth	r3, r3
 8012354:	b29a      	uxth	r2, r3
            *(__IO uint16_t *)pOutAddr2 = 
 8012356:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012358:	801a      	strh	r2, [r3, #0]
            
            /**********/
            ycomp = (int32_t)(*(pLum +j +8 +1));
 801235a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801235c:	3309      	adds	r3, #9
 801235e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012360:	4413      	add	r3, r2
 8012362:	781b      	ldrb	r3, [r3, #0]
 8012364:	613b      	str	r3, [r7, #16]
            
            *((__IO uint16_t *)(pOutAddr2 +2)) = 
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8012366:	693a      	ldr	r2, [r7, #16]
 8012368:	69bb      	ldr	r3, [r7, #24]
 801236a:	4413      	add	r3, r2
 801236c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8012370:	4a33      	ldr	r2, [pc, #204]	; (8012440 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2e0>)
 8012372:	5cd3      	ldrb	r3, [r2, r3]
 8012374:	08db      	lsrs	r3, r3, #3
 8012376:	b2db      	uxtb	r3, r3
 8012378:	02db      	lsls	r3, r3, #11
 801237a:	b21a      	sxth	r2, r3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 801237c:	6939      	ldr	r1, [r7, #16]
 801237e:	697b      	ldr	r3, [r7, #20]
 8012380:	440b      	add	r3, r1
 8012382:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8012386:	492e      	ldr	r1, [pc, #184]	; (8012440 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2e0>)
 8012388:	5ccb      	ldrb	r3, [r1, r3]
 801238a:	089b      	lsrs	r3, r3, #2
 801238c:	b2db      	uxtb	r3, r3
 801238e:	015b      	lsls	r3, r3, #5
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8012390:	b21b      	sxth	r3, r3
 8012392:	4313      	orrs	r3, r2
 8012394:	b21a      	sxth	r2, r3
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);         
 8012396:	6939      	ldr	r1, [r7, #16]
 8012398:	6a3b      	ldr	r3, [r7, #32]
 801239a:	440b      	add	r3, r1
 801239c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80123a0:	4927      	ldr	r1, [pc, #156]	; (8012440 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2e0>)
 80123a2:	5ccb      	ldrb	r3, [r1, r3]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 80123a4:	08db      	lsrs	r3, r3, #3
 80123a6:	b2db      	uxtb	r3, r3
 80123a8:	b21b      	sxth	r3, r3
 80123aa:	4313      	orrs	r3, r2
 80123ac:	b21a      	sxth	r2, r3
            *((__IO uint16_t *)(pOutAddr2 +2)) = 
 80123ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80123b0:	3302      	adds	r3, #2
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 80123b2:	b292      	uxth	r2, r2
            *((__IO uint16_t *)(pOutAddr2 +2)) = 
 80123b4:	801a      	strh	r2, [r3, #0]
#endif /* JPEG_RGB_FORMAT */          
          
            pOutAddr += JPEG_BYTES_PER_PIXEL * 2;
 80123b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80123b8:	3304      	adds	r3, #4
 80123ba:	643b      	str	r3, [r7, #64]	; 0x40
            pOutAddr2 += JPEG_BYTES_PER_PIXEL * 2;
 80123bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80123be:	3304      	adds	r3, #4
 80123c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          
            pChrom++;
 80123c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123c4:	3301      	adds	r3, #1
 80123c6:	63bb      	str	r3, [r7, #56]	; 0x38
          for(j=0; j < 8; j+=2)
 80123c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80123ca:	3302      	adds	r3, #2
 80123cc:	653b      	str	r3, [r7, #80]	; 0x50
 80123ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80123d0:	2b07      	cmp	r3, #7
 80123d2:	f67f af1b 	bls.w	801220c <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xac>
          }
          pLum += 64;                      
 80123d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80123d8:	3340      	adds	r3, #64	; 0x40
 80123da:	637b      	str	r3, [r7, #52]	; 0x34
        for(k= 0; k<2; k++)
 80123dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80123de:	3301      	adds	r3, #1
 80123e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80123e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80123e4:	2b01      	cmp	r3, #1
 80123e6:	f67f af0a 	bls.w	80121fe <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x9e>
        }

        pLum = pLum - 128 + 16;
 80123ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80123ec:	3b70      	subs	r3, #112	; 0x70
 80123ee:	637b      	str	r3, [r7, #52]	; 0x34
        
        refline += 2*JPEG_ConvertorParams.ScaledWidth;          
 80123f0:	4b14      	ldr	r3, [pc, #80]	; (8012444 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2e4>)
 80123f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80123f4:	005b      	lsls	r3, r3, #1
 80123f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80123f8:	4413      	add	r3, r2
 80123fa:	647b      	str	r3, [r7, #68]	; 0x44
    for(i= 0; i <  16; i+=2)
 80123fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80123fe:	3302      	adds	r3, #2
 8012400:	657b      	str	r3, [r7, #84]	; 0x54
 8012402:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012404:	2b0f      	cmp	r3, #15
 8012406:	f67f aee2 	bls.w	80121ce <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x6e>
      }
    }   
    
    pInBuffer +=  YCBCR_420_BLOCK_SIZE;
 801240a:	68fb      	ldr	r3, [r7, #12]
 801240c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8012410:	60fb      	str	r3, [r7, #12]
  while(currentMCU < (numberMCU + BlockIndex))
 8012412:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	4413      	add	r3, r2
 8012418:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801241a:	429a      	cmp	r2, r3
 801241c:	f4ff aeb0 	bcc.w	8012180 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x20>
  }
  return numberMCU;
 8012420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8012422:	4618      	mov	r0, r3
 8012424:	375c      	adds	r7, #92	; 0x5c
 8012426:	46bd      	mov	sp, r7
 8012428:	f85d 7b04 	ldr.w	r7, [sp], #4
 801242c:	4770      	bx	lr
 801242e:	bf00      	nop
 8012430:	200237d0 	.word	0x200237d0
 8012434:	200233d0 	.word	0x200233d0
 8012438:	20023bd0 	.word	0x20023bd0
 801243c:	20023fd0 	.word	0x20023fd0
 8012440:	080274d8 	.word	0x080274d8
 8012444:	20023390 	.word	0x20023390

08012448 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr422_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
 8012448:	b480      	push	{r7}
 801244a:	b097      	sub	sp, #92	; 0x5c
 801244c:	af00      	add	r7, sp, #0
 801244e:	60f8      	str	r0, [r7, #12]
 8012450:	60b9      	str	r1, [r7, #8]
 8012452:	607a      	str	r2, [r7, #4]
 8012454:	603b      	str	r3, [r7, #0]
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;
  
  numberMCU = DataCount / YCBCR_422_BLOCK_SIZE;
 8012456:	683b      	ldr	r3, [r7, #0]
 8012458:	0a1b      	lsrs	r3, r3, #8
 801245a:	637b      	str	r3, [r7, #52]	; 0x34
  currentMCU = BlockIndex;
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	64bb      	str	r3, [r7, #72]	; 0x48
  

  while(currentMCU < (numberMCU + BlockIndex))
 8012460:	e0d9      	b.n	8012616 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1ce>
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
 8012462:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012464:	011a      	lsls	r2, r3, #4
 8012466:	4b73      	ldr	r3, [pc, #460]	; (8012634 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1ec>)
 8012468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801246a:	fbb2 f3f3 	udiv	r3, r2, r3
 801246e:	00db      	lsls	r3, r3, #3
 8012470:	633b      	str	r3, [r7, #48]	; 0x30
    
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
 8012472:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012474:	011b      	lsls	r3, r3, #4
 8012476:	4a6f      	ldr	r2, [pc, #444]	; (8012634 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1ec>)
 8012478:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801247a:	fbb3 f1f2 	udiv	r1, r3, r2
 801247e:	fb01 f202 	mul.w	r2, r1, r2
 8012482:	1a9b      	subs	r3, r3, r2
 8012484:	62fb      	str	r3, [r7, #44]	; 0x2c
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8012486:	4b6b      	ldr	r3, [pc, #428]	; (8012634 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1ec>)
 8012488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801248a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801248c:	fb03 f202 	mul.w	r2, r3, r2
 8012490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012492:	005b      	lsls	r3, r3, #1
 8012494:	4413      	add	r3, r2
 8012496:	647b      	str	r3, [r7, #68]	; 0x44

    currentMCU++;
 8012498:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801249a:	3301      	adds	r3, #1
 801249c:	64bb      	str	r3, [r7, #72]	; 0x48
    
    pChrom = pInBuffer + 128; /* pChroma = pInBuffer + 2*64 */
 801249e:	68fb      	ldr	r3, [r7, #12]
 80124a0:	3380      	adds	r3, #128	; 0x80
 80124a2:	63fb      	str	r3, [r7, #60]	; 0x3c
    
    pLum = pInBuffer;
 80124a4:	68fb      	ldr	r3, [r7, #12]
 80124a6:	63bb      	str	r3, [r7, #56]	; 0x38
    
    for(i= 0; i <  8; i++)
 80124a8:	2300      	movs	r3, #0
 80124aa:	657b      	str	r3, [r7, #84]	; 0x54
 80124ac:	e0ab      	b.n	8012606 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1be>
    {
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 80124ae:	4b61      	ldr	r3, [pc, #388]	; (8012634 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1ec>)
 80124b0:	691b      	ldr	r3, [r3, #16]
 80124b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80124b4:	429a      	cmp	r2, r3
 80124b6:	f080 80a3 	bcs.w	8012600 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1b8>
      {
        pOutAddr = pOutBuffer + refline;
 80124ba:	68ba      	ldr	r2, [r7, #8]
 80124bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80124be:	4413      	add	r3, r2
 80124c0:	643b      	str	r3, [r7, #64]	; 0x40
        
        for(k= 0; k<2; k++)
 80124c2:	2300      	movs	r3, #0
 80124c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80124c6:	e08f      	b.n	80125e8 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1a0>
        {
          for(j=0; j < 8; j+=2)
 80124c8:	2300      	movs	r3, #0
 80124ca:	653b      	str	r3, [r7, #80]	; 0x50
 80124cc:	e082      	b.n	80125d4 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x18c>
          {           
            cbcomp = (int32_t)(*(pChrom));
 80124ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80124d0:	781b      	ldrb	r3, [r3, #0]
 80124d2:	62bb      	str	r3, [r7, #40]	; 0x28
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 80124d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124d6:	009b      	lsls	r3, r3, #2
 80124d8:	4a57      	ldr	r2, [pc, #348]	; (8012638 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1f0>)
 80124da:	4413      	add	r3, r2
 80124dc:	681b      	ldr	r3, [r3, #0]
 80124de:	627b      	str	r3, [r7, #36]	; 0x24
            
            crcomp = (int32_t)(*(pChrom + 64));
 80124e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80124e2:	3340      	adds	r3, #64	; 0x40
 80124e4:	781b      	ldrb	r3, [r3, #0]
 80124e6:	623b      	str	r3, [r7, #32]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
 80124e8:	6a3b      	ldr	r3, [r7, #32]
 80124ea:	009b      	lsls	r3, r3, #2
 80124ec:	4a53      	ldr	r2, [pc, #332]	; (801263c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1f4>)
 80124ee:	4413      	add	r3, r2
 80124f0:	681b      	ldr	r3, [r3, #0]
 80124f2:	61fb      	str	r3, [r7, #28]
            
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
 80124f4:	6a3b      	ldr	r3, [r7, #32]
 80124f6:	009b      	lsls	r3, r3, #2
 80124f8:	4a51      	ldr	r2, [pc, #324]	; (8012640 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1f8>)
 80124fa:	4413      	add	r3, r2
 80124fc:	681a      	ldr	r2, [r3, #0]
 80124fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012500:	009b      	lsls	r3, r3, #2
 8012502:	4950      	ldr	r1, [pc, #320]	; (8012644 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1fc>)
 8012504:	440b      	add	r3, r1
 8012506:	681b      	ldr	r3, [r3, #0]
 8012508:	4413      	add	r3, r2
 801250a:	141b      	asrs	r3, r3, #16
 801250c:	61bb      	str	r3, [r7, #24]
            pOutAddr[3 + JPEG_GREEN_OFFSET/8] = CLAMP(ycomp + c_green);
            pOutAddr[3 + JPEG_BLUE_OFFSET/8] = CLAMP(ycomp + c_blue);

#elif (JPEG_RGB_FORMAT == JPEG_RGB565)  
          
            ycomp = (int32_t)(*(pLum +j));
 801250e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012510:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012512:	4413      	add	r3, r2
 8012514:	781b      	ldrb	r3, [r3, #0]
 8012516:	617b      	str	r3, [r7, #20]
            
            *(__IO uint16_t *)pOutAddr = 
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8012518:	697a      	ldr	r2, [r7, #20]
 801251a:	69fb      	ldr	r3, [r7, #28]
 801251c:	4413      	add	r3, r2
 801251e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8012522:	4a49      	ldr	r2, [pc, #292]	; (8012648 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x200>)
 8012524:	5cd3      	ldrb	r3, [r2, r3]
 8012526:	08db      	lsrs	r3, r3, #3
 8012528:	b2db      	uxtb	r3, r3
 801252a:	02db      	lsls	r3, r3, #11
 801252c:	b21a      	sxth	r2, r3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 801252e:	6979      	ldr	r1, [r7, #20]
 8012530:	69bb      	ldr	r3, [r7, #24]
 8012532:	440b      	add	r3, r1
 8012534:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8012538:	4943      	ldr	r1, [pc, #268]	; (8012648 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x200>)
 801253a:	5ccb      	ldrb	r3, [r1, r3]
 801253c:	089b      	lsrs	r3, r3, #2
 801253e:	b2db      	uxtb	r3, r3
 8012540:	015b      	lsls	r3, r3, #5
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8012542:	b21b      	sxth	r3, r3
 8012544:	4313      	orrs	r3, r2
 8012546:	b21a      	sxth	r2, r3
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 8012548:	6979      	ldr	r1, [r7, #20]
 801254a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801254c:	440b      	add	r3, r1
 801254e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8012552:	493d      	ldr	r1, [pc, #244]	; (8012648 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x200>)
 8012554:	5ccb      	ldrb	r3, [r1, r3]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8012556:	08db      	lsrs	r3, r3, #3
 8012558:	b2db      	uxtb	r3, r3
 801255a:	b21b      	sxth	r3, r3
 801255c:	4313      	orrs	r3, r2
 801255e:	b21b      	sxth	r3, r3
 8012560:	b29a      	uxth	r2, r3
            *(__IO uint16_t *)pOutAddr = 
 8012562:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012564:	801a      	strh	r2, [r3, #0]
            /**********/
            ycomp = (int32_t)(*(pLum +j +1));
 8012566:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012568:	3301      	adds	r3, #1
 801256a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801256c:	4413      	add	r3, r2
 801256e:	781b      	ldrb	r3, [r3, #0]
 8012570:	617b      	str	r3, [r7, #20]
            
            *((__IO uint16_t *)(pOutAddr + 2)) = 
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8012572:	697a      	ldr	r2, [r7, #20]
 8012574:	69fb      	ldr	r3, [r7, #28]
 8012576:	4413      	add	r3, r2
 8012578:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801257c:	4a32      	ldr	r2, [pc, #200]	; (8012648 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x200>)
 801257e:	5cd3      	ldrb	r3, [r2, r3]
 8012580:	08db      	lsrs	r3, r3, #3
 8012582:	b2db      	uxtb	r3, r3
 8012584:	02db      	lsls	r3, r3, #11
 8012586:	b21a      	sxth	r2, r3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8012588:	6979      	ldr	r1, [r7, #20]
 801258a:	69bb      	ldr	r3, [r7, #24]
 801258c:	440b      	add	r3, r1
 801258e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8012592:	492d      	ldr	r1, [pc, #180]	; (8012648 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x200>)
 8012594:	5ccb      	ldrb	r3, [r1, r3]
 8012596:	089b      	lsrs	r3, r3, #2
 8012598:	b2db      	uxtb	r3, r3
 801259a:	015b      	lsls	r3, r3, #5
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 801259c:	b21b      	sxth	r3, r3
 801259e:	4313      	orrs	r3, r2
 80125a0:	b21a      	sxth	r2, r3
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);         
 80125a2:	6979      	ldr	r1, [r7, #20]
 80125a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125a6:	440b      	add	r3, r1
 80125a8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80125ac:	4926      	ldr	r1, [pc, #152]	; (8012648 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x200>)
 80125ae:	5ccb      	ldrb	r3, [r1, r3]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 80125b0:	08db      	lsrs	r3, r3, #3
 80125b2:	b2db      	uxtb	r3, r3
 80125b4:	b21b      	sxth	r3, r3
 80125b6:	4313      	orrs	r3, r2
 80125b8:	b21a      	sxth	r2, r3
            *((__IO uint16_t *)(pOutAddr + 2)) = 
 80125ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80125bc:	3302      	adds	r3, #2
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 80125be:	b292      	uxth	r2, r2
            *((__IO uint16_t *)(pOutAddr + 2)) = 
 80125c0:	801a      	strh	r2, [r3, #0]
          
#endif /* JPEG_RGB_FORMAT*/          
          
            pOutAddr += JPEG_BYTES_PER_PIXEL * 2;
 80125c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80125c4:	3304      	adds	r3, #4
 80125c6:	643b      	str	r3, [r7, #64]	; 0x40
          
            pChrom++;
 80125c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80125ca:	3301      	adds	r3, #1
 80125cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          for(j=0; j < 8; j+=2)
 80125ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80125d0:	3302      	adds	r3, #2
 80125d2:	653b      	str	r3, [r7, #80]	; 0x50
 80125d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80125d6:	2b07      	cmp	r3, #7
 80125d8:	f67f af79 	bls.w	80124ce <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x86>
          }
          pLum += 64;                      
 80125dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125de:	3340      	adds	r3, #64	; 0x40
 80125e0:	63bb      	str	r3, [r7, #56]	; 0x38
        for(k= 0; k<2; k++)
 80125e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80125e4:	3301      	adds	r3, #1
 80125e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80125e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80125ea:	2b01      	cmp	r3, #1
 80125ec:	f67f af6c 	bls.w	80124c8 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x80>
        }
        
        pLum = pLum - 128 + 8;
 80125f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125f2:	3b78      	subs	r3, #120	; 0x78
 80125f4:	63bb      	str	r3, [r7, #56]	; 0x38
        
        refline += JPEG_ConvertorParams.ScaledWidth;          
 80125f6:	4b0f      	ldr	r3, [pc, #60]	; (8012634 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1ec>)
 80125f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80125fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80125fc:	4413      	add	r3, r2
 80125fe:	647b      	str	r3, [r7, #68]	; 0x44
    for(i= 0; i <  8; i++)
 8012600:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012602:	3301      	adds	r3, #1
 8012604:	657b      	str	r3, [r7, #84]	; 0x54
 8012606:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012608:	2b07      	cmp	r3, #7
 801260a:	f67f af50 	bls.w	80124ae <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x66>
      }
    }   
    
    pInBuffer +=  YCBCR_422_BLOCK_SIZE;
 801260e:	68fb      	ldr	r3, [r7, #12]
 8012610:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8012614:	60fb      	str	r3, [r7, #12]
  while(currentMCU < (numberMCU + BlockIndex))
 8012616:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012618:	687b      	ldr	r3, [r7, #4]
 801261a:	4413      	add	r3, r2
 801261c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801261e:	429a      	cmp	r2, r3
 8012620:	f4ff af1f 	bcc.w	8012462 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1a>
  }
  return numberMCU;
 8012624:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8012626:	4618      	mov	r0, r3
 8012628:	375c      	adds	r7, #92	; 0x5c
 801262a:	46bd      	mov	sp, r7
 801262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012630:	4770      	bx	lr
 8012632:	bf00      	nop
 8012634:	20023390 	.word	0x20023390
 8012638:	200237d0 	.word	0x200237d0
 801263c:	200233d0 	.word	0x200233d0
 8012640:	20023bd0 	.word	0x20023bd0
 8012644:	20023fd0 	.word	0x20023fd0
 8012648:	080274d8 	.word	0x080274d8

0801264c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr444_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
 801264c:	b480      	push	{r7}
 801264e:	b095      	sub	sp, #84	; 0x54
 8012650:	af00      	add	r7, sp, #0
 8012652:	60f8      	str	r0, [r7, #12]
 8012654:	60b9      	str	r1, [r7, #8]
 8012656:	607a      	str	r2, [r7, #4]
 8012658:	603b      	str	r3, [r7, #0]
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;
  
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
 801265a:	683b      	ldr	r3, [r7, #0]
 801265c:	4a58      	ldr	r2, [pc, #352]	; (80127c0 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x174>)
 801265e:	fba2 2303 	umull	r2, r3, r2, r3
 8012662:	09db      	lsrs	r3, r3, #7
 8012664:	633b      	str	r3, [r7, #48]	; 0x30
  currentMCU = BlockIndex;
 8012666:	687b      	ldr	r3, [r7, #4]
 8012668:	647b      	str	r3, [r7, #68]	; 0x44
  

  while(currentMCU < (numberMCU + BlockIndex))
 801266a:	e09a      	b.n	80127a2 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x156>
  {

    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 801266c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801266e:	00da      	lsls	r2, r3, #3
 8012670:	4b54      	ldr	r3, [pc, #336]	; (80127c4 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x178>)
 8012672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012674:	fbb2 f3f3 	udiv	r3, r2, r3
 8012678:	00db      	lsls	r3, r3, #3
 801267a:	62fb      	str	r3, [r7, #44]	; 0x2c
    
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 801267c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801267e:	00db      	lsls	r3, r3, #3
 8012680:	4a50      	ldr	r2, [pc, #320]	; (80127c4 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x178>)
 8012682:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8012684:	fbb3 f1f2 	udiv	r1, r3, r2
 8012688:	fb01 f202 	mul.w	r2, r1, r2
 801268c:	1a9b      	subs	r3, r3, r2
 801268e:	62bb      	str	r3, [r7, #40]	; 0x28
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8012690:	4b4c      	ldr	r3, [pc, #304]	; (80127c4 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x178>)
 8012692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012694:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012696:	fb03 f202 	mul.w	r2, r3, r2
 801269a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801269c:	005b      	lsls	r3, r3, #1
 801269e:	4413      	add	r3, r2
 80126a0:	643b      	str	r3, [r7, #64]	; 0x40

    currentMCU++;   
 80126a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80126a4:	3301      	adds	r3, #1
 80126a6:	647b      	str	r3, [r7, #68]	; 0x44
    
    pChrom = pInBuffer + 64; /* pChroma = pInBuffer + 4*64 */
 80126a8:	68fb      	ldr	r3, [r7, #12]
 80126aa:	3340      	adds	r3, #64	; 0x40
 80126ac:	63bb      	str	r3, [r7, #56]	; 0x38
    
    pLum = pInBuffer;
 80126ae:	68fb      	ldr	r3, [r7, #12]
 80126b0:	637b      	str	r3, [r7, #52]	; 0x34
    
    for(i= 0; i <  8; i++)
 80126b2:	2300      	movs	r3, #0
 80126b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80126b6:	e06e      	b.n	8012796 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x14a>
    {
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 80126b8:	4b42      	ldr	r3, [pc, #264]	; (80127c4 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x178>)
 80126ba:	691b      	ldr	r3, [r3, #16]
 80126bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80126be:	429a      	cmp	r2, r3
 80126c0:	d266      	bcs.n	8012790 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x144>
      {
        pOutAddr = pOutBuffer+ refline;
 80126c2:	68ba      	ldr	r2, [r7, #8]
 80126c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80126c6:	4413      	add	r3, r2
 80126c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        

          for(j=0; j < 8; j++)
 80126ca:	2300      	movs	r3, #0
 80126cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80126ce:	e054      	b.n	801277a <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x12e>
          {           
            cbcomp = (int32_t)(*pChrom);
 80126d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126d2:	781b      	ldrb	r3, [r3, #0]
 80126d4:	627b      	str	r3, [r7, #36]	; 0x24
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 80126d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126d8:	009b      	lsls	r3, r3, #2
 80126da:	4a3b      	ldr	r2, [pc, #236]	; (80127c8 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x17c>)
 80126dc:	4413      	add	r3, r2
 80126de:	681b      	ldr	r3, [r3, #0]
 80126e0:	623b      	str	r3, [r7, #32]
            
            crcomp = (int32_t)(*(pChrom + 64));
 80126e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126e4:	3340      	adds	r3, #64	; 0x40
 80126e6:	781b      	ldrb	r3, [r3, #0]
 80126e8:	61fb      	str	r3, [r7, #28]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
 80126ea:	69fb      	ldr	r3, [r7, #28]
 80126ec:	009b      	lsls	r3, r3, #2
 80126ee:	4a37      	ldr	r2, [pc, #220]	; (80127cc <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x180>)
 80126f0:	4413      	add	r3, r2
 80126f2:	681b      	ldr	r3, [r3, #0]
 80126f4:	61bb      	str	r3, [r7, #24]
            
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
 80126f6:	69fb      	ldr	r3, [r7, #28]
 80126f8:	009b      	lsls	r3, r3, #2
 80126fa:	4a35      	ldr	r2, [pc, #212]	; (80127d0 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x184>)
 80126fc:	4413      	add	r3, r2
 80126fe:	681a      	ldr	r2, [r3, #0]
 8012700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012702:	009b      	lsls	r3, r3, #2
 8012704:	4933      	ldr	r1, [pc, #204]	; (80127d4 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x188>)
 8012706:	440b      	add	r3, r1
 8012708:	681b      	ldr	r3, [r3, #0]
 801270a:	4413      	add	r3, r2
 801270c:	141b      	asrs	r3, r3, #16
 801270e:	617b      	str	r3, [r7, #20]
            pOutAddr[JPEG_GREEN_OFFSET/8] = CLAMP(ycomp + c_green);
            pOutAddr[JPEG_BLUE_OFFSET/8] = CLAMP(ycomp + c_blue);        

#elif (JPEG_RGB_FORMAT == JPEG_RGB565)  
            
            ycomp = (int32_t)(*(pLum +j));
 8012710:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012712:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012714:	4413      	add	r3, r2
 8012716:	781b      	ldrb	r3, [r3, #0]
 8012718:	613b      	str	r3, [r7, #16]
          
            *(__IO uint16_t *)pOutAddr = 
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 801271a:	693a      	ldr	r2, [r7, #16]
 801271c:	69bb      	ldr	r3, [r7, #24]
 801271e:	4413      	add	r3, r2
 8012720:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8012724:	4a2c      	ldr	r2, [pc, #176]	; (80127d8 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x18c>)
 8012726:	5cd3      	ldrb	r3, [r2, r3]
 8012728:	08db      	lsrs	r3, r3, #3
 801272a:	b2db      	uxtb	r3, r3
 801272c:	02db      	lsls	r3, r3, #11
 801272e:	b21a      	sxth	r2, r3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8012730:	6939      	ldr	r1, [r7, #16]
 8012732:	697b      	ldr	r3, [r7, #20]
 8012734:	440b      	add	r3, r1
 8012736:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801273a:	4927      	ldr	r1, [pc, #156]	; (80127d8 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x18c>)
 801273c:	5ccb      	ldrb	r3, [r1, r3]
 801273e:	089b      	lsrs	r3, r3, #2
 8012740:	b2db      	uxtb	r3, r3
 8012742:	015b      	lsls	r3, r3, #5
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8012744:	b21b      	sxth	r3, r3
 8012746:	4313      	orrs	r3, r2
 8012748:	b21a      	sxth	r2, r3
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
 801274a:	6939      	ldr	r1, [r7, #16]
 801274c:	6a3b      	ldr	r3, [r7, #32]
 801274e:	440b      	add	r3, r1
 8012750:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8012754:	4920      	ldr	r1, [pc, #128]	; (80127d8 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x18c>)
 8012756:	5ccb      	ldrb	r3, [r1, r3]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8012758:	08db      	lsrs	r3, r3, #3
 801275a:	b2db      	uxtb	r3, r3
 801275c:	b21b      	sxth	r3, r3
 801275e:	4313      	orrs	r3, r2
 8012760:	b21b      	sxth	r3, r3
 8012762:	b29a      	uxth	r2, r3
            *(__IO uint16_t *)pOutAddr = 
 8012764:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012766:	801a      	strh	r2, [r3, #0]
            
#endif /* JPEG_RGB_FORMAT */          
          
            pOutAddr += JPEG_BYTES_PER_PIXEL;
 8012768:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801276a:	3302      	adds	r3, #2
 801276c:	63fb      	str	r3, [r7, #60]	; 0x3c
          
            pChrom++;
 801276e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012770:	3301      	adds	r3, #1
 8012772:	63bb      	str	r3, [r7, #56]	; 0x38
          for(j=0; j < 8; j++)
 8012774:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012776:	3301      	adds	r3, #1
 8012778:	64bb      	str	r3, [r7, #72]	; 0x48
 801277a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801277c:	2b07      	cmp	r3, #7
 801277e:	d9a7      	bls.n	80126d0 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x84>
          }
          pLum += 8;
 8012780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012782:	3308      	adds	r3, #8
 8012784:	637b      	str	r3, [r7, #52]	; 0x34

        refline += JPEG_ConvertorParams.ScaledWidth;          
 8012786:	4b0f      	ldr	r3, [pc, #60]	; (80127c4 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x178>)
 8012788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801278a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801278c:	4413      	add	r3, r2
 801278e:	643b      	str	r3, [r7, #64]	; 0x40
    for(i= 0; i <  8; i++)
 8012790:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012792:	3301      	adds	r3, #1
 8012794:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012796:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012798:	2b07      	cmp	r3, #7
 801279a:	d98d      	bls.n	80126b8 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x6c>
      }
    }   
    
    pInBuffer +=  YCBCR_444_BLOCK_SIZE;
 801279c:	68fb      	ldr	r3, [r7, #12]
 801279e:	33c0      	adds	r3, #192	; 0xc0
 80127a0:	60fb      	str	r3, [r7, #12]
  while(currentMCU < (numberMCU + BlockIndex))
 80127a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80127a4:	687b      	ldr	r3, [r7, #4]
 80127a6:	4413      	add	r3, r2
 80127a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80127aa:	429a      	cmp	r2, r3
 80127ac:	f4ff af5e 	bcc.w	801266c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x20>
  }
  return numberMCU;
 80127b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80127b2:	4618      	mov	r0, r3
 80127b4:	3754      	adds	r7, #84	; 0x54
 80127b6:	46bd      	mov	sp, r7
 80127b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127bc:	4770      	bx	lr
 80127be:	bf00      	nop
 80127c0:	aaaaaaab 	.word	0xaaaaaaab
 80127c4:	20023390 	.word	0x20023390
 80127c8:	200237d0 	.word	0x200237d0
 80127cc:	200233d0 	.word	0x200233d0
 80127d0:	20023bd0 	.word	0x20023bd0
 80127d4:	20023fd0 	.word	0x20023fd0
 80127d8:	080274d8 	.word	0x080274d8

080127dc <JPEG_MCU_Gray_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_Gray_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
 80127dc:	b480      	push	{r7}
 80127de:	b08f      	sub	sp, #60	; 0x3c
 80127e0:	af00      	add	r7, sp, #0
 80127e2:	60f8      	str	r0, [r7, #12]
 80127e4:	60b9      	str	r1, [r7, #8]
 80127e6:	607a      	str	r2, [r7, #4]
 80127e8:	603b      	str	r3, [r7, #0]

  uint32_t i,j, ySample;
  uint8_t *pOutAddr,  *pLum;

  
  numberMCU = DataCount / GRAY_444_BLOCK_SIZE;
 80127ea:	683b      	ldr	r3, [r7, #0]
 80127ec:	099b      	lsrs	r3, r3, #6
 80127ee:	61fb      	str	r3, [r7, #28]
  currentMCU = BlockIndex;
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	637b      	str	r3, [r7, #52]	; 0x34
  
  while(currentMCU < (numberMCU + BlockIndex))
 80127f4:	e05e      	b.n	80128b4 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xd8>
  {
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 80127f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80127f8:	00da      	lsls	r2, r3, #3
 80127fa:	4b35      	ldr	r3, [pc, #212]	; (80128d0 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xf4>)
 80127fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80127fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8012802:	00db      	lsls	r3, r3, #3
 8012804:	61bb      	str	r3, [r7, #24]
    
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 8012806:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012808:	00db      	lsls	r3, r3, #3
 801280a:	4a31      	ldr	r2, [pc, #196]	; (80128d0 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xf4>)
 801280c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801280e:	fbb3 f1f2 	udiv	r1, r3, r2
 8012812:	fb01 f202 	mul.w	r2, r1, r2
 8012816:	1a9b      	subs	r3, r3, r2
 8012818:	617b      	str	r3, [r7, #20]
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 801281a:	4b2d      	ldr	r3, [pc, #180]	; (80128d0 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xf4>)
 801281c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801281e:	69ba      	ldr	r2, [r7, #24]
 8012820:	fb03 f202 	mul.w	r2, r3, r2
 8012824:	697b      	ldr	r3, [r7, #20]
 8012826:	005b      	lsls	r3, r3, #1
 8012828:	4413      	add	r3, r2
 801282a:	633b      	str	r3, [r7, #48]	; 0x30
    
    currentMCU++;
 801282c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801282e:	3301      	adds	r3, #1
 8012830:	637b      	str	r3, [r7, #52]	; 0x34
  
    pLum = pInBuffer;
 8012832:	68fb      	ldr	r3, [r7, #12]
 8012834:	623b      	str	r3, [r7, #32]
    
    for(i= 0; i <  8; i++)
 8012836:	2300      	movs	r3, #0
 8012838:	62fb      	str	r3, [r7, #44]	; 0x2c
 801283a:	e035      	b.n	80128a8 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xcc>
    { 
      pOutAddr = pOutBuffer + refline;
 801283c:	68ba      	ldr	r2, [r7, #8]
 801283e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012840:	4413      	add	r3, r2
 8012842:	627b      	str	r3, [r7, #36]	; 0x24
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8012844:	4b22      	ldr	r3, [pc, #136]	; (80128d0 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xf4>)
 8012846:	691b      	ldr	r3, [r3, #16]
 8012848:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801284a:	429a      	cmp	r2, r3
 801284c:	d229      	bcs.n	80128a2 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xc6>
      {  
        for(j=0; j < 8; j++)
 801284e:	2300      	movs	r3, #0
 8012850:	62bb      	str	r3, [r7, #40]	; 0x28
 8012852:	e01e      	b.n	8012892 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xb6>
        { 
          ySample =   (uint32_t)(*pLum);
 8012854:	6a3b      	ldr	r3, [r7, #32]
 8012856:	781b      	ldrb	r3, [r3, #0]
 8012858:	613b      	str	r3, [r7, #16]
          pOutAddr[1] =  ySample;
          pOutAddr[2] =  ySample;     
 
#elif (JPEG_RGB_FORMAT == JPEG_RGB565)
            
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);     
 801285a:	693b      	ldr	r3, [r7, #16]
 801285c:	08db      	lsrs	r3, r3, #3
 801285e:	b29b      	uxth	r3, r3
 8012860:	02db      	lsls	r3, r3, #11
 8012862:	b29a      	uxth	r2, r3
 8012864:	693b      	ldr	r3, [r7, #16]
 8012866:	089b      	lsrs	r3, r3, #2
 8012868:	b29b      	uxth	r3, r3
 801286a:	015b      	lsls	r3, r3, #5
 801286c:	b29b      	uxth	r3, r3
 801286e:	4313      	orrs	r3, r2
 8012870:	b29a      	uxth	r2, r3
 8012872:	693b      	ldr	r3, [r7, #16]
 8012874:	08db      	lsrs	r3, r3, #3
 8012876:	b29b      	uxth	r3, r3
 8012878:	4313      	orrs	r3, r2
 801287a:	b29a      	uxth	r2, r3
 801287c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801287e:	801a      	strh	r2, [r3, #0]
          
#endif /* JPEG_RGB_FORMAT */          
          
          pOutAddr += JPEG_BYTES_PER_PIXEL;
 8012880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012882:	3302      	adds	r3, #2
 8012884:	627b      	str	r3, [r7, #36]	; 0x24
          pLum++;
 8012886:	6a3b      	ldr	r3, [r7, #32]
 8012888:	3301      	adds	r3, #1
 801288a:	623b      	str	r3, [r7, #32]
        for(j=0; j < 8; j++)
 801288c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801288e:	3301      	adds	r3, #1
 8012890:	62bb      	str	r3, [r7, #40]	; 0x28
 8012892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012894:	2b07      	cmp	r3, #7
 8012896:	d9dd      	bls.n	8012854 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x78>
        }

        refline += JPEG_ConvertorParams.ScaledWidth;        
 8012898:	4b0d      	ldr	r3, [pc, #52]	; (80128d0 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xf4>)
 801289a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801289c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801289e:	4413      	add	r3, r2
 80128a0:	633b      	str	r3, [r7, #48]	; 0x30
    for(i= 0; i <  8; i++)
 80128a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128a4:	3301      	adds	r3, #1
 80128a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80128a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128aa:	2b07      	cmp	r3, #7
 80128ac:	d9c6      	bls.n	801283c <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x60>
      }
    }
    
    pInBuffer +=  GRAY_444_BLOCK_SIZE;    
 80128ae:	68fb      	ldr	r3, [r7, #12]
 80128b0:	3340      	adds	r3, #64	; 0x40
 80128b2:	60fb      	str	r3, [r7, #12]
  while(currentMCU < (numberMCU + BlockIndex))
 80128b4:	69fa      	ldr	r2, [r7, #28]
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	4413      	add	r3, r2
 80128ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80128bc:	429a      	cmp	r2, r3
 80128be:	d39a      	bcc.n	80127f6 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x1a>
  }
  return numberMCU;
 80128c0:	69fb      	ldr	r3, [r7, #28]
}
 80128c2:	4618      	mov	r0, r3
 80128c4:	373c      	adds	r7, #60	; 0x3c
 80128c6:	46bd      	mov	sp, r7
 80128c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128cc:	4770      	bx	lr
 80128ce:	bf00      	nop
 80128d0:	20023390 	.word	0x20023390

080128d4 <JPEG_MCU_YCCK_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCCK_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer, 
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
 80128d4:	b480      	push	{r7}
 80128d6:	b093      	sub	sp, #76	; 0x4c
 80128d8:	af00      	add	r7, sp, #0
 80128da:	60f8      	str	r0, [r7, #12]
 80128dc:	60b9      	str	r1, [r7, #8]
 80128de:	607a      	str	r2, [r7, #4]
 80128e0:	603b      	str	r3, [r7, #0]
  
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr, *pChrom;
  
  numberMCU = DataCount / CMYK_444_BLOCK_SIZE;
 80128e2:	683b      	ldr	r3, [r7, #0]
 80128e4:	0a1b      	lsrs	r3, r3, #8
 80128e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  currentMCU = BlockIndex;
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  

  while(currentMCU < (numberMCU + BlockIndex))
 80128ec:	e08b      	b.n	8012a06 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x132>
  {

    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 80128ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80128f0:	00da      	lsls	r2, r3, #3
 80128f2:	4b4c      	ldr	r3, [pc, #304]	; (8012a24 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x150>)
 80128f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80128f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80128fa:	00db      	lsls	r3, r3, #3
 80128fc:	62bb      	str	r3, [r7, #40]	; 0x28
    
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 80128fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012900:	00db      	lsls	r3, r3, #3
 8012902:	4a48      	ldr	r2, [pc, #288]	; (8012a24 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x150>)
 8012904:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8012906:	fbb3 f1f2 	udiv	r1, r3, r2
 801290a:	fb01 f202 	mul.w	r2, r1, r2
 801290e:	1a9b      	subs	r3, r3, r2
 8012910:	627b      	str	r3, [r7, #36]	; 0x24
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8012912:	4b44      	ldr	r3, [pc, #272]	; (8012a24 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x150>)
 8012914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012916:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012918:	fb03 f202 	mul.w	r2, r3, r2
 801291c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801291e:	005b      	lsls	r3, r3, #1
 8012920:	4413      	add	r3, r2
 8012922:	63bb      	str	r3, [r7, #56]	; 0x38

    currentMCU++;
 8012924:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012926:	3301      	adds	r3, #1
 8012928:	63fb      	str	r3, [r7, #60]	; 0x3c
    
    pChrom = pInBuffer;
 801292a:	68fb      	ldr	r3, [r7, #12]
 801292c:	633b      	str	r3, [r7, #48]	; 0x30
    
    for(i= 0; i <  8; i++)
 801292e:	2300      	movs	r3, #0
 8012930:	647b      	str	r3, [r7, #68]	; 0x44
 8012932:	e061      	b.n	80129f8 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x124>
    {
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8012934:	4b3b      	ldr	r3, [pc, #236]	; (8012a24 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x150>)
 8012936:	691b      	ldr	r3, [r3, #16]
 8012938:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801293a:	429a      	cmp	r2, r3
 801293c:	d259      	bcs.n	80129f2 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x11e>
      {
        pOutAddr = pOutBuffer+ refline;        
 801293e:	68ba      	ldr	r2, [r7, #8]
 8012940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012942:	4413      	add	r3, r2
 8012944:	637b      	str	r3, [r7, #52]	; 0x34

          for(j=0; j < 8; j++)
 8012946:	2300      	movs	r3, #0
 8012948:	643b      	str	r3, [r7, #64]	; 0x40
 801294a:	e04a      	b.n	80129e2 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x10e>
          {           
            color_k = (int32_t)(*(pChrom + 192));
 801294c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801294e:	33c0      	adds	r3, #192	; 0xc0
 8012950:	781b      	ldrb	r3, [r3, #0]
 8012952:	623b      	str	r3, [r7, #32]
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
 8012954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012956:	781b      	ldrb	r3, [r3, #0]
 8012958:	461a      	mov	r2, r3
 801295a:	6a3b      	ldr	r3, [r7, #32]
 801295c:	fb02 f303 	mul.w	r3, r2, r3
 8012960:	4a31      	ldr	r2, [pc, #196]	; (8012a28 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x154>)
 8012962:	fb82 1203 	smull	r1, r2, r2, r3
 8012966:	441a      	add	r2, r3
 8012968:	11d2      	asrs	r2, r2, #7
 801296a:	17db      	asrs	r3, r3, #31
 801296c:	1ad3      	subs	r3, r2, r3
 801296e:	61fb      	str	r3, [r7, #28]
            
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
 8012970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012972:	3340      	adds	r3, #64	; 0x40
 8012974:	781b      	ldrb	r3, [r3, #0]
 8012976:	461a      	mov	r2, r3
 8012978:	6a3b      	ldr	r3, [r7, #32]
 801297a:	fb02 f303 	mul.w	r3, r2, r3
 801297e:	4a2a      	ldr	r2, [pc, #168]	; (8012a28 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x154>)
 8012980:	fb82 1203 	smull	r1, r2, r2, r3
 8012984:	441a      	add	r2, r3
 8012986:	11d2      	asrs	r2, r2, #7
 8012988:	17db      	asrs	r3, r3, #31
 801298a:	1ad3      	subs	r3, r2, r3
 801298c:	61bb      	str	r3, [r7, #24]
            
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
 801298e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012990:	3380      	adds	r3, #128	; 0x80
 8012992:	781b      	ldrb	r3, [r3, #0]
 8012994:	461a      	mov	r2, r3
 8012996:	6a3b      	ldr	r3, [r7, #32]
 8012998:	fb02 f303 	mul.w	r3, r2, r3
 801299c:	4a22      	ldr	r2, [pc, #136]	; (8012a28 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x154>)
 801299e:	fb82 1203 	smull	r1, r2, r2, r3
 80129a2:	441a      	add	r2, r3
 80129a4:	11d2      	asrs	r2, r2, #7
 80129a6:	17db      	asrs	r3, r3, #31
 80129a8:	1ad3      	subs	r3, r2, r3
 80129aa:	617b      	str	r3, [r7, #20]
          pOutAddr[JPEG_BLUE_OFFSET/8]  =  c_blue;
          
#elif (JPEG_RGB_FORMAT == JPEG_RGB565)
            
          *(__IO uint16_t *)pOutAddr = 
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
 80129ac:	69fb      	ldr	r3, [r7, #28]
 80129ae:	10db      	asrs	r3, r3, #3
 80129b0:	02db      	lsls	r3, r3, #11
 80129b2:	b21a      	sxth	r2, r3
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
 80129b4:	69bb      	ldr	r3, [r7, #24]
 80129b6:	109b      	asrs	r3, r3, #2
 80129b8:	015b      	lsls	r3, r3, #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
 80129ba:	b21b      	sxth	r3, r3
 80129bc:	4313      	orrs	r3, r2
 80129be:	b21a      	sxth	r2, r3
            ((c_blue >> 3) << JPEG_BLUE_OFFSET);         
 80129c0:	697b      	ldr	r3, [r7, #20]
 80129c2:	10db      	asrs	r3, r3, #3
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
 80129c4:	b21b      	sxth	r3, r3
 80129c6:	4313      	orrs	r3, r2
 80129c8:	b21b      	sxth	r3, r3
 80129ca:	b29a      	uxth	r2, r3
          *(__IO uint16_t *)pOutAddr = 
 80129cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80129ce:	801a      	strh	r2, [r3, #0]
            
#endif /* JPEG_RGB_FORMAT */          
          
            pOutAddr += JPEG_BYTES_PER_PIXEL;
 80129d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80129d2:	3302      	adds	r3, #2
 80129d4:	637b      	str	r3, [r7, #52]	; 0x34
          
            pChrom++;
 80129d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129d8:	3301      	adds	r3, #1
 80129da:	633b      	str	r3, [r7, #48]	; 0x30
          for(j=0; j < 8; j++)
 80129dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80129de:	3301      	adds	r3, #1
 80129e0:	643b      	str	r3, [r7, #64]	; 0x40
 80129e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80129e4:	2b07      	cmp	r3, #7
 80129e6:	d9b1      	bls.n	801294c <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x78>
          }

        refline += JPEG_ConvertorParams.ScaledWidth;          
 80129e8:	4b0e      	ldr	r3, [pc, #56]	; (8012a24 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x150>)
 80129ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80129ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80129ee:	4413      	add	r3, r2
 80129f0:	63bb      	str	r3, [r7, #56]	; 0x38
    for(i= 0; i <  8; i++)
 80129f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80129f4:	3301      	adds	r3, #1
 80129f6:	647b      	str	r3, [r7, #68]	; 0x44
 80129f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80129fa:	2b07      	cmp	r3, #7
 80129fc:	d99a      	bls.n	8012934 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x60>
      }
    }   
    
    pInBuffer +=  CMYK_444_BLOCK_SIZE;
 80129fe:	68fb      	ldr	r3, [r7, #12]
 8012a00:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8012a04:	60fb      	str	r3, [r7, #12]
  while(currentMCU < (numberMCU + BlockIndex))
 8012a06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	4413      	add	r3, r2
 8012a0c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012a0e:	429a      	cmp	r2, r3
 8012a10:	f4ff af6d 	bcc.w	80128ee <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x1a>
  }
  return numberMCU;
 8012a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8012a16:	4618      	mov	r0, r3
 8012a18:	374c      	adds	r7, #76	; 0x4c
 8012a1a:	46bd      	mov	sp, r7
 8012a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a20:	4770      	bx	lr
 8012a22:	bf00      	nop
 8012a24:	20023390 	.word	0x20023390
 8012a28:	80808081 	.word	0x80808081

08012a2c <JPEG_GetDecodeColorConvertFunc>:
  *                      depending of the jpeg image color space and chroma sampling info. 
  * @param ImageNbMCUs : pointer to uint32_t, used to retrive the total number of MCU blocks in the jpeg image.  
  * @retval HAL status : HAL_OK or HAL_ERROR.
  */
HAL_StatusTypeDef JPEG_GetDecodeColorConvertFunc(JPEG_ConfTypeDef *pJpegInfo, JPEG_YCbCrToRGB_Convert_Function *pFunction, uint32_t *ImageNbMCUs)
{
 8012a2c:	b480      	push	{r7}
 8012a2e:	b087      	sub	sp, #28
 8012a30:	af00      	add	r7, sp, #0
 8012a32:	60f8      	str	r0, [r7, #12]
 8012a34:	60b9      	str	r1, [r7, #8]
 8012a36:	607a      	str	r2, [r7, #4]
  uint32_t hMCU, vMCU;

  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
 8012a38:	68fb      	ldr	r3, [r7, #12]
 8012a3a:	681b      	ldr	r3, [r3, #0]
 8012a3c:	4a7a      	ldr	r2, [pc, #488]	; (8012c28 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8012a3e:	6013      	str	r3, [r2, #0]
  JPEG_ConvertorParams.ImageWidth = pJpegInfo->ImageWidth;
 8012a40:	68fb      	ldr	r3, [r7, #12]
 8012a42:	68db      	ldr	r3, [r3, #12]
 8012a44:	4a78      	ldr	r2, [pc, #480]	; (8012c28 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8012a46:	6093      	str	r3, [r2, #8]
  JPEG_ConvertorParams.ImageHeight = pJpegInfo->ImageHeight;
 8012a48:	68fb      	ldr	r3, [r7, #12]
 8012a4a:	689b      	ldr	r3, [r3, #8]
 8012a4c:	4a76      	ldr	r2, [pc, #472]	; (8012c28 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8012a4e:	60d3      	str	r3, [r2, #12]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
 8012a50:	68fb      	ldr	r3, [r7, #12]
 8012a52:	68db      	ldr	r3, [r3, #12]
 8012a54:	68fa      	ldr	r2, [r7, #12]
 8012a56:	6892      	ldr	r2, [r2, #8]
 8012a58:	fb02 f303 	mul.w	r3, r2, r3
 8012a5c:	005b      	lsls	r3, r3, #1
 8012a5e:	4a72      	ldr	r2, [pc, #456]	; (8012c28 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8012a60:	6113      	str	r3, [r2, #16]
  
  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;  
 8012a62:	68fb      	ldr	r3, [r7, #12]
 8012a64:	685b      	ldr	r3, [r3, #4]
 8012a66:	4a70      	ldr	r2, [pc, #448]	; (8012c28 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8012a68:	6053      	str	r3, [r2, #4]
  if(JPEG_ConvertorParams.ColorSpace == JPEG_YCBCR_COLORSPACE)
 8012a6a:	4b6f      	ldr	r3, [pc, #444]	; (8012c28 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8012a6c:	681b      	ldr	r3, [r3, #0]
 8012a6e:	2b10      	cmp	r3, #16
 8012a70:	d155      	bne.n	8012b1e <JPEG_GetDecodeColorConvertFunc+0xf2>
  {
    if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_420_SUBSAMPLING)
 8012a72:	4b6d      	ldr	r3, [pc, #436]	; (8012c28 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8012a74:	685b      	ldr	r3, [r3, #4]
 8012a76:	2b01      	cmp	r3, #1
 8012a78:	d119      	bne.n	8012aae <JPEG_GetDecodeColorConvertFunc+0x82>
    {
      *pFunction = JPEG_MCU_YCbCr420_ARGB_ConvertBlocks;
 8012a7a:	68bb      	ldr	r3, [r7, #8]
 8012a7c:	4a6b      	ldr	r2, [pc, #428]	; (8012c2c <JPEG_GetDecodeColorConvertFunc+0x200>)
 8012a7e:	601a      	str	r2, [r3, #0]

      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;
 8012a80:	4b69      	ldr	r3, [pc, #420]	; (8012c28 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8012a82:	689b      	ldr	r3, [r3, #8]
 8012a84:	f003 030f 	and.w	r3, r3, #15
 8012a88:	4a67      	ldr	r2, [pc, #412]	; (8012c28 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8012a8a:	6153      	str	r3, [r2, #20]
      
      if(JPEG_ConvertorParams.LineOffset != 0)
 8012a8c:	4b66      	ldr	r3, [pc, #408]	; (8012c28 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8012a8e:	695b      	ldr	r3, [r3, #20]
 8012a90:	2b00      	cmp	r3, #0
 8012a92:	d005      	beq.n	8012aa0 <JPEG_GetDecodeColorConvertFunc+0x74>
      {
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;  
 8012a94:	4b64      	ldr	r3, [pc, #400]	; (8012c28 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8012a96:	695b      	ldr	r3, [r3, #20]
 8012a98:	f1c3 0310 	rsb	r3, r3, #16
 8012a9c:	4a62      	ldr	r2, [pc, #392]	; (8012c28 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8012a9e:	6153      	str	r3, [r2, #20]
      }
      JPEG_ConvertorParams.H_factor = 16;
 8012aa0:	4b61      	ldr	r3, [pc, #388]	; (8012c28 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8012aa2:	2210      	movs	r2, #16
 8012aa4:	61da      	str	r2, [r3, #28]
      JPEG_ConvertorParams.V_factor  = 16;
 8012aa6:	4b60      	ldr	r3, [pc, #384]	; (8012c28 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8012aa8:	2210      	movs	r2, #16
 8012aaa:	621a      	str	r2, [r3, #32]
 8012aac:	e075      	b.n	8012b9a <JPEG_GetDecodeColorConvertFunc+0x16e>
    }
    else if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_422_SUBSAMPLING)
 8012aae:	4b5e      	ldr	r3, [pc, #376]	; (8012c28 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8012ab0:	685b      	ldr	r3, [r3, #4]
 8012ab2:	2b02      	cmp	r3, #2
 8012ab4:	d119      	bne.n	8012aea <JPEG_GetDecodeColorConvertFunc+0xbe>
    {
      *pFunction =  JPEG_MCU_YCbCr422_ARGB_ConvertBlocks;
 8012ab6:	68bb      	ldr	r3, [r7, #8]
 8012ab8:	4a5d      	ldr	r2, [pc, #372]	; (8012c30 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8012aba:	601a      	str	r2, [r3, #0]

      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;
 8012abc:	4b5a      	ldr	r3, [pc, #360]	; (8012c28 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8012abe:	689b      	ldr	r3, [r3, #8]
 8012ac0:	f003 030f 	and.w	r3, r3, #15
 8012ac4:	4a58      	ldr	r2, [pc, #352]	; (8012c28 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8012ac6:	6153      	str	r3, [r2, #20]
      
      if(JPEG_ConvertorParams.LineOffset != 0)
 8012ac8:	4b57      	ldr	r3, [pc, #348]	; (8012c28 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8012aca:	695b      	ldr	r3, [r3, #20]
 8012acc:	2b00      	cmp	r3, #0
 8012ace:	d005      	beq.n	8012adc <JPEG_GetDecodeColorConvertFunc+0xb0>
      {
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;  
 8012ad0:	4b55      	ldr	r3, [pc, #340]	; (8012c28 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8012ad2:	695b      	ldr	r3, [r3, #20]
 8012ad4:	f1c3 0310 	rsb	r3, r3, #16
 8012ad8:	4a53      	ldr	r2, [pc, #332]	; (8012c28 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8012ada:	6153      	str	r3, [r2, #20]
      }
      JPEG_ConvertorParams.H_factor = 16;
 8012adc:	4b52      	ldr	r3, [pc, #328]	; (8012c28 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8012ade:	2210      	movs	r2, #16
 8012ae0:	61da      	str	r2, [r3, #28]
      JPEG_ConvertorParams.V_factor  = 8;
 8012ae2:	4b51      	ldr	r3, [pc, #324]	; (8012c28 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8012ae4:	2208      	movs	r2, #8
 8012ae6:	621a      	str	r2, [r3, #32]
 8012ae8:	e057      	b.n	8012b9a <JPEG_GetDecodeColorConvertFunc+0x16e>
    }
    else /*4:4:4*/
    {
      *pFunction =  JPEG_MCU_YCbCr444_ARGB_ConvertBlocks;
 8012aea:	68bb      	ldr	r3, [r7, #8]
 8012aec:	4a51      	ldr	r2, [pc, #324]	; (8012c34 <JPEG_GetDecodeColorConvertFunc+0x208>)
 8012aee:	601a      	str	r2, [r3, #0]

      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
 8012af0:	4b4d      	ldr	r3, [pc, #308]	; (8012c28 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8012af2:	689b      	ldr	r3, [r3, #8]
 8012af4:	f003 0307 	and.w	r3, r3, #7
 8012af8:	4a4b      	ldr	r2, [pc, #300]	; (8012c28 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8012afa:	6153      	str	r3, [r2, #20]
      
      if(JPEG_ConvertorParams.LineOffset != 0)
 8012afc:	4b4a      	ldr	r3, [pc, #296]	; (8012c28 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8012afe:	695b      	ldr	r3, [r3, #20]
 8012b00:	2b00      	cmp	r3, #0
 8012b02:	d005      	beq.n	8012b10 <JPEG_GetDecodeColorConvertFunc+0xe4>
      {
        JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;  
 8012b04:	4b48      	ldr	r3, [pc, #288]	; (8012c28 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8012b06:	695b      	ldr	r3, [r3, #20]
 8012b08:	f1c3 0308 	rsb	r3, r3, #8
 8012b0c:	4a46      	ldr	r2, [pc, #280]	; (8012c28 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8012b0e:	6153      	str	r3, [r2, #20]
      }
      JPEG_ConvertorParams.H_factor = 8;
 8012b10:	4b45      	ldr	r3, [pc, #276]	; (8012c28 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8012b12:	2208      	movs	r2, #8
 8012b14:	61da      	str	r2, [r3, #28]
      JPEG_ConvertorParams.V_factor  = 8;
 8012b16:	4b44      	ldr	r3, [pc, #272]	; (8012c28 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8012b18:	2208      	movs	r2, #8
 8012b1a:	621a      	str	r2, [r3, #32]
 8012b1c:	e03d      	b.n	8012b9a <JPEG_GetDecodeColorConvertFunc+0x16e>
    }   
  }
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_GRAYSCALE_COLORSPACE)
 8012b1e:	4b42      	ldr	r3, [pc, #264]	; (8012c28 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8012b20:	681b      	ldr	r3, [r3, #0]
 8012b22:	2b00      	cmp	r3, #0
 8012b24:	d119      	bne.n	8012b5a <JPEG_GetDecodeColorConvertFunc+0x12e>
  {
    *pFunction =  JPEG_MCU_Gray_ARGB_ConvertBlocks;
 8012b26:	68bb      	ldr	r3, [r7, #8]
 8012b28:	4a43      	ldr	r2, [pc, #268]	; (8012c38 <JPEG_GetDecodeColorConvertFunc+0x20c>)
 8012b2a:	601a      	str	r2, [r3, #0]

    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
 8012b2c:	4b3e      	ldr	r3, [pc, #248]	; (8012c28 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8012b2e:	689b      	ldr	r3, [r3, #8]
 8012b30:	f003 0307 	and.w	r3, r3, #7
 8012b34:	4a3c      	ldr	r2, [pc, #240]	; (8012c28 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8012b36:	6153      	str	r3, [r2, #20]
      
    if(JPEG_ConvertorParams.LineOffset != 0)
 8012b38:	4b3b      	ldr	r3, [pc, #236]	; (8012c28 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8012b3a:	695b      	ldr	r3, [r3, #20]
 8012b3c:	2b00      	cmp	r3, #0
 8012b3e:	d005      	beq.n	8012b4c <JPEG_GetDecodeColorConvertFunc+0x120>
    {
      JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;  
 8012b40:	4b39      	ldr	r3, [pc, #228]	; (8012c28 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8012b42:	695b      	ldr	r3, [r3, #20]
 8012b44:	f1c3 0308 	rsb	r3, r3, #8
 8012b48:	4a37      	ldr	r2, [pc, #220]	; (8012c28 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8012b4a:	6153      	str	r3, [r2, #20]
    }
    JPEG_ConvertorParams.H_factor = 8;
 8012b4c:	4b36      	ldr	r3, [pc, #216]	; (8012c28 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8012b4e:	2208      	movs	r2, #8
 8012b50:	61da      	str	r2, [r3, #28]
    JPEG_ConvertorParams.V_factor  = 8;
 8012b52:	4b35      	ldr	r3, [pc, #212]	; (8012c28 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8012b54:	2208      	movs	r2, #8
 8012b56:	621a      	str	r2, [r3, #32]
 8012b58:	e01f      	b.n	8012b9a <JPEG_GetDecodeColorConvertFunc+0x16e>
  }
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_CMYK_COLORSPACE)
 8012b5a:	4b33      	ldr	r3, [pc, #204]	; (8012c28 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8012b5c:	681b      	ldr	r3, [r3, #0]
 8012b5e:	2b30      	cmp	r3, #48	; 0x30
 8012b60:	d119      	bne.n	8012b96 <JPEG_GetDecodeColorConvertFunc+0x16a>
  {
    *pFunction =  JPEG_MCU_YCCK_ARGB_ConvertBlocks;
 8012b62:	68bb      	ldr	r3, [r7, #8]
 8012b64:	4a35      	ldr	r2, [pc, #212]	; (8012c3c <JPEG_GetDecodeColorConvertFunc+0x210>)
 8012b66:	601a      	str	r2, [r3, #0]

    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
 8012b68:	4b2f      	ldr	r3, [pc, #188]	; (8012c28 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8012b6a:	689b      	ldr	r3, [r3, #8]
 8012b6c:	f003 0307 	and.w	r3, r3, #7
 8012b70:	4a2d      	ldr	r2, [pc, #180]	; (8012c28 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8012b72:	6153      	str	r3, [r2, #20]
      
    if(JPEG_ConvertorParams.LineOffset != 0)
 8012b74:	4b2c      	ldr	r3, [pc, #176]	; (8012c28 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8012b76:	695b      	ldr	r3, [r3, #20]
 8012b78:	2b00      	cmp	r3, #0
 8012b7a:	d005      	beq.n	8012b88 <JPEG_GetDecodeColorConvertFunc+0x15c>
    {
      JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;  
 8012b7c:	4b2a      	ldr	r3, [pc, #168]	; (8012c28 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8012b7e:	695b      	ldr	r3, [r3, #20]
 8012b80:	f1c3 0308 	rsb	r3, r3, #8
 8012b84:	4a28      	ldr	r2, [pc, #160]	; (8012c28 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8012b86:	6153      	str	r3, [r2, #20]
    }
    JPEG_ConvertorParams.H_factor = 8;
 8012b88:	4b27      	ldr	r3, [pc, #156]	; (8012c28 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8012b8a:	2208      	movs	r2, #8
 8012b8c:	61da      	str	r2, [r3, #28]
    JPEG_ConvertorParams.V_factor  = 8;
 8012b8e:	4b26      	ldr	r3, [pc, #152]	; (8012c28 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8012b90:	2208      	movs	r2, #8
 8012b92:	621a      	str	r2, [r3, #32]
 8012b94:	e001      	b.n	8012b9a <JPEG_GetDecodeColorConvertFunc+0x16e>
  } 
  else
  {  
    return HAL_ERROR; /* Color space Not supported*/
 8012b96:	2301      	movs	r3, #1
 8012b98:	e040      	b.n	8012c1c <JPEG_GetDecodeColorConvertFunc+0x1f0>
  }
 
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
 8012b9a:	4b23      	ldr	r3, [pc, #140]	; (8012c28 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8012b9c:	689a      	ldr	r2, [r3, #8]
 8012b9e:	4b22      	ldr	r3, [pc, #136]	; (8012c28 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8012ba0:	695b      	ldr	r3, [r3, #20]
 8012ba2:	4413      	add	r3, r2
 8012ba4:	4a20      	ldr	r2, [pc, #128]	; (8012c28 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8012ba6:	6253      	str	r3, [r2, #36]	; 0x24
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
 8012ba8:	4b1f      	ldr	r3, [pc, #124]	; (8012c28 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8012baa:	689b      	ldr	r3, [r3, #8]
 8012bac:	005b      	lsls	r3, r3, #1
 8012bae:	4a1e      	ldr	r2, [pc, #120]	; (8012c28 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8012bb0:	6293      	str	r3, [r2, #40]	; 0x28
  
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
 8012bb2:	4b1d      	ldr	r3, [pc, #116]	; (8012c28 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8012bb4:	689a      	ldr	r2, [r3, #8]
 8012bb6:	4b1c      	ldr	r3, [pc, #112]	; (8012c28 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8012bb8:	69db      	ldr	r3, [r3, #28]
 8012bba:	fbb2 f3f3 	udiv	r3, r2, r3
 8012bbe:	617b      	str	r3, [r7, #20]
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
 8012bc0:	4b19      	ldr	r3, [pc, #100]	; (8012c28 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8012bc2:	689b      	ldr	r3, [r3, #8]
 8012bc4:	4a18      	ldr	r2, [pc, #96]	; (8012c28 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8012bc6:	69d2      	ldr	r2, [r2, #28]
 8012bc8:	fbb3 f1f2 	udiv	r1, r3, r2
 8012bcc:	fb01 f202 	mul.w	r2, r1, r2
 8012bd0:	1a9b      	subs	r3, r3, r2
 8012bd2:	2b00      	cmp	r3, #0
 8012bd4:	d002      	beq.n	8012bdc <JPEG_GetDecodeColorConvertFunc+0x1b0>
  {
    hMCU++; /*+1 for horizenatl incomplete MCU */                
 8012bd6:	697b      	ldr	r3, [r7, #20]
 8012bd8:	3301      	adds	r3, #1
 8012bda:	617b      	str	r3, [r7, #20]
  }

  vMCU = (JPEG_ConvertorParams.ImageHeight / JPEG_ConvertorParams.V_factor);
 8012bdc:	4b12      	ldr	r3, [pc, #72]	; (8012c28 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8012bde:	68da      	ldr	r2, [r3, #12]
 8012be0:	4b11      	ldr	r3, [pc, #68]	; (8012c28 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8012be2:	6a1b      	ldr	r3, [r3, #32]
 8012be4:	fbb2 f3f3 	udiv	r3, r2, r3
 8012be8:	613b      	str	r3, [r7, #16]
  if((JPEG_ConvertorParams.ImageHeight % JPEG_ConvertorParams.V_factor) != 0)
 8012bea:	4b0f      	ldr	r3, [pc, #60]	; (8012c28 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8012bec:	68db      	ldr	r3, [r3, #12]
 8012bee:	4a0e      	ldr	r2, [pc, #56]	; (8012c28 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8012bf0:	6a12      	ldr	r2, [r2, #32]
 8012bf2:	fbb3 f1f2 	udiv	r1, r3, r2
 8012bf6:	fb01 f202 	mul.w	r2, r1, r2
 8012bfa:	1a9b      	subs	r3, r3, r2
 8012bfc:	2b00      	cmp	r3, #0
 8012bfe:	d002      	beq.n	8012c06 <JPEG_GetDecodeColorConvertFunc+0x1da>
  {
    vMCU++; /*+1 for vertical incomplete MCU */                
 8012c00:	693b      	ldr	r3, [r7, #16]
 8012c02:	3301      	adds	r3, #1
 8012c04:	613b      	str	r3, [r7, #16]
  }
  JPEG_ConvertorParams.MCU_Total_Nb = (hMCU * vMCU);
 8012c06:	697b      	ldr	r3, [r7, #20]
 8012c08:	693a      	ldr	r2, [r7, #16]
 8012c0a:	fb02 f303 	mul.w	r3, r2, r3
 8012c0e:	4a06      	ldr	r2, [pc, #24]	; (8012c28 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8012c10:	62d3      	str	r3, [r2, #44]	; 0x2c
  *ImageNbMCUs = JPEG_ConvertorParams.MCU_Total_Nb;
 8012c12:	4b05      	ldr	r3, [pc, #20]	; (8012c28 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8012c14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012c16:	687b      	ldr	r3, [r7, #4]
 8012c18:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8012c1a:	2300      	movs	r3, #0
}
 8012c1c:	4618      	mov	r0, r3
 8012c1e:	371c      	adds	r7, #28
 8012c20:	46bd      	mov	sp, r7
 8012c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c26:	4770      	bx	lr
 8012c28:	20023390 	.word	0x20023390
 8012c2c:	08012161 	.word	0x08012161
 8012c30:	08012449 	.word	0x08012449
 8012c34:	0801264d 	.word	0x0801264d
 8012c38:	080127dd 	.word	0x080127dd
 8012c3c:	080128d5 	.word	0x080128d5

08012c40 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8012c40:	8880      	ldrh	r0, [r0, #4]
 8012c42:	4770      	bx	lr

08012c44 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8012c44:	b570      	push	{r4, r5, r6, lr}
 8012c46:	6803      	ldr	r3, [r0, #0]
 8012c48:	460c      	mov	r4, r1
 8012c4a:	2100      	movs	r1, #0
 8012c4c:	4605      	mov	r5, r0
 8012c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c50:	4798      	blx	r3
 8012c52:	4606      	mov	r6, r0
 8012c54:	682b      	ldr	r3, [r5, #0]
 8012c56:	4628      	mov	r0, r5
 8012c58:	1ba4      	subs	r4, r4, r6
 8012c5a:	6a1b      	ldr	r3, [r3, #32]
 8012c5c:	b2a4      	uxth	r4, r4
 8012c5e:	4798      	blx	r3
 8012c60:	fbb4 f0f0 	udiv	r0, r4, r0
 8012c64:	bd70      	pop	{r4, r5, r6, pc}

08012c66 <_ZN8touchgfx17AbstractPartition5clearEv>:
 8012c66:	2300      	movs	r3, #0
 8012c68:	8083      	strh	r3, [r0, #4]
 8012c6a:	4770      	bx	lr

08012c6c <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8012c6c:	b510      	push	{r4, lr}
 8012c6e:	6803      	ldr	r3, [r0, #0]
 8012c70:	4604      	mov	r4, r0
 8012c72:	8881      	ldrh	r1, [r0, #4]
 8012c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c76:	4798      	blx	r3
 8012c78:	88a3      	ldrh	r3, [r4, #4]
 8012c7a:	3301      	adds	r3, #1
 8012c7c:	80a3      	strh	r3, [r4, #4]
 8012c7e:	bd10      	pop	{r4, pc}

08012c80 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8012c80:	6803      	ldr	r3, [r0, #0]
 8012c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c84:	4718      	bx	r3

08012c86 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8012c86:	4770      	bx	lr

08012c88 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8012c88:	4a02      	ldr	r2, [pc, #8]	; (8012c94 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 8012c8a:	6002      	str	r2, [r0, #0]
 8012c8c:	2200      	movs	r2, #0
 8012c8e:	8082      	strh	r2, [r0, #4]
 8012c90:	4770      	bx	lr
 8012c92:	bf00      	nop
 8012c94:	080277e0 	.word	0x080277e0

08012c98 <_ZN8touchgfx9Container13getFirstChildEv>:
 8012c98:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8012c9a:	4770      	bx	lr

08012c9c <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8012c9c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8012c9e:	2000      	movs	r0, #0
 8012ca0:	b12b      	cbz	r3, 8012cae <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8012ca2:	b920      	cbnz	r0, 8012cae <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8012ca4:	1a5a      	subs	r2, r3, r1
 8012ca6:	699b      	ldr	r3, [r3, #24]
 8012ca8:	4250      	negs	r0, r2
 8012caa:	4150      	adcs	r0, r2
 8012cac:	e7f8      	b.n	8012ca0 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 8012cae:	4770      	bx	lr

08012cb0 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8012cb0:	2300      	movs	r3, #0
 8012cb2:	6148      	str	r0, [r1, #20]
 8012cb4:	618b      	str	r3, [r1, #24]
 8012cb6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8012cb8:	b913      	cbnz	r3, 8012cc0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 8012cba:	6281      	str	r1, [r0, #40]	; 0x28
 8012cbc:	4770      	bx	lr
 8012cbe:	4613      	mov	r3, r2
 8012cc0:	699a      	ldr	r2, [r3, #24]
 8012cc2:	2a00      	cmp	r2, #0
 8012cc4:	d1fb      	bne.n	8012cbe <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 8012cc6:	6199      	str	r1, [r3, #24]
 8012cc8:	4770      	bx	lr

08012cca <_ZN8touchgfx9Container9removeAllEv>:
 8012cca:	2200      	movs	r2, #0
 8012ccc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8012cce:	b123      	cbz	r3, 8012cda <_ZN8touchgfx9Container9removeAllEv+0x10>
 8012cd0:	6999      	ldr	r1, [r3, #24]
 8012cd2:	6281      	str	r1, [r0, #40]	; 0x28
 8012cd4:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8012cd8:	e7f8      	b.n	8012ccc <_ZN8touchgfx9Container9removeAllEv+0x2>
 8012cda:	4770      	bx	lr

08012cdc <_ZN8touchgfx9Container6unlinkEv>:
 8012cdc:	2300      	movs	r3, #0
 8012cde:	6283      	str	r3, [r0, #40]	; 0x28
 8012ce0:	4770      	bx	lr

08012ce2 <_ZNK8touchgfx9Container12getSolidRectEv>:
 8012ce2:	2200      	movs	r2, #0
 8012ce4:	8002      	strh	r2, [r0, #0]
 8012ce6:	8042      	strh	r2, [r0, #2]
 8012ce8:	8082      	strh	r2, [r0, #4]
 8012cea:	80c2      	strh	r2, [r0, #6]
 8012cec:	4770      	bx	lr

08012cee <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8012cee:	b570      	push	{r4, r5, r6, lr}
 8012cf0:	460d      	mov	r5, r1
 8012cf2:	4616      	mov	r6, r2
 8012cf4:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8012cf6:	b13c      	cbz	r4, 8012d08 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8012cf8:	6823      	ldr	r3, [r4, #0]
 8012cfa:	4620      	mov	r0, r4
 8012cfc:	4632      	mov	r2, r6
 8012cfe:	4629      	mov	r1, r5
 8012d00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012d02:	4798      	blx	r3
 8012d04:	69a4      	ldr	r4, [r4, #24]
 8012d06:	e7f6      	b.n	8012cf6 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8012d08:	bd70      	pop	{r4, r5, r6, pc}

08012d0a <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8012d0a:	b538      	push	{r3, r4, r5, lr}
 8012d0c:	460d      	mov	r5, r1
 8012d0e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8012d10:	b134      	cbz	r4, 8012d20 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8012d12:	682b      	ldr	r3, [r5, #0]
 8012d14:	4621      	mov	r1, r4
 8012d16:	4628      	mov	r0, r5
 8012d18:	689b      	ldr	r3, [r3, #8]
 8012d1a:	4798      	blx	r3
 8012d1c:	69a4      	ldr	r4, [r4, #24]
 8012d1e:	e7f7      	b.n	8012d10 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8012d20:	bd38      	pop	{r3, r4, r5, pc}

08012d22 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8012d22:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8012d24:	b19b      	cbz	r3, 8012d4e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8012d26:	428b      	cmp	r3, r1
 8012d28:	d109      	bne.n	8012d3e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8012d2a:	699a      	ldr	r2, [r3, #24]
 8012d2c:	2100      	movs	r1, #0
 8012d2e:	6159      	str	r1, [r3, #20]
 8012d30:	6282      	str	r2, [r0, #40]	; 0x28
 8012d32:	b902      	cbnz	r2, 8012d36 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8012d34:	4770      	bx	lr
 8012d36:	6199      	str	r1, [r3, #24]
 8012d38:	4770      	bx	lr
 8012d3a:	4613      	mov	r3, r2
 8012d3c:	b13a      	cbz	r2, 8012d4e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8012d3e:	699a      	ldr	r2, [r3, #24]
 8012d40:	428a      	cmp	r2, r1
 8012d42:	d1fa      	bne.n	8012d3a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8012d44:	698a      	ldr	r2, [r1, #24]
 8012d46:	619a      	str	r2, [r3, #24]
 8012d48:	2300      	movs	r3, #0
 8012d4a:	e9c1 3305 	strd	r3, r3, [r1, #20]
 8012d4e:	4770      	bx	lr

08012d50 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8012d50:	b410      	push	{r4}
 8012d52:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8012d54:	4604      	mov	r4, r0
 8012d56:	b92b      	cbnz	r3, 8012d64 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8012d58:	6803      	ldr	r3, [r0, #0]
 8012d5a:	4611      	mov	r1, r2
 8012d5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012d60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012d62:	4718      	bx	r3
 8012d64:	b941      	cbnz	r1, 8012d78 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8012d66:	6193      	str	r3, [r2, #24]
 8012d68:	6282      	str	r2, [r0, #40]	; 0x28
 8012d6a:	6154      	str	r4, [r2, #20]
 8012d6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012d70:	4770      	bx	lr
 8012d72:	4603      	mov	r3, r0
 8012d74:	2800      	cmp	r0, #0
 8012d76:	d0f9      	beq.n	8012d6c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8012d78:	4299      	cmp	r1, r3
 8012d7a:	6998      	ldr	r0, [r3, #24]
 8012d7c:	d1f9      	bne.n	8012d72 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 8012d7e:	6190      	str	r0, [r2, #24]
 8012d80:	618a      	str	r2, [r1, #24]
 8012d82:	e7f2      	b.n	8012d6a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

08012d84 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8012d84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d88:	461f      	mov	r7, r3
 8012d8a:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8012d8e:	460d      	mov	r5, r1
 8012d90:	4616      	mov	r6, r2
 8012d92:	b103      	cbz	r3, 8012d96 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8012d94:	6038      	str	r0, [r7, #0]
 8012d96:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8012d98:	b314      	cbz	r4, 8012de0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8012d9a:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8012d9e:	b1eb      	cbz	r3, 8012ddc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8012da0:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8012da4:	428d      	cmp	r5, r1
 8012da6:	db19      	blt.n	8012ddc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8012da8:	b289      	uxth	r1, r1
 8012daa:	8923      	ldrh	r3, [r4, #8]
 8012dac:	440b      	add	r3, r1
 8012dae:	b21b      	sxth	r3, r3
 8012db0:	429d      	cmp	r5, r3
 8012db2:	da13      	bge.n	8012ddc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8012db4:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8012db8:	4296      	cmp	r6, r2
 8012dba:	db0f      	blt.n	8012ddc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8012dbc:	b292      	uxth	r2, r2
 8012dbe:	8963      	ldrh	r3, [r4, #10]
 8012dc0:	4413      	add	r3, r2
 8012dc2:	b21b      	sxth	r3, r3
 8012dc4:	429e      	cmp	r6, r3
 8012dc6:	da09      	bge.n	8012ddc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8012dc8:	6823      	ldr	r3, [r4, #0]
 8012dca:	1ab2      	subs	r2, r6, r2
 8012dcc:	1a69      	subs	r1, r5, r1
 8012dce:	4620      	mov	r0, r4
 8012dd0:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
 8012dd4:	b212      	sxth	r2, r2
 8012dd6:	463b      	mov	r3, r7
 8012dd8:	b209      	sxth	r1, r1
 8012dda:	47c0      	blx	r8
 8012ddc:	69a4      	ldr	r4, [r4, #24]
 8012dde:	e7db      	b.n	8012d98 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8012de0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012de4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 8012de4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012de8:	4c6d      	ldr	r4, [pc, #436]	; (8012fa0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 8012dea:	b0a1      	sub	sp, #132	; 0x84
 8012dec:	4606      	mov	r6, r0
 8012dee:	6824      	ldr	r4, [r4, #0]
 8012df0:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 8012df2:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 8012df6:	2400      	movs	r4, #0
 8012df8:	9303      	str	r3, [sp, #12]
 8012dfa:	802c      	strh	r4, [r5, #0]
 8012dfc:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 8012dfe:	802c      	strh	r4, [r5, #0]
 8012e00:	601c      	str	r4, [r3, #0]
 8012e02:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8012e06:	f7ff ffbd 	bl	8012d84 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8012e0a:	f1b9 0f03 	cmp.w	r9, #3
 8012e0e:	f340 80c1 	ble.w	8012f94 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 8012e12:	4631      	mov	r1, r6
 8012e14:	a80c      	add	r0, sp, #48	; 0x30
 8012e16:	f003 fa5d 	bl	80162d4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8012e1a:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8012e1e:	9306      	str	r3, [sp, #24]
 8012e20:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8012e24:	9307      	str	r3, [sp, #28]
 8012e26:	9b03      	ldr	r3, [sp, #12]
 8012e28:	f8d3 a000 	ldr.w	sl, [r3]
 8012e2c:	f1ba 0f00 	cmp.w	sl, #0
 8012e30:	f000 80b3 	beq.w	8012f9a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 8012e34:	4651      	mov	r1, sl
 8012e36:	a810      	add	r0, sp, #64	; 0x40
 8012e38:	f003 fa4c 	bl	80162d4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8012e3c:	2002      	movs	r0, #2
 8012e3e:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 8012e42:	9b01      	ldr	r3, [sp, #4]
 8012e44:	9a06      	ldr	r2, [sp, #24]
 8012e46:	fb91 f1f0 	sdiv	r1, r1, r0
 8012e4a:	189d      	adds	r5, r3, r2
 8012e4c:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 8012e50:	9a07      	ldr	r2, [sp, #28]
 8012e52:	4419      	add	r1, r3
 8012e54:	9b02      	ldr	r3, [sp, #8]
 8012e56:	4413      	add	r3, r2
 8012e58:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 8012e5c:	1a6d      	subs	r5, r5, r1
 8012e5e:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 8012e62:	fb92 f2f0 	sdiv	r2, r2, r0
 8012e66:	440a      	add	r2, r1
 8012e68:	1a9b      	subs	r3, r3, r2
 8012e6a:	435b      	muls	r3, r3
 8012e6c:	fb05 3505 	mla	r5, r5, r5, r3
 8012e70:	4f4c      	ldr	r7, [pc, #304]	; (8012fa4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 8012e72:	ac10      	add	r4, sp, #64	; 0x40
 8012e74:	f1b9 0f0c 	cmp.w	r9, #12
 8012e78:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8012e7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012e7c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8012e7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012e80:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8012e82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012e84:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8012e88:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8012e8c:	f04f 0303 	mov.w	r3, #3
 8012e90:	bfd8      	it	le
 8012e92:	f109 32ff 	addle.w	r2, r9, #4294967295
 8012e96:	f04f 0400 	mov.w	r4, #0
 8012e9a:	f8cd 9000 	str.w	r9, [sp]
 8012e9e:	bfcc      	ite	gt
 8012ea0:	4698      	movgt	r8, r3
 8012ea2:	fb92 f8f3 	sdivle	r8, r2, r3
 8012ea6:	1c63      	adds	r3, r4, #1
 8012ea8:	aa10      	add	r2, sp, #64	; 0x40
 8012eaa:	f004 0401 	and.w	r4, r4, #1
 8012eae:	f04f 0b00 	mov.w	fp, #0
 8012eb2:	9308      	str	r3, [sp, #32]
 8012eb4:	9b00      	ldr	r3, [sp, #0]
 8012eb6:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 8012eba:	fb93 f3f8 	sdiv	r3, r3, r8
 8012ebe:	3404      	adds	r4, #4
 8012ec0:	b29b      	uxth	r3, r3
 8012ec2:	9304      	str	r3, [sp, #16]
 8012ec4:	9a04      	ldr	r2, [sp, #16]
 8012ec6:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8012eca:	fb13 f302 	smulbb	r3, r3, r2
 8012ece:	9a01      	ldr	r2, [sp, #4]
 8012ed0:	b29b      	uxth	r3, r3
 8012ed2:	1899      	adds	r1, r3, r2
 8012ed4:	9305      	str	r3, [sp, #20]
 8012ed6:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8012eda:	b209      	sxth	r1, r1
 8012edc:	4299      	cmp	r1, r3
 8012ede:	db4d      	blt.n	8012f7c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8012ee0:	8932      	ldrh	r2, [r6, #8]
 8012ee2:	4413      	add	r3, r2
 8012ee4:	b21b      	sxth	r3, r3
 8012ee6:	4299      	cmp	r1, r3
 8012ee8:	da48      	bge.n	8012f7c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8012eea:	9b04      	ldr	r3, [sp, #16]
 8012eec:	6827      	ldr	r7, [r4, #0]
 8012eee:	fb17 f703 	smulbb	r7, r7, r3
 8012ef2:	9b02      	ldr	r3, [sp, #8]
 8012ef4:	b2bf      	uxth	r7, r7
 8012ef6:	18fa      	adds	r2, r7, r3
 8012ef8:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8012efc:	b212      	sxth	r2, r2
 8012efe:	429a      	cmp	r2, r3
 8012f00:	db3c      	blt.n	8012f7c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8012f02:	8970      	ldrh	r0, [r6, #10]
 8012f04:	4403      	add	r3, r0
 8012f06:	b21b      	sxth	r3, r3
 8012f08:	429a      	cmp	r2, r3
 8012f0a:	da37      	bge.n	8012f7c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8012f0c:	2300      	movs	r3, #0
 8012f0e:	4630      	mov	r0, r6
 8012f10:	930b      	str	r3, [sp, #44]	; 0x2c
 8012f12:	ab0b      	add	r3, sp, #44	; 0x2c
 8012f14:	f7ff ff36 	bl	8012d84 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8012f18:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012f1a:	b37a      	cbz	r2, 8012f7c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8012f1c:	4552      	cmp	r2, sl
 8012f1e:	d02d      	beq.n	8012f7c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8012f20:	4611      	mov	r1, r2
 8012f22:	a80e      	add	r0, sp, #56	; 0x38
 8012f24:	9209      	str	r2, [sp, #36]	; 0x24
 8012f26:	f003 f9d5 	bl	80162d4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8012f2a:	f04f 0e02 	mov.w	lr, #2
 8012f2e:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 8012f32:	9a06      	ldr	r2, [sp, #24]
 8012f34:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 8012f38:	9b01      	ldr	r3, [sp, #4]
 8012f3a:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 8012f3e:	4413      	add	r3, r2
 8012f40:	9a07      	ldr	r2, [sp, #28]
 8012f42:	fb91 f1fe 	sdiv	r1, r1, lr
 8012f46:	fb9c fcfe 	sdiv	ip, ip, lr
 8012f4a:	4401      	add	r1, r0
 8012f4c:	1a58      	subs	r0, r3, r1
 8012f4e:	9b02      	ldr	r3, [sp, #8]
 8012f50:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 8012f54:	4413      	add	r3, r2
 8012f56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012f58:	448c      	add	ip, r1
 8012f5a:	eba3 030c 	sub.w	r3, r3, ip
 8012f5e:	435b      	muls	r3, r3
 8012f60:	fb00 3300 	mla	r3, r0, r0, r3
 8012f64:	42ab      	cmp	r3, r5
 8012f66:	d208      	bcs.n	8012f7a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 8012f68:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012f6a:	461d      	mov	r5, r3
 8012f6c:	9803      	ldr	r0, [sp, #12]
 8012f6e:	6001      	str	r1, [r0, #0]
 8012f70:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8012f72:	9805      	ldr	r0, [sp, #20]
 8012f74:	8008      	strh	r0, [r1, #0]
 8012f76:	992b      	ldr	r1, [sp, #172]	; 0xac
 8012f78:	800f      	strh	r7, [r1, #0]
 8012f7a:	4692      	mov	sl, r2
 8012f7c:	f10b 0b01 	add.w	fp, fp, #1
 8012f80:	3408      	adds	r4, #8
 8012f82:	f1bb 0f04 	cmp.w	fp, #4
 8012f86:	d19d      	bne.n	8012ec4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 8012f88:	9b00      	ldr	r3, [sp, #0]
 8012f8a:	9c08      	ldr	r4, [sp, #32]
 8012f8c:	444b      	add	r3, r9
 8012f8e:	4544      	cmp	r4, r8
 8012f90:	9300      	str	r3, [sp, #0]
 8012f92:	d188      	bne.n	8012ea6 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 8012f94:	b021      	add	sp, #132	; 0x84
 8012f96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f9a:	f04f 35ff 	mov.w	r5, #4294967295
 8012f9e:	e767      	b.n	8012e70 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 8012fa0:	200243dc 	.word	0x200243dc
 8012fa4:	080266b4 	.word	0x080266b4

08012fa8 <_ZN8touchgfx4RectaNERKS0_>:
 8012fa8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012fac:	f9b1 7000 	ldrsh.w	r7, [r1]
 8012fb0:	888c      	ldrh	r4, [r1, #4]
 8012fb2:	f9b0 9000 	ldrsh.w	r9, [r0]
 8012fb6:	443c      	add	r4, r7
 8012fb8:	b2a4      	uxth	r4, r4
 8012fba:	fa0f f884 	sxth.w	r8, r4
 8012fbe:	45c1      	cmp	r9, r8
 8012fc0:	da2f      	bge.n	8013022 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8012fc2:	8882      	ldrh	r2, [r0, #4]
 8012fc4:	444a      	add	r2, r9
 8012fc6:	b292      	uxth	r2, r2
 8012fc8:	fa0f fe82 	sxth.w	lr, r2
 8012fcc:	4577      	cmp	r7, lr
 8012fce:	da28      	bge.n	8013022 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8012fd0:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8012fd4:	88cb      	ldrh	r3, [r1, #6]
 8012fd6:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8012fda:	442b      	add	r3, r5
 8012fdc:	b21b      	sxth	r3, r3
 8012fde:	429e      	cmp	r6, r3
 8012fe0:	da1f      	bge.n	8013022 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8012fe2:	88c3      	ldrh	r3, [r0, #6]
 8012fe4:	4433      	add	r3, r6
 8012fe6:	b29b      	uxth	r3, r3
 8012fe8:	fa0f fc83 	sxth.w	ip, r3
 8012fec:	4565      	cmp	r5, ip
 8012fee:	da18      	bge.n	8013022 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8012ff0:	454f      	cmp	r7, r9
 8012ff2:	bfb8      	it	lt
 8012ff4:	464f      	movlt	r7, r9
 8012ff6:	42b5      	cmp	r5, r6
 8012ff8:	bfb8      	it	lt
 8012ffa:	4635      	movlt	r5, r6
 8012ffc:	45f0      	cmp	r8, lr
 8012ffe:	bfd8      	it	le
 8013000:	4622      	movle	r2, r4
 8013002:	1bd2      	subs	r2, r2, r7
 8013004:	8082      	strh	r2, [r0, #4]
 8013006:	884a      	ldrh	r2, [r1, #2]
 8013008:	88c9      	ldrh	r1, [r1, #6]
 801300a:	8007      	strh	r7, [r0, #0]
 801300c:	440a      	add	r2, r1
 801300e:	8045      	strh	r5, [r0, #2]
 8013010:	b292      	uxth	r2, r2
 8013012:	b211      	sxth	r1, r2
 8013014:	458c      	cmp	ip, r1
 8013016:	bfa8      	it	ge
 8013018:	4613      	movge	r3, r2
 801301a:	1b5b      	subs	r3, r3, r5
 801301c:	80c3      	strh	r3, [r0, #6]
 801301e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013022:	2300      	movs	r3, #0
 8013024:	8003      	strh	r3, [r0, #0]
 8013026:	8043      	strh	r3, [r0, #2]
 8013028:	8083      	strh	r3, [r0, #4]
 801302a:	80c3      	strh	r3, [r0, #6]
 801302c:	e7f7      	b.n	801301e <_ZN8touchgfx4RectaNERKS0_+0x76>

0801302e <_ZNK8touchgfx4Rect7isEmptyEv>:
 801302e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8013032:	2b00      	cmp	r3, #0
 8013034:	dd06      	ble.n	8013044 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 8013036:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 801303a:	2800      	cmp	r0, #0
 801303c:	bfcc      	ite	gt
 801303e:	2000      	movgt	r0, #0
 8013040:	2001      	movle	r0, #1
 8013042:	4770      	bx	lr
 8013044:	2001      	movs	r0, #1
 8013046:	4770      	bx	lr

08013048 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8013048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801304c:	2300      	movs	r3, #0
 801304e:	4604      	mov	r4, r0
 8013050:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8013052:	8003      	strh	r3, [r0, #0]
 8013054:	8043      	strh	r3, [r0, #2]
 8013056:	8083      	strh	r3, [r0, #4]
 8013058:	80c3      	strh	r3, [r0, #6]
 801305a:	2d00      	cmp	r5, #0
 801305c:	d040      	beq.n	80130e0 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 801305e:	1d28      	adds	r0, r5, #4
 8013060:	f7ff ffe5 	bl	801302e <_ZNK8touchgfx4Rect7isEmptyEv>
 8013064:	b988      	cbnz	r0, 801308a <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8013066:	4620      	mov	r0, r4
 8013068:	f7ff ffe1 	bl	801302e <_ZNK8touchgfx4Rect7isEmptyEv>
 801306c:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8013070:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8013074:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8013078:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 801307c:	b138      	cbz	r0, 801308e <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 801307e:	8022      	strh	r2, [r4, #0]
 8013080:	8063      	strh	r3, [r4, #2]
 8013082:	f8a4 e004 	strh.w	lr, [r4, #4]
 8013086:	f8a4 c006 	strh.w	ip, [r4, #6]
 801308a:	69ad      	ldr	r5, [r5, #24]
 801308c:	e7e5      	b.n	801305a <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 801308e:	f9b4 0000 	ldrsh.w	r0, [r4]
 8013092:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8013096:	4290      	cmp	r0, r2
 8013098:	4607      	mov	r7, r0
 801309a:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 801309e:	460e      	mov	r6, r1
 80130a0:	bfa8      	it	ge
 80130a2:	4617      	movge	r7, r2
 80130a4:	4299      	cmp	r1, r3
 80130a6:	4472      	add	r2, lr
 80130a8:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 80130ac:	bfa8      	it	ge
 80130ae:	461e      	movge	r6, r3
 80130b0:	4440      	add	r0, r8
 80130b2:	4471      	add	r1, lr
 80130b4:	4463      	add	r3, ip
 80130b6:	b200      	sxth	r0, r0
 80130b8:	8027      	strh	r7, [r4, #0]
 80130ba:	b212      	sxth	r2, r2
 80130bc:	8066      	strh	r6, [r4, #2]
 80130be:	b209      	sxth	r1, r1
 80130c0:	b21b      	sxth	r3, r3
 80130c2:	4290      	cmp	r0, r2
 80130c4:	bfac      	ite	ge
 80130c6:	ebc7 0200 	rsbge	r2, r7, r0
 80130ca:	ebc7 0202 	rsblt	r2, r7, r2
 80130ce:	4299      	cmp	r1, r3
 80130d0:	bfac      	ite	ge
 80130d2:	ebc6 0301 	rsbge	r3, r6, r1
 80130d6:	ebc6 0303 	rsblt	r3, r6, r3
 80130da:	80a2      	strh	r2, [r4, #4]
 80130dc:	80e3      	strh	r3, [r4, #6]
 80130de:	e7d4      	b.n	801308a <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 80130e0:	4620      	mov	r0, r4
 80130e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080130e6 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 80130e6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80130ea:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80130ee:	b383      	cbz	r3, 8013152 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 80130f0:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80130f2:	b374      	cbz	r4, 8013152 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 80130f4:	f9b1 5000 	ldrsh.w	r5, [r1]
 80130f8:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 80130fc:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8013100:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8013104:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8013108:	b303      	cbz	r3, 801314c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 801310a:	4668      	mov	r0, sp
 801310c:	1d21      	adds	r1, r4, #4
 801310e:	f8ad 5000 	strh.w	r5, [sp]
 8013112:	f8ad 6002 	strh.w	r6, [sp, #2]
 8013116:	f8ad 7004 	strh.w	r7, [sp, #4]
 801311a:	f8ad 8006 	strh.w	r8, [sp, #6]
 801311e:	f7ff ff43 	bl	8012fa8 <_ZN8touchgfx4RectaNERKS0_>
 8013122:	4668      	mov	r0, sp
 8013124:	f7ff ff83 	bl	801302e <_ZNK8touchgfx4Rect7isEmptyEv>
 8013128:	b980      	cbnz	r0, 801314c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 801312a:	f8bd 3000 	ldrh.w	r3, [sp]
 801312e:	4669      	mov	r1, sp
 8013130:	88a2      	ldrh	r2, [r4, #4]
 8013132:	4620      	mov	r0, r4
 8013134:	1a9b      	subs	r3, r3, r2
 8013136:	88e2      	ldrh	r2, [r4, #6]
 8013138:	f8ad 3000 	strh.w	r3, [sp]
 801313c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8013140:	1a9b      	subs	r3, r3, r2
 8013142:	f8ad 3002 	strh.w	r3, [sp, #2]
 8013146:	6823      	ldr	r3, [r4, #0]
 8013148:	689b      	ldr	r3, [r3, #8]
 801314a:	4798      	blx	r3
 801314c:	69a4      	ldr	r4, [r4, #24]
 801314e:	2c00      	cmp	r4, #0
 8013150:	d1d8      	bne.n	8013104 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 8013152:	b002      	add	sp, #8
 8013154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013158 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8013158:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801315a:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 801315e:	460d      	mov	r5, r1
 8013160:	4616      	mov	r6, r2
 8013162:	b323      	cbz	r3, 80131ae <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8013164:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8013166:	b314      	cbz	r4, 80131ae <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8013168:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 801316c:	b1eb      	cbz	r3, 80131aa <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 801316e:	6828      	ldr	r0, [r5, #0]
 8013170:	466b      	mov	r3, sp
 8013172:	6869      	ldr	r1, [r5, #4]
 8013174:	c303      	stmia	r3!, {r0, r1}
 8013176:	4668      	mov	r0, sp
 8013178:	1d21      	adds	r1, r4, #4
 801317a:	f7ff ff15 	bl	8012fa8 <_ZN8touchgfx4RectaNERKS0_>
 801317e:	4668      	mov	r0, sp
 8013180:	f7ff ff55 	bl	801302e <_ZNK8touchgfx4Rect7isEmptyEv>
 8013184:	b988      	cbnz	r0, 80131aa <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8013186:	f8bd 3000 	ldrh.w	r3, [sp]
 801318a:	4669      	mov	r1, sp
 801318c:	88a2      	ldrh	r2, [r4, #4]
 801318e:	4620      	mov	r0, r4
 8013190:	1a9b      	subs	r3, r3, r2
 8013192:	88e2      	ldrh	r2, [r4, #6]
 8013194:	f8ad 3000 	strh.w	r3, [sp]
 8013198:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801319c:	1a9b      	subs	r3, r3, r2
 801319e:	4632      	mov	r2, r6
 80131a0:	f8ad 3002 	strh.w	r3, [sp, #2]
 80131a4:	6823      	ldr	r3, [r4, #0]
 80131a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80131a8:	4798      	blx	r3
 80131aa:	69a4      	ldr	r4, [r4, #24]
 80131ac:	e7db      	b.n	8013166 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 80131ae:	b002      	add	sp, #8
 80131b0:	bd70      	pop	{r4, r5, r6, pc}

080131b2 <_ZN8touchgfx3HAL15InvalidateCacheEv>:
 80131b2:	4770      	bx	lr

080131b4 <_ZN8touchgfx3HAL10FlushCacheEv>:
 80131b4:	4770      	bx	lr

080131b6 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 80131b6:	6803      	ldr	r3, [r0, #0]
 80131b8:	b513      	push	{r0, r1, r4, lr}
 80131ba:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
 80131be:	2300      	movs	r3, #0
 80131c0:	e9cd 3300 	strd	r3, r3, [sp]
 80131c4:	466b      	mov	r3, sp
 80131c6:	47a0      	blx	r4
 80131c8:	b002      	add	sp, #8
 80131ca:	bd10      	pop	{r4, pc}

080131cc <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 80131cc:	2301      	movs	r3, #1
 80131ce:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 80131d2:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 80131d6:	4770      	bx	lr

080131d8 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 80131d8:	2301      	movs	r3, #1
 80131da:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 80131de:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 80131e2:	4770      	bx	lr

080131e4 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 80131e4:	6843      	ldr	r3, [r0, #4]
 80131e6:	2201      	movs	r2, #1
 80131e8:	725a      	strb	r2, [r3, #9]
 80131ea:	6840      	ldr	r0, [r0, #4]
 80131ec:	6803      	ldr	r3, [r0, #0]
 80131ee:	691b      	ldr	r3, [r3, #16]
 80131f0:	4718      	bx	r3

080131f2 <_ZN8touchgfx3HAL8flushDMAEv>:
 80131f2:	6840      	ldr	r0, [r0, #4]
 80131f4:	6803      	ldr	r3, [r0, #0]
 80131f6:	689b      	ldr	r3, [r3, #8]
 80131f8:	4718      	bx	r3

080131fa <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 80131fa:	b530      	push	{r4, r5, lr}
 80131fc:	b08b      	sub	sp, #44	; 0x2c
 80131fe:	6804      	ldr	r4, [r0, #0]
 8013200:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 8013204:	9509      	str	r5, [sp, #36]	; 0x24
 8013206:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 801320a:	9508      	str	r5, [sp, #32]
 801320c:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 8013210:	9507      	str	r5, [sp, #28]
 8013212:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 8013216:	9506      	str	r5, [sp, #24]
 8013218:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 801321c:	9505      	str	r5, [sp, #20]
 801321e:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8013222:	9504      	str	r5, [sp, #16]
 8013224:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 8013228:	9503      	str	r5, [sp, #12]
 801322a:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 801322e:	9502      	str	r5, [sp, #8]
 8013230:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8013234:	e9cd 3500 	strd	r3, r5, [sp]
 8013238:	4613      	mov	r3, r2
 801323a:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 801323c:	2200      	movs	r2, #0
 801323e:	47a0      	blx	r4
 8013240:	b00b      	add	sp, #44	; 0x2c
 8013242:	bd30      	pop	{r4, r5, pc}

08013244 <_ZN8touchgfx3HAL10beginFrameEv>:
 8013244:	4b04      	ldr	r3, [pc, #16]	; (8013258 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 8013246:	781b      	ldrb	r3, [r3, #0]
 8013248:	b123      	cbz	r3, 8013254 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 801324a:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 801324e:	f080 0001 	eor.w	r0, r0, #1
 8013252:	4770      	bx	lr
 8013254:	2001      	movs	r0, #1
 8013256:	4770      	bx	lr
 8013258:	200243da 	.word	0x200243da

0801325c <_ZN8touchgfx3HAL8endFrameEv>:
 801325c:	b510      	push	{r4, lr}
 801325e:	4604      	mov	r4, r0
 8013260:	6840      	ldr	r0, [r0, #4]
 8013262:	6803      	ldr	r3, [r0, #0]
 8013264:	689b      	ldr	r3, [r3, #8]
 8013266:	4798      	blx	r3
 8013268:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 801326c:	b113      	cbz	r3, 8013274 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 801326e:	2301      	movs	r3, #1
 8013270:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8013274:	bd10      	pop	{r4, pc}

08013276 <_ZN8touchgfx3HAL10initializeEv>:
 8013276:	b510      	push	{r4, lr}
 8013278:	4604      	mov	r4, r0
 801327a:	f7fb ff5f 	bl	800f13c <_ZN8touchgfx10OSWrappers10initializeEv>
 801327e:	f7fa fc33 	bl	800dae8 <_ZN8touchgfx4GPIO4initEv>
 8013282:	6860      	ldr	r0, [r4, #4]
 8013284:	6803      	ldr	r3, [r0, #0]
 8013286:	68db      	ldr	r3, [r3, #12]
 8013288:	4798      	blx	r3
 801328a:	68e0      	ldr	r0, [r4, #12]
 801328c:	6803      	ldr	r3, [r0, #0]
 801328e:	689b      	ldr	r3, [r3, #8]
 8013290:	4798      	blx	r3
 8013292:	6823      	ldr	r3, [r4, #0]
 8013294:	4620      	mov	r0, r4
 8013296:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013298:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801329c:	4718      	bx	r3

0801329e <_ZN8touchgfx3HAL9taskEntryEv>:
 801329e:	b508      	push	{r3, lr}
 80132a0:	6803      	ldr	r3, [r0, #0]
 80132a2:	4604      	mov	r4, r0
 80132a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80132a8:	4798      	blx	r3
 80132aa:	6823      	ldr	r3, [r4, #0]
 80132ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80132ae:	4620      	mov	r0, r4
 80132b0:	4798      	blx	r3
 80132b2:	f7fb ffa9 	bl	800f208 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 80132b6:	6823      	ldr	r3, [r4, #0]
 80132b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80132ba:	e7f8      	b.n	80132ae <_ZN8touchgfx3HAL9taskEntryEv+0x10>

080132bc <_ZN8touchgfx3HAL4tickEv>:
 80132bc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80132be:	6803      	ldr	r3, [r0, #0]
 80132c0:	4604      	mov	r4, r0
 80132c2:	4d5b      	ldr	r5, [pc, #364]	; (8013430 <_ZN8touchgfx3HAL4tickEv+0x174>)
 80132c4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80132c8:	4798      	blx	r3
 80132ca:	2800      	cmp	r0, #0
 80132cc:	f000 8095 	beq.w	80133fa <_ZN8touchgfx3HAL4tickEv+0x13e>
 80132d0:	2001      	movs	r0, #1
 80132d2:	2600      	movs	r6, #0
 80132d4:	f7fa fc10 	bl	800daf8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 80132d8:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 80132dc:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 80132e0:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 80132e4:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 80132e8:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 80132ec:	b133      	cbz	r3, 80132fc <_ZN8touchgfx3HAL4tickEv+0x40>
 80132ee:	6823      	ldr	r3, [r4, #0]
 80132f0:	4620      	mov	r0, r4
 80132f2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80132f6:	4798      	blx	r3
 80132f8:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 80132fc:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8013300:	2601      	movs	r6, #1
 8013302:	6862      	ldr	r2, [r4, #4]
 8013304:	f083 0301 	eor.w	r3, r3, #1
 8013308:	702e      	strb	r6, [r5, #0]
 801330a:	7253      	strb	r3, [r2, #9]
 801330c:	f001 ff02 	bl	8015114 <_ZN8touchgfx11Application11getInstanceEv>
 8013310:	6803      	ldr	r3, [r0, #0]
 8013312:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013314:	4798      	blx	r3
 8013316:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 801331a:	b90b      	cbnz	r3, 8013320 <_ZN8touchgfx3HAL4tickEv+0x64>
 801331c:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 8013320:	f001 fef8 	bl	8015114 <_ZN8touchgfx11Application11getInstanceEv>
 8013324:	6803      	ldr	r3, [r0, #0]
 8013326:	695b      	ldr	r3, [r3, #20]
 8013328:	4798      	blx	r3
 801332a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801332c:	6803      	ldr	r3, [r0, #0]
 801332e:	691b      	ldr	r3, [r3, #16]
 8013330:	4798      	blx	r3
 8013332:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8013336:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 801333a:	3b01      	subs	r3, #1
 801333c:	b2db      	uxtb	r3, r3
 801333e:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8013342:	b10a      	cbz	r2, 8013348 <_ZN8touchgfx3HAL4tickEv+0x8c>
 8013344:	2b00      	cmp	r3, #0
 8013346:	d1eb      	bne.n	8013320 <_ZN8touchgfx3HAL4tickEv+0x64>
 8013348:	4a3a      	ldr	r2, [pc, #232]	; (8013434 <_ZN8touchgfx3HAL4tickEv+0x178>)
 801334a:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 801334e:	7813      	ldrb	r3, [r2, #0]
 8013350:	3301      	adds	r3, #1
 8013352:	b25b      	sxtb	r3, r3
 8013354:	4299      	cmp	r1, r3
 8013356:	7013      	strb	r3, [r2, #0]
 8013358:	dc10      	bgt.n	801337c <_ZN8touchgfx3HAL4tickEv+0xc0>
 801335a:	2300      	movs	r3, #0
 801335c:	68e0      	ldr	r0, [r4, #12]
 801335e:	a902      	add	r1, sp, #8
 8013360:	7013      	strb	r3, [r2, #0]
 8013362:	aa03      	add	r2, sp, #12
 8013364:	6803      	ldr	r3, [r0, #0]
 8013366:	68db      	ldr	r3, [r3, #12]
 8013368:	4798      	blx	r3
 801336a:	6823      	ldr	r3, [r4, #0]
 801336c:	2800      	cmp	r0, #0
 801336e:	d050      	beq.n	8013412 <_ZN8touchgfx3HAL4tickEv+0x156>
 8013370:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8013374:	4620      	mov	r0, r4
 8013376:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801337a:	4798      	blx	r3
 801337c:	2300      	movs	r3, #0
 801337e:	6960      	ldr	r0, [r4, #20]
 8013380:	f88d 3007 	strb.w	r3, [sp, #7]
 8013384:	b158      	cbz	r0, 801339e <_ZN8touchgfx3HAL4tickEv+0xe2>
 8013386:	6803      	ldr	r3, [r0, #0]
 8013388:	f10d 0107 	add.w	r1, sp, #7
 801338c:	68db      	ldr	r3, [r3, #12]
 801338e:	4798      	blx	r3
 8013390:	b128      	cbz	r0, 801339e <_ZN8touchgfx3HAL4tickEv+0xe2>
 8013392:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013394:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8013398:	6803      	ldr	r3, [r0, #0]
 801339a:	68db      	ldr	r3, [r3, #12]
 801339c:	4798      	blx	r3
 801339e:	f104 001c 	add.w	r0, r4, #28
 80133a2:	f010 f81f 	bl	80233e4 <_ZN8touchgfx8Gestures4tickEv>
 80133a6:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 80133aa:	b30b      	cbz	r3, 80133f0 <_ZN8touchgfx3HAL4tickEv+0x134>
 80133ac:	6920      	ldr	r0, [r4, #16]
 80133ae:	6803      	ldr	r3, [r0, #0]
 80133b0:	691b      	ldr	r3, [r3, #16]
 80133b2:	4798      	blx	r3
 80133b4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80133b6:	4606      	mov	r6, r0
 80133b8:	b903      	cbnz	r3, 80133bc <_ZN8touchgfx3HAL4tickEv+0x100>
 80133ba:	6720      	str	r0, [r4, #112]	; 0x70
 80133bc:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80133be:	4a1e      	ldr	r2, [pc, #120]	; (8013438 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 80133c0:	1af3      	subs	r3, r6, r3
 80133c2:	4293      	cmp	r3, r2
 80133c4:	d914      	bls.n	80133f0 <_ZN8touchgfx3HAL4tickEv+0x134>
 80133c6:	6920      	ldr	r0, [r4, #16]
 80133c8:	6803      	ldr	r3, [r0, #0]
 80133ca:	699b      	ldr	r3, [r3, #24]
 80133cc:	4798      	blx	r3
 80133ce:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80133d0:	2264      	movs	r2, #100	; 0x64
 80133d2:	1af3      	subs	r3, r6, r3
 80133d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80133d8:	fbb0 f0f3 	udiv	r0, r0, r3
 80133dc:	2800      	cmp	r0, #0
 80133de:	dc1d      	bgt.n	801341c <_ZN8touchgfx3HAL4tickEv+0x160>
 80133e0:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 80133e4:	6920      	ldr	r0, [r4, #16]
 80133e6:	2100      	movs	r1, #0
 80133e8:	6803      	ldr	r3, [r0, #0]
 80133ea:	69db      	ldr	r3, [r3, #28]
 80133ec:	4798      	blx	r3
 80133ee:	6726      	str	r6, [r4, #112]	; 0x70
 80133f0:	f001 fe90 	bl	8015114 <_ZN8touchgfx11Application11getInstanceEv>
 80133f4:	6803      	ldr	r3, [r0, #0]
 80133f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80133f8:	4798      	blx	r3
 80133fa:	6823      	ldr	r3, [r4, #0]
 80133fc:	4620      	mov	r0, r4
 80133fe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8013402:	4798      	blx	r3
 8013404:	2001      	movs	r0, #1
 8013406:	f7fa fb93 	bl	800db30 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 801340a:	2300      	movs	r3, #0
 801340c:	702b      	strb	r3, [r5, #0]
 801340e:	b004      	add	sp, #16
 8013410:	bd70      	pop	{r4, r5, r6, pc}
 8013412:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8013416:	4620      	mov	r0, r4
 8013418:	4798      	blx	r3
 801341a:	e7af      	b.n	801337c <_ZN8touchgfx3HAL4tickEv+0xc0>
 801341c:	2863      	cmp	r0, #99	; 0x63
 801341e:	bfcb      	itete	gt
 8013420:	2300      	movgt	r3, #0
 8013422:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 8013426:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 801342a:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 801342e:	e7d9      	b.n	80133e4 <_ZN8touchgfx3HAL4tickEv+0x128>
 8013430:	200243e0 	.word	0x200243e0
 8013434:	200243e1 	.word	0x200243e1
 8013438:	05f5e100 	.word	0x05f5e100

0801343c <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 801343c:	f7fb bec0 	b.w	800f1c0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08013440 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8013440:	6581      	str	r1, [r0, #88]	; 0x58
 8013442:	301c      	adds	r0, #28
 8013444:	f00f bfcc 	b.w	80233e0 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08013448 <_ZN8touchgfx3HAL5touchEll>:
 8013448:	b530      	push	{r4, r5, lr}
 801344a:	b087      	sub	sp, #28
 801344c:	4604      	mov	r4, r0
 801344e:	a804      	add	r0, sp, #16
 8013450:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8013454:	f001 fc68 	bl	8014d28 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8013458:	9b04      	ldr	r3, [sp, #16]
 801345a:	a906      	add	r1, sp, #24
 801345c:	a803      	add	r0, sp, #12
 801345e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8013462:	9b05      	ldr	r3, [sp, #20]
 8013464:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8013468:	f001 fcb0 	bl	8014dcc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 801346c:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 8013470:	f104 001c 	add.w	r0, r4, #28
 8013474:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8013478:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 801347c:	b189      	cbz	r1, 80134a2 <_ZN8touchgfx3HAL5touchEll+0x5a>
 801347e:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 8013482:	9300      	str	r3, [sp, #0]
 8013484:	4613      	mov	r3, r2
 8013486:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 801348a:	462a      	mov	r2, r5
 801348c:	f00f ffb8 	bl	8023400 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8013490:	b128      	cbz	r0, 801349e <_ZN8touchgfx3HAL5touchEll+0x56>
 8013492:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8013496:	65e3      	str	r3, [r4, #92]	; 0x5c
 8013498:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801349c:	6623      	str	r3, [r4, #96]	; 0x60
 801349e:	b007      	add	sp, #28
 80134a0:	bd30      	pop	{r4, r5, pc}
 80134a2:	f00f ffed 	bl	8023480 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 80134a6:	2301      	movs	r3, #1
 80134a8:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 80134ac:	e7f1      	b.n	8013492 <_ZN8touchgfx3HAL5touchEll+0x4a>

080134ae <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 80134ae:	b510      	push	{r4, lr}
 80134b0:	2b00      	cmp	r3, #0
 80134b2:	d046      	beq.n	8013542 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 80134b4:	ea81 0002 	eor.w	r0, r1, r2
 80134b8:	07c4      	lsls	r4, r0, #31
 80134ba:	d508      	bpl.n	80134ce <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 80134bc:	440b      	add	r3, r1
 80134be:	3a01      	subs	r2, #1
 80134c0:	428b      	cmp	r3, r1
 80134c2:	d93e      	bls.n	8013542 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 80134c4:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80134c8:	f801 0b01 	strb.w	r0, [r1], #1
 80134cc:	e7f8      	b.n	80134c0 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 80134ce:	07d0      	lsls	r0, r2, #31
 80134d0:	bf42      	ittt	mi
 80134d2:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 80134d6:	f103 33ff 	addmi.w	r3, r3, #4294967295
 80134da:	f801 0b01 	strbmi.w	r0, [r1], #1
 80134de:	2b01      	cmp	r3, #1
 80134e0:	d911      	bls.n	8013506 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 80134e2:	ea81 0402 	eor.w	r4, r1, r2
 80134e6:	4610      	mov	r0, r2
 80134e8:	07a4      	lsls	r4, r4, #30
 80134ea:	d022      	beq.n	8013532 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 80134ec:	f023 0401 	bic.w	r4, r3, #1
 80134f0:	440c      	add	r4, r1
 80134f2:	428c      	cmp	r4, r1
 80134f4:	4602      	mov	r2, r0
 80134f6:	d904      	bls.n	8013502 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 80134f8:	8812      	ldrh	r2, [r2, #0]
 80134fa:	3002      	adds	r0, #2
 80134fc:	f821 2b02 	strh.w	r2, [r1], #2
 8013500:	e7f7      	b.n	80134f2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 8013502:	f003 0301 	and.w	r3, r3, #1
 8013506:	f023 0003 	bic.w	r0, r3, #3
 801350a:	4408      	add	r0, r1
 801350c:	4288      	cmp	r0, r1
 801350e:	4614      	mov	r4, r2
 8013510:	d904      	bls.n	801351c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 8013512:	6824      	ldr	r4, [r4, #0]
 8013514:	3204      	adds	r2, #4
 8013516:	f841 4b04 	str.w	r4, [r1], #4
 801351a:	e7f7      	b.n	801350c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 801351c:	f003 0303 	and.w	r3, r3, #3
 8013520:	3a01      	subs	r2, #1
 8013522:	440b      	add	r3, r1
 8013524:	428b      	cmp	r3, r1
 8013526:	d90c      	bls.n	8013542 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8013528:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 801352c:	f801 0b01 	strb.w	r0, [r1], #1
 8013530:	e7f8      	b.n	8013524 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 8013532:	0790      	lsls	r0, r2, #30
 8013534:	d0e7      	beq.n	8013506 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8013536:	f832 0b02 	ldrh.w	r0, [r2], #2
 801353a:	3b02      	subs	r3, #2
 801353c:	f821 0b02 	strh.w	r0, [r1], #2
 8013540:	e7e1      	b.n	8013506 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8013542:	2001      	movs	r0, #1
 8013544:	bd10      	pop	{r4, pc}

08013546 <_ZN8touchgfx3HAL7noTouchEv>:
 8013546:	b510      	push	{r4, lr}
 8013548:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 801354c:	4604      	mov	r4, r0
 801354e:	b153      	cbz	r3, 8013566 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8013550:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 8013554:	2101      	movs	r1, #1
 8013556:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 801355a:	301c      	adds	r0, #28
 801355c:	f00f ff90 	bl	8023480 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8013560:	2300      	movs	r3, #0
 8013562:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8013566:	bd10      	pop	{r4, pc}

08013568 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8013568:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801356c:	b085      	sub	sp, #20
 801356e:	4604      	mov	r4, r0
 8013570:	2000      	movs	r0, #0
 8013572:	4699      	mov	r9, r3
 8013574:	ad04      	add	r5, sp, #16
 8013576:	460f      	mov	r7, r1
 8013578:	4690      	mov	r8, r2
 801357a:	f845 0d04 	str.w	r0, [r5, #-4]!
 801357e:	69a0      	ldr	r0, [r4, #24]
 8013580:	6806      	ldr	r6, [r0, #0]
 8013582:	9501      	str	r5, [sp, #4]
 8013584:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 8013588:	9500      	str	r5, [sp, #0]
 801358a:	6835      	ldr	r5, [r6, #0]
 801358c:	47a8      	blx	r5
 801358e:	4d10      	ldr	r5, [pc, #64]	; (80135d0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 8013590:	4606      	mov	r6, r0
 8013592:	f8a5 9000 	strh.w	r9, [r5]
 8013596:	f7f8 fe47 	bl	800c228 <_ZN8touchgfx3HAL3lcdEv>
 801359a:	6803      	ldr	r3, [r0, #0]
 801359c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801359e:	4798      	blx	r3
 80135a0:	b128      	cbz	r0, 80135ae <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 80135a2:	2801      	cmp	r0, #1
 80135a4:	d00b      	beq.n	80135be <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 80135a6:	4630      	mov	r0, r6
 80135a8:	b005      	add	sp, #20
 80135aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80135ae:	882b      	ldrh	r3, [r5, #0]
 80135b0:	fb08 7203 	mla	r2, r8, r3, r7
 80135b4:	9b03      	ldr	r3, [sp, #12]
 80135b6:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 80135ba:	63e3      	str	r3, [r4, #60]	; 0x3c
 80135bc:	e7f3      	b.n	80135a6 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 80135be:	882a      	ldrh	r2, [r5, #0]
 80135c0:	9b03      	ldr	r3, [sp, #12]
 80135c2:	fb08 7202 	mla	r2, r8, r2, r7
 80135c6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80135ca:	1a9a      	subs	r2, r3, r2
 80135cc:	63e2      	str	r2, [r4, #60]	; 0x3c
 80135ce:	e7ea      	b.n	80135a6 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 80135d0:	200243d6 	.word	0x200243d6

080135d4 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 80135d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80135d6:	b08b      	sub	sp, #44	; 0x2c
 80135d8:	4617      	mov	r7, r2
 80135da:	4604      	mov	r4, r0
 80135dc:	460e      	mov	r6, r1
 80135de:	461d      	mov	r5, r3
 80135e0:	f7f8 fe22 	bl	800c228 <_ZN8touchgfx3HAL3lcdEv>
 80135e4:	6803      	ldr	r3, [r0, #0]
 80135e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80135e8:	4798      	blx	r3
 80135ea:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 80135ee:	9007      	str	r0, [sp, #28]
 80135f0:	4631      	mov	r1, r6
 80135f2:	6822      	ldr	r2, [r4, #0]
 80135f4:	e9cd 0308 	strd	r0, r3, [sp, #32]
 80135f8:	4b0c      	ldr	r3, [pc, #48]	; (801362c <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 80135fa:	4620      	mov	r0, r4
 80135fc:	881b      	ldrh	r3, [r3, #0]
 80135fe:	9306      	str	r3, [sp, #24]
 8013600:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8013604:	9305      	str	r3, [sp, #20]
 8013606:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 801360a:	9304      	str	r3, [sp, #16]
 801360c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8013610:	9303      	str	r3, [sp, #12]
 8013612:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8013616:	9302      	str	r3, [sp, #8]
 8013618:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801361c:	e9cd 5300 	strd	r5, r3, [sp]
 8013620:	463b      	mov	r3, r7
 8013622:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 8013624:	2200      	movs	r2, #0
 8013626:	47a8      	blx	r5
 8013628:	b00b      	add	sp, #44	; 0x2c
 801362a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801362c:	200243d6 	.word	0x200243d6

08013630 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 8013630:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013634:	4698      	mov	r8, r3
 8013636:	6803      	ldr	r3, [r0, #0]
 8013638:	b08b      	sub	sp, #44	; 0x2c
 801363a:	4617      	mov	r7, r2
 801363c:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 801363e:	460e      	mov	r6, r1
 8013640:	4b13      	ldr	r3, [pc, #76]	; (8013690 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 8013642:	4604      	mov	r4, r0
 8013644:	f8b3 9000 	ldrh.w	r9, [r3]
 8013648:	f7f8 fdee 	bl	800c228 <_ZN8touchgfx3HAL3lcdEv>
 801364c:	6803      	ldr	r3, [r0, #0]
 801364e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013650:	4798      	blx	r3
 8013652:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8013656:	2200      	movs	r2, #0
 8013658:	4631      	mov	r1, r6
 801365a:	e9cd 0308 	strd	r0, r3, [sp, #32]
 801365e:	2302      	movs	r3, #2
 8013660:	4620      	mov	r0, r4
 8013662:	e9cd 9306 	strd	r9, r3, [sp, #24]
 8013666:	2301      	movs	r3, #1
 8013668:	9305      	str	r3, [sp, #20]
 801366a:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 801366e:	9304      	str	r3, [sp, #16]
 8013670:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8013674:	9303      	str	r3, [sp, #12]
 8013676:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 801367a:	9302      	str	r3, [sp, #8]
 801367c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8013680:	e9cd 8300 	strd	r8, r3, [sp]
 8013684:	463b      	mov	r3, r7
 8013686:	47a8      	blx	r5
 8013688:	b00b      	add	sp, #44	; 0x2c
 801368a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801368e:	bf00      	nop
 8013690:	200243d6 	.word	0x200243d6

08013694 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 8013694:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013698:	4698      	mov	r8, r3
 801369a:	6803      	ldr	r3, [r0, #0]
 801369c:	b087      	sub	sp, #28
 801369e:	460e      	mov	r6, r1
 80136a0:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 80136a2:	4617      	mov	r7, r2
 80136a4:	4b0f      	ldr	r3, [pc, #60]	; (80136e4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 80136a6:	4604      	mov	r4, r0
 80136a8:	f8b3 9000 	ldrh.w	r9, [r3]
 80136ac:	f7f8 fdbc 	bl	800c228 <_ZN8touchgfx3HAL3lcdEv>
 80136b0:	6803      	ldr	r3, [r0, #0]
 80136b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80136b4:	4798      	blx	r3
 80136b6:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 80136ba:	463a      	mov	r2, r7
 80136bc:	4631      	mov	r1, r6
 80136be:	f8cd 900c 	str.w	r9, [sp, #12]
 80136c2:	e9cd 0304 	strd	r0, r3, [sp, #16]
 80136c6:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 80136ca:	4620      	mov	r0, r4
 80136cc:	9302      	str	r3, [sp, #8]
 80136ce:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 80136d2:	9301      	str	r3, [sp, #4]
 80136d4:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80136d8:	9300      	str	r3, [sp, #0]
 80136da:	4643      	mov	r3, r8
 80136dc:	47a8      	blx	r5
 80136de:	b007      	add	sp, #28
 80136e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80136e4:	200243d6 	.word	0x200243d6

080136e8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 80136e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80136ec:	4604      	mov	r4, r0
 80136ee:	b08f      	sub	sp, #60	; 0x3c
 80136f0:	4610      	mov	r0, r2
 80136f2:	460d      	mov	r5, r1
 80136f4:	4691      	mov	r9, r2
 80136f6:	461e      	mov	r6, r3
 80136f8:	f004 f8bc 	bl	8017874 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 80136fc:	2800      	cmp	r0, #0
 80136fe:	f000 809d 	beq.w	801383c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 8013702:	6823      	ldr	r3, [r4, #0]
 8013704:	4620      	mov	r0, r4
 8013706:	f8df b198 	ldr.w	fp, [pc, #408]	; 80138a0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 801370a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 801370e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013710:	4798      	blx	r3
 8013712:	6823      	ldr	r3, [r4, #0]
 8013714:	4620      	mov	r0, r4
 8013716:	f8df a18c 	ldr.w	sl, [pc, #396]	; 80138a4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 801371a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801371c:	4798      	blx	r3
 801371e:	f8bb 3000 	ldrh.w	r3, [fp]
 8013722:	4f5c      	ldr	r7, [pc, #368]	; (8013894 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8013724:	9301      	str	r3, [sp, #4]
 8013726:	f8ba 3000 	ldrh.w	r3, [sl]
 801372a:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 801372e:	4640      	mov	r0, r8
 8013730:	9302      	str	r3, [sp, #8]
 8013732:	883b      	ldrh	r3, [r7, #0]
 8013734:	9303      	str	r3, [sp, #12]
 8013736:	4b58      	ldr	r3, [pc, #352]	; (8013898 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8013738:	881a      	ldrh	r2, [r3, #0]
 801373a:	9305      	str	r3, [sp, #20]
 801373c:	9204      	str	r2, [sp, #16]
 801373e:	f004 f92d 	bl	801799c <_ZNK8touchgfx6Bitmap8getWidthEv>
 8013742:	8038      	strh	r0, [r7, #0]
 8013744:	4640      	mov	r0, r8
 8013746:	f004 f95d 	bl	8017a04 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801374a:	9b05      	ldr	r3, [sp, #20]
 801374c:	b280      	uxth	r0, r0
 801374e:	8018      	strh	r0, [r3, #0]
 8013750:	4b52      	ldr	r3, [pc, #328]	; (801389c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 8013752:	781b      	ldrb	r3, [r3, #0]
 8013754:	2b00      	cmp	r3, #0
 8013756:	d174      	bne.n	8013842 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 8013758:	883b      	ldrh	r3, [r7, #0]
 801375a:	f8aa 0000 	strh.w	r0, [sl]
 801375e:	f8ab 3000 	strh.w	r3, [fp]
 8013762:	4648      	mov	r0, r9
 8013764:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 8013768:	f004 f884 	bl	8017874 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 801376c:	2200      	movs	r2, #0
 801376e:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 8013772:	4611      	mov	r1, r2
 8013774:	4628      	mov	r0, r5
 8013776:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 801377a:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 801377e:	f7f9 faaa 	bl	800ccd6 <_ZN8touchgfx8Drawable5setXYEss>
 8013782:	2301      	movs	r3, #1
 8013784:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 8013788:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 801378c:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8013790:	2b00      	cmp	r3, #0
 8013792:	dd5c      	ble.n	801384e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8013794:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8013798:	2b00      	cmp	r3, #0
 801379a:	dd58      	ble.n	801384e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 801379c:	462a      	mov	r2, r5
 801379e:	ab0a      	add	r3, sp, #40	; 0x28
 80137a0:	f852 0f04 	ldr.w	r0, [r2, #4]!
 80137a4:	6851      	ldr	r1, [r2, #4]
 80137a6:	c303      	stmia	r3!, {r0, r1}
 80137a8:	4631      	mov	r1, r6
 80137aa:	a80a      	add	r0, sp, #40	; 0x28
 80137ac:	f7ff fbfc 	bl	8012fa8 <_ZN8touchgfx4RectaNERKS0_>
 80137b0:	4b38      	ldr	r3, [pc, #224]	; (8013894 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 80137b2:	2100      	movs	r1, #0
 80137b4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80137b8:	4b37      	ldr	r3, [pc, #220]	; (8013898 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 80137ba:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 80137be:	aa0a      	add	r2, sp, #40	; 0x28
 80137c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80137c4:	910c      	str	r1, [sp, #48]	; 0x30
 80137c6:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 80137ca:	ab08      	add	r3, sp, #32
 80137cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80137d0:	e883 0003 	stmia.w	r3, {r0, r1}
 80137d4:	4618      	mov	r0, r3
 80137d6:	a90c      	add	r1, sp, #48	; 0x30
 80137d8:	f7ff fbe6 	bl	8012fa8 <_ZN8touchgfx4RectaNERKS0_>
 80137dc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80137de:	2b00      	cmp	r3, #0
 80137e0:	d13c      	bne.n	801385c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 80137e2:	2000      	movs	r0, #0
 80137e4:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 80137e8:	2600      	movs	r6, #0
 80137ea:	696b      	ldr	r3, [r5, #20]
 80137ec:	a908      	add	r1, sp, #32
 80137ee:	682a      	ldr	r2, [r5, #0]
 80137f0:	4628      	mov	r0, r5
 80137f2:	9305      	str	r3, [sp, #20]
 80137f4:	616e      	str	r6, [r5, #20]
 80137f6:	6892      	ldr	r2, [r2, #8]
 80137f8:	4790      	blx	r2
 80137fa:	9b05      	ldr	r3, [sp, #20]
 80137fc:	4652      	mov	r2, sl
 80137fe:	4649      	mov	r1, r9
 8013800:	616b      	str	r3, [r5, #20]
 8013802:	4628      	mov	r0, r5
 8013804:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 8013808:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 801380c:	f7f9 fa63 	bl	800ccd6 <_ZN8touchgfx8Drawable5setXYEss>
 8013810:	9a01      	ldr	r2, [sp, #4]
 8013812:	4b23      	ldr	r3, [pc, #140]	; (80138a0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 8013814:	4620      	mov	r0, r4
 8013816:	801a      	strh	r2, [r3, #0]
 8013818:	9a02      	ldr	r2, [sp, #8]
 801381a:	4b22      	ldr	r3, [pc, #136]	; (80138a4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 801381c:	801a      	strh	r2, [r3, #0]
 801381e:	9a03      	ldr	r2, [sp, #12]
 8013820:	4b1c      	ldr	r3, [pc, #112]	; (8013894 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8013822:	801a      	strh	r2, [r3, #0]
 8013824:	4b1c      	ldr	r3, [pc, #112]	; (8013898 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8013826:	9a04      	ldr	r2, [sp, #16]
 8013828:	801a      	strh	r2, [r3, #0]
 801382a:	6823      	ldr	r3, [r4, #0]
 801382c:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 8013830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013832:	4798      	blx	r3
 8013834:	6823      	ldr	r3, [r4, #0]
 8013836:	4620      	mov	r0, r4
 8013838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801383a:	4798      	blx	r3
 801383c:	b00f      	add	sp, #60	; 0x3c
 801383e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013842:	883b      	ldrh	r3, [r7, #0]
 8013844:	f8ab 0000 	strh.w	r0, [fp]
 8013848:	f8aa 3000 	strh.w	r3, [sl]
 801384c:	e789      	b.n	8013762 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 801384e:	462a      	mov	r2, r5
 8013850:	ab0a      	add	r3, sp, #40	; 0x28
 8013852:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8013856:	6851      	ldr	r1, [r2, #4]
 8013858:	c303      	stmia	r3!, {r0, r1}
 801385a:	e7a9      	b.n	80137b0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 801385c:	a807      	add	r0, sp, #28
 801385e:	f004 fa0d 	bl	8017c7c <_ZNK8touchgfx6Bitmap9getFormatEv>
 8013862:	4606      	mov	r6, r0
 8013864:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8013866:	6803      	ldr	r3, [r0, #0]
 8013868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801386a:	4798      	blx	r3
 801386c:	4286      	cmp	r6, r0
 801386e:	d1b8      	bne.n	80137e2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 8013870:	f7f8 fcda 	bl	800c228 <_ZN8touchgfx3HAL3lcdEv>
 8013874:	6803      	ldr	r3, [r0, #0]
 8013876:	4606      	mov	r6, r0
 8013878:	a807      	add	r0, sp, #28
 801387a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801387c:	9305      	str	r3, [sp, #20]
 801387e:	f004 f9fd 	bl	8017c7c <_ZNK8touchgfx6Bitmap9getFormatEv>
 8013882:	9b05      	ldr	r3, [sp, #20]
 8013884:	4601      	mov	r1, r0
 8013886:	4630      	mov	r0, r6
 8013888:	4798      	blx	r3
 801388a:	f080 0001 	eor.w	r0, r0, #1
 801388e:	b2c0      	uxtb	r0, r0
 8013890:	e7a8      	b.n	80137e4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 8013892:	bf00      	nop
 8013894:	200243d0 	.word	0x200243d0
 8013898:	200243d2 	.word	0x200243d2
 801389c:	200243d4 	.word	0x200243d4
 80138a0:	200243d6 	.word	0x200243d6
 80138a4:	200243d8 	.word	0x200243d8

080138a8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 80138a8:	4b07      	ldr	r3, [pc, #28]	; (80138c8 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 80138aa:	b510      	push	{r4, lr}
 80138ac:	781b      	ldrb	r3, [r3, #0]
 80138ae:	4604      	mov	r4, r0
 80138b0:	b13b      	cbz	r3, 80138c2 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 80138b2:	6803      	ldr	r3, [r0, #0]
 80138b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80138b6:	4798      	blx	r3
 80138b8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80138ba:	4283      	cmp	r3, r0
 80138bc:	d101      	bne.n	80138c2 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 80138be:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80138c0:	bd10      	pop	{r4, pc}
 80138c2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80138c4:	e7fc      	b.n	80138c0 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 80138c6:	bf00      	nop
 80138c8:	200243da 	.word	0x200243da

080138cc <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 80138cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80138d0:	461d      	mov	r5, r3
 80138d2:	b08a      	sub	sp, #40	; 0x28
 80138d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80138d8:	4690      	mov	r8, r2
 80138da:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 80138de:	2400      	movs	r4, #0
 80138e0:	4607      	mov	r7, r0
 80138e2:	fb06 8505 	mla	r5, r6, r5, r8
 80138e6:	9404      	str	r4, [sp, #16]
 80138e8:	f88d 4020 	strb.w	r4, [sp, #32]
 80138ec:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80138f0:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80138f4:	f8ad 3018 	strh.w	r3, [sp, #24]
 80138f8:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 80138fc:	f8ad 301a 	strh.w	r3, [sp, #26]
 8013900:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8013904:	f8ad 301c 	strh.w	r3, [sp, #28]
 8013908:	f7ff ffce 	bl	80138a8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801390c:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8013910:	6878      	ldr	r0, [r7, #4]
 8013912:	f8ad 601e 	strh.w	r6, [sp, #30]
 8013916:	a901      	add	r1, sp, #4
 8013918:	9505      	str	r5, [sp, #20]
 801391a:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 801391e:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 8013922:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 8013926:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 801392a:	6803      	ldr	r3, [r0, #0]
 801392c:	685b      	ldr	r3, [r3, #4]
 801392e:	4798      	blx	r3
 8013930:	b00a      	add	sp, #40	; 0x28
 8013932:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013936 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 8013936:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801393a:	b08b      	sub	sp, #44	; 0x2c
 801393c:	2400      	movs	r4, #0
 801393e:	4691      	mov	r9, r2
 8013940:	461d      	mov	r5, r3
 8013942:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 8013946:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801394a:	4688      	mov	r8, r1
 801394c:	4607      	mov	r7, r0
 801394e:	9404      	str	r4, [sp, #16]
 8013950:	fb06 9505 	mla	r5, r6, r5, r9
 8013954:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013958:	f7ff ffa6 	bl	80138a8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801395c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8013960:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8013964:	6878      	ldr	r0, [r7, #4]
 8013966:	f8ad 3018 	strh.w	r3, [sp, #24]
 801396a:	a901      	add	r1, sp, #4
 801396c:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8013970:	9505      	str	r5, [sp, #20]
 8013972:	f8ad 301a 	strh.w	r3, [sp, #26]
 8013976:	f8ad 401c 	strh.w	r4, [sp, #28]
 801397a:	f8ad 601e 	strh.w	r6, [sp, #30]
 801397e:	f8cd 8010 	str.w	r8, [sp, #16]
 8013982:	f8ad 4020 	strh.w	r4, [sp, #32]
 8013986:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 801398a:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 801398e:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 8013992:	6803      	ldr	r3, [r0, #0]
 8013994:	685b      	ldr	r3, [r3, #4]
 8013996:	4798      	blx	r3
 8013998:	b00b      	add	sp, #44	; 0x2c
 801399a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

080139a0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 80139a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80139a4:	b08a      	sub	sp, #40	; 0x28
 80139a6:	4698      	mov	r8, r3
 80139a8:	2300      	movs	r3, #0
 80139aa:	4606      	mov	r6, r0
 80139ac:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 80139b0:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 80139b4:	2d0b      	cmp	r5, #11
 80139b6:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 80139ba:	f8bd 7058 	ldrh.w	r7, [sp, #88]	; 0x58
 80139be:	f89d 4060 	ldrb.w	r4, [sp, #96]	; 0x60
 80139c2:	9304      	str	r3, [sp, #16]
 80139c4:	d137      	bne.n	8013a36 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 80139c6:	2380      	movs	r3, #128	; 0x80
 80139c8:	f88d 0020 	strb.w	r0, [sp, #32]
 80139cc:	4630      	mov	r0, r6
 80139ce:	9203      	str	r2, [sp, #12]
 80139d0:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80139d4:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 80139d8:	f8ad 3018 	strh.w	r3, [sp, #24]
 80139dc:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80139e0:	f8ad 301a 	strh.w	r3, [sp, #26]
 80139e4:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 80139e8:	f8ad 301c 	strh.w	r3, [sp, #28]
 80139ec:	f7ff ff5c 	bl	80138a8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80139f0:	2c0b      	cmp	r4, #11
 80139f2:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 80139f6:	f8ad 701e 	strh.w	r7, [sp, #30]
 80139fa:	bf94      	ite	ls
 80139fc:	4b19      	ldrls	r3, [pc, #100]	; (8013a64 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 80139fe:	2100      	movhi	r1, #0
 8013a00:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 8013a04:	bf98      	it	ls
 8013a06:	5d19      	ldrbls	r1, [r3, r4]
 8013a08:	fb02 8307 	mla	r3, r2, r7, r8
 8013a0c:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8013a10:	10c9      	asrs	r1, r1, #3
 8013a12:	fb01 0003 	mla	r0, r1, r3, r0
 8013a16:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8013a1a:	a901      	add	r1, sp, #4
 8013a1c:	9005      	str	r0, [sp, #20]
 8013a1e:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 8013a22:	2300      	movs	r3, #0
 8013a24:	6870      	ldr	r0, [r6, #4]
 8013a26:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8013a2a:	6803      	ldr	r3, [r0, #0]
 8013a2c:	685b      	ldr	r3, [r3, #4]
 8013a2e:	4798      	blx	r3
 8013a30:	b00a      	add	sp, #40	; 0x28
 8013a32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a36:	2d02      	cmp	r5, #2
 8013a38:	d109      	bne.n	8013a4e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 8013a3a:	28ff      	cmp	r0, #255	; 0xff
 8013a3c:	d105      	bne.n	8013a4a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 8013a3e:	f1bc 0f00 	cmp.w	ip, #0
 8013a42:	bf14      	ite	ne
 8013a44:	2340      	movne	r3, #64	; 0x40
 8013a46:	2320      	moveq	r3, #32
 8013a48:	e7be      	b.n	80139c8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8013a4a:	2340      	movs	r3, #64	; 0x40
 8013a4c:	e7bc      	b.n	80139c8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8013a4e:	28ff      	cmp	r0, #255	; 0xff
 8013a50:	d105      	bne.n	8013a5e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 8013a52:	f1bc 0f00 	cmp.w	ip, #0
 8013a56:	bf14      	ite	ne
 8013a58:	2304      	movne	r3, #4
 8013a5a:	2301      	moveq	r3, #1
 8013a5c:	e7b4      	b.n	80139c8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8013a5e:	2304      	movs	r3, #4
 8013a60:	e7b2      	b.n	80139c8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8013a62:	bf00      	nop
 8013a64:	0802789c 	.word	0x0802789c

08013a68 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 8013a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a6c:	b08b      	sub	sp, #44	; 0x2c
 8013a6e:	461d      	mov	r5, r3
 8013a70:	2400      	movs	r4, #0
 8013a72:	4688      	mov	r8, r1
 8013a74:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
 8013a78:	4693      	mov	fp, r2
 8013a7a:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
 8013a7e:	4607      	mov	r7, r0
 8013a80:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8013a84:	f8bd a05c 	ldrh.w	sl, [sp, #92]	; 0x5c
 8013a88:	9404      	str	r4, [sp, #16]
 8013a8a:	bf14      	ite	ne
 8013a8c:	2308      	movne	r3, #8
 8013a8e:	2302      	moveq	r3, #2
 8013a90:	fb05 b50a 	mla	r5, r5, sl, fp
 8013a94:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013a98:	f7ff ff06 	bl	80138a8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8013a9c:	2e0b      	cmp	r6, #11
 8013a9e:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8013aa2:	a901      	add	r1, sp, #4
 8013aa4:	bf98      	it	ls
 8013aa6:	4b13      	ldrls	r3, [pc, #76]	; (8013af4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 8013aa8:	f8ad a01e 	strh.w	sl, [sp, #30]
 8013aac:	bf98      	it	ls
 8013aae:	5d9c      	ldrbls	r4, [r3, r6]
 8013ab0:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8013ab4:	10e4      	asrs	r4, r4, #3
 8013ab6:	f8cd 8010 	str.w	r8, [sp, #16]
 8013aba:	f8ad 3018 	strh.w	r3, [sp, #24]
 8013abe:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8013ac2:	fb04 0405 	mla	r4, r4, r5, r0
 8013ac6:	6878      	ldr	r0, [r7, #4]
 8013ac8:	f8ad 301a 	strh.w	r3, [sp, #26]
 8013acc:	2300      	movs	r3, #0
 8013ace:	9405      	str	r4, [sp, #20]
 8013ad0:	f8ad 301c 	strh.w	r3, [sp, #28]
 8013ad4:	f88d 9020 	strb.w	r9, [sp, #32]
 8013ad8:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
 8013adc:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8013ae0:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
 8013ae4:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
 8013ae8:	6803      	ldr	r3, [r0, #0]
 8013aea:	685b      	ldr	r3, [r3, #4]
 8013aec:	4798      	blx	r3
 8013aee:	b00b      	add	sp, #44	; 0x2c
 8013af0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013af4:	0802789c 	.word	0x0802789c

08013af8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8013af8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013afc:	461e      	mov	r6, r3
 8013afe:	4b0a      	ldr	r3, [pc, #40]	; (8013b28 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 8013b00:	460f      	mov	r7, r1
 8013b02:	4690      	mov	r8, r2
 8013b04:	881d      	ldrh	r5, [r3, #0]
 8013b06:	f7f8 fb8f 	bl	800c228 <_ZN8touchgfx3HAL3lcdEv>
 8013b0a:	6803      	ldr	r3, [r0, #0]
 8013b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b0e:	4798      	blx	r3
 8013b10:	280b      	cmp	r0, #11
 8013b12:	bf96      	itet	ls
 8013b14:	4b05      	ldrls	r3, [pc, #20]	; (8013b2c <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8013b16:	2400      	movhi	r4, #0
 8013b18:	5c1c      	ldrbls	r4, [r3, r0]
 8013b1a:	fb08 7005 	mla	r0, r8, r5, r7
 8013b1e:	10e4      	asrs	r4, r4, #3
 8013b20:	fb04 6000 	mla	r0, r4, r0, r6
 8013b24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013b28:	200243d6 	.word	0x200243d6
 8013b2c:	0802789c 	.word	0x0802789c

08013b30 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 8013b30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013b32:	b08b      	sub	sp, #44	; 0x2c
 8013b34:	461f      	mov	r7, r3
 8013b36:	4604      	mov	r4, r0
 8013b38:	4616      	mov	r6, r2
 8013b3a:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8013b3e:	2500      	movs	r5, #0
 8013b40:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8013b44:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8013b48:	9504      	str	r5, [sp, #16]
 8013b4a:	f8ad 3018 	strh.w	r3, [sp, #24]
 8013b4e:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8013b52:	f8ad 301a 	strh.w	r3, [sp, #26]
 8013b56:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8013b5a:	f8ad 301c 	strh.w	r3, [sp, #28]
 8013b5e:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8013b62:	f88d 3020 	strb.w	r3, [sp, #32]
 8013b66:	f7ff fe9f 	bl	80138a8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8013b6a:	463a      	mov	r2, r7
 8013b6c:	4631      	mov	r1, r6
 8013b6e:	4603      	mov	r3, r0
 8013b70:	4620      	mov	r0, r4
 8013b72:	f7ff ffc1 	bl	8013af8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8013b76:	4b0e      	ldr	r3, [pc, #56]	; (8013bb0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 8013b78:	9005      	str	r0, [sp, #20]
 8013b7a:	881b      	ldrh	r3, [r3, #0]
 8013b7c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8013b80:	f7f8 fb52 	bl	800c228 <_ZN8touchgfx3HAL3lcdEv>
 8013b84:	6803      	ldr	r3, [r0, #0]
 8013b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b88:	4798      	blx	r3
 8013b8a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013b8c:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 8013b90:	a901      	add	r1, sp, #4
 8013b92:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 8013b96:	9304      	str	r3, [sp, #16]
 8013b98:	6860      	ldr	r0, [r4, #4]
 8013b9a:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8013b9e:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 8013ba2:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 8013ba6:	6803      	ldr	r3, [r0, #0]
 8013ba8:	685b      	ldr	r3, [r3, #4]
 8013baa:	4798      	blx	r3
 8013bac:	b00b      	add	sp, #44	; 0x2c
 8013bae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013bb0:	200243d6 	.word	0x200243d6

08013bb4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8013bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013bb6:	b08d      	sub	sp, #52	; 0x34
 8013bb8:	2501      	movs	r5, #1
 8013bba:	4604      	mov	r4, r0
 8013bbc:	466b      	mov	r3, sp
 8013bbe:	9503      	str	r5, [sp, #12]
 8013bc0:	e883 0006 	stmia.w	r3, {r1, r2}
 8013bc4:	2300      	movs	r3, #0
 8013bc6:	f8bd 6000 	ldrh.w	r6, [sp]
 8013bca:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8013bce:	9306      	str	r3, [sp, #24]
 8013bd0:	6803      	ldr	r3, [r0, #0]
 8013bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013bd4:	4798      	blx	r3
 8013bd6:	463a      	mov	r2, r7
 8013bd8:	4631      	mov	r1, r6
 8013bda:	4603      	mov	r3, r0
 8013bdc:	4620      	mov	r0, r4
 8013bde:	f7ff ff8b 	bl	8013af8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8013be2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8013be4:	9004      	str	r0, [sp, #16]
 8013be6:	9307      	str	r3, [sp, #28]
 8013be8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8013bec:	f8ad 3020 	strh.w	r3, [sp, #32]
 8013bf0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8013bf4:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8013bf8:	4b0e      	ldr	r3, [pc, #56]	; (8013c34 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 8013bfa:	881b      	ldrh	r3, [r3, #0]
 8013bfc:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8013c00:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8013c04:	f7f8 fb10 	bl	800c228 <_ZN8touchgfx3HAL3lcdEv>
 8013c08:	6803      	ldr	r3, [r0, #0]
 8013c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013c0c:	4798      	blx	r3
 8013c0e:	23ff      	movs	r3, #255	; 0xff
 8013c10:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 8013c14:	a903      	add	r1, sp, #12
 8013c16:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 8013c1a:	6860      	ldr	r0, [r4, #4]
 8013c1c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8013c20:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8013c24:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 8013c28:	6803      	ldr	r3, [r0, #0]
 8013c2a:	685b      	ldr	r3, [r3, #4]
 8013c2c:	4798      	blx	r3
 8013c2e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8013c30:	b00d      	add	sp, #52	; 0x34
 8013c32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013c34:	200243d6 	.word	0x200243d6

08013c38 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8013c38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c3c:	b08c      	sub	sp, #48	; 0x30
 8013c3e:	461e      	mov	r6, r3
 8013c40:	2300      	movs	r3, #0
 8013c42:	4604      	mov	r4, r0
 8013c44:	466d      	mov	r5, sp
 8013c46:	9306      	str	r3, [sp, #24]
 8013c48:	6803      	ldr	r3, [r0, #0]
 8013c4a:	e885 0006 	stmia.w	r5, {r1, r2}
 8013c4e:	2501      	movs	r5, #1
 8013c50:	f8bd 7000 	ldrh.w	r7, [sp]
 8013c54:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 8013c58:	9503      	str	r5, [sp, #12]
 8013c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013c5c:	4798      	blx	r3
 8013c5e:	4642      	mov	r2, r8
 8013c60:	4639      	mov	r1, r7
 8013c62:	4603      	mov	r3, r0
 8013c64:	4620      	mov	r0, r4
 8013c66:	f7ff ff47 	bl	8013af8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8013c6a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8013c6e:	9004      	str	r0, [sp, #16]
 8013c70:	f8ad 3020 	strh.w	r3, [sp, #32]
 8013c74:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8013c78:	9607      	str	r6, [sp, #28]
 8013c7a:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8013c7e:	4b10      	ldr	r3, [pc, #64]	; (8013cc0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 8013c80:	881b      	ldrh	r3, [r3, #0]
 8013c82:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8013c86:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013c88:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8013c8c:	f7f8 facc 	bl	800c228 <_ZN8touchgfx3HAL3lcdEv>
 8013c90:	6803      	ldr	r3, [r0, #0]
 8013c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013c94:	4798      	blx	r3
 8013c96:	23ff      	movs	r3, #255	; 0xff
 8013c98:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 8013c9c:	a903      	add	r1, sp, #12
 8013c9e:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 8013ca2:	6860      	ldr	r0, [r4, #4]
 8013ca4:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8013ca8:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8013cac:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 8013cb0:	6803      	ldr	r3, [r0, #0]
 8013cb2:	685b      	ldr	r3, [r3, #4]
 8013cb4:	4798      	blx	r3
 8013cb6:	4630      	mov	r0, r6
 8013cb8:	b00c      	add	sp, #48	; 0x30
 8013cba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013cbe:	bf00      	nop
 8013cc0:	200243d6 	.word	0x200243d6

08013cc4 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 8013cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013cc6:	b085      	sub	sp, #20
 8013cc8:	4605      	mov	r5, r0
 8013cca:	ac02      	add	r4, sp, #8
 8013ccc:	e884 0006 	stmia.w	r4, {r1, r2}
 8013cd0:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 8013cd4:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 8013cd8:	f7ff fde6 	bl	80138a8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8013cdc:	4631      	mov	r1, r6
 8013cde:	4603      	mov	r3, r0
 8013ce0:	463a      	mov	r2, r7
 8013ce2:	4628      	mov	r0, r5
 8013ce4:	f7ff ff08 	bl	8013af8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8013ce8:	4a05      	ldr	r2, [pc, #20]	; (8013d00 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 8013cea:	682b      	ldr	r3, [r5, #0]
 8013cec:	8812      	ldrh	r2, [r2, #0]
 8013cee:	9200      	str	r2, [sp, #0]
 8013cf0:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 8013cf2:	4603      	mov	r3, r0
 8013cf4:	4628      	mov	r0, r5
 8013cf6:	e894 0006 	ldmia.w	r4, {r1, r2}
 8013cfa:	47b0      	blx	r6
 8013cfc:	b005      	add	sp, #20
 8013cfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013d00:	200243d6 	.word	0x200243d6

08013d04 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8013d04:	b570      	push	{r4, r5, r6, lr}
 8013d06:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8013d0a:	4604      	mov	r4, r0
 8013d0c:	b19b      	cbz	r3, 8013d36 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8013d0e:	2002      	movs	r0, #2
 8013d10:	f7f9 ff2a 	bl	800db68 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8013d14:	2300      	movs	r3, #0
 8013d16:	4620      	mov	r0, r4
 8013d18:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8013d1c:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 8013d20:	6823      	ldr	r3, [r4, #0]
 8013d22:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
 8013d26:	f7ff fdbf 	bl	80138a8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8013d2a:	4601      	mov	r1, r0
 8013d2c:	4620      	mov	r0, r4
 8013d2e:	462b      	mov	r3, r5
 8013d30:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013d34:	4718      	bx	r3
 8013d36:	bd70      	pop	{r4, r5, r6, pc}

08013d38 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 8013d38:	b538      	push	{r3, r4, r5, lr}
 8013d3a:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
 8013d3e:	4604      	mov	r4, r0
 8013d40:	460d      	mov	r5, r1
 8013d42:	428b      	cmp	r3, r1
 8013d44:	d006      	beq.n	8013d54 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 8013d46:	6803      	ldr	r3, [r0, #0]
 8013d48:	b929      	cbnz	r1, 8013d56 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 8013d4a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8013d4e:	4798      	blx	r3
 8013d50:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 8013d54:	bd38      	pop	{r3, r4, r5, pc}
 8013d56:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8013d5a:	e7f8      	b.n	8013d4e <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

08013d5c <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8013d5c:	4b0d      	ldr	r3, [pc, #52]	; (8013d94 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 8013d5e:	b510      	push	{r4, lr}
 8013d60:	781b      	ldrb	r3, [r3, #0]
 8013d62:	4604      	mov	r4, r0
 8013d64:	b95b      	cbnz	r3, 8013d7e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8013d66:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 8013d6a:	2b02      	cmp	r3, #2
 8013d6c:	d007      	beq.n	8013d7e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8013d6e:	6840      	ldr	r0, [r0, #4]
 8013d70:	f000 f90e 	bl	8013f90 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8013d74:	b118      	cbz	r0, 8013d7e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8013d76:	6862      	ldr	r2, [r4, #4]
 8013d78:	7a53      	ldrb	r3, [r2, #9]
 8013d7a:	2b00      	cmp	r3, #0
 8013d7c:	d0fc      	beq.n	8013d78 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8013d7e:	f7fb fa11 	bl	800f1a4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8013d82:	4620      	mov	r0, r4
 8013d84:	2100      	movs	r1, #0
 8013d86:	f7ff ffd7 	bl	8013d38 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8013d8a:	4620      	mov	r0, r4
 8013d8c:	f7ff fd8c 	bl	80138a8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8013d90:	bd10      	pop	{r4, pc}
 8013d92:	bf00      	nop
 8013d94:	200243da 	.word	0x200243da

08013d98 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 8013d98:	4770      	bx	lr

08013d9a <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
 8013d9a:	2000      	movs	r0, #0
 8013d9c:	4770      	bx	lr

08013d9e <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8013d9e:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8013da2:	1a13      	subs	r3, r2, r0
 8013da4:	4258      	negs	r0, r3
 8013da6:	4158      	adcs	r0, r3
 8013da8:	4770      	bx	lr

08013daa <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8013daa:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8013dae:	1a9b      	subs	r3, r3, r2
 8013db0:	2b00      	cmp	r3, #0
 8013db2:	bfdc      	itt	le
 8013db4:	6882      	ldrle	r2, [r0, #8]
 8013db6:	189b      	addle	r3, r3, r2
 8013db8:	2b01      	cmp	r3, #1
 8013dba:	bfcc      	ite	gt
 8013dbc:	2000      	movgt	r0, #0
 8013dbe:	2001      	movle	r0, #1
 8013dc0:	4770      	bx	lr

08013dc2 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8013dc2:	6902      	ldr	r2, [r0, #16]
 8013dc4:	6843      	ldr	r3, [r0, #4]
 8013dc6:	2024      	movs	r0, #36	; 0x24
 8013dc8:	fb00 3002 	mla	r0, r0, r2, r3
 8013dcc:	4770      	bx	lr

08013dce <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8013dce:	6803      	ldr	r3, [r0, #0]
 8013dd0:	691b      	ldr	r3, [r3, #16]
 8013dd2:	4718      	bx	r3

08013dd4 <_ZN8touchgfx13DMA_Interface7executeEv>:
 8013dd4:	2301      	movs	r3, #1
 8013dd6:	b570      	push	{r4, r5, r6, lr}
 8013dd8:	7203      	strb	r3, [r0, #8]
 8013dda:	4604      	mov	r4, r0
 8013ddc:	6840      	ldr	r0, [r0, #4]
 8013dde:	6803      	ldr	r3, [r0, #0]
 8013de0:	699b      	ldr	r3, [r3, #24]
 8013de2:	4798      	blx	r3
 8013de4:	6803      	ldr	r3, [r0, #0]
 8013de6:	4605      	mov	r5, r0
 8013de8:	2b40      	cmp	r3, #64	; 0x40
 8013dea:	d00c      	beq.n	8013e06 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8013dec:	d810      	bhi.n	8013e10 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 8013dee:	2b04      	cmp	r3, #4
 8013df0:	d01d      	beq.n	8013e2e <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 8013df2:	d804      	bhi.n	8013dfe <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 8013df4:	2b01      	cmp	r3, #1
 8013df6:	d006      	beq.n	8013e06 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8013df8:	2b02      	cmp	r3, #2
 8013dfa:	d02c      	beq.n	8013e56 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 8013dfc:	bd70      	pop	{r4, r5, r6, pc}
 8013dfe:	2b08      	cmp	r3, #8
 8013e00:	d01d      	beq.n	8013e3e <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 8013e02:	2b20      	cmp	r3, #32
 8013e04:	d1fa      	bne.n	8013dfc <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 8013e06:	6823      	ldr	r3, [r4, #0]
 8013e08:	4620      	mov	r0, r4
 8013e0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013e0c:	4798      	blx	r3
 8013e0e:	e013      	b.n	8013e38 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8013e10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013e14:	d0f7      	beq.n	8013e06 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8013e16:	d804      	bhi.n	8013e22 <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 8013e18:	2b80      	cmp	r3, #128	; 0x80
 8013e1a:	d0f4      	beq.n	8013e06 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8013e1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013e20:	e7f0      	b.n	8013e04 <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 8013e22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013e26:	d0ee      	beq.n	8013e06 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8013e28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013e2c:	e7e5      	b.n	8013dfa <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 8013e2e:	6823      	ldr	r3, [r4, #0]
 8013e30:	7f01      	ldrb	r1, [r0, #28]
 8013e32:	4620      	mov	r0, r4
 8013e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013e36:	4798      	blx	r3
 8013e38:	6823      	ldr	r3, [r4, #0]
 8013e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013e3c:	e006      	b.n	8013e4c <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8013e3e:	6823      	ldr	r3, [r4, #0]
 8013e40:	7f01      	ldrb	r1, [r0, #28]
 8013e42:	4620      	mov	r0, r4
 8013e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013e46:	4798      	blx	r3
 8013e48:	6823      	ldr	r3, [r4, #0]
 8013e4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013e4c:	4629      	mov	r1, r5
 8013e4e:	4620      	mov	r0, r4
 8013e50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013e54:	4718      	bx	r3
 8013e56:	6823      	ldr	r3, [r4, #0]
 8013e58:	4620      	mov	r0, r4
 8013e5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013e5c:	4798      	blx	r3
 8013e5e:	e7f3      	b.n	8013e48 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

08013e60 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8013e60:	4770      	bx	lr

08013e62 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8013e62:	4770      	bx	lr

08013e64 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8013e64:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 8013e68:	b510      	push	{r4, lr}
 8013e6a:	1ad2      	subs	r2, r2, r3
 8013e6c:	2a00      	cmp	r2, #0
 8013e6e:	bfdc      	itt	le
 8013e70:	6884      	ldrle	r4, [r0, #8]
 8013e72:	1912      	addle	r2, r2, r4
 8013e74:	2a01      	cmp	r2, #1
 8013e76:	dd16      	ble.n	8013ea6 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 8013e78:	6842      	ldr	r2, [r0, #4]
 8013e7a:	2424      	movs	r4, #36	; 0x24
 8013e7c:	fb04 2303 	mla	r3, r4, r3, r2
 8013e80:	f101 0220 	add.w	r2, r1, #32
 8013e84:	f851 4b04 	ldr.w	r4, [r1], #4
 8013e88:	4291      	cmp	r1, r2
 8013e8a:	f843 4b04 	str.w	r4, [r3], #4
 8013e8e:	d1f9      	bne.n	8013e84 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 8013e90:	780a      	ldrb	r2, [r1, #0]
 8013e92:	701a      	strb	r2, [r3, #0]
 8013e94:	68c3      	ldr	r3, [r0, #12]
 8013e96:	6882      	ldr	r2, [r0, #8]
 8013e98:	f3bf 8f5b 	dmb	ish
 8013e9c:	3301      	adds	r3, #1
 8013e9e:	429a      	cmp	r2, r3
 8013ea0:	bfd8      	it	le
 8013ea2:	1a9b      	suble	r3, r3, r2
 8013ea4:	60c3      	str	r3, [r0, #12]
 8013ea6:	bd10      	pop	{r4, pc}

08013ea8 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8013ea8:	6903      	ldr	r3, [r0, #16]
 8013eaa:	6882      	ldr	r2, [r0, #8]
 8013eac:	f3bf 8f5b 	dmb	ish
 8013eb0:	3301      	adds	r3, #1
 8013eb2:	429a      	cmp	r2, r3
 8013eb4:	bfd8      	it	le
 8013eb6:	1a9b      	suble	r3, r3, r2
 8013eb8:	6103      	str	r3, [r0, #16]
 8013eba:	4770      	bx	lr

08013ebc <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8013ebc:	b570      	push	{r4, r5, r6, lr}
 8013ebe:	4604      	mov	r4, r0
 8013ec0:	460e      	mov	r6, r1
 8013ec2:	6860      	ldr	r0, [r4, #4]
 8013ec4:	6803      	ldr	r3, [r0, #0]
 8013ec6:	685b      	ldr	r3, [r3, #4]
 8013ec8:	4798      	blx	r3
 8013eca:	2800      	cmp	r0, #0
 8013ecc:	d1f9      	bne.n	8013ec2 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 8013ece:	4d0d      	ldr	r5, [pc, #52]	; (8013f04 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 8013ed0:	6828      	ldr	r0, [r5, #0]
 8013ed2:	6803      	ldr	r3, [r0, #0]
 8013ed4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013ed6:	4798      	blx	r3
 8013ed8:	f7fb f97e 	bl	800f1d8 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8013edc:	6828      	ldr	r0, [r5, #0]
 8013ede:	2101      	movs	r1, #1
 8013ee0:	f7ff ff2a 	bl	8013d38 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8013ee4:	6860      	ldr	r0, [r4, #4]
 8013ee6:	4631      	mov	r1, r6
 8013ee8:	6803      	ldr	r3, [r0, #0]
 8013eea:	689b      	ldr	r3, [r3, #8]
 8013eec:	4798      	blx	r3
 8013eee:	6823      	ldr	r3, [r4, #0]
 8013ef0:	4620      	mov	r0, r4
 8013ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ef4:	4798      	blx	r3
 8013ef6:	6828      	ldr	r0, [r5, #0]
 8013ef8:	6803      	ldr	r3, [r0, #0]
 8013efa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013efe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013f00:	4718      	bx	r3
 8013f02:	bf00      	nop
 8013f04:	200243dc 	.word	0x200243dc

08013f08 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8013f08:	b508      	push	{r3, lr}
 8013f0a:	f7fb f94b 	bl	800f1a4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8013f0e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8013f12:	f7fb b955 	b.w	800f1c0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08013f16 <_ZN8touchgfx13DMA_Interface5startEv>:
 8013f16:	b510      	push	{r4, lr}
 8013f18:	4604      	mov	r4, r0
 8013f1a:	6840      	ldr	r0, [r0, #4]
 8013f1c:	6803      	ldr	r3, [r0, #0]
 8013f1e:	681b      	ldr	r3, [r3, #0]
 8013f20:	4798      	blx	r3
 8013f22:	b948      	cbnz	r0, 8013f38 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8013f24:	7a63      	ldrb	r3, [r4, #9]
 8013f26:	b13b      	cbz	r3, 8013f38 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8013f28:	7a23      	ldrb	r3, [r4, #8]
 8013f2a:	b92b      	cbnz	r3, 8013f38 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8013f2c:	6823      	ldr	r3, [r4, #0]
 8013f2e:	4620      	mov	r0, r4
 8013f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013f36:	4718      	bx	r3
 8013f38:	bd10      	pop	{r4, pc}

08013f3a <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8013f3a:	b570      	push	{r4, r5, r6, lr}
 8013f3c:	4604      	mov	r4, r0
 8013f3e:	6840      	ldr	r0, [r0, #4]
 8013f40:	6803      	ldr	r3, [r0, #0]
 8013f42:	681b      	ldr	r3, [r3, #0]
 8013f44:	4798      	blx	r3
 8013f46:	4605      	mov	r5, r0
 8013f48:	b930      	cbnz	r0, 8013f58 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8013f4a:	7a23      	ldrb	r3, [r4, #8]
 8013f4c:	b123      	cbz	r3, 8013f58 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8013f4e:	6860      	ldr	r0, [r4, #4]
 8013f50:	6803      	ldr	r3, [r0, #0]
 8013f52:	695b      	ldr	r3, [r3, #20]
 8013f54:	4798      	blx	r3
 8013f56:	7225      	strb	r5, [r4, #8]
 8013f58:	6860      	ldr	r0, [r4, #4]
 8013f5a:	6803      	ldr	r3, [r0, #0]
 8013f5c:	681b      	ldr	r3, [r3, #0]
 8013f5e:	4798      	blx	r3
 8013f60:	b928      	cbnz	r0, 8013f6e <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8013f62:	6823      	ldr	r3, [r4, #0]
 8013f64:	4620      	mov	r0, r4
 8013f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013f6c:	4718      	bx	r3
 8013f6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013f72:	f7fb b93d 	b.w	800f1f0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>
	...

08013f78 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8013f78:	b510      	push	{r4, lr}
 8013f7a:	6082      	str	r2, [r0, #8]
 8013f7c:	2200      	movs	r2, #0
 8013f7e:	4c03      	ldr	r4, [pc, #12]	; (8013f8c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8013f80:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8013f84:	e9c0 4100 	strd	r4, r1, [r0]
 8013f88:	bd10      	pop	{r4, pc}
 8013f8a:	bf00      	nop
 8013f8c:	080279d8 	.word	0x080279d8

08013f90 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8013f90:	6840      	ldr	r0, [r0, #4]
 8013f92:	6803      	ldr	r3, [r0, #0]
 8013f94:	681b      	ldr	r3, [r3, #0]
 8013f96:	4718      	bx	r3

08013f98 <_ZNK8touchgfx3Box12getSolidRectEv>:
 8013f98:	2300      	movs	r3, #0
 8013f9a:	8083      	strh	r3, [r0, #4]
 8013f9c:	80c3      	strh	r3, [r0, #6]
 8013f9e:	8003      	strh	r3, [r0, #0]
 8013fa0:	8043      	strh	r3, [r0, #2]
 8013fa2:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 8013fa6:	2bff      	cmp	r3, #255	; 0xff
 8013fa8:	bf01      	itttt	eq
 8013faa:	890b      	ldrheq	r3, [r1, #8]
 8013fac:	8083      	strheq	r3, [r0, #4]
 8013fae:	894b      	ldrheq	r3, [r1, #10]
 8013fb0:	80c3      	strheq	r3, [r0, #6]
 8013fb2:	4770      	bx	lr

08013fb4 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 8013fb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013fb6:	4604      	mov	r4, r0
 8013fb8:	466b      	mov	r3, sp
 8013fba:	6808      	ldr	r0, [r1, #0]
 8013fbc:	6849      	ldr	r1, [r1, #4]
 8013fbe:	c303      	stmia	r3!, {r0, r1}
 8013fc0:	6823      	ldr	r3, [r4, #0]
 8013fc2:	4669      	mov	r1, sp
 8013fc4:	4620      	mov	r0, r4
 8013fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013fc8:	4798      	blx	r3
 8013fca:	4b08      	ldr	r3, [pc, #32]	; (8013fec <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8013fcc:	681b      	ldr	r3, [r3, #0]
 8013fce:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8013fd2:	b10a      	cbz	r2, 8013fd8 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 8013fd4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8013fd6:	b900      	cbnz	r0, 8013fda <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8013fd8:	6898      	ldr	r0, [r3, #8]
 8013fda:	6803      	ldr	r3, [r0, #0]
 8013fdc:	4669      	mov	r1, sp
 8013fde:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8013fe0:	6a1d      	ldr	r5, [r3, #32]
 8013fe2:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8013fe6:	47a8      	blx	r5
 8013fe8:	b003      	add	sp, #12
 8013fea:	bd30      	pop	{r4, r5, pc}
 8013fec:	200243dc 	.word	0x200243dc

08013ff0 <_ZNK8touchgfx3Box17invalidateContentEv>:
 8013ff0:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
 8013ff4:	b12a      	cbz	r2, 8014002 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8013ff6:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8013ffa:	b112      	cbz	r2, 8014002 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8013ffc:	6803      	ldr	r3, [r0, #0]
 8013ffe:	695b      	ldr	r3, [r3, #20]
 8014000:	4718      	bx	r3
 8014002:	4770      	bx	lr

08014004 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 8014004:	b570      	push	{r4, r5, r6, lr}
 8014006:	880b      	ldrh	r3, [r1, #0]
 8014008:	460d      	mov	r5, r1
 801400a:	4604      	mov	r4, r0
 801400c:	84c3      	strh	r3, [r0, #38]	; 0x26
 801400e:	4608      	mov	r0, r1
 8014010:	f003 fcc4 	bl	801799c <_ZNK8touchgfx6Bitmap8getWidthEv>
 8014014:	4606      	mov	r6, r0
 8014016:	4628      	mov	r0, r5
 8014018:	f003 fcf4 	bl	8017a04 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801401c:	6823      	ldr	r3, [r4, #0]
 801401e:	4605      	mov	r5, r0
 8014020:	4631      	mov	r1, r6
 8014022:	4620      	mov	r0, r4
 8014024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014026:	4798      	blx	r3
 8014028:	6823      	ldr	r3, [r4, #0]
 801402a:	4629      	mov	r1, r5
 801402c:	4620      	mov	r0, r4
 801402e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014030:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014034:	4718      	bx	r3

08014036 <_ZNK8touchgfx5Image12getSolidRectEv>:
 8014036:	b510      	push	{r4, lr}
 8014038:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 801403c:	4604      	mov	r4, r0
 801403e:	2bff      	cmp	r3, #255	; 0xff
 8014040:	d006      	beq.n	8014050 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 8014042:	2300      	movs	r3, #0
 8014044:	8003      	strh	r3, [r0, #0]
 8014046:	8043      	strh	r3, [r0, #2]
 8014048:	8083      	strh	r3, [r0, #4]
 801404a:	80c3      	strh	r3, [r0, #6]
 801404c:	4620      	mov	r0, r4
 801404e:	bd10      	pop	{r4, pc}
 8014050:	3126      	adds	r1, #38	; 0x26
 8014052:	f003 fd0b 	bl	8017a6c <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8014056:	e7f9      	b.n	801404c <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

08014058 <_ZNK8touchgfx5Image17invalidateContentEv>:
 8014058:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
 801405c:	b12a      	cbz	r2, 801406a <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 801405e:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8014062:	b112      	cbz	r2, 801406a <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 8014064:	6803      	ldr	r3, [r0, #0]
 8014066:	695b      	ldr	r3, [r3, #20]
 8014068:	4718      	bx	r3
 801406a:	4770      	bx	lr

0801406c <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 801406c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014070:	4604      	mov	r4, r0
 8014072:	b088      	sub	sp, #32
 8014074:	2500      	movs	r5, #0
 8014076:	460f      	mov	r7, r1
 8014078:	f854 3b26 	ldr.w	r3, [r4], #38
 801407c:	a904      	add	r1, sp, #16
 801407e:	4606      	mov	r6, r0
 8014080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014082:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8014086:	4798      	blx	r3
 8014088:	4620      	mov	r0, r4
 801408a:	f003 fc87 	bl	801799c <_ZNK8touchgfx6Bitmap8getWidthEv>
 801408e:	4680      	mov	r8, r0
 8014090:	4620      	mov	r0, r4
 8014092:	f003 fcb7 	bl	8017a04 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8014096:	9506      	str	r5, [sp, #24]
 8014098:	ad06      	add	r5, sp, #24
 801409a:	f8ad 001e 	strh.w	r0, [sp, #30]
 801409e:	4639      	mov	r1, r7
 80140a0:	f8ad 801c 	strh.w	r8, [sp, #28]
 80140a4:	4628      	mov	r0, r5
 80140a6:	f7fe ff7f 	bl	8012fa8 <_ZN8touchgfx4RectaNERKS0_>
 80140aa:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80140ae:	2b00      	cmp	r3, #0
 80140b0:	dd19      	ble.n	80140e6 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 80140b2:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 80140b6:	2b00      	cmp	r3, #0
 80140b8:	dd15      	ble.n	80140e6 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 80140ba:	4b0c      	ldr	r3, [pc, #48]	; (80140ec <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 80140bc:	681b      	ldr	r3, [r3, #0]
 80140be:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80140c2:	b10a      	cbz	r2, 80140c8 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 80140c4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80140c6:	b900      	cbnz	r0, 80140ca <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 80140c8:	6898      	ldr	r0, [r3, #8]
 80140ca:	2701      	movs	r7, #1
 80140cc:	6801      	ldr	r1, [r0, #0]
 80140ce:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80140d2:	9702      	str	r7, [sp, #8]
 80140d4:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 80140d8:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80140dc:	e9cd 5600 	strd	r5, r6, [sp]
 80140e0:	688d      	ldr	r5, [r1, #8]
 80140e2:	4621      	mov	r1, r4
 80140e4:	47a8      	blx	r5
 80140e6:	b008      	add	sp, #32
 80140e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80140ec:	200243dc 	.word	0x200243dc

080140f0 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 80140f0:	b510      	push	{r4, lr}
 80140f2:	6803      	ldr	r3, [r0, #0]
 80140f4:	460c      	mov	r4, r1
 80140f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80140f8:	4798      	blx	r3
 80140fa:	1b03      	subs	r3, r0, r4
 80140fc:	4258      	negs	r0, r3
 80140fe:	4158      	adcs	r0, r3
 8014100:	bd10      	pop	{r4, pc}
	...

08014104 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 8014104:	4b01      	ldr	r3, [pc, #4]	; (801410c <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 8014106:	6019      	str	r1, [r3, #0]
 8014108:	4770      	bx	lr
 801410a:	bf00      	nop
 801410c:	200243e4 	.word	0x200243e4

08014110 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8014110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014114:	4696      	mov	lr, r2
 8014116:	b097      	sub	sp, #92	; 0x5c
 8014118:	4605      	mov	r5, r0
 801411a:	4614      	mov	r4, r2
 801411c:	460e      	mov	r6, r1
 801411e:	461f      	mov	r7, r3
 8014120:	f10d 0c1c 	add.w	ip, sp, #28
 8014124:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 8014128:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 801412c:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 8014130:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014134:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014138:	f8de 3000 	ldr.w	r3, [lr]
 801413c:	f104 0e14 	add.w	lr, r4, #20
 8014140:	f8cc 3000 	str.w	r3, [ip]
 8014144:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8014148:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801414c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014150:	f8de 3000 	ldr.w	r3, [lr]
 8014154:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8014158:	f8cc 3000 	str.w	r3, [ip]
 801415c:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8014160:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014164:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014168:	f8de 3000 	ldr.w	r3, [lr]
 801416c:	4631      	mov	r1, r6
 801416e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014170:	4628      	mov	r0, r5
 8014172:	f8cc 3000 	str.w	r3, [ip]
 8014176:	682b      	ldr	r3, [r5, #0]
 8014178:	9201      	str	r2, [sp, #4]
 801417a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801417c:	f8cd 8008 	str.w	r8, [sp, #8]
 8014180:	9200      	str	r2, [sp, #0]
 8014182:	aa07      	add	r2, sp, #28
 8014184:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8014188:	f8d3 b03c 	ldr.w	fp, [r3, #60]	; 0x3c
 801418c:	463b      	mov	r3, r7
 801418e:	47d8      	blx	fp
 8014190:	46a6      	mov	lr, r4
 8014192:	f10d 0c1c 	add.w	ip, sp, #28
 8014196:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801419a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801419e:	f8de 3000 	ldr.w	r3, [lr]
 80141a2:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 80141a6:	343c      	adds	r4, #60	; 0x3c
 80141a8:	f8cc 3000 	str.w	r3, [ip]
 80141ac:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 80141b0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80141b4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80141b8:	f8de 3000 	ldr.w	r3, [lr]
 80141bc:	f8cc 3000 	str.w	r3, [ip]
 80141c0:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 80141c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80141c6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80141ca:	6823      	ldr	r3, [r4, #0]
 80141cc:	4631      	mov	r1, r6
 80141ce:	4628      	mov	r0, r5
 80141d0:	f8cc 3000 	str.w	r3, [ip]
 80141d4:	682b      	ldr	r3, [r5, #0]
 80141d6:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 80141da:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80141dc:	f8cd 8008 	str.w	r8, [sp, #8]
 80141e0:	9201      	str	r2, [sp, #4]
 80141e2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80141e4:	9200      	str	r2, [sp, #0]
 80141e6:	aa07      	add	r2, sp, #28
 80141e8:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80141ea:	463b      	mov	r3, r7
 80141ec:	47a0      	blx	r4
 80141ee:	b017      	add	sp, #92	; 0x5c
 80141f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080141f4 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 80141f4:	2000      	movs	r0, #0
 80141f6:	4770      	bx	lr

080141f8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 80141f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80141fc:	b08d      	sub	sp, #52	; 0x34
 80141fe:	4688      	mov	r8, r1
 8014200:	f8d3 c000 	ldr.w	ip, [r3]
 8014204:	9916      	ldr	r1, [sp, #88]	; 0x58
 8014206:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 801420a:	680f      	ldr	r7, [r1, #0]
 801420c:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 8014210:	eba7 070c 	sub.w	r7, r7, ip
 8014214:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 8014218:	edd3 6a07 	vldr	s13, [r3, #28]
 801421c:	42bc      	cmp	r4, r7
 801421e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014220:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 8014224:	bfa8      	it	ge
 8014226:	463c      	movge	r4, r7
 8014228:	f9b1 9000 	ldrsh.w	r9, [r1]
 801422c:	f9ba 1000 	ldrsh.w	r1, [sl]
 8014230:	ee07 4a90 	vmov	s15, r4
 8014234:	eb09 0e0c 	add.w	lr, r9, ip
 8014238:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 801423c:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8014240:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8014244:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 8014248:	4571      	cmp	r1, lr
 801424a:	ee25 4a04 	vmul.f32	s8, s10, s8
 801424e:	ee65 4a24 	vmul.f32	s9, s10, s9
 8014252:	ee25 5a27 	vmul.f32	s10, s10, s15
 8014256:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801425a:	ee71 0aa4 	vadd.f32	s1, s3, s9
 801425e:	ee32 1a05 	vadd.f32	s2, s4, s10
 8014262:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8014266:	ee36 0a84 	vadd.f32	s0, s13, s8
 801426a:	ee61 1a87 	vmul.f32	s3, s3, s14
 801426e:	ee22 2a07 	vmul.f32	s4, s4, s14
 8014272:	f340 808c 	ble.w	801438e <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 8014276:	eba1 060e 	sub.w	r6, r1, lr
 801427a:	fb96 f5f4 	sdiv	r5, r6, r4
 801427e:	ee07 5a10 	vmov	s14, r5
 8014282:	2d00      	cmp	r5, #0
 8014284:	fb04 6615 	mls	r6, r4, r5, r6
 8014288:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801428c:	eea7 0a04 	vfma.f32	s0, s14, s8
 8014290:	eee7 0a24 	vfma.f32	s1, s14, s9
 8014294:	eea7 1a05 	vfma.f32	s2, s14, s10
 8014298:	dd12      	ble.n	80142c0 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 801429a:	ee70 6a44 	vsub.f32	s13, s0, s8
 801429e:	ee70 1ae4 	vsub.f32	s3, s1, s9
 80142a2:	ee31 2a45 	vsub.f32	s4, s2, s10
 80142a6:	eef5 6a40 	vcmp.f32	s13, #0.0
 80142aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80142ae:	bf14      	ite	ne
 80142b0:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 80142b4:	eeb0 7a67 	vmoveq.f32	s14, s15
 80142b8:	ee61 1a87 	vmul.f32	s3, s3, s14
 80142bc:	ee22 2a07 	vmul.f32	s4, s4, s14
 80142c0:	fb05 f204 	mul.w	r2, r5, r4
 80142c4:	1abf      	subs	r7, r7, r2
 80142c6:	4494      	add	ip, r2
 80142c8:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 80142cc:	4411      	add	r1, r2
 80142ce:	eb09 020c 	add.w	r2, r9, ip
 80142d2:	b209      	sxth	r1, r1
 80142d4:	443a      	add	r2, r7
 80142d6:	428a      	cmp	r2, r1
 80142d8:	bfc4      	itt	gt
 80142da:	eba1 0209 	subgt.w	r2, r1, r9
 80142de:	eba2 070c 	subgt.w	r7, r2, ip
 80142e2:	2f00      	cmp	r7, #0
 80142e4:	dd50      	ble.n	8014388 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 80142e6:	fb97 f1f4 	sdiv	r1, r7, r4
 80142ea:	fb04 7211 	mls	r2, r4, r1, r7
 80142ee:	b90a      	cbnz	r2, 80142f4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 80142f0:	3901      	subs	r1, #1
 80142f2:	4622      	mov	r2, r4
 80142f4:	eec7 3a80 	vdiv.f32	s7, s15, s0
 80142f8:	6840      	ldr	r0, [r0, #4]
 80142fa:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 80142fe:	44b6      	add	lr, r6
 8014300:	f8d0 a000 	ldr.w	sl, [r0]
 8014304:	2900      	cmp	r1, #0
 8014306:	bfcc      	ite	gt
 8014308:	46a1      	movgt	r9, r4
 801430a:	4691      	movle	r9, r2
 801430c:	900b      	str	r0, [sp, #44]	; 0x2c
 801430e:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8014310:	fb04 e505 	mla	r5, r4, r5, lr
 8014314:	eef0 6a42 	vmov.f32	s13, s4
 8014318:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 801431c:	9008      	str	r0, [sp, #32]
 801431e:	eeb0 7a61 	vmov.f32	s14, s3
 8014322:	9818      	ldr	r0, [sp, #96]	; 0x60
 8014324:	695b      	ldr	r3, [r3, #20]
 8014326:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801432a:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 801432e:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8014332:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8014334:	445b      	add	r3, fp
 8014336:	9307      	str	r3, [sp, #28]
 8014338:	ee16 3a90 	vmov	r3, s13
 801433c:	e9cd 8505 	strd	r8, r5, [sp, #20]
 8014340:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8014344:	ee21 3a23 	vmul.f32	s6, s2, s7
 8014348:	ee72 7ae1 	vsub.f32	s15, s5, s3
 801434c:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8014350:	ee17 7a90 	vmov	r7, s15
 8014354:	ee73 7a42 	vsub.f32	s15, s6, s4
 8014358:	fb97 f7f4 	sdiv	r7, r7, r4
 801435c:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8014360:	ee17 ca90 	vmov	ip, s15
 8014364:	fb9c fcf4 	sdiv	ip, ip, r4
 8014368:	fb0c 3306 	mla	r3, ip, r6, r3
 801436c:	9302      	str	r3, [sp, #8]
 801436e:	ee17 3a10 	vmov	r3, s14
 8014372:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 8014376:	fb07 3706 	mla	r7, r7, r6, r3
 801437a:	eba9 0306 	sub.w	r3, r9, r6
 801437e:	e9cd 4700 	strd	r4, r7, [sp]
 8014382:	f8da 4008 	ldr.w	r4, [sl, #8]
 8014386:	47a0      	blx	r4
 8014388:	b00d      	add	sp, #52	; 0x34
 801438a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801438e:	2500      	movs	r5, #0
 8014390:	462e      	mov	r6, r5
 8014392:	e799      	b.n	80142c8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

08014394 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8014394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014398:	b0db      	sub	sp, #364	; 0x16c
 801439a:	461d      	mov	r5, r3
 801439c:	4614      	mov	r4, r2
 801439e:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 80143a2:	910f      	str	r1, [sp, #60]	; 0x3c
 80143a4:	4629      	mov	r1, r5
 80143a6:	930a      	str	r3, [sp, #40]	; 0x28
 80143a8:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 80143ac:	9009      	str	r0, [sp, #36]	; 0x24
 80143ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80143b0:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 80143b4:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 80143b8:	9310      	str	r3, [sp, #64]	; 0x40
 80143ba:	6803      	ldr	r3, [r0, #0]
 80143bc:	6c5f      	ldr	r7, [r3, #68]	; 0x44
 80143be:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80143c2:	47b8      	blx	r7
 80143c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80143c6:	6058      	str	r0, [r3, #4]
 80143c8:	2800      	cmp	r0, #0
 80143ca:	f000 83a1 	beq.w	8014b10 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80143ce:	682b      	ldr	r3, [r5, #0]
 80143d0:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 80143d4:	ed94 7a02 	vldr	s14, [r4, #8]
 80143d8:	9314      	str	r3, [sp, #80]	; 0x50
 80143da:	686b      	ldr	r3, [r5, #4]
 80143dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80143e0:	9315      	str	r3, [sp, #84]	; 0x54
 80143e2:	4bc1      	ldr	r3, [pc, #772]	; (80146e8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 80143e4:	7819      	ldrb	r1, [r3, #0]
 80143e6:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 80143ea:	2900      	cmp	r1, #0
 80143ec:	bf16      	itet	ne
 80143ee:	4619      	movne	r1, r3
 80143f0:	4611      	moveq	r1, r2
 80143f2:	4613      	movne	r3, r2
 80143f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143f8:	9116      	str	r1, [sp, #88]	; 0x58
 80143fa:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 80143fe:	f240 8387 	bls.w	8014b10 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014402:	ed94 7a07 	vldr	s14, [r4, #28]
 8014406:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801440a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801440e:	f240 837f 	bls.w	8014b10 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014412:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 8014416:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801441a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801441e:	f240 8377 	bls.w	8014b10 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014422:	6822      	ldr	r2, [r4, #0]
 8014424:	4bb1      	ldr	r3, [pc, #708]	; (80146ec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 8014426:	429a      	cmp	r2, r3
 8014428:	f2c0 8372 	blt.w	8014b10 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801442c:	49b0      	ldr	r1, [pc, #704]	; (80146f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 801442e:	6963      	ldr	r3, [r4, #20]
 8014430:	428a      	cmp	r2, r1
 8014432:	f300 836d 	bgt.w	8014b10 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014436:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 801443a:	48ae      	ldr	r0, [pc, #696]	; (80146f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 801443c:	33ff      	adds	r3, #255	; 0xff
 801443e:	4283      	cmp	r3, r0
 8014440:	f200 8366 	bhi.w	8014b10 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014444:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8014446:	4dac      	ldr	r5, [pc, #688]	; (80146f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 8014448:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 801444c:	33ff      	adds	r3, #255	; 0xff
 801444e:	42ab      	cmp	r3, r5
 8014450:	f200 835e 	bhi.w	8014b10 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014454:	6862      	ldr	r2, [r4, #4]
 8014456:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 801445a:	33ff      	adds	r3, #255	; 0xff
 801445c:	4283      	cmp	r3, r0
 801445e:	f200 8357 	bhi.w	8014b10 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014462:	69a1      	ldr	r1, [r4, #24]
 8014464:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 8014468:	33ff      	adds	r3, #255	; 0xff
 801446a:	4283      	cmp	r3, r0
 801446c:	f200 8350 	bhi.w	8014b10 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014470:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8014472:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 8014476:	30ff      	adds	r0, #255	; 0xff
 8014478:	42a8      	cmp	r0, r5
 801447a:	f200 8349 	bhi.w	8014b10 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801447e:	428a      	cmp	r2, r1
 8014480:	f280 8110 	bge.w	80146a4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 8014484:	429a      	cmp	r2, r3
 8014486:	f300 8119 	bgt.w	80146bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 801448a:	4299      	cmp	r1, r3
 801448c:	f280 811d 	bge.w	80146ca <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 8014490:	2502      	movs	r5, #2
 8014492:	2701      	movs	r7, #1
 8014494:	46a9      	mov	r9, r5
 8014496:	46b8      	mov	r8, r7
 8014498:	f04f 0a00 	mov.w	sl, #0
 801449c:	4621      	mov	r1, r4
 801449e:	a849      	add	r0, sp, #292	; 0x124
 80144a0:	f002 ffb4 	bl	801740c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 80144a4:	4622      	mov	r2, r4
 80144a6:	4653      	mov	r3, sl
 80144a8:	a949      	add	r1, sp, #292	; 0x124
 80144aa:	f8cd 9000 	str.w	r9, [sp]
 80144ae:	a819      	add	r0, sp, #100	; 0x64
 80144b0:	f003 f8dc 	bl	801766c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 80144b4:	4622      	mov	r2, r4
 80144b6:	4653      	mov	r3, sl
 80144b8:	a949      	add	r1, sp, #292	; 0x124
 80144ba:	f8cd 8000 	str.w	r8, [sp]
 80144be:	a829      	add	r0, sp, #164	; 0xa4
 80144c0:	f003 f8d4 	bl	801766c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 80144c4:	4643      	mov	r3, r8
 80144c6:	4622      	mov	r2, r4
 80144c8:	a949      	add	r1, sp, #292	; 0x124
 80144ca:	f8cd 9000 	str.w	r9, [sp]
 80144ce:	a839      	add	r0, sp, #228	; 0xe4
 80144d0:	f003 f8cc 	bl	801766c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 80144d4:	42af      	cmp	r7, r5
 80144d6:	af12      	add	r7, sp, #72	; 0x48
 80144d8:	bfb7      	itett	lt
 80144da:	2300      	movlt	r3, #0
 80144dc:	2301      	movge	r3, #1
 80144de:	ad29      	addlt	r5, sp, #164	; 0xa4
 80144e0:	ac19      	addlt	r4, sp, #100	; 0x64
 80144e2:	bfb1      	iteee	lt
 80144e4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80144e6:	ad19      	addge	r5, sp, #100	; 0x64
 80144e8:	930e      	strge	r3, [sp, #56]	; 0x38
 80144ea:	ac29      	addge	r4, sp, #164	; 0xa4
 80144ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80144ee:	e893 0003 	ldmia.w	r3, {r0, r1}
 80144f2:	e887 0003 	stmia.w	r7, {r0, r1}
 80144f6:	b928      	cbnz	r0, 8014504 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 80144f8:	4b80      	ldr	r3, [pc, #512]	; (80146fc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 80144fa:	6818      	ldr	r0, [r3, #0]
 80144fc:	6803      	ldr	r3, [r0, #0]
 80144fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014500:	4798      	blx	r3
 8014502:	6038      	str	r0, [r7, #0]
 8014504:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8014506:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801450a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801450e:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8014510:	930c      	str	r3, [sp, #48]	; 0x30
 8014512:	990c      	ldr	r1, [sp, #48]	; 0x30
 8014514:	6963      	ldr	r3, [r4, #20]
 8014516:	440b      	add	r3, r1
 8014518:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801451c:	4408      	add	r0, r1
 801451e:	b200      	sxth	r0, r0
 8014520:	4283      	cmp	r3, r0
 8014522:	900d      	str	r0, [sp, #52]	; 0x34
 8014524:	f280 80dd 	bge.w	80146e2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 8014528:	428b      	cmp	r3, r1
 801452a:	da08      	bge.n	801453e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801452c:	2a00      	cmp	r2, #0
 801452e:	dd06      	ble.n	801453e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8014530:	1acb      	subs	r3, r1, r3
 8014532:	429a      	cmp	r2, r3
 8014534:	f2c0 80e4 	blt.w	8014700 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 8014538:	2b00      	cmp	r3, #0
 801453a:	f300 80e2 	bgt.w	8014702 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 801453e:	6967      	ldr	r7, [r4, #20]
 8014540:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8014544:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014546:	443b      	add	r3, r7
 8014548:	461f      	mov	r7, r3
 801454a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801454c:	1bdf      	subs	r7, r3, r7
 801454e:	4297      	cmp	r7, r2
 8014550:	bfa8      	it	ge
 8014552:	4617      	movge	r7, r2
 8014554:	2f00      	cmp	r7, #0
 8014556:	f340 8166 	ble.w	8014826 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 801455a:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801455c:	6829      	ldr	r1, [r5, #0]
 801455e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8014562:	f9bb 3000 	ldrsh.w	r3, [fp]
 8014566:	4411      	add	r1, r2
 8014568:	6820      	ldr	r0, [r4, #0]
 801456a:	4299      	cmp	r1, r3
 801456c:	dd1a      	ble.n	80145a4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 801456e:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8014572:	4402      	add	r2, r0
 8014574:	440b      	add	r3, r1
 8014576:	b21b      	sxth	r3, r3
 8014578:	429a      	cmp	r2, r3
 801457a:	dc13      	bgt.n	80145a4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 801457c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801457e:	a912      	add	r1, sp, #72	; 0x48
 8014580:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014582:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014584:	681b      	ldr	r3, [r3, #0]
 8014586:	9206      	str	r2, [sp, #24]
 8014588:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801458a:	9500      	str	r5, [sp, #0]
 801458c:	9205      	str	r2, [sp, #20]
 801458e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014590:	e9cd b203 	strd	fp, r2, [sp, #12]
 8014594:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8014596:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801459a:	aa49      	add	r2, sp, #292	; 0x124
 801459c:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 80145a0:	4623      	mov	r3, r4
 80145a2:	47c8      	blx	r9
 80145a4:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 80145a8:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 80145ac:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 80145b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80145b4:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 80145b8:	68a1      	ldr	r1, [r4, #8]
 80145ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80145be:	ed94 6a08 	vldr	s12, [r4, #32]
 80145c2:	edd4 6a07 	vldr	s13, [r4, #28]
 80145c6:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 80145ca:	ee76 6a86 	vadd.f32	s13, s13, s12
 80145ce:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 80145d2:	e9d4 2300 	ldrd	r2, r3, [r4]
 80145d6:	edc4 6a07 	vstr	s13, [r4, #28]
 80145da:	441a      	add	r2, r3
 80145dc:	6963      	ldr	r3, [r4, #20]
 80145de:	3301      	adds	r3, #1
 80145e0:	6022      	str	r2, [r4, #0]
 80145e2:	6163      	str	r3, [r4, #20]
 80145e4:	69a3      	ldr	r3, [r4, #24]
 80145e6:	3b01      	subs	r3, #1
 80145e8:	61a3      	str	r3, [r4, #24]
 80145ea:	6923      	ldr	r3, [r4, #16]
 80145ec:	440b      	add	r3, r1
 80145ee:	68e1      	ldr	r1, [r4, #12]
 80145f0:	428b      	cmp	r3, r1
 80145f2:	6123      	str	r3, [r4, #16]
 80145f4:	db15      	blt.n	8014622 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 80145f6:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 80145fa:	3201      	adds	r2, #1
 80145fc:	1a5b      	subs	r3, r3, r1
 80145fe:	ee76 6a26 	vadd.f32	s13, s12, s13
 8014602:	6022      	str	r2, [r4, #0]
 8014604:	6123      	str	r3, [r4, #16]
 8014606:	edc4 6a07 	vstr	s13, [r4, #28]
 801460a:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 801460e:	ee36 7a87 	vadd.f32	s14, s13, s14
 8014612:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8014616:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 801461a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801461e:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8014622:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8014626:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 801462a:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 801462e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014632:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8014636:	68a9      	ldr	r1, [r5, #8]
 8014638:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801463c:	ed95 6a08 	vldr	s12, [r5, #32]
 8014640:	edd5 6a07 	vldr	s13, [r5, #28]
 8014644:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8014648:	ee76 6a86 	vadd.f32	s13, s13, s12
 801464c:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8014650:	e9d5 2300 	ldrd	r2, r3, [r5]
 8014654:	edc5 6a07 	vstr	s13, [r5, #28]
 8014658:	441a      	add	r2, r3
 801465a:	696b      	ldr	r3, [r5, #20]
 801465c:	3301      	adds	r3, #1
 801465e:	602a      	str	r2, [r5, #0]
 8014660:	616b      	str	r3, [r5, #20]
 8014662:	69ab      	ldr	r3, [r5, #24]
 8014664:	3b01      	subs	r3, #1
 8014666:	61ab      	str	r3, [r5, #24]
 8014668:	692b      	ldr	r3, [r5, #16]
 801466a:	440b      	add	r3, r1
 801466c:	68e9      	ldr	r1, [r5, #12]
 801466e:	428b      	cmp	r3, r1
 8014670:	612b      	str	r3, [r5, #16]
 8014672:	db15      	blt.n	80146a0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 8014674:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8014678:	3201      	adds	r2, #1
 801467a:	1a5b      	subs	r3, r3, r1
 801467c:	ee76 6a26 	vadd.f32	s13, s12, s13
 8014680:	602a      	str	r2, [r5, #0]
 8014682:	612b      	str	r3, [r5, #16]
 8014684:	edc5 6a07 	vstr	s13, [r5, #28]
 8014688:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 801468c:	ee36 7a87 	vadd.f32	s14, s13, s14
 8014690:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8014694:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8014698:	ee77 7a27 	vadd.f32	s15, s14, s15
 801469c:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 80146a0:	3f01      	subs	r7, #1
 80146a2:	e757      	b.n	8014554 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 80146a4:	4299      	cmp	r1, r3
 80146a6:	dc13      	bgt.n	80146d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 80146a8:	429a      	cmp	r2, r3
 80146aa:	da14      	bge.n	80146d6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 80146ac:	2502      	movs	r5, #2
 80146ae:	2703      	movs	r7, #3
 80146b0:	f04f 0800 	mov.w	r8, #0
 80146b4:	46a9      	mov	r9, r5
 80146b6:	f04f 0a01 	mov.w	sl, #1
 80146ba:	e6ef      	b.n	801449c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 80146bc:	2501      	movs	r5, #1
 80146be:	2700      	movs	r7, #0
 80146c0:	46a9      	mov	r9, r5
 80146c2:	46b8      	mov	r8, r7
 80146c4:	f04f 0a02 	mov.w	sl, #2
 80146c8:	e6e8      	b.n	801449c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 80146ca:	2501      	movs	r5, #1
 80146cc:	2702      	movs	r7, #2
 80146ce:	e6e1      	b.n	8014494 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 80146d0:	2500      	movs	r5, #0
 80146d2:	2701      	movs	r7, #1
 80146d4:	e7f4      	b.n	80146c0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 80146d6:	2702      	movs	r7, #2
 80146d8:	2503      	movs	r5, #3
 80146da:	f04f 0900 	mov.w	r9, #0
 80146de:	46b8      	mov	r8, r7
 80146e0:	e7e9      	b.n	80146b6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 80146e2:	4613      	mov	r3, r2
 80146e4:	e728      	b.n	8014538 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 80146e6:	bf00      	nop
 80146e8:	200243d4 	.word	0x200243d4
 80146ec:	fffd8f01 	.word	0xfffd8f01
 80146f0:	00027100 	.word	0x00027100
 80146f4:	0004e1ff 	.word	0x0004e1ff
 80146f8:	0004e1fe 	.word	0x0004e1fe
 80146fc:	200243dc 	.word	0x200243dc
 8014700:	4613      	mov	r3, r2
 8014702:	992b      	ldr	r1, [sp, #172]	; 0xac
 8014704:	469e      	mov	lr, r3
 8014706:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 8014708:	469c      	mov	ip, r3
 801470a:	9111      	str	r1, [sp, #68]	; 0x44
 801470c:	f04f 0900 	mov.w	r9, #0
 8014710:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 8014714:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 8014718:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 801471c:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 8014720:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 8014724:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8014728:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 801472c:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 8014730:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 8014734:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 8014738:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 801473c:	f1bc 0f00 	cmp.w	ip, #0
 8014740:	d147      	bne.n	80147d2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 8014742:	eb03 0c07 	add.w	ip, r3, r7
 8014746:	1ad7      	subs	r7, r2, r3
 8014748:	f1b9 0f00 	cmp.w	r9, #0
 801474c:	d009      	beq.n	8014762 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 801474e:	9029      	str	r0, [sp, #164]	; 0xa4
 8014750:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 8014754:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 8014758:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 801475c:	912d      	str	r1, [sp, #180]	; 0xb4
 801475e:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 8014762:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8014764:	f04f 0800 	mov.w	r8, #0
 8014768:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 801476c:	9111      	str	r1, [sp, #68]	; 0x44
 801476e:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8014772:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8014776:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 801477a:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 801477e:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8014782:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8014786:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 801478a:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 801478e:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8014792:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8014796:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 801479a:	f1be 0f00 	cmp.w	lr, #0
 801479e:	d031      	beq.n	8014804 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 80147a0:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80147a2:	4450      	add	r0, sl
 80147a4:	ee76 6aa4 	vadd.f32	s13, s13, s9
 80147a8:	4431      	add	r1, r6
 80147aa:	ee37 7a04 	vadd.f32	s14, s14, s8
 80147ae:	ee77 7aa3 	vadd.f32	s15, s15, s7
 80147b2:	4549      	cmp	r1, r9
 80147b4:	db08      	blt.n	80147c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 80147b6:	ee77 7a85 	vadd.f32	s15, s15, s10
 80147ba:	3001      	adds	r0, #1
 80147bc:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80147c0:	eba1 0109 	sub.w	r1, r1, r9
 80147c4:	ee37 7a06 	vadd.f32	s14, s14, s12
 80147c8:	f10e 3eff 	add.w	lr, lr, #4294967295
 80147cc:	f04f 0801 	mov.w	r8, #1
 80147d0:	e7e3      	b.n	801479a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 80147d2:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80147d4:	4450      	add	r0, sl
 80147d6:	ee37 7a24 	vadd.f32	s14, s14, s9
 80147da:	4431      	add	r1, r6
 80147dc:	ee77 7a84 	vadd.f32	s15, s15, s8
 80147e0:	ee76 6aa3 	vadd.f32	s13, s13, s7
 80147e4:	4541      	cmp	r1, r8
 80147e6:	db08      	blt.n	80147fa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 80147e8:	ee76 6a85 	vadd.f32	s13, s13, s10
 80147ec:	3001      	adds	r0, #1
 80147ee:	ee37 7a25 	vadd.f32	s14, s14, s11
 80147f2:	eba1 0108 	sub.w	r1, r1, r8
 80147f6:	ee77 7a86 	vadd.f32	s15, s15, s12
 80147fa:	f10c 3cff 	add.w	ip, ip, #4294967295
 80147fe:	f04f 0901 	mov.w	r9, #1
 8014802:	e79b      	b.n	801473c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 8014804:	449c      	add	ip, r3
 8014806:	1aff      	subs	r7, r7, r3
 8014808:	f1b8 0f00 	cmp.w	r8, #0
 801480c:	d009      	beq.n	8014822 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 801480e:	9019      	str	r0, [sp, #100]	; 0x64
 8014810:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8014814:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8014818:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 801481c:	911d      	str	r1, [sp, #116]	; 0x74
 801481e:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8014822:	1ad2      	subs	r2, r2, r3
 8014824:	e68b      	b.n	801453e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8014826:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014828:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 801482a:	2b00      	cmp	r3, #0
 801482c:	f000 80d1 	beq.w	80149d2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 8014830:	ad19      	add	r5, sp, #100	; 0x64
 8014832:	ac39      	add	r4, sp, #228	; 0xe4
 8014834:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8014836:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801483a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801483e:	930c      	str	r3, [sp, #48]	; 0x30
 8014840:	990c      	ldr	r1, [sp, #48]	; 0x30
 8014842:	6963      	ldr	r3, [r4, #20]
 8014844:	440b      	add	r3, r1
 8014846:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801484a:	4408      	add	r0, r1
 801484c:	b200      	sxth	r0, r0
 801484e:	4283      	cmp	r3, r0
 8014850:	900d      	str	r0, [sp, #52]	; 0x34
 8014852:	f280 80c1 	bge.w	80149d8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 8014856:	428b      	cmp	r3, r1
 8014858:	da08      	bge.n	801486c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801485a:	2a00      	cmp	r2, #0
 801485c:	dd06      	ble.n	801486c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801485e:	1acb      	subs	r3, r1, r3
 8014860:	429a      	cmp	r2, r3
 8014862:	f2c0 80bb 	blt.w	80149dc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 8014866:	2b00      	cmp	r3, #0
 8014868:	f300 80b9 	bgt.w	80149de <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 801486c:	6967      	ldr	r7, [r4, #20]
 801486e:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8014872:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014874:	443b      	add	r3, r7
 8014876:	461f      	mov	r7, r3
 8014878:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801487a:	1bdf      	subs	r7, r3, r7
 801487c:	4297      	cmp	r7, r2
 801487e:	bfa8      	it	ge
 8014880:	4617      	movge	r7, r2
 8014882:	2f00      	cmp	r7, #0
 8014884:	f340 813c 	ble.w	8014b00 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 8014888:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801488a:	6829      	ldr	r1, [r5, #0]
 801488c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8014890:	f9bb 3000 	ldrsh.w	r3, [fp]
 8014894:	4411      	add	r1, r2
 8014896:	6820      	ldr	r0, [r4, #0]
 8014898:	4299      	cmp	r1, r3
 801489a:	dd1a      	ble.n	80148d2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801489c:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 80148a0:	4402      	add	r2, r0
 80148a2:	440b      	add	r3, r1
 80148a4:	b21b      	sxth	r3, r3
 80148a6:	429a      	cmp	r2, r3
 80148a8:	dc13      	bgt.n	80148d2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 80148aa:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80148ac:	a912      	add	r1, sp, #72	; 0x48
 80148ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80148b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80148b2:	681b      	ldr	r3, [r3, #0]
 80148b4:	9206      	str	r2, [sp, #24]
 80148b6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80148b8:	9500      	str	r5, [sp, #0]
 80148ba:	9205      	str	r2, [sp, #20]
 80148bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80148be:	e9cd b203 	strd	fp, r2, [sp, #12]
 80148c2:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80148c4:	e9cd 8201 	strd	r8, r2, [sp, #4]
 80148c8:	aa49      	add	r2, sp, #292	; 0x124
 80148ca:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 80148ce:	4623      	mov	r3, r4
 80148d0:	47c8      	blx	r9
 80148d2:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 80148d6:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 80148da:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 80148de:	ee37 7a27 	vadd.f32	s14, s14, s15
 80148e2:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 80148e6:	68a1      	ldr	r1, [r4, #8]
 80148e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80148ec:	ed94 6a08 	vldr	s12, [r4, #32]
 80148f0:	edd4 6a07 	vldr	s13, [r4, #28]
 80148f4:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 80148f8:	ee76 6a86 	vadd.f32	s13, s13, s12
 80148fc:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8014900:	e9d4 2300 	ldrd	r2, r3, [r4]
 8014904:	edc4 6a07 	vstr	s13, [r4, #28]
 8014908:	441a      	add	r2, r3
 801490a:	6963      	ldr	r3, [r4, #20]
 801490c:	3301      	adds	r3, #1
 801490e:	6022      	str	r2, [r4, #0]
 8014910:	6163      	str	r3, [r4, #20]
 8014912:	69a3      	ldr	r3, [r4, #24]
 8014914:	3b01      	subs	r3, #1
 8014916:	61a3      	str	r3, [r4, #24]
 8014918:	6923      	ldr	r3, [r4, #16]
 801491a:	440b      	add	r3, r1
 801491c:	68e1      	ldr	r1, [r4, #12]
 801491e:	428b      	cmp	r3, r1
 8014920:	6123      	str	r3, [r4, #16]
 8014922:	db15      	blt.n	8014950 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 8014924:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8014928:	3201      	adds	r2, #1
 801492a:	1a5b      	subs	r3, r3, r1
 801492c:	ee76 6a26 	vadd.f32	s13, s12, s13
 8014930:	6022      	str	r2, [r4, #0]
 8014932:	6123      	str	r3, [r4, #16]
 8014934:	edc4 6a07 	vstr	s13, [r4, #28]
 8014938:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 801493c:	ee36 7a87 	vadd.f32	s14, s13, s14
 8014940:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8014944:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8014948:	ee77 7a27 	vadd.f32	s15, s14, s15
 801494c:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8014950:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8014954:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8014958:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 801495c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014960:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8014964:	68a9      	ldr	r1, [r5, #8]
 8014966:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801496a:	ed95 6a08 	vldr	s12, [r5, #32]
 801496e:	edd5 6a07 	vldr	s13, [r5, #28]
 8014972:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8014976:	ee76 6a86 	vadd.f32	s13, s13, s12
 801497a:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801497e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8014982:	edc5 6a07 	vstr	s13, [r5, #28]
 8014986:	441a      	add	r2, r3
 8014988:	696b      	ldr	r3, [r5, #20]
 801498a:	3301      	adds	r3, #1
 801498c:	602a      	str	r2, [r5, #0]
 801498e:	616b      	str	r3, [r5, #20]
 8014990:	69ab      	ldr	r3, [r5, #24]
 8014992:	3b01      	subs	r3, #1
 8014994:	61ab      	str	r3, [r5, #24]
 8014996:	692b      	ldr	r3, [r5, #16]
 8014998:	440b      	add	r3, r1
 801499a:	68e9      	ldr	r1, [r5, #12]
 801499c:	428b      	cmp	r3, r1
 801499e:	612b      	str	r3, [r5, #16]
 80149a0:	db15      	blt.n	80149ce <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 80149a2:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 80149a6:	3201      	adds	r2, #1
 80149a8:	1a5b      	subs	r3, r3, r1
 80149aa:	ee76 6a26 	vadd.f32	s13, s12, s13
 80149ae:	602a      	str	r2, [r5, #0]
 80149b0:	612b      	str	r3, [r5, #16]
 80149b2:	edc5 6a07 	vstr	s13, [r5, #28]
 80149b6:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 80149ba:	ee36 7a87 	vadd.f32	s14, s13, s14
 80149be:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 80149c2:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 80149c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80149ca:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 80149ce:	3f01      	subs	r7, #1
 80149d0:	e757      	b.n	8014882 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 80149d2:	ad39      	add	r5, sp, #228	; 0xe4
 80149d4:	ac19      	add	r4, sp, #100	; 0x64
 80149d6:	e72d      	b.n	8014834 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 80149d8:	4613      	mov	r3, r2
 80149da:	e744      	b.n	8014866 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 80149dc:	4613      	mov	r3, r2
 80149de:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 80149e0:	469e      	mov	lr, r3
 80149e2:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 80149e6:	461f      	mov	r7, r3
 80149e8:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 80149ec:	f04f 0900 	mov.w	r9, #0
 80149f0:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 80149f4:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 80149f8:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 80149fc:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 8014a00:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 8014a04:	993d      	ldr	r1, [sp, #244]	; 0xf4
 8014a06:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 8014a0a:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 8014a0e:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 8014a12:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 8014a16:	960e      	str	r6, [sp, #56]	; 0x38
 8014a18:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 8014a1c:	2f00      	cmp	r7, #0
 8014a1e:	d146      	bne.n	8014aae <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 8014a20:	449c      	add	ip, r3
 8014a22:	1ad7      	subs	r7, r2, r3
 8014a24:	f1b9 0f00 	cmp.w	r9, #0
 8014a28:	d009      	beq.n	8014a3e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 8014a2a:	9039      	str	r0, [sp, #228]	; 0xe4
 8014a2c:	913d      	str	r1, [sp, #244]	; 0xf4
 8014a2e:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 8014a32:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 8014a36:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 8014a3a:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 8014a3e:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8014a40:	f04f 0800 	mov.w	r8, #0
 8014a44:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8014a48:	910e      	str	r1, [sp, #56]	; 0x38
 8014a4a:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8014a4e:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8014a52:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8014a56:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8014a5a:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8014a5e:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8014a62:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 8014a66:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 8014a6a:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8014a6e:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8014a72:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 8014a76:	f1be 0f00 	cmp.w	lr, #0
 8014a7a:	d030      	beq.n	8014ade <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 8014a7c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8014a7e:	4450      	add	r0, sl
 8014a80:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8014a84:	4431      	add	r1, r6
 8014a86:	ee37 7a04 	vadd.f32	s14, s14, s8
 8014a8a:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8014a8e:	4549      	cmp	r1, r9
 8014a90:	db08      	blt.n	8014aa4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 8014a92:	ee77 7a85 	vadd.f32	s15, s15, s10
 8014a96:	3001      	adds	r0, #1
 8014a98:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8014a9c:	eba1 0109 	sub.w	r1, r1, r9
 8014aa0:	ee37 7a06 	vadd.f32	s14, s14, s12
 8014aa4:	f10e 3eff 	add.w	lr, lr, #4294967295
 8014aa8:	f04f 0801 	mov.w	r8, #1
 8014aac:	e7e3      	b.n	8014a76 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 8014aae:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8014ab0:	4450      	add	r0, sl
 8014ab2:	ee37 7a24 	vadd.f32	s14, s14, s9
 8014ab6:	4431      	add	r1, r6
 8014ab8:	ee77 7a84 	vadd.f32	s15, s15, s8
 8014abc:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8014ac0:	4541      	cmp	r1, r8
 8014ac2:	db08      	blt.n	8014ad6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 8014ac4:	ee76 6a85 	vadd.f32	s13, s13, s10
 8014ac8:	3001      	adds	r0, #1
 8014aca:	ee37 7a25 	vadd.f32	s14, s14, s11
 8014ace:	eba1 0108 	sub.w	r1, r1, r8
 8014ad2:	ee77 7a86 	vadd.f32	s15, s15, s12
 8014ad6:	3f01      	subs	r7, #1
 8014ad8:	f04f 0901 	mov.w	r9, #1
 8014adc:	e79e      	b.n	8014a1c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 8014ade:	449c      	add	ip, r3
 8014ae0:	1aff      	subs	r7, r7, r3
 8014ae2:	f1b8 0f00 	cmp.w	r8, #0
 8014ae6:	d009      	beq.n	8014afc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 8014ae8:	9019      	str	r0, [sp, #100]	; 0x64
 8014aea:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8014aee:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8014af2:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8014af6:	911d      	str	r1, [sp, #116]	; 0x74
 8014af8:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8014afc:	1ad2      	subs	r2, r2, r3
 8014afe:	e6b5      	b.n	801486c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8014b00:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014b02:	681b      	ldr	r3, [r3, #0]
 8014b04:	b923      	cbnz	r3, 8014b10 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014b06:	4b04      	ldr	r3, [pc, #16]	; (8014b18 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 8014b08:	6818      	ldr	r0, [r3, #0]
 8014b0a:	6803      	ldr	r3, [r0, #0]
 8014b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014b0e:	4798      	blx	r3
 8014b10:	b05b      	add	sp, #364	; 0x16c
 8014b12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b16:	bf00      	nop
 8014b18:	200243dc 	.word	0x200243dc

08014b1c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 8014b1c:	2b03      	cmp	r3, #3
 8014b1e:	d818      	bhi.n	8014b52 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 8014b20:	e8df f003 	tbb	[pc, r3]
 8014b24:	130d0602 	.word	0x130d0602
 8014b28:	f9b0 2000 	ldrsh.w	r2, [r0]
 8014b2c:	1850      	adds	r0, r2, r1
 8014b2e:	4770      	bx	lr
 8014b30:	8803      	ldrh	r3, [r0, #0]
 8014b32:	8880      	ldrh	r0, [r0, #4]
 8014b34:	4418      	add	r0, r3
 8014b36:	b200      	sxth	r0, r0
 8014b38:	1a80      	subs	r0, r0, r2
 8014b3a:	3801      	subs	r0, #1
 8014b3c:	4770      	bx	lr
 8014b3e:	8803      	ldrh	r3, [r0, #0]
 8014b40:	8880      	ldrh	r0, [r0, #4]
 8014b42:	4418      	add	r0, r3
 8014b44:	b200      	sxth	r0, r0
 8014b46:	1a40      	subs	r0, r0, r1
 8014b48:	e7f7      	b.n	8014b3a <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 8014b4a:	f9b0 0000 	ldrsh.w	r0, [r0]
 8014b4e:	4410      	add	r0, r2
 8014b50:	4770      	bx	lr
 8014b52:	2000      	movs	r0, #0
 8014b54:	4770      	bx	lr

08014b56 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 8014b56:	2b03      	cmp	r3, #3
 8014b58:	d817      	bhi.n	8014b8a <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 8014b5a:	e8df f003 	tbb	[pc, r3]
 8014b5e:	0602      	.short	0x0602
 8014b60:	1009      	.short	0x1009
 8014b62:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8014b66:	1850      	adds	r0, r2, r1
 8014b68:	4770      	bx	lr
 8014b6a:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8014b6e:	e7fa      	b.n	8014b66 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 8014b70:	8843      	ldrh	r3, [r0, #2]
 8014b72:	88c0      	ldrh	r0, [r0, #6]
 8014b74:	4418      	add	r0, r3
 8014b76:	b200      	sxth	r0, r0
 8014b78:	1a80      	subs	r0, r0, r2
 8014b7a:	3801      	subs	r0, #1
 8014b7c:	4770      	bx	lr
 8014b7e:	8843      	ldrh	r3, [r0, #2]
 8014b80:	88c0      	ldrh	r0, [r0, #6]
 8014b82:	4418      	add	r0, r3
 8014b84:	b200      	sxth	r0, r0
 8014b86:	1a40      	subs	r0, r0, r1
 8014b88:	e7f7      	b.n	8014b7a <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 8014b8a:	2000      	movs	r0, #0
 8014b8c:	4770      	bx	lr
	...

08014b90 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 8014b90:	4b01      	ldr	r3, [pc, #4]	; (8014b98 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 8014b92:	2200      	movs	r2, #0
 8014b94:	601a      	str	r2, [r3, #0]
 8014b96:	4770      	bx	lr
 8014b98:	200243e4 	.word	0x200243e4

08014b9c <_ZN8touchgfx16TouchCalibration4clzuEm>:
 8014b9c:	4603      	mov	r3, r0
 8014b9e:	b1c8      	cbz	r0, 8014bd4 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 8014ba0:	0c02      	lsrs	r2, r0, #16
 8014ba2:	0412      	lsls	r2, r2, #16
 8014ba4:	b9a2      	cbnz	r2, 8014bd0 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 8014ba6:	0403      	lsls	r3, r0, #16
 8014ba8:	2010      	movs	r0, #16
 8014baa:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8014bae:	bf04      	itt	eq
 8014bb0:	021b      	lsleq	r3, r3, #8
 8014bb2:	3008      	addeq	r0, #8
 8014bb4:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8014bb8:	bf04      	itt	eq
 8014bba:	011b      	lsleq	r3, r3, #4
 8014bbc:	3004      	addeq	r0, #4
 8014bbe:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8014bc2:	bf04      	itt	eq
 8014bc4:	009b      	lsleq	r3, r3, #2
 8014bc6:	3002      	addeq	r0, #2
 8014bc8:	2b00      	cmp	r3, #0
 8014bca:	db04      	blt.n	8014bd6 <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 8014bcc:	3001      	adds	r0, #1
 8014bce:	4770      	bx	lr
 8014bd0:	2000      	movs	r0, #0
 8014bd2:	e7ea      	b.n	8014baa <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 8014bd4:	2020      	movs	r0, #32
 8014bd6:	4770      	bx	lr

08014bd8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 8014bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014bdc:	b087      	sub	sp, #28
 8014bde:	4681      	mov	r9, r0
 8014be0:	4698      	mov	r8, r3
 8014be2:	4610      	mov	r0, r2
 8014be4:	460d      	mov	r5, r1
 8014be6:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 8014bea:	b981      	cbnz	r1, 8014c0e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 8014bec:	b14b      	cbz	r3, 8014c02 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 8014bee:	460b      	mov	r3, r1
 8014bf0:	464a      	mov	r2, r9
 8014bf2:	4641      	mov	r1, r8
 8014bf4:	e9cd 4700 	strd	r4, r7, [sp]
 8014bf8:	f7ff ffee 	bl	8014bd8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8014bfc:	b007      	add	sp, #28
 8014bfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c02:	f04f 33ff 	mov.w	r3, #4294967295
 8014c06:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8014c0a:	603b      	str	r3, [r7, #0]
 8014c0c:	e7f6      	b.n	8014bfc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 8014c0e:	fa32 fa01 	lsrs.w	sl, r2, r1
 8014c12:	d107      	bne.n	8014c24 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 8014c14:	fb09 f602 	mul.w	r6, r9, r2
 8014c18:	fbb6 f0f4 	udiv	r0, r6, r4
 8014c1c:	fb04 6610 	mls	r6, r4, r0, r6
 8014c20:	603e      	str	r6, [r7, #0]
 8014c22:	e7eb      	b.n	8014bfc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 8014c24:	2601      	movs	r6, #1
 8014c26:	fa09 fb01 	lsl.w	fp, r9, r1
 8014c2a:	408e      	lsls	r6, r1
 8014c2c:	fbbb f3f4 	udiv	r3, fp, r4
 8014c30:	3e01      	subs	r6, #1
 8014c32:	9302      	str	r3, [sp, #8]
 8014c34:	fb0a f303 	mul.w	r3, sl, r3
 8014c38:	4016      	ands	r6, r2
 8014c3a:	9303      	str	r3, [sp, #12]
 8014c3c:	4630      	mov	r0, r6
 8014c3e:	f7ff ffad 	bl	8014b9c <_ZN8touchgfx16TouchCalibration4clzuEm>
 8014c42:	464a      	mov	r2, r9
 8014c44:	460b      	mov	r3, r1
 8014c46:	4601      	mov	r1, r0
 8014c48:	4630      	mov	r0, r6
 8014c4a:	e9cd 4700 	strd	r4, r7, [sp]
 8014c4e:	f7ff ffc3 	bl	8014bd8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8014c52:	9b02      	ldr	r3, [sp, #8]
 8014c54:	4606      	mov	r6, r0
 8014c56:	eb05 0108 	add.w	r1, r5, r8
 8014c5a:	fb04 bb13 	mls	fp, r4, r3, fp
 8014c5e:	4658      	mov	r0, fp
 8014c60:	f7ff ff9c 	bl	8014b9c <_ZN8touchgfx16TouchCalibration4clzuEm>
 8014c64:	ab05      	add	r3, sp, #20
 8014c66:	465a      	mov	r2, fp
 8014c68:	e9cd 4300 	strd	r4, r3, [sp]
 8014c6c:	4603      	mov	r3, r0
 8014c6e:	4650      	mov	r0, sl
 8014c70:	f7ff ffb2 	bl	8014bd8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8014c74:	6839      	ldr	r1, [r7, #0]
 8014c76:	9a05      	ldr	r2, [sp, #20]
 8014c78:	9b03      	ldr	r3, [sp, #12]
 8014c7a:	4411      	add	r1, r2
 8014c7c:	fbb1 f2f4 	udiv	r2, r1, r4
 8014c80:	18d3      	adds	r3, r2, r3
 8014c82:	fb04 1412 	mls	r4, r4, r2, r1
 8014c86:	441e      	add	r6, r3
 8014c88:	603c      	str	r4, [r7, #0]
 8014c8a:	4430      	add	r0, r6
 8014c8c:	e7b6      	b.n	8014bfc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

08014c8e <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 8014c8e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014c92:	b085      	sub	sp, #20
 8014c94:	f1b0 0900 	subs.w	r9, r0, #0
 8014c98:	461d      	mov	r5, r3
 8014c9a:	4617      	mov	r7, r2
 8014c9c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8014c9e:	bfbb      	ittet	lt
 8014ca0:	f1c9 0900 	rsblt	r9, r9, #0
 8014ca4:	f04f 36ff 	movlt.w	r6, #4294967295
 8014ca8:	2601      	movge	r6, #1
 8014caa:	6823      	ldrlt	r3, [r4, #0]
 8014cac:	bfbc      	itt	lt
 8014cae:	425b      	neglt	r3, r3
 8014cb0:	6023      	strlt	r3, [r4, #0]
 8014cb2:	2a00      	cmp	r2, #0
 8014cb4:	da04      	bge.n	8014cc0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 8014cb6:	6823      	ldr	r3, [r4, #0]
 8014cb8:	4257      	negs	r7, r2
 8014cba:	4276      	negs	r6, r6
 8014cbc:	425b      	negs	r3, r3
 8014cbe:	6023      	str	r3, [r4, #0]
 8014cc0:	2d00      	cmp	r5, #0
 8014cc2:	4638      	mov	r0, r7
 8014cc4:	bfba      	itte	lt
 8014cc6:	426d      	neglt	r5, r5
 8014cc8:	f04f 38ff 	movlt.w	r8, #4294967295
 8014ccc:	f04f 0801 	movge.w	r8, #1
 8014cd0:	f7ff ff64 	bl	8014b9c <_ZN8touchgfx16TouchCalibration4clzuEm>
 8014cd4:	ab03      	add	r3, sp, #12
 8014cd6:	463a      	mov	r2, r7
 8014cd8:	e9cd 5300 	strd	r5, r3, [sp]
 8014cdc:	4603      	mov	r3, r0
 8014cde:	4648      	mov	r0, r9
 8014ce0:	f7ff ff7a 	bl	8014bd8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8014ce4:	6823      	ldr	r3, [r4, #0]
 8014ce6:	9a03      	ldr	r2, [sp, #12]
 8014ce8:	4546      	cmp	r6, r8
 8014cea:	441a      	add	r2, r3
 8014cec:	fb92 f3f5 	sdiv	r3, r2, r5
 8014cf0:	4418      	add	r0, r3
 8014cf2:	fb05 2313 	mls	r3, r5, r3, r2
 8014cf6:	bf18      	it	ne
 8014cf8:	4240      	negne	r0, r0
 8014cfa:	1c72      	adds	r2, r6, #1
 8014cfc:	6023      	str	r3, [r4, #0]
 8014cfe:	d105      	bne.n	8014d0c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 8014d00:	2b00      	cmp	r3, #0
 8014d02:	f1c3 0200 	rsb	r2, r3, #0
 8014d06:	db0b      	blt.n	8014d20 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 8014d08:	6022      	str	r2, [r4, #0]
 8014d0a:	e006      	b.n	8014d1a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8014d0c:	2e01      	cmp	r6, #1
 8014d0e:	d104      	bne.n	8014d1a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8014d10:	2b00      	cmp	r3, #0
 8014d12:	da02      	bge.n	8014d1a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8014d14:	442b      	add	r3, r5
 8014d16:	3801      	subs	r0, #1
 8014d18:	6023      	str	r3, [r4, #0]
 8014d1a:	b005      	add	sp, #20
 8014d1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014d20:	3801      	subs	r0, #1
 8014d22:	1b52      	subs	r2, r2, r5
 8014d24:	e7f0      	b.n	8014d08 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

08014d28 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 8014d28:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8014d2c:	4c1c      	ldr	r4, [pc, #112]	; (8014da0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 8014d2e:	4605      	mov	r5, r0
 8014d30:	6807      	ldr	r7, [r0, #0]
 8014d32:	69a3      	ldr	r3, [r4, #24]
 8014d34:	b92b      	cbnz	r3, 8014d42 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 8014d36:	6840      	ldr	r0, [r0, #4]
 8014d38:	e9c5 7000 	strd	r7, r0, [r5]
 8014d3c:	b004      	add	sp, #16
 8014d3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014d42:	f04f 0802 	mov.w	r8, #2
 8014d46:	68a2      	ldr	r2, [r4, #8]
 8014d48:	ae04      	add	r6, sp, #16
 8014d4a:	6820      	ldr	r0, [r4, #0]
 8014d4c:	fb93 f1f8 	sdiv	r1, r3, r8
 8014d50:	440a      	add	r2, r1
 8014d52:	69e1      	ldr	r1, [r4, #28]
 8014d54:	f846 2d04 	str.w	r2, [r6, #-4]!
 8014d58:	463a      	mov	r2, r7
 8014d5a:	9600      	str	r6, [sp, #0]
 8014d5c:	f7ff ff97 	bl	8014c8e <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8014d60:	69a3      	ldr	r3, [r4, #24]
 8014d62:	4607      	mov	r7, r0
 8014d64:	686a      	ldr	r2, [r5, #4]
 8014d66:	6a21      	ldr	r1, [r4, #32]
 8014d68:	9600      	str	r6, [sp, #0]
 8014d6a:	6860      	ldr	r0, [r4, #4]
 8014d6c:	f7ff ff8f 	bl	8014c8e <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8014d70:	69a3      	ldr	r3, [r4, #24]
 8014d72:	6962      	ldr	r2, [r4, #20]
 8014d74:	4407      	add	r7, r0
 8014d76:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8014d78:	9600      	str	r6, [sp, #0]
 8014d7a:	68e0      	ldr	r0, [r4, #12]
 8014d7c:	fb93 f8f8 	sdiv	r8, r3, r8
 8014d80:	4442      	add	r2, r8
 8014d82:	9203      	str	r2, [sp, #12]
 8014d84:	682a      	ldr	r2, [r5, #0]
 8014d86:	f7ff ff82 	bl	8014c8e <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8014d8a:	4680      	mov	r8, r0
 8014d8c:	9600      	str	r6, [sp, #0]
 8014d8e:	69a3      	ldr	r3, [r4, #24]
 8014d90:	686a      	ldr	r2, [r5, #4]
 8014d92:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8014d94:	6920      	ldr	r0, [r4, #16]
 8014d96:	f7ff ff7a 	bl	8014c8e <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8014d9a:	4440      	add	r0, r8
 8014d9c:	e7cc      	b.n	8014d38 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 8014d9e:	bf00      	nop
 8014da0:	200243e8 	.word	0x200243e8

08014da4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8014da4:	4b07      	ldr	r3, [pc, #28]	; (8014dc4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 8014da6:	781b      	ldrb	r3, [r3, #0]
 8014da8:	2b01      	cmp	r3, #1
 8014daa:	d109      	bne.n	8014dc0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 8014dac:	f9b1 3000 	ldrsh.w	r3, [r1]
 8014db0:	f9b0 2000 	ldrsh.w	r2, [r0]
 8014db4:	8003      	strh	r3, [r0, #0]
 8014db6:	4b04      	ldr	r3, [pc, #16]	; (8014dc8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 8014db8:	881b      	ldrh	r3, [r3, #0]
 8014dba:	3b01      	subs	r3, #1
 8014dbc:	1a9b      	subs	r3, r3, r2
 8014dbe:	800b      	strh	r3, [r1, #0]
 8014dc0:	4770      	bx	lr
 8014dc2:	bf00      	nop
 8014dc4:	200243d4 	.word	0x200243d4
 8014dc8:	200243d0 	.word	0x200243d0

08014dcc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 8014dcc:	4b07      	ldr	r3, [pc, #28]	; (8014dec <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 8014dce:	b510      	push	{r4, lr}
 8014dd0:	781b      	ldrb	r3, [r3, #0]
 8014dd2:	2b01      	cmp	r3, #1
 8014dd4:	d108      	bne.n	8014de8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 8014dd6:	4b06      	ldr	r3, [pc, #24]	; (8014df0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 8014dd8:	880c      	ldrh	r4, [r1, #0]
 8014dda:	881b      	ldrh	r3, [r3, #0]
 8014ddc:	f9b0 2000 	ldrsh.w	r2, [r0]
 8014de0:	3b01      	subs	r3, #1
 8014de2:	1b1b      	subs	r3, r3, r4
 8014de4:	8003      	strh	r3, [r0, #0]
 8014de6:	800a      	strh	r2, [r1, #0]
 8014de8:	bd10      	pop	{r4, pc}
 8014dea:	bf00      	nop
 8014dec:	200243d4 	.word	0x200243d4
 8014df0:	200243d0 	.word	0x200243d0

08014df4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 8014df4:	4b0a      	ldr	r3, [pc, #40]	; (8014e20 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 8014df6:	b510      	push	{r4, lr}
 8014df8:	781b      	ldrb	r3, [r3, #0]
 8014dfa:	2b01      	cmp	r3, #1
 8014dfc:	d10e      	bne.n	8014e1c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 8014dfe:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8014e02:	8843      	ldrh	r3, [r0, #2]
 8014e04:	f9b0 4000 	ldrsh.w	r4, [r0]
 8014e08:	18ca      	adds	r2, r1, r3
 8014e0a:	4b06      	ldr	r3, [pc, #24]	; (8014e24 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 8014e0c:	8044      	strh	r4, [r0, #2]
 8014e0e:	881b      	ldrh	r3, [r3, #0]
 8014e10:	1a9b      	subs	r3, r3, r2
 8014e12:	8003      	strh	r3, [r0, #0]
 8014e14:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8014e18:	8081      	strh	r1, [r0, #4]
 8014e1a:	80c3      	strh	r3, [r0, #6]
 8014e1c:	bd10      	pop	{r4, pc}
 8014e1e:	bf00      	nop
 8014e20:	200243d4 	.word	0x200243d4
 8014e24:	200243d0 	.word	0x200243d0

08014e28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 8014e28:	4b08      	ldr	r3, [pc, #32]	; (8014e4c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 8014e2a:	781b      	ldrb	r3, [r3, #0]
 8014e2c:	2b01      	cmp	r3, #1
 8014e2e:	d10c      	bne.n	8014e4a <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 8014e30:	8803      	ldrh	r3, [r0, #0]
 8014e32:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 8014e36:	8842      	ldrh	r2, [r0, #2]
 8014e38:	8002      	strh	r2, [r0, #0]
 8014e3a:	185a      	adds	r2, r3, r1
 8014e3c:	4b04      	ldr	r3, [pc, #16]	; (8014e50 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 8014e3e:	881b      	ldrh	r3, [r3, #0]
 8014e40:	1a9b      	subs	r3, r3, r2
 8014e42:	8043      	strh	r3, [r0, #2]
 8014e44:	88c3      	ldrh	r3, [r0, #6]
 8014e46:	80c1      	strh	r1, [r0, #6]
 8014e48:	8083      	strh	r3, [r0, #4]
 8014e4a:	4770      	bx	lr
 8014e4c:	200243d4 	.word	0x200243d4
 8014e50:	200243d0 	.word	0x200243d0

08014e54 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8014e54:	4b07      	ldr	r3, [pc, #28]	; (8014e74 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 8014e56:	b510      	push	{r4, lr}
 8014e58:	781b      	ldrb	r3, [r3, #0]
 8014e5a:	2b01      	cmp	r3, #1
 8014e5c:	d108      	bne.n	8014e70 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 8014e5e:	f9b1 3000 	ldrsh.w	r3, [r1]
 8014e62:	f9b0 4000 	ldrsh.w	r4, [r0]
 8014e66:	8003      	strh	r3, [r0, #0]
 8014e68:	8893      	ldrh	r3, [r2, #4]
 8014e6a:	3b01      	subs	r3, #1
 8014e6c:	1b1b      	subs	r3, r3, r4
 8014e6e:	800b      	strh	r3, [r1, #0]
 8014e70:	bd10      	pop	{r4, pc}
 8014e72:	bf00      	nop
 8014e74:	200243d4 	.word	0x200243d4

08014e78 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 8014e78:	4b0a      	ldr	r3, [pc, #40]	; (8014ea4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 8014e7a:	460a      	mov	r2, r1
 8014e7c:	b510      	push	{r4, lr}
 8014e7e:	781b      	ldrb	r3, [r3, #0]
 8014e80:	2b01      	cmp	r3, #1
 8014e82:	d10d      	bne.n	8014ea0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8014e84:	8881      	ldrh	r1, [r0, #4]
 8014e86:	8803      	ldrh	r3, [r0, #0]
 8014e88:	440b      	add	r3, r1
 8014e8a:	4601      	mov	r1, r0
 8014e8c:	3b01      	subs	r3, #1
 8014e8e:	f821 3b02 	strh.w	r3, [r1], #2
 8014e92:	f7ff ffdf 	bl	8014e54 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8014e96:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8014e9a:	88c2      	ldrh	r2, [r0, #6]
 8014e9c:	80c3      	strh	r3, [r0, #6]
 8014e9e:	8082      	strh	r2, [r0, #4]
 8014ea0:	bd10      	pop	{r4, pc}
 8014ea2:	bf00      	nop
 8014ea4:	200243d4 	.word	0x200243d4

08014ea8 <_ZN8touchgfx11Application13requestRedrawEv>:
 8014ea8:	4b06      	ldr	r3, [pc, #24]	; (8014ec4 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 8014eaa:	2100      	movs	r1, #0
 8014eac:	f9b3 2000 	ldrsh.w	r2, [r3]
 8014eb0:	4b05      	ldr	r3, [pc, #20]	; (8014ec8 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 8014eb2:	f8c0 1130 	str.w	r1, [r0, #304]	; 0x130
 8014eb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014eba:	f8a0 2134 	strh.w	r2, [r0, #308]	; 0x134
 8014ebe:	f8a0 3136 	strh.w	r3, [r0, #310]	; 0x136
 8014ec2:	4770      	bx	lr
 8014ec4:	200243d0 	.word	0x200243d0
 8014ec8:	200243d2 	.word	0x200243d2

08014ecc <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 8014ecc:	4b03      	ldr	r3, [pc, #12]	; (8014edc <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 8014ece:	6818      	ldr	r0, [r3, #0]
 8014ed0:	b110      	cbz	r0, 8014ed8 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 8014ed2:	6803      	ldr	r3, [r0, #0]
 8014ed4:	699b      	ldr	r3, [r3, #24]
 8014ed6:	4718      	bx	r3
 8014ed8:	4770      	bx	lr
 8014eda:	bf00      	nop
 8014edc:	20024418 	.word	0x20024418

08014ee0 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 8014ee0:	4770      	bx	lr
	...

08014ee4 <_ZN8touchgfx11Application4drawEv>:
 8014ee4:	4b09      	ldr	r3, [pc, #36]	; (8014f0c <_ZN8touchgfx11Application4drawEv+0x28>)
 8014ee6:	b507      	push	{r0, r1, r2, lr}
 8014ee8:	f9b3 2000 	ldrsh.w	r2, [r3]
 8014eec:	2100      	movs	r1, #0
 8014eee:	4b08      	ldr	r3, [pc, #32]	; (8014f10 <_ZN8touchgfx11Application4drawEv+0x2c>)
 8014ef0:	9100      	str	r1, [sp, #0]
 8014ef2:	4669      	mov	r1, sp
 8014ef4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014ef8:	f8ad 2004 	strh.w	r2, [sp, #4]
 8014efc:	f8ad 3006 	strh.w	r3, [sp, #6]
 8014f00:	6803      	ldr	r3, [r0, #0]
 8014f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014f04:	4798      	blx	r3
 8014f06:	b003      	add	sp, #12
 8014f08:	f85d fb04 	ldr.w	pc, [sp], #4
 8014f0c:	200243d0 	.word	0x200243d0
 8014f10:	200243d2 	.word	0x200243d2

08014f14 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8014f14:	4b03      	ldr	r3, [pc, #12]	; (8014f24 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 8014f16:	6818      	ldr	r0, [r3, #0]
 8014f18:	b110      	cbz	r0, 8014f20 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 8014f1a:	6803      	ldr	r3, [r0, #0]
 8014f1c:	69db      	ldr	r3, [r3, #28]
 8014f1e:	4718      	bx	r3
 8014f20:	4770      	bx	lr
 8014f22:	bf00      	nop
 8014f24:	20024418 	.word	0x20024418

08014f28 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 8014f28:	4b03      	ldr	r3, [pc, #12]	; (8014f38 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 8014f2a:	6818      	ldr	r0, [r3, #0]
 8014f2c:	b110      	cbz	r0, 8014f34 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 8014f2e:	6803      	ldr	r3, [r0, #0]
 8014f30:	6a1b      	ldr	r3, [r3, #32]
 8014f32:	4718      	bx	r3
 8014f34:	4770      	bx	lr
 8014f36:	bf00      	nop
 8014f38:	20024418 	.word	0x20024418

08014f3c <_ZN8touchgfx11Application16clearCachedAreasEv>:
 8014f3c:	2300      	movs	r3, #0
 8014f3e:	f8a0 30ec 	strh.w	r3, [r0, #236]	; 0xec
 8014f42:	4770      	bx	lr

08014f44 <_ZN8touchgfx11Application14handleKeyEventEh>:
 8014f44:	4b03      	ldr	r3, [pc, #12]	; (8014f54 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 8014f46:	6818      	ldr	r0, [r3, #0]
 8014f48:	b110      	cbz	r0, 8014f50 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 8014f4a:	6803      	ldr	r3, [r0, #0]
 8014f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014f4e:	4718      	bx	r3
 8014f50:	4770      	bx	lr
 8014f52:	bf00      	nop
 8014f54:	20024418 	.word	0x20024418

08014f58 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 8014f58:	b510      	push	{r4, lr}
 8014f5a:	f9b1 4000 	ldrsh.w	r4, [r1]
 8014f5e:	888a      	ldrh	r2, [r1, #4]
 8014f60:	f9b0 3000 	ldrsh.w	r3, [r0]
 8014f64:	4422      	add	r2, r4
 8014f66:	b212      	sxth	r2, r2
 8014f68:	4293      	cmp	r3, r2
 8014f6a:	da15      	bge.n	8014f98 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8014f6c:	8882      	ldrh	r2, [r0, #4]
 8014f6e:	4413      	add	r3, r2
 8014f70:	b21b      	sxth	r3, r3
 8014f72:	429c      	cmp	r4, r3
 8014f74:	da10      	bge.n	8014f98 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8014f76:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8014f7a:	88c9      	ldrh	r1, [r1, #6]
 8014f7c:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8014f80:	4419      	add	r1, r3
 8014f82:	b209      	sxth	r1, r1
 8014f84:	428a      	cmp	r2, r1
 8014f86:	da07      	bge.n	8014f98 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8014f88:	88c0      	ldrh	r0, [r0, #6]
 8014f8a:	4410      	add	r0, r2
 8014f8c:	b200      	sxth	r0, r0
 8014f8e:	4283      	cmp	r3, r0
 8014f90:	bfac      	ite	ge
 8014f92:	2000      	movge	r0, #0
 8014f94:	2001      	movlt	r0, #1
 8014f96:	bd10      	pop	{r4, pc}
 8014f98:	2000      	movs	r0, #0
 8014f9a:	e7fc      	b.n	8014f96 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

08014f9c <_ZN8touchgfx4Rect10restrictToEss>:
 8014f9c:	f9b0 3000 	ldrsh.w	r3, [r0]
 8014fa0:	2b00      	cmp	r3, #0
 8014fa2:	b510      	push	{r4, lr}
 8014fa4:	da04      	bge.n	8014fb0 <_ZN8touchgfx4Rect10restrictToEss+0x14>
 8014fa6:	8884      	ldrh	r4, [r0, #4]
 8014fa8:	4423      	add	r3, r4
 8014faa:	8083      	strh	r3, [r0, #4]
 8014fac:	2300      	movs	r3, #0
 8014fae:	8003      	strh	r3, [r0, #0]
 8014fb0:	f9b0 4000 	ldrsh.w	r4, [r0]
 8014fb4:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8014fb8:	1b09      	subs	r1, r1, r4
 8014fba:	428b      	cmp	r3, r1
 8014fbc:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8014fc0:	bfc8      	it	gt
 8014fc2:	8081      	strhgt	r1, [r0, #4]
 8014fc4:	2b00      	cmp	r3, #0
 8014fc6:	da04      	bge.n	8014fd2 <_ZN8touchgfx4Rect10restrictToEss+0x36>
 8014fc8:	88c1      	ldrh	r1, [r0, #6]
 8014fca:	440b      	add	r3, r1
 8014fcc:	80c3      	strh	r3, [r0, #6]
 8014fce:	2300      	movs	r3, #0
 8014fd0:	8043      	strh	r3, [r0, #2]
 8014fd2:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8014fd6:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8014fda:	1a52      	subs	r2, r2, r1
 8014fdc:	4293      	cmp	r3, r2
 8014fde:	bfc8      	it	gt
 8014fe0:	80c2      	strhgt	r2, [r0, #6]
 8014fe2:	bd10      	pop	{r4, pc}

08014fe4 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 8014fe4:	4b10      	ldr	r3, [pc, #64]	; (8015028 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 8014fe6:	b510      	push	{r4, lr}
 8014fe8:	460c      	mov	r4, r1
 8014fea:	f9b3 2000 	ldrsh.w	r2, [r3]
 8014fee:	4b0f      	ldr	r3, [pc, #60]	; (801502c <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 8014ff0:	4620      	mov	r0, r4
 8014ff2:	f9b3 1000 	ldrsh.w	r1, [r3]
 8014ff6:	f7ff ffd1 	bl	8014f9c <_ZN8touchgfx4Rect10restrictToEss>
 8014ffa:	4b0d      	ldr	r3, [pc, #52]	; (8015030 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 8014ffc:	6818      	ldr	r0, [r3, #0]
 8014ffe:	b190      	cbz	r0, 8015026 <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 8015000:	6803      	ldr	r3, [r0, #0]
 8015002:	4621      	mov	r1, r4
 8015004:	689b      	ldr	r3, [r3, #8]
 8015006:	4798      	blx	r3
 8015008:	4b0a      	ldr	r3, [pc, #40]	; (8015034 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 801500a:	6818      	ldr	r0, [r3, #0]
 801500c:	b118      	cbz	r0, 8015016 <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 801500e:	6803      	ldr	r3, [r0, #0]
 8015010:	4621      	mov	r1, r4
 8015012:	689b      	ldr	r3, [r3, #8]
 8015014:	4798      	blx	r3
 8015016:	4b08      	ldr	r3, [pc, #32]	; (8015038 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 8015018:	4621      	mov	r1, r4
 801501a:	6818      	ldr	r0, [r3, #0]
 801501c:	6803      	ldr	r3, [r0, #0]
 801501e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015022:	69db      	ldr	r3, [r3, #28]
 8015024:	4718      	bx	r3
 8015026:	bd10      	pop	{r4, pc}
 8015028:	200243d2 	.word	0x200243d2
 801502c:	200243d0 	.word	0x200243d0
 8015030:	20024418 	.word	0x20024418
 8015034:	20024414 	.word	0x20024414
 8015038:	200243dc 	.word	0x200243dc

0801503c <_ZNK8touchgfx4Rect8includesERKS0_>:
 801503c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801503e:	4606      	mov	r6, r0
 8015040:	4608      	mov	r0, r1
 8015042:	460f      	mov	r7, r1
 8015044:	f7fd fff3 	bl	801302e <_ZNK8touchgfx4Rect7isEmptyEv>
 8015048:	b9e8      	cbnz	r0, 8015086 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801504a:	f9b7 5000 	ldrsh.w	r5, [r7]
 801504e:	f9b6 4000 	ldrsh.w	r4, [r6]
 8015052:	42a5      	cmp	r5, r4
 8015054:	db17      	blt.n	8015086 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8015056:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801505a:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 801505e:	429a      	cmp	r2, r3
 8015060:	db11      	blt.n	8015086 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8015062:	88b9      	ldrh	r1, [r7, #4]
 8015064:	440d      	add	r5, r1
 8015066:	88b1      	ldrh	r1, [r6, #4]
 8015068:	440c      	add	r4, r1
 801506a:	b22d      	sxth	r5, r5
 801506c:	b224      	sxth	r4, r4
 801506e:	42a5      	cmp	r5, r4
 8015070:	dc09      	bgt.n	8015086 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8015072:	88f8      	ldrh	r0, [r7, #6]
 8015074:	4410      	add	r0, r2
 8015076:	88f2      	ldrh	r2, [r6, #6]
 8015078:	4413      	add	r3, r2
 801507a:	b200      	sxth	r0, r0
 801507c:	b21b      	sxth	r3, r3
 801507e:	4298      	cmp	r0, r3
 8015080:	bfcc      	ite	gt
 8015082:	2000      	movgt	r0, #0
 8015084:	2001      	movle	r0, #1
 8015086:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08015088 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 8015088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801508a:	4604      	mov	r4, r0
 801508c:	4608      	mov	r0, r1
 801508e:	460d      	mov	r5, r1
 8015090:	f7fd ffcd 	bl	801302e <_ZNK8touchgfx4Rect7isEmptyEv>
 8015094:	b978      	cbnz	r0, 80150b6 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 8015096:	4620      	mov	r0, r4
 8015098:	f7fd ffc9 	bl	801302e <_ZNK8touchgfx4Rect7isEmptyEv>
 801509c:	f9b5 6000 	ldrsh.w	r6, [r5]
 80150a0:	b150      	cbz	r0, 80150b8 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 80150a2:	8026      	strh	r6, [r4, #0]
 80150a4:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 80150a8:	8063      	strh	r3, [r4, #2]
 80150aa:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 80150ae:	80a3      	strh	r3, [r4, #4]
 80150b0:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 80150b4:	80e3      	strh	r3, [r4, #6]
 80150b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80150b8:	f9b4 1000 	ldrsh.w	r1, [r4]
 80150bc:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 80150c0:	42b1      	cmp	r1, r6
 80150c2:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 80150c6:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 80150ca:	460f      	mov	r7, r1
 80150cc:	88ed      	ldrh	r5, [r5, #6]
 80150ce:	bfa8      	it	ge
 80150d0:	4637      	movge	r7, r6
 80150d2:	4293      	cmp	r3, r2
 80150d4:	4618      	mov	r0, r3
 80150d6:	4466      	add	r6, ip
 80150d8:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 80150dc:	bfa8      	it	ge
 80150de:	4610      	movge	r0, r2
 80150e0:	442a      	add	r2, r5
 80150e2:	88e5      	ldrh	r5, [r4, #6]
 80150e4:	4461      	add	r1, ip
 80150e6:	b236      	sxth	r6, r6
 80150e8:	8027      	strh	r7, [r4, #0]
 80150ea:	442b      	add	r3, r5
 80150ec:	b209      	sxth	r1, r1
 80150ee:	b212      	sxth	r2, r2
 80150f0:	8060      	strh	r0, [r4, #2]
 80150f2:	b21b      	sxth	r3, r3
 80150f4:	428e      	cmp	r6, r1
 80150f6:	bfac      	ite	ge
 80150f8:	ebc7 0106 	rsbge	r1, r7, r6
 80150fc:	ebc7 0101 	rsblt	r1, r7, r1
 8015100:	429a      	cmp	r2, r3
 8015102:	bfac      	ite	ge
 8015104:	ebc0 0202 	rsbge	r2, r0, r2
 8015108:	ebc0 0203 	rsblt	r2, r0, r3
 801510c:	80a1      	strh	r1, [r4, #4]
 801510e:	80e2      	strh	r2, [r4, #6]
 8015110:	e7d1      	b.n	80150b6 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

08015114 <_ZN8touchgfx11Application11getInstanceEv>:
 8015114:	4b01      	ldr	r3, [pc, #4]	; (801511c <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 8015116:	6818      	ldr	r0, [r3, #0]
 8015118:	4770      	bx	lr
 801511a:	bf00      	nop
 801511c:	20024428 	.word	0x20024428

08015120 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 8015120:	2300      	movs	r3, #0
 8015122:	b510      	push	{r4, lr}
 8015124:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
 8015128:	4604      	mov	r4, r0
 801512a:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
 801512e:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
 8015132:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 8015136:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	; 0xa6
 801513a:	429a      	cmp	r2, r3
 801513c:	d90e      	bls.n	801515c <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 801513e:	18e2      	adds	r2, r4, r3
 8015140:	f892 2084 	ldrb.w	r2, [r2, #132]	; 0x84
 8015144:	b122      	cbz	r2, 8015150 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 8015146:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 801514a:	6803      	ldr	r3, [r0, #0]
 801514c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801514e:	4798      	blx	r3
 8015150:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 8015154:	3301      	adds	r3, #1
 8015156:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 801515a:	e7ea      	b.n	8015132 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 801515c:	bd10      	pop	{r4, pc}

0801515e <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 801515e:	2300      	movs	r3, #0
 8015160:	f100 0284 	add.w	r2, r0, #132	; 0x84
 8015164:	30a4      	adds	r0, #164	; 0xa4
 8015166:	f820 3c24 	strh.w	r3, [r0, #-36]
 801516a:	f802 3b01 	strb.w	r3, [r2], #1
 801516e:	4282      	cmp	r2, r0
 8015170:	d1fb      	bne.n	801516a <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 8015172:	4770      	bx	lr

08015174 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 8015174:	b570      	push	{r4, r5, r6, lr}
 8015176:	4c0b      	ldr	r4, [pc, #44]	; (80151a4 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 8015178:	4605      	mov	r5, r0
 801517a:	460e      	mov	r6, r1
 801517c:	6820      	ldr	r0, [r4, #0]
 801517e:	b110      	cbz	r0, 8015186 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 8015180:	6803      	ldr	r3, [r0, #0]
 8015182:	695b      	ldr	r3, [r3, #20]
 8015184:	4798      	blx	r3
 8015186:	1d28      	adds	r0, r5, #4
 8015188:	f7ff ffe9 	bl	801515e <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 801518c:	6026      	str	r6, [r4, #0]
 801518e:	6833      	ldr	r3, [r6, #0]
 8015190:	4630      	mov	r0, r6
 8015192:	68db      	ldr	r3, [r3, #12]
 8015194:	4798      	blx	r3
 8015196:	682b      	ldr	r3, [r5, #0]
 8015198:	4628      	mov	r0, r5
 801519a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801519c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80151a0:	4718      	bx	r3
 80151a2:	bf00      	nop
 80151a4:	20024418 	.word	0x20024418

080151a8 <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 80151a8:	2300      	movs	r3, #0
 80151aa:	f8b0 c080 	ldrh.w	ip, [r0, #128]	; 0x80
 80151ae:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	; 0xa4
 80151b2:	461a      	mov	r2, r3
 80151b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80151b6:	461c      	mov	r4, r3
 80151b8:	461d      	mov	r5, r3
 80151ba:	459c      	cmp	ip, r3
 80151bc:	dd1a      	ble.n	80151f4 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 80151be:	18c6      	adds	r6, r0, r3
 80151c0:	f896 6084 	ldrb.w	r6, [r6, #132]	; 0x84
 80151c4:	b16e      	cbz	r6, 80151e2 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 80151c6:	429a      	cmp	r2, r3
 80151c8:	d008      	beq.n	80151dc <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 80151ca:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 80151ce:	fa1f fe82 	uxth.w	lr, r2
 80151d2:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 80151d6:	1887      	adds	r7, r0, r2
 80151d8:	f887 6084 	strb.w	r6, [r7, #132]	; 0x84
 80151dc:	3201      	adds	r2, #1
 80151de:	3301      	adds	r3, #1
 80151e0:	e7eb      	b.n	80151ba <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 80151e2:	4299      	cmp	r1, r3
 80151e4:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	; 0xa6
 80151e8:	bfa8      	it	ge
 80151ea:	3501      	addge	r5, #1
 80151ec:	429e      	cmp	r6, r3
 80151ee:	bfc8      	it	gt
 80151f0:	3401      	addgt	r4, #1
 80151f2:	e7f4      	b.n	80151de <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 80151f4:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
 80151f8:	1b49      	subs	r1, r1, r5
 80151fa:	1b1b      	subs	r3, r3, r4
 80151fc:	f8a0 10a4 	strh.w	r1, [r0, #164]	; 0xa4
 8015200:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
 8015204:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
 8015208:	4293      	cmp	r3, r2
 801520a:	dd03      	ble.n	8015214 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 801520c:	3b01      	subs	r3, #1
 801520e:	f8a0 3080 	strh.w	r3, [r0, #128]	; 0x80
 8015212:	e7f7      	b.n	8015204 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 8015214:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08015218 <_ZN8touchgfx11Application15handleTickEventEv>:
 8015218:	b570      	push	{r4, r5, r6, lr}
 801521a:	4d16      	ldr	r5, [pc, #88]	; (8015274 <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 801521c:	4604      	mov	r4, r0
 801521e:	6828      	ldr	r0, [r5, #0]
 8015220:	b140      	cbz	r0, 8015234 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8015222:	7a03      	ldrb	r3, [r0, #8]
 8015224:	b933      	cbnz	r3, 8015234 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8015226:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 801522a:	6803      	ldr	r3, [r0, #0]
 801522c:	689b      	ldr	r3, [r3, #8]
 801522e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015232:	4718      	bx	r3
 8015234:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
 8015238:	4e0f      	ldr	r6, [pc, #60]	; (8015278 <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 801523a:	b973      	cbnz	r3, 801525a <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801523c:	b168      	cbz	r0, 801525a <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801523e:	7a03      	ldrb	r3, [r0, #8]
 8015240:	b15b      	cbz	r3, 801525a <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8015242:	6830      	ldr	r0, [r6, #0]
 8015244:	b110      	cbz	r0, 801524c <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 8015246:	6803      	ldr	r3, [r0, #0]
 8015248:	691b      	ldr	r3, [r3, #16]
 801524a:	4798      	blx	r3
 801524c:	6828      	ldr	r0, [r5, #0]
 801524e:	6803      	ldr	r3, [r0, #0]
 8015250:	68db      	ldr	r3, [r3, #12]
 8015252:	4798      	blx	r3
 8015254:	2301      	movs	r3, #1
 8015256:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 801525a:	3404      	adds	r4, #4
 801525c:	4620      	mov	r0, r4
 801525e:	f7ff ff5f 	bl	8015120 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 8015262:	4620      	mov	r0, r4
 8015264:	f7ff ffa0 	bl	80151a8 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 8015268:	6830      	ldr	r0, [r6, #0]
 801526a:	b110      	cbz	r0, 8015272 <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 801526c:	6803      	ldr	r3, [r0, #0]
 801526e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015270:	e7dd      	b.n	801522e <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 8015272:	bd70      	pop	{r4, r5, r6, pc}
 8015274:	2002441c 	.word	0x2002441c
 8015278:	20024418 	.word	0x20024418

0801527c <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 801527c:	4603      	mov	r3, r0
 801527e:	f100 0140 	add.w	r1, r0, #64	; 0x40
 8015282:	2200      	movs	r2, #0
 8015284:	801a      	strh	r2, [r3, #0]
 8015286:	3308      	adds	r3, #8
 8015288:	f823 2c06 	strh.w	r2, [r3, #-6]
 801528c:	f823 2c04 	strh.w	r2, [r3, #-4]
 8015290:	f823 2c02 	strh.w	r2, [r3, #-2]
 8015294:	428b      	cmp	r3, r1
 8015296:	d1f5      	bne.n	8015284 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 8015298:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 801529c:	4770      	bx	lr
	...

080152a0 <_ZN8touchgfx11ApplicationC1Ev>:
 80152a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80152a2:	4b1d      	ldr	r3, [pc, #116]	; (8015318 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 80152a4:	4606      	mov	r6, r0
 80152a6:	4604      	mov	r4, r0
 80152a8:	2500      	movs	r5, #0
 80152aa:	f846 3b04 	str.w	r3, [r6], #4
 80152ae:	22a8      	movs	r2, #168	; 0xa8
 80152b0:	2100      	movs	r1, #0
 80152b2:	4630      	mov	r0, r6
 80152b4:	f00e fa0a 	bl	80236cc <memset>
 80152b8:	f8a4 5084 	strh.w	r5, [r4, #132]	; 0x84
 80152bc:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 80152c0:	4f16      	ldr	r7, [pc, #88]	; (801531c <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 80152c2:	f7ff ffdb 	bl	801527c <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 80152c6:	f104 00ee 	add.w	r0, r4, #238	; 0xee
 80152ca:	f7ff ffd7 	bl	801527c <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 80152ce:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 80152d2:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 80152d6:	f8a4 5134 	strh.w	r5, [r4, #308]	; 0x134
 80152da:	f8a4 5136 	strh.w	r5, [r4, #310]	; 0x136
 80152de:	f884 5138 	strb.w	r5, [r4, #312]	; 0x138
 80152e2:	490f      	ldr	r1, [pc, #60]	; (8015320 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 80152e4:	480f      	ldr	r0, [pc, #60]	; (8015324 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 80152e6:	f00e f829 	bl	802333c <CRC_Lock>
 80152ea:	4b0f      	ldr	r3, [pc, #60]	; (8015328 <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 80152ec:	b158      	cbz	r0, 8015306 <_ZN8touchgfx11ApplicationC1Ev+0x66>
 80152ee:	801d      	strh	r5, [r3, #0]
 80152f0:	2300      	movs	r3, #0
 80152f2:	4a0e      	ldr	r2, [pc, #56]	; (801532c <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 80152f4:	4630      	mov	r0, r6
 80152f6:	6013      	str	r3, [r2, #0]
 80152f8:	4a0d      	ldr	r2, [pc, #52]	; (8015330 <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 80152fa:	603b      	str	r3, [r7, #0]
 80152fc:	6013      	str	r3, [r2, #0]
 80152fe:	f7ff ff2e 	bl	801515e <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8015302:	4620      	mov	r0, r4
 8015304:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015306:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801530a:	2002      	movs	r0, #2
 801530c:	801a      	strh	r2, [r3, #0]
 801530e:	6038      	str	r0, [r7, #0]
 8015310:	f001 fa1c 	bl	801674c <_ZN8touchgfx6Screen4drawEv>
 8015314:	e7ec      	b.n	80152f0 <_ZN8touchgfx11ApplicationC1Ev+0x50>
 8015316:	bf00      	nop
 8015318:	08027b28 	.word	0x08027b28
 801531c:	20024418 	.word	0x20024418
 8015320:	b5e8b5cd 	.word	0xb5e8b5cd
 8015324:	f407a5c2 	.word	0xf407a5c2
 8015328:	20000030 	.word	0x20000030
 801532c:	20024428 	.word	0x20024428
 8015330:	2002441c 	.word	0x2002441c

08015334 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 8015334:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8015338:	3b01      	subs	r3, #1
 801533a:	b29b      	uxth	r3, r3
 801533c:	428b      	cmp	r3, r1
 801533e:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 8015342:	b510      	push	{r4, lr}
 8015344:	d908      	bls.n	8015358 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 8015346:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 801534a:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 801534e:	681a      	ldr	r2, [r3, #0]
 8015350:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 8015354:	685a      	ldr	r2, [r3, #4]
 8015356:	6062      	str	r2, [r4, #4]
 8015358:	bd10      	pop	{r4, pc}
	...

0801535c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 801535c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015360:	b08f      	sub	sp, #60	; 0x3c
 8015362:	4b8f      	ldr	r3, [pc, #572]	; (80155a0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x244>)
 8015364:	4683      	mov	fp, r0
 8015366:	ac0a      	add	r4, sp, #40	; 0x28
 8015368:	e884 0006 	stmia.w	r4, {r1, r2}
 801536c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015370:	4620      	mov	r0, r4
 8015372:	4b8c      	ldr	r3, [pc, #560]	; (80155a4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x248>)
 8015374:	f9b3 1000 	ldrsh.w	r1, [r3]
 8015378:	f7ff fe10 	bl	8014f9c <_ZN8touchgfx4Rect10restrictToEss>
 801537c:	4620      	mov	r0, r4
 801537e:	f7fd fe56 	bl	801302e <_ZNK8touchgfx4Rect7isEmptyEv>
 8015382:	2800      	cmp	r0, #0
 8015384:	d16a      	bne.n	801545c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8015386:	9403      	str	r4, [sp, #12]
 8015388:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	; 0xec
 801538c:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
 8015390:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 8015394:	9301      	str	r3, [sp, #4]
 8015396:	35a4      	adds	r5, #164	; 0xa4
 8015398:	b15c      	cbz	r4, 80153b2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 801539a:	4629      	mov	r1, r5
 801539c:	9803      	ldr	r0, [sp, #12]
 801539e:	f7ff fe4d 	bl	801503c <_ZNK8touchgfx4Rect8includesERKS0_>
 80153a2:	3c01      	subs	r4, #1
 80153a4:	b118      	cbz	r0, 80153ae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52>
 80153a6:	b2a1      	uxth	r1, r4
 80153a8:	9801      	ldr	r0, [sp, #4]
 80153aa:	f7ff ffc3 	bl	8015334 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80153ae:	3d08      	subs	r5, #8
 80153b0:	e7f2      	b.n	8015398 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c>
 80153b2:	f8bb 80ec 	ldrh.w	r8, [fp, #236]	; 0xec
 80153b6:	f108 33ff 	add.w	r3, r8, #4294967295
 80153ba:	f8cd 8010 	str.w	r8, [sp, #16]
 80153be:	9302      	str	r3, [sp, #8]
 80153c0:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 80153c4:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 80153c8:	9306      	str	r3, [sp, #24]
 80153ca:	445c      	add	r4, fp
 80153cc:	2500      	movs	r5, #0
 80153ce:	4626      	mov	r6, r4
 80153d0:	f8cd 8014 	str.w	r8, [sp, #20]
 80153d4:	462f      	mov	r7, r5
 80153d6:	9b05      	ldr	r3, [sp, #20]
 80153d8:	2b00      	cmp	r3, #0
 80153da:	d073      	beq.n	80154c4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 80153dc:	9903      	ldr	r1, [sp, #12]
 80153de:	4630      	mov	r0, r6
 80153e0:	f7ff fdba 	bl	8014f58 <_ZNK8touchgfx4Rect9intersectERKS0_>
 80153e4:	b350      	cbz	r0, 801543c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 80153e6:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 80153ea:	f9b6 c000 	ldrsh.w	ip, [r6]
 80153ee:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	; 0x2a
 80153f2:	45e6      	cmp	lr, ip
 80153f4:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 80153f8:	db33      	blt.n	8015462 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 80153fa:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 80153fe:	88b3      	ldrh	r3, [r6, #4]
 8015400:	4472      	add	r2, lr
 8015402:	4463      	add	r3, ip
 8015404:	b212      	sxth	r2, r2
 8015406:	b21b      	sxth	r3, r3
 8015408:	429a      	cmp	r2, r3
 801540a:	dc2a      	bgt.n	8015462 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 801540c:	fa1f f289 	uxth.w	r2, r9
 8015410:	88f3      	ldrh	r3, [r6, #6]
 8015412:	45ca      	cmp	sl, r9
 8015414:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 8015418:	4413      	add	r3, r2
 801541a:	fa1f fc8a 	uxth.w	ip, sl
 801541e:	b29b      	uxth	r3, r3
 8015420:	fa0f fe83 	sxth.w	lr, r3
 8015424:	db0f      	blt.n	8015446 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 8015426:	eba3 030c 	sub.w	r3, r3, ip
 801542a:	1ac9      	subs	r1, r1, r3
 801542c:	b209      	sxth	r1, r1
 801542e:	2900      	cmp	r1, #0
 8015430:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8015434:	dd12      	ble.n	801545c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8015436:	f8ad e02a 	strh.w	lr, [sp, #42]	; 0x2a
 801543a:	4605      	mov	r5, r0
 801543c:	9b05      	ldr	r3, [sp, #20]
 801543e:	3e08      	subs	r6, #8
 8015440:	3b01      	subs	r3, #1
 8015442:	9305      	str	r3, [sp, #20]
 8015444:	e7c7      	b.n	80153d6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 8015446:	4461      	add	r1, ip
 8015448:	b209      	sxth	r1, r1
 801544a:	4571      	cmp	r1, lr
 801544c:	dc38      	bgt.n	80154c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801544e:	eba2 020c 	sub.w	r2, r2, ip
 8015452:	b212      	sxth	r2, r2
 8015454:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 8015458:	2a00      	cmp	r2, #0
 801545a:	dcee      	bgt.n	801543a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 801545c:	b00f      	add	sp, #60	; 0x3c
 801545e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015462:	45ca      	cmp	sl, r9
 8015464:	db2c      	blt.n	80154c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8015466:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 801546a:	449a      	add	sl, r3
 801546c:	88f3      	ldrh	r3, [r6, #6]
 801546e:	4499      	add	r9, r3
 8015470:	fa0f fa8a 	sxth.w	sl, sl
 8015474:	fa0f f989 	sxth.w	r9, r9
 8015478:	45ca      	cmp	sl, r9
 801547a:	dc21      	bgt.n	80154c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801547c:	fa1f f28c 	uxth.w	r2, ip
 8015480:	88b3      	ldrh	r3, [r6, #4]
 8015482:	45e6      	cmp	lr, ip
 8015484:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8015488:	4413      	add	r3, r2
 801548a:	fa1f f98e 	uxth.w	r9, lr
 801548e:	b29b      	uxth	r3, r3
 8015490:	fa0f fa83 	sxth.w	sl, r3
 8015494:	db0a      	blt.n	80154ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x150>
 8015496:	eba3 0309 	sub.w	r3, r3, r9
 801549a:	1ac9      	subs	r1, r1, r3
 801549c:	b209      	sxth	r1, r1
 801549e:	2900      	cmp	r1, #0
 80154a0:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 80154a4:	ddda      	ble.n	801545c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 80154a6:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 80154aa:	e7c6      	b.n	801543a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 80154ac:	4449      	add	r1, r9
 80154ae:	b209      	sxth	r1, r1
 80154b0:	4551      	cmp	r1, sl
 80154b2:	dc05      	bgt.n	80154c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 80154b4:	eba2 0209 	sub.w	r2, r2, r9
 80154b8:	b212      	sxth	r2, r2
 80154ba:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 80154be:	e7cb      	b.n	8015458 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 80154c0:	4607      	mov	r7, r0
 80154c2:	e7bb      	b.n	801543c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 80154c4:	2d00      	cmp	r5, #0
 80154c6:	d181      	bne.n	80153cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x70>
 80154c8:	2f00      	cmp	r7, #0
 80154ca:	f000 81dd 	beq.w	8015888 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 80154ce:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
 80154d2:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	; 0x2a
 80154d6:	b2b3      	uxth	r3, r6
 80154d8:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 80154dc:	b2b9      	uxth	r1, r7
 80154de:	f8bd a02e 	ldrh.w	sl, [sp, #46]	; 0x2e
 80154e2:	441a      	add	r2, r3
 80154e4:	448a      	add	sl, r1
 80154e6:	9105      	str	r1, [sp, #20]
 80154e8:	b292      	uxth	r2, r2
 80154ea:	fa1f fa8a 	uxth.w	sl, sl
 80154ee:	fa0f f882 	sxth.w	r8, r2
 80154f2:	fa0f f98a 	sxth.w	r9, sl
 80154f6:	e9cd 2307 	strd	r2, r3, [sp, #28]
 80154fa:	9b04      	ldr	r3, [sp, #16]
 80154fc:	2b00      	cmp	r3, #0
 80154fe:	d053      	beq.n	80155a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 8015500:	9903      	ldr	r1, [sp, #12]
 8015502:	4620      	mov	r0, r4
 8015504:	f7ff fd28 	bl	8014f58 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8015508:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801550c:	b1c0      	cbz	r0, 8015540 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801550e:	f9b4 e000 	ldrsh.w	lr, [r4]
 8015512:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8015516:	4576      	cmp	r6, lr
 8015518:	dc23      	bgt.n	8015562 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801551a:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 801551e:	44f4      	add	ip, lr
 8015520:	fa0f fc8c 	sxth.w	ip, ip
 8015524:	45e0      	cmp	r8, ip
 8015526:	db1c      	blt.n	8015562 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8015528:	428f      	cmp	r7, r1
 801552a:	fa1f fc81 	uxth.w	ip, r1
 801552e:	88e1      	ldrh	r1, [r4, #6]
 8015530:	dc0d      	bgt.n	801554e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 8015532:	ebaa 0c0c 	sub.w	ip, sl, ip
 8015536:	f8a4 9002 	strh.w	r9, [r4, #2]
 801553a:	eba1 010c 	sub.w	r1, r1, ip
 801553e:	80e1      	strh	r1, [r4, #6]
 8015540:	4628      	mov	r0, r5
 8015542:	9904      	ldr	r1, [sp, #16]
 8015544:	3c08      	subs	r4, #8
 8015546:	4605      	mov	r5, r0
 8015548:	3901      	subs	r1, #1
 801554a:	9104      	str	r1, [sp, #16]
 801554c:	e7d3      	b.n	80154f6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x19a>
 801554e:	4461      	add	r1, ip
 8015550:	b209      	sxth	r1, r1
 8015552:	4549      	cmp	r1, r9
 8015554:	dcf5      	bgt.n	8015542 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8015556:	9905      	ldr	r1, [sp, #20]
 8015558:	eba1 0c0c 	sub.w	ip, r1, ip
 801555c:	f8a4 c006 	strh.w	ip, [r4, #6]
 8015560:	e7ee      	b.n	8015540 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 8015562:	428f      	cmp	r7, r1
 8015564:	dced      	bgt.n	8015542 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8015566:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 801556a:	4461      	add	r1, ip
 801556c:	b209      	sxth	r1, r1
 801556e:	4589      	cmp	r9, r1
 8015570:	dbe7      	blt.n	8015542 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8015572:	4576      	cmp	r6, lr
 8015574:	fa1f fc8e 	uxth.w	ip, lr
 8015578:	88a1      	ldrh	r1, [r4, #4]
 801557a:	dc07      	bgt.n	801558c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x230>
 801557c:	eba2 0c0c 	sub.w	ip, r2, ip
 8015580:	f8a4 8000 	strh.w	r8, [r4]
 8015584:	eba1 010c 	sub.w	r1, r1, ip
 8015588:	80a1      	strh	r1, [r4, #4]
 801558a:	e7d9      	b.n	8015540 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801558c:	4461      	add	r1, ip
 801558e:	b209      	sxth	r1, r1
 8015590:	4588      	cmp	r8, r1
 8015592:	dbd6      	blt.n	8015542 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8015594:	eba3 0c0c 	sub.w	ip, r3, ip
 8015598:	f8a4 c004 	strh.w	ip, [r4, #4]
 801559c:	e7d0      	b.n	8015540 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801559e:	bf00      	nop
 80155a0:	200243d2 	.word	0x200243d2
 80155a4:	200243d0 	.word	0x200243d0
 80155a8:	2d00      	cmp	r5, #0
 80155aa:	f000 816d 	beq.w	8015888 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 80155ae:	9b06      	ldr	r3, [sp, #24]
 80155b0:	445b      	add	r3, fp
 80155b2:	461c      	mov	r4, r3
 80155b4:	9b02      	ldr	r3, [sp, #8]
 80155b6:	3301      	adds	r3, #1
 80155b8:	f000 8166 	beq.w	8015888 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 80155bc:	f104 05a4 	add.w	r5, r4, #164	; 0xa4
 80155c0:	9803      	ldr	r0, [sp, #12]
 80155c2:	4629      	mov	r1, r5
 80155c4:	f7ff fd3a 	bl	801503c <_ZNK8touchgfx4Rect8includesERKS0_>
 80155c8:	b120      	cbz	r0, 80155d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x278>
 80155ca:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 80155ce:	9801      	ldr	r0, [sp, #4]
 80155d0:	f7ff feb0 	bl	8015334 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80155d4:	9903      	ldr	r1, [sp, #12]
 80155d6:	4628      	mov	r0, r5
 80155d8:	f7ff fcbe 	bl	8014f58 <_ZNK8touchgfx4Rect9intersectERKS0_>
 80155dc:	2800      	cmp	r0, #0
 80155de:	f000 809c 	beq.w	801571a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 80155e2:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	; 0xa4
 80155e6:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
 80155ea:	fa1f f189 	uxth.w	r1, r9
 80155ee:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 80155f2:	9309      	str	r3, [sp, #36]	; 0x24
 80155f4:	eb01 0c03 	add.w	ip, r1, r3
 80155f8:	b283      	uxth	r3, r0
 80155fa:	4548      	cmp	r0, r9
 80155fc:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	; 0x2a
 8015600:	fa1f fa8c 	uxth.w	sl, ip
 8015604:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 8015608:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	; 0xa6
 801560c:	eb03 050c 	add.w	r5, r3, ip
 8015610:	b2ad      	uxth	r5, r5
 8015612:	9505      	str	r5, [sp, #20]
 8015614:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 8015618:	9504      	str	r5, [sp, #16]
 801561a:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	; 0xec
 801561e:	f340 8099 	ble.w	8015754 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3f8>
 8015622:	1a5b      	subs	r3, r3, r1
 8015624:	4596      	cmp	lr, r2
 8015626:	fa0f f08a 	sxth.w	r0, sl
 801562a:	b29b      	uxth	r3, r3
 801562c:	b21e      	sxth	r6, r3
 801562e:	dd2e      	ble.n	801568e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x332>
 8015630:	9f02      	ldr	r7, [sp, #8]
 8015632:	fa1f fe8e 	uxth.w	lr, lr
 8015636:	b292      	uxth	r2, r2
 8015638:	f8bd 402e 	ldrh.w	r4, [sp, #46]	; 0x2e
 801563c:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 8015640:	9f04      	ldr	r7, [sp, #16]
 8015642:	ebae 0102 	sub.w	r1, lr, r2
 8015646:	44a6      	add	lr, r4
 8015648:	1a3f      	subs	r7, r7, r0
 801564a:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	; 0xb2
 801564e:	b289      	uxth	r1, r1
 8015650:	4402      	add	r2, r0
 8015652:	fa0f fe8e 	sxth.w	lr, lr
 8015656:	b20d      	sxth	r5, r1
 8015658:	b212      	sxth	r2, r2
 801565a:	436f      	muls	r7, r5
 801565c:	ebae 0202 	sub.w	r2, lr, r2
 8015660:	4372      	muls	r2, r6
 8015662:	4297      	cmp	r7, r2
 8015664:	db09      	blt.n	801567a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 8015666:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	; 0xac
 801566a:	f8a8 50b2 	strh.w	r5, [r8, #178]	; 0xb2
 801566e:	449c      	add	ip, r3
 8015670:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8015674:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 8015678:	e686      	b.n	8015388 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801567a:	4421      	add	r1, r4
 801567c:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	; 0xae
 8015680:	f8a8 60b0 	strh.w	r6, [r8, #176]	; 0xb0
 8015684:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8015688:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801568c:	e67c      	b.n	8015388 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801568e:	9f04      	ldr	r7, [sp, #16]
 8015690:	42b8      	cmp	r0, r7
 8015692:	da27      	bge.n	80156e4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 8015694:	9902      	ldr	r1, [sp, #8]
 8015696:	1a3f      	subs	r7, r7, r0
 8015698:	f8bd 502e 	ldrh.w	r5, [sp, #46]	; 0x2e
 801569c:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 80156a0:	eb05 010e 	add.w	r1, r5, lr
 80156a4:	fa1f f881 	uxth.w	r8, r1
 80156a8:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	; 0xb2
 80156ac:	4411      	add	r1, r2
 80156ae:	fa0f f988 	sxth.w	r9, r8
 80156b2:	eba2 020e 	sub.w	r2, r2, lr
 80156b6:	eba1 0108 	sub.w	r1, r1, r8
 80156ba:	4372      	muls	r2, r6
 80156bc:	b289      	uxth	r1, r1
 80156be:	fa0f f881 	sxth.w	r8, r1
 80156c2:	fb08 f707 	mul.w	r7, r8, r7
 80156c6:	42ba      	cmp	r2, r7
 80156c8:	dc06      	bgt.n	80156d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37c>
 80156ca:	f8a4 90ae 	strh.w	r9, [r4, #174]	; 0xae
 80156ce:	f8a4 80b2 	strh.w	r8, [r4, #178]	; 0xb2
 80156d2:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
 80156d6:	e7ca      	b.n	801566e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x312>
 80156d8:	4429      	add	r1, r5
 80156da:	f8a4 60b0 	strh.w	r6, [r4, #176]	; 0xb0
 80156de:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 80156e2:	e651      	b.n	8015388 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80156e4:	9805      	ldr	r0, [sp, #20]
 80156e6:	2d06      	cmp	r5, #6
 80156e8:	ebaa 0000 	sub.w	r0, sl, r0
 80156ec:	b280      	uxth	r0, r0
 80156ee:	fa0f fe80 	sxth.w	lr, r0
 80156f2:	d817      	bhi.n	8015724 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c8>
 80156f4:	9b04      	ldr	r3, [sp, #16]
 80156f6:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	; 0xaa
 80156fa:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 80156fe:	1c6b      	adds	r3, r5, #1
 8015700:	f8a4 e0a8 	strh.w	lr, [r4, #168]	; 0xa8
 8015704:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
 8015708:	9b01      	ldr	r3, [sp, #4]
 801570a:	9801      	ldr	r0, [sp, #4]
 801570c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8015710:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 8015714:	805a      	strh	r2, [r3, #2]
 8015716:	809e      	strh	r6, [r3, #4]
 8015718:	80d9      	strh	r1, [r3, #6]
 801571a:	9b02      	ldr	r3, [sp, #8]
 801571c:	3c08      	subs	r4, #8
 801571e:	3b01      	subs	r3, #1
 8015720:	9302      	str	r3, [sp, #8]
 8015722:	e747      	b.n	80155b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>
 8015724:	9a02      	ldr	r2, [sp, #8]
 8015726:	45b6      	cmp	lr, r6
 8015728:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 801572c:	db0d      	blt.n	801574a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 801572e:	449c      	add	ip, r3
 8015730:	445a      	add	r2, fp
 8015732:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
 8015736:	fa1f fc8c 	uxth.w	ip, ip
 801573a:	f8a2 e0b0 	strh.w	lr, [r2, #176]	; 0xb0
 801573e:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 8015742:	448c      	add	ip, r1
 8015744:	f8a2 c0ac 	strh.w	ip, [r2, #172]	; 0xac
 8015748:	e61e      	b.n	8015388 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801574a:	445a      	add	r2, fp
 801574c:	4484      	add	ip, r0
 801574e:	f8a2 60b0 	strh.w	r6, [r2, #176]	; 0xb0
 8015752:	e78f      	b.n	8015674 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 8015754:	fa1f f18e 	uxth.w	r1, lr
 8015758:	f8bd 602e 	ldrh.w	r6, [sp, #46]	; 0x2e
 801575c:	b293      	uxth	r3, r2
 801575e:	4596      	cmp	lr, r2
 8015760:	eb01 0806 	add.w	r8, r1, r6
 8015764:	9306      	str	r3, [sp, #24]
 8015766:	fa1f f888 	uxth.w	r8, r8
 801576a:	9f06      	ldr	r7, [sp, #24]
 801576c:	fa0f f388 	sxth.w	r3, r8
 8015770:	9307      	str	r3, [sp, #28]
 8015772:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
 8015776:	443b      	add	r3, r7
 8015778:	b29b      	uxth	r3, r3
 801577a:	9308      	str	r3, [sp, #32]
 801577c:	da24      	bge.n	80157c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46c>
 801577e:	9905      	ldr	r1, [sp, #20]
 8015780:	eba3 0308 	sub.w	r3, r3, r8
 8015784:	eba2 020e 	sub.w	r2, r2, lr
 8015788:	eba9 0000 	sub.w	r0, r9, r0
 801578c:	ebaa 0401 	sub.w	r4, sl, r1
 8015790:	b29b      	uxth	r3, r3
 8015792:	b2a4      	uxth	r4, r4
 8015794:	b219      	sxth	r1, r3
 8015796:	b225      	sxth	r5, r4
 8015798:	4348      	muls	r0, r1
 801579a:	436a      	muls	r2, r5
 801579c:	4282      	cmp	r2, r0
 801579e:	9a02      	ldr	r2, [sp, #8]
 80157a0:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80157a4:	445a      	add	r2, fp
 80157a6:	dc06      	bgt.n	80157b6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45a>
 80157a8:	9b07      	ldr	r3, [sp, #28]
 80157aa:	44a4      	add	ip, r4
 80157ac:	f8a2 10b2 	strh.w	r1, [r2, #178]	; 0xb2
 80157b0:	f8a2 30ae 	strh.w	r3, [r2, #174]	; 0xae
 80157b4:	e75e      	b.n	8015674 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 80157b6:	9904      	ldr	r1, [sp, #16]
 80157b8:	f8a2 50b0 	strh.w	r5, [r2, #176]	; 0xb0
 80157bc:	f8a2 10ac 	strh.w	r1, [r2, #172]	; 0xac
 80157c0:	4433      	add	r3, r6
 80157c2:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 80157c6:	e5df      	b.n	8015388 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80157c8:	9f06      	ldr	r7, [sp, #24]
 80157ca:	9b04      	ldr	r3, [sp, #16]
 80157cc:	1bc9      	subs	r1, r1, r7
 80157ce:	fa0f f78a 	sxth.w	r7, sl
 80157d2:	b289      	uxth	r1, r1
 80157d4:	429f      	cmp	r7, r3
 80157d6:	fa0f fe81 	sxth.w	lr, r1
 80157da:	dd23      	ble.n	8015824 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c8>
 80157dc:	9a05      	ldr	r2, [sp, #20]
 80157de:	eba9 0000 	sub.w	r0, r9, r0
 80157e2:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 80157e6:	ebaa 0202 	sub.w	r2, sl, r2
 80157ea:	9d07      	ldr	r5, [sp, #28]
 80157ec:	fb0e f000 	mul.w	r0, lr, r0
 80157f0:	b292      	uxth	r2, r2
 80157f2:	eba5 0a03 	sub.w	sl, r5, r3
 80157f6:	9b02      	ldr	r3, [sp, #8]
 80157f8:	b214      	sxth	r4, r2
 80157fa:	00db      	lsls	r3, r3, #3
 80157fc:	fb04 fa0a 	mul.w	sl, r4, sl
 8015800:	445b      	add	r3, fp
 8015802:	4550      	cmp	r0, sl
 8015804:	db03      	blt.n	801580e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4b2>
 8015806:	f8a3 e0b2 	strh.w	lr, [r3, #178]	; 0xb2
 801580a:	4494      	add	ip, r2
 801580c:	e732      	b.n	8015674 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 801580e:	9a04      	ldr	r2, [sp, #16]
 8015810:	4431      	add	r1, r6
 8015812:	f8a3 40b0 	strh.w	r4, [r3, #176]	; 0xb0
 8015816:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 801581a:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
 801581e:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8015822:	e75c      	b.n	80156de <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x382>
 8015824:	9b08      	ldr	r3, [sp, #32]
 8015826:	2d06      	cmp	r5, #6
 8015828:	eba3 0308 	sub.w	r3, r3, r8
 801582c:	b29b      	uxth	r3, r3
 801582e:	b218      	sxth	r0, r3
 8015830:	d813      	bhi.n	801585a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4fe>
 8015832:	9b07      	ldr	r3, [sp, #28]
 8015834:	f8a4 00aa 	strh.w	r0, [r4, #170]	; 0xaa
 8015838:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
 801583c:	1c6b      	adds	r3, r5, #1
 801583e:	9901      	ldr	r1, [sp, #4]
 8015840:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
 8015844:	9b01      	ldr	r3, [sp, #4]
 8015846:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 801584a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801584e:	805a      	strh	r2, [r3, #2]
 8015850:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015852:	f8a3 e006 	strh.w	lr, [r3, #6]
 8015856:	809a      	strh	r2, [r3, #4]
 8015858:	e75f      	b.n	801571a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 801585a:	9c02      	ldr	r4, [sp, #8]
 801585c:	4570      	cmp	r0, lr
 801585e:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 8015862:	db0d      	blt.n	8015880 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x524>
 8015864:	4431      	add	r1, r6
 8015866:	9b06      	ldr	r3, [sp, #24]
 8015868:	445c      	add	r4, fp
 801586a:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 801586e:	b289      	uxth	r1, r1
 8015870:	f8a4 00b2 	strh.w	r0, [r4, #178]	; 0xb2
 8015874:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8015878:	4419      	add	r1, r3
 801587a:	f8a4 10ae 	strh.w	r1, [r4, #174]	; 0xae
 801587e:	e583      	b.n	8015388 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8015880:	445c      	add	r4, fp
 8015882:	f8a4 e0b2 	strh.w	lr, [r4, #178]	; 0xb2
 8015886:	e79b      	b.n	80157c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x464>
 8015888:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	; 0xec
 801588c:	2e07      	cmp	r6, #7
 801588e:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 8015892:	d812      	bhi.n	80158ba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x55e>
 8015894:	1c75      	adds	r5, r6, #1
 8015896:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 801589a:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 801589e:	f8ab 50ec 	strh.w	r5, [fp, #236]	; 0xec
 80158a2:	9d01      	ldr	r5, [sp, #4]
 80158a4:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 80158a8:	442c      	add	r4, r5
 80158aa:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 80158ae:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 80158b2:	8061      	strh	r1, [r4, #2]
 80158b4:	80a2      	strh	r2, [r4, #4]
 80158b6:	80e3      	strh	r3, [r4, #6]
 80158b8:	e5d0      	b.n	801545c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 80158ba:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
 80158be:	3e01      	subs	r6, #1
 80158c0:	445c      	add	r4, fp
 80158c2:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 80158c6:	f04f 37ff 	mov.w	r7, #4294967295
 80158ca:	2500      	movs	r5, #0
 80158cc:	9305      	str	r3, [sp, #20]
 80158ce:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
 80158d2:	1e72      	subs	r2, r6, #1
 80158d4:	9302      	str	r3, [sp, #8]
 80158d6:	4691      	mov	r9, r2
 80158d8:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	; 0xaa
 80158dc:	9304      	str	r3, [sp, #16]
 80158de:	f104 03a4 	add.w	r3, r4, #164	; 0xa4
 80158e2:	f1b9 3fff 	cmp.w	r9, #4294967295
 80158e6:	6818      	ldr	r0, [r3, #0]
 80158e8:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 80158ec:	9207      	str	r2, [sp, #28]
 80158ee:	bf16      	itet	ne
 80158f0:	9905      	ldrne	r1, [sp, #20]
 80158f2:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 80158f6:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 80158fa:	9306      	str	r3, [sp, #24]
 80158fc:	f8be 1006 	ldrh.w	r1, [lr, #6]
 8015900:	f8be 8004 	ldrh.w	r8, [lr, #4]
 8015904:	fb18 f801 	smulbb	r8, r8, r1
 8015908:	6859      	ldr	r1, [r3, #4]
 801590a:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801590e:	4671      	mov	r1, lr
 8015910:	a80c      	add	r0, sp, #48	; 0x30
 8015912:	f7ff fbb9 	bl	8015088 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8015916:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 801591a:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 801591e:	f04f 0c08 	mov.w	ip, #8
 8015922:	9b04      	ldr	r3, [sp, #16]
 8015924:	9a02      	ldr	r2, [sp, #8]
 8015926:	fb10 f001 	smulbb	r0, r0, r1
 801592a:	fb02 8803 	mla	r8, r2, r3, r8
 801592e:	eba0 0108 	sub.w	r1, r0, r8
 8015932:	fb90 f0fc 	sdiv	r0, r0, ip
 8015936:	4288      	cmp	r0, r1
 8015938:	dc20      	bgt.n	801597c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x620>
 801593a:	4551      	cmp	r1, sl
 801593c:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8015940:	da03      	bge.n	801594a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5ee>
 8015942:	b1d9      	cbz	r1, 801597c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x620>
 8015944:	468a      	mov	sl, r1
 8015946:	464f      	mov	r7, r9
 8015948:	4635      	mov	r5, r6
 801594a:	f109 39ff 	add.w	r9, r9, #4294967295
 801594e:	f119 0f02 	cmn.w	r9, #2
 8015952:	d1c6      	bne.n	80158e2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x586>
 8015954:	4616      	mov	r6, r2
 8015956:	3201      	adds	r2, #1
 8015958:	f1a4 0408 	sub.w	r4, r4, #8
 801595c:	d1b7      	bne.n	80158ce <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x572>
 801595e:	9b01      	ldr	r3, [sp, #4]
 8015960:	b2ac      	uxth	r4, r5
 8015962:	00ed      	lsls	r5, r5, #3
 8015964:	1958      	adds	r0, r3, r5
 8015966:	1c7b      	adds	r3, r7, #1
 8015968:	d10b      	bne.n	8015982 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x626>
 801596a:	4601      	mov	r1, r0
 801596c:	9803      	ldr	r0, [sp, #12]
 801596e:	f7ff fb8b 	bl	8015088 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8015972:	4621      	mov	r1, r4
 8015974:	9801      	ldr	r0, [sp, #4]
 8015976:	f7ff fcdd 	bl	8015334 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801597a:	e505      	b.n	8015388 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801597c:	464f      	mov	r7, r9
 801597e:	4635      	mov	r5, r6
 8015980:	e7ed      	b.n	801595e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x602>
 8015982:	9b01      	ldr	r3, [sp, #4]
 8015984:	00ff      	lsls	r7, r7, #3
 8015986:	445d      	add	r5, fp
 8015988:	19d9      	adds	r1, r3, r7
 801598a:	445f      	add	r7, fp
 801598c:	f7ff fb7c 	bl	8015088 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8015990:	9b03      	ldr	r3, [sp, #12]
 8015992:	cb03      	ldmia	r3!, {r0, r1}
 8015994:	9b03      	ldr	r3, [sp, #12]
 8015996:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
 801599a:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 801599e:	f855 0fac 	ldr.w	r0, [r5, #172]!
 80159a2:	6869      	ldr	r1, [r5, #4]
 80159a4:	c303      	stmia	r3!, {r0, r1}
 80159a6:	e7e4      	b.n	8015972 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x616>

080159a8 <_ZN8touchgfx11Application10invalidateEv>:
 80159a8:	4b09      	ldr	r3, [pc, #36]	; (80159d0 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 80159aa:	b082      	sub	sp, #8
 80159ac:	2100      	movs	r1, #0
 80159ae:	f9b3 2000 	ldrsh.w	r2, [r3]
 80159b2:	4b08      	ldr	r3, [pc, #32]	; (80159d4 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 80159b4:	9100      	str	r1, [sp, #0]
 80159b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80159ba:	f8ad 2004 	strh.w	r2, [sp, #4]
 80159be:	f8ad 3006 	strh.w	r3, [sp, #6]
 80159c2:	ab02      	add	r3, sp, #8
 80159c4:	e913 0006 	ldmdb	r3, {r1, r2}
 80159c8:	b002      	add	sp, #8
 80159ca:	f7ff bcc7 	b.w	801535c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 80159ce:	bf00      	nop
 80159d0:	200243d0 	.word	0x200243d0
 80159d4:	200243d2 	.word	0x200243d2

080159d8 <_ZN8touchgfx11Application15drawCachedAreasEv>:
 80159d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80159dc:	f500 7698 	add.w	r6, r0, #304	; 0x130
 80159e0:	b09b      	sub	sp, #108	; 0x6c
 80159e2:	4604      	mov	r4, r0
 80159e4:	4630      	mov	r0, r6
 80159e6:	f7fd fb22 	bl	801302e <_ZNK8touchgfx4Rect7isEmptyEv>
 80159ea:	4605      	mov	r5, r0
 80159ec:	b940      	cbnz	r0, 8015a00 <_ZN8touchgfx11Application15drawCachedAreasEv+0x28>
 80159ee:	4620      	mov	r0, r4
 80159f0:	e896 0006 	ldmia.w	r6, {r1, r2}
 80159f4:	f7ff fcb2 	bl	801535c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 80159f8:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 80159fc:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
 8015a00:	4bc8      	ldr	r3, [pc, #800]	; (8015d24 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 8015a02:	681b      	ldr	r3, [r3, #0]
 8015a04:	2b00      	cmp	r3, #0
 8015a06:	d03e      	beq.n	8015a86 <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 8015a08:	4dc7      	ldr	r5, [pc, #796]	; (8015d28 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 8015a0a:	4628      	mov	r0, r5
 8015a0c:	f7fd fb0f 	bl	801302e <_ZNK8touchgfx4Rect7isEmptyEv>
 8015a10:	4606      	mov	r6, r0
 8015a12:	2800      	cmp	r0, #0
 8015a14:	d137      	bne.n	8015a86 <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 8015a16:	4628      	mov	r0, r5
 8015a18:	f7ff f9ec 	bl	8014df4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8015a1c:	6829      	ldr	r1, [r5, #0]
 8015a1e:	686a      	ldr	r2, [r5, #4]
 8015a20:	4620      	mov	r0, r4
 8015a22:	f7ff fc9b 	bl	801535c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8015a26:	802e      	strh	r6, [r5, #0]
 8015a28:	806e      	strh	r6, [r5, #2]
 8015a2a:	80ae      	strh	r6, [r5, #4]
 8015a2c:	80ee      	strh	r6, [r5, #6]
 8015a2e:	ae09      	add	r6, sp, #36	; 0x24
 8015a30:	4630      	mov	r0, r6
 8015a32:	f7ff fc23 	bl	801527c <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8015a36:	4abd      	ldr	r2, [pc, #756]	; (8015d2c <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 8015a38:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
 8015a3c:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 8015a40:	8815      	ldrh	r5, [r2, #0]
 8015a42:	9202      	str	r2, [sp, #8]
 8015a44:	462b      	mov	r3, r5
 8015a46:	429f      	cmp	r7, r3
 8015a48:	d924      	bls.n	8015a94 <_ZN8touchgfx11Application15drawCachedAreasEv+0xbc>
 8015a4a:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 8015a4e:	2907      	cmp	r1, #7
 8015a50:	d816      	bhi.n	8015a80 <_ZN8touchgfx11Application15drawCachedAreasEv+0xa8>
 8015a52:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 8015a56:	f930 8033 	ldrsh.w	r8, [r0, r3, lsl #3]
 8015a5a:	f9b2 9002 	ldrsh.w	r9, [r2, #2]
 8015a5e:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 8015a62:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 8015a66:	1c4a      	adds	r2, r1, #1
 8015a68:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
 8015a6c:	eb06 02c1 	add.w	r2, r6, r1, lsl #3
 8015a70:	f826 8031 	strh.w	r8, [r6, r1, lsl #3]
 8015a74:	f8a2 9002 	strh.w	r9, [r2, #2]
 8015a78:	f8a2 e004 	strh.w	lr, [r2, #4]
 8015a7c:	f8a2 c006 	strh.w	ip, [r2, #6]
 8015a80:	3301      	adds	r3, #1
 8015a82:	b29b      	uxth	r3, r3
 8015a84:	e7df      	b.n	8015a46 <_ZN8touchgfx11Application15drawCachedAreasEv+0x6e>
 8015a86:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 8015a8a:	2b00      	cmp	r3, #0
 8015a8c:	d1cf      	bne.n	8015a2e <_ZN8touchgfx11Application15drawCachedAreasEv+0x56>
 8015a8e:	b01b      	add	sp, #108	; 0x6c
 8015a90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a94:	462f      	mov	r7, r5
 8015a96:	f8b4 312e 	ldrh.w	r3, [r4, #302]	; 0x12e
 8015a9a:	42bb      	cmp	r3, r7
 8015a9c:	d90b      	bls.n	8015ab6 <_ZN8touchgfx11Application15drawCachedAreasEv+0xde>
 8015a9e:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
 8015aa2:	3701      	adds	r7, #1
 8015aa4:	4620      	mov	r0, r4
 8015aa6:	f8d3 10ee 	ldr.w	r1, [r3, #238]	; 0xee
 8015aaa:	b2bf      	uxth	r7, r7
 8015aac:	f8d3 20f2 	ldr.w	r2, [r3, #242]	; 0xf2
 8015ab0:	f7ff fc54 	bl	801535c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8015ab4:	e7ef      	b.n	8015a96 <_ZN8touchgfx11Application15drawCachedAreasEv+0xbe>
 8015ab6:	4a9e      	ldr	r2, [pc, #632]	; (8015d30 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 8015ab8:	6813      	ldr	r3, [r2, #0]
 8015aba:	4690      	mov	r8, r2
 8015abc:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8015ac0:	2b01      	cmp	r3, #1
 8015ac2:	f040 80e4 	bne.w	8015c8e <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b6>
 8015ac6:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 8015aca:	4629      	mov	r1, r5
 8015acc:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
 8015ad0:	2500      	movs	r5, #0
 8015ad2:	33ae      	adds	r3, #174	; 0xae
 8015ad4:	428f      	cmp	r7, r1
 8015ad6:	f103 0308 	add.w	r3, r3, #8
 8015ada:	dd0a      	ble.n	8015af2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x11a>
 8015adc:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 8015ae0:	3101      	adds	r1, #1
 8015ae2:	f833 0c04 	ldrh.w	r0, [r3, #-4]
 8015ae6:	4402      	add	r2, r0
 8015ae8:	b212      	sxth	r2, r2
 8015aea:	4295      	cmp	r5, r2
 8015aec:	bfb8      	it	lt
 8015aee:	4615      	movlt	r5, r2
 8015af0:	e7f0      	b.n	8015ad4 <_ZN8touchgfx11Application15drawCachedAreasEv+0xfc>
 8015af2:	4b90      	ldr	r3, [pc, #576]	; (8015d34 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 8015af4:	f8df b238 	ldr.w	fp, [pc, #568]	; 8015d30 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>
 8015af8:	881b      	ldrh	r3, [r3, #0]
 8015afa:	46d8      	mov	r8, fp
 8015afc:	2b0f      	cmp	r3, #15
 8015afe:	bf8c      	ite	hi
 8015b00:	ea4f 0ad3 	movhi.w	sl, r3, lsr #3
 8015b04:	f04f 0a01 	movls.w	sl, #1
 8015b08:	2300      	movs	r3, #0
 8015b0a:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8015b0e:	f8bd 701a 	ldrh.w	r7, [sp, #26]
 8015b12:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8015b16:	4438      	add	r0, r7
 8015b18:	b207      	sxth	r7, r0
 8015b1a:	f8db 0000 	ldr.w	r0, [fp]
 8015b1e:	42bd      	cmp	r5, r7
 8015b20:	6803      	ldr	r3, [r0, #0]
 8015b22:	f340 8084 	ble.w	8015c2e <_ZN8touchgfx11Application15drawCachedAreasEv+0x256>
 8015b26:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8015b2a:	4798      	blx	r3
 8015b2c:	eb07 030a 	add.w	r3, r7, sl
 8015b30:	4298      	cmp	r0, r3
 8015b32:	da07      	bge.n	8015b44 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 8015b34:	4285      	cmp	r5, r0
 8015b36:	dd05      	ble.n	8015b44 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 8015b38:	4287      	cmp	r7, r0
 8015b3a:	dd6d      	ble.n	8015c18 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 8015b3c:	2f00      	cmp	r7, #0
 8015b3e:	dd6b      	ble.n	8015c18 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 8015b40:	4628      	mov	r0, r5
 8015b42:	e004      	b.n	8015b4e <_ZN8touchgfx11Application15drawCachedAreasEv+0x176>
 8015b44:	4287      	cmp	r7, r0
 8015b46:	dcfb      	bgt.n	8015b40 <_ZN8touchgfx11Application15drawCachedAreasEv+0x168>
 8015b48:	42a8      	cmp	r0, r5
 8015b4a:	bfa8      	it	ge
 8015b4c:	4628      	movge	r0, r5
 8015b4e:	4b7a      	ldr	r3, [pc, #488]	; (8015d38 <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>)
 8015b50:	1bc0      	subs	r0, r0, r7
 8015b52:	2200      	movs	r2, #0
 8015b54:	f8ad 7016 	strh.w	r7, [sp, #22]
 8015b58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015b5c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8015b60:	f8ad 3018 	strh.w	r3, [sp, #24]
 8015b64:	9b02      	ldr	r3, [sp, #8]
 8015b66:	f8ad 001a 	strh.w	r0, [sp, #26]
 8015b6a:	881f      	ldrh	r7, [r3, #0]
 8015b6c:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 8015b70:	42bb      	cmp	r3, r7
 8015b72:	d9cc      	bls.n	8015b0e <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
 8015b74:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 8015b78:	ab07      	add	r3, sp, #28
 8015b7a:	f852 0fac 	ldr.w	r0, [r2, #172]!
 8015b7e:	6851      	ldr	r1, [r2, #4]
 8015b80:	c303      	stmia	r3!, {r0, r1}
 8015b82:	a905      	add	r1, sp, #20
 8015b84:	a807      	add	r0, sp, #28
 8015b86:	f7ff f9e7 	bl	8014f58 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8015b8a:	2800      	cmp	r0, #0
 8015b8c:	d04c      	beq.n	8015c28 <_ZN8touchgfx11Application15drawCachedAreasEv+0x250>
 8015b8e:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 8015b92:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 8015b96:	f8bd 9020 	ldrh.w	r9, [sp, #32]
 8015b9a:	4686      	mov	lr, r0
 8015b9c:	4290      	cmp	r0, r2
 8015b9e:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 8015ba2:	4448      	add	r0, r9
 8015ba4:	f8bd 9018 	ldrh.w	r9, [sp, #24]
 8015ba8:	bfb8      	it	lt
 8015baa:	4696      	movlt	lr, r2
 8015bac:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8015bb0:	444a      	add	r2, r9
 8015bb2:	b280      	uxth	r0, r0
 8015bb4:	4299      	cmp	r1, r3
 8015bb6:	468c      	mov	ip, r1
 8015bb8:	b292      	uxth	r2, r2
 8015bba:	9303      	str	r3, [sp, #12]
 8015bbc:	bfb8      	it	lt
 8015bbe:	469c      	movlt	ip, r3
 8015bc0:	b203      	sxth	r3, r0
 8015bc2:	fa0f f982 	sxth.w	r9, r2
 8015bc6:	f8ad e01c 	strh.w	lr, [sp, #28]
 8015bca:	f8ad c01e 	strh.w	ip, [sp, #30]
 8015bce:	454b      	cmp	r3, r9
 8015bd0:	bfb8      	it	lt
 8015bd2:	4602      	movlt	r2, r0
 8015bd4:	9b03      	ldr	r3, [sp, #12]
 8015bd6:	eba2 020e 	sub.w	r2, r2, lr
 8015bda:	f8ad 2020 	strh.w	r2, [sp, #32]
 8015bde:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 8015be2:	4411      	add	r1, r2
 8015be4:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8015be8:	4413      	add	r3, r2
 8015bea:	b289      	uxth	r1, r1
 8015bec:	b29b      	uxth	r3, r3
 8015bee:	b208      	sxth	r0, r1
 8015bf0:	b21a      	sxth	r2, r3
 8015bf2:	4290      	cmp	r0, r2
 8015bf4:	bfb8      	it	lt
 8015bf6:	460b      	movlt	r3, r1
 8015bf8:	eba3 030c 	sub.w	r3, r3, ip
 8015bfc:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8015c00:	a807      	add	r0, sp, #28
 8015c02:	f7fd fa14 	bl	801302e <_ZNK8touchgfx4Rect7isEmptyEv>
 8015c06:	b920      	cbnz	r0, 8015c12 <_ZN8touchgfx11Application15drawCachedAreasEv+0x23a>
 8015c08:	6823      	ldr	r3, [r4, #0]
 8015c0a:	a907      	add	r1, sp, #28
 8015c0c:	4620      	mov	r0, r4
 8015c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015c10:	4798      	blx	r3
 8015c12:	3701      	adds	r7, #1
 8015c14:	b2bf      	uxth	r7, r7
 8015c16:	e7a9      	b.n	8015b6c <_ZN8touchgfx11Application15drawCachedAreasEv+0x194>
 8015c18:	f8d8 0000 	ldr.w	r0, [r8]
 8015c1c:	2101      	movs	r1, #1
 8015c1e:	6803      	ldr	r3, [r0, #0]
 8015c20:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8015c24:	4798      	blx	r3
 8015c26:	e772      	b.n	8015b0e <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
 8015c28:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8015c2c:	e7e8      	b.n	8015c00 <_ZN8touchgfx11Application15drawCachedAreasEv+0x228>
 8015c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015c30:	4798      	blx	r3
 8015c32:	4b42      	ldr	r3, [pc, #264]	; (8015d3c <_ZN8touchgfx11Application15drawCachedAreasEv+0x364>)
 8015c34:	781b      	ldrb	r3, [r3, #0]
 8015c36:	2b00      	cmp	r3, #0
 8015c38:	f43f af29 	beq.w	8015a8e <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 8015c3c:	2300      	movs	r3, #0
 8015c3e:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 8015c42:	f104 00ee 	add.w	r0, r4, #238	; 0xee
 8015c46:	f8a4 312e 	strh.w	r3, [r4, #302]	; 0x12e
 8015c4a:	9b02      	ldr	r3, [sp, #8]
 8015c4c:	881b      	ldrh	r3, [r3, #0]
 8015c4e:	429d      	cmp	r5, r3
 8015c50:	f67f af1d 	bls.w	8015a8e <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 8015c54:	f8b4 112e 	ldrh.w	r1, [r4, #302]	; 0x12e
 8015c58:	2907      	cmp	r1, #7
 8015c5a:	d815      	bhi.n	8015c88 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b0>
 8015c5c:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 8015c60:	f936 8033 	ldrsh.w	r8, [r6, r3, lsl #3]
 8015c64:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
 8015c68:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
 8015c6c:	f9b2 7006 	ldrsh.w	r7, [r2, #6]
 8015c70:	1c4a      	adds	r2, r1, #1
 8015c72:	f8a4 212e 	strh.w	r2, [r4, #302]	; 0x12e
 8015c76:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 8015c7a:	f820 8031 	strh.w	r8, [r0, r1, lsl #3]
 8015c7e:	f8a2 e002 	strh.w	lr, [r2, #2]
 8015c82:	f8a2 c004 	strh.w	ip, [r2, #4]
 8015c86:	80d7      	strh	r7, [r2, #6]
 8015c88:	3301      	adds	r3, #1
 8015c8a:	b29b      	uxth	r3, r3
 8015c8c:	e7df      	b.n	8015c4e <_ZN8touchgfx11Application15drawCachedAreasEv+0x276>
 8015c8e:	2b02      	cmp	r3, #2
 8015c90:	f040 8135 	bne.w	8015efe <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
 8015c94:	4b2a      	ldr	r3, [pc, #168]	; (8015d40 <_ZN8touchgfx11Application15drawCachedAreasEv+0x368>)
 8015c96:	f104 09ac 	add.w	r9, r4, #172	; 0xac
 8015c9a:	781b      	ldrb	r3, [r3, #0]
 8015c9c:	2b01      	cmp	r3, #1
 8015c9e:	f000 809c 	beq.w	8015dda <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 8015ca2:	9b02      	ldr	r3, [sp, #8]
 8015ca4:	f8b4 20ec 	ldrh.w	r2, [r4, #236]	; 0xec
 8015ca8:	f8b3 b000 	ldrh.w	fp, [r3]
 8015cac:	f10b 0b01 	add.w	fp, fp, #1
 8015cb0:	fa1f fb8b 	uxth.w	fp, fp
 8015cb4:	2a00      	cmp	r2, #0
 8015cb6:	d0bc      	beq.n	8015c32 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 8015cb8:	f8b4 50ae 	ldrh.w	r5, [r4, #174]	; 0xae
 8015cbc:	4659      	mov	r1, fp
 8015cbe:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	; 0xb2
 8015cc2:	f04f 0800 	mov.w	r8, #0
 8015cc6:	441d      	add	r5, r3
 8015cc8:	b22d      	sxth	r5, r5
 8015cca:	b28b      	uxth	r3, r1
 8015ccc:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 8015cd0:	429a      	cmp	r2, r3
 8015cd2:	f240 80c0 	bls.w	8015e56 <_ZN8touchgfx11Application15drawCachedAreasEv+0x47e>
 8015cd6:	4427      	add	r7, r4
 8015cd8:	eb04 0ec1 	add.w	lr, r4, r1, lsl #3
 8015cdc:	4608      	mov	r0, r1
 8015cde:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	; 0xae
 8015ce2:	f9be c0ae 	ldrsh.w	ip, [lr, #174]	; 0xae
 8015ce6:	4563      	cmp	r3, ip
 8015ce8:	f340 80a2 	ble.w	8015e30 <_ZN8touchgfx11Application15drawCachedAreasEv+0x458>
 8015cec:	f8be 50b2 	ldrh.w	r5, [lr, #178]	; 0xb2
 8015cf0:	4465      	add	r5, ip
 8015cf2:	b22d      	sxth	r5, r5
 8015cf4:	429d      	cmp	r5, r3
 8015cf6:	bfa8      	it	ge
 8015cf8:	461d      	movge	r5, r3
 8015cfa:	3101      	adds	r1, #1
 8015cfc:	4680      	mov	r8, r0
 8015cfe:	e7e4      	b.n	8015cca <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f2>
 8015d00:	d10b      	bne.n	8015d1a <_ZN8touchgfx11Application15drawCachedAreasEv+0x342>
 8015d02:	f9b5 c0b2 	ldrsh.w	ip, [r5, #178]	; 0xb2
 8015d06:	f9ba 10b2 	ldrsh.w	r1, [sl, #178]	; 0xb2
 8015d0a:	458c      	cmp	ip, r1
 8015d0c:	bfb4      	ite	lt
 8015d0e:	469c      	movlt	ip, r3
 8015d10:	46bc      	movge	ip, r7
 8015d12:	4572      	cmp	r2, lr
 8015d14:	bfb8      	it	lt
 8015d16:	4672      	movlt	r2, lr
 8015d18:	e087      	b.n	8015e2a <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
 8015d1a:	428a      	cmp	r2, r1
 8015d1c:	46bc      	mov	ip, r7
 8015d1e:	bfb8      	it	lt
 8015d20:	460a      	movlt	r2, r1
 8015d22:	e082      	b.n	8015e2a <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
 8015d24:	20024414 	.word	0x20024414
 8015d28:	20024420 	.word	0x20024420
 8015d2c:	20000030 	.word	0x20000030
 8015d30:	200243dc 	.word	0x200243dc
 8015d34:	200243d2 	.word	0x200243d2
 8015d38:	200243d0 	.word	0x200243d0
 8015d3c:	200243da 	.word	0x200243da
 8015d40:	200243d4 	.word	0x200243d4
 8015d44:	1961      	adds	r1, r4, r5
 8015d46:	ab07      	add	r3, sp, #28
 8015d48:	f851 0fac 	ldr.w	r0, [r1, #172]!
 8015d4c:	6849      	ldr	r1, [r1, #4]
 8015d4e:	c303      	stmia	r3!, {r0, r1}
 8015d50:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8015d54:	a807      	add	r0, sp, #28
 8015d56:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8015d5a:	2b13      	cmp	r3, #19
 8015d5c:	440b      	add	r3, r1
 8015d5e:	bfd8      	it	le
 8015d60:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 8015d64:	1a9b      	subs	r3, r3, r2
 8015d66:	f8ad 201c 	strh.w	r2, [sp, #28]
 8015d6a:	f8ad 3020 	strh.w	r3, [sp, #32]
 8015d6e:	f7ff f85b 	bl	8014e28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8015d72:	a807      	add	r0, sp, #28
 8015d74:	f7fd f95b 	bl	801302e <_ZNK8touchgfx4Rect7isEmptyEv>
 8015d78:	bb78      	cbnz	r0, 8015dda <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 8015d7a:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 8015d7e:	4425      	add	r5, r4
 8015d80:	f8d8 0000 	ldr.w	r0, [r8]
 8015d84:	f1bc 0f14 	cmp.w	ip, #20
 8015d88:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8015d8c:	f8d0 e000 	ldr.w	lr, [r0]
 8015d90:	bfa8      	it	ge
 8015d92:	f04f 0c14 	movge.w	ip, #20
 8015d96:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8015d9a:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8015d9e:	fa1f fc8c 	uxth.w	ip, ip
 8015da2:	f8cd c000 	str.w	ip, [sp]
 8015da6:	f8de a090 	ldr.w	sl, [lr, #144]	; 0x90
 8015daa:	47d0      	blx	sl
 8015dac:	4682      	mov	sl, r0
 8015dae:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8015db2:	a807      	add	r0, sp, #28
 8015db4:	f7ff f81e 	bl	8014df4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8015db8:	6823      	ldr	r3, [r4, #0]
 8015dba:	4620      	mov	r0, r4
 8015dbc:	a907      	add	r1, sp, #28
 8015dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015dc0:	4798      	blx	r3
 8015dc2:	f8b5 00b0 	ldrh.w	r0, [r5, #176]	; 0xb0
 8015dc6:	eba0 000a 	sub.w	r0, r0, sl
 8015dca:	b200      	sxth	r0, r0
 8015dcc:	f8a5 00b0 	strh.w	r0, [r5, #176]	; 0xb0
 8015dd0:	b918      	cbnz	r0, 8015dda <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 8015dd2:	b2b9      	uxth	r1, r7
 8015dd4:	4648      	mov	r0, r9
 8015dd6:	f7ff faad 	bl	8015334 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8015dda:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	; 0xec
 8015dde:	f1bb 0f00 	cmp.w	fp, #0
 8015de2:	f43f af26 	beq.w	8015c32 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 8015de6:	9b02      	ldr	r3, [sp, #8]
 8015de8:	2700      	movs	r7, #0
 8015dea:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	; 0xac
 8015dee:	881b      	ldrh	r3, [r3, #0]
 8015df0:	3301      	adds	r3, #1
 8015df2:	b29b      	uxth	r3, r3
 8015df4:	b299      	uxth	r1, r3
 8015df6:	00fd      	lsls	r5, r7, #3
 8015df8:	458b      	cmp	fp, r1
 8015dfa:	d9a3      	bls.n	8015d44 <_ZN8touchgfx11Application15drawCachedAreasEv+0x36c>
 8015dfc:	4425      	add	r5, r4
 8015dfe:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 8015e02:	469c      	mov	ip, r3
 8015e04:	f8b5 10b0 	ldrh.w	r1, [r5, #176]	; 0xb0
 8015e08:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 8015e0c:	f9ba e0ac 	ldrsh.w	lr, [sl, #172]	; 0xac
 8015e10:	4408      	add	r0, r1
 8015e12:	f8ba 10b0 	ldrh.w	r1, [sl, #176]	; 0xb0
 8015e16:	4471      	add	r1, lr
 8015e18:	b200      	sxth	r0, r0
 8015e1a:	b209      	sxth	r1, r1
 8015e1c:	4288      	cmp	r0, r1
 8015e1e:	f6bf af6f 	bge.w	8015d00 <_ZN8touchgfx11Application15drawCachedAreasEv+0x328>
 8015e22:	4586      	cmp	lr, r0
 8015e24:	4672      	mov	r2, lr
 8015e26:	bfb8      	it	lt
 8015e28:	4602      	movlt	r2, r0
 8015e2a:	3301      	adds	r3, #1
 8015e2c:	4667      	mov	r7, ip
 8015e2e:	e7e1      	b.n	8015df4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x41c>
 8015e30:	d10c      	bne.n	8015e4c <_ZN8touchgfx11Application15drawCachedAreasEv+0x474>
 8015e32:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	; 0xb0
 8015e36:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	; 0xb0
 8015e3a:	4287      	cmp	r7, r0
 8015e3c:	bfb4      	ite	lt
 8015e3e:	4608      	movlt	r0, r1
 8015e40:	4640      	movge	r0, r8
 8015e42:	f8be 70b2 	ldrh.w	r7, [lr, #178]	; 0xb2
 8015e46:	443b      	add	r3, r7
 8015e48:	b21b      	sxth	r3, r3
 8015e4a:	e753      	b.n	8015cf4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x31c>
 8015e4c:	4565      	cmp	r5, ip
 8015e4e:	4640      	mov	r0, r8
 8015e50:	bfa8      	it	ge
 8015e52:	4665      	movge	r5, ip
 8015e54:	e751      	b.n	8015cfa <_ZN8touchgfx11Application15drawCachedAreasEv+0x322>
 8015e56:	eb09 0007 	add.w	r0, r9, r7
 8015e5a:	4427      	add	r7, r4
 8015e5c:	9203      	str	r2, [sp, #12]
 8015e5e:	f9b7 a0b2 	ldrsh.w	sl, [r7, #178]	; 0xb2
 8015e62:	f1ba 0f13 	cmp.w	sl, #19
 8015e66:	bfde      	ittt	le
 8015e68:	f8b7 50ae 	ldrhle.w	r5, [r7, #174]	; 0xae
 8015e6c:	4455      	addle	r5, sl
 8015e6e:	b22d      	sxthle	r5, r5
 8015e70:	f7fd f8dd 	bl	801302e <_ZNK8touchgfx4Rect7isEmptyEv>
 8015e74:	9a03      	ldr	r2, [sp, #12]
 8015e76:	2800      	cmp	r0, #0
 8015e78:	f47f af1c 	bne.w	8015cb4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2dc>
 8015e7c:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	; 0xae
 8015e80:	fa1f fa8a 	uxth.w	sl, sl
 8015e84:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8015e88:	1aad      	subs	r5, r5, r2
 8015e8a:	4829      	ldr	r0, [pc, #164]	; (8015f30 <_ZN8touchgfx11Application15drawCachedAreasEv+0x558>)
 8015e8c:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	; 0xac
 8015e90:	2d14      	cmp	r5, #20
 8015e92:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	; 0xb0
 8015e96:	6800      	ldr	r0, [r0, #0]
 8015e98:	bfa8      	it	ge
 8015e9a:	2514      	movge	r5, #20
 8015e9c:	f8ad 101c 	strh.w	r1, [sp, #28]
 8015ea0:	f8ad 201e 	strh.w	r2, [sp, #30]
 8015ea4:	b289      	uxth	r1, r1
 8015ea6:	f8ad 3020 	strh.w	r3, [sp, #32]
 8015eaa:	b2ad      	uxth	r5, r5
 8015eac:	f8d0 c000 	ldr.w	ip, [r0]
 8015eb0:	b292      	uxth	r2, r2
 8015eb2:	4555      	cmp	r5, sl
 8015eb4:	bf94      	ite	ls
 8015eb6:	9500      	strls	r5, [sp, #0]
 8015eb8:	f8cd a000 	strhi.w	sl, [sp]
 8015ebc:	b29b      	uxth	r3, r3
 8015ebe:	f8dc 5090 	ldr.w	r5, [ip, #144]	; 0x90
 8015ec2:	47a8      	blx	r5
 8015ec4:	6823      	ldr	r3, [r4, #0]
 8015ec6:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8015eca:	a907      	add	r1, sp, #28
 8015ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015ece:	4620      	mov	r0, r4
 8015ed0:	4798      	blx	r3
 8015ed2:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8015ed6:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8015eda:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
 8015ede:	1a5b      	subs	r3, r3, r1
 8015ee0:	440a      	add	r2, r1
 8015ee2:	b21b      	sxth	r3, r3
 8015ee4:	f8a7 20ae 	strh.w	r2, [r7, #174]	; 0xae
 8015ee8:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 8015eec:	2b00      	cmp	r3, #0
 8015eee:	f47f aed8 	bne.w	8015ca2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 8015ef2:	fa1f f188 	uxth.w	r1, r8
 8015ef6:	4648      	mov	r0, r9
 8015ef8:	f7ff fa1c 	bl	8015334 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8015efc:	e6d1      	b.n	8015ca2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 8015efe:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 8015f02:	42ab      	cmp	r3, r5
 8015f04:	f67f ae95 	bls.w	8015c32 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 8015f08:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 8015f0c:	ab07      	add	r3, sp, #28
 8015f0e:	f852 0fac 	ldr.w	r0, [r2, #172]!
 8015f12:	6851      	ldr	r1, [r2, #4]
 8015f14:	c303      	stmia	r3!, {r0, r1}
 8015f16:	a807      	add	r0, sp, #28
 8015f18:	f7fd f889 	bl	801302e <_ZNK8touchgfx4Rect7isEmptyEv>
 8015f1c:	b920      	cbnz	r0, 8015f28 <_ZN8touchgfx11Application15drawCachedAreasEv+0x550>
 8015f1e:	6823      	ldr	r3, [r4, #0]
 8015f20:	a907      	add	r1, sp, #28
 8015f22:	4620      	mov	r0, r4
 8015f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015f26:	4798      	blx	r3
 8015f28:	3501      	adds	r5, #1
 8015f2a:	b2ad      	uxth	r5, r5
 8015f2c:	e7e7      	b.n	8015efe <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
 8015f2e:	bf00      	nop
 8015f30:	200243dc 	.word	0x200243dc

08015f34 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8015f34:	4b03      	ldr	r3, [pc, #12]	; (8015f44 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 8015f36:	2200      	movs	r2, #0
 8015f38:	801a      	strh	r2, [r3, #0]
 8015f3a:	805a      	strh	r2, [r3, #2]
 8015f3c:	809a      	strh	r2, [r3, #4]
 8015f3e:	80da      	strh	r2, [r3, #6]
 8015f40:	4770      	bx	lr
 8015f42:	bf00      	nop
 8015f44:	20024420 	.word	0x20024420

08015f48 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8015f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f4c:	b09d      	sub	sp, #116	; 0x74
 8015f4e:	4606      	mov	r6, r0
 8015f50:	4614      	mov	r4, r2
 8015f52:	468a      	mov	sl, r1
 8015f54:	a803      	add	r0, sp, #12
 8015f56:	461d      	mov	r5, r3
 8015f58:	f000 fd72 	bl	8016a40 <_ZN8touchgfx12TextProviderC1Ev>
 8015f5c:	6833      	ldr	r3, [r6, #0]
 8015f5e:	4630      	mov	r0, r6
 8015f60:	f242 0b0b 	movw	fp, #8203	; 0x200b
 8015f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015f66:	4798      	blx	r3
 8015f68:	6833      	ldr	r3, [r6, #0]
 8015f6a:	4607      	mov	r7, r0
 8015f6c:	4630      	mov	r0, r6
 8015f6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015f70:	4798      	blx	r3
 8015f72:	462a      	mov	r2, r5
 8015f74:	2500      	movs	r5, #0
 8015f76:	4621      	mov	r1, r4
 8015f78:	9000      	str	r0, [sp, #0]
 8015f7a:	463b      	mov	r3, r7
 8015f7c:	462c      	mov	r4, r5
 8015f7e:	46a9      	mov	r9, r5
 8015f80:	46a8      	mov	r8, r5
 8015f82:	a803      	add	r0, sp, #12
 8015f84:	f000 fdaf 	bl	8016ae6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8015f88:	2300      	movs	r3, #0
 8015f8a:	9302      	str	r3, [sp, #8]
 8015f8c:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8015f90:	429c      	cmp	r4, r3
 8015f92:	d002      	beq.n	8015f9a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 8015f94:	455c      	cmp	r4, fp
 8015f96:	bf18      	it	ne
 8015f98:	4625      	movne	r5, r4
 8015f9a:	ab02      	add	r3, sp, #8
 8015f9c:	4632      	mov	r2, r6
 8015f9e:	4651      	mov	r1, sl
 8015fa0:	a803      	add	r0, sp, #12
 8015fa2:	f001 f895 	bl	80170d0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8015fa6:	4604      	mov	r4, r0
 8015fa8:	b108      	cbz	r0, 8015fae <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 8015faa:	280a      	cmp	r0, #10
 8015fac:	d10a      	bne.n	8015fc4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 8015fae:	45c1      	cmp	r9, r8
 8015fb0:	bf38      	it	cc
 8015fb2:	46c1      	movcc	r9, r8
 8015fb4:	f04f 0800 	mov.w	r8, #0
 8015fb8:	2c00      	cmp	r4, #0
 8015fba:	d1e5      	bne.n	8015f88 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8015fbc:	4648      	mov	r0, r9
 8015fbe:	b01d      	add	sp, #116	; 0x74
 8015fc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015fc4:	9a02      	ldr	r2, [sp, #8]
 8015fc6:	2a00      	cmp	r2, #0
 8015fc8:	d0de      	beq.n	8015f88 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8015fca:	7b57      	ldrb	r7, [r2, #13]
 8015fcc:	4629      	mov	r1, r5
 8015fce:	6833      	ldr	r3, [r6, #0]
 8015fd0:	007f      	lsls	r7, r7, #1
 8015fd2:	8894      	ldrh	r4, [r2, #4]
 8015fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015fd6:	f407 7080 	and.w	r0, r7, #256	; 0x100
 8015fda:	7a97      	ldrb	r7, [r2, #10]
 8015fdc:	4307      	orrs	r7, r0
 8015fde:	4630      	mov	r0, r6
 8015fe0:	4798      	blx	r3
 8015fe2:	4438      	add	r0, r7
 8015fe4:	4480      	add	r8, r0
 8015fe6:	fa1f f888 	uxth.w	r8, r8
 8015fea:	e7e5      	b.n	8015fb8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

08015fec <_ZNK8touchgfx4Font12getCharWidthEt>:
 8015fec:	b508      	push	{r3, lr}
 8015fee:	6803      	ldr	r3, [r0, #0]
 8015ff0:	68db      	ldr	r3, [r3, #12]
 8015ff2:	4798      	blx	r3
 8015ff4:	b128      	cbz	r0, 8016002 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 8015ff6:	7b43      	ldrb	r3, [r0, #13]
 8015ff8:	7a80      	ldrb	r0, [r0, #10]
 8015ffa:	005b      	lsls	r3, r3, #1
 8015ffc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016000:	4318      	orrs	r0, r3
 8016002:	bd08      	pop	{r3, pc}

08016004 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 8016004:	b40e      	push	{r1, r2, r3}
 8016006:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016008:	b09e      	sub	sp, #120	; 0x78
 801600a:	4605      	mov	r5, r0
 801600c:	ab23      	add	r3, sp, #140	; 0x8c
 801600e:	a805      	add	r0, sp, #20
 8016010:	f853 4b04 	ldr.w	r4, [r3], #4
 8016014:	9303      	str	r3, [sp, #12]
 8016016:	f000 fd13 	bl	8016a40 <_ZN8touchgfx12TextProviderC1Ev>
 801601a:	682b      	ldr	r3, [r5, #0]
 801601c:	4628      	mov	r0, r5
 801601e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016020:	4798      	blx	r3
 8016022:	682b      	ldr	r3, [r5, #0]
 8016024:	4606      	mov	r6, r0
 8016026:	4628      	mov	r0, r5
 8016028:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801602a:	4798      	blx	r3
 801602c:	4633      	mov	r3, r6
 801602e:	4621      	mov	r1, r4
 8016030:	ae1e      	add	r6, sp, #120	; 0x78
 8016032:	2400      	movs	r4, #0
 8016034:	9000      	str	r0, [sp, #0]
 8016036:	9a03      	ldr	r2, [sp, #12]
 8016038:	a805      	add	r0, sp, #20
 801603a:	f000 fd54 	bl	8016ae6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801603e:	f846 4d68 	str.w	r4, [r6, #-104]!
 8016042:	462a      	mov	r2, r5
 8016044:	4633      	mov	r3, r6
 8016046:	4621      	mov	r1, r4
 8016048:	a805      	add	r0, sp, #20
 801604a:	f001 f841 	bl	80170d0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801604e:	b300      	cbz	r0, 8016092 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 8016050:	280a      	cmp	r0, #10
 8016052:	d01a      	beq.n	801608a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8016054:	9f04      	ldr	r7, [sp, #16]
 8016056:	b1c7      	cbz	r7, 801608a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8016058:	7b78      	ldrb	r0, [r7, #13]
 801605a:	7a3b      	ldrb	r3, [r7, #8]
 801605c:	00c1      	lsls	r1, r0, #3
 801605e:	88ea      	ldrh	r2, [r5, #6]
 8016060:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8016064:	4319      	orrs	r1, r3
 8016066:	0643      	lsls	r3, r0, #25
 8016068:	ea4f 1000 	mov.w	r0, r0, lsl #4
 801606c:	bf48      	it	mi
 801606e:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 8016072:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8016076:	bf48      	it	mi
 8016078:	b219      	sxthmi	r1, r3
 801607a:	79fb      	ldrb	r3, [r7, #7]
 801607c:	4303      	orrs	r3, r0
 801607e:	4413      	add	r3, r2
 8016080:	1a5b      	subs	r3, r3, r1
 8016082:	b21b      	sxth	r3, r3
 8016084:	429c      	cmp	r4, r3
 8016086:	bfb8      	it	lt
 8016088:	461c      	movlt	r4, r3
 801608a:	4633      	mov	r3, r6
 801608c:	462a      	mov	r2, r5
 801608e:	2100      	movs	r1, #0
 8016090:	e7da      	b.n	8016048 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 8016092:	b2a0      	uxth	r0, r4
 8016094:	b01e      	add	sp, #120	; 0x78
 8016096:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801609a:	b003      	add	sp, #12
 801609c:	4770      	bx	lr

0801609e <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 801609e:	7a43      	ldrb	r3, [r0, #9]
 80160a0:	8880      	ldrh	r0, [r0, #4]
 80160a2:	4418      	add	r0, r3
 80160a4:	b280      	uxth	r0, r0
 80160a6:	4770      	bx	lr

080160a8 <_ZNK8touchgfx4Font13getFontHeightEv>:
 80160a8:	6803      	ldr	r3, [r0, #0]
 80160aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80160ac:	4718      	bx	r3

080160ae <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 80160ae:	b40e      	push	{r1, r2, r3}
 80160b0:	b570      	push	{r4, r5, r6, lr}
 80160b2:	b09d      	sub	sp, #116	; 0x74
 80160b4:	4604      	mov	r4, r0
 80160b6:	ab21      	add	r3, sp, #132	; 0x84
 80160b8:	a803      	add	r0, sp, #12
 80160ba:	f853 5b04 	ldr.w	r5, [r3], #4
 80160be:	9302      	str	r3, [sp, #8]
 80160c0:	f000 fcbe 	bl	8016a40 <_ZN8touchgfx12TextProviderC1Ev>
 80160c4:	6823      	ldr	r3, [r4, #0]
 80160c6:	4620      	mov	r0, r4
 80160c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80160ca:	4798      	blx	r3
 80160cc:	6823      	ldr	r3, [r4, #0]
 80160ce:	4606      	mov	r6, r0
 80160d0:	4620      	mov	r0, r4
 80160d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80160d4:	2401      	movs	r4, #1
 80160d6:	4798      	blx	r3
 80160d8:	4633      	mov	r3, r6
 80160da:	9000      	str	r0, [sp, #0]
 80160dc:	4629      	mov	r1, r5
 80160de:	9a02      	ldr	r2, [sp, #8]
 80160e0:	a803      	add	r0, sp, #12
 80160e2:	f000 fd00 	bl	8016ae6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80160e6:	a803      	add	r0, sp, #12
 80160e8:	f001 f872 	bl	80171d0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80160ec:	b2a3      	uxth	r3, r4
 80160ee:	b138      	cbz	r0, 8016100 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 80160f0:	280a      	cmp	r0, #10
 80160f2:	a803      	add	r0, sp, #12
 80160f4:	bf04      	itt	eq
 80160f6:	3301      	addeq	r3, #1
 80160f8:	b21c      	sxtheq	r4, r3
 80160fa:	f001 f869 	bl	80171d0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80160fe:	e7f5      	b.n	80160ec <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 8016100:	4618      	mov	r0, r3
 8016102:	b01d      	add	sp, #116	; 0x74
 8016104:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016108:	b003      	add	sp, #12
 801610a:	4770      	bx	lr

0801610c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801610c:	b40e      	push	{r1, r2, r3}
 801610e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016110:	b09e      	sub	sp, #120	; 0x78
 8016112:	4604      	mov	r4, r0
 8016114:	ab23      	add	r3, sp, #140	; 0x8c
 8016116:	a805      	add	r0, sp, #20
 8016118:	f853 5b04 	ldr.w	r5, [r3], #4
 801611c:	9303      	str	r3, [sp, #12]
 801611e:	f000 fc8f 	bl	8016a40 <_ZN8touchgfx12TextProviderC1Ev>
 8016122:	6823      	ldr	r3, [r4, #0]
 8016124:	4620      	mov	r0, r4
 8016126:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016128:	4798      	blx	r3
 801612a:	6823      	ldr	r3, [r4, #0]
 801612c:	4606      	mov	r6, r0
 801612e:	4620      	mov	r0, r4
 8016130:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016132:	4798      	blx	r3
 8016134:	4633      	mov	r3, r6
 8016136:	4629      	mov	r1, r5
 8016138:	9000      	str	r0, [sp, #0]
 801613a:	9a03      	ldr	r2, [sp, #12]
 801613c:	a805      	add	r0, sp, #20
 801613e:	f000 fcd2 	bl	8016ae6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8016142:	ad1e      	add	r5, sp, #120	; 0x78
 8016144:	2100      	movs	r1, #0
 8016146:	f647 76ff 	movw	r6, #32767	; 0x7fff
 801614a:	4622      	mov	r2, r4
 801614c:	a805      	add	r0, sp, #20
 801614e:	f845 1d68 	str.w	r1, [r5, #-104]!
 8016152:	462b      	mov	r3, r5
 8016154:	f000 ffbc 	bl	80170d0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8016158:	b1d8      	cbz	r0, 8016192 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 801615a:	280a      	cmp	r0, #10
 801615c:	d012      	beq.n	8016184 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 801615e:	9804      	ldr	r0, [sp, #16]
 8016160:	b180      	cbz	r0, 8016184 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 8016162:	7b47      	ldrb	r7, [r0, #13]
 8016164:	88e2      	ldrh	r2, [r4, #6]
 8016166:	00fb      	lsls	r3, r7, #3
 8016168:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801616c:	7a03      	ldrb	r3, [r0, #8]
 801616e:	430b      	orrs	r3, r1
 8016170:	0679      	lsls	r1, r7, #25
 8016172:	bf44      	itt	mi
 8016174:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8016178:	b21b      	sxthmi	r3, r3
 801617a:	1ad3      	subs	r3, r2, r3
 801617c:	b21b      	sxth	r3, r3
 801617e:	429e      	cmp	r6, r3
 8016180:	bfa8      	it	ge
 8016182:	461e      	movge	r6, r3
 8016184:	462b      	mov	r3, r5
 8016186:	4622      	mov	r2, r4
 8016188:	2100      	movs	r1, #0
 801618a:	a805      	add	r0, sp, #20
 801618c:	f000 ffa0 	bl	80170d0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8016190:	e7e2      	b.n	8016158 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 8016192:	4630      	mov	r0, r6
 8016194:	b01e      	add	sp, #120	; 0x78
 8016196:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801619a:	b003      	add	sp, #12
 801619c:	4770      	bx	lr

0801619e <_ZNK8touchgfx8Drawable10invalidateEv>:
 801619e:	b513      	push	{r0, r1, r4, lr}
 80161a0:	6803      	ldr	r3, [r0, #0]
 80161a2:	2400      	movs	r4, #0
 80161a4:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 80161a8:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80161ac:	f8ad 1004 	strh.w	r1, [sp, #4]
 80161b0:	4669      	mov	r1, sp
 80161b2:	691b      	ldr	r3, [r3, #16]
 80161b4:	9400      	str	r4, [sp, #0]
 80161b6:	f8ad 2006 	strh.w	r2, [sp, #6]
 80161ba:	4798      	blx	r3
 80161bc:	b002      	add	sp, #8
 80161be:	bd10      	pop	{r4, pc}

080161c0 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 80161c0:	b538      	push	{r3, r4, r5, lr}
 80161c2:	680b      	ldr	r3, [r1, #0]
 80161c4:	460c      	mov	r4, r1
 80161c6:	4605      	mov	r5, r0
 80161c8:	68db      	ldr	r3, [r3, #12]
 80161ca:	4798      	blx	r3
 80161cc:	6823      	ldr	r3, [r4, #0]
 80161ce:	4620      	mov	r0, r4
 80161d0:	4629      	mov	r1, r5
 80161d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80161d4:	4798      	blx	r3
 80161d6:	4628      	mov	r0, r5
 80161d8:	bd38      	pop	{r3, r4, r5, pc}

080161da <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 80161da:	b410      	push	{r4}
 80161dc:	880a      	ldrh	r2, [r1, #0]
 80161de:	8884      	ldrh	r4, [r0, #4]
 80161e0:	4422      	add	r2, r4
 80161e2:	800a      	strh	r2, [r1, #0]
 80161e4:	884a      	ldrh	r2, [r1, #2]
 80161e6:	88c4      	ldrh	r4, [r0, #6]
 80161e8:	4422      	add	r2, r4
 80161ea:	804a      	strh	r2, [r1, #2]
 80161ec:	6940      	ldr	r0, [r0, #20]
 80161ee:	b120      	cbz	r0, 80161fa <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 80161f0:	6803      	ldr	r3, [r0, #0]
 80161f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80161f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80161f8:	4718      	bx	r3
 80161fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80161fe:	4770      	bx	lr

08016200 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 8016200:	b570      	push	{r4, r5, r6, lr}
 8016202:	8882      	ldrh	r2, [r0, #4]
 8016204:	460c      	mov	r4, r1
 8016206:	880b      	ldrh	r3, [r1, #0]
 8016208:	4605      	mov	r5, r0
 801620a:	4413      	add	r3, r2
 801620c:	800b      	strh	r3, [r1, #0]
 801620e:	884b      	ldrh	r3, [r1, #2]
 8016210:	88c2      	ldrh	r2, [r0, #6]
 8016212:	4413      	add	r3, r2
 8016214:	804b      	strh	r3, [r1, #2]
 8016216:	1d01      	adds	r1, r0, #4
 8016218:	4620      	mov	r0, r4
 801621a:	f7fc fec5 	bl	8012fa8 <_ZN8touchgfx4RectaNERKS0_>
 801621e:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8016222:	2b00      	cmp	r3, #0
 8016224:	dd0b      	ble.n	801623e <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8016226:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801622a:	2b00      	cmp	r3, #0
 801622c:	dd07      	ble.n	801623e <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801622e:	6968      	ldr	r0, [r5, #20]
 8016230:	b128      	cbz	r0, 801623e <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8016232:	6803      	ldr	r3, [r0, #0]
 8016234:	4621      	mov	r1, r4
 8016236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016238:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801623c:	4718      	bx	r3
 801623e:	bd70      	pop	{r4, r5, r6, pc}

08016240 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 8016240:	b570      	push	{r4, r5, r6, lr}
 8016242:	8882      	ldrh	r2, [r0, #4]
 8016244:	460c      	mov	r4, r1
 8016246:	880b      	ldrh	r3, [r1, #0]
 8016248:	4605      	mov	r5, r0
 801624a:	4413      	add	r3, r2
 801624c:	800b      	strh	r3, [r1, #0]
 801624e:	884b      	ldrh	r3, [r1, #2]
 8016250:	88c2      	ldrh	r2, [r0, #6]
 8016252:	4413      	add	r3, r2
 8016254:	804b      	strh	r3, [r1, #2]
 8016256:	1d01      	adds	r1, r0, #4
 8016258:	4620      	mov	r0, r4
 801625a:	f7fc fea5 	bl	8012fa8 <_ZN8touchgfx4RectaNERKS0_>
 801625e:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8016262:	2b00      	cmp	r3, #0
 8016264:	dd18      	ble.n	8016298 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 8016266:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801626a:	2b00      	cmp	r3, #0
 801626c:	dd14      	ble.n	8016298 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 801626e:	6968      	ldr	r0, [r5, #20]
 8016270:	b128      	cbz	r0, 801627e <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 8016272:	6803      	ldr	r3, [r0, #0]
 8016274:	4621      	mov	r1, r4
 8016276:	691b      	ldr	r3, [r3, #16]
 8016278:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801627c:	4718      	bx	r3
 801627e:	4b07      	ldr	r3, [pc, #28]	; (801629c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 8016280:	681b      	ldr	r3, [r3, #0]
 8016282:	3304      	adds	r3, #4
 8016284:	429d      	cmp	r5, r3
 8016286:	d107      	bne.n	8016298 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 8016288:	f7fe ff44 	bl	8015114 <_ZN8touchgfx11Application11getInstanceEv>
 801628c:	6821      	ldr	r1, [r4, #0]
 801628e:	6862      	ldr	r2, [r4, #4]
 8016290:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016294:	f7ff b862 	b.w	801535c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8016298:	bd70      	pop	{r4, r5, r6, pc}
 801629a:	bf00      	nop
 801629c:	20024418 	.word	0x20024418

080162a0 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 80162a0:	b570      	push	{r4, r5, r6, lr}
 80162a2:	4604      	mov	r4, r0
 80162a4:	4616      	mov	r6, r2
 80162a6:	460d      	mov	r5, r1
 80162a8:	b901      	cbnz	r1, 80162ac <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 80162aa:	b192      	cbz	r2, 80162d2 <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 80162ac:	6823      	ldr	r3, [r4, #0]
 80162ae:	4620      	mov	r0, r4
 80162b0:	699b      	ldr	r3, [r3, #24]
 80162b2:	4798      	blx	r3
 80162b4:	88e2      	ldrh	r2, [r4, #6]
 80162b6:	88a1      	ldrh	r1, [r4, #4]
 80162b8:	4620      	mov	r0, r4
 80162ba:	4432      	add	r2, r6
 80162bc:	4429      	add	r1, r5
 80162be:	b212      	sxth	r2, r2
 80162c0:	b209      	sxth	r1, r1
 80162c2:	f7f6 fd08 	bl	800ccd6 <_ZN8touchgfx8Drawable5setXYEss>
 80162c6:	6823      	ldr	r3, [r4, #0]
 80162c8:	4620      	mov	r0, r4
 80162ca:	699b      	ldr	r3, [r3, #24]
 80162cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80162d0:	4718      	bx	r3
 80162d2:	bd70      	pop	{r4, r5, r6, pc}

080162d4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 80162d4:	b510      	push	{r4, lr}
 80162d6:	2300      	movs	r3, #0
 80162d8:	4604      	mov	r4, r0
 80162da:	4608      	mov	r0, r1
 80162dc:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 80162e0:	8023      	strh	r3, [r4, #0]
 80162e2:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80162e6:	8063      	strh	r3, [r4, #2]
 80162e8:	6803      	ldr	r3, [r0, #0]
 80162ea:	80a1      	strh	r1, [r4, #4]
 80162ec:	4621      	mov	r1, r4
 80162ee:	80e2      	strh	r2, [r4, #6]
 80162f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80162f2:	4798      	blx	r3
 80162f4:	4620      	mov	r0, r4
 80162f6:	bd10      	pop	{r4, pc}

080162f8 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 80162f8:	b530      	push	{r4, r5, lr}
 80162fa:	8083      	strh	r3, [r0, #4]
 80162fc:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8016300:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8016304:	80c3      	strh	r3, [r0, #6]
 8016306:	f89d 3010 	ldrb.w	r3, [sp, #16]
 801630a:	6141      	str	r1, [r0, #20]
 801630c:	7203      	strb	r3, [r0, #8]
 801630e:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8016312:	8302      	strh	r2, [r0, #24]
 8016314:	7243      	strb	r3, [r0, #9]
 8016316:	7a83      	ldrb	r3, [r0, #10]
 8016318:	f365 0306 	bfi	r3, r5, #0, #7
 801631c:	f89d 501c 	ldrb.w	r5, [sp, #28]
 8016320:	f365 13c7 	bfi	r3, r5, #7, #1
 8016324:	7283      	strb	r3, [r0, #10]
 8016326:	f89d 3020 	ldrb.w	r3, [sp, #32]
 801632a:	72c3      	strb	r3, [r0, #11]
 801632c:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8016330:	7303      	strb	r3, [r0, #12]
 8016332:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8016336:	81c3      	strh	r3, [r0, #14]
 8016338:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 801633c:	8203      	strh	r3, [r0, #16]
 801633e:	4b01      	ldr	r3, [pc, #4]	; (8016344 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 8016340:	6003      	str	r3, [r0, #0]
 8016342:	bd30      	pop	{r4, r5, pc}
 8016344:	08027bdc 	.word	0x08027bdc

08016348 <_ZNK8touchgfx9ConstFont4findEt>:
 8016348:	b5f0      	push	{r4, r5, r6, r7, lr}
 801634a:	6944      	ldr	r4, [r0, #20]
 801634c:	b3bc      	cbz	r4, 80163be <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801634e:	88a3      	ldrh	r3, [r4, #4]
 8016350:	8b02      	ldrh	r2, [r0, #24]
 8016352:	1acb      	subs	r3, r1, r3
 8016354:	f102 32ff 	add.w	r2, r2, #4294967295
 8016358:	d431      	bmi.n	80163be <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801635a:	4293      	cmp	r3, r2
 801635c:	dd0c      	ble.n	8016378 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801635e:	230e      	movs	r3, #14
 8016360:	fb03 4302 	mla	r3, r3, r2, r4
 8016364:	889b      	ldrh	r3, [r3, #4]
 8016366:	1a5b      	subs	r3, r3, r1
 8016368:	1ad3      	subs	r3, r2, r3
 801636a:	429a      	cmp	r2, r3
 801636c:	db27      	blt.n	80163be <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801636e:	2b00      	cmp	r3, #0
 8016370:	bfbc      	itt	lt
 8016372:	2302      	movlt	r3, #2
 8016374:	fb92 f3f3 	sdivlt	r3, r2, r3
 8016378:	2500      	movs	r5, #0
 801637a:	260e      	movs	r6, #14
 801637c:	4295      	cmp	r5, r2
 801637e:	dc1e      	bgt.n	80163be <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8016380:	fb06 4003 	mla	r0, r6, r3, r4
 8016384:	8887      	ldrh	r7, [r0, #4]
 8016386:	42b9      	cmp	r1, r7
 8016388:	d01a      	beq.n	80163c0 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 801638a:	d20d      	bcs.n	80163a8 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 801638c:	1e5a      	subs	r2, r3, #1
 801638e:	4295      	cmp	r5, r2
 8016390:	dc15      	bgt.n	80163be <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8016392:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 8016396:	1a5b      	subs	r3, r3, r1
 8016398:	1ad3      	subs	r3, r2, r3
 801639a:	429a      	cmp	r2, r3
 801639c:	db0f      	blt.n	80163be <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801639e:	429d      	cmp	r5, r3
 80163a0:	ddec      	ble.n	801637c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 80163a2:	1953      	adds	r3, r2, r5
 80163a4:	105b      	asrs	r3, r3, #1
 80163a6:	e7e9      	b.n	801637c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 80163a8:	1c5d      	adds	r5, r3, #1
 80163aa:	42aa      	cmp	r2, r5
 80163ac:	db07      	blt.n	80163be <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80163ae:	8a43      	ldrh	r3, [r0, #18]
 80163b0:	1acb      	subs	r3, r1, r3
 80163b2:	442b      	add	r3, r5
 80163b4:	429d      	cmp	r5, r3
 80163b6:	dc02      	bgt.n	80163be <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80163b8:	429a      	cmp	r2, r3
 80163ba:	dadf      	bge.n	801637c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 80163bc:	e7f1      	b.n	80163a2 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 80163be:	2000      	movs	r0, #0
 80163c0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080163c2 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 80163c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80163c4:	4604      	mov	r4, r0
 80163c6:	4617      	mov	r7, r2
 80163c8:	461e      	mov	r6, r3
 80163ca:	b911      	cbnz	r1, 80163d2 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 80163cc:	2500      	movs	r5, #0
 80163ce:	4628      	mov	r0, r5
 80163d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80163d2:	290a      	cmp	r1, #10
 80163d4:	d0fa      	beq.n	80163cc <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80163d6:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 80163da:	4291      	cmp	r1, r2
 80163dc:	d0f6      	beq.n	80163cc <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80163de:	f242 020b 	movw	r2, #8203	; 0x200b
 80163e2:	4291      	cmp	r1, r2
 80163e4:	d0f2      	beq.n	80163cc <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80163e6:	f7ff ffaf 	bl	8016348 <_ZNK8touchgfx9ConstFont4findEt>
 80163ea:	4605      	mov	r5, r0
 80163ec:	b950      	cbnz	r0, 8016404 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 80163ee:	6823      	ldr	r3, [r4, #0]
 80163f0:	4620      	mov	r0, r4
 80163f2:	691b      	ldr	r3, [r3, #16]
 80163f4:	4798      	blx	r3
 80163f6:	4601      	mov	r1, r0
 80163f8:	4620      	mov	r0, r4
 80163fa:	f7ff ffa5 	bl	8016348 <_ZNK8touchgfx9ConstFont4findEt>
 80163fe:	4605      	mov	r5, r0
 8016400:	2800      	cmp	r0, #0
 8016402:	d0e3      	beq.n	80163cc <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8016404:	6823      	ldr	r3, [r4, #0]
 8016406:	4629      	mov	r1, r5
 8016408:	4620      	mov	r0, r4
 801640a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801640c:	4798      	blx	r3
 801640e:	6038      	str	r0, [r7, #0]
 8016410:	6823      	ldr	r3, [r4, #0]
 8016412:	4620      	mov	r0, r4
 8016414:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016416:	4798      	blx	r3
 8016418:	7030      	strb	r0, [r6, #0]
 801641a:	e7d8      	b.n	80163ce <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0801641c <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 801641c:	2000      	movs	r0, #0
 801641e:	4770      	bx	lr

08016420 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 8016420:	2001      	movs	r0, #1
 8016422:	4770      	bx	lr

08016424 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 8016424:	2002      	movs	r0, #2
 8016426:	4770      	bx	lr

08016428 <_ZN8touchgfx12GestureEventD1Ev>:
 8016428:	4770      	bx	lr

0801642a <_ZN8touchgfx9DragEventD1Ev>:
 801642a:	4770      	bx	lr

0801642c <_ZN8touchgfx10ClickEventD1Ev>:
 801642c:	4770      	bx	lr

0801642e <_ZN8touchgfx10ClickEventD0Ev>:
 801642e:	b510      	push	{r4, lr}
 8016430:	4604      	mov	r4, r0
 8016432:	210c      	movs	r1, #12
 8016434:	f00d f88b 	bl	802354e <_ZdlPvj>
 8016438:	4620      	mov	r0, r4
 801643a:	bd10      	pop	{r4, pc}

0801643c <_ZN8touchgfx9DragEventD0Ev>:
 801643c:	b510      	push	{r4, lr}
 801643e:	4604      	mov	r4, r0
 8016440:	2110      	movs	r1, #16
 8016442:	f00d f884 	bl	802354e <_ZdlPvj>
 8016446:	4620      	mov	r0, r4
 8016448:	bd10      	pop	{r4, pc}

0801644a <_ZN8touchgfx12GestureEventD0Ev>:
 801644a:	b510      	push	{r4, lr}
 801644c:	4604      	mov	r4, r0
 801644e:	210c      	movs	r1, #12
 8016450:	f00d f87d 	bl	802354e <_ZdlPvj>
 8016454:	4620      	mov	r0, r4
 8016456:	bd10      	pop	{r4, pc}

08016458 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 8016458:	b530      	push	{r4, r5, lr}
 801645a:	460d      	mov	r5, r1
 801645c:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801645e:	b087      	sub	sp, #28
 8016460:	4604      	mov	r4, r0
 8016462:	b301      	cbz	r1, 80164a6 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 8016464:	a801      	add	r0, sp, #4
 8016466:	f7ff ff35 	bl	80162d4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801646a:	892a      	ldrh	r2, [r5, #8]
 801646c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8016470:	7928      	ldrb	r0, [r5, #4]
 8016472:	1ad2      	subs	r2, r2, r3
 8016474:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8016476:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801647a:	441a      	add	r2, r3
 801647c:	896b      	ldrh	r3, [r5, #10]
 801647e:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 8016482:	f88d 0010 	strb.w	r0, [sp, #16]
 8016486:	1b5b      	subs	r3, r3, r5
 8016488:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 801648a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801648c:	442b      	add	r3, r5
 801648e:	4d07      	ldr	r5, [pc, #28]	; (80164ac <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 8016490:	f8ad 1012 	strh.w	r1, [sp, #18]
 8016494:	a903      	add	r1, sp, #12
 8016496:	9503      	str	r5, [sp, #12]
 8016498:	f8ad 2014 	strh.w	r2, [sp, #20]
 801649c:	f8ad 3016 	strh.w	r3, [sp, #22]
 80164a0:	6803      	ldr	r3, [r0, #0]
 80164a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80164a4:	4798      	blx	r3
 80164a6:	b007      	add	sp, #28
 80164a8:	bd30      	pop	{r4, r5, pc}
 80164aa:	bf00      	nop
 80164ac:	08027c64 	.word	0x08027c64

080164b0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 80164b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80164b4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80164b6:	b08a      	sub	sp, #40	; 0x28
 80164b8:	4604      	mov	r4, r0
 80164ba:	460d      	mov	r5, r1
 80164bc:	b113      	cbz	r3, 80164c4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 80164be:	790b      	ldrb	r3, [r1, #4]
 80164c0:	2b00      	cmp	r3, #0
 80164c2:	d044      	beq.n	801654e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 80164c4:	f104 0804 	add.w	r8, r4, #4
 80164c8:	a803      	add	r0, sp, #12
 80164ca:	4641      	mov	r1, r8
 80164cc:	f7ff ff02 	bl	80162d4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80164d0:	792b      	ldrb	r3, [r5, #4]
 80164d2:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 80164d6:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 80164da:	b983      	cbnz	r3, 80164fe <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 80164dc:	f104 0336 	add.w	r3, r4, #54	; 0x36
 80164e0:	892a      	ldrh	r2, [r5, #8]
 80164e2:	88e9      	ldrh	r1, [r5, #6]
 80164e4:	4640      	mov	r0, r8
 80164e6:	1b92      	subs	r2, r2, r6
 80164e8:	9301      	str	r3, [sp, #4]
 80164ea:	1bc9      	subs	r1, r1, r7
 80164ec:	f104 0334 	add.w	r3, r4, #52	; 0x34
 80164f0:	b212      	sxth	r2, r2
 80164f2:	9300      	str	r3, [sp, #0]
 80164f4:	b209      	sxth	r1, r1
 80164f6:	f104 0330 	add.w	r3, r4, #48	; 0x30
 80164fa:	f7fc fc73 	bl	8012de4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 80164fe:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8016500:	b329      	cbz	r1, 801654e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8016502:	a805      	add	r0, sp, #20
 8016504:	f7ff fee6 	bl	80162d4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016508:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801650c:	792b      	ldrb	r3, [r5, #4]
 801650e:	a907      	add	r1, sp, #28
 8016510:	1abf      	subs	r7, r7, r2
 8016512:	88ea      	ldrh	r2, [r5, #6]
 8016514:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8016516:	4417      	add	r7, r2
 8016518:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 801651a:	f88d 3020 	strb.w	r3, [sp, #32]
 801651e:	4417      	add	r7, r2
 8016520:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8016524:	1ab6      	subs	r6, r6, r2
 8016526:	892a      	ldrh	r2, [r5, #8]
 8016528:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 801652c:	4416      	add	r6, r2
 801652e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8016530:	4416      	add	r6, r2
 8016532:	4a08      	ldr	r2, [pc, #32]	; (8016554 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 8016534:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 8016538:	2600      	movs	r6, #0
 801653a:	9207      	str	r2, [sp, #28]
 801653c:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 8016540:	6803      	ldr	r3, [r0, #0]
 8016542:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016544:	4798      	blx	r3
 8016546:	792b      	ldrb	r3, [r5, #4]
 8016548:	b10b      	cbz	r3, 801654e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801654a:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 801654e:	b00a      	add	sp, #40	; 0x28
 8016550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016554:	08027c3c 	.word	0x08027c3c

08016558 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 8016558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801655c:	460c      	mov	r4, r1
 801655e:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8016560:	b088      	sub	sp, #32
 8016562:	4605      	mov	r5, r0
 8016564:	2900      	cmp	r1, #0
 8016566:	d06d      	beq.n	8016644 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 8016568:	4668      	mov	r0, sp
 801656a:	f7ff feb3 	bl	80162d4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801656e:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 8016570:	88e3      	ldrh	r3, [r4, #6]
 8016572:	f9bd 8000 	ldrsh.w	r8, [sp]
 8016576:	440b      	add	r3, r1
 8016578:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 801657c:	b21b      	sxth	r3, r3
 801657e:	4543      	cmp	r3, r8
 8016580:	db31      	blt.n	80165e6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8016582:	f8bd c004 	ldrh.w	ip, [sp, #4]
 8016586:	44c4      	add	ip, r8
 8016588:	fa0f fc8c 	sxth.w	ip, ip
 801658c:	4563      	cmp	r3, ip
 801658e:	da2a      	bge.n	80165e6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8016590:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 8016592:	8926      	ldrh	r6, [r4, #8]
 8016594:	4416      	add	r6, r2
 8016596:	b236      	sxth	r6, r6
 8016598:	42be      	cmp	r6, r7
 801659a:	db24      	blt.n	80165e6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801659c:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 80165a0:	4438      	add	r0, r7
 80165a2:	b200      	sxth	r0, r0
 80165a4:	4286      	cmp	r6, r0
 80165a6:	da1e      	bge.n	80165e6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 80165a8:	8963      	ldrh	r3, [r4, #10]
 80165aa:	4419      	add	r1, r3
 80165ac:	b209      	sxth	r1, r1
 80165ae:	4541      	cmp	r1, r8
 80165b0:	db08      	blt.n	80165c4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 80165b2:	4561      	cmp	r1, ip
 80165b4:	da06      	bge.n	80165c4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 80165b6:	89a3      	ldrh	r3, [r4, #12]
 80165b8:	441a      	add	r2, r3
 80165ba:	b212      	sxth	r2, r2
 80165bc:	42ba      	cmp	r2, r7
 80165be:	db01      	blt.n	80165c4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 80165c0:	4282      	cmp	r2, r0
 80165c2:	db10      	blt.n	80165e6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 80165c4:	4b21      	ldr	r3, [pc, #132]	; (801664c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 80165c6:	a904      	add	r1, sp, #16
 80165c8:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80165ca:	9304      	str	r3, [sp, #16]
 80165cc:	2302      	movs	r3, #2
 80165ce:	f88d 3014 	strb.w	r3, [sp, #20]
 80165d2:	2300      	movs	r3, #0
 80165d4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80165d8:	f8ad 3018 	strh.w	r3, [sp, #24]
 80165dc:	f8ad 301a 	strh.w	r3, [sp, #26]
 80165e0:	6803      	ldr	r3, [r0, #0]
 80165e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80165e4:	4798      	blx	r3
 80165e6:	1d29      	adds	r1, r5, #4
 80165e8:	a802      	add	r0, sp, #8
 80165ea:	f7ff fe73 	bl	80162d4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80165ee:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80165f2:	88e0      	ldrh	r0, [r4, #6]
 80165f4:	eba3 0808 	sub.w	r8, r3, r8
 80165f8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80165fc:	7921      	ldrb	r1, [r4, #4]
 80165fe:	fa1f f888 	uxth.w	r8, r8
 8016602:	1bdf      	subs	r7, r3, r7
 8016604:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 8016608:	b2bb      	uxth	r3, r7
 801660a:	4440      	add	r0, r8
 801660c:	8922      	ldrh	r2, [r4, #8]
 801660e:	8967      	ldrh	r7, [r4, #10]
 8016610:	4460      	add	r0, ip
 8016612:	89a4      	ldrh	r4, [r4, #12]
 8016614:	441a      	add	r2, r3
 8016616:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 8016618:	44b8      	add	r8, r7
 801661a:	4423      	add	r3, r4
 801661c:	f8ad 0016 	strh.w	r0, [sp, #22]
 8016620:	4432      	add	r2, r6
 8016622:	44e0      	add	r8, ip
 8016624:	4433      	add	r3, r6
 8016626:	4c0a      	ldr	r4, [pc, #40]	; (8016650 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 8016628:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801662a:	f88d 1014 	strb.w	r1, [sp, #20]
 801662e:	a904      	add	r1, sp, #16
 8016630:	9404      	str	r4, [sp, #16]
 8016632:	f8ad 2018 	strh.w	r2, [sp, #24]
 8016636:	f8ad 801a 	strh.w	r8, [sp, #26]
 801663a:	f8ad 301c 	strh.w	r3, [sp, #28]
 801663e:	6803      	ldr	r3, [r0, #0]
 8016640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016642:	4798      	blx	r3
 8016644:	b008      	add	sp, #32
 8016646:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801664a:	bf00      	nop
 801664c:	08027c3c 	.word	0x08027c3c
 8016650:	08027c50 	.word	0x08027c50

08016654 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 8016654:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016656:	4604      	mov	r4, r0
 8016658:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801665c:	3201      	adds	r2, #1
 801665e:	d112      	bne.n	8016686 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 8016660:	2500      	movs	r5, #0
 8016662:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8016666:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801666a:	6803      	ldr	r3, [r0, #0]
 801666c:	9500      	str	r5, [sp, #0]
 801666e:	466d      	mov	r5, sp
 8016670:	f8ad 1004 	strh.w	r1, [sp, #4]
 8016674:	f8ad 2006 	strh.w	r2, [sp, #6]
 8016678:	4629      	mov	r1, r5
 801667a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801667c:	4798      	blx	r3
 801667e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8016682:	e884 0003 	stmia.w	r4, {r0, r1}
 8016686:	4620      	mov	r0, r4
 8016688:	b003      	add	sp, #12
 801668a:	bd30      	pop	{r4, r5, pc}

0801668c <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801668c:	b513      	push	{r0, r1, r4, lr}
 801668e:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 8016692:	4604      	mov	r4, r0
 8016694:	3301      	adds	r3, #1
 8016696:	d109      	bne.n	80166ac <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 8016698:	4601      	mov	r1, r0
 801669a:	4668      	mov	r0, sp
 801669c:	f7ff fe1a 	bl	80162d4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80166a0:	f8bd 3000 	ldrh.w	r3, [sp]
 80166a4:	8423      	strh	r3, [r4, #32]
 80166a6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80166aa:	8463      	strh	r3, [r4, #34]	; 0x22
 80166ac:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 80166b0:	b002      	add	sp, #8
 80166b2:	bd10      	pop	{r4, pc}

080166b4 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 80166b4:	b513      	push	{r0, r1, r4, lr}
 80166b6:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 80166ba:	4604      	mov	r4, r0
 80166bc:	3301      	adds	r3, #1
 80166be:	d109      	bne.n	80166d4 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 80166c0:	4601      	mov	r1, r0
 80166c2:	4668      	mov	r0, sp
 80166c4:	f7ff fe06 	bl	80162d4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80166c8:	f8bd 3000 	ldrh.w	r3, [sp]
 80166cc:	8423      	strh	r3, [r4, #32]
 80166ce:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80166d2:	8463      	strh	r3, [r4, #34]	; 0x22
 80166d4:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 80166d8:	b002      	add	sp, #8
 80166da:	bd10      	pop	{r4, pc}

080166dc <_ZN8touchgfx6ScreenC1Ev>:
 80166dc:	b570      	push	{r4, r5, r6, lr}
 80166de:	4b17      	ldr	r3, [pc, #92]	; (801673c <_ZN8touchgfx6ScreenC1Ev+0x60>)
 80166e0:	4605      	mov	r5, r0
 80166e2:	4a17      	ldr	r2, [pc, #92]	; (8016740 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 80166e4:	2101      	movs	r1, #1
 80166e6:	f845 3b04 	str.w	r3, [r5], #4
 80166ea:	2300      	movs	r3, #0
 80166ec:	6042      	str	r2, [r0, #4]
 80166ee:	4604      	mov	r4, r0
 80166f0:	8103      	strh	r3, [r0, #8]
 80166f2:	8143      	strh	r3, [r0, #10]
 80166f4:	8183      	strh	r3, [r0, #12]
 80166f6:	81c3      	strh	r3, [r0, #14]
 80166f8:	8203      	strh	r3, [r0, #16]
 80166fa:	8243      	strh	r3, [r0, #18]
 80166fc:	8283      	strh	r3, [r0, #20]
 80166fe:	82c3      	strh	r3, [r0, #22]
 8016700:	6203      	str	r3, [r0, #32]
 8016702:	8483      	strh	r3, [r0, #36]	; 0x24
 8016704:	84c3      	strh	r3, [r0, #38]	; 0x26
 8016706:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 801670a:	6343      	str	r3, [r0, #52]	; 0x34
 801670c:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 8016710:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 8016714:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8016718:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 801671c:	4b09      	ldr	r3, [pc, #36]	; (8016744 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801671e:	4628      	mov	r0, r5
 8016720:	f9b3 6000 	ldrsh.w	r6, [r3]
 8016724:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8016726:	4a08      	ldr	r2, [pc, #32]	; (8016748 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 8016728:	f9b2 1000 	ldrsh.w	r1, [r2]
 801672c:	4798      	blx	r3
 801672e:	6863      	ldr	r3, [r4, #4]
 8016730:	4628      	mov	r0, r5
 8016732:	4631      	mov	r1, r6
 8016734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016736:	4798      	blx	r3
 8016738:	4620      	mov	r0, r4
 801673a:	bd70      	pop	{r4, r5, r6, pc}
 801673c:	08027c78 	.word	0x08027c78
 8016740:	08027814 	.word	0x08027814
 8016744:	200243d2 	.word	0x200243d2
 8016748:	200243d0 	.word	0x200243d0

0801674c <_ZN8touchgfx6Screen4drawEv>:
 801674c:	4b09      	ldr	r3, [pc, #36]	; (8016774 <_ZN8touchgfx6Screen4drawEv+0x28>)
 801674e:	b507      	push	{r0, r1, r2, lr}
 8016750:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016754:	2100      	movs	r1, #0
 8016756:	4b08      	ldr	r3, [pc, #32]	; (8016778 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 8016758:	9100      	str	r1, [sp, #0]
 801675a:	4669      	mov	r1, sp
 801675c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016760:	f8ad 2004 	strh.w	r2, [sp, #4]
 8016764:	f8ad 3006 	strh.w	r3, [sp, #6]
 8016768:	6803      	ldr	r3, [r0, #0]
 801676a:	689b      	ldr	r3, [r3, #8]
 801676c:	4798      	blx	r3
 801676e:	b003      	add	sp, #12
 8016770:	f85d fb04 	ldr.w	pc, [sp], #4
 8016774:	200243d0 	.word	0x200243d0
 8016778:	200243d2 	.word	0x200243d2

0801677c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801677c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016780:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8016784:	b089      	sub	sp, #36	; 0x24
 8016786:	4680      	mov	r8, r0
 8016788:	460c      	mov	r4, r1
 801678a:	2b00      	cmp	r3, #0
 801678c:	4615      	mov	r5, r2
 801678e:	dd0e      	ble.n	80167ae <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8016790:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8016794:	2b00      	cmp	r3, #0
 8016796:	dd0a      	ble.n	80167ae <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8016798:	4628      	mov	r0, r5
 801679a:	f7ff ff5b 	bl	8016654 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801679e:	4621      	mov	r1, r4
 80167a0:	f7fe fbda 	bl	8014f58 <_ZNK8touchgfx4Rect9intersectERKS0_>
 80167a4:	69eb      	ldr	r3, [r5, #28]
 80167a6:	b928      	cbnz	r0, 80167b4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 80167a8:	461d      	mov	r5, r3
 80167aa:	2b00      	cmp	r3, #0
 80167ac:	d1f4      	bne.n	8016798 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 80167ae:	b009      	add	sp, #36	; 0x24
 80167b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80167b4:	ae04      	add	r6, sp, #16
 80167b6:	2b00      	cmp	r3, #0
 80167b8:	f000 80b5 	beq.w	8016926 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 80167bc:	682b      	ldr	r3, [r5, #0]
 80167be:	4629      	mov	r1, r5
 80167c0:	a802      	add	r0, sp, #8
 80167c2:	68db      	ldr	r3, [r3, #12]
 80167c4:	4798      	blx	r3
 80167c6:	4628      	mov	r0, r5
 80167c8:	f7ff ff60 	bl	801668c <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 80167cc:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 80167d0:	4407      	add	r7, r0
 80167d2:	4628      	mov	r0, r5
 80167d4:	f7ff ff6e 	bl	80166b4 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 80167d8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80167dc:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 80167e0:	b23f      	sxth	r7, r7
 80167e2:	4418      	add	r0, r3
 80167e4:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80167e8:	4621      	mov	r1, r4
 80167ea:	f8ad 2014 	strh.w	r2, [sp, #20]
 80167ee:	f8ad 0012 	strh.w	r0, [sp, #18]
 80167f2:	4630      	mov	r0, r6
 80167f4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80167f8:	f8ad 7010 	strh.w	r7, [sp, #16]
 80167fc:	f7fc fbd4 	bl	8012fa8 <_ZN8touchgfx4RectaNERKS0_>
 8016800:	4628      	mov	r0, r5
 8016802:	f7ff ff27 	bl	8016654 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8016806:	ab06      	add	r3, sp, #24
 8016808:	4602      	mov	r2, r0
 801680a:	e896 0003 	ldmia.w	r6, {r0, r1}
 801680e:	e883 0003 	stmia.w	r3, {r0, r1}
 8016812:	4611      	mov	r1, r2
 8016814:	4618      	mov	r0, r3
 8016816:	f7fc fbc7 	bl	8012fa8 <_ZN8touchgfx4RectaNERKS0_>
 801681a:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801681e:	f9b4 1000 	ldrsh.w	r1, [r4]
 8016822:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 8016826:	4299      	cmp	r1, r3
 8016828:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 801682c:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 8016830:	d10b      	bne.n	801684a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8016832:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8016836:	4552      	cmp	r2, sl
 8016838:	d107      	bne.n	801684a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801683a:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801683e:	455a      	cmp	r2, fp
 8016840:	d103      	bne.n	801684a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8016842:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8016846:	454a      	cmp	r2, r9
 8016848:	d06d      	beq.n	8016926 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801684a:	f1bb 0f00 	cmp.w	fp, #0
 801684e:	dd65      	ble.n	801691c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8016850:	f1b9 0f00 	cmp.w	r9, #0
 8016854:	dd62      	ble.n	801691c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8016856:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801685a:	fa1f f08a 	uxth.w	r0, sl
 801685e:	4552      	cmp	r2, sl
 8016860:	9000      	str	r0, [sp, #0]
 8016862:	da12      	bge.n	801688a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 8016864:	9301      	str	r3, [sp, #4]
 8016866:	9b00      	ldr	r3, [sp, #0]
 8016868:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801686c:	f8ad 2012 	strh.w	r2, [sp, #18]
 8016870:	1a9a      	subs	r2, r3, r2
 8016872:	f8ad 1010 	strh.w	r1, [sp, #16]
 8016876:	4631      	mov	r1, r6
 8016878:	f8ad 0014 	strh.w	r0, [sp, #20]
 801687c:	4640      	mov	r0, r8
 801687e:	f8ad 2016 	strh.w	r2, [sp, #22]
 8016882:	69ea      	ldr	r2, [r5, #28]
 8016884:	f7ff ff7a 	bl	801677c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8016888:	9b01      	ldr	r3, [sp, #4]
 801688a:	f9b4 2000 	ldrsh.w	r2, [r4]
 801688e:	b29f      	uxth	r7, r3
 8016890:	429a      	cmp	r2, r3
 8016892:	da0d      	bge.n	80168b0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 8016894:	f8ad 2010 	strh.w	r2, [sp, #16]
 8016898:	1aba      	subs	r2, r7, r2
 801689a:	f8ad a012 	strh.w	sl, [sp, #18]
 801689e:	4631      	mov	r1, r6
 80168a0:	f8ad 2014 	strh.w	r2, [sp, #20]
 80168a4:	4640      	mov	r0, r8
 80168a6:	f8ad 9016 	strh.w	r9, [sp, #22]
 80168aa:	69ea      	ldr	r2, [r5, #28]
 80168ac:	f7ff ff66 	bl	801677c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80168b0:	8822      	ldrh	r2, [r4, #0]
 80168b2:	445f      	add	r7, fp
 80168b4:	88a3      	ldrh	r3, [r4, #4]
 80168b6:	b2bf      	uxth	r7, r7
 80168b8:	4413      	add	r3, r2
 80168ba:	b23a      	sxth	r2, r7
 80168bc:	b29b      	uxth	r3, r3
 80168be:	b219      	sxth	r1, r3
 80168c0:	4291      	cmp	r1, r2
 80168c2:	dd0d      	ble.n	80168e0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 80168c4:	1bdb      	subs	r3, r3, r7
 80168c6:	f8ad 2010 	strh.w	r2, [sp, #16]
 80168ca:	f8ad a012 	strh.w	sl, [sp, #18]
 80168ce:	4631      	mov	r1, r6
 80168d0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80168d4:	4640      	mov	r0, r8
 80168d6:	f8ad 9016 	strh.w	r9, [sp, #22]
 80168da:	69ea      	ldr	r2, [r5, #28]
 80168dc:	f7ff ff4e 	bl	801677c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80168e0:	88e2      	ldrh	r2, [r4, #6]
 80168e2:	8863      	ldrh	r3, [r4, #2]
 80168e4:	4413      	add	r3, r2
 80168e6:	9a00      	ldr	r2, [sp, #0]
 80168e8:	444a      	add	r2, r9
 80168ea:	b29b      	uxth	r3, r3
 80168ec:	fa1f f982 	uxth.w	r9, r2
 80168f0:	b219      	sxth	r1, r3
 80168f2:	fa0f f289 	sxth.w	r2, r9
 80168f6:	428a      	cmp	r2, r1
 80168f8:	da15      	bge.n	8016926 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 80168fa:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80168fe:	eba3 0309 	sub.w	r3, r3, r9
 8016902:	f9b4 0000 	ldrsh.w	r0, [r4]
 8016906:	f8ad 1014 	strh.w	r1, [sp, #20]
 801690a:	4631      	mov	r1, r6
 801690c:	f8ad 0010 	strh.w	r0, [sp, #16]
 8016910:	f8ad 2012 	strh.w	r2, [sp, #18]
 8016914:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016918:	69ea      	ldr	r2, [r5, #28]
 801691a:	e001      	b.n	8016920 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 801691c:	69ea      	ldr	r2, [r5, #28]
 801691e:	4621      	mov	r1, r4
 8016920:	4640      	mov	r0, r8
 8016922:	f7ff ff2b 	bl	801677c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8016926:	4628      	mov	r0, r5
 8016928:	f7ff fe94 	bl	8016654 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801692c:	6861      	ldr	r1, [r4, #4]
 801692e:	4602      	mov	r2, r0
 8016930:	4633      	mov	r3, r6
 8016932:	6820      	ldr	r0, [r4, #0]
 8016934:	c303      	stmia	r3!, {r0, r1}
 8016936:	4611      	mov	r1, r2
 8016938:	4630      	mov	r0, r6
 801693a:	f7fc fb35 	bl	8012fa8 <_ZN8touchgfx4RectaNERKS0_>
 801693e:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8016942:	2b00      	cmp	r3, #0
 8016944:	f77f af33 	ble.w	80167ae <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8016948:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801694c:	2b00      	cmp	r3, #0
 801694e:	f77f af2e 	ble.w	80167ae <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8016952:	4628      	mov	r0, r5
 8016954:	f7ff fe9a 	bl	801668c <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8016958:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801695c:	1a18      	subs	r0, r3, r0
 801695e:	f8ad 0010 	strh.w	r0, [sp, #16]
 8016962:	4628      	mov	r0, r5
 8016964:	f7ff fea6 	bl	80166b4 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8016968:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801696c:	4631      	mov	r1, r6
 801696e:	1a18      	subs	r0, r3, r0
 8016970:	f8ad 0012 	strh.w	r0, [sp, #18]
 8016974:	4628      	mov	r0, r5
 8016976:	682b      	ldr	r3, [r5, #0]
 8016978:	689b      	ldr	r3, [r3, #8]
 801697a:	4798      	blx	r3
 801697c:	e717      	b.n	80167ae <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0801697e <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801697e:	b570      	push	{r4, r5, r6, lr}
 8016980:	1d06      	adds	r6, r0, #4
 8016982:	b086      	sub	sp, #24
 8016984:	460c      	mov	r4, r1
 8016986:	2300      	movs	r3, #0
 8016988:	4631      	mov	r1, r6
 801698a:	4605      	mov	r5, r0
 801698c:	a802      	add	r0, sp, #8
 801698e:	9301      	str	r3, [sp, #4]
 8016990:	f7ff fca0 	bl	80162d4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016994:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8016998:	8822      	ldrh	r2, [r4, #0]
 801699a:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 801699e:	1ad2      	subs	r2, r2, r3
 80169a0:	8863      	ldrh	r3, [r4, #2]
 80169a2:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80169a6:	1a5b      	subs	r3, r3, r1
 80169a8:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 80169ac:	f8ad 2010 	strh.w	r2, [sp, #16]
 80169b0:	aa01      	add	r2, sp, #4
 80169b2:	f8ad 0014 	strh.w	r0, [sp, #20]
 80169b6:	4630      	mov	r0, r6
 80169b8:	f8ad 1016 	strh.w	r1, [sp, #22]
 80169bc:	a904      	add	r1, sp, #16
 80169be:	f8ad 3012 	strh.w	r3, [sp, #18]
 80169c2:	f7fc fbc9 	bl	8013158 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 80169c6:	9a01      	ldr	r2, [sp, #4]
 80169c8:	b11a      	cbz	r2, 80169d2 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 80169ca:	4621      	mov	r1, r4
 80169cc:	4628      	mov	r0, r5
 80169ce:	f7ff fed5 	bl	801677c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80169d2:	b006      	add	sp, #24
 80169d4:	bd70      	pop	{r4, r5, r6, pc}

080169d6 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 80169d6:	4602      	mov	r2, r0
 80169d8:	b530      	push	{r4, r5, lr}
 80169da:	4604      	mov	r4, r0
 80169dc:	b085      	sub	sp, #20
 80169de:	f852 0f08 	ldr.w	r0, [r2, #8]!
 80169e2:	460d      	mov	r5, r1
 80169e4:	466b      	mov	r3, sp
 80169e6:	6851      	ldr	r1, [r2, #4]
 80169e8:	c303      	stmia	r3!, {r0, r1}
 80169ea:	4629      	mov	r1, r5
 80169ec:	4668      	mov	r0, sp
 80169ee:	f7fc fadb 	bl	8012fa8 <_ZN8touchgfx4RectaNERKS0_>
 80169f2:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80169f6:	b12b      	cbz	r3, 8016a04 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 80169f8:	4669      	mov	r1, sp
 80169fa:	4620      	mov	r0, r4
 80169fc:	f7ff ffbf 	bl	801697e <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 8016a00:	b005      	add	sp, #20
 8016a02:	bd30      	pop	{r4, r5, pc}
 8016a04:	3404      	adds	r4, #4
 8016a06:	a802      	add	r0, sp, #8
 8016a08:	4621      	mov	r1, r4
 8016a0a:	f7ff fc63 	bl	80162d4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016a0e:	f8bd 3000 	ldrh.w	r3, [sp]
 8016a12:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8016a16:	4669      	mov	r1, sp
 8016a18:	4620      	mov	r0, r4
 8016a1a:	1a9b      	subs	r3, r3, r2
 8016a1c:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8016a20:	f8ad 3000 	strh.w	r3, [sp]
 8016a24:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8016a28:	1a9b      	subs	r3, r3, r2
 8016a2a:	f8ad 3002 	strh.w	r3, [sp, #2]
 8016a2e:	f7fc fb5a 	bl	80130e6 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 8016a32:	e7e5      	b.n	8016a00 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

08016a34 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 8016a34:	460b      	mov	r3, r1
 8016a36:	680a      	ldr	r2, [r1, #0]
 8016a38:	1d01      	adds	r1, r0, #4
 8016a3a:	6992      	ldr	r2, [r2, #24]
 8016a3c:	4618      	mov	r0, r3
 8016a3e:	4710      	bx	r2

08016a40 <_ZN8touchgfx12TextProviderC1Ev>:
 8016a40:	b538      	push	{r3, r4, r5, lr}
 8016a42:	2500      	movs	r5, #0
 8016a44:	2302      	movs	r3, #2
 8016a46:	4604      	mov	r4, r0
 8016a48:	220e      	movs	r2, #14
 8016a4a:	7403      	strb	r3, [r0, #16]
 8016a4c:	4629      	mov	r1, r5
 8016a4e:	6145      	str	r5, [r0, #20]
 8016a50:	7605      	strb	r5, [r0, #24]
 8016a52:	83c5      	strh	r5, [r0, #30]
 8016a54:	8405      	strh	r5, [r0, #32]
 8016a56:	86c5      	strh	r5, [r0, #54]	; 0x36
 8016a58:	8705      	strh	r5, [r0, #56]	; 0x38
 8016a5a:	87c5      	strh	r5, [r0, #62]	; 0x3e
 8016a5c:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 8016a60:	e9c0 5500 	strd	r5, r5, [r0]
 8016a64:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 8016a68:	304c      	adds	r0, #76	; 0x4c
 8016a6a:	f00c fe2f 	bl	80236cc <memset>
 8016a6e:	2301      	movs	r3, #1
 8016a70:	4620      	mov	r0, r4
 8016a72:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 8016a76:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8016a7a:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 8016a7e:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 8016a82:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 8016a86:	f7f6 fda7 	bl	800d5d8 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 8016a8a:	4620      	mov	r0, r4
 8016a8c:	bd38      	pop	{r3, r4, r5, pc}

08016a8e <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 8016a8e:	b530      	push	{r4, r5, lr}
 8016a90:	2500      	movs	r5, #0
 8016a92:	2401      	movs	r4, #1
 8016a94:	6843      	ldr	r3, [r0, #4]
 8016a96:	b913      	cbnz	r3, 8016a9e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 8016a98:	6803      	ldr	r3, [r0, #0]
 8016a9a:	b313      	cbz	r3, 8016ae2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8016a9c:	6043      	str	r3, [r0, #4]
 8016a9e:	7e03      	ldrb	r3, [r0, #24]
 8016aa0:	b143      	cbz	r3, 8016ab4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 8016aa2:	6943      	ldr	r3, [r0, #20]
 8016aa4:	b12b      	cbz	r3, 8016ab2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8016aa6:	881a      	ldrh	r2, [r3, #0]
 8016aa8:	b11a      	cbz	r2, 8016ab2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8016aaa:	1c9a      	adds	r2, r3, #2
 8016aac:	6142      	str	r2, [r0, #20]
 8016aae:	8818      	ldrh	r0, [r3, #0]
 8016ab0:	bd30      	pop	{r4, r5, pc}
 8016ab2:	7605      	strb	r5, [r0, #24]
 8016ab4:	6843      	ldr	r3, [r0, #4]
 8016ab6:	8819      	ldrh	r1, [r3, #0]
 8016ab8:	b199      	cbz	r1, 8016ae2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8016aba:	1c9a      	adds	r2, r3, #2
 8016abc:	2902      	cmp	r1, #2
 8016abe:	6042      	str	r2, [r0, #4]
 8016ac0:	d1f5      	bne.n	8016aae <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 8016ac2:	7c03      	ldrb	r3, [r0, #16]
 8016ac4:	2b01      	cmp	r3, #1
 8016ac6:	d8e5      	bhi.n	8016a94 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8016ac8:	1c5a      	adds	r2, r3, #1
 8016aca:	3302      	adds	r3, #2
 8016acc:	7402      	strb	r2, [r0, #16]
 8016ace:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8016ad2:	6143      	str	r3, [r0, #20]
 8016ad4:	2b00      	cmp	r3, #0
 8016ad6:	d0dd      	beq.n	8016a94 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8016ad8:	881b      	ldrh	r3, [r3, #0]
 8016ada:	2b00      	cmp	r3, #0
 8016adc:	d0da      	beq.n	8016a94 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8016ade:	7604      	strb	r4, [r0, #24]
 8016ae0:	e7d8      	b.n	8016a94 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8016ae2:	2000      	movs	r0, #0
 8016ae4:	e7e4      	b.n	8016ab0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

08016ae6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 8016ae6:	6001      	str	r1, [r0, #0]
 8016ae8:	2100      	movs	r1, #0
 8016aea:	b430      	push	{r4, r5}
 8016aec:	6041      	str	r1, [r0, #4]
 8016aee:	6815      	ldr	r5, [r2, #0]
 8016af0:	6085      	str	r5, [r0, #8]
 8016af2:	6852      	ldr	r2, [r2, #4]
 8016af4:	6443      	str	r3, [r0, #68]	; 0x44
 8016af6:	9b02      	ldr	r3, [sp, #8]
 8016af8:	60c2      	str	r2, [r0, #12]
 8016afa:	7401      	strb	r1, [r0, #16]
 8016afc:	6141      	str	r1, [r0, #20]
 8016afe:	7601      	strb	r1, [r0, #24]
 8016b00:	8701      	strh	r1, [r0, #56]	; 0x38
 8016b02:	8401      	strh	r1, [r0, #32]
 8016b04:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 8016b08:	6483      	str	r3, [r0, #72]	; 0x48
 8016b0a:	bc30      	pop	{r4, r5}
 8016b0c:	f7f6 bd64 	b.w	800d5d8 <_ZN8touchgfx12TextProvider18initializeInternalEv>

08016b10 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 8016b10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016b12:	4605      	mov	r5, r0
 8016b14:	4608      	mov	r0, r1
 8016b16:	b1f1      	cbz	r1, 8016b56 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 8016b18:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 8016b1c:	460b      	mov	r3, r1
 8016b1e:	f101 0708 	add.w	r7, r1, #8
 8016b22:	4622      	mov	r2, r4
 8016b24:	6818      	ldr	r0, [r3, #0]
 8016b26:	3308      	adds	r3, #8
 8016b28:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8016b2c:	4626      	mov	r6, r4
 8016b2e:	42bb      	cmp	r3, r7
 8016b30:	c603      	stmia	r6!, {r0, r1}
 8016b32:	4634      	mov	r4, r6
 8016b34:	d1f6      	bne.n	8016b24 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 8016b36:	6818      	ldr	r0, [r3, #0]
 8016b38:	6030      	str	r0, [r6, #0]
 8016b3a:	4610      	mov	r0, r2
 8016b3c:	889b      	ldrh	r3, [r3, #4]
 8016b3e:	80b3      	strh	r3, [r6, #4]
 8016b40:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 8016b44:	015b      	lsls	r3, r3, #5
 8016b46:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8016b4a:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 8016b4e:	430b      	orrs	r3, r1
 8016b50:	425b      	negs	r3, r3
 8016b52:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 8016b56:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016b58 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 8016b58:	b538      	push	{r3, r4, r5, lr}
 8016b5a:	460c      	mov	r4, r1
 8016b5c:	6811      	ldr	r1, [r2, #0]
 8016b5e:	4610      	mov	r0, r2
 8016b60:	68cd      	ldr	r5, [r1, #12]
 8016b62:	4619      	mov	r1, r3
 8016b64:	47a8      	blx	r5
 8016b66:	2800      	cmp	r0, #0
 8016b68:	bf08      	it	eq
 8016b6a:	4620      	moveq	r0, r4
 8016b6c:	bd38      	pop	{r3, r4, r5, pc}
	...

08016b70 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 8016b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016b72:	4604      	mov	r4, r0
 8016b74:	4615      	mov	r5, r2
 8016b76:	4608      	mov	r0, r1
 8016b78:	b93a      	cbnz	r2, 8016b8a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 8016b7a:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 8016b7e:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8016b82:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 8016b86:	4628      	mov	r0, r5
 8016b88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016b8a:	f892 c00d 	ldrb.w	ip, [r2, #13]
 8016b8e:	f46f 6763 	mvn.w	r7, #3632	; 0xe30
 8016b92:	8893      	ldrh	r3, [r2, #4]
 8016b94:	ea4f 160c 	mov.w	r6, ip, lsl #4
 8016b98:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8016b9c:	79ee      	ldrb	r6, [r5, #7]
 8016b9e:	4316      	orrs	r6, r2
 8016ba0:	19da      	adds	r2, r3, r7
 8016ba2:	b291      	uxth	r1, r2
 8016ba4:	b2b7      	uxth	r7, r6
 8016ba6:	291d      	cmp	r1, #29
 8016ba8:	d87b      	bhi.n	8016ca2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 8016baa:	2201      	movs	r2, #1
 8016bac:	10f6      	asrs	r6, r6, #3
 8016bae:	408a      	lsls	r2, r1
 8016bb0:	4974      	ldr	r1, [pc, #464]	; (8016d84 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
 8016bb2:	420a      	tst	r2, r1
 8016bb4:	d12e      	bne.n	8016c14 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 8016bb6:	f412 7f60 	tst.w	r2, #896	; 0x380
 8016bba:	d072      	beq.n	8016ca2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 8016bbc:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 8016bc0:	462b      	mov	r3, r5
 8016bc2:	f105 0e08 	add.w	lr, r5, #8
 8016bc6:	4615      	mov	r5, r2
 8016bc8:	6818      	ldr	r0, [r3, #0]
 8016bca:	3308      	adds	r3, #8
 8016bcc:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8016bd0:	4694      	mov	ip, r2
 8016bd2:	4573      	cmp	r3, lr
 8016bd4:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8016bd8:	4662      	mov	r2, ip
 8016bda:	d1f5      	bne.n	8016bc8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 8016bdc:	6818      	ldr	r0, [r3, #0]
 8016bde:	f8cc 0000 	str.w	r0, [ip]
 8016be2:	889b      	ldrh	r3, [r3, #4]
 8016be4:	f8ac 3004 	strh.w	r3, [ip, #4]
 8016be8:	b2b3      	uxth	r3, r6
 8016bea:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8016bee:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 8016bf2:	1aca      	subs	r2, r1, r3
 8016bf4:	1bcf      	subs	r7, r1, r7
 8016bf6:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 8016bfa:	b292      	uxth	r2, r2
 8016bfc:	1afb      	subs	r3, r7, r3
 8016bfe:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 8016c02:	10d2      	asrs	r2, r2, #3
 8016c04:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8016c08:	4302      	orrs	r2, r0
 8016c0a:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 8016c0e:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 8016c12:	e7b8      	b.n	8016b86 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 8016c14:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8016c16:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8016c1a:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 8016c1c:	f640 6333 	movw	r3, #3635	; 0xe33
 8016c20:	4299      	cmp	r1, r3
 8016c22:	d110      	bne.n	8016c46 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd6>
 8016c24:	6803      	ldr	r3, [r0, #0]
 8016c26:	68db      	ldr	r3, [r3, #12]
 8016c28:	4798      	blx	r3
 8016c2a:	7b41      	ldrb	r1, [r0, #13]
 8016c2c:	00cb      	lsls	r3, r1, #3
 8016c2e:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8016c32:	7a03      	ldrb	r3, [r0, #8]
 8016c34:	0648      	lsls	r0, r1, #25
 8016c36:	ea43 0302 	orr.w	r3, r3, r2
 8016c3a:	bf44      	itt	mi
 8016c3c:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8016c40:	b21b      	sxthmi	r3, r3
 8016c42:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8016c46:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8016c4a:	462a      	mov	r2, r5
 8016c4c:	f105 0c08 	add.w	ip, r5, #8
 8016c50:	443b      	add	r3, r7
 8016c52:	4433      	add	r3, r6
 8016c54:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 8016c58:	b29b      	uxth	r3, r3
 8016c5a:	4635      	mov	r5, r6
 8016c5c:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8016c60:	6810      	ldr	r0, [r2, #0]
 8016c62:	3208      	adds	r2, #8
 8016c64:	f852 1c04 	ldr.w	r1, [r2, #-4]
 8016c68:	4637      	mov	r7, r6
 8016c6a:	4562      	cmp	r2, ip
 8016c6c:	c703      	stmia	r7!, {r0, r1}
 8016c6e:	463e      	mov	r6, r7
 8016c70:	d1f6      	bne.n	8016c60 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf0>
 8016c72:	6810      	ldr	r0, [r2, #0]
 8016c74:	6038      	str	r0, [r7, #0]
 8016c76:	8892      	ldrh	r2, [r2, #4]
 8016c78:	80ba      	strh	r2, [r7, #4]
 8016c7a:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8016c7e:	10db      	asrs	r3, r3, #3
 8016c80:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8016c84:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8016c88:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8016c8c:	4313      	orrs	r3, r2
 8016c8e:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 8016c92:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8016c96:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 8016c9a:	1a9b      	subs	r3, r3, r2
 8016c9c:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 8016ca0:	e771      	b.n	8016b86 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 8016ca2:	f023 0204 	bic.w	r2, r3, #4
 8016ca6:	f640 611b 	movw	r1, #3611	; 0xe1b
 8016caa:	428a      	cmp	r2, r1
 8016cac:	d003      	beq.n	8016cb6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x146>
 8016cae:	f640 621d 	movw	r2, #3613	; 0xe1d
 8016cb2:	4293      	cmp	r3, r2
 8016cb4:	d120      	bne.n	8016cf8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x188>
 8016cb6:	3b01      	subs	r3, #1
 8016cb8:	4602      	mov	r2, r0
 8016cba:	4629      	mov	r1, r5
 8016cbc:	4620      	mov	r0, r4
 8016cbe:	b29b      	uxth	r3, r3
 8016cc0:	f7ff ff4a 	bl	8016b58 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8016cc4:	7b41      	ldrb	r1, [r0, #13]
 8016cc6:	00cb      	lsls	r3, r1, #3
 8016cc8:	0649      	lsls	r1, r1, #25
 8016cca:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8016cce:	7a03      	ldrb	r3, [r0, #8]
 8016cd0:	ea43 0302 	orr.w	r3, r3, r2
 8016cd4:	bf44      	itt	mi
 8016cd6:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8016cda:	b21b      	sxthmi	r3, r3
 8016cdc:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8016ce0:	7b6b      	ldrb	r3, [r5, #13]
 8016ce2:	7aaa      	ldrb	r2, [r5, #10]
 8016ce4:	005b      	lsls	r3, r3, #1
 8016ce6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016cea:	4313      	orrs	r3, r2
 8016cec:	115a      	asrs	r2, r3, #5
 8016cee:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 8016cf2:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 8016cf6:	e035      	b.n	8016d64 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f4>
 8016cf8:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 8016cfc:	f01c 0f40 	tst.w	ip, #64	; 0x40
 8016d00:	f402 7180 	and.w	r1, r2, #256	; 0x100
 8016d04:	7a2a      	ldrb	r2, [r5, #8]
 8016d06:	ea42 0201 	orr.w	r2, r2, r1
 8016d0a:	f640 6109 	movw	r1, #3593	; 0xe09
 8016d0e:	bf1c      	itt	ne
 8016d10:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 8016d14:	b212      	sxthne	r2, r2
 8016d16:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 8016d1a:	f023 0210 	bic.w	r2, r3, #16
 8016d1e:	428a      	cmp	r2, r1
 8016d20:	d003      	beq.n	8016d2a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
 8016d22:	f640 6213 	movw	r2, #3603	; 0xe13
 8016d26:	4293      	cmp	r3, r2
 8016d28:	d129      	bne.n	8016d7e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20e>
 8016d2a:	7b6e      	ldrb	r6, [r5, #13]
 8016d2c:	4629      	mov	r1, r5
 8016d2e:	0076      	lsls	r6, r6, #1
 8016d30:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8016d34:	7aae      	ldrb	r6, [r5, #10]
 8016d36:	4316      	orrs	r6, r2
 8016d38:	f640 6213 	movw	r2, #3603	; 0xe13
 8016d3c:	4293      	cmp	r3, r2
 8016d3e:	4602      	mov	r2, r0
 8016d40:	4620      	mov	r0, r4
 8016d42:	bf16      	itet	ne
 8016d44:	f103 33ff 	addne.w	r3, r3, #4294967295
 8016d48:	f640 630c 	movweq	r3, #3596	; 0xe0c
 8016d4c:	b29b      	uxthne	r3, r3
 8016d4e:	f7ff ff03 	bl	8016b58 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8016d52:	7b43      	ldrb	r3, [r0, #13]
 8016d54:	7a82      	ldrb	r2, [r0, #10]
 8016d56:	005b      	lsls	r3, r3, #1
 8016d58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016d5c:	4313      	orrs	r3, r2
 8016d5e:	1af6      	subs	r6, r6, r3
 8016d60:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 8016d64:	7b69      	ldrb	r1, [r5, #13]
 8016d66:	00cb      	lsls	r3, r1, #3
 8016d68:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8016d6c:	7a2b      	ldrb	r3, [r5, #8]
 8016d6e:	4313      	orrs	r3, r2
 8016d70:	064a      	lsls	r2, r1, #25
 8016d72:	bf44      	itt	mi
 8016d74:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8016d78:	b21b      	sxthmi	r3, r3
 8016d7a:	1bdb      	subs	r3, r3, r7
 8016d7c:	e747      	b.n	8016c0e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 8016d7e:	2300      	movs	r3, #0
 8016d80:	e7b7      	b.n	8016cf2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x182>
 8016d82:	bf00      	nop
 8016d84:	3fc00079 	.word	0x3fc00079

08016d88 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 8016d88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016d8c:	4604      	mov	r4, r0
 8016d8e:	b942      	cbnz	r2, 8016da2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 8016d90:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8016d94:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 8016d98:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8016d9c:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 8016da0:	e047      	b.n	8016e32 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8016da2:	7b51      	ldrb	r1, [r2, #13]
 8016da4:	8893      	ldrh	r3, [r2, #4]
 8016da6:	010d      	lsls	r5, r1, #4
 8016da8:	f405 7080 	and.w	r0, r5, #256	; 0x100
 8016dac:	79d5      	ldrb	r5, [r2, #7]
 8016dae:	4305      	orrs	r5, r0
 8016db0:	2d04      	cmp	r5, #4
 8016db2:	bfcc      	ite	gt
 8016db4:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 8016db8:	f04f 0e01 	movle.w	lr, #1
 8016dbc:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 8016dc0:	f200 80ab 	bhi.w	8016f1a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 8016dc4:	f240 60e7 	movw	r0, #1767	; 0x6e7
 8016dc8:	4283      	cmp	r3, r0
 8016dca:	d216      	bcs.n	8016dfa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016dcc:	f240 605b 	movw	r0, #1627	; 0x65b
 8016dd0:	4283      	cmp	r3, r0
 8016dd2:	d859      	bhi.n	8016e88 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 8016dd4:	f240 6057 	movw	r0, #1623	; 0x657
 8016dd8:	4283      	cmp	r3, r0
 8016dda:	d20e      	bcs.n	8016dfa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016ddc:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 8016de0:	d24a      	bcs.n	8016e78 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 8016de2:	f240 604e 	movw	r0, #1614	; 0x64e
 8016de6:	4283      	cmp	r3, r0
 8016de8:	d207      	bcs.n	8016dfa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016dea:	f240 601a 	movw	r0, #1562	; 0x61a
 8016dee:	4283      	cmp	r3, r0
 8016df0:	d02a      	beq.n	8016e48 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8016df2:	d821      	bhi.n	8016e38 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 8016df4:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 8016df8:	d35b      	bcc.n	8016eb2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8016dfa:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 8016dfe:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8016e02:	f040 80d0 	bne.w	8016fa6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 8016e06:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 8016e0a:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8016e0e:	f040 80ca 	bne.w	8016fa6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 8016e12:	00cb      	lsls	r3, r1, #3
 8016e14:	0649      	lsls	r1, r1, #25
 8016e16:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8016e1a:	7a13      	ldrb	r3, [r2, #8]
 8016e1c:	ea43 0300 	orr.w	r3, r3, r0
 8016e20:	bf44      	itt	mi
 8016e22:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8016e26:	b21b      	sxthmi	r3, r3
 8016e28:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8016e2c:	1b5d      	subs	r5, r3, r5
 8016e2e:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8016e32:	4610      	mov	r0, r2
 8016e34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016e38:	f240 604b 	movw	r0, #1611	; 0x64b
 8016e3c:	4283      	cmp	r3, r0
 8016e3e:	d338      	bcc.n	8016eb2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8016e40:	f240 604c 	movw	r0, #1612	; 0x64c
 8016e44:	4283      	cmp	r3, r0
 8016e46:	d9d8      	bls.n	8016dfa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016e48:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 8016e4c:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 8016e50:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8016e54:	f040 80f3 	bne.w	801703e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 8016e58:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8016e5c:	f040 80ef 	bne.w	801703e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 8016e60:	00cb      	lsls	r3, r1, #3
 8016e62:	064e      	lsls	r6, r1, #25
 8016e64:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8016e68:	7a13      	ldrb	r3, [r2, #8]
 8016e6a:	ea43 0300 	orr.w	r3, r3, r0
 8016e6e:	bf44      	itt	mi
 8016e70:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8016e74:	b21b      	sxthmi	r3, r3
 8016e76:	e7d9      	b.n	8016e2c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 8016e78:	f240 6054 	movw	r0, #1620	; 0x654
 8016e7c:	4283      	cmp	r3, r0
 8016e7e:	d8e3      	bhi.n	8016e48 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8016e80:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 8016e84:	d9e0      	bls.n	8016e48 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8016e86:	e7b8      	b.n	8016dfa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016e88:	f240 6074 	movw	r0, #1652	; 0x674
 8016e8c:	4283      	cmp	r3, r0
 8016e8e:	d0b4      	beq.n	8016dfa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016e90:	d82d      	bhi.n	8016eee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 8016e92:	f240 605e 	movw	r0, #1630	; 0x65e
 8016e96:	4283      	cmp	r3, r0
 8016e98:	d804      	bhi.n	8016ea4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 8016e9a:	f240 605d 	movw	r0, #1629	; 0x65d
 8016e9e:	4283      	cmp	r3, r0
 8016ea0:	d3d2      	bcc.n	8016e48 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8016ea2:	e7aa      	b.n	8016dfa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016ea4:	f240 605f 	movw	r0, #1631	; 0x65f
 8016ea8:	4283      	cmp	r3, r0
 8016eaa:	d0cd      	beq.n	8016e48 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8016eac:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 8016eb0:	d0a3      	beq.n	8016dfa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016eb2:	00cb      	lsls	r3, r1, #3
 8016eb4:	0649      	lsls	r1, r1, #25
 8016eb6:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8016eba:	7a13      	ldrb	r3, [r2, #8]
 8016ebc:	ea43 0300 	orr.w	r3, r3, r0
 8016ec0:	bf44      	itt	mi
 8016ec2:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8016ec6:	b21b      	sxthmi	r3, r3
 8016ec8:	1b5d      	subs	r5, r3, r5
 8016eca:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8016ece:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8016ed2:	7b53      	ldrb	r3, [r2, #13]
 8016ed4:	015b      	lsls	r3, r3, #5
 8016ed6:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8016eda:	7993      	ldrb	r3, [r2, #6]
 8016edc:	430b      	orrs	r3, r1
 8016ede:	2105      	movs	r1, #5
 8016ee0:	005b      	lsls	r3, r3, #1
 8016ee2:	fb93 f3f1 	sdiv	r3, r3, r1
 8016ee6:	f992 1009 	ldrsb.w	r1, [r2, #9]
 8016eea:	440b      	add	r3, r1
 8016eec:	e756      	b.n	8016d9c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 8016eee:	f240 60e2 	movw	r0, #1762	; 0x6e2
 8016ef2:	4283      	cmp	r3, r0
 8016ef4:	d809      	bhi.n	8016f0a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 8016ef6:	f240 60df 	movw	r0, #1759	; 0x6df
 8016efa:	4283      	cmp	r3, r0
 8016efc:	f4bf af7d 	bcs.w	8016dfa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016f00:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 8016f04:	2b05      	cmp	r3, #5
 8016f06:	d8d4      	bhi.n	8016eb2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8016f08:	e777      	b.n	8016dfa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016f0a:	f240 60e3 	movw	r0, #1763	; 0x6e3
 8016f0e:	4283      	cmp	r3, r0
 8016f10:	d09a      	beq.n	8016e48 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8016f12:	f240 60e4 	movw	r0, #1764	; 0x6e4
 8016f16:	4283      	cmp	r3, r0
 8016f18:	e7ca      	b.n	8016eb0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8016f1a:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 8016f1e:	d22b      	bcs.n	8016f78 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 8016f20:	f640 00ed 	movw	r0, #2285	; 0x8ed
 8016f24:	4283      	cmp	r3, r0
 8016f26:	d28f      	bcs.n	8016e48 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8016f28:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8016f2c:	4283      	cmp	r3, r0
 8016f2e:	d816      	bhi.n	8016f5e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 8016f30:	f640 00e4 	movw	r0, #2276	; 0x8e4
 8016f34:	4283      	cmp	r3, r0
 8016f36:	f4bf af60 	bcs.w	8016dfa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016f3a:	f240 60ec 	movw	r0, #1772	; 0x6ec
 8016f3e:	4283      	cmp	r3, r0
 8016f40:	d80a      	bhi.n	8016f58 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 8016f42:	f240 60eb 	movw	r0, #1771	; 0x6eb
 8016f46:	4283      	cmp	r3, r0
 8016f48:	f4bf af57 	bcs.w	8016dfa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016f4c:	f240 60ea 	movw	r0, #1770	; 0x6ea
 8016f50:	4283      	cmp	r3, r0
 8016f52:	f43f af79 	beq.w	8016e48 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8016f56:	e7ac      	b.n	8016eb2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8016f58:	f240 60ed 	movw	r0, #1773	; 0x6ed
 8016f5c:	e7f8      	b.n	8016f50 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 8016f5e:	f640 00e8 	movw	r0, #2280	; 0x8e8
 8016f62:	4283      	cmp	r3, r0
 8016f64:	d802      	bhi.n	8016f6c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 8016f66:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8016f6a:	e798      	b.n	8016e9e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 8016f6c:	f640 00e9 	movw	r0, #2281	; 0x8e9
 8016f70:	4283      	cmp	r3, r0
 8016f72:	f47f af42 	bne.w	8016dfa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016f76:	e767      	b.n	8016e48 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8016f78:	f640 00f6 	movw	r0, #2294	; 0x8f6
 8016f7c:	4283      	cmp	r3, r0
 8016f7e:	f43f af63 	beq.w	8016e48 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8016f82:	d802      	bhi.n	8016f8a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 8016f84:	f640 00f2 	movw	r0, #2290	; 0x8f2
 8016f88:	e7f2      	b.n	8016f70 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 8016f8a:	f640 00fa 	movw	r0, #2298	; 0x8fa
 8016f8e:	4283      	cmp	r3, r0
 8016f90:	d805      	bhi.n	8016f9e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 8016f92:	f640 00f9 	movw	r0, #2297	; 0x8f9
 8016f96:	4283      	cmp	r3, r0
 8016f98:	f4ff af2f 	bcc.w	8016dfa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016f9c:	e754      	b.n	8016e48 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8016f9e:	f640 00fe 	movw	r0, #2302	; 0x8fe
 8016fa2:	4283      	cmp	r3, r0
 8016fa4:	e7af      	b.n	8016f06 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 8016fa6:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 8016faa:	4617      	mov	r7, r2
 8016fac:	f102 0808 	add.w	r8, r2, #8
 8016fb0:	4666      	mov	r6, ip
 8016fb2:	6838      	ldr	r0, [r7, #0]
 8016fb4:	3708      	adds	r7, #8
 8016fb6:	f857 1c04 	ldr.w	r1, [r7, #-4]
 8016fba:	46e6      	mov	lr, ip
 8016fbc:	4547      	cmp	r7, r8
 8016fbe:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8016fc2:	46f4      	mov	ip, lr
 8016fc4:	d1f5      	bne.n	8016fb2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 8016fc6:	6838      	ldr	r0, [r7, #0]
 8016fc8:	f8ce 0000 	str.w	r0, [lr]
 8016fcc:	88b9      	ldrh	r1, [r7, #4]
 8016fce:	f8ae 1004 	strh.w	r1, [lr, #4]
 8016fd2:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 8016fd6:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8016fda:	d009      	beq.n	8016ff0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
 8016fdc:	7b51      	ldrb	r1, [r2, #13]
 8016fde:	7992      	ldrb	r2, [r2, #6]
 8016fe0:	0149      	lsls	r1, r1, #5
 8016fe2:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8016fe6:	4311      	orrs	r1, r2
 8016fe8:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8016fec:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 8016ff0:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8016ff4:	b2ad      	uxth	r5, r5
 8016ff6:	d00d      	beq.n	8017014 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
 8016ff8:	442b      	add	r3, r5
 8016ffa:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8016ffe:	b29b      	uxth	r3, r3
 8017000:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8017004:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8017008:	10db      	asrs	r3, r3, #3
 801700a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801700e:	4313      	orrs	r3, r2
 8017010:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8017014:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 8017018:	00cb      	lsls	r3, r1, #3
 801701a:	064f      	lsls	r7, r1, #25
 801701c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8017020:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 8017024:	ea43 0302 	orr.w	r3, r3, r2
 8017028:	bf44      	itt	mi
 801702a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801702e:	b21b      	sxthmi	r3, r3
 8017030:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8017034:	1b5b      	subs	r3, r3, r5
 8017036:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 801703a:	4632      	mov	r2, r6
 801703c:	e6f9      	b.n	8016e32 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801703e:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 8017042:	4617      	mov	r7, r2
 8017044:	f102 0908 	add.w	r9, r2, #8
 8017048:	4666      	mov	r6, ip
 801704a:	6838      	ldr	r0, [r7, #0]
 801704c:	3708      	adds	r7, #8
 801704e:	f857 1c04 	ldr.w	r1, [r7, #-4]
 8017052:	46e0      	mov	r8, ip
 8017054:	454f      	cmp	r7, r9
 8017056:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 801705a:	46c4      	mov	ip, r8
 801705c:	d1f5      	bne.n	801704a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
 801705e:	6838      	ldr	r0, [r7, #0]
 8017060:	f8c8 0000 	str.w	r0, [r8]
 8017064:	88b9      	ldrh	r1, [r7, #4]
 8017066:	f8a8 1004 	strh.w	r1, [r8, #4]
 801706a:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 801706e:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8017072:	d009      	beq.n	8017088 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
 8017074:	7b51      	ldrb	r1, [r2, #13]
 8017076:	7992      	ldrb	r2, [r2, #6]
 8017078:	0149      	lsls	r1, r1, #5
 801707a:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801707e:	4311      	orrs	r1, r2
 8017080:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8017084:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 8017088:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801708c:	d00e      	beq.n	80170ac <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 801708e:	eba3 030e 	sub.w	r3, r3, lr
 8017092:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8017096:	b29b      	uxth	r3, r3
 8017098:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801709c:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 80170a0:	10db      	asrs	r3, r3, #3
 80170a2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80170a6:	4313      	orrs	r3, r2
 80170a8:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 80170ac:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 80170b0:	00cb      	lsls	r3, r1, #3
 80170b2:	0648      	lsls	r0, r1, #25
 80170b4:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80170b8:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 80170bc:	ea43 0302 	orr.w	r3, r3, r2
 80170c0:	bf44      	itt	mi
 80170c2:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80170c6:	b21b      	sxthmi	r3, r3
 80170c8:	1b5d      	subs	r5, r3, r5
 80170ca:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 80170ce:	e7b4      	b.n	801703a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

080170d0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 80170d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80170d4:	461e      	mov	r6, r3
 80170d6:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 80170d8:	4604      	mov	r4, r0
 80170da:	4617      	mov	r7, r2
 80170dc:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80170e0:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 80170e4:	f7f6 f9d2 	bl	800d48c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80170e8:	4605      	mov	r5, r0
 80170ea:	b918      	cbnz	r0, 80170f4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 80170ec:	6030      	str	r0, [r6, #0]
 80170ee:	4628      	mov	r0, r5
 80170f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80170f4:	683b      	ldr	r3, [r7, #0]
 80170f6:	4601      	mov	r1, r0
 80170f8:	4638      	mov	r0, r7
 80170fa:	68db      	ldr	r3, [r3, #12]
 80170fc:	4798      	blx	r3
 80170fe:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 8017102:	4602      	mov	r2, r0
 8017104:	6030      	str	r0, [r6, #0]
 8017106:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801710a:	d213      	bcs.n	8017134 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 801710c:	4643      	mov	r3, r8
 801710e:	4639      	mov	r1, r7
 8017110:	4620      	mov	r0, r4
 8017112:	f7ff fe39 	bl	8016d88 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8017116:	6030      	str	r0, [r6, #0]
 8017118:	6833      	ldr	r3, [r6, #0]
 801711a:	b143      	cbz	r3, 801712e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 801711c:	7b5a      	ldrb	r2, [r3, #13]
 801711e:	7a9b      	ldrb	r3, [r3, #10]
 8017120:	0052      	lsls	r2, r2, #1
 8017122:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8017126:	4313      	orrs	r3, r2
 8017128:	bf0c      	ite	eq
 801712a:	2301      	moveq	r3, #1
 801712c:	2300      	movne	r3, #0
 801712e:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 8017132:	e7dc      	b.n	80170ee <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 8017134:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 8017138:	b29b      	uxth	r3, r3
 801713a:	2b7f      	cmp	r3, #127	; 0x7f
 801713c:	d804      	bhi.n	8017148 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 801713e:	4639      	mov	r1, r7
 8017140:	4620      	mov	r0, r4
 8017142:	f7ff fd15 	bl	8016b70 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8017146:	e7e6      	b.n	8017116 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 8017148:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 801714c:	2b00      	cmp	r3, #0
 801714e:	d0e3      	beq.n	8017118 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8017150:	f640 1302 	movw	r3, #2306	; 0x902
 8017154:	429d      	cmp	r5, r3
 8017156:	d1df      	bne.n	8017118 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8017158:	4601      	mov	r1, r0
 801715a:	4620      	mov	r0, r4
 801715c:	f7ff fcd8 	bl	8016b10 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8017160:	e7d9      	b.n	8017116 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

08017162 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 8017162:	b510      	push	{r4, lr}
 8017164:	4604      	mov	r4, r0
 8017166:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 801716a:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801716c:	b1e1      	cbz	r1, 80171a8 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 801716e:	2b0a      	cmp	r3, #10
 8017170:	d02d      	beq.n	80171ce <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 8017172:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8017174:	3901      	subs	r1, #1
 8017176:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 801717a:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 801717c:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 8017180:	1c51      	adds	r1, r2, #1
 8017182:	b289      	uxth	r1, r1
 8017184:	2901      	cmp	r1, #1
 8017186:	bf8a      	itet	hi
 8017188:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801718c:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 801718e:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 8017190:	1c5a      	adds	r2, r3, #1
 8017192:	8722      	strh	r2, [r4, #56]	; 0x38
 8017194:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8017196:	4413      	add	r3, r2
 8017198:	b29b      	uxth	r3, r3
 801719a:	2b09      	cmp	r3, #9
 801719c:	bf88      	it	hi
 801719e:	3b0a      	subhi	r3, #10
 80171a0:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80171a4:	8458      	strh	r0, [r3, #34]	; 0x22
 80171a6:	e7de      	b.n	8017166 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 80171a8:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 80171aa:	2b0a      	cmp	r3, #10
 80171ac:	d00f      	beq.n	80171ce <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 80171ae:	4620      	mov	r0, r4
 80171b0:	f7ff fc6d 	bl	8016a8e <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 80171b4:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 80171b6:	1c5a      	adds	r2, r3, #1
 80171b8:	8722      	strh	r2, [r4, #56]	; 0x38
 80171ba:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80171bc:	4413      	add	r3, r2
 80171be:	b29b      	uxth	r3, r3
 80171c0:	2b09      	cmp	r3, #9
 80171c2:	bf88      	it	hi
 80171c4:	3b0a      	subhi	r3, #10
 80171c6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80171ca:	8458      	strh	r0, [r3, #34]	; 0x22
 80171cc:	e7ec      	b.n	80171a8 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 80171ce:	bd10      	pop	{r4, pc}

080171d0 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 80171d0:	b538      	push	{r3, r4, r5, lr}
 80171d2:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 80171d4:	4604      	mov	r4, r0
 80171d6:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 80171da:	8c55      	ldrh	r5, [r2, #34]	; 0x22
 80171dc:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 80171de:	3a01      	subs	r2, #1
 80171e0:	8702      	strh	r2, [r0, #56]	; 0x38
 80171e2:	1c5a      	adds	r2, r3, #1
 80171e4:	b292      	uxth	r2, r2
 80171e6:	2a09      	cmp	r2, #9
 80171e8:	bf8a      	itet	hi
 80171ea:	3b09      	subhi	r3, #9
 80171ec:	86c2      	strhls	r2, [r0, #54]	; 0x36
 80171ee:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 80171f0:	f7ff ffb7 	bl	8017162 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 80171f4:	8c23      	ldrh	r3, [r4, #32]
 80171f6:	2b01      	cmp	r3, #1
 80171f8:	bf9c      	itt	ls
 80171fa:	3301      	addls	r3, #1
 80171fc:	8423      	strhls	r3, [r4, #32]
 80171fe:	8be3      	ldrh	r3, [r4, #30]
 8017200:	b90b      	cbnz	r3, 8017206 <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 8017202:	2302      	movs	r3, #2
 8017204:	83e3      	strh	r3, [r4, #30]
 8017206:	8be3      	ldrh	r3, [r4, #30]
 8017208:	4628      	mov	r0, r5
 801720a:	3b01      	subs	r3, #1
 801720c:	b29b      	uxth	r3, r3
 801720e:	83e3      	strh	r3, [r4, #30]
 8017210:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8017214:	8365      	strh	r5, [r4, #26]
 8017216:	bd38      	pop	{r3, r4, r5, pc}

08017218 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 8017218:	428a      	cmp	r2, r1
 801721a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801721e:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
 8017220:	d932      	bls.n	8017288 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
 8017222:	8f05      	ldrh	r5, [r0, #56]	; 0x38
 8017224:	1a54      	subs	r4, r2, r1
 8017226:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
 801722a:	19ee      	adds	r6, r5, r7
 801722c:	fa1f fe84 	uxth.w	lr, r4
 8017230:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	; 0x3e
 8017234:	3e01      	subs	r6, #1
 8017236:	b2b4      	uxth	r4, r6
 8017238:	eba4 090e 	sub.w	r9, r4, lr
 801723c:	fa1f f989 	uxth.w	r9, r9
 8017240:	2c09      	cmp	r4, #9
 8017242:	4626      	mov	r6, r4
 8017244:	bf88      	it	hi
 8017246:	f1a4 060a 	subhi.w	r6, r4, #10
 801724a:	f1bc 0f00 	cmp.w	ip, #0
 801724e:	f104 34ff 	add.w	r4, r4, #4294967295
 8017252:	bf08      	it	eq
 8017254:	f04f 0c02 	moveq.w	ip, #2
 8017258:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801725c:	b2a4      	uxth	r4, r4
 801725e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8017262:	f8b6 a022 	ldrh.w	sl, [r6, #34]	; 0x22
 8017266:	454c      	cmp	r4, r9
 8017268:	fa1f fc8c 	uxth.w	ip, ip
 801726c:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 8017270:	f8a6 a03a 	strh.w	sl, [r6, #58]	; 0x3a
 8017274:	d1e4      	bne.n	8017240 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 8017276:	eba5 050e 	sub.w	r5, r5, lr
 801727a:	eb0e 0408 	add.w	r4, lr, r8
 801727e:	f8a0 c03e 	strh.w	ip, [r0, #62]	; 0x3e
 8017282:	8705      	strh	r5, [r0, #56]	; 0x38
 8017284:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
 8017288:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 801728a:	250a      	movs	r5, #10
 801728c:	1a64      	subs	r4, r4, r1
 801728e:	4439      	add	r1, r7
 8017290:	b289      	uxth	r1, r1
 8017292:	8704      	strh	r4, [r0, #56]	; 0x38
 8017294:	2909      	cmp	r1, #9
 8017296:	bf88      	it	hi
 8017298:	390a      	subhi	r1, #10
 801729a:	86c1      	strh	r1, [r0, #54]	; 0x36
 801729c:	b18a      	cbz	r2, 80172c2 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 801729e:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 80172a0:	3a01      	subs	r2, #1
 80172a2:	3101      	adds	r1, #1
 80172a4:	b292      	uxth	r2, r2
 80172a6:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 80172aa:	8701      	strh	r1, [r0, #56]	; 0x38
 80172ac:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 80172ae:	b901      	cbnz	r1, 80172b2 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
 80172b0:	86c5      	strh	r5, [r0, #54]	; 0x36
 80172b2:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 80172b4:	3901      	subs	r1, #1
 80172b6:	b289      	uxth	r1, r1
 80172b8:	86c1      	strh	r1, [r0, #54]	; 0x36
 80172ba:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 80172be:	844c      	strh	r4, [r1, #34]	; 0x22
 80172c0:	e7ec      	b.n	801729c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
 80172c2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80172c6:	f7ff bf4c 	b.w	8017162 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

080172ca <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 80172ca:	b570      	push	{r4, r5, r6, lr}
 80172cc:	2500      	movs	r5, #0
 80172ce:	4295      	cmp	r5, r2
 80172d0:	d011      	beq.n	80172f6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 80172d2:	8bc4      	ldrh	r4, [r0, #30]
 80172d4:	f831 6b02 	ldrh.w	r6, [r1], #2
 80172d8:	4414      	add	r4, r2
 80172da:	3c01      	subs	r4, #1
 80172dc:	1b64      	subs	r4, r4, r5
 80172de:	b2a4      	uxth	r4, r4
 80172e0:	2c01      	cmp	r4, #1
 80172e2:	bf88      	it	hi
 80172e4:	3c02      	subhi	r4, #2
 80172e6:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 80172ea:	8b64      	ldrh	r4, [r4, #26]
 80172ec:	42b4      	cmp	r4, r6
 80172ee:	d117      	bne.n	8017320 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 80172f0:	3501      	adds	r5, #1
 80172f2:	b2ad      	uxth	r5, r5
 80172f4:	e7eb      	b.n	80172ce <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 80172f6:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 80172fa:	2400      	movs	r4, #0
 80172fc:	4413      	add	r3, r2
 80172fe:	b2a2      	uxth	r2, r4
 8017300:	429a      	cmp	r2, r3
 8017302:	da0f      	bge.n	8017324 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 8017304:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 8017306:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 801730a:	3401      	adds	r4, #1
 801730c:	4432      	add	r2, r6
 801730e:	b292      	uxth	r2, r2
 8017310:	2a09      	cmp	r2, #9
 8017312:	bf88      	it	hi
 8017314:	3a0a      	subhi	r2, #10
 8017316:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801731a:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 801731c:	42aa      	cmp	r2, r5
 801731e:	d0ee      	beq.n	80172fe <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 8017320:	2000      	movs	r0, #0
 8017322:	bd70      	pop	{r4, r5, r6, pc}
 8017324:	2001      	movs	r0, #1
 8017326:	e7fc      	b.n	8017322 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

08017328 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 8017328:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801732c:	4605      	mov	r5, r0
 801732e:	4616      	mov	r6, r2
 8017330:	1c8c      	adds	r4, r1, #2
 8017332:	8809      	ldrh	r1, [r1, #0]
 8017334:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 8017338:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801733c:	42b3      	cmp	r3, r6
 801733e:	d124      	bne.n	801738a <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 8017340:	f3c1 2903 	ubfx	r9, r1, #8, #4
 8017344:	f3c1 1803 	ubfx	r8, r1, #4, #4
 8017348:	f001 070f 	and.w	r7, r1, #15
 801734c:	4652      	mov	r2, sl
 801734e:	f8cd 8000 	str.w	r8, [sp]
 8017352:	464b      	mov	r3, r9
 8017354:	4621      	mov	r1, r4
 8017356:	4628      	mov	r0, r5
 8017358:	f7ff ffb7 	bl	80172ca <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801735c:	4683      	mov	fp, r0
 801735e:	b168      	cbz	r0, 801737c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 8017360:	eb0a 0109 	add.w	r1, sl, r9
 8017364:	463a      	mov	r2, r7
 8017366:	4628      	mov	r0, r5
 8017368:	4441      	add	r1, r8
 801736a:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801736e:	4649      	mov	r1, r9
 8017370:	f7ff ff52 	bl	8017218 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 8017374:	4658      	mov	r0, fp
 8017376:	b003      	add	sp, #12
 8017378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801737c:	eb07 010a 	add.w	r1, r7, sl
 8017380:	4449      	add	r1, r9
 8017382:	4441      	add	r1, r8
 8017384:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8017388:	e7d2      	b.n	8017330 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801738a:	f04f 0b00 	mov.w	fp, #0
 801738e:	e7f1      	b.n	8017374 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

08017390 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 8017390:	b570      	push	{r4, r5, r6, lr}
 8017392:	8810      	ldrh	r0, [r2, #0]
 8017394:	4298      	cmp	r0, r3
 8017396:	d817      	bhi.n	80173c8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8017398:	1e48      	subs	r0, r1, #1
 801739a:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801739e:	4298      	cmp	r0, r3
 80173a0:	d312      	bcc.n	80173c8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 80173a2:	2400      	movs	r4, #0
 80173a4:	428c      	cmp	r4, r1
 80173a6:	d20f      	bcs.n	80173c8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 80173a8:	1860      	adds	r0, r4, r1
 80173aa:	1040      	asrs	r0, r0, #1
 80173ac:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 80173b0:	0085      	lsls	r5, r0, #2
 80173b2:	42b3      	cmp	r3, r6
 80173b4:	d902      	bls.n	80173bc <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 80173b6:	3001      	adds	r0, #1
 80173b8:	b284      	uxth	r4, r0
 80173ba:	e7f3      	b.n	80173a4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 80173bc:	d201      	bcs.n	80173c2 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 80173be:	b281      	uxth	r1, r0
 80173c0:	e7f0      	b.n	80173a4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 80173c2:	442a      	add	r2, r5
 80173c4:	8850      	ldrh	r0, [r2, #2]
 80173c6:	bd70      	pop	{r4, r5, r6, pc}
 80173c8:	2000      	movs	r0, #0
 80173ca:	e7fc      	b.n	80173c6 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

080173cc <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 80173cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80173d0:	6c45      	ldr	r5, [r0, #68]	; 0x44
 80173d2:	4604      	mov	r4, r0
 80173d4:	260b      	movs	r6, #11
 80173d6:	886f      	ldrh	r7, [r5, #2]
 80173d8:	087f      	lsrs	r7, r7, #1
 80173da:	3e01      	subs	r6, #1
 80173dc:	d013      	beq.n	8017406 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 80173de:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80173e0:	462a      	mov	r2, r5
 80173e2:	4639      	mov	r1, r7
 80173e4:	4620      	mov	r0, r4
 80173e6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80173ea:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 80173ee:	4643      	mov	r3, r8
 80173f0:	f7ff ffce 	bl	8017390 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 80173f4:	b138      	cbz	r0, 8017406 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 80173f6:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 80173fa:	4642      	mov	r2, r8
 80173fc:	4620      	mov	r0, r4
 80173fe:	f7ff ff93 	bl	8017328 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 8017402:	2800      	cmp	r0, #0
 8017404:	d1e9      	bne.n	80173da <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 8017406:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0801740c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 801740c:	b570      	push	{r4, r5, r6, lr}
 801740e:	694a      	ldr	r2, [r1, #20]
 8017410:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8017412:	684b      	ldr	r3, [r1, #4]
 8017414:	1b54      	subs	r4, r2, r5
 8017416:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 8017418:	f000 8106 	beq.w	8017628 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 801741c:	1b9b      	subs	r3, r3, r6
 801741e:	d003      	beq.n	8017428 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8017420:	4363      	muls	r3, r4
 8017422:	2210      	movs	r2, #16
 8017424:	fb93 f3f2 	sdiv	r3, r3, r2
 8017428:	680c      	ldr	r4, [r1, #0]
 801742a:	698a      	ldr	r2, [r1, #24]
 801742c:	1b65      	subs	r5, r4, r5
 801742e:	f000 80fd 	beq.w	801762c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 8017432:	1b92      	subs	r2, r2, r6
 8017434:	d003      	beq.n	801743e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8017436:	436a      	muls	r2, r5
 8017438:	2410      	movs	r4, #16
 801743a:	fb92 f2f4 	sdiv	r2, r2, r4
 801743e:	1a9b      	subs	r3, r3, r2
 8017440:	ed9f 4a89 	vldr	s8, [pc, #548]	; 8017668 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 8017444:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8017448:	460a      	mov	r2, r1
 801744a:	ee07 3a90 	vmov	s15, r3
 801744e:	f100 040c 	add.w	r4, r0, #12
 8017452:	4603      	mov	r3, r0
 8017454:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017458:	ee67 7a84 	vmul.f32	s15, s15, s8
 801745c:	ee87 3a27 	vdiv.f32	s6, s14, s15
 8017460:	eeb1 6a43 	vneg.f32	s12, s6
 8017464:	edd2 7a02 	vldr	s15, [r2, #8]
 8017468:	3214      	adds	r2, #20
 801746a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801746e:	ece3 6a01 	vstmia	r3!, {s13}
 8017472:	429c      	cmp	r4, r3
 8017474:	ed52 7a02 	vldr	s15, [r2, #-8]
 8017478:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801747c:	edc3 7a02 	vstr	s15, [r3, #8]
 8017480:	ed52 7a01 	vldr	s15, [r2, #-4]
 8017484:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8017488:	edc3 7a05 	vstr	s15, [r3, #20]
 801748c:	d1ea      	bne.n	8017464 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 801748e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8017490:	698b      	ldr	r3, [r1, #24]
 8017492:	edd0 4a02 	vldr	s9, [r0, #8]
 8017496:	1a9b      	subs	r3, r3, r2
 8017498:	edd0 3a00 	vldr	s7, [r0]
 801749c:	edd0 6a01 	vldr	s13, [r0, #4]
 80174a0:	ee07 3a90 	vmov	s15, r3
 80174a4:	684b      	ldr	r3, [r1, #4]
 80174a6:	ee76 6ae4 	vsub.f32	s13, s13, s9
 80174aa:	ed90 5a05 	vldr	s10, [r0, #20]
 80174ae:	1a9b      	subs	r3, r3, r2
 80174b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80174b4:	ee73 4ae4 	vsub.f32	s9, s7, s9
 80174b8:	ed90 2a03 	vldr	s4, [r0, #12]
 80174bc:	ee07 3a10 	vmov	s14, r3
 80174c0:	edd0 5a04 	vldr	s11, [r0, #16]
 80174c4:	ee67 7a84 	vmul.f32	s15, s15, s8
 80174c8:	ed90 1a07 	vldr	s2, [r0, #28]
 80174cc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80174d0:	edd0 2a06 	vldr	s5, [r0, #24]
 80174d4:	ee75 5ac5 	vsub.f32	s11, s11, s10
 80174d8:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 80174dc:	ee27 7a04 	vmul.f32	s14, s14, s8
 80174e0:	ee32 5a45 	vsub.f32	s10, s4, s10
 80174e4:	eee6 7a87 	vfma.f32	s15, s13, s14
 80174e8:	ee67 7a83 	vmul.f32	s15, s15, s6
 80174ec:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 80174f0:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 80174f2:	694a      	ldr	r2, [r1, #20]
 80174f4:	1b13      	subs	r3, r2, r4
 80174f6:	ee07 3a10 	vmov	s14, r3
 80174fa:	680b      	ldr	r3, [r1, #0]
 80174fc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017500:	1b1b      	subs	r3, r3, r4
 8017502:	ee27 7a04 	vmul.f32	s14, s14, s8
 8017506:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 801750a:	ee07 3a10 	vmov	s14, r3
 801750e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017512:	ee27 7a04 	vmul.f32	s14, s14, s8
 8017516:	eee6 4a87 	vfma.f32	s9, s13, s14
 801751a:	ee64 4a86 	vmul.f32	s9, s9, s12
 801751e:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 8017522:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8017524:	698b      	ldr	r3, [r1, #24]
 8017526:	1a9b      	subs	r3, r3, r2
 8017528:	ee06 3a90 	vmov	s13, r3
 801752c:	684b      	ldr	r3, [r1, #4]
 801752e:	1a9b      	subs	r3, r3, r2
 8017530:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8017534:	ee07 3a10 	vmov	s14, r3
 8017538:	ee66 6a84 	vmul.f32	s13, s13, s8
 801753c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017540:	ee65 6a66 	vnmul.f32	s13, s10, s13
 8017544:	ee27 7a04 	vmul.f32	s14, s14, s8
 8017548:	eee5 6a87 	vfma.f32	s13, s11, s14
 801754c:	ee66 6a83 	vmul.f32	s13, s13, s6
 8017550:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 8017554:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8017556:	694a      	ldr	r2, [r1, #20]
 8017558:	1b13      	subs	r3, r2, r4
 801755a:	ee07 3a10 	vmov	s14, r3
 801755e:	680b      	ldr	r3, [r1, #0]
 8017560:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017564:	1b1b      	subs	r3, r3, r4
 8017566:	ee27 7a04 	vmul.f32	s14, s14, s8
 801756a:	ee25 5a47 	vnmul.f32	s10, s10, s14
 801756e:	ee07 3a10 	vmov	s14, r3
 8017572:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017576:	ee27 7a04 	vmul.f32	s14, s14, s8
 801757a:	eea5 5a87 	vfma.f32	s10, s11, s14
 801757e:	edd0 5a08 	vldr	s11, [r0, #32]
 8017582:	ee31 1a65 	vsub.f32	s2, s2, s11
 8017586:	ee72 5ae5 	vsub.f32	s11, s5, s11
 801758a:	ee25 5a06 	vmul.f32	s10, s10, s12
 801758e:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 8017592:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8017594:	698b      	ldr	r3, [r1, #24]
 8017596:	1a9b      	subs	r3, r3, r2
 8017598:	ee07 3a10 	vmov	s14, r3
 801759c:	684b      	ldr	r3, [r1, #4]
 801759e:	1a9b      	subs	r3, r3, r2
 80175a0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80175a4:	ee01 3a90 	vmov	s3, r3
 80175a8:	ee27 7a04 	vmul.f32	s14, s14, s8
 80175ac:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 80175b0:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 80175b4:	ee61 1a84 	vmul.f32	s3, s3, s8
 80175b8:	eea1 7a21 	vfma.f32	s14, s2, s3
 80175bc:	ee27 7a03 	vmul.f32	s14, s14, s6
 80175c0:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 80175c4:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 80175c6:	694a      	ldr	r2, [r1, #20]
 80175c8:	1b13      	subs	r3, r2, r4
 80175ca:	ee03 3a10 	vmov	s6, r3
 80175ce:	680b      	ldr	r3, [r1, #0]
 80175d0:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 80175d4:	1b1b      	subs	r3, r3, r4
 80175d6:	ee23 3a04 	vmul.f32	s6, s6, s8
 80175da:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 80175de:	ee03 3a10 	vmov	s6, r3
 80175e2:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 80175e6:	ee23 4a04 	vmul.f32	s8, s6, s8
 80175ea:	eee1 5a04 	vfma.f32	s11, s2, s8
 80175ee:	ee25 6a86 	vmul.f32	s12, s11, s12
 80175f2:	ee62 5a67 	vnmul.f32	s11, s4, s15
 80175f6:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 80175fa:	eee3 5aa6 	vfma.f32	s11, s7, s13
 80175fe:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 8017602:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017606:	dd13      	ble.n	8017630 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 8017608:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801760c:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 8017610:	63c3      	str	r3, [r0, #60]	; 0x3c
 8017612:	eee3 7a87 	vfma.f32	s15, s7, s14
 8017616:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801761a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801761e:	dd15      	ble.n	801764c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 8017620:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8017624:	6403      	str	r3, [r0, #64]	; 0x40
 8017626:	bd70      	pop	{r4, r5, r6, pc}
 8017628:	4623      	mov	r3, r4
 801762a:	e6fd      	b.n	8017428 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801762c:	462a      	mov	r2, r5
 801762e:	e706      	b.n	801743e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8017630:	d502      	bpl.n	8017638 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 8017632:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8017636:	e7e9      	b.n	801760c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 8017638:	ee22 2a64 	vnmul.f32	s4, s4, s9
 801763c:	eea3 2a85 	vfma.f32	s4, s7, s10
 8017640:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 8017644:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017648:	dade      	bge.n	8017608 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 801764a:	e7f2      	b.n	8017632 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 801764c:	d502      	bpl.n	8017654 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 801764e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8017652:	e7e7      	b.n	8017624 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 8017654:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 8017658:	eee3 4a86 	vfma.f32	s9, s7, s12
 801765c:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 8017660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017664:	dadc      	bge.n	8017620 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 8017666:	e7f2      	b.n	801764e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 8017668:	3d800000 	.word	0x3d800000

0801766c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 801766c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017670:	2714      	movs	r7, #20
 8017672:	435f      	muls	r7, r3
 8017674:	eb02 0c07 	add.w	ip, r2, r7
 8017678:	f8dc 5004 	ldr.w	r5, [ip, #4]
 801767c:	f115 0e0f 	adds.w	lr, r5, #15
 8017680:	f100 80a2 	bmi.w	80177c8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 8017684:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 8017688:	9c08      	ldr	r4, [sp, #32]
 801768a:	2614      	movs	r6, #20
 801768c:	f8c0 e014 	str.w	lr, [r0, #20]
 8017690:	4366      	muls	r6, r4
 8017692:	eb02 0806 	add.w	r8, r2, r6
 8017696:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801769a:	f115 040f 	adds.w	r4, r5, #15
 801769e:	f100 809f 	bmi.w	80177e0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 80176a2:	1124      	asrs	r4, r4, #4
 80176a4:	eba4 040e 	sub.w	r4, r4, lr
 80176a8:	6184      	str	r4, [r0, #24]
 80176aa:	2c00      	cmp	r4, #0
 80176ac:	f000 808a 	beq.w	80177c4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 80176b0:	f8dc 9004 	ldr.w	r9, [ip, #4]
 80176b4:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80176b8:	5995      	ldr	r5, [r2, r6]
 80176ba:	eba4 0809 	sub.w	r8, r4, r9
 80176be:	59d4      	ldr	r4, [r2, r7]
 80176c0:	eba5 0a04 	sub.w	sl, r5, r4
 80176c4:	ea4f 1608 	mov.w	r6, r8, lsl #4
 80176c8:	ea4f 150a 	mov.w	r5, sl, lsl #4
 80176cc:	fb0e fe05 	mul.w	lr, lr, r5
 80176d0:	fb0a ee19 	mls	lr, sl, r9, lr
 80176d4:	fb08 e404 	mla	r4, r8, r4, lr
 80176d8:	3c01      	subs	r4, #1
 80176da:	19a4      	adds	r4, r4, r6
 80176dc:	f100 808c 	bmi.w	80177f8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 80176e0:	fb94 fef6 	sdiv	lr, r4, r6
 80176e4:	fb06 441e 	mls	r4, r6, lr, r4
 80176e8:	f8c0 e000 	str.w	lr, [r0]
 80176ec:	6104      	str	r4, [r0, #16]
 80176ee:	2d00      	cmp	r5, #0
 80176f0:	f2c0 8095 	blt.w	801781e <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 80176f4:	fb95 f4f6 	sdiv	r4, r5, r6
 80176f8:	fb06 5514 	mls	r5, r6, r4, r5
 80176fc:	6044      	str	r4, [r0, #4]
 80176fe:	6085      	str	r5, [r0, #8]
 8017700:	60c6      	str	r6, [r0, #12]
 8017702:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8017706:	f8dc 4004 	ldr.w	r4, [ip, #4]
 801770a:	6945      	ldr	r5, [r0, #20]
 801770c:	59d2      	ldr	r2, [r2, r7]
 801770e:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 8017712:	eddf 6a4b 	vldr	s13, [pc, #300]	; 8017840 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 8017716:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 801771a:	ee07 4a10 	vmov	s14, r4
 801771e:	6804      	ldr	r4, [r0, #0]
 8017720:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 8017724:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017728:	ee07 2a90 	vmov	s15, r2
 801772c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8017730:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017734:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8017738:	edd3 6a00 	vldr	s13, [r3]
 801773c:	eee6 6a07 	vfma.f32	s13, s12, s14
 8017740:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 8017744:	eee6 6a27 	vfma.f32	s13, s12, s15
 8017748:	edc0 6a07 	vstr	s13, [r0, #28]
 801774c:	edd0 6a01 	vldr	s13, [r0, #4]
 8017750:	edd1 5a09 	vldr	s11, [r1, #36]	; 0x24
 8017754:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8017758:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 801775c:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8017760:	ed80 6a08 	vstr	s12, [r0, #32]
 8017764:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8017766:	6242      	str	r2, [r0, #36]	; 0x24
 8017768:	edd1 5a0c 	vldr	s11, [r1, #48]	; 0x30
 801776c:	ed93 6a03 	vldr	s12, [r3, #12]
 8017770:	eea5 6a87 	vfma.f32	s12, s11, s14
 8017774:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 8017778:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801777c:	ed80 6a0a 	vstr	s12, [r0, #40]	; 0x28
 8017780:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 8017784:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 8017788:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801778c:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
 8017790:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8017792:	6302      	str	r2, [r0, #48]	; 0x30
 8017794:	ed93 6a06 	vldr	s12, [r3, #24]
 8017798:	edd1 5a0e 	vldr	s11, [r1, #56]	; 0x38
 801779c:	eea5 6a87 	vfma.f32	s12, s11, s14
 80177a0:	eeb0 7a46 	vmov.f32	s14, s12
 80177a4:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 80177a8:	eea6 7a27 	vfma.f32	s14, s12, s15
 80177ac:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 80177b0:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 80177b4:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
 80177b8:	eee6 7a87 	vfma.f32	s15, s13, s14
 80177bc:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
 80177c0:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80177c2:	63c3      	str	r3, [r0, #60]	; 0x3c
 80177c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80177c8:	2410      	movs	r4, #16
 80177ca:	f1c5 0501 	rsb	r5, r5, #1
 80177ce:	fb9e fef4 	sdiv	lr, lr, r4
 80177d2:	f015 050f 	ands.w	r5, r5, #15
 80177d6:	bf18      	it	ne
 80177d8:	2501      	movne	r5, #1
 80177da:	ebae 0e05 	sub.w	lr, lr, r5
 80177de:	e753      	b.n	8017688 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 80177e0:	f04f 0910 	mov.w	r9, #16
 80177e4:	f1c5 0501 	rsb	r5, r5, #1
 80177e8:	fb94 f4f9 	sdiv	r4, r4, r9
 80177ec:	f015 050f 	ands.w	r5, r5, #15
 80177f0:	bf18      	it	ne
 80177f2:	2501      	movne	r5, #1
 80177f4:	1b64      	subs	r4, r4, r5
 80177f6:	e755      	b.n	80176a4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 80177f8:	4264      	negs	r4, r4
 80177fa:	fb94 fef6 	sdiv	lr, r4, r6
 80177fe:	f1ce 0800 	rsb	r8, lr, #0
 8017802:	fb06 441e 	mls	r4, r6, lr, r4
 8017806:	f8c0 8000 	str.w	r8, [r0]
 801780a:	6104      	str	r4, [r0, #16]
 801780c:	2c00      	cmp	r4, #0
 801780e:	f43f af6e 	beq.w	80176ee <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 8017812:	ea6f 0e0e 	mvn.w	lr, lr
 8017816:	1b34      	subs	r4, r6, r4
 8017818:	f8c0 e000 	str.w	lr, [r0]
 801781c:	e766      	b.n	80176ec <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 801781e:	426d      	negs	r5, r5
 8017820:	fb95 f4f6 	sdiv	r4, r5, r6
 8017824:	f1c4 0e00 	rsb	lr, r4, #0
 8017828:	fb06 5514 	mls	r5, r6, r4, r5
 801782c:	f8c0 e004 	str.w	lr, [r0, #4]
 8017830:	6085      	str	r5, [r0, #8]
 8017832:	2d00      	cmp	r5, #0
 8017834:	f43f af64 	beq.w	8017700 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 8017838:	43e4      	mvns	r4, r4
 801783a:	1b75      	subs	r5, r6, r5
 801783c:	6044      	str	r4, [r0, #4]
 801783e:	e75e      	b.n	80176fe <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 8017840:	3d800000 	.word	0x3d800000

08017844 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 8017844:	4b01      	ldr	r3, [pc, #4]	; (801784c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 8017846:	6018      	str	r0, [r3, #0]
 8017848:	4770      	bx	lr
 801784a:	bf00      	nop
 801784c:	2002443c 	.word	0x2002443c

08017850 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 8017850:	4b06      	ldr	r3, [pc, #24]	; (801786c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 8017852:	881a      	ldrh	r2, [r3, #0]
 8017854:	4282      	cmp	r2, r0
 8017856:	d807      	bhi.n	8017868 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 8017858:	4b05      	ldr	r3, [pc, #20]	; (8017870 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801785a:	881b      	ldrh	r3, [r3, #0]
 801785c:	4413      	add	r3, r2
 801785e:	4298      	cmp	r0, r3
 8017860:	bfac      	ite	ge
 8017862:	2000      	movge	r0, #0
 8017864:	2001      	movlt	r0, #1
 8017866:	4770      	bx	lr
 8017868:	2000      	movs	r0, #0
 801786a:	4770      	bx	lr
 801786c:	2002445c 	.word	0x2002445c
 8017870:	20024460 	.word	0x20024460

08017874 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 8017874:	b508      	push	{r3, lr}
 8017876:	4601      	mov	r1, r0
 8017878:	f7ff ffea 	bl	8017850 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801787c:	b118      	cbz	r0, 8017886 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801787e:	4b02      	ldr	r3, [pc, #8]	; (8017888 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 8017880:	681b      	ldr	r3, [r3, #0]
 8017882:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8017886:	bd08      	pop	{r3, pc}
 8017888:	20024440 	.word	0x20024440

0801788c <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801788c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801788e:	4c24      	ldr	r4, [pc, #144]	; (8017920 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 8017890:	6823      	ldr	r3, [r4, #0]
 8017892:	2b00      	cmp	r3, #0
 8017894:	d042      	beq.n	801791c <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 8017896:	4a23      	ldr	r2, [pc, #140]	; (8017924 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 8017898:	4d23      	ldr	r5, [pc, #140]	; (8017928 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 801789a:	8811      	ldrh	r1, [r2, #0]
 801789c:	f8b5 c000 	ldrh.w	ip, [r5]
 80178a0:	4822      	ldr	r0, [pc, #136]	; (801792c <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 80178a2:	4461      	add	r1, ip
 80178a4:	1c4a      	adds	r2, r1, #1
 80178a6:	008f      	lsls	r7, r1, #2
 80178a8:	f022 0201 	bic.w	r2, r2, #1
 80178ac:	19de      	adds	r6, r3, r7
 80178ae:	0412      	lsls	r2, r2, #16
 80178b0:	6006      	str	r6, [r0, #0]
 80178b2:	4e1f      	ldr	r6, [pc, #124]	; (8017930 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 80178b4:	0c12      	lsrs	r2, r2, #16
 80178b6:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 80178ba:	19da      	adds	r2, r3, r7
 80178bc:	6032      	str	r2, [r6, #0]
 80178be:	220e      	movs	r2, #14
 80178c0:	fb02 f20c 	mul.w	r2, r2, ip
 80178c4:	3203      	adds	r2, #3
 80178c6:	f022 0203 	bic.w	r2, r2, #3
 80178ca:	443a      	add	r2, r7
 80178cc:	4f19      	ldr	r7, [pc, #100]	; (8017934 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 80178ce:	4413      	add	r3, r2
 80178d0:	603b      	str	r3, [r7, #0]
 80178d2:	2300      	movs	r3, #0
 80178d4:	4f18      	ldr	r7, [pc, #96]	; (8017938 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 80178d6:	469c      	mov	ip, r3
 80178d8:	803b      	strh	r3, [r7, #0]
 80178da:	4f18      	ldr	r7, [pc, #96]	; (801793c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 80178dc:	683f      	ldr	r7, [r7, #0]
 80178de:	1aba      	subs	r2, r7, r2
 80178e0:	4f17      	ldr	r7, [pc, #92]	; (8017940 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 80178e2:	603a      	str	r2, [r7, #0]
 80178e4:	f64f 77ff 	movw	r7, #65535	; 0xffff
 80178e8:	4a16      	ldr	r2, [pc, #88]	; (8017944 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 80178ea:	8013      	strh	r3, [r2, #0]
 80178ec:	428b      	cmp	r3, r1
 80178ee:	d10d      	bne.n	801790c <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 80178f0:	882d      	ldrh	r5, [r5, #0]
 80178f2:	2300      	movs	r3, #0
 80178f4:	6830      	ldr	r0, [r6, #0]
 80178f6:	240e      	movs	r4, #14
 80178f8:	429d      	cmp	r5, r3
 80178fa:	d90f      	bls.n	801791c <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 80178fc:	fb04 0203 	mla	r2, r4, r3, r0
 8017900:	3301      	adds	r3, #1
 8017902:	7b11      	ldrb	r1, [r2, #12]
 8017904:	f36f 1145 	bfc	r1, #5, #1
 8017908:	7311      	strb	r1, [r2, #12]
 801790a:	e7f5      	b.n	80178f8 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 801790c:	6822      	ldr	r2, [r4, #0]
 801790e:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 8017912:	6802      	ldr	r2, [r0, #0]
 8017914:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 8017918:	3301      	adds	r3, #1
 801791a:	e7e7      	b.n	80178ec <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 801791c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801791e:	bf00      	nop
 8017920:	20024440 	.word	0x20024440
 8017924:	2002445c 	.word	0x2002445c
 8017928:	20024460 	.word	0x20024460
 801792c:	20024454 	.word	0x20024454
 8017930:	20024444 	.word	0x20024444
 8017934:	2002444c 	.word	0x2002444c
 8017938:	2002445e 	.word	0x2002445e
 801793c:	20024448 	.word	0x20024448
 8017940:	20024458 	.word	0x20024458
 8017944:	20024450 	.word	0x20024450

08017948 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 8017948:	4b06      	ldr	r3, [pc, #24]	; (8017964 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 801794a:	681b      	ldr	r3, [r3, #0]
 801794c:	b943      	cbnz	r3, 8017960 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801794e:	b139      	cbz	r1, 8017960 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 8017950:	4b05      	ldr	r3, [pc, #20]	; (8017968 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 8017952:	801a      	strh	r2, [r3, #0]
 8017954:	4b05      	ldr	r3, [pc, #20]	; (801796c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 8017956:	6019      	str	r1, [r3, #0]
 8017958:	4b05      	ldr	r3, [pc, #20]	; (8017970 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 801795a:	6018      	str	r0, [r3, #0]
 801795c:	f7ff bf96 	b.w	801788c <_ZN8touchgfx6Bitmap10clearCacheEv>
 8017960:	4770      	bx	lr
 8017962:	bf00      	nop
 8017964:	2002444c 	.word	0x2002444c
 8017968:	20024460 	.word	0x20024460
 801796c:	20024448 	.word	0x20024448
 8017970:	20024440 	.word	0x20024440

08017974 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 8017974:	b470      	push	{r4, r5, r6}
 8017976:	4c07      	ldr	r4, [pc, #28]	; (8017994 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 8017978:	4605      	mov	r5, r0
 801797a:	4610      	mov	r0, r2
 801797c:	9a03      	ldr	r2, [sp, #12]
 801797e:	6826      	ldr	r6, [r4, #0]
 8017980:	b936      	cbnz	r6, 8017990 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 8017982:	6025      	str	r5, [r4, #0]
 8017984:	4c04      	ldr	r4, [pc, #16]	; (8017998 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 8017986:	8021      	strh	r1, [r4, #0]
 8017988:	4619      	mov	r1, r3
 801798a:	bc70      	pop	{r4, r5, r6}
 801798c:	f7ff bfdc 	b.w	8017948 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 8017990:	bc70      	pop	{r4, r5, r6}
 8017992:	4770      	bx	lr
 8017994:	20024464 	.word	0x20024464
 8017998:	2002445c 	.word	0x2002445c

0801799c <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801799c:	4a12      	ldr	r2, [pc, #72]	; (80179e8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 801799e:	8803      	ldrh	r3, [r0, #0]
 80179a0:	8812      	ldrh	r2, [r2, #0]
 80179a2:	4293      	cmp	r3, r2
 80179a4:	d207      	bcs.n	80179b6 <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 80179a6:	4a11      	ldr	r2, [pc, #68]	; (80179ec <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 80179a8:	2114      	movs	r1, #20
 80179aa:	6812      	ldr	r2, [r2, #0]
 80179ac:	fb01 2303 	mla	r3, r1, r3, r2
 80179b0:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 80179b4:	4770      	bx	lr
 80179b6:	490e      	ldr	r1, [pc, #56]	; (80179f0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 80179b8:	8809      	ldrh	r1, [r1, #0]
 80179ba:	4411      	add	r1, r2
 80179bc:	428b      	cmp	r3, r1
 80179be:	da04      	bge.n	80179ca <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 80179c0:	1a9b      	subs	r3, r3, r2
 80179c2:	4a0c      	ldr	r2, [pc, #48]	; (80179f4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 80179c4:	210e      	movs	r1, #14
 80179c6:	6812      	ldr	r2, [r2, #0]
 80179c8:	e7f0      	b.n	80179ac <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 80179ca:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80179ce:	4293      	cmp	r3, r2
 80179d0:	d108      	bne.n	80179e4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 80179d2:	4b09      	ldr	r3, [pc, #36]	; (80179f8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 80179d4:	781b      	ldrb	r3, [r3, #0]
 80179d6:	b91b      	cbnz	r3, 80179e0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 80179d8:	4b08      	ldr	r3, [pc, #32]	; (80179fc <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 80179da:	f9b3 0000 	ldrsh.w	r0, [r3]
 80179de:	4770      	bx	lr
 80179e0:	4b07      	ldr	r3, [pc, #28]	; (8017a00 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 80179e2:	e7fa      	b.n	80179da <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 80179e4:	2000      	movs	r0, #0
 80179e6:	4770      	bx	lr
 80179e8:	2002445c 	.word	0x2002445c
 80179ec:	20024464 	.word	0x20024464
 80179f0:	20024460 	.word	0x20024460
 80179f4:	20024444 	.word	0x20024444
 80179f8:	200243d4 	.word	0x200243d4
 80179fc:	200243d6 	.word	0x200243d6
 8017a00:	200243d8 	.word	0x200243d8

08017a04 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 8017a04:	4a12      	ldr	r2, [pc, #72]	; (8017a50 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 8017a06:	8803      	ldrh	r3, [r0, #0]
 8017a08:	8812      	ldrh	r2, [r2, #0]
 8017a0a:	4293      	cmp	r3, r2
 8017a0c:	d207      	bcs.n	8017a1e <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 8017a0e:	4a11      	ldr	r2, [pc, #68]	; (8017a54 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 8017a10:	2114      	movs	r1, #20
 8017a12:	6812      	ldr	r2, [r2, #0]
 8017a14:	fb01 2303 	mla	r3, r1, r3, r2
 8017a18:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 8017a1c:	4770      	bx	lr
 8017a1e:	490e      	ldr	r1, [pc, #56]	; (8017a58 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 8017a20:	8809      	ldrh	r1, [r1, #0]
 8017a22:	4411      	add	r1, r2
 8017a24:	428b      	cmp	r3, r1
 8017a26:	da04      	bge.n	8017a32 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 8017a28:	1a9b      	subs	r3, r3, r2
 8017a2a:	4a0c      	ldr	r2, [pc, #48]	; (8017a5c <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 8017a2c:	210e      	movs	r1, #14
 8017a2e:	6812      	ldr	r2, [r2, #0]
 8017a30:	e7f0      	b.n	8017a14 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 8017a32:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8017a36:	4293      	cmp	r3, r2
 8017a38:	d108      	bne.n	8017a4c <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 8017a3a:	4b09      	ldr	r3, [pc, #36]	; (8017a60 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 8017a3c:	781b      	ldrb	r3, [r3, #0]
 8017a3e:	b91b      	cbnz	r3, 8017a48 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 8017a40:	4b08      	ldr	r3, [pc, #32]	; (8017a64 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 8017a42:	f9b3 0000 	ldrsh.w	r0, [r3]
 8017a46:	4770      	bx	lr
 8017a48:	4b07      	ldr	r3, [pc, #28]	; (8017a68 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 8017a4a:	e7fa      	b.n	8017a42 <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 8017a4c:	2000      	movs	r0, #0
 8017a4e:	4770      	bx	lr
 8017a50:	2002445c 	.word	0x2002445c
 8017a54:	20024464 	.word	0x20024464
 8017a58:	20024460 	.word	0x20024460
 8017a5c:	20024444 	.word	0x20024444
 8017a60:	200243d4 	.word	0x200243d4
 8017a64:	200243d8 	.word	0x200243d8
 8017a68:	200243d6 	.word	0x200243d6

08017a6c <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 8017a6c:	4a1f      	ldr	r2, [pc, #124]	; (8017aec <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>)
 8017a6e:	b510      	push	{r4, lr}
 8017a70:	880b      	ldrh	r3, [r1, #0]
 8017a72:	8812      	ldrh	r2, [r2, #0]
 8017a74:	4293      	cmp	r3, r2
 8017a76:	d213      	bcs.n	8017aa0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 8017a78:	4a1d      	ldr	r2, [pc, #116]	; (8017af0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>)
 8017a7a:	2114      	movs	r1, #20
 8017a7c:	6812      	ldr	r2, [r2, #0]
 8017a7e:	fb01 2303 	mla	r3, r1, r3, r2
 8017a82:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 8017a86:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8017a8a:	8a1a      	ldrh	r2, [r3, #16]
 8017a8c:	8a5b      	ldrh	r3, [r3, #18]
 8017a8e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8017a92:	8004      	strh	r4, [r0, #0]
 8017a94:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017a98:	8041      	strh	r1, [r0, #2]
 8017a9a:	8082      	strh	r2, [r0, #4]
 8017a9c:	80c3      	strh	r3, [r0, #6]
 8017a9e:	e00e      	b.n	8017abe <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 8017aa0:	4914      	ldr	r1, [pc, #80]	; (8017af4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x88>)
 8017aa2:	8809      	ldrh	r1, [r1, #0]
 8017aa4:	4411      	add	r1, r2
 8017aa6:	428b      	cmp	r3, r1
 8017aa8:	da0a      	bge.n	8017ac0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x54>
 8017aaa:	1a9b      	subs	r3, r3, r2
 8017aac:	4a12      	ldr	r2, [pc, #72]	; (8017af8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 8017aae:	210e      	movs	r1, #14
 8017ab0:	6812      	ldr	r2, [r2, #0]
 8017ab2:	fb01 2303 	mla	r3, r1, r3, r2
 8017ab6:	681a      	ldr	r2, [r3, #0]
 8017ab8:	6002      	str	r2, [r0, #0]
 8017aba:	685a      	ldr	r2, [r3, #4]
 8017abc:	6042      	str	r2, [r0, #4]
 8017abe:	bd10      	pop	{r4, pc}
 8017ac0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8017ac4:	4293      	cmp	r3, r2
 8017ac6:	d10b      	bne.n	8017ae0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x74>
 8017ac8:	4b0c      	ldr	r3, [pc, #48]	; (8017afc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 8017aca:	f9b3 1000 	ldrsh.w	r1, [r3]
 8017ace:	4b0c      	ldr	r3, [pc, #48]	; (8017b00 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 8017ad0:	8081      	strh	r1, [r0, #4]
 8017ad2:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017ad6:	2300      	movs	r3, #0
 8017ad8:	80c2      	strh	r2, [r0, #6]
 8017ada:	8003      	strh	r3, [r0, #0]
 8017adc:	8043      	strh	r3, [r0, #2]
 8017ade:	e7ee      	b.n	8017abe <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 8017ae0:	2300      	movs	r3, #0
 8017ae2:	8003      	strh	r3, [r0, #0]
 8017ae4:	8043      	strh	r3, [r0, #2]
 8017ae6:	8083      	strh	r3, [r0, #4]
 8017ae8:	e7d8      	b.n	8017a9c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 8017aea:	bf00      	nop
 8017aec:	2002445c 	.word	0x2002445c
 8017af0:	20024464 	.word	0x20024464
 8017af4:	20024460 	.word	0x20024460
 8017af8:	20024444 	.word	0x20024444
 8017afc:	200243d0 	.word	0x200243d0
 8017b00:	200243d2 	.word	0x200243d2

08017b04 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 8017b04:	4a17      	ldr	r2, [pc, #92]	; (8017b64 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
 8017b06:	8803      	ldrh	r3, [r0, #0]
 8017b08:	8812      	ldrh	r2, [r2, #0]
 8017b0a:	4293      	cmp	r3, r2
 8017b0c:	d213      	bcs.n	8017b36 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x32>
 8017b0e:	4a16      	ldr	r2, [pc, #88]	; (8017b68 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 8017b10:	2114      	movs	r1, #20
 8017b12:	6812      	ldr	r2, [r2, #0]
 8017b14:	fb01 2303 	mla	r3, r1, r3, r2
 8017b18:	8a1a      	ldrh	r2, [r3, #16]
 8017b1a:	8919      	ldrh	r1, [r3, #8]
 8017b1c:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8017b20:	428a      	cmp	r2, r1
 8017b22:	db1d      	blt.n	8017b60 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 8017b24:	8a58      	ldrh	r0, [r3, #18]
 8017b26:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8017b2a:	895b      	ldrh	r3, [r3, #10]
 8017b2c:	4298      	cmp	r0, r3
 8017b2e:	bfac      	ite	ge
 8017b30:	2000      	movge	r0, #0
 8017b32:	2001      	movlt	r0, #1
 8017b34:	4770      	bx	lr
 8017b36:	490d      	ldr	r1, [pc, #52]	; (8017b6c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 8017b38:	8809      	ldrh	r1, [r1, #0]
 8017b3a:	4411      	add	r1, r2
 8017b3c:	428b      	cmp	r3, r1
 8017b3e:	da0d      	bge.n	8017b5c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 8017b40:	1a9b      	subs	r3, r3, r2
 8017b42:	4a0b      	ldr	r2, [pc, #44]	; (8017b70 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 8017b44:	210e      	movs	r1, #14
 8017b46:	6812      	ldr	r2, [r2, #0]
 8017b48:	fb01 2303 	mla	r3, r1, r3, r2
 8017b4c:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8017b50:	891a      	ldrh	r2, [r3, #8]
 8017b52:	4291      	cmp	r1, r2
 8017b54:	db04      	blt.n	8017b60 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 8017b56:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 8017b5a:	e7e6      	b.n	8017b2a <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x26>
 8017b5c:	2000      	movs	r0, #0
 8017b5e:	4770      	bx	lr
 8017b60:	2001      	movs	r0, #1
 8017b62:	4770      	bx	lr
 8017b64:	2002445c 	.word	0x2002445c
 8017b68:	20024464 	.word	0x20024464
 8017b6c:	20024460 	.word	0x20024460
 8017b70:	20024444 	.word	0x20024444

08017b74 <_ZNK8touchgfx6Bitmap7getDataEv>:
 8017b74:	4a12      	ldr	r2, [pc, #72]	; (8017bc0 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 8017b76:	8803      	ldrh	r3, [r0, #0]
 8017b78:	8811      	ldrh	r1, [r2, #0]
 8017b7a:	428b      	cmp	r3, r1
 8017b7c:	d20b      	bcs.n	8017b96 <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 8017b7e:	4a11      	ldr	r2, [pc, #68]	; (8017bc4 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8017b80:	6812      	ldr	r2, [r2, #0]
 8017b82:	b112      	cbz	r2, 8017b8a <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 8017b84:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8017b88:	b9c0      	cbnz	r0, 8017bbc <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 8017b8a:	4a0f      	ldr	r2, [pc, #60]	; (8017bc8 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 8017b8c:	6811      	ldr	r1, [r2, #0]
 8017b8e:	2214      	movs	r2, #20
 8017b90:	4353      	muls	r3, r2
 8017b92:	58c8      	ldr	r0, [r1, r3]
 8017b94:	4770      	bx	lr
 8017b96:	4a0d      	ldr	r2, [pc, #52]	; (8017bcc <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 8017b98:	8812      	ldrh	r2, [r2, #0]
 8017b9a:	440a      	add	r2, r1
 8017b9c:	4293      	cmp	r3, r2
 8017b9e:	da04      	bge.n	8017baa <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 8017ba0:	4a08      	ldr	r2, [pc, #32]	; (8017bc4 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8017ba2:	6812      	ldr	r2, [r2, #0]
 8017ba4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8017ba8:	4770      	bx	lr
 8017baa:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8017bae:	4293      	cmp	r3, r2
 8017bb0:	d103      	bne.n	8017bba <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 8017bb2:	4b07      	ldr	r3, [pc, #28]	; (8017bd0 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 8017bb4:	681b      	ldr	r3, [r3, #0]
 8017bb6:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8017bb8:	4770      	bx	lr
 8017bba:	2000      	movs	r0, #0
 8017bbc:	4770      	bx	lr
 8017bbe:	bf00      	nop
 8017bc0:	2002445c 	.word	0x2002445c
 8017bc4:	20024440 	.word	0x20024440
 8017bc8:	20024464 	.word	0x20024464
 8017bcc:	20024460 	.word	0x20024460
 8017bd0:	200243dc 	.word	0x200243dc

08017bd4 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 8017bd4:	4b24      	ldr	r3, [pc, #144]	; (8017c68 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 8017bd6:	8802      	ldrh	r2, [r0, #0]
 8017bd8:	8818      	ldrh	r0, [r3, #0]
 8017bda:	4282      	cmp	r2, r0
 8017bdc:	d221      	bcs.n	8017c22 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 8017bde:	4b23      	ldr	r3, [pc, #140]	; (8017c6c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 8017be0:	6819      	ldr	r1, [r3, #0]
 8017be2:	2314      	movs	r3, #20
 8017be4:	fb03 1302 	mla	r3, r3, r2, r1
 8017be8:	6858      	ldr	r0, [r3, #4]
 8017bea:	2800      	cmp	r0, #0
 8017bec:	d03a      	beq.n	8017c64 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8017bee:	4920      	ldr	r1, [pc, #128]	; (8017c70 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8017bf0:	6809      	ldr	r1, [r1, #0]
 8017bf2:	2900      	cmp	r1, #0
 8017bf4:	d036      	beq.n	8017c64 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8017bf6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8017bfa:	2900      	cmp	r1, #0
 8017bfc:	d032      	beq.n	8017c64 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8017bfe:	891a      	ldrh	r2, [r3, #8]
 8017c00:	8958      	ldrh	r0, [r3, #10]
 8017c02:	4350      	muls	r0, r2
 8017c04:	7c5a      	ldrb	r2, [r3, #17]
 8017c06:	7cdb      	ldrb	r3, [r3, #19]
 8017c08:	0952      	lsrs	r2, r2, #5
 8017c0a:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8017c0e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8017c12:	2b0b      	cmp	r3, #11
 8017c14:	bf18      	it	ne
 8017c16:	0040      	lslne	r0, r0, #1
 8017c18:	3003      	adds	r0, #3
 8017c1a:	f020 0003 	bic.w	r0, r0, #3
 8017c1e:	4408      	add	r0, r1
 8017c20:	4770      	bx	lr
 8017c22:	4b14      	ldr	r3, [pc, #80]	; (8017c74 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 8017c24:	881b      	ldrh	r3, [r3, #0]
 8017c26:	4403      	add	r3, r0
 8017c28:	429a      	cmp	r2, r3
 8017c2a:	da1a      	bge.n	8017c62 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8017c2c:	4b12      	ldr	r3, [pc, #72]	; (8017c78 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 8017c2e:	1a10      	subs	r0, r2, r0
 8017c30:	210e      	movs	r1, #14
 8017c32:	681b      	ldr	r3, [r3, #0]
 8017c34:	fb01 3000 	mla	r0, r1, r0, r3
 8017c38:	7b03      	ldrb	r3, [r0, #12]
 8017c3a:	f003 031f 	and.w	r3, r3, #31
 8017c3e:	2b0b      	cmp	r3, #11
 8017c40:	d10b      	bne.n	8017c5a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 8017c42:	8903      	ldrh	r3, [r0, #8]
 8017c44:	8940      	ldrh	r0, [r0, #10]
 8017c46:	4358      	muls	r0, r3
 8017c48:	4b09      	ldr	r3, [pc, #36]	; (8017c70 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8017c4a:	3003      	adds	r0, #3
 8017c4c:	6819      	ldr	r1, [r3, #0]
 8017c4e:	f020 0303 	bic.w	r3, r0, #3
 8017c52:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8017c56:	4418      	add	r0, r3
 8017c58:	4770      	bx	lr
 8017c5a:	2b0d      	cmp	r3, #13
 8017c5c:	d101      	bne.n	8017c62 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8017c5e:	300d      	adds	r0, #13
 8017c60:	4770      	bx	lr
 8017c62:	2000      	movs	r0, #0
 8017c64:	4770      	bx	lr
 8017c66:	bf00      	nop
 8017c68:	2002445c 	.word	0x2002445c
 8017c6c:	20024464 	.word	0x20024464
 8017c70:	20024440 	.word	0x20024440
 8017c74:	20024460 	.word	0x20024460
 8017c78:	20024444 	.word	0x20024444

08017c7c <_ZNK8touchgfx6Bitmap9getFormatEv>:
 8017c7c:	4a17      	ldr	r2, [pc, #92]	; (8017cdc <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 8017c7e:	b510      	push	{r4, lr}
 8017c80:	8803      	ldrh	r3, [r0, #0]
 8017c82:	8812      	ldrh	r2, [r2, #0]
 8017c84:	4293      	cmp	r3, r2
 8017c86:	d20c      	bcs.n	8017ca2 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 8017c88:	4a15      	ldr	r2, [pc, #84]	; (8017ce0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 8017c8a:	2114      	movs	r1, #20
 8017c8c:	6812      	ldr	r2, [r2, #0]
 8017c8e:	fb01 2303 	mla	r3, r1, r3, r2
 8017c92:	7c58      	ldrb	r0, [r3, #17]
 8017c94:	0942      	lsrs	r2, r0, #5
 8017c96:	7cd8      	ldrb	r0, [r3, #19]
 8017c98:	f3c0 1042 	ubfx	r0, r0, #5, #3
 8017c9c:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 8017ca0:	bd10      	pop	{r4, pc}
 8017ca2:	4910      	ldr	r1, [pc, #64]	; (8017ce4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 8017ca4:	8809      	ldrh	r1, [r1, #0]
 8017ca6:	4411      	add	r1, r2
 8017ca8:	428b      	cmp	r3, r1
 8017caa:	da09      	bge.n	8017cc0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 8017cac:	1a9b      	subs	r3, r3, r2
 8017cae:	4a0e      	ldr	r2, [pc, #56]	; (8017ce8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 8017cb0:	210e      	movs	r1, #14
 8017cb2:	6812      	ldr	r2, [r2, #0]
 8017cb4:	fb01 2303 	mla	r3, r1, r3, r2
 8017cb8:	7b18      	ldrb	r0, [r3, #12]
 8017cba:	f000 001f 	and.w	r0, r0, #31
 8017cbe:	e7ef      	b.n	8017ca0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 8017cc0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8017cc4:	4293      	cmp	r3, r2
 8017cc6:	d106      	bne.n	8017cd6 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 8017cc8:	f7f4 faae 	bl	800c228 <_ZN8touchgfx3HAL3lcdEv>
 8017ccc:	6803      	ldr	r3, [r0, #0]
 8017cce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017cd4:	4718      	bx	r3
 8017cd6:	2000      	movs	r0, #0
 8017cd8:	e7e2      	b.n	8017ca0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 8017cda:	bf00      	nop
 8017cdc:	2002445c 	.word	0x2002445c
 8017ce0:	20024464 	.word	0x20024464
 8017ce4:	20024460 	.word	0x20024460
 8017ce8:	20024444 	.word	0x20024444

08017cec <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 8017cec:	2010      	movs	r0, #16
 8017cee:	4770      	bx	lr

08017cf0 <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 8017cf0:	2000      	movs	r0, #0
 8017cf2:	4770      	bx	lr

08017cf4 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 8017cf4:	4b02      	ldr	r3, [pc, #8]	; (8017d00 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0xc>)
 8017cf6:	8818      	ldrh	r0, [r3, #0]
 8017cf8:	0040      	lsls	r0, r0, #1
 8017cfa:	b280      	uxth	r0, r0
 8017cfc:	4770      	bx	lr
 8017cfe:	bf00      	nop
 8017d00:	200243d6 	.word	0x200243d6

08017d04 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8017d04:	2bff      	cmp	r3, #255	; 0xff
 8017d06:	d050      	beq.n	8017daa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 8017d08:	2a0b      	cmp	r2, #11
 8017d0a:	d04a      	beq.n	8017da2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 8017d0c:	d80e      	bhi.n	8017d2c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 8017d0e:	2a03      	cmp	r2, #3
 8017d10:	d03f      	beq.n	8017d92 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 8017d12:	d804      	bhi.n	8017d1e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8017d14:	2a01      	cmp	r2, #1
 8017d16:	d03e      	beq.n	8017d96 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 8017d18:	d93f      	bls.n	8017d9a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 8017d1a:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8017d1c:	4770      	bx	lr
 8017d1e:	2a09      	cmp	r2, #9
 8017d20:	d03f      	beq.n	8017da2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 8017d22:	d83c      	bhi.n	8017d9e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 8017d24:	2a08      	cmp	r2, #8
 8017d26:	d03a      	beq.n	8017d9e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 8017d28:	2000      	movs	r0, #0
 8017d2a:	4770      	bx	lr
 8017d2c:	2a2f      	cmp	r2, #47	; 0x2f
 8017d2e:	d024      	beq.n	8017d7a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 8017d30:	d80d      	bhi.n	8017d4e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 8017d32:	2a2d      	cmp	r2, #45	; 0x2d
 8017d34:	d014      	beq.n	8017d60 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5c>
 8017d36:	d826      	bhi.n	8017d86 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 8017d38:	2a2c      	cmp	r2, #44	; 0x2c
 8017d3a:	d1f5      	bne.n	8017d28 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8017d3c:	684b      	ldr	r3, [r1, #4]
 8017d3e:	781b      	ldrb	r3, [r3, #0]
 8017d40:	2b01      	cmp	r3, #1
 8017d42:	d018      	beq.n	8017d76 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 8017d44:	d323      	bcc.n	8017d8e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 8017d46:	2b02      	cmp	r3, #2
 8017d48:	d1ee      	bne.n	8017d28 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8017d4a:	6880      	ldr	r0, [r0, #8]
 8017d4c:	4770      	bx	lr
 8017d4e:	2a31      	cmp	r2, #49	; 0x31
 8017d50:	d004      	beq.n	8017d5c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x58>
 8017d52:	d328      	bcc.n	8017da6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 8017d54:	2a32      	cmp	r2, #50	; 0x32
 8017d56:	d026      	beq.n	8017da6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 8017d58:	2a33      	cmp	r2, #51	; 0x33
 8017d5a:	d1e5      	bne.n	8017d28 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8017d5c:	6f00      	ldr	r0, [r0, #112]	; 0x70
 8017d5e:	4770      	bx	lr
 8017d60:	684b      	ldr	r3, [r1, #4]
 8017d62:	781b      	ldrb	r3, [r3, #0]
 8017d64:	2b01      	cmp	r3, #1
 8017d66:	d004      	beq.n	8017d72 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8017d68:	d30b      	bcc.n	8017d82 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8017d6a:	2b02      	cmp	r3, #2
 8017d6c:	d1dc      	bne.n	8017d28 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8017d6e:	6900      	ldr	r0, [r0, #16]
 8017d70:	4770      	bx	lr
 8017d72:	6a00      	ldr	r0, [r0, #32]
 8017d74:	4770      	bx	lr
 8017d76:	6980      	ldr	r0, [r0, #24]
 8017d78:	4770      	bx	lr
 8017d7a:	684b      	ldr	r3, [r1, #4]
 8017d7c:	781b      	ldrb	r3, [r3, #0]
 8017d7e:	2b00      	cmp	r3, #0
 8017d80:	d1d2      	bne.n	8017d28 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8017d82:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8017d84:	4770      	bx	lr
 8017d86:	684b      	ldr	r3, [r1, #4]
 8017d88:	781b      	ldrb	r3, [r3, #0]
 8017d8a:	2b00      	cmp	r3, #0
 8017d8c:	d1cc      	bne.n	8017d28 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8017d8e:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8017d90:	4770      	bx	lr
 8017d92:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8017d94:	4770      	bx	lr
 8017d96:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8017d98:	4770      	bx	lr
 8017d9a:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8017d9c:	4770      	bx	lr
 8017d9e:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8017da0:	4770      	bx	lr
 8017da2:	6e00      	ldr	r0, [r0, #96]	; 0x60
 8017da4:	4770      	bx	lr
 8017da6:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8017da8:	4770      	bx	lr
 8017daa:	2a0b      	cmp	r2, #11
 8017dac:	d049      	beq.n	8017e42 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 8017dae:	d80e      	bhi.n	8017dce <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xca>
 8017db0:	2a03      	cmp	r2, #3
 8017db2:	d040      	beq.n	8017e36 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 8017db4:	d804      	bhi.n	8017dc0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbc>
 8017db6:	2a01      	cmp	r2, #1
 8017db8:	d03f      	beq.n	8017e3a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 8017dba:	d940      	bls.n	8017e3e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 8017dbc:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8017dbe:	4770      	bx	lr
 8017dc0:	2a09      	cmp	r2, #9
 8017dc2:	d03e      	beq.n	8017e42 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 8017dc4:	d801      	bhi.n	8017dca <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc6>
 8017dc6:	2a08      	cmp	r2, #8
 8017dc8:	d1ae      	bne.n	8017d28 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8017dca:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 8017dcc:	4770      	bx	lr
 8017dce:	2a2f      	cmp	r2, #47	; 0x2f
 8017dd0:	d024      	beq.n	8017e1c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 8017dd2:	d80d      	bhi.n	8017df0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 8017dd4:	2a2d      	cmp	r2, #45	; 0x2d
 8017dd6:	d014      	beq.n	8017e02 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfe>
 8017dd8:	d826      	bhi.n	8017e28 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x124>
 8017dda:	2a2c      	cmp	r2, #44	; 0x2c
 8017ddc:	d1a4      	bne.n	8017d28 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8017dde:	684b      	ldr	r3, [r1, #4]
 8017de0:	781b      	ldrb	r3, [r3, #0]
 8017de2:	2b01      	cmp	r3, #1
 8017de4:	d018      	beq.n	8017e18 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x114>
 8017de6:	d324      	bcc.n	8017e32 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 8017de8:	2b02      	cmp	r3, #2
 8017dea:	d19d      	bne.n	8017d28 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8017dec:	68c0      	ldr	r0, [r0, #12]
 8017dee:	4770      	bx	lr
 8017df0:	2a31      	cmp	r2, #49	; 0x31
 8017df2:	d004      	beq.n	8017dfe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfa>
 8017df4:	d327      	bcc.n	8017e46 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 8017df6:	2a32      	cmp	r2, #50	; 0x32
 8017df8:	d025      	beq.n	8017e46 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 8017dfa:	2a33      	cmp	r2, #51	; 0x33
 8017dfc:	d194      	bne.n	8017d28 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8017dfe:	6f40      	ldr	r0, [r0, #116]	; 0x74
 8017e00:	4770      	bx	lr
 8017e02:	684b      	ldr	r3, [r1, #4]
 8017e04:	781b      	ldrb	r3, [r3, #0]
 8017e06:	2b01      	cmp	r3, #1
 8017e08:	d004      	beq.n	8017e14 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 8017e0a:	d30b      	bcc.n	8017e24 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x120>
 8017e0c:	2b02      	cmp	r3, #2
 8017e0e:	d18b      	bne.n	8017d28 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8017e10:	6940      	ldr	r0, [r0, #20]
 8017e12:	4770      	bx	lr
 8017e14:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8017e16:	4770      	bx	lr
 8017e18:	69c0      	ldr	r0, [r0, #28]
 8017e1a:	4770      	bx	lr
 8017e1c:	684b      	ldr	r3, [r1, #4]
 8017e1e:	781b      	ldrb	r3, [r3, #0]
 8017e20:	2b00      	cmp	r3, #0
 8017e22:	d181      	bne.n	8017d28 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8017e24:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8017e26:	4770      	bx	lr
 8017e28:	684b      	ldr	r3, [r1, #4]
 8017e2a:	781b      	ldrb	r3, [r3, #0]
 8017e2c:	2b00      	cmp	r3, #0
 8017e2e:	f47f af7b 	bne.w	8017d28 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8017e32:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8017e34:	4770      	bx	lr
 8017e36:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8017e38:	4770      	bx	lr
 8017e3a:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8017e3c:	4770      	bx	lr
 8017e3e:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8017e40:	4770      	bx	lr
 8017e42:	6e40      	ldr	r0, [r0, #100]	; 0x64
 8017e44:	4770      	bx	lr
 8017e46:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 8017e48:	4770      	bx	lr

08017e4a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8017e4a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017e4e:	b087      	sub	sp, #28
 8017e50:	9815      	ldr	r0, [sp, #84]	; 0x54
 8017e52:	9205      	str	r2, [sp, #20]
 8017e54:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8017e58:	9101      	str	r1, [sp, #4]
 8017e5a:	9202      	str	r2, [sp, #8]
 8017e5c:	6841      	ldr	r1, [r0, #4]
 8017e5e:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 8017e62:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 8017e66:	fb01 2404 	mla	r4, r1, r4, r2
 8017e6a:	6802      	ldr	r2, [r0, #0]
 8017e6c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8017e70:	f8de 2000 	ldr.w	r2, [lr]
 8017e74:	9203      	str	r2, [sp, #12]
 8017e76:	f8de 2004 	ldr.w	r2, [lr, #4]
 8017e7a:	3204      	adds	r2, #4
 8017e7c:	9204      	str	r2, [sp, #16]
 8017e7e:	9a02      	ldr	r2, [sp, #8]
 8017e80:	43d6      	mvns	r6, r2
 8017e82:	b2f6      	uxtb	r6, r6
 8017e84:	9a01      	ldr	r2, [sp, #4]
 8017e86:	2a00      	cmp	r2, #0
 8017e88:	dc03      	bgt.n	8017e92 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8017e8a:	9a05      	ldr	r2, [sp, #20]
 8017e8c:	2a00      	cmp	r2, #0
 8017e8e:	f340 8129 	ble.w	80180e4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8017e92:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8017e94:	f9be c008 	ldrsh.w	ip, [lr, #8]
 8017e98:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8017e9c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017e9e:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 8017ea2:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8017ea6:	2b00      	cmp	r3, #0
 8017ea8:	dd0e      	ble.n	8017ec8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8017eaa:	1408      	asrs	r0, r1, #16
 8017eac:	d405      	bmi.n	8017eba <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8017eae:	4560      	cmp	r0, ip
 8017eb0:	da03      	bge.n	8017eba <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8017eb2:	1410      	asrs	r0, r2, #16
 8017eb4:	d401      	bmi.n	8017eba <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8017eb6:	42b8      	cmp	r0, r7
 8017eb8:	db07      	blt.n	8017eca <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8017eba:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8017ebc:	3b01      	subs	r3, #1
 8017ebe:	3402      	adds	r4, #2
 8017ec0:	4401      	add	r1, r0
 8017ec2:	9814      	ldr	r0, [sp, #80]	; 0x50
 8017ec4:	4402      	add	r2, r0
 8017ec6:	e7ee      	b.n	8017ea6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8017ec8:	d071      	beq.n	8017fae <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8017eca:	1e58      	subs	r0, r3, #1
 8017ecc:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8017ece:	fb05 1500 	mla	r5, r5, r0, r1
 8017ed2:	142d      	asrs	r5, r5, #16
 8017ed4:	d45f      	bmi.n	8017f96 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8017ed6:	4565      	cmp	r5, ip
 8017ed8:	da5d      	bge.n	8017f96 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8017eda:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8017edc:	fb05 2000 	mla	r0, r5, r0, r2
 8017ee0:	1400      	asrs	r0, r0, #16
 8017ee2:	d458      	bmi.n	8017f96 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8017ee4:	42b8      	cmp	r0, r7
 8017ee6:	da56      	bge.n	8017f96 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8017ee8:	4699      	mov	r9, r3
 8017eea:	46a2      	mov	sl, r4
 8017eec:	f8bd b008 	ldrh.w	fp, [sp, #8]
 8017ef0:	f1b9 0f00 	cmp.w	r9, #0
 8017ef4:	dd57      	ble.n	8017fa6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 8017ef6:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8017efa:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 8017efe:	9803      	ldr	r0, [sp, #12]
 8017f00:	140d      	asrs	r5, r1, #16
 8017f02:	f109 39ff 	add.w	r9, r9, #4294967295
 8017f06:	fb07 000c 	mla	r0, r7, ip, r0
 8017f0a:	5d40      	ldrb	r0, [r0, r5]
 8017f0c:	9d04      	ldr	r5, [sp, #16]
 8017f0e:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 8017f12:	f8ba 5000 	ldrh.w	r5, [sl]
 8017f16:	ea4f 2c20 	mov.w	ip, r0, asr #8
 8017f1a:	122f      	asrs	r7, r5, #8
 8017f1c:	ea4f 08e5 	mov.w	r8, r5, asr #3
 8017f20:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8017f24:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8017f28:	00ed      	lsls	r5, r5, #3
 8017f2a:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 8017f2e:	fb17 f706 	smulbb	r7, r7, r6
 8017f32:	b2ed      	uxtb	r5, r5
 8017f34:	fb18 f806 	smulbb	r8, r8, r6
 8017f38:	fb0c 7c0b 	mla	ip, ip, fp, r7
 8017f3c:	10c7      	asrs	r7, r0, #3
 8017f3e:	fb15 f506 	smulbb	r5, r5, r6
 8017f42:	00c0      	lsls	r0, r0, #3
 8017f44:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8017f48:	fa1f fc8c 	uxth.w	ip, ip
 8017f4c:	b2c0      	uxtb	r0, r0
 8017f4e:	fb07 870b 	mla	r7, r7, fp, r8
 8017f52:	fb00 500b 	mla	r0, r0, fp, r5
 8017f56:	f10c 0501 	add.w	r5, ip, #1
 8017f5a:	b2bf      	uxth	r7, r7
 8017f5c:	b280      	uxth	r0, r0
 8017f5e:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8017f62:	f107 0801 	add.w	r8, r7, #1
 8017f66:	1c45      	adds	r5, r0, #1
 8017f68:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 8017f6c:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8017f70:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 8017f74:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8017f76:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8017f7a:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8017f7e:	4401      	add	r1, r0
 8017f80:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8017f84:	9814      	ldr	r0, [sp, #80]	; 0x50
 8017f86:	ea45 0c0c 	orr.w	ip, r5, ip
 8017f8a:	4402      	add	r2, r0
 8017f8c:	ea4c 0c08 	orr.w	ip, ip, r8
 8017f90:	f82a cb02 	strh.w	ip, [sl], #2
 8017f94:	e7ac      	b.n	8017ef0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8017f96:	f04f 0800 	mov.w	r8, #0
 8017f9a:	f8bd a008 	ldrh.w	sl, [sp, #8]
 8017f9e:	eb03 0008 	add.w	r0, r3, r8
 8017fa2:	2800      	cmp	r0, #0
 8017fa4:	dc41      	bgt.n	801802a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 8017fa6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017faa:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8017fae:	9b01      	ldr	r3, [sp, #4]
 8017fb0:	2b00      	cmp	r3, #0
 8017fb2:	f340 8097 	ble.w	80180e4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8017fb6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8017fba:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017fbc:	ee30 0a04 	vadd.f32	s0, s0, s8
 8017fc0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8017fc4:	eef0 6a62 	vmov.f32	s13, s5
 8017fc8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8017fcc:	ee31 1a05 	vadd.f32	s2, s2, s10
 8017fd0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8017fd4:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 8017fd8:	eef0 6a43 	vmov.f32	s13, s6
 8017fdc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8017fe0:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 8017fe4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8017fe8:	ee61 7a27 	vmul.f32	s15, s2, s15
 8017fec:	ee77 2a62 	vsub.f32	s5, s14, s5
 8017ff0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8017ff4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8017ff8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8017ffc:	ee12 2a90 	vmov	r2, s5
 8018000:	eef0 2a47 	vmov.f32	s5, s14
 8018004:	fb92 f3f3 	sdiv	r3, r2, r3
 8018008:	ee13 2a10 	vmov	r2, s6
 801800c:	9313      	str	r3, [sp, #76]	; 0x4c
 801800e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018010:	eeb0 3a67 	vmov.f32	s6, s15
 8018014:	fb92 f3f3 	sdiv	r3, r2, r3
 8018018:	9314      	str	r3, [sp, #80]	; 0x50
 801801a:	9b01      	ldr	r3, [sp, #4]
 801801c:	9a05      	ldr	r2, [sp, #20]
 801801e:	3b01      	subs	r3, #1
 8018020:	9301      	str	r3, [sp, #4]
 8018022:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018024:	bf08      	it	eq
 8018026:	4613      	moveq	r3, r2
 8018028:	e72c      	b.n	8017e84 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801802a:	140f      	asrs	r7, r1, #16
 801802c:	d453      	bmi.n	80180d6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801802e:	f8de 5008 	ldr.w	r5, [lr, #8]
 8018032:	42bd      	cmp	r5, r7
 8018034:	dd4f      	ble.n	80180d6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8018036:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801803a:	d44c      	bmi.n	80180d6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801803c:	f8de 000c 	ldr.w	r0, [lr, #12]
 8018040:	4560      	cmp	r0, ip
 8018042:	dd48      	ble.n	80180d6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8018044:	9803      	ldr	r0, [sp, #12]
 8018046:	b22d      	sxth	r5, r5
 8018048:	fb0c 0505 	mla	r5, ip, r5, r0
 801804c:	5de8      	ldrb	r0, [r5, r7]
 801804e:	9d04      	ldr	r5, [sp, #16]
 8018050:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 8018054:	f06f 0501 	mvn.w	r5, #1
 8018058:	fb05 fb08 	mul.w	fp, r5, r8
 801805c:	ea4f 2c20 	mov.w	ip, r0, asr #8
 8018060:	f834 500b 	ldrh.w	r5, [r4, fp]
 8018064:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8018068:	122f      	asrs	r7, r5, #8
 801806a:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801806e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8018072:	00ed      	lsls	r5, r5, #3
 8018074:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8018078:	fb17 f706 	smulbb	r7, r7, r6
 801807c:	b2ed      	uxtb	r5, r5
 801807e:	fb19 f906 	smulbb	r9, r9, r6
 8018082:	fb0c 7c0a 	mla	ip, ip, sl, r7
 8018086:	10c7      	asrs	r7, r0, #3
 8018088:	fb15 f506 	smulbb	r5, r5, r6
 801808c:	00c0      	lsls	r0, r0, #3
 801808e:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8018092:	fa1f fc8c 	uxth.w	ip, ip
 8018096:	b2c0      	uxtb	r0, r0
 8018098:	fb07 970a 	mla	r7, r7, sl, r9
 801809c:	fb00 500a 	mla	r0, r0, sl, r5
 80180a0:	f10c 0501 	add.w	r5, ip, #1
 80180a4:	b2bf      	uxth	r7, r7
 80180a6:	b280      	uxth	r0, r0
 80180a8:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 80180ac:	f107 0901 	add.w	r9, r7, #1
 80180b0:	1c45      	adds	r5, r0, #1
 80180b2:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 80180b6:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80180ba:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 80180be:	ea4f 1959 	mov.w	r9, r9, lsr #5
 80180c2:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 80180c6:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80180ca:	ea45 0c0c 	orr.w	ip, r5, ip
 80180ce:	ea4c 0c09 	orr.w	ip, ip, r9
 80180d2:	f824 c00b 	strh.w	ip, [r4, fp]
 80180d6:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80180d8:	f108 38ff 	add.w	r8, r8, #4294967295
 80180dc:	4401      	add	r1, r0
 80180de:	9814      	ldr	r0, [sp, #80]	; 0x50
 80180e0:	4402      	add	r2, r0
 80180e2:	e75c      	b.n	8017f9e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 80180e4:	b007      	add	sp, #28
 80180e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080180ea <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80180ea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80180ee:	b085      	sub	sp, #20
 80180f0:	4693      	mov	fp, r2
 80180f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80180f6:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 80180f8:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80180fa:	6870      	ldr	r0, [r6, #4]
 80180fc:	9100      	str	r1, [sp, #0]
 80180fe:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8018102:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 8018106:	fb00 2404 	mla	r4, r0, r4, r2
 801810a:	6832      	ldr	r2, [r6, #0]
 801810c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8018110:	682a      	ldr	r2, [r5, #0]
 8018112:	9201      	str	r2, [sp, #4]
 8018114:	686a      	ldr	r2, [r5, #4]
 8018116:	3204      	adds	r2, #4
 8018118:	9202      	str	r2, [sp, #8]
 801811a:	9a00      	ldr	r2, [sp, #0]
 801811c:	2a00      	cmp	r2, #0
 801811e:	dc03      	bgt.n	8018128 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8018120:	f1bb 0f00 	cmp.w	fp, #0
 8018124:	f340 80a0 	ble.w	8018268 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 8018128:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801812a:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801812e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8018132:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8018134:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 8018138:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801813c:	2b00      	cmp	r3, #0
 801813e:	dd0c      	ble.n	801815a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8018140:	1406      	asrs	r6, r0, #16
 8018142:	d405      	bmi.n	8018150 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8018144:	454e      	cmp	r6, r9
 8018146:	da03      	bge.n	8018150 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8018148:	1416      	asrs	r6, r2, #16
 801814a:	d401      	bmi.n	8018150 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801814c:	4546      	cmp	r6, r8
 801814e:	db05      	blt.n	801815c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8018150:	4470      	add	r0, lr
 8018152:	4462      	add	r2, ip
 8018154:	3b01      	subs	r3, #1
 8018156:	3402      	adds	r4, #2
 8018158:	e7f0      	b.n	801813c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801815a:	d00f      	beq.n	801817c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801815c:	1e5e      	subs	r6, r3, #1
 801815e:	fb0e 0706 	mla	r7, lr, r6, r0
 8018162:	143f      	asrs	r7, r7, #16
 8018164:	d541      	bpl.n	80181ea <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
 8018166:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 801816a:	4698      	mov	r8, r3
 801816c:	9603      	str	r6, [sp, #12]
 801816e:	f1b8 0f00 	cmp.w	r8, #0
 8018172:	dc59      	bgt.n	8018228 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8018174:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018178:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801817c:	9b00      	ldr	r3, [sp, #0]
 801817e:	2b00      	cmp	r3, #0
 8018180:	dd72      	ble.n	8018268 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 8018182:	ee30 0a04 	vadd.f32	s0, s0, s8
 8018186:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018188:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801818c:	eeb0 6a62 	vmov.f32	s12, s5
 8018190:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8018194:	ee31 1a05 	vadd.f32	s2, s2, s10
 8018198:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801819c:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 80181a0:	eeb0 6a43 	vmov.f32	s12, s6
 80181a4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80181a8:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 80181ac:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80181b0:	ee61 7a27 	vmul.f32	s15, s2, s15
 80181b4:	ee77 2a62 	vsub.f32	s5, s14, s5
 80181b8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80181bc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80181c0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80181c4:	ee12 2a90 	vmov	r2, s5
 80181c8:	eef0 2a47 	vmov.f32	s5, s14
 80181cc:	fb92 fef3 	sdiv	lr, r2, r3
 80181d0:	ee13 2a10 	vmov	r2, s6
 80181d4:	eeb0 3a67 	vmov.f32	s6, s15
 80181d8:	fb92 fcf3 	sdiv	ip, r2, r3
 80181dc:	9b00      	ldr	r3, [sp, #0]
 80181de:	3b01      	subs	r3, #1
 80181e0:	9300      	str	r3, [sp, #0]
 80181e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80181e4:	bf08      	it	eq
 80181e6:	465b      	moveq	r3, fp
 80181e8:	e797      	b.n	801811a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 80181ea:	454f      	cmp	r7, r9
 80181ec:	dabb      	bge.n	8018166 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80181ee:	fb0c 2606 	mla	r6, ip, r6, r2
 80181f2:	1436      	asrs	r6, r6, #16
 80181f4:	d4b7      	bmi.n	8018166 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80181f6:	4546      	cmp	r6, r8
 80181f8:	dab5      	bge.n	8018166 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80181fa:	461e      	mov	r6, r3
 80181fc:	46a0      	mov	r8, r4
 80181fe:	2e00      	cmp	r6, #0
 8018200:	ddb8      	ble.n	8018174 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8018202:	1417      	asrs	r7, r2, #16
 8018204:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 8018208:	9901      	ldr	r1, [sp, #4]
 801820a:	ea4f 4920 	mov.w	r9, r0, asr #16
 801820e:	4462      	add	r2, ip
 8018210:	4470      	add	r0, lr
 8018212:	fb0a 1707 	mla	r7, sl, r7, r1
 8018216:	9902      	ldr	r1, [sp, #8]
 8018218:	3e01      	subs	r6, #1
 801821a:	f817 7009 	ldrb.w	r7, [r7, r9]
 801821e:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 8018222:	f828 7b02 	strh.w	r7, [r8], #2
 8018226:	e7ea      	b.n	80181fe <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 8018228:	ea5f 4920 	movs.w	r9, r0, asr #16
 801822c:	d417      	bmi.n	801825e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801822e:	68ae      	ldr	r6, [r5, #8]
 8018230:	454e      	cmp	r6, r9
 8018232:	dd14      	ble.n	801825e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 8018234:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8018238:	d411      	bmi.n	801825e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801823a:	68ef      	ldr	r7, [r5, #12]
 801823c:	4557      	cmp	r7, sl
 801823e:	dd0e      	ble.n	801825e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 8018240:	9f01      	ldr	r7, [sp, #4]
 8018242:	b236      	sxth	r6, r6
 8018244:	f06f 0101 	mvn.w	r1, #1
 8018248:	fb0a 7606 	mla	r6, sl, r6, r7
 801824c:	9f02      	ldr	r7, [sp, #8]
 801824e:	f816 6009 	ldrb.w	r6, [r6, r9]
 8018252:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 8018256:	fb01 f608 	mul.w	r6, r1, r8
 801825a:	9903      	ldr	r1, [sp, #12]
 801825c:	538f      	strh	r7, [r1, r6]
 801825e:	4470      	add	r0, lr
 8018260:	4462      	add	r2, ip
 8018262:	f108 38ff 	add.w	r8, r8, #4294967295
 8018266:	e782      	b.n	801816e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8018268:	b005      	add	sp, #20
 801826a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801826e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801826e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018272:	b087      	sub	sp, #28
 8018274:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8018276:	9205      	str	r2, [sp, #20]
 8018278:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801827c:	9102      	str	r1, [sp, #8]
 801827e:	9203      	str	r2, [sp, #12]
 8018280:	6861      	ldr	r1, [r4, #4]
 8018282:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 8018286:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 801828a:	fb01 2000 	mla	r0, r1, r0, r2
 801828e:	6822      	ldr	r2, [r4, #0]
 8018290:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8018294:	9200      	str	r2, [sp, #0]
 8018296:	f8dc 2000 	ldr.w	r2, [ip]
 801829a:	9204      	str	r2, [sp, #16]
 801829c:	f8dc 2004 	ldr.w	r2, [ip, #4]
 80182a0:	3204      	adds	r2, #4
 80182a2:	9201      	str	r2, [sp, #4]
 80182a4:	9a03      	ldr	r2, [sp, #12]
 80182a6:	43d5      	mvns	r5, r2
 80182a8:	b2ed      	uxtb	r5, r5
 80182aa:	9a02      	ldr	r2, [sp, #8]
 80182ac:	2a00      	cmp	r2, #0
 80182ae:	dc03      	bgt.n	80182b8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 80182b0:	9a05      	ldr	r2, [sp, #20]
 80182b2:	2a00      	cmp	r2, #0
 80182b4:	f340 812c 	ble.w	8018510 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 80182b8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80182ba:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 80182be:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 80182c2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80182c4:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 80182c8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80182cc:	2b00      	cmp	r3, #0
 80182ce:	dd10      	ble.n	80182f2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80182d0:	140c      	asrs	r4, r1, #16
 80182d2:	d405      	bmi.n	80182e0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80182d4:	4574      	cmp	r4, lr
 80182d6:	da03      	bge.n	80182e0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80182d8:	1414      	asrs	r4, r2, #16
 80182da:	d401      	bmi.n	80182e0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80182dc:	42bc      	cmp	r4, r7
 80182de:	db09      	blt.n	80182f4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 80182e0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80182e2:	3b01      	subs	r3, #1
 80182e4:	9800      	ldr	r0, [sp, #0]
 80182e6:	4421      	add	r1, r4
 80182e8:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80182ea:	3002      	adds	r0, #2
 80182ec:	4422      	add	r2, r4
 80182ee:	9000      	str	r0, [sp, #0]
 80182f0:	e7ec      	b.n	80182cc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 80182f2:	d071      	beq.n	80183d8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 80182f4:	1e5c      	subs	r4, r3, #1
 80182f6:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 80182f8:	fb06 1604 	mla	r6, r6, r4, r1
 80182fc:	1436      	asrs	r6, r6, #16
 80182fe:	d45d      	bmi.n	80183bc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8018300:	4576      	cmp	r6, lr
 8018302:	da5b      	bge.n	80183bc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8018304:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8018306:	fb06 2404 	mla	r4, r6, r4, r2
 801830a:	1424      	asrs	r4, r4, #16
 801830c:	d456      	bmi.n	80183bc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801830e:	42bc      	cmp	r4, r7
 8018310:	da54      	bge.n	80183bc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8018312:	4698      	mov	r8, r3
 8018314:	f8dd 9000 	ldr.w	r9, [sp]
 8018318:	f8bd a00c 	ldrh.w	sl, [sp, #12]
 801831c:	f1b8 0f00 	cmp.w	r8, #0
 8018320:	dd54      	ble.n	80183cc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 8018322:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 8018326:	1414      	asrs	r4, r2, #16
 8018328:	9804      	ldr	r0, [sp, #16]
 801832a:	140e      	asrs	r6, r1, #16
 801832c:	f108 38ff 	add.w	r8, r8, #4294967295
 8018330:	fb07 0404 	mla	r4, r7, r4, r0
 8018334:	9801      	ldr	r0, [sp, #4]
 8018336:	f814 e006 	ldrb.w	lr, [r4, r6]
 801833a:	f8b9 4000 	ldrh.w	r4, [r9]
 801833e:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8018342:	1227      	asrs	r7, r4, #8
 8018344:	eb00 0b0e 	add.w	fp, r0, lr
 8018348:	f810 e00e 	ldrb.w	lr, [r0, lr]
 801834c:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8018350:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8018352:	f89b 6002 	ldrb.w	r6, [fp, #2]
 8018356:	f89b b001 	ldrb.w	fp, [fp, #1]
 801835a:	4401      	add	r1, r0
 801835c:	fb16 f60a 	smulbb	r6, r6, sl
 8018360:	9814      	ldr	r0, [sp, #80]	; 0x50
 8018362:	fb1b fb0a 	smulbb	fp, fp, sl
 8018366:	fb07 6705 	mla	r7, r7, r5, r6
 801836a:	10e6      	asrs	r6, r4, #3
 801836c:	00e4      	lsls	r4, r4, #3
 801836e:	4402      	add	r2, r0
 8018370:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8018374:	b2bf      	uxth	r7, r7
 8018376:	b2e4      	uxtb	r4, r4
 8018378:	fb06 b605 	mla	r6, r6, r5, fp
 801837c:	fb14 f405 	smulbb	r4, r4, r5
 8018380:	b2b6      	uxth	r6, r6
 8018382:	fb0e 4e0a 	mla	lr, lr, sl, r4
 8018386:	1c7c      	adds	r4, r7, #1
 8018388:	f106 0b01 	add.w	fp, r6, #1
 801838c:	fa1f fe8e 	uxth.w	lr, lr
 8018390:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 8018394:	f10e 0401 	add.w	r4, lr, #1
 8018398:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801839c:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 80183a0:	eb04 241e 	add.w	r4, r4, lr, lsr #8
 80183a4:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 80183a8:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 80183ac:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 80183b0:	4327      	orrs	r7, r4
 80183b2:	ea47 070b 	orr.w	r7, r7, fp
 80183b6:	f829 7b02 	strh.w	r7, [r9], #2
 80183ba:	e7af      	b.n	801831c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 80183bc:	f04f 0e00 	mov.w	lr, #0
 80183c0:	f8bd 900c 	ldrh.w	r9, [sp, #12]
 80183c4:	eb03 040e 	add.w	r4, r3, lr
 80183c8:	2c00      	cmp	r4, #0
 80183ca:	dc43      	bgt.n	8018454 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 80183cc:	9a00      	ldr	r2, [sp, #0]
 80183ce:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80183d2:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80183d6:	9300      	str	r3, [sp, #0]
 80183d8:	9b02      	ldr	r3, [sp, #8]
 80183da:	2b00      	cmp	r3, #0
 80183dc:	f340 8098 	ble.w	8018510 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 80183e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80183e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80183e6:	ee30 0a04 	vadd.f32	s0, s0, s8
 80183ea:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80183ee:	eef0 6a62 	vmov.f32	s13, s5
 80183f2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80183f6:	ee31 1a05 	vadd.f32	s2, s2, s10
 80183fa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80183fe:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 8018402:	eef0 6a43 	vmov.f32	s13, s6
 8018406:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801840a:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 801840e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8018412:	ee61 7a27 	vmul.f32	s15, s2, s15
 8018416:	ee77 2a62 	vsub.f32	s5, s14, s5
 801841a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801841e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8018422:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8018426:	ee12 2a90 	vmov	r2, s5
 801842a:	eef0 2a47 	vmov.f32	s5, s14
 801842e:	fb92 f3f3 	sdiv	r3, r2, r3
 8018432:	ee13 2a10 	vmov	r2, s6
 8018436:	9313      	str	r3, [sp, #76]	; 0x4c
 8018438:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801843a:	eeb0 3a67 	vmov.f32	s6, s15
 801843e:	fb92 f3f3 	sdiv	r3, r2, r3
 8018442:	9314      	str	r3, [sp, #80]	; 0x50
 8018444:	9b02      	ldr	r3, [sp, #8]
 8018446:	9a05      	ldr	r2, [sp, #20]
 8018448:	3b01      	subs	r3, #1
 801844a:	9302      	str	r3, [sp, #8]
 801844c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801844e:	bf08      	it	eq
 8018450:	4613      	moveq	r3, r2
 8018452:	e72a      	b.n	80182aa <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8018454:	140f      	asrs	r7, r1, #16
 8018456:	d454      	bmi.n	8018502 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 8018458:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801845c:	42be      	cmp	r6, r7
 801845e:	dd50      	ble.n	8018502 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 8018460:	ea5f 4822 	movs.w	r8, r2, asr #16
 8018464:	d44d      	bmi.n	8018502 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 8018466:	f8dc 400c 	ldr.w	r4, [ip, #12]
 801846a:	4544      	cmp	r4, r8
 801846c:	dd49      	ble.n	8018502 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801846e:	9c04      	ldr	r4, [sp, #16]
 8018470:	b236      	sxth	r6, r6
 8018472:	f06f 0001 	mvn.w	r0, #1
 8018476:	fb08 4606 	mla	r6, r8, r6, r4
 801847a:	9c01      	ldr	r4, [sp, #4]
 801847c:	fb00 fa0e 	mul.w	sl, r0, lr
 8018480:	9800      	ldr	r0, [sp, #0]
 8018482:	f816 8007 	ldrb.w	r8, [r6, r7]
 8018486:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801848a:	eb04 0b08 	add.w	fp, r4, r8
 801848e:	f830 400a 	ldrh.w	r4, [r0, sl]
 8018492:	9801      	ldr	r0, [sp, #4]
 8018494:	f89b 6002 	ldrb.w	r6, [fp, #2]
 8018498:	1227      	asrs	r7, r4, #8
 801849a:	f89b b001 	ldrb.w	fp, [fp, #1]
 801849e:	fb16 f609 	smulbb	r6, r6, r9
 80184a2:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80184a6:	f810 8008 	ldrb.w	r8, [r0, r8]
 80184aa:	fb1b fb09 	smulbb	fp, fp, r9
 80184ae:	fb07 6705 	mla	r7, r7, r5, r6
 80184b2:	10e6      	asrs	r6, r4, #3
 80184b4:	00e4      	lsls	r4, r4, #3
 80184b6:	9800      	ldr	r0, [sp, #0]
 80184b8:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80184bc:	b2bf      	uxth	r7, r7
 80184be:	b2e4      	uxtb	r4, r4
 80184c0:	fb06 b605 	mla	r6, r6, r5, fp
 80184c4:	fb14 f405 	smulbb	r4, r4, r5
 80184c8:	b2b6      	uxth	r6, r6
 80184ca:	fb08 4809 	mla	r8, r8, r9, r4
 80184ce:	1c7c      	adds	r4, r7, #1
 80184d0:	f106 0b01 	add.w	fp, r6, #1
 80184d4:	fa1f f888 	uxth.w	r8, r8
 80184d8:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 80184dc:	f108 0401 	add.w	r4, r8, #1
 80184e0:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 80184e4:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 80184e8:	eb04 2418 	add.w	r4, r4, r8, lsr #8
 80184ec:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 80184f0:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 80184f4:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 80184f8:	4327      	orrs	r7, r4
 80184fa:	ea47 070b 	orr.w	r7, r7, fp
 80184fe:	f820 700a 	strh.w	r7, [r0, sl]
 8018502:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8018504:	f10e 3eff 	add.w	lr, lr, #4294967295
 8018508:	4401      	add	r1, r0
 801850a:	9814      	ldr	r0, [sp, #80]	; 0x50
 801850c:	4402      	add	r2, r0
 801850e:	e759      	b.n	80183c4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8018510:	b007      	add	sp, #28
 8018512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08018518 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8018518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801851c:	b085      	sub	sp, #20
 801851e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8018522:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8018524:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8018526:	9203      	str	r2, [sp, #12]
 8018528:	6870      	ldr	r0, [r6, #4]
 801852a:	686f      	ldr	r7, [r5, #4]
 801852c:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
 8018530:	3704      	adds	r7, #4
 8018532:	9101      	str	r1, [sp, #4]
 8018534:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8018538:	fb00 2404 	mla	r4, r0, r4, r2
 801853c:	6832      	ldr	r2, [r6, #0]
 801853e:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8018542:	682a      	ldr	r2, [r5, #0]
 8018544:	9202      	str	r2, [sp, #8]
 8018546:	9a01      	ldr	r2, [sp, #4]
 8018548:	2a00      	cmp	r2, #0
 801854a:	dc03      	bgt.n	8018554 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801854c:	9a03      	ldr	r2, [sp, #12]
 801854e:	2a00      	cmp	r2, #0
 8018550:	f340 80cc 	ble.w	80186ec <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8018554:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018556:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801855a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801855e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8018560:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 8018564:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8018568:	2b00      	cmp	r3, #0
 801856a:	dd0d      	ble.n	8018588 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801856c:	1406      	asrs	r6, r0, #16
 801856e:	d405      	bmi.n	801857c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8018570:	454e      	cmp	r6, r9
 8018572:	da03      	bge.n	801857c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8018574:	1416      	asrs	r6, r2, #16
 8018576:	d401      	bmi.n	801857c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8018578:	4546      	cmp	r6, r8
 801857a:	db06      	blt.n	801858a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801857c:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801857e:	4460      	add	r0, ip
 8018580:	3b01      	subs	r3, #1
 8018582:	3402      	adds	r4, #2
 8018584:	4432      	add	r2, r6
 8018586:	e7ef      	b.n	8018568 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8018588:	d00f      	beq.n	80185aa <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801858a:	1e5e      	subs	r6, r3, #1
 801858c:	fb0c 0e06 	mla	lr, ip, r6, r0
 8018590:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 8018594:	d543      	bpl.n	801861e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 8018596:	4698      	mov	r8, r3
 8018598:	eb04 0a43 	add.w	sl, r4, r3, lsl #1
 801859c:	f1b8 0f00 	cmp.w	r8, #0
 80185a0:	dc71      	bgt.n	8018686 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 80185a2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80185a6:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80185aa:	9b01      	ldr	r3, [sp, #4]
 80185ac:	2b00      	cmp	r3, #0
 80185ae:	f340 809d 	ble.w	80186ec <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 80185b2:	ee30 0a04 	vadd.f32	s0, s0, s8
 80185b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80185b8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80185bc:	eeb0 6a62 	vmov.f32	s12, s5
 80185c0:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80185c4:	ee31 1a05 	vadd.f32	s2, s2, s10
 80185c8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80185cc:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 80185d0:	eeb0 6a43 	vmov.f32	s12, s6
 80185d4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80185d8:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 80185dc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80185e0:	ee61 7a27 	vmul.f32	s15, s2, s15
 80185e4:	ee77 2a62 	vsub.f32	s5, s14, s5
 80185e8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80185ec:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80185f0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80185f4:	ee12 2a90 	vmov	r2, s5
 80185f8:	eef0 2a47 	vmov.f32	s5, s14
 80185fc:	fb92 fcf3 	sdiv	ip, r2, r3
 8018600:	ee13 2a10 	vmov	r2, s6
 8018604:	eeb0 3a67 	vmov.f32	s6, s15
 8018608:	fb92 f3f3 	sdiv	r3, r2, r3
 801860c:	9312      	str	r3, [sp, #72]	; 0x48
 801860e:	9b01      	ldr	r3, [sp, #4]
 8018610:	9a03      	ldr	r2, [sp, #12]
 8018612:	3b01      	subs	r3, #1
 8018614:	9301      	str	r3, [sp, #4]
 8018616:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018618:	bf08      	it	eq
 801861a:	4613      	moveq	r3, r2
 801861c:	e793      	b.n	8018546 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801861e:	45ce      	cmp	lr, r9
 8018620:	dab9      	bge.n	8018596 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8018622:	9912      	ldr	r1, [sp, #72]	; 0x48
 8018624:	fb01 2606 	mla	r6, r1, r6, r2
 8018628:	1436      	asrs	r6, r6, #16
 801862a:	d4b4      	bmi.n	8018596 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801862c:	4546      	cmp	r6, r8
 801862e:	dab2      	bge.n	8018596 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8018630:	4698      	mov	r8, r3
 8018632:	46a2      	mov	sl, r4
 8018634:	f1b8 0f00 	cmp.w	r8, #0
 8018638:	ddb3      	ble.n	80185a2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801863a:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801863e:	1416      	asrs	r6, r2, #16
 8018640:	9902      	ldr	r1, [sp, #8]
 8018642:	ea4f 4e20 	mov.w	lr, r0, asr #16
 8018646:	f108 38ff 	add.w	r8, r8, #4294967295
 801864a:	4460      	add	r0, ip
 801864c:	fb09 1606 	mla	r6, r9, r6, r1
 8018650:	4928      	ldr	r1, [pc, #160]	; (80186f4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>)
 8018652:	f816 e00e 	ldrb.w	lr, [r6, lr]
 8018656:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801865a:	eb07 0b0e 	add.w	fp, r7, lr
 801865e:	f89b 6001 	ldrb.w	r6, [fp, #1]
 8018662:	f89b 9002 	ldrb.w	r9, [fp, #2]
 8018666:	00f6      	lsls	r6, r6, #3
 8018668:	ea01 2909 	and.w	r9, r1, r9, lsl #8
 801866c:	9912      	ldr	r1, [sp, #72]	; 0x48
 801866e:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8018672:	440a      	add	r2, r1
 8018674:	ea49 0606 	orr.w	r6, r9, r6
 8018678:	f817 900e 	ldrb.w	r9, [r7, lr]
 801867c:	ea46 06d9 	orr.w	r6, r6, r9, lsr #3
 8018680:	f82a 6b02 	strh.w	r6, [sl], #2
 8018684:	e7d6      	b.n	8018634 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8018686:	ea5f 4920 	movs.w	r9, r0, asr #16
 801868a:	d429      	bmi.n	80186e0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801868c:	68ae      	ldr	r6, [r5, #8]
 801868e:	454e      	cmp	r6, r9
 8018690:	dd26      	ble.n	80186e0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8018692:	ea5f 4b22 	movs.w	fp, r2, asr #16
 8018696:	d423      	bmi.n	80186e0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8018698:	68e9      	ldr	r1, [r5, #12]
 801869a:	4559      	cmp	r1, fp
 801869c:	dd20      	ble.n	80186e0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801869e:	fa0f fe86 	sxth.w	lr, r6
 80186a2:	9902      	ldr	r1, [sp, #8]
 80186a4:	fb0b 1e0e 	mla	lr, fp, lr, r1
 80186a8:	f06f 0101 	mvn.w	r1, #1
 80186ac:	f81e e009 	ldrb.w	lr, [lr, r9]
 80186b0:	fb01 f908 	mul.w	r9, r1, r8
 80186b4:	f2a1 71fe 	subw	r1, r1, #2046	; 0x7fe
 80186b8:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80186bc:	eb07 060e 	add.w	r6, r7, lr
 80186c0:	f896 b002 	ldrb.w	fp, [r6, #2]
 80186c4:	7876      	ldrb	r6, [r6, #1]
 80186c6:	ea01 2b0b 	and.w	fp, r1, fp, lsl #8
 80186ca:	00f6      	lsls	r6, r6, #3
 80186cc:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 80186d0:	ea4b 0606 	orr.w	r6, fp, r6
 80186d4:	f817 b00e 	ldrb.w	fp, [r7, lr]
 80186d8:	ea46 06db 	orr.w	r6, r6, fp, lsr #3
 80186dc:	f82a 6009 	strh.w	r6, [sl, r9]
 80186e0:	9912      	ldr	r1, [sp, #72]	; 0x48
 80186e2:	4460      	add	r0, ip
 80186e4:	f108 38ff 	add.w	r8, r8, #4294967295
 80186e8:	440a      	add	r2, r1
 80186ea:	e757      	b.n	801859c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80186ec:	b005      	add	sp, #20
 80186ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80186f2:	bf00      	nop
 80186f4:	fffff800 	.word	0xfffff800

080186f8 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80186f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80186fc:	b087      	sub	sp, #28
 80186fe:	468b      	mov	fp, r1
 8018700:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8018704:	9815      	ldr	r0, [sp, #84]	; 0x54
 8018706:	9204      	str	r2, [sp, #16]
 8018708:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801870c:	6841      	ldr	r1, [r0, #4]
 801870e:	9205      	str	r2, [sp, #20]
 8018710:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 8018714:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 8018718:	fb01 2404 	mla	r4, r1, r4, r2
 801871c:	6802      	ldr	r2, [r0, #0]
 801871e:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8018722:	f8dc 2000 	ldr.w	r2, [ip]
 8018726:	9201      	str	r2, [sp, #4]
 8018728:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801872c:	3204      	adds	r2, #4
 801872e:	9202      	str	r2, [sp, #8]
 8018730:	f1bb 0f00 	cmp.w	fp, #0
 8018734:	dc03      	bgt.n	801873e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 8018736:	9a04      	ldr	r2, [sp, #16]
 8018738:	2a00      	cmp	r2, #0
 801873a:	f340 8138 	ble.w	80189ae <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801873e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8018740:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 8018744:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8018748:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801874a:	f9bc 600c 	ldrsh.w	r6, [ip, #12]
 801874e:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8018752:	2b00      	cmp	r3, #0
 8018754:	dd0e      	ble.n	8018774 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8018756:	1402      	asrs	r2, r0, #16
 8018758:	d405      	bmi.n	8018766 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801875a:	42ba      	cmp	r2, r7
 801875c:	da03      	bge.n	8018766 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801875e:	140a      	asrs	r2, r1, #16
 8018760:	d401      	bmi.n	8018766 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8018762:	42b2      	cmp	r2, r6
 8018764:	db07      	blt.n	8018776 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8018766:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8018768:	3b01      	subs	r3, #1
 801876a:	3402      	adds	r4, #2
 801876c:	4410      	add	r0, r2
 801876e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018770:	4411      	add	r1, r2
 8018772:	e7ee      	b.n	8018752 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8018774:	d019      	beq.n	80187aa <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8018776:	1e5a      	subs	r2, r3, #1
 8018778:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801877a:	fb05 0502 	mla	r5, r5, r2, r0
 801877e:	142d      	asrs	r5, r5, #16
 8018780:	d409      	bmi.n	8018796 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8018782:	42bd      	cmp	r5, r7
 8018784:	da07      	bge.n	8018796 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8018786:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8018788:	fb05 1202 	mla	r2, r5, r2, r1
 801878c:	1412      	asrs	r2, r2, #16
 801878e:	d402      	bmi.n	8018796 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8018790:	42b2      	cmp	r2, r6
 8018792:	f2c0 80ac 	blt.w	80188ee <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 8018796:	f04f 0e00 	mov.w	lr, #0
 801879a:	eb03 020e 	add.w	r2, r3, lr
 801879e:	2a00      	cmp	r2, #0
 80187a0:	dc3e      	bgt.n	8018820 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 80187a2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80187a6:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80187aa:	f1bb 0f00 	cmp.w	fp, #0
 80187ae:	f340 80fe 	ble.w	80189ae <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 80187b2:	ee30 0a04 	vadd.f32	s0, s0, s8
 80187b6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80187b8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80187bc:	f1bb 0b01 	subs.w	fp, fp, #1
 80187c0:	eeb0 6a62 	vmov.f32	s12, s5
 80187c4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80187c8:	ee31 1a05 	vadd.f32	s2, s2, s10
 80187cc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80187d0:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 80187d4:	eeb0 6a43 	vmov.f32	s12, s6
 80187d8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80187dc:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 80187e0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80187e4:	ee61 7a27 	vmul.f32	s15, s2, s15
 80187e8:	ee77 2a62 	vsub.f32	s5, s14, s5
 80187ec:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80187f0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80187f4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80187f8:	ee12 2a90 	vmov	r2, s5
 80187fc:	eef0 2a47 	vmov.f32	s5, s14
 8018800:	fb92 f3f3 	sdiv	r3, r2, r3
 8018804:	ee13 2a10 	vmov	r2, s6
 8018808:	9313      	str	r3, [sp, #76]	; 0x4c
 801880a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801880c:	eeb0 3a67 	vmov.f32	s6, s15
 8018810:	fb92 f3f3 	sdiv	r3, r2, r3
 8018814:	9a04      	ldr	r2, [sp, #16]
 8018816:	9314      	str	r3, [sp, #80]	; 0x50
 8018818:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801881a:	bf08      	it	eq
 801881c:	4613      	moveq	r3, r2
 801881e:	e787      	b.n	8018730 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8018820:	1406      	asrs	r6, r0, #16
 8018822:	d45d      	bmi.n	80188e0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8018824:	f8dc 5008 	ldr.w	r5, [ip, #8]
 8018828:	42b5      	cmp	r5, r6
 801882a:	dd59      	ble.n	80188e0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801882c:	140f      	asrs	r7, r1, #16
 801882e:	d457      	bmi.n	80188e0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8018830:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8018834:	42ba      	cmp	r2, r7
 8018836:	dd53      	ble.n	80188e0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8018838:	9a01      	ldr	r2, [sp, #4]
 801883a:	b22d      	sxth	r5, r5
 801883c:	fb07 2505 	mla	r5, r7, r5, r2
 8018840:	5daa      	ldrb	r2, [r5, r6]
 8018842:	9d02      	ldr	r5, [sp, #8]
 8018844:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 8018848:	0e2e      	lsrs	r6, r5, #24
 801884a:	d049      	beq.n	80188e0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801884c:	f06f 0201 	mvn.w	r2, #1
 8018850:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8018854:	fb02 f20e 	mul.w	r2, r2, lr
 8018858:	f834 8002 	ldrh.w	r8, [r4, r2]
 801885c:	9203      	str	r2, [sp, #12]
 801885e:	9a05      	ldr	r2, [sp, #20]
 8018860:	ea4f 2728 	mov.w	r7, r8, asr #8
 8018864:	4356      	muls	r6, r2
 8018866:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801886a:	1c72      	adds	r2, r6, #1
 801886c:	eb02 2226 	add.w	r2, r2, r6, asr #8
 8018870:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8018874:	b2ed      	uxtb	r5, r5
 8018876:	1212      	asrs	r2, r2, #8
 8018878:	fa1f f982 	uxth.w	r9, r2
 801887c:	43d2      	mvns	r2, r2
 801887e:	fb16 f609 	smulbb	r6, r6, r9
 8018882:	b2d2      	uxtb	r2, r2
 8018884:	fb15 f509 	smulbb	r5, r5, r9
 8018888:	fb07 6702 	mla	r7, r7, r2, r6
 801888c:	ea4f 06e8 	mov.w	r6, r8, asr #3
 8018890:	fb1a fa09 	smulbb	sl, sl, r9
 8018894:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8018898:	b2bf      	uxth	r7, r7
 801889a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801889e:	fa5f f888 	uxtb.w	r8, r8
 80188a2:	fb06 a602 	mla	r6, r6, r2, sl
 80188a6:	fb08 5502 	mla	r5, r8, r2, r5
 80188aa:	1c7a      	adds	r2, r7, #1
 80188ac:	b2b6      	uxth	r6, r6
 80188ae:	b2ad      	uxth	r5, r5
 80188b0:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 80188b4:	9a03      	ldr	r2, [sp, #12]
 80188b6:	f105 0a01 	add.w	sl, r5, #1
 80188ba:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 80188be:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 80188c2:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80188c6:	ea4a 0707 	orr.w	r7, sl, r7
 80188ca:	f106 0a01 	add.w	sl, r6, #1
 80188ce:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 80188d2:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80188d6:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80188da:	ea47 070a 	orr.w	r7, r7, sl
 80188de:	52a7      	strh	r7, [r4, r2]
 80188e0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80188e2:	f10e 3eff 	add.w	lr, lr, #4294967295
 80188e6:	4410      	add	r0, r2
 80188e8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80188ea:	4411      	add	r1, r2
 80188ec:	e755      	b.n	801879a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 80188ee:	f04f 0800 	mov.w	r8, #0
 80188f2:	eba3 0208 	sub.w	r2, r3, r8
 80188f6:	2a00      	cmp	r2, #0
 80188f8:	f77f af53 	ble.w	80187a2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 80188fc:	f9bc 6008 	ldrsh.w	r6, [ip, #8]
 8018900:	140a      	asrs	r2, r1, #16
 8018902:	9f01      	ldr	r7, [sp, #4]
 8018904:	1405      	asrs	r5, r0, #16
 8018906:	fb06 7202 	mla	r2, r6, r2, r7
 801890a:	5d52      	ldrb	r2, [r2, r5]
 801890c:	9d02      	ldr	r5, [sp, #8]
 801890e:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 8018912:	0e2e      	lsrs	r6, r5, #24
 8018914:	d044      	beq.n	80189a0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 8018916:	9a05      	ldr	r2, [sp, #20]
 8018918:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801891c:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 8018920:	4356      	muls	r6, r2
 8018922:	ea4f 272e 	mov.w	r7, lr, asr #8
 8018926:	1c72      	adds	r2, r6, #1
 8018928:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801892c:	eb02 2226 	add.w	r2, r2, r6, asr #8
 8018930:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8018934:	b2ed      	uxtb	r5, r5
 8018936:	1212      	asrs	r2, r2, #8
 8018938:	fa1f f982 	uxth.w	r9, r2
 801893c:	43d2      	mvns	r2, r2
 801893e:	fb16 f609 	smulbb	r6, r6, r9
 8018942:	b2d2      	uxtb	r2, r2
 8018944:	fb15 f509 	smulbb	r5, r5, r9
 8018948:	fb07 6702 	mla	r7, r7, r2, r6
 801894c:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8018950:	fb1a fa09 	smulbb	sl, sl, r9
 8018954:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8018958:	b2bf      	uxth	r7, r7
 801895a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801895e:	fa5f fe8e 	uxtb.w	lr, lr
 8018962:	fb06 a602 	mla	r6, r6, r2, sl
 8018966:	fb0e 5502 	mla	r5, lr, r2, r5
 801896a:	1c7a      	adds	r2, r7, #1
 801896c:	b2b6      	uxth	r6, r6
 801896e:	b2ad      	uxth	r5, r5
 8018970:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8018974:	f105 0a01 	add.w	sl, r5, #1
 8018978:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801897c:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8018980:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8018984:	ea4a 0707 	orr.w	r7, sl, r7
 8018988:	f106 0a01 	add.w	sl, r6, #1
 801898c:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8018990:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8018994:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8018998:	ea47 070a 	orr.w	r7, r7, sl
 801899c:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 80189a0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80189a2:	f108 0801 	add.w	r8, r8, #1
 80189a6:	4410      	add	r0, r2
 80189a8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80189aa:	4411      	add	r1, r2
 80189ac:	e7a1      	b.n	80188f2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 80189ae:	b007      	add	sp, #28
 80189b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080189b4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80189b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80189b8:	b085      	sub	sp, #20
 80189ba:	468b      	mov	fp, r1
 80189bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80189c0:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80189c2:	9203      	str	r2, [sp, #12]
 80189c4:	6841      	ldr	r1, [r0, #4]
 80189c6:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 80189ca:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 80189ce:	fb01 2404 	mla	r4, r1, r4, r2
 80189d2:	6802      	ldr	r2, [r0, #0]
 80189d4:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80189d8:	f8de 2000 	ldr.w	r2, [lr]
 80189dc:	9200      	str	r2, [sp, #0]
 80189de:	f8de 2004 	ldr.w	r2, [lr, #4]
 80189e2:	3204      	adds	r2, #4
 80189e4:	9201      	str	r2, [sp, #4]
 80189e6:	f1bb 0f00 	cmp.w	fp, #0
 80189ea:	dc03      	bgt.n	80189f4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 80189ec:	9a03      	ldr	r2, [sp, #12]
 80189ee:	2a00      	cmp	r2, #0
 80189f0:	f340 8153 	ble.w	8018c9a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 80189f4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80189f6:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 80189fa:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 80189fe:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8018a00:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 8018a04:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8018a08:	2b00      	cmp	r3, #0
 8018a0a:	dd0e      	ble.n	8018a2a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8018a0c:	1408      	asrs	r0, r1, #16
 8018a0e:	d405      	bmi.n	8018a1c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8018a10:	42b8      	cmp	r0, r7
 8018a12:	da03      	bge.n	8018a1c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8018a14:	1410      	asrs	r0, r2, #16
 8018a16:	d401      	bmi.n	8018a1c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8018a18:	42b0      	cmp	r0, r6
 8018a1a:	db07      	blt.n	8018a2c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8018a1c:	9811      	ldr	r0, [sp, #68]	; 0x44
 8018a1e:	3b01      	subs	r3, #1
 8018a20:	3402      	adds	r4, #2
 8018a22:	4401      	add	r1, r0
 8018a24:	9812      	ldr	r0, [sp, #72]	; 0x48
 8018a26:	4402      	add	r2, r0
 8018a28:	e7ee      	b.n	8018a08 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8018a2a:	d017      	beq.n	8018a5c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8018a2c:	1e58      	subs	r0, r3, #1
 8018a2e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8018a30:	fb05 1500 	mla	r5, r5, r0, r1
 8018a34:	142d      	asrs	r5, r5, #16
 8018a36:	d409      	bmi.n	8018a4c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8018a38:	42bd      	cmp	r5, r7
 8018a3a:	da07      	bge.n	8018a4c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8018a3c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8018a3e:	fb05 2000 	mla	r0, r5, r0, r2
 8018a42:	1400      	asrs	r0, r0, #16
 8018a44:	d402      	bmi.n	8018a4c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8018a46:	42b0      	cmp	r0, r6
 8018a48:	f2c0 80bc 	blt.w	8018bc4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 8018a4c:	2600      	movs	r6, #0
 8018a4e:	1998      	adds	r0, r3, r6
 8018a50:	2800      	cmp	r0, #0
 8018a52:	dc3e      	bgt.n	8018ad2 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8018a54:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018a58:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8018a5c:	f1bb 0f00 	cmp.w	fp, #0
 8018a60:	f340 811b 	ble.w	8018c9a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 8018a64:	ee30 0a04 	vadd.f32	s0, s0, s8
 8018a68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018a6a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8018a6e:	f1bb 0b01 	subs.w	fp, fp, #1
 8018a72:	eeb0 6a62 	vmov.f32	s12, s5
 8018a76:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8018a7a:	ee31 1a05 	vadd.f32	s2, s2, s10
 8018a7e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018a82:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8018a86:	eeb0 6a43 	vmov.f32	s12, s6
 8018a8a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018a8e:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8018a92:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8018a96:	ee61 7a27 	vmul.f32	s15, s2, s15
 8018a9a:	ee77 2a62 	vsub.f32	s5, s14, s5
 8018a9e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8018aa2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8018aa6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8018aaa:	ee12 2a90 	vmov	r2, s5
 8018aae:	eef0 2a47 	vmov.f32	s5, s14
 8018ab2:	fb92 f3f3 	sdiv	r3, r2, r3
 8018ab6:	ee13 2a10 	vmov	r2, s6
 8018aba:	9311      	str	r3, [sp, #68]	; 0x44
 8018abc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018abe:	eeb0 3a67 	vmov.f32	s6, s15
 8018ac2:	fb92 f3f3 	sdiv	r3, r2, r3
 8018ac6:	9a03      	ldr	r2, [sp, #12]
 8018ac8:	9312      	str	r3, [sp, #72]	; 0x48
 8018aca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018acc:	bf08      	it	eq
 8018ace:	4613      	moveq	r3, r2
 8018ad0:	e789      	b.n	80189e6 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 8018ad2:	140f      	asrs	r7, r1, #16
 8018ad4:	d426      	bmi.n	8018b24 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8018ad6:	f8de 5008 	ldr.w	r5, [lr, #8]
 8018ada:	42bd      	cmp	r5, r7
 8018adc:	dd22      	ble.n	8018b24 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8018ade:	ea5f 4c22 	movs.w	ip, r2, asr #16
 8018ae2:	d41f      	bmi.n	8018b24 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8018ae4:	f8de 000c 	ldr.w	r0, [lr, #12]
 8018ae8:	4560      	cmp	r0, ip
 8018aea:	dd1b      	ble.n	8018b24 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8018aec:	9800      	ldr	r0, [sp, #0]
 8018aee:	b22d      	sxth	r5, r5
 8018af0:	fb0c 0505 	mla	r5, ip, r5, r0
 8018af4:	5de8      	ldrb	r0, [r5, r7]
 8018af6:	9d01      	ldr	r5, [sp, #4]
 8018af8:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 8018afc:	0e07      	lsrs	r7, r0, #24
 8018afe:	2fff      	cmp	r7, #255	; 0xff
 8018b00:	d116      	bne.n	8018b30 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8018b02:	f06f 0501 	mvn.w	r5, #1
 8018b06:	fb05 f706 	mul.w	r7, r5, r6
 8018b0a:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 8018b0e:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 8018b12:	0945      	lsrs	r5, r0, #5
 8018b14:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 8018b18:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8018b1c:	ea4c 0505 	orr.w	r5, ip, r5
 8018b20:	4305      	orrs	r5, r0
 8018b22:	53e5      	strh	r5, [r4, r7]
 8018b24:	9811      	ldr	r0, [sp, #68]	; 0x44
 8018b26:	3e01      	subs	r6, #1
 8018b28:	4401      	add	r1, r0
 8018b2a:	9812      	ldr	r0, [sp, #72]	; 0x48
 8018b2c:	4402      	add	r2, r0
 8018b2e:	e78e      	b.n	8018a4e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8018b30:	b2fd      	uxtb	r5, r7
 8018b32:	2f00      	cmp	r7, #0
 8018b34:	d0f6      	beq.n	8018b24 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8018b36:	f06f 0701 	mvn.w	r7, #1
 8018b3a:	fa1f f985 	uxth.w	r9, r5
 8018b3e:	43ed      	mvns	r5, r5
 8018b40:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 8018b44:	4377      	muls	r7, r6
 8018b46:	fb1a fa09 	smulbb	sl, sl, r9
 8018b4a:	b2ed      	uxtb	r5, r5
 8018b4c:	f834 8007 	ldrh.w	r8, [r4, r7]
 8018b50:	9702      	str	r7, [sp, #8]
 8018b52:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8018b56:	ea4f 2c28 	mov.w	ip, r8, asr #8
 8018b5a:	fb17 f709 	smulbb	r7, r7, r9
 8018b5e:	b2c0      	uxtb	r0, r0
 8018b60:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8018b64:	fb10 f009 	smulbb	r0, r0, r9
 8018b68:	fb0c 7c05 	mla	ip, ip, r5, r7
 8018b6c:	ea4f 07e8 	mov.w	r7, r8, asr #3
 8018b70:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8018b74:	fa1f fc8c 	uxth.w	ip, ip
 8018b78:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8018b7c:	fa5f f888 	uxtb.w	r8, r8
 8018b80:	fb07 a705 	mla	r7, r7, r5, sl
 8018b84:	fb08 0005 	mla	r0, r8, r5, r0
 8018b88:	f10c 0501 	add.w	r5, ip, #1
 8018b8c:	b2bf      	uxth	r7, r7
 8018b8e:	b280      	uxth	r0, r0
 8018b90:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8018b94:	f100 0a01 	add.w	sl, r0, #1
 8018b98:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8018b9c:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 8018ba0:	9802      	ldr	r0, [sp, #8]
 8018ba2:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8018ba6:	ea4a 0c0c 	orr.w	ip, sl, ip
 8018baa:	f107 0a01 	add.w	sl, r7, #1
 8018bae:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 8018bb2:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8018bb6:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8018bba:	ea4c 0c0a 	orr.w	ip, ip, sl
 8018bbe:	f824 c000 	strh.w	ip, [r4, r0]
 8018bc2:	e7af      	b.n	8018b24 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8018bc4:	f04f 0800 	mov.w	r8, #0
 8018bc8:	eba3 0008 	sub.w	r0, r3, r8
 8018bcc:	2800      	cmp	r0, #0
 8018bce:	f77f af41 	ble.w	8018a54 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8018bd2:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 8018bd6:	1410      	asrs	r0, r2, #16
 8018bd8:	9f00      	ldr	r7, [sp, #0]
 8018bda:	140d      	asrs	r5, r1, #16
 8018bdc:	fb06 7000 	mla	r0, r6, r0, r7
 8018be0:	5d40      	ldrb	r0, [r0, r5]
 8018be2:	9d01      	ldr	r5, [sp, #4]
 8018be4:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 8018be8:	0e2e      	lsrs	r6, r5, #24
 8018bea:	2eff      	cmp	r6, #255	; 0xff
 8018bec:	d112      	bne.n	8018c14 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x260>
 8018bee:	482c      	ldr	r0, [pc, #176]	; (8018ca0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
 8018bf0:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 8018bf4:	0968      	lsrs	r0, r5, #5
 8018bf6:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8018bfa:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8018bfe:	4330      	orrs	r0, r6
 8018c00:	4328      	orrs	r0, r5
 8018c02:	f824 0018 	strh.w	r0, [r4, r8, lsl #1]
 8018c06:	9811      	ldr	r0, [sp, #68]	; 0x44
 8018c08:	f108 0801 	add.w	r8, r8, #1
 8018c0c:	4401      	add	r1, r0
 8018c0e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8018c10:	4402      	add	r2, r0
 8018c12:	e7d9      	b.n	8018bc8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8018c14:	b2f0      	uxtb	r0, r6
 8018c16:	2e00      	cmp	r6, #0
 8018c18:	d0f5      	beq.n	8018c06 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 8018c1a:	f834 c018 	ldrh.w	ip, [r4, r8, lsl #1]
 8018c1e:	fa1f f980 	uxth.w	r9, r0
 8018c22:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8018c26:	43c0      	mvns	r0, r0
 8018c28:	ea4f 272c 	mov.w	r7, ip, asr #8
 8018c2c:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8018c30:	fb16 f609 	smulbb	r6, r6, r9
 8018c34:	b2c0      	uxtb	r0, r0
 8018c36:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8018c3a:	b2ed      	uxtb	r5, r5
 8018c3c:	fb1a fa09 	smulbb	sl, sl, r9
 8018c40:	fb07 6700 	mla	r7, r7, r0, r6
 8018c44:	ea4f 06ec 	mov.w	r6, ip, asr #3
 8018c48:	fb15 f509 	smulbb	r5, r5, r9
 8018c4c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8018c50:	b2bf      	uxth	r7, r7
 8018c52:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8018c56:	fa5f fc8c 	uxtb.w	ip, ip
 8018c5a:	fb06 a600 	mla	r6, r6, r0, sl
 8018c5e:	fb0c 5500 	mla	r5, ip, r0, r5
 8018c62:	1c78      	adds	r0, r7, #1
 8018c64:	b2b6      	uxth	r6, r6
 8018c66:	b2ad      	uxth	r5, r5
 8018c68:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 8018c6c:	f105 0a01 	add.w	sl, r5, #1
 8018c70:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8018c74:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8018c78:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8018c7c:	ea4a 0707 	orr.w	r7, sl, r7
 8018c80:	f106 0a01 	add.w	sl, r6, #1
 8018c84:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8018c88:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8018c8c:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8018c90:	ea47 070a 	orr.w	r7, r7, sl
 8018c94:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 8018c98:	e7b5      	b.n	8018c06 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 8018c9a:	b005      	add	sp, #20
 8018c9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018ca0:	fffff800 	.word	0xfffff800

08018ca4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8018ca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ca8:	b087      	sub	sp, #28
 8018caa:	468b      	mov	fp, r1
 8018cac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8018cb0:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8018cb2:	9204      	str	r2, [sp, #16]
 8018cb4:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8018cb8:	6861      	ldr	r1, [r4, #4]
 8018cba:	9205      	str	r2, [sp, #20]
 8018cbc:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 8018cc0:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 8018cc4:	fb01 2000 	mla	r0, r1, r0, r2
 8018cc8:	6822      	ldr	r2, [r4, #0]
 8018cca:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8018cce:	f8de 2000 	ldr.w	r2, [lr]
 8018cd2:	9201      	str	r2, [sp, #4]
 8018cd4:	f8de 2004 	ldr.w	r2, [lr, #4]
 8018cd8:	9202      	str	r2, [sp, #8]
 8018cda:	f1bb 0f00 	cmp.w	fp, #0
 8018cde:	dc03      	bgt.n	8018ce8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 8018ce0:	9a04      	ldr	r2, [sp, #16]
 8018ce2:	2a00      	cmp	r2, #0
 8018ce4:	f340 8142 	ble.w	8018f6c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 8018ce8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8018cea:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 8018cee:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8018cf2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8018cf4:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 8018cf8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8018cfc:	2b00      	cmp	r3, #0
 8018cfe:	dd0e      	ble.n	8018d1e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8018d00:	140c      	asrs	r4, r1, #16
 8018d02:	d405      	bmi.n	8018d10 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8018d04:	42bc      	cmp	r4, r7
 8018d06:	da03      	bge.n	8018d10 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8018d08:	1414      	asrs	r4, r2, #16
 8018d0a:	d401      	bmi.n	8018d10 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8018d0c:	42b4      	cmp	r4, r6
 8018d0e:	db07      	blt.n	8018d20 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8018d10:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8018d12:	3b01      	subs	r3, #1
 8018d14:	3002      	adds	r0, #2
 8018d16:	4421      	add	r1, r4
 8018d18:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8018d1a:	4422      	add	r2, r4
 8018d1c:	e7ee      	b.n	8018cfc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8018d1e:	d019      	beq.n	8018d54 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8018d20:	1e5c      	subs	r4, r3, #1
 8018d22:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8018d24:	fb05 1504 	mla	r5, r5, r4, r1
 8018d28:	142d      	asrs	r5, r5, #16
 8018d2a:	d409      	bmi.n	8018d40 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8018d2c:	42bd      	cmp	r5, r7
 8018d2e:	da07      	bge.n	8018d40 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8018d30:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8018d32:	fb05 2404 	mla	r4, r5, r4, r2
 8018d36:	1424      	asrs	r4, r4, #16
 8018d38:	d402      	bmi.n	8018d40 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8018d3a:	42b4      	cmp	r4, r6
 8018d3c:	f2c0 80b1 	blt.w	8018ea2 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 8018d40:	f04f 0800 	mov.w	r8, #0
 8018d44:	eb03 0408 	add.w	r4, r3, r8
 8018d48:	2c00      	cmp	r4, #0
 8018d4a:	dc3e      	bgt.n	8018dca <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8018d4c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018d50:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8018d54:	f1bb 0f00 	cmp.w	fp, #0
 8018d58:	f340 8108 	ble.w	8018f6c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 8018d5c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8018d60:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018d62:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8018d66:	f1bb 0b01 	subs.w	fp, fp, #1
 8018d6a:	eeb0 6a62 	vmov.f32	s12, s5
 8018d6e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8018d72:	ee31 1a05 	vadd.f32	s2, s2, s10
 8018d76:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018d7a:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8018d7e:	eeb0 6a43 	vmov.f32	s12, s6
 8018d82:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018d86:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8018d8a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8018d8e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8018d92:	ee77 2a62 	vsub.f32	s5, s14, s5
 8018d96:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8018d9a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8018d9e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8018da2:	ee12 2a90 	vmov	r2, s5
 8018da6:	eef0 2a47 	vmov.f32	s5, s14
 8018daa:	fb92 f3f3 	sdiv	r3, r2, r3
 8018dae:	ee13 2a10 	vmov	r2, s6
 8018db2:	9313      	str	r3, [sp, #76]	; 0x4c
 8018db4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018db6:	eeb0 3a67 	vmov.f32	s6, s15
 8018dba:	fb92 f3f3 	sdiv	r3, r2, r3
 8018dbe:	9a04      	ldr	r2, [sp, #16]
 8018dc0:	9314      	str	r3, [sp, #80]	; 0x50
 8018dc2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018dc4:	bf08      	it	eq
 8018dc6:	4613      	moveq	r3, r2
 8018dc8:	e787      	b.n	8018cda <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 8018dca:	140e      	asrs	r6, r1, #16
 8018dcc:	d462      	bmi.n	8018e94 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8018dce:	f8de 5008 	ldr.w	r5, [lr, #8]
 8018dd2:	42b5      	cmp	r5, r6
 8018dd4:	dd5e      	ble.n	8018e94 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8018dd6:	1417      	asrs	r7, r2, #16
 8018dd8:	d45c      	bmi.n	8018e94 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8018dda:	f8de 400c 	ldr.w	r4, [lr, #12]
 8018dde:	42bc      	cmp	r4, r7
 8018de0:	dd58      	ble.n	8018e94 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8018de2:	b22d      	sxth	r5, r5
 8018de4:	9c02      	ldr	r4, [sp, #8]
 8018de6:	fb07 6505 	mla	r5, r7, r5, r6
 8018dea:	5d66      	ldrb	r6, [r4, r5]
 8018dec:	2e00      	cmp	r6, #0
 8018dee:	d051      	beq.n	8018e94 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8018df0:	9c01      	ldr	r4, [sp, #4]
 8018df2:	f834 9015 	ldrh.w	r9, [r4, r5, lsl #1]
 8018df6:	f06f 0401 	mvn.w	r4, #1
 8018dfa:	fb04 f408 	mul.w	r4, r4, r8
 8018dfe:	ea4f 2c29 	mov.w	ip, r9, asr #8
 8018e02:	5b05      	ldrh	r5, [r0, r4]
 8018e04:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8018e08:	9403      	str	r4, [sp, #12]
 8018e0a:	9c05      	ldr	r4, [sp, #20]
 8018e0c:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8018e10:	4366      	muls	r6, r4
 8018e12:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8018e16:	1c74      	adds	r4, r6, #1
 8018e18:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 8018e1c:	122e      	asrs	r6, r5, #8
 8018e1e:	1224      	asrs	r4, r4, #8
 8018e20:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8018e24:	00ed      	lsls	r5, r5, #3
 8018e26:	b2a7      	uxth	r7, r4
 8018e28:	43e4      	mvns	r4, r4
 8018e2a:	b2ed      	uxtb	r5, r5
 8018e2c:	b2e4      	uxtb	r4, r4
 8018e2e:	fb16 f604 	smulbb	r6, r6, r4
 8018e32:	fb15 f504 	smulbb	r5, r5, r4
 8018e36:	fb0c 6c07 	mla	ip, ip, r7, r6
 8018e3a:	ea4f 06e9 	mov.w	r6, r9, asr #3
 8018e3e:	fb1a fa04 	smulbb	sl, sl, r4
 8018e42:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8018e46:	fa1f fc8c 	uxth.w	ip, ip
 8018e4a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8018e4e:	fa5f f989 	uxtb.w	r9, r9
 8018e52:	fb06 a607 	mla	r6, r6, r7, sl
 8018e56:	f10c 0401 	add.w	r4, ip, #1
 8018e5a:	fb09 5507 	mla	r5, r9, r7, r5
 8018e5e:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 8018e62:	9c03      	ldr	r4, [sp, #12]
 8018e64:	b2ad      	uxth	r5, r5
 8018e66:	b2b6      	uxth	r6, r6
 8018e68:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8018e6c:	f105 0a01 	add.w	sl, r5, #1
 8018e70:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8018e74:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8018e78:	ea4a 0c0c 	orr.w	ip, sl, ip
 8018e7c:	f106 0a01 	add.w	sl, r6, #1
 8018e80:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8018e84:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8018e88:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8018e8c:	ea4c 0c0a 	orr.w	ip, ip, sl
 8018e90:	f820 c004 	strh.w	ip, [r0, r4]
 8018e94:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8018e96:	f108 38ff 	add.w	r8, r8, #4294967295
 8018e9a:	4421      	add	r1, r4
 8018e9c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8018e9e:	4422      	add	r2, r4
 8018ea0:	e750      	b.n	8018d44 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8018ea2:	f04f 0900 	mov.w	r9, #0
 8018ea6:	eba3 0409 	sub.w	r4, r3, r9
 8018eaa:	2c00      	cmp	r4, #0
 8018eac:	f77f af4e 	ble.w	8018d4c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8018eb0:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 8018eb4:	140d      	asrs	r5, r1, #16
 8018eb6:	1414      	asrs	r4, r2, #16
 8018eb8:	fb06 5404 	mla	r4, r6, r4, r5
 8018ebc:	9d02      	ldr	r5, [sp, #8]
 8018ebe:	5d2e      	ldrb	r6, [r5, r4]
 8018ec0:	2e00      	cmp	r6, #0
 8018ec2:	d04c      	beq.n	8018f5e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8018ec4:	9d01      	ldr	r5, [sp, #4]
 8018ec6:	f835 8014 	ldrh.w	r8, [r5, r4, lsl #1]
 8018eca:	9c05      	ldr	r4, [sp, #20]
 8018ecc:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 8018ed0:	ea4f 2c28 	mov.w	ip, r8, asr #8
 8018ed4:	4366      	muls	r6, r4
 8018ed6:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8018eda:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8018ede:	1c74      	adds	r4, r6, #1
 8018ee0:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8018ee4:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 8018ee8:	122e      	asrs	r6, r5, #8
 8018eea:	1224      	asrs	r4, r4, #8
 8018eec:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8018ef0:	00ed      	lsls	r5, r5, #3
 8018ef2:	b2a7      	uxth	r7, r4
 8018ef4:	43e4      	mvns	r4, r4
 8018ef6:	b2ed      	uxtb	r5, r5
 8018ef8:	b2e4      	uxtb	r4, r4
 8018efa:	fb16 f604 	smulbb	r6, r6, r4
 8018efe:	fb15 f504 	smulbb	r5, r5, r4
 8018f02:	fb0c 6c07 	mla	ip, ip, r7, r6
 8018f06:	ea4f 06e8 	mov.w	r6, r8, asr #3
 8018f0a:	fb1a fa04 	smulbb	sl, sl, r4
 8018f0e:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8018f12:	fa1f fc8c 	uxth.w	ip, ip
 8018f16:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8018f1a:	fa5f f888 	uxtb.w	r8, r8
 8018f1e:	fb06 a607 	mla	r6, r6, r7, sl
 8018f22:	f10c 0401 	add.w	r4, ip, #1
 8018f26:	fb08 5507 	mla	r5, r8, r7, r5
 8018f2a:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 8018f2e:	b2ad      	uxth	r5, r5
 8018f30:	b2b6      	uxth	r6, r6
 8018f32:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8018f36:	f105 0a01 	add.w	sl, r5, #1
 8018f3a:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8018f3e:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8018f42:	ea4a 0c0c 	orr.w	ip, sl, ip
 8018f46:	f106 0a01 	add.w	sl, r6, #1
 8018f4a:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8018f4e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8018f52:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8018f56:	ea4c 0c0a 	orr.w	ip, ip, sl
 8018f5a:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 8018f5e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8018f60:	f109 0901 	add.w	r9, r9, #1
 8018f64:	4421      	add	r1, r4
 8018f66:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8018f68:	4422      	add	r2, r4
 8018f6a:	e79c      	b.n	8018ea6 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 8018f6c:	b007      	add	sp, #28
 8018f6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018f72 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8018f72:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f76:	b085      	sub	sp, #20
 8018f78:	468b      	mov	fp, r1
 8018f7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8018f7e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8018f80:	9203      	str	r2, [sp, #12]
 8018f82:	6861      	ldr	r1, [r4, #4]
 8018f84:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8018f88:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	; 0x50
 8018f8c:	fb01 2000 	mla	r0, r1, r0, r2
 8018f90:	6822      	ldr	r2, [r4, #0]
 8018f92:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8018f96:	f8d8 2000 	ldr.w	r2, [r8]
 8018f9a:	9200      	str	r2, [sp, #0]
 8018f9c:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8018fa0:	9201      	str	r2, [sp, #4]
 8018fa2:	f1bb 0f00 	cmp.w	fp, #0
 8018fa6:	dc03      	bgt.n	8018fb0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8018fa8:	9a03      	ldr	r2, [sp, #12]
 8018faa:	2a00      	cmp	r2, #0
 8018fac:	f340 8146 	ble.w	801923c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 8018fb0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018fb2:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 8018fb6:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8018fba:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8018fbc:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 8018fc0:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8018fc4:	2b00      	cmp	r3, #0
 8018fc6:	dd0e      	ble.n	8018fe6 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8018fc8:	140c      	asrs	r4, r1, #16
 8018fca:	d405      	bmi.n	8018fd8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8018fcc:	42bc      	cmp	r4, r7
 8018fce:	da03      	bge.n	8018fd8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8018fd0:	1414      	asrs	r4, r2, #16
 8018fd2:	d401      	bmi.n	8018fd8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8018fd4:	42b4      	cmp	r4, r6
 8018fd6:	db07      	blt.n	8018fe8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8018fd8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8018fda:	3b01      	subs	r3, #1
 8018fdc:	3002      	adds	r0, #2
 8018fde:	4421      	add	r1, r4
 8018fe0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8018fe2:	4422      	add	r2, r4
 8018fe4:	e7ee      	b.n	8018fc4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8018fe6:	d017      	beq.n	8019018 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8018fe8:	1e5c      	subs	r4, r3, #1
 8018fea:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8018fec:	fb05 1504 	mla	r5, r5, r4, r1
 8018ff0:	142d      	asrs	r5, r5, #16
 8018ff2:	d409      	bmi.n	8019008 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8018ff4:	42bd      	cmp	r5, r7
 8018ff6:	da07      	bge.n	8019008 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8018ff8:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8018ffa:	fb05 2404 	mla	r4, r5, r4, r2
 8018ffe:	1424      	asrs	r4, r4, #16
 8019000:	d402      	bmi.n	8019008 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8019002:	42b4      	cmp	r4, r6
 8019004:	f2c0 80b3 	blt.w	801916e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 8019008:	2600      	movs	r6, #0
 801900a:	199c      	adds	r4, r3, r6
 801900c:	2c00      	cmp	r4, #0
 801900e:	dc3e      	bgt.n	801908e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8019010:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019014:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8019018:	f1bb 0f00 	cmp.w	fp, #0
 801901c:	f340 810e 	ble.w	801923c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 8019020:	ee30 0a04 	vadd.f32	s0, s0, s8
 8019024:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019026:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801902a:	f1bb 0b01 	subs.w	fp, fp, #1
 801902e:	eeb0 6a62 	vmov.f32	s12, s5
 8019032:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8019036:	ee31 1a05 	vadd.f32	s2, s2, s10
 801903a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801903e:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8019042:	eeb0 6a43 	vmov.f32	s12, s6
 8019046:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801904a:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801904e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019052:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019056:	ee77 2a62 	vsub.f32	s5, s14, s5
 801905a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801905e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019062:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019066:	ee12 2a90 	vmov	r2, s5
 801906a:	eef0 2a47 	vmov.f32	s5, s14
 801906e:	fb92 f3f3 	sdiv	r3, r2, r3
 8019072:	ee13 2a10 	vmov	r2, s6
 8019076:	9311      	str	r3, [sp, #68]	; 0x44
 8019078:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801907a:	eeb0 3a67 	vmov.f32	s6, s15
 801907e:	fb92 f3f3 	sdiv	r3, r2, r3
 8019082:	9a03      	ldr	r2, [sp, #12]
 8019084:	9312      	str	r3, [sp, #72]	; 0x48
 8019086:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019088:	bf08      	it	eq
 801908a:	4613      	moveq	r3, r2
 801908c:	e789      	b.n	8018fa2 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801908e:	140f      	asrs	r7, r1, #16
 8019090:	d418      	bmi.n	80190c4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8019092:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8019096:	42bd      	cmp	r5, r7
 8019098:	dd14      	ble.n	80190c4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801909a:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801909e:	d411      	bmi.n	80190c4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80190a0:	f8d8 400c 	ldr.w	r4, [r8, #12]
 80190a4:	4564      	cmp	r4, ip
 80190a6:	dd0d      	ble.n	80190c4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80190a8:	b22d      	sxth	r5, r5
 80190aa:	9c01      	ldr	r4, [sp, #4]
 80190ac:	fb0c 7505 	mla	r5, ip, r5, r7
 80190b0:	5d64      	ldrb	r4, [r4, r5]
 80190b2:	2cff      	cmp	r4, #255	; 0xff
 80190b4:	d10c      	bne.n	80190d0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 80190b6:	9c00      	ldr	r4, [sp, #0]
 80190b8:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
 80190bc:	f06f 0401 	mvn.w	r4, #1
 80190c0:	4374      	muls	r4, r6
 80190c2:	5305      	strh	r5, [r0, r4]
 80190c4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80190c6:	3e01      	subs	r6, #1
 80190c8:	4421      	add	r1, r4
 80190ca:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80190cc:	4422      	add	r2, r4
 80190ce:	e79c      	b.n	801900a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80190d0:	2c00      	cmp	r4, #0
 80190d2:	d0f7      	beq.n	80190c4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80190d4:	9f00      	ldr	r7, [sp, #0]
 80190d6:	fa1f fc84 	uxth.w	ip, r4
 80190da:	43e4      	mvns	r4, r4
 80190dc:	f837 9015 	ldrh.w	r9, [r7, r5, lsl #1]
 80190e0:	f06f 0501 	mvn.w	r5, #1
 80190e4:	b2e4      	uxtb	r4, r4
 80190e6:	4375      	muls	r5, r6
 80190e8:	ea4f 2e29 	mov.w	lr, r9, asr #8
 80190ec:	9502      	str	r5, [sp, #8]
 80190ee:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 80190f2:	5b45      	ldrh	r5, [r0, r5]
 80190f4:	122f      	asrs	r7, r5, #8
 80190f6:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 80190fa:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80190fe:	00ed      	lsls	r5, r5, #3
 8019100:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8019104:	fb17 f704 	smulbb	r7, r7, r4
 8019108:	b2ed      	uxtb	r5, r5
 801910a:	fb1a fa04 	smulbb	sl, sl, r4
 801910e:	fb0e 7e0c 	mla	lr, lr, ip, r7
 8019112:	ea4f 07e9 	mov.w	r7, r9, asr #3
 8019116:	fb15 f504 	smulbb	r5, r5, r4
 801911a:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801911e:	fa1f fe8e 	uxth.w	lr, lr
 8019122:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8019126:	fa5f f989 	uxtb.w	r9, r9
 801912a:	fb07 a70c 	mla	r7, r7, ip, sl
 801912e:	f10e 0401 	add.w	r4, lr, #1
 8019132:	fb09 550c 	mla	r5, r9, ip, r5
 8019136:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
 801913a:	9c02      	ldr	r4, [sp, #8]
 801913c:	b2ad      	uxth	r5, r5
 801913e:	b2bf      	uxth	r7, r7
 8019140:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 8019144:	f105 0a01 	add.w	sl, r5, #1
 8019148:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801914c:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8019150:	ea4a 0e0e 	orr.w	lr, sl, lr
 8019154:	f107 0a01 	add.w	sl, r7, #1
 8019158:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801915c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8019160:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8019164:	ea4e 0e0a 	orr.w	lr, lr, sl
 8019168:	f820 e004 	strh.w	lr, [r0, r4]
 801916c:	e7aa      	b.n	80190c4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801916e:	f04f 0900 	mov.w	r9, #0
 8019172:	eba3 0409 	sub.w	r4, r3, r9
 8019176:	2c00      	cmp	r4, #0
 8019178:	f77f af4a 	ble.w	8019010 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801917c:	1414      	asrs	r4, r2, #16
 801917e:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 8019182:	140d      	asrs	r5, r1, #16
 8019184:	fb06 5504 	mla	r5, r6, r4, r5
 8019188:	9c01      	ldr	r4, [sp, #4]
 801918a:	5d64      	ldrb	r4, [r4, r5]
 801918c:	2cff      	cmp	r4, #255	; 0xff
 801918e:	d10b      	bne.n	80191a8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8019190:	9c00      	ldr	r4, [sp, #0]
 8019192:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
 8019196:	f820 4019 	strh.w	r4, [r0, r9, lsl #1]
 801919a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801919c:	f109 0901 	add.w	r9, r9, #1
 80191a0:	4421      	add	r1, r4
 80191a2:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80191a4:	4422      	add	r2, r4
 80191a6:	e7e4      	b.n	8019172 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 80191a8:	2c00      	cmp	r4, #0
 80191aa:	d0f6      	beq.n	801919a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 80191ac:	9e00      	ldr	r6, [sp, #0]
 80191ae:	b2a7      	uxth	r7, r4
 80191b0:	43e4      	mvns	r4, r4
 80191b2:	f836 e015 	ldrh.w	lr, [r6, r5, lsl #1]
 80191b6:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 80191ba:	b2e4      	uxtb	r4, r4
 80191bc:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 80191c0:	122e      	asrs	r6, r5, #8
 80191c2:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 80191c6:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80191ca:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 80191ce:	00ed      	lsls	r5, r5, #3
 80191d0:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 80191d4:	fb16 f604 	smulbb	r6, r6, r4
 80191d8:	b2ed      	uxtb	r5, r5
 80191da:	fb1a fa04 	smulbb	sl, sl, r4
 80191de:	fb0c 6c07 	mla	ip, ip, r7, r6
 80191e2:	ea4f 06ee 	mov.w	r6, lr, asr #3
 80191e6:	fb15 f504 	smulbb	r5, r5, r4
 80191ea:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80191ee:	fa1f fc8c 	uxth.w	ip, ip
 80191f2:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80191f6:	fa5f fe8e 	uxtb.w	lr, lr
 80191fa:	fb06 a607 	mla	r6, r6, r7, sl
 80191fe:	f10c 0401 	add.w	r4, ip, #1
 8019202:	fb0e 5507 	mla	r5, lr, r7, r5
 8019206:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801920a:	b2ad      	uxth	r5, r5
 801920c:	b2b6      	uxth	r6, r6
 801920e:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8019212:	f105 0a01 	add.w	sl, r5, #1
 8019216:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801921a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801921e:	ea4a 0c0c 	orr.w	ip, sl, ip
 8019222:	f106 0a01 	add.w	sl, r6, #1
 8019226:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801922a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801922e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8019232:	ea4c 0c0a 	orr.w	ip, ip, sl
 8019236:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 801923a:	e7ae      	b.n	801919a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801923c:	b005      	add	sp, #20
 801923e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019242 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019242:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019246:	b085      	sub	sp, #20
 8019248:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801924a:	9203      	str	r2, [sp, #12]
 801924c:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 8019250:	9100      	str	r1, [sp, #0]
 8019252:	9201      	str	r2, [sp, #4]
 8019254:	6841      	ldr	r1, [r0, #4]
 8019256:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 801925a:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801925e:	fb01 2404 	mla	r4, r1, r4, r2
 8019262:	6802      	ldr	r2, [r0, #0]
 8019264:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8019268:	f8de 2000 	ldr.w	r2, [lr]
 801926c:	9202      	str	r2, [sp, #8]
 801926e:	9a01      	ldr	r2, [sp, #4]
 8019270:	43d6      	mvns	r6, r2
 8019272:	b2f6      	uxtb	r6, r6
 8019274:	9a00      	ldr	r2, [sp, #0]
 8019276:	2a00      	cmp	r2, #0
 8019278:	dc03      	bgt.n	8019282 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801927a:	9a03      	ldr	r2, [sp, #12]
 801927c:	2a00      	cmp	r2, #0
 801927e:	f340 8124 	ble.w	80194ca <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 8019282:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019284:	f9be c008 	ldrsh.w	ip, [lr, #8]
 8019288:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801928c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801928e:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 8019292:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8019296:	2b00      	cmp	r3, #0
 8019298:	dd0e      	ble.n	80192b8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801929a:	1408      	asrs	r0, r1, #16
 801929c:	d405      	bmi.n	80192aa <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801929e:	4560      	cmp	r0, ip
 80192a0:	da03      	bge.n	80192aa <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80192a2:	1410      	asrs	r0, r2, #16
 80192a4:	d401      	bmi.n	80192aa <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80192a6:	42b8      	cmp	r0, r7
 80192a8:	db07      	blt.n	80192ba <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80192aa:	9811      	ldr	r0, [sp, #68]	; 0x44
 80192ac:	3b01      	subs	r3, #1
 80192ae:	3402      	adds	r4, #2
 80192b0:	4401      	add	r1, r0
 80192b2:	9812      	ldr	r0, [sp, #72]	; 0x48
 80192b4:	4402      	add	r2, r0
 80192b6:	e7ee      	b.n	8019296 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 80192b8:	d06e      	beq.n	8019398 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 80192ba:	1e58      	subs	r0, r3, #1
 80192bc:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80192be:	fb05 1500 	mla	r5, r5, r0, r1
 80192c2:	142d      	asrs	r5, r5, #16
 80192c4:	d45c      	bmi.n	8019380 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 80192c6:	4565      	cmp	r5, ip
 80192c8:	da5a      	bge.n	8019380 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 80192ca:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80192cc:	fb05 2000 	mla	r0, r5, r0, r2
 80192d0:	1400      	asrs	r0, r0, #16
 80192d2:	d455      	bmi.n	8019380 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 80192d4:	42b8      	cmp	r0, r7
 80192d6:	da53      	bge.n	8019380 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 80192d8:	4699      	mov	r9, r3
 80192da:	46a2      	mov	sl, r4
 80192dc:	f8bd b004 	ldrh.w	fp, [sp, #4]
 80192e0:	f1b9 0f00 	cmp.w	r9, #0
 80192e4:	dd54      	ble.n	8019390 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 80192e6:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 80192ea:	140d      	asrs	r5, r1, #16
 80192ec:	1410      	asrs	r0, r2, #16
 80192ee:	f109 39ff 	add.w	r9, r9, #4294967295
 80192f2:	fb07 5000 	mla	r0, r7, r0, r5
 80192f6:	9d02      	ldr	r5, [sp, #8]
 80192f8:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 80192fc:	f8ba 5000 	ldrh.w	r5, [sl]
 8019300:	ea4f 2c20 	mov.w	ip, r0, asr #8
 8019304:	122f      	asrs	r7, r5, #8
 8019306:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801930a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801930e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8019312:	00ed      	lsls	r5, r5, #3
 8019314:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 8019318:	fb17 f706 	smulbb	r7, r7, r6
 801931c:	b2ed      	uxtb	r5, r5
 801931e:	fb18 f806 	smulbb	r8, r8, r6
 8019322:	fb0c 7c0b 	mla	ip, ip, fp, r7
 8019326:	10c7      	asrs	r7, r0, #3
 8019328:	fb15 f506 	smulbb	r5, r5, r6
 801932c:	00c0      	lsls	r0, r0, #3
 801932e:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8019332:	fa1f fc8c 	uxth.w	ip, ip
 8019336:	b2c0      	uxtb	r0, r0
 8019338:	fb07 870b 	mla	r7, r7, fp, r8
 801933c:	fb00 500b 	mla	r0, r0, fp, r5
 8019340:	f10c 0501 	add.w	r5, ip, #1
 8019344:	b2bf      	uxth	r7, r7
 8019346:	b280      	uxth	r0, r0
 8019348:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801934c:	f107 0801 	add.w	r8, r7, #1
 8019350:	1c45      	adds	r5, r0, #1
 8019352:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 8019356:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801935a:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801935e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8019360:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8019364:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8019368:	4401      	add	r1, r0
 801936a:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801936e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8019370:	ea45 0c0c 	orr.w	ip, r5, ip
 8019374:	4402      	add	r2, r0
 8019376:	ea4c 0c08 	orr.w	ip, ip, r8
 801937a:	f82a cb02 	strh.w	ip, [sl], #2
 801937e:	e7af      	b.n	80192e0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8019380:	f04f 0800 	mov.w	r8, #0
 8019384:	f8bd a004 	ldrh.w	sl, [sp, #4]
 8019388:	eb03 0008 	add.w	r0, r3, r8
 801938c:	2800      	cmp	r0, #0
 801938e:	dc41      	bgt.n	8019414 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8019390:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019394:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8019398:	9b00      	ldr	r3, [sp, #0]
 801939a:	2b00      	cmp	r3, #0
 801939c:	f340 8095 	ble.w	80194ca <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 80193a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80193a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80193a6:	ee30 0a04 	vadd.f32	s0, s0, s8
 80193aa:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80193ae:	eef0 6a62 	vmov.f32	s13, s5
 80193b2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80193b6:	ee31 1a05 	vadd.f32	s2, s2, s10
 80193ba:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80193be:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 80193c2:	eef0 6a43 	vmov.f32	s13, s6
 80193c6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80193ca:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 80193ce:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80193d2:	ee61 7a27 	vmul.f32	s15, s2, s15
 80193d6:	ee77 2a62 	vsub.f32	s5, s14, s5
 80193da:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80193de:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80193e2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80193e6:	ee12 2a90 	vmov	r2, s5
 80193ea:	eef0 2a47 	vmov.f32	s5, s14
 80193ee:	fb92 f3f3 	sdiv	r3, r2, r3
 80193f2:	ee13 2a10 	vmov	r2, s6
 80193f6:	9311      	str	r3, [sp, #68]	; 0x44
 80193f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80193fa:	eeb0 3a67 	vmov.f32	s6, s15
 80193fe:	fb92 f3f3 	sdiv	r3, r2, r3
 8019402:	9312      	str	r3, [sp, #72]	; 0x48
 8019404:	9b00      	ldr	r3, [sp, #0]
 8019406:	9a03      	ldr	r2, [sp, #12]
 8019408:	3b01      	subs	r3, #1
 801940a:	9300      	str	r3, [sp, #0]
 801940c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801940e:	bf08      	it	eq
 8019410:	4613      	moveq	r3, r2
 8019412:	e72f      	b.n	8019274 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 8019414:	140f      	asrs	r7, r1, #16
 8019416:	d451      	bmi.n	80194bc <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8019418:	f8de 5008 	ldr.w	r5, [lr, #8]
 801941c:	42bd      	cmp	r5, r7
 801941e:	dd4d      	ble.n	80194bc <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8019420:	ea5f 4c22 	movs.w	ip, r2, asr #16
 8019424:	d44a      	bmi.n	80194bc <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8019426:	f8de 000c 	ldr.w	r0, [lr, #12]
 801942a:	4560      	cmp	r0, ip
 801942c:	dd46      	ble.n	80194bc <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801942e:	b22d      	sxth	r5, r5
 8019430:	9802      	ldr	r0, [sp, #8]
 8019432:	fb0c 7505 	mla	r5, ip, r5, r7
 8019436:	f830 0015 	ldrh.w	r0, [r0, r5, lsl #1]
 801943a:	f06f 0501 	mvn.w	r5, #1
 801943e:	fb05 fb08 	mul.w	fp, r5, r8
 8019442:	ea4f 2c20 	mov.w	ip, r0, asr #8
 8019446:	f834 500b 	ldrh.w	r5, [r4, fp]
 801944a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801944e:	122f      	asrs	r7, r5, #8
 8019450:	ea4f 09e5 	mov.w	r9, r5, asr #3
 8019454:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8019458:	00ed      	lsls	r5, r5, #3
 801945a:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801945e:	fb17 f706 	smulbb	r7, r7, r6
 8019462:	b2ed      	uxtb	r5, r5
 8019464:	fb19 f906 	smulbb	r9, r9, r6
 8019468:	fb0c 7c0a 	mla	ip, ip, sl, r7
 801946c:	10c7      	asrs	r7, r0, #3
 801946e:	fb15 f506 	smulbb	r5, r5, r6
 8019472:	00c0      	lsls	r0, r0, #3
 8019474:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8019478:	fa1f fc8c 	uxth.w	ip, ip
 801947c:	b2c0      	uxtb	r0, r0
 801947e:	fb07 970a 	mla	r7, r7, sl, r9
 8019482:	fb00 500a 	mla	r0, r0, sl, r5
 8019486:	f10c 0501 	add.w	r5, ip, #1
 801948a:	b2bf      	uxth	r7, r7
 801948c:	b280      	uxth	r0, r0
 801948e:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8019492:	f107 0901 	add.w	r9, r7, #1
 8019496:	1c45      	adds	r5, r0, #1
 8019498:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 801949c:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80194a0:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 80194a4:	ea4f 1959 	mov.w	r9, r9, lsr #5
 80194a8:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 80194ac:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80194b0:	ea45 0c0c 	orr.w	ip, r5, ip
 80194b4:	ea4c 0c09 	orr.w	ip, ip, r9
 80194b8:	f824 c00b 	strh.w	ip, [r4, fp]
 80194bc:	9811      	ldr	r0, [sp, #68]	; 0x44
 80194be:	f108 38ff 	add.w	r8, r8, #4294967295
 80194c2:	4401      	add	r1, r0
 80194c4:	9812      	ldr	r0, [sp, #72]	; 0x48
 80194c6:	4402      	add	r2, r0
 80194c8:	e75e      	b.n	8019388 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 80194ca:	b005      	add	sp, #20
 80194cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080194d0 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80194d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80194d4:	b085      	sub	sp, #20
 80194d6:	4693      	mov	fp, r2
 80194d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80194dc:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 80194de:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80194e0:	6870      	ldr	r0, [r6, #4]
 80194e2:	9101      	str	r1, [sp, #4]
 80194e4:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 80194e8:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 80194ec:	fb00 2404 	mla	r4, r0, r4, r2
 80194f0:	6832      	ldr	r2, [r6, #0]
 80194f2:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80194f6:	682a      	ldr	r2, [r5, #0]
 80194f8:	9202      	str	r2, [sp, #8]
 80194fa:	9a01      	ldr	r2, [sp, #4]
 80194fc:	2a00      	cmp	r2, #0
 80194fe:	dc03      	bgt.n	8019508 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8019500:	f1bb 0f00 	cmp.w	fp, #0
 8019504:	f340 809a 	ble.w	801963c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 8019508:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801950a:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801950e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8019512:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8019514:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 8019518:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801951c:	2b00      	cmp	r3, #0
 801951e:	dd0c      	ble.n	801953a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8019520:	1406      	asrs	r6, r0, #16
 8019522:	d405      	bmi.n	8019530 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8019524:	454e      	cmp	r6, r9
 8019526:	da03      	bge.n	8019530 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8019528:	1416      	asrs	r6, r2, #16
 801952a:	d401      	bmi.n	8019530 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801952c:	4546      	cmp	r6, r8
 801952e:	db05      	blt.n	801953c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8019530:	4470      	add	r0, lr
 8019532:	4462      	add	r2, ip
 8019534:	3b01      	subs	r3, #1
 8019536:	3402      	adds	r4, #2
 8019538:	e7f0      	b.n	801951c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801953a:	d00f      	beq.n	801955c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801953c:	1e5e      	subs	r6, r3, #1
 801953e:	fb0e 0706 	mla	r7, lr, r6, r0
 8019542:	143f      	asrs	r7, r7, #16
 8019544:	d541      	bpl.n	80195ca <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 8019546:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 801954a:	4698      	mov	r8, r3
 801954c:	9603      	str	r6, [sp, #12]
 801954e:	f1b8 0f00 	cmp.w	r8, #0
 8019552:	dc56      	bgt.n	8019602 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 8019554:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019558:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801955c:	9b01      	ldr	r3, [sp, #4]
 801955e:	2b00      	cmp	r3, #0
 8019560:	dd6c      	ble.n	801963c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 8019562:	ee30 0a04 	vadd.f32	s0, s0, s8
 8019566:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019568:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801956c:	eeb0 6a62 	vmov.f32	s12, s5
 8019570:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8019574:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019578:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801957c:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8019580:	eeb0 6a43 	vmov.f32	s12, s6
 8019584:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019588:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801958c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019590:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019594:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019598:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801959c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80195a0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80195a4:	ee12 2a90 	vmov	r2, s5
 80195a8:	eef0 2a47 	vmov.f32	s5, s14
 80195ac:	fb92 fef3 	sdiv	lr, r2, r3
 80195b0:	ee13 2a10 	vmov	r2, s6
 80195b4:	eeb0 3a67 	vmov.f32	s6, s15
 80195b8:	fb92 fcf3 	sdiv	ip, r2, r3
 80195bc:	9b01      	ldr	r3, [sp, #4]
 80195be:	3b01      	subs	r3, #1
 80195c0:	9301      	str	r3, [sp, #4]
 80195c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80195c4:	bf08      	it	eq
 80195c6:	465b      	moveq	r3, fp
 80195c8:	e797      	b.n	80194fa <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 80195ca:	454f      	cmp	r7, r9
 80195cc:	dabb      	bge.n	8019546 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80195ce:	fb0c 2606 	mla	r6, ip, r6, r2
 80195d2:	1436      	asrs	r6, r6, #16
 80195d4:	d4b7      	bmi.n	8019546 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80195d6:	4546      	cmp	r6, r8
 80195d8:	dab5      	bge.n	8019546 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80195da:	461e      	mov	r6, r3
 80195dc:	46a0      	mov	r8, r4
 80195de:	2e00      	cmp	r6, #0
 80195e0:	ddb8      	ble.n	8019554 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80195e2:	1417      	asrs	r7, r2, #16
 80195e4:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 80195e8:	ea4f 4920 	mov.w	r9, r0, asr #16
 80195ec:	9902      	ldr	r1, [sp, #8]
 80195ee:	4470      	add	r0, lr
 80195f0:	4462      	add	r2, ip
 80195f2:	fb0a 9707 	mla	r7, sl, r7, r9
 80195f6:	3e01      	subs	r6, #1
 80195f8:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 80195fc:	f828 7b02 	strh.w	r7, [r8], #2
 8019600:	e7ed      	b.n	80195de <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 8019602:	ea5f 4920 	movs.w	r9, r0, asr #16
 8019606:	d414      	bmi.n	8019632 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 8019608:	68ae      	ldr	r6, [r5, #8]
 801960a:	454e      	cmp	r6, r9
 801960c:	dd11      	ble.n	8019632 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801960e:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8019612:	d40e      	bmi.n	8019632 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 8019614:	68ef      	ldr	r7, [r5, #12]
 8019616:	4557      	cmp	r7, sl
 8019618:	dd0b      	ble.n	8019632 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801961a:	b236      	sxth	r6, r6
 801961c:	f06f 0101 	mvn.w	r1, #1
 8019620:	9f02      	ldr	r7, [sp, #8]
 8019622:	fb0a 9606 	mla	r6, sl, r6, r9
 8019626:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801962a:	fb01 f608 	mul.w	r6, r1, r8
 801962e:	9903      	ldr	r1, [sp, #12]
 8019630:	538f      	strh	r7, [r1, r6]
 8019632:	4470      	add	r0, lr
 8019634:	4462      	add	r2, ip
 8019636:	f108 38ff 	add.w	r8, r8, #4294967295
 801963a:	e788      	b.n	801954e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801963c:	b005      	add	sp, #20
 801963e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019642 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019642:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019646:	b087      	sub	sp, #28
 8019648:	468b      	mov	fp, r1
 801964a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801964e:	9815      	ldr	r0, [sp, #84]	; 0x54
 8019650:	9203      	str	r2, [sp, #12]
 8019652:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8019656:	6841      	ldr	r1, [r0, #4]
 8019658:	9204      	str	r2, [sp, #16]
 801965a:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 801965e:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 8019662:	fb01 2505 	mla	r5, r1, r5, r2
 8019666:	6802      	ldr	r2, [r0, #0]
 8019668:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 801966c:	f8d9 2000 	ldr.w	r2, [r9]
 8019670:	9201      	str	r2, [sp, #4]
 8019672:	f1bb 0f00 	cmp.w	fp, #0
 8019676:	dc03      	bgt.n	8019680 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8019678:	9a03      	ldr	r2, [sp, #12]
 801967a:	2a00      	cmp	r2, #0
 801967c:	f340 8158 	ble.w	8019930 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
 8019680:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8019682:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 8019686:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801968a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801968c:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 8019690:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8019694:	2b00      	cmp	r3, #0
 8019696:	dd0e      	ble.n	80196b6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8019698:	1402      	asrs	r2, r0, #16
 801969a:	d405      	bmi.n	80196a8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801969c:	42ba      	cmp	r2, r7
 801969e:	da03      	bge.n	80196a8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80196a0:	140a      	asrs	r2, r1, #16
 80196a2:	d401      	bmi.n	80196a8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80196a4:	42b2      	cmp	r2, r6
 80196a6:	db07      	blt.n	80196b8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80196a8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80196aa:	3b01      	subs	r3, #1
 80196ac:	3502      	adds	r5, #2
 80196ae:	4410      	add	r0, r2
 80196b0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80196b2:	4411      	add	r1, r2
 80196b4:	e7ee      	b.n	8019694 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 80196b6:	d017      	beq.n	80196e8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 80196b8:	1e5a      	subs	r2, r3, #1
 80196ba:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80196bc:	fb04 0402 	mla	r4, r4, r2, r0
 80196c0:	1424      	asrs	r4, r4, #16
 80196c2:	d409      	bmi.n	80196d8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80196c4:	42bc      	cmp	r4, r7
 80196c6:	da07      	bge.n	80196d8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80196c8:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80196ca:	fb04 1202 	mla	r2, r4, r2, r1
 80196ce:	1412      	asrs	r2, r2, #16
 80196d0:	d402      	bmi.n	80196d8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80196d2:	42b2      	cmp	r2, r6
 80196d4:	f2c0 80bf 	blt.w	8019856 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 80196d8:	2700      	movs	r7, #0
 80196da:	19da      	adds	r2, r3, r7
 80196dc:	2a00      	cmp	r2, #0
 80196de:	dc3e      	bgt.n	801975e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 80196e0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80196e4:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 80196e8:	f1bb 0f00 	cmp.w	fp, #0
 80196ec:	f340 8120 	ble.w	8019930 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
 80196f0:	ee30 0a04 	vadd.f32	s0, s0, s8
 80196f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80196f6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80196fa:	f1bb 0b01 	subs.w	fp, fp, #1
 80196fe:	eeb0 6a62 	vmov.f32	s12, s5
 8019702:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8019706:	ee31 1a05 	vadd.f32	s2, s2, s10
 801970a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801970e:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8019712:	eeb0 6a43 	vmov.f32	s12, s6
 8019716:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801971a:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801971e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019722:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019726:	ee77 2a62 	vsub.f32	s5, s14, s5
 801972a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801972e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019732:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019736:	ee12 2a90 	vmov	r2, s5
 801973a:	eef0 2a47 	vmov.f32	s5, s14
 801973e:	fb92 f3f3 	sdiv	r3, r2, r3
 8019742:	ee13 2a10 	vmov	r2, s6
 8019746:	9313      	str	r3, [sp, #76]	; 0x4c
 8019748:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801974a:	eeb0 3a67 	vmov.f32	s6, s15
 801974e:	fb92 f3f3 	sdiv	r3, r2, r3
 8019752:	9a03      	ldr	r2, [sp, #12]
 8019754:	9314      	str	r3, [sp, #80]	; 0x50
 8019756:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019758:	bf08      	it	eq
 801975a:	4613      	moveq	r3, r2
 801975c:	e789      	b.n	8019672 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801975e:	1406      	asrs	r6, r0, #16
 8019760:	d42d      	bmi.n	80197be <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8019762:	f8d9 4008 	ldr.w	r4, [r9, #8]
 8019766:	42b4      	cmp	r4, r6
 8019768:	dd29      	ble.n	80197be <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801976a:	ea5f 4c21 	movs.w	ip, r1, asr #16
 801976e:	d426      	bmi.n	80197be <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8019770:	f8d9 200c 	ldr.w	r2, [r9, #12]
 8019774:	4562      	cmp	r2, ip
 8019776:	dd22      	ble.n	80197be <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8019778:	b224      	sxth	r4, r4
 801977a:	9a01      	ldr	r2, [sp, #4]
 801977c:	fb0c 6404 	mla	r4, ip, r4, r6
 8019780:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
 8019784:	0e22      	lsrs	r2, r4, #24
 8019786:	d01a      	beq.n	80197be <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8019788:	9e04      	ldr	r6, [sp, #16]
 801978a:	4372      	muls	r2, r6
 801978c:	1c56      	adds	r6, r2, #1
 801978e:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8019792:	0a26      	lsrs	r6, r4, #8
 8019794:	1212      	asrs	r2, r2, #8
 8019796:	9605      	str	r6, [sp, #20]
 8019798:	2aff      	cmp	r2, #255	; 0xff
 801979a:	d116      	bne.n	80197ca <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 801979c:	f06f 0201 	mvn.w	r2, #1
 80197a0:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 80197a4:	fb02 fc07 	mul.w	ip, r2, r7
 80197a8:	0962      	lsrs	r2, r4, #5
 80197aa:	f026 0607 	bic.w	r6, r6, #7
 80197ae:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 80197b2:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80197b6:	4316      	orrs	r6, r2
 80197b8:	4326      	orrs	r6, r4
 80197ba:	f825 600c 	strh.w	r6, [r5, ip]
 80197be:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80197c0:	3f01      	subs	r7, #1
 80197c2:	4410      	add	r0, r2
 80197c4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80197c6:	4411      	add	r1, r2
 80197c8:	e787      	b.n	80196da <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80197ca:	f06f 0601 	mvn.w	r6, #1
 80197ce:	fa1f fa82 	uxth.w	sl, r2
 80197d2:	f3c4 4c07 	ubfx	ip, r4, #16, #8
 80197d6:	43d2      	mvns	r2, r2
 80197d8:	437e      	muls	r6, r7
 80197da:	b2e4      	uxtb	r4, r4
 80197dc:	fb1c fc0a 	smulbb	ip, ip, sl
 80197e0:	b2d2      	uxtb	r2, r2
 80197e2:	f835 8006 	ldrh.w	r8, [r5, r6]
 80197e6:	fb14 f40a 	smulbb	r4, r4, sl
 80197ea:	9602      	str	r6, [sp, #8]
 80197ec:	ea4f 2e28 	mov.w	lr, r8, asr #8
 80197f0:	f89d 6014 	ldrb.w	r6, [sp, #20]
 80197f4:	fb16 f60a 	smulbb	r6, r6, sl
 80197f8:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 80197fc:	fb0e ce02 	mla	lr, lr, r2, ip
 8019800:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 8019804:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8019808:	fa1f fe8e 	uxth.w	lr, lr
 801980c:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8019810:	fa5f f888 	uxtb.w	r8, r8
 8019814:	fb0c 6c02 	mla	ip, ip, r2, r6
 8019818:	fb08 4402 	mla	r4, r8, r2, r4
 801981c:	f10e 0201 	add.w	r2, lr, #1
 8019820:	fa1f fc8c 	uxth.w	ip, ip
 8019824:	b2a4      	uxth	r4, r4
 8019826:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801982a:	9a02      	ldr	r2, [sp, #8]
 801982c:	1c66      	adds	r6, r4, #1
 801982e:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 8019832:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 8019836:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801983a:	ea46 0e0e 	orr.w	lr, r6, lr
 801983e:	f10c 0601 	add.w	r6, ip, #1
 8019842:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 8019846:	0976      	lsrs	r6, r6, #5
 8019848:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801984c:	ea4e 0e06 	orr.w	lr, lr, r6
 8019850:	f825 e002 	strh.w	lr, [r5, r2]
 8019854:	e7b3      	b.n	80197be <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8019856:	f04f 0800 	mov.w	r8, #0
 801985a:	eba3 0208 	sub.w	r2, r3, r8
 801985e:	2a00      	cmp	r2, #0
 8019860:	f77f af3e 	ble.w	80196e0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8019864:	1404      	asrs	r4, r0, #16
 8019866:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
 801986a:	140a      	asrs	r2, r1, #16
 801986c:	fb06 4202 	mla	r2, r6, r2, r4
 8019870:	9c01      	ldr	r4, [sp, #4]
 8019872:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
 8019876:	0e22      	lsrs	r2, r4, #24
 8019878:	d015      	beq.n	80198a6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 801987a:	9e04      	ldr	r6, [sp, #16]
 801987c:	4372      	muls	r2, r6
 801987e:	1c56      	adds	r6, r2, #1
 8019880:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8019884:	0a26      	lsrs	r6, r4, #8
 8019886:	1212      	asrs	r2, r2, #8
 8019888:	2aff      	cmp	r2, #255	; 0xff
 801988a:	d113      	bne.n	80198b4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 801988c:	0962      	lsrs	r2, r4, #5
 801988e:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 8019892:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 8019896:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801989a:	f026 0607 	bic.w	r6, r6, #7
 801989e:	4316      	orrs	r6, r2
 80198a0:	4326      	orrs	r6, r4
 80198a2:	f825 6018 	strh.w	r6, [r5, r8, lsl #1]
 80198a6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80198a8:	f108 0801 	add.w	r8, r8, #1
 80198ac:	4410      	add	r0, r2
 80198ae:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80198b0:	4411      	add	r1, r2
 80198b2:	e7d2      	b.n	801985a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 80198b4:	f835 e018 	ldrh.w	lr, [r5, r8, lsl #1]
 80198b8:	fa1f fa82 	uxth.w	sl, r2
 80198bc:	f3c4 4707 	ubfx	r7, r4, #16, #8
 80198c0:	43d2      	mvns	r2, r2
 80198c2:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 80198c6:	fb17 f70a 	smulbb	r7, r7, sl
 80198ca:	b2d2      	uxtb	r2, r2
 80198cc:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80198d0:	b2e4      	uxtb	r4, r4
 80198d2:	b2f6      	uxtb	r6, r6
 80198d4:	fb0c 7c02 	mla	ip, ip, r2, r7
 80198d8:	ea4f 07ee 	mov.w	r7, lr, asr #3
 80198dc:	fb14 f40a 	smulbb	r4, r4, sl
 80198e0:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80198e4:	fa1f fc8c 	uxth.w	ip, ip
 80198e8:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80198ec:	fb16 f60a 	smulbb	r6, r6, sl
 80198f0:	fa5f fe8e 	uxtb.w	lr, lr
 80198f4:	fb0e 4402 	mla	r4, lr, r2, r4
 80198f8:	fb07 6702 	mla	r7, r7, r2, r6
 80198fc:	f10c 0201 	add.w	r2, ip, #1
 8019900:	b2a4      	uxth	r4, r4
 8019902:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8019906:	1c66      	adds	r6, r4, #1
 8019908:	b2bf      	uxth	r7, r7
 801990a:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801990e:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 8019912:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8019916:	ea46 0c0c 	orr.w	ip, r6, ip
 801991a:	1c7e      	adds	r6, r7, #1
 801991c:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 8019920:	0976      	lsrs	r6, r6, #5
 8019922:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8019926:	ea4c 0c06 	orr.w	ip, ip, r6
 801992a:	f825 c018 	strh.w	ip, [r5, r8, lsl #1]
 801992e:	e7ba      	b.n	80198a6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 8019930:	b007      	add	sp, #28
 8019932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08019938 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801993c:	b085      	sub	sp, #20
 801993e:	468b      	mov	fp, r1
 8019940:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8019944:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8019946:	9203      	str	r2, [sp, #12]
 8019948:	6841      	ldr	r1, [r0, #4]
 801994a:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801994e:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8019952:	fb01 2404 	mla	r4, r1, r4, r2
 8019956:	6802      	ldr	r2, [r0, #0]
 8019958:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801995c:	f8d8 2000 	ldr.w	r2, [r8]
 8019960:	9201      	str	r2, [sp, #4]
 8019962:	f1bb 0f00 	cmp.w	fp, #0
 8019966:	dc03      	bgt.n	8019970 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8019968:	9a03      	ldr	r2, [sp, #12]
 801996a:	2a00      	cmp	r2, #0
 801996c:	f340 814f 	ble.w	8019c0e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 8019970:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019972:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 8019976:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801997a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801997c:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 8019980:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8019984:	2b00      	cmp	r3, #0
 8019986:	dd0e      	ble.n	80199a6 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8019988:	1408      	asrs	r0, r1, #16
 801998a:	d405      	bmi.n	8019998 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801998c:	42b8      	cmp	r0, r7
 801998e:	da03      	bge.n	8019998 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8019990:	1410      	asrs	r0, r2, #16
 8019992:	d401      	bmi.n	8019998 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8019994:	42b0      	cmp	r0, r6
 8019996:	db07      	blt.n	80199a8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8019998:	9811      	ldr	r0, [sp, #68]	; 0x44
 801999a:	3b01      	subs	r3, #1
 801999c:	3402      	adds	r4, #2
 801999e:	4401      	add	r1, r0
 80199a0:	9812      	ldr	r0, [sp, #72]	; 0x48
 80199a2:	4402      	add	r2, r0
 80199a4:	e7ee      	b.n	8019984 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 80199a6:	d017      	beq.n	80199d8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 80199a8:	1e58      	subs	r0, r3, #1
 80199aa:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80199ac:	fb05 1500 	mla	r5, r5, r0, r1
 80199b0:	142d      	asrs	r5, r5, #16
 80199b2:	d409      	bmi.n	80199c8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80199b4:	42bd      	cmp	r5, r7
 80199b6:	da07      	bge.n	80199c8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80199b8:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80199ba:	fb05 2000 	mla	r0, r5, r0, r2
 80199be:	1400      	asrs	r0, r0, #16
 80199c0:	d402      	bmi.n	80199c8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80199c2:	42b0      	cmp	r0, r6
 80199c4:	f2c0 80ba 	blt.w	8019b3c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 80199c8:	2600      	movs	r6, #0
 80199ca:	1998      	adds	r0, r3, r6
 80199cc:	2800      	cmp	r0, #0
 80199ce:	dc3e      	bgt.n	8019a4e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 80199d0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80199d4:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80199d8:	f1bb 0f00 	cmp.w	fp, #0
 80199dc:	f340 8117 	ble.w	8019c0e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 80199e0:	ee30 0a04 	vadd.f32	s0, s0, s8
 80199e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80199e6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80199ea:	f1bb 0b01 	subs.w	fp, fp, #1
 80199ee:	eeb0 6a62 	vmov.f32	s12, s5
 80199f2:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80199f6:	ee31 1a05 	vadd.f32	s2, s2, s10
 80199fa:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80199fe:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8019a02:	eeb0 6a43 	vmov.f32	s12, s6
 8019a06:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019a0a:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8019a0e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019a12:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019a16:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019a1a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019a1e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019a22:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019a26:	ee12 2a90 	vmov	r2, s5
 8019a2a:	eef0 2a47 	vmov.f32	s5, s14
 8019a2e:	fb92 f3f3 	sdiv	r3, r2, r3
 8019a32:	ee13 2a10 	vmov	r2, s6
 8019a36:	9311      	str	r3, [sp, #68]	; 0x44
 8019a38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019a3a:	eeb0 3a67 	vmov.f32	s6, s15
 8019a3e:	fb92 f3f3 	sdiv	r3, r2, r3
 8019a42:	9a03      	ldr	r2, [sp, #12]
 8019a44:	9312      	str	r3, [sp, #72]	; 0x48
 8019a46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019a48:	bf08      	it	eq
 8019a4a:	4613      	moveq	r3, r2
 8019a4c:	e789      	b.n	8019962 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 8019a4e:	140f      	asrs	r7, r1, #16
 8019a50:	d424      	bmi.n	8019a9c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8019a52:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8019a56:	42bd      	cmp	r5, r7
 8019a58:	dd20      	ble.n	8019a9c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8019a5a:	ea5f 4c22 	movs.w	ip, r2, asr #16
 8019a5e:	d41d      	bmi.n	8019a9c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8019a60:	f8d8 000c 	ldr.w	r0, [r8, #12]
 8019a64:	4560      	cmp	r0, ip
 8019a66:	dd19      	ble.n	8019a9c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8019a68:	b22d      	sxth	r5, r5
 8019a6a:	9801      	ldr	r0, [sp, #4]
 8019a6c:	fb0c 7505 	mla	r5, ip, r5, r7
 8019a70:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8019a74:	0e07      	lsrs	r7, r0, #24
 8019a76:	2fff      	cmp	r7, #255	; 0xff
 8019a78:	d116      	bne.n	8019aa8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8019a7a:	f06f 0501 	mvn.w	r5, #1
 8019a7e:	fb05 f706 	mul.w	r7, r5, r6
 8019a82:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 8019a86:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 8019a8a:	0945      	lsrs	r5, r0, #5
 8019a8c:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 8019a90:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8019a94:	ea4c 0505 	orr.w	r5, ip, r5
 8019a98:	4305      	orrs	r5, r0
 8019a9a:	53e5      	strh	r5, [r4, r7]
 8019a9c:	9811      	ldr	r0, [sp, #68]	; 0x44
 8019a9e:	3e01      	subs	r6, #1
 8019aa0:	4401      	add	r1, r0
 8019aa2:	9812      	ldr	r0, [sp, #72]	; 0x48
 8019aa4:	4402      	add	r2, r0
 8019aa6:	e790      	b.n	80199ca <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8019aa8:	b2fd      	uxtb	r5, r7
 8019aaa:	2f00      	cmp	r7, #0
 8019aac:	d0f6      	beq.n	8019a9c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8019aae:	f06f 0701 	mvn.w	r7, #1
 8019ab2:	fa1f f985 	uxth.w	r9, r5
 8019ab6:	43ed      	mvns	r5, r5
 8019ab8:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 8019abc:	4377      	muls	r7, r6
 8019abe:	fb1a fa09 	smulbb	sl, sl, r9
 8019ac2:	b2ed      	uxtb	r5, r5
 8019ac4:	f834 e007 	ldrh.w	lr, [r4, r7]
 8019ac8:	9702      	str	r7, [sp, #8]
 8019aca:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8019ace:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8019ad2:	fb17 f709 	smulbb	r7, r7, r9
 8019ad6:	b2c0      	uxtb	r0, r0
 8019ad8:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8019adc:	fb10 f009 	smulbb	r0, r0, r9
 8019ae0:	fb0c 7c05 	mla	ip, ip, r5, r7
 8019ae4:	ea4f 07ee 	mov.w	r7, lr, asr #3
 8019ae8:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8019aec:	fa1f fc8c 	uxth.w	ip, ip
 8019af0:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8019af4:	fa5f fe8e 	uxtb.w	lr, lr
 8019af8:	fb07 a705 	mla	r7, r7, r5, sl
 8019afc:	fb0e 0005 	mla	r0, lr, r5, r0
 8019b00:	f10c 0501 	add.w	r5, ip, #1
 8019b04:	b2bf      	uxth	r7, r7
 8019b06:	b280      	uxth	r0, r0
 8019b08:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8019b0c:	f100 0a01 	add.w	sl, r0, #1
 8019b10:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8019b14:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 8019b18:	9802      	ldr	r0, [sp, #8]
 8019b1a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8019b1e:	ea4a 0c0c 	orr.w	ip, sl, ip
 8019b22:	f107 0a01 	add.w	sl, r7, #1
 8019b26:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 8019b2a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8019b2e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8019b32:	ea4c 0c0a 	orr.w	ip, ip, sl
 8019b36:	f824 c000 	strh.w	ip, [r4, r0]
 8019b3a:	e7af      	b.n	8019a9c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8019b3c:	f04f 0e00 	mov.w	lr, #0
 8019b40:	eba3 000e 	sub.w	r0, r3, lr
 8019b44:	2800      	cmp	r0, #0
 8019b46:	f77f af43 	ble.w	80199d0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8019b4a:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 8019b4e:	140d      	asrs	r5, r1, #16
 8019b50:	1410      	asrs	r0, r2, #16
 8019b52:	fb06 5000 	mla	r0, r6, r0, r5
 8019b56:	9d01      	ldr	r5, [sp, #4]
 8019b58:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 8019b5c:	0e2e      	lsrs	r6, r5, #24
 8019b5e:	2eff      	cmp	r6, #255	; 0xff
 8019b60:	d112      	bne.n	8019b88 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 8019b62:	482c      	ldr	r0, [pc, #176]	; (8019c14 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>)
 8019b64:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 8019b68:	0968      	lsrs	r0, r5, #5
 8019b6a:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8019b6e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8019b72:	4330      	orrs	r0, r6
 8019b74:	4328      	orrs	r0, r5
 8019b76:	f824 001e 	strh.w	r0, [r4, lr, lsl #1]
 8019b7a:	9811      	ldr	r0, [sp, #68]	; 0x44
 8019b7c:	f10e 0e01 	add.w	lr, lr, #1
 8019b80:	4401      	add	r1, r0
 8019b82:	9812      	ldr	r0, [sp, #72]	; 0x48
 8019b84:	4402      	add	r2, r0
 8019b86:	e7db      	b.n	8019b40 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8019b88:	b2f0      	uxtb	r0, r6
 8019b8a:	2e00      	cmp	r6, #0
 8019b8c:	d0f5      	beq.n	8019b7a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8019b8e:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 8019b92:	fa1f f980 	uxth.w	r9, r0
 8019b96:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8019b9a:	43c0      	mvns	r0, r0
 8019b9c:	ea4f 272c 	mov.w	r7, ip, asr #8
 8019ba0:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8019ba4:	fb16 f609 	smulbb	r6, r6, r9
 8019ba8:	b2c0      	uxtb	r0, r0
 8019baa:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8019bae:	b2ed      	uxtb	r5, r5
 8019bb0:	fb1a fa09 	smulbb	sl, sl, r9
 8019bb4:	fb07 6700 	mla	r7, r7, r0, r6
 8019bb8:	ea4f 06ec 	mov.w	r6, ip, asr #3
 8019bbc:	fb15 f509 	smulbb	r5, r5, r9
 8019bc0:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8019bc4:	b2bf      	uxth	r7, r7
 8019bc6:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8019bca:	fa5f fc8c 	uxtb.w	ip, ip
 8019bce:	fb06 a600 	mla	r6, r6, r0, sl
 8019bd2:	fb0c 5500 	mla	r5, ip, r0, r5
 8019bd6:	1c78      	adds	r0, r7, #1
 8019bd8:	b2b6      	uxth	r6, r6
 8019bda:	b2ad      	uxth	r5, r5
 8019bdc:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 8019be0:	f105 0a01 	add.w	sl, r5, #1
 8019be4:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8019be8:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8019bec:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8019bf0:	ea4a 0707 	orr.w	r7, sl, r7
 8019bf4:	f106 0a01 	add.w	sl, r6, #1
 8019bf8:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8019bfc:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8019c00:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8019c04:	ea47 070a 	orr.w	r7, r7, sl
 8019c08:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 8019c0c:	e7b5      	b.n	8019b7a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8019c0e:	b005      	add	sp, #20
 8019c10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019c14:	fffff800 	.word	0xfffff800

08019c18 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019c1c:	b087      	sub	sp, #28
 8019c1e:	468b      	mov	fp, r1
 8019c20:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8019c24:	9815      	ldr	r0, [sp, #84]	; 0x54
 8019c26:	9203      	str	r2, [sp, #12]
 8019c28:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8019c2c:	6841      	ldr	r1, [r0, #4]
 8019c2e:	9204      	str	r2, [sp, #16]
 8019c30:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 8019c34:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 8019c38:	fb01 2404 	mla	r4, r1, r4, r2
 8019c3c:	6802      	ldr	r2, [r0, #0]
 8019c3e:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8019c42:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8019c46:	3201      	adds	r2, #1
 8019c48:	f022 0201 	bic.w	r2, r2, #1
 8019c4c:	9200      	str	r2, [sp, #0]
 8019c4e:	f8d9 2000 	ldr.w	r2, [r9]
 8019c52:	9201      	str	r2, [sp, #4]
 8019c54:	f1bb 0f00 	cmp.w	fp, #0
 8019c58:	dc03      	bgt.n	8019c62 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8019c5a:	9a03      	ldr	r2, [sp, #12]
 8019c5c:	2a00      	cmp	r2, #0
 8019c5e:	f340 816a 	ble.w	8019f36 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 8019c62:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8019c64:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 8019c68:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8019c6c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8019c6e:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 8019c72:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8019c76:	2b00      	cmp	r3, #0
 8019c78:	dd0e      	ble.n	8019c98 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8019c7a:	1402      	asrs	r2, r0, #16
 8019c7c:	d405      	bmi.n	8019c8a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8019c7e:	42ba      	cmp	r2, r7
 8019c80:	da03      	bge.n	8019c8a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8019c82:	140a      	asrs	r2, r1, #16
 8019c84:	d401      	bmi.n	8019c8a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8019c86:	42b2      	cmp	r2, r6
 8019c88:	db07      	blt.n	8019c9a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8019c8a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8019c8c:	3b01      	subs	r3, #1
 8019c8e:	3402      	adds	r4, #2
 8019c90:	4410      	add	r0, r2
 8019c92:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019c94:	4411      	add	r1, r2
 8019c96:	e7ee      	b.n	8019c76 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8019c98:	d017      	beq.n	8019cca <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8019c9a:	1e5a      	subs	r2, r3, #1
 8019c9c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8019c9e:	fb05 0502 	mla	r5, r5, r2, r0
 8019ca2:	142d      	asrs	r5, r5, #16
 8019ca4:	d409      	bmi.n	8019cba <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8019ca6:	42bd      	cmp	r5, r7
 8019ca8:	da07      	bge.n	8019cba <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8019caa:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8019cac:	fb05 1202 	mla	r2, r5, r2, r1
 8019cb0:	1412      	asrs	r2, r2, #16
 8019cb2:	d402      	bmi.n	8019cba <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8019cb4:	42b2      	cmp	r2, r6
 8019cb6:	f2c0 80c8 	blt.w	8019e4a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 8019cba:	2700      	movs	r7, #0
 8019cbc:	19da      	adds	r2, r3, r7
 8019cbe:	2a00      	cmp	r2, #0
 8019cc0:	dc3e      	bgt.n	8019d40 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 8019cc2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019cc6:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8019cca:	f1bb 0f00 	cmp.w	fp, #0
 8019cce:	f340 8132 	ble.w	8019f36 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 8019cd2:	ee30 0a04 	vadd.f32	s0, s0, s8
 8019cd6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019cd8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019cdc:	f1bb 0b01 	subs.w	fp, fp, #1
 8019ce0:	eeb0 6a62 	vmov.f32	s12, s5
 8019ce4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8019ce8:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019cec:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019cf0:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8019cf4:	eeb0 6a43 	vmov.f32	s12, s6
 8019cf8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019cfc:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8019d00:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019d04:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019d08:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019d0c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019d10:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019d14:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019d18:	ee12 2a90 	vmov	r2, s5
 8019d1c:	eef0 2a47 	vmov.f32	s5, s14
 8019d20:	fb92 f3f3 	sdiv	r3, r2, r3
 8019d24:	ee13 2a10 	vmov	r2, s6
 8019d28:	9313      	str	r3, [sp, #76]	; 0x4c
 8019d2a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019d2c:	eeb0 3a67 	vmov.f32	s6, s15
 8019d30:	fb92 f3f3 	sdiv	r3, r2, r3
 8019d34:	9a03      	ldr	r2, [sp, #12]
 8019d36:	9314      	str	r3, [sp, #80]	; 0x50
 8019d38:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019d3a:	bf08      	it	eq
 8019d3c:	4613      	moveq	r3, r2
 8019d3e:	e789      	b.n	8019c54 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8019d40:	1405      	asrs	r5, r0, #16
 8019d42:	d436      	bmi.n	8019db2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8019d44:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8019d48:	42aa      	cmp	r2, r5
 8019d4a:	dd32      	ble.n	8019db2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8019d4c:	140e      	asrs	r6, r1, #16
 8019d4e:	d430      	bmi.n	8019db2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8019d50:	f8d9 200c 	ldr.w	r2, [r9, #12]
 8019d54:	42b2      	cmp	r2, r6
 8019d56:	dd2c      	ble.n	8019db2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8019d58:	9a00      	ldr	r2, [sp, #0]
 8019d5a:	fb06 5502 	mla	r5, r6, r2, r5
 8019d5e:	9e01      	ldr	r6, [sp, #4]
 8019d60:	086a      	lsrs	r2, r5, #1
 8019d62:	5cb2      	ldrb	r2, [r6, r2]
 8019d64:	07ee      	lsls	r6, r5, #31
 8019d66:	bf54      	ite	pl
 8019d68:	f002 020f 	andpl.w	r2, r2, #15
 8019d6c:	1112      	asrmi	r2, r2, #4
 8019d6e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8019d72:	b2d2      	uxtb	r2, r2
 8019d74:	b1ea      	cbz	r2, 8019db2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8019d76:	9d04      	ldr	r5, [sp, #16]
 8019d78:	436a      	muls	r2, r5
 8019d7a:	1c55      	adds	r5, r2, #1
 8019d7c:	eb05 2222 	add.w	r2, r5, r2, asr #8
 8019d80:	4d6e      	ldr	r5, [pc, #440]	; (8019f3c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 8019d82:	1212      	asrs	r2, r2, #8
 8019d84:	682d      	ldr	r5, [r5, #0]
 8019d86:	2aff      	cmp	r2, #255	; 0xff
 8019d88:	ea4f 2615 	mov.w	r6, r5, lsr #8
 8019d8c:	9605      	str	r6, [sp, #20]
 8019d8e:	d116      	bne.n	8019dbe <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8019d90:	f06f 0201 	mvn.w	r2, #1
 8019d94:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 8019d98:	fb02 fc07 	mul.w	ip, r2, r7
 8019d9c:	096a      	lsrs	r2, r5, #5
 8019d9e:	f026 0607 	bic.w	r6, r6, #7
 8019da2:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8019da6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8019daa:	4316      	orrs	r6, r2
 8019dac:	432e      	orrs	r6, r5
 8019dae:	f824 600c 	strh.w	r6, [r4, ip]
 8019db2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8019db4:	3f01      	subs	r7, #1
 8019db6:	4410      	add	r0, r2
 8019db8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019dba:	4411      	add	r1, r2
 8019dbc:	e77e      	b.n	8019cbc <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8019dbe:	f06f 0601 	mvn.w	r6, #1
 8019dc2:	fa1f fa82 	uxth.w	sl, r2
 8019dc6:	f3c5 4c07 	ubfx	ip, r5, #16, #8
 8019dca:	43d2      	mvns	r2, r2
 8019dcc:	437e      	muls	r6, r7
 8019dce:	b2ed      	uxtb	r5, r5
 8019dd0:	fb1c fc0a 	smulbb	ip, ip, sl
 8019dd4:	b2d2      	uxtb	r2, r2
 8019dd6:	f834 8006 	ldrh.w	r8, [r4, r6]
 8019dda:	fb15 f50a 	smulbb	r5, r5, sl
 8019dde:	9602      	str	r6, [sp, #8]
 8019de0:	ea4f 2e28 	mov.w	lr, r8, asr #8
 8019de4:	f89d 6014 	ldrb.w	r6, [sp, #20]
 8019de8:	fb16 f60a 	smulbb	r6, r6, sl
 8019dec:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8019df0:	fb0e ce02 	mla	lr, lr, r2, ip
 8019df4:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 8019df8:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8019dfc:	fa1f fe8e 	uxth.w	lr, lr
 8019e00:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8019e04:	fa5f f888 	uxtb.w	r8, r8
 8019e08:	fb0c 6c02 	mla	ip, ip, r2, r6
 8019e0c:	fb08 5502 	mla	r5, r8, r2, r5
 8019e10:	f10e 0201 	add.w	r2, lr, #1
 8019e14:	fa1f fc8c 	uxth.w	ip, ip
 8019e18:	b2ad      	uxth	r5, r5
 8019e1a:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 8019e1e:	9a02      	ldr	r2, [sp, #8]
 8019e20:	1c6e      	adds	r6, r5, #1
 8019e22:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 8019e26:	eb06 2615 	add.w	r6, r6, r5, lsr #8
 8019e2a:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8019e2e:	ea46 0e0e 	orr.w	lr, r6, lr
 8019e32:	f10c 0601 	add.w	r6, ip, #1
 8019e36:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 8019e3a:	0976      	lsrs	r6, r6, #5
 8019e3c:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8019e40:	ea4e 0e06 	orr.w	lr, lr, r6
 8019e44:	f824 e002 	strh.w	lr, [r4, r2]
 8019e48:	e7b3      	b.n	8019db2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8019e4a:	f04f 0800 	mov.w	r8, #0
 8019e4e:	eba3 0208 	sub.w	r2, r3, r8
 8019e52:	2a00      	cmp	r2, #0
 8019e54:	f77f af35 	ble.w	8019cc2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8019e58:	1402      	asrs	r2, r0, #16
 8019e5a:	9e00      	ldr	r6, [sp, #0]
 8019e5c:	140d      	asrs	r5, r1, #16
 8019e5e:	fb06 2505 	mla	r5, r6, r5, r2
 8019e62:	9e01      	ldr	r6, [sp, #4]
 8019e64:	086a      	lsrs	r2, r5, #1
 8019e66:	07ed      	lsls	r5, r5, #31
 8019e68:	5cb2      	ldrb	r2, [r6, r2]
 8019e6a:	bf54      	ite	pl
 8019e6c:	f002 020f 	andpl.w	r2, r2, #15
 8019e70:	1112      	asrmi	r2, r2, #4
 8019e72:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8019e76:	b2d2      	uxtb	r2, r2
 8019e78:	b1c2      	cbz	r2, 8019eac <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 8019e7a:	9d04      	ldr	r5, [sp, #16]
 8019e7c:	436a      	muls	r2, r5
 8019e7e:	1c55      	adds	r5, r2, #1
 8019e80:	eb05 2222 	add.w	r2, r5, r2, asr #8
 8019e84:	4d2d      	ldr	r5, [pc, #180]	; (8019f3c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 8019e86:	1212      	asrs	r2, r2, #8
 8019e88:	682e      	ldr	r6, [r5, #0]
 8019e8a:	2aff      	cmp	r2, #255	; 0xff
 8019e8c:	ea4f 2516 	mov.w	r5, r6, lsr #8
 8019e90:	d113      	bne.n	8019eba <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8019e92:	0972      	lsrs	r2, r6, #5
 8019e94:	f425 65ff 	bic.w	r5, r5, #2040	; 0x7f8
 8019e98:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 8019e9c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8019ea0:	f025 0507 	bic.w	r5, r5, #7
 8019ea4:	4315      	orrs	r5, r2
 8019ea6:	4335      	orrs	r5, r6
 8019ea8:	f824 5018 	strh.w	r5, [r4, r8, lsl #1]
 8019eac:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8019eae:	f108 0801 	add.w	r8, r8, #1
 8019eb2:	4410      	add	r0, r2
 8019eb4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019eb6:	4411      	add	r1, r2
 8019eb8:	e7c9      	b.n	8019e4e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8019eba:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 8019ebe:	fa1f fa82 	uxth.w	sl, r2
 8019ec2:	f3c6 4707 	ubfx	r7, r6, #16, #8
 8019ec6:	43d2      	mvns	r2, r2
 8019ec8:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8019ecc:	fb17 f70a 	smulbb	r7, r7, sl
 8019ed0:	b2d2      	uxtb	r2, r2
 8019ed2:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8019ed6:	b2f6      	uxtb	r6, r6
 8019ed8:	b2ed      	uxtb	r5, r5
 8019eda:	fb0c 7c02 	mla	ip, ip, r2, r7
 8019ede:	ea4f 07ee 	mov.w	r7, lr, asr #3
 8019ee2:	fb16 f60a 	smulbb	r6, r6, sl
 8019ee6:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8019eea:	fa1f fc8c 	uxth.w	ip, ip
 8019eee:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8019ef2:	fb15 f50a 	smulbb	r5, r5, sl
 8019ef6:	fa5f fe8e 	uxtb.w	lr, lr
 8019efa:	fb0e 6602 	mla	r6, lr, r2, r6
 8019efe:	fb07 5702 	mla	r7, r7, r2, r5
 8019f02:	f10c 0201 	add.w	r2, ip, #1
 8019f06:	b2b6      	uxth	r6, r6
 8019f08:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8019f0c:	1c75      	adds	r5, r6, #1
 8019f0e:	b2bf      	uxth	r7, r7
 8019f10:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8019f14:	eb05 2516 	add.w	r5, r5, r6, lsr #8
 8019f18:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8019f1c:	ea45 0c0c 	orr.w	ip, r5, ip
 8019f20:	1c7d      	adds	r5, r7, #1
 8019f22:	eb05 2517 	add.w	r5, r5, r7, lsr #8
 8019f26:	096d      	lsrs	r5, r5, #5
 8019f28:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8019f2c:	ea4c 0c05 	orr.w	ip, ip, r5
 8019f30:	f824 c018 	strh.w	ip, [r4, r8, lsl #1]
 8019f34:	e7ba      	b.n	8019eac <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 8019f36:	b007      	add	sp, #28
 8019f38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019f3c:	200243e4 	.word	0x200243e4

08019f40 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019f44:	b087      	sub	sp, #28
 8019f46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8019f4a:	f8df 8308 	ldr.w	r8, [pc, #776]	; 801a254 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
 8019f4e:	9815      	ldr	r0, [sp, #84]	; 0x54
 8019f50:	9101      	str	r1, [sp, #4]
 8019f52:	9205      	str	r2, [sp, #20]
 8019f54:	6841      	ldr	r1, [r0, #4]
 8019f56:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
 8019f5a:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 8019f5e:	fb01 2404 	mla	r4, r1, r4, r2
 8019f62:	6802      	ldr	r2, [r0, #0]
 8019f64:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8019f68:	f8db 2008 	ldr.w	r2, [fp, #8]
 8019f6c:	3201      	adds	r2, #1
 8019f6e:	f022 0201 	bic.w	r2, r2, #1
 8019f72:	9202      	str	r2, [sp, #8]
 8019f74:	f8db 2000 	ldr.w	r2, [fp]
 8019f78:	9203      	str	r2, [sp, #12]
 8019f7a:	9a01      	ldr	r2, [sp, #4]
 8019f7c:	2a00      	cmp	r2, #0
 8019f7e:	dc03      	bgt.n	8019f88 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8019f80:	9a05      	ldr	r2, [sp, #20]
 8019f82:	2a00      	cmp	r2, #0
 8019f84:	f340 8162 	ble.w	801a24c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8019f88:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8019f8a:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 8019f8e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8019f92:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8019f94:	f9bb 600c 	ldrsh.w	r6, [fp, #12]
 8019f98:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8019f9c:	2b00      	cmp	r3, #0
 8019f9e:	dd0e      	ble.n	8019fbe <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8019fa0:	1402      	asrs	r2, r0, #16
 8019fa2:	d405      	bmi.n	8019fb0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8019fa4:	42ba      	cmp	r2, r7
 8019fa6:	da03      	bge.n	8019fb0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8019fa8:	140a      	asrs	r2, r1, #16
 8019faa:	d401      	bmi.n	8019fb0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8019fac:	42b2      	cmp	r2, r6
 8019fae:	db07      	blt.n	8019fc0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8019fb0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8019fb2:	3b01      	subs	r3, #1
 8019fb4:	3402      	adds	r4, #2
 8019fb6:	4410      	add	r0, r2
 8019fb8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019fba:	4411      	add	r1, r2
 8019fbc:	e7ee      	b.n	8019f9c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8019fbe:	d017      	beq.n	8019ff0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8019fc0:	1e5a      	subs	r2, r3, #1
 8019fc2:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8019fc4:	fb05 0502 	mla	r5, r5, r2, r0
 8019fc8:	142d      	asrs	r5, r5, #16
 8019fca:	d409      	bmi.n	8019fe0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8019fcc:	42bd      	cmp	r5, r7
 8019fce:	da07      	bge.n	8019fe0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8019fd0:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8019fd2:	fb05 1202 	mla	r2, r5, r2, r1
 8019fd6:	1412      	asrs	r2, r2, #16
 8019fd8:	d402      	bmi.n	8019fe0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8019fda:	42b2      	cmp	r2, r6
 8019fdc:	f2c0 80c3 	blt.w	801a166 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x226>
 8019fe0:	2500      	movs	r5, #0
 8019fe2:	195a      	adds	r2, r3, r5
 8019fe4:	2a00      	cmp	r2, #0
 8019fe6:	dc3f      	bgt.n	801a068 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 8019fe8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019fec:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8019ff0:	9b01      	ldr	r3, [sp, #4]
 8019ff2:	2b00      	cmp	r3, #0
 8019ff4:	f340 812a 	ble.w	801a24c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8019ff8:	ee30 0a04 	vadd.f32	s0, s0, s8
 8019ffc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019ffe:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a002:	eeb0 6a62 	vmov.f32	s12, s5
 801a006:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801a00a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a00e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a012:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801a016:	eeb0 6a43 	vmov.f32	s12, s6
 801a01a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a01e:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801a022:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a026:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a02a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a02e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a032:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a036:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a03a:	ee12 2a90 	vmov	r2, s5
 801a03e:	eef0 2a47 	vmov.f32	s5, s14
 801a042:	fb92 f3f3 	sdiv	r3, r2, r3
 801a046:	ee13 2a10 	vmov	r2, s6
 801a04a:	9313      	str	r3, [sp, #76]	; 0x4c
 801a04c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a04e:	eeb0 3a67 	vmov.f32	s6, s15
 801a052:	fb92 f3f3 	sdiv	r3, r2, r3
 801a056:	9314      	str	r3, [sp, #80]	; 0x50
 801a058:	9b01      	ldr	r3, [sp, #4]
 801a05a:	9a05      	ldr	r2, [sp, #20]
 801a05c:	3b01      	subs	r3, #1
 801a05e:	9301      	str	r3, [sp, #4]
 801a060:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a062:	bf08      	it	eq
 801a064:	4613      	moveq	r3, r2
 801a066:	e788      	b.n	8019f7a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801a068:	1406      	asrs	r6, r0, #16
 801a06a:	d42c      	bmi.n	801a0c6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801a06c:	f8db 2008 	ldr.w	r2, [fp, #8]
 801a070:	42b2      	cmp	r2, r6
 801a072:	dd28      	ble.n	801a0c6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801a074:	140f      	asrs	r7, r1, #16
 801a076:	d426      	bmi.n	801a0c6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801a078:	f8db 200c 	ldr.w	r2, [fp, #12]
 801a07c:	42ba      	cmp	r2, r7
 801a07e:	dd22      	ble.n	801a0c6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801a080:	9a02      	ldr	r2, [sp, #8]
 801a082:	fb07 6602 	mla	r6, r7, r2, r6
 801a086:	9f03      	ldr	r7, [sp, #12]
 801a088:	0872      	lsrs	r2, r6, #1
 801a08a:	07f6      	lsls	r6, r6, #31
 801a08c:	5cba      	ldrb	r2, [r7, r2]
 801a08e:	bf54      	ite	pl
 801a090:	f002 020f 	andpl.w	r2, r2, #15
 801a094:	1112      	asrmi	r2, r2, #4
 801a096:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801a09a:	b2d2      	uxtb	r2, r2
 801a09c:	2aff      	cmp	r2, #255	; 0xff
 801a09e:	d118      	bne.n	801a0d2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801a0a0:	f06f 0601 	mvn.w	r6, #1
 801a0a4:	f8d8 2000 	ldr.w	r2, [r8]
 801a0a8:	fb06 f705 	mul.w	r7, r6, r5
 801a0ac:	f2a6 76fe 	subw	r6, r6, #2046	; 0x7fe
 801a0b0:	ea06 2c12 	and.w	ip, r6, r2, lsr #8
 801a0b4:	0956      	lsrs	r6, r2, #5
 801a0b6:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801a0ba:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801a0be:	ea4c 0606 	orr.w	r6, ip, r6
 801a0c2:	4316      	orrs	r6, r2
 801a0c4:	53e6      	strh	r6, [r4, r7]
 801a0c6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801a0c8:	3d01      	subs	r5, #1
 801a0ca:	4410      	add	r0, r2
 801a0cc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801a0ce:	4411      	add	r1, r2
 801a0d0:	e787      	b.n	8019fe2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801a0d2:	2a00      	cmp	r2, #0
 801a0d4:	d0f7      	beq.n	801a0c6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801a0d6:	f06f 0601 	mvn.w	r6, #1
 801a0da:	f8d8 c000 	ldr.w	ip, [r8]
 801a0de:	fa1f f982 	uxth.w	r9, r2
 801a0e2:	43d2      	mvns	r2, r2
 801a0e4:	436e      	muls	r6, r5
 801a0e6:	f3cc 2a07 	ubfx	sl, ip, #8, #8
 801a0ea:	b2d2      	uxtb	r2, r2
 801a0ec:	f834 e006 	ldrh.w	lr, [r4, r6]
 801a0f0:	fb1a fa09 	smulbb	sl, sl, r9
 801a0f4:	9604      	str	r6, [sp, #16]
 801a0f6:	f3cc 4607 	ubfx	r6, ip, #16, #8
 801a0fa:	ea4f 272e 	mov.w	r7, lr, asr #8
 801a0fe:	fb16 f609 	smulbb	r6, r6, r9
 801a102:	fa5f fc8c 	uxtb.w	ip, ip
 801a106:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801a10a:	fb1c fc09 	smulbb	ip, ip, r9
 801a10e:	fb07 6702 	mla	r7, r7, r2, r6
 801a112:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801a116:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801a11a:	b2bf      	uxth	r7, r7
 801a11c:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801a120:	fa5f fe8e 	uxtb.w	lr, lr
 801a124:	fb06 a602 	mla	r6, r6, r2, sl
 801a128:	fb0e cc02 	mla	ip, lr, r2, ip
 801a12c:	1c7a      	adds	r2, r7, #1
 801a12e:	b2b6      	uxth	r6, r6
 801a130:	fa1f fc8c 	uxth.w	ip, ip
 801a134:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801a138:	9a04      	ldr	r2, [sp, #16]
 801a13a:	f10c 0a01 	add.w	sl, ip, #1
 801a13e:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801a142:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 801a146:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801a14a:	ea4a 0707 	orr.w	r7, sl, r7
 801a14e:	f106 0a01 	add.w	sl, r6, #1
 801a152:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801a156:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801a15a:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801a15e:	ea47 070a 	orr.w	r7, r7, sl
 801a162:	52a7      	strh	r7, [r4, r2]
 801a164:	e7af      	b.n	801a0c6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801a166:	f04f 0e00 	mov.w	lr, #0
 801a16a:	eba3 020e 	sub.w	r2, r3, lr
 801a16e:	2a00      	cmp	r2, #0
 801a170:	f77f af3a 	ble.w	8019fe8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801a174:	1402      	asrs	r2, r0, #16
 801a176:	9e02      	ldr	r6, [sp, #8]
 801a178:	140d      	asrs	r5, r1, #16
 801a17a:	fb06 2505 	mla	r5, r6, r5, r2
 801a17e:	9e03      	ldr	r6, [sp, #12]
 801a180:	086a      	lsrs	r2, r5, #1
 801a182:	07ed      	lsls	r5, r5, #31
 801a184:	5cb2      	ldrb	r2, [r6, r2]
 801a186:	bf54      	ite	pl
 801a188:	f002 020f 	andpl.w	r2, r2, #15
 801a18c:	1112      	asrmi	r2, r2, #4
 801a18e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801a192:	b2d2      	uxtb	r2, r2
 801a194:	2aff      	cmp	r2, #255	; 0xff
 801a196:	d115      	bne.n	801a1c4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801a198:	f8d8 5000 	ldr.w	r5, [r8]
 801a19c:	f6a2 02ff 	subw	r2, r2, #2303	; 0x8ff
 801a1a0:	ea02 2615 	and.w	r6, r2, r5, lsr #8
 801a1a4:	096a      	lsrs	r2, r5, #5
 801a1a6:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801a1aa:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801a1ae:	4332      	orrs	r2, r6
 801a1b0:	432a      	orrs	r2, r5
 801a1b2:	f824 201e 	strh.w	r2, [r4, lr, lsl #1]
 801a1b6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801a1b8:	f10e 0e01 	add.w	lr, lr, #1
 801a1bc:	4410      	add	r0, r2
 801a1be:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801a1c0:	4411      	add	r1, r2
 801a1c2:	e7d2      	b.n	801a16a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801a1c4:	2a00      	cmp	r2, #0
 801a1c6:	d0f6      	beq.n	801a1b6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801a1c8:	f8d8 7000 	ldr.w	r7, [r8]
 801a1cc:	fa1f f982 	uxth.w	r9, r2
 801a1d0:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 801a1d4:	43d2      	mvns	r2, r2
 801a1d6:	f3c7 4507 	ubfx	r5, r7, #16, #8
 801a1da:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 801a1de:	ea4f 262c 	mov.w	r6, ip, asr #8
 801a1e2:	fb15 f509 	smulbb	r5, r5, r9
 801a1e6:	b2d2      	uxtb	r2, r2
 801a1e8:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801a1ec:	b2ff      	uxtb	r7, r7
 801a1ee:	fb1a fa09 	smulbb	sl, sl, r9
 801a1f2:	fb06 5602 	mla	r6, r6, r2, r5
 801a1f6:	ea4f 05ec 	mov.w	r5, ip, asr #3
 801a1fa:	fb17 f709 	smulbb	r7, r7, r9
 801a1fe:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801a202:	b2b6      	uxth	r6, r6
 801a204:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801a208:	fa5f fc8c 	uxtb.w	ip, ip
 801a20c:	fb05 a502 	mla	r5, r5, r2, sl
 801a210:	fb0c 7702 	mla	r7, ip, r2, r7
 801a214:	1c72      	adds	r2, r6, #1
 801a216:	b2ad      	uxth	r5, r5
 801a218:	b2bf      	uxth	r7, r7
 801a21a:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 801a21e:	f107 0a01 	add.w	sl, r7, #1
 801a222:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 801a226:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801a22a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801a22e:	ea4a 0606 	orr.w	r6, sl, r6
 801a232:	f105 0a01 	add.w	sl, r5, #1
 801a236:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801a23a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801a23e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801a242:	ea46 060a 	orr.w	r6, r6, sl
 801a246:	f824 601e 	strh.w	r6, [r4, lr, lsl #1]
 801a24a:	e7b4      	b.n	801a1b6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801a24c:	b007      	add	sp, #28
 801a24e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a252:	bf00      	nop
 801a254:	200243e4 	.word	0x200243e4

0801a258 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801a258:	4770      	bx	lr

0801a25a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801a25a:	4770      	bx	lr

0801a25c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801a25c:	4770      	bx	lr

0801a25e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801a25e:	4770      	bx	lr

0801a260 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801a260:	4770      	bx	lr

0801a262 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801a262:	4770      	bx	lr

0801a264 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801a264:	4770      	bx	lr

0801a266 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801a266:	4770      	bx	lr

0801a268 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801a268:	4770      	bx	lr

0801a26a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 801a26a:	4770      	bx	lr

0801a26c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801a26c:	4770      	bx	lr

0801a26e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801a26e:	4770      	bx	lr

0801a270 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 801a270:	4770      	bx	lr

0801a272 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 801a272:	4770      	bx	lr

0801a274 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801a274:	4770      	bx	lr

0801a276 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
 801a276:	4770      	bx	lr

0801a278 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801a278:	4770      	bx	lr

0801a27a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801a27a:	4770      	bx	lr

0801a27c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801a27c:	4770      	bx	lr

0801a27e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801a27e:	4770      	bx	lr

0801a280 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801a280:	4770      	bx	lr

0801a282 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801a282:	4770      	bx	lr

0801a284 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801a284:	4770      	bx	lr

0801a286 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801a286:	4770      	bx	lr

0801a288 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801a288:	4770      	bx	lr

0801a28a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 801a28a:	4770      	bx	lr

0801a28c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 801a28c:	4770      	bx	lr

0801a28e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 801a28e:	4770      	bx	lr

0801a290 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801a290:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a294:	b088      	sub	sp, #32
 801a296:	4606      	mov	r6, r0
 801a298:	4688      	mov	r8, r1
 801a29a:	4691      	mov	r9, r2
 801a29c:	ac08      	add	r4, sp, #32
 801a29e:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 801a2a2:	4620      	mov	r0, r4
 801a2a4:	f7fd fc66 	bl	8017b74 <_ZNK8touchgfx6Bitmap7getDataEv>
 801a2a8:	6833      	ldr	r3, [r6, #0]
 801a2aa:	4605      	mov	r5, r0
 801a2ac:	4620      	mov	r0, r4
 801a2ae:	699f      	ldr	r7, [r3, #24]
 801a2b0:	f7fd fb74 	bl	801799c <_ZNK8touchgfx6Bitmap8getWidthEv>
 801a2b4:	4682      	mov	sl, r0
 801a2b6:	4620      	mov	r0, r4
 801a2b8:	f7fd fba4 	bl	8017a04 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801a2bc:	9500      	str	r5, [sp, #0]
 801a2be:	464b      	mov	r3, r9
 801a2c0:	4642      	mov	r2, r8
 801a2c2:	4631      	mov	r1, r6
 801a2c4:	e9cd a001 	strd	sl, r0, [sp, #4]
 801a2c8:	a806      	add	r0, sp, #24
 801a2ca:	47b8      	blx	r7
 801a2cc:	4628      	mov	r0, r5
 801a2ce:	b008      	add	sp, #32
 801a2d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801a2d4 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 801a2d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a2d8:	2300      	movs	r3, #0
 801a2da:	9300      	str	r3, [sp, #0]
 801a2dc:	4b3d      	ldr	r3, [pc, #244]	; (801a3d4 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x100>)
 801a2de:	781b      	ldrb	r3, [r3, #0]
 801a2e0:	2b00      	cmp	r3, #0
 801a2e2:	d137      	bne.n	801a354 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x80>
 801a2e4:	4a3c      	ldr	r2, [pc, #240]	; (801a3d8 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801a2e6:	f9b2 2000 	ldrsh.w	r2, [r2]
 801a2ea:	f8ad 2004 	strh.w	r2, [sp, #4]
 801a2ee:	2b00      	cmp	r3, #0
 801a2f0:	d132      	bne.n	801a358 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x84>
 801a2f2:	4b3a      	ldr	r3, [pc, #232]	; (801a3dc <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 801a2f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a2f8:	ac02      	add	r4, sp, #8
 801a2fa:	6808      	ldr	r0, [r1, #0]
 801a2fc:	f8ad 3006 	strh.w	r3, [sp, #6]
 801a300:	ab02      	add	r3, sp, #8
 801a302:	6849      	ldr	r1, [r1, #4]
 801a304:	4d36      	ldr	r5, [pc, #216]	; (801a3e0 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x10c>)
 801a306:	c303      	stmia	r3!, {r0, r1}
 801a308:	4669      	mov	r1, sp
 801a30a:	4620      	mov	r0, r4
 801a30c:	f7fa fdb4 	bl	8014e78 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801a310:	4668      	mov	r0, sp
 801a312:	f7fa fd89 	bl	8014e28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a316:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801a31a:	f8bd 2000 	ldrh.w	r2, [sp]
 801a31e:	462f      	mov	r7, r5
 801a320:	6828      	ldr	r0, [r5, #0]
 801a322:	4413      	add	r3, r2
 801a324:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801a328:	f8ad 3008 	strh.w	r3, [sp, #8]
 801a32c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801a330:	4413      	add	r3, r2
 801a332:	f8ad 300a 	strh.w	r3, [sp, #10]
 801a336:	6803      	ldr	r3, [r0, #0]
 801a338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a33a:	4798      	blx	r3
 801a33c:	f010 0f01 	tst.w	r0, #1
 801a340:	d00c      	beq.n	801a35c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x88>
 801a342:	6828      	ldr	r0, [r5, #0]
 801a344:	6803      	ldr	r3, [r0, #0]
 801a346:	e894 0006 	ldmia.w	r4, {r1, r2}
 801a34a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a34c:	4798      	blx	r3
 801a34e:	b004      	add	sp, #16
 801a350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a354:	4a21      	ldr	r2, [pc, #132]	; (801a3dc <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 801a356:	e7c6      	b.n	801a2e6 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 801a358:	4b1f      	ldr	r3, [pc, #124]	; (801a3d8 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801a35a:	e7cb      	b.n	801a2f4 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 801a35c:	6838      	ldr	r0, [r7, #0]
 801a35e:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 801a362:	6803      	ldr	r3, [r0, #0]
 801a364:	f9bd 500e 	ldrsh.w	r5, [sp, #14]
 801a368:	ea4f 0848 	mov.w	r8, r8, lsl #1
 801a36c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a36e:	4798      	blx	r3
 801a370:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 801a374:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801a378:	f8bd 6004 	ldrh.w	r6, [sp, #4]
 801a37c:	fb16 3602 	smlabb	r6, r6, r2, r3
 801a380:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801a384:	6838      	ldr	r0, [r7, #0]
 801a386:	6803      	ldr	r3, [r0, #0]
 801a388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a38a:	4798      	blx	r3
 801a38c:	4a12      	ldr	r2, [pc, #72]	; (801a3d8 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801a38e:	f9bd 400a 	ldrsh.w	r4, [sp, #10]
 801a392:	8813      	ldrh	r3, [r2, #0]
 801a394:	4691      	mov	r9, r2
 801a396:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 801a39a:	435d      	muls	r5, r3
 801a39c:	fb03 1404 	mla	r4, r3, r4, r1
 801a3a0:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801a3a4:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801a3a8:	6838      	ldr	r0, [r7, #0]
 801a3aa:	42ac      	cmp	r4, r5
 801a3ac:	6803      	ldr	r3, [r0, #0]
 801a3ae:	d20e      	bcs.n	801a3ce <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xfa>
 801a3b0:	f8d3 a034 	ldr.w	sl, [r3, #52]	; 0x34
 801a3b4:	4632      	mov	r2, r6
 801a3b6:	4643      	mov	r3, r8
 801a3b8:	4621      	mov	r1, r4
 801a3ba:	47d0      	blx	sl
 801a3bc:	f8b9 3000 	ldrh.w	r3, [r9]
 801a3c0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801a3c4:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801a3c8:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801a3cc:	e7ec      	b.n	801a3a8 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd4>
 801a3ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a3d0:	4798      	blx	r3
 801a3d2:	e7bc      	b.n	801a34e <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 801a3d4:	200243d4 	.word	0x200243d4
 801a3d8:	200243d6 	.word	0x200243d6
 801a3dc:	200243d8 	.word	0x200243d8
 801a3e0:	200243dc 	.word	0x200243dc

0801a3e4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801a3e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a3e8:	b08b      	sub	sp, #44	; 0x2c
 801a3ea:	460f      	mov	r7, r1
 801a3ec:	4616      	mov	r6, r2
 801a3ee:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
 801a3f2:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 801a3f6:	f1bb 0f00 	cmp.w	fp, #0
 801a3fa:	d049      	beq.n	801a490 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801a3fc:	6810      	ldr	r0, [r2, #0]
 801a3fe:	ad06      	add	r5, sp, #24
 801a400:	6851      	ldr	r1, [r2, #4]
 801a402:	c503      	stmia	r5!, {r0, r1}
 801a404:	6818      	ldr	r0, [r3, #0]
 801a406:	ad08      	add	r5, sp, #32
 801a408:	6859      	ldr	r1, [r3, #4]
 801a40a:	c503      	stmia	r5!, {r0, r1}
 801a40c:	a806      	add	r0, sp, #24
 801a40e:	f7fa fd0b 	bl	8014e28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a412:	4631      	mov	r1, r6
 801a414:	a808      	add	r0, sp, #32
 801a416:	f7fa fd2f 	bl	8014e78 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801a41a:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801a41e:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801a422:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 801a426:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 801a42a:	fb16 2103 	smlabb	r1, r6, r3, r2
 801a42e:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 801a432:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 801a436:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801a43a:	4f5f      	ldr	r7, [pc, #380]	; (801a5b8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 801a43c:	440a      	add	r2, r1
 801a43e:	6838      	ldr	r0, [r7, #0]
 801a440:	46b9      	mov	r9, r7
 801a442:	f8ad 2020 	strh.w	r2, [sp, #32]
 801a446:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801a44a:	4413      	add	r3, r2
 801a44c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801a450:	6803      	ldr	r3, [r0, #0]
 801a452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a454:	4798      	blx	r3
 801a456:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801a45a:	d01c      	beq.n	801a496 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 801a45c:	f010 0f04 	tst.w	r0, #4
 801a460:	d01d      	beq.n	801a49e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 801a462:	f8d9 0000 	ldr.w	r0, [r9]
 801a466:	2700      	movs	r7, #0
 801a468:	b2ad      	uxth	r5, r5
 801a46a:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801a46e:	6801      	ldr	r1, [r0, #0]
 801a470:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801a474:	f8cd b00c 	str.w	fp, [sp, #12]
 801a478:	9501      	str	r5, [sp, #4]
 801a47a:	e9cd 4704 	strd	r4, r7, [sp, #16]
 801a47e:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 801a482:	9402      	str	r4, [sp, #8]
 801a484:	fa1f f488 	uxth.w	r4, r8
 801a488:	9400      	str	r4, [sp, #0]
 801a48a:	6c4c      	ldr	r4, [r1, #68]	; 0x44
 801a48c:	4631      	mov	r1, r6
 801a48e:	47a0      	blx	r4
 801a490:	b00b      	add	sp, #44	; 0x2c
 801a492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a496:	b914      	cbnz	r4, 801a49e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 801a498:	f010 0f01 	tst.w	r0, #1
 801a49c:	e7e0      	b.n	801a460 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7c>
 801a49e:	f8d9 0000 	ldr.w	r0, [r9]
 801a4a2:	ea4f 0748 	mov.w	r7, r8, lsl #1
 801a4a6:	6803      	ldr	r3, [r0, #0]
 801a4a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a4aa:	4798      	blx	r3
 801a4ac:	4b43      	ldr	r3, [pc, #268]	; (801a5bc <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d8>)
 801a4ae:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 801a4b2:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801a4b6:	881a      	ldrh	r2, [r3, #0]
 801a4b8:	469a      	mov	sl, r3
 801a4ba:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801a4be:	fb05 f502 	mul.w	r5, r5, r2
 801a4c2:	fb02 1404 	mla	r4, r2, r4, r1
 801a4c6:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801a4ca:	d059      	beq.n	801a580 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>
 801a4cc:	f1cb 09ff 	rsb	r9, fp, #255	; 0xff
 801a4d0:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801a4d4:	fa1f f28b 	uxth.w	r2, fp
 801a4d8:	469e      	mov	lr, r3
 801a4da:	fa1f f989 	uxth.w	r9, r9
 801a4de:	42ac      	cmp	r4, r5
 801a4e0:	d264      	bcs.n	801a5ac <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 801a4e2:	eb04 0a07 	add.w	sl, r4, r7
 801a4e6:	4554      	cmp	r4, sl
 801a4e8:	d23d      	bcs.n	801a566 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x182>
 801a4ea:	8821      	ldrh	r1, [r4, #0]
 801a4ec:	f836 3b02 	ldrh.w	r3, [r6], #2
 801a4f0:	1208      	asrs	r0, r1, #8
 801a4f2:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801a4f6:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801a4fa:	ea4f 0be1 	mov.w	fp, r1, asr #3
 801a4fe:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801a502:	00c9      	lsls	r1, r1, #3
 801a504:	fb10 f009 	smulbb	r0, r0, r9
 801a508:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 801a50c:	b2c9      	uxtb	r1, r1
 801a50e:	fb0c 0c02 	mla	ip, ip, r2, r0
 801a512:	10d8      	asrs	r0, r3, #3
 801a514:	fb1b fb09 	smulbb	fp, fp, r9
 801a518:	00db      	lsls	r3, r3, #3
 801a51a:	fa1f fc8c 	uxth.w	ip, ip
 801a51e:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801a522:	fb11 f109 	smulbb	r1, r1, r9
 801a526:	b2db      	uxtb	r3, r3
 801a528:	fb00 b002 	mla	r0, r0, r2, fp
 801a52c:	f10c 0b01 	add.w	fp, ip, #1
 801a530:	fb03 1302 	mla	r3, r3, r2, r1
 801a534:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801a538:	b29b      	uxth	r3, r3
 801a53a:	b280      	uxth	r0, r0
 801a53c:	f40c 4b78 	and.w	fp, ip, #63488	; 0xf800
 801a540:	f103 0c01 	add.w	ip, r3, #1
 801a544:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801a548:	1c43      	adds	r3, r0, #1
 801a54a:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801a54e:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801a552:	0940      	lsrs	r0, r0, #5
 801a554:	ea4c 0c0b 	orr.w	ip, ip, fp
 801a558:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801a55c:	ea4c 0c00 	orr.w	ip, ip, r0
 801a560:	f824 cb02 	strh.w	ip, [r4], #2
 801a564:	e7bf      	b.n	801a4e6 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x102>
 801a566:	f8be 3000 	ldrh.w	r3, [lr]
 801a56a:	eba3 0308 	sub.w	r3, r3, r8
 801a56e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801a572:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801a576:	eba3 0308 	sub.w	r3, r3, r8
 801a57a:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801a57e:	e7ae      	b.n	801a4de <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfa>
 801a580:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801a584:	f8d9 0000 	ldr.w	r0, [r9]
 801a588:	42ac      	cmp	r4, r5
 801a58a:	6803      	ldr	r3, [r0, #0]
 801a58c:	d20e      	bcs.n	801a5ac <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 801a58e:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
 801a592:	4632      	mov	r2, r6
 801a594:	463b      	mov	r3, r7
 801a596:	4621      	mov	r1, r4
 801a598:	47c0      	blx	r8
 801a59a:	f8ba 3000 	ldrh.w	r3, [sl]
 801a59e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801a5a2:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801a5a6:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801a5aa:	e7eb      	b.n	801a584 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
 801a5ac:	4b02      	ldr	r3, [pc, #8]	; (801a5b8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 801a5ae:	6818      	ldr	r0, [r3, #0]
 801a5b0:	6803      	ldr	r3, [r0, #0]
 801a5b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a5b4:	4798      	blx	r3
 801a5b6:	e76b      	b.n	801a490 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801a5b8:	200243dc 	.word	0x200243dc
 801a5bc:	200243d6 	.word	0x200243d6

0801a5c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801a5c0:	b510      	push	{r4, lr}
 801a5c2:	4604      	mov	r4, r0
 801a5c4:	2104      	movs	r1, #4
 801a5c6:	f008 ffc2 	bl	802354e <_ZdlPvj>
 801a5ca:	4620      	mov	r0, r4
 801a5cc:	bd10      	pop	{r4, pc}

0801a5ce <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 801a5ce:	b510      	push	{r4, lr}
 801a5d0:	4604      	mov	r4, r0
 801a5d2:	2104      	movs	r1, #4
 801a5d4:	f008 ffbb 	bl	802354e <_ZdlPvj>
 801a5d8:	4620      	mov	r0, r4
 801a5da:	bd10      	pop	{r4, pc}

0801a5dc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 801a5dc:	b510      	push	{r4, lr}
 801a5de:	4604      	mov	r4, r0
 801a5e0:	2104      	movs	r1, #4
 801a5e2:	f008 ffb4 	bl	802354e <_ZdlPvj>
 801a5e6:	4620      	mov	r0, r4
 801a5e8:	bd10      	pop	{r4, pc}

0801a5ea <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 801a5ea:	b510      	push	{r4, lr}
 801a5ec:	4604      	mov	r4, r0
 801a5ee:	2104      	movs	r1, #4
 801a5f0:	f008 ffad 	bl	802354e <_ZdlPvj>
 801a5f4:	4620      	mov	r0, r4
 801a5f6:	bd10      	pop	{r4, pc}

0801a5f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801a5f8:	b510      	push	{r4, lr}
 801a5fa:	4604      	mov	r4, r0
 801a5fc:	2104      	movs	r1, #4
 801a5fe:	f008 ffa6 	bl	802354e <_ZdlPvj>
 801a602:	4620      	mov	r0, r4
 801a604:	bd10      	pop	{r4, pc}

0801a606 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801a606:	b510      	push	{r4, lr}
 801a608:	4604      	mov	r4, r0
 801a60a:	2104      	movs	r1, #4
 801a60c:	f008 ff9f 	bl	802354e <_ZdlPvj>
 801a610:	4620      	mov	r0, r4
 801a612:	bd10      	pop	{r4, pc}

0801a614 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801a614:	b510      	push	{r4, lr}
 801a616:	4604      	mov	r4, r0
 801a618:	2104      	movs	r1, #4
 801a61a:	f008 ff98 	bl	802354e <_ZdlPvj>
 801a61e:	4620      	mov	r0, r4
 801a620:	bd10      	pop	{r4, pc}

0801a622 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801a622:	b510      	push	{r4, lr}
 801a624:	4604      	mov	r4, r0
 801a626:	2104      	movs	r1, #4
 801a628:	f008 ff91 	bl	802354e <_ZdlPvj>
 801a62c:	4620      	mov	r0, r4
 801a62e:	bd10      	pop	{r4, pc}

0801a630 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801a630:	b510      	push	{r4, lr}
 801a632:	4604      	mov	r4, r0
 801a634:	2104      	movs	r1, #4
 801a636:	f008 ff8a 	bl	802354e <_ZdlPvj>
 801a63a:	4620      	mov	r0, r4
 801a63c:	bd10      	pop	{r4, pc}

0801a63e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801a63e:	b510      	push	{r4, lr}
 801a640:	4604      	mov	r4, r0
 801a642:	2104      	movs	r1, #4
 801a644:	f008 ff83 	bl	802354e <_ZdlPvj>
 801a648:	4620      	mov	r0, r4
 801a64a:	bd10      	pop	{r4, pc}

0801a64c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801a64c:	b510      	push	{r4, lr}
 801a64e:	4604      	mov	r4, r0
 801a650:	2104      	movs	r1, #4
 801a652:	f008 ff7c 	bl	802354e <_ZdlPvj>
 801a656:	4620      	mov	r0, r4
 801a658:	bd10      	pop	{r4, pc}

0801a65a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801a65a:	b510      	push	{r4, lr}
 801a65c:	4604      	mov	r4, r0
 801a65e:	2104      	movs	r1, #4
 801a660:	f008 ff75 	bl	802354e <_ZdlPvj>
 801a664:	4620      	mov	r0, r4
 801a666:	bd10      	pop	{r4, pc}

0801a668 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801a668:	b510      	push	{r4, lr}
 801a66a:	4604      	mov	r4, r0
 801a66c:	2104      	movs	r1, #4
 801a66e:	f008 ff6e 	bl	802354e <_ZdlPvj>
 801a672:	4620      	mov	r0, r4
 801a674:	bd10      	pop	{r4, pc}

0801a676 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 801a676:	b510      	push	{r4, lr}
 801a678:	4604      	mov	r4, r0
 801a67a:	2104      	movs	r1, #4
 801a67c:	f008 ff67 	bl	802354e <_ZdlPvj>
 801a680:	4620      	mov	r0, r4
 801a682:	bd10      	pop	{r4, pc}

0801a684 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801a684:	b510      	push	{r4, lr}
 801a686:	4604      	mov	r4, r0
 801a688:	2104      	movs	r1, #4
 801a68a:	f008 ff60 	bl	802354e <_ZdlPvj>
 801a68e:	4620      	mov	r0, r4
 801a690:	bd10      	pop	{r4, pc}

0801a692 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801a692:	b510      	push	{r4, lr}
 801a694:	4604      	mov	r4, r0
 801a696:	2104      	movs	r1, #4
 801a698:	f008 ff59 	bl	802354e <_ZdlPvj>
 801a69c:	4620      	mov	r0, r4
 801a69e:	bd10      	pop	{r4, pc}

0801a6a0 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 801a6a0:	b510      	push	{r4, lr}
 801a6a2:	4604      	mov	r4, r0
 801a6a4:	2104      	movs	r1, #4
 801a6a6:	f008 ff52 	bl	802354e <_ZdlPvj>
 801a6aa:	4620      	mov	r0, r4
 801a6ac:	bd10      	pop	{r4, pc}

0801a6ae <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 801a6ae:	b510      	push	{r4, lr}
 801a6b0:	4604      	mov	r4, r0
 801a6b2:	2104      	movs	r1, #4
 801a6b4:	f008 ff4b 	bl	802354e <_ZdlPvj>
 801a6b8:	4620      	mov	r0, r4
 801a6ba:	bd10      	pop	{r4, pc}

0801a6bc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801a6bc:	b510      	push	{r4, lr}
 801a6be:	4604      	mov	r4, r0
 801a6c0:	2104      	movs	r1, #4
 801a6c2:	f008 ff44 	bl	802354e <_ZdlPvj>
 801a6c6:	4620      	mov	r0, r4
 801a6c8:	bd10      	pop	{r4, pc}

0801a6ca <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
 801a6ca:	b510      	push	{r4, lr}
 801a6cc:	4604      	mov	r4, r0
 801a6ce:	2104      	movs	r1, #4
 801a6d0:	f008 ff3d 	bl	802354e <_ZdlPvj>
 801a6d4:	4620      	mov	r0, r4
 801a6d6:	bd10      	pop	{r4, pc}

0801a6d8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801a6d8:	b510      	push	{r4, lr}
 801a6da:	4604      	mov	r4, r0
 801a6dc:	2104      	movs	r1, #4
 801a6de:	f008 ff36 	bl	802354e <_ZdlPvj>
 801a6e2:	4620      	mov	r0, r4
 801a6e4:	bd10      	pop	{r4, pc}

0801a6e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801a6e6:	b510      	push	{r4, lr}
 801a6e8:	4604      	mov	r4, r0
 801a6ea:	2104      	movs	r1, #4
 801a6ec:	f008 ff2f 	bl	802354e <_ZdlPvj>
 801a6f0:	4620      	mov	r0, r4
 801a6f2:	bd10      	pop	{r4, pc}

0801a6f4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801a6f4:	b510      	push	{r4, lr}
 801a6f6:	4604      	mov	r4, r0
 801a6f8:	2104      	movs	r1, #4
 801a6fa:	f008 ff28 	bl	802354e <_ZdlPvj>
 801a6fe:	4620      	mov	r0, r4
 801a700:	bd10      	pop	{r4, pc}

0801a702 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801a702:	b510      	push	{r4, lr}
 801a704:	4604      	mov	r4, r0
 801a706:	2104      	movs	r1, #4
 801a708:	f008 ff21 	bl	802354e <_ZdlPvj>
 801a70c:	4620      	mov	r0, r4
 801a70e:	bd10      	pop	{r4, pc}

0801a710 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801a710:	b510      	push	{r4, lr}
 801a712:	4604      	mov	r4, r0
 801a714:	2104      	movs	r1, #4
 801a716:	f008 ff1a 	bl	802354e <_ZdlPvj>
 801a71a:	4620      	mov	r0, r4
 801a71c:	bd10      	pop	{r4, pc}

0801a71e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801a71e:	b510      	push	{r4, lr}
 801a720:	4604      	mov	r4, r0
 801a722:	2104      	movs	r1, #4
 801a724:	f008 ff13 	bl	802354e <_ZdlPvj>
 801a728:	4620      	mov	r0, r4
 801a72a:	bd10      	pop	{r4, pc}

0801a72c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801a72c:	b510      	push	{r4, lr}
 801a72e:	4604      	mov	r4, r0
 801a730:	2104      	movs	r1, #4
 801a732:	f008 ff0c 	bl	802354e <_ZdlPvj>
 801a736:	4620      	mov	r0, r4
 801a738:	bd10      	pop	{r4, pc}

0801a73a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801a73a:	b510      	push	{r4, lr}
 801a73c:	4604      	mov	r4, r0
 801a73e:	2104      	movs	r1, #4
 801a740:	f008 ff05 	bl	802354e <_ZdlPvj>
 801a744:	4620      	mov	r0, r4
 801a746:	bd10      	pop	{r4, pc}

0801a748 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 801a748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a74c:	b091      	sub	sp, #68	; 0x44
 801a74e:	469b      	mov	fp, r3
 801a750:	4616      	mov	r6, r2
 801a752:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a756:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 801a75a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a75e:	f9bd 906c 	ldrsh.w	r9, [sp, #108]	; 0x6c
 801a762:	4604      	mov	r4, r0
 801a764:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	; 0x70
 801a768:	4640      	mov	r0, r8
 801a76a:	460d      	mov	r5, r1
 801a76c:	4659      	mov	r1, fp
 801a76e:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801a772:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801a776:	f8ad 902c 	strh.w	r9, [sp, #44]	; 0x2c
 801a77a:	f8ad 702e 	strh.w	r7, [sp, #46]	; 0x2e
 801a77e:	f7f8 fc13 	bl	8012fa8 <_ZN8touchgfx4RectaNERKS0_>
 801a782:	4631      	mov	r1, r6
 801a784:	4640      	mov	r0, r8
 801a786:	f7f8 fc0f 	bl	8012fa8 <_ZN8touchgfx4RectaNERKS0_>
 801a78a:	4b74      	ldr	r3, [pc, #464]	; (801a95c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x214>)
 801a78c:	8818      	ldrh	r0, [r3, #0]
 801a78e:	4b74      	ldr	r3, [pc, #464]	; (801a960 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x218>)
 801a790:	b202      	sxth	r2, r0
 801a792:	8819      	ldrh	r1, [r3, #0]
 801a794:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 801a798:	b20e      	sxth	r6, r1
 801a79a:	2b00      	cmp	r3, #0
 801a79c:	da07      	bge.n	801a7ae <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x66>
 801a79e:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 801a7a2:	4463      	add	r3, ip
 801a7a4:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 801a7a8:	2300      	movs	r3, #0
 801a7aa:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 801a7ae:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 801a7b2:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 801a7b6:	1ad2      	subs	r2, r2, r3
 801a7b8:	4594      	cmp	ip, r2
 801a7ba:	bfc4      	itt	gt
 801a7bc:	1ac2      	subgt	r2, r0, r3
 801a7be:	f8ad 202c 	strhgt.w	r2, [sp, #44]	; 0x2c
 801a7c2:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801a7c6:	2a00      	cmp	r2, #0
 801a7c8:	da07      	bge.n	801a7da <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x92>
 801a7ca:	f8bd c02e 	ldrh.w	ip, [sp, #46]	; 0x2e
 801a7ce:	4462      	add	r2, ip
 801a7d0:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 801a7d4:	2200      	movs	r2, #0
 801a7d6:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 801a7da:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	; 0x2a
 801a7de:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 801a7e2:	eba6 060a 	sub.w	r6, r6, sl
 801a7e6:	42b2      	cmp	r2, r6
 801a7e8:	bfc4      	itt	gt
 801a7ea:	eba1 020a 	subgt.w	r2, r1, sl
 801a7ee:	f8ad 202e 	strhgt.w	r2, [sp, #46]	; 0x2e
 801a7f2:	4a5c      	ldr	r2, [pc, #368]	; (801a964 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x21c>)
 801a7f4:	7812      	ldrb	r2, [r2, #0]
 801a7f6:	b9a2      	cbnz	r2, 801a822 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xda>
 801a7f8:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 801a7fc:	4286      	cmp	r6, r0
 801a7fe:	4640      	mov	r0, r8
 801a800:	9303      	str	r3, [sp, #12]
 801a802:	bf14      	ite	ne
 801a804:	2600      	movne	r6, #0
 801a806:	2601      	moveq	r6, #1
 801a808:	f7f8 fc11 	bl	801302e <_ZNK8touchgfx4Rect7isEmptyEv>
 801a80c:	9b03      	ldr	r3, [sp, #12]
 801a80e:	b160      	cbz	r0, 801a82a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xe2>
 801a810:	2300      	movs	r3, #0
 801a812:	8023      	strh	r3, [r4, #0]
 801a814:	8063      	strh	r3, [r4, #2]
 801a816:	80a3      	strh	r3, [r4, #4]
 801a818:	4620      	mov	r0, r4
 801a81a:	80e3      	strh	r3, [r4, #6]
 801a81c:	b011      	add	sp, #68	; 0x44
 801a81e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a822:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 801a826:	428e      	cmp	r6, r1
 801a828:	e7e9      	b.n	801a7fe <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb6>
 801a82a:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 801a82e:	a90e      	add	r1, sp, #56	; 0x38
 801a830:	900e      	str	r0, [sp, #56]	; 0x38
 801a832:	a80c      	add	r0, sp, #48	; 0x30
 801a834:	9205      	str	r2, [sp, #20]
 801a836:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 801a83a:	f8ad 903c 	strh.w	r9, [sp, #60]	; 0x3c
 801a83e:	9206      	str	r2, [sp, #24]
 801a840:	f8bb 2000 	ldrh.w	r2, [fp]
 801a844:	f8ad 703e 	strh.w	r7, [sp, #62]	; 0x3e
 801a848:	1a9b      	subs	r3, r3, r2
 801a84a:	b21b      	sxth	r3, r3
 801a84c:	9303      	str	r3, [sp, #12]
 801a84e:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 801a852:	f8df b118 	ldr.w	fp, [pc, #280]	; 801a96c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 801a856:	ebaa 0a03 	sub.w	sl, sl, r3
 801a85a:	fa0f f38a 	sxth.w	r3, sl
 801a85e:	9304      	str	r3, [sp, #16]
 801a860:	9b03      	ldr	r3, [sp, #12]
 801a862:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 801a866:	9b04      	ldr	r3, [sp, #16]
 801a868:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801a86c:	9b05      	ldr	r3, [sp, #20]
 801a86e:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 801a872:	9b06      	ldr	r3, [sp, #24]
 801a874:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801a878:	f7fa fafe 	bl	8014e78 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801a87c:	4640      	mov	r0, r8
 801a87e:	f7fa fad3 	bl	8014e28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a882:	a80e      	add	r0, sp, #56	; 0x38
 801a884:	f7fa fad0 	bl	8014e28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a888:	4b37      	ldr	r3, [pc, #220]	; (801a968 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 801a88a:	4628      	mov	r0, r5
 801a88c:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 801a890:	881b      	ldrh	r3, [r3, #0]
 801a892:	9307      	str	r3, [sp, #28]
 801a894:	682b      	ldr	r3, [r5, #0]
 801a896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a898:	4798      	blx	r3
 801a89a:	f8bd 5032 	ldrh.w	r5, [sp, #50]	; 0x32
 801a89e:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 801a8a2:	4681      	mov	r9, r0
 801a8a4:	f8db 0000 	ldr.w	r0, [fp]
 801a8a8:	fb1a 3305 	smlabb	r3, sl, r5, r3
 801a8ac:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 801a8ae:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 801a8b2:	6803      	ldr	r3, [r0, #0]
 801a8b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a8b6:	4798      	blx	r3
 801a8b8:	4607      	mov	r7, r0
 801a8ba:	f8db 0000 	ldr.w	r0, [fp]
 801a8be:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 801a8c2:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801a8c6:	6803      	ldr	r3, [r0, #0]
 801a8c8:	9109      	str	r1, [sp, #36]	; 0x24
 801a8ca:	9208      	str	r2, [sp, #32]
 801a8cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a8ce:	4798      	blx	r3
 801a8d0:	f010 0f01 	tst.w	r0, #1
 801a8d4:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801a8d8:	d012      	beq.n	801a900 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b8>
 801a8da:	f8db 0000 	ldr.w	r0, [fp]
 801a8de:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 801a8e2:	6803      	ldr	r3, [r0, #0]
 801a8e4:	9200      	str	r2, [sp, #0]
 801a8e6:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 801a8e8:	462b      	mov	r3, r5
 801a8ea:	e898 0006 	ldmia.w	r8, {r1, r2}
 801a8ee:	47b0      	blx	r6
 801a8f0:	9b03      	ldr	r3, [sp, #12]
 801a8f2:	8023      	strh	r3, [r4, #0]
 801a8f4:	9b04      	ldr	r3, [sp, #16]
 801a8f6:	8063      	strh	r3, [r4, #2]
 801a8f8:	9b05      	ldr	r3, [sp, #20]
 801a8fa:	80a3      	strh	r3, [r4, #4]
 801a8fc:	9b06      	ldr	r3, [sp, #24]
 801a8fe:	e78b      	b.n	801a818 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xd0>
 801a900:	fb09 f202 	mul.w	r2, r9, r2
 801a904:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 801a908:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 801a90c:	440f      	add	r7, r1
 801a90e:	b166      	cbz	r6, 801a92a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 801a910:	9a07      	ldr	r2, [sp, #28]
 801a912:	4592      	cmp	sl, r2
 801a914:	d109      	bne.n	801a92a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 801a916:	f8db 0000 	ldr.w	r0, [fp]
 801a91a:	fb09 f303 	mul.w	r3, r9, r3
 801a91e:	4629      	mov	r1, r5
 801a920:	6802      	ldr	r2, [r0, #0]
 801a922:	6b56      	ldr	r6, [r2, #52]	; 0x34
 801a924:	463a      	mov	r2, r7
 801a926:	47b0      	blx	r6
 801a928:	e7e2      	b.n	801a8f0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 801a92a:	fb0a f303 	mul.w	r3, sl, r3
 801a92e:	ea4f 064a 	mov.w	r6, sl, lsl #1
 801a932:	f8df b038 	ldr.w	fp, [pc, #56]	; 801a96c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 801a936:	eb05 0843 	add.w	r8, r5, r3, lsl #1
 801a93a:	4545      	cmp	r5, r8
 801a93c:	d2d8      	bcs.n	801a8f0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 801a93e:	f8db 0000 	ldr.w	r0, [fp]
 801a942:	4629      	mov	r1, r5
 801a944:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801a948:	4435      	add	r5, r6
 801a94a:	6802      	ldr	r2, [r0, #0]
 801a94c:	005b      	lsls	r3, r3, #1
 801a94e:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 801a952:	463a      	mov	r2, r7
 801a954:	47d0      	blx	sl
 801a956:	444f      	add	r7, r9
 801a958:	e7ef      	b.n	801a93a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f2>
 801a95a:	bf00      	nop
 801a95c:	200243d0 	.word	0x200243d0
 801a960:	200243d2 	.word	0x200243d2
 801a964:	200243d4 	.word	0x200243d4
 801a968:	200243d6 	.word	0x200243d6
 801a96c:	200243dc 	.word	0x200243dc

0801a970 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801a970:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a972:	4606      	mov	r6, r0
 801a974:	b087      	sub	sp, #28
 801a976:	460c      	mov	r4, r1
 801a978:	4617      	mov	r7, r2
 801a97a:	461d      	mov	r5, r3
 801a97c:	b333      	cbz	r3, 801a9cc <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801a97e:	4608      	mov	r0, r1
 801a980:	f7f8 fb55 	bl	801302e <_ZNK8touchgfx4Rect7isEmptyEv>
 801a984:	bb10      	cbnz	r0, 801a9cc <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801a986:	6820      	ldr	r0, [r4, #0]
 801a988:	ab04      	add	r3, sp, #16
 801a98a:	6861      	ldr	r1, [r4, #4]
 801a98c:	4c1b      	ldr	r4, [pc, #108]	; (801a9fc <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
 801a98e:	c303      	stmia	r3!, {r0, r1}
 801a990:	a804      	add	r0, sp, #16
 801a992:	f7fa fa49 	bl	8014e28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a996:	6820      	ldr	r0, [r4, #0]
 801a998:	6803      	ldr	r3, [r0, #0]
 801a99a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a99c:	4798      	blx	r3
 801a99e:	2dff      	cmp	r5, #255	; 0xff
 801a9a0:	d016      	beq.n	801a9d0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 801a9a2:	f010 0f08 	tst.w	r0, #8
 801a9a6:	6820      	ldr	r0, [r4, #0]
 801a9a8:	d015      	beq.n	801a9d6 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 801a9aa:	2400      	movs	r4, #0
 801a9ac:	6801      	ldr	r1, [r0, #0]
 801a9ae:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801a9b2:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801a9b6:	e9cd 5402 	strd	r5, r4, [sp, #8]
 801a9ba:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 801a9be:	9401      	str	r4, [sp, #4]
 801a9c0:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801a9c4:	9400      	str	r4, [sp, #0]
 801a9c6:	6e0c      	ldr	r4, [r1, #96]	; 0x60
 801a9c8:	4639      	mov	r1, r7
 801a9ca:	47a0      	blx	r4
 801a9cc:	b007      	add	sp, #28
 801a9ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a9d0:	f010 0f02 	tst.w	r0, #2
 801a9d4:	e7e7      	b.n	801a9a6 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
 801a9d6:	6803      	ldr	r3, [r0, #0]
 801a9d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a9da:	4798      	blx	r3
 801a9dc:	4b08      	ldr	r3, [pc, #32]	; (801aa00 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 801a9de:	4601      	mov	r1, r0
 801a9e0:	4630      	mov	r0, r6
 801a9e2:	881a      	ldrh	r2, [r3, #0]
 801a9e4:	6833      	ldr	r3, [r6, #0]
 801a9e6:	e9cd 7500 	strd	r7, r5, [sp]
 801a9ea:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 801a9ec:	ab04      	add	r3, sp, #16
 801a9ee:	47a8      	blx	r5
 801a9f0:	6820      	ldr	r0, [r4, #0]
 801a9f2:	6803      	ldr	r3, [r0, #0]
 801a9f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a9f6:	4798      	blx	r3
 801a9f8:	e7e8      	b.n	801a9cc <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801a9fa:	bf00      	nop
 801a9fc:	200243dc 	.word	0x200243dc
 801aa00:	200243d6 	.word	0x200243d6

0801aa04 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 801aa04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801aa08:	f89d 7024 	ldrb.w	r7, [sp, #36]	; 0x24
 801aa0c:	4688      	mov	r8, r1
 801aa0e:	4614      	mov	r4, r2
 801aa10:	461d      	mov	r5, r3
 801aa12:	9e08      	ldr	r6, [sp, #32]
 801aa14:	2f00      	cmp	r7, #0
 801aa16:	f000 80ab 	beq.w	801ab70 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 801aa1a:	4618      	mov	r0, r3
 801aa1c:	f7f8 fb07 	bl	801302e <_ZNK8touchgfx4Rect7isEmptyEv>
 801aa20:	2800      	cmp	r0, #0
 801aa22:	f040 80a5 	bne.w	801ab70 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 801aa26:	f9b5 1000 	ldrsh.w	r1, [r5]
 801aa2a:	2fff      	cmp	r7, #255	; 0xff
 801aa2c:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801aa30:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
 801aa34:	fb04 1303 	mla	r3, r4, r3, r1
 801aa38:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
 801aa3c:	eba4 0200 	sub.w	r2, r4, r0
 801aa40:	eb08 0143 	add.w	r1, r8, r3, lsl #1
 801aa44:	fb04 f505 	mul.w	r5, r4, r5
 801aa48:	ea4f 2816 	mov.w	r8, r6, lsr #8
 801aa4c:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 801aa50:	d04a      	beq.n	801aae8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe4>
 801aa52:	b2bc      	uxth	r4, r7
 801aa54:	f1c7 0cff 	rsb	ip, r7, #255	; 0xff
 801aa58:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 801aa5c:	fa5f f788 	uxtb.w	r7, r8
 801aa60:	b2f3      	uxtb	r3, r6
 801aa62:	0040      	lsls	r0, r0, #1
 801aa64:	fb0e fe04 	mul.w	lr, lr, r4
 801aa68:	4367      	muls	r7, r4
 801aa6a:	ea4f 0842 	mov.w	r8, r2, lsl #1
 801aa6e:	4363      	muls	r3, r4
 801aa70:	fa1f fc8c 	uxth.w	ip, ip
 801aa74:	42a9      	cmp	r1, r5
 801aa76:	d27b      	bcs.n	801ab70 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 801aa78:	eb01 0900 	add.w	r9, r1, r0
 801aa7c:	4549      	cmp	r1, r9
 801aa7e:	d231      	bcs.n	801aae4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe0>
 801aa80:	880a      	ldrh	r2, [r1, #0]
 801aa82:	1214      	asrs	r4, r2, #8
 801aa84:	10d6      	asrs	r6, r2, #3
 801aa86:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 801aa8a:	00d2      	lsls	r2, r2, #3
 801aa8c:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801aa90:	b2d2      	uxtb	r2, r2
 801aa92:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 801aa96:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801aa9a:	fb14 f40c 	smulbb	r4, r4, ip
 801aa9e:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 801aaa2:	fb12 f20c 	smulbb	r2, r2, ip
 801aaa6:	fb16 f60c 	smulbb	r6, r6, ip
 801aaaa:	4474      	add	r4, lr
 801aaac:	441a      	add	r2, r3
 801aaae:	b2a4      	uxth	r4, r4
 801aab0:	443e      	add	r6, r7
 801aab2:	b292      	uxth	r2, r2
 801aab4:	f104 0a01 	add.w	sl, r4, #1
 801aab8:	b2b6      	uxth	r6, r6
 801aaba:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 801aabe:	f102 0a01 	add.w	sl, r2, #1
 801aac2:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
 801aac6:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 801aaca:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801aace:	4322      	orrs	r2, r4
 801aad0:	1c74      	adds	r4, r6, #1
 801aad2:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 801aad6:	0976      	lsrs	r6, r6, #5
 801aad8:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801aadc:	4332      	orrs	r2, r6
 801aade:	f821 2b02 	strh.w	r2, [r1], #2
 801aae2:	e7cb      	b.n	801aa7c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x78>
 801aae4:	4441      	add	r1, r8
 801aae6:	e7c5      	b.n	801aa74 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x70>
 801aae8:	0973      	lsrs	r3, r6, #5
 801aaea:	4f22      	ldr	r7, [pc, #136]	; (801ab74 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x170>)
 801aaec:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 801aaf0:	ea08 0707 	and.w	r7, r8, r7
 801aaf4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801aaf8:	433b      	orrs	r3, r7
 801aafa:	07e7      	lsls	r7, r4, #31
 801aafc:	ea43 0306 	orr.w	r3, r3, r6
 801ab00:	b29b      	uxth	r3, r3
 801ab02:	d50b      	bpl.n	801ab1c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x118>
 801ab04:	0040      	lsls	r0, r0, #1
 801ab06:	0052      	lsls	r2, r2, #1
 801ab08:	42a9      	cmp	r1, r5
 801ab0a:	d231      	bcs.n	801ab70 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 801ab0c:	180c      	adds	r4, r1, r0
 801ab0e:	42a1      	cmp	r1, r4
 801ab10:	d202      	bcs.n	801ab18 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x114>
 801ab12:	f821 3b02 	strh.w	r3, [r1], #2
 801ab16:	e7fa      	b.n	801ab0e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x10a>
 801ab18:	4411      	add	r1, r2
 801ab1a:	e7f5      	b.n	801ab08 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x104>
 801ab1c:	078e      	lsls	r6, r1, #30
 801ab1e:	d008      	beq.n	801ab32 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12e>
 801ab20:	0066      	lsls	r6, r4, #1
 801ab22:	460a      	mov	r2, r1
 801ab24:	42aa      	cmp	r2, r5
 801ab26:	d202      	bcs.n	801ab2e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12a>
 801ab28:	8013      	strh	r3, [r2, #0]
 801ab2a:	4432      	add	r2, r6
 801ab2c:	e7fa      	b.n	801ab24 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x120>
 801ab2e:	3102      	adds	r1, #2
 801ab30:	3801      	subs	r0, #1
 801ab32:	07c2      	lsls	r2, r0, #31
 801ab34:	d50b      	bpl.n	801ab4e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x14a>
 801ab36:	f100 4200 	add.w	r2, r0, #2147483648	; 0x80000000
 801ab3a:	0066      	lsls	r6, r4, #1
 801ab3c:	3a01      	subs	r2, #1
 801ab3e:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 801ab42:	42aa      	cmp	r2, r5
 801ab44:	d202      	bcs.n	801ab4c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x148>
 801ab46:	8013      	strh	r3, [r2, #0]
 801ab48:	4432      	add	r2, r6
 801ab4a:	e7fa      	b.n	801ab42 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x13e>
 801ab4c:	3801      	subs	r0, #1
 801ab4e:	b178      	cbz	r0, 801ab70 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 801ab50:	1040      	asrs	r0, r0, #1
 801ab52:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
 801ab56:	0080      	lsls	r0, r0, #2
 801ab58:	0064      	lsls	r4, r4, #1
 801ab5a:	42a9      	cmp	r1, r5
 801ab5c:	d208      	bcs.n	801ab70 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 801ab5e:	180e      	adds	r6, r1, r0
 801ab60:	460a      	mov	r2, r1
 801ab62:	42b2      	cmp	r2, r6
 801ab64:	d202      	bcs.n	801ab6c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 801ab66:	f842 3b04 	str.w	r3, [r2], #4
 801ab6a:	e7fa      	b.n	801ab62 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x15e>
 801ab6c:	4421      	add	r1, r4
 801ab6e:	e7f4      	b.n	801ab5a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x156>
 801ab70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ab74:	00fff800 	.word	0x00fff800

0801ab78 <_ZN8touchgfx8LCD16bppC1Ev>:
 801ab78:	2200      	movs	r2, #0
 801ab7a:	4910      	ldr	r1, [pc, #64]	; (801abbc <_ZN8touchgfx8LCD16bppC1Ev+0x44>)
 801ab7c:	6042      	str	r2, [r0, #4]
 801ab7e:	6001      	str	r1, [r0, #0]
 801ab80:	e9c0 2202 	strd	r2, r2, [r0, #8]
 801ab84:	e9c0 2204 	strd	r2, r2, [r0, #16]
 801ab88:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801ab8c:	e9c0 2208 	strd	r2, r2, [r0, #32]
 801ab90:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 801ab94:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 801ab98:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 801ab9c:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 801aba0:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 801aba4:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 801aba8:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 801abac:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 801abb0:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
 801abb4:	e9c0 221c 	strd	r2, r2, [r0, #112]	; 0x70
 801abb8:	4770      	bx	lr
 801abba:	bf00      	nop
 801abbc:	08027edc 	.word	0x08027edc

0801abc0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801abc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801abc4:	b08d      	sub	sp, #52	; 0x34
 801abc6:	460d      	mov	r5, r1
 801abc8:	4604      	mov	r4, r0
 801abca:	4699      	mov	r9, r3
 801abcc:	6808      	ldr	r0, [r1, #0]
 801abce:	ab08      	add	r3, sp, #32
 801abd0:	6849      	ldr	r1, [r1, #4]
 801abd2:	c303      	stmia	r3!, {r0, r1}
 801abd4:	6810      	ldr	r0, [r2, #0]
 801abd6:	ab0a      	add	r3, sp, #40	; 0x28
 801abd8:	6851      	ldr	r1, [r2, #4]
 801abda:	c303      	stmia	r3!, {r0, r1}
 801abdc:	a808      	add	r0, sp, #32
 801abde:	f7fa f923 	bl	8014e28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801abe2:	4629      	mov	r1, r5
 801abe4:	a80a      	add	r0, sp, #40	; 0x28
 801abe6:	4d67      	ldr	r5, [pc, #412]	; (801ad84 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 801abe8:	f7fa f946 	bl	8014e78 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801abec:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801abf0:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 801abf4:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 801abf8:	6828      	ldr	r0, [r5, #0]
 801abfa:	fb11 2103 	smlabb	r1, r1, r3, r2
 801abfe:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	; 0x2c
 801ac02:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 801ac06:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801ac0a:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 801ac0e:	440a      	add	r2, r1
 801ac10:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801ac14:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801ac18:	4413      	add	r3, r2
 801ac1a:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801ac1e:	6803      	ldr	r3, [r0, #0]
 801ac20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ac22:	4798      	blx	r3
 801ac24:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801ac28:	d119      	bne.n	801ac5e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 801ac2a:	f010 0f20 	tst.w	r0, #32
 801ac2e:	6828      	ldr	r0, [r5, #0]
 801ac30:	d018      	beq.n	801ac64 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
 801ac32:	2500      	movs	r5, #0
 801ac34:	6801      	ldr	r1, [r0, #0]
 801ac36:	b2b6      	uxth	r6, r6
 801ac38:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801ac3c:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801ac40:	9601      	str	r6, [sp, #4]
 801ac42:	e9cd 9503 	strd	r9, r5, [sp, #12]
 801ac46:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 801ac4a:	9502      	str	r5, [sp, #8]
 801ac4c:	fa1f f588 	uxth.w	r5, r8
 801ac50:	9500      	str	r5, [sp, #0]
 801ac52:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 801ac54:	4621      	mov	r1, r4
 801ac56:	47a8      	blx	r5
 801ac58:	b00d      	add	sp, #52	; 0x34
 801ac5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ac5e:	f010 0f40 	tst.w	r0, #64	; 0x40
 801ac62:	e7e4      	b.n	801ac2e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 801ac64:	6803      	ldr	r3, [r0, #0]
 801ac66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ac68:	4798      	blx	r3
 801ac6a:	4947      	ldr	r1, [pc, #284]	; (801ad88 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c8>)
 801ac6c:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801ac70:	880b      	ldrh	r3, [r1, #0]
 801ac72:	468a      	mov	sl, r1
 801ac74:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
 801ac78:	fb03 5202 	mla	r2, r3, r2, r5
 801ac7c:	4373      	muls	r3, r6
 801ac7e:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801ac82:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801ac86:	9307      	str	r3, [sp, #28]
 801ac88:	ea4f 0348 	mov.w	r3, r8, lsl #1
 801ac8c:	9306      	str	r3, [sp, #24]
 801ac8e:	9b07      	ldr	r3, [sp, #28]
 801ac90:	4298      	cmp	r0, r3
 801ac92:	d270      	bcs.n	801ad76 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b6>
 801ac94:	9b06      	ldr	r3, [sp, #24]
 801ac96:	4621      	mov	r1, r4
 801ac98:	eb00 0b03 	add.w	fp, r0, r3
 801ac9c:	4558      	cmp	r0, fp
 801ac9e:	d25d      	bcs.n	801ad5c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x19c>
 801aca0:	f851 4b04 	ldr.w	r4, [r1], #4
 801aca4:	0e23      	lsrs	r3, r4, #24
 801aca6:	d014      	beq.n	801acd2 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 801aca8:	2bff      	cmp	r3, #255	; 0xff
 801acaa:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 801acae:	d112      	bne.n	801acd6 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 801acb0:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801acb4:	d10f      	bne.n	801acd6 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 801acb6:	0963      	lsrs	r3, r4, #5
 801acb8:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 801acbc:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801acc0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801acc4:	f02c 0c07 	bic.w	ip, ip, #7
 801acc8:	ea43 0c0c 	orr.w	ip, r3, ip
 801accc:	ea4c 0404 	orr.w	r4, ip, r4
 801acd0:	8004      	strh	r4, [r0, #0]
 801acd2:	3002      	adds	r0, #2
 801acd4:	e7e2      	b.n	801ac9c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xdc>
 801acd6:	fb09 f303 	mul.w	r3, r9, r3
 801acda:	8807      	ldrh	r7, [r0, #0]
 801acdc:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 801ace0:	fa5f fc8c 	uxtb.w	ip, ip
 801ace4:	1c5a      	adds	r2, r3, #1
 801ace6:	123e      	asrs	r6, r7, #8
 801ace8:	10fd      	asrs	r5, r7, #3
 801acea:	eb02 2223 	add.w	r2, r2, r3, asr #8
 801acee:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801acf2:	00ff      	lsls	r7, r7, #3
 801acf4:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801acf8:	1212      	asrs	r2, r2, #8
 801acfa:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801acfe:	b293      	uxth	r3, r2
 801ad00:	43d2      	mvns	r2, r2
 801ad02:	b2ff      	uxtb	r7, r7
 801ad04:	fb1e fe03 	smulbb	lr, lr, r3
 801ad08:	b2d2      	uxtb	r2, r2
 801ad0a:	fb1c fc03 	smulbb	ip, ip, r3
 801ad0e:	b2e4      	uxtb	r4, r4
 801ad10:	fb06 e602 	mla	r6, r6, r2, lr
 801ad14:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 801ad18:	fb14 f403 	smulbb	r4, r4, r3
 801ad1c:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 801ad20:	b2b6      	uxth	r6, r6
 801ad22:	fb05 c502 	mla	r5, r5, r2, ip
 801ad26:	fb07 4702 	mla	r7, r7, r2, r4
 801ad2a:	f106 0e01 	add.w	lr, r6, #1
 801ad2e:	b2ad      	uxth	r5, r5
 801ad30:	b2bf      	uxth	r7, r7
 801ad32:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 801ad36:	f105 0c01 	add.w	ip, r5, #1
 801ad3a:	f406 4e78 	and.w	lr, r6, #63488	; 0xf800
 801ad3e:	1c7e      	adds	r6, r7, #1
 801ad40:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 801ad44:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 801ad48:	096d      	lsrs	r5, r5, #5
 801ad4a:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801ad4e:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801ad52:	ea46 060e 	orr.w	r6, r6, lr
 801ad56:	432e      	orrs	r6, r5
 801ad58:	8006      	strh	r6, [r0, #0]
 801ad5a:	e7ba      	b.n	801acd2 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 801ad5c:	f8ba 3000 	ldrh.w	r3, [sl]
 801ad60:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	; 0x24
 801ad64:	eba3 0308 	sub.w	r3, r3, r8
 801ad68:	eba4 0408 	sub.w	r4, r4, r8
 801ad6c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801ad70:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 801ad74:	e78b      	b.n	801ac8e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
 801ad76:	4b03      	ldr	r3, [pc, #12]	; (801ad84 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 801ad78:	6818      	ldr	r0, [r3, #0]
 801ad7a:	6803      	ldr	r3, [r0, #0]
 801ad7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ad7e:	4798      	blx	r3
 801ad80:	e76a      	b.n	801ac58 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 801ad82:	bf00      	nop
 801ad84:	200243dc 	.word	0x200243dc
 801ad88:	200243d6 	.word	0x200243d6

0801ad8c <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>:
 801ad8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ad90:	b085      	sub	sp, #20
 801ad92:	6810      	ldr	r0, [r2, #0]
 801ad94:	460c      	mov	r4, r1
 801ad96:	6851      	ldr	r1, [r2, #4]
 801ad98:	466d      	mov	r5, sp
 801ad9a:	4616      	mov	r6, r2
 801ad9c:	c503      	stmia	r5!, {r0, r1}
 801ad9e:	6818      	ldr	r0, [r3, #0]
 801ada0:	6859      	ldr	r1, [r3, #4]
 801ada2:	c503      	stmia	r5!, {r0, r1}
 801ada4:	4668      	mov	r0, sp
 801ada6:	4d2e      	ldr	r5, [pc, #184]	; (801ae60 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd4>)
 801ada8:	f7fa f83e 	bl	8014e28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801adac:	4631      	mov	r1, r6
 801adae:	a802      	add	r0, sp, #8
 801adb0:	4e2c      	ldr	r6, [pc, #176]	; (801ae64 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd8>)
 801adb2:	f7fa f861 	bl	8014e78 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801adb6:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 801adba:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 801adbe:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 801adc2:	6828      	ldr	r0, [r5, #0]
 801adc4:	fb11 2103 	smlabb	r1, r1, r3, r2
 801adc8:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801adcc:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
 801add0:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801add4:	f8bd 1000 	ldrh.w	r1, [sp]
 801add8:	440a      	add	r2, r1
 801adda:	f8ad 2008 	strh.w	r2, [sp, #8]
 801adde:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801ade2:	4413      	add	r3, r2
 801ade4:	f8ad 300a 	strh.w	r3, [sp, #10]
 801ade8:	6803      	ldr	r3, [r0, #0]
 801adea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801adec:	4798      	blx	r3
 801adee:	8833      	ldrh	r3, [r6, #0]
 801adf0:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 801adf4:	ea4f 0c47 	mov.w	ip, r7, lsl #1
 801adf8:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 801adfc:	f8df e068 	ldr.w	lr, [pc, #104]	; 801ae68 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xdc>
 801ae00:	fb03 1202 	mla	r2, r3, r2, r1
 801ae04:	fb08 f303 	mul.w	r3, r8, r3
 801ae08:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801ae0c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801ae10:	4298      	cmp	r0, r3
 801ae12:	d21d      	bcs.n	801ae50 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xc4>
 801ae14:	eb00 080c 	add.w	r8, r0, ip
 801ae18:	4540      	cmp	r0, r8
 801ae1a:	d20f      	bcs.n	801ae3c <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xb0>
 801ae1c:	f854 1b04 	ldr.w	r1, [r4], #4
 801ae20:	ea4f 1951 	mov.w	r9, r1, lsr #5
 801ae24:	ea0e 2211 	and.w	r2, lr, r1, lsr #8
 801ae28:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 801ae2c:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801ae30:	ea42 0209 	orr.w	r2, r2, r9
 801ae34:	430a      	orrs	r2, r1
 801ae36:	f820 2b02 	strh.w	r2, [r0], #2
 801ae3a:	e7ed      	b.n	801ae18 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x8c>
 801ae3c:	8832      	ldrh	r2, [r6, #0]
 801ae3e:	1bd2      	subs	r2, r2, r7
 801ae40:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801ae44:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 801ae48:	1bd2      	subs	r2, r2, r7
 801ae4a:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 801ae4e:	e7df      	b.n	801ae10 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x84>
 801ae50:	6828      	ldr	r0, [r5, #0]
 801ae52:	6803      	ldr	r3, [r0, #0]
 801ae54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ae56:	4798      	blx	r3
 801ae58:	b005      	add	sp, #20
 801ae5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ae5e:	bf00      	nop
 801ae60:	200243dc 	.word	0x200243dc
 801ae64:	200243d6 	.word	0x200243d6
 801ae68:	fffff800 	.word	0xfffff800

0801ae6c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>:
 801ae6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ae70:	b08e      	sub	sp, #56	; 0x38
 801ae72:	460e      	mov	r6, r1
 801ae74:	4604      	mov	r4, r0
 801ae76:	461d      	mov	r5, r3
 801ae78:	6808      	ldr	r0, [r1, #0]
 801ae7a:	ab0a      	add	r3, sp, #40	; 0x28
 801ae7c:	6849      	ldr	r1, [r1, #4]
 801ae7e:	f8df 81d4 	ldr.w	r8, [pc, #468]	; 801b054 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>
 801ae82:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 801b058 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1ec>
 801ae86:	c303      	stmia	r3!, {r0, r1}
 801ae88:	6810      	ldr	r0, [r2, #0]
 801ae8a:	ab0c      	add	r3, sp, #48	; 0x30
 801ae8c:	6851      	ldr	r1, [r2, #4]
 801ae8e:	c303      	stmia	r3!, {r0, r1}
 801ae90:	a80a      	add	r0, sp, #40	; 0x28
 801ae92:	f7f9 ffc9 	bl	8014e28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ae96:	4631      	mov	r1, r6
 801ae98:	a80c      	add	r0, sp, #48	; 0x30
 801ae9a:	f7f9 ffed 	bl	8014e78 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801ae9e:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 801aea2:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801aea6:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801aeaa:	f8d8 0000 	ldr.w	r0, [r8]
 801aeae:	fb11 2103 	smlabb	r1, r1, r3, r2
 801aeb2:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
 801aeb6:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	; 0x36
 801aeba:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801aebe:	440c      	add	r4, r1
 801aec0:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 801aec4:	440a      	add	r2, r1
 801aec6:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 801aeca:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 801aece:	4413      	add	r3, r2
 801aed0:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801aed4:	6803      	ldr	r3, [r0, #0]
 801aed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801aed8:	4798      	blx	r3
 801aeda:	2dff      	cmp	r5, #255	; 0xff
 801aedc:	d124      	bne.n	801af28 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xbc>
 801aede:	f010 0f01 	tst.w	r0, #1
 801aee2:	f8d8 0000 	ldr.w	r0, [r8]
 801aee6:	d022      	beq.n	801af2e <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xc2>
 801aee8:	2100      	movs	r1, #0
 801aeea:	f04f 0e01 	mov.w	lr, #1
 801aeee:	f8d0 c000 	ldr.w	ip, [r0]
 801aef2:	b2b6      	uxth	r6, r6
 801aef4:	f8cd e018 	str.w	lr, [sp, #24]
 801aef8:	b2bf      	uxth	r7, r7
 801aefa:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 801aefe:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 801af02:	e9cd 1107 	strd	r1, r1, [sp, #28]
 801af06:	f8b9 e000 	ldrh.w	lr, [r9]
 801af0a:	9503      	str	r5, [sp, #12]
 801af0c:	9601      	str	r6, [sp, #4]
 801af0e:	9700      	str	r7, [sp, #0]
 801af10:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 801af14:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801af18:	9102      	str	r1, [sp, #8]
 801af1a:	4621      	mov	r1, r4
 801af1c:	f8dc 5040 	ldr.w	r5, [ip, #64]	; 0x40
 801af20:	47a8      	blx	r5
 801af22:	b00e      	add	sp, #56	; 0x38
 801af24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801af28:	f010 0f04 	tst.w	r0, #4
 801af2c:	e7d9      	b.n	801aee2 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x76>
 801af2e:	6803      	ldr	r3, [r0, #0]
 801af30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801af32:	4798      	blx	r3
 801af34:	f8b9 3000 	ldrh.w	r3, [r9]
 801af38:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 801af3c:	ea4f 0e47 	mov.w	lr, r7, lsl #1
 801af40:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 801af44:	435e      	muls	r6, r3
 801af46:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 801af4a:	2dff      	cmp	r5, #255	; 0xff
 801af4c:	fb03 1202 	mla	r2, r3, r2, r1
 801af50:	ebac 0c07 	sub.w	ip, ip, r7
 801af54:	eba3 0707 	sub.w	r7, r3, r7
 801af58:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801af5c:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801af60:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801af64:	ea4f 0747 	mov.w	r7, r7, lsl #1
 801af68:	d049      	beq.n	801affe <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x192>
 801af6a:	43eb      	mvns	r3, r5
 801af6c:	fa1f f985 	uxth.w	r9, r5
 801af70:	b2db      	uxtb	r3, r3
 801af72:	42b0      	cmp	r0, r6
 801af74:	d266      	bcs.n	801b044 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 801af76:	eb00 0a0e 	add.w	sl, r0, lr
 801af7a:	4550      	cmp	r0, sl
 801af7c:	4621      	mov	r1, r4
 801af7e:	f104 0403 	add.w	r4, r4, #3
 801af82:	d25b      	bcs.n	801b03c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d0>
 801af84:	8802      	ldrh	r2, [r0, #0]
 801af86:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 801af8a:	ea4f 2822 	mov.w	r8, r2, asr #8
 801af8e:	fb11 f109 	smulbb	r1, r1, r9
 801af92:	10d5      	asrs	r5, r2, #3
 801af94:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
 801af98:	00d2      	lsls	r2, r2, #3
 801af9a:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801af9e:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 801afa2:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 801afa6:	fb08 1803 	mla	r8, r8, r3, r1
 801afaa:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 801afae:	b2d2      	uxtb	r2, r2
 801afb0:	fb11 f109 	smulbb	r1, r1, r9
 801afb4:	fa1f f888 	uxth.w	r8, r8
 801afb8:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801afbc:	fb05 1503 	mla	r5, r5, r3, r1
 801afc0:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 801afc4:	fb11 f109 	smulbb	r1, r1, r9
 801afc8:	b2ad      	uxth	r5, r5
 801afca:	fb02 1203 	mla	r2, r2, r3, r1
 801afce:	f108 0101 	add.w	r1, r8, #1
 801afd2:	b292      	uxth	r2, r2
 801afd4:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 801afd8:	1c51      	adds	r1, r2, #1
 801afda:	f408 4878 	and.w	r8, r8, #63488	; 0xf800
 801afde:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801afe2:	1c69      	adds	r1, r5, #1
 801afe4:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 801afe8:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801afec:	096d      	lsrs	r5, r5, #5
 801afee:	ea42 0208 	orr.w	r2, r2, r8
 801aff2:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801aff6:	432a      	orrs	r2, r5
 801aff8:	f820 2b02 	strh.w	r2, [r0], #2
 801affc:	e7bd      	b.n	801af7a <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x10e>
 801affe:	4a14      	ldr	r2, [pc, #80]	; (801b050 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e4>)
 801b000:	42b0      	cmp	r0, r6
 801b002:	d21f      	bcs.n	801b044 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 801b004:	eb00 050e 	add.w	r5, r0, lr
 801b008:	42a8      	cmp	r0, r5
 801b00a:	4621      	mov	r1, r4
 801b00c:	f104 0403 	add.w	r4, r4, #3
 801b010:	d210      	bcs.n	801b034 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1c8>
 801b012:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 801b016:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 801b01a:	00db      	lsls	r3, r3, #3
 801b01c:	ea02 2101 	and.w	r1, r2, r1, lsl #8
 801b020:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801b024:	430b      	orrs	r3, r1
 801b026:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 801b02a:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
 801b02e:	f820 3b02 	strh.w	r3, [r0], #2
 801b032:	e7e9      	b.n	801b008 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x19c>
 801b034:	4438      	add	r0, r7
 801b036:	eb01 040c 	add.w	r4, r1, ip
 801b03a:	e7e1      	b.n	801b000 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x194>
 801b03c:	4438      	add	r0, r7
 801b03e:	eb01 040c 	add.w	r4, r1, ip
 801b042:	e796      	b.n	801af72 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x106>
 801b044:	4b03      	ldr	r3, [pc, #12]	; (801b054 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>)
 801b046:	6818      	ldr	r0, [r3, #0]
 801b048:	6803      	ldr	r3, [r0, #0]
 801b04a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b04c:	4798      	blx	r3
 801b04e:	e768      	b.n	801af22 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xb6>
 801b050:	fffff800 	.word	0xfffff800
 801b054:	200243dc 	.word	0x200243dc
 801b058:	200243d6 	.word	0x200243d6

0801b05c <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801b05c:	b4f0      	push	{r4, r5, r6, r7}
 801b05e:	4616      	mov	r6, r2
 801b060:	461c      	mov	r4, r3
 801b062:	460d      	mov	r5, r1
 801b064:	9a04      	ldr	r2, [sp, #16]
 801b066:	2e01      	cmp	r6, #1
 801b068:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801b06c:	f89d 7018 	ldrb.w	r7, [sp, #24]
 801b070:	d012      	beq.n	801b098 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x3c>
 801b072:	d303      	bcc.n	801b07c <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x20>
 801b074:	2e02      	cmp	r6, #2
 801b076:	d00a      	beq.n	801b08e <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x32>
 801b078:	bcf0      	pop	{r4, r5, r6, r7}
 801b07a:	4770      	bx	lr
 801b07c:	6805      	ldr	r5, [r0, #0]
 801b07e:	e9cd 3704 	strd	r3, r7, [sp, #16]
 801b082:	68ed      	ldr	r5, [r5, #12]
 801b084:	4613      	mov	r3, r2
 801b086:	4622      	mov	r2, r4
 801b088:	46ac      	mov	ip, r5
 801b08a:	bcf0      	pop	{r4, r5, r6, r7}
 801b08c:	4760      	bx	ip
 801b08e:	4621      	mov	r1, r4
 801b090:	4628      	mov	r0, r5
 801b092:	bcf0      	pop	{r4, r5, r6, r7}
 801b094:	f7ff bd94 	b.w	801abc0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801b098:	4621      	mov	r1, r4
 801b09a:	4628      	mov	r0, r5
 801b09c:	bcf0      	pop	{r4, r5, r6, r7}
 801b09e:	f7ff bee5 	b.w	801ae6c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
	...

0801b0a4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801b0a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b0a8:	b093      	sub	sp, #76	; 0x4c
 801b0aa:	4681      	mov	r9, r0
 801b0ac:	4688      	mov	r8, r1
 801b0ae:	6810      	ldr	r0, [r2, #0]
 801b0b0:	6851      	ldr	r1, [r2, #4]
 801b0b2:	ac0e      	add	r4, sp, #56	; 0x38
 801b0b4:	4616      	mov	r6, r2
 801b0b6:	f89d a070 	ldrb.w	sl, [sp, #112]	; 0x70
 801b0ba:	4f6b      	ldr	r7, [pc, #428]	; (801b268 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 801b0bc:	c403      	stmia	r4!, {r0, r1}
 801b0be:	6818      	ldr	r0, [r3, #0]
 801b0c0:	ac10      	add	r4, sp, #64	; 0x40
 801b0c2:	6859      	ldr	r1, [r3, #4]
 801b0c4:	c403      	stmia	r4!, {r0, r1}
 801b0c6:	a80e      	add	r0, sp, #56	; 0x38
 801b0c8:	f7f9 feae 	bl	8014e28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b0cc:	4631      	mov	r1, r6
 801b0ce:	a810      	add	r0, sp, #64	; 0x40
 801b0d0:	4e66      	ldr	r6, [pc, #408]	; (801b26c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 801b0d2:	f7f9 fed1 	bl	8014e78 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801b0d6:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801b0da:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 801b0de:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 801b0e2:	6830      	ldr	r0, [r6, #0]
 801b0e4:	fb11 2103 	smlabb	r1, r1, r3, r2
 801b0e8:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	; 0x44
 801b0ec:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	; 0x46
 801b0f0:	4489      	add	r9, r1
 801b0f2:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 801b0f6:	440a      	add	r2, r1
 801b0f8:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801b0fc:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801b100:	4413      	add	r3, r2
 801b102:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801b106:	6803      	ldr	r3, [r0, #0]
 801b108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b10a:	4798      	blx	r3
 801b10c:	f010 0f80 	tst.w	r0, #128	; 0x80
 801b110:	6830      	ldr	r0, [r6, #0]
 801b112:	d01d      	beq.n	801b150 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 801b114:	2200      	movs	r2, #0
 801b116:	6801      	ldr	r1, [r0, #0]
 801b118:	b2a4      	uxth	r4, r4
 801b11a:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801b11e:	b2ad      	uxth	r5, r5
 801b120:	e9cd 2208 	strd	r2, r2, [sp, #32]
 801b124:	220b      	movs	r2, #11
 801b126:	9207      	str	r2, [sp, #28]
 801b128:	883a      	ldrh	r2, [r7, #0]
 801b12a:	9502      	str	r5, [sp, #8]
 801b12c:	9206      	str	r2, [sp, #24]
 801b12e:	2201      	movs	r2, #1
 801b130:	9401      	str	r4, [sp, #4]
 801b132:	e9cd a204 	strd	sl, r2, [sp, #16]
 801b136:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 801b13a:	9203      	str	r2, [sp, #12]
 801b13c:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801b140:	9200      	str	r2, [sp, #0]
 801b142:	4642      	mov	r2, r8
 801b144:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 801b146:	4649      	mov	r1, r9
 801b148:	47a0      	blx	r4
 801b14a:	b013      	add	sp, #76	; 0x4c
 801b14c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b150:	6803      	ldr	r3, [r0, #0]
 801b152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b154:	4798      	blx	r3
 801b156:	883b      	ldrh	r3, [r7, #0]
 801b158:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 801b15c:	f04f 0e04 	mov.w	lr, #4
 801b160:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
 801b164:	435d      	muls	r5, r3
 801b166:	fb03 1202 	mla	r2, r3, r2, r1
 801b16a:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801b16e:	eb00 0245 	add.w	r2, r0, r5, lsl #1
 801b172:	920c      	str	r2, [sp, #48]	; 0x30
 801b174:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 801b178:	1b12      	subs	r2, r2, r4
 801b17a:	920d      	str	r2, [sp, #52]	; 0x34
 801b17c:	0062      	lsls	r2, r4, #1
 801b17e:	1b1c      	subs	r4, r3, r4
 801b180:	920a      	str	r2, [sp, #40]	; 0x28
 801b182:	0063      	lsls	r3, r4, #1
 801b184:	930b      	str	r3, [sp, #44]	; 0x2c
 801b186:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b188:	4298      	cmp	r0, r3
 801b18a:	d266      	bcs.n	801b25a <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b6>
 801b18c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b18e:	eb00 0b03 	add.w	fp, r0, r3
 801b192:	4558      	cmp	r0, fp
 801b194:	d25c      	bcs.n	801b250 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 801b196:	f819 3b01 	ldrb.w	r3, [r9], #1
 801b19a:	fb1e e303 	smlabb	r3, lr, r3, lr
 801b19e:	f858 2003 	ldr.w	r2, [r8, r3]
 801b1a2:	0e11      	lsrs	r1, r2, #24
 801b1a4:	d012      	beq.n	801b1cc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801b1a6:	29ff      	cmp	r1, #255	; 0xff
 801b1a8:	ea4f 2712 	mov.w	r7, r2, lsr #8
 801b1ac:	d110      	bne.n	801b1d0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801b1ae:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801b1b2:	d10d      	bne.n	801b1d0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801b1b4:	0953      	lsrs	r3, r2, #5
 801b1b6:	f427 67ff 	bic.w	r7, r7, #2040	; 0x7f8
 801b1ba:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801b1be:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801b1c2:	f027 0707 	bic.w	r7, r7, #7
 801b1c6:	431f      	orrs	r7, r3
 801b1c8:	433a      	orrs	r2, r7
 801b1ca:	8002      	strh	r2, [r0, #0]
 801b1cc:	3002      	adds	r0, #2
 801b1ce:	e7e0      	b.n	801b192 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xee>
 801b1d0:	fb0a f101 	mul.w	r1, sl, r1
 801b1d4:	8806      	ldrh	r6, [r0, #0]
 801b1d6:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 801b1da:	b2d2      	uxtb	r2, r2
 801b1dc:	1c4b      	adds	r3, r1, #1
 801b1de:	1235      	asrs	r5, r6, #8
 801b1e0:	10f4      	asrs	r4, r6, #3
 801b1e2:	eb03 2321 	add.w	r3, r3, r1, asr #8
 801b1e6:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801b1ea:	00f6      	lsls	r6, r6, #3
 801b1ec:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 801b1f0:	121b      	asrs	r3, r3, #8
 801b1f2:	b2f6      	uxtb	r6, r6
 801b1f4:	b299      	uxth	r1, r3
 801b1f6:	43db      	mvns	r3, r3
 801b1f8:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 801b1fc:	fb1c fc01 	smulbb	ip, ip, r1
 801b200:	b2db      	uxtb	r3, r3
 801b202:	fb12 f201 	smulbb	r2, r2, r1
 801b206:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801b20a:	fb05 c503 	mla	r5, r5, r3, ip
 801b20e:	b2ff      	uxtb	r7, r7
 801b210:	fb06 2203 	mla	r2, r6, r3, r2
 801b214:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 801b218:	fb17 f701 	smulbb	r7, r7, r1
 801b21c:	b2ad      	uxth	r5, r5
 801b21e:	b292      	uxth	r2, r2
 801b220:	fb04 7403 	mla	r4, r4, r3, r7
 801b224:	f105 0c01 	add.w	ip, r5, #1
 801b228:	1c57      	adds	r7, r2, #1
 801b22a:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 801b22e:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 801b232:	b2a4      	uxth	r4, r4
 801b234:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801b238:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801b23c:	433d      	orrs	r5, r7
 801b23e:	1c67      	adds	r7, r4, #1
 801b240:	eb07 2414 	add.w	r4, r7, r4, lsr #8
 801b244:	0964      	lsrs	r4, r4, #5
 801b246:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 801b24a:	4325      	orrs	r5, r4
 801b24c:	8005      	strh	r5, [r0, #0]
 801b24e:	e7bd      	b.n	801b1cc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801b250:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b252:	4418      	add	r0, r3
 801b254:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b256:	4499      	add	r9, r3
 801b258:	e795      	b.n	801b186 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xe2>
 801b25a:	4b04      	ldr	r3, [pc, #16]	; (801b26c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 801b25c:	6818      	ldr	r0, [r3, #0]
 801b25e:	6803      	ldr	r3, [r0, #0]
 801b260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b262:	4798      	blx	r3
 801b264:	e771      	b.n	801b14a <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xa6>
 801b266:	bf00      	nop
 801b268:	200243d6 	.word	0x200243d6
 801b26c:	200243dc 	.word	0x200243dc

0801b270 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 801b270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b274:	b087      	sub	sp, #28
 801b276:	4680      	mov	r8, r0
 801b278:	460d      	mov	r5, r1
 801b27a:	4614      	mov	r4, r2
 801b27c:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
 801b280:	2e00      	cmp	r6, #0
 801b282:	f000 80b9 	beq.w	801b3f8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x188>
 801b286:	6810      	ldr	r0, [r2, #0]
 801b288:	af02      	add	r7, sp, #8
 801b28a:	6851      	ldr	r1, [r2, #4]
 801b28c:	c703      	stmia	r7!, {r0, r1}
 801b28e:	6818      	ldr	r0, [r3, #0]
 801b290:	af04      	add	r7, sp, #16
 801b292:	6859      	ldr	r1, [r3, #4]
 801b294:	c703      	stmia	r7!, {r0, r1}
 801b296:	a802      	add	r0, sp, #8
 801b298:	f7f9 fdc6 	bl	8014e28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b29c:	4621      	mov	r1, r4
 801b29e:	a804      	add	r0, sp, #16
 801b2a0:	f7f9 fdea 	bl	8014e78 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801b2a4:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801b2a8:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801b2ac:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 801b2b0:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 801b2b4:	fb14 2103 	smlabb	r1, r4, r3, r2
 801b2b8:	eb08 0401 	add.w	r4, r8, r1
 801b2bc:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801b2c0:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 801b2c4:	440a      	add	r2, r1
 801b2c6:	ea4f 0a48 	mov.w	sl, r8, lsl #1
 801b2ca:	f8ad 2010 	strh.w	r2, [sp, #16]
 801b2ce:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801b2d2:	4413      	add	r3, r2
 801b2d4:	f8ad 3012 	strh.w	r3, [sp, #18]
 801b2d8:	4b49      	ldr	r3, [pc, #292]	; (801b400 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 801b2da:	6818      	ldr	r0, [r3, #0]
 801b2dc:	6803      	ldr	r3, [r0, #0]
 801b2de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b2e0:	4798      	blx	r3
 801b2e2:	4b48      	ldr	r3, [pc, #288]	; (801b404 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x194>)
 801b2e4:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 801b2e8:	2eff      	cmp	r6, #255	; 0xff
 801b2ea:	881a      	ldrh	r2, [r3, #0]
 801b2ec:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 801b2f0:	fb02 c101 	mla	r1, r2, r1, ip
 801b2f4:	fb02 f207 	mul.w	r2, r2, r7
 801b2f8:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 801b2fc:	f105 0104 	add.w	r1, r5, #4
 801b300:	461d      	mov	r5, r3
 801b302:	d05a      	beq.n	801b3ba <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14a>
 801b304:	f1c6 0eff 	rsb	lr, r6, #255	; 0xff
 801b308:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801b30c:	b2b6      	uxth	r6, r6
 801b30e:	9301      	str	r3, [sp, #4]
 801b310:	fa1f fe8e 	uxth.w	lr, lr
 801b314:	4282      	cmp	r2, r0
 801b316:	d96a      	bls.n	801b3ee <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 801b318:	eb00 0b0a 	add.w	fp, r0, sl
 801b31c:	4583      	cmp	fp, r0
 801b31e:	d940      	bls.n	801b3a2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x132>
 801b320:	8805      	ldrh	r5, [r0, #0]
 801b322:	f814 3b01 	ldrb.w	r3, [r4], #1
 801b326:	122f      	asrs	r7, r5, #8
 801b328:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801b32c:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801b330:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801b334:	00ed      	lsls	r5, r5, #3
 801b336:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801b33a:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801b33e:	fb17 f70e 	smulbb	r7, r7, lr
 801b342:	b2ed      	uxtb	r5, r5
 801b344:	fb19 f90e 	smulbb	r9, r9, lr
 801b348:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801b34c:	fb15 f50e 	smulbb	r5, r5, lr
 801b350:	fb0c 7c06 	mla	ip, ip, r6, r7
 801b354:	10df      	asrs	r7, r3, #3
 801b356:	00db      	lsls	r3, r3, #3
 801b358:	fa1f fc8c 	uxth.w	ip, ip
 801b35c:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801b360:	b2db      	uxtb	r3, r3
 801b362:	fb07 9706 	mla	r7, r7, r6, r9
 801b366:	f10c 0901 	add.w	r9, ip, #1
 801b36a:	fb03 5306 	mla	r3, r3, r6, r5
 801b36e:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 801b372:	b29b      	uxth	r3, r3
 801b374:	f40c 4978 	and.w	r9, ip, #63488	; 0xf800
 801b378:	b2bf      	uxth	r7, r7
 801b37a:	f103 0c01 	add.w	ip, r3, #1
 801b37e:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801b382:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801b386:	ea4c 0c09 	orr.w	ip, ip, r9
 801b38a:	f107 0901 	add.w	r9, r7, #1
 801b38e:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 801b392:	097f      	lsrs	r7, r7, #5
 801b394:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801b398:	ea4c 0c07 	orr.w	ip, ip, r7
 801b39c:	f820 cb02 	strh.w	ip, [r0], #2
 801b3a0:	e7bc      	b.n	801b31c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xac>
 801b3a2:	9b01      	ldr	r3, [sp, #4]
 801b3a4:	881b      	ldrh	r3, [r3, #0]
 801b3a6:	eba3 0308 	sub.w	r3, r3, r8
 801b3aa:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801b3ae:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801b3b2:	eba3 0308 	sub.w	r3, r3, r8
 801b3b6:	441c      	add	r4, r3
 801b3b8:	e7ac      	b.n	801b314 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xa4>
 801b3ba:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801b3be:	4282      	cmp	r2, r0
 801b3c0:	d915      	bls.n	801b3ee <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 801b3c2:	eb00 060a 	add.w	r6, r0, sl
 801b3c6:	4286      	cmp	r6, r0
 801b3c8:	d906      	bls.n	801b3d8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x168>
 801b3ca:	f814 3b01 	ldrb.w	r3, [r4], #1
 801b3ce:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801b3d2:	f820 3b02 	strh.w	r3, [r0], #2
 801b3d6:	e7f6      	b.n	801b3c6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x156>
 801b3d8:	882b      	ldrh	r3, [r5, #0]
 801b3da:	eba3 0308 	sub.w	r3, r3, r8
 801b3de:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801b3e2:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801b3e6:	eba3 0308 	sub.w	r3, r3, r8
 801b3ea:	441c      	add	r4, r3
 801b3ec:	e7e7      	b.n	801b3be <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14e>
 801b3ee:	4b04      	ldr	r3, [pc, #16]	; (801b400 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 801b3f0:	6818      	ldr	r0, [r3, #0]
 801b3f2:	6803      	ldr	r3, [r0, #0]
 801b3f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b3f6:	4798      	blx	r3
 801b3f8:	b007      	add	sp, #28
 801b3fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b3fe:	bf00      	nop
 801b400:	200243dc 	.word	0x200243dc
 801b404:	200243d6 	.word	0x200243d6

0801b408 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 801b408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b40c:	b091      	sub	sp, #68	; 0x44
 801b40e:	4680      	mov	r8, r0
 801b410:	460f      	mov	r7, r1
 801b412:	4614      	mov	r4, r2
 801b414:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
 801b418:	2d00      	cmp	r5, #0
 801b41a:	d051      	beq.n	801b4c0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 801b41c:	6810      	ldr	r0, [r2, #0]
 801b41e:	ae0c      	add	r6, sp, #48	; 0x30
 801b420:	6851      	ldr	r1, [r2, #4]
 801b422:	f8df 9200 	ldr.w	r9, [pc, #512]	; 801b624 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>
 801b426:	c603      	stmia	r6!, {r0, r1}
 801b428:	6818      	ldr	r0, [r3, #0]
 801b42a:	ae0e      	add	r6, sp, #56	; 0x38
 801b42c:	6859      	ldr	r1, [r3, #4]
 801b42e:	c603      	stmia	r6!, {r0, r1}
 801b430:	a80c      	add	r0, sp, #48	; 0x30
 801b432:	f7f9 fcf9 	bl	8014e28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b436:	4621      	mov	r1, r4
 801b438:	a80e      	add	r0, sp, #56	; 0x38
 801b43a:	f7f9 fd1d 	bl	8014e78 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801b43e:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801b442:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801b446:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801b44a:	f8d9 0000 	ldr.w	r0, [r9]
 801b44e:	fb11 2103 	smlabb	r1, r1, r3, r2
 801b452:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	; 0x3c
 801b456:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
 801b45a:	eb08 0401 	add.w	r4, r8, r1
 801b45e:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801b462:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 801b628 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x220>
 801b466:	440a      	add	r2, r1
 801b468:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801b46c:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801b470:	4413      	add	r3, r2
 801b472:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801b476:	6803      	ldr	r3, [r0, #0]
 801b478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b47a:	4798      	blx	r3
 801b47c:	f010 0f80 	tst.w	r0, #128	; 0x80
 801b480:	f8d9 0000 	ldr.w	r0, [r9]
 801b484:	d01f      	beq.n	801b4c6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xbe>
 801b486:	2200      	movs	r2, #0
 801b488:	6801      	ldr	r1, [r0, #0]
 801b48a:	b2b6      	uxth	r6, r6
 801b48c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801b490:	e9cd 2208 	strd	r2, r2, [sp, #32]
 801b494:	220b      	movs	r2, #11
 801b496:	9207      	str	r2, [sp, #28]
 801b498:	f8b8 2000 	ldrh.w	r2, [r8]
 801b49c:	9601      	str	r6, [sp, #4]
 801b49e:	9206      	str	r2, [sp, #24]
 801b4a0:	2201      	movs	r2, #1
 801b4a2:	e9cd 5204 	strd	r5, r2, [sp, #16]
 801b4a6:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801b4aa:	9203      	str	r2, [sp, #12]
 801b4ac:	fa1f f28a 	uxth.w	r2, sl
 801b4b0:	9202      	str	r2, [sp, #8]
 801b4b2:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801b4b6:	9200      	str	r2, [sp, #0]
 801b4b8:	463a      	mov	r2, r7
 801b4ba:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 801b4bc:	4621      	mov	r1, r4
 801b4be:	47a8      	blx	r5
 801b4c0:	b011      	add	sp, #68	; 0x44
 801b4c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b4c6:	6803      	ldr	r3, [r0, #0]
 801b4c8:	ea4f 0946 	mov.w	r9, r6, lsl #1
 801b4cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b4ce:	4798      	blx	r3
 801b4d0:	f8b8 2000 	ldrh.w	r2, [r8]
 801b4d4:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801b4d8:	2dff      	cmp	r5, #255	; 0xff
 801b4da:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 801b4de:	fb0a fa02 	mul.w	sl, sl, r2
 801b4e2:	fb02 1303 	mla	r3, r2, r3, r1
 801b4e6:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801b4ea:	d062      	beq.n	801b5b2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
 801b4ec:	ea6f 0c05 	mvn.w	ip, r5
 801b4f0:	eb00 034a 	add.w	r3, r0, sl, lsl #1
 801b4f4:	b2ad      	uxth	r5, r5
 801b4f6:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 801b4fa:	fa5f fc8c 	uxtb.w	ip, ip
 801b4fe:	930a      	str	r3, [sp, #40]	; 0x28
 801b500:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b502:	4298      	cmp	r0, r3
 801b504:	f080 8085 	bcs.w	801b612 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 801b508:	eb00 0b09 	add.w	fp, r0, r9
 801b50c:	4558      	cmp	r0, fp
 801b50e:	d246      	bcs.n	801b59e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x196>
 801b510:	f814 eb01 	ldrb.w	lr, [r4], #1
 801b514:	2303      	movs	r3, #3
 801b516:	2204      	movs	r2, #4
 801b518:	fb13 2e0e 	smlabb	lr, r3, lr, r2
 801b51c:	8803      	ldrh	r3, [r0, #0]
 801b51e:	eb07 0a0e 	add.w	sl, r7, lr
 801b522:	1219      	asrs	r1, r3, #8
 801b524:	10da      	asrs	r2, r3, #3
 801b526:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801b52a:	f89a 8002 	ldrb.w	r8, [sl, #2]
 801b52e:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801b532:	00db      	lsls	r3, r3, #3
 801b534:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801b538:	fb18 f805 	smulbb	r8, r8, r5
 801b53c:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 801b540:	fb1e fe05 	smulbb	lr, lr, r5
 801b544:	b2db      	uxtb	r3, r3
 801b546:	fb01 810c 	mla	r1, r1, ip, r8
 801b54a:	f89a 8001 	ldrb.w	r8, [sl, #1]
 801b54e:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 801b552:	fb18 f805 	smulbb	r8, r8, r5
 801b556:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 801b55a:	b289      	uxth	r1, r1
 801b55c:	fb02 820c 	mla	r2, r2, ip, r8
 801b560:	fb03 e30c 	mla	r3, r3, ip, lr
 801b564:	f101 0801 	add.w	r8, r1, #1
 801b568:	b292      	uxth	r2, r2
 801b56a:	b29b      	uxth	r3, r3
 801b56c:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801b570:	f102 0801 	add.w	r8, r2, #1
 801b574:	f103 0e01 	add.w	lr, r3, #1
 801b578:	eb08 2812 	add.w	r8, r8, r2, lsr #8
 801b57c:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 801b580:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 801b584:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801b588:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 801b58c:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801b590:	ea4e 0101 	orr.w	r1, lr, r1
 801b594:	ea41 0108 	orr.w	r1, r1, r8
 801b598:	f820 1b02 	strh.w	r1, [r0], #2
 801b59c:	e7b6      	b.n	801b50c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x104>
 801b59e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b5a0:	881b      	ldrh	r3, [r3, #0]
 801b5a2:	1b9b      	subs	r3, r3, r6
 801b5a4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801b5a8:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801b5ac:	1b9b      	subs	r3, r3, r6
 801b5ae:	441c      	add	r4, r3
 801b5b0:	e7a6      	b.n	801b500 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xf8>
 801b5b2:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
 801b5b6:	2203      	movs	r2, #3
 801b5b8:	2504      	movs	r5, #4
 801b5ba:	4919      	ldr	r1, [pc, #100]	; (801b620 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x218>)
 801b5bc:	4550      	cmp	r0, sl
 801b5be:	d228      	bcs.n	801b612 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 801b5c0:	eb00 0c09 	add.w	ip, r0, r9
 801b5c4:	4560      	cmp	r0, ip
 801b5c6:	4623      	mov	r3, r4
 801b5c8:	d219      	bcs.n	801b5fe <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1f6>
 801b5ca:	f893 e000 	ldrb.w	lr, [r3]
 801b5ce:	3401      	adds	r4, #1
 801b5d0:	fb12 5e0e 	smlabb	lr, r2, lr, r5
 801b5d4:	eb07 0b0e 	add.w	fp, r7, lr
 801b5d8:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801b5dc:	f89b 3002 	ldrb.w	r3, [fp, #2]
 801b5e0:	f89b b001 	ldrb.w	fp, [fp, #1]
 801b5e4:	ea01 2303 	and.w	r3, r1, r3, lsl #8
 801b5e8:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 801b5ec:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801b5f0:	ea43 030b 	orr.w	r3, r3, fp
 801b5f4:	ea43 03de 	orr.w	r3, r3, lr, lsr #3
 801b5f8:	f820 3b02 	strh.w	r3, [r0], #2
 801b5fc:	e7e2      	b.n	801b5c4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1bc>
 801b5fe:	f8b8 3000 	ldrh.w	r3, [r8]
 801b602:	1b9b      	subs	r3, r3, r6
 801b604:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801b608:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801b60c:	1b9b      	subs	r3, r3, r6
 801b60e:	441c      	add	r4, r3
 801b610:	e7d4      	b.n	801b5bc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 801b612:	4b04      	ldr	r3, [pc, #16]	; (801b624 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>)
 801b614:	6818      	ldr	r0, [r3, #0]
 801b616:	6803      	ldr	r3, [r0, #0]
 801b618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b61a:	4798      	blx	r3
 801b61c:	e750      	b.n	801b4c0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 801b61e:	bf00      	nop
 801b620:	fffff800 	.word	0xfffff800
 801b624:	200243dc 	.word	0x200243dc
 801b628:	200243d6 	.word	0x200243d6

0801b62c <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801b62c:	b430      	push	{r4, r5}
 801b62e:	780d      	ldrb	r5, [r1, #0]
 801b630:	f89d 4008 	ldrb.w	r4, [sp, #8]
 801b634:	2d01      	cmp	r5, #1
 801b636:	d00a      	beq.n	801b64e <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x22>
 801b638:	d305      	bcc.n	801b646 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 801b63a:	2d02      	cmp	r5, #2
 801b63c:	d10b      	bne.n	801b656 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x2a>
 801b63e:	9402      	str	r4, [sp, #8]
 801b640:	bc30      	pop	{r4, r5}
 801b642:	f7ff be15 	b.w	801b270 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 801b646:	9402      	str	r4, [sp, #8]
 801b648:	bc30      	pop	{r4, r5}
 801b64a:	f7ff bd2b 	b.w	801b0a4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801b64e:	9402      	str	r4, [sp, #8]
 801b650:	bc30      	pop	{r4, r5}
 801b652:	f7ff bed9 	b.w	801b408 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 801b656:	bc30      	pop	{r4, r5}
 801b658:	4770      	bx	lr
	...

0801b65c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 801b65c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b660:	b087      	sub	sp, #28
 801b662:	4604      	mov	r4, r0
 801b664:	460e      	mov	r6, r1
 801b666:	6810      	ldr	r0, [r2, #0]
 801b668:	6851      	ldr	r1, [r2, #4]
 801b66a:	ad02      	add	r5, sp, #8
 801b66c:	4617      	mov	r7, r2
 801b66e:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 801b672:	f8df 9230 	ldr.w	r9, [pc, #560]	; 801b8a4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
 801b676:	c503      	stmia	r5!, {r0, r1}
 801b678:	6818      	ldr	r0, [r3, #0]
 801b67a:	ad04      	add	r5, sp, #16
 801b67c:	6859      	ldr	r1, [r3, #4]
 801b67e:	c503      	stmia	r5!, {r0, r1}
 801b680:	a802      	add	r0, sp, #8
 801b682:	f7f9 fbd1 	bl	8014e28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b686:	4639      	mov	r1, r7
 801b688:	a804      	add	r0, sp, #16
 801b68a:	f7f9 fbf5 	bl	8014e78 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801b68e:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801b692:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801b696:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801b69a:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 801b69e:	fb11 2103 	smlabb	r1, r1, r3, r2
 801b6a2:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 801b6a6:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 801b6aa:	440e      	add	r6, r1
 801b6ac:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801b6b0:	440a      	add	r2, r1
 801b6b2:	f8ad 2010 	strh.w	r2, [sp, #16]
 801b6b6:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801b6ba:	4413      	add	r3, r2
 801b6bc:	f8ad 3012 	strh.w	r3, [sp, #18]
 801b6c0:	4b77      	ldr	r3, [pc, #476]	; (801b8a0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 801b6c2:	6818      	ldr	r0, [r3, #0]
 801b6c4:	6803      	ldr	r3, [r0, #0]
 801b6c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b6c8:	4798      	blx	r3
 801b6ca:	f8b9 b000 	ldrh.w	fp, [r9]
 801b6ce:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801b6d2:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801b6d6:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801b6da:	fb05 f50b 	mul.w	r5, r5, fp
 801b6de:	fb0b 2303 	mla	r3, fp, r3, r2
 801b6e2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801b6e6:	ea4f 0348 	mov.w	r3, r8, lsl #1
 801b6ea:	9300      	str	r3, [sp, #0]
 801b6ec:	d069      	beq.n	801b7c2 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x166>
 801b6ee:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
 801b6f2:	4558      	cmp	r0, fp
 801b6f4:	f080 80cc 	bcs.w	801b890 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 801b6f8:	9b00      	ldr	r3, [sp, #0]
 801b6fa:	4631      	mov	r1, r6
 801b6fc:	18c3      	adds	r3, r0, r3
 801b6fe:	9301      	str	r3, [sp, #4]
 801b700:	9b01      	ldr	r3, [sp, #4]
 801b702:	4298      	cmp	r0, r3
 801b704:	d24f      	bcs.n	801b7a6 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14a>
 801b706:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b70a:	2a00      	cmp	r2, #0
 801b70c:	d048      	beq.n	801b7a0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 801b70e:	fb0a f202 	mul.w	r2, sl, r2
 801b712:	1c53      	adds	r3, r2, #1
 801b714:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801b718:	121b      	asrs	r3, r3, #8
 801b71a:	d041      	beq.n	801b7a0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 801b71c:	8802      	ldrh	r2, [r0, #0]
 801b71e:	b29e      	uxth	r6, r3
 801b720:	f8b4 c000 	ldrh.w	ip, [r4]
 801b724:	43db      	mvns	r3, r3
 801b726:	1215      	asrs	r5, r2, #8
 801b728:	b2db      	uxtb	r3, r3
 801b72a:	ea4f 272c 	mov.w	r7, ip, asr #8
 801b72e:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801b732:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 801b736:	fb15 f503 	smulbb	r5, r5, r3
 801b73a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801b73e:	00d2      	lsls	r2, r2, #3
 801b740:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 801b744:	fb07 5706 	mla	r7, r7, r6, r5
 801b748:	ea4f 05ec 	mov.w	r5, ip, asr #3
 801b74c:	b2d2      	uxtb	r2, r2
 801b74e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801b752:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801b756:	fb1e fe03 	smulbb	lr, lr, r3
 801b75a:	b2bf      	uxth	r7, r7
 801b75c:	fb12 f203 	smulbb	r2, r2, r3
 801b760:	fa5f fc8c 	uxtb.w	ip, ip
 801b764:	fb05 e506 	mla	r5, r5, r6, lr
 801b768:	f107 0e01 	add.w	lr, r7, #1
 801b76c:	fb0c 2c06 	mla	ip, ip, r6, r2
 801b770:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 801b774:	fa1f fc8c 	uxth.w	ip, ip
 801b778:	f407 4e78 	and.w	lr, r7, #63488	; 0xf800
 801b77c:	b2ad      	uxth	r5, r5
 801b77e:	f10c 0701 	add.w	r7, ip, #1
 801b782:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801b786:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801b78a:	ea47 070e 	orr.w	r7, r7, lr
 801b78e:	f105 0e01 	add.w	lr, r5, #1
 801b792:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 801b796:	096d      	lsrs	r5, r5, #5
 801b798:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801b79c:	432f      	orrs	r7, r5
 801b79e:	8007      	strh	r7, [r0, #0]
 801b7a0:	3002      	adds	r0, #2
 801b7a2:	3402      	adds	r4, #2
 801b7a4:	e7ac      	b.n	801b700 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
 801b7a6:	f8b9 3000 	ldrh.w	r3, [r9]
 801b7aa:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 801b7ae:	eba3 0308 	sub.w	r3, r3, r8
 801b7b2:	eba6 0608 	sub.w	r6, r6, r8
 801b7b6:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801b7ba:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 801b7be:	440e      	add	r6, r1
 801b7c0:	e797      	b.n	801b6f2 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
 801b7c2:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 801b7c6:	42a8      	cmp	r0, r5
 801b7c8:	d262      	bcs.n	801b890 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 801b7ca:	9b00      	ldr	r3, [sp, #0]
 801b7cc:	4631      	mov	r1, r6
 801b7ce:	eb00 0b03 	add.w	fp, r0, r3
 801b7d2:	4558      	cmp	r0, fp
 801b7d4:	d24e      	bcs.n	801b874 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
 801b7d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b7da:	b12b      	cbz	r3, 801b7e8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 801b7dc:	2bff      	cmp	r3, #255	; 0xff
 801b7de:	f8b4 e000 	ldrh.w	lr, [r4]
 801b7e2:	d104      	bne.n	801b7ee <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x192>
 801b7e4:	f8a0 e000 	strh.w	lr, [r0]
 801b7e8:	3002      	adds	r0, #2
 801b7ea:	3402      	adds	r4, #2
 801b7ec:	e7f1      	b.n	801b7d2 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x176>
 801b7ee:	8802      	ldrh	r2, [r0, #0]
 801b7f0:	b29f      	uxth	r7, r3
 801b7f2:	43db      	mvns	r3, r3
 801b7f4:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801b7f8:	1216      	asrs	r6, r2, #8
 801b7fa:	b2db      	uxtb	r3, r3
 801b7fc:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801b800:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801b804:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 801b808:	00d2      	lsls	r2, r2, #3
 801b80a:	fb16 f603 	smulbb	r6, r6, r3
 801b80e:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801b812:	b2d2      	uxtb	r2, r2
 801b814:	fb0c 6c07 	mla	ip, ip, r7, r6
 801b818:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801b81c:	fb1a fa03 	smulbb	sl, sl, r3
 801b820:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801b824:	fa1f fc8c 	uxth.w	ip, ip
 801b828:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801b82c:	fb12 f303 	smulbb	r3, r2, r3
 801b830:	fa5f fe8e 	uxtb.w	lr, lr
 801b834:	fb06 a607 	mla	r6, r6, r7, sl
 801b838:	f10c 0201 	add.w	r2, ip, #1
 801b83c:	fb0e 3307 	mla	r3, lr, r7, r3
 801b840:	b2b6      	uxth	r6, r6
 801b842:	b29b      	uxth	r3, r3
 801b844:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801b848:	f106 0a01 	add.w	sl, r6, #1
 801b84c:	f40c 4278 	and.w	r2, ip, #63488	; 0xf800
 801b850:	f103 0c01 	add.w	ip, r3, #1
 801b854:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 801b858:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801b85c:	0976      	lsrs	r6, r6, #5
 801b85e:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801b862:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801b866:	ea4c 0c02 	orr.w	ip, ip, r2
 801b86a:	ea4c 0c06 	orr.w	ip, ip, r6
 801b86e:	f8a0 c000 	strh.w	ip, [r0]
 801b872:	e7b9      	b.n	801b7e8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 801b874:	f8b9 3000 	ldrh.w	r3, [r9]
 801b878:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 801b87c:	eba3 0308 	sub.w	r3, r3, r8
 801b880:	eba6 0608 	sub.w	r6, r6, r8
 801b884:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801b888:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 801b88c:	440e      	add	r6, r1
 801b88e:	e79a      	b.n	801b7c6 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x16a>
 801b890:	4b03      	ldr	r3, [pc, #12]	; (801b8a0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 801b892:	6818      	ldr	r0, [r3, #0]
 801b894:	6803      	ldr	r3, [r0, #0]
 801b896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b898:	4798      	blx	r3
 801b89a:	b007      	add	sp, #28
 801b89c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b8a0:	200243dc 	.word	0x200243dc
 801b8a4:	200243d6 	.word	0x200243d6

0801b8a8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801b8a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b8ac:	b089      	sub	sp, #36	; 0x24
 801b8ae:	4682      	mov	sl, r0
 801b8b0:	460f      	mov	r7, r1
 801b8b2:	4691      	mov	r9, r2
 801b8b4:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
 801b8b8:	4698      	mov	r8, r3
 801b8ba:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801b8bc:	2e00      	cmp	r6, #0
 801b8be:	d036      	beq.n	801b92e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801b8c0:	4608      	mov	r0, r1
 801b8c2:	f7fc f86b 	bl	801799c <_ZNK8touchgfx6Bitmap8getWidthEv>
 801b8c6:	4605      	mov	r5, r0
 801b8c8:	4638      	mov	r0, r7
 801b8ca:	f7fc f89b 	bl	8017a04 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801b8ce:	f8ad 000e 	strh.w	r0, [sp, #14]
 801b8d2:	4638      	mov	r0, r7
 801b8d4:	f8ad 9008 	strh.w	r9, [sp, #8]
 801b8d8:	f8ad 500c 	strh.w	r5, [sp, #12]
 801b8dc:	f8ad 800a 	strh.w	r8, [sp, #10]
 801b8e0:	f7fc f948 	bl	8017b74 <_ZNK8touchgfx6Bitmap7getDataEv>
 801b8e4:	4605      	mov	r5, r0
 801b8e6:	4638      	mov	r0, r7
 801b8e8:	f7fc f974 	bl	8017bd4 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801b8ec:	4681      	mov	r9, r0
 801b8ee:	4638      	mov	r0, r7
 801b8f0:	f7fc f9c4 	bl	8017c7c <_ZNK8touchgfx6Bitmap9getFormatEv>
 801b8f4:	280b      	cmp	r0, #11
 801b8f6:	d81a      	bhi.n	801b92e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801b8f8:	e8df f000 	tbb	[pc, r0]
 801b8fc:	1906aebd 	.word	0x1906aebd
 801b900:	19191919 	.word	0x19191919
 801b904:	b5191919 	.word	0xb5191919
 801b908:	4bb0      	ldr	r3, [pc, #704]	; (801bbcc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x324>)
 801b90a:	6818      	ldr	r0, [r3, #0]
 801b90c:	6803      	ldr	r3, [r0, #0]
 801b90e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b910:	4798      	blx	r3
 801b912:	2eff      	cmp	r6, #255	; 0xff
 801b914:	d121      	bne.n	801b95a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb2>
 801b916:	0683      	lsls	r3, r0, #26
 801b918:	d41f      	bmi.n	801b95a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb2>
 801b91a:	4638      	mov	r0, r7
 801b91c:	f7fc f8f2 	bl	8017b04 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801b920:	b940      	cbnz	r0, 801b934 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x8c>
 801b922:	4623      	mov	r3, r4
 801b924:	aa02      	add	r2, sp, #8
 801b926:	4629      	mov	r1, r5
 801b928:	4650      	mov	r0, sl
 801b92a:	f7ff fa2f 	bl	801ad8c <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 801b92e:	b009      	add	sp, #36	; 0x24
 801b930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b934:	f10d 0818 	add.w	r8, sp, #24
 801b938:	4639      	mov	r1, r7
 801b93a:	af04      	add	r7, sp, #16
 801b93c:	4640      	mov	r0, r8
 801b93e:	f7fc f895 	bl	8017a6c <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801b942:	e898 0003 	ldmia.w	r8, {r0, r1}
 801b946:	e887 0003 	stmia.w	r7, {r0, r1}
 801b94a:	4638      	mov	r0, r7
 801b94c:	4621      	mov	r1, r4
 801b94e:	f7f7 fb2b 	bl	8012fa8 <_ZN8touchgfx4RectaNERKS0_>
 801b952:	4638      	mov	r0, r7
 801b954:	f7f7 fb6b 	bl	801302e <_ZNK8touchgfx4Rect7isEmptyEv>
 801b958:	b130      	cbz	r0, 801b968 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
 801b95a:	4633      	mov	r3, r6
 801b95c:	4622      	mov	r2, r4
 801b95e:	a902      	add	r1, sp, #8
 801b960:	4628      	mov	r0, r5
 801b962:	f7ff f92d 	bl	801abc0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801b966:	e7e2      	b.n	801b92e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801b968:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801b96c:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801b970:	4293      	cmp	r3, r2
 801b972:	dd12      	ble.n	801b99a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xf2>
 801b974:	1a9b      	subs	r3, r3, r2
 801b976:	f9b4 0000 	ldrsh.w	r0, [r4]
 801b97a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801b97e:	f8ad 0018 	strh.w	r0, [sp, #24]
 801b982:	4628      	mov	r0, r5
 801b984:	f8ad 201a 	strh.w	r2, [sp, #26]
 801b988:	4642      	mov	r2, r8
 801b98a:	f8ad 101c 	strh.w	r1, [sp, #28]
 801b98e:	a902      	add	r1, sp, #8
 801b990:	f8ad 301e 	strh.w	r3, [sp, #30]
 801b994:	4633      	mov	r3, r6
 801b996:	f7ff f913 	bl	801abc0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801b99a:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 801b99e:	f9b4 2000 	ldrsh.w	r2, [r4]
 801b9a2:	4293      	cmp	r3, r2
 801b9a4:	dd12      	ble.n	801b9cc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x124>
 801b9a6:	1a9b      	subs	r3, r3, r2
 801b9a8:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 801b9ac:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 801b9b0:	f8ad 2018 	strh.w	r2, [sp, #24]
 801b9b4:	4642      	mov	r2, r8
 801b9b6:	f8ad 001a 	strh.w	r0, [sp, #26]
 801b9ba:	4628      	mov	r0, r5
 801b9bc:	f8ad 301c 	strh.w	r3, [sp, #28]
 801b9c0:	23ff      	movs	r3, #255	; 0xff
 801b9c2:	f8ad 101e 	strh.w	r1, [sp, #30]
 801b9c6:	a902      	add	r1, sp, #8
 801b9c8:	f7ff f8fa 	bl	801abc0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801b9cc:	463b      	mov	r3, r7
 801b9ce:	aa02      	add	r2, sp, #8
 801b9d0:	4629      	mov	r1, r5
 801b9d2:	4650      	mov	r0, sl
 801b9d4:	f7ff f9da 	bl	801ad8c <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 801b9d8:	88a2      	ldrh	r2, [r4, #4]
 801b9da:	8823      	ldrh	r3, [r4, #0]
 801b9dc:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801b9e0:	4413      	add	r3, r2
 801b9e2:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801b9e6:	440a      	add	r2, r1
 801b9e8:	b29b      	uxth	r3, r3
 801b9ea:	b292      	uxth	r2, r2
 801b9ec:	b218      	sxth	r0, r3
 801b9ee:	b211      	sxth	r1, r2
 801b9f0:	4288      	cmp	r0, r1
 801b9f2:	dd12      	ble.n	801ba1a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x172>
 801b9f4:	1a9b      	subs	r3, r3, r2
 801b9f6:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 801b9fa:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
 801b9fe:	4642      	mov	r2, r8
 801ba00:	f8ad 1018 	strh.w	r1, [sp, #24]
 801ba04:	a902      	add	r1, sp, #8
 801ba06:	f8ad 301c 	strh.w	r3, [sp, #28]
 801ba0a:	23ff      	movs	r3, #255	; 0xff
 801ba0c:	f8ad 001e 	strh.w	r0, [sp, #30]
 801ba10:	4628      	mov	r0, r5
 801ba12:	f8ad 601a 	strh.w	r6, [sp, #26]
 801ba16:	f7ff f8d3 	bl	801abc0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801ba1a:	88e2      	ldrh	r2, [r4, #6]
 801ba1c:	8863      	ldrh	r3, [r4, #2]
 801ba1e:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 801ba22:	4413      	add	r3, r2
 801ba24:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801ba28:	440a      	add	r2, r1
 801ba2a:	b29b      	uxth	r3, r3
 801ba2c:	b292      	uxth	r2, r2
 801ba2e:	b218      	sxth	r0, r3
 801ba30:	b211      	sxth	r1, r2
 801ba32:	4288      	cmp	r0, r1
 801ba34:	f77f af7b 	ble.w	801b92e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801ba38:	1a9b      	subs	r3, r3, r2
 801ba3a:	f9b4 6000 	ldrsh.w	r6, [r4]
 801ba3e:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801ba42:	4642      	mov	r2, r8
 801ba44:	f8ad 301e 	strh.w	r3, [sp, #30]
 801ba48:	23ff      	movs	r3, #255	; 0xff
 801ba4a:	f8ad 6018 	strh.w	r6, [sp, #24]
 801ba4e:	f8ad 101a 	strh.w	r1, [sp, #26]
 801ba52:	f8ad 001c 	strh.w	r0, [sp, #28]
 801ba56:	e782      	b.n	801b95e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb6>
 801ba58:	4633      	mov	r3, r6
 801ba5a:	4622      	mov	r2, r4
 801ba5c:	a902      	add	r1, sp, #8
 801ba5e:	4628      	mov	r0, r5
 801ba60:	f7ff fa04 	bl	801ae6c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 801ba64:	e763      	b.n	801b92e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801ba66:	9600      	str	r6, [sp, #0]
 801ba68:	4623      	mov	r3, r4
 801ba6a:	aa02      	add	r2, sp, #8
 801ba6c:	4649      	mov	r1, r9
 801ba6e:	4628      	mov	r0, r5
 801ba70:	f7ff fddc 	bl	801b62c <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801ba74:	e75b      	b.n	801b92e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801ba76:	4638      	mov	r0, r7
 801ba78:	f7fc f844 	bl	8017b04 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801ba7c:	b950      	cbnz	r0, 801ba94 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1ec>
 801ba7e:	f8da 3000 	ldr.w	r3, [sl]
 801ba82:	aa02      	add	r2, sp, #8
 801ba84:	4629      	mov	r1, r5
 801ba86:	e9cd 6000 	strd	r6, r0, [sp]
 801ba8a:	4650      	mov	r0, sl
 801ba8c:	68de      	ldr	r6, [r3, #12]
 801ba8e:	4623      	mov	r3, r4
 801ba90:	47b0      	blx	r6
 801ba92:	e74c      	b.n	801b92e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801ba94:	f10d 0818 	add.w	r8, sp, #24
 801ba98:	4639      	mov	r1, r7
 801ba9a:	af04      	add	r7, sp, #16
 801ba9c:	4640      	mov	r0, r8
 801ba9e:	f7fb ffe5 	bl	8017a6c <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801baa2:	e898 0003 	ldmia.w	r8, {r0, r1}
 801baa6:	e887 0003 	stmia.w	r7, {r0, r1}
 801baaa:	4638      	mov	r0, r7
 801baac:	4621      	mov	r1, r4
 801baae:	f7f7 fa7b 	bl	8012fa8 <_ZN8touchgfx4RectaNERKS0_>
 801bab2:	4638      	mov	r0, r7
 801bab4:	f7f7 fabb 	bl	801302e <_ZNK8touchgfx4Rect7isEmptyEv>
 801bab8:	b138      	cbz	r0, 801baca <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x222>
 801baba:	4623      	mov	r3, r4
 801babc:	9600      	str	r6, [sp, #0]
 801babe:	aa02      	add	r2, sp, #8
 801bac0:	4649      	mov	r1, r9
 801bac2:	4628      	mov	r0, r5
 801bac4:	f7ff fdca 	bl	801b65c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801bac8:	e731      	b.n	801b92e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801baca:	f8da 3000 	ldr.w	r3, [sl]
 801bace:	aa02      	add	r2, sp, #8
 801bad0:	4629      	mov	r1, r5
 801bad2:	e9cd 6000 	strd	r6, r0, [sp]
 801bad6:	4650      	mov	r0, sl
 801bad8:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 801badc:	463b      	mov	r3, r7
 801bade:	47d8      	blx	fp
 801bae0:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801bae4:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801bae8:	4293      	cmp	r3, r2
 801baea:	dd13      	ble.n	801bb14 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x26c>
 801baec:	f9b4 0000 	ldrsh.w	r0, [r4]
 801baf0:	1a9b      	subs	r3, r3, r2
 801baf2:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801baf6:	f8ad 0018 	strh.w	r0, [sp, #24]
 801bafa:	4628      	mov	r0, r5
 801bafc:	f8ad 201a 	strh.w	r2, [sp, #26]
 801bb00:	aa02      	add	r2, sp, #8
 801bb02:	f8ad 101c 	strh.w	r1, [sp, #28]
 801bb06:	4649      	mov	r1, r9
 801bb08:	f8ad 301e 	strh.w	r3, [sp, #30]
 801bb0c:	4643      	mov	r3, r8
 801bb0e:	9600      	str	r6, [sp, #0]
 801bb10:	f7ff fda4 	bl	801b65c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801bb14:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 801bb18:	f9b4 2000 	ldrsh.w	r2, [r4]
 801bb1c:	4293      	cmp	r3, r2
 801bb1e:	dd13      	ble.n	801bb48 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2a0>
 801bb20:	1a9b      	subs	r3, r3, r2
 801bb22:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 801bb26:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 801bb2a:	f8ad 2018 	strh.w	r2, [sp, #24]
 801bb2e:	aa02      	add	r2, sp, #8
 801bb30:	f8ad 001a 	strh.w	r0, [sp, #26]
 801bb34:	4628      	mov	r0, r5
 801bb36:	f8ad 301c 	strh.w	r3, [sp, #28]
 801bb3a:	4643      	mov	r3, r8
 801bb3c:	f8ad 101e 	strh.w	r1, [sp, #30]
 801bb40:	4649      	mov	r1, r9
 801bb42:	9600      	str	r6, [sp, #0]
 801bb44:	f7ff fd8a 	bl	801b65c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801bb48:	88a2      	ldrh	r2, [r4, #4]
 801bb4a:	8823      	ldrh	r3, [r4, #0]
 801bb4c:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801bb50:	4413      	add	r3, r2
 801bb52:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801bb56:	440a      	add	r2, r1
 801bb58:	b29b      	uxth	r3, r3
 801bb5a:	b292      	uxth	r2, r2
 801bb5c:	b218      	sxth	r0, r3
 801bb5e:	b211      	sxth	r1, r2
 801bb60:	4288      	cmp	r0, r1
 801bb62:	dd13      	ble.n	801bb8c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2e4>
 801bb64:	1a9b      	subs	r3, r3, r2
 801bb66:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 801bb6a:	f9bd 7012 	ldrsh.w	r7, [sp, #18]
 801bb6e:	aa02      	add	r2, sp, #8
 801bb70:	f8ad 1018 	strh.w	r1, [sp, #24]
 801bb74:	4649      	mov	r1, r9
 801bb76:	f8ad 301c 	strh.w	r3, [sp, #28]
 801bb7a:	4643      	mov	r3, r8
 801bb7c:	f8ad 001e 	strh.w	r0, [sp, #30]
 801bb80:	4628      	mov	r0, r5
 801bb82:	9600      	str	r6, [sp, #0]
 801bb84:	f8ad 701a 	strh.w	r7, [sp, #26]
 801bb88:	f7ff fd68 	bl	801b65c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801bb8c:	88e2      	ldrh	r2, [r4, #6]
 801bb8e:	8863      	ldrh	r3, [r4, #2]
 801bb90:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 801bb94:	4413      	add	r3, r2
 801bb96:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801bb9a:	440a      	add	r2, r1
 801bb9c:	b29b      	uxth	r3, r3
 801bb9e:	b292      	uxth	r2, r2
 801bba0:	b218      	sxth	r0, r3
 801bba2:	b211      	sxth	r1, r2
 801bba4:	4288      	cmp	r0, r1
 801bba6:	f77f aec2 	ble.w	801b92e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801bbaa:	f9b4 7000 	ldrsh.w	r7, [r4]
 801bbae:	1a9b      	subs	r3, r3, r2
 801bbb0:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801bbb4:	f8ad 301e 	strh.w	r3, [sp, #30]
 801bbb8:	4643      	mov	r3, r8
 801bbba:	f8ad 7018 	strh.w	r7, [sp, #24]
 801bbbe:	f8ad 101a 	strh.w	r1, [sp, #26]
 801bbc2:	f8ad 001c 	strh.w	r0, [sp, #28]
 801bbc6:	9600      	str	r6, [sp, #0]
 801bbc8:	e779      	b.n	801babe <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x216>
 801bbca:	bf00      	nop
 801bbcc:	200243dc 	.word	0x200243dc

0801bbd0 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 801bbd0:	b180      	cbz	r0, 801bbf4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x24>
 801bbd2:	2903      	cmp	r1, #3
 801bbd4:	d81c      	bhi.n	801bc10 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 801bbd6:	e8df f001 	tbb	[pc, r1]
 801bbda:	1d02      	.short	0x1d02
 801bbdc:	1f08      	.short	0x1f08
 801bbde:	4b10      	ldr	r3, [pc, #64]	; (801bc20 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 801bbe0:	8818      	ldrh	r0, [r3, #0]
 801bbe2:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801bbe6:	4240      	negs	r0, r0
 801bbe8:	4770      	bx	lr
 801bbea:	4b0d      	ldr	r3, [pc, #52]	; (801bc20 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 801bbec:	8818      	ldrh	r0, [r3, #0]
 801bbee:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801bbf2:	4770      	bx	lr
 801bbf4:	2903      	cmp	r1, #3
 801bbf6:	d80b      	bhi.n	801bc10 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 801bbf8:	a301      	add	r3, pc, #4	; (adr r3, 801bc00 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x30>)
 801bbfa:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801bbfe:	bf00      	nop
 801bc00:	0801bc15 	.word	0x0801bc15
 801bc04:	0801bbeb 	.word	0x0801bbeb
 801bc08:	0801bc19 	.word	0x0801bc19
 801bc0c:	0801bbdf 	.word	0x0801bbdf
 801bc10:	2000      	movs	r0, #0
 801bc12:	4770      	bx	lr
 801bc14:	2001      	movs	r0, #1
 801bc16:	4770      	bx	lr
 801bc18:	f04f 30ff 	mov.w	r0, #4294967295
 801bc1c:	4770      	bx	lr
 801bc1e:	bf00      	nop
 801bc20:	200243d6 	.word	0x200243d6

0801bc24 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 801bc24:	b180      	cbz	r0, 801bc48 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x24>
 801bc26:	2903      	cmp	r1, #3
 801bc28:	d81c      	bhi.n	801bc64 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 801bc2a:	e8df f001 	tbb	[pc, r1]
 801bc2e:	021d      	.short	0x021d
 801bc30:	071f      	.short	0x071f
 801bc32:	4b10      	ldr	r3, [pc, #64]	; (801bc74 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 801bc34:	8818      	ldrh	r0, [r3, #0]
 801bc36:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801bc3a:	4770      	bx	lr
 801bc3c:	4b0d      	ldr	r3, [pc, #52]	; (801bc74 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 801bc3e:	8818      	ldrh	r0, [r3, #0]
 801bc40:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801bc44:	4240      	negs	r0, r0
 801bc46:	4770      	bx	lr
 801bc48:	2903      	cmp	r1, #3
 801bc4a:	d80b      	bhi.n	801bc64 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 801bc4c:	a301      	add	r3, pc, #4	; (adr r3, 801bc54 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x30>)
 801bc4e:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801bc52:	bf00      	nop
 801bc54:	0801bc33 	.word	0x0801bc33
 801bc58:	0801bc6d 	.word	0x0801bc6d
 801bc5c:	0801bc3d 	.word	0x0801bc3d
 801bc60:	0801bc69 	.word	0x0801bc69
 801bc64:	2000      	movs	r0, #0
 801bc66:	4770      	bx	lr
 801bc68:	2001      	movs	r0, #1
 801bc6a:	4770      	bx	lr
 801bc6c:	f04f 30ff 	mov.w	r0, #4294967295
 801bc70:	4770      	bx	lr
 801bc72:	bf00      	nop
 801bc74:	200243d6 	.word	0x200243d6

0801bc78 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801bc78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bc7c:	b099      	sub	sp, #100	; 0x64
 801bc7e:	910b      	str	r1, [sp, #44]	; 0x2c
 801bc80:	a914      	add	r1, sp, #80	; 0x50
 801bc82:	f9bd 4088 	ldrsh.w	r4, [sp, #136]	; 0x88
 801bc86:	f8bd 5090 	ldrh.w	r5, [sp, #144]	; 0x90
 801bc8a:	f8bd 6094 	ldrh.w	r6, [sp, #148]	; 0x94
 801bc8e:	f89d 80ac 	ldrb.w	r8, [sp, #172]	; 0xac
 801bc92:	f89d a0b4 	ldrb.w	sl, [sp, #180]	; 0xb4
 801bc96:	e881 000c 	stmia.w	r1, {r2, r3}
 801bc9a:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
 801bc9e:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	; 0x98
 801bca2:	9309      	str	r3, [sp, #36]	; 0x24
 801bca4:	f891 900d 	ldrb.w	r9, [r1, #13]
 801bca8:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 801bcac:	ea4f 1749 	mov.w	r7, r9, lsl #5
 801bcb0:	9310      	str	r3, [sp, #64]	; 0x40
 801bcb2:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
 801bcb6:	930c      	str	r3, [sp, #48]	; 0x30
 801bcb8:	f407 7380 	and.w	r3, r7, #256	; 0x100
 801bcbc:	798f      	ldrb	r7, [r1, #6]
 801bcbe:	431f      	orrs	r7, r3
 801bcc0:	f000 8195 	beq.w	801bfee <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801bcc4:	ea4f 1909 	mov.w	r9, r9, lsl #4
 801bcc8:	f409 7380 	and.w	r3, r9, #256	; 0x100
 801bccc:	f891 9007 	ldrb.w	r9, [r1, #7]
 801bcd0:	ea59 0903 	orrs.w	r9, r9, r3
 801bcd4:	f000 818b 	beq.w	801bfee <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801bcd8:	f991 3009 	ldrsb.w	r3, [r1, #9]
 801bcdc:	b29b      	uxth	r3, r3
 801bcde:	2d00      	cmp	r5, #0
 801bce0:	f000 812e 	beq.w	801bf40 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c8>
 801bce4:	1aed      	subs	r5, r5, r3
 801bce6:	b2ad      	uxth	r5, r5
 801bce8:	042b      	lsls	r3, r5, #16
 801bcea:	d502      	bpl.n	801bcf2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 801bcec:	1b64      	subs	r4, r4, r5
 801bcee:	2500      	movs	r5, #0
 801bcf0:	b224      	sxth	r4, r4
 801bcf2:	f9b2 1000 	ldrsh.w	r1, [r2]
 801bcf6:	a814      	add	r0, sp, #80	; 0x50
 801bcf8:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 801bcfc:	428c      	cmp	r4, r1
 801bcfe:	b28b      	uxth	r3, r1
 801bd00:	bfbf      	itttt	lt
 801bd02:	18ed      	addlt	r5, r5, r3
 801bd04:	1b2c      	sublt	r4, r5, r4
 801bd06:	b2a5      	uxthlt	r5, r4
 801bd08:	460c      	movlt	r4, r1
 801bd0a:	8891      	ldrh	r1, [r2, #4]
 801bd0c:	440b      	add	r3, r1
 801bd0e:	4621      	mov	r1, r4
 801bd10:	b21b      	sxth	r3, r3
 801bd12:	930f      	str	r3, [sp, #60]	; 0x3c
 801bd14:	88d3      	ldrh	r3, [r2, #6]
 801bd16:	8852      	ldrh	r2, [r2, #2]
 801bd18:	4413      	add	r3, r2
 801bd1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801bd1c:	b21b      	sxth	r3, r3
 801bd1e:	930d      	str	r3, [sp, #52]	; 0x34
 801bd20:	4bbd      	ldr	r3, [pc, #756]	; (801c018 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>)
 801bd22:	f893 b000 	ldrb.w	fp, [r3]
 801bd26:	f10b 3cff 	add.w	ip, fp, #4294967295
 801bd2a:	f1dc 0300 	rsbs	r3, ip, #0
 801bd2e:	eb43 030c 	adc.w	r3, r3, ip
 801bd32:	930e      	str	r3, [sp, #56]	; 0x38
 801bd34:	4653      	mov	r3, sl
 801bd36:	f7f8 fef1 	bl	8014b1c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801bd3a:	4621      	mov	r1, r4
 801bd3c:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
 801bd40:	4653      	mov	r3, sl
 801bd42:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801bd44:	a814      	add	r0, sp, #80	; 0x50
 801bd46:	f7f8 ff06 	bl	8014b56 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801bd4a:	a918      	add	r1, sp, #96	; 0x60
 801bd4c:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801bd50:	a817      	add	r0, sp, #92	; 0x5c
 801bd52:	f7f9 f827 	bl	8014da4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801bd56:	f1ba 0f00 	cmp.w	sl, #0
 801bd5a:	f040 80f4 	bne.w	801bf46 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
 801bd5e:	f1bb 0f01 	cmp.w	fp, #1
 801bd62:	f040 80f8 	bne.w	801bf56 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2de>
 801bd66:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bd68:	2b00      	cmp	r3, #0
 801bd6a:	f040 8145 	bne.w	801bff8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>
 801bd6e:	b2ba      	uxth	r2, r7
 801bd70:	b905      	cbnz	r5, 801bd74 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xfc>
 801bd72:	b16e      	cbz	r6, 801bd90 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x118>
 801bd74:	fb06 5302 	mla	r3, r6, r2, r5
 801bd78:	9828      	ldr	r0, [sp, #160]	; 0xa0
 801bd7a:	4631      	mov	r1, r6
 801bd7c:	fb08 f303 	mul.w	r3, r8, r3
 801bd80:	f003 0607 	and.w	r6, r3, #7
 801bd84:	eb00 03d3 	add.w	r3, r0, r3, lsr #3
 801bd88:	9328      	str	r3, [sp, #160]	; 0xa0
 801bd8a:	eba9 0301 	sub.w	r3, r9, r1
 801bd8e:	930a      	str	r3, [sp, #40]	; 0x28
 801bd90:	4651      	mov	r1, sl
 801bd92:	980e      	ldr	r0, [sp, #56]	; 0x38
 801bd94:	f7ff ff1c 	bl	801bbd0 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 801bd98:	4681      	mov	r9, r0
 801bd9a:	980e      	ldr	r0, [sp, #56]	; 0x38
 801bd9c:	f7ff ff42 	bl	801bc24 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 801bda0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bda2:	9909      	ldr	r1, [sp, #36]	; 0x24
 801bda4:	4683      	mov	fp, r0
 801bda6:	eba3 0a01 	sub.w	sl, r3, r1
 801bdaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bdac:	459a      	cmp	sl, r3
 801bdae:	bfa8      	it	ge
 801bdb0:	469a      	movge	sl, r3
 801bdb2:	f1ba 0f00 	cmp.w	sl, #0
 801bdb6:	f340 811a 	ble.w	801bfee <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801bdba:	1b64      	subs	r4, r4, r5
 801bdbc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801bdbe:	1b1c      	subs	r4, r3, r4
 801bdc0:	42bc      	cmp	r4, r7
 801bdc2:	bfd4      	ite	le
 801bdc4:	ebc5 0504 	rsble	r5, r5, r4
 801bdc8:	ebc5 0507 	rsbgt	r5, r5, r7
 801bdcc:	2d00      	cmp	r5, #0
 801bdce:	f340 810e 	ble.w	801bfee <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801bdd2:	1b52      	subs	r2, r2, r5
 801bdd4:	fb08 f302 	mul.w	r3, r8, r2
 801bdd8:	930f      	str	r3, [sp, #60]	; 0x3c
 801bdda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801bddc:	2b00      	cmp	r3, #0
 801bdde:	f040 8116 	bne.w	801c00e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x396>
 801bde2:	4b8e      	ldr	r3, [pc, #568]	; (801c01c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>)
 801bde4:	6818      	ldr	r0, [r3, #0]
 801bde6:	6803      	ldr	r3, [r0, #0]
 801bde8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bdea:	4798      	blx	r3
 801bdec:	2301      	movs	r3, #1
 801bdee:	4a8c      	ldr	r2, [pc, #560]	; (801c020 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
 801bdf0:	fa03 f308 	lsl.w	r3, r3, r8
 801bdf4:	8811      	ldrh	r1, [r2, #0]
 801bdf6:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801bdfa:	3b01      	subs	r3, #1
 801bdfc:	b2db      	uxtb	r3, r3
 801bdfe:	930e      	str	r3, [sp, #56]	; 0x38
 801be00:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 801be04:	fb01 2303 	mla	r3, r1, r3, r2
 801be08:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801be0c:	930a      	str	r3, [sp, #40]	; 0x28
 801be0e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801be10:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801be14:	9313      	str	r3, [sp, #76]	; 0x4c
 801be16:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801be18:	0a19      	lsrs	r1, r3, #8
 801be1a:	b2cb      	uxtb	r3, r1
 801be1c:	9312      	str	r3, [sp, #72]	; 0x48
 801be1e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801be20:	b2db      	uxtb	r3, r3
 801be22:	9311      	str	r3, [sp, #68]	; 0x44
 801be24:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801be26:	095a      	lsrs	r2, r3, #5
 801be28:	4b7e      	ldr	r3, [pc, #504]	; (801c024 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 801be2a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801be2e:	400b      	ands	r3, r1
 801be30:	4313      	orrs	r3, r2
 801be32:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801be34:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801be38:	4313      	orrs	r3, r2
 801be3a:	b29b      	uxth	r3, r3
 801be3c:	9310      	str	r3, [sp, #64]	; 0x40
 801be3e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801be40:	781a      	ldrb	r2, [r3, #0]
 801be42:	ea4f 0349 	mov.w	r3, r9, lsl #1
 801be46:	fb05 b919 	mls	r9, r5, r9, fp
 801be4a:	4132      	asrs	r2, r6
 801be4c:	fb03 fb05 	mul.w	fp, r3, r5
 801be50:	930d      	str	r3, [sp, #52]	; 0x34
 801be52:	b2d2      	uxtb	r2, r2
 801be54:	eb0b 0b49 	add.w	fp, fp, r9, lsl #1
 801be58:	f11a 3aff 	adds.w	sl, sl, #4294967295
 801be5c:	f0c0 80f5 	bcc.w	801c04a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3d2>
 801be60:	46ae      	mov	lr, r5
 801be62:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 801be66:	f11e 3eff 	adds.w	lr, lr, #4294967295
 801be6a:	f0c0 80dd 	bcc.w	801c028 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b0>
 801be6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801be70:	4013      	ands	r3, r2
 801be72:	d055      	beq.n	801bf20 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 801be74:	20ff      	movs	r0, #255	; 0xff
 801be76:	990e      	ldr	r1, [sp, #56]	; 0x38
 801be78:	fb90 f1f1 	sdiv	r1, r0, r1
 801be7c:	434b      	muls	r3, r1
 801be7e:	2bfe      	cmp	r3, #254	; 0xfe
 801be80:	dd03      	ble.n	801be8a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x212>
 801be82:	990c      	ldr	r1, [sp, #48]	; 0x30
 801be84:	4281      	cmp	r1, r0
 801be86:	f000 80c4 	beq.w	801c012 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39a>
 801be8a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801be8c:	f8bc 4000 	ldrh.w	r4, [ip]
 801be90:	fb11 f303 	smulbb	r3, r1, r3
 801be94:	1220      	asrs	r0, r4, #8
 801be96:	b29b      	uxth	r3, r3
 801be98:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801be9c:	1c59      	adds	r1, r3, #1
 801be9e:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 801bea2:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801bea6:	10e1      	asrs	r1, r4, #3
 801bea8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801beac:	00e4      	lsls	r4, r4, #3
 801beae:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801beb2:	b29f      	uxth	r7, r3
 801beb4:	43db      	mvns	r3, r3
 801beb6:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 801beba:	b2db      	uxtb	r3, r3
 801bebc:	b2e4      	uxtb	r4, r4
 801bebe:	9309      	str	r3, [sp, #36]	; 0x24
 801bec0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801bec2:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 801bec6:	fb13 f907 	smulbb	r9, r3, r7
 801beca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801becc:	fb00 9003 	mla	r0, r0, r3, r9
 801bed0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801bed2:	fb13 f907 	smulbb	r9, r3, r7
 801bed6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bed8:	b280      	uxth	r0, r0
 801beda:	fb01 9103 	mla	r1, r1, r3, r9
 801bede:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801bee0:	fb13 f707 	smulbb	r7, r3, r7
 801bee4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bee6:	b289      	uxth	r1, r1
 801bee8:	fb04 7403 	mla	r4, r4, r3, r7
 801beec:	1c43      	adds	r3, r0, #1
 801beee:	b2a4      	uxth	r4, r4
 801bef0:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801bef4:	f104 0901 	add.w	r9, r4, #1
 801bef8:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801befc:	eb09 2914 	add.w	r9, r9, r4, lsr #8
 801bf00:	f3c9 29c4 	ubfx	r9, r9, #11, #5
 801bf04:	ea49 0000 	orr.w	r0, r9, r0
 801bf08:	f101 0901 	add.w	r9, r1, #1
 801bf0c:	eb09 2911 	add.w	r9, r9, r1, lsr #8
 801bf10:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801bf14:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801bf18:	ea40 0009 	orr.w	r0, r0, r9
 801bf1c:	f8ac 0000 	strh.w	r0, [ip]
 801bf20:	4446      	add	r6, r8
 801bf22:	b2b6      	uxth	r6, r6
 801bf24:	2e07      	cmp	r6, #7
 801bf26:	bf89      	itett	hi
 801bf28:	9b28      	ldrhi	r3, [sp, #160]	; 0xa0
 801bf2a:	fa42 f208 	asrls.w	r2, r2, r8
 801bf2e:	2600      	movhi	r6, #0
 801bf30:	785a      	ldrbhi	r2, [r3, #1]
 801bf32:	bf8a      	itet	hi
 801bf34:	3301      	addhi	r3, #1
 801bf36:	b2d2      	uxtbls	r2, r2
 801bf38:	9328      	strhi	r3, [sp, #160]	; 0xa0
 801bf3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bf3c:	449c      	add	ip, r3
 801bf3e:	e792      	b.n	801be66 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ee>
 801bf40:	441c      	add	r4, r3
 801bf42:	b224      	sxth	r4, r4
 801bf44:	e6d5      	b.n	801bcf2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 801bf46:	f1ba 0f01 	cmp.w	sl, #1
 801bf4a:	f47f af0c 	bne.w	801bd66 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801bf4e:	f1bb 0f01 	cmp.w	fp, #1
 801bf52:	f47f af08 	bne.w	801bd66 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801bf56:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 801c01c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>
 801bf5a:	f8db 0000 	ldr.w	r0, [fp]
 801bf5e:	6803      	ldr	r3, [r0, #0]
 801bf60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bf62:	4798      	blx	r3
 801bf64:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 801bf68:	465a      	mov	r2, fp
 801bf6a:	d006      	beq.n	801bf7a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
 801bf6c:	f1b8 0f04 	cmp.w	r8, #4
 801bf70:	d140      	bne.n	801bff4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>
 801bf72:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bf74:	3300      	adds	r3, #0
 801bf76:	bf18      	it	ne
 801bf78:	2301      	movne	r3, #1
 801bf7a:	0580      	lsls	r0, r0, #22
 801bf7c:	d56e      	bpl.n	801c05c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
 801bf7e:	f1b8 0f08 	cmp.w	r8, #8
 801bf82:	d16b      	bne.n	801c05c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
 801bf84:	2b00      	cmp	r3, #0
 801bf86:	bf0c      	ite	eq
 801bf88:	f44f 7100 	moveq.w	r1, #512	; 0x200
 801bf8c:	f44f 7180 	movne.w	r1, #256	; 0x100
 801bf90:	2d00      	cmp	r5, #0
 801bf92:	f47f aee8 	bne.w	801bd66 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801bf96:	2e00      	cmp	r6, #0
 801bf98:	f47f aee5 	bne.w	801bd66 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801bf9c:	19e3      	adds	r3, r4, r7
 801bf9e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801bfa0:	4283      	cmp	r3, r0
 801bfa2:	f73f aee0 	bgt.w	801bd66 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801bfa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bfa8:	980d      	ldr	r0, [sp, #52]	; 0x34
 801bfaa:	444b      	add	r3, r9
 801bfac:	4283      	cmp	r3, r0
 801bfae:	f73f aeda 	bgt.w	801bd66 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801bfb2:	b2bf      	uxth	r7, r7
 801bfb4:	f1b8 0f08 	cmp.w	r8, #8
 801bfb8:	6810      	ldr	r0, [r2, #0]
 801bfba:	f04f 0500 	mov.w	r5, #0
 801bfbe:	bf18      	it	ne
 801bfc0:	3701      	addne	r7, #1
 801bfc2:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
 801bfc6:	6804      	ldr	r4, [r0, #0]
 801bfc8:	bf18      	it	ne
 801bfca:	f027 0701 	bicne.w	r7, r7, #1
 801bfce:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 801bfd2:	e9cd 1505 	strd	r1, r5, [sp, #20]
 801bfd6:	990c      	ldr	r1, [sp, #48]	; 0x30
 801bfd8:	bf18      	it	ne
 801bfda:	b2bf      	uxthne	r7, r7
 801bfdc:	9104      	str	r1, [sp, #16]
 801bfde:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801bfe0:	e9cd 7900 	strd	r7, r9, [sp]
 801bfe4:	e9cd 7102 	strd	r7, r1, [sp, #8]
 801bfe8:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801bfea:	6d64      	ldr	r4, [r4, #84]	; 0x54
 801bfec:	47a0      	blx	r4
 801bfee:	b019      	add	sp, #100	; 0x64
 801bff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bff4:	2300      	movs	r3, #0
 801bff6:	e7c0      	b.n	801bf7a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
 801bff8:	2208      	movs	r2, #8
 801bffa:	fb92 f3f8 	sdiv	r3, r2, r8
 801bffe:	1e5a      	subs	r2, r3, #1
 801c000:	443a      	add	r2, r7
 801c002:	fb92 f2f3 	sdiv	r2, r2, r3
 801c006:	fb12 f203 	smulbb	r2, r2, r3
 801c00a:	b292      	uxth	r2, r2
 801c00c:	e6b0      	b.n	801bd70 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf8>
 801c00e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801c010:	e6ec      	b.n	801bdec <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x174>
 801c012:	9810      	ldr	r0, [sp, #64]	; 0x40
 801c014:	e782      	b.n	801bf1c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a4>
 801c016:	bf00      	nop
 801c018:	200243d4 	.word	0x200243d4
 801c01c:	200243dc 	.word	0x200243dc
 801c020:	200243d6 	.word	0x200243d6
 801c024:	00fff800 	.word	0x00fff800
 801c028:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c02a:	b153      	cbz	r3, 801c042 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ca>
 801c02c:	441e      	add	r6, r3
 801c02e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801c030:	b2b6      	uxth	r6, r6
 801c032:	eb03 03d6 	add.w	r3, r3, r6, lsr #3
 801c036:	f006 0607 	and.w	r6, r6, #7
 801c03a:	781a      	ldrb	r2, [r3, #0]
 801c03c:	9328      	str	r3, [sp, #160]	; 0xa0
 801c03e:	4132      	asrs	r2, r6
 801c040:	b2d2      	uxtb	r2, r2
 801c042:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c044:	445b      	add	r3, fp
 801c046:	930a      	str	r3, [sp, #40]	; 0x28
 801c048:	e706      	b.n	801be58 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e0>
 801c04a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c04c:	2b00      	cmp	r3, #0
 801c04e:	d1ce      	bne.n	801bfee <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801c050:	4b05      	ldr	r3, [pc, #20]	; (801c068 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f0>)
 801c052:	6818      	ldr	r0, [r3, #0]
 801c054:	6803      	ldr	r3, [r0, #0]
 801c056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c058:	4798      	blx	r3
 801c05a:	e7c8      	b.n	801bfee <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801c05c:	2b00      	cmp	r3, #0
 801c05e:	f43f ae82 	beq.w	801bd66 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801c062:	f44f 7180 	mov.w	r1, #256	; 0x100
 801c066:	e793      	b.n	801bf90 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x318>
 801c068:	200243dc 	.word	0x200243dc

0801c06c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
 801c06c:	b538      	push	{r3, r4, r5, lr}
 801c06e:	4c15      	ldr	r4, [pc, #84]	; (801c0c4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 801c070:	4605      	mov	r5, r0
 801c072:	7823      	ldrb	r3, [r4, #0]
 801c074:	f3bf 8f5b 	dmb	ish
 801c078:	07da      	lsls	r2, r3, #31
 801c07a:	d40b      	bmi.n	801c094 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 801c07c:	4620      	mov	r0, r4
 801c07e:	f007 fa68 	bl	8023552 <__cxa_guard_acquire>
 801c082:	b138      	cbz	r0, 801c094 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 801c084:	4620      	mov	r0, r4
 801c086:	f007 fa70 	bl	802356a <__cxa_guard_release>
 801c08a:	4a0f      	ldr	r2, [pc, #60]	; (801c0c8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 801c08c:	490f      	ldr	r1, [pc, #60]	; (801c0cc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 801c08e:	4810      	ldr	r0, [pc, #64]	; (801c0d0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 801c090:	f007 fa58 	bl	8023544 <__aeabi_atexit>
 801c094:	4c0f      	ldr	r4, [pc, #60]	; (801c0d4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
 801c096:	7823      	ldrb	r3, [r4, #0]
 801c098:	f3bf 8f5b 	dmb	ish
 801c09c:	07db      	lsls	r3, r3, #31
 801c09e:	d40b      	bmi.n	801c0b8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 801c0a0:	4620      	mov	r0, r4
 801c0a2:	f007 fa56 	bl	8023552 <__cxa_guard_acquire>
 801c0a6:	b138      	cbz	r0, 801c0b8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 801c0a8:	4620      	mov	r0, r4
 801c0aa:	f007 fa5e 	bl	802356a <__cxa_guard_release>
 801c0ae:	4a06      	ldr	r2, [pc, #24]	; (801c0c8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 801c0b0:	4909      	ldr	r1, [pc, #36]	; (801c0d8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 801c0b2:	480a      	ldr	r0, [pc, #40]	; (801c0dc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 801c0b4:	f007 fa46 	bl	8023544 <__aeabi_atexit>
 801c0b8:	4b05      	ldr	r3, [pc, #20]	; (801c0d0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 801c0ba:	612b      	str	r3, [r5, #16]
 801c0bc:	4b07      	ldr	r3, [pc, #28]	; (801c0dc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 801c0be:	616b      	str	r3, [r5, #20]
 801c0c0:	bd38      	pop	{r3, r4, r5, pc}
 801c0c2:	bf00      	nop
 801c0c4:	200244a8 	.word	0x200244a8
 801c0c8:	20000000 	.word	0x20000000
 801c0cc:	0801a28b 	.word	0x0801a28b
 801c0d0:	20000074 	.word	0x20000074
 801c0d4:	200244ac 	.word	0x200244ac
 801c0d8:	0801a289 	.word	0x0801a289
 801c0dc:	20000078 	.word	0x20000078

0801c0e0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
 801c0e0:	b538      	push	{r3, r4, r5, lr}
 801c0e2:	4c15      	ldr	r4, [pc, #84]	; (801c138 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 801c0e4:	4605      	mov	r5, r0
 801c0e6:	7823      	ldrb	r3, [r4, #0]
 801c0e8:	f3bf 8f5b 	dmb	ish
 801c0ec:	07da      	lsls	r2, r3, #31
 801c0ee:	d40b      	bmi.n	801c108 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 801c0f0:	4620      	mov	r0, r4
 801c0f2:	f007 fa2e 	bl	8023552 <__cxa_guard_acquire>
 801c0f6:	b138      	cbz	r0, 801c108 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 801c0f8:	4620      	mov	r0, r4
 801c0fa:	f007 fa36 	bl	802356a <__cxa_guard_release>
 801c0fe:	4a0f      	ldr	r2, [pc, #60]	; (801c13c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 801c100:	490f      	ldr	r1, [pc, #60]	; (801c140 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 801c102:	4810      	ldr	r0, [pc, #64]	; (801c144 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 801c104:	f007 fa1e 	bl	8023544 <__aeabi_atexit>
 801c108:	4c0f      	ldr	r4, [pc, #60]	; (801c148 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
 801c10a:	7823      	ldrb	r3, [r4, #0]
 801c10c:	f3bf 8f5b 	dmb	ish
 801c110:	07db      	lsls	r3, r3, #31
 801c112:	d40b      	bmi.n	801c12c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 801c114:	4620      	mov	r0, r4
 801c116:	f007 fa1c 	bl	8023552 <__cxa_guard_acquire>
 801c11a:	b138      	cbz	r0, 801c12c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 801c11c:	4620      	mov	r0, r4
 801c11e:	f007 fa24 	bl	802356a <__cxa_guard_release>
 801c122:	4a06      	ldr	r2, [pc, #24]	; (801c13c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 801c124:	4909      	ldr	r1, [pc, #36]	; (801c14c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 801c126:	480a      	ldr	r0, [pc, #40]	; (801c150 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 801c128:	f007 fa0c 	bl	8023544 <__aeabi_atexit>
 801c12c:	4b05      	ldr	r3, [pc, #20]	; (801c144 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 801c12e:	60ab      	str	r3, [r5, #8]
 801c130:	4b07      	ldr	r3, [pc, #28]	; (801c150 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 801c132:	60eb      	str	r3, [r5, #12]
 801c134:	bd38      	pop	{r3, r4, r5, pc}
 801c136:	bf00      	nop
 801c138:	20024480 	.word	0x20024480
 801c13c:	20000000 	.word	0x20000000
 801c140:	0801a28f 	.word	0x0801a28f
 801c144:	2000004c 	.word	0x2000004c
 801c148:	20024484 	.word	0x20024484
 801c14c:	0801a28d 	.word	0x0801a28d
 801c150:	20000050 	.word	0x20000050

0801c154 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>:
 801c154:	b510      	push	{r4, lr}
 801c156:	4604      	mov	r4, r0
 801c158:	f7ff ff88 	bl	801c06c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
 801c15c:	4620      	mov	r0, r4
 801c15e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c162:	f7ff bfbd 	b.w	801c0e0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

0801c168 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 801c168:	b538      	push	{r3, r4, r5, lr}
 801c16a:	4c15      	ldr	r4, [pc, #84]	; (801c1c0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801c16c:	4605      	mov	r5, r0
 801c16e:	7823      	ldrb	r3, [r4, #0]
 801c170:	f3bf 8f5b 	dmb	ish
 801c174:	07da      	lsls	r2, r3, #31
 801c176:	d40b      	bmi.n	801c190 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801c178:	4620      	mov	r0, r4
 801c17a:	f007 f9ea 	bl	8023552 <__cxa_guard_acquire>
 801c17e:	b138      	cbz	r0, 801c190 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801c180:	4620      	mov	r0, r4
 801c182:	f007 f9f2 	bl	802356a <__cxa_guard_release>
 801c186:	4a0f      	ldr	r2, [pc, #60]	; (801c1c4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801c188:	490f      	ldr	r1, [pc, #60]	; (801c1c8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801c18a:	4810      	ldr	r0, [pc, #64]	; (801c1cc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801c18c:	f007 f9da 	bl	8023544 <__aeabi_atexit>
 801c190:	4c0f      	ldr	r4, [pc, #60]	; (801c1d0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 801c192:	7823      	ldrb	r3, [r4, #0]
 801c194:	f3bf 8f5b 	dmb	ish
 801c198:	07db      	lsls	r3, r3, #31
 801c19a:	d40b      	bmi.n	801c1b4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801c19c:	4620      	mov	r0, r4
 801c19e:	f007 f9d8 	bl	8023552 <__cxa_guard_acquire>
 801c1a2:	b138      	cbz	r0, 801c1b4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801c1a4:	4620      	mov	r0, r4
 801c1a6:	f007 f9e0 	bl	802356a <__cxa_guard_release>
 801c1aa:	4a06      	ldr	r2, [pc, #24]	; (801c1c4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801c1ac:	4909      	ldr	r1, [pc, #36]	; (801c1d4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801c1ae:	480a      	ldr	r0, [pc, #40]	; (801c1d8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801c1b0:	f007 f9c8 	bl	8023544 <__aeabi_atexit>
 801c1b4:	4b05      	ldr	r3, [pc, #20]	; (801c1cc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801c1b6:	622b      	str	r3, [r5, #32]
 801c1b8:	4b07      	ldr	r3, [pc, #28]	; (801c1d8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801c1ba:	626b      	str	r3, [r5, #36]	; 0x24
 801c1bc:	bd38      	pop	{r3, r4, r5, pc}
 801c1be:	bf00      	nop
 801c1c0:	200244b0 	.word	0x200244b0
 801c1c4:	20000000 	.word	0x20000000
 801c1c8:	0801a283 	.word	0x0801a283
 801c1cc:	2000007c 	.word	0x2000007c
 801c1d0:	200244b4 	.word	0x200244b4
 801c1d4:	0801a281 	.word	0x0801a281
 801c1d8:	20000080 	.word	0x20000080

0801c1dc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 801c1dc:	b538      	push	{r3, r4, r5, lr}
 801c1de:	4c15      	ldr	r4, [pc, #84]	; (801c234 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 801c1e0:	4605      	mov	r5, r0
 801c1e2:	7823      	ldrb	r3, [r4, #0]
 801c1e4:	f3bf 8f5b 	dmb	ish
 801c1e8:	07da      	lsls	r2, r3, #31
 801c1ea:	d40b      	bmi.n	801c204 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801c1ec:	4620      	mov	r0, r4
 801c1ee:	f007 f9b0 	bl	8023552 <__cxa_guard_acquire>
 801c1f2:	b138      	cbz	r0, 801c204 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801c1f4:	4620      	mov	r0, r4
 801c1f6:	f007 f9b8 	bl	802356a <__cxa_guard_release>
 801c1fa:	4a0f      	ldr	r2, [pc, #60]	; (801c238 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801c1fc:	490f      	ldr	r1, [pc, #60]	; (801c23c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801c1fe:	4810      	ldr	r0, [pc, #64]	; (801c240 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801c200:	f007 f9a0 	bl	8023544 <__aeabi_atexit>
 801c204:	4c0f      	ldr	r4, [pc, #60]	; (801c244 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 801c206:	7823      	ldrb	r3, [r4, #0]
 801c208:	f3bf 8f5b 	dmb	ish
 801c20c:	07db      	lsls	r3, r3, #31
 801c20e:	d40b      	bmi.n	801c228 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801c210:	4620      	mov	r0, r4
 801c212:	f007 f99e 	bl	8023552 <__cxa_guard_acquire>
 801c216:	b138      	cbz	r0, 801c228 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801c218:	4620      	mov	r0, r4
 801c21a:	f007 f9a6 	bl	802356a <__cxa_guard_release>
 801c21e:	4a06      	ldr	r2, [pc, #24]	; (801c238 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801c220:	4909      	ldr	r1, [pc, #36]	; (801c248 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801c222:	480a      	ldr	r0, [pc, #40]	; (801c24c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801c224:	f007 f98e 	bl	8023544 <__aeabi_atexit>
 801c228:	4b05      	ldr	r3, [pc, #20]	; (801c240 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801c22a:	61ab      	str	r3, [r5, #24]
 801c22c:	4b07      	ldr	r3, [pc, #28]	; (801c24c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801c22e:	61eb      	str	r3, [r5, #28]
 801c230:	bd38      	pop	{r3, r4, r5, pc}
 801c232:	bf00      	nop
 801c234:	20024488 	.word	0x20024488
 801c238:	20000000 	.word	0x20000000
 801c23c:	0801a287 	.word	0x0801a287
 801c240:	20000054 	.word	0x20000054
 801c244:	2002448c 	.word	0x2002448c
 801c248:	0801a285 	.word	0x0801a285
 801c24c:	20000058 	.word	0x20000058

0801c250 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>:
 801c250:	b510      	push	{r4, lr}
 801c252:	4604      	mov	r4, r0
 801c254:	f7ff ff88 	bl	801c168 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 801c258:	4620      	mov	r0, r4
 801c25a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c25e:	f7ff bfbd 	b.w	801c1dc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0801c264 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 801c264:	b538      	push	{r3, r4, r5, lr}
 801c266:	4c15      	ldr	r4, [pc, #84]	; (801c2bc <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 801c268:	4605      	mov	r5, r0
 801c26a:	7823      	ldrb	r3, [r4, #0]
 801c26c:	f3bf 8f5b 	dmb	ish
 801c270:	07da      	lsls	r2, r3, #31
 801c272:	d40b      	bmi.n	801c28c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801c274:	4620      	mov	r0, r4
 801c276:	f007 f96c 	bl	8023552 <__cxa_guard_acquire>
 801c27a:	b138      	cbz	r0, 801c28c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801c27c:	4620      	mov	r0, r4
 801c27e:	f007 f974 	bl	802356a <__cxa_guard_release>
 801c282:	4a0f      	ldr	r2, [pc, #60]	; (801c2c0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801c284:	490f      	ldr	r1, [pc, #60]	; (801c2c4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 801c286:	4810      	ldr	r0, [pc, #64]	; (801c2c8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801c288:	f007 f95c 	bl	8023544 <__aeabi_atexit>
 801c28c:	4c0f      	ldr	r4, [pc, #60]	; (801c2cc <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 801c28e:	7823      	ldrb	r3, [r4, #0]
 801c290:	f3bf 8f5b 	dmb	ish
 801c294:	07db      	lsls	r3, r3, #31
 801c296:	d40b      	bmi.n	801c2b0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801c298:	4620      	mov	r0, r4
 801c29a:	f007 f95a 	bl	8023552 <__cxa_guard_acquire>
 801c29e:	b138      	cbz	r0, 801c2b0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801c2a0:	4620      	mov	r0, r4
 801c2a2:	f007 f962 	bl	802356a <__cxa_guard_release>
 801c2a6:	4a06      	ldr	r2, [pc, #24]	; (801c2c0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801c2a8:	4909      	ldr	r1, [pc, #36]	; (801c2d0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801c2aa:	480a      	ldr	r0, [pc, #40]	; (801c2d4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801c2ac:	f007 f94a 	bl	8023544 <__aeabi_atexit>
 801c2b0:	4b05      	ldr	r3, [pc, #20]	; (801c2c8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801c2b2:	632b      	str	r3, [r5, #48]	; 0x30
 801c2b4:	4b07      	ldr	r3, [pc, #28]	; (801c2d4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801c2b6:	636b      	str	r3, [r5, #52]	; 0x34
 801c2b8:	bd38      	pop	{r3, r4, r5, pc}
 801c2ba:	bf00      	nop
 801c2bc:	200244c0 	.word	0x200244c0
 801c2c0:	20000000 	.word	0x20000000
 801c2c4:	0801a27b 	.word	0x0801a27b
 801c2c8:	2000008c 	.word	0x2000008c
 801c2cc:	200244c4 	.word	0x200244c4
 801c2d0:	0801a279 	.word	0x0801a279
 801c2d4:	20000090 	.word	0x20000090

0801c2d8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 801c2d8:	b538      	push	{r3, r4, r5, lr}
 801c2da:	4c15      	ldr	r4, [pc, #84]	; (801c330 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 801c2dc:	4605      	mov	r5, r0
 801c2de:	7823      	ldrb	r3, [r4, #0]
 801c2e0:	f3bf 8f5b 	dmb	ish
 801c2e4:	07da      	lsls	r2, r3, #31
 801c2e6:	d40b      	bmi.n	801c300 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801c2e8:	4620      	mov	r0, r4
 801c2ea:	f007 f932 	bl	8023552 <__cxa_guard_acquire>
 801c2ee:	b138      	cbz	r0, 801c300 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801c2f0:	4620      	mov	r0, r4
 801c2f2:	f007 f93a 	bl	802356a <__cxa_guard_release>
 801c2f6:	4a0f      	ldr	r2, [pc, #60]	; (801c334 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801c2f8:	490f      	ldr	r1, [pc, #60]	; (801c338 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801c2fa:	4810      	ldr	r0, [pc, #64]	; (801c33c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801c2fc:	f007 f922 	bl	8023544 <__aeabi_atexit>
 801c300:	4c0f      	ldr	r4, [pc, #60]	; (801c340 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 801c302:	7823      	ldrb	r3, [r4, #0]
 801c304:	f3bf 8f5b 	dmb	ish
 801c308:	07db      	lsls	r3, r3, #31
 801c30a:	d40b      	bmi.n	801c324 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801c30c:	4620      	mov	r0, r4
 801c30e:	f007 f920 	bl	8023552 <__cxa_guard_acquire>
 801c312:	b138      	cbz	r0, 801c324 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801c314:	4620      	mov	r0, r4
 801c316:	f007 f928 	bl	802356a <__cxa_guard_release>
 801c31a:	4a06      	ldr	r2, [pc, #24]	; (801c334 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801c31c:	4909      	ldr	r1, [pc, #36]	; (801c344 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801c31e:	480a      	ldr	r0, [pc, #40]	; (801c348 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801c320:	f007 f910 	bl	8023544 <__aeabi_atexit>
 801c324:	4b05      	ldr	r3, [pc, #20]	; (801c33c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801c326:	62ab      	str	r3, [r5, #40]	; 0x28
 801c328:	4b07      	ldr	r3, [pc, #28]	; (801c348 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801c32a:	62eb      	str	r3, [r5, #44]	; 0x2c
 801c32c:	bd38      	pop	{r3, r4, r5, pc}
 801c32e:	bf00      	nop
 801c330:	20024490 	.word	0x20024490
 801c334:	20000000 	.word	0x20000000
 801c338:	0801a27f 	.word	0x0801a27f
 801c33c:	2000005c 	.word	0x2000005c
 801c340:	20024494 	.word	0x20024494
 801c344:	0801a27d 	.word	0x0801a27d
 801c348:	20000060 	.word	0x20000060

0801c34c <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>:
 801c34c:	b510      	push	{r4, lr}
 801c34e:	4604      	mov	r4, r0
 801c350:	f7ff ff88 	bl	801c264 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 801c354:	4620      	mov	r0, r4
 801c356:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c35a:	f7ff bfbd 	b.w	801c2d8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

0801c360 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
 801c360:	b538      	push	{r3, r4, r5, lr}
 801c362:	4c15      	ldr	r4, [pc, #84]	; (801c3b8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 801c364:	4605      	mov	r5, r0
 801c366:	7823      	ldrb	r3, [r4, #0]
 801c368:	f3bf 8f5b 	dmb	ish
 801c36c:	07da      	lsls	r2, r3, #31
 801c36e:	d40b      	bmi.n	801c388 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 801c370:	4620      	mov	r0, r4
 801c372:	f007 f8ee 	bl	8023552 <__cxa_guard_acquire>
 801c376:	b138      	cbz	r0, 801c388 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 801c378:	4620      	mov	r0, r4
 801c37a:	f007 f8f6 	bl	802356a <__cxa_guard_release>
 801c37e:	4a0f      	ldr	r2, [pc, #60]	; (801c3bc <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 801c380:	490f      	ldr	r1, [pc, #60]	; (801c3c0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 801c382:	4810      	ldr	r0, [pc, #64]	; (801c3c4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 801c384:	f007 f8de 	bl	8023544 <__aeabi_atexit>
 801c388:	4c0f      	ldr	r4, [pc, #60]	; (801c3c8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
 801c38a:	7823      	ldrb	r3, [r4, #0]
 801c38c:	f3bf 8f5b 	dmb	ish
 801c390:	07db      	lsls	r3, r3, #31
 801c392:	d40b      	bmi.n	801c3ac <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 801c394:	4620      	mov	r0, r4
 801c396:	f007 f8dc 	bl	8023552 <__cxa_guard_acquire>
 801c39a:	b138      	cbz	r0, 801c3ac <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 801c39c:	4620      	mov	r0, r4
 801c39e:	f007 f8e4 	bl	802356a <__cxa_guard_release>
 801c3a2:	4a06      	ldr	r2, [pc, #24]	; (801c3bc <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 801c3a4:	4909      	ldr	r1, [pc, #36]	; (801c3cc <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 801c3a6:	480a      	ldr	r0, [pc, #40]	; (801c3d0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 801c3a8:	f007 f8cc 	bl	8023544 <__aeabi_atexit>
 801c3ac:	4b05      	ldr	r3, [pc, #20]	; (801c3c4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 801c3ae:	652b      	str	r3, [r5, #80]	; 0x50
 801c3b0:	4b07      	ldr	r3, [pc, #28]	; (801c3d0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 801c3b2:	656b      	str	r3, [r5, #84]	; 0x54
 801c3b4:	bd38      	pop	{r3, r4, r5, pc}
 801c3b6:	bf00      	nop
 801c3b8:	200244c8 	.word	0x200244c8
 801c3bc:	20000000 	.word	0x20000000
 801c3c0:	0801a26b 	.word	0x0801a26b
 801c3c4:	20000094 	.word	0x20000094
 801c3c8:	200244cc 	.word	0x200244cc
 801c3cc:	0801a269 	.word	0x0801a269
 801c3d0:	20000098 	.word	0x20000098

0801c3d4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
 801c3d4:	b538      	push	{r3, r4, r5, lr}
 801c3d6:	4c15      	ldr	r4, [pc, #84]	; (801c42c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 801c3d8:	4605      	mov	r5, r0
 801c3da:	7823      	ldrb	r3, [r4, #0]
 801c3dc:	f3bf 8f5b 	dmb	ish
 801c3e0:	07da      	lsls	r2, r3, #31
 801c3e2:	d40b      	bmi.n	801c3fc <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 801c3e4:	4620      	mov	r0, r4
 801c3e6:	f007 f8b4 	bl	8023552 <__cxa_guard_acquire>
 801c3ea:	b138      	cbz	r0, 801c3fc <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 801c3ec:	4620      	mov	r0, r4
 801c3ee:	f007 f8bc 	bl	802356a <__cxa_guard_release>
 801c3f2:	4a0f      	ldr	r2, [pc, #60]	; (801c430 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 801c3f4:	490f      	ldr	r1, [pc, #60]	; (801c434 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 801c3f6:	4810      	ldr	r0, [pc, #64]	; (801c438 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 801c3f8:	f007 f8a4 	bl	8023544 <__aeabi_atexit>
 801c3fc:	4c0f      	ldr	r4, [pc, #60]	; (801c43c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
 801c3fe:	7823      	ldrb	r3, [r4, #0]
 801c400:	f3bf 8f5b 	dmb	ish
 801c404:	07db      	lsls	r3, r3, #31
 801c406:	d40b      	bmi.n	801c420 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 801c408:	4620      	mov	r0, r4
 801c40a:	f007 f8a2 	bl	8023552 <__cxa_guard_acquire>
 801c40e:	b138      	cbz	r0, 801c420 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 801c410:	4620      	mov	r0, r4
 801c412:	f007 f8aa 	bl	802356a <__cxa_guard_release>
 801c416:	4a06      	ldr	r2, [pc, #24]	; (801c430 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 801c418:	4909      	ldr	r1, [pc, #36]	; (801c440 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 801c41a:	480a      	ldr	r0, [pc, #40]	; (801c444 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 801c41c:	f007 f892 	bl	8023544 <__aeabi_atexit>
 801c420:	4b05      	ldr	r3, [pc, #20]	; (801c438 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 801c422:	64ab      	str	r3, [r5, #72]	; 0x48
 801c424:	4b07      	ldr	r3, [pc, #28]	; (801c444 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 801c426:	64eb      	str	r3, [r5, #76]	; 0x4c
 801c428:	bd38      	pop	{r3, r4, r5, pc}
 801c42a:	bf00      	nop
 801c42c:	200244d0 	.word	0x200244d0
 801c430:	20000000 	.word	0x20000000
 801c434:	0801a26f 	.word	0x0801a26f
 801c438:	2000009c 	.word	0x2000009c
 801c43c:	200244d4 	.word	0x200244d4
 801c440:	0801a26d 	.word	0x0801a26d
 801c444:	200000a0 	.word	0x200000a0

0801c448 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
 801c448:	b538      	push	{r3, r4, r5, lr}
 801c44a:	4c15      	ldr	r4, [pc, #84]	; (801c4a0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 801c44c:	4605      	mov	r5, r0
 801c44e:	7823      	ldrb	r3, [r4, #0]
 801c450:	f3bf 8f5b 	dmb	ish
 801c454:	07da      	lsls	r2, r3, #31
 801c456:	d40b      	bmi.n	801c470 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 801c458:	4620      	mov	r0, r4
 801c45a:	f007 f87a 	bl	8023552 <__cxa_guard_acquire>
 801c45e:	b138      	cbz	r0, 801c470 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 801c460:	4620      	mov	r0, r4
 801c462:	f007 f882 	bl	802356a <__cxa_guard_release>
 801c466:	4a0f      	ldr	r2, [pc, #60]	; (801c4a4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 801c468:	490f      	ldr	r1, [pc, #60]	; (801c4a8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 801c46a:	4810      	ldr	r0, [pc, #64]	; (801c4ac <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 801c46c:	f007 f86a 	bl	8023544 <__aeabi_atexit>
 801c470:	4c0f      	ldr	r4, [pc, #60]	; (801c4b0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
 801c472:	7823      	ldrb	r3, [r4, #0]
 801c474:	f3bf 8f5b 	dmb	ish
 801c478:	07db      	lsls	r3, r3, #31
 801c47a:	d40b      	bmi.n	801c494 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 801c47c:	4620      	mov	r0, r4
 801c47e:	f007 f868 	bl	8023552 <__cxa_guard_acquire>
 801c482:	b138      	cbz	r0, 801c494 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 801c484:	4620      	mov	r0, r4
 801c486:	f007 f870 	bl	802356a <__cxa_guard_release>
 801c48a:	4a06      	ldr	r2, [pc, #24]	; (801c4a4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 801c48c:	4909      	ldr	r1, [pc, #36]	; (801c4b4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 801c48e:	480a      	ldr	r0, [pc, #40]	; (801c4b8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 801c490:	f007 f858 	bl	8023544 <__aeabi_atexit>
 801c494:	4b05      	ldr	r3, [pc, #20]	; (801c4ac <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 801c496:	642b      	str	r3, [r5, #64]	; 0x40
 801c498:	4b07      	ldr	r3, [pc, #28]	; (801c4b8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 801c49a:	646b      	str	r3, [r5, #68]	; 0x44
 801c49c:	bd38      	pop	{r3, r4, r5, pc}
 801c49e:	bf00      	nop
 801c4a0:	20024498 	.word	0x20024498
 801c4a4:	20000000 	.word	0x20000000
 801c4a8:	0801a273 	.word	0x0801a273
 801c4ac:	20000064 	.word	0x20000064
 801c4b0:	2002449c 	.word	0x2002449c
 801c4b4:	0801a271 	.word	0x0801a271
 801c4b8:	20000068 	.word	0x20000068

0801c4bc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
 801c4bc:	b538      	push	{r3, r4, r5, lr}
 801c4be:	4c15      	ldr	r4, [pc, #84]	; (801c514 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 801c4c0:	4605      	mov	r5, r0
 801c4c2:	7823      	ldrb	r3, [r4, #0]
 801c4c4:	f3bf 8f5b 	dmb	ish
 801c4c8:	07da      	lsls	r2, r3, #31
 801c4ca:	d40b      	bmi.n	801c4e4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 801c4cc:	4620      	mov	r0, r4
 801c4ce:	f007 f840 	bl	8023552 <__cxa_guard_acquire>
 801c4d2:	b138      	cbz	r0, 801c4e4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 801c4d4:	4620      	mov	r0, r4
 801c4d6:	f007 f848 	bl	802356a <__cxa_guard_release>
 801c4da:	4a0f      	ldr	r2, [pc, #60]	; (801c518 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 801c4dc:	490f      	ldr	r1, [pc, #60]	; (801c51c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 801c4de:	4810      	ldr	r0, [pc, #64]	; (801c520 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 801c4e0:	f007 f830 	bl	8023544 <__aeabi_atexit>
 801c4e4:	4c0f      	ldr	r4, [pc, #60]	; (801c524 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
 801c4e6:	7823      	ldrb	r3, [r4, #0]
 801c4e8:	f3bf 8f5b 	dmb	ish
 801c4ec:	07db      	lsls	r3, r3, #31
 801c4ee:	d40b      	bmi.n	801c508 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 801c4f0:	4620      	mov	r0, r4
 801c4f2:	f007 f82e 	bl	8023552 <__cxa_guard_acquire>
 801c4f6:	b138      	cbz	r0, 801c508 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 801c4f8:	4620      	mov	r0, r4
 801c4fa:	f007 f836 	bl	802356a <__cxa_guard_release>
 801c4fe:	4a06      	ldr	r2, [pc, #24]	; (801c518 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 801c500:	4909      	ldr	r1, [pc, #36]	; (801c528 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 801c502:	480a      	ldr	r0, [pc, #40]	; (801c52c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 801c504:	f007 f81e 	bl	8023544 <__aeabi_atexit>
 801c508:	4b05      	ldr	r3, [pc, #20]	; (801c520 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 801c50a:	63ab      	str	r3, [r5, #56]	; 0x38
 801c50c:	4b07      	ldr	r3, [pc, #28]	; (801c52c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 801c50e:	63eb      	str	r3, [r5, #60]	; 0x3c
 801c510:	bd38      	pop	{r3, r4, r5, pc}
 801c512:	bf00      	nop
 801c514:	200244b8 	.word	0x200244b8
 801c518:	20000000 	.word	0x20000000
 801c51c:	0801a277 	.word	0x0801a277
 801c520:	20000084 	.word	0x20000084
 801c524:	200244bc 	.word	0x200244bc
 801c528:	0801a275 	.word	0x0801a275
 801c52c:	20000088 	.word	0x20000088

0801c530 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>:
 801c530:	b510      	push	{r4, lr}
 801c532:	4604      	mov	r4, r0
 801c534:	f7ff ff14 	bl	801c360 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
 801c538:	4620      	mov	r0, r4
 801c53a:	f7ff ff85 	bl	801c448 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
 801c53e:	4620      	mov	r0, r4
 801c540:	f7ff ff48 	bl	801c3d4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
 801c544:	4620      	mov	r0, r4
 801c546:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c54a:	f7ff bfb7 	b.w	801c4bc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

0801c550 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 801c550:	b538      	push	{r3, r4, r5, lr}
 801c552:	4c15      	ldr	r4, [pc, #84]	; (801c5a8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 801c554:	4605      	mov	r5, r0
 801c556:	7823      	ldrb	r3, [r4, #0]
 801c558:	f3bf 8f5b 	dmb	ish
 801c55c:	07da      	lsls	r2, r3, #31
 801c55e:	d40b      	bmi.n	801c578 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801c560:	4620      	mov	r0, r4
 801c562:	f006 fff6 	bl	8023552 <__cxa_guard_acquire>
 801c566:	b138      	cbz	r0, 801c578 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801c568:	4620      	mov	r0, r4
 801c56a:	f006 fffe 	bl	802356a <__cxa_guard_release>
 801c56e:	4a0f      	ldr	r2, [pc, #60]	; (801c5ac <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801c570:	490f      	ldr	r1, [pc, #60]	; (801c5b0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801c572:	4810      	ldr	r0, [pc, #64]	; (801c5b4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801c574:	f006 ffe6 	bl	8023544 <__aeabi_atexit>
 801c578:	4c0f      	ldr	r4, [pc, #60]	; (801c5b8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 801c57a:	7823      	ldrb	r3, [r4, #0]
 801c57c:	f3bf 8f5b 	dmb	ish
 801c580:	07db      	lsls	r3, r3, #31
 801c582:	d40b      	bmi.n	801c59c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801c584:	4620      	mov	r0, r4
 801c586:	f006 ffe4 	bl	8023552 <__cxa_guard_acquire>
 801c58a:	b138      	cbz	r0, 801c59c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801c58c:	4620      	mov	r0, r4
 801c58e:	f006 ffec 	bl	802356a <__cxa_guard_release>
 801c592:	4a06      	ldr	r2, [pc, #24]	; (801c5ac <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801c594:	4909      	ldr	r1, [pc, #36]	; (801c5bc <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 801c596:	480a      	ldr	r0, [pc, #40]	; (801c5c0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801c598:	f006 ffd4 	bl	8023544 <__aeabi_atexit>
 801c59c:	4b05      	ldr	r3, [pc, #20]	; (801c5b4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801c59e:	662b      	str	r3, [r5, #96]	; 0x60
 801c5a0:	4b07      	ldr	r3, [pc, #28]	; (801c5c0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801c5a2:	666b      	str	r3, [r5, #100]	; 0x64
 801c5a4:	bd38      	pop	{r3, r4, r5, pc}
 801c5a6:	bf00      	nop
 801c5a8:	200244a0 	.word	0x200244a0
 801c5ac:	20000000 	.word	0x20000000
 801c5b0:	0801a263 	.word	0x0801a263
 801c5b4:	2000006c 	.word	0x2000006c
 801c5b8:	200244a4 	.word	0x200244a4
 801c5bc:	0801a261 	.word	0x0801a261
 801c5c0:	20000070 	.word	0x20000070

0801c5c4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 801c5c4:	b538      	push	{r3, r4, r5, lr}
 801c5c6:	4c15      	ldr	r4, [pc, #84]	; (801c61c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 801c5c8:	4605      	mov	r5, r0
 801c5ca:	7823      	ldrb	r3, [r4, #0]
 801c5cc:	f3bf 8f5b 	dmb	ish
 801c5d0:	07da      	lsls	r2, r3, #31
 801c5d2:	d40b      	bmi.n	801c5ec <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801c5d4:	4620      	mov	r0, r4
 801c5d6:	f006 ffbc 	bl	8023552 <__cxa_guard_acquire>
 801c5da:	b138      	cbz	r0, 801c5ec <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801c5dc:	4620      	mov	r0, r4
 801c5de:	f006 ffc4 	bl	802356a <__cxa_guard_release>
 801c5e2:	4a0f      	ldr	r2, [pc, #60]	; (801c620 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801c5e4:	490f      	ldr	r1, [pc, #60]	; (801c624 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 801c5e6:	4810      	ldr	r0, [pc, #64]	; (801c628 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801c5e8:	f006 ffac 	bl	8023544 <__aeabi_atexit>
 801c5ec:	4c0f      	ldr	r4, [pc, #60]	; (801c62c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 801c5ee:	7823      	ldrb	r3, [r4, #0]
 801c5f0:	f3bf 8f5b 	dmb	ish
 801c5f4:	07db      	lsls	r3, r3, #31
 801c5f6:	d40b      	bmi.n	801c610 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801c5f8:	4620      	mov	r0, r4
 801c5fa:	f006 ffaa 	bl	8023552 <__cxa_guard_acquire>
 801c5fe:	b138      	cbz	r0, 801c610 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801c600:	4620      	mov	r0, r4
 801c602:	f006 ffb2 	bl	802356a <__cxa_guard_release>
 801c606:	4a06      	ldr	r2, [pc, #24]	; (801c620 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801c608:	4909      	ldr	r1, [pc, #36]	; (801c630 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801c60a:	480a      	ldr	r0, [pc, #40]	; (801c634 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801c60c:	f006 ff9a 	bl	8023544 <__aeabi_atexit>
 801c610:	4b05      	ldr	r3, [pc, #20]	; (801c628 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801c612:	65ab      	str	r3, [r5, #88]	; 0x58
 801c614:	4b07      	ldr	r3, [pc, #28]	; (801c634 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801c616:	65eb      	str	r3, [r5, #92]	; 0x5c
 801c618:	bd38      	pop	{r3, r4, r5, pc}
 801c61a:	bf00      	nop
 801c61c:	20024478 	.word	0x20024478
 801c620:	20000000 	.word	0x20000000
 801c624:	0801a267 	.word	0x0801a267
 801c628:	20000044 	.word	0x20000044
 801c62c:	2002447c 	.word	0x2002447c
 801c630:	0801a265 	.word	0x0801a265
 801c634:	20000048 	.word	0x20000048

0801c638 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>:
 801c638:	b510      	push	{r4, lr}
 801c63a:	4604      	mov	r4, r0
 801c63c:	f7ff ff88 	bl	801c550 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 801c640:	4620      	mov	r0, r4
 801c642:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c646:	f7ff bfbd 	b.w	801c5c4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

0801c64c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 801c64c:	b538      	push	{r3, r4, r5, lr}
 801c64e:	4c15      	ldr	r4, [pc, #84]	; (801c6a4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 801c650:	4605      	mov	r5, r0
 801c652:	7823      	ldrb	r3, [r4, #0]
 801c654:	f3bf 8f5b 	dmb	ish
 801c658:	07da      	lsls	r2, r3, #31
 801c65a:	d40b      	bmi.n	801c674 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801c65c:	4620      	mov	r0, r4
 801c65e:	f006 ff78 	bl	8023552 <__cxa_guard_acquire>
 801c662:	b138      	cbz	r0, 801c674 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801c664:	4620      	mov	r0, r4
 801c666:	f006 ff80 	bl	802356a <__cxa_guard_release>
 801c66a:	4a0f      	ldr	r2, [pc, #60]	; (801c6a8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801c66c:	490f      	ldr	r1, [pc, #60]	; (801c6ac <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801c66e:	4810      	ldr	r0, [pc, #64]	; (801c6b0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801c670:	f006 ff68 	bl	8023544 <__aeabi_atexit>
 801c674:	4c0f      	ldr	r4, [pc, #60]	; (801c6b4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 801c676:	7823      	ldrb	r3, [r4, #0]
 801c678:	f3bf 8f5b 	dmb	ish
 801c67c:	07db      	lsls	r3, r3, #31
 801c67e:	d40b      	bmi.n	801c698 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801c680:	4620      	mov	r0, r4
 801c682:	f006 ff66 	bl	8023552 <__cxa_guard_acquire>
 801c686:	b138      	cbz	r0, 801c698 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801c688:	4620      	mov	r0, r4
 801c68a:	f006 ff6e 	bl	802356a <__cxa_guard_release>
 801c68e:	4a06      	ldr	r2, [pc, #24]	; (801c6a8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801c690:	4909      	ldr	r1, [pc, #36]	; (801c6b8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801c692:	480a      	ldr	r0, [pc, #40]	; (801c6bc <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801c694:	f006 ff56 	bl	8023544 <__aeabi_atexit>
 801c698:	4b05      	ldr	r3, [pc, #20]	; (801c6b0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801c69a:	672b      	str	r3, [r5, #112]	; 0x70
 801c69c:	4b07      	ldr	r3, [pc, #28]	; (801c6bc <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801c69e:	676b      	str	r3, [r5, #116]	; 0x74
 801c6a0:	bd38      	pop	{r3, r4, r5, pc}
 801c6a2:	bf00      	nop
 801c6a4:	20024470 	.word	0x20024470
 801c6a8:	20000000 	.word	0x20000000
 801c6ac:	0801a25b 	.word	0x0801a25b
 801c6b0:	2000003c 	.word	0x2000003c
 801c6b4:	20024474 	.word	0x20024474
 801c6b8:	0801a259 	.word	0x0801a259
 801c6bc:	20000040 	.word	0x20000040

0801c6c0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>:
 801c6c0:	b538      	push	{r3, r4, r5, lr}
 801c6c2:	4c15      	ldr	r4, [pc, #84]	; (801c718 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 801c6c4:	4605      	mov	r5, r0
 801c6c6:	7823      	ldrb	r3, [r4, #0]
 801c6c8:	f3bf 8f5b 	dmb	ish
 801c6cc:	07da      	lsls	r2, r3, #31
 801c6ce:	d40b      	bmi.n	801c6e8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801c6d0:	4620      	mov	r0, r4
 801c6d2:	f006 ff3e 	bl	8023552 <__cxa_guard_acquire>
 801c6d6:	b138      	cbz	r0, 801c6e8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801c6d8:	4620      	mov	r0, r4
 801c6da:	f006 ff46 	bl	802356a <__cxa_guard_release>
 801c6de:	4a0f      	ldr	r2, [pc, #60]	; (801c71c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801c6e0:	490f      	ldr	r1, [pc, #60]	; (801c720 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801c6e2:	4810      	ldr	r0, [pc, #64]	; (801c724 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801c6e4:	f006 ff2e 	bl	8023544 <__aeabi_atexit>
 801c6e8:	4c0f      	ldr	r4, [pc, #60]	; (801c728 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 801c6ea:	7823      	ldrb	r3, [r4, #0]
 801c6ec:	f3bf 8f5b 	dmb	ish
 801c6f0:	07db      	lsls	r3, r3, #31
 801c6f2:	d40b      	bmi.n	801c70c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801c6f4:	4620      	mov	r0, r4
 801c6f6:	f006 ff2c 	bl	8023552 <__cxa_guard_acquire>
 801c6fa:	b138      	cbz	r0, 801c70c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801c6fc:	4620      	mov	r0, r4
 801c6fe:	f006 ff34 	bl	802356a <__cxa_guard_release>
 801c702:	4a06      	ldr	r2, [pc, #24]	; (801c71c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801c704:	4909      	ldr	r1, [pc, #36]	; (801c72c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 801c706:	480a      	ldr	r0, [pc, #40]	; (801c730 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801c708:	f006 ff1c 	bl	8023544 <__aeabi_atexit>
 801c70c:	4b05      	ldr	r3, [pc, #20]	; (801c724 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801c70e:	66ab      	str	r3, [r5, #104]	; 0x68
 801c710:	4b07      	ldr	r3, [pc, #28]	; (801c730 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801c712:	66eb      	str	r3, [r5, #108]	; 0x6c
 801c714:	bd38      	pop	{r3, r4, r5, pc}
 801c716:	bf00      	nop
 801c718:	20024468 	.word	0x20024468
 801c71c:	20000000 	.word	0x20000000
 801c720:	0801a25f 	.word	0x0801a25f
 801c724:	20000034 	.word	0x20000034
 801c728:	2002446c 	.word	0x2002446c
 801c72c:	0801a25d 	.word	0x0801a25d
 801c730:	20000038 	.word	0x20000038

0801c734 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>:
 801c734:	b510      	push	{r4, lr}
 801c736:	4604      	mov	r4, r0
 801c738:	f7ff ff88 	bl	801c64c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>
 801c73c:	4620      	mov	r0, r4
 801c73e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c742:	f7ff bfbd 	b.w	801c6c0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>

0801c746 <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>:
 801c746:	b510      	push	{r4, lr}
 801c748:	4604      	mov	r4, r0
 801c74a:	f7ff fff3 	bl	801c734 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>
 801c74e:	4620      	mov	r0, r4
 801c750:	f7ff ff72 	bl	801c638 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>
 801c754:	4620      	mov	r0, r4
 801c756:	f7ff fdf9 	bl	801c34c <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>
 801c75a:	4620      	mov	r0, r4
 801c75c:	f7ff fcfa 	bl	801c154 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>
 801c760:	4620      	mov	r0, r4
 801c762:	f7ff fd75 	bl	801c250 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>
 801c766:	4620      	mov	r0, r4
 801c768:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c76c:	f7ff bee0 	b.w	801c530 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>

0801c770 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>:
 801c770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c774:	e9dd 450b 	ldrd	r4, r5, [sp, #44]	; 0x2c
 801c778:	f9bd e024 	ldrsh.w	lr, [sp, #36]	; 0x24
 801c77c:	2d00      	cmp	r5, #0
 801c77e:	f9bd b028 	ldrsh.w	fp, [sp, #40]	; 0x28
 801c782:	fb05 4c0e 	mla	ip, r5, lr, r4
 801c786:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
 801c78a:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 801c78e:	f89d 603c 	ldrb.w	r6, [sp, #60]	; 0x3c
 801c792:	eb02 0a0c 	add.w	sl, r2, ip
 801c796:	8808      	ldrh	r0, [r1, #0]
 801c798:	f2c0 80b0 	blt.w	801c8fc <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
 801c79c:	45ab      	cmp	fp, r5
 801c79e:	f340 80ad 	ble.w	801c8fc <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
 801c7a2:	2c00      	cmp	r4, #0
 801c7a4:	f2c0 80a8 	blt.w	801c8f8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
 801c7a8:	45a6      	cmp	lr, r4
 801c7aa:	f340 80a5 	ble.w	801c8f8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
 801c7ae:	f812 200c 	ldrb.w	r2, [r2, ip]
 801c7b2:	f833 8012 	ldrh.w	r8, [r3, r2, lsl #1]
 801c7b6:	1c62      	adds	r2, r4, #1
 801c7b8:	f100 80a3 	bmi.w	801c902 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 801c7bc:	4596      	cmp	lr, r2
 801c7be:	f340 80a0 	ble.w	801c902 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 801c7c2:	f1b9 0f00 	cmp.w	r9, #0
 801c7c6:	f000 809c 	beq.w	801c902 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 801c7ca:	f89a 2001 	ldrb.w	r2, [sl, #1]
 801c7ce:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 801c7d2:	3501      	adds	r5, #1
 801c7d4:	f100 8099 	bmi.w	801c90a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 801c7d8:	45ab      	cmp	fp, r5
 801c7da:	f340 8096 	ble.w	801c90a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 801c7de:	2f00      	cmp	r7, #0
 801c7e0:	f000 8093 	beq.w	801c90a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 801c7e4:	2c00      	cmp	r4, #0
 801c7e6:	f2c0 808e 	blt.w	801c906 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
 801c7ea:	45a6      	cmp	lr, r4
 801c7ec:	f340 808b 	ble.w	801c906 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
 801c7f0:	f81a 200e 	ldrb.w	r2, [sl, lr]
 801c7f4:	f833 5012 	ldrh.w	r5, [r3, r2, lsl #1]
 801c7f8:	3401      	adds	r4, #1
 801c7fa:	f100 8089 	bmi.w	801c910 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 801c7fe:	45a6      	cmp	lr, r4
 801c800:	f340 8086 	ble.w	801c910 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 801c804:	f1b9 0f00 	cmp.w	r9, #0
 801c808:	f000 8082 	beq.w	801c910 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 801c80c:	44d6      	add	lr, sl
 801c80e:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801c812:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801c816:	ea4f 4408 	mov.w	r4, r8, lsl #16
 801c81a:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 801c81e:	fb19 fe07 	smulbb	lr, r9, r7
 801c822:	f1c7 0210 	rsb	r2, r7, #16
 801c826:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 801c82a:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 801c82e:	eba2 0209 	sub.w	r2, r2, r9
 801c832:	ea44 0808 	orr.w	r8, r4, r8
 801c836:	ea4f 440c 	mov.w	r4, ip, lsl #16
 801c83a:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801c83e:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 801c842:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 801c846:	ebce 0747 	rsb	r7, lr, r7, lsl #1
 801c84a:	ea44 0c0c 	orr.w	ip, r4, ip
 801c84e:	ebce 0449 	rsb	r4, lr, r9, lsl #1
 801c852:	fb04 f40c 	mul.w	r4, r4, ip
 801c856:	fb02 4808 	mla	r8, r2, r8, r4
 801c85a:	041a      	lsls	r2, r3, #16
 801c85c:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801c860:	b2b4      	uxth	r4, r6
 801c862:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801c866:	43f6      	mvns	r6, r6
 801c868:	4313      	orrs	r3, r2
 801c86a:	042a      	lsls	r2, r5, #16
 801c86c:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 801c870:	b2f6      	uxtb	r6, r6
 801c872:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801c876:	fb0e 8303 	mla	r3, lr, r3, r8
 801c87a:	432a      	orrs	r2, r5
 801c87c:	fb07 3202 	mla	r2, r7, r2, r3
 801c880:	10c7      	asrs	r7, r0, #3
 801c882:	0d53      	lsrs	r3, r2, #21
 801c884:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801c888:	0952      	lsrs	r2, r2, #5
 801c88a:	fb17 f706 	smulbb	r7, r7, r6
 801c88e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801c892:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801c896:	431a      	orrs	r2, r3
 801c898:	b293      	uxth	r3, r2
 801c89a:	1202      	asrs	r2, r0, #8
 801c89c:	121d      	asrs	r5, r3, #8
 801c89e:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801c8a2:	00c0      	lsls	r0, r0, #3
 801c8a4:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801c8a8:	fb12 f206 	smulbb	r2, r2, r6
 801c8ac:	b2c0      	uxtb	r0, r0
 801c8ae:	fb05 2504 	mla	r5, r5, r4, r2
 801c8b2:	10da      	asrs	r2, r3, #3
 801c8b4:	fb10 f006 	smulbb	r0, r0, r6
 801c8b8:	00db      	lsls	r3, r3, #3
 801c8ba:	b2ad      	uxth	r5, r5
 801c8bc:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801c8c0:	b2db      	uxtb	r3, r3
 801c8c2:	fb02 7204 	mla	r2, r2, r4, r7
 801c8c6:	fb03 0004 	mla	r0, r3, r4, r0
 801c8ca:	1c6b      	adds	r3, r5, #1
 801c8cc:	b292      	uxth	r2, r2
 801c8ce:	b280      	uxth	r0, r0
 801c8d0:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801c8d4:	1c43      	adds	r3, r0, #1
 801c8d6:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801c8da:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801c8de:	1c50      	adds	r0, r2, #1
 801c8e0:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801c8e4:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801c8e8:	0952      	lsrs	r2, r2, #5
 801c8ea:	432b      	orrs	r3, r5
 801c8ec:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801c8f0:	4313      	orrs	r3, r2
 801c8f2:	800b      	strh	r3, [r1, #0]
 801c8f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c8f8:	4680      	mov	r8, r0
 801c8fa:	e75c      	b.n	801c7b6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x46>
 801c8fc:	4684      	mov	ip, r0
 801c8fe:	4680      	mov	r8, r0
 801c900:	e767      	b.n	801c7d2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
 801c902:	4684      	mov	ip, r0
 801c904:	e765      	b.n	801c7d2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
 801c906:	4605      	mov	r5, r0
 801c908:	e776      	b.n	801c7f8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x88>
 801c90a:	4603      	mov	r3, r0
 801c90c:	4605      	mov	r5, r0
 801c90e:	e782      	b.n	801c816 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 801c910:	4603      	mov	r3, r0
 801c912:	e780      	b.n	801c816 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>

0801c914 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c918:	b099      	sub	sp, #100	; 0x64
 801c91a:	9215      	str	r2, [sp, #84]	; 0x54
 801c91c:	9309      	str	r3, [sp, #36]	; 0x24
 801c91e:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801c920:	f89d 30ac 	ldrb.w	r3, [sp, #172]	; 0xac
 801c924:	9016      	str	r0, [sp, #88]	; 0x58
 801c926:	930d      	str	r3, [sp, #52]	; 0x34
 801c928:	6850      	ldr	r0, [r2, #4]
 801c92a:	910c      	str	r1, [sp, #48]	; 0x30
 801c92c:	6812      	ldr	r2, [r2, #0]
 801c92e:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
 801c932:	e9dd a523 	ldrd	sl, r5, [sp, #140]	; 0x8c
 801c936:	fb00 1303 	mla	r3, r0, r3, r1
 801c93a:	eb02 0843 	add.w	r8, r2, r3, lsl #1
 801c93e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801c940:	681b      	ldr	r3, [r3, #0]
 801c942:	930b      	str	r3, [sp, #44]	; 0x2c
 801c944:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801c946:	685e      	ldr	r6, [r3, #4]
 801c948:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c94a:	3604      	adds	r6, #4
 801c94c:	43db      	mvns	r3, r3
 801c94e:	b2db      	uxtb	r3, r3
 801c950:	930a      	str	r3, [sp, #40]	; 0x28
 801c952:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c954:	2b00      	cmp	r3, #0
 801c956:	dc03      	bgt.n	801c960 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801c958:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c95a:	2b00      	cmp	r3, #0
 801c95c:	f340 8225 	ble.w	801cdaa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 801c960:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801c962:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801c966:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801c96a:	1e48      	subs	r0, r1, #1
 801c96c:	1e57      	subs	r7, r2, #1
 801c96e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c970:	2b00      	cmp	r3, #0
 801c972:	f340 80e3 	ble.w	801cb3c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801c976:	ea5f 4c2a 	movs.w	ip, sl, asr #16
 801c97a:	ea4f 4325 	mov.w	r3, r5, asr #16
 801c97e:	d406      	bmi.n	801c98e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801c980:	4584      	cmp	ip, r0
 801c982:	da04      	bge.n	801c98e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801c984:	2b00      	cmp	r3, #0
 801c986:	db02      	blt.n	801c98e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801c988:	42bb      	cmp	r3, r7
 801c98a:	f2c0 80d8 	blt.w	801cb3e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801c98e:	f11c 0c01 	adds.w	ip, ip, #1
 801c992:	f100 80c9 	bmi.w	801cb28 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801c996:	4561      	cmp	r1, ip
 801c998:	f2c0 80c6 	blt.w	801cb28 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801c99c:	3301      	adds	r3, #1
 801c99e:	f100 80c3 	bmi.w	801cb28 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801c9a2:	429a      	cmp	r2, r3
 801c9a4:	f2c0 80c0 	blt.w	801cb28 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801c9a8:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 801c9ac:	4647      	mov	r7, r8
 801c9ae:	f1bb 0f00 	cmp.w	fp, #0
 801c9b2:	f340 80e3 	ble.w	801cb7c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 801c9b6:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801c9b8:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801c9bc:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801c9be:	f3ca 3003 	ubfx	r0, sl, #12, #4
 801c9c2:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 801c9c6:	ea5f 422a 	movs.w	r2, sl, asr #16
 801c9ca:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801c9ce:	689b      	ldr	r3, [r3, #8]
 801c9d0:	f100 8121 	bmi.w	801cc16 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 801c9d4:	f103 39ff 	add.w	r9, r3, #4294967295
 801c9d8:	454a      	cmp	r2, r9
 801c9da:	f280 811c 	bge.w	801cc16 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 801c9de:	f1bc 0f00 	cmp.w	ip, #0
 801c9e2:	f2c0 8118 	blt.w	801cc16 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 801c9e6:	f10e 39ff 	add.w	r9, lr, #4294967295
 801c9ea:	45cc      	cmp	ip, r9
 801c9ec:	f280 8113 	bge.w	801cc16 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 801c9f0:	b21b      	sxth	r3, r3
 801c9f2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801c9f4:	fb0c 2203 	mla	r2, ip, r3, r2
 801c9f8:	eb04 0902 	add.w	r9, r4, r2
 801c9fc:	5ca2      	ldrb	r2, [r4, r2]
 801c9fe:	f836 e012 	ldrh.w	lr, [r6, r2, lsl #1]
 801ca02:	2800      	cmp	r0, #0
 801ca04:	f000 80fe 	beq.w	801cc04 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 801ca08:	f899 2001 	ldrb.w	r2, [r9, #1]
 801ca0c:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 801ca10:	9211      	str	r2, [sp, #68]	; 0x44
 801ca12:	b151      	cbz	r1, 801ca2a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801ca14:	eb09 0203 	add.w	r2, r9, r3
 801ca18:	f819 3003 	ldrb.w	r3, [r9, r3]
 801ca1c:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801ca20:	930f      	str	r3, [sp, #60]	; 0x3c
 801ca22:	7853      	ldrb	r3, [r2, #1]
 801ca24:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801ca28:	9312      	str	r3, [sp, #72]	; 0x48
 801ca2a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801ca2c:	fb10 f201 	smulbb	r2, r0, r1
 801ca30:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801ca32:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801ca36:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801ca3a:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 801ca3e:	10d2      	asrs	r2, r2, #3
 801ca40:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801ca44:	ebc2 0940 	rsb	r9, r2, r0, lsl #1
 801ca48:	ea4c 0c03 	orr.w	ip, ip, r3
 801ca4c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801ca4e:	041b      	lsls	r3, r3, #16
 801ca50:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801ca54:	4323      	orrs	r3, r4
 801ca56:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801ca58:	4353      	muls	r3, r2
 801ca5a:	fb09 330c 	mla	r3, r9, ip, r3
 801ca5e:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 801ca62:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801ca66:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801ca6a:	ea4c 0e0e 	orr.w	lr, ip, lr
 801ca6e:	f1c1 0c10 	rsb	ip, r1, #16
 801ca72:	ebac 0c00 	sub.w	ip, ip, r0
 801ca76:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801ca7a:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 801ca7e:	fb0c 3c0e 	mla	ip, ip, lr, r3
 801ca82:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ca84:	0418      	lsls	r0, r3, #16
 801ca86:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801ca8a:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801ca8e:	4318      	orrs	r0, r3
 801ca90:	fb02 c200 	mla	r2, r2, r0, ip
 801ca94:	8838      	ldrh	r0, [r7, #0]
 801ca96:	0d53      	lsrs	r3, r2, #21
 801ca98:	0952      	lsrs	r2, r2, #5
 801ca9a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801ca9e:	1201      	asrs	r1, r0, #8
 801caa0:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801caa4:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 801caa8:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801caac:	00c0      	lsls	r0, r0, #3
 801caae:	431a      	orrs	r2, r3
 801cab0:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 801cab4:	fb11 f104 	smulbb	r1, r1, r4
 801cab8:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 801cabc:	b292      	uxth	r2, r2
 801cabe:	fb1e fe04 	smulbb	lr, lr, r4
 801cac2:	b2c0      	uxtb	r0, r0
 801cac4:	ea4f 2c22 	mov.w	ip, r2, asr #8
 801cac8:	fb10 f004 	smulbb	r0, r0, r4
 801cacc:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801cad0:	fb0c 1c03 	mla	ip, ip, r3, r1
 801cad4:	10d1      	asrs	r1, r2, #3
 801cad6:	00d2      	lsls	r2, r2, #3
 801cad8:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801cadc:	fa1f fc8c 	uxth.w	ip, ip
 801cae0:	b2d2      	uxtb	r2, r2
 801cae2:	fb01 e103 	mla	r1, r1, r3, lr
 801cae6:	fb02 0303 	mla	r3, r2, r3, r0
 801caea:	b289      	uxth	r1, r1
 801caec:	b29a      	uxth	r2, r3
 801caee:	f10c 0301 	add.w	r3, ip, #1
 801caf2:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801caf6:	1c53      	adds	r3, r2, #1
 801caf8:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801cafc:	1c4a      	adds	r2, r1, #1
 801cafe:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801cb02:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801cb06:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801cb0a:	0949      	lsrs	r1, r1, #5
 801cb0c:	ea43 030c 	orr.w	r3, r3, ip
 801cb10:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801cb14:	430b      	orrs	r3, r1
 801cb16:	803b      	strh	r3, [r7, #0]
 801cb18:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801cb1a:	3702      	adds	r7, #2
 801cb1c:	f10b 3bff 	add.w	fp, fp, #4294967295
 801cb20:	449a      	add	sl, r3
 801cb22:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801cb24:	441d      	add	r5, r3
 801cb26:	e742      	b.n	801c9ae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801cb28:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801cb2a:	f108 0802 	add.w	r8, r8, #2
 801cb2e:	449a      	add	sl, r3
 801cb30:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801cb32:	441d      	add	r5, r3
 801cb34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cb36:	3b01      	subs	r3, #1
 801cb38:	9309      	str	r3, [sp, #36]	; 0x24
 801cb3a:	e718      	b.n	801c96e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801cb3c:	d023      	beq.n	801cb86 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 801cb3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cb40:	9825      	ldr	r0, [sp, #148]	; 0x94
 801cb42:	3b01      	subs	r3, #1
 801cb44:	fb00 a003 	mla	r0, r0, r3, sl
 801cb48:	1400      	asrs	r0, r0, #16
 801cb4a:	f53f af2d 	bmi.w	801c9a8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801cb4e:	3901      	subs	r1, #1
 801cb50:	4288      	cmp	r0, r1
 801cb52:	f6bf af29 	bge.w	801c9a8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801cb56:	9926      	ldr	r1, [sp, #152]	; 0x98
 801cb58:	fb01 5303 	mla	r3, r1, r3, r5
 801cb5c:	141b      	asrs	r3, r3, #16
 801cb5e:	f53f af23 	bmi.w	801c9a8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801cb62:	3a01      	subs	r2, #1
 801cb64:	4293      	cmp	r3, r2
 801cb66:	f6bf af1f 	bge.w	801c9a8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801cb6a:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 801cb6e:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
 801cb72:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801cb76:	f1be 0f00 	cmp.w	lr, #0
 801cb7a:	dc6c      	bgt.n	801cc56 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 801cb7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cb7e:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801cb82:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 801cb86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801cb88:	2b00      	cmp	r3, #0
 801cb8a:	f340 810e 	ble.w	801cdaa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 801cb8e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801cb92:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801cb94:	ee30 0a04 	vadd.f32	s0, s0, s8
 801cb98:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801cb9c:	eef0 6a62 	vmov.f32	s13, s5
 801cba0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801cba4:	ee31 1a05 	vadd.f32	s2, s2, s10
 801cba8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801cbac:	ee16 aa90 	vmov	sl, s13
 801cbb0:	eef0 6a43 	vmov.f32	s13, s6
 801cbb4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801cbb8:	ee16 5a90 	vmov	r5, s13
 801cbbc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801cbc0:	ee61 7a27 	vmul.f32	s15, s2, s15
 801cbc4:	ee77 2a62 	vsub.f32	s5, s14, s5
 801cbc8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801cbcc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801cbd0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801cbd4:	ee12 2a90 	vmov	r2, s5
 801cbd8:	eef0 2a47 	vmov.f32	s5, s14
 801cbdc:	fb92 f3f3 	sdiv	r3, r2, r3
 801cbe0:	ee13 2a10 	vmov	r2, s6
 801cbe4:	9325      	str	r3, [sp, #148]	; 0x94
 801cbe6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801cbe8:	eeb0 3a67 	vmov.f32	s6, s15
 801cbec:	fb92 f3f3 	sdiv	r3, r2, r3
 801cbf0:	9326      	str	r3, [sp, #152]	; 0x98
 801cbf2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801cbf4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801cbf6:	3b01      	subs	r3, #1
 801cbf8:	930c      	str	r3, [sp, #48]	; 0x30
 801cbfa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801cbfc:	bf08      	it	eq
 801cbfe:	4613      	moveq	r3, r2
 801cc00:	9309      	str	r3, [sp, #36]	; 0x24
 801cc02:	e6a6      	b.n	801c952 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801cc04:	2900      	cmp	r1, #0
 801cc06:	f43f af10 	beq.w	801ca2a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801cc0a:	f819 3003 	ldrb.w	r3, [r9, r3]
 801cc0e:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801cc12:	930f      	str	r3, [sp, #60]	; 0x3c
 801cc14:	e709      	b.n	801ca2a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801cc16:	f112 0901 	adds.w	r9, r2, #1
 801cc1a:	f53f af7d 	bmi.w	801cb18 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801cc1e:	454b      	cmp	r3, r9
 801cc20:	f6ff af7a 	blt.w	801cb18 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801cc24:	f11c 0901 	adds.w	r9, ip, #1
 801cc28:	f53f af76 	bmi.w	801cb18 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801cc2c:	45ce      	cmp	lr, r9
 801cc2e:	f6ff af73 	blt.w	801cb18 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801cc32:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801cc34:	b21b      	sxth	r3, r3
 801cc36:	9202      	str	r2, [sp, #8]
 801cc38:	fa0f f28e 	sxth.w	r2, lr
 801cc3c:	9300      	str	r3, [sp, #0]
 801cc3e:	4633      	mov	r3, r6
 801cc40:	9201      	str	r2, [sp, #4]
 801cc42:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801cc44:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801cc48:	e9cd c003 	strd	ip, r0, [sp, #12]
 801cc4c:	4639      	mov	r1, r7
 801cc4e:	9816      	ldr	r0, [sp, #88]	; 0x58
 801cc50:	f7ff fd8e 	bl	801c770 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>
 801cc54:	e760      	b.n	801cb18 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801cc56:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801cc58:	ea4f 422a 	mov.w	r2, sl, asr #16
 801cc5c:	1429      	asrs	r1, r5, #16
 801cc5e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801cc60:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801cc64:	f3ca 3c03 	ubfx	ip, sl, #12, #4
 801cc68:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801cc6c:	fb03 2101 	mla	r1, r3, r1, r2
 801cc70:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801cc72:	440a      	add	r2, r1
 801cc74:	5c61      	ldrb	r1, [r4, r1]
 801cc76:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
 801cc7a:	f1bc 0f00 	cmp.w	ip, #0
 801cc7e:	f000 808c 	beq.w	801cd9a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
 801cc82:	7857      	ldrb	r7, [r2, #1]
 801cc84:	f836 4017 	ldrh.w	r4, [r6, r7, lsl #1]
 801cc88:	9413      	str	r4, [sp, #76]	; 0x4c
 801cc8a:	b140      	cbz	r0, 801cc9e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801cc8c:	18d7      	adds	r7, r2, r3
 801cc8e:	5cd3      	ldrb	r3, [r2, r3]
 801cc90:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801cc94:	9310      	str	r3, [sp, #64]	; 0x40
 801cc96:	787b      	ldrb	r3, [r7, #1]
 801cc98:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801cc9c:	9314      	str	r3, [sp, #80]	; 0x50
 801cc9e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801cca0:	fb1c f200 	smulbb	r2, ip, r0
 801cca4:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801cca6:	f10e 3eff 	add.w	lr, lr, #4294967295
 801ccaa:	041f      	lsls	r7, r3, #16
 801ccac:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801ccb0:	10d2      	asrs	r2, r2, #3
 801ccb2:	f424 6bfc 	bic.w	fp, r4, #2016	; 0x7e0
 801ccb6:	f007 67fc 	and.w	r7, r7, #132120576	; 0x7e00000
 801ccba:	431f      	orrs	r7, r3
 801ccbc:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
 801ccc0:	9317      	str	r3, [sp, #92]	; 0x5c
 801ccc2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801ccc4:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801ccc6:	041b      	lsls	r3, r3, #16
 801ccc8:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801cccc:	ea43 030b 	orr.w	r3, r3, fp
 801ccd0:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 801ccd4:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801ccd8:	4353      	muls	r3, r2
 801ccda:	fb04 3707 	mla	r7, r4, r7, r3
 801ccde:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 801cce2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801cce4:	ea43 0b01 	orr.w	fp, r3, r1
 801cce8:	f1c0 0110 	rsb	r1, r0, #16
 801ccec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ccee:	eba1 0c0c 	sub.w	ip, r1, ip
 801ccf2:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801ccf6:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 801ccfa:	fb0c 770b 	mla	r7, ip, fp, r7
 801ccfe:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801cd02:	f423 6bfc 	bic.w	fp, r3, #2016	; 0x7e0
 801cd06:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801cd0a:	ea4c 0c0b 	orr.w	ip, ip, fp
 801cd0e:	fb02 770c 	mla	r7, r2, ip, r7
 801cd12:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801cd14:	0d79      	lsrs	r1, r7, #21
 801cd16:	8812      	ldrh	r2, [r2, #0]
 801cd18:	097f      	lsrs	r7, r7, #5
 801cd1a:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801cd1e:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801cd22:	430f      	orrs	r7, r1
 801cd24:	1211      	asrs	r1, r2, #8
 801cd26:	b2bb      	uxth	r3, r7
 801cd28:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801cd2c:	10d7      	asrs	r7, r2, #3
 801cd2e:	fb11 f104 	smulbb	r1, r1, r4
 801cd32:	1218      	asrs	r0, r3, #8
 801cd34:	00d2      	lsls	r2, r2, #3
 801cd36:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801cd3a:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801cd3e:	fb17 f704 	smulbb	r7, r7, r4
 801cd42:	b2d2      	uxtb	r2, r2
 801cd44:	fb00 1009 	mla	r0, r0, r9, r1
 801cd48:	10d9      	asrs	r1, r3, #3
 801cd4a:	fb12 f204 	smulbb	r2, r2, r4
 801cd4e:	00db      	lsls	r3, r3, #3
 801cd50:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801cd54:	b280      	uxth	r0, r0
 801cd56:	b2db      	uxtb	r3, r3
 801cd58:	fb01 7109 	mla	r1, r1, r9, r7
 801cd5c:	fb03 2309 	mla	r3, r3, r9, r2
 801cd60:	1c42      	adds	r2, r0, #1
 801cd62:	b289      	uxth	r1, r1
 801cd64:	b29b      	uxth	r3, r3
 801cd66:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801cd6a:	1c4f      	adds	r7, r1, #1
 801cd6c:	1c5a      	adds	r2, r3, #1
 801cd6e:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 801cd72:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801cd76:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801cd7a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cd7c:	0949      	lsrs	r1, r1, #5
 801cd7e:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801cd82:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801cd86:	4310      	orrs	r0, r2
 801cd88:	4308      	orrs	r0, r1
 801cd8a:	f823 0b02 	strh.w	r0, [r3], #2
 801cd8e:	930e      	str	r3, [sp, #56]	; 0x38
 801cd90:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801cd92:	449a      	add	sl, r3
 801cd94:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801cd96:	441d      	add	r5, r3
 801cd98:	e6ed      	b.n	801cb76 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x262>
 801cd9a:	2800      	cmp	r0, #0
 801cd9c:	f43f af7f 	beq.w	801cc9e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801cda0:	5cd3      	ldrb	r3, [r2, r3]
 801cda2:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801cda6:	9310      	str	r3, [sp, #64]	; 0x40
 801cda8:	e779      	b.n	801cc9e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801cdaa:	b019      	add	sp, #100	; 0x64
 801cdac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801cdb0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 801cdb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cdb4:	e9dd 480a 	ldrd	r4, r8, [sp, #40]	; 0x28
 801cdb8:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 801cdbc:	f1b8 0f00 	cmp.w	r8, #0
 801cdc0:	f9bd a024 	ldrsh.w	sl, [sp, #36]	; 0x24
 801cdc4:	fb08 470e 	mla	r7, r8, lr, r4
 801cdc8:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 801cdcc:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 801cdd0:	eb02 0907 	add.w	r9, r2, r7
 801cdd4:	8808      	ldrh	r0, [r1, #0]
 801cdd6:	db67      	blt.n	801cea8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
 801cdd8:	45c2      	cmp	sl, r8
 801cdda:	dd65      	ble.n	801cea8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
 801cddc:	2c00      	cmp	r4, #0
 801cdde:	db61      	blt.n	801cea4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
 801cde0:	45a6      	cmp	lr, r4
 801cde2:	dd5f      	ble.n	801cea4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
 801cde4:	5dd2      	ldrb	r2, [r2, r7]
 801cde6:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 801cdea:	1c62      	adds	r2, r4, #1
 801cdec:	d45f      	bmi.n	801ceae <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 801cdee:	4596      	cmp	lr, r2
 801cdf0:	dd5d      	ble.n	801ceae <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 801cdf2:	2d00      	cmp	r5, #0
 801cdf4:	d05b      	beq.n	801ceae <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 801cdf6:	f899 2001 	ldrb.w	r2, [r9, #1]
 801cdfa:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 801cdfe:	f118 0801 	adds.w	r8, r8, #1
 801ce02:	d458      	bmi.n	801ceb6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 801ce04:	45c2      	cmp	sl, r8
 801ce06:	dd56      	ble.n	801ceb6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 801ce08:	2e00      	cmp	r6, #0
 801ce0a:	d054      	beq.n	801ceb6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 801ce0c:	2c00      	cmp	r4, #0
 801ce0e:	db50      	blt.n	801ceb2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
 801ce10:	45a6      	cmp	lr, r4
 801ce12:	dd4e      	ble.n	801ceb2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
 801ce14:	f819 200e 	ldrb.w	r2, [r9, lr]
 801ce18:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 801ce1c:	3401      	adds	r4, #1
 801ce1e:	d407      	bmi.n	801ce30 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 801ce20:	45a6      	cmp	lr, r4
 801ce22:	dd05      	ble.n	801ce30 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 801ce24:	b125      	cbz	r5, 801ce30 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 801ce26:	44ce      	add	lr, r9
 801ce28:	f89e 0001 	ldrb.w	r0, [lr, #1]
 801ce2c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 801ce30:	fb15 f406 	smulbb	r4, r5, r6
 801ce34:	ea4f 430c 	mov.w	r3, ip, lsl #16
 801ce38:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 801ce3c:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801ce40:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801ce44:	f3c4 04c7 	ubfx	r4, r4, #3, #8
 801ce48:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 801ce4c:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801ce50:	ea43 0c0c 	orr.w	ip, r3, ip
 801ce54:	f1c6 0310 	rsb	r3, r6, #16
 801ce58:	ea4e 0707 	orr.w	r7, lr, r7
 801ce5c:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
 801ce60:	1b5b      	subs	r3, r3, r5
 801ce62:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
 801ce66:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801ce6a:	437d      	muls	r5, r7
 801ce6c:	fb03 5c0c 	mla	ip, r3, ip, r5
 801ce70:	0403      	lsls	r3, r0, #16
 801ce72:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801ce76:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801ce7a:	4318      	orrs	r0, r3
 801ce7c:	0413      	lsls	r3, r2, #16
 801ce7e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801ce82:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801ce86:	fb04 c000 	mla	r0, r4, r0, ip
 801ce8a:	4313      	orrs	r3, r2
 801ce8c:	fb06 0003 	mla	r0, r6, r3, r0
 801ce90:	0d43      	lsrs	r3, r0, #21
 801ce92:	0940      	lsrs	r0, r0, #5
 801ce94:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801ce98:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801ce9c:	4318      	orrs	r0, r3
 801ce9e:	8008      	strh	r0, [r1, #0]
 801cea0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cea4:	4684      	mov	ip, r0
 801cea6:	e7a0      	b.n	801cdea <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x3a>
 801cea8:	4607      	mov	r7, r0
 801ceaa:	4684      	mov	ip, r0
 801ceac:	e7a7      	b.n	801cdfe <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
 801ceae:	4607      	mov	r7, r0
 801ceb0:	e7a5      	b.n	801cdfe <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
 801ceb2:	4602      	mov	r2, r0
 801ceb4:	e7b2      	b.n	801ce1c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x6c>
 801ceb6:	4602      	mov	r2, r0
 801ceb8:	e7ba      	b.n	801ce30 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>

0801ceba <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ceba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cebe:	b093      	sub	sp, #76	; 0x4c
 801cec0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801cec4:	920f      	str	r2, [sp, #60]	; 0x3c
 801cec6:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801cec8:	9010      	str	r0, [sp, #64]	; 0x40
 801ceca:	9108      	str	r1, [sp, #32]
 801cecc:	6850      	ldr	r0, [r2, #4]
 801cece:	9306      	str	r3, [sp, #24]
 801ced0:	6812      	ldr	r2, [r2, #0]
 801ced2:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 801ced6:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 801ceda:	fb00 1303 	mla	r3, r0, r3, r1
 801cede:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 801cee2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801cee4:	681b      	ldr	r3, [r3, #0]
 801cee6:	9307      	str	r3, [sp, #28]
 801cee8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801ceea:	685f      	ldr	r7, [r3, #4]
 801ceec:	3704      	adds	r7, #4
 801ceee:	9b08      	ldr	r3, [sp, #32]
 801cef0:	2b00      	cmp	r3, #0
 801cef2:	dc03      	bgt.n	801cefc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801cef4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801cef6:	2b00      	cmp	r3, #0
 801cef8:	f340 81b2 	ble.w	801d260 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 801cefc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801cefe:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801cf02:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801cf06:	1e48      	subs	r0, r1, #1
 801cf08:	f102 3cff 	add.w	ip, r2, #4294967295
 801cf0c:	9b06      	ldr	r3, [sp, #24]
 801cf0e:	2b00      	cmp	r3, #0
 801cf10:	f340 80a9 	ble.w	801d066 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801cf14:	ea5f 4e24 	movs.w	lr, r4, asr #16
 801cf18:	ea4f 4326 	mov.w	r3, r6, asr #16
 801cf1c:	d406      	bmi.n	801cf2c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801cf1e:	4586      	cmp	lr, r0
 801cf20:	da04      	bge.n	801cf2c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801cf22:	2b00      	cmp	r3, #0
 801cf24:	db02      	blt.n	801cf2c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801cf26:	4563      	cmp	r3, ip
 801cf28:	f2c0 809e 	blt.w	801d068 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 801cf2c:	f11e 0e01 	adds.w	lr, lr, #1
 801cf30:	f100 808f 	bmi.w	801d052 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801cf34:	4571      	cmp	r1, lr
 801cf36:	f2c0 808c 	blt.w	801d052 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801cf3a:	3301      	adds	r3, #1
 801cf3c:	f100 8089 	bmi.w	801d052 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801cf40:	429a      	cmp	r2, r3
 801cf42:	f2c0 8086 	blt.w	801d052 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801cf46:	f8dd b018 	ldr.w	fp, [sp, #24]
 801cf4a:	46c8      	mov	r8, r9
 801cf4c:	f1bb 0f00 	cmp.w	fp, #0
 801cf50:	f340 80a6 	ble.w	801d0a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801cf54:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801cf56:	ea4f 4c26 	mov.w	ip, r6, asr #16
 801cf5a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801cf5c:	f3c4 3003 	ubfx	r0, r4, #12, #4
 801cf60:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 801cf64:	1422      	asrs	r2, r4, #16
 801cf66:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801cf6a:	689b      	ldr	r3, [r3, #8]
 801cf6c:	f100 80e3 	bmi.w	801d136 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801cf70:	f103 3aff 	add.w	sl, r3, #4294967295
 801cf74:	4552      	cmp	r2, sl
 801cf76:	f280 80de 	bge.w	801d136 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801cf7a:	f1bc 0f00 	cmp.w	ip, #0
 801cf7e:	f2c0 80da 	blt.w	801d136 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801cf82:	f10e 3aff 	add.w	sl, lr, #4294967295
 801cf86:	45d4      	cmp	ip, sl
 801cf88:	f280 80d5 	bge.w	801d136 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801cf8c:	b21b      	sxth	r3, r3
 801cf8e:	9d07      	ldr	r5, [sp, #28]
 801cf90:	fb0c 2203 	mla	r2, ip, r3, r2
 801cf94:	eb05 0a02 	add.w	sl, r5, r2
 801cf98:	5caa      	ldrb	r2, [r5, r2]
 801cf9a:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
 801cf9e:	2800      	cmp	r0, #0
 801cfa0:	f000 80c0 	beq.w	801d124 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801cfa4:	f89a 2001 	ldrb.w	r2, [sl, #1]
 801cfa8:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 801cfac:	920b      	str	r2, [sp, #44]	; 0x2c
 801cfae:	b151      	cbz	r1, 801cfc6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 801cfb0:	eb0a 0203 	add.w	r2, sl, r3
 801cfb4:	f81a 3003 	ldrb.w	r3, [sl, r3]
 801cfb8:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801cfbc:	9309      	str	r3, [sp, #36]	; 0x24
 801cfbe:	7853      	ldrb	r3, [r2, #1]
 801cfc0:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801cfc4:	930c      	str	r3, [sp, #48]	; 0x30
 801cfc6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801cfc8:	fb10 f201 	smulbb	r2, r0, r1
 801cfcc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801cfce:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801cfd2:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801cfd6:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 801cfda:	10d2      	asrs	r2, r2, #3
 801cfdc:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801cfe0:	ebc2 0a40 	rsb	sl, r2, r0, lsl #1
 801cfe4:	ea4c 0c03 	orr.w	ip, ip, r3
 801cfe8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801cfea:	041b      	lsls	r3, r3, #16
 801cfec:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801cff0:	432b      	orrs	r3, r5
 801cff2:	4353      	muls	r3, r2
 801cff4:	fb0a 330c 	mla	r3, sl, ip, r3
 801cff8:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 801cffc:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801d000:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801d004:	ea4c 0e0e 	orr.w	lr, ip, lr
 801d008:	f1c1 0c10 	rsb	ip, r1, #16
 801d00c:	ebac 0c00 	sub.w	ip, ip, r0
 801d010:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801d014:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 801d018:	fb0c 3c0e 	mla	ip, ip, lr, r3
 801d01c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d01e:	0418      	lsls	r0, r3, #16
 801d020:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801d024:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801d028:	4318      	orrs	r0, r3
 801d02a:	fb02 c200 	mla	r2, r2, r0, ip
 801d02e:	0d53      	lsrs	r3, r2, #21
 801d030:	0952      	lsrs	r2, r2, #5
 801d032:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801d036:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801d03a:	431a      	orrs	r2, r3
 801d03c:	f8a8 2000 	strh.w	r2, [r8]
 801d040:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801d042:	f108 0802 	add.w	r8, r8, #2
 801d046:	f10b 3bff 	add.w	fp, fp, #4294967295
 801d04a:	441c      	add	r4, r3
 801d04c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801d04e:	441e      	add	r6, r3
 801d050:	e77c      	b.n	801cf4c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801d052:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801d054:	f109 0902 	add.w	r9, r9, #2
 801d058:	441c      	add	r4, r3
 801d05a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801d05c:	441e      	add	r6, r3
 801d05e:	9b06      	ldr	r3, [sp, #24]
 801d060:	3b01      	subs	r3, #1
 801d062:	9306      	str	r3, [sp, #24]
 801d064:	e752      	b.n	801cf0c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801d066:	d020      	beq.n	801d0aa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801d068:	9b06      	ldr	r3, [sp, #24]
 801d06a:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801d06c:	3b01      	subs	r3, #1
 801d06e:	fb00 4003 	mla	r0, r0, r3, r4
 801d072:	1400      	asrs	r0, r0, #16
 801d074:	f53f af67 	bmi.w	801cf46 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801d078:	3901      	subs	r1, #1
 801d07a:	4288      	cmp	r0, r1
 801d07c:	f6bf af63 	bge.w	801cf46 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801d080:	9920      	ldr	r1, [sp, #128]	; 0x80
 801d082:	fb01 6303 	mla	r3, r1, r3, r6
 801d086:	141b      	asrs	r3, r3, #16
 801d088:	f53f af5d 	bmi.w	801cf46 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801d08c:	3a01      	subs	r2, #1
 801d08e:	4293      	cmp	r3, r2
 801d090:	f6bf af59 	bge.w	801cf46 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801d094:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801d098:	46ca      	mov	sl, r9
 801d09a:	f1b8 0f00 	cmp.w	r8, #0
 801d09e:	dc67      	bgt.n	801d170 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801d0a0:	9b06      	ldr	r3, [sp, #24]
 801d0a2:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 801d0a6:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 801d0aa:	9b08      	ldr	r3, [sp, #32]
 801d0ac:	2b00      	cmp	r3, #0
 801d0ae:	f340 80d7 	ble.w	801d260 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 801d0b2:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d0b6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801d0b8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d0bc:	eeb0 6a62 	vmov.f32	s12, s5
 801d0c0:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d0c4:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d0c8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d0cc:	ee16 4a10 	vmov	r4, s12
 801d0d0:	eeb0 6a43 	vmov.f32	s12, s6
 801d0d4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d0d8:	ee16 6a10 	vmov	r6, s12
 801d0dc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d0e0:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d0e4:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d0e8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d0ec:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d0f0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d0f4:	ee12 2a90 	vmov	r2, s5
 801d0f8:	eef0 2a47 	vmov.f32	s5, s14
 801d0fc:	fb92 f3f3 	sdiv	r3, r2, r3
 801d100:	ee13 2a10 	vmov	r2, s6
 801d104:	931f      	str	r3, [sp, #124]	; 0x7c
 801d106:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801d108:	eeb0 3a67 	vmov.f32	s6, s15
 801d10c:	fb92 f3f3 	sdiv	r3, r2, r3
 801d110:	9320      	str	r3, [sp, #128]	; 0x80
 801d112:	9b08      	ldr	r3, [sp, #32]
 801d114:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801d116:	3b01      	subs	r3, #1
 801d118:	9308      	str	r3, [sp, #32]
 801d11a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801d11c:	bf08      	it	eq
 801d11e:	4613      	moveq	r3, r2
 801d120:	9306      	str	r3, [sp, #24]
 801d122:	e6e4      	b.n	801ceee <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801d124:	2900      	cmp	r1, #0
 801d126:	f43f af4e 	beq.w	801cfc6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 801d12a:	f81a 3003 	ldrb.w	r3, [sl, r3]
 801d12e:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801d132:	9309      	str	r3, [sp, #36]	; 0x24
 801d134:	e747      	b.n	801cfc6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 801d136:	f112 0a01 	adds.w	sl, r2, #1
 801d13a:	d481      	bmi.n	801d040 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801d13c:	4553      	cmp	r3, sl
 801d13e:	f6ff af7f 	blt.w	801d040 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801d142:	f11c 0a01 	adds.w	sl, ip, #1
 801d146:	f53f af7b 	bmi.w	801d040 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801d14a:	45d6      	cmp	lr, sl
 801d14c:	f6ff af78 	blt.w	801d040 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801d150:	b21b      	sxth	r3, r3
 801d152:	e9cd 2c02 	strd	r2, ip, [sp, #8]
 801d156:	fa0f f28e 	sxth.w	r2, lr
 801d15a:	9300      	str	r3, [sp, #0]
 801d15c:	463b      	mov	r3, r7
 801d15e:	9201      	str	r2, [sp, #4]
 801d160:	9a07      	ldr	r2, [sp, #28]
 801d162:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801d166:	4641      	mov	r1, r8
 801d168:	9810      	ldr	r0, [sp, #64]	; 0x40
 801d16a:	f7ff fe21 	bl	801cdb0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 801d16e:	e767      	b.n	801d040 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801d170:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801d172:	1422      	asrs	r2, r4, #16
 801d174:	1431      	asrs	r1, r6, #16
 801d176:	9d07      	ldr	r5, [sp, #28]
 801d178:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801d17c:	f3c4 3e03 	ubfx	lr, r4, #12, #4
 801d180:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801d184:	fb03 2101 	mla	r1, r3, r1, r2
 801d188:	9a07      	ldr	r2, [sp, #28]
 801d18a:	440a      	add	r2, r1
 801d18c:	5c69      	ldrb	r1, [r5, r1]
 801d18e:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
 801d192:	f1be 0f00 	cmp.w	lr, #0
 801d196:	d05c      	beq.n	801d252 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x398>
 801d198:	f892 c001 	ldrb.w	ip, [r2, #1]
 801d19c:	f837 501c 	ldrh.w	r5, [r7, ip, lsl #1]
 801d1a0:	950d      	str	r5, [sp, #52]	; 0x34
 801d1a2:	b150      	cbz	r0, 801d1ba <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 801d1a4:	eb02 0c03 	add.w	ip, r2, r3
 801d1a8:	5cd3      	ldrb	r3, [r2, r3]
 801d1aa:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801d1ae:	930a      	str	r3, [sp, #40]	; 0x28
 801d1b0:	f89c 3001 	ldrb.w	r3, [ip, #1]
 801d1b4:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801d1b8:	930e      	str	r3, [sp, #56]	; 0x38
 801d1ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d1bc:	fb1e f200 	smulbb	r2, lr, r0
 801d1c0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801d1c2:	f108 38ff 	add.w	r8, r8, #4294967295
 801d1c6:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801d1ca:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801d1ce:	10d2      	asrs	r2, r2, #3
 801d1d0:	f425 6bfc 	bic.w	fp, r5, #2016	; 0x7e0
 801d1d4:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801d1d8:	ea4c 0c03 	orr.w	ip, ip, r3
 801d1dc:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
 801d1e0:	9311      	str	r3, [sp, #68]	; 0x44
 801d1e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d1e4:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801d1e6:	041b      	lsls	r3, r3, #16
 801d1e8:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801d1ec:	ea43 030b 	orr.w	r3, r3, fp
 801d1f0:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 801d1f4:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801d1f8:	4353      	muls	r3, r2
 801d1fa:	fb05 3c0c 	mla	ip, r5, ip, r3
 801d1fe:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 801d202:	ea43 0b01 	orr.w	fp, r3, r1
 801d206:	f1c0 0110 	rsb	r1, r0, #16
 801d20a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d20c:	eba1 0e0e 	sub.w	lr, r1, lr
 801d210:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 801d214:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 801d218:	fb0e cc0b 	mla	ip, lr, fp, ip
 801d21c:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 801d220:	f423 6efc 	bic.w	lr, r3, #2016	; 0x7e0
 801d224:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801d228:	ea4b 0e0e 	orr.w	lr, fp, lr
 801d22c:	fb02 cc0e 	mla	ip, r2, lr, ip
 801d230:	ea4f 535c 	mov.w	r3, ip, lsr #21
 801d234:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801d238:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801d23c:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801d240:	ea43 0c0c 	orr.w	ip, r3, ip
 801d244:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801d246:	441c      	add	r4, r3
 801d248:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801d24a:	f82a cb02 	strh.w	ip, [sl], #2
 801d24e:	441e      	add	r6, r3
 801d250:	e723      	b.n	801d09a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801d252:	2800      	cmp	r0, #0
 801d254:	d0b1      	beq.n	801d1ba <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 801d256:	5cd3      	ldrb	r3, [r2, r3]
 801d258:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801d25c:	930a      	str	r3, [sp, #40]	; 0x28
 801d25e:	e7ac      	b.n	801d1ba <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 801d260:	b013      	add	sp, #76	; 0x4c
 801d262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d266 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
 801d266:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d26a:	880d      	ldrh	r5, [r1, #0]
 801d26c:	b087      	sub	sp, #28
 801d26e:	10ef      	asrs	r7, r5, #3
 801d270:	9103      	str	r1, [sp, #12]
 801d272:	ea4f 2a25 	mov.w	sl, r5, asr #8
 801d276:	f9bd 9040 	ldrsh.w	r9, [sp, #64]	; 0x40
 801d27a:	00ed      	lsls	r5, r5, #3
 801d27c:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801d280:	f00a 0af8 	and.w	sl, sl, #248	; 0xf8
 801d284:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 801d288:	b2ed      	uxtb	r5, r5
 801d28a:	9701      	str	r7, [sp, #4]
 801d28c:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
 801d290:	9502      	str	r5, [sp, #8]
 801d292:	9d01      	ldr	r5, [sp, #4]
 801d294:	9902      	ldr	r1, [sp, #8]
 801d296:	022d      	lsls	r5, r5, #8
 801d298:	f89d e054 	ldrb.w	lr, [sp, #84]	; 0x54
 801d29c:	f89d 8058 	ldrb.w	r8, [sp, #88]	; 0x58
 801d2a0:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 801d2a4:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	; 0x48
 801d2a8:	430d      	orrs	r5, r1
 801d2aa:	fb06 0709 	mla	r7, r6, r9, r0
 801d2ae:	2e00      	cmp	r6, #0
 801d2b0:	9505      	str	r5, [sp, #20]
 801d2b2:	eb02 0c07 	add.w	ip, r2, r7
 801d2b6:	f2c0 80b6 	blt.w	801d426 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
 801d2ba:	45b3      	cmp	fp, r6
 801d2bc:	f340 80b3 	ble.w	801d426 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
 801d2c0:	2800      	cmp	r0, #0
 801d2c2:	f2c0 80ae 	blt.w	801d422 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
 801d2c6:	4581      	cmp	r9, r0
 801d2c8:	f340 80ab 	ble.w	801d422 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
 801d2cc:	5dd7      	ldrb	r7, [r2, r7]
 801d2ce:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801d2d2:	441f      	add	r7, r3
 801d2d4:	1c42      	adds	r2, r0, #1
 801d2d6:	f100 80a9 	bmi.w	801d42c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 801d2da:	4591      	cmp	r9, r2
 801d2dc:	f340 80a6 	ble.w	801d42c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 801d2e0:	2c00      	cmp	r4, #0
 801d2e2:	f000 80a3 	beq.w	801d42c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 801d2e6:	f89c 5001 	ldrb.w	r5, [ip, #1]
 801d2ea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d2ee:	441d      	add	r5, r3
 801d2f0:	3601      	adds	r6, #1
 801d2f2:	f100 809f 	bmi.w	801d434 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 801d2f6:	45b3      	cmp	fp, r6
 801d2f8:	f340 809c 	ble.w	801d434 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 801d2fc:	f1be 0f00 	cmp.w	lr, #0
 801d300:	f000 8098 	beq.w	801d434 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 801d304:	2800      	cmp	r0, #0
 801d306:	f2c0 8093 	blt.w	801d430 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
 801d30a:	4581      	cmp	r9, r0
 801d30c:	f340 8090 	ble.w	801d430 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
 801d310:	f81c 6009 	ldrb.w	r6, [ip, r9]
 801d314:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801d318:	441e      	add	r6, r3
 801d31a:	3001      	adds	r0, #1
 801d31c:	f100 808d 	bmi.w	801d43a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 801d320:	4581      	cmp	r9, r0
 801d322:	f340 808a 	ble.w	801d43a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 801d326:	2c00      	cmp	r4, #0
 801d328:	f000 8087 	beq.w	801d43a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 801d32c:	44e1      	add	r9, ip
 801d32e:	f899 2001 	ldrb.w	r2, [r9, #1]
 801d332:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d336:	4413      	add	r3, r2
 801d338:	b2a4      	uxth	r4, r4
 801d33a:	f897 c002 	ldrb.w	ip, [r7, #2]
 801d33e:	fa1f fe8e 	uxth.w	lr, lr
 801d342:	9901      	ldr	r1, [sp, #4]
 801d344:	fb04 fb0e 	mul.w	fp, r4, lr
 801d348:	0124      	lsls	r4, r4, #4
 801d34a:	ebcb 1e0e 	rsb	lr, fp, lr, lsl #4
 801d34e:	f5c4 7980 	rsb	r9, r4, #256	; 0x100
 801d352:	eba4 040b 	sub.w	r4, r4, fp
 801d356:	fa1f f08e 	uxth.w	r0, lr
 801d35a:	b2a2      	uxth	r2, r4
 801d35c:	78ac      	ldrb	r4, [r5, #2]
 801d35e:	eba9 0900 	sub.w	r9, r9, r0
 801d362:	fa1f fe88 	uxth.w	lr, r8
 801d366:	4354      	muls	r4, r2
 801d368:	ea6f 0808 	mvn.w	r8, r8
 801d36c:	fa1f f989 	uxth.w	r9, r9
 801d370:	fa5f f888 	uxtb.w	r8, r8
 801d374:	fb09 440c 	mla	r4, r9, ip, r4
 801d378:	f896 c002 	ldrb.w	ip, [r6, #2]
 801d37c:	fb1a fa08 	smulbb	sl, sl, r8
 801d380:	fb00 440c 	mla	r4, r0, ip, r4
 801d384:	f893 c002 	ldrb.w	ip, [r3, #2]
 801d388:	fb0b 4c0c 	mla	ip, fp, ip, r4
 801d38c:	787c      	ldrb	r4, [r7, #1]
 801d38e:	783f      	ldrb	r7, [r7, #0]
 801d390:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801d394:	fb0c ac0e 	mla	ip, ip, lr, sl
 801d398:	f895 a001 	ldrb.w	sl, [r5, #1]
 801d39c:	782d      	ldrb	r5, [r5, #0]
 801d39e:	fb02 fa0a 	mul.w	sl, r2, sl
 801d3a2:	fa1f fc8c 	uxth.w	ip, ip
 801d3a6:	436a      	muls	r2, r5
 801d3a8:	7835      	ldrb	r5, [r6, #0]
 801d3aa:	fb09 aa04 	mla	sl, r9, r4, sl
 801d3ae:	7874      	ldrb	r4, [r6, #1]
 801d3b0:	fb09 2207 	mla	r2, r9, r7, r2
 801d3b4:	fb00 aa04 	mla	sl, r0, r4, sl
 801d3b8:	785c      	ldrb	r4, [r3, #1]
 801d3ba:	fb00 2005 	mla	r0, r0, r5, r2
 801d3be:	781b      	ldrb	r3, [r3, #0]
 801d3c0:	fb0b a404 	mla	r4, fp, r4, sl
 801d3c4:	fb11 fa08 	smulbb	sl, r1, r8
 801d3c8:	fb0b 0b03 	mla	fp, fp, r3, r0
 801d3cc:	9b02      	ldr	r3, [sp, #8]
 801d3ce:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801d3d2:	fb13 f808 	smulbb	r8, r3, r8
 801d3d6:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 801d3da:	fb04 a40e 	mla	r4, r4, lr, sl
 801d3de:	f10c 0301 	add.w	r3, ip, #1
 801d3e2:	fb0b 8e0e 	mla	lr, fp, lr, r8
 801d3e6:	b2a4      	uxth	r4, r4
 801d3e8:	fa1f fe8e 	uxth.w	lr, lr
 801d3ec:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801d3f0:	f104 0a01 	add.w	sl, r4, #1
 801d3f4:	f40c 4378 	and.w	r3, ip, #63488	; 0xf800
 801d3f8:	f10e 0c01 	add.w	ip, lr, #1
 801d3fc:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 801d400:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801d404:	0964      	lsrs	r4, r4, #5
 801d406:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801d40a:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 801d40e:	ea4c 0c03 	orr.w	ip, ip, r3
 801d412:	9b03      	ldr	r3, [sp, #12]
 801d414:	ea4c 0c04 	orr.w	ip, ip, r4
 801d418:	f8a3 c000 	strh.w	ip, [r3]
 801d41c:	b007      	add	sp, #28
 801d41e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d422:	af05      	add	r7, sp, #20
 801d424:	e756      	b.n	801d2d4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6e>
 801d426:	ad05      	add	r5, sp, #20
 801d428:	462f      	mov	r7, r5
 801d42a:	e761      	b.n	801d2f0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
 801d42c:	ad05      	add	r5, sp, #20
 801d42e:	e75f      	b.n	801d2f0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
 801d430:	ae05      	add	r6, sp, #20
 801d432:	e772      	b.n	801d31a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
 801d434:	ab05      	add	r3, sp, #20
 801d436:	461e      	mov	r6, r3
 801d438:	e77e      	b.n	801d338 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>
 801d43a:	ab05      	add	r3, sp, #20
 801d43c:	e77c      	b.n	801d338 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>

0801d43e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d43e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d442:	b095      	sub	sp, #84	; 0x54
 801d444:	9212      	str	r2, [sp, #72]	; 0x48
 801d446:	9309      	str	r3, [sp, #36]	; 0x24
 801d448:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801d44a:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 801d44e:	9013      	str	r0, [sp, #76]	; 0x4c
 801d450:	930f      	str	r3, [sp, #60]	; 0x3c
 801d452:	6850      	ldr	r0, [r2, #4]
 801d454:	910e      	str	r1, [sp, #56]	; 0x38
 801d456:	6812      	ldr	r2, [r2, #0]
 801d458:	e9dd 1324 	ldrd	r1, r3, [sp, #144]	; 0x90
 801d45c:	fb00 1303 	mla	r3, r0, r3, r1
 801d460:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801d464:	930a      	str	r3, [sp, #40]	; 0x28
 801d466:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801d468:	681b      	ldr	r3, [r3, #0]
 801d46a:	930d      	str	r3, [sp, #52]	; 0x34
 801d46c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801d46e:	685c      	ldr	r4, [r3, #4]
 801d470:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d472:	3404      	adds	r4, #4
 801d474:	43db      	mvns	r3, r3
 801d476:	b2db      	uxtb	r3, r3
 801d478:	930b      	str	r3, [sp, #44]	; 0x2c
 801d47a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d47c:	2b00      	cmp	r3, #0
 801d47e:	dc03      	bgt.n	801d488 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801d480:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801d482:	2b00      	cmp	r3, #0
 801d484:	f340 8255 	ble.w	801d932 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 801d488:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801d48a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801d48e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801d492:	1e48      	subs	r0, r1, #1
 801d494:	1e55      	subs	r5, r2, #1
 801d496:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d498:	2b00      	cmp	r3, #0
 801d49a:	f340 80f9 	ble.w	801d690 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801d49e:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 801d4a0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801d4a2:	1436      	asrs	r6, r6, #16
 801d4a4:	ea4f 4323 	mov.w	r3, r3, asr #16
 801d4a8:	d406      	bmi.n	801d4b8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801d4aa:	4286      	cmp	r6, r0
 801d4ac:	da04      	bge.n	801d4b8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801d4ae:	2b00      	cmp	r3, #0
 801d4b0:	db02      	blt.n	801d4b8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801d4b2:	42ab      	cmp	r3, r5
 801d4b4:	f2c0 80ed 	blt.w	801d692 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801d4b8:	3601      	adds	r6, #1
 801d4ba:	f100 80da 	bmi.w	801d672 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801d4be:	42b1      	cmp	r1, r6
 801d4c0:	f2c0 80d7 	blt.w	801d672 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801d4c4:	3301      	adds	r3, #1
 801d4c6:	f100 80d4 	bmi.w	801d672 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801d4ca:	429a      	cmp	r2, r3
 801d4cc:	f2c0 80d1 	blt.w	801d672 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801d4d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d4d2:	9311      	str	r3, [sp, #68]	; 0x44
 801d4d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d4d6:	930c      	str	r3, [sp, #48]	; 0x30
 801d4d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801d4da:	2b00      	cmp	r3, #0
 801d4dc:	f340 80fa 	ble.w	801d6d4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801d4e0:	9826      	ldr	r0, [sp, #152]	; 0x98
 801d4e2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801d4e4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801d4e6:	68c6      	ldr	r6, [r0, #12]
 801d4e8:	141d      	asrs	r5, r3, #16
 801d4ea:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801d4ec:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801d4f0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801d4f2:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801d4f4:	1400      	asrs	r0, r0, #16
 801d4f6:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801d4fa:	6892      	ldr	r2, [r2, #8]
 801d4fc:	f100 813e 	bmi.w	801d77c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801d500:	1e57      	subs	r7, r2, #1
 801d502:	42b8      	cmp	r0, r7
 801d504:	f280 813a 	bge.w	801d77c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801d508:	2d00      	cmp	r5, #0
 801d50a:	f2c0 8137 	blt.w	801d77c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801d50e:	1e77      	subs	r7, r6, #1
 801d510:	42bd      	cmp	r5, r7
 801d512:	f280 8133 	bge.w	801d77c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801d516:	b212      	sxth	r2, r2
 801d518:	fb05 0002 	mla	r0, r5, r2, r0
 801d51c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801d51e:	f815 a000 	ldrb.w	sl, [r5, r0]
 801d522:	182e      	adds	r6, r5, r0
 801d524:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 801d528:	eb04 050a 	add.w	r5, r4, sl
 801d52c:	2b00      	cmp	r3, #0
 801d52e:	f000 8117 	beq.w	801d760 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801d532:	f896 c001 	ldrb.w	ip, [r6, #1]
 801d536:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801d53a:	44a4      	add	ip, r4
 801d53c:	2900      	cmp	r1, #0
 801d53e:	f000 8117 	beq.w	801d770 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801d542:	18b0      	adds	r0, r6, r2
 801d544:	5cb2      	ldrb	r2, [r6, r2]
 801d546:	7840      	ldrb	r0, [r0, #1]
 801d548:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d54c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801d550:	4422      	add	r2, r4
 801d552:	4420      	add	r0, r4
 801d554:	b29b      	uxth	r3, r3
 801d556:	f89c 7002 	ldrb.w	r7, [ip, #2]
 801d55a:	b289      	uxth	r1, r1
 801d55c:	f895 b002 	ldrb.w	fp, [r5, #2]
 801d560:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801d562:	fb03 f901 	mul.w	r9, r3, r1
 801d566:	011b      	lsls	r3, r3, #4
 801d568:	f8b6 e000 	ldrh.w	lr, [r6]
 801d56c:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801d570:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 801d574:	eba3 0309 	sub.w	r3, r3, r9
 801d578:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
 801d57c:	b289      	uxth	r1, r1
 801d57e:	f814 a00a 	ldrb.w	sl, [r4, sl]
 801d582:	b29b      	uxth	r3, r3
 801d584:	eba8 0801 	sub.w	r8, r8, r1
 801d588:	435f      	muls	r7, r3
 801d58a:	fa1f f888 	uxth.w	r8, r8
 801d58e:	9310      	str	r3, [sp, #64]	; 0x40
 801d590:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d592:	fb08 770b 	mla	r7, r8, fp, r7
 801d596:	f892 b002 	ldrb.w	fp, [r2, #2]
 801d59a:	fb01 770b 	mla	r7, r1, fp, r7
 801d59e:	f890 b002 	ldrb.w	fp, [r0, #2]
 801d5a2:	fb09 770b 	mla	r7, r9, fp, r7
 801d5a6:	ea4f 2b2e 	mov.w	fp, lr, asr #8
 801d5aa:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 801d5ae:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801d5b2:	fb1b fb03 	smulbb	fp, fp, r3
 801d5b6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d5b8:	fb07 b706 	mla	r7, r7, r6, fp
 801d5bc:	f895 b001 	ldrb.w	fp, [r5, #1]
 801d5c0:	f89c 5001 	ldrb.w	r5, [ip, #1]
 801d5c4:	f89c c000 	ldrb.w	ip, [ip]
 801d5c8:	b2bf      	uxth	r7, r7
 801d5ca:	435d      	muls	r5, r3
 801d5cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d5ce:	fb08 550b 	mla	r5, r8, fp, r5
 801d5d2:	f892 b001 	ldrb.w	fp, [r2, #1]
 801d5d6:	fb01 550b 	mla	r5, r1, fp, r5
 801d5da:	f890 b001 	ldrb.w	fp, [r0, #1]
 801d5de:	fb09 550b 	mla	r5, r9, fp, r5
 801d5e2:	ea4f 0bee 	mov.w	fp, lr, asr #3
 801d5e6:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801d5ea:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 801d5ee:	f3c5 2507 	ubfx	r5, r5, #8, #8
 801d5f2:	fa5f fe8e 	uxtb.w	lr, lr
 801d5f6:	fb1b fb03 	smulbb	fp, fp, r3
 801d5fa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d5fc:	fb03 f30c 	mul.w	r3, r3, ip
 801d600:	f892 c000 	ldrb.w	ip, [r2]
 801d604:	fb05 b506 	mla	r5, r5, r6, fp
 801d608:	fb08 330a 	mla	r3, r8, sl, r3
 801d60c:	b2ad      	uxth	r5, r5
 801d60e:	fb01 330c 	mla	r3, r1, ip, r3
 801d612:	f890 c000 	ldrb.w	ip, [r0]
 801d616:	f105 0b01 	add.w	fp, r5, #1
 801d61a:	fb09 3c0c 	mla	ip, r9, ip, r3
 801d61e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d620:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 801d624:	fb1e fe03 	smulbb	lr, lr, r3
 801d628:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801d62c:	1c7b      	adds	r3, r7, #1
 801d62e:	096d      	lsrs	r5, r5, #5
 801d630:	fb0c e606 	mla	r6, ip, r6, lr
 801d634:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 801d638:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801d63c:	b2b6      	uxth	r6, r6
 801d63e:	f407 4378 	and.w	r3, r7, #63488	; 0xf800
 801d642:	1c77      	adds	r7, r6, #1
 801d644:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 801d648:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801d64c:	431f      	orrs	r7, r3
 801d64e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d650:	433d      	orrs	r5, r7
 801d652:	801d      	strh	r5, [r3, #0]
 801d654:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d656:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801d658:	3302      	adds	r3, #2
 801d65a:	930c      	str	r3, [sp, #48]	; 0x30
 801d65c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801d65e:	4413      	add	r3, r2
 801d660:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801d662:	931f      	str	r3, [sp, #124]	; 0x7c
 801d664:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801d666:	4413      	add	r3, r2
 801d668:	9320      	str	r3, [sp, #128]	; 0x80
 801d66a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801d66c:	3b01      	subs	r3, #1
 801d66e:	9311      	str	r3, [sp, #68]	; 0x44
 801d670:	e732      	b.n	801d4d8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801d672:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801d674:	9e21      	ldr	r6, [sp, #132]	; 0x84
 801d676:	4433      	add	r3, r6
 801d678:	9e22      	ldr	r6, [sp, #136]	; 0x88
 801d67a:	931f      	str	r3, [sp, #124]	; 0x7c
 801d67c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801d67e:	4433      	add	r3, r6
 801d680:	9320      	str	r3, [sp, #128]	; 0x80
 801d682:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d684:	3b01      	subs	r3, #1
 801d686:	9309      	str	r3, [sp, #36]	; 0x24
 801d688:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d68a:	3302      	adds	r3, #2
 801d68c:	930a      	str	r3, [sp, #40]	; 0x28
 801d68e:	e702      	b.n	801d496 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801d690:	d027      	beq.n	801d6e2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 801d692:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d694:	9821      	ldr	r0, [sp, #132]	; 0x84
 801d696:	3b01      	subs	r3, #1
 801d698:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 801d69a:	fb00 5003 	mla	r0, r0, r3, r5
 801d69e:	1400      	asrs	r0, r0, #16
 801d6a0:	f53f af16 	bmi.w	801d4d0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801d6a4:	3901      	subs	r1, #1
 801d6a6:	4288      	cmp	r0, r1
 801d6a8:	f6bf af12 	bge.w	801d4d0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801d6ac:	9922      	ldr	r1, [sp, #136]	; 0x88
 801d6ae:	9820      	ldr	r0, [sp, #128]	; 0x80
 801d6b0:	fb01 0303 	mla	r3, r1, r3, r0
 801d6b4:	141b      	asrs	r3, r3, #16
 801d6b6:	f53f af0b 	bmi.w	801d4d0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801d6ba:	3a01      	subs	r2, #1
 801d6bc:	4293      	cmp	r3, r2
 801d6be:	f6bf af07 	bge.w	801d4d0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801d6c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d6c4:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 801d6c8:	9311      	str	r3, [sp, #68]	; 0x44
 801d6ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d6cc:	930c      	str	r3, [sp, #48]	; 0x30
 801d6ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801d6d0:	2b00      	cmp	r3, #0
 801d6d2:	dc70      	bgt.n	801d7b6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
 801d6d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d6d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d6d8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d6dc:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801d6e0:	930a      	str	r3, [sp, #40]	; 0x28
 801d6e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d6e4:	2b00      	cmp	r3, #0
 801d6e6:	f340 8124 	ble.w	801d932 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 801d6ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801d6ee:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801d6f0:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d6f4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d6f8:	eef0 6a62 	vmov.f32	s13, s5
 801d6fc:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801d700:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d704:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d708:	edcd 6a1f 	vstr	s13, [sp, #124]	; 0x7c
 801d70c:	eef0 6a43 	vmov.f32	s13, s6
 801d710:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d714:	edcd 6a20 	vstr	s13, [sp, #128]	; 0x80
 801d718:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d71c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d720:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d724:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d728:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d72c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d730:	ee12 2a90 	vmov	r2, s5
 801d734:	eef0 2a47 	vmov.f32	s5, s14
 801d738:	fb92 f3f3 	sdiv	r3, r2, r3
 801d73c:	ee13 2a10 	vmov	r2, s6
 801d740:	9321      	str	r3, [sp, #132]	; 0x84
 801d742:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801d744:	eeb0 3a67 	vmov.f32	s6, s15
 801d748:	fb92 f3f3 	sdiv	r3, r2, r3
 801d74c:	9322      	str	r3, [sp, #136]	; 0x88
 801d74e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d750:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d752:	3b01      	subs	r3, #1
 801d754:	930e      	str	r3, [sp, #56]	; 0x38
 801d756:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801d758:	bf08      	it	eq
 801d75a:	4613      	moveq	r3, r2
 801d75c:	9309      	str	r3, [sp, #36]	; 0x24
 801d75e:	e68c      	b.n	801d47a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801d760:	b149      	cbz	r1, 801d776 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x338>
 801d762:	5cb2      	ldrb	r2, [r6, r2]
 801d764:	4628      	mov	r0, r5
 801d766:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d76a:	4422      	add	r2, r4
 801d76c:	46ac      	mov	ip, r5
 801d76e:	e6f1      	b.n	801d554 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801d770:	4628      	mov	r0, r5
 801d772:	462a      	mov	r2, r5
 801d774:	e6ee      	b.n	801d554 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801d776:	4628      	mov	r0, r5
 801d778:	462a      	mov	r2, r5
 801d77a:	e7f7      	b.n	801d76c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 801d77c:	1c47      	adds	r7, r0, #1
 801d77e:	f53f af69 	bmi.w	801d654 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801d782:	42ba      	cmp	r2, r7
 801d784:	f6ff af66 	blt.w	801d654 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801d788:	1c6f      	adds	r7, r5, #1
 801d78a:	f53f af63 	bmi.w	801d654 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801d78e:	42be      	cmp	r6, r7
 801d790:	f6ff af60 	blt.w	801d654 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801d794:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801d796:	b236      	sxth	r6, r6
 801d798:	b212      	sxth	r2, r2
 801d79a:	9002      	str	r0, [sp, #8]
 801d79c:	9601      	str	r6, [sp, #4]
 801d79e:	9200      	str	r2, [sp, #0]
 801d7a0:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801d7a2:	e9cd 1705 	strd	r1, r7, [sp, #20]
 801d7a6:	e9cd 5303 	strd	r5, r3, [sp, #12]
 801d7aa:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 801d7ae:	4623      	mov	r3, r4
 801d7b0:	f7ff fd59 	bl	801d266 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
 801d7b4:	e74e      	b.n	801d654 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801d7b6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801d7b8:	9820      	ldr	r0, [sp, #128]	; 0x80
 801d7ba:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801d7be:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 801d7c0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801d7c2:	1400      	asrs	r0, r0, #16
 801d7c4:	142d      	asrs	r5, r5, #16
 801d7c6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801d7c8:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801d7cc:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801d7d0:	fb02 5000 	mla	r0, r2, r0, r5
 801d7d4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801d7d6:	f815 9000 	ldrb.w	r9, [r5, r0]
 801d7da:	182e      	adds	r6, r5, r0
 801d7dc:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801d7e0:	eb04 0509 	add.w	r5, r4, r9
 801d7e4:	2b00      	cmp	r3, #0
 801d7e6:	f000 8096 	beq.w	801d916 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 801d7ea:	7877      	ldrb	r7, [r6, #1]
 801d7ec:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801d7f0:	4427      	add	r7, r4
 801d7f2:	2900      	cmp	r1, #0
 801d7f4:	f000 8097 	beq.w	801d926 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e8>
 801d7f8:	18b0      	adds	r0, r6, r2
 801d7fa:	5cb2      	ldrb	r2, [r6, r2]
 801d7fc:	7840      	ldrb	r0, [r0, #1]
 801d7fe:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d802:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801d806:	4422      	add	r2, r4
 801d808:	4420      	add	r0, r4
 801d80a:	b29b      	uxth	r3, r3
 801d80c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801d80e:	b289      	uxth	r1, r1
 801d810:	f895 b002 	ldrb.w	fp, [r5, #2]
 801d814:	f8b6 c000 	ldrh.w	ip, [r6]
 801d818:	fb03 f801 	mul.w	r8, r3, r1
 801d81c:	011b      	lsls	r3, r3, #4
 801d81e:	78be      	ldrb	r6, [r7, #2]
 801d820:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 801d824:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801d828:	eba3 0308 	sub.w	r3, r3, r8
 801d82c:	f814 9009 	ldrb.w	r9, [r4, r9]
 801d830:	b289      	uxth	r1, r1
 801d832:	b29b      	uxth	r3, r3
 801d834:	ebae 0e01 	sub.w	lr, lr, r1
 801d838:	435e      	muls	r6, r3
 801d83a:	fa1f fe8e 	uxth.w	lr, lr
 801d83e:	9310      	str	r3, [sp, #64]	; 0x40
 801d840:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d842:	fb0e 660b 	mla	r6, lr, fp, r6
 801d846:	f892 b002 	ldrb.w	fp, [r2, #2]
 801d84a:	fb01 660b 	mla	r6, r1, fp, r6
 801d84e:	f890 b002 	ldrb.w	fp, [r0, #2]
 801d852:	fb08 660b 	mla	r6, r8, fp, r6
 801d856:	ea4f 2b2c 	mov.w	fp, ip, asr #8
 801d85a:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 801d85e:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801d862:	fb1b fb03 	smulbb	fp, fp, r3
 801d866:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d868:	fb06 b60a 	mla	r6, r6, sl, fp
 801d86c:	f895 b001 	ldrb.w	fp, [r5, #1]
 801d870:	787d      	ldrb	r5, [r7, #1]
 801d872:	783f      	ldrb	r7, [r7, #0]
 801d874:	b2b6      	uxth	r6, r6
 801d876:	435d      	muls	r5, r3
 801d878:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d87a:	fb0e 550b 	mla	r5, lr, fp, r5
 801d87e:	f892 b001 	ldrb.w	fp, [r2, #1]
 801d882:	fb01 550b 	mla	r5, r1, fp, r5
 801d886:	f890 b001 	ldrb.w	fp, [r0, #1]
 801d88a:	fb08 550b 	mla	r5, r8, fp, r5
 801d88e:	ea4f 0bec 	mov.w	fp, ip, asr #3
 801d892:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801d896:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 801d89a:	f3c5 2507 	ubfx	r5, r5, #8, #8
 801d89e:	fa5f fc8c 	uxtb.w	ip, ip
 801d8a2:	fb1b fb03 	smulbb	fp, fp, r3
 801d8a6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d8a8:	437b      	muls	r3, r7
 801d8aa:	7817      	ldrb	r7, [r2, #0]
 801d8ac:	fb05 b50a 	mla	r5, r5, sl, fp
 801d8b0:	fb0e 3309 	mla	r3, lr, r9, r3
 801d8b4:	b2ad      	uxth	r5, r5
 801d8b6:	fb01 3307 	mla	r3, r1, r7, r3
 801d8ba:	7807      	ldrb	r7, [r0, #0]
 801d8bc:	f105 0b01 	add.w	fp, r5, #1
 801d8c0:	fb08 3707 	mla	r7, r8, r7, r3
 801d8c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d8c6:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 801d8ca:	fb1c fc03 	smulbb	ip, ip, r3
 801d8ce:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801d8d2:	1c73      	adds	r3, r6, #1
 801d8d4:	096d      	lsrs	r5, r5, #5
 801d8d6:	fb07 c70a 	mla	r7, r7, sl, ip
 801d8da:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801d8de:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801d8e2:	b2bf      	uxth	r7, r7
 801d8e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d8e6:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 801d8ea:	1c7a      	adds	r2, r7, #1
 801d8ec:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 801d8f0:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801d8f4:	4316      	orrs	r6, r2
 801d8f6:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801d8f8:	432e      	orrs	r6, r5
 801d8fa:	f823 6b02 	strh.w	r6, [r3], #2
 801d8fe:	930c      	str	r3, [sp, #48]	; 0x30
 801d900:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801d902:	4413      	add	r3, r2
 801d904:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801d906:	931f      	str	r3, [sp, #124]	; 0x7c
 801d908:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801d90a:	4413      	add	r3, r2
 801d90c:	9320      	str	r3, [sp, #128]	; 0x80
 801d90e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801d910:	3b01      	subs	r3, #1
 801d912:	9311      	str	r3, [sp, #68]	; 0x44
 801d914:	e6db      	b.n	801d6ce <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x290>
 801d916:	b149      	cbz	r1, 801d92c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ee>
 801d918:	5cb2      	ldrb	r2, [r6, r2]
 801d91a:	4628      	mov	r0, r5
 801d91c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d920:	4422      	add	r2, r4
 801d922:	462f      	mov	r7, r5
 801d924:	e771      	b.n	801d80a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 801d926:	4628      	mov	r0, r5
 801d928:	462a      	mov	r2, r5
 801d92a:	e76e      	b.n	801d80a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 801d92c:	4628      	mov	r0, r5
 801d92e:	462a      	mov	r2, r5
 801d930:	e7f7      	b.n	801d922 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 801d932:	b015      	add	sp, #84	; 0x54
 801d934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d938 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
 801d938:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d93c:	880f      	ldrh	r7, [r1, #0]
 801d93e:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 801d942:	023c      	lsls	r4, r7, #8
 801d944:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 801d948:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 801d94c:	f404 0b78 	and.w	fp, r4, #16252928	; 0xf80000
 801d950:	017c      	lsls	r4, r7, #5
 801d952:	00ff      	lsls	r7, r7, #3
 801d954:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 801d958:	f404 447c 	and.w	r4, r4, #64512	; 0xfc00
 801d95c:	b2ff      	uxtb	r7, r7
 801d95e:	ea4b 0404 	orr.w	r4, fp, r4
 801d962:	e9dd c50e 	ldrd	ip, r5, [sp, #56]	; 0x38
 801d966:	4327      	orrs	r7, r4
 801d968:	fb05 ca0e 	mla	sl, r5, lr, ip
 801d96c:	2d00      	cmp	r5, #0
 801d96e:	9701      	str	r7, [sp, #4]
 801d970:	eb02 080a 	add.w	r8, r2, sl
 801d974:	db7e      	blt.n	801da74 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
 801d976:	45a9      	cmp	r9, r5
 801d978:	dd7c      	ble.n	801da74 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
 801d97a:	f1bc 0f00 	cmp.w	ip, #0
 801d97e:	db77      	blt.n	801da70 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 801d980:	45e6      	cmp	lr, ip
 801d982:	dd75      	ble.n	801da70 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 801d984:	f812 700a 	ldrb.w	r7, [r2, sl]
 801d988:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801d98c:	441f      	add	r7, r3
 801d98e:	f11c 0201 	adds.w	r2, ip, #1
 801d992:	d472      	bmi.n	801da7a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 801d994:	4596      	cmp	lr, r2
 801d996:	dd70      	ble.n	801da7a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 801d998:	2800      	cmp	r0, #0
 801d99a:	d06e      	beq.n	801da7a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 801d99c:	f898 4001 	ldrb.w	r4, [r8, #1]
 801d9a0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801d9a4:	441c      	add	r4, r3
 801d9a6:	3501      	adds	r5, #1
 801d9a8:	d46b      	bmi.n	801da82 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 801d9aa:	45a9      	cmp	r9, r5
 801d9ac:	dd69      	ble.n	801da82 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 801d9ae:	2e00      	cmp	r6, #0
 801d9b0:	d067      	beq.n	801da82 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 801d9b2:	f1bc 0f00 	cmp.w	ip, #0
 801d9b6:	db62      	blt.n	801da7e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
 801d9b8:	45e6      	cmp	lr, ip
 801d9ba:	dd60      	ble.n	801da7e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
 801d9bc:	f818 500e 	ldrb.w	r5, [r8, lr]
 801d9c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d9c4:	441d      	add	r5, r3
 801d9c6:	f11c 0201 	adds.w	r2, ip, #1
 801d9ca:	d45d      	bmi.n	801da88 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 801d9cc:	4596      	cmp	lr, r2
 801d9ce:	dd5b      	ble.n	801da88 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 801d9d0:	2800      	cmp	r0, #0
 801d9d2:	d059      	beq.n	801da88 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 801d9d4:	44c6      	add	lr, r8
 801d9d6:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801d9da:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d9de:	4413      	add	r3, r2
 801d9e0:	b280      	uxth	r0, r0
 801d9e2:	f897 e002 	ldrb.w	lr, [r7, #2]
 801d9e6:	b2b2      	uxth	r2, r6
 801d9e8:	f897 9000 	ldrb.w	r9, [r7]
 801d9ec:	787f      	ldrb	r7, [r7, #1]
 801d9ee:	fb00 f602 	mul.w	r6, r0, r2
 801d9f2:	0100      	lsls	r0, r0, #4
 801d9f4:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 801d9f8:	f5c0 7880 	rsb	r8, r0, #256	; 0x100
 801d9fc:	1b80      	subs	r0, r0, r6
 801d9fe:	fa1f fc82 	uxth.w	ip, r2
 801da02:	b282      	uxth	r2, r0
 801da04:	78a0      	ldrb	r0, [r4, #2]
 801da06:	eba8 080c 	sub.w	r8, r8, ip
 801da0a:	4350      	muls	r0, r2
 801da0c:	fa1f f888 	uxth.w	r8, r8
 801da10:	fb08 0e0e 	mla	lr, r8, lr, r0
 801da14:	78a8      	ldrb	r0, [r5, #2]
 801da16:	fb0c e000 	mla	r0, ip, r0, lr
 801da1a:	f893 e002 	ldrb.w	lr, [r3, #2]
 801da1e:	fb06 0e0e 	mla	lr, r6, lr, r0
 801da22:	f40e 4078 	and.w	r0, lr, #63488	; 0xf800
 801da26:	f894 e000 	ldrb.w	lr, [r4]
 801da2a:	fb02 fe0e 	mul.w	lr, r2, lr
 801da2e:	fb08 e909 	mla	r9, r8, r9, lr
 801da32:	f895 e000 	ldrb.w	lr, [r5]
 801da36:	fb0c 990e 	mla	r9, ip, lr, r9
 801da3a:	f893 e000 	ldrb.w	lr, [r3]
 801da3e:	785b      	ldrb	r3, [r3, #1]
 801da40:	fb06 9e0e 	mla	lr, r6, lr, r9
 801da44:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 801da48:	ea4e 0e00 	orr.w	lr, lr, r0
 801da4c:	7860      	ldrb	r0, [r4, #1]
 801da4e:	4350      	muls	r0, r2
 801da50:	786a      	ldrb	r2, [r5, #1]
 801da52:	fb08 0007 	mla	r0, r8, r7, r0
 801da56:	fb0c 0202 	mla	r2, ip, r2, r0
 801da5a:	fb06 2303 	mla	r3, r6, r3, r2
 801da5e:	095b      	lsrs	r3, r3, #5
 801da60:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801da64:	ea4e 0303 	orr.w	r3, lr, r3
 801da68:	800b      	strh	r3, [r1, #0]
 801da6a:	b003      	add	sp, #12
 801da6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801da70:	af01      	add	r7, sp, #4
 801da72:	e78c      	b.n	801d98e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x56>
 801da74:	ac01      	add	r4, sp, #4
 801da76:	4627      	mov	r7, r4
 801da78:	e795      	b.n	801d9a6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 801da7a:	ac01      	add	r4, sp, #4
 801da7c:	e793      	b.n	801d9a6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 801da7e:	ad01      	add	r5, sp, #4
 801da80:	e7a1      	b.n	801d9c6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x8e>
 801da82:	ab01      	add	r3, sp, #4
 801da84:	461d      	mov	r5, r3
 801da86:	e7ab      	b.n	801d9e0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>
 801da88:	ab01      	add	r3, sp, #4
 801da8a:	e7a9      	b.n	801d9e0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>

0801da8c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801da8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801da90:	b08f      	sub	sp, #60	; 0x3c
 801da92:	920c      	str	r2, [sp, #48]	; 0x30
 801da94:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801da96:	900d      	str	r0, [sp, #52]	; 0x34
 801da98:	910a      	str	r1, [sp, #40]	; 0x28
 801da9a:	6850      	ldr	r0, [r2, #4]
 801da9c:	9306      	str	r3, [sp, #24]
 801da9e:	6812      	ldr	r2, [r2, #0]
 801daa0:	e9dd 131e 	ldrd	r1, r3, [sp, #120]	; 0x78
 801daa4:	e9dd b519 	ldrd	fp, r5, [sp, #100]	; 0x64
 801daa8:	fb00 1303 	mla	r3, r0, r3, r1
 801daac:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801dab0:	9307      	str	r3, [sp, #28]
 801dab2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801dab4:	681b      	ldr	r3, [r3, #0]
 801dab6:	9308      	str	r3, [sp, #32]
 801dab8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801daba:	685c      	ldr	r4, [r3, #4]
 801dabc:	3404      	adds	r4, #4
 801dabe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801dac0:	2b00      	cmp	r3, #0
 801dac2:	dc03      	bgt.n	801dacc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801dac4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801dac6:	2b00      	cmp	r3, #0
 801dac8:	f340 81d5 	ble.w	801de76 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 801dacc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801dace:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801dad2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801dad6:	1e48      	subs	r0, r1, #1
 801dad8:	1e56      	subs	r6, r2, #1
 801dada:	9b06      	ldr	r3, [sp, #24]
 801dadc:	2b00      	cmp	r3, #0
 801dade:	f340 80b6 	ble.w	801dc4e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 801dae2:	ea5f 472b 	movs.w	r7, fp, asr #16
 801dae6:	ea4f 4325 	mov.w	r3, r5, asr #16
 801daea:	d406      	bmi.n	801dafa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801daec:	4287      	cmp	r7, r0
 801daee:	da04      	bge.n	801dafa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801daf0:	2b00      	cmp	r3, #0
 801daf2:	db02      	blt.n	801dafa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801daf4:	42b3      	cmp	r3, r6
 801daf6:	f2c0 80ab 	blt.w	801dc50 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c4>
 801dafa:	3701      	adds	r7, #1
 801dafc:	f100 809c 	bmi.w	801dc38 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801db00:	42b9      	cmp	r1, r7
 801db02:	f2c0 8099 	blt.w	801dc38 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801db06:	3301      	adds	r3, #1
 801db08:	f100 8096 	bmi.w	801dc38 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801db0c:	429a      	cmp	r2, r3
 801db0e:	f2c0 8093 	blt.w	801dc38 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801db12:	9b06      	ldr	r3, [sp, #24]
 801db14:	930b      	str	r3, [sp, #44]	; 0x2c
 801db16:	9b07      	ldr	r3, [sp, #28]
 801db18:	9309      	str	r3, [sp, #36]	; 0x24
 801db1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801db1c:	2b00      	cmp	r3, #0
 801db1e:	f340 80b4 	ble.w	801dc8a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 801db22:	9820      	ldr	r0, [sp, #128]	; 0x80
 801db24:	142e      	asrs	r6, r5, #16
 801db26:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801db28:	f3cb 3303 	ubfx	r3, fp, #12, #4
 801db2c:	68c7      	ldr	r7, [r0, #12]
 801db2e:	ea5f 402b 	movs.w	r0, fp, asr #16
 801db32:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801db36:	6892      	ldr	r2, [r2, #8]
 801db38:	f100 80fb 	bmi.w	801dd32 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801db3c:	f102 3cff 	add.w	ip, r2, #4294967295
 801db40:	4560      	cmp	r0, ip
 801db42:	f280 80f6 	bge.w	801dd32 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801db46:	2e00      	cmp	r6, #0
 801db48:	f2c0 80f3 	blt.w	801dd32 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801db4c:	f107 3cff 	add.w	ip, r7, #4294967295
 801db50:	4566      	cmp	r6, ip
 801db52:	f280 80ee 	bge.w	801dd32 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801db56:	b212      	sxth	r2, r2
 801db58:	fb06 0002 	mla	r0, r6, r2, r0
 801db5c:	9e08      	ldr	r6, [sp, #32]
 801db5e:	1837      	adds	r7, r6, r0
 801db60:	5c30      	ldrb	r0, [r6, r0]
 801db62:	eb00 0840 	add.w	r8, r0, r0, lsl #1
 801db66:	eb04 0c08 	add.w	ip, r4, r8
 801db6a:	2b00      	cmp	r3, #0
 801db6c:	f000 80d3 	beq.w	801dd16 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801db70:	787e      	ldrb	r6, [r7, #1]
 801db72:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801db76:	4426      	add	r6, r4
 801db78:	2900      	cmp	r1, #0
 801db7a:	f000 80d4 	beq.w	801dd26 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801db7e:	18b8      	adds	r0, r7, r2
 801db80:	5cba      	ldrb	r2, [r7, r2]
 801db82:	7840      	ldrb	r0, [r0, #1]
 801db84:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801db88:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801db8c:	4422      	add	r2, r4
 801db8e:	4420      	add	r0, r4
 801db90:	b29b      	uxth	r3, r3
 801db92:	78b7      	ldrb	r7, [r6, #2]
 801db94:	b289      	uxth	r1, r1
 801db96:	f89c a002 	ldrb.w	sl, [ip, #2]
 801db9a:	f89c c001 	ldrb.w	ip, [ip, #1]
 801db9e:	fb03 f901 	mul.w	r9, r3, r1
 801dba2:	011b      	lsls	r3, r3, #4
 801dba4:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801dba8:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801dbac:	eba3 0309 	sub.w	r3, r3, r9
 801dbb0:	b289      	uxth	r1, r1
 801dbb2:	b29b      	uxth	r3, r3
 801dbb4:	ebae 0e01 	sub.w	lr, lr, r1
 801dbb8:	435f      	muls	r7, r3
 801dbba:	fa1f fe8e 	uxth.w	lr, lr
 801dbbe:	fb0e 770a 	mla	r7, lr, sl, r7
 801dbc2:	f892 a002 	ldrb.w	sl, [r2, #2]
 801dbc6:	fb01 770a 	mla	r7, r1, sl, r7
 801dbca:	f890 a002 	ldrb.w	sl, [r0, #2]
 801dbce:	fb09 7a0a 	mla	sl, r9, sl, r7
 801dbd2:	f814 7008 	ldrb.w	r7, [r4, r8]
 801dbd6:	f896 8000 	ldrb.w	r8, [r6]
 801dbda:	7876      	ldrb	r6, [r6, #1]
 801dbdc:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 801dbe0:	fb03 f808 	mul.w	r8, r3, r8
 801dbe4:	4373      	muls	r3, r6
 801dbe6:	fb0e 8807 	mla	r8, lr, r7, r8
 801dbea:	7817      	ldrb	r7, [r2, #0]
 801dbec:	fb0e 330c 	mla	r3, lr, ip, r3
 801dbf0:	fb01 8807 	mla	r8, r1, r7, r8
 801dbf4:	7807      	ldrb	r7, [r0, #0]
 801dbf6:	fb09 8707 	mla	r7, r9, r7, r8
 801dbfa:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801dbfe:	ea47 070a 	orr.w	r7, r7, sl
 801dc02:	f892 a001 	ldrb.w	sl, [r2, #1]
 801dc06:	fb01 310a 	mla	r1, r1, sl, r3
 801dc0a:	f890 a001 	ldrb.w	sl, [r0, #1]
 801dc0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dc10:	fb09 1a0a 	mla	sl, r9, sl, r1
 801dc14:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801dc18:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801dc1c:	ea47 070a 	orr.w	r7, r7, sl
 801dc20:	801f      	strh	r7, [r3, #0]
 801dc22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dc24:	3302      	adds	r3, #2
 801dc26:	9309      	str	r3, [sp, #36]	; 0x24
 801dc28:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801dc2a:	449b      	add	fp, r3
 801dc2c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801dc2e:	441d      	add	r5, r3
 801dc30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801dc32:	3b01      	subs	r3, #1
 801dc34:	930b      	str	r3, [sp, #44]	; 0x2c
 801dc36:	e770      	b.n	801db1a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801dc38:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801dc3a:	449b      	add	fp, r3
 801dc3c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801dc3e:	441d      	add	r5, r3
 801dc40:	9b06      	ldr	r3, [sp, #24]
 801dc42:	3b01      	subs	r3, #1
 801dc44:	9306      	str	r3, [sp, #24]
 801dc46:	9b07      	ldr	r3, [sp, #28]
 801dc48:	3302      	adds	r3, #2
 801dc4a:	9307      	str	r3, [sp, #28]
 801dc4c:	e745      	b.n	801dada <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 801dc4e:	d023      	beq.n	801dc98 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 801dc50:	9b06      	ldr	r3, [sp, #24]
 801dc52:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801dc54:	3b01      	subs	r3, #1
 801dc56:	fb00 b003 	mla	r0, r0, r3, fp
 801dc5a:	1400      	asrs	r0, r0, #16
 801dc5c:	f53f af59 	bmi.w	801db12 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801dc60:	3901      	subs	r1, #1
 801dc62:	4288      	cmp	r0, r1
 801dc64:	f6bf af55 	bge.w	801db12 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801dc68:	991c      	ldr	r1, [sp, #112]	; 0x70
 801dc6a:	fb01 5303 	mla	r3, r1, r3, r5
 801dc6e:	141b      	asrs	r3, r3, #16
 801dc70:	f53f af4f 	bmi.w	801db12 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801dc74:	3a01      	subs	r2, #1
 801dc76:	4293      	cmp	r3, r2
 801dc78:	f6bf af4b 	bge.w	801db12 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801dc7c:	9b06      	ldr	r3, [sp, #24]
 801dc7e:	9309      	str	r3, [sp, #36]	; 0x24
 801dc80:	9b07      	ldr	r3, [sp, #28]
 801dc82:	930b      	str	r3, [sp, #44]	; 0x2c
 801dc84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dc86:	2b00      	cmp	r3, #0
 801dc88:	dc70      	bgt.n	801dd6c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 801dc8a:	9b06      	ldr	r3, [sp, #24]
 801dc8c:	9a07      	ldr	r2, [sp, #28]
 801dc8e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801dc92:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801dc96:	9307      	str	r3, [sp, #28]
 801dc98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801dc9a:	2b00      	cmp	r3, #0
 801dc9c:	f340 80eb 	ble.w	801de76 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 801dca0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801dca4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801dca6:	ee30 0a04 	vadd.f32	s0, s0, s8
 801dcaa:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801dcae:	eef0 6a62 	vmov.f32	s13, s5
 801dcb2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801dcb6:	ee31 1a05 	vadd.f32	s2, s2, s10
 801dcba:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801dcbe:	ee16 ba90 	vmov	fp, s13
 801dcc2:	eef0 6a43 	vmov.f32	s13, s6
 801dcc6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801dcca:	ee16 5a90 	vmov	r5, s13
 801dcce:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801dcd2:	ee61 7a27 	vmul.f32	s15, s2, s15
 801dcd6:	ee77 2a62 	vsub.f32	s5, s14, s5
 801dcda:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801dcde:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801dce2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801dce6:	ee12 2a90 	vmov	r2, s5
 801dcea:	eef0 2a47 	vmov.f32	s5, s14
 801dcee:	fb92 f3f3 	sdiv	r3, r2, r3
 801dcf2:	ee13 2a10 	vmov	r2, s6
 801dcf6:	931b      	str	r3, [sp, #108]	; 0x6c
 801dcf8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801dcfa:	eeb0 3a67 	vmov.f32	s6, s15
 801dcfe:	fb92 f3f3 	sdiv	r3, r2, r3
 801dd02:	931c      	str	r3, [sp, #112]	; 0x70
 801dd04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801dd06:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801dd08:	3b01      	subs	r3, #1
 801dd0a:	930a      	str	r3, [sp, #40]	; 0x28
 801dd0c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801dd0e:	bf08      	it	eq
 801dd10:	4613      	moveq	r3, r2
 801dd12:	9306      	str	r3, [sp, #24]
 801dd14:	e6d3      	b.n	801dabe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801dd16:	b149      	cbz	r1, 801dd2c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 801dd18:	5cba      	ldrb	r2, [r7, r2]
 801dd1a:	4660      	mov	r0, ip
 801dd1c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801dd20:	4422      	add	r2, r4
 801dd22:	4666      	mov	r6, ip
 801dd24:	e734      	b.n	801db90 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 801dd26:	4660      	mov	r0, ip
 801dd28:	4662      	mov	r2, ip
 801dd2a:	e731      	b.n	801db90 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 801dd2c:	4660      	mov	r0, ip
 801dd2e:	4662      	mov	r2, ip
 801dd30:	e7f7      	b.n	801dd22 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801dd32:	f110 0c01 	adds.w	ip, r0, #1
 801dd36:	f53f af74 	bmi.w	801dc22 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 801dd3a:	4562      	cmp	r2, ip
 801dd3c:	f6ff af71 	blt.w	801dc22 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 801dd40:	f116 0c01 	adds.w	ip, r6, #1
 801dd44:	f53f af6d 	bmi.w	801dc22 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 801dd48:	4567      	cmp	r7, ip
 801dd4a:	f6ff af6a 	blt.w	801dc22 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 801dd4e:	b23f      	sxth	r7, r7
 801dd50:	b212      	sxth	r2, r2
 801dd52:	9701      	str	r7, [sp, #4]
 801dd54:	9200      	str	r2, [sp, #0]
 801dd56:	e9cd 3104 	strd	r3, r1, [sp, #16]
 801dd5a:	e9cd 0602 	strd	r0, r6, [sp, #8]
 801dd5e:	4623      	mov	r3, r4
 801dd60:	980d      	ldr	r0, [sp, #52]	; 0x34
 801dd62:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801dd66:	f7ff fde7 	bl	801d938 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
 801dd6a:	e75a      	b.n	801dc22 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 801dd6c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801dd6e:	ea4f 462b 	mov.w	r6, fp, asr #16
 801dd72:	1428      	asrs	r0, r5, #16
 801dd74:	f3cb 3303 	ubfx	r3, fp, #12, #4
 801dd78:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801dd7c:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801dd80:	fb02 6000 	mla	r0, r2, r0, r6
 801dd84:	9e08      	ldr	r6, [sp, #32]
 801dd86:	f816 8000 	ldrb.w	r8, [r6, r0]
 801dd8a:	1837      	adds	r7, r6, r0
 801dd8c:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801dd90:	eb04 0c08 	add.w	ip, r4, r8
 801dd94:	2b00      	cmp	r3, #0
 801dd96:	d060      	beq.n	801de5a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ce>
 801dd98:	787e      	ldrb	r6, [r7, #1]
 801dd9a:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801dd9e:	4426      	add	r6, r4
 801dda0:	2900      	cmp	r1, #0
 801dda2:	d062      	beq.n	801de6a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
 801dda4:	18b8      	adds	r0, r7, r2
 801dda6:	5cba      	ldrb	r2, [r7, r2]
 801dda8:	7840      	ldrb	r0, [r0, #1]
 801ddaa:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ddae:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801ddb2:	4422      	add	r2, r4
 801ddb4:	4420      	add	r0, r4
 801ddb6:	b29b      	uxth	r3, r3
 801ddb8:	78b7      	ldrb	r7, [r6, #2]
 801ddba:	b289      	uxth	r1, r1
 801ddbc:	f89c a002 	ldrb.w	sl, [ip, #2]
 801ddc0:	f89c c001 	ldrb.w	ip, [ip, #1]
 801ddc4:	fb03 f901 	mul.w	r9, r3, r1
 801ddc8:	011b      	lsls	r3, r3, #4
 801ddca:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801ddce:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801ddd2:	eba3 0309 	sub.w	r3, r3, r9
 801ddd6:	b289      	uxth	r1, r1
 801ddd8:	b29b      	uxth	r3, r3
 801ddda:	ebae 0e01 	sub.w	lr, lr, r1
 801ddde:	435f      	muls	r7, r3
 801dde0:	fa1f fe8e 	uxth.w	lr, lr
 801dde4:	fb0e 770a 	mla	r7, lr, sl, r7
 801dde8:	f892 a002 	ldrb.w	sl, [r2, #2]
 801ddec:	fb01 770a 	mla	r7, r1, sl, r7
 801ddf0:	f890 a002 	ldrb.w	sl, [r0, #2]
 801ddf4:	fb09 7a0a 	mla	sl, r9, sl, r7
 801ddf8:	f814 7008 	ldrb.w	r7, [r4, r8]
 801ddfc:	f896 8000 	ldrb.w	r8, [r6]
 801de00:	7876      	ldrb	r6, [r6, #1]
 801de02:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 801de06:	fb03 f808 	mul.w	r8, r3, r8
 801de0a:	4373      	muls	r3, r6
 801de0c:	7856      	ldrb	r6, [r2, #1]
 801de0e:	fb0e 8807 	mla	r8, lr, r7, r8
 801de12:	7817      	ldrb	r7, [r2, #0]
 801de14:	fb0e 330c 	mla	r3, lr, ip, r3
 801de18:	fb01 8807 	mla	r8, r1, r7, r8
 801de1c:	7807      	ldrb	r7, [r0, #0]
 801de1e:	fb01 3306 	mla	r3, r1, r6, r3
 801de22:	fb09 8707 	mla	r7, r9, r7, r8
 801de26:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801de2a:	ea47 070a 	orr.w	r7, r7, sl
 801de2e:	f890 a001 	ldrb.w	sl, [r0, #1]
 801de32:	fb09 3a0a 	mla	sl, r9, sl, r3
 801de36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801de38:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801de3c:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801de40:	ea47 070a 	orr.w	r7, r7, sl
 801de44:	f823 7b02 	strh.w	r7, [r3], #2
 801de48:	930b      	str	r3, [sp, #44]	; 0x2c
 801de4a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801de4c:	449b      	add	fp, r3
 801de4e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801de50:	441d      	add	r5, r3
 801de52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801de54:	3b01      	subs	r3, #1
 801de56:	9309      	str	r3, [sp, #36]	; 0x24
 801de58:	e714      	b.n	801dc84 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f8>
 801de5a:	b149      	cbz	r1, 801de70 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 801de5c:	5cba      	ldrb	r2, [r7, r2]
 801de5e:	4660      	mov	r0, ip
 801de60:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801de64:	4422      	add	r2, r4
 801de66:	4666      	mov	r6, ip
 801de68:	e7a5      	b.n	801ddb6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 801de6a:	4660      	mov	r0, ip
 801de6c:	4662      	mov	r2, ip
 801de6e:	e7a2      	b.n	801ddb6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 801de70:	4660      	mov	r0, ip
 801de72:	4662      	mov	r2, ip
 801de74:	e7f7      	b.n	801de66 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3da>
 801de76:	b00f      	add	sp, #60	; 0x3c
 801de78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801de7c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
 801de7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801de80:	b085      	sub	sp, #20
 801de82:	e9dd 7410 	ldrd	r7, r4, [sp, #64]	; 0x40
 801de86:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 801de8a:	9102      	str	r1, [sp, #8]
 801de8c:	2c00      	cmp	r4, #0
 801de8e:	fb04 710c 	mla	r1, r4, ip, r7
 801de92:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 801de96:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
 801de9a:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 801de9e:	eb02 0e01 	add.w	lr, r2, r1
 801dea2:	f2c0 8122 	blt.w	801e0ea <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
 801dea6:	45a0      	cmp	r8, r4
 801dea8:	f340 811f 	ble.w	801e0ea <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
 801deac:	2f00      	cmp	r7, #0
 801deae:	f2c0 811a 	blt.w	801e0e6 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
 801deb2:	45bc      	cmp	ip, r7
 801deb4:	f340 8117 	ble.w	801e0e6 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
 801deb8:	5c52      	ldrb	r2, [r2, r1]
 801deba:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801debe:	1c7a      	adds	r2, r7, #1
 801dec0:	f100 8116 	bmi.w	801e0f0 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
 801dec4:	4594      	cmp	ip, r2
 801dec6:	f340 8113 	ble.w	801e0f0 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
 801deca:	2e00      	cmp	r6, #0
 801decc:	f000 8112 	beq.w	801e0f4 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x278>
 801ded0:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801ded4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801ded8:	3401      	adds	r4, #1
 801deda:	f100 810f 	bmi.w	801e0fc <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
 801dede:	45a0      	cmp	r8, r4
 801dee0:	f340 810c 	ble.w	801e0fc <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
 801dee4:	2800      	cmp	r0, #0
 801dee6:	f000 810c 	beq.w	801e102 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x286>
 801deea:	2f00      	cmp	r7, #0
 801deec:	f2c0 8104 	blt.w	801e0f8 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
 801def0:	45bc      	cmp	ip, r7
 801def2:	f340 8101 	ble.w	801e0f8 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
 801def6:	f81e 200c 	ldrb.w	r2, [lr, ip]
 801defa:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 801defe:	3701      	adds	r7, #1
 801df00:	f100 8102 	bmi.w	801e108 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
 801df04:	45bc      	cmp	ip, r7
 801df06:	f340 80ff 	ble.w	801e108 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
 801df0a:	2e00      	cmp	r6, #0
 801df0c:	f000 80fe 	beq.w	801e10c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x290>
 801df10:	44f4      	add	ip, lr
 801df12:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801df16:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801df1a:	b2b6      	uxth	r6, r6
 801df1c:	b280      	uxth	r0, r0
 801df1e:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 801df22:	fb00 fe06 	mul.w	lr, r0, r6
 801df26:	0136      	lsls	r6, r6, #4
 801df28:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 801df2c:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 801df30:	eba6 070e 	sub.w	r7, r6, lr
 801df34:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 801df38:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801df3c:	b280      	uxth	r0, r0
 801df3e:	b2bf      	uxth	r7, r7
 801df40:	1a1b      	subs	r3, r3, r0
 801df42:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801df46:	fb0a f607 	mul.w	r6, sl, r7
 801df4a:	b29b      	uxth	r3, r3
 801df4c:	fb0b 6603 	mla	r6, fp, r3, r6
 801df50:	fb00 6609 	mla	r6, r0, r9, r6
 801df54:	fb0e 6608 	mla	r6, lr, r8, r6
 801df58:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801df5c:	9600      	str	r6, [sp, #0]
 801df5e:	2e00      	cmp	r6, #0
 801df60:	f000 80be 	beq.w	801e0e0 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x264>
 801df64:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 801df68:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801df6c:	9e02      	ldr	r6, [sp, #8]
 801df6e:	fb0b fc0c 	mul.w	ip, fp, ip
 801df72:	fb0b f505 	mul.w	r5, fp, r5
 801df76:	8836      	ldrh	r6, [r6, #0]
 801df78:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 801df7c:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801df80:	9501      	str	r5, [sp, #4]
 801df82:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 801df86:	44dc      	add	ip, fp
 801df88:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801df8c:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 801df90:	9503      	str	r5, [sp, #12]
 801df92:	9d01      	ldr	r5, [sp, #4]
 801df94:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 801df98:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 801df9c:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 801dfa0:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 801dfa4:	fb0a fc0c 	mul.w	ip, sl, ip
 801dfa8:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 801dfac:	fb0a fa01 	mul.w	sl, sl, r1
 801dfb0:	ea4f 251c 	mov.w	r5, ip, lsr #8
 801dfb4:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801dfb8:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 801dfbc:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801dfc0:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 801dfc4:	4465      	add	r5, ip
 801dfc6:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801dfca:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801dfce:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801dfd2:	fb09 fc0c 	mul.w	ip, r9, ip
 801dfd6:	0a2d      	lsrs	r5, r5, #8
 801dfd8:	fb09 f904 	mul.w	r9, r9, r4
 801dfdc:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801dfe0:	ea4f 211c 	mov.w	r1, ip, lsr #8
 801dfe4:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801dfe8:	f509 7480 	add.w	r4, r9, #256	; 0x100
 801dfec:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801dff0:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 801dff4:	437d      	muls	r5, r7
 801dff6:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 801dffa:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 801dffe:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801e002:	4461      	add	r1, ip
 801e004:	fb08 f404 	mul.w	r4, r8, r4
 801e008:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801e00c:	fb08 f802 	mul.w	r8, r8, r2
 801e010:	0a09      	lsrs	r1, r1, #8
 801e012:	0a22      	lsrs	r2, r4, #8
 801e014:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 801e018:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 801e01c:	fb07 f70a 	mul.w	r7, r7, sl
 801e020:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801e024:	4414      	add	r4, r2
 801e026:	f508 7280 	add.w	r2, r8, #256	; 0x100
 801e02a:	0a24      	lsrs	r4, r4, #8
 801e02c:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801e030:	9a03      	ldr	r2, [sp, #12]
 801e032:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801e036:	fb02 5503 	mla	r5, r2, r3, r5
 801e03a:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801e03e:	9a00      	ldr	r2, [sp, #0]
 801e040:	fb04 540e 	mla	r4, r4, lr, r5
 801e044:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801e048:	1235      	asrs	r5, r6, #8
 801e04a:	fb01 4100 	mla	r1, r1, r0, r4
 801e04e:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801e052:	0a09      	lsrs	r1, r1, #8
 801e054:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 801e058:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 801e05c:	fb03 7101 	mla	r1, r3, r1, r7
 801e060:	fb0e 1e08 	mla	lr, lr, r8, r1
 801e064:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 801e068:	fb00 e101 	mla	r1, r0, r1, lr
 801e06c:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 801e070:	b287      	uxth	r7, r0
 801e072:	0a09      	lsrs	r1, r1, #8
 801e074:	437a      	muls	r2, r7
 801e076:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 801e07a:	1c53      	adds	r3, r2, #1
 801e07c:	4321      	orrs	r1, r4
 801e07e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801e082:	0c0a      	lsrs	r2, r1, #16
 801e084:	f3c1 2407 	ubfx	r4, r1, #8, #8
 801e088:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 801e08c:	b2c8      	uxtb	r0, r1
 801e08e:	fb12 f207 	smulbb	r2, r2, r7
 801e092:	fb14 f407 	smulbb	r4, r4, r7
 801e096:	b2db      	uxtb	r3, r3
 801e098:	fb10 f007 	smulbb	r0, r0, r7
 801e09c:	fb05 2503 	mla	r5, r5, r3, r2
 801e0a0:	10f2      	asrs	r2, r6, #3
 801e0a2:	00f6      	lsls	r6, r6, #3
 801e0a4:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801e0a8:	b2ad      	uxth	r5, r5
 801e0aa:	b2f6      	uxtb	r6, r6
 801e0ac:	fb02 4203 	mla	r2, r2, r3, r4
 801e0b0:	fb06 0303 	mla	r3, r6, r3, r0
 801e0b4:	b294      	uxth	r4, r2
 801e0b6:	b299      	uxth	r1, r3
 801e0b8:	1c6b      	adds	r3, r5, #1
 801e0ba:	1c62      	adds	r2, r4, #1
 801e0bc:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801e0c0:	1c4b      	adds	r3, r1, #1
 801e0c2:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801e0c6:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801e0ca:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801e0ce:	0952      	lsrs	r2, r2, #5
 801e0d0:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801e0d4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801e0d8:	432b      	orrs	r3, r5
 801e0da:	4313      	orrs	r3, r2
 801e0dc:	9a02      	ldr	r2, [sp, #8]
 801e0de:	8013      	strh	r3, [r2, #0]
 801e0e0:	b005      	add	sp, #20
 801e0e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e0e6:	2500      	movs	r5, #0
 801e0e8:	e6e9      	b.n	801debe <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x42>
 801e0ea:	2100      	movs	r1, #0
 801e0ec:	460d      	mov	r5, r1
 801e0ee:	e6f3      	b.n	801ded8 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 801e0f0:	2100      	movs	r1, #0
 801e0f2:	e6f1      	b.n	801ded8 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 801e0f4:	4631      	mov	r1, r6
 801e0f6:	e6ef      	b.n	801ded8 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 801e0f8:	2400      	movs	r4, #0
 801e0fa:	e700      	b.n	801defe <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x82>
 801e0fc:	2200      	movs	r2, #0
 801e0fe:	4614      	mov	r4, r2
 801e100:	e70b      	b.n	801df1a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 801e102:	4602      	mov	r2, r0
 801e104:	4604      	mov	r4, r0
 801e106:	e708      	b.n	801df1a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 801e108:	2200      	movs	r2, #0
 801e10a:	e706      	b.n	801df1a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 801e10c:	4632      	mov	r2, r6
 801e10e:	e704      	b.n	801df1a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>

0801e110 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e114:	b09f      	sub	sp, #124	; 0x7c
 801e116:	921b      	str	r2, [sp, #108]	; 0x6c
 801e118:	9309      	str	r3, [sp, #36]	; 0x24
 801e11a:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801e11c:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 801e120:	901d      	str	r0, [sp, #116]	; 0x74
 801e122:	931c      	str	r3, [sp, #112]	; 0x70
 801e124:	6850      	ldr	r0, [r2, #4]
 801e126:	9119      	str	r1, [sp, #100]	; 0x64
 801e128:	6812      	ldr	r2, [r2, #0]
 801e12a:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 801e12c:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 801e130:	fb00 1303 	mla	r3, r0, r3, r1
 801e134:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801e138:	930c      	str	r3, [sp, #48]	; 0x30
 801e13a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801e13c:	681b      	ldr	r3, [r3, #0]
 801e13e:	9312      	str	r3, [sp, #72]	; 0x48
 801e140:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801e142:	685e      	ldr	r6, [r3, #4]
 801e144:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 801e148:	3604      	adds	r6, #4
 801e14a:	930d      	str	r3, [sp, #52]	; 0x34
 801e14c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801e14e:	2b00      	cmp	r3, #0
 801e150:	dc03      	bgt.n	801e15a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801e152:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801e154:	2b00      	cmp	r3, #0
 801e156:	f340 8387 	ble.w	801e868 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
 801e15a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801e15c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801e160:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801e164:	1e48      	subs	r0, r1, #1
 801e166:	1e57      	subs	r7, r2, #1
 801e168:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e16a:	2b00      	cmp	r3, #0
 801e16c:	f340 8194 	ble.w	801e498 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x388>
 801e170:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 801e172:	142b      	asrs	r3, r5, #16
 801e174:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801e178:	d406      	bmi.n	801e188 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801e17a:	4584      	cmp	ip, r0
 801e17c:	da04      	bge.n	801e188 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801e17e:	2b00      	cmp	r3, #0
 801e180:	db02      	blt.n	801e188 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801e182:	42bb      	cmp	r3, r7
 801e184:	f2c0 8189 	blt.w	801e49a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801e188:	f11c 0c01 	adds.w	ip, ip, #1
 801e18c:	f100 8177 	bmi.w	801e47e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801e190:	4561      	cmp	r1, ip
 801e192:	f2c0 8174 	blt.w	801e47e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801e196:	3301      	adds	r3, #1
 801e198:	f100 8171 	bmi.w	801e47e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801e19c:	429a      	cmp	r2, r3
 801e19e:	f2c0 816e 	blt.w	801e47e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801e1a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e1a4:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801e1a6:	931a      	str	r3, [sp, #104]	; 0x68
 801e1a8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801e1aa:	2b00      	cmp	r3, #0
 801e1ac:	f340 8193 	ble.w	801e4d6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 801e1b0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801e1b2:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801e1b6:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801e1ba:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801e1be:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801e1c0:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 801e1c4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801e1c6:	141b      	asrs	r3, r3, #16
 801e1c8:	f100 81d6 	bmi.w	801e578 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 801e1cc:	f100 38ff 	add.w	r8, r0, #4294967295
 801e1d0:	4543      	cmp	r3, r8
 801e1d2:	f280 81d1 	bge.w	801e578 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 801e1d6:	f1bc 0f00 	cmp.w	ip, #0
 801e1da:	f2c0 81cd 	blt.w	801e578 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 801e1de:	f10e 38ff 	add.w	r8, lr, #4294967295
 801e1e2:	45c4      	cmp	ip, r8
 801e1e4:	f280 81c8 	bge.w	801e578 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 801e1e8:	b200      	sxth	r0, r0
 801e1ea:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801e1ec:	fb0c 3300 	mla	r3, ip, r0, r3
 801e1f0:	eb04 0803 	add.w	r8, r4, r3
 801e1f4:	5ce3      	ldrb	r3, [r4, r3]
 801e1f6:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801e1fa:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801e1fe:	2a00      	cmp	r2, #0
 801e200:	f000 81af 	beq.w	801e562 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 801e204:	f898 c001 	ldrb.w	ip, [r8, #1]
 801e208:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 801e20c:	940e      	str	r4, [sp, #56]	; 0x38
 801e20e:	0e24      	lsrs	r4, r4, #24
 801e210:	9415      	str	r4, [sp, #84]	; 0x54
 801e212:	b179      	cbz	r1, 801e234 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 801e214:	eb08 0c00 	add.w	ip, r8, r0
 801e218:	f818 0000 	ldrb.w	r0, [r8, r0]
 801e21c:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801e220:	900a      	str	r0, [sp, #40]	; 0x28
 801e222:	0e00      	lsrs	r0, r0, #24
 801e224:	9013      	str	r0, [sp, #76]	; 0x4c
 801e226:	f89c 0001 	ldrb.w	r0, [ip, #1]
 801e22a:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801e22e:	900f      	str	r0, [sp, #60]	; 0x3c
 801e230:	0e00      	lsrs	r0, r0, #24
 801e232:	9016      	str	r0, [sp, #88]	; 0x58
 801e234:	b292      	uxth	r2, r2
 801e236:	9815      	ldr	r0, [sp, #84]	; 0x54
 801e238:	b289      	uxth	r1, r1
 801e23a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801e23c:	fb02 f901 	mul.w	r9, r2, r1
 801e240:	0112      	lsls	r2, r2, #4
 801e242:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801e246:	eba2 0809 	sub.w	r8, r2, r9
 801e24a:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801e24e:	b289      	uxth	r1, r1
 801e250:	fa1f f888 	uxth.w	r8, r8
 801e254:	1a52      	subs	r2, r2, r1
 801e256:	fb08 f000 	mul.w	r0, r8, r0
 801e25a:	b292      	uxth	r2, r2
 801e25c:	fb02 000e 	mla	r0, r2, lr, r0
 801e260:	fb01 0004 	mla	r0, r1, r4, r0
 801e264:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801e266:	fb09 0004 	mla	r0, r9, r4, r0
 801e26a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801e26e:	2800      	cmp	r0, #0
 801e270:	f000 80fa 	beq.w	801e468 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801e274:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801e278:	d01b      	beq.n	801e2b2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 801e27a:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801e27e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801e282:	fb0e fa0a 	mul.w	sl, lr, sl
 801e286:	fb0e fe03 	mul.w	lr, lr, r3
 801e28a:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801e28e:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801e292:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801e296:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801e29a:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801e29e:	4453      	add	r3, sl
 801e2a0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e2a4:	0a1b      	lsrs	r3, r3, #8
 801e2a6:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801e2aa:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801e2ae:	ea43 030c 	orr.w	r3, r3, ip
 801e2b2:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801e2b4:	2cff      	cmp	r4, #255	; 0xff
 801e2b6:	d021      	beq.n	801e2fc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 801e2b8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801e2ba:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801e2be:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801e2c0:	fb04 fb0b 	mul.w	fp, r4, fp
 801e2c4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801e2c6:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801e2ca:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801e2cc:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801e2d0:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801e2d4:	fb04 fa0a 	mul.w	sl, r4, sl
 801e2d8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801e2dc:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801e2e0:	44de      	add	lr, fp
 801e2e2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801e2e6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e2ea:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e2ee:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801e2f2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801e2f6:	ea4e 040a 	orr.w	r4, lr, sl
 801e2fa:	940e      	str	r4, [sp, #56]	; 0x38
 801e2fc:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801e2fe:	2cff      	cmp	r4, #255	; 0xff
 801e300:	d021      	beq.n	801e346 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 801e302:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801e304:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801e308:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801e30a:	fb04 fb0b 	mul.w	fp, r4, fp
 801e30e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801e310:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801e314:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801e316:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801e31a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801e31e:	fb04 fa0a 	mul.w	sl, r4, sl
 801e322:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801e326:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801e32a:	44de      	add	lr, fp
 801e32c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801e330:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e334:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e338:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801e33c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801e340:	ea4e 040a 	orr.w	r4, lr, sl
 801e344:	940a      	str	r4, [sp, #40]	; 0x28
 801e346:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801e348:	2cff      	cmp	r4, #255	; 0xff
 801e34a:	d021      	beq.n	801e390 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x280>
 801e34c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801e34e:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801e352:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801e354:	fb04 fb0b 	mul.w	fp, r4, fp
 801e358:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801e35a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801e35e:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801e360:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801e364:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801e368:	fb04 fa0a 	mul.w	sl, r4, sl
 801e36c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801e370:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801e374:	44de      	add	lr, fp
 801e376:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801e37a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e37e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e382:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801e386:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801e38a:	ea4e 040a 	orr.w	r4, lr, sl
 801e38e:	940f      	str	r4, [sp, #60]	; 0x3c
 801e390:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801e392:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801e396:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801e39a:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801e39e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801e3a0:	fb08 fc0c 	mul.w	ip, r8, ip
 801e3a4:	fb02 cc0e 	mla	ip, r2, lr, ip
 801e3a8:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801e3ac:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801e3ae:	fb01 cc0e 	mla	ip, r1, lr, ip
 801e3b2:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801e3b6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801e3b8:	fb09 cc0e 	mla	ip, r9, lr, ip
 801e3bc:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801e3c0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801e3c2:	fb08 f80e 	mul.w	r8, r8, lr
 801e3c6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e3ca:	fb02 8303 	mla	r3, r2, r3, r8
 801e3ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801e3d0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e3d4:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801e3d8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e3da:	fb01 330a 	mla	r3, r1, sl, r3
 801e3de:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 801e3e2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801e3e4:	fb09 3901 	mla	r9, r9, r1, r3
 801e3e8:	883b      	ldrh	r3, [r7, #0]
 801e3ea:	4342      	muls	r2, r0
 801e3ec:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801e3f0:	1c50      	adds	r0, r2, #1
 801e3f2:	1219      	asrs	r1, r3, #8
 801e3f4:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801e3f8:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 801e3fc:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801e400:	ea4c 0c09 	orr.w	ip, ip, r9
 801e404:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801e408:	ea4f 421c 	mov.w	r2, ip, lsr #16
 801e40c:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 801e410:	b2c0      	uxtb	r0, r0
 801e412:	fb12 f204 	smulbb	r2, r2, r4
 801e416:	fa5f fc8c 	uxtb.w	ip, ip
 801e41a:	fb1e fe04 	smulbb	lr, lr, r4
 801e41e:	fb01 2100 	mla	r1, r1, r0, r2
 801e422:	10da      	asrs	r2, r3, #3
 801e424:	fb1c fc04 	smulbb	ip, ip, r4
 801e428:	00db      	lsls	r3, r3, #3
 801e42a:	b289      	uxth	r1, r1
 801e42c:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801e430:	b2db      	uxtb	r3, r3
 801e432:	fb02 e200 	mla	r2, r2, r0, lr
 801e436:	fb03 c300 	mla	r3, r3, r0, ip
 801e43a:	b292      	uxth	r2, r2
 801e43c:	fa1f fc83 	uxth.w	ip, r3
 801e440:	1c4b      	adds	r3, r1, #1
 801e442:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 801e446:	f10c 0301 	add.w	r3, ip, #1
 801e44a:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 801e44e:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 801e452:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801e456:	430b      	orrs	r3, r1
 801e458:	1c51      	adds	r1, r2, #1
 801e45a:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801e45e:	0952      	lsrs	r2, r2, #5
 801e460:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801e464:	4313      	orrs	r3, r2
 801e466:	803b      	strh	r3, [r7, #0]
 801e468:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801e46a:	3702      	adds	r7, #2
 801e46c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801e46e:	441a      	add	r2, r3
 801e470:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801e472:	441d      	add	r5, r3
 801e474:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801e476:	9229      	str	r2, [sp, #164]	; 0xa4
 801e478:	3b01      	subs	r3, #1
 801e47a:	931a      	str	r3, [sp, #104]	; 0x68
 801e47c:	e694      	b.n	801e1a8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801e47e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801e480:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 801e482:	441c      	add	r4, r3
 801e484:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801e486:	441d      	add	r5, r3
 801e488:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e48a:	9429      	str	r4, [sp, #164]	; 0xa4
 801e48c:	3b01      	subs	r3, #1
 801e48e:	9309      	str	r3, [sp, #36]	; 0x24
 801e490:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e492:	3302      	adds	r3, #2
 801e494:	930c      	str	r3, [sp, #48]	; 0x30
 801e496:	e667      	b.n	801e168 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801e498:	d024      	beq.n	801e4e4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d4>
 801e49a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e49c:	982b      	ldr	r0, [sp, #172]	; 0xac
 801e49e:	3b01      	subs	r3, #1
 801e4a0:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 801e4a2:	fb00 4003 	mla	r0, r0, r3, r4
 801e4a6:	1400      	asrs	r0, r0, #16
 801e4a8:	f53f ae7b 	bmi.w	801e1a2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801e4ac:	3901      	subs	r1, #1
 801e4ae:	4288      	cmp	r0, r1
 801e4b0:	f6bf ae77 	bge.w	801e1a2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801e4b4:	992c      	ldr	r1, [sp, #176]	; 0xb0
 801e4b6:	fb01 5303 	mla	r3, r1, r3, r5
 801e4ba:	141b      	asrs	r3, r3, #16
 801e4bc:	f53f ae71 	bmi.w	801e1a2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801e4c0:	3a01      	subs	r2, #1
 801e4c2:	4293      	cmp	r3, r2
 801e4c4:	f6bf ae6d 	bge.w	801e1a2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801e4c8:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 801e4cc:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 801e4d0:	f1bb 0f00 	cmp.w	fp, #0
 801e4d4:	dc70      	bgt.n	801e5b8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>
 801e4d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e4d8:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801e4dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e4de:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 801e4e2:	930c      	str	r3, [sp, #48]	; 0x30
 801e4e4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801e4e6:	2b00      	cmp	r3, #0
 801e4e8:	f340 81be 	ble.w	801e868 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
 801e4ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e4f0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801e4f2:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e4f6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e4fa:	eef0 6a62 	vmov.f32	s13, s5
 801e4fe:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e502:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e506:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e50a:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 801e50e:	eef0 6a43 	vmov.f32	s13, s6
 801e512:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e516:	ee16 5a90 	vmov	r5, s13
 801e51a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e51e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e522:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e526:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e52a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e52e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e532:	ee12 2a90 	vmov	r2, s5
 801e536:	eef0 2a47 	vmov.f32	s5, s14
 801e53a:	fb92 f3f3 	sdiv	r3, r2, r3
 801e53e:	ee13 2a10 	vmov	r2, s6
 801e542:	932b      	str	r3, [sp, #172]	; 0xac
 801e544:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801e546:	eeb0 3a67 	vmov.f32	s6, s15
 801e54a:	fb92 f3f3 	sdiv	r3, r2, r3
 801e54e:	932c      	str	r3, [sp, #176]	; 0xb0
 801e550:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801e552:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801e554:	3b01      	subs	r3, #1
 801e556:	9319      	str	r3, [sp, #100]	; 0x64
 801e558:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801e55a:	bf08      	it	eq
 801e55c:	4613      	moveq	r3, r2
 801e55e:	9309      	str	r3, [sp, #36]	; 0x24
 801e560:	e5f4      	b.n	801e14c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801e562:	2900      	cmp	r1, #0
 801e564:	f43f ae66 	beq.w	801e234 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 801e568:	f818 0000 	ldrb.w	r0, [r8, r0]
 801e56c:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801e570:	900a      	str	r0, [sp, #40]	; 0x28
 801e572:	0e00      	lsrs	r0, r0, #24
 801e574:	9013      	str	r0, [sp, #76]	; 0x4c
 801e576:	e65d      	b.n	801e234 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 801e578:	f113 0801 	adds.w	r8, r3, #1
 801e57c:	f53f af74 	bmi.w	801e468 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801e580:	4540      	cmp	r0, r8
 801e582:	f6ff af71 	blt.w	801e468 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801e586:	f11c 0801 	adds.w	r8, ip, #1
 801e58a:	f53f af6d 	bmi.w	801e468 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801e58e:	45c6      	cmp	lr, r8
 801e590:	f6ff af6a 	blt.w	801e468 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801e594:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801e596:	b200      	sxth	r0, r0
 801e598:	9302      	str	r3, [sp, #8]
 801e59a:	fa0f f38e 	sxth.w	r3, lr
 801e59e:	9000      	str	r0, [sp, #0]
 801e5a0:	9301      	str	r3, [sp, #4]
 801e5a2:	4633      	mov	r3, r6
 801e5a4:	981d      	ldr	r0, [sp, #116]	; 0x74
 801e5a6:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801e5aa:	e9cd c203 	strd	ip, r2, [sp, #12]
 801e5ae:	4639      	mov	r1, r7
 801e5b0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e5b2:	f7ff fc63 	bl	801de7c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
 801e5b6:	e757      	b.n	801e468 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801e5b8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801e5ba:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801e5be:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 801e5c0:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801e5c4:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801e5c6:	1427      	asrs	r7, r4, #16
 801e5c8:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801e5ca:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801e5ce:	142b      	asrs	r3, r5, #16
 801e5d0:	fb01 7303 	mla	r3, r1, r3, r7
 801e5d4:	18e7      	adds	r7, r4, r3
 801e5d6:	5ce3      	ldrb	r3, [r4, r3]
 801e5d8:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801e5dc:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801e5e0:	2a00      	cmp	r2, #0
 801e5e2:	f000 8137 	beq.w	801e854 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x744>
 801e5e6:	f897 e001 	ldrb.w	lr, [r7, #1]
 801e5ea:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 801e5ee:	9410      	str	r4, [sp, #64]	; 0x40
 801e5f0:	0e24      	lsrs	r4, r4, #24
 801e5f2:	9417      	str	r4, [sp, #92]	; 0x5c
 801e5f4:	b170      	cbz	r0, 801e614 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 801e5f6:	eb07 0e01 	add.w	lr, r7, r1
 801e5fa:	5c79      	ldrb	r1, [r7, r1]
 801e5fc:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801e600:	910b      	str	r1, [sp, #44]	; 0x2c
 801e602:	0e09      	lsrs	r1, r1, #24
 801e604:	9114      	str	r1, [sp, #80]	; 0x50
 801e606:	f89e 1001 	ldrb.w	r1, [lr, #1]
 801e60a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801e60e:	9111      	str	r1, [sp, #68]	; 0x44
 801e610:	0e09      	lsrs	r1, r1, #24
 801e612:	9118      	str	r1, [sp, #96]	; 0x60
 801e614:	b292      	uxth	r2, r2
 801e616:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801e618:	b280      	uxth	r0, r0
 801e61a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801e61c:	fb02 f800 	mul.w	r8, r2, r0
 801e620:	0112      	lsls	r2, r2, #4
 801e622:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 801e626:	eba2 0e08 	sub.w	lr, r2, r8
 801e62a:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801e62e:	b280      	uxth	r0, r0
 801e630:	fa1f fe8e 	uxth.w	lr, lr
 801e634:	1a12      	subs	r2, r2, r0
 801e636:	fb0e f101 	mul.w	r1, lr, r1
 801e63a:	b292      	uxth	r2, r2
 801e63c:	fb02 110c 	mla	r1, r2, ip, r1
 801e640:	fb00 1104 	mla	r1, r0, r4, r1
 801e644:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801e646:	fb08 1104 	mla	r1, r8, r4, r1
 801e64a:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801e64e:	2900      	cmp	r1, #0
 801e650:	f000 80f5 	beq.w	801e83e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72e>
 801e654:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801e658:	d019      	beq.n	801e68e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57e>
 801e65a:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801e65e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801e662:	fb0c fa0a 	mul.w	sl, ip, sl
 801e666:	fb0c fc03 	mul.w	ip, ip, r3
 801e66a:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801e66e:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801e672:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 801e676:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801e67a:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801e67e:	4453      	add	r3, sl
 801e680:	0a3f      	lsrs	r7, r7, #8
 801e682:	0a1b      	lsrs	r3, r3, #8
 801e684:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801e688:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801e68c:	433b      	orrs	r3, r7
 801e68e:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801e690:	2cff      	cmp	r4, #255	; 0xff
 801e692:	d020      	beq.n	801e6d6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c6>
 801e694:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801e696:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801e69a:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801e69c:	4367      	muls	r7, r4
 801e69e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801e6a0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801e6a4:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801e6a8:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801e6aa:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801e6ae:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e6b2:	fb04 fa0a 	mul.w	sl, r4, sl
 801e6b6:	44bc      	add	ip, r7
 801e6b8:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801e6bc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e6c0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801e6c4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e6c8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e6cc:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801e6d0:	ea4c 040a 	orr.w	r4, ip, sl
 801e6d4:	9410      	str	r4, [sp, #64]	; 0x40
 801e6d6:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801e6d8:	2cff      	cmp	r4, #255	; 0xff
 801e6da:	d020      	beq.n	801e71e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60e>
 801e6dc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801e6de:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801e6e2:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801e6e4:	4367      	muls	r7, r4
 801e6e6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801e6e8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801e6ec:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801e6f0:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801e6f2:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801e6f6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e6fa:	fb04 fa0a 	mul.w	sl, r4, sl
 801e6fe:	44bc      	add	ip, r7
 801e700:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801e704:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e708:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801e70c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e710:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e714:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801e718:	ea4c 040a 	orr.w	r4, ip, sl
 801e71c:	940b      	str	r4, [sp, #44]	; 0x2c
 801e71e:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801e720:	2cff      	cmp	r4, #255	; 0xff
 801e722:	d020      	beq.n	801e766 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x656>
 801e724:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801e726:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801e72a:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801e72c:	4367      	muls	r7, r4
 801e72e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801e730:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801e734:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801e738:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801e73a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801e73e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e742:	fb04 fa0a 	mul.w	sl, r4, sl
 801e746:	44bc      	add	ip, r7
 801e748:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801e74c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e750:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801e754:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e758:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e75c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801e760:	ea4c 040a 	orr.w	r4, ip, sl
 801e764:	9411      	str	r4, [sp, #68]	; 0x44
 801e766:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801e768:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801e76c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801e770:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801e774:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801e776:	fb0e f707 	mul.w	r7, lr, r7
 801e77a:	fb02 770c 	mla	r7, r2, ip, r7
 801e77e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801e782:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801e784:	fb00 770c 	mla	r7, r0, ip, r7
 801e788:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801e78c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801e78e:	fb08 770c 	mla	r7, r8, ip, r7
 801e792:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 801e796:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801e798:	fb0e fe0c 	mul.w	lr, lr, ip
 801e79c:	0a3f      	lsrs	r7, r7, #8
 801e79e:	fb02 e303 	mla	r3, r2, r3, lr
 801e7a2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801e7a4:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801e7a8:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801e7ac:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e7ae:	fb00 330a 	mla	r3, r0, sl, r3
 801e7b2:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801e7b6:	f8b9 0000 	ldrh.w	r0, [r9]
 801e7ba:	fb08 3c0c 	mla	ip, r8, ip, r3
 801e7be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e7c0:	1202      	asrs	r2, r0, #8
 801e7c2:	434b      	muls	r3, r1
 801e7c4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e7c8:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801e7cc:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801e7d0:	1c59      	adds	r1, r3, #1
 801e7d2:	ea47 070c 	orr.w	r7, r7, ip
 801e7d6:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801e7da:	0c3b      	lsrs	r3, r7, #16
 801e7dc:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801e7e0:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 801e7e4:	b2ff      	uxtb	r7, r7
 801e7e6:	fb13 f304 	smulbb	r3, r3, r4
 801e7ea:	b2c9      	uxtb	r1, r1
 801e7ec:	fb1c fc04 	smulbb	ip, ip, r4
 801e7f0:	fb02 3201 	mla	r2, r2, r1, r3
 801e7f4:	10c3      	asrs	r3, r0, #3
 801e7f6:	fb17 f704 	smulbb	r7, r7, r4
 801e7fa:	00c0      	lsls	r0, r0, #3
 801e7fc:	b292      	uxth	r2, r2
 801e7fe:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 801e802:	b2c0      	uxtb	r0, r0
 801e804:	fb03 c301 	mla	r3, r3, r1, ip
 801e808:	f102 0c01 	add.w	ip, r2, #1
 801e80c:	fb00 7001 	mla	r0, r0, r1, r7
 801e810:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801e814:	b280      	uxth	r0, r0
 801e816:	f402 4c78 	and.w	ip, r2, #63488	; 0xf800
 801e81a:	b29b      	uxth	r3, r3
 801e81c:	1c42      	adds	r2, r0, #1
 801e81e:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 801e822:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801e826:	ea42 020c 	orr.w	r2, r2, ip
 801e82a:	f103 0c01 	add.w	ip, r3, #1
 801e82e:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 801e832:	095b      	lsrs	r3, r3, #5
 801e834:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801e838:	431a      	orrs	r2, r3
 801e83a:	f8a9 2000 	strh.w	r2, [r9]
 801e83e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801e840:	f109 0902 	add.w	r9, r9, #2
 801e844:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801e846:	f10b 3bff 	add.w	fp, fp, #4294967295
 801e84a:	441a      	add	r2, r3
 801e84c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801e84e:	9229      	str	r2, [sp, #164]	; 0xa4
 801e850:	441d      	add	r5, r3
 801e852:	e63d      	b.n	801e4d0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 801e854:	2800      	cmp	r0, #0
 801e856:	f43f aedd 	beq.w	801e614 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 801e85a:	5c79      	ldrb	r1, [r7, r1]
 801e85c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801e860:	910b      	str	r1, [sp, #44]	; 0x2c
 801e862:	0e09      	lsrs	r1, r1, #24
 801e864:	9114      	str	r1, [sp, #80]	; 0x50
 801e866:	e6d5      	b.n	801e614 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 801e868:	b01f      	add	sp, #124	; 0x7c
 801e86a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e86e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
 801e86e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e872:	b089      	sub	sp, #36	; 0x24
 801e874:	9101      	str	r1, [sp, #4]
 801e876:	9801      	ldr	r0, [sp, #4]
 801e878:	f9bd c048 	ldrsh.w	ip, [sp, #72]	; 0x48
 801e87c:	8800      	ldrh	r0, [r0, #0]
 801e87e:	f9bd 804c 	ldrsh.w	r8, [sp, #76]	; 0x4c
 801e882:	1206      	asrs	r6, r0, #8
 801e884:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 801e888:	f89d 405c 	ldrb.w	r4, [sp, #92]	; 0x5c
 801e88c:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801e890:	9602      	str	r6, [sp, #8]
 801e892:	10c6      	asrs	r6, r0, #3
 801e894:	00c0      	lsls	r0, r0, #3
 801e896:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801e89a:	b2c0      	uxtb	r0, r0
 801e89c:	9603      	str	r6, [sp, #12]
 801e89e:	9004      	str	r0, [sp, #16]
 801e8a0:	e9dd 1714 	ldrd	r1, r7, [sp, #80]	; 0x50
 801e8a4:	fb07 100c 	mla	r0, r7, ip, r1
 801e8a8:	2f00      	cmp	r7, #0
 801e8aa:	eb02 0e00 	add.w	lr, r2, r0
 801e8ae:	f2c0 810a 	blt.w	801eac6 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
 801e8b2:	45b8      	cmp	r8, r7
 801e8b4:	f340 8107 	ble.w	801eac6 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
 801e8b8:	2900      	cmp	r1, #0
 801e8ba:	f2c0 8102 	blt.w	801eac2 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
 801e8be:	458c      	cmp	ip, r1
 801e8c0:	f340 80ff 	ble.w	801eac2 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
 801e8c4:	5c12      	ldrb	r2, [r2, r0]
 801e8c6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801e8ca:	1c4a      	adds	r2, r1, #1
 801e8cc:	f100 80fe 	bmi.w	801eacc <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
 801e8d0:	4594      	cmp	ip, r2
 801e8d2:	f340 80fb 	ble.w	801eacc <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
 801e8d6:	2d00      	cmp	r5, #0
 801e8d8:	f000 80fa 	beq.w	801ead0 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x262>
 801e8dc:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801e8e0:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801e8e4:	3701      	adds	r7, #1
 801e8e6:	f100 80f7 	bmi.w	801ead8 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
 801e8ea:	45b8      	cmp	r8, r7
 801e8ec:	f340 80f4 	ble.w	801ead8 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
 801e8f0:	2c00      	cmp	r4, #0
 801e8f2:	f000 80f4 	beq.w	801eade <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x270>
 801e8f6:	2900      	cmp	r1, #0
 801e8f8:	eb0e 020c 	add.w	r2, lr, ip
 801e8fc:	f2c0 80ea 	blt.w	801ead4 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
 801e900:	458c      	cmp	ip, r1
 801e902:	f340 80e7 	ble.w	801ead4 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
 801e906:	f81e 700c 	ldrb.w	r7, [lr, ip]
 801e90a:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 801e90e:	3101      	adds	r1, #1
 801e910:	f100 80e8 	bmi.w	801eae4 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
 801e914:	458c      	cmp	ip, r1
 801e916:	f340 80e5 	ble.w	801eae4 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
 801e91a:	2d00      	cmp	r5, #0
 801e91c:	f000 80e4 	beq.w	801eae8 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x27a>
 801e920:	7852      	ldrb	r2, [r2, #1]
 801e922:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801e926:	0e0b      	lsrs	r3, r1, #24
 801e928:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 801e92c:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 801e930:	9300      	str	r3, [sp, #0]
 801e932:	b2a4      	uxth	r4, r4
 801e934:	b2ab      	uxth	r3, r5
 801e936:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 801e93a:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 801e93e:	fb03 f904 	mul.w	r9, r3, r4
 801e942:	011b      	lsls	r3, r3, #4
 801e944:	fb0a f505 	mul.w	r5, sl, r5
 801e948:	ea4f 6817 	mov.w	r8, r7, lsr #24
 801e94c:	eba3 0e09 	sub.w	lr, r3, r9
 801e950:	f5c3 7280 	rsb	r2, r3, #256	; 0x100
 801e954:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
 801e958:	0a28      	lsrs	r0, r5, #8
 801e95a:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 801e95e:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801e962:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801e966:	fb0a f303 	mul.w	r3, sl, r3
 801e96a:	fb08 f707 	mul.w	r7, r8, r7
 801e96e:	ebc9 1404 	rsb	r4, r9, r4, lsl #4
 801e972:	4405      	add	r5, r0
 801e974:	fb08 fc0c 	mul.w	ip, r8, ip
 801e978:	b2a4      	uxth	r4, r4
 801e97a:	0a2d      	lsrs	r5, r5, #8
 801e97c:	fa1f fe8e 	uxth.w	lr, lr
 801e980:	1b12      	subs	r2, r2, r4
 801e982:	f005 10ff 	and.w	r0, r5, #16711935	; 0xff00ff
 801e986:	b292      	uxth	r2, r2
 801e988:	9005      	str	r0, [sp, #20]
 801e98a:	f503 7080 	add.w	r0, r3, #256	; 0x100
 801e98e:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801e992:	ea4f 201c 	mov.w	r0, ip, lsr #8
 801e996:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801e99a:	0a1b      	lsrs	r3, r3, #8
 801e99c:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801e9a0:	9306      	str	r3, [sp, #24]
 801e9a2:	f006 13ff 	and.w	r3, r6, #16711935	; 0xff00ff
 801e9a6:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801e9aa:	4460      	add	r0, ip
 801e9ac:	fb0b f303 	mul.w	r3, fp, r3
 801e9b0:	fb0b f606 	mul.w	r6, fp, r6
 801e9b4:	0a00      	lsrs	r0, r0, #8
 801e9b6:	0a1d      	lsrs	r5, r3, #8
 801e9b8:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 801e9bc:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801e9c0:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801e9c4:	441d      	add	r5, r3
 801e9c6:	f506 7380 	add.w	r3, r6, #256	; 0x100
 801e9ca:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801e9ce:	f507 7380 	add.w	r3, r7, #256	; 0x100
 801e9d2:	0a2d      	lsrs	r5, r5, #8
 801e9d4:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 801e9d8:	f001 17ff 	and.w	r7, r1, #16711935	; 0xff00ff
 801e9dc:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801e9e0:	0a36      	lsrs	r6, r6, #8
 801e9e2:	0a1b      	lsrs	r3, r3, #8
 801e9e4:	fb05 f50e 	mul.w	r5, r5, lr
 801e9e8:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801e9ec:	9307      	str	r3, [sp, #28]
 801e9ee:	0e0b      	lsrs	r3, r1, #24
 801e9f0:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 801e9f4:	fb0e f606 	mul.w	r6, lr, r6
 801e9f8:	435f      	muls	r7, r3
 801e9fa:	4359      	muls	r1, r3
 801e9fc:	9b05      	ldr	r3, [sp, #20]
 801e9fe:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801ea02:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801ea06:	fb03 5502 	mla	r5, r3, r2, r5
 801ea0a:	9b06      	ldr	r3, [sp, #24]
 801ea0c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ea10:	fb0e fe0b 	mul.w	lr, lr, fp
 801ea14:	44bc      	add	ip, r7
 801ea16:	f501 7780 	add.w	r7, r1, #256	; 0x100
 801ea1a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ea1e:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 801ea22:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ea26:	0a09      	lsrs	r1, r1, #8
 801ea28:	fb0c 5509 	mla	r5, ip, r9, r5
 801ea2c:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 801ea30:	fb00 5504 	mla	r5, r0, r4, r5
 801ea34:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
 801ea38:	9b07      	ldr	r3, [sp, #28]
 801ea3a:	fb02 6000 	mla	r0, r2, r0, r6
 801ea3e:	0a2d      	lsrs	r5, r5, #8
 801ea40:	fb02 e20a 	mla	r2, r2, sl, lr
 801ea44:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801ea48:	fb09 0001 	mla	r0, r9, r1, r0
 801ea4c:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801ea50:	fb04 0003 	mla	r0, r4, r3, r0
 801ea54:	9b00      	ldr	r3, [sp, #0]
 801ea56:	fb04 2408 	mla	r4, r4, r8, r2
 801ea5a:	9a04      	ldr	r2, [sp, #16]
 801ea5c:	0a00      	lsrs	r0, r0, #8
 801ea5e:	fb09 4903 	mla	r9, r9, r3, r4
 801ea62:	9b02      	ldr	r3, [sp, #8]
 801ea64:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801ea68:	ea6f 2929 	mvn.w	r9, r9, asr #8
 801ea6c:	4305      	orrs	r5, r0
 801ea6e:	fa5f f989 	uxtb.w	r9, r9
 801ea72:	fb03 f109 	mul.w	r1, r3, r9
 801ea76:	9b03      	ldr	r3, [sp, #12]
 801ea78:	fb03 f309 	mul.w	r3, r3, r9
 801ea7c:	fb02 f909 	mul.w	r9, r2, r9
 801ea80:	1c4a      	adds	r2, r1, #1
 801ea82:	1c58      	adds	r0, r3, #1
 801ea84:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801ea88:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801ea8c:	0c2a      	lsrs	r2, r5, #16
 801ea8e:	0a2b      	lsrs	r3, r5, #8
 801ea90:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 801ea94:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801ea98:	0212      	lsls	r2, r2, #8
 801ea9a:	00db      	lsls	r3, r3, #3
 801ea9c:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 801eaa0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801eaa4:	4313      	orrs	r3, r2
 801eaa6:	f109 0201 	add.w	r2, r9, #1
 801eaaa:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 801eaae:	eb05 2519 	add.w	r5, r5, r9, lsr #8
 801eab2:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801eab6:	431d      	orrs	r5, r3
 801eab8:	9b01      	ldr	r3, [sp, #4]
 801eaba:	801d      	strh	r5, [r3, #0]
 801eabc:	b009      	add	sp, #36	; 0x24
 801eabe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eac2:	2000      	movs	r0, #0
 801eac4:	e701      	b.n	801e8ca <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x5c>
 801eac6:	2600      	movs	r6, #0
 801eac8:	4630      	mov	r0, r6
 801eaca:	e70b      	b.n	801e8e4 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 801eacc:	2600      	movs	r6, #0
 801eace:	e709      	b.n	801e8e4 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 801ead0:	462e      	mov	r6, r5
 801ead2:	e707      	b.n	801e8e4 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 801ead4:	2700      	movs	r7, #0
 801ead6:	e71a      	b.n	801e90e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xa0>
 801ead8:	2100      	movs	r1, #0
 801eada:	460f      	mov	r7, r1
 801eadc:	e723      	b.n	801e926 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 801eade:	4621      	mov	r1, r4
 801eae0:	4627      	mov	r7, r4
 801eae2:	e720      	b.n	801e926 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 801eae4:	2100      	movs	r1, #0
 801eae6:	e71e      	b.n	801e926 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 801eae8:	4629      	mov	r1, r5
 801eaea:	e71c      	b.n	801e926 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>

0801eaec <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801eaec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eaf0:	b09b      	sub	sp, #108	; 0x6c
 801eaf2:	9218      	str	r2, [sp, #96]	; 0x60
 801eaf4:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801eaf6:	9019      	str	r0, [sp, #100]	; 0x64
 801eaf8:	9116      	str	r1, [sp, #88]	; 0x58
 801eafa:	6850      	ldr	r0, [r2, #4]
 801eafc:	9307      	str	r3, [sp, #28]
 801eafe:	6812      	ldr	r2, [r2, #0]
 801eb00:	9d26      	ldr	r5, [sp, #152]	; 0x98
 801eb02:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 801eb06:	fb00 1303 	mla	r3, r0, r3, r1
 801eb0a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801eb0e:	930a      	str	r3, [sp, #40]	; 0x28
 801eb10:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801eb12:	681b      	ldr	r3, [r3, #0]
 801eb14:	930f      	str	r3, [sp, #60]	; 0x3c
 801eb16:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801eb18:	685e      	ldr	r6, [r3, #4]
 801eb1a:	3604      	adds	r6, #4
 801eb1c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801eb1e:	2b00      	cmp	r3, #0
 801eb20:	dc03      	bgt.n	801eb2a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801eb22:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801eb24:	2b00      	cmp	r3, #0
 801eb26:	f340 8373 	ble.w	801f210 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
 801eb2a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801eb2c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801eb30:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801eb34:	1e48      	subs	r0, r1, #1
 801eb36:	1e57      	subs	r7, r2, #1
 801eb38:	9b07      	ldr	r3, [sp, #28]
 801eb3a:	2b00      	cmp	r3, #0
 801eb3c:	f340 818f 	ble.w	801ee5e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
 801eb40:	9c25      	ldr	r4, [sp, #148]	; 0x94
 801eb42:	142b      	asrs	r3, r5, #16
 801eb44:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801eb48:	d406      	bmi.n	801eb58 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801eb4a:	4584      	cmp	ip, r0
 801eb4c:	da04      	bge.n	801eb58 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801eb4e:	2b00      	cmp	r3, #0
 801eb50:	db02      	blt.n	801eb58 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801eb52:	42bb      	cmp	r3, r7
 801eb54:	f2c0 8184 	blt.w	801ee60 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 801eb58:	f11c 0c01 	adds.w	ip, ip, #1
 801eb5c:	f100 8172 	bmi.w	801ee44 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801eb60:	4561      	cmp	r1, ip
 801eb62:	f2c0 816f 	blt.w	801ee44 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801eb66:	3301      	adds	r3, #1
 801eb68:	f100 816c 	bmi.w	801ee44 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801eb6c:	429a      	cmp	r2, r3
 801eb6e:	f2c0 8169 	blt.w	801ee44 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801eb72:	9b07      	ldr	r3, [sp, #28]
 801eb74:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801eb76:	9317      	str	r3, [sp, #92]	; 0x5c
 801eb78:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801eb7a:	2b00      	cmp	r3, #0
 801eb7c:	f340 818e 	ble.w	801ee9c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b0>
 801eb80:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801eb82:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801eb86:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801eb8a:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801eb8e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801eb90:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 801eb94:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801eb96:	141b      	asrs	r3, r3, #16
 801eb98:	f100 81d1 	bmi.w	801ef3e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 801eb9c:	f101 38ff 	add.w	r8, r1, #4294967295
 801eba0:	4543      	cmp	r3, r8
 801eba2:	f280 81cc 	bge.w	801ef3e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 801eba6:	f1bc 0f00 	cmp.w	ip, #0
 801ebaa:	f2c0 81c8 	blt.w	801ef3e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 801ebae:	f10e 38ff 	add.w	r8, lr, #4294967295
 801ebb2:	45c4      	cmp	ip, r8
 801ebb4:	f280 81c3 	bge.w	801ef3e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 801ebb8:	b209      	sxth	r1, r1
 801ebba:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801ebbc:	fb0c 3301 	mla	r3, ip, r1, r3
 801ebc0:	eb04 0803 	add.w	r8, r4, r3
 801ebc4:	5ce3      	ldrb	r3, [r4, r3]
 801ebc6:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801ebca:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801ebce:	2a00      	cmp	r2, #0
 801ebd0:	f000 81aa 	beq.w	801ef28 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x43c>
 801ebd4:	f898 c001 	ldrb.w	ip, [r8, #1]
 801ebd8:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 801ebdc:	940b      	str	r4, [sp, #44]	; 0x2c
 801ebde:	0e24      	lsrs	r4, r4, #24
 801ebe0:	9412      	str	r4, [sp, #72]	; 0x48
 801ebe2:	b178      	cbz	r0, 801ec04 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801ebe4:	eb08 0c01 	add.w	ip, r8, r1
 801ebe8:	f818 1001 	ldrb.w	r1, [r8, r1]
 801ebec:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801ebf0:	9108      	str	r1, [sp, #32]
 801ebf2:	0e09      	lsrs	r1, r1, #24
 801ebf4:	9110      	str	r1, [sp, #64]	; 0x40
 801ebf6:	f89c 1001 	ldrb.w	r1, [ip, #1]
 801ebfa:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801ebfe:	910c      	str	r1, [sp, #48]	; 0x30
 801ec00:	0e09      	lsrs	r1, r1, #24
 801ec02:	9113      	str	r1, [sp, #76]	; 0x4c
 801ec04:	b292      	uxth	r2, r2
 801ec06:	9912      	ldr	r1, [sp, #72]	; 0x48
 801ec08:	b280      	uxth	r0, r0
 801ec0a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801ec0c:	fb02 f900 	mul.w	r9, r2, r0
 801ec10:	0112      	lsls	r2, r2, #4
 801ec12:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801ec16:	eba2 0809 	sub.w	r8, r2, r9
 801ec1a:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801ec1e:	b280      	uxth	r0, r0
 801ec20:	fa1f f888 	uxth.w	r8, r8
 801ec24:	1a12      	subs	r2, r2, r0
 801ec26:	fb08 f101 	mul.w	r1, r8, r1
 801ec2a:	b292      	uxth	r2, r2
 801ec2c:	fb02 110e 	mla	r1, r2, lr, r1
 801ec30:	fb00 1104 	mla	r1, r0, r4, r1
 801ec34:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801ec36:	fb09 1104 	mla	r1, r9, r4, r1
 801ec3a:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801ec3e:	2900      	cmp	r1, #0
 801ec40:	f000 80f5 	beq.w	801ee2e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 801ec44:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801ec48:	d01b      	beq.n	801ec82 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 801ec4a:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801ec4e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801ec52:	fb0e fa0a 	mul.w	sl, lr, sl
 801ec56:	fb0e fe03 	mul.w	lr, lr, r3
 801ec5a:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801ec5e:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801ec62:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801ec66:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801ec6a:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801ec6e:	4453      	add	r3, sl
 801ec70:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ec74:	0a1b      	lsrs	r3, r3, #8
 801ec76:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801ec7a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801ec7e:	ea43 030c 	orr.w	r3, r3, ip
 801ec82:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801ec84:	2cff      	cmp	r4, #255	; 0xff
 801ec86:	d021      	beq.n	801eccc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801ec88:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801ec8a:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801ec8e:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801ec90:	fb04 fb0b 	mul.w	fp, r4, fp
 801ec94:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801ec96:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801ec9a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801ec9c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801eca0:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801eca4:	fb04 fa0a 	mul.w	sl, r4, sl
 801eca8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801ecac:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801ecb0:	44de      	add	lr, fp
 801ecb2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801ecb6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ecba:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ecbe:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801ecc2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801ecc6:	ea4e 040a 	orr.w	r4, lr, sl
 801ecca:	940b      	str	r4, [sp, #44]	; 0x2c
 801eccc:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801ecce:	2cff      	cmp	r4, #255	; 0xff
 801ecd0:	d021      	beq.n	801ed16 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801ecd2:	9c08      	ldr	r4, [sp, #32]
 801ecd4:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801ecd8:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801ecda:	fb04 fb0b 	mul.w	fp, r4, fp
 801ecde:	9c08      	ldr	r4, [sp, #32]
 801ece0:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801ece4:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801ece6:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801ecea:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801ecee:	fb04 fa0a 	mul.w	sl, r4, sl
 801ecf2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801ecf6:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801ecfa:	44de      	add	lr, fp
 801ecfc:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801ed00:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ed04:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ed08:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801ed0c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801ed10:	ea4e 040a 	orr.w	r4, lr, sl
 801ed14:	9408      	str	r4, [sp, #32]
 801ed16:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801ed18:	2cff      	cmp	r4, #255	; 0xff
 801ed1a:	d021      	beq.n	801ed60 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 801ed1c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801ed1e:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801ed22:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801ed24:	fb04 fb0b 	mul.w	fp, r4, fp
 801ed28:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801ed2a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801ed2e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801ed30:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801ed34:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801ed38:	fb04 fa0a 	mul.w	sl, r4, sl
 801ed3c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801ed40:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801ed44:	44de      	add	lr, fp
 801ed46:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801ed4a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ed4e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ed52:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801ed56:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801ed5a:	ea4e 040a 	orr.w	r4, lr, sl
 801ed5e:	940c      	str	r4, [sp, #48]	; 0x30
 801ed60:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801ed62:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801ed66:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801ed6a:	43c9      	mvns	r1, r1
 801ed6c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801ed70:	9c08      	ldr	r4, [sp, #32]
 801ed72:	fb08 fc0c 	mul.w	ip, r8, ip
 801ed76:	fb02 cc0e 	mla	ip, r2, lr, ip
 801ed7a:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801ed7e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801ed80:	fb00 cc0e 	mla	ip, r0, lr, ip
 801ed84:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801ed88:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801ed8a:	fb09 cc0e 	mla	ip, r9, lr, ip
 801ed8e:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801ed92:	fb08 f80e 	mul.w	r8, r8, lr
 801ed96:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ed9a:	fa5f fe81 	uxtb.w	lr, r1
 801ed9e:	fb02 8303 	mla	r3, r2, r3, r8
 801eda2:	9a08      	ldr	r2, [sp, #32]
 801eda4:	f8b7 8000 	ldrh.w	r8, [r7]
 801eda8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801edac:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801edb0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801edb2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 801edb6:	fb00 330a 	mla	r3, r0, sl, r3
 801edba:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 801edbe:	ea4f 2228 	mov.w	r2, r8, asr #8
 801edc2:	fb09 3900 	mla	r9, r9, r0, r3
 801edc6:	ea4f 00e8 	mov.w	r0, r8, asr #3
 801edca:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801edce:	b2c9      	uxtb	r1, r1
 801edd0:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801edd4:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801edd8:	fb02 f20e 	mul.w	r2, r2, lr
 801eddc:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801ede0:	fb00 f00e 	mul.w	r0, r0, lr
 801ede4:	1c53      	adds	r3, r2, #1
 801ede6:	fb01 f10e 	mul.w	r1, r1, lr
 801edea:	ea4c 0c09 	orr.w	ip, ip, r9
 801edee:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801edf2:	ea4f 431c 	mov.w	r3, ip, lsr #16
 801edf6:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801edfa:	4a60      	ldr	r2, [pc, #384]	; (801ef7c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>)
 801edfc:	b2db      	uxtb	r3, r3
 801edfe:	ea02 2203 	and.w	r2, r2, r3, lsl #8
 801ee02:	1c43      	adds	r3, r0, #1
 801ee04:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801ee08:	ea4f 231c 	mov.w	r3, ip, lsr #8
 801ee0c:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801ee10:	00db      	lsls	r3, r3, #3
 801ee12:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801ee16:	4313      	orrs	r3, r2
 801ee18:	1c4a      	adds	r2, r1, #1
 801ee1a:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801ee1e:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 801ee22:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 801ee26:	ea4c 0c03 	orr.w	ip, ip, r3
 801ee2a:	f8a7 c000 	strh.w	ip, [r7]
 801ee2e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801ee30:	3702      	adds	r7, #2
 801ee32:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801ee34:	441a      	add	r2, r3
 801ee36:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ee38:	441d      	add	r5, r3
 801ee3a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801ee3c:	9225      	str	r2, [sp, #148]	; 0x94
 801ee3e:	3b01      	subs	r3, #1
 801ee40:	9317      	str	r3, [sp, #92]	; 0x5c
 801ee42:	e699      	b.n	801eb78 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801ee44:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801ee46:	9c25      	ldr	r4, [sp, #148]	; 0x94
 801ee48:	441c      	add	r4, r3
 801ee4a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ee4c:	441d      	add	r5, r3
 801ee4e:	9b07      	ldr	r3, [sp, #28]
 801ee50:	9425      	str	r4, [sp, #148]	; 0x94
 801ee52:	3b01      	subs	r3, #1
 801ee54:	9307      	str	r3, [sp, #28]
 801ee56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ee58:	3302      	adds	r3, #2
 801ee5a:	930a      	str	r3, [sp, #40]	; 0x28
 801ee5c:	e66c      	b.n	801eb38 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801ee5e:	d024      	beq.n	801eeaa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3be>
 801ee60:	9b07      	ldr	r3, [sp, #28]
 801ee62:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801ee64:	3b01      	subs	r3, #1
 801ee66:	9c25      	ldr	r4, [sp, #148]	; 0x94
 801ee68:	fb00 4003 	mla	r0, r0, r3, r4
 801ee6c:	1400      	asrs	r0, r0, #16
 801ee6e:	f53f ae80 	bmi.w	801eb72 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801ee72:	3901      	subs	r1, #1
 801ee74:	4288      	cmp	r0, r1
 801ee76:	f6bf ae7c 	bge.w	801eb72 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801ee7a:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801ee7c:	fb01 5303 	mla	r3, r1, r3, r5
 801ee80:	141b      	asrs	r3, r3, #16
 801ee82:	f53f ae76 	bmi.w	801eb72 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801ee86:	3a01      	subs	r2, #1
 801ee88:	4293      	cmp	r3, r2
 801ee8a:	f6bf ae72 	bge.w	801eb72 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801ee8e:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801ee92:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 801ee96:	f1bb 0f00 	cmp.w	fp, #0
 801ee9a:	dc71      	bgt.n	801ef80 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 801ee9c:	9b07      	ldr	r3, [sp, #28]
 801ee9e:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801eea2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801eea4:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 801eea8:	930a      	str	r3, [sp, #40]	; 0x28
 801eeaa:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801eeac:	2b00      	cmp	r3, #0
 801eeae:	f340 81af 	ble.w	801f210 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
 801eeb2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801eeb6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801eeb8:	ee30 0a04 	vadd.f32	s0, s0, s8
 801eebc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801eec0:	eef0 6a62 	vmov.f32	s13, s5
 801eec4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801eec8:	ee31 1a05 	vadd.f32	s2, s2, s10
 801eecc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801eed0:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
 801eed4:	eef0 6a43 	vmov.f32	s13, s6
 801eed8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801eedc:	ee16 5a90 	vmov	r5, s13
 801eee0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801eee4:	ee61 7a27 	vmul.f32	s15, s2, s15
 801eee8:	ee77 2a62 	vsub.f32	s5, s14, s5
 801eeec:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801eef0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801eef4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801eef8:	ee12 2a90 	vmov	r2, s5
 801eefc:	eef0 2a47 	vmov.f32	s5, s14
 801ef00:	fb92 f3f3 	sdiv	r3, r2, r3
 801ef04:	ee13 2a10 	vmov	r2, s6
 801ef08:	9327      	str	r3, [sp, #156]	; 0x9c
 801ef0a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801ef0c:	eeb0 3a67 	vmov.f32	s6, s15
 801ef10:	fb92 f3f3 	sdiv	r3, r2, r3
 801ef14:	9328      	str	r3, [sp, #160]	; 0xa0
 801ef16:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801ef18:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801ef1a:	3b01      	subs	r3, #1
 801ef1c:	9316      	str	r3, [sp, #88]	; 0x58
 801ef1e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801ef20:	bf08      	it	eq
 801ef22:	4613      	moveq	r3, r2
 801ef24:	9307      	str	r3, [sp, #28]
 801ef26:	e5f9      	b.n	801eb1c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801ef28:	2800      	cmp	r0, #0
 801ef2a:	f43f ae6b 	beq.w	801ec04 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801ef2e:	f818 1001 	ldrb.w	r1, [r8, r1]
 801ef32:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801ef36:	9108      	str	r1, [sp, #32]
 801ef38:	0e09      	lsrs	r1, r1, #24
 801ef3a:	9110      	str	r1, [sp, #64]	; 0x40
 801ef3c:	e662      	b.n	801ec04 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801ef3e:	f113 0801 	adds.w	r8, r3, #1
 801ef42:	f53f af74 	bmi.w	801ee2e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 801ef46:	4541      	cmp	r1, r8
 801ef48:	f6ff af71 	blt.w	801ee2e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 801ef4c:	f11c 0801 	adds.w	r8, ip, #1
 801ef50:	f53f af6d 	bmi.w	801ee2e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 801ef54:	45c6      	cmp	lr, r8
 801ef56:	f6ff af6a 	blt.w	801ee2e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 801ef5a:	b209      	sxth	r1, r1
 801ef5c:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 801ef60:	fa0f f38e 	sxth.w	r3, lr
 801ef64:	9100      	str	r1, [sp, #0]
 801ef66:	4639      	mov	r1, r7
 801ef68:	9301      	str	r3, [sp, #4]
 801ef6a:	4633      	mov	r3, r6
 801ef6c:	e9cd 2004 	strd	r2, r0, [sp, #16]
 801ef70:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ef72:	9819      	ldr	r0, [sp, #100]	; 0x64
 801ef74:	f7ff fc7b 	bl	801e86e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
 801ef78:	e759      	b.n	801ee2e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 801ef7a:	bf00      	nop
 801ef7c:	fffff800 	.word	0xfffff800
 801ef80:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801ef82:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801ef86:	9c25      	ldr	r4, [sp, #148]	; 0x94
 801ef88:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801ef8c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801ef8e:	1427      	asrs	r7, r4, #16
 801ef90:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801ef92:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801ef96:	142b      	asrs	r3, r5, #16
 801ef98:	fb01 7303 	mla	r3, r1, r3, r7
 801ef9c:	18e7      	adds	r7, r4, r3
 801ef9e:	5ce3      	ldrb	r3, [r4, r3]
 801efa0:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801efa4:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801efa8:	2a00      	cmp	r2, #0
 801efaa:	f000 8127 	beq.w	801f1fc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
 801efae:	f897 e001 	ldrb.w	lr, [r7, #1]
 801efb2:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 801efb6:	940d      	str	r4, [sp, #52]	; 0x34
 801efb8:	0e24      	lsrs	r4, r4, #24
 801efba:	9414      	str	r4, [sp, #80]	; 0x50
 801efbc:	b170      	cbz	r0, 801efdc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 801efbe:	eb07 0e01 	add.w	lr, r7, r1
 801efc2:	5c79      	ldrb	r1, [r7, r1]
 801efc4:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801efc8:	9109      	str	r1, [sp, #36]	; 0x24
 801efca:	0e09      	lsrs	r1, r1, #24
 801efcc:	9111      	str	r1, [sp, #68]	; 0x44
 801efce:	f89e 1001 	ldrb.w	r1, [lr, #1]
 801efd2:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801efd6:	910e      	str	r1, [sp, #56]	; 0x38
 801efd8:	0e09      	lsrs	r1, r1, #24
 801efda:	9115      	str	r1, [sp, #84]	; 0x54
 801efdc:	b292      	uxth	r2, r2
 801efde:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801efe0:	b280      	uxth	r0, r0
 801efe2:	fb02 f800 	mul.w	r8, r2, r0
 801efe6:	0112      	lsls	r2, r2, #4
 801efe8:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 801efec:	eba2 0e08 	sub.w	lr, r2, r8
 801eff0:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 801eff4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801eff6:	b280      	uxth	r0, r0
 801eff8:	fa1f fe8e 	uxth.w	lr, lr
 801effc:	1a09      	subs	r1, r1, r0
 801effe:	fb0e f202 	mul.w	r2, lr, r2
 801f002:	b289      	uxth	r1, r1
 801f004:	fb01 220c 	mla	r2, r1, ip, r2
 801f008:	fb00 2204 	mla	r2, r0, r4, r2
 801f00c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801f00e:	fb08 2204 	mla	r2, r8, r4, r2
 801f012:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801f016:	2a00      	cmp	r2, #0
 801f018:	f000 80e5 	beq.w	801f1e6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fa>
 801f01c:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801f020:	d019      	beq.n	801f056 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56a>
 801f022:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801f026:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f02a:	fb0c fa0a 	mul.w	sl, ip, sl
 801f02e:	fb0c fc03 	mul.w	ip, ip, r3
 801f032:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801f036:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801f03a:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 801f03e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801f042:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801f046:	4453      	add	r3, sl
 801f048:	0a3f      	lsrs	r7, r7, #8
 801f04a:	0a1b      	lsrs	r3, r3, #8
 801f04c:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801f050:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801f054:	433b      	orrs	r3, r7
 801f056:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801f058:	2cff      	cmp	r4, #255	; 0xff
 801f05a:	d020      	beq.n	801f09e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5b2>
 801f05c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801f05e:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801f062:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801f064:	4367      	muls	r7, r4
 801f066:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801f068:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801f06c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801f070:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801f072:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801f076:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f07a:	fb04 fa0a 	mul.w	sl, r4, sl
 801f07e:	44bc      	add	ip, r7
 801f080:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801f084:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f088:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801f08c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f090:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f094:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801f098:	ea4c 040a 	orr.w	r4, ip, sl
 801f09c:	940d      	str	r4, [sp, #52]	; 0x34
 801f09e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801f0a0:	2cff      	cmp	r4, #255	; 0xff
 801f0a2:	d020      	beq.n	801f0e6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5fa>
 801f0a4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801f0a6:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801f0aa:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801f0ac:	4367      	muls	r7, r4
 801f0ae:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801f0b0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801f0b4:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801f0b8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801f0ba:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801f0be:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f0c2:	fb04 fa0a 	mul.w	sl, r4, sl
 801f0c6:	44bc      	add	ip, r7
 801f0c8:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801f0cc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f0d0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801f0d4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f0d8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f0dc:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801f0e0:	ea4c 040a 	orr.w	r4, ip, sl
 801f0e4:	9409      	str	r4, [sp, #36]	; 0x24
 801f0e6:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801f0e8:	2cff      	cmp	r4, #255	; 0xff
 801f0ea:	d020      	beq.n	801f12e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x642>
 801f0ec:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801f0ee:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801f0f2:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801f0f4:	4367      	muls	r7, r4
 801f0f6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801f0f8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801f0fc:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801f100:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801f102:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801f106:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f10a:	fb04 fa0a 	mul.w	sl, r4, sl
 801f10e:	44bc      	add	ip, r7
 801f110:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801f114:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f118:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801f11c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f120:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f124:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801f128:	ea4c 040a 	orr.w	r4, ip, sl
 801f12c:	940e      	str	r4, [sp, #56]	; 0x38
 801f12e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801f130:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801f134:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f138:	43d2      	mvns	r2, r2
 801f13a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801f13e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801f140:	b2d2      	uxtb	r2, r2
 801f142:	fb0e f707 	mul.w	r7, lr, r7
 801f146:	fb01 770c 	mla	r7, r1, ip, r7
 801f14a:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801f14e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801f150:	fb00 770c 	mla	r7, r0, ip, r7
 801f154:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801f158:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801f15a:	fb08 770c 	mla	r7, r8, ip, r7
 801f15e:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 801f162:	fb0e fe0c 	mul.w	lr, lr, ip
 801f166:	0a3f      	lsrs	r7, r7, #8
 801f168:	fb01 e303 	mla	r3, r1, r3, lr
 801f16c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801f16e:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801f172:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 801f176:	990e      	ldr	r1, [sp, #56]	; 0x38
 801f178:	fb00 330a 	mla	r3, r0, sl, r3
 801f17c:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 801f180:	fb08 3c0c 	mla	ip, r8, ip, r3
 801f184:	f8b9 3000 	ldrh.w	r3, [r9]
 801f188:	1218      	asrs	r0, r3, #8
 801f18a:	10d9      	asrs	r1, r3, #3
 801f18c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f190:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801f194:	00db      	lsls	r3, r3, #3
 801f196:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801f19a:	4350      	muls	r0, r2
 801f19c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801f1a0:	b2db      	uxtb	r3, r3
 801f1a2:	4351      	muls	r1, r2
 801f1a4:	ea47 070c 	orr.w	r7, r7, ip
 801f1a8:	4353      	muls	r3, r2
 801f1aa:	1c42      	adds	r2, r0, #1
 801f1ac:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801f1b0:	0c3a      	lsrs	r2, r7, #16
 801f1b2:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801f1b6:	4a18      	ldr	r2, [pc, #96]	; (801f218 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72c>)
 801f1b8:	b2c0      	uxtb	r0, r0
 801f1ba:	ea02 2000 	and.w	r0, r2, r0, lsl #8
 801f1be:	1c4a      	adds	r2, r1, #1
 801f1c0:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801f1c4:	0a3a      	lsrs	r2, r7, #8
 801f1c6:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801f1ca:	00c9      	lsls	r1, r1, #3
 801f1cc:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801f1d0:	4301      	orrs	r1, r0
 801f1d2:	1c58      	adds	r0, r3, #1
 801f1d4:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801f1d8:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 801f1dc:	f3c7 00c4 	ubfx	r0, r7, #3, #5
 801f1e0:	4308      	orrs	r0, r1
 801f1e2:	f8a9 0000 	strh.w	r0, [r9]
 801f1e6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801f1e8:	f109 0902 	add.w	r9, r9, #2
 801f1ec:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801f1ee:	f10b 3bff 	add.w	fp, fp, #4294967295
 801f1f2:	441a      	add	r2, r3
 801f1f4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f1f6:	9225      	str	r2, [sp, #148]	; 0x94
 801f1f8:	441d      	add	r5, r3
 801f1fa:	e64c      	b.n	801ee96 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 801f1fc:	2800      	cmp	r0, #0
 801f1fe:	f43f aeed 	beq.w	801efdc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 801f202:	5c79      	ldrb	r1, [r7, r1]
 801f204:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801f208:	9109      	str	r1, [sp, #36]	; 0x24
 801f20a:	0e09      	lsrs	r1, r1, #24
 801f20c:	9111      	str	r1, [sp, #68]	; 0x44
 801f20e:	e6e5      	b.n	801efdc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 801f210:	b01b      	add	sp, #108	; 0x6c
 801f212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f216:	bf00      	nop
 801f218:	fffff800 	.word	0xfffff800

0801f21c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>:
 801f21c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f220:	b085      	sub	sp, #20
 801f222:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
 801f226:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 801f22a:	2800      	cmp	r0, #0
 801f22c:	9103      	str	r1, [sp, #12]
 801f22e:	fb00 7406 	mla	r4, r0, r6, r7
 801f232:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	; 0x3c
 801f236:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 801f23a:	eb02 0544 	add.w	r5, r2, r4, lsl #1
 801f23e:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 801f242:	eb03 0904 	add.w	r9, r3, r4
 801f246:	9501      	str	r5, [sp, #4]
 801f248:	f2c0 8150 	blt.w	801f4ec <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
 801f24c:	4583      	cmp	fp, r0
 801f24e:	f340 814d 	ble.w	801f4ec <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
 801f252:	2f00      	cmp	r7, #0
 801f254:	f2c0 8146 	blt.w	801f4e4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
 801f258:	42be      	cmp	r6, r7
 801f25a:	f340 8143 	ble.w	801f4e4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
 801f25e:	f813 c004 	ldrb.w	ip, [r3, r4]
 801f262:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
 801f266:	f64f 041f 	movw	r4, #63519	; 0xf81f
 801f26a:	ea4f 02ec 	mov.w	r2, ip, asr #3
 801f26e:	f423 65fc 	bic.w	r5, r3, #2016	; 0x7e0
 801f272:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801f276:	4355      	muls	r5, r2
 801f278:	fb0c f203 	mul.w	r2, ip, r3
 801f27c:	ea04 1355 	and.w	r3, r4, r5, lsr #5
 801f280:	f605 0501 	addw	r5, r5, #2049	; 0x801
 801f284:	441d      	add	r5, r3
 801f286:	f102 0320 	add.w	r3, r2, #32
 801f28a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801f28e:	ea04 1455 	and.w	r4, r4, r5, lsr #5
 801f292:	0a1b      	lsrs	r3, r3, #8
 801f294:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801f298:	431c      	orrs	r4, r3
 801f29a:	1c7b      	adds	r3, r7, #1
 801f29c:	f100 812b 	bmi.w	801f4f6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
 801f2a0:	429e      	cmp	r6, r3
 801f2a2:	f340 8128 	ble.w	801f4f6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
 801f2a6:	2900      	cmp	r1, #0
 801f2a8:	f000 8128 	beq.w	801f4fc <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e0>
 801f2ac:	9a01      	ldr	r2, [sp, #4]
 801f2ae:	f899 3001 	ldrb.w	r3, [r9, #1]
 801f2b2:	8855      	ldrh	r5, [r2, #2]
 801f2b4:	ea4f 08e3 	mov.w	r8, r3, asr #3
 801f2b8:	f425 62fc 	bic.w	r2, r5, #2016	; 0x7e0
 801f2bc:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801f2c0:	fb08 f802 	mul.w	r8, r8, r2
 801f2c4:	f64f 021f 	movw	r2, #63519	; 0xf81f
 801f2c8:	435d      	muls	r5, r3
 801f2ca:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
 801f2ce:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801f2d2:	44d0      	add	r8, sl
 801f2d4:	f105 0a20 	add.w	sl, r5, #32
 801f2d8:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 801f2dc:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 801f2e0:	0a2d      	lsrs	r5, r5, #8
 801f2e2:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801f2e6:	432a      	orrs	r2, r5
 801f2e8:	3001      	adds	r0, #1
 801f2ea:	f100 810d 	bmi.w	801f508 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
 801f2ee:	4583      	cmp	fp, r0
 801f2f0:	f340 810a 	ble.w	801f508 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
 801f2f4:	f1be 0f00 	cmp.w	lr, #0
 801f2f8:	f000 810b 	beq.w	801f512 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2f6>
 801f2fc:	2f00      	cmp	r7, #0
 801f2fe:	f2c0 8100 	blt.w	801f502 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
 801f302:	42be      	cmp	r6, r7
 801f304:	f340 80fd 	ble.w	801f502 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
 801f308:	9801      	ldr	r0, [sp, #4]
 801f30a:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 801f30e:	f819 5006 	ldrb.w	r5, [r9, r6]
 801f312:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
 801f316:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801f31a:	f428 60fc 	bic.w	r0, r8, #2016	; 0x7e0
 801f31e:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801f322:	fb0a fa00 	mul.w	sl, sl, r0
 801f326:	fb05 f808 	mul.w	r8, r5, r8
 801f32a:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
 801f32e:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 801f332:	4482      	add	sl, r0
 801f334:	f108 0020 	add.w	r0, r8, #32
 801f338:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 801f33c:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
 801f340:	0a00      	lsrs	r0, r0, #8
 801f342:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801f346:	ea4b 0b00 	orr.w	fp, fp, r0
 801f34a:	3701      	adds	r7, #1
 801f34c:	f100 80e6 	bmi.w	801f51c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
 801f350:	42be      	cmp	r6, r7
 801f352:	f340 80e3 	ble.w	801f51c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
 801f356:	2900      	cmp	r1, #0
 801f358:	f000 80e3 	beq.w	801f522 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x306>
 801f35c:	3601      	adds	r6, #1
 801f35e:	9801      	ldr	r0, [sp, #4]
 801f360:	f819 7006 	ldrb.w	r7, [r9, r6]
 801f364:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
 801f368:	ea4f 09e7 	mov.w	r9, r7, asr #3
 801f36c:	f420 66fc 	bic.w	r6, r0, #2016	; 0x7e0
 801f370:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801f374:	fb09 f906 	mul.w	r9, r9, r6
 801f378:	fb07 f800 	mul.w	r8, r7, r0
 801f37c:	f64f 001f 	movw	r0, #63519	; 0xf81f
 801f380:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
 801f384:	f609 0901 	addw	r9, r9, #2049	; 0x801
 801f388:	44d1      	add	r9, sl
 801f38a:	ea00 1659 	and.w	r6, r0, r9, lsr #5
 801f38e:	f108 0020 	add.w	r0, r8, #32
 801f392:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 801f396:	0a00      	lsrs	r0, r0, #8
 801f398:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801f39c:	4330      	orrs	r0, r6
 801f39e:	b28e      	uxth	r6, r1
 801f3a0:	fa1f f98e 	uxth.w	r9, lr
 801f3a4:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 801f3a8:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 801f3ac:	fb06 f809 	mul.w	r8, r6, r9
 801f3b0:	0136      	lsls	r6, r6, #4
 801f3b2:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801f3b6:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 801f3ba:	9601      	str	r6, [sp, #4]
 801f3bc:	ea4a 0404 	orr.w	r4, sl, r4
 801f3c0:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 801f3c4:	fa1f f689 	uxth.w	r6, r9
 801f3c8:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801f3cc:	fb11 f90e 	smulbb	r9, r1, lr
 801f3d0:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801f3d4:	9602      	str	r6, [sp, #8]
 801f3d6:	4626      	mov	r6, r4
 801f3d8:	f3c9 09c7 	ubfx	r9, r9, #3, #8
 801f3dc:	f1ce 0410 	rsb	r4, lr, #16
 801f3e0:	ea4a 0202 	orr.w	r2, sl, r2
 801f3e4:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 801f3e8:	1a64      	subs	r4, r4, r1
 801f3ea:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
 801f3ee:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801f3f2:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801f3f6:	434a      	muls	r2, r1
 801f3f8:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 801f3fc:	ea4a 0000 	orr.w	r0, sl, r0
 801f400:	9903      	ldr	r1, [sp, #12]
 801f402:	fb04 2406 	mla	r4, r4, r6, r2
 801f406:	9e02      	ldr	r6, [sp, #8]
 801f408:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 801f40c:	fb09 4200 	mla	r2, r9, r0, r4
 801f410:	ea4f 440b 	mov.w	r4, fp, lsl #16
 801f414:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 801f418:	8808      	ldrh	r0, [r1, #0]
 801f41a:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 801f41e:	f89d 1050 	ldrb.w	r1, [sp, #80]	; 0x50
 801f422:	ea44 0b0b 	orr.w	fp, r4, fp
 801f426:	9c01      	ldr	r4, [sp, #4]
 801f428:	b289      	uxth	r1, r1
 801f42a:	f5c4 7480 	rsb	r4, r4, #256	; 0x100
 801f42e:	fb0e 2e0b 	mla	lr, lr, fp, r2
 801f432:	1ba4      	subs	r4, r4, r6
 801f434:	9e01      	ldr	r6, [sp, #4]
 801f436:	ea4f 525e 	mov.w	r2, lr, lsr #21
 801f43a:	eba6 0608 	sub.w	r6, r6, r8
 801f43e:	b2a4      	uxth	r4, r4
 801f440:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 801f444:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801f448:	b2b6      	uxth	r6, r6
 801f44a:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801f44e:	4373      	muls	r3, r6
 801f450:	ea42 0e0e 	orr.w	lr, r2, lr
 801f454:	fb0c 3304 	mla	r3, ip, r4, r3
 801f458:	9c02      	ldr	r4, [sp, #8]
 801f45a:	fa1f f28e 	uxth.w	r2, lr
 801f45e:	fb04 3505 	mla	r5, r4, r5, r3
 801f462:	10d4      	asrs	r4, r2, #3
 801f464:	fb08 5707 	mla	r7, r8, r7, r5
 801f468:	1215      	asrs	r5, r2, #8
 801f46a:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 801f46e:	00d2      	lsls	r2, r2, #3
 801f470:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801f474:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801f478:	b2d2      	uxtb	r2, r2
 801f47a:	434f      	muls	r7, r1
 801f47c:	1c7b      	adds	r3, r7, #1
 801f47e:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 801f482:	1203      	asrs	r3, r0, #8
 801f484:	ea6f 2717 	mvn.w	r7, r7, lsr #8
 801f488:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801f48c:	b2ff      	uxtb	r7, r7
 801f48e:	fb13 f307 	smulbb	r3, r3, r7
 801f492:	fb05 3501 	mla	r5, r5, r1, r3
 801f496:	10c3      	asrs	r3, r0, #3
 801f498:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 801f49c:	b2ad      	uxth	r5, r5
 801f49e:	fb13 f307 	smulbb	r3, r3, r7
 801f4a2:	fb04 3401 	mla	r4, r4, r1, r3
 801f4a6:	00c3      	lsls	r3, r0, #3
 801f4a8:	b2db      	uxtb	r3, r3
 801f4aa:	b2a4      	uxth	r4, r4
 801f4ac:	fb13 f307 	smulbb	r3, r3, r7
 801f4b0:	fb02 3101 	mla	r1, r2, r1, r3
 801f4b4:	1c6b      	adds	r3, r5, #1
 801f4b6:	1c62      	adds	r2, r4, #1
 801f4b8:	b289      	uxth	r1, r1
 801f4ba:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801f4be:	1c4b      	adds	r3, r1, #1
 801f4c0:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 801f4c4:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801f4c8:	9a03      	ldr	r2, [sp, #12]
 801f4ca:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801f4ce:	0964      	lsrs	r4, r4, #5
 801f4d0:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801f4d4:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 801f4d8:	432b      	orrs	r3, r5
 801f4da:	4323      	orrs	r3, r4
 801f4dc:	8013      	strh	r3, [r2, #0]
 801f4de:	b005      	add	sp, #20
 801f4e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f4e4:	f04f 0c00 	mov.w	ip, #0
 801f4e8:	4664      	mov	r4, ip
 801f4ea:	e6d6      	b.n	801f29a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x7e>
 801f4ec:	2300      	movs	r3, #0
 801f4ee:	469c      	mov	ip, r3
 801f4f0:	461a      	mov	r2, r3
 801f4f2:	461c      	mov	r4, r3
 801f4f4:	e6f8      	b.n	801f2e8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 801f4f6:	2300      	movs	r3, #0
 801f4f8:	461a      	mov	r2, r3
 801f4fa:	e6f5      	b.n	801f2e8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 801f4fc:	460b      	mov	r3, r1
 801f4fe:	460a      	mov	r2, r1
 801f500:	e6f2      	b.n	801f2e8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 801f502:	2500      	movs	r5, #0
 801f504:	46ab      	mov	fp, r5
 801f506:	e720      	b.n	801f34a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x12e>
 801f508:	2700      	movs	r7, #0
 801f50a:	463d      	mov	r5, r7
 801f50c:	4638      	mov	r0, r7
 801f50e:	46bb      	mov	fp, r7
 801f510:	e745      	b.n	801f39e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 801f512:	4677      	mov	r7, lr
 801f514:	4675      	mov	r5, lr
 801f516:	4670      	mov	r0, lr
 801f518:	46f3      	mov	fp, lr
 801f51a:	e740      	b.n	801f39e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 801f51c:	2700      	movs	r7, #0
 801f51e:	4638      	mov	r0, r7
 801f520:	e73d      	b.n	801f39e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 801f522:	460f      	mov	r7, r1
 801f524:	4608      	mov	r0, r1
 801f526:	e73a      	b.n	801f39e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>

0801f528 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f52c:	b097      	sub	sp, #92	; 0x5c
 801f52e:	9214      	str	r2, [sp, #80]	; 0x50
 801f530:	9308      	str	r3, [sp, #32]
 801f532:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801f534:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 801f538:	9015      	str	r0, [sp, #84]	; 0x54
 801f53a:	9312      	str	r3, [sp, #72]	; 0x48
 801f53c:	6850      	ldr	r0, [r2, #4]
 801f53e:	9111      	str	r1, [sp, #68]	; 0x44
 801f540:	6812      	ldr	r2, [r2, #0]
 801f542:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 801f546:	fb00 1303 	mla	r3, r0, r3, r1
 801f54a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801f54e:	9309      	str	r3, [sp, #36]	; 0x24
 801f550:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f552:	681b      	ldr	r3, [r3, #0]
 801f554:	930b      	str	r3, [sp, #44]	; 0x2c
 801f556:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f558:	685b      	ldr	r3, [r3, #4]
 801f55a:	930c      	str	r3, [sp, #48]	; 0x30
 801f55c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801f560:	930a      	str	r3, [sp, #40]	; 0x28
 801f562:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f564:	2b00      	cmp	r3, #0
 801f566:	dc03      	bgt.n	801f570 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801f568:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801f56a:	2b00      	cmp	r3, #0
 801f56c:	f340 83cd 	ble.w	801fd0a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e2>
 801f570:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f572:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801f576:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801f57a:	1e48      	subs	r0, r1, #1
 801f57c:	1e55      	subs	r5, r2, #1
 801f57e:	9b08      	ldr	r3, [sp, #32]
 801f580:	2b00      	cmp	r3, #0
 801f582:	f340 81a5 	ble.w	801f8d0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 801f586:	9e21      	ldr	r6, [sp, #132]	; 0x84
 801f588:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801f58a:	1436      	asrs	r6, r6, #16
 801f58c:	ea4f 4323 	mov.w	r3, r3, asr #16
 801f590:	d406      	bmi.n	801f5a0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801f592:	4286      	cmp	r6, r0
 801f594:	da04      	bge.n	801f5a0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801f596:	2b00      	cmp	r3, #0
 801f598:	db02      	blt.n	801f5a0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801f59a:	42ab      	cmp	r3, r5
 801f59c:	f2c0 8199 	blt.w	801f8d2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 801f5a0:	3601      	adds	r6, #1
 801f5a2:	f100 8186 	bmi.w	801f8b2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801f5a6:	42b1      	cmp	r1, r6
 801f5a8:	f2c0 8183 	blt.w	801f8b2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801f5ac:	3301      	adds	r3, #1
 801f5ae:	f100 8180 	bmi.w	801f8b2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801f5b2:	429a      	cmp	r2, r3
 801f5b4:	f2c0 817d 	blt.w	801f8b2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801f5b8:	9b08      	ldr	r3, [sp, #32]
 801f5ba:	f64f 061f 	movw	r6, #63519	; 0xf81f
 801f5be:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801f5c0:	9313      	str	r3, [sp, #76]	; 0x4c
 801f5c2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801f5c4:	2b00      	cmp	r3, #0
 801f5c6:	f340 81a6 	ble.w	801f916 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 801f5ca:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801f5cc:	9d21      	ldr	r5, [sp, #132]	; 0x84
 801f5ce:	1418      	asrs	r0, r3, #16
 801f5d0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801f5d2:	142d      	asrs	r5, r5, #16
 801f5d4:	f3c3 3103 	ubfx	r1, r3, #12, #4
 801f5d8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801f5da:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 801f5de:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f5e0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801f5e4:	f100 81fa 	bmi.w	801f9dc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 801f5e8:	f102 3eff 	add.w	lr, r2, #4294967295
 801f5ec:	4575      	cmp	r5, lr
 801f5ee:	f280 81f5 	bge.w	801f9dc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 801f5f2:	2800      	cmp	r0, #0
 801f5f4:	f2c0 81f2 	blt.w	801f9dc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 801f5f8:	f103 3eff 	add.w	lr, r3, #4294967295
 801f5fc:	4570      	cmp	r0, lr
 801f5fe:	f280 81ed 	bge.w	801f9dc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 801f602:	b212      	sxth	r2, r2
 801f604:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f606:	fa1f fe81 	uxth.w	lr, r1
 801f60a:	fb00 5002 	mla	r0, r0, r2, r5
 801f60e:	ea4f 150e 	mov.w	r5, lr, lsl #4
 801f612:	eb03 0a00 	add.w	sl, r3, r0
 801f616:	f813 9000 	ldrb.w	r9, [r3, r0]
 801f61a:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 801f61e:	f89a 8001 	ldrb.w	r8, [sl, #1]
 801f622:	b29b      	uxth	r3, r3
 801f624:	f1bc 0f00 	cmp.w	ip, #0
 801f628:	f000 81bb 	beq.w	801f9a2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
 801f62c:	f81a 4002 	ldrb.w	r4, [sl, r2]
 801f630:	eb0a 0b02 	add.w	fp, sl, r2
 801f634:	fa1f fa8c 	uxth.w	sl, ip
 801f638:	940d      	str	r4, [sp, #52]	; 0x34
 801f63a:	fb0a fe0e 	mul.w	lr, sl, lr
 801f63e:	f89b 4001 	ldrb.w	r4, [fp, #1]
 801f642:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 801f646:	eba5 050e 	sub.w	r5, r5, lr
 801f64a:	940e      	str	r4, [sp, #56]	; 0x38
 801f64c:	fa1f fa8a 	uxth.w	sl, sl
 801f650:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801f652:	b2ad      	uxth	r5, r5
 801f654:	eba3 030a 	sub.w	r3, r3, sl
 801f658:	fb08 f505 	mul.w	r5, r8, r5
 801f65c:	b29b      	uxth	r3, r3
 801f65e:	fb09 5303 	mla	r3, r9, r3, r5
 801f662:	fb0a 3304 	mla	r3, sl, r4, r3
 801f666:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801f668:	fb0e 3304 	mla	r3, lr, r4, r3
 801f66c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801f670:	2b00      	cmp	r3, #0
 801f672:	f000 8111 	beq.w	801f898 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 801f676:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801f678:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801f67c:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 801f680:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 801f684:	f000 8192 	beq.w	801f9ac <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>
 801f688:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 801f68c:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 801f690:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801f694:	fb0a fe0e 	mul.w	lr, sl, lr
 801f698:	fb09 f000 	mul.w	r0, r9, r0
 801f69c:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 801f6a0:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 801f6a4:	f100 0b20 	add.w	fp, r0, #32
 801f6a8:	44ce      	add	lr, r9
 801f6aa:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 801f6ae:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 801f6b2:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801f6b6:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801f6ba:	ea4e 0909 	orr.w	r9, lr, r9
 801f6be:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801f6c2:	8868      	ldrh	r0, [r5, #2]
 801f6c4:	d019      	beq.n	801f6fa <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801f6c6:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 801f6ca:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 801f6ce:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801f6d2:	fb0a fe0e 	mul.w	lr, sl, lr
 801f6d6:	fb08 f800 	mul.w	r8, r8, r0
 801f6da:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 801f6de:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 801f6e2:	f108 0b20 	add.w	fp, r8, #32
 801f6e6:	4486      	add	lr, r0
 801f6e8:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 801f6ec:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 801f6f0:	0a00      	lsrs	r0, r0, #8
 801f6f2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801f6f6:	ea4e 0000 	orr.w	r0, lr, r0
 801f6fa:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 801f6fe:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801f702:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 801f706:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801f70a:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 801f70e:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801f712:	ea4e 0909 	orr.w	r9, lr, r9
 801f716:	ea4a 0000 	orr.w	r0, sl, r0
 801f71a:	f1bc 0f00 	cmp.w	ip, #0
 801f71e:	f000 8147 	beq.w	801f9b0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 801f722:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 801f726:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801f728:	3a01      	subs	r2, #1
 801f72a:	2cff      	cmp	r4, #255	; 0xff
 801f72c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801f730:	f102 0202 	add.w	r2, r2, #2
 801f734:	eb05 0e02 	add.w	lr, r5, r2
 801f738:	5aaa      	ldrh	r2, [r5, r2]
 801f73a:	d018      	beq.n	801f76e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 801f73c:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 801f740:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801f744:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801f748:	fb04 fa02 	mul.w	sl, r4, r2
 801f74c:	fb08 f805 	mul.w	r8, r8, r5
 801f750:	f10a 0520 	add.w	r5, sl, #32
 801f754:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 801f758:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801f75c:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 801f760:	4442      	add	r2, r8
 801f762:	0a2d      	lsrs	r5, r5, #8
 801f764:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 801f768:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801f76c:	432a      	orrs	r2, r5
 801f76e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801f770:	f8be 5002 	ldrh.w	r5, [lr, #2]
 801f774:	2cff      	cmp	r4, #255	; 0xff
 801f776:	d01a      	beq.n	801f7ae <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x286>
 801f778:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 801f77c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801f780:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801f784:	fb04 fa05 	mul.w	sl, r4, r5
 801f788:	fb08 f80e 	mul.w	r8, r8, lr
 801f78c:	f10a 0e20 	add.w	lr, sl, #32
 801f790:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 801f794:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801f798:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 801f79c:	4445      	add	r5, r8
 801f79e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f7a2:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 801f7a6:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 801f7aa:	ea45 050e 	orr.w	r5, r5, lr
 801f7ae:	fb1c fe01 	smulbb	lr, ip, r1
 801f7b2:	f1cc 0810 	rsb	r8, ip, #16
 801f7b6:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 801f7ba:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801f7be:	ea4f 0eee 	mov.w	lr, lr, asr #3
 801f7c2:	eba8 0801 	sub.w	r8, r8, r1
 801f7c6:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 801f7ca:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801f7ce:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 801f7d2:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 801f7d6:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 801f7da:	ea4a 0202 	orr.w	r2, sl, r2
 801f7de:	4341      	muls	r1, r0
 801f7e0:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 801f7e4:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801f7e8:	fb09 1108 	mla	r1, r9, r8, r1
 801f7ec:	ea4b 0505 	orr.w	r5, fp, r5
 801f7f0:	fb0c 1102 	mla	r1, ip, r2, r1
 801f7f4:	fb0e 1e05 	mla	lr, lr, r5, r1
 801f7f8:	ea4f 525e 	mov.w	r2, lr, lsr #21
 801f7fc:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 801f800:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801f804:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801f808:	ea42 0e0e 	orr.w	lr, r2, lr
 801f80c:	fa1f f28e 	uxth.w	r2, lr
 801f810:	2bff      	cmp	r3, #255	; 0xff
 801f812:	d103      	bne.n	801f81c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 801f814:	9912      	ldr	r1, [sp, #72]	; 0x48
 801f816:	29ff      	cmp	r1, #255	; 0xff
 801f818:	f000 80de 	beq.w	801f9d8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 801f81c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801f81e:	1215      	asrs	r5, r2, #8
 801f820:	8838      	ldrh	r0, [r7, #0]
 801f822:	434b      	muls	r3, r1
 801f824:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801f828:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801f82a:	f103 0c01 	add.w	ip, r3, #1
 801f82e:	eb0c 2323 	add.w	r3, ip, r3, asr #8
 801f832:	ea6f 2323 	mvn.w	r3, r3, asr #8
 801f836:	fa5f fc83 	uxtb.w	ip, r3
 801f83a:	1203      	asrs	r3, r0, #8
 801f83c:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801f840:	fb13 f30c 	smulbb	r3, r3, ip
 801f844:	fb05 3501 	mla	r5, r5, r1, r3
 801f848:	10c3      	asrs	r3, r0, #3
 801f84a:	10d1      	asrs	r1, r2, #3
 801f84c:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 801f850:	00d2      	lsls	r2, r2, #3
 801f852:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801f856:	b2ad      	uxth	r5, r5
 801f858:	fb13 f30c 	smulbb	r3, r3, ip
 801f85c:	b2d2      	uxtb	r2, r2
 801f85e:	fb01 3104 	mla	r1, r1, r4, r3
 801f862:	00c3      	lsls	r3, r0, #3
 801f864:	b2db      	uxtb	r3, r3
 801f866:	b289      	uxth	r1, r1
 801f868:	fb13 f30c 	smulbb	r3, r3, ip
 801f86c:	fb02 3304 	mla	r3, r2, r4, r3
 801f870:	b29a      	uxth	r2, r3
 801f872:	1c6b      	adds	r3, r5, #1
 801f874:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801f878:	1c53      	adds	r3, r2, #1
 801f87a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801f87e:	1c4a      	adds	r2, r1, #1
 801f880:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801f884:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801f888:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801f88c:	0949      	lsrs	r1, r1, #5
 801f88e:	432b      	orrs	r3, r5
 801f890:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801f894:	430b      	orrs	r3, r1
 801f896:	803b      	strh	r3, [r7, #0]
 801f898:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801f89a:	3702      	adds	r7, #2
 801f89c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801f89e:	4413      	add	r3, r2
 801f8a0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801f8a2:	9321      	str	r3, [sp, #132]	; 0x84
 801f8a4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f8a6:	441a      	add	r2, r3
 801f8a8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801f8aa:	3b01      	subs	r3, #1
 801f8ac:	9222      	str	r2, [sp, #136]	; 0x88
 801f8ae:	9313      	str	r3, [sp, #76]	; 0x4c
 801f8b0:	e687      	b.n	801f5c2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801f8b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801f8b4:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 801f8b6:	9c22      	ldr	r4, [sp, #136]	; 0x88
 801f8b8:	4433      	add	r3, r6
 801f8ba:	9321      	str	r3, [sp, #132]	; 0x84
 801f8bc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f8be:	441c      	add	r4, r3
 801f8c0:	9b08      	ldr	r3, [sp, #32]
 801f8c2:	3b01      	subs	r3, #1
 801f8c4:	9422      	str	r4, [sp, #136]	; 0x88
 801f8c6:	9308      	str	r3, [sp, #32]
 801f8c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f8ca:	3302      	adds	r3, #2
 801f8cc:	9309      	str	r3, [sp, #36]	; 0x24
 801f8ce:	e656      	b.n	801f57e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 801f8d0:	d028      	beq.n	801f924 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fc>
 801f8d2:	9b08      	ldr	r3, [sp, #32]
 801f8d4:	9823      	ldr	r0, [sp, #140]	; 0x8c
 801f8d6:	3b01      	subs	r3, #1
 801f8d8:	9d21      	ldr	r5, [sp, #132]	; 0x84
 801f8da:	fb00 5003 	mla	r0, r0, r3, r5
 801f8de:	1400      	asrs	r0, r0, #16
 801f8e0:	f53f ae6a 	bmi.w	801f5b8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801f8e4:	3901      	subs	r1, #1
 801f8e6:	4288      	cmp	r0, r1
 801f8e8:	f6bf ae66 	bge.w	801f5b8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801f8ec:	9924      	ldr	r1, [sp, #144]	; 0x90
 801f8ee:	9822      	ldr	r0, [sp, #136]	; 0x88
 801f8f0:	fb01 0303 	mla	r3, r1, r3, r0
 801f8f4:	141b      	asrs	r3, r3, #16
 801f8f6:	f53f ae5f 	bmi.w	801f5b8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801f8fa:	3a01      	subs	r2, #1
 801f8fc:	4293      	cmp	r3, r2
 801f8fe:	f6bf ae5b 	bge.w	801f5b8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801f902:	9b08      	ldr	r3, [sp, #32]
 801f904:	f64f 061f 	movw	r6, #63519	; 0xf81f
 801f908:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 801f90c:	9313      	str	r3, [sp, #76]	; 0x4c
 801f90e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801f910:	2b00      	cmp	r3, #0
 801f912:	f300 8082 	bgt.w	801fa1a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f2>
 801f916:	9b08      	ldr	r3, [sp, #32]
 801f918:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801f91c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f91e:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 801f922:	9309      	str	r3, [sp, #36]	; 0x24
 801f924:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f926:	2b00      	cmp	r3, #0
 801f928:	f340 81ef 	ble.w	801fd0a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e2>
 801f92c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801f930:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801f932:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f936:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f93a:	eef0 6a62 	vmov.f32	s13, s5
 801f93e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801f942:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f946:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f94a:	edcd 6a21 	vstr	s13, [sp, #132]	; 0x84
 801f94e:	eef0 6a43 	vmov.f32	s13, s6
 801f952:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f956:	edcd 6a22 	vstr	s13, [sp, #136]	; 0x88
 801f95a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f95e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f962:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f966:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f96a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f96e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f972:	ee12 2a90 	vmov	r2, s5
 801f976:	eef0 2a47 	vmov.f32	s5, s14
 801f97a:	fb92 f3f3 	sdiv	r3, r2, r3
 801f97e:	ee13 2a10 	vmov	r2, s6
 801f982:	9323      	str	r3, [sp, #140]	; 0x8c
 801f984:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801f986:	eeb0 3a67 	vmov.f32	s6, s15
 801f98a:	fb92 f3f3 	sdiv	r3, r2, r3
 801f98e:	9324      	str	r3, [sp, #144]	; 0x90
 801f990:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f992:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801f994:	3b01      	subs	r3, #1
 801f996:	9311      	str	r3, [sp, #68]	; 0x44
 801f998:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801f99a:	bf08      	it	eq
 801f99c:	4613      	moveq	r3, r2
 801f99e:	9308      	str	r3, [sp, #32]
 801f9a0:	e5df      	b.n	801f562 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801f9a2:	fb08 f505 	mul.w	r5, r8, r5
 801f9a6:	fb09 5303 	mla	r3, r9, r3, r5
 801f9aa:	e65f      	b.n	801f66c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x144>
 801f9ac:	4681      	mov	r9, r0
 801f9ae:	e686      	b.n	801f6be <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 801f9b0:	f1c1 0210 	rsb	r2, r1, #16
 801f9b4:	4341      	muls	r1, r0
 801f9b6:	fb09 1902 	mla	r9, r9, r2, r1
 801f9ba:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801f9be:	ea4f 5259 	mov.w	r2, r9, lsr #21
 801f9c2:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801f9c6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801f9ca:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801f9ce:	ea42 0909 	orr.w	r9, r2, r9
 801f9d2:	fa1f f289 	uxth.w	r2, r9
 801f9d6:	e71b      	b.n	801f810 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
 801f9d8:	803a      	strh	r2, [r7, #0]
 801f9da:	e75d      	b.n	801f898 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 801f9dc:	f115 0e01 	adds.w	lr, r5, #1
 801f9e0:	f53f af5a 	bmi.w	801f898 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 801f9e4:	4572      	cmp	r2, lr
 801f9e6:	f6ff af57 	blt.w	801f898 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 801f9ea:	f110 0e01 	adds.w	lr, r0, #1
 801f9ee:	f53f af53 	bmi.w	801f898 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 801f9f2:	4573      	cmp	r3, lr
 801f9f4:	f6ff af50 	blt.w	801f898 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 801f9f8:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801f9fa:	b21b      	sxth	r3, r3
 801f9fc:	b212      	sxth	r2, r2
 801f9fe:	9502      	str	r5, [sp, #8]
 801fa00:	9301      	str	r3, [sp, #4]
 801fa02:	9200      	str	r2, [sp, #0]
 801fa04:	e9cd 0103 	strd	r0, r1, [sp, #12]
 801fa08:	e9cd c405 	strd	ip, r4, [sp, #20]
 801fa0c:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 801fa10:	4639      	mov	r1, r7
 801fa12:	9815      	ldr	r0, [sp, #84]	; 0x54
 801fa14:	f7ff fc02 	bl	801f21c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>
 801fa18:	e73e      	b.n	801f898 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 801fa1a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801fa1c:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801fa20:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801fa22:	f3c3 3503 	ubfx	r5, r3, #12, #4
 801fa26:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801fa28:	fa1f fc82 	uxth.w	ip, r2
 801fa2c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801fa30:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801fa32:	ea4f 100c 	mov.w	r0, ip, lsl #4
 801fa36:	141f      	asrs	r7, r3, #16
 801fa38:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801fa3a:	141b      	asrs	r3, r3, #16
 801fa3c:	fb01 3707 	mla	r7, r1, r7, r3
 801fa40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801fa42:	eb03 0a07 	add.w	sl, r3, r7
 801fa46:	f813 9007 	ldrb.w	r9, [r3, r7]
 801fa4a:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 801fa4e:	f89a 8001 	ldrb.w	r8, [sl, #1]
 801fa52:	b29b      	uxth	r3, r3
 801fa54:	2d00      	cmp	r5, #0
 801fa56:	f000 813d 	beq.w	801fcd4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ac>
 801fa5a:	f81a 4001 	ldrb.w	r4, [sl, r1]
 801fa5e:	eb0a 0b01 	add.w	fp, sl, r1
 801fa62:	fa1f fa85 	uxth.w	sl, r5
 801fa66:	940f      	str	r4, [sp, #60]	; 0x3c
 801fa68:	fb0a fc0c 	mul.w	ip, sl, ip
 801fa6c:	f89b 4001 	ldrb.w	r4, [fp, #1]
 801fa70:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 801fa74:	eba0 000c 	sub.w	r0, r0, ip
 801fa78:	9410      	str	r4, [sp, #64]	; 0x40
 801fa7a:	fa1f fa8a 	uxth.w	sl, sl
 801fa7e:	b280      	uxth	r0, r0
 801fa80:	eba3 030a 	sub.w	r3, r3, sl
 801fa84:	fb08 f000 	mul.w	r0, r8, r0
 801fa88:	b29b      	uxth	r3, r3
 801fa8a:	fb09 0303 	mla	r3, r9, r3, r0
 801fa8e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801fa90:	fb0a 3300 	mla	r3, sl, r0, r3
 801fa94:	fb0c 3304 	mla	r3, ip, r4, r3
 801fa98:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801fa9c:	2b00      	cmp	r3, #0
 801fa9e:	f000 810b 	beq.w	801fcb8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x790>
 801faa2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801faa4:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801faa8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801faaa:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 801faae:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 801fab2:	f000 8114 	beq.w	801fcde <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b6>
 801fab6:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 801faba:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 801fabe:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801fac2:	fb0a fc0c 	mul.w	ip, sl, ip
 801fac6:	fb09 f707 	mul.w	r7, r9, r7
 801faca:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 801face:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 801fad2:	f107 0b20 	add.w	fp, r7, #32
 801fad6:	44cc      	add	ip, r9
 801fad8:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 801fadc:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 801fae0:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801fae4:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801fae8:	ea4c 0909 	orr.w	r9, ip, r9
 801faec:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801faf0:	8847      	ldrh	r7, [r0, #2]
 801faf2:	d019      	beq.n	801fb28 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x600>
 801faf4:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 801faf8:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 801fafc:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801fb00:	fb0a fc0c 	mul.w	ip, sl, ip
 801fb04:	fb08 f807 	mul.w	r8, r8, r7
 801fb08:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 801fb0c:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 801fb10:	f108 0b20 	add.w	fp, r8, #32
 801fb14:	44bc      	add	ip, r7
 801fb16:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 801fb1a:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 801fb1e:	0a3f      	lsrs	r7, r7, #8
 801fb20:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801fb24:	ea4c 0707 	orr.w	r7, ip, r7
 801fb28:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 801fb2c:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801fb30:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 801fb34:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801fb38:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801fb3c:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801fb40:	ea4c 0909 	orr.w	r9, ip, r9
 801fb44:	ea4a 0707 	orr.w	r7, sl, r7
 801fb48:	2d00      	cmp	r5, #0
 801fb4a:	f000 80ca 	beq.w	801fce2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ba>
 801fb4e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 801fb52:	3901      	subs	r1, #1
 801fb54:	0049      	lsls	r1, r1, #1
 801fb56:	3102      	adds	r1, #2
 801fb58:	eb00 0c01 	add.w	ip, r0, r1
 801fb5c:	5a41      	ldrh	r1, [r0, r1]
 801fb5e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801fb60:	28ff      	cmp	r0, #255	; 0xff
 801fb62:	d019      	beq.n	801fb98 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x670>
 801fb64:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 801fb68:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801fb6a:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801fb6e:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801fb72:	fb04 fa01 	mul.w	sl, r4, r1
 801fb76:	fb08 f800 	mul.w	r8, r8, r0
 801fb7a:	f10a 0020 	add.w	r0, sl, #32
 801fb7e:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 801fb82:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801fb86:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 801fb8a:	4441      	add	r1, r8
 801fb8c:	0a00      	lsrs	r0, r0, #8
 801fb8e:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 801fb92:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801fb96:	4301      	orrs	r1, r0
 801fb98:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801fb9a:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 801fb9e:	2cff      	cmp	r4, #255	; 0xff
 801fba0:	d01a      	beq.n	801fbd8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b0>
 801fba2:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 801fba6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801fbaa:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801fbae:	fb04 fa00 	mul.w	sl, r4, r0
 801fbb2:	fb08 f80c 	mul.w	r8, r8, ip
 801fbb6:	f10a 0c20 	add.w	ip, sl, #32
 801fbba:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 801fbbe:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801fbc2:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 801fbc6:	4440      	add	r0, r8
 801fbc8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fbcc:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 801fbd0:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 801fbd4:	ea40 000c 	orr.w	r0, r0, ip
 801fbd8:	fb15 fc02 	smulbb	ip, r5, r2
 801fbdc:	f1c5 0810 	rsb	r8, r5, #16
 801fbe0:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 801fbe4:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801fbe8:	ea4f 0cec 	mov.w	ip, ip, asr #3
 801fbec:	eba8 0802 	sub.w	r8, r8, r2
 801fbf0:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 801fbf4:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801fbf8:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 801fbfc:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801fc00:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 801fc04:	ea4a 0101 	orr.w	r1, sl, r1
 801fc08:	437a      	muls	r2, r7
 801fc0a:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 801fc0e:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801fc12:	fb09 2208 	mla	r2, r9, r8, r2
 801fc16:	ea4b 0000 	orr.w	r0, fp, r0
 801fc1a:	fb05 2201 	mla	r2, r5, r1, r2
 801fc1e:	fb0c 2200 	mla	r2, ip, r0, r2
 801fc22:	0d57      	lsrs	r7, r2, #21
 801fc24:	0952      	lsrs	r2, r2, #5
 801fc26:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801fc2a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801fc2e:	433a      	orrs	r2, r7
 801fc30:	2bff      	cmp	r3, #255	; 0xff
 801fc32:	b292      	uxth	r2, r2
 801fc34:	d102      	bne.n	801fc3c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x714>
 801fc36:	9912      	ldr	r1, [sp, #72]	; 0x48
 801fc38:	29ff      	cmp	r1, #255	; 0xff
 801fc3a:	d063      	beq.n	801fd04 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7dc>
 801fc3c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801fc3e:	1215      	asrs	r5, r2, #8
 801fc40:	f8be 1000 	ldrh.w	r1, [lr]
 801fc44:	4343      	muls	r3, r0
 801fc46:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801fc48:	10cf      	asrs	r7, r1, #3
 801fc4a:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801fc4e:	1c58      	adds	r0, r3, #1
 801fc50:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801fc54:	eb00 2323 	add.w	r3, r0, r3, asr #8
 801fc58:	1208      	asrs	r0, r1, #8
 801fc5a:	ea6f 2323 	mvn.w	r3, r3, asr #8
 801fc5e:	00c9      	lsls	r1, r1, #3
 801fc60:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801fc64:	b2db      	uxtb	r3, r3
 801fc66:	b2c9      	uxtb	r1, r1
 801fc68:	fb10 f003 	smulbb	r0, r0, r3
 801fc6c:	fb11 f103 	smulbb	r1, r1, r3
 801fc70:	fb05 0504 	mla	r5, r5, r4, r0
 801fc74:	10d0      	asrs	r0, r2, #3
 801fc76:	fb17 f703 	smulbb	r7, r7, r3
 801fc7a:	00d2      	lsls	r2, r2, #3
 801fc7c:	b2ad      	uxth	r5, r5
 801fc7e:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801fc82:	b2d2      	uxtb	r2, r2
 801fc84:	fb00 7004 	mla	r0, r0, r4, r7
 801fc88:	1c6b      	adds	r3, r5, #1
 801fc8a:	fb02 1204 	mla	r2, r2, r4, r1
 801fc8e:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801fc92:	b292      	uxth	r2, r2
 801fc94:	b280      	uxth	r0, r0
 801fc96:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801fc9a:	1c57      	adds	r7, r2, #1
 801fc9c:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 801fca0:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801fca4:	433d      	orrs	r5, r7
 801fca6:	1c47      	adds	r7, r0, #1
 801fca8:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 801fcac:	097f      	lsrs	r7, r7, #5
 801fcae:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801fcb2:	433d      	orrs	r5, r7
 801fcb4:	f8ae 5000 	strh.w	r5, [lr]
 801fcb8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801fcba:	f10e 0e02 	add.w	lr, lr, #2
 801fcbe:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801fcc0:	4413      	add	r3, r2
 801fcc2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801fcc4:	9321      	str	r3, [sp, #132]	; 0x84
 801fcc6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801fcc8:	441a      	add	r2, r3
 801fcca:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801fccc:	3b01      	subs	r3, #1
 801fcce:	9222      	str	r2, [sp, #136]	; 0x88
 801fcd0:	9313      	str	r3, [sp, #76]	; 0x4c
 801fcd2:	e61c      	b.n	801f90e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 801fcd4:	fb08 f000 	mul.w	r0, r8, r0
 801fcd8:	fb09 0303 	mla	r3, r9, r3, r0
 801fcdc:	e6dc      	b.n	801fa98 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x570>
 801fcde:	46b9      	mov	r9, r7
 801fce0:	e704      	b.n	801faec <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c4>
 801fce2:	f1c2 0110 	rsb	r1, r2, #16
 801fce6:	437a      	muls	r2, r7
 801fce8:	fb09 2901 	mla	r9, r9, r1, r2
 801fcec:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801fcf0:	ea4f 5059 	mov.w	r0, r9, lsr #21
 801fcf4:	ea4f 1259 	mov.w	r2, r9, lsr #5
 801fcf8:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801fcfc:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801fd00:	4302      	orrs	r2, r0
 801fd02:	e795      	b.n	801fc30 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x708>
 801fd04:	f8ae 2000 	strh.w	r2, [lr]
 801fd08:	e7d6      	b.n	801fcb8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x790>
 801fd0a:	b017      	add	sp, #92	; 0x5c
 801fd0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801fd10 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 801fd10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fd14:	b085      	sub	sp, #20
 801fd16:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
 801fd1a:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 801fd1e:	2800      	cmp	r0, #0
 801fd20:	9103      	str	r1, [sp, #12]
 801fd22:	fb00 7406 	mla	r4, r0, r6, r7
 801fd26:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	; 0x3c
 801fd2a:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 801fd2e:	eb03 0544 	add.w	r5, r3, r4, lsl #1
 801fd32:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 801fd36:	eb02 0904 	add.w	r9, r2, r4
 801fd3a:	9501      	str	r5, [sp, #4]
 801fd3c:	f2c0 8141 	blt.w	801ffc2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
 801fd40:	4583      	cmp	fp, r0
 801fd42:	f340 813e 	ble.w	801ffc2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
 801fd46:	2f00      	cmp	r7, #0
 801fd48:	f2c0 8137 	blt.w	801ffba <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
 801fd4c:	42be      	cmp	r6, r7
 801fd4e:	f340 8134 	ble.w	801ffba <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
 801fd52:	f812 c004 	ldrb.w	ip, [r2, r4]
 801fd56:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 801fd5a:	f64f 041f 	movw	r4, #63519	; 0xf81f
 801fd5e:	ea4f 02ec 	mov.w	r2, ip, asr #3
 801fd62:	f423 65fc 	bic.w	r5, r3, #2016	; 0x7e0
 801fd66:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801fd6a:	4355      	muls	r5, r2
 801fd6c:	fb0c f203 	mul.w	r2, ip, r3
 801fd70:	ea04 1355 	and.w	r3, r4, r5, lsr #5
 801fd74:	f605 0501 	addw	r5, r5, #2049	; 0x801
 801fd78:	441d      	add	r5, r3
 801fd7a:	f102 0320 	add.w	r3, r2, #32
 801fd7e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801fd82:	ea04 1455 	and.w	r4, r4, r5, lsr #5
 801fd86:	0a1b      	lsrs	r3, r3, #8
 801fd88:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801fd8c:	431c      	orrs	r4, r3
 801fd8e:	1c7b      	adds	r3, r7, #1
 801fd90:	f100 811c 	bmi.w	801ffcc <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
 801fd94:	429e      	cmp	r6, r3
 801fd96:	f340 8119 	ble.w	801ffcc <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
 801fd9a:	2900      	cmp	r1, #0
 801fd9c:	f000 8119 	beq.w	801ffd2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c2>
 801fda0:	9a01      	ldr	r2, [sp, #4]
 801fda2:	f899 3001 	ldrb.w	r3, [r9, #1]
 801fda6:	8855      	ldrh	r5, [r2, #2]
 801fda8:	ea4f 08e3 	mov.w	r8, r3, asr #3
 801fdac:	f425 62fc 	bic.w	r2, r5, #2016	; 0x7e0
 801fdb0:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801fdb4:	fb08 f802 	mul.w	r8, r8, r2
 801fdb8:	f64f 021f 	movw	r2, #63519	; 0xf81f
 801fdbc:	435d      	muls	r5, r3
 801fdbe:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
 801fdc2:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801fdc6:	44d0      	add	r8, sl
 801fdc8:	f105 0a20 	add.w	sl, r5, #32
 801fdcc:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 801fdd0:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 801fdd4:	0a2d      	lsrs	r5, r5, #8
 801fdd6:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801fdda:	432a      	orrs	r2, r5
 801fddc:	3001      	adds	r0, #1
 801fdde:	f100 80fe 	bmi.w	801ffde <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
 801fde2:	4583      	cmp	fp, r0
 801fde4:	f340 80fb 	ble.w	801ffde <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
 801fde8:	f1be 0f00 	cmp.w	lr, #0
 801fdec:	f000 80fc 	beq.w	801ffe8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2d8>
 801fdf0:	2f00      	cmp	r7, #0
 801fdf2:	f2c0 80f1 	blt.w	801ffd8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
 801fdf6:	42be      	cmp	r6, r7
 801fdf8:	f340 80ee 	ble.w	801ffd8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
 801fdfc:	9801      	ldr	r0, [sp, #4]
 801fdfe:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 801fe02:	f819 5006 	ldrb.w	r5, [r9, r6]
 801fe06:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
 801fe0a:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801fe0e:	f428 60fc 	bic.w	r0, r8, #2016	; 0x7e0
 801fe12:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801fe16:	fb0a fa00 	mul.w	sl, sl, r0
 801fe1a:	fb05 f808 	mul.w	r8, r5, r8
 801fe1e:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
 801fe22:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 801fe26:	4482      	add	sl, r0
 801fe28:	f108 0020 	add.w	r0, r8, #32
 801fe2c:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 801fe30:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
 801fe34:	0a00      	lsrs	r0, r0, #8
 801fe36:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801fe3a:	ea4b 0b00 	orr.w	fp, fp, r0
 801fe3e:	3701      	adds	r7, #1
 801fe40:	f100 80d7 	bmi.w	801fff2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
 801fe44:	42be      	cmp	r6, r7
 801fe46:	f340 80d4 	ble.w	801fff2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
 801fe4a:	2900      	cmp	r1, #0
 801fe4c:	f000 80d4 	beq.w	801fff8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e8>
 801fe50:	3601      	adds	r6, #1
 801fe52:	9801      	ldr	r0, [sp, #4]
 801fe54:	f819 7006 	ldrb.w	r7, [r9, r6]
 801fe58:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
 801fe5c:	ea4f 09e7 	mov.w	r9, r7, asr #3
 801fe60:	f420 66fc 	bic.w	r6, r0, #2016	; 0x7e0
 801fe64:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801fe68:	fb09 f906 	mul.w	r9, r9, r6
 801fe6c:	fb07 f800 	mul.w	r8, r7, r0
 801fe70:	f64f 001f 	movw	r0, #63519	; 0xf81f
 801fe74:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
 801fe78:	f609 0901 	addw	r9, r9, #2049	; 0x801
 801fe7c:	44d1      	add	r9, sl
 801fe7e:	ea00 1659 	and.w	r6, r0, r9, lsr #5
 801fe82:	f108 0020 	add.w	r0, r8, #32
 801fe86:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 801fe8a:	0a00      	lsrs	r0, r0, #8
 801fe8c:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801fe90:	4330      	orrs	r0, r6
 801fe92:	b28e      	uxth	r6, r1
 801fe94:	fa1f f98e 	uxth.w	r9, lr
 801fe98:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 801fe9c:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 801fea0:	fb06 f809 	mul.w	r8, r6, r9
 801fea4:	0136      	lsls	r6, r6, #4
 801fea6:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801feaa:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 801feae:	9601      	str	r6, [sp, #4]
 801feb0:	ea4a 0404 	orr.w	r4, sl, r4
 801feb4:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 801feb8:	fa1f f689 	uxth.w	r6, r9
 801febc:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801fec0:	fb11 f90e 	smulbb	r9, r1, lr
 801fec4:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801fec8:	9602      	str	r6, [sp, #8]
 801feca:	4626      	mov	r6, r4
 801fecc:	f3c9 09c7 	ubfx	r9, r9, #3, #8
 801fed0:	f1ce 0410 	rsb	r4, lr, #16
 801fed4:	ea4a 0202 	orr.w	r2, sl, r2
 801fed8:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 801fedc:	1a64      	subs	r4, r4, r1
 801fede:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
 801fee2:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801fee6:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801feea:	434a      	muls	r2, r1
 801feec:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 801fef0:	ea4a 0000 	orr.w	r0, sl, r0
 801fef4:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 801fef8:	fb04 2406 	mla	r4, r4, r6, r2
 801fefc:	9903      	ldr	r1, [sp, #12]
 801fefe:	fb09 4200 	mla	r2, r9, r0, r4
 801ff02:	ea4f 440b 	mov.w	r4, fp, lsl #16
 801ff06:	9801      	ldr	r0, [sp, #4]
 801ff08:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 801ff0c:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 801ff10:	8809      	ldrh	r1, [r1, #0]
 801ff12:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 801ff16:	ea44 0b0b 	orr.w	fp, r4, fp
 801ff1a:	9c02      	ldr	r4, [sp, #8]
 801ff1c:	1b00      	subs	r0, r0, r4
 801ff1e:	9c01      	ldr	r4, [sp, #4]
 801ff20:	fb0e 2e0b 	mla	lr, lr, fp, r2
 801ff24:	eba4 0608 	sub.w	r6, r4, r8
 801ff28:	b280      	uxth	r0, r0
 801ff2a:	ea4f 525e 	mov.w	r2, lr, lsr #21
 801ff2e:	b2b6      	uxth	r6, r6
 801ff30:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 801ff34:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801ff38:	4373      	muls	r3, r6
 801ff3a:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801ff3e:	fb0c 3300 	mla	r3, ip, r0, r3
 801ff42:	9802      	ldr	r0, [sp, #8]
 801ff44:	ea42 0e0e 	orr.w	lr, r2, lr
 801ff48:	fb00 3505 	mla	r5, r0, r5, r3
 801ff4c:	120b      	asrs	r3, r1, #8
 801ff4e:	10c8      	asrs	r0, r1, #3
 801ff50:	fb08 5707 	mla	r7, r8, r7, r5
 801ff54:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801ff58:	00c9      	lsls	r1, r1, #3
 801ff5a:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801ff5e:	ea6f 2727 	mvn.w	r7, r7, asr #8
 801ff62:	fa1f f28e 	uxth.w	r2, lr
 801ff66:	b2c9      	uxtb	r1, r1
 801ff68:	b2ff      	uxtb	r7, r7
 801ff6a:	437b      	muls	r3, r7
 801ff6c:	4378      	muls	r0, r7
 801ff6e:	434f      	muls	r7, r1
 801ff70:	1c59      	adds	r1, r3, #1
 801ff72:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801ff76:	1213      	asrs	r3, r2, #8
 801ff78:	f023 0307 	bic.w	r3, r3, #7
 801ff7c:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801ff80:	1c41      	adds	r1, r0, #1
 801ff82:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 801ff86:	10d1      	asrs	r1, r2, #3
 801ff88:	021b      	lsls	r3, r3, #8
 801ff8a:	f021 0103 	bic.w	r1, r1, #3
 801ff8e:	00d2      	lsls	r2, r2, #3
 801ff90:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 801ff94:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 801ff98:	00c9      	lsls	r1, r1, #3
 801ff9a:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801ff9e:	430b      	orrs	r3, r1
 801ffa0:	1c79      	adds	r1, r7, #1
 801ffa2:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 801ffa6:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 801ffaa:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801ffae:	431a      	orrs	r2, r3
 801ffb0:	9b03      	ldr	r3, [sp, #12]
 801ffb2:	801a      	strh	r2, [r3, #0]
 801ffb4:	b005      	add	sp, #20
 801ffb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ffba:	f04f 0c00 	mov.w	ip, #0
 801ffbe:	4664      	mov	r4, ip
 801ffc0:	e6e5      	b.n	801fd8e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7e>
 801ffc2:	2300      	movs	r3, #0
 801ffc4:	469c      	mov	ip, r3
 801ffc6:	461a      	mov	r2, r3
 801ffc8:	461c      	mov	r4, r3
 801ffca:	e707      	b.n	801fddc <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 801ffcc:	2300      	movs	r3, #0
 801ffce:	461a      	mov	r2, r3
 801ffd0:	e704      	b.n	801fddc <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 801ffd2:	460b      	mov	r3, r1
 801ffd4:	460a      	mov	r2, r1
 801ffd6:	e701      	b.n	801fddc <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 801ffd8:	2500      	movs	r5, #0
 801ffda:	46ab      	mov	fp, r5
 801ffdc:	e72f      	b.n	801fe3e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x12e>
 801ffde:	2700      	movs	r7, #0
 801ffe0:	463d      	mov	r5, r7
 801ffe2:	4638      	mov	r0, r7
 801ffe4:	46bb      	mov	fp, r7
 801ffe6:	e754      	b.n	801fe92 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 801ffe8:	4677      	mov	r7, lr
 801ffea:	4675      	mov	r5, lr
 801ffec:	4670      	mov	r0, lr
 801ffee:	46f3      	mov	fp, lr
 801fff0:	e74f      	b.n	801fe92 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 801fff2:	2700      	movs	r7, #0
 801fff4:	4638      	mov	r0, r7
 801fff6:	e74c      	b.n	801fe92 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 801fff8:	460f      	mov	r7, r1
 801fffa:	4608      	mov	r0, r1
 801fffc:	e749      	b.n	801fe92 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
	...

08020000 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020004:	b093      	sub	sp, #76	; 0x4c
 8020006:	9210      	str	r2, [sp, #64]	; 0x40
 8020008:	9a21      	ldr	r2, [sp, #132]	; 0x84
 802000a:	9011      	str	r0, [sp, #68]	; 0x44
 802000c:	910e      	str	r1, [sp, #56]	; 0x38
 802000e:	6850      	ldr	r0, [r2, #4]
 8020010:	9306      	str	r3, [sp, #24]
 8020012:	6812      	ldr	r2, [r2, #0]
 8020014:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 8020018:	fb00 1303 	mla	r3, r0, r3, r1
 802001c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8020020:	9307      	str	r3, [sp, #28]
 8020022:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020024:	681b      	ldr	r3, [r3, #0]
 8020026:	9308      	str	r3, [sp, #32]
 8020028:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802002a:	685b      	ldr	r3, [r3, #4]
 802002c:	9309      	str	r3, [sp, #36]	; 0x24
 802002e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020030:	2b00      	cmp	r3, #0
 8020032:	dc03      	bgt.n	802003c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8020034:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020036:	2b00      	cmp	r3, #0
 8020038:	f340 83b6 	ble.w	80207a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
 802003c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802003e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8020042:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8020046:	1e48      	subs	r0, r1, #1
 8020048:	1e55      	subs	r5, r2, #1
 802004a:	9b06      	ldr	r3, [sp, #24]
 802004c:	2b00      	cmp	r3, #0
 802004e:	f340 8165 	ble.w	802031c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 8020052:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8020054:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8020056:	1436      	asrs	r6, r6, #16
 8020058:	ea4f 4323 	mov.w	r3, r3, asr #16
 802005c:	d406      	bmi.n	802006c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 802005e:	4286      	cmp	r6, r0
 8020060:	da04      	bge.n	802006c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8020062:	2b00      	cmp	r3, #0
 8020064:	db02      	blt.n	802006c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8020066:	42ab      	cmp	r3, r5
 8020068:	f2c0 8159 	blt.w	802031e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 802006c:	3601      	adds	r6, #1
 802006e:	f100 8146 	bmi.w	80202fe <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8020072:	42b1      	cmp	r1, r6
 8020074:	f2c0 8143 	blt.w	80202fe <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8020078:	3301      	adds	r3, #1
 802007a:	f100 8140 	bmi.w	80202fe <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 802007e:	429a      	cmp	r2, r3
 8020080:	f2c0 813d 	blt.w	80202fe <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8020084:	9b06      	ldr	r3, [sp, #24]
 8020086:	f64f 061f 	movw	r6, #63519	; 0xf81f
 802008a:	9f07      	ldr	r7, [sp, #28]
 802008c:	930f      	str	r3, [sp, #60]	; 0x3c
 802008e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8020090:	2b00      	cmp	r3, #0
 8020092:	f340 8166 	ble.w	8020362 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8020096:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8020098:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 802009a:	1418      	asrs	r0, r3, #16
 802009c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802009e:	142d      	asrs	r5, r5, #16
 80200a0:	f3c3 3103 	ubfx	r1, r3, #12, #4
 80200a4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80200a6:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 80200aa:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80200ac:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80200b0:	f100 81f0 	bmi.w	8020494 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 80200b4:	f102 3eff 	add.w	lr, r2, #4294967295
 80200b8:	4575      	cmp	r5, lr
 80200ba:	f280 81eb 	bge.w	8020494 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 80200be:	2800      	cmp	r0, #0
 80200c0:	f2c0 81e8 	blt.w	8020494 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 80200c4:	f103 3eff 	add.w	lr, r3, #4294967295
 80200c8:	4570      	cmp	r0, lr
 80200ca:	f280 81e3 	bge.w	8020494 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 80200ce:	b212      	sxth	r2, r2
 80200d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80200d2:	fa1f fe81 	uxth.w	lr, r1
 80200d6:	fb00 5002 	mla	r0, r0, r2, r5
 80200da:	ea4f 150e 	mov.w	r5, lr, lsl #4
 80200de:	eb03 0a00 	add.w	sl, r3, r0
 80200e2:	f813 9000 	ldrb.w	r9, [r3, r0]
 80200e6:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 80200ea:	f89a 8001 	ldrb.w	r8, [sl, #1]
 80200ee:	b29b      	uxth	r3, r3
 80200f0:	f1bc 0f00 	cmp.w	ip, #0
 80200f4:	f000 817b 	beq.w	80203ee <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 80200f8:	f81a 4002 	ldrb.w	r4, [sl, r2]
 80200fc:	eb0a 0b02 	add.w	fp, sl, r2
 8020100:	fa1f fa8c 	uxth.w	sl, ip
 8020104:	940a      	str	r4, [sp, #40]	; 0x28
 8020106:	fb0a fe0e 	mul.w	lr, sl, lr
 802010a:	f89b 4001 	ldrb.w	r4, [fp, #1]
 802010e:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 8020112:	eba5 050e 	sub.w	r5, r5, lr
 8020116:	940b      	str	r4, [sp, #44]	; 0x2c
 8020118:	fa1f fa8a 	uxth.w	sl, sl
 802011c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802011e:	b2ad      	uxth	r5, r5
 8020120:	eba3 030a 	sub.w	r3, r3, sl
 8020124:	fb08 f505 	mul.w	r5, r8, r5
 8020128:	b29b      	uxth	r3, r3
 802012a:	fb09 5303 	mla	r3, r9, r3, r5
 802012e:	fb0a 3304 	mla	r3, sl, r4, r3
 8020132:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020134:	fb0e 3304 	mla	r3, lr, r4, r3
 8020138:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802013c:	2b00      	cmp	r3, #0
 802013e:	f000 80d1 	beq.w	80202e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 8020142:	9c08      	ldr	r4, [sp, #32]
 8020144:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8020148:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 802014c:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 8020150:	f000 8152 	beq.w	80203f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 8020154:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8020158:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 802015c:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8020160:	fb0a fe0e 	mul.w	lr, sl, lr
 8020164:	fb09 f000 	mul.w	r0, r9, r0
 8020168:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 802016c:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8020170:	f100 0b20 	add.w	fp, r0, #32
 8020174:	44ce      	add	lr, r9
 8020176:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 802017a:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 802017e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8020182:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8020186:	ea4e 0909 	orr.w	r9, lr, r9
 802018a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802018e:	8868      	ldrh	r0, [r5, #2]
 8020190:	d019      	beq.n	80201c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8020192:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8020196:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 802019a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802019e:	fb0a fe0e 	mul.w	lr, sl, lr
 80201a2:	fb08 f800 	mul.w	r8, r8, r0
 80201a6:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 80201aa:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 80201ae:	f108 0b20 	add.w	fp, r8, #32
 80201b2:	4486      	add	lr, r0
 80201b4:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 80201b8:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 80201bc:	0a00      	lsrs	r0, r0, #8
 80201be:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80201c2:	ea4e 0000 	orr.w	r0, lr, r0
 80201c6:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 80201ca:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 80201ce:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 80201d2:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80201d6:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 80201da:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80201de:	ea4e 0909 	orr.w	r9, lr, r9
 80201e2:	ea4a 0000 	orr.w	r0, sl, r0
 80201e6:	f1bc 0f00 	cmp.w	ip, #0
 80201ea:	f000 8107 	beq.w	80203fc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fc>
 80201ee:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 80201f2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80201f4:	3a01      	subs	r2, #1
 80201f6:	2cff      	cmp	r4, #255	; 0xff
 80201f8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80201fc:	f102 0202 	add.w	r2, r2, #2
 8020200:	eb05 0e02 	add.w	lr, r5, r2
 8020204:	5aaa      	ldrh	r2, [r5, r2]
 8020206:	d018      	beq.n	802023a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8020208:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 802020c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8020210:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8020214:	fb04 fa02 	mul.w	sl, r4, r2
 8020218:	fb08 f805 	mul.w	r8, r8, r5
 802021c:	f10a 0520 	add.w	r5, sl, #32
 8020220:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 8020224:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8020228:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 802022c:	4442      	add	r2, r8
 802022e:	0a2d      	lsrs	r5, r5, #8
 8020230:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 8020234:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8020238:	432a      	orrs	r2, r5
 802023a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802023c:	f8be 5002 	ldrh.w	r5, [lr, #2]
 8020240:	2cff      	cmp	r4, #255	; 0xff
 8020242:	d01a      	beq.n	802027a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8020244:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 8020248:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 802024c:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8020250:	fb04 fa05 	mul.w	sl, r4, r5
 8020254:	fb08 f80e 	mul.w	r8, r8, lr
 8020258:	f10a 0e20 	add.w	lr, sl, #32
 802025c:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 8020260:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8020264:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 8020268:	4445      	add	r5, r8
 802026a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802026e:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 8020272:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 8020276:	ea45 050e 	orr.w	r5, r5, lr
 802027a:	fb1c fe01 	smulbb	lr, ip, r1
 802027e:	f1cc 0810 	rsb	r8, ip, #16
 8020282:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8020286:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802028a:	ea4f 0eee 	mov.w	lr, lr, asr #3
 802028e:	eba8 0801 	sub.w	r8, r8, r1
 8020292:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 8020296:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802029a:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 802029e:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 80202a2:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 80202a6:	ea4a 0202 	orr.w	r2, sl, r2
 80202aa:	4341      	muls	r1, r0
 80202ac:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 80202b0:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80202b4:	fb09 1108 	mla	r1, r9, r8, r1
 80202b8:	ea4b 0505 	orr.w	r5, fp, r5
 80202bc:	fb0c 1102 	mla	r1, ip, r2, r1
 80202c0:	fb0e 1e05 	mla	lr, lr, r5, r1
 80202c4:	ea4f 525e 	mov.w	r2, lr, lsr #21
 80202c8:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80202cc:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80202d0:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 80202d4:	ea42 0e0e 	orr.w	lr, r2, lr
 80202d8:	fa1f f28e 	uxth.w	r2, lr
 80202dc:	2bff      	cmp	r3, #255	; 0xff
 80202de:	f040 80a1 	bne.w	8020424 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 80202e2:	803a      	strh	r2, [r7, #0]
 80202e4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80202e6:	3702      	adds	r7, #2
 80202e8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80202ea:	4413      	add	r3, r2
 80202ec:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80202ee:	931d      	str	r3, [sp, #116]	; 0x74
 80202f0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80202f2:	441a      	add	r2, r3
 80202f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80202f6:	3b01      	subs	r3, #1
 80202f8:	921e      	str	r2, [sp, #120]	; 0x78
 80202fa:	930f      	str	r3, [sp, #60]	; 0x3c
 80202fc:	e6c7      	b.n	802008e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80202fe:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8020300:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 8020302:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8020304:	4433      	add	r3, r6
 8020306:	931d      	str	r3, [sp, #116]	; 0x74
 8020308:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802030a:	441c      	add	r4, r3
 802030c:	9b06      	ldr	r3, [sp, #24]
 802030e:	3b01      	subs	r3, #1
 8020310:	941e      	str	r4, [sp, #120]	; 0x78
 8020312:	9306      	str	r3, [sp, #24]
 8020314:	9b07      	ldr	r3, [sp, #28]
 8020316:	3302      	adds	r3, #2
 8020318:	9307      	str	r3, [sp, #28]
 802031a:	e696      	b.n	802004a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 802031c:	d028      	beq.n	8020370 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 802031e:	9b06      	ldr	r3, [sp, #24]
 8020320:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8020322:	3b01      	subs	r3, #1
 8020324:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8020326:	fb00 5003 	mla	r0, r0, r3, r5
 802032a:	1400      	asrs	r0, r0, #16
 802032c:	f53f aeaa 	bmi.w	8020084 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8020330:	3901      	subs	r1, #1
 8020332:	4288      	cmp	r0, r1
 8020334:	f6bf aea6 	bge.w	8020084 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8020338:	9920      	ldr	r1, [sp, #128]	; 0x80
 802033a:	981e      	ldr	r0, [sp, #120]	; 0x78
 802033c:	fb01 0303 	mla	r3, r1, r3, r0
 8020340:	141b      	asrs	r3, r3, #16
 8020342:	f53f ae9f 	bmi.w	8020084 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8020346:	3a01      	subs	r2, #1
 8020348:	4293      	cmp	r3, r2
 802034a:	f6bf ae9b 	bge.w	8020084 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 802034e:	9b06      	ldr	r3, [sp, #24]
 8020350:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8020354:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8020358:	930f      	str	r3, [sp, #60]	; 0x3c
 802035a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802035c:	2b00      	cmp	r3, #0
 802035e:	f300 80b6 	bgt.w	80204ce <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ce>
 8020362:	9b06      	ldr	r3, [sp, #24]
 8020364:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8020368:	9b07      	ldr	r3, [sp, #28]
 802036a:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 802036e:	9307      	str	r3, [sp, #28]
 8020370:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020372:	2b00      	cmp	r3, #0
 8020374:	f340 8218 	ble.w	80207a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
 8020378:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802037c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802037e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020382:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020386:	eef0 6a62 	vmov.f32	s13, s5
 802038a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802038e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020392:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020396:	edcd 6a1d 	vstr	s13, [sp, #116]	; 0x74
 802039a:	eef0 6a43 	vmov.f32	s13, s6
 802039e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80203a2:	edcd 6a1e 	vstr	s13, [sp, #120]	; 0x78
 80203a6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80203aa:	ee61 7a27 	vmul.f32	s15, s2, s15
 80203ae:	ee77 2a62 	vsub.f32	s5, s14, s5
 80203b2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80203b6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80203ba:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80203be:	ee12 2a90 	vmov	r2, s5
 80203c2:	eef0 2a47 	vmov.f32	s5, s14
 80203c6:	fb92 f3f3 	sdiv	r3, r2, r3
 80203ca:	ee13 2a10 	vmov	r2, s6
 80203ce:	931f      	str	r3, [sp, #124]	; 0x7c
 80203d0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80203d2:	eeb0 3a67 	vmov.f32	s6, s15
 80203d6:	fb92 f3f3 	sdiv	r3, r2, r3
 80203da:	9320      	str	r3, [sp, #128]	; 0x80
 80203dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80203de:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80203e0:	3b01      	subs	r3, #1
 80203e2:	930e      	str	r3, [sp, #56]	; 0x38
 80203e4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80203e6:	bf08      	it	eq
 80203e8:	4613      	moveq	r3, r2
 80203ea:	9306      	str	r3, [sp, #24]
 80203ec:	e61f      	b.n	802002e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 80203ee:	fb08 f505 	mul.w	r5, r8, r5
 80203f2:	fb09 5303 	mla	r3, r9, r3, r5
 80203f6:	e69f      	b.n	8020138 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 80203f8:	4681      	mov	r9, r0
 80203fa:	e6c6      	b.n	802018a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 80203fc:	f1c1 0210 	rsb	r2, r1, #16
 8020400:	4341      	muls	r1, r0
 8020402:	fb09 1902 	mla	r9, r9, r2, r1
 8020406:	ea4f 0949 	mov.w	r9, r9, lsl #1
 802040a:	ea4f 5259 	mov.w	r2, r9, lsr #21
 802040e:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8020412:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8020416:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 802041a:	ea42 0909 	orr.w	r9, r2, r9
 802041e:	fa1f f289 	uxth.w	r2, r9
 8020422:	e75b      	b.n	80202dc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>
 8020424:	f8b7 c000 	ldrh.w	ip, [r7]
 8020428:	43db      	mvns	r3, r3
 802042a:	ea4f 202c 	mov.w	r0, ip, asr #8
 802042e:	fa5f fe83 	uxtb.w	lr, r3
 8020432:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8020436:	ea4f 05ec 	mov.w	r5, ip, asr #3
 802043a:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 802043e:	fb00 f00e 	mul.w	r0, r0, lr
 8020442:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8020446:	b2db      	uxtb	r3, r3
 8020448:	1c41      	adds	r1, r0, #1
 802044a:	fb05 f50e 	mul.w	r5, r5, lr
 802044e:	fb03 f30e 	mul.w	r3, r3, lr
 8020452:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8020456:	1211      	asrs	r1, r2, #8
 8020458:	f021 0107 	bic.w	r1, r1, #7
 802045c:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8020460:	48d3      	ldr	r0, [pc, #844]	; (80207b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b0>)
 8020462:	b2c9      	uxtb	r1, r1
 8020464:	ea00 2001 	and.w	r0, r0, r1, lsl #8
 8020468:	1c69      	adds	r1, r5, #1
 802046a:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 802046e:	10d1      	asrs	r1, r2, #3
 8020470:	00d2      	lsls	r2, r2, #3
 8020472:	f021 0103 	bic.w	r1, r1, #3
 8020476:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 802047a:	00c9      	lsls	r1, r1, #3
 802047c:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8020480:	4301      	orrs	r1, r0
 8020482:	1c58      	adds	r0, r3, #1
 8020484:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8020488:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 802048c:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8020490:	430a      	orrs	r2, r1
 8020492:	e726      	b.n	80202e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e2>
 8020494:	f115 0e01 	adds.w	lr, r5, #1
 8020498:	f53f af24 	bmi.w	80202e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 802049c:	4572      	cmp	r2, lr
 802049e:	f6ff af21 	blt.w	80202e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 80204a2:	f110 0e01 	adds.w	lr, r0, #1
 80204a6:	f53f af1d 	bmi.w	80202e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 80204aa:	4573      	cmp	r3, lr
 80204ac:	f6ff af1a 	blt.w	80202e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 80204b0:	b21b      	sxth	r3, r3
 80204b2:	b212      	sxth	r2, r2
 80204b4:	9301      	str	r3, [sp, #4]
 80204b6:	9200      	str	r2, [sp, #0]
 80204b8:	e9cd 1c04 	strd	r1, ip, [sp, #16]
 80204bc:	e9cd 5002 	strd	r5, r0, [sp, #8]
 80204c0:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 80204c4:	4639      	mov	r1, r7
 80204c6:	9811      	ldr	r0, [sp, #68]	; 0x44
 80204c8:	f7ff fc22 	bl	801fd10 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 80204cc:	e70a      	b.n	80202e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 80204ce:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80204d0:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80204d4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80204d6:	f3c3 3503 	ubfx	r5, r3, #12, #4
 80204da:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80204dc:	fa1f fc82 	uxth.w	ip, r2
 80204e0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80204e4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80204e6:	ea4f 100c 	mov.w	r0, ip, lsl #4
 80204ea:	141f      	asrs	r7, r3, #16
 80204ec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80204ee:	141b      	asrs	r3, r3, #16
 80204f0:	fb01 3707 	mla	r7, r1, r7, r3
 80204f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80204f6:	eb03 0a07 	add.w	sl, r3, r7
 80204fa:	f813 9007 	ldrb.w	r9, [r3, r7]
 80204fe:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8020502:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8020506:	b29b      	uxth	r3, r3
 8020508:	2d00      	cmp	r5, #0
 802050a:	f000 80fe 	beq.w	802070a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70a>
 802050e:	f81a 4001 	ldrb.w	r4, [sl, r1]
 8020512:	eb0a 0b01 	add.w	fp, sl, r1
 8020516:	fa1f fa85 	uxth.w	sl, r5
 802051a:	940c      	str	r4, [sp, #48]	; 0x30
 802051c:	fb0a fc0c 	mul.w	ip, sl, ip
 8020520:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8020524:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 8020528:	eba0 000c 	sub.w	r0, r0, ip
 802052c:	940d      	str	r4, [sp, #52]	; 0x34
 802052e:	fa1f fa8a 	uxth.w	sl, sl
 8020532:	b280      	uxth	r0, r0
 8020534:	eba3 030a 	sub.w	r3, r3, sl
 8020538:	fb08 f000 	mul.w	r0, r8, r0
 802053c:	b29b      	uxth	r3, r3
 802053e:	fb09 0303 	mla	r3, r9, r3, r0
 8020542:	980c      	ldr	r0, [sp, #48]	; 0x30
 8020544:	fb0a 3300 	mla	r3, sl, r0, r3
 8020548:	fb0c 3304 	mla	r3, ip, r4, r3
 802054c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8020550:	2b00      	cmp	r3, #0
 8020552:	f000 80cc 	beq.w	80206ee <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ee>
 8020556:	9808      	ldr	r0, [sp, #32]
 8020558:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 802055c:	9c08      	ldr	r4, [sp, #32]
 802055e:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 8020562:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 8020566:	f000 80d5 	beq.w	8020714 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x714>
 802056a:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 802056e:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8020572:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8020576:	fb0a fc0c 	mul.w	ip, sl, ip
 802057a:	fb09 f707 	mul.w	r7, r9, r7
 802057e:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 8020582:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8020586:	f107 0b20 	add.w	fp, r7, #32
 802058a:	44cc      	add	ip, r9
 802058c:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 8020590:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8020594:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8020598:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 802059c:	ea4c 0909 	orr.w	r9, ip, r9
 80205a0:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80205a4:	8847      	ldrh	r7, [r0, #2]
 80205a6:	d019      	beq.n	80205dc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5dc>
 80205a8:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 80205ac:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 80205b0:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80205b4:	fb0a fc0c 	mul.w	ip, sl, ip
 80205b8:	fb08 f807 	mul.w	r8, r8, r7
 80205bc:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 80205c0:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 80205c4:	f108 0b20 	add.w	fp, r8, #32
 80205c8:	44bc      	add	ip, r7
 80205ca:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 80205ce:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 80205d2:	0a3f      	lsrs	r7, r7, #8
 80205d4:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80205d8:	ea4c 0707 	orr.w	r7, ip, r7
 80205dc:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 80205e0:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 80205e4:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 80205e8:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 80205ec:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 80205f0:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80205f4:	ea4c 0909 	orr.w	r9, ip, r9
 80205f8:	ea4a 0707 	orr.w	r7, sl, r7
 80205fc:	2d00      	cmp	r5, #0
 80205fe:	f000 808b 	beq.w	8020718 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 8020602:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8020606:	3901      	subs	r1, #1
 8020608:	0049      	lsls	r1, r1, #1
 802060a:	3102      	adds	r1, #2
 802060c:	eb00 0c01 	add.w	ip, r0, r1
 8020610:	5a41      	ldrh	r1, [r0, r1]
 8020612:	980c      	ldr	r0, [sp, #48]	; 0x30
 8020614:	28ff      	cmp	r0, #255	; 0xff
 8020616:	d019      	beq.n	802064c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64c>
 8020618:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 802061c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802061e:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8020622:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8020626:	fb04 fa01 	mul.w	sl, r4, r1
 802062a:	fb08 f800 	mul.w	r8, r8, r0
 802062e:	f10a 0020 	add.w	r0, sl, #32
 8020632:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 8020636:	f608 0801 	addw	r8, r8, #2049	; 0x801
 802063a:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 802063e:	4441      	add	r1, r8
 8020640:	0a00      	lsrs	r0, r0, #8
 8020642:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 8020646:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802064a:	4301      	orrs	r1, r0
 802064c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802064e:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 8020652:	2cff      	cmp	r4, #255	; 0xff
 8020654:	d01a      	beq.n	802068c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68c>
 8020656:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 802065a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802065e:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8020662:	fb04 fa00 	mul.w	sl, r4, r0
 8020666:	fb08 f80c 	mul.w	r8, r8, ip
 802066a:	f10a 0c20 	add.w	ip, sl, #32
 802066e:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 8020672:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8020676:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 802067a:	4440      	add	r0, r8
 802067c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020680:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 8020684:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8020688:	ea40 000c 	orr.w	r0, r0, ip
 802068c:	fb15 fc02 	smulbb	ip, r5, r2
 8020690:	f1c5 0810 	rsb	r8, r5, #16
 8020694:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8020698:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 802069c:	ea4f 0cec 	mov.w	ip, ip, asr #3
 80206a0:	eba8 0802 	sub.w	r8, r8, r2
 80206a4:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 80206a8:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80206ac:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 80206b0:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80206b4:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 80206b8:	ea4a 0101 	orr.w	r1, sl, r1
 80206bc:	437a      	muls	r2, r7
 80206be:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 80206c2:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80206c6:	fb09 2208 	mla	r2, r9, r8, r2
 80206ca:	ea4b 0000 	orr.w	r0, fp, r0
 80206ce:	fb05 2201 	mla	r2, r5, r1, r2
 80206d2:	fb0c 2200 	mla	r2, ip, r0, r2
 80206d6:	0d57      	lsrs	r7, r2, #21
 80206d8:	0952      	lsrs	r2, r2, #5
 80206da:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80206de:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80206e2:	433a      	orrs	r2, r7
 80206e4:	2bff      	cmp	r3, #255	; 0xff
 80206e6:	b292      	uxth	r2, r2
 80206e8:	d127      	bne.n	802073a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73a>
 80206ea:	f8ae 2000 	strh.w	r2, [lr]
 80206ee:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80206f0:	f10e 0e02 	add.w	lr, lr, #2
 80206f4:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80206f6:	4413      	add	r3, r2
 80206f8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80206fa:	931d      	str	r3, [sp, #116]	; 0x74
 80206fc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80206fe:	441a      	add	r2, r3
 8020700:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8020702:	3b01      	subs	r3, #1
 8020704:	921e      	str	r2, [sp, #120]	; 0x78
 8020706:	930f      	str	r3, [sp, #60]	; 0x3c
 8020708:	e627      	b.n	802035a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 802070a:	fb08 f000 	mul.w	r0, r8, r0
 802070e:	fb09 0303 	mla	r3, r9, r3, r0
 8020712:	e71b      	b.n	802054c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54c>
 8020714:	46b9      	mov	r9, r7
 8020716:	e743      	b.n	80205a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a0>
 8020718:	f1c2 0110 	rsb	r1, r2, #16
 802071c:	437a      	muls	r2, r7
 802071e:	fb09 2901 	mla	r9, r9, r1, r2
 8020722:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8020726:	ea4f 5059 	mov.w	r0, r9, lsr #21
 802072a:	ea4f 1259 	mov.w	r2, r9, lsr #5
 802072e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8020732:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8020736:	4302      	orrs	r2, r0
 8020738:	e7d4      	b.n	80206e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e4>
 802073a:	f8be 7000 	ldrh.w	r7, [lr]
 802073e:	43db      	mvns	r3, r3
 8020740:	4c1b      	ldr	r4, [pc, #108]	; (80207b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b0>)
 8020742:	1238      	asrs	r0, r7, #8
 8020744:	fa5f fc83 	uxtb.w	ip, r3
 8020748:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802074c:	10fd      	asrs	r5, r7, #3
 802074e:	00fb      	lsls	r3, r7, #3
 8020750:	fb00 f00c 	mul.w	r0, r0, ip
 8020754:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8020758:	b2db      	uxtb	r3, r3
 802075a:	fb05 f10c 	mul.w	r1, r5, ip
 802075e:	1c45      	adds	r5, r0, #1
 8020760:	fb03 f30c 	mul.w	r3, r3, ip
 8020764:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8020768:	1215      	asrs	r5, r2, #8
 802076a:	f025 0507 	bic.w	r5, r5, #7
 802076e:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8020772:	1c4d      	adds	r5, r1, #1
 8020774:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 8020778:	10d1      	asrs	r1, r2, #3
 802077a:	b2c0      	uxtb	r0, r0
 802077c:	f021 0103 	bic.w	r1, r1, #3
 8020780:	00d2      	lsls	r2, r2, #3
 8020782:	ea04 2000 	and.w	r0, r4, r0, lsl #8
 8020786:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 802078a:	00c9      	lsls	r1, r1, #3
 802078c:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8020790:	4308      	orrs	r0, r1
 8020792:	1c59      	adds	r1, r3, #1
 8020794:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8020798:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802079c:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 80207a0:	4318      	orrs	r0, r3
 80207a2:	f8ae 0000 	strh.w	r0, [lr]
 80207a6:	e7a2      	b.n	80206ee <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ee>
 80207a8:	b013      	add	sp, #76	; 0x4c
 80207aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80207ae:	bf00      	nop
 80207b0:	fffff800 	.word	0xfffff800

080207b4 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>:
 80207b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80207b8:	e9dd 4509 	ldrd	r4, r5, [sp, #36]	; 0x24
 80207bc:	f9bd a020 	ldrsh.w	sl, [sp, #32]
 80207c0:	fb05 4c03 	mla	ip, r5, r3, r4
 80207c4:	2d00      	cmp	r5, #0
 80207c6:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 80207ca:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 80207ce:	eb02 0e4c 	add.w	lr, r2, ip, lsl #1
 80207d2:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 80207d6:	8808      	ldrh	r0, [r1, #0]
 80207d8:	f2c0 80a7 	blt.w	802092a <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
 80207dc:	45aa      	cmp	sl, r5
 80207de:	f340 80a4 	ble.w	802092a <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
 80207e2:	2c00      	cmp	r4, #0
 80207e4:	f2c0 809f 	blt.w	8020926 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
 80207e8:	42a3      	cmp	r3, r4
 80207ea:	f340 809c 	ble.w	8020926 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
 80207ee:	f832 801c 	ldrh.w	r8, [r2, ip, lsl #1]
 80207f2:	1c62      	adds	r2, r4, #1
 80207f4:	f100 809c 	bmi.w	8020930 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 80207f8:	4293      	cmp	r3, r2
 80207fa:	f340 8099 	ble.w	8020930 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 80207fe:	f1b9 0f00 	cmp.w	r9, #0
 8020802:	f000 8095 	beq.w	8020930 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 8020806:	f8be c002 	ldrh.w	ip, [lr, #2]
 802080a:	3501      	adds	r5, #1
 802080c:	f100 8094 	bmi.w	8020938 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 8020810:	45aa      	cmp	sl, r5
 8020812:	f340 8091 	ble.w	8020938 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 8020816:	2f00      	cmp	r7, #0
 8020818:	f000 808e 	beq.w	8020938 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 802081c:	2c00      	cmp	r4, #0
 802081e:	f2c0 8089 	blt.w	8020934 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
 8020822:	42a3      	cmp	r3, r4
 8020824:	f340 8086 	ble.w	8020934 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
 8020828:	f83e 5013 	ldrh.w	r5, [lr, r3, lsl #1]
 802082c:	3401      	adds	r4, #1
 802082e:	f100 8086 	bmi.w	802093e <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 8020832:	42a3      	cmp	r3, r4
 8020834:	f340 8083 	ble.w	802093e <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 8020838:	f1b9 0f00 	cmp.w	r9, #0
 802083c:	d07f      	beq.n	802093e <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 802083e:	3301      	adds	r3, #1
 8020840:	f83e 3013 	ldrh.w	r3, [lr, r3, lsl #1]
 8020844:	ea4f 4408 	mov.w	r4, r8, lsl #16
 8020848:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 802084c:	fb19 fe07 	smulbb	lr, r9, r7
 8020850:	f1c7 0210 	rsb	r2, r7, #16
 8020854:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8020858:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 802085c:	eba2 0209 	sub.w	r2, r2, r9
 8020860:	ea44 0808 	orr.w	r8, r4, r8
 8020864:	ea4f 440c 	mov.w	r4, ip, lsl #16
 8020868:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 802086c:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 8020870:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8020874:	ebce 0747 	rsb	r7, lr, r7, lsl #1
 8020878:	ea44 0c0c 	orr.w	ip, r4, ip
 802087c:	ebce 0449 	rsb	r4, lr, r9, lsl #1
 8020880:	fb04 f40c 	mul.w	r4, r4, ip
 8020884:	fb02 4808 	mla	r8, r2, r8, r4
 8020888:	041a      	lsls	r2, r3, #16
 802088a:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 802088e:	b2b4      	uxth	r4, r6
 8020890:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8020894:	43f6      	mvns	r6, r6
 8020896:	4313      	orrs	r3, r2
 8020898:	042a      	lsls	r2, r5, #16
 802089a:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 802089e:	b2f6      	uxtb	r6, r6
 80208a0:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 80208a4:	fb0e 8303 	mla	r3, lr, r3, r8
 80208a8:	432a      	orrs	r2, r5
 80208aa:	fb07 3202 	mla	r2, r7, r2, r3
 80208ae:	10c7      	asrs	r7, r0, #3
 80208b0:	0d53      	lsrs	r3, r2, #21
 80208b2:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80208b6:	0952      	lsrs	r2, r2, #5
 80208b8:	fb17 f706 	smulbb	r7, r7, r6
 80208bc:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80208c0:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80208c4:	431a      	orrs	r2, r3
 80208c6:	b293      	uxth	r3, r2
 80208c8:	1202      	asrs	r2, r0, #8
 80208ca:	121d      	asrs	r5, r3, #8
 80208cc:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 80208d0:	00c0      	lsls	r0, r0, #3
 80208d2:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 80208d6:	fb12 f206 	smulbb	r2, r2, r6
 80208da:	b2c0      	uxtb	r0, r0
 80208dc:	fb05 2504 	mla	r5, r5, r4, r2
 80208e0:	10da      	asrs	r2, r3, #3
 80208e2:	fb10 f006 	smulbb	r0, r0, r6
 80208e6:	00db      	lsls	r3, r3, #3
 80208e8:	b2ad      	uxth	r5, r5
 80208ea:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80208ee:	b2db      	uxtb	r3, r3
 80208f0:	fb02 7204 	mla	r2, r2, r4, r7
 80208f4:	fb03 0004 	mla	r0, r3, r4, r0
 80208f8:	1c6b      	adds	r3, r5, #1
 80208fa:	b292      	uxth	r2, r2
 80208fc:	b280      	uxth	r0, r0
 80208fe:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8020902:	1c43      	adds	r3, r0, #1
 8020904:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8020908:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 802090c:	1c50      	adds	r0, r2, #1
 802090e:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8020912:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8020916:	0952      	lsrs	r2, r2, #5
 8020918:	432b      	orrs	r3, r5
 802091a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802091e:	4313      	orrs	r3, r2
 8020920:	800b      	strh	r3, [r1, #0]
 8020922:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020926:	4680      	mov	r8, r0
 8020928:	e763      	b.n	80207f2 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x3e>
 802092a:	4684      	mov	ip, r0
 802092c:	4680      	mov	r8, r0
 802092e:	e76c      	b.n	802080a <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
 8020930:	4684      	mov	ip, r0
 8020932:	e76a      	b.n	802080a <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
 8020934:	4605      	mov	r5, r0
 8020936:	e779      	b.n	802082c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x78>
 8020938:	4603      	mov	r3, r0
 802093a:	4605      	mov	r5, r0
 802093c:	e782      	b.n	8020844 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>
 802093e:	4603      	mov	r3, r0
 8020940:	e780      	b.n	8020844 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>

08020942 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020942:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020946:	b093      	sub	sp, #76	; 0x4c
 8020948:	461d      	mov	r5, r3
 802094a:	9210      	str	r2, [sp, #64]	; 0x40
 802094c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802094e:	f89d 2094 	ldrb.w	r2, [sp, #148]	; 0x94
 8020952:	910a      	str	r1, [sp, #40]	; 0x28
 8020954:	920b      	str	r2, [sp, #44]	; 0x2c
 8020956:	6859      	ldr	r1, [r3, #4]
 8020958:	681b      	ldr	r3, [r3, #0]
 802095a:	9011      	str	r0, [sp, #68]	; 0x44
 802095c:	e9dd 2722 	ldrd	r2, r7, [sp, #136]	; 0x88
 8020960:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 8020964:	fb01 2707 	mla	r7, r1, r7, r2
 8020968:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 802096c:	9307      	str	r3, [sp, #28]
 802096e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020970:	681b      	ldr	r3, [r3, #0]
 8020972:	9309      	str	r3, [sp, #36]	; 0x24
 8020974:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020976:	43db      	mvns	r3, r3
 8020978:	b2db      	uxtb	r3, r3
 802097a:	9308      	str	r3, [sp, #32]
 802097c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802097e:	2b00      	cmp	r3, #0
 8020980:	dc03      	bgt.n	802098a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8020982:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020984:	2b00      	cmp	r3, #0
 8020986:	f340 8205 	ble.w	8020d94 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 802098a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802098c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8020990:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8020994:	1e48      	subs	r0, r1, #1
 8020996:	f102 3cff 	add.w	ip, r2, #4294967295
 802099a:	2d00      	cmp	r5, #0
 802099c:	f340 80da 	ble.w	8020b54 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 80209a0:	ea5f 4e24 	movs.w	lr, r4, asr #16
 80209a4:	ea4f 4326 	mov.w	r3, r6, asr #16
 80209a8:	d406      	bmi.n	80209b8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80209aa:	4586      	cmp	lr, r0
 80209ac:	da04      	bge.n	80209b8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80209ae:	2b00      	cmp	r3, #0
 80209b0:	db02      	blt.n	80209b8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80209b2:	4563      	cmp	r3, ip
 80209b4:	f2c0 80cf 	blt.w	8020b56 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 80209b8:	f11e 0e01 	adds.w	lr, lr, #1
 80209bc:	f100 80c1 	bmi.w	8020b42 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 80209c0:	4571      	cmp	r1, lr
 80209c2:	f2c0 80be 	blt.w	8020b42 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 80209c6:	3301      	adds	r3, #1
 80209c8:	f100 80bb 	bmi.w	8020b42 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 80209cc:	429a      	cmp	r2, r3
 80209ce:	f2c0 80b8 	blt.w	8020b42 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 80209d2:	46a9      	mov	r9, r5
 80209d4:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80209d8:	f1b9 0f00 	cmp.w	r9, #0
 80209dc:	f340 80d8 	ble.w	8020b90 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 80209e0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80209e2:	1421      	asrs	r1, r4, #16
 80209e4:	ea4f 4026 	mov.w	r0, r6, asr #16
 80209e8:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80209ec:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 80209f0:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 80209f4:	f100 8112 	bmi.w	8020c1c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 80209f8:	f10e 3aff 	add.w	sl, lr, #4294967295
 80209fc:	4551      	cmp	r1, sl
 80209fe:	f280 810d 	bge.w	8020c1c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 8020a02:	2800      	cmp	r0, #0
 8020a04:	f2c0 810a 	blt.w	8020c1c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 8020a08:	f103 3aff 	add.w	sl, r3, #4294967295
 8020a0c:	4550      	cmp	r0, sl
 8020a0e:	f280 8105 	bge.w	8020c1c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 8020a12:	fa0f f38e 	sxth.w	r3, lr
 8020a16:	fb00 1103 	mla	r1, r0, r3, r1
 8020a1a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8020a1c:	eb00 0a41 	add.w	sl, r0, r1, lsl #1
 8020a20:	f830 e011 	ldrh.w	lr, [r0, r1, lsl #1]
 8020a24:	f8ba 1002 	ldrh.w	r1, [sl, #2]
 8020a28:	f1bc 0f00 	cmp.w	ip, #0
 8020a2c:	d007      	beq.n	8020a3e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfc>
 8020a2e:	005b      	lsls	r3, r3, #1
 8020a30:	eb0a 0003 	add.w	r0, sl, r3
 8020a34:	f83a 3003 	ldrh.w	r3, [sl, r3]
 8020a38:	930c      	str	r3, [sp, #48]	; 0x30
 8020a3a:	8843      	ldrh	r3, [r0, #2]
 8020a3c:	930d      	str	r3, [sp, #52]	; 0x34
 8020a3e:	ea4f 400e 	mov.w	r0, lr, lsl #16
 8020a42:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8020a46:	fb12 f30c 	smulbb	r3, r2, ip
 8020a4a:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8020a4e:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8020a52:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8020a56:	10db      	asrs	r3, r3, #3
 8020a58:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8020a5c:	ea40 000e 	orr.w	r0, r0, lr
 8020a60:	f1cc 0e10 	rsb	lr, ip, #16
 8020a64:	ea4a 0101 	orr.w	r1, sl, r1
 8020a68:	9f08      	ldr	r7, [sp, #32]
 8020a6a:	ebae 0e02 	sub.w	lr, lr, r2
 8020a6e:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8020a72:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 8020a76:	4351      	muls	r1, r2
 8020a78:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8020a7a:	fb0e 1e00 	mla	lr, lr, r0, r1
 8020a7e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8020a80:	0410      	lsls	r0, r2, #16
 8020a82:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8020a86:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8020a8a:	4310      	orrs	r0, r2
 8020a8c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020a8e:	0412      	lsls	r2, r2, #16
 8020a90:	fb03 e000 	mla	r0, r3, r0, lr
 8020a94:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 8020a98:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8020a9c:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8020aa0:	ea42 020e 	orr.w	r2, r2, lr
 8020aa4:	fb03 0302 	mla	r3, r3, r2, r0
 8020aa8:	f8b8 0000 	ldrh.w	r0, [r8]
 8020aac:	0d5a      	lsrs	r2, r3, #21
 8020aae:	095b      	lsrs	r3, r3, #5
 8020ab0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8020ab4:	1201      	asrs	r1, r0, #8
 8020ab6:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8020aba:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 8020abe:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8020ac2:	00c0      	lsls	r0, r0, #3
 8020ac4:	4313      	orrs	r3, r2
 8020ac6:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8020aca:	fb11 f107 	smulbb	r1, r1, r7
 8020ace:	b2c0      	uxtb	r0, r0
 8020ad0:	b29b      	uxth	r3, r3
 8020ad2:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8020ad6:	fb10 f007 	smulbb	r0, r0, r7
 8020ada:	fb1e fe07 	smulbb	lr, lr, r7
 8020ade:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8020ae2:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8020ae6:	fb0c 1c02 	mla	ip, ip, r2, r1
 8020aea:	10d9      	asrs	r1, r3, #3
 8020aec:	00db      	lsls	r3, r3, #3
 8020aee:	fa1f fc8c 	uxth.w	ip, ip
 8020af2:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8020af6:	b2db      	uxtb	r3, r3
 8020af8:	fb01 e102 	mla	r1, r1, r2, lr
 8020afc:	fb03 0302 	mla	r3, r3, r2, r0
 8020b00:	b289      	uxth	r1, r1
 8020b02:	b29a      	uxth	r2, r3
 8020b04:	f10c 0301 	add.w	r3, ip, #1
 8020b08:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8020b0c:	1c53      	adds	r3, r2, #1
 8020b0e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8020b12:	1c4a      	adds	r2, r1, #1
 8020b14:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8020b18:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8020b1c:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8020b20:	0949      	lsrs	r1, r1, #5
 8020b22:	ea43 030c 	orr.w	r3, r3, ip
 8020b26:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8020b2a:	430b      	orrs	r3, r1
 8020b2c:	f8a8 3000 	strh.w	r3, [r8]
 8020b30:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8020b32:	f108 0802 	add.w	r8, r8, #2
 8020b36:	f109 39ff 	add.w	r9, r9, #4294967295
 8020b3a:	441c      	add	r4, r3
 8020b3c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020b3e:	441e      	add	r6, r3
 8020b40:	e74a      	b.n	80209d8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8020b42:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8020b44:	3d01      	subs	r5, #1
 8020b46:	441c      	add	r4, r3
 8020b48:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020b4a:	441e      	add	r6, r3
 8020b4c:	9b07      	ldr	r3, [sp, #28]
 8020b4e:	3302      	adds	r3, #2
 8020b50:	9307      	str	r3, [sp, #28]
 8020b52:	e722      	b.n	802099a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8020b54:	d022      	beq.n	8020b9c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 8020b56:	1e6b      	subs	r3, r5, #1
 8020b58:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8020b5a:	fb00 4003 	mla	r0, r0, r3, r4
 8020b5e:	1400      	asrs	r0, r0, #16
 8020b60:	f53f af37 	bmi.w	80209d2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8020b64:	3901      	subs	r1, #1
 8020b66:	4288      	cmp	r0, r1
 8020b68:	f6bf af33 	bge.w	80209d2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8020b6c:	9920      	ldr	r1, [sp, #128]	; 0x80
 8020b6e:	fb01 6303 	mla	r3, r1, r3, r6
 8020b72:	141b      	asrs	r3, r3, #16
 8020b74:	f53f af2d 	bmi.w	80209d2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8020b78:	3a01      	subs	r2, #1
 8020b7a:	4293      	cmp	r3, r2
 8020b7c:	f6bf af29 	bge.w	80209d2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8020b80:	46a8      	mov	r8, r5
 8020b82:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8020b86:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
 8020b8a:	f1b8 0f00 	cmp.w	r8, #0
 8020b8e:	dc60      	bgt.n	8020c52 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x310>
 8020b90:	9b07      	ldr	r3, [sp, #28]
 8020b92:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8020b96:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8020b9a:	9307      	str	r3, [sp, #28]
 8020b9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020b9e:	2b00      	cmp	r3, #0
 8020ba0:	f340 80f8 	ble.w	8020d94 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8020ba4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8020ba8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8020baa:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020bae:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020bb2:	eef0 6a62 	vmov.f32	s13, s5
 8020bb6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8020bba:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020bbe:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020bc2:	ee16 4a90 	vmov	r4, s13
 8020bc6:	eef0 6a43 	vmov.f32	s13, s6
 8020bca:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020bce:	ee16 6a90 	vmov	r6, s13
 8020bd2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020bd6:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020bda:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020bde:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020be2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020be6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020bea:	ee12 2a90 	vmov	r2, s5
 8020bee:	eef0 2a47 	vmov.f32	s5, s14
 8020bf2:	fb92 f3f3 	sdiv	r3, r2, r3
 8020bf6:	ee13 2a10 	vmov	r2, s6
 8020bfa:	931f      	str	r3, [sp, #124]	; 0x7c
 8020bfc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8020bfe:	eeb0 3a67 	vmov.f32	s6, s15
 8020c02:	fb92 f3f3 	sdiv	r3, r2, r3
 8020c06:	9320      	str	r3, [sp, #128]	; 0x80
 8020c08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020c0a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8020c0c:	3b01      	subs	r3, #1
 8020c0e:	930a      	str	r3, [sp, #40]	; 0x28
 8020c10:	bf08      	it	eq
 8020c12:	4615      	moveq	r5, r2
 8020c14:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8020c16:	bf18      	it	ne
 8020c18:	461d      	movne	r5, r3
 8020c1a:	e6af      	b.n	802097c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8020c1c:	f111 0a01 	adds.w	sl, r1, #1
 8020c20:	d486      	bmi.n	8020b30 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8020c22:	45d6      	cmp	lr, sl
 8020c24:	db84      	blt.n	8020b30 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8020c26:	f110 0a01 	adds.w	sl, r0, #1
 8020c2a:	d481      	bmi.n	8020b30 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8020c2c:	4553      	cmp	r3, sl
 8020c2e:	f6ff af7f 	blt.w	8020b30 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8020c32:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8020c34:	b21b      	sxth	r3, r3
 8020c36:	9101      	str	r1, [sp, #4]
 8020c38:	4641      	mov	r1, r8
 8020c3a:	9300      	str	r3, [sp, #0]
 8020c3c:	fa0f f38e 	sxth.w	r3, lr
 8020c40:	e9cd 0202 	strd	r0, r2, [sp, #8]
 8020c44:	e9cd c704 	strd	ip, r7, [sp, #16]
 8020c48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020c4a:	9811      	ldr	r0, [sp, #68]	; 0x44
 8020c4c:	f7ff fdb2 	bl	80207b4 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>
 8020c50:	e76e      	b.n	8020b30 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8020c52:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020c54:	1430      	asrs	r0, r6, #16
 8020c56:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8020c58:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8020c5c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8020c60:	1423      	asrs	r3, r4, #16
 8020c62:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8020c66:	fb01 3000 	mla	r0, r1, r0, r3
 8020c6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020c6c:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8020c70:	f837 c010 	ldrh.w	ip, [r7, r0, lsl #1]
 8020c74:	8858      	ldrh	r0, [r3, #2]
 8020c76:	f1be 0f00 	cmp.w	lr, #0
 8020c7a:	d00b      	beq.n	8020c94 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 8020c7c:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8020c80:	3901      	subs	r1, #1
 8020c82:	0049      	lsls	r1, r1, #1
 8020c84:	3102      	adds	r1, #2
 8020c86:	eb03 0b01 	add.w	fp, r3, r1
 8020c8a:	5a5b      	ldrh	r3, [r3, r1]
 8020c8c:	930e      	str	r3, [sp, #56]	; 0x38
 8020c8e:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8020c92:	930f      	str	r3, [sp, #60]	; 0x3c
 8020c94:	ea4f 410c 	mov.w	r1, ip, lsl #16
 8020c98:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8020c9c:	fb12 f30e 	smulbb	r3, r2, lr
 8020ca0:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8020ca4:	f001 61fc 	and.w	r1, r1, #132120576	; 0x7e00000
 8020ca8:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8020cac:	10db      	asrs	r3, r3, #3
 8020cae:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8020cb2:	ea41 010c 	orr.w	r1, r1, ip
 8020cb6:	f1ce 0c10 	rsb	ip, lr, #16
 8020cba:	ea4b 0000 	orr.w	r0, fp, r0
 8020cbe:	9f08      	ldr	r7, [sp, #32]
 8020cc0:	ebac 0c02 	sub.w	ip, ip, r2
 8020cc4:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8020cc8:	f108 38ff 	add.w	r8, r8, #4294967295
 8020ccc:	4350      	muls	r0, r2
 8020cce:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 8020cd2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020cd4:	fb0c 0c01 	mla	ip, ip, r1, r0
 8020cd8:	980e      	ldr	r0, [sp, #56]	; 0x38
 8020cda:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8020cde:	f422 61fc 	bic.w	r1, r2, #2016	; 0x7e0
 8020ce2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8020ce4:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8020ce8:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8020cec:	0412      	lsls	r2, r2, #16
 8020cee:	ea4b 0101 	orr.w	r1, fp, r1
 8020cf2:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8020cf6:	fb03 c101 	mla	r1, r3, r1, ip
 8020cfa:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 8020cfe:	4302      	orrs	r2, r0
 8020d00:	fb03 1202 	mla	r2, r3, r2, r1
 8020d04:	ea4f 5b52 	mov.w	fp, r2, lsr #21
 8020d08:	0952      	lsrs	r2, r2, #5
 8020d0a:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8020d0e:	f422 63fc 	bic.w	r3, r2, #2016	; 0x7e0
 8020d12:	f8b9 2000 	ldrh.w	r2, [r9]
 8020d16:	ea4b 0303 	orr.w	r3, fp, r3
 8020d1a:	1211      	asrs	r1, r2, #8
 8020d1c:	ea4f 0ce2 	mov.w	ip, r2, asr #3
 8020d20:	b29b      	uxth	r3, r3
 8020d22:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8020d26:	00d2      	lsls	r2, r2, #3
 8020d28:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8020d2c:	fb11 f107 	smulbb	r1, r1, r7
 8020d30:	1218      	asrs	r0, r3, #8
 8020d32:	fb1c fc07 	smulbb	ip, ip, r7
 8020d36:	b2d2      	uxtb	r2, r2
 8020d38:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8020d3c:	fb12 f207 	smulbb	r2, r2, r7
 8020d40:	fb00 100a 	mla	r0, r0, sl, r1
 8020d44:	10d9      	asrs	r1, r3, #3
 8020d46:	00db      	lsls	r3, r3, #3
 8020d48:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8020d4c:	b280      	uxth	r0, r0
 8020d4e:	b2db      	uxtb	r3, r3
 8020d50:	fb01 c10a 	mla	r1, r1, sl, ip
 8020d54:	fb03 230a 	mla	r3, r3, sl, r2
 8020d58:	1c42      	adds	r2, r0, #1
 8020d5a:	b289      	uxth	r1, r1
 8020d5c:	b29b      	uxth	r3, r3
 8020d5e:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8020d62:	f101 0c01 	add.w	ip, r1, #1
 8020d66:	1c5a      	adds	r2, r3, #1
 8020d68:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8020d6c:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8020d70:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8020d74:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8020d76:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8020d7a:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8020d7e:	441c      	add	r4, r3
 8020d80:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8020d84:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020d86:	4310      	orrs	r0, r2
 8020d88:	441e      	add	r6, r3
 8020d8a:	ea40 000c 	orr.w	r0, r0, ip
 8020d8e:	f829 0b02 	strh.w	r0, [r9], #2
 8020d92:	e6fa      	b.n	8020b8a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8020d94:	b013      	add	sp, #76	; 0x4c
 8020d96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020d9a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>:
 8020d9a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8020d9e:	e9dd 4e08 	ldrd	r4, lr, [sp, #32]
 8020da2:	f9bd 901c 	ldrsh.w	r9, [sp, #28]
 8020da6:	fb0e 4703 	mla	r7, lr, r3, r4
 8020daa:	f1be 0f00 	cmp.w	lr, #0
 8020dae:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
 8020db2:	f89d 602c 	ldrb.w	r6, [sp, #44]	; 0x2c
 8020db6:	eb02 0847 	add.w	r8, r2, r7, lsl #1
 8020dba:	8808      	ldrh	r0, [r1, #0]
 8020dbc:	db60      	blt.n	8020e80 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
 8020dbe:	45f1      	cmp	r9, lr
 8020dc0:	dd5e      	ble.n	8020e80 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
 8020dc2:	2c00      	cmp	r4, #0
 8020dc4:	db5a      	blt.n	8020e7c <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
 8020dc6:	42a3      	cmp	r3, r4
 8020dc8:	dd58      	ble.n	8020e7c <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
 8020dca:	f832 c017 	ldrh.w	ip, [r2, r7, lsl #1]
 8020dce:	1c62      	adds	r2, r4, #1
 8020dd0:	d459      	bmi.n	8020e86 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 8020dd2:	4293      	cmp	r3, r2
 8020dd4:	dd57      	ble.n	8020e86 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 8020dd6:	2d00      	cmp	r5, #0
 8020dd8:	d055      	beq.n	8020e86 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 8020dda:	f8b8 7002 	ldrh.w	r7, [r8, #2]
 8020dde:	f11e 0e01 	adds.w	lr, lr, #1
 8020de2:	d454      	bmi.n	8020e8e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 8020de4:	45f1      	cmp	r9, lr
 8020de6:	dd52      	ble.n	8020e8e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 8020de8:	2e00      	cmp	r6, #0
 8020dea:	d050      	beq.n	8020e8e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 8020dec:	2c00      	cmp	r4, #0
 8020dee:	db4c      	blt.n	8020e8a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
 8020df0:	42a3      	cmp	r3, r4
 8020df2:	dd4a      	ble.n	8020e8a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
 8020df4:	f838 2013 	ldrh.w	r2, [r8, r3, lsl #1]
 8020df8:	3401      	adds	r4, #1
 8020dfa:	d405      	bmi.n	8020e08 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8020dfc:	42a3      	cmp	r3, r4
 8020dfe:	dd03      	ble.n	8020e08 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8020e00:	b115      	cbz	r5, 8020e08 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8020e02:	3301      	adds	r3, #1
 8020e04:	f838 0013 	ldrh.w	r0, [r8, r3, lsl #1]
 8020e08:	fb15 f406 	smulbb	r4, r5, r6
 8020e0c:	ea4f 430c 	mov.w	r3, ip, lsl #16
 8020e10:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 8020e14:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8020e18:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8020e1c:	f3c4 04c7 	ubfx	r4, r4, #3, #8
 8020e20:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8020e24:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8020e28:	ea43 0c0c 	orr.w	ip, r3, ip
 8020e2c:	f1c6 0310 	rsb	r3, r6, #16
 8020e30:	ea4e 0707 	orr.w	r7, lr, r7
 8020e34:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
 8020e38:	1b5b      	subs	r3, r3, r5
 8020e3a:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
 8020e3e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8020e42:	437d      	muls	r5, r7
 8020e44:	fb03 5c0c 	mla	ip, r3, ip, r5
 8020e48:	0403      	lsls	r3, r0, #16
 8020e4a:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8020e4e:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8020e52:	4318      	orrs	r0, r3
 8020e54:	0413      	lsls	r3, r2, #16
 8020e56:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8020e5a:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8020e5e:	fb04 c000 	mla	r0, r4, r0, ip
 8020e62:	4313      	orrs	r3, r2
 8020e64:	fb06 0003 	mla	r0, r6, r3, r0
 8020e68:	0d43      	lsrs	r3, r0, #21
 8020e6a:	0940      	lsrs	r0, r0, #5
 8020e6c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8020e70:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8020e74:	4318      	orrs	r0, r3
 8020e76:	8008      	strh	r0, [r1, #0]
 8020e78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8020e7c:	4684      	mov	ip, r0
 8020e7e:	e7a6      	b.n	8020dce <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x34>
 8020e80:	4607      	mov	r7, r0
 8020e82:	4684      	mov	ip, r0
 8020e84:	e7ab      	b.n	8020dde <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
 8020e86:	4607      	mov	r7, r0
 8020e88:	e7a9      	b.n	8020dde <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
 8020e8a:	4602      	mov	r2, r0
 8020e8c:	e7b4      	b.n	8020df8 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x5e>
 8020e8e:	4602      	mov	r2, r0
 8020e90:	e7ba      	b.n	8020e08 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>

08020e92 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020e92:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020e96:	b08f      	sub	sp, #60	; 0x3c
 8020e98:	461d      	mov	r5, r3
 8020e9a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8020e9c:	9107      	str	r1, [sp, #28]
 8020e9e:	920c      	str	r2, [sp, #48]	; 0x30
 8020ea0:	6859      	ldr	r1, [r3, #4]
 8020ea2:	681b      	ldr	r3, [r3, #0]
 8020ea4:	900d      	str	r0, [sp, #52]	; 0x34
 8020ea6:	e9dd 271e 	ldrd	r2, r7, [sp, #120]	; 0x78
 8020eaa:	e9dd 4619 	ldrd	r4, r6, [sp, #100]	; 0x64
 8020eae:	fb01 2707 	mla	r7, r1, r7, r2
 8020eb2:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 8020eb6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020eb8:	f8d3 8000 	ldr.w	r8, [r3]
 8020ebc:	9b07      	ldr	r3, [sp, #28]
 8020ebe:	2b00      	cmp	r3, #0
 8020ec0:	dc03      	bgt.n	8020eca <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8020ec2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020ec4:	2b00      	cmp	r3, #0
 8020ec6:	f340 8182 	ble.w	80211ce <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33c>
 8020eca:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020ecc:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8020ed0:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8020ed4:	1e48      	subs	r0, r1, #1
 8020ed6:	f102 3cff 	add.w	ip, r2, #4294967295
 8020eda:	2d00      	cmp	r5, #0
 8020edc:	f340 809b 	ble.w	8021016 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x184>
 8020ee0:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8020ee4:	ea4f 4326 	mov.w	r3, r6, asr #16
 8020ee8:	d406      	bmi.n	8020ef8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8020eea:	4586      	cmp	lr, r0
 8020eec:	da04      	bge.n	8020ef8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8020eee:	2b00      	cmp	r3, #0
 8020ef0:	db02      	blt.n	8020ef8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8020ef2:	4563      	cmp	r3, ip
 8020ef4:	f2c0 8090 	blt.w	8021018 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8020ef8:	f11e 0e01 	adds.w	lr, lr, #1
 8020efc:	f100 8084 	bmi.w	8021008 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8020f00:	4571      	cmp	r1, lr
 8020f02:	f2c0 8081 	blt.w	8021008 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8020f06:	3301      	adds	r3, #1
 8020f08:	d47e      	bmi.n	8021008 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8020f0a:	429a      	cmp	r2, r3
 8020f0c:	db7c      	blt.n	8021008 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8020f0e:	46aa      	mov	sl, r5
 8020f10:	46b9      	mov	r9, r7
 8020f12:	f1ba 0f00 	cmp.w	sl, #0
 8020f16:	f340 8099 	ble.w	802104c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8020f1a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020f1c:	1421      	asrs	r1, r4, #16
 8020f1e:	ea4f 4026 	mov.w	r0, r6, asr #16
 8020f22:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8020f26:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8020f2a:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8020f2e:	f100 80d1 	bmi.w	80210d4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8020f32:	f10e 3bff 	add.w	fp, lr, #4294967295
 8020f36:	4559      	cmp	r1, fp
 8020f38:	f280 80cc 	bge.w	80210d4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8020f3c:	2800      	cmp	r0, #0
 8020f3e:	f2c0 80c9 	blt.w	80210d4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8020f42:	f103 3bff 	add.w	fp, r3, #4294967295
 8020f46:	4558      	cmp	r0, fp
 8020f48:	f280 80c4 	bge.w	80210d4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8020f4c:	fa0f fe8e 	sxth.w	lr, lr
 8020f50:	fb00 110e 	mla	r1, r0, lr, r1
 8020f54:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 8020f58:	f838 b011 	ldrh.w	fp, [r8, r1, lsl #1]
 8020f5c:	8841      	ldrh	r1, [r0, #2]
 8020f5e:	f1bc 0f00 	cmp.w	ip, #0
 8020f62:	d00b      	beq.n	8020f7c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xea>
 8020f64:	f10e 4300 	add.w	r3, lr, #2147483648	; 0x80000000
 8020f68:	3b01      	subs	r3, #1
 8020f6a:	005b      	lsls	r3, r3, #1
 8020f6c:	3302      	adds	r3, #2
 8020f6e:	eb00 0e03 	add.w	lr, r0, r3
 8020f72:	5ac3      	ldrh	r3, [r0, r3]
 8020f74:	9308      	str	r3, [sp, #32]
 8020f76:	f8be 3002 	ldrh.w	r3, [lr, #2]
 8020f7a:	9309      	str	r3, [sp, #36]	; 0x24
 8020f7c:	ea4f 400b 	mov.w	r0, fp, lsl #16
 8020f80:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 8020f84:	fb12 f30c 	smulbb	r3, r2, ip
 8020f88:	f1cc 0e10 	rsb	lr, ip, #16
 8020f8c:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8020f90:	10db      	asrs	r3, r3, #3
 8020f92:	ebae 0e02 	sub.w	lr, lr, r2
 8020f96:	ea40 000b 	orr.w	r0, r0, fp
 8020f9a:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8020f9e:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8020fa2:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8020fa6:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8020faa:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 8020fae:	ea4b 0101 	orr.w	r1, fp, r1
 8020fb2:	4351      	muls	r1, r2
 8020fb4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020fb6:	fb0e 1e00 	mla	lr, lr, r0, r1
 8020fba:	0410      	lsls	r0, r2, #16
 8020fbc:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8020fc0:	9908      	ldr	r1, [sp, #32]
 8020fc2:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8020fc6:	4310      	orrs	r0, r2
 8020fc8:	9a08      	ldr	r2, [sp, #32]
 8020fca:	0412      	lsls	r2, r2, #16
 8020fcc:	fb03 e000 	mla	r0, r3, r0, lr
 8020fd0:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 8020fd4:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8020fd8:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8020fdc:	ea42 020e 	orr.w	r2, r2, lr
 8020fe0:	fb03 0302 	mla	r3, r3, r2, r0
 8020fe4:	0d5a      	lsrs	r2, r3, #21
 8020fe6:	095b      	lsrs	r3, r3, #5
 8020fe8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8020fec:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8020ff0:	4313      	orrs	r3, r2
 8020ff2:	f8a9 3000 	strh.w	r3, [r9]
 8020ff6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8020ff8:	f109 0902 	add.w	r9, r9, #2
 8020ffc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8021000:	441c      	add	r4, r3
 8021002:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8021004:	441e      	add	r6, r3
 8021006:	e784      	b.n	8020f12 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8021008:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 802100a:	3d01      	subs	r5, #1
 802100c:	3702      	adds	r7, #2
 802100e:	441c      	add	r4, r3
 8021010:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8021012:	441e      	add	r6, r3
 8021014:	e761      	b.n	8020eda <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8021016:	d01d      	beq.n	8021054 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8021018:	1e6b      	subs	r3, r5, #1
 802101a:	981b      	ldr	r0, [sp, #108]	; 0x6c
 802101c:	fb00 4003 	mla	r0, r0, r3, r4
 8021020:	1400      	asrs	r0, r0, #16
 8021022:	f53f af74 	bmi.w	8020f0e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8021026:	3901      	subs	r1, #1
 8021028:	4288      	cmp	r0, r1
 802102a:	f6bf af70 	bge.w	8020f0e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802102e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8021030:	fb01 6303 	mla	r3, r1, r3, r6
 8021034:	141b      	asrs	r3, r3, #16
 8021036:	f53f af6a 	bmi.w	8020f0e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802103a:	3a01      	subs	r2, #1
 802103c:	4293      	cmp	r3, r2
 802103e:	f6bf af66 	bge.w	8020f0e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8021042:	46a9      	mov	r9, r5
 8021044:	46ba      	mov	sl, r7
 8021046:	f1b9 0f00 	cmp.w	r9, #0
 802104a:	dc5b      	bgt.n	8021104 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 802104c:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8021050:	eb07 0745 	add.w	r7, r7, r5, lsl #1
 8021054:	9b07      	ldr	r3, [sp, #28]
 8021056:	2b00      	cmp	r3, #0
 8021058:	f340 80b9 	ble.w	80211ce <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33c>
 802105c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8021060:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8021062:	ee30 0a04 	vadd.f32	s0, s0, s8
 8021066:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802106a:	eef0 6a62 	vmov.f32	s13, s5
 802106e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8021072:	ee31 1a05 	vadd.f32	s2, s2, s10
 8021076:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802107a:	ee16 4a90 	vmov	r4, s13
 802107e:	eef0 6a43 	vmov.f32	s13, s6
 8021082:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021086:	ee16 6a90 	vmov	r6, s13
 802108a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802108e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8021092:	ee77 2a62 	vsub.f32	s5, s14, s5
 8021096:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802109a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802109e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80210a2:	ee12 2a90 	vmov	r2, s5
 80210a6:	eef0 2a47 	vmov.f32	s5, s14
 80210aa:	fb92 f3f3 	sdiv	r3, r2, r3
 80210ae:	ee13 2a10 	vmov	r2, s6
 80210b2:	931b      	str	r3, [sp, #108]	; 0x6c
 80210b4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80210b6:	eeb0 3a67 	vmov.f32	s6, s15
 80210ba:	fb92 f3f3 	sdiv	r3, r2, r3
 80210be:	931c      	str	r3, [sp, #112]	; 0x70
 80210c0:	9b07      	ldr	r3, [sp, #28]
 80210c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80210c4:	3b01      	subs	r3, #1
 80210c6:	9307      	str	r3, [sp, #28]
 80210c8:	bf08      	it	eq
 80210ca:	4615      	moveq	r5, r2
 80210cc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80210ce:	bf18      	it	ne
 80210d0:	461d      	movne	r5, r3
 80210d2:	e6f3      	b.n	8020ebc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 80210d4:	f111 0b01 	adds.w	fp, r1, #1
 80210d8:	d48d      	bmi.n	8020ff6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80210da:	45de      	cmp	lr, fp
 80210dc:	db8b      	blt.n	8020ff6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80210de:	f110 0b01 	adds.w	fp, r0, #1
 80210e2:	d488      	bmi.n	8020ff6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80210e4:	455b      	cmp	r3, fp
 80210e6:	db86      	blt.n	8020ff6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80210e8:	b21b      	sxth	r3, r3
 80210ea:	e9cd 1001 	strd	r1, r0, [sp, #4]
 80210ee:	e9cd 2c03 	strd	r2, ip, [sp, #12]
 80210f2:	9300      	str	r3, [sp, #0]
 80210f4:	4642      	mov	r2, r8
 80210f6:	fa0f f38e 	sxth.w	r3, lr
 80210fa:	4649      	mov	r1, r9
 80210fc:	980d      	ldr	r0, [sp, #52]	; 0x34
 80210fe:	f7ff fe4c 	bl	8020d9a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>
 8021102:	e778      	b.n	8020ff6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8021104:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8021106:	1420      	asrs	r0, r4, #16
 8021108:	1431      	asrs	r1, r6, #16
 802110a:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 802110e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8021112:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8021116:	fb03 0101 	mla	r1, r3, r1, r0
 802111a:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 802111e:	f838 c011 	ldrh.w	ip, [r8, r1, lsl #1]
 8021122:	8841      	ldrh	r1, [r0, #2]
 8021124:	f1be 0f00 	cmp.w	lr, #0
 8021128:	d00b      	beq.n	8021142 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 802112a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 802112e:	3b01      	subs	r3, #1
 8021130:	005b      	lsls	r3, r3, #1
 8021132:	3302      	adds	r3, #2
 8021134:	eb00 0b03 	add.w	fp, r0, r3
 8021138:	5ac3      	ldrh	r3, [r0, r3]
 802113a:	930a      	str	r3, [sp, #40]	; 0x28
 802113c:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8021140:	930b      	str	r3, [sp, #44]	; 0x2c
 8021142:	ea4f 400c 	mov.w	r0, ip, lsl #16
 8021146:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 802114a:	fb12 f30e 	smulbb	r3, r2, lr
 802114e:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8021152:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8021156:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 802115a:	10db      	asrs	r3, r3, #3
 802115c:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8021160:	ea40 000c 	orr.w	r0, r0, ip
 8021164:	f1ce 0c10 	rsb	ip, lr, #16
 8021168:	ea4b 0101 	orr.w	r1, fp, r1
 802116c:	f109 39ff 	add.w	r9, r9, #4294967295
 8021170:	ebac 0c02 	sub.w	ip, ip, r2
 8021174:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8021178:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 802117c:	4351      	muls	r1, r2
 802117e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8021180:	fb0c 1c00 	mla	ip, ip, r0, r1
 8021184:	990a      	ldr	r1, [sp, #40]	; 0x28
 8021186:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 802118a:	f422 60fc 	bic.w	r0, r2, #2016	; 0x7e0
 802118e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021190:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8021194:	0412      	lsls	r2, r2, #16
 8021196:	ea4b 0000 	orr.w	r0, fp, r0
 802119a:	f421 6bfc 	bic.w	fp, r1, #2016	; 0x7e0
 802119e:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 80211a2:	fb03 c000 	mla	r0, r3, r0, ip
 80211a6:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 80211aa:	ea42 0b0b 	orr.w	fp, r2, fp
 80211ae:	fb03 000b 	mla	r0, r3, fp, r0
 80211b2:	0d43      	lsrs	r3, r0, #21
 80211b4:	0940      	lsrs	r0, r0, #5
 80211b6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80211ba:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80211be:	4318      	orrs	r0, r3
 80211c0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80211c2:	441c      	add	r4, r3
 80211c4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80211c6:	f82a 0b02 	strh.w	r0, [sl], #2
 80211ca:	441e      	add	r6, r3
 80211cc:	e73b      	b.n	8021046 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 80211ce:	b00f      	add	sp, #60	; 0x3c
 80211d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080211d4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>:
 80211d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80211d8:	b085      	sub	sp, #20
 80211da:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	; 0x3c
 80211de:	9102      	str	r1, [sp, #8]
 80211e0:	2c00      	cmp	r4, #0
 80211e2:	fb04 7103 	mla	r1, r4, r3, r7
 80211e6:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
 80211ea:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 80211ee:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
 80211f2:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 80211f6:	f2c0 811b 	blt.w	8021430 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
 80211fa:	45a6      	cmp	lr, r4
 80211fc:	f340 8118 	ble.w	8021430 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
 8021200:	2f00      	cmp	r7, #0
 8021202:	f2c0 8113 	blt.w	802142c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
 8021206:	42bb      	cmp	r3, r7
 8021208:	f340 8110 	ble.w	802142c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
 802120c:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 8021210:	1c7a      	adds	r2, r7, #1
 8021212:	f100 8110 	bmi.w	8021436 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
 8021216:	4293      	cmp	r3, r2
 8021218:	f340 810d 	ble.w	8021436 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
 802121c:	2e00      	cmp	r6, #0
 802121e:	f000 810c 	beq.w	802143a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x266>
 8021222:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8021226:	3401      	adds	r4, #1
 8021228:	f100 810b 	bmi.w	8021442 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
 802122c:	45a6      	cmp	lr, r4
 802122e:	f340 8108 	ble.w	8021442 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
 8021232:	2800      	cmp	r0, #0
 8021234:	f000 8108 	beq.w	8021448 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x274>
 8021238:	2f00      	cmp	r7, #0
 802123a:	f2c0 8100 	blt.w	802143e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
 802123e:	42bb      	cmp	r3, r7
 8021240:	f340 80fd 	ble.w	802143e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
 8021244:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8021248:	3701      	adds	r7, #1
 802124a:	f100 8100 	bmi.w	802144e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
 802124e:	42bb      	cmp	r3, r7
 8021250:	f340 80fd 	ble.w	802144e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
 8021254:	2e00      	cmp	r6, #0
 8021256:	f000 80fc 	beq.w	8021452 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27e>
 802125a:	3301      	adds	r3, #1
 802125c:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8021260:	b2b6      	uxth	r6, r6
 8021262:	b280      	uxth	r0, r0
 8021264:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 8021268:	fb00 fe06 	mul.w	lr, r0, r6
 802126c:	0136      	lsls	r6, r6, #4
 802126e:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 8021272:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 8021276:	eba6 070e 	sub.w	r7, r6, lr
 802127a:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 802127e:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8021282:	b280      	uxth	r0, r0
 8021284:	b2bf      	uxth	r7, r7
 8021286:	1a1b      	subs	r3, r3, r0
 8021288:	ea4f 6812 	mov.w	r8, r2, lsr #24
 802128c:	fb0a f607 	mul.w	r6, sl, r7
 8021290:	b29b      	uxth	r3, r3
 8021292:	fb0b 6603 	mla	r6, fp, r3, r6
 8021296:	fb00 6609 	mla	r6, r0, r9, r6
 802129a:	fb0e 6608 	mla	r6, lr, r8, r6
 802129e:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80212a2:	9600      	str	r6, [sp, #0]
 80212a4:	2e00      	cmp	r6, #0
 80212a6:	f000 80be 	beq.w	8021426 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x252>
 80212aa:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80212ae:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80212b2:	9e02      	ldr	r6, [sp, #8]
 80212b4:	fb0b fc0c 	mul.w	ip, fp, ip
 80212b8:	fb0b f505 	mul.w	r5, fp, r5
 80212bc:	8836      	ldrh	r6, [r6, #0]
 80212be:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 80212c2:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80212c6:	9501      	str	r5, [sp, #4]
 80212c8:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 80212cc:	44dc      	add	ip, fp
 80212ce:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80212d2:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 80212d6:	9503      	str	r5, [sp, #12]
 80212d8:	9d01      	ldr	r5, [sp, #4]
 80212da:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 80212de:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 80212e2:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 80212e6:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 80212ea:	fb0a fc0c 	mul.w	ip, sl, ip
 80212ee:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 80212f2:	fb0a fa01 	mul.w	sl, sl, r1
 80212f6:	ea4f 251c 	mov.w	r5, ip, lsr #8
 80212fa:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80212fe:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 8021302:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8021306:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 802130a:	4465      	add	r5, ip
 802130c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8021310:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8021314:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021318:	fb09 fc0c 	mul.w	ip, r9, ip
 802131c:	0a2d      	lsrs	r5, r5, #8
 802131e:	fb09 f904 	mul.w	r9, r9, r4
 8021322:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021326:	ea4f 211c 	mov.w	r1, ip, lsr #8
 802132a:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802132e:	f509 7480 	add.w	r4, r9, #256	; 0x100
 8021332:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8021336:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 802133a:	437d      	muls	r5, r7
 802133c:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8021340:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 8021344:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8021348:	4461      	add	r1, ip
 802134a:	fb08 f404 	mul.w	r4, r8, r4
 802134e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8021352:	fb08 f802 	mul.w	r8, r8, r2
 8021356:	0a09      	lsrs	r1, r1, #8
 8021358:	0a22      	lsrs	r2, r4, #8
 802135a:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 802135e:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8021362:	fb07 f70a 	mul.w	r7, r7, sl
 8021366:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802136a:	4414      	add	r4, r2
 802136c:	f508 7280 	add.w	r2, r8, #256	; 0x100
 8021370:	0a24      	lsrs	r4, r4, #8
 8021372:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8021376:	9a03      	ldr	r2, [sp, #12]
 8021378:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 802137c:	fb02 5503 	mla	r5, r2, r3, r5
 8021380:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8021384:	9a00      	ldr	r2, [sp, #0]
 8021386:	fb04 540e 	mla	r4, r4, lr, r5
 802138a:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 802138e:	1235      	asrs	r5, r6, #8
 8021390:	fb01 4100 	mla	r1, r1, r0, r4
 8021394:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8021398:	0a09      	lsrs	r1, r1, #8
 802139a:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 802139e:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 80213a2:	fb03 7101 	mla	r1, r3, r1, r7
 80213a6:	fb0e 1e08 	mla	lr, lr, r8, r1
 80213aa:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 80213ae:	fb00 e101 	mla	r1, r0, r1, lr
 80213b2:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 80213b6:	b287      	uxth	r7, r0
 80213b8:	0a09      	lsrs	r1, r1, #8
 80213ba:	437a      	muls	r2, r7
 80213bc:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 80213c0:	1c53      	adds	r3, r2, #1
 80213c2:	4321      	orrs	r1, r4
 80213c4:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80213c8:	0c0a      	lsrs	r2, r1, #16
 80213ca:	f3c1 2407 	ubfx	r4, r1, #8, #8
 80213ce:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 80213d2:	b2c8      	uxtb	r0, r1
 80213d4:	fb12 f207 	smulbb	r2, r2, r7
 80213d8:	fb14 f407 	smulbb	r4, r4, r7
 80213dc:	b2db      	uxtb	r3, r3
 80213de:	fb10 f007 	smulbb	r0, r0, r7
 80213e2:	fb05 2503 	mla	r5, r5, r3, r2
 80213e6:	10f2      	asrs	r2, r6, #3
 80213e8:	00f6      	lsls	r6, r6, #3
 80213ea:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80213ee:	b2ad      	uxth	r5, r5
 80213f0:	b2f6      	uxtb	r6, r6
 80213f2:	fb02 4203 	mla	r2, r2, r3, r4
 80213f6:	fb06 0303 	mla	r3, r6, r3, r0
 80213fa:	b294      	uxth	r4, r2
 80213fc:	b299      	uxth	r1, r3
 80213fe:	1c6b      	adds	r3, r5, #1
 8021400:	1c62      	adds	r2, r4, #1
 8021402:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8021406:	1c4b      	adds	r3, r1, #1
 8021408:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 802140c:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8021410:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8021414:	0952      	lsrs	r2, r2, #5
 8021416:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802141a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802141e:	432b      	orrs	r3, r5
 8021420:	4313      	orrs	r3, r2
 8021422:	9a02      	ldr	r2, [sp, #8]
 8021424:	8013      	strh	r3, [r2, #0]
 8021426:	b005      	add	sp, #20
 8021428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802142c:	2500      	movs	r5, #0
 802142e:	e6ef      	b.n	8021210 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3c>
 8021430:	2100      	movs	r1, #0
 8021432:	460d      	mov	r5, r1
 8021434:	e6f7      	b.n	8021226 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 8021436:	2100      	movs	r1, #0
 8021438:	e6f5      	b.n	8021226 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 802143a:	4631      	mov	r1, r6
 802143c:	e6f3      	b.n	8021226 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 802143e:	2400      	movs	r4, #0
 8021440:	e702      	b.n	8021248 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x74>
 8021442:	2200      	movs	r2, #0
 8021444:	4614      	mov	r4, r2
 8021446:	e70b      	b.n	8021260 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 8021448:	4602      	mov	r2, r0
 802144a:	4604      	mov	r4, r0
 802144c:	e708      	b.n	8021260 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 802144e:	2200      	movs	r2, #0
 8021450:	e706      	b.n	8021260 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 8021452:	4632      	mov	r2, r6
 8021454:	e704      	b.n	8021260 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>

08021456 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021456:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802145a:	b09d      	sub	sp, #116	; 0x74
 802145c:	9219      	str	r2, [sp, #100]	; 0x64
 802145e:	9307      	str	r3, [sp, #28]
 8021460:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8021462:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
 8021466:	901b      	str	r0, [sp, #108]	; 0x6c
 8021468:	931a      	str	r3, [sp, #104]	; 0x68
 802146a:	6850      	ldr	r0, [r2, #4]
 802146c:	9117      	str	r1, [sp, #92]	; 0x5c
 802146e:	6812      	ldr	r2, [r2, #0]
 8021470:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 8021474:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	; 0x9c
 8021478:	fb00 1303 	mla	r3, r0, r3, r1
 802147c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8021480:	930a      	str	r3, [sp, #40]	; 0x28
 8021482:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8021484:	681b      	ldr	r3, [r3, #0]
 8021486:	9310      	str	r3, [sp, #64]	; 0x40
 8021488:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 802148c:	930b      	str	r3, [sp, #44]	; 0x2c
 802148e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8021490:	2b00      	cmp	r3, #0
 8021492:	dc03      	bgt.n	802149c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 8021494:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8021496:	2b00      	cmp	r3, #0
 8021498:	f340 8375 	ble.w	8021b86 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 802149c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802149e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80214a2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80214a6:	1e48      	subs	r0, r1, #1
 80214a8:	1e57      	subs	r7, r2, #1
 80214aa:	9b07      	ldr	r3, [sp, #28]
 80214ac:	2b00      	cmp	r3, #0
 80214ae:	f340 818e 	ble.w	80217ce <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
 80214b2:	ea5f 4c24 	movs.w	ip, r4, asr #16
 80214b6:	ea4f 4326 	mov.w	r3, r6, asr #16
 80214ba:	d406      	bmi.n	80214ca <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80214bc:	4584      	cmp	ip, r0
 80214be:	da04      	bge.n	80214ca <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80214c0:	2b00      	cmp	r3, #0
 80214c2:	db02      	blt.n	80214ca <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80214c4:	42bb      	cmp	r3, r7
 80214c6:	f2c0 8183 	blt.w	80217d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 80214ca:	f11c 0c01 	adds.w	ip, ip, #1
 80214ce:	f100 8173 	bmi.w	80217b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 80214d2:	4561      	cmp	r1, ip
 80214d4:	f2c0 8170 	blt.w	80217b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 80214d8:	3301      	adds	r3, #1
 80214da:	f100 816d 	bmi.w	80217b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 80214de:	429a      	cmp	r2, r3
 80214e0:	f2c0 816a 	blt.w	80217b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 80214e4:	9b07      	ldr	r3, [sp, #28]
 80214e6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80214e8:	9318      	str	r3, [sp, #96]	; 0x60
 80214ea:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80214ec:	2b00      	cmp	r3, #0
 80214ee:	f340 818c 	ble.w	802180a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 80214f2:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80214f4:	ea4f 4c26 	mov.w	ip, r6, asr #16
 80214f8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80214fa:	f3c4 3003 	ubfx	r0, r4, #12, #4
 80214fe:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8021502:	1422      	asrs	r2, r4, #16
 8021504:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8021508:	689b      	ldr	r3, [r3, #8]
 802150a:	f100 81cd 	bmi.w	80218a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 802150e:	f103 38ff 	add.w	r8, r3, #4294967295
 8021512:	4542      	cmp	r2, r8
 8021514:	f280 81c8 	bge.w	80218a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8021518:	f1bc 0f00 	cmp.w	ip, #0
 802151c:	f2c0 81c4 	blt.w	80218a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8021520:	f10e 38ff 	add.w	r8, lr, #4294967295
 8021524:	45c4      	cmp	ip, r8
 8021526:	f280 81bf 	bge.w	80218a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 802152a:	b21b      	sxth	r3, r3
 802152c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802152e:	fb0c 2203 	mla	r2, ip, r3, r2
 8021532:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 8021536:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 802153a:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 802153e:	2800      	cmp	r0, #0
 8021540:	f000 81a9 	beq.w	8021896 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x440>
 8021544:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8021548:	950c      	str	r5, [sp, #48]	; 0x30
 802154a:	0e2d      	lsrs	r5, r5, #24
 802154c:	9513      	str	r5, [sp, #76]	; 0x4c
 802154e:	b181      	cbz	r1, 8021572 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8021550:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8021554:	3b01      	subs	r3, #1
 8021556:	009b      	lsls	r3, r3, #2
 8021558:	3304      	adds	r3, #4
 802155a:	eb08 0c03 	add.w	ip, r8, r3
 802155e:	f858 3003 	ldr.w	r3, [r8, r3]
 8021562:	9308      	str	r3, [sp, #32]
 8021564:	0e1b      	lsrs	r3, r3, #24
 8021566:	9311      	str	r3, [sp, #68]	; 0x44
 8021568:	f8dc 3004 	ldr.w	r3, [ip, #4]
 802156c:	930d      	str	r3, [sp, #52]	; 0x34
 802156e:	0e1b      	lsrs	r3, r3, #24
 8021570:	9314      	str	r3, [sp, #80]	; 0x50
 8021572:	b280      	uxth	r0, r0
 8021574:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8021576:	b289      	uxth	r1, r1
 8021578:	fb00 f901 	mul.w	r9, r0, r1
 802157c:	0100      	lsls	r0, r0, #4
 802157e:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8021582:	eba0 0809 	sub.w	r8, r0, r9
 8021586:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 802158a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 802158c:	b289      	uxth	r1, r1
 802158e:	fa1f f888 	uxth.w	r8, r8
 8021592:	1a5b      	subs	r3, r3, r1
 8021594:	fb08 f000 	mul.w	r0, r8, r0
 8021598:	b29b      	uxth	r3, r3
 802159a:	fb03 000e 	mla	r0, r3, lr, r0
 802159e:	fb01 0005 	mla	r0, r1, r5, r0
 80215a2:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80215a4:	fb09 0005 	mla	r0, r9, r5, r0
 80215a8:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80215ac:	2800      	cmp	r0, #0
 80215ae:	f000 80fa 	beq.w	80217a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 80215b2:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80215b6:	d01b      	beq.n	80215f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 80215b8:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 80215bc:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80215c0:	fb0e fa0a 	mul.w	sl, lr, sl
 80215c4:	fb0e fe02 	mul.w	lr, lr, r2
 80215c8:	ea4f 221a 	mov.w	r2, sl, lsr #8
 80215cc:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80215d0:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 80215d4:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80215d8:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80215dc:	4452      	add	r2, sl
 80215de:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80215e2:	0a12      	lsrs	r2, r2, #8
 80215e4:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80215e8:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80215ec:	ea42 020c 	orr.w	r2, r2, ip
 80215f0:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80215f2:	2dff      	cmp	r5, #255	; 0xff
 80215f4:	d021      	beq.n	802163a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 80215f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80215f8:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 80215fc:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80215fe:	fb05 fb0b 	mul.w	fp, r5, fp
 8021602:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8021604:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8021608:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802160a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802160e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8021612:	fb05 fa0a 	mul.w	sl, r5, sl
 8021616:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802161a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802161e:	44de      	add	lr, fp
 8021620:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8021624:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021628:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802162c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021630:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021634:	ea4e 050a 	orr.w	r5, lr, sl
 8021638:	950c      	str	r5, [sp, #48]	; 0x30
 802163a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802163c:	2dff      	cmp	r5, #255	; 0xff
 802163e:	d021      	beq.n	8021684 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 8021640:	9d08      	ldr	r5, [sp, #32]
 8021642:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8021646:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8021648:	fb05 fb0b 	mul.w	fp, r5, fp
 802164c:	9d08      	ldr	r5, [sp, #32]
 802164e:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8021652:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8021654:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8021658:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802165c:	fb05 fa0a 	mul.w	sl, r5, sl
 8021660:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021664:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8021668:	44de      	add	lr, fp
 802166a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802166e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021672:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021676:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802167a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802167e:	ea4e 050a 	orr.w	r5, lr, sl
 8021682:	9508      	str	r5, [sp, #32]
 8021684:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8021686:	2dff      	cmp	r5, #255	; 0xff
 8021688:	d021      	beq.n	80216ce <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 802168a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802168c:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8021690:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8021692:	fb05 fb0b 	mul.w	fp, r5, fp
 8021696:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8021698:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802169c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802169e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80216a2:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80216a6:	fb05 fa0a 	mul.w	sl, r5, sl
 80216aa:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80216ae:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80216b2:	44de      	add	lr, fp
 80216b4:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80216b8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80216bc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80216c0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80216c4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80216c8:	ea4e 050a 	orr.w	r5, lr, sl
 80216cc:	950d      	str	r5, [sp, #52]	; 0x34
 80216ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80216d0:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 80216d4:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80216d8:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80216dc:	9d08      	ldr	r5, [sp, #32]
 80216de:	fb08 fc0c 	mul.w	ip, r8, ip
 80216e2:	fb03 cc0e 	mla	ip, r3, lr, ip
 80216e6:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 80216ea:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80216ec:	fb01 cc0e 	mla	ip, r1, lr, ip
 80216f0:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 80216f4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80216f6:	fb09 cc0e 	mla	ip, r9, lr, ip
 80216fa:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 80216fe:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8021700:	fb08 f80e 	mul.w	r8, r8, lr
 8021704:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021708:	fb03 8202 	mla	r2, r3, r2, r8
 802170c:	9b08      	ldr	r3, [sp, #32]
 802170e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021712:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 8021716:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021718:	fb01 220a 	mla	r2, r1, sl, r2
 802171c:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 8021720:	883b      	ldrh	r3, [r7, #0]
 8021722:	fb09 2901 	mla	r9, r9, r1, r2
 8021726:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8021728:	1219      	asrs	r1, r3, #8
 802172a:	4342      	muls	r2, r0
 802172c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8021730:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8021734:	1c50      	adds	r0, r2, #1
 8021736:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 802173a:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 802173e:	ea4c 0c09 	orr.w	ip, ip, r9
 8021742:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8021746:	ea4f 421c 	mov.w	r2, ip, lsr #16
 802174a:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 802174e:	fa5f fc8c 	uxtb.w	ip, ip
 8021752:	fb12 f205 	smulbb	r2, r2, r5
 8021756:	b2c0      	uxtb	r0, r0
 8021758:	fb1c fc05 	smulbb	ip, ip, r5
 802175c:	fb01 2100 	mla	r1, r1, r0, r2
 8021760:	10da      	asrs	r2, r3, #3
 8021762:	fb1e fe05 	smulbb	lr, lr, r5
 8021766:	00db      	lsls	r3, r3, #3
 8021768:	b289      	uxth	r1, r1
 802176a:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 802176e:	b2db      	uxtb	r3, r3
 8021770:	fb02 e200 	mla	r2, r2, r0, lr
 8021774:	fb03 c300 	mla	r3, r3, r0, ip
 8021778:	b292      	uxth	r2, r2
 802177a:	fa1f fc83 	uxth.w	ip, r3
 802177e:	1c4b      	adds	r3, r1, #1
 8021780:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8021784:	f10c 0301 	add.w	r3, ip, #1
 8021788:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 802178c:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 8021790:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8021794:	430b      	orrs	r3, r1
 8021796:	1c51      	adds	r1, r2, #1
 8021798:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 802179c:	0952      	lsrs	r2, r2, #5
 802179e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80217a2:	4313      	orrs	r3, r2
 80217a4:	803b      	strh	r3, [r7, #0]
 80217a6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80217a8:	3702      	adds	r7, #2
 80217aa:	441c      	add	r4, r3
 80217ac:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80217ae:	441e      	add	r6, r3
 80217b0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80217b2:	3b01      	subs	r3, #1
 80217b4:	9318      	str	r3, [sp, #96]	; 0x60
 80217b6:	e698      	b.n	80214ea <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80217b8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80217ba:	441c      	add	r4, r3
 80217bc:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80217be:	441e      	add	r6, r3
 80217c0:	9b07      	ldr	r3, [sp, #28]
 80217c2:	3b01      	subs	r3, #1
 80217c4:	9307      	str	r3, [sp, #28]
 80217c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80217c8:	3302      	adds	r3, #2
 80217ca:	930a      	str	r3, [sp, #40]	; 0x28
 80217cc:	e66d      	b.n	80214aa <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 80217ce:	d023      	beq.n	8021818 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 80217d0:	9b07      	ldr	r3, [sp, #28]
 80217d2:	9829      	ldr	r0, [sp, #164]	; 0xa4
 80217d4:	3b01      	subs	r3, #1
 80217d6:	fb00 4003 	mla	r0, r0, r3, r4
 80217da:	1400      	asrs	r0, r0, #16
 80217dc:	f53f ae82 	bmi.w	80214e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80217e0:	3901      	subs	r1, #1
 80217e2:	4288      	cmp	r0, r1
 80217e4:	f6bf ae7e 	bge.w	80214e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80217e8:	992a      	ldr	r1, [sp, #168]	; 0xa8
 80217ea:	fb01 6303 	mla	r3, r1, r3, r6
 80217ee:	141b      	asrs	r3, r3, #16
 80217f0:	f53f ae78 	bmi.w	80214e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80217f4:	3a01      	subs	r2, #1
 80217f6:	4293      	cmp	r3, r2
 80217f8:	f6bf ae74 	bge.w	80214e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80217fc:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8021800:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8021804:	f1bb 0f00 	cmp.w	fp, #0
 8021808:	dc6c      	bgt.n	80218e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 802180a:	9b07      	ldr	r3, [sp, #28]
 802180c:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8021810:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021812:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8021816:	930a      	str	r3, [sp, #40]	; 0x28
 8021818:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802181a:	2b00      	cmp	r3, #0
 802181c:	f340 81b3 	ble.w	8021b86 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 8021820:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8021824:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8021826:	ee30 0a04 	vadd.f32	s0, s0, s8
 802182a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802182e:	eef0 6a62 	vmov.f32	s13, s5
 8021832:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8021836:	ee31 1a05 	vadd.f32	s2, s2, s10
 802183a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802183e:	ee16 4a90 	vmov	r4, s13
 8021842:	eef0 6a43 	vmov.f32	s13, s6
 8021846:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802184a:	ee16 6a90 	vmov	r6, s13
 802184e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021852:	ee61 7a27 	vmul.f32	s15, s2, s15
 8021856:	ee77 2a62 	vsub.f32	s5, s14, s5
 802185a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802185e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8021862:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8021866:	ee12 2a90 	vmov	r2, s5
 802186a:	eef0 2a47 	vmov.f32	s5, s14
 802186e:	fb92 f3f3 	sdiv	r3, r2, r3
 8021872:	ee13 2a10 	vmov	r2, s6
 8021876:	9329      	str	r3, [sp, #164]	; 0xa4
 8021878:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802187a:	eeb0 3a67 	vmov.f32	s6, s15
 802187e:	fb92 f3f3 	sdiv	r3, r2, r3
 8021882:	932a      	str	r3, [sp, #168]	; 0xa8
 8021884:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8021886:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8021888:	3b01      	subs	r3, #1
 802188a:	9317      	str	r3, [sp, #92]	; 0x5c
 802188c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802188e:	bf08      	it	eq
 8021890:	4613      	moveq	r3, r2
 8021892:	9307      	str	r3, [sp, #28]
 8021894:	e5fb      	b.n	802148e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8021896:	2900      	cmp	r1, #0
 8021898:	f43f ae6b 	beq.w	8021572 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 802189c:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 80218a0:	9308      	str	r3, [sp, #32]
 80218a2:	0e1b      	lsrs	r3, r3, #24
 80218a4:	9311      	str	r3, [sp, #68]	; 0x44
 80218a6:	e664      	b.n	8021572 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 80218a8:	f112 0801 	adds.w	r8, r2, #1
 80218ac:	f53f af7b 	bmi.w	80217a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 80218b0:	4543      	cmp	r3, r8
 80218b2:	f6ff af78 	blt.w	80217a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 80218b6:	f11c 0801 	adds.w	r8, ip, #1
 80218ba:	f53f af74 	bmi.w	80217a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 80218be:	45c6      	cmp	lr, r8
 80218c0:	f6ff af71 	blt.w	80217a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 80218c4:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80218c6:	b21b      	sxth	r3, r3
 80218c8:	9201      	str	r2, [sp, #4]
 80218ca:	fa0f f28e 	sxth.w	r2, lr
 80218ce:	e9cd 1504 	strd	r1, r5, [sp, #16]
 80218d2:	e9cd c002 	strd	ip, r0, [sp, #8]
 80218d6:	9200      	str	r2, [sp, #0]
 80218d8:	4639      	mov	r1, r7
 80218da:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80218dc:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80218de:	f7ff fc79 	bl	80211d4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>
 80218e2:	e760      	b.n	80217a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 80218e4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80218e6:	1427      	asrs	r7, r4, #16
 80218e8:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80218ea:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80218ee:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80218f2:	1433      	asrs	r3, r6, #16
 80218f4:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80218f8:	fb01 7303 	mla	r3, r1, r3, r7
 80218fc:	eb05 0783 	add.w	r7, r5, r3, lsl #2
 8021900:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8021904:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8021908:	2a00      	cmp	r2, #0
 802190a:	f000 8133 	beq.w	8021b74 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x71e>
 802190e:	687d      	ldr	r5, [r7, #4]
 8021910:	950e      	str	r5, [sp, #56]	; 0x38
 8021912:	0e2d      	lsrs	r5, r5, #24
 8021914:	9515      	str	r5, [sp, #84]	; 0x54
 8021916:	b178      	cbz	r0, 8021938 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 8021918:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 802191c:	3901      	subs	r1, #1
 802191e:	0089      	lsls	r1, r1, #2
 8021920:	3104      	adds	r1, #4
 8021922:	eb07 0e01 	add.w	lr, r7, r1
 8021926:	5879      	ldr	r1, [r7, r1]
 8021928:	9109      	str	r1, [sp, #36]	; 0x24
 802192a:	0e09      	lsrs	r1, r1, #24
 802192c:	9112      	str	r1, [sp, #72]	; 0x48
 802192e:	f8de 1004 	ldr.w	r1, [lr, #4]
 8021932:	910f      	str	r1, [sp, #60]	; 0x3c
 8021934:	0e09      	lsrs	r1, r1, #24
 8021936:	9116      	str	r1, [sp, #88]	; 0x58
 8021938:	b292      	uxth	r2, r2
 802193a:	9915      	ldr	r1, [sp, #84]	; 0x54
 802193c:	b280      	uxth	r0, r0
 802193e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8021940:	fb02 f800 	mul.w	r8, r2, r0
 8021944:	0112      	lsls	r2, r2, #4
 8021946:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 802194a:	eba2 0e08 	sub.w	lr, r2, r8
 802194e:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8021952:	b280      	uxth	r0, r0
 8021954:	fa1f fe8e 	uxth.w	lr, lr
 8021958:	1a12      	subs	r2, r2, r0
 802195a:	fb0e f101 	mul.w	r1, lr, r1
 802195e:	b292      	uxth	r2, r2
 8021960:	fb02 110c 	mla	r1, r2, ip, r1
 8021964:	fb00 1105 	mla	r1, r0, r5, r1
 8021968:	9d16      	ldr	r5, [sp, #88]	; 0x58
 802196a:	fb08 1105 	mla	r1, r8, r5, r1
 802196e:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8021972:	2900      	cmp	r1, #0
 8021974:	f000 80f5 	beq.w	8021b62 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70c>
 8021978:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 802197c:	d019      	beq.n	80219b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55c>
 802197e:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8021982:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021986:	fb0c fa0a 	mul.w	sl, ip, sl
 802198a:	fb0c fc03 	mul.w	ip, ip, r3
 802198e:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8021992:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8021996:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 802199a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802199e:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80219a2:	4453      	add	r3, sl
 80219a4:	0a3f      	lsrs	r7, r7, #8
 80219a6:	0a1b      	lsrs	r3, r3, #8
 80219a8:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80219ac:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80219b0:	433b      	orrs	r3, r7
 80219b2:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80219b4:	2dff      	cmp	r5, #255	; 0xff
 80219b6:	d020      	beq.n	80219fa <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a4>
 80219b8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80219ba:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 80219be:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80219c0:	436f      	muls	r7, r5
 80219c2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80219c4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80219c8:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80219cc:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80219ce:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80219d2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80219d6:	fb05 fa0a 	mul.w	sl, r5, sl
 80219da:	44bc      	add	ip, r7
 80219dc:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80219e0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80219e4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80219e8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80219ec:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80219f0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80219f4:	ea4c 050a 	orr.w	r5, ip, sl
 80219f8:	950e      	str	r5, [sp, #56]	; 0x38
 80219fa:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80219fc:	2dff      	cmp	r5, #255	; 0xff
 80219fe:	d020      	beq.n	8021a42 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ec>
 8021a00:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8021a02:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8021a06:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8021a08:	436f      	muls	r7, r5
 8021a0a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8021a0c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8021a10:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8021a14:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8021a16:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8021a1a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021a1e:	fb05 fa0a 	mul.w	sl, r5, sl
 8021a22:	44bc      	add	ip, r7
 8021a24:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8021a28:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021a2c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8021a30:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021a34:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021a38:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021a3c:	ea4c 050a 	orr.w	r5, ip, sl
 8021a40:	9509      	str	r5, [sp, #36]	; 0x24
 8021a42:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8021a44:	2dff      	cmp	r5, #255	; 0xff
 8021a46:	d020      	beq.n	8021a8a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x634>
 8021a48:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8021a4a:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8021a4e:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8021a50:	436f      	muls	r7, r5
 8021a52:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8021a54:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8021a58:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8021a5c:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8021a5e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8021a62:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021a66:	fb05 fa0a 	mul.w	sl, r5, sl
 8021a6a:	44bc      	add	ip, r7
 8021a6c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8021a70:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021a74:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8021a78:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021a7c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021a80:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021a84:	ea4c 050a 	orr.w	r5, ip, sl
 8021a88:	950f      	str	r5, [sp, #60]	; 0x3c
 8021a8a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8021a8c:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8021a90:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021a94:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8021a98:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8021a9a:	fb0e f707 	mul.w	r7, lr, r7
 8021a9e:	fb02 770c 	mla	r7, r2, ip, r7
 8021aa2:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8021aa6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8021aa8:	fb00 770c 	mla	r7, r0, ip, r7
 8021aac:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8021ab0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8021ab2:	fb08 770c 	mla	r7, r8, ip, r7
 8021ab6:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8021aba:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8021abc:	fb0e fe0c 	mul.w	lr, lr, ip
 8021ac0:	0a3f      	lsrs	r7, r7, #8
 8021ac2:	fb02 e303 	mla	r3, r2, r3, lr
 8021ac6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021ac8:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8021acc:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8021ad0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8021ad2:	fb00 330a 	mla	r3, r0, sl, r3
 8021ad6:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8021ada:	f8b9 0000 	ldrh.w	r0, [r9]
 8021ade:	fb08 3c0c 	mla	ip, r8, ip, r3
 8021ae2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021ae4:	1202      	asrs	r2, r0, #8
 8021ae6:	4359      	muls	r1, r3
 8021ae8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021aec:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8021af0:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8021af4:	1c4b      	adds	r3, r1, #1
 8021af6:	ea47 070c 	orr.w	r7, r7, ip
 8021afa:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8021afe:	0c3b      	lsrs	r3, r7, #16
 8021b00:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8021b04:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 8021b08:	b2ff      	uxtb	r7, r7
 8021b0a:	fb13 f305 	smulbb	r3, r3, r5
 8021b0e:	b2c9      	uxtb	r1, r1
 8021b10:	fb17 f705 	smulbb	r7, r7, r5
 8021b14:	fb02 3201 	mla	r2, r2, r1, r3
 8021b18:	10c3      	asrs	r3, r0, #3
 8021b1a:	fb1c fc05 	smulbb	ip, ip, r5
 8021b1e:	00c0      	lsls	r0, r0, #3
 8021b20:	b292      	uxth	r2, r2
 8021b22:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8021b26:	b2c0      	uxtb	r0, r0
 8021b28:	fb03 c301 	mla	r3, r3, r1, ip
 8021b2c:	fb00 7001 	mla	r0, r0, r1, r7
 8021b30:	1c51      	adds	r1, r2, #1
 8021b32:	b29b      	uxth	r3, r3
 8021b34:	b280      	uxth	r0, r0
 8021b36:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8021b3a:	f100 0c01 	add.w	ip, r0, #1
 8021b3e:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 8021b42:	eb0c 2c10 	add.w	ip, ip, r0, lsr #8
 8021b46:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8021b4a:	ea4c 0202 	orr.w	r2, ip, r2
 8021b4e:	f103 0c01 	add.w	ip, r3, #1
 8021b52:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8021b56:	095b      	lsrs	r3, r3, #5
 8021b58:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8021b5c:	431a      	orrs	r2, r3
 8021b5e:	f8a9 2000 	strh.w	r2, [r9]
 8021b62:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8021b64:	f109 0902 	add.w	r9, r9, #2
 8021b68:	f10b 3bff 	add.w	fp, fp, #4294967295
 8021b6c:	441c      	add	r4, r3
 8021b6e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8021b70:	441e      	add	r6, r3
 8021b72:	e647      	b.n	8021804 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8021b74:	2800      	cmp	r0, #0
 8021b76:	f43f aedf 	beq.w	8021938 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 8021b7a:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 8021b7e:	9109      	str	r1, [sp, #36]	; 0x24
 8021b80:	0e09      	lsrs	r1, r1, #24
 8021b82:	9112      	str	r1, [sp, #72]	; 0x48
 8021b84:	e6d8      	b.n	8021938 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 8021b86:	b01d      	add	sp, #116	; 0x74
 8021b88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021b8c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>:
 8021b8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021b90:	b085      	sub	sp, #20
 8021b92:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	; 0x3c
 8021b96:	9102      	str	r1, [sp, #8]
 8021b98:	2c00      	cmp	r4, #0
 8021b9a:	fb04 7103 	mla	r1, r4, r3, r7
 8021b9e:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
 8021ba2:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 8021ba6:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
 8021baa:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 8021bae:	f2c0 810c 	blt.w	8021dca <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
 8021bb2:	45a6      	cmp	lr, r4
 8021bb4:	f340 8109 	ble.w	8021dca <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
 8021bb8:	2f00      	cmp	r7, #0
 8021bba:	f2c0 8104 	blt.w	8021dc6 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
 8021bbe:	42bb      	cmp	r3, r7
 8021bc0:	f340 8101 	ble.w	8021dc6 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
 8021bc4:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 8021bc8:	1c7a      	adds	r2, r7, #1
 8021bca:	f100 8101 	bmi.w	8021dd0 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
 8021bce:	4293      	cmp	r3, r2
 8021bd0:	f340 80fe 	ble.w	8021dd0 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
 8021bd4:	2e00      	cmp	r6, #0
 8021bd6:	f000 80fd 	beq.w	8021dd4 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x248>
 8021bda:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8021bde:	3401      	adds	r4, #1
 8021be0:	f100 80fc 	bmi.w	8021ddc <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
 8021be4:	45a6      	cmp	lr, r4
 8021be6:	f340 80f9 	ble.w	8021ddc <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
 8021bea:	2800      	cmp	r0, #0
 8021bec:	f000 80f9 	beq.w	8021de2 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x256>
 8021bf0:	2f00      	cmp	r7, #0
 8021bf2:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
 8021bf6:	f2c0 80ef 	blt.w	8021dd8 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
 8021bfa:	42bb      	cmp	r3, r7
 8021bfc:	f340 80ec 	ble.w	8021dd8 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
 8021c00:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8021c04:	3701      	adds	r7, #1
 8021c06:	f100 80ef 	bmi.w	8021de8 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
 8021c0a:	42bb      	cmp	r3, r7
 8021c0c:	f340 80ec 	ble.w	8021de8 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
 8021c10:	2e00      	cmp	r6, #0
 8021c12:	f000 80eb 	beq.w	8021dec <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x260>
 8021c16:	6852      	ldr	r2, [r2, #4]
 8021c18:	b2b6      	uxth	r6, r6
 8021c1a:	b280      	uxth	r0, r0
 8021c1c:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 8021c20:	fb00 fe06 	mul.w	lr, r0, r6
 8021c24:	0136      	lsls	r6, r6, #4
 8021c26:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 8021c2a:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 8021c2e:	eba6 070e 	sub.w	r7, r6, lr
 8021c32:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 8021c36:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8021c3a:	b280      	uxth	r0, r0
 8021c3c:	b2bf      	uxth	r7, r7
 8021c3e:	1a1b      	subs	r3, r3, r0
 8021c40:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8021c44:	fb07 f60a 	mul.w	r6, r7, sl
 8021c48:	b29b      	uxth	r3, r3
 8021c4a:	fb0b 6603 	mla	r6, fp, r3, r6
 8021c4e:	fb00 6609 	mla	r6, r0, r9, r6
 8021c52:	fb0e 6608 	mla	r6, lr, r8, r6
 8021c56:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8021c5a:	9600      	str	r6, [sp, #0]
 8021c5c:	2e00      	cmp	r6, #0
 8021c5e:	f000 80af 	beq.w	8021dc0 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x234>
 8021c62:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8021c66:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8021c6a:	9e02      	ldr	r6, [sp, #8]
 8021c6c:	fb0b fc0c 	mul.w	ip, fp, ip
 8021c70:	fb0b f505 	mul.w	r5, fp, r5
 8021c74:	8836      	ldrh	r6, [r6, #0]
 8021c76:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8021c7a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8021c7e:	9501      	str	r5, [sp, #4]
 8021c80:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8021c84:	44dc      	add	ip, fp
 8021c86:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021c8a:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 8021c8e:	9503      	str	r5, [sp, #12]
 8021c90:	9d01      	ldr	r5, [sp, #4]
 8021c92:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 8021c96:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8021c9a:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 8021c9e:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8021ca2:	fb0a fc0c 	mul.w	ip, sl, ip
 8021ca6:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 8021caa:	fb0a fa01 	mul.w	sl, sl, r1
 8021cae:	ea4f 251c 	mov.w	r5, ip, lsr #8
 8021cb2:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8021cb6:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 8021cba:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8021cbe:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 8021cc2:	4465      	add	r5, ip
 8021cc4:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8021cc8:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8021ccc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021cd0:	fb09 fc0c 	mul.w	ip, r9, ip
 8021cd4:	0a2d      	lsrs	r5, r5, #8
 8021cd6:	fb09 f904 	mul.w	r9, r9, r4
 8021cda:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021cde:	ea4f 211c 	mov.w	r1, ip, lsr #8
 8021ce2:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8021ce6:	f509 7480 	add.w	r4, r9, #256	; 0x100
 8021cea:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8021cee:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8021cf2:	437d      	muls	r5, r7
 8021cf4:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8021cf8:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 8021cfc:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8021d00:	4461      	add	r1, ip
 8021d02:	fb08 f404 	mul.w	r4, r8, r4
 8021d06:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8021d0a:	fb08 f802 	mul.w	r8, r8, r2
 8021d0e:	0a09      	lsrs	r1, r1, #8
 8021d10:	0a22      	lsrs	r2, r4, #8
 8021d12:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 8021d16:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8021d1a:	fb07 f70a 	mul.w	r7, r7, sl
 8021d1e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8021d22:	4414      	add	r4, r2
 8021d24:	f508 7280 	add.w	r2, r8, #256	; 0x100
 8021d28:	0a24      	lsrs	r4, r4, #8
 8021d2a:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8021d2e:	9a03      	ldr	r2, [sp, #12]
 8021d30:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8021d34:	fb02 5503 	mla	r5, r2, r3, r5
 8021d38:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8021d3c:	fb04 540e 	mla	r4, r4, lr, r5
 8021d40:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8021d44:	fb01 4100 	mla	r1, r1, r0, r4
 8021d48:	0a09      	lsrs	r1, r1, #8
 8021d4a:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 8021d4e:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 8021d52:	fb03 7101 	mla	r1, r3, r1, r7
 8021d56:	9b00      	ldr	r3, [sp, #0]
 8021d58:	fb0e 1e08 	mla	lr, lr, r8, r1
 8021d5c:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 8021d60:	43da      	mvns	r2, r3
 8021d62:	1233      	asrs	r3, r6, #8
 8021d64:	fb00 e101 	mla	r1, r0, r1, lr
 8021d68:	10f0      	asrs	r0, r6, #3
 8021d6a:	b2d2      	uxtb	r2, r2
 8021d6c:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8021d70:	0a09      	lsrs	r1, r1, #8
 8021d72:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8021d76:	00f6      	lsls	r6, r6, #3
 8021d78:	4353      	muls	r3, r2
 8021d7a:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8021d7e:	4350      	muls	r0, r2
 8021d80:	b2f6      	uxtb	r6, r6
 8021d82:	4321      	orrs	r1, r4
 8021d84:	4356      	muls	r6, r2
 8021d86:	1c5a      	adds	r2, r3, #1
 8021d88:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8021d8c:	0c0b      	lsrs	r3, r1, #16
 8021d8e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8021d92:	1c42      	adds	r2, r0, #1
 8021d94:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8021d98:	0a0a      	lsrs	r2, r1, #8
 8021d9a:	021b      	lsls	r3, r3, #8
 8021d9c:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8021da0:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8021da4:	00d2      	lsls	r2, r2, #3
 8021da6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021daa:	4313      	orrs	r3, r2
 8021dac:	1c72      	adds	r2, r6, #1
 8021dae:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 8021db2:	eb01 2116 	add.w	r1, r1, r6, lsr #8
 8021db6:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8021dba:	4319      	orrs	r1, r3
 8021dbc:	9b02      	ldr	r3, [sp, #8]
 8021dbe:	8019      	strh	r1, [r3, #0]
 8021dc0:	b005      	add	sp, #20
 8021dc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021dc6:	2500      	movs	r5, #0
 8021dc8:	e6fe      	b.n	8021bc8 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3c>
 8021dca:	2100      	movs	r1, #0
 8021dcc:	460d      	mov	r5, r1
 8021dce:	e706      	b.n	8021bde <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 8021dd0:	2100      	movs	r1, #0
 8021dd2:	e704      	b.n	8021bde <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 8021dd4:	4631      	mov	r1, r6
 8021dd6:	e702      	b.n	8021bde <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 8021dd8:	2400      	movs	r4, #0
 8021dda:	e713      	b.n	8021c04 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x78>
 8021ddc:	2200      	movs	r2, #0
 8021dde:	4614      	mov	r4, r2
 8021de0:	e71a      	b.n	8021c18 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8021de2:	4602      	mov	r2, r0
 8021de4:	4604      	mov	r4, r0
 8021de6:	e717      	b.n	8021c18 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8021de8:	2200      	movs	r2, #0
 8021dea:	e715      	b.n	8021c18 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8021dec:	4632      	mov	r2, r6
 8021dee:	e713      	b.n	8021c18 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>

08021df0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021df4:	b09b      	sub	sp, #108	; 0x6c
 8021df6:	9218      	str	r2, [sp, #96]	; 0x60
 8021df8:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8021dfa:	9019      	str	r0, [sp, #100]	; 0x64
 8021dfc:	9116      	str	r1, [sp, #88]	; 0x58
 8021dfe:	6850      	ldr	r0, [r2, #4]
 8021e00:	9307      	str	r3, [sp, #28]
 8021e02:	6812      	ldr	r2, [r2, #0]
 8021e04:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8021e08:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
 8021e0c:	fb00 1303 	mla	r3, r0, r3, r1
 8021e10:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8021e14:	930a      	str	r3, [sp, #40]	; 0x28
 8021e16:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8021e18:	681b      	ldr	r3, [r3, #0]
 8021e1a:	930f      	str	r3, [sp, #60]	; 0x3c
 8021e1c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8021e1e:	2b00      	cmp	r3, #0
 8021e20:	dc03      	bgt.n	8021e2a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8021e22:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8021e24:	2b00      	cmp	r3, #0
 8021e26:	f340 8387 	ble.w	8022538 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 8021e2a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8021e2c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8021e30:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8021e34:	1e48      	subs	r0, r1, #1
 8021e36:	1e57      	subs	r7, r2, #1
 8021e38:	9b07      	ldr	r3, [sp, #28]
 8021e3a:	2b00      	cmp	r3, #0
 8021e3c:	f340 8166 	ble.w	802210c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 8021e40:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8021e44:	ea4f 4326 	mov.w	r3, r6, asr #16
 8021e48:	d406      	bmi.n	8021e58 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8021e4a:	4584      	cmp	ip, r0
 8021e4c:	da04      	bge.n	8021e58 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8021e4e:	2b00      	cmp	r3, #0
 8021e50:	db02      	blt.n	8021e58 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8021e52:	42bb      	cmp	r3, r7
 8021e54:	f2c0 815b 	blt.w	802210e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 8021e58:	f11c 0c01 	adds.w	ip, ip, #1
 8021e5c:	f100 814b 	bmi.w	80220f6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8021e60:	4561      	cmp	r1, ip
 8021e62:	f2c0 8148 	blt.w	80220f6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8021e66:	3301      	adds	r3, #1
 8021e68:	f100 8145 	bmi.w	80220f6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8021e6c:	429a      	cmp	r2, r3
 8021e6e:	f2c0 8142 	blt.w	80220f6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8021e72:	9b07      	ldr	r3, [sp, #28]
 8021e74:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8021e76:	9317      	str	r3, [sp, #92]	; 0x5c
 8021e78:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8021e7a:	2b00      	cmp	r3, #0
 8021e7c:	f340 8165 	ble.w	802214a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 8021e80:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8021e82:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8021e86:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8021e88:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8021e8c:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8021e90:	1422      	asrs	r2, r4, #16
 8021e92:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8021e96:	689b      	ldr	r3, [r3, #8]
 8021e98:	f100 81d5 	bmi.w	8022246 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8021e9c:	f103 38ff 	add.w	r8, r3, #4294967295
 8021ea0:	4542      	cmp	r2, r8
 8021ea2:	f280 81d0 	bge.w	8022246 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8021ea6:	f1bc 0f00 	cmp.w	ip, #0
 8021eaa:	f2c0 81cc 	blt.w	8022246 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8021eae:	f10e 38ff 	add.w	r8, lr, #4294967295
 8021eb2:	45c4      	cmp	ip, r8
 8021eb4:	f280 81c7 	bge.w	8022246 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8021eb8:	b21b      	sxth	r3, r3
 8021eba:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8021ebc:	fb0c 2203 	mla	r2, ip, r3, r2
 8021ec0:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 8021ec4:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8021ec8:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8021ecc:	2900      	cmp	r1, #0
 8021ece:	f000 8182 	beq.w	80221d6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 8021ed2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8021ed6:	950b      	str	r5, [sp, #44]	; 0x2c
 8021ed8:	0e2d      	lsrs	r5, r5, #24
 8021eda:	9512      	str	r5, [sp, #72]	; 0x48
 8021edc:	b180      	cbz	r0, 8021f00 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 8021ede:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8021ee2:	3b01      	subs	r3, #1
 8021ee4:	009b      	lsls	r3, r3, #2
 8021ee6:	3304      	adds	r3, #4
 8021ee8:	eb08 0c03 	add.w	ip, r8, r3
 8021eec:	f858 3003 	ldr.w	r3, [r8, r3]
 8021ef0:	9308      	str	r3, [sp, #32]
 8021ef2:	0e1b      	lsrs	r3, r3, #24
 8021ef4:	9310      	str	r3, [sp, #64]	; 0x40
 8021ef6:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8021efa:	930c      	str	r3, [sp, #48]	; 0x30
 8021efc:	0e1b      	lsrs	r3, r3, #24
 8021efe:	9313      	str	r3, [sp, #76]	; 0x4c
 8021f00:	b289      	uxth	r1, r1
 8021f02:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8021f04:	b280      	uxth	r0, r0
 8021f06:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8021f08:	fb01 f900 	mul.w	r9, r1, r0
 8021f0c:	0109      	lsls	r1, r1, #4
 8021f0e:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8021f12:	eba1 0809 	sub.w	r8, r1, r9
 8021f16:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 8021f1a:	b280      	uxth	r0, r0
 8021f1c:	fa1f f888 	uxth.w	r8, r8
 8021f20:	1a09      	subs	r1, r1, r0
 8021f22:	fb08 f303 	mul.w	r3, r8, r3
 8021f26:	b289      	uxth	r1, r1
 8021f28:	fb01 330e 	mla	r3, r1, lr, r3
 8021f2c:	fb00 3305 	mla	r3, r0, r5, r3
 8021f30:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8021f32:	fb09 3305 	mla	r3, r9, r5, r3
 8021f36:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021f3a:	2b00      	cmp	r3, #0
 8021f3c:	f000 80d2 	beq.w	80220e4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8021f40:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8021f44:	d01b      	beq.n	8021f7e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18e>
 8021f46:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 8021f4a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8021f4e:	fb0e fa0a 	mul.w	sl, lr, sl
 8021f52:	fb0e fe02 	mul.w	lr, lr, r2
 8021f56:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8021f5a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8021f5e:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8021f62:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8021f66:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8021f6a:	4452      	add	r2, sl
 8021f6c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021f70:	0a12      	lsrs	r2, r2, #8
 8021f72:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8021f76:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8021f7a:	ea42 020c 	orr.w	r2, r2, ip
 8021f7e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8021f80:	2dff      	cmp	r5, #255	; 0xff
 8021f82:	d021      	beq.n	8021fc8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 8021f84:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8021f86:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8021f8a:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8021f8c:	fb05 fb0b 	mul.w	fp, r5, fp
 8021f90:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8021f92:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8021f96:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8021f98:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8021f9c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8021fa0:	fb05 fa0a 	mul.w	sl, r5, sl
 8021fa4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021fa8:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8021fac:	44de      	add	lr, fp
 8021fae:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8021fb2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021fb6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021fba:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021fbe:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021fc2:	ea4e 050a 	orr.w	r5, lr, sl
 8021fc6:	950b      	str	r5, [sp, #44]	; 0x2c
 8021fc8:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8021fca:	2dff      	cmp	r5, #255	; 0xff
 8021fcc:	d021      	beq.n	8022012 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x222>
 8021fce:	9d08      	ldr	r5, [sp, #32]
 8021fd0:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8021fd4:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8021fd6:	fb05 fb0b 	mul.w	fp, r5, fp
 8021fda:	9d08      	ldr	r5, [sp, #32]
 8021fdc:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8021fe0:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8021fe2:	fb05 fa0e 	mul.w	sl, r5, lr
 8021fe6:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8021fea:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8021fee:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021ff2:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8021ff6:	44de      	add	lr, fp
 8021ff8:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8021ffc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022000:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022004:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022008:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802200c:	ea4e 050a 	orr.w	r5, lr, sl
 8022010:	9508      	str	r5, [sp, #32]
 8022012:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8022014:	2dff      	cmp	r5, #255	; 0xff
 8022016:	d021      	beq.n	802205c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 8022018:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802201a:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 802201e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8022020:	fb05 fb0b 	mul.w	fp, r5, fp
 8022024:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8022026:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802202a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802202c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8022030:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8022034:	fb05 fa0a 	mul.w	sl, r5, sl
 8022038:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802203c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8022040:	44de      	add	lr, fp
 8022042:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8022046:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802204a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802204e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022052:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022056:	ea4e 050a 	orr.w	r5, lr, sl
 802205a:	950c      	str	r5, [sp, #48]	; 0x30
 802205c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802205e:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8022062:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8022066:	2bff      	cmp	r3, #255	; 0xff
 8022068:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 802206c:	9d08      	ldr	r5, [sp, #32]
 802206e:	fb08 fc0c 	mul.w	ip, r8, ip
 8022072:	fb01 cc0e 	mla	ip, r1, lr, ip
 8022076:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 802207a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802207c:	fb00 cc0e 	mla	ip, r0, lr, ip
 8022080:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8022084:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8022086:	fb09 cc0e 	mla	ip, r9, lr, ip
 802208a:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 802208e:	fb08 f80e 	mul.w	r8, r8, lr
 8022092:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022096:	fb01 8202 	mla	r2, r1, r2, r8
 802209a:	9908      	ldr	r1, [sp, #32]
 802209c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80220a0:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 80220a4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80220a6:	fb00 220a 	mla	r2, r0, sl, r2
 80220aa:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 80220ae:	fb09 2900 	mla	r9, r9, r0, r2
 80220b2:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80220b6:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80220ba:	ea4c 0c09 	orr.w	ip, ip, r9
 80220be:	ea4f 221c 	mov.w	r2, ip, lsr #8
 80220c2:	f040 8091 	bne.w	80221e8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 80220c6:	ea4f 135c 	mov.w	r3, ip, lsr #5
 80220ca:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 80220ce:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80220d2:	f022 0207 	bic.w	r2, r2, #7
 80220d6:	431a      	orrs	r2, r3
 80220d8:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 80220dc:	ea4c 0c02 	orr.w	ip, ip, r2
 80220e0:	f8a7 c000 	strh.w	ip, [r7]
 80220e4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80220e6:	3702      	adds	r7, #2
 80220e8:	441c      	add	r4, r3
 80220ea:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80220ec:	441e      	add	r6, r3
 80220ee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80220f0:	3b01      	subs	r3, #1
 80220f2:	9317      	str	r3, [sp, #92]	; 0x5c
 80220f4:	e6c0      	b.n	8021e78 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 80220f6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80220f8:	441c      	add	r4, r3
 80220fa:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80220fc:	441e      	add	r6, r3
 80220fe:	9b07      	ldr	r3, [sp, #28]
 8022100:	3b01      	subs	r3, #1
 8022102:	9307      	str	r3, [sp, #28]
 8022104:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022106:	3302      	adds	r3, #2
 8022108:	930a      	str	r3, [sp, #40]	; 0x28
 802210a:	e695      	b.n	8021e38 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 802210c:	d024      	beq.n	8022158 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 802210e:	9b07      	ldr	r3, [sp, #28]
 8022110:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8022112:	3b01      	subs	r3, #1
 8022114:	fb00 4003 	mla	r0, r0, r3, r4
 8022118:	1400      	asrs	r0, r0, #16
 802211a:	f53f aeaa 	bmi.w	8021e72 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802211e:	3901      	subs	r1, #1
 8022120:	4288      	cmp	r0, r1
 8022122:	f6bf aea6 	bge.w	8021e72 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8022126:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8022128:	fb01 6303 	mla	r3, r1, r3, r6
 802212c:	141b      	asrs	r3, r3, #16
 802212e:	f53f aea0 	bmi.w	8021e72 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8022132:	3a01      	subs	r2, #1
 8022134:	4293      	cmp	r3, r2
 8022136:	f6bf ae9c 	bge.w	8021e72 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802213a:	f8dd b01c 	ldr.w	fp, [sp, #28]
 802213e:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8022142:	f1bb 0f00 	cmp.w	fp, #0
 8022146:	f300 809a 	bgt.w	802227e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 802214a:	9b07      	ldr	r3, [sp, #28]
 802214c:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8022150:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022152:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8022156:	930a      	str	r3, [sp, #40]	; 0x28
 8022158:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802215a:	2b00      	cmp	r3, #0
 802215c:	f340 81ec 	ble.w	8022538 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 8022160:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022164:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022166:	ee30 0a04 	vadd.f32	s0, s0, s8
 802216a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802216e:	eef0 6a62 	vmov.f32	s13, s5
 8022172:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8022176:	ee31 1a05 	vadd.f32	s2, s2, s10
 802217a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802217e:	ee16 4a90 	vmov	r4, s13
 8022182:	eef0 6a43 	vmov.f32	s13, s6
 8022186:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802218a:	ee16 6a90 	vmov	r6, s13
 802218e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022192:	ee61 7a27 	vmul.f32	s15, s2, s15
 8022196:	ee77 2a62 	vsub.f32	s5, s14, s5
 802219a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802219e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80221a2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80221a6:	ee12 2a90 	vmov	r2, s5
 80221aa:	eef0 2a47 	vmov.f32	s5, s14
 80221ae:	fb92 f3f3 	sdiv	r3, r2, r3
 80221b2:	ee13 2a10 	vmov	r2, s6
 80221b6:	9327      	str	r3, [sp, #156]	; 0x9c
 80221b8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80221ba:	eeb0 3a67 	vmov.f32	s6, s15
 80221be:	fb92 f3f3 	sdiv	r3, r2, r3
 80221c2:	9328      	str	r3, [sp, #160]	; 0xa0
 80221c4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80221c6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80221c8:	3b01      	subs	r3, #1
 80221ca:	9316      	str	r3, [sp, #88]	; 0x58
 80221cc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80221ce:	bf08      	it	eq
 80221d0:	4613      	moveq	r3, r2
 80221d2:	9307      	str	r3, [sp, #28]
 80221d4:	e622      	b.n	8021e1c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c>
 80221d6:	2800      	cmp	r0, #0
 80221d8:	f43f ae92 	beq.w	8021f00 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 80221dc:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 80221e0:	9308      	str	r3, [sp, #32]
 80221e2:	0e1b      	lsrs	r3, r3, #24
 80221e4:	9310      	str	r3, [sp, #64]	; 0x40
 80221e6:	e68b      	b.n	8021f00 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 80221e8:	8839      	ldrh	r1, [r7, #0]
 80221ea:	43db      	mvns	r3, r3
 80221ec:	4dd4      	ldr	r5, [pc, #848]	; (8022540 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
 80221ee:	ea4f 2e21 	mov.w	lr, r1, asr #8
 80221f2:	fa5f f883 	uxtb.w	r8, r3
 80221f6:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 80221fa:	10c8      	asrs	r0, r1, #3
 80221fc:	00cb      	lsls	r3, r1, #3
 80221fe:	fb0e fe08 	mul.w	lr, lr, r8
 8022202:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8022206:	b2db      	uxtb	r3, r3
 8022208:	f10e 0101 	add.w	r1, lr, #1
 802220c:	fb00 f008 	mul.w	r0, r0, r8
 8022210:	fb03 f308 	mul.w	r3, r3, r8
 8022214:	eb01 2e1e 	add.w	lr, r1, lr, lsr #8
 8022218:	ea4f 411c 	mov.w	r1, ip, lsr #16
 802221c:	eb01 211e 	add.w	r1, r1, lr, lsr #8
 8022220:	f100 0e01 	add.w	lr, r0, #1
 8022224:	eb0e 2010 	add.w	r0, lr, r0, lsr #8
 8022228:	b2c9      	uxtb	r1, r1
 802222a:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 802222e:	ea05 2101 	and.w	r1, r5, r1, lsl #8
 8022232:	00d2      	lsls	r2, r2, #3
 8022234:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8022238:	430a      	orrs	r2, r1
 802223a:	1c59      	adds	r1, r3, #1
 802223c:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8022240:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8022244:	e748      	b.n	80220d8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
 8022246:	f112 0801 	adds.w	r8, r2, #1
 802224a:	f53f af4b 	bmi.w	80220e4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 802224e:	4543      	cmp	r3, r8
 8022250:	f6ff af48 	blt.w	80220e4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8022254:	f11c 0801 	adds.w	r8, ip, #1
 8022258:	f53f af44 	bmi.w	80220e4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 802225c:	45c6      	cmp	lr, r8
 802225e:	f6ff af41 	blt.w	80220e4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8022262:	b21b      	sxth	r3, r3
 8022264:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 8022268:	fa0f f28e 	sxth.w	r2, lr
 802226c:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8022270:	9200      	str	r2, [sp, #0]
 8022272:	4639      	mov	r1, r7
 8022274:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8022276:	9819      	ldr	r0, [sp, #100]	; 0x64
 8022278:	f7ff fc88 	bl	8021b8c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>
 802227c:	e732      	b.n	80220e4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 802227e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022280:	1421      	asrs	r1, r4, #16
 8022282:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8022284:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8022288:	f9b3 7008 	ldrsh.w	r7, [r3, #8]
 802228c:	1433      	asrs	r3, r6, #16
 802228e:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8022292:	fb07 1303 	mla	r3, r7, r3, r1
 8022296:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8022298:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 802229c:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80222a0:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80222a4:	2a00      	cmp	r2, #0
 80222a6:	f000 8108 	beq.w	80224ba <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ca>
 80222aa:	684d      	ldr	r5, [r1, #4]
 80222ac:	950d      	str	r5, [sp, #52]	; 0x34
 80222ae:	0e2d      	lsrs	r5, r5, #24
 80222b0:	9514      	str	r5, [sp, #80]	; 0x50
 80222b2:	b178      	cbz	r0, 80222d4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 80222b4:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80222b8:	3f01      	subs	r7, #1
 80222ba:	00bf      	lsls	r7, r7, #2
 80222bc:	3704      	adds	r7, #4
 80222be:	eb01 0e07 	add.w	lr, r1, r7
 80222c2:	59c9      	ldr	r1, [r1, r7]
 80222c4:	9109      	str	r1, [sp, #36]	; 0x24
 80222c6:	0e09      	lsrs	r1, r1, #24
 80222c8:	9111      	str	r1, [sp, #68]	; 0x44
 80222ca:	f8de 1004 	ldr.w	r1, [lr, #4]
 80222ce:	910e      	str	r1, [sp, #56]	; 0x38
 80222d0:	0e09      	lsrs	r1, r1, #24
 80222d2:	9115      	str	r1, [sp, #84]	; 0x54
 80222d4:	b292      	uxth	r2, r2
 80222d6:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80222d8:	b280      	uxth	r0, r0
 80222da:	fb02 f900 	mul.w	r9, r2, r0
 80222de:	0112      	lsls	r2, r2, #4
 80222e0:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80222e4:	eba2 0e09 	sub.w	lr, r2, r9
 80222e8:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 80222ec:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80222ee:	b280      	uxth	r0, r0
 80222f0:	fa1f fe8e 	uxth.w	lr, lr
 80222f4:	1a09      	subs	r1, r1, r0
 80222f6:	fb0e f202 	mul.w	r2, lr, r2
 80222fa:	b289      	uxth	r1, r1
 80222fc:	fb01 220c 	mla	r2, r1, ip, r2
 8022300:	fb00 2205 	mla	r2, r0, r5, r2
 8022304:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8022306:	fb09 2205 	mla	r2, r9, r5, r2
 802230a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802230e:	2a00      	cmp	r2, #0
 8022310:	f000 80ca 	beq.w	80224a8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 8022314:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8022318:	d019      	beq.n	802234e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55e>
 802231a:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 802231e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022322:	fb0c fa0a 	mul.w	sl, ip, sl
 8022326:	fb0c fc03 	mul.w	ip, ip, r3
 802232a:	ea4f 231a 	mov.w	r3, sl, lsr #8
 802232e:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8022332:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8022336:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802233a:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 802233e:	4453      	add	r3, sl
 8022340:	0a3f      	lsrs	r7, r7, #8
 8022342:	0a1b      	lsrs	r3, r3, #8
 8022344:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8022348:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802234c:	433b      	orrs	r3, r7
 802234e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8022350:	2dff      	cmp	r5, #255	; 0xff
 8022352:	d020      	beq.n	8022396 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a6>
 8022354:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8022356:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802235a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802235c:	436f      	muls	r7, r5
 802235e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8022360:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8022364:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8022368:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802236a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802236e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022372:	fb05 fa0a 	mul.w	sl, r5, sl
 8022376:	44bc      	add	ip, r7
 8022378:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802237c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022380:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8022384:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022388:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802238c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022390:	ea4c 050a 	orr.w	r5, ip, sl
 8022394:	950d      	str	r5, [sp, #52]	; 0x34
 8022396:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8022398:	2dff      	cmp	r5, #255	; 0xff
 802239a:	d020      	beq.n	80223de <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ee>
 802239c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802239e:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 80223a2:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80223a4:	436f      	muls	r7, r5
 80223a6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80223a8:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 80223ac:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80223ae:	fb05 fa0c 	mul.w	sl, r5, ip
 80223b2:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80223b6:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80223ba:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80223be:	44bc      	add	ip, r7
 80223c0:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80223c4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80223c8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80223cc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80223d0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80223d4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80223d8:	ea4c 050a 	orr.w	r5, ip, sl
 80223dc:	9509      	str	r5, [sp, #36]	; 0x24
 80223de:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80223e0:	2dff      	cmp	r5, #255	; 0xff
 80223e2:	d020      	beq.n	8022426 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x636>
 80223e4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80223e6:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 80223ea:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80223ec:	436f      	muls	r7, r5
 80223ee:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80223f0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80223f4:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80223f8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80223fa:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80223fe:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022402:	fb05 fa0a 	mul.w	sl, r5, sl
 8022406:	44bc      	add	ip, r7
 8022408:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802240c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022410:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8022414:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022418:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802241c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022420:	ea4c 050a 	orr.w	r5, ip, sl
 8022424:	950e      	str	r5, [sp, #56]	; 0x38
 8022426:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8022428:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 802242c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022430:	2aff      	cmp	r2, #255	; 0xff
 8022432:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8022436:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8022438:	fb0e f707 	mul.w	r7, lr, r7
 802243c:	fb01 770c 	mla	r7, r1, ip, r7
 8022440:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8022444:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8022446:	fb00 770c 	mla	r7, r0, ip, r7
 802244a:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 802244e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8022450:	fb09 770c 	mla	r7, r9, ip, r7
 8022454:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8022458:	fb0e fe0c 	mul.w	lr, lr, ip
 802245c:	ea4f 2717 	mov.w	r7, r7, lsr #8
 8022460:	fb01 e303 	mla	r3, r1, r3, lr
 8022464:	9909      	ldr	r1, [sp, #36]	; 0x24
 8022466:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802246a:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 802246e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8022470:	fb00 330a 	mla	r3, r0, sl, r3
 8022474:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8022478:	fb09 3c0c 	mla	ip, r9, ip, r3
 802247c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022480:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8022484:	ea47 070c 	orr.w	r7, r7, ip
 8022488:	ea4f 2317 	mov.w	r3, r7, lsr #8
 802248c:	d11e      	bne.n	80224cc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
 802248e:	097a      	lsrs	r2, r7, #5
 8022490:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8022494:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 8022498:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802249c:	f023 0307 	bic.w	r3, r3, #7
 80224a0:	4313      	orrs	r3, r2
 80224a2:	431f      	orrs	r7, r3
 80224a4:	f8a8 7000 	strh.w	r7, [r8]
 80224a8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80224aa:	f108 0802 	add.w	r8, r8, #2
 80224ae:	f10b 3bff 	add.w	fp, fp, #4294967295
 80224b2:	441c      	add	r4, r3
 80224b4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80224b6:	441e      	add	r6, r3
 80224b8:	e643      	b.n	8022142 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 80224ba:	2800      	cmp	r0, #0
 80224bc:	f43f af0a 	beq.w	80222d4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 80224c0:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 80224c4:	9109      	str	r1, [sp, #36]	; 0x24
 80224c6:	0e09      	lsrs	r1, r1, #24
 80224c8:	9111      	str	r1, [sp, #68]	; 0x44
 80224ca:	e703      	b.n	80222d4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 80224cc:	f8b8 1000 	ldrh.w	r1, [r8]
 80224d0:	43d2      	mvns	r2, r2
 80224d2:	ea4f 2c21 	mov.w	ip, r1, asr #8
 80224d6:	fa5f fe82 	uxtb.w	lr, r2
 80224da:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80224de:	10c8      	asrs	r0, r1, #3
 80224e0:	00ca      	lsls	r2, r1, #3
 80224e2:	fb0c fc0e 	mul.w	ip, ip, lr
 80224e6:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 80224ea:	b2d2      	uxtb	r2, r2
 80224ec:	f10c 0101 	add.w	r1, ip, #1
 80224f0:	fb00 f00e 	mul.w	r0, r0, lr
 80224f4:	fb02 f20e 	mul.w	r2, r2, lr
 80224f8:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 80224fc:	0c39      	lsrs	r1, r7, #16
 80224fe:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8022502:	490f      	ldr	r1, [pc, #60]	; (8022540 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
 8022504:	fa5f fc8c 	uxtb.w	ip, ip
 8022508:	ea01 2c0c 	and.w	ip, r1, ip, lsl #8
 802250c:	1c41      	adds	r1, r0, #1
 802250e:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8022512:	1c51      	adds	r1, r2, #1
 8022514:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8022518:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 802251c:	00c0      	lsls	r0, r0, #3
 802251e:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8022522:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8022526:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 802252a:	ea4c 0c00 	orr.w	ip, ip, r0
 802252e:	ea47 0c0c 	orr.w	ip, r7, ip
 8022532:	f8a8 c000 	strh.w	ip, [r8]
 8022536:	e7b7      	b.n	80224a8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 8022538:	b01b      	add	sp, #108	; 0x6c
 802253a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802253e:	bf00      	nop
 8022540:	fffff800 	.word	0xfffff800

08022544 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>:
 8022544:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022548:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	; 0x28
 802254c:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 8022550:	2d00      	cmp	r5, #0
 8022552:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8022556:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 802255a:	fb05 0e03 	mla	lr, r5, r3, r0
 802255e:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 8022562:	f2c0 808c 	blt.w	802267e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
 8022566:	45a9      	cmp	r9, r5
 8022568:	f340 8089 	ble.w	802267e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
 802256c:	2800      	cmp	r0, #0
 802256e:	f2c0 8084 	blt.w	802267a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
 8022572:	4580      	cmp	r8, r0
 8022574:	f340 8081 	ble.w	802267a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
 8022578:	ea4f 045e 	mov.w	r4, lr, lsr #1
 802257c:	f01e 0f01 	tst.w	lr, #1
 8022580:	5d16      	ldrb	r6, [r2, r4]
 8022582:	bf0c      	ite	eq
 8022584:	f006 060f 	andeq.w	r6, r6, #15
 8022588:	1136      	asrne	r6, r6, #4
 802258a:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 802258e:	b2f6      	uxtb	r6, r6
 8022590:	1c44      	adds	r4, r0, #1
 8022592:	d477      	bmi.n	8022684 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
 8022594:	45a0      	cmp	r8, r4
 8022596:	dd75      	ble.n	8022684 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
 8022598:	2f00      	cmp	r7, #0
 802259a:	d075      	beq.n	8022688 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x144>
 802259c:	f10e 0a01 	add.w	sl, lr, #1
 80225a0:	ea4f 045a 	mov.w	r4, sl, lsr #1
 80225a4:	f01a 0f01 	tst.w	sl, #1
 80225a8:	5d14      	ldrb	r4, [r2, r4]
 80225aa:	bf0c      	ite	eq
 80225ac:	f004 040f 	andeq.w	r4, r4, #15
 80225b0:	1124      	asrne	r4, r4, #4
 80225b2:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 80225b6:	b2e4      	uxtb	r4, r4
 80225b8:	3501      	adds	r5, #1
 80225ba:	d469      	bmi.n	8022690 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
 80225bc:	45a9      	cmp	r9, r5
 80225be:	dd67      	ble.n	8022690 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
 80225c0:	f1bc 0f00 	cmp.w	ip, #0
 80225c4:	d067      	beq.n	8022696 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x152>
 80225c6:	2800      	cmp	r0, #0
 80225c8:	db60      	blt.n	802268c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
 80225ca:	4580      	cmp	r8, r0
 80225cc:	dd5e      	ble.n	802268c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
 80225ce:	eb03 090e 	add.w	r9, r3, lr
 80225d2:	ea4f 0559 	mov.w	r5, r9, lsr #1
 80225d6:	f019 0f01 	tst.w	r9, #1
 80225da:	5d55      	ldrb	r5, [r2, r5]
 80225dc:	bf0c      	ite	eq
 80225de:	f005 050f 	andeq.w	r5, r5, #15
 80225e2:	112d      	asrne	r5, r5, #4
 80225e4:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 80225e8:	b2ed      	uxtb	r5, r5
 80225ea:	3001      	adds	r0, #1
 80225ec:	d456      	bmi.n	802269c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
 80225ee:	4580      	cmp	r8, r0
 80225f0:	dd54      	ble.n	802269c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
 80225f2:	2f00      	cmp	r7, #0
 80225f4:	d054      	beq.n	80226a0 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x15c>
 80225f6:	3301      	adds	r3, #1
 80225f8:	449e      	add	lr, r3
 80225fa:	ea4f 035e 	mov.w	r3, lr, lsr #1
 80225fe:	f01e 0f01 	tst.w	lr, #1
 8022602:	5cd0      	ldrb	r0, [r2, r3]
 8022604:	bf0c      	ite	eq
 8022606:	f000 000f 	andeq.w	r0, r0, #15
 802260a:	1100      	asrne	r0, r0, #4
 802260c:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8022610:	b2c3      	uxtb	r3, r0
 8022612:	b2ba      	uxth	r2, r7
 8022614:	fa1f fc8c 	uxth.w	ip, ip
 8022618:	fb02 f00c 	mul.w	r0, r2, ip
 802261c:	0112      	lsls	r2, r2, #4
 802261e:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 8022622:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 8022626:	1a12      	subs	r2, r2, r0
 8022628:	fa1f fc8c 	uxth.w	ip, ip
 802262c:	b292      	uxth	r2, r2
 802262e:	eba7 070c 	sub.w	r7, r7, ip
 8022632:	4362      	muls	r2, r4
 8022634:	b2bf      	uxth	r7, r7
 8022636:	fb06 2207 	mla	r2, r6, r7, r2
 802263a:	fb0c 2505 	mla	r5, ip, r5, r2
 802263e:	fb00 5303 	mla	r3, r0, r3, r5
 8022642:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022646:	b1b3      	cbz	r3, 8022676 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
 8022648:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 802264c:	435a      	muls	r2, r3
 802264e:	1c53      	adds	r3, r2, #1
 8022650:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8022654:	4a2d      	ldr	r2, [pc, #180]	; (802270c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1c8>)
 8022656:	121b      	asrs	r3, r3, #8
 8022658:	6812      	ldr	r2, [r2, #0]
 802265a:	2bff      	cmp	r3, #255	; 0xff
 802265c:	ea4f 2612 	mov.w	r6, r2, lsr #8
 8022660:	d120      	bne.n	80226a4 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x160>
 8022662:	0950      	lsrs	r0, r2, #5
 8022664:	4b2a      	ldr	r3, [pc, #168]	; (8022710 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1cc>)
 8022666:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802266a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802266e:	4033      	ands	r3, r6
 8022670:	4318      	orrs	r0, r3
 8022672:	4302      	orrs	r2, r0
 8022674:	800a      	strh	r2, [r1, #0]
 8022676:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802267a:	2600      	movs	r6, #0
 802267c:	e788      	b.n	8022590 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x4c>
 802267e:	2400      	movs	r4, #0
 8022680:	4626      	mov	r6, r4
 8022682:	e799      	b.n	80225b8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 8022684:	2400      	movs	r4, #0
 8022686:	e797      	b.n	80225b8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 8022688:	463c      	mov	r4, r7
 802268a:	e795      	b.n	80225b8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 802268c:	2500      	movs	r5, #0
 802268e:	e7ac      	b.n	80225ea <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xa6>
 8022690:	2300      	movs	r3, #0
 8022692:	461d      	mov	r5, r3
 8022694:	e7bd      	b.n	8022612 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8022696:	4663      	mov	r3, ip
 8022698:	4665      	mov	r5, ip
 802269a:	e7ba      	b.n	8022612 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 802269c:	2300      	movs	r3, #0
 802269e:	e7b8      	b.n	8022612 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 80226a0:	463b      	mov	r3, r7
 80226a2:	e7b6      	b.n	8022612 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 80226a4:	880d      	ldrh	r5, [r1, #0]
 80226a6:	b29f      	uxth	r7, r3
 80226a8:	f3c2 4007 	ubfx	r0, r2, #16, #8
 80226ac:	43db      	mvns	r3, r3
 80226ae:	122c      	asrs	r4, r5, #8
 80226b0:	fb10 f007 	smulbb	r0, r0, r7
 80226b4:	b2db      	uxtb	r3, r3
 80226b6:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 80226ba:	b2f6      	uxtb	r6, r6
 80226bc:	b2d2      	uxtb	r2, r2
 80226be:	fb04 0403 	mla	r4, r4, r3, r0
 80226c2:	10e8      	asrs	r0, r5, #3
 80226c4:	fb12 f207 	smulbb	r2, r2, r7
 80226c8:	00ed      	lsls	r5, r5, #3
 80226ca:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 80226ce:	b2a4      	uxth	r4, r4
 80226d0:	fb16 f607 	smulbb	r6, r6, r7
 80226d4:	b2ed      	uxtb	r5, r5
 80226d6:	fb00 6603 	mla	r6, r0, r3, r6
 80226da:	fb05 2303 	mla	r3, r5, r3, r2
 80226de:	b2b0      	uxth	r0, r6
 80226e0:	b29a      	uxth	r2, r3
 80226e2:	1c63      	adds	r3, r4, #1
 80226e4:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 80226e8:	1c53      	adds	r3, r2, #1
 80226ea:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80226ee:	1c42      	adds	r2, r0, #1
 80226f0:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 80226f4:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80226f8:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80226fc:	0940      	lsrs	r0, r0, #5
 80226fe:	4323      	orrs	r3, r4
 8022700:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8022704:	4303      	orrs	r3, r0
 8022706:	800b      	strh	r3, [r1, #0]
 8022708:	e7b5      	b.n	8022676 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
 802270a:	bf00      	nop
 802270c:	200243e4 	.word	0x200243e4
 8022710:	00fff800 	.word	0x00fff800

08022714 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022718:	b097      	sub	sp, #92	; 0x5c
 802271a:	9214      	str	r2, [sp, #80]	; 0x50
 802271c:	9309      	str	r3, [sp, #36]	; 0x24
 802271e:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8022720:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 8022724:	9015      	str	r0, [sp, #84]	; 0x54
 8022726:	910d      	str	r1, [sp, #52]	; 0x34
 8022728:	6850      	ldr	r0, [r2, #4]
 802272a:	930f      	str	r3, [sp, #60]	; 0x3c
 802272c:	6812      	ldr	r2, [r2, #0]
 802272e:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 8022732:	e9dd 4621 	ldrd	r4, r6, [sp, #132]	; 0x84
 8022736:	fb00 1303 	mla	r3, r0, r3, r1
 802273a:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 802273e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022740:	689b      	ldr	r3, [r3, #8]
 8022742:	3301      	adds	r3, #1
 8022744:	f023 0301 	bic.w	r3, r3, #1
 8022748:	930a      	str	r3, [sp, #40]	; 0x28
 802274a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802274c:	681f      	ldr	r7, [r3, #0]
 802274e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022750:	2b00      	cmp	r3, #0
 8022752:	dc03      	bgt.n	802275c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8022754:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8022756:	2b00      	cmp	r3, #0
 8022758:	f340 8289 	ble.w	8022c6e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55a>
 802275c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802275e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022762:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8022766:	1e48      	subs	r0, r1, #1
 8022768:	f102 3cff 	add.w	ip, r2, #4294967295
 802276c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802276e:	2b00      	cmp	r3, #0
 8022770:	f340 80c5 	ble.w	80228fe <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8022774:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8022778:	ea4f 4326 	mov.w	r3, r6, asr #16
 802277c:	d406      	bmi.n	802278c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802277e:	4586      	cmp	lr, r0
 8022780:	da04      	bge.n	802278c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8022782:	2b00      	cmp	r3, #0
 8022784:	db02      	blt.n	802278c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8022786:	4563      	cmp	r3, ip
 8022788:	f2c0 80ba 	blt.w	8022900 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 802278c:	f11e 0e01 	adds.w	lr, lr, #1
 8022790:	f100 80ab 	bmi.w	80228ea <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 8022794:	4571      	cmp	r1, lr
 8022796:	f2c0 80a8 	blt.w	80228ea <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 802279a:	3301      	adds	r3, #1
 802279c:	f100 80a5 	bmi.w	80228ea <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 80227a0:	429a      	cmp	r2, r3
 80227a2:	f2c0 80a2 	blt.w	80228ea <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 80227a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80227a8:	46c8      	mov	r8, r9
 80227aa:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
 80227ae:	930e      	str	r3, [sp, #56]	; 0x38
 80227b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80227b2:	2b00      	cmp	r3, #0
 80227b4:	f340 80c4 	ble.w	8022940 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 80227b8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80227ba:	1430      	asrs	r0, r6, #16
 80227bc:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80227c0:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80227c4:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 80227c8:	1423      	asrs	r3, r4, #16
 80227ca:	f100 814f 	bmi.w	8022a6c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80227ce:	f10c 3bff 	add.w	fp, ip, #4294967295
 80227d2:	455b      	cmp	r3, fp
 80227d4:	f280 814a 	bge.w	8022a6c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80227d8:	2800      	cmp	r0, #0
 80227da:	f2c0 8147 	blt.w	8022a6c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80227de:	f10e 3bff 	add.w	fp, lr, #4294967295
 80227e2:	4558      	cmp	r0, fp
 80227e4:	f280 8142 	bge.w	8022a6c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80227e8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80227ea:	fb00 3305 	mla	r3, r0, r5, r3
 80227ee:	0858      	lsrs	r0, r3, #1
 80227f0:	07dd      	lsls	r5, r3, #31
 80227f2:	f817 c000 	ldrb.w	ip, [r7, r0]
 80227f6:	bf54      	ite	pl
 80227f8:	f00c 0c0f 	andpl.w	ip, ip, #15
 80227fc:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8022800:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8022804:	fa5f fc8c 	uxtb.w	ip, ip
 8022808:	2a00      	cmp	r2, #0
 802280a:	f000 80dd 	beq.w	80229c8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b4>
 802280e:	1c58      	adds	r0, r3, #1
 8022810:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8022814:	07c0      	lsls	r0, r0, #31
 8022816:	f817 e00e 	ldrb.w	lr, [r7, lr]
 802281a:	bf54      	ite	pl
 802281c:	f00e 0e0f 	andpl.w	lr, lr, #15
 8022820:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8022824:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8022828:	fa5f f08e 	uxtb.w	r0, lr
 802282c:	9010      	str	r0, [sp, #64]	; 0x40
 802282e:	b1d9      	cbz	r1, 8022868 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8022830:	4453      	add	r3, sl
 8022832:	0858      	lsrs	r0, r3, #1
 8022834:	07dd      	lsls	r5, r3, #31
 8022836:	f103 0301 	add.w	r3, r3, #1
 802283a:	5c38      	ldrb	r0, [r7, r0]
 802283c:	bf54      	ite	pl
 802283e:	f000 000f 	andpl.w	r0, r0, #15
 8022842:	1100      	asrmi	r0, r0, #4
 8022844:	07dd      	lsls	r5, r3, #31
 8022846:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802284a:	b2c0      	uxtb	r0, r0
 802284c:	900b      	str	r0, [sp, #44]	; 0x2c
 802284e:	ea4f 0053 	mov.w	r0, r3, lsr #1
 8022852:	f817 e000 	ldrb.w	lr, [r7, r0]
 8022856:	bf54      	ite	pl
 8022858:	f00e 030f 	andpl.w	r3, lr, #15
 802285c:	ea4f 132e 	movmi.w	r3, lr, asr #4
 8022860:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8022864:	b2db      	uxtb	r3, r3
 8022866:	9311      	str	r3, [sp, #68]	; 0x44
 8022868:	b292      	uxth	r2, r2
 802286a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802286c:	b289      	uxth	r1, r1
 802286e:	fb02 f301 	mul.w	r3, r2, r1
 8022872:	0112      	lsls	r2, r2, #4
 8022874:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8022878:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 802287c:	1ad2      	subs	r2, r2, r3
 802287e:	b289      	uxth	r1, r1
 8022880:	b292      	uxth	r2, r2
 8022882:	1a40      	subs	r0, r0, r1
 8022884:	436a      	muls	r2, r5
 8022886:	b280      	uxth	r0, r0
 8022888:	fb0c 2c00 	mla	ip, ip, r0, r2
 802288c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802288e:	fb01 c102 	mla	r1, r1, r2, ip
 8022892:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8022894:	fb03 1302 	mla	r3, r3, r2, r1
 8022898:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802289c:	b1db      	cbz	r3, 80228d6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 802289e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80228a0:	4353      	muls	r3, r2
 80228a2:	1c5a      	adds	r2, r3, #1
 80228a4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80228a8:	4ac6      	ldr	r2, [pc, #792]	; (8022bc4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 80228aa:	121b      	asrs	r3, r3, #8
 80228ac:	6812      	ldr	r2, [r2, #0]
 80228ae:	2bff      	cmp	r3, #255	; 0xff
 80228b0:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 80228b4:	f040 8099 	bne.w	80229ea <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 80228b8:	0953      	lsrs	r3, r2, #5
 80228ba:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 80228be:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80228c2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80228c6:	f02c 0c07 	bic.w	ip, ip, #7
 80228ca:	ea43 0c0c 	orr.w	ip, r3, ip
 80228ce:	ea4c 0202 	orr.w	r2, ip, r2
 80228d2:	f8a8 2000 	strh.w	r2, [r8]
 80228d6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80228d8:	f108 0802 	add.w	r8, r8, #2
 80228dc:	441c      	add	r4, r3
 80228de:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80228e0:	441e      	add	r6, r3
 80228e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80228e4:	3b01      	subs	r3, #1
 80228e6:	930e      	str	r3, [sp, #56]	; 0x38
 80228e8:	e762      	b.n	80227b0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 80228ea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80228ec:	f109 0902 	add.w	r9, r9, #2
 80228f0:	441c      	add	r4, r3
 80228f2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80228f4:	441e      	add	r6, r3
 80228f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80228f8:	3b01      	subs	r3, #1
 80228fa:	9309      	str	r3, [sp, #36]	; 0x24
 80228fc:	e736      	b.n	802276c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 80228fe:	d024      	beq.n	802294a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8022900:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022902:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8022904:	3b01      	subs	r3, #1
 8022906:	fb00 4003 	mla	r0, r0, r3, r4
 802290a:	1400      	asrs	r0, r0, #16
 802290c:	f53f af4b 	bmi.w	80227a6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8022910:	3901      	subs	r1, #1
 8022912:	4288      	cmp	r0, r1
 8022914:	f6bf af47 	bge.w	80227a6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8022918:	9924      	ldr	r1, [sp, #144]	; 0x90
 802291a:	fb01 6303 	mla	r3, r1, r3, r6
 802291e:	141b      	asrs	r3, r3, #16
 8022920:	f53f af41 	bmi.w	80227a6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8022924:	3a01      	subs	r2, #1
 8022926:	4293      	cmp	r3, r2
 8022928:	f6bf af3d 	bge.w	80227a6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802292c:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 8022930:	46c8      	mov	r8, r9
 8022932:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8022936:	930e      	str	r3, [sp, #56]	; 0x38
 8022938:	f1bb 0f00 	cmp.w	fp, #0
 802293c:	f300 80b7 	bgt.w	8022aae <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39a>
 8022940:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022942:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8022946:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 802294a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802294c:	2b00      	cmp	r3, #0
 802294e:	f340 818e 	ble.w	8022c6e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55a>
 8022952:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022956:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022958:	ee30 0a04 	vadd.f32	s0, s0, s8
 802295c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022960:	eef0 6a62 	vmov.f32	s13, s5
 8022964:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8022968:	ee31 1a05 	vadd.f32	s2, s2, s10
 802296c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022970:	ee16 4a90 	vmov	r4, s13
 8022974:	eef0 6a43 	vmov.f32	s13, s6
 8022978:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802297c:	ee16 6a90 	vmov	r6, s13
 8022980:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022984:	ee61 7a27 	vmul.f32	s15, s2, s15
 8022988:	ee77 2a62 	vsub.f32	s5, s14, s5
 802298c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022990:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022994:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8022998:	ee12 2a90 	vmov	r2, s5
 802299c:	eef0 2a47 	vmov.f32	s5, s14
 80229a0:	fb92 f3f3 	sdiv	r3, r2, r3
 80229a4:	ee13 2a10 	vmov	r2, s6
 80229a8:	9323      	str	r3, [sp, #140]	; 0x8c
 80229aa:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80229ac:	eeb0 3a67 	vmov.f32	s6, s15
 80229b0:	fb92 f3f3 	sdiv	r3, r2, r3
 80229b4:	9324      	str	r3, [sp, #144]	; 0x90
 80229b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80229b8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80229ba:	3b01      	subs	r3, #1
 80229bc:	930d      	str	r3, [sp, #52]	; 0x34
 80229be:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80229c0:	bf08      	it	eq
 80229c2:	4613      	moveq	r3, r2
 80229c4:	9309      	str	r3, [sp, #36]	; 0x24
 80229c6:	e6c2      	b.n	802274e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 80229c8:	2900      	cmp	r1, #0
 80229ca:	f43f af4d 	beq.w	8022868 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 80229ce:	eb0a 0003 	add.w	r0, sl, r3
 80229d2:	0843      	lsrs	r3, r0, #1
 80229d4:	07c0      	lsls	r0, r0, #31
 80229d6:	5cfb      	ldrb	r3, [r7, r3]
 80229d8:	bf54      	ite	pl
 80229da:	f003 030f 	andpl.w	r3, r3, #15
 80229de:	111b      	asrmi	r3, r3, #4
 80229e0:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80229e4:	b2db      	uxtb	r3, r3
 80229e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80229e8:	e73e      	b.n	8022868 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 80229ea:	f8b8 e000 	ldrh.w	lr, [r8]
 80229ee:	fa1f fb83 	uxth.w	fp, r3
 80229f2:	f3c2 4107 	ubfx	r1, r2, #16, #8
 80229f6:	43db      	mvns	r3, r3
 80229f8:	ea4f 202e 	mov.w	r0, lr, asr #8
 80229fc:	fb11 f10b 	smulbb	r1, r1, fp
 8022a00:	b2db      	uxtb	r3, r3
 8022a02:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8022a06:	fa5f fc8c 	uxtb.w	ip, ip
 8022a0a:	b2d2      	uxtb	r2, r2
 8022a0c:	fb00 1003 	mla	r0, r0, r3, r1
 8022a10:	ea4f 01ee 	mov.w	r1, lr, asr #3
 8022a14:	fb1c fc0b 	smulbb	ip, ip, fp
 8022a18:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8022a1c:	b280      	uxth	r0, r0
 8022a1e:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8022a22:	fb12 fb0b 	smulbb	fp, r2, fp
 8022a26:	fa5f fe8e 	uxtb.w	lr, lr
 8022a2a:	fb01 cc03 	mla	ip, r1, r3, ip
 8022a2e:	fb0e bb03 	mla	fp, lr, r3, fp
 8022a32:	1c43      	adds	r3, r0, #1
 8022a34:	fa1f fc8c 	uxth.w	ip, ip
 8022a38:	fa1f fb8b 	uxth.w	fp, fp
 8022a3c:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8022a40:	f10c 0101 	add.w	r1, ip, #1
 8022a44:	f400 4378 	and.w	r3, r0, #63488	; 0xf800
 8022a48:	f10b 0001 	add.w	r0, fp, #1
 8022a4c:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8022a50:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8022a54:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8022a58:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8022a5c:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8022a60:	4318      	orrs	r0, r3
 8022a62:	ea40 000c 	orr.w	r0, r0, ip
 8022a66:	f8a8 0000 	strh.w	r0, [r8]
 8022a6a:	e734      	b.n	80228d6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8022a6c:	f113 0b01 	adds.w	fp, r3, #1
 8022a70:	f53f af31 	bmi.w	80228d6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8022a74:	45dc      	cmp	ip, fp
 8022a76:	f6ff af2e 	blt.w	80228d6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8022a7a:	f110 0b01 	adds.w	fp, r0, #1
 8022a7e:	f53f af2a 	bmi.w	80228d6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8022a82:	45de      	cmp	lr, fp
 8022a84:	f6ff af27 	blt.w	80228d6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8022a88:	9302      	str	r3, [sp, #8]
 8022a8a:	fa0f f38e 	sxth.w	r3, lr
 8022a8e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8022a90:	9301      	str	r3, [sp, #4]
 8022a92:	fa0f f38c 	sxth.w	r3, ip
 8022a96:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8022a9a:	e9cd 1505 	strd	r1, r5, [sp, #20]
 8022a9e:	9300      	str	r3, [sp, #0]
 8022aa0:	463a      	mov	r2, r7
 8022aa2:	4653      	mov	r3, sl
 8022aa4:	4641      	mov	r1, r8
 8022aa6:	9815      	ldr	r0, [sp, #84]	; 0x54
 8022aa8:	f7ff fd4c 	bl	8022544 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>
 8022aac:	e713      	b.n	80228d6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8022aae:	1422      	asrs	r2, r4, #16
 8022ab0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8022ab2:	1433      	asrs	r3, r6, #16
 8022ab4:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8022ab8:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8022abc:	fb05 2303 	mla	r3, r5, r3, r2
 8022ac0:	085a      	lsrs	r2, r3, #1
 8022ac2:	07dd      	lsls	r5, r3, #31
 8022ac4:	5cba      	ldrb	r2, [r7, r2]
 8022ac6:	bf54      	ite	pl
 8022ac8:	f002 020f 	andpl.w	r2, r2, #15
 8022acc:	1112      	asrmi	r2, r2, #4
 8022ace:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8022ad2:	b2d2      	uxtb	r2, r2
 8022ad4:	2900      	cmp	r1, #0
 8022ad6:	d077      	beq.n	8022bc8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8022ad8:	f103 0e01 	add.w	lr, r3, #1
 8022adc:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8022ae0:	f01e 0f01 	tst.w	lr, #1
 8022ae4:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8022ae8:	bf0c      	ite	eq
 8022aea:	f00c 0c0f 	andeq.w	ip, ip, #15
 8022aee:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8022af2:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8022af6:	fa5f f58c 	uxtb.w	r5, ip
 8022afa:	9512      	str	r5, [sp, #72]	; 0x48
 8022afc:	b308      	cbz	r0, 8022b42 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 8022afe:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8022b00:	442b      	add	r3, r5
 8022b02:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8022b06:	07dd      	lsls	r5, r3, #31
 8022b08:	f103 0301 	add.w	r3, r3, #1
 8022b0c:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8022b10:	bf54      	ite	pl
 8022b12:	f00c 0c0f 	andpl.w	ip, ip, #15
 8022b16:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8022b1a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8022b1e:	fa5f f58c 	uxtb.w	r5, ip
 8022b22:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8022b26:	950c      	str	r5, [sp, #48]	; 0x30
 8022b28:	07dd      	lsls	r5, r3, #31
 8022b2a:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8022b2e:	bf54      	ite	pl
 8022b30:	f00c 0c0f 	andpl.w	ip, ip, #15
 8022b34:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8022b38:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8022b3c:	fa5f f38c 	uxtb.w	r3, ip
 8022b40:	9313      	str	r3, [sp, #76]	; 0x4c
 8022b42:	b289      	uxth	r1, r1
 8022b44:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8022b46:	b280      	uxth	r0, r0
 8022b48:	fb01 f300 	mul.w	r3, r1, r0
 8022b4c:	0109      	lsls	r1, r1, #4
 8022b4e:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 8022b52:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 8022b56:	1ac9      	subs	r1, r1, r3
 8022b58:	b280      	uxth	r0, r0
 8022b5a:	b289      	uxth	r1, r1
 8022b5c:	ebac 0c00 	sub.w	ip, ip, r0
 8022b60:	4369      	muls	r1, r5
 8022b62:	fa1f fc8c 	uxth.w	ip, ip
 8022b66:	fb02 120c 	mla	r2, r2, ip, r1
 8022b6a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8022b6c:	fb00 2001 	mla	r0, r0, r1, r2
 8022b70:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8022b72:	fb03 0302 	mla	r3, r3, r2, r0
 8022b76:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022b7a:	b1d3      	cbz	r3, 8022bb2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8022b7c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8022b7e:	4353      	muls	r3, r2
 8022b80:	1c5a      	adds	r2, r3, #1
 8022b82:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022b86:	4a0f      	ldr	r2, [pc, #60]	; (8022bc4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 8022b88:	121b      	asrs	r3, r3, #8
 8022b8a:	6812      	ldr	r2, [r2, #0]
 8022b8c:	2bff      	cmp	r3, #255	; 0xff
 8022b8e:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 8022b92:	d12d      	bne.n	8022bf0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 8022b94:	0953      	lsrs	r3, r2, #5
 8022b96:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 8022b9a:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8022b9e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8022ba2:	f02c 0c07 	bic.w	ip, ip, #7
 8022ba6:	ea43 0c0c 	orr.w	ip, r3, ip
 8022baa:	ea4c 0202 	orr.w	r2, ip, r2
 8022bae:	f8a8 2000 	strh.w	r2, [r8]
 8022bb2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8022bb4:	f108 0802 	add.w	r8, r8, #2
 8022bb8:	f10b 3bff 	add.w	fp, fp, #4294967295
 8022bbc:	441c      	add	r4, r3
 8022bbe:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022bc0:	441e      	add	r6, r3
 8022bc2:	e6b9      	b.n	8022938 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8022bc4:	200243e4 	.word	0x200243e4
 8022bc8:	2800      	cmp	r0, #0
 8022bca:	d0ba      	beq.n	8022b42 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 8022bcc:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8022bce:	442b      	add	r3, r5
 8022bd0:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8022bd4:	07db      	lsls	r3, r3, #31
 8022bd6:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8022bda:	bf54      	ite	pl
 8022bdc:	f00c 0c0f 	andpl.w	ip, ip, #15
 8022be0:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8022be4:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8022be8:	fa5f f38c 	uxtb.w	r3, ip
 8022bec:	930c      	str	r3, [sp, #48]	; 0x30
 8022bee:	e7a8      	b.n	8022b42 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 8022bf0:	f8b8 e000 	ldrh.w	lr, [r8]
 8022bf4:	fa1f fa83 	uxth.w	sl, r3
 8022bf8:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8022bfc:	43db      	mvns	r3, r3
 8022bfe:	ea4f 202e 	mov.w	r0, lr, asr #8
 8022c02:	fb11 f10a 	smulbb	r1, r1, sl
 8022c06:	b2db      	uxtb	r3, r3
 8022c08:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8022c0c:	b2d2      	uxtb	r2, r2
 8022c0e:	fa5f fc8c 	uxtb.w	ip, ip
 8022c12:	fb00 1003 	mla	r0, r0, r3, r1
 8022c16:	ea4f 01ee 	mov.w	r1, lr, asr #3
 8022c1a:	fb12 f20a 	smulbb	r2, r2, sl
 8022c1e:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8022c22:	b280      	uxth	r0, r0
 8022c24:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8022c28:	fb1c fc0a 	smulbb	ip, ip, sl
 8022c2c:	fa5f fe8e 	uxtb.w	lr, lr
 8022c30:	fb0e 2203 	mla	r2, lr, r3, r2
 8022c34:	fb01 cc03 	mla	ip, r1, r3, ip
 8022c38:	1c43      	adds	r3, r0, #1
 8022c3a:	b292      	uxth	r2, r2
 8022c3c:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8022c40:	1c51      	adds	r1, r2, #1
 8022c42:	fa1f fc8c 	uxth.w	ip, ip
 8022c46:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8022c4a:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 8022c4e:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 8022c52:	4308      	orrs	r0, r1
 8022c54:	f10c 0101 	add.w	r1, ip, #1
 8022c58:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8022c5c:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8022c60:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8022c64:	ea40 000c 	orr.w	r0, r0, ip
 8022c68:	f8a8 0000 	strh.w	r0, [r8]
 8022c6c:	e7a1      	b.n	8022bb2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8022c6e:	b017      	add	sp, #92	; 0x5c
 8022c70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022c74 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>:
 8022c74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022c78:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	; 0x28
 8022c7c:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 8022c80:	2d00      	cmp	r5, #0
 8022c82:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8022c86:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 8022c8a:	fb05 0e03 	mla	lr, r5, r3, r0
 8022c8e:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 8022c92:	f2c0 80b0 	blt.w	8022df6 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
 8022c96:	45a9      	cmp	r9, r5
 8022c98:	f340 80ad 	ble.w	8022df6 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
 8022c9c:	2800      	cmp	r0, #0
 8022c9e:	f2c0 80a8 	blt.w	8022df2 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
 8022ca2:	4580      	cmp	r8, r0
 8022ca4:	f340 80a5 	ble.w	8022df2 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
 8022ca8:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8022cac:	f01e 0f01 	tst.w	lr, #1
 8022cb0:	5d16      	ldrb	r6, [r2, r4]
 8022cb2:	bf0c      	ite	eq
 8022cb4:	f006 060f 	andeq.w	r6, r6, #15
 8022cb8:	1136      	asrne	r6, r6, #4
 8022cba:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8022cbe:	b2f6      	uxtb	r6, r6
 8022cc0:	1c44      	adds	r4, r0, #1
 8022cc2:	f100 809b 	bmi.w	8022dfc <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
 8022cc6:	45a0      	cmp	r8, r4
 8022cc8:	f340 8098 	ble.w	8022dfc <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
 8022ccc:	2f00      	cmp	r7, #0
 8022cce:	f000 8097 	beq.w	8022e00 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x18c>
 8022cd2:	f10e 0a01 	add.w	sl, lr, #1
 8022cd6:	ea4f 045a 	mov.w	r4, sl, lsr #1
 8022cda:	f01a 0f01 	tst.w	sl, #1
 8022cde:	5d14      	ldrb	r4, [r2, r4]
 8022ce0:	bf0c      	ite	eq
 8022ce2:	f004 040f 	andeq.w	r4, r4, #15
 8022ce6:	1124      	asrne	r4, r4, #4
 8022ce8:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8022cec:	b2e4      	uxtb	r4, r4
 8022cee:	3501      	adds	r5, #1
 8022cf0:	f100 808a 	bmi.w	8022e08 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
 8022cf4:	45a9      	cmp	r9, r5
 8022cf6:	f340 8087 	ble.w	8022e08 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
 8022cfa:	f1bc 0f00 	cmp.w	ip, #0
 8022cfe:	f000 8086 	beq.w	8022e0e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x19a>
 8022d02:	2800      	cmp	r0, #0
 8022d04:	db7e      	blt.n	8022e04 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
 8022d06:	4580      	cmp	r8, r0
 8022d08:	dd7c      	ble.n	8022e04 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
 8022d0a:	eb03 090e 	add.w	r9, r3, lr
 8022d0e:	ea4f 0559 	mov.w	r5, r9, lsr #1
 8022d12:	f019 0f01 	tst.w	r9, #1
 8022d16:	5d55      	ldrb	r5, [r2, r5]
 8022d18:	bf0c      	ite	eq
 8022d1a:	f005 050f 	andeq.w	r5, r5, #15
 8022d1e:	112d      	asrne	r5, r5, #4
 8022d20:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8022d24:	b2ed      	uxtb	r5, r5
 8022d26:	3001      	adds	r0, #1
 8022d28:	d474      	bmi.n	8022e14 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 8022d2a:	4580      	cmp	r8, r0
 8022d2c:	dd72      	ble.n	8022e14 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 8022d2e:	2f00      	cmp	r7, #0
 8022d30:	d072      	beq.n	8022e18 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a4>
 8022d32:	3301      	adds	r3, #1
 8022d34:	449e      	add	lr, r3
 8022d36:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8022d3a:	f01e 0f01 	tst.w	lr, #1
 8022d3e:	5cd0      	ldrb	r0, [r2, r3]
 8022d40:	bf0c      	ite	eq
 8022d42:	f000 000f 	andeq.w	r0, r0, #15
 8022d46:	1100      	asrne	r0, r0, #4
 8022d48:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8022d4c:	b2c3      	uxtb	r3, r0
 8022d4e:	b2ba      	uxth	r2, r7
 8022d50:	fa1f fc8c 	uxth.w	ip, ip
 8022d54:	fb02 f00c 	mul.w	r0, r2, ip
 8022d58:	0112      	lsls	r2, r2, #4
 8022d5a:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 8022d5e:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 8022d62:	1a12      	subs	r2, r2, r0
 8022d64:	fa1f fc8c 	uxth.w	ip, ip
 8022d68:	b292      	uxth	r2, r2
 8022d6a:	eba7 070c 	sub.w	r7, r7, ip
 8022d6e:	4362      	muls	r2, r4
 8022d70:	b2bf      	uxth	r7, r7
 8022d72:	fb06 2207 	mla	r2, r6, r7, r2
 8022d76:	fb0c 2505 	mla	r5, ip, r5, r2
 8022d7a:	fb00 5303 	mla	r3, r0, r3, r5
 8022d7e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022d82:	b3a3      	cbz	r3, 8022dee <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17a>
 8022d84:	4a25      	ldr	r2, [pc, #148]	; (8022e1c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a8>)
 8022d86:	880e      	ldrh	r6, [r1, #0]
 8022d88:	6815      	ldr	r5, [r2, #0]
 8022d8a:	b29a      	uxth	r2, r3
 8022d8c:	1234      	asrs	r4, r6, #8
 8022d8e:	43db      	mvns	r3, r3
 8022d90:	f3c5 4007 	ubfx	r0, r5, #16, #8
 8022d94:	f3c5 2707 	ubfx	r7, r5, #8, #8
 8022d98:	b2db      	uxtb	r3, r3
 8022d9a:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8022d9e:	fb10 f002 	smulbb	r0, r0, r2
 8022da2:	b2ed      	uxtb	r5, r5
 8022da4:	fb17 f702 	smulbb	r7, r7, r2
 8022da8:	fb04 0403 	mla	r4, r4, r3, r0
 8022dac:	10f0      	asrs	r0, r6, #3
 8022dae:	fb15 f202 	smulbb	r2, r5, r2
 8022db2:	00f6      	lsls	r6, r6, #3
 8022db4:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8022db8:	b2a4      	uxth	r4, r4
 8022dba:	b2f6      	uxtb	r6, r6
 8022dbc:	fb00 7003 	mla	r0, r0, r3, r7
 8022dc0:	fb06 2303 	mla	r3, r6, r3, r2
 8022dc4:	b280      	uxth	r0, r0
 8022dc6:	b29a      	uxth	r2, r3
 8022dc8:	1c63      	adds	r3, r4, #1
 8022dca:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8022dce:	1c53      	adds	r3, r2, #1
 8022dd0:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8022dd4:	1c42      	adds	r2, r0, #1
 8022dd6:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8022dda:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8022dde:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8022de2:	0940      	lsrs	r0, r0, #5
 8022de4:	4323      	orrs	r3, r4
 8022de6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8022dea:	4303      	orrs	r3, r0
 8022dec:	800b      	strh	r3, [r1, #0]
 8022dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022df2:	2600      	movs	r6, #0
 8022df4:	e764      	b.n	8022cc0 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x4c>
 8022df6:	2400      	movs	r4, #0
 8022df8:	4626      	mov	r6, r4
 8022dfa:	e778      	b.n	8022cee <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 8022dfc:	2400      	movs	r4, #0
 8022dfe:	e776      	b.n	8022cee <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 8022e00:	463c      	mov	r4, r7
 8022e02:	e774      	b.n	8022cee <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 8022e04:	2500      	movs	r5, #0
 8022e06:	e78e      	b.n	8022d26 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xb2>
 8022e08:	2300      	movs	r3, #0
 8022e0a:	461d      	mov	r5, r3
 8022e0c:	e79f      	b.n	8022d4e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8022e0e:	4663      	mov	r3, ip
 8022e10:	4665      	mov	r5, ip
 8022e12:	e79c      	b.n	8022d4e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8022e14:	2300      	movs	r3, #0
 8022e16:	e79a      	b.n	8022d4e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8022e18:	463b      	mov	r3, r7
 8022e1a:	e798      	b.n	8022d4e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8022e1c:	200243e4 	.word	0x200243e4

08022e20 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022e24:	b093      	sub	sp, #76	; 0x4c
 8022e26:	461d      	mov	r5, r3
 8022e28:	920c      	str	r2, [sp, #48]	; 0x30
 8022e2a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8022e2c:	9011      	str	r0, [sp, #68]	; 0x44
 8022e2e:	9107      	str	r1, [sp, #28]
 8022e30:	6850      	ldr	r0, [r2, #4]
 8022e32:	6812      	ldr	r2, [r2, #0]
 8022e34:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 8022e38:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 8022e3c:	fb00 1303 	mla	r3, r0, r3, r1
 8022e40:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8022e44:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022e46:	689b      	ldr	r3, [r3, #8]
 8022e48:	3301      	adds	r3, #1
 8022e4a:	f023 0301 	bic.w	r3, r3, #1
 8022e4e:	9306      	str	r3, [sp, #24]
 8022e50:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022e52:	681f      	ldr	r7, [r3, #0]
 8022e54:	9b07      	ldr	r3, [sp, #28]
 8022e56:	2b00      	cmp	r3, #0
 8022e58:	dc03      	bgt.n	8022e62 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8022e5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022e5c:	2b00      	cmp	r3, #0
 8022e5e:	f340 8267 	ble.w	8023330 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 8022e62:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022e64:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022e68:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8022e6c:	1e48      	subs	r0, r1, #1
 8022e6e:	f102 3cff 	add.w	ip, r2, #4294967295
 8022e72:	2d00      	cmp	r5, #0
 8022e74:	f340 80b7 	ble.w	8022fe6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8022e78:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8022e7c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8022e80:	d406      	bmi.n	8022e90 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8022e82:	4586      	cmp	lr, r0
 8022e84:	da04      	bge.n	8022e90 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8022e86:	2b00      	cmp	r3, #0
 8022e88:	db02      	blt.n	8022e90 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8022e8a:	4563      	cmp	r3, ip
 8022e8c:	f2c0 80ac 	blt.w	8022fe8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8022e90:	f11e 0e01 	adds.w	lr, lr, #1
 8022e94:	f100 809f 	bmi.w	8022fd6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 8022e98:	4571      	cmp	r1, lr
 8022e9a:	f2c0 809c 	blt.w	8022fd6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 8022e9e:	3301      	adds	r3, #1
 8022ea0:	f100 8099 	bmi.w	8022fd6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 8022ea4:	429a      	cmp	r2, r3
 8022ea6:	f2c0 8096 	blt.w	8022fd6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 8022eaa:	46c8      	mov	r8, r9
 8022eac:	f9bd a018 	ldrsh.w	sl, [sp, #24]
 8022eb0:	9509      	str	r5, [sp, #36]	; 0x24
 8022eb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022eb4:	2b00      	cmp	r3, #0
 8022eb6:	f340 80b5 	ble.w	8023024 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8022eba:	f3c4 3303 	ubfx	r3, r4, #12, #4
 8022ebe:	1430      	asrs	r0, r6, #16
 8022ec0:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8022ec4:	9308      	str	r3, [sp, #32]
 8022ec6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022ec8:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8022ecc:	1423      	asrs	r3, r4, #16
 8022ece:	f100 813f 	bmi.w	8023150 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8022ed2:	f10c 3bff 	add.w	fp, ip, #4294967295
 8022ed6:	455b      	cmp	r3, fp
 8022ed8:	f280 813a 	bge.w	8023150 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8022edc:	2800      	cmp	r0, #0
 8022ede:	f2c0 8137 	blt.w	8023150 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8022ee2:	f10e 3bff 	add.w	fp, lr, #4294967295
 8022ee6:	4558      	cmp	r0, fp
 8022ee8:	f280 8132 	bge.w	8023150 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8022eec:	9a06      	ldr	r2, [sp, #24]
 8022eee:	fb00 3302 	mla	r3, r0, r2, r3
 8022ef2:	0858      	lsrs	r0, r3, #1
 8022ef4:	07da      	lsls	r2, r3, #31
 8022ef6:	9a08      	ldr	r2, [sp, #32]
 8022ef8:	f817 c000 	ldrb.w	ip, [r7, r0]
 8022efc:	bf54      	ite	pl
 8022efe:	f00c 0c0f 	andpl.w	ip, ip, #15
 8022f02:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8022f06:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8022f0a:	fa5f fc8c 	uxtb.w	ip, ip
 8022f0e:	2a00      	cmp	r2, #0
 8022f10:	f000 80cc 	beq.w	80230ac <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8022f14:	1c58      	adds	r0, r3, #1
 8022f16:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8022f1a:	07c0      	lsls	r0, r0, #31
 8022f1c:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8022f20:	bf54      	ite	pl
 8022f22:	f00e 0e0f 	andpl.w	lr, lr, #15
 8022f26:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8022f2a:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8022f2e:	fa5f fe8e 	uxtb.w	lr, lr
 8022f32:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 8022f36:	b1b9      	cbz	r1, 8022f68 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8022f38:	4453      	add	r3, sl
 8022f3a:	0858      	lsrs	r0, r3, #1
 8022f3c:	07da      	lsls	r2, r3, #31
 8022f3e:	5c38      	ldrb	r0, [r7, r0]
 8022f40:	bf54      	ite	pl
 8022f42:	f000 000f 	andpl.w	r0, r0, #15
 8022f46:	1100      	asrmi	r0, r0, #4
 8022f48:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8022f4c:	b2c0      	uxtb	r0, r0
 8022f4e:	900a      	str	r0, [sp, #40]	; 0x28
 8022f50:	1c58      	adds	r0, r3, #1
 8022f52:	0843      	lsrs	r3, r0, #1
 8022f54:	07c2      	lsls	r2, r0, #31
 8022f56:	5cfb      	ldrb	r3, [r7, r3]
 8022f58:	bf54      	ite	pl
 8022f5a:	f003 030f 	andpl.w	r3, r3, #15
 8022f5e:	111b      	asrmi	r3, r3, #4
 8022f60:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8022f64:	b2db      	uxtb	r3, r3
 8022f66:	930e      	str	r3, [sp, #56]	; 0x38
 8022f68:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8022f6c:	b289      	uxth	r1, r1
 8022f6e:	fb02 f301 	mul.w	r3, r2, r1
 8022f72:	0112      	lsls	r2, r2, #4
 8022f74:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8022f78:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 8022f7c:	1ad2      	subs	r2, r2, r3
 8022f7e:	b289      	uxth	r1, r1
 8022f80:	b292      	uxth	r2, r2
 8022f82:	1a40      	subs	r0, r0, r1
 8022f84:	fa1f fe80 	uxth.w	lr, r0
 8022f88:	980d      	ldr	r0, [sp, #52]	; 0x34
 8022f8a:	4342      	muls	r2, r0
 8022f8c:	fb0c 2c0e 	mla	ip, ip, lr, r2
 8022f90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022f92:	fb01 c102 	mla	r1, r1, r2, ip
 8022f96:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022f98:	fb03 1302 	mla	r3, r3, r2, r1
 8022f9c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022fa0:	2bff      	cmp	r3, #255	; 0xff
 8022fa2:	f040 8094 	bne.w	80230ce <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ae>
 8022fa6:	4bbf      	ldr	r3, [pc, #764]	; (80232a4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 8022fa8:	681a      	ldr	r2, [r3, #0]
 8022faa:	4bbf      	ldr	r3, [pc, #764]	; (80232a8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>)
 8022fac:	0951      	lsrs	r1, r2, #5
 8022fae:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 8022fb2:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8022fb6:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8022fba:	430b      	orrs	r3, r1
 8022fbc:	4313      	orrs	r3, r2
 8022fbe:	f8a8 3000 	strh.w	r3, [r8]
 8022fc2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8022fc4:	f108 0802 	add.w	r8, r8, #2
 8022fc8:	441c      	add	r4, r3
 8022fca:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022fcc:	441e      	add	r6, r3
 8022fce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022fd0:	3b01      	subs	r3, #1
 8022fd2:	9309      	str	r3, [sp, #36]	; 0x24
 8022fd4:	e76d      	b.n	8022eb2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8022fd6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8022fd8:	3d01      	subs	r5, #1
 8022fda:	f109 0902 	add.w	r9, r9, #2
 8022fde:	441c      	add	r4, r3
 8022fe0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022fe2:	441e      	add	r6, r3
 8022fe4:	e745      	b.n	8022e72 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8022fe6:	d021      	beq.n	802302c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8022fe8:	1e6b      	subs	r3, r5, #1
 8022fea:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8022fec:	fb00 4003 	mla	r0, r0, r3, r4
 8022ff0:	1400      	asrs	r0, r0, #16
 8022ff2:	f53f af5a 	bmi.w	8022eaa <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8022ff6:	3901      	subs	r1, #1
 8022ff8:	4288      	cmp	r0, r1
 8022ffa:	f6bf af56 	bge.w	8022eaa <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8022ffe:	9920      	ldr	r1, [sp, #128]	; 0x80
 8023000:	fb01 6303 	mla	r3, r1, r3, r6
 8023004:	141b      	asrs	r3, r3, #16
 8023006:	f53f af50 	bmi.w	8022eaa <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802300a:	3a01      	subs	r2, #1
 802300c:	4293      	cmp	r3, r2
 802300e:	f6bf af4c 	bge.w	8022eaa <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8023012:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8023016:	46a8      	mov	r8, r5
 8023018:	46ce      	mov	lr, r9
 802301a:	9308      	str	r3, [sp, #32]
 802301c:	f1b8 0f00 	cmp.w	r8, #0
 8023020:	f300 80b6 	bgt.w	8023190 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8023024:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8023028:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 802302c:	9b07      	ldr	r3, [sp, #28]
 802302e:	2b00      	cmp	r3, #0
 8023030:	f340 817e 	ble.w	8023330 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 8023034:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023038:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802303a:	ee30 0a04 	vadd.f32	s0, s0, s8
 802303e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8023042:	eef0 6a62 	vmov.f32	s13, s5
 8023046:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802304a:	ee31 1a05 	vadd.f32	s2, s2, s10
 802304e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023052:	ee16 4a90 	vmov	r4, s13
 8023056:	eef0 6a43 	vmov.f32	s13, s6
 802305a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802305e:	ee16 6a90 	vmov	r6, s13
 8023062:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8023066:	ee61 7a27 	vmul.f32	s15, s2, s15
 802306a:	ee77 2a62 	vsub.f32	s5, s14, s5
 802306e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8023072:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8023076:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802307a:	ee12 2a90 	vmov	r2, s5
 802307e:	eef0 2a47 	vmov.f32	s5, s14
 8023082:	fb92 f3f3 	sdiv	r3, r2, r3
 8023086:	ee13 2a10 	vmov	r2, s6
 802308a:	931f      	str	r3, [sp, #124]	; 0x7c
 802308c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802308e:	eeb0 3a67 	vmov.f32	s6, s15
 8023092:	fb92 f3f3 	sdiv	r3, r2, r3
 8023096:	9320      	str	r3, [sp, #128]	; 0x80
 8023098:	9b07      	ldr	r3, [sp, #28]
 802309a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802309c:	3b01      	subs	r3, #1
 802309e:	9307      	str	r3, [sp, #28]
 80230a0:	bf08      	it	eq
 80230a2:	4615      	moveq	r5, r2
 80230a4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80230a6:	bf18      	it	ne
 80230a8:	461d      	movne	r5, r3
 80230aa:	e6d3      	b.n	8022e54 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 80230ac:	2900      	cmp	r1, #0
 80230ae:	f43f af5b 	beq.w	8022f68 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 80230b2:	eb0a 0003 	add.w	r0, sl, r3
 80230b6:	0843      	lsrs	r3, r0, #1
 80230b8:	07c0      	lsls	r0, r0, #31
 80230ba:	5cfb      	ldrb	r3, [r7, r3]
 80230bc:	bf54      	ite	pl
 80230be:	f003 030f 	andpl.w	r3, r3, #15
 80230c2:	111b      	asrmi	r3, r3, #4
 80230c4:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80230c8:	b2db      	uxtb	r3, r3
 80230ca:	930a      	str	r3, [sp, #40]	; 0x28
 80230cc:	e74c      	b.n	8022f68 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 80230ce:	2b00      	cmp	r3, #0
 80230d0:	f43f af77 	beq.w	8022fc2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 80230d4:	4a73      	ldr	r2, [pc, #460]	; (80232a4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 80230d6:	fa1f fe83 	uxth.w	lr, r3
 80230da:	f8b8 c000 	ldrh.w	ip, [r8]
 80230de:	43db      	mvns	r3, r3
 80230e0:	6810      	ldr	r0, [r2, #0]
 80230e2:	ea4f 212c 	mov.w	r1, ip, asr #8
 80230e6:	f3c0 4207 	ubfx	r2, r0, #16, #8
 80230ea:	b2db      	uxtb	r3, r3
 80230ec:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 80230f0:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 80230f4:	fb12 f20e 	smulbb	r2, r2, lr
 80230f8:	b2c0      	uxtb	r0, r0
 80230fa:	fb1b fb0e 	smulbb	fp, fp, lr
 80230fe:	fb01 2103 	mla	r1, r1, r3, r2
 8023102:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8023106:	fb10 fe0e 	smulbb	lr, r0, lr
 802310a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 802310e:	b289      	uxth	r1, r1
 8023110:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8023114:	fa5f fc8c 	uxtb.w	ip, ip
 8023118:	fb02 b203 	mla	r2, r2, r3, fp
 802311c:	1c48      	adds	r0, r1, #1
 802311e:	fb0c e303 	mla	r3, ip, r3, lr
 8023122:	b292      	uxth	r2, r2
 8023124:	b29b      	uxth	r3, r3
 8023126:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 802312a:	f102 0b01 	add.w	fp, r2, #1
 802312e:	f401 4078 	and.w	r0, r1, #63488	; 0xf800
 8023132:	1c59      	adds	r1, r3, #1
 8023134:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 8023138:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 802313c:	0952      	lsrs	r2, r2, #5
 802313e:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 8023142:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8023146:	4301      	orrs	r1, r0
 8023148:	4311      	orrs	r1, r2
 802314a:	f8a8 1000 	strh.w	r1, [r8]
 802314e:	e738      	b.n	8022fc2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8023150:	f113 0b01 	adds.w	fp, r3, #1
 8023154:	f53f af35 	bmi.w	8022fc2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8023158:	45dc      	cmp	ip, fp
 802315a:	f6ff af32 	blt.w	8022fc2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802315e:	f110 0b01 	adds.w	fp, r0, #1
 8023162:	f53f af2e 	bmi.w	8022fc2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8023166:	45de      	cmp	lr, fp
 8023168:	f6ff af2b 	blt.w	8022fc2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802316c:	9302      	str	r3, [sp, #8]
 802316e:	fa0f f38e 	sxth.w	r3, lr
 8023172:	9a08      	ldr	r2, [sp, #32]
 8023174:	9301      	str	r3, [sp, #4]
 8023176:	fa0f f38c 	sxth.w	r3, ip
 802317a:	9105      	str	r1, [sp, #20]
 802317c:	4641      	mov	r1, r8
 802317e:	9300      	str	r3, [sp, #0]
 8023180:	4653      	mov	r3, sl
 8023182:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8023186:	463a      	mov	r2, r7
 8023188:	9811      	ldr	r0, [sp, #68]	; 0x44
 802318a:	f7ff fd73 	bl	8022c74 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>
 802318e:	e718      	b.n	8022fc2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8023190:	1422      	asrs	r2, r4, #16
 8023192:	9906      	ldr	r1, [sp, #24]
 8023194:	1433      	asrs	r3, r6, #16
 8023196:	f3c4 3003 	ubfx	r0, r4, #12, #4
 802319a:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 802319e:	fb01 2303 	mla	r3, r1, r3, r2
 80231a2:	085a      	lsrs	r2, r3, #1
 80231a4:	07d9      	lsls	r1, r3, #31
 80231a6:	5cba      	ldrb	r2, [r7, r2]
 80231a8:	bf54      	ite	pl
 80231aa:	f002 020f 	andpl.w	r2, r2, #15
 80231ae:	1112      	asrmi	r2, r2, #4
 80231b0:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80231b4:	b2d2      	uxtb	r2, r2
 80231b6:	2800      	cmp	r0, #0
 80231b8:	d063      	beq.n	8023282 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x462>
 80231ba:	f103 0a01 	add.w	sl, r3, #1
 80231be:	ea4f 015a 	mov.w	r1, sl, lsr #1
 80231c2:	f01a 0f01 	tst.w	sl, #1
 80231c6:	5c79      	ldrb	r1, [r7, r1]
 80231c8:	bf0c      	ite	eq
 80231ca:	f001 010f 	andeq.w	r1, r1, #15
 80231ce:	1109      	asrne	r1, r1, #4
 80231d0:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80231d4:	b2c9      	uxtb	r1, r1
 80231d6:	910f      	str	r1, [sp, #60]	; 0x3c
 80231d8:	f1bc 0f00 	cmp.w	ip, #0
 80231dc:	d01a      	beq.n	8023214 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 80231de:	9908      	ldr	r1, [sp, #32]
 80231e0:	440b      	add	r3, r1
 80231e2:	0859      	lsrs	r1, r3, #1
 80231e4:	f013 0f01 	tst.w	r3, #1
 80231e8:	f103 0301 	add.w	r3, r3, #1
 80231ec:	5c79      	ldrb	r1, [r7, r1]
 80231ee:	bf0c      	ite	eq
 80231f0:	f001 010f 	andeq.w	r1, r1, #15
 80231f4:	1109      	asrne	r1, r1, #4
 80231f6:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80231fa:	b2c9      	uxtb	r1, r1
 80231fc:	910b      	str	r1, [sp, #44]	; 0x2c
 80231fe:	0859      	lsrs	r1, r3, #1
 8023200:	07db      	lsls	r3, r3, #31
 8023202:	5c79      	ldrb	r1, [r7, r1]
 8023204:	bf54      	ite	pl
 8023206:	f001 010f 	andpl.w	r1, r1, #15
 802320a:	1109      	asrmi	r1, r1, #4
 802320c:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8023210:	b2c9      	uxtb	r1, r1
 8023212:	9110      	str	r1, [sp, #64]	; 0x40
 8023214:	b280      	uxth	r0, r0
 8023216:	fa1f fc8c 	uxth.w	ip, ip
 802321a:	fb00 f30c 	mul.w	r3, r0, ip
 802321e:	0100      	lsls	r0, r0, #4
 8023220:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 8023224:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 8023228:	1ac0      	subs	r0, r0, r3
 802322a:	fa1f fc8c 	uxth.w	ip, ip
 802322e:	b280      	uxth	r0, r0
 8023230:	eba1 010c 	sub.w	r1, r1, ip
 8023234:	fa1f fa81 	uxth.w	sl, r1
 8023238:	990f      	ldr	r1, [sp, #60]	; 0x3c
 802323a:	4348      	muls	r0, r1
 802323c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 802323e:	fb02 020a 	mla	r2, r2, sl, r0
 8023242:	fb0c 2c01 	mla	ip, ip, r1, r2
 8023246:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8023248:	fb03 c302 	mla	r3, r3, r2, ip
 802324c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8023250:	2bff      	cmp	r3, #255	; 0xff
 8023252:	d12b      	bne.n	80232ac <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 8023254:	4b13      	ldr	r3, [pc, #76]	; (80232a4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 8023256:	681a      	ldr	r2, [r3, #0]
 8023258:	4b13      	ldr	r3, [pc, #76]	; (80232a8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>)
 802325a:	0951      	lsrs	r1, r2, #5
 802325c:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 8023260:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8023264:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8023268:	430b      	orrs	r3, r1
 802326a:	4313      	orrs	r3, r2
 802326c:	f8ae 3000 	strh.w	r3, [lr]
 8023270:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8023272:	f10e 0e02 	add.w	lr, lr, #2
 8023276:	f108 38ff 	add.w	r8, r8, #4294967295
 802327a:	441c      	add	r4, r3
 802327c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802327e:	441e      	add	r6, r3
 8023280:	e6cc      	b.n	802301c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 8023282:	f1bc 0f00 	cmp.w	ip, #0
 8023286:	d0c5      	beq.n	8023214 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 8023288:	9908      	ldr	r1, [sp, #32]
 802328a:	440b      	add	r3, r1
 802328c:	0859      	lsrs	r1, r3, #1
 802328e:	07db      	lsls	r3, r3, #31
 8023290:	5c79      	ldrb	r1, [r7, r1]
 8023292:	bf54      	ite	pl
 8023294:	f001 010f 	andpl.w	r1, r1, #15
 8023298:	1109      	asrmi	r1, r1, #4
 802329a:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802329e:	b2c9      	uxtb	r1, r1
 80232a0:	910b      	str	r1, [sp, #44]	; 0x2c
 80232a2:	e7b7      	b.n	8023214 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 80232a4:	200243e4 	.word	0x200243e4
 80232a8:	fffff800 	.word	0xfffff800
 80232ac:	2b00      	cmp	r3, #0
 80232ae:	d0df      	beq.n	8023270 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x450>
 80232b0:	4a21      	ldr	r2, [pc, #132]	; (8023338 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>)
 80232b2:	fa1f fa83 	uxth.w	sl, r3
 80232b6:	f8be c000 	ldrh.w	ip, [lr]
 80232ba:	43db      	mvns	r3, r3
 80232bc:	6810      	ldr	r0, [r2, #0]
 80232be:	ea4f 212c 	mov.w	r1, ip, asr #8
 80232c2:	f3c0 4207 	ubfx	r2, r0, #16, #8
 80232c6:	b2db      	uxtb	r3, r3
 80232c8:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 80232cc:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 80232d0:	fb12 f20a 	smulbb	r2, r2, sl
 80232d4:	b2c0      	uxtb	r0, r0
 80232d6:	fb1b fb0a 	smulbb	fp, fp, sl
 80232da:	fb01 2103 	mla	r1, r1, r3, r2
 80232de:	ea4f 02ec 	mov.w	r2, ip, asr #3
 80232e2:	fb10 f00a 	smulbb	r0, r0, sl
 80232e6:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80232ea:	b289      	uxth	r1, r1
 80232ec:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80232f0:	fa5f fc8c 	uxtb.w	ip, ip
 80232f4:	fb02 b203 	mla	r2, r2, r3, fp
 80232f8:	fb0c 0003 	mla	r0, ip, r3, r0
 80232fc:	1c4b      	adds	r3, r1, #1
 80232fe:	b292      	uxth	r2, r2
 8023300:	b280      	uxth	r0, r0
 8023302:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8023306:	f100 0b01 	add.w	fp, r0, #1
 802330a:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 802330e:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
 8023312:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 8023316:	ea4b 0101 	orr.w	r1, fp, r1
 802331a:	f102 0b01 	add.w	fp, r2, #1
 802331e:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 8023322:	0952      	lsrs	r2, r2, #5
 8023324:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8023328:	4311      	orrs	r1, r2
 802332a:	f8ae 1000 	strh.w	r1, [lr]
 802332e:	e79f      	b.n	8023270 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x450>
 8023330:	b013      	add	sp, #76	; 0x4c
 8023332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023336:	bf00      	nop
 8023338:	200243e4 	.word	0x200243e4

0802333c <CRC_Lock>:
 802333c:	4a20      	ldr	r2, [pc, #128]	; (80233c0 <CRC_Lock+0x84>)
 802333e:	b530      	push	{r4, r5, lr}
 8023340:	6813      	ldr	r3, [r2, #0]
 8023342:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 8023346:	f24c 2540 	movw	r5, #49728	; 0xc240
 802334a:	f023 0301 	bic.w	r3, r3, #1
 802334e:	6013      	str	r3, [r2, #0]
 8023350:	4b1c      	ldr	r3, [pc, #112]	; (80233c4 <CRC_Lock+0x88>)
 8023352:	681a      	ldr	r2, [r3, #0]
 8023354:	4022      	ands	r2, r4
 8023356:	42aa      	cmp	r2, r5
 8023358:	d005      	beq.n	8023366 <CRC_Lock+0x2a>
 802335a:	681b      	ldr	r3, [r3, #0]
 802335c:	f24c 2270 	movw	r2, #49776	; 0xc270
 8023360:	4023      	ands	r3, r4
 8023362:	4293      	cmp	r3, r2
 8023364:	d124      	bne.n	80233b0 <CRC_Lock+0x74>
 8023366:	4b18      	ldr	r3, [pc, #96]	; (80233c8 <CRC_Lock+0x8c>)
 8023368:	681b      	ldr	r3, [r3, #0]
 802336a:	bb0b      	cbnz	r3, 80233b0 <CRC_Lock+0x74>
 802336c:	4b17      	ldr	r3, [pc, #92]	; (80233cc <CRC_Lock+0x90>)
 802336e:	681a      	ldr	r2, [r3, #0]
 8023370:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8023374:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8023378:	d00d      	beq.n	8023396 <CRC_Lock+0x5a>
 802337a:	681a      	ldr	r2, [r3, #0]
 802337c:	f240 4483 	movw	r4, #1155	; 0x483
 8023380:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8023384:	42a2      	cmp	r2, r4
 8023386:	d006      	beq.n	8023396 <CRC_Lock+0x5a>
 8023388:	681b      	ldr	r3, [r3, #0]
 802338a:	f240 4285 	movw	r2, #1157	; 0x485
 802338e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8023392:	4293      	cmp	r3, r2
 8023394:	d10c      	bne.n	80233b0 <CRC_Lock+0x74>
 8023396:	4b0e      	ldr	r3, [pc, #56]	; (80233d0 <CRC_Lock+0x94>)
 8023398:	2201      	movs	r2, #1
 802339a:	601a      	str	r2, [r3, #0]
 802339c:	681a      	ldr	r2, [r3, #0]
 802339e:	2a00      	cmp	r2, #0
 80233a0:	d1fc      	bne.n	802339c <CRC_Lock+0x60>
 80233a2:	4b0c      	ldr	r3, [pc, #48]	; (80233d4 <CRC_Lock+0x98>)
 80233a4:	6018      	str	r0, [r3, #0]
 80233a6:	6818      	ldr	r0, [r3, #0]
 80233a8:	1a43      	subs	r3, r0, r1
 80233aa:	4258      	negs	r0, r3
 80233ac:	4158      	adcs	r0, r3
 80233ae:	bd30      	pop	{r4, r5, pc}
 80233b0:	4b09      	ldr	r3, [pc, #36]	; (80233d8 <CRC_Lock+0x9c>)
 80233b2:	2201      	movs	r2, #1
 80233b4:	601a      	str	r2, [r3, #0]
 80233b6:	681a      	ldr	r2, [r3, #0]
 80233b8:	2a00      	cmp	r2, #0
 80233ba:	d1fc      	bne.n	80233b6 <CRC_Lock+0x7a>
 80233bc:	4b07      	ldr	r3, [pc, #28]	; (80233dc <CRC_Lock+0xa0>)
 80233be:	e7f1      	b.n	80233a4 <CRC_Lock+0x68>
 80233c0:	e0002000 	.word	0xe0002000
 80233c4:	e000ed00 	.word	0xe000ed00
 80233c8:	e0042000 	.word	0xe0042000
 80233cc:	5c001000 	.word	0x5c001000
 80233d0:	58024c08 	.word	0x58024c08
 80233d4:	58024c00 	.word	0x58024c00
 80233d8:	40023008 	.word	0x40023008
 80233dc:	40023000 	.word	0x40023000

080233e0 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 80233e0:	6101      	str	r1, [r0, #16]
 80233e2:	4770      	bx	lr

080233e4 <_ZN8touchgfx8Gestures4tickEv>:
 80233e4:	7b83      	ldrb	r3, [r0, #14]
 80233e6:	b14b      	cbz	r3, 80233fc <_ZN8touchgfx8Gestures4tickEv+0x18>
 80233e8:	8903      	ldrh	r3, [r0, #8]
 80233ea:	3301      	adds	r3, #1
 80233ec:	b29b      	uxth	r3, r3
 80233ee:	2b07      	cmp	r3, #7
 80233f0:	8103      	strh	r3, [r0, #8]
 80233f2:	bf81      	itttt	hi
 80233f4:	2300      	movhi	r3, #0
 80233f6:	8143      	strhhi	r3, [r0, #10]
 80233f8:	8183      	strhhi	r3, [r0, #12]
 80233fa:	7383      	strbhi	r3, [r0, #14]
 80233fc:	4770      	bx	lr
	...

08023400 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8023400:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8023404:	4698      	mov	r8, r3
 8023406:	8883      	ldrh	r3, [r0, #4]
 8023408:	4604      	mov	r4, r0
 802340a:	4617      	mov	r7, r2
 802340c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8023410:	eba8 0303 	sub.w	r3, r8, r3
 8023414:	4a19      	ldr	r2, [pc, #100]	; (802347c <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 8023416:	460e      	mov	r6, r1
 8023418:	b21b      	sxth	r3, r3
 802341a:	88c1      	ldrh	r1, [r0, #6]
 802341c:	9200      	str	r2, [sp, #0]
 802341e:	2000      	movs	r0, #0
 8023420:	2b00      	cmp	r3, #0
 8023422:	8aa2      	ldrh	r2, [r4, #20]
 8023424:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 8023428:	bfb8      	it	lt
 802342a:	425b      	neglt	r3, r3
 802342c:	f88d 0004 	strb.w	r0, [sp, #4]
 8023430:	f8ad 1008 	strh.w	r1, [sp, #8]
 8023434:	b21b      	sxth	r3, r3
 8023436:	f8ad 800a 	strh.w	r8, [sp, #10]
 802343a:	f8ad 500c 	strh.w	r5, [sp, #12]
 802343e:	4293      	cmp	r3, r2
 8023440:	dc07      	bgt.n	8023452 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 8023442:	1a69      	subs	r1, r5, r1
 8023444:	b209      	sxth	r1, r1
 8023446:	2900      	cmp	r1, #0
 8023448:	bfb8      	it	lt
 802344a:	4249      	neglt	r1, r1
 802344c:	b209      	sxth	r1, r1
 802344e:	428a      	cmp	r2, r1
 8023450:	da10      	bge.n	8023474 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 8023452:	6920      	ldr	r0, [r4, #16]
 8023454:	4669      	mov	r1, sp
 8023456:	eba8 0606 	sub.w	r6, r8, r6
 802345a:	1bef      	subs	r7, r5, r7
 802345c:	6803      	ldr	r3, [r0, #0]
 802345e:	685b      	ldr	r3, [r3, #4]
 8023460:	4798      	blx	r3
 8023462:	2300      	movs	r3, #0
 8023464:	2001      	movs	r0, #1
 8023466:	8166      	strh	r6, [r4, #10]
 8023468:	8123      	strh	r3, [r4, #8]
 802346a:	81a7      	strh	r7, [r4, #12]
 802346c:	f8a4 8004 	strh.w	r8, [r4, #4]
 8023470:	80e5      	strh	r5, [r4, #6]
 8023472:	73a0      	strb	r0, [r4, #14]
 8023474:	b004      	add	sp, #16
 8023476:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802347a:	bf00      	nop
 802347c:	08027c50 	.word	0x08027c50

08023480 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8023480:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023482:	461e      	mov	r6, r3
 8023484:	1e4b      	subs	r3, r1, #1
 8023486:	b085      	sub	sp, #20
 8023488:	4604      	mov	r4, r0
 802348a:	2b01      	cmp	r3, #1
 802348c:	460d      	mov	r5, r1
 802348e:	4617      	mov	r7, r2
 8023490:	d84b      	bhi.n	802352a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 8023492:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8023496:	1cd3      	adds	r3, r2, #3
 8023498:	b29b      	uxth	r3, r3
 802349a:	2b06      	cmp	r3, #6
 802349c:	d916      	bls.n	80234cc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 802349e:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 8023540 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 80234a2:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80234a6:	f8cd c004 	str.w	ip, [sp, #4]
 80234aa:	f04f 0c00 	mov.w	ip, #0
 80234ae:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80234b2:	6900      	ldr	r0, [r0, #16]
 80234b4:	f8ad 100c 	strh.w	r1, [sp, #12]
 80234b8:	a901      	add	r1, sp, #4
 80234ba:	f88d c008 	strb.w	ip, [sp, #8]
 80234be:	f8ad 200a 	strh.w	r2, [sp, #10]
 80234c2:	f8ad 300e 	strh.w	r3, [sp, #14]
 80234c6:	6803      	ldr	r3, [r0, #0]
 80234c8:	689b      	ldr	r3, [r3, #8]
 80234ca:	4798      	blx	r3
 80234cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80234d0:	1cd3      	adds	r3, r2, #3
 80234d2:	b29b      	uxth	r3, r3
 80234d4:	2b06      	cmp	r3, #6
 80234d6:	d916      	bls.n	8023506 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80234d8:	f8df c064 	ldr.w	ip, [pc, #100]	; 8023540 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 80234dc:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80234e0:	f8cd c004 	str.w	ip, [sp, #4]
 80234e4:	f04f 0c01 	mov.w	ip, #1
 80234e8:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80234ec:	6920      	ldr	r0, [r4, #16]
 80234ee:	f8ad 100c 	strh.w	r1, [sp, #12]
 80234f2:	a901      	add	r1, sp, #4
 80234f4:	f88d c008 	strb.w	ip, [sp, #8]
 80234f8:	f8ad 200a 	strh.w	r2, [sp, #10]
 80234fc:	f8ad 300e 	strh.w	r3, [sp, #14]
 8023500:	6803      	ldr	r3, [r0, #0]
 8023502:	689b      	ldr	r3, [r3, #8]
 8023504:	4798      	blx	r3
 8023506:	4b0d      	ldr	r3, [pc, #52]	; (802353c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 8023508:	a901      	add	r1, sp, #4
 802350a:	6920      	ldr	r0, [r4, #16]
 802350c:	9301      	str	r3, [sp, #4]
 802350e:	2300      	movs	r3, #0
 8023510:	f88d 5008 	strb.w	r5, [sp, #8]
 8023514:	f8ad 700a 	strh.w	r7, [sp, #10]
 8023518:	f8ad 600c 	strh.w	r6, [sp, #12]
 802351c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8023520:	6803      	ldr	r3, [r0, #0]
 8023522:	681b      	ldr	r3, [r3, #0]
 8023524:	4798      	blx	r3
 8023526:	b005      	add	sp, #20
 8023528:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802352a:	2900      	cmp	r1, #0
 802352c:	d1eb      	bne.n	8023506 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802352e:	80a2      	strh	r2, [r4, #4]
 8023530:	80c6      	strh	r6, [r0, #6]
 8023532:	60a1      	str	r1, [r4, #8]
 8023534:	81a1      	strh	r1, [r4, #12]
 8023536:	73a1      	strb	r1, [r4, #14]
 8023538:	e7e5      	b.n	8023506 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802353a:	bf00      	nop
 802353c:	08027c3c 	.word	0x08027c3c
 8023540:	08027c64 	.word	0x08027c64

08023544 <__aeabi_atexit>:
 8023544:	460b      	mov	r3, r1
 8023546:	4601      	mov	r1, r0
 8023548:	4618      	mov	r0, r3
 802354a:	f000 b853 	b.w	80235f4 <__cxa_atexit>

0802354e <_ZdlPvj>:
 802354e:	f000 b812 	b.w	8023576 <_ZdlPv>

08023552 <__cxa_guard_acquire>:
 8023552:	6803      	ldr	r3, [r0, #0]
 8023554:	07db      	lsls	r3, r3, #31
 8023556:	d406      	bmi.n	8023566 <__cxa_guard_acquire+0x14>
 8023558:	7843      	ldrb	r3, [r0, #1]
 802355a:	b103      	cbz	r3, 802355e <__cxa_guard_acquire+0xc>
 802355c:	deff      	udf	#255	; 0xff
 802355e:	2301      	movs	r3, #1
 8023560:	7043      	strb	r3, [r0, #1]
 8023562:	4618      	mov	r0, r3
 8023564:	4770      	bx	lr
 8023566:	2000      	movs	r0, #0
 8023568:	4770      	bx	lr

0802356a <__cxa_guard_release>:
 802356a:	2301      	movs	r3, #1
 802356c:	6003      	str	r3, [r0, #0]
 802356e:	4770      	bx	lr

08023570 <__cxa_pure_virtual>:
 8023570:	b508      	push	{r3, lr}
 8023572:	f000 f80f 	bl	8023594 <_ZSt9terminatev>

08023576 <_ZdlPv>:
 8023576:	f000 b893 	b.w	80236a0 <free>

0802357a <_ZN10__cxxabiv111__terminateEPFvvE>:
 802357a:	b508      	push	{r3, lr}
 802357c:	4780      	blx	r0
 802357e:	f000 f80e 	bl	802359e <abort>
	...

08023584 <_ZSt13get_terminatev>:
 8023584:	4b02      	ldr	r3, [pc, #8]	; (8023590 <_ZSt13get_terminatev+0xc>)
 8023586:	6818      	ldr	r0, [r3, #0]
 8023588:	f3bf 8f5b 	dmb	ish
 802358c:	4770      	bx	lr
 802358e:	bf00      	nop
 8023590:	200000a4 	.word	0x200000a4

08023594 <_ZSt9terminatev>:
 8023594:	b508      	push	{r3, lr}
 8023596:	f7ff fff5 	bl	8023584 <_ZSt13get_terminatev>
 802359a:	f7ff ffee 	bl	802357a <_ZN10__cxxabiv111__terminateEPFvvE>

0802359e <abort>:
 802359e:	b508      	push	{r3, lr}
 80235a0:	2006      	movs	r0, #6
 80235a2:	f000 fca1 	bl	8023ee8 <raise>
 80235a6:	2001      	movs	r0, #1
 80235a8:	f7de f942 	bl	8001830 <_exit>

080235ac <__assert_func>:
 80235ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80235ae:	4614      	mov	r4, r2
 80235b0:	461a      	mov	r2, r3
 80235b2:	4b09      	ldr	r3, [pc, #36]	; (80235d8 <__assert_func+0x2c>)
 80235b4:	681b      	ldr	r3, [r3, #0]
 80235b6:	4605      	mov	r5, r0
 80235b8:	68d8      	ldr	r0, [r3, #12]
 80235ba:	b14c      	cbz	r4, 80235d0 <__assert_func+0x24>
 80235bc:	4b07      	ldr	r3, [pc, #28]	; (80235dc <__assert_func+0x30>)
 80235be:	9100      	str	r1, [sp, #0]
 80235c0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80235c4:	4906      	ldr	r1, [pc, #24]	; (80235e0 <__assert_func+0x34>)
 80235c6:	462b      	mov	r3, r5
 80235c8:	f000 f828 	bl	802361c <fiprintf>
 80235cc:	f7ff ffe7 	bl	802359e <abort>
 80235d0:	4b04      	ldr	r3, [pc, #16]	; (80235e4 <__assert_func+0x38>)
 80235d2:	461c      	mov	r4, r3
 80235d4:	e7f3      	b.n	80235be <__assert_func+0x12>
 80235d6:	bf00      	nop
 80235d8:	200000a8 	.word	0x200000a8
 80235dc:	08027f2c 	.word	0x08027f2c
 80235e0:	08027f39 	.word	0x08027f39
 80235e4:	08027f67 	.word	0x08027f67

080235e8 <atexit>:
 80235e8:	2300      	movs	r3, #0
 80235ea:	4601      	mov	r1, r0
 80235ec:	461a      	mov	r2, r3
 80235ee:	4618      	mov	r0, r3
 80235f0:	f000 bd6a 	b.w	80240c8 <__register_exitproc>

080235f4 <__cxa_atexit>:
 80235f4:	b510      	push	{r4, lr}
 80235f6:	4c05      	ldr	r4, [pc, #20]	; (802360c <__cxa_atexit+0x18>)
 80235f8:	4613      	mov	r3, r2
 80235fa:	b12c      	cbz	r4, 8023608 <__cxa_atexit+0x14>
 80235fc:	460a      	mov	r2, r1
 80235fe:	4601      	mov	r1, r0
 8023600:	2002      	movs	r0, #2
 8023602:	f000 fd61 	bl	80240c8 <__register_exitproc>
 8023606:	bd10      	pop	{r4, pc}
 8023608:	4620      	mov	r0, r4
 802360a:	e7fc      	b.n	8023606 <__cxa_atexit+0x12>
 802360c:	080240c9 	.word	0x080240c9

08023610 <__errno>:
 8023610:	4b01      	ldr	r3, [pc, #4]	; (8023618 <__errno+0x8>)
 8023612:	6818      	ldr	r0, [r3, #0]
 8023614:	4770      	bx	lr
 8023616:	bf00      	nop
 8023618:	200000a8 	.word	0x200000a8

0802361c <fiprintf>:
 802361c:	b40e      	push	{r1, r2, r3}
 802361e:	b503      	push	{r0, r1, lr}
 8023620:	4601      	mov	r1, r0
 8023622:	ab03      	add	r3, sp, #12
 8023624:	4805      	ldr	r0, [pc, #20]	; (802363c <fiprintf+0x20>)
 8023626:	f853 2b04 	ldr.w	r2, [r3], #4
 802362a:	6800      	ldr	r0, [r0, #0]
 802362c:	9301      	str	r3, [sp, #4]
 802362e:	f000 f95f 	bl	80238f0 <_vfiprintf_r>
 8023632:	b002      	add	sp, #8
 8023634:	f85d eb04 	ldr.w	lr, [sp], #4
 8023638:	b003      	add	sp, #12
 802363a:	4770      	bx	lr
 802363c:	200000a8 	.word	0x200000a8

08023640 <__libc_init_array>:
 8023640:	b570      	push	{r4, r5, r6, lr}
 8023642:	4d0d      	ldr	r5, [pc, #52]	; (8023678 <__libc_init_array+0x38>)
 8023644:	4c0d      	ldr	r4, [pc, #52]	; (802367c <__libc_init_array+0x3c>)
 8023646:	1b64      	subs	r4, r4, r5
 8023648:	10a4      	asrs	r4, r4, #2
 802364a:	2600      	movs	r6, #0
 802364c:	42a6      	cmp	r6, r4
 802364e:	d109      	bne.n	8023664 <__libc_init_array+0x24>
 8023650:	4d0b      	ldr	r5, [pc, #44]	; (8023680 <__libc_init_array+0x40>)
 8023652:	4c0c      	ldr	r4, [pc, #48]	; (8023684 <__libc_init_array+0x44>)
 8023654:	f001 f86e 	bl	8024734 <_init>
 8023658:	1b64      	subs	r4, r4, r5
 802365a:	10a4      	asrs	r4, r4, #2
 802365c:	2600      	movs	r6, #0
 802365e:	42a6      	cmp	r6, r4
 8023660:	d105      	bne.n	802366e <__libc_init_array+0x2e>
 8023662:	bd70      	pop	{r4, r5, r6, pc}
 8023664:	f855 3b04 	ldr.w	r3, [r5], #4
 8023668:	4798      	blx	r3
 802366a:	3601      	adds	r6, #1
 802366c:	e7ee      	b.n	802364c <__libc_init_array+0xc>
 802366e:	f855 3b04 	ldr.w	r3, [r5], #4
 8023672:	4798      	blx	r3
 8023674:	3601      	adds	r6, #1
 8023676:	e7f2      	b.n	802365e <__libc_init_array+0x1e>
 8023678:	08028024 	.word	0x08028024
 802367c:	08028024 	.word	0x08028024
 8023680:	08028024 	.word	0x08028024
 8023684:	0802803c 	.word	0x0802803c

08023688 <__retarget_lock_init_recursive>:
 8023688:	4770      	bx	lr

0802368a <__retarget_lock_acquire_recursive>:
 802368a:	4770      	bx	lr

0802368c <__retarget_lock_release>:
 802368c:	4770      	bx	lr

0802368e <__retarget_lock_release_recursive>:
 802368e:	4770      	bx	lr

08023690 <malloc>:
 8023690:	4b02      	ldr	r3, [pc, #8]	; (802369c <malloc+0xc>)
 8023692:	4601      	mov	r1, r0
 8023694:	6818      	ldr	r0, [r3, #0]
 8023696:	f000 b88d 	b.w	80237b4 <_malloc_r>
 802369a:	bf00      	nop
 802369c:	200000a8 	.word	0x200000a8

080236a0 <free>:
 80236a0:	4b02      	ldr	r3, [pc, #8]	; (80236ac <free+0xc>)
 80236a2:	4601      	mov	r1, r0
 80236a4:	6818      	ldr	r0, [r3, #0]
 80236a6:	f000 b819 	b.w	80236dc <_free_r>
 80236aa:	bf00      	nop
 80236ac:	200000a8 	.word	0x200000a8

080236b0 <memcpy>:
 80236b0:	440a      	add	r2, r1
 80236b2:	4291      	cmp	r1, r2
 80236b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80236b8:	d100      	bne.n	80236bc <memcpy+0xc>
 80236ba:	4770      	bx	lr
 80236bc:	b510      	push	{r4, lr}
 80236be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80236c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80236c6:	4291      	cmp	r1, r2
 80236c8:	d1f9      	bne.n	80236be <memcpy+0xe>
 80236ca:	bd10      	pop	{r4, pc}

080236cc <memset>:
 80236cc:	4402      	add	r2, r0
 80236ce:	4603      	mov	r3, r0
 80236d0:	4293      	cmp	r3, r2
 80236d2:	d100      	bne.n	80236d6 <memset+0xa>
 80236d4:	4770      	bx	lr
 80236d6:	f803 1b01 	strb.w	r1, [r3], #1
 80236da:	e7f9      	b.n	80236d0 <memset+0x4>

080236dc <_free_r>:
 80236dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80236de:	2900      	cmp	r1, #0
 80236e0:	d044      	beq.n	802376c <_free_r+0x90>
 80236e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80236e6:	9001      	str	r0, [sp, #4]
 80236e8:	2b00      	cmp	r3, #0
 80236ea:	f1a1 0404 	sub.w	r4, r1, #4
 80236ee:	bfb8      	it	lt
 80236f0:	18e4      	addlt	r4, r4, r3
 80236f2:	f000 ff67 	bl	80245c4 <__malloc_lock>
 80236f6:	4a1e      	ldr	r2, [pc, #120]	; (8023770 <_free_r+0x94>)
 80236f8:	9801      	ldr	r0, [sp, #4]
 80236fa:	6813      	ldr	r3, [r2, #0]
 80236fc:	b933      	cbnz	r3, 802370c <_free_r+0x30>
 80236fe:	6063      	str	r3, [r4, #4]
 8023700:	6014      	str	r4, [r2, #0]
 8023702:	b003      	add	sp, #12
 8023704:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8023708:	f000 bf62 	b.w	80245d0 <__malloc_unlock>
 802370c:	42a3      	cmp	r3, r4
 802370e:	d908      	bls.n	8023722 <_free_r+0x46>
 8023710:	6825      	ldr	r5, [r4, #0]
 8023712:	1961      	adds	r1, r4, r5
 8023714:	428b      	cmp	r3, r1
 8023716:	bf01      	itttt	eq
 8023718:	6819      	ldreq	r1, [r3, #0]
 802371a:	685b      	ldreq	r3, [r3, #4]
 802371c:	1949      	addeq	r1, r1, r5
 802371e:	6021      	streq	r1, [r4, #0]
 8023720:	e7ed      	b.n	80236fe <_free_r+0x22>
 8023722:	461a      	mov	r2, r3
 8023724:	685b      	ldr	r3, [r3, #4]
 8023726:	b10b      	cbz	r3, 802372c <_free_r+0x50>
 8023728:	42a3      	cmp	r3, r4
 802372a:	d9fa      	bls.n	8023722 <_free_r+0x46>
 802372c:	6811      	ldr	r1, [r2, #0]
 802372e:	1855      	adds	r5, r2, r1
 8023730:	42a5      	cmp	r5, r4
 8023732:	d10b      	bne.n	802374c <_free_r+0x70>
 8023734:	6824      	ldr	r4, [r4, #0]
 8023736:	4421      	add	r1, r4
 8023738:	1854      	adds	r4, r2, r1
 802373a:	42a3      	cmp	r3, r4
 802373c:	6011      	str	r1, [r2, #0]
 802373e:	d1e0      	bne.n	8023702 <_free_r+0x26>
 8023740:	681c      	ldr	r4, [r3, #0]
 8023742:	685b      	ldr	r3, [r3, #4]
 8023744:	6053      	str	r3, [r2, #4]
 8023746:	4421      	add	r1, r4
 8023748:	6011      	str	r1, [r2, #0]
 802374a:	e7da      	b.n	8023702 <_free_r+0x26>
 802374c:	d902      	bls.n	8023754 <_free_r+0x78>
 802374e:	230c      	movs	r3, #12
 8023750:	6003      	str	r3, [r0, #0]
 8023752:	e7d6      	b.n	8023702 <_free_r+0x26>
 8023754:	6825      	ldr	r5, [r4, #0]
 8023756:	1961      	adds	r1, r4, r5
 8023758:	428b      	cmp	r3, r1
 802375a:	bf04      	itt	eq
 802375c:	6819      	ldreq	r1, [r3, #0]
 802375e:	685b      	ldreq	r3, [r3, #4]
 8023760:	6063      	str	r3, [r4, #4]
 8023762:	bf04      	itt	eq
 8023764:	1949      	addeq	r1, r1, r5
 8023766:	6021      	streq	r1, [r4, #0]
 8023768:	6054      	str	r4, [r2, #4]
 802376a:	e7ca      	b.n	8023702 <_free_r+0x26>
 802376c:	b003      	add	sp, #12
 802376e:	bd30      	pop	{r4, r5, pc}
 8023770:	200244dc 	.word	0x200244dc

08023774 <sbrk_aligned>:
 8023774:	b570      	push	{r4, r5, r6, lr}
 8023776:	4e0e      	ldr	r6, [pc, #56]	; (80237b0 <sbrk_aligned+0x3c>)
 8023778:	460c      	mov	r4, r1
 802377a:	6831      	ldr	r1, [r6, #0]
 802377c:	4605      	mov	r5, r0
 802377e:	b911      	cbnz	r1, 8023786 <sbrk_aligned+0x12>
 8023780:	f000 fb7a 	bl	8023e78 <_sbrk_r>
 8023784:	6030      	str	r0, [r6, #0]
 8023786:	4621      	mov	r1, r4
 8023788:	4628      	mov	r0, r5
 802378a:	f000 fb75 	bl	8023e78 <_sbrk_r>
 802378e:	1c43      	adds	r3, r0, #1
 8023790:	d00a      	beq.n	80237a8 <sbrk_aligned+0x34>
 8023792:	1cc4      	adds	r4, r0, #3
 8023794:	f024 0403 	bic.w	r4, r4, #3
 8023798:	42a0      	cmp	r0, r4
 802379a:	d007      	beq.n	80237ac <sbrk_aligned+0x38>
 802379c:	1a21      	subs	r1, r4, r0
 802379e:	4628      	mov	r0, r5
 80237a0:	f000 fb6a 	bl	8023e78 <_sbrk_r>
 80237a4:	3001      	adds	r0, #1
 80237a6:	d101      	bne.n	80237ac <sbrk_aligned+0x38>
 80237a8:	f04f 34ff 	mov.w	r4, #4294967295
 80237ac:	4620      	mov	r0, r4
 80237ae:	bd70      	pop	{r4, r5, r6, pc}
 80237b0:	200244e0 	.word	0x200244e0

080237b4 <_malloc_r>:
 80237b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80237b8:	1ccd      	adds	r5, r1, #3
 80237ba:	f025 0503 	bic.w	r5, r5, #3
 80237be:	3508      	adds	r5, #8
 80237c0:	2d0c      	cmp	r5, #12
 80237c2:	bf38      	it	cc
 80237c4:	250c      	movcc	r5, #12
 80237c6:	2d00      	cmp	r5, #0
 80237c8:	4607      	mov	r7, r0
 80237ca:	db01      	blt.n	80237d0 <_malloc_r+0x1c>
 80237cc:	42a9      	cmp	r1, r5
 80237ce:	d905      	bls.n	80237dc <_malloc_r+0x28>
 80237d0:	230c      	movs	r3, #12
 80237d2:	603b      	str	r3, [r7, #0]
 80237d4:	2600      	movs	r6, #0
 80237d6:	4630      	mov	r0, r6
 80237d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80237dc:	4e2e      	ldr	r6, [pc, #184]	; (8023898 <_malloc_r+0xe4>)
 80237de:	f000 fef1 	bl	80245c4 <__malloc_lock>
 80237e2:	6833      	ldr	r3, [r6, #0]
 80237e4:	461c      	mov	r4, r3
 80237e6:	bb34      	cbnz	r4, 8023836 <_malloc_r+0x82>
 80237e8:	4629      	mov	r1, r5
 80237ea:	4638      	mov	r0, r7
 80237ec:	f7ff ffc2 	bl	8023774 <sbrk_aligned>
 80237f0:	1c43      	adds	r3, r0, #1
 80237f2:	4604      	mov	r4, r0
 80237f4:	d14d      	bne.n	8023892 <_malloc_r+0xde>
 80237f6:	6834      	ldr	r4, [r6, #0]
 80237f8:	4626      	mov	r6, r4
 80237fa:	2e00      	cmp	r6, #0
 80237fc:	d140      	bne.n	8023880 <_malloc_r+0xcc>
 80237fe:	6823      	ldr	r3, [r4, #0]
 8023800:	4631      	mov	r1, r6
 8023802:	4638      	mov	r0, r7
 8023804:	eb04 0803 	add.w	r8, r4, r3
 8023808:	f000 fb36 	bl	8023e78 <_sbrk_r>
 802380c:	4580      	cmp	r8, r0
 802380e:	d13a      	bne.n	8023886 <_malloc_r+0xd2>
 8023810:	6821      	ldr	r1, [r4, #0]
 8023812:	3503      	adds	r5, #3
 8023814:	1a6d      	subs	r5, r5, r1
 8023816:	f025 0503 	bic.w	r5, r5, #3
 802381a:	3508      	adds	r5, #8
 802381c:	2d0c      	cmp	r5, #12
 802381e:	bf38      	it	cc
 8023820:	250c      	movcc	r5, #12
 8023822:	4629      	mov	r1, r5
 8023824:	4638      	mov	r0, r7
 8023826:	f7ff ffa5 	bl	8023774 <sbrk_aligned>
 802382a:	3001      	adds	r0, #1
 802382c:	d02b      	beq.n	8023886 <_malloc_r+0xd2>
 802382e:	6823      	ldr	r3, [r4, #0]
 8023830:	442b      	add	r3, r5
 8023832:	6023      	str	r3, [r4, #0]
 8023834:	e00e      	b.n	8023854 <_malloc_r+0xa0>
 8023836:	6822      	ldr	r2, [r4, #0]
 8023838:	1b52      	subs	r2, r2, r5
 802383a:	d41e      	bmi.n	802387a <_malloc_r+0xc6>
 802383c:	2a0b      	cmp	r2, #11
 802383e:	d916      	bls.n	802386e <_malloc_r+0xba>
 8023840:	1961      	adds	r1, r4, r5
 8023842:	42a3      	cmp	r3, r4
 8023844:	6025      	str	r5, [r4, #0]
 8023846:	bf18      	it	ne
 8023848:	6059      	strne	r1, [r3, #4]
 802384a:	6863      	ldr	r3, [r4, #4]
 802384c:	bf08      	it	eq
 802384e:	6031      	streq	r1, [r6, #0]
 8023850:	5162      	str	r2, [r4, r5]
 8023852:	604b      	str	r3, [r1, #4]
 8023854:	4638      	mov	r0, r7
 8023856:	f104 060b 	add.w	r6, r4, #11
 802385a:	f000 feb9 	bl	80245d0 <__malloc_unlock>
 802385e:	f026 0607 	bic.w	r6, r6, #7
 8023862:	1d23      	adds	r3, r4, #4
 8023864:	1af2      	subs	r2, r6, r3
 8023866:	d0b6      	beq.n	80237d6 <_malloc_r+0x22>
 8023868:	1b9b      	subs	r3, r3, r6
 802386a:	50a3      	str	r3, [r4, r2]
 802386c:	e7b3      	b.n	80237d6 <_malloc_r+0x22>
 802386e:	6862      	ldr	r2, [r4, #4]
 8023870:	42a3      	cmp	r3, r4
 8023872:	bf0c      	ite	eq
 8023874:	6032      	streq	r2, [r6, #0]
 8023876:	605a      	strne	r2, [r3, #4]
 8023878:	e7ec      	b.n	8023854 <_malloc_r+0xa0>
 802387a:	4623      	mov	r3, r4
 802387c:	6864      	ldr	r4, [r4, #4]
 802387e:	e7b2      	b.n	80237e6 <_malloc_r+0x32>
 8023880:	4634      	mov	r4, r6
 8023882:	6876      	ldr	r6, [r6, #4]
 8023884:	e7b9      	b.n	80237fa <_malloc_r+0x46>
 8023886:	230c      	movs	r3, #12
 8023888:	603b      	str	r3, [r7, #0]
 802388a:	4638      	mov	r0, r7
 802388c:	f000 fea0 	bl	80245d0 <__malloc_unlock>
 8023890:	e7a1      	b.n	80237d6 <_malloc_r+0x22>
 8023892:	6025      	str	r5, [r4, #0]
 8023894:	e7de      	b.n	8023854 <_malloc_r+0xa0>
 8023896:	bf00      	nop
 8023898:	200244dc 	.word	0x200244dc

0802389c <__sfputc_r>:
 802389c:	6893      	ldr	r3, [r2, #8]
 802389e:	3b01      	subs	r3, #1
 80238a0:	2b00      	cmp	r3, #0
 80238a2:	b410      	push	{r4}
 80238a4:	6093      	str	r3, [r2, #8]
 80238a6:	da08      	bge.n	80238ba <__sfputc_r+0x1e>
 80238a8:	6994      	ldr	r4, [r2, #24]
 80238aa:	42a3      	cmp	r3, r4
 80238ac:	db01      	blt.n	80238b2 <__sfputc_r+0x16>
 80238ae:	290a      	cmp	r1, #10
 80238b0:	d103      	bne.n	80238ba <__sfputc_r+0x1e>
 80238b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80238b6:	f000 bb47 	b.w	8023f48 <__swbuf_r>
 80238ba:	6813      	ldr	r3, [r2, #0]
 80238bc:	1c58      	adds	r0, r3, #1
 80238be:	6010      	str	r0, [r2, #0]
 80238c0:	7019      	strb	r1, [r3, #0]
 80238c2:	4608      	mov	r0, r1
 80238c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80238c8:	4770      	bx	lr

080238ca <__sfputs_r>:
 80238ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80238cc:	4606      	mov	r6, r0
 80238ce:	460f      	mov	r7, r1
 80238d0:	4614      	mov	r4, r2
 80238d2:	18d5      	adds	r5, r2, r3
 80238d4:	42ac      	cmp	r4, r5
 80238d6:	d101      	bne.n	80238dc <__sfputs_r+0x12>
 80238d8:	2000      	movs	r0, #0
 80238da:	e007      	b.n	80238ec <__sfputs_r+0x22>
 80238dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80238e0:	463a      	mov	r2, r7
 80238e2:	4630      	mov	r0, r6
 80238e4:	f7ff ffda 	bl	802389c <__sfputc_r>
 80238e8:	1c43      	adds	r3, r0, #1
 80238ea:	d1f3      	bne.n	80238d4 <__sfputs_r+0xa>
 80238ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080238f0 <_vfiprintf_r>:
 80238f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80238f4:	460d      	mov	r5, r1
 80238f6:	b09d      	sub	sp, #116	; 0x74
 80238f8:	4614      	mov	r4, r2
 80238fa:	4698      	mov	r8, r3
 80238fc:	4606      	mov	r6, r0
 80238fe:	b118      	cbz	r0, 8023908 <_vfiprintf_r+0x18>
 8023900:	6983      	ldr	r3, [r0, #24]
 8023902:	b90b      	cbnz	r3, 8023908 <_vfiprintf_r+0x18>
 8023904:	f000 fd5c 	bl	80243c0 <__sinit>
 8023908:	4b89      	ldr	r3, [pc, #548]	; (8023b30 <_vfiprintf_r+0x240>)
 802390a:	429d      	cmp	r5, r3
 802390c:	d11b      	bne.n	8023946 <_vfiprintf_r+0x56>
 802390e:	6875      	ldr	r5, [r6, #4]
 8023910:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8023912:	07d9      	lsls	r1, r3, #31
 8023914:	d405      	bmi.n	8023922 <_vfiprintf_r+0x32>
 8023916:	89ab      	ldrh	r3, [r5, #12]
 8023918:	059a      	lsls	r2, r3, #22
 802391a:	d402      	bmi.n	8023922 <_vfiprintf_r+0x32>
 802391c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802391e:	f7ff feb4 	bl	802368a <__retarget_lock_acquire_recursive>
 8023922:	89ab      	ldrh	r3, [r5, #12]
 8023924:	071b      	lsls	r3, r3, #28
 8023926:	d501      	bpl.n	802392c <_vfiprintf_r+0x3c>
 8023928:	692b      	ldr	r3, [r5, #16]
 802392a:	b9eb      	cbnz	r3, 8023968 <_vfiprintf_r+0x78>
 802392c:	4629      	mov	r1, r5
 802392e:	4630      	mov	r0, r6
 8023930:	f000 fb5c 	bl	8023fec <__swsetup_r>
 8023934:	b1c0      	cbz	r0, 8023968 <_vfiprintf_r+0x78>
 8023936:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8023938:	07dc      	lsls	r4, r3, #31
 802393a:	d50e      	bpl.n	802395a <_vfiprintf_r+0x6a>
 802393c:	f04f 30ff 	mov.w	r0, #4294967295
 8023940:	b01d      	add	sp, #116	; 0x74
 8023942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023946:	4b7b      	ldr	r3, [pc, #492]	; (8023b34 <_vfiprintf_r+0x244>)
 8023948:	429d      	cmp	r5, r3
 802394a:	d101      	bne.n	8023950 <_vfiprintf_r+0x60>
 802394c:	68b5      	ldr	r5, [r6, #8]
 802394e:	e7df      	b.n	8023910 <_vfiprintf_r+0x20>
 8023950:	4b79      	ldr	r3, [pc, #484]	; (8023b38 <_vfiprintf_r+0x248>)
 8023952:	429d      	cmp	r5, r3
 8023954:	bf08      	it	eq
 8023956:	68f5      	ldreq	r5, [r6, #12]
 8023958:	e7da      	b.n	8023910 <_vfiprintf_r+0x20>
 802395a:	89ab      	ldrh	r3, [r5, #12]
 802395c:	0598      	lsls	r0, r3, #22
 802395e:	d4ed      	bmi.n	802393c <_vfiprintf_r+0x4c>
 8023960:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8023962:	f7ff fe94 	bl	802368e <__retarget_lock_release_recursive>
 8023966:	e7e9      	b.n	802393c <_vfiprintf_r+0x4c>
 8023968:	2300      	movs	r3, #0
 802396a:	9309      	str	r3, [sp, #36]	; 0x24
 802396c:	2320      	movs	r3, #32
 802396e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8023972:	f8cd 800c 	str.w	r8, [sp, #12]
 8023976:	2330      	movs	r3, #48	; 0x30
 8023978:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8023b3c <_vfiprintf_r+0x24c>
 802397c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8023980:	f04f 0901 	mov.w	r9, #1
 8023984:	4623      	mov	r3, r4
 8023986:	469a      	mov	sl, r3
 8023988:	f813 2b01 	ldrb.w	r2, [r3], #1
 802398c:	b10a      	cbz	r2, 8023992 <_vfiprintf_r+0xa2>
 802398e:	2a25      	cmp	r2, #37	; 0x25
 8023990:	d1f9      	bne.n	8023986 <_vfiprintf_r+0x96>
 8023992:	ebba 0b04 	subs.w	fp, sl, r4
 8023996:	d00b      	beq.n	80239b0 <_vfiprintf_r+0xc0>
 8023998:	465b      	mov	r3, fp
 802399a:	4622      	mov	r2, r4
 802399c:	4629      	mov	r1, r5
 802399e:	4630      	mov	r0, r6
 80239a0:	f7ff ff93 	bl	80238ca <__sfputs_r>
 80239a4:	3001      	adds	r0, #1
 80239a6:	f000 80aa 	beq.w	8023afe <_vfiprintf_r+0x20e>
 80239aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80239ac:	445a      	add	r2, fp
 80239ae:	9209      	str	r2, [sp, #36]	; 0x24
 80239b0:	f89a 3000 	ldrb.w	r3, [sl]
 80239b4:	2b00      	cmp	r3, #0
 80239b6:	f000 80a2 	beq.w	8023afe <_vfiprintf_r+0x20e>
 80239ba:	2300      	movs	r3, #0
 80239bc:	f04f 32ff 	mov.w	r2, #4294967295
 80239c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80239c4:	f10a 0a01 	add.w	sl, sl, #1
 80239c8:	9304      	str	r3, [sp, #16]
 80239ca:	9307      	str	r3, [sp, #28]
 80239cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80239d0:	931a      	str	r3, [sp, #104]	; 0x68
 80239d2:	4654      	mov	r4, sl
 80239d4:	2205      	movs	r2, #5
 80239d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80239da:	4858      	ldr	r0, [pc, #352]	; (8023b3c <_vfiprintf_r+0x24c>)
 80239dc:	f7dc fc30 	bl	8000240 <memchr>
 80239e0:	9a04      	ldr	r2, [sp, #16]
 80239e2:	b9d8      	cbnz	r0, 8023a1c <_vfiprintf_r+0x12c>
 80239e4:	06d1      	lsls	r1, r2, #27
 80239e6:	bf44      	itt	mi
 80239e8:	2320      	movmi	r3, #32
 80239ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80239ee:	0713      	lsls	r3, r2, #28
 80239f0:	bf44      	itt	mi
 80239f2:	232b      	movmi	r3, #43	; 0x2b
 80239f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80239f8:	f89a 3000 	ldrb.w	r3, [sl]
 80239fc:	2b2a      	cmp	r3, #42	; 0x2a
 80239fe:	d015      	beq.n	8023a2c <_vfiprintf_r+0x13c>
 8023a00:	9a07      	ldr	r2, [sp, #28]
 8023a02:	4654      	mov	r4, sl
 8023a04:	2000      	movs	r0, #0
 8023a06:	f04f 0c0a 	mov.w	ip, #10
 8023a0a:	4621      	mov	r1, r4
 8023a0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8023a10:	3b30      	subs	r3, #48	; 0x30
 8023a12:	2b09      	cmp	r3, #9
 8023a14:	d94e      	bls.n	8023ab4 <_vfiprintf_r+0x1c4>
 8023a16:	b1b0      	cbz	r0, 8023a46 <_vfiprintf_r+0x156>
 8023a18:	9207      	str	r2, [sp, #28]
 8023a1a:	e014      	b.n	8023a46 <_vfiprintf_r+0x156>
 8023a1c:	eba0 0308 	sub.w	r3, r0, r8
 8023a20:	fa09 f303 	lsl.w	r3, r9, r3
 8023a24:	4313      	orrs	r3, r2
 8023a26:	9304      	str	r3, [sp, #16]
 8023a28:	46a2      	mov	sl, r4
 8023a2a:	e7d2      	b.n	80239d2 <_vfiprintf_r+0xe2>
 8023a2c:	9b03      	ldr	r3, [sp, #12]
 8023a2e:	1d19      	adds	r1, r3, #4
 8023a30:	681b      	ldr	r3, [r3, #0]
 8023a32:	9103      	str	r1, [sp, #12]
 8023a34:	2b00      	cmp	r3, #0
 8023a36:	bfbb      	ittet	lt
 8023a38:	425b      	neglt	r3, r3
 8023a3a:	f042 0202 	orrlt.w	r2, r2, #2
 8023a3e:	9307      	strge	r3, [sp, #28]
 8023a40:	9307      	strlt	r3, [sp, #28]
 8023a42:	bfb8      	it	lt
 8023a44:	9204      	strlt	r2, [sp, #16]
 8023a46:	7823      	ldrb	r3, [r4, #0]
 8023a48:	2b2e      	cmp	r3, #46	; 0x2e
 8023a4a:	d10c      	bne.n	8023a66 <_vfiprintf_r+0x176>
 8023a4c:	7863      	ldrb	r3, [r4, #1]
 8023a4e:	2b2a      	cmp	r3, #42	; 0x2a
 8023a50:	d135      	bne.n	8023abe <_vfiprintf_r+0x1ce>
 8023a52:	9b03      	ldr	r3, [sp, #12]
 8023a54:	1d1a      	adds	r2, r3, #4
 8023a56:	681b      	ldr	r3, [r3, #0]
 8023a58:	9203      	str	r2, [sp, #12]
 8023a5a:	2b00      	cmp	r3, #0
 8023a5c:	bfb8      	it	lt
 8023a5e:	f04f 33ff 	movlt.w	r3, #4294967295
 8023a62:	3402      	adds	r4, #2
 8023a64:	9305      	str	r3, [sp, #20]
 8023a66:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8023b4c <_vfiprintf_r+0x25c>
 8023a6a:	7821      	ldrb	r1, [r4, #0]
 8023a6c:	2203      	movs	r2, #3
 8023a6e:	4650      	mov	r0, sl
 8023a70:	f7dc fbe6 	bl	8000240 <memchr>
 8023a74:	b140      	cbz	r0, 8023a88 <_vfiprintf_r+0x198>
 8023a76:	2340      	movs	r3, #64	; 0x40
 8023a78:	eba0 000a 	sub.w	r0, r0, sl
 8023a7c:	fa03 f000 	lsl.w	r0, r3, r0
 8023a80:	9b04      	ldr	r3, [sp, #16]
 8023a82:	4303      	orrs	r3, r0
 8023a84:	3401      	adds	r4, #1
 8023a86:	9304      	str	r3, [sp, #16]
 8023a88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023a8c:	482c      	ldr	r0, [pc, #176]	; (8023b40 <_vfiprintf_r+0x250>)
 8023a8e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8023a92:	2206      	movs	r2, #6
 8023a94:	f7dc fbd4 	bl	8000240 <memchr>
 8023a98:	2800      	cmp	r0, #0
 8023a9a:	d03f      	beq.n	8023b1c <_vfiprintf_r+0x22c>
 8023a9c:	4b29      	ldr	r3, [pc, #164]	; (8023b44 <_vfiprintf_r+0x254>)
 8023a9e:	bb1b      	cbnz	r3, 8023ae8 <_vfiprintf_r+0x1f8>
 8023aa0:	9b03      	ldr	r3, [sp, #12]
 8023aa2:	3307      	adds	r3, #7
 8023aa4:	f023 0307 	bic.w	r3, r3, #7
 8023aa8:	3308      	adds	r3, #8
 8023aaa:	9303      	str	r3, [sp, #12]
 8023aac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023aae:	443b      	add	r3, r7
 8023ab0:	9309      	str	r3, [sp, #36]	; 0x24
 8023ab2:	e767      	b.n	8023984 <_vfiprintf_r+0x94>
 8023ab4:	fb0c 3202 	mla	r2, ip, r2, r3
 8023ab8:	460c      	mov	r4, r1
 8023aba:	2001      	movs	r0, #1
 8023abc:	e7a5      	b.n	8023a0a <_vfiprintf_r+0x11a>
 8023abe:	2300      	movs	r3, #0
 8023ac0:	3401      	adds	r4, #1
 8023ac2:	9305      	str	r3, [sp, #20]
 8023ac4:	4619      	mov	r1, r3
 8023ac6:	f04f 0c0a 	mov.w	ip, #10
 8023aca:	4620      	mov	r0, r4
 8023acc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8023ad0:	3a30      	subs	r2, #48	; 0x30
 8023ad2:	2a09      	cmp	r2, #9
 8023ad4:	d903      	bls.n	8023ade <_vfiprintf_r+0x1ee>
 8023ad6:	2b00      	cmp	r3, #0
 8023ad8:	d0c5      	beq.n	8023a66 <_vfiprintf_r+0x176>
 8023ada:	9105      	str	r1, [sp, #20]
 8023adc:	e7c3      	b.n	8023a66 <_vfiprintf_r+0x176>
 8023ade:	fb0c 2101 	mla	r1, ip, r1, r2
 8023ae2:	4604      	mov	r4, r0
 8023ae4:	2301      	movs	r3, #1
 8023ae6:	e7f0      	b.n	8023aca <_vfiprintf_r+0x1da>
 8023ae8:	ab03      	add	r3, sp, #12
 8023aea:	9300      	str	r3, [sp, #0]
 8023aec:	462a      	mov	r2, r5
 8023aee:	4b16      	ldr	r3, [pc, #88]	; (8023b48 <_vfiprintf_r+0x258>)
 8023af0:	a904      	add	r1, sp, #16
 8023af2:	4630      	mov	r0, r6
 8023af4:	f3af 8000 	nop.w
 8023af8:	4607      	mov	r7, r0
 8023afa:	1c78      	adds	r0, r7, #1
 8023afc:	d1d6      	bne.n	8023aac <_vfiprintf_r+0x1bc>
 8023afe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8023b00:	07d9      	lsls	r1, r3, #31
 8023b02:	d405      	bmi.n	8023b10 <_vfiprintf_r+0x220>
 8023b04:	89ab      	ldrh	r3, [r5, #12]
 8023b06:	059a      	lsls	r2, r3, #22
 8023b08:	d402      	bmi.n	8023b10 <_vfiprintf_r+0x220>
 8023b0a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8023b0c:	f7ff fdbf 	bl	802368e <__retarget_lock_release_recursive>
 8023b10:	89ab      	ldrh	r3, [r5, #12]
 8023b12:	065b      	lsls	r3, r3, #25
 8023b14:	f53f af12 	bmi.w	802393c <_vfiprintf_r+0x4c>
 8023b18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8023b1a:	e711      	b.n	8023940 <_vfiprintf_r+0x50>
 8023b1c:	ab03      	add	r3, sp, #12
 8023b1e:	9300      	str	r3, [sp, #0]
 8023b20:	462a      	mov	r2, r5
 8023b22:	4b09      	ldr	r3, [pc, #36]	; (8023b48 <_vfiprintf_r+0x258>)
 8023b24:	a904      	add	r1, sp, #16
 8023b26:	4630      	mov	r0, r6
 8023b28:	f000 f880 	bl	8023c2c <_printf_i>
 8023b2c:	e7e4      	b.n	8023af8 <_vfiprintf_r+0x208>
 8023b2e:	bf00      	nop
 8023b30:	08027fc4 	.word	0x08027fc4
 8023b34:	08027fe4 	.word	0x08027fe4
 8023b38:	08027fa4 	.word	0x08027fa4
 8023b3c:	08027f6c 	.word	0x08027f6c
 8023b40:	08027f76 	.word	0x08027f76
 8023b44:	00000000 	.word	0x00000000
 8023b48:	080238cb 	.word	0x080238cb
 8023b4c:	08027f72 	.word	0x08027f72

08023b50 <_printf_common>:
 8023b50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023b54:	4616      	mov	r6, r2
 8023b56:	4699      	mov	r9, r3
 8023b58:	688a      	ldr	r2, [r1, #8]
 8023b5a:	690b      	ldr	r3, [r1, #16]
 8023b5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8023b60:	4293      	cmp	r3, r2
 8023b62:	bfb8      	it	lt
 8023b64:	4613      	movlt	r3, r2
 8023b66:	6033      	str	r3, [r6, #0]
 8023b68:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8023b6c:	4607      	mov	r7, r0
 8023b6e:	460c      	mov	r4, r1
 8023b70:	b10a      	cbz	r2, 8023b76 <_printf_common+0x26>
 8023b72:	3301      	adds	r3, #1
 8023b74:	6033      	str	r3, [r6, #0]
 8023b76:	6823      	ldr	r3, [r4, #0]
 8023b78:	0699      	lsls	r1, r3, #26
 8023b7a:	bf42      	ittt	mi
 8023b7c:	6833      	ldrmi	r3, [r6, #0]
 8023b7e:	3302      	addmi	r3, #2
 8023b80:	6033      	strmi	r3, [r6, #0]
 8023b82:	6825      	ldr	r5, [r4, #0]
 8023b84:	f015 0506 	ands.w	r5, r5, #6
 8023b88:	d106      	bne.n	8023b98 <_printf_common+0x48>
 8023b8a:	f104 0a19 	add.w	sl, r4, #25
 8023b8e:	68e3      	ldr	r3, [r4, #12]
 8023b90:	6832      	ldr	r2, [r6, #0]
 8023b92:	1a9b      	subs	r3, r3, r2
 8023b94:	42ab      	cmp	r3, r5
 8023b96:	dc26      	bgt.n	8023be6 <_printf_common+0x96>
 8023b98:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8023b9c:	1e13      	subs	r3, r2, #0
 8023b9e:	6822      	ldr	r2, [r4, #0]
 8023ba0:	bf18      	it	ne
 8023ba2:	2301      	movne	r3, #1
 8023ba4:	0692      	lsls	r2, r2, #26
 8023ba6:	d42b      	bmi.n	8023c00 <_printf_common+0xb0>
 8023ba8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8023bac:	4649      	mov	r1, r9
 8023bae:	4638      	mov	r0, r7
 8023bb0:	47c0      	blx	r8
 8023bb2:	3001      	adds	r0, #1
 8023bb4:	d01e      	beq.n	8023bf4 <_printf_common+0xa4>
 8023bb6:	6823      	ldr	r3, [r4, #0]
 8023bb8:	68e5      	ldr	r5, [r4, #12]
 8023bba:	6832      	ldr	r2, [r6, #0]
 8023bbc:	f003 0306 	and.w	r3, r3, #6
 8023bc0:	2b04      	cmp	r3, #4
 8023bc2:	bf08      	it	eq
 8023bc4:	1aad      	subeq	r5, r5, r2
 8023bc6:	68a3      	ldr	r3, [r4, #8]
 8023bc8:	6922      	ldr	r2, [r4, #16]
 8023bca:	bf0c      	ite	eq
 8023bcc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8023bd0:	2500      	movne	r5, #0
 8023bd2:	4293      	cmp	r3, r2
 8023bd4:	bfc4      	itt	gt
 8023bd6:	1a9b      	subgt	r3, r3, r2
 8023bd8:	18ed      	addgt	r5, r5, r3
 8023bda:	2600      	movs	r6, #0
 8023bdc:	341a      	adds	r4, #26
 8023bde:	42b5      	cmp	r5, r6
 8023be0:	d11a      	bne.n	8023c18 <_printf_common+0xc8>
 8023be2:	2000      	movs	r0, #0
 8023be4:	e008      	b.n	8023bf8 <_printf_common+0xa8>
 8023be6:	2301      	movs	r3, #1
 8023be8:	4652      	mov	r2, sl
 8023bea:	4649      	mov	r1, r9
 8023bec:	4638      	mov	r0, r7
 8023bee:	47c0      	blx	r8
 8023bf0:	3001      	adds	r0, #1
 8023bf2:	d103      	bne.n	8023bfc <_printf_common+0xac>
 8023bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8023bf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023bfc:	3501      	adds	r5, #1
 8023bfe:	e7c6      	b.n	8023b8e <_printf_common+0x3e>
 8023c00:	18e1      	adds	r1, r4, r3
 8023c02:	1c5a      	adds	r2, r3, #1
 8023c04:	2030      	movs	r0, #48	; 0x30
 8023c06:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8023c0a:	4422      	add	r2, r4
 8023c0c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8023c10:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8023c14:	3302      	adds	r3, #2
 8023c16:	e7c7      	b.n	8023ba8 <_printf_common+0x58>
 8023c18:	2301      	movs	r3, #1
 8023c1a:	4622      	mov	r2, r4
 8023c1c:	4649      	mov	r1, r9
 8023c1e:	4638      	mov	r0, r7
 8023c20:	47c0      	blx	r8
 8023c22:	3001      	adds	r0, #1
 8023c24:	d0e6      	beq.n	8023bf4 <_printf_common+0xa4>
 8023c26:	3601      	adds	r6, #1
 8023c28:	e7d9      	b.n	8023bde <_printf_common+0x8e>
	...

08023c2c <_printf_i>:
 8023c2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8023c30:	7e0f      	ldrb	r7, [r1, #24]
 8023c32:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8023c34:	2f78      	cmp	r7, #120	; 0x78
 8023c36:	4691      	mov	r9, r2
 8023c38:	4680      	mov	r8, r0
 8023c3a:	460c      	mov	r4, r1
 8023c3c:	469a      	mov	sl, r3
 8023c3e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8023c42:	d807      	bhi.n	8023c54 <_printf_i+0x28>
 8023c44:	2f62      	cmp	r7, #98	; 0x62
 8023c46:	d80a      	bhi.n	8023c5e <_printf_i+0x32>
 8023c48:	2f00      	cmp	r7, #0
 8023c4a:	f000 80d8 	beq.w	8023dfe <_printf_i+0x1d2>
 8023c4e:	2f58      	cmp	r7, #88	; 0x58
 8023c50:	f000 80a3 	beq.w	8023d9a <_printf_i+0x16e>
 8023c54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8023c58:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8023c5c:	e03a      	b.n	8023cd4 <_printf_i+0xa8>
 8023c5e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8023c62:	2b15      	cmp	r3, #21
 8023c64:	d8f6      	bhi.n	8023c54 <_printf_i+0x28>
 8023c66:	a101      	add	r1, pc, #4	; (adr r1, 8023c6c <_printf_i+0x40>)
 8023c68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8023c6c:	08023cc5 	.word	0x08023cc5
 8023c70:	08023cd9 	.word	0x08023cd9
 8023c74:	08023c55 	.word	0x08023c55
 8023c78:	08023c55 	.word	0x08023c55
 8023c7c:	08023c55 	.word	0x08023c55
 8023c80:	08023c55 	.word	0x08023c55
 8023c84:	08023cd9 	.word	0x08023cd9
 8023c88:	08023c55 	.word	0x08023c55
 8023c8c:	08023c55 	.word	0x08023c55
 8023c90:	08023c55 	.word	0x08023c55
 8023c94:	08023c55 	.word	0x08023c55
 8023c98:	08023de5 	.word	0x08023de5
 8023c9c:	08023d09 	.word	0x08023d09
 8023ca0:	08023dc7 	.word	0x08023dc7
 8023ca4:	08023c55 	.word	0x08023c55
 8023ca8:	08023c55 	.word	0x08023c55
 8023cac:	08023e07 	.word	0x08023e07
 8023cb0:	08023c55 	.word	0x08023c55
 8023cb4:	08023d09 	.word	0x08023d09
 8023cb8:	08023c55 	.word	0x08023c55
 8023cbc:	08023c55 	.word	0x08023c55
 8023cc0:	08023dcf 	.word	0x08023dcf
 8023cc4:	682b      	ldr	r3, [r5, #0]
 8023cc6:	1d1a      	adds	r2, r3, #4
 8023cc8:	681b      	ldr	r3, [r3, #0]
 8023cca:	602a      	str	r2, [r5, #0]
 8023ccc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8023cd0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8023cd4:	2301      	movs	r3, #1
 8023cd6:	e0a3      	b.n	8023e20 <_printf_i+0x1f4>
 8023cd8:	6820      	ldr	r0, [r4, #0]
 8023cda:	6829      	ldr	r1, [r5, #0]
 8023cdc:	0606      	lsls	r6, r0, #24
 8023cde:	f101 0304 	add.w	r3, r1, #4
 8023ce2:	d50a      	bpl.n	8023cfa <_printf_i+0xce>
 8023ce4:	680e      	ldr	r6, [r1, #0]
 8023ce6:	602b      	str	r3, [r5, #0]
 8023ce8:	2e00      	cmp	r6, #0
 8023cea:	da03      	bge.n	8023cf4 <_printf_i+0xc8>
 8023cec:	232d      	movs	r3, #45	; 0x2d
 8023cee:	4276      	negs	r6, r6
 8023cf0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8023cf4:	485e      	ldr	r0, [pc, #376]	; (8023e70 <_printf_i+0x244>)
 8023cf6:	230a      	movs	r3, #10
 8023cf8:	e019      	b.n	8023d2e <_printf_i+0x102>
 8023cfa:	680e      	ldr	r6, [r1, #0]
 8023cfc:	602b      	str	r3, [r5, #0]
 8023cfe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8023d02:	bf18      	it	ne
 8023d04:	b236      	sxthne	r6, r6
 8023d06:	e7ef      	b.n	8023ce8 <_printf_i+0xbc>
 8023d08:	682b      	ldr	r3, [r5, #0]
 8023d0a:	6820      	ldr	r0, [r4, #0]
 8023d0c:	1d19      	adds	r1, r3, #4
 8023d0e:	6029      	str	r1, [r5, #0]
 8023d10:	0601      	lsls	r1, r0, #24
 8023d12:	d501      	bpl.n	8023d18 <_printf_i+0xec>
 8023d14:	681e      	ldr	r6, [r3, #0]
 8023d16:	e002      	b.n	8023d1e <_printf_i+0xf2>
 8023d18:	0646      	lsls	r6, r0, #25
 8023d1a:	d5fb      	bpl.n	8023d14 <_printf_i+0xe8>
 8023d1c:	881e      	ldrh	r6, [r3, #0]
 8023d1e:	4854      	ldr	r0, [pc, #336]	; (8023e70 <_printf_i+0x244>)
 8023d20:	2f6f      	cmp	r7, #111	; 0x6f
 8023d22:	bf0c      	ite	eq
 8023d24:	2308      	moveq	r3, #8
 8023d26:	230a      	movne	r3, #10
 8023d28:	2100      	movs	r1, #0
 8023d2a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8023d2e:	6865      	ldr	r5, [r4, #4]
 8023d30:	60a5      	str	r5, [r4, #8]
 8023d32:	2d00      	cmp	r5, #0
 8023d34:	bfa2      	ittt	ge
 8023d36:	6821      	ldrge	r1, [r4, #0]
 8023d38:	f021 0104 	bicge.w	r1, r1, #4
 8023d3c:	6021      	strge	r1, [r4, #0]
 8023d3e:	b90e      	cbnz	r6, 8023d44 <_printf_i+0x118>
 8023d40:	2d00      	cmp	r5, #0
 8023d42:	d04d      	beq.n	8023de0 <_printf_i+0x1b4>
 8023d44:	4615      	mov	r5, r2
 8023d46:	fbb6 f1f3 	udiv	r1, r6, r3
 8023d4a:	fb03 6711 	mls	r7, r3, r1, r6
 8023d4e:	5dc7      	ldrb	r7, [r0, r7]
 8023d50:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8023d54:	4637      	mov	r7, r6
 8023d56:	42bb      	cmp	r3, r7
 8023d58:	460e      	mov	r6, r1
 8023d5a:	d9f4      	bls.n	8023d46 <_printf_i+0x11a>
 8023d5c:	2b08      	cmp	r3, #8
 8023d5e:	d10b      	bne.n	8023d78 <_printf_i+0x14c>
 8023d60:	6823      	ldr	r3, [r4, #0]
 8023d62:	07de      	lsls	r6, r3, #31
 8023d64:	d508      	bpl.n	8023d78 <_printf_i+0x14c>
 8023d66:	6923      	ldr	r3, [r4, #16]
 8023d68:	6861      	ldr	r1, [r4, #4]
 8023d6a:	4299      	cmp	r1, r3
 8023d6c:	bfde      	ittt	le
 8023d6e:	2330      	movle	r3, #48	; 0x30
 8023d70:	f805 3c01 	strble.w	r3, [r5, #-1]
 8023d74:	f105 35ff 	addle.w	r5, r5, #4294967295
 8023d78:	1b52      	subs	r2, r2, r5
 8023d7a:	6122      	str	r2, [r4, #16]
 8023d7c:	f8cd a000 	str.w	sl, [sp]
 8023d80:	464b      	mov	r3, r9
 8023d82:	aa03      	add	r2, sp, #12
 8023d84:	4621      	mov	r1, r4
 8023d86:	4640      	mov	r0, r8
 8023d88:	f7ff fee2 	bl	8023b50 <_printf_common>
 8023d8c:	3001      	adds	r0, #1
 8023d8e:	d14c      	bne.n	8023e2a <_printf_i+0x1fe>
 8023d90:	f04f 30ff 	mov.w	r0, #4294967295
 8023d94:	b004      	add	sp, #16
 8023d96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023d9a:	4835      	ldr	r0, [pc, #212]	; (8023e70 <_printf_i+0x244>)
 8023d9c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8023da0:	6829      	ldr	r1, [r5, #0]
 8023da2:	6823      	ldr	r3, [r4, #0]
 8023da4:	f851 6b04 	ldr.w	r6, [r1], #4
 8023da8:	6029      	str	r1, [r5, #0]
 8023daa:	061d      	lsls	r5, r3, #24
 8023dac:	d514      	bpl.n	8023dd8 <_printf_i+0x1ac>
 8023dae:	07df      	lsls	r7, r3, #31
 8023db0:	bf44      	itt	mi
 8023db2:	f043 0320 	orrmi.w	r3, r3, #32
 8023db6:	6023      	strmi	r3, [r4, #0]
 8023db8:	b91e      	cbnz	r6, 8023dc2 <_printf_i+0x196>
 8023dba:	6823      	ldr	r3, [r4, #0]
 8023dbc:	f023 0320 	bic.w	r3, r3, #32
 8023dc0:	6023      	str	r3, [r4, #0]
 8023dc2:	2310      	movs	r3, #16
 8023dc4:	e7b0      	b.n	8023d28 <_printf_i+0xfc>
 8023dc6:	6823      	ldr	r3, [r4, #0]
 8023dc8:	f043 0320 	orr.w	r3, r3, #32
 8023dcc:	6023      	str	r3, [r4, #0]
 8023dce:	2378      	movs	r3, #120	; 0x78
 8023dd0:	4828      	ldr	r0, [pc, #160]	; (8023e74 <_printf_i+0x248>)
 8023dd2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8023dd6:	e7e3      	b.n	8023da0 <_printf_i+0x174>
 8023dd8:	0659      	lsls	r1, r3, #25
 8023dda:	bf48      	it	mi
 8023ddc:	b2b6      	uxthmi	r6, r6
 8023dde:	e7e6      	b.n	8023dae <_printf_i+0x182>
 8023de0:	4615      	mov	r5, r2
 8023de2:	e7bb      	b.n	8023d5c <_printf_i+0x130>
 8023de4:	682b      	ldr	r3, [r5, #0]
 8023de6:	6826      	ldr	r6, [r4, #0]
 8023de8:	6961      	ldr	r1, [r4, #20]
 8023dea:	1d18      	adds	r0, r3, #4
 8023dec:	6028      	str	r0, [r5, #0]
 8023dee:	0635      	lsls	r5, r6, #24
 8023df0:	681b      	ldr	r3, [r3, #0]
 8023df2:	d501      	bpl.n	8023df8 <_printf_i+0x1cc>
 8023df4:	6019      	str	r1, [r3, #0]
 8023df6:	e002      	b.n	8023dfe <_printf_i+0x1d2>
 8023df8:	0670      	lsls	r0, r6, #25
 8023dfa:	d5fb      	bpl.n	8023df4 <_printf_i+0x1c8>
 8023dfc:	8019      	strh	r1, [r3, #0]
 8023dfe:	2300      	movs	r3, #0
 8023e00:	6123      	str	r3, [r4, #16]
 8023e02:	4615      	mov	r5, r2
 8023e04:	e7ba      	b.n	8023d7c <_printf_i+0x150>
 8023e06:	682b      	ldr	r3, [r5, #0]
 8023e08:	1d1a      	adds	r2, r3, #4
 8023e0a:	602a      	str	r2, [r5, #0]
 8023e0c:	681d      	ldr	r5, [r3, #0]
 8023e0e:	6862      	ldr	r2, [r4, #4]
 8023e10:	2100      	movs	r1, #0
 8023e12:	4628      	mov	r0, r5
 8023e14:	f7dc fa14 	bl	8000240 <memchr>
 8023e18:	b108      	cbz	r0, 8023e1e <_printf_i+0x1f2>
 8023e1a:	1b40      	subs	r0, r0, r5
 8023e1c:	6060      	str	r0, [r4, #4]
 8023e1e:	6863      	ldr	r3, [r4, #4]
 8023e20:	6123      	str	r3, [r4, #16]
 8023e22:	2300      	movs	r3, #0
 8023e24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8023e28:	e7a8      	b.n	8023d7c <_printf_i+0x150>
 8023e2a:	6923      	ldr	r3, [r4, #16]
 8023e2c:	462a      	mov	r2, r5
 8023e2e:	4649      	mov	r1, r9
 8023e30:	4640      	mov	r0, r8
 8023e32:	47d0      	blx	sl
 8023e34:	3001      	adds	r0, #1
 8023e36:	d0ab      	beq.n	8023d90 <_printf_i+0x164>
 8023e38:	6823      	ldr	r3, [r4, #0]
 8023e3a:	079b      	lsls	r3, r3, #30
 8023e3c:	d413      	bmi.n	8023e66 <_printf_i+0x23a>
 8023e3e:	68e0      	ldr	r0, [r4, #12]
 8023e40:	9b03      	ldr	r3, [sp, #12]
 8023e42:	4298      	cmp	r0, r3
 8023e44:	bfb8      	it	lt
 8023e46:	4618      	movlt	r0, r3
 8023e48:	e7a4      	b.n	8023d94 <_printf_i+0x168>
 8023e4a:	2301      	movs	r3, #1
 8023e4c:	4632      	mov	r2, r6
 8023e4e:	4649      	mov	r1, r9
 8023e50:	4640      	mov	r0, r8
 8023e52:	47d0      	blx	sl
 8023e54:	3001      	adds	r0, #1
 8023e56:	d09b      	beq.n	8023d90 <_printf_i+0x164>
 8023e58:	3501      	adds	r5, #1
 8023e5a:	68e3      	ldr	r3, [r4, #12]
 8023e5c:	9903      	ldr	r1, [sp, #12]
 8023e5e:	1a5b      	subs	r3, r3, r1
 8023e60:	42ab      	cmp	r3, r5
 8023e62:	dcf2      	bgt.n	8023e4a <_printf_i+0x21e>
 8023e64:	e7eb      	b.n	8023e3e <_printf_i+0x212>
 8023e66:	2500      	movs	r5, #0
 8023e68:	f104 0619 	add.w	r6, r4, #25
 8023e6c:	e7f5      	b.n	8023e5a <_printf_i+0x22e>
 8023e6e:	bf00      	nop
 8023e70:	08027f7d 	.word	0x08027f7d
 8023e74:	08027f8e 	.word	0x08027f8e

08023e78 <_sbrk_r>:
 8023e78:	b538      	push	{r3, r4, r5, lr}
 8023e7a:	4d06      	ldr	r5, [pc, #24]	; (8023e94 <_sbrk_r+0x1c>)
 8023e7c:	2300      	movs	r3, #0
 8023e7e:	4604      	mov	r4, r0
 8023e80:	4608      	mov	r0, r1
 8023e82:	602b      	str	r3, [r5, #0]
 8023e84:	f7dd fd4c 	bl	8001920 <_sbrk>
 8023e88:	1c43      	adds	r3, r0, #1
 8023e8a:	d102      	bne.n	8023e92 <_sbrk_r+0x1a>
 8023e8c:	682b      	ldr	r3, [r5, #0]
 8023e8e:	b103      	cbz	r3, 8023e92 <_sbrk_r+0x1a>
 8023e90:	6023      	str	r3, [r4, #0]
 8023e92:	bd38      	pop	{r3, r4, r5, pc}
 8023e94:	2002467c 	.word	0x2002467c

08023e98 <_raise_r>:
 8023e98:	291f      	cmp	r1, #31
 8023e9a:	b538      	push	{r3, r4, r5, lr}
 8023e9c:	4604      	mov	r4, r0
 8023e9e:	460d      	mov	r5, r1
 8023ea0:	d904      	bls.n	8023eac <_raise_r+0x14>
 8023ea2:	2316      	movs	r3, #22
 8023ea4:	6003      	str	r3, [r0, #0]
 8023ea6:	f04f 30ff 	mov.w	r0, #4294967295
 8023eaa:	bd38      	pop	{r3, r4, r5, pc}
 8023eac:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8023eae:	b112      	cbz	r2, 8023eb6 <_raise_r+0x1e>
 8023eb0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8023eb4:	b94b      	cbnz	r3, 8023eca <_raise_r+0x32>
 8023eb6:	4620      	mov	r0, r4
 8023eb8:	f000 f830 	bl	8023f1c <_getpid_r>
 8023ebc:	462a      	mov	r2, r5
 8023ebe:	4601      	mov	r1, r0
 8023ec0:	4620      	mov	r0, r4
 8023ec2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8023ec6:	f000 b817 	b.w	8023ef8 <_kill_r>
 8023eca:	2b01      	cmp	r3, #1
 8023ecc:	d00a      	beq.n	8023ee4 <_raise_r+0x4c>
 8023ece:	1c59      	adds	r1, r3, #1
 8023ed0:	d103      	bne.n	8023eda <_raise_r+0x42>
 8023ed2:	2316      	movs	r3, #22
 8023ed4:	6003      	str	r3, [r0, #0]
 8023ed6:	2001      	movs	r0, #1
 8023ed8:	e7e7      	b.n	8023eaa <_raise_r+0x12>
 8023eda:	2400      	movs	r4, #0
 8023edc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8023ee0:	4628      	mov	r0, r5
 8023ee2:	4798      	blx	r3
 8023ee4:	2000      	movs	r0, #0
 8023ee6:	e7e0      	b.n	8023eaa <_raise_r+0x12>

08023ee8 <raise>:
 8023ee8:	4b02      	ldr	r3, [pc, #8]	; (8023ef4 <raise+0xc>)
 8023eea:	4601      	mov	r1, r0
 8023eec:	6818      	ldr	r0, [r3, #0]
 8023eee:	f7ff bfd3 	b.w	8023e98 <_raise_r>
 8023ef2:	bf00      	nop
 8023ef4:	200000a8 	.word	0x200000a8

08023ef8 <_kill_r>:
 8023ef8:	b538      	push	{r3, r4, r5, lr}
 8023efa:	4d07      	ldr	r5, [pc, #28]	; (8023f18 <_kill_r+0x20>)
 8023efc:	2300      	movs	r3, #0
 8023efe:	4604      	mov	r4, r0
 8023f00:	4608      	mov	r0, r1
 8023f02:	4611      	mov	r1, r2
 8023f04:	602b      	str	r3, [r5, #0]
 8023f06:	f7dd fc83 	bl	8001810 <_kill>
 8023f0a:	1c43      	adds	r3, r0, #1
 8023f0c:	d102      	bne.n	8023f14 <_kill_r+0x1c>
 8023f0e:	682b      	ldr	r3, [r5, #0]
 8023f10:	b103      	cbz	r3, 8023f14 <_kill_r+0x1c>
 8023f12:	6023      	str	r3, [r4, #0]
 8023f14:	bd38      	pop	{r3, r4, r5, pc}
 8023f16:	bf00      	nop
 8023f18:	2002467c 	.word	0x2002467c

08023f1c <_getpid_r>:
 8023f1c:	f7dd bc70 	b.w	8001800 <_getpid>

08023f20 <strncmp>:
 8023f20:	b510      	push	{r4, lr}
 8023f22:	b17a      	cbz	r2, 8023f44 <strncmp+0x24>
 8023f24:	4603      	mov	r3, r0
 8023f26:	3901      	subs	r1, #1
 8023f28:	1884      	adds	r4, r0, r2
 8023f2a:	f813 0b01 	ldrb.w	r0, [r3], #1
 8023f2e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8023f32:	4290      	cmp	r0, r2
 8023f34:	d101      	bne.n	8023f3a <strncmp+0x1a>
 8023f36:	42a3      	cmp	r3, r4
 8023f38:	d101      	bne.n	8023f3e <strncmp+0x1e>
 8023f3a:	1a80      	subs	r0, r0, r2
 8023f3c:	bd10      	pop	{r4, pc}
 8023f3e:	2800      	cmp	r0, #0
 8023f40:	d1f3      	bne.n	8023f2a <strncmp+0xa>
 8023f42:	e7fa      	b.n	8023f3a <strncmp+0x1a>
 8023f44:	4610      	mov	r0, r2
 8023f46:	e7f9      	b.n	8023f3c <strncmp+0x1c>

08023f48 <__swbuf_r>:
 8023f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023f4a:	460e      	mov	r6, r1
 8023f4c:	4614      	mov	r4, r2
 8023f4e:	4605      	mov	r5, r0
 8023f50:	b118      	cbz	r0, 8023f5a <__swbuf_r+0x12>
 8023f52:	6983      	ldr	r3, [r0, #24]
 8023f54:	b90b      	cbnz	r3, 8023f5a <__swbuf_r+0x12>
 8023f56:	f000 fa33 	bl	80243c0 <__sinit>
 8023f5a:	4b21      	ldr	r3, [pc, #132]	; (8023fe0 <__swbuf_r+0x98>)
 8023f5c:	429c      	cmp	r4, r3
 8023f5e:	d12b      	bne.n	8023fb8 <__swbuf_r+0x70>
 8023f60:	686c      	ldr	r4, [r5, #4]
 8023f62:	69a3      	ldr	r3, [r4, #24]
 8023f64:	60a3      	str	r3, [r4, #8]
 8023f66:	89a3      	ldrh	r3, [r4, #12]
 8023f68:	071a      	lsls	r2, r3, #28
 8023f6a:	d52f      	bpl.n	8023fcc <__swbuf_r+0x84>
 8023f6c:	6923      	ldr	r3, [r4, #16]
 8023f6e:	b36b      	cbz	r3, 8023fcc <__swbuf_r+0x84>
 8023f70:	6923      	ldr	r3, [r4, #16]
 8023f72:	6820      	ldr	r0, [r4, #0]
 8023f74:	1ac0      	subs	r0, r0, r3
 8023f76:	6963      	ldr	r3, [r4, #20]
 8023f78:	b2f6      	uxtb	r6, r6
 8023f7a:	4283      	cmp	r3, r0
 8023f7c:	4637      	mov	r7, r6
 8023f7e:	dc04      	bgt.n	8023f8a <__swbuf_r+0x42>
 8023f80:	4621      	mov	r1, r4
 8023f82:	4628      	mov	r0, r5
 8023f84:	f000 f988 	bl	8024298 <_fflush_r>
 8023f88:	bb30      	cbnz	r0, 8023fd8 <__swbuf_r+0x90>
 8023f8a:	68a3      	ldr	r3, [r4, #8]
 8023f8c:	3b01      	subs	r3, #1
 8023f8e:	60a3      	str	r3, [r4, #8]
 8023f90:	6823      	ldr	r3, [r4, #0]
 8023f92:	1c5a      	adds	r2, r3, #1
 8023f94:	6022      	str	r2, [r4, #0]
 8023f96:	701e      	strb	r6, [r3, #0]
 8023f98:	6963      	ldr	r3, [r4, #20]
 8023f9a:	3001      	adds	r0, #1
 8023f9c:	4283      	cmp	r3, r0
 8023f9e:	d004      	beq.n	8023faa <__swbuf_r+0x62>
 8023fa0:	89a3      	ldrh	r3, [r4, #12]
 8023fa2:	07db      	lsls	r3, r3, #31
 8023fa4:	d506      	bpl.n	8023fb4 <__swbuf_r+0x6c>
 8023fa6:	2e0a      	cmp	r6, #10
 8023fa8:	d104      	bne.n	8023fb4 <__swbuf_r+0x6c>
 8023faa:	4621      	mov	r1, r4
 8023fac:	4628      	mov	r0, r5
 8023fae:	f000 f973 	bl	8024298 <_fflush_r>
 8023fb2:	b988      	cbnz	r0, 8023fd8 <__swbuf_r+0x90>
 8023fb4:	4638      	mov	r0, r7
 8023fb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8023fb8:	4b0a      	ldr	r3, [pc, #40]	; (8023fe4 <__swbuf_r+0x9c>)
 8023fba:	429c      	cmp	r4, r3
 8023fbc:	d101      	bne.n	8023fc2 <__swbuf_r+0x7a>
 8023fbe:	68ac      	ldr	r4, [r5, #8]
 8023fc0:	e7cf      	b.n	8023f62 <__swbuf_r+0x1a>
 8023fc2:	4b09      	ldr	r3, [pc, #36]	; (8023fe8 <__swbuf_r+0xa0>)
 8023fc4:	429c      	cmp	r4, r3
 8023fc6:	bf08      	it	eq
 8023fc8:	68ec      	ldreq	r4, [r5, #12]
 8023fca:	e7ca      	b.n	8023f62 <__swbuf_r+0x1a>
 8023fcc:	4621      	mov	r1, r4
 8023fce:	4628      	mov	r0, r5
 8023fd0:	f000 f80c 	bl	8023fec <__swsetup_r>
 8023fd4:	2800      	cmp	r0, #0
 8023fd6:	d0cb      	beq.n	8023f70 <__swbuf_r+0x28>
 8023fd8:	f04f 37ff 	mov.w	r7, #4294967295
 8023fdc:	e7ea      	b.n	8023fb4 <__swbuf_r+0x6c>
 8023fde:	bf00      	nop
 8023fe0:	08027fc4 	.word	0x08027fc4
 8023fe4:	08027fe4 	.word	0x08027fe4
 8023fe8:	08027fa4 	.word	0x08027fa4

08023fec <__swsetup_r>:
 8023fec:	4b32      	ldr	r3, [pc, #200]	; (80240b8 <__swsetup_r+0xcc>)
 8023fee:	b570      	push	{r4, r5, r6, lr}
 8023ff0:	681d      	ldr	r5, [r3, #0]
 8023ff2:	4606      	mov	r6, r0
 8023ff4:	460c      	mov	r4, r1
 8023ff6:	b125      	cbz	r5, 8024002 <__swsetup_r+0x16>
 8023ff8:	69ab      	ldr	r3, [r5, #24]
 8023ffa:	b913      	cbnz	r3, 8024002 <__swsetup_r+0x16>
 8023ffc:	4628      	mov	r0, r5
 8023ffe:	f000 f9df 	bl	80243c0 <__sinit>
 8024002:	4b2e      	ldr	r3, [pc, #184]	; (80240bc <__swsetup_r+0xd0>)
 8024004:	429c      	cmp	r4, r3
 8024006:	d10f      	bne.n	8024028 <__swsetup_r+0x3c>
 8024008:	686c      	ldr	r4, [r5, #4]
 802400a:	89a3      	ldrh	r3, [r4, #12]
 802400c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8024010:	0719      	lsls	r1, r3, #28
 8024012:	d42c      	bmi.n	802406e <__swsetup_r+0x82>
 8024014:	06dd      	lsls	r5, r3, #27
 8024016:	d411      	bmi.n	802403c <__swsetup_r+0x50>
 8024018:	2309      	movs	r3, #9
 802401a:	6033      	str	r3, [r6, #0]
 802401c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8024020:	81a3      	strh	r3, [r4, #12]
 8024022:	f04f 30ff 	mov.w	r0, #4294967295
 8024026:	e03e      	b.n	80240a6 <__swsetup_r+0xba>
 8024028:	4b25      	ldr	r3, [pc, #148]	; (80240c0 <__swsetup_r+0xd4>)
 802402a:	429c      	cmp	r4, r3
 802402c:	d101      	bne.n	8024032 <__swsetup_r+0x46>
 802402e:	68ac      	ldr	r4, [r5, #8]
 8024030:	e7eb      	b.n	802400a <__swsetup_r+0x1e>
 8024032:	4b24      	ldr	r3, [pc, #144]	; (80240c4 <__swsetup_r+0xd8>)
 8024034:	429c      	cmp	r4, r3
 8024036:	bf08      	it	eq
 8024038:	68ec      	ldreq	r4, [r5, #12]
 802403a:	e7e6      	b.n	802400a <__swsetup_r+0x1e>
 802403c:	0758      	lsls	r0, r3, #29
 802403e:	d512      	bpl.n	8024066 <__swsetup_r+0x7a>
 8024040:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8024042:	b141      	cbz	r1, 8024056 <__swsetup_r+0x6a>
 8024044:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8024048:	4299      	cmp	r1, r3
 802404a:	d002      	beq.n	8024052 <__swsetup_r+0x66>
 802404c:	4630      	mov	r0, r6
 802404e:	f7ff fb45 	bl	80236dc <_free_r>
 8024052:	2300      	movs	r3, #0
 8024054:	6363      	str	r3, [r4, #52]	; 0x34
 8024056:	89a3      	ldrh	r3, [r4, #12]
 8024058:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802405c:	81a3      	strh	r3, [r4, #12]
 802405e:	2300      	movs	r3, #0
 8024060:	6063      	str	r3, [r4, #4]
 8024062:	6923      	ldr	r3, [r4, #16]
 8024064:	6023      	str	r3, [r4, #0]
 8024066:	89a3      	ldrh	r3, [r4, #12]
 8024068:	f043 0308 	orr.w	r3, r3, #8
 802406c:	81a3      	strh	r3, [r4, #12]
 802406e:	6923      	ldr	r3, [r4, #16]
 8024070:	b94b      	cbnz	r3, 8024086 <__swsetup_r+0x9a>
 8024072:	89a3      	ldrh	r3, [r4, #12]
 8024074:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8024078:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802407c:	d003      	beq.n	8024086 <__swsetup_r+0x9a>
 802407e:	4621      	mov	r1, r4
 8024080:	4630      	mov	r0, r6
 8024082:	f000 fa5f 	bl	8024544 <__smakebuf_r>
 8024086:	89a0      	ldrh	r0, [r4, #12]
 8024088:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802408c:	f010 0301 	ands.w	r3, r0, #1
 8024090:	d00a      	beq.n	80240a8 <__swsetup_r+0xbc>
 8024092:	2300      	movs	r3, #0
 8024094:	60a3      	str	r3, [r4, #8]
 8024096:	6963      	ldr	r3, [r4, #20]
 8024098:	425b      	negs	r3, r3
 802409a:	61a3      	str	r3, [r4, #24]
 802409c:	6923      	ldr	r3, [r4, #16]
 802409e:	b943      	cbnz	r3, 80240b2 <__swsetup_r+0xc6>
 80240a0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80240a4:	d1ba      	bne.n	802401c <__swsetup_r+0x30>
 80240a6:	bd70      	pop	{r4, r5, r6, pc}
 80240a8:	0781      	lsls	r1, r0, #30
 80240aa:	bf58      	it	pl
 80240ac:	6963      	ldrpl	r3, [r4, #20]
 80240ae:	60a3      	str	r3, [r4, #8]
 80240b0:	e7f4      	b.n	802409c <__swsetup_r+0xb0>
 80240b2:	2000      	movs	r0, #0
 80240b4:	e7f7      	b.n	80240a6 <__swsetup_r+0xba>
 80240b6:	bf00      	nop
 80240b8:	200000a8 	.word	0x200000a8
 80240bc:	08027fc4 	.word	0x08027fc4
 80240c0:	08027fe4 	.word	0x08027fe4
 80240c4:	08027fa4 	.word	0x08027fa4

080240c8 <__register_exitproc>:
 80240c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80240cc:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8024188 <__register_exitproc+0xc0>
 80240d0:	4606      	mov	r6, r0
 80240d2:	f8d8 0000 	ldr.w	r0, [r8]
 80240d6:	461f      	mov	r7, r3
 80240d8:	460d      	mov	r5, r1
 80240da:	4691      	mov	r9, r2
 80240dc:	f7ff fad5 	bl	802368a <__retarget_lock_acquire_recursive>
 80240e0:	4b25      	ldr	r3, [pc, #148]	; (8024178 <__register_exitproc+0xb0>)
 80240e2:	681c      	ldr	r4, [r3, #0]
 80240e4:	b934      	cbnz	r4, 80240f4 <__register_exitproc+0x2c>
 80240e6:	4c25      	ldr	r4, [pc, #148]	; (802417c <__register_exitproc+0xb4>)
 80240e8:	601c      	str	r4, [r3, #0]
 80240ea:	4b25      	ldr	r3, [pc, #148]	; (8024180 <__register_exitproc+0xb8>)
 80240ec:	b113      	cbz	r3, 80240f4 <__register_exitproc+0x2c>
 80240ee:	681b      	ldr	r3, [r3, #0]
 80240f0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80240f4:	6863      	ldr	r3, [r4, #4]
 80240f6:	2b1f      	cmp	r3, #31
 80240f8:	dd07      	ble.n	802410a <__register_exitproc+0x42>
 80240fa:	f8d8 0000 	ldr.w	r0, [r8]
 80240fe:	f7ff fac6 	bl	802368e <__retarget_lock_release_recursive>
 8024102:	f04f 30ff 	mov.w	r0, #4294967295
 8024106:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802410a:	b34e      	cbz	r6, 8024160 <__register_exitproc+0x98>
 802410c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8024110:	b988      	cbnz	r0, 8024136 <__register_exitproc+0x6e>
 8024112:	4b1c      	ldr	r3, [pc, #112]	; (8024184 <__register_exitproc+0xbc>)
 8024114:	b923      	cbnz	r3, 8024120 <__register_exitproc+0x58>
 8024116:	f8d8 0000 	ldr.w	r0, [r8]
 802411a:	f7ff fab7 	bl	802368c <__retarget_lock_release>
 802411e:	e7f0      	b.n	8024102 <__register_exitproc+0x3a>
 8024120:	f44f 7084 	mov.w	r0, #264	; 0x108
 8024124:	f7ff fab4 	bl	8023690 <malloc>
 8024128:	2800      	cmp	r0, #0
 802412a:	d0f4      	beq.n	8024116 <__register_exitproc+0x4e>
 802412c:	2300      	movs	r3, #0
 802412e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8024132:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8024136:	6863      	ldr	r3, [r4, #4]
 8024138:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 802413c:	2201      	movs	r2, #1
 802413e:	409a      	lsls	r2, r3
 8024140:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8024144:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8024148:	4313      	orrs	r3, r2
 802414a:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 802414e:	2e02      	cmp	r6, #2
 8024150:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8024154:	bf02      	ittt	eq
 8024156:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 802415a:	4313      	orreq	r3, r2
 802415c:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 8024160:	6863      	ldr	r3, [r4, #4]
 8024162:	f8d8 0000 	ldr.w	r0, [r8]
 8024166:	1c5a      	adds	r2, r3, #1
 8024168:	3302      	adds	r3, #2
 802416a:	6062      	str	r2, [r4, #4]
 802416c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8024170:	f7ff fa8d 	bl	802368e <__retarget_lock_release_recursive>
 8024174:	2000      	movs	r0, #0
 8024176:	e7c6      	b.n	8024106 <__register_exitproc+0x3e>
 8024178:	20024678 	.word	0x20024678
 802417c:	200245ec 	.word	0x200245ec
 8024180:	08027fa0 	.word	0x08027fa0
 8024184:	08023691 	.word	0x08023691
 8024188:	2000010c 	.word	0x2000010c

0802418c <__sflush_r>:
 802418c:	898a      	ldrh	r2, [r1, #12]
 802418e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024192:	4605      	mov	r5, r0
 8024194:	0710      	lsls	r0, r2, #28
 8024196:	460c      	mov	r4, r1
 8024198:	d458      	bmi.n	802424c <__sflush_r+0xc0>
 802419a:	684b      	ldr	r3, [r1, #4]
 802419c:	2b00      	cmp	r3, #0
 802419e:	dc05      	bgt.n	80241ac <__sflush_r+0x20>
 80241a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80241a2:	2b00      	cmp	r3, #0
 80241a4:	dc02      	bgt.n	80241ac <__sflush_r+0x20>
 80241a6:	2000      	movs	r0, #0
 80241a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80241ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80241ae:	2e00      	cmp	r6, #0
 80241b0:	d0f9      	beq.n	80241a6 <__sflush_r+0x1a>
 80241b2:	2300      	movs	r3, #0
 80241b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80241b8:	682f      	ldr	r7, [r5, #0]
 80241ba:	602b      	str	r3, [r5, #0]
 80241bc:	d032      	beq.n	8024224 <__sflush_r+0x98>
 80241be:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80241c0:	89a3      	ldrh	r3, [r4, #12]
 80241c2:	075a      	lsls	r2, r3, #29
 80241c4:	d505      	bpl.n	80241d2 <__sflush_r+0x46>
 80241c6:	6863      	ldr	r3, [r4, #4]
 80241c8:	1ac0      	subs	r0, r0, r3
 80241ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80241cc:	b10b      	cbz	r3, 80241d2 <__sflush_r+0x46>
 80241ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80241d0:	1ac0      	subs	r0, r0, r3
 80241d2:	2300      	movs	r3, #0
 80241d4:	4602      	mov	r2, r0
 80241d6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80241d8:	6a21      	ldr	r1, [r4, #32]
 80241da:	4628      	mov	r0, r5
 80241dc:	47b0      	blx	r6
 80241de:	1c43      	adds	r3, r0, #1
 80241e0:	89a3      	ldrh	r3, [r4, #12]
 80241e2:	d106      	bne.n	80241f2 <__sflush_r+0x66>
 80241e4:	6829      	ldr	r1, [r5, #0]
 80241e6:	291d      	cmp	r1, #29
 80241e8:	d82c      	bhi.n	8024244 <__sflush_r+0xb8>
 80241ea:	4a2a      	ldr	r2, [pc, #168]	; (8024294 <__sflush_r+0x108>)
 80241ec:	40ca      	lsrs	r2, r1
 80241ee:	07d6      	lsls	r6, r2, #31
 80241f0:	d528      	bpl.n	8024244 <__sflush_r+0xb8>
 80241f2:	2200      	movs	r2, #0
 80241f4:	6062      	str	r2, [r4, #4]
 80241f6:	04d9      	lsls	r1, r3, #19
 80241f8:	6922      	ldr	r2, [r4, #16]
 80241fa:	6022      	str	r2, [r4, #0]
 80241fc:	d504      	bpl.n	8024208 <__sflush_r+0x7c>
 80241fe:	1c42      	adds	r2, r0, #1
 8024200:	d101      	bne.n	8024206 <__sflush_r+0x7a>
 8024202:	682b      	ldr	r3, [r5, #0]
 8024204:	b903      	cbnz	r3, 8024208 <__sflush_r+0x7c>
 8024206:	6560      	str	r0, [r4, #84]	; 0x54
 8024208:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802420a:	602f      	str	r7, [r5, #0]
 802420c:	2900      	cmp	r1, #0
 802420e:	d0ca      	beq.n	80241a6 <__sflush_r+0x1a>
 8024210:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8024214:	4299      	cmp	r1, r3
 8024216:	d002      	beq.n	802421e <__sflush_r+0x92>
 8024218:	4628      	mov	r0, r5
 802421a:	f7ff fa5f 	bl	80236dc <_free_r>
 802421e:	2000      	movs	r0, #0
 8024220:	6360      	str	r0, [r4, #52]	; 0x34
 8024222:	e7c1      	b.n	80241a8 <__sflush_r+0x1c>
 8024224:	6a21      	ldr	r1, [r4, #32]
 8024226:	2301      	movs	r3, #1
 8024228:	4628      	mov	r0, r5
 802422a:	47b0      	blx	r6
 802422c:	1c41      	adds	r1, r0, #1
 802422e:	d1c7      	bne.n	80241c0 <__sflush_r+0x34>
 8024230:	682b      	ldr	r3, [r5, #0]
 8024232:	2b00      	cmp	r3, #0
 8024234:	d0c4      	beq.n	80241c0 <__sflush_r+0x34>
 8024236:	2b1d      	cmp	r3, #29
 8024238:	d001      	beq.n	802423e <__sflush_r+0xb2>
 802423a:	2b16      	cmp	r3, #22
 802423c:	d101      	bne.n	8024242 <__sflush_r+0xb6>
 802423e:	602f      	str	r7, [r5, #0]
 8024240:	e7b1      	b.n	80241a6 <__sflush_r+0x1a>
 8024242:	89a3      	ldrh	r3, [r4, #12]
 8024244:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8024248:	81a3      	strh	r3, [r4, #12]
 802424a:	e7ad      	b.n	80241a8 <__sflush_r+0x1c>
 802424c:	690f      	ldr	r7, [r1, #16]
 802424e:	2f00      	cmp	r7, #0
 8024250:	d0a9      	beq.n	80241a6 <__sflush_r+0x1a>
 8024252:	0793      	lsls	r3, r2, #30
 8024254:	680e      	ldr	r6, [r1, #0]
 8024256:	bf08      	it	eq
 8024258:	694b      	ldreq	r3, [r1, #20]
 802425a:	600f      	str	r7, [r1, #0]
 802425c:	bf18      	it	ne
 802425e:	2300      	movne	r3, #0
 8024260:	eba6 0807 	sub.w	r8, r6, r7
 8024264:	608b      	str	r3, [r1, #8]
 8024266:	f1b8 0f00 	cmp.w	r8, #0
 802426a:	dd9c      	ble.n	80241a6 <__sflush_r+0x1a>
 802426c:	6a21      	ldr	r1, [r4, #32]
 802426e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8024270:	4643      	mov	r3, r8
 8024272:	463a      	mov	r2, r7
 8024274:	4628      	mov	r0, r5
 8024276:	47b0      	blx	r6
 8024278:	2800      	cmp	r0, #0
 802427a:	dc06      	bgt.n	802428a <__sflush_r+0xfe>
 802427c:	89a3      	ldrh	r3, [r4, #12]
 802427e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8024282:	81a3      	strh	r3, [r4, #12]
 8024284:	f04f 30ff 	mov.w	r0, #4294967295
 8024288:	e78e      	b.n	80241a8 <__sflush_r+0x1c>
 802428a:	4407      	add	r7, r0
 802428c:	eba8 0800 	sub.w	r8, r8, r0
 8024290:	e7e9      	b.n	8024266 <__sflush_r+0xda>
 8024292:	bf00      	nop
 8024294:	20400001 	.word	0x20400001

08024298 <_fflush_r>:
 8024298:	b538      	push	{r3, r4, r5, lr}
 802429a:	690b      	ldr	r3, [r1, #16]
 802429c:	4605      	mov	r5, r0
 802429e:	460c      	mov	r4, r1
 80242a0:	b913      	cbnz	r3, 80242a8 <_fflush_r+0x10>
 80242a2:	2500      	movs	r5, #0
 80242a4:	4628      	mov	r0, r5
 80242a6:	bd38      	pop	{r3, r4, r5, pc}
 80242a8:	b118      	cbz	r0, 80242b2 <_fflush_r+0x1a>
 80242aa:	6983      	ldr	r3, [r0, #24]
 80242ac:	b90b      	cbnz	r3, 80242b2 <_fflush_r+0x1a>
 80242ae:	f000 f887 	bl	80243c0 <__sinit>
 80242b2:	4b14      	ldr	r3, [pc, #80]	; (8024304 <_fflush_r+0x6c>)
 80242b4:	429c      	cmp	r4, r3
 80242b6:	d11b      	bne.n	80242f0 <_fflush_r+0x58>
 80242b8:	686c      	ldr	r4, [r5, #4]
 80242ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80242be:	2b00      	cmp	r3, #0
 80242c0:	d0ef      	beq.n	80242a2 <_fflush_r+0xa>
 80242c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80242c4:	07d0      	lsls	r0, r2, #31
 80242c6:	d404      	bmi.n	80242d2 <_fflush_r+0x3a>
 80242c8:	0599      	lsls	r1, r3, #22
 80242ca:	d402      	bmi.n	80242d2 <_fflush_r+0x3a>
 80242cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80242ce:	f7ff f9dc 	bl	802368a <__retarget_lock_acquire_recursive>
 80242d2:	4628      	mov	r0, r5
 80242d4:	4621      	mov	r1, r4
 80242d6:	f7ff ff59 	bl	802418c <__sflush_r>
 80242da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80242dc:	07da      	lsls	r2, r3, #31
 80242de:	4605      	mov	r5, r0
 80242e0:	d4e0      	bmi.n	80242a4 <_fflush_r+0xc>
 80242e2:	89a3      	ldrh	r3, [r4, #12]
 80242e4:	059b      	lsls	r3, r3, #22
 80242e6:	d4dd      	bmi.n	80242a4 <_fflush_r+0xc>
 80242e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80242ea:	f7ff f9d0 	bl	802368e <__retarget_lock_release_recursive>
 80242ee:	e7d9      	b.n	80242a4 <_fflush_r+0xc>
 80242f0:	4b05      	ldr	r3, [pc, #20]	; (8024308 <_fflush_r+0x70>)
 80242f2:	429c      	cmp	r4, r3
 80242f4:	d101      	bne.n	80242fa <_fflush_r+0x62>
 80242f6:	68ac      	ldr	r4, [r5, #8]
 80242f8:	e7df      	b.n	80242ba <_fflush_r+0x22>
 80242fa:	4b04      	ldr	r3, [pc, #16]	; (802430c <_fflush_r+0x74>)
 80242fc:	429c      	cmp	r4, r3
 80242fe:	bf08      	it	eq
 8024300:	68ec      	ldreq	r4, [r5, #12]
 8024302:	e7da      	b.n	80242ba <_fflush_r+0x22>
 8024304:	08027fc4 	.word	0x08027fc4
 8024308:	08027fe4 	.word	0x08027fe4
 802430c:	08027fa4 	.word	0x08027fa4

08024310 <std>:
 8024310:	2300      	movs	r3, #0
 8024312:	b510      	push	{r4, lr}
 8024314:	4604      	mov	r4, r0
 8024316:	e9c0 3300 	strd	r3, r3, [r0]
 802431a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802431e:	6083      	str	r3, [r0, #8]
 8024320:	8181      	strh	r1, [r0, #12]
 8024322:	6643      	str	r3, [r0, #100]	; 0x64
 8024324:	81c2      	strh	r2, [r0, #14]
 8024326:	6183      	str	r3, [r0, #24]
 8024328:	4619      	mov	r1, r3
 802432a:	2208      	movs	r2, #8
 802432c:	305c      	adds	r0, #92	; 0x5c
 802432e:	f7ff f9cd 	bl	80236cc <memset>
 8024332:	4b05      	ldr	r3, [pc, #20]	; (8024348 <std+0x38>)
 8024334:	6263      	str	r3, [r4, #36]	; 0x24
 8024336:	4b05      	ldr	r3, [pc, #20]	; (802434c <std+0x3c>)
 8024338:	62a3      	str	r3, [r4, #40]	; 0x28
 802433a:	4b05      	ldr	r3, [pc, #20]	; (8024350 <std+0x40>)
 802433c:	62e3      	str	r3, [r4, #44]	; 0x2c
 802433e:	4b05      	ldr	r3, [pc, #20]	; (8024354 <std+0x44>)
 8024340:	6224      	str	r4, [r4, #32]
 8024342:	6323      	str	r3, [r4, #48]	; 0x30
 8024344:	bd10      	pop	{r4, pc}
 8024346:	bf00      	nop
 8024348:	080245dd 	.word	0x080245dd
 802434c:	080245ff 	.word	0x080245ff
 8024350:	08024637 	.word	0x08024637
 8024354:	0802465b 	.word	0x0802465b

08024358 <_cleanup_r>:
 8024358:	4901      	ldr	r1, [pc, #4]	; (8024360 <_cleanup_r+0x8>)
 802435a:	f000 b8af 	b.w	80244bc <_fwalk_reent>
 802435e:	bf00      	nop
 8024360:	08024299 	.word	0x08024299

08024364 <__sfmoreglue>:
 8024364:	b570      	push	{r4, r5, r6, lr}
 8024366:	2268      	movs	r2, #104	; 0x68
 8024368:	1e4d      	subs	r5, r1, #1
 802436a:	4355      	muls	r5, r2
 802436c:	460e      	mov	r6, r1
 802436e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8024372:	f7ff fa1f 	bl	80237b4 <_malloc_r>
 8024376:	4604      	mov	r4, r0
 8024378:	b140      	cbz	r0, 802438c <__sfmoreglue+0x28>
 802437a:	2100      	movs	r1, #0
 802437c:	e9c0 1600 	strd	r1, r6, [r0]
 8024380:	300c      	adds	r0, #12
 8024382:	60a0      	str	r0, [r4, #8]
 8024384:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8024388:	f7ff f9a0 	bl	80236cc <memset>
 802438c:	4620      	mov	r0, r4
 802438e:	bd70      	pop	{r4, r5, r6, pc}

08024390 <__sfp_lock_acquire>:
 8024390:	4801      	ldr	r0, [pc, #4]	; (8024398 <__sfp_lock_acquire+0x8>)
 8024392:	f7ff b97a 	b.w	802368a <__retarget_lock_acquire_recursive>
 8024396:	bf00      	nop
 8024398:	200244da 	.word	0x200244da

0802439c <__sfp_lock_release>:
 802439c:	4801      	ldr	r0, [pc, #4]	; (80243a4 <__sfp_lock_release+0x8>)
 802439e:	f7ff b976 	b.w	802368e <__retarget_lock_release_recursive>
 80243a2:	bf00      	nop
 80243a4:	200244da 	.word	0x200244da

080243a8 <__sinit_lock_acquire>:
 80243a8:	4801      	ldr	r0, [pc, #4]	; (80243b0 <__sinit_lock_acquire+0x8>)
 80243aa:	f7ff b96e 	b.w	802368a <__retarget_lock_acquire_recursive>
 80243ae:	bf00      	nop
 80243b0:	200244db 	.word	0x200244db

080243b4 <__sinit_lock_release>:
 80243b4:	4801      	ldr	r0, [pc, #4]	; (80243bc <__sinit_lock_release+0x8>)
 80243b6:	f7ff b96a 	b.w	802368e <__retarget_lock_release_recursive>
 80243ba:	bf00      	nop
 80243bc:	200244db 	.word	0x200244db

080243c0 <__sinit>:
 80243c0:	b510      	push	{r4, lr}
 80243c2:	4604      	mov	r4, r0
 80243c4:	f7ff fff0 	bl	80243a8 <__sinit_lock_acquire>
 80243c8:	69a3      	ldr	r3, [r4, #24]
 80243ca:	b11b      	cbz	r3, 80243d4 <__sinit+0x14>
 80243cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80243d0:	f7ff bff0 	b.w	80243b4 <__sinit_lock_release>
 80243d4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80243d8:	6523      	str	r3, [r4, #80]	; 0x50
 80243da:	4b13      	ldr	r3, [pc, #76]	; (8024428 <__sinit+0x68>)
 80243dc:	4a13      	ldr	r2, [pc, #76]	; (802442c <__sinit+0x6c>)
 80243de:	681b      	ldr	r3, [r3, #0]
 80243e0:	62a2      	str	r2, [r4, #40]	; 0x28
 80243e2:	42a3      	cmp	r3, r4
 80243e4:	bf04      	itt	eq
 80243e6:	2301      	moveq	r3, #1
 80243e8:	61a3      	streq	r3, [r4, #24]
 80243ea:	4620      	mov	r0, r4
 80243ec:	f000 f820 	bl	8024430 <__sfp>
 80243f0:	6060      	str	r0, [r4, #4]
 80243f2:	4620      	mov	r0, r4
 80243f4:	f000 f81c 	bl	8024430 <__sfp>
 80243f8:	60a0      	str	r0, [r4, #8]
 80243fa:	4620      	mov	r0, r4
 80243fc:	f000 f818 	bl	8024430 <__sfp>
 8024400:	2200      	movs	r2, #0
 8024402:	60e0      	str	r0, [r4, #12]
 8024404:	2104      	movs	r1, #4
 8024406:	6860      	ldr	r0, [r4, #4]
 8024408:	f7ff ff82 	bl	8024310 <std>
 802440c:	68a0      	ldr	r0, [r4, #8]
 802440e:	2201      	movs	r2, #1
 8024410:	2109      	movs	r1, #9
 8024412:	f7ff ff7d 	bl	8024310 <std>
 8024416:	68e0      	ldr	r0, [r4, #12]
 8024418:	2202      	movs	r2, #2
 802441a:	2112      	movs	r1, #18
 802441c:	f7ff ff78 	bl	8024310 <std>
 8024420:	2301      	movs	r3, #1
 8024422:	61a3      	str	r3, [r4, #24]
 8024424:	e7d2      	b.n	80243cc <__sinit+0xc>
 8024426:	bf00      	nop
 8024428:	08027f68 	.word	0x08027f68
 802442c:	08024359 	.word	0x08024359

08024430 <__sfp>:
 8024430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024432:	4607      	mov	r7, r0
 8024434:	f7ff ffac 	bl	8024390 <__sfp_lock_acquire>
 8024438:	4b1e      	ldr	r3, [pc, #120]	; (80244b4 <__sfp+0x84>)
 802443a:	681e      	ldr	r6, [r3, #0]
 802443c:	69b3      	ldr	r3, [r6, #24]
 802443e:	b913      	cbnz	r3, 8024446 <__sfp+0x16>
 8024440:	4630      	mov	r0, r6
 8024442:	f7ff ffbd 	bl	80243c0 <__sinit>
 8024446:	3648      	adds	r6, #72	; 0x48
 8024448:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 802444c:	3b01      	subs	r3, #1
 802444e:	d503      	bpl.n	8024458 <__sfp+0x28>
 8024450:	6833      	ldr	r3, [r6, #0]
 8024452:	b30b      	cbz	r3, 8024498 <__sfp+0x68>
 8024454:	6836      	ldr	r6, [r6, #0]
 8024456:	e7f7      	b.n	8024448 <__sfp+0x18>
 8024458:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 802445c:	b9d5      	cbnz	r5, 8024494 <__sfp+0x64>
 802445e:	4b16      	ldr	r3, [pc, #88]	; (80244b8 <__sfp+0x88>)
 8024460:	60e3      	str	r3, [r4, #12]
 8024462:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8024466:	6665      	str	r5, [r4, #100]	; 0x64
 8024468:	f7ff f90e 	bl	8023688 <__retarget_lock_init_recursive>
 802446c:	f7ff ff96 	bl	802439c <__sfp_lock_release>
 8024470:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8024474:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8024478:	6025      	str	r5, [r4, #0]
 802447a:	61a5      	str	r5, [r4, #24]
 802447c:	2208      	movs	r2, #8
 802447e:	4629      	mov	r1, r5
 8024480:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8024484:	f7ff f922 	bl	80236cc <memset>
 8024488:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 802448c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8024490:	4620      	mov	r0, r4
 8024492:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8024494:	3468      	adds	r4, #104	; 0x68
 8024496:	e7d9      	b.n	802444c <__sfp+0x1c>
 8024498:	2104      	movs	r1, #4
 802449a:	4638      	mov	r0, r7
 802449c:	f7ff ff62 	bl	8024364 <__sfmoreglue>
 80244a0:	4604      	mov	r4, r0
 80244a2:	6030      	str	r0, [r6, #0]
 80244a4:	2800      	cmp	r0, #0
 80244a6:	d1d5      	bne.n	8024454 <__sfp+0x24>
 80244a8:	f7ff ff78 	bl	802439c <__sfp_lock_release>
 80244ac:	230c      	movs	r3, #12
 80244ae:	603b      	str	r3, [r7, #0]
 80244b0:	e7ee      	b.n	8024490 <__sfp+0x60>
 80244b2:	bf00      	nop
 80244b4:	08027f68 	.word	0x08027f68
 80244b8:	ffff0001 	.word	0xffff0001

080244bc <_fwalk_reent>:
 80244bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80244c0:	4606      	mov	r6, r0
 80244c2:	4688      	mov	r8, r1
 80244c4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80244c8:	2700      	movs	r7, #0
 80244ca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80244ce:	f1b9 0901 	subs.w	r9, r9, #1
 80244d2:	d505      	bpl.n	80244e0 <_fwalk_reent+0x24>
 80244d4:	6824      	ldr	r4, [r4, #0]
 80244d6:	2c00      	cmp	r4, #0
 80244d8:	d1f7      	bne.n	80244ca <_fwalk_reent+0xe>
 80244da:	4638      	mov	r0, r7
 80244dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80244e0:	89ab      	ldrh	r3, [r5, #12]
 80244e2:	2b01      	cmp	r3, #1
 80244e4:	d907      	bls.n	80244f6 <_fwalk_reent+0x3a>
 80244e6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80244ea:	3301      	adds	r3, #1
 80244ec:	d003      	beq.n	80244f6 <_fwalk_reent+0x3a>
 80244ee:	4629      	mov	r1, r5
 80244f0:	4630      	mov	r0, r6
 80244f2:	47c0      	blx	r8
 80244f4:	4307      	orrs	r7, r0
 80244f6:	3568      	adds	r5, #104	; 0x68
 80244f8:	e7e9      	b.n	80244ce <_fwalk_reent+0x12>

080244fa <__swhatbuf_r>:
 80244fa:	b570      	push	{r4, r5, r6, lr}
 80244fc:	460e      	mov	r6, r1
 80244fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024502:	2900      	cmp	r1, #0
 8024504:	b096      	sub	sp, #88	; 0x58
 8024506:	4614      	mov	r4, r2
 8024508:	461d      	mov	r5, r3
 802450a:	da08      	bge.n	802451e <__swhatbuf_r+0x24>
 802450c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8024510:	2200      	movs	r2, #0
 8024512:	602a      	str	r2, [r5, #0]
 8024514:	061a      	lsls	r2, r3, #24
 8024516:	d410      	bmi.n	802453a <__swhatbuf_r+0x40>
 8024518:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802451c:	e00e      	b.n	802453c <__swhatbuf_r+0x42>
 802451e:	466a      	mov	r2, sp
 8024520:	f000 f8c2 	bl	80246a8 <_fstat_r>
 8024524:	2800      	cmp	r0, #0
 8024526:	dbf1      	blt.n	802450c <__swhatbuf_r+0x12>
 8024528:	9a01      	ldr	r2, [sp, #4]
 802452a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802452e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8024532:	425a      	negs	r2, r3
 8024534:	415a      	adcs	r2, r3
 8024536:	602a      	str	r2, [r5, #0]
 8024538:	e7ee      	b.n	8024518 <__swhatbuf_r+0x1e>
 802453a:	2340      	movs	r3, #64	; 0x40
 802453c:	2000      	movs	r0, #0
 802453e:	6023      	str	r3, [r4, #0]
 8024540:	b016      	add	sp, #88	; 0x58
 8024542:	bd70      	pop	{r4, r5, r6, pc}

08024544 <__smakebuf_r>:
 8024544:	898b      	ldrh	r3, [r1, #12]
 8024546:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8024548:	079d      	lsls	r5, r3, #30
 802454a:	4606      	mov	r6, r0
 802454c:	460c      	mov	r4, r1
 802454e:	d507      	bpl.n	8024560 <__smakebuf_r+0x1c>
 8024550:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8024554:	6023      	str	r3, [r4, #0]
 8024556:	6123      	str	r3, [r4, #16]
 8024558:	2301      	movs	r3, #1
 802455a:	6163      	str	r3, [r4, #20]
 802455c:	b002      	add	sp, #8
 802455e:	bd70      	pop	{r4, r5, r6, pc}
 8024560:	ab01      	add	r3, sp, #4
 8024562:	466a      	mov	r2, sp
 8024564:	f7ff ffc9 	bl	80244fa <__swhatbuf_r>
 8024568:	9900      	ldr	r1, [sp, #0]
 802456a:	4605      	mov	r5, r0
 802456c:	4630      	mov	r0, r6
 802456e:	f7ff f921 	bl	80237b4 <_malloc_r>
 8024572:	b948      	cbnz	r0, 8024588 <__smakebuf_r+0x44>
 8024574:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8024578:	059a      	lsls	r2, r3, #22
 802457a:	d4ef      	bmi.n	802455c <__smakebuf_r+0x18>
 802457c:	f023 0303 	bic.w	r3, r3, #3
 8024580:	f043 0302 	orr.w	r3, r3, #2
 8024584:	81a3      	strh	r3, [r4, #12]
 8024586:	e7e3      	b.n	8024550 <__smakebuf_r+0xc>
 8024588:	4b0d      	ldr	r3, [pc, #52]	; (80245c0 <__smakebuf_r+0x7c>)
 802458a:	62b3      	str	r3, [r6, #40]	; 0x28
 802458c:	89a3      	ldrh	r3, [r4, #12]
 802458e:	6020      	str	r0, [r4, #0]
 8024590:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8024594:	81a3      	strh	r3, [r4, #12]
 8024596:	9b00      	ldr	r3, [sp, #0]
 8024598:	6163      	str	r3, [r4, #20]
 802459a:	9b01      	ldr	r3, [sp, #4]
 802459c:	6120      	str	r0, [r4, #16]
 802459e:	b15b      	cbz	r3, 80245b8 <__smakebuf_r+0x74>
 80245a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80245a4:	4630      	mov	r0, r6
 80245a6:	f000 f891 	bl	80246cc <_isatty_r>
 80245aa:	b128      	cbz	r0, 80245b8 <__smakebuf_r+0x74>
 80245ac:	89a3      	ldrh	r3, [r4, #12]
 80245ae:	f023 0303 	bic.w	r3, r3, #3
 80245b2:	f043 0301 	orr.w	r3, r3, #1
 80245b6:	81a3      	strh	r3, [r4, #12]
 80245b8:	89a0      	ldrh	r0, [r4, #12]
 80245ba:	4305      	orrs	r5, r0
 80245bc:	81a5      	strh	r5, [r4, #12]
 80245be:	e7cd      	b.n	802455c <__smakebuf_r+0x18>
 80245c0:	08024359 	.word	0x08024359

080245c4 <__malloc_lock>:
 80245c4:	4801      	ldr	r0, [pc, #4]	; (80245cc <__malloc_lock+0x8>)
 80245c6:	f7ff b860 	b.w	802368a <__retarget_lock_acquire_recursive>
 80245ca:	bf00      	nop
 80245cc:	200244d9 	.word	0x200244d9

080245d0 <__malloc_unlock>:
 80245d0:	4801      	ldr	r0, [pc, #4]	; (80245d8 <__malloc_unlock+0x8>)
 80245d2:	f7ff b85c 	b.w	802368e <__retarget_lock_release_recursive>
 80245d6:	bf00      	nop
 80245d8:	200244d9 	.word	0x200244d9

080245dc <__sread>:
 80245dc:	b510      	push	{r4, lr}
 80245de:	460c      	mov	r4, r1
 80245e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80245e4:	f000 f894 	bl	8024710 <_read_r>
 80245e8:	2800      	cmp	r0, #0
 80245ea:	bfab      	itete	ge
 80245ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80245ee:	89a3      	ldrhlt	r3, [r4, #12]
 80245f0:	181b      	addge	r3, r3, r0
 80245f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80245f6:	bfac      	ite	ge
 80245f8:	6563      	strge	r3, [r4, #84]	; 0x54
 80245fa:	81a3      	strhlt	r3, [r4, #12]
 80245fc:	bd10      	pop	{r4, pc}

080245fe <__swrite>:
 80245fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024602:	461f      	mov	r7, r3
 8024604:	898b      	ldrh	r3, [r1, #12]
 8024606:	05db      	lsls	r3, r3, #23
 8024608:	4605      	mov	r5, r0
 802460a:	460c      	mov	r4, r1
 802460c:	4616      	mov	r6, r2
 802460e:	d505      	bpl.n	802461c <__swrite+0x1e>
 8024610:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024614:	2302      	movs	r3, #2
 8024616:	2200      	movs	r2, #0
 8024618:	f000 f868 	bl	80246ec <_lseek_r>
 802461c:	89a3      	ldrh	r3, [r4, #12]
 802461e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8024622:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8024626:	81a3      	strh	r3, [r4, #12]
 8024628:	4632      	mov	r2, r6
 802462a:	463b      	mov	r3, r7
 802462c:	4628      	mov	r0, r5
 802462e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8024632:	f000 b817 	b.w	8024664 <_write_r>

08024636 <__sseek>:
 8024636:	b510      	push	{r4, lr}
 8024638:	460c      	mov	r4, r1
 802463a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802463e:	f000 f855 	bl	80246ec <_lseek_r>
 8024642:	1c43      	adds	r3, r0, #1
 8024644:	89a3      	ldrh	r3, [r4, #12]
 8024646:	bf15      	itete	ne
 8024648:	6560      	strne	r0, [r4, #84]	; 0x54
 802464a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802464e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8024652:	81a3      	strheq	r3, [r4, #12]
 8024654:	bf18      	it	ne
 8024656:	81a3      	strhne	r3, [r4, #12]
 8024658:	bd10      	pop	{r4, pc}

0802465a <__sclose>:
 802465a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802465e:	f000 b813 	b.w	8024688 <_close_r>
	...

08024664 <_write_r>:
 8024664:	b538      	push	{r3, r4, r5, lr}
 8024666:	4d07      	ldr	r5, [pc, #28]	; (8024684 <_write_r+0x20>)
 8024668:	4604      	mov	r4, r0
 802466a:	4608      	mov	r0, r1
 802466c:	4611      	mov	r1, r2
 802466e:	2200      	movs	r2, #0
 8024670:	602a      	str	r2, [r5, #0]
 8024672:	461a      	mov	r2, r3
 8024674:	f7dd f903 	bl	800187e <_write>
 8024678:	1c43      	adds	r3, r0, #1
 802467a:	d102      	bne.n	8024682 <_write_r+0x1e>
 802467c:	682b      	ldr	r3, [r5, #0]
 802467e:	b103      	cbz	r3, 8024682 <_write_r+0x1e>
 8024680:	6023      	str	r3, [r4, #0]
 8024682:	bd38      	pop	{r3, r4, r5, pc}
 8024684:	2002467c 	.word	0x2002467c

08024688 <_close_r>:
 8024688:	b538      	push	{r3, r4, r5, lr}
 802468a:	4d06      	ldr	r5, [pc, #24]	; (80246a4 <_close_r+0x1c>)
 802468c:	2300      	movs	r3, #0
 802468e:	4604      	mov	r4, r0
 8024690:	4608      	mov	r0, r1
 8024692:	602b      	str	r3, [r5, #0]
 8024694:	f7dd f90f 	bl	80018b6 <_close>
 8024698:	1c43      	adds	r3, r0, #1
 802469a:	d102      	bne.n	80246a2 <_close_r+0x1a>
 802469c:	682b      	ldr	r3, [r5, #0]
 802469e:	b103      	cbz	r3, 80246a2 <_close_r+0x1a>
 80246a0:	6023      	str	r3, [r4, #0]
 80246a2:	bd38      	pop	{r3, r4, r5, pc}
 80246a4:	2002467c 	.word	0x2002467c

080246a8 <_fstat_r>:
 80246a8:	b538      	push	{r3, r4, r5, lr}
 80246aa:	4d07      	ldr	r5, [pc, #28]	; (80246c8 <_fstat_r+0x20>)
 80246ac:	2300      	movs	r3, #0
 80246ae:	4604      	mov	r4, r0
 80246b0:	4608      	mov	r0, r1
 80246b2:	4611      	mov	r1, r2
 80246b4:	602b      	str	r3, [r5, #0]
 80246b6:	f7dd f90a 	bl	80018ce <_fstat>
 80246ba:	1c43      	adds	r3, r0, #1
 80246bc:	d102      	bne.n	80246c4 <_fstat_r+0x1c>
 80246be:	682b      	ldr	r3, [r5, #0]
 80246c0:	b103      	cbz	r3, 80246c4 <_fstat_r+0x1c>
 80246c2:	6023      	str	r3, [r4, #0]
 80246c4:	bd38      	pop	{r3, r4, r5, pc}
 80246c6:	bf00      	nop
 80246c8:	2002467c 	.word	0x2002467c

080246cc <_isatty_r>:
 80246cc:	b538      	push	{r3, r4, r5, lr}
 80246ce:	4d06      	ldr	r5, [pc, #24]	; (80246e8 <_isatty_r+0x1c>)
 80246d0:	2300      	movs	r3, #0
 80246d2:	4604      	mov	r4, r0
 80246d4:	4608      	mov	r0, r1
 80246d6:	602b      	str	r3, [r5, #0]
 80246d8:	f7dd f909 	bl	80018ee <_isatty>
 80246dc:	1c43      	adds	r3, r0, #1
 80246de:	d102      	bne.n	80246e6 <_isatty_r+0x1a>
 80246e0:	682b      	ldr	r3, [r5, #0]
 80246e2:	b103      	cbz	r3, 80246e6 <_isatty_r+0x1a>
 80246e4:	6023      	str	r3, [r4, #0]
 80246e6:	bd38      	pop	{r3, r4, r5, pc}
 80246e8:	2002467c 	.word	0x2002467c

080246ec <_lseek_r>:
 80246ec:	b538      	push	{r3, r4, r5, lr}
 80246ee:	4d07      	ldr	r5, [pc, #28]	; (802470c <_lseek_r+0x20>)
 80246f0:	4604      	mov	r4, r0
 80246f2:	4608      	mov	r0, r1
 80246f4:	4611      	mov	r1, r2
 80246f6:	2200      	movs	r2, #0
 80246f8:	602a      	str	r2, [r5, #0]
 80246fa:	461a      	mov	r2, r3
 80246fc:	f7dd f902 	bl	8001904 <_lseek>
 8024700:	1c43      	adds	r3, r0, #1
 8024702:	d102      	bne.n	802470a <_lseek_r+0x1e>
 8024704:	682b      	ldr	r3, [r5, #0]
 8024706:	b103      	cbz	r3, 802470a <_lseek_r+0x1e>
 8024708:	6023      	str	r3, [r4, #0]
 802470a:	bd38      	pop	{r3, r4, r5, pc}
 802470c:	2002467c 	.word	0x2002467c

08024710 <_read_r>:
 8024710:	b538      	push	{r3, r4, r5, lr}
 8024712:	4d07      	ldr	r5, [pc, #28]	; (8024730 <_read_r+0x20>)
 8024714:	4604      	mov	r4, r0
 8024716:	4608      	mov	r0, r1
 8024718:	4611      	mov	r1, r2
 802471a:	2200      	movs	r2, #0
 802471c:	602a      	str	r2, [r5, #0]
 802471e:	461a      	mov	r2, r3
 8024720:	f7dd f890 	bl	8001844 <_read>
 8024724:	1c43      	adds	r3, r0, #1
 8024726:	d102      	bne.n	802472e <_read_r+0x1e>
 8024728:	682b      	ldr	r3, [r5, #0]
 802472a:	b103      	cbz	r3, 802472e <_read_r+0x1e>
 802472c:	6023      	str	r3, [r4, #0]
 802472e:	bd38      	pop	{r3, r4, r5, pc}
 8024730:	2002467c 	.word	0x2002467c

08024734 <_init>:
 8024734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024736:	bf00      	nop
 8024738:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802473a:	bc08      	pop	{r3}
 802473c:	469e      	mov	lr, r3
 802473e:	4770      	bx	lr

08024740 <_fini>:
 8024740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024742:	bf00      	nop
 8024744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8024746:	bc08      	pop	{r3}
 8024748:	469e      	mov	lr, r3
 802474a:	4770      	bx	lr
