
UOSM-Dashboard-MCU-F769NI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00027784  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003c70  08027984  08027984  00037984  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontSearchFlashSection 0000002c  0802b5f4  0802b5f4  0003b5f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0802b620  0802b620  001c7bc4  2**0
                  CONTENTS
  5 .ARM          00000008  0802b620  0802b620  0003b620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0802b628  0802b628  001c7bc4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000018  0802b628  0802b628  0003b628  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   0000000c  0802b640  0802b640  0003b640  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000110  20000000  0802b64c  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 CCMRAM        00009600  20000110  0802b75c  00040110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0001afbc  20009710  08034d5c  00049710  2**2
                  ALLOC
 12 ._user_heap_stack 00002004  200246cc  08034d5c  000546cc  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  001c7bc4  2**0
                  CONTENTS, READONLY
 14 ExtFlashSection 00177000  90000000  90000000  00050000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 FontFlashSection 00000b7c  90177000  90177000  001c7000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 TextFlashSection 00000048  90177b7c  90177b7c  001c7b7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 17 BufferSection 00177000  c0000000  c0000000  001d0000  2**2
                  ALLOC
 18 .debug_info   0009114c  00000000  00000000  001c7bf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_abbrev 000108f5  00000000  00000000  00258d3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_aranges 00003cc0  00000000  00000000  00269638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_ranges 00003828  00000000  00000000  0026d2f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_macro  0003c1ac  00000000  00000000  00270b20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line   00048ee6  00000000  00000000  002acccc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_str    001502c7  00000000  00000000  002f5bb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .comment      000000cf  00000000  00000000  00445e79  2**0
                  CONTENTS, READONLY
 26 .debug_frame  00010b9c  00000000  00000000  00445f48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20009710 	.word	0x20009710
 800021c:	00000000 	.word	0x00000000
 8000220:	0802796c 	.word	0x0802796c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20009714 	.word	0x20009714
 800023c:	0802796c 	.word	0x0802796c

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <vApplicationIdleHook>:
/* Hook prototypes */
void vApplicationIdleHook(void);

/* USER CODE BEGIN 2 */
void vApplicationIdleHook( void )
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80005e8:	bf00      	nop
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr
	...

080005f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80005f8:	f001 f993 	bl	8001922 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005fc:	f002 fa26 	bl	8002a4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000600:	f000 f84a 	bl	8000698 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000604:	f000 fc58 	bl	8000eb8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000608:	f000 fbd4 	bl	8000db4 <MX_DMA_Init>
  MX_DSIHOST_DSI_Init();
 800060c:	f000 f90e 	bl	800082c <MX_DSIHOST_DSI_Init>
  MX_LTDC_Init();
 8000610:	f000 fa74 	bl	8000afc <MX_LTDC_Init>
  MX_FMC_Init();
 8000614:	f000 fbf4 	bl	8000e00 <MX_FMC_Init>
  MX_QUADSPI_Init();
 8000618:	f000 fb32 	bl	8000c80 <MX_QUADSPI_Init>
  MX_DMA2D_Init();
 800061c:	f000 f8ce 	bl	80007bc <MX_DMA2D_Init>
  MX_I2C4_Init();
 8000620:	f000 fa18 	bl	8000a54 <MX_I2C4_Init>
  MX_CRC_Init();
 8000624:	f000 f8a8 	bl	8000778 <MX_CRC_Init>
  MX_JPEG_Init();
 8000628:	f000 fa54 	bl	8000ad4 <MX_JPEG_Init>
  MX_SPI1_Init();
 800062c:	f000 fb84 	bl	8000d38 <MX_SPI1_Init>
  MX_TouchGFX_Init();
 8000630:	f00d f885 	bl	800d73e <MX_TouchGFX_Init>
  /* Call PreOsInit function */
  MX_TouchGFX_PreOSInit();
 8000634:	f00d f87c 	bl	800d730 <MX_TouchGFX_PreOSInit>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000638:	f009 f9fa 	bl	8009a30 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800063c:	4a0d      	ldr	r2, [pc, #52]	; (8000674 <main+0x80>)
 800063e:	2100      	movs	r1, #0
 8000640:	480d      	ldr	r0, [pc, #52]	; (8000678 <main+0x84>)
 8000642:	f009 fa5f 	bl	8009b04 <osThreadNew>
 8000646:	4603      	mov	r3, r0
 8000648:	4a0c      	ldr	r2, [pc, #48]	; (800067c <main+0x88>)
 800064a:	6013      	str	r3, [r2, #0]

  /* creation of TouchGFXTask */
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 800064c:	4a0c      	ldr	r2, [pc, #48]	; (8000680 <main+0x8c>)
 800064e:	2100      	movs	r1, #0
 8000650:	480c      	ldr	r0, [pc, #48]	; (8000684 <main+0x90>)
 8000652:	f009 fa57 	bl	8009b04 <osThreadNew>
 8000656:	4603      	mov	r3, r0
 8000658:	4a0b      	ldr	r2, [pc, #44]	; (8000688 <main+0x94>)
 800065a:	6013      	str	r3, [r2, #0]

  /* creation of videoTask */
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
 800065c:	4a0b      	ldr	r2, [pc, #44]	; (800068c <main+0x98>)
 800065e:	2100      	movs	r1, #0
 8000660:	480b      	ldr	r0, [pc, #44]	; (8000690 <main+0x9c>)
 8000662:	f009 fa4f 	bl	8009b04 <osThreadNew>
 8000666:	4603      	mov	r3, r0
 8000668:	4a0a      	ldr	r2, [pc, #40]	; (8000694 <main+0xa0>)
 800066a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800066c:	f009 fa14 	bl	8009a98 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000670:	e7fe      	b.n	8000670 <main+0x7c>
 8000672:	bf00      	nop
 8000674:	08029a28 	.word	0x08029a28
 8000678:	08001913 	.word	0x08001913
 800067c:	20009abc 	.word	0x20009abc
 8000680:	08029a4c 	.word	0x08029a4c
 8000684:	0800d74f 	.word	0x0800d74f
 8000688:	20009ac0 	.word	0x20009ac0
 800068c:	08029a70 	.word	0x08029a70
 8000690:	08012879 	.word	0x08012879
 8000694:	20009ac4 	.word	0x20009ac4

08000698 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b094      	sub	sp, #80	; 0x50
 800069c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069e:	f107 031c 	add.w	r3, r7, #28
 80006a2:	2234      	movs	r2, #52	; 0x34
 80006a4:	2100      	movs	r1, #0
 80006a6:	4618      	mov	r0, r3
 80006a8:	f026 f928 	bl	80268fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ac:	f107 0308 	add.w	r3, r7, #8
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
 80006b4:	605a      	str	r2, [r3, #4]
 80006b6:	609a      	str	r2, [r3, #8]
 80006b8:	60da      	str	r2, [r3, #12]
 80006ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006bc:	4b2c      	ldr	r3, [pc, #176]	; (8000770 <SystemClock_Config+0xd8>)
 80006be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c0:	4a2b      	ldr	r2, [pc, #172]	; (8000770 <SystemClock_Config+0xd8>)
 80006c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006c6:	6413      	str	r3, [r2, #64]	; 0x40
 80006c8:	4b29      	ldr	r3, [pc, #164]	; (8000770 <SystemClock_Config+0xd8>)
 80006ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006d0:	607b      	str	r3, [r7, #4]
 80006d2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006d4:	4b27      	ldr	r3, [pc, #156]	; (8000774 <SystemClock_Config+0xdc>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4a26      	ldr	r2, [pc, #152]	; (8000774 <SystemClock_Config+0xdc>)
 80006da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006de:	6013      	str	r3, [r2, #0]
 80006e0:	4b24      	ldr	r3, [pc, #144]	; (8000774 <SystemClock_Config+0xdc>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006e8:	603b      	str	r3, [r7, #0]
 80006ea:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006ec:	2301      	movs	r3, #1
 80006ee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006f4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f6:	2302      	movs	r3, #2
 80006f8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006fa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006fe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000700:	2319      	movs	r3, #25
 8000702:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000704:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000708:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800070a:	2302      	movs	r3, #2
 800070c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800070e:	2302      	movs	r3, #2
 8000710:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 7;
 8000712:	2307      	movs	r3, #7
 8000714:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000716:	f107 031c 	add.w	r3, r7, #28
 800071a:	4618      	mov	r0, r3
 800071c:	f007 fb88 	bl	8007e30 <HAL_RCC_OscConfig>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000726:	f001 f979 	bl	8001a1c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800072a:	f006 fe83 	bl	8007434 <HAL_PWREx_EnableOverDrive>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000734:	f001 f972 	bl	8001a1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000738:	230f      	movs	r3, #15
 800073a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800073c:	2302      	movs	r3, #2
 800073e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000740:	2300      	movs	r3, #0
 8000742:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000744:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000748:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800074a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800074e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000750:	f107 0308 	add.w	r3, r7, #8
 8000754:	2106      	movs	r1, #6
 8000756:	4618      	mov	r0, r3
 8000758:	f007 fe18 	bl	800838c <HAL_RCC_ClockConfig>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000762:	f001 f95b 	bl	8001a1c <Error_Handler>
  }
}
 8000766:	bf00      	nop
 8000768:	3750      	adds	r7, #80	; 0x50
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	40023800 	.word	0x40023800
 8000774:	40007000 	.word	0x40007000

08000778 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800077c:	4b0d      	ldr	r3, [pc, #52]	; (80007b4 <MX_CRC_Init+0x3c>)
 800077e:	4a0e      	ldr	r2, [pc, #56]	; (80007b8 <MX_CRC_Init+0x40>)
 8000780:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000782:	4b0c      	ldr	r3, [pc, #48]	; (80007b4 <MX_CRC_Init+0x3c>)
 8000784:	2200      	movs	r2, #0
 8000786:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000788:	4b0a      	ldr	r3, [pc, #40]	; (80007b4 <MX_CRC_Init+0x3c>)
 800078a:	2200      	movs	r2, #0
 800078c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800078e:	4b09      	ldr	r3, [pc, #36]	; (80007b4 <MX_CRC_Init+0x3c>)
 8000790:	2200      	movs	r2, #0
 8000792:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000794:	4b07      	ldr	r3, [pc, #28]	; (80007b4 <MX_CRC_Init+0x3c>)
 8000796:	2200      	movs	r2, #0
 8000798:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800079a:	4b06      	ldr	r3, [pc, #24]	; (80007b4 <MX_CRC_Init+0x3c>)
 800079c:	2201      	movs	r2, #1
 800079e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80007a0:	4804      	ldr	r0, [pc, #16]	; (80007b4 <MX_CRC_Init+0x3c>)
 80007a2:	f002 fb03 	bl	8002dac <HAL_CRC_Init>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80007ac:	f001 f936 	bl	8001a1c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80007b0:	bf00      	nop
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	2000972c 	.word	0x2000972c
 80007b8:	40023000 	.word	0x40023000

080007bc <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80007c0:	4b18      	ldr	r3, [pc, #96]	; (8000824 <MX_DMA2D_Init+0x68>)
 80007c2:	4a19      	ldr	r2, [pc, #100]	; (8000828 <MX_DMA2D_Init+0x6c>)
 80007c4:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80007c6:	4b17      	ldr	r3, [pc, #92]	; (8000824 <MX_DMA2D_Init+0x68>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80007cc:	4b15      	ldr	r3, [pc, #84]	; (8000824 <MX_DMA2D_Init+0x68>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80007d2:	4b14      	ldr	r3, [pc, #80]	; (8000824 <MX_DMA2D_Init+0x68>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80007d8:	4b12      	ldr	r3, [pc, #72]	; (8000824 <MX_DMA2D_Init+0x68>)
 80007da:	2200      	movs	r2, #0
 80007dc:	639a      	str	r2, [r3, #56]	; 0x38
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80007de:	4b11      	ldr	r3, [pc, #68]	; (8000824 <MX_DMA2D_Init+0x68>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80007e4:	4b0f      	ldr	r3, [pc, #60]	; (8000824 <MX_DMA2D_Init+0x68>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80007ea:	4b0e      	ldr	r3, [pc, #56]	; (8000824 <MX_DMA2D_Init+0x68>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 80007f0:	4b0c      	ldr	r3, [pc, #48]	; (8000824 <MX_DMA2D_Init+0x68>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 80007f6:	4b0b      	ldr	r3, [pc, #44]	; (8000824 <MX_DMA2D_Init+0x68>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80007fc:	4809      	ldr	r0, [pc, #36]	; (8000824 <MX_DMA2D_Init+0x68>)
 80007fe:	f002 ff65 	bl	80036cc <HAL_DMA2D_Init>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_DMA2D_Init+0x50>
  {
    Error_Handler();
 8000808:	f001 f908 	bl	8001a1c <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800080c:	2101      	movs	r1, #1
 800080e:	4805      	ldr	r0, [pc, #20]	; (8000824 <MX_DMA2D_Init+0x68>)
 8000810:	f003 f8c6 	bl	80039a0 <HAL_DMA2D_ConfigLayer>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_DMA2D_Init+0x62>
  {
    Error_Handler();
 800081a:	f001 f8ff 	bl	8001a1c <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800081e:	bf00      	nop
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	20009750 	.word	0x20009750
 8000828:	4002b000 	.word	0x4002b000

0800082c <MX_DSIHOST_DSI_Init>:
  * @brief DSIHOST Initialization Function
  * @param None
  * @retval None
  */
static void MX_DSIHOST_DSI_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b0aa      	sub	sp, #168	; 0xa8
 8000830:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */
  /* Activate XRES active low */
  HAL_GPIO_WritePin(DSI_RESET_GPIO_Port, DSI_RESET_Pin, GPIO_PIN_RESET);
 8000832:	2200      	movs	r2, #0
 8000834:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000838:	4883      	ldr	r0, [pc, #524]	; (8000a48 <MX_DSIHOST_DSI_Init+0x21c>)
 800083a:	f004 f931 	bl	8004aa0 <HAL_GPIO_WritePin>
  HAL_Delay(20); /* wait 20 ms */
 800083e:	2014      	movs	r0, #20
 8000840:	f002 f932 	bl	8002aa8 <HAL_Delay>
  /* Desactivate XRES */
  HAL_GPIO_WritePin(DSI_RESET_GPIO_Port, DSI_RESET_Pin, GPIO_PIN_SET);
 8000844:	2201      	movs	r2, #1
 8000846:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800084a:	487f      	ldr	r0, [pc, #508]	; (8000a48 <MX_DSIHOST_DSI_Init+0x21c>)
 800084c:	f004 f928 	bl	8004aa0 <HAL_GPIO_WritePin>
  /* Wait for 10ms after releasing XRES before sending commands */
  HAL_Delay(10);
 8000850:	200a      	movs	r0, #10
 8000852:	f002 f929 	bl	8002aa8 <HAL_Delay>
  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 8000856:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800085a:	2200      	movs	r2, #0
 800085c:	601a      	str	r2, [r3, #0]
 800085e:	605a      	str	r2, [r3, #4]
 8000860:	609a      	str	r2, [r3, #8]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8000862:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000866:	2224      	movs	r2, #36	; 0x24
 8000868:	2100      	movs	r1, #0
 800086a:	4618      	mov	r0, r3
 800086c:	f026 f846 	bl	80268fc <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 8000870:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000874:	2200      	movs	r2, #0
 8000876:	601a      	str	r2, [r3, #0]
 8000878:	605a      	str	r2, [r3, #4]
 800087a:	609a      	str	r2, [r3, #8]
 800087c:	60da      	str	r2, [r3, #12]
 800087e:	611a      	str	r2, [r3, #16]
 8000880:	615a      	str	r2, [r3, #20]
  DSI_LPCmdTypeDef LPCmd = {0};
 8000882:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000886:	2234      	movs	r2, #52	; 0x34
 8000888:	2100      	movs	r1, #0
 800088a:	4618      	mov	r0, r3
 800088c:	f026 f836 	bl	80268fc <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 8000890:	463b      	mov	r3, r7
 8000892:	222c      	movs	r2, #44	; 0x2c
 8000894:	2100      	movs	r1, #0
 8000896:	4618      	mov	r0, r3
 8000898:	f026 f830 	bl	80268fc <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 800089c:	4b6b      	ldr	r3, [pc, #428]	; (8000a4c <MX_DSIHOST_DSI_Init+0x220>)
 800089e:	4a6c      	ldr	r2, [pc, #432]	; (8000a50 <MX_DSIHOST_DSI_Init+0x224>)
 80008a0:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 80008a2:	4b6a      	ldr	r3, [pc, #424]	; (8000a4c <MX_DSIHOST_DSI_Init+0x220>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 4;
 80008a8:	4b68      	ldr	r3, [pc, #416]	; (8000a4c <MX_DSIHOST_DSI_Init+0x220>)
 80008aa:	2204      	movs	r2, #4
 80008ac:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 80008ae:	4b67      	ldr	r3, [pc, #412]	; (8000a4c <MX_DSIHOST_DSI_Init+0x220>)
 80008b0:	2201      	movs	r2, #1
 80008b2:	60da      	str	r2, [r3, #12]
  PLLInit.PLLNDIV = 100;
 80008b4:	2364      	movs	r3, #100	; 0x64
 80008b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  PLLInit.PLLIDF = DSI_PLL_IN_DIV5;
 80008ba:	2305      	movs	r3, #5
 80008bc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 80008c0:	2300      	movs	r3, #0
 80008c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 80008c6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80008ca:	4619      	mov	r1, r3
 80008cc:	485f      	ldr	r0, [pc, #380]	; (8000a4c <MX_DSIHOST_DSI_Init+0x220>)
 80008ce:	f003 f935 	bl	8003b3c <HAL_DSI_Init>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_DSIHOST_DSI_Init+0xb0>
  {
    Error_Handler();
 80008d8:	f001 f8a0 	bl	8001a1c <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 80008dc:	2301      	movs	r3, #1
 80008de:	67bb      	str	r3, [r7, #120]	; 0x78
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 80008e0:	2300      	movs	r3, #0
 80008e2:	67fb      	str	r3, [r7, #124]	; 0x7c
  HostTimeouts.LowPowerReceptionTimeout = 0;
 80008e4:	2300      	movs	r3, #0
 80008e6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  HostTimeouts.HighSpeedReadTimeout = 0;
 80008ea:	2300      	movs	r3, #0
 80008ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  HostTimeouts.LowPowerReadTimeout = 0;
 80008f0:	2300      	movs	r3, #0
 80008f2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  HostTimeouts.HighSpeedWriteTimeout = 0;
 80008f6:	2300      	movs	r3, #0
 80008f8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 80008fc:	2300      	movs	r3, #0
 80008fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  HostTimeouts.LowPowerWriteTimeout = 0;
 8000902:	2300      	movs	r3, #0
 8000904:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  HostTimeouts.BTATimeout = 0;
 8000908:	2300      	movs	r3, #0
 800090a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 800090e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000912:	4619      	mov	r1, r3
 8000914:	484d      	ldr	r0, [pc, #308]	; (8000a4c <MX_DSIHOST_DSI_Init+0x220>)
 8000916:	f003 fdc3 	bl	80044a0 <HAL_DSI_ConfigHostTimeouts>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_DSIHOST_DSI_Init+0xf8>
  {
    Error_Handler();
 8000920:	f001 f87c 	bl	8001a1c <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 28;
 8000924:	231c      	movs	r3, #28
 8000926:	663b      	str	r3, [r7, #96]	; 0x60
  PhyTimings.ClockLaneLP2HSTime = 33;
 8000928:	2321      	movs	r3, #33	; 0x21
 800092a:	667b      	str	r3, [r7, #100]	; 0x64
  PhyTimings.DataLaneHS2LPTime = 15;
 800092c:	230f      	movs	r3, #15
 800092e:	66bb      	str	r3, [r7, #104]	; 0x68
  PhyTimings.DataLaneLP2HSTime = 25;
 8000930:	2319      	movs	r3, #25
 8000932:	66fb      	str	r3, [r7, #108]	; 0x6c
  PhyTimings.DataLaneMaxReadTime = 0;
 8000934:	2300      	movs	r3, #0
 8000936:	673b      	str	r3, [r7, #112]	; 0x70
  PhyTimings.StopWaitTime = 0;
 8000938:	2300      	movs	r3, #0
 800093a:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 800093c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000940:	4619      	mov	r1, r3
 8000942:	4842      	ldr	r0, [pc, #264]	; (8000a4c <MX_DSIHOST_DSI_Init+0x220>)
 8000944:	f003 fd42 	bl	80043cc <HAL_DSI_ConfigPhyTimer>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <MX_DSIHOST_DSI_Init+0x126>
  {
    Error_Handler();
 800094e:	f001 f865 	bl	8001a1c <Error_Handler>
  }
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 8000952:	2104      	movs	r1, #4
 8000954:	483d      	ldr	r0, [pc, #244]	; (8000a4c <MX_DSIHOST_DSI_Init+0x220>)
 8000956:	f003 fd11 	bl	800437c <HAL_DSI_ConfigFlowControl>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_DSIHOST_DSI_Init+0x138>
  {
    Error_Handler();
 8000960:	f001 f85c 	bl	8001a1c <Error_Handler>
  }
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 8000964:	f242 7110 	movw	r1, #10000	; 0x2710
 8000968:	4838      	ldr	r0, [pc, #224]	; (8000a4c <MX_DSIHOST_DSI_Init+0x220>)
 800096a:	f003 febf 	bl	80046ec <HAL_DSI_SetLowPowerRXFilter>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <MX_DSIHOST_DSI_Init+0x14c>
  {
    Error_Handler();
 8000974:	f001 f852 	bl	8001a1c <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_OVF) != HAL_OK)
 8000978:	f44f 7180 	mov.w	r1, #256	; 0x100
 800097c:	4833      	ldr	r0, [pc, #204]	; (8000a4c <MX_DSIHOST_DSI_Init+0x220>)
 800097e:	f003 f9f9 	bl	8003d74 <HAL_DSI_ConfigErrorMonitor>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <MX_DSIHOST_DSI_Init+0x160>
  {
    Error_Handler();
 8000988:	f001 f848 	bl	8001a1c <Error_Handler>
  }
  LPCmd.LPGenShortWriteNoP = DSI_LP_GSW0P_ENABLE;
 800098c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000990:	62fb      	str	r3, [r7, #44]	; 0x2c
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 8000992:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000996:	633b      	str	r3, [r7, #48]	; 0x30
  LPCmd.LPGenShortWriteTwoP = DSI_LP_GSW2P_ENABLE;
 8000998:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800099c:	637b      	str	r3, [r7, #52]	; 0x34
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 800099e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80009a2:	63bb      	str	r3, [r7, #56]	; 0x38
  LPCmd.LPGenShortReadOneP = DSI_LP_GSR1P_ENABLE;
 80009a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 80009aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009ae:	643b      	str	r3, [r7, #64]	; 0x40
  LPCmd.LPGenLongWrite = DSI_LP_GLW_ENABLE;
 80009b0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80009b4:	647b      	str	r3, [r7, #68]	; 0x44
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 80009b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009ba:	64bb      	str	r3, [r7, #72]	; 0x48
  LPCmd.LPDcsShortWriteOneP = DSI_LP_DSW1P_ENABLE;
 80009bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80009c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 80009c2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80009c6:	653b      	str	r3, [r7, #80]	; 0x50
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_ENABLE;
 80009c8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80009cc:	657b      	str	r3, [r7, #84]	; 0x54
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 80009ce:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80009d2:	65bb      	str	r3, [r7, #88]	; 0x58
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_ENABLE;
 80009d4:	2302      	movs	r3, #2
 80009d6:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 80009d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009dc:	4619      	mov	r1, r3
 80009de:	481b      	ldr	r0, [pc, #108]	; (8000a4c <MX_DSIHOST_DSI_Init+0x220>)
 80009e0:	f003 fc6e 	bl	80042c0 <HAL_DSI_ConfigCommand>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_DSIHOST_DSI_Init+0x1c2>
  {
    Error_Handler();
 80009ea:	f001 f817 	bl	8001a1c <Error_Handler>
  }
  CmdCfg.VirtualChannelID = 0;
 80009ee:	2300      	movs	r3, #0
 80009f0:	603b      	str	r3, [r7, #0]
  CmdCfg.ColorCoding = DSI_RGB565;
 80009f2:	2300      	movs	r3, #0
 80009f4:	607b      	str	r3, [r7, #4]
  CmdCfg.CommandSize = 200;
 80009f6:	23c8      	movs	r3, #200	; 0xc8
 80009f8:	60bb      	str	r3, [r7, #8]
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 80009fa:	2310      	movs	r3, #16
 80009fc:	60fb      	str	r3, [r7, #12]
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 80009fe:	2300      	movs	r3, #0
 8000a00:	613b      	str	r3, [r7, #16]
  CmdCfg.HSPolarity = DSI_HSYNC_ACTIVE_LOW;
 8000a02:	2304      	movs	r3, #4
 8000a04:	617b      	str	r3, [r7, #20]
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_LOW;
 8000a06:	2302      	movs	r3, #2
 8000a08:	61bb      	str	r3, [r7, #24]
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	61fb      	str	r3, [r7, #28]
  CmdCfg.VSyncPol = DSI_VSYNC_FALLING;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	623b      	str	r3, [r7, #32]
  CmdCfg.AutomaticRefresh = DSI_AR_DISABLE;
 8000a12:	2300      	movs	r3, #0
 8000a14:	627b      	str	r3, [r7, #36]	; 0x24
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 8000a16:	2301      	movs	r3, #1
 8000a18:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8000a1a:	463b      	mov	r3, r7
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	480b      	ldr	r0, [pc, #44]	; (8000a4c <MX_DSIHOST_DSI_Init+0x220>)
 8000a20:	f003 fb74 	bl	800410c <HAL_DSI_ConfigAdaptedCommandMode>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_DSIHOST_DSI_Init+0x202>
  {
    Error_Handler();
 8000a2a:	f000 fff7 	bl	8001a1c <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8000a2e:	2100      	movs	r1, #0
 8000a30:	4806      	ldr	r0, [pc, #24]	; (8000a4c <MX_DSIHOST_DSI_Init+0x220>)
 8000a32:	f003 fb42 	bl	80040ba <HAL_DSI_SetGenericVCID>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_DSIHOST_DSI_Init+0x214>
  {
    Error_Handler();
 8000a3c:	f000 ffee 	bl	8001a1c <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */

  /* USER CODE END DSIHOST_Init 2 */

}
 8000a40:	bf00      	nop
 8000a42:	37a8      	adds	r7, #168	; 0xa8
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	40022400 	.word	0x40022400
 8000a4c:	200097a8 	.word	0x200097a8
 8000a50:	40016c00 	.word	0x40016c00

08000a54 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C4_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000a58:	4b1b      	ldr	r3, [pc, #108]	; (8000ac8 <MX_I2C4_Init+0x74>)
 8000a5a:	4a1c      	ldr	r2, [pc, #112]	; (8000acc <MX_I2C4_Init+0x78>)
 8000a5c:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00C0EAFF;
 8000a5e:	4b1a      	ldr	r3, [pc, #104]	; (8000ac8 <MX_I2C4_Init+0x74>)
 8000a60:	4a1b      	ldr	r2, [pc, #108]	; (8000ad0 <MX_I2C4_Init+0x7c>)
 8000a62:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000a64:	4b18      	ldr	r3, [pc, #96]	; (8000ac8 <MX_I2C4_Init+0x74>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a6a:	4b17      	ldr	r3, [pc, #92]	; (8000ac8 <MX_I2C4_Init+0x74>)
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a70:	4b15      	ldr	r3, [pc, #84]	; (8000ac8 <MX_I2C4_Init+0x74>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000a76:	4b14      	ldr	r3, [pc, #80]	; (8000ac8 <MX_I2C4_Init+0x74>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a7c:	4b12      	ldr	r3, [pc, #72]	; (8000ac8 <MX_I2C4_Init+0x74>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a82:	4b11      	ldr	r3, [pc, #68]	; (8000ac8 <MX_I2C4_Init+0x74>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a88:	4b0f      	ldr	r3, [pc, #60]	; (8000ac8 <MX_I2C4_Init+0x74>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000a8e:	480e      	ldr	r0, [pc, #56]	; (8000ac8 <MX_I2C4_Init+0x74>)
 8000a90:	f004 f83a 	bl	8004b08 <HAL_I2C_Init>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000a9a:	f000 ffbf 	bl	8001a1c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	4809      	ldr	r0, [pc, #36]	; (8000ac8 <MX_I2C4_Init+0x74>)
 8000aa2:	f004 f8db 	bl	8004c5c <HAL_I2CEx_ConfigAnalogFilter>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000aac:	f000 ffb6 	bl	8001a1c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	4805      	ldr	r0, [pc, #20]	; (8000ac8 <MX_I2C4_Init+0x74>)
 8000ab4:	f004 f91d 	bl	8004cf2 <HAL_I2CEx_ConfigDigitalFilter>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000abe:	f000 ffad 	bl	8001a1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000ac2:	bf00      	nop
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	200097c4 	.word	0x200097c4
 8000acc:	40006000 	.word	0x40006000
 8000ad0:	00c0eaff 	.word	0x00c0eaff

08000ad4 <MX_JPEG_Init>:
  * @brief JPEG Initialization Function
  * @param None
  * @retval None
  */
static void MX_JPEG_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE END JPEG_Init 0 */

  /* USER CODE BEGIN JPEG_Init 1 */

  /* USER CODE END JPEG_Init 1 */
  hjpeg.Instance = JPEG;
 8000ad8:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <MX_JPEG_Init+0x20>)
 8000ada:	4a07      	ldr	r2, [pc, #28]	; (8000af8 <MX_JPEG_Init+0x24>)
 8000adc:	601a      	str	r2, [r3, #0]
  if (HAL_JPEG_Init(&hjpeg) != HAL_OK)
 8000ade:	4805      	ldr	r0, [pc, #20]	; (8000af4 <MX_JPEG_Init+0x20>)
 8000ae0:	f004 f954 	bl	8004d8c <HAL_JPEG_Init>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <MX_JPEG_Init+0x1a>
  {
    Error_Handler();
 8000aea:	f000 ff97 	bl	8001a1c <Error_Handler>
  }
  /* USER CODE BEGIN JPEG_Init 2 */

  /* USER CODE END JPEG_Init 2 */

}
 8000aee:	bf00      	nop
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	20009818 	.word	0x20009818
 8000af8:	50051000 	.word	0x50051000

08000afc <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b09c      	sub	sp, #112	; 0x70
 8000b00:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000b02:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000b06:	2234      	movs	r2, #52	; 0x34
 8000b08:	2100      	movs	r1, #0
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f025 fef6 	bl	80268fc <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000b10:	4b58      	ldr	r3, [pc, #352]	; (8000c74 <MX_LTDC_Init+0x178>)
 8000b12:	4a59      	ldr	r2, [pc, #356]	; (8000c78 <MX_LTDC_Init+0x17c>)
 8000b14:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000b16:	4b57      	ldr	r3, [pc, #348]	; (8000c74 <MX_LTDC_Init+0x178>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000b1c:	4b55      	ldr	r3, [pc, #340]	; (8000c74 <MX_LTDC_Init+0x178>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000b22:	4b54      	ldr	r3, [pc, #336]	; (8000c74 <MX_LTDC_Init+0x178>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000b28:	4b52      	ldr	r3, [pc, #328]	; (8000c74 <MX_LTDC_Init+0x178>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 1;
 8000b2e:	4b51      	ldr	r3, [pc, #324]	; (8000c74 <MX_LTDC_Init+0x178>)
 8000b30:	2201      	movs	r2, #1
 8000b32:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8000b34:	4b4f      	ldr	r3, [pc, #316]	; (8000c74 <MX_LTDC_Init+0x178>)
 8000b36:	2201      	movs	r2, #1
 8000b38:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 2;
 8000b3a:	4b4e      	ldr	r3, [pc, #312]	; (8000c74 <MX_LTDC_Init+0x178>)
 8000b3c:	2202      	movs	r2, #2
 8000b3e:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 2;
 8000b40:	4b4c      	ldr	r3, [pc, #304]	; (8000c74 <MX_LTDC_Init+0x178>)
 8000b42:	2202      	movs	r2, #2
 8000b44:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 202;
 8000b46:	4b4b      	ldr	r3, [pc, #300]	; (8000c74 <MX_LTDC_Init+0x178>)
 8000b48:	22ca      	movs	r2, #202	; 0xca
 8000b4a:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 482;
 8000b4c:	4b49      	ldr	r3, [pc, #292]	; (8000c74 <MX_LTDC_Init+0x178>)
 8000b4e:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8000b52:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 203;
 8000b54:	4b47      	ldr	r3, [pc, #284]	; (8000c74 <MX_LTDC_Init+0x178>)
 8000b56:	22cb      	movs	r2, #203	; 0xcb
 8000b58:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 483;
 8000b5a:	4b46      	ldr	r3, [pc, #280]	; (8000c74 <MX_LTDC_Init+0x178>)
 8000b5c:	f240 12e3 	movw	r2, #483	; 0x1e3
 8000b60:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000b62:	4b44      	ldr	r3, [pc, #272]	; (8000c74 <MX_LTDC_Init+0x178>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000b6a:	4b42      	ldr	r3, [pc, #264]	; (8000c74 <MX_LTDC_Init+0x178>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000b72:	4b40      	ldr	r3, [pc, #256]	; (8000c74 <MX_LTDC_Init+0x178>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000b7a:	483e      	ldr	r0, [pc, #248]	; (8000c74 <MX_LTDC_Init+0x178>)
 8000b7c:	f006 f86a 	bl	8006c54 <HAL_LTDC_Init>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <MX_LTDC_Init+0x8e>
  {
    Error_Handler();
 8000b86:	f000 ff49 	bl	8001a1c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 200;
 8000b8e:	23c8      	movs	r3, #200	; 0xc8
 8000b90:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8000b92:	2300      	movs	r3, #0
 8000b94:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 480;
 8000b96:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000b9a:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 255;
 8000ba0:	23ff      	movs	r3, #255	; 0xff
 8000ba2:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000ba8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bac:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000bae:	2305      	movs	r3, #5
 8000bb0:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0xC0000000;
 8000bb2:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8000bb6:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 200;
 8000bb8:	23c8      	movs	r3, #200	; 0xc8
 8000bba:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 480;
 8000bbc:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000bc0:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000bd4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000bd8:	2200      	movs	r2, #0
 8000bda:	4619      	mov	r1, r3
 8000bdc:	4825      	ldr	r0, [pc, #148]	; (8000c74 <MX_LTDC_Init+0x178>)
 8000bde:	f006 f9cb 	bl	8006f78 <HAL_LTDC_ConfigLayer>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 8000be8:	f000 ff18 	bl	8001a1c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */
  __HAL_LTDC_DISABLE(&hltdc);
 8000bec:	4b21      	ldr	r3, [pc, #132]	; (8000c74 <MX_LTDC_Init+0x178>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	699a      	ldr	r2, [r3, #24]
 8000bf2:	4b20      	ldr	r3, [pc, #128]	; (8000c74 <MX_LTDC_Init+0x178>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	f022 0201 	bic.w	r2, r2, #1
 8000bfa:	619a      	str	r2, [r3, #24]
  DSI_LPCmdTypeDef LPCmd;

  HAL_DSI_Start(&hdsi);
 8000bfc:	481f      	ldr	r0, [pc, #124]	; (8000c7c <MX_LTDC_Init+0x180>)
 8000bfe:	f003 fd17 	bl	8004630 <HAL_DSI_Start>
  OTM8009A_Init(OTM8009A_FORMAT_RBG565, LCD_ORIENTATION_LANDSCAPE);
 8000c02:	2101      	movs	r1, #1
 8000c04:	2002      	movs	r0, #2
 8000c06:	f001 fcc9 	bl	800259c <OTM8009A_Init>

  HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_DISPOFF, 0x00);
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	9300      	str	r3, [sp, #0]
 8000c0e:	2328      	movs	r3, #40	; 0x28
 8000c10:	2215      	movs	r2, #21
 8000c12:	2100      	movs	r1, #0
 8000c14:	4819      	ldr	r0, [pc, #100]	; (8000c7c <MX_LTDC_Init+0x180>)
 8000c16:	f003 fd47 	bl	80046a8 <HAL_DSI_ShortWrite>

  LPCmd.LPGenShortWriteNoP = DSI_LP_GSW0P_DISABLE;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	603b      	str	r3, [r7, #0]
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_DISABLE;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	607b      	str	r3, [r7, #4]
  LPCmd.LPGenShortWriteTwoP = DSI_LP_GSW2P_DISABLE;
 8000c22:	2300      	movs	r3, #0
 8000c24:	60bb      	str	r3, [r7, #8]
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_DISABLE;
 8000c26:	2300      	movs	r3, #0
 8000c28:	60fb      	str	r3, [r7, #12]
  LPCmd.LPGenShortReadOneP = DSI_LP_GSR1P_DISABLE;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	613b      	str	r3, [r7, #16]
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_DISABLE;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	617b      	str	r3, [r7, #20]
  LPCmd.LPGenLongWrite = DSI_LP_GLW_DISABLE;
 8000c32:	2300      	movs	r3, #0
 8000c34:	61bb      	str	r3, [r7, #24]
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_DISABLE;
 8000c36:	2300      	movs	r3, #0
 8000c38:	61fb      	str	r3, [r7, #28]
  LPCmd.LPDcsShortWriteOneP = DSI_LP_DSW1P_DISABLE;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	623b      	str	r3, [r7, #32]
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_DISABLE;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	627b      	str	r3, [r7, #36]	; 0x24
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_DISABLE;
 8000c42:	2300      	movs	r3, #0
 8000c44:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_DSI_ConfigCommand(&hdsi, &LPCmd);
 8000c46:	463b      	mov	r3, r7
 8000c48:	4619      	mov	r1, r3
 8000c4a:	480c      	ldr	r0, [pc, #48]	; (8000c7c <MX_LTDC_Init+0x180>)
 8000c4c:	f003 fb38 	bl	80042c0 <HAL_DSI_ConfigCommand>

  HAL_LTDC_SetPitch(&hltdc, 800, 0);
 8000c50:	2200      	movs	r2, #0
 8000c52:	f44f 7148 	mov.w	r1, #800	; 0x320
 8000c56:	4807      	ldr	r0, [pc, #28]	; (8000c74 <MX_LTDC_Init+0x178>)
 8000c58:	f006 f9cc 	bl	8006ff4 <HAL_LTDC_SetPitch>
  __HAL_LTDC_ENABLE(&hltdc);
 8000c5c:	4b05      	ldr	r3, [pc, #20]	; (8000c74 <MX_LTDC_Init+0x178>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	699a      	ldr	r2, [r3, #24]
 8000c62:	4b04      	ldr	r3, [pc, #16]	; (8000c74 <MX_LTDC_Init+0x178>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f042 0201 	orr.w	r2, r2, #1
 8000c6a:	619a      	str	r2, [r3, #24]
  // HAL_LTDC_SetPitch(&hltdc, 800, 0);
  // __HAL_LTDC_ENABLE(&hltdc);

  /* USER CODE END LTDC_Init 2 */

}
 8000c6c:	bf00      	nop
 8000c6e:	3768      	adds	r7, #104	; 0x68
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	20009930 	.word	0x20009930
 8000c78:	40016800 	.word	0x40016800
 8000c7c:	200097a8 	.word	0x200097a8

08000c80 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000c84:	4b2a      	ldr	r3, [pc, #168]	; (8000d30 <MX_QUADSPI_Init+0xb0>)
 8000c86:	4a2b      	ldr	r2, [pc, #172]	; (8000d34 <MX_QUADSPI_Init+0xb4>)
 8000c88:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8000c8a:	4b29      	ldr	r3, [pc, #164]	; (8000d30 <MX_QUADSPI_Init+0xb0>)
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 16;
 8000c90:	4b27      	ldr	r3, [pc, #156]	; (8000d30 <MX_QUADSPI_Init+0xb0>)
 8000c92:	2210      	movs	r2, #16
 8000c94:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000c96:	4b26      	ldr	r3, [pc, #152]	; (8000d30 <MX_QUADSPI_Init+0xb0>)
 8000c98:	2210      	movs	r2, #16
 8000c9a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 25;
 8000c9c:	4b24      	ldr	r3, [pc, #144]	; (8000d30 <MX_QUADSPI_Init+0xb0>)
 8000c9e:	2219      	movs	r2, #25
 8000ca0:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE;
 8000ca2:	4b23      	ldr	r3, [pc, #140]	; (8000d30 <MX_QUADSPI_Init+0xb0>)
 8000ca4:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000ca8:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000caa:	4b21      	ldr	r3, [pc, #132]	; (8000d30 <MX_QUADSPI_Init+0xb0>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000cb0:	4b1f      	ldr	r3, [pc, #124]	; (8000d30 <MX_QUADSPI_Init+0xb0>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000cb6:	4b1e      	ldr	r3, [pc, #120]	; (8000d30 <MX_QUADSPI_Init+0xb0>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000cbc:	481c      	ldr	r0, [pc, #112]	; (8000d30 <MX_QUADSPI_Init+0xb0>)
 8000cbe:	f006 fc09 	bl	80074d4 <HAL_QSPI_Init>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8000cc8:	f000 fea8 	bl	8001a1c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */
  /* QSPI memory reset */
  if (QSPI_ResetMemory(&hqspi) != QSPI_OK)
 8000ccc:	4818      	ldr	r0, [pc, #96]	; (8000d30 <MX_QUADSPI_Init+0xb0>)
 8000cce:	f000 fa49 	bl	8001164 <QSPI_ResetMemory>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <MX_QUADSPI_Init+0x5c>
  {
    Error_Handler();
 8000cd8:	f000 fea0 	bl	8001a1c <Error_Handler>
  }

  /* Put QSPI memory in QPI mode */
  if( QSPI_EnterMemory_QPI( &hqspi )!=QSPI_OK )
 8000cdc:	4814      	ldr	r0, [pc, #80]	; (8000d30 <MX_QUADSPI_Init+0xb0>)
 8000cde:	f000 fb69 	bl	80013b4 <QSPI_EnterMemory_QPI>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <MX_QUADSPI_Init+0x6c>
  {
    Error_Handler();
 8000ce8:	f000 fe98 	bl	8001a1c <Error_Handler>
  }

  /* Set the QSPI memory in 4-bytes address mode */
  if (QSPI_EnterFourBytesAddress(&hqspi) != QSPI_OK)
 8000cec:	4810      	ldr	r0, [pc, #64]	; (8000d30 <MX_QUADSPI_Init+0xb0>)
 8000cee:	f000 fbad 	bl	800144c <QSPI_EnterFourBytesAddress>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <MX_QUADSPI_Init+0x7c>
  {
    Error_Handler();
 8000cf8:	f000 fe90 	bl	8001a1c <Error_Handler>
  }

  /* Configuration of the dummy cycles on QSPI memory side */
  if (QSPI_DummyCyclesCfg(&hqspi) != QSPI_OK)
 8000cfc:	480c      	ldr	r0, [pc, #48]	; (8000d30 <MX_QUADSPI_Init+0xb0>)
 8000cfe:	f000 fbe0 	bl	80014c2 <QSPI_DummyCyclesCfg>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <MX_QUADSPI_Init+0x8c>
  {
    Error_Handler();
 8000d08:	f000 fe88 	bl	8001a1c <Error_Handler>
  }

  /* Configuration of the Output driver strength on memory side */
  if( QSPI_OutDrvStrengthCfg( &hqspi ) != QSPI_OK )
 8000d0c:	4808      	ldr	r0, [pc, #32]	; (8000d30 <MX_QUADSPI_Init+0xb0>)
 8000d0e:	f000 fc94 	bl	800163a <QSPI_OutDrvStrengthCfg>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <MX_QUADSPI_Init+0x9c>
  {
    Error_Handler();
 8000d18:	f000 fe80 	bl	8001a1c <Error_Handler>
  }

  if( BSP_QSPI_EnableMemoryMappedMode(&hqspi) != QSPI_OK )
 8000d1c:	4804      	ldr	r0, [pc, #16]	; (8000d30 <MX_QUADSPI_Init+0xb0>)
 8000d1e:	f000 fdc6 	bl	80018ae <BSP_QSPI_EnableMemoryMappedMode>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <MX_QUADSPI_Init+0xac>
  {
    Error_Handler();
 8000d28:	f000 fe78 	bl	8001a1c <Error_Handler>
  }

  /* USER CODE END QUADSPI_Init 2 */

}
 8000d2c:	bf00      	nop
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	200099d8 	.word	0x200099d8
 8000d34:	a0001000 	.word	0xa0001000

08000d38 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000d3c:	4b1b      	ldr	r3, [pc, #108]	; (8000dac <MX_SPI1_Init+0x74>)
 8000d3e:	4a1c      	ldr	r2, [pc, #112]	; (8000db0 <MX_SPI1_Init+0x78>)
 8000d40:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d42:	4b1a      	ldr	r3, [pc, #104]	; (8000dac <MX_SPI1_Init+0x74>)
 8000d44:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d48:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d4a:	4b18      	ldr	r3, [pc, #96]	; (8000dac <MX_SPI1_Init+0x74>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000d50:	4b16      	ldr	r3, [pc, #88]	; (8000dac <MX_SPI1_Init+0x74>)
 8000d52:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000d56:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d58:	4b14      	ldr	r3, [pc, #80]	; (8000dac <MX_SPI1_Init+0x74>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d5e:	4b13      	ldr	r3, [pc, #76]	; (8000dac <MX_SPI1_Init+0x74>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d64:	4b11      	ldr	r3, [pc, #68]	; (8000dac <MX_SPI1_Init+0x74>)
 8000d66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d6a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d6c:	4b0f      	ldr	r3, [pc, #60]	; (8000dac <MX_SPI1_Init+0x74>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d72:	4b0e      	ldr	r3, [pc, #56]	; (8000dac <MX_SPI1_Init+0x74>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d78:	4b0c      	ldr	r3, [pc, #48]	; (8000dac <MX_SPI1_Init+0x74>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d7e:	4b0b      	ldr	r3, [pc, #44]	; (8000dac <MX_SPI1_Init+0x74>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000d84:	4b09      	ldr	r3, [pc, #36]	; (8000dac <MX_SPI1_Init+0x74>)
 8000d86:	2207      	movs	r2, #7
 8000d88:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000d8a:	4b08      	ldr	r3, [pc, #32]	; (8000dac <MX_SPI1_Init+0x74>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d90:	4b06      	ldr	r3, [pc, #24]	; (8000dac <MX_SPI1_Init+0x74>)
 8000d92:	2208      	movs	r2, #8
 8000d94:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d96:	4805      	ldr	r0, [pc, #20]	; (8000dac <MX_SPI1_Init+0x74>)
 8000d98:	f008 f9b5 	bl	8009106 <HAL_SPI_Init>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000da2:	f000 fe3b 	bl	8001a1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000da6:	bf00      	nop
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	20009a24 	.word	0x20009a24
 8000db0:	40013000 	.word	0x40013000

08000db4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000dba:	4b10      	ldr	r3, [pc, #64]	; (8000dfc <MX_DMA_Init+0x48>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbe:	4a0f      	ldr	r2, [pc, #60]	; (8000dfc <MX_DMA_Init+0x48>)
 8000dc0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc6:	4b0d      	ldr	r3, [pc, #52]	; (8000dfc <MX_DMA_Init+0x48>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000dce:	607b      	str	r3, [r7, #4]
 8000dd0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	2105      	movs	r1, #5
 8000dd6:	2038      	movs	r0, #56	; 0x38
 8000dd8:	f001 ff42 	bl	8002c60 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000ddc:	2038      	movs	r0, #56	; 0x38
 8000dde:	f001 ff5b 	bl	8002c98 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8000de2:	2200      	movs	r2, #0
 8000de4:	2105      	movs	r1, #5
 8000de6:	2039      	movs	r0, #57	; 0x39
 8000de8:	f001 ff3a 	bl	8002c60 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000dec:	2039      	movs	r0, #57	; 0x39
 8000dee:	f001 ff53 	bl	8002c98 <HAL_NVIC_EnableIRQ>

}
 8000df2:	bf00      	nop
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	40023800 	.word	0x40023800

08000e00 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b08c      	sub	sp, #48	; 0x30
 8000e04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000e06:	f107 0314 	add.w	r3, r7, #20
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	601a      	str	r2, [r3, #0]
 8000e0e:	605a      	str	r2, [r3, #4]
 8000e10:	609a      	str	r2, [r3, #8]
 8000e12:	60da      	str	r2, [r3, #12]
 8000e14:	611a      	str	r2, [r3, #16]
 8000e16:	615a      	str	r2, [r3, #20]
 8000e18:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000e1a:	4b25      	ldr	r3, [pc, #148]	; (8000eb0 <MX_FMC_Init+0xb0>)
 8000e1c:	4a25      	ldr	r2, [pc, #148]	; (8000eb4 <MX_FMC_Init+0xb4>)
 8000e1e:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000e20:	4b23      	ldr	r3, [pc, #140]	; (8000eb0 <MX_FMC_Init+0xb0>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000e26:	4b22      	ldr	r3, [pc, #136]	; (8000eb0 <MX_FMC_Init+0xb0>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000e2c:	4b20      	ldr	r3, [pc, #128]	; (8000eb0 <MX_FMC_Init+0xb0>)
 8000e2e:	2204      	movs	r2, #4
 8000e30:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8000e32:	4b1f      	ldr	r3, [pc, #124]	; (8000eb0 <MX_FMC_Init+0xb0>)
 8000e34:	2220      	movs	r2, #32
 8000e36:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000e38:	4b1d      	ldr	r3, [pc, #116]	; (8000eb0 <MX_FMC_Init+0xb0>)
 8000e3a:	2240      	movs	r2, #64	; 0x40
 8000e3c:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000e3e:	4b1c      	ldr	r3, [pc, #112]	; (8000eb0 <MX_FMC_Init+0xb0>)
 8000e40:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000e44:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000e46:	4b1a      	ldr	r3, [pc, #104]	; (8000eb0 <MX_FMC_Init+0xb0>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000e4c:	4b18      	ldr	r3, [pc, #96]	; (8000eb0 <MX_FMC_Init+0xb0>)
 8000e4e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e52:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000e54:	4b16      	ldr	r3, [pc, #88]	; (8000eb0 <MX_FMC_Init+0xb0>)
 8000e56:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e5a:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000e5c:	4b14      	ldr	r3, [pc, #80]	; (8000eb0 <MX_FMC_Init+0xb0>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000e62:	2302      	movs	r3, #2
 8000e64:	617b      	str	r3, [r7, #20]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000e66:	2307      	movs	r3, #7
 8000e68:	61bb      	str	r3, [r7, #24]
  SdramTiming.SelfRefreshTime = 4;
 8000e6a:	2304      	movs	r3, #4
 8000e6c:	61fb      	str	r3, [r7, #28]
  SdramTiming.RowCycleDelay = 7;
 8000e6e:	2307      	movs	r3, #7
 8000e70:	623b      	str	r3, [r7, #32]
  SdramTiming.WriteRecoveryTime = 2;
 8000e72:	2302      	movs	r3, #2
 8000e74:	627b      	str	r3, [r7, #36]	; 0x24
  SdramTiming.RPDelay = 2;
 8000e76:	2302      	movs	r3, #2
 8000e78:	62bb      	str	r3, [r7, #40]	; 0x28
  SdramTiming.RCDDelay = 3;
 8000e7a:	2303      	movs	r3, #3
 8000e7c:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000e7e:	f107 0314 	add.w	r3, r7, #20
 8000e82:	4619      	mov	r1, r3
 8000e84:	480a      	ldr	r0, [pc, #40]	; (8000eb0 <MX_FMC_Init+0xb0>)
 8000e86:	f008 f8ad 	bl	8008fe4 <HAL_SDRAM_Init>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <MX_FMC_Init+0x94>
  {
    Error_Handler( );
 8000e90:	f000 fdc4 	bl	8001a1c <Error_Handler>
  /* USER CODE BEGIN FMC_Init 2 */

  FMC_SDRAM_CommandTypeDef command;

  /* Program the SDRAM external device */
  BSP_SDRAM_Initialization_Sequence(&hsdram1, &command);
 8000e94:	1d3b      	adds	r3, r7, #4
 8000e96:	4619      	mov	r1, r3
 8000e98:	4805      	ldr	r0, [pc, #20]	; (8000eb0 <MX_FMC_Init+0xb0>)
 8000e9a:	f000 f905 	bl	80010a8 <BSP_SDRAM_Initialization_Sequence>

  //Deactivate speculative/cache access to first FMC Bank to save FMC bandwidth
  FMC_Bank1->BTCR[0] = 0x000030D2;
 8000e9e:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8000ea2:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000ea6:	601a      	str	r2, [r3, #0]
  /* USER CODE END FMC_Init 2 */
}
 8000ea8:	bf00      	nop
 8000eaa:	3730      	adds	r7, #48	; 0x30
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	20009a88 	.word	0x20009a88
 8000eb4:	a0000140 	.word	0xa0000140

08000eb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b08e      	sub	sp, #56	; 0x38
 8000ebc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ebe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	601a      	str	r2, [r3, #0]
 8000ec6:	605a      	str	r2, [r3, #4]
 8000ec8:	609a      	str	r2, [r3, #8]
 8000eca:	60da      	str	r2, [r3, #12]
 8000ecc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ece:	4b71      	ldr	r3, [pc, #452]	; (8001094 <MX_GPIO_Init+0x1dc>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed2:	4a70      	ldr	r2, [pc, #448]	; (8001094 <MX_GPIO_Init+0x1dc>)
 8000ed4:	f043 0310 	orr.w	r3, r3, #16
 8000ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eda:	4b6e      	ldr	r3, [pc, #440]	; (8001094 <MX_GPIO_Init+0x1dc>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ede:	f003 0310 	and.w	r3, r3, #16
 8000ee2:	623b      	str	r3, [r7, #32]
 8000ee4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ee6:	4b6b      	ldr	r3, [pc, #428]	; (8001094 <MX_GPIO_Init+0x1dc>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eea:	4a6a      	ldr	r2, [pc, #424]	; (8001094 <MX_GPIO_Init+0x1dc>)
 8000eec:	f043 0302 	orr.w	r3, r3, #2
 8000ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef2:	4b68      	ldr	r3, [pc, #416]	; (8001094 <MX_GPIO_Init+0x1dc>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	f003 0302 	and.w	r3, r3, #2
 8000efa:	61fb      	str	r3, [r7, #28]
 8000efc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000efe:	4b65      	ldr	r3, [pc, #404]	; (8001094 <MX_GPIO_Init+0x1dc>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f02:	4a64      	ldr	r2, [pc, #400]	; (8001094 <MX_GPIO_Init+0x1dc>)
 8000f04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f08:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0a:	4b62      	ldr	r3, [pc, #392]	; (8001094 <MX_GPIO_Init+0x1dc>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f12:	61bb      	str	r3, [r7, #24]
 8000f14:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000f16:	4b5f      	ldr	r3, [pc, #380]	; (8001094 <MX_GPIO_Init+0x1dc>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	4a5e      	ldr	r2, [pc, #376]	; (8001094 <MX_GPIO_Init+0x1dc>)
 8000f1c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f20:	6313      	str	r3, [r2, #48]	; 0x30
 8000f22:	4b5c      	ldr	r3, [pc, #368]	; (8001094 <MX_GPIO_Init+0x1dc>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f2a:	617b      	str	r3, [r7, #20]
 8000f2c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f2e:	4b59      	ldr	r3, [pc, #356]	; (8001094 <MX_GPIO_Init+0x1dc>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	4a58      	ldr	r2, [pc, #352]	; (8001094 <MX_GPIO_Init+0x1dc>)
 8000f34:	f043 0308 	orr.w	r3, r3, #8
 8000f38:	6313      	str	r3, [r2, #48]	; 0x30
 8000f3a:	4b56      	ldr	r3, [pc, #344]	; (8001094 <MX_GPIO_Init+0x1dc>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	f003 0308 	and.w	r3, r3, #8
 8000f42:	613b      	str	r3, [r7, #16]
 8000f44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f46:	4b53      	ldr	r3, [pc, #332]	; (8001094 <MX_GPIO_Init+0x1dc>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	4a52      	ldr	r2, [pc, #328]	; (8001094 <MX_GPIO_Init+0x1dc>)
 8000f4c:	f043 0304 	orr.w	r3, r3, #4
 8000f50:	6313      	str	r3, [r2, #48]	; 0x30
 8000f52:	4b50      	ldr	r3, [pc, #320]	; (8001094 <MX_GPIO_Init+0x1dc>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	f003 0304 	and.w	r3, r3, #4
 8000f5a:	60fb      	str	r3, [r7, #12]
 8000f5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000f5e:	4b4d      	ldr	r3, [pc, #308]	; (8001094 <MX_GPIO_Init+0x1dc>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	4a4c      	ldr	r2, [pc, #304]	; (8001094 <MX_GPIO_Init+0x1dc>)
 8000f64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f68:	6313      	str	r3, [r2, #48]	; 0x30
 8000f6a:	4b4a      	ldr	r3, [pc, #296]	; (8001094 <MX_GPIO_Init+0x1dc>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f72:	60bb      	str	r3, [r7, #8]
 8000f74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f76:	4b47      	ldr	r3, [pc, #284]	; (8001094 <MX_GPIO_Init+0x1dc>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7a:	4a46      	ldr	r2, [pc, #280]	; (8001094 <MX_GPIO_Init+0x1dc>)
 8000f7c:	f043 0320 	orr.w	r3, r3, #32
 8000f80:	6313      	str	r3, [r2, #48]	; 0x30
 8000f82:	4b44      	ldr	r3, [pc, #272]	; (8001094 <MX_GPIO_Init+0x1dc>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f86:	f003 0320 	and.w	r3, r3, #32
 8000f8a:	607b      	str	r3, [r7, #4]
 8000f8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f8e:	4b41      	ldr	r3, [pc, #260]	; (8001094 <MX_GPIO_Init+0x1dc>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	4a40      	ldr	r2, [pc, #256]	; (8001094 <MX_GPIO_Init+0x1dc>)
 8000f94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f98:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9a:	4b3e      	ldr	r3, [pc, #248]	; (8001094 <MX_GPIO_Init+0x1dc>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fa2:	603b      	str	r3, [r7, #0]
 8000fa4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN_CS_GPIO_Port, CAN_CS_Pin, GPIO_PIN_RESET);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fac:	483a      	ldr	r0, [pc, #232]	; (8001098 <MX_GPIO_Init+0x1e0>)
 8000fae:	f003 fd77 	bl	8004aa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_13|FRAME_RATE_Pin, GPIO_PIN_RESET);
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	f242 0102 	movw	r1, #8194	; 0x2002
 8000fb8:	4838      	ldr	r0, [pc, #224]	; (800109c <MX_GPIO_Init+0x1e4>)
 8000fba:	f003 fd71 	bl	8004aa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DSI_RESET_GPIO_Port, DSI_RESET_Pin, GPIO_PIN_SET);
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fc4:	4835      	ldr	r0, [pc, #212]	; (800109c <MX_GPIO_Init+0x1e4>)
 8000fc6:	f003 fd6b 	bl	8004aa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RENDER_TIME_Pin|VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 8000fca:	2200      	movs	r2, #0
 8000fcc:	21c0      	movs	r1, #192	; 0xc0
 8000fce:	4834      	ldr	r0, [pc, #208]	; (80010a0 <MX_GPIO_Init+0x1e8>)
 8000fd0:	f003 fd66 	bl	8004aa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	2140      	movs	r1, #64	; 0x40
 8000fd8:	4832      	ldr	r0, [pc, #200]	; (80010a4 <MX_GPIO_Init+0x1ec>)
 8000fda:	f003 fd61 	bl	8004aa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CAN_CS_Pin */
  GPIO_InitStruct.Pin = CAN_CS_Pin;
 8000fde:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fe2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fec:	2300      	movs	r3, #0
 8000fee:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(CAN_CS_GPIO_Port, &GPIO_InitStruct);
 8000ff0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	4828      	ldr	r0, [pc, #160]	; (8001098 <MX_GPIO_Init+0x1e0>)
 8000ff8:	f003 fba6 	bl	8004748 <HAL_GPIO_Init>

  /*Configure GPIO pin : PJ13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000ffc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001000:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001002:	2301      	movs	r3, #1
 8001004:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001006:	2300      	movs	r3, #0
 8001008:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100a:	2300      	movs	r3, #0
 800100c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800100e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001012:	4619      	mov	r1, r3
 8001014:	4821      	ldr	r0, [pc, #132]	; (800109c <MX_GPIO_Init+0x1e4>)
 8001016:	f003 fb97 	bl	8004748 <HAL_GPIO_Init>

  /*Configure GPIO pin : DSI_RESET_Pin */
  GPIO_InitStruct.Pin = DSI_RESET_Pin;
 800101a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800101e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001020:	2301      	movs	r3, #1
 8001022:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001024:	2301      	movs	r3, #1
 8001026:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001028:	2301      	movs	r3, #1
 800102a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(DSI_RESET_GPIO_Port, &GPIO_InitStruct);
 800102c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001030:	4619      	mov	r1, r3
 8001032:	481a      	ldr	r0, [pc, #104]	; (800109c <MX_GPIO_Init+0x1e4>)
 8001034:	f003 fb88 	bl	8004748 <HAL_GPIO_Init>

  /*Configure GPIO pins : RENDER_TIME_Pin VSYNC_FREQ_Pin */
  GPIO_InitStruct.Pin = RENDER_TIME_Pin|VSYNC_FREQ_Pin;
 8001038:	23c0      	movs	r3, #192	; 0xc0
 800103a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800103c:	2301      	movs	r3, #1
 800103e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001040:	2300      	movs	r3, #0
 8001042:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001044:	2303      	movs	r3, #3
 8001046:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001048:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800104c:	4619      	mov	r1, r3
 800104e:	4814      	ldr	r0, [pc, #80]	; (80010a0 <MX_GPIO_Init+0x1e8>)
 8001050:	f003 fb7a 	bl	8004748 <HAL_GPIO_Init>

  /*Configure GPIO pin : MCU_ACTIVE_Pin */
  GPIO_InitStruct.Pin = MCU_ACTIVE_Pin;
 8001054:	2340      	movs	r3, #64	; 0x40
 8001056:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001058:	2301      	movs	r3, #1
 800105a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105c:	2300      	movs	r3, #0
 800105e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001060:	2303      	movs	r3, #3
 8001062:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 8001064:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001068:	4619      	mov	r1, r3
 800106a:	480e      	ldr	r0, [pc, #56]	; (80010a4 <MX_GPIO_Init+0x1ec>)
 800106c:	f003 fb6c 	bl	8004748 <HAL_GPIO_Init>

  /*Configure GPIO pin : FRAME_RATE_Pin */
  GPIO_InitStruct.Pin = FRAME_RATE_Pin;
 8001070:	2302      	movs	r3, #2
 8001072:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001074:	2301      	movs	r3, #1
 8001076:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001078:	2300      	movs	r3, #0
 800107a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800107c:	2303      	movs	r3, #3
 800107e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(FRAME_RATE_GPIO_Port, &GPIO_InitStruct);
 8001080:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001084:	4619      	mov	r1, r3
 8001086:	4805      	ldr	r0, [pc, #20]	; (800109c <MX_GPIO_Init+0x1e4>)
 8001088:	f003 fb5e 	bl	8004748 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800108c:	bf00      	nop
 800108e:	3738      	adds	r7, #56	; 0x38
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	40023800 	.word	0x40023800
 8001098:	40020400 	.word	0x40020400
 800109c:	40022400 	.word	0x40022400
 80010a0:	40020800 	.word	0x40020800
 80010a4:	40021400 	.word	0x40021400

080010a8 <BSP_SDRAM_Initialization_Sequence>:
  * @param  hsdram: SDRAM handle
  * @param  Command: Pointer to SDRAM command structure
  * @retval None
  */
static void BSP_SDRAM_Initialization_Sequence(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	6039      	str	r1, [r7, #0]
 __IO uint32_t tmpmrd = 0;
 80010b2:	2300      	movs	r3, #0
 80010b4:	60fb      	str	r3, [r7, #12]

    /* Step 1: Configure a clock configuration enable command */
    Command->CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	2201      	movs	r2, #1
 80010ba:	601a      	str	r2, [r3, #0]
    Command->CommandTarget          =  FMC_SDRAM_CMD_TARGET_BANK1;
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	2210      	movs	r2, #16
 80010c0:	605a      	str	r2, [r3, #4]
    Command->AutoRefreshNumber      = 1;
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	2201      	movs	r2, #1
 80010c6:	609a      	str	r2, [r3, #8]
    Command->ModeRegisterDefinition = 0;
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	2200      	movs	r2, #0
 80010cc:	60da      	str	r2, [r3, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 80010ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010d2:	6839      	ldr	r1, [r7, #0]
 80010d4:	6878      	ldr	r0, [r7, #4]
 80010d6:	f007 ffb9 	bl	800904c <HAL_SDRAM_SendCommand>

    /* Step 2: Insert 100 us minimum delay */
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    HAL_Delay(1);
 80010da:	2001      	movs	r0, #1
 80010dc:	f001 fce4 	bl	8002aa8 <HAL_Delay>

    /* Step 3: Configure a PALL (precharge all) command */
    Command->CommandMode            = FMC_SDRAM_CMD_PALL;
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	2202      	movs	r2, #2
 80010e4:	601a      	str	r2, [r3, #0]
    Command->CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	2210      	movs	r2, #16
 80010ea:	605a      	str	r2, [r3, #4]
    Command->AutoRefreshNumber      = 1;
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	2201      	movs	r2, #1
 80010f0:	609a      	str	r2, [r3, #8]
    Command->ModeRegisterDefinition = 0;
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	2200      	movs	r2, #0
 80010f6:	60da      	str	r2, [r3, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 80010f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010fc:	6839      	ldr	r1, [r7, #0]
 80010fe:	6878      	ldr	r0, [r7, #4]
 8001100:	f007 ffa4 	bl	800904c <HAL_SDRAM_SendCommand>

    /* Step 4: Configure an Auto Refresh command */
    Command->CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	2203      	movs	r2, #3
 8001108:	601a      	str	r2, [r3, #0]
    Command->CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	2210      	movs	r2, #16
 800110e:	605a      	str	r2, [r3, #4]
    Command->AutoRefreshNumber      = 8;
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	2208      	movs	r2, #8
 8001114:	609a      	str	r2, [r3, #8]
    Command->ModeRegisterDefinition = 0;
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	2200      	movs	r2, #0
 800111a:	60da      	str	r2, [r3, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 800111c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001120:	6839      	ldr	r1, [r7, #0]
 8001122:	6878      	ldr	r0, [r7, #4]
 8001124:	f007 ff92 	bl	800904c <HAL_SDRAM_SendCommand>

    /* Step 5: Program the external memory mode register */
    tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          | \
 8001128:	f44f 730c 	mov.w	r3, #560	; 0x230
 800112c:	60fb      	str	r3, [r7, #12]
             SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   | \
             SDRAM_MODEREG_CAS_LATENCY_3           | \
             SDRAM_MODEREG_OPERATING_MODE_STANDARD | \
             SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

    Command->CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	2204      	movs	r2, #4
 8001132:	601a      	str	r2, [r3, #0]
    Command->CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	2210      	movs	r2, #16
 8001138:	605a      	str	r2, [r3, #4]
    Command->AutoRefreshNumber      = 1;
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	2201      	movs	r2, #1
 800113e:	609a      	str	r2, [r3, #8]
    Command->ModeRegisterDefinition = tmpmrd;
 8001140:	68fa      	ldr	r2, [r7, #12]
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	60da      	str	r2, [r3, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8001146:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800114a:	6839      	ldr	r1, [r7, #0]
 800114c:	6878      	ldr	r0, [r7, #4]
 800114e:	f007 ff7d 	bl	800904c <HAL_SDRAM_SendCommand>

    /* Step 6: Set the refresh rate counter */
    /* Set the device refresh rate */
    HAL_SDRAM_ProgramRefreshRate(hsdram, REFRESH_COUNT);
 8001152:	f240 712a 	movw	r1, #1834	; 0x72a
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	f007 ffad 	bl	80090b6 <HAL_SDRAM_ProgramRefreshRate>

}
 800115c:	bf00      	nop
 800115e:	3710      	adds	r7, #16
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}

08001164 <QSPI_ResetMemory>:
  * @brief  This function reset the QSPI memory.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_ResetMemory(QSPI_HandleTypeDef *hqspi)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b098      	sub	sp, #96	; 0x60
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  QSPI_AutoPollingTypeDef  s_config;
  uint8_t                  reg;

  /* Send command RESET command in QPI mode (QUAD I/Os) */
  /* Initialize the reset enable command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800116c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001170:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Instruction       = RESET_ENABLE_CMD;
 8001172:	2366      	movs	r3, #102	; 0x66
 8001174:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8001176:	2300      	movs	r3, #0
 8001178:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800117a:	2300      	movs	r3, #0
 800117c:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataMode          = QSPI_DATA_NONE;
 800117e:	2300      	movs	r3, #0
 8001180:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DummyCycles       = 0;
 8001182:	2300      	movs	r3, #0
 8001184:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001186:	2300      	movs	r3, #0
 8001188:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800118a:	2300      	movs	r3, #0
 800118c:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800118e:	2300      	movs	r3, #0
 8001190:	65fb      	str	r3, [r7, #92]	; 0x5c
  /* Send the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001192:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001196:	f241 3288 	movw	r2, #5000	; 0x1388
 800119a:	4619      	mov	r1, r3
 800119c:	6878      	ldr	r0, [r7, #4]
 800119e:	f006 fa15 	bl	80075cc <HAL_QSPI_Command>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <QSPI_ResetMemory+0x48>
  {
    return QSPI_ERROR;
 80011a8:	2301      	movs	r3, #1
 80011aa:	e0ff      	b.n	80013ac <QSPI_ResetMemory+0x248>
  }
  /* Send the reset memory command */
  s_command.Instruction = RESET_MEMORY_CMD;
 80011ac:	2399      	movs	r3, #153	; 0x99
 80011ae:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80011b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80011b8:	4619      	mov	r1, r3
 80011ba:	6878      	ldr	r0, [r7, #4]
 80011bc:	f006 fa06 	bl	80075cc <HAL_QSPI_Command>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <QSPI_ResetMemory+0x66>
  {
    return QSPI_ERROR;
 80011c6:	2301      	movs	r3, #1
 80011c8:	e0f0      	b.n	80013ac <QSPI_ResetMemory+0x248>
  }

  /* Send command RESET command in SPI mode */
  /* Initialize the reset enable command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80011ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011ce:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Instruction       = RESET_ENABLE_CMD;
 80011d0:	2366      	movs	r3, #102	; 0x66
 80011d2:	62bb      	str	r3, [r7, #40]	; 0x28
  /* Send the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80011d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80011dc:	4619      	mov	r1, r3
 80011de:	6878      	ldr	r0, [r7, #4]
 80011e0:	f006 f9f4 	bl	80075cc <HAL_QSPI_Command>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <QSPI_ResetMemory+0x8a>
  {
    return QSPI_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	e0de      	b.n	80013ac <QSPI_ResetMemory+0x248>
  }
  /* Send the reset memory command */
  s_command.Instruction = RESET_MEMORY_CMD;
 80011ee:	2399      	movs	r3, #153	; 0x99
 80011f0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80011f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80011fa:	4619      	mov	r1, r3
 80011fc:	6878      	ldr	r0, [r7, #4]
 80011fe:	f006 f9e5 	bl	80075cc <HAL_QSPI_Command>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <QSPI_ResetMemory+0xa8>
  {
    return QSPI_ERROR;
 8001208:	2301      	movs	r3, #1
 800120a:	e0cf      	b.n	80013ac <QSPI_ResetMemory+0x248>
  }

  /* After reset CMD, 1000ms requested if QSPI memory SWReset occured during full chip erase operation */
  HAL_Delay( 1000 );
 800120c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001210:	f001 fc4a 	bl	8002aa8 <HAL_Delay>

  /* Configure automatic polling mode to wait the WIP bit=0 */
  s_config.Match           = 0;
 8001214:	2300      	movs	r3, #0
 8001216:	613b      	str	r3, [r7, #16]
  s_config.Mask            = MX25L512_SR_WIP;
 8001218:	2301      	movs	r3, #1
 800121a:	617b      	str	r3, [r7, #20]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 800121c:	2300      	movs	r3, #0
 800121e:	623b      	str	r3, [r7, #32]
  s_config.StatusBytesSize = 1;
 8001220:	2301      	movs	r3, #1
 8001222:	61fb      	str	r3, [r7, #28]
  s_config.Interval        = 0x10;
 8001224:	2310      	movs	r3, #16
 8001226:	61bb      	str	r3, [r7, #24]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8001228:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800122c:	627b      	str	r3, [r7, #36]	; 0x24

  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 800122e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001232:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Instruction     = READ_STATUS_REG_CMD;
 8001234:	2305      	movs	r3, #5
 8001236:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode        = QSPI_DATA_1_LINE;
 8001238:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800123c:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800123e:	f107 0210 	add.w	r2, r7, #16
 8001242:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001246:	f241 3388 	movw	r3, #5000	; 0x1388
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f006 fb4b 	bl	80078e6 <HAL_QSPI_AutoPolling>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <QSPI_ResetMemory+0xf6>
  {
    return QSPI_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	e0a8      	b.n	80013ac <QSPI_ResetMemory+0x248>
  }

  /* Initialize the reading of status register */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800125a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800125e:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Instruction       = READ_STATUS_REG_CMD;
 8001260:	2305      	movs	r3, #5
 8001262:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8001264:	2300      	movs	r3, #0
 8001266:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001268:	2300      	movs	r3, #0
 800126a:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataMode          = QSPI_DATA_1_LINE;
 800126c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001270:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DummyCycles       = 0;
 8001272:	2300      	movs	r3, #0
 8001274:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.NbData            = 1;
 8001276:	2301      	movs	r3, #1
 8001278:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800127a:	2300      	movs	r3, #0
 800127c:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800127e:	2300      	movs	r3, #0
 8001280:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001282:	2300      	movs	r3, #0
 8001284:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001286:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800128a:	f241 3288 	movw	r2, #5000	; 0x1388
 800128e:	4619      	mov	r1, r3
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	f006 f99b 	bl	80075cc <HAL_QSPI_Command>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <QSPI_ResetMemory+0x13c>
  {
    return QSPI_ERROR;
 800129c:	2301      	movs	r3, #1
 800129e:	e085      	b.n	80013ac <QSPI_ResetMemory+0x248>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80012a0:	f107 030f 	add.w	r3, r7, #15
 80012a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80012a8:	4619      	mov	r1, r3
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f006 fa7e 	bl	80077ac <HAL_QSPI_Receive>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <QSPI_ResetMemory+0x156>
  {
    return QSPI_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	e078      	b.n	80013ac <QSPI_ResetMemory+0x248>
  }

  /* Enable write operations, command in 1 bit */
  /* Enable write operations */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80012ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012be:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Instruction       = WRITE_ENABLE_CMD;
 80012c0:	2306      	movs	r3, #6
 80012c2:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80012c4:	2300      	movs	r3, #0
 80012c6:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80012c8:	2300      	movs	r3, #0
 80012ca:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataMode          = QSPI_DATA_NONE;
 80012cc:	2300      	movs	r3, #0
 80012ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DummyCycles       = 0;
 80012d0:	2300      	movs	r3, #0
 80012d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80012d4:	2300      	movs	r3, #0
 80012d6:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80012d8:	2300      	movs	r3, #0
 80012da:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80012dc:	2300      	movs	r3, #0
 80012de:	65fb      	str	r3, [r7, #92]	; 0x5c

  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80012e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80012e8:	4619      	mov	r1, r3
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	f006 f96e 	bl	80075cc <HAL_QSPI_Command>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <QSPI_ResetMemory+0x196>
  {
    return QSPI_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	e058      	b.n	80013ac <QSPI_ResetMemory+0x248>
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_config.Match           = MX25L512_SR_WREN;
 80012fa:	2302      	movs	r3, #2
 80012fc:	613b      	str	r3, [r7, #16]
  s_config.Mask            = MX25L512_SR_WREN;
 80012fe:	2302      	movs	r3, #2
 8001300:	617b      	str	r3, [r7, #20]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8001302:	2300      	movs	r3, #0
 8001304:	623b      	str	r3, [r7, #32]
  s_config.StatusBytesSize = 1;
 8001306:	2301      	movs	r3, #1
 8001308:	61fb      	str	r3, [r7, #28]
  s_config.Interval        = 0x10;
 800130a:	2310      	movs	r3, #16
 800130c:	61bb      	str	r3, [r7, #24]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 800130e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001312:	627b      	str	r3, [r7, #36]	; 0x24

  s_command.Instruction    = READ_STATUS_REG_CMD;
 8001314:	2305      	movs	r3, #5
 8001316:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode       = QSPI_DATA_1_LINE;
 8001318:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800131c:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800131e:	f107 0210 	add.w	r2, r7, #16
 8001322:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001326:	f241 3388 	movw	r3, #5000	; 0x1388
 800132a:	6878      	ldr	r0, [r7, #4]
 800132c:	f006 fadb 	bl	80078e6 <HAL_QSPI_AutoPolling>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <QSPI_ResetMemory+0x1d6>
  {
    return QSPI_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	e038      	b.n	80013ac <QSPI_ResetMemory+0x248>
  }

  /* Update the configuration register with new dummy cycles */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800133a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800133e:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Instruction       = WRITE_STATUS_CFG_REG_CMD;
 8001340:	2301      	movs	r3, #1
 8001342:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8001344:	2300      	movs	r3, #0
 8001346:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001348:	2300      	movs	r3, #0
 800134a:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataMode          = QSPI_DATA_1_LINE;
 800134c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001350:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DummyCycles       = 0;
 8001352:	2300      	movs	r3, #0
 8001354:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.NbData            = 1;
 8001356:	2301      	movs	r3, #1
 8001358:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800135a:	2300      	movs	r3, #0
 800135c:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800135e:	2300      	movs	r3, #0
 8001360:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001362:	2300      	movs	r3, #0
 8001364:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Enable the Quad IO on the QSPI memory (Non-volatile bit) */
  reg |= MX25L512_SR_QUADEN;
 8001366:	7bfb      	ldrb	r3, [r7, #15]
 8001368:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800136c:	b2db      	uxtb	r3, r3
 800136e:	73fb      	strb	r3, [r7, #15]

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001370:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001374:	f241 3288 	movw	r2, #5000	; 0x1388
 8001378:	4619      	mov	r1, r3
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f006 f926 	bl	80075cc <HAL_QSPI_Command>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <QSPI_ResetMemory+0x226>
  {
    return QSPI_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	e010      	b.n	80013ac <QSPI_ResetMemory+0x248>
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800138a:	f107 030f 	add.w	r3, r7, #15
 800138e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001392:	4619      	mov	r1, r3
 8001394:	6878      	ldr	r0, [r7, #4]
 8001396:	f006 f977 	bl	8007688 <HAL_QSPI_Transmit>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <QSPI_ResetMemory+0x240>
  {
    return QSPI_ERROR;
 80013a0:	2301      	movs	r3, #1
 80013a2:	e003      	b.n	80013ac <QSPI_ResetMemory+0x248>
  }

  /* 40ms  Write Status/Configuration Register Cycle Time */
  HAL_Delay( 40 );
 80013a4:	2028      	movs	r0, #40	; 0x28
 80013a6:	f001 fb7f 	bl	8002aa8 <HAL_Delay>

  return QSPI_OK;
 80013aa:	2300      	movs	r3, #0
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	3760      	adds	r7, #96	; 0x60
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}

080013b4 <QSPI_EnterMemory_QPI>:
  * @brief  This function put QSPI memory in QPI mode (quad I/O).
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_EnterMemory_QPI( QSPI_HandleTypeDef *hqspi )
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b096      	sub	sp, #88	; 0x58
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef      s_command;
  QSPI_AutoPollingTypeDef  s_config;

  /* Initialize the QPI enable command */
  /* QSPI memory is supported to be in SPI mode, so CMD on 1 LINE */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80013bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013c0:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = ENTER_QUAD_CMD;
 80013c2:	2335      	movs	r3, #53	; 0x35
 80013c4:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80013c6:	2300      	movs	r3, #0
 80013c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80013ca:	2300      	movs	r3, #0
 80013cc:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_NONE;
 80013ce:	2300      	movs	r3, #0
 80013d0:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 80013d2:	2300      	movs	r3, #0
 80013d4:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80013d6:	2300      	movs	r3, #0
 80013d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80013da:	2300      	movs	r3, #0
 80013dc:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80013de:	2300      	movs	r3, #0
 80013e0:	657b      	str	r3, [r7, #84]	; 0x54

  /* Send the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80013e2:	f107 0320 	add.w	r3, r7, #32
 80013e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80013ea:	4619      	mov	r1, r3
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	f006 f8ed 	bl	80075cc <HAL_QSPI_Command>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <QSPI_EnterMemory_QPI+0x48>
  {
    return QSPI_ERROR;
 80013f8:	2301      	movs	r3, #1
 80013fa:	e023      	b.n	8001444 <QSPI_EnterMemory_QPI+0x90>
  }

  /* Configure automatic polling mode to wait the QUADEN bit=1 and WIP bit=0 */
  s_config.Match           = MX25L512_SR_QUADEN;
 80013fc:	2340      	movs	r3, #64	; 0x40
 80013fe:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = MX25L512_SR_QUADEN|MX25L512_SR_WIP;
 8001400:	2341      	movs	r3, #65	; 0x41
 8001402:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8001404:	2300      	movs	r3, #0
 8001406:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 1;
 8001408:	2301      	movs	r3, #1
 800140a:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 800140c:	2310      	movs	r3, #16
 800140e:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8001410:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001414:	61fb      	str	r3, [r7, #28]

  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8001416:	f44f 7340 	mov.w	r3, #768	; 0x300
 800141a:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = READ_STATUS_REG_CMD;
 800141c:	2305      	movs	r3, #5
 800141e:	623b      	str	r3, [r7, #32]
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8001420:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8001424:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001426:	f107 0208 	add.w	r2, r7, #8
 800142a:	f107 0120 	add.w	r1, r7, #32
 800142e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	f006 fa57 	bl	80078e6 <HAL_QSPI_AutoPolling>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <QSPI_EnterMemory_QPI+0x8e>
  {
    return QSPI_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	e000      	b.n	8001444 <QSPI_EnterMemory_QPI+0x90>
  }

  return QSPI_OK;
 8001442:	2300      	movs	r3, #0
}
 8001444:	4618      	mov	r0, r3
 8001446:	3758      	adds	r7, #88	; 0x58
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}

0800144c <QSPI_EnterFourBytesAddress>:
  * @brief  This function set the QSPI memory in 4-byte address mode
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_EnterFourBytesAddress(QSPI_HandleTypeDef *hqspi)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b090      	sub	sp, #64	; 0x40
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  /* Initialize the command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8001454:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001458:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = ENTER_4_BYTE_ADDR_MODE_CMD;
 800145a:	23b7      	movs	r3, #183	; 0xb7
 800145c:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800145e:	2300      	movs	r3, #0
 8001460:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001462:	2300      	movs	r3, #0
 8001464:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 8001466:	2300      	movs	r3, #0
 8001468:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 800146a:	2300      	movs	r3, #0
 800146c:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800146e:	2300      	movs	r3, #0
 8001470:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001472:	2300      	movs	r3, #0
 8001474:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001476:	2300      	movs	r3, #0
 8001478:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Enable write operations */
  if (QSPI_WriteEnable(hqspi) != QSPI_OK)
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f000 f996 	bl	80017ac <QSPI_WriteEnable>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <QSPI_EnterFourBytesAddress+0x3e>
  {
    return QSPI_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	e017      	b.n	80014ba <QSPI_EnterFourBytesAddress+0x6e>
  }

  /* Send the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800148a:	f107 0308 	add.w	r3, r7, #8
 800148e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001492:	4619      	mov	r1, r3
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f006 f899 	bl	80075cc <HAL_QSPI_Command>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <QSPI_EnterFourBytesAddress+0x58>
  {
    return QSPI_ERROR;
 80014a0:	2301      	movs	r3, #1
 80014a2:	e00a      	b.n	80014ba <QSPI_EnterFourBytesAddress+0x6e>
  }

  /* Configure automatic polling mode to wait the memory is ready */
  if (QSPI_AutoPollingMemReady(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 80014a4:	f241 3188 	movw	r1, #5000	; 0x1388
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	f000 f9c8 	bl	800183e <QSPI_AutoPollingMemReady>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <QSPI_EnterFourBytesAddress+0x6c>
  {
    return QSPI_ERROR;
 80014b4:	2301      	movs	r3, #1
 80014b6:	e000      	b.n	80014ba <QSPI_EnterFourBytesAddress+0x6e>
  }

  return QSPI_OK;
 80014b8:	2300      	movs	r3, #0
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3740      	adds	r7, #64	; 0x40
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}

080014c2 <QSPI_DummyCyclesCfg>:
  * @brief  This function configure the dummy cycles on memory side.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_DummyCyclesCfg(QSPI_HandleTypeDef *hqspi)
{
 80014c2:	b580      	push	{r7, lr}
 80014c4:	b094      	sub	sp, #80	; 0x50
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;
  uint8_t reg[2];

  /* Initialize the reading of status register */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80014ca:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014ce:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction       = READ_STATUS_REG_CMD;
 80014d0:	2305      	movs	r3, #5
 80014d2:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80014d4:	2300      	movs	r3, #0
 80014d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80014d8:	2300      	movs	r3, #0
 80014da:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80014dc:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80014e0:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles       = 0;
 80014e2:	2300      	movs	r3, #0
 80014e4:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData            = 1;
 80014e6:	2301      	movs	r3, #1
 80014e8:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80014ea:	2300      	movs	r3, #0
 80014ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80014ee:	2300      	movs	r3, #0
 80014f0:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80014f2:	2300      	movs	r3, #0
 80014f4:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80014f6:	f107 0310 	add.w	r3, r7, #16
 80014fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80014fe:	4619      	mov	r1, r3
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	f006 f863 	bl	80075cc <HAL_QSPI_Command>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <QSPI_DummyCyclesCfg+0x4e>
  {
    return QSPI_ERROR;
 800150c:	2301      	movs	r3, #1
 800150e:	e090      	b.n	8001632 <QSPI_DummyCyclesCfg+0x170>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001510:	f107 030c 	add.w	r3, r7, #12
 8001514:	f241 3288 	movw	r2, #5000	; 0x1388
 8001518:	4619      	mov	r1, r3
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f006 f946 	bl	80077ac <HAL_QSPI_Receive>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <QSPI_DummyCyclesCfg+0x68>
  {
    return QSPI_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e083      	b.n	8001632 <QSPI_DummyCyclesCfg+0x170>
  }

  /* Initialize the reading of configuration register */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800152a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800152e:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction       = READ_CFG_REG_CMD;
 8001530:	2315      	movs	r3, #21
 8001532:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8001534:	2300      	movs	r3, #0
 8001536:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001538:	2300      	movs	r3, #0
 800153a:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode          = QSPI_DATA_4_LINES;
 800153c:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8001540:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles       = 0;
 8001542:	2300      	movs	r3, #0
 8001544:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData            = 1;
 8001546:	2301      	movs	r3, #1
 8001548:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800154a:	2300      	movs	r3, #0
 800154c:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800154e:	2300      	movs	r3, #0
 8001550:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001552:	2300      	movs	r3, #0
 8001554:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001556:	f107 0310 	add.w	r3, r7, #16
 800155a:	f241 3288 	movw	r2, #5000	; 0x1388
 800155e:	4619      	mov	r1, r3
 8001560:	6878      	ldr	r0, [r7, #4]
 8001562:	f006 f833 	bl	80075cc <HAL_QSPI_Command>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <QSPI_DummyCyclesCfg+0xae>
  {
    return QSPI_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	e060      	b.n	8001632 <QSPI_DummyCyclesCfg+0x170>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, &(reg[1]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001570:	f107 030c 	add.w	r3, r7, #12
 8001574:	3301      	adds	r3, #1
 8001576:	f241 3288 	movw	r2, #5000	; 0x1388
 800157a:	4619      	mov	r1, r3
 800157c:	6878      	ldr	r0, [r7, #4]
 800157e:	f006 f915 	bl	80077ac <HAL_QSPI_Receive>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <QSPI_DummyCyclesCfg+0xca>
  {
    return QSPI_ERROR;
 8001588:	2301      	movs	r3, #1
 800158a:	e052      	b.n	8001632 <QSPI_DummyCyclesCfg+0x170>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(hqspi) != QSPI_OK)
 800158c:	6878      	ldr	r0, [r7, #4]
 800158e:	f000 f90d 	bl	80017ac <QSPI_WriteEnable>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <QSPI_DummyCyclesCfg+0xda>
  {
    return QSPI_ERROR;
 8001598:	2301      	movs	r3, #1
 800159a:	e04a      	b.n	8001632 <QSPI_DummyCyclesCfg+0x170>
  }

  /* Update the configuration register with new dummy cycles */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800159c:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015a0:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction       = WRITE_STATUS_CFG_REG_CMD;
 80015a2:	2301      	movs	r3, #1
 80015a4:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80015a6:	2300      	movs	r3, #0
 80015a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80015aa:	2300      	movs	r3, #0
 80015ac:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80015ae:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80015b2:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles       = 0;
 80015b4:	2300      	movs	r3, #0
 80015b6:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData            = 2;
 80015b8:	2302      	movs	r3, #2
 80015ba:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80015bc:	2300      	movs	r3, #0
 80015be:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80015c0:	2300      	movs	r3, #0
 80015c2:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80015c4:	2300      	movs	r3, #0
 80015c6:	647b      	str	r3, [r7, #68]	; 0x44

  /* MX25L512_DUMMY_CYCLES_READ_QUAD = 3 for 10 cycles in QPI mode */
  MODIFY_REG( reg[1], MX25L512_CR_NB_DUMMY, (MX25L512_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(MX25L512_CR_NB_DUMMY)));
 80015c8:	7b7b      	ldrb	r3, [r7, #13]
 80015ca:	b25b      	sxtb	r3, r3
 80015cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80015d0:	b25a      	sxtb	r2, r3
 80015d2:	23c0      	movs	r3, #192	; 0xc0
 80015d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80015d8:	fa93 f3a3 	rbit	r3, r3
 80015dc:	64bb      	str	r3, [r7, #72]	; 0x48
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80015de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80015e0:	fab3 f383 	clz	r3, r3
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	4619      	mov	r1, r3
 80015e8:	2303      	movs	r3, #3
 80015ea:	408b      	lsls	r3, r1
 80015ec:	b25b      	sxtb	r3, r3
 80015ee:	4313      	orrs	r3, r2
 80015f0:	b25b      	sxtb	r3, r3
 80015f2:	b2db      	uxtb	r3, r3
 80015f4:	737b      	strb	r3, [r7, #13]

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80015f6:	f107 0310 	add.w	r3, r7, #16
 80015fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80015fe:	4619      	mov	r1, r3
 8001600:	6878      	ldr	r0, [r7, #4]
 8001602:	f005 ffe3 	bl	80075cc <HAL_QSPI_Command>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <QSPI_DummyCyclesCfg+0x14e>
  {
    return QSPI_ERROR;
 800160c:	2301      	movs	r3, #1
 800160e:	e010      	b.n	8001632 <QSPI_DummyCyclesCfg+0x170>
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(hqspi, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001610:	f107 030c 	add.w	r3, r7, #12
 8001614:	f241 3288 	movw	r2, #5000	; 0x1388
 8001618:	4619      	mov	r1, r3
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f006 f834 	bl	8007688 <HAL_QSPI_Transmit>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <QSPI_DummyCyclesCfg+0x168>
  {
    return QSPI_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e003      	b.n	8001632 <QSPI_DummyCyclesCfg+0x170>
  }

  /* 40ms  Write Status/Configuration Register Cycle Time */
  HAL_Delay( 40 );
 800162a:	2028      	movs	r0, #40	; 0x28
 800162c:	f001 fa3c 	bl	8002aa8 <HAL_Delay>

  return QSPI_OK;
 8001630:	2300      	movs	r3, #0
}
 8001632:	4618      	mov	r0, r3
 8001634:	3750      	adds	r7, #80	; 0x50
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}

0800163a <QSPI_OutDrvStrengthCfg>:
  * @brief  This function configure the Output driver strength on memory side.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_OutDrvStrengthCfg( QSPI_HandleTypeDef *hqspi )
{
 800163a:	b580      	push	{r7, lr}
 800163c:	b094      	sub	sp, #80	; 0x50
 800163e:	af00      	add	r7, sp, #0
 8001640:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;
  uint8_t reg[2];

  /* Initialize the reading of status register */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8001642:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001646:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction       = READ_STATUS_REG_CMD;
 8001648:	2305      	movs	r3, #5
 800164a:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800164c:	2300      	movs	r3, #0
 800164e:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001650:	2300      	movs	r3, #0
 8001652:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8001654:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8001658:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles       = 0;
 800165a:	2300      	movs	r3, #0
 800165c:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData            = 1;
 800165e:	2301      	movs	r3, #1
 8001660:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001662:	2300      	movs	r3, #0
 8001664:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001666:	2300      	movs	r3, #0
 8001668:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800166a:	2300      	movs	r3, #0
 800166c:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800166e:	f107 0310 	add.w	r3, r7, #16
 8001672:	f241 3288 	movw	r2, #5000	; 0x1388
 8001676:	4619      	mov	r1, r3
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	f005 ffa7 	bl	80075cc <HAL_QSPI_Command>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <QSPI_OutDrvStrengthCfg+0x4e>
  {
    return QSPI_ERROR;
 8001684:	2301      	movs	r3, #1
 8001686:	e08d      	b.n	80017a4 <QSPI_OutDrvStrengthCfg+0x16a>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001688:	f107 030c 	add.w	r3, r7, #12
 800168c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001690:	4619      	mov	r1, r3
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f006 f88a 	bl	80077ac <HAL_QSPI_Receive>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <QSPI_OutDrvStrengthCfg+0x68>
  {
    return QSPI_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	e080      	b.n	80017a4 <QSPI_OutDrvStrengthCfg+0x16a>
  }

  /* Initialize the reading of configuration register */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80016a2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016a6:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction       = READ_CFG_REG_CMD;
 80016a8:	2315      	movs	r3, #21
 80016aa:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80016ac:	2300      	movs	r3, #0
 80016ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80016b0:	2300      	movs	r3, #0
 80016b2:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80016b4:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80016b8:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles       = 0;
 80016ba:	2300      	movs	r3, #0
 80016bc:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData            = 1;
 80016be:	2301      	movs	r3, #1
 80016c0:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80016c2:	2300      	movs	r3, #0
 80016c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80016c6:	2300      	movs	r3, #0
 80016c8:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80016ca:	2300      	movs	r3, #0
 80016cc:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80016ce:	f107 0310 	add.w	r3, r7, #16
 80016d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80016d6:	4619      	mov	r1, r3
 80016d8:	6878      	ldr	r0, [r7, #4]
 80016da:	f005 ff77 	bl	80075cc <HAL_QSPI_Command>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <QSPI_OutDrvStrengthCfg+0xae>
  {
    return QSPI_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	e05d      	b.n	80017a4 <QSPI_OutDrvStrengthCfg+0x16a>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, &(reg[1]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80016e8:	f107 030c 	add.w	r3, r7, #12
 80016ec:	3301      	adds	r3, #1
 80016ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80016f2:	4619      	mov	r1, r3
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	f006 f859 	bl	80077ac <HAL_QSPI_Receive>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <QSPI_OutDrvStrengthCfg+0xca>
  {
    return QSPI_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	e04f      	b.n	80017a4 <QSPI_OutDrvStrengthCfg+0x16a>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(hqspi) != QSPI_OK)
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f000 f851 	bl	80017ac <QSPI_WriteEnable>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <QSPI_OutDrvStrengthCfg+0xda>
  {
    return QSPI_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	e047      	b.n	80017a4 <QSPI_OutDrvStrengthCfg+0x16a>
  }

  /* Update the configuration register with new output driver strength */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8001714:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001718:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction       = WRITE_STATUS_CFG_REG_CMD;
 800171a:	2301      	movs	r3, #1
 800171c:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800171e:	2300      	movs	r3, #0
 8001720:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001722:	2300      	movs	r3, #0
 8001724:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8001726:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800172a:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles       = 0;
 800172c:	2300      	movs	r3, #0
 800172e:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData            = 2;
 8001730:	2302      	movs	r3, #2
 8001732:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001734:	2300      	movs	r3, #0
 8001736:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001738:	2300      	movs	r3, #0
 800173a:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800173c:	2300      	movs	r3, #0
 800173e:	647b      	str	r3, [r7, #68]	; 0x44

  /* Set Output Strength of the QSPI memory 15 ohms */
  MODIFY_REG( reg[1], MX25L512_CR_ODS, (MX25L512_CR_ODS_15 << POSITION_VAL(MX25L512_CR_ODS)));
 8001740:	7b7b      	ldrb	r3, [r7, #13]
 8001742:	b25b      	sxtb	r3, r3
 8001744:	f023 0307 	bic.w	r3, r3, #7
 8001748:	b25a      	sxtb	r2, r3
 800174a:	2307      	movs	r3, #7
 800174c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800174e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001750:	fa93 f3a3 	rbit	r3, r3
 8001754:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8001756:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001758:	fab3 f383 	clz	r3, r3
 800175c:	b2db      	uxtb	r3, r3
 800175e:	4619      	mov	r1, r3
 8001760:	2306      	movs	r3, #6
 8001762:	408b      	lsls	r3, r1
 8001764:	b25b      	sxtb	r3, r3
 8001766:	4313      	orrs	r3, r2
 8001768:	b25b      	sxtb	r3, r3
 800176a:	b2db      	uxtb	r3, r3
 800176c:	737b      	strb	r3, [r7, #13]

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800176e:	f107 0310 	add.w	r3, r7, #16
 8001772:	f241 3288 	movw	r2, #5000	; 0x1388
 8001776:	4619      	mov	r1, r3
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	f005 ff27 	bl	80075cc <HAL_QSPI_Command>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <QSPI_OutDrvStrengthCfg+0x14e>
  {
    return QSPI_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e00d      	b.n	80017a4 <QSPI_OutDrvStrengthCfg+0x16a>
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(hqspi, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001788:	f107 030c 	add.w	r3, r7, #12
 800178c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001790:	4619      	mov	r1, r3
 8001792:	6878      	ldr	r0, [r7, #4]
 8001794:	f005 ff78 	bl	8007688 <HAL_QSPI_Transmit>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <QSPI_OutDrvStrengthCfg+0x168>
  {
    return QSPI_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e000      	b.n	80017a4 <QSPI_OutDrvStrengthCfg+0x16a>
  }

  return QSPI_OK;
 80017a2:	2300      	movs	r3, #0
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	3750      	adds	r7, #80	; 0x50
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}

080017ac <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b096      	sub	sp, #88	; 0x58
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80017b4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80017b8:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = WRITE_ENABLE_CMD;
 80017ba:	2306      	movs	r3, #6
 80017bc:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80017be:	2300      	movs	r3, #0
 80017c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80017c2:	2300      	movs	r3, #0
 80017c4:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_NONE;
 80017c6:	2300      	movs	r3, #0
 80017c8:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 80017ca:	2300      	movs	r3, #0
 80017cc:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80017ce:	2300      	movs	r3, #0
 80017d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80017d2:	2300      	movs	r3, #0
 80017d4:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80017d6:	2300      	movs	r3, #0
 80017d8:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80017da:	f107 0320 	add.w	r3, r7, #32
 80017de:	f241 3288 	movw	r2, #5000	; 0x1388
 80017e2:	4619      	mov	r1, r3
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	f005 fef1 	bl	80075cc <HAL_QSPI_Command>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <QSPI_WriteEnable+0x48>
  {
    return QSPI_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e020      	b.n	8001836 <QSPI_WriteEnable+0x8a>
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_config.Match           = MX25L512_SR_WREN;
 80017f4:	2302      	movs	r3, #2
 80017f6:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = MX25L512_SR_WREN;
 80017f8:	2302      	movs	r3, #2
 80017fa:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 80017fc:	2300      	movs	r3, #0
 80017fe:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 1;
 8001800:	2301      	movs	r3, #1
 8001802:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 8001804:	2310      	movs	r3, #16
 8001806:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8001808:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800180c:	61fb      	str	r3, [r7, #28]

  s_command.Instruction    = READ_STATUS_REG_CMD;
 800180e:	2305      	movs	r3, #5
 8001810:	623b      	str	r3, [r7, #32]
  s_command.DataMode       = QSPI_DATA_4_LINES;
 8001812:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8001816:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001818:	f107 0208 	add.w	r2, r7, #8
 800181c:	f107 0120 	add.w	r1, r7, #32
 8001820:	f241 3388 	movw	r3, #5000	; 0x1388
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	f006 f85e 	bl	80078e6 <HAL_QSPI_AutoPolling>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d001      	beq.n	8001834 <QSPI_WriteEnable+0x88>
  {
    return QSPI_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	e000      	b.n	8001836 <QSPI_WriteEnable+0x8a>
  }

  return QSPI_OK;
 8001834:	2300      	movs	r3, #0
}
 8001836:	4618      	mov	r0, r3
 8001838:	3758      	adds	r7, #88	; 0x58
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}

0800183e <QSPI_AutoPollingMemReady>:
  * @param  hqspi: QSPI handle
  * @param  Timeout
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800183e:	b580      	push	{r7, lr}
 8001840:	b096      	sub	sp, #88	; 0x58
 8001842:	af00      	add	r7, sp, #0
 8001844:	6078      	str	r0, [r7, #4]
 8001846:	6039      	str	r1, [r7, #0]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8001848:	f44f 7340 	mov.w	r3, #768	; 0x300
 800184c:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = READ_STATUS_REG_CMD;
 800184e:	2305      	movs	r3, #5
 8001850:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8001852:	2300      	movs	r3, #0
 8001854:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001856:	2300      	movs	r3, #0
 8001858:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_4_LINES;
 800185a:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800185e:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 8001860:	2300      	movs	r3, #0
 8001862:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001864:	2300      	movs	r3, #0
 8001866:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001868:	2300      	movs	r3, #0
 800186a:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800186c:	2300      	movs	r3, #0
 800186e:	657b      	str	r3, [r7, #84]	; 0x54

  s_config.Match           = 0;
 8001870:	2300      	movs	r3, #0
 8001872:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = MX25L512_SR_WIP;
 8001874:	2301      	movs	r3, #1
 8001876:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8001878:	2300      	movs	r3, #0
 800187a:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 1;
 800187c:	2301      	movs	r3, #1
 800187e:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 8001880:	2310      	movs	r3, #16
 8001882:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8001884:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001888:	61fb      	str	r3, [r7, #28]

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 800188a:	f107 0208 	add.w	r2, r7, #8
 800188e:	f107 0120 	add.w	r1, r7, #32
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	6878      	ldr	r0, [r7, #4]
 8001896:	f006 f826 	bl	80078e6 <HAL_QSPI_AutoPolling>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <QSPI_AutoPollingMemReady+0x66>
  {
    return QSPI_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	e000      	b.n	80018a6 <QSPI_AutoPollingMemReady+0x68>
  }

  return QSPI_OK;
 80018a4:	2300      	movs	r3, #0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3758      	adds	r7, #88	; 0x58
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}

080018ae <BSP_QSPI_EnableMemoryMappedMode>:
/**
  * @brief  Configure the QSPI in memory-mapped mode
  * @retval QSPI memory status
  */
static uint8_t BSP_QSPI_EnableMemoryMappedMode(QSPI_HandleTypeDef *hqspi)
{
 80018ae:	b580      	push	{r7, lr}
 80018b0:	b092      	sub	sp, #72	; 0x48
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;

  /* Configure the command for the read instruction */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80018b6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80018ba:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction       = QPI_READ_4_BYTE_ADDR_CMD;
 80018bc:	23ec      	movs	r3, #236	; 0xec
 80018be:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 80018c0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80018c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 80018c6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80018ca:	61fb      	str	r3, [r7, #28]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80018cc:	2300      	movs	r3, #0
 80018ce:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80018d0:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80018d4:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles       = MX25L512_DUMMY_CYCLES_READ_QUAD_IO;
 80018d6:	230a      	movs	r3, #10
 80018d8:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80018da:	2300      	movs	r3, #0
 80018dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80018de:	2300      	movs	r3, #0
 80018e0:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80018e2:	2300      	movs	r3, #0
 80018e4:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 80018e6:	2300      	movs	r3, #0
 80018e8:	60fb      	str	r3, [r7, #12]
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 80018ea:	2300      	movs	r3, #0
 80018ec:	60bb      	str	r3, [r7, #8]

  if (HAL_QSPI_MemoryMapped(hqspi, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 80018ee:	f107 0208 	add.w	r2, r7, #8
 80018f2:	f107 0310 	add.w	r3, r7, #16
 80018f6:	4619      	mov	r1, r3
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	f006 f86b 	bl	80079d4 <HAL_QSPI_MemoryMapped>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <BSP_QSPI_EnableMemoryMappedMode+0x5a>
  {
    return QSPI_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	e000      	b.n	800190a <BSP_QSPI_EnableMemoryMappedMode+0x5c>
  }

  return QSPI_OK;
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	3748      	adds	r7, #72	; 0x48
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}

08001912 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001912:	b580      	push	{r7, lr}
 8001914:	b082      	sub	sp, #8
 8001916:	af00      	add	r7, sp, #0
 8001918:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  for(;;)
  {
    osDelay(100);
 800191a:	2064      	movs	r0, #100	; 0x64
 800191c:	f008 f998 	bl	8009c50 <osDelay>
 8001920:	e7fb      	b.n	800191a <StartDefaultTask+0x8>

08001922 <MPU_Config>:
}

/* MPU Configuration */

void MPU_Config(void)
{
 8001922:	b580      	push	{r7, lr}
 8001924:	b084      	sub	sp, #16
 8001926:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001928:	463b      	mov	r3, r7
 800192a:	2200      	movs	r2, #0
 800192c:	601a      	str	r2, [r3, #0]
 800192e:	605a      	str	r2, [r3, #4]
 8001930:	609a      	str	r2, [r3, #8]
 8001932:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001934:	f001 f9be 	bl	8002cb4 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001938:	2301      	movs	r3, #1
 800193a:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800193c:	2300      	movs	r3, #0
 800193e:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x20000000;
 8001940:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001944:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8001946:	2312      	movs	r3, #18
 8001948:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 800194a:	2300      	movs	r3, #0
 800194c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800194e:	2300      	movs	r3, #0
 8001950:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001952:	2303      	movs	r3, #3
 8001954:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001956:	2301      	movs	r3, #1
 8001958:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 800195a:	2300      	movs	r3, #0
 800195c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 800195e:	2301      	movs	r3, #1
 8001960:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8001962:	2301      	movs	r3, #1
 8001964:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001966:	463b      	mov	r3, r7
 8001968:	4618      	mov	r0, r3
 800196a:	f001 f9db 	bl	8002d24 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 800196e:	2301      	movs	r3, #1
 8001970:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x90000000;
 8001972:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 8001976:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512MB;
 8001978:	231c      	movs	r3, #28
 800197a:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800197c:	2300      	movs	r3, #0
 800197e:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001980:	2300      	movs	r3, #0
 8001982:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001984:	2300      	movs	r3, #0
 8001986:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001988:	463b      	mov	r3, r7
 800198a:	4618      	mov	r0, r3
 800198c:	f001 f9ca 	bl	8002d24 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8001990:	2302      	movs	r3, #2
 8001992:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
 8001994:	2319      	movs	r3, #25
 8001996:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001998:	2303      	movs	r3, #3
 800199a:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 800199c:	2301      	movs	r3, #1
 800199e:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 80019a0:	2301      	movs	r3, #1
 80019a2:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80019a4:	463b      	mov	r3, r7
 80019a6:	4618      	mov	r0, r3
 80019a8:	f001 f9bc 	bl	8002d24 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 80019ac:	2303      	movs	r3, #3
 80019ae:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0xC0000000;
 80019b0:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80019b4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512MB;
 80019b6:	231c      	movs	r3, #28
 80019b8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80019ba:	2300      	movs	r3, #0
 80019bc:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80019be:	2300      	movs	r3, #0
 80019c0:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80019c2:	2300      	movs	r3, #0
 80019c4:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80019c6:	463b      	mov	r3, r7
 80019c8:	4618      	mov	r0, r3
 80019ca:	f001 f9ab 	bl	8002d24 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 80019ce:	2304      	movs	r3, #4
 80019d0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
 80019d2:	2317      	movs	r3, #23
 80019d4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80019d6:	2303      	movs	r3, #3
 80019d8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 80019da:	2301      	movs	r3, #1
 80019dc:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 80019de:	2301      	movs	r3, #1
 80019e0:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80019e2:	463b      	mov	r3, r7
 80019e4:	4618      	mov	r0, r3
 80019e6:	f001 f99d 	bl	8002d24 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80019ea:	2004      	movs	r0, #4
 80019ec:	f001 f97a 	bl	8002ce4 <HAL_MPU_Enable>

}
 80019f0:	bf00      	nop
 80019f2:	3710      	adds	r7, #16
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}

080019f8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a04      	ldr	r2, [pc, #16]	; (8001a18 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d101      	bne.n	8001a0e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001a0a:	f001 f82d 	bl	8002a68 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001a0e:	bf00      	nop
 8001a10:	3708      	adds	r7, #8
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	40001000 	.word	0x40001000

08001a1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001a20:	bf00      	nop
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
	...

08001a2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001a32:	4b11      	ldr	r3, [pc, #68]	; (8001a78 <HAL_MspInit+0x4c>)
 8001a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a36:	4a10      	ldr	r2, [pc, #64]	; (8001a78 <HAL_MspInit+0x4c>)
 8001a38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a3c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a3e:	4b0e      	ldr	r3, [pc, #56]	; (8001a78 <HAL_MspInit+0x4c>)
 8001a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a46:	607b      	str	r3, [r7, #4]
 8001a48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a4a:	4b0b      	ldr	r3, [pc, #44]	; (8001a78 <HAL_MspInit+0x4c>)
 8001a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a4e:	4a0a      	ldr	r2, [pc, #40]	; (8001a78 <HAL_MspInit+0x4c>)
 8001a50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a54:	6453      	str	r3, [r2, #68]	; 0x44
 8001a56:	4b08      	ldr	r3, [pc, #32]	; (8001a78 <HAL_MspInit+0x4c>)
 8001a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a5e:	603b      	str	r3, [r7, #0]
 8001a60:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001a62:	2200      	movs	r2, #0
 8001a64:	210f      	movs	r1, #15
 8001a66:	f06f 0001 	mvn.w	r0, #1
 8001a6a:	f001 f8f9 	bl	8002c60 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a6e:	bf00      	nop
 8001a70:	3708      	adds	r7, #8
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	40023800 	.word	0x40023800

08001a7c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b085      	sub	sp, #20
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a0a      	ldr	r2, [pc, #40]	; (8001ab4 <HAL_CRC_MspInit+0x38>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d10b      	bne.n	8001aa6 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001a8e:	4b0a      	ldr	r3, [pc, #40]	; (8001ab8 <HAL_CRC_MspInit+0x3c>)
 8001a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a92:	4a09      	ldr	r2, [pc, #36]	; (8001ab8 <HAL_CRC_MspInit+0x3c>)
 8001a94:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a98:	6313      	str	r3, [r2, #48]	; 0x30
 8001a9a:	4b07      	ldr	r3, [pc, #28]	; (8001ab8 <HAL_CRC_MspInit+0x3c>)
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001aa2:	60fb      	str	r3, [r7, #12]
 8001aa4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001aa6:	bf00      	nop
 8001aa8:	3714      	adds	r7, #20
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	40023000 	.word	0x40023000
 8001ab8:	40023800 	.word	0x40023800

08001abc <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a0d      	ldr	r2, [pc, #52]	; (8001b00 <HAL_DMA2D_MspInit+0x44>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d113      	bne.n	8001af6 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001ace:	4b0d      	ldr	r3, [pc, #52]	; (8001b04 <HAL_DMA2D_MspInit+0x48>)
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad2:	4a0c      	ldr	r2, [pc, #48]	; (8001b04 <HAL_DMA2D_MspInit+0x48>)
 8001ad4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8001ada:	4b0a      	ldr	r3, [pc, #40]	; (8001b04 <HAL_DMA2D_MspInit+0x48>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ade:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001ae2:	60fb      	str	r3, [r7, #12]
 8001ae4:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	2105      	movs	r1, #5
 8001aea:	205a      	movs	r0, #90	; 0x5a
 8001aec:	f001 f8b8 	bl	8002c60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001af0:	205a      	movs	r0, #90	; 0x5a
 8001af2:	f001 f8d1 	bl	8002c98 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001af6:	bf00      	nop
 8001af8:	3710      	adds	r7, #16
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	4002b000 	.word	0x4002b000
 8001b04:	40023800 	.word	0x40023800

08001b08 <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b08a      	sub	sp, #40	; 0x28
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b10:	f107 0314 	add.w	r3, r7, #20
 8001b14:	2200      	movs	r2, #0
 8001b16:	601a      	str	r2, [r3, #0]
 8001b18:	605a      	str	r2, [r3, #4]
 8001b1a:	609a      	str	r2, [r3, #8]
 8001b1c:	60da      	str	r2, [r3, #12]
 8001b1e:	611a      	str	r2, [r3, #16]
  if(hdsi->Instance==DSI)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a1b      	ldr	r2, [pc, #108]	; (8001b94 <HAL_DSI_MspInit+0x8c>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d12f      	bne.n	8001b8a <HAL_DSI_MspInit+0x82>
  {
  /* USER CODE BEGIN DSI_MspInit 0 */

  /* USER CODE END DSI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 8001b2a:	4b1b      	ldr	r3, [pc, #108]	; (8001b98 <HAL_DSI_MspInit+0x90>)
 8001b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b2e:	4a1a      	ldr	r2, [pc, #104]	; (8001b98 <HAL_DSI_MspInit+0x90>)
 8001b30:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001b34:	6453      	str	r3, [r2, #68]	; 0x44
 8001b36:	4b18      	ldr	r3, [pc, #96]	; (8001b98 <HAL_DSI_MspInit+0x90>)
 8001b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b3a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001b3e:	613b      	str	r3, [r7, #16]
 8001b40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001b42:	4b15      	ldr	r3, [pc, #84]	; (8001b98 <HAL_DSI_MspInit+0x90>)
 8001b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b46:	4a14      	ldr	r2, [pc, #80]	; (8001b98 <HAL_DSI_MspInit+0x90>)
 8001b48:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b4e:	4b12      	ldr	r3, [pc, #72]	; (8001b98 <HAL_DSI_MspInit+0x90>)
 8001b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b56:	60fb      	str	r3, [r7, #12]
 8001b58:	68fb      	ldr	r3, [r7, #12]
    /**DSIHOST GPIO Configuration
    PJ2     ------> DSIHOST_TE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001b5a:	2304      	movs	r3, #4
 8001b5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b5e:	2302      	movs	r3, #2
 8001b60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b62:	2300      	movs	r3, #0
 8001b64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b66:	2300      	movs	r3, #0
 8001b68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 8001b6a:	230d      	movs	r3, #13
 8001b6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001b6e:	f107 0314 	add.w	r3, r7, #20
 8001b72:	4619      	mov	r1, r3
 8001b74:	4809      	ldr	r0, [pc, #36]	; (8001b9c <HAL_DSI_MspInit+0x94>)
 8001b76:	f002 fde7 	bl	8004748 <HAL_GPIO_Init>

    /* DSI interrupt Init */
    HAL_NVIC_SetPriority(DSI_IRQn, 5, 0);
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	2105      	movs	r1, #5
 8001b7e:	2062      	movs	r0, #98	; 0x62
 8001b80:	f001 f86e 	bl	8002c60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 8001b84:	2062      	movs	r0, #98	; 0x62
 8001b86:	f001 f887 	bl	8002c98 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }

}
 8001b8a:	bf00      	nop
 8001b8c:	3728      	adds	r7, #40	; 0x28
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	40016c00 	.word	0x40016c00
 8001b98:	40023800 	.word	0x40023800
 8001b9c:	40022400 	.word	0x40022400

08001ba0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b0ae      	sub	sp, #184	; 0xb8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001bac:	2200      	movs	r2, #0
 8001bae:	601a      	str	r2, [r3, #0]
 8001bb0:	605a      	str	r2, [r3, #4]
 8001bb2:	609a      	str	r2, [r3, #8]
 8001bb4:	60da      	str	r2, [r3, #12]
 8001bb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001bb8:	f107 0314 	add.w	r3, r7, #20
 8001bbc:	2290      	movs	r2, #144	; 0x90
 8001bbe:	2100      	movs	r1, #0
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f024 fe9b 	bl	80268fc <memset>
  if(hi2c->Instance==I2C4)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a37      	ldr	r2, [pc, #220]	; (8001ca8 <HAL_I2C_MspInit+0x108>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d166      	bne.n	8001c9e <HAL_I2C_MspInit+0xfe>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001bd0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bd4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bdc:	f107 0314 	add.w	r3, r7, #20
 8001be0:	4618      	mov	r0, r3
 8001be2:	f006 fdd7 	bl	8008794 <HAL_RCCEx_PeriphCLKConfig>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8001bec:	f7ff ff16 	bl	8001a1c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bf0:	4b2e      	ldr	r3, [pc, #184]	; (8001cac <HAL_I2C_MspInit+0x10c>)
 8001bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf4:	4a2d      	ldr	r2, [pc, #180]	; (8001cac <HAL_I2C_MspInit+0x10c>)
 8001bf6:	f043 0302 	orr.w	r3, r3, #2
 8001bfa:	6313      	str	r3, [r2, #48]	; 0x30
 8001bfc:	4b2b      	ldr	r3, [pc, #172]	; (8001cac <HAL_I2C_MspInit+0x10c>)
 8001bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c00:	f003 0302 	and.w	r3, r3, #2
 8001c04:	613b      	str	r3, [r7, #16]
 8001c06:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c08:	4b28      	ldr	r3, [pc, #160]	; (8001cac <HAL_I2C_MspInit+0x10c>)
 8001c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0c:	4a27      	ldr	r2, [pc, #156]	; (8001cac <HAL_I2C_MspInit+0x10c>)
 8001c0e:	f043 0308 	orr.w	r3, r3, #8
 8001c12:	6313      	str	r3, [r2, #48]	; 0x30
 8001c14:	4b25      	ldr	r3, [pc, #148]	; (8001cac <HAL_I2C_MspInit+0x10c>)
 8001c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c18:	f003 0308 	and.w	r3, r3, #8
 8001c1c:	60fb      	str	r3, [r7, #12]
 8001c1e:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PB7     ------> I2C4_SDA
    PD12     ------> I2C4_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001c20:	2380      	movs	r3, #128	; 0x80
 8001c22:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c26:	2312      	movs	r3, #18
 8001c28:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c32:	2303      	movs	r3, #3
 8001c34:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF11_I2C4;
 8001c38:	230b      	movs	r3, #11
 8001c3a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c3e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001c42:	4619      	mov	r1, r3
 8001c44:	481a      	ldr	r0, [pc, #104]	; (8001cb0 <HAL_I2C_MspInit+0x110>)
 8001c46:	f002 fd7f 	bl	8004748 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001c4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c4e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c52:	2312      	movs	r3, #18
 8001c54:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001c64:	2304      	movs	r3, #4
 8001c66:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c6a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001c6e:	4619      	mov	r1, r3
 8001c70:	4810      	ldr	r0, [pc, #64]	; (8001cb4 <HAL_I2C_MspInit+0x114>)
 8001c72:	f002 fd69 	bl	8004748 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001c76:	4b0d      	ldr	r3, [pc, #52]	; (8001cac <HAL_I2C_MspInit+0x10c>)
 8001c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7a:	4a0c      	ldr	r2, [pc, #48]	; (8001cac <HAL_I2C_MspInit+0x10c>)
 8001c7c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c80:	6413      	str	r3, [r2, #64]	; 0x40
 8001c82:	4b0a      	ldr	r3, [pc, #40]	; (8001cac <HAL_I2C_MspInit+0x10c>)
 8001c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c8a:	60bb      	str	r3, [r7, #8]
 8001c8c:	68bb      	ldr	r3, [r7, #8]
    /* I2C4 interrupt Init */
    HAL_NVIC_SetPriority(I2C4_EV_IRQn, 5, 0);
 8001c8e:	2200      	movs	r2, #0
 8001c90:	2105      	movs	r1, #5
 8001c92:	205f      	movs	r0, #95	; 0x5f
 8001c94:	f000 ffe4 	bl	8002c60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_EV_IRQn);
 8001c98:	205f      	movs	r0, #95	; 0x5f
 8001c9a:	f000 fffd 	bl	8002c98 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8001c9e:	bf00      	nop
 8001ca0:	37b8      	adds	r7, #184	; 0xb8
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	40006000 	.word	0x40006000
 8001cac:	40023800 	.word	0x40023800
 8001cb0:	40020400 	.word	0x40020400
 8001cb4:	40020c00 	.word	0x40020c00

08001cb8 <HAL_JPEG_MspInit>:
* This function configures the hardware resources used in this example
* @param hjpeg: JPEG handle pointer
* @retval None
*/
void HAL_JPEG_MspInit(JPEG_HandleTypeDef* hjpeg)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  if(hjpeg->Instance==JPEG)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a48      	ldr	r2, [pc, #288]	; (8001de8 <HAL_JPEG_MspInit+0x130>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	f040 808a 	bne.w	8001de0 <HAL_JPEG_MspInit+0x128>
  {
  /* USER CODE BEGIN JPEG_MspInit 0 */

  /* USER CODE END JPEG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_JPEG_CLK_ENABLE();
 8001ccc:	4b47      	ldr	r3, [pc, #284]	; (8001dec <HAL_JPEG_MspInit+0x134>)
 8001cce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cd0:	4a46      	ldr	r2, [pc, #280]	; (8001dec <HAL_JPEG_MspInit+0x134>)
 8001cd2:	f043 0302 	orr.w	r3, r3, #2
 8001cd6:	6353      	str	r3, [r2, #52]	; 0x34
 8001cd8:	4b44      	ldr	r3, [pc, #272]	; (8001dec <HAL_JPEG_MspInit+0x134>)
 8001cda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cdc:	f003 0302 	and.w	r3, r3, #2
 8001ce0:	60fb      	str	r3, [r7, #12]
 8001ce2:	68fb      	ldr	r3, [r7, #12]

    /* JPEG DMA Init */
    /* JPEG_IN Init */
    hdma_jpeg_in.Instance = DMA2_Stream0;
 8001ce4:	4b42      	ldr	r3, [pc, #264]	; (8001df0 <HAL_JPEG_MspInit+0x138>)
 8001ce6:	4a43      	ldr	r2, [pc, #268]	; (8001df4 <HAL_JPEG_MspInit+0x13c>)
 8001ce8:	601a      	str	r2, [r3, #0]
    hdma_jpeg_in.Init.Channel = DMA_CHANNEL_9;
 8001cea:	4b41      	ldr	r3, [pc, #260]	; (8001df0 <HAL_JPEG_MspInit+0x138>)
 8001cec:	f04f 5290 	mov.w	r2, #301989888	; 0x12000000
 8001cf0:	605a      	str	r2, [r3, #4]
    hdma_jpeg_in.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001cf2:	4b3f      	ldr	r3, [pc, #252]	; (8001df0 <HAL_JPEG_MspInit+0x138>)
 8001cf4:	2240      	movs	r2, #64	; 0x40
 8001cf6:	609a      	str	r2, [r3, #8]
    hdma_jpeg_in.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cf8:	4b3d      	ldr	r3, [pc, #244]	; (8001df0 <HAL_JPEG_MspInit+0x138>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	60da      	str	r2, [r3, #12]
    hdma_jpeg_in.Init.MemInc = DMA_MINC_ENABLE;
 8001cfe:	4b3c      	ldr	r3, [pc, #240]	; (8001df0 <HAL_JPEG_MspInit+0x138>)
 8001d00:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d04:	611a      	str	r2, [r3, #16]
    hdma_jpeg_in.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001d06:	4b3a      	ldr	r3, [pc, #232]	; (8001df0 <HAL_JPEG_MspInit+0x138>)
 8001d08:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001d0c:	615a      	str	r2, [r3, #20]
    hdma_jpeg_in.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001d0e:	4b38      	ldr	r3, [pc, #224]	; (8001df0 <HAL_JPEG_MspInit+0x138>)
 8001d10:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d14:	619a      	str	r2, [r3, #24]
    hdma_jpeg_in.Init.Mode = DMA_NORMAL;
 8001d16:	4b36      	ldr	r3, [pc, #216]	; (8001df0 <HAL_JPEG_MspInit+0x138>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	61da      	str	r2, [r3, #28]
    hdma_jpeg_in.Init.Priority = DMA_PRIORITY_LOW;
 8001d1c:	4b34      	ldr	r3, [pc, #208]	; (8001df0 <HAL_JPEG_MspInit+0x138>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	621a      	str	r2, [r3, #32]
    hdma_jpeg_in.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001d22:	4b33      	ldr	r3, [pc, #204]	; (8001df0 <HAL_JPEG_MspInit+0x138>)
 8001d24:	2204      	movs	r2, #4
 8001d26:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_jpeg_in.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001d28:	4b31      	ldr	r3, [pc, #196]	; (8001df0 <HAL_JPEG_MspInit+0x138>)
 8001d2a:	2203      	movs	r2, #3
 8001d2c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_jpeg_in.Init.MemBurst = DMA_MBURST_INC4;
 8001d2e:	4b30      	ldr	r3, [pc, #192]	; (8001df0 <HAL_JPEG_MspInit+0x138>)
 8001d30:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001d34:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_jpeg_in.Init.PeriphBurst = DMA_PBURST_INC4;
 8001d36:	4b2e      	ldr	r3, [pc, #184]	; (8001df0 <HAL_JPEG_MspInit+0x138>)
 8001d38:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001d3c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_jpeg_in) != HAL_OK)
 8001d3e:	482c      	ldr	r0, [pc, #176]	; (8001df0 <HAL_JPEG_MspInit+0x138>)
 8001d40:	f001 f91e 	bl	8002f80 <HAL_DMA_Init>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <HAL_JPEG_MspInit+0x96>
    {
      Error_Handler();
 8001d4a:	f7ff fe67 	bl	8001a1c <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmain,hdma_jpeg_in);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4a27      	ldr	r2, [pc, #156]	; (8001df0 <HAL_JPEG_MspInit+0x138>)
 8001d52:	631a      	str	r2, [r3, #48]	; 0x30
 8001d54:	4a26      	ldr	r2, [pc, #152]	; (8001df0 <HAL_JPEG_MspInit+0x138>)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6393      	str	r3, [r2, #56]	; 0x38

    /* JPEG_OUT Init */
    hdma_jpeg_out.Instance = DMA2_Stream1;
 8001d5a:	4b27      	ldr	r3, [pc, #156]	; (8001df8 <HAL_JPEG_MspInit+0x140>)
 8001d5c:	4a27      	ldr	r2, [pc, #156]	; (8001dfc <HAL_JPEG_MspInit+0x144>)
 8001d5e:	601a      	str	r2, [r3, #0]
    hdma_jpeg_out.Init.Channel = DMA_CHANNEL_9;
 8001d60:	4b25      	ldr	r3, [pc, #148]	; (8001df8 <HAL_JPEG_MspInit+0x140>)
 8001d62:	f04f 5290 	mov.w	r2, #301989888	; 0x12000000
 8001d66:	605a      	str	r2, [r3, #4]
    hdma_jpeg_out.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d68:	4b23      	ldr	r3, [pc, #140]	; (8001df8 <HAL_JPEG_MspInit+0x140>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	609a      	str	r2, [r3, #8]
    hdma_jpeg_out.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d6e:	4b22      	ldr	r3, [pc, #136]	; (8001df8 <HAL_JPEG_MspInit+0x140>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	60da      	str	r2, [r3, #12]
    hdma_jpeg_out.Init.MemInc = DMA_MINC_ENABLE;
 8001d74:	4b20      	ldr	r3, [pc, #128]	; (8001df8 <HAL_JPEG_MspInit+0x140>)
 8001d76:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d7a:	611a      	str	r2, [r3, #16]
    hdma_jpeg_out.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001d7c:	4b1e      	ldr	r3, [pc, #120]	; (8001df8 <HAL_JPEG_MspInit+0x140>)
 8001d7e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001d82:	615a      	str	r2, [r3, #20]
    hdma_jpeg_out.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001d84:	4b1c      	ldr	r3, [pc, #112]	; (8001df8 <HAL_JPEG_MspInit+0x140>)
 8001d86:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d8a:	619a      	str	r2, [r3, #24]
    hdma_jpeg_out.Init.Mode = DMA_NORMAL;
 8001d8c:	4b1a      	ldr	r3, [pc, #104]	; (8001df8 <HAL_JPEG_MspInit+0x140>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	61da      	str	r2, [r3, #28]
    hdma_jpeg_out.Init.Priority = DMA_PRIORITY_LOW;
 8001d92:	4b19      	ldr	r3, [pc, #100]	; (8001df8 <HAL_JPEG_MspInit+0x140>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	621a      	str	r2, [r3, #32]
    hdma_jpeg_out.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001d98:	4b17      	ldr	r3, [pc, #92]	; (8001df8 <HAL_JPEG_MspInit+0x140>)
 8001d9a:	2204      	movs	r2, #4
 8001d9c:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_jpeg_out.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001d9e:	4b16      	ldr	r3, [pc, #88]	; (8001df8 <HAL_JPEG_MspInit+0x140>)
 8001da0:	2203      	movs	r2, #3
 8001da2:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_jpeg_out.Init.MemBurst = DMA_MBURST_INC4;
 8001da4:	4b14      	ldr	r3, [pc, #80]	; (8001df8 <HAL_JPEG_MspInit+0x140>)
 8001da6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001daa:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_jpeg_out.Init.PeriphBurst = DMA_PBURST_INC4;
 8001dac:	4b12      	ldr	r3, [pc, #72]	; (8001df8 <HAL_JPEG_MspInit+0x140>)
 8001dae:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001db2:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_jpeg_out) != HAL_OK)
 8001db4:	4810      	ldr	r0, [pc, #64]	; (8001df8 <HAL_JPEG_MspInit+0x140>)
 8001db6:	f001 f8e3 	bl	8002f80 <HAL_DMA_Init>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d001      	beq.n	8001dc4 <HAL_JPEG_MspInit+0x10c>
    {
      Error_Handler();
 8001dc0:	f7ff fe2c 	bl	8001a1c <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmaout,hdma_jpeg_out);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	4a0c      	ldr	r2, [pc, #48]	; (8001df8 <HAL_JPEG_MspInit+0x140>)
 8001dc8:	635a      	str	r2, [r3, #52]	; 0x34
 8001dca:	4a0b      	ldr	r2, [pc, #44]	; (8001df8 <HAL_JPEG_MspInit+0x140>)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6393      	str	r3, [r2, #56]	; 0x38

    /* JPEG interrupt Init */
    HAL_NVIC_SetPriority(JPEG_IRQn, 5, 0);
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	2105      	movs	r1, #5
 8001dd4:	206c      	movs	r0, #108	; 0x6c
 8001dd6:	f000 ff43 	bl	8002c60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
 8001dda:	206c      	movs	r0, #108	; 0x6c
 8001ddc:	f000 ff5c 	bl	8002c98 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN JPEG_MspInit 1 */

  /* USER CODE END JPEG_MspInit 1 */
  }

}
 8001de0:	bf00      	nop
 8001de2:	3710      	adds	r7, #16
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	50051000 	.word	0x50051000
 8001dec:	40023800 	.word	0x40023800
 8001df0:	20009870 	.word	0x20009870
 8001df4:	40026410 	.word	0x40026410
 8001df8:	200098d0 	.word	0x200098d0
 8001dfc:	40026428 	.word	0x40026428

08001e00 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b0a8      	sub	sp, #160	; 0xa0
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e08:	f107 0310 	add.w	r3, r7, #16
 8001e0c:	2290      	movs	r2, #144	; 0x90
 8001e0e:	2100      	movs	r1, #0
 8001e10:	4618      	mov	r0, r3
 8001e12:	f024 fd73 	bl	80268fc <memset>
  if(hltdc->Instance==LTDC)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a1a      	ldr	r2, [pc, #104]	; (8001e84 <HAL_LTDC_MspInit+0x84>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d12c      	bne.n	8001e7a <HAL_LTDC_MspInit+0x7a>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001e20:	2308      	movs	r3, #8
 8001e22:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8001e24:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001e28:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 7;
 8001e2a:	2307      	movs	r3, #7
 8001e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001e2e:	2302      	movs	r3, #2
 8001e30:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8001e32:	2300      	movs	r3, #0
 8001e34:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8001e36:	2301      	movs	r3, #1
 8001e38:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e3e:	f107 0310 	add.w	r3, r7, #16
 8001e42:	4618      	mov	r0, r3
 8001e44:	f006 fca6 	bl	8008794 <HAL_RCCEx_PeriphCLKConfig>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <HAL_LTDC_MspInit+0x52>
    {
      Error_Handler();
 8001e4e:	f7ff fde5 	bl	8001a1c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001e52:	4b0d      	ldr	r3, [pc, #52]	; (8001e88 <HAL_LTDC_MspInit+0x88>)
 8001e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e56:	4a0c      	ldr	r2, [pc, #48]	; (8001e88 <HAL_LTDC_MspInit+0x88>)
 8001e58:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001e5c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e5e:	4b0a      	ldr	r3, [pc, #40]	; (8001e88 <HAL_LTDC_MspInit+0x88>)
 8001e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e62:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e66:	60fb      	str	r3, [r7, #12]
 8001e68:	68fb      	ldr	r3, [r7, #12]
    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 3, 0);
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	2103      	movs	r1, #3
 8001e6e:	2058      	movs	r0, #88	; 0x58
 8001e70:	f000 fef6 	bl	8002c60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001e74:	2058      	movs	r0, #88	; 0x58
 8001e76:	f000 ff0f 	bl	8002c98 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001e7a:	bf00      	nop
 8001e7c:	37a0      	adds	r7, #160	; 0xa0
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	40016800 	.word	0x40016800
 8001e88:	40023800 	.word	0x40023800

08001e8c <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b08c      	sub	sp, #48	; 0x30
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e94:	f107 031c 	add.w	r3, r7, #28
 8001e98:	2200      	movs	r2, #0
 8001e9a:	601a      	str	r2, [r3, #0]
 8001e9c:	605a      	str	r2, [r3, #4]
 8001e9e:	609a      	str	r2, [r3, #8]
 8001ea0:	60da      	str	r2, [r3, #12]
 8001ea2:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a4a      	ldr	r2, [pc, #296]	; (8001fd4 <HAL_QSPI_MspInit+0x148>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	f040 808e 	bne.w	8001fcc <HAL_QSPI_MspInit+0x140>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001eb0:	4b49      	ldr	r3, [pc, #292]	; (8001fd8 <HAL_QSPI_MspInit+0x14c>)
 8001eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eb4:	4a48      	ldr	r2, [pc, #288]	; (8001fd8 <HAL_QSPI_MspInit+0x14c>)
 8001eb6:	f043 0302 	orr.w	r3, r3, #2
 8001eba:	6393      	str	r3, [r2, #56]	; 0x38
 8001ebc:	4b46      	ldr	r3, [pc, #280]	; (8001fd8 <HAL_QSPI_MspInit+0x14c>)
 8001ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ec0:	f003 0302 	and.w	r3, r3, #2
 8001ec4:	61bb      	str	r3, [r7, #24]
 8001ec6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ec8:	4b43      	ldr	r3, [pc, #268]	; (8001fd8 <HAL_QSPI_MspInit+0x14c>)
 8001eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ecc:	4a42      	ldr	r2, [pc, #264]	; (8001fd8 <HAL_QSPI_MspInit+0x14c>)
 8001ece:	f043 0310 	orr.w	r3, r3, #16
 8001ed2:	6313      	str	r3, [r2, #48]	; 0x30
 8001ed4:	4b40      	ldr	r3, [pc, #256]	; (8001fd8 <HAL_QSPI_MspInit+0x14c>)
 8001ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed8:	f003 0310 	and.w	r3, r3, #16
 8001edc:	617b      	str	r3, [r7, #20]
 8001ede:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ee0:	4b3d      	ldr	r3, [pc, #244]	; (8001fd8 <HAL_QSPI_MspInit+0x14c>)
 8001ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee4:	4a3c      	ldr	r2, [pc, #240]	; (8001fd8 <HAL_QSPI_MspInit+0x14c>)
 8001ee6:	f043 0302 	orr.w	r3, r3, #2
 8001eea:	6313      	str	r3, [r2, #48]	; 0x30
 8001eec:	4b3a      	ldr	r3, [pc, #232]	; (8001fd8 <HAL_QSPI_MspInit+0x14c>)
 8001eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef0:	f003 0302 	and.w	r3, r3, #2
 8001ef4:	613b      	str	r3, [r7, #16]
 8001ef6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ef8:	4b37      	ldr	r3, [pc, #220]	; (8001fd8 <HAL_QSPI_MspInit+0x14c>)
 8001efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efc:	4a36      	ldr	r2, [pc, #216]	; (8001fd8 <HAL_QSPI_MspInit+0x14c>)
 8001efe:	f043 0304 	orr.w	r3, r3, #4
 8001f02:	6313      	str	r3, [r2, #48]	; 0x30
 8001f04:	4b34      	ldr	r3, [pc, #208]	; (8001fd8 <HAL_QSPI_MspInit+0x14c>)
 8001f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f08:	f003 0304 	and.w	r3, r3, #4
 8001f0c:	60fb      	str	r3, [r7, #12]
 8001f0e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f10:	4b31      	ldr	r3, [pc, #196]	; (8001fd8 <HAL_QSPI_MspInit+0x14c>)
 8001f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f14:	4a30      	ldr	r2, [pc, #192]	; (8001fd8 <HAL_QSPI_MspInit+0x14c>)
 8001f16:	f043 0308 	orr.w	r3, r3, #8
 8001f1a:	6313      	str	r3, [r2, #48]	; 0x30
 8001f1c:	4b2e      	ldr	r3, [pc, #184]	; (8001fd8 <HAL_QSPI_MspInit+0x14c>)
 8001f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f20:	f003 0308 	and.w	r3, r3, #8
 8001f24:	60bb      	str	r3, [r7, #8]
 8001f26:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> QUADSPI_BK1_IO1
    PC9     ------> QUADSPI_BK1_IO0
    PB2     ------> QUADSPI_CLK
    PD13     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001f28:	2304      	movs	r3, #4
 8001f2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f2c:	2302      	movs	r3, #2
 8001f2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f30:	2300      	movs	r3, #0
 8001f32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f34:	2303      	movs	r3, #3
 8001f36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001f38:	2309      	movs	r3, #9
 8001f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f3c:	f107 031c 	add.w	r3, r7, #28
 8001f40:	4619      	mov	r1, r3
 8001f42:	4826      	ldr	r0, [pc, #152]	; (8001fdc <HAL_QSPI_MspInit+0x150>)
 8001f44:	f002 fc00 	bl	8004748 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001f48:	2340      	movs	r3, #64	; 0x40
 8001f4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f4c:	2302      	movs	r3, #2
 8001f4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f50:	2301      	movs	r3, #1
 8001f52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f54:	2303      	movs	r3, #3
 8001f56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001f58:	230a      	movs	r3, #10
 8001f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f5c:	f107 031c 	add.w	r3, r7, #28
 8001f60:	4619      	mov	r1, r3
 8001f62:	481f      	ldr	r0, [pc, #124]	; (8001fe0 <HAL_QSPI_MspInit+0x154>)
 8001f64:	f002 fbf0 	bl	8004748 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8001f68:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001f6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f6e:	2302      	movs	r3, #2
 8001f70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f72:	2300      	movs	r3, #0
 8001f74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f76:	2303      	movs	r3, #3
 8001f78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001f7a:	2309      	movs	r3, #9
 8001f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f7e:	f107 031c 	add.w	r3, r7, #28
 8001f82:	4619      	mov	r1, r3
 8001f84:	4817      	ldr	r0, [pc, #92]	; (8001fe4 <HAL_QSPI_MspInit+0x158>)
 8001f86:	f002 fbdf 	bl	8004748 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001f8a:	2304      	movs	r3, #4
 8001f8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f8e:	2302      	movs	r3, #2
 8001f90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f92:	2300      	movs	r3, #0
 8001f94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f96:	2303      	movs	r3, #3
 8001f98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001f9a:	2309      	movs	r3, #9
 8001f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f9e:	f107 031c 	add.w	r3, r7, #28
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	480e      	ldr	r0, [pc, #56]	; (8001fe0 <HAL_QSPI_MspInit+0x154>)
 8001fa6:	f002 fbcf 	bl	8004748 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001faa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb0:	2302      	movs	r3, #2
 8001fb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001fbc:	2309      	movs	r3, #9
 8001fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fc0:	f107 031c 	add.w	r3, r7, #28
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	4808      	ldr	r0, [pc, #32]	; (8001fe8 <HAL_QSPI_MspInit+0x15c>)
 8001fc8:	f002 fbbe 	bl	8004748 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001fcc:	bf00      	nop
 8001fce:	3730      	adds	r7, #48	; 0x30
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	a0001000 	.word	0xa0001000
 8001fd8:	40023800 	.word	0x40023800
 8001fdc:	40021000 	.word	0x40021000
 8001fe0:	40020400 	.word	0x40020400
 8001fe4:	40020800 	.word	0x40020800
 8001fe8:	40020c00 	.word	0x40020c00

08001fec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b08a      	sub	sp, #40	; 0x28
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff4:	f107 0314 	add.w	r3, r7, #20
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	601a      	str	r2, [r3, #0]
 8001ffc:	605a      	str	r2, [r3, #4]
 8001ffe:	609a      	str	r2, [r3, #8]
 8002000:	60da      	str	r2, [r3, #12]
 8002002:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a17      	ldr	r2, [pc, #92]	; (8002068 <HAL_SPI_MspInit+0x7c>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d127      	bne.n	800205e <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800200e:	4b17      	ldr	r3, [pc, #92]	; (800206c <HAL_SPI_MspInit+0x80>)
 8002010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002012:	4a16      	ldr	r2, [pc, #88]	; (800206c <HAL_SPI_MspInit+0x80>)
 8002014:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002018:	6453      	str	r3, [r2, #68]	; 0x44
 800201a:	4b14      	ldr	r3, [pc, #80]	; (800206c <HAL_SPI_MspInit+0x80>)
 800201c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800201e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002022:	613b      	str	r3, [r7, #16]
 8002024:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002026:	4b11      	ldr	r3, [pc, #68]	; (800206c <HAL_SPI_MspInit+0x80>)
 8002028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202a:	4a10      	ldr	r2, [pc, #64]	; (800206c <HAL_SPI_MspInit+0x80>)
 800202c:	f043 0302 	orr.w	r3, r3, #2
 8002030:	6313      	str	r3, [r2, #48]	; 0x30
 8002032:	4b0e      	ldr	r3, [pc, #56]	; (800206c <HAL_SPI_MspInit+0x80>)
 8002034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002036:	f003 0302 	and.w	r3, r3, #2
 800203a:	60fb      	str	r3, [r7, #12]
 800203c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB5     ------> SPI1_MOSI
    PB4     ------> SPI1_MISO
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_3;
 800203e:	2338      	movs	r3, #56	; 0x38
 8002040:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002042:	2302      	movs	r3, #2
 8002044:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002046:	2300      	movs	r3, #0
 8002048:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800204a:	2303      	movs	r3, #3
 800204c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800204e:	2305      	movs	r3, #5
 8002050:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002052:	f107 0314 	add.w	r3, r7, #20
 8002056:	4619      	mov	r1, r3
 8002058:	4805      	ldr	r0, [pc, #20]	; (8002070 <HAL_SPI_MspInit+0x84>)
 800205a:	f002 fb75 	bl	8004748 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800205e:	bf00      	nop
 8002060:	3728      	adds	r7, #40	; 0x28
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	40013000 	.word	0x40013000
 800206c:	40023800 	.word	0x40023800
 8002070:	40020400 	.word	0x40020400

08002074 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002074:	b580      	push	{r7, lr}
 8002076:	b086      	sub	sp, #24
 8002078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800207a:	1d3b      	adds	r3, r7, #4
 800207c:	2200      	movs	r2, #0
 800207e:	601a      	str	r2, [r3, #0]
 8002080:	605a      	str	r2, [r3, #4]
 8002082:	609a      	str	r2, [r3, #8]
 8002084:	60da      	str	r2, [r3, #12]
 8002086:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002088:	4b3b      	ldr	r3, [pc, #236]	; (8002178 <HAL_FMC_MspInit+0x104>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d16f      	bne.n	8002170 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8002090:	4b39      	ldr	r3, [pc, #228]	; (8002178 <HAL_FMC_MspInit+0x104>)
 8002092:	2201      	movs	r2, #1
 8002094:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002096:	4b39      	ldr	r3, [pc, #228]	; (800217c <HAL_FMC_MspInit+0x108>)
 8002098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800209a:	4a38      	ldr	r2, [pc, #224]	; (800217c <HAL_FMC_MspInit+0x108>)
 800209c:	f043 0301 	orr.w	r3, r3, #1
 80020a0:	6393      	str	r3, [r2, #56]	; 0x38
 80020a2:	4b36      	ldr	r3, [pc, #216]	; (800217c <HAL_FMC_MspInit+0x108>)
 80020a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020a6:	f003 0301 	and.w	r3, r3, #1
 80020aa:	603b      	str	r3, [r7, #0]
 80020ac:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9
 80020ae:	f64f 7383 	movw	r3, #65411	; 0xff83
 80020b2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_7|GPIO_PIN_10
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b4:	2302      	movs	r3, #2
 80020b6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b8:	2300      	movs	r3, #0
 80020ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020bc:	2303      	movs	r3, #3
 80020be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80020c0:	230c      	movs	r3, #12
 80020c2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020c4:	1d3b      	adds	r3, r7, #4
 80020c6:	4619      	mov	r1, r3
 80020c8:	482d      	ldr	r0, [pc, #180]	; (8002180 <HAL_FMC_MspInit+0x10c>)
 80020ca:	f002 fb3d 	bl	8004748 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0
 80020ce:	f248 1333 	movw	r3, #33075	; 0x8133
 80020d2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d4:	2302      	movs	r3, #2
 80020d6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d8:	2300      	movs	r3, #0
 80020da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020dc:	2303      	movs	r3, #3
 80020de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80020e0:	230c      	movs	r3, #12
 80020e2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80020e4:	1d3b      	adds	r3, r7, #4
 80020e6:	4619      	mov	r1, r3
 80020e8:	4826      	ldr	r0, [pc, #152]	; (8002184 <HAL_FMC_MspInit+0x110>)
 80020ea:	f002 fb2d 	bl	8004748 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
 80020ee:	f24c 7303 	movw	r3, #50947	; 0xc703
 80020f2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020f4:	2302      	movs	r3, #2
 80020f6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f8:	2300      	movs	r3, #0
 80020fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020fc:	2303      	movs	r3, #3
 80020fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002100:	230c      	movs	r3, #12
 8002102:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002104:	1d3b      	adds	r3, r7, #4
 8002106:	4619      	mov	r1, r3
 8002108:	481f      	ldr	r0, [pc, #124]	; (8002188 <HAL_FMC_MspInit+0x114>)
 800210a:	f002 fb1d 	bl	8004748 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_5
 800210e:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8002112:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_6|GPIO_PIN_1
                          |GPIO_PIN_9|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002114:	2302      	movs	r3, #2
 8002116:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002118:	2300      	movs	r3, #0
 800211a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800211c:	2303      	movs	r3, #3
 800211e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002120:	230c      	movs	r3, #12
 8002122:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002124:	1d3b      	adds	r3, r7, #4
 8002126:	4619      	mov	r1, r3
 8002128:	4818      	ldr	r0, [pc, #96]	; (800218c <HAL_FMC_MspInit+0x118>)
 800212a:	f002 fb0d 	bl	8004748 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800212e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002132:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_15
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002134:	2302      	movs	r3, #2
 8002136:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002138:	2300      	movs	r3, #0
 800213a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800213c:	2303      	movs	r3, #3
 800213e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002140:	230c      	movs	r3, #12
 8002142:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002144:	1d3b      	adds	r3, r7, #4
 8002146:	4619      	mov	r1, r3
 8002148:	4811      	ldr	r0, [pc, #68]	; (8002190 <HAL_FMC_MspInit+0x11c>)
 800214a:	f002 fafd 	bl	8004748 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_5
 800214e:	f64f 732c 	movw	r3, #65324	; 0xff2c
 8002152:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_9
                          |GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002154:	2302      	movs	r3, #2
 8002156:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002158:	2300      	movs	r3, #0
 800215a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800215c:	2303      	movs	r3, #3
 800215e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002160:	230c      	movs	r3, #12
 8002162:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002164:	1d3b      	adds	r3, r7, #4
 8002166:	4619      	mov	r1, r3
 8002168:	480a      	ldr	r0, [pc, #40]	; (8002194 <HAL_FMC_MspInit+0x120>)
 800216a:	f002 faed 	bl	8004748 <HAL_GPIO_Init>
 800216e:	e000      	b.n	8002172 <HAL_FMC_MspInit+0xfe>
    return;
 8002170:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002172:	3718      	adds	r7, #24
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	20009ac8 	.word	0x20009ac8
 800217c:	40023800 	.word	0x40023800
 8002180:	40021000 	.word	0x40021000
 8002184:	40021800 	.word	0x40021800
 8002188:	40020c00 	.word	0x40020c00
 800218c:	40022000 	.word	0x40022000
 8002190:	40021400 	.word	0x40021400
 8002194:	40021c00 	.word	0x40021c00

08002198 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80021a0:	f7ff ff68 	bl	8002074 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80021a4:	bf00      	nop
 80021a6:	3708      	adds	r7, #8
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}

080021ac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b08e      	sub	sp, #56	; 0x38
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80021b4:	2300      	movs	r3, #0
 80021b6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80021b8:	2300      	movs	r3, #0
 80021ba:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80021bc:	4b33      	ldr	r3, [pc, #204]	; (800228c <HAL_InitTick+0xe0>)
 80021be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c0:	4a32      	ldr	r2, [pc, #200]	; (800228c <HAL_InitTick+0xe0>)
 80021c2:	f043 0310 	orr.w	r3, r3, #16
 80021c6:	6413      	str	r3, [r2, #64]	; 0x40
 80021c8:	4b30      	ldr	r3, [pc, #192]	; (800228c <HAL_InitTick+0xe0>)
 80021ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021cc:	f003 0310 	and.w	r3, r3, #16
 80021d0:	60fb      	str	r3, [r7, #12]
 80021d2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80021d4:	f107 0210 	add.w	r2, r7, #16
 80021d8:	f107 0314 	add.w	r3, r7, #20
 80021dc:	4611      	mov	r1, r2
 80021de:	4618      	mov	r0, r3
 80021e0:	f006 faa6 	bl	8008730 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80021e4:	6a3b      	ldr	r3, [r7, #32]
 80021e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80021e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d103      	bne.n	80021f6 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80021ee:	f006 fa8b 	bl	8008708 <HAL_RCC_GetPCLK1Freq>
 80021f2:	6378      	str	r0, [r7, #52]	; 0x34
 80021f4:	e004      	b.n	8002200 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80021f6:	f006 fa87 	bl	8008708 <HAL_RCC_GetPCLK1Freq>
 80021fa:	4603      	mov	r3, r0
 80021fc:	005b      	lsls	r3, r3, #1
 80021fe:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002200:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002202:	4a23      	ldr	r2, [pc, #140]	; (8002290 <HAL_InitTick+0xe4>)
 8002204:	fba2 2303 	umull	r2, r3, r2, r3
 8002208:	0c9b      	lsrs	r3, r3, #18
 800220a:	3b01      	subs	r3, #1
 800220c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800220e:	4b21      	ldr	r3, [pc, #132]	; (8002294 <HAL_InitTick+0xe8>)
 8002210:	4a21      	ldr	r2, [pc, #132]	; (8002298 <HAL_InitTick+0xec>)
 8002212:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002214:	4b1f      	ldr	r3, [pc, #124]	; (8002294 <HAL_InitTick+0xe8>)
 8002216:	f240 32e7 	movw	r2, #999	; 0x3e7
 800221a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800221c:	4a1d      	ldr	r2, [pc, #116]	; (8002294 <HAL_InitTick+0xe8>)
 800221e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002220:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002222:	4b1c      	ldr	r3, [pc, #112]	; (8002294 <HAL_InitTick+0xe8>)
 8002224:	2200      	movs	r2, #0
 8002226:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002228:	4b1a      	ldr	r3, [pc, #104]	; (8002294 <HAL_InitTick+0xe8>)
 800222a:	2200      	movs	r2, #0
 800222c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800222e:	4b19      	ldr	r3, [pc, #100]	; (8002294 <HAL_InitTick+0xe8>)
 8002230:	2200      	movs	r2, #0
 8002232:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002234:	4817      	ldr	r0, [pc, #92]	; (8002294 <HAL_InitTick+0xe8>)
 8002236:	f007 f811 	bl	800925c <HAL_TIM_Base_Init>
 800223a:	4603      	mov	r3, r0
 800223c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002240:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002244:	2b00      	cmp	r3, #0
 8002246:	d11b      	bne.n	8002280 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002248:	4812      	ldr	r0, [pc, #72]	; (8002294 <HAL_InitTick+0xe8>)
 800224a:	f007 f869 	bl	8009320 <HAL_TIM_Base_Start_IT>
 800224e:	4603      	mov	r3, r0
 8002250:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002254:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002258:	2b00      	cmp	r3, #0
 800225a:	d111      	bne.n	8002280 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800225c:	2036      	movs	r0, #54	; 0x36
 800225e:	f000 fd1b 	bl	8002c98 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2b0f      	cmp	r3, #15
 8002266:	d808      	bhi.n	800227a <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002268:	2200      	movs	r2, #0
 800226a:	6879      	ldr	r1, [r7, #4]
 800226c:	2036      	movs	r0, #54	; 0x36
 800226e:	f000 fcf7 	bl	8002c60 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002272:	4a0a      	ldr	r2, [pc, #40]	; (800229c <HAL_InitTick+0xf0>)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6013      	str	r3, [r2, #0]
 8002278:	e002      	b.n	8002280 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002280:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002284:	4618      	mov	r0, r3
 8002286:	3738      	adds	r7, #56	; 0x38
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	40023800 	.word	0x40023800
 8002290:	431bde83 	.word	0x431bde83
 8002294:	20009acc 	.word	0x20009acc
 8002298:	40001000 	.word	0x40001000
 800229c:	20000008 	.word	0x20000008

080022a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022a4:	e7fe      	b.n	80022a4 <NMI_Handler+0x4>

080022a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022a6:	b480      	push	{r7}
 80022a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022aa:	e7fe      	b.n	80022aa <HardFault_Handler+0x4>

080022ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022b0:	e7fe      	b.n	80022b0 <MemManage_Handler+0x4>

080022b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022b2:	b480      	push	{r7}
 80022b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022b6:	e7fe      	b.n	80022b6 <BusFault_Handler+0x4>

080022b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022bc:	e7fe      	b.n	80022bc <UsageFault_Handler+0x4>

080022be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022be:	b480      	push	{r7}
 80022c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022c2:	bf00      	nop
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80022d0:	4802      	ldr	r0, [pc, #8]	; (80022dc <TIM6_DAC_IRQHandler+0x10>)
 80022d2:	f007 f89d 	bl	8009410 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80022d6:	bf00      	nop
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	20009acc 	.word	0x20009acc

080022e0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_jpeg_in);
 80022e4:	4802      	ldr	r0, [pc, #8]	; (80022f0 <DMA2_Stream0_IRQHandler+0x10>)
 80022e6:	f000 ff7b 	bl	80031e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80022ea:	bf00      	nop
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	20009870 	.word	0x20009870

080022f4 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_jpeg_out);
 80022f8:	4802      	ldr	r0, [pc, #8]	; (8002304 <DMA2_Stream1_IRQHandler+0x10>)
 80022fa:	f000 ff71 	bl	80031e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80022fe:	bf00      	nop
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	200098d0 	.word	0x200098d0

08002308 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800230c:	4802      	ldr	r0, [pc, #8]	; (8002318 <LTDC_IRQHandler+0x10>)
 800230e:	f004 fd71 	bl	8006df4 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8002312:	bf00      	nop
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	20009930 	.word	0x20009930

0800231c <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002320:	4802      	ldr	r0, [pc, #8]	; (800232c <DMA2D_IRQHandler+0x10>)
 8002322:	f001 fa2d 	bl	8003780 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8002326:	bf00      	nop
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	20009750 	.word	0x20009750

08002330 <I2C4_EV_IRQHandler>:

/**
  * @brief This function handles I2C4 event interrupt.
  */
void I2C4_EV_IRQHandler(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_EV_IRQn 0 */

  /* USER CODE END I2C4_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c4);
 8002334:	4802      	ldr	r0, [pc, #8]	; (8002340 <I2C4_EV_IRQHandler+0x10>)
 8002336:	f002 fc77 	bl	8004c28 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C4_EV_IRQn 1 */

  /* USER CODE END I2C4_EV_IRQn 1 */
}
 800233a:	bf00      	nop
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	200097c4 	.word	0x200097c4

08002344 <DSI_IRQHandler>:

/**
  * @brief This function handles DSI global interrupt.
  */
void DSI_IRQHandler(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 8002348:	4802      	ldr	r0, [pc, #8]	; (8002354 <DSI_IRQHandler+0x10>)
 800234a:	f001 fdcf 	bl	8003eec <HAL_DSI_IRQHandler>
  /* USER CODE BEGIN DSI_IRQn 1 */

  /* USER CODE END DSI_IRQn 1 */
}
 800234e:	bf00      	nop
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	200097a8 	.word	0x200097a8

08002358 <JPEG_IRQHandler>:

/**
  * @brief This function handles JPEG global interrupt.
  */
void JPEG_IRQHandler(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN JPEG_IRQn 0 */

  /* USER CODE END JPEG_IRQn 0 */
  HAL_JPEG_IRQHandler(&hjpeg);
 800235c:	4802      	ldr	r0, [pc, #8]	; (8002368 <JPEG_IRQHandler+0x10>)
 800235e:	f002 ffed 	bl	800533c <HAL_JPEG_IRQHandler>
  /* USER CODE BEGIN JPEG_IRQn 1 */

  /* USER CODE END JPEG_IRQn 1 */
}
 8002362:	bf00      	nop
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	20009818 	.word	0x20009818

0800236c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800236c:	b480      	push	{r7}
 800236e:	af00      	add	r7, sp, #0
  return 1;
 8002370:	2301      	movs	r3, #1
}
 8002372:	4618      	mov	r0, r3
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr

0800237c <_kill>:

int _kill(int pid, int sig)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002386:	f024 fa5f 	bl	8026848 <__errno>
 800238a:	4603      	mov	r3, r0
 800238c:	2216      	movs	r2, #22
 800238e:	601a      	str	r2, [r3, #0]
  return -1;
 8002390:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002394:	4618      	mov	r0, r3
 8002396:	3708      	adds	r7, #8
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}

0800239c <_exit>:

void _exit (int status)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80023a4:	f04f 31ff 	mov.w	r1, #4294967295
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f7ff ffe7 	bl	800237c <_kill>
  while (1) {}    /* Make sure we hang here */
 80023ae:	e7fe      	b.n	80023ae <_exit+0x12>

080023b0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b086      	sub	sp, #24
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	60b9      	str	r1, [r7, #8]
 80023ba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023bc:	2300      	movs	r3, #0
 80023be:	617b      	str	r3, [r7, #20]
 80023c0:	e00a      	b.n	80023d8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80023c2:	f3af 8000 	nop.w
 80023c6:	4601      	mov	r1, r0
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	1c5a      	adds	r2, r3, #1
 80023cc:	60ba      	str	r2, [r7, #8]
 80023ce:	b2ca      	uxtb	r2, r1
 80023d0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	3301      	adds	r3, #1
 80023d6:	617b      	str	r3, [r7, #20]
 80023d8:	697a      	ldr	r2, [r7, #20]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	429a      	cmp	r2, r3
 80023de:	dbf0      	blt.n	80023c2 <_read+0x12>
  }

  return len;
 80023e0:	687b      	ldr	r3, [r7, #4]
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3718      	adds	r7, #24
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}

080023ea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80023ea:	b580      	push	{r7, lr}
 80023ec:	b086      	sub	sp, #24
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	60f8      	str	r0, [r7, #12]
 80023f2:	60b9      	str	r1, [r7, #8]
 80023f4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023f6:	2300      	movs	r3, #0
 80023f8:	617b      	str	r3, [r7, #20]
 80023fa:	e009      	b.n	8002410 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	1c5a      	adds	r2, r3, #1
 8002400:	60ba      	str	r2, [r7, #8]
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	4618      	mov	r0, r3
 8002406:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	3301      	adds	r3, #1
 800240e:	617b      	str	r3, [r7, #20]
 8002410:	697a      	ldr	r2, [r7, #20]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	429a      	cmp	r2, r3
 8002416:	dbf1      	blt.n	80023fc <_write+0x12>
  }
  return len;
 8002418:	687b      	ldr	r3, [r7, #4]
}
 800241a:	4618      	mov	r0, r3
 800241c:	3718      	adds	r7, #24
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}

08002422 <_close>:

int _close(int file)
{
 8002422:	b480      	push	{r7}
 8002424:	b083      	sub	sp, #12
 8002426:	af00      	add	r7, sp, #0
 8002428:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800242a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800242e:	4618      	mov	r0, r3
 8002430:	370c      	adds	r7, #12
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr

0800243a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800243a:	b480      	push	{r7}
 800243c:	b083      	sub	sp, #12
 800243e:	af00      	add	r7, sp, #0
 8002440:	6078      	str	r0, [r7, #4]
 8002442:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800244a:	605a      	str	r2, [r3, #4]
  return 0;
 800244c:	2300      	movs	r3, #0
}
 800244e:	4618      	mov	r0, r3
 8002450:	370c      	adds	r7, #12
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr

0800245a <_isatty>:

int _isatty(int file)
{
 800245a:	b480      	push	{r7}
 800245c:	b083      	sub	sp, #12
 800245e:	af00      	add	r7, sp, #0
 8002460:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002462:	2301      	movs	r3, #1
}
 8002464:	4618      	mov	r0, r3
 8002466:	370c      	adds	r7, #12
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr

08002470 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002470:	b480      	push	{r7}
 8002472:	b085      	sub	sp, #20
 8002474:	af00      	add	r7, sp, #0
 8002476:	60f8      	str	r0, [r7, #12]
 8002478:	60b9      	str	r1, [r7, #8]
 800247a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800247c:	2300      	movs	r3, #0
}
 800247e:	4618      	mov	r0, r3
 8002480:	3714      	adds	r7, #20
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr
	...

0800248c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b086      	sub	sp, #24
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002494:	4a14      	ldr	r2, [pc, #80]	; (80024e8 <_sbrk+0x5c>)
 8002496:	4b15      	ldr	r3, [pc, #84]	; (80024ec <_sbrk+0x60>)
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024a0:	4b13      	ldr	r3, [pc, #76]	; (80024f0 <_sbrk+0x64>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d102      	bne.n	80024ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024a8:	4b11      	ldr	r3, [pc, #68]	; (80024f0 <_sbrk+0x64>)
 80024aa:	4a12      	ldr	r2, [pc, #72]	; (80024f4 <_sbrk+0x68>)
 80024ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024ae:	4b10      	ldr	r3, [pc, #64]	; (80024f0 <_sbrk+0x64>)
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4413      	add	r3, r2
 80024b6:	693a      	ldr	r2, [r7, #16]
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d207      	bcs.n	80024cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024bc:	f024 f9c4 	bl	8026848 <__errno>
 80024c0:	4603      	mov	r3, r0
 80024c2:	220c      	movs	r2, #12
 80024c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024c6:	f04f 33ff 	mov.w	r3, #4294967295
 80024ca:	e009      	b.n	80024e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024cc:	4b08      	ldr	r3, [pc, #32]	; (80024f0 <_sbrk+0x64>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024d2:	4b07      	ldr	r3, [pc, #28]	; (80024f0 <_sbrk+0x64>)
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4413      	add	r3, r2
 80024da:	4a05      	ldr	r2, [pc, #20]	; (80024f0 <_sbrk+0x64>)
 80024dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024de:	68fb      	ldr	r3, [r7, #12]
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3718      	adds	r7, #24
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	20080000 	.word	0x20080000
 80024ec:	00001000 	.word	0x00001000
 80024f0:	20009b18 	.word	0x20009b18
 80024f4:	200246d0 	.word	0x200246d0

080024f8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024fc:	4b06      	ldr	r3, [pc, #24]	; (8002518 <SystemInit+0x20>)
 80024fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002502:	4a05      	ldr	r2, [pc, #20]	; (8002518 <SystemInit+0x20>)
 8002504:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002508:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800250c:	bf00      	nop
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop
 8002518:	e000ed00 	.word	0xe000ed00

0800251c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800251c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002554 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002520:	480d      	ldr	r0, [pc, #52]	; (8002558 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002522:	490e      	ldr	r1, [pc, #56]	; (800255c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002524:	4a0e      	ldr	r2, [pc, #56]	; (8002560 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002526:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002528:	e002      	b.n	8002530 <LoopCopyDataInit>

0800252a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800252a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800252c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800252e:	3304      	adds	r3, #4

08002530 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002530:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002532:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002534:	d3f9      	bcc.n	800252a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002536:	4a0b      	ldr	r2, [pc, #44]	; (8002564 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002538:	4c0b      	ldr	r4, [pc, #44]	; (8002568 <LoopFillZerobss+0x26>)
  movs r3, #0
 800253a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800253c:	e001      	b.n	8002542 <LoopFillZerobss>

0800253e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800253e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002540:	3204      	adds	r2, #4

08002542 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002542:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002544:	d3fb      	bcc.n	800253e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002546:	f7ff ffd7 	bl	80024f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800254a:	f024 f995 	bl	8026878 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800254e:	f7fe f851 	bl	80005f4 <main>
  bx  lr    
 8002552:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002554:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002558:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800255c:	20000110 	.word	0x20000110
  ldr r2, =_sidata
 8002560:	0802b64c 	.word	0x0802b64c
  ldr r2, =_sbss
 8002564:	20009710 	.word	0x20009710
  ldr r4, =_ebss
 8002568:	200246cc 	.word	0x200246cc

0800256c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800256c:	e7fe      	b.n	800256c <ADC_IRQHandler>

0800256e <DSI_IO_WriteCmd>:
/**
  * @brief  DSI IO write short/long command.
  * @note : Can be surcharged by application code implementation of the function.
  */
__weak void DSI_IO_WriteCmd(uint32_t NbrParams, uint8_t *pParams)
{
 800256e:	b480      	push	{r7}
 8002570:	b083      	sub	sp, #12
 8002572:	af00      	add	r7, sp, #0
 8002574:	6078      	str	r0, [r7, #4]
 8002576:	6039      	str	r1, [r7, #0]
  /* NOTE : This function Should not be modified, when it is needed,
            the DSI_IO_WriteCmd could be implemented in the user file
   */
}
 8002578:	bf00      	nop
 800257a:	370c      	adds	r7, #12
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr

08002584 <OTM8009A_IO_Delay>:

void OTM8009A_IO_Delay(uint32_t Delay) {
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
	HAL_Delay(Delay);
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f000 fa8b 	bl	8002aa8 <HAL_Delay>
}
 8002592:	bf00      	nop
 8002594:	3708      	adds	r7, #8
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
	...

0800259c <OTM8009A_Init>:
  * @param  hdsi_eval : pointer on DSI configuration structure
  * @param  hdsivideo_handle : pointer on DSI video mode configuration structure
  * @retval Status
  */
uint8_t OTM8009A_Init(uint32_t ColorCoding, uint32_t orientation)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	6039      	str	r1, [r7, #0]
  /* Enable CMD2 to access vendor specific commands                               */
  /* Enter in command 2 mode and set EXTC to enable address shift function (0x00) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80025a6:	49c1      	ldr	r1, [pc, #772]	; (80028ac <OTM8009A_Init+0x310>)
 80025a8:	2000      	movs	r0, #0
 80025aa:	f7ff ffe0 	bl	800256e <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData1);
 80025ae:	49c0      	ldr	r1, [pc, #768]	; (80028b0 <OTM8009A_Init+0x314>)
 80025b0:	2003      	movs	r0, #3
 80025b2:	f7ff ffdc 	bl	800256e <DSI_IO_WriteCmd>

  /* Enter ORISE Command 2 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2); /* Shift address to 0x80 */
 80025b6:	49bf      	ldr	r1, [pc, #764]	; (80028b4 <OTM8009A_Init+0x318>)
 80025b8:	2000      	movs	r0, #0
 80025ba:	f7ff ffd8 	bl	800256e <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData2);
 80025be:	49be      	ldr	r1, [pc, #760]	; (80028b8 <OTM8009A_Init+0x31c>)
 80025c0:	2002      	movs	r0, #2
 80025c2:	f7ff ffd4 	bl	800256e <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////
  /* SD_PCH_CTRL - 0xC480h - 129th parameter - Default 0x00          */
  /* Set SD_PT                                                       */
  /* -> Source output level during porch and non-display area to GND */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 80025c6:	49bb      	ldr	r1, [pc, #748]	; (80028b4 <OTM8009A_Init+0x318>)
 80025c8:	2000      	movs	r0, #0
 80025ca:	f7ff ffd0 	bl	800256e <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData3);
 80025ce:	49bb      	ldr	r1, [pc, #748]	; (80028bc <OTM8009A_Init+0x320>)
 80025d0:	2000      	movs	r0, #0
 80025d2:	f7ff ffcc 	bl	800256e <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 80025d6:	200a      	movs	r0, #10
 80025d8:	f7ff ffd4 	bl	8002584 <OTM8009A_IO_Delay>
  /* Not documented */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData4);
 80025dc:	49b8      	ldr	r1, [pc, #736]	; (80028c0 <OTM8009A_Init+0x324>)
 80025de:	2000      	movs	r0, #0
 80025e0:	f7ff ffc5 	bl	800256e <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData5);
 80025e4:	49b7      	ldr	r1, [pc, #732]	; (80028c4 <OTM8009A_Init+0x328>)
 80025e6:	2000      	movs	r0, #0
 80025e8:	f7ff ffc1 	bl	800256e <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 80025ec:	200a      	movs	r0, #10
 80025ee:	f7ff ffc9 	bl	8002584 <OTM8009A_IO_Delay>
  /////////////////////////////////////////////////////////////////////

  /* PWR_CTRL4 - 0xC4B0h - 178th parameter - Default 0xA8 */
  /* Set gvdd_en_test                                     */
  /* -> enable GVDD test mode !!!                         */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData6);
 80025f2:	49b5      	ldr	r1, [pc, #724]	; (80028c8 <OTM8009A_Init+0x32c>)
 80025f4:	2000      	movs	r0, #0
 80025f6:	f7ff ffba 	bl	800256e <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData7);
 80025fa:	49b4      	ldr	r1, [pc, #720]	; (80028cc <OTM8009A_Init+0x330>)
 80025fc:	2000      	movs	r0, #0
 80025fe:	f7ff ffb6 	bl	800256e <DSI_IO_WriteCmd>
  /* PWR_CTRL2 - 0xC590h - 146th parameter - Default 0x79      */
  /* Set pump 4 vgh voltage                                    */
  /* -> from 15.0v down to 13.0v                               */
  /* Set pump 5 vgh voltage                                    */
  /* -> from -12.0v downto -9.0v                               */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData8);
 8002602:	49b3      	ldr	r1, [pc, #716]	; (80028d0 <OTM8009A_Init+0x334>)
 8002604:	2000      	movs	r0, #0
 8002606:	f7ff ffb2 	bl	800256e <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 800260a:	49b2      	ldr	r1, [pc, #712]	; (80028d4 <OTM8009A_Init+0x338>)
 800260c:	2000      	movs	r0, #0
 800260e:	f7ff ffae 	bl	800256e <DSI_IO_WriteCmd>

  /* P_DRV_M - 0xC0B4h - 181th parameter - Default 0x00 */
  /* -> Column inversion                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData10);
 8002612:	49b1      	ldr	r1, [pc, #708]	; (80028d8 <OTM8009A_Init+0x33c>)
 8002614:	2000      	movs	r0, #0
 8002616:	f7ff ffaa 	bl	800256e <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData11);
 800261a:	49b0      	ldr	r1, [pc, #704]	; (80028dc <OTM8009A_Init+0x340>)
 800261c:	2000      	movs	r0, #0
 800261e:	f7ff ffa6 	bl	800256e <DSI_IO_WriteCmd>

  /* VCOMDC - 0xD900h - 1st parameter - Default 0x39h */
  /* VCOM Voltage settings                            */
  /* -> from -1.0000v downto -1.2625v                 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8002622:	49a2      	ldr	r1, [pc, #648]	; (80028ac <OTM8009A_Init+0x310>)
 8002624:	2000      	movs	r0, #0
 8002626:	f7ff ffa2 	bl	800256e <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData12);
 800262a:	49ad      	ldr	r1, [pc, #692]	; (80028e0 <OTM8009A_Init+0x344>)
 800262c:	2000      	movs	r0, #0
 800262e:	f7ff ff9e 	bl	800256e <DSI_IO_WriteCmd>

  /* Oscillator adjustment for Idle/Normal mode (LPDT only) set to 65Hz (default is 60Hz) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8002632:	49ac      	ldr	r1, [pc, #688]	; (80028e4 <OTM8009A_Init+0x348>)
 8002634:	2000      	movs	r0, #0
 8002636:	f7ff ff9a 	bl	800256e <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData14);
 800263a:	49ab      	ldr	r1, [pc, #684]	; (80028e8 <OTM8009A_Init+0x34c>)
 800263c:	2000      	movs	r0, #0
 800263e:	f7ff ff96 	bl	800256e <DSI_IO_WriteCmd>

  /* Video mode internal */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 8002642:	49aa      	ldr	r1, [pc, #680]	; (80028ec <OTM8009A_Init+0x350>)
 8002644:	2000      	movs	r0, #0
 8002646:	f7ff ff92 	bl	800256e <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData16);
 800264a:	49a9      	ldr	r1, [pc, #676]	; (80028f0 <OTM8009A_Init+0x354>)
 800264c:	2000      	movs	r0, #0
 800264e:	f7ff ff8e 	bl	800256e <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 147h parameter - Default 0x00 */
  /* Set pump 4&5 x6                                     */
  /* -> ONLY VALID when PUMP4_EN_ASDM_HV = "0"           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData17);
 8002652:	49a8      	ldr	r1, [pc, #672]	; (80028f4 <OTM8009A_Init+0x358>)
 8002654:	2000      	movs	r0, #0
 8002656:	f7ff ff8a 	bl	800256e <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData18);
 800265a:	49a7      	ldr	r1, [pc, #668]	; (80028f8 <OTM8009A_Init+0x35c>)
 800265c:	2000      	movs	r0, #0
 800265e:	f7ff ff86 	bl	800256e <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 150th parameter - Default 0x33h */
  /* Change pump4 clock ratio                              */
  /* -> from 1 line to 1/2 line                            */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData19);
 8002662:	49a6      	ldr	r1, [pc, #664]	; (80028fc <OTM8009A_Init+0x360>)
 8002664:	2000      	movs	r0, #0
 8002666:	f7ff ff82 	bl	800256e <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 800266a:	499a      	ldr	r1, [pc, #616]	; (80028d4 <OTM8009A_Init+0x338>)
 800266c:	2000      	movs	r0, #0
 800266e:	f7ff ff7e 	bl	800256e <DSI_IO_WriteCmd>

  /* GVDD/NGVDD settings */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8002672:	498e      	ldr	r1, [pc, #568]	; (80028ac <OTM8009A_Init+0x310>)
 8002674:	2000      	movs	r0, #0
 8002676:	f7ff ff7a 	bl	800256e <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData5);
 800267a:	49a1      	ldr	r1, [pc, #644]	; (8002900 <OTM8009A_Init+0x364>)
 800267c:	2002      	movs	r0, #2
 800267e:	f7ff ff76 	bl	800256e <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 149th parameter - Default 0x33h */
  /* Rewrite the default value !                           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData20);
 8002682:	49a0      	ldr	r1, [pc, #640]	; (8002904 <OTM8009A_Init+0x368>)
 8002684:	2000      	movs	r0, #0
 8002686:	f7ff ff72 	bl	800256e <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData21);
 800268a:	499f      	ldr	r1, [pc, #636]	; (8002908 <OTM8009A_Init+0x36c>)
 800268c:	2000      	movs	r0, #0
 800268e:	f7ff ff6e 	bl	800256e <DSI_IO_WriteCmd>

  /* Panel display timing Setting 3 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData22);
 8002692:	499e      	ldr	r1, [pc, #632]	; (800290c <OTM8009A_Init+0x370>)
 8002694:	2000      	movs	r0, #0
 8002696:	f7ff ff6a 	bl	800256e <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData23);
 800269a:	499d      	ldr	r1, [pc, #628]	; (8002910 <OTM8009A_Init+0x374>)
 800269c:	2000      	movs	r0, #0
 800269e:	f7ff ff66 	bl	800256e <DSI_IO_WriteCmd>

  /* Power control 1 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData24);
 80026a2:	499c      	ldr	r1, [pc, #624]	; (8002914 <OTM8009A_Init+0x378>)
 80026a4:	2000      	movs	r0, #0
 80026a6:	f7ff ff62 	bl	800256e <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData25);
 80026aa:	499b      	ldr	r1, [pc, #620]	; (8002918 <OTM8009A_Init+0x37c>)
 80026ac:	2000      	movs	r0, #0
 80026ae:	f7ff ff5e 	bl	800256e <DSI_IO_WriteCmd>

  /* Source driver precharge */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 80026b2:	498c      	ldr	r1, [pc, #560]	; (80028e4 <OTM8009A_Init+0x348>)
 80026b4:	2000      	movs	r0, #0
 80026b6:	f7ff ff5a 	bl	800256e <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData26);
 80026ba:	4998      	ldr	r1, [pc, #608]	; (800291c <OTM8009A_Init+0x380>)
 80026bc:	2000      	movs	r0, #0
 80026be:	f7ff ff56 	bl	800256e <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 80026c2:	498a      	ldr	r1, [pc, #552]	; (80028ec <OTM8009A_Init+0x350>)
 80026c4:	2000      	movs	r0, #0
 80026c6:	f7ff ff52 	bl	800256e <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData27);
 80026ca:	4995      	ldr	r1, [pc, #596]	; (8002920 <OTM8009A_Init+0x384>)
 80026cc:	2000      	movs	r0, #0
 80026ce:	f7ff ff4e 	bl	800256e <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData28);
 80026d2:	4994      	ldr	r1, [pc, #592]	; (8002924 <OTM8009A_Init+0x388>)
 80026d4:	2000      	movs	r0, #0
 80026d6:	f7ff ff4a 	bl	800256e <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData6);
 80026da:	4993      	ldr	r1, [pc, #588]	; (8002928 <OTM8009A_Init+0x38c>)
 80026dc:	2002      	movs	r0, #2
 80026de:	f7ff ff46 	bl	800256e <DSI_IO_WriteCmd>

  /* GOAVST */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 80026e2:	4974      	ldr	r1, [pc, #464]	; (80028b4 <OTM8009A_Init+0x318>)
 80026e4:	2000      	movs	r0, #0
 80026e6:	f7ff ff42 	bl	800256e <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 6, (uint8_t *)lcdRegData7);
 80026ea:	4990      	ldr	r1, [pc, #576]	; (800292c <OTM8009A_Init+0x390>)
 80026ec:	2006      	movs	r0, #6
 80026ee:	f7ff ff3e 	bl	800256e <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 80026f2:	498f      	ldr	r1, [pc, #572]	; (8002930 <OTM8009A_Init+0x394>)
 80026f4:	2000      	movs	r0, #0
 80026f6:	f7ff ff3a 	bl	800256e <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData8);
 80026fa:	498e      	ldr	r1, [pc, #568]	; (8002934 <OTM8009A_Init+0x398>)
 80026fc:	200e      	movs	r0, #14
 80026fe:	f7ff ff36 	bl	800256e <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8002702:	498d      	ldr	r1, [pc, #564]	; (8002938 <OTM8009A_Init+0x39c>)
 8002704:	2000      	movs	r0, #0
 8002706:	f7ff ff32 	bl	800256e <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData9);
 800270a:	498c      	ldr	r1, [pc, #560]	; (800293c <OTM8009A_Init+0x3a0>)
 800270c:	200e      	movs	r0, #14
 800270e:	f7ff ff2e 	bl	800256e <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8002712:	498b      	ldr	r1, [pc, #556]	; (8002940 <OTM8009A_Init+0x3a4>)
 8002714:	2000      	movs	r0, #0
 8002716:	f7ff ff2a 	bl	800256e <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData10);
 800271a:	498a      	ldr	r1, [pc, #552]	; (8002944 <OTM8009A_Init+0x3a8>)
 800271c:	200a      	movs	r0, #10
 800271e:	f7ff ff26 	bl	800256e <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8002722:	4989      	ldr	r1, [pc, #548]	; (8002948 <OTM8009A_Init+0x3ac>)
 8002724:	2000      	movs	r0, #0
 8002726:	f7ff ff22 	bl	800256e <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData46);
 800272a:	4988      	ldr	r1, [pc, #544]	; (800294c <OTM8009A_Init+0x3b0>)
 800272c:	2000      	movs	r0, #0
 800272e:	f7ff ff1e 	bl	800256e <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8002732:	4960      	ldr	r1, [pc, #384]	; (80028b4 <OTM8009A_Init+0x318>)
 8002734:	2000      	movs	r0, #0
 8002736:	f7ff ff1a 	bl	800256e <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData11);
 800273a:	4985      	ldr	r1, [pc, #532]	; (8002950 <OTM8009A_Init+0x3b4>)
 800273c:	200a      	movs	r0, #10
 800273e:	f7ff ff16 	bl	800256e <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 8002742:	4984      	ldr	r1, [pc, #528]	; (8002954 <OTM8009A_Init+0x3b8>)
 8002744:	2000      	movs	r0, #0
 8002746:	f7ff ff12 	bl	800256e <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData12);
 800274a:	4983      	ldr	r1, [pc, #524]	; (8002958 <OTM8009A_Init+0x3bc>)
 800274c:	200f      	movs	r0, #15
 800274e:	f7ff ff0e 	bl	800256e <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8002752:	4977      	ldr	r1, [pc, #476]	; (8002930 <OTM8009A_Init+0x394>)
 8002754:	2000      	movs	r0, #0
 8002756:	f7ff ff0a 	bl	800256e <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData13);
 800275a:	4980      	ldr	r1, [pc, #512]	; (800295c <OTM8009A_Init+0x3c0>)
 800275c:	200f      	movs	r0, #15
 800275e:	f7ff ff06 	bl	800256e <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8002762:	4975      	ldr	r1, [pc, #468]	; (8002938 <OTM8009A_Init+0x39c>)
 8002764:	2000      	movs	r0, #0
 8002766:	f7ff ff02 	bl	800256e <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData14);
 800276a:	497d      	ldr	r1, [pc, #500]	; (8002960 <OTM8009A_Init+0x3c4>)
 800276c:	200a      	movs	r0, #10
 800276e:	f7ff fefe 	bl	800256e <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8002772:	4973      	ldr	r1, [pc, #460]	; (8002940 <OTM8009A_Init+0x3a4>)
 8002774:	2000      	movs	r0, #0
 8002776:	f7ff fefa 	bl	800256e <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData15);
 800277a:	497a      	ldr	r1, [pc, #488]	; (8002964 <OTM8009A_Init+0x3c8>)
 800277c:	200f      	movs	r0, #15
 800277e:	f7ff fef6 	bl	800256e <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8002782:	4971      	ldr	r1, [pc, #452]	; (8002948 <OTM8009A_Init+0x3ac>)
 8002784:	2000      	movs	r0, #0
 8002786:	f7ff fef2 	bl	800256e <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData16);
 800278a:	4977      	ldr	r1, [pc, #476]	; (8002968 <OTM8009A_Init+0x3cc>)
 800278c:	200f      	movs	r0, #15
 800278e:	f7ff feee 	bl	800256e <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData34);
 8002792:	4976      	ldr	r1, [pc, #472]	; (800296c <OTM8009A_Init+0x3d0>)
 8002794:	2000      	movs	r0, #0
 8002796:	f7ff feea 	bl	800256e <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData17);
 800279a:	4975      	ldr	r1, [pc, #468]	; (8002970 <OTM8009A_Init+0x3d4>)
 800279c:	200a      	movs	r0, #10
 800279e:	f7ff fee6 	bl	800256e <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData35);
 80027a2:	4974      	ldr	r1, [pc, #464]	; (8002974 <OTM8009A_Init+0x3d8>)
 80027a4:	2000      	movs	r0, #0
 80027a6:	f7ff fee2 	bl	800256e <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData18);
 80027aa:	4973      	ldr	r1, [pc, #460]	; (8002978 <OTM8009A_Init+0x3dc>)
 80027ac:	200a      	movs	r0, #10
 80027ae:	f7ff fede 	bl	800256e <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 80027b2:	4940      	ldr	r1, [pc, #256]	; (80028b4 <OTM8009A_Init+0x318>)
 80027b4:	2000      	movs	r0, #0
 80027b6:	f7ff feda 	bl	800256e <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData19);
 80027ba:	4970      	ldr	r1, [pc, #448]	; (800297c <OTM8009A_Init+0x3e0>)
 80027bc:	200a      	movs	r0, #10
 80027be:	f7ff fed6 	bl	800256e <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 80027c2:	4964      	ldr	r1, [pc, #400]	; (8002954 <OTM8009A_Init+0x3b8>)
 80027c4:	2000      	movs	r0, #0
 80027c6:	f7ff fed2 	bl	800256e <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData20);
 80027ca:	496d      	ldr	r1, [pc, #436]	; (8002980 <OTM8009A_Init+0x3e4>)
 80027cc:	200f      	movs	r0, #15
 80027ce:	f7ff fece 	bl	800256e <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 80027d2:	4957      	ldr	r1, [pc, #348]	; (8002930 <OTM8009A_Init+0x394>)
 80027d4:	2000      	movs	r0, #0
 80027d6:	f7ff feca 	bl	800256e <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData21);
 80027da:	496a      	ldr	r1, [pc, #424]	; (8002984 <OTM8009A_Init+0x3e8>)
 80027dc:	200f      	movs	r0, #15
 80027de:	f7ff fec6 	bl	800256e <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 80027e2:	4955      	ldr	r1, [pc, #340]	; (8002938 <OTM8009A_Init+0x39c>)
 80027e4:	2000      	movs	r0, #0
 80027e6:	f7ff fec2 	bl	800256e <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData22);
 80027ea:	4967      	ldr	r1, [pc, #412]	; (8002988 <OTM8009A_Init+0x3ec>)
 80027ec:	200a      	movs	r0, #10
 80027ee:	f7ff febe 	bl	800256e <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 80027f2:	4953      	ldr	r1, [pc, #332]	; (8002940 <OTM8009A_Init+0x3a4>)
 80027f4:	2000      	movs	r0, #0
 80027f6:	f7ff feba 	bl	800256e <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData23);
 80027fa:	4964      	ldr	r1, [pc, #400]	; (800298c <OTM8009A_Init+0x3f0>)
 80027fc:	200f      	movs	r0, #15
 80027fe:	f7ff feb6 	bl	800256e <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8002802:	4951      	ldr	r1, [pc, #324]	; (8002948 <OTM8009A_Init+0x3ac>)
 8002804:	2000      	movs	r0, #0
 8002806:	f7ff feb2 	bl	800256e <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData24);
 800280a:	4961      	ldr	r1, [pc, #388]	; (8002990 <OTM8009A_Init+0x3f4>)
 800280c:	200f      	movs	r0, #15
 800280e:	f7ff feae 	bl	800256e <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////////////
  /* PWR_CTRL1 - 0xc580h - 130th parameter - default 0x00 */
  /* Pump 1 min and max DM                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8002812:	4934      	ldr	r1, [pc, #208]	; (80028e4 <OTM8009A_Init+0x348>)
 8002814:	2000      	movs	r0, #0
 8002816:	f7ff feaa 	bl	800256e <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData47);
 800281a:	495e      	ldr	r1, [pc, #376]	; (8002994 <OTM8009A_Init+0x3f8>)
 800281c:	2000      	movs	r0, #0
 800281e:	f7ff fea6 	bl	800256e <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData48);
 8002822:	495d      	ldr	r1, [pc, #372]	; (8002998 <OTM8009A_Init+0x3fc>)
 8002824:	2000      	movs	r0, #0
 8002826:	f7ff fea2 	bl	800256e <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData49);
 800282a:	495c      	ldr	r1, [pc, #368]	; (800299c <OTM8009A_Init+0x400>)
 800282c:	2000      	movs	r0, #0
 800282e:	f7ff fe9e 	bl	800256e <DSI_IO_WriteCmd>
  /////////////////////////////////////////////////////////////////////////////

  /* CABC LEDPWM frequency adjusted to 19,5kHz */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData50);
 8002832:	495b      	ldr	r1, [pc, #364]	; (80029a0 <OTM8009A_Init+0x404>)
 8002834:	2000      	movs	r0, #0
 8002836:	f7ff fe9a 	bl	800256e <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData51);
 800283a:	495a      	ldr	r1, [pc, #360]	; (80029a4 <OTM8009A_Init+0x408>)
 800283c:	2000      	movs	r0, #0
 800283e:	f7ff fe96 	bl	800256e <DSI_IO_WriteCmd>
  
  /* Exit CMD2 mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8002842:	491a      	ldr	r1, [pc, #104]	; (80028ac <OTM8009A_Init+0x310>)
 8002844:	2000      	movs	r0, #0
 8002846:	f7ff fe92 	bl	800256e <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData25);
 800284a:	4957      	ldr	r1, [pc, #348]	; (80029a8 <OTM8009A_Init+0x40c>)
 800284c:	2003      	movs	r0, #3
 800284e:	f7ff fe8e 	bl	800256e <DSI_IO_WriteCmd>
  /*************************************************************************** */
  /* Standard DCS Initialization TO KEEP CAN BE DONE IN HSDT                   */
  /*************************************************************************** */

  /* NOP - goes back to DCS std command ? */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8002852:	4916      	ldr	r1, [pc, #88]	; (80028ac <OTM8009A_Init+0x310>)
 8002854:	2000      	movs	r0, #0
 8002856:	f7ff fe8a 	bl	800256e <DSI_IO_WriteCmd>
          
  /* Gamma correction 2.2+ table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 800285a:	4914      	ldr	r1, [pc, #80]	; (80028ac <OTM8009A_Init+0x310>)
 800285c:	2000      	movs	r0, #0
 800285e:	f7ff fe86 	bl	800256e <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData3);
 8002862:	4952      	ldr	r1, [pc, #328]	; (80029ac <OTM8009A_Init+0x410>)
 8002864:	2010      	movs	r0, #16
 8002866:	f7ff fe82 	bl	800256e <DSI_IO_WriteCmd>
  
  /* Gamma correction 2.2- table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 800286a:	4910      	ldr	r1, [pc, #64]	; (80028ac <OTM8009A_Init+0x310>)
 800286c:	2000      	movs	r0, #0
 800286e:	f7ff fe7e 	bl	800256e <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData4);
 8002872:	494f      	ldr	r1, [pc, #316]	; (80029b0 <OTM8009A_Init+0x414>)
 8002874:	2010      	movs	r0, #16
 8002876:	f7ff fe7a 	bl	800256e <DSI_IO_WriteCmd>
          
  /* Send Sleep Out command to display : no parameter */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData36);
 800287a:	494e      	ldr	r1, [pc, #312]	; (80029b4 <OTM8009A_Init+0x418>)
 800287c:	2000      	movs	r0, #0
 800287e:	f7ff fe76 	bl	800256e <DSI_IO_WriteCmd>
  
  /* Wait for sleep out exit */
  OTM8009A_IO_Delay(120);
 8002882:	2078      	movs	r0, #120	; 0x78
 8002884:	f7ff fe7e 	bl	8002584 <OTM8009A_IO_Delay>

  switch(ColorCoding)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d008      	beq.n	80028a0 <OTM8009A_Init+0x304>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2b02      	cmp	r3, #2
 8002892:	f040 8095 	bne.w	80029c0 <OTM8009A_Init+0x424>
  {
  case OTM8009A_FORMAT_RBG565 :
    /* Set Pixel color format to RGB565 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData37);
 8002896:	4948      	ldr	r1, [pc, #288]	; (80029b8 <OTM8009A_Init+0x41c>)
 8002898:	2000      	movs	r0, #0
 800289a:	f7ff fe68 	bl	800256e <DSI_IO_WriteCmd>
    break;
 800289e:	e090      	b.n	80029c2 <OTM8009A_Init+0x426>
  case OTM8009A_FORMAT_RGB888 :
    /* Set Pixel color format to RGB888 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
 80028a0:	4946      	ldr	r1, [pc, #280]	; (80029bc <OTM8009A_Init+0x420>)
 80028a2:	2000      	movs	r0, #0
 80028a4:	f7ff fe63 	bl	800256e <DSI_IO_WriteCmd>
    break;
 80028a8:	e08b      	b.n	80029c2 <OTM8009A_Init+0x426>
 80028aa:	bf00      	nop
 80028ac:	08029bf4 	.word	0x08029bf4
 80028b0:	08029aac 	.word	0x08029aac
 80028b4:	08029bf8 	.word	0x08029bf8
 80028b8:	08029ab0 	.word	0x08029ab0
 80028bc:	08029bfc 	.word	0x08029bfc
 80028c0:	08029c00 	.word	0x08029c00
 80028c4:	08029c04 	.word	0x08029c04
 80028c8:	08029c08 	.word	0x08029c08
 80028cc:	08029c0c 	.word	0x08029c0c
 80028d0:	08029c10 	.word	0x08029c10
 80028d4:	08029c14 	.word	0x08029c14
 80028d8:	08029c18 	.word	0x08029c18
 80028dc:	08029c1c 	.word	0x08029c1c
 80028e0:	08029c20 	.word	0x08029c20
 80028e4:	08029c24 	.word	0x08029c24
 80028e8:	08029c28 	.word	0x08029c28
 80028ec:	08029c2c 	.word	0x08029c2c
 80028f0:	08029c30 	.word	0x08029c30
 80028f4:	08029c34 	.word	0x08029c34
 80028f8:	08029c38 	.word	0x08029c38
 80028fc:	08029c3c 	.word	0x08029c3c
 8002900:	08029adc 	.word	0x08029adc
 8002904:	08029c40 	.word	0x08029c40
 8002908:	08029c44 	.word	0x08029c44
 800290c:	08029c48 	.word	0x08029c48
 8002910:	08029c4c 	.word	0x08029c4c
 8002914:	08029c50 	.word	0x08029c50
 8002918:	08029c54 	.word	0x08029c54
 800291c:	08029c58 	.word	0x08029c58
 8002920:	08029c5c 	.word	0x08029c5c
 8002924:	08029c60 	.word	0x08029c60
 8002928:	08029ae0 	.word	0x08029ae0
 800292c:	08029ae4 	.word	0x08029ae4
 8002930:	08029c64 	.word	0x08029c64
 8002934:	08029aec 	.word	0x08029aec
 8002938:	08029c68 	.word	0x08029c68
 800293c:	08029afc 	.word	0x08029afc
 8002940:	08029c6c 	.word	0x08029c6c
 8002944:	08029b0c 	.word	0x08029b0c
 8002948:	08029c70 	.word	0x08029c70
 800294c:	08029ca8 	.word	0x08029ca8
 8002950:	08029b18 	.word	0x08029b18
 8002954:	08029c74 	.word	0x08029c74
 8002958:	08029b24 	.word	0x08029b24
 800295c:	08029b34 	.word	0x08029b34
 8002960:	08029b44 	.word	0x08029b44
 8002964:	08029b50 	.word	0x08029b50
 8002968:	08029b60 	.word	0x08029b60
 800296c:	08029c78 	.word	0x08029c78
 8002970:	08029b70 	.word	0x08029b70
 8002974:	08029c7c 	.word	0x08029c7c
 8002978:	08029b7c 	.word	0x08029b7c
 800297c:	08029b88 	.word	0x08029b88
 8002980:	08029b94 	.word	0x08029b94
 8002984:	08029ba4 	.word	0x08029ba4
 8002988:	08029bb4 	.word	0x08029bb4
 800298c:	08029bc0 	.word	0x08029bc0
 8002990:	08029bd0 	.word	0x08029bd0
 8002994:	08029cac 	.word	0x08029cac
 8002998:	08029cb0 	.word	0x08029cb0
 800299c:	08029cb4 	.word	0x08029cb4
 80029a0:	08029cb8 	.word	0x08029cb8
 80029a4:	08029cbc 	.word	0x08029cbc
 80029a8:	08029be0 	.word	0x08029be0
 80029ac:	08029ab4 	.word	0x08029ab4
 80029b0:	08029ac8 	.word	0x08029ac8
 80029b4:	08029c80 	.word	0x08029c80
 80029b8:	08029c84 	.word	0x08029c84
 80029bc:	08029c88 	.word	0x08029c88
  default :
    break;
 80029c0:	bf00      	nop
  }

  /* Send command to configure display in landscape orientation mode. By default
      the orientation mode is portrait  */
  if(orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d10b      	bne.n	80029e0 <OTM8009A_Init+0x444>
  {
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData39);
 80029c8:	4916      	ldr	r1, [pc, #88]	; (8002a24 <OTM8009A_Init+0x488>)
 80029ca:	2000      	movs	r0, #0
 80029cc:	f7ff fdcf 	bl	800256e <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData27);
 80029d0:	4915      	ldr	r1, [pc, #84]	; (8002a28 <OTM8009A_Init+0x48c>)
 80029d2:	2004      	movs	r0, #4
 80029d4:	f7ff fdcb 	bl	800256e <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData28);
 80029d8:	4914      	ldr	r1, [pc, #80]	; (8002a2c <OTM8009A_Init+0x490>)
 80029da:	2004      	movs	r0, #4
 80029dc:	f7ff fdc7 	bl	800256e <DSI_IO_WriteCmd>
  }

  /** CABC : Content Adaptive Backlight Control section start >> */
  /* Note : defaut is 0 (lowest Brightness), 0xFF is highest Brightness, try 0x7F : intermediate value */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData40);
 80029e0:	4913      	ldr	r1, [pc, #76]	; (8002a30 <OTM8009A_Init+0x494>)
 80029e2:	2000      	movs	r0, #0
 80029e4:	f7ff fdc3 	bl	800256e <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x2C - Brightness Control Block, Display Dimming & BackLight on */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData41);
 80029e8:	4912      	ldr	r1, [pc, #72]	; (8002a34 <OTM8009A_Init+0x498>)
 80029ea:	2000      	movs	r0, #0
 80029ec:	f7ff fdbf 	bl	800256e <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x02 - image Content based Adaptive Brightness [Still Picture] */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData42);
 80029f0:	4911      	ldr	r1, [pc, #68]	; (8002a38 <OTM8009A_Init+0x49c>)
 80029f2:	2000      	movs	r0, #0
 80029f4:	f7ff fdbb 	bl	800256e <DSI_IO_WriteCmd>

  /* defaut is 0 (lowest Brightness), 0xFF is highest Brightness */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData43);
 80029f8:	4910      	ldr	r1, [pc, #64]	; (8002a3c <OTM8009A_Init+0x4a0>)
 80029fa:	2000      	movs	r0, #0
 80029fc:	f7ff fdb7 	bl	800256e <DSI_IO_WriteCmd>

  /** CABC : Content Adaptive Backlight Control section end << */

  /* Send Command Display On */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData44);
 8002a00:	490f      	ldr	r1, [pc, #60]	; (8002a40 <OTM8009A_Init+0x4a4>)
 8002a02:	2000      	movs	r0, #0
 8002a04:	f7ff fdb3 	bl	800256e <DSI_IO_WriteCmd>

  /* NOP command */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8002a08:	490e      	ldr	r1, [pc, #56]	; (8002a44 <OTM8009A_Init+0x4a8>)
 8002a0a:	2000      	movs	r0, #0
 8002a0c:	f7ff fdaf 	bl	800256e <DSI_IO_WriteCmd>

  /* Send Command GRAM memory write (no parameters) : this initiates frame write via other DSI commands sent by */
  /* DSI host from LTDC incoming pixels in video mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData45);
 8002a10:	490d      	ldr	r1, [pc, #52]	; (8002a48 <OTM8009A_Init+0x4ac>)
 8002a12:	2000      	movs	r0, #0
 8002a14:	f7ff fdab 	bl	800256e <DSI_IO_WriteCmd>

  return 0;
 8002a18:	2300      	movs	r3, #0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3708      	adds	r7, #8
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	08029c8c 	.word	0x08029c8c
 8002a28:	08029be4 	.word	0x08029be4
 8002a2c:	08029bec 	.word	0x08029bec
 8002a30:	08029c90 	.word	0x08029c90
 8002a34:	08029c94 	.word	0x08029c94
 8002a38:	08029c98 	.word	0x08029c98
 8002a3c:	08029c9c 	.word	0x08029c9c
 8002a40:	08029ca0 	.word	0x08029ca0
 8002a44:	08029bf4 	.word	0x08029bf4
 8002a48:	08029ca4 	.word	0x08029ca4

08002a4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a50:	2003      	movs	r0, #3
 8002a52:	f000 f8fa 	bl	8002c4a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a56:	2000      	movs	r0, #0
 8002a58:	f7ff fba8 	bl	80021ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a5c:	f7fe ffe6 	bl	8001a2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a60:	2300      	movs	r3, #0
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	bd80      	pop	{r7, pc}
	...

08002a68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a6c:	4b06      	ldr	r3, [pc, #24]	; (8002a88 <HAL_IncTick+0x20>)
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	461a      	mov	r2, r3
 8002a72:	4b06      	ldr	r3, [pc, #24]	; (8002a8c <HAL_IncTick+0x24>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4413      	add	r3, r2
 8002a78:	4a04      	ldr	r2, [pc, #16]	; (8002a8c <HAL_IncTick+0x24>)
 8002a7a:	6013      	str	r3, [r2, #0]
}
 8002a7c:	bf00      	nop
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	2000000c 	.word	0x2000000c
 8002a8c:	20009b1c 	.word	0x20009b1c

08002a90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a90:	b480      	push	{r7}
 8002a92:	af00      	add	r7, sp, #0
  return uwTick;
 8002a94:	4b03      	ldr	r3, [pc, #12]	; (8002aa4 <HAL_GetTick+0x14>)
 8002a96:	681b      	ldr	r3, [r3, #0]
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop
 8002aa4:	20009b1c 	.word	0x20009b1c

08002aa8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b084      	sub	sp, #16
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ab0:	f7ff ffee 	bl	8002a90 <HAL_GetTick>
 8002ab4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ac0:	d005      	beq.n	8002ace <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ac2:	4b0a      	ldr	r3, [pc, #40]	; (8002aec <HAL_Delay+0x44>)
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	4413      	add	r3, r2
 8002acc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002ace:	bf00      	nop
 8002ad0:	f7ff ffde 	bl	8002a90 <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	68fa      	ldr	r2, [r7, #12]
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d8f7      	bhi.n	8002ad0 <HAL_Delay+0x28>
  {
  }
}
 8002ae0:	bf00      	nop
 8002ae2:	bf00      	nop
 8002ae4:	3710      	adds	r7, #16
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	2000000c 	.word	0x2000000c

08002af0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b085      	sub	sp, #20
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	f003 0307 	and.w	r3, r3, #7
 8002afe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b00:	4b0b      	ldr	r3, [pc, #44]	; (8002b30 <__NVIC_SetPriorityGrouping+0x40>)
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b06:	68ba      	ldr	r2, [r7, #8]
 8002b08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002b18:	4b06      	ldr	r3, [pc, #24]	; (8002b34 <__NVIC_SetPriorityGrouping+0x44>)
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b1e:	4a04      	ldr	r2, [pc, #16]	; (8002b30 <__NVIC_SetPriorityGrouping+0x40>)
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	60d3      	str	r3, [r2, #12]
}
 8002b24:	bf00      	nop
 8002b26:	3714      	adds	r7, #20
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr
 8002b30:	e000ed00 	.word	0xe000ed00
 8002b34:	05fa0000 	.word	0x05fa0000

08002b38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b3c:	4b04      	ldr	r3, [pc, #16]	; (8002b50 <__NVIC_GetPriorityGrouping+0x18>)
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	0a1b      	lsrs	r3, r3, #8
 8002b42:	f003 0307 	and.w	r3, r3, #7
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr
 8002b50:	e000ed00 	.word	0xe000ed00

08002b54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	db0b      	blt.n	8002b7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b66:	79fb      	ldrb	r3, [r7, #7]
 8002b68:	f003 021f 	and.w	r2, r3, #31
 8002b6c:	4907      	ldr	r1, [pc, #28]	; (8002b8c <__NVIC_EnableIRQ+0x38>)
 8002b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b72:	095b      	lsrs	r3, r3, #5
 8002b74:	2001      	movs	r0, #1
 8002b76:	fa00 f202 	lsl.w	r2, r0, r2
 8002b7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b7e:	bf00      	nop
 8002b80:	370c      	adds	r7, #12
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr
 8002b8a:	bf00      	nop
 8002b8c:	e000e100 	.word	0xe000e100

08002b90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	4603      	mov	r3, r0
 8002b98:	6039      	str	r1, [r7, #0]
 8002b9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	db0a      	blt.n	8002bba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	b2da      	uxtb	r2, r3
 8002ba8:	490c      	ldr	r1, [pc, #48]	; (8002bdc <__NVIC_SetPriority+0x4c>)
 8002baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bae:	0112      	lsls	r2, r2, #4
 8002bb0:	b2d2      	uxtb	r2, r2
 8002bb2:	440b      	add	r3, r1
 8002bb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bb8:	e00a      	b.n	8002bd0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	b2da      	uxtb	r2, r3
 8002bbe:	4908      	ldr	r1, [pc, #32]	; (8002be0 <__NVIC_SetPriority+0x50>)
 8002bc0:	79fb      	ldrb	r3, [r7, #7]
 8002bc2:	f003 030f 	and.w	r3, r3, #15
 8002bc6:	3b04      	subs	r3, #4
 8002bc8:	0112      	lsls	r2, r2, #4
 8002bca:	b2d2      	uxtb	r2, r2
 8002bcc:	440b      	add	r3, r1
 8002bce:	761a      	strb	r2, [r3, #24]
}
 8002bd0:	bf00      	nop
 8002bd2:	370c      	adds	r7, #12
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr
 8002bdc:	e000e100 	.word	0xe000e100
 8002be0:	e000ed00 	.word	0xe000ed00

08002be4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b089      	sub	sp, #36	; 0x24
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	60b9      	str	r1, [r7, #8]
 8002bee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f003 0307 	and.w	r3, r3, #7
 8002bf6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	f1c3 0307 	rsb	r3, r3, #7
 8002bfe:	2b04      	cmp	r3, #4
 8002c00:	bf28      	it	cs
 8002c02:	2304      	movcs	r3, #4
 8002c04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	3304      	adds	r3, #4
 8002c0a:	2b06      	cmp	r3, #6
 8002c0c:	d902      	bls.n	8002c14 <NVIC_EncodePriority+0x30>
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	3b03      	subs	r3, #3
 8002c12:	e000      	b.n	8002c16 <NVIC_EncodePriority+0x32>
 8002c14:	2300      	movs	r3, #0
 8002c16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c18:	f04f 32ff 	mov.w	r2, #4294967295
 8002c1c:	69bb      	ldr	r3, [r7, #24]
 8002c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c22:	43da      	mvns	r2, r3
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	401a      	ands	r2, r3
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c2c:	f04f 31ff 	mov.w	r1, #4294967295
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	fa01 f303 	lsl.w	r3, r1, r3
 8002c36:	43d9      	mvns	r1, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c3c:	4313      	orrs	r3, r2
         );
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3724      	adds	r7, #36	; 0x24
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr

08002c4a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c4a:	b580      	push	{r7, lr}
 8002c4c:	b082      	sub	sp, #8
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f7ff ff4c 	bl	8002af0 <__NVIC_SetPriorityGrouping>
}
 8002c58:	bf00      	nop
 8002c5a:	3708      	adds	r7, #8
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b086      	sub	sp, #24
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	4603      	mov	r3, r0
 8002c68:	60b9      	str	r1, [r7, #8]
 8002c6a:	607a      	str	r2, [r7, #4]
 8002c6c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c72:	f7ff ff61 	bl	8002b38 <__NVIC_GetPriorityGrouping>
 8002c76:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c78:	687a      	ldr	r2, [r7, #4]
 8002c7a:	68b9      	ldr	r1, [r7, #8]
 8002c7c:	6978      	ldr	r0, [r7, #20]
 8002c7e:	f7ff ffb1 	bl	8002be4 <NVIC_EncodePriority>
 8002c82:	4602      	mov	r2, r0
 8002c84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c88:	4611      	mov	r1, r2
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f7ff ff80 	bl	8002b90 <__NVIC_SetPriority>
}
 8002c90:	bf00      	nop
 8002c92:	3718      	adds	r7, #24
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}

08002c98 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b082      	sub	sp, #8
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f7ff ff54 	bl	8002b54 <__NVIC_EnableIRQ>
}
 8002cac:	bf00      	nop
 8002cae:	3708      	adds	r7, #8
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8002cb8:	f3bf 8f5f 	dmb	sy
}
 8002cbc:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002cbe:	4b07      	ldr	r3, [pc, #28]	; (8002cdc <HAL_MPU_Disable+0x28>)
 8002cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc2:	4a06      	ldr	r2, [pc, #24]	; (8002cdc <HAL_MPU_Disable+0x28>)
 8002cc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cc8:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002cca:	4b05      	ldr	r3, [pc, #20]	; (8002ce0 <HAL_MPU_Disable+0x2c>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	605a      	str	r2, [r3, #4]
}
 8002cd0:	bf00      	nop
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr
 8002cda:	bf00      	nop
 8002cdc:	e000ed00 	.word	0xe000ed00
 8002ce0:	e000ed90 	.word	0xe000ed90

08002ce4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002cec:	4a0b      	ldr	r2, [pc, #44]	; (8002d1c <HAL_MPU_Enable+0x38>)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	f043 0301 	orr.w	r3, r3, #1
 8002cf4:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002cf6:	4b0a      	ldr	r3, [pc, #40]	; (8002d20 <HAL_MPU_Enable+0x3c>)
 8002cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfa:	4a09      	ldr	r2, [pc, #36]	; (8002d20 <HAL_MPU_Enable+0x3c>)
 8002cfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d00:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002d02:	f3bf 8f4f 	dsb	sy
}
 8002d06:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002d08:	f3bf 8f6f 	isb	sy
}
 8002d0c:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002d0e:	bf00      	nop
 8002d10:	370c      	adds	r7, #12
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr
 8002d1a:	bf00      	nop
 8002d1c:	e000ed90 	.word	0xe000ed90
 8002d20:	e000ed00 	.word	0xe000ed00

08002d24 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	785a      	ldrb	r2, [r3, #1]
 8002d30:	4b1d      	ldr	r3, [pc, #116]	; (8002da8 <HAL_MPU_ConfigRegion+0x84>)
 8002d32:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d029      	beq.n	8002d90 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8002d3c:	4a1a      	ldr	r2, [pc, #104]	; (8002da8 <HAL_MPU_ConfigRegion+0x84>)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	7b1b      	ldrb	r3, [r3, #12]
 8002d48:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	7adb      	ldrb	r3, [r3, #11]
 8002d4e:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002d50:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	7a9b      	ldrb	r3, [r3, #10]
 8002d56:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002d58:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	7b5b      	ldrb	r3, [r3, #13]
 8002d5e:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002d60:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	7b9b      	ldrb	r3, [r3, #14]
 8002d66:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002d68:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	7bdb      	ldrb	r3, [r3, #15]
 8002d6e:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002d70:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	7a5b      	ldrb	r3, [r3, #9]
 8002d76:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002d78:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	7a1b      	ldrb	r3, [r3, #8]
 8002d7e:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002d80:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	7812      	ldrb	r2, [r2, #0]
 8002d86:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002d88:	4a07      	ldr	r2, [pc, #28]	; (8002da8 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002d8a:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002d8c:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8002d8e:	e005      	b.n	8002d9c <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8002d90:	4b05      	ldr	r3, [pc, #20]	; (8002da8 <HAL_MPU_ConfigRegion+0x84>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8002d96:	4b04      	ldr	r3, [pc, #16]	; (8002da8 <HAL_MPU_ConfigRegion+0x84>)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	611a      	str	r2, [r3, #16]
}
 8002d9c:	bf00      	nop
 8002d9e:	370c      	adds	r7, #12
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr
 8002da8:	e000ed90 	.word	0xe000ed90

08002dac <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b082      	sub	sp, #8
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d101      	bne.n	8002dbe <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e054      	b.n	8002e68 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	7f5b      	ldrb	r3, [r3, #29]
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d105      	bne.n	8002dd4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f7fe fe54 	bl	8001a7c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2202      	movs	r2, #2
 8002dd8:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	791b      	ldrb	r3, [r3, #4]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d10c      	bne.n	8002dfc <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a22      	ldr	r2, [pc, #136]	; (8002e70 <HAL_CRC_Init+0xc4>)
 8002de8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	689a      	ldr	r2, [r3, #8]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f022 0218 	bic.w	r2, r2, #24
 8002df8:	609a      	str	r2, [r3, #8]
 8002dfa:	e00c      	b.n	8002e16 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6899      	ldr	r1, [r3, #8]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	461a      	mov	r2, r3
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f000 f834 	bl	8002e74 <HAL_CRCEx_Polynomial_Set>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d001      	beq.n	8002e16 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e028      	b.n	8002e68 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	795b      	ldrb	r3, [r3, #5]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d105      	bne.n	8002e2a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f04f 32ff 	mov.w	r2, #4294967295
 8002e26:	611a      	str	r2, [r3, #16]
 8002e28:	e004      	b.n	8002e34 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	6912      	ldr	r2, [r2, #16]
 8002e32:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	695a      	ldr	r2, [r3, #20]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	430a      	orrs	r2, r1
 8002e48:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	699a      	ldr	r2, [r3, #24]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	430a      	orrs	r2, r1
 8002e5e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2201      	movs	r2, #1
 8002e64:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8002e66:	2300      	movs	r3, #0
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3708      	adds	r7, #8
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	04c11db7 	.word	0x04c11db7

08002e74 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b087      	sub	sp, #28
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	60f8      	str	r0, [r7, #12]
 8002e7c:	60b9      	str	r1, [r7, #8]
 8002e7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e80:	2300      	movs	r3, #0
 8002e82:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002e84:	231f      	movs	r3, #31
 8002e86:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002e88:	bf00      	nop
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	1e5a      	subs	r2, r3, #1
 8002e8e:	613a      	str	r2, [r7, #16]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d009      	beq.n	8002ea8 <HAL_CRCEx_Polynomial_Set+0x34>
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	f003 031f 	and.w	r3, r3, #31
 8002e9a:	68ba      	ldr	r2, [r7, #8]
 8002e9c:	fa22 f303 	lsr.w	r3, r2, r3
 8002ea0:	f003 0301 	and.w	r3, r3, #1
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d0f0      	beq.n	8002e8a <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2b18      	cmp	r3, #24
 8002eac:	d846      	bhi.n	8002f3c <HAL_CRCEx_Polynomial_Set+0xc8>
 8002eae:	a201      	add	r2, pc, #4	; (adr r2, 8002eb4 <HAL_CRCEx_Polynomial_Set+0x40>)
 8002eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eb4:	08002f43 	.word	0x08002f43
 8002eb8:	08002f3d 	.word	0x08002f3d
 8002ebc:	08002f3d 	.word	0x08002f3d
 8002ec0:	08002f3d 	.word	0x08002f3d
 8002ec4:	08002f3d 	.word	0x08002f3d
 8002ec8:	08002f3d 	.word	0x08002f3d
 8002ecc:	08002f3d 	.word	0x08002f3d
 8002ed0:	08002f3d 	.word	0x08002f3d
 8002ed4:	08002f31 	.word	0x08002f31
 8002ed8:	08002f3d 	.word	0x08002f3d
 8002edc:	08002f3d 	.word	0x08002f3d
 8002ee0:	08002f3d 	.word	0x08002f3d
 8002ee4:	08002f3d 	.word	0x08002f3d
 8002ee8:	08002f3d 	.word	0x08002f3d
 8002eec:	08002f3d 	.word	0x08002f3d
 8002ef0:	08002f3d 	.word	0x08002f3d
 8002ef4:	08002f25 	.word	0x08002f25
 8002ef8:	08002f3d 	.word	0x08002f3d
 8002efc:	08002f3d 	.word	0x08002f3d
 8002f00:	08002f3d 	.word	0x08002f3d
 8002f04:	08002f3d 	.word	0x08002f3d
 8002f08:	08002f3d 	.word	0x08002f3d
 8002f0c:	08002f3d 	.word	0x08002f3d
 8002f10:	08002f3d 	.word	0x08002f3d
 8002f14:	08002f19 	.word	0x08002f19
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	2b06      	cmp	r3, #6
 8002f1c:	d913      	bls.n	8002f46 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002f22:	e010      	b.n	8002f46 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	2b07      	cmp	r3, #7
 8002f28:	d90f      	bls.n	8002f4a <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002f2e:	e00c      	b.n	8002f4a <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	2b0f      	cmp	r3, #15
 8002f34:	d90b      	bls.n	8002f4e <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002f3a:	e008      	b.n	8002f4e <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	75fb      	strb	r3, [r7, #23]
      break;
 8002f40:	e006      	b.n	8002f50 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002f42:	bf00      	nop
 8002f44:	e004      	b.n	8002f50 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002f46:	bf00      	nop
 8002f48:	e002      	b.n	8002f50 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002f4a:	bf00      	nop
 8002f4c:	e000      	b.n	8002f50 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002f4e:	bf00      	nop
  }
  if (status == HAL_OK)
 8002f50:	7dfb      	ldrb	r3, [r7, #23]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d10d      	bne.n	8002f72 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	68ba      	ldr	r2, [r7, #8]
 8002f5c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	f023 0118 	bic.w	r1, r3, #24
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	687a      	ldr	r2, [r7, #4]
 8002f6e:	430a      	orrs	r2, r1
 8002f70:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8002f72:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	371c      	adds	r7, #28
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr

08002f80 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b086      	sub	sp, #24
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002f8c:	f7ff fd80 	bl	8002a90 <HAL_GetTick>
 8002f90:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d101      	bne.n	8002f9c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e099      	b.n	80030d0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2202      	movs	r2, #2
 8002fa0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f022 0201 	bic.w	r2, r2, #1
 8002fba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fbc:	e00f      	b.n	8002fde <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002fbe:	f7ff fd67 	bl	8002a90 <HAL_GetTick>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	2b05      	cmp	r3, #5
 8002fca:	d908      	bls.n	8002fde <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2220      	movs	r2, #32
 8002fd0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2203      	movs	r2, #3
 8002fd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e078      	b.n	80030d0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0301 	and.w	r3, r3, #1
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d1e8      	bne.n	8002fbe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002ff4:	697a      	ldr	r2, [r7, #20]
 8002ff6:	4b38      	ldr	r3, [pc, #224]	; (80030d8 <HAL_DMA_Init+0x158>)
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	685a      	ldr	r2, [r3, #4]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800300a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	691b      	ldr	r3, [r3, #16]
 8003010:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003016:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	699b      	ldr	r3, [r3, #24]
 800301c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003022:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6a1b      	ldr	r3, [r3, #32]
 8003028:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800302a:	697a      	ldr	r2, [r7, #20]
 800302c:	4313      	orrs	r3, r2
 800302e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003034:	2b04      	cmp	r3, #4
 8003036:	d107      	bne.n	8003048 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003040:	4313      	orrs	r3, r2
 8003042:	697a      	ldr	r2, [r7, #20]
 8003044:	4313      	orrs	r3, r2
 8003046:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	697a      	ldr	r2, [r7, #20]
 800304e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	695b      	ldr	r3, [r3, #20]
 8003056:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	f023 0307 	bic.w	r3, r3, #7
 800305e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003064:	697a      	ldr	r2, [r7, #20]
 8003066:	4313      	orrs	r3, r2
 8003068:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306e:	2b04      	cmp	r3, #4
 8003070:	d117      	bne.n	80030a2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003076:	697a      	ldr	r2, [r7, #20]
 8003078:	4313      	orrs	r3, r2
 800307a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003080:	2b00      	cmp	r3, #0
 8003082:	d00e      	beq.n	80030a2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f000 faa5 	bl	80035d4 <DMA_CheckFifoParam>
 800308a:	4603      	mov	r3, r0
 800308c:	2b00      	cmp	r3, #0
 800308e:	d008      	beq.n	80030a2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2240      	movs	r2, #64	; 0x40
 8003094:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2201      	movs	r2, #1
 800309a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800309e:	2301      	movs	r3, #1
 80030a0:	e016      	b.n	80030d0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	697a      	ldr	r2, [r7, #20]
 80030a8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f000 fa5c 	bl	8003568 <DMA_CalcBaseAndBitshift>
 80030b0:	4603      	mov	r3, r0
 80030b2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030b8:	223f      	movs	r2, #63	; 0x3f
 80030ba:	409a      	lsls	r2, r3
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2200      	movs	r2, #0
 80030c4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2201      	movs	r2, #1
 80030ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80030ce:	2300      	movs	r3, #0
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3718      	adds	r7, #24
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	e010803f 	.word	0xe010803f

080030dc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b086      	sub	sp, #24
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	60f8      	str	r0, [r7, #12]
 80030e4:	60b9      	str	r1, [r7, #8]
 80030e6:	607a      	str	r2, [r7, #4]
 80030e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030ea:	2300      	movs	r3, #0
 80030ec:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030f2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d101      	bne.n	8003102 <HAL_DMA_Start_IT+0x26>
 80030fe:	2302      	movs	r3, #2
 8003100:	e048      	b.n	8003194 <HAL_DMA_Start_IT+0xb8>
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2201      	movs	r2, #1
 8003106:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003110:	b2db      	uxtb	r3, r3
 8003112:	2b01      	cmp	r3, #1
 8003114:	d137      	bne.n	8003186 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2202      	movs	r2, #2
 800311a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2200      	movs	r2, #0
 8003122:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	68b9      	ldr	r1, [r7, #8]
 800312a:	68f8      	ldr	r0, [r7, #12]
 800312c:	f000 f9ee 	bl	800350c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003134:	223f      	movs	r2, #63	; 0x3f
 8003136:	409a      	lsls	r2, r3
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f042 0216 	orr.w	r2, r2, #22
 800314a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	695a      	ldr	r2, [r3, #20]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800315a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003160:	2b00      	cmp	r3, #0
 8003162:	d007      	beq.n	8003174 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f042 0208 	orr.w	r2, r2, #8
 8003172:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f042 0201 	orr.w	r2, r2, #1
 8003182:	601a      	str	r2, [r3, #0]
 8003184:	e005      	b.n	8003192 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2200      	movs	r2, #0
 800318a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800318e:	2302      	movs	r3, #2
 8003190:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003192:	7dfb      	ldrb	r3, [r7, #23]
}
 8003194:	4618      	mov	r0, r3
 8003196:	3718      	adds	r7, #24
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}

0800319c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	2b02      	cmp	r3, #2
 80031ae:	d004      	beq.n	80031ba <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2280      	movs	r2, #128	; 0x80
 80031b4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e00c      	b.n	80031d4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2205      	movs	r2, #5
 80031be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f022 0201 	bic.w	r2, r2, #1
 80031d0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80031d2:	2300      	movs	r3, #0
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	370c      	adds	r7, #12
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr

080031e0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b086      	sub	sp, #24
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80031e8:	2300      	movs	r3, #0
 80031ea:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80031ec:	4b8e      	ldr	r3, [pc, #568]	; (8003428 <HAL_DMA_IRQHandler+0x248>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a8e      	ldr	r2, [pc, #568]	; (800342c <HAL_DMA_IRQHandler+0x24c>)
 80031f2:	fba2 2303 	umull	r2, r3, r2, r3
 80031f6:	0a9b      	lsrs	r3, r3, #10
 80031f8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031fe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800320a:	2208      	movs	r2, #8
 800320c:	409a      	lsls	r2, r3
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	4013      	ands	r3, r2
 8003212:	2b00      	cmp	r3, #0
 8003214:	d01a      	beq.n	800324c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0304 	and.w	r3, r3, #4
 8003220:	2b00      	cmp	r3, #0
 8003222:	d013      	beq.n	800324c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f022 0204 	bic.w	r2, r2, #4
 8003232:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003238:	2208      	movs	r2, #8
 800323a:	409a      	lsls	r2, r3
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003244:	f043 0201 	orr.w	r2, r3, #1
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003250:	2201      	movs	r2, #1
 8003252:	409a      	lsls	r2, r3
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	4013      	ands	r3, r2
 8003258:	2b00      	cmp	r3, #0
 800325a:	d012      	beq.n	8003282 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	695b      	ldr	r3, [r3, #20]
 8003262:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003266:	2b00      	cmp	r3, #0
 8003268:	d00b      	beq.n	8003282 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800326e:	2201      	movs	r2, #1
 8003270:	409a      	lsls	r2, r3
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800327a:	f043 0202 	orr.w	r2, r3, #2
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003286:	2204      	movs	r2, #4
 8003288:	409a      	lsls	r2, r3
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	4013      	ands	r3, r2
 800328e:	2b00      	cmp	r3, #0
 8003290:	d012      	beq.n	80032b8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 0302 	and.w	r3, r3, #2
 800329c:	2b00      	cmp	r3, #0
 800329e:	d00b      	beq.n	80032b8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032a4:	2204      	movs	r2, #4
 80032a6:	409a      	lsls	r2, r3
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032b0:	f043 0204 	orr.w	r2, r3, #4
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032bc:	2210      	movs	r2, #16
 80032be:	409a      	lsls	r2, r3
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	4013      	ands	r3, r2
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d043      	beq.n	8003350 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0308 	and.w	r3, r3, #8
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d03c      	beq.n	8003350 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032da:	2210      	movs	r2, #16
 80032dc:	409a      	lsls	r2, r3
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d018      	beq.n	8003322 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d108      	bne.n	8003310 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003302:	2b00      	cmp	r3, #0
 8003304:	d024      	beq.n	8003350 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	4798      	blx	r3
 800330e:	e01f      	b.n	8003350 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003314:	2b00      	cmp	r3, #0
 8003316:	d01b      	beq.n	8003350 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	4798      	blx	r3
 8003320:	e016      	b.n	8003350 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800332c:	2b00      	cmp	r3, #0
 800332e:	d107      	bne.n	8003340 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f022 0208 	bic.w	r2, r2, #8
 800333e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003344:	2b00      	cmp	r3, #0
 8003346:	d003      	beq.n	8003350 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003354:	2220      	movs	r2, #32
 8003356:	409a      	lsls	r2, r3
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	4013      	ands	r3, r2
 800335c:	2b00      	cmp	r3, #0
 800335e:	f000 808f 	beq.w	8003480 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 0310 	and.w	r3, r3, #16
 800336c:	2b00      	cmp	r3, #0
 800336e:	f000 8087 	beq.w	8003480 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003376:	2220      	movs	r2, #32
 8003378:	409a      	lsls	r2, r3
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003384:	b2db      	uxtb	r3, r3
 8003386:	2b05      	cmp	r3, #5
 8003388:	d136      	bne.n	80033f8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f022 0216 	bic.w	r2, r2, #22
 8003398:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	695a      	ldr	r2, [r3, #20]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80033a8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d103      	bne.n	80033ba <HAL_DMA_IRQHandler+0x1da>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d007      	beq.n	80033ca <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f022 0208 	bic.w	r2, r2, #8
 80033c8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033ce:	223f      	movs	r2, #63	; 0x3f
 80033d0:	409a      	lsls	r2, r3
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2201      	movs	r2, #1
 80033da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d07e      	beq.n	80034ec <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	4798      	blx	r3
        }
        return;
 80033f6:	e079      	b.n	80034ec <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d01d      	beq.n	8003442 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003410:	2b00      	cmp	r3, #0
 8003412:	d10d      	bne.n	8003430 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003418:	2b00      	cmp	r3, #0
 800341a:	d031      	beq.n	8003480 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	4798      	blx	r3
 8003424:	e02c      	b.n	8003480 <HAL_DMA_IRQHandler+0x2a0>
 8003426:	bf00      	nop
 8003428:	20000004 	.word	0x20000004
 800342c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003434:	2b00      	cmp	r3, #0
 8003436:	d023      	beq.n	8003480 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	4798      	blx	r3
 8003440:	e01e      	b.n	8003480 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800344c:	2b00      	cmp	r3, #0
 800344e:	d10f      	bne.n	8003470 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f022 0210 	bic.w	r2, r2, #16
 800345e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2201      	movs	r2, #1
 8003464:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2200      	movs	r2, #0
 800346c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003474:	2b00      	cmp	r3, #0
 8003476:	d003      	beq.n	8003480 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003484:	2b00      	cmp	r3, #0
 8003486:	d032      	beq.n	80034ee <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800348c:	f003 0301 	and.w	r3, r3, #1
 8003490:	2b00      	cmp	r3, #0
 8003492:	d022      	beq.n	80034da <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2205      	movs	r2, #5
 8003498:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f022 0201 	bic.w	r2, r2, #1
 80034aa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	3301      	adds	r3, #1
 80034b0:	60bb      	str	r3, [r7, #8]
 80034b2:	697a      	ldr	r2, [r7, #20]
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d307      	bcc.n	80034c8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 0301 	and.w	r3, r3, #1
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d1f2      	bne.n	80034ac <HAL_DMA_IRQHandler+0x2cc>
 80034c6:	e000      	b.n	80034ca <HAL_DMA_IRQHandler+0x2ea>
          break;
 80034c8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2201      	movs	r2, #1
 80034ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2200      	movs	r2, #0
 80034d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d005      	beq.n	80034ee <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	4798      	blx	r3
 80034ea:	e000      	b.n	80034ee <HAL_DMA_IRQHandler+0x30e>
        return;
 80034ec:	bf00      	nop
    }
  }
}
 80034ee:	3718      	adds	r7, #24
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}

080034f4 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b083      	sub	sp, #12
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003500:	4618      	mov	r0, r3
 8003502:	370c      	adds	r7, #12
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr

0800350c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800350c:	b480      	push	{r7}
 800350e:	b085      	sub	sp, #20
 8003510:	af00      	add	r7, sp, #0
 8003512:	60f8      	str	r0, [r7, #12]
 8003514:	60b9      	str	r1, [r7, #8]
 8003516:	607a      	str	r2, [r7, #4]
 8003518:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003528:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	683a      	ldr	r2, [r7, #0]
 8003530:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	2b40      	cmp	r3, #64	; 0x40
 8003538:	d108      	bne.n	800354c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	68ba      	ldr	r2, [r7, #8]
 8003548:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800354a:	e007      	b.n	800355c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	68ba      	ldr	r2, [r7, #8]
 8003552:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	60da      	str	r2, [r3, #12]
}
 800355c:	bf00      	nop
 800355e:	3714      	adds	r7, #20
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr

08003568 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003568:	b480      	push	{r7}
 800356a:	b085      	sub	sp, #20
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	b2db      	uxtb	r3, r3
 8003576:	3b10      	subs	r3, #16
 8003578:	4a13      	ldr	r2, [pc, #76]	; (80035c8 <DMA_CalcBaseAndBitshift+0x60>)
 800357a:	fba2 2303 	umull	r2, r3, r2, r3
 800357e:	091b      	lsrs	r3, r3, #4
 8003580:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003582:	4a12      	ldr	r2, [pc, #72]	; (80035cc <DMA_CalcBaseAndBitshift+0x64>)
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	4413      	add	r3, r2
 8003588:	781b      	ldrb	r3, [r3, #0]
 800358a:	461a      	mov	r2, r3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2b03      	cmp	r3, #3
 8003594:	d908      	bls.n	80035a8 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	461a      	mov	r2, r3
 800359c:	4b0c      	ldr	r3, [pc, #48]	; (80035d0 <DMA_CalcBaseAndBitshift+0x68>)
 800359e:	4013      	ands	r3, r2
 80035a0:	1d1a      	adds	r2, r3, #4
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	659a      	str	r2, [r3, #88]	; 0x58
 80035a6:	e006      	b.n	80035b6 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	461a      	mov	r2, r3
 80035ae:	4b08      	ldr	r3, [pc, #32]	; (80035d0 <DMA_CalcBaseAndBitshift+0x68>)
 80035b0:	4013      	ands	r3, r2
 80035b2:	687a      	ldr	r2, [r7, #4]
 80035b4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3714      	adds	r7, #20
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr
 80035c6:	bf00      	nop
 80035c8:	aaaaaaab 	.word	0xaaaaaaab
 80035cc:	08029cc0 	.word	0x08029cc0
 80035d0:	fffffc00 	.word	0xfffffc00

080035d4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b085      	sub	sp, #20
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035dc:	2300      	movs	r3, #0
 80035de:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035e4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	699b      	ldr	r3, [r3, #24]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d11f      	bne.n	800362e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	2b03      	cmp	r3, #3
 80035f2:	d856      	bhi.n	80036a2 <DMA_CheckFifoParam+0xce>
 80035f4:	a201      	add	r2, pc, #4	; (adr r2, 80035fc <DMA_CheckFifoParam+0x28>)
 80035f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035fa:	bf00      	nop
 80035fc:	0800360d 	.word	0x0800360d
 8003600:	0800361f 	.word	0x0800361f
 8003604:	0800360d 	.word	0x0800360d
 8003608:	080036a3 	.word	0x080036a3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003610:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003614:	2b00      	cmp	r3, #0
 8003616:	d046      	beq.n	80036a6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800361c:	e043      	b.n	80036a6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003622:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003626:	d140      	bne.n	80036aa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800362c:	e03d      	b.n	80036aa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	699b      	ldr	r3, [r3, #24]
 8003632:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003636:	d121      	bne.n	800367c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	2b03      	cmp	r3, #3
 800363c:	d837      	bhi.n	80036ae <DMA_CheckFifoParam+0xda>
 800363e:	a201      	add	r2, pc, #4	; (adr r2, 8003644 <DMA_CheckFifoParam+0x70>)
 8003640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003644:	08003655 	.word	0x08003655
 8003648:	0800365b 	.word	0x0800365b
 800364c:	08003655 	.word	0x08003655
 8003650:	0800366d 	.word	0x0800366d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	73fb      	strb	r3, [r7, #15]
      break;
 8003658:	e030      	b.n	80036bc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800365e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d025      	beq.n	80036b2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800366a:	e022      	b.n	80036b2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003670:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003674:	d11f      	bne.n	80036b6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800367a:	e01c      	b.n	80036b6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	2b02      	cmp	r3, #2
 8003680:	d903      	bls.n	800368a <DMA_CheckFifoParam+0xb6>
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	2b03      	cmp	r3, #3
 8003686:	d003      	beq.n	8003690 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003688:	e018      	b.n	80036bc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	73fb      	strb	r3, [r7, #15]
      break;
 800368e:	e015      	b.n	80036bc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003694:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003698:	2b00      	cmp	r3, #0
 800369a:	d00e      	beq.n	80036ba <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	73fb      	strb	r3, [r7, #15]
      break;
 80036a0:	e00b      	b.n	80036ba <DMA_CheckFifoParam+0xe6>
      break;
 80036a2:	bf00      	nop
 80036a4:	e00a      	b.n	80036bc <DMA_CheckFifoParam+0xe8>
      break;
 80036a6:	bf00      	nop
 80036a8:	e008      	b.n	80036bc <DMA_CheckFifoParam+0xe8>
      break;
 80036aa:	bf00      	nop
 80036ac:	e006      	b.n	80036bc <DMA_CheckFifoParam+0xe8>
      break;
 80036ae:	bf00      	nop
 80036b0:	e004      	b.n	80036bc <DMA_CheckFifoParam+0xe8>
      break;
 80036b2:	bf00      	nop
 80036b4:	e002      	b.n	80036bc <DMA_CheckFifoParam+0xe8>
      break;   
 80036b6:	bf00      	nop
 80036b8:	e000      	b.n	80036bc <DMA_CheckFifoParam+0xe8>
      break;
 80036ba:	bf00      	nop
    }
  } 
  
  return status; 
 80036bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3714      	adds	r7, #20
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr
 80036ca:	bf00      	nop

080036cc <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b082      	sub	sp, #8
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d101      	bne.n	80036de <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e049      	b.n	8003772 <HAL_DMA2D_Init+0xa6>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d106      	bne.n	80036f8 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2200      	movs	r2, #0
 80036ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f7fe f9e2 	bl	8001abc <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2202      	movs	r2, #2
 80036fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	685a      	ldr	r2, [r3, #4]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	430a      	orrs	r2, r1
 8003714:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800371c:	f023 0107 	bic.w	r1, r3, #7
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	689a      	ldr	r2, [r3, #8]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	430a      	orrs	r2, r1
 800372a:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003732:	4b12      	ldr	r3, [pc, #72]	; (800377c <HAL_DMA2D_Init+0xb0>)
 8003734:	4013      	ands	r3, r2
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	68d1      	ldr	r1, [r2, #12]
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	6812      	ldr	r2, [r2, #0]
 800373e:	430b      	orrs	r3, r1
 8003740:	6413      	str	r3, [r2, #64]	; 0x40
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003748:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	691b      	ldr	r3, [r3, #16]
 8003750:	051a      	lsls	r2, r3, #20
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	695b      	ldr	r3, [r3, #20]
 8003756:	055b      	lsls	r3, r3, #21
 8003758:	431a      	orrs	r2, r3
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	430a      	orrs	r2, r1
 8003760:	635a      	str	r2, [r3, #52]	; 0x34
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2201      	movs	r2, #1
 800376c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003770:	2300      	movs	r3, #0
}
 8003772:	4618      	mov	r0, r3
 8003774:	3708      	adds	r7, #8
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
 800377a:	bf00      	nop
 800377c:	ffffc000 	.word	0xffffc000

08003780 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b084      	sub	sp, #16
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f003 0301 	and.w	r3, r3, #1
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d026      	beq.n	80037f0 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d021      	beq.n	80037f0 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80037ba:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037c0:	f043 0201 	orr.w	r2, r3, #1
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	2201      	movs	r2, #1
 80037ce:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2204      	movs	r2, #4
 80037d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2200      	movs	r2, #0
 80037dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if (hdma2d->XferErrorCallback != NULL)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	69db      	ldr	r3, [r3, #28]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d003      	beq.n	80037f0 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	69db      	ldr	r3, [r3, #28]
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f003 0320 	and.w	r3, r3, #32
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d026      	beq.n	8003848 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003800:	2b00      	cmp	r3, #0
 8003802:	d021      	beq.n	8003848 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003812:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	2220      	movs	r2, #32
 800381a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003820:	f043 0202 	orr.w	r2, r3, #2
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2204      	movs	r2, #4
 800382c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if (hdma2d->XferErrorCallback != NULL)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	69db      	ldr	r3, [r3, #28]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d003      	beq.n	8003848 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	69db      	ldr	r3, [r3, #28]
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f003 0308 	and.w	r3, r3, #8
 800384e:	2b00      	cmp	r3, #0
 8003850:	d026      	beq.n	80038a0 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003858:	2b00      	cmp	r3, #0
 800385a:	d021      	beq.n	80038a0 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800386a:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	2208      	movs	r2, #8
 8003872:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003878:	f043 0204 	orr.w	r2, r3, #4
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2204      	movs	r2, #4
 8003884:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2200      	movs	r2, #0
 800388c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if (hdma2d->XferErrorCallback != NULL)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	69db      	ldr	r3, [r3, #28]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d003      	beq.n	80038a0 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	69db      	ldr	r3, [r3, #28]
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f003 0304 	and.w	r3, r3, #4
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d013      	beq.n	80038d2 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d00e      	beq.n	80038d2 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038c2:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	2204      	movs	r2, #4
 80038ca:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	f000 f853 	bl	8003978 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	f003 0302 	and.w	r3, r3, #2
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d024      	beq.n	8003926 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d01f      	beq.n	8003926 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80038f4:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	2202      	movs	r2, #2
 80038fc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2201      	movs	r2, #1
 800390a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if (hdma2d->XferCpltCallback != NULL)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	699b      	ldr	r3, [r3, #24]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d003      	beq.n	8003926 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	699b      	ldr	r3, [r3, #24]
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	f003 0310 	and.w	r3, r3, #16
 800392c:	2b00      	cmp	r3, #0
 800392e:	d01f      	beq.n	8003970 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d01a      	beq.n	8003970 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003948:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	2210      	movs	r2, #16
 8003950:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2201      	movs	r2, #1
 800395e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f000 f80e 	bl	800398c <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8003970:	bf00      	nop
 8003972:	3710      	adds	r7, #16
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}

08003978 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003978:	b480      	push	{r7}
 800397a:	b083      	sub	sp, #12
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8003980:	bf00      	nop
 8003982:	370c      	adds	r7, #12
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr

0800398c <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800398c:	b480      	push	{r7}
 800398e:	b083      	sub	sp, #12
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8003994:	bf00      	nop
 8003996:	370c      	adds	r7, #12
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr

080039a0 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b087      	sub	sp, #28
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d101      	bne.n	80039c0 <HAL_DMA2D_ConfigLayer+0x20>
 80039bc:	2302      	movs	r3, #2
 80039be:	e084      	b.n	8003aca <HAL_DMA2D_ConfigLayer+0x12a>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2202      	movs	r2, #2
 80039cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80039d0:	683a      	ldr	r2, [r7, #0]
 80039d2:	4613      	mov	r3, r2
 80039d4:	005b      	lsls	r3, r3, #1
 80039d6:	4413      	add	r3, r2
 80039d8:	00db      	lsls	r3, r3, #3
 80039da:	3320      	adds	r3, #32
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	4413      	add	r3, r2
 80039e0:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	685a      	ldr	r2, [r3, #4]
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	041b      	lsls	r3, r3, #16
 80039ec:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	691b      	ldr	r3, [r3, #16]
 80039f2:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80039f4:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	695b      	ldr	r3, [r3, #20]
 80039fa:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80039fc:	4313      	orrs	r3, r2
 80039fe:	617b      	str	r3, [r7, #20]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8003a00:	4b35      	ldr	r3, [pc, #212]	; (8003ad8 <HAL_DMA2D_ConfigLayer+0x138>)
 8003a02:	60fb      	str	r3, [r7, #12]
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	2b0a      	cmp	r3, #10
 8003a0a:	d003      	beq.n	8003a14 <HAL_DMA2D_ConfigLayer+0x74>
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	2b09      	cmp	r3, #9
 8003a12:	d107      	bne.n	8003a24 <HAL_DMA2D_ConfigLayer+0x84>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	68db      	ldr	r3, [r3, #12]
 8003a18:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003a1c:	697a      	ldr	r2, [r7, #20]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	617b      	str	r3, [r7, #20]
 8003a22:	e005      	b.n	8003a30 <HAL_DMA2D_ConfigLayer+0x90>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	061b      	lsls	r3, r3, #24
 8003a2a:	697a      	ldr	r2, [r7, #20]
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d120      	bne.n	8003a78 <HAL_DMA2D_ConfigLayer+0xd8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	43db      	mvns	r3, r3
 8003a40:	ea02 0103 	and.w	r1, r2, r3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	697a      	ldr	r2, [r7, #20]
 8003a4a:	430a      	orrs	r2, r1
 8003a4c:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	693a      	ldr	r2, [r7, #16]
 8003a54:	6812      	ldr	r2, [r2, #0]
 8003a56:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	2b0a      	cmp	r3, #10
 8003a5e:	d003      	beq.n	8003a68 <HAL_DMA2D_ConfigLayer+0xc8>
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	2b09      	cmp	r3, #9
 8003a66:	d127      	bne.n	8003ab8 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	68da      	ldr	r2, [r3, #12]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003a74:	629a      	str	r2, [r3, #40]	; 0x28
 8003a76:	e01f      	b.n	8003ab8 <HAL_DMA2D_ConfigLayer+0x118>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	69da      	ldr	r2, [r3, #28]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	43db      	mvns	r3, r3
 8003a82:	ea02 0103 	and.w	r1, r2, r3
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	697a      	ldr	r2, [r7, #20]
 8003a8c:	430a      	orrs	r2, r1
 8003a8e:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	693a      	ldr	r2, [r7, #16]
 8003a96:	6812      	ldr	r2, [r2, #0]
 8003a98:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	2b0a      	cmp	r3, #10
 8003aa0:	d003      	beq.n	8003aaa <HAL_DMA2D_ConfigLayer+0x10a>
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	2b09      	cmp	r3, #9
 8003aa8:	d106      	bne.n	8003ab8 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	68da      	ldr	r2, [r3, #12]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003ab6:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2201      	movs	r2, #1
 8003abc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003ac8:	2300      	movs	r3, #0
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	371c      	adds	r7, #28
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad4:	4770      	bx	lr
 8003ad6:	bf00      	nop
 8003ad8:	ff33000f 	.word	0xff33000f

08003adc <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b086      	sub	sp, #24
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	60f8      	str	r0, [r7, #12]
 8003ae4:	60b9      	str	r1, [r7, #8]
 8003ae6:	607a      	str	r2, [r7, #4]
 8003ae8:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8003aea:	f7fe ffd1 	bl	8002a90 <HAL_GetTick>
 8003aee:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8003af0:	e009      	b.n	8003b06 <DSI_ShortWrite+0x2a>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8003af2:	f7fe ffcd 	bl	8002a90 <HAL_GetTick>
 8003af6:	4602      	mov	r2, r0
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	1ad3      	subs	r3, r2, r3
 8003afc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b00:	d901      	bls.n	8003b06 <DSI_ShortWrite+0x2a>
    {
      return HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	e015      	b.n	8003b32 <DSI_ShortWrite+0x56>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b0c:	f003 0301 	and.w	r3, r3, #1
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d0ee      	beq.n	8003af2 <DSI_ShortWrite+0x16>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	019a      	lsls	r2, r3, #6
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	431a      	orrs	r2, r3
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	021b      	lsls	r3, r3, #8
 8003b20:	ea42 0103 	orr.w	r1, r2, r3
 8003b24:	6a3b      	ldr	r3, [r7, #32]
 8003b26:	041a      	lsls	r2, r3, #16
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	430a      	orrs	r2, r1
 8003b2e:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 8003b30:	2300      	movs	r3, #0
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3718      	adds	r7, #24
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}
	...

08003b3c <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b088      	sub	sp, #32
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
 8003b44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d101      	bne.n	8003b50 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e109      	b.n	8003d64 <HAL_DSI_Init+0x228>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	7c5b      	ldrb	r3, [r3, #17]
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d102      	bne.n	8003b60 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f7fd ffd4 	bl	8001b08 <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2203      	movs	r2, #3
 8003b64:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 8003b66:	2300      	movs	r3, #0
 8003b68:	613b      	str	r3, [r7, #16]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003b7a:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8003b86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b8a:	613b      	str	r3, [r7, #16]
 8003b8c:	693b      	ldr	r3, [r7, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b8e:	f7fe ff7f 	bl	8002a90 <HAL_GetTick>
 8003b92:	61f8      	str	r0, [r7, #28]

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8003b94:	e009      	b.n	8003baa <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8003b96:	f7fe ff7b 	bl	8002a90 <HAL_GetTick>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	69fb      	ldr	r3, [r7, #28]
 8003b9e:	1ad3      	subs	r3, r2, r3
 8003ba0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ba4:	d901      	bls.n	8003baa <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	e0dc      	b.n	8003d64 <HAL_DSI_Init+0x228>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8003bb2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d0ed      	beq.n	8003b96 <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	4b69      	ldr	r3, [pc, #420]	; (8003d6c <HAL_DSI_Init+0x230>)
 8003bc8:	400b      	ands	r3, r1
 8003bca:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	009a      	lsls	r2, r3, #2
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8003be2:	431a      	orrs	r2, r3
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	041b      	lsls	r3, r3, #16
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8003bea:	431a      	orrs	r2, r3
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	430a      	orrs	r2, r1
 8003bf2:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	60fb      	str	r3, [r7, #12]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f042 0201 	orr.w	r2, r2, #1
 8003c0a:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8003c16:	f003 0301 	and.w	r3, r3, #1
 8003c1a:	60fb      	str	r3, [r7, #12]
 8003c1c:	68fb      	ldr	r3, [r7, #12]

  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 8003c1e:	2001      	movs	r0, #1
 8003c20:	f7fe ff42 	bl	8002aa8 <HAL_Delay>

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c24:	f7fe ff34 	bl	8002a90 <HAL_GetTick>
 8003c28:	61f8      	str	r0, [r7, #28]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8003c2a:	e009      	b.n	8003c40 <HAL_DSI_Init+0x104>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8003c2c:	f7fe ff30 	bl	8002a90 <HAL_GetTick>
 8003c30:	4602      	mov	r2, r0
 8003c32:	69fb      	ldr	r3, [r7, #28]
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c3a:	d901      	bls.n	8003c40 <HAL_DSI_Init+0x104>
    {
      return HAL_TIMEOUT;
 8003c3c:	2303      	movs	r3, #3
 8003c3e:	e091      	b.n	8003d64 <HAL_DSI_Init+0x228>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8003c48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d0ed      	beq.n	8003c2c <HAL_DSI_Init+0xf0>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f042 0206 	orr.w	r2, r2, #6
 8003c60:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f022 0203 	bic.w	r2, r2, #3
 8003c74:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	431a      	orrs	r2, r3
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f042 0201 	orr.w	r2, r2, #1
 8003c8e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f022 0203 	bic.w	r2, r2, #3
 8003ca2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	68da      	ldr	r2, [r3, #12]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	430a      	orrs	r2, r1
 8003cb8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	689a      	ldr	r2, [r3, #8]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003cca:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	6899      	ldr	r1, [r3, #8]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	689a      	ldr	r2, [r3, #8]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	430a      	orrs	r2, r1
 8003cdc:	609a      	str	r2, [r3, #8]

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d002      	beq.n	8003cec <HAL_DSI_Init+0x1b0>
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	e000      	b.n	8003cee <HAL_DSI_Init+0x1b2>
 8003cec:	2301      	movs	r3, #1
 8003cee:	61bb      	str	r3, [r7, #24]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8003cf0:	69bb      	ldr	r3, [r7, #24]
 8003cf2:	4a1f      	ldr	r2, [pc, #124]	; (8003d70 <HAL_DSI_Init+0x234>)
 8003cf4:	fb03 f202 	mul.w	r2, r3, r2
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	f003 0303 	and.w	r3, r3, #3
 8003d00:	409a      	lsls	r2, r3
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f246 11a8 	movw	r1, #25000	; 0x61a8
 8003d0a:	fb01 f303 	mul.w	r3, r1, r3
 8003d0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d12:	617b      	str	r3, [r7, #20]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8003d24:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	697a      	ldr	r2, [r7, #20]
 8003d36:	430a      	orrs	r2, r1
 8003d38:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	2200      	movs	r2, #0
 8003d42:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2200      	movs	r2, #0
 8003d54:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 8003d62:	2300      	movs	r3, #0
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	3720      	adds	r7, #32
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	fffc8603 	.word	0xfffc8603
 8003d70:	003d0900 	.word	0x003d0900

08003d74 <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @arg DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b083      	sub	sp, #12
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	7c1b      	ldrb	r3, [r3, #16]
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d101      	bne.n	8003d8a <HAL_DSI_ConfigErrorMonitor+0x16>
 8003d86:	2302      	movs	r3, #2
 8003d88:	e0aa      	b.n	8003ee0 <HAL_DSI_ConfigErrorMonitor+0x16c>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	741a      	strb	r2, [r3, #16]

  hdsi->Instance->IER[0U] = 0U;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	2200      	movs	r2, #0
 8003d96:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	683a      	ldr	r2, [r7, #0]
 8003da8:	619a      	str	r2, [r3, #24]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	f003 0301 	and.w	r3, r3, #1
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d00a      	beq.n	8003dca <HAL_DSI_ConfigErrorMonitor+0x56>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003dc4:	430b      	orrs	r3, r1
 8003dc6:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	f003 0302 	and.w	r3, r3, #2
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d009      	beq.n	8003de8 <HAL_DSI_ConfigErrorMonitor+0x74>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f442 12f8 	orr.w	r2, r2, #2031616	; 0x1f0000
 8003de4:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	f003 0304 	and.w	r3, r3, #4
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d009      	beq.n	8003e06 <HAL_DSI_ConfigErrorMonitor+0x92>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f042 0201 	orr.w	r2, r2, #1
 8003e02:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	f003 0308 	and.w	r3, r3, #8
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d009      	beq.n	8003e24 <HAL_DSI_ConfigErrorMonitor+0xb0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f042 0202 	orr.w	r2, r2, #2
 8003e20:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	f003 0310 	and.w	r3, r3, #16
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d009      	beq.n	8003e42 <HAL_DSI_ConfigErrorMonitor+0xce>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f042 020c 	orr.w	r2, r2, #12
 8003e3e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	f003 0320 	and.w	r3, r3, #32
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d009      	beq.n	8003e60 <HAL_DSI_ConfigErrorMonitor+0xec>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f042 0210 	orr.w	r2, r2, #16
 8003e5c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d009      	beq.n	8003e7e <HAL_DSI_ConfigErrorMonitor+0x10a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f042 0220 	orr.w	r2, r2, #32
 8003e7a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d009      	beq.n	8003e9c <HAL_DSI_ConfigErrorMonitor+0x128>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e98:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d009      	beq.n	8003eba <HAL_DSI_ConfigErrorMonitor+0x146>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003eb6:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d009      	beq.n	8003ed8 <HAL_DSI_ConfigErrorMonitor+0x164>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f442 52f8 	orr.w	r2, r2, #7936	; 0x1f00
 8003ed4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2200      	movs	r2, #0
 8003edc:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003ede:	2300      	movs	r3, #0
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	370c      	adds	r7, #12
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr

08003eec <HAL_DSI_IRQHandler>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
void HAL_DSI_IRQHandler(DSI_HandleTypeDef *hdsi)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b084      	sub	sp, #16
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  uint32_t ErrorStatus0;
  uint32_t ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8003efc:	f003 0301 	and.w	r3, r3, #1
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d00f      	beq.n	8003f24 <HAL_DSI_IRQHandler+0x38>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8003f0c:	f003 0301 	and.w	r3, r3, #1
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d007      	beq.n	8003f24 <HAL_DSI_IRQHandler+0x38>
    {
      /* Clear the Tearing Effect Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2201      	movs	r2, #1
 8003f1a:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Tearing Effect callback */
      hdsi->TearingEffectCallback(hdsi);
#else
      /*Call legacy Tearing Effect callback*/
      HAL_DSI_TearingEffectCallback(hdsi);
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f000 f8ad 	bl	800407e <HAL_DSI_TearingEffectCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8003f2c:	f003 0302 	and.w	r3, r3, #2
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d00f      	beq.n	8003f54 <HAL_DSI_IRQHandler+0x68>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8003f3c:	f003 0302 	and.w	r3, r3, #2
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d007      	beq.n	8003f54 <HAL_DSI_IRQHandler+0x68>
    {
      /* Clear the End of Refresh Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	2202      	movs	r2, #2
 8003f4a:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered End of refresh callback */
      hdsi->EndOfRefreshCallback(hdsi);
#else
      /*Call Legacy End of refresh callback */
      HAL_DSI_EndOfRefreshCallback(hdsi);
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f000 f89f 	bl	8004092 <HAL_DSI_EndOfRefreshCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	699b      	ldr	r3, [r3, #24]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	f000 808c 	beq.w	8004076 <HAL_DSI_IRQHandler+0x18a>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003f66:	60fb      	str	r3, [r7, #12]
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003f70:	68fa      	ldr	r2, [r7, #12]
 8003f72:	4013      	ands	r3, r2
 8003f74:	60fb      	str	r3, [r7, #12]
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003f7e:	60bb      	str	r3, [r7, #8]
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8003f88:	68ba      	ldr	r2, [r7, #8]
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	60bb      	str	r3, [r7, #8]

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	b29b      	uxth	r3, r3
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d005      	beq.n	8003fa2 <HAL_DSI_IRQHandler+0xb6>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	695b      	ldr	r3, [r3, #20]
 8003f9a:	f043 0201 	orr.w	r2, r3, #1
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d005      	beq.n	8003fb8 <HAL_DSI_IRQHandler+0xcc>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	695b      	ldr	r3, [r3, #20]
 8003fb0:	f043 0202 	orr.w	r2, r3, #2
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	f003 0301 	and.w	r3, r3, #1
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d005      	beq.n	8003fce <HAL_DSI_IRQHandler+0xe2>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	695b      	ldr	r3, [r3, #20]
 8003fc6:	f043 0204 	orr.w	r2, r3, #4
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	f003 0302 	and.w	r3, r3, #2
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d005      	beq.n	8003fe4 <HAL_DSI_IRQHandler+0xf8>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	695b      	ldr	r3, [r3, #20]
 8003fdc:	f043 0208 	orr.w	r2, r3, #8
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	f003 030c 	and.w	r3, r3, #12
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d005      	beq.n	8003ffa <HAL_DSI_IRQHandler+0x10e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	695b      	ldr	r3, [r3, #20]
 8003ff2:	f043 0210 	orr.w	r2, r3, #16
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	f003 0310 	and.w	r3, r3, #16
 8004000:	2b00      	cmp	r3, #0
 8004002:	d005      	beq.n	8004010 <HAL_DSI_IRQHandler+0x124>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	695b      	ldr	r3, [r3, #20]
 8004008:	f043 0220 	orr.w	r2, r3, #32
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	f003 0320 	and.w	r3, r3, #32
 8004016:	2b00      	cmp	r3, #0
 8004018:	d005      	beq.n	8004026 <HAL_DSI_IRQHandler+0x13a>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	695b      	ldr	r3, [r3, #20]
 800401e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800402c:	2b00      	cmp	r3, #0
 800402e:	d005      	beq.n	800403c <HAL_DSI_IRQHandler+0x150>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	695b      	ldr	r3, [r3, #20]
 8004034:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004042:	2b00      	cmp	r3, #0
 8004044:	d005      	beq.n	8004052 <HAL_DSI_IRQHandler+0x166>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	695b      	ldr	r3, [r3, #20]
 800404a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 8004058:	2b00      	cmp	r3, #0
 800405a:	d005      	beq.n	8004068 <HAL_DSI_IRQHandler+0x17c>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	695b      	ldr	r3, [r3, #20]
 8004060:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	615a      	str	r2, [r3, #20]
    }

    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	695b      	ldr	r3, [r3, #20]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d002      	beq.n	8004076 <HAL_DSI_IRQHandler+0x18a>
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Error callback */
      hdsi->ErrorCallback(hdsi);
#else
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	f000 f818 	bl	80040a6 <HAL_DSI_ErrorCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 8004076:	bf00      	nop
 8004078:	3710      	adds	r7, #16
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}

0800407e <HAL_DSI_TearingEffectCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef *hdsi)
{
 800407e:	b480      	push	{r7}
 8004080:	b083      	sub	sp, #12
 8004082:	af00      	add	r7, sp, #0
 8004084:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_TearingEffectCallback could be implemented in the user file
   */
}
 8004086:	bf00      	nop
 8004088:	370c      	adds	r7, #12
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr

08004092 <HAL_DSI_EndOfRefreshCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef *hdsi)
{
 8004092:	b480      	push	{r7}
 8004094:	b083      	sub	sp, #12
 8004096:	af00      	add	r7, sp, #0
 8004098:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_EndOfRefreshCallback could be implemented in the user file
   */
}
 800409a:	bf00      	nop
 800409c:	370c      	adds	r7, #12
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr

080040a6 <HAL_DSI_ErrorCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_ErrorCallback(DSI_HandleTypeDef *hdsi)
{
 80040a6:	b480      	push	{r7}
 80040a8:	b083      	sub	sp, #12
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_ErrorCallback could be implemented in the user file
   */
}
 80040ae:	bf00      	nop
 80040b0:	370c      	adds	r7, #12
 80040b2:	46bd      	mov	sp, r7
 80040b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b8:	4770      	bx	lr

080040ba <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 80040ba:	b480      	push	{r7}
 80040bc:	b083      	sub	sp, #12
 80040be:	af00      	add	r7, sp, #0
 80040c0:	6078      	str	r0, [r7, #4]
 80040c2:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	7c1b      	ldrb	r3, [r3, #16]
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d101      	bne.n	80040d0 <HAL_DSI_SetGenericVCID+0x16>
 80040cc:	2302      	movs	r3, #2
 80040ce:	e016      	b.n	80040fe <HAL_DSI_SetGenericVCID+0x44>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2201      	movs	r2, #1
 80040d4:	741a      	strb	r2, [r3, #16]

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f022 0203 	bic.w	r2, r2, #3
 80040e4:	631a      	str	r2, [r3, #48]	; 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	683a      	ldr	r2, [r7, #0]
 80040f2:	430a      	orrs	r2, r1
 80040f4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2200      	movs	r2, #0
 80040fa:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80040fc:	2300      	movs	r3, #0
}
 80040fe:	4618      	mov	r0, r3
 8004100:	370c      	adds	r7, #12
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr
	...

0800410c <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 800410c:	b480      	push	{r7}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	7c1b      	ldrb	r3, [r3, #16]
 800411a:	2b01      	cmp	r3, #1
 800411c:	d101      	bne.n	8004122 <HAL_DSI_ConfigAdaptedCommandMode+0x16>
 800411e:	2302      	movs	r3, #2
 8004120:	e0c5      	b.n	80042ae <HAL_DSI_ConfigAdaptedCommandMode+0x1a2>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2201      	movs	r2, #1
 8004126:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f042 0201 	orr.w	r2, r2, #1
 8004136:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f022 0201 	bic.w	r2, r2, #1
 8004148:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f042 0201 	orr.w	r2, r2, #1
 800415c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	68da      	ldr	r2, [r3, #12]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f022 0203 	bic.w	r2, r2, #3
 800416e:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	68d9      	ldr	r1, [r3, #12]
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	430a      	orrs	r2, r1
 8004180:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	695a      	ldr	r2, [r3, #20]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f022 0207 	bic.w	r2, r2, #7
 8004190:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	6959      	ldr	r1, [r3, #20]
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	69da      	ldr	r2, [r3, #28]
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	699b      	ldr	r3, [r3, #24]
 80041a0:	431a      	orrs	r2, r3
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	695b      	ldr	r3, [r3, #20]
 80041a6:	431a      	orrs	r2, r3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	430a      	orrs	r2, r1
 80041ae:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	691a      	ldr	r2, [r3, #16]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f022 020f 	bic.w	r2, r2, #15
 80041be:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	6919      	ldr	r1, [r3, #16]
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	685a      	ldr	r2, [r3, #4]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	430a      	orrs	r2, r1
 80041d0:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f022 020e 	bic.w	r2, r2, #14
 80041e2:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	005a      	lsls	r2, r3, #1
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	430a      	orrs	r2, r1
 80041fa:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	4b2c      	ldr	r3, [pc, #176]	; (80042bc <HAL_DSI_ConfigAdaptedCommandMode+0x1b0>)
 800420a:	400b      	ands	r3, r1
 800420c:	6653      	str	r3, [r2, #100]	; 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	689a      	ldr	r2, [r3, #8]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	430a      	orrs	r2, r1
 800421e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004230:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	68da      	ldr	r2, [r3, #12]
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	691b      	ldr	r3, [r3, #16]
 8004244:	431a      	orrs	r2, r3
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800424a:	431a      	orrs	r2, r3
                            CmdCfg->VSyncPol);
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	6a1b      	ldr	r3, [r3, #32]
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8004250:	431a      	orrs	r2, r3
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	430a      	orrs	r2, r1
 8004258:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f022 0201 	bic.w	r2, r2, #1
 800426a:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	430a      	orrs	r2, r1
 800427c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Enable the Tearing Effect interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f042 0201 	orr.w	r2, r2, #1
 800428e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f042 0202 	orr.w	r2, r2, #2
 80042a2:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80042ac:	2300      	movs	r3, #0
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	370c      	adds	r7, #12
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr
 80042ba:	bf00      	nop
 80042bc:	ffff0000 	.word	0xffff0000

080042c0 <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b083      	sub	sp, #12
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	7c1b      	ldrb	r3, [r3, #16]
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d101      	bne.n	80042d6 <HAL_DSI_ConfigCommand+0x16>
 80042d2:	2302      	movs	r3, #2
 80042d4:	e049      	b.n	800436a <HAL_DSI_ConfigCommand+0xaa>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2201      	movs	r2, #1
 80042da:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	6e99      	ldr	r1, [r3, #104]	; 0x68
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	4b24      	ldr	r3, [pc, #144]	; (8004378 <HAL_DSI_ConfigCommand+0xb8>)
 80042e8:	400b      	ands	r3, r1
 80042ea:	6693      	str	r3, [r2, #104]	; 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	6e99      	ldr	r1, [r3, #104]	; 0x68
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	681a      	ldr	r2, [r3, #0]
                           LPCmd->LPGenShortWriteOneP | \
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	685b      	ldr	r3, [r3, #4]
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 80042fa:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortWriteTwoP | \
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	689b      	ldr	r3, [r3, #8]
                           LPCmd->LPGenShortWriteOneP | \
 8004300:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadNoP   | \
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	68db      	ldr	r3, [r3, #12]
                           LPCmd->LPGenShortWriteTwoP | \
 8004306:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadOneP  | \
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	691b      	ldr	r3, [r3, #16]
                           LPCmd->LPGenShortReadNoP   | \
 800430c:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadTwoP  | \
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	695b      	ldr	r3, [r3, #20]
                           LPCmd->LPGenShortReadOneP  | \
 8004312:	431a      	orrs	r2, r3
                           LPCmd->LPGenLongWrite      | \
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	699b      	ldr	r3, [r3, #24]
                           LPCmd->LPGenShortReadTwoP  | \
 8004318:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteNoP  | \
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	69db      	ldr	r3, [r3, #28]
                           LPCmd->LPGenLongWrite      | \
 800431e:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteOneP | \
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	6a1b      	ldr	r3, [r3, #32]
                           LPCmd->LPDcsShortWriteNoP  | \
 8004324:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortReadNoP   | \
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           LPCmd->LPDcsShortWriteOneP | \
 800432a:	431a      	orrs	r2, r3
                           LPCmd->LPDcsLongWrite      | \
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                           LPCmd->LPDcsShortReadNoP   | \
 8004330:	431a      	orrs	r2, r3
                           LPCmd->LPMaxReadPacket);
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                           LPCmd->LPDcsLongWrite      | \
 8004336:	431a      	orrs	r2, r3
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	430a      	orrs	r2, r1
 800433e:	669a      	str	r2, [r3, #104]	; 0x68

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f022 0202 	bic.w	r2, r2, #2
 800434e:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	430a      	orrs	r2, r1
 8004360:	669a      	str	r2, [r3, #104]	; 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2200      	movs	r2, #0
 8004366:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004368:	2300      	movs	r3, #0
}
 800436a:	4618      	mov	r0, r3
 800436c:	370c      	adds	r7, #12
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr
 8004376:	bf00      	nop
 8004378:	fef080ff 	.word	0xfef080ff

0800437c <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @arg DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 800437c:	b480      	push	{r7}
 800437e:	b083      	sub	sp, #12
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
 8004384:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	7c1b      	ldrb	r3, [r3, #16]
 800438a:	2b01      	cmp	r3, #1
 800438c:	d101      	bne.n	8004392 <HAL_DSI_ConfigFlowControl+0x16>
 800438e:	2302      	movs	r3, #2
 8004390:	e016      	b.n	80043c0 <HAL_DSI_ConfigFlowControl+0x44>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2201      	movs	r2, #1
 8004396:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f022 021f 	bic.w	r2, r2, #31
 80043a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	683a      	ldr	r2, [r7, #0]
 80043b4:	430a      	orrs	r2, r1
 80043b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2200      	movs	r2, #0
 80043bc:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80043be:	2300      	movs	r3, #0
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	370c      	adds	r7, #12
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr

080043cc <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b085      	sub	sp, #20
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
 80043d4:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	7c1b      	ldrb	r3, [r3, #16]
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d101      	bne.n	80043e2 <HAL_DSI_ConfigPhyTimer+0x16>
 80043de:	2302      	movs	r3, #2
 80043e0:	e058      	b.n	8004494 <HAL_DSI_ConfigPhyTimer+0xc8>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2201      	movs	r2, #1
 80043e6:	741a      	strb	r2, [r3, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	4293      	cmp	r3, r2
 80043f2:	bf38      	it	cc
 80043f4:	4613      	movcc	r3, r2
 80043f6:	60fb      	str	r3, [r7, #12]
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 8004408:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	041a      	lsls	r2, r3, #16
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	431a      	orrs	r2, r3
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	430a      	orrs	r2, r1
 8004422:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8004436:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	691a      	ldr	r2, [r3, #16]
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	68db      	ldr	r3, [r3, #12]
 800444a:	041b      	lsls	r3, r3, #16
 800444c:	431a      	orrs	r2, r3
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	061b      	lsls	r3, r3, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8004454:	431a      	orrs	r2, r3
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	430a      	orrs	r2, r1
 800445c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8004470:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	695b      	ldr	r3, [r3, #20]
 8004480:	021a      	lsls	r2, r3, #8
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	430a      	orrs	r2, r1
 8004488:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2200      	movs	r2, #0
 8004490:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004492:	2300      	movs	r3, #0
}
 8004494:	4618      	mov	r0, r3
 8004496:	3714      	adds	r7, #20
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr

080044a0 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b083      	sub	sp, #12
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	7c1b      	ldrb	r3, [r3, #16]
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d101      	bne.n	80044b6 <HAL_DSI_ConfigHostTimeouts+0x16>
 80044b2:	2302      	movs	r3, #2
 80044b4:	e0b4      	b.n	8004620 <HAL_DSI_ConfigHostTimeouts+0x180>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2201      	movs	r2, #1
 80044ba:	741a      	strb	r2, [r3, #16]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	689a      	ldr	r2, [r3, #8]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80044ca:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	6899      	ldr	r1, [r3, #8]
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	021a      	lsls	r2, r3, #8
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	430a      	orrs	r2, r1
 80044de:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	b292      	uxth	r2, r2
 80044ec:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	6f99      	ldr	r1, [r3, #120]	; 0x78
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	041a      	lsls	r2, r3, #16
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	430a      	orrs	r2, r1
 8004500:	679a      	str	r2, [r3, #120]	; 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	4b47      	ldr	r3, [pc, #284]	; (800462c <HAL_DSI_ConfigHostTimeouts+0x18c>)
 800450e:	400b      	ands	r3, r1
 8004510:	6793      	str	r3, [r2, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	689a      	ldr	r2, [r3, #8]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	430a      	orrs	r2, r1
 8004522:	679a      	str	r2, [r3, #120]	; 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	4b3f      	ldr	r3, [pc, #252]	; (800462c <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8004530:	400b      	ands	r3, r1
 8004532:	67d3      	str	r3, [r2, #124]	; 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	68da      	ldr	r2, [r3, #12]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	430a      	orrs	r2, r1
 8004544:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	4b36      	ldr	r3, [pc, #216]	; (800462c <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8004554:	400b      	ands	r3, r1
 8004556:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	691a      	ldr	r2, [r3, #16]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	430a      	orrs	r2, r1
 800456c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	4b2b      	ldr	r3, [pc, #172]	; (800462c <HAL_DSI_ConfigHostTimeouts+0x18c>)
 800457e:	400b      	ands	r3, r1
 8004580:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	695a      	ldr	r2, [r3, #20]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	430a      	orrs	r2, r1
 8004596:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80045aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	699a      	ldr	r2, [r3, #24]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	430a      	orrs	r2, r1
 80045c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	4b16      	ldr	r3, [pc, #88]	; (800462c <HAL_DSI_ConfigHostTimeouts+0x18c>)
 80045d2:	400b      	ands	r3, r1
 80045d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	69da      	ldr	r2, [r3, #28]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	430a      	orrs	r2, r1
 80045ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	4b0c      	ldr	r3, [pc, #48]	; (800462c <HAL_DSI_ConfigHostTimeouts+0x18c>)
 80045fc:	400b      	ands	r3, r1
 80045fe:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	6a1a      	ldr	r2, [r3, #32]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	430a      	orrs	r2, r1
 8004614:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2200      	movs	r2, #0
 800461c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800461e:	2300      	movs	r3, #0
}
 8004620:	4618      	mov	r0, r3
 8004622:	370c      	adds	r7, #12
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr
 800462c:	ffff0000 	.word	0xffff0000

08004630 <HAL_DSI_Start>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
 8004630:	b480      	push	{r7}
 8004632:	b085      	sub	sp, #20
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	7c1b      	ldrb	r3, [r3, #16]
 800463c:	2b01      	cmp	r3, #1
 800463e:	d101      	bne.n	8004644 <HAL_DSI_Start+0x14>
 8004640:	2302      	movs	r3, #2
 8004642:	e02b      	b.n	800469c <HAL_DSI_Start+0x6c>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	741a      	strb	r2, [r3, #16]

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 800464a:	2300      	movs	r3, #0
 800464c:	60fb      	str	r3, [r7, #12]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	685a      	ldr	r2, [r3, #4]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f042 0201 	orr.w	r2, r2, #1
 800465c:	605a      	str	r2, [r3, #4]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	f003 0301 	and.w	r3, r3, #1
 8004668:	60fb      	str	r3, [r7, #12]
 800466a:	68fb      	ldr	r3, [r7, #12]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 800466c:	2300      	movs	r3, #0
 800466e:	60bb      	str	r3, [r7, #8]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f042 0208 	orr.w	r2, r2, #8
 8004680:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800468c:	f003 0308 	and.w	r3, r3, #8
 8004690:	60bb      	str	r3, [r7, #8]
 8004692:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2200      	movs	r2, #0
 8004698:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800469a:	2300      	movs	r3, #0
}
 800469c:	4618      	mov	r0, r3
 800469e:	3714      	adds	r7, #20
 80046a0:	46bd      	mov	sp, r7
 80046a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a6:	4770      	bx	lr

080046a8 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b088      	sub	sp, #32
 80046ac:	af02      	add	r7, sp, #8
 80046ae:	60f8      	str	r0, [r7, #12]
 80046b0:	60b9      	str	r1, [r7, #8]
 80046b2:	607a      	str	r2, [r7, #4]
 80046b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	7c1b      	ldrb	r3, [r3, #16]
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d101      	bne.n	80046c2 <HAL_DSI_ShortWrite+0x1a>
 80046be:	2302      	movs	r3, #2
 80046c0:	e010      	b.n	80046e4 <HAL_DSI_ShortWrite+0x3c>
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2201      	movs	r2, #1
 80046c6:	741a      	strb	r2, [r3, #16]

  status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 80046c8:	6a3b      	ldr	r3, [r7, #32]
 80046ca:	9300      	str	r3, [sp, #0]
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	687a      	ldr	r2, [r7, #4]
 80046d0:	68b9      	ldr	r1, [r7, #8]
 80046d2:	68f8      	ldr	r0, [r7, #12]
 80046d4:	f7ff fa02 	bl	8003adc <DSI_ShortWrite>
 80046d8:	4603      	mov	r3, r0
 80046da:	75fb      	strb	r3, [r7, #23]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2200      	movs	r2, #0
 80046e0:	741a      	strb	r2, [r3, #16]

  return status;
 80046e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	3718      	adds	r7, #24
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}

080046ec <HAL_DSI_SetLowPowerRXFilter>:
  *               the configuration information for the DSI.
  * @param  Frequency  cutoff frequency of low-pass filter at the input of LPRX
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b083      	sub	sp, #12
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	7c1b      	ldrb	r3, [r3, #16]
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d101      	bne.n	8004702 <HAL_DSI_SetLowPowerRXFilter+0x16>
 80046fe:	2302      	movs	r3, #2
 8004700:	e01b      	b.n	800473a <HAL_DSI_SetLowPowerRXFilter+0x4e>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2201      	movs	r2, #1
 8004706:	741a      	strb	r2, [r3, #16]

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 8004718:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	065a      	lsls	r2, r3, #25
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	430a      	orrs	r2, r1
 800472e:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2200      	movs	r2, #0
 8004736:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004738:	2300      	movs	r3, #0
}
 800473a:	4618      	mov	r0, r3
 800473c:	370c      	adds	r7, #12
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr
	...

08004748 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004748:	b480      	push	{r7}
 800474a:	b089      	sub	sp, #36	; 0x24
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
 8004750:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004752:	2300      	movs	r3, #0
 8004754:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004756:	2300      	movs	r3, #0
 8004758:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800475a:	2300      	movs	r3, #0
 800475c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800475e:	2300      	movs	r3, #0
 8004760:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004762:	2300      	movs	r3, #0
 8004764:	61fb      	str	r3, [r7, #28]
 8004766:	e175      	b.n	8004a54 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004768:	2201      	movs	r2, #1
 800476a:	69fb      	ldr	r3, [r7, #28]
 800476c:	fa02 f303 	lsl.w	r3, r2, r3
 8004770:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	697a      	ldr	r2, [r7, #20]
 8004778:	4013      	ands	r3, r2
 800477a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800477c:	693a      	ldr	r2, [r7, #16]
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	429a      	cmp	r2, r3
 8004782:	f040 8164 	bne.w	8004a4e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	f003 0303 	and.w	r3, r3, #3
 800478e:	2b01      	cmp	r3, #1
 8004790:	d005      	beq.n	800479e <HAL_GPIO_Init+0x56>
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	f003 0303 	and.w	r3, r3, #3
 800479a:	2b02      	cmp	r3, #2
 800479c:	d130      	bne.n	8004800 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80047a4:	69fb      	ldr	r3, [r7, #28]
 80047a6:	005b      	lsls	r3, r3, #1
 80047a8:	2203      	movs	r2, #3
 80047aa:	fa02 f303 	lsl.w	r3, r2, r3
 80047ae:	43db      	mvns	r3, r3
 80047b0:	69ba      	ldr	r2, [r7, #24]
 80047b2:	4013      	ands	r3, r2
 80047b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	68da      	ldr	r2, [r3, #12]
 80047ba:	69fb      	ldr	r3, [r7, #28]
 80047bc:	005b      	lsls	r3, r3, #1
 80047be:	fa02 f303 	lsl.w	r3, r2, r3
 80047c2:	69ba      	ldr	r2, [r7, #24]
 80047c4:	4313      	orrs	r3, r2
 80047c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	69ba      	ldr	r2, [r7, #24]
 80047cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80047d4:	2201      	movs	r2, #1
 80047d6:	69fb      	ldr	r3, [r7, #28]
 80047d8:	fa02 f303 	lsl.w	r3, r2, r3
 80047dc:	43db      	mvns	r3, r3
 80047de:	69ba      	ldr	r2, [r7, #24]
 80047e0:	4013      	ands	r3, r2
 80047e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	091b      	lsrs	r3, r3, #4
 80047ea:	f003 0201 	and.w	r2, r3, #1
 80047ee:	69fb      	ldr	r3, [r7, #28]
 80047f0:	fa02 f303 	lsl.w	r3, r2, r3
 80047f4:	69ba      	ldr	r2, [r7, #24]
 80047f6:	4313      	orrs	r3, r2
 80047f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	69ba      	ldr	r2, [r7, #24]
 80047fe:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	f003 0303 	and.w	r3, r3, #3
 8004808:	2b03      	cmp	r3, #3
 800480a:	d017      	beq.n	800483c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004812:	69fb      	ldr	r3, [r7, #28]
 8004814:	005b      	lsls	r3, r3, #1
 8004816:	2203      	movs	r2, #3
 8004818:	fa02 f303 	lsl.w	r3, r2, r3
 800481c:	43db      	mvns	r3, r3
 800481e:	69ba      	ldr	r2, [r7, #24]
 8004820:	4013      	ands	r3, r2
 8004822:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	689a      	ldr	r2, [r3, #8]
 8004828:	69fb      	ldr	r3, [r7, #28]
 800482a:	005b      	lsls	r3, r3, #1
 800482c:	fa02 f303 	lsl.w	r3, r2, r3
 8004830:	69ba      	ldr	r2, [r7, #24]
 8004832:	4313      	orrs	r3, r2
 8004834:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	69ba      	ldr	r2, [r7, #24]
 800483a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	f003 0303 	and.w	r3, r3, #3
 8004844:	2b02      	cmp	r3, #2
 8004846:	d123      	bne.n	8004890 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004848:	69fb      	ldr	r3, [r7, #28]
 800484a:	08da      	lsrs	r2, r3, #3
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	3208      	adds	r2, #8
 8004850:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004854:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004856:	69fb      	ldr	r3, [r7, #28]
 8004858:	f003 0307 	and.w	r3, r3, #7
 800485c:	009b      	lsls	r3, r3, #2
 800485e:	220f      	movs	r2, #15
 8004860:	fa02 f303 	lsl.w	r3, r2, r3
 8004864:	43db      	mvns	r3, r3
 8004866:	69ba      	ldr	r2, [r7, #24]
 8004868:	4013      	ands	r3, r2
 800486a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	691a      	ldr	r2, [r3, #16]
 8004870:	69fb      	ldr	r3, [r7, #28]
 8004872:	f003 0307 	and.w	r3, r3, #7
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	fa02 f303 	lsl.w	r3, r2, r3
 800487c:	69ba      	ldr	r2, [r7, #24]
 800487e:	4313      	orrs	r3, r2
 8004880:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004882:	69fb      	ldr	r3, [r7, #28]
 8004884:	08da      	lsrs	r2, r3, #3
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	3208      	adds	r2, #8
 800488a:	69b9      	ldr	r1, [r7, #24]
 800488c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004896:	69fb      	ldr	r3, [r7, #28]
 8004898:	005b      	lsls	r3, r3, #1
 800489a:	2203      	movs	r2, #3
 800489c:	fa02 f303 	lsl.w	r3, r2, r3
 80048a0:	43db      	mvns	r3, r3
 80048a2:	69ba      	ldr	r2, [r7, #24]
 80048a4:	4013      	ands	r3, r2
 80048a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	f003 0203 	and.w	r2, r3, #3
 80048b0:	69fb      	ldr	r3, [r7, #28]
 80048b2:	005b      	lsls	r3, r3, #1
 80048b4:	fa02 f303 	lsl.w	r3, r2, r3
 80048b8:	69ba      	ldr	r2, [r7, #24]
 80048ba:	4313      	orrs	r3, r2
 80048bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	69ba      	ldr	r2, [r7, #24]
 80048c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	f000 80be 	beq.w	8004a4e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048d2:	4b66      	ldr	r3, [pc, #408]	; (8004a6c <HAL_GPIO_Init+0x324>)
 80048d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048d6:	4a65      	ldr	r2, [pc, #404]	; (8004a6c <HAL_GPIO_Init+0x324>)
 80048d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80048dc:	6453      	str	r3, [r2, #68]	; 0x44
 80048de:	4b63      	ldr	r3, [pc, #396]	; (8004a6c <HAL_GPIO_Init+0x324>)
 80048e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048e6:	60fb      	str	r3, [r7, #12]
 80048e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80048ea:	4a61      	ldr	r2, [pc, #388]	; (8004a70 <HAL_GPIO_Init+0x328>)
 80048ec:	69fb      	ldr	r3, [r7, #28]
 80048ee:	089b      	lsrs	r3, r3, #2
 80048f0:	3302      	adds	r3, #2
 80048f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80048f8:	69fb      	ldr	r3, [r7, #28]
 80048fa:	f003 0303 	and.w	r3, r3, #3
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	220f      	movs	r2, #15
 8004902:	fa02 f303 	lsl.w	r3, r2, r3
 8004906:	43db      	mvns	r3, r3
 8004908:	69ba      	ldr	r2, [r7, #24]
 800490a:	4013      	ands	r3, r2
 800490c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	4a58      	ldr	r2, [pc, #352]	; (8004a74 <HAL_GPIO_Init+0x32c>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d037      	beq.n	8004986 <HAL_GPIO_Init+0x23e>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4a57      	ldr	r2, [pc, #348]	; (8004a78 <HAL_GPIO_Init+0x330>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d031      	beq.n	8004982 <HAL_GPIO_Init+0x23a>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	4a56      	ldr	r2, [pc, #344]	; (8004a7c <HAL_GPIO_Init+0x334>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d02b      	beq.n	800497e <HAL_GPIO_Init+0x236>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	4a55      	ldr	r2, [pc, #340]	; (8004a80 <HAL_GPIO_Init+0x338>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d025      	beq.n	800497a <HAL_GPIO_Init+0x232>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4a54      	ldr	r2, [pc, #336]	; (8004a84 <HAL_GPIO_Init+0x33c>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d01f      	beq.n	8004976 <HAL_GPIO_Init+0x22e>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4a53      	ldr	r2, [pc, #332]	; (8004a88 <HAL_GPIO_Init+0x340>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d019      	beq.n	8004972 <HAL_GPIO_Init+0x22a>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4a52      	ldr	r2, [pc, #328]	; (8004a8c <HAL_GPIO_Init+0x344>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d013      	beq.n	800496e <HAL_GPIO_Init+0x226>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	4a51      	ldr	r2, [pc, #324]	; (8004a90 <HAL_GPIO_Init+0x348>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d00d      	beq.n	800496a <HAL_GPIO_Init+0x222>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	4a50      	ldr	r2, [pc, #320]	; (8004a94 <HAL_GPIO_Init+0x34c>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d007      	beq.n	8004966 <HAL_GPIO_Init+0x21e>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	4a4f      	ldr	r2, [pc, #316]	; (8004a98 <HAL_GPIO_Init+0x350>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d101      	bne.n	8004962 <HAL_GPIO_Init+0x21a>
 800495e:	2309      	movs	r3, #9
 8004960:	e012      	b.n	8004988 <HAL_GPIO_Init+0x240>
 8004962:	230a      	movs	r3, #10
 8004964:	e010      	b.n	8004988 <HAL_GPIO_Init+0x240>
 8004966:	2308      	movs	r3, #8
 8004968:	e00e      	b.n	8004988 <HAL_GPIO_Init+0x240>
 800496a:	2307      	movs	r3, #7
 800496c:	e00c      	b.n	8004988 <HAL_GPIO_Init+0x240>
 800496e:	2306      	movs	r3, #6
 8004970:	e00a      	b.n	8004988 <HAL_GPIO_Init+0x240>
 8004972:	2305      	movs	r3, #5
 8004974:	e008      	b.n	8004988 <HAL_GPIO_Init+0x240>
 8004976:	2304      	movs	r3, #4
 8004978:	e006      	b.n	8004988 <HAL_GPIO_Init+0x240>
 800497a:	2303      	movs	r3, #3
 800497c:	e004      	b.n	8004988 <HAL_GPIO_Init+0x240>
 800497e:	2302      	movs	r3, #2
 8004980:	e002      	b.n	8004988 <HAL_GPIO_Init+0x240>
 8004982:	2301      	movs	r3, #1
 8004984:	e000      	b.n	8004988 <HAL_GPIO_Init+0x240>
 8004986:	2300      	movs	r3, #0
 8004988:	69fa      	ldr	r2, [r7, #28]
 800498a:	f002 0203 	and.w	r2, r2, #3
 800498e:	0092      	lsls	r2, r2, #2
 8004990:	4093      	lsls	r3, r2
 8004992:	69ba      	ldr	r2, [r7, #24]
 8004994:	4313      	orrs	r3, r2
 8004996:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004998:	4935      	ldr	r1, [pc, #212]	; (8004a70 <HAL_GPIO_Init+0x328>)
 800499a:	69fb      	ldr	r3, [r7, #28]
 800499c:	089b      	lsrs	r3, r3, #2
 800499e:	3302      	adds	r3, #2
 80049a0:	69ba      	ldr	r2, [r7, #24]
 80049a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80049a6:	4b3d      	ldr	r3, [pc, #244]	; (8004a9c <HAL_GPIO_Init+0x354>)
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	43db      	mvns	r3, r3
 80049b0:	69ba      	ldr	r2, [r7, #24]
 80049b2:	4013      	ands	r3, r2
 80049b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d003      	beq.n	80049ca <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80049c2:	69ba      	ldr	r2, [r7, #24]
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	4313      	orrs	r3, r2
 80049c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80049ca:	4a34      	ldr	r2, [pc, #208]	; (8004a9c <HAL_GPIO_Init+0x354>)
 80049cc:	69bb      	ldr	r3, [r7, #24]
 80049ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80049d0:	4b32      	ldr	r3, [pc, #200]	; (8004a9c <HAL_GPIO_Init+0x354>)
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	43db      	mvns	r3, r3
 80049da:	69ba      	ldr	r2, [r7, #24]
 80049dc:	4013      	ands	r3, r2
 80049de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d003      	beq.n	80049f4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80049ec:	69ba      	ldr	r2, [r7, #24]
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	4313      	orrs	r3, r2
 80049f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80049f4:	4a29      	ldr	r2, [pc, #164]	; (8004a9c <HAL_GPIO_Init+0x354>)
 80049f6:	69bb      	ldr	r3, [r7, #24]
 80049f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80049fa:	4b28      	ldr	r3, [pc, #160]	; (8004a9c <HAL_GPIO_Init+0x354>)
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	43db      	mvns	r3, r3
 8004a04:	69ba      	ldr	r2, [r7, #24]
 8004a06:	4013      	ands	r3, r2
 8004a08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d003      	beq.n	8004a1e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004a16:	69ba      	ldr	r2, [r7, #24]
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004a1e:	4a1f      	ldr	r2, [pc, #124]	; (8004a9c <HAL_GPIO_Init+0x354>)
 8004a20:	69bb      	ldr	r3, [r7, #24]
 8004a22:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004a24:	4b1d      	ldr	r3, [pc, #116]	; (8004a9c <HAL_GPIO_Init+0x354>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	43db      	mvns	r3, r3
 8004a2e:	69ba      	ldr	r2, [r7, #24]
 8004a30:	4013      	ands	r3, r2
 8004a32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d003      	beq.n	8004a48 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004a40:	69ba      	ldr	r2, [r7, #24]
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	4313      	orrs	r3, r2
 8004a46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004a48:	4a14      	ldr	r2, [pc, #80]	; (8004a9c <HAL_GPIO_Init+0x354>)
 8004a4a:	69bb      	ldr	r3, [r7, #24]
 8004a4c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004a4e:	69fb      	ldr	r3, [r7, #28]
 8004a50:	3301      	adds	r3, #1
 8004a52:	61fb      	str	r3, [r7, #28]
 8004a54:	69fb      	ldr	r3, [r7, #28]
 8004a56:	2b0f      	cmp	r3, #15
 8004a58:	f67f ae86 	bls.w	8004768 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004a5c:	bf00      	nop
 8004a5e:	bf00      	nop
 8004a60:	3724      	adds	r7, #36	; 0x24
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr
 8004a6a:	bf00      	nop
 8004a6c:	40023800 	.word	0x40023800
 8004a70:	40013800 	.word	0x40013800
 8004a74:	40020000 	.word	0x40020000
 8004a78:	40020400 	.word	0x40020400
 8004a7c:	40020800 	.word	0x40020800
 8004a80:	40020c00 	.word	0x40020c00
 8004a84:	40021000 	.word	0x40021000
 8004a88:	40021400 	.word	0x40021400
 8004a8c:	40021800 	.word	0x40021800
 8004a90:	40021c00 	.word	0x40021c00
 8004a94:	40022000 	.word	0x40022000
 8004a98:	40022400 	.word	0x40022400
 8004a9c:	40013c00 	.word	0x40013c00

08004aa0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b083      	sub	sp, #12
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
 8004aa8:	460b      	mov	r3, r1
 8004aaa:	807b      	strh	r3, [r7, #2]
 8004aac:	4613      	mov	r3, r2
 8004aae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004ab0:	787b      	ldrb	r3, [r7, #1]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d003      	beq.n	8004abe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004ab6:	887a      	ldrh	r2, [r7, #2]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004abc:	e003      	b.n	8004ac6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004abe:	887b      	ldrh	r3, [r7, #2]
 8004ac0:	041a      	lsls	r2, r3, #16
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	619a      	str	r2, [r3, #24]
}
 8004ac6:	bf00      	nop
 8004ac8:	370c      	adds	r7, #12
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr

08004ad2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004ad2:	b480      	push	{r7}
 8004ad4:	b085      	sub	sp, #20
 8004ad6:	af00      	add	r7, sp, #0
 8004ad8:	6078      	str	r0, [r7, #4]
 8004ada:	460b      	mov	r3, r1
 8004adc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	695b      	ldr	r3, [r3, #20]
 8004ae2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004ae4:	887a      	ldrh	r2, [r7, #2]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	4013      	ands	r3, r2
 8004aea:	041a      	lsls	r2, r3, #16
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	43d9      	mvns	r1, r3
 8004af0:	887b      	ldrh	r3, [r7, #2]
 8004af2:	400b      	ands	r3, r1
 8004af4:	431a      	orrs	r2, r3
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	619a      	str	r2, [r3, #24]
}
 8004afa:	bf00      	nop
 8004afc:	3714      	adds	r7, #20
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr
	...

08004b08 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b082      	sub	sp, #8
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d101      	bne.n	8004b1a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	e07f      	b.n	8004c1a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d106      	bne.n	8004b34 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f7fd f836 	bl	8001ba0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2224      	movs	r2, #36	; 0x24
 8004b38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f022 0201 	bic.w	r2, r2, #1
 8004b4a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	685a      	ldr	r2, [r3, #4]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004b58:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	689a      	ldr	r2, [r3, #8]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004b68:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	68db      	ldr	r3, [r3, #12]
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d107      	bne.n	8004b82 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	689a      	ldr	r2, [r3, #8]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b7e:	609a      	str	r2, [r3, #8]
 8004b80:	e006      	b.n	8004b90 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	689a      	ldr	r2, [r3, #8]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004b8e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	68db      	ldr	r3, [r3, #12]
 8004b94:	2b02      	cmp	r3, #2
 8004b96:	d104      	bne.n	8004ba2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ba0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	6859      	ldr	r1, [r3, #4]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681a      	ldr	r2, [r3, #0]
 8004bac:	4b1d      	ldr	r3, [pc, #116]	; (8004c24 <HAL_I2C_Init+0x11c>)
 8004bae:	430b      	orrs	r3, r1
 8004bb0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	68da      	ldr	r2, [r3, #12]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004bc0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	691a      	ldr	r2, [r3, #16]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	695b      	ldr	r3, [r3, #20]
 8004bca:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	699b      	ldr	r3, [r3, #24]
 8004bd2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	430a      	orrs	r2, r1
 8004bda:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	69d9      	ldr	r1, [r3, #28]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6a1a      	ldr	r2, [r3, #32]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	430a      	orrs	r2, r1
 8004bea:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	681a      	ldr	r2, [r3, #0]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f042 0201 	orr.w	r2, r2, #1
 8004bfa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2220      	movs	r2, #32
 8004c06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2200      	movs	r2, #0
 8004c14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004c18:	2300      	movs	r3, #0
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3708      	adds	r7, #8
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}
 8004c22:	bf00      	nop
 8004c24:	02008000 	.word	0x02008000

08004c28 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b084      	sub	sp, #16
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	699b      	ldr	r3, [r3, #24]
 8004c36:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d005      	beq.n	8004c54 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c4c:	68ba      	ldr	r2, [r7, #8]
 8004c4e:	68f9      	ldr	r1, [r7, #12]
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	4798      	blx	r3
  }
}
 8004c54:	bf00      	nop
 8004c56:	3710      	adds	r7, #16
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}

08004c5c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b083      	sub	sp, #12
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
 8004c64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c6c:	b2db      	uxtb	r3, r3
 8004c6e:	2b20      	cmp	r3, #32
 8004c70:	d138      	bne.n	8004ce4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d101      	bne.n	8004c80 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004c7c:	2302      	movs	r3, #2
 8004c7e:	e032      	b.n	8004ce6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2201      	movs	r2, #1
 8004c84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2224      	movs	r2, #36	; 0x24
 8004c8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	681a      	ldr	r2, [r3, #0]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f022 0201 	bic.w	r2, r2, #1
 8004c9e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	681a      	ldr	r2, [r3, #0]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004cae:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	6819      	ldr	r1, [r3, #0]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	683a      	ldr	r2, [r7, #0]
 8004cbc:	430a      	orrs	r2, r1
 8004cbe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f042 0201 	orr.w	r2, r2, #1
 8004cce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2220      	movs	r2, #32
 8004cd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	e000      	b.n	8004ce6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004ce4:	2302      	movs	r3, #2
  }
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	370c      	adds	r7, #12
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr

08004cf2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004cf2:	b480      	push	{r7}
 8004cf4:	b085      	sub	sp, #20
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	6078      	str	r0, [r7, #4]
 8004cfa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d02:	b2db      	uxtb	r3, r3
 8004d04:	2b20      	cmp	r3, #32
 8004d06:	d139      	bne.n	8004d7c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d0e:	2b01      	cmp	r3, #1
 8004d10:	d101      	bne.n	8004d16 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004d12:	2302      	movs	r3, #2
 8004d14:	e033      	b.n	8004d7e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2201      	movs	r2, #1
 8004d1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2224      	movs	r2, #36	; 0x24
 8004d22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f022 0201 	bic.w	r2, r2, #1
 8004d34:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004d44:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	021b      	lsls	r3, r3, #8
 8004d4a:	68fa      	ldr	r2, [r7, #12]
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	68fa      	ldr	r2, [r7, #12]
 8004d56:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f042 0201 	orr.w	r2, r2, #1
 8004d66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2220      	movs	r2, #32
 8004d6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2200      	movs	r2, #0
 8004d74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004d78:	2300      	movs	r3, #0
 8004d7a:	e000      	b.n	8004d7e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004d7c:	2302      	movs	r3, #2
  }
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3714      	adds	r7, #20
 8004d82:	46bd      	mov	sp, r7
 8004d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d88:	4770      	bx	lr
	...

08004d8c <HAL_JPEG_Init>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_Init(JPEG_HandleTypeDef *hjpeg)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b082      	sub	sp, #8
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
    99,  99,  99,  99,  99,  99,  99,  99,
    99,  99,  99,  99,  99,  99,  99,  99
  };

  /* Check the JPEG handle allocation */
  if (hjpeg == NULL)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d101      	bne.n	8004d9e <HAL_JPEG_Init+0x12>
  {
    return HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e078      	b.n	8004e90 <HAL_JPEG_Init+0x104>

    /* Init the low level hardware */
    hjpeg->MspInitCallback(hjpeg);
  }
#else
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8004da4:	b2db      	uxtb	r3, r3
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d106      	bne.n	8004db8 <HAL_JPEG_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hjpeg->Lock = HAL_UNLOCKED;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2200      	movs	r2, #0
 8004dae:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_JPEG_MspInit(hjpeg);
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f7fc ff80 	bl	8001cb8 <HAL_JPEG_MspInit>
  }
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2202      	movs	r2, #2
 8004dbc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Start the JPEG Core*/
  __HAL_JPEG_ENABLE(hjpeg);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f042 0201 	orr.w	r2, r2, #1
 8004dce:	631a      	str	r2, [r3, #48]	; 0x30

  /* Stop the JPEG encoding/decoding process*/
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f022 0201 	bic.w	r2, r2, #1
 8004dde:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 8004dee:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable All DMA requests */
  JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_MASK);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
 8004dfe:	631a      	str	r2, [r3, #48]	; 0x30

  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e0e:	631a      	str	r2, [r3, #48]	; 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e1e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8004e2e:	639a      	str	r2, [r3, #56]	; 0x38

  /* init default quantization tables*/
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	4a19      	ldr	r2, [pc, #100]	; (8004e98 <HAL_JPEG_Init+0x10c>)
 8004e34:	63da      	str	r2, [r3, #60]	; 0x3c
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	4a18      	ldr	r2, [pc, #96]	; (8004e9c <HAL_JPEG_Init+0x110>)
 8004e3a:	641a      	str	r2, [r3, #64]	; 0x40
  hjpeg->QuantTable2 = NULL;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	645a      	str	r2, [r3, #68]	; 0x44
  hjpeg->QuantTable3 = NULL;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2200      	movs	r2, #0
 8004e46:	649a      	str	r2, [r3, #72]	; 0x48

  /* init the default Huffman tables*/
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 8004e48:	6878      	ldr	r0, [r7, #4]
 8004e4a:	f000 fdab 	bl	80059a4 <JPEG_Set_HuffEnc_Mem>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d004      	beq.n	8004e5e <HAL_JPEG_Init+0xd2>
  {
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2201      	movs	r2, #1
 8004e58:	651a      	str	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e018      	b.n	8004e90 <HAL_JPEG_Init+0x104>
  }

  /* Enable header processing*/
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	685a      	ldr	r2, [r3, #4]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e6c:	605a      	str	r2, [r3, #4]

  /* Reset JpegInCount and JpegOutCount */
  hjpeg->JpegInCount = 0;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2200      	movs	r2, #0
 8004e72:	621a      	str	r2, [r3, #32]
  hjpeg->JpegOutCount = 0;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2200      	movs	r2, #0
 8004e78:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_READY;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Reset the JPEG ErrorCode */
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2200      	movs	r2, #0
 8004e86:	651a      	str	r2, [r3, #80]	; 0x50

  /*Clear the context filelds*/
  hjpeg->Context = 0;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Return function status */
  return HAL_OK;
 8004e8e:	2300      	movs	r3, #0
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	3708      	adds	r7, #8
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}
 8004e98:	08029ea8 	.word	0x08029ea8
 8004e9c:	08029ee8 	.word	0x08029ee8

08004ea0 <HAL_JPEG_GetInfo>:
  * @param  pInfo pointer to a JPEG_ConfTypeDef structure that contains
  *         The JPEG decoded header information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_GetInfo(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b086      	sub	sp, #24
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
 8004ea8:	6039      	str	r1, [r7, #0]
  uint32_t yblockNb;
  uint32_t cBblockNb;
  uint32_t cRblockNb;

  /* Check the JPEG handle allocation */
  if ((hjpeg == NULL) || (pInfo == NULL))
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d002      	beq.n	8004eb6 <HAL_JPEG_GetInfo+0x16>
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d101      	bne.n	8004eba <HAL_JPEG_GetInfo+0x1a>
  {
    return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e083      	b.n	8004fc2 <HAL_JPEG_GetInfo+0x122>
  }

  /*Read the conf parameters */
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	f003 0303 	and.w	r3, r3, #3
 8004ec4:	2b02      	cmp	r3, #2
 8004ec6:	d103      	bne.n	8004ed0 <HAL_JPEG_GetInfo+0x30>
  {
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	2210      	movs	r2, #16
 8004ecc:	601a      	str	r2, [r3, #0]
 8004ece:	e017      	b.n	8004f00 <HAL_JPEG_GetInfo+0x60>
  }
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	f003 0303 	and.w	r3, r3, #3
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d103      	bne.n	8004ee6 <HAL_JPEG_GetInfo+0x46>
  {
    pInfo->ColorSpace = JPEG_GRAYSCALE_COLORSPACE;
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	601a      	str	r2, [r3, #0]
 8004ee4:	e00c      	b.n	8004f00 <HAL_JPEG_GetInfo+0x60>
  }
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	f003 0303 	and.w	r3, r3, #3
 8004ef0:	2b03      	cmp	r3, #3
 8004ef2:	d103      	bne.n	8004efc <HAL_JPEG_GetInfo+0x5c>
  {
    pInfo->ColorSpace = JPEG_CMYK_COLORSPACE;
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	2230      	movs	r2, #48	; 0x30
 8004ef8:	601a      	str	r2, [r3, #0]
 8004efa:	e001      	b.n	8004f00 <HAL_JPEG_GetInfo+0x60>
  }
  else
  {
    return HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	e060      	b.n	8004fc2 <HAL_JPEG_GetInfo+0x122>
  }

  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	0c1b      	lsrs	r3, r3, #16
 8004f08:	b29a      	uxth	r2, r3
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	609a      	str	r2, [r3, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	68db      	ldr	r3, [r3, #12]
 8004f14:	0c1b      	lsrs	r3, r3, #16
 8004f16:	b29a      	uxth	r2, r3
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	60da      	str	r2, [r3, #12]

  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	2b10      	cmp	r3, #16
 8004f22:	d003      	beq.n	8004f2c <HAL_JPEG_GetInfo+0x8c>
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	2b30      	cmp	r3, #48	; 0x30
 8004f2a:	d140      	bne.n	8004fae <HAL_JPEG_GetInfo+0x10e>
  {
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	691b      	ldr	r3, [r3, #16]
 8004f32:	091b      	lsrs	r3, r3, #4
 8004f34:	f003 030f 	and.w	r3, r3, #15
 8004f38:	617b      	str	r3, [r7, #20]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	695b      	ldr	r3, [r3, #20]
 8004f40:	091b      	lsrs	r3, r3, #4
 8004f42:	f003 030f 	and.w	r3, r3, #15
 8004f46:	613b      	str	r3, [r7, #16]
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	699b      	ldr	r3, [r3, #24]
 8004f4e:	091b      	lsrs	r3, r3, #4
 8004f50:	f003 030f 	and.w	r3, r3, #15
 8004f54:	60fb      	str	r3, [r7, #12]

    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d109      	bne.n	8004f70 <HAL_JPEG_GetInfo+0xd0>
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d106      	bne.n	8004f70 <HAL_JPEG_GetInfo+0xd0>
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d103      	bne.n	8004f70 <HAL_JPEG_GetInfo+0xd0>
    {
      pInfo->ChromaSubsampling = JPEG_422_SUBSAMPLING; /*16x8 block*/
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	2202      	movs	r2, #2
 8004f6c:	605a      	str	r2, [r3, #4]
 8004f6e:	e01d      	b.n	8004fac <HAL_JPEG_GetInfo+0x10c>
    }
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d109      	bne.n	8004f8a <HAL_JPEG_GetInfo+0xea>
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d106      	bne.n	8004f8a <HAL_JPEG_GetInfo+0xea>
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d103      	bne.n	8004f8a <HAL_JPEG_GetInfo+0xea>
    {
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	2200      	movs	r2, #0
 8004f86:	605a      	str	r2, [r3, #4]
 8004f88:	e010      	b.n	8004fac <HAL_JPEG_GetInfo+0x10c>
    }
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	2b03      	cmp	r3, #3
 8004f8e:	d109      	bne.n	8004fa4 <HAL_JPEG_GetInfo+0x104>
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d106      	bne.n	8004fa4 <HAL_JPEG_GetInfo+0x104>
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d103      	bne.n	8004fa4 <HAL_JPEG_GetInfo+0x104>
    {
      pInfo->ChromaSubsampling = JPEG_420_SUBSAMPLING;
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	605a      	str	r2, [r3, #4]
 8004fa2:	e003      	b.n	8004fac <HAL_JPEG_GetInfo+0x10c>
    }
    else /*Default is 4:4:4*/
    {
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	605a      	str	r2, [r3, #4]
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8004faa:	e003      	b.n	8004fb4 <HAL_JPEG_GetInfo+0x114>
 8004fac:	e002      	b.n	8004fb4 <HAL_JPEG_GetInfo+0x114>
    }
  }
  else
  {
    pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	605a      	str	r2, [r3, #4]
  }

  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	f001 fdef 	bl	8006b98 <JPEG_GetQuality>
 8004fba:	4602      	mov	r2, r0
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	611a      	str	r2, [r3, #16]

  /* Return function status */
  return HAL_OK;
 8004fc0:	2300      	movs	r3, #0
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3718      	adds	r7, #24
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}

08004fca <HAL_JPEG_Decode_DMA>:
  * @param  OutDataLength size in bytes of the Output buffer
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Decode_DMA(JPEG_HandleTypeDef *hjpeg, uint8_t *pDataIn, uint32_t InDataLength,
                                       uint8_t *pDataOutMCU, uint32_t OutDataLength)
{
 8004fca:	b580      	push	{r7, lr}
 8004fcc:	b084      	sub	sp, #16
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	60f8      	str	r0, [r7, #12]
 8004fd2:	60b9      	str	r1, [r7, #8]
 8004fd4:	607a      	str	r2, [r7, #4]
 8004fd6:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param((InDataLength >= 4UL));
  assert_param((OutDataLength >= 4UL));

  /* Check In/out buffer allocation and size */
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d005      	beq.n	8004fea <HAL_JPEG_Decode_DMA+0x20>
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d002      	beq.n	8004fea <HAL_JPEG_Decode_DMA+0x20>
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d101      	bne.n	8004fee <HAL_JPEG_Decode_DMA+0x24>
  {
    return HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	e04c      	b.n	8005088 <HAL_JPEG_Decode_DMA+0xbe>
  }

  /* Process Locked */
  __HAL_LOCK(hjpeg);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	d101      	bne.n	8004ffc <HAL_JPEG_Decode_DMA+0x32>
 8004ff8:	2302      	movs	r3, #2
 8004ffa:	e045      	b.n	8005088 <HAL_JPEG_Decode_DMA+0xbe>
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2201      	movs	r2, #1
 8005000:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  if (hjpeg->State == HAL_JPEG_STATE_READY)
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800500a:	b2db      	uxtb	r3, r3
 800500c:	2b01      	cmp	r3, #1
 800500e:	d134      	bne.n	800507a <HAL_JPEG_Decode_DMA+0xb0>
  {
    /*Change JPEG state*/
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2204      	movs	r2, #4
 8005014:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

    /*Set the Context to Decode with DMA*/
    hjpeg->Context &= ~(JPEG_CONTEXT_OPERATION_MASK | JPEG_CONTEXT_METHOD_MASK);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800501c:	f023 020f 	bic.w	r2, r3, #15
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	655a      	str	r2, [r3, #84]	; 0x54
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005028:	f043 020e 	orr.w	r2, r3, #14
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	655a      	str	r2, [r3, #84]	; 0x54

    /*Store In/out buffers pointers and size*/
    hjpeg->pJpegInBuffPtr = pDataIn;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	68ba      	ldr	r2, [r7, #8]
 8005034:	619a      	str	r2, [r3, #24]
    hjpeg->pJpegOutBuffPtr = pDataOutMCU;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	683a      	ldr	r2, [r7, #0]
 800503a:	61da      	str	r2, [r3, #28]
    hjpeg->InDataLength = InDataLength;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	629a      	str	r2, [r3, #40]	; 0x28
    hjpeg->OutDataLength = OutDataLength;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	69ba      	ldr	r2, [r7, #24]
 8005046:	62da      	str	r2, [r3, #44]	; 0x2c

    /*Reset In/out data counter */
    hjpeg->JpegInCount = 0;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2200      	movs	r2, #0
 800504c:	621a      	str	r2, [r3, #32]
    hjpeg->JpegOutCount = 0;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2200      	movs	r2, #0
 8005052:	625a      	str	r2, [r3, #36]	; 0x24

    /*Init decoding process*/
    JPEG_Init_Process(hjpeg);
 8005054:	68f8      	ldr	r0, [r7, #12]
 8005056:	f000 ff27 	bl	8005ea8 <JPEG_Init_Process>

    /* JPEG decoding process using DMA */
    if (JPEG_DMA_StartProcess(hjpeg) != HAL_OK)
 800505a:	68f8      	ldr	r0, [r7, #12]
 800505c:	f001 fa50 	bl	8006500 <JPEG_DMA_StartProcess>
 8005060:	4603      	mov	r3, r0
 8005062:	2b00      	cmp	r3, #0
 8005064:	d00f      	beq.n	8005086 <HAL_JPEG_Decode_DMA+0xbc>
    {
      /* Update State */
      hjpeg->State = HAL_JPEG_STATE_ERROR;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2206      	movs	r2, #6
 800506a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      /* Process Unlocked */
      __HAL_UNLOCK(hjpeg);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2200      	movs	r2, #0
 8005072:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      return HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	e006      	b.n	8005088 <HAL_JPEG_Decode_DMA+0xbe>
    }
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2200      	movs	r2, #0
 800507e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    return HAL_BUSY;
 8005082:	2302      	movs	r3, #2
 8005084:	e000      	b.n	8005088 <HAL_JPEG_Decode_DMA+0xbe>
  }
  /* Return function status */
  return HAL_OK;
 8005086:	2300      	movs	r3, #0
}
 8005088:	4618      	mov	r0, r3
 800508a:	3710      	adds	r7, #16
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}

08005090 <HAL_JPEG_Pause>:
  *                           JPEG_PAUSE_RESUME_OUTPUT: Pause Output processing
  *                           JPEG_PAUSE_RESUME_INPUT_OUTPUT: Pause Input and Output processing
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Pause(JPEG_HandleTypeDef *hjpeg, uint32_t XferSelection)
{
 8005090:	b480      	push	{r7}
 8005092:	b085      	sub	sp, #20
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
 8005098:	6039      	str	r1, [r7, #0]
  uint32_t mask = 0;
 800509a:	2300      	movs	r3, #0
 800509c:	60fb      	str	r3, [r7, #12]

  assert_param(IS_JPEG_PAUSE_RESUME_STATE(XferSelection));

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050a2:	f003 030c 	and.w	r3, r3, #12
 80050a6:	2b0c      	cmp	r3, #12
 80050a8:	d129      	bne.n	80050fe <HAL_JPEG_Pause+0x6e>
  {
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	f003 0301 	and.w	r3, r3, #1
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d009      	beq.n	80050c8 <HAL_JPEG_Pause+0x38>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050b8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	655a      	str	r2, [r3, #84]	; 0x54
      mask |= JPEG_DMA_IDMA;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80050c6:	60fb      	str	r3, [r7, #12]
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	f003 0302 	and.w	r3, r3, #2
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d009      	beq.n	80050e6 <HAL_JPEG_Pause+0x56>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050d6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	655a      	str	r2, [r3, #84]	; 0x54
      mask |= JPEG_DMA_ODMA;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80050e4:	60fb      	str	r3, [r7, #12]
    }
    JPEG_DISABLE_DMA(hjpeg, mask);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80050f2:	43da      	mvns	r2, r3
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	400a      	ands	r2, r1
 80050fa:	631a      	str	r2, [r3, #48]	; 0x30
 80050fc:	e02c      	b.n	8005158 <HAL_JPEG_Pause+0xc8>

  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005102:	f003 030c 	and.w	r3, r3, #12
 8005106:	2b08      	cmp	r3, #8
 8005108:	d126      	bne.n	8005158 <HAL_JPEG_Pause+0xc8>
  {

    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	f003 0301 	and.w	r3, r3, #1
 8005110:	2b00      	cmp	r3, #0
 8005112:	d009      	beq.n	8005128 <HAL_JPEG_Pause+0x98>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005118:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	655a      	str	r2, [r3, #84]	; 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f043 0306 	orr.w	r3, r3, #6
 8005126:	60fb      	str	r3, [r7, #12]
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	f003 0302 	and.w	r3, r3, #2
 800512e:	2b00      	cmp	r3, #0
 8005130:	d009      	beq.n	8005146 <HAL_JPEG_Pause+0xb6>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005136:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	655a      	str	r2, [r3, #84]	; 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8005144:	60fb      	str	r3, [r7, #12]
    }
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	43da      	mvns	r2, r3
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	400a      	ands	r2, r1
 8005156:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Nothing to do */
  }

  /* Return function status */
  return HAL_OK;
 8005158:	2300      	movs	r3, #0
}
 800515a:	4618      	mov	r0, r3
 800515c:	3714      	adds	r7, #20
 800515e:	46bd      	mov	sp, r7
 8005160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005164:	4770      	bx	lr

08005166 <HAL_JPEG_Resume>:
  *                           JPEG_PAUSE_RESUME_OUTPUT: Resume Output processing
  *                           JPEG_PAUSE_RESUME_INPUT_OUTPUT: Resume Input and Output processing
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Resume(JPEG_HandleTypeDef *hjpeg, uint32_t XferSelection)
{
 8005166:	b580      	push	{r7, lr}
 8005168:	b084      	sub	sp, #16
 800516a:	af00      	add	r7, sp, #0
 800516c:	6078      	str	r0, [r7, #4]
 800516e:	6039      	str	r1, [r7, #0]
  uint32_t mask = 0;
 8005170:	2300      	movs	r3, #0
 8005172:	60fb      	str	r3, [r7, #12]

  assert_param(IS_JPEG_PAUSE_RESUME_STATE(XferSelection));

  if ((hjpeg->Context & (JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT)) == 0UL)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005178:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800517c:	2b00      	cmp	r3, #0
 800517e:	d101      	bne.n	8005184 <HAL_JPEG_Resume+0x1e>
  {
    /* if nothing paused to resume return error*/
    return HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	e0a9      	b.n	80052d8 <HAL_JPEG_Resume+0x172>
  }

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005188:	f003 030c 	and.w	r3, r3, #12
 800518c:	2b0c      	cmp	r3, #12
 800518e:	d176      	bne.n	800527e <HAL_JPEG_Resume+0x118>
  {

    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	f003 0301 	and.w	r3, r3, #1
 8005196:	2b00      	cmp	r3, #0
 8005198:	d030      	beq.n	80051fc <HAL_JPEG_Resume+0x96>
    {
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800519e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	655a      	str	r2, [r3, #84]	; 0x54
      mask |= JPEG_DMA_IDMA;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80051ac:	60fb      	str	r3, [r7, #12]

      /*JPEG Input DMA transfer data number must be multiple of DMA buffer size
        as the destination is a 32 bits register */
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051b2:	f023 0203 	bic.w	r2, r3, #3
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	629a      	str	r2, [r3, #40]	; 0x28

      if (hjpeg->InDataLength > 0UL)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d01c      	beq.n	80051fc <HAL_JPEG_Resume+0x96>
      {
        /* Start DMA FIFO In transfer */
        if (HAL_DMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	699b      	ldr	r3, [r3, #24]
 80051ca:	4619      	mov	r1, r3
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	3340      	adds	r3, #64	; 0x40
 80051d2:	461a      	mov	r2, r3
                             hjpeg->InDataLength >> 2) != HAL_OK)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if (HAL_DMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 80051d8:	089b      	lsrs	r3, r3, #2
 80051da:	f7fd ff7f 	bl	80030dc <HAL_DMA_Start_IT>
 80051de:	4603      	mov	r3, r0
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d00b      	beq.n	80051fc <HAL_JPEG_Resume+0x96>
        {
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051e8:	f043 0204 	orr.w	r2, r3, #4
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	651a      	str	r2, [r3, #80]	; 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2206      	movs	r2, #6
 80051f4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          return HAL_ERROR;
 80051f8:	2301      	movs	r3, #1
 80051fa:	e06d      	b.n	80052d8 <HAL_JPEG_Resume+0x172>
        }
      }
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	f003 0302 	and.w	r3, r3, #2
 8005202:	2b00      	cmp	r3, #0
 8005204:	d030      	beq.n	8005268 <HAL_JPEG_Resume+0x102>
    {
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800520a:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005216:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800521a:	2b00      	cmp	r3, #0
 800521c:	d003      	beq.n	8005226 <HAL_JPEG_Resume+0xc0>
      {
        JPEG_DMA_PollResidualData(hjpeg);
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f001 fadc 	bl	80067dc <JPEG_DMA_PollResidualData>
 8005224:	e020      	b.n	8005268 <HAL_JPEG_Resume+0x102>
      }
      else
      {
        mask |= JPEG_DMA_ODMA;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800522c:	60fb      	str	r3, [r7, #12]

        /* Start DMA FIFO Out transfer */
        if (HAL_DMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	3344      	adds	r3, #68	; 0x44
 8005238:	4619      	mov	r1, r3
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	69db      	ldr	r3, [r3, #28]
 800523e:	461a      	mov	r2, r3
                             hjpeg->OutDataLength >> 2) != HAL_OK)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if (HAL_DMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8005244:	089b      	lsrs	r3, r3, #2
 8005246:	f7fd ff49 	bl	80030dc <HAL_DMA_Start_IT>
 800524a:	4603      	mov	r3, r0
 800524c:	2b00      	cmp	r3, #0
 800524e:	d00b      	beq.n	8005268 <HAL_JPEG_Resume+0x102>
        {
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005254:	f043 0204 	orr.w	r2, r3, #4
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	651a      	str	r2, [r3, #80]	; 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2206      	movs	r2, #6
 8005260:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          return HAL_ERROR;
 8005264:	2301      	movs	r3, #1
 8005266:	e037      	b.n	80052d8 <HAL_JPEG_Resume+0x172>
        }
      }

    }
    JPEG_ENABLE_DMA(hjpeg, mask);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	f403 52c0 	and.w	r2, r3, #6144	; 0x1800
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	430a      	orrs	r2, r1
 800527a:	631a      	str	r2, [r3, #48]	; 0x30
 800527c:	e02b      	b.n	80052d6 <HAL_JPEG_Resume+0x170>

  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005282:	f003 030c 	and.w	r3, r3, #12
 8005286:	2b08      	cmp	r3, #8
 8005288:	d125      	bne.n	80052d6 <HAL_JPEG_Resume+0x170>
  {
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	f003 0301 	and.w	r3, r3, #1
 8005290:	2b00      	cmp	r3, #0
 8005292:	d009      	beq.n	80052a8 <HAL_JPEG_Resume+0x142>
    {
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005298:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	655a      	str	r2, [r3, #84]	; 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f043 0306 	orr.w	r3, r3, #6
 80052a6:	60fb      	str	r3, [r7, #12]
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	f003 0302 	and.w	r3, r3, #2
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d009      	beq.n	80052c6 <HAL_JPEG_Resume+0x160>
    {
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052b6:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	655a      	str	r2, [r3, #84]	; 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 80052c4:	60fb      	str	r3, [r7, #12]
    }
    __HAL_JPEG_ENABLE_IT(hjpeg, mask);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	68fa      	ldr	r2, [r7, #12]
 80052d2:	430a      	orrs	r2, r1
 80052d4:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Nothing to do */
  }

  /* Return function status */
  return HAL_OK;
 80052d6:	2300      	movs	r3, #0
}
 80052d8:	4618      	mov	r0, r3
 80052da:	3710      	adds	r7, #16
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}

080052e0 <HAL_JPEG_ConfigInputBuffer>:
  * @param  pNewInputBuffer Pointer to the new input data buffer
  * @param  InDataLength Size in bytes of the new Input data buffer
  * @retval HAL status
  */
void HAL_JPEG_ConfigInputBuffer(JPEG_HandleTypeDef *hjpeg, uint8_t *pNewInputBuffer, uint32_t InDataLength)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b085      	sub	sp, #20
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	60f8      	str	r0, [r7, #12]
 80052e8:	60b9      	str	r1, [r7, #8]
 80052ea:	607a      	str	r2, [r7, #4]
  hjpeg->pJpegInBuffPtr =  pNewInputBuffer;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	68ba      	ldr	r2, [r7, #8]
 80052f0:	619a      	str	r2, [r3, #24]
  hjpeg->InDataLength = InDataLength;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	687a      	ldr	r2, [r7, #4]
 80052f6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80052f8:	bf00      	nop
 80052fa:	3714      	adds	r7, #20
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr

08005304 <HAL_JPEG_ConfigOutputBuffer>:
  * @param  pNewOutputBuffer Pointer to the new output data buffer
  * @param  OutDataLength Size in bytes of the new Output data buffer
  * @retval HAL status
  */
void HAL_JPEG_ConfigOutputBuffer(JPEG_HandleTypeDef *hjpeg, uint8_t *pNewOutputBuffer, uint32_t OutDataLength)
{
 8005304:	b480      	push	{r7}
 8005306:	b085      	sub	sp, #20
 8005308:	af00      	add	r7, sp, #0
 800530a:	60f8      	str	r0, [r7, #12]
 800530c:	60b9      	str	r1, [r7, #8]
 800530e:	607a      	str	r2, [r7, #4]
  hjpeg->pJpegOutBuffPtr = pNewOutputBuffer;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	68ba      	ldr	r2, [r7, #8]
 8005314:	61da      	str	r2, [r3, #28]
  hjpeg->OutDataLength = OutDataLength;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	687a      	ldr	r2, [r7, #4]
 800531a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800531c:	bf00      	nop
 800531e:	3714      	adds	r7, #20
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr

08005328 <HAL_JPEG_EncodeCpltCallback>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
__weak void HAL_JPEG_EncodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
{
 8005328:	b480      	push	{r7}
 800532a:	b083      	sub	sp, #12
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  UNUSED(hjpeg);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_EncodeCpltCallback could be implemented in the user file
   */
}
 8005330:	bf00      	nop
 8005332:	370c      	adds	r7, #12
 8005334:	46bd      	mov	sp, r7
 8005336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533a:	4770      	bx	lr

0800533c <HAL_JPEG_IRQHandler>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
void HAL_JPEG_IRQHandler(JPEG_HandleTypeDef *hjpeg)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b082      	sub	sp, #8
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  switch (hjpeg->State)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800534a:	b2db      	uxtb	r3, r3
 800534c:	3b03      	subs	r3, #3
 800534e:	2b01      	cmp	r3, #1
 8005350:	d813      	bhi.n	800537a <HAL_JPEG_IRQHandler+0x3e>
  {
    case HAL_JPEG_STATE_BUSY_ENCODING:
    case HAL_JPEG_STATE_BUSY_DECODING:
      /* continue JPEG data encoding/Decoding*/
      /* JPEG data processing : In/Out FIFO transfer*/
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005356:	f003 030c 	and.w	r3, r3, #12
 800535a:	2b08      	cmp	r3, #8
 800535c:	d103      	bne.n	8005366 <HAL_JPEG_IRQHandler+0x2a>
      {
        (void) JPEG_Process(hjpeg);
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f000 fe1e 	bl	8005fa0 <JPEG_Process>
      }
      else
      {
        /* Nothing to do */
      }
      break;
 8005364:	e00b      	b.n	800537e <HAL_JPEG_IRQHandler+0x42>
      else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800536a:	f003 030c 	and.w	r3, r3, #12
 800536e:	2b0c      	cmp	r3, #12
 8005370:	d105      	bne.n	800537e <HAL_JPEG_IRQHandler+0x42>
        JPEG_DMA_ContinueProcess(hjpeg);
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f001 f948 	bl	8006608 <JPEG_DMA_ContinueProcess>
      break;
 8005378:	e001      	b.n	800537e <HAL_JPEG_IRQHandler+0x42>

    default:
      break;
 800537a:	bf00      	nop
 800537c:	e000      	b.n	8005380 <HAL_JPEG_IRQHandler+0x44>
      break;
 800537e:	bf00      	nop
  }
}
 8005380:	bf00      	nop
 8005382:	3708      	adds	r7, #8
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}

08005388 <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 8005388:	b480      	push	{r7}
 800538a:	b08b      	sub	sp, #44	; 0x2c
 800538c:	af00      	add	r7, sp, #0
 800538e:	60f8      	str	r0, [r7, #12]
 8005390:	60b9      	str	r1, [r7, #8]
 8005392:	607a      	str	r2, [r7, #4]
 8005394:	603b      	str	r3, [r7, #0]
  uint32_t l;
  uint32_t code;
  uint32_t si;

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
 8005396:	2300      	movs	r3, #0
 8005398:	623b      	str	r3, [r7, #32]
  for (l = 0; l < 16UL; l++)
 800539a:	2300      	movs	r3, #0
 800539c:	61fb      	str	r3, [r7, #28]
 800539e:	e020      	b.n	80053e2 <JPEG_Bits_To_SizeCodes+0x5a>
  {
    i = (uint32_t)Bits[l];
 80053a0:	68fa      	ldr	r2, [r7, #12]
 80053a2:	69fb      	ldr	r3, [r7, #28]
 80053a4:	4413      	add	r3, r2
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	627b      	str	r3, [r7, #36]	; 0x24
    if ((p + i) > 256UL)
 80053aa:	6a3a      	ldr	r2, [r7, #32]
 80053ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ae:	4413      	add	r3, r2
 80053b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053b4:	d90f      	bls.n	80053d6 <JPEG_Bits_To_SizeCodes+0x4e>
    {
      /* check for table overflow */
      return HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	e055      	b.n	8005466 <JPEG_Bits_To_SizeCodes+0xde>
    }
    while (i != 0UL)
    {
      Huffsize[p] = (uint8_t) l + 1U;
 80053ba:	69fb      	ldr	r3, [r7, #28]
 80053bc:	b2da      	uxtb	r2, r3
 80053be:	68b9      	ldr	r1, [r7, #8]
 80053c0:	6a3b      	ldr	r3, [r7, #32]
 80053c2:	440b      	add	r3, r1
 80053c4:	3201      	adds	r2, #1
 80053c6:	b2d2      	uxtb	r2, r2
 80053c8:	701a      	strb	r2, [r3, #0]
      p++;
 80053ca:	6a3b      	ldr	r3, [r7, #32]
 80053cc:	3301      	adds	r3, #1
 80053ce:	623b      	str	r3, [r7, #32]
      i--;
 80053d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d2:	3b01      	subs	r3, #1
 80053d4:	627b      	str	r3, [r7, #36]	; 0x24
    while (i != 0UL)
 80053d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d1ee      	bne.n	80053ba <JPEG_Bits_To_SizeCodes+0x32>
  for (l = 0; l < 16UL; l++)
 80053dc:	69fb      	ldr	r3, [r7, #28]
 80053de:	3301      	adds	r3, #1
 80053e0:	61fb      	str	r3, [r7, #28]
 80053e2:	69fb      	ldr	r3, [r7, #28]
 80053e4:	2b0f      	cmp	r3, #15
 80053e6:	d9db      	bls.n	80053a0 <JPEG_Bits_To_SizeCodes+0x18>
    }
  }
  Huffsize[p] = 0;
 80053e8:	68ba      	ldr	r2, [r7, #8]
 80053ea:	6a3b      	ldr	r3, [r7, #32]
 80053ec:	4413      	add	r3, r2
 80053ee:	2200      	movs	r2, #0
 80053f0:	701a      	strb	r2, [r3, #0]
  *LastK = p;
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	6a3a      	ldr	r2, [r7, #32]
 80053f6:	601a      	str	r2, [r3, #0]

  /* Figure C.2: Generation of table of Huffman codes */
  code = 0;
 80053f8:	2300      	movs	r3, #0
 80053fa:	61bb      	str	r3, [r7, #24]
  si = Huffsize[0];
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	781b      	ldrb	r3, [r3, #0]
 8005400:	617b      	str	r3, [r7, #20]
  p = 0;
 8005402:	2300      	movs	r3, #0
 8005404:	623b      	str	r3, [r7, #32]
  while (Huffsize[p] != 0U)
 8005406:	e027      	b.n	8005458 <JPEG_Bits_To_SizeCodes+0xd0>
  {
    while (((uint32_t) Huffsize[p]) == si)
    {
      Huffcode[p] = code;
 8005408:	6a3b      	ldr	r3, [r7, #32]
 800540a:	009b      	lsls	r3, r3, #2
 800540c:	687a      	ldr	r2, [r7, #4]
 800540e:	4413      	add	r3, r2
 8005410:	69ba      	ldr	r2, [r7, #24]
 8005412:	601a      	str	r2, [r3, #0]
      p++;
 8005414:	6a3b      	ldr	r3, [r7, #32]
 8005416:	3301      	adds	r3, #1
 8005418:	623b      	str	r3, [r7, #32]
      code++;
 800541a:	69bb      	ldr	r3, [r7, #24]
 800541c:	3301      	adds	r3, #1
 800541e:	61bb      	str	r3, [r7, #24]
    while (((uint32_t) Huffsize[p]) == si)
 8005420:	68ba      	ldr	r2, [r7, #8]
 8005422:	6a3b      	ldr	r3, [r7, #32]
 8005424:	4413      	add	r3, r2
 8005426:	781b      	ldrb	r3, [r3, #0]
 8005428:	461a      	mov	r2, r3
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	4293      	cmp	r3, r2
 800542e:	d0eb      	beq.n	8005408 <JPEG_Bits_To_SizeCodes+0x80>
    }
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	2b1f      	cmp	r3, #31
 8005434:	d901      	bls.n	800543a <JPEG_Bits_To_SizeCodes+0xb2>
    {
      return HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	e015      	b.n	8005466 <JPEG_Bits_To_SizeCodes+0xde>
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 800543a:	2201      	movs	r2, #1
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	fa02 f303 	lsl.w	r3, r2, r3
 8005442:	69ba      	ldr	r2, [r7, #24]
 8005444:	429a      	cmp	r2, r3
 8005446:	d301      	bcc.n	800544c <JPEG_Bits_To_SizeCodes+0xc4>
    {
      return HAL_ERROR;
 8005448:	2301      	movs	r3, #1
 800544a:	e00c      	b.n	8005466 <JPEG_Bits_To_SizeCodes+0xde>
    }
    code <<= 1;
 800544c:	69bb      	ldr	r3, [r7, #24]
 800544e:	005b      	lsls	r3, r3, #1
 8005450:	61bb      	str	r3, [r7, #24]
    si++;
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	3301      	adds	r3, #1
 8005456:	617b      	str	r3, [r7, #20]
  while (Huffsize[p] != 0U)
 8005458:	68ba      	ldr	r2, [r7, #8]
 800545a:	6a3b      	ldr	r3, [r7, #32]
 800545c:	4413      	add	r3, r2
 800545e:	781b      	ldrb	r3, [r3, #0]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d1dd      	bne.n	8005420 <JPEG_Bits_To_SizeCodes+0x98>
  }
  /* Return function status */
  return HAL_OK;
 8005464:	2300      	movs	r3, #0
}
 8005466:	4618      	mov	r0, r3
 8005468:	372c      	adds	r7, #44	; 0x2c
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr

08005472 <JPEG_ACHuff_BitsVals_To_SizeCodes>:
  * @param  AC_SizeCodesTable pointer to AC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_ACHuff_BitsVals_To_SizeCodes(JPEG_ACHuffTableTypeDef *AC_BitsValsTable,
                                                           JPEG_AC_HuffCodeTableTypeDef *AC_SizeCodesTable)
{
 8005472:	b580      	push	{r7, lr}
 8005474:	f5ad 6da5 	sub.w	sp, sp, #1320	; 0x528
 8005478:	af00      	add	r7, sp, #0
 800547a:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 800547e:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8005482:	6018      	str	r0, [r3, #0]
 8005484:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8005488:	f5a3 63a5 	sub.w	r3, r3, #1320	; 0x528
 800548c:	6019      	str	r1, [r3, #0]
  uint32_t huffcode[257];
  uint32_t k;
  uint32_t l, lsb, msb;
  uint32_t lastK;

  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 800548e:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8005492:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8005496:	6818      	ldr	r0, [r3, #0]
 8005498:	f107 0308 	add.w	r3, r7, #8
 800549c:	f107 020c 	add.w	r2, r7, #12
 80054a0:	f507 6182 	add.w	r1, r7, #1040	; 0x410
 80054a4:	f7ff ff70 	bl	8005388 <JPEG_Bits_To_SizeCodes>
 80054a8:	4603      	mov	r3, r0
 80054aa:	f887 351f 	strb.w	r3, [r7, #1311]	; 0x51f
  if (error != HAL_OK)
 80054ae:	f897 351f 	ldrb.w	r3, [r7, #1311]	; 0x51f
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d002      	beq.n	80054bc <JPEG_ACHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 80054b6:	f897 351f 	ldrb.w	r3, [r7, #1311]	; 0x51f
 80054ba:	e075      	b.n	80055a8 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
  }

  /* Figure C.3: Ordering procedure for encoding procedure code tables */
  k = 0;
 80054bc:	2300      	movs	r3, #0
 80054be:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524

  while (k < lastK)
 80054c2:	e067      	b.n	8005594 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x122>
  {
    l = AC_BitsValsTable->HuffVal[k];
 80054c4:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 80054c8:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 80054cc:	681a      	ldr	r2, [r3, #0]
 80054ce:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 80054d2:	4413      	add	r3, r2
 80054d4:	3310      	adds	r3, #16
 80054d6:	781b      	ldrb	r3, [r3, #0]
 80054d8:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
    if (l == 0UL)
 80054dc:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d103      	bne.n	80054ec <JPEG_ACHuff_BitsVals_To_SizeCodes+0x7a>
    {
      l = 160; /*l = 0x00 EOB code*/
 80054e4:	23a0      	movs	r3, #160	; 0xa0
 80054e6:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
 80054ea:	e021      	b.n	8005530 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 80054ec:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 80054f0:	2bf0      	cmp	r3, #240	; 0xf0
 80054f2:	d103      	bne.n	80054fc <JPEG_ACHuff_BitsVals_To_SizeCodes+0x8a>
    {
      l = 161;
 80054f4:	23a1      	movs	r3, #161	; 0xa1
 80054f6:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
 80054fa:	e019      	b.n	8005530 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else
    {
      msb = (l & 0xF0UL) >> 4;
 80054fc:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 8005500:	091b      	lsrs	r3, r3, #4
 8005502:	f003 030f 	and.w	r3, r3, #15
 8005506:	f8c7 3518 	str.w	r3, [r7, #1304]	; 0x518
      lsb = (l & 0x0FUL);
 800550a:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 800550e:	f003 030f 	and.w	r3, r3, #15
 8005512:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
      l = (msb * 10UL) + lsb - 1UL;
 8005516:	f8d7 2518 	ldr.w	r2, [r7, #1304]	; 0x518
 800551a:	4613      	mov	r3, r2
 800551c:	009b      	lsls	r3, r3, #2
 800551e:	4413      	add	r3, r2
 8005520:	005b      	lsls	r3, r3, #1
 8005522:	461a      	mov	r2, r3
 8005524:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8005528:	4413      	add	r3, r2
 800552a:	3b01      	subs	r3, #1
 800552c:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
    }
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 8005530:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 8005534:	2ba1      	cmp	r3, #161	; 0xa1
 8005536:	d901      	bls.n	800553c <JPEG_ACHuff_BitsVals_To_SizeCodes+0xca>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 8005538:	2301      	movs	r3, #1
 800553a:	e035      	b.n	80055a8 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
    }
    else
    {
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 800553c:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8005540:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 8005544:	f8d7 2524 	ldr.w	r2, [r7, #1316]	; 0x524
 8005548:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800554c:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8005550:	f5a3 63a5 	sub.w	r3, r3, #1320	; 0x528
 8005554:	6819      	ldr	r1, [r3, #0]
 8005556:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 800555a:	3328      	adds	r3, #40	; 0x28
 800555c:	009b      	lsls	r3, r3, #2
 800555e:	440b      	add	r3, r1
 8005560:	605a      	str	r2, [r3, #4]
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8005562:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8005566:	f5a3 728c 	sub.w	r2, r3, #280	; 0x118
 800556a:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 800556e:	4413      	add	r3, r2
 8005570:	781b      	ldrb	r3, [r3, #0]
 8005572:	3b01      	subs	r3, #1
 8005574:	b2d9      	uxtb	r1, r3
 8005576:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 800557a:	f5a3 63a5 	sub.w	r3, r3, #1320	; 0x528
 800557e:	681a      	ldr	r2, [r3, #0]
 8005580:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 8005584:	4413      	add	r3, r2
 8005586:	460a      	mov	r2, r1
 8005588:	701a      	strb	r2, [r3, #0]
      k++;
 800558a:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 800558e:	3301      	adds	r3, #1
 8005590:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
  while (k < lastK)
 8005594:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8005598:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f8d7 2524 	ldr.w	r2, [r7, #1316]	; 0x524
 80055a2:	429a      	cmp	r2, r3
 80055a4:	d38e      	bcc.n	80054c4 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 80055a6:	2300      	movs	r3, #0
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	f507 67a5 	add.w	r7, r7, #1320	; 0x528
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}

080055b2 <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 80055b2:	b580      	push	{r7, lr}
 80055b4:	f5ad 6da4 	sub.w	sp, sp, #1312	; 0x520
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 80055be:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 80055c2:	6018      	str	r0, [r3, #0]
 80055c4:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 80055c8:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 80055cc:	6019      	str	r1, [r3, #0]
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 80055ce:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 80055d2:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 80055d6:	6818      	ldr	r0, [r3, #0]
 80055d8:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 80055dc:	f107 0208 	add.w	r2, r7, #8
 80055e0:	f207 410c 	addw	r1, r7, #1036	; 0x40c
 80055e4:	f7ff fed0 	bl	8005388 <JPEG_Bits_To_SizeCodes>
 80055e8:	4603      	mov	r3, r0
 80055ea:	f887 351b 	strb.w	r3, [r7, #1307]	; 0x51b
  if (error != HAL_OK)
 80055ee:	f897 351b 	ldrb.w	r3, [r7, #1307]	; 0x51b
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d002      	beq.n	80055fc <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 80055f6:	f897 351b 	ldrb.w	r3, [r7, #1307]	; 0x51b
 80055fa:	e048      	b.n	800568e <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;
 80055fc:	2300      	movs	r3, #0
 80055fe:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c

  while (k < lastK)
 8005602:	e03d      	b.n	8005680 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xce>
  {
    l = DC_BitsValsTable->HuffVal[k];
 8005604:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8005608:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 800560c:	681a      	ldr	r2, [r3, #0]
 800560e:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 8005612:	4413      	add	r3, r2
 8005614:	3310      	adds	r3, #16
 8005616:	781b      	ldrb	r3, [r3, #0]
 8005618:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 800561c:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8005620:	2b0b      	cmp	r3, #11
 8005622:	d901      	bls.n	8005628 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x76>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 8005624:	2301      	movs	r3, #1
 8005626:	e032      	b.n	800568e <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
    }
    else
    {
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8005628:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 800562c:	f5a3 63a3 	sub.w	r3, r3, #1304	; 0x518
 8005630:	f8d7 251c 	ldr.w	r2, [r7, #1308]	; 0x51c
 8005634:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005638:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 800563c:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 8005640:	6819      	ldr	r1, [r3, #0]
 8005642:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8005646:	3302      	adds	r3, #2
 8005648:	009b      	lsls	r3, r3, #2
 800564a:	440b      	add	r3, r1
 800564c:	605a      	str	r2, [r3, #4]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 800564e:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8005652:	f5a3 728a 	sub.w	r2, r3, #276	; 0x114
 8005656:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 800565a:	4413      	add	r3, r2
 800565c:	781b      	ldrb	r3, [r3, #0]
 800565e:	3b01      	subs	r3, #1
 8005660:	b2d9      	uxtb	r1, r3
 8005662:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8005666:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 800566a:	681a      	ldr	r2, [r3, #0]
 800566c:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8005670:	4413      	add	r3, r2
 8005672:	460a      	mov	r2, r1
 8005674:	701a      	strb	r2, [r3, #0]
      k++;
 8005676:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 800567a:	3301      	adds	r3, #1
 800567c:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c
  while (k < lastK)
 8005680:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 8005684:	f8d7 251c 	ldr.w	r2, [r7, #1308]	; 0x51c
 8005688:	429a      	cmp	r2, r3
 800568a:	d3bb      	bcc.n	8005604 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 800568c:	2300      	movs	r3, #0
}
 800568e:	4618      	mov	r0, r3
 8005690:	f507 67a4 	add.w	r7, r7, #1312	; 0x520
 8005694:	46bd      	mov	sp, r7
 8005696:	bd80      	pop	{r7, pc}

08005698 <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b09a      	sub	sp, #104	; 0x68
 800569c:	af00      	add	r7, sp, #0
 800569e:	60f8      	str	r0, [r7, #12]
 80056a0:	60b9      	str	r1, [r7, #8]
 80056a2:	607a      	str	r2, [r7, #4]
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f503 63f8 	add.w	r3, r3, #1984	; 0x7c0
 80056ac:	687a      	ldr	r2, [r7, #4]
 80056ae:	429a      	cmp	r2, r3
 80056b0:	d106      	bne.n	80056c0 <JPEG_Set_HuffDC_Mem+0x28>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f503 63f8 	add.w	r3, r3, #1984	; 0x7c0
 80056ba:	3318      	adds	r3, #24
 80056bc:	663b      	str	r3, [r7, #96]	; 0x60
 80056be:	e00f      	b.n	80056e0 <JPEG_Set_HuffDC_Mem+0x48>
  }
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f503 63fc 	add.w	r3, r3, #2016	; 0x7e0
 80056c8:	687a      	ldr	r2, [r7, #4]
 80056ca:	429a      	cmp	r2, r3
 80056cc:	d106      	bne.n	80056dc <JPEG_Set_HuffDC_Mem+0x44>
  {
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f503 63fc 	add.w	r3, r3, #2016	; 0x7e0
 80056d6:	3318      	adds	r3, #24
 80056d8:	663b      	str	r3, [r7, #96]	; 0x60
 80056da:	e001      	b.n	80056e0 <JPEG_Set_HuffDC_Mem+0x48>
  }
  else
  {
    return HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	e059      	b.n	8005794 <JPEG_Set_HuffDC_Mem+0xfc>
  }

  if (HuffTableDC != NULL)
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d055      	beq.n	8005792 <JPEG_Set_HuffDC_Mem+0xfa>
  {
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 80056e6:	f107 0314 	add.w	r3, r7, #20
 80056ea:	4619      	mov	r1, r3
 80056ec:	68b8      	ldr	r0, [r7, #8]
 80056ee:	f7ff ff60 	bl	80055b2 <JPEG_DCHuff_BitsVals_To_SizeCodes>
 80056f2:	4603      	mov	r3, r0
 80056f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if (error != HAL_OK)
 80056f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d002      	beq.n	8005706 <JPEG_Set_HuffDC_Mem+0x6e>
    {
      return  error;
 8005700:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005704:	e046      	b.n	8005794 <JPEG_Set_HuffDC_Mem+0xfc>
    }
    addressDef = address;
 8005706:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005708:	65bb      	str	r3, [r7, #88]	; 0x58
    *addressDef = 0x0FFF0FFF;
 800570a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800570c:	f06f 22f0 	mvn.w	r2, #4026593280	; 0xf000f000
 8005710:	601a      	str	r2, [r3, #0]
    addressDef++;
 8005712:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005714:	3304      	adds	r3, #4
 8005716:	65bb      	str	r3, [r7, #88]	; 0x58
    *addressDef = 0x0FFF0FFF;
 8005718:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800571a:	f06f 22f0 	mvn.w	r2, #4026593280	; 0xf000f000
 800571e:	601a      	str	r2, [r3, #0]

    i = JPEG_DC_HUFF_TABLE_SIZE;
 8005720:	230c      	movs	r3, #12
 8005722:	667b      	str	r3, [r7, #100]	; 0x64
    while (i > 1UL)
 8005724:	e032      	b.n	800578c <JPEG_Set_HuffDC_Mem+0xf4>
    {
      i--;
 8005726:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005728:	3b01      	subs	r3, #1
 800572a:	667b      	str	r3, [r7, #100]	; 0x64
      address --;
 800572c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800572e:	3b04      	subs	r3, #4
 8005730:	663b      	str	r3, [r7, #96]	; 0x60
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8005732:	f107 0214 	add.w	r2, r7, #20
 8005736:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005738:	4413      	add	r3, r2
 800573a:	781b      	ldrb	r3, [r3, #0]
 800573c:	021b      	lsls	r3, r3, #8
 800573e:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8005742:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005744:	3302      	adds	r3, #2
 8005746:	009b      	lsls	r3, r3, #2
 8005748:	3368      	adds	r3, #104	; 0x68
 800574a:	443b      	add	r3, r7
 800574c:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8005750:	b2db      	uxtb	r3, r3
 8005752:	4313      	orrs	r3, r2
 8005754:	657b      	str	r3, [r7, #84]	; 0x54
                                                                                   0xFFUL);
      i--;
 8005756:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005758:	3b01      	subs	r3, #1
 800575a:	667b      	str	r3, [r7, #100]	; 0x64
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800575c:	f107 0214 	add.w	r2, r7, #20
 8005760:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005762:	4413      	add	r3, r2
 8005764:	781b      	ldrb	r3, [r3, #0]
 8005766:	021b      	lsls	r3, r3, #8
 8005768:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800576c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800576e:	3302      	adds	r3, #2
 8005770:	009b      	lsls	r3, r3, #2
 8005772:	3368      	adds	r3, #104	; 0x68
 8005774:	443b      	add	r3, r7
 8005776:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800577a:	b2db      	uxtb	r3, r3
 800577c:	4313      	orrs	r3, r2
 800577e:	653b      	str	r3, [r7, #80]	; 0x50
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 8005780:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005782:	041a      	lsls	r2, r3, #16
 8005784:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005786:	431a      	orrs	r2, r3
 8005788:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800578a:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 800578c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800578e:	2b01      	cmp	r3, #1
 8005790:	d8c9      	bhi.n	8005726 <JPEG_Set_HuffDC_Mem+0x8e>
    }
  }

  /* Return function status */
  return HAL_OK;
 8005792:	2300      	movs	r3, #0
}
 8005794:	4618      	mov	r0, r3
 8005796:	3768      	adds	r7, #104	; 0x68
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}

0800579c <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	f5ad 7d56 	sub.w	sp, sp, #856	; 0x358
 80057a2:	af00      	add	r7, sp, #0
 80057a4:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80057a8:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 80057ac:	6018      	str	r0, [r3, #0]
 80057ae:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80057b2:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 80057b6:	6019      	str	r1, [r3, #0]
 80057b8:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80057bc:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 80057c0:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 80057c2:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80057c6:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057d2:	f507 7256 	add.w	r2, r7, #856	; 0x358
 80057d6:	f5a2 7255 	sub.w	r2, r2, #852	; 0x354
 80057da:	6812      	ldr	r2, [r2, #0]
 80057dc:	429a      	cmp	r2, r3
 80057de:	d10c      	bne.n	80057fa <JPEG_Set_HuffAC_Mem+0x5e>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 80057e0:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80057e4:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057f0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80057f4:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 80057f8:	e01d      	b.n	8005836 <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 80057fa:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80057fe:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
 800580a:	f507 7256 	add.w	r2, r7, #856	; 0x358
 800580e:	f5a2 7255 	sub.w	r2, r2, #852	; 0x354
 8005812:	6812      	ldr	r2, [r2, #0]
 8005814:	429a      	cmp	r2, r3
 8005816:	d10c      	bne.n	8005832 <JPEG_Set_HuffAC_Mem+0x96>
  {
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8005818:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800581c:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
 8005828:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800582c:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 8005830:	e001      	b.n	8005836 <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else
  {
    return HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	e0a8      	b.n	8005988 <JPEG_Set_HuffAC_Mem+0x1ec>
  }

  if (HuffTableAC != NULL)
 8005836:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800583a:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	2b00      	cmp	r3, #0
 8005842:	f000 80a0 	beq.w	8005986 <JPEG_Set_HuffAC_Mem+0x1ea>
  {
    error = JPEG_ACHuff_BitsVals_To_SizeCodes(HuffTableAC, &acSizeCodesTable);
 8005846:	f107 0214 	add.w	r2, r7, #20
 800584a:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800584e:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 8005852:	4611      	mov	r1, r2
 8005854:	6818      	ldr	r0, [r3, #0]
 8005856:	f7ff fe0c 	bl	8005472 <JPEG_ACHuff_BitsVals_To_SizeCodes>
 800585a:	4603      	mov	r3, r0
 800585c:	f887 334b 	strb.w	r3, [r7, #843]	; 0x34b
    if (error != HAL_OK)
 8005860:	f897 334b 	ldrb.w	r3, [r7, #843]	; 0x34b
 8005864:	2b00      	cmp	r3, #0
 8005866:	d002      	beq.n	800586e <JPEG_Set_HuffAC_Mem+0xd2>
    {
      return  error;
 8005868:	f897 334b 	ldrb.w	r3, [r7, #843]	; 0x34b
 800586c:	e08c      	b.n	8005988 <JPEG_Set_HuffAC_Mem+0x1ec>
    }
    /* Default values settings: 162:167 FFFh , 168:175 FD0h_FD7h */
    /* Locations 162:175 of each AC table contain information used internally by the core */

    addressDef = address;
 800586e:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8005872:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    for (i = 0; i < 3UL; i++)
 8005876:	2300      	movs	r3, #0
 8005878:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 800587c:	e00e      	b.n	800589c <JPEG_Set_HuffAC_Mem+0x100>
    {
      *addressDef = 0x0FFF0FFF;
 800587e:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8005882:	f06f 22f0 	mvn.w	r2, #4026593280	; 0xf000f000
 8005886:	601a      	str	r2, [r3, #0]
      addressDef++;
 8005888:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 800588c:	3304      	adds	r3, #4
 800588e:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    for (i = 0; i < 3UL; i++)
 8005892:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8005896:	3301      	adds	r3, #1
 8005898:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 800589c:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 80058a0:	2b02      	cmp	r3, #2
 80058a2:	d9ec      	bls.n	800587e <JPEG_Set_HuffAC_Mem+0xe2>
    }
    *addressDef = 0x0FD10FD0;
 80058a4:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 80058a8:	4a3a      	ldr	r2, [pc, #232]	; (8005994 <JPEG_Set_HuffAC_Mem+0x1f8>)
 80058aa:	601a      	str	r2, [r3, #0]
    addressDef++;
 80058ac:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 80058b0:	3304      	adds	r3, #4
 80058b2:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    *addressDef = 0x0FD30FD2;
 80058b6:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 80058ba:	4a37      	ldr	r2, [pc, #220]	; (8005998 <JPEG_Set_HuffAC_Mem+0x1fc>)
 80058bc:	601a      	str	r2, [r3, #0]
    addressDef++;
 80058be:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 80058c2:	3304      	adds	r3, #4
 80058c4:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    *addressDef = 0x0FD50FD4;
 80058c8:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 80058cc:	4a33      	ldr	r2, [pc, #204]	; (800599c <JPEG_Set_HuffAC_Mem+0x200>)
 80058ce:	601a      	str	r2, [r3, #0]
    addressDef++;
 80058d0:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 80058d4:	3304      	adds	r3, #4
 80058d6:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    *addressDef = 0x0FD70FD6;
 80058da:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 80058de:	4a30      	ldr	r2, [pc, #192]	; (80059a0 <JPEG_Set_HuffAC_Mem+0x204>)
 80058e0:	601a      	str	r2, [r3, #0]
    /* end of Locations 162:175  */


    i = JPEG_AC_HUFF_TABLE_SIZE;
 80058e2:	23a2      	movs	r3, #162	; 0xa2
 80058e4:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
    while (i > 1UL)
 80058e8:	e049      	b.n	800597e <JPEG_Set_HuffAC_Mem+0x1e2>
    {
      i--;
 80058ea:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 80058ee:	3b01      	subs	r3, #1
 80058f0:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
      address--;
 80058f4:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 80058f8:	3b04      	subs	r3, #4
 80058fa:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 80058fe:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8005902:	f5a3 7251 	sub.w	r2, r3, #836	; 0x344
 8005906:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 800590a:	4413      	add	r3, r2
 800590c:	781b      	ldrb	r3, [r3, #0]
 800590e:	021b      	lsls	r3, r3, #8
 8005910:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8005914:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8005918:	f5a3 7151 	sub.w	r1, r3, #836	; 0x344
 800591c:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8005920:	3328      	adds	r3, #40	; 0x28
 8005922:	009b      	lsls	r3, r3, #2
 8005924:	440b      	add	r3, r1
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	b2db      	uxtb	r3, r3
 800592a:	4313      	orrs	r3, r2
 800592c:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
                                                                                   0xFFUL);
      i--;
 8005930:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8005934:	3b01      	subs	r3, #1
 8005936:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800593a:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800593e:	f5a3 7251 	sub.w	r2, r3, #836	; 0x344
 8005942:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8005946:	4413      	add	r3, r2
 8005948:	781b      	ldrb	r3, [r3, #0]
 800594a:	021b      	lsls	r3, r3, #8
 800594c:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8005950:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8005954:	f5a3 7151 	sub.w	r1, r3, #836	; 0x344
 8005958:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 800595c:	3328      	adds	r3, #40	; 0x28
 800595e:	009b      	lsls	r3, r3, #2
 8005960:	440b      	add	r3, r1
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	b2db      	uxtb	r3, r3
 8005966:	4313      	orrs	r3, r2
 8005968:	f8c7 3340 	str.w	r3, [r7, #832]	; 0x340
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 800596c:	f8d7 3344 	ldr.w	r3, [r7, #836]	; 0x344
 8005970:	041a      	lsls	r2, r3, #16
 8005972:	f8d7 3340 	ldr.w	r3, [r7, #832]	; 0x340
 8005976:	431a      	orrs	r2, r3
 8005978:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 800597c:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 800597e:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8005982:	2b01      	cmp	r3, #1
 8005984:	d8b1      	bhi.n	80058ea <JPEG_Set_HuffAC_Mem+0x14e>
    }
  }

  /* Return function status */
  return HAL_OK;
 8005986:	2300      	movs	r3, #0
}
 8005988:	4618      	mov	r0, r3
 800598a:	f507 7756 	add.w	r7, r7, #856	; 0x358
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}
 8005992:	bf00      	nop
 8005994:	0fd10fd0 	.word	0x0fd10fd0
 8005998:	0fd30fd2 	.word	0x0fd30fd2
 800599c:	0fd50fd4 	.word	0x0fd50fd4
 80059a0:	0fd70fd6 	.word	0x0fd70fd6

080059a4 <JPEG_Set_HuffEnc_Mem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static HAL_StatusTypeDef JPEG_Set_HuffEnc_Mem(JPEG_HandleTypeDef *hjpeg)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b084      	sub	sp, #16
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef error;

  JPEG_Set_Huff_DHTMem(hjpeg);
 80059ac:	6878      	ldr	r0, [r7, #4]
 80059ae:	f000 f84d 	bl	8005a4c <JPEG_Set_Huff_DHTMem>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC0));
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 80059ba:	461a      	mov	r2, r3
 80059bc:	491f      	ldr	r1, [pc, #124]	; (8005a3c <JPEG_Set_HuffEnc_Mem+0x98>)
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f7ff feec 	bl	800579c <JPEG_Set_HuffAC_Mem>
 80059c4:	4603      	mov	r3, r0
 80059c6:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 80059c8:	7bfb      	ldrb	r3, [r7, #15]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d001      	beq.n	80059d2 <JPEG_Set_HuffEnc_Mem+0x2e>
  {
    return  error;
 80059ce:	7bfb      	ldrb	r3, [r7, #15]
 80059d0:	e030      	b.n	8005a34 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC1));
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 80059da:	461a      	mov	r2, r3
 80059dc:	4918      	ldr	r1, [pc, #96]	; (8005a40 <JPEG_Set_HuffEnc_Mem+0x9c>)
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f7ff fedc 	bl	800579c <JPEG_Set_HuffAC_Mem>
 80059e4:	4603      	mov	r3, r0
 80059e6:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 80059e8:	7bfb      	ldrb	r3, [r7, #15]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d001      	beq.n	80059f2 <JPEG_Set_HuffEnc_Mem+0x4e>
  {
    return  error;
 80059ee:	7bfb      	ldrb	r3, [r7, #15]
 80059f0:	e020      	b.n	8005a34 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC0);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f503 63f8 	add.w	r3, r3, #1984	; 0x7c0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 80059fa:	461a      	mov	r2, r3
 80059fc:	4911      	ldr	r1, [pc, #68]	; (8005a44 <JPEG_Set_HuffEnc_Mem+0xa0>)
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f7ff fe4a 	bl	8005698 <JPEG_Set_HuffDC_Mem>
 8005a04:	4603      	mov	r3, r0
 8005a06:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8005a08:	7bfb      	ldrb	r3, [r7, #15]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d001      	beq.n	8005a12 <JPEG_Set_HuffEnc_Mem+0x6e>
  {
    return  error;
 8005a0e:	7bfb      	ldrb	r3, [r7, #15]
 8005a10:	e010      	b.n	8005a34 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC1);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f503 63fc 	add.w	r3, r3, #2016	; 0x7e0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 8005a1a:	461a      	mov	r2, r3
 8005a1c:	490a      	ldr	r1, [pc, #40]	; (8005a48 <JPEG_Set_HuffEnc_Mem+0xa4>)
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f7ff fe3a 	bl	8005698 <JPEG_Set_HuffDC_Mem>
 8005a24:	4603      	mov	r3, r0
 8005a26:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8005a28:	7bfb      	ldrb	r3, [r7, #15]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d001      	beq.n	8005a32 <JPEG_Set_HuffEnc_Mem+0x8e>
  {
    return  error;
 8005a2e:	7bfb      	ldrb	r3, [r7, #15]
 8005a30:	e000      	b.n	8005a34 <JPEG_Set_HuffEnc_Mem+0x90>
  }
  /* Return function status */
  return HAL_OK;
 8005a32:	2300      	movs	r3, #0
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	3710      	adds	r7, #16
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}
 8005a3c:	08029d00 	.word	0x08029d00
 8005a40:	08029db4 	.word	0x08029db4
 8005a44:	08029cc8 	.word	0x08029cc8
 8005a48:	08029ce4 	.word	0x08029ce4

08005a4c <JPEG_Set_Huff_DHTMem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Set_Huff_DHTMem(JPEG_HandleTypeDef *hjpeg)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b08b      	sub	sp, #44	; 0x2c
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  JPEG_ACHuffTableTypeDef *HuffTableAC0 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable;
 8005a54:	4b80      	ldr	r3, [pc, #512]	; (8005c58 <JPEG_Set_Huff_DHTMem+0x20c>)
 8005a56:	61fb      	str	r3, [r7, #28]
  JPEG_ACHuffTableTypeDef *HuffTableAC1 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable;
 8005a58:	4b80      	ldr	r3, [pc, #512]	; (8005c5c <JPEG_Set_Huff_DHTMem+0x210>)
 8005a5a:	61bb      	str	r3, [r7, #24]
  JPEG_DCHuffTableTypeDef *HuffTableDC0 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable;
 8005a5c:	4b80      	ldr	r3, [pc, #512]	; (8005c60 <JPEG_Set_Huff_DHTMem+0x214>)
 8005a5e:	617b      	str	r3, [r7, #20]
  JPEG_DCHuffTableTypeDef *HuffTableDC1 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable;
 8005a60:	4b80      	ldr	r3, [pc, #512]	; (8005c64 <JPEG_Set_Huff_DHTMem+0x218>)
 8005a62:	613b      	str	r3, [r7, #16]
  uint32_t value, index;
  __IO uint32_t *address;

  /* DC0 Huffman Table : BITS*/
  /* DC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address to DHTMEM + 3*/
  address = (hjpeg->Instance->DHTMEM + 3);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8005a6c:	330c      	adds	r3, #12
 8005a6e:	623b      	str	r3, [r7, #32]
  index = 16;
 8005a70:	2310      	movs	r3, #16
 8005a72:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8005a74:	e01d      	b.n	8005ab2 <JPEG_Set_Huff_DHTMem+0x66>
  {

    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8005a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a78:	3b01      	subs	r3, #1
 8005a7a:	697a      	ldr	r2, [r7, #20]
 8005a7c:	5cd3      	ldrb	r3, [r2, r3]
 8005a7e:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8005a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a82:	3b02      	subs	r3, #2
 8005a84:	6979      	ldr	r1, [r7, #20]
 8005a86:	5ccb      	ldrb	r3, [r1, r3]
 8005a88:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8005a8a:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8005a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a8e:	3b03      	subs	r3, #3
 8005a90:	6979      	ldr	r1, [r7, #20]
 8005a92:	5ccb      	ldrb	r3, [r1, r3]
 8005a94:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8005a96:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->Bits[index - 4UL] & 0xFFUL);
 8005a98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a9a:	3a04      	subs	r2, #4
 8005a9c:	6979      	ldr	r1, [r7, #20]
 8005a9e:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8005aa0:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8005aa2:	6a3b      	ldr	r3, [r7, #32]
 8005aa4:	601a      	str	r2, [r3, #0]
    address--;
 8005aa6:	6a3b      	ldr	r3, [r7, #32]
 8005aa8:	3b04      	subs	r3, #4
 8005aaa:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8005aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aae:	3b04      	subs	r3, #4
 8005ab0:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8005ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab4:	2b03      	cmp	r3, #3
 8005ab6:	d8de      	bhi.n	8005a76 <JPEG_Set_Huff_DHTMem+0x2a>

  }
  /* DC0 Huffman Table : Val*/
  /* DC0 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +4 to DHTMEM + 6 */
  address = (hjpeg->Instance->DHTMEM + 6);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8005ac0:	3318      	adds	r3, #24
 8005ac2:	623b      	str	r3, [r7, #32]
  index = 12;
 8005ac4:	230c      	movs	r3, #12
 8005ac6:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8005ac8:	e021      	b.n	8005b0e <JPEG_Set_Huff_DHTMem+0xc2>
  {
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8005aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005acc:	3b01      	subs	r3, #1
 8005ace:	697a      	ldr	r2, [r7, #20]
 8005ad0:	4413      	add	r3, r2
 8005ad2:	7c1b      	ldrb	r3, [r3, #16]
 8005ad4:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8005ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad8:	3b02      	subs	r3, #2
 8005ada:	6979      	ldr	r1, [r7, #20]
 8005adc:	440b      	add	r3, r1
 8005ade:	7c1b      	ldrb	r3, [r3, #16]
 8005ae0:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8005ae2:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8005ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae6:	3b03      	subs	r3, #3
 8005ae8:	6979      	ldr	r1, [r7, #20]
 8005aea:	440b      	add	r3, r1
 8005aec:	7c1b      	ldrb	r3, [r3, #16]
 8005aee:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8005af0:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->HuffVal[index - 4UL] & 0xFFUL);
 8005af2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005af4:	3a04      	subs	r2, #4
 8005af6:	6979      	ldr	r1, [r7, #20]
 8005af8:	440a      	add	r2, r1
 8005afa:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8005afc:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8005afe:	6a3b      	ldr	r3, [r7, #32]
 8005b00:	601a      	str	r2, [r3, #0]
    address--;
 8005b02:	6a3b      	ldr	r3, [r7, #32]
 8005b04:	3b04      	subs	r3, #4
 8005b06:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8005b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b0a:	3b04      	subs	r3, #4
 8005b0c:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8005b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b10:	2b03      	cmp	r3, #3
 8005b12:	d8da      	bhi.n	8005aca <JPEG_Set_Huff_DHTMem+0x7e>
  }

  /* AC0 Huffman Table : BITS*/
  /* AC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 7 to DHTMEM + 10*/
  address = (hjpeg->Instance->DHTMEM + 10UL);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8005b1c:	3328      	adds	r3, #40	; 0x28
 8005b1e:	623b      	str	r3, [r7, #32]
  index = 16;
 8005b20:	2310      	movs	r3, #16
 8005b22:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8005b24:	e01d      	b.n	8005b62 <JPEG_Set_Huff_DHTMem+0x116>
  {

    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8005b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b28:	3b01      	subs	r3, #1
 8005b2a:	69fa      	ldr	r2, [r7, #28]
 8005b2c:	5cd3      	ldrb	r3, [r2, r3]
 8005b2e:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8005b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b32:	3b02      	subs	r3, #2
 8005b34:	69f9      	ldr	r1, [r7, #28]
 8005b36:	5ccb      	ldrb	r3, [r1, r3]
 8005b38:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8005b3a:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8005b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b3e:	3b03      	subs	r3, #3
 8005b40:	69f9      	ldr	r1, [r7, #28]
 8005b42:	5ccb      	ldrb	r3, [r1, r3]
 8005b44:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8005b46:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->Bits[index - 4UL] & 0xFFUL);
 8005b48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b4a:	3a04      	subs	r2, #4
 8005b4c:	69f9      	ldr	r1, [r7, #28]
 8005b4e:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8005b50:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8005b52:	6a3b      	ldr	r3, [r7, #32]
 8005b54:	601a      	str	r2, [r3, #0]
    address--;
 8005b56:	6a3b      	ldr	r3, [r7, #32]
 8005b58:	3b04      	subs	r3, #4
 8005b5a:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8005b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b5e:	3b04      	subs	r3, #4
 8005b60:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8005b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b64:	2b03      	cmp	r3, #3
 8005b66:	d8de      	bhi.n	8005b26 <JPEG_Set_Huff_DHTMem+0xda>

  }
  /* AC0 Huffman Table : Val*/
  /* AC0 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 11 to DHTMEM + 51 */
  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 51) belong to AC0 VALS table */
  address = (hjpeg->Instance->DHTMEM + 51);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8005b70:	33cc      	adds	r3, #204	; 0xcc
 8005b72:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 8005b74:	6a3b      	ldr	r3, [r7, #32]
 8005b76:	681a      	ldr	r2, [r3, #0]
 8005b78:	4b3b      	ldr	r3, [pc, #236]	; (8005c68 <JPEG_Set_Huff_DHTMem+0x21c>)
 8005b7a:	4013      	ands	r3, r2
 8005b7c:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 8005b7e:	69fb      	ldr	r3, [r7, #28]
 8005b80:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8005b84:	021a      	lsls	r2, r3, #8
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	69fa      	ldr	r2, [r7, #28]
 8005b8c:	f892 20b0 	ldrb.w	r2, [r2, #176]	; 0xb0
 8005b90:	4313      	orrs	r3, r2
 8005b92:	60fb      	str	r3, [r7, #12]
  *address = value;
 8005b94:	6a3b      	ldr	r3, [r7, #32]
 8005b96:	68fa      	ldr	r2, [r7, #12]
 8005b98:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC0 huffman values */
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 8005b9a:	6a3b      	ldr	r3, [r7, #32]
 8005b9c:	3b04      	subs	r3, #4
 8005b9e:	623b      	str	r3, [r7, #32]
  index = 160;
 8005ba0:	23a0      	movs	r3, #160	; 0xa0
 8005ba2:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8005ba4:	e021      	b.n	8005bea <JPEG_Set_Huff_DHTMem+0x19e>
  {
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8005ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba8:	3b01      	subs	r3, #1
 8005baa:	69fa      	ldr	r2, [r7, #28]
 8005bac:	4413      	add	r3, r2
 8005bae:	7c1b      	ldrb	r3, [r3, #16]
 8005bb0:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8005bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb4:	3b02      	subs	r3, #2
 8005bb6:	69f9      	ldr	r1, [r7, #28]
 8005bb8:	440b      	add	r3, r1
 8005bba:	7c1b      	ldrb	r3, [r3, #16]
 8005bbc:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8005bbe:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8005bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc2:	3b03      	subs	r3, #3
 8005bc4:	69f9      	ldr	r1, [r7, #28]
 8005bc6:	440b      	add	r3, r1
 8005bc8:	7c1b      	ldrb	r3, [r3, #16]
 8005bca:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8005bcc:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 8005bce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bd0:	3a04      	subs	r2, #4
 8005bd2:	69f9      	ldr	r1, [r7, #28]
 8005bd4:	440a      	add	r2, r1
 8005bd6:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8005bd8:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8005bda:	6a3b      	ldr	r3, [r7, #32]
 8005bdc:	601a      	str	r2, [r3, #0]
    address--;
 8005bde:	6a3b      	ldr	r3, [r7, #32]
 8005be0:	3b04      	subs	r3, #4
 8005be2:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8005be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be6:	3b04      	subs	r3, #4
 8005be8:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8005bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bec:	2b03      	cmp	r3, #3
 8005bee:	d8da      	bhi.n	8005ba6 <JPEG_Set_Huff_DHTMem+0x15a>
  }

  /* DC1 Huffman Table : BITS*/
  /* DC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM + 51 base address to DHTMEM + 55*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 51) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 51);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8005bf8:	33cc      	adds	r3, #204	; 0xcc
 8005bfa:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 8005bfc:	6a3b      	ldr	r3, [r7, #32]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	b29b      	uxth	r3, r3
 8005c02:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	785b      	ldrb	r3, [r3, #1]
 8005c08:	061a      	lsls	r2, r3, #24
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	431a      	orrs	r2, r3
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	781b      	ldrb	r3, [r3, #0]
 8005c12:	041b      	lsls	r3, r3, #16
 8005c14:	4313      	orrs	r3, r2
 8005c16:	60fb      	str	r3, [r7, #12]
  *address = value;
 8005c18:	6a3b      	ldr	r3, [r7, #32]
 8005c1a:	68fa      	ldr	r2, [r7, #12]
 8005c1c:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 55) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 55);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8005c26:	33dc      	adds	r3, #220	; 0xdc
 8005c28:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 8005c2a:	6a3b      	ldr	r3, [r7, #32]
 8005c2c:	681a      	ldr	r2, [r3, #0]
 8005c2e:	4b0e      	ldr	r3, [pc, #56]	; (8005c68 <JPEG_Set_Huff_DHTMem+0x21c>)
 8005c30:	4013      	ands	r3, r2
 8005c32:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->Bits[14] & 0xFFUL);
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	7bdb      	ldrb	r3, [r3, #15]
 8005c38:	021a      	lsls	r2, r3, #8
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	4313      	orrs	r3, r2
 8005c3e:	693a      	ldr	r2, [r7, #16]
 8005c40:	7b92      	ldrb	r2, [r2, #14]
 8005c42:	4313      	orrs	r3, r2
 8005c44:	60fb      	str	r3, [r7, #12]
  *address = value;
 8005c46:	6a3b      	ldr	r3, [r7, #32]
 8005c48:	68fa      	ldr	r2, [r7, #12]
 8005c4a:	601a      	str	r2, [r3, #0]

  /*continue setting 12 DC1 huffman Bits from DHTMEM + 54 down to DHTMEM + 52*/
  address--;
 8005c4c:	6a3b      	ldr	r3, [r7, #32]
 8005c4e:	3b04      	subs	r3, #4
 8005c50:	623b      	str	r3, [r7, #32]
  index = 12;
 8005c52:	230c      	movs	r3, #12
 8005c54:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8005c56:	e027      	b.n	8005ca8 <JPEG_Set_Huff_DHTMem+0x25c>
 8005c58:	08029d00 	.word	0x08029d00
 8005c5c:	08029db4 	.word	0x08029db4
 8005c60:	08029cc8 	.word	0x08029cc8
 8005c64:	08029ce4 	.word	0x08029ce4
 8005c68:	ffff0000 	.word	0xffff0000
  {

    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8005c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c6e:	3301      	adds	r3, #1
 8005c70:	693a      	ldr	r2, [r7, #16]
 8005c72:	5cd3      	ldrb	r3, [r2, r3]
 8005c74:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 8005c76:	6939      	ldr	r1, [r7, #16]
 8005c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c7a:	440b      	add	r3, r1
 8005c7c:	781b      	ldrb	r3, [r3, #0]
 8005c7e:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8005c80:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8005c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c84:	3b01      	subs	r3, #1
 8005c86:	6939      	ldr	r1, [r7, #16]
 8005c88:	5ccb      	ldrb	r3, [r1, r3]
 8005c8a:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 8005c8c:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->Bits[index - 2UL] & 0xFFUL);
 8005c8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c90:	3a02      	subs	r2, #2
 8005c92:	6939      	ldr	r1, [r7, #16]
 8005c94:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8005c96:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8005c98:	6a3b      	ldr	r3, [r7, #32]
 8005c9a:	601a      	str	r2, [r3, #0]
    address--;
 8005c9c:	6a3b      	ldr	r3, [r7, #32]
 8005c9e:	3b04      	subs	r3, #4
 8005ca0:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8005ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca4:	3b04      	subs	r3, #4
 8005ca6:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8005ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005caa:	2b03      	cmp	r3, #3
 8005cac:	d8de      	bhi.n	8005c6c <JPEG_Set_Huff_DHTMem+0x220>

  }
  /* DC1 Huffman Table : Val*/
  /* DC1 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +55 to DHTMEM + 58 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 55) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 55);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8005cb6:	33dc      	adds	r3, #220	; 0xdc
 8005cb8:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 8005cba:	6a3b      	ldr	r3, [r7, #32]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	b29b      	uxth	r3, r3
 8005cc0:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	7c5b      	ldrb	r3, [r3, #17]
 8005cc6:	061a      	lsls	r2, r3, #24
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	431a      	orrs	r2, r3
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	7c1b      	ldrb	r3, [r3, #16]
 8005cd0:	041b      	lsls	r3, r3, #16
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 8005cd6:	6a3b      	ldr	r3, [r7, #32]
 8005cd8:	68fa      	ldr	r2, [r7, #12]
 8005cda:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 58) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 58);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8005ce4:	33e8      	adds	r3, #232	; 0xe8
 8005ce6:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000UL;
 8005ce8:	6a3b      	ldr	r3, [r7, #32]
 8005cea:	681a      	ldr	r2, [r3, #0]
 8005cec:	4b6d      	ldr	r3, [pc, #436]	; (8005ea4 <JPEG_Set_Huff_DHTMem+0x458>)
 8005cee:	4013      	ands	r3, r2
 8005cf0:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	7edb      	ldrb	r3, [r3, #27]
 8005cf6:	021a      	lsls	r2, r3, #8
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	693a      	ldr	r2, [r7, #16]
 8005cfe:	7e92      	ldrb	r2, [r2, #26]
 8005d00:	4313      	orrs	r3, r2
 8005d02:	60fb      	str	r3, [r7, #12]
  *address = value;
 8005d04:	6a3b      	ldr	r3, [r7, #32]
 8005d06:	68fa      	ldr	r2, [r7, #12]
 8005d08:	601a      	str	r2, [r3, #0]

  /*continue setting 8 DC1 huffman val from DHTMEM + 57 down to DHTMEM + 56*/
  address--;
 8005d0a:	6a3b      	ldr	r3, [r7, #32]
 8005d0c:	3b04      	subs	r3, #4
 8005d0e:	623b      	str	r3, [r7, #32]
  index = 8;
 8005d10:	2308      	movs	r3, #8
 8005d12:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8005d14:	e021      	b.n	8005d5a <JPEG_Set_Huff_DHTMem+0x30e>
  {
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8005d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d18:	3301      	adds	r3, #1
 8005d1a:	693a      	ldr	r2, [r7, #16]
 8005d1c:	4413      	add	r3, r2
 8005d1e:	7c1b      	ldrb	r3, [r3, #16]
 8005d20:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 8005d22:	6939      	ldr	r1, [r7, #16]
 8005d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d26:	440b      	add	r3, r1
 8005d28:	3310      	adds	r3, #16
 8005d2a:	781b      	ldrb	r3, [r3, #0]
 8005d2c:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8005d2e:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8005d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d32:	3b01      	subs	r3, #1
 8005d34:	6939      	ldr	r1, [r7, #16]
 8005d36:	440b      	add	r3, r1
 8005d38:	7c1b      	ldrb	r3, [r3, #16]
 8005d3a:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 8005d3c:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->HuffVal[index - 2UL] & 0xFFUL);
 8005d3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d40:	3a02      	subs	r2, #2
 8005d42:	6939      	ldr	r1, [r7, #16]
 8005d44:	440a      	add	r2, r1
 8005d46:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8005d48:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8005d4a:	6a3b      	ldr	r3, [r7, #32]
 8005d4c:	601a      	str	r2, [r3, #0]
    address--;
 8005d4e:	6a3b      	ldr	r3, [r7, #32]
 8005d50:	3b04      	subs	r3, #4
 8005d52:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8005d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d56:	3b04      	subs	r3, #4
 8005d58:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8005d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d5c:	2b03      	cmp	r3, #3
 8005d5e:	d8da      	bhi.n	8005d16 <JPEG_Set_Huff_DHTMem+0x2ca>
  }

  /* AC1 Huffman Table : BITS*/
  /* AC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 58 to DHTMEM + 62*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 58) belong to AC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 58);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8005d68:	33e8      	adds	r3, #232	; 0xe8
 8005d6a:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 8005d6c:	6a3b      	ldr	r3, [r7, #32]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	b29b      	uxth	r3, r3
 8005d72:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 8005d74:	69bb      	ldr	r3, [r7, #24]
 8005d76:	785b      	ldrb	r3, [r3, #1]
 8005d78:	061a      	lsls	r2, r3, #24
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	431a      	orrs	r2, r3
 8005d7e:	69bb      	ldr	r3, [r7, #24]
 8005d80:	781b      	ldrb	r3, [r3, #0]
 8005d82:	041b      	lsls	r3, r3, #16
 8005d84:	4313      	orrs	r3, r2
 8005d86:	60fb      	str	r3, [r7, #12]
  *address = value;
 8005d88:	6a3b      	ldr	r3, [r7, #32]
 8005d8a:	68fa      	ldr	r2, [r7, #12]
 8005d8c:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 62) belong to Bits Val table */
  address = (hjpeg->Instance->DHTMEM + 62);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8005d96:	33f8      	adds	r3, #248	; 0xf8
 8005d98:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 8005d9a:	6a3b      	ldr	r3, [r7, #32]
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	4b41      	ldr	r3, [pc, #260]	; (8005ea4 <JPEG_Set_Huff_DHTMem+0x458>)
 8005da0:	4013      	ands	r3, r2
 8005da2:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 8005da4:	69bb      	ldr	r3, [r7, #24]
 8005da6:	7bdb      	ldrb	r3, [r3, #15]
 8005da8:	021a      	lsls	r2, r3, #8
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	4313      	orrs	r3, r2
 8005dae:	69ba      	ldr	r2, [r7, #24]
 8005db0:	7b92      	ldrb	r2, [r2, #14]
 8005db2:	4313      	orrs	r3, r2
 8005db4:	60fb      	str	r3, [r7, #12]
  *address = value;
 8005db6:	6a3b      	ldr	r3, [r7, #32]
 8005db8:	68fa      	ldr	r2, [r7, #12]
 8005dba:	601a      	str	r2, [r3, #0]

  /*continue setting 12 AC1 huffman Bits from DHTMEM + 61 down to DHTMEM + 59*/
  address--;
 8005dbc:	6a3b      	ldr	r3, [r7, #32]
 8005dbe:	3b04      	subs	r3, #4
 8005dc0:	623b      	str	r3, [r7, #32]
  index = 12;
 8005dc2:	230c      	movs	r3, #12
 8005dc4:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8005dc6:	e01d      	b.n	8005e04 <JPEG_Set_Huff_DHTMem+0x3b8>
  {

    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8005dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dca:	3301      	adds	r3, #1
 8005dcc:	69ba      	ldr	r2, [r7, #24]
 8005dce:	5cd3      	ldrb	r3, [r2, r3]
 8005dd0:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 8005dd2:	69b9      	ldr	r1, [r7, #24]
 8005dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd6:	440b      	add	r3, r1
 8005dd8:	781b      	ldrb	r3, [r3, #0]
 8005dda:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8005ddc:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8005dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de0:	3b01      	subs	r3, #1
 8005de2:	69b9      	ldr	r1, [r7, #24]
 8005de4:	5ccb      	ldrb	r3, [r1, r3]
 8005de6:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 8005de8:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->Bits[index - 2UL] & 0xFFUL);
 8005dea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dec:	3a02      	subs	r2, #2
 8005dee:	69b9      	ldr	r1, [r7, #24]
 8005df0:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8005df2:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8005df4:	6a3b      	ldr	r3, [r7, #32]
 8005df6:	601a      	str	r2, [r3, #0]
    address--;
 8005df8:	6a3b      	ldr	r3, [r7, #32]
 8005dfa:	3b04      	subs	r3, #4
 8005dfc:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8005dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e00:	3b04      	subs	r3, #4
 8005e02:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8005e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e06:	2b03      	cmp	r3, #3
 8005e08:	d8de      	bhi.n	8005dc8 <JPEG_Set_Huff_DHTMem+0x37c>

  }
  /* AC1 Huffman Table : Val*/
  /* AC1 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 62 to DHTMEM + 102 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 62) belong to AC1 VALS table */
  address = (hjpeg->Instance->DHTMEM + 62);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8005e12:	33f8      	adds	r3, #248	; 0xf8
 8005e14:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 8005e16:	6a3b      	ldr	r3, [r7, #32]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	b29b      	uxth	r3, r3
 8005e1c:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 8005e1e:	69bb      	ldr	r3, [r7, #24]
 8005e20:	7c5b      	ldrb	r3, [r3, #17]
 8005e22:	061a      	lsls	r2, r3, #24
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	431a      	orrs	r2, r3
 8005e28:	69bb      	ldr	r3, [r7, #24]
 8005e2a:	7c1b      	ldrb	r3, [r3, #16]
 8005e2c:	041b      	lsls	r3, r3, #16
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 8005e32:	6a3b      	ldr	r3, [r7, #32]
 8005e34:	68fa      	ldr	r2, [r7, #12]
 8005e36:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC1 huffman values from DHTMEM + 63 to DHTMEM+102 */
  address = (hjpeg->Instance->DHTMEM + 102);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8005e40:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 8005e44:	623b      	str	r3, [r7, #32]
  index = 160;
 8005e46:	23a0      	movs	r3, #160	; 0xa0
 8005e48:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8005e4a:	e021      	b.n	8005e90 <JPEG_Set_Huff_DHTMem+0x444>
  {
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8005e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e4e:	3301      	adds	r3, #1
 8005e50:	69ba      	ldr	r2, [r7, #24]
 8005e52:	4413      	add	r3, r2
 8005e54:	7c1b      	ldrb	r3, [r3, #16]
 8005e56:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 8005e58:	69b9      	ldr	r1, [r7, #24]
 8005e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e5c:	440b      	add	r3, r1
 8005e5e:	3310      	adds	r3, #16
 8005e60:	781b      	ldrb	r3, [r3, #0]
 8005e62:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8005e64:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8005e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e68:	3b01      	subs	r3, #1
 8005e6a:	69b9      	ldr	r1, [r7, #24]
 8005e6c:	440b      	add	r3, r1
 8005e6e:	7c1b      	ldrb	r3, [r3, #16]
 8005e70:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 8005e72:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 8005e74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e76:	3a02      	subs	r2, #2
 8005e78:	69b9      	ldr	r1, [r7, #24]
 8005e7a:	440a      	add	r2, r1
 8005e7c:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8005e7e:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8005e80:	6a3b      	ldr	r3, [r7, #32]
 8005e82:	601a      	str	r2, [r3, #0]
    address--;
 8005e84:	6a3b      	ldr	r3, [r7, #32]
 8005e86:	3b04      	subs	r3, #4
 8005e88:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8005e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e8c:	3b04      	subs	r3, #4
 8005e8e:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8005e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e92:	2b03      	cmp	r3, #3
 8005e94:	d8da      	bhi.n	8005e4c <JPEG_Set_Huff_DHTMem+0x400>
  }

}
 8005e96:	bf00      	nop
 8005e98:	bf00      	nop
 8005e9a:	372c      	adds	r7, #44	; 0x2c
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea2:	4770      	bx	lr
 8005ea4:	ffff0000 	.word	0xffff0000

08005ea8 <JPEG_Init_Process>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Init_Process(JPEG_HandleTypeDef *hjpeg)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b083      	sub	sp, #12
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  /*Reset pause*/
  hjpeg->Context &= (~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT));
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005eb4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	655a      	str	r2, [r3, #84]	; 0x54

  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ec0:	f003 0303 	and.w	r3, r3, #3
 8005ec4:	2b02      	cmp	r3, #2
 8005ec6:	d108      	bne.n	8005eda <JPEG_Init_Process+0x32>
  {
    /*Set JPEG Codec to Decoding mode */
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	685a      	ldr	r2, [r3, #4]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f042 0208 	orr.w	r2, r2, #8
 8005ed6:	605a      	str	r2, [r3, #4]
 8005ed8:	e007      	b.n	8005eea <JPEG_Init_Process+0x42>
  }
  else /* JPEG_CONTEXT_ENCODE */
  {
    /*Set JPEG Codec to Encoding mode */
    hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_DE;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	685a      	ldr	r2, [r3, #4]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f022 0208 	bic.w	r2, r2, #8
 8005ee8:	605a      	str	r2, [r3, #4]
  }

  /*Stop JPEG processing */
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	681a      	ldr	r2, [r3, #0]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f022 0201 	bic.w	r2, r2, #1
 8005ef8:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 8005f08:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable All DMA requests */
  JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_MASK);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
 8005f18:	631a      	str	r2, [r3, #48]	; 0x30
  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005f28:	631a      	str	r2, [r3, #48]	; 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f38:	631a      	str	r2, [r3, #48]	; 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8005f48:	639a      	str	r2, [r3, #56]	; 0x38

  /*Start Encoding/Decoding*/
  hjpeg->Instance->CONFR0 |=  JPEG_CONFR0_START;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	681a      	ldr	r2, [r3, #0]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f042 0201 	orr.w	r2, r2, #1
 8005f58:	601a      	str	r2, [r3, #0]

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f5e:	f003 030c 	and.w	r3, r3, #12
 8005f62:	2b08      	cmp	r3, #8
 8005f64:	d108      	bne.n	8005f78 <JPEG_Init_Process+0xd0>
  {
    /*Enable IN/OUT, end of Conversation, and end of header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f042 026e 	orr.w	r2, r2, #110	; 0x6e
 8005f74:	631a      	str	r2, [r3, #48]	; 0x30
  }
  else
  {
    /* Nothing to do */
  }
}
 8005f76:	e00d      	b.n	8005f94 <JPEG_Init_Process+0xec>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f7c:	f003 030c 	and.w	r3, r3, #12
 8005f80:	2b0c      	cmp	r3, #12
 8005f82:	d107      	bne.n	8005f94 <JPEG_Init_Process+0xec>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8005f92:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005f94:	bf00      	nop
 8005f96:	370c      	adds	r7, #12
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr

08005fa0 <JPEG_Process>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if the process has ends else JPEG_PROCESS_ONGOING
  */
static uint32_t JPEG_Process(JPEG_HandleTypeDef *hjpeg)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b084      	sub	sp, #16
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;

  /*End of header processing flag */
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fac:	f003 0303 	and.w	r3, r3, #3
 8005fb0:	2b02      	cmp	r3, #2
 8005fb2:	d125      	bne.n	8006000 <JPEG_Process+0x60>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d01e      	beq.n	8006000 <JPEG_Process+0x60>
    {
      /*Call Header parsing complete callback */
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	3304      	adds	r3, #4
 8005fc6:	4619      	mov	r1, r3
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	f7fe ff69 	bl	8004ea0 <HAL_JPEG_GetInfo>
      /* Reset the ImageQuality */
      hjpeg->Conf.ImageQuality = 0;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	615a      	str	r2, [r3, #20]

      /*Call Info Ready callback */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->InfoReadyCallback(hjpeg, &hjpeg->Conf);
#else
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	3304      	adds	r3, #4
 8005fd8:	4619      	mov	r1, r3
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f00a feb2 	bl	8010d44 <HAL_JPEG_InfoReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fee:	631a      	str	r2, [r3, #48]	; 0x30

      /* Clear header processing done flag */
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ffe:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  /*Input FIFO status handling*/
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006004:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006008:	2b00      	cmp	r3, #0
 800600a:	d116      	bne.n	800603a <JPEG_Process+0x9a>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFTF) != 0UL)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006012:	f003 0302 	and.w	r3, r3, #2
 8006016:	2b00      	cmp	r3, #0
 8006018:	d004      	beq.n	8006024 <JPEG_Process+0x84>
    {
      /*Input FIFO threshold flag */
      /*JPEG_FIFO_TH_SIZE words can be written in */
      JPEG_ReadInputData(hjpeg, JPEG_FIFO_TH_SIZE);
 800601a:	2104      	movs	r1, #4
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	f000 f988 	bl	8006332 <JPEG_ReadInputData>
 8006022:	e00a      	b.n	800603a <JPEG_Process+0x9a>
    }
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFNFF) != 0UL)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800602a:	f003 0304 	and.w	r3, r3, #4
 800602e:	2b00      	cmp	r3, #0
 8006030:	d003      	beq.n	800603a <JPEG_Process+0x9a>
    {
      /*Input FIFO Not Full flag */
      /*32-bit value can be written in */
      JPEG_ReadInputData(hjpeg, 1);
 8006032:	2101      	movs	r1, #1
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f000 f97c 	bl	8006332 <JPEG_ReadInputData>
    }
  }


  /*Output FIFO flag handling*/
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800603e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006042:	2b00      	cmp	r3, #0
 8006044:	d116      	bne.n	8006074 <JPEG_Process+0xd4>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFTF) != 0UL)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800604c:	f003 0308 	and.w	r3, r3, #8
 8006050:	2b00      	cmp	r3, #0
 8006052:	d004      	beq.n	800605e <JPEG_Process+0xbe>
    {
      /*Output FIFO threshold flag */
      /*JPEG_FIFO_TH_SIZE words can be read out */
      JPEG_StoreOutputData(hjpeg, JPEG_FIFO_TH_SIZE);
 8006054:	2104      	movs	r1, #4
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f000 f864 	bl	8006124 <JPEG_StoreOutputData>
 800605c:	e00a      	b.n	8006074 <JPEG_Process+0xd4>
    }
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006064:	f003 0310 	and.w	r3, r3, #16
 8006068:	2b00      	cmp	r3, #0
 800606a:	d003      	beq.n	8006074 <JPEG_Process+0xd4>
    {
      /*Output FIFO Not Empty flag */
      /*32-bit value can be read out */
      JPEG_StoreOutputData(hjpeg, 1);
 800606c:	2101      	movs	r1, #1
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f000 f858 	bl	8006124 <JPEG_StoreOutputData>
      /* Nothing to do */
    }
  }

  /*End of Conversion handling :i.e EOC flag is high and OFTF low and OFNEF low*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800607a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800607e:	2b20      	cmp	r3, #32
 8006080:	d14b      	bne.n	800611a <JPEG_Process+0x17a>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	681a      	ldr	r2, [r3, #0]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f022 0201 	bic.w	r2, r2, #1
 8006090:	601a      	str	r2, [r3, #0]

    if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006096:	f003 030c 	and.w	r3, r3, #12
 800609a:	2b08      	cmp	r3, #8
 800609c:	d107      	bne.n	80060ae <JPEG_Process+0x10e>
    {
      /* Disable All Interrupts */
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 80060ac:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Clear all flags */
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80060bc:	639a      	str	r2, [r3, #56]	; 0x38

    /*Call End of conversion callback */
    if (hjpeg->JpegOutCount > 0UL)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d00a      	beq.n	80060dc <JPEG_Process+0x13c>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	69d9      	ldr	r1, [r3, #28]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ce:	461a      	mov	r2, r3
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	f00a ff07 	bl	8010ee4 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2200      	movs	r2, #0
 80060da:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /*Reset Context Operation*/
    tmpContext = hjpeg->Context;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060e0:	60fb      	str	r3, [r7, #12]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060e6:	f403 4282 	and.w	r2, r3, #16640	; 0x4100
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2200      	movs	r2, #0
 80060f2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2201      	movs	r2, #1
 80060fa:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	f003 0303 	and.w	r3, r3, #3
 8006104:	2b02      	cmp	r3, #2
 8006106:	d103      	bne.n	8006110 <JPEG_Process+0x170>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	f00a ff53 	bl	8010fb4 <HAL_JPEG_DecodeCpltCallback>
 800610e:	e002      	b.n	8006116 <JPEG_Process+0x176>
    else /* JPEG_CONTEXT_ENCODE */
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->EncodeCpltCallback(hjpeg);
#else
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f7ff f909 	bl	8005328 <HAL_JPEG_EncodeCpltCallback>
#endif
    }

    return JPEG_PROCESS_DONE;
 8006116:	2301      	movs	r3, #1
 8006118:	e000      	b.n	800611c <JPEG_Process+0x17c>
  }


  return JPEG_PROCESS_ONGOING;
 800611a:	2300      	movs	r3, #0
}
 800611c:	4618      	mov	r0, r3
 800611e:	3710      	adds	r7, #16
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}

08006124 <JPEG_StoreOutputData>:
  *         the configuration information for JPEG module
  * @param  nbOutputWords Number of output words (of 32 bits) ready from the JPEG peripheral
  * @retval None
  */
static void JPEG_StoreOutputData(JPEG_HandleTypeDef *hjpeg, uint32_t nbOutputWords)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b086      	sub	sp, #24
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
 800612c:	6039      	str	r1, [r7, #0]
  uint32_t index;
  uint32_t nb_words;
  uint32_t nb_bytes;
  uint32_t dataword;

  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	009b      	lsls	r3, r3, #2
 800613a:	440b      	add	r3, r1
 800613c:	429a      	cmp	r2, r3
 800613e:	d34b      	bcc.n	80061d8 <JPEG_StoreOutputData+0xb4>
  {
    for (index = 0; index < nbOutputWords; index++)
 8006140:	2300      	movs	r3, #0
 8006142:	617b      	str	r3, [r7, #20]
 8006144:	e031      	b.n	80061aa <JPEG_StoreOutputData+0x86>
    {
      /*Transfer 32 bits from the JPEG output FIFO*/
      dataword = hjpeg->Instance->DOR;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800614c:	60bb      	str	r3, [r7, #8]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	69da      	ldr	r2, [r3, #28]
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006156:	4413      	add	r3, r2
 8006158:	68ba      	ldr	r2, [r7, #8]
 800615a:	b2d2      	uxtb	r2, r2
 800615c:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	0a19      	lsrs	r1, r3, #8
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	69da      	ldr	r2, [r3, #28]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800616a:	3301      	adds	r3, #1
 800616c:	4413      	add	r3, r2
 800616e:	b2ca      	uxtb	r2, r1
 8006170:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	0c19      	lsrs	r1, r3, #16
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	69da      	ldr	r2, [r3, #28]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800617e:	3302      	adds	r3, #2
 8006180:	4413      	add	r3, r2
 8006182:	b2ca      	uxtb	r2, r1
 8006184:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	0e19      	lsrs	r1, r3, #24
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	69da      	ldr	r2, [r3, #28]
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006192:	3303      	adds	r3, #3
 8006194:	4413      	add	r3, r2
 8006196:	b2ca      	uxtb	r2, r1
 8006198:	701a      	strb	r2, [r3, #0]
      hjpeg->JpegOutCount += 4UL;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800619e:	1d1a      	adds	r2, r3, #4
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	625a      	str	r2, [r3, #36]	; 0x24
    for (index = 0; index < nbOutputWords; index++)
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	3301      	adds	r3, #1
 80061a8:	617b      	str	r3, [r7, #20]
 80061aa:	697a      	ldr	r2, [r7, #20]
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	429a      	cmp	r2, r3
 80061b0:	d3c9      	bcc.n	8006146 <JPEG_StoreOutputData+0x22>
    }
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ba:	429a      	cmp	r2, r3
 80061bc:	f040 80b5 	bne.w	800632a <JPEG_StoreOutputData+0x206>
    {
      /*Output Buffer is full, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	69d9      	ldr	r1, [r3, #28]
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c8:	461a      	mov	r2, r3
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f00a fe8a 	bl	8010ee4 <HAL_JPEG_DataReadyCallback>
#endif /*USE_HAL_JPEG_REGISTER_CALLBACKS*/
      hjpeg->JpegOutCount = 0;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2200      	movs	r2, #0
 80061d4:	625a      	str	r2, [r3, #36]	; 0x24
  }
  else
  {
    /* Nothing to do */
  }
}
 80061d6:	e0a8      	b.n	800632a <JPEG_StoreOutputData+0x206>
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061e0:	429a      	cmp	r2, r3
 80061e2:	f240 80a2 	bls.w	800632a <JPEG_StoreOutputData+0x206>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ee:	1ad3      	subs	r3, r2, r3
 80061f0:	089b      	lsrs	r3, r3, #2
 80061f2:	613b      	str	r3, [r7, #16]
    for (index = 0; index < nb_words; index++)
 80061f4:	2300      	movs	r3, #0
 80061f6:	617b      	str	r3, [r7, #20]
 80061f8:	e031      	b.n	800625e <JPEG_StoreOutputData+0x13a>
      dataword = hjpeg->Instance->DOR;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006200:	60bb      	str	r3, [r7, #8]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	69da      	ldr	r2, [r3, #28]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800620a:	4413      	add	r3, r2
 800620c:	68ba      	ldr	r2, [r7, #8]
 800620e:	b2d2      	uxtb	r2, r2
 8006210:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	0a19      	lsrs	r1, r3, #8
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	69da      	ldr	r2, [r3, #28]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800621e:	3301      	adds	r3, #1
 8006220:	4413      	add	r3, r2
 8006222:	b2ca      	uxtb	r2, r1
 8006224:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	0c19      	lsrs	r1, r3, #16
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	69da      	ldr	r2, [r3, #28]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006232:	3302      	adds	r3, #2
 8006234:	4413      	add	r3, r2
 8006236:	b2ca      	uxtb	r2, r1
 8006238:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	0e19      	lsrs	r1, r3, #24
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	69da      	ldr	r2, [r3, #28]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006246:	3303      	adds	r3, #3
 8006248:	4413      	add	r3, r2
 800624a:	b2ca      	uxtb	r2, r1
 800624c:	701a      	strb	r2, [r3, #0]
      hjpeg->JpegOutCount += 4UL;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006252:	1d1a      	adds	r2, r3, #4
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	625a      	str	r2, [r3, #36]	; 0x24
    for (index = 0; index < nb_words; index++)
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	3301      	adds	r3, #1
 800625c:	617b      	str	r3, [r7, #20]
 800625e:	697a      	ldr	r2, [r7, #20]
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	429a      	cmp	r2, r3
 8006264:	d3c9      	bcc.n	80061fa <JPEG_StoreOutputData+0xd6>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800626e:	429a      	cmp	r2, r3
 8006270:	d10b      	bne.n	800628a <JPEG_StoreOutputData+0x166>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	69d9      	ldr	r1, [r3, #28]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800627a:	461a      	mov	r2, r3
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f00a fe31 	bl	8010ee4 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2200      	movs	r2, #0
 8006286:	625a      	str	r2, [r3, #36]	; 0x24
}
 8006288:	e04f      	b.n	800632a <JPEG_StoreOutputData+0x206>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006292:	1ad3      	subs	r3, r2, r3
 8006294:	60fb      	str	r3, [r7, #12]
      dataword = hjpeg->Instance->DOR;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800629c:	60bb      	str	r3, [r7, #8]
      for (index = 0; index < nb_bytes; index++)
 800629e:	2300      	movs	r3, #0
 80062a0:	617b      	str	r3, [r7, #20]
 80062a2:	e015      	b.n	80062d0 <JPEG_StoreOutputData+0x1ac>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	f003 0303 	and.w	r3, r3, #3
 80062aa:	00db      	lsls	r3, r3, #3
 80062ac:	68ba      	ldr	r2, [r7, #8]
 80062ae:	fa22 f103 	lsr.w	r1, r2, r3
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	69da      	ldr	r2, [r3, #28]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ba:	4413      	add	r3, r2
 80062bc:	b2ca      	uxtb	r2, r1
 80062be:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount++;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c4:	1c5a      	adds	r2, r3, #1
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	625a      	str	r2, [r3, #36]	; 0x24
      for (index = 0; index < nb_bytes; index++)
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	3301      	adds	r3, #1
 80062ce:	617b      	str	r3, [r7, #20]
 80062d0:	697a      	ldr	r2, [r7, #20]
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	429a      	cmp	r2, r3
 80062d6:	d3e5      	bcc.n	80062a4 <JPEG_StoreOutputData+0x180>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	69d9      	ldr	r1, [r3, #28]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e0:	461a      	mov	r2, r3
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f00a fdfe 	bl	8010ee4 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2200      	movs	r2, #0
 80062ec:	625a      	str	r2, [r3, #36]	; 0x24
      nb_bytes = 4UL - nb_bytes;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	f1c3 0304 	rsb	r3, r3, #4
 80062f4:	60fb      	str	r3, [r7, #12]
      for (index = nb_bytes; index < 4UL; index++)
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	617b      	str	r3, [r7, #20]
 80062fa:	e013      	b.n	8006324 <JPEG_StoreOutputData+0x200>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	00db      	lsls	r3, r3, #3
 8006300:	68ba      	ldr	r2, [r7, #8]
 8006302:	fa22 f103 	lsr.w	r1, r2, r3
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	69da      	ldr	r2, [r3, #28]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800630e:	4413      	add	r3, r2
 8006310:	b2ca      	uxtb	r2, r1
 8006312:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount++;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006318:	1c5a      	adds	r2, r3, #1
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	625a      	str	r2, [r3, #36]	; 0x24
      for (index = nb_bytes; index < 4UL; index++)
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	3301      	adds	r3, #1
 8006322:	617b      	str	r3, [r7, #20]
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	2b03      	cmp	r3, #3
 8006328:	d9e8      	bls.n	80062fc <JPEG_StoreOutputData+0x1d8>
}
 800632a:	bf00      	nop
 800632c:	3718      	adds	r7, #24
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}

08006332 <JPEG_ReadInputData>:
  *         the configuration information for JPEG module
  * @param  nbRequestWords Number of input words (of 32 bits) that the JPE peripheral request
  * @retval None
  */
static void JPEG_ReadInputData(JPEG_HandleTypeDef *hjpeg, uint32_t nbRequestWords)
{
 8006332:	b580      	push	{r7, lr}
 8006334:	b088      	sub	sp, #32
 8006336:	af00      	add	r7, sp, #0
 8006338:	6078      	str	r0, [r7, #4]
 800633a:	6039      	str	r1, [r7, #0]
  uint32_t nb_bytes = 0;
 800633c:	2300      	movs	r3, #0
 800633e:	61fb      	str	r3, [r7, #28]
  uint32_t nb_words;
  uint32_t index;
  uint32_t dataword;
  uint32_t input_count;

  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006344:	2b00      	cmp	r3, #0
 8006346:	d002      	beq.n	800634e <JPEG_ReadInputData+0x1c>
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d104      	bne.n	8006358 <JPEG_ReadInputData+0x26>
  {
    /* No more Input data : nothing to do*/
    (void) HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_INPUT);
 800634e:	2101      	movs	r1, #1
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f7fe fe9d 	bl	8005090 <HAL_JPEG_Pause>
 8006356:	e028      	b.n	80063aa <JPEG_ReadInputData+0x78>
  }
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6a1b      	ldr	r3, [r3, #32]
 8006360:	429a      	cmp	r2, r3
 8006362:	d906      	bls.n	8006372 <JPEG_ReadInputData+0x40>
  {
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6a1b      	ldr	r3, [r3, #32]
 800636c:	1ad3      	subs	r3, r2, r3
 800636e:	61fb      	str	r3, [r7, #28]
 8006370:	e01b      	b.n	80063aa <JPEG_ReadInputData+0x78>
  }
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6a1b      	ldr	r3, [r3, #32]
 800637a:	429a      	cmp	r2, r3
 800637c:	d115      	bne.n	80063aa <JPEG_ReadInputData+0x78>
  {
    /*Call HAL_JPEG_GetDataCallback to get new data */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->GetDataCallback(hjpeg, hjpeg->JpegInCount);
#else
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6a1b      	ldr	r3, [r3, #32]
 8006382:	4619      	mov	r1, r3
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f00a fd79 	bl	8010e7c <HAL_JPEG_GetDataCallback>
#endif /*USE_HAL_JPEG_REGISTER_CALLBACKS*/

    if (hjpeg->InDataLength > 4UL)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800638e:	2b04      	cmp	r3, #4
 8006390:	d905      	bls.n	800639e <JPEG_ReadInputData+0x6c>
    {
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006396:	f023 0203 	bic.w	r2, r3, #3
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	629a      	str	r2, [r3, #40]	; 0x28
    }
    hjpeg->JpegInCount = 0;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2200      	movs	r2, #0
 80063a2:	621a      	str	r2, [r3, #32]
    nb_bytes = hjpeg->InDataLength;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063a8:	61fb      	str	r3, [r7, #28]
  }
  else
  {
    /* Nothing to do */
  }
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	f040 809f 	bne.w	80064f6 <JPEG_ReadInputData+0x1c4>
 80063b8:	69fb      	ldr	r3, [r7, #28]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	f000 809b 	beq.w	80064f6 <JPEG_ReadInputData+0x1c4>
  {
    nb_words = nb_bytes / 4UL;
 80063c0:	69fb      	ldr	r3, [r7, #28]
 80063c2:	089b      	lsrs	r3, r3, #2
 80063c4:	613b      	str	r3, [r7, #16]
    if (nb_words >= nbRequestWords)
 80063c6:	693a      	ldr	r2, [r7, #16]
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	429a      	cmp	r2, r3
 80063cc:	d335      	bcc.n	800643a <JPEG_ReadInputData+0x108>
    {
      for (index = 0; index < nbRequestWords; index++)
 80063ce:	2300      	movs	r3, #0
 80063d0:	61bb      	str	r3, [r7, #24]
 80063d2:	e02d      	b.n	8006430 <JPEG_ReadInputData+0xfe>
      {
        input_count = hjpeg->JpegInCount;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6a1b      	ldr	r3, [r3, #32]
 80063d8:	60fb      	str	r3, [r7, #12]
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	699a      	ldr	r2, [r3, #24]
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	4413      	add	r3, r2
 80063e2:	781b      	ldrb	r3, [r3, #0]
 80063e4:	4619      	mov	r1, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	699a      	ldr	r2, [r3, #24]
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	3301      	adds	r3, #1
 80063ee:	4413      	add	r3, r2
 80063f0:	781b      	ldrb	r3, [r3, #0]
 80063f2:	021b      	lsls	r3, r3, #8
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80063f4:	ea41 0203 	orr.w	r2, r1, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6999      	ldr	r1, [r3, #24]
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	3302      	adds	r3, #2
 8006400:	440b      	add	r3, r1
 8006402:	781b      	ldrb	r3, [r3, #0]
 8006404:	041b      	lsls	r3, r3, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8006406:	ea42 0103 	orr.w	r1, r2, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	699a      	ldr	r2, [r3, #24]
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	3303      	adds	r3, #3
 8006412:	4413      	add	r3, r2
 8006414:	781b      	ldrb	r3, [r3, #0]
 8006416:	061a      	lsls	r2, r3, #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800641c:	430a      	orrs	r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800641e:	641a      	str	r2, [r3, #64]	; 0x40

        hjpeg->JpegInCount += 4UL;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6a1b      	ldr	r3, [r3, #32]
 8006424:	1d1a      	adds	r2, r3, #4
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	621a      	str	r2, [r3, #32]
      for (index = 0; index < nbRequestWords; index++)
 800642a:	69bb      	ldr	r3, [r7, #24]
 800642c:	3301      	adds	r3, #1
 800642e:	61bb      	str	r3, [r7, #24]
 8006430:	69ba      	ldr	r2, [r7, #24]
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	429a      	cmp	r2, r3
 8006436:	d3cd      	bcc.n	80063d4 <JPEG_ReadInputData+0xa2>
        }
        hjpeg->Instance->DIR = dataword;
      }
    }
  }
}
 8006438:	e05d      	b.n	80064f6 <JPEG_ReadInputData+0x1c4>
      if (nb_words > 0UL)
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d035      	beq.n	80064ac <JPEG_ReadInputData+0x17a>
        for (index = 0; index < nb_words; index++)
 8006440:	2300      	movs	r3, #0
 8006442:	61bb      	str	r3, [r7, #24]
 8006444:	e02d      	b.n	80064a2 <JPEG_ReadInputData+0x170>
          input_count = hjpeg->JpegInCount;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6a1b      	ldr	r3, [r3, #32]
 800644a:	60fb      	str	r3, [r7, #12]
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	699a      	ldr	r2, [r3, #24]
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	4413      	add	r3, r2
 8006454:	781b      	ldrb	r3, [r3, #0]
 8006456:	4619      	mov	r1, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	699a      	ldr	r2, [r3, #24]
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	3301      	adds	r3, #1
 8006460:	4413      	add	r3, r2
 8006462:	781b      	ldrb	r3, [r3, #0]
 8006464:	021b      	lsls	r3, r3, #8
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8006466:	ea41 0203 	orr.w	r2, r1, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6999      	ldr	r1, [r3, #24]
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	3302      	adds	r3, #2
 8006472:	440b      	add	r3, r1
 8006474:	781b      	ldrb	r3, [r3, #0]
 8006476:	041b      	lsls	r3, r3, #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8006478:	ea42 0103 	orr.w	r1, r2, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	699a      	ldr	r2, [r3, #24]
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	3303      	adds	r3, #3
 8006484:	4413      	add	r3, r2
 8006486:	781b      	ldrb	r3, [r3, #0]
 8006488:	061a      	lsls	r2, r3, #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800648e:	430a      	orrs	r2, r1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8006490:	641a      	str	r2, [r3, #64]	; 0x40
          hjpeg->JpegInCount += 4UL;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6a1b      	ldr	r3, [r3, #32]
 8006496:	1d1a      	adds	r2, r3, #4
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	621a      	str	r2, [r3, #32]
        for (index = 0; index < nb_words; index++)
 800649c:	69bb      	ldr	r3, [r7, #24]
 800649e:	3301      	adds	r3, #1
 80064a0:	61bb      	str	r3, [r7, #24]
 80064a2:	69ba      	ldr	r2, [r7, #24]
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	429a      	cmp	r2, r3
 80064a8:	d3cd      	bcc.n	8006446 <JPEG_ReadInputData+0x114>
}
 80064aa:	e024      	b.n	80064f6 <JPEG_ReadInputData+0x1c4>
        dataword = 0;
 80064ac:	2300      	movs	r3, #0
 80064ae:	617b      	str	r3, [r7, #20]
        for (index = 0; index < nb_bytes; index++)
 80064b0:	2300      	movs	r3, #0
 80064b2:	61bb      	str	r3, [r7, #24]
 80064b4:	e017      	b.n	80064e6 <JPEG_ReadInputData+0x1b4>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	699a      	ldr	r2, [r3, #24]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6a1b      	ldr	r3, [r3, #32]
 80064be:	4413      	add	r3, r2
 80064c0:	781b      	ldrb	r3, [r3, #0]
 80064c2:	461a      	mov	r2, r3
 80064c4:	69bb      	ldr	r3, [r7, #24]
 80064c6:	f003 0303 	and.w	r3, r3, #3
 80064ca:	00db      	lsls	r3, r3, #3
 80064cc:	fa02 f303 	lsl.w	r3, r2, r3
 80064d0:	697a      	ldr	r2, [r7, #20]
 80064d2:	4313      	orrs	r3, r2
 80064d4:	617b      	str	r3, [r7, #20]
          hjpeg->JpegInCount++;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6a1b      	ldr	r3, [r3, #32]
 80064da:	1c5a      	adds	r2, r3, #1
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	621a      	str	r2, [r3, #32]
        for (index = 0; index < nb_bytes; index++)
 80064e0:	69bb      	ldr	r3, [r7, #24]
 80064e2:	3301      	adds	r3, #1
 80064e4:	61bb      	str	r3, [r7, #24]
 80064e6:	69ba      	ldr	r2, [r7, #24]
 80064e8:	69fb      	ldr	r3, [r7, #28]
 80064ea:	429a      	cmp	r2, r3
 80064ec:	d3e3      	bcc.n	80064b6 <JPEG_ReadInputData+0x184>
        hjpeg->Instance->DIR = dataword;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	697a      	ldr	r2, [r7, #20]
 80064f4:	641a      	str	r2, [r3, #64]	; 0x40
}
 80064f6:	bf00      	nop
 80064f8:	3720      	adds	r7, #32
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}
	...

08006500 <JPEG_DMA_StartProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static HAL_StatusTypeDef JPEG_DMA_StartProcess(JPEG_HandleTypeDef *hjpeg)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b082      	sub	sp, #8
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  if ((hjpeg->InDataLength < 4UL) || (hjpeg->OutDataLength < 4UL))
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800650c:	2b03      	cmp	r3, #3
 800650e:	d903      	bls.n	8006518 <JPEG_DMA_StartProcess+0x18>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006514:	2b03      	cmp	r3, #3
 8006516:	d801      	bhi.n	800651c <JPEG_DMA_StartProcess+0x1c>
  {
    return HAL_ERROR;
 8006518:	2301      	movs	r3, #1
 800651a:	e068      	b.n	80065ee <JPEG_DMA_StartProcess+0xee>
  }
  /* Reset Ending DMA internal context flag*/
  hjpeg->Context &= ~JPEG_CONTEXT_ENDING_DMA;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006520:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	655a      	str	r2, [r3, #84]	; 0x54

  /* Disable DMA In/Out Request*/
  JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_ODMA | JPEG_DMA_IDMA);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
 8006536:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the JPEG DMA In transfer complete callback */
  hjpeg->hdmain->XferCpltCallback = JPEG_DMAInCpltCallback;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800653c:	4a2e      	ldr	r2, [pc, #184]	; (80065f8 <JPEG_DMA_StartProcess+0xf8>)
 800653e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Set the DMA In error callback */
  hjpeg->hdmain->XferErrorCallback = JPEG_DMAErrorCallback;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006544:	4a2d      	ldr	r2, [pc, #180]	; (80065fc <JPEG_DMA_StartProcess+0xfc>)
 8006546:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the JPEG DMA Out transfer complete callback */
  hjpeg->hdmaout->XferCpltCallback = JPEG_DMAOutCpltCallback;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800654c:	4a2c      	ldr	r2, [pc, #176]	; (8006600 <JPEG_DMA_StartProcess+0x100>)
 800654e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Set the DMA Out error callback */
  hjpeg->hdmaout->XferErrorCallback = JPEG_DMAErrorCallback;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006554:	4a29      	ldr	r2, [pc, #164]	; (80065fc <JPEG_DMA_StartProcess+0xfc>)
 8006556:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Set the DMA Out Abort callback */
  hjpeg->hdmaout->XferAbortCallback = JPEG_DMAOutAbortCallback;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800655c:	4a29      	ldr	r2, [pc, #164]	; (8006604 <JPEG_DMA_StartProcess+0x104>)
 800655e:	651a      	str	r2, [r3, #80]	; 0x50

  /*DMA transfer size must be a multiple of 4 bytes i.e multiple of 32bits words*/
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006564:	f023 0203 	bic.w	r2, r3, #3
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	629a      	str	r2, [r3, #40]	; 0x28

  /*DMA transfer size must be a multiple of 4 bytes i.e multiple of 32bits words*/
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % 4UL);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006570:	f023 0203 	bic.w	r2, r3, #3
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Start DMA FIFO In transfer */
  if (HAL_DMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	699b      	ldr	r3, [r3, #24]
 8006580:	4619      	mov	r1, r3
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	3340      	adds	r3, #64	; 0x40
 8006588:	461a      	mov	r2, r3
                       hjpeg->InDataLength >> 2)  != HAL_OK)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (HAL_DMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800658e:	089b      	lsrs	r3, r3, #2
 8006590:	f7fc fda4 	bl	80030dc <HAL_DMA_Start_IT>
 8006594:	4603      	mov	r3, r0
 8006596:	2b00      	cmp	r3, #0
 8006598:	d007      	beq.n	80065aa <JPEG_DMA_StartProcess+0xaa>
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800659e:	f043 0204 	orr.w	r2, r3, #4
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	651a      	str	r2, [r3, #80]	; 0x50
    return HAL_ERROR;
 80065a6:	2301      	movs	r3, #1
 80065a8:	e021      	b.n	80065ee <JPEG_DMA_StartProcess+0xee>
  }

  /* Start DMA FIFO Out transfer */
  if (HAL_DMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	3344      	adds	r3, #68	; 0x44
 80065b4:	4619      	mov	r1, r3
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	69db      	ldr	r3, [r3, #28]
 80065ba:	461a      	mov	r2, r3
                       hjpeg->OutDataLength >> 2)  != HAL_OK)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  if (HAL_DMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 80065c0:	089b      	lsrs	r3, r3, #2
 80065c2:	f7fc fd8b 	bl	80030dc <HAL_DMA_Start_IT>
 80065c6:	4603      	mov	r3, r0
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d007      	beq.n	80065dc <JPEG_DMA_StartProcess+0xdc>
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065d0:	f043 0204 	orr.w	r2, r3, #4
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	651a      	str	r2, [r3, #80]	; 0x50
    return HAL_ERROR;
 80065d8:	2301      	movs	r3, #1
 80065da:	e008      	b.n	80065ee <JPEG_DMA_StartProcess+0xee>
  }

  /* Enable JPEG In/Out DMA requests*/
  JPEG_ENABLE_DMA(hjpeg, JPEG_DMA_IDMA | JPEG_DMA_ODMA);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f442 52c0 	orr.w	r2, r2, #6144	; 0x1800
 80065ea:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 80065ec:	2300      	movs	r3, #0
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3708      	adds	r7, #8
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}
 80065f6:	bf00      	nop
 80065f8:	08006921 	.word	0x08006921
 80065fc:	08006b05 	.word	0x08006b05
 8006600:	08006a21 	.word	0x08006a21
 8006604:	08006b71 	.word	0x08006b71

08006608 <JPEG_DMA_ContinueProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static void JPEG_DMA_ContinueProcess(JPEG_HandleTypeDef *hjpeg)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b082      	sub	sp, #8
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  /*End of header processing flag rises*/
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006614:	f003 0303 	and.w	r3, r3, #3
 8006618:	2b02      	cmp	r3, #2
 800661a:	d125      	bne.n	8006668 <JPEG_DMA_ContinueProcess+0x60>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006626:	2b00      	cmp	r3, #0
 8006628:	d01e      	beq.n	8006668 <JPEG_DMA_ContinueProcess+0x60>
    {
      /*Call Header parsing complete callback */
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	3304      	adds	r3, #4
 800662e:	4619      	mov	r1, r3
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	f7fe fc35 	bl	8004ea0 <HAL_JPEG_GetInfo>

      /* Reset the ImageQuality */
      hjpeg->Conf.ImageQuality = 0;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2200      	movs	r2, #0
 800663a:	615a      	str	r2, [r3, #20]

      /*Call Info Ready callback */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->InfoReadyCallback(hjpeg, &hjpeg->Conf);
#else
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	3304      	adds	r3, #4
 8006640:	4619      	mov	r1, r3
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f00a fb7e 	bl	8010d44 <HAL_JPEG_InfoReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006656:	631a      	str	r2, [r3, #48]	; 0x30

      /* Clear header processing done flag */
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006666:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  /*End of Conversion handling*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) != 0UL)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800666e:	f003 0320 	and.w	r3, r3, #32
 8006672:	2b00      	cmp	r3, #0
 8006674:	d041      	beq.n	80066fa <JPEG_DMA_ContinueProcess+0xf2>
  {
    /*Disabkle JPEG In/Out DMA Requests*/
    JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_ODMA | JPEG_DMA_IDMA);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
 8006684:	631a      	str	r2, [r3, #48]	; 0x30

    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800668a:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	655a      	str	r2, [r3, #84]	; 0x54

    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	681a      	ldr	r2, [r3, #0]
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f022 0201 	bic.w	r2, r2, #1
 80066a0:	601a      	str	r2, [r3, #0]

    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 80066b0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear all flags */
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80066c0:	639a      	str	r2, [r3, #56]	; 0x38

    if (hjpeg->hdmain->State == HAL_DMA_STATE_BUSY)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066c6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80066ca:	b2db      	uxtb	r3, r3
 80066cc:	2b02      	cmp	r3, #2
 80066ce:	d104      	bne.n	80066da <JPEG_DMA_ContinueProcess+0xd2>
    {
      /* Stop the DMA In Xfer*/
      (void) HAL_DMA_Abort_IT(hjpeg->hdmain);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066d4:	4618      	mov	r0, r3
 80066d6:	f7fc fd61 	bl	800319c <HAL_DMA_Abort_IT>
    }

    if (hjpeg->hdmaout->State == HAL_DMA_STATE_BUSY)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066de:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80066e2:	b2db      	uxtb	r3, r3
 80066e4:	2b02      	cmp	r3, #2
 80066e6:	d105      	bne.n	80066f4 <JPEG_DMA_ContinueProcess+0xec>
    {
      /* Stop the DMA out Xfer*/
      (void) HAL_DMA_Abort_IT(hjpeg->hdmaout);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066ec:	4618      	mov	r0, r3
 80066ee:	f7fc fd55 	bl	800319c <HAL_DMA_Abort_IT>
      JPEG_DMA_EndProcess(hjpeg);
    }
  }


}
 80066f2:	e002      	b.n	80066fa <JPEG_DMA_ContinueProcess+0xf2>
      JPEG_DMA_EndProcess(hjpeg);
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	f000 f805 	bl	8006704 <JPEG_DMA_EndProcess>
}
 80066fa:	bf00      	nop
 80066fc:	3708      	adds	r7, #8
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}
	...

08006704 <JPEG_DMA_EndProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE
  */
static void JPEG_DMA_EndProcess(JPEG_HandleTypeDef *hjpeg)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b084      	sub	sp, #16
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;
  hjpeg->JpegOutCount = hjpeg->OutDataLength - ((hjpeg->hdmaout->Instance->NDTR & DMA_SxNDT) << 2);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	685b      	ldr	r3, [r3, #4]
 8006718:	0099      	lsls	r1, r3, #2
 800671a:	4b2f      	ldr	r3, [pc, #188]	; (80067d8 <JPEG_DMA_EndProcess+0xd4>)
 800671c:	400b      	ands	r3, r1
 800671e:	1ad2      	subs	r2, r2, r3
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	625a      	str	r2, [r3, #36]	; 0x24

  /*if Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800672c:	429a      	cmp	r2, r3
 800672e:	d10a      	bne.n	8006746 <JPEG_DMA_EndProcess+0x42>
  {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	69d9      	ldr	r1, [r3, #28]
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006738:	461a      	mov	r2, r3
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f00a fbd2 	bl	8010ee4 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

    hjpeg->JpegOutCount = 0;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2200      	movs	r2, #0
 8006744:	625a      	str	r2, [r3, #36]	; 0x24
  }

  /*Check if remaining data in the output FIFO*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800674c:	f003 0310 	and.w	r3, r3, #16
 8006750:	2b00      	cmp	r3, #0
 8006752:	d134      	bne.n	80067be <JPEG_DMA_EndProcess+0xba>
  {
    if (hjpeg->JpegOutCount > 0UL)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006758:	2b00      	cmp	r3, #0
 800675a:	d00a      	beq.n	8006772 <JPEG_DMA_EndProcess+0x6e>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	69d9      	ldr	r1, [r3, #28]
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006764:	461a      	mov	r2, r3
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f00a fbbc 	bl	8010ee4 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2200      	movs	r2, #0
 8006770:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	681a      	ldr	r2, [r3, #0]
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f022 0201 	bic.w	r2, r2, #1
 8006780:	601a      	str	r2, [r3, #0]

    tmpContext = hjpeg->Context;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006786:	60fb      	str	r3, [r7, #12]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800678c:	f403 4282 	and.w	r2, r3, #16640	; 0x4100
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2200      	movs	r2, #0
 8006798:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2201      	movs	r2, #1
 80067a0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	f003 0303 	and.w	r3, r3, #3
 80067aa:	2b02      	cmp	r3, #2
 80067ac:	d103      	bne.n	80067b6 <JPEG_DMA_EndProcess+0xb2>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f00a fc00 	bl	8010fb4 <HAL_JPEG_DecodeCpltCallback>
  else
  {
    /* Nothing to do */
  }

}
 80067b4:	e00c      	b.n	80067d0 <JPEG_DMA_EndProcess+0xcc>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f7fe fdb6 	bl	8005328 <HAL_JPEG_EncodeCpltCallback>
}
 80067bc:	e008      	b.n	80067d0 <JPEG_DMA_EndProcess+0xcc>
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d102      	bne.n	80067d0 <JPEG_DMA_EndProcess+0xcc>
    JPEG_DMA_PollResidualData(hjpeg);
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f000 f806 	bl	80067dc <JPEG_DMA_PollResidualData>
}
 80067d0:	bf00      	nop
 80067d2:	3710      	adds	r7, #16
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}
 80067d8:	0003fffc 	.word	0x0003fffc

080067dc <JPEG_DMA_PollResidualData>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None.
  */
static void JPEG_DMA_PollResidualData(JPEG_HandleTypeDef *hjpeg)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b086      	sub	sp, #24
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;
  uint32_t count;
  uint32_t dataOut;

  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 80067e4:	2310      	movs	r3, #16
 80067e6:	617b      	str	r3, [r7, #20]
 80067e8:	e04f      	b.n	800688a <JPEG_DMA_PollResidualData+0xae>
  {
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d146      	bne.n	8006884 <JPEG_DMA_PollResidualData+0xa8>
    {
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067fc:	f003 0310 	and.w	r3, r3, #16
 8006800:	2b00      	cmp	r3, #0
 8006802:	d03f      	beq.n	8006884 <JPEG_DMA_PollResidualData+0xa8>
      {
        dataOut = hjpeg->Instance->DOR;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800680a:	60fb      	str	r3, [r7, #12]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	69da      	ldr	r2, [r3, #28]
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006814:	4413      	add	r3, r2
 8006816:	68fa      	ldr	r2, [r7, #12]
 8006818:	b2d2      	uxtb	r2, r2
 800681a:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	0a19      	lsrs	r1, r3, #8
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	69da      	ldr	r2, [r3, #28]
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006828:	3301      	adds	r3, #1
 800682a:	4413      	add	r3, r2
 800682c:	b2ca      	uxtb	r2, r1
 800682e:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	0c19      	lsrs	r1, r3, #16
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	69da      	ldr	r2, [r3, #28]
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800683c:	3302      	adds	r3, #2
 800683e:	4413      	add	r3, r2
 8006840:	b2ca      	uxtb	r2, r1
 8006842:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	0e19      	lsrs	r1, r3, #24
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	69da      	ldr	r2, [r3, #28]
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006850:	3303      	adds	r3, #3
 8006852:	4413      	add	r3, r2
 8006854:	b2ca      	uxtb	r2, r1
 8006856:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount += 4UL;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800685c:	1d1a      	adds	r2, r3, #4
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	625a      	str	r2, [r3, #36]	; 0x24

        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800686a:	429a      	cmp	r2, r3
 800686c:	d10a      	bne.n	8006884 <JPEG_DMA_PollResidualData+0xa8>
        {
          /*Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
          hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
          HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	69d9      	ldr	r1, [r3, #28]
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006876:	461a      	mov	r2, r3
 8006878:	6878      	ldr	r0, [r7, #4]
 800687a:	f00a fb33 	bl	8010ee4 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

          hjpeg->JpegOutCount = 0;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2200      	movs	r2, #0
 8006882:	625a      	str	r2, [r3, #36]	; 0x24
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	3b01      	subs	r3, #1
 8006888:	617b      	str	r3, [r7, #20]
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d1ac      	bne.n	80067ea <JPEG_DMA_PollResidualData+0xe>

      }
    }
  }

  tmpContext = hjpeg->Context;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006894:	613b      	str	r3, [r7, #16]

  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800689c:	f003 0310 	and.w	r3, r3, #16
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d004      	beq.n	80068ae <JPEG_DMA_PollResidualData+0xd2>
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d133      	bne.n	8006916 <JPEG_DMA_PollResidualData+0x13a>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	681a      	ldr	r2, [r3, #0]
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f022 0201 	bic.w	r2, r2, #1
 80068bc:	601a      	str	r2, [r3, #0]

    if (hjpeg->JpegOutCount > 0UL)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d00a      	beq.n	80068dc <JPEG_DMA_PollResidualData+0x100>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	69d9      	ldr	r1, [r3, #28]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ce:	461a      	mov	r2, r3
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f00a fb07 	bl	8010ee4 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2200      	movs	r2, #0
 80068da:	625a      	str	r2, [r3, #36]	; 0x24
    }

    tmpContext = hjpeg->Context;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068e0:	613b      	str	r3, [r7, #16]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068e6:	f403 4282 	and.w	r2, r3, #16640	; 0x4100
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2200      	movs	r2, #0
 80068f2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2201      	movs	r2, #1
 80068fa:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80068fe:	693b      	ldr	r3, [r7, #16]
 8006900:	f003 0303 	and.w	r3, r3, #3
 8006904:	2b02      	cmp	r3, #2
 8006906:	d103      	bne.n	8006910 <JPEG_DMA_PollResidualData+0x134>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f00a fb53 	bl	8010fb4 <HAL_JPEG_DecodeCpltCallback>
#else
      HAL_JPEG_EncodeCpltCallback(hjpeg);
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
    }
  }
}
 800690e:	e002      	b.n	8006916 <JPEG_DMA_PollResidualData+0x13a>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f7fe fd09 	bl	8005328 <HAL_JPEG_EncodeCpltCallback>
}
 8006916:	bf00      	nop
 8006918:	3718      	adds	r7, #24
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}
	...

08006920 <JPEG_DMAInCpltCallback>:
  * @brief  DMA input transfer complete callback
  * @param  hdma pointer to a DMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_DMAInCpltCallback(DMA_HandleTypeDef *hdma)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b084      	sub	sp, #16
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800692c:	60fb      	str	r3, [r7, #12]

  /* Disable The JPEG IT so the DMA Input Callback can not be interrupted by the JPEG EOC IT or JPEG HPD IT */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 800693c:	631a      	str	r2, [r3, #48]	; 0x30

  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006942:	f248 030c 	movw	r3, #32780	; 0x800c
 8006946:	4013      	ands	r3, r2
 8006948:	2b0c      	cmp	r3, #12
 800694a:	d163      	bne.n	8006a14 <JPEG_DMAInCpltCallback+0xf4>
      JPEG_CONTEXT_DMA) /* Check if context method is DMA and we are not in ending DMA stage */
  {
    JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_IDMA);
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800695a:	631a      	str	r2, [r3, #48]	; 0x30

    hjpeg->JpegInCount = hjpeg->InDataLength - ((hdma->Instance->NDTR & DMA_SxNDT) << 2);
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	685b      	ldr	r3, [r3, #4]
 8006966:	0099      	lsls	r1, r3, #2
 8006968:	4b2c      	ldr	r3, [pc, #176]	; (8006a1c <JPEG_DMAInCpltCallback+0xfc>)
 800696a:	400b      	ands	r3, r1
 800696c:	1ad2      	subs	r2, r2, r3
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	621a      	str	r2, [r3, #32]

    /*Call HAL_JPEG_GetDataCallback to get new data */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->GetDataCallback(hjpeg, hjpeg->JpegInCount);
#else
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	6a1b      	ldr	r3, [r3, #32]
 8006976:	4619      	mov	r1, r3
 8006978:	68f8      	ldr	r0, [r7, #12]
 800697a:	f00a fa7f 	bl	8010e7c <HAL_JPEG_GetDataCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

    if (hjpeg->InDataLength >= 4UL)
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006982:	2b03      	cmp	r3, #3
 8006984:	d906      	bls.n	8006994 <JPEG_DMAInCpltCallback+0x74>
    {
      /*JPEG Input DMA transfer data number must be multiple of 32 bits word
        as the destination is a 32 bits (4 bytes) register */
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800698a:	f023 0203 	bic.w	r2, r3, #3
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	629a      	str	r2, [r3, #40]	; 0x28
 8006992:	e006      	b.n	80069a2 <JPEG_DMAInCpltCallback+0x82>
    }
    else if (hjpeg->InDataLength > 0UL)
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006998:	2b00      	cmp	r3, #0
 800699a:	d002      	beq.n	80069a2 <JPEG_DMAInCpltCallback+0x82>
    {
      /*Transfer last data word (i.e last 4 bytes)*/
      hjpeg->InDataLength = 4;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	2204      	movs	r2, #4
 80069a0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d12a      	bne.n	8006a04 <JPEG_DMAInCpltCallback+0xe4>
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d026      	beq.n	8006a04 <JPEG_DMAInCpltCallback+0xe4>
    {
      /* Start DMA FIFO In transfer */
      if (HAL_DMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	699b      	ldr	r3, [r3, #24]
 80069be:	4619      	mov	r1, r3
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	3340      	adds	r3, #64	; 0x40
 80069c6:	461a      	mov	r2, r3
                           hjpeg->InDataLength >> 2) != HAL_OK)
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (HAL_DMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 80069cc:	089b      	lsrs	r3, r3, #2
 80069ce:	f7fc fb85 	bl	80030dc <HAL_DMA_Start_IT>
 80069d2:	4603      	mov	r3, r0
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d00d      	beq.n	80069f4 <JPEG_DMAInCpltCallback+0xd4>
      {
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069dc:	f043 0204 	orr.w	r2, r3, #4
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	651a      	str	r2, [r3, #80]	; 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	2206      	movs	r2, #6
 80069e8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
        hjpeg->ErrorCallback(hjpeg);
#else
        HAL_JPEG_ErrorCallback(hjpeg);
 80069ec:	68f8      	ldr	r0, [r7, #12]
 80069ee:	f00a fad9 	bl	8010fa4 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
        return;
 80069f2:	e00f      	b.n	8006a14 <JPEG_DMAInCpltCallback+0xf4>
      }
      JPEG_ENABLE_DMA(hjpeg, JPEG_DMA_IDMA);
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a02:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* JPEG Conversion still on going : Enable the JPEG IT */
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8006a12:	631a      	str	r2, [r3, #48]	; 0x30
  }
}
 8006a14:	3710      	adds	r7, #16
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}
 8006a1a:	bf00      	nop
 8006a1c:	0003fffc 	.word	0x0003fffc

08006a20 <JPEG_DMAOutCpltCallback>:
  * @brief  DMA output transfer complete callback
  * @param  hdma pointer to a DMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_DMAOutCpltCallback(DMA_HandleTypeDef *hdma)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b084      	sub	sp, #16
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a2c:	60fb      	str	r3, [r7, #12]

  /* Disable The JPEG IT so the DMA Output Callback can not be interrupted by the JPEG EOC IT or JPEG HPD IT */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 8006a3c:	631a      	str	r2, [r3, #48]	; 0x30

  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006a42:	f248 030c 	movw	r3, #32780	; 0x800c
 8006a46:	4013      	ands	r3, r2
 8006a48:	2b0c      	cmp	r3, #12
 8006a4a:	d156      	bne.n	8006afa <JPEG_DMAOutCpltCallback+0xda>
      JPEG_CONTEXT_DMA) /* Check if context method is DMA and we are not in ending DMA stage */
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) == 0UL)
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a52:	f003 0320 	and.w	r3, r3, #32
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d147      	bne.n	8006aea <JPEG_DMAOutCpltCallback+0xca>
    {
      JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_ODMA);
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006a68:	631a      	str	r2, [r3, #48]	; 0x30
      hjpeg->JpegOutCount = hjpeg->OutDataLength - ((hdma->Instance->NDTR & DMA_SxNDT) << 2);
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	685b      	ldr	r3, [r3, #4]
 8006a74:	0099      	lsls	r1, r3, #2
 8006a76:	4b22      	ldr	r3, [pc, #136]	; (8006b00 <JPEG_DMAOutCpltCallback+0xe0>)
 8006a78:	400b      	ands	r3, r1
 8006a7a:	1ad2      	subs	r2, r2, r3
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	625a      	str	r2, [r3, #36]	; 0x24

      /*Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	69d9      	ldr	r1, [r3, #28]
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a88:	461a      	mov	r2, r3
 8006a8a:	68f8      	ldr	r0, [r7, #12]
 8006a8c:	f00a fa2a 	bl	8010ee4 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a94:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d126      	bne.n	8006aea <JPEG_DMAOutCpltCallback+0xca>
      {
        /* Start DMA FIFO Out transfer */
        if (HAL_DMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	3344      	adds	r3, #68	; 0x44
 8006aa6:	4619      	mov	r1, r3
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	69db      	ldr	r3, [r3, #28]
 8006aac:	461a      	mov	r2, r3
                             hjpeg->OutDataLength >> 2) != HAL_OK)
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if (HAL_DMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8006ab2:	089b      	lsrs	r3, r3, #2
 8006ab4:	f7fc fb12 	bl	80030dc <HAL_DMA_Start_IT>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d00d      	beq.n	8006ada <JPEG_DMAOutCpltCallback+0xba>
        {
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ac2:	f043 0204 	orr.w	r2, r3, #4
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	651a      	str	r2, [r3, #80]	; 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	2206      	movs	r2, #6
 8006ace:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
          hjpeg->ErrorCallback(hjpeg);
#else
          HAL_JPEG_ErrorCallback(hjpeg);
 8006ad2:	68f8      	ldr	r0, [r7, #12]
 8006ad4:	f00a fa66 	bl	8010fa4 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
          return;
 8006ad8:	e00f      	b.n	8006afa <JPEG_DMAOutCpltCallback+0xda>
        }
        JPEG_ENABLE_DMA(hjpeg, JPEG_DMA_ODMA);
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006ae8:	631a      	str	r2, [r3, #48]	; 0x30
      }
    }

    /* JPEG Conversion still on going : Enable the JPEG IT */
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8006af8:	631a      	str	r2, [r3, #48]	; 0x30
  }
}
 8006afa:	3710      	adds	r7, #16
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}
 8006b00:	0003fffc 	.word	0x0003fffc

08006b04 <JPEG_DMAErrorCallback>:
  * @brief  DMA Transfer error callback
  * @param  hdma pointer to a DMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_DMAErrorCallback(DMA_HandleTypeDef *hdma)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b084      	sub	sp, #16
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b10:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f7fc fcee 	bl	80034f4 <HAL_DMA_GetError>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	2b02      	cmp	r3, #2
 8006b1c:	d024      	beq.n	8006b68 <JPEG_DMAErrorCallback+0x64>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	681a      	ldr	r2, [r3, #0]
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f022 0201 	bic.w	r2, r2, #1
 8006b2c:	601a      	str	r2, [r3, #0]

    /* Disable All Interrupts */
    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 8006b3c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable All DMA requests */
    JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_MASK);
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
 8006b4c:	631a      	str	r2, [r3, #48]	; 0x30

    hjpeg->State = HAL_JPEG_STATE_READY;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	2201      	movs	r2, #1
 8006b52:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b5a:	f043 0204 	orr.w	r2, r3, #4
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	651a      	str	r2, [r3, #80]	; 0x50
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->ErrorCallback(hjpeg);
#else
    HAL_JPEG_ErrorCallback(hjpeg);
 8006b62:	68f8      	ldr	r0, [r7, #12]
 8006b64:	f00a fa1e 	bl	8010fa4 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
  }
}
 8006b68:	bf00      	nop
 8006b6a:	3710      	adds	r7, #16
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bd80      	pop	{r7, pc}

08006b70 <JPEG_DMAOutAbortCallback>:
  * @brief  DMA output Abort callback
  * @param  hdma pointer to a DMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_DMAOutAbortCallback(DMA_HandleTypeDef *hdma)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b084      	sub	sp, #16
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b7c:	60fb      	str	r3, [r7, #12]

  if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d002      	beq.n	8006b90 <JPEG_DMAOutAbortCallback+0x20>
  {
    JPEG_DMA_EndProcess(hjpeg);
 8006b8a:	68f8      	ldr	r0, [r7, #12]
 8006b8c:	f7ff fdba 	bl	8006704 <JPEG_DMA_EndProcess>
  }
}
 8006b90:	bf00      	nop
 8006b92:	3710      	adds	r7, #16
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bd80      	pop	{r7, pc}

08006b98 <JPEG_GetQuality>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG image quality from 1 to 100.
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b08b      	sub	sp, #44	; 0x2c
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  uint32_t quality = 0;
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	3350      	adds	r3, #80	; 0x50
 8006baa:	61bb      	str	r3, [r7, #24]

  i = 0;
 8006bac:	2300      	movs	r3, #0
 8006bae:	623b      	str	r3, [r7, #32]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 8006bb0:	e042      	b.n	8006c38 <JPEG_GetQuality+0xa0>
  {
    quantRow = *tableAddress;
 8006bb2:	69bb      	ldr	r3, [r7, #24]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	617b      	str	r3, [r7, #20]
    for (j = 0; j < 4UL; j++)
 8006bb8:	2300      	movs	r3, #0
 8006bba:	61fb      	str	r3, [r7, #28]
 8006bbc:	e033      	b.n	8006c26 <JPEG_GetQuality+0x8e>
    {
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 8006bbe:	69fb      	ldr	r3, [r7, #28]
 8006bc0:	00db      	lsls	r3, r3, #3
 8006bc2:	697a      	ldr	r2, [r7, #20]
 8006bc4:	fa22 f303 	lsr.w	r3, r2, r3
 8006bc8:	b2db      	uxtb	r3, r3
 8006bca:	613b      	str	r3, [r7, #16]
      if (quantVal == 1UL)
 8006bcc:	693b      	ldr	r3, [r7, #16]
 8006bce:	2b01      	cmp	r3, #1
 8006bd0:	d103      	bne.n	8006bda <JPEG_GetQuality+0x42>
      {
        /* if Quantization value = 1 then quality is 100%*/
        quality += 100UL;
 8006bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd4:	3364      	adds	r3, #100	; 0x64
 8006bd6:	627b      	str	r3, [r7, #36]	; 0x24
 8006bd8:	e022      	b.n	8006c20 <JPEG_GetQuality+0x88>
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	2264      	movs	r2, #100	; 0x64
 8006bde:	fb02 f303 	mul.w	r3, r2, r3
 8006be2:	687a      	ldr	r2, [r7, #4]
 8006be4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006be6:	6a38      	ldr	r0, [r7, #32]
 8006be8:	69f9      	ldr	r1, [r7, #28]
 8006bea:	4401      	add	r1, r0
 8006bec:	4818      	ldr	r0, [pc, #96]	; (8006c50 <JPEG_GetQuality+0xb8>)
 8006bee:	5c41      	ldrb	r1, [r0, r1]
 8006bf0:	440a      	add	r2, r1
 8006bf2:	7812      	ldrb	r2, [r2, #0]
 8006bf4:	fbb3 f3f2 	udiv	r3, r3, r2
 8006bf8:	60fb      	str	r3, [r7, #12]

        if (scale <= 100UL)
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	2b64      	cmp	r3, #100	; 0x64
 8006bfe:	d807      	bhi.n	8006c10 <JPEG_GetQuality+0x78>
        {
          quality += (200UL - scale) / 2UL;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 8006c06:	085b      	lsrs	r3, r3, #1
 8006c08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c0a:	4413      	add	r3, r2
 8006c0c:	627b      	str	r3, [r7, #36]	; 0x24
 8006c0e:	e007      	b.n	8006c20 <JPEG_GetQuality+0x88>
        }
        else
        {
          quality += 5000UL / scale;
 8006c10:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c1c:	4413      	add	r3, r2
 8006c1e:	627b      	str	r3, [r7, #36]	; 0x24
    for (j = 0; j < 4UL; j++)
 8006c20:	69fb      	ldr	r3, [r7, #28]
 8006c22:	3301      	adds	r3, #1
 8006c24:	61fb      	str	r3, [r7, #28]
 8006c26:	69fb      	ldr	r3, [r7, #28]
 8006c28:	2b03      	cmp	r3, #3
 8006c2a:	d9c8      	bls.n	8006bbe <JPEG_GetQuality+0x26>
        }
      }
    }

    i += 4UL;
 8006c2c:	6a3b      	ldr	r3, [r7, #32]
 8006c2e:	3304      	adds	r3, #4
 8006c30:	623b      	str	r3, [r7, #32]
    tableAddress ++;
 8006c32:	69bb      	ldr	r3, [r7, #24]
 8006c34:	3304      	adds	r3, #4
 8006c36:	61bb      	str	r3, [r7, #24]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 8006c38:	6a3b      	ldr	r3, [r7, #32]
 8006c3a:	2b3c      	cmp	r3, #60	; 0x3c
 8006c3c:	d9b9      	bls.n	8006bb2 <JPEG_GetQuality+0x1a>
  }

  return (quality / 64UL);
 8006c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c40:	099b      	lsrs	r3, r3, #6
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	372c      	adds	r7, #44	; 0x2c
 8006c46:	46bd      	mov	sp, r7
 8006c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4c:	4770      	bx	lr
 8006c4e:	bf00      	nop
 8006c50:	08029e68 	.word	0x08029e68

08006c54 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b084      	sub	sp, #16
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d101      	bne.n	8006c66 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8006c62:	2301      	movs	r3, #1
 8006c64:	e0bf      	b.n	8006de6 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8006c6c:	b2db      	uxtb	r3, r3
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d106      	bne.n	8006c80 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2200      	movs	r2, #0
 8006c76:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f7fb f8c0 	bl	8001e00 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2202      	movs	r2, #2
 8006c84:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	699a      	ldr	r2, [r3, #24]
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8006c96:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	6999      	ldr	r1, [r3, #24]
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	685a      	ldr	r2, [r3, #4]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	689b      	ldr	r3, [r3, #8]
 8006ca6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006cac:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	691b      	ldr	r3, [r3, #16]
 8006cb2:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	430a      	orrs	r2, r1
 8006cba:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	6899      	ldr	r1, [r3, #8]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681a      	ldr	r2, [r3, #0]
 8006cc6:	4b4a      	ldr	r3, [pc, #296]	; (8006df0 <HAL_LTDC_Init+0x19c>)
 8006cc8:	400b      	ands	r3, r1
 8006cca:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	695b      	ldr	r3, [r3, #20]
 8006cd0:	041b      	lsls	r3, r3, #16
 8006cd2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	6899      	ldr	r1, [r3, #8]
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	699a      	ldr	r2, [r3, #24]
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	431a      	orrs	r2, r3
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	430a      	orrs	r2, r1
 8006ce8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	68d9      	ldr	r1, [r3, #12]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681a      	ldr	r2, [r3, #0]
 8006cf4:	4b3e      	ldr	r3, [pc, #248]	; (8006df0 <HAL_LTDC_Init+0x19c>)
 8006cf6:	400b      	ands	r3, r1
 8006cf8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	69db      	ldr	r3, [r3, #28]
 8006cfe:	041b      	lsls	r3, r3, #16
 8006d00:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	68d9      	ldr	r1, [r3, #12]
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6a1a      	ldr	r2, [r3, #32]
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	431a      	orrs	r2, r3
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	430a      	orrs	r2, r1
 8006d16:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	6919      	ldr	r1, [r3, #16]
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681a      	ldr	r2, [r3, #0]
 8006d22:	4b33      	ldr	r3, [pc, #204]	; (8006df0 <HAL_LTDC_Init+0x19c>)
 8006d24:	400b      	ands	r3, r1
 8006d26:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d2c:	041b      	lsls	r3, r3, #16
 8006d2e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	6919      	ldr	r1, [r3, #16]
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	431a      	orrs	r2, r3
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	430a      	orrs	r2, r1
 8006d44:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	6959      	ldr	r1, [r3, #20]
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681a      	ldr	r2, [r3, #0]
 8006d50:	4b27      	ldr	r3, [pc, #156]	; (8006df0 <HAL_LTDC_Init+0x19c>)
 8006d52:	400b      	ands	r3, r1
 8006d54:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d5a:	041b      	lsls	r3, r3, #16
 8006d5c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	6959      	ldr	r1, [r3, #20]
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	431a      	orrs	r2, r3
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	430a      	orrs	r2, r1
 8006d72:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006d7a:	021b      	lsls	r3, r3, #8
 8006d7c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006d84:	041b      	lsls	r3, r3, #16
 8006d86:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8006d96:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006d9e:	68ba      	ldr	r2, [r7, #8]
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	4313      	orrs	r3, r2
 8006da4:	687a      	ldr	r2, [r7, #4]
 8006da6:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8006daa:	431a      	orrs	r2, r3
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	430a      	orrs	r2, r1
 8006db2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f042 0206 	orr.w	r2, r2, #6
 8006dc2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	699a      	ldr	r2, [r3, #24]
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f042 0201 	orr.w	r2, r2, #1
 8006dd2:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2201      	movs	r2, #1
 8006de0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8006de4:	2300      	movs	r3, #0
}
 8006de6:	4618      	mov	r0, r3
 8006de8:	3710      	adds	r7, #16
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bd80      	pop	{r7, pc}
 8006dee:	bf00      	nop
 8006df0:	f000f800 	.word	0xf000f800

08006df4 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b084      	sub	sp, #16
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e02:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e0a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	f003 0304 	and.w	r3, r3, #4
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d023      	beq.n	8006e5e <HAL_LTDC_IRQHandler+0x6a>
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	f003 0304 	and.w	r3, r3, #4
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d01e      	beq.n	8006e5e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f022 0204 	bic.w	r2, r2, #4
 8006e2e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	2204      	movs	r2, #4
 8006e36:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006e3e:	f043 0201 	orr.w	r2, r3, #1
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2204      	movs	r2, #4
 8006e4c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2200      	movs	r2, #0
 8006e54:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	f000 f86f 	bl	8006f3c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	f003 0302 	and.w	r3, r3, #2
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d023      	beq.n	8006eb0 <HAL_LTDC_IRQHandler+0xbc>
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	f003 0302 	and.w	r3, r3, #2
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d01e      	beq.n	8006eb0 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f022 0202 	bic.w	r2, r2, #2
 8006e80:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	2202      	movs	r2, #2
 8006e88:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006e90:	f043 0202 	orr.w	r2, r3, #2
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2204      	movs	r2, #4
 8006e9e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f000 f846 	bl	8006f3c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	f003 0301 	and.w	r3, r3, #1
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d01b      	beq.n	8006ef2 <HAL_LTDC_IRQHandler+0xfe>
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	f003 0301 	and.w	r3, r3, #1
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d016      	beq.n	8006ef2 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f022 0201 	bic.w	r2, r2, #1
 8006ed2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	2201      	movs	r2, #1
 8006eda:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2201      	movs	r2, #1
 8006ee0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f000 f82f 	bl	8006f50 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	f003 0308 	and.w	r3, r3, #8
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d01b      	beq.n	8006f34 <HAL_LTDC_IRQHandler+0x140>
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	f003 0308 	and.w	r3, r3, #8
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d016      	beq.n	8006f34 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f022 0208 	bic.w	r2, r2, #8
 8006f14:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	2208      	movs	r2, #8
 8006f1c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2201      	movs	r2, #1
 8006f22:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f000 f818 	bl	8006f64 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8006f34:	bf00      	nop
 8006f36:	3710      	adds	r7, #16
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bd80      	pop	{r7, pc}

08006f3c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b083      	sub	sp, #12
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8006f44:	bf00      	nop
 8006f46:	370c      	adds	r7, #12
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4e:	4770      	bx	lr

08006f50 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006f50:	b480      	push	{r7}
 8006f52:	b083      	sub	sp, #12
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8006f58:	bf00      	nop
 8006f5a:	370c      	adds	r7, #12
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f62:	4770      	bx	lr

08006f64 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006f64:	b480      	push	{r7}
 8006f66:	b083      	sub	sp, #12
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8006f6c:	bf00      	nop
 8006f6e:	370c      	adds	r7, #12
 8006f70:	46bd      	mov	sp, r7
 8006f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f76:	4770      	bx	lr

08006f78 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006f78:	b5b0      	push	{r4, r5, r7, lr}
 8006f7a:	b084      	sub	sp, #16
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	60f8      	str	r0, [r7, #12]
 8006f80:	60b9      	str	r1, [r7, #8]
 8006f82:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8006f8a:	2b01      	cmp	r3, #1
 8006f8c:	d101      	bne.n	8006f92 <HAL_LTDC_ConfigLayer+0x1a>
 8006f8e:	2302      	movs	r3, #2
 8006f90:	e02c      	b.n	8006fec <HAL_LTDC_ConfigLayer+0x74>
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	2201      	movs	r2, #1
 8006f96:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	2202      	movs	r2, #2
 8006f9e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006fa2:	68fa      	ldr	r2, [r7, #12]
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2134      	movs	r1, #52	; 0x34
 8006fa8:	fb01 f303 	mul.w	r3, r1, r3
 8006fac:	4413      	add	r3, r2
 8006fae:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	4614      	mov	r4, r2
 8006fb6:	461d      	mov	r5, r3
 8006fb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006fba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006fbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006fbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006fc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006fc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006fc4:	682b      	ldr	r3, [r5, #0]
 8006fc6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006fc8:	687a      	ldr	r2, [r7, #4]
 8006fca:	68b9      	ldr	r1, [r7, #8]
 8006fcc:	68f8      	ldr	r0, [r7, #12]
 8006fce:	f000 f897 	bl	8007100 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	2201      	movs	r2, #1
 8006fde:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8006fea:	2300      	movs	r3, #0
}
 8006fec:	4618      	mov	r0, r3
 8006fee:	3710      	adds	r7, #16
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bdb0      	pop	{r4, r5, r7, pc}

08006ff4 <HAL_LTDC_SetPitch>:
  * @param  LinePitchInPixels  New line pitch in pixels to configure for LTDC layer 'LayerIdx'.
  * @param  LayerIdx           LTDC layer index concerned by the modification of line pitch.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetPitch(LTDC_HandleTypeDef *hltdc, uint32_t LinePitchInPixels, uint32_t LayerIdx)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b089      	sub	sp, #36	; 0x24
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	60f8      	str	r0, [r7, #12]
 8006ffc:	60b9      	str	r1, [r7, #8]
 8006ffe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8007006:	2b01      	cmp	r3, #1
 8007008:	d101      	bne.n	800700e <HAL_LTDC_SetPitch+0x1a>
 800700a:	2302      	movs	r3, #2
 800700c:	e06e      	b.n	80070ec <HAL_LTDC_SetPitch+0xf8>
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	2201      	movs	r2, #1
 8007012:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	2202      	movs	r2, #2
 800701a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* get LayerIdx used pixel format */
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 800701e:	68fa      	ldr	r2, [r7, #12]
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2134      	movs	r1, #52	; 0x34
 8007024:	fb01 f303 	mul.w	r3, r1, r3
 8007028:	4413      	add	r3, r2
 800702a:	3348      	adds	r3, #72	; 0x48
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	61bb      	str	r3, [r7, #24]

  if (pixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8007030:	69bb      	ldr	r3, [r7, #24]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d102      	bne.n	800703c <HAL_LTDC_SetPitch+0x48>
  {
    tmp = 4U;
 8007036:	2304      	movs	r3, #4
 8007038:	61fb      	str	r3, [r7, #28]
 800703a:	e016      	b.n	800706a <HAL_LTDC_SetPitch+0x76>
  }
  else if (pixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800703c:	69bb      	ldr	r3, [r7, #24]
 800703e:	2b01      	cmp	r3, #1
 8007040:	d102      	bne.n	8007048 <HAL_LTDC_SetPitch+0x54>
  {
    tmp = 3U;
 8007042:	2303      	movs	r3, #3
 8007044:	61fb      	str	r3, [r7, #28]
 8007046:	e010      	b.n	800706a <HAL_LTDC_SetPitch+0x76>
  }
  else if ((pixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007048:	69bb      	ldr	r3, [r7, #24]
 800704a:	2b04      	cmp	r3, #4
 800704c:	d008      	beq.n	8007060 <HAL_LTDC_SetPitch+0x6c>
 800704e:	69bb      	ldr	r3, [r7, #24]
 8007050:	2b02      	cmp	r3, #2
 8007052:	d005      	beq.n	8007060 <HAL_LTDC_SetPitch+0x6c>
           (pixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007054:	69bb      	ldr	r3, [r7, #24]
 8007056:	2b03      	cmp	r3, #3
 8007058:	d002      	beq.n	8007060 <HAL_LTDC_SetPitch+0x6c>
           (pixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800705a:	69bb      	ldr	r3, [r7, #24]
 800705c:	2b07      	cmp	r3, #7
 800705e:	d102      	bne.n	8007066 <HAL_LTDC_SetPitch+0x72>
           (pixelFormat == LTDC_PIXEL_FORMAT_AL88))
  {
    tmp = 2U;
 8007060:	2302      	movs	r3, #2
 8007062:	61fb      	str	r3, [r7, #28]
 8007064:	e001      	b.n	800706a <HAL_LTDC_SetPitch+0x76>
  }
  else
  {
    tmp = 1U;
 8007066:	2301      	movs	r3, #1
 8007068:	61fb      	str	r3, [r7, #28]
  }

  pitchUpdate = ((LinePitchInPixels * tmp) << 16U);
 800706a:	68bb      	ldr	r3, [r7, #8]
 800706c:	69fa      	ldr	r2, [r7, #28]
 800706e:	fb02 f303 	mul.w	r3, r2, r3
 8007072:	041b      	lsls	r3, r3, #16
 8007074:	617b      	str	r3, [r7, #20]

  /* Clear previously set standard pitch */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	461a      	mov	r2, r3
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	01db      	lsls	r3, r3, #7
 8007080:	4413      	add	r3, r2
 8007082:	3384      	adds	r3, #132	; 0x84
 8007084:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4619      	mov	r1, r3
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	01db      	lsls	r3, r3, #7
 8007090:	440b      	add	r3, r1
 8007092:	3384      	adds	r3, #132	; 0x84
 8007094:	4619      	mov	r1, r3
 8007096:	4b18      	ldr	r3, [pc, #96]	; (80070f8 <HAL_LTDC_SetPitch+0x104>)
 8007098:	4013      	ands	r3, r2
 800709a:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Set the Reload type as immediate update of LTDC pitch configured above */
  LTDC->SRCR |= LTDC_SRCR_IMR;
 800709c:	4b17      	ldr	r3, [pc, #92]	; (80070fc <HAL_LTDC_SetPitch+0x108>)
 800709e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070a0:	4a16      	ldr	r2, [pc, #88]	; (80070fc <HAL_LTDC_SetPitch+0x108>)
 80070a2:	f043 0301 	orr.w	r3, r3, #1
 80070a6:	6253      	str	r3, [r2, #36]	; 0x24

  /* Set new line pitch value */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR |= pitchUpdate;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	461a      	mov	r2, r3
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	01db      	lsls	r3, r3, #7
 80070b2:	4413      	add	r3, r2
 80070b4:	3384      	adds	r3, #132	; 0x84
 80070b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4619      	mov	r1, r3
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	01db      	lsls	r3, r3, #7
 80070c2:	440b      	add	r3, r1
 80070c4:	3384      	adds	r3, #132	; 0x84
 80070c6:	4619      	mov	r1, r3
 80070c8:	697b      	ldr	r3, [r7, #20]
 80070ca:	4313      	orrs	r3, r2
 80070cc:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Set the Reload type as immediate update of LTDC pitch configured above */
  LTDC->SRCR |= LTDC_SRCR_IMR;
 80070ce:	4b0b      	ldr	r3, [pc, #44]	; (80070fc <HAL_LTDC_SetPitch+0x108>)
 80070d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070d2:	4a0a      	ldr	r2, [pc, #40]	; (80070fc <HAL_LTDC_SetPitch+0x108>)
 80070d4:	f043 0301 	orr.w	r3, r3, #1
 80070d8:	6253      	str	r3, [r2, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	2201      	movs	r2, #1
 80070de:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	2200      	movs	r2, #0
 80070e6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80070ea:	2300      	movs	r3, #0
}
 80070ec:	4618      	mov	r0, r3
 80070ee:	3724      	adds	r7, #36	; 0x24
 80070f0:	46bd      	mov	sp, r7
 80070f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f6:	4770      	bx	lr
 80070f8:	e000ffff 	.word	0xe000ffff
 80070fc:	40016800 	.word	0x40016800

08007100 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007100:	b480      	push	{r7}
 8007102:	b089      	sub	sp, #36	; 0x24
 8007104:	af00      	add	r7, sp, #0
 8007106:	60f8      	str	r0, [r7, #12]
 8007108:	60b9      	str	r1, [r7, #8]
 800710a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	685a      	ldr	r2, [r3, #4]
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	68db      	ldr	r3, [r3, #12]
 8007116:	0c1b      	lsrs	r3, r3, #16
 8007118:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800711c:	4413      	add	r3, r2
 800711e:	041b      	lsls	r3, r3, #16
 8007120:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	461a      	mov	r2, r3
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	01db      	lsls	r3, r3, #7
 800712c:	4413      	add	r3, r2
 800712e:	3384      	adds	r3, #132	; 0x84
 8007130:	685b      	ldr	r3, [r3, #4]
 8007132:	68fa      	ldr	r2, [r7, #12]
 8007134:	6812      	ldr	r2, [r2, #0]
 8007136:	4611      	mov	r1, r2
 8007138:	687a      	ldr	r2, [r7, #4]
 800713a:	01d2      	lsls	r2, r2, #7
 800713c:	440a      	add	r2, r1
 800713e:	3284      	adds	r2, #132	; 0x84
 8007140:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8007144:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	68db      	ldr	r3, [r3, #12]
 8007150:	0c1b      	lsrs	r3, r3, #16
 8007152:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007156:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007158:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4619      	mov	r1, r3
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	01db      	lsls	r3, r3, #7
 8007164:	440b      	add	r3, r1
 8007166:	3384      	adds	r3, #132	; 0x84
 8007168:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800716a:	69fb      	ldr	r3, [r7, #28]
 800716c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800716e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	68da      	ldr	r2, [r3, #12]
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	68db      	ldr	r3, [r3, #12]
 800717a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800717e:	4413      	add	r3, r2
 8007180:	041b      	lsls	r3, r3, #16
 8007182:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	461a      	mov	r2, r3
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	01db      	lsls	r3, r3, #7
 800718e:	4413      	add	r3, r2
 8007190:	3384      	adds	r3, #132	; 0x84
 8007192:	689b      	ldr	r3, [r3, #8]
 8007194:	68fa      	ldr	r2, [r7, #12]
 8007196:	6812      	ldr	r2, [r2, #0]
 8007198:	4611      	mov	r1, r2
 800719a:	687a      	ldr	r2, [r7, #4]
 800719c:	01d2      	lsls	r2, r2, #7
 800719e:	440a      	add	r2, r1
 80071a0:	3284      	adds	r2, #132	; 0x84
 80071a2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80071a6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	689a      	ldr	r2, [r3, #8]
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	68db      	ldr	r3, [r3, #12]
 80071b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80071b6:	4413      	add	r3, r2
 80071b8:	1c5a      	adds	r2, r3, #1
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	4619      	mov	r1, r3
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	01db      	lsls	r3, r3, #7
 80071c4:	440b      	add	r3, r1
 80071c6:	3384      	adds	r3, #132	; 0x84
 80071c8:	4619      	mov	r1, r3
 80071ca:	69fb      	ldr	r3, [r7, #28]
 80071cc:	4313      	orrs	r3, r2
 80071ce:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	461a      	mov	r2, r3
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	01db      	lsls	r3, r3, #7
 80071da:	4413      	add	r3, r2
 80071dc:	3384      	adds	r3, #132	; 0x84
 80071de:	691b      	ldr	r3, [r3, #16]
 80071e0:	68fa      	ldr	r2, [r7, #12]
 80071e2:	6812      	ldr	r2, [r2, #0]
 80071e4:	4611      	mov	r1, r2
 80071e6:	687a      	ldr	r2, [r7, #4]
 80071e8:	01d2      	lsls	r2, r2, #7
 80071ea:	440a      	add	r2, r1
 80071ec:	3284      	adds	r2, #132	; 0x84
 80071ee:	f023 0307 	bic.w	r3, r3, #7
 80071f2:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	461a      	mov	r2, r3
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	01db      	lsls	r3, r3, #7
 80071fe:	4413      	add	r3, r2
 8007200:	3384      	adds	r3, #132	; 0x84
 8007202:	461a      	mov	r2, r3
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	691b      	ldr	r3, [r3, #16]
 8007208:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007210:	021b      	lsls	r3, r3, #8
 8007212:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800721a:	041b      	lsls	r3, r3, #16
 800721c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	699b      	ldr	r3, [r3, #24]
 8007222:	061b      	lsls	r3, r3, #24
 8007224:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	461a      	mov	r2, r3
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	01db      	lsls	r3, r3, #7
 8007230:	4413      	add	r3, r2
 8007232:	3384      	adds	r3, #132	; 0x84
 8007234:	699b      	ldr	r3, [r3, #24]
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	461a      	mov	r2, r3
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	01db      	lsls	r3, r3, #7
 8007240:	4413      	add	r3, r2
 8007242:	3384      	adds	r3, #132	; 0x84
 8007244:	461a      	mov	r2, r3
 8007246:	2300      	movs	r3, #0
 8007248:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007250:	461a      	mov	r2, r3
 8007252:	69fb      	ldr	r3, [r7, #28]
 8007254:	431a      	orrs	r2, r3
 8007256:	69bb      	ldr	r3, [r7, #24]
 8007258:	431a      	orrs	r2, r3
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4619      	mov	r1, r3
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	01db      	lsls	r3, r3, #7
 8007264:	440b      	add	r3, r1
 8007266:	3384      	adds	r3, #132	; 0x84
 8007268:	4619      	mov	r1, r3
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	4313      	orrs	r3, r2
 800726e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	461a      	mov	r2, r3
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	01db      	lsls	r3, r3, #7
 800727a:	4413      	add	r3, r2
 800727c:	3384      	adds	r3, #132	; 0x84
 800727e:	695b      	ldr	r3, [r3, #20]
 8007280:	68fa      	ldr	r2, [r7, #12]
 8007282:	6812      	ldr	r2, [r2, #0]
 8007284:	4611      	mov	r1, r2
 8007286:	687a      	ldr	r2, [r7, #4]
 8007288:	01d2      	lsls	r2, r2, #7
 800728a:	440a      	add	r2, r1
 800728c:	3284      	adds	r2, #132	; 0x84
 800728e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007292:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	461a      	mov	r2, r3
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	01db      	lsls	r3, r3, #7
 800729e:	4413      	add	r3, r2
 80072a0:	3384      	adds	r3, #132	; 0x84
 80072a2:	461a      	mov	r2, r3
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	695b      	ldr	r3, [r3, #20]
 80072a8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	461a      	mov	r2, r3
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	01db      	lsls	r3, r3, #7
 80072b4:	4413      	add	r3, r2
 80072b6:	3384      	adds	r3, #132	; 0x84
 80072b8:	69da      	ldr	r2, [r3, #28]
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4619      	mov	r1, r3
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	01db      	lsls	r3, r3, #7
 80072c4:	440b      	add	r3, r1
 80072c6:	3384      	adds	r3, #132	; 0x84
 80072c8:	4619      	mov	r1, r3
 80072ca:	4b58      	ldr	r3, [pc, #352]	; (800742c <LTDC_SetConfig+0x32c>)
 80072cc:	4013      	ands	r3, r2
 80072ce:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	69da      	ldr	r2, [r3, #28]
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	6a1b      	ldr	r3, [r3, #32]
 80072d8:	68f9      	ldr	r1, [r7, #12]
 80072da:	6809      	ldr	r1, [r1, #0]
 80072dc:	4608      	mov	r0, r1
 80072de:	6879      	ldr	r1, [r7, #4]
 80072e0:	01c9      	lsls	r1, r1, #7
 80072e2:	4401      	add	r1, r0
 80072e4:	3184      	adds	r1, #132	; 0x84
 80072e6:	4313      	orrs	r3, r2
 80072e8:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	461a      	mov	r2, r3
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	01db      	lsls	r3, r3, #7
 80072f4:	4413      	add	r3, r2
 80072f6:	3384      	adds	r3, #132	; 0x84
 80072f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	461a      	mov	r2, r3
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	01db      	lsls	r3, r3, #7
 8007304:	4413      	add	r3, r2
 8007306:	3384      	adds	r3, #132	; 0x84
 8007308:	461a      	mov	r2, r3
 800730a:	2300      	movs	r3, #0
 800730c:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	461a      	mov	r2, r3
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	01db      	lsls	r3, r3, #7
 8007318:	4413      	add	r3, r2
 800731a:	3384      	adds	r3, #132	; 0x84
 800731c:	461a      	mov	r2, r3
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007322:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	691b      	ldr	r3, [r3, #16]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d102      	bne.n	8007332 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800732c:	2304      	movs	r3, #4
 800732e:	61fb      	str	r3, [r7, #28]
 8007330:	e01b      	b.n	800736a <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8007332:	68bb      	ldr	r3, [r7, #8]
 8007334:	691b      	ldr	r3, [r3, #16]
 8007336:	2b01      	cmp	r3, #1
 8007338:	d102      	bne.n	8007340 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800733a:	2303      	movs	r3, #3
 800733c:	61fb      	str	r3, [r7, #28]
 800733e:	e014      	b.n	800736a <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	691b      	ldr	r3, [r3, #16]
 8007344:	2b04      	cmp	r3, #4
 8007346:	d00b      	beq.n	8007360 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800734c:	2b02      	cmp	r3, #2
 800734e:	d007      	beq.n	8007360 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007354:	2b03      	cmp	r3, #3
 8007356:	d003      	beq.n	8007360 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800735c:	2b07      	cmp	r3, #7
 800735e:	d102      	bne.n	8007366 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8007360:	2302      	movs	r3, #2
 8007362:	61fb      	str	r3, [r7, #28]
 8007364:	e001      	b.n	800736a <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8007366:	2301      	movs	r3, #1
 8007368:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	461a      	mov	r2, r3
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	01db      	lsls	r3, r3, #7
 8007374:	4413      	add	r3, r2
 8007376:	3384      	adds	r3, #132	; 0x84
 8007378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800737a:	68fa      	ldr	r2, [r7, #12]
 800737c:	6812      	ldr	r2, [r2, #0]
 800737e:	4611      	mov	r1, r2
 8007380:	687a      	ldr	r2, [r7, #4]
 8007382:	01d2      	lsls	r2, r2, #7
 8007384:	440a      	add	r2, r1
 8007386:	3284      	adds	r2, #132	; 0x84
 8007388:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800738c:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007392:	69fa      	ldr	r2, [r7, #28]
 8007394:	fb02 f303 	mul.w	r3, r2, r3
 8007398:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	6859      	ldr	r1, [r3, #4]
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	1acb      	subs	r3, r1, r3
 80073a4:	69f9      	ldr	r1, [r7, #28]
 80073a6:	fb01 f303 	mul.w	r3, r1, r3
 80073aa:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80073ac:	68f9      	ldr	r1, [r7, #12]
 80073ae:	6809      	ldr	r1, [r1, #0]
 80073b0:	4608      	mov	r0, r1
 80073b2:	6879      	ldr	r1, [r7, #4]
 80073b4:	01c9      	lsls	r1, r1, #7
 80073b6:	4401      	add	r1, r0
 80073b8:	3184      	adds	r1, #132	; 0x84
 80073ba:	4313      	orrs	r3, r2
 80073bc:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	461a      	mov	r2, r3
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	01db      	lsls	r3, r3, #7
 80073c8:	4413      	add	r3, r2
 80073ca:	3384      	adds	r3, #132	; 0x84
 80073cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	4619      	mov	r1, r3
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	01db      	lsls	r3, r3, #7
 80073d8:	440b      	add	r3, r1
 80073da:	3384      	adds	r3, #132	; 0x84
 80073dc:	4619      	mov	r1, r3
 80073de:	4b14      	ldr	r3, [pc, #80]	; (8007430 <LTDC_SetConfig+0x330>)
 80073e0:	4013      	ands	r3, r2
 80073e2:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	461a      	mov	r2, r3
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	01db      	lsls	r3, r3, #7
 80073ee:	4413      	add	r3, r2
 80073f0:	3384      	adds	r3, #132	; 0x84
 80073f2:	461a      	mov	r2, r3
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073f8:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	461a      	mov	r2, r3
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	01db      	lsls	r3, r3, #7
 8007404:	4413      	add	r3, r2
 8007406:	3384      	adds	r3, #132	; 0x84
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	68fa      	ldr	r2, [r7, #12]
 800740c:	6812      	ldr	r2, [r2, #0]
 800740e:	4611      	mov	r1, r2
 8007410:	687a      	ldr	r2, [r7, #4]
 8007412:	01d2      	lsls	r2, r2, #7
 8007414:	440a      	add	r2, r1
 8007416:	3284      	adds	r2, #132	; 0x84
 8007418:	f043 0301 	orr.w	r3, r3, #1
 800741c:	6013      	str	r3, [r2, #0]
}
 800741e:	bf00      	nop
 8007420:	3724      	adds	r7, #36	; 0x24
 8007422:	46bd      	mov	sp, r7
 8007424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007428:	4770      	bx	lr
 800742a:	bf00      	nop
 800742c:	fffff8f8 	.word	0xfffff8f8
 8007430:	fffff800 	.word	0xfffff800

08007434 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b082      	sub	sp, #8
 8007438:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800743a:	2300      	movs	r3, #0
 800743c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800743e:	4b23      	ldr	r3, [pc, #140]	; (80074cc <HAL_PWREx_EnableOverDrive+0x98>)
 8007440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007442:	4a22      	ldr	r2, [pc, #136]	; (80074cc <HAL_PWREx_EnableOverDrive+0x98>)
 8007444:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007448:	6413      	str	r3, [r2, #64]	; 0x40
 800744a:	4b20      	ldr	r3, [pc, #128]	; (80074cc <HAL_PWREx_EnableOverDrive+0x98>)
 800744c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800744e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007452:	603b      	str	r3, [r7, #0]
 8007454:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8007456:	4b1e      	ldr	r3, [pc, #120]	; (80074d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	4a1d      	ldr	r2, [pc, #116]	; (80074d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800745c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007460:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007462:	f7fb fb15 	bl	8002a90 <HAL_GetTick>
 8007466:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007468:	e009      	b.n	800747e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800746a:	f7fb fb11 	bl	8002a90 <HAL_GetTick>
 800746e:	4602      	mov	r2, r0
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	1ad3      	subs	r3, r2, r3
 8007474:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007478:	d901      	bls.n	800747e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800747a:	2303      	movs	r3, #3
 800747c:	e022      	b.n	80074c4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800747e:	4b14      	ldr	r3, [pc, #80]	; (80074d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007480:	685b      	ldr	r3, [r3, #4]
 8007482:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007486:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800748a:	d1ee      	bne.n	800746a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800748c:	4b10      	ldr	r3, [pc, #64]	; (80074d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a0f      	ldr	r2, [pc, #60]	; (80074d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007492:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007496:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007498:	f7fb fafa 	bl	8002a90 <HAL_GetTick>
 800749c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800749e:	e009      	b.n	80074b4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80074a0:	f7fb faf6 	bl	8002a90 <HAL_GetTick>
 80074a4:	4602      	mov	r2, r0
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	1ad3      	subs	r3, r2, r3
 80074aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80074ae:	d901      	bls.n	80074b4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80074b0:	2303      	movs	r3, #3
 80074b2:	e007      	b.n	80074c4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80074b4:	4b06      	ldr	r3, [pc, #24]	; (80074d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80074b6:	685b      	ldr	r3, [r3, #4]
 80074b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80074c0:	d1ee      	bne.n	80074a0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80074c2:	2300      	movs	r3, #0
}
 80074c4:	4618      	mov	r0, r3
 80074c6:	3708      	adds	r7, #8
 80074c8:	46bd      	mov	sp, r7
 80074ca:	bd80      	pop	{r7, pc}
 80074cc:	40023800 	.word	0x40023800
 80074d0:	40007000 	.word	0x40007000

080074d4 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b086      	sub	sp, #24
 80074d8:	af02      	add	r7, sp, #8
 80074da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80074dc:	f7fb fad8 	bl	8002a90 <HAL_GetTick>
 80074e0:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d101      	bne.n	80074ec <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80074e8:	2301      	movs	r3, #1
 80074ea:	e067      	b.n	80075bc <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80074f2:	b2db      	uxtb	r3, r3
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d10b      	bne.n	8007510 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2200      	movs	r2, #0
 80074fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	f7fa fcc3 	bl	8001e8c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8007506:	f241 3188 	movw	r1, #5000	; 0x1388
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f000 fac4 	bl	8007a98 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	689b      	ldr	r3, [r3, #8]
 800751e:	3b01      	subs	r3, #1
 8007520:	021a      	lsls	r2, r3, #8
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	430a      	orrs	r2, r1
 8007528:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800752e:	9300      	str	r3, [sp, #0]
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	2200      	movs	r2, #0
 8007534:	2120      	movs	r1, #32
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f000 fabc 	bl	8007ab4 <QSPI_WaitFlagStateUntilTimeout>
 800753c:	4603      	mov	r3, r0
 800753e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8007540:	7afb      	ldrb	r3, [r7, #11]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d135      	bne.n	80075b2 <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	681a      	ldr	r2, [r3, #0]
 800754c:	4b1d      	ldr	r3, [pc, #116]	; (80075c4 <HAL_QSPI_Init+0xf0>)
 800754e:	4013      	ands	r3, r2
 8007550:	687a      	ldr	r2, [r7, #4]
 8007552:	6852      	ldr	r2, [r2, #4]
 8007554:	0611      	lsls	r1, r2, #24
 8007556:	687a      	ldr	r2, [r7, #4]
 8007558:	68d2      	ldr	r2, [r2, #12]
 800755a:	4311      	orrs	r1, r2
 800755c:	687a      	ldr	r2, [r7, #4]
 800755e:	69d2      	ldr	r2, [r2, #28]
 8007560:	4311      	orrs	r1, r2
 8007562:	687a      	ldr	r2, [r7, #4]
 8007564:	6a12      	ldr	r2, [r2, #32]
 8007566:	4311      	orrs	r1, r2
 8007568:	687a      	ldr	r2, [r7, #4]
 800756a:	6812      	ldr	r2, [r2, #0]
 800756c:	430b      	orrs	r3, r1
 800756e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	685a      	ldr	r2, [r3, #4]
 8007576:	4b14      	ldr	r3, [pc, #80]	; (80075c8 <HAL_QSPI_Init+0xf4>)
 8007578:	4013      	ands	r3, r2
 800757a:	687a      	ldr	r2, [r7, #4]
 800757c:	6912      	ldr	r2, [r2, #16]
 800757e:	0411      	lsls	r1, r2, #16
 8007580:	687a      	ldr	r2, [r7, #4]
 8007582:	6952      	ldr	r2, [r2, #20]
 8007584:	4311      	orrs	r1, r2
 8007586:	687a      	ldr	r2, [r7, #4]
 8007588:	6992      	ldr	r2, [r2, #24]
 800758a:	4311      	orrs	r1, r2
 800758c:	687a      	ldr	r2, [r7, #4]
 800758e:	6812      	ldr	r2, [r2, #0]
 8007590:	430b      	orrs	r3, r1
 8007592:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	681a      	ldr	r2, [r3, #0]
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f042 0201 	orr.w	r2, r2, #1
 80075a2:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2200      	movs	r2, #0
 80075a8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2201      	movs	r2, #1
 80075ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2200      	movs	r2, #0
 80075b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80075ba:	7afb      	ldrb	r3, [r7, #11]
}
 80075bc:	4618      	mov	r0, r3
 80075be:	3710      	adds	r7, #16
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bd80      	pop	{r7, pc}
 80075c4:	00ffff2f 	.word	0x00ffff2f
 80075c8:	ffe0f8fe 	.word	0xffe0f8fe

080075cc <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b088      	sub	sp, #32
 80075d0:	af02      	add	r7, sp, #8
 80075d2:	60f8      	str	r0, [r7, #12]
 80075d4:	60b9      	str	r1, [r7, #8]
 80075d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80075d8:	f7fb fa5a 	bl	8002a90 <HAL_GetTick>
 80075dc:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80075e4:	b2db      	uxtb	r3, r3
 80075e6:	2b01      	cmp	r3, #1
 80075e8:	d101      	bne.n	80075ee <HAL_QSPI_Command+0x22>
 80075ea:	2302      	movs	r3, #2
 80075ec:	e048      	b.n	8007680 <HAL_QSPI_Command+0xb4>
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	2201      	movs	r2, #1
 80075f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80075fc:	b2db      	uxtb	r3, r3
 80075fe:	2b01      	cmp	r3, #1
 8007600:	d137      	bne.n	8007672 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	2200      	movs	r2, #0
 8007606:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	2202      	movs	r2, #2
 800760c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	9300      	str	r3, [sp, #0]
 8007614:	693b      	ldr	r3, [r7, #16]
 8007616:	2200      	movs	r2, #0
 8007618:	2120      	movs	r1, #32
 800761a:	68f8      	ldr	r0, [r7, #12]
 800761c:	f000 fa4a 	bl	8007ab4 <QSPI_WaitFlagStateUntilTimeout>
 8007620:	4603      	mov	r3, r0
 8007622:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8007624:	7dfb      	ldrb	r3, [r7, #23]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d125      	bne.n	8007676 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800762a:	2200      	movs	r2, #0
 800762c:	68b9      	ldr	r1, [r7, #8]
 800762e:	68f8      	ldr	r0, [r7, #12]
 8007630:	f000 fa77 	bl	8007b22 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007638:	2b00      	cmp	r3, #0
 800763a:	d115      	bne.n	8007668 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	9300      	str	r3, [sp, #0]
 8007640:	693b      	ldr	r3, [r7, #16]
 8007642:	2201      	movs	r2, #1
 8007644:	2102      	movs	r1, #2
 8007646:	68f8      	ldr	r0, [r7, #12]
 8007648:	f000 fa34 	bl	8007ab4 <QSPI_WaitFlagStateUntilTimeout>
 800764c:	4603      	mov	r3, r0
 800764e:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8007650:	7dfb      	ldrb	r3, [r7, #23]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d10f      	bne.n	8007676 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	2202      	movs	r2, #2
 800765c:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	2201      	movs	r2, #1
 8007662:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007666:	e006      	b.n	8007676 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	2201      	movs	r2, #1
 800766c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007670:	e001      	b.n	8007676 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8007672:	2302      	movs	r3, #2
 8007674:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	2200      	movs	r2, #0
 800767a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800767e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007680:	4618      	mov	r0, r3
 8007682:	3718      	adds	r7, #24
 8007684:	46bd      	mov	sp, r7
 8007686:	bd80      	pop	{r7, pc}

08007688 <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b08a      	sub	sp, #40	; 0x28
 800768c:	af02      	add	r7, sp, #8
 800768e:	60f8      	str	r0, [r7, #12]
 8007690:	60b9      	str	r1, [r7, #8]
 8007692:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007694:	2300      	movs	r3, #0
 8007696:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8007698:	f7fb f9fa 	bl	8002a90 <HAL_GetTick>
 800769c:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	3320      	adds	r3, #32
 80076a4:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80076ac:	b2db      	uxtb	r3, r3
 80076ae:	2b01      	cmp	r3, #1
 80076b0:	d101      	bne.n	80076b6 <HAL_QSPI_Transmit+0x2e>
 80076b2:	2302      	movs	r3, #2
 80076b4:	e076      	b.n	80077a4 <HAL_QSPI_Transmit+0x11c>
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	2201      	movs	r2, #1
 80076ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80076c4:	b2db      	uxtb	r3, r3
 80076c6:	2b01      	cmp	r3, #1
 80076c8:	d165      	bne.n	8007796 <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	2200      	movs	r2, #0
 80076ce:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d056      	beq.n	8007784 <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	2212      	movs	r2, #18
 80076da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	691b      	ldr	r3, [r3, #16]
 80076e4:	1c5a      	adds	r2, r3, #1
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	691b      	ldr	r3, [r3, #16]
 80076f0:	1c5a      	adds	r2, r3, #1
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	68ba      	ldr	r2, [r7, #8]
 80076fa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	695a      	ldr	r2, [r3, #20]
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800770a:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 800770c:	e01b      	b.n	8007746 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	9300      	str	r3, [sp, #0]
 8007712:	69bb      	ldr	r3, [r7, #24]
 8007714:	2201      	movs	r2, #1
 8007716:	2104      	movs	r1, #4
 8007718:	68f8      	ldr	r0, [r7, #12]
 800771a:	f000 f9cb 	bl	8007ab4 <QSPI_WaitFlagStateUntilTimeout>
 800771e:	4603      	mov	r3, r0
 8007720:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8007722:	7ffb      	ldrb	r3, [r7, #31]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d113      	bne.n	8007750 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800772c:	781a      	ldrb	r2, [r3, #0]
 800772e:	697b      	ldr	r3, [r7, #20]
 8007730:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007736:	1c5a      	adds	r2, r3, #1
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007740:	1e5a      	subs	r2, r3, #1
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800774a:	2b00      	cmp	r3, #0
 800774c:	d1df      	bne.n	800770e <HAL_QSPI_Transmit+0x86>
 800774e:	e000      	b.n	8007752 <HAL_QSPI_Transmit+0xca>
          break;
 8007750:	bf00      	nop
      }

      if (status == HAL_OK)
 8007752:	7ffb      	ldrb	r3, [r7, #31]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d110      	bne.n	800777a <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	9300      	str	r3, [sp, #0]
 800775c:	69bb      	ldr	r3, [r7, #24]
 800775e:	2201      	movs	r2, #1
 8007760:	2102      	movs	r1, #2
 8007762:	68f8      	ldr	r0, [r7, #12]
 8007764:	f000 f9a6 	bl	8007ab4 <QSPI_WaitFlagStateUntilTimeout>
 8007768:	4603      	mov	r3, r0
 800776a:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 800776c:	7ffb      	ldrb	r3, [r7, #31]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d103      	bne.n	800777a <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	2202      	movs	r2, #2
 8007778:	60da      	str	r2, [r3, #12]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	2201      	movs	r2, #1
 800777e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007782:	e00a      	b.n	800779a <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007788:	f043 0208 	orr.w	r2, r3, #8
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 8007790:	2301      	movs	r3, #1
 8007792:	77fb      	strb	r3, [r7, #31]
 8007794:	e001      	b.n	800779a <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
 8007796:	2302      	movs	r3, #2
 8007798:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	2200      	movs	r2, #0
 800779e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 80077a2:	7ffb      	ldrb	r3, [r7, #31]
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	3720      	adds	r7, #32
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}

080077ac <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b08a      	sub	sp, #40	; 0x28
 80077b0:	af02      	add	r7, sp, #8
 80077b2:	60f8      	str	r0, [r7, #12]
 80077b4:	60b9      	str	r1, [r7, #8]
 80077b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80077b8:	2300      	movs	r3, #0
 80077ba:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 80077bc:	f7fb f968 	bl	8002a90 <HAL_GetTick>
 80077c0:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	699b      	ldr	r3, [r3, #24]
 80077c8:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	3320      	adds	r3, #32
 80077d0:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80077d8:	b2db      	uxtb	r3, r3
 80077da:	2b01      	cmp	r3, #1
 80077dc:	d101      	bne.n	80077e2 <HAL_QSPI_Receive+0x36>
 80077de:	2302      	movs	r3, #2
 80077e0:	e07d      	b.n	80078de <HAL_QSPI_Receive+0x132>
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	2201      	movs	r2, #1
 80077e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80077f0:	b2db      	uxtb	r3, r3
 80077f2:	2b01      	cmp	r3, #1
 80077f4:	d16c      	bne.n	80078d0 <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	2200      	movs	r2, #0
 80077fa:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d05d      	beq.n	80078be <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	2222      	movs	r2, #34	; 0x22
 8007806:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	691b      	ldr	r3, [r3, #16]
 8007810:	1c5a      	adds	r2, r3, #1
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	691b      	ldr	r3, [r3, #16]
 800781c:	1c5a      	adds	r2, r3, #1
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	68ba      	ldr	r2, [r7, #8]
 8007826:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	695b      	ldr	r3, [r3, #20]
 800782e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800783a:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	697a      	ldr	r2, [r7, #20]
 8007842:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 8007844:	e01c      	b.n	8007880 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	9300      	str	r3, [sp, #0]
 800784a:	69bb      	ldr	r3, [r7, #24]
 800784c:	2201      	movs	r2, #1
 800784e:	2106      	movs	r1, #6
 8007850:	68f8      	ldr	r0, [r7, #12]
 8007852:	f000 f92f 	bl	8007ab4 <QSPI_WaitFlagStateUntilTimeout>
 8007856:	4603      	mov	r3, r0
 8007858:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 800785a:	7ffb      	ldrb	r3, [r7, #31]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d114      	bne.n	800788a <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007864:	693a      	ldr	r2, [r7, #16]
 8007866:	7812      	ldrb	r2, [r2, #0]
 8007868:	b2d2      	uxtb	r2, r2
 800786a:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007870:	1c5a      	adds	r2, r3, #1
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800787a:	1e5a      	subs	r2, r3, #1
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007884:	2b00      	cmp	r3, #0
 8007886:	d1de      	bne.n	8007846 <HAL_QSPI_Receive+0x9a>
 8007888:	e000      	b.n	800788c <HAL_QSPI_Receive+0xe0>
          break;
 800788a:	bf00      	nop
      }

      if (status == HAL_OK)
 800788c:	7ffb      	ldrb	r3, [r7, #31]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d110      	bne.n	80078b4 <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	9300      	str	r3, [sp, #0]
 8007896:	69bb      	ldr	r3, [r7, #24]
 8007898:	2201      	movs	r2, #1
 800789a:	2102      	movs	r1, #2
 800789c:	68f8      	ldr	r0, [r7, #12]
 800789e:	f000 f909 	bl	8007ab4 <QSPI_WaitFlagStateUntilTimeout>
 80078a2:	4603      	mov	r3, r0
 80078a4:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 80078a6:	7ffb      	ldrb	r3, [r7, #31]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d103      	bne.n	80078b4 <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	2202      	movs	r2, #2
 80078b2:	60da      	str	r2, [r3, #12]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	2201      	movs	r2, #1
 80078b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80078bc:	e00a      	b.n	80078d4 <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078c2:	f043 0208 	orr.w	r2, r3, #8
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 80078ca:	2301      	movs	r3, #1
 80078cc:	77fb      	strb	r3, [r7, #31]
 80078ce:	e001      	b.n	80078d4 <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
 80078d0:	2302      	movs	r3, #2
 80078d2:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	2200      	movs	r2, #0
 80078d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 80078dc:	7ffb      	ldrb	r3, [r7, #31]
}
 80078de:	4618      	mov	r0, r3
 80078e0:	3720      	adds	r7, #32
 80078e2:	46bd      	mov	sp, r7
 80078e4:	bd80      	pop	{r7, pc}

080078e6 <HAL_QSPI_AutoPolling>:
  * @param  Timeout Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 80078e6:	b580      	push	{r7, lr}
 80078e8:	b088      	sub	sp, #32
 80078ea:	af02      	add	r7, sp, #8
 80078ec:	60f8      	str	r0, [r7, #12]
 80078ee:	60b9      	str	r1, [r7, #8]
 80078f0:	607a      	str	r2, [r7, #4]
 80078f2:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80078f4:	f7fb f8cc 	bl	8002a90 <HAL_GetTick>
 80078f8:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007900:	b2db      	uxtb	r3, r3
 8007902:	2b01      	cmp	r3, #1
 8007904:	d101      	bne.n	800790a <HAL_QSPI_AutoPolling+0x24>
 8007906:	2302      	movs	r3, #2
 8007908:	e060      	b.n	80079cc <HAL_QSPI_AutoPolling+0xe6>
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	2201      	movs	r2, #1
 800790e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007918:	b2db      	uxtb	r3, r3
 800791a:	2b01      	cmp	r3, #1
 800791c:	d14f      	bne.n	80079be <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	2200      	movs	r2, #0
 8007922:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	2242      	movs	r2, #66	; 0x42
 8007928:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	9300      	str	r3, [sp, #0]
 8007930:	693b      	ldr	r3, [r7, #16]
 8007932:	2200      	movs	r2, #0
 8007934:	2120      	movs	r1, #32
 8007936:	68f8      	ldr	r0, [r7, #12]
 8007938:	f000 f8bc 	bl	8007ab4 <QSPI_WaitFlagStateUntilTimeout>
 800793c:	4603      	mov	r3, r0
 800793e:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8007940:	7dfb      	ldrb	r3, [r7, #23]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d13d      	bne.n	80079c2 <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	687a      	ldr	r2, [r7, #4]
 800794c:	6812      	ldr	r2, [r2, #0]
 800794e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	687a      	ldr	r2, [r7, #4]
 8007956:	6852      	ldr	r2, [r2, #4]
 8007958:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	687a      	ldr	r2, [r7, #4]
 8007960:	6892      	ldr	r2, [r2, #8]
 8007962:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	691b      	ldr	r3, [r3, #16]
 8007972:	431a      	orrs	r2, r3
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800797c:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	68da      	ldr	r2, [r3, #12]
 8007982:	68bb      	ldr	r3, [r7, #8]
 8007984:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8007986:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800798a:	68b9      	ldr	r1, [r7, #8]
 800798c:	68f8      	ldr	r0, [r7, #12]
 800798e:	f000 f8c8 	bl	8007b22 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	9300      	str	r3, [sp, #0]
 8007996:	693b      	ldr	r3, [r7, #16]
 8007998:	2201      	movs	r2, #1
 800799a:	2108      	movs	r1, #8
 800799c:	68f8      	ldr	r0, [r7, #12]
 800799e:	f000 f889 	bl	8007ab4 <QSPI_WaitFlagStateUntilTimeout>
 80079a2:	4603      	mov	r3, r0
 80079a4:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 80079a6:	7dfb      	ldrb	r3, [r7, #23]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d10a      	bne.n	80079c2 <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	2208      	movs	r2, #8
 80079b2:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	2201      	movs	r2, #1
 80079b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80079bc:	e001      	b.n	80079c2 <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 80079be:	2302      	movs	r3, #2
 80079c0:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	2200      	movs	r2, #0
 80079c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80079ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80079cc:	4618      	mov	r0, r3
 80079ce:	3718      	adds	r7, #24
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bd80      	pop	{r7, pc}

080079d4 <HAL_QSPI_MemoryMapped>:
  * @param  cfg structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_MemoryMapped(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_MemoryMappedTypeDef *cfg)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b088      	sub	sp, #32
 80079d8:	af02      	add	r7, sp, #8
 80079da:	60f8      	str	r0, [r7, #12]
 80079dc:	60b9      	str	r1, [r7, #8]
 80079de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80079e0:	f7fb f856 	bl	8002a90 <HAL_GetTick>
 80079e4:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  assert_param(IS_QSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Process locked */
  __HAL_LOCK(hqspi);
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80079ec:	b2db      	uxtb	r3, r3
 80079ee:	2b01      	cmp	r3, #1
 80079f0:	d101      	bne.n	80079f6 <HAL_QSPI_MemoryMapped+0x22>
 80079f2:	2302      	movs	r3, #2
 80079f4:	e04c      	b.n	8007a90 <HAL_QSPI_MemoryMapped+0xbc>
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	2201      	movs	r2, #1
 80079fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007a04:	b2db      	uxtb	r3, r3
 8007a06:	2b01      	cmp	r3, #1
 8007a08:	d13b      	bne.n	8007a82 <HAL_QSPI_MemoryMapped+0xae>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	2282      	movs	r2, #130	; 0x82
 8007a14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a1c:	9300      	str	r3, [sp, #0]
 8007a1e:	693b      	ldr	r3, [r7, #16]
 8007a20:	2200      	movs	r2, #0
 8007a22:	2120      	movs	r1, #32
 8007a24:	68f8      	ldr	r0, [r7, #12]
 8007a26:	f000 f845 	bl	8007ab4 <QSPI_WaitFlagStateUntilTimeout>
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8007a2e:	7dfb      	ldrb	r3, [r7, #23]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d128      	bne.n	8007a86 <HAL_QSPI_MemoryMapped+0xb2>
    {
      /* Configure QSPI: CR register with timeout counter enable */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f023 0108 	bic.w	r1, r3, #8
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	685a      	ldr	r2, [r3, #4]
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	430a      	orrs	r2, r1
 8007a48:	601a      	str	r2, [r3, #0]

    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	685b      	ldr	r3, [r3, #4]
 8007a4e:	2b08      	cmp	r3, #8
 8007a50:	d110      	bne.n	8007a74 <HAL_QSPI_MemoryMapped+0xa0>
      {
        assert_param(IS_QSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure QSPI: LPTR register with the low-power timeout value */
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	687a      	ldr	r2, [r7, #4]
 8007a58:	6812      	ldr	r2, [r2, #0]
 8007a5a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	2210      	movs	r2, #16
 8007a62:	60da      	str	r2, [r3, #12]

        /* Enable the QSPI TimeOut Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	681a      	ldr	r2, [r3, #0]
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007a72:	601a      	str	r2, [r3, #0]
      }

      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 8007a74:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8007a78:	68b9      	ldr	r1, [r7, #8]
 8007a7a:	68f8      	ldr	r0, [r7, #12]
 8007a7c:	f000 f851 	bl	8007b22 <QSPI_Config>
 8007a80:	e001      	b.n	8007a86 <HAL_QSPI_MemoryMapped+0xb2>
    }
  }
  else
  {
    status = HAL_BUSY;
 8007a82:	2302      	movs	r3, #2
 8007a84:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	2200      	movs	r2, #0
 8007a8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8007a8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a90:	4618      	mov	r0, r3
 8007a92:	3718      	adds	r7, #24
 8007a94:	46bd      	mov	sp, r7
 8007a96:	bd80      	pop	{r7, pc}

08007a98 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8007a98:	b480      	push	{r7}
 8007a9a:	b083      	sub	sp, #12
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
 8007aa0:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	683a      	ldr	r2, [r7, #0]
 8007aa6:	649a      	str	r2, [r3, #72]	; 0x48
}
 8007aa8:	bf00      	nop
 8007aaa:	370c      	adds	r7, #12
 8007aac:	46bd      	mov	sp, r7
 8007aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab2:	4770      	bx	lr

08007ab4 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b084      	sub	sp, #16
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	60f8      	str	r0, [r7, #12]
 8007abc:	60b9      	str	r1, [r7, #8]
 8007abe:	603b      	str	r3, [r7, #0]
 8007ac0:	4613      	mov	r3, r2
 8007ac2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8007ac4:	e01a      	b.n	8007afc <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ac6:	69bb      	ldr	r3, [r7, #24]
 8007ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007acc:	d016      	beq.n	8007afc <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ace:	f7fa ffdf 	bl	8002a90 <HAL_GetTick>
 8007ad2:	4602      	mov	r2, r0
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	1ad3      	subs	r3, r2, r3
 8007ad8:	69ba      	ldr	r2, [r7, #24]
 8007ada:	429a      	cmp	r2, r3
 8007adc:	d302      	bcc.n	8007ae4 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8007ade:	69bb      	ldr	r3, [r7, #24]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d10b      	bne.n	8007afc <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	2204      	movs	r2, #4
 8007ae8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007af0:	f043 0201 	orr.w	r2, r3, #1
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8007af8:	2301      	movs	r3, #1
 8007afa:	e00e      	b.n	8007b1a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	689a      	ldr	r2, [r3, #8]
 8007b02:	68bb      	ldr	r3, [r7, #8]
 8007b04:	4013      	ands	r3, r2
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	bf14      	ite	ne
 8007b0a:	2301      	movne	r3, #1
 8007b0c:	2300      	moveq	r3, #0
 8007b0e:	b2db      	uxtb	r3, r3
 8007b10:	461a      	mov	r2, r3
 8007b12:	79fb      	ldrb	r3, [r7, #7]
 8007b14:	429a      	cmp	r2, r3
 8007b16:	d1d6      	bne.n	8007ac6 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007b18:	2300      	movs	r3, #0
}
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	3710      	adds	r7, #16
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}

08007b22 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8007b22:	b480      	push	{r7}
 8007b24:	b085      	sub	sp, #20
 8007b26:	af00      	add	r7, sp, #0
 8007b28:	60f8      	str	r0, [r7, #12]
 8007b2a:	60b9      	str	r1, [r7, #8]
 8007b2c:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d009      	beq.n	8007b4a <QSPI_Config+0x28>
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007b3c:	d005      	beq.n	8007b4a <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	3a01      	subs	r2, #1
 8007b48:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8007b4a:	68bb      	ldr	r3, [r7, #8]
 8007b4c:	699b      	ldr	r3, [r3, #24]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	f000 80b9 	beq.w	8007cc6 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	6a1b      	ldr	r3, [r3, #32]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d05f      	beq.n	8007c1c <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	68ba      	ldr	r2, [r7, #8]
 8007b62:	6892      	ldr	r2, [r2, #8]
 8007b64:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	69db      	ldr	r3, [r3, #28]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d031      	beq.n	8007bd2 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8007b6e:	68bb      	ldr	r3, [r7, #8]
 8007b70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b76:	431a      	orrs	r2, r3
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b7c:	431a      	orrs	r2, r3
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b82:	431a      	orrs	r2, r3
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	695b      	ldr	r3, [r3, #20]
 8007b88:	049b      	lsls	r3, r3, #18
 8007b8a:	431a      	orrs	r2, r3
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	691b      	ldr	r3, [r3, #16]
 8007b90:	431a      	orrs	r2, r3
 8007b92:	68bb      	ldr	r3, [r7, #8]
 8007b94:	6a1b      	ldr	r3, [r3, #32]
 8007b96:	431a      	orrs	r2, r3
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	68db      	ldr	r3, [r3, #12]
 8007b9c:	431a      	orrs	r2, r3
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	69db      	ldr	r3, [r3, #28]
 8007ba2:	431a      	orrs	r2, r3
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	699b      	ldr	r3, [r3, #24]
 8007ba8:	431a      	orrs	r2, r3
 8007baa:	68bb      	ldr	r3, [r7, #8]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	ea42 0103 	orr.w	r1, r2, r3
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	687a      	ldr	r2, [r7, #4]
 8007bb8:	430a      	orrs	r2, r1
 8007bba:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007bc2:	f000 812e 	beq.w	8007e22 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	68ba      	ldr	r2, [r7, #8]
 8007bcc:	6852      	ldr	r2, [r2, #4]
 8007bce:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8007bd0:	e127      	b.n	8007e22 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bd6:	68bb      	ldr	r3, [r7, #8]
 8007bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bda:	431a      	orrs	r2, r3
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007be0:	431a      	orrs	r2, r3
 8007be2:	68bb      	ldr	r3, [r7, #8]
 8007be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007be6:	431a      	orrs	r2, r3
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	695b      	ldr	r3, [r3, #20]
 8007bec:	049b      	lsls	r3, r3, #18
 8007bee:	431a      	orrs	r2, r3
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	691b      	ldr	r3, [r3, #16]
 8007bf4:	431a      	orrs	r2, r3
 8007bf6:	68bb      	ldr	r3, [r7, #8]
 8007bf8:	6a1b      	ldr	r3, [r3, #32]
 8007bfa:	431a      	orrs	r2, r3
 8007bfc:	68bb      	ldr	r3, [r7, #8]
 8007bfe:	69db      	ldr	r3, [r3, #28]
 8007c00:	431a      	orrs	r2, r3
 8007c02:	68bb      	ldr	r3, [r7, #8]
 8007c04:	699b      	ldr	r3, [r3, #24]
 8007c06:	431a      	orrs	r2, r3
 8007c08:	68bb      	ldr	r3, [r7, #8]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	ea42 0103 	orr.w	r1, r2, r3
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	687a      	ldr	r2, [r7, #4]
 8007c16:	430a      	orrs	r2, r1
 8007c18:	615a      	str	r2, [r3, #20]
}
 8007c1a:	e102      	b.n	8007e22 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	69db      	ldr	r3, [r3, #28]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d02e      	beq.n	8007c82 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c2c:	431a      	orrs	r2, r3
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c32:	431a      	orrs	r2, r3
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c38:	431a      	orrs	r2, r3
 8007c3a:	68bb      	ldr	r3, [r7, #8]
 8007c3c:	695b      	ldr	r3, [r3, #20]
 8007c3e:	049b      	lsls	r3, r3, #18
 8007c40:	431a      	orrs	r2, r3
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	6a1b      	ldr	r3, [r3, #32]
 8007c46:	431a      	orrs	r2, r3
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	68db      	ldr	r3, [r3, #12]
 8007c4c:	431a      	orrs	r2, r3
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	69db      	ldr	r3, [r3, #28]
 8007c52:	431a      	orrs	r2, r3
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	699b      	ldr	r3, [r3, #24]
 8007c58:	431a      	orrs	r2, r3
 8007c5a:	68bb      	ldr	r3, [r7, #8]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	ea42 0103 	orr.w	r1, r2, r3
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	687a      	ldr	r2, [r7, #4]
 8007c68:	430a      	orrs	r2, r1
 8007c6a:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007c72:	f000 80d6 	beq.w	8007e22 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	68ba      	ldr	r2, [r7, #8]
 8007c7c:	6852      	ldr	r2, [r2, #4]
 8007c7e:	619a      	str	r2, [r3, #24]
}
 8007c80:	e0cf      	b.n	8007e22 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8007c82:	68bb      	ldr	r3, [r7, #8]
 8007c84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c8a:	431a      	orrs	r2, r3
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c90:	431a      	orrs	r2, r3
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c96:	431a      	orrs	r2, r3
 8007c98:	68bb      	ldr	r3, [r7, #8]
 8007c9a:	695b      	ldr	r3, [r3, #20]
 8007c9c:	049b      	lsls	r3, r3, #18
 8007c9e:	431a      	orrs	r2, r3
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	6a1b      	ldr	r3, [r3, #32]
 8007ca4:	431a      	orrs	r2, r3
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	69db      	ldr	r3, [r3, #28]
 8007caa:	431a      	orrs	r2, r3
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	699b      	ldr	r3, [r3, #24]
 8007cb0:	431a      	orrs	r2, r3
 8007cb2:	68bb      	ldr	r3, [r7, #8]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	ea42 0103 	orr.w	r1, r2, r3
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	687a      	ldr	r2, [r7, #4]
 8007cc0:	430a      	orrs	r2, r1
 8007cc2:	615a      	str	r2, [r3, #20]
}
 8007cc4:	e0ad      	b.n	8007e22 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8007cc6:	68bb      	ldr	r3, [r7, #8]
 8007cc8:	6a1b      	ldr	r3, [r3, #32]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d058      	beq.n	8007d80 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	68ba      	ldr	r2, [r7, #8]
 8007cd4:	6892      	ldr	r2, [r2, #8]
 8007cd6:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	69db      	ldr	r3, [r3, #28]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d02d      	beq.n	8007d3c <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ce8:	431a      	orrs	r2, r3
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cee:	431a      	orrs	r2, r3
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cf4:	431a      	orrs	r2, r3
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	695b      	ldr	r3, [r3, #20]
 8007cfa:	049b      	lsls	r3, r3, #18
 8007cfc:	431a      	orrs	r2, r3
 8007cfe:	68bb      	ldr	r3, [r7, #8]
 8007d00:	691b      	ldr	r3, [r3, #16]
 8007d02:	431a      	orrs	r2, r3
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	6a1b      	ldr	r3, [r3, #32]
 8007d08:	431a      	orrs	r2, r3
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	68db      	ldr	r3, [r3, #12]
 8007d0e:	431a      	orrs	r2, r3
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	69db      	ldr	r3, [r3, #28]
 8007d14:	431a      	orrs	r2, r3
 8007d16:	68bb      	ldr	r3, [r7, #8]
 8007d18:	699b      	ldr	r3, [r3, #24]
 8007d1a:	ea42 0103 	orr.w	r1, r2, r3
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	687a      	ldr	r2, [r7, #4]
 8007d24:	430a      	orrs	r2, r1
 8007d26:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007d2e:	d078      	beq.n	8007e22 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	68ba      	ldr	r2, [r7, #8]
 8007d36:	6852      	ldr	r2, [r2, #4]
 8007d38:	619a      	str	r2, [r3, #24]
}
 8007d3a:	e072      	b.n	8007e22 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d44:	431a      	orrs	r2, r3
 8007d46:	68bb      	ldr	r3, [r7, #8]
 8007d48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d4a:	431a      	orrs	r2, r3
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d50:	431a      	orrs	r2, r3
 8007d52:	68bb      	ldr	r3, [r7, #8]
 8007d54:	695b      	ldr	r3, [r3, #20]
 8007d56:	049b      	lsls	r3, r3, #18
 8007d58:	431a      	orrs	r2, r3
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	691b      	ldr	r3, [r3, #16]
 8007d5e:	431a      	orrs	r2, r3
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	6a1b      	ldr	r3, [r3, #32]
 8007d64:	431a      	orrs	r2, r3
 8007d66:	68bb      	ldr	r3, [r7, #8]
 8007d68:	69db      	ldr	r3, [r3, #28]
 8007d6a:	431a      	orrs	r2, r3
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	699b      	ldr	r3, [r3, #24]
 8007d70:	ea42 0103 	orr.w	r1, r2, r3
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	687a      	ldr	r2, [r7, #4]
 8007d7a:	430a      	orrs	r2, r1
 8007d7c:	615a      	str	r2, [r3, #20]
}
 8007d7e:	e050      	b.n	8007e22 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	69db      	ldr	r3, [r3, #28]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d02a      	beq.n	8007dde <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d8c:	68bb      	ldr	r3, [r7, #8]
 8007d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d90:	431a      	orrs	r2, r3
 8007d92:	68bb      	ldr	r3, [r7, #8]
 8007d94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d96:	431a      	orrs	r2, r3
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d9c:	431a      	orrs	r2, r3
 8007d9e:	68bb      	ldr	r3, [r7, #8]
 8007da0:	695b      	ldr	r3, [r3, #20]
 8007da2:	049b      	lsls	r3, r3, #18
 8007da4:	431a      	orrs	r2, r3
 8007da6:	68bb      	ldr	r3, [r7, #8]
 8007da8:	6a1b      	ldr	r3, [r3, #32]
 8007daa:	431a      	orrs	r2, r3
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	68db      	ldr	r3, [r3, #12]
 8007db0:	431a      	orrs	r2, r3
 8007db2:	68bb      	ldr	r3, [r7, #8]
 8007db4:	69db      	ldr	r3, [r3, #28]
 8007db6:	431a      	orrs	r2, r3
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	699b      	ldr	r3, [r3, #24]
 8007dbc:	ea42 0103 	orr.w	r1, r2, r3
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	687a      	ldr	r2, [r7, #4]
 8007dc6:	430a      	orrs	r2, r1
 8007dc8:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007dd0:	d027      	beq.n	8007e22 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	68ba      	ldr	r2, [r7, #8]
 8007dd8:	6852      	ldr	r2, [r2, #4]
 8007dda:	619a      	str	r2, [r3, #24]
}
 8007ddc:	e021      	b.n	8007e22 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8007dde:	68bb      	ldr	r3, [r7, #8]
 8007de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d01d      	beq.n	8007e22 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8007de6:	68bb      	ldr	r3, [r7, #8]
 8007de8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dea:	68bb      	ldr	r3, [r7, #8]
 8007dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dee:	431a      	orrs	r2, r3
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007df4:	431a      	orrs	r2, r3
 8007df6:	68bb      	ldr	r3, [r7, #8]
 8007df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dfa:	431a      	orrs	r2, r3
 8007dfc:	68bb      	ldr	r3, [r7, #8]
 8007dfe:	695b      	ldr	r3, [r3, #20]
 8007e00:	049b      	lsls	r3, r3, #18
 8007e02:	431a      	orrs	r2, r3
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	6a1b      	ldr	r3, [r3, #32]
 8007e08:	431a      	orrs	r2, r3
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	69db      	ldr	r3, [r3, #28]
 8007e0e:	431a      	orrs	r2, r3
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	699b      	ldr	r3, [r3, #24]
 8007e14:	ea42 0103 	orr.w	r1, r2, r3
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	687a      	ldr	r2, [r7, #4]
 8007e1e:	430a      	orrs	r2, r1
 8007e20:	615a      	str	r2, [r3, #20]
}
 8007e22:	bf00      	nop
 8007e24:	3714      	adds	r7, #20
 8007e26:	46bd      	mov	sp, r7
 8007e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2c:	4770      	bx	lr
	...

08007e30 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b086      	sub	sp, #24
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8007e38:	2300      	movs	r3, #0
 8007e3a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d101      	bne.n	8007e46 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8007e42:	2301      	movs	r3, #1
 8007e44:	e29b      	b.n	800837e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f003 0301 	and.w	r3, r3, #1
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	f000 8087 	beq.w	8007f62 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007e54:	4b96      	ldr	r3, [pc, #600]	; (80080b0 <HAL_RCC_OscConfig+0x280>)
 8007e56:	689b      	ldr	r3, [r3, #8]
 8007e58:	f003 030c 	and.w	r3, r3, #12
 8007e5c:	2b04      	cmp	r3, #4
 8007e5e:	d00c      	beq.n	8007e7a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007e60:	4b93      	ldr	r3, [pc, #588]	; (80080b0 <HAL_RCC_OscConfig+0x280>)
 8007e62:	689b      	ldr	r3, [r3, #8]
 8007e64:	f003 030c 	and.w	r3, r3, #12
 8007e68:	2b08      	cmp	r3, #8
 8007e6a:	d112      	bne.n	8007e92 <HAL_RCC_OscConfig+0x62>
 8007e6c:	4b90      	ldr	r3, [pc, #576]	; (80080b0 <HAL_RCC_OscConfig+0x280>)
 8007e6e:	685b      	ldr	r3, [r3, #4]
 8007e70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007e78:	d10b      	bne.n	8007e92 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007e7a:	4b8d      	ldr	r3, [pc, #564]	; (80080b0 <HAL_RCC_OscConfig+0x280>)
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d06c      	beq.n	8007f60 <HAL_RCC_OscConfig+0x130>
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	685b      	ldr	r3, [r3, #4]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d168      	bne.n	8007f60 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007e8e:	2301      	movs	r3, #1
 8007e90:	e275      	b.n	800837e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	685b      	ldr	r3, [r3, #4]
 8007e96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e9a:	d106      	bne.n	8007eaa <HAL_RCC_OscConfig+0x7a>
 8007e9c:	4b84      	ldr	r3, [pc, #528]	; (80080b0 <HAL_RCC_OscConfig+0x280>)
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	4a83      	ldr	r2, [pc, #524]	; (80080b0 <HAL_RCC_OscConfig+0x280>)
 8007ea2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ea6:	6013      	str	r3, [r2, #0]
 8007ea8:	e02e      	b.n	8007f08 <HAL_RCC_OscConfig+0xd8>
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	685b      	ldr	r3, [r3, #4]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d10c      	bne.n	8007ecc <HAL_RCC_OscConfig+0x9c>
 8007eb2:	4b7f      	ldr	r3, [pc, #508]	; (80080b0 <HAL_RCC_OscConfig+0x280>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	4a7e      	ldr	r2, [pc, #504]	; (80080b0 <HAL_RCC_OscConfig+0x280>)
 8007eb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ebc:	6013      	str	r3, [r2, #0]
 8007ebe:	4b7c      	ldr	r3, [pc, #496]	; (80080b0 <HAL_RCC_OscConfig+0x280>)
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	4a7b      	ldr	r2, [pc, #492]	; (80080b0 <HAL_RCC_OscConfig+0x280>)
 8007ec4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007ec8:	6013      	str	r3, [r2, #0]
 8007eca:	e01d      	b.n	8007f08 <HAL_RCC_OscConfig+0xd8>
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	685b      	ldr	r3, [r3, #4]
 8007ed0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007ed4:	d10c      	bne.n	8007ef0 <HAL_RCC_OscConfig+0xc0>
 8007ed6:	4b76      	ldr	r3, [pc, #472]	; (80080b0 <HAL_RCC_OscConfig+0x280>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	4a75      	ldr	r2, [pc, #468]	; (80080b0 <HAL_RCC_OscConfig+0x280>)
 8007edc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007ee0:	6013      	str	r3, [r2, #0]
 8007ee2:	4b73      	ldr	r3, [pc, #460]	; (80080b0 <HAL_RCC_OscConfig+0x280>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	4a72      	ldr	r2, [pc, #456]	; (80080b0 <HAL_RCC_OscConfig+0x280>)
 8007ee8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007eec:	6013      	str	r3, [r2, #0]
 8007eee:	e00b      	b.n	8007f08 <HAL_RCC_OscConfig+0xd8>
 8007ef0:	4b6f      	ldr	r3, [pc, #444]	; (80080b0 <HAL_RCC_OscConfig+0x280>)
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	4a6e      	ldr	r2, [pc, #440]	; (80080b0 <HAL_RCC_OscConfig+0x280>)
 8007ef6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007efa:	6013      	str	r3, [r2, #0]
 8007efc:	4b6c      	ldr	r3, [pc, #432]	; (80080b0 <HAL_RCC_OscConfig+0x280>)
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	4a6b      	ldr	r2, [pc, #428]	; (80080b0 <HAL_RCC_OscConfig+0x280>)
 8007f02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007f06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	685b      	ldr	r3, [r3, #4]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d013      	beq.n	8007f38 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f10:	f7fa fdbe 	bl	8002a90 <HAL_GetTick>
 8007f14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007f16:	e008      	b.n	8007f2a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007f18:	f7fa fdba 	bl	8002a90 <HAL_GetTick>
 8007f1c:	4602      	mov	r2, r0
 8007f1e:	693b      	ldr	r3, [r7, #16]
 8007f20:	1ad3      	subs	r3, r2, r3
 8007f22:	2b64      	cmp	r3, #100	; 0x64
 8007f24:	d901      	bls.n	8007f2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007f26:	2303      	movs	r3, #3
 8007f28:	e229      	b.n	800837e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007f2a:	4b61      	ldr	r3, [pc, #388]	; (80080b0 <HAL_RCC_OscConfig+0x280>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d0f0      	beq.n	8007f18 <HAL_RCC_OscConfig+0xe8>
 8007f36:	e014      	b.n	8007f62 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f38:	f7fa fdaa 	bl	8002a90 <HAL_GetTick>
 8007f3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007f3e:	e008      	b.n	8007f52 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007f40:	f7fa fda6 	bl	8002a90 <HAL_GetTick>
 8007f44:	4602      	mov	r2, r0
 8007f46:	693b      	ldr	r3, [r7, #16]
 8007f48:	1ad3      	subs	r3, r2, r3
 8007f4a:	2b64      	cmp	r3, #100	; 0x64
 8007f4c:	d901      	bls.n	8007f52 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007f4e:	2303      	movs	r3, #3
 8007f50:	e215      	b.n	800837e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007f52:	4b57      	ldr	r3, [pc, #348]	; (80080b0 <HAL_RCC_OscConfig+0x280>)
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d1f0      	bne.n	8007f40 <HAL_RCC_OscConfig+0x110>
 8007f5e:	e000      	b.n	8007f62 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007f60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f003 0302 	and.w	r3, r3, #2
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d069      	beq.n	8008042 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007f6e:	4b50      	ldr	r3, [pc, #320]	; (80080b0 <HAL_RCC_OscConfig+0x280>)
 8007f70:	689b      	ldr	r3, [r3, #8]
 8007f72:	f003 030c 	and.w	r3, r3, #12
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d00b      	beq.n	8007f92 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007f7a:	4b4d      	ldr	r3, [pc, #308]	; (80080b0 <HAL_RCC_OscConfig+0x280>)
 8007f7c:	689b      	ldr	r3, [r3, #8]
 8007f7e:	f003 030c 	and.w	r3, r3, #12
 8007f82:	2b08      	cmp	r3, #8
 8007f84:	d11c      	bne.n	8007fc0 <HAL_RCC_OscConfig+0x190>
 8007f86:	4b4a      	ldr	r3, [pc, #296]	; (80080b0 <HAL_RCC_OscConfig+0x280>)
 8007f88:	685b      	ldr	r3, [r3, #4]
 8007f8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d116      	bne.n	8007fc0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007f92:	4b47      	ldr	r3, [pc, #284]	; (80080b0 <HAL_RCC_OscConfig+0x280>)
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f003 0302 	and.w	r3, r3, #2
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d005      	beq.n	8007faa <HAL_RCC_OscConfig+0x17a>
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	68db      	ldr	r3, [r3, #12]
 8007fa2:	2b01      	cmp	r3, #1
 8007fa4:	d001      	beq.n	8007faa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	e1e9      	b.n	800837e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007faa:	4b41      	ldr	r3, [pc, #260]	; (80080b0 <HAL_RCC_OscConfig+0x280>)
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	691b      	ldr	r3, [r3, #16]
 8007fb6:	00db      	lsls	r3, r3, #3
 8007fb8:	493d      	ldr	r1, [pc, #244]	; (80080b0 <HAL_RCC_OscConfig+0x280>)
 8007fba:	4313      	orrs	r3, r2
 8007fbc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007fbe:	e040      	b.n	8008042 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	68db      	ldr	r3, [r3, #12]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d023      	beq.n	8008010 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007fc8:	4b39      	ldr	r3, [pc, #228]	; (80080b0 <HAL_RCC_OscConfig+0x280>)
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	4a38      	ldr	r2, [pc, #224]	; (80080b0 <HAL_RCC_OscConfig+0x280>)
 8007fce:	f043 0301 	orr.w	r3, r3, #1
 8007fd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fd4:	f7fa fd5c 	bl	8002a90 <HAL_GetTick>
 8007fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007fda:	e008      	b.n	8007fee <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007fdc:	f7fa fd58 	bl	8002a90 <HAL_GetTick>
 8007fe0:	4602      	mov	r2, r0
 8007fe2:	693b      	ldr	r3, [r7, #16]
 8007fe4:	1ad3      	subs	r3, r2, r3
 8007fe6:	2b02      	cmp	r3, #2
 8007fe8:	d901      	bls.n	8007fee <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8007fea:	2303      	movs	r3, #3
 8007fec:	e1c7      	b.n	800837e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007fee:	4b30      	ldr	r3, [pc, #192]	; (80080b0 <HAL_RCC_OscConfig+0x280>)
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f003 0302 	and.w	r3, r3, #2
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d0f0      	beq.n	8007fdc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007ffa:	4b2d      	ldr	r3, [pc, #180]	; (80080b0 <HAL_RCC_OscConfig+0x280>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	691b      	ldr	r3, [r3, #16]
 8008006:	00db      	lsls	r3, r3, #3
 8008008:	4929      	ldr	r1, [pc, #164]	; (80080b0 <HAL_RCC_OscConfig+0x280>)
 800800a:	4313      	orrs	r3, r2
 800800c:	600b      	str	r3, [r1, #0]
 800800e:	e018      	b.n	8008042 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008010:	4b27      	ldr	r3, [pc, #156]	; (80080b0 <HAL_RCC_OscConfig+0x280>)
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	4a26      	ldr	r2, [pc, #152]	; (80080b0 <HAL_RCC_OscConfig+0x280>)
 8008016:	f023 0301 	bic.w	r3, r3, #1
 800801a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800801c:	f7fa fd38 	bl	8002a90 <HAL_GetTick>
 8008020:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008022:	e008      	b.n	8008036 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008024:	f7fa fd34 	bl	8002a90 <HAL_GetTick>
 8008028:	4602      	mov	r2, r0
 800802a:	693b      	ldr	r3, [r7, #16]
 800802c:	1ad3      	subs	r3, r2, r3
 800802e:	2b02      	cmp	r3, #2
 8008030:	d901      	bls.n	8008036 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8008032:	2303      	movs	r3, #3
 8008034:	e1a3      	b.n	800837e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008036:	4b1e      	ldr	r3, [pc, #120]	; (80080b0 <HAL_RCC_OscConfig+0x280>)
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f003 0302 	and.w	r3, r3, #2
 800803e:	2b00      	cmp	r3, #0
 8008040:	d1f0      	bne.n	8008024 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f003 0308 	and.w	r3, r3, #8
 800804a:	2b00      	cmp	r3, #0
 800804c:	d038      	beq.n	80080c0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	695b      	ldr	r3, [r3, #20]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d019      	beq.n	800808a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008056:	4b16      	ldr	r3, [pc, #88]	; (80080b0 <HAL_RCC_OscConfig+0x280>)
 8008058:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800805a:	4a15      	ldr	r2, [pc, #84]	; (80080b0 <HAL_RCC_OscConfig+0x280>)
 800805c:	f043 0301 	orr.w	r3, r3, #1
 8008060:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008062:	f7fa fd15 	bl	8002a90 <HAL_GetTick>
 8008066:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008068:	e008      	b.n	800807c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800806a:	f7fa fd11 	bl	8002a90 <HAL_GetTick>
 800806e:	4602      	mov	r2, r0
 8008070:	693b      	ldr	r3, [r7, #16]
 8008072:	1ad3      	subs	r3, r2, r3
 8008074:	2b02      	cmp	r3, #2
 8008076:	d901      	bls.n	800807c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008078:	2303      	movs	r3, #3
 800807a:	e180      	b.n	800837e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800807c:	4b0c      	ldr	r3, [pc, #48]	; (80080b0 <HAL_RCC_OscConfig+0x280>)
 800807e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008080:	f003 0302 	and.w	r3, r3, #2
 8008084:	2b00      	cmp	r3, #0
 8008086:	d0f0      	beq.n	800806a <HAL_RCC_OscConfig+0x23a>
 8008088:	e01a      	b.n	80080c0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800808a:	4b09      	ldr	r3, [pc, #36]	; (80080b0 <HAL_RCC_OscConfig+0x280>)
 800808c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800808e:	4a08      	ldr	r2, [pc, #32]	; (80080b0 <HAL_RCC_OscConfig+0x280>)
 8008090:	f023 0301 	bic.w	r3, r3, #1
 8008094:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008096:	f7fa fcfb 	bl	8002a90 <HAL_GetTick>
 800809a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800809c:	e00a      	b.n	80080b4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800809e:	f7fa fcf7 	bl	8002a90 <HAL_GetTick>
 80080a2:	4602      	mov	r2, r0
 80080a4:	693b      	ldr	r3, [r7, #16]
 80080a6:	1ad3      	subs	r3, r2, r3
 80080a8:	2b02      	cmp	r3, #2
 80080aa:	d903      	bls.n	80080b4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80080ac:	2303      	movs	r3, #3
 80080ae:	e166      	b.n	800837e <HAL_RCC_OscConfig+0x54e>
 80080b0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80080b4:	4b92      	ldr	r3, [pc, #584]	; (8008300 <HAL_RCC_OscConfig+0x4d0>)
 80080b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80080b8:	f003 0302 	and.w	r3, r3, #2
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d1ee      	bne.n	800809e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f003 0304 	and.w	r3, r3, #4
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	f000 80a4 	beq.w	8008216 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80080ce:	4b8c      	ldr	r3, [pc, #560]	; (8008300 <HAL_RCC_OscConfig+0x4d0>)
 80080d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d10d      	bne.n	80080f6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80080da:	4b89      	ldr	r3, [pc, #548]	; (8008300 <HAL_RCC_OscConfig+0x4d0>)
 80080dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080de:	4a88      	ldr	r2, [pc, #544]	; (8008300 <HAL_RCC_OscConfig+0x4d0>)
 80080e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80080e4:	6413      	str	r3, [r2, #64]	; 0x40
 80080e6:	4b86      	ldr	r3, [pc, #536]	; (8008300 <HAL_RCC_OscConfig+0x4d0>)
 80080e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80080ee:	60bb      	str	r3, [r7, #8]
 80080f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80080f2:	2301      	movs	r3, #1
 80080f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80080f6:	4b83      	ldr	r3, [pc, #524]	; (8008304 <HAL_RCC_OscConfig+0x4d4>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d118      	bne.n	8008134 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8008102:	4b80      	ldr	r3, [pc, #512]	; (8008304 <HAL_RCC_OscConfig+0x4d4>)
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	4a7f      	ldr	r2, [pc, #508]	; (8008304 <HAL_RCC_OscConfig+0x4d4>)
 8008108:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800810c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800810e:	f7fa fcbf 	bl	8002a90 <HAL_GetTick>
 8008112:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008114:	e008      	b.n	8008128 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008116:	f7fa fcbb 	bl	8002a90 <HAL_GetTick>
 800811a:	4602      	mov	r2, r0
 800811c:	693b      	ldr	r3, [r7, #16]
 800811e:	1ad3      	subs	r3, r2, r3
 8008120:	2b64      	cmp	r3, #100	; 0x64
 8008122:	d901      	bls.n	8008128 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8008124:	2303      	movs	r3, #3
 8008126:	e12a      	b.n	800837e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008128:	4b76      	ldr	r3, [pc, #472]	; (8008304 <HAL_RCC_OscConfig+0x4d4>)
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008130:	2b00      	cmp	r3, #0
 8008132:	d0f0      	beq.n	8008116 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	689b      	ldr	r3, [r3, #8]
 8008138:	2b01      	cmp	r3, #1
 800813a:	d106      	bne.n	800814a <HAL_RCC_OscConfig+0x31a>
 800813c:	4b70      	ldr	r3, [pc, #448]	; (8008300 <HAL_RCC_OscConfig+0x4d0>)
 800813e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008140:	4a6f      	ldr	r2, [pc, #444]	; (8008300 <HAL_RCC_OscConfig+0x4d0>)
 8008142:	f043 0301 	orr.w	r3, r3, #1
 8008146:	6713      	str	r3, [r2, #112]	; 0x70
 8008148:	e02d      	b.n	80081a6 <HAL_RCC_OscConfig+0x376>
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	689b      	ldr	r3, [r3, #8]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d10c      	bne.n	800816c <HAL_RCC_OscConfig+0x33c>
 8008152:	4b6b      	ldr	r3, [pc, #428]	; (8008300 <HAL_RCC_OscConfig+0x4d0>)
 8008154:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008156:	4a6a      	ldr	r2, [pc, #424]	; (8008300 <HAL_RCC_OscConfig+0x4d0>)
 8008158:	f023 0301 	bic.w	r3, r3, #1
 800815c:	6713      	str	r3, [r2, #112]	; 0x70
 800815e:	4b68      	ldr	r3, [pc, #416]	; (8008300 <HAL_RCC_OscConfig+0x4d0>)
 8008160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008162:	4a67      	ldr	r2, [pc, #412]	; (8008300 <HAL_RCC_OscConfig+0x4d0>)
 8008164:	f023 0304 	bic.w	r3, r3, #4
 8008168:	6713      	str	r3, [r2, #112]	; 0x70
 800816a:	e01c      	b.n	80081a6 <HAL_RCC_OscConfig+0x376>
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	689b      	ldr	r3, [r3, #8]
 8008170:	2b05      	cmp	r3, #5
 8008172:	d10c      	bne.n	800818e <HAL_RCC_OscConfig+0x35e>
 8008174:	4b62      	ldr	r3, [pc, #392]	; (8008300 <HAL_RCC_OscConfig+0x4d0>)
 8008176:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008178:	4a61      	ldr	r2, [pc, #388]	; (8008300 <HAL_RCC_OscConfig+0x4d0>)
 800817a:	f043 0304 	orr.w	r3, r3, #4
 800817e:	6713      	str	r3, [r2, #112]	; 0x70
 8008180:	4b5f      	ldr	r3, [pc, #380]	; (8008300 <HAL_RCC_OscConfig+0x4d0>)
 8008182:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008184:	4a5e      	ldr	r2, [pc, #376]	; (8008300 <HAL_RCC_OscConfig+0x4d0>)
 8008186:	f043 0301 	orr.w	r3, r3, #1
 800818a:	6713      	str	r3, [r2, #112]	; 0x70
 800818c:	e00b      	b.n	80081a6 <HAL_RCC_OscConfig+0x376>
 800818e:	4b5c      	ldr	r3, [pc, #368]	; (8008300 <HAL_RCC_OscConfig+0x4d0>)
 8008190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008192:	4a5b      	ldr	r2, [pc, #364]	; (8008300 <HAL_RCC_OscConfig+0x4d0>)
 8008194:	f023 0301 	bic.w	r3, r3, #1
 8008198:	6713      	str	r3, [r2, #112]	; 0x70
 800819a:	4b59      	ldr	r3, [pc, #356]	; (8008300 <HAL_RCC_OscConfig+0x4d0>)
 800819c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800819e:	4a58      	ldr	r2, [pc, #352]	; (8008300 <HAL_RCC_OscConfig+0x4d0>)
 80081a0:	f023 0304 	bic.w	r3, r3, #4
 80081a4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	689b      	ldr	r3, [r3, #8]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d015      	beq.n	80081da <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80081ae:	f7fa fc6f 	bl	8002a90 <HAL_GetTick>
 80081b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80081b4:	e00a      	b.n	80081cc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80081b6:	f7fa fc6b 	bl	8002a90 <HAL_GetTick>
 80081ba:	4602      	mov	r2, r0
 80081bc:	693b      	ldr	r3, [r7, #16]
 80081be:	1ad3      	subs	r3, r2, r3
 80081c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80081c4:	4293      	cmp	r3, r2
 80081c6:	d901      	bls.n	80081cc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80081c8:	2303      	movs	r3, #3
 80081ca:	e0d8      	b.n	800837e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80081cc:	4b4c      	ldr	r3, [pc, #304]	; (8008300 <HAL_RCC_OscConfig+0x4d0>)
 80081ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081d0:	f003 0302 	and.w	r3, r3, #2
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d0ee      	beq.n	80081b6 <HAL_RCC_OscConfig+0x386>
 80081d8:	e014      	b.n	8008204 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80081da:	f7fa fc59 	bl	8002a90 <HAL_GetTick>
 80081de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80081e0:	e00a      	b.n	80081f8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80081e2:	f7fa fc55 	bl	8002a90 <HAL_GetTick>
 80081e6:	4602      	mov	r2, r0
 80081e8:	693b      	ldr	r3, [r7, #16]
 80081ea:	1ad3      	subs	r3, r2, r3
 80081ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80081f0:	4293      	cmp	r3, r2
 80081f2:	d901      	bls.n	80081f8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80081f4:	2303      	movs	r3, #3
 80081f6:	e0c2      	b.n	800837e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80081f8:	4b41      	ldr	r3, [pc, #260]	; (8008300 <HAL_RCC_OscConfig+0x4d0>)
 80081fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081fc:	f003 0302 	and.w	r3, r3, #2
 8008200:	2b00      	cmp	r3, #0
 8008202:	d1ee      	bne.n	80081e2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008204:	7dfb      	ldrb	r3, [r7, #23]
 8008206:	2b01      	cmp	r3, #1
 8008208:	d105      	bne.n	8008216 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800820a:	4b3d      	ldr	r3, [pc, #244]	; (8008300 <HAL_RCC_OscConfig+0x4d0>)
 800820c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800820e:	4a3c      	ldr	r2, [pc, #240]	; (8008300 <HAL_RCC_OscConfig+0x4d0>)
 8008210:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008214:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	699b      	ldr	r3, [r3, #24]
 800821a:	2b00      	cmp	r3, #0
 800821c:	f000 80ae 	beq.w	800837c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008220:	4b37      	ldr	r3, [pc, #220]	; (8008300 <HAL_RCC_OscConfig+0x4d0>)
 8008222:	689b      	ldr	r3, [r3, #8]
 8008224:	f003 030c 	and.w	r3, r3, #12
 8008228:	2b08      	cmp	r3, #8
 800822a:	d06d      	beq.n	8008308 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	699b      	ldr	r3, [r3, #24]
 8008230:	2b02      	cmp	r3, #2
 8008232:	d14b      	bne.n	80082cc <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008234:	4b32      	ldr	r3, [pc, #200]	; (8008300 <HAL_RCC_OscConfig+0x4d0>)
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	4a31      	ldr	r2, [pc, #196]	; (8008300 <HAL_RCC_OscConfig+0x4d0>)
 800823a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800823e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008240:	f7fa fc26 	bl	8002a90 <HAL_GetTick>
 8008244:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008246:	e008      	b.n	800825a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008248:	f7fa fc22 	bl	8002a90 <HAL_GetTick>
 800824c:	4602      	mov	r2, r0
 800824e:	693b      	ldr	r3, [r7, #16]
 8008250:	1ad3      	subs	r3, r2, r3
 8008252:	2b02      	cmp	r3, #2
 8008254:	d901      	bls.n	800825a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8008256:	2303      	movs	r3, #3
 8008258:	e091      	b.n	800837e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800825a:	4b29      	ldr	r3, [pc, #164]	; (8008300 <HAL_RCC_OscConfig+0x4d0>)
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008262:	2b00      	cmp	r3, #0
 8008264:	d1f0      	bne.n	8008248 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	69da      	ldr	r2, [r3, #28]
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6a1b      	ldr	r3, [r3, #32]
 800826e:	431a      	orrs	r2, r3
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008274:	019b      	lsls	r3, r3, #6
 8008276:	431a      	orrs	r2, r3
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800827c:	085b      	lsrs	r3, r3, #1
 800827e:	3b01      	subs	r3, #1
 8008280:	041b      	lsls	r3, r3, #16
 8008282:	431a      	orrs	r2, r3
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008288:	061b      	lsls	r3, r3, #24
 800828a:	431a      	orrs	r2, r3
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008290:	071b      	lsls	r3, r3, #28
 8008292:	491b      	ldr	r1, [pc, #108]	; (8008300 <HAL_RCC_OscConfig+0x4d0>)
 8008294:	4313      	orrs	r3, r2
 8008296:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008298:	4b19      	ldr	r3, [pc, #100]	; (8008300 <HAL_RCC_OscConfig+0x4d0>)
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	4a18      	ldr	r2, [pc, #96]	; (8008300 <HAL_RCC_OscConfig+0x4d0>)
 800829e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80082a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082a4:	f7fa fbf4 	bl	8002a90 <HAL_GetTick>
 80082a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80082aa:	e008      	b.n	80082be <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80082ac:	f7fa fbf0 	bl	8002a90 <HAL_GetTick>
 80082b0:	4602      	mov	r2, r0
 80082b2:	693b      	ldr	r3, [r7, #16]
 80082b4:	1ad3      	subs	r3, r2, r3
 80082b6:	2b02      	cmp	r3, #2
 80082b8:	d901      	bls.n	80082be <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80082ba:	2303      	movs	r3, #3
 80082bc:	e05f      	b.n	800837e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80082be:	4b10      	ldr	r3, [pc, #64]	; (8008300 <HAL_RCC_OscConfig+0x4d0>)
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d0f0      	beq.n	80082ac <HAL_RCC_OscConfig+0x47c>
 80082ca:	e057      	b.n	800837c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80082cc:	4b0c      	ldr	r3, [pc, #48]	; (8008300 <HAL_RCC_OscConfig+0x4d0>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	4a0b      	ldr	r2, [pc, #44]	; (8008300 <HAL_RCC_OscConfig+0x4d0>)
 80082d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80082d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082d8:	f7fa fbda 	bl	8002a90 <HAL_GetTick>
 80082dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80082de:	e008      	b.n	80082f2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80082e0:	f7fa fbd6 	bl	8002a90 <HAL_GetTick>
 80082e4:	4602      	mov	r2, r0
 80082e6:	693b      	ldr	r3, [r7, #16]
 80082e8:	1ad3      	subs	r3, r2, r3
 80082ea:	2b02      	cmp	r3, #2
 80082ec:	d901      	bls.n	80082f2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80082ee:	2303      	movs	r3, #3
 80082f0:	e045      	b.n	800837e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80082f2:	4b03      	ldr	r3, [pc, #12]	; (8008300 <HAL_RCC_OscConfig+0x4d0>)
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d1f0      	bne.n	80082e0 <HAL_RCC_OscConfig+0x4b0>
 80082fe:	e03d      	b.n	800837c <HAL_RCC_OscConfig+0x54c>
 8008300:	40023800 	.word	0x40023800
 8008304:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8008308:	4b1f      	ldr	r3, [pc, #124]	; (8008388 <HAL_RCC_OscConfig+0x558>)
 800830a:	685b      	ldr	r3, [r3, #4]
 800830c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	699b      	ldr	r3, [r3, #24]
 8008312:	2b01      	cmp	r3, #1
 8008314:	d030      	beq.n	8008378 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008320:	429a      	cmp	r2, r3
 8008322:	d129      	bne.n	8008378 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800832e:	429a      	cmp	r2, r3
 8008330:	d122      	bne.n	8008378 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008332:	68fa      	ldr	r2, [r7, #12]
 8008334:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008338:	4013      	ands	r3, r2
 800833a:	687a      	ldr	r2, [r7, #4]
 800833c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800833e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008340:	4293      	cmp	r3, r2
 8008342:	d119      	bne.n	8008378 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800834e:	085b      	lsrs	r3, r3, #1
 8008350:	3b01      	subs	r3, #1
 8008352:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008354:	429a      	cmp	r2, r3
 8008356:	d10f      	bne.n	8008378 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008362:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8008364:	429a      	cmp	r2, r3
 8008366:	d107      	bne.n	8008378 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008372:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008374:	429a      	cmp	r2, r3
 8008376:	d001      	beq.n	800837c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8008378:	2301      	movs	r3, #1
 800837a:	e000      	b.n	800837e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800837c:	2300      	movs	r3, #0
}
 800837e:	4618      	mov	r0, r3
 8008380:	3718      	adds	r7, #24
 8008382:	46bd      	mov	sp, r7
 8008384:	bd80      	pop	{r7, pc}
 8008386:	bf00      	nop
 8008388:	40023800 	.word	0x40023800

0800838c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b084      	sub	sp, #16
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
 8008394:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8008396:	2300      	movs	r3, #0
 8008398:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d101      	bne.n	80083a4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80083a0:	2301      	movs	r3, #1
 80083a2:	e0d0      	b.n	8008546 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80083a4:	4b6a      	ldr	r3, [pc, #424]	; (8008550 <HAL_RCC_ClockConfig+0x1c4>)
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f003 030f 	and.w	r3, r3, #15
 80083ac:	683a      	ldr	r2, [r7, #0]
 80083ae:	429a      	cmp	r2, r3
 80083b0:	d910      	bls.n	80083d4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80083b2:	4b67      	ldr	r3, [pc, #412]	; (8008550 <HAL_RCC_ClockConfig+0x1c4>)
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f023 020f 	bic.w	r2, r3, #15
 80083ba:	4965      	ldr	r1, [pc, #404]	; (8008550 <HAL_RCC_ClockConfig+0x1c4>)
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	4313      	orrs	r3, r2
 80083c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80083c2:	4b63      	ldr	r3, [pc, #396]	; (8008550 <HAL_RCC_ClockConfig+0x1c4>)
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f003 030f 	and.w	r3, r3, #15
 80083ca:	683a      	ldr	r2, [r7, #0]
 80083cc:	429a      	cmp	r2, r3
 80083ce:	d001      	beq.n	80083d4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80083d0:	2301      	movs	r3, #1
 80083d2:	e0b8      	b.n	8008546 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f003 0302 	and.w	r3, r3, #2
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d020      	beq.n	8008422 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f003 0304 	and.w	r3, r3, #4
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d005      	beq.n	80083f8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80083ec:	4b59      	ldr	r3, [pc, #356]	; (8008554 <HAL_RCC_ClockConfig+0x1c8>)
 80083ee:	689b      	ldr	r3, [r3, #8]
 80083f0:	4a58      	ldr	r2, [pc, #352]	; (8008554 <HAL_RCC_ClockConfig+0x1c8>)
 80083f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80083f6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	f003 0308 	and.w	r3, r3, #8
 8008400:	2b00      	cmp	r3, #0
 8008402:	d005      	beq.n	8008410 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008404:	4b53      	ldr	r3, [pc, #332]	; (8008554 <HAL_RCC_ClockConfig+0x1c8>)
 8008406:	689b      	ldr	r3, [r3, #8]
 8008408:	4a52      	ldr	r2, [pc, #328]	; (8008554 <HAL_RCC_ClockConfig+0x1c8>)
 800840a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800840e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008410:	4b50      	ldr	r3, [pc, #320]	; (8008554 <HAL_RCC_ClockConfig+0x1c8>)
 8008412:	689b      	ldr	r3, [r3, #8]
 8008414:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	689b      	ldr	r3, [r3, #8]
 800841c:	494d      	ldr	r1, [pc, #308]	; (8008554 <HAL_RCC_ClockConfig+0x1c8>)
 800841e:	4313      	orrs	r3, r2
 8008420:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	f003 0301 	and.w	r3, r3, #1
 800842a:	2b00      	cmp	r3, #0
 800842c:	d040      	beq.n	80084b0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	685b      	ldr	r3, [r3, #4]
 8008432:	2b01      	cmp	r3, #1
 8008434:	d107      	bne.n	8008446 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008436:	4b47      	ldr	r3, [pc, #284]	; (8008554 <HAL_RCC_ClockConfig+0x1c8>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800843e:	2b00      	cmp	r3, #0
 8008440:	d115      	bne.n	800846e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008442:	2301      	movs	r3, #1
 8008444:	e07f      	b.n	8008546 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	685b      	ldr	r3, [r3, #4]
 800844a:	2b02      	cmp	r3, #2
 800844c:	d107      	bne.n	800845e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800844e:	4b41      	ldr	r3, [pc, #260]	; (8008554 <HAL_RCC_ClockConfig+0x1c8>)
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008456:	2b00      	cmp	r3, #0
 8008458:	d109      	bne.n	800846e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800845a:	2301      	movs	r3, #1
 800845c:	e073      	b.n	8008546 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800845e:	4b3d      	ldr	r3, [pc, #244]	; (8008554 <HAL_RCC_ClockConfig+0x1c8>)
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f003 0302 	and.w	r3, r3, #2
 8008466:	2b00      	cmp	r3, #0
 8008468:	d101      	bne.n	800846e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800846a:	2301      	movs	r3, #1
 800846c:	e06b      	b.n	8008546 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800846e:	4b39      	ldr	r3, [pc, #228]	; (8008554 <HAL_RCC_ClockConfig+0x1c8>)
 8008470:	689b      	ldr	r3, [r3, #8]
 8008472:	f023 0203 	bic.w	r2, r3, #3
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	685b      	ldr	r3, [r3, #4]
 800847a:	4936      	ldr	r1, [pc, #216]	; (8008554 <HAL_RCC_ClockConfig+0x1c8>)
 800847c:	4313      	orrs	r3, r2
 800847e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008480:	f7fa fb06 	bl	8002a90 <HAL_GetTick>
 8008484:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008486:	e00a      	b.n	800849e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008488:	f7fa fb02 	bl	8002a90 <HAL_GetTick>
 800848c:	4602      	mov	r2, r0
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	1ad3      	subs	r3, r2, r3
 8008492:	f241 3288 	movw	r2, #5000	; 0x1388
 8008496:	4293      	cmp	r3, r2
 8008498:	d901      	bls.n	800849e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800849a:	2303      	movs	r3, #3
 800849c:	e053      	b.n	8008546 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800849e:	4b2d      	ldr	r3, [pc, #180]	; (8008554 <HAL_RCC_ClockConfig+0x1c8>)
 80084a0:	689b      	ldr	r3, [r3, #8]
 80084a2:	f003 020c 	and.w	r2, r3, #12
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	685b      	ldr	r3, [r3, #4]
 80084aa:	009b      	lsls	r3, r3, #2
 80084ac:	429a      	cmp	r2, r3
 80084ae:	d1eb      	bne.n	8008488 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80084b0:	4b27      	ldr	r3, [pc, #156]	; (8008550 <HAL_RCC_ClockConfig+0x1c4>)
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f003 030f 	and.w	r3, r3, #15
 80084b8:	683a      	ldr	r2, [r7, #0]
 80084ba:	429a      	cmp	r2, r3
 80084bc:	d210      	bcs.n	80084e0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80084be:	4b24      	ldr	r3, [pc, #144]	; (8008550 <HAL_RCC_ClockConfig+0x1c4>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f023 020f 	bic.w	r2, r3, #15
 80084c6:	4922      	ldr	r1, [pc, #136]	; (8008550 <HAL_RCC_ClockConfig+0x1c4>)
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	4313      	orrs	r3, r2
 80084cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80084ce:	4b20      	ldr	r3, [pc, #128]	; (8008550 <HAL_RCC_ClockConfig+0x1c4>)
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f003 030f 	and.w	r3, r3, #15
 80084d6:	683a      	ldr	r2, [r7, #0]
 80084d8:	429a      	cmp	r2, r3
 80084da:	d001      	beq.n	80084e0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80084dc:	2301      	movs	r3, #1
 80084de:	e032      	b.n	8008546 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	f003 0304 	and.w	r3, r3, #4
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d008      	beq.n	80084fe <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80084ec:	4b19      	ldr	r3, [pc, #100]	; (8008554 <HAL_RCC_ClockConfig+0x1c8>)
 80084ee:	689b      	ldr	r3, [r3, #8]
 80084f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	68db      	ldr	r3, [r3, #12]
 80084f8:	4916      	ldr	r1, [pc, #88]	; (8008554 <HAL_RCC_ClockConfig+0x1c8>)
 80084fa:	4313      	orrs	r3, r2
 80084fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	f003 0308 	and.w	r3, r3, #8
 8008506:	2b00      	cmp	r3, #0
 8008508:	d009      	beq.n	800851e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800850a:	4b12      	ldr	r3, [pc, #72]	; (8008554 <HAL_RCC_ClockConfig+0x1c8>)
 800850c:	689b      	ldr	r3, [r3, #8]
 800850e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	691b      	ldr	r3, [r3, #16]
 8008516:	00db      	lsls	r3, r3, #3
 8008518:	490e      	ldr	r1, [pc, #56]	; (8008554 <HAL_RCC_ClockConfig+0x1c8>)
 800851a:	4313      	orrs	r3, r2
 800851c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800851e:	f000 f821 	bl	8008564 <HAL_RCC_GetSysClockFreq>
 8008522:	4602      	mov	r2, r0
 8008524:	4b0b      	ldr	r3, [pc, #44]	; (8008554 <HAL_RCC_ClockConfig+0x1c8>)
 8008526:	689b      	ldr	r3, [r3, #8]
 8008528:	091b      	lsrs	r3, r3, #4
 800852a:	f003 030f 	and.w	r3, r3, #15
 800852e:	490a      	ldr	r1, [pc, #40]	; (8008558 <HAL_RCC_ClockConfig+0x1cc>)
 8008530:	5ccb      	ldrb	r3, [r1, r3]
 8008532:	fa22 f303 	lsr.w	r3, r2, r3
 8008536:	4a09      	ldr	r2, [pc, #36]	; (800855c <HAL_RCC_ClockConfig+0x1d0>)
 8008538:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800853a:	4b09      	ldr	r3, [pc, #36]	; (8008560 <HAL_RCC_ClockConfig+0x1d4>)
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	4618      	mov	r0, r3
 8008540:	f7f9 fe34 	bl	80021ac <HAL_InitTick>

  return HAL_OK;
 8008544:	2300      	movs	r3, #0
}
 8008546:	4618      	mov	r0, r3
 8008548:	3710      	adds	r7, #16
 800854a:	46bd      	mov	sp, r7
 800854c:	bd80      	pop	{r7, pc}
 800854e:	bf00      	nop
 8008550:	40023c00 	.word	0x40023c00
 8008554:	40023800 	.word	0x40023800
 8008558:	08029a94 	.word	0x08029a94
 800855c:	20000004 	.word	0x20000004
 8008560:	20000008 	.word	0x20000008

08008564 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008564:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008568:	b090      	sub	sp, #64	; 0x40
 800856a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800856c:	2300      	movs	r3, #0
 800856e:	637b      	str	r3, [r7, #52]	; 0x34
 8008570:	2300      	movs	r3, #0
 8008572:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008574:	2300      	movs	r3, #0
 8008576:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8008578:	2300      	movs	r3, #0
 800857a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800857c:	4b59      	ldr	r3, [pc, #356]	; (80086e4 <HAL_RCC_GetSysClockFreq+0x180>)
 800857e:	689b      	ldr	r3, [r3, #8]
 8008580:	f003 030c 	and.w	r3, r3, #12
 8008584:	2b08      	cmp	r3, #8
 8008586:	d00d      	beq.n	80085a4 <HAL_RCC_GetSysClockFreq+0x40>
 8008588:	2b08      	cmp	r3, #8
 800858a:	f200 80a1 	bhi.w	80086d0 <HAL_RCC_GetSysClockFreq+0x16c>
 800858e:	2b00      	cmp	r3, #0
 8008590:	d002      	beq.n	8008598 <HAL_RCC_GetSysClockFreq+0x34>
 8008592:	2b04      	cmp	r3, #4
 8008594:	d003      	beq.n	800859e <HAL_RCC_GetSysClockFreq+0x3a>
 8008596:	e09b      	b.n	80086d0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008598:	4b53      	ldr	r3, [pc, #332]	; (80086e8 <HAL_RCC_GetSysClockFreq+0x184>)
 800859a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800859c:	e09b      	b.n	80086d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800859e:	4b53      	ldr	r3, [pc, #332]	; (80086ec <HAL_RCC_GetSysClockFreq+0x188>)
 80085a0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80085a2:	e098      	b.n	80086d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80085a4:	4b4f      	ldr	r3, [pc, #316]	; (80086e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80085a6:	685b      	ldr	r3, [r3, #4]
 80085a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80085ac:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80085ae:	4b4d      	ldr	r3, [pc, #308]	; (80086e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80085b0:	685b      	ldr	r3, [r3, #4]
 80085b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d028      	beq.n	800860c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80085ba:	4b4a      	ldr	r3, [pc, #296]	; (80086e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80085bc:	685b      	ldr	r3, [r3, #4]
 80085be:	099b      	lsrs	r3, r3, #6
 80085c0:	2200      	movs	r2, #0
 80085c2:	623b      	str	r3, [r7, #32]
 80085c4:	627a      	str	r2, [r7, #36]	; 0x24
 80085c6:	6a3b      	ldr	r3, [r7, #32]
 80085c8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80085cc:	2100      	movs	r1, #0
 80085ce:	4b47      	ldr	r3, [pc, #284]	; (80086ec <HAL_RCC_GetSysClockFreq+0x188>)
 80085d0:	fb03 f201 	mul.w	r2, r3, r1
 80085d4:	2300      	movs	r3, #0
 80085d6:	fb00 f303 	mul.w	r3, r0, r3
 80085da:	4413      	add	r3, r2
 80085dc:	4a43      	ldr	r2, [pc, #268]	; (80086ec <HAL_RCC_GetSysClockFreq+0x188>)
 80085de:	fba0 1202 	umull	r1, r2, r0, r2
 80085e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80085e4:	460a      	mov	r2, r1
 80085e6:	62ba      	str	r2, [r7, #40]	; 0x28
 80085e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80085ea:	4413      	add	r3, r2
 80085ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80085ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085f0:	2200      	movs	r2, #0
 80085f2:	61bb      	str	r3, [r7, #24]
 80085f4:	61fa      	str	r2, [r7, #28]
 80085f6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80085fa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80085fe:	f7f7 fe6f 	bl	80002e0 <__aeabi_uldivmod>
 8008602:	4602      	mov	r2, r0
 8008604:	460b      	mov	r3, r1
 8008606:	4613      	mov	r3, r2
 8008608:	63fb      	str	r3, [r7, #60]	; 0x3c
 800860a:	e053      	b.n	80086b4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800860c:	4b35      	ldr	r3, [pc, #212]	; (80086e4 <HAL_RCC_GetSysClockFreq+0x180>)
 800860e:	685b      	ldr	r3, [r3, #4]
 8008610:	099b      	lsrs	r3, r3, #6
 8008612:	2200      	movs	r2, #0
 8008614:	613b      	str	r3, [r7, #16]
 8008616:	617a      	str	r2, [r7, #20]
 8008618:	693b      	ldr	r3, [r7, #16]
 800861a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800861e:	f04f 0b00 	mov.w	fp, #0
 8008622:	4652      	mov	r2, sl
 8008624:	465b      	mov	r3, fp
 8008626:	f04f 0000 	mov.w	r0, #0
 800862a:	f04f 0100 	mov.w	r1, #0
 800862e:	0159      	lsls	r1, r3, #5
 8008630:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008634:	0150      	lsls	r0, r2, #5
 8008636:	4602      	mov	r2, r0
 8008638:	460b      	mov	r3, r1
 800863a:	ebb2 080a 	subs.w	r8, r2, sl
 800863e:	eb63 090b 	sbc.w	r9, r3, fp
 8008642:	f04f 0200 	mov.w	r2, #0
 8008646:	f04f 0300 	mov.w	r3, #0
 800864a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800864e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8008652:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8008656:	ebb2 0408 	subs.w	r4, r2, r8
 800865a:	eb63 0509 	sbc.w	r5, r3, r9
 800865e:	f04f 0200 	mov.w	r2, #0
 8008662:	f04f 0300 	mov.w	r3, #0
 8008666:	00eb      	lsls	r3, r5, #3
 8008668:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800866c:	00e2      	lsls	r2, r4, #3
 800866e:	4614      	mov	r4, r2
 8008670:	461d      	mov	r5, r3
 8008672:	eb14 030a 	adds.w	r3, r4, sl
 8008676:	603b      	str	r3, [r7, #0]
 8008678:	eb45 030b 	adc.w	r3, r5, fp
 800867c:	607b      	str	r3, [r7, #4]
 800867e:	f04f 0200 	mov.w	r2, #0
 8008682:	f04f 0300 	mov.w	r3, #0
 8008686:	e9d7 4500 	ldrd	r4, r5, [r7]
 800868a:	4629      	mov	r1, r5
 800868c:	028b      	lsls	r3, r1, #10
 800868e:	4621      	mov	r1, r4
 8008690:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008694:	4621      	mov	r1, r4
 8008696:	028a      	lsls	r2, r1, #10
 8008698:	4610      	mov	r0, r2
 800869a:	4619      	mov	r1, r3
 800869c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800869e:	2200      	movs	r2, #0
 80086a0:	60bb      	str	r3, [r7, #8]
 80086a2:	60fa      	str	r2, [r7, #12]
 80086a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80086a8:	f7f7 fe1a 	bl	80002e0 <__aeabi_uldivmod>
 80086ac:	4602      	mov	r2, r0
 80086ae:	460b      	mov	r3, r1
 80086b0:	4613      	mov	r3, r2
 80086b2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80086b4:	4b0b      	ldr	r3, [pc, #44]	; (80086e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80086b6:	685b      	ldr	r3, [r3, #4]
 80086b8:	0c1b      	lsrs	r3, r3, #16
 80086ba:	f003 0303 	and.w	r3, r3, #3
 80086be:	3301      	adds	r3, #1
 80086c0:	005b      	lsls	r3, r3, #1
 80086c2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 80086c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80086c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80086cc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80086ce:	e002      	b.n	80086d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80086d0:	4b05      	ldr	r3, [pc, #20]	; (80086e8 <HAL_RCC_GetSysClockFreq+0x184>)
 80086d2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80086d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80086d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80086d8:	4618      	mov	r0, r3
 80086da:	3740      	adds	r7, #64	; 0x40
 80086dc:	46bd      	mov	sp, r7
 80086de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80086e2:	bf00      	nop
 80086e4:	40023800 	.word	0x40023800
 80086e8:	00f42400 	.word	0x00f42400
 80086ec:	017d7840 	.word	0x017d7840

080086f0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80086f0:	b480      	push	{r7}
 80086f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80086f4:	4b03      	ldr	r3, [pc, #12]	; (8008704 <HAL_RCC_GetHCLKFreq+0x14>)
 80086f6:	681b      	ldr	r3, [r3, #0]
}
 80086f8:	4618      	mov	r0, r3
 80086fa:	46bd      	mov	sp, r7
 80086fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008700:	4770      	bx	lr
 8008702:	bf00      	nop
 8008704:	20000004 	.word	0x20000004

08008708 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800870c:	f7ff fff0 	bl	80086f0 <HAL_RCC_GetHCLKFreq>
 8008710:	4602      	mov	r2, r0
 8008712:	4b05      	ldr	r3, [pc, #20]	; (8008728 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008714:	689b      	ldr	r3, [r3, #8]
 8008716:	0a9b      	lsrs	r3, r3, #10
 8008718:	f003 0307 	and.w	r3, r3, #7
 800871c:	4903      	ldr	r1, [pc, #12]	; (800872c <HAL_RCC_GetPCLK1Freq+0x24>)
 800871e:	5ccb      	ldrb	r3, [r1, r3]
 8008720:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008724:	4618      	mov	r0, r3
 8008726:	bd80      	pop	{r7, pc}
 8008728:	40023800 	.word	0x40023800
 800872c:	08029aa4 	.word	0x08029aa4

08008730 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008730:	b480      	push	{r7}
 8008732:	b083      	sub	sp, #12
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
 8008738:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	220f      	movs	r2, #15
 800873e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008740:	4b12      	ldr	r3, [pc, #72]	; (800878c <HAL_RCC_GetClockConfig+0x5c>)
 8008742:	689b      	ldr	r3, [r3, #8]
 8008744:	f003 0203 	and.w	r2, r3, #3
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800874c:	4b0f      	ldr	r3, [pc, #60]	; (800878c <HAL_RCC_GetClockConfig+0x5c>)
 800874e:	689b      	ldr	r3, [r3, #8]
 8008750:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008758:	4b0c      	ldr	r3, [pc, #48]	; (800878c <HAL_RCC_GetClockConfig+0x5c>)
 800875a:	689b      	ldr	r3, [r3, #8]
 800875c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8008764:	4b09      	ldr	r3, [pc, #36]	; (800878c <HAL_RCC_GetClockConfig+0x5c>)
 8008766:	689b      	ldr	r3, [r3, #8]
 8008768:	08db      	lsrs	r3, r3, #3
 800876a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008772:	4b07      	ldr	r3, [pc, #28]	; (8008790 <HAL_RCC_GetClockConfig+0x60>)
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f003 020f 	and.w	r2, r3, #15
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	601a      	str	r2, [r3, #0]
}
 800877e:	bf00      	nop
 8008780:	370c      	adds	r7, #12
 8008782:	46bd      	mov	sp, r7
 8008784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008788:	4770      	bx	lr
 800878a:	bf00      	nop
 800878c:	40023800 	.word	0x40023800
 8008790:	40023c00 	.word	0x40023c00

08008794 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b088      	sub	sp, #32
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800879c:	2300      	movs	r3, #0
 800879e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80087a0:	2300      	movs	r3, #0
 80087a2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80087a4:	2300      	movs	r3, #0
 80087a6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80087a8:	2300      	movs	r3, #0
 80087aa:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80087ac:	2300      	movs	r3, #0
 80087ae:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	f003 0301 	and.w	r3, r3, #1
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d012      	beq.n	80087e2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80087bc:	4b69      	ldr	r3, [pc, #420]	; (8008964 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80087be:	689b      	ldr	r3, [r3, #8]
 80087c0:	4a68      	ldr	r2, [pc, #416]	; (8008964 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80087c2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80087c6:	6093      	str	r3, [r2, #8]
 80087c8:	4b66      	ldr	r3, [pc, #408]	; (8008964 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80087ca:	689a      	ldr	r2, [r3, #8]
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087d0:	4964      	ldr	r1, [pc, #400]	; (8008964 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80087d2:	4313      	orrs	r3, r2
 80087d4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d101      	bne.n	80087e2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80087de:	2301      	movs	r3, #1
 80087e0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d017      	beq.n	800881e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80087ee:	4b5d      	ldr	r3, [pc, #372]	; (8008964 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80087f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80087f4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087fc:	4959      	ldr	r1, [pc, #356]	; (8008964 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80087fe:	4313      	orrs	r3, r2
 8008800:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008808:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800880c:	d101      	bne.n	8008812 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800880e:	2301      	movs	r3, #1
 8008810:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008816:	2b00      	cmp	r3, #0
 8008818:	d101      	bne.n	800881e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800881a:	2301      	movs	r3, #1
 800881c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008826:	2b00      	cmp	r3, #0
 8008828:	d017      	beq.n	800885a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800882a:	4b4e      	ldr	r3, [pc, #312]	; (8008964 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800882c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008830:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008838:	494a      	ldr	r1, [pc, #296]	; (8008964 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800883a:	4313      	orrs	r3, r2
 800883c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008844:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008848:	d101      	bne.n	800884e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800884a:	2301      	movs	r3, #1
 800884c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008852:	2b00      	cmp	r3, #0
 8008854:	d101      	bne.n	800885a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8008856:	2301      	movs	r3, #1
 8008858:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008862:	2b00      	cmp	r3, #0
 8008864:	d001      	beq.n	800886a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8008866:	2301      	movs	r3, #1
 8008868:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f003 0320 	and.w	r3, r3, #32
 8008872:	2b00      	cmp	r3, #0
 8008874:	f000 808b 	beq.w	800898e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008878:	4b3a      	ldr	r3, [pc, #232]	; (8008964 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800887a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800887c:	4a39      	ldr	r2, [pc, #228]	; (8008964 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800887e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008882:	6413      	str	r3, [r2, #64]	; 0x40
 8008884:	4b37      	ldr	r3, [pc, #220]	; (8008964 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008888:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800888c:	60bb      	str	r3, [r7, #8]
 800888e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008890:	4b35      	ldr	r3, [pc, #212]	; (8008968 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	4a34      	ldr	r2, [pc, #208]	; (8008968 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008896:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800889a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800889c:	f7fa f8f8 	bl	8002a90 <HAL_GetTick>
 80088a0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80088a2:	e008      	b.n	80088b6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80088a4:	f7fa f8f4 	bl	8002a90 <HAL_GetTick>
 80088a8:	4602      	mov	r2, r0
 80088aa:	697b      	ldr	r3, [r7, #20]
 80088ac:	1ad3      	subs	r3, r2, r3
 80088ae:	2b64      	cmp	r3, #100	; 0x64
 80088b0:	d901      	bls.n	80088b6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80088b2:	2303      	movs	r3, #3
 80088b4:	e38f      	b.n	8008fd6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80088b6:	4b2c      	ldr	r3, [pc, #176]	; (8008968 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d0f0      	beq.n	80088a4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80088c2:	4b28      	ldr	r3, [pc, #160]	; (8008964 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80088c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80088ca:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80088cc:	693b      	ldr	r3, [r7, #16]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d035      	beq.n	800893e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80088da:	693a      	ldr	r2, [r7, #16]
 80088dc:	429a      	cmp	r2, r3
 80088de:	d02e      	beq.n	800893e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80088e0:	4b20      	ldr	r3, [pc, #128]	; (8008964 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80088e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80088e8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80088ea:	4b1e      	ldr	r3, [pc, #120]	; (8008964 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80088ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088ee:	4a1d      	ldr	r2, [pc, #116]	; (8008964 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80088f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80088f4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80088f6:	4b1b      	ldr	r3, [pc, #108]	; (8008964 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80088f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088fa:	4a1a      	ldr	r2, [pc, #104]	; (8008964 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80088fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008900:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8008902:	4a18      	ldr	r2, [pc, #96]	; (8008964 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008904:	693b      	ldr	r3, [r7, #16]
 8008906:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008908:	4b16      	ldr	r3, [pc, #88]	; (8008964 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800890a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800890c:	f003 0301 	and.w	r3, r3, #1
 8008910:	2b01      	cmp	r3, #1
 8008912:	d114      	bne.n	800893e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008914:	f7fa f8bc 	bl	8002a90 <HAL_GetTick>
 8008918:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800891a:	e00a      	b.n	8008932 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800891c:	f7fa f8b8 	bl	8002a90 <HAL_GetTick>
 8008920:	4602      	mov	r2, r0
 8008922:	697b      	ldr	r3, [r7, #20]
 8008924:	1ad3      	subs	r3, r2, r3
 8008926:	f241 3288 	movw	r2, #5000	; 0x1388
 800892a:	4293      	cmp	r3, r2
 800892c:	d901      	bls.n	8008932 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800892e:	2303      	movs	r3, #3
 8008930:	e351      	b.n	8008fd6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008932:	4b0c      	ldr	r3, [pc, #48]	; (8008964 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008936:	f003 0302 	and.w	r3, r3, #2
 800893a:	2b00      	cmp	r3, #0
 800893c:	d0ee      	beq.n	800891c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008942:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008946:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800894a:	d111      	bne.n	8008970 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800894c:	4b05      	ldr	r3, [pc, #20]	; (8008964 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800894e:	689b      	ldr	r3, [r3, #8]
 8008950:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008958:	4b04      	ldr	r3, [pc, #16]	; (800896c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800895a:	400b      	ands	r3, r1
 800895c:	4901      	ldr	r1, [pc, #4]	; (8008964 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800895e:	4313      	orrs	r3, r2
 8008960:	608b      	str	r3, [r1, #8]
 8008962:	e00b      	b.n	800897c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8008964:	40023800 	.word	0x40023800
 8008968:	40007000 	.word	0x40007000
 800896c:	0ffffcff 	.word	0x0ffffcff
 8008970:	4bac      	ldr	r3, [pc, #688]	; (8008c24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008972:	689b      	ldr	r3, [r3, #8]
 8008974:	4aab      	ldr	r2, [pc, #684]	; (8008c24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008976:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800897a:	6093      	str	r3, [r2, #8]
 800897c:	4ba9      	ldr	r3, [pc, #676]	; (8008c24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800897e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008984:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008988:	49a6      	ldr	r1, [pc, #664]	; (8008c24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800898a:	4313      	orrs	r3, r2
 800898c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	f003 0310 	and.w	r3, r3, #16
 8008996:	2b00      	cmp	r3, #0
 8008998:	d010      	beq.n	80089bc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800899a:	4ba2      	ldr	r3, [pc, #648]	; (8008c24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800899c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80089a0:	4aa0      	ldr	r2, [pc, #640]	; (8008c24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80089a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80089a6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80089aa:	4b9e      	ldr	r3, [pc, #632]	; (8008c24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80089ac:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089b4:	499b      	ldr	r1, [pc, #620]	; (8008c24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80089b6:	4313      	orrs	r3, r2
 80089b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d00a      	beq.n	80089de <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80089c8:	4b96      	ldr	r3, [pc, #600]	; (8008c24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80089ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089ce:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80089d6:	4993      	ldr	r1, [pc, #588]	; (8008c24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80089d8:	4313      	orrs	r3, r2
 80089da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d00a      	beq.n	8008a00 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80089ea:	4b8e      	ldr	r3, [pc, #568]	; (8008c24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80089ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089f0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80089f8:	498a      	ldr	r1, [pc, #552]	; (8008c24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80089fa:	4313      	orrs	r3, r2
 80089fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d00a      	beq.n	8008a22 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008a0c:	4b85      	ldr	r3, [pc, #532]	; (8008c24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a12:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a1a:	4982      	ldr	r1, [pc, #520]	; (8008c24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008a1c:	4313      	orrs	r3, r2
 8008a1e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d00a      	beq.n	8008a44 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008a2e:	4b7d      	ldr	r3, [pc, #500]	; (8008c24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008a30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a34:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a3c:	4979      	ldr	r1, [pc, #484]	; (8008c24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008a3e:	4313      	orrs	r3, r2
 8008a40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d00a      	beq.n	8008a66 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008a50:	4b74      	ldr	r3, [pc, #464]	; (8008c24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008a52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a56:	f023 0203 	bic.w	r2, r3, #3
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a5e:	4971      	ldr	r1, [pc, #452]	; (8008c24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008a60:	4313      	orrs	r3, r2
 8008a62:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d00a      	beq.n	8008a88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008a72:	4b6c      	ldr	r3, [pc, #432]	; (8008c24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008a74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a78:	f023 020c 	bic.w	r2, r3, #12
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008a80:	4968      	ldr	r1, [pc, #416]	; (8008c24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008a82:	4313      	orrs	r3, r2
 8008a84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d00a      	beq.n	8008aaa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008a94:	4b63      	ldr	r3, [pc, #396]	; (8008c24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008a96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a9a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008aa2:	4960      	ldr	r1, [pc, #384]	; (8008c24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008aa4:	4313      	orrs	r3, r2
 8008aa6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d00a      	beq.n	8008acc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008ab6:	4b5b      	ldr	r3, [pc, #364]	; (8008c24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008ab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008abc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ac4:	4957      	ldr	r1, [pc, #348]	; (8008c24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008ac6:	4313      	orrs	r3, r2
 8008ac8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d00a      	beq.n	8008aee <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008ad8:	4b52      	ldr	r3, [pc, #328]	; (8008c24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ade:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ae6:	494f      	ldr	r1, [pc, #316]	; (8008c24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008ae8:	4313      	orrs	r3, r2
 8008aea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d00a      	beq.n	8008b10 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8008afa:	4b4a      	ldr	r3, [pc, #296]	; (8008c24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008afc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b00:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b08:	4946      	ldr	r1, [pc, #280]	; (8008c24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008b0a:	4313      	orrs	r3, r2
 8008b0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d00a      	beq.n	8008b32 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8008b1c:	4b41      	ldr	r3, [pc, #260]	; (8008c24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008b1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b22:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b2a:	493e      	ldr	r1, [pc, #248]	; (8008c24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008b2c:	4313      	orrs	r3, r2
 8008b2e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d00a      	beq.n	8008b54 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8008b3e:	4b39      	ldr	r3, [pc, #228]	; (8008c24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008b40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b44:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b4c:	4935      	ldr	r1, [pc, #212]	; (8008c24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008b4e:	4313      	orrs	r3, r2
 8008b50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d00a      	beq.n	8008b76 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008b60:	4b30      	ldr	r3, [pc, #192]	; (8008c24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b66:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008b6e:	492d      	ldr	r1, [pc, #180]	; (8008c24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008b70:	4313      	orrs	r3, r2
 8008b72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d011      	beq.n	8008ba6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8008b82:	4b28      	ldr	r3, [pc, #160]	; (8008c24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008b84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b88:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008b90:	4924      	ldr	r1, [pc, #144]	; (8008c24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008b92:	4313      	orrs	r3, r2
 8008b94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008b9c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008ba0:	d101      	bne.n	8008ba6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8008ba2:	2301      	movs	r3, #1
 8008ba4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	f003 0308 	and.w	r3, r3, #8
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d001      	beq.n	8008bb6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8008bb2:	2301      	movs	r3, #1
 8008bb4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d00a      	beq.n	8008bd8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008bc2:	4b18      	ldr	r3, [pc, #96]	; (8008c24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008bc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008bc8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008bd0:	4914      	ldr	r1, [pc, #80]	; (8008c24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008bd2:	4313      	orrs	r3, r2
 8008bd4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d00b      	beq.n	8008bfc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008be4:	4b0f      	ldr	r3, [pc, #60]	; (8008c24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008bea:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008bf4:	490b      	ldr	r1, [pc, #44]	; (8008c24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008bf6:	4313      	orrs	r3, r2
 8008bf8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d00f      	beq.n	8008c28 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8008c08:	4b06      	ldr	r3, [pc, #24]	; (8008c24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c0e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008c18:	4902      	ldr	r1, [pc, #8]	; (8008c24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008c1a:	4313      	orrs	r3, r2
 8008c1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8008c20:	e002      	b.n	8008c28 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8008c22:	bf00      	nop
 8008c24:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d00b      	beq.n	8008c4c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008c34:	4b8a      	ldr	r3, [pc, #552]	; (8008e60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008c36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008c3a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c44:	4986      	ldr	r1, [pc, #536]	; (8008e60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008c46:	4313      	orrs	r3, r2
 8008c48:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d00b      	beq.n	8008c70 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8008c58:	4b81      	ldr	r3, [pc, #516]	; (8008e60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008c5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008c5e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008c68:	497d      	ldr	r1, [pc, #500]	; (8008e60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008c6a:	4313      	orrs	r3, r2
 8008c6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008c70:	69fb      	ldr	r3, [r7, #28]
 8008c72:	2b01      	cmp	r3, #1
 8008c74:	d006      	beq.n	8008c84 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	f000 80d6 	beq.w	8008e30 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008c84:	4b76      	ldr	r3, [pc, #472]	; (8008e60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	4a75      	ldr	r2, [pc, #468]	; (8008e60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008c8a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008c8e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008c90:	f7f9 fefe 	bl	8002a90 <HAL_GetTick>
 8008c94:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008c96:	e008      	b.n	8008caa <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008c98:	f7f9 fefa 	bl	8002a90 <HAL_GetTick>
 8008c9c:	4602      	mov	r2, r0
 8008c9e:	697b      	ldr	r3, [r7, #20]
 8008ca0:	1ad3      	subs	r3, r2, r3
 8008ca2:	2b64      	cmp	r3, #100	; 0x64
 8008ca4:	d901      	bls.n	8008caa <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008ca6:	2303      	movs	r3, #3
 8008ca8:	e195      	b.n	8008fd6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008caa:	4b6d      	ldr	r3, [pc, #436]	; (8008e60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d1f0      	bne.n	8008c98 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	f003 0301 	and.w	r3, r3, #1
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d021      	beq.n	8008d06 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d11d      	bne.n	8008d06 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008cca:	4b65      	ldr	r3, [pc, #404]	; (8008e60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008ccc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008cd0:	0c1b      	lsrs	r3, r3, #16
 8008cd2:	f003 0303 	and.w	r3, r3, #3
 8008cd6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008cd8:	4b61      	ldr	r3, [pc, #388]	; (8008e60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008cda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008cde:	0e1b      	lsrs	r3, r3, #24
 8008ce0:	f003 030f 	and.w	r3, r3, #15
 8008ce4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	685b      	ldr	r3, [r3, #4]
 8008cea:	019a      	lsls	r2, r3, #6
 8008cec:	693b      	ldr	r3, [r7, #16]
 8008cee:	041b      	lsls	r3, r3, #16
 8008cf0:	431a      	orrs	r2, r3
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	061b      	lsls	r3, r3, #24
 8008cf6:	431a      	orrs	r2, r3
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	689b      	ldr	r3, [r3, #8]
 8008cfc:	071b      	lsls	r3, r3, #28
 8008cfe:	4958      	ldr	r1, [pc, #352]	; (8008e60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008d00:	4313      	orrs	r3, r2
 8008d02:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d004      	beq.n	8008d1c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008d1a:	d00a      	beq.n	8008d32 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d02e      	beq.n	8008d86 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008d30:	d129      	bne.n	8008d86 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008d32:	4b4b      	ldr	r3, [pc, #300]	; (8008e60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008d34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008d38:	0c1b      	lsrs	r3, r3, #16
 8008d3a:	f003 0303 	and.w	r3, r3, #3
 8008d3e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008d40:	4b47      	ldr	r3, [pc, #284]	; (8008e60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008d42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008d46:	0f1b      	lsrs	r3, r3, #28
 8008d48:	f003 0307 	and.w	r3, r3, #7
 8008d4c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	685b      	ldr	r3, [r3, #4]
 8008d52:	019a      	lsls	r2, r3, #6
 8008d54:	693b      	ldr	r3, [r7, #16]
 8008d56:	041b      	lsls	r3, r3, #16
 8008d58:	431a      	orrs	r2, r3
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	68db      	ldr	r3, [r3, #12]
 8008d5e:	061b      	lsls	r3, r3, #24
 8008d60:	431a      	orrs	r2, r3
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	071b      	lsls	r3, r3, #28
 8008d66:	493e      	ldr	r1, [pc, #248]	; (8008e60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008d68:	4313      	orrs	r3, r2
 8008d6a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008d6e:	4b3c      	ldr	r3, [pc, #240]	; (8008e60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008d70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008d74:	f023 021f 	bic.w	r2, r3, #31
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d7c:	3b01      	subs	r3, #1
 8008d7e:	4938      	ldr	r1, [pc, #224]	; (8008e60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008d80:	4313      	orrs	r3, r2
 8008d82:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d01d      	beq.n	8008dce <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008d92:	4b33      	ldr	r3, [pc, #204]	; (8008e60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008d94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008d98:	0e1b      	lsrs	r3, r3, #24
 8008d9a:	f003 030f 	and.w	r3, r3, #15
 8008d9e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008da0:	4b2f      	ldr	r3, [pc, #188]	; (8008e60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008da2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008da6:	0f1b      	lsrs	r3, r3, #28
 8008da8:	f003 0307 	and.w	r3, r3, #7
 8008dac:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	685b      	ldr	r3, [r3, #4]
 8008db2:	019a      	lsls	r2, r3, #6
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	691b      	ldr	r3, [r3, #16]
 8008db8:	041b      	lsls	r3, r3, #16
 8008dba:	431a      	orrs	r2, r3
 8008dbc:	693b      	ldr	r3, [r7, #16]
 8008dbe:	061b      	lsls	r3, r3, #24
 8008dc0:	431a      	orrs	r2, r3
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	071b      	lsls	r3, r3, #28
 8008dc6:	4926      	ldr	r1, [pc, #152]	; (8008e60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008dc8:	4313      	orrs	r3, r2
 8008dca:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d011      	beq.n	8008dfe <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	685b      	ldr	r3, [r3, #4]
 8008dde:	019a      	lsls	r2, r3, #6
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	691b      	ldr	r3, [r3, #16]
 8008de4:	041b      	lsls	r3, r3, #16
 8008de6:	431a      	orrs	r2, r3
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	68db      	ldr	r3, [r3, #12]
 8008dec:	061b      	lsls	r3, r3, #24
 8008dee:	431a      	orrs	r2, r3
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	689b      	ldr	r3, [r3, #8]
 8008df4:	071b      	lsls	r3, r3, #28
 8008df6:	491a      	ldr	r1, [pc, #104]	; (8008e60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008df8:	4313      	orrs	r3, r2
 8008dfa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008dfe:	4b18      	ldr	r3, [pc, #96]	; (8008e60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	4a17      	ldr	r2, [pc, #92]	; (8008e60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008e04:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008e08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008e0a:	f7f9 fe41 	bl	8002a90 <HAL_GetTick>
 8008e0e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008e10:	e008      	b.n	8008e24 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008e12:	f7f9 fe3d 	bl	8002a90 <HAL_GetTick>
 8008e16:	4602      	mov	r2, r0
 8008e18:	697b      	ldr	r3, [r7, #20]
 8008e1a:	1ad3      	subs	r3, r2, r3
 8008e1c:	2b64      	cmp	r3, #100	; 0x64
 8008e1e:	d901      	bls.n	8008e24 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008e20:	2303      	movs	r3, #3
 8008e22:	e0d8      	b.n	8008fd6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008e24:	4b0e      	ldr	r3, [pc, #56]	; (8008e60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d0f0      	beq.n	8008e12 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8008e30:	69bb      	ldr	r3, [r7, #24]
 8008e32:	2b01      	cmp	r3, #1
 8008e34:	f040 80ce 	bne.w	8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8008e38:	4b09      	ldr	r3, [pc, #36]	; (8008e60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	4a08      	ldr	r2, [pc, #32]	; (8008e60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008e3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008e42:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008e44:	f7f9 fe24 	bl	8002a90 <HAL_GetTick>
 8008e48:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008e4a:	e00b      	b.n	8008e64 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008e4c:	f7f9 fe20 	bl	8002a90 <HAL_GetTick>
 8008e50:	4602      	mov	r2, r0
 8008e52:	697b      	ldr	r3, [r7, #20]
 8008e54:	1ad3      	subs	r3, r2, r3
 8008e56:	2b64      	cmp	r3, #100	; 0x64
 8008e58:	d904      	bls.n	8008e64 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008e5a:	2303      	movs	r3, #3
 8008e5c:	e0bb      	b.n	8008fd6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8008e5e:	bf00      	nop
 8008e60:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008e64:	4b5e      	ldr	r3, [pc, #376]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008e6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e70:	d0ec      	beq.n	8008e4c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d003      	beq.n	8008e86 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d009      	beq.n	8008e9a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d02e      	beq.n	8008ef0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d12a      	bne.n	8008ef0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008e9a:	4b51      	ldr	r3, [pc, #324]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008e9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ea0:	0c1b      	lsrs	r3, r3, #16
 8008ea2:	f003 0303 	and.w	r3, r3, #3
 8008ea6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008ea8:	4b4d      	ldr	r3, [pc, #308]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008eae:	0f1b      	lsrs	r3, r3, #28
 8008eb0:	f003 0307 	and.w	r3, r3, #7
 8008eb4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	695b      	ldr	r3, [r3, #20]
 8008eba:	019a      	lsls	r2, r3, #6
 8008ebc:	693b      	ldr	r3, [r7, #16]
 8008ebe:	041b      	lsls	r3, r3, #16
 8008ec0:	431a      	orrs	r2, r3
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	699b      	ldr	r3, [r3, #24]
 8008ec6:	061b      	lsls	r3, r3, #24
 8008ec8:	431a      	orrs	r2, r3
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	071b      	lsls	r3, r3, #28
 8008ece:	4944      	ldr	r1, [pc, #272]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008ed0:	4313      	orrs	r3, r2
 8008ed2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008ed6:	4b42      	ldr	r3, [pc, #264]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008ed8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008edc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ee4:	3b01      	subs	r3, #1
 8008ee6:	021b      	lsls	r3, r3, #8
 8008ee8:	493d      	ldr	r1, [pc, #244]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008eea:	4313      	orrs	r3, r2
 8008eec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d022      	beq.n	8008f42 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008f00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008f04:	d11d      	bne.n	8008f42 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008f06:	4b36      	ldr	r3, [pc, #216]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008f08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f0c:	0e1b      	lsrs	r3, r3, #24
 8008f0e:	f003 030f 	and.w	r3, r3, #15
 8008f12:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008f14:	4b32      	ldr	r3, [pc, #200]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f1a:	0f1b      	lsrs	r3, r3, #28
 8008f1c:	f003 0307 	and.w	r3, r3, #7
 8008f20:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	695b      	ldr	r3, [r3, #20]
 8008f26:	019a      	lsls	r2, r3, #6
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	6a1b      	ldr	r3, [r3, #32]
 8008f2c:	041b      	lsls	r3, r3, #16
 8008f2e:	431a      	orrs	r2, r3
 8008f30:	693b      	ldr	r3, [r7, #16]
 8008f32:	061b      	lsls	r3, r3, #24
 8008f34:	431a      	orrs	r2, r3
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	071b      	lsls	r3, r3, #28
 8008f3a:	4929      	ldr	r1, [pc, #164]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008f3c:	4313      	orrs	r3, r2
 8008f3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	f003 0308 	and.w	r3, r3, #8
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d028      	beq.n	8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008f4e:	4b24      	ldr	r3, [pc, #144]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008f50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f54:	0e1b      	lsrs	r3, r3, #24
 8008f56:	f003 030f 	and.w	r3, r3, #15
 8008f5a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008f5c:	4b20      	ldr	r3, [pc, #128]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f62:	0c1b      	lsrs	r3, r3, #16
 8008f64:	f003 0303 	and.w	r3, r3, #3
 8008f68:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	695b      	ldr	r3, [r3, #20]
 8008f6e:	019a      	lsls	r2, r3, #6
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	041b      	lsls	r3, r3, #16
 8008f74:	431a      	orrs	r2, r3
 8008f76:	693b      	ldr	r3, [r7, #16]
 8008f78:	061b      	lsls	r3, r3, #24
 8008f7a:	431a      	orrs	r2, r3
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	69db      	ldr	r3, [r3, #28]
 8008f80:	071b      	lsls	r3, r3, #28
 8008f82:	4917      	ldr	r1, [pc, #92]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008f84:	4313      	orrs	r3, r2
 8008f86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8008f8a:	4b15      	ldr	r3, [pc, #84]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008f8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f90:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f98:	4911      	ldr	r1, [pc, #68]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008f9a:	4313      	orrs	r3, r2
 8008f9c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008fa0:	4b0f      	ldr	r3, [pc, #60]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	4a0e      	ldr	r2, [pc, #56]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008fa6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008faa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008fac:	f7f9 fd70 	bl	8002a90 <HAL_GetTick>
 8008fb0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008fb2:	e008      	b.n	8008fc6 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008fb4:	f7f9 fd6c 	bl	8002a90 <HAL_GetTick>
 8008fb8:	4602      	mov	r2, r0
 8008fba:	697b      	ldr	r3, [r7, #20]
 8008fbc:	1ad3      	subs	r3, r2, r3
 8008fbe:	2b64      	cmp	r3, #100	; 0x64
 8008fc0:	d901      	bls.n	8008fc6 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008fc2:	2303      	movs	r3, #3
 8008fc4:	e007      	b.n	8008fd6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008fc6:	4b06      	ldr	r3, [pc, #24]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008fce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008fd2:	d1ef      	bne.n	8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8008fd4:	2300      	movs	r3, #0
}
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	3720      	adds	r7, #32
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	bd80      	pop	{r7, pc}
 8008fde:	bf00      	nop
 8008fe0:	40023800 	.word	0x40023800

08008fe4 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b082      	sub	sp, #8
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
 8008fec:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d101      	bne.n	8008ff8 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8008ff4:	2301      	movs	r3, #1
 8008ff6:	e025      	b.n	8009044 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008ffe:	b2db      	uxtb	r3, r3
 8009000:	2b00      	cmp	r3, #0
 8009002:	d106      	bne.n	8009012 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2200      	movs	r2, #0
 8009008:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800900c:	6878      	ldr	r0, [r7, #4]
 800900e:	f7f9 f8c3 	bl	8002198 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2202      	movs	r2, #2
 8009016:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681a      	ldr	r2, [r3, #0]
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	3304      	adds	r3, #4
 8009022:	4619      	mov	r1, r3
 8009024:	4610      	mov	r0, r2
 8009026:	f000 fbf9 	bl	800981c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	6818      	ldr	r0, [r3, #0]
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	685b      	ldr	r3, [r3, #4]
 8009032:	461a      	mov	r2, r3
 8009034:	6839      	ldr	r1, [r7, #0]
 8009036:	f000 fc4d 	bl	80098d4 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	2201      	movs	r2, #1
 800903e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8009042:	2300      	movs	r3, #0
}
 8009044:	4618      	mov	r0, r3
 8009046:	3708      	adds	r7, #8
 8009048:	46bd      	mov	sp, r7
 800904a:	bd80      	pop	{r7, pc}

0800904c <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b086      	sub	sp, #24
 8009050:	af00      	add	r7, sp, #0
 8009052:	60f8      	str	r0, [r7, #12]
 8009054:	60b9      	str	r1, [r7, #8]
 8009056:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800905e:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8009060:	7dfb      	ldrb	r3, [r7, #23]
 8009062:	2b02      	cmp	r3, #2
 8009064:	d101      	bne.n	800906a <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8009066:	2302      	movs	r3, #2
 8009068:	e021      	b.n	80090ae <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800906a:	7dfb      	ldrb	r3, [r7, #23]
 800906c:	2b01      	cmp	r3, #1
 800906e:	d002      	beq.n	8009076 <HAL_SDRAM_SendCommand+0x2a>
 8009070:	7dfb      	ldrb	r3, [r7, #23]
 8009072:	2b05      	cmp	r3, #5
 8009074:	d118      	bne.n	80090a8 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	2202      	movs	r2, #2
 800907a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	687a      	ldr	r2, [r7, #4]
 8009084:	68b9      	ldr	r1, [r7, #8]
 8009086:	4618      	mov	r0, r3
 8009088:	f000 fc8e 	bl	80099a8 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800908c:	68bb      	ldr	r3, [r7, #8]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	2b02      	cmp	r3, #2
 8009092:	d104      	bne.n	800909e <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	2205      	movs	r2, #5
 8009098:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800909c:	e006      	b.n	80090ac <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	2201      	movs	r2, #1
 80090a2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80090a6:	e001      	b.n	80090ac <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 80090a8:	2301      	movs	r3, #1
 80090aa:	e000      	b.n	80090ae <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 80090ac:	2300      	movs	r3, #0
}
 80090ae:	4618      	mov	r0, r3
 80090b0:	3718      	adds	r7, #24
 80090b2:	46bd      	mov	sp, r7
 80090b4:	bd80      	pop	{r7, pc}

080090b6 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80090b6:	b580      	push	{r7, lr}
 80090b8:	b082      	sub	sp, #8
 80090ba:	af00      	add	r7, sp, #0
 80090bc:	6078      	str	r0, [r7, #4]
 80090be:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80090c6:	b2db      	uxtb	r3, r3
 80090c8:	2b02      	cmp	r3, #2
 80090ca:	d101      	bne.n	80090d0 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80090cc:	2302      	movs	r3, #2
 80090ce:	e016      	b.n	80090fe <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80090d6:	b2db      	uxtb	r3, r3
 80090d8:	2b01      	cmp	r3, #1
 80090da:	d10f      	bne.n	80090fc <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2202      	movs	r2, #2
 80090e0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	6839      	ldr	r1, [r7, #0]
 80090ea:	4618      	mov	r0, r3
 80090ec:	f000 fc80 	bl	80099f0 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2201      	movs	r2, #1
 80090f4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80090f8:	2300      	movs	r3, #0
 80090fa:	e000      	b.n	80090fe <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 80090fc:	2301      	movs	r3, #1
}
 80090fe:	4618      	mov	r0, r3
 8009100:	3708      	adds	r7, #8
 8009102:	46bd      	mov	sp, r7
 8009104:	bd80      	pop	{r7, pc}

08009106 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009106:	b580      	push	{r7, lr}
 8009108:	b084      	sub	sp, #16
 800910a:	af00      	add	r7, sp, #0
 800910c:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d101      	bne.n	8009118 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009114:	2301      	movs	r3, #1
 8009116:	e09d      	b.n	8009254 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800911c:	2b00      	cmp	r3, #0
 800911e:	d108      	bne.n	8009132 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	685b      	ldr	r3, [r3, #4]
 8009124:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009128:	d009      	beq.n	800913e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	2200      	movs	r2, #0
 800912e:	61da      	str	r2, [r3, #28]
 8009130:	e005      	b.n	800913e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	2200      	movs	r2, #0
 8009136:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	2200      	movs	r2, #0
 800913c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	2200      	movs	r2, #0
 8009142:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800914a:	b2db      	uxtb	r3, r3
 800914c:	2b00      	cmp	r3, #0
 800914e:	d106      	bne.n	800915e <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2200      	movs	r2, #0
 8009154:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009158:	6878      	ldr	r0, [r7, #4]
 800915a:	f7f8 ff47 	bl	8001fec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	2202      	movs	r2, #2
 8009162:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	681a      	ldr	r2, [r3, #0]
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009174:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	68db      	ldr	r3, [r3, #12]
 800917a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800917e:	d902      	bls.n	8009186 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009180:	2300      	movs	r3, #0
 8009182:	60fb      	str	r3, [r7, #12]
 8009184:	e002      	b.n	800918c <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009186:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800918a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	68db      	ldr	r3, [r3, #12]
 8009190:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8009194:	d007      	beq.n	80091a6 <HAL_SPI_Init+0xa0>
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	68db      	ldr	r3, [r3, #12]
 800919a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800919e:	d002      	beq.n	80091a6 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2200      	movs	r2, #0
 80091a4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	685b      	ldr	r3, [r3, #4]
 80091aa:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	689b      	ldr	r3, [r3, #8]
 80091b2:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80091b6:	431a      	orrs	r2, r3
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	691b      	ldr	r3, [r3, #16]
 80091bc:	f003 0302 	and.w	r3, r3, #2
 80091c0:	431a      	orrs	r2, r3
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	695b      	ldr	r3, [r3, #20]
 80091c6:	f003 0301 	and.w	r3, r3, #1
 80091ca:	431a      	orrs	r2, r3
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	699b      	ldr	r3, [r3, #24]
 80091d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80091d4:	431a      	orrs	r2, r3
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	69db      	ldr	r3, [r3, #28]
 80091da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80091de:	431a      	orrs	r2, r3
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	6a1b      	ldr	r3, [r3, #32]
 80091e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091e8:	ea42 0103 	orr.w	r1, r2, r3
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091f0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	430a      	orrs	r2, r1
 80091fa:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	699b      	ldr	r3, [r3, #24]
 8009200:	0c1b      	lsrs	r3, r3, #16
 8009202:	f003 0204 	and.w	r2, r3, #4
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800920a:	f003 0310 	and.w	r3, r3, #16
 800920e:	431a      	orrs	r2, r3
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009214:	f003 0308 	and.w	r3, r3, #8
 8009218:	431a      	orrs	r2, r3
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	68db      	ldr	r3, [r3, #12]
 800921e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8009222:	ea42 0103 	orr.w	r1, r2, r3
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	430a      	orrs	r2, r1
 8009232:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	69da      	ldr	r2, [r3, #28]
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009242:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	2200      	movs	r2, #0
 8009248:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	2201      	movs	r2, #1
 800924e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8009252:	2300      	movs	r3, #0
}
 8009254:	4618      	mov	r0, r3
 8009256:	3710      	adds	r7, #16
 8009258:	46bd      	mov	sp, r7
 800925a:	bd80      	pop	{r7, pc}

0800925c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b082      	sub	sp, #8
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d101      	bne.n	800926e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800926a:	2301      	movs	r3, #1
 800926c:	e049      	b.n	8009302 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009274:	b2db      	uxtb	r3, r3
 8009276:	2b00      	cmp	r3, #0
 8009278:	d106      	bne.n	8009288 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	2200      	movs	r2, #0
 800927e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009282:	6878      	ldr	r0, [r7, #4]
 8009284:	f000 f841 	bl	800930a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2202      	movs	r2, #2
 800928c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681a      	ldr	r2, [r3, #0]
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	3304      	adds	r3, #4
 8009298:	4619      	mov	r1, r3
 800929a:	4610      	mov	r0, r2
 800929c:	f000 fa00 	bl	80096a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2201      	movs	r2, #1
 80092a4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2201      	movs	r2, #1
 80092ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2201      	movs	r2, #1
 80092b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2201      	movs	r2, #1
 80092bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2201      	movs	r2, #1
 80092c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	2201      	movs	r2, #1
 80092cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2201      	movs	r2, #1
 80092d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2201      	movs	r2, #1
 80092dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2201      	movs	r2, #1
 80092e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2201      	movs	r2, #1
 80092ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2201      	movs	r2, #1
 80092f4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2201      	movs	r2, #1
 80092fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009300:	2300      	movs	r3, #0
}
 8009302:	4618      	mov	r0, r3
 8009304:	3708      	adds	r7, #8
 8009306:	46bd      	mov	sp, r7
 8009308:	bd80      	pop	{r7, pc}

0800930a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800930a:	b480      	push	{r7}
 800930c:	b083      	sub	sp, #12
 800930e:	af00      	add	r7, sp, #0
 8009310:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8009312:	bf00      	nop
 8009314:	370c      	adds	r7, #12
 8009316:	46bd      	mov	sp, r7
 8009318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931c:	4770      	bx	lr
	...

08009320 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009320:	b480      	push	{r7}
 8009322:	b085      	sub	sp, #20
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800932e:	b2db      	uxtb	r3, r3
 8009330:	2b01      	cmp	r3, #1
 8009332:	d001      	beq.n	8009338 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009334:	2301      	movs	r3, #1
 8009336:	e054      	b.n	80093e2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2202      	movs	r2, #2
 800933c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	68da      	ldr	r2, [r3, #12]
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	f042 0201 	orr.w	r2, r2, #1
 800934e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	4a26      	ldr	r2, [pc, #152]	; (80093f0 <HAL_TIM_Base_Start_IT+0xd0>)
 8009356:	4293      	cmp	r3, r2
 8009358:	d022      	beq.n	80093a0 <HAL_TIM_Base_Start_IT+0x80>
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009362:	d01d      	beq.n	80093a0 <HAL_TIM_Base_Start_IT+0x80>
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	4a22      	ldr	r2, [pc, #136]	; (80093f4 <HAL_TIM_Base_Start_IT+0xd4>)
 800936a:	4293      	cmp	r3, r2
 800936c:	d018      	beq.n	80093a0 <HAL_TIM_Base_Start_IT+0x80>
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	4a21      	ldr	r2, [pc, #132]	; (80093f8 <HAL_TIM_Base_Start_IT+0xd8>)
 8009374:	4293      	cmp	r3, r2
 8009376:	d013      	beq.n	80093a0 <HAL_TIM_Base_Start_IT+0x80>
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	4a1f      	ldr	r2, [pc, #124]	; (80093fc <HAL_TIM_Base_Start_IT+0xdc>)
 800937e:	4293      	cmp	r3, r2
 8009380:	d00e      	beq.n	80093a0 <HAL_TIM_Base_Start_IT+0x80>
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	4a1e      	ldr	r2, [pc, #120]	; (8009400 <HAL_TIM_Base_Start_IT+0xe0>)
 8009388:	4293      	cmp	r3, r2
 800938a:	d009      	beq.n	80093a0 <HAL_TIM_Base_Start_IT+0x80>
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	4a1c      	ldr	r2, [pc, #112]	; (8009404 <HAL_TIM_Base_Start_IT+0xe4>)
 8009392:	4293      	cmp	r3, r2
 8009394:	d004      	beq.n	80093a0 <HAL_TIM_Base_Start_IT+0x80>
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	4a1b      	ldr	r2, [pc, #108]	; (8009408 <HAL_TIM_Base_Start_IT+0xe8>)
 800939c:	4293      	cmp	r3, r2
 800939e:	d115      	bne.n	80093cc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	689a      	ldr	r2, [r3, #8]
 80093a6:	4b19      	ldr	r3, [pc, #100]	; (800940c <HAL_TIM_Base_Start_IT+0xec>)
 80093a8:	4013      	ands	r3, r2
 80093aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	2b06      	cmp	r3, #6
 80093b0:	d015      	beq.n	80093de <HAL_TIM_Base_Start_IT+0xbe>
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80093b8:	d011      	beq.n	80093de <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	681a      	ldr	r2, [r3, #0]
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	f042 0201 	orr.w	r2, r2, #1
 80093c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80093ca:	e008      	b.n	80093de <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	681a      	ldr	r2, [r3, #0]
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	f042 0201 	orr.w	r2, r2, #1
 80093da:	601a      	str	r2, [r3, #0]
 80093dc:	e000      	b.n	80093e0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80093de:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80093e0:	2300      	movs	r3, #0
}
 80093e2:	4618      	mov	r0, r3
 80093e4:	3714      	adds	r7, #20
 80093e6:	46bd      	mov	sp, r7
 80093e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ec:	4770      	bx	lr
 80093ee:	bf00      	nop
 80093f0:	40010000 	.word	0x40010000
 80093f4:	40000400 	.word	0x40000400
 80093f8:	40000800 	.word	0x40000800
 80093fc:	40000c00 	.word	0x40000c00
 8009400:	40010400 	.word	0x40010400
 8009404:	40014000 	.word	0x40014000
 8009408:	40001800 	.word	0x40001800
 800940c:	00010007 	.word	0x00010007

08009410 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b082      	sub	sp, #8
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	691b      	ldr	r3, [r3, #16]
 800941e:	f003 0302 	and.w	r3, r3, #2
 8009422:	2b02      	cmp	r3, #2
 8009424:	d122      	bne.n	800946c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	68db      	ldr	r3, [r3, #12]
 800942c:	f003 0302 	and.w	r3, r3, #2
 8009430:	2b02      	cmp	r3, #2
 8009432:	d11b      	bne.n	800946c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	f06f 0202 	mvn.w	r2, #2
 800943c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	2201      	movs	r2, #1
 8009442:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	699b      	ldr	r3, [r3, #24]
 800944a:	f003 0303 	and.w	r3, r3, #3
 800944e:	2b00      	cmp	r3, #0
 8009450:	d003      	beq.n	800945a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009452:	6878      	ldr	r0, [r7, #4]
 8009454:	f000 f905 	bl	8009662 <HAL_TIM_IC_CaptureCallback>
 8009458:	e005      	b.n	8009466 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800945a:	6878      	ldr	r0, [r7, #4]
 800945c:	f000 f8f7 	bl	800964e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009460:	6878      	ldr	r0, [r7, #4]
 8009462:	f000 f908 	bl	8009676 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	2200      	movs	r2, #0
 800946a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	691b      	ldr	r3, [r3, #16]
 8009472:	f003 0304 	and.w	r3, r3, #4
 8009476:	2b04      	cmp	r3, #4
 8009478:	d122      	bne.n	80094c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	68db      	ldr	r3, [r3, #12]
 8009480:	f003 0304 	and.w	r3, r3, #4
 8009484:	2b04      	cmp	r3, #4
 8009486:	d11b      	bne.n	80094c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	f06f 0204 	mvn.w	r2, #4
 8009490:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	2202      	movs	r2, #2
 8009496:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	699b      	ldr	r3, [r3, #24]
 800949e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d003      	beq.n	80094ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80094a6:	6878      	ldr	r0, [r7, #4]
 80094a8:	f000 f8db 	bl	8009662 <HAL_TIM_IC_CaptureCallback>
 80094ac:	e005      	b.n	80094ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80094ae:	6878      	ldr	r0, [r7, #4]
 80094b0:	f000 f8cd 	bl	800964e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80094b4:	6878      	ldr	r0, [r7, #4]
 80094b6:	f000 f8de 	bl	8009676 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	2200      	movs	r2, #0
 80094be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	691b      	ldr	r3, [r3, #16]
 80094c6:	f003 0308 	and.w	r3, r3, #8
 80094ca:	2b08      	cmp	r3, #8
 80094cc:	d122      	bne.n	8009514 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	68db      	ldr	r3, [r3, #12]
 80094d4:	f003 0308 	and.w	r3, r3, #8
 80094d8:	2b08      	cmp	r3, #8
 80094da:	d11b      	bne.n	8009514 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	f06f 0208 	mvn.w	r2, #8
 80094e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	2204      	movs	r2, #4
 80094ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	69db      	ldr	r3, [r3, #28]
 80094f2:	f003 0303 	and.w	r3, r3, #3
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d003      	beq.n	8009502 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80094fa:	6878      	ldr	r0, [r7, #4]
 80094fc:	f000 f8b1 	bl	8009662 <HAL_TIM_IC_CaptureCallback>
 8009500:	e005      	b.n	800950e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009502:	6878      	ldr	r0, [r7, #4]
 8009504:	f000 f8a3 	bl	800964e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009508:	6878      	ldr	r0, [r7, #4]
 800950a:	f000 f8b4 	bl	8009676 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	2200      	movs	r2, #0
 8009512:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	691b      	ldr	r3, [r3, #16]
 800951a:	f003 0310 	and.w	r3, r3, #16
 800951e:	2b10      	cmp	r3, #16
 8009520:	d122      	bne.n	8009568 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	68db      	ldr	r3, [r3, #12]
 8009528:	f003 0310 	and.w	r3, r3, #16
 800952c:	2b10      	cmp	r3, #16
 800952e:	d11b      	bne.n	8009568 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	f06f 0210 	mvn.w	r2, #16
 8009538:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	2208      	movs	r2, #8
 800953e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	69db      	ldr	r3, [r3, #28]
 8009546:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800954a:	2b00      	cmp	r3, #0
 800954c:	d003      	beq.n	8009556 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800954e:	6878      	ldr	r0, [r7, #4]
 8009550:	f000 f887 	bl	8009662 <HAL_TIM_IC_CaptureCallback>
 8009554:	e005      	b.n	8009562 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009556:	6878      	ldr	r0, [r7, #4]
 8009558:	f000 f879 	bl	800964e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800955c:	6878      	ldr	r0, [r7, #4]
 800955e:	f000 f88a 	bl	8009676 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	2200      	movs	r2, #0
 8009566:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	691b      	ldr	r3, [r3, #16]
 800956e:	f003 0301 	and.w	r3, r3, #1
 8009572:	2b01      	cmp	r3, #1
 8009574:	d10e      	bne.n	8009594 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	68db      	ldr	r3, [r3, #12]
 800957c:	f003 0301 	and.w	r3, r3, #1
 8009580:	2b01      	cmp	r3, #1
 8009582:	d107      	bne.n	8009594 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	f06f 0201 	mvn.w	r2, #1
 800958c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800958e:	6878      	ldr	r0, [r7, #4]
 8009590:	f7f8 fa32 	bl	80019f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	691b      	ldr	r3, [r3, #16]
 800959a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800959e:	2b80      	cmp	r3, #128	; 0x80
 80095a0:	d10e      	bne.n	80095c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	68db      	ldr	r3, [r3, #12]
 80095a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095ac:	2b80      	cmp	r3, #128	; 0x80
 80095ae:	d107      	bne.n	80095c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80095b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80095ba:	6878      	ldr	r0, [r7, #4]
 80095bc:	f000 f91a 	bl	80097f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	691b      	ldr	r3, [r3, #16]
 80095c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80095ce:	d10e      	bne.n	80095ee <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	68db      	ldr	r3, [r3, #12]
 80095d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095da:	2b80      	cmp	r3, #128	; 0x80
 80095dc:	d107      	bne.n	80095ee <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80095e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80095e8:	6878      	ldr	r0, [r7, #4]
 80095ea:	f000 f90d 	bl	8009808 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	691b      	ldr	r3, [r3, #16]
 80095f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095f8:	2b40      	cmp	r3, #64	; 0x40
 80095fa:	d10e      	bne.n	800961a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	68db      	ldr	r3, [r3, #12]
 8009602:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009606:	2b40      	cmp	r3, #64	; 0x40
 8009608:	d107      	bne.n	800961a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009612:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009614:	6878      	ldr	r0, [r7, #4]
 8009616:	f000 f838 	bl	800968a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	691b      	ldr	r3, [r3, #16]
 8009620:	f003 0320 	and.w	r3, r3, #32
 8009624:	2b20      	cmp	r3, #32
 8009626:	d10e      	bne.n	8009646 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	68db      	ldr	r3, [r3, #12]
 800962e:	f003 0320 	and.w	r3, r3, #32
 8009632:	2b20      	cmp	r3, #32
 8009634:	d107      	bne.n	8009646 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	f06f 0220 	mvn.w	r2, #32
 800963e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009640:	6878      	ldr	r0, [r7, #4]
 8009642:	f000 f8cd 	bl	80097e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009646:	bf00      	nop
 8009648:	3708      	adds	r7, #8
 800964a:	46bd      	mov	sp, r7
 800964c:	bd80      	pop	{r7, pc}

0800964e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800964e:	b480      	push	{r7}
 8009650:	b083      	sub	sp, #12
 8009652:	af00      	add	r7, sp, #0
 8009654:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009656:	bf00      	nop
 8009658:	370c      	adds	r7, #12
 800965a:	46bd      	mov	sp, r7
 800965c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009660:	4770      	bx	lr

08009662 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009662:	b480      	push	{r7}
 8009664:	b083      	sub	sp, #12
 8009666:	af00      	add	r7, sp, #0
 8009668:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800966a:	bf00      	nop
 800966c:	370c      	adds	r7, #12
 800966e:	46bd      	mov	sp, r7
 8009670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009674:	4770      	bx	lr

08009676 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009676:	b480      	push	{r7}
 8009678:	b083      	sub	sp, #12
 800967a:	af00      	add	r7, sp, #0
 800967c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800967e:	bf00      	nop
 8009680:	370c      	adds	r7, #12
 8009682:	46bd      	mov	sp, r7
 8009684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009688:	4770      	bx	lr

0800968a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800968a:	b480      	push	{r7}
 800968c:	b083      	sub	sp, #12
 800968e:	af00      	add	r7, sp, #0
 8009690:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009692:	bf00      	nop
 8009694:	370c      	adds	r7, #12
 8009696:	46bd      	mov	sp, r7
 8009698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969c:	4770      	bx	lr
	...

080096a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80096a0:	b480      	push	{r7}
 80096a2:	b085      	sub	sp, #20
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
 80096a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	4a40      	ldr	r2, [pc, #256]	; (80097b4 <TIM_Base_SetConfig+0x114>)
 80096b4:	4293      	cmp	r3, r2
 80096b6:	d013      	beq.n	80096e0 <TIM_Base_SetConfig+0x40>
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096be:	d00f      	beq.n	80096e0 <TIM_Base_SetConfig+0x40>
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	4a3d      	ldr	r2, [pc, #244]	; (80097b8 <TIM_Base_SetConfig+0x118>)
 80096c4:	4293      	cmp	r3, r2
 80096c6:	d00b      	beq.n	80096e0 <TIM_Base_SetConfig+0x40>
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	4a3c      	ldr	r2, [pc, #240]	; (80097bc <TIM_Base_SetConfig+0x11c>)
 80096cc:	4293      	cmp	r3, r2
 80096ce:	d007      	beq.n	80096e0 <TIM_Base_SetConfig+0x40>
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	4a3b      	ldr	r2, [pc, #236]	; (80097c0 <TIM_Base_SetConfig+0x120>)
 80096d4:	4293      	cmp	r3, r2
 80096d6:	d003      	beq.n	80096e0 <TIM_Base_SetConfig+0x40>
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	4a3a      	ldr	r2, [pc, #232]	; (80097c4 <TIM_Base_SetConfig+0x124>)
 80096dc:	4293      	cmp	r3, r2
 80096de:	d108      	bne.n	80096f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	685b      	ldr	r3, [r3, #4]
 80096ec:	68fa      	ldr	r2, [r7, #12]
 80096ee:	4313      	orrs	r3, r2
 80096f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	4a2f      	ldr	r2, [pc, #188]	; (80097b4 <TIM_Base_SetConfig+0x114>)
 80096f6:	4293      	cmp	r3, r2
 80096f8:	d02b      	beq.n	8009752 <TIM_Base_SetConfig+0xb2>
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009700:	d027      	beq.n	8009752 <TIM_Base_SetConfig+0xb2>
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	4a2c      	ldr	r2, [pc, #176]	; (80097b8 <TIM_Base_SetConfig+0x118>)
 8009706:	4293      	cmp	r3, r2
 8009708:	d023      	beq.n	8009752 <TIM_Base_SetConfig+0xb2>
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	4a2b      	ldr	r2, [pc, #172]	; (80097bc <TIM_Base_SetConfig+0x11c>)
 800970e:	4293      	cmp	r3, r2
 8009710:	d01f      	beq.n	8009752 <TIM_Base_SetConfig+0xb2>
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	4a2a      	ldr	r2, [pc, #168]	; (80097c0 <TIM_Base_SetConfig+0x120>)
 8009716:	4293      	cmp	r3, r2
 8009718:	d01b      	beq.n	8009752 <TIM_Base_SetConfig+0xb2>
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	4a29      	ldr	r2, [pc, #164]	; (80097c4 <TIM_Base_SetConfig+0x124>)
 800971e:	4293      	cmp	r3, r2
 8009720:	d017      	beq.n	8009752 <TIM_Base_SetConfig+0xb2>
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	4a28      	ldr	r2, [pc, #160]	; (80097c8 <TIM_Base_SetConfig+0x128>)
 8009726:	4293      	cmp	r3, r2
 8009728:	d013      	beq.n	8009752 <TIM_Base_SetConfig+0xb2>
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	4a27      	ldr	r2, [pc, #156]	; (80097cc <TIM_Base_SetConfig+0x12c>)
 800972e:	4293      	cmp	r3, r2
 8009730:	d00f      	beq.n	8009752 <TIM_Base_SetConfig+0xb2>
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	4a26      	ldr	r2, [pc, #152]	; (80097d0 <TIM_Base_SetConfig+0x130>)
 8009736:	4293      	cmp	r3, r2
 8009738:	d00b      	beq.n	8009752 <TIM_Base_SetConfig+0xb2>
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	4a25      	ldr	r2, [pc, #148]	; (80097d4 <TIM_Base_SetConfig+0x134>)
 800973e:	4293      	cmp	r3, r2
 8009740:	d007      	beq.n	8009752 <TIM_Base_SetConfig+0xb2>
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	4a24      	ldr	r2, [pc, #144]	; (80097d8 <TIM_Base_SetConfig+0x138>)
 8009746:	4293      	cmp	r3, r2
 8009748:	d003      	beq.n	8009752 <TIM_Base_SetConfig+0xb2>
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	4a23      	ldr	r2, [pc, #140]	; (80097dc <TIM_Base_SetConfig+0x13c>)
 800974e:	4293      	cmp	r3, r2
 8009750:	d108      	bne.n	8009764 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009758:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	68db      	ldr	r3, [r3, #12]
 800975e:	68fa      	ldr	r2, [r7, #12]
 8009760:	4313      	orrs	r3, r2
 8009762:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800976a:	683b      	ldr	r3, [r7, #0]
 800976c:	695b      	ldr	r3, [r3, #20]
 800976e:	4313      	orrs	r3, r2
 8009770:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	68fa      	ldr	r2, [r7, #12]
 8009776:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	689a      	ldr	r2, [r3, #8]
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009780:	683b      	ldr	r3, [r7, #0]
 8009782:	681a      	ldr	r2, [r3, #0]
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	4a0a      	ldr	r2, [pc, #40]	; (80097b4 <TIM_Base_SetConfig+0x114>)
 800978c:	4293      	cmp	r3, r2
 800978e:	d003      	beq.n	8009798 <TIM_Base_SetConfig+0xf8>
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	4a0c      	ldr	r2, [pc, #48]	; (80097c4 <TIM_Base_SetConfig+0x124>)
 8009794:	4293      	cmp	r3, r2
 8009796:	d103      	bne.n	80097a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009798:	683b      	ldr	r3, [r7, #0]
 800979a:	691a      	ldr	r2, [r3, #16]
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	2201      	movs	r2, #1
 80097a4:	615a      	str	r2, [r3, #20]
}
 80097a6:	bf00      	nop
 80097a8:	3714      	adds	r7, #20
 80097aa:	46bd      	mov	sp, r7
 80097ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b0:	4770      	bx	lr
 80097b2:	bf00      	nop
 80097b4:	40010000 	.word	0x40010000
 80097b8:	40000400 	.word	0x40000400
 80097bc:	40000800 	.word	0x40000800
 80097c0:	40000c00 	.word	0x40000c00
 80097c4:	40010400 	.word	0x40010400
 80097c8:	40014000 	.word	0x40014000
 80097cc:	40014400 	.word	0x40014400
 80097d0:	40014800 	.word	0x40014800
 80097d4:	40001800 	.word	0x40001800
 80097d8:	40001c00 	.word	0x40001c00
 80097dc:	40002000 	.word	0x40002000

080097e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80097e0:	b480      	push	{r7}
 80097e2:	b083      	sub	sp, #12
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80097e8:	bf00      	nop
 80097ea:	370c      	adds	r7, #12
 80097ec:	46bd      	mov	sp, r7
 80097ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f2:	4770      	bx	lr

080097f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80097f4:	b480      	push	{r7}
 80097f6:	b083      	sub	sp, #12
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80097fc:	bf00      	nop
 80097fe:	370c      	adds	r7, #12
 8009800:	46bd      	mov	sp, r7
 8009802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009806:	4770      	bx	lr

08009808 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009808:	b480      	push	{r7}
 800980a:	b083      	sub	sp, #12
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009810:	bf00      	nop
 8009812:	370c      	adds	r7, #12
 8009814:	46bd      	mov	sp, r7
 8009816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981a:	4770      	bx	lr

0800981c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800981c:	b480      	push	{r7}
 800981e:	b083      	sub	sp, #12
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
 8009824:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d121      	bne.n	8009872 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681a      	ldr	r2, [r3, #0]
 8009832:	4b27      	ldr	r3, [pc, #156]	; (80098d0 <FMC_SDRAM_Init+0xb4>)
 8009834:	4013      	ands	r3, r2
 8009836:	683a      	ldr	r2, [r7, #0]
 8009838:	6851      	ldr	r1, [r2, #4]
 800983a:	683a      	ldr	r2, [r7, #0]
 800983c:	6892      	ldr	r2, [r2, #8]
 800983e:	4311      	orrs	r1, r2
 8009840:	683a      	ldr	r2, [r7, #0]
 8009842:	68d2      	ldr	r2, [r2, #12]
 8009844:	4311      	orrs	r1, r2
 8009846:	683a      	ldr	r2, [r7, #0]
 8009848:	6912      	ldr	r2, [r2, #16]
 800984a:	4311      	orrs	r1, r2
 800984c:	683a      	ldr	r2, [r7, #0]
 800984e:	6952      	ldr	r2, [r2, #20]
 8009850:	4311      	orrs	r1, r2
 8009852:	683a      	ldr	r2, [r7, #0]
 8009854:	6992      	ldr	r2, [r2, #24]
 8009856:	4311      	orrs	r1, r2
 8009858:	683a      	ldr	r2, [r7, #0]
 800985a:	69d2      	ldr	r2, [r2, #28]
 800985c:	4311      	orrs	r1, r2
 800985e:	683a      	ldr	r2, [r7, #0]
 8009860:	6a12      	ldr	r2, [r2, #32]
 8009862:	4311      	orrs	r1, r2
 8009864:	683a      	ldr	r2, [r7, #0]
 8009866:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009868:	430a      	orrs	r2, r1
 800986a:	431a      	orrs	r2, r3
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	601a      	str	r2, [r3, #0]
 8009870:	e026      	b.n	80098c0 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800987a:	683b      	ldr	r3, [r7, #0]
 800987c:	69d9      	ldr	r1, [r3, #28]
 800987e:	683b      	ldr	r3, [r7, #0]
 8009880:	6a1b      	ldr	r3, [r3, #32]
 8009882:	4319      	orrs	r1, r3
 8009884:	683b      	ldr	r3, [r7, #0]
 8009886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009888:	430b      	orrs	r3, r1
 800988a:	431a      	orrs	r2, r3
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	685a      	ldr	r2, [r3, #4]
 8009894:	4b0e      	ldr	r3, [pc, #56]	; (80098d0 <FMC_SDRAM_Init+0xb4>)
 8009896:	4013      	ands	r3, r2
 8009898:	683a      	ldr	r2, [r7, #0]
 800989a:	6851      	ldr	r1, [r2, #4]
 800989c:	683a      	ldr	r2, [r7, #0]
 800989e:	6892      	ldr	r2, [r2, #8]
 80098a0:	4311      	orrs	r1, r2
 80098a2:	683a      	ldr	r2, [r7, #0]
 80098a4:	68d2      	ldr	r2, [r2, #12]
 80098a6:	4311      	orrs	r1, r2
 80098a8:	683a      	ldr	r2, [r7, #0]
 80098aa:	6912      	ldr	r2, [r2, #16]
 80098ac:	4311      	orrs	r1, r2
 80098ae:	683a      	ldr	r2, [r7, #0]
 80098b0:	6952      	ldr	r2, [r2, #20]
 80098b2:	4311      	orrs	r1, r2
 80098b4:	683a      	ldr	r2, [r7, #0]
 80098b6:	6992      	ldr	r2, [r2, #24]
 80098b8:	430a      	orrs	r2, r1
 80098ba:	431a      	orrs	r2, r3
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 80098c0:	2300      	movs	r3, #0
}
 80098c2:	4618      	mov	r0, r3
 80098c4:	370c      	adds	r7, #12
 80098c6:	46bd      	mov	sp, r7
 80098c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098cc:	4770      	bx	lr
 80098ce:	bf00      	nop
 80098d0:	ffff8000 	.word	0xffff8000

080098d4 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80098d4:	b480      	push	{r7}
 80098d6:	b085      	sub	sp, #20
 80098d8:	af00      	add	r7, sp, #0
 80098da:	60f8      	str	r0, [r7, #12]
 80098dc:	60b9      	str	r1, [r7, #8]
 80098de:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d128      	bne.n	8009938 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	689b      	ldr	r3, [r3, #8]
 80098ea:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80098ee:	68bb      	ldr	r3, [r7, #8]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	1e59      	subs	r1, r3, #1
 80098f4:	68bb      	ldr	r3, [r7, #8]
 80098f6:	685b      	ldr	r3, [r3, #4]
 80098f8:	3b01      	subs	r3, #1
 80098fa:	011b      	lsls	r3, r3, #4
 80098fc:	4319      	orrs	r1, r3
 80098fe:	68bb      	ldr	r3, [r7, #8]
 8009900:	689b      	ldr	r3, [r3, #8]
 8009902:	3b01      	subs	r3, #1
 8009904:	021b      	lsls	r3, r3, #8
 8009906:	4319      	orrs	r1, r3
 8009908:	68bb      	ldr	r3, [r7, #8]
 800990a:	68db      	ldr	r3, [r3, #12]
 800990c:	3b01      	subs	r3, #1
 800990e:	031b      	lsls	r3, r3, #12
 8009910:	4319      	orrs	r1, r3
 8009912:	68bb      	ldr	r3, [r7, #8]
 8009914:	691b      	ldr	r3, [r3, #16]
 8009916:	3b01      	subs	r3, #1
 8009918:	041b      	lsls	r3, r3, #16
 800991a:	4319      	orrs	r1, r3
 800991c:	68bb      	ldr	r3, [r7, #8]
 800991e:	695b      	ldr	r3, [r3, #20]
 8009920:	3b01      	subs	r3, #1
 8009922:	051b      	lsls	r3, r3, #20
 8009924:	4319      	orrs	r1, r3
 8009926:	68bb      	ldr	r3, [r7, #8]
 8009928:	699b      	ldr	r3, [r3, #24]
 800992a:	3b01      	subs	r3, #1
 800992c:	061b      	lsls	r3, r3, #24
 800992e:	430b      	orrs	r3, r1
 8009930:	431a      	orrs	r2, r3
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	609a      	str	r2, [r3, #8]
 8009936:	e02d      	b.n	8009994 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	689a      	ldr	r2, [r3, #8]
 800993c:	4b19      	ldr	r3, [pc, #100]	; (80099a4 <FMC_SDRAM_Timing_Init+0xd0>)
 800993e:	4013      	ands	r3, r2
 8009940:	68ba      	ldr	r2, [r7, #8]
 8009942:	68d2      	ldr	r2, [r2, #12]
 8009944:	3a01      	subs	r2, #1
 8009946:	0311      	lsls	r1, r2, #12
 8009948:	68ba      	ldr	r2, [r7, #8]
 800994a:	6952      	ldr	r2, [r2, #20]
 800994c:	3a01      	subs	r2, #1
 800994e:	0512      	lsls	r2, r2, #20
 8009950:	430a      	orrs	r2, r1
 8009952:	431a      	orrs	r2, r3
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	68db      	ldr	r3, [r3, #12]
 800995c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8009960:	68bb      	ldr	r3, [r7, #8]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	1e59      	subs	r1, r3, #1
 8009966:	68bb      	ldr	r3, [r7, #8]
 8009968:	685b      	ldr	r3, [r3, #4]
 800996a:	3b01      	subs	r3, #1
 800996c:	011b      	lsls	r3, r3, #4
 800996e:	4319      	orrs	r1, r3
 8009970:	68bb      	ldr	r3, [r7, #8]
 8009972:	689b      	ldr	r3, [r3, #8]
 8009974:	3b01      	subs	r3, #1
 8009976:	021b      	lsls	r3, r3, #8
 8009978:	4319      	orrs	r1, r3
 800997a:	68bb      	ldr	r3, [r7, #8]
 800997c:	691b      	ldr	r3, [r3, #16]
 800997e:	3b01      	subs	r3, #1
 8009980:	041b      	lsls	r3, r3, #16
 8009982:	4319      	orrs	r1, r3
 8009984:	68bb      	ldr	r3, [r7, #8]
 8009986:	699b      	ldr	r3, [r3, #24]
 8009988:	3b01      	subs	r3, #1
 800998a:	061b      	lsls	r3, r3, #24
 800998c:	430b      	orrs	r3, r1
 800998e:	431a      	orrs	r2, r3
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8009994:	2300      	movs	r3, #0
}
 8009996:	4618      	mov	r0, r3
 8009998:	3714      	adds	r7, #20
 800999a:	46bd      	mov	sp, r7
 800999c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a0:	4770      	bx	lr
 80099a2:	bf00      	nop
 80099a4:	ff0f0fff 	.word	0xff0f0fff

080099a8 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80099a8:	b480      	push	{r7}
 80099aa:	b085      	sub	sp, #20
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	60f8      	str	r0, [r7, #12]
 80099b0:	60b9      	str	r1, [r7, #8]
 80099b2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	691a      	ldr	r2, [r3, #16]
 80099b8:	4b0c      	ldr	r3, [pc, #48]	; (80099ec <FMC_SDRAM_SendCommand+0x44>)
 80099ba:	4013      	ands	r3, r2
 80099bc:	68ba      	ldr	r2, [r7, #8]
 80099be:	6811      	ldr	r1, [r2, #0]
 80099c0:	68ba      	ldr	r2, [r7, #8]
 80099c2:	6852      	ldr	r2, [r2, #4]
 80099c4:	4311      	orrs	r1, r2
 80099c6:	68ba      	ldr	r2, [r7, #8]
 80099c8:	6892      	ldr	r2, [r2, #8]
 80099ca:	3a01      	subs	r2, #1
 80099cc:	0152      	lsls	r2, r2, #5
 80099ce:	4311      	orrs	r1, r2
 80099d0:	68ba      	ldr	r2, [r7, #8]
 80099d2:	68d2      	ldr	r2, [r2, #12]
 80099d4:	0252      	lsls	r2, r2, #9
 80099d6:	430a      	orrs	r2, r1
 80099d8:	431a      	orrs	r2, r3
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 80099de:	2300      	movs	r3, #0
}
 80099e0:	4618      	mov	r0, r3
 80099e2:	3714      	adds	r7, #20
 80099e4:	46bd      	mov	sp, r7
 80099e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ea:	4770      	bx	lr
 80099ec:	ffc00000 	.word	0xffc00000

080099f0 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 80099f0:	b480      	push	{r7}
 80099f2:	b083      	sub	sp, #12
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
 80099f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	695a      	ldr	r2, [r3, #20]
 80099fe:	4b07      	ldr	r3, [pc, #28]	; (8009a1c <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 8009a00:	4013      	ands	r3, r2
 8009a02:	683a      	ldr	r2, [r7, #0]
 8009a04:	0052      	lsls	r2, r2, #1
 8009a06:	431a      	orrs	r2, r3
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8009a0c:	2300      	movs	r3, #0
}
 8009a0e:	4618      	mov	r0, r3
 8009a10:	370c      	adds	r7, #12
 8009a12:	46bd      	mov	sp, r7
 8009a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a18:	4770      	bx	lr
 8009a1a:	bf00      	nop
 8009a1c:	ffffc001 	.word	0xffffc001

08009a20 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009a20:	b480      	push	{r7}
 8009a22:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8009a24:	bf00      	nop
 8009a26:	46bd      	mov	sp, r7
 8009a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2c:	4770      	bx	lr
	...

08009a30 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009a30:	b480      	push	{r7}
 8009a32:	b085      	sub	sp, #20
 8009a34:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009a36:	f3ef 8305 	mrs	r3, IPSR
 8009a3a:	60bb      	str	r3, [r7, #8]
  return(result);
 8009a3c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d10f      	bne.n	8009a62 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009a42:	f3ef 8310 	mrs	r3, PRIMASK
 8009a46:	607b      	str	r3, [r7, #4]
  return(result);
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d105      	bne.n	8009a5a <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009a4e:	f3ef 8311 	mrs	r3, BASEPRI
 8009a52:	603b      	str	r3, [r7, #0]
  return(result);
 8009a54:	683b      	ldr	r3, [r7, #0]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d007      	beq.n	8009a6a <osKernelInitialize+0x3a>
 8009a5a:	4b0e      	ldr	r3, [pc, #56]	; (8009a94 <osKernelInitialize+0x64>)
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	2b02      	cmp	r3, #2
 8009a60:	d103      	bne.n	8009a6a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8009a62:	f06f 0305 	mvn.w	r3, #5
 8009a66:	60fb      	str	r3, [r7, #12]
 8009a68:	e00c      	b.n	8009a84 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009a6a:	4b0a      	ldr	r3, [pc, #40]	; (8009a94 <osKernelInitialize+0x64>)
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d105      	bne.n	8009a7e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009a72:	4b08      	ldr	r3, [pc, #32]	; (8009a94 <osKernelInitialize+0x64>)
 8009a74:	2201      	movs	r2, #1
 8009a76:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009a78:	2300      	movs	r3, #0
 8009a7a:	60fb      	str	r3, [r7, #12]
 8009a7c:	e002      	b.n	8009a84 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8009a7e:	f04f 33ff 	mov.w	r3, #4294967295
 8009a82:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8009a84:	68fb      	ldr	r3, [r7, #12]
}
 8009a86:	4618      	mov	r0, r3
 8009a88:	3714      	adds	r7, #20
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a90:	4770      	bx	lr
 8009a92:	bf00      	nop
 8009a94:	20009b20 	.word	0x20009b20

08009a98 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b084      	sub	sp, #16
 8009a9c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009a9e:	f3ef 8305 	mrs	r3, IPSR
 8009aa2:	60bb      	str	r3, [r7, #8]
  return(result);
 8009aa4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d10f      	bne.n	8009aca <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009aaa:	f3ef 8310 	mrs	r3, PRIMASK
 8009aae:	607b      	str	r3, [r7, #4]
  return(result);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d105      	bne.n	8009ac2 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009ab6:	f3ef 8311 	mrs	r3, BASEPRI
 8009aba:	603b      	str	r3, [r7, #0]
  return(result);
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d007      	beq.n	8009ad2 <osKernelStart+0x3a>
 8009ac2:	4b0f      	ldr	r3, [pc, #60]	; (8009b00 <osKernelStart+0x68>)
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	2b02      	cmp	r3, #2
 8009ac8:	d103      	bne.n	8009ad2 <osKernelStart+0x3a>
    stat = osErrorISR;
 8009aca:	f06f 0305 	mvn.w	r3, #5
 8009ace:	60fb      	str	r3, [r7, #12]
 8009ad0:	e010      	b.n	8009af4 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009ad2:	4b0b      	ldr	r3, [pc, #44]	; (8009b00 <osKernelStart+0x68>)
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	2b01      	cmp	r3, #1
 8009ad8:	d109      	bne.n	8009aee <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009ada:	f7ff ffa1 	bl	8009a20 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009ade:	4b08      	ldr	r3, [pc, #32]	; (8009b00 <osKernelStart+0x68>)
 8009ae0:	2202      	movs	r2, #2
 8009ae2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009ae4:	f002 f854 	bl	800bb90 <vTaskStartScheduler>
      stat = osOK;
 8009ae8:	2300      	movs	r3, #0
 8009aea:	60fb      	str	r3, [r7, #12]
 8009aec:	e002      	b.n	8009af4 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8009aee:	f04f 33ff 	mov.w	r3, #4294967295
 8009af2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8009af4:	68fb      	ldr	r3, [r7, #12]
}
 8009af6:	4618      	mov	r0, r3
 8009af8:	3710      	adds	r7, #16
 8009afa:	46bd      	mov	sp, r7
 8009afc:	bd80      	pop	{r7, pc}
 8009afe:	bf00      	nop
 8009b00:	20009b20 	.word	0x20009b20

08009b04 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b090      	sub	sp, #64	; 0x40
 8009b08:	af04      	add	r7, sp, #16
 8009b0a:	60f8      	str	r0, [r7, #12]
 8009b0c:	60b9      	str	r1, [r7, #8]
 8009b0e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009b10:	2300      	movs	r3, #0
 8009b12:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b14:	f3ef 8305 	mrs	r3, IPSR
 8009b18:	61fb      	str	r3, [r7, #28]
  return(result);
 8009b1a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	f040 808f 	bne.w	8009c40 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009b22:	f3ef 8310 	mrs	r3, PRIMASK
 8009b26:	61bb      	str	r3, [r7, #24]
  return(result);
 8009b28:	69bb      	ldr	r3, [r7, #24]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d105      	bne.n	8009b3a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009b2e:	f3ef 8311 	mrs	r3, BASEPRI
 8009b32:	617b      	str	r3, [r7, #20]
  return(result);
 8009b34:	697b      	ldr	r3, [r7, #20]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d003      	beq.n	8009b42 <osThreadNew+0x3e>
 8009b3a:	4b44      	ldr	r3, [pc, #272]	; (8009c4c <osThreadNew+0x148>)
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	2b02      	cmp	r3, #2
 8009b40:	d07e      	beq.n	8009c40 <osThreadNew+0x13c>
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d07b      	beq.n	8009c40 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8009b48:	2380      	movs	r3, #128	; 0x80
 8009b4a:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8009b4c:	2318      	movs	r3, #24
 8009b4e:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8009b50:	2300      	movs	r3, #0
 8009b52:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8009b54:	f04f 33ff 	mov.w	r3, #4294967295
 8009b58:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d045      	beq.n	8009bec <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d002      	beq.n	8009b6e <osThreadNew+0x6a>
        name = attr->name;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	699b      	ldr	r3, [r3, #24]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d002      	beq.n	8009b7c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	699b      	ldr	r3, [r3, #24]
 8009b7a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d008      	beq.n	8009b94 <osThreadNew+0x90>
 8009b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b84:	2b38      	cmp	r3, #56	; 0x38
 8009b86:	d805      	bhi.n	8009b94 <osThreadNew+0x90>
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	685b      	ldr	r3, [r3, #4]
 8009b8c:	f003 0301 	and.w	r3, r3, #1
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d001      	beq.n	8009b98 <osThreadNew+0x94>
        return (NULL);
 8009b94:	2300      	movs	r3, #0
 8009b96:	e054      	b.n	8009c42 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	695b      	ldr	r3, [r3, #20]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d003      	beq.n	8009ba8 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	695b      	ldr	r3, [r3, #20]
 8009ba4:	089b      	lsrs	r3, r3, #2
 8009ba6:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	689b      	ldr	r3, [r3, #8]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d00e      	beq.n	8009bce <osThreadNew+0xca>
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	68db      	ldr	r3, [r3, #12]
 8009bb4:	2b5b      	cmp	r3, #91	; 0x5b
 8009bb6:	d90a      	bls.n	8009bce <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d006      	beq.n	8009bce <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	695b      	ldr	r3, [r3, #20]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d002      	beq.n	8009bce <osThreadNew+0xca>
        mem = 1;
 8009bc8:	2301      	movs	r3, #1
 8009bca:	623b      	str	r3, [r7, #32]
 8009bcc:	e010      	b.n	8009bf0 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	689b      	ldr	r3, [r3, #8]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d10c      	bne.n	8009bf0 <osThreadNew+0xec>
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	68db      	ldr	r3, [r3, #12]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d108      	bne.n	8009bf0 <osThreadNew+0xec>
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	691b      	ldr	r3, [r3, #16]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d104      	bne.n	8009bf0 <osThreadNew+0xec>
          mem = 0;
 8009be6:	2300      	movs	r3, #0
 8009be8:	623b      	str	r3, [r7, #32]
 8009bea:	e001      	b.n	8009bf0 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8009bec:	2300      	movs	r3, #0
 8009bee:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8009bf0:	6a3b      	ldr	r3, [r7, #32]
 8009bf2:	2b01      	cmp	r3, #1
 8009bf4:	d110      	bne.n	8009c18 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8009bfa:	687a      	ldr	r2, [r7, #4]
 8009bfc:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009bfe:	9202      	str	r2, [sp, #8]
 8009c00:	9301      	str	r3, [sp, #4]
 8009c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c04:	9300      	str	r3, [sp, #0]
 8009c06:	68bb      	ldr	r3, [r7, #8]
 8009c08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009c0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009c0c:	68f8      	ldr	r0, [r7, #12]
 8009c0e:	f001 fddf 	bl	800b7d0 <xTaskCreateStatic>
 8009c12:	4603      	mov	r3, r0
 8009c14:	613b      	str	r3, [r7, #16]
 8009c16:	e013      	b.n	8009c40 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8009c18:	6a3b      	ldr	r3, [r7, #32]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d110      	bne.n	8009c40 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c20:	b29a      	uxth	r2, r3
 8009c22:	f107 0310 	add.w	r3, r7, #16
 8009c26:	9301      	str	r3, [sp, #4]
 8009c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c2a:	9300      	str	r3, [sp, #0]
 8009c2c:	68bb      	ldr	r3, [r7, #8]
 8009c2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009c30:	68f8      	ldr	r0, [r7, #12]
 8009c32:	f001 fe30 	bl	800b896 <xTaskCreate>
 8009c36:	4603      	mov	r3, r0
 8009c38:	2b01      	cmp	r3, #1
 8009c3a:	d001      	beq.n	8009c40 <osThreadNew+0x13c>
          hTask = NULL;
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009c40:	693b      	ldr	r3, [r7, #16]
}
 8009c42:	4618      	mov	r0, r3
 8009c44:	3730      	adds	r7, #48	; 0x30
 8009c46:	46bd      	mov	sp, r7
 8009c48:	bd80      	pop	{r7, pc}
 8009c4a:	bf00      	nop
 8009c4c:	20009b20 	.word	0x20009b20

08009c50 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8009c50:	b580      	push	{r7, lr}
 8009c52:	b086      	sub	sp, #24
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c58:	f3ef 8305 	mrs	r3, IPSR
 8009c5c:	613b      	str	r3, [r7, #16]
  return(result);
 8009c5e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d10f      	bne.n	8009c84 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009c64:	f3ef 8310 	mrs	r3, PRIMASK
 8009c68:	60fb      	str	r3, [r7, #12]
  return(result);
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d105      	bne.n	8009c7c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009c70:	f3ef 8311 	mrs	r3, BASEPRI
 8009c74:	60bb      	str	r3, [r7, #8]
  return(result);
 8009c76:	68bb      	ldr	r3, [r7, #8]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d007      	beq.n	8009c8c <osDelay+0x3c>
 8009c7c:	4b0a      	ldr	r3, [pc, #40]	; (8009ca8 <osDelay+0x58>)
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	2b02      	cmp	r3, #2
 8009c82:	d103      	bne.n	8009c8c <osDelay+0x3c>
    stat = osErrorISR;
 8009c84:	f06f 0305 	mvn.w	r3, #5
 8009c88:	617b      	str	r3, [r7, #20]
 8009c8a:	e007      	b.n	8009c9c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d002      	beq.n	8009c9c <osDelay+0x4c>
      vTaskDelay(ticks);
 8009c96:	6878      	ldr	r0, [r7, #4]
 8009c98:	f001 ff44 	bl	800bb24 <vTaskDelay>
    }
  }

  return (stat);
 8009c9c:	697b      	ldr	r3, [r7, #20]
}
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	3718      	adds	r7, #24
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	bd80      	pop	{r7, pc}
 8009ca6:	bf00      	nop
 8009ca8:	20009b20 	.word	0x20009b20

08009cac <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b08a      	sub	sp, #40	; 0x28
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009cb8:	f3ef 8305 	mrs	r3, IPSR
 8009cbc:	613b      	str	r3, [r7, #16]
  return(result);
 8009cbe:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	f040 8085 	bne.w	8009dd0 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009cc6:	f3ef 8310 	mrs	r3, PRIMASK
 8009cca:	60fb      	str	r3, [r7, #12]
  return(result);
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d105      	bne.n	8009cde <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009cd2:	f3ef 8311 	mrs	r3, BASEPRI
 8009cd6:	60bb      	str	r3, [r7, #8]
  return(result);
 8009cd8:	68bb      	ldr	r3, [r7, #8]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d003      	beq.n	8009ce6 <osMutexNew+0x3a>
 8009cde:	4b3f      	ldr	r3, [pc, #252]	; (8009ddc <osMutexNew+0x130>)
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	2b02      	cmp	r3, #2
 8009ce4:	d074      	beq.n	8009dd0 <osMutexNew+0x124>
    if (attr != NULL) {
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d003      	beq.n	8009cf4 <osMutexNew+0x48>
      type = attr->attr_bits;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	685b      	ldr	r3, [r3, #4]
 8009cf0:	623b      	str	r3, [r7, #32]
 8009cf2:	e001      	b.n	8009cf8 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8009cf8:	6a3b      	ldr	r3, [r7, #32]
 8009cfa:	f003 0301 	and.w	r3, r3, #1
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d002      	beq.n	8009d08 <osMutexNew+0x5c>
      rmtx = 1U;
 8009d02:	2301      	movs	r3, #1
 8009d04:	61fb      	str	r3, [r7, #28]
 8009d06:	e001      	b.n	8009d0c <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8009d08:	2300      	movs	r3, #0
 8009d0a:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8009d0c:	6a3b      	ldr	r3, [r7, #32]
 8009d0e:	f003 0308 	and.w	r3, r3, #8
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d15c      	bne.n	8009dd0 <osMutexNew+0x124>
      mem = -1;
 8009d16:	f04f 33ff 	mov.w	r3, #4294967295
 8009d1a:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d015      	beq.n	8009d4e <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	689b      	ldr	r3, [r3, #8]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d006      	beq.n	8009d38 <osMutexNew+0x8c>
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	68db      	ldr	r3, [r3, #12]
 8009d2e:	2b4f      	cmp	r3, #79	; 0x4f
 8009d30:	d902      	bls.n	8009d38 <osMutexNew+0x8c>
          mem = 1;
 8009d32:	2301      	movs	r3, #1
 8009d34:	61bb      	str	r3, [r7, #24]
 8009d36:	e00c      	b.n	8009d52 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	689b      	ldr	r3, [r3, #8]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d108      	bne.n	8009d52 <osMutexNew+0xa6>
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	68db      	ldr	r3, [r3, #12]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d104      	bne.n	8009d52 <osMutexNew+0xa6>
            mem = 0;
 8009d48:	2300      	movs	r3, #0
 8009d4a:	61bb      	str	r3, [r7, #24]
 8009d4c:	e001      	b.n	8009d52 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8009d4e:	2300      	movs	r3, #0
 8009d50:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8009d52:	69bb      	ldr	r3, [r7, #24]
 8009d54:	2b01      	cmp	r3, #1
 8009d56:	d112      	bne.n	8009d7e <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8009d58:	69fb      	ldr	r3, [r7, #28]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d007      	beq.n	8009d6e <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	689b      	ldr	r3, [r3, #8]
 8009d62:	4619      	mov	r1, r3
 8009d64:	2004      	movs	r0, #4
 8009d66:	f000 fda6 	bl	800a8b6 <xQueueCreateMutexStatic>
 8009d6a:	6278      	str	r0, [r7, #36]	; 0x24
 8009d6c:	e016      	b.n	8009d9c <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	689b      	ldr	r3, [r3, #8]
 8009d72:	4619      	mov	r1, r3
 8009d74:	2001      	movs	r0, #1
 8009d76:	f000 fd9e 	bl	800a8b6 <xQueueCreateMutexStatic>
 8009d7a:	6278      	str	r0, [r7, #36]	; 0x24
 8009d7c:	e00e      	b.n	8009d9c <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8009d7e:	69bb      	ldr	r3, [r7, #24]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d10b      	bne.n	8009d9c <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8009d84:	69fb      	ldr	r3, [r7, #28]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d004      	beq.n	8009d94 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8009d8a:	2004      	movs	r0, #4
 8009d8c:	f000 fd7b 	bl	800a886 <xQueueCreateMutex>
 8009d90:	6278      	str	r0, [r7, #36]	; 0x24
 8009d92:	e003      	b.n	8009d9c <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8009d94:	2001      	movs	r0, #1
 8009d96:	f000 fd76 	bl	800a886 <xQueueCreateMutex>
 8009d9a:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8009d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d00c      	beq.n	8009dbc <osMutexNew+0x110>
        if (attr != NULL) {
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d003      	beq.n	8009db0 <osMutexNew+0x104>
          name = attr->name;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	617b      	str	r3, [r7, #20]
 8009dae:	e001      	b.n	8009db4 <osMutexNew+0x108>
        } else {
          name = NULL;
 8009db0:	2300      	movs	r3, #0
 8009db2:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8009db4:	6979      	ldr	r1, [r7, #20]
 8009db6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009db8:	f001 fc82 	bl	800b6c0 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8009dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d006      	beq.n	8009dd0 <osMutexNew+0x124>
 8009dc2:	69fb      	ldr	r3, [r7, #28]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d003      	beq.n	8009dd0 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8009dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dca:	f043 0301 	orr.w	r3, r3, #1
 8009dce:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8009dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	3728      	adds	r7, #40	; 0x28
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	bd80      	pop	{r7, pc}
 8009dda:	bf00      	nop
 8009ddc:	20009b20 	.word	0x20009b20

08009de0 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b088      	sub	sp, #32
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
 8009de8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	f023 0301 	bic.w	r3, r3, #1
 8009df0:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	f003 0301 	and.w	r3, r3, #1
 8009df8:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009dfe:	f3ef 8305 	mrs	r3, IPSR
 8009e02:	613b      	str	r3, [r7, #16]
  return(result);
 8009e04:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d10f      	bne.n	8009e2a <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009e0a:	f3ef 8310 	mrs	r3, PRIMASK
 8009e0e:	60fb      	str	r3, [r7, #12]
  return(result);
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d105      	bne.n	8009e22 <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009e16:	f3ef 8311 	mrs	r3, BASEPRI
 8009e1a:	60bb      	str	r3, [r7, #8]
  return(result);
 8009e1c:	68bb      	ldr	r3, [r7, #8]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d007      	beq.n	8009e32 <osMutexAcquire+0x52>
 8009e22:	4b1d      	ldr	r3, [pc, #116]	; (8009e98 <osMutexAcquire+0xb8>)
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	2b02      	cmp	r3, #2
 8009e28:	d103      	bne.n	8009e32 <osMutexAcquire+0x52>
    stat = osErrorISR;
 8009e2a:	f06f 0305 	mvn.w	r3, #5
 8009e2e:	61fb      	str	r3, [r7, #28]
 8009e30:	e02c      	b.n	8009e8c <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 8009e32:	69bb      	ldr	r3, [r7, #24]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d103      	bne.n	8009e40 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8009e38:	f06f 0303 	mvn.w	r3, #3
 8009e3c:	61fb      	str	r3, [r7, #28]
 8009e3e:	e025      	b.n	8009e8c <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8009e40:	697b      	ldr	r3, [r7, #20]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d011      	beq.n	8009e6a <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8009e46:	6839      	ldr	r1, [r7, #0]
 8009e48:	69b8      	ldr	r0, [r7, #24]
 8009e4a:	f000 fd85 	bl	800a958 <xQueueTakeMutexRecursive>
 8009e4e:	4603      	mov	r3, r0
 8009e50:	2b01      	cmp	r3, #1
 8009e52:	d01b      	beq.n	8009e8c <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8009e54:	683b      	ldr	r3, [r7, #0]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d003      	beq.n	8009e62 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8009e5a:	f06f 0301 	mvn.w	r3, #1
 8009e5e:	61fb      	str	r3, [r7, #28]
 8009e60:	e014      	b.n	8009e8c <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8009e62:	f06f 0302 	mvn.w	r3, #2
 8009e66:	61fb      	str	r3, [r7, #28]
 8009e68:	e010      	b.n	8009e8c <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8009e6a:	6839      	ldr	r1, [r7, #0]
 8009e6c:	69b8      	ldr	r0, [r7, #24]
 8009e6e:	f001 f93f 	bl	800b0f0 <xQueueSemaphoreTake>
 8009e72:	4603      	mov	r3, r0
 8009e74:	2b01      	cmp	r3, #1
 8009e76:	d009      	beq.n	8009e8c <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8009e78:	683b      	ldr	r3, [r7, #0]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d003      	beq.n	8009e86 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 8009e7e:	f06f 0301 	mvn.w	r3, #1
 8009e82:	61fb      	str	r3, [r7, #28]
 8009e84:	e002      	b.n	8009e8c <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8009e86:	f06f 0302 	mvn.w	r3, #2
 8009e8a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009e8c:	69fb      	ldr	r3, [r7, #28]
}
 8009e8e:	4618      	mov	r0, r3
 8009e90:	3720      	adds	r7, #32
 8009e92:	46bd      	mov	sp, r7
 8009e94:	bd80      	pop	{r7, pc}
 8009e96:	bf00      	nop
 8009e98:	20009b20 	.word	0x20009b20

08009e9c <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b088      	sub	sp, #32
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	f023 0301 	bic.w	r3, r3, #1
 8009eaa:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	f003 0301 	and.w	r3, r3, #1
 8009eb2:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009eb8:	f3ef 8305 	mrs	r3, IPSR
 8009ebc:	613b      	str	r3, [r7, #16]
  return(result);
 8009ebe:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d10f      	bne.n	8009ee4 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009ec4:	f3ef 8310 	mrs	r3, PRIMASK
 8009ec8:	60fb      	str	r3, [r7, #12]
  return(result);
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d105      	bne.n	8009edc <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009ed0:	f3ef 8311 	mrs	r3, BASEPRI
 8009ed4:	60bb      	str	r3, [r7, #8]
  return(result);
 8009ed6:	68bb      	ldr	r3, [r7, #8]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d007      	beq.n	8009eec <osMutexRelease+0x50>
 8009edc:	4b16      	ldr	r3, [pc, #88]	; (8009f38 <osMutexRelease+0x9c>)
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	2b02      	cmp	r3, #2
 8009ee2:	d103      	bne.n	8009eec <osMutexRelease+0x50>
    stat = osErrorISR;
 8009ee4:	f06f 0305 	mvn.w	r3, #5
 8009ee8:	61fb      	str	r3, [r7, #28]
 8009eea:	e01f      	b.n	8009f2c <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8009eec:	69bb      	ldr	r3, [r7, #24]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d103      	bne.n	8009efa <osMutexRelease+0x5e>
    stat = osErrorParameter;
 8009ef2:	f06f 0303 	mvn.w	r3, #3
 8009ef6:	61fb      	str	r3, [r7, #28]
 8009ef8:	e018      	b.n	8009f2c <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8009efa:	697b      	ldr	r3, [r7, #20]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d009      	beq.n	8009f14 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8009f00:	69b8      	ldr	r0, [r7, #24]
 8009f02:	f000 fcf3 	bl	800a8ec <xQueueGiveMutexRecursive>
 8009f06:	4603      	mov	r3, r0
 8009f08:	2b01      	cmp	r3, #1
 8009f0a:	d00f      	beq.n	8009f2c <osMutexRelease+0x90>
        stat = osErrorResource;
 8009f0c:	f06f 0302 	mvn.w	r3, #2
 8009f10:	61fb      	str	r3, [r7, #28]
 8009f12:	e00b      	b.n	8009f2c <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8009f14:	2300      	movs	r3, #0
 8009f16:	2200      	movs	r2, #0
 8009f18:	2100      	movs	r1, #0
 8009f1a:	69b8      	ldr	r0, [r7, #24]
 8009f1c:	f000 fdc6 	bl	800aaac <xQueueGenericSend>
 8009f20:	4603      	mov	r3, r0
 8009f22:	2b01      	cmp	r3, #1
 8009f24:	d002      	beq.n	8009f2c <osMutexRelease+0x90>
        stat = osErrorResource;
 8009f26:	f06f 0302 	mvn.w	r3, #2
 8009f2a:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8009f2c:	69fb      	ldr	r3, [r7, #28]
}
 8009f2e:	4618      	mov	r0, r3
 8009f30:	3720      	adds	r7, #32
 8009f32:	46bd      	mov	sp, r7
 8009f34:	bd80      	pop	{r7, pc}
 8009f36:	bf00      	nop
 8009f38:	20009b20 	.word	0x20009b20

08009f3c <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	b08c      	sub	sp, #48	; 0x30
 8009f40:	af02      	add	r7, sp, #8
 8009f42:	60f8      	str	r0, [r7, #12]
 8009f44:	60b9      	str	r1, [r7, #8]
 8009f46:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8009f48:	2300      	movs	r3, #0
 8009f4a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009f4c:	f3ef 8305 	mrs	r3, IPSR
 8009f50:	61bb      	str	r3, [r7, #24]
  return(result);
 8009f52:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	f040 8086 	bne.w	800a066 <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009f5a:	f3ef 8310 	mrs	r3, PRIMASK
 8009f5e:	617b      	str	r3, [r7, #20]
  return(result);
 8009f60:	697b      	ldr	r3, [r7, #20]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d105      	bne.n	8009f72 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009f66:	f3ef 8311 	mrs	r3, BASEPRI
 8009f6a:	613b      	str	r3, [r7, #16]
  return(result);
 8009f6c:	693b      	ldr	r3, [r7, #16]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d003      	beq.n	8009f7a <osSemaphoreNew+0x3e>
 8009f72:	4b3f      	ldr	r3, [pc, #252]	; (800a070 <osSemaphoreNew+0x134>)
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	2b02      	cmp	r3, #2
 8009f78:	d075      	beq.n	800a066 <osSemaphoreNew+0x12a>
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d072      	beq.n	800a066 <osSemaphoreNew+0x12a>
 8009f80:	68ba      	ldr	r2, [r7, #8]
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	429a      	cmp	r2, r3
 8009f86:	d86e      	bhi.n	800a066 <osSemaphoreNew+0x12a>
    mem = -1;
 8009f88:	f04f 33ff 	mov.w	r3, #4294967295
 8009f8c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d015      	beq.n	8009fc0 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	689b      	ldr	r3, [r3, #8]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d006      	beq.n	8009faa <osSemaphoreNew+0x6e>
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	68db      	ldr	r3, [r3, #12]
 8009fa0:	2b4f      	cmp	r3, #79	; 0x4f
 8009fa2:	d902      	bls.n	8009faa <osSemaphoreNew+0x6e>
        mem = 1;
 8009fa4:	2301      	movs	r3, #1
 8009fa6:	623b      	str	r3, [r7, #32]
 8009fa8:	e00c      	b.n	8009fc4 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	689b      	ldr	r3, [r3, #8]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d108      	bne.n	8009fc4 <osSemaphoreNew+0x88>
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	68db      	ldr	r3, [r3, #12]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d104      	bne.n	8009fc4 <osSemaphoreNew+0x88>
          mem = 0;
 8009fba:	2300      	movs	r3, #0
 8009fbc:	623b      	str	r3, [r7, #32]
 8009fbe:	e001      	b.n	8009fc4 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8009fc4:	6a3b      	ldr	r3, [r7, #32]
 8009fc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fca:	d04c      	beq.n	800a066 <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	2b01      	cmp	r3, #1
 8009fd0:	d128      	bne.n	800a024 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 8009fd2:	6a3b      	ldr	r3, [r7, #32]
 8009fd4:	2b01      	cmp	r3, #1
 8009fd6:	d10a      	bne.n	8009fee <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	689b      	ldr	r3, [r3, #8]
 8009fdc:	2203      	movs	r2, #3
 8009fde:	9200      	str	r2, [sp, #0]
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	2100      	movs	r1, #0
 8009fe4:	2001      	movs	r0, #1
 8009fe6:	f000 fb4d 	bl	800a684 <xQueueGenericCreateStatic>
 8009fea:	6278      	str	r0, [r7, #36]	; 0x24
 8009fec:	e005      	b.n	8009ffa <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8009fee:	2203      	movs	r2, #3
 8009ff0:	2100      	movs	r1, #0
 8009ff2:	2001      	movs	r0, #1
 8009ff4:	f000 fbc8 	bl	800a788 <xQueueGenericCreate>
 8009ff8:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8009ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d022      	beq.n	800a046 <osSemaphoreNew+0x10a>
 800a000:	68bb      	ldr	r3, [r7, #8]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d01f      	beq.n	800a046 <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800a006:	2300      	movs	r3, #0
 800a008:	2200      	movs	r2, #0
 800a00a:	2100      	movs	r1, #0
 800a00c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a00e:	f000 fd4d 	bl	800aaac <xQueueGenericSend>
 800a012:	4603      	mov	r3, r0
 800a014:	2b01      	cmp	r3, #1
 800a016:	d016      	beq.n	800a046 <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 800a018:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a01a:	f001 fa03 	bl	800b424 <vQueueDelete>
            hSemaphore = NULL;
 800a01e:	2300      	movs	r3, #0
 800a020:	627b      	str	r3, [r7, #36]	; 0x24
 800a022:	e010      	b.n	800a046 <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 800a024:	6a3b      	ldr	r3, [r7, #32]
 800a026:	2b01      	cmp	r3, #1
 800a028:	d108      	bne.n	800a03c <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	689b      	ldr	r3, [r3, #8]
 800a02e:	461a      	mov	r2, r3
 800a030:	68b9      	ldr	r1, [r7, #8]
 800a032:	68f8      	ldr	r0, [r7, #12]
 800a034:	f000 fcc8 	bl	800a9c8 <xQueueCreateCountingSemaphoreStatic>
 800a038:	6278      	str	r0, [r7, #36]	; 0x24
 800a03a:	e004      	b.n	800a046 <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800a03c:	68b9      	ldr	r1, [r7, #8]
 800a03e:	68f8      	ldr	r0, [r7, #12]
 800a040:	f000 fcfd 	bl	800aa3e <xQueueCreateCountingSemaphore>
 800a044:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800a046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d00c      	beq.n	800a066 <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d003      	beq.n	800a05a <osSemaphoreNew+0x11e>
          name = attr->name;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	61fb      	str	r3, [r7, #28]
 800a058:	e001      	b.n	800a05e <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 800a05a:	2300      	movs	r3, #0
 800a05c:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800a05e:	69f9      	ldr	r1, [r7, #28]
 800a060:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a062:	f001 fb2d 	bl	800b6c0 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800a066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a068:	4618      	mov	r0, r3
 800a06a:	3728      	adds	r7, #40	; 0x28
 800a06c:	46bd      	mov	sp, r7
 800a06e:	bd80      	pop	{r7, pc}
 800a070:	20009b20 	.word	0x20009b20

0800a074 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800a074:	b580      	push	{r7, lr}
 800a076:	b088      	sub	sp, #32
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
 800a07c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800a082:	2300      	movs	r3, #0
 800a084:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800a086:	69bb      	ldr	r3, [r7, #24]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d103      	bne.n	800a094 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800a08c:	f06f 0303 	mvn.w	r3, #3
 800a090:	61fb      	str	r3, [r7, #28]
 800a092:	e04b      	b.n	800a12c <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a094:	f3ef 8305 	mrs	r3, IPSR
 800a098:	617b      	str	r3, [r7, #20]
  return(result);
 800a09a:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d10f      	bne.n	800a0c0 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a0a0:	f3ef 8310 	mrs	r3, PRIMASK
 800a0a4:	613b      	str	r3, [r7, #16]
  return(result);
 800a0a6:	693b      	ldr	r3, [r7, #16]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d105      	bne.n	800a0b8 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a0ac:	f3ef 8311 	mrs	r3, BASEPRI
 800a0b0:	60fb      	str	r3, [r7, #12]
  return(result);
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d026      	beq.n	800a106 <osSemaphoreAcquire+0x92>
 800a0b8:	4b1f      	ldr	r3, [pc, #124]	; (800a138 <osSemaphoreAcquire+0xc4>)
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	2b02      	cmp	r3, #2
 800a0be:	d122      	bne.n	800a106 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 800a0c0:	683b      	ldr	r3, [r7, #0]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d003      	beq.n	800a0ce <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800a0c6:	f06f 0303 	mvn.w	r3, #3
 800a0ca:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800a0cc:	e02d      	b.n	800a12a <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800a0d2:	f107 0308 	add.w	r3, r7, #8
 800a0d6:	461a      	mov	r2, r3
 800a0d8:	2100      	movs	r1, #0
 800a0da:	69b8      	ldr	r0, [r7, #24]
 800a0dc:	f001 f91c 	bl	800b318 <xQueueReceiveFromISR>
 800a0e0:	4603      	mov	r3, r0
 800a0e2:	2b01      	cmp	r3, #1
 800a0e4:	d003      	beq.n	800a0ee <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800a0e6:	f06f 0302 	mvn.w	r3, #2
 800a0ea:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800a0ec:	e01d      	b.n	800a12a <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800a0ee:	68bb      	ldr	r3, [r7, #8]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d01a      	beq.n	800a12a <osSemaphoreAcquire+0xb6>
 800a0f4:	4b11      	ldr	r3, [pc, #68]	; (800a13c <osSemaphoreAcquire+0xc8>)
 800a0f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0fa:	601a      	str	r2, [r3, #0]
 800a0fc:	f3bf 8f4f 	dsb	sy
 800a100:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 800a104:	e011      	b.n	800a12a <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800a106:	6839      	ldr	r1, [r7, #0]
 800a108:	69b8      	ldr	r0, [r7, #24]
 800a10a:	f000 fff1 	bl	800b0f0 <xQueueSemaphoreTake>
 800a10e:	4603      	mov	r3, r0
 800a110:	2b01      	cmp	r3, #1
 800a112:	d00b      	beq.n	800a12c <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 800a114:	683b      	ldr	r3, [r7, #0]
 800a116:	2b00      	cmp	r3, #0
 800a118:	d003      	beq.n	800a122 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800a11a:	f06f 0301 	mvn.w	r3, #1
 800a11e:	61fb      	str	r3, [r7, #28]
 800a120:	e004      	b.n	800a12c <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 800a122:	f06f 0302 	mvn.w	r3, #2
 800a126:	61fb      	str	r3, [r7, #28]
 800a128:	e000      	b.n	800a12c <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800a12a:	bf00      	nop
      }
    }
  }

  return (stat);
 800a12c:	69fb      	ldr	r3, [r7, #28]
}
 800a12e:	4618      	mov	r0, r3
 800a130:	3720      	adds	r7, #32
 800a132:	46bd      	mov	sp, r7
 800a134:	bd80      	pop	{r7, pc}
 800a136:	bf00      	nop
 800a138:	20009b20 	.word	0x20009b20
 800a13c:	e000ed04 	.word	0xe000ed04

0800a140 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800a140:	b580      	push	{r7, lr}
 800a142:	b088      	sub	sp, #32
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800a14c:	2300      	movs	r3, #0
 800a14e:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800a150:	69bb      	ldr	r3, [r7, #24]
 800a152:	2b00      	cmp	r3, #0
 800a154:	d103      	bne.n	800a15e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800a156:	f06f 0303 	mvn.w	r3, #3
 800a15a:	61fb      	str	r3, [r7, #28]
 800a15c:	e03e      	b.n	800a1dc <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a15e:	f3ef 8305 	mrs	r3, IPSR
 800a162:	617b      	str	r3, [r7, #20]
  return(result);
 800a164:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800a166:	2b00      	cmp	r3, #0
 800a168:	d10f      	bne.n	800a18a <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a16a:	f3ef 8310 	mrs	r3, PRIMASK
 800a16e:	613b      	str	r3, [r7, #16]
  return(result);
 800a170:	693b      	ldr	r3, [r7, #16]
 800a172:	2b00      	cmp	r3, #0
 800a174:	d105      	bne.n	800a182 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a176:	f3ef 8311 	mrs	r3, BASEPRI
 800a17a:	60fb      	str	r3, [r7, #12]
  return(result);
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d01e      	beq.n	800a1c0 <osSemaphoreRelease+0x80>
 800a182:	4b19      	ldr	r3, [pc, #100]	; (800a1e8 <osSemaphoreRelease+0xa8>)
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	2b02      	cmp	r3, #2
 800a188:	d11a      	bne.n	800a1c0 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800a18a:	2300      	movs	r3, #0
 800a18c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800a18e:	f107 0308 	add.w	r3, r7, #8
 800a192:	4619      	mov	r1, r3
 800a194:	69b8      	ldr	r0, [r7, #24]
 800a196:	f000 fe2f 	bl	800adf8 <xQueueGiveFromISR>
 800a19a:	4603      	mov	r3, r0
 800a19c:	2b01      	cmp	r3, #1
 800a19e:	d003      	beq.n	800a1a8 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 800a1a0:	f06f 0302 	mvn.w	r3, #2
 800a1a4:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800a1a6:	e018      	b.n	800a1da <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 800a1a8:	68bb      	ldr	r3, [r7, #8]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d015      	beq.n	800a1da <osSemaphoreRelease+0x9a>
 800a1ae:	4b0f      	ldr	r3, [pc, #60]	; (800a1ec <osSemaphoreRelease+0xac>)
 800a1b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1b4:	601a      	str	r2, [r3, #0]
 800a1b6:	f3bf 8f4f 	dsb	sy
 800a1ba:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800a1be:	e00c      	b.n	800a1da <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	2100      	movs	r1, #0
 800a1c6:	69b8      	ldr	r0, [r7, #24]
 800a1c8:	f000 fc70 	bl	800aaac <xQueueGenericSend>
 800a1cc:	4603      	mov	r3, r0
 800a1ce:	2b01      	cmp	r3, #1
 800a1d0:	d004      	beq.n	800a1dc <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800a1d2:	f06f 0302 	mvn.w	r3, #2
 800a1d6:	61fb      	str	r3, [r7, #28]
 800a1d8:	e000      	b.n	800a1dc <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800a1da:	bf00      	nop
    }
  }

  return (stat);
 800a1dc:	69fb      	ldr	r3, [r7, #28]
}
 800a1de:	4618      	mov	r0, r3
 800a1e0:	3720      	adds	r7, #32
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	bd80      	pop	{r7, pc}
 800a1e6:	bf00      	nop
 800a1e8:	20009b20 	.word	0x20009b20
 800a1ec:	e000ed04 	.word	0xe000ed04

0800a1f0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	b08c      	sub	sp, #48	; 0x30
 800a1f4:	af02      	add	r7, sp, #8
 800a1f6:	60f8      	str	r0, [r7, #12]
 800a1f8:	60b9      	str	r1, [r7, #8]
 800a1fa:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a200:	f3ef 8305 	mrs	r3, IPSR
 800a204:	61bb      	str	r3, [r7, #24]
  return(result);
 800a206:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d16f      	bne.n	800a2ec <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a20c:	f3ef 8310 	mrs	r3, PRIMASK
 800a210:	617b      	str	r3, [r7, #20]
  return(result);
 800a212:	697b      	ldr	r3, [r7, #20]
 800a214:	2b00      	cmp	r3, #0
 800a216:	d105      	bne.n	800a224 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a218:	f3ef 8311 	mrs	r3, BASEPRI
 800a21c:	613b      	str	r3, [r7, #16]
  return(result);
 800a21e:	693b      	ldr	r3, [r7, #16]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d003      	beq.n	800a22c <osMessageQueueNew+0x3c>
 800a224:	4b34      	ldr	r3, [pc, #208]	; (800a2f8 <osMessageQueueNew+0x108>)
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	2b02      	cmp	r3, #2
 800a22a:	d05f      	beq.n	800a2ec <osMessageQueueNew+0xfc>
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d05c      	beq.n	800a2ec <osMessageQueueNew+0xfc>
 800a232:	68bb      	ldr	r3, [r7, #8]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d059      	beq.n	800a2ec <osMessageQueueNew+0xfc>
    mem = -1;
 800a238:	f04f 33ff 	mov.w	r3, #4294967295
 800a23c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d029      	beq.n	800a298 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	689b      	ldr	r3, [r3, #8]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d012      	beq.n	800a272 <osMessageQueueNew+0x82>
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	68db      	ldr	r3, [r3, #12]
 800a250:	2b4f      	cmp	r3, #79	; 0x4f
 800a252:	d90e      	bls.n	800a272 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d00a      	beq.n	800a272 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	695a      	ldr	r2, [r3, #20]
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	68b9      	ldr	r1, [r7, #8]
 800a264:	fb01 f303 	mul.w	r3, r1, r3
 800a268:	429a      	cmp	r2, r3
 800a26a:	d302      	bcc.n	800a272 <osMessageQueueNew+0x82>
        mem = 1;
 800a26c:	2301      	movs	r3, #1
 800a26e:	623b      	str	r3, [r7, #32]
 800a270:	e014      	b.n	800a29c <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	689b      	ldr	r3, [r3, #8]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d110      	bne.n	800a29c <osMessageQueueNew+0xac>
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	68db      	ldr	r3, [r3, #12]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d10c      	bne.n	800a29c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a286:	2b00      	cmp	r3, #0
 800a288:	d108      	bne.n	800a29c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	695b      	ldr	r3, [r3, #20]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d104      	bne.n	800a29c <osMessageQueueNew+0xac>
          mem = 0;
 800a292:	2300      	movs	r3, #0
 800a294:	623b      	str	r3, [r7, #32]
 800a296:	e001      	b.n	800a29c <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800a298:	2300      	movs	r3, #0
 800a29a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800a29c:	6a3b      	ldr	r3, [r7, #32]
 800a29e:	2b01      	cmp	r3, #1
 800a2a0:	d10b      	bne.n	800a2ba <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	691a      	ldr	r2, [r3, #16]
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	689b      	ldr	r3, [r3, #8]
 800a2aa:	2100      	movs	r1, #0
 800a2ac:	9100      	str	r1, [sp, #0]
 800a2ae:	68b9      	ldr	r1, [r7, #8]
 800a2b0:	68f8      	ldr	r0, [r7, #12]
 800a2b2:	f000 f9e7 	bl	800a684 <xQueueGenericCreateStatic>
 800a2b6:	6278      	str	r0, [r7, #36]	; 0x24
 800a2b8:	e008      	b.n	800a2cc <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800a2ba:	6a3b      	ldr	r3, [r7, #32]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d105      	bne.n	800a2cc <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 800a2c0:	2200      	movs	r2, #0
 800a2c2:	68b9      	ldr	r1, [r7, #8]
 800a2c4:	68f8      	ldr	r0, [r7, #12]
 800a2c6:	f000 fa5f 	bl	800a788 <xQueueGenericCreate>
 800a2ca:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800a2cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d00c      	beq.n	800a2ec <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d003      	beq.n	800a2e0 <osMessageQueueNew+0xf0>
        name = attr->name;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	61fb      	str	r3, [r7, #28]
 800a2de:	e001      	b.n	800a2e4 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800a2e4:	69f9      	ldr	r1, [r7, #28]
 800a2e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a2e8:	f001 f9ea 	bl	800b6c0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800a2ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	3728      	adds	r7, #40	; 0x28
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	bd80      	pop	{r7, pc}
 800a2f6:	bf00      	nop
 800a2f8:	20009b20 	.word	0x20009b20

0800a2fc <osMessageQueueGet>:
  }

  return (stat);
}

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800a2fc:	b580      	push	{r7, lr}
 800a2fe:	b08a      	sub	sp, #40	; 0x28
 800a300:	af00      	add	r7, sp, #0
 800a302:	60f8      	str	r0, [r7, #12]
 800a304:	60b9      	str	r1, [r7, #8]
 800a306:	607a      	str	r2, [r7, #4]
 800a308:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800a30e:	2300      	movs	r3, #0
 800a310:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a312:	f3ef 8305 	mrs	r3, IPSR
 800a316:	61fb      	str	r3, [r7, #28]
  return(result);
 800a318:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d10f      	bne.n	800a33e <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a31e:	f3ef 8310 	mrs	r3, PRIMASK
 800a322:	61bb      	str	r3, [r7, #24]
  return(result);
 800a324:	69bb      	ldr	r3, [r7, #24]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d105      	bne.n	800a336 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a32a:	f3ef 8311 	mrs	r3, BASEPRI
 800a32e:	617b      	str	r3, [r7, #20]
  return(result);
 800a330:	697b      	ldr	r3, [r7, #20]
 800a332:	2b00      	cmp	r3, #0
 800a334:	d02c      	beq.n	800a390 <osMessageQueueGet+0x94>
 800a336:	4b28      	ldr	r3, [pc, #160]	; (800a3d8 <osMessageQueueGet+0xdc>)
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	2b02      	cmp	r3, #2
 800a33c:	d128      	bne.n	800a390 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a33e:	6a3b      	ldr	r3, [r7, #32]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d005      	beq.n	800a350 <osMessageQueueGet+0x54>
 800a344:	68bb      	ldr	r3, [r7, #8]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d002      	beq.n	800a350 <osMessageQueueGet+0x54>
 800a34a:	683b      	ldr	r3, [r7, #0]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d003      	beq.n	800a358 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800a350:	f06f 0303 	mvn.w	r3, #3
 800a354:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a356:	e038      	b.n	800a3ca <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800a358:	2300      	movs	r3, #0
 800a35a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800a35c:	f107 0310 	add.w	r3, r7, #16
 800a360:	461a      	mov	r2, r3
 800a362:	68b9      	ldr	r1, [r7, #8]
 800a364:	6a38      	ldr	r0, [r7, #32]
 800a366:	f000 ffd7 	bl	800b318 <xQueueReceiveFromISR>
 800a36a:	4603      	mov	r3, r0
 800a36c:	2b01      	cmp	r3, #1
 800a36e:	d003      	beq.n	800a378 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800a370:	f06f 0302 	mvn.w	r3, #2
 800a374:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a376:	e028      	b.n	800a3ca <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800a378:	693b      	ldr	r3, [r7, #16]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d025      	beq.n	800a3ca <osMessageQueueGet+0xce>
 800a37e:	4b17      	ldr	r3, [pc, #92]	; (800a3dc <osMessageQueueGet+0xe0>)
 800a380:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a384:	601a      	str	r2, [r3, #0]
 800a386:	f3bf 8f4f 	dsb	sy
 800a38a:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a38e:	e01c      	b.n	800a3ca <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800a390:	6a3b      	ldr	r3, [r7, #32]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d002      	beq.n	800a39c <osMessageQueueGet+0xa0>
 800a396:	68bb      	ldr	r3, [r7, #8]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d103      	bne.n	800a3a4 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800a39c:	f06f 0303 	mvn.w	r3, #3
 800a3a0:	627b      	str	r3, [r7, #36]	; 0x24
 800a3a2:	e013      	b.n	800a3cc <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800a3a4:	683a      	ldr	r2, [r7, #0]
 800a3a6:	68b9      	ldr	r1, [r7, #8]
 800a3a8:	6a38      	ldr	r0, [r7, #32]
 800a3aa:	f000 fdbb 	bl	800af24 <xQueueReceive>
 800a3ae:	4603      	mov	r3, r0
 800a3b0:	2b01      	cmp	r3, #1
 800a3b2:	d00b      	beq.n	800a3cc <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800a3b4:	683b      	ldr	r3, [r7, #0]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d003      	beq.n	800a3c2 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800a3ba:	f06f 0301 	mvn.w	r3, #1
 800a3be:	627b      	str	r3, [r7, #36]	; 0x24
 800a3c0:	e004      	b.n	800a3cc <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800a3c2:	f06f 0302 	mvn.w	r3, #2
 800a3c6:	627b      	str	r3, [r7, #36]	; 0x24
 800a3c8:	e000      	b.n	800a3cc <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a3ca:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800a3cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	3728      	adds	r7, #40	; 0x28
 800a3d2:	46bd      	mov	sp, r7
 800a3d4:	bd80      	pop	{r7, pc}
 800a3d6:	bf00      	nop
 800a3d8:	20009b20 	.word	0x20009b20
 800a3dc:	e000ed04 	.word	0xe000ed04

0800a3e0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a3e0:	b480      	push	{r7}
 800a3e2:	b085      	sub	sp, #20
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	60f8      	str	r0, [r7, #12]
 800a3e8:	60b9      	str	r1, [r7, #8]
 800a3ea:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	4a07      	ldr	r2, [pc, #28]	; (800a40c <vApplicationGetIdleTaskMemory+0x2c>)
 800a3f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a3f2:	68bb      	ldr	r3, [r7, #8]
 800a3f4:	4a06      	ldr	r2, [pc, #24]	; (800a410 <vApplicationGetIdleTaskMemory+0x30>)
 800a3f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	2280      	movs	r2, #128	; 0x80
 800a3fc:	601a      	str	r2, [r3, #0]
}
 800a3fe:	bf00      	nop
 800a400:	3714      	adds	r7, #20
 800a402:	46bd      	mov	sp, r7
 800a404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a408:	4770      	bx	lr
 800a40a:	bf00      	nop
 800a40c:	20009b24 	.word	0x20009b24
 800a410:	20009b80 	.word	0x20009b80

0800a414 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a414:	b480      	push	{r7}
 800a416:	b085      	sub	sp, #20
 800a418:	af00      	add	r7, sp, #0
 800a41a:	60f8      	str	r0, [r7, #12]
 800a41c:	60b9      	str	r1, [r7, #8]
 800a41e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	4a07      	ldr	r2, [pc, #28]	; (800a440 <vApplicationGetTimerTaskMemory+0x2c>)
 800a424:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a426:	68bb      	ldr	r3, [r7, #8]
 800a428:	4a06      	ldr	r2, [pc, #24]	; (800a444 <vApplicationGetTimerTaskMemory+0x30>)
 800a42a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a432:	601a      	str	r2, [r3, #0]
}
 800a434:	bf00      	nop
 800a436:	3714      	adds	r7, #20
 800a438:	46bd      	mov	sp, r7
 800a43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43e:	4770      	bx	lr
 800a440:	20009d80 	.word	0x20009d80
 800a444:	20009ddc 	.word	0x20009ddc

0800a448 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a448:	b480      	push	{r7}
 800a44a:	b083      	sub	sp, #12
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	f103 0208 	add.w	r2, r3, #8
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	f04f 32ff 	mov.w	r2, #4294967295
 800a460:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	f103 0208 	add.w	r2, r3, #8
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	f103 0208 	add.w	r2, r3, #8
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	2200      	movs	r2, #0
 800a47a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a47c:	bf00      	nop
 800a47e:	370c      	adds	r7, #12
 800a480:	46bd      	mov	sp, r7
 800a482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a486:	4770      	bx	lr

0800a488 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a488:	b480      	push	{r7}
 800a48a:	b083      	sub	sp, #12
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	2200      	movs	r2, #0
 800a494:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a496:	bf00      	nop
 800a498:	370c      	adds	r7, #12
 800a49a:	46bd      	mov	sp, r7
 800a49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a0:	4770      	bx	lr

0800a4a2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a4a2:	b480      	push	{r7}
 800a4a4:	b085      	sub	sp, #20
 800a4a6:	af00      	add	r7, sp, #0
 800a4a8:	6078      	str	r0, [r7, #4]
 800a4aa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	685b      	ldr	r3, [r3, #4]
 800a4b0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a4b2:	683b      	ldr	r3, [r7, #0]
 800a4b4:	68fa      	ldr	r2, [r7, #12]
 800a4b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	689a      	ldr	r2, [r3, #8]
 800a4bc:	683b      	ldr	r3, [r7, #0]
 800a4be:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	689b      	ldr	r3, [r3, #8]
 800a4c4:	683a      	ldr	r2, [r7, #0]
 800a4c6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	683a      	ldr	r2, [r7, #0]
 800a4cc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a4ce:	683b      	ldr	r3, [r7, #0]
 800a4d0:	687a      	ldr	r2, [r7, #4]
 800a4d2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	1c5a      	adds	r2, r3, #1
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	601a      	str	r2, [r3, #0]
}
 800a4de:	bf00      	nop
 800a4e0:	3714      	adds	r7, #20
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e8:	4770      	bx	lr

0800a4ea <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a4ea:	b480      	push	{r7}
 800a4ec:	b085      	sub	sp, #20
 800a4ee:	af00      	add	r7, sp, #0
 800a4f0:	6078      	str	r0, [r7, #4]
 800a4f2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a4f4:	683b      	ldr	r3, [r7, #0]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a4fa:	68bb      	ldr	r3, [r7, #8]
 800a4fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a500:	d103      	bne.n	800a50a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	691b      	ldr	r3, [r3, #16]
 800a506:	60fb      	str	r3, [r7, #12]
 800a508:	e00c      	b.n	800a524 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	3308      	adds	r3, #8
 800a50e:	60fb      	str	r3, [r7, #12]
 800a510:	e002      	b.n	800a518 <vListInsert+0x2e>
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	685b      	ldr	r3, [r3, #4]
 800a516:	60fb      	str	r3, [r7, #12]
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	685b      	ldr	r3, [r3, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	68ba      	ldr	r2, [r7, #8]
 800a520:	429a      	cmp	r2, r3
 800a522:	d2f6      	bcs.n	800a512 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	685a      	ldr	r2, [r3, #4]
 800a528:	683b      	ldr	r3, [r7, #0]
 800a52a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a52c:	683b      	ldr	r3, [r7, #0]
 800a52e:	685b      	ldr	r3, [r3, #4]
 800a530:	683a      	ldr	r2, [r7, #0]
 800a532:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a534:	683b      	ldr	r3, [r7, #0]
 800a536:	68fa      	ldr	r2, [r7, #12]
 800a538:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	683a      	ldr	r2, [r7, #0]
 800a53e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a540:	683b      	ldr	r3, [r7, #0]
 800a542:	687a      	ldr	r2, [r7, #4]
 800a544:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	1c5a      	adds	r2, r3, #1
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	601a      	str	r2, [r3, #0]
}
 800a550:	bf00      	nop
 800a552:	3714      	adds	r7, #20
 800a554:	46bd      	mov	sp, r7
 800a556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55a:	4770      	bx	lr

0800a55c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a55c:	b480      	push	{r7}
 800a55e:	b085      	sub	sp, #20
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	691b      	ldr	r3, [r3, #16]
 800a568:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	685b      	ldr	r3, [r3, #4]
 800a56e:	687a      	ldr	r2, [r7, #4]
 800a570:	6892      	ldr	r2, [r2, #8]
 800a572:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	689b      	ldr	r3, [r3, #8]
 800a578:	687a      	ldr	r2, [r7, #4]
 800a57a:	6852      	ldr	r2, [r2, #4]
 800a57c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	685b      	ldr	r3, [r3, #4]
 800a582:	687a      	ldr	r2, [r7, #4]
 800a584:	429a      	cmp	r2, r3
 800a586:	d103      	bne.n	800a590 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	689a      	ldr	r2, [r3, #8]
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	2200      	movs	r2, #0
 800a594:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	1e5a      	subs	r2, r3, #1
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	681b      	ldr	r3, [r3, #0]
}
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	3714      	adds	r7, #20
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ae:	4770      	bx	lr

0800a5b0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	b084      	sub	sp, #16
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	6078      	str	r0, [r7, #4]
 800a5b8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d10c      	bne.n	800a5de <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a5c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5c8:	b672      	cpsid	i
 800a5ca:	f383 8811 	msr	BASEPRI, r3
 800a5ce:	f3bf 8f6f 	isb	sy
 800a5d2:	f3bf 8f4f 	dsb	sy
 800a5d6:	b662      	cpsie	i
 800a5d8:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a5da:	bf00      	nop
 800a5dc:	e7fe      	b.n	800a5dc <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800a5de:	f002 fd95 	bl	800d10c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	681a      	ldr	r2, [r3, #0]
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5ea:	68f9      	ldr	r1, [r7, #12]
 800a5ec:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a5ee:	fb01 f303 	mul.w	r3, r1, r3
 800a5f2:	441a      	add	r2, r3
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	681a      	ldr	r2, [r3, #0]
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	681a      	ldr	r2, [r3, #0]
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a60e:	3b01      	subs	r3, #1
 800a610:	68f9      	ldr	r1, [r7, #12]
 800a612:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a614:	fb01 f303 	mul.w	r3, r1, r3
 800a618:	441a      	add	r2, r3
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	22ff      	movs	r2, #255	; 0xff
 800a622:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	22ff      	movs	r2, #255	; 0xff
 800a62a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a62e:	683b      	ldr	r3, [r7, #0]
 800a630:	2b00      	cmp	r3, #0
 800a632:	d114      	bne.n	800a65e <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	691b      	ldr	r3, [r3, #16]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d01a      	beq.n	800a672 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	3310      	adds	r3, #16
 800a640:	4618      	mov	r0, r3
 800a642:	f001 fd3d 	bl	800c0c0 <xTaskRemoveFromEventList>
 800a646:	4603      	mov	r3, r0
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d012      	beq.n	800a672 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a64c:	4b0c      	ldr	r3, [pc, #48]	; (800a680 <xQueueGenericReset+0xd0>)
 800a64e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a652:	601a      	str	r2, [r3, #0]
 800a654:	f3bf 8f4f 	dsb	sy
 800a658:	f3bf 8f6f 	isb	sy
 800a65c:	e009      	b.n	800a672 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	3310      	adds	r3, #16
 800a662:	4618      	mov	r0, r3
 800a664:	f7ff fef0 	bl	800a448 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	3324      	adds	r3, #36	; 0x24
 800a66c:	4618      	mov	r0, r3
 800a66e:	f7ff feeb 	bl	800a448 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a672:	f002 fd7f 	bl	800d174 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a676:	2301      	movs	r3, #1
}
 800a678:	4618      	mov	r0, r3
 800a67a:	3710      	adds	r7, #16
 800a67c:	46bd      	mov	sp, r7
 800a67e:	bd80      	pop	{r7, pc}
 800a680:	e000ed04 	.word	0xe000ed04

0800a684 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a684:	b580      	push	{r7, lr}
 800a686:	b08e      	sub	sp, #56	; 0x38
 800a688:	af02      	add	r7, sp, #8
 800a68a:	60f8      	str	r0, [r7, #12]
 800a68c:	60b9      	str	r1, [r7, #8]
 800a68e:	607a      	str	r2, [r7, #4]
 800a690:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	2b00      	cmp	r3, #0
 800a696:	d10c      	bne.n	800a6b2 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800a698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a69c:	b672      	cpsid	i
 800a69e:	f383 8811 	msr	BASEPRI, r3
 800a6a2:	f3bf 8f6f 	isb	sy
 800a6a6:	f3bf 8f4f 	dsb	sy
 800a6aa:	b662      	cpsie	i
 800a6ac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a6ae:	bf00      	nop
 800a6b0:	e7fe      	b.n	800a6b0 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a6b2:	683b      	ldr	r3, [r7, #0]
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d10c      	bne.n	800a6d2 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800a6b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6bc:	b672      	cpsid	i
 800a6be:	f383 8811 	msr	BASEPRI, r3
 800a6c2:	f3bf 8f6f 	isb	sy
 800a6c6:	f3bf 8f4f 	dsb	sy
 800a6ca:	b662      	cpsie	i
 800a6cc:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a6ce:	bf00      	nop
 800a6d0:	e7fe      	b.n	800a6d0 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d002      	beq.n	800a6de <xQueueGenericCreateStatic+0x5a>
 800a6d8:	68bb      	ldr	r3, [r7, #8]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d001      	beq.n	800a6e2 <xQueueGenericCreateStatic+0x5e>
 800a6de:	2301      	movs	r3, #1
 800a6e0:	e000      	b.n	800a6e4 <xQueueGenericCreateStatic+0x60>
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d10c      	bne.n	800a702 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800a6e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6ec:	b672      	cpsid	i
 800a6ee:	f383 8811 	msr	BASEPRI, r3
 800a6f2:	f3bf 8f6f 	isb	sy
 800a6f6:	f3bf 8f4f 	dsb	sy
 800a6fa:	b662      	cpsie	i
 800a6fc:	623b      	str	r3, [r7, #32]
}
 800a6fe:	bf00      	nop
 800a700:	e7fe      	b.n	800a700 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	2b00      	cmp	r3, #0
 800a706:	d102      	bne.n	800a70e <xQueueGenericCreateStatic+0x8a>
 800a708:	68bb      	ldr	r3, [r7, #8]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d101      	bne.n	800a712 <xQueueGenericCreateStatic+0x8e>
 800a70e:	2301      	movs	r3, #1
 800a710:	e000      	b.n	800a714 <xQueueGenericCreateStatic+0x90>
 800a712:	2300      	movs	r3, #0
 800a714:	2b00      	cmp	r3, #0
 800a716:	d10c      	bne.n	800a732 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800a718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a71c:	b672      	cpsid	i
 800a71e:	f383 8811 	msr	BASEPRI, r3
 800a722:	f3bf 8f6f 	isb	sy
 800a726:	f3bf 8f4f 	dsb	sy
 800a72a:	b662      	cpsie	i
 800a72c:	61fb      	str	r3, [r7, #28]
}
 800a72e:	bf00      	nop
 800a730:	e7fe      	b.n	800a730 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a732:	2350      	movs	r3, #80	; 0x50
 800a734:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a736:	697b      	ldr	r3, [r7, #20]
 800a738:	2b50      	cmp	r3, #80	; 0x50
 800a73a:	d00c      	beq.n	800a756 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800a73c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a740:	b672      	cpsid	i
 800a742:	f383 8811 	msr	BASEPRI, r3
 800a746:	f3bf 8f6f 	isb	sy
 800a74a:	f3bf 8f4f 	dsb	sy
 800a74e:	b662      	cpsie	i
 800a750:	61bb      	str	r3, [r7, #24]
}
 800a752:	bf00      	nop
 800a754:	e7fe      	b.n	800a754 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a756:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a758:	683b      	ldr	r3, [r7, #0]
 800a75a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a75c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d00d      	beq.n	800a77e <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a764:	2201      	movs	r2, #1
 800a766:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a76a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a76e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a770:	9300      	str	r3, [sp, #0]
 800a772:	4613      	mov	r3, r2
 800a774:	687a      	ldr	r2, [r7, #4]
 800a776:	68b9      	ldr	r1, [r7, #8]
 800a778:	68f8      	ldr	r0, [r7, #12]
 800a77a:	f000 f847 	bl	800a80c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a77e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a780:	4618      	mov	r0, r3
 800a782:	3730      	adds	r7, #48	; 0x30
 800a784:	46bd      	mov	sp, r7
 800a786:	bd80      	pop	{r7, pc}

0800a788 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a788:	b580      	push	{r7, lr}
 800a78a:	b08a      	sub	sp, #40	; 0x28
 800a78c:	af02      	add	r7, sp, #8
 800a78e:	60f8      	str	r0, [r7, #12]
 800a790:	60b9      	str	r1, [r7, #8]
 800a792:	4613      	mov	r3, r2
 800a794:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d10c      	bne.n	800a7b6 <xQueueGenericCreate+0x2e>
	__asm volatile
 800a79c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7a0:	b672      	cpsid	i
 800a7a2:	f383 8811 	msr	BASEPRI, r3
 800a7a6:	f3bf 8f6f 	isb	sy
 800a7aa:	f3bf 8f4f 	dsb	sy
 800a7ae:	b662      	cpsie	i
 800a7b0:	613b      	str	r3, [r7, #16]
}
 800a7b2:	bf00      	nop
 800a7b4:	e7fe      	b.n	800a7b4 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800a7b6:	68bb      	ldr	r3, [r7, #8]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d102      	bne.n	800a7c2 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800a7bc:	2300      	movs	r3, #0
 800a7be:	61fb      	str	r3, [r7, #28]
 800a7c0:	e004      	b.n	800a7cc <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	68ba      	ldr	r2, [r7, #8]
 800a7c6:	fb02 f303 	mul.w	r3, r2, r3
 800a7ca:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a7cc:	69fb      	ldr	r3, [r7, #28]
 800a7ce:	3350      	adds	r3, #80	; 0x50
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	f002 fdc7 	bl	800d364 <pvPortMalloc>
 800a7d6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a7d8:	69bb      	ldr	r3, [r7, #24]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d011      	beq.n	800a802 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a7de:	69bb      	ldr	r3, [r7, #24]
 800a7e0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a7e2:	697b      	ldr	r3, [r7, #20]
 800a7e4:	3350      	adds	r3, #80	; 0x50
 800a7e6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a7e8:	69bb      	ldr	r3, [r7, #24]
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a7f0:	79fa      	ldrb	r2, [r7, #7]
 800a7f2:	69bb      	ldr	r3, [r7, #24]
 800a7f4:	9300      	str	r3, [sp, #0]
 800a7f6:	4613      	mov	r3, r2
 800a7f8:	697a      	ldr	r2, [r7, #20]
 800a7fa:	68b9      	ldr	r1, [r7, #8]
 800a7fc:	68f8      	ldr	r0, [r7, #12]
 800a7fe:	f000 f805 	bl	800a80c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a802:	69bb      	ldr	r3, [r7, #24]
	}
 800a804:	4618      	mov	r0, r3
 800a806:	3720      	adds	r7, #32
 800a808:	46bd      	mov	sp, r7
 800a80a:	bd80      	pop	{r7, pc}

0800a80c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b084      	sub	sp, #16
 800a810:	af00      	add	r7, sp, #0
 800a812:	60f8      	str	r0, [r7, #12]
 800a814:	60b9      	str	r1, [r7, #8]
 800a816:	607a      	str	r2, [r7, #4]
 800a818:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a81a:	68bb      	ldr	r3, [r7, #8]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d103      	bne.n	800a828 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a820:	69bb      	ldr	r3, [r7, #24]
 800a822:	69ba      	ldr	r2, [r7, #24]
 800a824:	601a      	str	r2, [r3, #0]
 800a826:	e002      	b.n	800a82e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a828:	69bb      	ldr	r3, [r7, #24]
 800a82a:	687a      	ldr	r2, [r7, #4]
 800a82c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a82e:	69bb      	ldr	r3, [r7, #24]
 800a830:	68fa      	ldr	r2, [r7, #12]
 800a832:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a834:	69bb      	ldr	r3, [r7, #24]
 800a836:	68ba      	ldr	r2, [r7, #8]
 800a838:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a83a:	2101      	movs	r1, #1
 800a83c:	69b8      	ldr	r0, [r7, #24]
 800a83e:	f7ff feb7 	bl	800a5b0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a842:	69bb      	ldr	r3, [r7, #24]
 800a844:	78fa      	ldrb	r2, [r7, #3]
 800a846:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a84a:	bf00      	nop
 800a84c:	3710      	adds	r7, #16
 800a84e:	46bd      	mov	sp, r7
 800a850:	bd80      	pop	{r7, pc}

0800a852 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800a852:	b580      	push	{r7, lr}
 800a854:	b082      	sub	sp, #8
 800a856:	af00      	add	r7, sp, #0
 800a858:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d00e      	beq.n	800a87e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	2200      	movs	r2, #0
 800a864:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	2200      	movs	r2, #0
 800a86a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	2200      	movs	r2, #0
 800a870:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800a872:	2300      	movs	r3, #0
 800a874:	2200      	movs	r2, #0
 800a876:	2100      	movs	r1, #0
 800a878:	6878      	ldr	r0, [r7, #4]
 800a87a:	f000 f917 	bl	800aaac <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800a87e:	bf00      	nop
 800a880:	3708      	adds	r7, #8
 800a882:	46bd      	mov	sp, r7
 800a884:	bd80      	pop	{r7, pc}

0800a886 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800a886:	b580      	push	{r7, lr}
 800a888:	b086      	sub	sp, #24
 800a88a:	af00      	add	r7, sp, #0
 800a88c:	4603      	mov	r3, r0
 800a88e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a890:	2301      	movs	r3, #1
 800a892:	617b      	str	r3, [r7, #20]
 800a894:	2300      	movs	r3, #0
 800a896:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800a898:	79fb      	ldrb	r3, [r7, #7]
 800a89a:	461a      	mov	r2, r3
 800a89c:	6939      	ldr	r1, [r7, #16]
 800a89e:	6978      	ldr	r0, [r7, #20]
 800a8a0:	f7ff ff72 	bl	800a788 <xQueueGenericCreate>
 800a8a4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a8a6:	68f8      	ldr	r0, [r7, #12]
 800a8a8:	f7ff ffd3 	bl	800a852 <prvInitialiseMutex>

		return xNewQueue;
 800a8ac:	68fb      	ldr	r3, [r7, #12]
	}
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	3718      	adds	r7, #24
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	bd80      	pop	{r7, pc}

0800a8b6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800a8b6:	b580      	push	{r7, lr}
 800a8b8:	b088      	sub	sp, #32
 800a8ba:	af02      	add	r7, sp, #8
 800a8bc:	4603      	mov	r3, r0
 800a8be:	6039      	str	r1, [r7, #0]
 800a8c0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a8c2:	2301      	movs	r3, #1
 800a8c4:	617b      	str	r3, [r7, #20]
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800a8ca:	79fb      	ldrb	r3, [r7, #7]
 800a8cc:	9300      	str	r3, [sp, #0]
 800a8ce:	683b      	ldr	r3, [r7, #0]
 800a8d0:	2200      	movs	r2, #0
 800a8d2:	6939      	ldr	r1, [r7, #16]
 800a8d4:	6978      	ldr	r0, [r7, #20]
 800a8d6:	f7ff fed5 	bl	800a684 <xQueueGenericCreateStatic>
 800a8da:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a8dc:	68f8      	ldr	r0, [r7, #12]
 800a8de:	f7ff ffb8 	bl	800a852 <prvInitialiseMutex>

		return xNewQueue;
 800a8e2:	68fb      	ldr	r3, [r7, #12]
	}
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	3718      	adds	r7, #24
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	bd80      	pop	{r7, pc}

0800a8ec <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800a8ec:	b590      	push	{r4, r7, lr}
 800a8ee:	b087      	sub	sp, #28
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800a8f8:	693b      	ldr	r3, [r7, #16]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d10c      	bne.n	800a918 <xQueueGiveMutexRecursive+0x2c>
	__asm volatile
 800a8fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a902:	b672      	cpsid	i
 800a904:	f383 8811 	msr	BASEPRI, r3
 800a908:	f3bf 8f6f 	isb	sy
 800a90c:	f3bf 8f4f 	dsb	sy
 800a910:	b662      	cpsie	i
 800a912:	60fb      	str	r3, [r7, #12]
}
 800a914:	bf00      	nop
 800a916:	e7fe      	b.n	800a916 <xQueueGiveMutexRecursive+0x2a>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800a918:	693b      	ldr	r3, [r7, #16]
 800a91a:	689c      	ldr	r4, [r3, #8]
 800a91c:	f001 fd98 	bl	800c450 <xTaskGetCurrentTaskHandle>
 800a920:	4603      	mov	r3, r0
 800a922:	429c      	cmp	r4, r3
 800a924:	d111      	bne.n	800a94a <xQueueGiveMutexRecursive+0x5e>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800a926:	693b      	ldr	r3, [r7, #16]
 800a928:	68db      	ldr	r3, [r3, #12]
 800a92a:	1e5a      	subs	r2, r3, #1
 800a92c:	693b      	ldr	r3, [r7, #16]
 800a92e:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800a930:	693b      	ldr	r3, [r7, #16]
 800a932:	68db      	ldr	r3, [r3, #12]
 800a934:	2b00      	cmp	r3, #0
 800a936:	d105      	bne.n	800a944 <xQueueGiveMutexRecursive+0x58>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800a938:	2300      	movs	r3, #0
 800a93a:	2200      	movs	r2, #0
 800a93c:	2100      	movs	r1, #0
 800a93e:	6938      	ldr	r0, [r7, #16]
 800a940:	f000 f8b4 	bl	800aaac <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800a944:	2301      	movs	r3, #1
 800a946:	617b      	str	r3, [r7, #20]
 800a948:	e001      	b.n	800a94e <xQueueGiveMutexRecursive+0x62>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800a94a:	2300      	movs	r3, #0
 800a94c:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800a94e:	697b      	ldr	r3, [r7, #20]
	}
 800a950:	4618      	mov	r0, r3
 800a952:	371c      	adds	r7, #28
 800a954:	46bd      	mov	sp, r7
 800a956:	bd90      	pop	{r4, r7, pc}

0800a958 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800a958:	b590      	push	{r4, r7, lr}
 800a95a:	b087      	sub	sp, #28
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
 800a960:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800a966:	693b      	ldr	r3, [r7, #16]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d10c      	bne.n	800a986 <xQueueTakeMutexRecursive+0x2e>
	__asm volatile
 800a96c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a970:	b672      	cpsid	i
 800a972:	f383 8811 	msr	BASEPRI, r3
 800a976:	f3bf 8f6f 	isb	sy
 800a97a:	f3bf 8f4f 	dsb	sy
 800a97e:	b662      	cpsie	i
 800a980:	60fb      	str	r3, [r7, #12]
}
 800a982:	bf00      	nop
 800a984:	e7fe      	b.n	800a984 <xQueueTakeMutexRecursive+0x2c>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800a986:	693b      	ldr	r3, [r7, #16]
 800a988:	689c      	ldr	r4, [r3, #8]
 800a98a:	f001 fd61 	bl	800c450 <xTaskGetCurrentTaskHandle>
 800a98e:	4603      	mov	r3, r0
 800a990:	429c      	cmp	r4, r3
 800a992:	d107      	bne.n	800a9a4 <xQueueTakeMutexRecursive+0x4c>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800a994:	693b      	ldr	r3, [r7, #16]
 800a996:	68db      	ldr	r3, [r3, #12]
 800a998:	1c5a      	adds	r2, r3, #1
 800a99a:	693b      	ldr	r3, [r7, #16]
 800a99c:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800a99e:	2301      	movs	r3, #1
 800a9a0:	617b      	str	r3, [r7, #20]
 800a9a2:	e00c      	b.n	800a9be <xQueueTakeMutexRecursive+0x66>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800a9a4:	6839      	ldr	r1, [r7, #0]
 800a9a6:	6938      	ldr	r0, [r7, #16]
 800a9a8:	f000 fba2 	bl	800b0f0 <xQueueSemaphoreTake>
 800a9ac:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800a9ae:	697b      	ldr	r3, [r7, #20]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d004      	beq.n	800a9be <xQueueTakeMutexRecursive+0x66>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800a9b4:	693b      	ldr	r3, [r7, #16]
 800a9b6:	68db      	ldr	r3, [r3, #12]
 800a9b8:	1c5a      	adds	r2, r3, #1
 800a9ba:	693b      	ldr	r3, [r7, #16]
 800a9bc:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800a9be:	697b      	ldr	r3, [r7, #20]
	}
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	371c      	adds	r7, #28
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	bd90      	pop	{r4, r7, pc}

0800a9c8 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b08a      	sub	sp, #40	; 0x28
 800a9cc:	af02      	add	r7, sp, #8
 800a9ce:	60f8      	str	r0, [r7, #12]
 800a9d0:	60b9      	str	r1, [r7, #8]
 800a9d2:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d10c      	bne.n	800a9f4 <xQueueCreateCountingSemaphoreStatic+0x2c>
	__asm volatile
 800a9da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9de:	b672      	cpsid	i
 800a9e0:	f383 8811 	msr	BASEPRI, r3
 800a9e4:	f3bf 8f6f 	isb	sy
 800a9e8:	f3bf 8f4f 	dsb	sy
 800a9ec:	b662      	cpsie	i
 800a9ee:	61bb      	str	r3, [r7, #24]
}
 800a9f0:	bf00      	nop
 800a9f2:	e7fe      	b.n	800a9f2 <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a9f4:	68ba      	ldr	r2, [r7, #8]
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	429a      	cmp	r2, r3
 800a9fa:	d90c      	bls.n	800aa16 <xQueueCreateCountingSemaphoreStatic+0x4e>
	__asm volatile
 800a9fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa00:	b672      	cpsid	i
 800aa02:	f383 8811 	msr	BASEPRI, r3
 800aa06:	f3bf 8f6f 	isb	sy
 800aa0a:	f3bf 8f4f 	dsb	sy
 800aa0e:	b662      	cpsie	i
 800aa10:	617b      	str	r3, [r7, #20]
}
 800aa12:	bf00      	nop
 800aa14:	e7fe      	b.n	800aa14 <xQueueCreateCountingSemaphoreStatic+0x4c>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800aa16:	2302      	movs	r3, #2
 800aa18:	9300      	str	r3, [sp, #0]
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	2100      	movs	r1, #0
 800aa20:	68f8      	ldr	r0, [r7, #12]
 800aa22:	f7ff fe2f 	bl	800a684 <xQueueGenericCreateStatic>
 800aa26:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800aa28:	69fb      	ldr	r3, [r7, #28]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d002      	beq.n	800aa34 <xQueueCreateCountingSemaphoreStatic+0x6c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800aa2e:	69fb      	ldr	r3, [r7, #28]
 800aa30:	68ba      	ldr	r2, [r7, #8]
 800aa32:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800aa34:	69fb      	ldr	r3, [r7, #28]
	}
 800aa36:	4618      	mov	r0, r3
 800aa38:	3720      	adds	r7, #32
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	bd80      	pop	{r7, pc}

0800aa3e <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800aa3e:	b580      	push	{r7, lr}
 800aa40:	b086      	sub	sp, #24
 800aa42:	af00      	add	r7, sp, #0
 800aa44:	6078      	str	r0, [r7, #4]
 800aa46:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d10c      	bne.n	800aa68 <xQueueCreateCountingSemaphore+0x2a>
	__asm volatile
 800aa4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa52:	b672      	cpsid	i
 800aa54:	f383 8811 	msr	BASEPRI, r3
 800aa58:	f3bf 8f6f 	isb	sy
 800aa5c:	f3bf 8f4f 	dsb	sy
 800aa60:	b662      	cpsie	i
 800aa62:	613b      	str	r3, [r7, #16]
}
 800aa64:	bf00      	nop
 800aa66:	e7fe      	b.n	800aa66 <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 800aa68:	683a      	ldr	r2, [r7, #0]
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	429a      	cmp	r2, r3
 800aa6e:	d90c      	bls.n	800aa8a <xQueueCreateCountingSemaphore+0x4c>
	__asm volatile
 800aa70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa74:	b672      	cpsid	i
 800aa76:	f383 8811 	msr	BASEPRI, r3
 800aa7a:	f3bf 8f6f 	isb	sy
 800aa7e:	f3bf 8f4f 	dsb	sy
 800aa82:	b662      	cpsie	i
 800aa84:	60fb      	str	r3, [r7, #12]
}
 800aa86:	bf00      	nop
 800aa88:	e7fe      	b.n	800aa88 <xQueueCreateCountingSemaphore+0x4a>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800aa8a:	2202      	movs	r2, #2
 800aa8c:	2100      	movs	r1, #0
 800aa8e:	6878      	ldr	r0, [r7, #4]
 800aa90:	f7ff fe7a 	bl	800a788 <xQueueGenericCreate>
 800aa94:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800aa96:	697b      	ldr	r3, [r7, #20]
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d002      	beq.n	800aaa2 <xQueueCreateCountingSemaphore+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800aa9c:	697b      	ldr	r3, [r7, #20]
 800aa9e:	683a      	ldr	r2, [r7, #0]
 800aaa0:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800aaa2:	697b      	ldr	r3, [r7, #20]
	}
 800aaa4:	4618      	mov	r0, r3
 800aaa6:	3718      	adds	r7, #24
 800aaa8:	46bd      	mov	sp, r7
 800aaaa:	bd80      	pop	{r7, pc}

0800aaac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800aaac:	b580      	push	{r7, lr}
 800aaae:	b08e      	sub	sp, #56	; 0x38
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	60f8      	str	r0, [r7, #12]
 800aab4:	60b9      	str	r1, [r7, #8]
 800aab6:	607a      	str	r2, [r7, #4]
 800aab8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800aaba:	2300      	movs	r3, #0
 800aabc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800aac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d10c      	bne.n	800aae2 <xQueueGenericSend+0x36>
	__asm volatile
 800aac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aacc:	b672      	cpsid	i
 800aace:	f383 8811 	msr	BASEPRI, r3
 800aad2:	f3bf 8f6f 	isb	sy
 800aad6:	f3bf 8f4f 	dsb	sy
 800aada:	b662      	cpsie	i
 800aadc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800aade:	bf00      	nop
 800aae0:	e7fe      	b.n	800aae0 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aae2:	68bb      	ldr	r3, [r7, #8]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d103      	bne.n	800aaf0 <xQueueGenericSend+0x44>
 800aae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d101      	bne.n	800aaf4 <xQueueGenericSend+0x48>
 800aaf0:	2301      	movs	r3, #1
 800aaf2:	e000      	b.n	800aaf6 <xQueueGenericSend+0x4a>
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d10c      	bne.n	800ab14 <xQueueGenericSend+0x68>
	__asm volatile
 800aafa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aafe:	b672      	cpsid	i
 800ab00:	f383 8811 	msr	BASEPRI, r3
 800ab04:	f3bf 8f6f 	isb	sy
 800ab08:	f3bf 8f4f 	dsb	sy
 800ab0c:	b662      	cpsie	i
 800ab0e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ab10:	bf00      	nop
 800ab12:	e7fe      	b.n	800ab12 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ab14:	683b      	ldr	r3, [r7, #0]
 800ab16:	2b02      	cmp	r3, #2
 800ab18:	d103      	bne.n	800ab22 <xQueueGenericSend+0x76>
 800ab1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab1e:	2b01      	cmp	r3, #1
 800ab20:	d101      	bne.n	800ab26 <xQueueGenericSend+0x7a>
 800ab22:	2301      	movs	r3, #1
 800ab24:	e000      	b.n	800ab28 <xQueueGenericSend+0x7c>
 800ab26:	2300      	movs	r3, #0
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d10c      	bne.n	800ab46 <xQueueGenericSend+0x9a>
	__asm volatile
 800ab2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab30:	b672      	cpsid	i
 800ab32:	f383 8811 	msr	BASEPRI, r3
 800ab36:	f3bf 8f6f 	isb	sy
 800ab3a:	f3bf 8f4f 	dsb	sy
 800ab3e:	b662      	cpsie	i
 800ab40:	623b      	str	r3, [r7, #32]
}
 800ab42:	bf00      	nop
 800ab44:	e7fe      	b.n	800ab44 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ab46:	f001 fc93 	bl	800c470 <xTaskGetSchedulerState>
 800ab4a:	4603      	mov	r3, r0
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d102      	bne.n	800ab56 <xQueueGenericSend+0xaa>
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d101      	bne.n	800ab5a <xQueueGenericSend+0xae>
 800ab56:	2301      	movs	r3, #1
 800ab58:	e000      	b.n	800ab5c <xQueueGenericSend+0xb0>
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d10c      	bne.n	800ab7a <xQueueGenericSend+0xce>
	__asm volatile
 800ab60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab64:	b672      	cpsid	i
 800ab66:	f383 8811 	msr	BASEPRI, r3
 800ab6a:	f3bf 8f6f 	isb	sy
 800ab6e:	f3bf 8f4f 	dsb	sy
 800ab72:	b662      	cpsie	i
 800ab74:	61fb      	str	r3, [r7, #28]
}
 800ab76:	bf00      	nop
 800ab78:	e7fe      	b.n	800ab78 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ab7a:	f002 fac7 	bl	800d10c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ab7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab86:	429a      	cmp	r2, r3
 800ab88:	d302      	bcc.n	800ab90 <xQueueGenericSend+0xe4>
 800ab8a:	683b      	ldr	r3, [r7, #0]
 800ab8c:	2b02      	cmp	r3, #2
 800ab8e:	d129      	bne.n	800abe4 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ab90:	683a      	ldr	r2, [r7, #0]
 800ab92:	68b9      	ldr	r1, [r7, #8]
 800ab94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ab96:	f000 fc82 	bl	800b49e <prvCopyDataToQueue>
 800ab9a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ab9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d010      	beq.n	800abc6 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aba6:	3324      	adds	r3, #36	; 0x24
 800aba8:	4618      	mov	r0, r3
 800abaa:	f001 fa89 	bl	800c0c0 <xTaskRemoveFromEventList>
 800abae:	4603      	mov	r3, r0
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d013      	beq.n	800abdc <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800abb4:	4b3f      	ldr	r3, [pc, #252]	; (800acb4 <xQueueGenericSend+0x208>)
 800abb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abba:	601a      	str	r2, [r3, #0]
 800abbc:	f3bf 8f4f 	dsb	sy
 800abc0:	f3bf 8f6f 	isb	sy
 800abc4:	e00a      	b.n	800abdc <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800abc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d007      	beq.n	800abdc <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800abcc:	4b39      	ldr	r3, [pc, #228]	; (800acb4 <xQueueGenericSend+0x208>)
 800abce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abd2:	601a      	str	r2, [r3, #0]
 800abd4:	f3bf 8f4f 	dsb	sy
 800abd8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800abdc:	f002 faca 	bl	800d174 <vPortExitCritical>
				return pdPASS;
 800abe0:	2301      	movs	r3, #1
 800abe2:	e063      	b.n	800acac <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d103      	bne.n	800abf2 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800abea:	f002 fac3 	bl	800d174 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800abee:	2300      	movs	r3, #0
 800abf0:	e05c      	b.n	800acac <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800abf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d106      	bne.n	800ac06 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800abf8:	f107 0314 	add.w	r3, r7, #20
 800abfc:	4618      	mov	r0, r3
 800abfe:	f001 fac5 	bl	800c18c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ac02:	2301      	movs	r3, #1
 800ac04:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ac06:	f002 fab5 	bl	800d174 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ac0a:	f001 f82b 	bl	800bc64 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ac0e:	f002 fa7d 	bl	800d10c <vPortEnterCritical>
 800ac12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ac18:	b25b      	sxtb	r3, r3
 800ac1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac1e:	d103      	bne.n	800ac28 <xQueueGenericSend+0x17c>
 800ac20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac22:	2200      	movs	r2, #0
 800ac24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ac28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac2a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ac2e:	b25b      	sxtb	r3, r3
 800ac30:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac34:	d103      	bne.n	800ac3e <xQueueGenericSend+0x192>
 800ac36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac38:	2200      	movs	r2, #0
 800ac3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ac3e:	f002 fa99 	bl	800d174 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ac42:	1d3a      	adds	r2, r7, #4
 800ac44:	f107 0314 	add.w	r3, r7, #20
 800ac48:	4611      	mov	r1, r2
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	f001 fab4 	bl	800c1b8 <xTaskCheckForTimeOut>
 800ac50:	4603      	mov	r3, r0
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d124      	bne.n	800aca0 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ac56:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ac58:	f000 fd19 	bl	800b68e <prvIsQueueFull>
 800ac5c:	4603      	mov	r3, r0
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d018      	beq.n	800ac94 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ac62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac64:	3310      	adds	r3, #16
 800ac66:	687a      	ldr	r2, [r7, #4]
 800ac68:	4611      	mov	r1, r2
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	f001 f9d4 	bl	800c018 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ac70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ac72:	f000 fca4 	bl	800b5be <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ac76:	f001 f803 	bl	800bc80 <xTaskResumeAll>
 800ac7a:	4603      	mov	r3, r0
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	f47f af7c 	bne.w	800ab7a <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800ac82:	4b0c      	ldr	r3, [pc, #48]	; (800acb4 <xQueueGenericSend+0x208>)
 800ac84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac88:	601a      	str	r2, [r3, #0]
 800ac8a:	f3bf 8f4f 	dsb	sy
 800ac8e:	f3bf 8f6f 	isb	sy
 800ac92:	e772      	b.n	800ab7a <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ac94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ac96:	f000 fc92 	bl	800b5be <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ac9a:	f000 fff1 	bl	800bc80 <xTaskResumeAll>
 800ac9e:	e76c      	b.n	800ab7a <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800aca0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aca2:	f000 fc8c 	bl	800b5be <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800aca6:	f000 ffeb 	bl	800bc80 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800acaa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800acac:	4618      	mov	r0, r3
 800acae:	3738      	adds	r7, #56	; 0x38
 800acb0:	46bd      	mov	sp, r7
 800acb2:	bd80      	pop	{r7, pc}
 800acb4:	e000ed04 	.word	0xe000ed04

0800acb8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800acb8:	b580      	push	{r7, lr}
 800acba:	b08e      	sub	sp, #56	; 0x38
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	60f8      	str	r0, [r7, #12]
 800acc0:	60b9      	str	r1, [r7, #8]
 800acc2:	607a      	str	r2, [r7, #4]
 800acc4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800acca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800accc:	2b00      	cmp	r3, #0
 800acce:	d10c      	bne.n	800acea <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800acd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acd4:	b672      	cpsid	i
 800acd6:	f383 8811 	msr	BASEPRI, r3
 800acda:	f3bf 8f6f 	isb	sy
 800acde:	f3bf 8f4f 	dsb	sy
 800ace2:	b662      	cpsie	i
 800ace4:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ace6:	bf00      	nop
 800ace8:	e7fe      	b.n	800ace8 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800acea:	68bb      	ldr	r3, [r7, #8]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d103      	bne.n	800acf8 <xQueueGenericSendFromISR+0x40>
 800acf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d101      	bne.n	800acfc <xQueueGenericSendFromISR+0x44>
 800acf8:	2301      	movs	r3, #1
 800acfa:	e000      	b.n	800acfe <xQueueGenericSendFromISR+0x46>
 800acfc:	2300      	movs	r3, #0
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d10c      	bne.n	800ad1c <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800ad02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad06:	b672      	cpsid	i
 800ad08:	f383 8811 	msr	BASEPRI, r3
 800ad0c:	f3bf 8f6f 	isb	sy
 800ad10:	f3bf 8f4f 	dsb	sy
 800ad14:	b662      	cpsie	i
 800ad16:	623b      	str	r3, [r7, #32]
}
 800ad18:	bf00      	nop
 800ad1a:	e7fe      	b.n	800ad1a <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ad1c:	683b      	ldr	r3, [r7, #0]
 800ad1e:	2b02      	cmp	r3, #2
 800ad20:	d103      	bne.n	800ad2a <xQueueGenericSendFromISR+0x72>
 800ad22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad26:	2b01      	cmp	r3, #1
 800ad28:	d101      	bne.n	800ad2e <xQueueGenericSendFromISR+0x76>
 800ad2a:	2301      	movs	r3, #1
 800ad2c:	e000      	b.n	800ad30 <xQueueGenericSendFromISR+0x78>
 800ad2e:	2300      	movs	r3, #0
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d10c      	bne.n	800ad4e <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800ad34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad38:	b672      	cpsid	i
 800ad3a:	f383 8811 	msr	BASEPRI, r3
 800ad3e:	f3bf 8f6f 	isb	sy
 800ad42:	f3bf 8f4f 	dsb	sy
 800ad46:	b662      	cpsie	i
 800ad48:	61fb      	str	r3, [r7, #28]
}
 800ad4a:	bf00      	nop
 800ad4c:	e7fe      	b.n	800ad4c <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ad4e:	f002 fac5 	bl	800d2dc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ad52:	f3ef 8211 	mrs	r2, BASEPRI
 800ad56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad5a:	b672      	cpsid	i
 800ad5c:	f383 8811 	msr	BASEPRI, r3
 800ad60:	f3bf 8f6f 	isb	sy
 800ad64:	f3bf 8f4f 	dsb	sy
 800ad68:	b662      	cpsie	i
 800ad6a:	61ba      	str	r2, [r7, #24]
 800ad6c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ad6e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ad70:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ad72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ad76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad7a:	429a      	cmp	r2, r3
 800ad7c:	d302      	bcc.n	800ad84 <xQueueGenericSendFromISR+0xcc>
 800ad7e:	683b      	ldr	r3, [r7, #0]
 800ad80:	2b02      	cmp	r3, #2
 800ad82:	d12c      	bne.n	800adde <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ad84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad86:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ad8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ad8e:	683a      	ldr	r2, [r7, #0]
 800ad90:	68b9      	ldr	r1, [r7, #8]
 800ad92:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ad94:	f000 fb83 	bl	800b49e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ad98:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800ad9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ada0:	d112      	bne.n	800adc8 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ada2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ada4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d016      	beq.n	800add8 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800adaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adac:	3324      	adds	r3, #36	; 0x24
 800adae:	4618      	mov	r0, r3
 800adb0:	f001 f986 	bl	800c0c0 <xTaskRemoveFromEventList>
 800adb4:	4603      	mov	r3, r0
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d00e      	beq.n	800add8 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d00b      	beq.n	800add8 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	2201      	movs	r2, #1
 800adc4:	601a      	str	r2, [r3, #0]
 800adc6:	e007      	b.n	800add8 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800adc8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800adcc:	3301      	adds	r3, #1
 800adce:	b2db      	uxtb	r3, r3
 800add0:	b25a      	sxtb	r2, r3
 800add2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800add4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800add8:	2301      	movs	r3, #1
 800adda:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800addc:	e001      	b.n	800ade2 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800adde:	2300      	movs	r3, #0
 800ade0:	637b      	str	r3, [r7, #52]	; 0x34
 800ade2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ade4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ade6:	693b      	ldr	r3, [r7, #16]
 800ade8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800adec:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800adee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800adf0:	4618      	mov	r0, r3
 800adf2:	3738      	adds	r7, #56	; 0x38
 800adf4:	46bd      	mov	sp, r7
 800adf6:	bd80      	pop	{r7, pc}

0800adf8 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b08e      	sub	sp, #56	; 0x38
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	6078      	str	r0, [r7, #4]
 800ae00:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800ae06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d10c      	bne.n	800ae26 <xQueueGiveFromISR+0x2e>
	__asm volatile
 800ae0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae10:	b672      	cpsid	i
 800ae12:	f383 8811 	msr	BASEPRI, r3
 800ae16:	f3bf 8f6f 	isb	sy
 800ae1a:	f3bf 8f4f 	dsb	sy
 800ae1e:	b662      	cpsie	i
 800ae20:	623b      	str	r3, [r7, #32]
}
 800ae22:	bf00      	nop
 800ae24:	e7fe      	b.n	800ae24 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ae26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d00c      	beq.n	800ae48 <xQueueGiveFromISR+0x50>
	__asm volatile
 800ae2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae32:	b672      	cpsid	i
 800ae34:	f383 8811 	msr	BASEPRI, r3
 800ae38:	f3bf 8f6f 	isb	sy
 800ae3c:	f3bf 8f4f 	dsb	sy
 800ae40:	b662      	cpsie	i
 800ae42:	61fb      	str	r3, [r7, #28]
}
 800ae44:	bf00      	nop
 800ae46:	e7fe      	b.n	800ae46 <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800ae48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d103      	bne.n	800ae58 <xQueueGiveFromISR+0x60>
 800ae50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae52:	689b      	ldr	r3, [r3, #8]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d101      	bne.n	800ae5c <xQueueGiveFromISR+0x64>
 800ae58:	2301      	movs	r3, #1
 800ae5a:	e000      	b.n	800ae5e <xQueueGiveFromISR+0x66>
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d10c      	bne.n	800ae7c <xQueueGiveFromISR+0x84>
	__asm volatile
 800ae62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae66:	b672      	cpsid	i
 800ae68:	f383 8811 	msr	BASEPRI, r3
 800ae6c:	f3bf 8f6f 	isb	sy
 800ae70:	f3bf 8f4f 	dsb	sy
 800ae74:	b662      	cpsie	i
 800ae76:	61bb      	str	r3, [r7, #24]
}
 800ae78:	bf00      	nop
 800ae7a:	e7fe      	b.n	800ae7a <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ae7c:	f002 fa2e 	bl	800d2dc <vPortValidateInterruptPriority>
	__asm volatile
 800ae80:	f3ef 8211 	mrs	r2, BASEPRI
 800ae84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae88:	b672      	cpsid	i
 800ae8a:	f383 8811 	msr	BASEPRI, r3
 800ae8e:	f3bf 8f6f 	isb	sy
 800ae92:	f3bf 8f4f 	dsb	sy
 800ae96:	b662      	cpsie	i
 800ae98:	617a      	str	r2, [r7, #20]
 800ae9a:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800ae9c:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ae9e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aea4:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800aea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aeaa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aeac:	429a      	cmp	r2, r3
 800aeae:	d22b      	bcs.n	800af08 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800aeb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeb2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aeb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800aeba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aebc:	1c5a      	adds	r2, r3, #1
 800aebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aec0:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800aec2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800aec6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aeca:	d112      	bne.n	800aef2 <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d016      	beq.n	800af02 <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aed6:	3324      	adds	r3, #36	; 0x24
 800aed8:	4618      	mov	r0, r3
 800aeda:	f001 f8f1 	bl	800c0c0 <xTaskRemoveFromEventList>
 800aede:	4603      	mov	r3, r0
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d00e      	beq.n	800af02 <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800aee4:	683b      	ldr	r3, [r7, #0]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d00b      	beq.n	800af02 <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800aeea:	683b      	ldr	r3, [r7, #0]
 800aeec:	2201      	movs	r2, #1
 800aeee:	601a      	str	r2, [r3, #0]
 800aef0:	e007      	b.n	800af02 <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800aef2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aef6:	3301      	adds	r3, #1
 800aef8:	b2db      	uxtb	r3, r3
 800aefa:	b25a      	sxtb	r2, r3
 800aefc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aefe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800af02:	2301      	movs	r3, #1
 800af04:	637b      	str	r3, [r7, #52]	; 0x34
 800af06:	e001      	b.n	800af0c <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800af08:	2300      	movs	r3, #0
 800af0a:	637b      	str	r3, [r7, #52]	; 0x34
 800af0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af0e:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	f383 8811 	msr	BASEPRI, r3
}
 800af16:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800af18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800af1a:	4618      	mov	r0, r3
 800af1c:	3738      	adds	r7, #56	; 0x38
 800af1e:	46bd      	mov	sp, r7
 800af20:	bd80      	pop	{r7, pc}
	...

0800af24 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800af24:	b580      	push	{r7, lr}
 800af26:	b08c      	sub	sp, #48	; 0x30
 800af28:	af00      	add	r7, sp, #0
 800af2a:	60f8      	str	r0, [r7, #12]
 800af2c:	60b9      	str	r1, [r7, #8]
 800af2e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800af30:	2300      	movs	r3, #0
 800af32:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800af38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d10c      	bne.n	800af58 <xQueueReceive+0x34>
	__asm volatile
 800af3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af42:	b672      	cpsid	i
 800af44:	f383 8811 	msr	BASEPRI, r3
 800af48:	f3bf 8f6f 	isb	sy
 800af4c:	f3bf 8f4f 	dsb	sy
 800af50:	b662      	cpsie	i
 800af52:	623b      	str	r3, [r7, #32]
}
 800af54:	bf00      	nop
 800af56:	e7fe      	b.n	800af56 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800af58:	68bb      	ldr	r3, [r7, #8]
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d103      	bne.n	800af66 <xQueueReceive+0x42>
 800af5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af62:	2b00      	cmp	r3, #0
 800af64:	d101      	bne.n	800af6a <xQueueReceive+0x46>
 800af66:	2301      	movs	r3, #1
 800af68:	e000      	b.n	800af6c <xQueueReceive+0x48>
 800af6a:	2300      	movs	r3, #0
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d10c      	bne.n	800af8a <xQueueReceive+0x66>
	__asm volatile
 800af70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af74:	b672      	cpsid	i
 800af76:	f383 8811 	msr	BASEPRI, r3
 800af7a:	f3bf 8f6f 	isb	sy
 800af7e:	f3bf 8f4f 	dsb	sy
 800af82:	b662      	cpsie	i
 800af84:	61fb      	str	r3, [r7, #28]
}
 800af86:	bf00      	nop
 800af88:	e7fe      	b.n	800af88 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800af8a:	f001 fa71 	bl	800c470 <xTaskGetSchedulerState>
 800af8e:	4603      	mov	r3, r0
 800af90:	2b00      	cmp	r3, #0
 800af92:	d102      	bne.n	800af9a <xQueueReceive+0x76>
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	2b00      	cmp	r3, #0
 800af98:	d101      	bne.n	800af9e <xQueueReceive+0x7a>
 800af9a:	2301      	movs	r3, #1
 800af9c:	e000      	b.n	800afa0 <xQueueReceive+0x7c>
 800af9e:	2300      	movs	r3, #0
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d10c      	bne.n	800afbe <xQueueReceive+0x9a>
	__asm volatile
 800afa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afa8:	b672      	cpsid	i
 800afaa:	f383 8811 	msr	BASEPRI, r3
 800afae:	f3bf 8f6f 	isb	sy
 800afb2:	f3bf 8f4f 	dsb	sy
 800afb6:	b662      	cpsie	i
 800afb8:	61bb      	str	r3, [r7, #24]
}
 800afba:	bf00      	nop
 800afbc:	e7fe      	b.n	800afbc <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800afbe:	f002 f8a5 	bl	800d10c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800afc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afc6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800afc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d01f      	beq.n	800b00e <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800afce:	68b9      	ldr	r1, [r7, #8]
 800afd0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800afd2:	f000 face 	bl	800b572 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800afd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afd8:	1e5a      	subs	r2, r3, #1
 800afda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afdc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800afde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afe0:	691b      	ldr	r3, [r3, #16]
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d00f      	beq.n	800b006 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800afe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afe8:	3310      	adds	r3, #16
 800afea:	4618      	mov	r0, r3
 800afec:	f001 f868 	bl	800c0c0 <xTaskRemoveFromEventList>
 800aff0:	4603      	mov	r3, r0
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d007      	beq.n	800b006 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800aff6:	4b3d      	ldr	r3, [pc, #244]	; (800b0ec <xQueueReceive+0x1c8>)
 800aff8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800affc:	601a      	str	r2, [r3, #0]
 800affe:	f3bf 8f4f 	dsb	sy
 800b002:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b006:	f002 f8b5 	bl	800d174 <vPortExitCritical>
				return pdPASS;
 800b00a:	2301      	movs	r3, #1
 800b00c:	e069      	b.n	800b0e2 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	2b00      	cmp	r3, #0
 800b012:	d103      	bne.n	800b01c <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b014:	f002 f8ae 	bl	800d174 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b018:	2300      	movs	r3, #0
 800b01a:	e062      	b.n	800b0e2 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b01c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d106      	bne.n	800b030 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b022:	f107 0310 	add.w	r3, r7, #16
 800b026:	4618      	mov	r0, r3
 800b028:	f001 f8b0 	bl	800c18c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b02c:	2301      	movs	r3, #1
 800b02e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b030:	f002 f8a0 	bl	800d174 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b034:	f000 fe16 	bl	800bc64 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b038:	f002 f868 	bl	800d10c <vPortEnterCritical>
 800b03c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b03e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b042:	b25b      	sxtb	r3, r3
 800b044:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b048:	d103      	bne.n	800b052 <xQueueReceive+0x12e>
 800b04a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b04c:	2200      	movs	r2, #0
 800b04e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b054:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b058:	b25b      	sxtb	r3, r3
 800b05a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b05e:	d103      	bne.n	800b068 <xQueueReceive+0x144>
 800b060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b062:	2200      	movs	r2, #0
 800b064:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b068:	f002 f884 	bl	800d174 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b06c:	1d3a      	adds	r2, r7, #4
 800b06e:	f107 0310 	add.w	r3, r7, #16
 800b072:	4611      	mov	r1, r2
 800b074:	4618      	mov	r0, r3
 800b076:	f001 f89f 	bl	800c1b8 <xTaskCheckForTimeOut>
 800b07a:	4603      	mov	r3, r0
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d123      	bne.n	800b0c8 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b080:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b082:	f000 faee 	bl	800b662 <prvIsQueueEmpty>
 800b086:	4603      	mov	r3, r0
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d017      	beq.n	800b0bc <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b08c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b08e:	3324      	adds	r3, #36	; 0x24
 800b090:	687a      	ldr	r2, [r7, #4]
 800b092:	4611      	mov	r1, r2
 800b094:	4618      	mov	r0, r3
 800b096:	f000 ffbf 	bl	800c018 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b09a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b09c:	f000 fa8f 	bl	800b5be <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b0a0:	f000 fdee 	bl	800bc80 <xTaskResumeAll>
 800b0a4:	4603      	mov	r3, r0
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d189      	bne.n	800afbe <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800b0aa:	4b10      	ldr	r3, [pc, #64]	; (800b0ec <xQueueReceive+0x1c8>)
 800b0ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b0b0:	601a      	str	r2, [r3, #0]
 800b0b2:	f3bf 8f4f 	dsb	sy
 800b0b6:	f3bf 8f6f 	isb	sy
 800b0ba:	e780      	b.n	800afbe <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b0bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b0be:	f000 fa7e 	bl	800b5be <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b0c2:	f000 fddd 	bl	800bc80 <xTaskResumeAll>
 800b0c6:	e77a      	b.n	800afbe <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b0c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b0ca:	f000 fa78 	bl	800b5be <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b0ce:	f000 fdd7 	bl	800bc80 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b0d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b0d4:	f000 fac5 	bl	800b662 <prvIsQueueEmpty>
 800b0d8:	4603      	mov	r3, r0
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	f43f af6f 	beq.w	800afbe <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b0e0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	3730      	adds	r7, #48	; 0x30
 800b0e6:	46bd      	mov	sp, r7
 800b0e8:	bd80      	pop	{r7, pc}
 800b0ea:	bf00      	nop
 800b0ec:	e000ed04 	.word	0xe000ed04

0800b0f0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	b08e      	sub	sp, #56	; 0x38
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	6078      	str	r0, [r7, #4]
 800b0f8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800b102:	2300      	movs	r3, #0
 800b104:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d10c      	bne.n	800b126 <xQueueSemaphoreTake+0x36>
	__asm volatile
 800b10c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b110:	b672      	cpsid	i
 800b112:	f383 8811 	msr	BASEPRI, r3
 800b116:	f3bf 8f6f 	isb	sy
 800b11a:	f3bf 8f4f 	dsb	sy
 800b11e:	b662      	cpsie	i
 800b120:	623b      	str	r3, [r7, #32]
}
 800b122:	bf00      	nop
 800b124:	e7fe      	b.n	800b124 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d00c      	beq.n	800b148 <xQueueSemaphoreTake+0x58>
	__asm volatile
 800b12e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b132:	b672      	cpsid	i
 800b134:	f383 8811 	msr	BASEPRI, r3
 800b138:	f3bf 8f6f 	isb	sy
 800b13c:	f3bf 8f4f 	dsb	sy
 800b140:	b662      	cpsie	i
 800b142:	61fb      	str	r3, [r7, #28]
}
 800b144:	bf00      	nop
 800b146:	e7fe      	b.n	800b146 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b148:	f001 f992 	bl	800c470 <xTaskGetSchedulerState>
 800b14c:	4603      	mov	r3, r0
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d102      	bne.n	800b158 <xQueueSemaphoreTake+0x68>
 800b152:	683b      	ldr	r3, [r7, #0]
 800b154:	2b00      	cmp	r3, #0
 800b156:	d101      	bne.n	800b15c <xQueueSemaphoreTake+0x6c>
 800b158:	2301      	movs	r3, #1
 800b15a:	e000      	b.n	800b15e <xQueueSemaphoreTake+0x6e>
 800b15c:	2300      	movs	r3, #0
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d10c      	bne.n	800b17c <xQueueSemaphoreTake+0x8c>
	__asm volatile
 800b162:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b166:	b672      	cpsid	i
 800b168:	f383 8811 	msr	BASEPRI, r3
 800b16c:	f3bf 8f6f 	isb	sy
 800b170:	f3bf 8f4f 	dsb	sy
 800b174:	b662      	cpsie	i
 800b176:	61bb      	str	r3, [r7, #24]
}
 800b178:	bf00      	nop
 800b17a:	e7fe      	b.n	800b17a <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b17c:	f001 ffc6 	bl	800d10c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800b180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b184:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800b186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d024      	beq.n	800b1d6 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800b18c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b18e:	1e5a      	subs	r2, r3, #1
 800b190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b192:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d104      	bne.n	800b1a6 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800b19c:	f001 fae6 	bl	800c76c <pvTaskIncrementMutexHeldCount>
 800b1a0:	4602      	mov	r2, r0
 800b1a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1a4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b1a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1a8:	691b      	ldr	r3, [r3, #16]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d00f      	beq.n	800b1ce <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b1ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1b0:	3310      	adds	r3, #16
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	f000 ff84 	bl	800c0c0 <xTaskRemoveFromEventList>
 800b1b8:	4603      	mov	r3, r0
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d007      	beq.n	800b1ce <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b1be:	4b55      	ldr	r3, [pc, #340]	; (800b314 <xQueueSemaphoreTake+0x224>)
 800b1c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b1c4:	601a      	str	r2, [r3, #0]
 800b1c6:	f3bf 8f4f 	dsb	sy
 800b1ca:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b1ce:	f001 ffd1 	bl	800d174 <vPortExitCritical>
				return pdPASS;
 800b1d2:	2301      	movs	r3, #1
 800b1d4:	e099      	b.n	800b30a <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b1d6:	683b      	ldr	r3, [r7, #0]
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d113      	bne.n	800b204 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800b1dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d00c      	beq.n	800b1fc <xQueueSemaphoreTake+0x10c>
	__asm volatile
 800b1e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1e6:	b672      	cpsid	i
 800b1e8:	f383 8811 	msr	BASEPRI, r3
 800b1ec:	f3bf 8f6f 	isb	sy
 800b1f0:	f3bf 8f4f 	dsb	sy
 800b1f4:	b662      	cpsie	i
 800b1f6:	617b      	str	r3, [r7, #20]
}
 800b1f8:	bf00      	nop
 800b1fa:	e7fe      	b.n	800b1fa <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800b1fc:	f001 ffba 	bl	800d174 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b200:	2300      	movs	r3, #0
 800b202:	e082      	b.n	800b30a <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b204:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b206:	2b00      	cmp	r3, #0
 800b208:	d106      	bne.n	800b218 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b20a:	f107 030c 	add.w	r3, r7, #12
 800b20e:	4618      	mov	r0, r3
 800b210:	f000 ffbc 	bl	800c18c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b214:	2301      	movs	r3, #1
 800b216:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b218:	f001 ffac 	bl	800d174 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b21c:	f000 fd22 	bl	800bc64 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b220:	f001 ff74 	bl	800d10c <vPortEnterCritical>
 800b224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b226:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b22a:	b25b      	sxtb	r3, r3
 800b22c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b230:	d103      	bne.n	800b23a <xQueueSemaphoreTake+0x14a>
 800b232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b234:	2200      	movs	r2, #0
 800b236:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b23a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b23c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b240:	b25b      	sxtb	r3, r3
 800b242:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b246:	d103      	bne.n	800b250 <xQueueSemaphoreTake+0x160>
 800b248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b24a:	2200      	movs	r2, #0
 800b24c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b250:	f001 ff90 	bl	800d174 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b254:	463a      	mov	r2, r7
 800b256:	f107 030c 	add.w	r3, r7, #12
 800b25a:	4611      	mov	r1, r2
 800b25c:	4618      	mov	r0, r3
 800b25e:	f000 ffab 	bl	800c1b8 <xTaskCheckForTimeOut>
 800b262:	4603      	mov	r3, r0
 800b264:	2b00      	cmp	r3, #0
 800b266:	d132      	bne.n	800b2ce <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b268:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b26a:	f000 f9fa 	bl	800b662 <prvIsQueueEmpty>
 800b26e:	4603      	mov	r3, r0
 800b270:	2b00      	cmp	r3, #0
 800b272:	d026      	beq.n	800b2c2 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d109      	bne.n	800b290 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 800b27c:	f001 ff46 	bl	800d10c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b282:	689b      	ldr	r3, [r3, #8]
 800b284:	4618      	mov	r0, r3
 800b286:	f001 f911 	bl	800c4ac <xTaskPriorityInherit>
 800b28a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800b28c:	f001 ff72 	bl	800d174 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b292:	3324      	adds	r3, #36	; 0x24
 800b294:	683a      	ldr	r2, [r7, #0]
 800b296:	4611      	mov	r1, r2
 800b298:	4618      	mov	r0, r3
 800b29a:	f000 febd 	bl	800c018 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b29e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b2a0:	f000 f98d 	bl	800b5be <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b2a4:	f000 fcec 	bl	800bc80 <xTaskResumeAll>
 800b2a8:	4603      	mov	r3, r0
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	f47f af66 	bne.w	800b17c <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 800b2b0:	4b18      	ldr	r3, [pc, #96]	; (800b314 <xQueueSemaphoreTake+0x224>)
 800b2b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b2b6:	601a      	str	r2, [r3, #0]
 800b2b8:	f3bf 8f4f 	dsb	sy
 800b2bc:	f3bf 8f6f 	isb	sy
 800b2c0:	e75c      	b.n	800b17c <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800b2c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b2c4:	f000 f97b 	bl	800b5be <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b2c8:	f000 fcda 	bl	800bc80 <xTaskResumeAll>
 800b2cc:	e756      	b.n	800b17c <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800b2ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b2d0:	f000 f975 	bl	800b5be <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b2d4:	f000 fcd4 	bl	800bc80 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b2d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b2da:	f000 f9c2 	bl	800b662 <prvIsQueueEmpty>
 800b2de:	4603      	mov	r3, r0
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	f43f af4b 	beq.w	800b17c <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800b2e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d00d      	beq.n	800b308 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 800b2ec:	f001 ff0e 	bl	800d10c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800b2f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b2f2:	f000 f8bc 	bl	800b46e <prvGetDisinheritPriorityAfterTimeout>
 800b2f6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800b2f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2fa:	689b      	ldr	r3, [r3, #8]
 800b2fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b2fe:	4618      	mov	r0, r3
 800b300:	f001 f9ae 	bl	800c660 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800b304:	f001 ff36 	bl	800d174 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b308:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b30a:	4618      	mov	r0, r3
 800b30c:	3738      	adds	r7, #56	; 0x38
 800b30e:	46bd      	mov	sp, r7
 800b310:	bd80      	pop	{r7, pc}
 800b312:	bf00      	nop
 800b314:	e000ed04 	.word	0xe000ed04

0800b318 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b318:	b580      	push	{r7, lr}
 800b31a:	b08e      	sub	sp, #56	; 0x38
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	60f8      	str	r0, [r7, #12]
 800b320:	60b9      	str	r1, [r7, #8]
 800b322:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d10c      	bne.n	800b348 <xQueueReceiveFromISR+0x30>
	__asm volatile
 800b32e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b332:	b672      	cpsid	i
 800b334:	f383 8811 	msr	BASEPRI, r3
 800b338:	f3bf 8f6f 	isb	sy
 800b33c:	f3bf 8f4f 	dsb	sy
 800b340:	b662      	cpsie	i
 800b342:	623b      	str	r3, [r7, #32]
}
 800b344:	bf00      	nop
 800b346:	e7fe      	b.n	800b346 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b348:	68bb      	ldr	r3, [r7, #8]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d103      	bne.n	800b356 <xQueueReceiveFromISR+0x3e>
 800b34e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b352:	2b00      	cmp	r3, #0
 800b354:	d101      	bne.n	800b35a <xQueueReceiveFromISR+0x42>
 800b356:	2301      	movs	r3, #1
 800b358:	e000      	b.n	800b35c <xQueueReceiveFromISR+0x44>
 800b35a:	2300      	movs	r3, #0
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d10c      	bne.n	800b37a <xQueueReceiveFromISR+0x62>
	__asm volatile
 800b360:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b364:	b672      	cpsid	i
 800b366:	f383 8811 	msr	BASEPRI, r3
 800b36a:	f3bf 8f6f 	isb	sy
 800b36e:	f3bf 8f4f 	dsb	sy
 800b372:	b662      	cpsie	i
 800b374:	61fb      	str	r3, [r7, #28]
}
 800b376:	bf00      	nop
 800b378:	e7fe      	b.n	800b378 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b37a:	f001 ffaf 	bl	800d2dc <vPortValidateInterruptPriority>
	__asm volatile
 800b37e:	f3ef 8211 	mrs	r2, BASEPRI
 800b382:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b386:	b672      	cpsid	i
 800b388:	f383 8811 	msr	BASEPRI, r3
 800b38c:	f3bf 8f6f 	isb	sy
 800b390:	f3bf 8f4f 	dsb	sy
 800b394:	b662      	cpsie	i
 800b396:	61ba      	str	r2, [r7, #24]
 800b398:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800b39a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b39c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b39e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3a2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b3a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d02f      	beq.n	800b40a <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800b3aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b3b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b3b4:	68b9      	ldr	r1, [r7, #8]
 800b3b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b3b8:	f000 f8db 	bl	800b572 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b3bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3be:	1e5a      	subs	r2, r3, #1
 800b3c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3c2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800b3c4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b3c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3cc:	d112      	bne.n	800b3f4 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b3ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3d0:	691b      	ldr	r3, [r3, #16]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d016      	beq.n	800b404 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b3d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3d8:	3310      	adds	r3, #16
 800b3da:	4618      	mov	r0, r3
 800b3dc:	f000 fe70 	bl	800c0c0 <xTaskRemoveFromEventList>
 800b3e0:	4603      	mov	r3, r0
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d00e      	beq.n	800b404 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d00b      	beq.n	800b404 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	2201      	movs	r2, #1
 800b3f0:	601a      	str	r2, [r3, #0]
 800b3f2:	e007      	b.n	800b404 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800b3f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b3f8:	3301      	adds	r3, #1
 800b3fa:	b2db      	uxtb	r3, r3
 800b3fc:	b25a      	sxtb	r2, r3
 800b3fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b400:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800b404:	2301      	movs	r3, #1
 800b406:	637b      	str	r3, [r7, #52]	; 0x34
 800b408:	e001      	b.n	800b40e <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 800b40a:	2300      	movs	r3, #0
 800b40c:	637b      	str	r3, [r7, #52]	; 0x34
 800b40e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b410:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b412:	693b      	ldr	r3, [r7, #16]
 800b414:	f383 8811 	msr	BASEPRI, r3
}
 800b418:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b41a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b41c:	4618      	mov	r0, r3
 800b41e:	3738      	adds	r7, #56	; 0x38
 800b420:	46bd      	mov	sp, r7
 800b422:	bd80      	pop	{r7, pc}

0800b424 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800b424:	b580      	push	{r7, lr}
 800b426:	b084      	sub	sp, #16
 800b428:	af00      	add	r7, sp, #0
 800b42a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	2b00      	cmp	r3, #0
 800b434:	d10c      	bne.n	800b450 <vQueueDelete+0x2c>
	__asm volatile
 800b436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b43a:	b672      	cpsid	i
 800b43c:	f383 8811 	msr	BASEPRI, r3
 800b440:	f3bf 8f6f 	isb	sy
 800b444:	f3bf 8f4f 	dsb	sy
 800b448:	b662      	cpsie	i
 800b44a:	60bb      	str	r3, [r7, #8]
}
 800b44c:	bf00      	nop
 800b44e:	e7fe      	b.n	800b44e <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800b450:	68f8      	ldr	r0, [r7, #12]
 800b452:	f000 f95f 	bl	800b714 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d102      	bne.n	800b466 <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 800b460:	68f8      	ldr	r0, [r7, #12]
 800b462:	f002 f849 	bl	800d4f8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800b466:	bf00      	nop
 800b468:	3710      	adds	r7, #16
 800b46a:	46bd      	mov	sp, r7
 800b46c:	bd80      	pop	{r7, pc}

0800b46e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800b46e:	b480      	push	{r7}
 800b470:	b085      	sub	sp, #20
 800b472:	af00      	add	r7, sp, #0
 800b474:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d006      	beq.n	800b48c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800b488:	60fb      	str	r3, [r7, #12]
 800b48a:	e001      	b.n	800b490 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800b48c:	2300      	movs	r3, #0
 800b48e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800b490:	68fb      	ldr	r3, [r7, #12]
	}
 800b492:	4618      	mov	r0, r3
 800b494:	3714      	adds	r7, #20
 800b496:	46bd      	mov	sp, r7
 800b498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b49c:	4770      	bx	lr

0800b49e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b49e:	b580      	push	{r7, lr}
 800b4a0:	b086      	sub	sp, #24
 800b4a2:	af00      	add	r7, sp, #0
 800b4a4:	60f8      	str	r0, [r7, #12]
 800b4a6:	60b9      	str	r1, [r7, #8]
 800b4a8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b4aa:	2300      	movs	r3, #0
 800b4ac:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4b2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d10d      	bne.n	800b4d8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d14d      	bne.n	800b560 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	689b      	ldr	r3, [r3, #8]
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	f001 f857 	bl	800c57c <xTaskPriorityDisinherit>
 800b4ce:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	2200      	movs	r2, #0
 800b4d4:	609a      	str	r2, [r3, #8]
 800b4d6:	e043      	b.n	800b560 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d119      	bne.n	800b512 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	6858      	ldr	r0, [r3, #4]
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4e6:	461a      	mov	r2, r3
 800b4e8:	68b9      	ldr	r1, [r7, #8]
 800b4ea:	f01b f9f9 	bl	80268e0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	685a      	ldr	r2, [r3, #4]
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4f6:	441a      	add	r2, r3
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	685a      	ldr	r2, [r3, #4]
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	689b      	ldr	r3, [r3, #8]
 800b504:	429a      	cmp	r2, r3
 800b506:	d32b      	bcc.n	800b560 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	681a      	ldr	r2, [r3, #0]
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	605a      	str	r2, [r3, #4]
 800b510:	e026      	b.n	800b560 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	68d8      	ldr	r0, [r3, #12]
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b51a:	461a      	mov	r2, r3
 800b51c:	68b9      	ldr	r1, [r7, #8]
 800b51e:	f01b f9df 	bl	80268e0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	68da      	ldr	r2, [r3, #12]
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b52a:	425b      	negs	r3, r3
 800b52c:	441a      	add	r2, r3
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	68da      	ldr	r2, [r3, #12]
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	429a      	cmp	r2, r3
 800b53c:	d207      	bcs.n	800b54e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	689a      	ldr	r2, [r3, #8]
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b546:	425b      	negs	r3, r3
 800b548:	441a      	add	r2, r3
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	2b02      	cmp	r3, #2
 800b552:	d105      	bne.n	800b560 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b554:	693b      	ldr	r3, [r7, #16]
 800b556:	2b00      	cmp	r3, #0
 800b558:	d002      	beq.n	800b560 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b55a:	693b      	ldr	r3, [r7, #16]
 800b55c:	3b01      	subs	r3, #1
 800b55e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b560:	693b      	ldr	r3, [r7, #16]
 800b562:	1c5a      	adds	r2, r3, #1
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b568:	697b      	ldr	r3, [r7, #20]
}
 800b56a:	4618      	mov	r0, r3
 800b56c:	3718      	adds	r7, #24
 800b56e:	46bd      	mov	sp, r7
 800b570:	bd80      	pop	{r7, pc}

0800b572 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b572:	b580      	push	{r7, lr}
 800b574:	b082      	sub	sp, #8
 800b576:	af00      	add	r7, sp, #0
 800b578:	6078      	str	r0, [r7, #4]
 800b57a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b580:	2b00      	cmp	r3, #0
 800b582:	d018      	beq.n	800b5b6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	68da      	ldr	r2, [r3, #12]
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b58c:	441a      	add	r2, r3
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	68da      	ldr	r2, [r3, #12]
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	689b      	ldr	r3, [r3, #8]
 800b59a:	429a      	cmp	r2, r3
 800b59c:	d303      	bcc.n	800b5a6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	681a      	ldr	r2, [r3, #0]
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	68d9      	ldr	r1, [r3, #12]
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5ae:	461a      	mov	r2, r3
 800b5b0:	6838      	ldr	r0, [r7, #0]
 800b5b2:	f01b f995 	bl	80268e0 <memcpy>
	}
}
 800b5b6:	bf00      	nop
 800b5b8:	3708      	adds	r7, #8
 800b5ba:	46bd      	mov	sp, r7
 800b5bc:	bd80      	pop	{r7, pc}

0800b5be <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b5be:	b580      	push	{r7, lr}
 800b5c0:	b084      	sub	sp, #16
 800b5c2:	af00      	add	r7, sp, #0
 800b5c4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b5c6:	f001 fda1 	bl	800d10c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b5d0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b5d2:	e011      	b.n	800b5f8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d012      	beq.n	800b602 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	3324      	adds	r3, #36	; 0x24
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	f000 fd6d 	bl	800c0c0 <xTaskRemoveFromEventList>
 800b5e6:	4603      	mov	r3, r0
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d001      	beq.n	800b5f0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b5ec:	f000 fe4a 	bl	800c284 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b5f0:	7bfb      	ldrb	r3, [r7, #15]
 800b5f2:	3b01      	subs	r3, #1
 800b5f4:	b2db      	uxtb	r3, r3
 800b5f6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b5f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	dce9      	bgt.n	800b5d4 <prvUnlockQueue+0x16>
 800b600:	e000      	b.n	800b604 <prvUnlockQueue+0x46>
					break;
 800b602:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	22ff      	movs	r2, #255	; 0xff
 800b608:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b60c:	f001 fdb2 	bl	800d174 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b610:	f001 fd7c 	bl	800d10c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b61a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b61c:	e011      	b.n	800b642 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	691b      	ldr	r3, [r3, #16]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d012      	beq.n	800b64c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	3310      	adds	r3, #16
 800b62a:	4618      	mov	r0, r3
 800b62c:	f000 fd48 	bl	800c0c0 <xTaskRemoveFromEventList>
 800b630:	4603      	mov	r3, r0
 800b632:	2b00      	cmp	r3, #0
 800b634:	d001      	beq.n	800b63a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b636:	f000 fe25 	bl	800c284 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b63a:	7bbb      	ldrb	r3, [r7, #14]
 800b63c:	3b01      	subs	r3, #1
 800b63e:	b2db      	uxtb	r3, r3
 800b640:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b642:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b646:	2b00      	cmp	r3, #0
 800b648:	dce9      	bgt.n	800b61e <prvUnlockQueue+0x60>
 800b64a:	e000      	b.n	800b64e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b64c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	22ff      	movs	r2, #255	; 0xff
 800b652:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b656:	f001 fd8d 	bl	800d174 <vPortExitCritical>
}
 800b65a:	bf00      	nop
 800b65c:	3710      	adds	r7, #16
 800b65e:	46bd      	mov	sp, r7
 800b660:	bd80      	pop	{r7, pc}

0800b662 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b662:	b580      	push	{r7, lr}
 800b664:	b084      	sub	sp, #16
 800b666:	af00      	add	r7, sp, #0
 800b668:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b66a:	f001 fd4f 	bl	800d10c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b672:	2b00      	cmp	r3, #0
 800b674:	d102      	bne.n	800b67c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b676:	2301      	movs	r3, #1
 800b678:	60fb      	str	r3, [r7, #12]
 800b67a:	e001      	b.n	800b680 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b67c:	2300      	movs	r3, #0
 800b67e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b680:	f001 fd78 	bl	800d174 <vPortExitCritical>

	return xReturn;
 800b684:	68fb      	ldr	r3, [r7, #12]
}
 800b686:	4618      	mov	r0, r3
 800b688:	3710      	adds	r7, #16
 800b68a:	46bd      	mov	sp, r7
 800b68c:	bd80      	pop	{r7, pc}

0800b68e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b68e:	b580      	push	{r7, lr}
 800b690:	b084      	sub	sp, #16
 800b692:	af00      	add	r7, sp, #0
 800b694:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b696:	f001 fd39 	bl	800d10c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6a2:	429a      	cmp	r2, r3
 800b6a4:	d102      	bne.n	800b6ac <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b6a6:	2301      	movs	r3, #1
 800b6a8:	60fb      	str	r3, [r7, #12]
 800b6aa:	e001      	b.n	800b6b0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b6ac:	2300      	movs	r3, #0
 800b6ae:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b6b0:	f001 fd60 	bl	800d174 <vPortExitCritical>

	return xReturn;
 800b6b4:	68fb      	ldr	r3, [r7, #12]
}
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	3710      	adds	r7, #16
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	bd80      	pop	{r7, pc}
	...

0800b6c0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b6c0:	b480      	push	{r7}
 800b6c2:	b085      	sub	sp, #20
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	6078      	str	r0, [r7, #4]
 800b6c8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b6ca:	2300      	movs	r3, #0
 800b6cc:	60fb      	str	r3, [r7, #12]
 800b6ce:	e014      	b.n	800b6fa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b6d0:	4a0f      	ldr	r2, [pc, #60]	; (800b710 <vQueueAddToRegistry+0x50>)
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d10b      	bne.n	800b6f4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b6dc:	490c      	ldr	r1, [pc, #48]	; (800b710 <vQueueAddToRegistry+0x50>)
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	683a      	ldr	r2, [r7, #0]
 800b6e2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b6e6:	4a0a      	ldr	r2, [pc, #40]	; (800b710 <vQueueAddToRegistry+0x50>)
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	00db      	lsls	r3, r3, #3
 800b6ec:	4413      	add	r3, r2
 800b6ee:	687a      	ldr	r2, [r7, #4]
 800b6f0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b6f2:	e006      	b.n	800b702 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	3301      	adds	r3, #1
 800b6f8:	60fb      	str	r3, [r7, #12]
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	2b07      	cmp	r3, #7
 800b6fe:	d9e7      	bls.n	800b6d0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b700:	bf00      	nop
 800b702:	bf00      	nop
 800b704:	3714      	adds	r7, #20
 800b706:	46bd      	mov	sp, r7
 800b708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b70c:	4770      	bx	lr
 800b70e:	bf00      	nop
 800b710:	2000a1dc 	.word	0x2000a1dc

0800b714 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800b714:	b480      	push	{r7}
 800b716:	b085      	sub	sp, #20
 800b718:	af00      	add	r7, sp, #0
 800b71a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b71c:	2300      	movs	r3, #0
 800b71e:	60fb      	str	r3, [r7, #12]
 800b720:	e016      	b.n	800b750 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800b722:	4a10      	ldr	r2, [pc, #64]	; (800b764 <vQueueUnregisterQueue+0x50>)
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	00db      	lsls	r3, r3, #3
 800b728:	4413      	add	r3, r2
 800b72a:	685b      	ldr	r3, [r3, #4]
 800b72c:	687a      	ldr	r2, [r7, #4]
 800b72e:	429a      	cmp	r2, r3
 800b730:	d10b      	bne.n	800b74a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800b732:	4a0c      	ldr	r2, [pc, #48]	; (800b764 <vQueueUnregisterQueue+0x50>)
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	2100      	movs	r1, #0
 800b738:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800b73c:	4a09      	ldr	r2, [pc, #36]	; (800b764 <vQueueUnregisterQueue+0x50>)
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	00db      	lsls	r3, r3, #3
 800b742:	4413      	add	r3, r2
 800b744:	2200      	movs	r2, #0
 800b746:	605a      	str	r2, [r3, #4]
				break;
 800b748:	e006      	b.n	800b758 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	3301      	adds	r3, #1
 800b74e:	60fb      	str	r3, [r7, #12]
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	2b07      	cmp	r3, #7
 800b754:	d9e5      	bls.n	800b722 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800b756:	bf00      	nop
 800b758:	bf00      	nop
 800b75a:	3714      	adds	r7, #20
 800b75c:	46bd      	mov	sp, r7
 800b75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b762:	4770      	bx	lr
 800b764:	2000a1dc 	.word	0x2000a1dc

0800b768 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b768:	b580      	push	{r7, lr}
 800b76a:	b086      	sub	sp, #24
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	60f8      	str	r0, [r7, #12]
 800b770:	60b9      	str	r1, [r7, #8]
 800b772:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b778:	f001 fcc8 	bl	800d10c <vPortEnterCritical>
 800b77c:	697b      	ldr	r3, [r7, #20]
 800b77e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b782:	b25b      	sxtb	r3, r3
 800b784:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b788:	d103      	bne.n	800b792 <vQueueWaitForMessageRestricted+0x2a>
 800b78a:	697b      	ldr	r3, [r7, #20]
 800b78c:	2200      	movs	r2, #0
 800b78e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b792:	697b      	ldr	r3, [r7, #20]
 800b794:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b798:	b25b      	sxtb	r3, r3
 800b79a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b79e:	d103      	bne.n	800b7a8 <vQueueWaitForMessageRestricted+0x40>
 800b7a0:	697b      	ldr	r3, [r7, #20]
 800b7a2:	2200      	movs	r2, #0
 800b7a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b7a8:	f001 fce4 	bl	800d174 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b7ac:	697b      	ldr	r3, [r7, #20]
 800b7ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d106      	bne.n	800b7c2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b7b4:	697b      	ldr	r3, [r7, #20]
 800b7b6:	3324      	adds	r3, #36	; 0x24
 800b7b8:	687a      	ldr	r2, [r7, #4]
 800b7ba:	68b9      	ldr	r1, [r7, #8]
 800b7bc:	4618      	mov	r0, r3
 800b7be:	f000 fc51 	bl	800c064 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b7c2:	6978      	ldr	r0, [r7, #20]
 800b7c4:	f7ff fefb 	bl	800b5be <prvUnlockQueue>
	}
 800b7c8:	bf00      	nop
 800b7ca:	3718      	adds	r7, #24
 800b7cc:	46bd      	mov	sp, r7
 800b7ce:	bd80      	pop	{r7, pc}

0800b7d0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	b08e      	sub	sp, #56	; 0x38
 800b7d4:	af04      	add	r7, sp, #16
 800b7d6:	60f8      	str	r0, [r7, #12]
 800b7d8:	60b9      	str	r1, [r7, #8]
 800b7da:	607a      	str	r2, [r7, #4]
 800b7dc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b7de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d10c      	bne.n	800b7fe <xTaskCreateStatic+0x2e>
	__asm volatile
 800b7e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7e8:	b672      	cpsid	i
 800b7ea:	f383 8811 	msr	BASEPRI, r3
 800b7ee:	f3bf 8f6f 	isb	sy
 800b7f2:	f3bf 8f4f 	dsb	sy
 800b7f6:	b662      	cpsie	i
 800b7f8:	623b      	str	r3, [r7, #32]
}
 800b7fa:	bf00      	nop
 800b7fc:	e7fe      	b.n	800b7fc <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800b7fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b800:	2b00      	cmp	r3, #0
 800b802:	d10c      	bne.n	800b81e <xTaskCreateStatic+0x4e>
	__asm volatile
 800b804:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b808:	b672      	cpsid	i
 800b80a:	f383 8811 	msr	BASEPRI, r3
 800b80e:	f3bf 8f6f 	isb	sy
 800b812:	f3bf 8f4f 	dsb	sy
 800b816:	b662      	cpsie	i
 800b818:	61fb      	str	r3, [r7, #28]
}
 800b81a:	bf00      	nop
 800b81c:	e7fe      	b.n	800b81c <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b81e:	235c      	movs	r3, #92	; 0x5c
 800b820:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b822:	693b      	ldr	r3, [r7, #16]
 800b824:	2b5c      	cmp	r3, #92	; 0x5c
 800b826:	d00c      	beq.n	800b842 <xTaskCreateStatic+0x72>
	__asm volatile
 800b828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b82c:	b672      	cpsid	i
 800b82e:	f383 8811 	msr	BASEPRI, r3
 800b832:	f3bf 8f6f 	isb	sy
 800b836:	f3bf 8f4f 	dsb	sy
 800b83a:	b662      	cpsie	i
 800b83c:	61bb      	str	r3, [r7, #24]
}
 800b83e:	bf00      	nop
 800b840:	e7fe      	b.n	800b840 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b842:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b846:	2b00      	cmp	r3, #0
 800b848:	d01e      	beq.n	800b888 <xTaskCreateStatic+0xb8>
 800b84a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d01b      	beq.n	800b888 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b852:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b856:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b858:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b85a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b85c:	2202      	movs	r2, #2
 800b85e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b862:	2300      	movs	r3, #0
 800b864:	9303      	str	r3, [sp, #12]
 800b866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b868:	9302      	str	r3, [sp, #8]
 800b86a:	f107 0314 	add.w	r3, r7, #20
 800b86e:	9301      	str	r3, [sp, #4]
 800b870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b872:	9300      	str	r3, [sp, #0]
 800b874:	683b      	ldr	r3, [r7, #0]
 800b876:	687a      	ldr	r2, [r7, #4]
 800b878:	68b9      	ldr	r1, [r7, #8]
 800b87a:	68f8      	ldr	r0, [r7, #12]
 800b87c:	f000 f850 	bl	800b920 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b880:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b882:	f000 f8df 	bl	800ba44 <prvAddNewTaskToReadyList>
 800b886:	e001      	b.n	800b88c <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800b888:	2300      	movs	r3, #0
 800b88a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b88c:	697b      	ldr	r3, [r7, #20]
	}
 800b88e:	4618      	mov	r0, r3
 800b890:	3728      	adds	r7, #40	; 0x28
 800b892:	46bd      	mov	sp, r7
 800b894:	bd80      	pop	{r7, pc}

0800b896 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b896:	b580      	push	{r7, lr}
 800b898:	b08c      	sub	sp, #48	; 0x30
 800b89a:	af04      	add	r7, sp, #16
 800b89c:	60f8      	str	r0, [r7, #12]
 800b89e:	60b9      	str	r1, [r7, #8]
 800b8a0:	603b      	str	r3, [r7, #0]
 800b8a2:	4613      	mov	r3, r2
 800b8a4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b8a6:	88fb      	ldrh	r3, [r7, #6]
 800b8a8:	009b      	lsls	r3, r3, #2
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	f001 fd5a 	bl	800d364 <pvPortMalloc>
 800b8b0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b8b2:	697b      	ldr	r3, [r7, #20]
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d00e      	beq.n	800b8d6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b8b8:	205c      	movs	r0, #92	; 0x5c
 800b8ba:	f001 fd53 	bl	800d364 <pvPortMalloc>
 800b8be:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b8c0:	69fb      	ldr	r3, [r7, #28]
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d003      	beq.n	800b8ce <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b8c6:	69fb      	ldr	r3, [r7, #28]
 800b8c8:	697a      	ldr	r2, [r7, #20]
 800b8ca:	631a      	str	r2, [r3, #48]	; 0x30
 800b8cc:	e005      	b.n	800b8da <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b8ce:	6978      	ldr	r0, [r7, #20]
 800b8d0:	f001 fe12 	bl	800d4f8 <vPortFree>
 800b8d4:	e001      	b.n	800b8da <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b8da:	69fb      	ldr	r3, [r7, #28]
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d017      	beq.n	800b910 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b8e0:	69fb      	ldr	r3, [r7, #28]
 800b8e2:	2200      	movs	r2, #0
 800b8e4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b8e8:	88fa      	ldrh	r2, [r7, #6]
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	9303      	str	r3, [sp, #12]
 800b8ee:	69fb      	ldr	r3, [r7, #28]
 800b8f0:	9302      	str	r3, [sp, #8]
 800b8f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8f4:	9301      	str	r3, [sp, #4]
 800b8f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8f8:	9300      	str	r3, [sp, #0]
 800b8fa:	683b      	ldr	r3, [r7, #0]
 800b8fc:	68b9      	ldr	r1, [r7, #8]
 800b8fe:	68f8      	ldr	r0, [r7, #12]
 800b900:	f000 f80e 	bl	800b920 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b904:	69f8      	ldr	r0, [r7, #28]
 800b906:	f000 f89d 	bl	800ba44 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b90a:	2301      	movs	r3, #1
 800b90c:	61bb      	str	r3, [r7, #24]
 800b90e:	e002      	b.n	800b916 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b910:	f04f 33ff 	mov.w	r3, #4294967295
 800b914:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b916:	69bb      	ldr	r3, [r7, #24]
	}
 800b918:	4618      	mov	r0, r3
 800b91a:	3720      	adds	r7, #32
 800b91c:	46bd      	mov	sp, r7
 800b91e:	bd80      	pop	{r7, pc}

0800b920 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b920:	b580      	push	{r7, lr}
 800b922:	b088      	sub	sp, #32
 800b924:	af00      	add	r7, sp, #0
 800b926:	60f8      	str	r0, [r7, #12]
 800b928:	60b9      	str	r1, [r7, #8]
 800b92a:	607a      	str	r2, [r7, #4]
 800b92c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b92e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b930:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	009b      	lsls	r3, r3, #2
 800b936:	461a      	mov	r2, r3
 800b938:	21a5      	movs	r1, #165	; 0xa5
 800b93a:	f01a ffdf 	bl	80268fc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b93e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b940:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b942:	6879      	ldr	r1, [r7, #4]
 800b944:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800b948:	440b      	add	r3, r1
 800b94a:	009b      	lsls	r3, r3, #2
 800b94c:	4413      	add	r3, r2
 800b94e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b950:	69bb      	ldr	r3, [r7, #24]
 800b952:	f023 0307 	bic.w	r3, r3, #7
 800b956:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b958:	69bb      	ldr	r3, [r7, #24]
 800b95a:	f003 0307 	and.w	r3, r3, #7
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d00c      	beq.n	800b97c <prvInitialiseNewTask+0x5c>
	__asm volatile
 800b962:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b966:	b672      	cpsid	i
 800b968:	f383 8811 	msr	BASEPRI, r3
 800b96c:	f3bf 8f6f 	isb	sy
 800b970:	f3bf 8f4f 	dsb	sy
 800b974:	b662      	cpsie	i
 800b976:	617b      	str	r3, [r7, #20]
}
 800b978:	bf00      	nop
 800b97a:	e7fe      	b.n	800b97a <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b97c:	68bb      	ldr	r3, [r7, #8]
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d01f      	beq.n	800b9c2 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b982:	2300      	movs	r3, #0
 800b984:	61fb      	str	r3, [r7, #28]
 800b986:	e012      	b.n	800b9ae <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b988:	68ba      	ldr	r2, [r7, #8]
 800b98a:	69fb      	ldr	r3, [r7, #28]
 800b98c:	4413      	add	r3, r2
 800b98e:	7819      	ldrb	r1, [r3, #0]
 800b990:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b992:	69fb      	ldr	r3, [r7, #28]
 800b994:	4413      	add	r3, r2
 800b996:	3334      	adds	r3, #52	; 0x34
 800b998:	460a      	mov	r2, r1
 800b99a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b99c:	68ba      	ldr	r2, [r7, #8]
 800b99e:	69fb      	ldr	r3, [r7, #28]
 800b9a0:	4413      	add	r3, r2
 800b9a2:	781b      	ldrb	r3, [r3, #0]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d006      	beq.n	800b9b6 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b9a8:	69fb      	ldr	r3, [r7, #28]
 800b9aa:	3301      	adds	r3, #1
 800b9ac:	61fb      	str	r3, [r7, #28]
 800b9ae:	69fb      	ldr	r3, [r7, #28]
 800b9b0:	2b0f      	cmp	r3, #15
 800b9b2:	d9e9      	bls.n	800b988 <prvInitialiseNewTask+0x68>
 800b9b4:	e000      	b.n	800b9b8 <prvInitialiseNewTask+0x98>
			{
				break;
 800b9b6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b9b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9ba:	2200      	movs	r2, #0
 800b9bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b9c0:	e003      	b.n	800b9ca <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b9c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9c4:	2200      	movs	r2, #0
 800b9c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b9ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9cc:	2b37      	cmp	r3, #55	; 0x37
 800b9ce:	d901      	bls.n	800b9d4 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b9d0:	2337      	movs	r3, #55	; 0x37
 800b9d2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b9d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b9d8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b9da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b9de:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b9e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9e2:	2200      	movs	r2, #0
 800b9e4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b9e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9e8:	3304      	adds	r3, #4
 800b9ea:	4618      	mov	r0, r3
 800b9ec:	f7fe fd4c 	bl	800a488 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b9f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9f2:	3318      	adds	r3, #24
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	f7fe fd47 	bl	800a488 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b9fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b9fe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba02:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ba06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba08:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ba0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba0e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ba10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba12:	2200      	movs	r2, #0
 800ba14:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ba16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba18:	2200      	movs	r2, #0
 800ba1a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ba1e:	683a      	ldr	r2, [r7, #0]
 800ba20:	68f9      	ldr	r1, [r7, #12]
 800ba22:	69b8      	ldr	r0, [r7, #24]
 800ba24:	f001 fa66 	bl	800cef4 <pxPortInitialiseStack>
 800ba28:	4602      	mov	r2, r0
 800ba2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba2c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ba2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d002      	beq.n	800ba3a <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ba34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba38:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ba3a:	bf00      	nop
 800ba3c:	3720      	adds	r7, #32
 800ba3e:	46bd      	mov	sp, r7
 800ba40:	bd80      	pop	{r7, pc}
	...

0800ba44 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ba44:	b580      	push	{r7, lr}
 800ba46:	b082      	sub	sp, #8
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ba4c:	f001 fb5e 	bl	800d10c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ba50:	4b2d      	ldr	r3, [pc, #180]	; (800bb08 <prvAddNewTaskToReadyList+0xc4>)
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	3301      	adds	r3, #1
 800ba56:	4a2c      	ldr	r2, [pc, #176]	; (800bb08 <prvAddNewTaskToReadyList+0xc4>)
 800ba58:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ba5a:	4b2c      	ldr	r3, [pc, #176]	; (800bb0c <prvAddNewTaskToReadyList+0xc8>)
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d109      	bne.n	800ba76 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ba62:	4a2a      	ldr	r2, [pc, #168]	; (800bb0c <prvAddNewTaskToReadyList+0xc8>)
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ba68:	4b27      	ldr	r3, [pc, #156]	; (800bb08 <prvAddNewTaskToReadyList+0xc4>)
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	2b01      	cmp	r3, #1
 800ba6e:	d110      	bne.n	800ba92 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ba70:	f000 fc2e 	bl	800c2d0 <prvInitialiseTaskLists>
 800ba74:	e00d      	b.n	800ba92 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ba76:	4b26      	ldr	r3, [pc, #152]	; (800bb10 <prvAddNewTaskToReadyList+0xcc>)
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d109      	bne.n	800ba92 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ba7e:	4b23      	ldr	r3, [pc, #140]	; (800bb0c <prvAddNewTaskToReadyList+0xc8>)
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba88:	429a      	cmp	r2, r3
 800ba8a:	d802      	bhi.n	800ba92 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ba8c:	4a1f      	ldr	r2, [pc, #124]	; (800bb0c <prvAddNewTaskToReadyList+0xc8>)
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ba92:	4b20      	ldr	r3, [pc, #128]	; (800bb14 <prvAddNewTaskToReadyList+0xd0>)
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	3301      	adds	r3, #1
 800ba98:	4a1e      	ldr	r2, [pc, #120]	; (800bb14 <prvAddNewTaskToReadyList+0xd0>)
 800ba9a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ba9c:	4b1d      	ldr	r3, [pc, #116]	; (800bb14 <prvAddNewTaskToReadyList+0xd0>)
 800ba9e:	681a      	ldr	r2, [r3, #0]
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800baa8:	4b1b      	ldr	r3, [pc, #108]	; (800bb18 <prvAddNewTaskToReadyList+0xd4>)
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	429a      	cmp	r2, r3
 800baae:	d903      	bls.n	800bab8 <prvAddNewTaskToReadyList+0x74>
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bab4:	4a18      	ldr	r2, [pc, #96]	; (800bb18 <prvAddNewTaskToReadyList+0xd4>)
 800bab6:	6013      	str	r3, [r2, #0]
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800babc:	4613      	mov	r3, r2
 800babe:	009b      	lsls	r3, r3, #2
 800bac0:	4413      	add	r3, r2
 800bac2:	009b      	lsls	r3, r3, #2
 800bac4:	4a15      	ldr	r2, [pc, #84]	; (800bb1c <prvAddNewTaskToReadyList+0xd8>)
 800bac6:	441a      	add	r2, r3
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	3304      	adds	r3, #4
 800bacc:	4619      	mov	r1, r3
 800bace:	4610      	mov	r0, r2
 800bad0:	f7fe fce7 	bl	800a4a2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800bad4:	f001 fb4e 	bl	800d174 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800bad8:	4b0d      	ldr	r3, [pc, #52]	; (800bb10 <prvAddNewTaskToReadyList+0xcc>)
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	2b00      	cmp	r3, #0
 800bade:	d00e      	beq.n	800bafe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800bae0:	4b0a      	ldr	r3, [pc, #40]	; (800bb0c <prvAddNewTaskToReadyList+0xc8>)
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baea:	429a      	cmp	r2, r3
 800baec:	d207      	bcs.n	800bafe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800baee:	4b0c      	ldr	r3, [pc, #48]	; (800bb20 <prvAddNewTaskToReadyList+0xdc>)
 800baf0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800baf4:	601a      	str	r2, [r3, #0]
 800baf6:	f3bf 8f4f 	dsb	sy
 800bafa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bafe:	bf00      	nop
 800bb00:	3708      	adds	r7, #8
 800bb02:	46bd      	mov	sp, r7
 800bb04:	bd80      	pop	{r7, pc}
 800bb06:	bf00      	nop
 800bb08:	2000a6f0 	.word	0x2000a6f0
 800bb0c:	2000a21c 	.word	0x2000a21c
 800bb10:	2000a6fc 	.word	0x2000a6fc
 800bb14:	2000a70c 	.word	0x2000a70c
 800bb18:	2000a6f8 	.word	0x2000a6f8
 800bb1c:	2000a220 	.word	0x2000a220
 800bb20:	e000ed04 	.word	0xe000ed04

0800bb24 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800bb24:	b580      	push	{r7, lr}
 800bb26:	b084      	sub	sp, #16
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800bb2c:	2300      	movs	r3, #0
 800bb2e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d019      	beq.n	800bb6a <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800bb36:	4b14      	ldr	r3, [pc, #80]	; (800bb88 <vTaskDelay+0x64>)
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d00c      	beq.n	800bb58 <vTaskDelay+0x34>
	__asm volatile
 800bb3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb42:	b672      	cpsid	i
 800bb44:	f383 8811 	msr	BASEPRI, r3
 800bb48:	f3bf 8f6f 	isb	sy
 800bb4c:	f3bf 8f4f 	dsb	sy
 800bb50:	b662      	cpsie	i
 800bb52:	60bb      	str	r3, [r7, #8]
}
 800bb54:	bf00      	nop
 800bb56:	e7fe      	b.n	800bb56 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800bb58:	f000 f884 	bl	800bc64 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800bb5c:	2100      	movs	r1, #0
 800bb5e:	6878      	ldr	r0, [r7, #4]
 800bb60:	f000 fe18 	bl	800c794 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800bb64:	f000 f88c 	bl	800bc80 <xTaskResumeAll>
 800bb68:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d107      	bne.n	800bb80 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800bb70:	4b06      	ldr	r3, [pc, #24]	; (800bb8c <vTaskDelay+0x68>)
 800bb72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb76:	601a      	str	r2, [r3, #0]
 800bb78:	f3bf 8f4f 	dsb	sy
 800bb7c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bb80:	bf00      	nop
 800bb82:	3710      	adds	r7, #16
 800bb84:	46bd      	mov	sp, r7
 800bb86:	bd80      	pop	{r7, pc}
 800bb88:	2000a718 	.word	0x2000a718
 800bb8c:	e000ed04 	.word	0xe000ed04

0800bb90 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800bb90:	b580      	push	{r7, lr}
 800bb92:	b08a      	sub	sp, #40	; 0x28
 800bb94:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800bb96:	2300      	movs	r3, #0
 800bb98:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800bb9a:	2300      	movs	r3, #0
 800bb9c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800bb9e:	463a      	mov	r2, r7
 800bba0:	1d39      	adds	r1, r7, #4
 800bba2:	f107 0308 	add.w	r3, r7, #8
 800bba6:	4618      	mov	r0, r3
 800bba8:	f7fe fc1a 	bl	800a3e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800bbac:	6839      	ldr	r1, [r7, #0]
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	68ba      	ldr	r2, [r7, #8]
 800bbb2:	9202      	str	r2, [sp, #8]
 800bbb4:	9301      	str	r3, [sp, #4]
 800bbb6:	2300      	movs	r3, #0
 800bbb8:	9300      	str	r3, [sp, #0]
 800bbba:	2300      	movs	r3, #0
 800bbbc:	460a      	mov	r2, r1
 800bbbe:	4923      	ldr	r1, [pc, #140]	; (800bc4c <vTaskStartScheduler+0xbc>)
 800bbc0:	4823      	ldr	r0, [pc, #140]	; (800bc50 <vTaskStartScheduler+0xc0>)
 800bbc2:	f7ff fe05 	bl	800b7d0 <xTaskCreateStatic>
 800bbc6:	4603      	mov	r3, r0
 800bbc8:	4a22      	ldr	r2, [pc, #136]	; (800bc54 <vTaskStartScheduler+0xc4>)
 800bbca:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800bbcc:	4b21      	ldr	r3, [pc, #132]	; (800bc54 <vTaskStartScheduler+0xc4>)
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d002      	beq.n	800bbda <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800bbd4:	2301      	movs	r3, #1
 800bbd6:	617b      	str	r3, [r7, #20]
 800bbd8:	e001      	b.n	800bbde <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800bbda:	2300      	movs	r3, #0
 800bbdc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800bbde:	697b      	ldr	r3, [r7, #20]
 800bbe0:	2b01      	cmp	r3, #1
 800bbe2:	d102      	bne.n	800bbea <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800bbe4:	f000 fe2a 	bl	800c83c <xTimerCreateTimerTask>
 800bbe8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800bbea:	697b      	ldr	r3, [r7, #20]
 800bbec:	2b01      	cmp	r3, #1
 800bbee:	d118      	bne.n	800bc22 <vTaskStartScheduler+0x92>
	__asm volatile
 800bbf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbf4:	b672      	cpsid	i
 800bbf6:	f383 8811 	msr	BASEPRI, r3
 800bbfa:	f3bf 8f6f 	isb	sy
 800bbfe:	f3bf 8f4f 	dsb	sy
 800bc02:	b662      	cpsie	i
 800bc04:	613b      	str	r3, [r7, #16]
}
 800bc06:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800bc08:	4b13      	ldr	r3, [pc, #76]	; (800bc58 <vTaskStartScheduler+0xc8>)
 800bc0a:	f04f 32ff 	mov.w	r2, #4294967295
 800bc0e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800bc10:	4b12      	ldr	r3, [pc, #72]	; (800bc5c <vTaskStartScheduler+0xcc>)
 800bc12:	2201      	movs	r2, #1
 800bc14:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800bc16:	4b12      	ldr	r3, [pc, #72]	; (800bc60 <vTaskStartScheduler+0xd0>)
 800bc18:	2200      	movs	r2, #0
 800bc1a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800bc1c:	f001 f9f8 	bl	800d010 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800bc20:	e010      	b.n	800bc44 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800bc22:	697b      	ldr	r3, [r7, #20]
 800bc24:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc28:	d10c      	bne.n	800bc44 <vTaskStartScheduler+0xb4>
	__asm volatile
 800bc2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc2e:	b672      	cpsid	i
 800bc30:	f383 8811 	msr	BASEPRI, r3
 800bc34:	f3bf 8f6f 	isb	sy
 800bc38:	f3bf 8f4f 	dsb	sy
 800bc3c:	b662      	cpsie	i
 800bc3e:	60fb      	str	r3, [r7, #12]
}
 800bc40:	bf00      	nop
 800bc42:	e7fe      	b.n	800bc42 <vTaskStartScheduler+0xb2>
}
 800bc44:	bf00      	nop
 800bc46:	3718      	adds	r7, #24
 800bc48:	46bd      	mov	sp, r7
 800bc4a:	bd80      	pop	{r7, pc}
 800bc4c:	080279ac 	.word	0x080279ac
 800bc50:	0800c29d 	.word	0x0800c29d
 800bc54:	2000a714 	.word	0x2000a714
 800bc58:	2000a710 	.word	0x2000a710
 800bc5c:	2000a6fc 	.word	0x2000a6fc
 800bc60:	2000a6f4 	.word	0x2000a6f4

0800bc64 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800bc64:	b480      	push	{r7}
 800bc66:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800bc68:	4b04      	ldr	r3, [pc, #16]	; (800bc7c <vTaskSuspendAll+0x18>)
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	3301      	adds	r3, #1
 800bc6e:	4a03      	ldr	r2, [pc, #12]	; (800bc7c <vTaskSuspendAll+0x18>)
 800bc70:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800bc72:	bf00      	nop
 800bc74:	46bd      	mov	sp, r7
 800bc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7a:	4770      	bx	lr
 800bc7c:	2000a718 	.word	0x2000a718

0800bc80 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800bc80:	b580      	push	{r7, lr}
 800bc82:	b084      	sub	sp, #16
 800bc84:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800bc86:	2300      	movs	r3, #0
 800bc88:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800bc8a:	2300      	movs	r3, #0
 800bc8c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800bc8e:	4b43      	ldr	r3, [pc, #268]	; (800bd9c <xTaskResumeAll+0x11c>)
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d10c      	bne.n	800bcb0 <xTaskResumeAll+0x30>
	__asm volatile
 800bc96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc9a:	b672      	cpsid	i
 800bc9c:	f383 8811 	msr	BASEPRI, r3
 800bca0:	f3bf 8f6f 	isb	sy
 800bca4:	f3bf 8f4f 	dsb	sy
 800bca8:	b662      	cpsie	i
 800bcaa:	603b      	str	r3, [r7, #0]
}
 800bcac:	bf00      	nop
 800bcae:	e7fe      	b.n	800bcae <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800bcb0:	f001 fa2c 	bl	800d10c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800bcb4:	4b39      	ldr	r3, [pc, #228]	; (800bd9c <xTaskResumeAll+0x11c>)
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	3b01      	subs	r3, #1
 800bcba:	4a38      	ldr	r2, [pc, #224]	; (800bd9c <xTaskResumeAll+0x11c>)
 800bcbc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bcbe:	4b37      	ldr	r3, [pc, #220]	; (800bd9c <xTaskResumeAll+0x11c>)
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d162      	bne.n	800bd8c <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800bcc6:	4b36      	ldr	r3, [pc, #216]	; (800bda0 <xTaskResumeAll+0x120>)
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d05e      	beq.n	800bd8c <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bcce:	e02f      	b.n	800bd30 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bcd0:	4b34      	ldr	r3, [pc, #208]	; (800bda4 <xTaskResumeAll+0x124>)
 800bcd2:	68db      	ldr	r3, [r3, #12]
 800bcd4:	68db      	ldr	r3, [r3, #12]
 800bcd6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	3318      	adds	r3, #24
 800bcdc:	4618      	mov	r0, r3
 800bcde:	f7fe fc3d 	bl	800a55c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	3304      	adds	r3, #4
 800bce6:	4618      	mov	r0, r3
 800bce8:	f7fe fc38 	bl	800a55c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcf0:	4b2d      	ldr	r3, [pc, #180]	; (800bda8 <xTaskResumeAll+0x128>)
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	429a      	cmp	r2, r3
 800bcf6:	d903      	bls.n	800bd00 <xTaskResumeAll+0x80>
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcfc:	4a2a      	ldr	r2, [pc, #168]	; (800bda8 <xTaskResumeAll+0x128>)
 800bcfe:	6013      	str	r3, [r2, #0]
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd04:	4613      	mov	r3, r2
 800bd06:	009b      	lsls	r3, r3, #2
 800bd08:	4413      	add	r3, r2
 800bd0a:	009b      	lsls	r3, r3, #2
 800bd0c:	4a27      	ldr	r2, [pc, #156]	; (800bdac <xTaskResumeAll+0x12c>)
 800bd0e:	441a      	add	r2, r3
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	3304      	adds	r3, #4
 800bd14:	4619      	mov	r1, r3
 800bd16:	4610      	mov	r0, r2
 800bd18:	f7fe fbc3 	bl	800a4a2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd20:	4b23      	ldr	r3, [pc, #140]	; (800bdb0 <xTaskResumeAll+0x130>)
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd26:	429a      	cmp	r2, r3
 800bd28:	d302      	bcc.n	800bd30 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800bd2a:	4b22      	ldr	r3, [pc, #136]	; (800bdb4 <xTaskResumeAll+0x134>)
 800bd2c:	2201      	movs	r2, #1
 800bd2e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bd30:	4b1c      	ldr	r3, [pc, #112]	; (800bda4 <xTaskResumeAll+0x124>)
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d1cb      	bne.n	800bcd0 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d001      	beq.n	800bd42 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800bd3e:	f000 fb67 	bl	800c410 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800bd42:	4b1d      	ldr	r3, [pc, #116]	; (800bdb8 <xTaskResumeAll+0x138>)
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d010      	beq.n	800bd70 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800bd4e:	f000 f847 	bl	800bde0 <xTaskIncrementTick>
 800bd52:	4603      	mov	r3, r0
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d002      	beq.n	800bd5e <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800bd58:	4b16      	ldr	r3, [pc, #88]	; (800bdb4 <xTaskResumeAll+0x134>)
 800bd5a:	2201      	movs	r2, #1
 800bd5c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	3b01      	subs	r3, #1
 800bd62:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d1f1      	bne.n	800bd4e <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800bd6a:	4b13      	ldr	r3, [pc, #76]	; (800bdb8 <xTaskResumeAll+0x138>)
 800bd6c:	2200      	movs	r2, #0
 800bd6e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800bd70:	4b10      	ldr	r3, [pc, #64]	; (800bdb4 <xTaskResumeAll+0x134>)
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d009      	beq.n	800bd8c <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800bd78:	2301      	movs	r3, #1
 800bd7a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800bd7c:	4b0f      	ldr	r3, [pc, #60]	; (800bdbc <xTaskResumeAll+0x13c>)
 800bd7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd82:	601a      	str	r2, [r3, #0]
 800bd84:	f3bf 8f4f 	dsb	sy
 800bd88:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bd8c:	f001 f9f2 	bl	800d174 <vPortExitCritical>

	return xAlreadyYielded;
 800bd90:	68bb      	ldr	r3, [r7, #8]
}
 800bd92:	4618      	mov	r0, r3
 800bd94:	3710      	adds	r7, #16
 800bd96:	46bd      	mov	sp, r7
 800bd98:	bd80      	pop	{r7, pc}
 800bd9a:	bf00      	nop
 800bd9c:	2000a718 	.word	0x2000a718
 800bda0:	2000a6f0 	.word	0x2000a6f0
 800bda4:	2000a6b0 	.word	0x2000a6b0
 800bda8:	2000a6f8 	.word	0x2000a6f8
 800bdac:	2000a220 	.word	0x2000a220
 800bdb0:	2000a21c 	.word	0x2000a21c
 800bdb4:	2000a704 	.word	0x2000a704
 800bdb8:	2000a700 	.word	0x2000a700
 800bdbc:	e000ed04 	.word	0xe000ed04

0800bdc0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800bdc0:	b480      	push	{r7}
 800bdc2:	b083      	sub	sp, #12
 800bdc4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800bdc6:	4b05      	ldr	r3, [pc, #20]	; (800bddc <xTaskGetTickCount+0x1c>)
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800bdcc:	687b      	ldr	r3, [r7, #4]
}
 800bdce:	4618      	mov	r0, r3
 800bdd0:	370c      	adds	r7, #12
 800bdd2:	46bd      	mov	sp, r7
 800bdd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd8:	4770      	bx	lr
 800bdda:	bf00      	nop
 800bddc:	2000a6f4 	.word	0x2000a6f4

0800bde0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800bde0:	b580      	push	{r7, lr}
 800bde2:	b086      	sub	sp, #24
 800bde4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800bde6:	2300      	movs	r3, #0
 800bde8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bdea:	4b50      	ldr	r3, [pc, #320]	; (800bf2c <xTaskIncrementTick+0x14c>)
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	f040 808b 	bne.w	800bf0a <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bdf4:	4b4e      	ldr	r3, [pc, #312]	; (800bf30 <xTaskIncrementTick+0x150>)
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	3301      	adds	r3, #1
 800bdfa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800bdfc:	4a4c      	ldr	r2, [pc, #304]	; (800bf30 <xTaskIncrementTick+0x150>)
 800bdfe:	693b      	ldr	r3, [r7, #16]
 800be00:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800be02:	693b      	ldr	r3, [r7, #16]
 800be04:	2b00      	cmp	r3, #0
 800be06:	d122      	bne.n	800be4e <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800be08:	4b4a      	ldr	r3, [pc, #296]	; (800bf34 <xTaskIncrementTick+0x154>)
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d00c      	beq.n	800be2c <xTaskIncrementTick+0x4c>
	__asm volatile
 800be12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be16:	b672      	cpsid	i
 800be18:	f383 8811 	msr	BASEPRI, r3
 800be1c:	f3bf 8f6f 	isb	sy
 800be20:	f3bf 8f4f 	dsb	sy
 800be24:	b662      	cpsie	i
 800be26:	603b      	str	r3, [r7, #0]
}
 800be28:	bf00      	nop
 800be2a:	e7fe      	b.n	800be2a <xTaskIncrementTick+0x4a>
 800be2c:	4b41      	ldr	r3, [pc, #260]	; (800bf34 <xTaskIncrementTick+0x154>)
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	60fb      	str	r3, [r7, #12]
 800be32:	4b41      	ldr	r3, [pc, #260]	; (800bf38 <xTaskIncrementTick+0x158>)
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	4a3f      	ldr	r2, [pc, #252]	; (800bf34 <xTaskIncrementTick+0x154>)
 800be38:	6013      	str	r3, [r2, #0]
 800be3a:	4a3f      	ldr	r2, [pc, #252]	; (800bf38 <xTaskIncrementTick+0x158>)
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	6013      	str	r3, [r2, #0]
 800be40:	4b3e      	ldr	r3, [pc, #248]	; (800bf3c <xTaskIncrementTick+0x15c>)
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	3301      	adds	r3, #1
 800be46:	4a3d      	ldr	r2, [pc, #244]	; (800bf3c <xTaskIncrementTick+0x15c>)
 800be48:	6013      	str	r3, [r2, #0]
 800be4a:	f000 fae1 	bl	800c410 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800be4e:	4b3c      	ldr	r3, [pc, #240]	; (800bf40 <xTaskIncrementTick+0x160>)
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	693a      	ldr	r2, [r7, #16]
 800be54:	429a      	cmp	r2, r3
 800be56:	d349      	bcc.n	800beec <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800be58:	4b36      	ldr	r3, [pc, #216]	; (800bf34 <xTaskIncrementTick+0x154>)
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d104      	bne.n	800be6c <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800be62:	4b37      	ldr	r3, [pc, #220]	; (800bf40 <xTaskIncrementTick+0x160>)
 800be64:	f04f 32ff 	mov.w	r2, #4294967295
 800be68:	601a      	str	r2, [r3, #0]
					break;
 800be6a:	e03f      	b.n	800beec <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be6c:	4b31      	ldr	r3, [pc, #196]	; (800bf34 <xTaskIncrementTick+0x154>)
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	68db      	ldr	r3, [r3, #12]
 800be72:	68db      	ldr	r3, [r3, #12]
 800be74:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800be76:	68bb      	ldr	r3, [r7, #8]
 800be78:	685b      	ldr	r3, [r3, #4]
 800be7a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800be7c:	693a      	ldr	r2, [r7, #16]
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	429a      	cmp	r2, r3
 800be82:	d203      	bcs.n	800be8c <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800be84:	4a2e      	ldr	r2, [pc, #184]	; (800bf40 <xTaskIncrementTick+0x160>)
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800be8a:	e02f      	b.n	800beec <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800be8c:	68bb      	ldr	r3, [r7, #8]
 800be8e:	3304      	adds	r3, #4
 800be90:	4618      	mov	r0, r3
 800be92:	f7fe fb63 	bl	800a55c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800be96:	68bb      	ldr	r3, [r7, #8]
 800be98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d004      	beq.n	800bea8 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800be9e:	68bb      	ldr	r3, [r7, #8]
 800bea0:	3318      	adds	r3, #24
 800bea2:	4618      	mov	r0, r3
 800bea4:	f7fe fb5a 	bl	800a55c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bea8:	68bb      	ldr	r3, [r7, #8]
 800beaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800beac:	4b25      	ldr	r3, [pc, #148]	; (800bf44 <xTaskIncrementTick+0x164>)
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	429a      	cmp	r2, r3
 800beb2:	d903      	bls.n	800bebc <xTaskIncrementTick+0xdc>
 800beb4:	68bb      	ldr	r3, [r7, #8]
 800beb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800beb8:	4a22      	ldr	r2, [pc, #136]	; (800bf44 <xTaskIncrementTick+0x164>)
 800beba:	6013      	str	r3, [r2, #0]
 800bebc:	68bb      	ldr	r3, [r7, #8]
 800bebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bec0:	4613      	mov	r3, r2
 800bec2:	009b      	lsls	r3, r3, #2
 800bec4:	4413      	add	r3, r2
 800bec6:	009b      	lsls	r3, r3, #2
 800bec8:	4a1f      	ldr	r2, [pc, #124]	; (800bf48 <xTaskIncrementTick+0x168>)
 800beca:	441a      	add	r2, r3
 800becc:	68bb      	ldr	r3, [r7, #8]
 800bece:	3304      	adds	r3, #4
 800bed0:	4619      	mov	r1, r3
 800bed2:	4610      	mov	r0, r2
 800bed4:	f7fe fae5 	bl	800a4a2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bed8:	68bb      	ldr	r3, [r7, #8]
 800beda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bedc:	4b1b      	ldr	r3, [pc, #108]	; (800bf4c <xTaskIncrementTick+0x16c>)
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bee2:	429a      	cmp	r2, r3
 800bee4:	d3b8      	bcc.n	800be58 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800bee6:	2301      	movs	r3, #1
 800bee8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800beea:	e7b5      	b.n	800be58 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800beec:	4b17      	ldr	r3, [pc, #92]	; (800bf4c <xTaskIncrementTick+0x16c>)
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bef2:	4915      	ldr	r1, [pc, #84]	; (800bf48 <xTaskIncrementTick+0x168>)
 800bef4:	4613      	mov	r3, r2
 800bef6:	009b      	lsls	r3, r3, #2
 800bef8:	4413      	add	r3, r2
 800befa:	009b      	lsls	r3, r3, #2
 800befc:	440b      	add	r3, r1
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	2b01      	cmp	r3, #1
 800bf02:	d907      	bls.n	800bf14 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800bf04:	2301      	movs	r3, #1
 800bf06:	617b      	str	r3, [r7, #20]
 800bf08:	e004      	b.n	800bf14 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800bf0a:	4b11      	ldr	r3, [pc, #68]	; (800bf50 <xTaskIncrementTick+0x170>)
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	3301      	adds	r3, #1
 800bf10:	4a0f      	ldr	r2, [pc, #60]	; (800bf50 <xTaskIncrementTick+0x170>)
 800bf12:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800bf14:	4b0f      	ldr	r3, [pc, #60]	; (800bf54 <xTaskIncrementTick+0x174>)
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d001      	beq.n	800bf20 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800bf1c:	2301      	movs	r3, #1
 800bf1e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800bf20:	697b      	ldr	r3, [r7, #20]
}
 800bf22:	4618      	mov	r0, r3
 800bf24:	3718      	adds	r7, #24
 800bf26:	46bd      	mov	sp, r7
 800bf28:	bd80      	pop	{r7, pc}
 800bf2a:	bf00      	nop
 800bf2c:	2000a718 	.word	0x2000a718
 800bf30:	2000a6f4 	.word	0x2000a6f4
 800bf34:	2000a6a8 	.word	0x2000a6a8
 800bf38:	2000a6ac 	.word	0x2000a6ac
 800bf3c:	2000a708 	.word	0x2000a708
 800bf40:	2000a710 	.word	0x2000a710
 800bf44:	2000a6f8 	.word	0x2000a6f8
 800bf48:	2000a220 	.word	0x2000a220
 800bf4c:	2000a21c 	.word	0x2000a21c
 800bf50:	2000a700 	.word	0x2000a700
 800bf54:	2000a704 	.word	0x2000a704

0800bf58 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bf58:	b480      	push	{r7}
 800bf5a:	b085      	sub	sp, #20
 800bf5c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bf5e:	4b29      	ldr	r3, [pc, #164]	; (800c004 <vTaskSwitchContext+0xac>)
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d003      	beq.n	800bf6e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bf66:	4b28      	ldr	r3, [pc, #160]	; (800c008 <vTaskSwitchContext+0xb0>)
 800bf68:	2201      	movs	r2, #1
 800bf6a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bf6c:	e043      	b.n	800bff6 <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
 800bf6e:	4b26      	ldr	r3, [pc, #152]	; (800c008 <vTaskSwitchContext+0xb0>)
 800bf70:	2200      	movs	r2, #0
 800bf72:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf74:	4b25      	ldr	r3, [pc, #148]	; (800c00c <vTaskSwitchContext+0xb4>)
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	60fb      	str	r3, [r7, #12]
 800bf7a:	e012      	b.n	800bfa2 <vTaskSwitchContext+0x4a>
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d10c      	bne.n	800bf9c <vTaskSwitchContext+0x44>
	__asm volatile
 800bf82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf86:	b672      	cpsid	i
 800bf88:	f383 8811 	msr	BASEPRI, r3
 800bf8c:	f3bf 8f6f 	isb	sy
 800bf90:	f3bf 8f4f 	dsb	sy
 800bf94:	b662      	cpsie	i
 800bf96:	607b      	str	r3, [r7, #4]
}
 800bf98:	bf00      	nop
 800bf9a:	e7fe      	b.n	800bf9a <vTaskSwitchContext+0x42>
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	3b01      	subs	r3, #1
 800bfa0:	60fb      	str	r3, [r7, #12]
 800bfa2:	491b      	ldr	r1, [pc, #108]	; (800c010 <vTaskSwitchContext+0xb8>)
 800bfa4:	68fa      	ldr	r2, [r7, #12]
 800bfa6:	4613      	mov	r3, r2
 800bfa8:	009b      	lsls	r3, r3, #2
 800bfaa:	4413      	add	r3, r2
 800bfac:	009b      	lsls	r3, r3, #2
 800bfae:	440b      	add	r3, r1
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d0e2      	beq.n	800bf7c <vTaskSwitchContext+0x24>
 800bfb6:	68fa      	ldr	r2, [r7, #12]
 800bfb8:	4613      	mov	r3, r2
 800bfba:	009b      	lsls	r3, r3, #2
 800bfbc:	4413      	add	r3, r2
 800bfbe:	009b      	lsls	r3, r3, #2
 800bfc0:	4a13      	ldr	r2, [pc, #76]	; (800c010 <vTaskSwitchContext+0xb8>)
 800bfc2:	4413      	add	r3, r2
 800bfc4:	60bb      	str	r3, [r7, #8]
 800bfc6:	68bb      	ldr	r3, [r7, #8]
 800bfc8:	685b      	ldr	r3, [r3, #4]
 800bfca:	685a      	ldr	r2, [r3, #4]
 800bfcc:	68bb      	ldr	r3, [r7, #8]
 800bfce:	605a      	str	r2, [r3, #4]
 800bfd0:	68bb      	ldr	r3, [r7, #8]
 800bfd2:	685a      	ldr	r2, [r3, #4]
 800bfd4:	68bb      	ldr	r3, [r7, #8]
 800bfd6:	3308      	adds	r3, #8
 800bfd8:	429a      	cmp	r2, r3
 800bfda:	d104      	bne.n	800bfe6 <vTaskSwitchContext+0x8e>
 800bfdc:	68bb      	ldr	r3, [r7, #8]
 800bfde:	685b      	ldr	r3, [r3, #4]
 800bfe0:	685a      	ldr	r2, [r3, #4]
 800bfe2:	68bb      	ldr	r3, [r7, #8]
 800bfe4:	605a      	str	r2, [r3, #4]
 800bfe6:	68bb      	ldr	r3, [r7, #8]
 800bfe8:	685b      	ldr	r3, [r3, #4]
 800bfea:	68db      	ldr	r3, [r3, #12]
 800bfec:	4a09      	ldr	r2, [pc, #36]	; (800c014 <vTaskSwitchContext+0xbc>)
 800bfee:	6013      	str	r3, [r2, #0]
 800bff0:	4a06      	ldr	r2, [pc, #24]	; (800c00c <vTaskSwitchContext+0xb4>)
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	6013      	str	r3, [r2, #0]
}
 800bff6:	bf00      	nop
 800bff8:	3714      	adds	r7, #20
 800bffa:	46bd      	mov	sp, r7
 800bffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c000:	4770      	bx	lr
 800c002:	bf00      	nop
 800c004:	2000a718 	.word	0x2000a718
 800c008:	2000a704 	.word	0x2000a704
 800c00c:	2000a6f8 	.word	0x2000a6f8
 800c010:	2000a220 	.word	0x2000a220
 800c014:	2000a21c 	.word	0x2000a21c

0800c018 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c018:	b580      	push	{r7, lr}
 800c01a:	b084      	sub	sp, #16
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	6078      	str	r0, [r7, #4]
 800c020:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	2b00      	cmp	r3, #0
 800c026:	d10c      	bne.n	800c042 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800c028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c02c:	b672      	cpsid	i
 800c02e:	f383 8811 	msr	BASEPRI, r3
 800c032:	f3bf 8f6f 	isb	sy
 800c036:	f3bf 8f4f 	dsb	sy
 800c03a:	b662      	cpsie	i
 800c03c:	60fb      	str	r3, [r7, #12]
}
 800c03e:	bf00      	nop
 800c040:	e7fe      	b.n	800c040 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c042:	4b07      	ldr	r3, [pc, #28]	; (800c060 <vTaskPlaceOnEventList+0x48>)
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	3318      	adds	r3, #24
 800c048:	4619      	mov	r1, r3
 800c04a:	6878      	ldr	r0, [r7, #4]
 800c04c:	f7fe fa4d 	bl	800a4ea <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c050:	2101      	movs	r1, #1
 800c052:	6838      	ldr	r0, [r7, #0]
 800c054:	f000 fb9e 	bl	800c794 <prvAddCurrentTaskToDelayedList>
}
 800c058:	bf00      	nop
 800c05a:	3710      	adds	r7, #16
 800c05c:	46bd      	mov	sp, r7
 800c05e:	bd80      	pop	{r7, pc}
 800c060:	2000a21c 	.word	0x2000a21c

0800c064 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c064:	b580      	push	{r7, lr}
 800c066:	b086      	sub	sp, #24
 800c068:	af00      	add	r7, sp, #0
 800c06a:	60f8      	str	r0, [r7, #12]
 800c06c:	60b9      	str	r1, [r7, #8]
 800c06e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	2b00      	cmp	r3, #0
 800c074:	d10c      	bne.n	800c090 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800c076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c07a:	b672      	cpsid	i
 800c07c:	f383 8811 	msr	BASEPRI, r3
 800c080:	f3bf 8f6f 	isb	sy
 800c084:	f3bf 8f4f 	dsb	sy
 800c088:	b662      	cpsie	i
 800c08a:	617b      	str	r3, [r7, #20]
}
 800c08c:	bf00      	nop
 800c08e:	e7fe      	b.n	800c08e <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c090:	4b0a      	ldr	r3, [pc, #40]	; (800c0bc <vTaskPlaceOnEventListRestricted+0x58>)
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	3318      	adds	r3, #24
 800c096:	4619      	mov	r1, r3
 800c098:	68f8      	ldr	r0, [r7, #12]
 800c09a:	f7fe fa02 	bl	800a4a2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d002      	beq.n	800c0aa <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800c0a4:	f04f 33ff 	mov.w	r3, #4294967295
 800c0a8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c0aa:	6879      	ldr	r1, [r7, #4]
 800c0ac:	68b8      	ldr	r0, [r7, #8]
 800c0ae:	f000 fb71 	bl	800c794 <prvAddCurrentTaskToDelayedList>
	}
 800c0b2:	bf00      	nop
 800c0b4:	3718      	adds	r7, #24
 800c0b6:	46bd      	mov	sp, r7
 800c0b8:	bd80      	pop	{r7, pc}
 800c0ba:	bf00      	nop
 800c0bc:	2000a21c 	.word	0x2000a21c

0800c0c0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c0c0:	b580      	push	{r7, lr}
 800c0c2:	b086      	sub	sp, #24
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	68db      	ldr	r3, [r3, #12]
 800c0cc:	68db      	ldr	r3, [r3, #12]
 800c0ce:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c0d0:	693b      	ldr	r3, [r7, #16]
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d10c      	bne.n	800c0f0 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800c0d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0da:	b672      	cpsid	i
 800c0dc:	f383 8811 	msr	BASEPRI, r3
 800c0e0:	f3bf 8f6f 	isb	sy
 800c0e4:	f3bf 8f4f 	dsb	sy
 800c0e8:	b662      	cpsie	i
 800c0ea:	60fb      	str	r3, [r7, #12]
}
 800c0ec:	bf00      	nop
 800c0ee:	e7fe      	b.n	800c0ee <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c0f0:	693b      	ldr	r3, [r7, #16]
 800c0f2:	3318      	adds	r3, #24
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	f7fe fa31 	bl	800a55c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c0fa:	4b1e      	ldr	r3, [pc, #120]	; (800c174 <xTaskRemoveFromEventList+0xb4>)
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d11d      	bne.n	800c13e <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c102:	693b      	ldr	r3, [r7, #16]
 800c104:	3304      	adds	r3, #4
 800c106:	4618      	mov	r0, r3
 800c108:	f7fe fa28 	bl	800a55c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c10c:	693b      	ldr	r3, [r7, #16]
 800c10e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c110:	4b19      	ldr	r3, [pc, #100]	; (800c178 <xTaskRemoveFromEventList+0xb8>)
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	429a      	cmp	r2, r3
 800c116:	d903      	bls.n	800c120 <xTaskRemoveFromEventList+0x60>
 800c118:	693b      	ldr	r3, [r7, #16]
 800c11a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c11c:	4a16      	ldr	r2, [pc, #88]	; (800c178 <xTaskRemoveFromEventList+0xb8>)
 800c11e:	6013      	str	r3, [r2, #0]
 800c120:	693b      	ldr	r3, [r7, #16]
 800c122:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c124:	4613      	mov	r3, r2
 800c126:	009b      	lsls	r3, r3, #2
 800c128:	4413      	add	r3, r2
 800c12a:	009b      	lsls	r3, r3, #2
 800c12c:	4a13      	ldr	r2, [pc, #76]	; (800c17c <xTaskRemoveFromEventList+0xbc>)
 800c12e:	441a      	add	r2, r3
 800c130:	693b      	ldr	r3, [r7, #16]
 800c132:	3304      	adds	r3, #4
 800c134:	4619      	mov	r1, r3
 800c136:	4610      	mov	r0, r2
 800c138:	f7fe f9b3 	bl	800a4a2 <vListInsertEnd>
 800c13c:	e005      	b.n	800c14a <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c13e:	693b      	ldr	r3, [r7, #16]
 800c140:	3318      	adds	r3, #24
 800c142:	4619      	mov	r1, r3
 800c144:	480e      	ldr	r0, [pc, #56]	; (800c180 <xTaskRemoveFromEventList+0xc0>)
 800c146:	f7fe f9ac 	bl	800a4a2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c14a:	693b      	ldr	r3, [r7, #16]
 800c14c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c14e:	4b0d      	ldr	r3, [pc, #52]	; (800c184 <xTaskRemoveFromEventList+0xc4>)
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c154:	429a      	cmp	r2, r3
 800c156:	d905      	bls.n	800c164 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c158:	2301      	movs	r3, #1
 800c15a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c15c:	4b0a      	ldr	r3, [pc, #40]	; (800c188 <xTaskRemoveFromEventList+0xc8>)
 800c15e:	2201      	movs	r2, #1
 800c160:	601a      	str	r2, [r3, #0]
 800c162:	e001      	b.n	800c168 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800c164:	2300      	movs	r3, #0
 800c166:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c168:	697b      	ldr	r3, [r7, #20]
}
 800c16a:	4618      	mov	r0, r3
 800c16c:	3718      	adds	r7, #24
 800c16e:	46bd      	mov	sp, r7
 800c170:	bd80      	pop	{r7, pc}
 800c172:	bf00      	nop
 800c174:	2000a718 	.word	0x2000a718
 800c178:	2000a6f8 	.word	0x2000a6f8
 800c17c:	2000a220 	.word	0x2000a220
 800c180:	2000a6b0 	.word	0x2000a6b0
 800c184:	2000a21c 	.word	0x2000a21c
 800c188:	2000a704 	.word	0x2000a704

0800c18c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c18c:	b480      	push	{r7}
 800c18e:	b083      	sub	sp, #12
 800c190:	af00      	add	r7, sp, #0
 800c192:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c194:	4b06      	ldr	r3, [pc, #24]	; (800c1b0 <vTaskInternalSetTimeOutState+0x24>)
 800c196:	681a      	ldr	r2, [r3, #0]
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c19c:	4b05      	ldr	r3, [pc, #20]	; (800c1b4 <vTaskInternalSetTimeOutState+0x28>)
 800c19e:	681a      	ldr	r2, [r3, #0]
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	605a      	str	r2, [r3, #4]
}
 800c1a4:	bf00      	nop
 800c1a6:	370c      	adds	r7, #12
 800c1a8:	46bd      	mov	sp, r7
 800c1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ae:	4770      	bx	lr
 800c1b0:	2000a708 	.word	0x2000a708
 800c1b4:	2000a6f4 	.word	0x2000a6f4

0800c1b8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c1b8:	b580      	push	{r7, lr}
 800c1ba:	b088      	sub	sp, #32
 800c1bc:	af00      	add	r7, sp, #0
 800c1be:	6078      	str	r0, [r7, #4]
 800c1c0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d10c      	bne.n	800c1e2 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800c1c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1cc:	b672      	cpsid	i
 800c1ce:	f383 8811 	msr	BASEPRI, r3
 800c1d2:	f3bf 8f6f 	isb	sy
 800c1d6:	f3bf 8f4f 	dsb	sy
 800c1da:	b662      	cpsie	i
 800c1dc:	613b      	str	r3, [r7, #16]
}
 800c1de:	bf00      	nop
 800c1e0:	e7fe      	b.n	800c1e0 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800c1e2:	683b      	ldr	r3, [r7, #0]
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d10c      	bne.n	800c202 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800c1e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1ec:	b672      	cpsid	i
 800c1ee:	f383 8811 	msr	BASEPRI, r3
 800c1f2:	f3bf 8f6f 	isb	sy
 800c1f6:	f3bf 8f4f 	dsb	sy
 800c1fa:	b662      	cpsie	i
 800c1fc:	60fb      	str	r3, [r7, #12]
}
 800c1fe:	bf00      	nop
 800c200:	e7fe      	b.n	800c200 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800c202:	f000 ff83 	bl	800d10c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c206:	4b1d      	ldr	r3, [pc, #116]	; (800c27c <xTaskCheckForTimeOut+0xc4>)
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	685b      	ldr	r3, [r3, #4]
 800c210:	69ba      	ldr	r2, [r7, #24]
 800c212:	1ad3      	subs	r3, r2, r3
 800c214:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c216:	683b      	ldr	r3, [r7, #0]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c21e:	d102      	bne.n	800c226 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c220:	2300      	movs	r3, #0
 800c222:	61fb      	str	r3, [r7, #28]
 800c224:	e023      	b.n	800c26e <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	681a      	ldr	r2, [r3, #0]
 800c22a:	4b15      	ldr	r3, [pc, #84]	; (800c280 <xTaskCheckForTimeOut+0xc8>)
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	429a      	cmp	r2, r3
 800c230:	d007      	beq.n	800c242 <xTaskCheckForTimeOut+0x8a>
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	685b      	ldr	r3, [r3, #4]
 800c236:	69ba      	ldr	r2, [r7, #24]
 800c238:	429a      	cmp	r2, r3
 800c23a:	d302      	bcc.n	800c242 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c23c:	2301      	movs	r3, #1
 800c23e:	61fb      	str	r3, [r7, #28]
 800c240:	e015      	b.n	800c26e <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c242:	683b      	ldr	r3, [r7, #0]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	697a      	ldr	r2, [r7, #20]
 800c248:	429a      	cmp	r2, r3
 800c24a:	d20b      	bcs.n	800c264 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c24c:	683b      	ldr	r3, [r7, #0]
 800c24e:	681a      	ldr	r2, [r3, #0]
 800c250:	697b      	ldr	r3, [r7, #20]
 800c252:	1ad2      	subs	r2, r2, r3
 800c254:	683b      	ldr	r3, [r7, #0]
 800c256:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c258:	6878      	ldr	r0, [r7, #4]
 800c25a:	f7ff ff97 	bl	800c18c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c25e:	2300      	movs	r3, #0
 800c260:	61fb      	str	r3, [r7, #28]
 800c262:	e004      	b.n	800c26e <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800c264:	683b      	ldr	r3, [r7, #0]
 800c266:	2200      	movs	r2, #0
 800c268:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c26a:	2301      	movs	r3, #1
 800c26c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c26e:	f000 ff81 	bl	800d174 <vPortExitCritical>

	return xReturn;
 800c272:	69fb      	ldr	r3, [r7, #28]
}
 800c274:	4618      	mov	r0, r3
 800c276:	3720      	adds	r7, #32
 800c278:	46bd      	mov	sp, r7
 800c27a:	bd80      	pop	{r7, pc}
 800c27c:	2000a6f4 	.word	0x2000a6f4
 800c280:	2000a708 	.word	0x2000a708

0800c284 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c284:	b480      	push	{r7}
 800c286:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c288:	4b03      	ldr	r3, [pc, #12]	; (800c298 <vTaskMissedYield+0x14>)
 800c28a:	2201      	movs	r2, #1
 800c28c:	601a      	str	r2, [r3, #0]
}
 800c28e:	bf00      	nop
 800c290:	46bd      	mov	sp, r7
 800c292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c296:	4770      	bx	lr
 800c298:	2000a704 	.word	0x2000a704

0800c29c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c29c:	b580      	push	{r7, lr}
 800c29e:	b082      	sub	sp, #8
 800c2a0:	af00      	add	r7, sp, #0
 800c2a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c2a4:	f000 f854 	bl	800c350 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c2a8:	4b07      	ldr	r3, [pc, #28]	; (800c2c8 <prvIdleTask+0x2c>)
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	2b01      	cmp	r3, #1
 800c2ae:	d907      	bls.n	800c2c0 <prvIdleTask+0x24>
			{
				taskYIELD();
 800c2b0:	4b06      	ldr	r3, [pc, #24]	; (800c2cc <prvIdleTask+0x30>)
 800c2b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c2b6:	601a      	str	r2, [r3, #0]
 800c2b8:	f3bf 8f4f 	dsb	sy
 800c2bc:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800c2c0:	f7f4 f990 	bl	80005e4 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800c2c4:	e7ee      	b.n	800c2a4 <prvIdleTask+0x8>
 800c2c6:	bf00      	nop
 800c2c8:	2000a220 	.word	0x2000a220
 800c2cc:	e000ed04 	.word	0xe000ed04

0800c2d0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c2d0:	b580      	push	{r7, lr}
 800c2d2:	b082      	sub	sp, #8
 800c2d4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c2d6:	2300      	movs	r3, #0
 800c2d8:	607b      	str	r3, [r7, #4]
 800c2da:	e00c      	b.n	800c2f6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c2dc:	687a      	ldr	r2, [r7, #4]
 800c2de:	4613      	mov	r3, r2
 800c2e0:	009b      	lsls	r3, r3, #2
 800c2e2:	4413      	add	r3, r2
 800c2e4:	009b      	lsls	r3, r3, #2
 800c2e6:	4a12      	ldr	r2, [pc, #72]	; (800c330 <prvInitialiseTaskLists+0x60>)
 800c2e8:	4413      	add	r3, r2
 800c2ea:	4618      	mov	r0, r3
 800c2ec:	f7fe f8ac 	bl	800a448 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	3301      	adds	r3, #1
 800c2f4:	607b      	str	r3, [r7, #4]
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	2b37      	cmp	r3, #55	; 0x37
 800c2fa:	d9ef      	bls.n	800c2dc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c2fc:	480d      	ldr	r0, [pc, #52]	; (800c334 <prvInitialiseTaskLists+0x64>)
 800c2fe:	f7fe f8a3 	bl	800a448 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c302:	480d      	ldr	r0, [pc, #52]	; (800c338 <prvInitialiseTaskLists+0x68>)
 800c304:	f7fe f8a0 	bl	800a448 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c308:	480c      	ldr	r0, [pc, #48]	; (800c33c <prvInitialiseTaskLists+0x6c>)
 800c30a:	f7fe f89d 	bl	800a448 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c30e:	480c      	ldr	r0, [pc, #48]	; (800c340 <prvInitialiseTaskLists+0x70>)
 800c310:	f7fe f89a 	bl	800a448 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c314:	480b      	ldr	r0, [pc, #44]	; (800c344 <prvInitialiseTaskLists+0x74>)
 800c316:	f7fe f897 	bl	800a448 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c31a:	4b0b      	ldr	r3, [pc, #44]	; (800c348 <prvInitialiseTaskLists+0x78>)
 800c31c:	4a05      	ldr	r2, [pc, #20]	; (800c334 <prvInitialiseTaskLists+0x64>)
 800c31e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c320:	4b0a      	ldr	r3, [pc, #40]	; (800c34c <prvInitialiseTaskLists+0x7c>)
 800c322:	4a05      	ldr	r2, [pc, #20]	; (800c338 <prvInitialiseTaskLists+0x68>)
 800c324:	601a      	str	r2, [r3, #0]
}
 800c326:	bf00      	nop
 800c328:	3708      	adds	r7, #8
 800c32a:	46bd      	mov	sp, r7
 800c32c:	bd80      	pop	{r7, pc}
 800c32e:	bf00      	nop
 800c330:	2000a220 	.word	0x2000a220
 800c334:	2000a680 	.word	0x2000a680
 800c338:	2000a694 	.word	0x2000a694
 800c33c:	2000a6b0 	.word	0x2000a6b0
 800c340:	2000a6c4 	.word	0x2000a6c4
 800c344:	2000a6dc 	.word	0x2000a6dc
 800c348:	2000a6a8 	.word	0x2000a6a8
 800c34c:	2000a6ac 	.word	0x2000a6ac

0800c350 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c350:	b580      	push	{r7, lr}
 800c352:	b082      	sub	sp, #8
 800c354:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c356:	e019      	b.n	800c38c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c358:	f000 fed8 	bl	800d10c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c35c:	4b10      	ldr	r3, [pc, #64]	; (800c3a0 <prvCheckTasksWaitingTermination+0x50>)
 800c35e:	68db      	ldr	r3, [r3, #12]
 800c360:	68db      	ldr	r3, [r3, #12]
 800c362:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	3304      	adds	r3, #4
 800c368:	4618      	mov	r0, r3
 800c36a:	f7fe f8f7 	bl	800a55c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c36e:	4b0d      	ldr	r3, [pc, #52]	; (800c3a4 <prvCheckTasksWaitingTermination+0x54>)
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	3b01      	subs	r3, #1
 800c374:	4a0b      	ldr	r2, [pc, #44]	; (800c3a4 <prvCheckTasksWaitingTermination+0x54>)
 800c376:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c378:	4b0b      	ldr	r3, [pc, #44]	; (800c3a8 <prvCheckTasksWaitingTermination+0x58>)
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	3b01      	subs	r3, #1
 800c37e:	4a0a      	ldr	r2, [pc, #40]	; (800c3a8 <prvCheckTasksWaitingTermination+0x58>)
 800c380:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c382:	f000 fef7 	bl	800d174 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c386:	6878      	ldr	r0, [r7, #4]
 800c388:	f000 f810 	bl	800c3ac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c38c:	4b06      	ldr	r3, [pc, #24]	; (800c3a8 <prvCheckTasksWaitingTermination+0x58>)
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	2b00      	cmp	r3, #0
 800c392:	d1e1      	bne.n	800c358 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c394:	bf00      	nop
 800c396:	bf00      	nop
 800c398:	3708      	adds	r7, #8
 800c39a:	46bd      	mov	sp, r7
 800c39c:	bd80      	pop	{r7, pc}
 800c39e:	bf00      	nop
 800c3a0:	2000a6c4 	.word	0x2000a6c4
 800c3a4:	2000a6f0 	.word	0x2000a6f0
 800c3a8:	2000a6d8 	.word	0x2000a6d8

0800c3ac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c3ac:	b580      	push	{r7, lr}
 800c3ae:	b084      	sub	sp, #16
 800c3b0:	af00      	add	r7, sp, #0
 800c3b2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d108      	bne.n	800c3d0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3c2:	4618      	mov	r0, r3
 800c3c4:	f001 f898 	bl	800d4f8 <vPortFree>
				vPortFree( pxTCB );
 800c3c8:	6878      	ldr	r0, [r7, #4]
 800c3ca:	f001 f895 	bl	800d4f8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c3ce:	e01a      	b.n	800c406 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c3d6:	2b01      	cmp	r3, #1
 800c3d8:	d103      	bne.n	800c3e2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800c3da:	6878      	ldr	r0, [r7, #4]
 800c3dc:	f001 f88c 	bl	800d4f8 <vPortFree>
	}
 800c3e0:	e011      	b.n	800c406 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c3e8:	2b02      	cmp	r3, #2
 800c3ea:	d00c      	beq.n	800c406 <prvDeleteTCB+0x5a>
	__asm volatile
 800c3ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3f0:	b672      	cpsid	i
 800c3f2:	f383 8811 	msr	BASEPRI, r3
 800c3f6:	f3bf 8f6f 	isb	sy
 800c3fa:	f3bf 8f4f 	dsb	sy
 800c3fe:	b662      	cpsie	i
 800c400:	60fb      	str	r3, [r7, #12]
}
 800c402:	bf00      	nop
 800c404:	e7fe      	b.n	800c404 <prvDeleteTCB+0x58>
	}
 800c406:	bf00      	nop
 800c408:	3710      	adds	r7, #16
 800c40a:	46bd      	mov	sp, r7
 800c40c:	bd80      	pop	{r7, pc}
	...

0800c410 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c410:	b480      	push	{r7}
 800c412:	b083      	sub	sp, #12
 800c414:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c416:	4b0c      	ldr	r3, [pc, #48]	; (800c448 <prvResetNextTaskUnblockTime+0x38>)
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d104      	bne.n	800c42a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c420:	4b0a      	ldr	r3, [pc, #40]	; (800c44c <prvResetNextTaskUnblockTime+0x3c>)
 800c422:	f04f 32ff 	mov.w	r2, #4294967295
 800c426:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c428:	e008      	b.n	800c43c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c42a:	4b07      	ldr	r3, [pc, #28]	; (800c448 <prvResetNextTaskUnblockTime+0x38>)
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	68db      	ldr	r3, [r3, #12]
 800c430:	68db      	ldr	r3, [r3, #12]
 800c432:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	685b      	ldr	r3, [r3, #4]
 800c438:	4a04      	ldr	r2, [pc, #16]	; (800c44c <prvResetNextTaskUnblockTime+0x3c>)
 800c43a:	6013      	str	r3, [r2, #0]
}
 800c43c:	bf00      	nop
 800c43e:	370c      	adds	r7, #12
 800c440:	46bd      	mov	sp, r7
 800c442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c446:	4770      	bx	lr
 800c448:	2000a6a8 	.word	0x2000a6a8
 800c44c:	2000a710 	.word	0x2000a710

0800c450 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800c450:	b480      	push	{r7}
 800c452:	b083      	sub	sp, #12
 800c454:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800c456:	4b05      	ldr	r3, [pc, #20]	; (800c46c <xTaskGetCurrentTaskHandle+0x1c>)
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800c45c:	687b      	ldr	r3, [r7, #4]
	}
 800c45e:	4618      	mov	r0, r3
 800c460:	370c      	adds	r7, #12
 800c462:	46bd      	mov	sp, r7
 800c464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c468:	4770      	bx	lr
 800c46a:	bf00      	nop
 800c46c:	2000a21c 	.word	0x2000a21c

0800c470 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c470:	b480      	push	{r7}
 800c472:	b083      	sub	sp, #12
 800c474:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c476:	4b0b      	ldr	r3, [pc, #44]	; (800c4a4 <xTaskGetSchedulerState+0x34>)
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d102      	bne.n	800c484 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c47e:	2301      	movs	r3, #1
 800c480:	607b      	str	r3, [r7, #4]
 800c482:	e008      	b.n	800c496 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c484:	4b08      	ldr	r3, [pc, #32]	; (800c4a8 <xTaskGetSchedulerState+0x38>)
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d102      	bne.n	800c492 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c48c:	2302      	movs	r3, #2
 800c48e:	607b      	str	r3, [r7, #4]
 800c490:	e001      	b.n	800c496 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c492:	2300      	movs	r3, #0
 800c494:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c496:	687b      	ldr	r3, [r7, #4]
	}
 800c498:	4618      	mov	r0, r3
 800c49a:	370c      	adds	r7, #12
 800c49c:	46bd      	mov	sp, r7
 800c49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a2:	4770      	bx	lr
 800c4a4:	2000a6fc 	.word	0x2000a6fc
 800c4a8:	2000a718 	.word	0x2000a718

0800c4ac <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800c4ac:	b580      	push	{r7, lr}
 800c4ae:	b084      	sub	sp, #16
 800c4b0:	af00      	add	r7, sp, #0
 800c4b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800c4b8:	2300      	movs	r3, #0
 800c4ba:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d051      	beq.n	800c566 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800c4c2:	68bb      	ldr	r3, [r7, #8]
 800c4c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4c6:	4b2a      	ldr	r3, [pc, #168]	; (800c570 <xTaskPriorityInherit+0xc4>)
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4cc:	429a      	cmp	r2, r3
 800c4ce:	d241      	bcs.n	800c554 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c4d0:	68bb      	ldr	r3, [r7, #8]
 800c4d2:	699b      	ldr	r3, [r3, #24]
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	db06      	blt.n	800c4e6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c4d8:	4b25      	ldr	r3, [pc, #148]	; (800c570 <xTaskPriorityInherit+0xc4>)
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4de:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c4e2:	68bb      	ldr	r3, [r7, #8]
 800c4e4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800c4e6:	68bb      	ldr	r3, [r7, #8]
 800c4e8:	6959      	ldr	r1, [r3, #20]
 800c4ea:	68bb      	ldr	r3, [r7, #8]
 800c4ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4ee:	4613      	mov	r3, r2
 800c4f0:	009b      	lsls	r3, r3, #2
 800c4f2:	4413      	add	r3, r2
 800c4f4:	009b      	lsls	r3, r3, #2
 800c4f6:	4a1f      	ldr	r2, [pc, #124]	; (800c574 <xTaskPriorityInherit+0xc8>)
 800c4f8:	4413      	add	r3, r2
 800c4fa:	4299      	cmp	r1, r3
 800c4fc:	d122      	bne.n	800c544 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c4fe:	68bb      	ldr	r3, [r7, #8]
 800c500:	3304      	adds	r3, #4
 800c502:	4618      	mov	r0, r3
 800c504:	f7fe f82a 	bl	800a55c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c508:	4b19      	ldr	r3, [pc, #100]	; (800c570 <xTaskPriorityInherit+0xc4>)
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c50e:	68bb      	ldr	r3, [r7, #8]
 800c510:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800c512:	68bb      	ldr	r3, [r7, #8]
 800c514:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c516:	4b18      	ldr	r3, [pc, #96]	; (800c578 <xTaskPriorityInherit+0xcc>)
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	429a      	cmp	r2, r3
 800c51c:	d903      	bls.n	800c526 <xTaskPriorityInherit+0x7a>
 800c51e:	68bb      	ldr	r3, [r7, #8]
 800c520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c522:	4a15      	ldr	r2, [pc, #84]	; (800c578 <xTaskPriorityInherit+0xcc>)
 800c524:	6013      	str	r3, [r2, #0]
 800c526:	68bb      	ldr	r3, [r7, #8]
 800c528:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c52a:	4613      	mov	r3, r2
 800c52c:	009b      	lsls	r3, r3, #2
 800c52e:	4413      	add	r3, r2
 800c530:	009b      	lsls	r3, r3, #2
 800c532:	4a10      	ldr	r2, [pc, #64]	; (800c574 <xTaskPriorityInherit+0xc8>)
 800c534:	441a      	add	r2, r3
 800c536:	68bb      	ldr	r3, [r7, #8]
 800c538:	3304      	adds	r3, #4
 800c53a:	4619      	mov	r1, r3
 800c53c:	4610      	mov	r0, r2
 800c53e:	f7fd ffb0 	bl	800a4a2 <vListInsertEnd>
 800c542:	e004      	b.n	800c54e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c544:	4b0a      	ldr	r3, [pc, #40]	; (800c570 <xTaskPriorityInherit+0xc4>)
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c54a:	68bb      	ldr	r3, [r7, #8]
 800c54c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800c54e:	2301      	movs	r3, #1
 800c550:	60fb      	str	r3, [r7, #12]
 800c552:	e008      	b.n	800c566 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800c554:	68bb      	ldr	r3, [r7, #8]
 800c556:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c558:	4b05      	ldr	r3, [pc, #20]	; (800c570 <xTaskPriorityInherit+0xc4>)
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c55e:	429a      	cmp	r2, r3
 800c560:	d201      	bcs.n	800c566 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800c562:	2301      	movs	r3, #1
 800c564:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c566:	68fb      	ldr	r3, [r7, #12]
	}
 800c568:	4618      	mov	r0, r3
 800c56a:	3710      	adds	r7, #16
 800c56c:	46bd      	mov	sp, r7
 800c56e:	bd80      	pop	{r7, pc}
 800c570:	2000a21c 	.word	0x2000a21c
 800c574:	2000a220 	.word	0x2000a220
 800c578:	2000a6f8 	.word	0x2000a6f8

0800c57c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c57c:	b580      	push	{r7, lr}
 800c57e:	b086      	sub	sp, #24
 800c580:	af00      	add	r7, sp, #0
 800c582:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c588:	2300      	movs	r3, #0
 800c58a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d05a      	beq.n	800c648 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c592:	4b30      	ldr	r3, [pc, #192]	; (800c654 <xTaskPriorityDisinherit+0xd8>)
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	693a      	ldr	r2, [r7, #16]
 800c598:	429a      	cmp	r2, r3
 800c59a:	d00c      	beq.n	800c5b6 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800c59c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5a0:	b672      	cpsid	i
 800c5a2:	f383 8811 	msr	BASEPRI, r3
 800c5a6:	f3bf 8f6f 	isb	sy
 800c5aa:	f3bf 8f4f 	dsb	sy
 800c5ae:	b662      	cpsie	i
 800c5b0:	60fb      	str	r3, [r7, #12]
}
 800c5b2:	bf00      	nop
 800c5b4:	e7fe      	b.n	800c5b4 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800c5b6:	693b      	ldr	r3, [r7, #16]
 800c5b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d10c      	bne.n	800c5d8 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800c5be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5c2:	b672      	cpsid	i
 800c5c4:	f383 8811 	msr	BASEPRI, r3
 800c5c8:	f3bf 8f6f 	isb	sy
 800c5cc:	f3bf 8f4f 	dsb	sy
 800c5d0:	b662      	cpsie	i
 800c5d2:	60bb      	str	r3, [r7, #8]
}
 800c5d4:	bf00      	nop
 800c5d6:	e7fe      	b.n	800c5d6 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800c5d8:	693b      	ldr	r3, [r7, #16]
 800c5da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c5dc:	1e5a      	subs	r2, r3, #1
 800c5de:	693b      	ldr	r3, [r7, #16]
 800c5e0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c5e2:	693b      	ldr	r3, [r7, #16]
 800c5e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5e6:	693b      	ldr	r3, [r7, #16]
 800c5e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c5ea:	429a      	cmp	r2, r3
 800c5ec:	d02c      	beq.n	800c648 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c5ee:	693b      	ldr	r3, [r7, #16]
 800c5f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d128      	bne.n	800c648 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c5f6:	693b      	ldr	r3, [r7, #16]
 800c5f8:	3304      	adds	r3, #4
 800c5fa:	4618      	mov	r0, r3
 800c5fc:	f7fd ffae 	bl	800a55c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c600:	693b      	ldr	r3, [r7, #16]
 800c602:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c604:	693b      	ldr	r3, [r7, #16]
 800c606:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c608:	693b      	ldr	r3, [r7, #16]
 800c60a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c60c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c610:	693b      	ldr	r3, [r7, #16]
 800c612:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c614:	693b      	ldr	r3, [r7, #16]
 800c616:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c618:	4b0f      	ldr	r3, [pc, #60]	; (800c658 <xTaskPriorityDisinherit+0xdc>)
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	429a      	cmp	r2, r3
 800c61e:	d903      	bls.n	800c628 <xTaskPriorityDisinherit+0xac>
 800c620:	693b      	ldr	r3, [r7, #16]
 800c622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c624:	4a0c      	ldr	r2, [pc, #48]	; (800c658 <xTaskPriorityDisinherit+0xdc>)
 800c626:	6013      	str	r3, [r2, #0]
 800c628:	693b      	ldr	r3, [r7, #16]
 800c62a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c62c:	4613      	mov	r3, r2
 800c62e:	009b      	lsls	r3, r3, #2
 800c630:	4413      	add	r3, r2
 800c632:	009b      	lsls	r3, r3, #2
 800c634:	4a09      	ldr	r2, [pc, #36]	; (800c65c <xTaskPriorityDisinherit+0xe0>)
 800c636:	441a      	add	r2, r3
 800c638:	693b      	ldr	r3, [r7, #16]
 800c63a:	3304      	adds	r3, #4
 800c63c:	4619      	mov	r1, r3
 800c63e:	4610      	mov	r0, r2
 800c640:	f7fd ff2f 	bl	800a4a2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c644:	2301      	movs	r3, #1
 800c646:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c648:	697b      	ldr	r3, [r7, #20]
	}
 800c64a:	4618      	mov	r0, r3
 800c64c:	3718      	adds	r7, #24
 800c64e:	46bd      	mov	sp, r7
 800c650:	bd80      	pop	{r7, pc}
 800c652:	bf00      	nop
 800c654:	2000a21c 	.word	0x2000a21c
 800c658:	2000a6f8 	.word	0x2000a6f8
 800c65c:	2000a220 	.word	0x2000a220

0800c660 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800c660:	b580      	push	{r7, lr}
 800c662:	b088      	sub	sp, #32
 800c664:	af00      	add	r7, sp, #0
 800c666:	6078      	str	r0, [r7, #4]
 800c668:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800c66e:	2301      	movs	r3, #1
 800c670:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	2b00      	cmp	r3, #0
 800c676:	d06e      	beq.n	800c756 <vTaskPriorityDisinheritAfterTimeout+0xf6>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800c678:	69bb      	ldr	r3, [r7, #24]
 800c67a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d10c      	bne.n	800c69a <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 800c680:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c684:	b672      	cpsid	i
 800c686:	f383 8811 	msr	BASEPRI, r3
 800c68a:	f3bf 8f6f 	isb	sy
 800c68e:	f3bf 8f4f 	dsb	sy
 800c692:	b662      	cpsie	i
 800c694:	60fb      	str	r3, [r7, #12]
}
 800c696:	bf00      	nop
 800c698:	e7fe      	b.n	800c698 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c69a:	69bb      	ldr	r3, [r7, #24]
 800c69c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c69e:	683a      	ldr	r2, [r7, #0]
 800c6a0:	429a      	cmp	r2, r3
 800c6a2:	d902      	bls.n	800c6aa <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800c6a4:	683b      	ldr	r3, [r7, #0]
 800c6a6:	61fb      	str	r3, [r7, #28]
 800c6a8:	e002      	b.n	800c6b0 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800c6aa:	69bb      	ldr	r3, [r7, #24]
 800c6ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c6ae:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800c6b0:	69bb      	ldr	r3, [r7, #24]
 800c6b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6b4:	69fa      	ldr	r2, [r7, #28]
 800c6b6:	429a      	cmp	r2, r3
 800c6b8:	d04d      	beq.n	800c756 <vTaskPriorityDisinheritAfterTimeout+0xf6>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c6ba:	69bb      	ldr	r3, [r7, #24]
 800c6bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c6be:	697a      	ldr	r2, [r7, #20]
 800c6c0:	429a      	cmp	r2, r3
 800c6c2:	d148      	bne.n	800c756 <vTaskPriorityDisinheritAfterTimeout+0xf6>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800c6c4:	4b26      	ldr	r3, [pc, #152]	; (800c760 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	69ba      	ldr	r2, [r7, #24]
 800c6ca:	429a      	cmp	r2, r3
 800c6cc:	d10c      	bne.n	800c6e8 <vTaskPriorityDisinheritAfterTimeout+0x88>
	__asm volatile
 800c6ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6d2:	b672      	cpsid	i
 800c6d4:	f383 8811 	msr	BASEPRI, r3
 800c6d8:	f3bf 8f6f 	isb	sy
 800c6dc:	f3bf 8f4f 	dsb	sy
 800c6e0:	b662      	cpsie	i
 800c6e2:	60bb      	str	r3, [r7, #8]
}
 800c6e4:	bf00      	nop
 800c6e6:	e7fe      	b.n	800c6e6 <vTaskPriorityDisinheritAfterTimeout+0x86>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800c6e8:	69bb      	ldr	r3, [r7, #24]
 800c6ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6ec:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800c6ee:	69bb      	ldr	r3, [r7, #24]
 800c6f0:	69fa      	ldr	r2, [r7, #28]
 800c6f2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c6f4:	69bb      	ldr	r3, [r7, #24]
 800c6f6:	699b      	ldr	r3, [r3, #24]
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	db04      	blt.n	800c706 <vTaskPriorityDisinheritAfterTimeout+0xa6>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c6fc:	69fb      	ldr	r3, [r7, #28]
 800c6fe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c702:	69bb      	ldr	r3, [r7, #24]
 800c704:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c706:	69bb      	ldr	r3, [r7, #24]
 800c708:	6959      	ldr	r1, [r3, #20]
 800c70a:	693a      	ldr	r2, [r7, #16]
 800c70c:	4613      	mov	r3, r2
 800c70e:	009b      	lsls	r3, r3, #2
 800c710:	4413      	add	r3, r2
 800c712:	009b      	lsls	r3, r3, #2
 800c714:	4a13      	ldr	r2, [pc, #76]	; (800c764 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800c716:	4413      	add	r3, r2
 800c718:	4299      	cmp	r1, r3
 800c71a:	d11c      	bne.n	800c756 <vTaskPriorityDisinheritAfterTimeout+0xf6>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c71c:	69bb      	ldr	r3, [r7, #24]
 800c71e:	3304      	adds	r3, #4
 800c720:	4618      	mov	r0, r3
 800c722:	f7fd ff1b 	bl	800a55c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800c726:	69bb      	ldr	r3, [r7, #24]
 800c728:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c72a:	4b0f      	ldr	r3, [pc, #60]	; (800c768 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	429a      	cmp	r2, r3
 800c730:	d903      	bls.n	800c73a <vTaskPriorityDisinheritAfterTimeout+0xda>
 800c732:	69bb      	ldr	r3, [r7, #24]
 800c734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c736:	4a0c      	ldr	r2, [pc, #48]	; (800c768 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800c738:	6013      	str	r3, [r2, #0]
 800c73a:	69bb      	ldr	r3, [r7, #24]
 800c73c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c73e:	4613      	mov	r3, r2
 800c740:	009b      	lsls	r3, r3, #2
 800c742:	4413      	add	r3, r2
 800c744:	009b      	lsls	r3, r3, #2
 800c746:	4a07      	ldr	r2, [pc, #28]	; (800c764 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800c748:	441a      	add	r2, r3
 800c74a:	69bb      	ldr	r3, [r7, #24]
 800c74c:	3304      	adds	r3, #4
 800c74e:	4619      	mov	r1, r3
 800c750:	4610      	mov	r0, r2
 800c752:	f7fd fea6 	bl	800a4a2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c756:	bf00      	nop
 800c758:	3720      	adds	r7, #32
 800c75a:	46bd      	mov	sp, r7
 800c75c:	bd80      	pop	{r7, pc}
 800c75e:	bf00      	nop
 800c760:	2000a21c 	.word	0x2000a21c
 800c764:	2000a220 	.word	0x2000a220
 800c768:	2000a6f8 	.word	0x2000a6f8

0800c76c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800c76c:	b480      	push	{r7}
 800c76e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c770:	4b07      	ldr	r3, [pc, #28]	; (800c790 <pvTaskIncrementMutexHeldCount+0x24>)
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	2b00      	cmp	r3, #0
 800c776:	d004      	beq.n	800c782 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c778:	4b05      	ldr	r3, [pc, #20]	; (800c790 <pvTaskIncrementMutexHeldCount+0x24>)
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c77e:	3201      	adds	r2, #1
 800c780:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800c782:	4b03      	ldr	r3, [pc, #12]	; (800c790 <pvTaskIncrementMutexHeldCount+0x24>)
 800c784:	681b      	ldr	r3, [r3, #0]
	}
 800c786:	4618      	mov	r0, r3
 800c788:	46bd      	mov	sp, r7
 800c78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c78e:	4770      	bx	lr
 800c790:	2000a21c 	.word	0x2000a21c

0800c794 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c794:	b580      	push	{r7, lr}
 800c796:	b084      	sub	sp, #16
 800c798:	af00      	add	r7, sp, #0
 800c79a:	6078      	str	r0, [r7, #4]
 800c79c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c79e:	4b21      	ldr	r3, [pc, #132]	; (800c824 <prvAddCurrentTaskToDelayedList+0x90>)
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c7a4:	4b20      	ldr	r3, [pc, #128]	; (800c828 <prvAddCurrentTaskToDelayedList+0x94>)
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	3304      	adds	r3, #4
 800c7aa:	4618      	mov	r0, r3
 800c7ac:	f7fd fed6 	bl	800a55c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7b6:	d10a      	bne.n	800c7ce <prvAddCurrentTaskToDelayedList+0x3a>
 800c7b8:	683b      	ldr	r3, [r7, #0]
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d007      	beq.n	800c7ce <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c7be:	4b1a      	ldr	r3, [pc, #104]	; (800c828 <prvAddCurrentTaskToDelayedList+0x94>)
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	3304      	adds	r3, #4
 800c7c4:	4619      	mov	r1, r3
 800c7c6:	4819      	ldr	r0, [pc, #100]	; (800c82c <prvAddCurrentTaskToDelayedList+0x98>)
 800c7c8:	f7fd fe6b 	bl	800a4a2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c7cc:	e026      	b.n	800c81c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c7ce:	68fa      	ldr	r2, [r7, #12]
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	4413      	add	r3, r2
 800c7d4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c7d6:	4b14      	ldr	r3, [pc, #80]	; (800c828 <prvAddCurrentTaskToDelayedList+0x94>)
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	68ba      	ldr	r2, [r7, #8]
 800c7dc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c7de:	68ba      	ldr	r2, [r7, #8]
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	429a      	cmp	r2, r3
 800c7e4:	d209      	bcs.n	800c7fa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c7e6:	4b12      	ldr	r3, [pc, #72]	; (800c830 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c7e8:	681a      	ldr	r2, [r3, #0]
 800c7ea:	4b0f      	ldr	r3, [pc, #60]	; (800c828 <prvAddCurrentTaskToDelayedList+0x94>)
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	3304      	adds	r3, #4
 800c7f0:	4619      	mov	r1, r3
 800c7f2:	4610      	mov	r0, r2
 800c7f4:	f7fd fe79 	bl	800a4ea <vListInsert>
}
 800c7f8:	e010      	b.n	800c81c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c7fa:	4b0e      	ldr	r3, [pc, #56]	; (800c834 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c7fc:	681a      	ldr	r2, [r3, #0]
 800c7fe:	4b0a      	ldr	r3, [pc, #40]	; (800c828 <prvAddCurrentTaskToDelayedList+0x94>)
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	3304      	adds	r3, #4
 800c804:	4619      	mov	r1, r3
 800c806:	4610      	mov	r0, r2
 800c808:	f7fd fe6f 	bl	800a4ea <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c80c:	4b0a      	ldr	r3, [pc, #40]	; (800c838 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	68ba      	ldr	r2, [r7, #8]
 800c812:	429a      	cmp	r2, r3
 800c814:	d202      	bcs.n	800c81c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c816:	4a08      	ldr	r2, [pc, #32]	; (800c838 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c818:	68bb      	ldr	r3, [r7, #8]
 800c81a:	6013      	str	r3, [r2, #0]
}
 800c81c:	bf00      	nop
 800c81e:	3710      	adds	r7, #16
 800c820:	46bd      	mov	sp, r7
 800c822:	bd80      	pop	{r7, pc}
 800c824:	2000a6f4 	.word	0x2000a6f4
 800c828:	2000a21c 	.word	0x2000a21c
 800c82c:	2000a6dc 	.word	0x2000a6dc
 800c830:	2000a6ac 	.word	0x2000a6ac
 800c834:	2000a6a8 	.word	0x2000a6a8
 800c838:	2000a710 	.word	0x2000a710

0800c83c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c83c:	b580      	push	{r7, lr}
 800c83e:	b08a      	sub	sp, #40	; 0x28
 800c840:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c842:	2300      	movs	r3, #0
 800c844:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c846:	f000 fb15 	bl	800ce74 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c84a:	4b1d      	ldr	r3, [pc, #116]	; (800c8c0 <xTimerCreateTimerTask+0x84>)
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d021      	beq.n	800c896 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c852:	2300      	movs	r3, #0
 800c854:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c856:	2300      	movs	r3, #0
 800c858:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c85a:	1d3a      	adds	r2, r7, #4
 800c85c:	f107 0108 	add.w	r1, r7, #8
 800c860:	f107 030c 	add.w	r3, r7, #12
 800c864:	4618      	mov	r0, r3
 800c866:	f7fd fdd5 	bl	800a414 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c86a:	6879      	ldr	r1, [r7, #4]
 800c86c:	68bb      	ldr	r3, [r7, #8]
 800c86e:	68fa      	ldr	r2, [r7, #12]
 800c870:	9202      	str	r2, [sp, #8]
 800c872:	9301      	str	r3, [sp, #4]
 800c874:	2302      	movs	r3, #2
 800c876:	9300      	str	r3, [sp, #0]
 800c878:	2300      	movs	r3, #0
 800c87a:	460a      	mov	r2, r1
 800c87c:	4911      	ldr	r1, [pc, #68]	; (800c8c4 <xTimerCreateTimerTask+0x88>)
 800c87e:	4812      	ldr	r0, [pc, #72]	; (800c8c8 <xTimerCreateTimerTask+0x8c>)
 800c880:	f7fe ffa6 	bl	800b7d0 <xTaskCreateStatic>
 800c884:	4603      	mov	r3, r0
 800c886:	4a11      	ldr	r2, [pc, #68]	; (800c8cc <xTimerCreateTimerTask+0x90>)
 800c888:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c88a:	4b10      	ldr	r3, [pc, #64]	; (800c8cc <xTimerCreateTimerTask+0x90>)
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d001      	beq.n	800c896 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c892:	2301      	movs	r3, #1
 800c894:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c896:	697b      	ldr	r3, [r7, #20]
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d10c      	bne.n	800c8b6 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 800c89c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8a0:	b672      	cpsid	i
 800c8a2:	f383 8811 	msr	BASEPRI, r3
 800c8a6:	f3bf 8f6f 	isb	sy
 800c8aa:	f3bf 8f4f 	dsb	sy
 800c8ae:	b662      	cpsie	i
 800c8b0:	613b      	str	r3, [r7, #16]
}
 800c8b2:	bf00      	nop
 800c8b4:	e7fe      	b.n	800c8b4 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800c8b6:	697b      	ldr	r3, [r7, #20]
}
 800c8b8:	4618      	mov	r0, r3
 800c8ba:	3718      	adds	r7, #24
 800c8bc:	46bd      	mov	sp, r7
 800c8be:	bd80      	pop	{r7, pc}
 800c8c0:	2000a74c 	.word	0x2000a74c
 800c8c4:	080279b4 	.word	0x080279b4
 800c8c8:	0800ca0d 	.word	0x0800ca0d
 800c8cc:	2000a750 	.word	0x2000a750

0800c8d0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c8d0:	b580      	push	{r7, lr}
 800c8d2:	b08a      	sub	sp, #40	; 0x28
 800c8d4:	af00      	add	r7, sp, #0
 800c8d6:	60f8      	str	r0, [r7, #12]
 800c8d8:	60b9      	str	r1, [r7, #8]
 800c8da:	607a      	str	r2, [r7, #4]
 800c8dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c8de:	2300      	movs	r3, #0
 800c8e0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d10c      	bne.n	800c902 <xTimerGenericCommand+0x32>
	__asm volatile
 800c8e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8ec:	b672      	cpsid	i
 800c8ee:	f383 8811 	msr	BASEPRI, r3
 800c8f2:	f3bf 8f6f 	isb	sy
 800c8f6:	f3bf 8f4f 	dsb	sy
 800c8fa:	b662      	cpsie	i
 800c8fc:	623b      	str	r3, [r7, #32]
}
 800c8fe:	bf00      	nop
 800c900:	e7fe      	b.n	800c900 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c902:	4b1a      	ldr	r3, [pc, #104]	; (800c96c <xTimerGenericCommand+0x9c>)
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	2b00      	cmp	r3, #0
 800c908:	d02a      	beq.n	800c960 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c90a:	68bb      	ldr	r3, [r7, #8]
 800c90c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c916:	68bb      	ldr	r3, [r7, #8]
 800c918:	2b05      	cmp	r3, #5
 800c91a:	dc18      	bgt.n	800c94e <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c91c:	f7ff fda8 	bl	800c470 <xTaskGetSchedulerState>
 800c920:	4603      	mov	r3, r0
 800c922:	2b02      	cmp	r3, #2
 800c924:	d109      	bne.n	800c93a <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c926:	4b11      	ldr	r3, [pc, #68]	; (800c96c <xTimerGenericCommand+0x9c>)
 800c928:	6818      	ldr	r0, [r3, #0]
 800c92a:	f107 0110 	add.w	r1, r7, #16
 800c92e:	2300      	movs	r3, #0
 800c930:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c932:	f7fe f8bb 	bl	800aaac <xQueueGenericSend>
 800c936:	6278      	str	r0, [r7, #36]	; 0x24
 800c938:	e012      	b.n	800c960 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c93a:	4b0c      	ldr	r3, [pc, #48]	; (800c96c <xTimerGenericCommand+0x9c>)
 800c93c:	6818      	ldr	r0, [r3, #0]
 800c93e:	f107 0110 	add.w	r1, r7, #16
 800c942:	2300      	movs	r3, #0
 800c944:	2200      	movs	r2, #0
 800c946:	f7fe f8b1 	bl	800aaac <xQueueGenericSend>
 800c94a:	6278      	str	r0, [r7, #36]	; 0x24
 800c94c:	e008      	b.n	800c960 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c94e:	4b07      	ldr	r3, [pc, #28]	; (800c96c <xTimerGenericCommand+0x9c>)
 800c950:	6818      	ldr	r0, [r3, #0]
 800c952:	f107 0110 	add.w	r1, r7, #16
 800c956:	2300      	movs	r3, #0
 800c958:	683a      	ldr	r2, [r7, #0]
 800c95a:	f7fe f9ad 	bl	800acb8 <xQueueGenericSendFromISR>
 800c95e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c962:	4618      	mov	r0, r3
 800c964:	3728      	adds	r7, #40	; 0x28
 800c966:	46bd      	mov	sp, r7
 800c968:	bd80      	pop	{r7, pc}
 800c96a:	bf00      	nop
 800c96c:	2000a74c 	.word	0x2000a74c

0800c970 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c970:	b580      	push	{r7, lr}
 800c972:	b088      	sub	sp, #32
 800c974:	af02      	add	r7, sp, #8
 800c976:	6078      	str	r0, [r7, #4]
 800c978:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c97a:	4b23      	ldr	r3, [pc, #140]	; (800ca08 <prvProcessExpiredTimer+0x98>)
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	68db      	ldr	r3, [r3, #12]
 800c980:	68db      	ldr	r3, [r3, #12]
 800c982:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c984:	697b      	ldr	r3, [r7, #20]
 800c986:	3304      	adds	r3, #4
 800c988:	4618      	mov	r0, r3
 800c98a:	f7fd fde7 	bl	800a55c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c98e:	697b      	ldr	r3, [r7, #20]
 800c990:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c994:	f003 0304 	and.w	r3, r3, #4
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d024      	beq.n	800c9e6 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c99c:	697b      	ldr	r3, [r7, #20]
 800c99e:	699a      	ldr	r2, [r3, #24]
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	18d1      	adds	r1, r2, r3
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	683a      	ldr	r2, [r7, #0]
 800c9a8:	6978      	ldr	r0, [r7, #20]
 800c9aa:	f000 f8d3 	bl	800cb54 <prvInsertTimerInActiveList>
 800c9ae:	4603      	mov	r3, r0
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d021      	beq.n	800c9f8 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c9b4:	2300      	movs	r3, #0
 800c9b6:	9300      	str	r3, [sp, #0]
 800c9b8:	2300      	movs	r3, #0
 800c9ba:	687a      	ldr	r2, [r7, #4]
 800c9bc:	2100      	movs	r1, #0
 800c9be:	6978      	ldr	r0, [r7, #20]
 800c9c0:	f7ff ff86 	bl	800c8d0 <xTimerGenericCommand>
 800c9c4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c9c6:	693b      	ldr	r3, [r7, #16]
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d115      	bne.n	800c9f8 <prvProcessExpiredTimer+0x88>
	__asm volatile
 800c9cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9d0:	b672      	cpsid	i
 800c9d2:	f383 8811 	msr	BASEPRI, r3
 800c9d6:	f3bf 8f6f 	isb	sy
 800c9da:	f3bf 8f4f 	dsb	sy
 800c9de:	b662      	cpsie	i
 800c9e0:	60fb      	str	r3, [r7, #12]
}
 800c9e2:	bf00      	nop
 800c9e4:	e7fe      	b.n	800c9e4 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c9e6:	697b      	ldr	r3, [r7, #20]
 800c9e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c9ec:	f023 0301 	bic.w	r3, r3, #1
 800c9f0:	b2da      	uxtb	r2, r3
 800c9f2:	697b      	ldr	r3, [r7, #20]
 800c9f4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c9f8:	697b      	ldr	r3, [r7, #20]
 800c9fa:	6a1b      	ldr	r3, [r3, #32]
 800c9fc:	6978      	ldr	r0, [r7, #20]
 800c9fe:	4798      	blx	r3
}
 800ca00:	bf00      	nop
 800ca02:	3718      	adds	r7, #24
 800ca04:	46bd      	mov	sp, r7
 800ca06:	bd80      	pop	{r7, pc}
 800ca08:	2000a744 	.word	0x2000a744

0800ca0c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ca0c:	b580      	push	{r7, lr}
 800ca0e:	b084      	sub	sp, #16
 800ca10:	af00      	add	r7, sp, #0
 800ca12:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ca14:	f107 0308 	add.w	r3, r7, #8
 800ca18:	4618      	mov	r0, r3
 800ca1a:	f000 f857 	bl	800cacc <prvGetNextExpireTime>
 800ca1e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ca20:	68bb      	ldr	r3, [r7, #8]
 800ca22:	4619      	mov	r1, r3
 800ca24:	68f8      	ldr	r0, [r7, #12]
 800ca26:	f000 f803 	bl	800ca30 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ca2a:	f000 f8d5 	bl	800cbd8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ca2e:	e7f1      	b.n	800ca14 <prvTimerTask+0x8>

0800ca30 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ca30:	b580      	push	{r7, lr}
 800ca32:	b084      	sub	sp, #16
 800ca34:	af00      	add	r7, sp, #0
 800ca36:	6078      	str	r0, [r7, #4]
 800ca38:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ca3a:	f7ff f913 	bl	800bc64 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ca3e:	f107 0308 	add.w	r3, r7, #8
 800ca42:	4618      	mov	r0, r3
 800ca44:	f000 f866 	bl	800cb14 <prvSampleTimeNow>
 800ca48:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ca4a:	68bb      	ldr	r3, [r7, #8]
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d130      	bne.n	800cab2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ca50:	683b      	ldr	r3, [r7, #0]
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d10a      	bne.n	800ca6c <prvProcessTimerOrBlockTask+0x3c>
 800ca56:	687a      	ldr	r2, [r7, #4]
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	429a      	cmp	r2, r3
 800ca5c:	d806      	bhi.n	800ca6c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ca5e:	f7ff f90f 	bl	800bc80 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ca62:	68f9      	ldr	r1, [r7, #12]
 800ca64:	6878      	ldr	r0, [r7, #4]
 800ca66:	f7ff ff83 	bl	800c970 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ca6a:	e024      	b.n	800cab6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ca6c:	683b      	ldr	r3, [r7, #0]
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d008      	beq.n	800ca84 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ca72:	4b13      	ldr	r3, [pc, #76]	; (800cac0 <prvProcessTimerOrBlockTask+0x90>)
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d101      	bne.n	800ca80 <prvProcessTimerOrBlockTask+0x50>
 800ca7c:	2301      	movs	r3, #1
 800ca7e:	e000      	b.n	800ca82 <prvProcessTimerOrBlockTask+0x52>
 800ca80:	2300      	movs	r3, #0
 800ca82:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ca84:	4b0f      	ldr	r3, [pc, #60]	; (800cac4 <prvProcessTimerOrBlockTask+0x94>)
 800ca86:	6818      	ldr	r0, [r3, #0]
 800ca88:	687a      	ldr	r2, [r7, #4]
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	1ad3      	subs	r3, r2, r3
 800ca8e:	683a      	ldr	r2, [r7, #0]
 800ca90:	4619      	mov	r1, r3
 800ca92:	f7fe fe69 	bl	800b768 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ca96:	f7ff f8f3 	bl	800bc80 <xTaskResumeAll>
 800ca9a:	4603      	mov	r3, r0
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d10a      	bne.n	800cab6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800caa0:	4b09      	ldr	r3, [pc, #36]	; (800cac8 <prvProcessTimerOrBlockTask+0x98>)
 800caa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800caa6:	601a      	str	r2, [r3, #0]
 800caa8:	f3bf 8f4f 	dsb	sy
 800caac:	f3bf 8f6f 	isb	sy
}
 800cab0:	e001      	b.n	800cab6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800cab2:	f7ff f8e5 	bl	800bc80 <xTaskResumeAll>
}
 800cab6:	bf00      	nop
 800cab8:	3710      	adds	r7, #16
 800caba:	46bd      	mov	sp, r7
 800cabc:	bd80      	pop	{r7, pc}
 800cabe:	bf00      	nop
 800cac0:	2000a748 	.word	0x2000a748
 800cac4:	2000a74c 	.word	0x2000a74c
 800cac8:	e000ed04 	.word	0xe000ed04

0800cacc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800cacc:	b480      	push	{r7}
 800cace:	b085      	sub	sp, #20
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800cad4:	4b0e      	ldr	r3, [pc, #56]	; (800cb10 <prvGetNextExpireTime+0x44>)
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d101      	bne.n	800cae2 <prvGetNextExpireTime+0x16>
 800cade:	2201      	movs	r2, #1
 800cae0:	e000      	b.n	800cae4 <prvGetNextExpireTime+0x18>
 800cae2:	2200      	movs	r2, #0
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	2b00      	cmp	r3, #0
 800caee:	d105      	bne.n	800cafc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800caf0:	4b07      	ldr	r3, [pc, #28]	; (800cb10 <prvGetNextExpireTime+0x44>)
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	68db      	ldr	r3, [r3, #12]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	60fb      	str	r3, [r7, #12]
 800cafa:	e001      	b.n	800cb00 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800cafc:	2300      	movs	r3, #0
 800cafe:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800cb00:	68fb      	ldr	r3, [r7, #12]
}
 800cb02:	4618      	mov	r0, r3
 800cb04:	3714      	adds	r7, #20
 800cb06:	46bd      	mov	sp, r7
 800cb08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb0c:	4770      	bx	lr
 800cb0e:	bf00      	nop
 800cb10:	2000a744 	.word	0x2000a744

0800cb14 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800cb14:	b580      	push	{r7, lr}
 800cb16:	b084      	sub	sp, #16
 800cb18:	af00      	add	r7, sp, #0
 800cb1a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800cb1c:	f7ff f950 	bl	800bdc0 <xTaskGetTickCount>
 800cb20:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800cb22:	4b0b      	ldr	r3, [pc, #44]	; (800cb50 <prvSampleTimeNow+0x3c>)
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	68fa      	ldr	r2, [r7, #12]
 800cb28:	429a      	cmp	r2, r3
 800cb2a:	d205      	bcs.n	800cb38 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800cb2c:	f000 f93c 	bl	800cda8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	2201      	movs	r2, #1
 800cb34:	601a      	str	r2, [r3, #0]
 800cb36:	e002      	b.n	800cb3e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	2200      	movs	r2, #0
 800cb3c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800cb3e:	4a04      	ldr	r2, [pc, #16]	; (800cb50 <prvSampleTimeNow+0x3c>)
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800cb44:	68fb      	ldr	r3, [r7, #12]
}
 800cb46:	4618      	mov	r0, r3
 800cb48:	3710      	adds	r7, #16
 800cb4a:	46bd      	mov	sp, r7
 800cb4c:	bd80      	pop	{r7, pc}
 800cb4e:	bf00      	nop
 800cb50:	2000a754 	.word	0x2000a754

0800cb54 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800cb54:	b580      	push	{r7, lr}
 800cb56:	b086      	sub	sp, #24
 800cb58:	af00      	add	r7, sp, #0
 800cb5a:	60f8      	str	r0, [r7, #12]
 800cb5c:	60b9      	str	r1, [r7, #8]
 800cb5e:	607a      	str	r2, [r7, #4]
 800cb60:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800cb62:	2300      	movs	r3, #0
 800cb64:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	68ba      	ldr	r2, [r7, #8]
 800cb6a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	68fa      	ldr	r2, [r7, #12]
 800cb70:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800cb72:	68ba      	ldr	r2, [r7, #8]
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	429a      	cmp	r2, r3
 800cb78:	d812      	bhi.n	800cba0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cb7a:	687a      	ldr	r2, [r7, #4]
 800cb7c:	683b      	ldr	r3, [r7, #0]
 800cb7e:	1ad2      	subs	r2, r2, r3
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	699b      	ldr	r3, [r3, #24]
 800cb84:	429a      	cmp	r2, r3
 800cb86:	d302      	bcc.n	800cb8e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800cb88:	2301      	movs	r3, #1
 800cb8a:	617b      	str	r3, [r7, #20]
 800cb8c:	e01b      	b.n	800cbc6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800cb8e:	4b10      	ldr	r3, [pc, #64]	; (800cbd0 <prvInsertTimerInActiveList+0x7c>)
 800cb90:	681a      	ldr	r2, [r3, #0]
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	3304      	adds	r3, #4
 800cb96:	4619      	mov	r1, r3
 800cb98:	4610      	mov	r0, r2
 800cb9a:	f7fd fca6 	bl	800a4ea <vListInsert>
 800cb9e:	e012      	b.n	800cbc6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800cba0:	687a      	ldr	r2, [r7, #4]
 800cba2:	683b      	ldr	r3, [r7, #0]
 800cba4:	429a      	cmp	r2, r3
 800cba6:	d206      	bcs.n	800cbb6 <prvInsertTimerInActiveList+0x62>
 800cba8:	68ba      	ldr	r2, [r7, #8]
 800cbaa:	683b      	ldr	r3, [r7, #0]
 800cbac:	429a      	cmp	r2, r3
 800cbae:	d302      	bcc.n	800cbb6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800cbb0:	2301      	movs	r3, #1
 800cbb2:	617b      	str	r3, [r7, #20]
 800cbb4:	e007      	b.n	800cbc6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cbb6:	4b07      	ldr	r3, [pc, #28]	; (800cbd4 <prvInsertTimerInActiveList+0x80>)
 800cbb8:	681a      	ldr	r2, [r3, #0]
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	3304      	adds	r3, #4
 800cbbe:	4619      	mov	r1, r3
 800cbc0:	4610      	mov	r0, r2
 800cbc2:	f7fd fc92 	bl	800a4ea <vListInsert>
		}
	}

	return xProcessTimerNow;
 800cbc6:	697b      	ldr	r3, [r7, #20]
}
 800cbc8:	4618      	mov	r0, r3
 800cbca:	3718      	adds	r7, #24
 800cbcc:	46bd      	mov	sp, r7
 800cbce:	bd80      	pop	{r7, pc}
 800cbd0:	2000a748 	.word	0x2000a748
 800cbd4:	2000a744 	.word	0x2000a744

0800cbd8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800cbd8:	b580      	push	{r7, lr}
 800cbda:	b08e      	sub	sp, #56	; 0x38
 800cbdc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cbde:	e0d0      	b.n	800cd82 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	da1a      	bge.n	800cc1c <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800cbe6:	1d3b      	adds	r3, r7, #4
 800cbe8:	3304      	adds	r3, #4
 800cbea:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800cbec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d10c      	bne.n	800cc0c <prvProcessReceivedCommands+0x34>
	__asm volatile
 800cbf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbf6:	b672      	cpsid	i
 800cbf8:	f383 8811 	msr	BASEPRI, r3
 800cbfc:	f3bf 8f6f 	isb	sy
 800cc00:	f3bf 8f4f 	dsb	sy
 800cc04:	b662      	cpsie	i
 800cc06:	61fb      	str	r3, [r7, #28]
}
 800cc08:	bf00      	nop
 800cc0a:	e7fe      	b.n	800cc0a <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800cc0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cc12:	6850      	ldr	r0, [r2, #4]
 800cc14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cc16:	6892      	ldr	r2, [r2, #8]
 800cc18:	4611      	mov	r1, r2
 800cc1a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	f2c0 80ae 	blt.w	800cd80 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800cc28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc2a:	695b      	ldr	r3, [r3, #20]
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d004      	beq.n	800cc3a <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cc30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc32:	3304      	adds	r3, #4
 800cc34:	4618      	mov	r0, r3
 800cc36:	f7fd fc91 	bl	800a55c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cc3a:	463b      	mov	r3, r7
 800cc3c:	4618      	mov	r0, r3
 800cc3e:	f7ff ff69 	bl	800cb14 <prvSampleTimeNow>
 800cc42:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	2b09      	cmp	r3, #9
 800cc48:	f200 809b 	bhi.w	800cd82 <prvProcessReceivedCommands+0x1aa>
 800cc4c:	a201      	add	r2, pc, #4	; (adr r2, 800cc54 <prvProcessReceivedCommands+0x7c>)
 800cc4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc52:	bf00      	nop
 800cc54:	0800cc7d 	.word	0x0800cc7d
 800cc58:	0800cc7d 	.word	0x0800cc7d
 800cc5c:	0800cc7d 	.word	0x0800cc7d
 800cc60:	0800ccf5 	.word	0x0800ccf5
 800cc64:	0800cd09 	.word	0x0800cd09
 800cc68:	0800cd57 	.word	0x0800cd57
 800cc6c:	0800cc7d 	.word	0x0800cc7d
 800cc70:	0800cc7d 	.word	0x0800cc7d
 800cc74:	0800ccf5 	.word	0x0800ccf5
 800cc78:	0800cd09 	.word	0x0800cd09
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cc7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc7e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cc82:	f043 0301 	orr.w	r3, r3, #1
 800cc86:	b2da      	uxtb	r2, r3
 800cc88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800cc8e:	68ba      	ldr	r2, [r7, #8]
 800cc90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc92:	699b      	ldr	r3, [r3, #24]
 800cc94:	18d1      	adds	r1, r2, r3
 800cc96:	68bb      	ldr	r3, [r7, #8]
 800cc98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cc9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cc9c:	f7ff ff5a 	bl	800cb54 <prvInsertTimerInActiveList>
 800cca0:	4603      	mov	r3, r0
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d06d      	beq.n	800cd82 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cca8:	6a1b      	ldr	r3, [r3, #32]
 800ccaa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ccac:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ccae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccb0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ccb4:	f003 0304 	and.w	r3, r3, #4
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d062      	beq.n	800cd82 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ccbc:	68ba      	ldr	r2, [r7, #8]
 800ccbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccc0:	699b      	ldr	r3, [r3, #24]
 800ccc2:	441a      	add	r2, r3
 800ccc4:	2300      	movs	r3, #0
 800ccc6:	9300      	str	r3, [sp, #0]
 800ccc8:	2300      	movs	r3, #0
 800ccca:	2100      	movs	r1, #0
 800cccc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ccce:	f7ff fdff 	bl	800c8d0 <xTimerGenericCommand>
 800ccd2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ccd4:	6a3b      	ldr	r3, [r7, #32]
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d153      	bne.n	800cd82 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800ccda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccde:	b672      	cpsid	i
 800cce0:	f383 8811 	msr	BASEPRI, r3
 800cce4:	f3bf 8f6f 	isb	sy
 800cce8:	f3bf 8f4f 	dsb	sy
 800ccec:	b662      	cpsie	i
 800ccee:	61bb      	str	r3, [r7, #24]
}
 800ccf0:	bf00      	nop
 800ccf2:	e7fe      	b.n	800ccf2 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ccf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccf6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ccfa:	f023 0301 	bic.w	r3, r3, #1
 800ccfe:	b2da      	uxtb	r2, r3
 800cd00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800cd06:	e03c      	b.n	800cd82 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cd08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd0a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cd0e:	f043 0301 	orr.w	r3, r3, #1
 800cd12:	b2da      	uxtb	r2, r3
 800cd14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd16:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800cd1a:	68ba      	ldr	r2, [r7, #8]
 800cd1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd1e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800cd20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd22:	699b      	ldr	r3, [r3, #24]
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d10c      	bne.n	800cd42 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 800cd28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd2c:	b672      	cpsid	i
 800cd2e:	f383 8811 	msr	BASEPRI, r3
 800cd32:	f3bf 8f6f 	isb	sy
 800cd36:	f3bf 8f4f 	dsb	sy
 800cd3a:	b662      	cpsie	i
 800cd3c:	617b      	str	r3, [r7, #20]
}
 800cd3e:	bf00      	nop
 800cd40:	e7fe      	b.n	800cd40 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800cd42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd44:	699a      	ldr	r2, [r3, #24]
 800cd46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd48:	18d1      	adds	r1, r2, r3
 800cd4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cd4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cd50:	f7ff ff00 	bl	800cb54 <prvInsertTimerInActiveList>
					break;
 800cd54:	e015      	b.n	800cd82 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800cd56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cd5c:	f003 0302 	and.w	r3, r3, #2
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d103      	bne.n	800cd6c <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 800cd64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cd66:	f000 fbc7 	bl	800d4f8 <vPortFree>
 800cd6a:	e00a      	b.n	800cd82 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cd6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd6e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cd72:	f023 0301 	bic.w	r3, r3, #1
 800cd76:	b2da      	uxtb	r2, r3
 800cd78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800cd7e:	e000      	b.n	800cd82 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800cd80:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cd82:	4b08      	ldr	r3, [pc, #32]	; (800cda4 <prvProcessReceivedCommands+0x1cc>)
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	1d39      	adds	r1, r7, #4
 800cd88:	2200      	movs	r2, #0
 800cd8a:	4618      	mov	r0, r3
 800cd8c:	f7fe f8ca 	bl	800af24 <xQueueReceive>
 800cd90:	4603      	mov	r3, r0
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	f47f af24 	bne.w	800cbe0 <prvProcessReceivedCommands+0x8>
	}
}
 800cd98:	bf00      	nop
 800cd9a:	bf00      	nop
 800cd9c:	3730      	adds	r7, #48	; 0x30
 800cd9e:	46bd      	mov	sp, r7
 800cda0:	bd80      	pop	{r7, pc}
 800cda2:	bf00      	nop
 800cda4:	2000a74c 	.word	0x2000a74c

0800cda8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800cda8:	b580      	push	{r7, lr}
 800cdaa:	b088      	sub	sp, #32
 800cdac:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cdae:	e04a      	b.n	800ce46 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cdb0:	4b2e      	ldr	r3, [pc, #184]	; (800ce6c <prvSwitchTimerLists+0xc4>)
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	68db      	ldr	r3, [r3, #12]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cdba:	4b2c      	ldr	r3, [pc, #176]	; (800ce6c <prvSwitchTimerLists+0xc4>)
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	68db      	ldr	r3, [r3, #12]
 800cdc0:	68db      	ldr	r3, [r3, #12]
 800cdc2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	3304      	adds	r3, #4
 800cdc8:	4618      	mov	r0, r3
 800cdca:	f7fd fbc7 	bl	800a55c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	6a1b      	ldr	r3, [r3, #32]
 800cdd2:	68f8      	ldr	r0, [r7, #12]
 800cdd4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cddc:	f003 0304 	and.w	r3, r3, #4
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d030      	beq.n	800ce46 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	699b      	ldr	r3, [r3, #24]
 800cde8:	693a      	ldr	r2, [r7, #16]
 800cdea:	4413      	add	r3, r2
 800cdec:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800cdee:	68ba      	ldr	r2, [r7, #8]
 800cdf0:	693b      	ldr	r3, [r7, #16]
 800cdf2:	429a      	cmp	r2, r3
 800cdf4:	d90e      	bls.n	800ce14 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	68ba      	ldr	r2, [r7, #8]
 800cdfa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	68fa      	ldr	r2, [r7, #12]
 800ce00:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ce02:	4b1a      	ldr	r3, [pc, #104]	; (800ce6c <prvSwitchTimerLists+0xc4>)
 800ce04:	681a      	ldr	r2, [r3, #0]
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	3304      	adds	r3, #4
 800ce0a:	4619      	mov	r1, r3
 800ce0c:	4610      	mov	r0, r2
 800ce0e:	f7fd fb6c 	bl	800a4ea <vListInsert>
 800ce12:	e018      	b.n	800ce46 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ce14:	2300      	movs	r3, #0
 800ce16:	9300      	str	r3, [sp, #0]
 800ce18:	2300      	movs	r3, #0
 800ce1a:	693a      	ldr	r2, [r7, #16]
 800ce1c:	2100      	movs	r1, #0
 800ce1e:	68f8      	ldr	r0, [r7, #12]
 800ce20:	f7ff fd56 	bl	800c8d0 <xTimerGenericCommand>
 800ce24:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d10c      	bne.n	800ce46 <prvSwitchTimerLists+0x9e>
	__asm volatile
 800ce2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce30:	b672      	cpsid	i
 800ce32:	f383 8811 	msr	BASEPRI, r3
 800ce36:	f3bf 8f6f 	isb	sy
 800ce3a:	f3bf 8f4f 	dsb	sy
 800ce3e:	b662      	cpsie	i
 800ce40:	603b      	str	r3, [r7, #0]
}
 800ce42:	bf00      	nop
 800ce44:	e7fe      	b.n	800ce44 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ce46:	4b09      	ldr	r3, [pc, #36]	; (800ce6c <prvSwitchTimerLists+0xc4>)
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d1af      	bne.n	800cdb0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ce50:	4b06      	ldr	r3, [pc, #24]	; (800ce6c <prvSwitchTimerLists+0xc4>)
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ce56:	4b06      	ldr	r3, [pc, #24]	; (800ce70 <prvSwitchTimerLists+0xc8>)
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	4a04      	ldr	r2, [pc, #16]	; (800ce6c <prvSwitchTimerLists+0xc4>)
 800ce5c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ce5e:	4a04      	ldr	r2, [pc, #16]	; (800ce70 <prvSwitchTimerLists+0xc8>)
 800ce60:	697b      	ldr	r3, [r7, #20]
 800ce62:	6013      	str	r3, [r2, #0]
}
 800ce64:	bf00      	nop
 800ce66:	3718      	adds	r7, #24
 800ce68:	46bd      	mov	sp, r7
 800ce6a:	bd80      	pop	{r7, pc}
 800ce6c:	2000a744 	.word	0x2000a744
 800ce70:	2000a748 	.word	0x2000a748

0800ce74 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ce74:	b580      	push	{r7, lr}
 800ce76:	b082      	sub	sp, #8
 800ce78:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ce7a:	f000 f947 	bl	800d10c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ce7e:	4b15      	ldr	r3, [pc, #84]	; (800ced4 <prvCheckForValidListAndQueue+0x60>)
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d120      	bne.n	800cec8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ce86:	4814      	ldr	r0, [pc, #80]	; (800ced8 <prvCheckForValidListAndQueue+0x64>)
 800ce88:	f7fd fade 	bl	800a448 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ce8c:	4813      	ldr	r0, [pc, #76]	; (800cedc <prvCheckForValidListAndQueue+0x68>)
 800ce8e:	f7fd fadb 	bl	800a448 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ce92:	4b13      	ldr	r3, [pc, #76]	; (800cee0 <prvCheckForValidListAndQueue+0x6c>)
 800ce94:	4a10      	ldr	r2, [pc, #64]	; (800ced8 <prvCheckForValidListAndQueue+0x64>)
 800ce96:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ce98:	4b12      	ldr	r3, [pc, #72]	; (800cee4 <prvCheckForValidListAndQueue+0x70>)
 800ce9a:	4a10      	ldr	r2, [pc, #64]	; (800cedc <prvCheckForValidListAndQueue+0x68>)
 800ce9c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ce9e:	2300      	movs	r3, #0
 800cea0:	9300      	str	r3, [sp, #0]
 800cea2:	4b11      	ldr	r3, [pc, #68]	; (800cee8 <prvCheckForValidListAndQueue+0x74>)
 800cea4:	4a11      	ldr	r2, [pc, #68]	; (800ceec <prvCheckForValidListAndQueue+0x78>)
 800cea6:	2110      	movs	r1, #16
 800cea8:	200a      	movs	r0, #10
 800ceaa:	f7fd fbeb 	bl	800a684 <xQueueGenericCreateStatic>
 800ceae:	4603      	mov	r3, r0
 800ceb0:	4a08      	ldr	r2, [pc, #32]	; (800ced4 <prvCheckForValidListAndQueue+0x60>)
 800ceb2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ceb4:	4b07      	ldr	r3, [pc, #28]	; (800ced4 <prvCheckForValidListAndQueue+0x60>)
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d005      	beq.n	800cec8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800cebc:	4b05      	ldr	r3, [pc, #20]	; (800ced4 <prvCheckForValidListAndQueue+0x60>)
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	490b      	ldr	r1, [pc, #44]	; (800cef0 <prvCheckForValidListAndQueue+0x7c>)
 800cec2:	4618      	mov	r0, r3
 800cec4:	f7fe fbfc 	bl	800b6c0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cec8:	f000 f954 	bl	800d174 <vPortExitCritical>
}
 800cecc:	bf00      	nop
 800cece:	46bd      	mov	sp, r7
 800ced0:	bd80      	pop	{r7, pc}
 800ced2:	bf00      	nop
 800ced4:	2000a74c 	.word	0x2000a74c
 800ced8:	2000a71c 	.word	0x2000a71c
 800cedc:	2000a730 	.word	0x2000a730
 800cee0:	2000a744 	.word	0x2000a744
 800cee4:	2000a748 	.word	0x2000a748
 800cee8:	2000a7f8 	.word	0x2000a7f8
 800ceec:	2000a758 	.word	0x2000a758
 800cef0:	080279bc 	.word	0x080279bc

0800cef4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800cef4:	b480      	push	{r7}
 800cef6:	b085      	sub	sp, #20
 800cef8:	af00      	add	r7, sp, #0
 800cefa:	60f8      	str	r0, [r7, #12]
 800cefc:	60b9      	str	r1, [r7, #8]
 800cefe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	3b04      	subs	r3, #4
 800cf04:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800cf0c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	3b04      	subs	r3, #4
 800cf12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800cf14:	68bb      	ldr	r3, [r7, #8]
 800cf16:	f023 0201 	bic.w	r2, r3, #1
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	3b04      	subs	r3, #4
 800cf22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800cf24:	4a0c      	ldr	r2, [pc, #48]	; (800cf58 <pxPortInitialiseStack+0x64>)
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	3b14      	subs	r3, #20
 800cf2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800cf30:	687a      	ldr	r2, [r7, #4]
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	3b04      	subs	r3, #4
 800cf3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	f06f 0202 	mvn.w	r2, #2
 800cf42:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	3b20      	subs	r3, #32
 800cf48:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800cf4a:	68fb      	ldr	r3, [r7, #12]
}
 800cf4c:	4618      	mov	r0, r3
 800cf4e:	3714      	adds	r7, #20
 800cf50:	46bd      	mov	sp, r7
 800cf52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf56:	4770      	bx	lr
 800cf58:	0800cf5d 	.word	0x0800cf5d

0800cf5c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800cf5c:	b480      	push	{r7}
 800cf5e:	b085      	sub	sp, #20
 800cf60:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800cf62:	2300      	movs	r3, #0
 800cf64:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800cf66:	4b14      	ldr	r3, [pc, #80]	; (800cfb8 <prvTaskExitError+0x5c>)
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf6e:	d00c      	beq.n	800cf8a <prvTaskExitError+0x2e>
	__asm volatile
 800cf70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf74:	b672      	cpsid	i
 800cf76:	f383 8811 	msr	BASEPRI, r3
 800cf7a:	f3bf 8f6f 	isb	sy
 800cf7e:	f3bf 8f4f 	dsb	sy
 800cf82:	b662      	cpsie	i
 800cf84:	60fb      	str	r3, [r7, #12]
}
 800cf86:	bf00      	nop
 800cf88:	e7fe      	b.n	800cf88 <prvTaskExitError+0x2c>
	__asm volatile
 800cf8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf8e:	b672      	cpsid	i
 800cf90:	f383 8811 	msr	BASEPRI, r3
 800cf94:	f3bf 8f6f 	isb	sy
 800cf98:	f3bf 8f4f 	dsb	sy
 800cf9c:	b662      	cpsie	i
 800cf9e:	60bb      	str	r3, [r7, #8]
}
 800cfa0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800cfa2:	bf00      	nop
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d0fc      	beq.n	800cfa4 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800cfaa:	bf00      	nop
 800cfac:	bf00      	nop
 800cfae:	3714      	adds	r7, #20
 800cfb0:	46bd      	mov	sp, r7
 800cfb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb6:	4770      	bx	lr
 800cfb8:	20000010 	.word	0x20000010
 800cfbc:	00000000 	.word	0x00000000

0800cfc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800cfc0:	4b07      	ldr	r3, [pc, #28]	; (800cfe0 <pxCurrentTCBConst2>)
 800cfc2:	6819      	ldr	r1, [r3, #0]
 800cfc4:	6808      	ldr	r0, [r1, #0]
 800cfc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfca:	f380 8809 	msr	PSP, r0
 800cfce:	f3bf 8f6f 	isb	sy
 800cfd2:	f04f 0000 	mov.w	r0, #0
 800cfd6:	f380 8811 	msr	BASEPRI, r0
 800cfda:	4770      	bx	lr
 800cfdc:	f3af 8000 	nop.w

0800cfe0 <pxCurrentTCBConst2>:
 800cfe0:	2000a21c 	.word	0x2000a21c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800cfe4:	bf00      	nop
 800cfe6:	bf00      	nop

0800cfe8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800cfe8:	4808      	ldr	r0, [pc, #32]	; (800d00c <prvPortStartFirstTask+0x24>)
 800cfea:	6800      	ldr	r0, [r0, #0]
 800cfec:	6800      	ldr	r0, [r0, #0]
 800cfee:	f380 8808 	msr	MSP, r0
 800cff2:	f04f 0000 	mov.w	r0, #0
 800cff6:	f380 8814 	msr	CONTROL, r0
 800cffa:	b662      	cpsie	i
 800cffc:	b661      	cpsie	f
 800cffe:	f3bf 8f4f 	dsb	sy
 800d002:	f3bf 8f6f 	isb	sy
 800d006:	df00      	svc	0
 800d008:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d00a:	bf00      	nop
 800d00c:	e000ed08 	.word	0xe000ed08

0800d010 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d010:	b580      	push	{r7, lr}
 800d012:	b084      	sub	sp, #16
 800d014:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d016:	4b37      	ldr	r3, [pc, #220]	; (800d0f4 <xPortStartScheduler+0xe4>)
 800d018:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	781b      	ldrb	r3, [r3, #0]
 800d01e:	b2db      	uxtb	r3, r3
 800d020:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	22ff      	movs	r2, #255	; 0xff
 800d026:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	781b      	ldrb	r3, [r3, #0]
 800d02c:	b2db      	uxtb	r3, r3
 800d02e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d030:	78fb      	ldrb	r3, [r7, #3]
 800d032:	b2db      	uxtb	r3, r3
 800d034:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d038:	b2da      	uxtb	r2, r3
 800d03a:	4b2f      	ldr	r3, [pc, #188]	; (800d0f8 <xPortStartScheduler+0xe8>)
 800d03c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d03e:	4b2f      	ldr	r3, [pc, #188]	; (800d0fc <xPortStartScheduler+0xec>)
 800d040:	2207      	movs	r2, #7
 800d042:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d044:	e009      	b.n	800d05a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800d046:	4b2d      	ldr	r3, [pc, #180]	; (800d0fc <xPortStartScheduler+0xec>)
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	3b01      	subs	r3, #1
 800d04c:	4a2b      	ldr	r2, [pc, #172]	; (800d0fc <xPortStartScheduler+0xec>)
 800d04e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d050:	78fb      	ldrb	r3, [r7, #3]
 800d052:	b2db      	uxtb	r3, r3
 800d054:	005b      	lsls	r3, r3, #1
 800d056:	b2db      	uxtb	r3, r3
 800d058:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d05a:	78fb      	ldrb	r3, [r7, #3]
 800d05c:	b2db      	uxtb	r3, r3
 800d05e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d062:	2b80      	cmp	r3, #128	; 0x80
 800d064:	d0ef      	beq.n	800d046 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d066:	4b25      	ldr	r3, [pc, #148]	; (800d0fc <xPortStartScheduler+0xec>)
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	f1c3 0307 	rsb	r3, r3, #7
 800d06e:	2b04      	cmp	r3, #4
 800d070:	d00c      	beq.n	800d08c <xPortStartScheduler+0x7c>
	__asm volatile
 800d072:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d076:	b672      	cpsid	i
 800d078:	f383 8811 	msr	BASEPRI, r3
 800d07c:	f3bf 8f6f 	isb	sy
 800d080:	f3bf 8f4f 	dsb	sy
 800d084:	b662      	cpsie	i
 800d086:	60bb      	str	r3, [r7, #8]
}
 800d088:	bf00      	nop
 800d08a:	e7fe      	b.n	800d08a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d08c:	4b1b      	ldr	r3, [pc, #108]	; (800d0fc <xPortStartScheduler+0xec>)
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	021b      	lsls	r3, r3, #8
 800d092:	4a1a      	ldr	r2, [pc, #104]	; (800d0fc <xPortStartScheduler+0xec>)
 800d094:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d096:	4b19      	ldr	r3, [pc, #100]	; (800d0fc <xPortStartScheduler+0xec>)
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d09e:	4a17      	ldr	r2, [pc, #92]	; (800d0fc <xPortStartScheduler+0xec>)
 800d0a0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	b2da      	uxtb	r2, r3
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d0aa:	4b15      	ldr	r3, [pc, #84]	; (800d100 <xPortStartScheduler+0xf0>)
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	4a14      	ldr	r2, [pc, #80]	; (800d100 <xPortStartScheduler+0xf0>)
 800d0b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d0b4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d0b6:	4b12      	ldr	r3, [pc, #72]	; (800d100 <xPortStartScheduler+0xf0>)
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	4a11      	ldr	r2, [pc, #68]	; (800d100 <xPortStartScheduler+0xf0>)
 800d0bc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d0c0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d0c2:	f000 f8dd 	bl	800d280 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d0c6:	4b0f      	ldr	r3, [pc, #60]	; (800d104 <xPortStartScheduler+0xf4>)
 800d0c8:	2200      	movs	r2, #0
 800d0ca:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d0cc:	f000 f8fc 	bl	800d2c8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d0d0:	4b0d      	ldr	r3, [pc, #52]	; (800d108 <xPortStartScheduler+0xf8>)
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	4a0c      	ldr	r2, [pc, #48]	; (800d108 <xPortStartScheduler+0xf8>)
 800d0d6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d0da:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d0dc:	f7ff ff84 	bl	800cfe8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d0e0:	f7fe ff3a 	bl	800bf58 <vTaskSwitchContext>
	prvTaskExitError();
 800d0e4:	f7ff ff3a 	bl	800cf5c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d0e8:	2300      	movs	r3, #0
}
 800d0ea:	4618      	mov	r0, r3
 800d0ec:	3710      	adds	r7, #16
 800d0ee:	46bd      	mov	sp, r7
 800d0f0:	bd80      	pop	{r7, pc}
 800d0f2:	bf00      	nop
 800d0f4:	e000e400 	.word	0xe000e400
 800d0f8:	2000a848 	.word	0x2000a848
 800d0fc:	2000a84c 	.word	0x2000a84c
 800d100:	e000ed20 	.word	0xe000ed20
 800d104:	20000010 	.word	0x20000010
 800d108:	e000ef34 	.word	0xe000ef34

0800d10c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d10c:	b480      	push	{r7}
 800d10e:	b083      	sub	sp, #12
 800d110:	af00      	add	r7, sp, #0
	__asm volatile
 800d112:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d116:	b672      	cpsid	i
 800d118:	f383 8811 	msr	BASEPRI, r3
 800d11c:	f3bf 8f6f 	isb	sy
 800d120:	f3bf 8f4f 	dsb	sy
 800d124:	b662      	cpsie	i
 800d126:	607b      	str	r3, [r7, #4]
}
 800d128:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d12a:	4b10      	ldr	r3, [pc, #64]	; (800d16c <vPortEnterCritical+0x60>)
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	3301      	adds	r3, #1
 800d130:	4a0e      	ldr	r2, [pc, #56]	; (800d16c <vPortEnterCritical+0x60>)
 800d132:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d134:	4b0d      	ldr	r3, [pc, #52]	; (800d16c <vPortEnterCritical+0x60>)
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	2b01      	cmp	r3, #1
 800d13a:	d111      	bne.n	800d160 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d13c:	4b0c      	ldr	r3, [pc, #48]	; (800d170 <vPortEnterCritical+0x64>)
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	b2db      	uxtb	r3, r3
 800d142:	2b00      	cmp	r3, #0
 800d144:	d00c      	beq.n	800d160 <vPortEnterCritical+0x54>
	__asm volatile
 800d146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d14a:	b672      	cpsid	i
 800d14c:	f383 8811 	msr	BASEPRI, r3
 800d150:	f3bf 8f6f 	isb	sy
 800d154:	f3bf 8f4f 	dsb	sy
 800d158:	b662      	cpsie	i
 800d15a:	603b      	str	r3, [r7, #0]
}
 800d15c:	bf00      	nop
 800d15e:	e7fe      	b.n	800d15e <vPortEnterCritical+0x52>
	}
}
 800d160:	bf00      	nop
 800d162:	370c      	adds	r7, #12
 800d164:	46bd      	mov	sp, r7
 800d166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d16a:	4770      	bx	lr
 800d16c:	20000010 	.word	0x20000010
 800d170:	e000ed04 	.word	0xe000ed04

0800d174 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d174:	b480      	push	{r7}
 800d176:	b083      	sub	sp, #12
 800d178:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d17a:	4b13      	ldr	r3, [pc, #76]	; (800d1c8 <vPortExitCritical+0x54>)
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d10c      	bne.n	800d19c <vPortExitCritical+0x28>
	__asm volatile
 800d182:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d186:	b672      	cpsid	i
 800d188:	f383 8811 	msr	BASEPRI, r3
 800d18c:	f3bf 8f6f 	isb	sy
 800d190:	f3bf 8f4f 	dsb	sy
 800d194:	b662      	cpsie	i
 800d196:	607b      	str	r3, [r7, #4]
}
 800d198:	bf00      	nop
 800d19a:	e7fe      	b.n	800d19a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800d19c:	4b0a      	ldr	r3, [pc, #40]	; (800d1c8 <vPortExitCritical+0x54>)
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	3b01      	subs	r3, #1
 800d1a2:	4a09      	ldr	r2, [pc, #36]	; (800d1c8 <vPortExitCritical+0x54>)
 800d1a4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d1a6:	4b08      	ldr	r3, [pc, #32]	; (800d1c8 <vPortExitCritical+0x54>)
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d105      	bne.n	800d1ba <vPortExitCritical+0x46>
 800d1ae:	2300      	movs	r3, #0
 800d1b0:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d1b2:	683b      	ldr	r3, [r7, #0]
 800d1b4:	f383 8811 	msr	BASEPRI, r3
}
 800d1b8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d1ba:	bf00      	nop
 800d1bc:	370c      	adds	r7, #12
 800d1be:	46bd      	mov	sp, r7
 800d1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c4:	4770      	bx	lr
 800d1c6:	bf00      	nop
 800d1c8:	20000010 	.word	0x20000010
 800d1cc:	00000000 	.word	0x00000000

0800d1d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d1d0:	f3ef 8009 	mrs	r0, PSP
 800d1d4:	f3bf 8f6f 	isb	sy
 800d1d8:	4b15      	ldr	r3, [pc, #84]	; (800d230 <pxCurrentTCBConst>)
 800d1da:	681a      	ldr	r2, [r3, #0]
 800d1dc:	f01e 0f10 	tst.w	lr, #16
 800d1e0:	bf08      	it	eq
 800d1e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d1e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1ea:	6010      	str	r0, [r2, #0]
 800d1ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d1f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d1f4:	b672      	cpsid	i
 800d1f6:	f380 8811 	msr	BASEPRI, r0
 800d1fa:	f3bf 8f4f 	dsb	sy
 800d1fe:	f3bf 8f6f 	isb	sy
 800d202:	b662      	cpsie	i
 800d204:	f7fe fea8 	bl	800bf58 <vTaskSwitchContext>
 800d208:	f04f 0000 	mov.w	r0, #0
 800d20c:	f380 8811 	msr	BASEPRI, r0
 800d210:	bc09      	pop	{r0, r3}
 800d212:	6819      	ldr	r1, [r3, #0]
 800d214:	6808      	ldr	r0, [r1, #0]
 800d216:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d21a:	f01e 0f10 	tst.w	lr, #16
 800d21e:	bf08      	it	eq
 800d220:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d224:	f380 8809 	msr	PSP, r0
 800d228:	f3bf 8f6f 	isb	sy
 800d22c:	4770      	bx	lr
 800d22e:	bf00      	nop

0800d230 <pxCurrentTCBConst>:
 800d230:	2000a21c 	.word	0x2000a21c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d234:	bf00      	nop
 800d236:	bf00      	nop

0800d238 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d238:	b580      	push	{r7, lr}
 800d23a:	b082      	sub	sp, #8
 800d23c:	af00      	add	r7, sp, #0
	__asm volatile
 800d23e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d242:	b672      	cpsid	i
 800d244:	f383 8811 	msr	BASEPRI, r3
 800d248:	f3bf 8f6f 	isb	sy
 800d24c:	f3bf 8f4f 	dsb	sy
 800d250:	b662      	cpsie	i
 800d252:	607b      	str	r3, [r7, #4]
}
 800d254:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d256:	f7fe fdc3 	bl	800bde0 <xTaskIncrementTick>
 800d25a:	4603      	mov	r3, r0
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d003      	beq.n	800d268 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d260:	4b06      	ldr	r3, [pc, #24]	; (800d27c <SysTick_Handler+0x44>)
 800d262:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d266:	601a      	str	r2, [r3, #0]
 800d268:	2300      	movs	r3, #0
 800d26a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d26c:	683b      	ldr	r3, [r7, #0]
 800d26e:	f383 8811 	msr	BASEPRI, r3
}
 800d272:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d274:	bf00      	nop
 800d276:	3708      	adds	r7, #8
 800d278:	46bd      	mov	sp, r7
 800d27a:	bd80      	pop	{r7, pc}
 800d27c:	e000ed04 	.word	0xe000ed04

0800d280 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d280:	b480      	push	{r7}
 800d282:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d284:	4b0b      	ldr	r3, [pc, #44]	; (800d2b4 <vPortSetupTimerInterrupt+0x34>)
 800d286:	2200      	movs	r2, #0
 800d288:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d28a:	4b0b      	ldr	r3, [pc, #44]	; (800d2b8 <vPortSetupTimerInterrupt+0x38>)
 800d28c:	2200      	movs	r2, #0
 800d28e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d290:	4b0a      	ldr	r3, [pc, #40]	; (800d2bc <vPortSetupTimerInterrupt+0x3c>)
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	4a0a      	ldr	r2, [pc, #40]	; (800d2c0 <vPortSetupTimerInterrupt+0x40>)
 800d296:	fba2 2303 	umull	r2, r3, r2, r3
 800d29a:	099b      	lsrs	r3, r3, #6
 800d29c:	4a09      	ldr	r2, [pc, #36]	; (800d2c4 <vPortSetupTimerInterrupt+0x44>)
 800d29e:	3b01      	subs	r3, #1
 800d2a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d2a2:	4b04      	ldr	r3, [pc, #16]	; (800d2b4 <vPortSetupTimerInterrupt+0x34>)
 800d2a4:	2207      	movs	r2, #7
 800d2a6:	601a      	str	r2, [r3, #0]
}
 800d2a8:	bf00      	nop
 800d2aa:	46bd      	mov	sp, r7
 800d2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2b0:	4770      	bx	lr
 800d2b2:	bf00      	nop
 800d2b4:	e000e010 	.word	0xe000e010
 800d2b8:	e000e018 	.word	0xe000e018
 800d2bc:	20000004 	.word	0x20000004
 800d2c0:	10624dd3 	.word	0x10624dd3
 800d2c4:	e000e014 	.word	0xe000e014

0800d2c8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d2c8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d2d8 <vPortEnableVFP+0x10>
 800d2cc:	6801      	ldr	r1, [r0, #0]
 800d2ce:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d2d2:	6001      	str	r1, [r0, #0]
 800d2d4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d2d6:	bf00      	nop
 800d2d8:	e000ed88 	.word	0xe000ed88

0800d2dc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d2dc:	b480      	push	{r7}
 800d2de:	b085      	sub	sp, #20
 800d2e0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d2e2:	f3ef 8305 	mrs	r3, IPSR
 800d2e6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	2b0f      	cmp	r3, #15
 800d2ec:	d916      	bls.n	800d31c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d2ee:	4a19      	ldr	r2, [pc, #100]	; (800d354 <vPortValidateInterruptPriority+0x78>)
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	4413      	add	r3, r2
 800d2f4:	781b      	ldrb	r3, [r3, #0]
 800d2f6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d2f8:	4b17      	ldr	r3, [pc, #92]	; (800d358 <vPortValidateInterruptPriority+0x7c>)
 800d2fa:	781b      	ldrb	r3, [r3, #0]
 800d2fc:	7afa      	ldrb	r2, [r7, #11]
 800d2fe:	429a      	cmp	r2, r3
 800d300:	d20c      	bcs.n	800d31c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800d302:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d306:	b672      	cpsid	i
 800d308:	f383 8811 	msr	BASEPRI, r3
 800d30c:	f3bf 8f6f 	isb	sy
 800d310:	f3bf 8f4f 	dsb	sy
 800d314:	b662      	cpsie	i
 800d316:	607b      	str	r3, [r7, #4]
}
 800d318:	bf00      	nop
 800d31a:	e7fe      	b.n	800d31a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d31c:	4b0f      	ldr	r3, [pc, #60]	; (800d35c <vPortValidateInterruptPriority+0x80>)
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d324:	4b0e      	ldr	r3, [pc, #56]	; (800d360 <vPortValidateInterruptPriority+0x84>)
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	429a      	cmp	r2, r3
 800d32a:	d90c      	bls.n	800d346 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800d32c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d330:	b672      	cpsid	i
 800d332:	f383 8811 	msr	BASEPRI, r3
 800d336:	f3bf 8f6f 	isb	sy
 800d33a:	f3bf 8f4f 	dsb	sy
 800d33e:	b662      	cpsie	i
 800d340:	603b      	str	r3, [r7, #0]
}
 800d342:	bf00      	nop
 800d344:	e7fe      	b.n	800d344 <vPortValidateInterruptPriority+0x68>
	}
 800d346:	bf00      	nop
 800d348:	3714      	adds	r7, #20
 800d34a:	46bd      	mov	sp, r7
 800d34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d350:	4770      	bx	lr
 800d352:	bf00      	nop
 800d354:	e000e3f0 	.word	0xe000e3f0
 800d358:	2000a848 	.word	0x2000a848
 800d35c:	e000ed0c 	.word	0xe000ed0c
 800d360:	2000a84c 	.word	0x2000a84c

0800d364 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d364:	b580      	push	{r7, lr}
 800d366:	b08a      	sub	sp, #40	; 0x28
 800d368:	af00      	add	r7, sp, #0
 800d36a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d36c:	2300      	movs	r3, #0
 800d36e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d370:	f7fe fc78 	bl	800bc64 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d374:	4b5b      	ldr	r3, [pc, #364]	; (800d4e4 <pvPortMalloc+0x180>)
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d101      	bne.n	800d380 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d37c:	f000 f91a 	bl	800d5b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d380:	4b59      	ldr	r3, [pc, #356]	; (800d4e8 <pvPortMalloc+0x184>)
 800d382:	681a      	ldr	r2, [r3, #0]
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	4013      	ands	r3, r2
 800d388:	2b00      	cmp	r3, #0
 800d38a:	f040 8092 	bne.w	800d4b2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	2b00      	cmp	r3, #0
 800d392:	d01f      	beq.n	800d3d4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800d394:	2208      	movs	r2, #8
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	4413      	add	r3, r2
 800d39a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	f003 0307 	and.w	r3, r3, #7
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d016      	beq.n	800d3d4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	f023 0307 	bic.w	r3, r3, #7
 800d3ac:	3308      	adds	r3, #8
 800d3ae:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	f003 0307 	and.w	r3, r3, #7
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d00c      	beq.n	800d3d4 <pvPortMalloc+0x70>
	__asm volatile
 800d3ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3be:	b672      	cpsid	i
 800d3c0:	f383 8811 	msr	BASEPRI, r3
 800d3c4:	f3bf 8f6f 	isb	sy
 800d3c8:	f3bf 8f4f 	dsb	sy
 800d3cc:	b662      	cpsie	i
 800d3ce:	617b      	str	r3, [r7, #20]
}
 800d3d0:	bf00      	nop
 800d3d2:	e7fe      	b.n	800d3d2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d06b      	beq.n	800d4b2 <pvPortMalloc+0x14e>
 800d3da:	4b44      	ldr	r3, [pc, #272]	; (800d4ec <pvPortMalloc+0x188>)
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	687a      	ldr	r2, [r7, #4]
 800d3e0:	429a      	cmp	r2, r3
 800d3e2:	d866      	bhi.n	800d4b2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d3e4:	4b42      	ldr	r3, [pc, #264]	; (800d4f0 <pvPortMalloc+0x18c>)
 800d3e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d3e8:	4b41      	ldr	r3, [pc, #260]	; (800d4f0 <pvPortMalloc+0x18c>)
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d3ee:	e004      	b.n	800d3fa <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800d3f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d3f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d3fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3fc:	685b      	ldr	r3, [r3, #4]
 800d3fe:	687a      	ldr	r2, [r7, #4]
 800d400:	429a      	cmp	r2, r3
 800d402:	d903      	bls.n	800d40c <pvPortMalloc+0xa8>
 800d404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d1f1      	bne.n	800d3f0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d40c:	4b35      	ldr	r3, [pc, #212]	; (800d4e4 <pvPortMalloc+0x180>)
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d412:	429a      	cmp	r2, r3
 800d414:	d04d      	beq.n	800d4b2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d416:	6a3b      	ldr	r3, [r7, #32]
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	2208      	movs	r2, #8
 800d41c:	4413      	add	r3, r2
 800d41e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d422:	681a      	ldr	r2, [r3, #0]
 800d424:	6a3b      	ldr	r3, [r7, #32]
 800d426:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d42a:	685a      	ldr	r2, [r3, #4]
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	1ad2      	subs	r2, r2, r3
 800d430:	2308      	movs	r3, #8
 800d432:	005b      	lsls	r3, r3, #1
 800d434:	429a      	cmp	r2, r3
 800d436:	d921      	bls.n	800d47c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d438:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	4413      	add	r3, r2
 800d43e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d440:	69bb      	ldr	r3, [r7, #24]
 800d442:	f003 0307 	and.w	r3, r3, #7
 800d446:	2b00      	cmp	r3, #0
 800d448:	d00c      	beq.n	800d464 <pvPortMalloc+0x100>
	__asm volatile
 800d44a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d44e:	b672      	cpsid	i
 800d450:	f383 8811 	msr	BASEPRI, r3
 800d454:	f3bf 8f6f 	isb	sy
 800d458:	f3bf 8f4f 	dsb	sy
 800d45c:	b662      	cpsie	i
 800d45e:	613b      	str	r3, [r7, #16]
}
 800d460:	bf00      	nop
 800d462:	e7fe      	b.n	800d462 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d466:	685a      	ldr	r2, [r3, #4]
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	1ad2      	subs	r2, r2, r3
 800d46c:	69bb      	ldr	r3, [r7, #24]
 800d46e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d472:	687a      	ldr	r2, [r7, #4]
 800d474:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d476:	69b8      	ldr	r0, [r7, #24]
 800d478:	f000 f900 	bl	800d67c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d47c:	4b1b      	ldr	r3, [pc, #108]	; (800d4ec <pvPortMalloc+0x188>)
 800d47e:	681a      	ldr	r2, [r3, #0]
 800d480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d482:	685b      	ldr	r3, [r3, #4]
 800d484:	1ad3      	subs	r3, r2, r3
 800d486:	4a19      	ldr	r2, [pc, #100]	; (800d4ec <pvPortMalloc+0x188>)
 800d488:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d48a:	4b18      	ldr	r3, [pc, #96]	; (800d4ec <pvPortMalloc+0x188>)
 800d48c:	681a      	ldr	r2, [r3, #0]
 800d48e:	4b19      	ldr	r3, [pc, #100]	; (800d4f4 <pvPortMalloc+0x190>)
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	429a      	cmp	r2, r3
 800d494:	d203      	bcs.n	800d49e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d496:	4b15      	ldr	r3, [pc, #84]	; (800d4ec <pvPortMalloc+0x188>)
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	4a16      	ldr	r2, [pc, #88]	; (800d4f4 <pvPortMalloc+0x190>)
 800d49c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d49e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4a0:	685a      	ldr	r2, [r3, #4]
 800d4a2:	4b11      	ldr	r3, [pc, #68]	; (800d4e8 <pvPortMalloc+0x184>)
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	431a      	orrs	r2, r3
 800d4a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4aa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d4ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4ae:	2200      	movs	r2, #0
 800d4b0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d4b2:	f7fe fbe5 	bl	800bc80 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d4b6:	69fb      	ldr	r3, [r7, #28]
 800d4b8:	f003 0307 	and.w	r3, r3, #7
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d00c      	beq.n	800d4da <pvPortMalloc+0x176>
	__asm volatile
 800d4c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4c4:	b672      	cpsid	i
 800d4c6:	f383 8811 	msr	BASEPRI, r3
 800d4ca:	f3bf 8f6f 	isb	sy
 800d4ce:	f3bf 8f4f 	dsb	sy
 800d4d2:	b662      	cpsie	i
 800d4d4:	60fb      	str	r3, [r7, #12]
}
 800d4d6:	bf00      	nop
 800d4d8:	e7fe      	b.n	800d4d8 <pvPortMalloc+0x174>
	return pvReturn;
 800d4da:	69fb      	ldr	r3, [r7, #28]
}
 800d4dc:	4618      	mov	r0, r3
 800d4de:	3728      	adds	r7, #40	; 0x28
 800d4e0:	46bd      	mov	sp, r7
 800d4e2:	bd80      	pop	{r7, pc}
 800d4e4:	2001e0d8 	.word	0x2001e0d8
 800d4e8:	2001e0e4 	.word	0x2001e0e4
 800d4ec:	2001e0dc 	.word	0x2001e0dc
 800d4f0:	2001e0d0 	.word	0x2001e0d0
 800d4f4:	2001e0e0 	.word	0x2001e0e0

0800d4f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d4f8:	b580      	push	{r7, lr}
 800d4fa:	b086      	sub	sp, #24
 800d4fc:	af00      	add	r7, sp, #0
 800d4fe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	2b00      	cmp	r3, #0
 800d508:	d04c      	beq.n	800d5a4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d50a:	2308      	movs	r3, #8
 800d50c:	425b      	negs	r3, r3
 800d50e:	697a      	ldr	r2, [r7, #20]
 800d510:	4413      	add	r3, r2
 800d512:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d514:	697b      	ldr	r3, [r7, #20]
 800d516:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d518:	693b      	ldr	r3, [r7, #16]
 800d51a:	685a      	ldr	r2, [r3, #4]
 800d51c:	4b23      	ldr	r3, [pc, #140]	; (800d5ac <vPortFree+0xb4>)
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	4013      	ands	r3, r2
 800d522:	2b00      	cmp	r3, #0
 800d524:	d10c      	bne.n	800d540 <vPortFree+0x48>
	__asm volatile
 800d526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d52a:	b672      	cpsid	i
 800d52c:	f383 8811 	msr	BASEPRI, r3
 800d530:	f3bf 8f6f 	isb	sy
 800d534:	f3bf 8f4f 	dsb	sy
 800d538:	b662      	cpsie	i
 800d53a:	60fb      	str	r3, [r7, #12]
}
 800d53c:	bf00      	nop
 800d53e:	e7fe      	b.n	800d53e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d540:	693b      	ldr	r3, [r7, #16]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	2b00      	cmp	r3, #0
 800d546:	d00c      	beq.n	800d562 <vPortFree+0x6a>
	__asm volatile
 800d548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d54c:	b672      	cpsid	i
 800d54e:	f383 8811 	msr	BASEPRI, r3
 800d552:	f3bf 8f6f 	isb	sy
 800d556:	f3bf 8f4f 	dsb	sy
 800d55a:	b662      	cpsie	i
 800d55c:	60bb      	str	r3, [r7, #8]
}
 800d55e:	bf00      	nop
 800d560:	e7fe      	b.n	800d560 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d562:	693b      	ldr	r3, [r7, #16]
 800d564:	685a      	ldr	r2, [r3, #4]
 800d566:	4b11      	ldr	r3, [pc, #68]	; (800d5ac <vPortFree+0xb4>)
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	4013      	ands	r3, r2
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d019      	beq.n	800d5a4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d570:	693b      	ldr	r3, [r7, #16]
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	2b00      	cmp	r3, #0
 800d576:	d115      	bne.n	800d5a4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d578:	693b      	ldr	r3, [r7, #16]
 800d57a:	685a      	ldr	r2, [r3, #4]
 800d57c:	4b0b      	ldr	r3, [pc, #44]	; (800d5ac <vPortFree+0xb4>)
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	43db      	mvns	r3, r3
 800d582:	401a      	ands	r2, r3
 800d584:	693b      	ldr	r3, [r7, #16]
 800d586:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d588:	f7fe fb6c 	bl	800bc64 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d58c:	693b      	ldr	r3, [r7, #16]
 800d58e:	685a      	ldr	r2, [r3, #4]
 800d590:	4b07      	ldr	r3, [pc, #28]	; (800d5b0 <vPortFree+0xb8>)
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	4413      	add	r3, r2
 800d596:	4a06      	ldr	r2, [pc, #24]	; (800d5b0 <vPortFree+0xb8>)
 800d598:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d59a:	6938      	ldr	r0, [r7, #16]
 800d59c:	f000 f86e 	bl	800d67c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800d5a0:	f7fe fb6e 	bl	800bc80 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d5a4:	bf00      	nop
 800d5a6:	3718      	adds	r7, #24
 800d5a8:	46bd      	mov	sp, r7
 800d5aa:	bd80      	pop	{r7, pc}
 800d5ac:	2001e0e4 	.word	0x2001e0e4
 800d5b0:	2001e0dc 	.word	0x2001e0dc

0800d5b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d5b4:	b480      	push	{r7}
 800d5b6:	b085      	sub	sp, #20
 800d5b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d5ba:	4b29      	ldr	r3, [pc, #164]	; (800d660 <prvHeapInit+0xac>)
 800d5bc:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d5be:	4b29      	ldr	r3, [pc, #164]	; (800d664 <prvHeapInit+0xb0>)
 800d5c0:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	f003 0307 	and.w	r3, r3, #7
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d00c      	beq.n	800d5e6 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	3307      	adds	r3, #7
 800d5d0:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	f023 0307 	bic.w	r3, r3, #7
 800d5d8:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d5da:	68ba      	ldr	r2, [r7, #8]
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	1ad3      	subs	r3, r2, r3
 800d5e0:	4a20      	ldr	r2, [pc, #128]	; (800d664 <prvHeapInit+0xb0>)
 800d5e2:	4413      	add	r3, r2
 800d5e4:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d5ea:	4a1f      	ldr	r2, [pc, #124]	; (800d668 <prvHeapInit+0xb4>)
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d5f0:	4b1d      	ldr	r3, [pc, #116]	; (800d668 <prvHeapInit+0xb4>)
 800d5f2:	2200      	movs	r2, #0
 800d5f4:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	68ba      	ldr	r2, [r7, #8]
 800d5fa:	4413      	add	r3, r2
 800d5fc:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d5fe:	2208      	movs	r2, #8
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	1a9b      	subs	r3, r3, r2
 800d604:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	f023 0307 	bic.w	r3, r3, #7
 800d60c:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	4a16      	ldr	r2, [pc, #88]	; (800d66c <prvHeapInit+0xb8>)
 800d612:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d614:	4b15      	ldr	r3, [pc, #84]	; (800d66c <prvHeapInit+0xb8>)
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	2200      	movs	r2, #0
 800d61a:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d61c:	4b13      	ldr	r3, [pc, #76]	; (800d66c <prvHeapInit+0xb8>)
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	2200      	movs	r2, #0
 800d622:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d628:	683b      	ldr	r3, [r7, #0]
 800d62a:	68fa      	ldr	r2, [r7, #12]
 800d62c:	1ad2      	subs	r2, r2, r3
 800d62e:	683b      	ldr	r3, [r7, #0]
 800d630:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d632:	4b0e      	ldr	r3, [pc, #56]	; (800d66c <prvHeapInit+0xb8>)
 800d634:	681a      	ldr	r2, [r3, #0]
 800d636:	683b      	ldr	r3, [r7, #0]
 800d638:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d63a:	683b      	ldr	r3, [r7, #0]
 800d63c:	685b      	ldr	r3, [r3, #4]
 800d63e:	4a0c      	ldr	r2, [pc, #48]	; (800d670 <prvHeapInit+0xbc>)
 800d640:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d642:	683b      	ldr	r3, [r7, #0]
 800d644:	685b      	ldr	r3, [r3, #4]
 800d646:	4a0b      	ldr	r2, [pc, #44]	; (800d674 <prvHeapInit+0xc0>)
 800d648:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d64a:	4b0b      	ldr	r3, [pc, #44]	; (800d678 <prvHeapInit+0xc4>)
 800d64c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d650:	601a      	str	r2, [r3, #0]
}
 800d652:	bf00      	nop
 800d654:	3714      	adds	r7, #20
 800d656:	46bd      	mov	sp, r7
 800d658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d65c:	4770      	bx	lr
 800d65e:	bf00      	nop
 800d660:	00013880 	.word	0x00013880
 800d664:	2000a850 	.word	0x2000a850
 800d668:	2001e0d0 	.word	0x2001e0d0
 800d66c:	2001e0d8 	.word	0x2001e0d8
 800d670:	2001e0e0 	.word	0x2001e0e0
 800d674:	2001e0dc 	.word	0x2001e0dc
 800d678:	2001e0e4 	.word	0x2001e0e4

0800d67c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d67c:	b480      	push	{r7}
 800d67e:	b085      	sub	sp, #20
 800d680:	af00      	add	r7, sp, #0
 800d682:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d684:	4b28      	ldr	r3, [pc, #160]	; (800d728 <prvInsertBlockIntoFreeList+0xac>)
 800d686:	60fb      	str	r3, [r7, #12]
 800d688:	e002      	b.n	800d690 <prvInsertBlockIntoFreeList+0x14>
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	60fb      	str	r3, [r7, #12]
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	687a      	ldr	r2, [r7, #4]
 800d696:	429a      	cmp	r2, r3
 800d698:	d8f7      	bhi.n	800d68a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	685b      	ldr	r3, [r3, #4]
 800d6a2:	68ba      	ldr	r2, [r7, #8]
 800d6a4:	4413      	add	r3, r2
 800d6a6:	687a      	ldr	r2, [r7, #4]
 800d6a8:	429a      	cmp	r2, r3
 800d6aa:	d108      	bne.n	800d6be <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	685a      	ldr	r2, [r3, #4]
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	685b      	ldr	r3, [r3, #4]
 800d6b4:	441a      	add	r2, r3
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	685b      	ldr	r3, [r3, #4]
 800d6c6:	68ba      	ldr	r2, [r7, #8]
 800d6c8:	441a      	add	r2, r3
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	429a      	cmp	r2, r3
 800d6d0:	d118      	bne.n	800d704 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	681a      	ldr	r2, [r3, #0]
 800d6d6:	4b15      	ldr	r3, [pc, #84]	; (800d72c <prvInsertBlockIntoFreeList+0xb0>)
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	429a      	cmp	r2, r3
 800d6dc:	d00d      	beq.n	800d6fa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	685a      	ldr	r2, [r3, #4]
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	685b      	ldr	r3, [r3, #4]
 800d6e8:	441a      	add	r2, r3
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	681a      	ldr	r2, [r3, #0]
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	601a      	str	r2, [r3, #0]
 800d6f8:	e008      	b.n	800d70c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d6fa:	4b0c      	ldr	r3, [pc, #48]	; (800d72c <prvInsertBlockIntoFreeList+0xb0>)
 800d6fc:	681a      	ldr	r2, [r3, #0]
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	601a      	str	r2, [r3, #0]
 800d702:	e003      	b.n	800d70c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	681a      	ldr	r2, [r3, #0]
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d70c:	68fa      	ldr	r2, [r7, #12]
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	429a      	cmp	r2, r3
 800d712:	d002      	beq.n	800d71a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	687a      	ldr	r2, [r7, #4]
 800d718:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d71a:	bf00      	nop
 800d71c:	3714      	adds	r7, #20
 800d71e:	46bd      	mov	sp, r7
 800d720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d724:	4770      	bx	lr
 800d726:	bf00      	nop
 800d728:	2001e0d0 	.word	0x2001e0d0
 800d72c:	2001e0d8 	.word	0x2001e0d8

0800d730 <MX_TouchGFX_PreOSInit>:

/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
 800d730:	b480      	push	{r7}
 800d732:	af00      	add	r7, sp, #0
}
 800d734:	bf00      	nop
 800d736:	46bd      	mov	sp, r7
 800d738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d73c:	4770      	bx	lr

0800d73e <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 800d73e:	b580      	push	{r7, lr}
 800d740:	af00      	add	r7, sp, #0
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_components_init();
 800d742:	f004 fcc1 	bl	80120c8 <touchgfx_components_init>
  touchgfx_init();
 800d746:	f004 fc95 	bl	8012074 <touchgfx_init>
}
 800d74a:	bf00      	nop
 800d74c:	bd80      	pop	{r7, pc}

0800d74e <TouchGFX_Task>:

/**
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
 800d74e:	b580      	push	{r7, lr}
 800d750:	b082      	sub	sp, #8
 800d752:	af00      	add	r7, sp, #0
 800d754:	6078      	str	r0, [r7, #4]
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 800d756:	f004 fcbf 	bl	80120d8 <touchgfx_taskEntry>
}
 800d75a:	bf00      	nop
 800d75c:	3708      	adds	r7, #8
 800d75e:	46bd      	mov	sp, r7
 800d760:	bd80      	pop	{r7, pc}
	...

0800d764 <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 800d764:	b480      	push	{r7}
 800d766:	b083      	sub	sp, #12
 800d768:	af00      	add	r7, sp, #0
 800d76a:	6078      	str	r0, [r7, #4]
    {
 800d76c:	4a04      	ldr	r2, [pc, #16]	; (800d780 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	601a      	str	r2, [r3, #0]
    }
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	4618      	mov	r0, r3
 800d776:	370c      	adds	r7, #12
 800d778:	46bd      	mov	sp, r7
 800d77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d77e:	4770      	bx	lr
 800d780:	08029f44 	.word	0x08029f44

0800d784 <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 800d784:	b580      	push	{r7, lr}
 800d786:	b082      	sub	sp, #8
 800d788:	af00      	add	r7, sp, #0
 800d78a:	6078      	str	r0, [r7, #4]
    }
 800d78c:	6878      	ldr	r0, [r7, #4]
 800d78e:	f7ff ffe9 	bl	800d764 <_ZN8touchgfx12FontProviderD1Ev>
 800d792:	2104      	movs	r1, #4
 800d794:	6878      	ldr	r0, [r7, #4]
 800d796:	f018 fff6 	bl	8026786 <_ZdlPvj>
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	4618      	mov	r0, r3
 800d79e:	3708      	adds	r7, #8
 800d7a0:	46bd      	mov	sp, r7
 800d7a2:	bd80      	pop	{r7, pc}

0800d7a4 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 800d7a4:	b580      	push	{r7, lr}
 800d7a6:	b082      	sub	sp, #8
 800d7a8:	af00      	add	r7, sp, #0
 800d7aa:	6078      	str	r0, [r7, #4]
 800d7ac:	460b      	mov	r3, r1
 800d7ae:	807b      	strh	r3, [r7, #2]
    switch (typography)
 800d7b0:	887b      	ldrh	r3, [r7, #2]
 800d7b2:	2b02      	cmp	r3, #2
 800d7b4:	d010      	beq.n	800d7d8 <_ZN23ApplicationFontProvider7getFontEt+0x34>
 800d7b6:	2b02      	cmp	r3, #2
 800d7b8:	dc13      	bgt.n	800d7e2 <_ZN23ApplicationFontProvider7getFontEt+0x3e>
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d002      	beq.n	800d7c4 <_ZN23ApplicationFontProvider7getFontEt+0x20>
 800d7be:	2b01      	cmp	r3, #1
 800d7c0:	d005      	beq.n	800d7ce <_ZN23ApplicationFontProvider7getFontEt+0x2a>
 800d7c2:	e00e      	b.n	800d7e2 <_ZN23ApplicationFontProvider7getFontEt+0x3e>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 800d7c4:	f001 ff5a 	bl	800f67c <_ZN17TypedTextDatabase8getFontsEv>
 800d7c8:	4603      	mov	r3, r0
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	e00a      	b.n	800d7e4 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 800d7ce:	f001 ff55 	bl	800f67c <_ZN17TypedTextDatabase8getFontsEv>
 800d7d2:	4603      	mov	r3, r0
 800d7d4:	685b      	ldr	r3, [r3, #4]
 800d7d6:	e005      	b.n	800d7e4 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800d7d8:	f001 ff50 	bl	800f67c <_ZN17TypedTextDatabase8getFontsEv>
 800d7dc:	4603      	mov	r3, r0
 800d7de:	689b      	ldr	r3, [r3, #8]
 800d7e0:	e000      	b.n	800d7e4 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    default:
        return 0;
 800d7e2:	2300      	movs	r3, #0
    }
}
 800d7e4:	4618      	mov	r0, r3
 800d7e6:	3708      	adds	r7, #8
 800d7e8:	46bd      	mov	sp, r7
 800d7ea:	bd80      	pop	{r7, pc}

0800d7ec <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 800d7ec:	b580      	push	{r7, lr}
 800d7ee:	b082      	sub	sp, #8
 800d7f0:	af00      	add	r7, sp, #0
 800d7f2:	6078      	str	r0, [r7, #4]
 800d7f4:	4a05      	ldr	r2, [pc, #20]	; (800d80c <_ZN23ApplicationFontProviderD1Ev+0x20>)
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	601a      	str	r2, [r3, #0]
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	4618      	mov	r0, r3
 800d7fe:	f7ff ffb1 	bl	800d764 <_ZN8touchgfx12FontProviderD1Ev>
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	4618      	mov	r0, r3
 800d806:	3708      	adds	r7, #8
 800d808:	46bd      	mov	sp, r7
 800d80a:	bd80      	pop	{r7, pc}
 800d80c:	08029f30 	.word	0x08029f30

0800d810 <_ZN23ApplicationFontProviderD0Ev>:
 800d810:	b580      	push	{r7, lr}
 800d812:	b082      	sub	sp, #8
 800d814:	af00      	add	r7, sp, #0
 800d816:	6078      	str	r0, [r7, #4]
 800d818:	6878      	ldr	r0, [r7, #4]
 800d81a:	f7ff ffe7 	bl	800d7ec <_ZN23ApplicationFontProviderD1Ev>
 800d81e:	2104      	movs	r1, #4
 800d820:	6878      	ldr	r0, [r7, #4]
 800d822:	f018 ffb0 	bl	8026786 <_ZdlPvj>
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	4618      	mov	r0, r3
 800d82a:	3708      	adds	r7, #8
 800d82c:	46bd      	mov	sp, r7
 800d82e:	bd80      	pop	{r7, pc}

0800d830 <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 800d830:	b480      	push	{r7}
 800d832:	b083      	sub	sp, #12
 800d834:	af00      	add	r7, sp, #0
 800d836:	6078      	str	r0, [r7, #4]
    {
 800d838:	4a04      	ldr	r2, [pc, #16]	; (800d84c <_ZN8touchgfx4FontD1Ev+0x1c>)
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	601a      	str	r2, [r3, #0]
    }
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	4618      	mov	r0, r3
 800d842:	370c      	adds	r7, #12
 800d844:	46bd      	mov	sp, r7
 800d846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d84a:	4770      	bx	lr
 800d84c:	0802a1ec 	.word	0x0802a1ec

0800d850 <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 800d850:	b580      	push	{r7, lr}
 800d852:	b082      	sub	sp, #8
 800d854:	af00      	add	r7, sp, #0
 800d856:	6078      	str	r0, [r7, #4]
    }
 800d858:	6878      	ldr	r0, [r7, #4]
 800d85a:	f7ff ffe9 	bl	800d830 <_ZN8touchgfx4FontD1Ev>
 800d85e:	2114      	movs	r1, #20
 800d860:	6878      	ldr	r0, [r7, #4]
 800d862:	f018 ff90 	bl	8026786 <_ZdlPvj>
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	4618      	mov	r0, r3
 800d86a:	3708      	adds	r7, #8
 800d86c:	46bd      	mov	sp, r7
 800d86e:	bd80      	pop	{r7, pc}

0800d870 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 800d870:	b590      	push	{r4, r7, lr}
 800d872:	b087      	sub	sp, #28
 800d874:	af00      	add	r7, sp, #0
 800d876:	6078      	str	r0, [r7, #4]
 800d878:	460b      	mov	r3, r1
 800d87a:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 800d87c:	887b      	ldrh	r3, [r7, #2]
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d101      	bne.n	800d886 <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 800d882:	2300      	movs	r3, #0
 800d884:	e010      	b.n	800d8a8 <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 800d886:	2300      	movs	r3, #0
 800d888:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 800d88a:	2300      	movs	r3, #0
 800d88c:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	3308      	adds	r3, #8
 800d894:	681c      	ldr	r4, [r3, #0]
 800d896:	f107 030f 	add.w	r3, r7, #15
 800d89a:	f107 0210 	add.w	r2, r7, #16
 800d89e:	8879      	ldrh	r1, [r7, #2]
 800d8a0:	6878      	ldr	r0, [r7, #4]
 800d8a2:	47a0      	blx	r4
 800d8a4:	6178      	str	r0, [r7, #20]
        return glyph;
 800d8a6:	697b      	ldr	r3, [r7, #20]
    }
 800d8a8:	4618      	mov	r0, r3
 800d8aa:	371c      	adds	r7, #28
 800d8ac:	46bd      	mov	sp, r7
 800d8ae:	bd90      	pop	{r4, r7, pc}

0800d8b0 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 800d8b0:	b480      	push	{r7}
 800d8b2:	b083      	sub	sp, #12
 800d8b4:	af00      	add	r7, sp, #0
 800d8b6:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	89db      	ldrh	r3, [r3, #14]
    }
 800d8bc:	4618      	mov	r0, r3
 800d8be:	370c      	adds	r7, #12
 800d8c0:	46bd      	mov	sp, r7
 800d8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c6:	4770      	bx	lr

0800d8c8 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 800d8c8:	b480      	push	{r7}
 800d8ca:	b083      	sub	sp, #12
 800d8cc:	af00      	add	r7, sp, #0
 800d8ce:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	8a1b      	ldrh	r3, [r3, #16]
    }
 800d8d4:	4618      	mov	r0, r3
 800d8d6:	370c      	adds	r7, #12
 800d8d8:	46bd      	mov	sp, r7
 800d8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8de:	4770      	bx	lr

0800d8e0 <_ZNK8touchgfx4Font11getBaselineEv>:
     * @return The height in pixels of this font.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
 800d8e0:	b480      	push	{r7}
 800d8e2:	b083      	sub	sp, #12
 800d8e4:	af00      	add	r7, sp, #0
 800d8e6:	6078      	str	r0, [r7, #4]
    {
        return baselineHeight;
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	88db      	ldrh	r3, [r3, #6]
    }
 800d8ec:	4618      	mov	r0, r3
 800d8ee:	370c      	adds	r7, #12
 800d8f0:	46bd      	mov	sp, r7
 800d8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8f6:	4770      	bx	lr

0800d8f8 <_ZNK8touchgfx4Font9getHeightEv>:
     * Returns the height of a font. The font may exceed the top by getPixelsAboveTop() or the
     * bottom by getPixelsBelowBottom.
     *
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
 800d8f8:	b480      	push	{r7}
 800d8fa:	b083      	sub	sp, #12
 800d8fc:	af00      	add	r7, sp, #0
 800d8fe:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	889b      	ldrh	r3, [r3, #4]
    }
 800d904:	4618      	mov	r0, r3
 800d906:	370c      	adds	r7, #12
 800d908:	46bd      	mov	sp, r7
 800d90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d90e:	4770      	bx	lr

0800d910 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 800d910:	b480      	push	{r7}
 800d912:	b083      	sub	sp, #12
 800d914:	af00      	add	r7, sp, #0
 800d916:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	7a9b      	ldrb	r3, [r3, #10]
 800d91c:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800d920:	b2db      	uxtb	r3, r3
    }
 800d922:	4618      	mov	r0, r3
 800d924:	370c      	adds	r7, #12
 800d926:	46bd      	mov	sp, r7
 800d928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d92c:	4770      	bx	lr

0800d92e <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 800d92e:	b480      	push	{r7}
 800d930:	b083      	sub	sp, #12
 800d932:	af00      	add	r7, sp, #0
 800d934:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	7a9b      	ldrb	r3, [r3, #10]
 800d93a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800d93e:	b2db      	uxtb	r3, r3
    }
 800d940:	4618      	mov	r0, r3
 800d942:	370c      	adds	r7, #12
 800d944:	46bd      	mov	sp, r7
 800d946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d94a:	4770      	bx	lr

0800d94c <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 800d94c:	b580      	push	{r7, lr}
 800d94e:	b082      	sub	sp, #8
 800d950:	af00      	add	r7, sp, #0
 800d952:	6078      	str	r0, [r7, #4]
 800d954:	4a05      	ldr	r2, [pc, #20]	; (800d96c <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	601a      	str	r2, [r3, #0]
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	4618      	mov	r0, r3
 800d95e:	f7ff ff67 	bl	800d830 <_ZN8touchgfx4FontD1Ev>
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	4618      	mov	r0, r3
 800d966:	3708      	adds	r7, #8
 800d968:	46bd      	mov	sp, r7
 800d96a:	bd80      	pop	{r7, pc}
 800d96c:	0802b1cc 	.word	0x0802b1cc

0800d970 <_ZN8touchgfx9ConstFontD0Ev>:
 800d970:	b580      	push	{r7, lr}
 800d972:	b082      	sub	sp, #8
 800d974:	af00      	add	r7, sp, #0
 800d976:	6078      	str	r0, [r7, #4]
 800d978:	6878      	ldr	r0, [r7, #4]
 800d97a:	f7ff ffe7 	bl	800d94c <_ZN8touchgfx9ConstFontD1Ev>
 800d97e:	211c      	movs	r1, #28
 800d980:	6878      	ldr	r0, [r7, #4]
 800d982:	f018 ff00 	bl	8026786 <_ZdlPvj>
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	4618      	mov	r0, r3
 800d98a:	3708      	adds	r7, #8
 800d98c:	46bd      	mov	sp, r7
 800d98e:	bd80      	pop	{r7, pc}

0800d990 <_ZN8touchgfx13GeneratedFontD1Ev>:

#include <touchgfx/ConstFont.hpp>

namespace touchgfx
{
class GeneratedFont : public ConstFont
 800d990:	b580      	push	{r7, lr}
 800d992:	b082      	sub	sp, #8
 800d994:	af00      	add	r7, sp, #0
 800d996:	6078      	str	r0, [r7, #4]
 800d998:	4a05      	ldr	r2, [pc, #20]	; (800d9b0 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	601a      	str	r2, [r3, #0]
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	4618      	mov	r0, r3
 800d9a2:	f7ff ffd3 	bl	800d94c <_ZN8touchgfx9ConstFontD1Ev>
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	4618      	mov	r0, r3
 800d9aa:	3708      	adds	r7, #8
 800d9ac:	46bd      	mov	sp, r7
 800d9ae:	bd80      	pop	{r7, pc}
 800d9b0:	08029f68 	.word	0x08029f68

0800d9b4 <_ZN8touchgfx13GeneratedFontD0Ev>:
 800d9b4:	b580      	push	{r7, lr}
 800d9b6:	b082      	sub	sp, #8
 800d9b8:	af00      	add	r7, sp, #0
 800d9ba:	6078      	str	r0, [r7, #4]
 800d9bc:	6878      	ldr	r0, [r7, #4]
 800d9be:	f7ff ffe7 	bl	800d990 <_ZN8touchgfx13GeneratedFontD1Ev>
 800d9c2:	212c      	movs	r1, #44	; 0x2c
 800d9c4:	6878      	ldr	r0, [r7, #4]
 800d9c6:	f018 fede 	bl	8026786 <_ZdlPvj>
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	4618      	mov	r0, r3
 800d9ce:	3708      	adds	r7, #8
 800d9d0:	46bd      	mov	sp, r7
 800d9d2:	bd80      	pop	{r7, pc}

0800d9d4 <_ZN8touchgfx9TypedTextD1Ev>:
        : typedTextId(id)
    {
    }

    /** Finalizes an instance of the TypedText class. */
    virtual ~TypedText()
 800d9d4:	b480      	push	{r7}
 800d9d6:	b083      	sub	sp, #12
 800d9d8:	af00      	add	r7, sp, #0
 800d9da:	6078      	str	r0, [r7, #4]
    {
 800d9dc:	4a04      	ldr	r2, [pc, #16]	; (800d9f0 <_ZN8touchgfx9TypedTextD1Ev+0x1c>)
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	601a      	str	r2, [r3, #0]
    }
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	4618      	mov	r0, r3
 800d9e6:	370c      	adds	r7, #12
 800d9e8:	46bd      	mov	sp, r7
 800d9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ee:	4770      	bx	lr
 800d9f0:	08029f58 	.word	0x08029f58

0800d9f4 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 800d9f4:	b580      	push	{r7, lr}
 800d9f6:	b082      	sub	sp, #8
 800d9f8:	af00      	add	r7, sp, #0
 800d9fa:	6078      	str	r0, [r7, #4]
    }
 800d9fc:	6878      	ldr	r0, [r7, #4]
 800d9fe:	f7ff ffe9 	bl	800d9d4 <_ZN8touchgfx9TypedTextD1Ev>
 800da02:	2108      	movs	r1, #8
 800da04:	6878      	ldr	r0, [r7, #4]
 800da06:	f018 febe 	bl	8026786 <_ZdlPvj>
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	4618      	mov	r0, r3
 800da0e:	3708      	adds	r7, #8
 800da10:	46bd      	mov	sp, r7
 800da12:	bd80      	pop	{r7, pc}

0800da14 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:

    virtual const uint8_t* getPixelData(const GlyphNode* glyph) const;

    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
 800da14:	b480      	push	{r7}
 800da16:	b083      	sub	sp, #12
 800da18:	af00      	add	r7, sp, #0
 800da1a:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    }
 800da20:	4618      	mov	r0, r3
 800da22:	370c      	adds	r7, #12
 800da24:	46bd      	mov	sp, r7
 800da26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da2a:	4770      	bx	lr

0800da2c <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
 800da2c:	b480      	push	{r7}
 800da2e:	b083      	sub	sp, #12
 800da30:	af00      	add	r7, sp, #0
 800da32:	6078      	str	r0, [r7, #4]
    {
        return arabicTable;
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    }
 800da38:	4618      	mov	r0, r3
 800da3a:	370c      	adds	r7, #12
 800da3c:	46bd      	mov	sp, r7
 800da3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da42:	4770      	bx	lr

0800da44 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 800da44:	b580      	push	{r7, lr}
 800da46:	b08e      	sub	sp, #56	; 0x38
 800da48:	af0a      	add	r7, sp, #40	; 0x28
 800da4a:	60f8      	str	r0, [r7, #12]
 800da4c:	60b9      	str	r1, [r7, #8]
 800da4e:	4611      	mov	r1, r2
 800da50:	461a      	mov	r2, r3
 800da52:	460b      	mov	r3, r1
 800da54:	80fb      	strh	r3, [r7, #6]
 800da56:	4613      	mov	r3, r2
 800da58:	80bb      	strh	r3, [r7, #4]
    : ConstFont(glyphs, numGlyphs, height, baseline, pixAboveTop, pixBelowBottom, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
      glyphData(glyphDataInternalFlash),
      kerningData(kerningList),
      gsubTable(gsubData),
      arabicTable(formsTable)
 800da5a:	68f8      	ldr	r0, [r7, #12]
 800da5c:	88b9      	ldrh	r1, [r7, #4]
 800da5e:	88fa      	ldrh	r2, [r7, #6]
 800da60:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800da64:	9308      	str	r3, [sp, #32]
 800da66:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800da68:	9307      	str	r3, [sp, #28]
 800da6a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800da6e:	9306      	str	r3, [sp, #24]
 800da70:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800da74:	9305      	str	r3, [sp, #20]
 800da76:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800da7a:	9304      	str	r3, [sp, #16]
 800da7c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800da80:	9303      	str	r3, [sp, #12]
 800da82:	f897 3020 	ldrb.w	r3, [r7, #32]
 800da86:	9302      	str	r3, [sp, #8]
 800da88:	7f3b      	ldrb	r3, [r7, #28]
 800da8a:	9301      	str	r3, [sp, #4]
 800da8c:	8b3b      	ldrh	r3, [r7, #24]
 800da8e:	9300      	str	r3, [sp, #0]
 800da90:	460b      	mov	r3, r1
 800da92:	68b9      	ldr	r1, [r7, #8]
 800da94:	f00b fce8 	bl	8019468 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 800da98:	4a09      	ldr	r2, [pc, #36]	; (800dac0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x7c>)
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	601a      	str	r2, [r3, #0]
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800daa2:	61da      	str	r2, [r3, #28]
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800daa8:	621a      	str	r2, [r3, #32]
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800daae:	625a      	str	r2, [r3, #36]	; 0x24
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dab4:	629a      	str	r2, [r3, #40]	; 0x28
{
}
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	4618      	mov	r0, r3
 800daba:	3710      	adds	r7, #16
 800dabc:	46bd      	mov	sp, r7
 800dabe:	bd80      	pop	{r7, pc}
 800dac0:	08029f68 	.word	0x08029f68

0800dac4 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 800dac4:	b480      	push	{r7}
 800dac6:	b085      	sub	sp, #20
 800dac8:	af00      	add	r7, sp, #0
 800daca:	6078      	str	r0, [r7, #4]
 800dacc:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	69db      	ldr	r3, [r3, #28]
 800dad2:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 800dad4:	683b      	ldr	r3, [r7, #0]
 800dad6:	889b      	ldrh	r3, [r3, #4]
 800dad8:	0adb      	lsrs	r3, r3, #11
 800dada:	b29b      	uxth	r3, r3
 800dadc:	009b      	lsls	r3, r3, #2
 800dade:	68fa      	ldr	r2, [r7, #12]
 800dae0:	4413      	add	r3, r2
 800dae2:	681a      	ldr	r2, [r3, #0]
 800dae4:	683b      	ldr	r3, [r7, #0]
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	4413      	add	r3, r2
}
 800daea:	4618      	mov	r0, r3
 800daec:	3714      	adds	r7, #20
 800daee:	46bd      	mov	sp, r7
 800daf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daf4:	4770      	bx	lr

0800daf6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800daf6:	b480      	push	{r7}
 800daf8:	b089      	sub	sp, #36	; 0x24
 800dafa:	af00      	add	r7, sp, #0
 800dafc:	60f8      	str	r0, [r7, #12]
 800dafe:	460b      	mov	r3, r1
 800db00:	607a      	str	r2, [r7, #4]
 800db02:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	2b00      	cmp	r3, #0
 800db08:	d003      	beq.n	800db12 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	7b1b      	ldrb	r3, [r3, #12]
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d101      	bne.n	800db16 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 800db12:	2300      	movs	r3, #0
 800db14:	e030      	b.n	800db78 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	6a1a      	ldr	r2, [r3, #32]
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 800db1e:	697b      	ldr	r3, [r7, #20]
 800db20:	7b5b      	ldrb	r3, [r3, #13]
 800db22:	021b      	lsls	r3, r3, #8
 800db24:	b21b      	sxth	r3, r3
 800db26:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800db2a:	b219      	sxth	r1, r3
 800db2c:	697b      	ldr	r3, [r7, #20]
 800db2e:	7adb      	ldrb	r3, [r3, #11]
 800db30:	b21b      	sxth	r3, r3
 800db32:	430b      	orrs	r3, r1
 800db34:	b21b      	sxth	r3, r3
 800db36:	b29b      	uxth	r3, r3
 800db38:	009b      	lsls	r3, r3, #2
 800db3a:	4413      	add	r3, r2
 800db3c:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	7b1b      	ldrb	r3, [r3, #12]
 800db42:	837b      	strh	r3, [r7, #26]
 800db44:	8b7b      	ldrh	r3, [r7, #26]
 800db46:	2b00      	cmp	r3, #0
 800db48:	d015      	beq.n	800db76 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    {
        if (prevChar == kerndata->unicodePrevChar)
 800db4a:	69fb      	ldr	r3, [r7, #28]
 800db4c:	881b      	ldrh	r3, [r3, #0]
 800db4e:	897a      	ldrh	r2, [r7, #10]
 800db50:	429a      	cmp	r2, r3
 800db52:	d103      	bne.n	800db5c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
        {
            return kerndata->distance;
 800db54:	69fb      	ldr	r3, [r7, #28]
 800db56:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800db5a:	e00d      	b.n	800db78 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        }
        if (prevChar < kerndata->unicodePrevChar)
 800db5c:	69fb      	ldr	r3, [r7, #28]
 800db5e:	881b      	ldrh	r3, [r3, #0]
 800db60:	897a      	ldrh	r2, [r7, #10]
 800db62:	429a      	cmp	r2, r3
 800db64:	d306      	bcc.n	800db74 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x7e>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800db66:	8b7b      	ldrh	r3, [r7, #26]
 800db68:	3b01      	subs	r3, #1
 800db6a:	837b      	strh	r3, [r7, #26]
 800db6c:	69fb      	ldr	r3, [r7, #28]
 800db6e:	3304      	adds	r3, #4
 800db70:	61fb      	str	r3, [r7, #28]
 800db72:	e7e7      	b.n	800db44 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x4e>
        {
            break;
 800db74:	bf00      	nop
        }
    }
    return 0;
 800db76:	2300      	movs	r3, #0
}
 800db78:	4618      	mov	r0, r3
 800db7a:	3724      	adds	r7, #36	; 0x24
 800db7c:	46bd      	mov	sp, r7
 800db7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db82:	4770      	bx	lr

0800db84 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800db84:	b580      	push	{r7, lr}
 800db86:	af00      	add	r7, sp, #0
 800db88:	4801      	ldr	r0, [pc, #4]	; (800db90 <__tcf_0+0xc>)
 800db8a:	f7ff ff01 	bl	800d990 <_ZN8touchgfx13GeneratedFontD1Ev>
 800db8e:	bd80      	pop	{r7, pc}
 800db90:	2001e0e8 	.word	0x2001e0e8

0800db94 <_Z23getFont_verdana_10_4bppv>:
{
 800db94:	b580      	push	{r7, lr}
 800db96:	b08e      	sub	sp, #56	; 0x38
 800db98:	af0e      	add	r7, sp, #56	; 0x38
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800db9a:	4b21      	ldr	r3, [pc, #132]	; (800dc20 <_Z23getFont_verdana_10_4bppv+0x8c>)
 800db9c:	781b      	ldrb	r3, [r3, #0]
 800db9e:	f3bf 8f5b 	dmb	ish
 800dba2:	b2db      	uxtb	r3, r3
 800dba4:	f003 0301 	and.w	r3, r3, #1
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	bf0c      	ite	eq
 800dbac:	2301      	moveq	r3, #1
 800dbae:	2300      	movne	r3, #0
 800dbb0:	b2db      	uxtb	r3, r3
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d030      	beq.n	800dc18 <_Z23getFont_verdana_10_4bppv+0x84>
 800dbb6:	481a      	ldr	r0, [pc, #104]	; (800dc20 <_Z23getFont_verdana_10_4bppv+0x8c>)
 800dbb8:	f018 fde7 	bl	802678a <__cxa_guard_acquire>
 800dbbc:	4603      	mov	r3, r0
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	bf14      	ite	ne
 800dbc2:	2301      	movne	r3, #1
 800dbc4:	2300      	moveq	r3, #0
 800dbc6:	b2db      	uxtb	r3, r3
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d025      	beq.n	800dc18 <_Z23getFont_verdana_10_4bppv+0x84>
 800dbcc:	2300      	movs	r3, #0
 800dbce:	930c      	str	r3, [sp, #48]	; 0x30
 800dbd0:	2300      	movs	r3, #0
 800dbd2:	930b      	str	r3, [sp, #44]	; 0x2c
 800dbd4:	2300      	movs	r3, #0
 800dbd6:	930a      	str	r3, [sp, #40]	; 0x28
 800dbd8:	233f      	movs	r3, #63	; 0x3f
 800dbda:	9309      	str	r3, [sp, #36]	; 0x24
 800dbdc:	4b11      	ldr	r3, [pc, #68]	; (800dc24 <_Z23getFont_verdana_10_4bppv+0x90>)
 800dbde:	9308      	str	r3, [sp, #32]
 800dbe0:	4b11      	ldr	r3, [pc, #68]	; (800dc28 <_Z23getFont_verdana_10_4bppv+0x94>)
 800dbe2:	9307      	str	r3, [sp, #28]
 800dbe4:	2300      	movs	r3, #0
 800dbe6:	9306      	str	r3, [sp, #24]
 800dbe8:	2300      	movs	r3, #0
 800dbea:	9305      	str	r3, [sp, #20]
 800dbec:	2301      	movs	r3, #1
 800dbee:	9304      	str	r3, [sp, #16]
 800dbf0:	2304      	movs	r3, #4
 800dbf2:	9303      	str	r3, [sp, #12]
 800dbf4:	2300      	movs	r3, #0
 800dbf6:	9302      	str	r3, [sp, #8]
 800dbf8:	2300      	movs	r3, #0
 800dbfa:	9301      	str	r3, [sp, #4]
 800dbfc:	230a      	movs	r3, #10
 800dbfe:	9300      	str	r3, [sp, #0]
 800dc00:	230a      	movs	r3, #10
 800dc02:	2201      	movs	r2, #1
 800dc04:	4909      	ldr	r1, [pc, #36]	; (800dc2c <_Z23getFont_verdana_10_4bppv+0x98>)
 800dc06:	480a      	ldr	r0, [pc, #40]	; (800dc30 <_Z23getFont_verdana_10_4bppv+0x9c>)
 800dc08:	f7ff ff1c 	bl	800da44 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800dc0c:	4809      	ldr	r0, [pc, #36]	; (800dc34 <_Z23getFont_verdana_10_4bppv+0xa0>)
 800dc0e:	f018 fe07 	bl	8026820 <atexit>
 800dc12:	4803      	ldr	r0, [pc, #12]	; (800dc20 <_Z23getFont_verdana_10_4bppv+0x8c>)
 800dc14:	f018 fdc5 	bl	80267a2 <__cxa_guard_release>
    return verdana_10_4bpp;
 800dc18:	4b05      	ldr	r3, [pc, #20]	; (800dc30 <_Z23getFont_verdana_10_4bppv+0x9c>)
}
 800dc1a:	4618      	mov	r0, r3
 800dc1c:	46bd      	mov	sp, r7
 800dc1e:	bd80      	pop	{r7, pc}
 800dc20:	2001e114 	.word	0x2001e114
 800dc24:	0802b5f4 	.word	0x0802b5f4
 800dc28:	0802b614 	.word	0x0802b614
 800dc2c:	90177a98 	.word	0x90177a98
 800dc30:	2001e0e8 	.word	0x2001e0e8
 800dc34:	0800db85 	.word	0x0800db85

0800dc38 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 4, 24, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 112, 0, 0);
 800dc38:	b580      	push	{r7, lr}
 800dc3a:	af00      	add	r7, sp, #0
 800dc3c:	4801      	ldr	r0, [pc, #4]	; (800dc44 <__tcf_0+0xc>)
 800dc3e:	f7ff fea7 	bl	800d990 <_ZN8touchgfx13GeneratedFontD1Ev>
 800dc42:	bd80      	pop	{r7, pc}
 800dc44:	2001e118 	.word	0x2001e118

0800dc48 <_Z23getFont_verdana_20_4bppv>:
{
 800dc48:	b580      	push	{r7, lr}
 800dc4a:	b08e      	sub	sp, #56	; 0x38
 800dc4c:	af0e      	add	r7, sp, #56	; 0x38
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 4, 24, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 112, 0, 0);
 800dc4e:	4b21      	ldr	r3, [pc, #132]	; (800dcd4 <_Z23getFont_verdana_20_4bppv+0x8c>)
 800dc50:	781b      	ldrb	r3, [r3, #0]
 800dc52:	f3bf 8f5b 	dmb	ish
 800dc56:	b2db      	uxtb	r3, r3
 800dc58:	f003 0301 	and.w	r3, r3, #1
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	bf0c      	ite	eq
 800dc60:	2301      	moveq	r3, #1
 800dc62:	2300      	movne	r3, #0
 800dc64:	b2db      	uxtb	r3, r3
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d030      	beq.n	800dccc <_Z23getFont_verdana_20_4bppv+0x84>
 800dc6a:	481a      	ldr	r0, [pc, #104]	; (800dcd4 <_Z23getFont_verdana_20_4bppv+0x8c>)
 800dc6c:	f018 fd8d 	bl	802678a <__cxa_guard_acquire>
 800dc70:	4603      	mov	r3, r0
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	bf14      	ite	ne
 800dc76:	2301      	movne	r3, #1
 800dc78:	2300      	moveq	r3, #0
 800dc7a:	b2db      	uxtb	r3, r3
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d025      	beq.n	800dccc <_Z23getFont_verdana_20_4bppv+0x84>
 800dc80:	2300      	movs	r3, #0
 800dc82:	930c      	str	r3, [sp, #48]	; 0x30
 800dc84:	2300      	movs	r3, #0
 800dc86:	930b      	str	r3, [sp, #44]	; 0x2c
 800dc88:	2370      	movs	r3, #112	; 0x70
 800dc8a:	930a      	str	r3, [sp, #40]	; 0x28
 800dc8c:	233f      	movs	r3, #63	; 0x3f
 800dc8e:	9309      	str	r3, [sp, #36]	; 0x24
 800dc90:	4b11      	ldr	r3, [pc, #68]	; (800dcd8 <_Z23getFont_verdana_20_4bppv+0x90>)
 800dc92:	9308      	str	r3, [sp, #32]
 800dc94:	4b11      	ldr	r3, [pc, #68]	; (800dcdc <_Z23getFont_verdana_20_4bppv+0x94>)
 800dc96:	9307      	str	r3, [sp, #28]
 800dc98:	2300      	movs	r3, #0
 800dc9a:	9306      	str	r3, [sp, #24]
 800dc9c:	2300      	movs	r3, #0
 800dc9e:	9305      	str	r3, [sp, #20]
 800dca0:	2301      	movs	r3, #1
 800dca2:	9304      	str	r3, [sp, #16]
 800dca4:	2304      	movs	r3, #4
 800dca6:	9303      	str	r3, [sp, #12]
 800dca8:	2300      	movs	r3, #0
 800dcaa:	9302      	str	r3, [sp, #8]
 800dcac:	2300      	movs	r3, #0
 800dcae:	9301      	str	r3, [sp, #4]
 800dcb0:	2314      	movs	r3, #20
 800dcb2:	9300      	str	r3, [sp, #0]
 800dcb4:	2318      	movs	r3, #24
 800dcb6:	2204      	movs	r2, #4
 800dcb8:	4909      	ldr	r1, [pc, #36]	; (800dce0 <_Z23getFont_verdana_20_4bppv+0x98>)
 800dcba:	480a      	ldr	r0, [pc, #40]	; (800dce4 <_Z23getFont_verdana_20_4bppv+0x9c>)
 800dcbc:	f7ff fec2 	bl	800da44 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800dcc0:	4809      	ldr	r0, [pc, #36]	; (800dce8 <_Z23getFont_verdana_20_4bppv+0xa0>)
 800dcc2:	f018 fdad 	bl	8026820 <atexit>
 800dcc6:	4803      	ldr	r0, [pc, #12]	; (800dcd4 <_Z23getFont_verdana_20_4bppv+0x8c>)
 800dcc8:	f018 fd6b 	bl	80267a2 <__cxa_guard_release>
    return verdana_20_4bpp;
 800dccc:	4b05      	ldr	r3, [pc, #20]	; (800dce4 <_Z23getFont_verdana_20_4bppv+0x9c>)
}
 800dcce:	4618      	mov	r0, r3
 800dcd0:	46bd      	mov	sp, r7
 800dcd2:	bd80      	pop	{r7, pc}
 800dcd4:	2001e144 	.word	0x2001e144
 800dcd8:	0802b5f8 	.word	0x0802b5f8
 800dcdc:	0802b618 	.word	0x0802b618
 800dce0:	90177aa8 	.word	0x90177aa8
 800dce4:	2001e118 	.word	0x2001e118
 800dce8:	0800dc39 	.word	0x0800dc39

0800dcec <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 11, 41, 40, 0, 0, 4, 1, 0, 1, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800dcec:	b580      	push	{r7, lr}
 800dcee:	af00      	add	r7, sp, #0
 800dcf0:	4801      	ldr	r0, [pc, #4]	; (800dcf8 <__tcf_0+0xc>)
 800dcf2:	f7ff fe4d 	bl	800d990 <_ZN8touchgfx13GeneratedFontD1Ev>
 800dcf6:	bd80      	pop	{r7, pc}
 800dcf8:	2001e148 	.word	0x2001e148

0800dcfc <_Z23getFont_verdana_40_4bppv>:
{
 800dcfc:	b580      	push	{r7, lr}
 800dcfe:	b08e      	sub	sp, #56	; 0x38
 800dd00:	af0e      	add	r7, sp, #56	; 0x38
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 11, 41, 40, 0, 0, 4, 1, 0, 1, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800dd02:	4b21      	ldr	r3, [pc, #132]	; (800dd88 <_Z23getFont_verdana_40_4bppv+0x8c>)
 800dd04:	781b      	ldrb	r3, [r3, #0]
 800dd06:	f3bf 8f5b 	dmb	ish
 800dd0a:	b2db      	uxtb	r3, r3
 800dd0c:	f003 0301 	and.w	r3, r3, #1
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	bf0c      	ite	eq
 800dd14:	2301      	moveq	r3, #1
 800dd16:	2300      	movne	r3, #0
 800dd18:	b2db      	uxtb	r3, r3
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d030      	beq.n	800dd80 <_Z23getFont_verdana_40_4bppv+0x84>
 800dd1e:	481a      	ldr	r0, [pc, #104]	; (800dd88 <_Z23getFont_verdana_40_4bppv+0x8c>)
 800dd20:	f018 fd33 	bl	802678a <__cxa_guard_acquire>
 800dd24:	4603      	mov	r3, r0
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	bf14      	ite	ne
 800dd2a:	2301      	movne	r3, #1
 800dd2c:	2300      	moveq	r3, #0
 800dd2e:	b2db      	uxtb	r3, r3
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d025      	beq.n	800dd80 <_Z23getFont_verdana_40_4bppv+0x84>
 800dd34:	2300      	movs	r3, #0
 800dd36:	930c      	str	r3, [sp, #48]	; 0x30
 800dd38:	2300      	movs	r3, #0
 800dd3a:	930b      	str	r3, [sp, #44]	; 0x2c
 800dd3c:	2300      	movs	r3, #0
 800dd3e:	930a      	str	r3, [sp, #40]	; 0x28
 800dd40:	233f      	movs	r3, #63	; 0x3f
 800dd42:	9309      	str	r3, [sp, #36]	; 0x24
 800dd44:	4b11      	ldr	r3, [pc, #68]	; (800dd8c <_Z23getFont_verdana_40_4bppv+0x90>)
 800dd46:	9308      	str	r3, [sp, #32]
 800dd48:	4b11      	ldr	r3, [pc, #68]	; (800dd90 <_Z23getFont_verdana_40_4bppv+0x94>)
 800dd4a:	9307      	str	r3, [sp, #28]
 800dd4c:	2301      	movs	r3, #1
 800dd4e:	9306      	str	r3, [sp, #24]
 800dd50:	2300      	movs	r3, #0
 800dd52:	9305      	str	r3, [sp, #20]
 800dd54:	2301      	movs	r3, #1
 800dd56:	9304      	str	r3, [sp, #16]
 800dd58:	2304      	movs	r3, #4
 800dd5a:	9303      	str	r3, [sp, #12]
 800dd5c:	2300      	movs	r3, #0
 800dd5e:	9302      	str	r3, [sp, #8]
 800dd60:	2300      	movs	r3, #0
 800dd62:	9301      	str	r3, [sp, #4]
 800dd64:	2328      	movs	r3, #40	; 0x28
 800dd66:	9300      	str	r3, [sp, #0]
 800dd68:	2329      	movs	r3, #41	; 0x29
 800dd6a:	220b      	movs	r2, #11
 800dd6c:	4909      	ldr	r1, [pc, #36]	; (800dd94 <_Z23getFont_verdana_40_4bppv+0x98>)
 800dd6e:	480a      	ldr	r0, [pc, #40]	; (800dd98 <_Z23getFont_verdana_40_4bppv+0x9c>)
 800dd70:	f7ff fe68 	bl	800da44 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800dd74:	4809      	ldr	r0, [pc, #36]	; (800dd9c <_Z23getFont_verdana_40_4bppv+0xa0>)
 800dd76:	f018 fd53 	bl	8026820 <atexit>
 800dd7a:	4803      	ldr	r0, [pc, #12]	; (800dd88 <_Z23getFont_verdana_40_4bppv+0x8c>)
 800dd7c:	f018 fd11 	bl	80267a2 <__cxa_guard_release>
    return verdana_40_4bpp;
 800dd80:	4b05      	ldr	r3, [pc, #20]	; (800dd98 <_Z23getFont_verdana_40_4bppv+0x9c>)
}
 800dd82:	4618      	mov	r0, r3
 800dd84:	46bd      	mov	sp, r7
 800dd86:	bd80      	pop	{r7, pc}
 800dd88:	2001e174 	.word	0x2001e174
 800dd8c:	0802b5fc 	.word	0x0802b5fc
 800dd90:	0802b61c 	.word	0x0802b61c
 800dd94:	90177ae0 	.word	0x90177ae0
 800dd98:	2001e148 	.word	0x2001e148
 800dd9c:	0800dced 	.word	0x0800dced

0800dda0 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800dda0:	b480      	push	{r7}
 800dda2:	b083      	sub	sp, #12
 800dda4:	af00      	add	r7, sp, #0
 800dda6:	6078      	str	r0, [r7, #4]
 800dda8:	6039      	str	r1, [r7, #0]
 800ddaa:	683b      	ldr	r3, [r7, #0]
 800ddac:	4618      	mov	r0, r3
 800ddae:	370c      	adds	r7, #12
 800ddb0:	46bd      	mov	sp, r7
 800ddb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddb6:	4770      	bx	lr

0800ddb8 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800ddb8:	b480      	push	{r7}
 800ddba:	b083      	sub	sp, #12
 800ddbc:	af00      	add	r7, sp, #0
 800ddbe:	6078      	str	r0, [r7, #4]
 800ddc0:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800ddc2:	bf00      	nop
 800ddc4:	370c      	adds	r7, #12
 800ddc6:	46bd      	mov	sp, r7
 800ddc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddcc:	4770      	bx	lr

0800ddce <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800ddce:	b480      	push	{r7}
 800ddd0:	b083      	sub	sp, #12
 800ddd2:	af00      	add	r7, sp, #0
 800ddd4:	6078      	str	r0, [r7, #4]
 800ddd6:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800ddd8:	bf00      	nop
 800ddda:	370c      	adds	r7, #12
 800dddc:	46bd      	mov	sp, r7
 800ddde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dde2:	4770      	bx	lr

0800dde4 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800dde4:	b480      	push	{r7}
 800dde6:	b083      	sub	sp, #12
 800dde8:	af00      	add	r7, sp, #0
 800ddea:	6078      	str	r0, [r7, #4]
 800ddec:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800ddee:	bf00      	nop
 800ddf0:	370c      	adds	r7, #12
 800ddf2:	46bd      	mov	sp, r7
 800ddf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddf8:	4770      	bx	lr

0800ddfa <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 800ddfa:	b480      	push	{r7}
 800ddfc:	b083      	sub	sp, #12
 800ddfe:	af00      	add	r7, sp, #0
 800de00:	6078      	str	r0, [r7, #4]
 800de02:	460b      	mov	r3, r1
 800de04:	70fb      	strb	r3, [r7, #3]
    {
        (void)c; // Unused variable
    }
 800de06:	bf00      	nop
 800de08:	370c      	adds	r7, #12
 800de0a:	46bd      	mov	sp, r7
 800de0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de10:	4770      	bx	lr

0800de12 <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 800de12:	b480      	push	{r7}
 800de14:	b083      	sub	sp, #12
 800de16:	af00      	add	r7, sp, #0
 800de18:	6078      	str	r0, [r7, #4]
    {
    }
 800de1a:	bf00      	nop
 800de1c:	370c      	adds	r7, #12
 800de1e:	46bd      	mov	sp, r7
 800de20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de24:	4770      	bx	lr

0800de26 <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 800de26:	b480      	push	{r7}
 800de28:	b083      	sub	sp, #12
 800de2a:	af00      	add	r7, sp, #0
 800de2c:	6078      	str	r0, [r7, #4]
    {
    }
 800de2e:	bf00      	nop
 800de30:	370c      	adds	r7, #12
 800de32:	46bd      	mov	sp, r7
 800de34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de38:	4770      	bx	lr
	...

0800de3c <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 800de3c:	b480      	push	{r7}
 800de3e:	b083      	sub	sp, #12
 800de40:	af00      	add	r7, sp, #0
 800de42:	6078      	str	r0, [r7, #4]
    {
 800de44:	4a04      	ldr	r2, [pc, #16]	; (800de58 <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	601a      	str	r2, [r3, #0]
    }
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	4618      	mov	r0, r3
 800de4e:	370c      	adds	r7, #12
 800de50:	46bd      	mov	sp, r7
 800de52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de56:	4770      	bx	lr
 800de58:	0802a0d8 	.word	0x0802a0d8

0800de5c <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 800de5c:	b580      	push	{r7, lr}
 800de5e:	b082      	sub	sp, #8
 800de60:	af00      	add	r7, sp, #0
 800de62:	6078      	str	r0, [r7, #4]
    }
 800de64:	6878      	ldr	r0, [r7, #4]
 800de66:	f7ff ffe9 	bl	800de3c <_ZN8touchgfx15UIEventListenerD1Ev>
 800de6a:	2104      	movs	r1, #4
 800de6c:	6878      	ldr	r0, [r7, #4]
 800de6e:	f018 fc8a 	bl	8026786 <_ZdlPvj>
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	4618      	mov	r0, r3
 800de76:	3708      	adds	r7, #8
 800de78:	46bd      	mov	sp, r7
 800de7a:	bd80      	pop	{r7, pc}

0800de7c <_ZN8touchgfx11Application19changeToStartScreenEv>:
     * @note The application will not make a complete restart - if
     *       your Model contains data, this will not be reset, unless
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
 800de7c:	b480      	push	{r7}
 800de7e:	b083      	sub	sp, #12
 800de80:	af00      	add	r7, sp, #0
 800de82:	6078      	str	r0, [r7, #4]
    {
    }
 800de84:	bf00      	nop
 800de86:	370c      	adds	r7, #12
 800de88:	46bd      	mov	sp, r7
 800de8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de8e:	4770      	bx	lr

0800de90 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 800de90:	b480      	push	{r7}
 800de92:	b083      	sub	sp, #12
 800de94:	af00      	add	r7, sp, #0
 800de96:	6078      	str	r0, [r7, #4]
 800de98:	460b      	mov	r3, r1
 800de9a:	70fb      	strb	r3, [r7, #3]
    {
        (void)screenId; // Unused variable
    }
 800de9c:	bf00      	nop
 800de9e:	370c      	adds	r7, #12
 800dea0:	46bd      	mov	sp, r7
 800dea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dea6:	4770      	bx	lr

0800dea8 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 800dea8:	b480      	push	{r7}
 800deaa:	b083      	sub	sp, #12
 800deac:	af00      	add	r7, sp, #0
 800deae:	6078      	str	r0, [r7, #4]
 800deb0:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	683a      	ldr	r2, [r7, #0]
 800deb6:	f503 7398 	add.w	r3, r3, #304	; 0x130
 800deba:	6810      	ldr	r0, [r2, #0]
 800debc:	6851      	ldr	r1, [r2, #4]
 800debe:	c303      	stmia	r3!, {r0, r1}
    }
 800dec0:	bf00      	nop
 800dec2:	370c      	adds	r7, #12
 800dec4:	46bd      	mov	sp, r7
 800dec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deca:	4770      	bx	lr

0800decc <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
        timerWidgets.add(w);
    }

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
 800decc:	b580      	push	{r7, lr}
 800dece:	b082      	sub	sp, #8
 800ded0:	af00      	add	r7, sp, #0
 800ded2:	6078      	str	r0, [r7, #4]
    {
        timerWidgets.clear();
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	3304      	adds	r3, #4
 800ded8:	4618      	mov	r0, r3
 800deda:	f00a f9f8 	bl	80182ce <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    }
 800dede:	bf00      	nop
 800dee0:	3708      	adds	r7, #8
 800dee2:	46bd      	mov	sp, r7
 800dee4:	bd80      	pop	{r7, pc}
	...

0800dee8 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 800dee8:	b480      	push	{r7}
 800deea:	b083      	sub	sp, #12
 800deec:	af00      	add	r7, sp, #0
 800deee:	6078      	str	r0, [r7, #4]
    {
 800def0:	4a04      	ldr	r2, [pc, #16]	; (800df04 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	601a      	str	r2, [r3, #0]
    }
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	4618      	mov	r0, r3
 800defa:	370c      	adds	r7, #12
 800defc:	46bd      	mov	sp, r7
 800defe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df02:	4770      	bx	lr
 800df04:	0802a0c0 	.word	0x0802a0c0

0800df08 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 800df08:	b580      	push	{r7, lr}
 800df0a:	b082      	sub	sp, #8
 800df0c:	af00      	add	r7, sp, #0
 800df0e:	6078      	str	r0, [r7, #4]
    }
 800df10:	6878      	ldr	r0, [r7, #4]
 800df12:	f7ff ffe9 	bl	800dee8 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800df16:	2104      	movs	r1, #4
 800df18:	6878      	ldr	r0, [r7, #4]
 800df1a:	f018 fc34 	bl	8026786 <_ZdlPvj>
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	4618      	mov	r0, r3
 800df22:	3708      	adds	r7, #8
 800df24:	46bd      	mov	sp, r7
 800df26:	bd80      	pop	{r7, pc}

0800df28 <_ZN8touchgfx3HAL11getInstanceEv>:
    /**
     * Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 800df28:	b480      	push	{r7}
 800df2a:	af00      	add	r7, sp, #0
    {
        return instance;
 800df2c:	4b03      	ldr	r3, [pc, #12]	; (800df3c <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 800df2e:	681b      	ldr	r3, [r3, #0]
    }
 800df30:	4618      	mov	r0, r3
 800df32:	46bd      	mov	sp, r7
 800df34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df38:	4770      	bx	lr
 800df3a:	bf00      	nop
 800df3c:	20024428 	.word	0x20024428

0800df40 <_ZN8touchgfx3HAL3lcdEv>:
    /**
     * Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 800df40:	b480      	push	{r7}
 800df42:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 800df44:	4b0b      	ldr	r3, [pc, #44]	; (800df74 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d008      	beq.n	800df62 <_ZN8touchgfx3HAL3lcdEv+0x22>
 800df50:	4b08      	ldr	r3, [pc, #32]	; (800df74 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800df56:	2b00      	cmp	r3, #0
 800df58:	d003      	beq.n	800df62 <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 800df5a:	4b06      	ldr	r3, [pc, #24]	; (800df74 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800df60:	e002      	b.n	800df68 <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        return instance->lcdRef;
 800df62:	4b04      	ldr	r3, [pc, #16]	; (800df74 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	689b      	ldr	r3, [r3, #8]
    }
 800df68:	4618      	mov	r0, r3
 800df6a:	46bd      	mov	sp, r7
 800df6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df70:	4770      	bx	lr
 800df72:	bf00      	nop
 800df74:	20024428 	.word	0x20024428

0800df78 <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 800df78:	b480      	push	{r7}
 800df7a:	b083      	sub	sp, #12
 800df7c:	af00      	add	r7, sp, #0
 800df7e:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 800df80:	4a07      	ldr	r2, [pc, #28]	; (800dfa0 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	601a      	str	r2, [r3, #0]
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	2200      	movs	r2, #0
 800df8a:	605a      	str	r2, [r3, #4]
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	2200      	movs	r2, #0
 800df90:	721a      	strb	r2, [r3, #8]
    {
    }
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	4618      	mov	r0, r3
 800df96:	370c      	adds	r7, #12
 800df98:	46bd      	mov	sp, r7
 800df9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df9e:	4770      	bx	lr
 800dfa0:	0802a09c 	.word	0x0802a09c

0800dfa4 <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 800dfa4:	b480      	push	{r7}
 800dfa6:	b083      	sub	sp, #12
 800dfa8:	af00      	add	r7, sp, #0
 800dfaa:	6078      	str	r0, [r7, #4]
    {
 800dfac:	4a04      	ldr	r2, [pc, #16]	; (800dfc0 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	601a      	str	r2, [r3, #0]
    }
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	4618      	mov	r0, r3
 800dfb6:	370c      	adds	r7, #12
 800dfb8:	46bd      	mov	sp, r7
 800dfba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfbe:	4770      	bx	lr
 800dfc0:	0802a09c 	.word	0x0802a09c

0800dfc4 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 800dfc4:	b580      	push	{r7, lr}
 800dfc6:	b082      	sub	sp, #8
 800dfc8:	af00      	add	r7, sp, #0
 800dfca:	6078      	str	r0, [r7, #4]
    }
 800dfcc:	6878      	ldr	r0, [r7, #4]
 800dfce:	f7ff ffe9 	bl	800dfa4 <_ZN8touchgfx10TransitionD1Ev>
 800dfd2:	210c      	movs	r1, #12
 800dfd4:	6878      	ldr	r0, [r7, #4]
 800dfd6:	f018 fbd6 	bl	8026786 <_ZdlPvj>
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	4618      	mov	r0, r3
 800dfde:	3708      	adds	r7, #8
 800dfe0:	46bd      	mov	sp, r7
 800dfe2:	bd80      	pop	{r7, pc}

0800dfe4 <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 800dfe4:	b480      	push	{r7}
 800dfe6:	b083      	sub	sp, #12
 800dfe8:	af00      	add	r7, sp, #0
 800dfea:	6078      	str	r0, [r7, #4]
    {
    }
 800dfec:	bf00      	nop
 800dfee:	370c      	adds	r7, #12
 800dff0:	46bd      	mov	sp, r7
 800dff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dff6:	4770      	bx	lr

0800dff8 <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 800dff8:	b480      	push	{r7}
 800dffa:	b083      	sub	sp, #12
 800dffc:	af00      	add	r7, sp, #0
 800dffe:	6078      	str	r0, [r7, #4]
    {
    }
 800e000:	bf00      	nop
 800e002:	370c      	adds	r7, #12
 800e004:	46bd      	mov	sp, r7
 800e006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e00a:	4770      	bx	lr

0800e00c <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 800e00c:	b480      	push	{r7}
 800e00e:	b083      	sub	sp, #12
 800e010:	af00      	add	r7, sp, #0
 800e012:	6078      	str	r0, [r7, #4]
    {
    }
 800e014:	bf00      	nop
 800e016:	370c      	adds	r7, #12
 800e018:	46bd      	mov	sp, r7
 800e01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e01e:	4770      	bx	lr

0800e020 <_ZN8touchgfx10Transition10invalidateEv>:
    /**
     * Invalidates the screen when starting the Transition. Default is
     * to invalidate the whole screen. Subclasses can do partial
     * invalidation.
     */
    virtual void invalidate()
 800e020:	b580      	push	{r7, lr}
 800e022:	b082      	sub	sp, #8
 800e024:	af00      	add	r7, sp, #0
 800e026:	6078      	str	r0, [r7, #4]
    {
        Application::getInstance()->invalidate();
 800e028:	f00a f92c 	bl	8018284 <_ZN8touchgfx11Application11getInstanceEv>
 800e02c:	4603      	mov	r3, r0
 800e02e:	4618      	mov	r0, r3
 800e030:	f00a fd72 	bl	8018b18 <_ZN8touchgfx11Application10invalidateEv>
    }
 800e034:	bf00      	nop
 800e036:	3708      	adds	r7, #8
 800e038:	46bd      	mov	sp, r7
 800e03a:	bd80      	pop	{r7, pc}

0800e03c <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 800e03c:	b480      	push	{r7}
 800e03e:	b083      	sub	sp, #12
 800e040:	af00      	add	r7, sp, #0
 800e042:	6078      	str	r0, [r7, #4]
 800e044:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	683a      	ldr	r2, [r7, #0]
 800e04a:	605a      	str	r2, [r3, #4]
    }
 800e04c:	bf00      	nop
 800e04e:	370c      	adds	r7, #12
 800e050:	46bd      	mov	sp, r7
 800e052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e056:	4770      	bx	lr

0800e058 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 800e058:	b580      	push	{r7, lr}
 800e05a:	b082      	sub	sp, #8
 800e05c:	af00      	add	r7, sp, #0
 800e05e:	6078      	str	r0, [r7, #4]
 800e060:	4a05      	ldr	r2, [pc, #20]	; (800e078 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	601a      	str	r2, [r3, #0]
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	4618      	mov	r0, r3
 800e06a:	f7ff fee7 	bl	800de3c <_ZN8touchgfx15UIEventListenerD1Ev>
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	4618      	mov	r0, r3
 800e072:	3708      	adds	r7, #8
 800e074:	46bd      	mov	sp, r7
 800e076:	bd80      	pop	{r7, pc}
 800e078:	0802b118 	.word	0x0802b118

0800e07c <_ZN8touchgfx11ApplicationD0Ev>:
 800e07c:	b580      	push	{r7, lr}
 800e07e:	b082      	sub	sp, #8
 800e080:	af00      	add	r7, sp, #0
 800e082:	6078      	str	r0, [r7, #4]
 800e084:	6878      	ldr	r0, [r7, #4]
 800e086:	f7ff ffe7 	bl	800e058 <_ZN8touchgfx11ApplicationD1Ev>
 800e08a:	f44f 719e 	mov.w	r1, #316	; 0x13c
 800e08e:	6878      	ldr	r0, [r7, #4]
 800e090:	f018 fb79 	bl	8026786 <_ZdlPvj>
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	4618      	mov	r0, r3
 800e098:	3708      	adds	r7, #8
 800e09a:	46bd      	mov	sp, r7
 800e09c:	bd80      	pop	{r7, pc}
	...

0800e0a0 <_ZN8touchgfx14MVPApplicationC1Ev>:
 */
class MVPApplication : public Application
{
public:
    /** Initializes a new instance of the MVPApplication class. */
    MVPApplication()
 800e0a0:	b580      	push	{r7, lr}
 800e0a2:	b082      	sub	sp, #8
 800e0a4:	af00      	add	r7, sp, #0
 800e0a6:	6078      	str	r0, [r7, #4]
        : currentPresenter(0),
          pendingScreenTransitionCallback(0)
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	4618      	mov	r0, r3
 800e0ac:	f00a f9b0 	bl	8018410 <_ZN8touchgfx11ApplicationC1Ev>
 800e0b0:	4a09      	ldr	r2, [pc, #36]	; (800e0d8 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	601a      	str	r2, [r3, #0]
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	2200      	movs	r2, #0
 800e0ba:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	2200      	movs	r2, #0
 800e0c2:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    {
        instance = this;
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	4a04      	ldr	r2, [pc, #16]	; (800e0dc <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 800e0ca:	6013      	str	r3, [r2, #0]
    }
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	4618      	mov	r0, r3
 800e0d0:	3708      	adds	r7, #8
 800e0d2:	46bd      	mov	sp, r7
 800e0d4:	bd80      	pop	{r7, pc}
 800e0d6:	bf00      	nop
 800e0d8:	0802a050 	.word	0x0802a050
 800e0dc:	20024474 	.word	0x20024474

0800e0e0 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 800e0e0:	b580      	push	{r7, lr}
 800e0e2:	b082      	sub	sp, #8
 800e0e4:	af00      	add	r7, sp, #0
 800e0e6:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 800e0e8:	6878      	ldr	r0, [r7, #4]
 800e0ea:	f000 f804 	bl	800e0f6 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 800e0ee:	bf00      	nop
 800e0f0:	3708      	adds	r7, #8
 800e0f2:	46bd      	mov	sp, r7
 800e0f4:	bd80      	pop	{r7, pc}

0800e0f6 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 800e0f6:	b580      	push	{r7, lr}
 800e0f8:	b082      	sub	sp, #8
 800e0fa:	af00      	add	r7, sp, #0
 800e0fc:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800e104:	2b00      	cmp	r3, #0
 800e106:	d00f      	beq.n	800e128 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	330c      	adds	r3, #12
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	4610      	mov	r0, r2
 800e11c:	4798      	blx	r3
 800e11e:	4603      	mov	r3, r0
 800e120:	2b00      	cmp	r3, #0
 800e122:	d001      	beq.n	800e128 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800e124:	2301      	movs	r3, #1
 800e126:	e000      	b.n	800e12a <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 800e128:	2300      	movs	r3, #0
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d00e      	beq.n	800e14c <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	3308      	adds	r3, #8
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	4610      	mov	r0, r2
 800e142:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	2200      	movs	r2, #0
 800e148:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
        }
    }
 800e14c:	bf00      	nop
 800e14e:	3708      	adds	r7, #8
 800e150:	46bd      	mov	sp, r7
 800e152:	bd80      	pop	{r7, pc}

0800e154 <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 800e154:	b480      	push	{r7}
 800e156:	b083      	sub	sp, #12
 800e158:	af00      	add	r7, sp, #0
 800e15a:	6078      	str	r0, [r7, #4]
 800e15c:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	683a      	ldr	r2, [r7, #0]
 800e162:	601a      	str	r2, [r3, #0]
    }
 800e164:	bf00      	nop
 800e166:	370c      	adds	r7, #12
 800e168:	46bd      	mov	sp, r7
 800e16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e16e:	4770      	bx	lr

0800e170 <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 800e170:	b580      	push	{r7, lr}
 800e172:	b082      	sub	sp, #8
 800e174:	af00      	add	r7, sp, #0
 800e176:	6078      	str	r0, [r7, #4]
 800e178:	4a05      	ldr	r2, [pc, #20]	; (800e190 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	601a      	str	r2, [r3, #0]
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	4618      	mov	r0, r3
 800e182:	f7ff ff69 	bl	800e058 <_ZN8touchgfx11ApplicationD1Ev>
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	4618      	mov	r0, r3
 800e18a:	3708      	adds	r7, #8
 800e18c:	46bd      	mov	sp, r7
 800e18e:	bd80      	pop	{r7, pc}
 800e190:	0802a050 	.word	0x0802a050

0800e194 <_ZN8touchgfx14MVPApplicationD0Ev>:
 800e194:	b580      	push	{r7, lr}
 800e196:	b082      	sub	sp, #8
 800e198:	af00      	add	r7, sp, #0
 800e19a:	6078      	str	r0, [r7, #4]
 800e19c:	6878      	ldr	r0, [r7, #4]
 800e19e:	f7ff ffe7 	bl	800e170 <_ZN8touchgfx14MVPApplicationD1Ev>
 800e1a2:	f44f 71a2 	mov.w	r1, #324	; 0x144
 800e1a6:	6878      	ldr	r0, [r7, #4]
 800e1a8:	f018 faed 	bl	8026786 <_ZdlPvj>
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	4618      	mov	r0, r3
 800e1b0:	3708      	adds	r7, #8
 800e1b2:	46bd      	mov	sp, r7
 800e1b4:	bd80      	pop	{r7, pc}
	...

0800e1b8 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 800e1b8:	b580      	push	{r7, lr}
 800e1ba:	b082      	sub	sp, #8
 800e1bc:	af00      	add	r7, sp, #0
 800e1be:	6078      	str	r0, [r7, #4]
 800e1c0:	4a08      	ldr	r2, [pc, #32]	; (800e1e4 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	601a      	str	r2, [r3, #0]
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800e1cc:	4618      	mov	r0, r3
 800e1ce:	f000 fac7 	bl	800e760 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	4618      	mov	r0, r3
 800e1d6:	f7ff ffcb 	bl	800e170 <_ZN8touchgfx14MVPApplicationD1Ev>
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	4618      	mov	r0, r3
 800e1de:	3708      	adds	r7, #8
 800e1e0:	46bd      	mov	sp, r7
 800e1e2:	bd80      	pop	{r7, pc}
 800e1e4:	08029fec 	.word	0x08029fec

0800e1e8 <_ZN23FrontendApplicationBaseD0Ev>:
 800e1e8:	b580      	push	{r7, lr}
 800e1ea:	b082      	sub	sp, #8
 800e1ec:	af00      	add	r7, sp, #0
 800e1ee:	6078      	str	r0, [r7, #4]
 800e1f0:	6878      	ldr	r0, [r7, #4]
 800e1f2:	f7ff ffe1 	bl	800e1b8 <_ZN23FrontendApplicationBaseD1Ev>
 800e1f6:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 800e1fa:	6878      	ldr	r0, [r7, #4]
 800e1fc:	f018 fac3 	bl	8026786 <_ZdlPvj>
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	4618      	mov	r0, r3
 800e204:	3708      	adds	r7, #8
 800e206:	46bd      	mov	sp, r7
 800e208:	bd80      	pop	{r7, pc}

0800e20a <_ZN23FrontendApplicationBase19changeToStartScreenEv>:

    virtual void changeToStartScreen()
 800e20a:	b580      	push	{r7, lr}
 800e20c:	b082      	sub	sp, #8
 800e20e:	af00      	add	r7, sp, #0
 800e210:	6078      	str	r0, [r7, #4]
    {
        gotoscreenScreenNoTransition();
 800e212:	6878      	ldr	r0, [r7, #4]
 800e214:	f000 f87c 	bl	800e310 <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv>
    }
 800e218:	bf00      	nop
 800e21a:	3708      	adds	r7, #8
 800e21c:	46bd      	mov	sp, r7
 800e21e:	bd80      	pop	{r7, pc}

0800e220 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 800e220:	b480      	push	{r7}
 800e222:	b083      	sub	sp, #12
 800e224:	af00      	add	r7, sp, #0
 800e226:	6078      	str	r0, [r7, #4]
    {
        done = true;
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	2201      	movs	r2, #1
 800e22c:	721a      	strb	r2, [r3, #8]
    }
 800e22e:	bf00      	nop
 800e230:	370c      	adds	r7, #12
 800e232:	46bd      	mov	sp, r7
 800e234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e238:	4770      	bx	lr

0800e23a <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 800e23a:	b480      	push	{r7}
 800e23c:	b083      	sub	sp, #12
 800e23e:	af00      	add	r7, sp, #0
 800e240:	6078      	str	r0, [r7, #4]
 800e242:	6039      	str	r1, [r7, #0]
    {
        model = m;
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	683a      	ldr	r2, [r7, #0]
 800e248:	605a      	str	r2, [r3, #4]
    }
 800e24a:	bf00      	nop
 800e24c:	370c      	adds	r7, #12
 800e24e:	46bd      	mov	sp, r7
 800e250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e254:	4770      	bx	lr
	...

0800e258 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/screen_screen/screenView.hpp>
#include <gui/screen_screen/screenPresenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 800e258:	b580      	push	{r7, lr}
 800e25a:	b084      	sub	sp, #16
 800e25c:	af00      	add	r7, sp, #0
 800e25e:	60f8      	str	r0, [r7, #12]
 800e260:	60b9      	str	r1, [r7, #8]
 800e262:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	4618      	mov	r0, r3
 800e268:	f7ff ff1a 	bl	800e0a0 <_ZN8touchgfx14MVPApplicationC1Ev>
 800e26c:	4a13      	ldr	r2, [pc, #76]	; (800e2bc <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	601a      	str	r2, [r3, #0]
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800e278:	4618      	mov	r0, r3
 800e27a:	f000 f89f 	bl	800e3bc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	687a      	ldr	r2, [r7, #4]
 800e282:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	68ba      	ldr	r2, [r7, #8]
 800e28a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 800e28e:	f7ff fe4b 	bl	800df28 <_ZN8touchgfx3HAL11getInstanceEv>
 800e292:	4603      	mov	r3, r0
 800e294:	681a      	ldr	r2, [r3, #0]
 800e296:	3208      	adds	r2, #8
 800e298:	6812      	ldr	r2, [r2, #0]
 800e29a:	2100      	movs	r1, #0
 800e29c:	4618      	mov	r0, r3
 800e29e:	4790      	blx	r2
    touchgfx::Texts::setLanguage(FR);
 800e2a0:	2000      	movs	r0, #0
 800e2a2:	f001 f971 	bl	800f588 <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 800e2a6:	f7ff fe4b 	bl	800df40 <_ZN8touchgfx3HAL3lcdEv>
 800e2aa:	4603      	mov	r3, r0
 800e2ac:	4618      	mov	r0, r3
 800e2ae:	f011 fb66 	bl	801f97e <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
}
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	4618      	mov	r0, r3
 800e2b6:	3710      	adds	r7, #16
 800e2b8:	46bd      	mov	sp, r7
 800e2ba:	bd80      	pop	{r7, pc}
 800e2bc:	08029fec 	.word	0x08029fec

0800e2c0 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 800e2c0:	b480      	push	{r7}
 800e2c2:	b083      	sub	sp, #12
 800e2c4:	af00      	add	r7, sp, #0
 800e2c6:	6078      	str	r0, [r7, #4]
 800e2c8:	6039      	str	r1, [r7, #0]
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	4618      	mov	r0, r3
 800e2ce:	370c      	adds	r7, #12
 800e2d0:	46bd      	mov	sp, r7
 800e2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2d6:	4770      	bx	lr

0800e2d8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800e2d8:	b580      	push	{r7, lr}
 800e2da:	b082      	sub	sp, #8
 800e2dc:	af00      	add	r7, sp, #0
 800e2de:	6078      	str	r0, [r7, #4]
 800e2e0:	6039      	str	r1, [r7, #0]
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	683a      	ldr	r2, [r7, #0]
 800e2e6:	4611      	mov	r1, r2
 800e2e8:	4618      	mov	r0, r3
 800e2ea:	f7ff ffe9 	bl	800e2c0 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 800e2ee:	683b      	ldr	r3, [r7, #0]
 800e2f0:	685a      	ldr	r2, [r3, #4]
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	605a      	str	r2, [r3, #4]
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	683a      	ldr	r2, [r7, #0]
 800e2fa:	3308      	adds	r3, #8
 800e2fc:	3208      	adds	r2, #8
 800e2fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e302:	e883 0003 	stmia.w	r3, {r0, r1}
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	4618      	mov	r0, r3
 800e30a:	3708      	adds	r7, #8
 800e30c:	46bd      	mov	sp, r7
 800e30e:	bd80      	pop	{r7, pc}

0800e310 <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv>:
 */

// screen

void FrontendApplicationBase::gotoscreenScreenNoTransition()
{
 800e310:	b590      	push	{r4, r7, lr}
 800e312:	b089      	sub	sp, #36	; 0x24
 800e314:	af00      	add	r7, sp, #0
 800e316:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoscreenScreenNoTransitionImpl);
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	f503 74a2 	add.w	r4, r3, #324	; 0x144
 800e31e:	4b10      	ldr	r3, [pc, #64]	; (800e360 <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv+0x50>)
 800e320:	61bb      	str	r3, [r7, #24]
 800e322:	2300      	movs	r3, #0
 800e324:	61fb      	str	r3, [r7, #28]
 800e326:	f107 0008 	add.w	r0, r7, #8
 800e32a:	f107 0318 	add.w	r3, r7, #24
 800e32e:	cb0c      	ldmia	r3, {r2, r3}
 800e330:	6879      	ldr	r1, [r7, #4]
 800e332:	f000 f85f 	bl	800e3f4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800e336:	f107 0308 	add.w	r3, r7, #8
 800e33a:	4619      	mov	r1, r3
 800e33c:	4620      	mov	r0, r4
 800e33e:	f7ff ffcb 	bl	800e2d8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800e342:	f107 0308 	add.w	r3, r7, #8
 800e346:	4618      	mov	r0, r3
 800e348:	f000 fa0a 	bl	800e760 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	f503 72a2 	add.w	r2, r3, #324	; 0x144
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
}
 800e358:	bf00      	nop
 800e35a:	3724      	adds	r7, #36	; 0x24
 800e35c:	46bd      	mov	sp, r7
 800e35e:	bd90      	pop	{r4, r7, pc}
 800e360:	0800e365 	.word	0x0800e365

0800e364 <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoscreenScreenNoTransitionImpl()
{
 800e364:	b580      	push	{r7, lr}
 800e366:	b084      	sub	sp, #16
 800e368:	af02      	add	r7, sp, #8
 800e36a:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<screenView, screenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	f503 719e 	add.w	r1, r3, #316	; 0x13c
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800e378:	461a      	mov	r2, r3
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800e380:	9300      	str	r3, [sp, #0]
 800e382:	4b04      	ldr	r3, [pc, #16]	; (800e394 <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv+0x30>)
 800e384:	4804      	ldr	r0, [pc, #16]	; (800e398 <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv+0x34>)
 800e386:	f000 f867 	bl	800e458 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800e38a:	bf00      	nop
 800e38c:	3708      	adds	r7, #8
 800e38e:	46bd      	mov	sp, r7
 800e390:	bd80      	pop	{r7, pc}
 800e392:	bf00      	nop
 800e394:	20024468 	.word	0x20024468
 800e398:	20024464 	.word	0x20024464

0800e39c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 800e39c:	b480      	push	{r7}
 800e39e:	b083      	sub	sp, #12
 800e3a0:	af00      	add	r7, sp, #0
 800e3a2:	6078      	str	r0, [r7, #4]
 800e3a4:	4a04      	ldr	r2, [pc, #16]	; (800e3b8 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	601a      	str	r2, [r3, #0]
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	4618      	mov	r0, r3
 800e3ae:	370c      	adds	r7, #12
 800e3b0:	46bd      	mov	sp, r7
 800e3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3b6:	4770      	bx	lr
 800e3b8:	0802a0c0 	.word	0x0802a0c0

0800e3bc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
{
    /** Initializes a new instance of the Callback class. */
    Callback()
 800e3bc:	b580      	push	{r7, lr}
 800e3be:	b082      	sub	sp, #8
 800e3c0:	af00      	add	r7, sp, #0
 800e3c2:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun(0)
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	4618      	mov	r0, r3
 800e3c8:	f7ff ffe8 	bl	800e39c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800e3cc:	4a08      	ldr	r2, [pc, #32]	; (800e3f0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	601a      	str	r2, [r3, #0]
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	2200      	movs	r2, #0
 800e3d6:	605a      	str	r2, [r3, #4]
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	2200      	movs	r2, #0
 800e3dc:	609a      	str	r2, [r3, #8]
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	2200      	movs	r2, #0
 800e3e2:	60da      	str	r2, [r3, #12]
    {
    }
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	4618      	mov	r0, r3
 800e3e8:	3708      	adds	r7, #8
 800e3ea:	46bd      	mov	sp, r7
 800e3ec:	bd80      	pop	{r7, pc}
 800e3ee:	bf00      	nop
 800e3f0:	0802a038 	.word	0x0802a038

0800e3f4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pObject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function takes zero
     *                       arguments.
     */
    Callback(dest_type* pObject, void (dest_type::*pmemfun_0)())
 800e3f4:	b580      	push	{r7, lr}
 800e3f6:	b084      	sub	sp, #16
 800e3f8:	af00      	add	r7, sp, #0
 800e3fa:	60f8      	str	r0, [r7, #12]
 800e3fc:	60b9      	str	r1, [r7, #8]
 800e3fe:	4639      	mov	r1, r7
 800e400:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_0)
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	4618      	mov	r0, r3
 800e408:	f7ff ffc8 	bl	800e39c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800e40c:	4a08      	ldr	r2, [pc, #32]	; (800e430 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 800e40e:	68fb      	ldr	r3, [r7, #12]
 800e410:	601a      	str	r2, [r3, #0]
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	68ba      	ldr	r2, [r7, #8]
 800e416:	605a      	str	r2, [r3, #4]
 800e418:	68fb      	ldr	r3, [r7, #12]
 800e41a:	3308      	adds	r3, #8
 800e41c:	463a      	mov	r2, r7
 800e41e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e422:	e883 0003 	stmia.w	r3, {r0, r1}
    {
    }
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	4618      	mov	r0, r3
 800e42a:	3710      	adds	r7, #16
 800e42c:	46bd      	mov	sp, r7
 800e42e:	bd80      	pop	{r7, pc}
 800e430:	0802a038 	.word	0x0802a038

0800e434 <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 800e434:	b580      	push	{r7, lr}
 800e436:	b082      	sub	sp, #8
 800e438:	af00      	add	r7, sp, #0
 800e43a:	6078      	str	r0, [r7, #4]
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	4618      	mov	r0, r3
 800e440:	f7ff fd9a 	bl	800df78 <_ZN8touchgfx10TransitionC1Ev>
 800e444:	4a03      	ldr	r2, [pc, #12]	; (800e454 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	601a      	str	r2, [r3, #0]
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	4618      	mov	r0, r3
 800e44e:	3708      	adds	r7, #8
 800e450:	46bd      	mov	sp, r7
 800e452:	bd80      	pop	{r7, pc}
 800e454:	08029fc8 	.word	0x08029fc8

0800e458 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800e458:	b590      	push	{r4, r7, lr}
 800e45a:	b08f      	sub	sp, #60	; 0x3c
 800e45c:	af00      	add	r7, sp, #0
 800e45e:	60f8      	str	r0, [r7, #12]
 800e460:	60b9      	str	r1, [r7, #8]
 800e462:	607a      	str	r2, [r7, #4]
 800e464:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	689a      	ldr	r2, [r3, #8]
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	689b      	ldr	r3, [r3, #8]
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	3320      	adds	r3, #32
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	4610      	mov	r0, r2
 800e476:	4798      	blx	r3
 800e478:	4603      	mov	r3, r0
 800e47a:	2bdf      	cmp	r3, #223	; 0xdf
 800e47c:	d805      	bhi.n	800e48a <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x32>
 800e47e:	4b7e      	ldr	r3, [pc, #504]	; (800e678 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x220>)
 800e480:	4a7e      	ldr	r2, [pc, #504]	; (800e67c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800e482:	21a3      	movs	r1, #163	; 0xa3
 800e484:	487e      	ldr	r0, [pc, #504]	; (800e680 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800e486:	f018 f9ad 	bl	80267e4 <__assert_func>
 800e48a:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	685a      	ldr	r2, [r3, #4]
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	685b      	ldr	r3, [r3, #4]
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	3320      	adds	r3, #32
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	4610      	mov	r0, r2
 800e49c:	4798      	blx	r3
 800e49e:	4603      	mov	r3, r0
 800e4a0:	2b0f      	cmp	r3, #15
 800e4a2:	d805      	bhi.n	800e4b0 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x58>
 800e4a4:	4b77      	ldr	r3, [pc, #476]	; (800e684 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800e4a6:	4a75      	ldr	r2, [pc, #468]	; (800e67c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800e4a8:	21a4      	movs	r1, #164	; 0xa4
 800e4aa:	4875      	ldr	r0, [pc, #468]	; (800e680 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800e4ac:	f018 f99a 	bl	80267e4 <__assert_func>
 800e4b0:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	68da      	ldr	r2, [r3, #12]
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	68db      	ldr	r3, [r3, #12]
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	3320      	adds	r3, #32
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	4610      	mov	r0, r2
 800e4c2:	4798      	blx	r3
 800e4c4:	4603      	mov	r3, r0
 800e4c6:	2b0b      	cmp	r3, #11
 800e4c8:	d805      	bhi.n	800e4d6 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7e>
 800e4ca:	4b6f      	ldr	r3, [pc, #444]	; (800e688 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800e4cc:	4a6b      	ldr	r2, [pc, #428]	; (800e67c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800e4ce:	21a5      	movs	r1, #165	; 0xa5
 800e4d0:	486b      	ldr	r0, [pc, #428]	; (800e680 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800e4d2:	f018 f987 	bl	80267e4 <__assert_func>
 800e4d6:	bf00      	nop
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	62bb      	str	r3, [r7, #40]	; 0x28
 800e4dc:	68bb      	ldr	r3, [r7, #8]
 800e4de:	627b      	str	r3, [r7, #36]	; 0x24
 800e4e0:	683b      	ldr	r3, [r7, #0]
 800e4e2:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800e4e4:	f009 fece 	bl	8018284 <_ZN8touchgfx11Application11getInstanceEv>
 800e4e8:	4603      	mov	r3, r0
 800e4ea:	4618      	mov	r0, r3
 800e4ec:	f7ff fcee 	bl	800decc <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800e4f0:	6a3b      	ldr	r3, [r7, #32]
 800e4f2:	681b      	ldr	r3, [r3, #0]
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d008      	beq.n	800e50a <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb2>
        (*currentTrans)->tearDown();
 800e4f8:	6a3b      	ldr	r3, [r7, #32]
 800e4fa:	681a      	ldr	r2, [r3, #0]
 800e4fc:	6a3b      	ldr	r3, [r7, #32]
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	330c      	adds	r3, #12
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	4610      	mov	r0, r2
 800e508:	4798      	blx	r3
    if (*currentTrans)
 800e50a:	6a3b      	ldr	r3, [r7, #32]
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d007      	beq.n	800e522 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xca>
        (*currentTrans)->~Transition();
 800e512:	6a3b      	ldr	r3, [r7, #32]
 800e514:	681a      	ldr	r2, [r3, #0]
 800e516:	6a3b      	ldr	r3, [r7, #32]
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	681b      	ldr	r3, [r3, #0]
 800e51e:	4610      	mov	r0, r2
 800e520:	4798      	blx	r3
    if (*currentScreen)
 800e522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	2b00      	cmp	r3, #0
 800e528:	d008      	beq.n	800e53c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe4>
        (*currentScreen)->tearDownScreen();
 800e52a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e52c:	681a      	ldr	r2, [r3, #0]
 800e52e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e530:	681b      	ldr	r3, [r3, #0]
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	3314      	adds	r3, #20
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	4610      	mov	r0, r2
 800e53a:	4798      	blx	r3
    if (*currentPresenter)
 800e53c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	2b00      	cmp	r3, #0
 800e542:	d008      	beq.n	800e556 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xfe>
        (*currentPresenter)->deactivate();
 800e544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e546:	681a      	ldr	r2, [r3, #0]
 800e548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	3304      	adds	r3, #4
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	4610      	mov	r0, r2
 800e554:	4798      	blx	r3
    if (*currentScreen)
 800e556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d007      	beq.n	800e56e <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x116>
        (*currentScreen)->~Screen();
 800e55e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e560:	681a      	ldr	r2, [r3, #0]
 800e562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	4610      	mov	r0, r2
 800e56c:	4798      	blx	r3
    if (*currentPresenter)
 800e56e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	2b00      	cmp	r3, #0
 800e574:	d008      	beq.n	800e588 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x130>
        (*currentPresenter)->~Presenter();
 800e576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e578:	681a      	ldr	r2, [r3, #0]
 800e57a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	3308      	adds	r3, #8
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	4610      	mov	r0, r2
 800e586:	4798      	blx	r3
}
 800e588:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	68db      	ldr	r3, [r3, #12]
 800e58e:	2100      	movs	r1, #0
 800e590:	4618      	mov	r0, r3
 800e592:	f000 f87b 	bl	800e68c <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 800e596:	4603      	mov	r3, r0
 800e598:	4619      	mov	r1, r3
 800e59a:	200c      	movs	r0, #12
 800e59c:	f7ff fc00 	bl	800dda0 <_ZnwjPv>
 800e5a0:	4604      	mov	r4, r0
 800e5a2:	4620      	mov	r0, r4
 800e5a4:	f7ff ff46 	bl	800e434 <_ZN8touchgfx12NoTransitionC1Ev>
 800e5a8:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	689b      	ldr	r3, [r3, #8]
 800e5ae:	2100      	movs	r1, #0
 800e5b0:	4618      	mov	r0, r3
 800e5b2:	f000 f87e 	bl	800e6b2 <_ZN8touchgfx17AbstractPartition2atI10screenViewEERT_t>
 800e5b6:	4603      	mov	r3, r0
 800e5b8:	4619      	mov	r1, r3
 800e5ba:	20e0      	movs	r0, #224	; 0xe0
 800e5bc:	f7ff fbf0 	bl	800dda0 <_ZnwjPv>
 800e5c0:	4604      	mov	r4, r0
 800e5c2:	4620      	mov	r0, r4
 800e5c4:	f001 f9f4 	bl	800f9b0 <_ZN10screenViewC1Ev>
 800e5c8:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	685b      	ldr	r3, [r3, #4]
 800e5ce:	2100      	movs	r1, #0
 800e5d0:	4618      	mov	r0, r3
 800e5d2:	f000 f881 	bl	800e6d8 <_ZN8touchgfx17AbstractPartition2atI15screenPresenterEERT_t>
 800e5d6:	4603      	mov	r3, r0
 800e5d8:	4619      	mov	r1, r3
 800e5da:	2010      	movs	r0, #16
 800e5dc:	f7ff fbe0 	bl	800dda0 <_ZnwjPv>
 800e5e0:	4604      	mov	r4, r0
 800e5e2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e5e4:	4620      	mov	r0, r4
 800e5e6:	f001 f98d 	bl	800f904 <_ZN15screenPresenterC1ER10screenView>
 800e5ea:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 800e5ec:	683b      	ldr	r3, [r7, #0]
 800e5ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e5f0:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800e5f2:	68bb      	ldr	r3, [r7, #8]
 800e5f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e5f6:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e5fc:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800e5fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e600:	2b00      	cmp	r3, #0
 800e602:	d002      	beq.n	800e60a <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 800e604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e606:	3304      	adds	r3, #4
 800e608:	e000      	b.n	800e60c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b4>
 800e60a:	2300      	movs	r3, #0
 800e60c:	4619      	mov	r1, r3
 800e60e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800e610:	f7ff fda0 	bl	800e154 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800e614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e616:	3304      	adds	r3, #4
 800e618:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e61a:	4618      	mov	r0, r3
 800e61c:	f7ff fe0d 	bl	800e23a <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800e620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e622:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e624:	4618      	mov	r0, r3
 800e626:	f000 f86a 	bl	800e6fe <_ZN8touchgfx4ViewI15screenPresenterE4bindERS1_>
 800e62a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e62c:	61fb      	str	r3, [r7, #28]
 800e62e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e630:	61bb      	str	r3, [r7, #24]
 800e632:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e634:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 800e636:	69fb      	ldr	r3, [r7, #28]
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	330c      	adds	r3, #12
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	69f8      	ldr	r0, [r7, #28]
 800e640:	4798      	blx	r3
    newPresenter->activate();
 800e642:	69bb      	ldr	r3, [r7, #24]
 800e644:	681b      	ldr	r3, [r3, #0]
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	69b8      	ldr	r0, [r7, #24]
 800e64a:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800e64c:	6979      	ldr	r1, [r7, #20]
 800e64e:	69f8      	ldr	r0, [r7, #28]
 800e650:	f00b faa8 	bl	8019ba4 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800e654:	697b      	ldr	r3, [r7, #20]
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	3310      	adds	r3, #16
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	6978      	ldr	r0, [r7, #20]
 800e65e:	4798      	blx	r3
    newTransition->invalidate();
 800e660:	697b      	ldr	r3, [r7, #20]
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	3314      	adds	r3, #20
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	6978      	ldr	r0, [r7, #20]
 800e66a:	4798      	blx	r3
}
 800e66c:	bf00      	nop

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 800e66e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800e670:	4618      	mov	r0, r3
 800e672:	373c      	adds	r7, #60	; 0x3c
 800e674:	46bd      	mov	sp, r7
 800e676:	bd90      	pop	{r4, r7, pc}
 800e678:	080279c4 	.word	0x080279c4
 800e67c:	08027a54 	.word	0x08027a54
 800e680:	08027b58 	.word	0x08027b58
 800e684:	08027b9c 	.word	0x08027b9c
 800e688:	08027c40 	.word	0x08027c40

0800e68c <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 800e68c:	b580      	push	{r7, lr}
 800e68e:	b082      	sub	sp, #8
 800e690:	af00      	add	r7, sp, #0
 800e692:	6078      	str	r0, [r7, #4]
 800e694:	460b      	mov	r3, r1
 800e696:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	3324      	adds	r3, #36	; 0x24
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	887a      	ldrh	r2, [r7, #2]
 800e6a2:	4611      	mov	r1, r2
 800e6a4:	6878      	ldr	r0, [r7, #4]
 800e6a6:	4798      	blx	r3
 800e6a8:	4603      	mov	r3, r0
    }
 800e6aa:	4618      	mov	r0, r3
 800e6ac:	3708      	adds	r7, #8
 800e6ae:	46bd      	mov	sp, r7
 800e6b0:	bd80      	pop	{r7, pc}

0800e6b2 <_ZN8touchgfx17AbstractPartition2atI10screenViewEERT_t>:
    T& at(const uint16_t index)
 800e6b2:	b580      	push	{r7, lr}
 800e6b4:	b082      	sub	sp, #8
 800e6b6:	af00      	add	r7, sp, #0
 800e6b8:	6078      	str	r0, [r7, #4]
 800e6ba:	460b      	mov	r3, r1
 800e6bc:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	3324      	adds	r3, #36	; 0x24
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	887a      	ldrh	r2, [r7, #2]
 800e6c8:	4611      	mov	r1, r2
 800e6ca:	6878      	ldr	r0, [r7, #4]
 800e6cc:	4798      	blx	r3
 800e6ce:	4603      	mov	r3, r0
    }
 800e6d0:	4618      	mov	r0, r3
 800e6d2:	3708      	adds	r7, #8
 800e6d4:	46bd      	mov	sp, r7
 800e6d6:	bd80      	pop	{r7, pc}

0800e6d8 <_ZN8touchgfx17AbstractPartition2atI15screenPresenterEERT_t>:
    T& at(const uint16_t index)
 800e6d8:	b580      	push	{r7, lr}
 800e6da:	b082      	sub	sp, #8
 800e6dc:	af00      	add	r7, sp, #0
 800e6de:	6078      	str	r0, [r7, #4]
 800e6e0:	460b      	mov	r3, r1
 800e6e2:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	3324      	adds	r3, #36	; 0x24
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	887a      	ldrh	r2, [r7, #2]
 800e6ee:	4611      	mov	r1, r2
 800e6f0:	6878      	ldr	r0, [r7, #4]
 800e6f2:	4798      	blx	r3
 800e6f4:	4603      	mov	r3, r0
    }
 800e6f6:	4618      	mov	r0, r3
 800e6f8:	3708      	adds	r7, #8
 800e6fa:	46bd      	mov	sp, r7
 800e6fc:	bd80      	pop	{r7, pc}

0800e6fe <_ZN8touchgfx4ViewI15screenPresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This function
     * is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
 800e6fe:	b480      	push	{r7}
 800e700:	b083      	sub	sp, #12
 800e702:	af00      	add	r7, sp, #0
 800e704:	6078      	str	r0, [r7, #4]
 800e706:	6039      	str	r1, [r7, #0]
    {
        presenter = &newPresenter;
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	683a      	ldr	r2, [r7, #0]
 800e70c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800e70e:	bf00      	nop
 800e710:	370c      	adds	r7, #12
 800e712:	46bd      	mov	sp, r7
 800e714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e718:	4770      	bx	lr
	...

0800e71c <_ZN8touchgfx12NoTransitionD1Ev>:
 800e71c:	b580      	push	{r7, lr}
 800e71e:	b082      	sub	sp, #8
 800e720:	af00      	add	r7, sp, #0
 800e722:	6078      	str	r0, [r7, #4]
 800e724:	4a05      	ldr	r2, [pc, #20]	; (800e73c <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	601a      	str	r2, [r3, #0]
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	4618      	mov	r0, r3
 800e72e:	f7ff fc39 	bl	800dfa4 <_ZN8touchgfx10TransitionD1Ev>
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	4618      	mov	r0, r3
 800e736:	3708      	adds	r7, #8
 800e738:	46bd      	mov	sp, r7
 800e73a:	bd80      	pop	{r7, pc}
 800e73c:	08029fc8 	.word	0x08029fc8

0800e740 <_ZN8touchgfx12NoTransitionD0Ev>:
 800e740:	b580      	push	{r7, lr}
 800e742:	b082      	sub	sp, #8
 800e744:	af00      	add	r7, sp, #0
 800e746:	6078      	str	r0, [r7, #4]
 800e748:	6878      	ldr	r0, [r7, #4]
 800e74a:	f7ff ffe7 	bl	800e71c <_ZN8touchgfx12NoTransitionD1Ev>
 800e74e:	210c      	movs	r1, #12
 800e750:	6878      	ldr	r0, [r7, #4]
 800e752:	f018 f818 	bl	8026786 <_ZdlPvj>
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	4618      	mov	r0, r3
 800e75a:	3708      	adds	r7, #8
 800e75c:	46bd      	mov	sp, r7
 800e75e:	bd80      	pop	{r7, pc}

0800e760 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800e760:	b580      	push	{r7, lr}
 800e762:	b082      	sub	sp, #8
 800e764:	af00      	add	r7, sp, #0
 800e766:	6078      	str	r0, [r7, #4]
 800e768:	4a05      	ldr	r2, [pc, #20]	; (800e780 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	601a      	str	r2, [r3, #0]
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	4618      	mov	r0, r3
 800e772:	f7ff fbb9 	bl	800dee8 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	4618      	mov	r0, r3
 800e77a:	3708      	adds	r7, #8
 800e77c:	46bd      	mov	sp, r7
 800e77e:	bd80      	pop	{r7, pc}
 800e780:	0802a038 	.word	0x0802a038

0800e784 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 800e784:	b580      	push	{r7, lr}
 800e786:	b082      	sub	sp, #8
 800e788:	af00      	add	r7, sp, #0
 800e78a:	6078      	str	r0, [r7, #4]
 800e78c:	6878      	ldr	r0, [r7, #4]
 800e78e:	f7ff ffe7 	bl	800e760 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800e792:	2110      	movs	r1, #16
 800e794:	6878      	ldr	r0, [r7, #4]
 800e796:	f017 fff6 	bl	8026786 <_ZdlPvj>
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	4618      	mov	r0, r3
 800e79e:	3708      	adds	r7, #8
 800e7a0:	46bd      	mov	sp, r7
 800e7a2:	bd80      	pop	{r7, pc}

0800e7a4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 800e7a4:	b580      	push	{r7, lr}
 800e7a6:	b082      	sub	sp, #8
 800e7a8:	af00      	add	r7, sp, #0
 800e7aa:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun)();
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	685b      	ldr	r3, [r3, #4]
 800e7b0:	687a      	ldr	r2, [r7, #4]
 800e7b2:	68d2      	ldr	r2, [r2, #12]
 800e7b4:	1052      	asrs	r2, r2, #1
 800e7b6:	1899      	adds	r1, r3, r2
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	68db      	ldr	r3, [r3, #12]
 800e7bc:	f003 0301 	and.w	r3, r3, #1
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d102      	bne.n	800e7ca <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	689b      	ldr	r3, [r3, #8]
 800e7c8:	e00a      	b.n	800e7e0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	685b      	ldr	r3, [r3, #4]
 800e7ce:	687a      	ldr	r2, [r7, #4]
 800e7d0:	68d2      	ldr	r2, [r2, #12]
 800e7d2:	1052      	asrs	r2, r2, #1
 800e7d4:	4413      	add	r3, r2
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	687a      	ldr	r2, [r7, #4]
 800e7da:	6892      	ldr	r2, [r2, #8]
 800e7dc:	4413      	add	r3, r2
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	4608      	mov	r0, r1
 800e7e2:	4798      	blx	r3
    }
 800e7e4:	bf00      	nop
 800e7e6:	3708      	adds	r7, #8
 800e7e8:	46bd      	mov	sp, r7
 800e7ea:	bd80      	pop	{r7, pc}

0800e7ec <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 800e7ec:	b480      	push	{r7}
 800e7ee:	b083      	sub	sp, #12
 800e7f0:	af00      	add	r7, sp, #0
 800e7f2:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun != 0);
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	685b      	ldr	r3, [r3, #4]
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d010      	beq.n	800e81e <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	689b      	ldr	r3, [r3, #8]
 800e800:	2b00      	cmp	r3, #0
 800e802:	d107      	bne.n	800e814 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	68db      	ldr	r3, [r3, #12]
 800e808:	f003 0301 	and.w	r3, r3, #1
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d101      	bne.n	800e814 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800e810:	2301      	movs	r3, #1
 800e812:	e000      	b.n	800e816 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 800e814:	2300      	movs	r3, #0
 800e816:	2b01      	cmp	r3, #1
 800e818:	d001      	beq.n	800e81e <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800e81a:	2301      	movs	r3, #1
 800e81c:	e000      	b.n	800e820 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 800e81e:	2300      	movs	r3, #0
    }
 800e820:	4618      	mov	r0, r3
 800e822:	370c      	adds	r7, #12
 800e824:	46bd      	mov	sp, r7
 800e826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e82a:	4770      	bx	lr

0800e82c <_ZN8touchgfx9colortypeC1Em>:
     *
     * @param  col The color.
     *
     * @see Color::getColorFromRGB
     */
    colortype(uint32_t col)
 800e82c:	b480      	push	{r7}
 800e82e:	b083      	sub	sp, #12
 800e830:	af00      	add	r7, sp, #0
 800e832:	6078      	str	r0, [r7, #4]
 800e834:	6039      	str	r1, [r7, #0]
        : color(col)
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	683a      	ldr	r2, [r7, #0]
 800e83a:	601a      	str	r2, [r3, #0]
    {
    }
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	4618      	mov	r0, r3
 800e840:	370c      	adds	r7, #12
 800e842:	46bd      	mov	sp, r7
 800e844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e848:	4770      	bx	lr

0800e84a <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 800e84a:	b480      	push	{r7}
 800e84c:	b083      	sub	sp, #12
 800e84e:	af00      	add	r7, sp, #0
 800e850:	6078      	str	r0, [r7, #4]
        : x(0), y(0), width(0), height(0)
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	2200      	movs	r2, #0
 800e856:	801a      	strh	r2, [r3, #0]
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	2200      	movs	r2, #0
 800e85c:	805a      	strh	r2, [r3, #2]
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	2200      	movs	r2, #0
 800e862:	809a      	strh	r2, [r3, #4]
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	2200      	movs	r2, #0
 800e868:	80da      	strh	r2, [r3, #6]
    {
    }
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	4618      	mov	r0, r3
 800e86e:	370c      	adds	r7, #12
 800e870:	46bd      	mov	sp, r7
 800e872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e876:	4770      	bx	lr

0800e878 <_ZN8touchgfx4RectC1Essss>:
     * @param  rectX      The x coordinate.
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
 800e878:	b480      	push	{r7}
 800e87a:	b085      	sub	sp, #20
 800e87c:	af00      	add	r7, sp, #0
 800e87e:	60f8      	str	r0, [r7, #12]
 800e880:	4608      	mov	r0, r1
 800e882:	4611      	mov	r1, r2
 800e884:	461a      	mov	r2, r3
 800e886:	4603      	mov	r3, r0
 800e888:	817b      	strh	r3, [r7, #10]
 800e88a:	460b      	mov	r3, r1
 800e88c:	813b      	strh	r3, [r7, #8]
 800e88e:	4613      	mov	r3, r2
 800e890:	80fb      	strh	r3, [r7, #6]
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 800e892:	68fb      	ldr	r3, [r7, #12]
 800e894:	897a      	ldrh	r2, [r7, #10]
 800e896:	801a      	strh	r2, [r3, #0]
 800e898:	68fb      	ldr	r3, [r7, #12]
 800e89a:	893a      	ldrh	r2, [r7, #8]
 800e89c:	805a      	strh	r2, [r3, #2]
 800e89e:	68fb      	ldr	r3, [r7, #12]
 800e8a0:	88fa      	ldrh	r2, [r7, #6]
 800e8a2:	809a      	strh	r2, [r3, #4]
 800e8a4:	68fb      	ldr	r3, [r7, #12]
 800e8a6:	8b3a      	ldrh	r2, [r7, #24]
 800e8a8:	80da      	strh	r2, [r3, #6]
    {
    }
 800e8aa:	68fb      	ldr	r3, [r7, #12]
 800e8ac:	4618      	mov	r0, r3
 800e8ae:	3714      	adds	r7, #20
 800e8b0:	46bd      	mov	sp, r7
 800e8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8b6:	4770      	bx	lr

0800e8b8 <_ZN8touchgfx6BitmapC1Et>:
     * Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
 800e8b8:	b480      	push	{r7}
 800e8ba:	b083      	sub	sp, #12
 800e8bc:	af00      	add	r7, sp, #0
 800e8be:	6078      	str	r0, [r7, #4]
 800e8c0:	460b      	mov	r3, r1
 800e8c2:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	887a      	ldrh	r2, [r7, #2]
 800e8c8:	801a      	strh	r2, [r3, #0]
    {
    }
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	4618      	mov	r0, r3
 800e8ce:	370c      	adds	r7, #12
 800e8d0:	46bd      	mov	sp, r7
 800e8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8d6:	4770      	bx	lr

0800e8d8 <_ZN8touchgfx8DrawableC1Ev>:
 */
class Drawable
{
public:
    /** Initializes a new instance of the Drawable class. */
    Drawable()
 800e8d8:	b580      	push	{r7, lr}
 800e8da:	b082      	sub	sp, #8
 800e8dc:	af00      	add	r7, sp, #0
 800e8de:	6078      	str	r0, [r7, #4]
          nextSibling(0),
          nextDrawChainElement(0),
          cachedAbsX(0),
          cachedAbsY(0),
          touchable(false),
          visible(true)
 800e8e0:	4a14      	ldr	r2, [pc, #80]	; (800e934 <_ZN8touchgfx8DrawableC1Ev+0x5c>)
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	601a      	str	r2, [r3, #0]
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	3304      	adds	r3, #4
 800e8ea:	4618      	mov	r0, r3
 800e8ec:	f7ff ffad 	bl	800e84a <_ZN8touchgfx4RectC1Ev>
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	330c      	adds	r3, #12
 800e8f4:	4618      	mov	r0, r3
 800e8f6:	f7ff ffa8 	bl	800e84a <_ZN8touchgfx4RectC1Ev>
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	2200      	movs	r2, #0
 800e8fe:	615a      	str	r2, [r3, #20]
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	2200      	movs	r2, #0
 800e904:	619a      	str	r2, [r3, #24]
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	2200      	movs	r2, #0
 800e90a:	61da      	str	r2, [r3, #28]
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	2200      	movs	r2, #0
 800e910:	841a      	strh	r2, [r3, #32]
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	2200      	movs	r2, #0
 800e916:	845a      	strh	r2, [r3, #34]	; 0x22
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	2200      	movs	r2, #0
 800e91c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	2201      	movs	r2, #1
 800e924:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    {
    }
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	4618      	mov	r0, r3
 800e92c:	3708      	adds	r7, #8
 800e92e:	46bd      	mov	sp, r7
 800e930:	bd80      	pop	{r7, pc}
 800e932:	bf00      	nop
 800e934:	0802b164 	.word	0x0802b164

0800e938 <_ZN8touchgfx8DrawableD1Ev>:

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 800e938:	b480      	push	{r7}
 800e93a:	b083      	sub	sp, #12
 800e93c:	af00      	add	r7, sp, #0
 800e93e:	6078      	str	r0, [r7, #4]
    {
 800e940:	4a04      	ldr	r2, [pc, #16]	; (800e954 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	601a      	str	r2, [r3, #0]
    }
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	4618      	mov	r0, r3
 800e94a:	370c      	adds	r7, #12
 800e94c:	46bd      	mov	sp, r7
 800e94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e952:	4770      	bx	lr
 800e954:	0802b164 	.word	0x0802b164

0800e958 <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 800e958:	b580      	push	{r7, lr}
 800e95a:	b082      	sub	sp, #8
 800e95c:	af00      	add	r7, sp, #0
 800e95e:	6078      	str	r0, [r7, #4]
    }
 800e960:	6878      	ldr	r0, [r7, #4]
 800e962:	f7ff ffe9 	bl	800e938 <_ZN8touchgfx8DrawableD1Ev>
 800e966:	2128      	movs	r1, #40	; 0x28
 800e968:	6878      	ldr	r0, [r7, #4]
 800e96a:	f017 ff0c 	bl	8026786 <_ZdlPvj>
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	4618      	mov	r0, r3
 800e972:	3708      	adds	r7, #8
 800e974:	46bd      	mov	sp, r7
 800e976:	bd80      	pop	{r7, pc}

0800e978 <_ZNK8touchgfx8Drawable17invalidateContentEv>:
     * Tell the framework that the contents of the Drawable needs to be redrawn. If the Drawable is
     * invisible, nothing happens. Subclasses of Drawable are encouraged to implement this function
     * and invalidate as little as possible, i.e. the smallest rectangle covering the visual element(s)
     * drawn by the widget.
     */
    virtual void invalidateContent() const
 800e978:	b580      	push	{r7, lr}
 800e97a:	b082      	sub	sp, #8
 800e97c:	af00      	add	r7, sp, #0
 800e97e:	6078      	str	r0, [r7, #4]
    {
        // Consider checking if *this is in the draw chain
        if (visible)
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800e986:	2b00      	cmp	r3, #0
 800e988:	d005      	beq.n	800e996 <_ZNK8touchgfx8Drawable17invalidateContentEv+0x1e>
        {
            invalidate();
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	3314      	adds	r3, #20
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	6878      	ldr	r0, [r7, #4]
 800e994:	4798      	blx	r3
        }
    }
 800e996:	bf00      	nop
 800e998:	3708      	adds	r7, #8
 800e99a:	46bd      	mov	sp, r7
 800e99c:	bd80      	pop	{r7, pc}

0800e99e <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * Function for obtaining the first child of this drawable if any.
     *
     * @return A pointer on the first child drawable if any.
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
 800e99e:	b480      	push	{r7}
 800e9a0:	b083      	sub	sp, #12
 800e9a2:	af00      	add	r7, sp, #0
 800e9a4:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800e9a6:	2300      	movs	r3, #0
    }
 800e9a8:	4618      	mov	r0, r3
 800e9aa:	370c      	adds	r7, #12
 800e9ac:	46bd      	mov	sp, r7
 800e9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9b2:	4770      	bx	lr

0800e9b4 <_ZN8touchgfx8Drawable11setPositionEssss>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     *
     * @see setXY,setWidthHeight,setPosition(const Drawable&)
     */
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 800e9b4:	b580      	push	{r7, lr}
 800e9b6:	b084      	sub	sp, #16
 800e9b8:	af00      	add	r7, sp, #0
 800e9ba:	60f8      	str	r0, [r7, #12]
 800e9bc:	4608      	mov	r0, r1
 800e9be:	4611      	mov	r1, r2
 800e9c0:	461a      	mov	r2, r3
 800e9c2:	4603      	mov	r3, r0
 800e9c4:	817b      	strh	r3, [r7, #10]
 800e9c6:	460b      	mov	r3, r1
 800e9c8:	813b      	strh	r3, [r7, #8]
 800e9ca:	4613      	mov	r3, r2
 800e9cc:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 800e9ce:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800e9d2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e9d6:	4619      	mov	r1, r3
 800e9d8:	68f8      	ldr	r0, [r7, #12]
 800e9da:	f000 f82a 	bl	800ea32 <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 800e9de:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800e9e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e9e6:	4619      	mov	r1, r3
 800e9e8:	68f8      	ldr	r0, [r7, #12]
 800e9ea:	f000 f87e 	bl	800eaea <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 800e9ee:	bf00      	nop
 800e9f0:	3710      	adds	r7, #16
 800e9f2:	46bd      	mov	sp, r7
 800e9f4:	bd80      	pop	{r7, pc}

0800e9f6 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 800e9f6:	b480      	push	{r7}
 800e9f8:	b083      	sub	sp, #12
 800e9fa:	af00      	add	r7, sp, #0
 800e9fc:	6078      	str	r0, [r7, #4]
 800e9fe:	460b      	mov	r3, r1
 800ea00:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	887a      	ldrh	r2, [r7, #2]
 800ea06:	809a      	strh	r2, [r3, #4]
    }
 800ea08:	bf00      	nop
 800ea0a:	370c      	adds	r7, #12
 800ea0c:	46bd      	mov	sp, r7
 800ea0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea12:	4770      	bx	lr

0800ea14 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 800ea14:	b480      	push	{r7}
 800ea16:	b083      	sub	sp, #12
 800ea18:	af00      	add	r7, sp, #0
 800ea1a:	6078      	str	r0, [r7, #4]
 800ea1c:	460b      	mov	r3, r1
 800ea1e:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	887a      	ldrh	r2, [r7, #2]
 800ea24:	80da      	strh	r2, [r3, #6]
    }
 800ea26:	bf00      	nop
 800ea28:	370c      	adds	r7, #12
 800ea2a:	46bd      	mov	sp, r7
 800ea2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea30:	4770      	bx	lr

0800ea32 <_ZN8touchgfx8Drawable5setXYEss>:
     *
     * @see moveTo
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setXY(int16_t x, int16_t y)
 800ea32:	b580      	push	{r7, lr}
 800ea34:	b082      	sub	sp, #8
 800ea36:	af00      	add	r7, sp, #0
 800ea38:	6078      	str	r0, [r7, #4]
 800ea3a:	460b      	mov	r3, r1
 800ea3c:	807b      	strh	r3, [r7, #2]
 800ea3e:	4613      	mov	r3, r2
 800ea40:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	681b      	ldr	r3, [r3, #0]
 800ea46:	3330      	adds	r3, #48	; 0x30
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800ea4e:	4611      	mov	r1, r2
 800ea50:	6878      	ldr	r0, [r7, #4]
 800ea52:	4798      	blx	r3
        setY(y);
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	681b      	ldr	r3, [r3, #0]
 800ea58:	3334      	adds	r3, #52	; 0x34
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	f9b7 2000 	ldrsh.w	r2, [r7]
 800ea60:	4611      	mov	r1, r2
 800ea62:	6878      	ldr	r0, [r7, #4]
 800ea64:	4798      	blx	r3
    }
 800ea66:	bf00      	nop
 800ea68:	3708      	adds	r7, #8
 800ea6a:	46bd      	mov	sp, r7
 800ea6c:	bd80      	pop	{r7, pc}

0800ea6e <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 800ea6e:	b480      	push	{r7}
 800ea70:	b083      	sub	sp, #12
 800ea72:	af00      	add	r7, sp, #0
 800ea74:	6078      	str	r0, [r7, #4]
 800ea76:	460b      	mov	r3, r1
 800ea78:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	887a      	ldrh	r2, [r7, #2]
 800ea7e:	811a      	strh	r2, [r3, #8]
    }
 800ea80:	bf00      	nop
 800ea82:	370c      	adds	r7, #12
 800ea84:	46bd      	mov	sp, r7
 800ea86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea8a:	4770      	bx	lr

0800ea8c <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 800ea8c:	b480      	push	{r7}
 800ea8e:	b083      	sub	sp, #12
 800ea90:	af00      	add	r7, sp, #0
 800ea92:	6078      	str	r0, [r7, #4]
 800ea94:	460b      	mov	r3, r1
 800ea96:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	887a      	ldrh	r2, [r7, #2]
 800ea9c:	815a      	strh	r2, [r3, #10]
    }
 800ea9e:	bf00      	nop
 800eaa0:	370c      	adds	r7, #12
 800eaa2:	46bd      	mov	sp, r7
 800eaa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa8:	4770      	bx	lr

0800eaaa <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 800eaaa:	b480      	push	{r7}
 800eaac:	b083      	sub	sp, #12
 800eaae:	af00      	add	r7, sp, #0
 800eab0:	6078      	str	r0, [r7, #4]
    {
    }
 800eab2:	bf00      	nop
 800eab4:	370c      	adds	r7, #12
 800eab6:	46bd      	mov	sp, r7
 800eab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eabc:	4770      	bx	lr

0800eabe <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800eabe:	b480      	push	{r7}
 800eac0:	b083      	sub	sp, #12
 800eac2:	af00      	add	r7, sp, #0
 800eac4:	6078      	str	r0, [r7, #4]
 800eac6:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800eac8:	bf00      	nop
 800eaca:	370c      	adds	r7, #12
 800eacc:	46bd      	mov	sp, r7
 800eace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ead2:	4770      	bx	lr

0800ead4 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800ead4:	b480      	push	{r7}
 800ead6:	b083      	sub	sp, #12
 800ead8:	af00      	add	r7, sp, #0
 800eada:	6078      	str	r0, [r7, #4]
 800eadc:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800eade:	bf00      	nop
 800eae0:	370c      	adds	r7, #12
 800eae2:	46bd      	mov	sp, r7
 800eae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eae8:	4770      	bx	lr

0800eaea <_ZN8touchgfx8Drawable14setWidthHeightEss>:
     * coordinates).
     *
     * @param  width  The width.
     * @param  height The height.
     */
    void setWidthHeight(int16_t width, int16_t height)
 800eaea:	b580      	push	{r7, lr}
 800eaec:	b082      	sub	sp, #8
 800eaee:	af00      	add	r7, sp, #0
 800eaf0:	6078      	str	r0, [r7, #4]
 800eaf2:	460b      	mov	r3, r1
 800eaf4:	807b      	strh	r3, [r7, #2]
 800eaf6:	4613      	mov	r3, r2
 800eaf8:	803b      	strh	r3, [r7, #0]
    {
        setWidth(width);
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	3338      	adds	r3, #56	; 0x38
 800eb00:	681b      	ldr	r3, [r3, #0]
 800eb02:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800eb06:	4611      	mov	r1, r2
 800eb08:	6878      	ldr	r0, [r7, #4]
 800eb0a:	4798      	blx	r3
        setHeight(height);
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	333c      	adds	r3, #60	; 0x3c
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	f9b7 2000 	ldrsh.w	r2, [r7]
 800eb18:	4611      	mov	r1, r2
 800eb1a:	6878      	ldr	r0, [r7, #4]
 800eb1c:	4798      	blx	r3
    }
 800eb1e:	bf00      	nop
 800eb20:	3708      	adds	r7, #8
 800eb22:	46bd      	mov	sp, r7
 800eb24:	bd80      	pop	{r7, pc}

0800eb26 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * ignores the event. The event is only received if the drawable is touchable and
     * visible.
     *
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800eb26:	b480      	push	{r7}
 800eb28:	b083      	sub	sp, #12
 800eb2a:	af00      	add	r7, sp, #0
 800eb2c:	6078      	str	r0, [r7, #4]
 800eb2e:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800eb30:	bf00      	nop
 800eb32:	370c      	adds	r7, #12
 800eb34:	46bd      	mov	sp, r7
 800eb36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb3a:	4770      	bx	lr

0800eb3c <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 800eb3c:	b480      	push	{r7}
 800eb3e:	b083      	sub	sp, #12
 800eb40:	af00      	add	r7, sp, #0
 800eb42:	6078      	str	r0, [r7, #4]
    {
    }
 800eb44:	bf00      	nop
 800eb46:	370c      	adds	r7, #12
 800eb48:	46bd      	mov	sp, r7
 800eb4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb4e:	4770      	bx	lr

0800eb50 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     *
     * @return true if the Drawable is visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 800eb50:	b480      	push	{r7}
 800eb52:	b083      	sub	sp, #12
 800eb54:	af00      	add	r7, sp, #0
 800eb56:	6078      	str	r0, [r7, #4]
    {
        return visible;
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 800eb5e:	4618      	mov	r0, r3
 800eb60:	370c      	adds	r7, #12
 800eb62:	46bd      	mov	sp, r7
 800eb64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb68:	4770      	bx	lr

0800eb6a <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 800eb6a:	b480      	push	{r7}
 800eb6c:	b083      	sub	sp, #12
 800eb6e:	af00      	add	r7, sp, #0
 800eb70:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 800eb78:	4618      	mov	r0, r3
 800eb7a:	370c      	adds	r7, #12
 800eb7c:	46bd      	mov	sp, r7
 800eb7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb82:	4770      	bx	lr

0800eb84 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 800eb84:	b580      	push	{r7, lr}
 800eb86:	b082      	sub	sp, #8
 800eb88:	af00      	add	r7, sp, #0
 800eb8a:	6078      	str	r0, [r7, #4]
 800eb8c:	460b      	mov	r3, r1
 800eb8e:	807b      	strh	r3, [r7, #2]
 800eb90:	4613      	mov	r3, r2
 800eb92:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	681b      	ldr	r3, [r3, #0]
 800eb98:	3354      	adds	r3, #84	; 0x54
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	8879      	ldrh	r1, [r7, #2]
 800eb9e:	687a      	ldr	r2, [r7, #4]
 800eba0:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800eba4:	b292      	uxth	r2, r2
 800eba6:	1a8a      	subs	r2, r1, r2
 800eba8:	b292      	uxth	r2, r2
 800ebaa:	b210      	sxth	r0, r2
 800ebac:	8839      	ldrh	r1, [r7, #0]
 800ebae:	687a      	ldr	r2, [r7, #4]
 800ebb0:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800ebb4:	b292      	uxth	r2, r2
 800ebb6:	1a8a      	subs	r2, r1, r2
 800ebb8:	b292      	uxth	r2, r2
 800ebba:	b212      	sxth	r2, r2
 800ebbc:	4601      	mov	r1, r0
 800ebbe:	6878      	ldr	r0, [r7, #4]
 800ebc0:	4798      	blx	r3
    }
 800ebc2:	bf00      	nop
 800ebc4:	3708      	adds	r7, #8
 800ebc6:	46bd      	mov	sp, r7
 800ebc8:	bd80      	pop	{r7, pc}

0800ebca <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 800ebca:	b480      	push	{r7}
 800ebcc:	b083      	sub	sp, #12
 800ebce:	af00      	add	r7, sp, #0
 800ebd0:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ebd8:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ebe0:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ebe8:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 800ebea:	bf00      	nop
 800ebec:	370c      	adds	r7, #12
 800ebee:	46bd      	mov	sp, r7
 800ebf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebf4:	4770      	bx	lr

0800ebf6 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 800ebf6:	b580      	push	{r7, lr}
 800ebf8:	b084      	sub	sp, #16
 800ebfa:	af00      	add	r7, sp, #0
 800ebfc:	60f8      	str	r0, [r7, #12]
 800ebfe:	60b9      	str	r1, [r7, #8]
 800ec00:	607a      	str	r2, [r7, #4]
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
 800ec02:	68f8      	ldr	r0, [r7, #12]
 800ec04:	f7ff ffe1 	bl	800ebca <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	681a      	ldr	r2, [r3, #0]
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	68fa      	ldr	r2, [r7, #12]
 800ec14:	601a      	str	r2, [r3, #0]
    }
 800ec16:	bf00      	nop
 800ec18:	3710      	adds	r7, #16
 800ec1a:	46bd      	mov	sp, r7
 800ec1c:	bd80      	pop	{r7, pc}
	...

0800ec20 <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 800ec20:	b580      	push	{r7, lr}
 800ec22:	b082      	sub	sp, #8
 800ec24:	af00      	add	r7, sp, #0
 800ec26:	6078      	str	r0, [r7, #4]
    {
 800ec28:	4a06      	ldr	r2, [pc, #24]	; (800ec44 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	601a      	str	r2, [r3, #0]
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	3304      	adds	r3, #4
 800ec32:	4618      	mov	r0, r3
 800ec34:	f000 facc 	bl	800f1d0 <_ZN8touchgfx9ContainerD1Ev>
    }
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	4618      	mov	r0, r3
 800ec3c:	3708      	adds	r7, #8
 800ec3e:	46bd      	mov	sp, r7
 800ec40:	bd80      	pop	{r7, pc}
 800ec42:	bf00      	nop
 800ec44:	0802b268 	.word	0x0802b268

0800ec48 <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 800ec48:	b580      	push	{r7, lr}
 800ec4a:	b082      	sub	sp, #8
 800ec4c:	af00      	add	r7, sp, #0
 800ec4e:	6078      	str	r0, [r7, #4]
    }
 800ec50:	6878      	ldr	r0, [r7, #4]
 800ec52:	f7ff ffe5 	bl	800ec20 <_ZN8touchgfx6ScreenD1Ev>
 800ec56:	213c      	movs	r1, #60	; 0x3c
 800ec58:	6878      	ldr	r0, [r7, #4]
 800ec5a:	f017 fd94 	bl	8026786 <_ZdlPvj>
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	4618      	mov	r0, r3
 800ec62:	3708      	adds	r7, #8
 800ec64:	46bd      	mov	sp, r7
 800ec66:	bd80      	pop	{r7, pc}

0800ec68 <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 800ec68:	b480      	push	{r7}
 800ec6a:	b083      	sub	sp, #12
 800ec6c:	af00      	add	r7, sp, #0
 800ec6e:	6078      	str	r0, [r7, #4]
    {
    }
 800ec70:	bf00      	nop
 800ec72:	370c      	adds	r7, #12
 800ec74:	46bd      	mov	sp, r7
 800ec76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec7a:	4770      	bx	lr

0800ec7c <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 800ec7c:	b480      	push	{r7}
 800ec7e:	b083      	sub	sp, #12
 800ec80:	af00      	add	r7, sp, #0
 800ec82:	6078      	str	r0, [r7, #4]
    {
    }
 800ec84:	bf00      	nop
 800ec86:	370c      	adds	r7, #12
 800ec88:	46bd      	mov	sp, r7
 800ec8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec8e:	4770      	bx	lr

0800ec90 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
 800ec90:	b480      	push	{r7}
 800ec92:	b083      	sub	sp, #12
 800ec94:	af00      	add	r7, sp, #0
 800ec96:	6078      	str	r0, [r7, #4]
    {
    }
 800ec98:	bf00      	nop
 800ec9a:	370c      	adds	r7, #12
 800ec9c:	46bd      	mov	sp, r7
 800ec9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eca2:	4770      	bx	lr

0800eca4 <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 800eca4:	b480      	push	{r7}
 800eca6:	b083      	sub	sp, #12
 800eca8:	af00      	add	r7, sp, #0
 800ecaa:	6078      	str	r0, [r7, #4]
    {
    }
 800ecac:	bf00      	nop
 800ecae:	370c      	adds	r7, #12
 800ecb0:	46bd      	mov	sp, r7
 800ecb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecb6:	4770      	bx	lr

0800ecb8 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 800ecb8:	b480      	push	{r7}
 800ecba:	b083      	sub	sp, #12
 800ecbc:	af00      	add	r7, sp, #0
 800ecbe:	6078      	str	r0, [r7, #4]
 800ecc0:	460b      	mov	r3, r1
 800ecc2:	70fb      	strb	r3, [r7, #3]
    {
        (void)key; // Unused variable
    }
 800ecc4:	bf00      	nop
 800ecc6:	370c      	adds	r7, #12
 800ecc8:	46bd      	mov	sp, r7
 800ecca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecce:	4770      	bx	lr

0800ecd0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 800ecd0:	b580      	push	{r7, lr}
 800ecd2:	b082      	sub	sp, #8
 800ecd4:	af00      	add	r7, sp, #0
 800ecd6:	6078      	str	r0, [r7, #4]
 800ecd8:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	3304      	adds	r3, #4
 800ecde:	6839      	ldr	r1, [r7, #0]
 800ece0:	4618      	mov	r0, r3
 800ece2:	f006 f821 	bl	8014d28 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 800ece6:	bf00      	nop
 800ece8:	3708      	adds	r7, #8
 800ecea:	46bd      	mov	sp, r7
 800ecec:	bd80      	pop	{r7, pc}

0800ecee <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     * Since a Widget is only one Drawable, Widget::getLastChild simply yields itself as
     * result, but only if the Widget isVisible and isTouchable.
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
 800ecee:	b580      	push	{r7, lr}
 800ecf0:	b084      	sub	sp, #16
 800ecf2:	af00      	add	r7, sp, #0
 800ecf4:	60f8      	str	r0, [r7, #12]
 800ecf6:	607b      	str	r3, [r7, #4]
 800ecf8:	460b      	mov	r3, r1
 800ecfa:	817b      	strh	r3, [r7, #10]
 800ecfc:	4613      	mov	r3, r2
 800ecfe:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	4618      	mov	r0, r3
 800ed04:	f7ff ff24 	bl	800eb50 <_ZNK8touchgfx8Drawable9isVisibleEv>
 800ed08:	4603      	mov	r3, r0
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d008      	beq.n	800ed20 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800ed0e:	68fb      	ldr	r3, [r7, #12]
 800ed10:	4618      	mov	r0, r3
 800ed12:	f7ff ff2a 	bl	800eb6a <_ZNK8touchgfx8Drawable11isTouchableEv>
 800ed16:	4603      	mov	r3, r0
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d001      	beq.n	800ed20 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800ed1c:	2301      	movs	r3, #1
 800ed1e:	e000      	b.n	800ed22 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 800ed20:	2300      	movs	r3, #0
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d002      	beq.n	800ed2c <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 800ed26:	68fa      	ldr	r2, [r7, #12]
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	601a      	str	r2, [r3, #0]
        }
    }
 800ed2c:	bf00      	nop
 800ed2e:	3710      	adds	r7, #16
 800ed30:	46bd      	mov	sp, r7
 800ed32:	bd80      	pop	{r7, pc}

0800ed34 <_ZN8touchgfx6WidgetC1Ev>:
class Widget : public Drawable
 800ed34:	b580      	push	{r7, lr}
 800ed36:	b082      	sub	sp, #8
 800ed38:	af00      	add	r7, sp, #0
 800ed3a:	6078      	str	r0, [r7, #4]
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	4618      	mov	r0, r3
 800ed40:	f7ff fdca 	bl	800e8d8 <_ZN8touchgfx8DrawableC1Ev>
 800ed44:	4a03      	ldr	r2, [pc, #12]	; (800ed54 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	601a      	str	r2, [r3, #0]
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	4618      	mov	r0, r3
 800ed4e:	3708      	adds	r7, #8
 800ed50:	46bd      	mov	sp, r7
 800ed52:	bd80      	pop	{r7, pc}
 800ed54:	0802a168 	.word	0x0802a168

0800ed58 <_ZN8touchgfx6WidgetD1Ev>:
 800ed58:	b580      	push	{r7, lr}
 800ed5a:	b082      	sub	sp, #8
 800ed5c:	af00      	add	r7, sp, #0
 800ed5e:	6078      	str	r0, [r7, #4]
 800ed60:	4a05      	ldr	r2, [pc, #20]	; (800ed78 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	601a      	str	r2, [r3, #0]
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	4618      	mov	r0, r3
 800ed6a:	f7ff fde5 	bl	800e938 <_ZN8touchgfx8DrawableD1Ev>
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	4618      	mov	r0, r3
 800ed72:	3708      	adds	r7, #8
 800ed74:	46bd      	mov	sp, r7
 800ed76:	bd80      	pop	{r7, pc}
 800ed78:	0802a168 	.word	0x0802a168

0800ed7c <_ZN8touchgfx6WidgetD0Ev>:
 800ed7c:	b580      	push	{r7, lr}
 800ed7e:	b082      	sub	sp, #8
 800ed80:	af00      	add	r7, sp, #0
 800ed82:	6078      	str	r0, [r7, #4]
 800ed84:	6878      	ldr	r0, [r7, #4]
 800ed86:	f7ff ffe7 	bl	800ed58 <_ZN8touchgfx6WidgetD1Ev>
 800ed8a:	2128      	movs	r1, #40	; 0x28
 800ed8c:	6878      	ldr	r0, [r7, #4]
 800ed8e:	f017 fcfa 	bl	8026786 <_ZdlPvj>
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	4618      	mov	r0, r3
 800ed96:	3708      	adds	r7, #8
 800ed98:	46bd      	mov	sp, r7
 800ed9a:	bd80      	pop	{r7, pc}

0800ed9c <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 800ed9c:	b580      	push	{r7, lr}
 800ed9e:	b082      	sub	sp, #8
 800eda0:	af00      	add	r7, sp, #0
 800eda2:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0)
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	4618      	mov	r0, r3
 800eda8:	2326      	movs	r3, #38	; 0x26
 800edaa:	461a      	mov	r2, r3
 800edac:	2100      	movs	r1, #0
 800edae:	f017 fda5 	bl	80268fc <memset>
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	4618      	mov	r0, r3
 800edb6:	f7ff ffbd 	bl	800ed34 <_ZN8touchgfx6WidgetC1Ev>
 800edba:	4a09      	ldr	r2, [pc, #36]	; (800ede0 <_ZN8touchgfx3BoxC1Ev+0x44>)
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	601a      	str	r2, [r3, #0]
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	22ff      	movs	r2, #255	; 0xff
 800edc4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	3328      	adds	r3, #40	; 0x28
 800edcc:	2100      	movs	r1, #0
 800edce:	4618      	mov	r0, r3
 800edd0:	f7ff fd2c 	bl	800e82c <_ZN8touchgfx9colortypeC1Em>
    {
    }
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	4618      	mov	r0, r3
 800edd8:	3708      	adds	r7, #8
 800edda:	46bd      	mov	sp, r7
 800eddc:	bd80      	pop	{r7, pc}
 800edde:	bf00      	nop
 800ede0:	0802afec 	.word	0x0802afec

0800ede4 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  newColor The color of the box.
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
 800ede4:	b480      	push	{r7}
 800ede6:	b083      	sub	sp, #12
 800ede8:	af00      	add	r7, sp, #0
 800edea:	6078      	str	r0, [r7, #4]
 800edec:	6039      	str	r1, [r7, #0]
    {
        color = newColor;
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	683a      	ldr	r2, [r7, #0]
 800edf2:	629a      	str	r2, [r3, #40]	; 0x28
    }
 800edf4:	bf00      	nop
 800edf6:	370c      	adds	r7, #12
 800edf8:	46bd      	mov	sp, r7
 800edfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edfe:	4770      	bx	lr

0800ee00 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
     *
     * @param   bmp (Optional) The bitmap to display.
     *
     * @see setBitmap
     */
    Image(const Bitmap& bmp = Bitmap())
 800ee00:	b580      	push	{r7, lr}
 800ee02:	b082      	sub	sp, #8
 800ee04:	af00      	add	r7, sp, #0
 800ee06:	6078      	str	r0, [r7, #4]
 800ee08:	6039      	str	r1, [r7, #0]
        : Widget(), bitmap(bmp), alpha(255)
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	4618      	mov	r0, r3
 800ee0e:	2326      	movs	r3, #38	; 0x26
 800ee10:	461a      	mov	r2, r3
 800ee12:	2100      	movs	r1, #0
 800ee14:	f017 fd72 	bl	80268fc <memset>
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	4618      	mov	r0, r3
 800ee1c:	f7ff ff8a 	bl	800ed34 <_ZN8touchgfx6WidgetC1Ev>
 800ee20:	4a09      	ldr	r2, [pc, #36]	; (800ee48 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x48>)
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	601a      	str	r2, [r3, #0]
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	683a      	ldr	r2, [r7, #0]
 800ee2a:	8812      	ldrh	r2, [r2, #0]
 800ee2c:	84da      	strh	r2, [r3, #38]	; 0x26
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	22ff      	movs	r2, #255	; 0xff
 800ee32:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    {
        Image::setBitmap(bmp);
 800ee36:	6839      	ldr	r1, [r7, #0]
 800ee38:	6878      	ldr	r0, [r7, #4]
 800ee3a:	f007 fd07 	bl	801684c <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	4618      	mov	r0, r3
 800ee42:	3708      	adds	r7, #8
 800ee44:	46bd      	mov	sp, r7
 800ee46:	bd80      	pop	{r7, pc}
 800ee48:	0802b054 	.word	0x0802b054

0800ee4c <_ZN8touchgfx9TypedTextC1Et>:
    TypedText(const TypedTextId id = TYPED_TEXT_INVALID)
 800ee4c:	b480      	push	{r7}
 800ee4e:	b083      	sub	sp, #12
 800ee50:	af00      	add	r7, sp, #0
 800ee52:	6078      	str	r0, [r7, #4]
 800ee54:	460b      	mov	r3, r1
 800ee56:	807b      	strh	r3, [r7, #2]
        : typedTextId(id)
 800ee58:	4a06      	ldr	r2, [pc, #24]	; (800ee74 <_ZN8touchgfx9TypedTextC1Et+0x28>)
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	601a      	str	r2, [r3, #0]
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	887a      	ldrh	r2, [r7, #2]
 800ee62:	809a      	strh	r2, [r3, #4]
    }
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	4618      	mov	r0, r3
 800ee68:	370c      	adds	r7, #12
 800ee6a:	46bd      	mov	sp, r7
 800ee6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee70:	4770      	bx	lr
 800ee72:	bf00      	nop
 800ee74:	08029f58 	.word	0x08029f58

0800ee78 <_ZN8touchgfx8TextAreaC1Ev>:
 *       the pointer remains valid when drawing.
 */
class TextArea : public Widget
{
public:
    TextArea()
 800ee78:	b580      	push	{r7, lr}
 800ee7a:	b082      	sub	sp, #8
 800ee7c:	af00      	add	r7, sp, #0
 800ee7e:	6078      	str	r0, [r7, #4]
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	4618      	mov	r0, r3
 800ee84:	2326      	movs	r3, #38	; 0x26
 800ee86:	461a      	mov	r2, r3
 800ee88:	2100      	movs	r1, #0
 800ee8a:	f017 fd37 	bl	80268fc <memset>
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	4618      	mov	r0, r3
 800ee92:	f7ff ff4f 	bl	800ed34 <_ZN8touchgfx6WidgetC1Ev>
 800ee96:	4a16      	ldr	r2, [pc, #88]	; (800eef0 <_ZN8touchgfx8TextAreaC1Ev+0x78>)
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	601a      	str	r2, [r3, #0]
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	3328      	adds	r3, #40	; 0x28
 800eea0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800eea4:	4618      	mov	r0, r3
 800eea6:	f7ff ffd1 	bl	800ee4c <_ZN8touchgfx9TypedTextC1Et>
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	3330      	adds	r3, #48	; 0x30
 800eeae:	2100      	movs	r1, #0
 800eeb0:	4618      	mov	r0, r3
 800eeb2:	f7ff fcbb 	bl	800e82c <_ZN8touchgfx9colortypeC1Em>
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	2200      	movs	r2, #0
 800eeba:	869a      	strh	r2, [r3, #52]	; 0x34
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	22ff      	movs	r2, #255	; 0xff
 800eec0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	2200      	movs	r2, #0
 800eec8:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	2200      	movs	r2, #0
 800eed0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	2200      	movs	r2, #0
 800eed8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	333c      	adds	r3, #60	; 0x3c
 800eee0:	4618      	mov	r0, r3
 800eee2:	f000 f807 	bl	800eef4 <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>
    {
    }
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	4618      	mov	r0, r3
 800eeea:	3708      	adds	r7, #8
 800eeec:	46bd      	mov	sp, r7
 800eeee:	bd80      	pop	{r7, pc}
 800eef0:	0802af5c 	.word	0x0802af5c

0800eef4 <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>:
        }

        /**
         * Initializes a new instance of the BoundingArea class which is invalid by default.
         */
        BoundingArea()
 800eef4:	b580      	push	{r7, lr}
 800eef6:	b084      	sub	sp, #16
 800eef8:	af02      	add	r7, sp, #8
 800eefa:	6078      	str	r0, [r7, #4]
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
              text(0)
 800eefc:	6878      	ldr	r0, [r7, #4]
 800eefe:	f04f 33ff 	mov.w	r3, #4294967295
 800ef02:	9300      	str	r3, [sp, #0]
 800ef04:	f04f 33ff 	mov.w	r3, #4294967295
 800ef08:	2200      	movs	r2, #0
 800ef0a:	2100      	movs	r1, #0
 800ef0c:	f7ff fcb4 	bl	800e878 <_ZN8touchgfx4RectC1Essss>
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	2200      	movs	r2, #0
 800ef14:	609a      	str	r2, [r3, #8]
        {
        }
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	4618      	mov	r0, r3
 800ef1a:	3708      	adds	r7, #8
 800ef1c:	46bd      	mov	sp, r7
 800ef1e:	bd80      	pop	{r7, pc}

0800ef20 <_ZN8touchgfx4ViewI15screenPresenterED1Ev>:
class View : public Screen
 800ef20:	b580      	push	{r7, lr}
 800ef22:	b082      	sub	sp, #8
 800ef24:	af00      	add	r7, sp, #0
 800ef26:	6078      	str	r0, [r7, #4]
 800ef28:	4a05      	ldr	r2, [pc, #20]	; (800ef40 <_ZN8touchgfx4ViewI15screenPresenterED1Ev+0x20>)
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	601a      	str	r2, [r3, #0]
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	4618      	mov	r0, r3
 800ef32:	f7ff fe75 	bl	800ec20 <_ZN8touchgfx6ScreenD1Ev>
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	4618      	mov	r0, r3
 800ef3a:	3708      	adds	r7, #8
 800ef3c:	46bd      	mov	sp, r7
 800ef3e:	bd80      	pop	{r7, pc}
 800ef40:	0802a134 	.word	0x0802a134

0800ef44 <_ZN8touchgfx4ViewI15screenPresenterED0Ev>:
 800ef44:	b580      	push	{r7, lr}
 800ef46:	b082      	sub	sp, #8
 800ef48:	af00      	add	r7, sp, #0
 800ef4a:	6078      	str	r0, [r7, #4]
 800ef4c:	6878      	ldr	r0, [r7, #4]
 800ef4e:	f7ff ffe7 	bl	800ef20 <_ZN8touchgfx4ViewI15screenPresenterED1Ev>
 800ef52:	2140      	movs	r1, #64	; 0x40
 800ef54:	6878      	ldr	r0, [r7, #4]
 800ef56:	f017 fc16 	bl	8026786 <_ZdlPvj>
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	4618      	mov	r0, r3
 800ef5e:	3708      	adds	r7, #8
 800ef60:	46bd      	mov	sp, r7
 800ef62:	bd80      	pop	{r7, pc}

0800ef64 <_ZN14screenViewBaseC1Ev>:
#include <gui_generated/screen_screen/screenViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <images/BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>

screenViewBase::screenViewBase()
 800ef64:	b590      	push	{r4, r7, lr}
 800ef66:	b095      	sub	sp, #84	; 0x54
 800ef68:	af02      	add	r7, sp, #8
 800ef6a:	6178      	str	r0, [r7, #20]
 800ef6c:	697b      	ldr	r3, [r7, #20]
 800ef6e:	4618      	mov	r0, r3
 800ef70:	f000 f918 	bl	800f1a4 <_ZN8touchgfx4ViewI15screenPresenterEC1Ev>
 800ef74:	4a6c      	ldr	r2, [pc, #432]	; (800f128 <_ZN14screenViewBaseC1Ev+0x1c4>)
 800ef76:	697b      	ldr	r3, [r7, #20]
 800ef78:	601a      	str	r2, [r3, #0]
 800ef7a:	697b      	ldr	r3, [r7, #20]
 800ef7c:	3340      	adds	r3, #64	; 0x40
 800ef7e:	4618      	mov	r0, r3
 800ef80:	f7ff ff0c 	bl	800ed9c <_ZN8touchgfx3BoxC1Ev>
 800ef84:	697b      	ldr	r3, [r7, #20]
 800ef86:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 800ef8a:	f107 031c 	add.w	r3, r7, #28
 800ef8e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800ef92:	4618      	mov	r0, r3
 800ef94:	f7ff fc90 	bl	800e8b8 <_ZN8touchgfx6BitmapC1Et>
 800ef98:	f107 031c 	add.w	r3, r7, #28
 800ef9c:	4619      	mov	r1, r3
 800ef9e:	4620      	mov	r0, r4
 800efa0:	f7ff ff2e 	bl	800ee00 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800efa4:	697b      	ldr	r3, [r7, #20]
 800efa6:	3398      	adds	r3, #152	; 0x98
 800efa8:	4618      	mov	r0, r3
 800efaa:	f7ff ff65 	bl	800ee78 <_ZN8touchgfx8TextAreaC1Ev>
{
    __background.setPosition(0, 0, 800, 480);
 800efae:	697b      	ldr	r3, [r7, #20]
 800efb0:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800efb4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800efb8:	9300      	str	r3, [sp, #0]
 800efba:	f44f 7348 	mov.w	r3, #800	; 0x320
 800efbe:	2200      	movs	r2, #0
 800efc0:	2100      	movs	r1, #0
 800efc2:	f7ff fcf7 	bl	800e9b4 <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 800efc6:	697b      	ldr	r3, [r7, #20]
 800efc8:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800efcc:	2300      	movs	r3, #0
 800efce:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 800efd2:	2300      	movs	r3, #0
 800efd4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800efd8:	2300      	movs	r3, #0
 800efda:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
     *
     * @return The color representation depending on LCD color format.
     */
    FORCE_INLINE_FUNCTION static colortype getColorFromRGB(uint8_t red, uint8_t green, uint8_t blue)
    {
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800efde:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800efe2:	041b      	lsls	r3, r3, #16
 800efe4:	461a      	mov	r2, r3
 800efe6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800efea:	021b      	lsls	r3, r3, #8
 800efec:	431a      	orrs	r2, r3
 800efee:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800eff2:	4313      	orrs	r3, r2
 800eff4:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800eff8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800effc:	4611      	mov	r1, r2
 800effe:	4618      	mov	r0, r3
 800f000:	f7ff fc14 	bl	800e82c <_ZN8touchgfx9colortypeC1Em>
 800f004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f006:	4619      	mov	r1, r3
 800f008:	4620      	mov	r0, r4
 800f00a:	f7ff feeb 	bl	800ede4 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    add(__background);
 800f00e:	697a      	ldr	r2, [r7, #20]
 800f010:	697b      	ldr	r3, [r7, #20]
 800f012:	3340      	adds	r3, #64	; 0x40
 800f014:	4619      	mov	r1, r3
 800f016:	4610      	mov	r0, r2
 800f018:	f7ff fe5a 	bl	800ecd0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    image1.setXY(0, 0);
 800f01c:	697b      	ldr	r3, [r7, #20]
 800f01e:	336c      	adds	r3, #108	; 0x6c
 800f020:	2200      	movs	r2, #0
 800f022:	2100      	movs	r1, #0
 800f024:	4618      	mov	r0, r3
 800f026:	f7ff fd04 	bl	800ea32 <_ZN8touchgfx8Drawable5setXYEss>
    image1.setBitmap(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_BACKGROUNDS_800X480_POLY_ID));
 800f02a:	697b      	ldr	r3, [r7, #20]
 800f02c:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 800f030:	f107 0320 	add.w	r3, r7, #32
 800f034:	2100      	movs	r1, #0
 800f036:	4618      	mov	r0, r3
 800f038:	f7ff fc3e 	bl	800e8b8 <_ZN8touchgfx6BitmapC1Et>
 800f03c:	f107 0320 	add.w	r3, r7, #32
 800f040:	4619      	mov	r1, r3
 800f042:	4620      	mov	r0, r4
 800f044:	f007 fc02 	bl	801684c <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    add(image1);
 800f048:	697a      	ldr	r2, [r7, #20]
 800f04a:	697b      	ldr	r3, [r7, #20]
 800f04c:	336c      	adds	r3, #108	; 0x6c
 800f04e:	4619      	mov	r1, r3
 800f050:	4610      	mov	r0, r2
 800f052:	f7ff fe3d 	bl	800ecd0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    textArea1.setXY(285, 125);
 800f056:	697b      	ldr	r3, [r7, #20]
 800f058:	3398      	adds	r3, #152	; 0x98
 800f05a:	227d      	movs	r2, #125	; 0x7d
 800f05c:	f240 111d 	movw	r1, #285	; 0x11d
 800f060:	4618      	mov	r0, r3
 800f062:	f7ff fce6 	bl	800ea32 <_ZN8touchgfx8Drawable5setXYEss>
    textArea1.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 800f066:	697b      	ldr	r3, [r7, #20]
 800f068:	f103 0498 	add.w	r4, r3, #152	; 0x98
 800f06c:	2300      	movs	r3, #0
 800f06e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800f072:	2300      	movs	r3, #0
 800f074:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 800f078:	2300      	movs	r3, #0
 800f07a:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 800f07e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800f082:	041b      	lsls	r3, r3, #16
 800f084:	461a      	mov	r2, r3
 800f086:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800f08a:	021b      	lsls	r3, r3, #8
 800f08c:	431a      	orrs	r2, r3
 800f08e:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800f092:	4313      	orrs	r3, r2
 800f094:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800f098:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f09c:	4611      	mov	r1, r2
 800f09e:	4618      	mov	r0, r3
 800f0a0:	f7ff fbc4 	bl	800e82c <_ZN8touchgfx9colortypeC1Em>
 800f0a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0a6:	63fc      	str	r4, [r7, #60]	; 0x3c
 800f0a8:	61bb      	str	r3, [r7, #24]
        color = newColor;
 800f0aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f0ac:	69ba      	ldr	r2, [r7, #24]
 800f0ae:	631a      	str	r2, [r3, #48]	; 0x30
    }
 800f0b0:	bf00      	nop
    textArea1.setLinespacing(0);
 800f0b2:	697b      	ldr	r3, [r7, #20]
 800f0b4:	3398      	adds	r3, #152	; 0x98
 800f0b6:	647b      	str	r3, [r7, #68]	; 0x44
 800f0b8:	2300      	movs	r3, #0
 800f0ba:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        linespace = space;
 800f0be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f0c0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f0c4:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 800f0c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	3384      	adds	r3, #132	; 0x84
 800f0cc:	681b      	ldr	r3, [r3, #0]
 800f0ce:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 800f0d0:	463a      	mov	r2, r7
 800f0d2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f0d4:	4610      	mov	r0, r2
 800f0d6:	4798      	blx	r3
 800f0d8:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 800f0dc:	463a      	mov	r2, r7
 800f0de:	ca07      	ldmia	r2, {r0, r1, r2}
 800f0e0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 800f0e4:	bf00      	nop
    textArea1.setTypedText(touchgfx::TypedText(T_TITLE));
 800f0e6:	697b      	ldr	r3, [r7, #20]
 800f0e8:	f103 0498 	add.w	r4, r3, #152	; 0x98
 800f0ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f0f0:	2100      	movs	r1, #0
 800f0f2:	4618      	mov	r0, r3
 800f0f4:	f7ff feaa 	bl	800ee4c <_ZN8touchgfx9TypedTextC1Et>
 800f0f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f0fc:	4619      	mov	r1, r3
 800f0fe:	4620      	mov	r0, r4
 800f100:	f007 fb52 	bl	80167a8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 800f104:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f108:	4618      	mov	r0, r3
 800f10a:	f7fe fc63 	bl	800d9d4 <_ZN8touchgfx9TypedTextD1Ev>
    add(textArea1);
 800f10e:	697a      	ldr	r2, [r7, #20]
 800f110:	697b      	ldr	r3, [r7, #20]
 800f112:	3398      	adds	r3, #152	; 0x98
 800f114:	4619      	mov	r1, r3
 800f116:	4610      	mov	r0, r2
 800f118:	f7ff fdda 	bl	800ecd0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 800f11c:	697b      	ldr	r3, [r7, #20]
 800f11e:	4618      	mov	r0, r3
 800f120:	374c      	adds	r7, #76	; 0x4c
 800f122:	46bd      	mov	sp, r7
 800f124:	bd90      	pop	{r4, r7, pc}
 800f126:	bf00      	nop
 800f128:	0802a100 	.word	0x0802a100

0800f12c <_ZN14screenViewBaseD1Ev>:

screenViewBase::~screenViewBase()
 800f12c:	b580      	push	{r7, lr}
 800f12e:	b082      	sub	sp, #8
 800f130:	af00      	add	r7, sp, #0
 800f132:	6078      	str	r0, [r7, #4]
 800f134:	4a0d      	ldr	r2, [pc, #52]	; (800f16c <_ZN14screenViewBaseD1Ev+0x40>)
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	601a      	str	r2, [r3, #0]
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	3398      	adds	r3, #152	; 0x98
 800f13e:	4618      	mov	r0, r3
 800f140:	f000 f8ac 	bl	800f29c <_ZN8touchgfx8TextAreaD1Ev>
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	336c      	adds	r3, #108	; 0x6c
 800f148:	4618      	mov	r0, r3
 800f14a:	f000 f885 	bl	800f258 <_ZN8touchgfx5ImageD1Ev>
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	3340      	adds	r3, #64	; 0x40
 800f152:	4618      	mov	r0, r3
 800f154:	f000 f85e 	bl	800f214 <_ZN8touchgfx3BoxD1Ev>
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	4618      	mov	r0, r3
 800f15c:	f7ff fee0 	bl	800ef20 <_ZN8touchgfx4ViewI15screenPresenterED1Ev>
{

}
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	4618      	mov	r0, r3
 800f164:	3708      	adds	r7, #8
 800f166:	46bd      	mov	sp, r7
 800f168:	bd80      	pop	{r7, pc}
 800f16a:	bf00      	nop
 800f16c:	0802a100 	.word	0x0802a100

0800f170 <_ZN14screenViewBaseD0Ev>:
screenViewBase::~screenViewBase()
 800f170:	b580      	push	{r7, lr}
 800f172:	b082      	sub	sp, #8
 800f174:	af00      	add	r7, sp, #0
 800f176:	6078      	str	r0, [r7, #4]
}
 800f178:	6878      	ldr	r0, [r7, #4]
 800f17a:	f7ff ffd7 	bl	800f12c <_ZN14screenViewBaseD1Ev>
 800f17e:	21e0      	movs	r1, #224	; 0xe0
 800f180:	6878      	ldr	r0, [r7, #4]
 800f182:	f017 fb00 	bl	8026786 <_ZdlPvj>
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	4618      	mov	r0, r3
 800f18a:	3708      	adds	r7, #8
 800f18c:	46bd      	mov	sp, r7
 800f18e:	bd80      	pop	{r7, pc}

0800f190 <_ZN14screenViewBase11setupScreenEv>:

void screenViewBase::setupScreen()
{
 800f190:	b480      	push	{r7}
 800f192:	b083      	sub	sp, #12
 800f194:	af00      	add	r7, sp, #0
 800f196:	6078      	str	r0, [r7, #4]

}
 800f198:	bf00      	nop
 800f19a:	370c      	adds	r7, #12
 800f19c:	46bd      	mov	sp, r7
 800f19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1a2:	4770      	bx	lr

0800f1a4 <_ZN8touchgfx4ViewI15screenPresenterEC1Ev>:
    View()
 800f1a4:	b580      	push	{r7, lr}
 800f1a6:	b082      	sub	sp, #8
 800f1a8:	af00      	add	r7, sp, #0
 800f1aa:	6078      	str	r0, [r7, #4]
        : presenter(0)
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	4618      	mov	r0, r3
 800f1b0:	f00a fb4c 	bl	801984c <_ZN8touchgfx6ScreenC1Ev>
 800f1b4:	4a05      	ldr	r2, [pc, #20]	; (800f1cc <_ZN8touchgfx4ViewI15screenPresenterEC1Ev+0x28>)
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	601a      	str	r2, [r3, #0]
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	2200      	movs	r2, #0
 800f1be:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	4618      	mov	r0, r3
 800f1c4:	3708      	adds	r7, #8
 800f1c6:	46bd      	mov	sp, r7
 800f1c8:	bd80      	pop	{r7, pc}
 800f1ca:	bf00      	nop
 800f1cc:	0802a134 	.word	0x0802a134

0800f1d0 <_ZN8touchgfx9ContainerD1Ev>:
 * intersect with the geometry of the container will be visible (e.g. setting a
 * container's width to 0 will render all children invisible).
 *
 * @see Drawable
 */
class Container : public Drawable
 800f1d0:	b580      	push	{r7, lr}
 800f1d2:	b082      	sub	sp, #8
 800f1d4:	af00      	add	r7, sp, #0
 800f1d6:	6078      	str	r0, [r7, #4]
 800f1d8:	4a05      	ldr	r2, [pc, #20]	; (800f1f0 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	601a      	str	r2, [r3, #0]
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	4618      	mov	r0, r3
 800f1e2:	f7ff fba9 	bl	800e938 <_ZN8touchgfx8DrawableD1Ev>
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	4618      	mov	r0, r3
 800f1ea:	3708      	adds	r7, #8
 800f1ec:	46bd      	mov	sp, r7
 800f1ee:	bd80      	pop	{r7, pc}
 800f1f0:	0802ad74 	.word	0x0802ad74

0800f1f4 <_ZN8touchgfx9ContainerD0Ev>:
 800f1f4:	b580      	push	{r7, lr}
 800f1f6:	b082      	sub	sp, #8
 800f1f8:	af00      	add	r7, sp, #0
 800f1fa:	6078      	str	r0, [r7, #4]
 800f1fc:	6878      	ldr	r0, [r7, #4]
 800f1fe:	f7ff ffe7 	bl	800f1d0 <_ZN8touchgfx9ContainerD1Ev>
 800f202:	212c      	movs	r1, #44	; 0x2c
 800f204:	6878      	ldr	r0, [r7, #4]
 800f206:	f017 fabe 	bl	8026786 <_ZdlPvj>
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	4618      	mov	r0, r3
 800f20e:	3708      	adds	r7, #8
 800f210:	46bd      	mov	sp, r7
 800f212:	bd80      	pop	{r7, pc}

0800f214 <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 800f214:	b580      	push	{r7, lr}
 800f216:	b082      	sub	sp, #8
 800f218:	af00      	add	r7, sp, #0
 800f21a:	6078      	str	r0, [r7, #4]
 800f21c:	4a05      	ldr	r2, [pc, #20]	; (800f234 <_ZN8touchgfx3BoxD1Ev+0x20>)
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	601a      	str	r2, [r3, #0]
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	4618      	mov	r0, r3
 800f226:	f7ff fd97 	bl	800ed58 <_ZN8touchgfx6WidgetD1Ev>
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	4618      	mov	r0, r3
 800f22e:	3708      	adds	r7, #8
 800f230:	46bd      	mov	sp, r7
 800f232:	bd80      	pop	{r7, pc}
 800f234:	0802afec 	.word	0x0802afec

0800f238 <_ZN8touchgfx3BoxD0Ev>:
 800f238:	b580      	push	{r7, lr}
 800f23a:	b082      	sub	sp, #8
 800f23c:	af00      	add	r7, sp, #0
 800f23e:	6078      	str	r0, [r7, #4]
 800f240:	6878      	ldr	r0, [r7, #4]
 800f242:	f7ff ffe7 	bl	800f214 <_ZN8touchgfx3BoxD1Ev>
 800f246:	212c      	movs	r1, #44	; 0x2c
 800f248:	6878      	ldr	r0, [r7, #4]
 800f24a:	f017 fa9c 	bl	8026786 <_ZdlPvj>
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	4618      	mov	r0, r3
 800f252:	3708      	adds	r7, #8
 800f254:	46bd      	mov	sp, r7
 800f256:	bd80      	pop	{r7, pc}

0800f258 <_ZN8touchgfx5ImageD1Ev>:
class Image : public Widget
 800f258:	b580      	push	{r7, lr}
 800f25a:	b082      	sub	sp, #8
 800f25c:	af00      	add	r7, sp, #0
 800f25e:	6078      	str	r0, [r7, #4]
 800f260:	4a05      	ldr	r2, [pc, #20]	; (800f278 <_ZN8touchgfx5ImageD1Ev+0x20>)
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	601a      	str	r2, [r3, #0]
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	4618      	mov	r0, r3
 800f26a:	f7ff fd75 	bl	800ed58 <_ZN8touchgfx6WidgetD1Ev>
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	4618      	mov	r0, r3
 800f272:	3708      	adds	r7, #8
 800f274:	46bd      	mov	sp, r7
 800f276:	bd80      	pop	{r7, pc}
 800f278:	0802b054 	.word	0x0802b054

0800f27c <_ZN8touchgfx5ImageD0Ev>:
 800f27c:	b580      	push	{r7, lr}
 800f27e:	b082      	sub	sp, #8
 800f280:	af00      	add	r7, sp, #0
 800f282:	6078      	str	r0, [r7, #4]
 800f284:	6878      	ldr	r0, [r7, #4]
 800f286:	f7ff ffe7 	bl	800f258 <_ZN8touchgfx5ImageD1Ev>
 800f28a:	212c      	movs	r1, #44	; 0x2c
 800f28c:	6878      	ldr	r0, [r7, #4]
 800f28e:	f017 fa7a 	bl	8026786 <_ZdlPvj>
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	4618      	mov	r0, r3
 800f296:	3708      	adds	r7, #8
 800f298:	46bd      	mov	sp, r7
 800f29a:	bd80      	pop	{r7, pc}

0800f29c <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 800f29c:	b580      	push	{r7, lr}
 800f29e:	b082      	sub	sp, #8
 800f2a0:	af00      	add	r7, sp, #0
 800f2a2:	6078      	str	r0, [r7, #4]
 800f2a4:	4a08      	ldr	r2, [pc, #32]	; (800f2c8 <_ZN8touchgfx8TextAreaD1Ev+0x2c>)
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	601a      	str	r2, [r3, #0]
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	3328      	adds	r3, #40	; 0x28
 800f2ae:	4618      	mov	r0, r3
 800f2b0:	f7fe fb90 	bl	800d9d4 <_ZN8touchgfx9TypedTextD1Ev>
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	4618      	mov	r0, r3
 800f2b8:	f7ff fd4e 	bl	800ed58 <_ZN8touchgfx6WidgetD1Ev>
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	4618      	mov	r0, r3
 800f2c0:	3708      	adds	r7, #8
 800f2c2:	46bd      	mov	sp, r7
 800f2c4:	bd80      	pop	{r7, pc}
 800f2c6:	bf00      	nop
 800f2c8:	0802af5c 	.word	0x0802af5c

0800f2cc <_ZN8touchgfx8TextAreaD0Ev>:
 800f2cc:	b580      	push	{r7, lr}
 800f2ce:	b082      	sub	sp, #8
 800f2d0:	af00      	add	r7, sp, #0
 800f2d2:	6078      	str	r0, [r7, #4]
 800f2d4:	6878      	ldr	r0, [r7, #4]
 800f2d6:	f7ff ffe1 	bl	800f29c <_ZN8touchgfx8TextAreaD1Ev>
 800f2da:	2148      	movs	r1, #72	; 0x48
 800f2dc:	6878      	ldr	r0, [r7, #4]
 800f2de:	f017 fa52 	bl	8026786 <_ZdlPvj>
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	4618      	mov	r0, r3
 800f2e6:	3708      	adds	r7, #8
 800f2e8:	46bd      	mov	sp, r7
 800f2ea:	bd80      	pop	{r7, pc}

0800f2ec <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 800f2ec:	b480      	push	{r7}
 800f2ee:	af00      	add	r7, sp, #0
    return bitmap_database;
 800f2f0:	4b02      	ldr	r3, [pc, #8]	; (800f2fc <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 800f2f2:	4618      	mov	r0, r3
 800f2f4:	46bd      	mov	sp, r7
 800f2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2fa:	4770      	bx	lr
 800f2fc:	0802a1c8 	.word	0x0802a1c8

0800f300 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 800f300:	b480      	push	{r7}
 800f302:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 800f304:	2301      	movs	r3, #1
}
 800f306:	4618      	mov	r0, r3
 800f308:	46bd      	mov	sp, r7
 800f30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f30e:	4770      	bx	lr

0800f310 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
     * @param  prevChar The Unicode value of the previous character.
     * @param  glyph    the glyph object for the current character.
     *
     * @return The kerning distance between prevChar and glyph char.
     */
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 800f310:	b480      	push	{r7}
 800f312:	b085      	sub	sp, #20
 800f314:	af00      	add	r7, sp, #0
 800f316:	60f8      	str	r0, [r7, #12]
 800f318:	460b      	mov	r3, r1
 800f31a:	607a      	str	r2, [r7, #4]
 800f31c:	817b      	strh	r3, [r7, #10]
    {
        (void)prevChar; // Unused variable
        (void)glyph;    // Unused variable
        return 0;
 800f31e:	2300      	movs	r3, #0
    }
 800f320:	4618      	mov	r0, r3
 800f322:	3714      	adds	r7, #20
 800f324:	46bd      	mov	sp, r7
 800f326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f32a:	4770      	bx	lr

0800f32c <_ZNK8touchgfx4Font12getGSUBTableEv>:
    /**
     * Gets GSUB table. Currently only used for Devanagari fonts.
     *
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
 800f32c:	b480      	push	{r7}
 800f32e:	b083      	sub	sp, #12
 800f330:	af00      	add	r7, sp, #0
 800f332:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800f334:	2300      	movs	r3, #0
    }
 800f336:	4618      	mov	r0, r3
 800f338:	370c      	adds	r7, #12
 800f33a:	46bd      	mov	sp, r7
 800f33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f340:	4770      	bx	lr

0800f342 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 800f342:	b480      	push	{r7}
 800f344:	b083      	sub	sp, #12
 800f346:	af00      	add	r7, sp, #0
 800f348:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800f34a:	2300      	movs	r3, #0
    }
 800f34c:	4618      	mov	r0, r3
 800f34e:	370c      	adds	r7, #12
 800f350:	46bd      	mov	sp, r7
 800f352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f356:	4770      	bx	lr

0800f358 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
     *
     * @param  data A reference to the TypedTextData storage array.
     * @param  f    The fonts associated with the array.
     * @param  n    The number of typed texts in the array.
     */
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 800f358:	b480      	push	{r7}
 800f35a:	b085      	sub	sp, #20
 800f35c:	af00      	add	r7, sp, #0
 800f35e:	60f8      	str	r0, [r7, #12]
 800f360:	60b9      	str	r1, [r7, #8]
 800f362:	4613      	mov	r3, r2
 800f364:	80fb      	strh	r3, [r7, #6]
    {
        typedTexts = data;
 800f366:	4a07      	ldr	r2, [pc, #28]	; (800f384 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 800f368:	68fb      	ldr	r3, [r7, #12]
 800f36a:	6013      	str	r3, [r2, #0]
        fonts = f;
 800f36c:	4a06      	ldr	r2, [pc, #24]	; (800f388 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 800f36e:	68bb      	ldr	r3, [r7, #8]
 800f370:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 800f372:	4a06      	ldr	r2, [pc, #24]	; (800f38c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 800f374:	88fb      	ldrh	r3, [r7, #6]
 800f376:	8013      	strh	r3, [r2, #0]
    }
 800f378:	bf00      	nop
 800f37a:	3714      	adds	r7, #20
 800f37c:	46bd      	mov	sp, r7
 800f37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f382:	4770      	bx	lr
 800f384:	20024478 	.word	0x20024478
 800f388:	20024480 	.word	0x20024480
 800f38c:	2002447c 	.word	0x2002447c

0800f390 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 800f390:	b40e      	push	{r1, r2, r3}
 800f392:	b580      	push	{r7, lr}
 800f394:	b085      	sub	sp, #20
 800f396:	af00      	add	r7, sp, #0
 800f398:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 800f39a:	f107 0320 	add.w	r3, r7, #32
 800f39e:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 800f3a0:	68bb      	ldr	r3, [r7, #8]
 800f3a2:	69fa      	ldr	r2, [r7, #28]
 800f3a4:	2100      	movs	r1, #0
 800f3a6:	6878      	ldr	r0, [r7, #4]
 800f3a8:	f009 fe86 	bl	80190b8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 800f3ac:	4603      	mov	r3, r0
 800f3ae:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 800f3b0:	89fb      	ldrh	r3, [r7, #14]
}
 800f3b2:	4618      	mov	r0, r3
 800f3b4:	3714      	adds	r7, #20
 800f3b6:	46bd      	mov	sp, r7
 800f3b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f3bc:	b003      	add	sp, #12
 800f3be:	4770      	bx	lr

0800f3c0 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 800f3c0:	b40c      	push	{r2, r3}
 800f3c2:	b580      	push	{r7, lr}
 800f3c4:	b084      	sub	sp, #16
 800f3c6:	af00      	add	r7, sp, #0
 800f3c8:	6078      	str	r0, [r7, #4]
 800f3ca:	460b      	mov	r3, r1
 800f3cc:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 800f3ce:	f107 031c 	add.w	r3, r7, #28
 800f3d2:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 800f3d4:	78f9      	ldrb	r1, [r7, #3]
 800f3d6:	68bb      	ldr	r3, [r7, #8]
 800f3d8:	69ba      	ldr	r2, [r7, #24]
 800f3da:	6878      	ldr	r0, [r7, #4]
 800f3dc:	f009 fe6c 	bl	80190b8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 800f3e0:	4603      	mov	r3, r0
 800f3e2:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 800f3e4:	89fb      	ldrh	r3, [r7, #14]
}
 800f3e6:	4618      	mov	r0, r3
 800f3e8:	3710      	adds	r7, #16
 800f3ea:	46bd      	mov	sp, r7
 800f3ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f3f0:	b002      	add	sp, #8
 800f3f2:	4770      	bx	lr

0800f3f4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 800f3f4:	b580      	push	{r7, lr}
 800f3f6:	b08a      	sub	sp, #40	; 0x28
 800f3f8:	af00      	add	r7, sp, #0
 800f3fa:	6078      	str	r0, [r7, #4]
 800f3fc:	460b      	mov	r3, r1
 800f3fe:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f404:	2b00      	cmp	r3, #0
 800f406:	d016      	beq.n	800f436 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	3322      	adds	r3, #34	; 0x22
 800f40c:	627b      	str	r3, [r7, #36]	; 0x24
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 800f40e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f410:	8adb      	ldrh	r3, [r3, #22]
 800f412:	2b00      	cmp	r3, #0
 800f414:	d105      	bne.n	800f422 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 800f416:	4b43      	ldr	r3, [pc, #268]	; (800f524 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 800f418:	4a43      	ldr	r2, [pc, #268]	; (800f528 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 800f41a:	21c5      	movs	r1, #197	; 0xc5
 800f41c:	4843      	ldr	r0, [pc, #268]	; (800f52c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800f41e:	f017 f9e1 	bl	80267e4 <__assert_func>
            return buffer[pos];
 800f422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f424:	8a9b      	ldrh	r3, [r3, #20]
 800f426:	461a      	mov	r2, r3
 800f428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f42a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800f42e:	2b00      	cmp	r3, #0
 800f430:	d001      	beq.n	800f436 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 800f432:	2301      	movs	r3, #1
 800f434:	e000      	b.n	800f438 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 800f436:	2300      	movs	r3, #0
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d06a      	beq.n	800f512 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 800f43c:	6878      	ldr	r0, [r7, #4]
 800f43e:	f00b f8e1 	bl	801a604 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	3322      	adds	r3, #34	; 0x22
 800f446:	623b      	str	r3, [r7, #32]
 800f448:	2301      	movs	r3, #1
 800f44a:	83fb      	strh	r3, [r7, #30]
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 800f44c:	6a3b      	ldr	r3, [r7, #32]
 800f44e:	8adb      	ldrh	r3, [r3, #22]
 800f450:	8bfa      	ldrh	r2, [r7, #30]
 800f452:	429a      	cmp	r2, r3
 800f454:	d305      	bcc.n	800f462 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 800f456:	4b36      	ldr	r3, [pc, #216]	; (800f530 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 800f458:	4a36      	ldr	r2, [pc, #216]	; (800f534 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 800f45a:	21cb      	movs	r1, #203	; 0xcb
 800f45c:	4833      	ldr	r0, [pc, #204]	; (800f52c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800f45e:	f017 f9c1 	bl	80267e4 <__assert_func>
            const uint16_t index = pos + offset;
 800f462:	6a3b      	ldr	r3, [r7, #32]
 800f464:	8a9a      	ldrh	r2, [r3, #20]
 800f466:	8bfb      	ldrh	r3, [r7, #30]
 800f468:	4413      	add	r3, r2
 800f46a:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 800f46c:	8bbb      	ldrh	r3, [r7, #28]
 800f46e:	2b09      	cmp	r3, #9
 800f470:	d801      	bhi.n	800f476 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 800f472:	8bbb      	ldrh	r3, [r7, #28]
 800f474:	e001      	b.n	800f47a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 800f476:	8bbb      	ldrh	r3, [r7, #28]
 800f478:	3b0a      	subs	r3, #10
 800f47a:	6a3a      	ldr	r2, [r7, #32]
 800f47c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f480:	f640 123f 	movw	r2, #2367	; 0x93f
 800f484:	4293      	cmp	r3, r2
 800f486:	bf0c      	ite	eq
 800f488:	2301      	moveq	r3, #1
 800f48a:	2300      	movne	r3, #0
 800f48c:	b2db      	uxtb	r3, r3
 800f48e:	2b00      	cmp	r3, #0
 800f490:	d03f      	beq.n	800f512 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	3322      	adds	r3, #34	; 0x22
 800f496:	687a      	ldr	r2, [r7, #4]
 800f498:	3222      	adds	r2, #34	; 0x22
 800f49a:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 800f49c:	68ba      	ldr	r2, [r7, #8]
 800f49e:	8ad2      	ldrh	r2, [r2, #22]
 800f4a0:	2a00      	cmp	r2, #0
 800f4a2:	d105      	bne.n	800f4b0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 800f4a4:	4b1f      	ldr	r3, [pc, #124]	; (800f524 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 800f4a6:	4a20      	ldr	r2, [pc, #128]	; (800f528 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 800f4a8:	21c5      	movs	r1, #197	; 0xc5
 800f4aa:	4820      	ldr	r0, [pc, #128]	; (800f52c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800f4ac:	f017 f99a 	bl	80267e4 <__assert_func>
            return buffer[pos];
 800f4b0:	68ba      	ldr	r2, [r7, #8]
 800f4b2:	8a92      	ldrh	r2, [r2, #20]
 800f4b4:	4611      	mov	r1, r2
 800f4b6:	68ba      	ldr	r2, [r7, #8]
 800f4b8:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800f4bc:	613b      	str	r3, [r7, #16]
 800f4be:	4613      	mov	r3, r2
 800f4c0:	81fb      	strh	r3, [r7, #14]
            buffer[pos] = newChar;
        }

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 800f4c2:	693b      	ldr	r3, [r7, #16]
 800f4c4:	8adb      	ldrh	r3, [r3, #22]
 800f4c6:	2b01      	cmp	r3, #1
 800f4c8:	d806      	bhi.n	800f4d8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 800f4ca:	4b1b      	ldr	r3, [pc, #108]	; (800f538 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 800f4cc:	4a1b      	ldr	r2, [pc, #108]	; (800f53c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 800f4ce:	f44f 718e 	mov.w	r1, #284	; 0x11c
 800f4d2:	4816      	ldr	r0, [pc, #88]	; (800f52c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800f4d4:	f017 f986 	bl	80267e4 <__assert_func>
            const uint16_t index = pos + 1;
 800f4d8:	693b      	ldr	r3, [r7, #16]
 800f4da:	8a9b      	ldrh	r3, [r3, #20]
 800f4dc:	3301      	adds	r3, #1
 800f4de:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 800f4e0:	89bb      	ldrh	r3, [r7, #12]
 800f4e2:	2b09      	cmp	r3, #9
 800f4e4:	d801      	bhi.n	800f4ea <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 800f4e6:	89bb      	ldrh	r3, [r7, #12]
 800f4e8:	e000      	b.n	800f4ec <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 800f4ea:	2300      	movs	r3, #0
 800f4ec:	693a      	ldr	r2, [r7, #16]
 800f4ee:	89f9      	ldrh	r1, [r7, #14]
 800f4f0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 800f4f4:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	3322      	adds	r3, #34	; 0x22
 800f4fa:	61bb      	str	r3, [r7, #24]
 800f4fc:	f640 133f 	movw	r3, #2367	; 0x93f
 800f500:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 800f502:	69bb      	ldr	r3, [r7, #24]
 800f504:	8a9b      	ldrh	r3, [r3, #20]
 800f506:	4619      	mov	r1, r3
 800f508:	69bb      	ldr	r3, [r7, #24]
 800f50a:	8afa      	ldrh	r2, [r7, #22]
 800f50c:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 800f510:	bf00      	nop
        }
    }
    return getNextChar();
 800f512:	6878      	ldr	r0, [r7, #4]
 800f514:	f00a ff78 	bl	801a408 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800f518:	4603      	mov	r3, r0
}
 800f51a:	4618      	mov	r0, r3
 800f51c:	3728      	adds	r7, #40	; 0x28
 800f51e:	46bd      	mov	sp, r7
 800f520:	bd80      	pop	{r7, pc}
 800f522:	bf00      	nop
 800f524:	08027ce4 	.word	0x08027ce4
 800f528:	08027cf0 	.word	0x08027cf0
 800f52c:	08027d9c 	.word	0x08027d9c
 800f530:	08027de4 	.word	0x08027de4
 800f534:	08027df4 	.word	0x08027df4
 800f538:	08027ec8 	.word	0x08027ec8
 800f53c:	08027ed4 	.word	0x08027ed4

0800f540 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 800f540:	b580      	push	{r7, lr}
 800f542:	b082      	sub	sp, #8
 800f544:	af00      	add	r7, sp, #0
 800f546:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 800f548:	6878      	ldr	r0, [r7, #4]
 800f54a:	f00a ff26 	bl	801a39a <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 800f54e:	bf00      	nop
 800f550:	3708      	adds	r7, #8
 800f552:	46bd      	mov	sp, r7
 800f554:	bd80      	pop	{r7, pc}

0800f556 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 800f556:	b580      	push	{r7, lr}
 800f558:	b088      	sub	sp, #32
 800f55a:	af02      	add	r7, sp, #8
 800f55c:	60f8      	str	r0, [r7, #12]
 800f55e:	1d38      	adds	r0, r7, #4
 800f560:	e880 0006 	stmia.w	r0, {r1, r2}
 800f564:	603b      	str	r3, [r7, #0]
    va_list pArg;
    va_start(pArg, format);
 800f566:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f56a:	617b      	str	r3, [r7, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 800f56c:	1d39      	adds	r1, r7, #4
 800f56e:	697b      	ldr	r3, [r7, #20]
 800f570:	9301      	str	r3, [sp, #4]
 800f572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f574:	9300      	str	r3, [sp, #0]
 800f576:	6a3b      	ldr	r3, [r7, #32]
 800f578:	683a      	ldr	r2, [r7, #0]
 800f57a:	68f8      	ldr	r0, [r7, #12]
 800f57c:	f008 fa4a 	bl	8017a14 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 800f580:	bf00      	nop
 800f582:	3718      	adds	r7, #24
 800f584:	46bd      	mov	sp, r7
 800f586:	bd80      	pop	{r7, pc}

0800f588 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 800f588:	b590      	push	{r4, r7, lr}
 800f58a:	b085      	sub	sp, #20
 800f58c:	af00      	add	r7, sp, #0
 800f58e:	4603      	mov	r3, r0
 800f590:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 800f592:	2300      	movs	r3, #0
 800f594:	60fb      	str	r3, [r7, #12]
    if (id < 2)
 800f596:	88fb      	ldrh	r3, [r7, #6]
 800f598:	2b01      	cmp	r3, #1
 800f59a:	d82a      	bhi.n	800f5f2 <_ZN8touchgfx5Texts11setLanguageEt+0x6a>
    {
        if (languagesArray[id] != 0)
 800f59c:	88fb      	ldrh	r3, [r7, #6]
 800f59e:	4a1f      	ldr	r2, [pc, #124]	; (800f61c <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 800f5a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d016      	beq.n	800f5d6 <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 800f5a8:	88fb      	ldrh	r3, [r7, #6]
 800f5aa:	4a1c      	ldr	r2, [pc, #112]	; (800f61c <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 800f5ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f5b0:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 800f5b2:	68bb      	ldr	r3, [r7, #8]
 800f5b4:	681b      	ldr	r3, [r3, #0]
 800f5b6:	68ba      	ldr	r2, [r7, #8]
 800f5b8:	4413      	add	r3, r2
 800f5ba:	4a19      	ldr	r2, [pc, #100]	; (800f620 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 800f5bc:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 800f5be:	68bb      	ldr	r3, [r7, #8]
 800f5c0:	685b      	ldr	r3, [r3, #4]
 800f5c2:	68ba      	ldr	r2, [r7, #8]
 800f5c4:	4413      	add	r3, r2
 800f5c6:	4a17      	ldr	r2, [pc, #92]	; (800f624 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 800f5c8:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 800f5ca:	68bb      	ldr	r3, [r7, #8]
 800f5cc:	689b      	ldr	r3, [r3, #8]
 800f5ce:	68ba      	ldr	r2, [r7, #8]
 800f5d0:	4413      	add	r3, r2
 800f5d2:	60fb      	str	r3, [r7, #12]
 800f5d4:	e00d      	b.n	800f5f2 <_ZN8touchgfx5Texts11setLanguageEt+0x6a>
        }
        else
        {
            // Compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 800f5d6:	4b12      	ldr	r3, [pc, #72]	; (800f620 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 800f5d8:	4a13      	ldr	r2, [pc, #76]	; (800f628 <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 800f5da:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 800f5dc:	88fb      	ldrh	r3, [r7, #6]
 800f5de:	4a13      	ldr	r2, [pc, #76]	; (800f62c <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 800f5e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f5e4:	4a0f      	ldr	r2, [pc, #60]	; (800f624 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 800f5e6:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 800f5e8:	88fb      	ldrh	r3, [r7, #6]
 800f5ea:	4a11      	ldr	r2, [pc, #68]	; (800f630 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 800f5ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f5f0:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 800f5f2:	68fb      	ldr	r3, [r7, #12]
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	d00d      	beq.n	800f614 <_ZN8touchgfx5Texts11setLanguageEt+0x8c>
    {
        currentLanguage = id;
 800f5f8:	4a0e      	ldr	r2, [pc, #56]	; (800f634 <_ZN8touchgfx5Texts11setLanguageEt+0xac>)
 800f5fa:	88fb      	ldrh	r3, [r7, #6]
 800f5fc:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 800f5fe:	f000 f83d 	bl	800f67c <_ZN17TypedTextDatabase8getFontsEv>
 800f602:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 800f604:	f000 f832 	bl	800f66c <_ZN17TypedTextDatabase15getInstanceSizeEv>
 800f608:	4603      	mov	r3, r0
 800f60a:	461a      	mov	r2, r3
 800f60c:	4621      	mov	r1, r4
 800f60e:	68f8      	ldr	r0, [r7, #12]
 800f610:	f7ff fea2 	bl	800f358 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 800f614:	bf00      	nop
 800f616:	3714      	adds	r7, #20
 800f618:	46bd      	mov	sp, r7
 800f61a:	bd90      	pop	{r4, r7, pc}
 800f61c:	2001e178 	.word	0x2001e178
 800f620:	2001e184 	.word	0x2001e184
 800f624:	2001e188 	.word	0x2001e188
 800f628:	90177b8c 	.word	0x90177b8c
 800f62c:	0802a1dc 	.word	0x0802a1dc
 800f630:	90177bbc 	.word	0x90177bbc
 800f634:	2001e180 	.word	0x2001e180

0800f638 <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 800f638:	b480      	push	{r7}
 800f63a:	b083      	sub	sp, #12
 800f63c:	af00      	add	r7, sp, #0
 800f63e:	6078      	str	r0, [r7, #4]
 800f640:	460b      	mov	r3, r1
 800f642:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 800f644:	4b07      	ldr	r3, [pc, #28]	; (800f664 <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 800f646:	681a      	ldr	r2, [r3, #0]
 800f648:	4b07      	ldr	r3, [pc, #28]	; (800f668 <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 800f64a:	6819      	ldr	r1, [r3, #0]
 800f64c:	887b      	ldrh	r3, [r7, #2]
 800f64e:	009b      	lsls	r3, r3, #2
 800f650:	440b      	add	r3, r1
 800f652:	681b      	ldr	r3, [r3, #0]
 800f654:	005b      	lsls	r3, r3, #1
 800f656:	4413      	add	r3, r2
}
 800f658:	4618      	mov	r0, r3
 800f65a:	370c      	adds	r7, #12
 800f65c:	46bd      	mov	sp, r7
 800f65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f662:	4770      	bx	lr
 800f664:	2001e184 	.word	0x2001e184
 800f668:	2001e188 	.word	0x2001e188

0800f66c <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 800f66c:	b480      	push	{r7}
 800f66e:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 800f670:	2302      	movs	r3, #2
}
 800f672:	4618      	mov	r0, r3
 800f674:	46bd      	mov	sp, r7
 800f676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f67a:	4770      	bx	lr

0800f67c <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 800f67c:	b480      	push	{r7}
 800f67e:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 800f680:	4b02      	ldr	r3, [pc, #8]	; (800f68c <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 800f682:	4618      	mov	r0, r3
 800f684:	46bd      	mov	sp, r7
 800f686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f68a:	4770      	bx	lr
 800f68c:	2001e18c 	.word	0x2001e18c

0800f690 <_Z41__static_initialization_and_destruction_0ii>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 800f690:	b580      	push	{r7, lr}
 800f692:	b082      	sub	sp, #8
 800f694:	af00      	add	r7, sp, #0
 800f696:	6078      	str	r0, [r7, #4]
 800f698:	6039      	str	r1, [r7, #0]
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	2b01      	cmp	r3, #1
 800f69e:	d113      	bne.n	800f6c8 <_Z41__static_initialization_and_destruction_0ii+0x38>
 800f6a0:	683b      	ldr	r3, [r7, #0]
 800f6a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f6a6:	4293      	cmp	r3, r2
 800f6a8:	d10e      	bne.n	800f6c8 <_Z41__static_initialization_and_destruction_0ii+0x38>
    &(getFont_verdana_20_4bpp()),
 800f6aa:	f7fe facd 	bl	800dc48 <_Z23getFont_verdana_20_4bppv>
 800f6ae:	4603      	mov	r3, r0
};
 800f6b0:	4a07      	ldr	r2, [pc, #28]	; (800f6d0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800f6b2:	6013      	str	r3, [r2, #0]
    &(getFont_verdana_40_4bpp()),
 800f6b4:	f7fe fb22 	bl	800dcfc <_Z23getFont_verdana_40_4bppv>
 800f6b8:	4603      	mov	r3, r0
};
 800f6ba:	4a05      	ldr	r2, [pc, #20]	; (800f6d0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800f6bc:	6053      	str	r3, [r2, #4]
    &(getFont_verdana_10_4bpp())
 800f6be:	f7fe fa69 	bl	800db94 <_Z23getFont_verdana_10_4bppv>
 800f6c2:	4603      	mov	r3, r0
};
 800f6c4:	4a02      	ldr	r2, [pc, #8]	; (800f6d0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800f6c6:	6093      	str	r3, [r2, #8]
} // namespace TypedTextDatabase
 800f6c8:	bf00      	nop
 800f6ca:	3708      	adds	r7, #8
 800f6cc:	46bd      	mov	sp, r7
 800f6ce:	bd80      	pop	{r7, pc}
 800f6d0:	2001e18c 	.word	0x2001e18c

0800f6d4 <_GLOBAL__sub_I_touchgfx_fonts>:
 800f6d4:	b580      	push	{r7, lr}
 800f6d6:	af00      	add	r7, sp, #0
 800f6d8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f6dc:	2001      	movs	r0, #1
 800f6de:	f7ff ffd7 	bl	800f690 <_Z41__static_initialization_and_destruction_0ii>
 800f6e2:	bd80      	pop	{r7, pc}

0800f6e4 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 800f6e4:	b580      	push	{r7, lr}
 800f6e6:	b082      	sub	sp, #8
 800f6e8:	af00      	add	r7, sp, #0
 800f6ea:	6078      	str	r0, [r7, #4]
 800f6ec:	4a05      	ldr	r2, [pc, #20]	; (800f704 <_ZN19FrontendApplicationD1Ev+0x20>)
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	601a      	str	r2, [r3, #0]
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	4618      	mov	r0, r3
 800f6f6:	f7fe fd5f 	bl	800e1b8 <_ZN23FrontendApplicationBaseD1Ev>
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	4618      	mov	r0, r3
 800f6fe:	3708      	adds	r7, #8
 800f700:	46bd      	mov	sp, r7
 800f702:	bd80      	pop	{r7, pc}
 800f704:	0802a248 	.word	0x0802a248

0800f708 <_ZN19FrontendApplicationD0Ev>:
 800f708:	b580      	push	{r7, lr}
 800f70a:	b082      	sub	sp, #8
 800f70c:	af00      	add	r7, sp, #0
 800f70e:	6078      	str	r0, [r7, #4]
 800f710:	6878      	ldr	r0, [r7, #4]
 800f712:	f7ff ffe7 	bl	800f6e4 <_ZN19FrontendApplicationD1Ev>
 800f716:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 800f71a:	6878      	ldr	r0, [r7, #4]
 800f71c:	f017 f833 	bl	8026786 <_ZdlPvj>
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	4618      	mov	r0, r3
 800f724:	3708      	adds	r7, #8
 800f726:	46bd      	mov	sp, r7
 800f728:	bd80      	pop	{r7, pc}

0800f72a <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 800f72a:	b580      	push	{r7, lr}
 800f72c:	b082      	sub	sp, #8
 800f72e:	af00      	add	r7, sp, #0
 800f730:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800f738:	4618      	mov	r0, r3
 800f73a:	f000 f82d 	bl	800f798 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	4618      	mov	r0, r3
 800f742:	f008 fe21 	bl	8018388 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 800f746:	bf00      	nop
 800f748:	3708      	adds	r7, #8
 800f74a:	46bd      	mov	sp, r7
 800f74c:	bd80      	pop	{r7, pc}
	...

0800f750 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 800f750:	b580      	push	{r7, lr}
 800f752:	b084      	sub	sp, #16
 800f754:	af00      	add	r7, sp, #0
 800f756:	60f8      	str	r0, [r7, #12]
 800f758:	60b9      	str	r1, [r7, #8]
 800f75a:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 800f75c:	68fb      	ldr	r3, [r7, #12]
 800f75e:	687a      	ldr	r2, [r7, #4]
 800f760:	68b9      	ldr	r1, [r7, #8]
 800f762:	4618      	mov	r0, r3
 800f764:	f7fe fd78 	bl	800e258 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 800f768:	4a03      	ldr	r2, [pc, #12]	; (800f778 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 800f76a:	68fb      	ldr	r3, [r7, #12]
 800f76c:	601a      	str	r2, [r3, #0]
{

}
 800f76e:	68fb      	ldr	r3, [r7, #12]
 800f770:	4618      	mov	r0, r3
 800f772:	3710      	adds	r7, #16
 800f774:	46bd      	mov	sp, r7
 800f776:	bd80      	pop	{r7, pc}
 800f778:	0802a248 	.word	0x0802a248

0800f77c <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 800f77c:	b480      	push	{r7}
 800f77e:	b083      	sub	sp, #12
 800f780:	af00      	add	r7, sp, #0
 800f782:	6078      	str	r0, [r7, #4]
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	2200      	movs	r2, #0
 800f788:	601a      	str	r2, [r3, #0]
{

}
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	4618      	mov	r0, r3
 800f78e:	370c      	adds	r7, #12
 800f790:	46bd      	mov	sp, r7
 800f792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f796:	4770      	bx	lr

0800f798 <_ZN5Model4tickEv>:

void Model::tick()
{
 800f798:	b480      	push	{r7}
 800f79a:	b083      	sub	sp, #12
 800f79c:	af00      	add	r7, sp, #0
 800f79e:	6078      	str	r0, [r7, #4]

}
 800f7a0:	bf00      	nop
 800f7a2:	370c      	adds	r7, #12
 800f7a4:	46bd      	mov	sp, r7
 800f7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7aa:	4770      	bx	lr

0800f7ac <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 800f7ac:	b480      	push	{r7}
 800f7ae:	b083      	sub	sp, #12
 800f7b0:	af00      	add	r7, sp, #0
 800f7b2:	6078      	str	r0, [r7, #4]
    {
    }
 800f7b4:	bf00      	nop
 800f7b6:	370c      	adds	r7, #12
 800f7b8:	46bd      	mov	sp, r7
 800f7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7be:	4770      	bx	lr

0800f7c0 <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 800f7c0:	b480      	push	{r7}
 800f7c2:	b083      	sub	sp, #12
 800f7c4:	af00      	add	r7, sp, #0
 800f7c6:	6078      	str	r0, [r7, #4]
    {
    }
 800f7c8:	bf00      	nop
 800f7ca:	370c      	adds	r7, #12
 800f7cc:	46bd      	mov	sp, r7
 800f7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7d2:	4770      	bx	lr

0800f7d4 <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 800f7d4:	b480      	push	{r7}
 800f7d6:	b083      	sub	sp, #12
 800f7d8:	af00      	add	r7, sp, #0
 800f7da:	6078      	str	r0, [r7, #4]
    {
 800f7dc:	4a04      	ldr	r2, [pc, #16]	; (800f7f0 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	601a      	str	r2, [r3, #0]
    }
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	4618      	mov	r0, r3
 800f7e6:	370c      	adds	r7, #12
 800f7e8:	46bd      	mov	sp, r7
 800f7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ee:	4770      	bx	lr
 800f7f0:	0802a2cc 	.word	0x0802a2cc

0800f7f4 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 800f7f4:	b580      	push	{r7, lr}
 800f7f6:	b082      	sub	sp, #8
 800f7f8:	af00      	add	r7, sp, #0
 800f7fa:	6078      	str	r0, [r7, #4]
    }
 800f7fc:	6878      	ldr	r0, [r7, #4]
 800f7fe:	f7ff ffe9 	bl	800f7d4 <_ZN8touchgfx9PresenterD1Ev>
 800f802:	2104      	movs	r1, #4
 800f804:	6878      	ldr	r0, [r7, #4]
 800f806:	f016 ffbe 	bl	8026786 <_ZdlPvj>
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	4618      	mov	r0, r3
 800f80e:	3708      	adds	r7, #8
 800f810:	46bd      	mov	sp, r7
 800f812:	bd80      	pop	{r7, pc}

0800f814 <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 800f814:	b480      	push	{r7}
 800f816:	b083      	sub	sp, #12
 800f818:	af00      	add	r7, sp, #0
 800f81a:	6078      	str	r0, [r7, #4]
    {
 800f81c:	4a04      	ldr	r2, [pc, #16]	; (800f830 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	601a      	str	r2, [r3, #0]
    }
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	4618      	mov	r0, r3
 800f826:	370c      	adds	r7, #12
 800f828:	46bd      	mov	sp, r7
 800f82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f82e:	4770      	bx	lr
 800f830:	0802a2cc 	.word	0x0802a2cc

0800f834 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 800f834:	b480      	push	{r7}
 800f836:	b083      	sub	sp, #12
 800f838:	af00      	add	r7, sp, #0
 800f83a:	6078      	str	r0, [r7, #4]
 800f83c:	4a06      	ldr	r2, [pc, #24]	; (800f858 <_ZN13ModelListenerC1Ev+0x24>)
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	601a      	str	r2, [r3, #0]
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	2200      	movs	r2, #0
 800f846:	605a      	str	r2, [r3, #4]
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	4618      	mov	r0, r3
 800f84c:	370c      	adds	r7, #12
 800f84e:	46bd      	mov	sp, r7
 800f850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f854:	4770      	bx	lr
 800f856:	bf00      	nop
 800f858:	0802a2bc 	.word	0x0802a2bc

0800f85c <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 800f85c:	b480      	push	{r7}
 800f85e:	b083      	sub	sp, #12
 800f860:	af00      	add	r7, sp, #0
 800f862:	6078      	str	r0, [r7, #4]
 800f864:	4a04      	ldr	r2, [pc, #16]	; (800f878 <_ZN13ModelListenerD1Ev+0x1c>)
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	601a      	str	r2, [r3, #0]
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	4618      	mov	r0, r3
 800f86e:	370c      	adds	r7, #12
 800f870:	46bd      	mov	sp, r7
 800f872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f876:	4770      	bx	lr
 800f878:	0802a2bc 	.word	0x0802a2bc

0800f87c <_ZN13ModelListenerD0Ev>:
 800f87c:	b580      	push	{r7, lr}
 800f87e:	b082      	sub	sp, #8
 800f880:	af00      	add	r7, sp, #0
 800f882:	6078      	str	r0, [r7, #4]
 800f884:	6878      	ldr	r0, [r7, #4]
 800f886:	f7ff ffe9 	bl	800f85c <_ZN13ModelListenerD1Ev>
 800f88a:	2108      	movs	r1, #8
 800f88c:	6878      	ldr	r0, [r7, #4]
 800f88e:	f016 ff7a 	bl	8026786 <_ZdlPvj>
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	4618      	mov	r0, r3
 800f896:	3708      	adds	r7, #8
 800f898:	46bd      	mov	sp, r7
 800f89a:	bd80      	pop	{r7, pc}

0800f89c <_ZN15screenPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~screenPresenter() {};
 800f89c:	b580      	push	{r7, lr}
 800f89e:	b082      	sub	sp, #8
 800f8a0:	af00      	add	r7, sp, #0
 800f8a2:	6078      	str	r0, [r7, #4]
 800f8a4:	4a09      	ldr	r2, [pc, #36]	; (800f8cc <_ZN15screenPresenterD1Ev+0x30>)
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	601a      	str	r2, [r3, #0]
 800f8aa:	4a09      	ldr	r2, [pc, #36]	; (800f8d0 <_ZN15screenPresenterD1Ev+0x34>)
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	605a      	str	r2, [r3, #4]
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	3304      	adds	r3, #4
 800f8b4:	4618      	mov	r0, r3
 800f8b6:	f7ff ffd1 	bl	800f85c <_ZN13ModelListenerD1Ev>
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	4618      	mov	r0, r3
 800f8be:	f7ff ff89 	bl	800f7d4 <_ZN8touchgfx9PresenterD1Ev>
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	4618      	mov	r0, r3
 800f8c6:	3708      	adds	r7, #8
 800f8c8:	46bd      	mov	sp, r7
 800f8ca:	bd80      	pop	{r7, pc}
 800f8cc:	0802a294 	.word	0x0802a294
 800f8d0:	0802a2ac 	.word	0x0802a2ac

0800f8d4 <_ZThn4_N15screenPresenterD1Ev>:
 800f8d4:	f1a0 0004 	sub.w	r0, r0, #4
 800f8d8:	e7e0      	b.n	800f89c <_ZN15screenPresenterD1Ev>
 800f8da:	bf00      	nop

0800f8dc <_ZN15screenPresenterD0Ev>:
 800f8dc:	b580      	push	{r7, lr}
 800f8de:	b082      	sub	sp, #8
 800f8e0:	af00      	add	r7, sp, #0
 800f8e2:	6078      	str	r0, [r7, #4]
 800f8e4:	6878      	ldr	r0, [r7, #4]
 800f8e6:	f7ff ffd9 	bl	800f89c <_ZN15screenPresenterD1Ev>
 800f8ea:	2110      	movs	r1, #16
 800f8ec:	6878      	ldr	r0, [r7, #4]
 800f8ee:	f016 ff4a 	bl	8026786 <_ZdlPvj>
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	4618      	mov	r0, r3
 800f8f6:	3708      	adds	r7, #8
 800f8f8:	46bd      	mov	sp, r7
 800f8fa:	bd80      	pop	{r7, pc}

0800f8fc <_ZThn4_N15screenPresenterD0Ev>:
 800f8fc:	f1a0 0004 	sub.w	r0, r0, #4
 800f900:	e7ec      	b.n	800f8dc <_ZN15screenPresenterD0Ev>
	...

0800f904 <_ZN15screenPresenterC1ER10screenView>:
#include <gui/screen_screen/screenView.hpp>
#include <gui/screen_screen/screenPresenter.hpp>

screenPresenter::screenPresenter(screenView& v)
 800f904:	b580      	push	{r7, lr}
 800f906:	b082      	sub	sp, #8
 800f908:	af00      	add	r7, sp, #0
 800f90a:	6078      	str	r0, [r7, #4]
 800f90c:	6039      	str	r1, [r7, #0]
    : view(v)
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	4618      	mov	r0, r3
 800f912:	f7ff ff7f 	bl	800f814 <_ZN8touchgfx9PresenterC1Ev>
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	3304      	adds	r3, #4
 800f91a:	4618      	mov	r0, r3
 800f91c:	f7ff ff8a 	bl	800f834 <_ZN13ModelListenerC1Ev>
 800f920:	4a06      	ldr	r2, [pc, #24]	; (800f93c <_ZN15screenPresenterC1ER10screenView+0x38>)
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	601a      	str	r2, [r3, #0]
 800f926:	4a06      	ldr	r2, [pc, #24]	; (800f940 <_ZN15screenPresenterC1ER10screenView+0x3c>)
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	605a      	str	r2, [r3, #4]
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	683a      	ldr	r2, [r7, #0]
 800f930:	60da      	str	r2, [r3, #12]
{

}
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	4618      	mov	r0, r3
 800f936:	3708      	adds	r7, #8
 800f938:	46bd      	mov	sp, r7
 800f93a:	bd80      	pop	{r7, pc}
 800f93c:	0802a294 	.word	0x0802a294
 800f940:	0802a2ac 	.word	0x0802a2ac

0800f944 <_ZN15screenPresenter8activateEv>:

void screenPresenter::activate()
{
 800f944:	b480      	push	{r7}
 800f946:	b083      	sub	sp, #12
 800f948:	af00      	add	r7, sp, #0
 800f94a:	6078      	str	r0, [r7, #4]

}
 800f94c:	bf00      	nop
 800f94e:	370c      	adds	r7, #12
 800f950:	46bd      	mov	sp, r7
 800f952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f956:	4770      	bx	lr

0800f958 <_ZN15screenPresenter10deactivateEv>:

void screenPresenter::deactivate()
{
 800f958:	b480      	push	{r7}
 800f95a:	b083      	sub	sp, #12
 800f95c:	af00      	add	r7, sp, #0
 800f95e:	6078      	str	r0, [r7, #4]

}
 800f960:	bf00      	nop
 800f962:	370c      	adds	r7, #12
 800f964:	46bd      	mov	sp, r7
 800f966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f96a:	4770      	bx	lr

0800f96c <_ZN10screenViewD1Ev>:

class screenView : public screenViewBase
{
public:
    screenView();
    virtual ~screenView() {}
 800f96c:	b580      	push	{r7, lr}
 800f96e:	b082      	sub	sp, #8
 800f970:	af00      	add	r7, sp, #0
 800f972:	6078      	str	r0, [r7, #4]
 800f974:	4a05      	ldr	r2, [pc, #20]	; (800f98c <_ZN10screenViewD1Ev+0x20>)
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	601a      	str	r2, [r3, #0]
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	4618      	mov	r0, r3
 800f97e:	f7ff fbd5 	bl	800f12c <_ZN14screenViewBaseD1Ev>
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	4618      	mov	r0, r3
 800f986:	3708      	adds	r7, #8
 800f988:	46bd      	mov	sp, r7
 800f98a:	bd80      	pop	{r7, pc}
 800f98c:	0802a2e4 	.word	0x0802a2e4

0800f990 <_ZN10screenViewD0Ev>:
 800f990:	b580      	push	{r7, lr}
 800f992:	b082      	sub	sp, #8
 800f994:	af00      	add	r7, sp, #0
 800f996:	6078      	str	r0, [r7, #4]
 800f998:	6878      	ldr	r0, [r7, #4]
 800f99a:	f7ff ffe7 	bl	800f96c <_ZN10screenViewD1Ev>
 800f99e:	21e0      	movs	r1, #224	; 0xe0
 800f9a0:	6878      	ldr	r0, [r7, #4]
 800f9a2:	f016 fef0 	bl	8026786 <_ZdlPvj>
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	4618      	mov	r0, r3
 800f9aa:	3708      	adds	r7, #8
 800f9ac:	46bd      	mov	sp, r7
 800f9ae:	bd80      	pop	{r7, pc}

0800f9b0 <_ZN10screenViewC1Ev>:
#include <gui/screen_screen/screenView.hpp>

screenView::screenView()
 800f9b0:	b580      	push	{r7, lr}
 800f9b2:	b082      	sub	sp, #8
 800f9b4:	af00      	add	r7, sp, #0
 800f9b6:	6078      	str	r0, [r7, #4]
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	4618      	mov	r0, r3
 800f9bc:	f7ff fad2 	bl	800ef64 <_ZN14screenViewBaseC1Ev>
 800f9c0:	4a03      	ldr	r2, [pc, #12]	; (800f9d0 <_ZN10screenViewC1Ev+0x20>)
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	601a      	str	r2, [r3, #0]
{

}
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	4618      	mov	r0, r3
 800f9ca:	3708      	adds	r7, #8
 800f9cc:	46bd      	mov	sp, r7
 800f9ce:	bd80      	pop	{r7, pc}
 800f9d0:	0802a2e4 	.word	0x0802a2e4

0800f9d4 <_ZN10screenView11setupScreenEv>:

void screenView::setupScreen()
{
 800f9d4:	b580      	push	{r7, lr}
 800f9d6:	b082      	sub	sp, #8
 800f9d8:	af00      	add	r7, sp, #0
 800f9da:	6078      	str	r0, [r7, #4]
    screenViewBase::setupScreen();
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	4618      	mov	r0, r3
 800f9e0:	f7ff fbd6 	bl	800f190 <_ZN14screenViewBase11setupScreenEv>
}
 800f9e4:	bf00      	nop
 800f9e6:	3708      	adds	r7, #8
 800f9e8:	46bd      	mov	sp, r7
 800f9ea:	bd80      	pop	{r7, pc}

0800f9ec <_ZN10screenView14tearDownScreenEv>:

void screenView::tearDownScreen()
{
 800f9ec:	b580      	push	{r7, lr}
 800f9ee:	b082      	sub	sp, #8
 800f9f0:	af00      	add	r7, sp, #0
 800f9f2:	6078      	str	r0, [r7, #4]
    screenViewBase::tearDownScreen();
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	4618      	mov	r0, r3
 800f9f8:	f7ff f94a 	bl	800ec90 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 800f9fc:	bf00      	nop
 800f9fe:	3708      	adds	r7, #8
 800fa00:	46bd      	mov	sp, r7
 800fa02:	bd80      	pop	{r7, pc}

0800fa04 <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 800fa04:	b480      	push	{r7}
 800fa06:	b083      	sub	sp, #12
 800fa08:	af00      	add	r7, sp, #0
 800fa0a:	6078      	str	r0, [r7, #4]
    {
 800fa0c:	4a04      	ldr	r2, [pc, #16]	; (800fa20 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	601a      	str	r2, [r3, #0]
    }
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	4618      	mov	r0, r3
 800fa16:	370c      	adds	r7, #12
 800fa18:	46bd      	mov	sp, r7
 800fa1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa1e:	4770      	bx	lr
 800fa20:	0802a330 	.word	0x0802a330

0800fa24 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 800fa24:	b580      	push	{r7, lr}
 800fa26:	b082      	sub	sp, #8
 800fa28:	af00      	add	r7, sp, #0
 800fa2a:	6078      	str	r0, [r7, #4]
    }
 800fa2c:	6878      	ldr	r0, [r7, #4]
 800fa2e:	f7ff ffe9 	bl	800fa04 <_ZN8touchgfx15TouchControllerD1Ev>
 800fa32:	2104      	movs	r1, #4
 800fa34:	6878      	ldr	r0, [r7, #4]
 800fa36:	f016 fea6 	bl	8026786 <_ZdlPvj>
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	4618      	mov	r0, r3
 800fa3e:	3708      	adds	r7, #8
 800fa40:	46bd      	mov	sp, r7
 800fa42:	bd80      	pop	{r7, pc}

0800fa44 <_ZN20STM32TouchController4initEv>:
/* USER CODE BEGIN STM32TouchController */

#include <STM32TouchController.hpp>

void STM32TouchController::init()
{
 800fa44:	b480      	push	{r7}
 800fa46:	b083      	sub	sp, #12
 800fa48:	af00      	add	r7, sp, #0
 800fa4a:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
}
 800fa4c:	bf00      	nop
 800fa4e:	370c      	adds	r7, #12
 800fa50:	46bd      	mov	sp, r7
 800fa52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa56:	4770      	bx	lr

0800fa58 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 800fa58:	b480      	push	{r7}
 800fa5a:	b085      	sub	sp, #20
 800fa5c:	af00      	add	r7, sp, #0
 800fa5e:	60f8      	str	r0, [r7, #12]
 800fa60:	60b9      	str	r1, [r7, #8]
 800fa62:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    return false;
 800fa64:	2300      	movs	r3, #0
}
 800fa66:	4618      	mov	r0, r3
 800fa68:	3714      	adds	r7, #20
 800fa6a:	46bd      	mov	sp, r7
 800fa6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa70:	4770      	bx	lr
	...

0800fa74 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 800fa74:	b580      	push	{r7, lr}
 800fa76:	b082      	sub	sp, #8
 800fa78:	af00      	add	r7, sp, #0
 800fa7a:	6078      	str	r0, [r7, #4]
 800fa7c:	4a05      	ldr	r2, [pc, #20]	; (800fa94 <_ZN20STM32TouchControllerD1Ev+0x20>)
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	601a      	str	r2, [r3, #0]
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	4618      	mov	r0, r3
 800fa86:	f7ff ffbd 	bl	800fa04 <_ZN8touchgfx15TouchControllerD1Ev>
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	4618      	mov	r0, r3
 800fa8e:	3708      	adds	r7, #8
 800fa90:	46bd      	mov	sp, r7
 800fa92:	bd80      	pop	{r7, pc}
 800fa94:	0802a318 	.word	0x0802a318

0800fa98 <_ZN20STM32TouchControllerD0Ev>:
 800fa98:	b580      	push	{r7, lr}
 800fa9a:	b082      	sub	sp, #8
 800fa9c:	af00      	add	r7, sp, #0
 800fa9e:	6078      	str	r0, [r7, #4]
 800faa0:	6878      	ldr	r0, [r7, #4]
 800faa2:	f7ff ffe7 	bl	800fa74 <_ZN20STM32TouchControllerD1Ev>
 800faa6:	2104      	movs	r1, #4
 800faa8:	6878      	ldr	r0, [r7, #4]
 800faaa:	f016 fe6c 	bl	8026786 <_ZdlPvj>
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	4618      	mov	r0, r3
 800fab2:	3708      	adds	r7, #8
 800fab4:	46bd      	mov	sp, r7
 800fab6:	bd80      	pop	{r7, pc}

0800fab8 <_ZN8touchgfx4GPIO4initEv>:

/*
 * Perform configuration of IO pins.
 */
void GPIO::init()
{
 800fab8:	b480      	push	{r7}
 800faba:	af00      	add	r7, sp, #0

}
 800fabc:	bf00      	nop
 800fabe:	46bd      	mov	sp, r7
 800fac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fac4:	4770      	bx	lr
	...

0800fac8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 800fac8:	b580      	push	{r7, lr}
 800faca:	b082      	sub	sp, #8
 800facc:	af00      	add	r7, sp, #0
 800face:	4603      	mov	r3, r0
 800fad0:	71fb      	strb	r3, [r7, #7]
    switch (id)
 800fad2:	79fb      	ldrb	r3, [r7, #7]
 800fad4:	2b03      	cmp	r3, #3
 800fad6:	d823      	bhi.n	800fb20 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x58>
 800fad8:	a201      	add	r2, pc, #4	; (adr r2, 800fae0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>)
 800fada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fade:	bf00      	nop
 800fae0:	0800faf1 	.word	0x0800faf1
 800fae4:	0800fafd 	.word	0x0800fafd
 800fae8:	0800fb09 	.word	0x0800fb09
 800faec:	0800fb15 	.word	0x0800fb15
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_SET);
 800faf0:	2201      	movs	r2, #1
 800faf2:	2140      	movs	r1, #64	; 0x40
 800faf4:	480c      	ldr	r0, [pc, #48]	; (800fb28 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x60>)
 800faf6:	f7f4 ffd3 	bl	8004aa0 <HAL_GPIO_WritePin>
#endif
        break;
 800fafa:	e011      	b.n	800fb20 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x58>
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, GPIO_PIN_SET);
 800fafc:	2201      	movs	r2, #1
 800fafe:	2180      	movs	r1, #128	; 0x80
 800fb00:	4809      	ldr	r0, [pc, #36]	; (800fb28 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x60>)
 800fb02:	f7f4 ffcd 	bl	8004aa0 <HAL_GPIO_WritePin>
#endif
        break;
 800fb06:	e00b      	b.n	800fb20 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x58>
    case GPIO::FRAME_RATE:
#if defined(FRAME_RATE_GPIO_Port) && defined(FRAME_RATE_Pin)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, GPIO_PIN_SET);
 800fb08:	2201      	movs	r2, #1
 800fb0a:	2102      	movs	r1, #2
 800fb0c:	4807      	ldr	r0, [pc, #28]	; (800fb2c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x64>)
 800fb0e:	f7f4 ffc7 	bl	8004aa0 <HAL_GPIO_WritePin>
#endif
        break;
 800fb12:	e005      	b.n	800fb20 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x58>
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_SET);
 800fb14:	2201      	movs	r2, #1
 800fb16:	2140      	movs	r1, #64	; 0x40
 800fb18:	4805      	ldr	r0, [pc, #20]	; (800fb30 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x68>)
 800fb1a:	f7f4 ffc1 	bl	8004aa0 <HAL_GPIO_WritePin>
#endif
        break;
 800fb1e:	bf00      	nop
    }
}
 800fb20:	bf00      	nop
 800fb22:	3708      	adds	r7, #8
 800fb24:	46bd      	mov	sp, r7
 800fb26:	bd80      	pop	{r7, pc}
 800fb28:	40020800 	.word	0x40020800
 800fb2c:	40022400 	.word	0x40022400
 800fb30:	40021400 	.word	0x40021400

0800fb34 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 800fb34:	b580      	push	{r7, lr}
 800fb36:	b082      	sub	sp, #8
 800fb38:	af00      	add	r7, sp, #0
 800fb3a:	4603      	mov	r3, r0
 800fb3c:	71fb      	strb	r3, [r7, #7]
    switch (id)
 800fb3e:	79fb      	ldrb	r3, [r7, #7]
 800fb40:	2b03      	cmp	r3, #3
 800fb42:	d823      	bhi.n	800fb8c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>
 800fb44:	a201      	add	r2, pc, #4	; (adr r2, 800fb4c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>)
 800fb46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb4a:	bf00      	nop
 800fb4c:	0800fb5d 	.word	0x0800fb5d
 800fb50:	0800fb69 	.word	0x0800fb69
 800fb54:	0800fb75 	.word	0x0800fb75
 800fb58:	0800fb81 	.word	0x0800fb81
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 800fb5c:	2200      	movs	r2, #0
 800fb5e:	2140      	movs	r1, #64	; 0x40
 800fb60:	480c      	ldr	r0, [pc, #48]	; (800fb94 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x60>)
 800fb62:	f7f4 ff9d 	bl	8004aa0 <HAL_GPIO_WritePin>
#endif
        break;
 800fb66:	e011      	b.n	800fb8c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, GPIO_PIN_RESET);
 800fb68:	2200      	movs	r2, #0
 800fb6a:	2180      	movs	r1, #128	; 0x80
 800fb6c:	4809      	ldr	r0, [pc, #36]	; (800fb94 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x60>)
 800fb6e:	f7f4 ff97 	bl	8004aa0 <HAL_GPIO_WritePin>
#endif
        break;
 800fb72:	e00b      	b.n	800fb8c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>
    case GPIO::FRAME_RATE:
#if defined(FRAME_RATE_GPIO_Port) && defined(FRAME_RATE_Pin)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, GPIO_PIN_RESET);
 800fb74:	2200      	movs	r2, #0
 800fb76:	2102      	movs	r1, #2
 800fb78:	4807      	ldr	r0, [pc, #28]	; (800fb98 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x64>)
 800fb7a:	f7f4 ff91 	bl	8004aa0 <HAL_GPIO_WritePin>
#endif
        break;
 800fb7e:	e005      	b.n	800fb8c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 800fb80:	2200      	movs	r2, #0
 800fb82:	2140      	movs	r1, #64	; 0x40
 800fb84:	4805      	ldr	r0, [pc, #20]	; (800fb9c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x68>)
 800fb86:	f7f4 ff8b 	bl	8004aa0 <HAL_GPIO_WritePin>
#endif
        break;
 800fb8a:	bf00      	nop
    }
}
 800fb8c:	bf00      	nop
 800fb8e:	3708      	adds	r7, #8
 800fb90:	46bd      	mov	sp, r7
 800fb92:	bd80      	pop	{r7, pc}
 800fb94:	40020800 	.word	0x40020800
 800fb98:	40022400 	.word	0x40022400
 800fb9c:	40021400 	.word	0x40021400

0800fba0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 800fba0:	b580      	push	{r7, lr}
 800fba2:	b082      	sub	sp, #8
 800fba4:	af00      	add	r7, sp, #0
 800fba6:	4603      	mov	r3, r0
 800fba8:	71fb      	strb	r3, [r7, #7]
    switch (id)
 800fbaa:	79fb      	ldrb	r3, [r7, #7]
 800fbac:	2b03      	cmp	r3, #3
 800fbae:	d81f      	bhi.n	800fbf0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x50>
 800fbb0:	a201      	add	r2, pc, #4	; (adr r2, 800fbb8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>)
 800fbb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fbb6:	bf00      	nop
 800fbb8:	0800fbc9 	.word	0x0800fbc9
 800fbbc:	0800fbd3 	.word	0x0800fbd3
 800fbc0:	0800fbdd 	.word	0x0800fbdd
 800fbc4:	0800fbe7 	.word	0x0800fbe7
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 800fbc8:	2140      	movs	r1, #64	; 0x40
 800fbca:	480b      	ldr	r0, [pc, #44]	; (800fbf8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x58>)
 800fbcc:	f7f4 ff81 	bl	8004ad2 <HAL_GPIO_TogglePin>
#endif
        break;
 800fbd0:	e00e      	b.n	800fbf0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x50>
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 800fbd2:	2180      	movs	r1, #128	; 0x80
 800fbd4:	4808      	ldr	r0, [pc, #32]	; (800fbf8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x58>)
 800fbd6:	f7f4 ff7c 	bl	8004ad2 <HAL_GPIO_TogglePin>
#endif
        break;
 800fbda:	e009      	b.n	800fbf0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x50>
    case GPIO::FRAME_RATE:
#if defined(FRAME_RATE_GPIO_Port) && defined(FRAME_RATE_Pin)
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 800fbdc:	2102      	movs	r1, #2
 800fbde:	4807      	ldr	r0, [pc, #28]	; (800fbfc <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x5c>)
 800fbe0:	f7f4 ff77 	bl	8004ad2 <HAL_GPIO_TogglePin>
#endif
        break;
 800fbe4:	e004      	b.n	800fbf0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x50>
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 800fbe6:	2140      	movs	r1, #64	; 0x40
 800fbe8:	4805      	ldr	r0, [pc, #20]	; (800fc00 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x60>)
 800fbea:	f7f4 ff72 	bl	8004ad2 <HAL_GPIO_TogglePin>
#endif
        break;
 800fbee:	bf00      	nop
    }
}
 800fbf0:	bf00      	nop
 800fbf2:	3708      	adds	r7, #8
 800fbf4:	46bd      	mov	sp, r7
 800fbf6:	bd80      	pop	{r7, pc}
 800fbf8:	40020800 	.word	0x40020800
 800fbfc:	40022400 	.word	0x40022400
 800fc00:	40021400 	.word	0x40021400

0800fc04 <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 800fc04:	b480      	push	{r7}
 800fc06:	b083      	sub	sp, #12
 800fc08:	af00      	add	r7, sp, #0
 800fc0a:	6078      	str	r0, [r7, #4]
    {
 800fc0c:	4a04      	ldr	r2, [pc, #16]	; (800fc20 <_ZN8touchgfx3HALD1Ev+0x1c>)
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	601a      	str	r2, [r3, #0]
    }
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	4618      	mov	r0, r3
 800fc16:	370c      	adds	r7, #12
 800fc18:	46bd      	mov	sp, r7
 800fc1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc1e:	4770      	bx	lr
 800fc20:	0802ae10 	.word	0x0802ae10

0800fc24 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 800fc24:	b580      	push	{r7, lr}
 800fc26:	b082      	sub	sp, #8
 800fc28:	af00      	add	r7, sp, #0
 800fc2a:	6078      	str	r0, [r7, #4]
    }
 800fc2c:	6878      	ldr	r0, [r7, #4]
 800fc2e:	f7ff ffe9 	bl	800fc04 <_ZN8touchgfx3HALD1Ev>
 800fc32:	217c      	movs	r1, #124	; 0x7c
 800fc34:	6878      	ldr	r0, [r7, #4]
 800fc36:	f016 fda6 	bl	8026786 <_ZdlPvj>
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	4618      	mov	r0, r3
 800fc3e:	3708      	adds	r7, #8
 800fc40:	46bd      	mov	sp, r7
 800fc42:	bd80      	pop	{r7, pc}

0800fc44 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 800fc44:	b480      	push	{r7}
 800fc46:	b083      	sub	sp, #12
 800fc48:	af00      	add	r7, sp, #0
 800fc4a:	6078      	str	r0, [r7, #4]
 800fc4c:	460b      	mov	r3, r1
 800fc4e:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	78fa      	ldrb	r2, [r7, #3]
 800fc54:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	2201      	movs	r2, #1
 800fc5c:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 800fc60:	bf00      	nop
 800fc62:	370c      	adds	r7, #12
 800fc64:	46bd      	mov	sp, r7
 800fc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc6a:	4770      	bx	lr

0800fc6c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 800fc6c:	b580      	push	{r7, lr}
 800fc6e:	b082      	sub	sp, #8
 800fc70:	af00      	add	r7, sp, #0
 800fc72:	6078      	str	r0, [r7, #4]
 800fc74:	460b      	mov	r3, r1
 800fc76:	807b      	strh	r3, [r7, #2]
 800fc78:	4613      	mov	r3, r2
 800fc7a:	803b      	strh	r3, [r7, #0]
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 800fc7c:	4b0c      	ldr	r3, [pc, #48]	; (800fcb0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x44>)
 800fc7e:	881b      	ldrh	r3, [r3, #0]
 800fc80:	887a      	ldrh	r2, [r7, #2]
 800fc82:	429a      	cmp	r2, r3
 800fc84:	d304      	bcc.n	800fc90 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x24>
 800fc86:	4b0b      	ldr	r3, [pc, #44]	; (800fcb4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x48>)
 800fc88:	881b      	ldrh	r3, [r3, #0]
 800fc8a:	883a      	ldrh	r2, [r7, #0]
 800fc8c:	429a      	cmp	r2, r3
 800fc8e:	d205      	bcs.n	800fc9c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>
 800fc90:	4b09      	ldr	r3, [pc, #36]	; (800fcb8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x4c>)
 800fc92:	4a0a      	ldr	r2, [pc, #40]	; (800fcbc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x50>)
 800fc94:	219e      	movs	r1, #158	; 0x9e
 800fc96:	480a      	ldr	r0, [pc, #40]	; (800fcc0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x54>)
 800fc98:	f016 fda4 	bl	80267e4 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 800fc9c:	4a09      	ldr	r2, [pc, #36]	; (800fcc4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x58>)
 800fc9e:	887b      	ldrh	r3, [r7, #2]
 800fca0:	8013      	strh	r3, [r2, #0]
        FRAME_BUFFER_HEIGHT = height;
 800fca2:	4a09      	ldr	r2, [pc, #36]	; (800fcc8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x5c>)
 800fca4:	883b      	ldrh	r3, [r7, #0]
 800fca6:	8013      	strh	r3, [r2, #0]
    }
 800fca8:	bf00      	nop
 800fcaa:	3708      	adds	r7, #8
 800fcac:	46bd      	mov	sp, r7
 800fcae:	bd80      	pop	{r7, pc}
 800fcb0:	2002441c 	.word	0x2002441c
 800fcb4:	2002441e 	.word	0x2002441e
 800fcb8:	08027f88 	.word	0x08027f88
 800fcbc:	08027fec 	.word	0x08027fec
 800fcc0:	08028030 	.word	0x08028030
 800fcc4:	20024422 	.word	0x20024422
 800fcc8:	20024424 	.word	0x20024424

0800fccc <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 800fccc:	b580      	push	{r7, lr}
 800fcce:	b082      	sub	sp, #8
 800fcd0:	af00      	add	r7, sp, #0
 800fcd2:	6078      	str	r0, [r7, #4]
    {
        if (useDMAAcceleration)
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d009      	beq.n	800fcf2 <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
        {
            return dma.getBlitCaps();
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	685a      	ldr	r2, [r3, #4]
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	685b      	ldr	r3, [r3, #4]
 800fce6:	681b      	ldr	r3, [r3, #0]
 800fce8:	681b      	ldr	r3, [r3, #0]
 800fcea:	4610      	mov	r0, r2
 800fcec:	4798      	blx	r3
 800fcee:	4603      	mov	r3, r0
 800fcf0:	e000      	b.n	800fcf4 <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        }
        return static_cast<BlitOperations>(0);
 800fcf2:	2300      	movs	r3, #0
    }
 800fcf4:	4618      	mov	r0, r3
 800fcf6:	3708      	adds	r7, #8
 800fcf8:	46bd      	mov	sp, r7
 800fcfa:	bd80      	pop	{r7, pc}

0800fcfc <_ZN8touchgfx3HAL15backPorchExitedEv>:
    /**
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     */
    virtual void backPorchExited()
 800fcfc:	b580      	push	{r7, lr}
 800fcfe:	b082      	sub	sp, #8
 800fd00:	af00      	add	r7, sp, #0
 800fd02:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 800fd04:	6878      	ldr	r0, [r7, #4]
 800fd06:	f006 f839 	bl	8015d7c <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	681b      	ldr	r3, [r3, #0]
 800fd0e:	33ac      	adds	r3, #172	; 0xac
 800fd10:	681b      	ldr	r3, [r3, #0]
 800fd12:	6878      	ldr	r0, [r7, #4]
 800fd14:	4798      	blx	r3
    }
 800fd16:	bf00      	nop
 800fd18:	3708      	adds	r7, #8
 800fd1a:	46bd      	mov	sp, r7
 800fd1c:	bd80      	pop	{r7, pc}

0800fd1e <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 800fd1e:	b480      	push	{r7}
 800fd20:	b083      	sub	sp, #12
 800fd22:	af00      	add	r7, sp, #0
 800fd24:	6078      	str	r0, [r7, #4]
 800fd26:	6039      	str	r1, [r7, #0]
    {
        (void)key; // Unused variable
        return false;
 800fd28:	2300      	movs	r3, #0
    }
 800fd2a:	4618      	mov	r0, r3
 800fd2c:	370c      	adds	r7, #12
 800fd2e:	46bd      	mov	sp, r7
 800fd30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd34:	4770      	bx	lr
	...

0800fd38 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     *
     * @see setAnimationStorage
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 800fd38:	b580      	push	{r7, lr}
 800fd3a:	b084      	sub	sp, #16
 800fd3c:	af00      	add	r7, sp, #0
 800fd3e:	60f8      	str	r0, [r7, #12]
 800fd40:	60b9      	str	r1, [r7, #8]
 800fd42:	607a      	str	r2, [r7, #4]
 800fd44:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 800fd46:	68bb      	ldr	r3, [r7, #8]
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	d106      	bne.n	800fd5a <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 800fd4c:	4b0f      	ldr	r3, [pc, #60]	; (800fd8c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x54>)
 800fd4e:	4a10      	ldr	r2, [pc, #64]	; (800fd90 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x58>)
 800fd50:	f240 21d2 	movw	r1, #722	; 0x2d2
 800fd54:	480f      	ldr	r0, [pc, #60]	; (800fd94 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 800fd56:	f016 fd45 	bl	80267e4 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 800fd5a:	68fb      	ldr	r3, [r7, #12]
 800fd5c:	68ba      	ldr	r2, [r7, #8]
 800fd5e:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 800fd60:	68fb      	ldr	r3, [r7, #12]
 800fd62:	687a      	ldr	r2, [r7, #4]
 800fd64:	641a      	str	r2, [r3, #64]	; 0x40
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	2b00      	cmp	r3, #0
 800fd6a:	bf14      	ite	ne
 800fd6c:	2301      	movne	r3, #1
 800fd6e:	2300      	moveq	r3, #0
 800fd70:	b2da      	uxtb	r2, r3
 800fd72:	4b09      	ldr	r3, [pc, #36]	; (800fd98 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 800fd74:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 800fd76:	68fb      	ldr	r3, [r7, #12]
 800fd78:	681b      	ldr	r3, [r3, #0]
 800fd7a:	338c      	adds	r3, #140	; 0x8c
 800fd7c:	681b      	ldr	r3, [r3, #0]
 800fd7e:	6839      	ldr	r1, [r7, #0]
 800fd80:	68f8      	ldr	r0, [r7, #12]
 800fd82:	4798      	blx	r3
    }
 800fd84:	bf00      	nop
 800fd86:	3710      	adds	r7, #16
 800fd88:	46bd      	mov	sp, r7
 800fd8a:	bd80      	pop	{r7, pc}
 800fd8c:	08028074 	.word	0x08028074
 800fd90:	080280ac 	.word	0x080280ac
 800fd94:	08028030 	.word	0x08028030
 800fd98:	20024426 	.word	0x20024426

0800fd9c <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
 800fd9c:	b480      	push	{r7}
 800fd9e:	b083      	sub	sp, #12
 800fda0:	af00      	add	r7, sp, #0
 800fda2:	6078      	str	r0, [r7, #4]
 800fda4:	6039      	str	r1, [r7, #0]
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	683a      	ldr	r2, [r7, #0]
 800fdaa:	645a      	str	r2, [r3, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 800fdac:	683b      	ldr	r3, [r7, #0]
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	bf14      	ite	ne
 800fdb2:	2301      	movne	r3, #1
 800fdb4:	2300      	moveq	r3, #0
 800fdb6:	b2da      	uxtb	r2, r3
 800fdb8:	4b03      	ldr	r3, [pc, #12]	; (800fdc8 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x2c>)
 800fdba:	701a      	strb	r2, [r3, #0]
    }
 800fdbc:	bf00      	nop
 800fdbe:	370c      	adds	r7, #12
 800fdc0:	46bd      	mov	sp, r7
 800fdc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdc6:	4770      	bx	lr
 800fdc8:	20024427 	.word	0x20024427

0800fdcc <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * Gets the flash data reader. This method must be implemented in
     * subclasses that uses a FlashDataReader object.
     *
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
 800fdcc:	b480      	push	{r7}
 800fdce:	b083      	sub	sp, #12
 800fdd0:	af00      	add	r7, sp, #0
 800fdd2:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800fdd4:	2300      	movs	r3, #0
    }
 800fdd6:	4618      	mov	r0, r3
 800fdd8:	370c      	adds	r7, #12
 800fdda:	46bd      	mov	sp, r7
 800fddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fde0:	4770      	bx	lr

0800fde2 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 800fde2:	b580      	push	{r7, lr}
 800fde4:	b082      	sub	sp, #8
 800fde6:	af00      	add	r7, sp, #0
 800fde8:	6078      	str	r0, [r7, #4]
 800fdea:	460b      	mov	r3, r1
 800fdec:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	d004      	beq.n	800fe00 <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fdfa:	887a      	ldrh	r2, [r7, #2]
 800fdfc:	4610      	mov	r0, r2
 800fdfe:	4798      	blx	r3
        }
    }
 800fe00:	bf00      	nop
 800fe02:	3708      	adds	r7, #8
 800fe04:	46bd      	mov	sp, r7
 800fe06:	bd80      	pop	{r7, pc}

0800fe08 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     * getTFTCurrentLine function is never called and can be disregarded.
     *
     * @return In this default implementation, 0xFFFF is returned to signify "not
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
 800fe08:	b480      	push	{r7}
 800fe0a:	b083      	sub	sp, #12
 800fe0c:	af00      	add	r7, sp, #0
 800fe0e:	6078      	str	r0, [r7, #4]
    {
        return 0xFFFFu;
 800fe10:	f64f 73ff 	movw	r3, #65535	; 0xffff
    }
 800fe14:	4618      	mov	r0, r3
 800fe16:	370c      	adds	r7, #12
 800fe18:	46bd      	mov	sp, r7
 800fe1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe1e:	4770      	bx	lr

0800fe20 <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 800fe20:	b580      	push	{r7, lr}
 800fe22:	b082      	sub	sp, #8
 800fe24:	af00      	add	r7, sp, #0
 800fe26:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	685a      	ldr	r2, [r3, #4]
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	685b      	ldr	r3, [r3, #4]
 800fe30:	681b      	ldr	r3, [r3, #0]
 800fe32:	3318      	adds	r3, #24
 800fe34:	681b      	ldr	r3, [r3, #0]
 800fe36:	4610      	mov	r0, r2
 800fe38:	4798      	blx	r3
 800fe3a:	4603      	mov	r3, r0
    }
 800fe3c:	4618      	mov	r0, r3
 800fe3e:	3708      	adds	r7, #8
 800fe40:	46bd      	mov	sp, r7
 800fe42:	bd80      	pop	{r7, pc}

0800fe44 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 800fe44:	b480      	push	{r7}
 800fe46:	b085      	sub	sp, #20
 800fe48:	af00      	add	r7, sp, #0
 800fe4a:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800fe58:	429a      	cmp	r2, r3
 800fe5a:	d011      	beq.n	800fe80 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>
        {
            if (DISPLAY_ROTATION == rotate0)
 800fe5c:	4b14      	ldr	r3, [pc, #80]	; (800feb0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 800fe5e:	781b      	ldrb	r3, [r3, #0]
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	d11e      	bne.n	800fea2 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 800fe64:	4b13      	ldr	r3, [pc, #76]	; (800feb4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 800fe66:	881b      	ldrh	r3, [r3, #0]
 800fe68:	81bb      	strh	r3, [r7, #12]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 800fe6a:	4b13      	ldr	r3, [pc, #76]	; (800feb8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 800fe6c:	881a      	ldrh	r2, [r3, #0]
 800fe6e:	4b11      	ldr	r3, [pc, #68]	; (800feb4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 800fe70:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = tmp;
 800fe72:	4a11      	ldr	r2, [pc, #68]	; (800feb8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 800fe74:	89bb      	ldrh	r3, [r7, #12]
 800fe76:	8013      	strh	r3, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 800fe78:	4b0d      	ldr	r3, [pc, #52]	; (800feb0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 800fe7a:	2201      	movs	r2, #1
 800fe7c:	701a      	strb	r2, [r3, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
        }
    }
 800fe7e:	e010      	b.n	800fea2 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
        else if (DISPLAY_ROTATION != rotate0)
 800fe80:	4b0b      	ldr	r3, [pc, #44]	; (800feb0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 800fe82:	781b      	ldrb	r3, [r3, #0]
 800fe84:	2b00      	cmp	r3, #0
 800fe86:	d00c      	beq.n	800fea2 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            const uint16_t tmp = DISPLAY_HEIGHT;
 800fe88:	4b0a      	ldr	r3, [pc, #40]	; (800feb4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 800fe8a:	881b      	ldrh	r3, [r3, #0]
 800fe8c:	81fb      	strh	r3, [r7, #14]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 800fe8e:	4b0a      	ldr	r3, [pc, #40]	; (800feb8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 800fe90:	881a      	ldrh	r2, [r3, #0]
 800fe92:	4b08      	ldr	r3, [pc, #32]	; (800feb4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 800fe94:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = tmp;
 800fe96:	4a08      	ldr	r2, [pc, #32]	; (800feb8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 800fe98:	89fb      	ldrh	r3, [r7, #14]
 800fe9a:	8013      	strh	r3, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 800fe9c:	4b04      	ldr	r3, [pc, #16]	; (800feb0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 800fe9e:	2200      	movs	r2, #0
 800fea0:	701a      	strb	r2, [r3, #0]
    }
 800fea2:	bf00      	nop
 800fea4:	3714      	adds	r7, #20
 800fea6:	46bd      	mov	sp, r7
 800fea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feac:	4770      	bx	lr
 800feae:	bf00      	nop
 800feb0:	20024420 	.word	0x20024420
 800feb4:	2002441e 	.word	0x2002441e
 800feb8:	2002441c 	.word	0x2002441c

0800febc <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 800febc:	b580      	push	{r7, lr}
 800febe:	b082      	sub	sp, #8
 800fec0:	af00      	add	r7, sp, #0
 800fec2:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	4618      	mov	r0, r3
 800fec8:	f005 f9bc 	bl	8015244 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 800fecc:	bf00      	nop
 800fece:	3708      	adds	r7, #8
 800fed0:	46bd      	mov	sp, r7
 800fed2:	bd80      	pop	{r7, pc}

0800fed4 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 800fed4:	b580      	push	{r7, lr}
 800fed6:	b082      	sub	sp, #8
 800fed8:	af00      	add	r7, sp, #0
 800feda:	6078      	str	r0, [r7, #4]
 800fedc:	4a05      	ldr	r2, [pc, #20]	; (800fef4 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	601a      	str	r2, [r3, #0]
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	4618      	mov	r0, r3
 800fee6:	f7ff fe8d 	bl	800fc04 <_ZN8touchgfx3HALD1Ev>
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	4618      	mov	r0, r3
 800feee:	3708      	adds	r7, #8
 800fef0:	46bd      	mov	sp, r7
 800fef2:	bd80      	pop	{r7, pc}
 800fef4:	0802a668 	.word	0x0802a668

0800fef8 <_ZN20TouchGFXGeneratedHALD0Ev>:
 800fef8:	b580      	push	{r7, lr}
 800fefa:	b082      	sub	sp, #8
 800fefc:	af00      	add	r7, sp, #0
 800fefe:	6078      	str	r0, [r7, #4]
 800ff00:	6878      	ldr	r0, [r7, #4]
 800ff02:	f7ff ffe7 	bl	800fed4 <_ZN20TouchGFXGeneratedHALD1Ev>
 800ff06:	217c      	movs	r1, #124	; 0x7c
 800ff08:	6878      	ldr	r0, [r7, #4]
 800ff0a:	f016 fc3c 	bl	8026786 <_ZdlPvj>
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	4618      	mov	r0, r3
 800ff12:	3708      	adds	r7, #8
 800ff14:	46bd      	mov	sp, r7
 800ff16:	bd80      	pop	{r7, pc}

0800ff18 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 800ff18:	b580      	push	{r7, lr}
 800ff1a:	b082      	sub	sp, #8
 800ff1c:	af00      	add	r7, sp, #0
 800ff1e:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	4618      	mov	r0, r3
 800ff24:	f7ff ffca 	bl	800febc <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 800ff28:	bf00      	nop
 800ff2a:	3708      	adds	r7, #8
 800ff2c:	46bd      	mov	sp, r7
 800ff2e:	bd80      	pop	{r7, pc}

0800ff30 <_ZN11TouchGFXHAL10initializeEv>:
/* USER CODE BEGIN TouchGFXHAL.cpp */

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 800ff30:	b580      	push	{r7, lr}
 800ff32:	b082      	sub	sp, #8
 800ff34:	af00      	add	r7, sp, #0
 800ff36:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	4618      	mov	r0, r3
 800ff3c:	f002 fbb2 	bl	80126a4 <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 800ff40:	bf00      	nop
 800ff42:	3708      	adds	r7, #8
 800ff44:	46bd      	mov	sp, r7
 800ff46:	bd80      	pop	{r7, pc}

0800ff48 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 800ff48:	b580      	push	{r7, lr}
 800ff4a:	b082      	sub	sp, #8
 800ff4c:	af00      	add	r7, sp, #0
 800ff4e:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	4618      	mov	r0, r3
 800ff54:	f002 fc26 	bl	80127a4 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 800ff58:	4603      	mov	r3, r0
}
 800ff5a:	4618      	mov	r0, r3
 800ff5c:	3708      	adds	r7, #8
 800ff5e:	46bd      	mov	sp, r7
 800ff60:	bd80      	pop	{r7, pc}

0800ff62 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 800ff62:	b580      	push	{r7, lr}
 800ff64:	b082      	sub	sp, #8
 800ff66:	af00      	add	r7, sp, #0
 800ff68:	6078      	str	r0, [r7, #4]
 800ff6a:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	6839      	ldr	r1, [r7, #0]
 800ff70:	4618      	mov	r0, r3
 800ff72:	f002 fc25 	bl	80127c0 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 800ff76:	bf00      	nop
 800ff78:	3708      	adds	r7, #8
 800ff7a:	46bd      	mov	sp, r7
 800ff7c:	bd80      	pop	{r7, pc}

0800ff7e <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 800ff7e:	b580      	push	{r7, lr}
 800ff80:	b082      	sub	sp, #8
 800ff82:	af00      	add	r7, sp, #0
 800ff84:	6078      	str	r0, [r7, #4]
 800ff86:	6039      	str	r1, [r7, #0]
    // be called to notify the touchgfx framework that flush has been performed.
    // To calculate he start adress of rect,
    // use advanceFrameBufferToRect(uint8_t* fbPtr, const touchgfx::Rect& rect)
    // defined in TouchGFXGeneratedHAL.cpp

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	6839      	ldr	r1, [r7, #0]
 800ff8c:	4618      	mov	r0, r3
 800ff8e:	f002 fc22 	bl	80127d6 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
}
 800ff92:	bf00      	nop
 800ff94:	3708      	adds	r7, #8
 800ff96:	46bd      	mov	sp, r7
 800ff98:	bd80      	pop	{r7, pc}

0800ff9a <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 800ff9a:	b580      	push	{r7, lr}
 800ff9c:	b084      	sub	sp, #16
 800ff9e:	af00      	add	r7, sp, #0
 800ffa0:	60f8      	str	r0, [r7, #12]
 800ffa2:	60b9      	str	r1, [r7, #8]
 800ffa4:	607a      	str	r2, [r7, #4]
 800ffa6:	603b      	str	r3, [r7, #0]
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 800ffa8:	68f8      	ldr	r0, [r7, #12]
 800ffaa:	683b      	ldr	r3, [r7, #0]
 800ffac:	687a      	ldr	r2, [r7, #4]
 800ffae:	68b9      	ldr	r1, [r7, #8]
 800ffb0:	f002 fc1f 	bl	80127f2 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>
 800ffb4:	4603      	mov	r3, r0
}
 800ffb6:	4618      	mov	r0, r3
 800ffb8:	3710      	adds	r7, #16
 800ffba:	46bd      	mov	sp, r7
 800ffbc:	bd80      	pop	{r7, pc}

0800ffbe <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 800ffbe:	b580      	push	{r7, lr}
 800ffc0:	b082      	sub	sp, #8
 800ffc2:	af00      	add	r7, sp, #0
 800ffc4:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	4618      	mov	r0, r3
 800ffca:	f002 fb9f 	bl	801270c <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 800ffce:	bf00      	nop
 800ffd0:	3708      	adds	r7, #8
 800ffd2:	46bd      	mov	sp, r7
 800ffd4:	bd80      	pop	{r7, pc}

0800ffd6 <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 800ffd6:	b580      	push	{r7, lr}
 800ffd8:	b082      	sub	sp, #8
 800ffda:	af00      	add	r7, sp, #0
 800ffdc:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	4618      	mov	r0, r3
 800ffe2:	f002 fb9f 	bl	8012724 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 800ffe6:	bf00      	nop
 800ffe8:	3708      	adds	r7, #8
 800ffea:	46bd      	mov	sp, r7
 800ffec:	bd80      	pop	{r7, pc}

0800ffee <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 800ffee:	b580      	push	{r7, lr}
 800fff0:	b082      	sub	sp, #8
 800fff2:	af00      	add	r7, sp, #0
 800fff4:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	4618      	mov	r0, r3
 800fffa:	f002 fb9e 	bl	801273a <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 800fffe:	bf00      	nop
 8010000:	3708      	adds	r7, #8
 8010002:	46bd      	mov	sp, r7
 8010004:	bd80      	pop	{r7, pc}

08010006 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 8010006:	b580      	push	{r7, lr}
 8010008:	b082      	sub	sp, #8
 801000a:	af00      	add	r7, sp, #0
 801000c:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	4618      	mov	r0, r3
 8010012:	f002 fb9d 	bl	8012750 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 8010016:	bf00      	nop
 8010018:	3708      	adds	r7, #8
 801001a:	46bd      	mov	sp, r7
 801001c:	bd80      	pop	{r7, pc}

0801001e <_ZN11TouchGFXHAL10beginFrameEv>:

bool TouchGFXHAL::beginFrame()
{
 801001e:	b580      	push	{r7, lr}
 8010020:	b082      	sub	sp, #8
 8010022:	af00      	add	r7, sp, #0
 8010024:	6078      	str	r0, [r7, #4]
    return TouchGFXGeneratedHAL::beginFrame();
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	4618      	mov	r0, r3
 801002a:	f002 fb9b 	bl	8012764 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>
 801002e:	4603      	mov	r3, r0
}
 8010030:	4618      	mov	r0, r3
 8010032:	3708      	adds	r7, #8
 8010034:	46bd      	mov	sp, r7
 8010036:	bd80      	pop	{r7, pc}

08010038 <_ZN11TouchGFXHAL8endFrameEv>:

void TouchGFXHAL::endFrame()
{
 8010038:	b580      	push	{r7, lr}
 801003a:	b082      	sub	sp, #8
 801003c:	af00      	add	r7, sp, #0
 801003e:	6078      	str	r0, [r7, #4]
    TouchGFXGeneratedHAL::endFrame();
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	4618      	mov	r0, r3
 8010044:	f002 fb9c 	bl	8012780 <_ZN20TouchGFXGeneratedHAL8endFrameEv>
}
 8010048:	bf00      	nop
 801004a:	3708      	adds	r7, #8
 801004c:	46bd      	mov	sp, r7
 801004e:	bd80      	pop	{r7, pc}

08010050 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8010050:	b580      	push	{r7, lr}
 8010052:	b082      	sub	sp, #8
 8010054:	af00      	add	r7, sp, #0
 8010056:	6078      	str	r0, [r7, #4]
 8010058:	4a05      	ldr	r2, [pc, #20]	; (8010070 <_ZN11TouchGFXHALD1Ev+0x20>)
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	601a      	str	r2, [r3, #0]
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	4618      	mov	r0, r3
 8010062:	f7ff ff37 	bl	800fed4 <_ZN20TouchGFXGeneratedHALD1Ev>
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	4618      	mov	r0, r3
 801006a:	3708      	adds	r7, #8
 801006c:	46bd      	mov	sp, r7
 801006e:	bd80      	pop	{r7, pc}
 8010070:	0802a348 	.word	0x0802a348

08010074 <_ZN11TouchGFXHALD0Ev>:
 8010074:	b580      	push	{r7, lr}
 8010076:	b082      	sub	sp, #8
 8010078:	af00      	add	r7, sp, #0
 801007a:	6078      	str	r0, [r7, #4]
 801007c:	6878      	ldr	r0, [r7, #4]
 801007e:	f7ff ffe7 	bl	8010050 <_ZN11TouchGFXHALD1Ev>
 8010082:	217c      	movs	r1, #124	; 0x7c
 8010084:	6878      	ldr	r0, [r7, #4]
 8010086:	f016 fb7e 	bl	8026786 <_ZdlPvj>
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	4618      	mov	r0, r3
 801008e:	3708      	adds	r7, #8
 8010090:	46bd      	mov	sp, r7
 8010092:	bd80      	pop	{r7, pc}

08010094 <_ZN12MJPEGDecoderD1Ev>:
#include <touchgfx/hal/VideoController.hpp>

class MJPEGDecoder
{
public:
    virtual ~MJPEGDecoder()
 8010094:	b480      	push	{r7}
 8010096:	b083      	sub	sp, #12
 8010098:	af00      	add	r7, sp, #0
 801009a:	6078      	str	r0, [r7, #4]
    {
 801009c:	4a04      	ldr	r2, [pc, #16]	; (80100b0 <_ZN12MJPEGDecoderD1Ev+0x1c>)
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	601a      	str	r2, [r3, #0]
    }
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	4618      	mov	r0, r3
 80100a6:	370c      	adds	r7, #12
 80100a8:	46bd      	mov	sp, r7
 80100aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ae:	4770      	bx	lr
 80100b0:	0802a464 	.word	0x0802a464

080100b4 <_ZN12MJPEGDecoderD0Ev>:
    virtual ~MJPEGDecoder()
 80100b4:	b580      	push	{r7, lr}
 80100b6:	b082      	sub	sp, #8
 80100b8:	af00      	add	r7, sp, #0
 80100ba:	6078      	str	r0, [r7, #4]
    }
 80100bc:	6878      	ldr	r0, [r7, #4]
 80100be:	f7ff ffe9 	bl	8010094 <_ZN12MJPEGDecoderD1Ev>
 80100c2:	2104      	movs	r1, #4
 80100c4:	6878      	ldr	r0, [r7, #4]
 80100c6:	f016 fb5e 	bl	8026786 <_ZdlPvj>
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	4618      	mov	r0, r3
 80100ce:	3708      	adds	r7, #8
 80100d0:	46bd      	mov	sp, r7
 80100d2:	bd80      	pop	{r7, pc}

080100d4 <_ZNK20HardwareMJPEGDecoder21getCurrentFrameNumberEv>:
    virtual bool gotoNextFrame();
    //Decode part of the current frame
    virtual bool decodeFrame(const touchgfx::Rect& area, uint8_t* frameBuffer, uint32_t framebuffer_width);
    virtual bool decodeThumbnail(uint32_t frameno, uint8_t* buffer, uint16_t width, uint16_t height);
    virtual void gotoFrame(uint32_t frameno);
    virtual uint32_t getCurrentFrameNumber() const { return frameNumber; }
 80100d4:	b480      	push	{r7}
 80100d6:	b083      	sub	sp, #12
 80100d8:	af00      	add	r7, sp, #0
 80100da:	6078      	str	r0, [r7, #4]
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	695b      	ldr	r3, [r3, #20]
 80100e0:	4618      	mov	r0, r3
 80100e2:	370c      	adds	r7, #12
 80100e4:	46bd      	mov	sp, r7
 80100e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ea:	4770      	bx	lr

080100ec <_ZN20HardwareMJPEGDecoder12getLastErrorEv>:
    virtual void setRepeatVideo(bool repeat);
    virtual void getVideoInfo(touchgfx::VideoInformation* data);

    void setAVIFileBuffer(uint8_t* buffer, uint32_t size) { aviBuffer = buffer, aviBufferLength = size; }

    virtual AVIErrors getLastError() { return lastError; }
 80100ec:	b480      	push	{r7}
 80100ee:	b083      	sub	sp, #12
 80100f0:	af00      	add	r7, sp, #0
 80100f2:	6078      	str	r0, [r7, #4]
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80100fa:	4618      	mov	r0, r3
 80100fc:	370c      	adds	r7, #12
 80100fe:	46bd      	mov	sp, r7
 8010100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010104:	4770      	bx	lr
	...

08010108 <SCB_CleanInvalidateDCache>:
/**
  \brief   Clean & Invalidate D-Cache
  \details Cleans and Invalidates D-Cache
  */
__STATIC_INLINE void SCB_CleanInvalidateDCache (void)
{
 8010108:	b480      	push	{r7}
 801010a:	b085      	sub	sp, #20
 801010c:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 801010e:	4b21      	ldr	r3, [pc, #132]	; (8010194 <SCB_CleanInvalidateDCache+0x8c>)
 8010110:	2200      	movs	r2, #0
 8010112:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8010116:	f3bf 8f4f 	dsb	sy
}
 801011a:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 801011c:	4b1d      	ldr	r3, [pc, #116]	; (8010194 <SCB_CleanInvalidateDCache+0x8c>)
 801011e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010122:	607b      	str	r3, [r7, #4]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	0b5b      	lsrs	r3, r3, #13
 8010128:	f3c3 030e 	ubfx	r3, r3, #0, #15
 801012c:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	08db      	lsrs	r3, r3, #3
 8010132:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010136:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8010138:	68fb      	ldr	r3, [r7, #12]
 801013a:	015a      	lsls	r2, r3, #5
 801013c:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8010140:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8010142:	68ba      	ldr	r2, [r7, #8]
 8010144:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8010146:	4913      	ldr	r1, [pc, #76]	; (8010194 <SCB_CleanInvalidateDCache+0x8c>)
 8010148:	4313      	orrs	r3, r2
 801014a:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 801014e:	68bb      	ldr	r3, [r7, #8]
 8010150:	1e5a      	subs	r2, r3, #1
 8010152:	60ba      	str	r2, [r7, #8]
 8010154:	2b00      	cmp	r3, #0
 8010156:	bf14      	ite	ne
 8010158:	2301      	movne	r3, #1
 801015a:	2300      	moveq	r3, #0
 801015c:	b2db      	uxtb	r3, r3
 801015e:	2b00      	cmp	r3, #0
 8010160:	d000      	beq.n	8010164 <SCB_CleanInvalidateDCache+0x5c>
      do {
 8010162:	e7e9      	b.n	8010138 <SCB_CleanInvalidateDCache+0x30>
    } while(sets-- != 0U);
 8010164:	68fb      	ldr	r3, [r7, #12]
 8010166:	1e5a      	subs	r2, r3, #1
 8010168:	60fa      	str	r2, [r7, #12]
 801016a:	2b00      	cmp	r3, #0
 801016c:	bf14      	ite	ne
 801016e:	2301      	movne	r3, #1
 8010170:	2300      	moveq	r3, #0
 8010172:	b2db      	uxtb	r3, r3
 8010174:	2b00      	cmp	r3, #0
 8010176:	d000      	beq.n	801017a <SCB_CleanInvalidateDCache+0x72>
    do {
 8010178:	e7d9      	b.n	801012e <SCB_CleanInvalidateDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 801017a:	f3bf 8f4f 	dsb	sy
}
 801017e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8010180:	f3bf 8f6f 	isb	sy
}
 8010184:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8010186:	bf00      	nop
 8010188:	3714      	adds	r7, #20
 801018a:	46bd      	mov	sp, r7
 801018c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010190:	4770      	bx	lr
 8010192:	bf00      	nop
 8010194:	e000ed00 	.word	0xe000ed00

08010198 <_ZN12MJPEGDecoderC1Ev>:
class MJPEGDecoder
 8010198:	b480      	push	{r7}
 801019a:	b083      	sub	sp, #12
 801019c:	af00      	add	r7, sp, #0
 801019e:	6078      	str	r0, [r7, #4]
 80101a0:	4a04      	ldr	r2, [pc, #16]	; (80101b4 <_ZN12MJPEGDecoderC1Ev+0x1c>)
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	601a      	str	r2, [r3, #0]
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	4618      	mov	r0, r3
 80101aa:	370c      	adds	r7, #12
 80101ac:	46bd      	mov	sp, r7
 80101ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101b2:	4770      	bx	lr
 80101b4:	0802a464 	.word	0x0802a464

080101b8 <_ZN20HardwareMJPEGDecoderC1Ev>:
  uint32_t LastLineHeight;
  uint32_t MCU_pr_line;
  uint32_t bytes_pr_pixel;
} JPEG_ConvertorParams;

HardwareMJPEGDecoder::HardwareMJPEGDecoder()
 80101b8:	b580      	push	{r7, lr}
 80101ba:	b082      	sub	sp, #8
 80101bc:	af00      	add	r7, sp, #0
 80101be:	6078      	str	r0, [r7, #4]
    : frameNumber(0), currentMovieOffset(0), indexOffset(0), firstFrameOffset(0), lastFrameEnd(0), movieLength(0), movieData(0),
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	4618      	mov	r0, r3
 80101c4:	f7ff ffe8 	bl	8010198 <_ZN12MJPEGDecoderC1Ev>
 80101c8:	4a21      	ldr	r2, [pc, #132]	; (8010250 <_ZN20HardwareMJPEGDecoderC1Ev+0x98>)
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	601a      	str	r2, [r3, #0]
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	2200      	movs	r2, #0
 80101d2:	615a      	str	r2, [r3, #20]
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	2200      	movs	r2, #0
 80101d8:	619a      	str	r2, [r3, #24]
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	2200      	movs	r2, #0
 80101de:	61da      	str	r2, [r3, #28]
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	2200      	movs	r2, #0
 80101e4:	621a      	str	r2, [r3, #32]
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	2200      	movs	r2, #0
 80101ea:	625a      	str	r2, [r3, #36]	; 0x24
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	2200      	movs	r2, #0
 80101f0:	629a      	str	r2, [r3, #40]	; 0x28
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	2200      	movs	r2, #0
 80101f6:	62da      	str	r2, [r3, #44]	; 0x2c
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	2200      	movs	r2, #0
 80101fc:	631a      	str	r2, [r3, #48]	; 0x30
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	2200      	movs	r2, #0
 8010202:	635a      	str	r2, [r3, #52]	; 0x34
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	2200      	movs	r2, #0
 8010208:	639a      	str	r2, [r3, #56]	; 0x38
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	2200      	movs	r2, #0
 801020e:	63da      	str	r2, [r3, #60]	; 0x3c
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	2200      	movs	r2, #0
 8010214:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
{
    //Clear video info
    videoInfo.frame_height = 0;
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	2200      	movs	r2, #0
 801021c:	611a      	str	r2, [r3, #16]
    videoInfo.frame_width = 0;
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	2200      	movs	r2, #0
 8010222:	60da      	str	r2, [r3, #12]
    videoInfo.ms_between_frames = 0;
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	2200      	movs	r2, #0
 8010228:	605a      	str	r2, [r3, #4]
    videoInfo.number_of_frames = 0;
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	2200      	movs	r2, #0
 801022e:	609a      	str	r2, [r3, #8]

    //Init color tables
    TGFX_JPEG_InitColorTables();
 8010230:	f003 fe38 	bl	8013ea4 <TGFX_JPEG_InitColorTables>

    //Create decoding semaphore
    semDecodingDone = SEM_CREATE();
 8010234:	2200      	movs	r2, #0
 8010236:	2100      	movs	r1, #0
 8010238:	2001      	movs	r0, #1
 801023a:	f7f9 fe7f 	bl	8009f3c <osSemaphoreNew>
 801023e:	4603      	mov	r3, r0
 8010240:	4a04      	ldr	r2, [pc, #16]	; (8010254 <_ZN20HardwareMJPEGDecoderC1Ev+0x9c>)
 8010242:	6013      	str	r3, [r2, #0]
}
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	4618      	mov	r0, r3
 8010248:	3708      	adds	r7, #8
 801024a:	46bd      	mov	sp, r7
 801024c:	bd80      	pop	{r7, pc}
 801024e:	bf00      	nop
 8010250:	0802a420 	.word	0x0802a420
 8010254:	2001e1c8 	.word	0x2001e1c8

08010258 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>:

int HardwareMJPEGDecoder::compare(const uint32_t offset, const char* str, uint32_t num)
{
 8010258:	b580      	push	{r7, lr}
 801025a:	b086      	sub	sp, #24
 801025c:	af00      	add	r7, sp, #0
 801025e:	60f8      	str	r0, [r7, #12]
 8010260:	60b9      	str	r1, [r7, #8]
 8010262:	607a      	str	r2, [r7, #4]
 8010264:	603b      	str	r3, [r7, #0]
    const char* src;
    if (reader != 0)
 8010266:	68fb      	ldr	r3, [r7, #12]
 8010268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801026a:	2b00      	cmp	r3, #0
 801026c:	d008      	beq.n	8010280 <_ZN20HardwareMJPEGDecoder7compareEmPKcm+0x28>
    {
        // Assuming data is in buffer!
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
 801026e:	68fb      	ldr	r3, [r7, #12]
 8010270:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010272:	68fb      	ldr	r3, [r7, #12]
 8010274:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010276:	68b9      	ldr	r1, [r7, #8]
 8010278:	1acb      	subs	r3, r1, r3
 801027a:	4413      	add	r3, r2
 801027c:	617b      	str	r3, [r7, #20]
 801027e:	e004      	b.n	801028a <_ZN20HardwareMJPEGDecoder7compareEmPKcm+0x32>
    }
    else
    {
        src = (const char*)movieData + offset;
 8010280:	68fb      	ldr	r3, [r7, #12]
 8010282:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010284:	68bb      	ldr	r3, [r7, #8]
 8010286:	4413      	add	r3, r2
 8010288:	617b      	str	r3, [r7, #20]
    }
    return strncmp(src, str, num);
 801028a:	683a      	ldr	r2, [r7, #0]
 801028c:	6879      	ldr	r1, [r7, #4]
 801028e:	6978      	ldr	r0, [r7, #20]
 8010290:	f016 ff5e 	bl	8027150 <strncmp>
 8010294:	4603      	mov	r3, r0
}
 8010296:	4618      	mov	r0, r3
 8010298:	3718      	adds	r7, #24
 801029a:	46bd      	mov	sp, r7
 801029c:	bd80      	pop	{r7, pc}

0801029e <_ZN20HardwareMJPEGDecoder6getU32Em>:

inline uint32_t HardwareMJPEGDecoder::getU32(const uint32_t offset)
{
 801029e:	b480      	push	{r7}
 80102a0:	b085      	sub	sp, #20
 80102a2:	af00      	add	r7, sp, #0
 80102a4:	6078      	str	r0, [r7, #4]
 80102a6:	6039      	str	r1, [r7, #0]
    if (reader != 0)
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	d024      	beq.n	80102fa <_ZN20HardwareMJPEGDecoder6getU32Em+0x5c>
    {
        // Assuming data is in buffer!
        const uint32_t index = offset - aviBufferStartOffset;
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80102b4:	683a      	ldr	r2, [r7, #0]
 80102b6:	1ad3      	subs	r3, r2, r3
 80102b8:	60bb      	str	r3, [r7, #8]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80102be:	68bb      	ldr	r3, [r7, #8]
 80102c0:	4413      	add	r3, r2
 80102c2:	781b      	ldrb	r3, [r3, #0]
 80102c4:	4619      	mov	r1, r3
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80102ca:	68bb      	ldr	r3, [r7, #8]
 80102cc:	3301      	adds	r3, #1
 80102ce:	4413      	add	r3, r2
 80102d0:	781b      	ldrb	r3, [r3, #0]
 80102d2:	021b      	lsls	r3, r3, #8
 80102d4:	ea41 0203 	orr.w	r2, r1, r3
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80102dc:	68bb      	ldr	r3, [r7, #8]
 80102de:	3302      	adds	r3, #2
 80102e0:	440b      	add	r3, r1
 80102e2:	781b      	ldrb	r3, [r3, #0]
 80102e4:	041b      	lsls	r3, r3, #16
 80102e6:	431a      	orrs	r2, r3
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80102ec:	68bb      	ldr	r3, [r7, #8]
 80102ee:	3303      	adds	r3, #3
 80102f0:	440b      	add	r3, r1
 80102f2:	781b      	ldrb	r3, [r3, #0]
 80102f4:	061b      	lsls	r3, r3, #24
 80102f6:	4313      	orrs	r3, r2
 80102f8:	e016      	b.n	8010328 <_ZN20HardwareMJPEGDecoder6getU32Em+0x8a>
    }
    else
    {
        const uint8_t* const d = movieData + offset;
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80102fe:	683b      	ldr	r3, [r7, #0]
 8010300:	4413      	add	r3, r2
 8010302:	60fb      	str	r3, [r7, #12]
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
 8010304:	68fb      	ldr	r3, [r7, #12]
 8010306:	781b      	ldrb	r3, [r3, #0]
 8010308:	461a      	mov	r2, r3
 801030a:	68fb      	ldr	r3, [r7, #12]
 801030c:	3301      	adds	r3, #1
 801030e:	781b      	ldrb	r3, [r3, #0]
 8010310:	021b      	lsls	r3, r3, #8
 8010312:	431a      	orrs	r2, r3
 8010314:	68fb      	ldr	r3, [r7, #12]
 8010316:	3302      	adds	r3, #2
 8010318:	781b      	ldrb	r3, [r3, #0]
 801031a:	041b      	lsls	r3, r3, #16
 801031c:	431a      	orrs	r2, r3
 801031e:	68fb      	ldr	r3, [r7, #12]
 8010320:	3303      	adds	r3, #3
 8010322:	781b      	ldrb	r3, [r3, #0]
 8010324:	061b      	lsls	r3, r3, #24
 8010326:	4313      	orrs	r3, r2
    }
}
 8010328:	4618      	mov	r0, r3
 801032a:	3714      	adds	r7, #20
 801032c:	46bd      	mov	sp, r7
 801032e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010332:	4770      	bx	lr

08010334 <_ZN20HardwareMJPEGDecoder6getU16Em>:

inline uint32_t HardwareMJPEGDecoder::getU16(const uint32_t offset)
{
 8010334:	b480      	push	{r7}
 8010336:	b085      	sub	sp, #20
 8010338:	af00      	add	r7, sp, #0
 801033a:	6078      	str	r0, [r7, #4]
 801033c:	6039      	str	r1, [r7, #0]
    if (reader != 0)
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010342:	2b00      	cmp	r3, #0
 8010344:	d013      	beq.n	801036e <_ZN20HardwareMJPEGDecoder6getU16Em+0x3a>
    {
        // Assuming data is in buffer!
        const uint32_t index = offset - aviBufferStartOffset;
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801034a:	683a      	ldr	r2, [r7, #0]
 801034c:	1ad3      	subs	r3, r2, r3
 801034e:	60bb      	str	r3, [r7, #8]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8);
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010354:	68bb      	ldr	r3, [r7, #8]
 8010356:	4413      	add	r3, r2
 8010358:	781b      	ldrb	r3, [r3, #0]
 801035a:	4619      	mov	r1, r3
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010360:	68bb      	ldr	r3, [r7, #8]
 8010362:	3301      	adds	r3, #1
 8010364:	4413      	add	r3, r2
 8010366:	781b      	ldrb	r3, [r3, #0]
 8010368:	021b      	lsls	r3, r3, #8
 801036a:	430b      	orrs	r3, r1
 801036c:	e00c      	b.n	8010388 <_ZN20HardwareMJPEGDecoder6getU16Em+0x54>
    }
    else
    {
        const uint8_t* const d = movieData + offset;
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010372:	683b      	ldr	r3, [r7, #0]
 8010374:	4413      	add	r3, r2
 8010376:	60fb      	str	r3, [r7, #12]
        return d[0] | (d[1] << 8);
 8010378:	68fb      	ldr	r3, [r7, #12]
 801037a:	781b      	ldrb	r3, [r3, #0]
 801037c:	461a      	mov	r2, r3
 801037e:	68fb      	ldr	r3, [r7, #12]
 8010380:	3301      	adds	r3, #1
 8010382:	781b      	ldrb	r3, [r3, #0]
 8010384:	021b      	lsls	r3, r3, #8
 8010386:	4313      	orrs	r3, r2
    }
}
 8010388:	4618      	mov	r0, r3
 801038a:	3714      	adds	r7, #20
 801038c:	46bd      	mov	sp, r7
 801038e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010392:	4770      	bx	lr

08010394 <_ZN20HardwareMJPEGDecoder8readDataEmm>:

const uint8_t* HardwareMJPEGDecoder::readData(uint32_t offset, uint32_t length)
{
 8010394:	b580      	push	{r7, lr}
 8010396:	b084      	sub	sp, #16
 8010398:	af00      	add	r7, sp, #0
 801039a:	60f8      	str	r0, [r7, #12]
 801039c:	60b9      	str	r1, [r7, #8]
 801039e:	607a      	str	r2, [r7, #4]
    if (reader != 0)
 80103a0:	68fb      	ldr	r3, [r7, #12]
 80103a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80103a4:	2b00      	cmp	r3, #0
 80103a6:	d033      	beq.n	8010410 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x7c>
    {
        if (length > aviBufferLength)
 80103a8:	68fb      	ldr	r3, [r7, #12]
 80103aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80103ac:	687a      	ldr	r2, [r7, #4]
 80103ae:	429a      	cmp	r2, r3
 80103b0:	d909      	bls.n	80103c6 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x32>
        {
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
 80103b2:	68fb      	ldr	r3, [r7, #12]
 80103b4:	2209      	movs	r2, #9
 80103b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
            assert(!"Buffer to small");
 80103ba:	4b19      	ldr	r3, [pc, #100]	; (8010420 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x8c>)
 80103bc:	4a19      	ldr	r2, [pc, #100]	; (8010424 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x90>)
 80103be:	21a7      	movs	r1, #167	; 0xa7
 80103c0:	4819      	ldr	r0, [pc, #100]	; (8010428 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x94>)
 80103c2:	f016 fa0f 	bl	80267e4 <__assert_func>
        }

        reader->seek(offset);
 80103c6:	68fb      	ldr	r3, [r7, #12]
 80103c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80103ca:	68fb      	ldr	r3, [r7, #12]
 80103cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80103ce:	681b      	ldr	r3, [r3, #0]
 80103d0:	330c      	adds	r3, #12
 80103d2:	681b      	ldr	r3, [r3, #0]
 80103d4:	68b9      	ldr	r1, [r7, #8]
 80103d6:	4610      	mov	r0, r2
 80103d8:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
 80103da:	68fb      	ldr	r3, [r7, #12]
 80103dc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80103de:	68fb      	ldr	r3, [r7, #12]
 80103e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80103e2:	681b      	ldr	r3, [r3, #0]
 80103e4:	3310      	adds	r3, #16
 80103e6:	681b      	ldr	r3, [r3, #0]
 80103e8:	68fa      	ldr	r2, [r7, #12]
 80103ea:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80103ec:	687a      	ldr	r2, [r7, #4]
 80103ee:	4798      	blx	r3
 80103f0:	4603      	mov	r3, r0
 80103f2:	f083 0301 	eor.w	r3, r3, #1
 80103f6:	b2db      	uxtb	r3, r3
 80103f8:	2b00      	cmp	r3, #0
 80103fa:	d003      	beq.n	8010404 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x70>
        {
            lastError = AVI_ERROR_EOF_REACHED;
 80103fc:	68fb      	ldr	r3, [r7, #12]
 80103fe:	220d      	movs	r2, #13
 8010400:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        }

        aviBufferStartOffset = offset;
 8010404:	68fb      	ldr	r3, [r7, #12]
 8010406:	68ba      	ldr	r2, [r7, #8]
 8010408:	63da      	str	r2, [r3, #60]	; 0x3c
        return aviBuffer;
 801040a:	68fb      	ldr	r3, [r7, #12]
 801040c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801040e:	e003      	b.n	8010418 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x84>
    }

    return movieData + offset;
 8010410:	68fb      	ldr	r3, [r7, #12]
 8010412:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010414:	68bb      	ldr	r3, [r7, #8]
 8010416:	4413      	add	r3, r2
}
 8010418:	4618      	mov	r0, r3
 801041a:	3710      	adds	r7, #16
 801041c:	46bd      	mov	sp, r7
 801041e:	bd80      	pop	{r7, pc}
 8010420:	080280fc 	.word	0x080280fc
 8010424:	08028110 	.word	0x08028110
 8010428:	08028154 	.word	0x08028154

0801042c <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm>:

bool HardwareMJPEGDecoder::decodeNextFrame(uint8_t* buffer, uint16_t buffer_width, uint16_t buffer_height, uint32_t buffer_stride)
{
 801042c:	b580      	push	{r7, lr}
 801042e:	b08e      	sub	sp, #56	; 0x38
 8010430:	af04      	add	r7, sp, #16
 8010432:	60f8      	str	r0, [r7, #12]
 8010434:	60b9      	str	r1, [r7, #8]
 8010436:	4611      	mov	r1, r2
 8010438:	461a      	mov	r2, r3
 801043a:	460b      	mov	r3, r1
 801043c:	80fb      	strh	r3, [r7, #6]
 801043e:	4613      	mov	r3, r2
 8010440:	80bb      	strh	r3, [r7, #4]
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 8010442:	68fb      	ldr	r3, [r7, #12]
 8010444:	695b      	ldr	r3, [r3, #20]
 8010446:	2b00      	cmp	r3, #0
 8010448:	d105      	bne.n	8010456 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x2a>
 801044a:	4b4e      	ldr	r3, [pc, #312]	; (8010584 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x158>)
 801044c:	4a4e      	ldr	r2, [pc, #312]	; (8010588 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x15c>)
 801044e:	21b9      	movs	r1, #185	; 0xb9
 8010450:	484e      	ldr	r0, [pc, #312]	; (801058c <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x160>)
 8010452:	f016 f9c7 	bl	80267e4 <__assert_func>

    //find next frame and decode it
    readData(currentMovieOffset, 8);
 8010456:	68fb      	ldr	r3, [r7, #12]
 8010458:	699b      	ldr	r3, [r3, #24]
 801045a:	2208      	movs	r2, #8
 801045c:	4619      	mov	r1, r3
 801045e:	68f8      	ldr	r0, [r7, #12]
 8010460:	f7ff ff98 	bl	8010394 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    uint32_t streamNo  = getU16(currentMovieOffset);
 8010464:	68fb      	ldr	r3, [r7, #12]
 8010466:	699b      	ldr	r3, [r3, #24]
 8010468:	4619      	mov	r1, r3
 801046a:	68f8      	ldr	r0, [r7, #12]
 801046c:	f7ff ff62 	bl	8010334 <_ZN20HardwareMJPEGDecoder6getU16Em>
 8010470:	6238      	str	r0, [r7, #32]
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 8010472:	68fb      	ldr	r3, [r7, #12]
 8010474:	699b      	ldr	r3, [r3, #24]
 8010476:	3302      	adds	r3, #2
 8010478:	4619      	mov	r1, r3
 801047a:	68f8      	ldr	r0, [r7, #12]
 801047c:	f7ff ff5a 	bl	8010334 <_ZN20HardwareMJPEGDecoder6getU16Em>
 8010480:	61f8      	str	r0, [r7, #28]
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8010482:	68fb      	ldr	r3, [r7, #12]
 8010484:	699b      	ldr	r3, [r3, #24]
 8010486:	3304      	adds	r3, #4
 8010488:	4619      	mov	r1, r3
 801048a:	68f8      	ldr	r0, [r7, #12]
 801048c:	f7ff ff07 	bl	801029e <_ZN20HardwareMJPEGDecoder6getU32Em>
 8010490:	61b8      	str	r0, [r7, #24]

    const uint16_t STREAM0 = 0x3030;
 8010492:	f243 0330 	movw	r3, #12336	; 0x3030
 8010496:	82fb      	strh	r3, [r7, #22]
    const uint16_t TYPEDC  = 0x6364;
 8010498:	f246 3364 	movw	r3, #25444	; 0x6364
 801049c:	82bb      	strh	r3, [r7, #20]

    bool isCurrentFrameLast;
    //play frame if we have it all
    if (currentMovieOffset + 8 + chunkSize < movieLength)
 801049e:	68fb      	ldr	r3, [r7, #12]
 80104a0:	699a      	ldr	r2, [r3, #24]
 80104a2:	69bb      	ldr	r3, [r7, #24]
 80104a4:	4413      	add	r3, r2
 80104a6:	f103 0208 	add.w	r2, r3, #8
 80104aa:	68fb      	ldr	r3, [r7, #12]
 80104ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80104ae:	429a      	cmp	r2, r3
 80104b0:	d255      	bcs.n	801055e <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x132>
    {
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 80104b2:	6a3b      	ldr	r3, [r7, #32]
 80104b4:	f243 0230 	movw	r2, #12336	; 0x3030
 80104b8:	4293      	cmp	r3, r2
 80104ba:	d126      	bne.n	801050a <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xde>
 80104bc:	69fb      	ldr	r3, [r7, #28]
 80104be:	f246 3264 	movw	r2, #25444	; 0x6364
 80104c2:	4293      	cmp	r3, r2
 80104c4:	d121      	bne.n	801050a <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xde>
 80104c6:	69bb      	ldr	r3, [r7, #24]
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	d01e      	beq.n	801050a <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xde>
        {
            currentMovieOffset += 8;
 80104cc:	68fb      	ldr	r3, [r7, #12]
 80104ce:	699b      	ldr	r3, [r3, #24]
 80104d0:	f103 0208 	add.w	r2, r3, #8
 80104d4:	68fb      	ldr	r3, [r7, #12]
 80104d6:	619a      	str	r2, [r3, #24]
            //decode frame
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 80104d8:	68fb      	ldr	r3, [r7, #12]
 80104da:	699b      	ldr	r3, [r3, #24]
 80104dc:	69ba      	ldr	r2, [r7, #24]
 80104de:	4619      	mov	r1, r3
 80104e0:	68f8      	ldr	r0, [r7, #12]
 80104e2:	f7ff ff57 	bl	8010394 <_ZN20HardwareMJPEGDecoder8readDataEmm>
 80104e6:	6138      	str	r0, [r7, #16]
            decodeMJPEGFrame(chunk, chunkSize, buffer, buffer_width, buffer_height, buffer_stride);
 80104e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104ea:	9302      	str	r3, [sp, #8]
 80104ec:	88bb      	ldrh	r3, [r7, #4]
 80104ee:	9301      	str	r3, [sp, #4]
 80104f0:	88fb      	ldrh	r3, [r7, #6]
 80104f2:	9300      	str	r3, [sp, #0]
 80104f4:	68bb      	ldr	r3, [r7, #8]
 80104f6:	69ba      	ldr	r2, [r7, #24]
 80104f8:	6939      	ldr	r1, [r7, #16]
 80104fa:	68f8      	ldr	r0, [r7, #12]
 80104fc:	f000 fa8e 	bl	8010a1c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>
            frameNumber++;
 8010500:	68fb      	ldr	r3, [r7, #12]
 8010502:	695b      	ldr	r3, [r3, #20]
 8010504:	1c5a      	adds	r2, r3, #1
 8010506:	68fb      	ldr	r3, [r7, #12]
 8010508:	615a      	str	r2, [r3, #20]
        }

        isCurrentFrameLast = false;
 801050a:	2300      	movs	r3, #0
 801050c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        // Advance to next frame
        currentMovieOffset += chunkSize;
 8010510:	68fb      	ldr	r3, [r7, #12]
 8010512:	699a      	ldr	r2, [r3, #24]
 8010514:	69bb      	ldr	r3, [r7, #24]
 8010516:	441a      	add	r2, r3
 8010518:	68fb      	ldr	r3, [r7, #12]
 801051a:	619a      	str	r2, [r3, #24]
        if (chunkSize == 0) // Empty frame - Skip
 801051c:	69bb      	ldr	r3, [r7, #24]
 801051e:	2b00      	cmp	r3, #0
 8010520:	d105      	bne.n	801052e <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x102>
        {
          currentMovieOffset += 8;
 8010522:	68fb      	ldr	r3, [r7, #12]
 8010524:	699b      	ldr	r3, [r3, #24]
 8010526:	f103 0208 	add.w	r2, r3, #8
 801052a:	68fb      	ldr	r3, [r7, #12]
 801052c:	619a      	str	r2, [r3, #24]
        }
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 801052e:	68fb      	ldr	r3, [r7, #12]
 8010530:	699b      	ldr	r3, [r3, #24]
 8010532:	3301      	adds	r3, #1
 8010534:	f023 0201 	bic.w	r2, r3, #1
 8010538:	68fb      	ldr	r3, [r7, #12]
 801053a:	619a      	str	r2, [r3, #24]

        if (currentMovieOffset == lastFrameEnd)
 801053c:	68fb      	ldr	r3, [r7, #12]
 801053e:	699a      	ldr	r2, [r3, #24]
 8010540:	68fb      	ldr	r3, [r7, #12]
 8010542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010544:	429a      	cmp	r2, r3
 8010546:	d114      	bne.n	8010572 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x146>
        {
            frameNumber = 1;
 8010548:	68fb      	ldr	r3, [r7, #12]
 801054a:	2201      	movs	r2, #1
 801054c:	615a      	str	r2, [r3, #20]
            currentMovieOffset = firstFrameOffset; //start over
 801054e:	68fb      	ldr	r3, [r7, #12]
 8010550:	6a1a      	ldr	r2, [r3, #32]
 8010552:	68fb      	ldr	r3, [r7, #12]
 8010554:	619a      	str	r2, [r3, #24]
            isCurrentFrameLast = true;
 8010556:	2301      	movs	r3, #1
 8010558:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801055c:	e009      	b.n	8010572 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x146>
        }
    }
    else
    {
        frameNumber = 1;
 801055e:	68fb      	ldr	r3, [r7, #12]
 8010560:	2201      	movs	r2, #1
 8010562:	615a      	str	r2, [r3, #20]
        currentMovieOffset = firstFrameOffset; //start over
 8010564:	68fb      	ldr	r3, [r7, #12]
 8010566:	6a1a      	ldr	r2, [r3, #32]
 8010568:	68fb      	ldr	r3, [r7, #12]
 801056a:	619a      	str	r2, [r3, #24]
        isCurrentFrameLast = true;
 801056c:	2301      	movs	r3, #1
 801056e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    return !isCurrentFrameLast;
 8010572:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010576:	f083 0301 	eor.w	r3, r3, #1
 801057a:	b2db      	uxtb	r3, r3
}
 801057c:	4618      	mov	r0, r3
 801057e:	3728      	adds	r7, #40	; 0x28
 8010580:	46bd      	mov	sp, r7
 8010582:	bd80      	pop	{r7, pc}
 8010584:	0802818c 	.word	0x0802818c
 8010588:	080281d8 	.word	0x080281d8
 801058c:	08028154 	.word	0x08028154

08010590 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv>:

bool HardwareMJPEGDecoder::gotoNextFrame()
{
 8010590:	b580      	push	{r7, lr}
 8010592:	b086      	sub	sp, #24
 8010594:	af00      	add	r7, sp, #0
 8010596:	6078      	str	r0, [r7, #4]
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	695b      	ldr	r3, [r3, #20]
 801059c:	2b00      	cmp	r3, #0
 801059e:	d105      	bne.n	80105ac <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x1c>
 80105a0:	4b37      	ldr	r3, [pc, #220]	; (8010680 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0xf0>)
 80105a2:	4a38      	ldr	r2, [pc, #224]	; (8010684 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0xf4>)
 80105a4:	21ed      	movs	r1, #237	; 0xed
 80105a6:	4838      	ldr	r0, [pc, #224]	; (8010688 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0xf8>)
 80105a8:	f016 f91c 	bl	80267e4 <__assert_func>

    readData(currentMovieOffset, 8);
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	699b      	ldr	r3, [r3, #24]
 80105b0:	2208      	movs	r2, #8
 80105b2:	4619      	mov	r1, r3
 80105b4:	6878      	ldr	r0, [r7, #4]
 80105b6:	f7ff feed 	bl	8010394 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	699b      	ldr	r3, [r3, #24]
 80105be:	3304      	adds	r3, #4
 80105c0:	4619      	mov	r1, r3
 80105c2:	6878      	ldr	r0, [r7, #4]
 80105c4:	f7ff fe6b 	bl	801029e <_ZN20HardwareMJPEGDecoder6getU32Em>
 80105c8:	6178      	str	r0, [r7, #20]

    //increment until next video frame
    while (currentMovieOffset + 8 + chunkSize < movieLength)
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	699a      	ldr	r2, [r3, #24]
 80105ce:	697b      	ldr	r3, [r7, #20]
 80105d0:	4413      	add	r3, r2
 80105d2:	f103 0208 	add.w	r2, r3, #8
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80105da:	429a      	cmp	r2, r3
 80105dc:	d243      	bcs.n	8010666 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0xd6>
    {
        //increment one frame
        currentMovieOffset += chunkSize + 8;
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	699a      	ldr	r2, [r3, #24]
 80105e2:	697b      	ldr	r3, [r7, #20]
 80105e4:	4413      	add	r3, r2
 80105e6:	f103 0208 	add.w	r2, r3, #8
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	619a      	str	r2, [r3, #24]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	699b      	ldr	r3, [r3, #24]
 80105f2:	3301      	adds	r3, #1
 80105f4:	f023 0201 	bic.w	r2, r3, #1
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	619a      	str	r2, [r3, #24]
        frameNumber++;
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	695b      	ldr	r3, [r3, #20]
 8010600:	1c5a      	adds	r2, r3, #1
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	615a      	str	r2, [r3, #20]

        //next chunk
        readData(currentMovieOffset, 8);
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	699b      	ldr	r3, [r3, #24]
 801060a:	2208      	movs	r2, #8
 801060c:	4619      	mov	r1, r3
 801060e:	6878      	ldr	r0, [r7, #4]
 8010610:	f7ff fec0 	bl	8010394 <_ZN20HardwareMJPEGDecoder8readDataEmm>
        //check it is a video frame
        uint32_t streamNo  = getU16(currentMovieOffset);
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	699b      	ldr	r3, [r3, #24]
 8010618:	4619      	mov	r1, r3
 801061a:	6878      	ldr	r0, [r7, #4]
 801061c:	f7ff fe8a 	bl	8010334 <_ZN20HardwareMJPEGDecoder6getU16Em>
 8010620:	6138      	str	r0, [r7, #16]
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	699b      	ldr	r3, [r3, #24]
 8010626:	3302      	adds	r3, #2
 8010628:	4619      	mov	r1, r3
 801062a:	6878      	ldr	r0, [r7, #4]
 801062c:	f7ff fe82 	bl	8010334 <_ZN20HardwareMJPEGDecoder6getU16Em>
 8010630:	60f8      	str	r0, [r7, #12]
        chunkSize = getU32(currentMovieOffset + 4);
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	699b      	ldr	r3, [r3, #24]
 8010636:	3304      	adds	r3, #4
 8010638:	4619      	mov	r1, r3
 801063a:	6878      	ldr	r0, [r7, #4]
 801063c:	f7ff fe2f 	bl	801029e <_ZN20HardwareMJPEGDecoder6getU32Em>
 8010640:	6178      	str	r0, [r7, #20]
        const uint16_t STREAM0 = 0x3030;
 8010642:	f243 0330 	movw	r3, #12336	; 0x3030
 8010646:	817b      	strh	r3, [r7, #10]
        const uint16_t TYPEDC  = 0x6364;
 8010648:	f246 3364 	movw	r3, #25444	; 0x6364
 801064c:	813b      	strh	r3, [r7, #8]

        if (streamNo == STREAM0 && chunkType == TYPEDC)
 801064e:	693b      	ldr	r3, [r7, #16]
 8010650:	f243 0230 	movw	r2, #12336	; 0x3030
 8010654:	4293      	cmp	r3, r2
 8010656:	d1b8      	bne.n	80105ca <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x3a>
 8010658:	68fb      	ldr	r3, [r7, #12]
 801065a:	f246 3264 	movw	r2, #25444	; 0x6364
 801065e:	4293      	cmp	r3, r2
 8010660:	d1b3      	bne.n	80105ca <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x3a>
        {
            // Found next frame
            return true;
 8010662:	2301      	movs	r3, #1
 8010664:	e007      	b.n	8010676 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0xe6>
        }
    }

    //skip back to first frame
    frameNumber = 1;
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	2201      	movs	r2, #1
 801066a:	615a      	str	r2, [r3, #20]
    currentMovieOffset = firstFrameOffset; //start over
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	6a1a      	ldr	r2, [r3, #32]
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	619a      	str	r2, [r3, #24]
    return false;
 8010674:	2300      	movs	r3, #0
}
 8010676:	4618      	mov	r0, r3
 8010678:	3718      	adds	r7, #24
 801067a:	46bd      	mov	sp, r7
 801067c:	bd80      	pop	{r7, pc}
 801067e:	bf00      	nop
 8010680:	0802818c 	.word	0x0802818c
 8010684:	08028234 	.word	0x08028234
 8010688:	08028154 	.word	0x08028154

0801068c <_ZN20HardwareMJPEGDecoder12setVideoDataEPKhm>:

void HardwareMJPEGDecoder::setVideoData(const uint8_t* movie, const uint32_t length)
{
 801068c:	b580      	push	{r7, lr}
 801068e:	b084      	sub	sp, #16
 8010690:	af00      	add	r7, sp, #0
 8010692:	60f8      	str	r0, [r7, #12]
 8010694:	60b9      	str	r1, [r7, #8]
 8010696:	607a      	str	r2, [r7, #4]
    movieData = movie;
 8010698:	68fb      	ldr	r3, [r7, #12]
 801069a:	68ba      	ldr	r2, [r7, #8]
 801069c:	62da      	str	r2, [r3, #44]	; 0x2c
    movieLength = length;
 801069e:	68fb      	ldr	r3, [r7, #12]
 80106a0:	687a      	ldr	r2, [r7, #4]
 80106a2:	629a      	str	r2, [r3, #40]	; 0x28
    reader = 0; //not using reader
 80106a4:	68fb      	ldr	r3, [r7, #12]
 80106a6:	2200      	movs	r2, #0
 80106a8:	631a      	str	r2, [r3, #48]	; 0x30

    readVideoHeader();
 80106aa:	68f8      	ldr	r0, [r7, #12]
 80106ac:	f000 f834 	bl	8010718 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>
}
 80106b0:	bf00      	nop
 80106b2:	3710      	adds	r7, #16
 80106b4:	46bd      	mov	sp, r7
 80106b6:	bd80      	pop	{r7, pc}

080106b8 <_ZN20HardwareMJPEGDecoder12setVideoDataERN8touchgfx15VideoDataReaderE>:

void HardwareMJPEGDecoder::setVideoData(touchgfx::VideoDataReader& reader)
{
 80106b8:	b580      	push	{r7, lr}
 80106ba:	b082      	sub	sp, #8
 80106bc:	af00      	add	r7, sp, #0
 80106be:	6078      	str	r0, [r7, #4]
 80106c0:	6039      	str	r1, [r7, #0]
    this->reader = &reader;
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	683a      	ldr	r2, [r7, #0]
 80106c6:	631a      	str	r2, [r3, #48]	; 0x30
    movieData = 0;
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	2200      	movs	r2, #0
 80106cc:	62da      	str	r2, [r3, #44]	; 0x2c
    movieLength = reader.getDataLength();
 80106ce:	683b      	ldr	r3, [r7, #0]
 80106d0:	681b      	ldr	r3, [r3, #0]
 80106d2:	3308      	adds	r3, #8
 80106d4:	681b      	ldr	r3, [r3, #0]
 80106d6:	6838      	ldr	r0, [r7, #0]
 80106d8:	4798      	blx	r3
 80106da:	4602      	mov	r2, r0
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	629a      	str	r2, [r3, #40]	; 0x28

    readVideoHeader();
 80106e0:	6878      	ldr	r0, [r7, #4]
 80106e2:	f000 f819 	bl	8010718 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>
}
 80106e6:	bf00      	nop
 80106e8:	3708      	adds	r7, #8
 80106ea:	46bd      	mov	sp, r7
 80106ec:	bd80      	pop	{r7, pc}

080106ee <_ZN20HardwareMJPEGDecoder8hasVideoEv>:

bool HardwareMJPEGDecoder::hasVideo()
{
 80106ee:	b480      	push	{r7}
 80106f0:	b083      	sub	sp, #12
 80106f2:	af00      	add	r7, sp, #0
 80106f4:	6078      	str	r0, [r7, #4]
    return (reader != 0) || (movieData != 0);
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80106fa:	2b00      	cmp	r3, #0
 80106fc:	d103      	bne.n	8010706 <_ZN20HardwareMJPEGDecoder8hasVideoEv+0x18>
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010702:	2b00      	cmp	r3, #0
 8010704:	d001      	beq.n	801070a <_ZN20HardwareMJPEGDecoder8hasVideoEv+0x1c>
 8010706:	2301      	movs	r3, #1
 8010708:	e000      	b.n	801070c <_ZN20HardwareMJPEGDecoder8hasVideoEv+0x1e>
 801070a:	2300      	movs	r3, #0
}
 801070c:	4618      	mov	r0, r3
 801070e:	370c      	adds	r7, #12
 8010710:	46bd      	mov	sp, r7
 8010712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010716:	4770      	bx	lr

08010718 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>:

void HardwareMJPEGDecoder::readVideoHeader()
{
 8010718:	b580      	push	{r7, lr}
 801071a:	b08a      	sub	sp, #40	; 0x28
 801071c:	af00      	add	r7, sp, #0
 801071e:	6078      	str	r0, [r7, #4]
    // Start from the start
    currentMovieOffset = 0;
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	2200      	movs	r2, #0
 8010724:	619a      	str	r2, [r3, #24]
    lastError = AVI_NO_ERROR;
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	2200      	movs	r2, #0
 801072a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    // Make header available in buffer
    readData(0, 72);
 801072e:	2248      	movs	r2, #72	; 0x48
 8010730:	2100      	movs	r1, #0
 8010732:	6878      	ldr	r0, [r7, #4]
 8010734:	f7ff fe2e 	bl	8010394 <_ZN20HardwareMJPEGDecoder8readDataEmm>

    // Decode the movie header to find first frame
    // Must be RIFF file
    if (compare(currentMovieOffset, "RIFF", 4))
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	6999      	ldr	r1, [r3, #24]
 801073c:	2304      	movs	r3, #4
 801073e:	4aa5      	ldr	r2, [pc, #660]	; (80109d4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2bc>)
 8010740:	6878      	ldr	r0, [r7, #4]
 8010742:	f7ff fd89 	bl	8010258 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8010746:	4603      	mov	r3, r0
 8010748:	2b00      	cmp	r3, #0
 801074a:	bf14      	ite	ne
 801074c:	2301      	movne	r3, #1
 801074e:	2300      	moveq	r3, #0
 8010750:	b2db      	uxtb	r3, r3
 8010752:	2b00      	cmp	r3, #0
 8010754:	d00a      	beq.n	801076c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x54>
    {
        lastError = AVI_ERROR_NOT_RIFF;
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	2203      	movs	r2, #3
 801075a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        assert(!"RIFF header not found");
 801075e:	4b9e      	ldr	r3, [pc, #632]	; (80109d8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c0>)
 8010760:	4a9e      	ldr	r2, [pc, #632]	; (80109dc <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c4>)
 8010762:	f240 1135 	movw	r1, #309	; 0x135
 8010766:	489e      	ldr	r0, [pc, #632]	; (80109e0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c8>)
 8010768:	f016 f83c 	bl	80267e4 <__assert_func>
    }

    //skip fourcc and length
    currentMovieOffset += 8;
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	699b      	ldr	r3, [r3, #24]
 8010770:	f103 0208 	add.w	r2, r3, #8
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	619a      	str	r2, [r3, #24]
    if (compare(currentMovieOffset, "AVI ", 4))
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	6999      	ldr	r1, [r3, #24]
 801077c:	2304      	movs	r3, #4
 801077e:	4a99      	ldr	r2, [pc, #612]	; (80109e4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2cc>)
 8010780:	6878      	ldr	r0, [r7, #4]
 8010782:	f7ff fd69 	bl	8010258 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8010786:	4603      	mov	r3, r0
 8010788:	2b00      	cmp	r3, #0
 801078a:	bf14      	ite	ne
 801078c:	2301      	movne	r3, #1
 801078e:	2300      	moveq	r3, #0
 8010790:	b2db      	uxtb	r3, r3
 8010792:	2b00      	cmp	r3, #0
 8010794:	d00a      	beq.n	80107ac <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x94>
    {
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	2204      	movs	r2, #4
 801079a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        assert(!"AVI header not found");
 801079e:	4b92      	ldr	r3, [pc, #584]	; (80109e8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2d0>)
 80107a0:	4a8e      	ldr	r2, [pc, #568]	; (80109dc <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c4>)
 80107a2:	f240 113d 	movw	r1, #317	; 0x13d
 80107a6:	488e      	ldr	r0, [pc, #568]	; (80109e0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c8>)
 80107a8:	f016 f81c 	bl	80267e4 <__assert_func>
    }

    currentMovieOffset += 4;
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	699b      	ldr	r3, [r3, #24]
 80107b0:	1d1a      	adds	r2, r3, #4
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	619a      	str	r2, [r3, #24]
    if (compare(currentMovieOffset, "LIST", 4))
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	6999      	ldr	r1, [r3, #24]
 80107ba:	2304      	movs	r3, #4
 80107bc:	4a8b      	ldr	r2, [pc, #556]	; (80109ec <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2d4>)
 80107be:	6878      	ldr	r0, [r7, #4]
 80107c0:	f7ff fd4a 	bl	8010258 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 80107c4:	4603      	mov	r3, r0
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	bf14      	ite	ne
 80107ca:	2301      	movne	r3, #1
 80107cc:	2300      	moveq	r3, #0
 80107ce:	b2db      	uxtb	r3, r3
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	d00a      	beq.n	80107ea <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xd2>
    {
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	2205      	movs	r2, #5
 80107d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        assert(!"AVI LIST not found");
 80107dc:	4b84      	ldr	r3, [pc, #528]	; (80109f0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2d8>)
 80107de:	4a7f      	ldr	r2, [pc, #508]	; (80109dc <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c4>)
 80107e0:	f44f 71a2 	mov.w	r1, #324	; 0x144
 80107e4:	487e      	ldr	r0, [pc, #504]	; (80109e0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c8>)
 80107e6:	f015 fffd 	bl	80267e4 <__assert_func>
    }

    //save AVI List info
    const uint32_t aviListSize = getU32(currentMovieOffset + 4);
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	699b      	ldr	r3, [r3, #24]
 80107ee:	3304      	adds	r3, #4
 80107f0:	4619      	mov	r1, r3
 80107f2:	6878      	ldr	r0, [r7, #4]
 80107f4:	f7ff fd53 	bl	801029e <_ZN20HardwareMJPEGDecoder6getU32Em>
 80107f8:	61f8      	str	r0, [r7, #28]
    const uint32_t aviListOffset = currentMovieOffset;
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	699b      	ldr	r3, [r3, #24]
 80107fe:	61bb      	str	r3, [r7, #24]
    assert(aviListSize);
 8010800:	69fb      	ldr	r3, [r7, #28]
 8010802:	2b00      	cmp	r3, #0
 8010804:	d106      	bne.n	8010814 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xfc>
 8010806:	4b7b      	ldr	r3, [pc, #492]	; (80109f4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2dc>)
 8010808:	4a74      	ldr	r2, [pc, #464]	; (80109dc <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c4>)
 801080a:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 801080e:	4874      	ldr	r0, [pc, #464]	; (80109e0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c8>)
 8010810:	f015 ffe8 	bl	80267e4 <__assert_func>

    //look into header to find frame rate
    bool foundFrame = true;
 8010814:	2301      	movs	r3, #1
 8010816:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint32_t offset =  currentMovieOffset + 8;
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	699b      	ldr	r3, [r3, #24]
 801081e:	3308      	adds	r3, #8
 8010820:	617b      	str	r3, [r7, #20]
    if (compare(offset, "hdrl", 4))
 8010822:	2304      	movs	r3, #4
 8010824:	4a74      	ldr	r2, [pc, #464]	; (80109f8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2e0>)
 8010826:	6979      	ldr	r1, [r7, #20]
 8010828:	6878      	ldr	r0, [r7, #4]
 801082a:	f7ff fd15 	bl	8010258 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 801082e:	4603      	mov	r3, r0
 8010830:	2b00      	cmp	r3, #0
 8010832:	bf14      	ite	ne
 8010834:	2301      	movne	r3, #1
 8010836:	2300      	moveq	r3, #0
 8010838:	b2db      	uxtb	r3, r3
 801083a:	2b00      	cmp	r3, #0
 801083c:	d006      	beq.n	801084c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x134>
    {
        lastError = AVI_ERROR_AVI_HDRL_NOT_FOUND;
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	2206      	movs	r2, #6
 8010842:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        foundFrame = false;
 8010846:	2300      	movs	r3, #0
 8010848:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    offset += 4;
 801084c:	697b      	ldr	r3, [r7, #20]
 801084e:	3304      	adds	r3, #4
 8010850:	617b      	str	r3, [r7, #20]
    if (compare(offset, "avih", 4))
 8010852:	2304      	movs	r3, #4
 8010854:	4a69      	ldr	r2, [pc, #420]	; (80109fc <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2e4>)
 8010856:	6979      	ldr	r1, [r7, #20]
 8010858:	6878      	ldr	r0, [r7, #4]
 801085a:	f7ff fcfd 	bl	8010258 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 801085e:	4603      	mov	r3, r0
 8010860:	2b00      	cmp	r3, #0
 8010862:	bf14      	ite	ne
 8010864:	2301      	movne	r3, #1
 8010866:	2300      	moveq	r3, #0
 8010868:	b2db      	uxtb	r3, r3
 801086a:	2b00      	cmp	r3, #0
 801086c:	d006      	beq.n	801087c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x164>
    {
        lastError = AVI_ERROR_AVI_AVIH_NOT_FOUND;
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	2207      	movs	r2, #7
 8010872:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        foundFrame = false;
 8010876:	2300      	movs	r3, #0
 8010878:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if (foundFrame)
 801087c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010880:	2b00      	cmp	r3, #0
 8010882:	d028      	beq.n	80108d6 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1be>
    {
        offset += 8; //skip fourcc and cb in AVIMAINHEADER
 8010884:	697b      	ldr	r3, [r7, #20]
 8010886:	3308      	adds	r3, #8
 8010888:	617b      	str	r3, [r7, #20]
        videoInfo.ms_between_frames = getU32(offset)/1000;
 801088a:	6979      	ldr	r1, [r7, #20]
 801088c:	6878      	ldr	r0, [r7, #4]
 801088e:	f7ff fd06 	bl	801029e <_ZN20HardwareMJPEGDecoder6getU32Em>
 8010892:	4603      	mov	r3, r0
 8010894:	4a5a      	ldr	r2, [pc, #360]	; (8010a00 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2e8>)
 8010896:	fba2 2303 	umull	r2, r3, r2, r3
 801089a:	099a      	lsrs	r2, r3, #6
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	605a      	str	r2, [r3, #4]
        videoInfo.number_of_frames = getU32(offset + 16);
 80108a0:	697b      	ldr	r3, [r7, #20]
 80108a2:	3310      	adds	r3, #16
 80108a4:	4619      	mov	r1, r3
 80108a6:	6878      	ldr	r0, [r7, #4]
 80108a8:	f7ff fcf9 	bl	801029e <_ZN20HardwareMJPEGDecoder6getU32Em>
 80108ac:	4602      	mov	r2, r0
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	609a      	str	r2, [r3, #8]
        videoInfo.frame_width = getU32(offset + 32);
 80108b2:	697b      	ldr	r3, [r7, #20]
 80108b4:	3320      	adds	r3, #32
 80108b6:	4619      	mov	r1, r3
 80108b8:	6878      	ldr	r0, [r7, #4]
 80108ba:	f7ff fcf0 	bl	801029e <_ZN20HardwareMJPEGDecoder6getU32Em>
 80108be:	4602      	mov	r2, r0
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	60da      	str	r2, [r3, #12]
        videoInfo.frame_height = getU32(offset + 36);
 80108c4:	697b      	ldr	r3, [r7, #20]
 80108c6:	3324      	adds	r3, #36	; 0x24
 80108c8:	4619      	mov	r1, r3
 80108ca:	6878      	ldr	r0, [r7, #4]
 80108cc:	f7ff fce7 	bl	801029e <_ZN20HardwareMJPEGDecoder6getU32Em>
 80108d0:	4602      	mov	r2, r0
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	611a      	str	r2, [r3, #16]
    }
    //skip rest of AVI header, start from end of AVI List

    //look for list with 'movi' header
    uint32_t listOffset = aviListOffset + aviListSize + 8;
 80108d6:	69ba      	ldr	r2, [r7, #24]
 80108d8:	69fb      	ldr	r3, [r7, #28]
 80108da:	4413      	add	r3, r2
 80108dc:	3308      	adds	r3, #8
 80108de:	623b      	str	r3, [r7, #32]
    readData(listOffset, 12);
 80108e0:	220c      	movs	r2, #12
 80108e2:	6a39      	ldr	r1, [r7, #32]
 80108e4:	6878      	ldr	r0, [r7, #4]
 80108e6:	f7ff fd55 	bl	8010394 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 80108ea:	6a3b      	ldr	r3, [r7, #32]
 80108ec:	f103 0108 	add.w	r1, r3, #8
 80108f0:	2304      	movs	r3, #4
 80108f2:	4a44      	ldr	r2, [pc, #272]	; (8010a04 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2ec>)
 80108f4:	6878      	ldr	r0, [r7, #4]
 80108f6:	f7ff fcaf 	bl	8010258 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 80108fa:	4603      	mov	r3, r0
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	d00b      	beq.n	8010918 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x200>
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010906:	2b00      	cmp	r3, #0
 8010908:	d106      	bne.n	8010918 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x200>
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801090e:	6a3a      	ldr	r2, [r7, #32]
 8010910:	429a      	cmp	r2, r3
 8010912:	d201      	bcs.n	8010918 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x200>
 8010914:	2301      	movs	r3, #1
 8010916:	e000      	b.n	801091a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x202>
 8010918:	2300      	movs	r3, #0
 801091a:	2b00      	cmp	r3, #0
 801091c:	d012      	beq.n	8010944 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x22c>
    {
        const uint32_t listSize = getU32(listOffset + 4) + 8;
 801091e:	6a3b      	ldr	r3, [r7, #32]
 8010920:	3304      	adds	r3, #4
 8010922:	4619      	mov	r1, r3
 8010924:	6878      	ldr	r0, [r7, #4]
 8010926:	f7ff fcba 	bl	801029e <_ZN20HardwareMJPEGDecoder6getU32Em>
 801092a:	4603      	mov	r3, r0
 801092c:	3308      	adds	r3, #8
 801092e:	60fb      	str	r3, [r7, #12]
        listOffset += listSize;
 8010930:	6a3a      	ldr	r2, [r7, #32]
 8010932:	68fb      	ldr	r3, [r7, #12]
 8010934:	4413      	add	r3, r2
 8010936:	623b      	str	r3, [r7, #32]
        readData(listOffset, 12);
 8010938:	220c      	movs	r2, #12
 801093a:	6a39      	ldr	r1, [r7, #32]
 801093c:	6878      	ldr	r0, [r7, #4]
 801093e:	f7ff fd29 	bl	8010394 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 8010942:	e7d2      	b.n	80108ea <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d2>
    }

    if (lastError != AVI_NO_ERROR)
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801094a:	2b00      	cmp	r3, #0
 801094c:	d004      	beq.n	8010958 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x240>
    {
        lastError = AVI_ERROR_MOVI_NOT_FOUND;
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	220a      	movs	r2, #10
 8010952:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return;
 8010956:	e05e      	b.n	8010a16 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2fe>
    }

    //save first frame and end of last frame
    currentMovieOffset = listOffset + 8 + 4; //skip LIST and 'movi'
 8010958:	6a3b      	ldr	r3, [r7, #32]
 801095a:	f103 020c 	add.w	r2, r3, #12
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	619a      	str	r2, [r3, #24]
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 8010962:	6a3b      	ldr	r3, [r7, #32]
 8010964:	3304      	adds	r3, #4
 8010966:	4619      	mov	r1, r3
 8010968:	6878      	ldr	r0, [r7, #4]
 801096a:	f7ff fc98 	bl	801029e <_ZN20HardwareMJPEGDecoder6getU32Em>
 801096e:	4602      	mov	r2, r0
 8010970:	6a3b      	ldr	r3, [r7, #32]
 8010972:	4413      	add	r3, r2
 8010974:	f103 0208 	add.w	r2, r3, #8
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	625a      	str	r2, [r3, #36]	; 0x24

    //find idx
    const uint32_t listSize = getU32(listOffset+4)+8;
 801097c:	6a3b      	ldr	r3, [r7, #32]
 801097e:	3304      	adds	r3, #4
 8010980:	4619      	mov	r1, r3
 8010982:	6878      	ldr	r0, [r7, #4]
 8010984:	f7ff fc8b 	bl	801029e <_ZN20HardwareMJPEGDecoder6getU32Em>
 8010988:	4603      	mov	r3, r0
 801098a:	3308      	adds	r3, #8
 801098c:	613b      	str	r3, [r7, #16]
    listOffset += listSize;
 801098e:	6a3a      	ldr	r2, [r7, #32]
 8010990:	693b      	ldr	r3, [r7, #16]
 8010992:	4413      	add	r3, r2
 8010994:	623b      	str	r3, [r7, #32]
    readData(listOffset, 4);
 8010996:	2204      	movs	r2, #4
 8010998:	6a39      	ldr	r1, [r7, #32]
 801099a:	6878      	ldr	r0, [r7, #4]
 801099c:	f7ff fcfa 	bl	8010394 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    if (!compare(listOffset, "idx1", 4))
 80109a0:	2304      	movs	r3, #4
 80109a2:	4a19      	ldr	r2, [pc, #100]	; (8010a08 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2f0>)
 80109a4:	6a39      	ldr	r1, [r7, #32]
 80109a6:	6878      	ldr	r0, [r7, #4]
 80109a8:	f7ff fc56 	bl	8010258 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 80109ac:	4603      	mov	r3, r0
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	bf0c      	ite	eq
 80109b2:	2301      	moveq	r3, #1
 80109b4:	2300      	movne	r3, #0
 80109b6:	b2db      	uxtb	r3, r3
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	d027      	beq.n	8010a0c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2f4>
    {
        indexOffset = listOffset;
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	6a3a      	ldr	r2, [r7, #32]
 80109c0:	61da      	str	r2, [r3, #28]
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
        return;
    }

    //start on first frame
    frameNumber = 1; //next frame number is 1
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	2201      	movs	r2, #1
 80109c6:	615a      	str	r2, [r3, #20]
    firstFrameOffset = currentMovieOffset;
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	699a      	ldr	r2, [r3, #24]
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	621a      	str	r2, [r3, #32]
 80109d0:	e021      	b.n	8010a16 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2fe>
 80109d2:	bf00      	nop
 80109d4:	08028268 	.word	0x08028268
 80109d8:	08028270 	.word	0x08028270
 80109dc:	0802828c 	.word	0x0802828c
 80109e0:	08028154 	.word	0x08028154
 80109e4:	080282bc 	.word	0x080282bc
 80109e8:	080282c4 	.word	0x080282c4
 80109ec:	080282dc 	.word	0x080282dc
 80109f0:	080282e4 	.word	0x080282e4
 80109f4:	080282fc 	.word	0x080282fc
 80109f8:	08028308 	.word	0x08028308
 80109fc:	08028310 	.word	0x08028310
 8010a00:	10624dd3 	.word	0x10624dd3
 8010a04:	08028318 	.word	0x08028318
 8010a08:	08028320 	.word	0x08028320
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	220b      	movs	r2, #11
 8010a10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return;
 8010a14:	bf00      	nop
}
 8010a16:	3728      	adds	r7, #40	; 0x28
 8010a18:	46bd      	mov	sp, r7
 8010a1a:	bd80      	pop	{r7, pc}

08010a1c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>:

void HardwareMJPEGDecoder::decodeMJPEGFrame(const uint8_t* const mjpgdata, const uint32_t length, uint8_t* outputBuffer, uint16_t bufferWidth, uint16_t bufferHeight, uint32_t bufferStride)
{
 8010a1c:	b580      	push	{r7, lr}
 8010a1e:	b084      	sub	sp, #16
 8010a20:	af00      	add	r7, sp, #0
 8010a22:	60f8      	str	r0, [r7, #12]
 8010a24:	60b9      	str	r1, [r7, #8]
 8010a26:	607a      	str	r2, [r7, #4]
 8010a28:	603b      	str	r3, [r7, #0]
    if (length == 0)
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	2b00      	cmp	r3, #0
 8010a2e:	d051      	beq.n	8010ad4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xb8>
    {
        return;
    }

    if (outputBuffer) //only decode if buffers are assigned.
 8010a30:	683b      	ldr	r3, [r7, #0]
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	d04f      	beq.n	8010ad6 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xba>
    {
      // Update JPEG conversion parameters
      JPEG_ConvertorParams.bytes_pr_pixel = 2;
 8010a36:	4b29      	ldr	r3, [pc, #164]	; (8010adc <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xc0>)
 8010a38:	2202      	movs	r2, #2
 8010a3a:	611a      	str	r2, [r3, #16]
      JPEG_ConvertorParams.WidthExtend = videoInfo.frame_width;
 8010a3c:	68fb      	ldr	r3, [r7, #12]
 8010a3e:	68db      	ldr	r3, [r3, #12]
 8010a40:	4a26      	ldr	r2, [pc, #152]	; (8010adc <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xc0>)
 8010a42:	6013      	str	r3, [r2, #0]
      if((JPEG_ConvertorParams.WidthExtend % 16) != 0)
 8010a44:	4b25      	ldr	r3, [pc, #148]	; (8010adc <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xc0>)
 8010a46:	681b      	ldr	r3, [r3, #0]
 8010a48:	f003 030f 	and.w	r3, r3, #15
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	d006      	beq.n	8010a5e <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x42>
      {
          JPEG_ConvertorParams.WidthExtend += 16 - (JPEG_ConvertorParams.WidthExtend % 16);
 8010a50:	4b22      	ldr	r3, [pc, #136]	; (8010adc <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xc0>)
 8010a52:	681b      	ldr	r3, [r3, #0]
 8010a54:	f023 030f 	bic.w	r3, r3, #15
 8010a58:	3310      	adds	r3, #16
 8010a5a:	4a20      	ldr	r2, [pc, #128]	; (8010adc <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xc0>)
 8010a5c:	6013      	str	r3, [r2, #0]
      }
      JPEG_ConvertorParams.ScaledWidth = 800 * JPEG_ConvertorParams.bytes_pr_pixel;
 8010a5e:	4b1f      	ldr	r3, [pc, #124]	; (8010adc <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xc0>)
 8010a60:	691b      	ldr	r3, [r3, #16]
 8010a62:	f44f 7248 	mov.w	r2, #800	; 0x320
 8010a66:	fb02 f303 	mul.w	r3, r2, r3
 8010a6a:	4a1c      	ldr	r2, [pc, #112]	; (8010adc <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xc0>)
 8010a6c:	6053      	str	r3, [r2, #4]
      JPEG_ConvertorParams.MCU_pr_line = JPEG_ConvertorParams.WidthExtend / MCU_WIDTH_PIXELS;
 8010a6e:	4b1b      	ldr	r3, [pc, #108]	; (8010adc <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xc0>)
 8010a70:	681b      	ldr	r3, [r3, #0]
 8010a72:	091b      	lsrs	r3, r3, #4
 8010a74:	4a19      	ldr	r2, [pc, #100]	; (8010adc <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xc0>)
 8010a76:	60d3      	str	r3, [r2, #12]
      JPEG_ConvertorParams.LastLineHeight = 16 - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
 8010a78:	68fb      	ldr	r3, [r7, #12]
 8010a7a:	691b      	ldr	r3, [r3, #16]
 8010a7c:	f003 030f 	and.w	r3, r3, #15
 8010a80:	f1c3 0310 	rsb	r3, r3, #16
 8010a84:	4a15      	ldr	r2, [pc, #84]	; (8010adc <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xc0>)
 8010a86:	6093      	str	r3, [r2, #8]

      JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, outputBuffer);
 8010a88:	683b      	ldr	r3, [r7, #0]
 8010a8a:	687a      	ldr	r2, [r7, #4]
 8010a8c:	68b9      	ldr	r1, [r7, #8]
 8010a8e:	4814      	ldr	r0, [pc, #80]	; (8010ae0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xc4>)
 8010a90:	f000 f8ec 	bl	8010c6c <JPEG_Decode_DMA>
      do
      {
        JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8010a94:	4812      	ldr	r0, [pc, #72]	; (8010ae0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xc4>)
 8010a96:	f000 fa9d 	bl	8010fd4 <JPEG_OutputHandler>
 8010a9a:	4603      	mov	r3, r0
 8010a9c:	4a11      	ldr	r2, [pc, #68]	; (8010ae4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xc8>)
 8010a9e:	6013      	str	r3, [r2, #0]

        //If nothing to do, allow other tasks
        if (JpegProcessing_End == 2)
 8010aa0:	4b10      	ldr	r3, [pc, #64]	; (8010ae4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xc8>)
 8010aa2:	681b      	ldr	r3, [r3, #0]
 8010aa4:	2b02      	cmp	r3, #2
 8010aa6:	bf0c      	ite	eq
 8010aa8:	2301      	moveq	r3, #1
 8010aaa:	2300      	movne	r3, #0
 8010aac:	b2db      	uxtb	r3, r3
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	d006      	beq.n	8010ac0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xa4>
        {
          SEM_WAIT(semDecodingDone);
 8010ab2:	4b0d      	ldr	r3, [pc, #52]	; (8010ae8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xcc>)
 8010ab4:	681b      	ldr	r3, [r3, #0]
 8010ab6:	f04f 31ff 	mov.w	r1, #4294967295
 8010aba:	4618      	mov	r0, r3
 8010abc:	f7f9 fada 	bl	800a074 <osSemaphoreAcquire>
        }
      }
      while(JpegProcessing_End != 1);
 8010ac0:	4b08      	ldr	r3, [pc, #32]	; (8010ae4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xc8>)
 8010ac2:	681b      	ldr	r3, [r3, #0]
 8010ac4:	2b01      	cmp	r3, #1
 8010ac6:	bf14      	ite	ne
 8010ac8:	2301      	movne	r3, #1
 8010aca:	2300      	moveq	r3, #0
 8010acc:	b2db      	uxtb	r3, r3
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	d001      	beq.n	8010ad6 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xba>
      do
 8010ad2:	e7df      	b.n	8010a94 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x78>
        return;
 8010ad4:	bf00      	nop
    }
}
 8010ad6:	3710      	adds	r7, #16
 8010ad8:	46bd      	mov	sp, r7
 8010ada:	bd80      	pop	{r7, pc}
 8010adc:	2001e1cc 	.word	0x2001e1cc
 8010ae0:	20009818 	.word	0x20009818
 8010ae4:	2001e1b8 	.word	0x2001e1b8
 8010ae8:	2001e1c8 	.word	0x2001e1c8

08010aec <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm>:

bool HardwareMJPEGDecoder::decodeFrame(const touchgfx::Rect& area, uint8_t* frameBuffer, uint32_t framebuffer_width)
{
 8010aec:	b580      	push	{r7, lr}
 8010aee:	b086      	sub	sp, #24
 8010af0:	af00      	add	r7, sp, #0
 8010af2:	60f8      	str	r0, [r7, #12]
 8010af4:	60b9      	str	r1, [r7, #8]
 8010af6:	607a      	str	r2, [r7, #4]
 8010af8:	603b      	str	r3, [r7, #0]
     // Assuming that chunk is available and streamNo and chunkType is correct.
    // Check by gotoNextFrame

    readData(currentMovieOffset, 8);
 8010afa:	68fb      	ldr	r3, [r7, #12]
 8010afc:	699b      	ldr	r3, [r3, #24]
 8010afe:	2208      	movs	r2, #8
 8010b00:	4619      	mov	r1, r3
 8010b02:	68f8      	ldr	r0, [r7, #12]
 8010b04:	f7ff fc46 	bl	8010394 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    const uint32_t length = getU32(currentMovieOffset + 4);
 8010b08:	68fb      	ldr	r3, [r7, #12]
 8010b0a:	699b      	ldr	r3, [r3, #24]
 8010b0c:	3304      	adds	r3, #4
 8010b0e:	4619      	mov	r1, r3
 8010b10:	68f8      	ldr	r0, [r7, #12]
 8010b12:	f7ff fbc4 	bl	801029e <_ZN20HardwareMJPEGDecoder6getU32Em>
 8010b16:	6178      	str	r0, [r7, #20]

    // Ensure whole frame is read
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 8010b18:	68fb      	ldr	r3, [r7, #12]
 8010b1a:	699b      	ldr	r3, [r3, #24]
 8010b1c:	3308      	adds	r3, #8
 8010b1e:	697a      	ldr	r2, [r7, #20]
 8010b20:	4619      	mov	r1, r3
 8010b22:	68f8      	ldr	r0, [r7, #12]
 8010b24:	f7ff fc36 	bl	8010394 <_ZN20HardwareMJPEGDecoder8readDataEmm>
 8010b28:	6138      	str	r0, [r7, #16]

    if (frameBuffer) //only decode if buffers are assigned.
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	d015      	beq.n	8010b5c <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x70>
    {
      JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, frameBuffer);
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	697a      	ldr	r2, [r7, #20]
 8010b34:	6939      	ldr	r1, [r7, #16]
 8010b36:	480c      	ldr	r0, [pc, #48]	; (8010b68 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x7c>)
 8010b38:	f000 f898 	bl	8010c6c <JPEG_Decode_DMA>

      do
      {
        JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8010b3c:	480a      	ldr	r0, [pc, #40]	; (8010b68 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x7c>)
 8010b3e:	f000 fa49 	bl	8010fd4 <JPEG_OutputHandler>
 8010b42:	4603      	mov	r3, r0
 8010b44:	4a09      	ldr	r2, [pc, #36]	; (8010b6c <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x80>)
 8010b46:	6013      	str	r3, [r2, #0]
      }
      while(JpegProcessing_End == 0);
 8010b48:	4b08      	ldr	r3, [pc, #32]	; (8010b6c <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x80>)
 8010b4a:	681b      	ldr	r3, [r3, #0]
 8010b4c:	2b00      	cmp	r3, #0
 8010b4e:	bf0c      	ite	eq
 8010b50:	2301      	moveq	r3, #1
 8010b52:	2300      	movne	r3, #0
 8010b54:	b2db      	uxtb	r3, r3
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	d000      	beq.n	8010b5c <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x70>
      do
 8010b5a:	e7ef      	b.n	8010b3c <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x50>

    }
    return true;
 8010b5c:	2301      	movs	r3, #1
}
 8010b5e:	4618      	mov	r0, r3
 8010b60:	3718      	adds	r7, #24
 8010b62:	46bd      	mov	sp, r7
 8010b64:	bd80      	pop	{r7, pc}
 8010b66:	bf00      	nop
 8010b68:	20009818 	.word	0x20009818
 8010b6c:	2001e1b8 	.word	0x2001e1b8

08010b70 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt>:

bool HardwareMJPEGDecoder::decodeThumbnail(uint32_t frameno, uint8_t* buffer, uint16_t width, uint16_t height)
{
 8010b70:	b580      	push	{r7, lr}
 8010b72:	b084      	sub	sp, #16
 8010b74:	af00      	add	r7, sp, #0
 8010b76:	60f8      	str	r0, [r7, #12]
 8010b78:	60b9      	str	r1, [r7, #8]
 8010b7a:	607a      	str	r2, [r7, #4]
 8010b7c:	807b      	strh	r3, [r7, #2]
    assert(0);
 8010b7e:	4b03      	ldr	r3, [pc, #12]	; (8010b8c <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x1c>)
 8010b80:	4a03      	ldr	r2, [pc, #12]	; (8010b90 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x20>)
 8010b82:	f240 11cb 	movw	r1, #459	; 0x1cb
 8010b86:	4803      	ldr	r0, [pc, #12]	; (8010b94 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x24>)
 8010b88:	f015 fe2c 	bl	80267e4 <__assert_func>
 8010b8c:	08028328 	.word	0x08028328
 8010b90:	0802832c 	.word	0x0802832c
 8010b94:	08028154 	.word	0x08028154

08010b98 <_ZN20HardwareMJPEGDecoder9gotoFrameEm>:
    return false;
}

void HardwareMJPEGDecoder::gotoFrame(uint32_t frameNumber)
{
 8010b98:	b580      	push	{r7, lr}
 8010b9a:	b084      	sub	sp, #16
 8010b9c:	af00      	add	r7, sp, #0
 8010b9e:	6078      	str	r0, [r7, #4]
 8010ba0:	6039      	str	r1, [r7, #0]
    if (frameNumber==0)
 8010ba2:	683b      	ldr	r3, [r7, #0]
 8010ba4:	2b00      	cmp	r3, #0
 8010ba6:	d101      	bne.n	8010bac <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x14>
    {
        frameNumber = 1;
 8010ba8:	2301      	movs	r3, #1
 8010baa:	603b      	str	r3, [r7, #0]
    }

    if (frameNumber > getNumberOfFrames())
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	681b      	ldr	r3, [r3, #0]
 8010bb0:	332c      	adds	r3, #44	; 0x2c
 8010bb2:	681b      	ldr	r3, [r3, #0]
 8010bb4:	6878      	ldr	r0, [r7, #4]
 8010bb6:	4798      	blx	r3
 8010bb8:	4602      	mov	r2, r0
 8010bba:	683b      	ldr	r3, [r7, #0]
 8010bbc:	4293      	cmp	r3, r2
 8010bbe:	bf8c      	ite	hi
 8010bc0:	2301      	movhi	r3, #1
 8010bc2:	2300      	movls	r3, #0
 8010bc4:	b2db      	uxtb	r3, r3
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	d006      	beq.n	8010bd8 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x40>
    {
        frameNumber = getNumberOfFrames();
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	681b      	ldr	r3, [r3, #0]
 8010bce:	332c      	adds	r3, #44	; 0x2c
 8010bd0:	681b      	ldr	r3, [r3, #0]
 8010bd2:	6878      	ldr	r0, [r7, #4]
 8010bd4:	4798      	blx	r3
 8010bd6:	6038      	str	r0, [r7, #0]
    }

    uint32_t offset = indexOffset + 8 + (frameNumber-1)*16;
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	69da      	ldr	r2, [r3, #28]
 8010bdc:	683b      	ldr	r3, [r7, #0]
 8010bde:	3b01      	subs	r3, #1
 8010be0:	011b      	lsls	r3, r3, #4
 8010be2:	4413      	add	r3, r2
 8010be4:	3308      	adds	r3, #8
 8010be6:	60fb      	str	r3, [r7, #12]

    readData(offset, 16);
 8010be8:	2210      	movs	r2, #16
 8010bea:	68f9      	ldr	r1, [r7, #12]
 8010bec:	6878      	ldr	r0, [r7, #4]
 8010bee:	f7ff fbd1 	bl	8010394 <_ZN20HardwareMJPEGDecoder8readDataEmm>

    currentMovieOffset = getU32(offset + 8) + firstFrameOffset - 4;
 8010bf2:	68fb      	ldr	r3, [r7, #12]
 8010bf4:	3308      	adds	r3, #8
 8010bf6:	4619      	mov	r1, r3
 8010bf8:	6878      	ldr	r0, [r7, #4]
 8010bfa:	f7ff fb50 	bl	801029e <_ZN20HardwareMJPEGDecoder6getU32Em>
 8010bfe:	4602      	mov	r2, r0
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	6a1b      	ldr	r3, [r3, #32]
 8010c04:	4413      	add	r3, r2
 8010c06:	1f1a      	subs	r2, r3, #4
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	619a      	str	r2, [r3, #24]
    this->frameNumber = frameNumber;
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	683a      	ldr	r2, [r7, #0]
 8010c10:	615a      	str	r2, [r3, #20]
}
 8010c12:	bf00      	nop
 8010c14:	3710      	adds	r7, #16
 8010c16:	46bd      	mov	sp, r7
 8010c18:	bd80      	pop	{r7, pc}

08010c1a <_ZN20HardwareMJPEGDecoder17getNumberOfFramesEv>:

uint32_t HardwareMJPEGDecoder::getNumberOfFrames()
{
 8010c1a:	b480      	push	{r7}
 8010c1c:	b083      	sub	sp, #12
 8010c1e:	af00      	add	r7, sp, #0
 8010c20:	6078      	str	r0, [r7, #4]
    return videoInfo.number_of_frames;
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	689b      	ldr	r3, [r3, #8]
}
 8010c26:	4618      	mov	r0, r3
 8010c28:	370c      	adds	r7, #12
 8010c2a:	46bd      	mov	sp, r7
 8010c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c30:	4770      	bx	lr

08010c32 <_ZN20HardwareMJPEGDecoder14setRepeatVideoEb>:

void HardwareMJPEGDecoder::setRepeatVideo(bool repeat)
{
 8010c32:	b480      	push	{r7}
 8010c34:	b083      	sub	sp, #12
 8010c36:	af00      	add	r7, sp, #0
 8010c38:	6078      	str	r0, [r7, #4]
 8010c3a:	460b      	mov	r3, r1
 8010c3c:	70fb      	strb	r3, [r7, #3]

}
 8010c3e:	bf00      	nop
 8010c40:	370c      	adds	r7, #12
 8010c42:	46bd      	mov	sp, r7
 8010c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c48:	4770      	bx	lr

08010c4a <_ZN20HardwareMJPEGDecoder12getVideoInfoEPN8touchgfx16VideoInformationE>:

void HardwareMJPEGDecoder::getVideoInfo(touchgfx::VideoInformation* data)
{
 8010c4a:	b490      	push	{r4, r7}
 8010c4c:	b082      	sub	sp, #8
 8010c4e:	af00      	add	r7, sp, #0
 8010c50:	6078      	str	r0, [r7, #4]
 8010c52:	6039      	str	r1, [r7, #0]
    *data = videoInfo;
 8010c54:	683a      	ldr	r2, [r7, #0]
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	4614      	mov	r4, r2
 8010c5a:	3304      	adds	r3, #4
 8010c5c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010c5e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8010c62:	bf00      	nop
 8010c64:	3708      	adds	r7, #8
 8010c66:	46bd      	mov	sp, r7
 8010c68:	bc90      	pop	{r4, r7}
 8010c6a:	4770      	bx	lr

08010c6c <JPEG_Decode_DMA>:
  * @param  JPEGImageSize_Bytes    : jpg image size in bytes.
  * @param  DestAddress : ARGB8888 destination Frame Buffer Address.
  * @retval None
  */
uint32_t JPEG_Decode_DMA(JPEG_HandleTypeDef *hjpeg, uint8_t* input, uint32_t chunkSizeIn /* length */, uint8_t* output)
{
 8010c6c:	b580      	push	{r7, lr}
 8010c6e:	b088      	sub	sp, #32
 8010c70:	af02      	add	r7, sp, #8
 8010c72:	60f8      	str	r0, [r7, #12]
 8010c74:	60b9      	str	r1, [r7, #8]
 8010c76:	607a      	str	r2, [r7, #4]
 8010c78:	603b      	str	r3, [r7, #0]
    FrameBufferAddress = output;
 8010c7a:	4a28      	ldr	r2, [pc, #160]	; (8010d1c <JPEG_Decode_DMA+0xb0>)
 8010c7c:	683b      	ldr	r3, [r7, #0]
 8010c7e:	6013      	str	r3, [r2, #0]
    Output_Is_Paused = 0;
 8010c80:	4b27      	ldr	r3, [pc, #156]	; (8010d20 <JPEG_Decode_DMA+0xb4>)
 8010c82:	2200      	movs	r2, #0
 8010c84:	601a      	str	r2, [r3, #0]
    JPEG_OUT_Read_BufferIndex = 0;
 8010c86:	4b27      	ldr	r3, [pc, #156]	; (8010d24 <JPEG_Decode_DMA+0xb8>)
 8010c88:	2200      	movs	r2, #0
 8010c8a:	601a      	str	r2, [r3, #0]
    JPEG_OUT_Write_BufferIndex = 0;
 8010c8c:	4b26      	ldr	r3, [pc, #152]	; (8010d28 <JPEG_Decode_DMA+0xbc>)
 8010c8e:	2200      	movs	r2, #0
 8010c90:	601a      	str	r2, [r3, #0]
    JPEG_InputImageIndex = 0;
 8010c92:	4b26      	ldr	r3, [pc, #152]	; (8010d2c <JPEG_Decode_DMA+0xc0>)
 8010c94:	2200      	movs	r2, #0
 8010c96:	601a      	str	r2, [r3, #0]
    JPEG_InputImageAddress = (uint32_t)input;
 8010c98:	68bb      	ldr	r3, [r7, #8]
 8010c9a:	4a25      	ldr	r2, [pc, #148]	; (8010d30 <JPEG_Decode_DMA+0xc4>)
 8010c9c:	6013      	str	r3, [r2, #0]
    JPEG_InputImageSize_Bytes = chunkSizeIn;
 8010c9e:	4a25      	ldr	r2, [pc, #148]	; (8010d34 <JPEG_Decode_DMA+0xc8>)
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	6013      	str	r3, [r2, #0]
    MCU_BlockIndex = 0;
 8010ca4:	4b24      	ldr	r3, [pc, #144]	; (8010d38 <JPEG_Decode_DMA+0xcc>)
 8010ca6:	2200      	movs	r2, #0
 8010ca8:	601a      	str	r2, [r3, #0]

    //Init buffers
    for(uint32_t i = 0; i < NB_OUTPUT_DATA_BUFFERS; ++i)
 8010caa:	2300      	movs	r3, #0
 8010cac:	617b      	str	r3, [r7, #20]
 8010cae:	697b      	ldr	r3, [r7, #20]
 8010cb0:	2b01      	cmp	r3, #1
 8010cb2:	d816      	bhi.n	8010ce2 <JPEG_Decode_DMA+0x76>
    {
      Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
 8010cb4:	4921      	ldr	r1, [pc, #132]	; (8010d3c <JPEG_Decode_DMA+0xd0>)
 8010cb6:	697a      	ldr	r2, [r7, #20]
 8010cb8:	4613      	mov	r3, r2
 8010cba:	005b      	lsls	r3, r3, #1
 8010cbc:	4413      	add	r3, r2
 8010cbe:	009b      	lsls	r3, r3, #2
 8010cc0:	440b      	add	r3, r1
 8010cc2:	2200      	movs	r2, #0
 8010cc4:	701a      	strb	r2, [r3, #0]
      Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
 8010cc6:	491d      	ldr	r1, [pc, #116]	; (8010d3c <JPEG_Decode_DMA+0xd0>)
 8010cc8:	697a      	ldr	r2, [r7, #20]
 8010cca:	4613      	mov	r3, r2
 8010ccc:	005b      	lsls	r3, r3, #1
 8010cce:	4413      	add	r3, r2
 8010cd0:	009b      	lsls	r3, r3, #2
 8010cd2:	440b      	add	r3, r1
 8010cd4:	3308      	adds	r3, #8
 8010cd6:	2200      	movs	r2, #0
 8010cd8:	601a      	str	r2, [r3, #0]
    for(uint32_t i = 0; i < NB_OUTPUT_DATA_BUFFERS; ++i)
 8010cda:	697b      	ldr	r3, [r7, #20]
 8010cdc:	3301      	adds	r3, #1
 8010cde:	617b      	str	r3, [r7, #20]
 8010ce0:	e7e5      	b.n	8010cae <JPEG_Decode_DMA+0x42>
    }

    //Do not return from this function until done with decoding all chunks.
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 8010ce2:	4b11      	ldr	r3, [pc, #68]	; (8010d28 <JPEG_Decode_DMA+0xbc>)
 8010ce4:	681a      	ldr	r2, [r3, #0]
 8010ce6:	4915      	ldr	r1, [pc, #84]	; (8010d3c <JPEG_Decode_DMA+0xd0>)
 8010ce8:	4613      	mov	r3, r2
 8010cea:	005b      	lsls	r3, r3, #1
 8010cec:	4413      	add	r3, r2
 8010cee:	009b      	lsls	r3, r3, #2
 8010cf0:	440b      	add	r3, r1
 8010cf2:	3304      	adds	r3, #4
 8010cf4:	6819      	ldr	r1, [r3, #0]
 8010cf6:	4b12      	ldr	r3, [pc, #72]	; (8010d40 <JPEG_Decode_DMA+0xd4>)
 8010cf8:	68da      	ldr	r2, [r3, #12]
 8010cfa:	4613      	mov	r3, r2
 8010cfc:	005b      	lsls	r3, r3, #1
 8010cfe:	4413      	add	r3, r2
 8010d00:	01db      	lsls	r3, r3, #7
 8010d02:	9300      	str	r3, [sp, #0]
 8010d04:	460b      	mov	r3, r1
 8010d06:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8010d0a:	68b9      	ldr	r1, [r7, #8]
 8010d0c:	68f8      	ldr	r0, [r7, #12]
 8010d0e:	f7f4 f95c 	bl	8004fca <HAL_JPEG_Decode_DMA>

    return 0;
 8010d12:	2300      	movs	r3, #0
}
 8010d14:	4618      	mov	r0, r3
 8010d16:	3718      	adds	r7, #24
 8010d18:	46bd      	mov	sp, r7
 8010d1a:	bd80      	pop	{r7, pc}
 8010d1c:	2001e198 	.word	0x2001e198
 8010d20:	2001e1b4 	.word	0x2001e1b4
 8010d24:	2001e1ac 	.word	0x2001e1ac
 8010d28:	2001e1b0 	.word	0x2001e1b0
 8010d2c:	2001e19c 	.word	0x2001e19c
 8010d30:	2001e1a4 	.word	0x2001e1a4
 8010d34:	2001e1a0 	.word	0x2001e1a0
 8010d38:	2001e1c4 	.word	0x2001e1c4
 8010d3c:	20000014 	.word	0x20000014
 8010d40:	2001e1cc 	.word	0x2001e1cc

08010d44 <HAL_JPEG_InfoReadyCallback>:
  * @param hjpeg: JPEG handle pointer
  * @param pInfo: JPEG Info Struct pointer
  * @retval None
  */
void HAL_JPEG_InfoReadyCallback(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{
 8010d44:	b580      	push	{r7, lr}
 8010d46:	b084      	sub	sp, #16
 8010d48:	af00      	add	r7, sp, #0
 8010d4a:	6078      	str	r0, [r7, #4]
 8010d4c:	6039      	str	r1, [r7, #0]
  if(pInfo->ChromaSubsampling == JPEG_420_SUBSAMPLING)
 8010d4e:	683b      	ldr	r3, [r7, #0]
 8010d50:	685b      	ldr	r3, [r3, #4]
 8010d52:	2b01      	cmp	r3, #1
 8010d54:	d12f      	bne.n	8010db6 <HAL_JPEG_InfoReadyCallback+0x72>
  {
    if((pInfo->ImageWidth % 16) != 0)
 8010d56:	683b      	ldr	r3, [r7, #0]
 8010d58:	68db      	ldr	r3, [r3, #12]
 8010d5a:	f003 030f 	and.w	r3, r3, #15
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	d007      	beq.n	8010d72 <HAL_JPEG_InfoReadyCallback+0x2e>
      pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
 8010d62:	683b      	ldr	r3, [r7, #0]
 8010d64:	68db      	ldr	r3, [r3, #12]
 8010d66:	f023 030f 	bic.w	r3, r3, #15
 8010d6a:	f103 0210 	add.w	r2, r3, #16
 8010d6e:	683b      	ldr	r3, [r7, #0]
 8010d70:	60da      	str	r2, [r3, #12]

    if((pInfo->ImageHeight % 16) != 0)
 8010d72:	683b      	ldr	r3, [r7, #0]
 8010d74:	689b      	ldr	r3, [r3, #8]
 8010d76:	f003 030f 	and.w	r3, r3, #15
 8010d7a:	2b00      	cmp	r3, #0
 8010d7c:	d007      	beq.n	8010d8e <HAL_JPEG_InfoReadyCallback+0x4a>
      pInfo->ImageHeight += (16 - (pInfo->ImageHeight % 16));
 8010d7e:	683b      	ldr	r3, [r7, #0]
 8010d80:	689b      	ldr	r3, [r3, #8]
 8010d82:	f023 030f 	bic.w	r3, r3, #15
 8010d86:	f103 0210 	add.w	r2, r3, #16
 8010d8a:	683b      	ldr	r3, [r7, #0]
 8010d8c:	609a      	str	r2, [r3, #8]

    HAL_StatusTypeDef status = TGFX_JPEG_GetDecodeColorConvertFunc(pInfo, &pConvert_Function, &MCU_TotalNb);
 8010d8e:	4a36      	ldr	r2, [pc, #216]	; (8010e68 <HAL_JPEG_InfoReadyCallback+0x124>)
 8010d90:	4936      	ldr	r1, [pc, #216]	; (8010e6c <HAL_JPEG_InfoReadyCallback+0x128>)
 8010d92:	6838      	ldr	r0, [r7, #0]
 8010d94:	f002 ff30 	bl	8013bf8 <TGFX_JPEG_GetDecodeColorConvertFunc>
 8010d98:	4603      	mov	r3, r0
 8010d9a:	73bb      	strb	r3, [r7, #14]
    if(status != HAL_OK)
 8010d9c:	7bbb      	ldrb	r3, [r7, #14]
 8010d9e:	2b00      	cmp	r3, #0
 8010da0:	d05d      	beq.n	8010e5e <HAL_JPEG_InfoReadyCallback+0x11a>
    {
      assert(status == HAL_OK);
 8010da2:	7bbb      	ldrb	r3, [r7, #14]
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	d05a      	beq.n	8010e5e <HAL_JPEG_InfoReadyCallback+0x11a>
 8010da8:	4b31      	ldr	r3, [pc, #196]	; (8010e70 <HAL_JPEG_InfoReadyCallback+0x12c>)
 8010daa:	4a32      	ldr	r2, [pc, #200]	; (8010e74 <HAL_JPEG_InfoReadyCallback+0x130>)
 8010dac:	f240 2129 	movw	r1, #553	; 0x229
 8010db0:	4831      	ldr	r0, [pc, #196]	; (8010e78 <HAL_JPEG_InfoReadyCallback+0x134>)
 8010db2:	f015 fd17 	bl	80267e4 <__assert_func>
    }
  }
  else
  {
    if(pInfo->ChromaSubsampling == JPEG_422_SUBSAMPLING)
 8010db6:	683b      	ldr	r3, [r7, #0]
 8010db8:	685b      	ldr	r3, [r3, #4]
 8010dba:	2b02      	cmp	r3, #2
 8010dbc:	d11b      	bne.n	8010df6 <HAL_JPEG_InfoReadyCallback+0xb2>
    {
      if((pInfo->ImageWidth % 16) != 0)
 8010dbe:	683b      	ldr	r3, [r7, #0]
 8010dc0:	68db      	ldr	r3, [r3, #12]
 8010dc2:	f003 030f 	and.w	r3, r3, #15
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	d007      	beq.n	8010dda <HAL_JPEG_InfoReadyCallback+0x96>
        pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
 8010dca:	683b      	ldr	r3, [r7, #0]
 8010dcc:	68db      	ldr	r3, [r3, #12]
 8010dce:	f023 030f 	bic.w	r3, r3, #15
 8010dd2:	f103 0210 	add.w	r2, r3, #16
 8010dd6:	683b      	ldr	r3, [r7, #0]
 8010dd8:	60da      	str	r2, [r3, #12]

      if((pInfo->ImageHeight % 8) != 0)
 8010dda:	683b      	ldr	r3, [r7, #0]
 8010ddc:	689b      	ldr	r3, [r3, #8]
 8010dde:	f003 0307 	and.w	r3, r3, #7
 8010de2:	2b00      	cmp	r3, #0
 8010de4:	d007      	beq.n	8010df6 <HAL_JPEG_InfoReadyCallback+0xb2>
        pInfo->ImageHeight += (8 - (pInfo->ImageHeight % 8));
 8010de6:	683b      	ldr	r3, [r7, #0]
 8010de8:	689b      	ldr	r3, [r3, #8]
 8010dea:	f023 0307 	bic.w	r3, r3, #7
 8010dee:	f103 0208 	add.w	r2, r3, #8
 8010df2:	683b      	ldr	r3, [r7, #0]
 8010df4:	609a      	str	r2, [r3, #8]
    }

    if(pInfo->ChromaSubsampling == JPEG_444_SUBSAMPLING)
 8010df6:	683b      	ldr	r3, [r7, #0]
 8010df8:	685b      	ldr	r3, [r3, #4]
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	d11b      	bne.n	8010e36 <HAL_JPEG_InfoReadyCallback+0xf2>
    {
      if((pInfo->ImageWidth % 8) != 0)
 8010dfe:	683b      	ldr	r3, [r7, #0]
 8010e00:	68db      	ldr	r3, [r3, #12]
 8010e02:	f003 0307 	and.w	r3, r3, #7
 8010e06:	2b00      	cmp	r3, #0
 8010e08:	d007      	beq.n	8010e1a <HAL_JPEG_InfoReadyCallback+0xd6>
        pInfo->ImageWidth += (8 - (pInfo->ImageWidth % 8));
 8010e0a:	683b      	ldr	r3, [r7, #0]
 8010e0c:	68db      	ldr	r3, [r3, #12]
 8010e0e:	f023 0307 	bic.w	r3, r3, #7
 8010e12:	f103 0208 	add.w	r2, r3, #8
 8010e16:	683b      	ldr	r3, [r7, #0]
 8010e18:	60da      	str	r2, [r3, #12]

      if((pInfo->ImageHeight % 8) != 0)
 8010e1a:	683b      	ldr	r3, [r7, #0]
 8010e1c:	689b      	ldr	r3, [r3, #8]
 8010e1e:	f003 0307 	and.w	r3, r3, #7
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	d007      	beq.n	8010e36 <HAL_JPEG_InfoReadyCallback+0xf2>
        pInfo->ImageHeight += (8 - (pInfo->ImageHeight % 8));
 8010e26:	683b      	ldr	r3, [r7, #0]
 8010e28:	689b      	ldr	r3, [r3, #8]
 8010e2a:	f023 0307 	bic.w	r3, r3, #7
 8010e2e:	f103 0208 	add.w	r2, r3, #8
 8010e32:	683b      	ldr	r3, [r7, #0]
 8010e34:	609a      	str	r2, [r3, #8]
    }

    HAL_StatusTypeDef status = JPEG_GetDecodeColorConvertFunc(pInfo, &pConvert_Function, &MCU_TotalNb);
 8010e36:	4a0c      	ldr	r2, [pc, #48]	; (8010e68 <HAL_JPEG_InfoReadyCallback+0x124>)
 8010e38:	490c      	ldr	r1, [pc, #48]	; (8010e6c <HAL_JPEG_InfoReadyCallback+0x128>)
 8010e3a:	6838      	ldr	r0, [r7, #0]
 8010e3c:	f003 fe32 	bl	8014aa4 <JPEG_GetDecodeColorConvertFunc>
 8010e40:	4603      	mov	r3, r0
 8010e42:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK)
 8010e44:	7bfb      	ldrb	r3, [r7, #15]
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	d009      	beq.n	8010e5e <HAL_JPEG_InfoReadyCallback+0x11a>
    {
      assert(status == HAL_OK);
 8010e4a:	7bfb      	ldrb	r3, [r7, #15]
 8010e4c:	2b00      	cmp	r3, #0
 8010e4e:	d006      	beq.n	8010e5e <HAL_JPEG_InfoReadyCallback+0x11a>
 8010e50:	4b07      	ldr	r3, [pc, #28]	; (8010e70 <HAL_JPEG_InfoReadyCallback+0x12c>)
 8010e52:	4a08      	ldr	r2, [pc, #32]	; (8010e74 <HAL_JPEG_InfoReadyCallback+0x130>)
 8010e54:	f240 2143 	movw	r1, #579	; 0x243
 8010e58:	4807      	ldr	r0, [pc, #28]	; (8010e78 <HAL_JPEG_InfoReadyCallback+0x134>)
 8010e5a:	f015 fcc3 	bl	80267e4 <__assert_func>
    }
  }
}
 8010e5e:	bf00      	nop
 8010e60:	3710      	adds	r7, #16
 8010e62:	46bd      	mov	sp, r7
 8010e64:	bd80      	pop	{r7, pc}
 8010e66:	bf00      	nop
 8010e68:	2001e1bc 	.word	0x2001e1bc
 8010e6c:	2001e1c0 	.word	0x2001e1c0
 8010e70:	08028388 	.word	0x08028388
 8010e74:	0802839c 	.word	0x0802839c
 8010e78:	08028154 	.word	0x08028154

08010e7c <HAL_JPEG_GetDataCallback>:
  * @param hjpeg: JPEG handle pointer
  * @param NbDecodedData: Number of decoded (consummed) bytes from input buffer
  * @retval None
  */
void HAL_JPEG_GetDataCallback(JPEG_HandleTypeDef *hjpeg, uint32_t NbDecodedData)
{
 8010e7c:	b580      	push	{r7, lr}
 8010e7e:	b084      	sub	sp, #16
 8010e80:	af00      	add	r7, sp, #0
 8010e82:	6078      	str	r0, [r7, #4]
 8010e84:	6039      	str	r1, [r7, #0]
  //Input buffer has been consumed by the peripheral and to ask for a new data chunk if the operation (encoding/decoding) has not been complete yet.
  JPEG_InputImageIndex += NbDecodedData;
 8010e86:	4b14      	ldr	r3, [pc, #80]	; (8010ed8 <HAL_JPEG_GetDataCallback+0x5c>)
 8010e88:	681a      	ldr	r2, [r3, #0]
 8010e8a:	683b      	ldr	r3, [r7, #0]
 8010e8c:	4413      	add	r3, r2
 8010e8e:	4a12      	ldr	r2, [pc, #72]	; (8010ed8 <HAL_JPEG_GetDataCallback+0x5c>)
 8010e90:	6013      	str	r3, [r2, #0]
  if(JPEG_InputImageIndex < JPEG_InputImageSize_Bytes)
 8010e92:	4b11      	ldr	r3, [pc, #68]	; (8010ed8 <HAL_JPEG_GetDataCallback+0x5c>)
 8010e94:	681a      	ldr	r2, [r3, #0]
 8010e96:	4b11      	ldr	r3, [pc, #68]	; (8010edc <HAL_JPEG_GetDataCallback+0x60>)
 8010e98:	681b      	ldr	r3, [r3, #0]
 8010e9a:	429a      	cmp	r2, r3
 8010e9c:	d218      	bcs.n	8010ed0 <HAL_JPEG_GetDataCallback+0x54>
  {
    JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 8010e9e:	4b10      	ldr	r3, [pc, #64]	; (8010ee0 <HAL_JPEG_GetDataCallback+0x64>)
 8010ea0:	681a      	ldr	r2, [r3, #0]
 8010ea2:	683b      	ldr	r3, [r7, #0]
 8010ea4:	4413      	add	r3, r2
 8010ea6:	4a0e      	ldr	r2, [pc, #56]	; (8010ee0 <HAL_JPEG_GetDataCallback+0x64>)
 8010ea8:	6013      	str	r3, [r2, #0]
    uint32_t inDataLength = JPEG_InputImageSize_Bytes - JPEG_InputImageIndex;
 8010eaa:	4b0c      	ldr	r3, [pc, #48]	; (8010edc <HAL_JPEG_GetDataCallback+0x60>)
 8010eac:	681a      	ldr	r2, [r3, #0]
 8010eae:	4b0a      	ldr	r3, [pc, #40]	; (8010ed8 <HAL_JPEG_GetDataCallback+0x5c>)
 8010eb0:	681b      	ldr	r3, [r3, #0]
 8010eb2:	1ad3      	subs	r3, r2, r3
 8010eb4:	60fb      	str	r3, [r7, #12]
    HAL_JPEG_ConfigInputBuffer(hjpeg,(uint8_t *)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
 8010eb6:	4b0a      	ldr	r3, [pc, #40]	; (8010ee0 <HAL_JPEG_GetDataCallback+0x64>)
 8010eb8:	681b      	ldr	r3, [r3, #0]
 8010eba:	4619      	mov	r1, r3
 8010ebc:	68fb      	ldr	r3, [r7, #12]
 8010ebe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010ec2:	bf28      	it	cs
 8010ec4:	f44f 3380 	movcs.w	r3, #65536	; 0x10000
 8010ec8:	461a      	mov	r2, r3
 8010eca:	6878      	ldr	r0, [r7, #4]
 8010ecc:	f7f4 fa08 	bl	80052e0 <HAL_JPEG_ConfigInputBuffer>
  }
}
 8010ed0:	bf00      	nop
 8010ed2:	3710      	adds	r7, #16
 8010ed4:	46bd      	mov	sp, r7
 8010ed6:	bd80      	pop	{r7, pc}
 8010ed8:	2001e19c 	.word	0x2001e19c
 8010edc:	2001e1a0 	.word	0x2001e1a0
 8010ee0:	2001e1a4 	.word	0x2001e1a4

08010ee4 <HAL_JPEG_DataReadyCallback>:
  * @param pDataOut: pointer to the output data buffer
  * @param OutDataLength: length of output buffer in bytes
  * @retval None
  */
void HAL_JPEG_DataReadyCallback (JPEG_HandleTypeDef *hjpeg, uint8_t *pDataOut, uint32_t OutDataLength)
{
 8010ee4:	b580      	push	{r7, lr}
 8010ee6:	b084      	sub	sp, #16
 8010ee8:	af00      	add	r7, sp, #0
 8010eea:	60f8      	str	r0, [r7, #12]
 8010eec:	60b9      	str	r1, [r7, #8]
 8010eee:	607a      	str	r2, [r7, #4]
    Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
 8010ef0:	4b27      	ldr	r3, [pc, #156]	; (8010f90 <HAL_JPEG_DataReadyCallback+0xac>)
 8010ef2:	681a      	ldr	r2, [r3, #0]
 8010ef4:	4927      	ldr	r1, [pc, #156]	; (8010f94 <HAL_JPEG_DataReadyCallback+0xb0>)
 8010ef6:	4613      	mov	r3, r2
 8010ef8:	005b      	lsls	r3, r3, #1
 8010efa:	4413      	add	r3, r2
 8010efc:	009b      	lsls	r3, r3, #2
 8010efe:	440b      	add	r3, r1
 8010f00:	2201      	movs	r2, #1
 8010f02:	701a      	strb	r2, [r3, #0]
    Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBufferSize = OutDataLength;
 8010f04:	4b22      	ldr	r3, [pc, #136]	; (8010f90 <HAL_JPEG_DataReadyCallback+0xac>)
 8010f06:	681a      	ldr	r2, [r3, #0]
 8010f08:	4922      	ldr	r1, [pc, #136]	; (8010f94 <HAL_JPEG_DataReadyCallback+0xb0>)
 8010f0a:	4613      	mov	r3, r2
 8010f0c:	005b      	lsls	r3, r3, #1
 8010f0e:	4413      	add	r3, r2
 8010f10:	009b      	lsls	r3, r3, #2
 8010f12:	440b      	add	r3, r1
 8010f14:	3308      	adds	r3, #8
 8010f16:	687a      	ldr	r2, [r7, #4]
 8010f18:	601a      	str	r2, [r3, #0]

    JPEG_OUT_Write_BufferIndex++;
 8010f1a:	4b1d      	ldr	r3, [pc, #116]	; (8010f90 <HAL_JPEG_DataReadyCallback+0xac>)
 8010f1c:	681b      	ldr	r3, [r3, #0]
 8010f1e:	3301      	adds	r3, #1
 8010f20:	4a1b      	ldr	r2, [pc, #108]	; (8010f90 <HAL_JPEG_DataReadyCallback+0xac>)
 8010f22:	6013      	str	r3, [r2, #0]
    if(JPEG_OUT_Write_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
 8010f24:	4b1a      	ldr	r3, [pc, #104]	; (8010f90 <HAL_JPEG_DataReadyCallback+0xac>)
 8010f26:	681b      	ldr	r3, [r3, #0]
 8010f28:	2b01      	cmp	r3, #1
 8010f2a:	d902      	bls.n	8010f32 <HAL_JPEG_DataReadyCallback+0x4e>
    {
      JPEG_OUT_Write_BufferIndex = 0;
 8010f2c:	4b18      	ldr	r3, [pc, #96]	; (8010f90 <HAL_JPEG_DataReadyCallback+0xac>)
 8010f2e:	2200      	movs	r2, #0
 8010f30:	601a      	str	r2, [r3, #0]
    }

    //if the other buffer is full, then ui thread might be converting it
    if(Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State != JPEG_BUFFER_EMPTY)
 8010f32:	4b17      	ldr	r3, [pc, #92]	; (8010f90 <HAL_JPEG_DataReadyCallback+0xac>)
 8010f34:	681a      	ldr	r2, [r3, #0]
 8010f36:	4917      	ldr	r1, [pc, #92]	; (8010f94 <HAL_JPEG_DataReadyCallback+0xb0>)
 8010f38:	4613      	mov	r3, r2
 8010f3a:	005b      	lsls	r3, r3, #1
 8010f3c:	4413      	add	r3, r2
 8010f3e:	009b      	lsls	r3, r3, #2
 8010f40:	440b      	add	r3, r1
 8010f42:	781b      	ldrb	r3, [r3, #0]
 8010f44:	2b00      	cmp	r3, #0
 8010f46:	d006      	beq.n	8010f56 <HAL_JPEG_DataReadyCallback+0x72>
    {
      HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 8010f48:	2102      	movs	r1, #2
 8010f4a:	68f8      	ldr	r0, [r7, #12]
 8010f4c:	f7f4 f8a0 	bl	8005090 <HAL_JPEG_Pause>
      Output_Is_Paused = 1;
 8010f50:	4b11      	ldr	r3, [pc, #68]	; (8010f98 <HAL_JPEG_DataReadyCallback+0xb4>)
 8010f52:	2201      	movs	r2, #1
 8010f54:	601a      	str	r2, [r3, #0]
    }
    HAL_JPEG_ConfigOutputBuffer(hjpeg, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 8010f56:	4b0e      	ldr	r3, [pc, #56]	; (8010f90 <HAL_JPEG_DataReadyCallback+0xac>)
 8010f58:	681a      	ldr	r2, [r3, #0]
 8010f5a:	490e      	ldr	r1, [pc, #56]	; (8010f94 <HAL_JPEG_DataReadyCallback+0xb0>)
 8010f5c:	4613      	mov	r3, r2
 8010f5e:	005b      	lsls	r3, r3, #1
 8010f60:	4413      	add	r3, r2
 8010f62:	009b      	lsls	r3, r3, #2
 8010f64:	440b      	add	r3, r1
 8010f66:	3304      	adds	r3, #4
 8010f68:	6819      	ldr	r1, [r3, #0]
 8010f6a:	4b0c      	ldr	r3, [pc, #48]	; (8010f9c <HAL_JPEG_DataReadyCallback+0xb8>)
 8010f6c:	68da      	ldr	r2, [r3, #12]
 8010f6e:	4613      	mov	r3, r2
 8010f70:	005b      	lsls	r3, r3, #1
 8010f72:	4413      	add	r3, r2
 8010f74:	01db      	lsls	r3, r3, #7
 8010f76:	461a      	mov	r2, r3
 8010f78:	68f8      	ldr	r0, [r7, #12]
 8010f7a:	f7f4 f9c3 	bl	8005304 <HAL_JPEG_ConfigOutputBuffer>

    // Signal Hardware Decoding to wake up
    SEM_POST(semDecodingDone);
 8010f7e:	4b08      	ldr	r3, [pc, #32]	; (8010fa0 <HAL_JPEG_DataReadyCallback+0xbc>)
 8010f80:	681b      	ldr	r3, [r3, #0]
 8010f82:	4618      	mov	r0, r3
 8010f84:	f7f9 f8dc 	bl	800a140 <osSemaphoreRelease>
}
 8010f88:	bf00      	nop
 8010f8a:	3710      	adds	r7, #16
 8010f8c:	46bd      	mov	sp, r7
 8010f8e:	bd80      	pop	{r7, pc}
 8010f90:	2001e1b0 	.word	0x2001e1b0
 8010f94:	20000014 	.word	0x20000014
 8010f98:	2001e1b4 	.word	0x2001e1b4
 8010f9c:	2001e1cc 	.word	0x2001e1cc
 8010fa0:	2001e1c8 	.word	0x2001e1c8

08010fa4 <HAL_JPEG_ErrorCallback>:
  * @brief  JPEG Error callback
  * @param hjpeg: JPEG handle pointer
  * @retval None
  */
void HAL_JPEG_ErrorCallback(JPEG_HandleTypeDef *hjpeg)
{
 8010fa4:	b480      	push	{r7}
 8010fa6:	b083      	sub	sp, #12
 8010fa8:	af00      	add	r7, sp, #0
 8010faa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8010fac:	b672      	cpsid	i
}
 8010fae:	bf00      	nop
  __disable_irq();
  while (1)
 8010fb0:	e7fe      	b.n	8010fb0 <HAL_JPEG_ErrorCallback+0xc>
	...

08010fb4 <HAL_JPEG_DecodeCpltCallback>:
  * @brief  JPEG Decode complete callback
  * @param hjpeg: JPEG handle pointer
  * @retval None
  */
void HAL_JPEG_DecodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
{
 8010fb4:	b480      	push	{r7}
 8010fb6:	b083      	sub	sp, #12
 8010fb8:	af00      	add	r7, sp, #0
 8010fba:	6078      	str	r0, [r7, #4]
  Jpeg_HWDecodingEnd = 1;
 8010fbc:	4b04      	ldr	r3, [pc, #16]	; (8010fd0 <HAL_JPEG_DecodeCpltCallback+0x1c>)
 8010fbe:	2201      	movs	r2, #1
 8010fc0:	601a      	str	r2, [r3, #0]
}
 8010fc2:	bf00      	nop
 8010fc4:	370c      	adds	r7, #12
 8010fc6:	46bd      	mov	sp, r7
 8010fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fcc:	4770      	bx	lr
 8010fce:	bf00      	nop
 8010fd0:	2001e1a8 	.word	0x2001e1a8

08010fd4 <JPEG_OutputHandler>:
  * @brief  JPEG Ouput Data BackGround Postprocessing .
  * @param hjpeg: JPEG handle pointer
  * @retval 1 : if JPEG processing has finished, 0 : if JPEG processing still ongoing
  */
uint32_t JPEG_OutputHandler(JPEG_HandleTypeDef *hjpeg)
{
 8010fd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010fd6:	b087      	sub	sp, #28
 8010fd8:	af02      	add	r7, sp, #8
 8010fda:	6078      	str	r0, [r7, #4]
  uint32_t ConvertedDataCount;

  if(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL)
 8010fdc:	4b55      	ldr	r3, [pc, #340]	; (8011134 <JPEG_OutputHandler+0x160>)
 8010fde:	681a      	ldr	r2, [r3, #0]
 8010fe0:	4955      	ldr	r1, [pc, #340]	; (8011138 <JPEG_OutputHandler+0x164>)
 8010fe2:	4613      	mov	r3, r2
 8010fe4:	005b      	lsls	r3, r3, #1
 8010fe6:	4413      	add	r3, r2
 8010fe8:	009b      	lsls	r3, r3, #2
 8010fea:	440b      	add	r3, r1
 8010fec:	781b      	ldrb	r3, [r3, #0]
 8010fee:	2b01      	cmp	r3, #1
 8010ff0:	d160      	bne.n	80110b4 <JPEG_OutputHandler+0xe0>
  {
    /* Invalidate DCache prior to YCbCr/RGB software conversion. */
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8010ff2:	4b52      	ldr	r3, [pc, #328]	; (801113c <JPEG_OutputHandler+0x168>)
 8010ff4:	695b      	ldr	r3, [r3, #20]
 8010ff6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010ffa:	2b00      	cmp	r3, #0
 8010ffc:	bf14      	ite	ne
 8010ffe:	2301      	movne	r3, #1
 8011000:	2300      	moveq	r3, #0
 8011002:	b2db      	uxtb	r3, r3
 8011004:	2b00      	cmp	r3, #0
 8011006:	d001      	beq.n	801100c <JPEG_OutputHandler+0x38>
    {
      SCB_CleanInvalidateDCache();
 8011008:	f7ff f87e 	bl	8010108 <SCB_CleanInvalidateDCache>
    }

    MCU_BlockIndex += pConvert_Function(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].DataBuffer, FrameBufferAddress, MCU_BlockIndex, Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].DataBufferSize, &ConvertedDataCount);
 801100c:	4b4c      	ldr	r3, [pc, #304]	; (8011140 <JPEG_OutputHandler+0x16c>)
 801100e:	681c      	ldr	r4, [r3, #0]
 8011010:	4b48      	ldr	r3, [pc, #288]	; (8011134 <JPEG_OutputHandler+0x160>)
 8011012:	681a      	ldr	r2, [r3, #0]
 8011014:	4948      	ldr	r1, [pc, #288]	; (8011138 <JPEG_OutputHandler+0x164>)
 8011016:	4613      	mov	r3, r2
 8011018:	005b      	lsls	r3, r3, #1
 801101a:	4413      	add	r3, r2
 801101c:	009b      	lsls	r3, r3, #2
 801101e:	440b      	add	r3, r1
 8011020:	3304      	adds	r3, #4
 8011022:	6818      	ldr	r0, [r3, #0]
 8011024:	4b47      	ldr	r3, [pc, #284]	; (8011144 <JPEG_OutputHandler+0x170>)
 8011026:	6819      	ldr	r1, [r3, #0]
 8011028:	4b47      	ldr	r3, [pc, #284]	; (8011148 <JPEG_OutputHandler+0x174>)
 801102a:	681d      	ldr	r5, [r3, #0]
 801102c:	4b41      	ldr	r3, [pc, #260]	; (8011134 <JPEG_OutputHandler+0x160>)
 801102e:	681a      	ldr	r2, [r3, #0]
 8011030:	4e41      	ldr	r6, [pc, #260]	; (8011138 <JPEG_OutputHandler+0x164>)
 8011032:	4613      	mov	r3, r2
 8011034:	005b      	lsls	r3, r3, #1
 8011036:	4413      	add	r3, r2
 8011038:	009b      	lsls	r3, r3, #2
 801103a:	4433      	add	r3, r6
 801103c:	3308      	adds	r3, #8
 801103e:	681a      	ldr	r2, [r3, #0]
 8011040:	f107 030c 	add.w	r3, r7, #12
 8011044:	9300      	str	r3, [sp, #0]
 8011046:	4613      	mov	r3, r2
 8011048:	462a      	mov	r2, r5
 801104a:	47a0      	blx	r4
 801104c:	4602      	mov	r2, r0
 801104e:	4b3e      	ldr	r3, [pc, #248]	; (8011148 <JPEG_OutputHandler+0x174>)
 8011050:	681b      	ldr	r3, [r3, #0]
 8011052:	4413      	add	r3, r2
 8011054:	4a3c      	ldr	r2, [pc, #240]	; (8011148 <JPEG_OutputHandler+0x174>)
 8011056:	6013      	str	r3, [r2, #0]

    Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State = JPEG_BUFFER_EMPTY;
 8011058:	4b36      	ldr	r3, [pc, #216]	; (8011134 <JPEG_OutputHandler+0x160>)
 801105a:	681a      	ldr	r2, [r3, #0]
 801105c:	4936      	ldr	r1, [pc, #216]	; (8011138 <JPEG_OutputHandler+0x164>)
 801105e:	4613      	mov	r3, r2
 8011060:	005b      	lsls	r3, r3, #1
 8011062:	4413      	add	r3, r2
 8011064:	009b      	lsls	r3, r3, #2
 8011066:	440b      	add	r3, r1
 8011068:	2200      	movs	r2, #0
 801106a:	701a      	strb	r2, [r3, #0]
    Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].DataBufferSize = 0;
 801106c:	4b31      	ldr	r3, [pc, #196]	; (8011134 <JPEG_OutputHandler+0x160>)
 801106e:	681a      	ldr	r2, [r3, #0]
 8011070:	4931      	ldr	r1, [pc, #196]	; (8011138 <JPEG_OutputHandler+0x164>)
 8011072:	4613      	mov	r3, r2
 8011074:	005b      	lsls	r3, r3, #1
 8011076:	4413      	add	r3, r2
 8011078:	009b      	lsls	r3, r3, #2
 801107a:	440b      	add	r3, r1
 801107c:	3308      	adds	r3, #8
 801107e:	2200      	movs	r2, #0
 8011080:	601a      	str	r2, [r3, #0]

    JPEG_OUT_Read_BufferIndex++;
 8011082:	4b2c      	ldr	r3, [pc, #176]	; (8011134 <JPEG_OutputHandler+0x160>)
 8011084:	681b      	ldr	r3, [r3, #0]
 8011086:	3301      	adds	r3, #1
 8011088:	4a2a      	ldr	r2, [pc, #168]	; (8011134 <JPEG_OutputHandler+0x160>)
 801108a:	6013      	str	r3, [r2, #0]
    if(JPEG_OUT_Read_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
 801108c:	4b29      	ldr	r3, [pc, #164]	; (8011134 <JPEG_OutputHandler+0x160>)
 801108e:	681b      	ldr	r3, [r3, #0]
 8011090:	2b01      	cmp	r3, #1
 8011092:	d902      	bls.n	801109a <JPEG_OutputHandler+0xc6>
    {
      JPEG_OUT_Read_BufferIndex = 0;
 8011094:	4b27      	ldr	r3, [pc, #156]	; (8011134 <JPEG_OutputHandler+0x160>)
 8011096:	2200      	movs	r2, #0
 8011098:	601a      	str	r2, [r3, #0]
    }

    if(MCU_BlockIndex == MCU_TotalNb)
 801109a:	4b2b      	ldr	r3, [pc, #172]	; (8011148 <JPEG_OutputHandler+0x174>)
 801109c:	681a      	ldr	r2, [r3, #0]
 801109e:	4b2b      	ldr	r3, [pc, #172]	; (801114c <JPEG_OutputHandler+0x178>)
 80110a0:	681b      	ldr	r3, [r3, #0]
 80110a2:	429a      	cmp	r2, r3
 80110a4:	bf0c      	ite	eq
 80110a6:	2301      	moveq	r3, #1
 80110a8:	2300      	movne	r3, #0
 80110aa:	b2db      	uxtb	r3, r3
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	d02a      	beq.n	8011106 <JPEG_OutputHandler+0x132>
    {
      return 1;
 80110b0:	2301      	movs	r3, #1
 80110b2:	e03a      	b.n	801112a <JPEG_OutputHandler+0x156>
    }
  }
  else if((Output_Is_Paused == 1) && \
 80110b4:	4b26      	ldr	r3, [pc, #152]	; (8011150 <JPEG_OutputHandler+0x17c>)
 80110b6:	681b      	ldr	r3, [r3, #0]
          (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) &&\
 80110b8:	2b01      	cmp	r3, #1
 80110ba:	d117      	bne.n	80110ec <JPEG_OutputHandler+0x118>
 80110bc:	4b25      	ldr	r3, [pc, #148]	; (8011154 <JPEG_OutputHandler+0x180>)
 80110be:	681a      	ldr	r2, [r3, #0]
 80110c0:	491d      	ldr	r1, [pc, #116]	; (8011138 <JPEG_OutputHandler+0x164>)
 80110c2:	4613      	mov	r3, r2
 80110c4:	005b      	lsls	r3, r3, #1
 80110c6:	4413      	add	r3, r2
 80110c8:	009b      	lsls	r3, r3, #2
 80110ca:	440b      	add	r3, r1
 80110cc:	781b      	ldrb	r3, [r3, #0]
  else if((Output_Is_Paused == 1) && \
 80110ce:	2b00      	cmp	r3, #0
 80110d0:	d10c      	bne.n	80110ec <JPEG_OutputHandler+0x118>
          (Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_EMPTY))
 80110d2:	4b18      	ldr	r3, [pc, #96]	; (8011134 <JPEG_OutputHandler+0x160>)
 80110d4:	681a      	ldr	r2, [r3, #0]
 80110d6:	4918      	ldr	r1, [pc, #96]	; (8011138 <JPEG_OutputHandler+0x164>)
 80110d8:	4613      	mov	r3, r2
 80110da:	005b      	lsls	r3, r3, #1
 80110dc:	4413      	add	r3, r2
 80110de:	009b      	lsls	r3, r3, #2
 80110e0:	440b      	add	r3, r1
 80110e2:	781b      	ldrb	r3, [r3, #0]
          (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) &&\
 80110e4:	2b00      	cmp	r3, #0
 80110e6:	d101      	bne.n	80110ec <JPEG_OutputHandler+0x118>
 80110e8:	2301      	movs	r3, #1
 80110ea:	e000      	b.n	80110ee <JPEG_OutputHandler+0x11a>
 80110ec:	2300      	movs	r3, #0
  else if((Output_Is_Paused == 1) && \
 80110ee:	2b00      	cmp	r3, #0
 80110f0:	d007      	beq.n	8011102 <JPEG_OutputHandler+0x12e>
  {
    Output_Is_Paused = 0;
 80110f2:	4b17      	ldr	r3, [pc, #92]	; (8011150 <JPEG_OutputHandler+0x17c>)
 80110f4:	2200      	movs	r2, #0
 80110f6:	601a      	str	r2, [r3, #0]
    HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 80110f8:	2102      	movs	r1, #2
 80110fa:	6878      	ldr	r0, [r7, #4]
 80110fc:	f7f4 f833 	bl	8005166 <HAL_JPEG_Resume>
 8011100:	e001      	b.n	8011106 <JPEG_OutputHandler+0x132>
  }
  else
  {
    return 2;
 8011102:	2302      	movs	r3, #2
 8011104:	e011      	b.n	801112a <JPEG_OutputHandler+0x156>
  }

  if((MCU_BlockIndex == MCU_TotalNb) && (Jpeg_HWDecodingEnd))// decode completed
 8011106:	4b10      	ldr	r3, [pc, #64]	; (8011148 <JPEG_OutputHandler+0x174>)
 8011108:	681a      	ldr	r2, [r3, #0]
 801110a:	4b10      	ldr	r3, [pc, #64]	; (801114c <JPEG_OutputHandler+0x178>)
 801110c:	681b      	ldr	r3, [r3, #0]
 801110e:	429a      	cmp	r2, r3
 8011110:	d105      	bne.n	801111e <JPEG_OutputHandler+0x14a>
 8011112:	4b11      	ldr	r3, [pc, #68]	; (8011158 <JPEG_OutputHandler+0x184>)
 8011114:	681b      	ldr	r3, [r3, #0]
 8011116:	2b00      	cmp	r3, #0
 8011118:	d001      	beq.n	801111e <JPEG_OutputHandler+0x14a>
 801111a:	2301      	movs	r3, #1
 801111c:	e000      	b.n	8011120 <JPEG_OutputHandler+0x14c>
 801111e:	2300      	movs	r3, #0
 8011120:	2b00      	cmp	r3, #0
 8011122:	d001      	beq.n	8011128 <JPEG_OutputHandler+0x154>
  {
    return 1;
 8011124:	2301      	movs	r3, #1
 8011126:	e000      	b.n	801112a <JPEG_OutputHandler+0x156>
  }

  return 0;
 8011128:	2300      	movs	r3, #0
}
 801112a:	4618      	mov	r0, r3
 801112c:	3714      	adds	r7, #20
 801112e:	46bd      	mov	sp, r7
 8011130:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011132:	bf00      	nop
 8011134:	2001e1ac 	.word	0x2001e1ac
 8011138:	20000014 	.word	0x20000014
 801113c:	e000ed00 	.word	0xe000ed00
 8011140:	2001e1c0 	.word	0x2001e1c0
 8011144:	2001e198 	.word	0x2001e198
 8011148:	2001e1c4 	.word	0x2001e1c4
 801114c:	2001e1bc 	.word	0x2001e1bc
 8011150:	2001e1b4 	.word	0x2001e1b4
 8011154:	2001e1b0 	.word	0x2001e1b0
 8011158:	2001e1a8 	.word	0x2001e1a8

0801115c <_ZN20HardwareMJPEGDecoderD1Ev>:
class HardwareMJPEGDecoder : public MJPEGDecoder
 801115c:	b580      	push	{r7, lr}
 801115e:	b082      	sub	sp, #8
 8011160:	af00      	add	r7, sp, #0
 8011162:	6078      	str	r0, [r7, #4]
 8011164:	4a05      	ldr	r2, [pc, #20]	; (801117c <_ZN20HardwareMJPEGDecoderD1Ev+0x20>)
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	601a      	str	r2, [r3, #0]
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	4618      	mov	r0, r3
 801116e:	f7fe ff91 	bl	8010094 <_ZN12MJPEGDecoderD1Ev>
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	4618      	mov	r0, r3
 8011176:	3708      	adds	r7, #8
 8011178:	46bd      	mov	sp, r7
 801117a:	bd80      	pop	{r7, pc}
 801117c:	0802a420 	.word	0x0802a420

08011180 <_ZN20HardwareMJPEGDecoderD0Ev>:
 8011180:	b580      	push	{r7, lr}
 8011182:	b082      	sub	sp, #8
 8011184:	af00      	add	r7, sp, #0
 8011186:	6078      	str	r0, [r7, #4]
 8011188:	6878      	ldr	r0, [r7, #4]
 801118a:	f7ff ffe7 	bl	801115c <_ZN20HardwareMJPEGDecoderD1Ev>
 801118e:	2144      	movs	r1, #68	; 0x44
 8011190:	6878      	ldr	r0, [r7, #4]
 8011192:	f015 faf8 	bl	8026786 <_ZdlPvj>
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	4618      	mov	r0, r3
 801119a:	3708      	adds	r7, #8
 801119c:	46bd      	mov	sp, r7
 801119e:	bd80      	pop	{r7, pc}

080111a0 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 80111a0:	b580      	push	{r7, lr}
 80111a2:	af00      	add	r7, sp, #0
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 80111a4:	2200      	movs	r2, #0
 80111a6:	2101      	movs	r1, #1
 80111a8:	2001      	movs	r0, #1
 80111aa:	f7f8 fec7 	bl	8009f3c <osSemaphoreNew>
 80111ae:	4603      	mov	r3, r0
 80111b0:	4a0f      	ldr	r2, [pc, #60]	; (80111f0 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 80111b2:	6013      	str	r3, [r2, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 80111b4:	4b0e      	ldr	r3, [pc, #56]	; (80111f0 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 80111b6:	681b      	ldr	r3, [r3, #0]
 80111b8:	2b00      	cmp	r3, #0
 80111ba:	d105      	bne.n	80111c8 <_ZN8touchgfx10OSWrappers10initializeEv+0x28>
 80111bc:	4b0d      	ldr	r3, [pc, #52]	; (80111f4 <_ZN8touchgfx10OSWrappers10initializeEv+0x54>)
 80111be:	4a0e      	ldr	r2, [pc, #56]	; (80111f8 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 80111c0:	2128      	movs	r1, #40	; 0x28
 80111c2:	480e      	ldr	r0, [pc, #56]	; (80111fc <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 80111c4:	f015 fb0e 	bl	80267e4 <__assert_func>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 80111c8:	2200      	movs	r2, #0
 80111ca:	2104      	movs	r1, #4
 80111cc:	2001      	movs	r0, #1
 80111ce:	f7f9 f80f 	bl	800a1f0 <osMessageQueueNew>
 80111d2:	4603      	mov	r3, r0
 80111d4:	4a0a      	ldr	r2, [pc, #40]	; (8011200 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 80111d6:	6013      	str	r3, [r2, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 80111d8:	4b09      	ldr	r3, [pc, #36]	; (8011200 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 80111da:	681b      	ldr	r3, [r3, #0]
 80111dc:	2b00      	cmp	r3, #0
 80111de:	d105      	bne.n	80111ec <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>
 80111e0:	4b08      	ldr	r3, [pc, #32]	; (8011204 <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 80111e2:	4a05      	ldr	r2, [pc, #20]	; (80111f8 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 80111e4:	212c      	movs	r1, #44	; 0x2c
 80111e6:	4805      	ldr	r0, [pc, #20]	; (80111fc <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 80111e8:	f015 fafc 	bl	80267e4 <__assert_func>
}
 80111ec:	bf00      	nop
 80111ee:	bd80      	pop	{r7, pc}
 80111f0:	2001e1e0 	.word	0x2001e1e0
 80111f4:	080283e4 	.word	0x080283e4
 80111f8:	08028430 	.word	0x08028430
 80111fc:	08028460 	.word	0x08028460
 8011200:	2001e1e4 	.word	0x2001e1e4
 8011204:	0802848c 	.word	0x0802848c

08011208 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 8011208:	b580      	push	{r7, lr}
 801120a:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 801120c:	4b04      	ldr	r3, [pc, #16]	; (8011220 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 801120e:	681b      	ldr	r3, [r3, #0]
 8011210:	f04f 31ff 	mov.w	r1, #4294967295
 8011214:	4618      	mov	r0, r3
 8011216:	f7f8 ff2d 	bl	800a074 <osSemaphoreAcquire>
}
 801121a:	bf00      	nop
 801121c:	bd80      	pop	{r7, pc}
 801121e:	bf00      	nop
 8011220:	2001e1e0 	.word	0x2001e1e0

08011224 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 8011224:	b580      	push	{r7, lr}
 8011226:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8011228:	4b03      	ldr	r3, [pc, #12]	; (8011238 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 801122a:	681b      	ldr	r3, [r3, #0]
 801122c:	4618      	mov	r0, r3
 801122e:	f7f8 ff87 	bl	800a140 <osSemaphoreRelease>
}
 8011232:	bf00      	nop
 8011234:	bd80      	pop	{r7, pc}
 8011236:	bf00      	nop
 8011238:	2001e1e0 	.word	0x2001e1e0

0801123c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 801123c:	b580      	push	{r7, lr}
 801123e:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8011240:	4b03      	ldr	r3, [pc, #12]	; (8011250 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 8011242:	681b      	ldr	r3, [r3, #0]
 8011244:	2100      	movs	r1, #0
 8011246:	4618      	mov	r0, r3
 8011248:	f7f8 ff14 	bl	800a074 <osSemaphoreAcquire>
}
 801124c:	bf00      	nop
 801124e:	bd80      	pop	{r7, pc}
 8011250:	2001e1e0 	.word	0x2001e1e0

08011254 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 8011254:	b580      	push	{r7, lr}
 8011256:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8011258:	4b03      	ldr	r3, [pc, #12]	; (8011268 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 801125a:	681b      	ldr	r3, [r3, #0]
 801125c:	4618      	mov	r0, r3
 801125e:	f7f8 ff6f 	bl	800a140 <osSemaphoreRelease>
}
 8011262:	bf00      	nop
 8011264:	bd80      	pop	{r7, pc}
 8011266:	bf00      	nop
 8011268:	2001e1e0 	.word	0x2001e1e0

0801126c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 801126c:	b580      	push	{r7, lr}
 801126e:	b082      	sub	sp, #8
 8011270:	af00      	add	r7, sp, #0
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8011272:	4b09      	ldr	r3, [pc, #36]	; (8011298 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8011274:	6818      	ldr	r0, [r3, #0]
 8011276:	1d39      	adds	r1, r7, #4
 8011278:	2300      	movs	r3, #0
 801127a:	2200      	movs	r2, #0
 801127c:	f7f9 f83e 	bl	800a2fc <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8011280:	4b05      	ldr	r3, [pc, #20]	; (8011298 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8011282:	6818      	ldr	r0, [r3, #0]
 8011284:	1d39      	adds	r1, r7, #4
 8011286:	f04f 33ff 	mov.w	r3, #4294967295
 801128a:	2200      	movs	r2, #0
 801128c:	f7f9 f836 	bl	800a2fc <osMessageQueueGet>
}
 8011290:	bf00      	nop
 8011292:	3708      	adds	r7, #8
 8011294:	46bd      	mov	sp, r7
 8011296:	bd80      	pop	{r7, pc}
 8011298:	2001e1e4 	.word	0x2001e1e4

0801129c <__NVIC_EnableIRQ>:
{
 801129c:	b480      	push	{r7}
 801129e:	b083      	sub	sp, #12
 80112a0:	af00      	add	r7, sp, #0
 80112a2:	4603      	mov	r3, r0
 80112a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80112a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80112aa:	2b00      	cmp	r3, #0
 80112ac:	db0b      	blt.n	80112c6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80112ae:	79fb      	ldrb	r3, [r7, #7]
 80112b0:	f003 021f 	and.w	r2, r3, #31
 80112b4:	4907      	ldr	r1, [pc, #28]	; (80112d4 <__NVIC_EnableIRQ+0x38>)
 80112b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80112ba:	095b      	lsrs	r3, r3, #5
 80112bc:	2001      	movs	r0, #1
 80112be:	fa00 f202 	lsl.w	r2, r0, r2
 80112c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80112c6:	bf00      	nop
 80112c8:	370c      	adds	r7, #12
 80112ca:	46bd      	mov	sp, r7
 80112cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112d0:	4770      	bx	lr
 80112d2:	bf00      	nop
 80112d4:	e000e100 	.word	0xe000e100

080112d8 <__NVIC_DisableIRQ>:
{
 80112d8:	b480      	push	{r7}
 80112da:	b083      	sub	sp, #12
 80112dc:	af00      	add	r7, sp, #0
 80112de:	4603      	mov	r3, r0
 80112e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80112e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80112e6:	2b00      	cmp	r3, #0
 80112e8:	db12      	blt.n	8011310 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80112ea:	79fb      	ldrb	r3, [r7, #7]
 80112ec:	f003 021f 	and.w	r2, r3, #31
 80112f0:	490a      	ldr	r1, [pc, #40]	; (801131c <__NVIC_DisableIRQ+0x44>)
 80112f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80112f6:	095b      	lsrs	r3, r3, #5
 80112f8:	2001      	movs	r0, #1
 80112fa:	fa00 f202 	lsl.w	r2, r0, r2
 80112fe:	3320      	adds	r3, #32
 8011300:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8011304:	f3bf 8f4f 	dsb	sy
}
 8011308:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801130a:	f3bf 8f6f 	isb	sy
}
 801130e:	bf00      	nop
}
 8011310:	bf00      	nop
 8011312:	370c      	adds	r7, #12
 8011314:	46bd      	mov	sp, r7
 8011316:	f85d 7b04 	ldr.w	r7, [sp], #4
 801131a:	4770      	bx	lr
 801131c:	e000e100 	.word	0xe000e100

08011320 <_ZN8touchgfx9colortypeC1Ev>:
    colortype()
 8011320:	b480      	push	{r7}
 8011322:	b083      	sub	sp, #12
 8011324:	af00      	add	r7, sp, #0
 8011326:	6078      	str	r0, [r7, #4]
        : color(0)
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	2200      	movs	r2, #0
 801132c:	601a      	str	r2, [r3, #0]
    }
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	4618      	mov	r0, r3
 8011332:	370c      	adds	r7, #12
 8011334:	46bd      	mov	sp, r7
 8011336:	f85d 7b04 	ldr.w	r7, [sp], #4
 801133a:	4770      	bx	lr

0801133c <_ZNK8touchgfx9colortypecvmEv>:
    operator uint32_t() const
 801133c:	b480      	push	{r7}
 801133e:	b083      	sub	sp, #12
 8011340:	af00      	add	r7, sp, #0
 8011342:	6078      	str	r0, [r7, #4]
        return color;
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	681b      	ldr	r3, [r3, #0]
    }
 8011348:	4618      	mov	r0, r3
 801134a:	370c      	adds	r7, #12
 801134c:	46bd      	mov	sp, r7
 801134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011352:	4770      	bx	lr

08011354 <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 8011354:	b480      	push	{r7}
 8011356:	b083      	sub	sp, #12
 8011358:	af00      	add	r7, sp, #0
 801135a:	6078      	str	r0, [r7, #4]
    {
 801135c:	4a04      	ldr	r2, [pc, #16]	; (8011370 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	601a      	str	r2, [r3, #0]
    }
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	4618      	mov	r0, r3
 8011366:	370c      	adds	r7, #12
 8011368:	46bd      	mov	sp, r7
 801136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801136e:	4770      	bx	lr
 8011370:	0802a4f4 	.word	0x0802a4f4

08011374 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 8011374:	b580      	push	{r7, lr}
 8011376:	b082      	sub	sp, #8
 8011378:	af00      	add	r7, sp, #0
 801137a:	6078      	str	r0, [r7, #4]
    }
 801137c:	6878      	ldr	r0, [r7, #4]
 801137e:	f7ff ffe9 	bl	8011354 <_ZN8touchgfx9DMA_QueueD1Ev>
 8011382:	2104      	movs	r1, #4
 8011384:	6878      	ldr	r0, [r7, #4]
 8011386:	f015 f9fe 	bl	8026786 <_ZdlPvj>
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	4618      	mov	r0, r3
 801138e:	3708      	adds	r7, #8
 8011390:	46bd      	mov	sp, r7
 8011392:	bd80      	pop	{r7, pc}

08011394 <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 8011394:	b580      	push	{r7, lr}
 8011396:	b082      	sub	sp, #8
 8011398:	af00      	add	r7, sp, #0
 801139a:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	681b      	ldr	r3, [r3, #0]
 80113a0:	3344      	adds	r3, #68	; 0x44
 80113a2:	681b      	ldr	r3, [r3, #0]
 80113a4:	6878      	ldr	r0, [r7, #4]
 80113a6:	4798      	blx	r3
    }
 80113a8:	bf00      	nop
 80113aa:	3708      	adds	r7, #8
 80113ac:	46bd      	mov	sp, r7
 80113ae:	bd80      	pop	{r7, pc}

080113b0 <_ZN8touchgfx13DMA_InterfaceD1Ev>:
    {
        return DMA_TYPE_GENERIC;
    }

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 80113b0:	b480      	push	{r7}
 80113b2:	b083      	sub	sp, #12
 80113b4:	af00      	add	r7, sp, #0
 80113b6:	6078      	str	r0, [r7, #4]
    {
 80113b8:	4a04      	ldr	r2, [pc, #16]	; (80113cc <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	601a      	str	r2, [r3, #0]
    }
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	4618      	mov	r0, r3
 80113c2:	370c      	adds	r7, #12
 80113c4:	46bd      	mov	sp, r7
 80113c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113ca:	4770      	bx	lr
 80113cc:	0802aee8 	.word	0x0802aee8

080113d0 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 80113d0:	b580      	push	{r7, lr}
 80113d2:	b082      	sub	sp, #8
 80113d4:	af00      	add	r7, sp, #0
 80113d6:	6078      	str	r0, [r7, #4]
    }
 80113d8:	6878      	ldr	r0, [r7, #4]
 80113da:	f7ff ffe9 	bl	80113b0 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 80113de:	210c      	movs	r1, #12
 80113e0:	6878      	ldr	r0, [r7, #4]
 80113e2:	f015 f9d0 	bl	8026786 <_ZdlPvj>
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	4618      	mov	r0, r3
 80113ea:	3708      	adds	r7, #8
 80113ec:	46bd      	mov	sp, r7
 80113ee:	bd80      	pop	{r7, pc}

080113f0 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 80113f0:	b480      	push	{r7}
 80113f2:	b083      	sub	sp, #12
 80113f4:	af00      	add	r7, sp, #0
 80113f6:	6078      	str	r0, [r7, #4]
 80113f8:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 80113fa:	4a09      	ldr	r2, [pc, #36]	; (8011420 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	601a      	str	r2, [r3, #0]
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	683a      	ldr	r2, [r7, #0]
 8011404:	605a      	str	r2, [r3, #4]
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	2200      	movs	r2, #0
 801140a:	721a      	strb	r2, [r3, #8]
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	2200      	movs	r2, #0
 8011410:	725a      	strb	r2, [r3, #9]
    {
    }
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	4618      	mov	r0, r3
 8011416:	370c      	adds	r7, #12
 8011418:	46bd      	mov	sp, r7
 801141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801141e:	4770      	bx	lr
 8011420:	0802aee8 	.word	0x0802aee8

08011424 <_ZN8STM32DMA10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_CHROMART type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
 8011424:	b480      	push	{r7}
 8011426:	b083      	sub	sp, #12
 8011428:	af00      	add	r7, sp, #0
 801142a:	6078      	str	r0, [r7, #4]
    {
        return touchgfx::DMA_TYPE_CHROMART;
 801142c:	2301      	movs	r3, #1
    }
 801142e:	4618      	mov	r0, r3
 8011430:	370c      	adds	r7, #12
 8011432:	46bd      	mov	sp, r7
 8011434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011438:	4770      	bx	lr

0801143a <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 801143a:	b580      	push	{r7, lr}
 801143c:	b082      	sub	sp, #8
 801143e:	af00      	add	r7, sp, #0
 8011440:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 8011442:	687a      	ldr	r2, [r7, #4]
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	681b      	ldr	r3, [r3, #0]
 8011448:	3328      	adds	r3, #40	; 0x28
 801144a:	681b      	ldr	r3, [r3, #0]
 801144c:	4610      	mov	r0, r2
 801144e:	4798      	blx	r3
    }
 8011450:	bf00      	nop
 8011452:	3708      	adds	r7, #8
 8011454:	46bd      	mov	sp, r7
 8011456:	bd80      	pop	{r7, pc}

08011458 <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 8011458:	b580      	push	{r7, lr}
 801145a:	b082      	sub	sp, #8
 801145c:	af00      	add	r7, sp, #0
 801145e:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	685a      	ldr	r2, [r3, #4]
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	685b      	ldr	r3, [r3, #4]
 8011468:	681b      	ldr	r3, [r3, #0]
 801146a:	3314      	adds	r3, #20
 801146c:	681b      	ldr	r3, [r3, #0]
 801146e:	4610      	mov	r0, r2
 8011470:	4798      	blx	r3
    }
 8011472:	bf00      	nop
 8011474:	3708      	adds	r7, #8
 8011476:	46bd      	mov	sp, r7
 8011478:	bd80      	pop	{r7, pc}

0801147a <DMA2D_XferCpltCallback>:

extern "C" DMA2D_HandleTypeDef hdma2d;

extern "C" {
    static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
    {
 801147a:	b580      	push	{r7, lr}
 801147c:	b082      	sub	sp, #8
 801147e:	af00      	add	r7, sp, #0
 8011480:	6078      	str	r0, [r7, #4]
        (void)handle; // Unused argument
        HAL::getInstance()->signalDMAInterrupt();
 8011482:	f7fc fd51 	bl	800df28 <_ZN8touchgfx3HAL11getInstanceEv>
 8011486:	4603      	mov	r3, r0
 8011488:	4618      	mov	r0, r3
 801148a:	f7ff ffe5 	bl	8011458 <_ZN8touchgfx3HAL18signalDMAInterruptEv>
    }
 801148e:	bf00      	nop
 8011490:	3708      	adds	r7, #8
 8011492:	46bd      	mov	sp, r7
 8011494:	bd80      	pop	{r7, pc}

08011496 <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 8011496:	b580      	push	{r7, lr}
 8011498:	b082      	sub	sp, #8
 801149a:	af00      	add	r7, sp, #0
 801149c:	6078      	str	r0, [r7, #4]
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	330c      	adds	r3, #12
 80114a2:	4618      	mov	r0, r3
 80114a4:	f7ff ff3c 	bl	8011320 <_ZN8touchgfx9colortypeC1Ev>
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	4618      	mov	r0, r3
 80114ac:	3708      	adds	r7, #8
 80114ae:	46bd      	mov	sp, r7
 80114b0:	bd80      	pop	{r7, pc}
	...

080114b4 <_ZN8STM32DMAC1Ev>:
}

STM32DMA::STM32DMA()
 80114b4:	b5b0      	push	{r4, r5, r7, lr}
 80114b6:	b082      	sub	sp, #8
 80114b8:	af00      	add	r7, sp, #0
 80114ba:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 80114bc:	687a      	ldr	r2, [r7, #4]
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	330c      	adds	r3, #12
 80114c2:	4619      	mov	r1, r3
 80114c4:	4610      	mov	r0, r2
 80114c6:	f7ff ff93 	bl	80113f0 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 80114ca:	4a0e      	ldr	r2, [pc, #56]	; (8011504 <_ZN8STM32DMAC1Ev+0x50>)
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	601a      	str	r2, [r3, #0]
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	f103 000c 	add.w	r0, r3, #12
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	3320      	adds	r3, #32
 80114da:	2260      	movs	r2, #96	; 0x60
 80114dc:	4619      	mov	r1, r3
 80114de:	f004 fd87 	bl	8015ff0 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	3320      	adds	r3, #32
 80114e6:	245f      	movs	r4, #95	; 0x5f
 80114e8:	461d      	mov	r5, r3
 80114ea:	2c00      	cmp	r4, #0
 80114ec:	db05      	blt.n	80114fa <_ZN8STM32DMAC1Ev+0x46>
 80114ee:	4628      	mov	r0, r5
 80114f0:	f7ff ffd1 	bl	8011496 <_ZN8touchgfx6BlitOpC1Ev>
 80114f4:	3524      	adds	r5, #36	; 0x24
 80114f6:	3c01      	subs	r4, #1
 80114f8:	e7f7      	b.n	80114ea <_ZN8STM32DMAC1Ev+0x36>
{
}
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	4618      	mov	r0, r3
 80114fe:	3708      	adds	r7, #8
 8011500:	46bd      	mov	sp, r7
 8011502:	bdb0      	pop	{r4, r5, r7, pc}
 8011504:	0802a4a4 	.word	0x0802a4a4

08011508 <_ZN8STM32DMAD1Ev>:

STM32DMA::~STM32DMA()
 8011508:	b580      	push	{r7, lr}
 801150a:	b082      	sub	sp, #8
 801150c:	af00      	add	r7, sp, #0
 801150e:	6078      	str	r0, [r7, #4]
 8011510:	4a09      	ldr	r2, [pc, #36]	; (8011538 <_ZN8STM32DMAD1Ev+0x30>)
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	601a      	str	r2, [r3, #0]
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
 8011516:	205a      	movs	r0, #90	; 0x5a
 8011518:	f7ff fede 	bl	80112d8 <__NVIC_DisableIRQ>
STM32DMA::~STM32DMA()
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	330c      	adds	r3, #12
 8011520:	4618      	mov	r0, r3
 8011522:	f000 fac7 	bl	8011ab4 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	4618      	mov	r0, r3
 801152a:	f7ff ff41 	bl	80113b0 <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	4618      	mov	r0, r3
 8011532:	3708      	adds	r7, #8
 8011534:	46bd      	mov	sp, r7
 8011536:	bd80      	pop	{r7, pc}
 8011538:	0802a4a4 	.word	0x0802a4a4

0801153c <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 801153c:	b580      	push	{r7, lr}
 801153e:	b082      	sub	sp, #8
 8011540:	af00      	add	r7, sp, #0
 8011542:	6078      	str	r0, [r7, #4]
}
 8011544:	6878      	ldr	r0, [r7, #4]
 8011546:	f7ff ffdf 	bl	8011508 <_ZN8STM32DMAD1Ev>
 801154a:	f44f 615a 	mov.w	r1, #3488	; 0xda0
 801154e:	6878      	ldr	r0, [r7, #4]
 8011550:	f015 f919 	bl	8026786 <_ZdlPvj>
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	4618      	mov	r0, r3
 8011558:	3708      	adds	r7, #8
 801155a:	46bd      	mov	sp, r7
 801155c:	bd80      	pop	{r7, pc}
	...

08011560 <_ZN8STM32DMA10initializeEv>:

void STM32DMA::initialize()
{
 8011560:	b580      	push	{r7, lr}
 8011562:	b084      	sub	sp, #16
 8011564:	af00      	add	r7, sp, #0
 8011566:	6078      	str	r0, [r7, #4]
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8011568:	4b10      	ldr	r3, [pc, #64]	; (80115ac <_ZN8STM32DMA10initializeEv+0x4c>)
 801156a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801156c:	4a0f      	ldr	r2, [pc, #60]	; (80115ac <_ZN8STM32DMA10initializeEv+0x4c>)
 801156e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8011572:	6313      	str	r3, [r2, #48]	; 0x30
 8011574:	4b0d      	ldr	r3, [pc, #52]	; (80115ac <_ZN8STM32DMA10initializeEv+0x4c>)
 8011576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011578:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801157c:	60fb      	str	r3, [r7, #12]
 801157e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8011580:	4b0a      	ldr	r3, [pc, #40]	; (80115ac <_ZN8STM32DMA10initializeEv+0x4c>)
 8011582:	691b      	ldr	r3, [r3, #16]
 8011584:	4a09      	ldr	r2, [pc, #36]	; (80115ac <_ZN8STM32DMA10initializeEv+0x4c>)
 8011586:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 801158a:	6113      	str	r3, [r2, #16]
    __HAL_RCC_DMA2D_RELEASE_RESET();
 801158c:	4b07      	ldr	r3, [pc, #28]	; (80115ac <_ZN8STM32DMA10initializeEv+0x4c>)
 801158e:	691b      	ldr	r3, [r3, #16]
 8011590:	4a06      	ldr	r2, [pc, #24]	; (80115ac <_ZN8STM32DMA10initializeEv+0x4c>)
 8011592:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8011596:	6113      	str	r3, [r2, #16]

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8011598:	4b05      	ldr	r3, [pc, #20]	; (80115b0 <_ZN8STM32DMA10initializeEv+0x50>)
 801159a:	4a06      	ldr	r2, [pc, #24]	; (80115b4 <_ZN8STM32DMA10initializeEv+0x54>)
 801159c:	619a      	str	r2, [r3, #24]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
 801159e:	205a      	movs	r0, #90	; 0x5a
 80115a0:	f7ff fe7c 	bl	801129c <__NVIC_EnableIRQ>
}
 80115a4:	bf00      	nop
 80115a6:	3710      	adds	r7, #16
 80115a8:	46bd      	mov	sp, r7
 80115aa:	bd80      	pop	{r7, pc}
 80115ac:	40023800 	.word	0x40023800
 80115b0:	20009750 	.word	0x20009750
 80115b4:	0801147b 	.word	0x0801147b

080115b8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
{
 80115b8:	b580      	push	{r7, lr}
 80115ba:	b084      	sub	sp, #16
 80115bc:	af00      	add	r7, sp, #0
 80115be:	6078      	str	r0, [r7, #4]
 80115c0:	460b      	mov	r3, r1
 80115c2:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_INPUT_ARGB8888;
 80115c4:	2300      	movs	r3, #0
 80115c6:	60fb      	str	r3, [r7, #12]

    switch (format)
 80115c8:	78fb      	ldrb	r3, [r7, #3]
 80115ca:	2b0b      	cmp	r3, #11
 80115cc:	d826      	bhi.n	801161c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x64>
 80115ce:	a201      	add	r2, pc, #4	; (adr r2, 80115d4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 80115d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80115d4:	08011611 	.word	0x08011611
 80115d8:	0801160b 	.word	0x0801160b
 80115dc:	08011605 	.word	0x08011605
 80115e0:	0801161d 	.word	0x0801161d
 80115e4:	0801161d 	.word	0x0801161d
 80115e8:	0801161d 	.word	0x0801161d
 80115ec:	0801161d 	.word	0x0801161d
 80115f0:	08011617 	.word	0x08011617
 80115f4:	08011617 	.word	0x08011617
 80115f8:	08011617 	.word	0x08011617
 80115fc:	08011617 	.word	0x08011617
 8011600:	08011617 	.word	0x08011617
    {
    case Bitmap::ARGB8888: /* DMA2D input mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8011604:	2300      	movs	r3, #0
 8011606:	60fb      	str	r3, [r7, #12]
        break;
 8011608:	e00e      	b.n	8011628 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB888: /* DMA2D input mode set to 24bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB888;
 801160a:	2301      	movs	r3, #1
 801160c:	60fb      	str	r3, [r7, #12]
        break;
 801160e:	e00b      	b.n	8011628 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB565: /* DMA2D input mode set to 16bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8011610:	2302      	movs	r3, #2
 8011612:	60fb      	str	r3, [r7, #12]
        break;
 8011614:	e008      	b.n	8011628 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* Fall through */
    case Bitmap::L8:       /* DMA2D input mode set to 8bit Color Look up table*/
        dma2dColorMode = DMA2D_INPUT_L8;
 8011616:	2305      	movs	r3, #5
 8011618:	60fb      	str	r3, [r7, #12]
        break;
 801161a:	e005      	b.n	8011628 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported input format for DMA2D */
        assert(0 && "Unsupported Format!");
 801161c:	4b05      	ldr	r3, [pc, #20]	; (8011634 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x7c>)
 801161e:	4a06      	ldr	r2, [pc, #24]	; (8011638 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x80>)
 8011620:	2166      	movs	r1, #102	; 0x66
 8011622:	4806      	ldr	r0, [pc, #24]	; (801163c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x84>)
 8011624:	f015 f8de 	bl	80267e4 <__assert_func>
        break;
    }

    return dma2dColorMode;
 8011628:	68fb      	ldr	r3, [r7, #12]
}
 801162a:	4618      	mov	r0, r3
 801162c:	3710      	adds	r7, #16
 801162e:	46bd      	mov	sp, r7
 8011630:	bd80      	pop	{r7, pc}
 8011632:	bf00      	nop
 8011634:	080284d0 	.word	0x080284d0
 8011638:	080284ec 	.word	0x080284ec
 801163c:	08028538 	.word	0x08028538

08011640 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
{
 8011640:	b580      	push	{r7, lr}
 8011642:	b084      	sub	sp, #16
 8011644:	af00      	add	r7, sp, #0
 8011646:	6078      	str	r0, [r7, #4]
 8011648:	460b      	mov	r3, r1
 801164a:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 801164c:	2300      	movs	r3, #0
 801164e:	60fb      	str	r3, [r7, #12]

    switch (format)
 8011650:	78fb      	ldrb	r3, [r7, #3]
 8011652:	2b0a      	cmp	r3, #10
 8011654:	d821      	bhi.n	801169a <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x5a>
 8011656:	a201      	add	r2, pc, #4	; (adr r2, 801165c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 8011658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801165c:	08011695 	.word	0x08011695
 8011660:	0801168f 	.word	0x0801168f
 8011664:	08011689 	.word	0x08011689
 8011668:	0801169b 	.word	0x0801169b
 801166c:	0801169b 	.word	0x0801169b
 8011670:	0801169b 	.word	0x0801169b
 8011674:	0801169b 	.word	0x0801169b
 8011678:	0801168f 	.word	0x0801168f
 801167c:	0801168f 	.word	0x0801168f
 8011680:	0801168f 	.word	0x0801168f
 8011684:	0801168f 	.word	0x0801168f
    {
    case Bitmap::ARGB8888: /* DMA2D output mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8011688:	2300      	movs	r3, #0
 801168a:	60fb      	str	r3, [r7, #12]
        break;
 801168c:	e00b      	b.n	80116a6 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB888:   /* Fall through */
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* DMA2D output mode set to 24bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 801168e:	2301      	movs	r3, #1
 8011690:	60fb      	str	r3, [r7, #12]
        break;
 8011692:	e008      	b.n	80116a6 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB565: /* DMA2D output mode set to 16bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8011694:	2302      	movs	r3, #2
 8011696:	60fb      	str	r3, [r7, #12]
        break;
 8011698:	e005      	b.n	80116a6 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported output format for DMA2D */
        assert(0 && "Unsupported Format!");
 801169a:	4b05      	ldr	r3, [pc, #20]	; (80116b0 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>)
 801169c:	4a05      	ldr	r2, [pc, #20]	; (80116b4 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x74>)
 801169e:	2187      	movs	r1, #135	; 0x87
 80116a0:	4805      	ldr	r0, [pc, #20]	; (80116b8 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x78>)
 80116a2:	f015 f89f 	bl	80267e4 <__assert_func>
        break;
    }

    return dma2dColorMode;
 80116a6:	68fb      	ldr	r3, [r7, #12]
}
 80116a8:	4618      	mov	r0, r3
 80116aa:	3710      	adds	r7, #16
 80116ac:	46bd      	mov	sp, r7
 80116ae:	bd80      	pop	{r7, pc}
 80116b0:	080284d0 	.word	0x080284d0
 80116b4:	08028564 	.word	0x08028564
 80116b8:	08028538 	.word	0x08028538

080116bc <_ZN8STM32DMA11getBlitCapsEv>:

BlitOperations STM32DMA::getBlitCaps()
{
 80116bc:	b480      	push	{r7}
 80116be:	b083      	sub	sp, #12
 80116c0:	af00      	add	r7, sp, #0
 80116c2:	6078      	str	r0, [r7, #4]
                                       | BLIT_OP_COPY_L8
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
 80116c4:	f240 33ef 	movw	r3, #1007	; 0x3ef
}
 80116c8:	4618      	mov	r0, r3
 80116ca:	370c      	adds	r7, #12
 80116cc:	46bd      	mov	sp, r7
 80116ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116d2:	4770      	bx	lr

080116d4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 80116d4:	b590      	push	{r4, r7, lr}
 80116d6:	b089      	sub	sp, #36	; 0x24
 80116d8:	af00      	add	r7, sp, #0
 80116da:	6078      	str	r0, [r7, #4]
 80116dc:	6039      	str	r1, [r7, #0]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 80116de:	683b      	ldr	r3, [r7, #0]
 80116e0:	7f5b      	ldrb	r3, [r3, #29]
 80116e2:	4619      	mov	r1, r3
 80116e4:	6878      	ldr	r0, [r7, #4]
 80116e6:	f7ff ff67 	bl	80115b8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 80116ea:	61b8      	str	r0, [r7, #24]
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80116ec:	683b      	ldr	r3, [r7, #0]
 80116ee:	7f9b      	ldrb	r3, [r3, #30]
 80116f0:	4619      	mov	r1, r3
 80116f2:	6878      	ldr	r0, [r7, #4]
 80116f4:	f7ff ff60 	bl	80115b8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 80116f8:	6178      	str	r0, [r7, #20]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80116fa:	683b      	ldr	r3, [r7, #0]
 80116fc:	7f9b      	ldrb	r3, [r3, #30]
 80116fe:	4619      	mov	r1, r3
 8011700:	6878      	ldr	r0, [r7, #4]
 8011702:	f7ff ff9d 	bl	8011640 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8011706:	6138      	str	r0, [r7, #16]

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8011708:	683b      	ldr	r3, [r7, #0]
 801170a:	8b5b      	ldrh	r3, [r3, #26]
 801170c:	461a      	mov	r2, r3
 801170e:	683b      	ldr	r3, [r7, #0]
 8011710:	8a9b      	ldrh	r3, [r3, #20]
 8011712:	1ad2      	subs	r2, r2, r3
 8011714:	4b92      	ldr	r3, [pc, #584]	; (8011960 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8011716:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration */
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8011718:	683b      	ldr	r3, [r7, #0]
 801171a:	8b5b      	ldrh	r3, [r3, #26]
 801171c:	461a      	mov	r2, r3
 801171e:	683b      	ldr	r3, [r7, #0]
 8011720:	8a9b      	ldrh	r3, [r3, #20]
 8011722:	1ad2      	subs	r2, r2, r3
 8011724:	4b8e      	ldr	r3, [pc, #568]	; (8011960 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8011726:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration */
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8011728:	683b      	ldr	r3, [r7, #0]
 801172a:	8b1b      	ldrh	r3, [r3, #24]
 801172c:	461a      	mov	r2, r3
 801172e:	683b      	ldr	r3, [r7, #0]
 8011730:	8a9b      	ldrh	r3, [r3, #20]
 8011732:	1ad2      	subs	r2, r2, r3
 8011734:	4b8a      	ldr	r3, [pc, #552]	; (8011960 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8011736:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8011738:	4a89      	ldr	r2, [pc, #548]	; (8011960 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 801173a:	693b      	ldr	r3, [r7, #16]
 801173c:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 801173e:	683b      	ldr	r3, [r7, #0]
 8011740:	8adb      	ldrh	r3, [r3, #22]
 8011742:	461a      	mov	r2, r3
 8011744:	683b      	ldr	r3, [r7, #0]
 8011746:	8a9b      	ldrh	r3, [r3, #20]
 8011748:	041b      	lsls	r3, r3, #16
 801174a:	431a      	orrs	r2, r3
 801174c:	4b84      	ldr	r3, [pc, #528]	; (8011960 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 801174e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8011750:	683b      	ldr	r3, [r7, #0]
 8011752:	691a      	ldr	r2, [r3, #16]
 8011754:	4b82      	ldr	r3, [pc, #520]	; (8011960 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8011756:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8011758:	683b      	ldr	r3, [r7, #0]
 801175a:	685a      	ldr	r2, [r3, #4]
 801175c:	4b80      	ldr	r3, [pc, #512]	; (8011960 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 801175e:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 8011760:	683b      	ldr	r3, [r7, #0]
 8011762:	681b      	ldr	r3, [r3, #0]
 8011764:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011768:	d036      	beq.n	80117d8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x104>
 801176a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801176e:	f200 80e2 	bhi.w	8011936 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x262>
 8011772:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011776:	d014      	beq.n	80117a2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xce>
 8011778:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801177c:	f200 80db 	bhi.w	8011936 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x262>
 8011780:	2b80      	cmp	r3, #128	; 0x80
 8011782:	d059      	beq.n	8011838 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x164>
 8011784:	2b80      	cmp	r3, #128	; 0x80
 8011786:	f200 80d6 	bhi.w	8011936 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x262>
 801178a:	2b40      	cmp	r3, #64	; 0x40
 801178c:	f000 80be 	beq.w	801190c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x238>
 8011790:	2b40      	cmp	r3, #64	; 0x40
 8011792:	f200 80d0 	bhi.w	8011936 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x262>
 8011796:	2b04      	cmp	r3, #4
 8011798:	d039      	beq.n	801180e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13a>
 801179a:	2b20      	cmp	r3, #32
 801179c:	f000 80b6 	beq.w	801190c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x238>
 80117a0:	e0c9      	b.n	8011936 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x262>
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80117a2:	683b      	ldr	r3, [r7, #0]
 80117a4:	7f1b      	ldrb	r3, [r3, #28]
 80117a6:	061b      	lsls	r3, r3, #24
 80117a8:	4619      	mov	r1, r3
 80117aa:	4a6d      	ldr	r2, [pc, #436]	; (8011960 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80117ac:	4b6d      	ldr	r3, [pc, #436]	; (8011964 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 80117ae:	430b      	orrs	r3, r1
 80117b0:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 80117b2:	683b      	ldr	r3, [r7, #0]
 80117b4:	330c      	adds	r3, #12
 80117b6:	4c6a      	ldr	r4, [pc, #424]	; (8011960 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80117b8:	4618      	mov	r0, r3
 80117ba:	f7ff fdbf 	bl	801133c <_ZNK8touchgfx9colortypecvmEv>
 80117be:	4603      	mov	r3, r0
 80117c0:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80117c2:	4a67      	ldr	r2, [pc, #412]	; (8011960 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80117c4:	697b      	ldr	r3, [r7, #20]
 80117c6:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80117c8:	683b      	ldr	r3, [r7, #0]
 80117ca:	691a      	ldr	r2, [r3, #16]
 80117cc:	4b64      	ldr	r3, [pc, #400]	; (8011960 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80117ce:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 80117d0:	4b63      	ldr	r3, [pc, #396]	; (8011960 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80117d2:	4a65      	ldr	r2, [pc, #404]	; (8011968 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 80117d4:	601a      	str	r2, [r3, #0]
        break;
 80117d6:	e0da      	b.n	801198e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_A8:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80117d8:	683b      	ldr	r3, [r7, #0]
 80117da:	7f1b      	ldrb	r3, [r3, #28]
 80117dc:	061b      	lsls	r3, r3, #24
 80117de:	4619      	mov	r1, r3
 80117e0:	4a5f      	ldr	r2, [pc, #380]	; (8011960 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80117e2:	4b62      	ldr	r3, [pc, #392]	; (801196c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80117e4:	430b      	orrs	r3, r1
 80117e6:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 80117e8:	683b      	ldr	r3, [r7, #0]
 80117ea:	330c      	adds	r3, #12
 80117ec:	4c5c      	ldr	r4, [pc, #368]	; (8011960 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80117ee:	4618      	mov	r0, r3
 80117f0:	f7ff fda4 	bl	801133c <_ZNK8touchgfx9colortypecvmEv>
 80117f4:	4603      	mov	r3, r0
 80117f6:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80117f8:	4a59      	ldr	r2, [pc, #356]	; (8011960 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80117fa:	697b      	ldr	r3, [r7, #20]
 80117fc:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80117fe:	683b      	ldr	r3, [r7, #0]
 8011800:	691a      	ldr	r2, [r3, #16]
 8011802:	4b57      	ldr	r3, [pc, #348]	; (8011960 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8011804:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8011806:	4b56      	ldr	r3, [pc, #344]	; (8011960 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8011808:	4a57      	ldr	r2, [pc, #348]	; (8011968 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 801180a:	601a      	str	r2, [r3, #0]
        break;
 801180c:	e0bf      	b.n	801198e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 801180e:	683b      	ldr	r3, [r7, #0]
 8011810:	7f1b      	ldrb	r3, [r3, #28]
 8011812:	061b      	lsls	r3, r3, #24
 8011814:	461a      	mov	r2, r3
 8011816:	69bb      	ldr	r3, [r7, #24]
 8011818:	4313      	orrs	r3, r2
 801181a:	4a51      	ldr	r2, [pc, #324]	; (8011960 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 801181c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011820:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8011822:	4a4f      	ldr	r2, [pc, #316]	; (8011960 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8011824:	697b      	ldr	r3, [r7, #20]
 8011826:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8011828:	683b      	ldr	r3, [r7, #0]
 801182a:	691a      	ldr	r2, [r3, #16]
 801182c:	4b4c      	ldr	r3, [pc, #304]	; (8011960 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 801182e:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8011830:	4b4b      	ldr	r3, [pc, #300]	; (8011960 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8011832:	4a4d      	ldr	r2, [pc, #308]	; (8011968 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8011834:	601a      	str	r2, [r3, #0]
        break;
 8011836:	e0aa      	b.n	801198e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_L8:
        {
            bool blend = true;
 8011838:	2301      	movs	r3, #1
 801183a:	77fb      	strb	r3, [r7, #31]
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 801183c:	683b      	ldr	r3, [r7, #0]
 801183e:	689b      	ldr	r3, [r3, #8]
 8011840:	60fb      	str	r3, [r7, #12]

            /* Write foreground CLUT memory address */
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8011842:	68fb      	ldr	r3, [r7, #12]
 8011844:	1d1a      	adds	r2, r3, #4
 8011846:	4b46      	ldr	r3, [pc, #280]	; (8011960 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8011848:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Set DMA2D color mode and alpha mode */
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 801184a:	683b      	ldr	r3, [r7, #0]
 801184c:	7f1b      	ldrb	r3, [r3, #28]
 801184e:	061b      	lsls	r3, r3, #24
 8011850:	461a      	mov	r2, r3
 8011852:	69bb      	ldr	r3, [r7, #24]
 8011854:	4313      	orrs	r3, r2
 8011856:	4a42      	ldr	r2, [pc, #264]	; (8011960 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8011858:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801185c:	61d3      	str	r3, [r2, #28]

            /* Write DMA2D BGPFCCR register */
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 801185e:	4a40      	ldr	r2, [pc, #256]	; (8011960 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8011860:	697b      	ldr	r3, [r7, #20]
 8011862:	6253      	str	r3, [r2, #36]	; 0x24

            /* Configure DMA2D Stream source2 address */
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8011864:	683b      	ldr	r3, [r7, #0]
 8011866:	691a      	ldr	r2, [r3, #16]
 8011868:	4b3d      	ldr	r3, [pc, #244]	; (8011960 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 801186a:	615a      	str	r2, [r3, #20]

            /* Configure CLUT */
            switch ((Bitmap::ClutFormat)palette->format)
 801186c:	68fb      	ldr	r3, [r7, #12]
 801186e:	881b      	ldrh	r3, [r3, #0]
 8011870:	b2db      	uxtb	r3, r3
 8011872:	2b00      	cmp	r3, #0
 8011874:	d002      	beq.n	801187c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a8>
 8011876:	2b01      	cmp	r3, #1
 8011878:	d00d      	beq.n	8011896 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c2>
 801187a:	e020      	b.n	80118be <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ea>
            {
            case Bitmap::CLUT_FORMAT_L8_ARGB8888:
                /* Write foreground CLUT size and CLUT color mode */
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 801187c:	4b38      	ldr	r3, [pc, #224]	; (8011960 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 801187e:	69da      	ldr	r2, [r3, #28]
 8011880:	4b3b      	ldr	r3, [pc, #236]	; (8011970 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8011882:	4013      	ands	r3, r2
 8011884:	68fa      	ldr	r2, [r7, #12]
 8011886:	8852      	ldrh	r2, [r2, #2]
 8011888:	3a01      	subs	r2, #1
 801188a:	0212      	lsls	r2, r2, #8
 801188c:	4611      	mov	r1, r2
 801188e:	4a34      	ldr	r2, [pc, #208]	; (8011960 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8011890:	430b      	orrs	r3, r1
 8011892:	61d3      	str	r3, [r2, #28]
                break;
 8011894:	e01a      	b.n	80118cc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f8>
            case Bitmap::CLUT_FORMAT_L8_RGB888:
                if(blitOp.alpha == 255)
 8011896:	683b      	ldr	r3, [r7, #0]
 8011898:	7f1b      	ldrb	r3, [r3, #28]
 801189a:	2bff      	cmp	r3, #255	; 0xff
 801189c:	d101      	bne.n	80118a2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ce>
                {
                    blend = false;
 801189e:	2300      	movs	r3, #0
 80118a0:	77fb      	strb	r3, [r7, #31]
                }
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 80118a2:	4b2f      	ldr	r3, [pc, #188]	; (8011960 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80118a4:	69da      	ldr	r2, [r3, #28]
 80118a6:	4b32      	ldr	r3, [pc, #200]	; (8011970 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80118a8:	4013      	ands	r3, r2
 80118aa:	68fa      	ldr	r2, [r7, #12]
 80118ac:	8852      	ldrh	r2, [r2, #2]
 80118ae:	3a01      	subs	r2, #1
 80118b0:	0212      	lsls	r2, r2, #8
 80118b2:	4313      	orrs	r3, r2
 80118b4:	4a2a      	ldr	r2, [pc, #168]	; (8011960 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80118b6:	f043 0310 	orr.w	r3, r3, #16
 80118ba:	61d3      	str	r3, [r2, #28]
                break;
 80118bc:	e006      	b.n	80118cc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f8>

            case Bitmap::CLUT_FORMAT_L8_RGB565:
            default:
                assert(0 && "Unsupported format");
 80118be:	4b2d      	ldr	r3, [pc, #180]	; (8011974 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80118c0:	4a2d      	ldr	r2, [pc, #180]	; (8011978 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 80118c2:	f240 1111 	movw	r1, #273	; 0x111
 80118c6:	482d      	ldr	r0, [pc, #180]	; (801197c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 80118c8:	f014 ff8c 	bl	80267e4 <__assert_func>
                break;
            }

            /* Enable the CLUT loading for the foreground */
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 80118cc:	4b24      	ldr	r3, [pc, #144]	; (8011960 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80118ce:	69db      	ldr	r3, [r3, #28]
 80118d0:	4a23      	ldr	r2, [pc, #140]	; (8011960 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80118d2:	f043 0320 	orr.w	r3, r3, #32
 80118d6:	61d3      	str	r3, [r2, #28]

            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 80118d8:	4b21      	ldr	r3, [pc, #132]	; (8011960 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80118da:	69db      	ldr	r3, [r3, #28]
 80118dc:	f003 0320 	and.w	r3, r3, #32
 80118e0:	2b00      	cmp	r3, #0
 80118e2:	bf14      	ite	ne
 80118e4:	2301      	movne	r3, #1
 80118e6:	2300      	moveq	r3, #0
 80118e8:	b2db      	uxtb	r3, r3
 80118ea:	2b00      	cmp	r3, #0
 80118ec:	d000      	beq.n	80118f0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>
 80118ee:	e7f3      	b.n	80118d8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x204>
            {
            }
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 80118f0:	4b1b      	ldr	r3, [pc, #108]	; (8011960 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80118f2:	2210      	movs	r2, #16
 80118f4:	609a      	str	r2, [r3, #8]

            /* Set DMA2D mode */
            if(blend)
 80118f6:	7ffb      	ldrb	r3, [r7, #31]
 80118f8:	2b00      	cmp	r3, #0
 80118fa:	d003      	beq.n	8011904 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x230>
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 80118fc:	4b18      	ldr	r3, [pc, #96]	; (8011960 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80118fe:	4a1a      	ldr	r2, [pc, #104]	; (8011968 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8011900:	601a      	str	r2, [r3, #0]
            else
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
            }
        }
        break;
 8011902:	e044      	b.n	801198e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8011904:	4b16      	ldr	r3, [pc, #88]	; (8011960 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8011906:	4a1e      	ldr	r2, [pc, #120]	; (8011980 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 8011908:	601a      	str	r2, [r3, #0]
        break;
 801190a:	e040      	b.n	801198e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 801190c:	683b      	ldr	r3, [r7, #0]
 801190e:	7f1b      	ldrb	r3, [r3, #28]
 8011910:	061b      	lsls	r3, r3, #24
 8011912:	461a      	mov	r2, r3
 8011914:	69bb      	ldr	r3, [r7, #24]
 8011916:	4313      	orrs	r3, r2
 8011918:	4a11      	ldr	r2, [pc, #68]	; (8011960 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 801191a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801191e:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8011920:	4a0f      	ldr	r2, [pc, #60]	; (8011960 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8011922:	697b      	ldr	r3, [r7, #20]
 8011924:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8011926:	683b      	ldr	r3, [r7, #0]
 8011928:	691a      	ldr	r2, [r3, #16]
 801192a:	4b0d      	ldr	r3, [pc, #52]	; (8011960 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 801192c:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 801192e:	4b0c      	ldr	r3, [pc, #48]	; (8011960 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8011930:	4a0d      	ldr	r2, [pc, #52]	; (8011968 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8011932:	601a      	str	r2, [r3, #0]
        break;
 8011934:	e02b      	b.n	801198e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8011936:	683b      	ldr	r3, [r7, #0]
 8011938:	7f1b      	ldrb	r3, [r3, #28]
 801193a:	061b      	lsls	r3, r3, #24
 801193c:	461a      	mov	r2, r3
 801193e:	69bb      	ldr	r3, [r7, #24]
 8011940:	4313      	orrs	r3, r2
 8011942:	4a07      	ldr	r2, [pc, #28]	; (8011960 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8011944:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011948:	61d3      	str	r3, [r2, #28]

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 801194a:	683b      	ldr	r3, [r7, #0]
 801194c:	7f5a      	ldrb	r2, [r3, #29]
 801194e:	683b      	ldr	r3, [r7, #0]
 8011950:	7f9b      	ldrb	r3, [r3, #30]
 8011952:	429a      	cmp	r2, r3
 8011954:	d016      	beq.n	8011984 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b0>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8011956:	4b02      	ldr	r3, [pc, #8]	; (8011960 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8011958:	4a09      	ldr	r2, [pc, #36]	; (8011980 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 801195a:	601a      	str	r2, [r3, #0]
        else
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
        }
        break;
 801195c:	e016      	b.n	801198c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b8>
 801195e:	bf00      	nop
 8011960:	4002b000 	.word	0x4002b000
 8011964:	0002000a 	.word	0x0002000a
 8011968:	00020201 	.word	0x00020201
 801196c:	00020009 	.word	0x00020009
 8011970:	ffff00ef 	.word	0xffff00ef
 8011974:	080285b0 	.word	0x080285b0
 8011978:	080285cc 	.word	0x080285cc
 801197c:	08028538 	.word	0x08028538
 8011980:	00010201 	.word	0x00010201
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8011984:	4b04      	ldr	r3, [pc, #16]	; (8011998 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c4>)
 8011986:	f240 2201 	movw	r2, #513	; 0x201
 801198a:	601a      	str	r2, [r3, #0]
        break;
 801198c:	bf00      	nop
    }
}
 801198e:	bf00      	nop
 8011990:	3724      	adds	r7, #36	; 0x24
 8011992:	46bd      	mov	sp, r7
 8011994:	bd90      	pop	{r4, r7, pc}
 8011996:	bf00      	nop
 8011998:	4002b000 	.word	0x4002b000

0801199c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 801199c:	b590      	push	{r4, r7, lr}
 801199e:	b085      	sub	sp, #20
 80119a0:	af00      	add	r7, sp, #0
 80119a2:	6078      	str	r0, [r7, #4]
 80119a4:	6039      	str	r1, [r7, #0]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80119a6:	683b      	ldr	r3, [r7, #0]
 80119a8:	7f9b      	ldrb	r3, [r3, #30]
 80119aa:	4619      	mov	r1, r3
 80119ac:	6878      	ldr	r0, [r7, #4]
 80119ae:	f7ff fe47 	bl	8011640 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 80119b2:	60f8      	str	r0, [r7, #12]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 80119b4:	4a3b      	ldr	r2, [pc, #236]	; (8011aa4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80119b6:	68fb      	ldr	r3, [r7, #12]
 80119b8:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80119ba:	683b      	ldr	r3, [r7, #0]
 80119bc:	8adb      	ldrh	r3, [r3, #22]
 80119be:	461a      	mov	r2, r3
 80119c0:	683b      	ldr	r3, [r7, #0]
 80119c2:	8a9b      	ldrh	r3, [r3, #20]
 80119c4:	041b      	lsls	r3, r3, #16
 80119c6:	431a      	orrs	r2, r3
 80119c8:	4b36      	ldr	r3, [pc, #216]	; (8011aa4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80119ca:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80119cc:	683b      	ldr	r3, [r7, #0]
 80119ce:	691a      	ldr	r2, [r3, #16]
 80119d0:	4b34      	ldr	r3, [pc, #208]	; (8011aa4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80119d2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80119d4:	683b      	ldr	r3, [r7, #0]
 80119d6:	8b5b      	ldrh	r3, [r3, #26]
 80119d8:	461a      	mov	r2, r3
 80119da:	683b      	ldr	r3, [r7, #0]
 80119dc:	8a9b      	ldrh	r3, [r3, #20]
 80119de:	1ad2      	subs	r2, r2, r3
 80119e0:	4b30      	ldr	r3, [pc, #192]	; (8011aa4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80119e2:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 80119e4:	683b      	ldr	r3, [r7, #0]
 80119e6:	681b      	ldr	r3, [r3, #0]
 80119e8:	2b08      	cmp	r3, #8
 80119ea:	d12e      	bne.n	8011a4a <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xae>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80119ec:	683b      	ldr	r3, [r7, #0]
 80119ee:	8b5b      	ldrh	r3, [r3, #26]
 80119f0:	461a      	mov	r2, r3
 80119f2:	683b      	ldr	r3, [r7, #0]
 80119f4:	8a9b      	ldrh	r3, [r3, #20]
 80119f6:	1ad2      	subs	r2, r2, r3
 80119f8:	4b2a      	ldr	r3, [pc, #168]	; (8011aa4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80119fa:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80119fc:	683b      	ldr	r3, [r7, #0]
 80119fe:	8b5b      	ldrh	r3, [r3, #26]
 8011a00:	461a      	mov	r2, r3
 8011a02:	683b      	ldr	r3, [r7, #0]
 8011a04:	8a9b      	ldrh	r3, [r3, #20]
 8011a06:	1ad2      	subs	r2, r2, r3
 8011a08:	4b26      	ldr	r3, [pc, #152]	; (8011aa4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8011a0a:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8011a0c:	4a25      	ldr	r2, [pc, #148]	; (8011aa4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8011a0e:	68fb      	ldr	r3, [r7, #12]
 8011a10:	6253      	str	r3, [r2, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8011a12:	683b      	ldr	r3, [r7, #0]
 8011a14:	7f1b      	ldrb	r3, [r3, #28]
 8011a16:	061b      	lsls	r3, r3, #24
 8011a18:	4619      	mov	r1, r3
 8011a1a:	4a22      	ldr	r2, [pc, #136]	; (8011aa4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8011a1c:	4b22      	ldr	r3, [pc, #136]	; (8011aa8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10c>)
 8011a1e:	430b      	orrs	r3, r1
 8011a20:	61d3      	str	r3, [r2, #28]

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8011a22:	683b      	ldr	r3, [r7, #0]
 8011a24:	330c      	adds	r3, #12
 8011a26:	4c1f      	ldr	r4, [pc, #124]	; (8011aa4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8011a28:	4618      	mov	r0, r3
 8011a2a:	f7ff fc87 	bl	801133c <_ZNK8touchgfx9colortypecvmEv>
 8011a2e:	4603      	mov	r3, r0
 8011a30:	6223      	str	r3, [r4, #32]

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8011a32:	683b      	ldr	r3, [r7, #0]
 8011a34:	691a      	ldr	r2, [r3, #16]
 8011a36:	4b1b      	ldr	r3, [pc, #108]	; (8011aa4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8011a38:	615a      	str	r2, [r3, #20]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8011a3a:	683b      	ldr	r3, [r7, #0]
 8011a3c:	691a      	ldr	r2, [r3, #16]
 8011a3e:	4b19      	ldr	r3, [pc, #100]	; (8011aa4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8011a40:	60da      	str	r2, [r3, #12]

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 8011a42:	4b18      	ldr	r3, [pc, #96]	; (8011aa4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8011a44:	4a19      	ldr	r2, [pc, #100]	; (8011aac <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x110>)
 8011a46:	601a      	str	r2, [r3, #0]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
    }
}
 8011a48:	e027      	b.n	8011a9a <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xfe>
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8011a4a:	4a16      	ldr	r2, [pc, #88]	; (8011aa4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8011a4c:	68fb      	ldr	r3, [r7, #12]
 8011a4e:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 8011a50:	4b14      	ldr	r3, [pc, #80]	; (8011aa4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8011a52:	2200      	movs	r2, #0
 8011a54:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));
 8011a56:	683b      	ldr	r3, [r7, #0]
 8011a58:	330c      	adds	r3, #12
 8011a5a:	4618      	mov	r0, r3
 8011a5c:	f7ff fc6e 	bl	801133c <_ZNK8touchgfx9colortypecvmEv>
 8011a60:	4603      	mov	r3, r0
 8011a62:	0a1b      	lsrs	r3, r3, #8
 8011a64:	f403 4478 	and.w	r4, r3, #63488	; 0xf800
 8011a68:	683b      	ldr	r3, [r7, #0]
 8011a6a:	330c      	adds	r3, #12
 8011a6c:	4618      	mov	r0, r3
 8011a6e:	f7ff fc65 	bl	801133c <_ZNK8touchgfx9colortypecvmEv>
 8011a72:	4603      	mov	r3, r0
 8011a74:	095b      	lsrs	r3, r3, #5
 8011a76:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8011a7a:	431c      	orrs	r4, r3
 8011a7c:	683b      	ldr	r3, [r7, #0]
 8011a7e:	330c      	adds	r3, #12
 8011a80:	4618      	mov	r0, r3
 8011a82:	f7ff fc5b 	bl	801133c <_ZNK8touchgfx9colortypecvmEv>
 8011a86:	4603      	mov	r3, r0
 8011a88:	08db      	lsrs	r3, r3, #3
 8011a8a:	f003 031f 	and.w	r3, r3, #31
 8011a8e:	4a05      	ldr	r2, [pc, #20]	; (8011aa4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8011a90:	4323      	orrs	r3, r4
 8011a92:	6393      	str	r3, [r2, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8011a94:	4b03      	ldr	r3, [pc, #12]	; (8011aa4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8011a96:	4a06      	ldr	r2, [pc, #24]	; (8011ab0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x114>)
 8011a98:	601a      	str	r2, [r3, #0]
}
 8011a9a:	bf00      	nop
 8011a9c:	3714      	adds	r7, #20
 8011a9e:	46bd      	mov	sp, r7
 8011aa0:	bd90      	pop	{r4, r7, pc}
 8011aa2:	bf00      	nop
 8011aa4:	4002b000 	.word	0x4002b000
 8011aa8:	00010009 	.word	0x00010009
 8011aac:	00020201 	.word	0x00020201
 8011ab0:	00030201 	.word	0x00030201

08011ab4 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 8011ab4:	b580      	push	{r7, lr}
 8011ab6:	b082      	sub	sp, #8
 8011ab8:	af00      	add	r7, sp, #0
 8011aba:	6078      	str	r0, [r7, #4]
 8011abc:	4a05      	ldr	r2, [pc, #20]	; (8011ad4 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	601a      	str	r2, [r3, #0]
 8011ac2:	687b      	ldr	r3, [r7, #4]
 8011ac4:	4618      	mov	r0, r3
 8011ac6:	f7ff fc45 	bl	8011354 <_ZN8touchgfx9DMA_QueueD1Ev>
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	4618      	mov	r0, r3
 8011ace:	3708      	adds	r7, #8
 8011ad0:	46bd      	mov	sp, r7
 8011ad2:	bd80      	pop	{r7, pc}
 8011ad4:	0802af38 	.word	0x0802af38

08011ad8 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8011ad8:	b580      	push	{r7, lr}
 8011ada:	b082      	sub	sp, #8
 8011adc:	af00      	add	r7, sp, #0
 8011ade:	6078      	str	r0, [r7, #4]
 8011ae0:	6878      	ldr	r0, [r7, #4]
 8011ae2:	f7ff ffe7 	bl	8011ab4 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8011ae6:	2114      	movs	r1, #20
 8011ae8:	6878      	ldr	r0, [r7, #4]
 8011aea:	f014 fe4c 	bl	8026786 <_ZdlPvj>
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	4618      	mov	r0, r3
 8011af2:	3708      	adds	r7, #8
 8011af4:	46bd      	mov	sp, r7
 8011af6:	bd80      	pop	{r7, pc}

08011af8 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
     * Registers an array of texts. This function is called automatically from
     * touchgfx_generic_init(). Should not be called under normal circumstances.
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
 8011af8:	b480      	push	{r7}
 8011afa:	b083      	sub	sp, #12
 8011afc:	af00      	add	r7, sp, #0
 8011afe:	6078      	str	r0, [r7, #4]
    {
        texts = t;
 8011b00:	4a04      	ldr	r2, [pc, #16]	; (8011b14 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	6013      	str	r3, [r2, #0]
    }
 8011b06:	bf00      	nop
 8011b08:	370c      	adds	r7, #12
 8011b0a:	46bd      	mov	sp, r7
 8011b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b10:	4770      	bx	lr
 8011b12:	bf00      	nop
 8011b14:	20024484 	.word	0x20024484

08011b18 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 8011b18:	b480      	push	{r7}
 8011b1a:	b085      	sub	sp, #20
 8011b1c:	af00      	add	r7, sp, #0
 8011b1e:	60f8      	str	r0, [r7, #12]
 8011b20:	60b9      	str	r1, [r7, #8]
 8011b22:	607a      	str	r2, [r7, #4]
 8011b24:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 8011b26:	4a0b      	ldr	r2, [pc, #44]	; (8011b54 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 8011b28:	68fb      	ldr	r3, [r7, #12]
 8011b2a:	601a      	str	r2, [r3, #0]
 8011b2c:	68fb      	ldr	r3, [r7, #12]
 8011b2e:	68ba      	ldr	r2, [r7, #8]
 8011b30:	605a      	str	r2, [r3, #4]
 8011b32:	68fb      	ldr	r3, [r7, #12]
 8011b34:	687a      	ldr	r2, [r7, #4]
 8011b36:	609a      	str	r2, [r3, #8]
 8011b38:	68fb      	ldr	r3, [r7, #12]
 8011b3a:	683a      	ldr	r2, [r7, #0]
 8011b3c:	60da      	str	r2, [r3, #12]
 8011b3e:	68fb      	ldr	r3, [r7, #12]
 8011b40:	69ba      	ldr	r2, [r7, #24]
 8011b42:	611a      	str	r2, [r3, #16]
    {
    }
 8011b44:	68fb      	ldr	r3, [r7, #12]
 8011b46:	4618      	mov	r0, r3
 8011b48:	3714      	adds	r7, #20
 8011b4a:	46bd      	mov	sp, r7
 8011b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b50:	4770      	bx	lr
 8011b52:	bf00      	nop
 8011b54:	0802a5dc 	.word	0x0802a5dc

08011b58 <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 8011b58:	b480      	push	{r7}
 8011b5a:	b083      	sub	sp, #12
 8011b5c:	af00      	add	r7, sp, #0
 8011b5e:	6078      	str	r0, [r7, #4]
    {
 8011b60:	4a04      	ldr	r2, [pc, #16]	; (8011b74 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	601a      	str	r2, [r3, #0]
    }
 8011b66:	687b      	ldr	r3, [r7, #4]
 8011b68:	4618      	mov	r0, r3
 8011b6a:	370c      	adds	r7, #12
 8011b6c:	46bd      	mov	sp, r7
 8011b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b72:	4770      	bx	lr
 8011b74:	0802a5dc 	.word	0x0802a5dc

08011b78 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 8011b78:	b580      	push	{r7, lr}
 8011b7a:	b082      	sub	sp, #8
 8011b7c:	af00      	add	r7, sp, #0
 8011b7e:	6078      	str	r0, [r7, #4]
    }
 8011b80:	6878      	ldr	r0, [r7, #4]
 8011b82:	f7ff ffe9 	bl	8011b58 <_ZN8touchgfx7MVPHeapD1Ev>
 8011b86:	2114      	movs	r1, #20
 8011b88:	6878      	ldr	r0, [r7, #4]
 8011b8a:	f014 fdfc 	bl	8026786 <_ZdlPvj>
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	4618      	mov	r0, r3
 8011b92:	3708      	adds	r7, #8
 8011b94:	46bd      	mov	sp, r7
 8011b96:	bd80      	pop	{r7, pc}

08011b98 <_ZN8touchgfx3LCDD1Ev>:
        : textureMapperClass(0)
    {
    }

    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 8011b98:	b480      	push	{r7}
 8011b9a:	b083      	sub	sp, #12
 8011b9c:	af00      	add	r7, sp, #0
 8011b9e:	6078      	str	r0, [r7, #4]
    {
 8011ba0:	4a04      	ldr	r2, [pc, #16]	; (8011bb4 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	601a      	str	r2, [r3, #0]
    }
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	4618      	mov	r0, r3
 8011baa:	370c      	adds	r7, #12
 8011bac:	46bd      	mov	sp, r7
 8011bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bb2:	4770      	bx	lr
 8011bb4:	0802b0c0 	.word	0x0802b0c0

08011bb8 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 8011bb8:	b580      	push	{r7, lr}
 8011bba:	b082      	sub	sp, #8
 8011bbc:	af00      	add	r7, sp, #0
 8011bbe:	6078      	str	r0, [r7, #4]
    }
 8011bc0:	6878      	ldr	r0, [r7, #4]
 8011bc2:	f7ff ffe9 	bl	8011b98 <_ZN8touchgfx3LCDD1Ev>
 8011bc6:	2108      	movs	r1, #8
 8011bc8:	6878      	ldr	r0, [r7, #4]
 8011bca:	f014 fddc 	bl	8026786 <_ZdlPvj>
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	4618      	mov	r0, r3
 8011bd2:	3708      	adds	r7, #8
 8011bd4:	46bd      	mov	sp, r7
 8011bd6:	bd80      	pop	{r7, pc}

08011bd8 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 8011bd8:	b480      	push	{r7}
 8011bda:	b083      	sub	sp, #12
 8011bdc:	af00      	add	r7, sp, #0
 8011bde:	6078      	str	r0, [r7, #4]
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	2200      	movs	r2, #0
 8011be4:	801a      	strh	r2, [r3, #0]
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	2200      	movs	r2, #0
 8011bea:	805a      	strh	r2, [r3, #2]
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	2200      	movs	r2, #0
 8011bf0:	809a      	strh	r2, [r3, #4]
 8011bf2:	687b      	ldr	r3, [r7, #4]
 8011bf4:	2200      	movs	r2, #0
 8011bf6:	80da      	strh	r2, [r3, #6]
 8011bf8:	687b      	ldr	r3, [r7, #4]
 8011bfa:	2200      	movs	r2, #0
 8011bfc:	811a      	strh	r2, [r3, #8]
 8011bfe:	687b      	ldr	r3, [r7, #4]
 8011c00:	2200      	movs	r2, #0
 8011c02:	815a      	strh	r2, [r3, #10]
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	2200      	movs	r2, #0
 8011c08:	819a      	strh	r2, [r3, #12]
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	2200      	movs	r2, #0
 8011c0e:	739a      	strb	r2, [r3, #14]
        {
        }
 8011c10:	687b      	ldr	r3, [r7, #4]
 8011c12:	4618      	mov	r0, r3
 8011c14:	370c      	adds	r7, #12
 8011c16:	46bd      	mov	sp, r7
 8011c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c1c:	4770      	bx	lr

08011c1e <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 8011c1e:	b580      	push	{r7, lr}
 8011c20:	b082      	sub	sp, #8
 8011c22:	af00      	add	r7, sp, #0
 8011c24:	6078      	str	r0, [r7, #4]
        : drag(), listener(0), dragThresholdValue(0)
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	4618      	mov	r0, r3
 8011c2a:	f7ff ffd5 	bl	8011bd8 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	2200      	movs	r2, #0
 8011c32:	611a      	str	r2, [r3, #16]
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	2200      	movs	r2, #0
 8011c38:	829a      	strh	r2, [r3, #20]
    {
    }
 8011c3a:	687b      	ldr	r3, [r7, #4]
 8011c3c:	4618      	mov	r0, r3
 8011c3e:	3708      	adds	r7, #8
 8011c40:	46bd      	mov	sp, r7
 8011c42:	bd80      	pop	{r7, pc}

08011c44 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 8011c44:	b580      	push	{r7, lr}
 8011c46:	b084      	sub	sp, #16
 8011c48:	af00      	add	r7, sp, #0
 8011c4a:	60f8      	str	r0, [r7, #12]
 8011c4c:	60b9      	str	r1, [r7, #8]
 8011c4e:	607a      	str	r2, [r7, #4]
 8011c50:	603b      	str	r3, [r7, #0]
          lastRenderMethod(HARDWARE)
 8011c52:	4a55      	ldr	r2, [pc, #340]	; (8011da8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x164>)
 8011c54:	68fb      	ldr	r3, [r7, #12]
 8011c56:	601a      	str	r2, [r3, #0]
 8011c58:	68fb      	ldr	r3, [r7, #12]
 8011c5a:	68ba      	ldr	r2, [r7, #8]
 8011c5c:	605a      	str	r2, [r3, #4]
 8011c5e:	68fb      	ldr	r3, [r7, #12]
 8011c60:	687a      	ldr	r2, [r7, #4]
 8011c62:	609a      	str	r2, [r3, #8]
 8011c64:	68fb      	ldr	r3, [r7, #12]
 8011c66:	683a      	ldr	r2, [r7, #0]
 8011c68:	60da      	str	r2, [r3, #12]
 8011c6a:	68fb      	ldr	r3, [r7, #12]
 8011c6c:	2200      	movs	r2, #0
 8011c6e:	611a      	str	r2, [r3, #16]
 8011c70:	68fb      	ldr	r3, [r7, #12]
 8011c72:	2200      	movs	r2, #0
 8011c74:	615a      	str	r2, [r3, #20]
 8011c76:	68fb      	ldr	r3, [r7, #12]
 8011c78:	2200      	movs	r2, #0
 8011c7a:	619a      	str	r2, [r3, #24]
 8011c7c:	68fb      	ldr	r3, [r7, #12]
 8011c7e:	331c      	adds	r3, #28
 8011c80:	4618      	mov	r0, r3
 8011c82:	f7ff ffcc 	bl	8011c1e <_ZN8touchgfx8GesturesC1Ev>
 8011c86:	68fb      	ldr	r3, [r7, #12]
 8011c88:	2200      	movs	r2, #0
 8011c8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8011c8e:	68fb      	ldr	r3, [r7, #12]
 8011c90:	2200      	movs	r2, #0
 8011c92:	639a      	str	r2, [r3, #56]	; 0x38
 8011c94:	68fb      	ldr	r3, [r7, #12]
 8011c96:	2200      	movs	r2, #0
 8011c98:	63da      	str	r2, [r3, #60]	; 0x3c
 8011c9a:	68fb      	ldr	r3, [r7, #12]
 8011c9c:	2200      	movs	r2, #0
 8011c9e:	641a      	str	r2, [r3, #64]	; 0x40
 8011ca0:	68fb      	ldr	r3, [r7, #12]
 8011ca2:	2200      	movs	r2, #0
 8011ca4:	645a      	str	r2, [r3, #68]	; 0x44
 8011ca6:	68fb      	ldr	r3, [r7, #12]
 8011ca8:	2200      	movs	r2, #0
 8011caa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8011cae:	68fb      	ldr	r3, [r7, #12]
 8011cb0:	2201      	movs	r2, #1
 8011cb2:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 8011cb6:	68fb      	ldr	r3, [r7, #12]
 8011cb8:	2200      	movs	r2, #0
 8011cba:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8011cbe:	68fb      	ldr	r3, [r7, #12]
 8011cc0:	2200      	movs	r2, #0
 8011cc2:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 8011cc6:	68fb      	ldr	r3, [r7, #12]
 8011cc8:	2200      	movs	r2, #0
 8011cca:	64da      	str	r2, [r3, #76]	; 0x4c
 8011ccc:	68fb      	ldr	r3, [r7, #12]
 8011cce:	3350      	adds	r3, #80	; 0x50
 8011cd0:	4618      	mov	r0, r3
 8011cd2:	f7fc fdba 	bl	800e84a <_ZN8touchgfx4RectC1Ev>
 8011cd6:	68fb      	ldr	r3, [r7, #12]
 8011cd8:	2200      	movs	r2, #0
 8011cda:	659a      	str	r2, [r3, #88]	; 0x58
 8011cdc:	68fb      	ldr	r3, [r7, #12]
 8011cde:	2200      	movs	r2, #0
 8011ce0:	65da      	str	r2, [r3, #92]	; 0x5c
 8011ce2:	68fb      	ldr	r3, [r7, #12]
 8011ce4:	2200      	movs	r2, #0
 8011ce6:	661a      	str	r2, [r3, #96]	; 0x60
 8011ce8:	68fb      	ldr	r3, [r7, #12]
 8011cea:	2201      	movs	r2, #1
 8011cec:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8011cf0:	68fb      	ldr	r3, [r7, #12]
 8011cf2:	2200      	movs	r2, #0
 8011cf4:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 8011cf8:	68fb      	ldr	r3, [r7, #12]
 8011cfa:	2200      	movs	r2, #0
 8011cfc:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 8011d00:	68fb      	ldr	r3, [r7, #12]
 8011d02:	2201      	movs	r2, #1
 8011d04:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 8011d08:	68fb      	ldr	r3, [r7, #12]
 8011d0a:	2200      	movs	r2, #0
 8011d0c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8011d10:	68fb      	ldr	r3, [r7, #12]
 8011d12:	2200      	movs	r2, #0
 8011d14:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 8011d18:	68fb      	ldr	r3, [r7, #12]
 8011d1a:	2200      	movs	r2, #0
 8011d1c:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 8011d20:	68fb      	ldr	r3, [r7, #12]
 8011d22:	2200      	movs	r2, #0
 8011d24:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 8011d28:	68fb      	ldr	r3, [r7, #12]
 8011d2a:	2200      	movs	r2, #0
 8011d2c:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8011d30:	68fb      	ldr	r3, [r7, #12]
 8011d32:	2200      	movs	r2, #0
 8011d34:	671a      	str	r2, [r3, #112]	; 0x70
 8011d36:	68fb      	ldr	r3, [r7, #12]
 8011d38:	2200      	movs	r2, #0
 8011d3a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 8011d3e:	68fb      	ldr	r3, [r7, #12]
 8011d40:	2200      	movs	r2, #0
 8011d42:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 8011d46:	68fb      	ldr	r3, [r7, #12]
 8011d48:	2200      	movs	r2, #0
 8011d4a:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 8011d4e:	68fb      	ldr	r3, [r7, #12]
 8011d50:	2201      	movs	r2, #1
 8011d52:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 8011d56:	68fb      	ldr	r3, [r7, #12]
 8011d58:	2201      	movs	r2, #1
 8011d5a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        instance = this;
 8011d5e:	4a13      	ldr	r2, [pc, #76]	; (8011dac <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x168>)
 8011d60:	68fb      	ldr	r3, [r7, #12]
 8011d62:	6013      	str	r3, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8011d64:	4a12      	ldr	r2, [pc, #72]	; (8011db0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 8011d66:	8b3b      	ldrh	r3, [r7, #24]
 8011d68:	8013      	strh	r3, [r2, #0]
 8011d6a:	4b11      	ldr	r3, [pc, #68]	; (8011db0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 8011d6c:	881a      	ldrh	r2, [r3, #0]
 8011d6e:	4b11      	ldr	r3, [pc, #68]	; (8011db4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x170>)
 8011d70:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8011d72:	4a11      	ldr	r2, [pc, #68]	; (8011db8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 8011d74:	8bbb      	ldrh	r3, [r7, #28]
 8011d76:	8013      	strh	r3, [r2, #0]
 8011d78:	4b0f      	ldr	r3, [pc, #60]	; (8011db8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 8011d7a:	881a      	ldrh	r2, [r3, #0]
 8011d7c:	4b0f      	ldr	r3, [pc, #60]	; (8011dbc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x178>)
 8011d7e:	801a      	strh	r2, [r3, #0]
        DISPLAY_ROTATION = rotate0;
 8011d80:	4b0f      	ldr	r3, [pc, #60]	; (8011dc0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x17c>)
 8011d82:	2200      	movs	r2, #0
 8011d84:	701a      	strb	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8011d86:	8b3a      	ldrh	r2, [r7, #24]
 8011d88:	8bbb      	ldrh	r3, [r7, #28]
 8011d8a:	429a      	cmp	r2, r3
 8011d8c:	bf34      	ite	cc
 8011d8e:	2301      	movcc	r3, #1
 8011d90:	2300      	movcs	r3, #0
 8011d92:	b2db      	uxtb	r3, r3
 8011d94:	461a      	mov	r2, r3
 8011d96:	68fb      	ldr	r3, [r7, #12]
 8011d98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 8011d9c:	68fb      	ldr	r3, [r7, #12]
 8011d9e:	4618      	mov	r0, r3
 8011da0:	3710      	adds	r7, #16
 8011da2:	46bd      	mov	sp, r7
 8011da4:	bd80      	pop	{r7, pc}
 8011da6:	bf00      	nop
 8011da8:	0802ae10 	.word	0x0802ae10
 8011dac:	20024428 	.word	0x20024428
 8011db0:	2002441c 	.word	0x2002441c
 8011db4:	20024422 	.word	0x20024422
 8011db8:	2002441e 	.word	0x2002441e
 8011dbc:	20024424 	.word	0x20024424
 8011dc0:	20024420 	.word	0x20024420

08011dc4 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 8011dc4:	b580      	push	{r7, lr}
 8011dc6:	b082      	sub	sp, #8
 8011dc8:	af00      	add	r7, sp, #0
 8011dca:	6078      	str	r0, [r7, #4]
 8011dcc:	6039      	str	r1, [r7, #0]
    {
        app.gotoscreenScreenNoTransition();
 8011dce:	683b      	ldr	r3, [r7, #0]
 8011dd0:	4618      	mov	r0, r3
 8011dd2:	f7fc fa9d 	bl	800e310 <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv>
    }
 8011dd6:	bf00      	nop
 8011dd8:	3708      	adds	r7, #8
 8011dda:	46bd      	mov	sp, r7
 8011ddc:	bd80      	pop	{r7, pc}
	...

08011de0 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 8011de0:	b580      	push	{r7, lr}
 8011de2:	b086      	sub	sp, #24
 8011de4:	af02      	add	r7, sp, #8
 8011de6:	60f8      	str	r0, [r7, #12]
 8011de8:	60b9      	str	r1, [r7, #8]
 8011dea:	607a      	str	r2, [r7, #4]
 8011dec:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 8011dee:	68f8      	ldr	r0, [r7, #12]
 8011df0:	69bb      	ldr	r3, [r7, #24]
 8011df2:	9300      	str	r3, [sp, #0]
 8011df4:	683b      	ldr	r3, [r7, #0]
 8011df6:	687a      	ldr	r2, [r7, #4]
 8011df8:	68b9      	ldr	r1, [r7, #8]
 8011dfa:	f7ff fe8d 	bl	8011b18 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 8011dfe:	4a04      	ldr	r2, [pc, #16]	; (8011e10 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 8011e00:	68fb      	ldr	r3, [r7, #12]
 8011e02:	601a      	str	r2, [r3, #0]
    {

    }
 8011e04:	68fb      	ldr	r3, [r7, #12]
 8011e06:	4618      	mov	r0, r3
 8011e08:	3710      	adds	r7, #16
 8011e0a:	46bd      	mov	sp, r7
 8011e0c:	bd80      	pop	{r7, pc}
 8011e0e:	bf00      	nop
 8011e10:	0802a5c8 	.word	0x0802a5c8

08011e14 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8011e14:	b580      	push	{r7, lr}
 8011e16:	af00      	add	r7, sp, #0
 8011e18:	4801      	ldr	r0, [pc, #4]	; (8011e20 <__tcf_0+0xc>)
 8011e1a:	f000 f967 	bl	80120ec <_ZN12FrontendHeapD1Ev>
 8011e1e:	bd80      	pop	{r7, pc}
 8011e20:	2001e1e8 	.word	0x2001e1e8

08011e24 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 8011e24:	b580      	push	{r7, lr}
 8011e26:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 8011e28:	4b12      	ldr	r3, [pc, #72]	; (8011e74 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8011e2a:	781b      	ldrb	r3, [r3, #0]
 8011e2c:	f3bf 8f5b 	dmb	ish
 8011e30:	b2db      	uxtb	r3, r3
 8011e32:	f003 0301 	and.w	r3, r3, #1
 8011e36:	2b00      	cmp	r3, #0
 8011e38:	bf0c      	ite	eq
 8011e3a:	2301      	moveq	r3, #1
 8011e3c:	2300      	movne	r3, #0
 8011e3e:	b2db      	uxtb	r3, r3
 8011e40:	2b00      	cmp	r3, #0
 8011e42:	d013      	beq.n	8011e6c <_ZN12FrontendHeap11getInstanceEv+0x48>
 8011e44:	480b      	ldr	r0, [pc, #44]	; (8011e74 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8011e46:	f014 fca0 	bl	802678a <__cxa_guard_acquire>
 8011e4a:	4603      	mov	r3, r0
 8011e4c:	2b00      	cmp	r3, #0
 8011e4e:	bf14      	ite	ne
 8011e50:	2301      	movne	r3, #1
 8011e52:	2300      	moveq	r3, #0
 8011e54:	b2db      	uxtb	r3, r3
 8011e56:	2b00      	cmp	r3, #0
 8011e58:	d008      	beq.n	8011e6c <_ZN12FrontendHeap11getInstanceEv+0x48>
 8011e5a:	4807      	ldr	r0, [pc, #28]	; (8011e78 <_ZN12FrontendHeap11getInstanceEv+0x54>)
 8011e5c:	f000 f868 	bl	8011f30 <_ZN12FrontendHeapC1Ev>
 8011e60:	4806      	ldr	r0, [pc, #24]	; (8011e7c <_ZN12FrontendHeap11getInstanceEv+0x58>)
 8011e62:	f014 fcdd 	bl	8026820 <atexit>
 8011e66:	4803      	ldr	r0, [pc, #12]	; (8011e74 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8011e68:	f014 fc9b 	bl	80267a2 <__cxa_guard_release>
        return instance;
 8011e6c:	4b02      	ldr	r3, [pc, #8]	; (8011e78 <_ZN12FrontendHeap11getInstanceEv+0x54>)
    }
 8011e6e:	4618      	mov	r0, r3
 8011e70:	bd80      	pop	{r7, pc}
 8011e72:	bf00      	nop
 8011e74:	2001e470 	.word	0x2001e470
 8011e78:	2001e1e8 	.word	0x2001e1e8
 8011e7c:	08011e15 	.word	0x08011e15

08011e80 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 8011e80:	b580      	push	{r7, lr}
 8011e82:	b082      	sub	sp, #8
 8011e84:	af00      	add	r7, sp, #0
 8011e86:	6078      	str	r0, [r7, #4]
 8011e88:	4a05      	ldr	r2, [pc, #20]	; (8011ea0 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	601a      	str	r2, [r3, #0]
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	4618      	mov	r0, r3
 8011e92:	f7ff fe61 	bl	8011b58 <_ZN8touchgfx7MVPHeapD1Ev>
 8011e96:	687b      	ldr	r3, [r7, #4]
 8011e98:	4618      	mov	r0, r3
 8011e9a:	3708      	adds	r7, #8
 8011e9c:	46bd      	mov	sp, r7
 8011e9e:	bd80      	pop	{r7, pc}
 8011ea0:	0802a5c8 	.word	0x0802a5c8

08011ea4 <_ZN16FrontendHeapBaseD0Ev>:
 8011ea4:	b580      	push	{r7, lr}
 8011ea6:	b082      	sub	sp, #8
 8011ea8:	af00      	add	r7, sp, #0
 8011eaa:	6078      	str	r0, [r7, #4]
 8011eac:	6878      	ldr	r0, [r7, #4]
 8011eae:	f7ff ffe7 	bl	8011e80 <_ZN16FrontendHeapBaseD1Ev>
 8011eb2:	2114      	movs	r1, #20
 8011eb4:	6878      	ldr	r0, [r7, #4]
 8011eb6:	f014 fc66 	bl	8026786 <_ZdlPvj>
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	4618      	mov	r0, r3
 8011ebe:	3708      	adds	r7, #8
 8011ec0:	46bd      	mov	sp, r7
 8011ec2:	bd80      	pop	{r7, pc}

08011ec4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 8011ec4:	b580      	push	{r7, lr}
 8011ec6:	b082      	sub	sp, #8
 8011ec8:	af00      	add	r7, sp, #0
 8011eca:	6078      	str	r0, [r7, #4]
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	4618      	mov	r0, r3
 8011ed0:	f002 ff16 	bl	8014d00 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8011ed4:	4a03      	ldr	r2, [pc, #12]	; (8011ee4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8011ed6:	687b      	ldr	r3, [r7, #4]
 8011ed8:	601a      	str	r2, [r3, #0]
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	4618      	mov	r0, r3
 8011ede:	3708      	adds	r7, #8
 8011ee0:	46bd      	mov	sp, r7
 8011ee2:	bd80      	pop	{r7, pc}
 8011ee4:	0802a594 	.word	0x0802a594

08011ee8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 8011ee8:	b580      	push	{r7, lr}
 8011eea:	b082      	sub	sp, #8
 8011eec:	af00      	add	r7, sp, #0
 8011eee:	6078      	str	r0, [r7, #4]
 8011ef0:	687b      	ldr	r3, [r7, #4]
 8011ef2:	4618      	mov	r0, r3
 8011ef4:	f002 ff04 	bl	8014d00 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8011ef8:	4a03      	ldr	r2, [pc, #12]	; (8011f08 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8011efa:	687b      	ldr	r3, [r7, #4]
 8011efc:	601a      	str	r2, [r3, #0]
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	4618      	mov	r0, r3
 8011f02:	3708      	adds	r7, #8
 8011f04:	46bd      	mov	sp, r7
 8011f06:	bd80      	pop	{r7, pc}
 8011f08:	0802a560 	.word	0x0802a560

08011f0c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 8011f0c:	b580      	push	{r7, lr}
 8011f0e:	b082      	sub	sp, #8
 8011f10:	af00      	add	r7, sp, #0
 8011f12:	6078      	str	r0, [r7, #4]
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	4618      	mov	r0, r3
 8011f18:	f002 fef2 	bl	8014d00 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8011f1c:	4a03      	ldr	r2, [pc, #12]	; (8011f2c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8011f1e:	687b      	ldr	r3, [r7, #4]
 8011f20:	601a      	str	r2, [r3, #0]
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	4618      	mov	r0, r3
 8011f26:	3708      	adds	r7, #8
 8011f28:	46bd      	mov	sp, r7
 8011f2a:	bd80      	pop	{r7, pc}
 8011f2c:	0802a52c 	.word	0x0802a52c

08011f30 <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8011f30:	b590      	push	{r4, r7, lr}
 8011f32:	b085      	sub	sp, #20
 8011f34:	af02      	add	r7, sp, #8
 8011f36:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 8011f38:	6878      	ldr	r0, [r7, #4]
 8011f3a:	687b      	ldr	r3, [r7, #4]
 8011f3c:	f103 0114 	add.w	r1, r3, #20
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8011f46:	687b      	ldr	r3, [r7, #4]
 8011f48:	f503 748a 	add.w	r4, r3, #276	; 0x114
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8011f4c:	687b      	ldr	r3, [r7, #4]
 8011f4e:	f503 7396 	add.w	r3, r3, #300	; 0x12c
                     app(model, *this)
 8011f52:	9300      	str	r3, [sp, #0]
 8011f54:	4623      	mov	r3, r4
 8011f56:	f7ff ff43 	bl	8011de0 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 8011f5a:	4a18      	ldr	r2, [pc, #96]	; (8011fbc <_ZN12FrontendHeapC1Ev+0x8c>)
 8011f5c:	687b      	ldr	r3, [r7, #4]
 8011f5e:	601a      	str	r2, [r3, #0]
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	3314      	adds	r3, #20
 8011f64:	4618      	mov	r0, r3
 8011f66:	f7ff ffad 	bl	8011ec4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	332c      	adds	r3, #44	; 0x2c
 8011f6e:	4618      	mov	r0, r3
 8011f70:	f7ff ffba 	bl	8011ee8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8011f7a:	4618      	mov	r0, r3
 8011f7c:	f7ff ffc6 	bl	8011f0c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8011f80:	687b      	ldr	r3, [r7, #4]
 8011f82:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8011f86:	4618      	mov	r0, r3
 8011f88:	f7fd fbf8 	bl	800f77c <_ZN5ModelC1Ev>
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	f503 7096 	add.w	r0, r3, #300	; 0x12c
 8011f92:	687b      	ldr	r3, [r7, #4]
 8011f94:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8011f98:	687a      	ldr	r2, [r7, #4]
 8011f9a:	4619      	mov	r1, r3
 8011f9c:	f7fd fbd8 	bl	800f750 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
    {
        gotoStartScreen(app);
 8011fa0:	687a      	ldr	r2, [r7, #4]
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8011fa8:	4619      	mov	r1, r3
 8011faa:	4610      	mov	r0, r2
 8011fac:	f7ff ff0a 	bl	8011dc4 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 8011fb0:	687b      	ldr	r3, [r7, #4]
 8011fb2:	4618      	mov	r0, r3
 8011fb4:	370c      	adds	r7, #12
 8011fb6:	46bd      	mov	sp, r7
 8011fb8:	bd90      	pop	{r4, r7, pc}
 8011fba:	bf00      	nop
 8011fbc:	0802a518 	.word	0x0802a518

08011fc0 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 8011fc0:	b580      	push	{r7, lr}
 8011fc2:	b086      	sub	sp, #24
 8011fc4:	af02      	add	r7, sp, #8
 8011fc6:	60f8      	str	r0, [r7, #12]
 8011fc8:	60b9      	str	r1, [r7, #8]
 8011fca:	607a      	str	r2, [r7, #4]
 8011fcc:	603b      	str	r3, [r7, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 8011fce:	68f8      	ldr	r0, [r7, #12]
 8011fd0:	8bbb      	ldrh	r3, [r7, #28]
 8011fd2:	9301      	str	r3, [sp, #4]
 8011fd4:	8b3b      	ldrh	r3, [r7, #24]
 8011fd6:	9300      	str	r3, [sp, #0]
 8011fd8:	683b      	ldr	r3, [r7, #0]
 8011fda:	687a      	ldr	r2, [r7, #4]
 8011fdc:	68b9      	ldr	r1, [r7, #8]
 8011fde:	f7ff fe31 	bl	8011c44 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 8011fe2:	4a04      	ldr	r2, [pc, #16]	; (8011ff4 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8011fe4:	68fb      	ldr	r3, [r7, #12]
 8011fe6:	601a      	str	r2, [r3, #0]
    }
 8011fe8:	68fb      	ldr	r3, [r7, #12]
 8011fea:	4618      	mov	r0, r3
 8011fec:	3710      	adds	r7, #16
 8011fee:	46bd      	mov	sp, r7
 8011ff0:	bd80      	pop	{r7, pc}
 8011ff2:	bf00      	nop
 8011ff4:	0802a668 	.word	0x0802a668

08011ff8 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 8011ff8:	b580      	push	{r7, lr}
 8011ffa:	b086      	sub	sp, #24
 8011ffc:	af02      	add	r7, sp, #8
 8011ffe:	60f8      	str	r0, [r7, #12]
 8012000:	60b9      	str	r1, [r7, #8]
 8012002:	607a      	str	r2, [r7, #4]
 8012004:	603b      	str	r3, [r7, #0]
 8012006:	68f8      	ldr	r0, [r7, #12]
 8012008:	8bbb      	ldrh	r3, [r7, #28]
 801200a:	9301      	str	r3, [sp, #4]
 801200c:	8b3b      	ldrh	r3, [r7, #24]
 801200e:	9300      	str	r3, [sp, #0]
 8012010:	683b      	ldr	r3, [r7, #0]
 8012012:	687a      	ldr	r2, [r7, #4]
 8012014:	68b9      	ldr	r1, [r7, #8]
 8012016:	f7ff ffd3 	bl	8011fc0 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 801201a:	4a04      	ldr	r2, [pc, #16]	; (801202c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 801201c:	68fb      	ldr	r3, [r7, #12]
 801201e:	601a      	str	r2, [r3, #0]
    }
 8012020:	68fb      	ldr	r3, [r7, #12]
 8012022:	4618      	mov	r0, r3
 8012024:	3710      	adds	r7, #16
 8012026:	46bd      	mov	sp, r7
 8012028:	bd80      	pop	{r7, pc}
 801202a:	bf00      	nop
 801202c:	0802a348 	.word	0x0802a348

08012030 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 8012030:	b480      	push	{r7}
 8012032:	b083      	sub	sp, #12
 8012034:	af00      	add	r7, sp, #0
 8012036:	6078      	str	r0, [r7, #4]
 8012038:	4a04      	ldr	r2, [pc, #16]	; (801204c <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 801203a:	687b      	ldr	r3, [r7, #4]
 801203c:	601a      	str	r2, [r3, #0]
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	4618      	mov	r0, r3
 8012042:	370c      	adds	r7, #12
 8012044:	46bd      	mov	sp, r7
 8012046:	f85d 7b04 	ldr.w	r7, [sp], #4
 801204a:	4770      	bx	lr
 801204c:	0802a330 	.word	0x0802a330

08012050 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 8012050:	b580      	push	{r7, lr}
 8012052:	b082      	sub	sp, #8
 8012054:	af00      	add	r7, sp, #0
 8012056:	6078      	str	r0, [r7, #4]
 8012058:	687b      	ldr	r3, [r7, #4]
 801205a:	4618      	mov	r0, r3
 801205c:	f7ff ffe8 	bl	8012030 <_ZN8touchgfx15TouchControllerC1Ev>
 8012060:	4a03      	ldr	r2, [pc, #12]	; (8012070 <_ZN20STM32TouchControllerC1Ev+0x20>)
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	601a      	str	r2, [r3, #0]
 8012066:	687b      	ldr	r3, [r7, #4]
 8012068:	4618      	mov	r0, r3
 801206a:	3708      	adds	r7, #8
 801206c:	46bd      	mov	sp, r7
 801206e:	bd80      	pop	{r7, pc}
 8012070:	0802a318 	.word	0x0802a318

08012074 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 800, 480);

void touchgfx_init()
{
 8012074:	b590      	push	{r4, r7, lr}
 8012076:	b085      	sub	sp, #20
 8012078:	af02      	add	r7, sp, #8
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 801207a:	f7fd f937 	bl	800f2ec <_ZN14BitmapDatabase11getInstanceEv>
 801207e:	4604      	mov	r4, r0
 8012080:	f7fd f93e 	bl	800f300 <_ZN14BitmapDatabase15getInstanceSizeEv>
 8012084:	4603      	mov	r3, r0
 8012086:	4619      	mov	r1, r3
 8012088:	2300      	movs	r3, #0
 801208a:	9300      	str	r3, [sp, #0]
 801208c:	2300      	movs	r3, #0
 801208e:	2200      	movs	r2, #0
 8012090:	4620      	mov	r0, r4
 8012092:	f008 fd8b 	bl	801abac <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
    TypedText::registerTexts(&texts);
 8012096:	4809      	ldr	r0, [pc, #36]	; (80120bc <touchgfx_init+0x48>)
 8012098:	f7ff fd2e 	bl	8011af8 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
    Texts::setLanguage(0);
 801209c:	2000      	movs	r0, #0
 801209e:	f7fd fa73 	bl	800f588 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 80120a2:	4807      	ldr	r0, [pc, #28]	; (80120c0 <touchgfx_init+0x4c>)
 80120a4:	f008 fcea 	bl	801aa7c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

    FrontendHeap& heap = FrontendHeap::getInstance();
 80120a8:	f7ff febc 	bl	8011e24 <_ZN12FrontendHeap11getInstanceEv>
 80120ac:	6078      	str	r0, [r7, #4]
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 80120ae:	4805      	ldr	r0, [pc, #20]	; (80120c4 <touchgfx_init+0x50>)
 80120b0:	f7fd ff3e 	bl	800ff30 <_ZN11TouchGFXHAL10initializeEv>
}
 80120b4:	bf00      	nop
 80120b6:	370c      	adds	r7, #12
 80120b8:	46bd      	mov	sp, r7
 80120ba:	bd90      	pop	{r4, r7, pc}
 80120bc:	2001f290 	.word	0x2001f290
 80120c0:	2000002c 	.word	0x2000002c
 80120c4:	2001f294 	.word	0x2001f294

080120c8 <touchgfx_components_init>:

void touchgfx_components_init()
{
 80120c8:	b480      	push	{r7}
 80120ca:	af00      	add	r7, sp, #0
}
 80120cc:	bf00      	nop
 80120ce:	46bd      	mov	sp, r7
 80120d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120d4:	4770      	bx	lr
	...

080120d8 <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 80120d8:	b580      	push	{r7, lr}
 80120da:	af00      	add	r7, sp, #0
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 80120dc:	4802      	ldr	r0, [pc, #8]	; (80120e8 <touchgfx_taskEntry+0x10>)
 80120de:	f003 f91a 	bl	8015316 <_ZN8touchgfx3HAL9taskEntryEv>
}
 80120e2:	bf00      	nop
 80120e4:	bd80      	pop	{r7, pc}
 80120e6:	bf00      	nop
 80120e8:	2001f294 	.word	0x2001f294

080120ec <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 80120ec:	b580      	push	{r7, lr}
 80120ee:	b082      	sub	sp, #8
 80120f0:	af00      	add	r7, sp, #0
 80120f2:	6078      	str	r0, [r7, #4]
 80120f4:	4a10      	ldr	r2, [pc, #64]	; (8012138 <_ZN12FrontendHeapD1Ev+0x4c>)
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	601a      	str	r2, [r3, #0]
 80120fa:	687b      	ldr	r3, [r7, #4]
 80120fc:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8012100:	4618      	mov	r0, r3
 8012102:	f7fd faef 	bl	800f6e4 <_ZN19FrontendApplicationD1Ev>
 8012106:	687b      	ldr	r3, [r7, #4]
 8012108:	f503 738a 	add.w	r3, r3, #276	; 0x114
 801210c:	4618      	mov	r0, r3
 801210e:	f000 f827 	bl	8012160 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	332c      	adds	r3, #44	; 0x2c
 8012116:	4618      	mov	r0, r3
 8012118:	f000 f844 	bl	80121a4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 801211c:	687b      	ldr	r3, [r7, #4]
 801211e:	3314      	adds	r3, #20
 8012120:	4618      	mov	r0, r3
 8012122:	f000 f861 	bl	80121e8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8012126:	687b      	ldr	r3, [r7, #4]
 8012128:	4618      	mov	r0, r3
 801212a:	f7ff fea9 	bl	8011e80 <_ZN16FrontendHeapBaseD1Ev>
 801212e:	687b      	ldr	r3, [r7, #4]
 8012130:	4618      	mov	r0, r3
 8012132:	3708      	adds	r7, #8
 8012134:	46bd      	mov	sp, r7
 8012136:	bd80      	pop	{r7, pc}
 8012138:	0802a518 	.word	0x0802a518

0801213c <_ZN12FrontendHeapD0Ev>:
 801213c:	b580      	push	{r7, lr}
 801213e:	b082      	sub	sp, #8
 8012140:	af00      	add	r7, sp, #0
 8012142:	6078      	str	r0, [r7, #4]
 8012144:	6878      	ldr	r0, [r7, #4]
 8012146:	f7ff ffd1 	bl	80120ec <_ZN12FrontendHeapD1Ev>
 801214a:	f44f 7122 	mov.w	r1, #648	; 0x288
 801214e:	6878      	ldr	r0, [r7, #4]
 8012150:	f014 fb19 	bl	8026786 <_ZdlPvj>
 8012154:	687b      	ldr	r3, [r7, #4]
 8012156:	4618      	mov	r0, r3
 8012158:	3708      	adds	r7, #8
 801215a:	46bd      	mov	sp, r7
 801215c:	bd80      	pop	{r7, pc}
	...

08012160 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8012160:	b580      	push	{r7, lr}
 8012162:	b082      	sub	sp, #8
 8012164:	af00      	add	r7, sp, #0
 8012166:	6078      	str	r0, [r7, #4]
 8012168:	4a05      	ldr	r2, [pc, #20]	; (8012180 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	601a      	str	r2, [r3, #0]
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	4618      	mov	r0, r3
 8012172:	f002 fdc4 	bl	8014cfe <_ZN8touchgfx17AbstractPartitionD1Ev>
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	4618      	mov	r0, r3
 801217a:	3708      	adds	r7, #8
 801217c:	46bd      	mov	sp, r7
 801217e:	bd80      	pop	{r7, pc}
 8012180:	0802a52c 	.word	0x0802a52c

08012184 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8012184:	b580      	push	{r7, lr}
 8012186:	b082      	sub	sp, #8
 8012188:	af00      	add	r7, sp, #0
 801218a:	6078      	str	r0, [r7, #4]
 801218c:	6878      	ldr	r0, [r7, #4]
 801218e:	f7ff ffe7 	bl	8012160 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8012192:	2114      	movs	r1, #20
 8012194:	6878      	ldr	r0, [r7, #4]
 8012196:	f014 faf6 	bl	8026786 <_ZdlPvj>
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	4618      	mov	r0, r3
 801219e:	3708      	adds	r7, #8
 80121a0:	46bd      	mov	sp, r7
 80121a2:	bd80      	pop	{r7, pc}

080121a4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 80121a4:	b580      	push	{r7, lr}
 80121a6:	b082      	sub	sp, #8
 80121a8:	af00      	add	r7, sp, #0
 80121aa:	6078      	str	r0, [r7, #4]
 80121ac:	4a05      	ldr	r2, [pc, #20]	; (80121c4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	601a      	str	r2, [r3, #0]
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	4618      	mov	r0, r3
 80121b6:	f002 fda2 	bl	8014cfe <_ZN8touchgfx17AbstractPartitionD1Ev>
 80121ba:	687b      	ldr	r3, [r7, #4]
 80121bc:	4618      	mov	r0, r3
 80121be:	3708      	adds	r7, #8
 80121c0:	46bd      	mov	sp, r7
 80121c2:	bd80      	pop	{r7, pc}
 80121c4:	0802a560 	.word	0x0802a560

080121c8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80121c8:	b580      	push	{r7, lr}
 80121ca:	b082      	sub	sp, #8
 80121cc:	af00      	add	r7, sp, #0
 80121ce:	6078      	str	r0, [r7, #4]
 80121d0:	6878      	ldr	r0, [r7, #4]
 80121d2:	f7ff ffe7 	bl	80121a4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80121d6:	21e8      	movs	r1, #232	; 0xe8
 80121d8:	6878      	ldr	r0, [r7, #4]
 80121da:	f014 fad4 	bl	8026786 <_ZdlPvj>
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	4618      	mov	r0, r3
 80121e2:	3708      	adds	r7, #8
 80121e4:	46bd      	mov	sp, r7
 80121e6:	bd80      	pop	{r7, pc}

080121e8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 80121e8:	b580      	push	{r7, lr}
 80121ea:	b082      	sub	sp, #8
 80121ec:	af00      	add	r7, sp, #0
 80121ee:	6078      	str	r0, [r7, #4]
 80121f0:	4a05      	ldr	r2, [pc, #20]	; (8012208 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 80121f2:	687b      	ldr	r3, [r7, #4]
 80121f4:	601a      	str	r2, [r3, #0]
 80121f6:	687b      	ldr	r3, [r7, #4]
 80121f8:	4618      	mov	r0, r3
 80121fa:	f002 fd80 	bl	8014cfe <_ZN8touchgfx17AbstractPartitionD1Ev>
 80121fe:	687b      	ldr	r3, [r7, #4]
 8012200:	4618      	mov	r0, r3
 8012202:	3708      	adds	r7, #8
 8012204:	46bd      	mov	sp, r7
 8012206:	bd80      	pop	{r7, pc}
 8012208:	0802a594 	.word	0x0802a594

0801220c <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 801220c:	b580      	push	{r7, lr}
 801220e:	b082      	sub	sp, #8
 8012210:	af00      	add	r7, sp, #0
 8012212:	6078      	str	r0, [r7, #4]
 8012214:	6878      	ldr	r0, [r7, #4]
 8012216:	f7ff ffe7 	bl	80121e8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 801221a:	2118      	movs	r1, #24
 801221c:	6878      	ldr	r0, [r7, #4]
 801221e:	f014 fab2 	bl	8026786 <_ZdlPvj>
 8012222:	687b      	ldr	r3, [r7, #4]
 8012224:	4618      	mov	r0, r3
 8012226:	3708      	adds	r7, #8
 8012228:	46bd      	mov	sp, r7
 801222a:	bd80      	pop	{r7, pc}

0801222c <_ZN8touchgfx8LCD16bppD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD16bpp : public LCD
 801222c:	b580      	push	{r7, lr}
 801222e:	b082      	sub	sp, #8
 8012230:	af00      	add	r7, sp, #0
 8012232:	6078      	str	r0, [r7, #4]
 8012234:	4a05      	ldr	r2, [pc, #20]	; (801224c <_ZN8touchgfx8LCD16bppD1Ev+0x20>)
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	601a      	str	r2, [r3, #0]
 801223a:	687b      	ldr	r3, [r7, #4]
 801223c:	4618      	mov	r0, r3
 801223e:	f7ff fcab 	bl	8011b98 <_ZN8touchgfx3LCDD1Ev>
 8012242:	687b      	ldr	r3, [r7, #4]
 8012244:	4618      	mov	r0, r3
 8012246:	3708      	adds	r7, #8
 8012248:	46bd      	mov	sp, r7
 801224a:	bd80      	pop	{r7, pc}
 801224c:	0802b4cc 	.word	0x0802b4cc

08012250 <_ZN8touchgfx8LCD16bppD0Ev>:
 8012250:	b580      	push	{r7, lr}
 8012252:	b082      	sub	sp, #8
 8012254:	af00      	add	r7, sp, #0
 8012256:	6078      	str	r0, [r7, #4]
 8012258:	6878      	ldr	r0, [r7, #4]
 801225a:	f7ff ffe7 	bl	801222c <_ZN8touchgfx8LCD16bppD1Ev>
 801225e:	2178      	movs	r1, #120	; 0x78
 8012260:	6878      	ldr	r0, [r7, #4]
 8012262:	f014 fa90 	bl	8026786 <_ZdlPvj>
 8012266:	687b      	ldr	r3, [r7, #4]
 8012268:	4618      	mov	r0, r3
 801226a:	3708      	adds	r7, #8
 801226c:	46bd      	mov	sp, r7
 801226e:	bd80      	pop	{r7, pc}

08012270 <_Z41__static_initialization_and_destruction_0ii>:
 8012270:	b580      	push	{r7, lr}
 8012272:	b084      	sub	sp, #16
 8012274:	af02      	add	r7, sp, #8
 8012276:	6078      	str	r0, [r7, #4]
 8012278:	6039      	str	r1, [r7, #0]
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	2b01      	cmp	r3, #1
 801227e:	d119      	bne.n	80122b4 <_Z41__static_initialization_and_destruction_0ii+0x44>
 8012280:	683b      	ldr	r3, [r7, #0]
 8012282:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012286:	4293      	cmp	r3, r2
 8012288:	d114      	bne.n	80122b4 <_Z41__static_initialization_and_destruction_0ii+0x44>
static STM32TouchController tc;
 801228a:	4818      	ldr	r0, [pc, #96]	; (80122ec <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 801228c:	f7ff fee0 	bl	8012050 <_ZN20STM32TouchControllerC1Ev>
static STM32DMA dma;
 8012290:	4817      	ldr	r0, [pc, #92]	; (80122f0 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8012292:	f7ff f90f 	bl	80114b4 <_ZN8STM32DMAC1Ev>
static LCD16bpp display;
 8012296:	4817      	ldr	r0, [pc, #92]	; (80122f4 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8012298:	f00b fd8a 	bl	801ddb0 <_ZN8touchgfx8LCD16bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 800, 480);
 801229c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80122a0:	9301      	str	r3, [sp, #4]
 80122a2:	f44f 7348 	mov.w	r3, #800	; 0x320
 80122a6:	9300      	str	r3, [sp, #0]
 80122a8:	4b10      	ldr	r3, [pc, #64]	; (80122ec <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80122aa:	4a12      	ldr	r2, [pc, #72]	; (80122f4 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80122ac:	4910      	ldr	r1, [pc, #64]	; (80122f0 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80122ae:	4812      	ldr	r0, [pc, #72]	; (80122f8 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80122b0:	f7ff fea2 	bl	8011ff8 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	2b00      	cmp	r3, #0
 80122b8:	d113      	bne.n	80122e2 <_Z41__static_initialization_and_destruction_0ii+0x72>
 80122ba:	683b      	ldr	r3, [r7, #0]
 80122bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80122c0:	4293      	cmp	r3, r2
 80122c2:	d10e      	bne.n	80122e2 <_Z41__static_initialization_and_destruction_0ii+0x72>
 80122c4:	480c      	ldr	r0, [pc, #48]	; (80122f8 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80122c6:	f7fd fec3 	bl	8010050 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 80122ca:	480c      	ldr	r0, [pc, #48]	; (80122fc <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80122cc:	f7fb fa8e 	bl	800d7ec <_ZN23ApplicationFontProviderD1Ev>
static LCD16bpp display;
 80122d0:	4808      	ldr	r0, [pc, #32]	; (80122f4 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80122d2:	f7ff ffab 	bl	801222c <_ZN8touchgfx8LCD16bppD1Ev>
static STM32DMA dma;
 80122d6:	4806      	ldr	r0, [pc, #24]	; (80122f0 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80122d8:	f7ff f916 	bl	8011508 <_ZN8STM32DMAD1Ev>
static STM32TouchController tc;
 80122dc:	4803      	ldr	r0, [pc, #12]	; (80122ec <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80122de:	f7fd fbc9 	bl	800fa74 <_ZN20STM32TouchControllerD1Ev>
}
 80122e2:	bf00      	nop
 80122e4:	3708      	adds	r7, #8
 80122e6:	46bd      	mov	sp, r7
 80122e8:	bd80      	pop	{r7, pc}
 80122ea:	bf00      	nop
 80122ec:	2001e474 	.word	0x2001e474
 80122f0:	2001e478 	.word	0x2001e478
 80122f4:	2001f218 	.word	0x2001f218
 80122f8:	2001f294 	.word	0x2001f294
 80122fc:	2000002c 	.word	0x2000002c

08012300 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    {
        INTS_PR_ELEMENT = (sizeof(typename meta::select_type_maxsize<SupportedTypesList>::type) + sizeof(int) - 1) / sizeof(int),
        SIZE_OF_ELEMENT = INTS_PR_ELEMENT * sizeof(int)
    };

    virtual uint16_t capacity() const
 8012300:	b480      	push	{r7}
 8012302:	b083      	sub	sp, #12
 8012304:	af00      	add	r7, sp, #0
 8012306:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 8012308:	2301      	movs	r3, #1
    }
 801230a:	4618      	mov	r0, r3
 801230c:	370c      	adds	r7, #12
 801230e:	46bd      	mov	sp, r7
 8012310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012314:	4770      	bx	lr

08012316 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
 8012316:	b480      	push	{r7}
 8012318:	b083      	sub	sp, #12
 801231a:	af00      	add	r7, sp, #0
 801231c:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 801231e:	230c      	movs	r3, #12
    }
 8012320:	4618      	mov	r0, r3
 8012322:	370c      	adds	r7, #12
 8012324:	46bd      	mov	sp, r7
 8012326:	f85d 7b04 	ldr.w	r7, [sp], #4
 801232a:	4770      	bx	lr

0801232c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
 801232c:	b480      	push	{r7}
 801232e:	b083      	sub	sp, #12
 8012330:	af00      	add	r7, sp, #0
 8012332:	6078      	str	r0, [r7, #4]
 8012334:	460b      	mov	r3, r1
 8012336:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8012338:	887a      	ldrh	r2, [r7, #2]
 801233a:	4613      	mov	r3, r2
 801233c:	005b      	lsls	r3, r3, #1
 801233e:	4413      	add	r3, r2
 8012340:	009b      	lsls	r3, r3, #2
 8012342:	3308      	adds	r3, #8
 8012344:	687a      	ldr	r2, [r7, #4]
 8012346:	4413      	add	r3, r2
    }
 8012348:	4618      	mov	r0, r3
 801234a:	370c      	adds	r7, #12
 801234c:	46bd      	mov	sp, r7
 801234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012352:	4770      	bx	lr

08012354 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
 8012354:	b480      	push	{r7}
 8012356:	b083      	sub	sp, #12
 8012358:	af00      	add	r7, sp, #0
 801235a:	6078      	str	r0, [r7, #4]
 801235c:	460b      	mov	r3, r1
 801235e:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8012360:	887a      	ldrh	r2, [r7, #2]
 8012362:	4613      	mov	r3, r2
 8012364:	005b      	lsls	r3, r3, #1
 8012366:	4413      	add	r3, r2
 8012368:	009b      	lsls	r3, r3, #2
 801236a:	3308      	adds	r3, #8
 801236c:	687a      	ldr	r2, [r7, #4]
 801236e:	4413      	add	r3, r2
    }
 8012370:	4618      	mov	r0, r3
 8012372:	370c      	adds	r7, #12
 8012374:	46bd      	mov	sp, r7
 8012376:	f85d 7b04 	ldr.w	r7, [sp], #4
 801237a:	4770      	bx	lr

0801237c <_ZNK8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 801237c:	b480      	push	{r7}
 801237e:	b083      	sub	sp, #12
 8012380:	af00      	add	r7, sp, #0
 8012382:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8012384:	2301      	movs	r3, #1
    }
 8012386:	4618      	mov	r0, r3
 8012388:	370c      	adds	r7, #12
 801238a:	46bd      	mov	sp, r7
 801238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012390:	4770      	bx	lr

08012392 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8012392:	b480      	push	{r7}
 8012394:	b083      	sub	sp, #12
 8012396:	af00      	add	r7, sp, #0
 8012398:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 801239a:	23e0      	movs	r3, #224	; 0xe0
    }
 801239c:	4618      	mov	r0, r3
 801239e:	370c      	adds	r7, #12
 80123a0:	46bd      	mov	sp, r7
 80123a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123a6:	4770      	bx	lr

080123a8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 80123a8:	b480      	push	{r7}
 80123aa:	b083      	sub	sp, #12
 80123ac:	af00      	add	r7, sp, #0
 80123ae:	6078      	str	r0, [r7, #4]
 80123b0:	460b      	mov	r3, r1
 80123b2:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80123b4:	887a      	ldrh	r2, [r7, #2]
 80123b6:	4613      	mov	r3, r2
 80123b8:	00db      	lsls	r3, r3, #3
 80123ba:	1a9b      	subs	r3, r3, r2
 80123bc:	015b      	lsls	r3, r3, #5
 80123be:	3308      	adds	r3, #8
 80123c0:	687a      	ldr	r2, [r7, #4]
 80123c2:	4413      	add	r3, r2
    }
 80123c4:	4618      	mov	r0, r3
 80123c6:	370c      	adds	r7, #12
 80123c8:	46bd      	mov	sp, r7
 80123ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123ce:	4770      	bx	lr

080123d0 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 80123d0:	b480      	push	{r7}
 80123d2:	b083      	sub	sp, #12
 80123d4:	af00      	add	r7, sp, #0
 80123d6:	6078      	str	r0, [r7, #4]
 80123d8:	460b      	mov	r3, r1
 80123da:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80123dc:	887a      	ldrh	r2, [r7, #2]
 80123de:	4613      	mov	r3, r2
 80123e0:	00db      	lsls	r3, r3, #3
 80123e2:	1a9b      	subs	r3, r3, r2
 80123e4:	015b      	lsls	r3, r3, #5
 80123e6:	3308      	adds	r3, #8
 80123e8:	687a      	ldr	r2, [r7, #4]
 80123ea:	4413      	add	r3, r2
    }
 80123ec:	4618      	mov	r0, r3
 80123ee:	370c      	adds	r7, #12
 80123f0:	46bd      	mov	sp, r7
 80123f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123f6:	4770      	bx	lr

080123f8 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 80123f8:	b480      	push	{r7}
 80123fa:	b083      	sub	sp, #12
 80123fc:	af00      	add	r7, sp, #0
 80123fe:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8012400:	2301      	movs	r3, #1
    }
 8012402:	4618      	mov	r0, r3
 8012404:	370c      	adds	r7, #12
 8012406:	46bd      	mov	sp, r7
 8012408:	f85d 7b04 	ldr.w	r7, [sp], #4
 801240c:	4770      	bx	lr

0801240e <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 801240e:	b480      	push	{r7}
 8012410:	b083      	sub	sp, #12
 8012412:	af00      	add	r7, sp, #0
 8012414:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8012416:	2310      	movs	r3, #16
    }
 8012418:	4618      	mov	r0, r3
 801241a:	370c      	adds	r7, #12
 801241c:	46bd      	mov	sp, r7
 801241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012422:	4770      	bx	lr

08012424 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8012424:	b480      	push	{r7}
 8012426:	b083      	sub	sp, #12
 8012428:	af00      	add	r7, sp, #0
 801242a:	6078      	str	r0, [r7, #4]
 801242c:	460b      	mov	r3, r1
 801242e:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8012430:	887b      	ldrh	r3, [r7, #2]
 8012432:	011b      	lsls	r3, r3, #4
 8012434:	3308      	adds	r3, #8
 8012436:	687a      	ldr	r2, [r7, #4]
 8012438:	4413      	add	r3, r2
    }
 801243a:	4618      	mov	r0, r3
 801243c:	370c      	adds	r7, #12
 801243e:	46bd      	mov	sp, r7
 8012440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012444:	4770      	bx	lr

08012446 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8012446:	b480      	push	{r7}
 8012448:	b083      	sub	sp, #12
 801244a:	af00      	add	r7, sp, #0
 801244c:	6078      	str	r0, [r7, #4]
 801244e:	460b      	mov	r3, r1
 8012450:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8012452:	887b      	ldrh	r3, [r7, #2]
 8012454:	011b      	lsls	r3, r3, #4
 8012456:	3308      	adds	r3, #8
 8012458:	687a      	ldr	r2, [r7, #4]
 801245a:	4413      	add	r3, r2
    }
 801245c:	4618      	mov	r0, r3
 801245e:	370c      	adds	r7, #12
 8012460:	46bd      	mov	sp, r7
 8012462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012466:	4770      	bx	lr

08012468 <_GLOBAL__sub_I_touchgfx_init>:
 8012468:	b580      	push	{r7, lr}
 801246a:	af00      	add	r7, sp, #0
 801246c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8012470:	2001      	movs	r0, #1
 8012472:	f7ff fefd 	bl	8012270 <_Z41__static_initialization_and_destruction_0ii>
 8012476:	bd80      	pop	{r7, pc}

08012478 <_GLOBAL__sub_D_touchgfx_init>:
 8012478:	b580      	push	{r7, lr}
 801247a:	af00      	add	r7, sp, #0
 801247c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8012480:	2000      	movs	r0, #0
 8012482:	f7ff fef5 	bl	8012270 <_Z41__static_initialization_and_destruction_0ii>
 8012486:	bd80      	pop	{r7, pc}

08012488 <_ZN8touchgfx3HAL18getLCDRefreshCountEv>:
    uint32_t getLCDRefreshCount()
 8012488:	b480      	push	{r7}
 801248a:	b083      	sub	sp, #12
 801248c:	af00      	add	r7, sp, #0
 801248e:	6078      	str	r0, [r7, #4]
        return vSyncForFrame;
 8012490:	687b      	ldr	r3, [r7, #4]
 8012492:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
    }
 8012496:	4618      	mov	r0, r3
 8012498:	370c      	adds	r7, #12
 801249a:	46bd      	mov	sp, r7
 801249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124a0:	4770      	bx	lr
	...

080124a4 <_ZN8touchgfx15VideoControllerD1Ev>:
        STOP,      ///< Stop the video
        SET_REPEAT ///< Set repeat mode
    };

    /** Virtual destructor. */
    virtual ~VideoController()
 80124a4:	b480      	push	{r7}
 80124a6:	b083      	sub	sp, #12
 80124a8:	af00      	add	r7, sp, #0
 80124aa:	6078      	str	r0, [r7, #4]
    {
 80124ac:	4a04      	ldr	r2, [pc, #16]	; (80124c0 <_ZN8touchgfx15VideoControllerD1Ev+0x1c>)
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	601a      	str	r2, [r3, #0]
    }
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	4618      	mov	r0, r3
 80124b6:	370c      	adds	r7, #12
 80124b8:	46bd      	mov	sp, r7
 80124ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124be:	4770      	bx	lr
 80124c0:	0802a62c 	.word	0x0802a62c

080124c4 <_ZN8touchgfx15VideoControllerD0Ev>:
    virtual ~VideoController()
 80124c4:	b580      	push	{r7, lr}
 80124c6:	b082      	sub	sp, #8
 80124c8:	af00      	add	r7, sp, #0
 80124ca:	6078      	str	r0, [r7, #4]
    }
 80124cc:	6878      	ldr	r0, [r7, #4]
 80124ce:	f7ff ffe9 	bl	80124a4 <_ZN8touchgfx15VideoControllerD1Ev>
 80124d2:	2104      	movs	r1, #4
 80124d4:	6878      	ldr	r0, [r7, #4]
 80124d6:	f014 f956 	bl	8026786 <_ZdlPvj>
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	4618      	mov	r0, r3
 80124de:	3708      	adds	r7, #8
 80124e0:	46bd      	mov	sp, r7
 80124e2:	bd80      	pop	{r7, pc}

080124e4 <_ZN8touchgfx11VideoWidget14setVideoBufferEPh>:
     * Set video buffer data.
     * Only used when video frames are decoded to a buffer and not directly to the framebuffer.
     *
     * @param [in] videoBuffer Video buffer.
     */
    void setVideoBuffer(uint8_t* const videoBuffer)
 80124e4:	b480      	push	{r7}
 80124e6:	b083      	sub	sp, #12
 80124e8:	af00      	add	r7, sp, #0
 80124ea:	6078      	str	r0, [r7, #4]
 80124ec:	6039      	str	r1, [r7, #0]
    {
        buffer = videoBuffer;
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	683a      	ldr	r2, [r7, #0]
 80124f2:	631a      	str	r2, [r3, #48]	; 0x30
    }
 80124f4:	bf00      	nop
 80124f6:	370c      	adds	r7, #12
 80124f8:	46bd      	mov	sp, r7
 80124fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124fe:	4770      	bx	lr

08012500 <_ZN8touchgfx11VideoWidget20setVideoBufferFormatENS_6Bitmap12BitmapFormatEss>:
     *
     * @param bufferFormat Format of the videoBuffer (RGB565 or RGB888)
     * @param width  Width of the videoBuffer in pixels
     * @param height Height of the videoBuffer in pixels
     */
    void setVideoBufferFormat(Bitmap::BitmapFormat bufferFormat, int16_t width, int16_t height)
 8012500:	b480      	push	{r7}
 8012502:	b085      	sub	sp, #20
 8012504:	af00      	add	r7, sp, #0
 8012506:	60f8      	str	r0, [r7, #12]
 8012508:	4608      	mov	r0, r1
 801250a:	4611      	mov	r1, r2
 801250c:	461a      	mov	r2, r3
 801250e:	4603      	mov	r3, r0
 8012510:	72fb      	strb	r3, [r7, #11]
 8012512:	460b      	mov	r3, r1
 8012514:	813b      	strh	r3, [r7, #8]
 8012516:	4613      	mov	r3, r2
 8012518:	80fb      	strh	r3, [r7, #6]
    {
        format = bufferFormat;
 801251a:	68fb      	ldr	r3, [r7, #12]
 801251c:	7afa      	ldrb	r2, [r7, #11]
 801251e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        bufferWidth = width;
 8012522:	68fb      	ldr	r3, [r7, #12]
 8012524:	893a      	ldrh	r2, [r7, #8]
 8012526:	86da      	strh	r2, [r3, #54]	; 0x36
        bufferHeight = height;
 8012528:	68fb      	ldr	r3, [r7, #12]
 801252a:	88fa      	ldrh	r2, [r7, #6]
 801252c:	871a      	strh	r2, [r3, #56]	; 0x38
    }
 801252e:	bf00      	nop
 8012530:	3714      	adds	r7, #20
 8012532:	46bd      	mov	sp, r7
 8012534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012538:	4770      	bx	lr
	...

0801253c <__NVIC_EnableIRQ>:
{
 801253c:	b480      	push	{r7}
 801253e:	b083      	sub	sp, #12
 8012540:	af00      	add	r7, sp, #0
 8012542:	4603      	mov	r3, r0
 8012544:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8012546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801254a:	2b00      	cmp	r3, #0
 801254c:	db0b      	blt.n	8012566 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801254e:	79fb      	ldrb	r3, [r7, #7]
 8012550:	f003 021f 	and.w	r2, r3, #31
 8012554:	4907      	ldr	r1, [pc, #28]	; (8012574 <__NVIC_EnableIRQ+0x38>)
 8012556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801255a:	095b      	lsrs	r3, r3, #5
 801255c:	2001      	movs	r0, #1
 801255e:	fa00 f202 	lsl.w	r2, r0, r2
 8012562:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8012566:	bf00      	nop
 8012568:	370c      	adds	r7, #12
 801256a:	46bd      	mov	sp, r7
 801256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012570:	4770      	bx	lr
 8012572:	bf00      	nop
 8012574:	e000e100 	.word	0xe000e100

08012578 <__NVIC_DisableIRQ>:
{
 8012578:	b480      	push	{r7}
 801257a:	b083      	sub	sp, #12
 801257c:	af00      	add	r7, sp, #0
 801257e:	4603      	mov	r3, r0
 8012580:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8012582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012586:	2b00      	cmp	r3, #0
 8012588:	db12      	blt.n	80125b0 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801258a:	79fb      	ldrb	r3, [r7, #7]
 801258c:	f003 021f 	and.w	r2, r3, #31
 8012590:	490a      	ldr	r1, [pc, #40]	; (80125bc <__NVIC_DisableIRQ+0x44>)
 8012592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012596:	095b      	lsrs	r3, r3, #5
 8012598:	2001      	movs	r0, #1
 801259a:	fa00 f202 	lsl.w	r2, r0, r2
 801259e:	3320      	adds	r3, #32
 80125a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80125a4:	f3bf 8f4f 	dsb	sy
}
 80125a8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80125aa:	f3bf 8f6f 	isb	sy
}
 80125ae:	bf00      	nop
}
 80125b0:	bf00      	nop
 80125b2:	370c      	adds	r7, #12
 80125b4:	46bd      	mov	sp, r7
 80125b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125ba:	4770      	bx	lr
 80125bc:	e000e100 	.word	0xe000e100

080125c0 <__NVIC_SetPriority>:
{
 80125c0:	b480      	push	{r7}
 80125c2:	b083      	sub	sp, #12
 80125c4:	af00      	add	r7, sp, #0
 80125c6:	4603      	mov	r3, r0
 80125c8:	6039      	str	r1, [r7, #0]
 80125ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80125cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80125d0:	2b00      	cmp	r3, #0
 80125d2:	db0a      	blt.n	80125ea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80125d4:	683b      	ldr	r3, [r7, #0]
 80125d6:	b2da      	uxtb	r2, r3
 80125d8:	490c      	ldr	r1, [pc, #48]	; (801260c <__NVIC_SetPriority+0x4c>)
 80125da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80125de:	0112      	lsls	r2, r2, #4
 80125e0:	b2d2      	uxtb	r2, r2
 80125e2:	440b      	add	r3, r1
 80125e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80125e8:	e00a      	b.n	8012600 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80125ea:	683b      	ldr	r3, [r7, #0]
 80125ec:	b2da      	uxtb	r2, r3
 80125ee:	4908      	ldr	r1, [pc, #32]	; (8012610 <__NVIC_SetPriority+0x50>)
 80125f0:	79fb      	ldrb	r3, [r7, #7]
 80125f2:	f003 030f 	and.w	r3, r3, #15
 80125f6:	3b04      	subs	r3, #4
 80125f8:	0112      	lsls	r2, r2, #4
 80125fa:	b2d2      	uxtb	r2, r2
 80125fc:	440b      	add	r3, r1
 80125fe:	761a      	strb	r2, [r3, #24]
}
 8012600:	bf00      	nop
 8012602:	370c      	adds	r7, #12
 8012604:	46bd      	mov	sp, r7
 8012606:	f85d 7b04 	ldr.w	r7, [sp], #4
 801260a:	4770      	bx	lr
 801260c:	e000e100 	.word	0xe000e100
 8012610:	e000ed00 	.word	0xe000ed00

08012614 <SCB_CleanInvalidateDCache>:
{
 8012614:	b480      	push	{r7}
 8012616:	b085      	sub	sp, #20
 8012618:	af00      	add	r7, sp, #0
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 801261a:	4b21      	ldr	r3, [pc, #132]	; (80126a0 <SCB_CleanInvalidateDCache+0x8c>)
 801261c:	2200      	movs	r2, #0
 801261e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8012622:	f3bf 8f4f 	dsb	sy
}
 8012626:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8012628:	4b1d      	ldr	r3, [pc, #116]	; (80126a0 <SCB_CleanInvalidateDCache+0x8c>)
 801262a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801262e:	607b      	str	r3, [r7, #4]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	0b5b      	lsrs	r3, r3, #13
 8012634:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8012638:	60fb      	str	r3, [r7, #12]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 801263a:	687b      	ldr	r3, [r7, #4]
 801263c:	08db      	lsrs	r3, r3, #3
 801263e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8012642:	60bb      	str	r3, [r7, #8]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8012644:	68fb      	ldr	r3, [r7, #12]
 8012646:	015a      	lsls	r2, r3, #5
 8012648:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 801264c:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 801264e:	68ba      	ldr	r2, [r7, #8]
 8012650:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8012652:	4913      	ldr	r1, [pc, #76]	; (80126a0 <SCB_CleanInvalidateDCache+0x8c>)
 8012654:	4313      	orrs	r3, r2
 8012656:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 801265a:	68bb      	ldr	r3, [r7, #8]
 801265c:	1e5a      	subs	r2, r3, #1
 801265e:	60ba      	str	r2, [r7, #8]
 8012660:	2b00      	cmp	r3, #0
 8012662:	bf14      	ite	ne
 8012664:	2301      	movne	r3, #1
 8012666:	2300      	moveq	r3, #0
 8012668:	b2db      	uxtb	r3, r3
 801266a:	2b00      	cmp	r3, #0
 801266c:	d000      	beq.n	8012670 <SCB_CleanInvalidateDCache+0x5c>
      do {
 801266e:	e7e9      	b.n	8012644 <SCB_CleanInvalidateDCache+0x30>
    } while(sets-- != 0U);
 8012670:	68fb      	ldr	r3, [r7, #12]
 8012672:	1e5a      	subs	r2, r3, #1
 8012674:	60fa      	str	r2, [r7, #12]
 8012676:	2b00      	cmp	r3, #0
 8012678:	bf14      	ite	ne
 801267a:	2301      	movne	r3, #1
 801267c:	2300      	moveq	r3, #0
 801267e:	b2db      	uxtb	r3, r3
 8012680:	2b00      	cmp	r3, #0
 8012682:	d000      	beq.n	8012686 <SCB_CleanInvalidateDCache+0x72>
    do {
 8012684:	e7d9      	b.n	801263a <SCB_CleanInvalidateDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8012686:	f3bf 8f4f 	dsb	sy
}
 801268a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801268c:	f3bf 8f6f 	isb	sy
}
 8012690:	bf00      	nop
}
 8012692:	bf00      	nop
 8012694:	3714      	adds	r7, #20
 8012696:	46bd      	mov	sp, r7
 8012698:	f85d 7b04 	ldr.w	r7, [sp], #4
 801269c:	4770      	bx	lr
 801269e:	bf00      	nop
 80126a0:	e000ed00 	.word	0xe000ed00

080126a4 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
    LOCATION_PRAGMA_NOLOAD("TouchGFX_Framebuffer")
    uint32_t frameBuf[(800 * 480 * 2 + 3) / 4] LOCATION_ATTRIBUTE_NOLOAD("TouchGFX_Framebuffer");
}

void TouchGFXGeneratedHAL::initialize()
{
 80126a4:	b5b0      	push	{r4, r5, r7, lr}
 80126a6:	b082      	sub	sp, #8
 80126a8:	af00      	add	r7, sp, #0
 80126aa:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 80126ac:	687b      	ldr	r3, [r7, #4]
 80126ae:	4618      	mov	r0, r3
 80126b0:	f002 fe1d 	bl	80152ee <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 80126b4:	687d      	ldr	r5, [r7, #4]
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	681b      	ldr	r3, [r3, #0]
 80126ba:	3364      	adds	r3, #100	; 0x64
 80126bc:	681c      	ldr	r4, [r3, #0]
 80126be:	f005 fde1 	bl	8018284 <_ZN8touchgfx11Application11getInstanceEv>
 80126c2:	4603      	mov	r3, r0
 80126c4:	4619      	mov	r1, r3
 80126c6:	4628      	mov	r0, r5
 80126c8:	47a0      	blx	r4
    setFrameBufferStartAddresses((void*)frameBuf, (void*)0, (void*)0);
 80126ca:	6878      	ldr	r0, [r7, #4]
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	681b      	ldr	r3, [r3, #0]
 80126d0:	3388      	adds	r3, #136	; 0x88
 80126d2:	681c      	ldr	r4, [r3, #0]
 80126d4:	2300      	movs	r3, #0
 80126d6:	2200      	movs	r2, #0
 80126d8:	4907      	ldr	r1, [pc, #28]	; (80126f8 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x54>)
 80126da:	47a0      	blx	r4
    /*
     * Add hardware decoder to video controller
     */
    videoController.addDecoder(mjpegdecoder1, 0);
 80126dc:	2200      	movs	r2, #0
 80126de:	4907      	ldr	r1, [pc, #28]	; (80126fc <_ZN20TouchGFXGeneratedHAL10initializeEv+0x58>)
 80126e0:	4807      	ldr	r0, [pc, #28]	; (8012700 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x5c>)
 80126e2:	f000 f93d 	bl	8012960 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10addDecoderER12MJPEGDecoderm>
    videoController.setRGBBuffer((uint8_t*)videoRGBBuffer, sizeof(videoRGBBuffer));
 80126e6:	4a07      	ldr	r2, [pc, #28]	; (8012704 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x60>)
 80126e8:	4907      	ldr	r1, [pc, #28]	; (8012708 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x64>)
 80126ea:	4805      	ldr	r0, [pc, #20]	; (8012700 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x5c>)
 80126ec:	f000 f958 	bl	80129a0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setRGBBufferEPhj>
}
 80126f0:	bf00      	nop
 80126f2:	3708      	adds	r7, #8
 80126f4:	46bd      	mov	sp, r7
 80126f6:	bdb0      	pop	{r4, r5, r7, pc}
 80126f8:	c00bb800 	.word	0xc00bb800
 80126fc:	2001f310 	.word	0x2001f310
 8012700:	2001f354 	.word	0x2001f354
 8012704:	000bb800 	.word	0x000bb800
 8012708:	c0000000 	.word	0xc0000000

0801270c <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 801270c:	b580      	push	{r7, lr}
 801270e:	b082      	sub	sp, #8
 8012710:	af00      	add	r7, sp, #0
 8012712:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 8012714:	2109      	movs	r1, #9
 8012716:	205a      	movs	r0, #90	; 0x5a
 8012718:	f7ff ff52 	bl	80125c0 <__NVIC_SetPriority>
}
 801271c:	bf00      	nop
 801271e:	3708      	adds	r7, #8
 8012720:	46bd      	mov	sp, r7
 8012722:	bd80      	pop	{r7, pc}

08012724 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 8012724:	b580      	push	{r7, lr}
 8012726:	b082      	sub	sp, #8
 8012728:	af00      	add	r7, sp, #0
 801272a:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 801272c:	205a      	movs	r0, #90	; 0x5a
 801272e:	f7ff ff05 	bl	801253c <__NVIC_EnableIRQ>
}
 8012732:	bf00      	nop
 8012734:	3708      	adds	r7, #8
 8012736:	46bd      	mov	sp, r7
 8012738:	bd80      	pop	{r7, pc}

0801273a <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 801273a:	b580      	push	{r7, lr}
 801273c:	b082      	sub	sp, #8
 801273e:	af00      	add	r7, sp, #0
 8012740:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 8012742:	205a      	movs	r0, #90	; 0x5a
 8012744:	f7ff ff18 	bl	8012578 <__NVIC_DisableIRQ>
}
 8012748:	bf00      	nop
 801274a:	3708      	adds	r7, #8
 801274c:	46bd      	mov	sp, r7
 801274e:	bd80      	pop	{r7, pc}

08012750 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 8012750:	b480      	push	{r7}
 8012752:	b083      	sub	sp, #12
 8012754:	af00      	add	r7, sp, #0
 8012756:	6078      	str	r0, [r7, #4]
}
 8012758:	bf00      	nop
 801275a:	370c      	adds	r7, #12
 801275c:	46bd      	mov	sp, r7
 801275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012762:	4770      	bx	lr

08012764 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:

bool TouchGFXGeneratedHAL::beginFrame()
{
 8012764:	b580      	push	{r7, lr}
 8012766:	b082      	sub	sp, #8
 8012768:	af00      	add	r7, sp, #0
 801276a:	6078      	str	r0, [r7, #4]
    return HAL::beginFrame();
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	4618      	mov	r0, r3
 8012770:	f002 fda4 	bl	80152bc <_ZN8touchgfx3HAL10beginFrameEv>
 8012774:	4603      	mov	r3, r0
}
 8012776:	4618      	mov	r0, r3
 8012778:	3708      	adds	r7, #8
 801277a:	46bd      	mov	sp, r7
 801277c:	bd80      	pop	{r7, pc}
	...

08012780 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:

void TouchGFXGeneratedHAL::endFrame()
{
 8012780:	b580      	push	{r7, lr}
 8012782:	b082      	sub	sp, #8
 8012784:	af00      	add	r7, sp, #0
 8012786:	6078      	str	r0, [r7, #4]
    HAL::endFrame();
 8012788:	687b      	ldr	r3, [r7, #4]
 801278a:	4618      	mov	r0, r3
 801278c:	f002 fda2 	bl	80152d4 <_ZN8touchgfx3HAL8endFrameEv>
    videoController.endFrame();
 8012790:	4803      	ldr	r0, [pc, #12]	; (80127a0 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x20>)
 8012792:	f000 f91b 	bl	80129cc <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE8endFrameEv>
}
 8012796:	bf00      	nop
 8012798:	3708      	adds	r7, #8
 801279a:	46bd      	mov	sp, r7
 801279c:	bd80      	pop	{r7, pc}
 801279e:	bf00      	nop
 80127a0:	2001f354 	.word	0x2001f354

080127a4 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:
    fbPtr += rect.y * lcd().framebufferStride() + rect.x * 2;
    return fbPtr;
}

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 80127a4:	b480      	push	{r7}
 80127a6:	b083      	sub	sp, #12
 80127a8:	af00      	add	r7, sp, #0
 80127aa:	6078      	str	r0, [r7, #4]
    return (uint16_t*)frameBuf;
 80127ac:	4b03      	ldr	r3, [pc, #12]	; (80127bc <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
}
 80127ae:	4618      	mov	r0, r3
 80127b0:	370c      	adds	r7, #12
 80127b2:	46bd      	mov	sp, r7
 80127b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127b8:	4770      	bx	lr
 80127ba:	bf00      	nop
 80127bc:	c00bb800 	.word	0xc00bb800

080127c0 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 80127c0:	b480      	push	{r7}
 80127c2:	b083      	sub	sp, #12
 80127c4:	af00      	add	r7, sp, #0
 80127c6:	6078      	str	r0, [r7, #4]
 80127c8:	6039      	str	r1, [r7, #0]
    //setTFTFrameBuffer() not used for selected display interface
}
 80127ca:	bf00      	nop
 80127cc:	370c      	adds	r7, #12
 80127ce:	46bd      	mov	sp, r7
 80127d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127d4:	4770      	bx	lr

080127d6 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 80127d6:	b580      	push	{r7, lr}
 80127d8:	b082      	sub	sp, #8
 80127da:	af00      	add	r7, sp, #0
 80127dc:	6078      	str	r0, [r7, #4]
 80127de:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 80127e0:	687b      	ldr	r3, [r7, #4]
 80127e2:	6839      	ldr	r1, [r7, #0]
 80127e4:	4618      	mov	r0, r3
 80127e6:	f002 fd33 	bl	8015250 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 80127ea:	bf00      	nop
 80127ec:	3708      	adds	r7, #8
 80127ee:	46bd      	mov	sp, r7
 80127f0:	bd80      	pop	{r7, pc}

080127f2 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 80127f2:	b580      	push	{r7, lr}
 80127f4:	b084      	sub	sp, #16
 80127f6:	af00      	add	r7, sp, #0
 80127f8:	60f8      	str	r0, [r7, #12]
 80127fa:	60b9      	str	r1, [r7, #8]
 80127fc:	607a      	str	r2, [r7, #4]
 80127fe:	603b      	str	r3, [r7, #0]
    return HAL::blockCopy(dest, src, numBytes);
 8012800:	68f8      	ldr	r0, [r7, #12]
 8012802:	683b      	ldr	r3, [r7, #0]
 8012804:	687a      	ldr	r2, [r7, #4]
 8012806:	68b9      	ldr	r1, [r7, #8]
 8012808:	f002 fe8d 	bl	8015526 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 801280c:	4603      	mov	r3, r0
}
 801280e:	4618      	mov	r0, r3
 8012810:	3710      	adds	r7, #16
 8012812:	46bd      	mov	sp, r7
 8012814:	bd80      	pop	{r7, pc}
	...

08012818 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv>:

void TouchGFXGeneratedHAL::InvalidateCache()
{
 8012818:	b580      	push	{r7, lr}
 801281a:	b082      	sub	sp, #8
 801281c:	af00      	add	r7, sp, #0
 801281e:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8012820:	4b08      	ldr	r3, [pc, #32]	; (8012844 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x2c>)
 8012822:	695b      	ldr	r3, [r3, #20]
 8012824:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8012828:	2b00      	cmp	r3, #0
 801282a:	bf14      	ite	ne
 801282c:	2301      	movne	r3, #1
 801282e:	2300      	moveq	r3, #0
 8012830:	b2db      	uxtb	r3, r3
 8012832:	2b00      	cmp	r3, #0
 8012834:	d001      	beq.n	801283a <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x22>
    {
        SCB_CleanInvalidateDCache();
 8012836:	f7ff feed 	bl	8012614 <SCB_CleanInvalidateDCache>
    }
}
 801283a:	bf00      	nop
 801283c:	3708      	adds	r7, #8
 801283e:	46bd      	mov	sp, r7
 8012840:	bd80      	pop	{r7, pc}
 8012842:	bf00      	nop
 8012844:	e000ed00 	.word	0xe000ed00

08012848 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:

void TouchGFXGeneratedHAL::FlushCache()
{
 8012848:	b580      	push	{r7, lr}
 801284a:	b082      	sub	sp, #8
 801284c:	af00      	add	r7, sp, #0
 801284e:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8012850:	4b08      	ldr	r3, [pc, #32]	; (8012874 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x2c>)
 8012852:	695b      	ldr	r3, [r3, #20]
 8012854:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8012858:	2b00      	cmp	r3, #0
 801285a:	bf14      	ite	ne
 801285c:	2301      	movne	r3, #1
 801285e:	2300      	moveq	r3, #0
 8012860:	b2db      	uxtb	r3, r3
 8012862:	2b00      	cmp	r3, #0
 8012864:	d001      	beq.n	801286a <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x22>
    {
        SCB_CleanInvalidateDCache();
 8012866:	f7ff fed5 	bl	8012614 <SCB_CleanInvalidateDCache>
    }
}
 801286a:	bf00      	nop
 801286c:	3708      	adds	r7, #8
 801286e:	46bd      	mov	sp, r7
 8012870:	bd80      	pop	{r7, pc}
 8012872:	bf00      	nop
 8012874:	e000ed00 	.word	0xe000ed00

08012878 <videoTaskFunc>:

extern "C" void videoTaskFunc(void *argument)
{
 8012878:	b580      	push	{r7, lr}
 801287a:	b082      	sub	sp, #8
 801287c:	af00      	add	r7, sp, #0
 801287e:	6078      	str	r0, [r7, #4]
    videoController.decoderTaskEntry();
 8012880:	4803      	ldr	r0, [pc, #12]	; (8012890 <videoTaskFunc+0x18>)
 8012882:	f000 f8e8 	bl	8012a56 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv>
}
 8012886:	bf00      	nop
 8012888:	3708      	adds	r7, #8
 801288a:	46bd      	mov	sp, r7
 801288c:	bd80      	pop	{r7, pc}
 801288e:	bf00      	nop
 8012890:	2001f354 	.word	0x2001f354

08012894 <_ZN8touchgfx15VideoControllerC1Ev>:
class VideoController
 8012894:	b480      	push	{r7}
 8012896:	b083      	sub	sp, #12
 8012898:	af00      	add	r7, sp, #0
 801289a:	6078      	str	r0, [r7, #4]
 801289c:	4a04      	ldr	r2, [pc, #16]	; (80128b0 <_ZN8touchgfx15VideoControllerC1Ev+0x1c>)
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	601a      	str	r2, [r3, #0]
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	4618      	mov	r0, r3
 80128a6:	370c      	adds	r7, #12
 80128a8:	46bd      	mov	sp, r7
 80128aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128ae:	4770      	bx	lr
 80128b0:	0802a62c 	.word	0x0802a62c

080128b4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EEC1Ev>:

template <uint32_t no_streams, uint32_t width, uint32_t height, uint32_t stride, touchgfx::Bitmap::BitmapFormat output_format>
class DedicatedBufferController : public touchgfx::VideoController
{
public:
    DedicatedBufferController()
 80128b4:	b5b0      	push	{r4, r5, r7, lr}
 80128b6:	b082      	sub	sp, #8
 80128b8:	af00      	add	r7, sp, #0
 80128ba:	6078      	str	r0, [r7, #4]
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 80128bc:	687b      	ldr	r3, [r7, #4]
 80128be:	4618      	mov	r0, r3
 80128c0:	f7ff ffe8 	bl	8012894 <_ZN8touchgfx15VideoControllerC1Ev>
 80128c4:	4a25      	ldr	r2, [pc, #148]	; (801295c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EEC1Ev+0xa8>)
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	601a      	str	r2, [r3, #0]
 80128ca:	687b      	ldr	r3, [r7, #4]
 80128cc:	330c      	adds	r3, #12
 80128ce:	2400      	movs	r4, #0
 80128d0:	461d      	mov	r5, r3
 80128d2:	2c00      	cmp	r4, #0
 80128d4:	db05      	blt.n	80128e2 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EEC1Ev+0x2e>
 80128d6:	4628      	mov	r0, r5
 80128d8:	f000 f971 	bl	8012bbe <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE6StreamC1Ev>
 80128dc:	3524      	adds	r5, #36	; 0x24
 80128de:	3c01      	subs	r4, #1
 80128e0:	e7f7      	b.n	80128d2 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EEC1Ev+0x1e>
 80128e2:	687b      	ldr	r3, [r7, #4]
 80128e4:	2200      	movs	r2, #0
 80128e6:	631a      	str	r2, [r3, #48]	; 0x30
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	2200      	movs	r2, #0
 80128ec:	635a      	str	r2, [r3, #52]	; 0x34
 80128ee:	687b      	ldr	r3, [r7, #4]
 80128f0:	2200      	movs	r2, #0
 80128f2:	639a      	str	r2, [r3, #56]	; 0x38
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	2200      	movs	r2, #0
 80128f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	2201      	movs	r2, #1
 8012900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8012904:	687b      	ldr	r3, [r7, #4]
 8012906:	2200      	movs	r2, #0
 8012908:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801290c:	687b      	ldr	r3, [r7, #4]
 801290e:	2200      	movs	r2, #0
 8012910:	641a      	str	r2, [r3, #64]	; 0x40
 8012912:	687b      	ldr	r3, [r7, #4]
 8012914:	2200      	movs	r2, #0
 8012916:	645a      	str	r2, [r3, #68]	; 0x44
    {
        assert((no_streams > 0) && "Video: Number of streams zero!");

        // Clear arrays
        memset(decodeBuffers, 0, sizeof(decodeBuffers));
 8012918:	687b      	ldr	r3, [r7, #4]
 801291a:	3308      	adds	r3, #8
 801291c:	2204      	movs	r2, #4
 801291e:	2100      	movs	r1, #0
 8012920:	4618      	mov	r0, r3
 8012922:	f013 ffeb 	bl	80268fc <memset>
        memset(mjpegDecoders, 0, sizeof(mjpegDecoders));
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	3304      	adds	r3, #4
 801292a:	2204      	movs	r2, #4
 801292c:	2100      	movs	r1, #0
 801292e:	4618      	mov	r0, r3
 8012930:	f013 ffe4 	bl	80268fc <memset>

        // Initialize synchronization primitives
        semDecode = SEM_CREATE(); // Binary semaphore
 8012934:	2200      	movs	r2, #0
 8012936:	2100      	movs	r1, #0
 8012938:	2001      	movs	r0, #1
 801293a:	f7f7 faff 	bl	8009f3c <osSemaphoreNew>
 801293e:	4602      	mov	r2, r0
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	641a      	str	r2, [r3, #64]	; 0x40
        mutexBuffers = MUTEX_CREATE();
 8012944:	2000      	movs	r0, #0
 8012946:	f7f7 f9b1 	bl	8009cac <osMutexNew>
 801294a:	4602      	mov	r2, r0
 801294c:	687b      	ldr	r3, [r7, #4]
 801294e:	645a      	str	r2, [r3, #68]	; 0x44
    }
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	4618      	mov	r0, r3
 8012954:	3708      	adds	r7, #8
 8012956:	46bd      	mov	sp, r7
 8012958:	bdb0      	pop	{r4, r5, r7, pc}
 801295a:	bf00      	nop
 801295c:	0802a5ec 	.word	0x0802a5ec

08012960 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10addDecoderER12MJPEGDecoderm>:
        bufferRGB = buffer;
        topBufferRGB = bufferRGB;
        sizeBufferRGB = sizeOfBuffer;
    }

    void addDecoder(MJPEGDecoder& decoder, uint32_t index)
 8012960:	b580      	push	{r7, lr}
 8012962:	b084      	sub	sp, #16
 8012964:	af00      	add	r7, sp, #0
 8012966:	60f8      	str	r0, [r7, #12]
 8012968:	60b9      	str	r1, [r7, #8]
 801296a:	607a      	str	r2, [r7, #4]
    {
        // Running in UI thread / main

        assert(index < no_streams);
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	2b00      	cmp	r3, #0
 8012970:	d006      	beq.n	8012980 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10addDecoderER12MJPEGDecoderm+0x20>
 8012972:	4b08      	ldr	r3, [pc, #32]	; (8012994 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10addDecoderER12MJPEGDecoderm+0x34>)
 8012974:	4a08      	ldr	r2, [pc, #32]	; (8012998 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10addDecoderER12MJPEGDecoderm+0x38>)
 8012976:	f240 1103 	movw	r1, #259	; 0x103
 801297a:	4808      	ldr	r0, [pc, #32]	; (801299c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10addDecoderER12MJPEGDecoderm+0x3c>)
 801297c:	f013 ff32 	bl	80267e4 <__assert_func>
        mjpegDecoders[index] = &decoder;
 8012980:	68fa      	ldr	r2, [r7, #12]
 8012982:	687b      	ldr	r3, [r7, #4]
 8012984:	009b      	lsls	r3, r3, #2
 8012986:	4413      	add	r3, r2
 8012988:	68ba      	ldr	r2, [r7, #8]
 801298a:	605a      	str	r2, [r3, #4]
    }
 801298c:	bf00      	nop
 801298e:	3710      	adds	r7, #16
 8012990:	46bd      	mov	sp, r7
 8012992:	bd80      	pop	{r7, pc}
 8012994:	0802887c 	.word	0x0802887c
 8012998:	08028890 	.word	0x08028890
 801299c:	080289f8 	.word	0x080289f8

080129a0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setRGBBufferEPhj>:
    virtual void setRGBBuffer(uint8_t* buffer, size_t sizeOfBuffer)
 80129a0:	b480      	push	{r7}
 80129a2:	b085      	sub	sp, #20
 80129a4:	af00      	add	r7, sp, #0
 80129a6:	60f8      	str	r0, [r7, #12]
 80129a8:	60b9      	str	r1, [r7, #8]
 80129aa:	607a      	str	r2, [r7, #4]
        bufferRGB = buffer;
 80129ac:	68fb      	ldr	r3, [r7, #12]
 80129ae:	68ba      	ldr	r2, [r7, #8]
 80129b0:	631a      	str	r2, [r3, #48]	; 0x30
        topBufferRGB = bufferRGB;
 80129b2:	68fb      	ldr	r3, [r7, #12]
 80129b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80129b6:	68fb      	ldr	r3, [r7, #12]
 80129b8:	639a      	str	r2, [r3, #56]	; 0x38
        sizeBufferRGB = sizeOfBuffer;
 80129ba:	68fb      	ldr	r3, [r7, #12]
 80129bc:	687a      	ldr	r2, [r7, #4]
 80129be:	635a      	str	r2, [r3, #52]	; 0x34
    }
 80129c0:	bf00      	nop
 80129c2:	3714      	adds	r7, #20
 80129c4:	46bd      	mov	sp, r7
 80129c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129ca:	4770      	bx	lr

080129cc <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE8endFrameEv>:

    void endFrame()
 80129cc:	b580      	push	{r7, lr}
 80129ce:	b084      	sub	sp, #16
 80129d0:	af00      	add	r7, sp, #0
 80129d2:	6078      	str	r0, [r7, #4]
    {
        // Running in UI thread

        // Check if we should invalidate in next frame
        for (uint32_t i = 0; i < no_streams; i++)
 80129d4:	2300      	movs	r3, #0
 80129d6:	60fb      	str	r3, [r7, #12]
 80129d8:	68fb      	ldr	r3, [r7, #12]
 80129da:	2b00      	cmp	r3, #0
 80129dc:	d120      	bne.n	8012a20 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE8endFrameEv+0x54>
        {
            Stream& stream = streams[i];
 80129de:	68fa      	ldr	r2, [r7, #12]
 80129e0:	4613      	mov	r3, r2
 80129e2:	00db      	lsls	r3, r3, #3
 80129e4:	4413      	add	r3, r2
 80129e6:	009b      	lsls	r3, r3, #2
 80129e8:	3308      	adds	r3, #8
 80129ea:	687a      	ldr	r2, [r7, #4]
 80129ec:	4413      	add	r3, r2
 80129ee:	3304      	adds	r3, #4
 80129f0:	60bb      	str	r3, [r7, #8]
            if (stream.isPlaying || stream.isShowingOneFrame)
 80129f2:	68bb      	ldr	r3, [r7, #8]
 80129f4:	7f5b      	ldrb	r3, [r3, #29]
 80129f6:	2b00      	cmp	r3, #0
 80129f8:	d103      	bne.n	8012a02 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE8endFrameEv+0x36>
 80129fa:	68bb      	ldr	r3, [r7, #8]
 80129fc:	7f9b      	ldrb	r3, [r3, #30]
 80129fe:	2b00      	cmp	r3, #0
 8012a00:	d00a      	beq.n	8012a18 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE8endFrameEv+0x4c>
            {
                if (decodeForNextTick(stream))
 8012a02:	68b9      	ldr	r1, [r7, #8]
 8012a04:	6878      	ldr	r0, [r7, #4]
 8012a06:	f000 f912 	bl	8012c2e <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE17decodeForNextTickERNS3_6StreamE>
 8012a0a:	4603      	mov	r3, r0
 8012a0c:	2b00      	cmp	r3, #0
 8012a0e:	d003      	beq.n	8012a18 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE8endFrameEv+0x4c>
                {
                    stream.doDecode = true;
 8012a10:	68bb      	ldr	r3, [r7, #8]
 8012a12:	2201      	movs	r2, #1
 8012a14:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
        for (uint32_t i = 0; i < no_streams; i++)
 8012a18:	68fb      	ldr	r3, [r7, #12]
 8012a1a:	3301      	adds	r3, #1
 8012a1c:	60fb      	str	r3, [r7, #12]
 8012a1e:	e7db      	b.n	80129d8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE8endFrameEv+0xc>
                }
            }
        }

        // Mark next draw as first
        firstDrawThisFrame = true;
 8012a20:	687b      	ldr	r3, [r7, #4]
 8012a22:	2201      	movs	r2, #1
 8012a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        // Signal decoder thread to wake up
        SEM_POST(semDecode);
 8012a28:	687b      	ldr	r3, [r7, #4]
 8012a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012a2c:	4618      	mov	r0, r3
 8012a2e:	f7f7 fb87 	bl	800a140 <osSemaphoreRelease>
        // Unlock the buffer mutex. FreeRTOS does not allow unlocking a mutex you did not lock
        if (uiHasMutex)
 8012a32:	687b      	ldr	r3, [r7, #4]
 8012a34:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8012a38:	2b00      	cmp	r3, #0
 8012a3a:	d008      	beq.n	8012a4e <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE8endFrameEv+0x82>
        {
            MUTEX_UNLOCK(mutexBuffers);
 8012a3c:	687b      	ldr	r3, [r7, #4]
 8012a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012a40:	4618      	mov	r0, r3
 8012a42:	f7f7 fa2b 	bl	8009e9c <osMutexRelease>
            uiHasMutex = false;
 8012a46:	687b      	ldr	r3, [r7, #4]
 8012a48:	2200      	movs	r2, #0
 8012a4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        }
    }
 8012a4e:	bf00      	nop
 8012a50:	3710      	adds	r7, #16
 8012a52:	46bd      	mov	sp, r7
 8012a54:	bd80      	pop	{r7, pc}

08012a56 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv>:

    void decoderTaskEntry()
 8012a56:	b590      	push	{r4, r7, lr}
 8012a58:	b08b      	sub	sp, #44	; 0x2c
 8012a5a:	af02      	add	r7, sp, #8
 8012a5c:	6078      	str	r0, [r7, #4]
        // Running in Decoder thread!!

        while (1)
        {
            // Wait for synchronisation signal from UI thread
            SEM_WAIT(semDecode);
 8012a5e:	687b      	ldr	r3, [r7, #4]
 8012a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012a62:	f04f 31ff 	mov.w	r1, #4294967295
 8012a66:	4618      	mov	r0, r3
 8012a68:	f7f7 fb04 	bl	800a074 <osSemaphoreAcquire>

            // Lock out the UI by taking the mutex
            MUTEX_LOCK(mutexBuffers);
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012a70:	f04f 31ff 	mov.w	r1, #4294967295
 8012a74:	4618      	mov	r0, r3
 8012a76:	f7f7 f9b3 	bl	8009de0 <osMutexAcquire>

            // Update stream flags
            for (uint32_t i = 0; i < no_streams; i++)
 8012a7a:	2300      	movs	r3, #0
 8012a7c:	61fb      	str	r3, [r7, #28]
 8012a7e:	69fb      	ldr	r3, [r7, #28]
 8012a80:	2b00      	cmp	r3, #0
 8012a82:	d115      	bne.n	8012ab0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x5a>
            {
                Stream& stream = streams[i];
 8012a84:	69fa      	ldr	r2, [r7, #28]
 8012a86:	4613      	mov	r3, r2
 8012a88:	00db      	lsls	r3, r3, #3
 8012a8a:	4413      	add	r3, r2
 8012a8c:	009b      	lsls	r3, r3, #2
 8012a8e:	3308      	adds	r3, #8
 8012a90:	687a      	ldr	r2, [r7, #4]
 8012a92:	4413      	add	r3, r2
 8012a94:	3304      	adds	r3, #4
 8012a96:	617b      	str	r3, [r7, #20]
                if (stream.doDecode)
 8012a98:	697b      	ldr	r3, [r7, #20]
 8012a9a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8012a9e:	2b00      	cmp	r3, #0
 8012aa0:	d002      	beq.n	8012aa8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x52>
                {
                    stream.doInvalidateOnNextTick = true;
 8012aa2:	697b      	ldr	r3, [r7, #20]
 8012aa4:	2201      	movs	r2, #1
 8012aa6:	77da      	strb	r2, [r3, #31]
            for (uint32_t i = 0; i < no_streams; i++)
 8012aa8:	69fb      	ldr	r3, [r7, #28]
 8012aaa:	3301      	adds	r3, #1
 8012aac:	61fb      	str	r3, [r7, #28]
 8012aae:	e7e6      	b.n	8012a7e <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x28>
                }
            }

            // Now decode all streams marked for invalidation in next tick
            for (uint32_t i = 0; i < no_streams; i++)
 8012ab0:	2300      	movs	r3, #0
 8012ab2:	61bb      	str	r3, [r7, #24]
 8012ab4:	69bb      	ldr	r3, [r7, #24]
 8012ab6:	2b00      	cmp	r3, #0
 8012ab8:	d17b      	bne.n	8012bb2 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x15c>
            {
                Stream& stream = streams[i];
 8012aba:	69ba      	ldr	r2, [r7, #24]
 8012abc:	4613      	mov	r3, r2
 8012abe:	00db      	lsls	r3, r3, #3
 8012ac0:	4413      	add	r3, r2
 8012ac2:	009b      	lsls	r3, r3, #2
 8012ac4:	3308      	adds	r3, #8
 8012ac6:	687a      	ldr	r2, [r7, #4]
 8012ac8:	4413      	add	r3, r2
 8012aca:	3304      	adds	r3, #4
 8012acc:	613b      	str	r3, [r7, #16]
                if (stream.doDecode)
 8012ace:	693b      	ldr	r3, [r7, #16]
 8012ad0:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8012ad4:	2b00      	cmp	r3, #0
 8012ad6:	d068      	beq.n	8012baa <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x154>
                {
                    MJPEGDecoder* const decoder = mjpegDecoders[i];
 8012ad8:	687a      	ldr	r2, [r7, #4]
 8012ada:	69bb      	ldr	r3, [r7, #24]
 8012adc:	009b      	lsls	r3, r3, #2
 8012ade:	4413      	add	r3, r2
 8012ae0:	685b      	ldr	r3, [r3, #4]
 8012ae2:	60fb      	str	r3, [r7, #12]
                    // Seek or increment video frame
                    if (stream.seek_to_frame > 0)
 8012ae4:	693b      	ldr	r3, [r7, #16]
 8012ae6:	695b      	ldr	r3, [r3, #20]
 8012ae8:	2b00      	cmp	r3, #0
 8012aea:	d00c      	beq.n	8012b06 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xb0>
                    {
                        decoder->gotoFrame(stream.seek_to_frame);
 8012aec:	68fb      	ldr	r3, [r7, #12]
 8012aee:	681b      	ldr	r3, [r3, #0]
 8012af0:	3324      	adds	r3, #36	; 0x24
 8012af2:	681b      	ldr	r3, [r3, #0]
 8012af4:	693a      	ldr	r2, [r7, #16]
 8012af6:	6952      	ldr	r2, [r2, #20]
 8012af8:	4611      	mov	r1, r2
 8012afa:	68f8      	ldr	r0, [r7, #12]
 8012afc:	4798      	blx	r3
                        stream.seek_to_frame = 0;
 8012afe:	693b      	ldr	r3, [r7, #16]
 8012b00:	2200      	movs	r2, #0
 8012b02:	615a      	str	r2, [r3, #20]
 8012b04:	e01e      	b.n	8012b44 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xee>
                    }
                    else
                    {
                        if (stream.skip_frames > 0)
 8012b06:	693b      	ldr	r3, [r7, #16]
 8012b08:	699b      	ldr	r3, [r3, #24]
 8012b0a:	2b00      	cmp	r3, #0
 8012b0c:	d01a      	beq.n	8012b44 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xee>
                        {
                            decoder->gotoFrame(decoder->getCurrentFrameNumber() + stream.skip_frames);
 8012b0e:	68fb      	ldr	r3, [r7, #12]
 8012b10:	681b      	ldr	r3, [r3, #0]
 8012b12:	3324      	adds	r3, #36	; 0x24
 8012b14:	681c      	ldr	r4, [r3, #0]
 8012b16:	68fb      	ldr	r3, [r7, #12]
 8012b18:	681b      	ldr	r3, [r3, #0]
 8012b1a:	3328      	adds	r3, #40	; 0x28
 8012b1c:	681b      	ldr	r3, [r3, #0]
 8012b1e:	68f8      	ldr	r0, [r7, #12]
 8012b20:	4798      	blx	r3
 8012b22:	4602      	mov	r2, r0
 8012b24:	693b      	ldr	r3, [r7, #16]
 8012b26:	699b      	ldr	r3, [r3, #24]
 8012b28:	4413      	add	r3, r2
 8012b2a:	4619      	mov	r1, r3
 8012b2c:	68f8      	ldr	r0, [r7, #12]
 8012b2e:	47a0      	blx	r4
                            stream.frameCount += stream.skip_frames;
 8012b30:	693b      	ldr	r3, [r7, #16]
 8012b32:	685a      	ldr	r2, [r3, #4]
 8012b34:	693b      	ldr	r3, [r7, #16]
 8012b36:	699b      	ldr	r3, [r3, #24]
 8012b38:	441a      	add	r2, r3
 8012b3a:	693b      	ldr	r3, [r7, #16]
 8012b3c:	605a      	str	r2, [r3, #4]
                            stream.skip_frames = 0;
 8012b3e:	693b      	ldr	r3, [r7, #16]
 8012b40:	2200      	movs	r2, #0
 8012b42:	619a      	str	r2, [r3, #24]
                        }
                    }

                    // Decode frame
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 8012b44:	68fb      	ldr	r3, [r7, #12]
 8012b46:	681b      	ldr	r3, [r3, #0]
 8012b48:	3314      	adds	r3, #20
 8012b4a:	681c      	ldr	r4, [r3, #0]
 8012b4c:	687b      	ldr	r3, [r7, #4]
 8012b4e:	69ba      	ldr	r2, [r7, #24]
 8012b50:	3202      	adds	r2, #2
 8012b52:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012b56:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 8012b5a:	9300      	str	r3, [sp, #0]
 8012b5c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8012b60:	f44f 7248 	mov.w	r2, #800	; 0x320
 8012b64:	68f8      	ldr	r0, [r7, #12]
 8012b66:	47a0      	blx	r4
 8012b68:	4603      	mov	r3, r0
 8012b6a:	461a      	mov	r2, r3
 8012b6c:	693b      	ldr	r3, [r7, #16]
 8012b6e:	f883 2020 	strb.w	r2, [r3, #32]
                    stream.frameCount++;
 8012b72:	693b      	ldr	r3, [r7, #16]
 8012b74:	685b      	ldr	r3, [r3, #4]
 8012b76:	1c5a      	adds	r2, r3, #1
 8012b78:	693b      	ldr	r3, [r7, #16]
 8012b7a:	605a      	str	r2, [r3, #4]

                    // Update frame number
                    if (stream.hasMoreFrames)
 8012b7c:	693b      	ldr	r3, [r7, #16]
 8012b7e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012b82:	2b00      	cmp	r3, #0
 8012b84:	d00a      	beq.n	8012b9c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x146>
                    {
                        stream.frameNumber = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
 8012b86:	68fb      	ldr	r3, [r7, #12]
 8012b88:	681b      	ldr	r3, [r3, #0]
 8012b8a:	3328      	adds	r3, #40	; 0x28
 8012b8c:	681b      	ldr	r3, [r3, #0]
 8012b8e:	68f8      	ldr	r0, [r7, #12]
 8012b90:	4798      	blx	r3
 8012b92:	4603      	mov	r3, r0
 8012b94:	1e5a      	subs	r2, r3, #1
 8012b96:	693b      	ldr	r3, [r7, #16]
 8012b98:	601a      	str	r2, [r3, #0]
 8012b9a:	e002      	b.n	8012ba2 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x14c>
                    }
                    else
                    {
                        stream.frameNumber = 1;
 8012b9c:	693b      	ldr	r3, [r7, #16]
 8012b9e:	2201      	movs	r2, #1
 8012ba0:	601a      	str	r2, [r3, #0]
                    }
                    stream.doDecode = false;
 8012ba2:	693b      	ldr	r3, [r7, #16]
 8012ba4:	2200      	movs	r2, #0
 8012ba6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
            for (uint32_t i = 0; i < no_streams; i++)
 8012baa:	69bb      	ldr	r3, [r7, #24]
 8012bac:	3301      	adds	r3, #1
 8012bae:	61bb      	str	r3, [r7, #24]
 8012bb0:	e780      	b.n	8012ab4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x5e>
                }
            }

            // Release the stream and decode buffer and let UI continue
            MUTEX_UNLOCK(mutexBuffers);
 8012bb2:	687b      	ldr	r3, [r7, #4]
 8012bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012bb6:	4618      	mov	r0, r3
 8012bb8:	f7f7 f970 	bl	8009e9c <osMutexRelease>
        while (1)
 8012bbc:	e74f      	b.n	8012a5e <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x8>

08012bbe <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE6StreamC1Ev>:

private:
    class Stream
    {
    public:
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
 8012bbe:	b480      	push	{r7}
 8012bc0:	b083      	sub	sp, #12
 8012bc2:	af00      	add	r7, sp, #0
 8012bc4:	6078      	str	r0, [r7, #4]
                   seek_to_frame(0), skip_frames(0),
                   isActive(false), isPlaying(false), isShowingOneFrame(false),
                   doInvalidateOnNextTick(false), hasMoreFrames(false), repeat(true), doDecode(false) {}
 8012bc6:	687b      	ldr	r3, [r7, #4]
 8012bc8:	2200      	movs	r2, #0
 8012bca:	601a      	str	r2, [r3, #0]
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	2200      	movs	r2, #0
 8012bd0:	605a      	str	r2, [r3, #4]
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	2200      	movs	r2, #0
 8012bd6:	609a      	str	r2, [r3, #8]
 8012bd8:	687b      	ldr	r3, [r7, #4]
 8012bda:	2200      	movs	r2, #0
 8012bdc:	60da      	str	r2, [r3, #12]
 8012bde:	687b      	ldr	r3, [r7, #4]
 8012be0:	2200      	movs	r2, #0
 8012be2:	611a      	str	r2, [r3, #16]
 8012be4:	687b      	ldr	r3, [r7, #4]
 8012be6:	2200      	movs	r2, #0
 8012be8:	615a      	str	r2, [r3, #20]
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	2200      	movs	r2, #0
 8012bee:	619a      	str	r2, [r3, #24]
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	2200      	movs	r2, #0
 8012bf4:	771a      	strb	r2, [r3, #28]
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	2200      	movs	r2, #0
 8012bfa:	775a      	strb	r2, [r3, #29]
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	2200      	movs	r2, #0
 8012c00:	779a      	strb	r2, [r3, #30]
 8012c02:	687b      	ldr	r3, [r7, #4]
 8012c04:	2200      	movs	r2, #0
 8012c06:	77da      	strb	r2, [r3, #31]
 8012c08:	687b      	ldr	r3, [r7, #4]
 8012c0a:	2200      	movs	r2, #0
 8012c0c:	f883 2020 	strb.w	r2, [r3, #32]
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	2201      	movs	r2, #1
 8012c14:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	2200      	movs	r2, #0
 8012c1c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	4618      	mov	r0, r3
 8012c24:	370c      	adds	r7, #12
 8012c26:	46bd      	mov	sp, r7
 8012c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c2c:	4770      	bx	lr

08012c2e <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE17decodeForNextTickERNS3_6StreamE>:
    MUTEX_TYPE mutexBuffers;     // Mutual exclusion of the video buffers and stream data

    /**
     * Return true, if new video frame should be decoded for the next tick (keep video decode framerate low)
     */
    bool decodeForNextTick(Stream& stream)
 8012c2e:	b480      	push	{r7}
 8012c30:	b083      	sub	sp, #12
 8012c32:	af00      	add	r7, sp, #0
 8012c34:	6078      	str	r0, [r7, #4]
 8012c36:	6039      	str	r1, [r7, #0]
    {
        // Running in UI thread

        // Compare tickCount/frameCount to frame_rate_ticks/frame_rate_video
        if ((stream.tickCount * stream.frame_rate_video) >= (stream.frame_rate_ticks * stream.frameCount))
 8012c38:	683b      	ldr	r3, [r7, #0]
 8012c3a:	689b      	ldr	r3, [r3, #8]
 8012c3c:	683a      	ldr	r2, [r7, #0]
 8012c3e:	68d2      	ldr	r2, [r2, #12]
 8012c40:	fb03 f202 	mul.w	r2, r3, r2
 8012c44:	683b      	ldr	r3, [r7, #0]
 8012c46:	691b      	ldr	r3, [r3, #16]
 8012c48:	6839      	ldr	r1, [r7, #0]
 8012c4a:	6849      	ldr	r1, [r1, #4]
 8012c4c:	fb01 f303 	mul.w	r3, r1, r3
 8012c50:	429a      	cmp	r2, r3
 8012c52:	d322      	bcc.n	8012c9a <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE17decodeForNextTickERNS3_6StreamE+0x6c>
        {
            if (allowSkipFrames)
 8012c54:	687b      	ldr	r3, [r7, #4]
 8012c56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012c5a:	2b00      	cmp	r3, #0
 8012c5c:	d01b      	beq.n	8012c96 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE17decodeForNextTickERNS3_6StreamE+0x68>
            {
                stream.skip_frames = (stream.tickCount * stream.frame_rate_video - stream.frame_rate_ticks * stream.frameCount) / stream.frame_rate_ticks;
 8012c5e:	683b      	ldr	r3, [r7, #0]
 8012c60:	689b      	ldr	r3, [r3, #8]
 8012c62:	683a      	ldr	r2, [r7, #0]
 8012c64:	68d2      	ldr	r2, [r2, #12]
 8012c66:	fb03 f202 	mul.w	r2, r3, r2
 8012c6a:	683b      	ldr	r3, [r7, #0]
 8012c6c:	691b      	ldr	r3, [r3, #16]
 8012c6e:	6839      	ldr	r1, [r7, #0]
 8012c70:	6849      	ldr	r1, [r1, #4]
 8012c72:	fb01 f303 	mul.w	r3, r1, r3
 8012c76:	1ad2      	subs	r2, r2, r3
 8012c78:	683b      	ldr	r3, [r7, #0]
 8012c7a:	691b      	ldr	r3, [r3, #16]
 8012c7c:	fbb2 f2f3 	udiv	r2, r2, r3
 8012c80:	683b      	ldr	r3, [r7, #0]
 8012c82:	619a      	str	r2, [r3, #24]
                if (stream.skip_frames > 0)
 8012c84:	683b      	ldr	r3, [r7, #0]
 8012c86:	699b      	ldr	r3, [r3, #24]
 8012c88:	2b00      	cmp	r3, #0
 8012c8a:	d004      	beq.n	8012c96 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE17decodeForNextTickERNS3_6StreamE+0x68>
                {
                    stream.skip_frames--;
 8012c8c:	683b      	ldr	r3, [r7, #0]
 8012c8e:	699b      	ldr	r3, [r3, #24]
 8012c90:	1e5a      	subs	r2, r3, #1
 8012c92:	683b      	ldr	r3, [r7, #0]
 8012c94:	619a      	str	r2, [r3, #24]
                }
            }
            return true;
 8012c96:	2301      	movs	r3, #1
 8012c98:	e000      	b.n	8012c9c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE17decodeForNextTickERNS3_6StreamE+0x6e>
        }
        return false;
 8012c9a:	2300      	movs	r3, #0
    }
 8012c9c:	4618      	mov	r0, r3
 8012c9e:	370c      	adds	r7, #12
 8012ca0:	46bd      	mov	sp, r7
 8012ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ca6:	4770      	bx	lr

08012ca8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EED1Ev>:
class DedicatedBufferController : public touchgfx::VideoController
 8012ca8:	b580      	push	{r7, lr}
 8012caa:	b082      	sub	sp, #8
 8012cac:	af00      	add	r7, sp, #0
 8012cae:	6078      	str	r0, [r7, #4]
 8012cb0:	4a05      	ldr	r2, [pc, #20]	; (8012cc8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EED1Ev+0x20>)
 8012cb2:	687b      	ldr	r3, [r7, #4]
 8012cb4:	601a      	str	r2, [r3, #0]
 8012cb6:	687b      	ldr	r3, [r7, #4]
 8012cb8:	4618      	mov	r0, r3
 8012cba:	f7ff fbf3 	bl	80124a4 <_ZN8touchgfx15VideoControllerD1Ev>
 8012cbe:	687b      	ldr	r3, [r7, #4]
 8012cc0:	4618      	mov	r0, r3
 8012cc2:	3708      	adds	r7, #8
 8012cc4:	46bd      	mov	sp, r7
 8012cc6:	bd80      	pop	{r7, pc}
 8012cc8:	0802a5ec 	.word	0x0802a5ec

08012ccc <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EED0Ev>:
 8012ccc:	b580      	push	{r7, lr}
 8012cce:	b082      	sub	sp, #8
 8012cd0:	af00      	add	r7, sp, #0
 8012cd2:	6078      	str	r0, [r7, #4]
 8012cd4:	6878      	ldr	r0, [r7, #4]
 8012cd6:	f7ff ffe7 	bl	8012ca8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EED1Ev>
 8012cda:	2148      	movs	r1, #72	; 0x48
 8012cdc:	6878      	ldr	r0, [r7, #4]
 8012cde:	f013 fd52 	bl	8026786 <_ZdlPvj>
 8012ce2:	687b      	ldr	r3, [r7, #4]
 8012ce4:	4618      	mov	r0, r3
 8012ce6:	3708      	adds	r7, #8
 8012ce8:	46bd      	mov	sp, r7
 8012cea:	bd80      	pop	{r7, pc}

08012cec <_Z41__static_initialization_and_destruction_0ii>:
 8012cec:	b580      	push	{r7, lr}
 8012cee:	b082      	sub	sp, #8
 8012cf0:	af00      	add	r7, sp, #0
 8012cf2:	6078      	str	r0, [r7, #4]
 8012cf4:	6039      	str	r1, [r7, #0]
 8012cf6:	687b      	ldr	r3, [r7, #4]
 8012cf8:	2b01      	cmp	r3, #1
 8012cfa:	d10a      	bne.n	8012d12 <_Z41__static_initialization_and_destruction_0ii+0x26>
 8012cfc:	683b      	ldr	r3, [r7, #0]
 8012cfe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012d02:	4293      	cmp	r3, r2
 8012d04:	d105      	bne.n	8012d12 <_Z41__static_initialization_and_destruction_0ii+0x26>
HardwareMJPEGDecoder mjpegdecoder1;
 8012d06:	480c      	ldr	r0, [pc, #48]	; (8012d38 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8012d08:	f7fd fa56 	bl	80101b8 <_ZN20HardwareMJPEGDecoderC1Ev>
DedicatedBufferController<1, 800, 480, 800*2U, Bitmap::RGB565> videoController;
 8012d0c:	480b      	ldr	r0, [pc, #44]	; (8012d3c <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8012d0e:	f7ff fdd1 	bl	80128b4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EEC1Ev>
 8012d12:	687b      	ldr	r3, [r7, #4]
 8012d14:	2b00      	cmp	r3, #0
 8012d16:	d10a      	bne.n	8012d2e <_Z41__static_initialization_and_destruction_0ii+0x42>
 8012d18:	683b      	ldr	r3, [r7, #0]
 8012d1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012d1e:	4293      	cmp	r3, r2
 8012d20:	d105      	bne.n	8012d2e <_Z41__static_initialization_and_destruction_0ii+0x42>
 8012d22:	4806      	ldr	r0, [pc, #24]	; (8012d3c <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8012d24:	f7ff ffc0 	bl	8012ca8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EED1Ev>
HardwareMJPEGDecoder mjpegdecoder1;
 8012d28:	4803      	ldr	r0, [pc, #12]	; (8012d38 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8012d2a:	f7fe fa17 	bl	801115c <_ZN20HardwareMJPEGDecoderD1Ev>
}
 8012d2e:	bf00      	nop
 8012d30:	3708      	adds	r7, #8
 8012d32:	46bd      	mov	sp, r7
 8012d34:	bd80      	pop	{r7, pc}
 8012d36:	bf00      	nop
 8012d38:	2001f310 	.word	0x2001f310
 8012d3c:	2001f354 	.word	0x2001f354

08012d40 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE>:
    virtual Handle registerVideoWidget(touchgfx::VideoWidget& widget)
 8012d40:	b580      	push	{r7, lr}
 8012d42:	b084      	sub	sp, #16
 8012d44:	af00      	add	r7, sp, #0
 8012d46:	6078      	str	r0, [r7, #4]
 8012d48:	6039      	str	r1, [r7, #0]
        const uint32_t sizeOfOneDecodeBuffer = height * stride;
 8012d4a:	4b1f      	ldr	r3, [pc, #124]	; (8012dc8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x88>)
 8012d4c:	60fb      	str	r3, [r7, #12]
        Handle handle = getFreeHandle();
 8012d4e:	6878      	ldr	r0, [r7, #4]
 8012d50:	f000 fa82 	bl	8013258 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE13getFreeHandleEv>
 8012d54:	60b8      	str	r0, [r7, #8]
        streams[handle].isActive = true;
 8012d56:	6879      	ldr	r1, [r7, #4]
 8012d58:	68ba      	ldr	r2, [r7, #8]
 8012d5a:	4613      	mov	r3, r2
 8012d5c:	00db      	lsls	r3, r3, #3
 8012d5e:	4413      	add	r3, r2
 8012d60:	009b      	lsls	r3, r3, #2
 8012d62:	440b      	add	r3, r1
 8012d64:	3328      	adds	r3, #40	; 0x28
 8012d66:	2201      	movs	r2, #1
 8012d68:	701a      	strb	r2, [r3, #0]
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 8012d6a:	687b      	ldr	r3, [r7, #4]
 8012d6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012d6e:	4b16      	ldr	r3, [pc, #88]	; (8012dc8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x88>)
 8012d70:	4413      	add	r3, r2
 8012d72:	687a      	ldr	r2, [r7, #4]
 8012d74:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8012d76:	687a      	ldr	r2, [r7, #4]
 8012d78:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8012d7a:	440a      	add	r2, r1
 8012d7c:	4293      	cmp	r3, r2
 8012d7e:	d905      	bls.n	8012d8c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x4c>
            assert(0 && "registerVideoWidget: Unable to allocate RGB buffer!");
 8012d80:	4b12      	ldr	r3, [pc, #72]	; (8012dcc <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x8c>)
 8012d82:	4a13      	ldr	r2, [pc, #76]	; (8012dd0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x90>)
 8012d84:	2152      	movs	r1, #82	; 0x52
 8012d86:	4813      	ldr	r0, [pc, #76]	; (8012dd4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x94>)
 8012d88:	f013 fd2c 	bl	80267e4 <__assert_func>
        decodeBuffers[handle] = (uint32_t*)topBufferRGB;
 8012d8c:	687b      	ldr	r3, [r7, #4]
 8012d8e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8012d90:	687b      	ldr	r3, [r7, #4]
 8012d92:	68ba      	ldr	r2, [r7, #8]
 8012d94:	3202      	adds	r2, #2
 8012d96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        topBufferRGB += sizeOfOneDecodeBuffer;
 8012d9a:	687b      	ldr	r3, [r7, #4]
 8012d9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012d9e:	4b0a      	ldr	r3, [pc, #40]	; (8012dc8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x88>)
 8012da0:	4413      	add	r3, r2
 8012da2:	687a      	ldr	r2, [r7, #4]
 8012da4:	6393      	str	r3, [r2, #56]	; 0x38
        widget.setVideoBufferFormat(output_format, width, height);
 8012da6:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8012daa:	f44f 7248 	mov.w	r2, #800	; 0x320
 8012dae:	2100      	movs	r1, #0
 8012db0:	6838      	ldr	r0, [r7, #0]
 8012db2:	f7ff fba5 	bl	8012500 <_ZN8touchgfx11VideoWidget20setVideoBufferFormatENS_6Bitmap12BitmapFormatEss>
        widget.setVideoBuffer((uint8_t*)0);
 8012db6:	2100      	movs	r1, #0
 8012db8:	6838      	ldr	r0, [r7, #0]
 8012dba:	f7ff fb93 	bl	80124e4 <_ZN8touchgfx11VideoWidget14setVideoBufferEPh>
        return handle;
 8012dbe:	68bb      	ldr	r3, [r7, #8]
    }
 8012dc0:	4618      	mov	r0, r3
 8012dc2:	3710      	adds	r7, #16
 8012dc4:	46bd      	mov	sp, r7
 8012dc6:	bd80      	pop	{r7, pc}
 8012dc8:	000bb800 	.word	0x000bb800
 8012dcc:	08028a38 	.word	0x08028a38
 8012dd0:	08028a74 	.word	0x08028a74
 8012dd4:	080289f8 	.word	0x080289f8

08012dd8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE21unregisterVideoWidgetEm>:
    virtual void unregisterVideoWidget(const Handle handle)
 8012dd8:	b580      	push	{r7, lr}
 8012dda:	b084      	sub	sp, #16
 8012ddc:	af00      	add	r7, sp, #0
 8012dde:	6078      	str	r0, [r7, #4]
 8012de0:	6039      	str	r1, [r7, #0]
        MUTEX_LOCK(mutexBuffers);
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012de6:	f04f 31ff 	mov.w	r1, #4294967295
 8012dea:	4618      	mov	r0, r3
 8012dec:	f7f6 fff8 	bl	8009de0 <osMutexAcquire>
        MUTEX_UNLOCK(mutexBuffers);
 8012df0:	687b      	ldr	r3, [r7, #4]
 8012df2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012df4:	4618      	mov	r0, r3
 8012df6:	f7f7 f851 	bl	8009e9c <osMutexRelease>
        streams[handle].isActive = false;
 8012dfa:	6879      	ldr	r1, [r7, #4]
 8012dfc:	683a      	ldr	r2, [r7, #0]
 8012dfe:	4613      	mov	r3, r2
 8012e00:	00db      	lsls	r3, r3, #3
 8012e02:	4413      	add	r3, r2
 8012e04:	009b      	lsls	r3, r3, #2
 8012e06:	440b      	add	r3, r1
 8012e08:	3328      	adds	r3, #40	; 0x28
 8012e0a:	2200      	movs	r2, #0
 8012e0c:	701a      	strb	r2, [r3, #0]
        bool oneIsActive = false;
 8012e0e:	2300      	movs	r3, #0
 8012e10:	73fb      	strb	r3, [r7, #15]
        for (uint32_t i = 0; i < no_streams; i++)
 8012e12:	2300      	movs	r3, #0
 8012e14:	60bb      	str	r3, [r7, #8]
 8012e16:	68bb      	ldr	r3, [r7, #8]
 8012e18:	2b00      	cmp	r3, #0
 8012e1a:	d114      	bne.n	8012e46 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE21unregisterVideoWidgetEm+0x6e>
            oneIsActive |= streams[i].isActive;
 8012e1c:	6879      	ldr	r1, [r7, #4]
 8012e1e:	68ba      	ldr	r2, [r7, #8]
 8012e20:	4613      	mov	r3, r2
 8012e22:	00db      	lsls	r3, r3, #3
 8012e24:	4413      	add	r3, r2
 8012e26:	009b      	lsls	r3, r3, #2
 8012e28:	440b      	add	r3, r1
 8012e2a:	3328      	adds	r3, #40	; 0x28
 8012e2c:	781a      	ldrb	r2, [r3, #0]
 8012e2e:	7bfb      	ldrb	r3, [r7, #15]
 8012e30:	4313      	orrs	r3, r2
 8012e32:	b2db      	uxtb	r3, r3
 8012e34:	2b00      	cmp	r3, #0
 8012e36:	bf14      	ite	ne
 8012e38:	2301      	movne	r3, #1
 8012e3a:	2300      	moveq	r3, #0
 8012e3c:	73fb      	strb	r3, [r7, #15]
        for (uint32_t i = 0; i < no_streams; i++)
 8012e3e:	68bb      	ldr	r3, [r7, #8]
 8012e40:	3301      	adds	r3, #1
 8012e42:	60bb      	str	r3, [r7, #8]
 8012e44:	e7e7      	b.n	8012e16 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE21unregisterVideoWidgetEm+0x3e>
        if (oneIsActive == false)
 8012e46:	7bfb      	ldrb	r3, [r7, #15]
 8012e48:	2b00      	cmp	r3, #0
 8012e4a:	d103      	bne.n	8012e54 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE21unregisterVideoWidgetEm+0x7c>
            topBufferRGB = bufferRGB;
 8012e4c:	687b      	ldr	r3, [r7, #4]
 8012e4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012e50:	687b      	ldr	r3, [r7, #4]
 8012e52:	639a      	str	r2, [r3, #56]	; 0x38
    }
 8012e54:	bf00      	nop
 8012e56:	3710      	adds	r7, #16
 8012e58:	46bd      	mov	sp, r7
 8012e5a:	bd80      	pop	{r7, pc}

08012e5c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm>:
    virtual void setFrameRate(const Handle handle, uint32_t ui_frames, uint32_t video_frames)
 8012e5c:	b580      	push	{r7, lr}
 8012e5e:	b086      	sub	sp, #24
 8012e60:	af00      	add	r7, sp, #0
 8012e62:	60f8      	str	r0, [r7, #12]
 8012e64:	60b9      	str	r1, [r7, #8]
 8012e66:	607a      	str	r2, [r7, #4]
 8012e68:	603b      	str	r3, [r7, #0]
        assert(handle < no_streams);
 8012e6a:	68bb      	ldr	r3, [r7, #8]
 8012e6c:	2b00      	cmp	r3, #0
 8012e6e:	d005      	beq.n	8012e7c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x20>
 8012e70:	4b0f      	ldr	r3, [pc, #60]	; (8012eb0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x54>)
 8012e72:	4a10      	ldr	r2, [pc, #64]	; (8012eb4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x58>)
 8012e74:	2182      	movs	r1, #130	; 0x82
 8012e76:	4810      	ldr	r0, [pc, #64]	; (8012eb8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x5c>)
 8012e78:	f013 fcb4 	bl	80267e4 <__assert_func>
        Stream& stream = streams[handle];
 8012e7c:	68ba      	ldr	r2, [r7, #8]
 8012e7e:	4613      	mov	r3, r2
 8012e80:	00db      	lsls	r3, r3, #3
 8012e82:	4413      	add	r3, r2
 8012e84:	009b      	lsls	r3, r3, #2
 8012e86:	3308      	adds	r3, #8
 8012e88:	68fa      	ldr	r2, [r7, #12]
 8012e8a:	4413      	add	r3, r2
 8012e8c:	3304      	adds	r3, #4
 8012e8e:	617b      	str	r3, [r7, #20]
        stream.frameCount = 0;
 8012e90:	697b      	ldr	r3, [r7, #20]
 8012e92:	2200      	movs	r2, #0
 8012e94:	605a      	str	r2, [r3, #4]
        stream.tickCount = 0;
 8012e96:	697b      	ldr	r3, [r7, #20]
 8012e98:	2200      	movs	r2, #0
 8012e9a:	609a      	str	r2, [r3, #8]
        stream.frame_rate_ticks = ui_frames;
 8012e9c:	697b      	ldr	r3, [r7, #20]
 8012e9e:	687a      	ldr	r2, [r7, #4]
 8012ea0:	611a      	str	r2, [r3, #16]
        stream.frame_rate_video = video_frames;
 8012ea2:	697b      	ldr	r3, [r7, #20]
 8012ea4:	683a      	ldr	r2, [r7, #0]
 8012ea6:	60da      	str	r2, [r3, #12]
    }
 8012ea8:	bf00      	nop
 8012eaa:	3718      	adds	r7, #24
 8012eac:	46bd      	mov	sp, r7
 8012eae:	bd80      	pop	{r7, pc}
 8012eb0:	08028c18 	.word	0x08028c18
 8012eb4:	08028c2c 	.word	0x08028c2c
 8012eb8:	080289f8 	.word	0x080289f8

08012ebc <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE>:
    virtual bool updateFrame(const Handle handle, touchgfx::VideoWidget& widget)
 8012ebc:	b580      	push	{r7, lr}
 8012ebe:	b086      	sub	sp, #24
 8012ec0:	af00      	add	r7, sp, #0
 8012ec2:	60f8      	str	r0, [r7, #12]
 8012ec4:	60b9      	str	r1, [r7, #8]
 8012ec6:	607a      	str	r2, [r7, #4]
        assert(handle < no_streams);
 8012ec8:	68bb      	ldr	r3, [r7, #8]
 8012eca:	2b00      	cmp	r3, #0
 8012ecc:	d005      	beq.n	8012eda <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x1e>
 8012ece:	4b29      	ldr	r3, [pc, #164]	; (8012f74 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0xb8>)
 8012ed0:	4a29      	ldr	r2, [pc, #164]	; (8012f78 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0xbc>)
 8012ed2:	21d0      	movs	r1, #208	; 0xd0
 8012ed4:	4829      	ldr	r0, [pc, #164]	; (8012f7c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0xc0>)
 8012ed6:	f013 fc85 	bl	80267e4 <__assert_func>
        Stream& stream = streams[handle];
 8012eda:	68ba      	ldr	r2, [r7, #8]
 8012edc:	4613      	mov	r3, r2
 8012ede:	00db      	lsls	r3, r3, #3
 8012ee0:	4413      	add	r3, r2
 8012ee2:	009b      	lsls	r3, r3, #2
 8012ee4:	3308      	adds	r3, #8
 8012ee6:	68fa      	ldr	r2, [r7, #12]
 8012ee8:	4413      	add	r3, r2
 8012eea:	3304      	adds	r3, #4
 8012eec:	617b      	str	r3, [r7, #20]
        if (stream.isPlaying)
 8012eee:	697b      	ldr	r3, [r7, #20]
 8012ef0:	7f5b      	ldrb	r3, [r3, #29]
 8012ef2:	2b00      	cmp	r3, #0
 8012ef4:	d00b      	beq.n	8012f0e <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x52>
            stream.tickCount+=HAL::getInstance()->getLCDRefreshCount();
 8012ef6:	f7fb f817 	bl	800df28 <_ZN8touchgfx3HAL11getInstanceEv>
 8012efa:	4603      	mov	r3, r0
 8012efc:	4618      	mov	r0, r3
 8012efe:	f7ff fac3 	bl	8012488 <_ZN8touchgfx3HAL18getLCDRefreshCountEv>
 8012f02:	4602      	mov	r2, r0
 8012f04:	697b      	ldr	r3, [r7, #20]
 8012f06:	689b      	ldr	r3, [r3, #8]
 8012f08:	441a      	add	r2, r3
 8012f0a:	697b      	ldr	r3, [r7, #20]
 8012f0c:	609a      	str	r2, [r3, #8]
        if (stream.doInvalidateOnNextTick)
 8012f0e:	697b      	ldr	r3, [r7, #20]
 8012f10:	7fdb      	ldrb	r3, [r3, #31]
 8012f12:	2b00      	cmp	r3, #0
 8012f14:	d029      	beq.n	8012f6a <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0xae>
            widget.setVideoBuffer((uint8_t*)decodeBuffers[handle]);
 8012f16:	68fb      	ldr	r3, [r7, #12]
 8012f18:	68ba      	ldr	r2, [r7, #8]
 8012f1a:	3202      	adds	r2, #2
 8012f1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012f20:	4619      	mov	r1, r3
 8012f22:	6878      	ldr	r0, [r7, #4]
 8012f24:	f7ff fade 	bl	80124e4 <_ZN8touchgfx11VideoWidget14setVideoBufferEPh>
            widget.invalidate();
 8012f28:	687a      	ldr	r2, [r7, #4]
 8012f2a:	687b      	ldr	r3, [r7, #4]
 8012f2c:	681b      	ldr	r3, [r3, #0]
 8012f2e:	3314      	adds	r3, #20
 8012f30:	681b      	ldr	r3, [r3, #0]
 8012f32:	4610      	mov	r0, r2
 8012f34:	4798      	blx	r3
            stream.doInvalidateOnNextTick = false;
 8012f36:	697b      	ldr	r3, [r7, #20]
 8012f38:	2200      	movs	r2, #0
 8012f3a:	77da      	strb	r2, [r3, #31]
            if (!stream.hasMoreFrames && !stream.repeat)
 8012f3c:	697b      	ldr	r3, [r7, #20]
 8012f3e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012f42:	f083 0301 	eor.w	r3, r3, #1
 8012f46:	b2db      	uxtb	r3, r3
 8012f48:	2b00      	cmp	r3, #0
 8012f4a:	d00a      	beq.n	8012f62 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0xa6>
 8012f4c:	697b      	ldr	r3, [r7, #20]
 8012f4e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8012f52:	f083 0301 	eor.w	r3, r3, #1
 8012f56:	b2db      	uxtb	r3, r3
 8012f58:	2b00      	cmp	r3, #0
 8012f5a:	d002      	beq.n	8012f62 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0xa6>
                stream.isPlaying = false;
 8012f5c:	697b      	ldr	r3, [r7, #20]
 8012f5e:	2200      	movs	r2, #0
 8012f60:	775a      	strb	r2, [r3, #29]
            return stream.hasMoreFrames;
 8012f62:	697b      	ldr	r3, [r7, #20]
 8012f64:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012f68:	e000      	b.n	8012f6c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0xb0>
        return true;
 8012f6a:	2301      	movs	r3, #1
    }
 8012f6c:	4618      	mov	r0, r3
 8012f6e:	3718      	adds	r7, #24
 8012f70:	46bd      	mov	sp, r7
 8012f72:	bd80      	pop	{r7, pc}
 8012f74:	08028c18 	.word	0x08028c18
 8012f78:	08028de8 	.word	0x08028de8
 8012f7c:	080289f8 	.word	0x080289f8

08012f80 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE>:
    virtual void draw(const Handle handle, const touchgfx::Rect& invalidatedArea, const touchgfx::VideoWidget& widget)
 8012f80:	b580      	push	{r7, lr}
 8012f82:	b084      	sub	sp, #16
 8012f84:	af00      	add	r7, sp, #0
 8012f86:	60f8      	str	r0, [r7, #12]
 8012f88:	60b9      	str	r1, [r7, #8]
 8012f8a:	607a      	str	r2, [r7, #4]
 8012f8c:	603b      	str	r3, [r7, #0]
        if (firstDrawThisFrame)
 8012f8e:	68fb      	ldr	r3, [r7, #12]
 8012f90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012f94:	2b00      	cmp	r3, #0
 8012f96:	d00e      	beq.n	8012fb6 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE+0x36>
            MUTEX_LOCK(mutexBuffers);
 8012f98:	68fb      	ldr	r3, [r7, #12]
 8012f9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012f9c:	f04f 31ff 	mov.w	r1, #4294967295
 8012fa0:	4618      	mov	r0, r3
 8012fa2:	f7f6 ff1d 	bl	8009de0 <osMutexAcquire>
            firstDrawThisFrame = false;
 8012fa6:	68fb      	ldr	r3, [r7, #12]
 8012fa8:	2200      	movs	r2, #0
 8012faa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
            uiHasMutex = true;
 8012fae:	68fb      	ldr	r3, [r7, #12]
 8012fb0:	2201      	movs	r2, #1
 8012fb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
 8012fb6:	bf00      	nop
 8012fb8:	3710      	adds	r7, #16
 8012fba:	46bd      	mov	sp, r7
 8012fbc:	bd80      	pop	{r7, pc}
	...

08012fc0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm>:
    virtual void setVideoData(const Handle handle, const uint8_t* movie, const uint32_t length)
 8012fc0:	b580      	push	{r7, lr}
 8012fc2:	b086      	sub	sp, #24
 8012fc4:	af00      	add	r7, sp, #0
 8012fc6:	60f8      	str	r0, [r7, #12]
 8012fc8:	60b9      	str	r1, [r7, #8]
 8012fca:	607a      	str	r2, [r7, #4]
 8012fcc:	603b      	str	r3, [r7, #0]
        assert(handle < no_streams);
 8012fce:	68bb      	ldr	r3, [r7, #8]
 8012fd0:	2b00      	cmp	r3, #0
 8012fd2:	d005      	beq.n	8012fe0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm+0x20>
 8012fd4:	4b13      	ldr	r3, [pc, #76]	; (8013024 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm+0x64>)
 8012fd6:	4a14      	ldr	r2, [pc, #80]	; (8013028 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm+0x68>)
 8012fd8:	2190      	movs	r1, #144	; 0x90
 8012fda:	4814      	ldr	r0, [pc, #80]	; (801302c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm+0x6c>)
 8012fdc:	f013 fc02 	bl	80267e4 <__assert_func>
        Stream& stream = streams[handle];
 8012fe0:	68ba      	ldr	r2, [r7, #8]
 8012fe2:	4613      	mov	r3, r2
 8012fe4:	00db      	lsls	r3, r3, #3
 8012fe6:	4413      	add	r3, r2
 8012fe8:	009b      	lsls	r3, r3, #2
 8012fea:	3308      	adds	r3, #8
 8012fec:	68fa      	ldr	r2, [r7, #12]
 8012fee:	4413      	add	r3, r2
 8012ff0:	3304      	adds	r3, #4
 8012ff2:	617b      	str	r3, [r7, #20]
        stream.frameNumber = 0;
 8012ff4:	697b      	ldr	r3, [r7, #20]
 8012ff6:	2200      	movs	r2, #0
 8012ff8:	601a      	str	r2, [r3, #0]
        mjpegDecoders[handle]->setVideoData(movie, length);
 8012ffa:	68fa      	ldr	r2, [r7, #12]
 8012ffc:	68bb      	ldr	r3, [r7, #8]
 8012ffe:	009b      	lsls	r3, r3, #2
 8013000:	4413      	add	r3, r2
 8013002:	6858      	ldr	r0, [r3, #4]
 8013004:	68fa      	ldr	r2, [r7, #12]
 8013006:	68bb      	ldr	r3, [r7, #8]
 8013008:	009b      	lsls	r3, r3, #2
 801300a:	4413      	add	r3, r2
 801300c:	685b      	ldr	r3, [r3, #4]
 801300e:	681b      	ldr	r3, [r3, #0]
 8013010:	3308      	adds	r3, #8
 8013012:	681b      	ldr	r3, [r3, #0]
 8013014:	683a      	ldr	r2, [r7, #0]
 8013016:	6879      	ldr	r1, [r7, #4]
 8013018:	4798      	blx	r3
    }
 801301a:	bf00      	nop
 801301c:	3718      	adds	r7, #24
 801301e:	46bd      	mov	sp, r7
 8013020:	bd80      	pop	{r7, pc}
 8013022:	bf00      	nop
 8013024:	08028c18 	.word	0x08028c18
 8013028:	08028f8c 	.word	0x08028f8c
 801302c:	080289f8 	.word	0x080289f8

08013030 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmRNS0_15VideoDataReaderE>:
    virtual void setVideoData(const Handle handle, VideoDataReader& reader)
 8013030:	b580      	push	{r7, lr}
 8013032:	b084      	sub	sp, #16
 8013034:	af00      	add	r7, sp, #0
 8013036:	60f8      	str	r0, [r7, #12]
 8013038:	60b9      	str	r1, [r7, #8]
 801303a:	607a      	str	r2, [r7, #4]
        mjpegDecoders[handle]->setVideoData(reader);
 801303c:	68fa      	ldr	r2, [r7, #12]
 801303e:	68bb      	ldr	r3, [r7, #8]
 8013040:	009b      	lsls	r3, r3, #2
 8013042:	4413      	add	r3, r2
 8013044:	6858      	ldr	r0, [r3, #4]
 8013046:	68fa      	ldr	r2, [r7, #12]
 8013048:	68bb      	ldr	r3, [r7, #8]
 801304a:	009b      	lsls	r3, r3, #2
 801304c:	4413      	add	r3, r2
 801304e:	685b      	ldr	r3, [r3, #4]
 8013050:	681b      	ldr	r3, [r3, #0]
 8013052:	330c      	adds	r3, #12
 8013054:	681b      	ldr	r3, [r3, #0]
 8013056:	6879      	ldr	r1, [r7, #4]
 8013058:	4798      	blx	r3
    }
 801305a:	bf00      	nop
 801305c:	3710      	adds	r7, #16
 801305e:	46bd      	mov	sp, r7
 8013060:	bd80      	pop	{r7, pc}
	...

08013064 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm>:
    virtual void setCommand(const Handle handle, Command cmd, uint32_t param)
 8013064:	b580      	push	{r7, lr}
 8013066:	b086      	sub	sp, #24
 8013068:	af00      	add	r7, sp, #0
 801306a:	60f8      	str	r0, [r7, #12]
 801306c:	60b9      	str	r1, [r7, #8]
 801306e:	603b      	str	r3, [r7, #0]
 8013070:	4613      	mov	r3, r2
 8013072:	71fb      	strb	r3, [r7, #7]
        assert(handle < no_streams);
 8013074:	68bb      	ldr	r3, [r7, #8]
 8013076:	2b00      	cmp	r3, #0
 8013078:	d005      	beq.n	8013086 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x22>
 801307a:	4b3a      	ldr	r3, [pc, #232]	; (8013164 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x100>)
 801307c:	4a3a      	ldr	r2, [pc, #232]	; (8013168 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x104>)
 801307e:	21a2      	movs	r1, #162	; 0xa2
 8013080:	483a      	ldr	r0, [pc, #232]	; (801316c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x108>)
 8013082:	f013 fbaf 	bl	80267e4 <__assert_func>
        Stream& stream = streams[handle];
 8013086:	68ba      	ldr	r2, [r7, #8]
 8013088:	4613      	mov	r3, r2
 801308a:	00db      	lsls	r3, r3, #3
 801308c:	4413      	add	r3, r2
 801308e:	009b      	lsls	r3, r3, #2
 8013090:	3308      	adds	r3, #8
 8013092:	68fa      	ldr	r2, [r7, #12]
 8013094:	4413      	add	r3, r2
 8013096:	3304      	adds	r3, #4
 8013098:	617b      	str	r3, [r7, #20]
        switch (cmd)
 801309a:	79fb      	ldrb	r3, [r7, #7]
 801309c:	2b05      	cmp	r3, #5
 801309e:	d85c      	bhi.n	801315a <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0xf6>
 80130a0:	a201      	add	r2, pc, #4	; (adr r2, 80130a8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x44>)
 80130a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80130a6:	bf00      	nop
 80130a8:	080130c1 	.word	0x080130c1
 80130ac:	08013101 	.word	0x08013101
 80130b0:	08013109 	.word	0x08013109
 80130b4:	0801311d 	.word	0x0801311d
 80130b8:	08013137 	.word	0x08013137
 80130bc:	08013145 	.word	0x08013145
            if (mjpegDecoders[handle]->hasVideo())
 80130c0:	68fa      	ldr	r2, [r7, #12]
 80130c2:	68bb      	ldr	r3, [r7, #8]
 80130c4:	009b      	lsls	r3, r3, #2
 80130c6:	4413      	add	r3, r2
 80130c8:	6859      	ldr	r1, [r3, #4]
 80130ca:	68fa      	ldr	r2, [r7, #12]
 80130cc:	68bb      	ldr	r3, [r7, #8]
 80130ce:	009b      	lsls	r3, r3, #2
 80130d0:	4413      	add	r3, r2
 80130d2:	685b      	ldr	r3, [r3, #4]
 80130d4:	681b      	ldr	r3, [r3, #0]
 80130d6:	3310      	adds	r3, #16
 80130d8:	681b      	ldr	r3, [r3, #0]
 80130da:	4608      	mov	r0, r1
 80130dc:	4798      	blx	r3
 80130de:	4603      	mov	r3, r0
 80130e0:	2b00      	cmp	r3, #0
 80130e2:	d039      	beq.n	8013158 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0xf4>
                stream.isPlaying = true;
 80130e4:	697b      	ldr	r3, [r7, #20]
 80130e6:	2201      	movs	r2, #1
 80130e8:	775a      	strb	r2, [r3, #29]
                stream.hasMoreFrames = true; // Assume more frames, lowered on end
 80130ea:	697b      	ldr	r3, [r7, #20]
 80130ec:	2201      	movs	r2, #1
 80130ee:	f883 2020 	strb.w	r2, [r3, #32]
                stream.frameCount = 0;
 80130f2:	697b      	ldr	r3, [r7, #20]
 80130f4:	2200      	movs	r2, #0
 80130f6:	605a      	str	r2, [r3, #4]
                stream.tickCount = 0;
 80130f8:	697b      	ldr	r3, [r7, #20]
 80130fa:	2200      	movs	r2, #0
 80130fc:	609a      	str	r2, [r3, #8]
            break;
 80130fe:	e02b      	b.n	8013158 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0xf4>
            stream.isPlaying = false;
 8013100:	697b      	ldr	r3, [r7, #20]
 8013102:	2200      	movs	r2, #0
 8013104:	775a      	strb	r2, [r3, #29]
            break;
 8013106:	e028      	b.n	801315a <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0xf6>
            stream.seek_to_frame = param;
 8013108:	697b      	ldr	r3, [r7, #20]
 801310a:	683a      	ldr	r2, [r7, #0]
 801310c:	615a      	str	r2, [r3, #20]
            stream.frameCount = 0;
 801310e:	697b      	ldr	r3, [r7, #20]
 8013110:	2200      	movs	r2, #0
 8013112:	605a      	str	r2, [r3, #4]
            stream.tickCount = 0;
 8013114:	697b      	ldr	r3, [r7, #20]
 8013116:	2200      	movs	r2, #0
 8013118:	609a      	str	r2, [r3, #8]
            break;
 801311a:	e01e      	b.n	801315a <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0xf6>
            stream.seek_to_frame = param;
 801311c:	697b      	ldr	r3, [r7, #20]
 801311e:	683a      	ldr	r2, [r7, #0]
 8013120:	615a      	str	r2, [r3, #20]
            stream.isShowingOneFrame = true;
 8013122:	697b      	ldr	r3, [r7, #20]
 8013124:	2201      	movs	r2, #1
 8013126:	779a      	strb	r2, [r3, #30]
            stream.frameCount = 0;
 8013128:	697b      	ldr	r3, [r7, #20]
 801312a:	2200      	movs	r2, #0
 801312c:	605a      	str	r2, [r3, #4]
            stream.tickCount = 0;
 801312e:	697b      	ldr	r3, [r7, #20]
 8013130:	2200      	movs	r2, #0
 8013132:	609a      	str	r2, [r3, #8]
            break;
 8013134:	e011      	b.n	801315a <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0xf6>
            stream.isPlaying = false;
 8013136:	697b      	ldr	r3, [r7, #20]
 8013138:	2200      	movs	r2, #0
 801313a:	775a      	strb	r2, [r3, #29]
            stream.seek_to_frame = 1;
 801313c:	697b      	ldr	r3, [r7, #20]
 801313e:	2201      	movs	r2, #1
 8013140:	615a      	str	r2, [r3, #20]
            break;
 8013142:	e00a      	b.n	801315a <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0xf6>
            stream.repeat = (param > 0);
 8013144:	683b      	ldr	r3, [r7, #0]
 8013146:	2b00      	cmp	r3, #0
 8013148:	bf14      	ite	ne
 801314a:	2301      	movne	r3, #1
 801314c:	2300      	moveq	r3, #0
 801314e:	b2da      	uxtb	r2, r3
 8013150:	697b      	ldr	r3, [r7, #20]
 8013152:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            break;
 8013156:	e000      	b.n	801315a <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0xf6>
            break;
 8013158:	bf00      	nop
    }
 801315a:	bf00      	nop
 801315c:	3718      	adds	r7, #24
 801315e:	46bd      	mov	sp, r7
 8013160:	bd80      	pop	{r7, pc}
 8013162:	bf00      	nop
 8013164:	08028c18 	.word	0x08028c18
 8013168:	08029168 	.word	0x08029168
 801316c:	080289f8 	.word	0x080289f8

08013170 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm>:
    virtual uint32_t getCurrentFrameNumber(const Handle handle)
 8013170:	b580      	push	{r7, lr}
 8013172:	b084      	sub	sp, #16
 8013174:	af00      	add	r7, sp, #0
 8013176:	6078      	str	r0, [r7, #4]
 8013178:	6039      	str	r1, [r7, #0]
        assert(handle < no_streams);
 801317a:	683b      	ldr	r3, [r7, #0]
 801317c:	2b00      	cmp	r3, #0
 801317e:	d005      	beq.n	801318c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x1c>
 8013180:	4b0a      	ldr	r3, [pc, #40]	; (80131ac <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x3c>)
 8013182:	4a0b      	ldr	r2, [pc, #44]	; (80131b0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x40>)
 8013184:	2179      	movs	r1, #121	; 0x79
 8013186:	480b      	ldr	r0, [pc, #44]	; (80131b4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x44>)
 8013188:	f013 fb2c 	bl	80267e4 <__assert_func>
        const Stream& stream = streams[handle];
 801318c:	683a      	ldr	r2, [r7, #0]
 801318e:	4613      	mov	r3, r2
 8013190:	00db      	lsls	r3, r3, #3
 8013192:	4413      	add	r3, r2
 8013194:	009b      	lsls	r3, r3, #2
 8013196:	3308      	adds	r3, #8
 8013198:	687a      	ldr	r2, [r7, #4]
 801319a:	4413      	add	r3, r2
 801319c:	3304      	adds	r3, #4
 801319e:	60fb      	str	r3, [r7, #12]
        return stream.frameNumber;
 80131a0:	68fb      	ldr	r3, [r7, #12]
 80131a2:	681b      	ldr	r3, [r3, #0]
    }
 80131a4:	4618      	mov	r0, r3
 80131a6:	3710      	adds	r7, #16
 80131a8:	46bd      	mov	sp, r7
 80131aa:	bd80      	pop	{r7, pc}
 80131ac:	08028c18 	.word	0x08028c18
 80131b0:	0802933c 	.word	0x0802933c
 80131b4:	080289f8 	.word	0x080289f8

080131b8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE>:
    virtual void getVideoInformation(const Handle handle, touchgfx::VideoInformation* data)
 80131b8:	b580      	push	{r7, lr}
 80131ba:	b084      	sub	sp, #16
 80131bc:	af00      	add	r7, sp, #0
 80131be:	60f8      	str	r0, [r7, #12]
 80131c0:	60b9      	str	r1, [r7, #8]
 80131c2:	607a      	str	r2, [r7, #4]
        assert(handle < no_streams);
 80131c4:	68bb      	ldr	r3, [r7, #8]
 80131c6:	2b00      	cmp	r3, #0
 80131c8:	d006      	beq.n	80131d8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x20>
 80131ca:	4b0d      	ldr	r3, [pc, #52]	; (8013200 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x48>)
 80131cc:	4a0d      	ldr	r2, [pc, #52]	; (8013204 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x4c>)
 80131ce:	f44f 71b5 	mov.w	r1, #362	; 0x16a
 80131d2:	480d      	ldr	r0, [pc, #52]	; (8013208 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x50>)
 80131d4:	f013 fb06 	bl	80267e4 <__assert_func>
        mjpegDecoders[handle]->getVideoInfo(data);
 80131d8:	68fa      	ldr	r2, [r7, #12]
 80131da:	68bb      	ldr	r3, [r7, #8]
 80131dc:	009b      	lsls	r3, r3, #2
 80131de:	4413      	add	r3, r2
 80131e0:	6858      	ldr	r0, [r3, #4]
 80131e2:	68fa      	ldr	r2, [r7, #12]
 80131e4:	68bb      	ldr	r3, [r7, #8]
 80131e6:	009b      	lsls	r3, r3, #2
 80131e8:	4413      	add	r3, r2
 80131ea:	685b      	ldr	r3, [r3, #4]
 80131ec:	681b      	ldr	r3, [r3, #0]
 80131ee:	3330      	adds	r3, #48	; 0x30
 80131f0:	681b      	ldr	r3, [r3, #0]
 80131f2:	6879      	ldr	r1, [r7, #4]
 80131f4:	4798      	blx	r3
    }
 80131f6:	bf00      	nop
 80131f8:	3710      	adds	r7, #16
 80131fa:	46bd      	mov	sp, r7
 80131fc:	bd80      	pop	{r7, pc}
 80131fe:	bf00      	nop
 8013200:	08028c18 	.word	0x08028c18
 8013204:	080294f4 	.word	0x080294f4
 8013208:	080289f8 	.word	0x080289f8

0801320c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm>:
    virtual bool getIsPlaying(const Handle handle)
 801320c:	b580      	push	{r7, lr}
 801320e:	b084      	sub	sp, #16
 8013210:	af00      	add	r7, sp, #0
 8013212:	6078      	str	r0, [r7, #4]
 8013214:	6039      	str	r1, [r7, #0]
        assert(handle < no_streams);
 8013216:	683b      	ldr	r3, [r7, #0]
 8013218:	2b00      	cmp	r3, #0
 801321a:	d006      	beq.n	801322a <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x1e>
 801321c:	4b0b      	ldr	r3, [pc, #44]	; (801324c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x40>)
 801321e:	4a0c      	ldr	r2, [pc, #48]	; (8013250 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x44>)
 8013220:	f44f 71b8 	mov.w	r1, #368	; 0x170
 8013224:	480b      	ldr	r0, [pc, #44]	; (8013254 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x48>)
 8013226:	f013 fadd 	bl	80267e4 <__assert_func>
        Stream& stream = streams[handle];
 801322a:	683a      	ldr	r2, [r7, #0]
 801322c:	4613      	mov	r3, r2
 801322e:	00db      	lsls	r3, r3, #3
 8013230:	4413      	add	r3, r2
 8013232:	009b      	lsls	r3, r3, #2
 8013234:	3308      	adds	r3, #8
 8013236:	687a      	ldr	r2, [r7, #4]
 8013238:	4413      	add	r3, r2
 801323a:	3304      	adds	r3, #4
 801323c:	60fb      	str	r3, [r7, #12]
        return stream.isPlaying;
 801323e:	68fb      	ldr	r3, [r7, #12]
 8013240:	7f5b      	ldrb	r3, [r3, #29]
    }
 8013242:	4618      	mov	r0, r3
 8013244:	3710      	adds	r7, #16
 8013246:	46bd      	mov	sp, r7
 8013248:	bd80      	pop	{r7, pc}
 801324a:	bf00      	nop
 801324c:	08028c18 	.word	0x08028c18
 8013250:	080296a4 	.word	0x080296a4
 8013254:	080289f8 	.word	0x080289f8

08013258 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE13getFreeHandleEv>:

    Handle getFreeHandle()
 8013258:	b5f0      	push	{r4, r5, r6, r7, lr}
 801325a:	b08d      	sub	sp, #52	; 0x34
 801325c:	af00      	add	r7, sp, #0
 801325e:	6078      	str	r0, [r7, #4]
    {
        // Running in UI thread

        for (uint32_t i = 0; i < no_streams; i++)
 8013260:	2300      	movs	r3, #0
 8013262:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013266:	2b00      	cmp	r3, #0
 8013268:	d135      	bne.n	80132d6 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE13getFreeHandleEv+0x7e>
        {
            if (streams[i].isActive == false)
 801326a:	6879      	ldr	r1, [r7, #4]
 801326c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801326e:	4613      	mov	r3, r2
 8013270:	00db      	lsls	r3, r3, #3
 8013272:	4413      	add	r3, r2
 8013274:	009b      	lsls	r3, r3, #2
 8013276:	440b      	add	r3, r1
 8013278:	3328      	adds	r3, #40	; 0x28
 801327a:	781b      	ldrb	r3, [r3, #0]
 801327c:	2b00      	cmp	r3, #0
 801327e:	d126      	bne.n	80132ce <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE13getFreeHandleEv+0x76>
            {
                // Reset stream parameters
                streams[i] = Stream();
 8013280:	f107 0308 	add.w	r3, r7, #8
 8013284:	4618      	mov	r0, r3
 8013286:	f7ff fc9a 	bl	8012bbe <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE6StreamC1Ev>
 801328a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801328c:	4613      	mov	r3, r2
 801328e:	00db      	lsls	r3, r3, #3
 8013290:	4413      	add	r3, r2
 8013292:	009b      	lsls	r3, r3, #2
 8013294:	3308      	adds	r3, #8
 8013296:	687a      	ldr	r2, [r7, #4]
 8013298:	4413      	add	r3, r2
 801329a:	3304      	adds	r3, #4
 801329c:	f107 0408 	add.w	r4, r7, #8
 80132a0:	469c      	mov	ip, r3
 80132a2:	f104 0e20 	add.w	lr, r4, #32
 80132a6:	4665      	mov	r5, ip
 80132a8:	4626      	mov	r6, r4
 80132aa:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80132ac:	6028      	str	r0, [r5, #0]
 80132ae:	6069      	str	r1, [r5, #4]
 80132b0:	60aa      	str	r2, [r5, #8]
 80132b2:	60eb      	str	r3, [r5, #12]
 80132b4:	3410      	adds	r4, #16
 80132b6:	f10c 0c10 	add.w	ip, ip, #16
 80132ba:	4574      	cmp	r4, lr
 80132bc:	d1f3      	bne.n	80132a6 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE13getFreeHandleEv+0x4e>
 80132be:	4663      	mov	r3, ip
 80132c0:	4622      	mov	r2, r4
 80132c2:	8811      	ldrh	r1, [r2, #0]
 80132c4:	7892      	ldrb	r2, [r2, #2]
 80132c6:	8019      	strh	r1, [r3, #0]
 80132c8:	709a      	strb	r2, [r3, #2]

                return static_cast<VideoController::Handle>(i);
 80132ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132cc:	e00a      	b.n	80132e4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE13getFreeHandleEv+0x8c>
        for (uint32_t i = 0; i < no_streams; i++)
 80132ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132d0:	3301      	adds	r3, #1
 80132d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80132d4:	e7c6      	b.n	8013264 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE13getFreeHandleEv+0xc>
            }
        }

        assert(0 && "Unable to find free video stream handle!");
 80132d6:	4b05      	ldr	r3, [pc, #20]	; (80132ec <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE13getFreeHandleEv+0x94>)
 80132d8:	4a05      	ldr	r2, [pc, #20]	; (80132f0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE13getFreeHandleEv+0x98>)
 80132da:	f240 11c5 	movw	r1, #453	; 0x1c5
 80132de:	4805      	ldr	r0, [pc, #20]	; (80132f4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE13getFreeHandleEv+0x9c>)
 80132e0:	f013 fa80 	bl	80267e4 <__assert_func>
        return static_cast<VideoController::Handle>(0);
    }
 80132e4:	4618      	mov	r0, r3
 80132e6:	3734      	adds	r7, #52	; 0x34
 80132e8:	46bd      	mov	sp, r7
 80132ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80132ec:	08029830 	.word	0x08029830
 80132f0:	08029860 	.word	0x08029860
 80132f4:	080289f8 	.word	0x080289f8

080132f8 <_GLOBAL__sub_I_mjpegdecoder1>:
 80132f8:	b580      	push	{r7, lr}
 80132fa:	af00      	add	r7, sp, #0
 80132fc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8013300:	2001      	movs	r0, #1
 8013302:	f7ff fcf3 	bl	8012cec <_Z41__static_initialization_and_destruction_0ii>
 8013306:	bd80      	pop	{r7, pc}

08013308 <_GLOBAL__sub_D_mjpegdecoder1>:
 8013308:	b580      	push	{r7, lr}
 801330a:	af00      	add	r7, sp, #0
 801330c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8013310:	2000      	movs	r0, #0
 8013312:	f7ff fceb 	bl	8012cec <_Z41__static_initialization_and_destruction_0ii>
 8013316:	bd80      	pop	{r7, pc}

08013318 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks>:
static uint32_t TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
 8013318:	b480      	push	{r7}
 801331a:	b097      	sub	sp, #92	; 0x5c
 801331c:	af00      	add	r7, sp, #0
 801331e:	60f8      	str	r0, [r7, #12]
 8013320:	60b9      	str	r1, [r7, #8]
 8013322:	607a      	str	r2, [r7, #4]
 8013324:	603b      	str	r3, [r7, #0]
  int32_t c_red, c_blue, c_green;

  uint8_t *pOutAddr, *pOutAddr2;
  uint8_t *pChrom, *pLum;

  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
 8013326:	683b      	ldr	r3, [r7, #0]
 8013328:	4a29      	ldr	r2, [pc, #164]	; (80133d0 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xb8>)
 801332a:	fba2 2303 	umull	r2, r3, r2, r3
 801332e:	0a1b      	lsrs	r3, r3, #8
 8013330:	633b      	str	r3, [r7, #48]	; 0x30
  currentMCU = BlockIndex;
 8013332:	687b      	ldr	r3, [r7, #4]
 8013334:	64bb      	str	r3, [r7, #72]	; 0x48

  while(currentMCU < (numberMCU + BlockIndex))
 8013336:	e152      	b.n	80135de <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2c6>
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
 8013338:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801333a:	011a      	lsls	r2, r3, #4
 801333c:	4b25      	ldr	r3, [pc, #148]	; (80133d4 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xbc>)
 801333e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013340:	fbb2 f3f3 	udiv	r3, r2, r3
 8013344:	011b      	lsls	r3, r3, #4
 8013346:	62fb      	str	r3, [r7, #44]	; 0x2c

    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
 8013348:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801334a:	011b      	lsls	r3, r3, #4
 801334c:	4a21      	ldr	r2, [pc, #132]	; (80133d4 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xbc>)
 801334e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8013350:	fbb3 f1f2 	udiv	r1, r3, r2
 8013354:	fb01 f202 	mul.w	r2, r1, r2
 8013358:	1a9b      	subs	r3, r3, r2
 801335a:	62bb      	str	r3, [r7, #40]	; 0x28

    //tgfx: Set stride to the full width of the RGB Buffer, and not the video itself.
    JPEG_ConvertorParams.ScaledWidth = 800 * 2;
 801335c:	4b1d      	ldr	r3, [pc, #116]	; (80133d4 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xbc>)
 801335e:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8013362:	629a      	str	r2, [r3, #40]	; 0x28

    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8013364:	4b1b      	ldr	r3, [pc, #108]	; (80133d4 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xbc>)
 8013366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013368:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801336a:	fb03 f202 	mul.w	r2, r3, r2
 801336e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013370:	005b      	lsls	r3, r3, #1
 8013372:	4413      	add	r3, r2
 8013374:	647b      	str	r3, [r7, #68]	; 0x44

    currentMCU++;
 8013376:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013378:	3301      	adds	r3, #1
 801337a:	64bb      	str	r3, [r7, #72]	; 0x48

    pChrom = pInBuffer + 256; /* pChroma = pInBuffer + 4*64 */
 801337c:	68fb      	ldr	r3, [r7, #12]
 801337e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8013382:	63bb      	str	r3, [r7, #56]	; 0x38

    pLum = pInBuffer;
 8013384:	68fb      	ldr	r3, [r7, #12]
 8013386:	637b      	str	r3, [r7, #52]	; 0x34

    for(i= 0; i <  16; i+=2)
 8013388:	2300      	movs	r3, #0
 801338a:	657b      	str	r3, [r7, #84]	; 0x54
 801338c:	e11f      	b.n	80135ce <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2b6>
    {
      if(i == 8)
 801338e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013390:	2b08      	cmp	r3, #8
 8013392:	d102      	bne.n	801339a <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x82>
      {
        pLum = pInBuffer + 128;
 8013394:	68fb      	ldr	r3, [r7, #12]
 8013396:	3380      	adds	r3, #128	; 0x80
 8013398:	637b      	str	r3, [r7, #52]	; 0x34
      }

      if(refline < JPEG_ConvertorParams.ScaledWidth * 480)
 801339a:	4b0e      	ldr	r3, [pc, #56]	; (80133d4 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xbc>)
 801339c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801339e:	4613      	mov	r3, r2
 80133a0:	011b      	lsls	r3, r3, #4
 80133a2:	1a9b      	subs	r3, r3, r2
 80133a4:	015b      	lsls	r3, r3, #5
 80133a6:	461a      	mov	r2, r3
 80133a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80133aa:	4293      	cmp	r3, r2
 80133ac:	f080 810c 	bcs.w	80135c8 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2b0>
      {
        pOutAddr = pOutBuffer + refline;
 80133b0:	68ba      	ldr	r2, [r7, #8]
 80133b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80133b4:	4413      	add	r3, r2
 80133b6:	643b      	str	r3, [r7, #64]	; 0x40
        pOutAddr2 = pOutAddr + JPEG_ConvertorParams.ScaledWidth;
 80133b8:	4b06      	ldr	r3, [pc, #24]	; (80133d4 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xbc>)
 80133ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80133bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80133be:	4413      	add	r3, r2
 80133c0:	63fb      	str	r3, [r7, #60]	; 0x3c

        for(k= 0; k<2; k++)
 80133c2:	2300      	movs	r3, #0
 80133c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80133c6:	e0f2      	b.n	80135ae <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x296>
        {
          for(j=0; j < 8; j+=2)
 80133c8:	2300      	movs	r3, #0
 80133ca:	653b      	str	r3, [r7, #80]	; 0x50
 80133cc:	e0e5      	b.n	801359a <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x282>
 80133ce:	bf00      	nop
 80133d0:	aaaaaaab 	.word	0xaaaaaaab
 80133d4:	2001f39c 	.word	0x2001f39c
          {
            cbcomp = (int32_t)(*(pChrom));
 80133d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80133da:	781b      	ldrb	r3, [r3, #0]
 80133dc:	627b      	str	r3, [r7, #36]	; 0x24
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 80133de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133e0:	009b      	lsls	r3, r3, #2
 80133e2:	4a86      	ldr	r2, [pc, #536]	; (80135fc <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2e4>)
 80133e4:	4413      	add	r3, r2
 80133e6:	681b      	ldr	r3, [r3, #0]
 80133e8:	623b      	str	r3, [r7, #32]

            crcomp = (int32_t)(*(pChrom + 64));
 80133ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80133ec:	3340      	adds	r3, #64	; 0x40
 80133ee:	781b      	ldrb	r3, [r3, #0]
 80133f0:	61fb      	str	r3, [r7, #28]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
 80133f2:	69fb      	ldr	r3, [r7, #28]
 80133f4:	009b      	lsls	r3, r3, #2
 80133f6:	4a82      	ldr	r2, [pc, #520]	; (8013600 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2e8>)
 80133f8:	4413      	add	r3, r2
 80133fa:	681b      	ldr	r3, [r3, #0]
 80133fc:	61bb      	str	r3, [r7, #24]

            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
 80133fe:	69fb      	ldr	r3, [r7, #28]
 8013400:	009b      	lsls	r3, r3, #2
 8013402:	4a80      	ldr	r2, [pc, #512]	; (8013604 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2ec>)
 8013404:	4413      	add	r3, r2
 8013406:	681a      	ldr	r2, [r3, #0]
 8013408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801340a:	009b      	lsls	r3, r3, #2
 801340c:	497e      	ldr	r1, [pc, #504]	; (8013608 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2f0>)
 801340e:	440b      	add	r3, r1
 8013410:	681b      	ldr	r3, [r3, #0]
 8013412:	4413      	add	r3, r2
 8013414:	141b      	asrs	r3, r3, #16
 8013416:	617b      	str	r3, [r7, #20]
            pOutAddr2[3 + JPEG_GREEN_OFFSET/8] = CLAMP(ycomp + c_green);
            pOutAddr2[3 + JPEG_BLUE_OFFSET/8] = CLAMP(ycomp + c_blue);

#elif (JPEG_RGB_FORMAT == JPEG_RGB565)

            ycomp = (int32_t)(*(pLum +j));
 8013418:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801341a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801341c:	4413      	add	r3, r2
 801341e:	781b      	ldrb	r3, [r3, #0]
 8013420:	613b      	str	r3, [r7, #16]

            *(__IO uint16_t *)pOutAddr =
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8013422:	693a      	ldr	r2, [r7, #16]
 8013424:	69bb      	ldr	r3, [r7, #24]
 8013426:	4413      	add	r3, r2
 8013428:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801342c:	4a77      	ldr	r2, [pc, #476]	; (801360c <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2f4>)
 801342e:	5cd3      	ldrb	r3, [r2, r3]
 8013430:	08db      	lsrs	r3, r3, #3
 8013432:	b2db      	uxtb	r3, r3
 8013434:	02db      	lsls	r3, r3, #11
 8013436:	b21a      	sxth	r2, r3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8013438:	6939      	ldr	r1, [r7, #16]
 801343a:	697b      	ldr	r3, [r7, #20]
 801343c:	440b      	add	r3, r1
 801343e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8013442:	4972      	ldr	r1, [pc, #456]	; (801360c <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2f4>)
 8013444:	5ccb      	ldrb	r3, [r1, r3]
 8013446:	089b      	lsrs	r3, r3, #2
 8013448:	b2db      	uxtb	r3, r3
 801344a:	015b      	lsls	r3, r3, #5
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 801344c:	b21b      	sxth	r3, r3
 801344e:	4313      	orrs	r3, r2
 8013450:	b21a      	sxth	r2, r3
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 8013452:	6939      	ldr	r1, [r7, #16]
 8013454:	6a3b      	ldr	r3, [r7, #32]
 8013456:	440b      	add	r3, r1
 8013458:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801345c:	496b      	ldr	r1, [pc, #428]	; (801360c <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2f4>)
 801345e:	5ccb      	ldrb	r3, [r1, r3]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8013460:	08db      	lsrs	r3, r3, #3
 8013462:	b2db      	uxtb	r3, r3
 8013464:	b21b      	sxth	r3, r3
 8013466:	4313      	orrs	r3, r2
 8013468:	b21b      	sxth	r3, r3
 801346a:	b29a      	uxth	r2, r3
            *(__IO uint16_t *)pOutAddr =
 801346c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801346e:	801a      	strh	r2, [r3, #0]
            /**********/
            ycomp = (int32_t)(*(pLum +j +1));
 8013470:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013472:	3301      	adds	r3, #1
 8013474:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013476:	4413      	add	r3, r2
 8013478:	781b      	ldrb	r3, [r3, #0]
 801347a:	613b      	str	r3, [r7, #16]

            *((__IO uint16_t *)(pOutAddr + 2)) =
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 801347c:	693a      	ldr	r2, [r7, #16]
 801347e:	69bb      	ldr	r3, [r7, #24]
 8013480:	4413      	add	r3, r2
 8013482:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8013486:	4a61      	ldr	r2, [pc, #388]	; (801360c <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2f4>)
 8013488:	5cd3      	ldrb	r3, [r2, r3]
 801348a:	08db      	lsrs	r3, r3, #3
 801348c:	b2db      	uxtb	r3, r3
 801348e:	02db      	lsls	r3, r3, #11
 8013490:	b21a      	sxth	r2, r3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8013492:	6939      	ldr	r1, [r7, #16]
 8013494:	697b      	ldr	r3, [r7, #20]
 8013496:	440b      	add	r3, r1
 8013498:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801349c:	495b      	ldr	r1, [pc, #364]	; (801360c <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2f4>)
 801349e:	5ccb      	ldrb	r3, [r1, r3]
 80134a0:	089b      	lsrs	r3, r3, #2
 80134a2:	b2db      	uxtb	r3, r3
 80134a4:	015b      	lsls	r3, r3, #5
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 80134a6:	b21b      	sxth	r3, r3
 80134a8:	4313      	orrs	r3, r2
 80134aa:	b21a      	sxth	r2, r3
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 80134ac:	6939      	ldr	r1, [r7, #16]
 80134ae:	6a3b      	ldr	r3, [r7, #32]
 80134b0:	440b      	add	r3, r1
 80134b2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80134b6:	4955      	ldr	r1, [pc, #340]	; (801360c <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2f4>)
 80134b8:	5ccb      	ldrb	r3, [r1, r3]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 80134ba:	08db      	lsrs	r3, r3, #3
 80134bc:	b2db      	uxtb	r3, r3
 80134be:	b21b      	sxth	r3, r3
 80134c0:	4313      	orrs	r3, r2
 80134c2:	b21a      	sxth	r2, r3
            *((__IO uint16_t *)(pOutAddr + 2)) =
 80134c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80134c6:	3302      	adds	r3, #2
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 80134c8:	b292      	uxth	r2, r2
            *((__IO uint16_t *)(pOutAddr + 2)) =
 80134ca:	801a      	strh	r2, [r3, #0]

            /**********/
            ycomp = (int32_t)(*(pLum +j +8));
 80134cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80134ce:	3308      	adds	r3, #8
 80134d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80134d2:	4413      	add	r3, r2
 80134d4:	781b      	ldrb	r3, [r3, #0]
 80134d6:	613b      	str	r3, [r7, #16]

            *(__IO uint16_t *)pOutAddr2 =
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 80134d8:	693a      	ldr	r2, [r7, #16]
 80134da:	69bb      	ldr	r3, [r7, #24]
 80134dc:	4413      	add	r3, r2
 80134de:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80134e2:	4a4a      	ldr	r2, [pc, #296]	; (801360c <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2f4>)
 80134e4:	5cd3      	ldrb	r3, [r2, r3]
 80134e6:	08db      	lsrs	r3, r3, #3
 80134e8:	b2db      	uxtb	r3, r3
 80134ea:	02db      	lsls	r3, r3, #11
 80134ec:	b21a      	sxth	r2, r3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 80134ee:	6939      	ldr	r1, [r7, #16]
 80134f0:	697b      	ldr	r3, [r7, #20]
 80134f2:	440b      	add	r3, r1
 80134f4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80134f8:	4944      	ldr	r1, [pc, #272]	; (801360c <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2f4>)
 80134fa:	5ccb      	ldrb	r3, [r1, r3]
 80134fc:	089b      	lsrs	r3, r3, #2
 80134fe:	b2db      	uxtb	r3, r3
 8013500:	015b      	lsls	r3, r3, #5
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8013502:	b21b      	sxth	r3, r3
 8013504:	4313      	orrs	r3, r2
 8013506:	b21a      	sxth	r2, r3
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 8013508:	6939      	ldr	r1, [r7, #16]
 801350a:	6a3b      	ldr	r3, [r7, #32]
 801350c:	440b      	add	r3, r1
 801350e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8013512:	493e      	ldr	r1, [pc, #248]	; (801360c <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2f4>)
 8013514:	5ccb      	ldrb	r3, [r1, r3]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8013516:	08db      	lsrs	r3, r3, #3
 8013518:	b2db      	uxtb	r3, r3
 801351a:	b21b      	sxth	r3, r3
 801351c:	4313      	orrs	r3, r2
 801351e:	b21b      	sxth	r3, r3
 8013520:	b29a      	uxth	r2, r3
            *(__IO uint16_t *)pOutAddr2 =
 8013522:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013524:	801a      	strh	r2, [r3, #0]

            /**********/
            ycomp = (int32_t)(*(pLum +j +8 +1));
 8013526:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013528:	3309      	adds	r3, #9
 801352a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801352c:	4413      	add	r3, r2
 801352e:	781b      	ldrb	r3, [r3, #0]
 8013530:	613b      	str	r3, [r7, #16]

            *((__IO uint16_t *)(pOutAddr2 +2)) =
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8013532:	693a      	ldr	r2, [r7, #16]
 8013534:	69bb      	ldr	r3, [r7, #24]
 8013536:	4413      	add	r3, r2
 8013538:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801353c:	4a33      	ldr	r2, [pc, #204]	; (801360c <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2f4>)
 801353e:	5cd3      	ldrb	r3, [r2, r3]
 8013540:	08db      	lsrs	r3, r3, #3
 8013542:	b2db      	uxtb	r3, r3
 8013544:	02db      	lsls	r3, r3, #11
 8013546:	b21a      	sxth	r2, r3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8013548:	6939      	ldr	r1, [r7, #16]
 801354a:	697b      	ldr	r3, [r7, #20]
 801354c:	440b      	add	r3, r1
 801354e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8013552:	492e      	ldr	r1, [pc, #184]	; (801360c <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2f4>)
 8013554:	5ccb      	ldrb	r3, [r1, r3]
 8013556:	089b      	lsrs	r3, r3, #2
 8013558:	b2db      	uxtb	r3, r3
 801355a:	015b      	lsls	r3, r3, #5
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 801355c:	b21b      	sxth	r3, r3
 801355e:	4313      	orrs	r3, r2
 8013560:	b21a      	sxth	r2, r3
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 8013562:	6939      	ldr	r1, [r7, #16]
 8013564:	6a3b      	ldr	r3, [r7, #32]
 8013566:	440b      	add	r3, r1
 8013568:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801356c:	4927      	ldr	r1, [pc, #156]	; (801360c <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2f4>)
 801356e:	5ccb      	ldrb	r3, [r1, r3]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8013570:	08db      	lsrs	r3, r3, #3
 8013572:	b2db      	uxtb	r3, r3
 8013574:	b21b      	sxth	r3, r3
 8013576:	4313      	orrs	r3, r2
 8013578:	b21a      	sxth	r2, r3
            *((__IO uint16_t *)(pOutAddr2 +2)) =
 801357a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801357c:	3302      	adds	r3, #2
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 801357e:	b292      	uxth	r2, r2
            *((__IO uint16_t *)(pOutAddr2 +2)) =
 8013580:	801a      	strh	r2, [r3, #0]
#endif /* JPEG_RGB_FORMAT */

            pOutAddr += JPEG_BYTES_PER_PIXEL * 2;
 8013582:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013584:	3304      	adds	r3, #4
 8013586:	643b      	str	r3, [r7, #64]	; 0x40
            pOutAddr2 += JPEG_BYTES_PER_PIXEL * 2;
 8013588:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801358a:	3304      	adds	r3, #4
 801358c:	63fb      	str	r3, [r7, #60]	; 0x3c

            pChrom++;
 801358e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013590:	3301      	adds	r3, #1
 8013592:	63bb      	str	r3, [r7, #56]	; 0x38
          for(j=0; j < 8; j+=2)
 8013594:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013596:	3302      	adds	r3, #2
 8013598:	653b      	str	r3, [r7, #80]	; 0x50
 801359a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801359c:	2b07      	cmp	r3, #7
 801359e:	f67f af1b 	bls.w	80133d8 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xc0>
          }
          pLum += 64;
 80135a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80135a4:	3340      	adds	r3, #64	; 0x40
 80135a6:	637b      	str	r3, [r7, #52]	; 0x34
        for(k= 0; k<2; k++)
 80135a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80135aa:	3301      	adds	r3, #1
 80135ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 80135ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80135b0:	2b01      	cmp	r3, #1
 80135b2:	f67f af09 	bls.w	80133c8 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xb0>
        }

        pLum = pLum - 128 + 16;
 80135b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80135b8:	3b70      	subs	r3, #112	; 0x70
 80135ba:	637b      	str	r3, [r7, #52]	; 0x34

        refline += 2*JPEG_ConvertorParams.ScaledWidth;
 80135bc:	4b14      	ldr	r3, [pc, #80]	; (8013610 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2f8>)
 80135be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80135c0:	005b      	lsls	r3, r3, #1
 80135c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80135c4:	4413      	add	r3, r2
 80135c6:	647b      	str	r3, [r7, #68]	; 0x44
    for(i= 0; i <  16; i+=2)
 80135c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80135ca:	3302      	adds	r3, #2
 80135cc:	657b      	str	r3, [r7, #84]	; 0x54
 80135ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80135d0:	2b0f      	cmp	r3, #15
 80135d2:	f67f aedc 	bls.w	801338e <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x76>
      }
    }

    pInBuffer +=  YCBCR_420_BLOCK_SIZE;
 80135d6:	68fb      	ldr	r3, [r7, #12]
 80135d8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80135dc:	60fb      	str	r3, [r7, #12]
  while(currentMCU < (numberMCU + BlockIndex))
 80135de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80135e0:	687b      	ldr	r3, [r7, #4]
 80135e2:	4413      	add	r3, r2
 80135e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80135e6:	429a      	cmp	r2, r3
 80135e8:	f4ff aea6 	bcc.w	8013338 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x20>
  }
  return numberMCU;
 80135ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80135ee:	4618      	mov	r0, r3
 80135f0:	375c      	adds	r7, #92	; 0x5c
 80135f2:	46bd      	mov	sp, r7
 80135f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135f8:	4770      	bx	lr
 80135fa:	bf00      	nop
 80135fc:	2001f7dc 	.word	0x2001f7dc
 8013600:	2001f3dc 	.word	0x2001f3dc
 8013604:	2001fbdc 	.word	0x2001fbdc
 8013608:	2001ffdc 	.word	0x2001ffdc
 801360c:	0802a738 	.word	0x0802a738
 8013610:	2001f39c 	.word	0x2001f39c

08013614 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr422_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
 8013614:	b480      	push	{r7}
 8013616:	b097      	sub	sp, #92	; 0x5c
 8013618:	af00      	add	r7, sp, #0
 801361a:	60f8      	str	r0, [r7, #12]
 801361c:	60b9      	str	r1, [r7, #8]
 801361e:	607a      	str	r2, [r7, #4]
 8013620:	603b      	str	r3, [r7, #0]
  int32_t c_red, c_blue, c_green;

  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;

  numberMCU = DataCount / YCBCR_422_BLOCK_SIZE;
 8013622:	683b      	ldr	r3, [r7, #0]
 8013624:	0a1b      	lsrs	r3, r3, #8
 8013626:	637b      	str	r3, [r7, #52]	; 0x34
  currentMCU = BlockIndex;
 8013628:	687b      	ldr	r3, [r7, #4]
 801362a:	64bb      	str	r3, [r7, #72]	; 0x48

  while(currentMCU < (numberMCU + BlockIndex))
 801362c:	e0d9      	b.n	80137e2 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1ce>
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
 801362e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013630:	011a      	lsls	r2, r3, #4
 8013632:	4b73      	ldr	r3, [pc, #460]	; (8013800 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1ec>)
 8013634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013636:	fbb2 f3f3 	udiv	r3, r2, r3
 801363a:	00db      	lsls	r3, r3, #3
 801363c:	633b      	str	r3, [r7, #48]	; 0x30

    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
 801363e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013640:	011b      	lsls	r3, r3, #4
 8013642:	4a6f      	ldr	r2, [pc, #444]	; (8013800 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1ec>)
 8013644:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8013646:	fbb3 f1f2 	udiv	r1, r3, r2
 801364a:	fb01 f202 	mul.w	r2, r1, r2
 801364e:	1a9b      	subs	r3, r3, r2
 8013650:	62fb      	str	r3, [r7, #44]	; 0x2c

    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8013652:	4b6b      	ldr	r3, [pc, #428]	; (8013800 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1ec>)
 8013654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013656:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013658:	fb03 f202 	mul.w	r2, r3, r2
 801365c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801365e:	005b      	lsls	r3, r3, #1
 8013660:	4413      	add	r3, r2
 8013662:	647b      	str	r3, [r7, #68]	; 0x44

    currentMCU++;
 8013664:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013666:	3301      	adds	r3, #1
 8013668:	64bb      	str	r3, [r7, #72]	; 0x48

    pChrom = pInBuffer + 128; /* pChroma = pInBuffer + 2*64 */
 801366a:	68fb      	ldr	r3, [r7, #12]
 801366c:	3380      	adds	r3, #128	; 0x80
 801366e:	63fb      	str	r3, [r7, #60]	; 0x3c

    pLum = pInBuffer;
 8013670:	68fb      	ldr	r3, [r7, #12]
 8013672:	63bb      	str	r3, [r7, #56]	; 0x38

    for(i= 0; i <  8; i++)
 8013674:	2300      	movs	r3, #0
 8013676:	657b      	str	r3, [r7, #84]	; 0x54
 8013678:	e0ab      	b.n	80137d2 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1be>
    {
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 801367a:	4b61      	ldr	r3, [pc, #388]	; (8013800 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1ec>)
 801367c:	691b      	ldr	r3, [r3, #16]
 801367e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013680:	429a      	cmp	r2, r3
 8013682:	f080 80a3 	bcs.w	80137cc <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1b8>
      {
        pOutAddr = pOutBuffer + refline;
 8013686:	68ba      	ldr	r2, [r7, #8]
 8013688:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801368a:	4413      	add	r3, r2
 801368c:	643b      	str	r3, [r7, #64]	; 0x40

        for(k= 0; k<2; k++)
 801368e:	2300      	movs	r3, #0
 8013690:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013692:	e08f      	b.n	80137b4 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1a0>
        {
          for(j=0; j < 8; j+=2)
 8013694:	2300      	movs	r3, #0
 8013696:	653b      	str	r3, [r7, #80]	; 0x50
 8013698:	e082      	b.n	80137a0 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x18c>
          {
            cbcomp = (int32_t)(*(pChrom));
 801369a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801369c:	781b      	ldrb	r3, [r3, #0]
 801369e:	62bb      	str	r3, [r7, #40]	; 0x28
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 80136a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136a2:	009b      	lsls	r3, r3, #2
 80136a4:	4a57      	ldr	r2, [pc, #348]	; (8013804 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1f0>)
 80136a6:	4413      	add	r3, r2
 80136a8:	681b      	ldr	r3, [r3, #0]
 80136aa:	627b      	str	r3, [r7, #36]	; 0x24

            crcomp = (int32_t)(*(pChrom + 64));
 80136ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80136ae:	3340      	adds	r3, #64	; 0x40
 80136b0:	781b      	ldrb	r3, [r3, #0]
 80136b2:	623b      	str	r3, [r7, #32]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
 80136b4:	6a3b      	ldr	r3, [r7, #32]
 80136b6:	009b      	lsls	r3, r3, #2
 80136b8:	4a53      	ldr	r2, [pc, #332]	; (8013808 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1f4>)
 80136ba:	4413      	add	r3, r2
 80136bc:	681b      	ldr	r3, [r3, #0]
 80136be:	61fb      	str	r3, [r7, #28]

            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
 80136c0:	6a3b      	ldr	r3, [r7, #32]
 80136c2:	009b      	lsls	r3, r3, #2
 80136c4:	4a51      	ldr	r2, [pc, #324]	; (801380c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1f8>)
 80136c6:	4413      	add	r3, r2
 80136c8:	681a      	ldr	r2, [r3, #0]
 80136ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136cc:	009b      	lsls	r3, r3, #2
 80136ce:	4950      	ldr	r1, [pc, #320]	; (8013810 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1fc>)
 80136d0:	440b      	add	r3, r1
 80136d2:	681b      	ldr	r3, [r3, #0]
 80136d4:	4413      	add	r3, r2
 80136d6:	141b      	asrs	r3, r3, #16
 80136d8:	61bb      	str	r3, [r7, #24]
            pOutAddr[3 + JPEG_GREEN_OFFSET/8] = CLAMP(ycomp + c_green);
            pOutAddr[3 + JPEG_BLUE_OFFSET/8] = CLAMP(ycomp + c_blue);

#elif (JPEG_RGB_FORMAT == JPEG_RGB565)

            ycomp = (int32_t)(*(pLum +j));
 80136da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80136dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80136de:	4413      	add	r3, r2
 80136e0:	781b      	ldrb	r3, [r3, #0]
 80136e2:	617b      	str	r3, [r7, #20]

            *(__IO uint16_t *)pOutAddr =
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 80136e4:	697a      	ldr	r2, [r7, #20]
 80136e6:	69fb      	ldr	r3, [r7, #28]
 80136e8:	4413      	add	r3, r2
 80136ea:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80136ee:	4a49      	ldr	r2, [pc, #292]	; (8013814 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x200>)
 80136f0:	5cd3      	ldrb	r3, [r2, r3]
 80136f2:	08db      	lsrs	r3, r3, #3
 80136f4:	b2db      	uxtb	r3, r3
 80136f6:	02db      	lsls	r3, r3, #11
 80136f8:	b21a      	sxth	r2, r3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 80136fa:	6979      	ldr	r1, [r7, #20]
 80136fc:	69bb      	ldr	r3, [r7, #24]
 80136fe:	440b      	add	r3, r1
 8013700:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8013704:	4943      	ldr	r1, [pc, #268]	; (8013814 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x200>)
 8013706:	5ccb      	ldrb	r3, [r1, r3]
 8013708:	089b      	lsrs	r3, r3, #2
 801370a:	b2db      	uxtb	r3, r3
 801370c:	015b      	lsls	r3, r3, #5
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 801370e:	b21b      	sxth	r3, r3
 8013710:	4313      	orrs	r3, r2
 8013712:	b21a      	sxth	r2, r3
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 8013714:	6979      	ldr	r1, [r7, #20]
 8013716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013718:	440b      	add	r3, r1
 801371a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801371e:	493d      	ldr	r1, [pc, #244]	; (8013814 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x200>)
 8013720:	5ccb      	ldrb	r3, [r1, r3]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8013722:	08db      	lsrs	r3, r3, #3
 8013724:	b2db      	uxtb	r3, r3
 8013726:	b21b      	sxth	r3, r3
 8013728:	4313      	orrs	r3, r2
 801372a:	b21b      	sxth	r3, r3
 801372c:	b29a      	uxth	r2, r3
            *(__IO uint16_t *)pOutAddr =
 801372e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013730:	801a      	strh	r2, [r3, #0]
            /**********/
            ycomp = (int32_t)(*(pLum +j +1));
 8013732:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013734:	3301      	adds	r3, #1
 8013736:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013738:	4413      	add	r3, r2
 801373a:	781b      	ldrb	r3, [r3, #0]
 801373c:	617b      	str	r3, [r7, #20]

            *((__IO uint16_t *)(pOutAddr + 2)) =
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 801373e:	697a      	ldr	r2, [r7, #20]
 8013740:	69fb      	ldr	r3, [r7, #28]
 8013742:	4413      	add	r3, r2
 8013744:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8013748:	4a32      	ldr	r2, [pc, #200]	; (8013814 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x200>)
 801374a:	5cd3      	ldrb	r3, [r2, r3]
 801374c:	08db      	lsrs	r3, r3, #3
 801374e:	b2db      	uxtb	r3, r3
 8013750:	02db      	lsls	r3, r3, #11
 8013752:	b21a      	sxth	r2, r3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8013754:	6979      	ldr	r1, [r7, #20]
 8013756:	69bb      	ldr	r3, [r7, #24]
 8013758:	440b      	add	r3, r1
 801375a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801375e:	492d      	ldr	r1, [pc, #180]	; (8013814 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x200>)
 8013760:	5ccb      	ldrb	r3, [r1, r3]
 8013762:	089b      	lsrs	r3, r3, #2
 8013764:	b2db      	uxtb	r3, r3
 8013766:	015b      	lsls	r3, r3, #5
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8013768:	b21b      	sxth	r3, r3
 801376a:	4313      	orrs	r3, r2
 801376c:	b21a      	sxth	r2, r3
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 801376e:	6979      	ldr	r1, [r7, #20]
 8013770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013772:	440b      	add	r3, r1
 8013774:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8013778:	4926      	ldr	r1, [pc, #152]	; (8013814 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x200>)
 801377a:	5ccb      	ldrb	r3, [r1, r3]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 801377c:	08db      	lsrs	r3, r3, #3
 801377e:	b2db      	uxtb	r3, r3
 8013780:	b21b      	sxth	r3, r3
 8013782:	4313      	orrs	r3, r2
 8013784:	b21a      	sxth	r2, r3
            *((__IO uint16_t *)(pOutAddr + 2)) =
 8013786:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013788:	3302      	adds	r3, #2
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 801378a:	b292      	uxth	r2, r2
            *((__IO uint16_t *)(pOutAddr + 2)) =
 801378c:	801a      	strh	r2, [r3, #0]

#endif /* JPEG_RGB_FORMAT*/

            pOutAddr += JPEG_BYTES_PER_PIXEL * 2;
 801378e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013790:	3304      	adds	r3, #4
 8013792:	643b      	str	r3, [r7, #64]	; 0x40

            pChrom++;
 8013794:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013796:	3301      	adds	r3, #1
 8013798:	63fb      	str	r3, [r7, #60]	; 0x3c
          for(j=0; j < 8; j+=2)
 801379a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801379c:	3302      	adds	r3, #2
 801379e:	653b      	str	r3, [r7, #80]	; 0x50
 80137a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80137a2:	2b07      	cmp	r3, #7
 80137a4:	f67f af79 	bls.w	801369a <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x86>
          }
          pLum += 64;
 80137a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137aa:	3340      	adds	r3, #64	; 0x40
 80137ac:	63bb      	str	r3, [r7, #56]	; 0x38
        for(k= 0; k<2; k++)
 80137ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80137b0:	3301      	adds	r3, #1
 80137b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80137b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80137b6:	2b01      	cmp	r3, #1
 80137b8:	f67f af6c 	bls.w	8013694 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x80>
        }

        pLum = pLum - 128 + 8;
 80137bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137be:	3b78      	subs	r3, #120	; 0x78
 80137c0:	63bb      	str	r3, [r7, #56]	; 0x38

        refline += JPEG_ConvertorParams.ScaledWidth;
 80137c2:	4b0f      	ldr	r3, [pc, #60]	; (8013800 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1ec>)
 80137c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80137c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80137c8:	4413      	add	r3, r2
 80137ca:	647b      	str	r3, [r7, #68]	; 0x44
    for(i= 0; i <  8; i++)
 80137cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80137ce:	3301      	adds	r3, #1
 80137d0:	657b      	str	r3, [r7, #84]	; 0x54
 80137d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80137d4:	2b07      	cmp	r3, #7
 80137d6:	f67f af50 	bls.w	801367a <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x66>
      }
    }

    pInBuffer +=  YCBCR_422_BLOCK_SIZE;
 80137da:	68fb      	ldr	r3, [r7, #12]
 80137dc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80137e0:	60fb      	str	r3, [r7, #12]
  while(currentMCU < (numberMCU + BlockIndex))
 80137e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	4413      	add	r3, r2
 80137e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80137ea:	429a      	cmp	r2, r3
 80137ec:	f4ff af1f 	bcc.w	801362e <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1a>
  }
  return numberMCU;
 80137f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80137f2:	4618      	mov	r0, r3
 80137f4:	375c      	adds	r7, #92	; 0x5c
 80137f6:	46bd      	mov	sp, r7
 80137f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137fc:	4770      	bx	lr
 80137fe:	bf00      	nop
 8013800:	2001f39c 	.word	0x2001f39c
 8013804:	2001f7dc 	.word	0x2001f7dc
 8013808:	2001f3dc 	.word	0x2001f3dc
 801380c:	2001fbdc 	.word	0x2001fbdc
 8013810:	2001ffdc 	.word	0x2001ffdc
 8013814:	0802a738 	.word	0x0802a738

08013818 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr444_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
 8013818:	b480      	push	{r7}
 801381a:	b095      	sub	sp, #84	; 0x54
 801381c:	af00      	add	r7, sp, #0
 801381e:	60f8      	str	r0, [r7, #12]
 8013820:	60b9      	str	r1, [r7, #8]
 8013822:	607a      	str	r2, [r7, #4]
 8013824:	603b      	str	r3, [r7, #0]
  int32_t c_red, c_blue, c_green;

  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;

  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
 8013826:	683b      	ldr	r3, [r7, #0]
 8013828:	4a58      	ldr	r2, [pc, #352]	; (801398c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x174>)
 801382a:	fba2 2303 	umull	r2, r3, r2, r3
 801382e:	09db      	lsrs	r3, r3, #7
 8013830:	633b      	str	r3, [r7, #48]	; 0x30
  currentMCU = BlockIndex;
 8013832:	687b      	ldr	r3, [r7, #4]
 8013834:	647b      	str	r3, [r7, #68]	; 0x44

  while(currentMCU < (numberMCU + BlockIndex))
 8013836:	e09a      	b.n	801396e <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x156>
  {

    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 8013838:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801383a:	00da      	lsls	r2, r3, #3
 801383c:	4b54      	ldr	r3, [pc, #336]	; (8013990 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x178>)
 801383e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013840:	fbb2 f3f3 	udiv	r3, r2, r3
 8013844:	00db      	lsls	r3, r3, #3
 8013846:	62fb      	str	r3, [r7, #44]	; 0x2c

    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 8013848:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801384a:	00db      	lsls	r3, r3, #3
 801384c:	4a50      	ldr	r2, [pc, #320]	; (8013990 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x178>)
 801384e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8013850:	fbb3 f1f2 	udiv	r1, r3, r2
 8013854:	fb01 f202 	mul.w	r2, r1, r2
 8013858:	1a9b      	subs	r3, r3, r2
 801385a:	62bb      	str	r3, [r7, #40]	; 0x28

    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 801385c:	4b4c      	ldr	r3, [pc, #304]	; (8013990 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x178>)
 801385e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013860:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013862:	fb03 f202 	mul.w	r2, r3, r2
 8013866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013868:	005b      	lsls	r3, r3, #1
 801386a:	4413      	add	r3, r2
 801386c:	643b      	str	r3, [r7, #64]	; 0x40

    currentMCU++;
 801386e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013870:	3301      	adds	r3, #1
 8013872:	647b      	str	r3, [r7, #68]	; 0x44

    pChrom = pInBuffer + 64; /* pChroma = pInBuffer + 4*64 */
 8013874:	68fb      	ldr	r3, [r7, #12]
 8013876:	3340      	adds	r3, #64	; 0x40
 8013878:	63bb      	str	r3, [r7, #56]	; 0x38

    pLum = pInBuffer;
 801387a:	68fb      	ldr	r3, [r7, #12]
 801387c:	637b      	str	r3, [r7, #52]	; 0x34

    for(i= 0; i <  8; i++)
 801387e:	2300      	movs	r3, #0
 8013880:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013882:	e06e      	b.n	8013962 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x14a>
    {
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8013884:	4b42      	ldr	r3, [pc, #264]	; (8013990 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x178>)
 8013886:	691b      	ldr	r3, [r3, #16]
 8013888:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801388a:	429a      	cmp	r2, r3
 801388c:	d266      	bcs.n	801395c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x144>
      {
        pOutAddr = pOutBuffer+ refline;
 801388e:	68ba      	ldr	r2, [r7, #8]
 8013890:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013892:	4413      	add	r3, r2
 8013894:	63fb      	str	r3, [r7, #60]	; 0x3c

          for(j=0; j < 8; j++)
 8013896:	2300      	movs	r3, #0
 8013898:	64bb      	str	r3, [r7, #72]	; 0x48
 801389a:	e054      	b.n	8013946 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x12e>
          {
            cbcomp = (int32_t)(*pChrom);
 801389c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801389e:	781b      	ldrb	r3, [r3, #0]
 80138a0:	627b      	str	r3, [r7, #36]	; 0x24
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 80138a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138a4:	009b      	lsls	r3, r3, #2
 80138a6:	4a3b      	ldr	r2, [pc, #236]	; (8013994 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x17c>)
 80138a8:	4413      	add	r3, r2
 80138aa:	681b      	ldr	r3, [r3, #0]
 80138ac:	623b      	str	r3, [r7, #32]

            crcomp = (int32_t)(*(pChrom + 64));
 80138ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80138b0:	3340      	adds	r3, #64	; 0x40
 80138b2:	781b      	ldrb	r3, [r3, #0]
 80138b4:	61fb      	str	r3, [r7, #28]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
 80138b6:	69fb      	ldr	r3, [r7, #28]
 80138b8:	009b      	lsls	r3, r3, #2
 80138ba:	4a37      	ldr	r2, [pc, #220]	; (8013998 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x180>)
 80138bc:	4413      	add	r3, r2
 80138be:	681b      	ldr	r3, [r3, #0]
 80138c0:	61bb      	str	r3, [r7, #24]

            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
 80138c2:	69fb      	ldr	r3, [r7, #28]
 80138c4:	009b      	lsls	r3, r3, #2
 80138c6:	4a35      	ldr	r2, [pc, #212]	; (801399c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x184>)
 80138c8:	4413      	add	r3, r2
 80138ca:	681a      	ldr	r2, [r3, #0]
 80138cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138ce:	009b      	lsls	r3, r3, #2
 80138d0:	4933      	ldr	r1, [pc, #204]	; (80139a0 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x188>)
 80138d2:	440b      	add	r3, r1
 80138d4:	681b      	ldr	r3, [r3, #0]
 80138d6:	4413      	add	r3, r2
 80138d8:	141b      	asrs	r3, r3, #16
 80138da:	617b      	str	r3, [r7, #20]
            pOutAddr[JPEG_GREEN_OFFSET/8] = CLAMP(ycomp + c_green);
            pOutAddr[JPEG_BLUE_OFFSET/8] = CLAMP(ycomp + c_blue);

#elif (JPEG_RGB_FORMAT == JPEG_RGB565)

            ycomp = (int32_t)(*(pLum +j));
 80138dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80138de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80138e0:	4413      	add	r3, r2
 80138e2:	781b      	ldrb	r3, [r3, #0]
 80138e4:	613b      	str	r3, [r7, #16]

            *(__IO uint16_t *)pOutAddr =
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 80138e6:	693a      	ldr	r2, [r7, #16]
 80138e8:	69bb      	ldr	r3, [r7, #24]
 80138ea:	4413      	add	r3, r2
 80138ec:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80138f0:	4a2c      	ldr	r2, [pc, #176]	; (80139a4 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x18c>)
 80138f2:	5cd3      	ldrb	r3, [r2, r3]
 80138f4:	08db      	lsrs	r3, r3, #3
 80138f6:	b2db      	uxtb	r3, r3
 80138f8:	02db      	lsls	r3, r3, #11
 80138fa:	b21a      	sxth	r2, r3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 80138fc:	6939      	ldr	r1, [r7, #16]
 80138fe:	697b      	ldr	r3, [r7, #20]
 8013900:	440b      	add	r3, r1
 8013902:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8013906:	4927      	ldr	r1, [pc, #156]	; (80139a4 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x18c>)
 8013908:	5ccb      	ldrb	r3, [r1, r3]
 801390a:	089b      	lsrs	r3, r3, #2
 801390c:	b2db      	uxtb	r3, r3
 801390e:	015b      	lsls	r3, r3, #5
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8013910:	b21b      	sxth	r3, r3
 8013912:	4313      	orrs	r3, r2
 8013914:	b21a      	sxth	r2, r3
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 8013916:	6939      	ldr	r1, [r7, #16]
 8013918:	6a3b      	ldr	r3, [r7, #32]
 801391a:	440b      	add	r3, r1
 801391c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8013920:	4920      	ldr	r1, [pc, #128]	; (80139a4 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x18c>)
 8013922:	5ccb      	ldrb	r3, [r1, r3]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8013924:	08db      	lsrs	r3, r3, #3
 8013926:	b2db      	uxtb	r3, r3
 8013928:	b21b      	sxth	r3, r3
 801392a:	4313      	orrs	r3, r2
 801392c:	b21b      	sxth	r3, r3
 801392e:	b29a      	uxth	r2, r3
            *(__IO uint16_t *)pOutAddr =
 8013930:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013932:	801a      	strh	r2, [r3, #0]

#endif /* JPEG_RGB_FORMAT */

            pOutAddr += JPEG_BYTES_PER_PIXEL;
 8013934:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013936:	3302      	adds	r3, #2
 8013938:	63fb      	str	r3, [r7, #60]	; 0x3c

            pChrom++;
 801393a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801393c:	3301      	adds	r3, #1
 801393e:	63bb      	str	r3, [r7, #56]	; 0x38
          for(j=0; j < 8; j++)
 8013940:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013942:	3301      	adds	r3, #1
 8013944:	64bb      	str	r3, [r7, #72]	; 0x48
 8013946:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013948:	2b07      	cmp	r3, #7
 801394a:	d9a7      	bls.n	801389c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x84>
          }
          pLum += 8;
 801394c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801394e:	3308      	adds	r3, #8
 8013950:	637b      	str	r3, [r7, #52]	; 0x34

        refline += JPEG_ConvertorParams.ScaledWidth;
 8013952:	4b0f      	ldr	r3, [pc, #60]	; (8013990 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x178>)
 8013954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013956:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013958:	4413      	add	r3, r2
 801395a:	643b      	str	r3, [r7, #64]	; 0x40
    for(i= 0; i <  8; i++)
 801395c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801395e:	3301      	adds	r3, #1
 8013960:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013962:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013964:	2b07      	cmp	r3, #7
 8013966:	d98d      	bls.n	8013884 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x6c>
      }
    }

    pInBuffer +=  YCBCR_444_BLOCK_SIZE;
 8013968:	68fb      	ldr	r3, [r7, #12]
 801396a:	33c0      	adds	r3, #192	; 0xc0
 801396c:	60fb      	str	r3, [r7, #12]
  while(currentMCU < (numberMCU + BlockIndex))
 801396e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013970:	687b      	ldr	r3, [r7, #4]
 8013972:	4413      	add	r3, r2
 8013974:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013976:	429a      	cmp	r2, r3
 8013978:	f4ff af5e 	bcc.w	8013838 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x20>
  }
  return numberMCU;
 801397c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 801397e:	4618      	mov	r0, r3
 8013980:	3754      	adds	r7, #84	; 0x54
 8013982:	46bd      	mov	sp, r7
 8013984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013988:	4770      	bx	lr
 801398a:	bf00      	nop
 801398c:	aaaaaaab 	.word	0xaaaaaaab
 8013990:	2001f39c 	.word	0x2001f39c
 8013994:	2001f7dc 	.word	0x2001f7dc
 8013998:	2001f3dc 	.word	0x2001f3dc
 801399c:	2001fbdc 	.word	0x2001fbdc
 80139a0:	2001ffdc 	.word	0x2001ffdc
 80139a4:	0802a738 	.word	0x0802a738

080139a8 <JPEG_MCU_Gray_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_Gray_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
 80139a8:	b480      	push	{r7}
 80139aa:	b08f      	sub	sp, #60	; 0x3c
 80139ac:	af00      	add	r7, sp, #0
 80139ae:	60f8      	str	r0, [r7, #12]
 80139b0:	60b9      	str	r1, [r7, #8]
 80139b2:	607a      	str	r2, [r7, #4]
 80139b4:	603b      	str	r3, [r7, #0]
  uint32_t refline;

  uint32_t i,j, ySample;
  uint8_t *pOutAddr,  *pLum;

  numberMCU = DataCount / GRAY_444_BLOCK_SIZE;
 80139b6:	683b      	ldr	r3, [r7, #0]
 80139b8:	099b      	lsrs	r3, r3, #6
 80139ba:	61fb      	str	r3, [r7, #28]
  currentMCU = BlockIndex;
 80139bc:	687b      	ldr	r3, [r7, #4]
 80139be:	637b      	str	r3, [r7, #52]	; 0x34

  while(currentMCU < (numberMCU + BlockIndex))
 80139c0:	e05e      	b.n	8013a80 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xd8>
  {
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 80139c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80139c4:	00da      	lsls	r2, r3, #3
 80139c6:	4b35      	ldr	r3, [pc, #212]	; (8013a9c <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xf4>)
 80139c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80139ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80139ce:	00db      	lsls	r3, r3, #3
 80139d0:	61bb      	str	r3, [r7, #24]

    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 80139d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80139d4:	00db      	lsls	r3, r3, #3
 80139d6:	4a31      	ldr	r2, [pc, #196]	; (8013a9c <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xf4>)
 80139d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80139da:	fbb3 f1f2 	udiv	r1, r3, r2
 80139de:	fb01 f202 	mul.w	r2, r1, r2
 80139e2:	1a9b      	subs	r3, r3, r2
 80139e4:	617b      	str	r3, [r7, #20]

    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 80139e6:	4b2d      	ldr	r3, [pc, #180]	; (8013a9c <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xf4>)
 80139e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80139ea:	69ba      	ldr	r2, [r7, #24]
 80139ec:	fb03 f202 	mul.w	r2, r3, r2
 80139f0:	697b      	ldr	r3, [r7, #20]
 80139f2:	005b      	lsls	r3, r3, #1
 80139f4:	4413      	add	r3, r2
 80139f6:	633b      	str	r3, [r7, #48]	; 0x30

    currentMCU++;
 80139f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80139fa:	3301      	adds	r3, #1
 80139fc:	637b      	str	r3, [r7, #52]	; 0x34

    pLum = pInBuffer;
 80139fe:	68fb      	ldr	r3, [r7, #12]
 8013a00:	623b      	str	r3, [r7, #32]

    for(i= 0; i <  8; i++)
 8013a02:	2300      	movs	r3, #0
 8013a04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013a06:	e035      	b.n	8013a74 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xcc>
    {
      pOutAddr = pOutBuffer + refline;
 8013a08:	68ba      	ldr	r2, [r7, #8]
 8013a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a0c:	4413      	add	r3, r2
 8013a0e:	627b      	str	r3, [r7, #36]	; 0x24
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8013a10:	4b22      	ldr	r3, [pc, #136]	; (8013a9c <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xf4>)
 8013a12:	691b      	ldr	r3, [r3, #16]
 8013a14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013a16:	429a      	cmp	r2, r3
 8013a18:	d229      	bcs.n	8013a6e <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xc6>
      {
        for(j=0; j < 8; j++)
 8013a1a:	2300      	movs	r3, #0
 8013a1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8013a1e:	e01e      	b.n	8013a5e <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xb6>
        {
          ySample =   (uint32_t)(*pLum);
 8013a20:	6a3b      	ldr	r3, [r7, #32]
 8013a22:	781b      	ldrb	r3, [r3, #0]
 8013a24:	613b      	str	r3, [r7, #16]
          pOutAddr[1] =  ySample;
          pOutAddr[2] =  ySample;

#elif (JPEG_RGB_FORMAT == JPEG_RGB565)

          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);
 8013a26:	693b      	ldr	r3, [r7, #16]
 8013a28:	08db      	lsrs	r3, r3, #3
 8013a2a:	b29b      	uxth	r3, r3
 8013a2c:	02db      	lsls	r3, r3, #11
 8013a2e:	b29a      	uxth	r2, r3
 8013a30:	693b      	ldr	r3, [r7, #16]
 8013a32:	089b      	lsrs	r3, r3, #2
 8013a34:	b29b      	uxth	r3, r3
 8013a36:	015b      	lsls	r3, r3, #5
 8013a38:	b29b      	uxth	r3, r3
 8013a3a:	4313      	orrs	r3, r2
 8013a3c:	b29a      	uxth	r2, r3
 8013a3e:	693b      	ldr	r3, [r7, #16]
 8013a40:	08db      	lsrs	r3, r3, #3
 8013a42:	b29b      	uxth	r3, r3
 8013a44:	4313      	orrs	r3, r2
 8013a46:	b29a      	uxth	r2, r3
 8013a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a4a:	801a      	strh	r2, [r3, #0]

#endif /* JPEG_RGB_FORMAT */

          pOutAddr += JPEG_BYTES_PER_PIXEL;
 8013a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a4e:	3302      	adds	r3, #2
 8013a50:	627b      	str	r3, [r7, #36]	; 0x24
          pLum++;
 8013a52:	6a3b      	ldr	r3, [r7, #32]
 8013a54:	3301      	adds	r3, #1
 8013a56:	623b      	str	r3, [r7, #32]
        for(j=0; j < 8; j++)
 8013a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a5a:	3301      	adds	r3, #1
 8013a5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8013a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a60:	2b07      	cmp	r3, #7
 8013a62:	d9dd      	bls.n	8013a20 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x78>
        }

        refline += JPEG_ConvertorParams.ScaledWidth;
 8013a64:	4b0d      	ldr	r3, [pc, #52]	; (8013a9c <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xf4>)
 8013a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013a68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013a6a:	4413      	add	r3, r2
 8013a6c:	633b      	str	r3, [r7, #48]	; 0x30
    for(i= 0; i <  8; i++)
 8013a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a70:	3301      	adds	r3, #1
 8013a72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a76:	2b07      	cmp	r3, #7
 8013a78:	d9c6      	bls.n	8013a08 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x60>
      }
    }

    pInBuffer +=  GRAY_444_BLOCK_SIZE;
 8013a7a:	68fb      	ldr	r3, [r7, #12]
 8013a7c:	3340      	adds	r3, #64	; 0x40
 8013a7e:	60fb      	str	r3, [r7, #12]
  while(currentMCU < (numberMCU + BlockIndex))
 8013a80:	69fa      	ldr	r2, [r7, #28]
 8013a82:	687b      	ldr	r3, [r7, #4]
 8013a84:	4413      	add	r3, r2
 8013a86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013a88:	429a      	cmp	r2, r3
 8013a8a:	d39a      	bcc.n	80139c2 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x1a>
  }
  return numberMCU;
 8013a8c:	69fb      	ldr	r3, [r7, #28]
}
 8013a8e:	4618      	mov	r0, r3
 8013a90:	373c      	adds	r7, #60	; 0x3c
 8013a92:	46bd      	mov	sp, r7
 8013a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a98:	4770      	bx	lr
 8013a9a:	bf00      	nop
 8013a9c:	2001f39c 	.word	0x2001f39c

08013aa0 <JPEG_MCU_YCCK_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCCK_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
 8013aa0:	b480      	push	{r7}
 8013aa2:	b093      	sub	sp, #76	; 0x4c
 8013aa4:	af00      	add	r7, sp, #0
 8013aa6:	60f8      	str	r0, [r7, #12]
 8013aa8:	60b9      	str	r1, [r7, #8]
 8013aaa:	607a      	str	r2, [r7, #4]
 8013aac:	603b      	str	r3, [r7, #0]

  int32_t c_red, c_blue, c_green;

  uint8_t *pOutAddr, *pChrom;

  numberMCU = DataCount / CMYK_444_BLOCK_SIZE;
 8013aae:	683b      	ldr	r3, [r7, #0]
 8013ab0:	0a1b      	lsrs	r3, r3, #8
 8013ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
  currentMCU = BlockIndex;
 8013ab4:	687b      	ldr	r3, [r7, #4]
 8013ab6:	63fb      	str	r3, [r7, #60]	; 0x3c

  while(currentMCU < (numberMCU + BlockIndex))
 8013ab8:	e08b      	b.n	8013bd2 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x132>
  {

    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 8013aba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013abc:	00da      	lsls	r2, r3, #3
 8013abe:	4b4c      	ldr	r3, [pc, #304]	; (8013bf0 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x150>)
 8013ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013ac2:	fbb2 f3f3 	udiv	r3, r2, r3
 8013ac6:	00db      	lsls	r3, r3, #3
 8013ac8:	62bb      	str	r3, [r7, #40]	; 0x28

    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 8013aca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013acc:	00db      	lsls	r3, r3, #3
 8013ace:	4a48      	ldr	r2, [pc, #288]	; (8013bf0 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x150>)
 8013ad0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8013ad2:	fbb3 f1f2 	udiv	r1, r3, r2
 8013ad6:	fb01 f202 	mul.w	r2, r1, r2
 8013ada:	1a9b      	subs	r3, r3, r2
 8013adc:	627b      	str	r3, [r7, #36]	; 0x24

    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8013ade:	4b44      	ldr	r3, [pc, #272]	; (8013bf0 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x150>)
 8013ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013ae2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013ae4:	fb03 f202 	mul.w	r2, r3, r2
 8013ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013aea:	005b      	lsls	r3, r3, #1
 8013aec:	4413      	add	r3, r2
 8013aee:	63bb      	str	r3, [r7, #56]	; 0x38

    currentMCU++;
 8013af0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013af2:	3301      	adds	r3, #1
 8013af4:	63fb      	str	r3, [r7, #60]	; 0x3c

    pChrom = pInBuffer;
 8013af6:	68fb      	ldr	r3, [r7, #12]
 8013af8:	633b      	str	r3, [r7, #48]	; 0x30

    for(i= 0; i <  8; i++)
 8013afa:	2300      	movs	r3, #0
 8013afc:	647b      	str	r3, [r7, #68]	; 0x44
 8013afe:	e061      	b.n	8013bc4 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x124>
    {
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8013b00:	4b3b      	ldr	r3, [pc, #236]	; (8013bf0 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x150>)
 8013b02:	691b      	ldr	r3, [r3, #16]
 8013b04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013b06:	429a      	cmp	r2, r3
 8013b08:	d259      	bcs.n	8013bbe <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x11e>
      {
        pOutAddr = pOutBuffer+ refline;
 8013b0a:	68ba      	ldr	r2, [r7, #8]
 8013b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b0e:	4413      	add	r3, r2
 8013b10:	637b      	str	r3, [r7, #52]	; 0x34

          for(j=0; j < 8; j++)
 8013b12:	2300      	movs	r3, #0
 8013b14:	643b      	str	r3, [r7, #64]	; 0x40
 8013b16:	e04a      	b.n	8013bae <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x10e>
          {
            color_k = (int32_t)(*(pChrom + 192));
 8013b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b1a:	33c0      	adds	r3, #192	; 0xc0
 8013b1c:	781b      	ldrb	r3, [r3, #0]
 8013b1e:	623b      	str	r3, [r7, #32]
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
 8013b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b22:	781b      	ldrb	r3, [r3, #0]
 8013b24:	461a      	mov	r2, r3
 8013b26:	6a3b      	ldr	r3, [r7, #32]
 8013b28:	fb02 f303 	mul.w	r3, r2, r3
 8013b2c:	4a31      	ldr	r2, [pc, #196]	; (8013bf4 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x154>)
 8013b2e:	fb82 1203 	smull	r1, r2, r2, r3
 8013b32:	441a      	add	r2, r3
 8013b34:	11d2      	asrs	r2, r2, #7
 8013b36:	17db      	asrs	r3, r3, #31
 8013b38:	1ad3      	subs	r3, r2, r3
 8013b3a:	61fb      	str	r3, [r7, #28]

            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
 8013b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b3e:	3340      	adds	r3, #64	; 0x40
 8013b40:	781b      	ldrb	r3, [r3, #0]
 8013b42:	461a      	mov	r2, r3
 8013b44:	6a3b      	ldr	r3, [r7, #32]
 8013b46:	fb02 f303 	mul.w	r3, r2, r3
 8013b4a:	4a2a      	ldr	r2, [pc, #168]	; (8013bf4 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x154>)
 8013b4c:	fb82 1203 	smull	r1, r2, r2, r3
 8013b50:	441a      	add	r2, r3
 8013b52:	11d2      	asrs	r2, r2, #7
 8013b54:	17db      	asrs	r3, r3, #31
 8013b56:	1ad3      	subs	r3, r2, r3
 8013b58:	61bb      	str	r3, [r7, #24]

            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
 8013b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b5c:	3380      	adds	r3, #128	; 0x80
 8013b5e:	781b      	ldrb	r3, [r3, #0]
 8013b60:	461a      	mov	r2, r3
 8013b62:	6a3b      	ldr	r3, [r7, #32]
 8013b64:	fb02 f303 	mul.w	r3, r2, r3
 8013b68:	4a22      	ldr	r2, [pc, #136]	; (8013bf4 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x154>)
 8013b6a:	fb82 1203 	smull	r1, r2, r2, r3
 8013b6e:	441a      	add	r2, r3
 8013b70:	11d2      	asrs	r2, r2, #7
 8013b72:	17db      	asrs	r3, r3, #31
 8013b74:	1ad3      	subs	r3, r2, r3
 8013b76:	617b      	str	r3, [r7, #20]
          pOutAddr[JPEG_BLUE_OFFSET/8]  =  c_blue;

#elif (JPEG_RGB_FORMAT == JPEG_RGB565)

          *(__IO uint16_t *)pOutAddr =
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
 8013b78:	69fb      	ldr	r3, [r7, #28]
 8013b7a:	10db      	asrs	r3, r3, #3
 8013b7c:	02db      	lsls	r3, r3, #11
 8013b7e:	b21a      	sxth	r2, r3
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
 8013b80:	69bb      	ldr	r3, [r7, #24]
 8013b82:	109b      	asrs	r3, r3, #2
 8013b84:	015b      	lsls	r3, r3, #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
 8013b86:	b21b      	sxth	r3, r3
 8013b88:	4313      	orrs	r3, r2
 8013b8a:	b21a      	sxth	r2, r3
            ((c_blue >> 3) << JPEG_BLUE_OFFSET);
 8013b8c:	697b      	ldr	r3, [r7, #20]
 8013b8e:	10db      	asrs	r3, r3, #3
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
 8013b90:	b21b      	sxth	r3, r3
 8013b92:	4313      	orrs	r3, r2
 8013b94:	b21b      	sxth	r3, r3
 8013b96:	b29a      	uxth	r2, r3
          *(__IO uint16_t *)pOutAddr =
 8013b98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013b9a:	801a      	strh	r2, [r3, #0]

#endif /* JPEG_RGB_FORMAT */

            pOutAddr += JPEG_BYTES_PER_PIXEL;
 8013b9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013b9e:	3302      	adds	r3, #2
 8013ba0:	637b      	str	r3, [r7, #52]	; 0x34

            pChrom++;
 8013ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ba4:	3301      	adds	r3, #1
 8013ba6:	633b      	str	r3, [r7, #48]	; 0x30
          for(j=0; j < 8; j++)
 8013ba8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013baa:	3301      	adds	r3, #1
 8013bac:	643b      	str	r3, [r7, #64]	; 0x40
 8013bae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013bb0:	2b07      	cmp	r3, #7
 8013bb2:	d9b1      	bls.n	8013b18 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x78>
          }

        refline += JPEG_ConvertorParams.ScaledWidth;
 8013bb4:	4b0e      	ldr	r3, [pc, #56]	; (8013bf0 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x150>)
 8013bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013bb8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013bba:	4413      	add	r3, r2
 8013bbc:	63bb      	str	r3, [r7, #56]	; 0x38
    for(i= 0; i <  8; i++)
 8013bbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013bc0:	3301      	adds	r3, #1
 8013bc2:	647b      	str	r3, [r7, #68]	; 0x44
 8013bc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013bc6:	2b07      	cmp	r3, #7
 8013bc8:	d99a      	bls.n	8013b00 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x60>
      }
    }

    pInBuffer +=  CMYK_444_BLOCK_SIZE;
 8013bca:	68fb      	ldr	r3, [r7, #12]
 8013bcc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8013bd0:	60fb      	str	r3, [r7, #12]
  while(currentMCU < (numberMCU + BlockIndex))
 8013bd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013bd4:	687b      	ldr	r3, [r7, #4]
 8013bd6:	4413      	add	r3, r2
 8013bd8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013bda:	429a      	cmp	r2, r3
 8013bdc:	f4ff af6d 	bcc.w	8013aba <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x1a>
  }
  return numberMCU;
 8013be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8013be2:	4618      	mov	r0, r3
 8013be4:	374c      	adds	r7, #76	; 0x4c
 8013be6:	46bd      	mov	sp, r7
 8013be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bec:	4770      	bx	lr
 8013bee:	bf00      	nop
 8013bf0:	2001f39c 	.word	0x2001f39c
 8013bf4:	80808081 	.word	0x80808081

08013bf8 <TGFX_JPEG_GetDecodeColorConvertFunc>:
  *                      depending of the jpeg image color space and chroma sampling info.
  * @param ImageNbMCUs : pointer to uint32_t, used to retrive the total number of MCU blocks in the jpeg image.
  * @retval HAL status : HAL_OK or HAL_ERROR.
  */
HAL_StatusTypeDef TGFX_JPEG_GetDecodeColorConvertFunc(JPEG_ConfTypeDef *pJpegInfo, JPEG_YCbCrToRGB_Convert_Function *pFunction, uint32_t *ImageNbMCUs)
{
 8013bf8:	b480      	push	{r7}
 8013bfa:	b087      	sub	sp, #28
 8013bfc:	af00      	add	r7, sp, #0
 8013bfe:	60f8      	str	r0, [r7, #12]
 8013c00:	60b9      	str	r1, [r7, #8]
 8013c02:	607a      	str	r2, [r7, #4]
  uint32_t hMCU, vMCU;

  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
 8013c04:	68fb      	ldr	r3, [r7, #12]
 8013c06:	681b      	ldr	r3, [r3, #0]
 8013c08:	4a7a      	ldr	r2, [pc, #488]	; (8013df4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8013c0a:	6013      	str	r3, [r2, #0]
  JPEG_ConvertorParams.ImageWidth = pJpegInfo->ImageWidth;
 8013c0c:	68fb      	ldr	r3, [r7, #12]
 8013c0e:	68db      	ldr	r3, [r3, #12]
 8013c10:	4a78      	ldr	r2, [pc, #480]	; (8013df4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8013c12:	6093      	str	r3, [r2, #8]
  JPEG_ConvertorParams.ImageHeight = pJpegInfo->ImageHeight;
 8013c14:	68fb      	ldr	r3, [r7, #12]
 8013c16:	689b      	ldr	r3, [r3, #8]
 8013c18:	4a76      	ldr	r2, [pc, #472]	; (8013df4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8013c1a:	60d3      	str	r3, [r2, #12]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
 8013c1c:	68fb      	ldr	r3, [r7, #12]
 8013c1e:	68db      	ldr	r3, [r3, #12]
 8013c20:	68fa      	ldr	r2, [r7, #12]
 8013c22:	6892      	ldr	r2, [r2, #8]
 8013c24:	fb02 f303 	mul.w	r3, r2, r3
 8013c28:	005b      	lsls	r3, r3, #1
 8013c2a:	4a72      	ldr	r2, [pc, #456]	; (8013df4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8013c2c:	6113      	str	r3, [r2, #16]

  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;
 8013c2e:	68fb      	ldr	r3, [r7, #12]
 8013c30:	685b      	ldr	r3, [r3, #4]
 8013c32:	4a70      	ldr	r2, [pc, #448]	; (8013df4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8013c34:	6053      	str	r3, [r2, #4]
  if(JPEG_ConvertorParams.ColorSpace == JPEG_YCBCR_COLORSPACE)
 8013c36:	4b6f      	ldr	r3, [pc, #444]	; (8013df4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8013c38:	681b      	ldr	r3, [r3, #0]
 8013c3a:	2b10      	cmp	r3, #16
 8013c3c:	d155      	bne.n	8013cea <TGFX_JPEG_GetDecodeColorConvertFunc+0xf2>
  {
    if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_420_SUBSAMPLING)
 8013c3e:	4b6d      	ldr	r3, [pc, #436]	; (8013df4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8013c40:	685b      	ldr	r3, [r3, #4]
 8013c42:	2b01      	cmp	r3, #1
 8013c44:	d119      	bne.n	8013c7a <TGFX_JPEG_GetDecodeColorConvertFunc+0x82>
    {
      *pFunction = TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks;
 8013c46:	68bb      	ldr	r3, [r7, #8]
 8013c48:	4a6b      	ldr	r2, [pc, #428]	; (8013df8 <TGFX_JPEG_GetDecodeColorConvertFunc+0x200>)
 8013c4a:	601a      	str	r2, [r3, #0]

      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;
 8013c4c:	4b69      	ldr	r3, [pc, #420]	; (8013df4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8013c4e:	689b      	ldr	r3, [r3, #8]
 8013c50:	f003 030f 	and.w	r3, r3, #15
 8013c54:	4a67      	ldr	r2, [pc, #412]	; (8013df4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8013c56:	6153      	str	r3, [r2, #20]

      if(JPEG_ConvertorParams.LineOffset != 0)
 8013c58:	4b66      	ldr	r3, [pc, #408]	; (8013df4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8013c5a:	695b      	ldr	r3, [r3, #20]
 8013c5c:	2b00      	cmp	r3, #0
 8013c5e:	d005      	beq.n	8013c6c <TGFX_JPEG_GetDecodeColorConvertFunc+0x74>
      {
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;
 8013c60:	4b64      	ldr	r3, [pc, #400]	; (8013df4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8013c62:	695b      	ldr	r3, [r3, #20]
 8013c64:	f1c3 0310 	rsb	r3, r3, #16
 8013c68:	4a62      	ldr	r2, [pc, #392]	; (8013df4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8013c6a:	6153      	str	r3, [r2, #20]
      }
      JPEG_ConvertorParams.H_factor = 16;
 8013c6c:	4b61      	ldr	r3, [pc, #388]	; (8013df4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8013c6e:	2210      	movs	r2, #16
 8013c70:	61da      	str	r2, [r3, #28]
      JPEG_ConvertorParams.V_factor  = 16;
 8013c72:	4b60      	ldr	r3, [pc, #384]	; (8013df4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8013c74:	2210      	movs	r2, #16
 8013c76:	621a      	str	r2, [r3, #32]
 8013c78:	e075      	b.n	8013d66 <TGFX_JPEG_GetDecodeColorConvertFunc+0x16e>
    }
    else if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_422_SUBSAMPLING)
 8013c7a:	4b5e      	ldr	r3, [pc, #376]	; (8013df4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8013c7c:	685b      	ldr	r3, [r3, #4]
 8013c7e:	2b02      	cmp	r3, #2
 8013c80:	d119      	bne.n	8013cb6 <TGFX_JPEG_GetDecodeColorConvertFunc+0xbe>
    {
      *pFunction =  JPEG_MCU_YCbCr422_ARGB_ConvertBlocks;
 8013c82:	68bb      	ldr	r3, [r7, #8]
 8013c84:	4a5d      	ldr	r2, [pc, #372]	; (8013dfc <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8013c86:	601a      	str	r2, [r3, #0]

      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;
 8013c88:	4b5a      	ldr	r3, [pc, #360]	; (8013df4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8013c8a:	689b      	ldr	r3, [r3, #8]
 8013c8c:	f003 030f 	and.w	r3, r3, #15
 8013c90:	4a58      	ldr	r2, [pc, #352]	; (8013df4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8013c92:	6153      	str	r3, [r2, #20]

      if(JPEG_ConvertorParams.LineOffset != 0)
 8013c94:	4b57      	ldr	r3, [pc, #348]	; (8013df4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8013c96:	695b      	ldr	r3, [r3, #20]
 8013c98:	2b00      	cmp	r3, #0
 8013c9a:	d005      	beq.n	8013ca8 <TGFX_JPEG_GetDecodeColorConvertFunc+0xb0>
      {
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;
 8013c9c:	4b55      	ldr	r3, [pc, #340]	; (8013df4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8013c9e:	695b      	ldr	r3, [r3, #20]
 8013ca0:	f1c3 0310 	rsb	r3, r3, #16
 8013ca4:	4a53      	ldr	r2, [pc, #332]	; (8013df4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8013ca6:	6153      	str	r3, [r2, #20]
      }
      JPEG_ConvertorParams.H_factor = 16;
 8013ca8:	4b52      	ldr	r3, [pc, #328]	; (8013df4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8013caa:	2210      	movs	r2, #16
 8013cac:	61da      	str	r2, [r3, #28]
      JPEG_ConvertorParams.V_factor  = 8;
 8013cae:	4b51      	ldr	r3, [pc, #324]	; (8013df4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8013cb0:	2208      	movs	r2, #8
 8013cb2:	621a      	str	r2, [r3, #32]
 8013cb4:	e057      	b.n	8013d66 <TGFX_JPEG_GetDecodeColorConvertFunc+0x16e>
    }
    else /*4:4:4*/
    {
      *pFunction =  JPEG_MCU_YCbCr444_ARGB_ConvertBlocks;
 8013cb6:	68bb      	ldr	r3, [r7, #8]
 8013cb8:	4a51      	ldr	r2, [pc, #324]	; (8013e00 <TGFX_JPEG_GetDecodeColorConvertFunc+0x208>)
 8013cba:	601a      	str	r2, [r3, #0]

      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
 8013cbc:	4b4d      	ldr	r3, [pc, #308]	; (8013df4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8013cbe:	689b      	ldr	r3, [r3, #8]
 8013cc0:	f003 0307 	and.w	r3, r3, #7
 8013cc4:	4a4b      	ldr	r2, [pc, #300]	; (8013df4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8013cc6:	6153      	str	r3, [r2, #20]

      if(JPEG_ConvertorParams.LineOffset != 0)
 8013cc8:	4b4a      	ldr	r3, [pc, #296]	; (8013df4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8013cca:	695b      	ldr	r3, [r3, #20]
 8013ccc:	2b00      	cmp	r3, #0
 8013cce:	d005      	beq.n	8013cdc <TGFX_JPEG_GetDecodeColorConvertFunc+0xe4>
      {
        JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;
 8013cd0:	4b48      	ldr	r3, [pc, #288]	; (8013df4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8013cd2:	695b      	ldr	r3, [r3, #20]
 8013cd4:	f1c3 0308 	rsb	r3, r3, #8
 8013cd8:	4a46      	ldr	r2, [pc, #280]	; (8013df4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8013cda:	6153      	str	r3, [r2, #20]
      }
      JPEG_ConvertorParams.H_factor = 8;
 8013cdc:	4b45      	ldr	r3, [pc, #276]	; (8013df4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8013cde:	2208      	movs	r2, #8
 8013ce0:	61da      	str	r2, [r3, #28]
      JPEG_ConvertorParams.V_factor  = 8;
 8013ce2:	4b44      	ldr	r3, [pc, #272]	; (8013df4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8013ce4:	2208      	movs	r2, #8
 8013ce6:	621a      	str	r2, [r3, #32]
 8013ce8:	e03d      	b.n	8013d66 <TGFX_JPEG_GetDecodeColorConvertFunc+0x16e>
    }
  }
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_GRAYSCALE_COLORSPACE)
 8013cea:	4b42      	ldr	r3, [pc, #264]	; (8013df4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8013cec:	681b      	ldr	r3, [r3, #0]
 8013cee:	2b00      	cmp	r3, #0
 8013cf0:	d119      	bne.n	8013d26 <TGFX_JPEG_GetDecodeColorConvertFunc+0x12e>
  {
    *pFunction =  JPEG_MCU_Gray_ARGB_ConvertBlocks;
 8013cf2:	68bb      	ldr	r3, [r7, #8]
 8013cf4:	4a43      	ldr	r2, [pc, #268]	; (8013e04 <TGFX_JPEG_GetDecodeColorConvertFunc+0x20c>)
 8013cf6:	601a      	str	r2, [r3, #0]

    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
 8013cf8:	4b3e      	ldr	r3, [pc, #248]	; (8013df4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8013cfa:	689b      	ldr	r3, [r3, #8]
 8013cfc:	f003 0307 	and.w	r3, r3, #7
 8013d00:	4a3c      	ldr	r2, [pc, #240]	; (8013df4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8013d02:	6153      	str	r3, [r2, #20]

    if(JPEG_ConvertorParams.LineOffset != 0)
 8013d04:	4b3b      	ldr	r3, [pc, #236]	; (8013df4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8013d06:	695b      	ldr	r3, [r3, #20]
 8013d08:	2b00      	cmp	r3, #0
 8013d0a:	d005      	beq.n	8013d18 <TGFX_JPEG_GetDecodeColorConvertFunc+0x120>
    {
      JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;
 8013d0c:	4b39      	ldr	r3, [pc, #228]	; (8013df4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8013d0e:	695b      	ldr	r3, [r3, #20]
 8013d10:	f1c3 0308 	rsb	r3, r3, #8
 8013d14:	4a37      	ldr	r2, [pc, #220]	; (8013df4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8013d16:	6153      	str	r3, [r2, #20]
    }
    JPEG_ConvertorParams.H_factor = 8;
 8013d18:	4b36      	ldr	r3, [pc, #216]	; (8013df4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8013d1a:	2208      	movs	r2, #8
 8013d1c:	61da      	str	r2, [r3, #28]
    JPEG_ConvertorParams.V_factor  = 8;
 8013d1e:	4b35      	ldr	r3, [pc, #212]	; (8013df4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8013d20:	2208      	movs	r2, #8
 8013d22:	621a      	str	r2, [r3, #32]
 8013d24:	e01f      	b.n	8013d66 <TGFX_JPEG_GetDecodeColorConvertFunc+0x16e>
  }
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_CMYK_COLORSPACE)
 8013d26:	4b33      	ldr	r3, [pc, #204]	; (8013df4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8013d28:	681b      	ldr	r3, [r3, #0]
 8013d2a:	2b30      	cmp	r3, #48	; 0x30
 8013d2c:	d119      	bne.n	8013d62 <TGFX_JPEG_GetDecodeColorConvertFunc+0x16a>
  {
    *pFunction =  JPEG_MCU_YCCK_ARGB_ConvertBlocks;
 8013d2e:	68bb      	ldr	r3, [r7, #8]
 8013d30:	4a35      	ldr	r2, [pc, #212]	; (8013e08 <TGFX_JPEG_GetDecodeColorConvertFunc+0x210>)
 8013d32:	601a      	str	r2, [r3, #0]

    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
 8013d34:	4b2f      	ldr	r3, [pc, #188]	; (8013df4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8013d36:	689b      	ldr	r3, [r3, #8]
 8013d38:	f003 0307 	and.w	r3, r3, #7
 8013d3c:	4a2d      	ldr	r2, [pc, #180]	; (8013df4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8013d3e:	6153      	str	r3, [r2, #20]

    if(JPEG_ConvertorParams.LineOffset != 0)
 8013d40:	4b2c      	ldr	r3, [pc, #176]	; (8013df4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8013d42:	695b      	ldr	r3, [r3, #20]
 8013d44:	2b00      	cmp	r3, #0
 8013d46:	d005      	beq.n	8013d54 <TGFX_JPEG_GetDecodeColorConvertFunc+0x15c>
    {
      JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;
 8013d48:	4b2a      	ldr	r3, [pc, #168]	; (8013df4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8013d4a:	695b      	ldr	r3, [r3, #20]
 8013d4c:	f1c3 0308 	rsb	r3, r3, #8
 8013d50:	4a28      	ldr	r2, [pc, #160]	; (8013df4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8013d52:	6153      	str	r3, [r2, #20]
    }
    JPEG_ConvertorParams.H_factor = 8;
 8013d54:	4b27      	ldr	r3, [pc, #156]	; (8013df4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8013d56:	2208      	movs	r2, #8
 8013d58:	61da      	str	r2, [r3, #28]
    JPEG_ConvertorParams.V_factor  = 8;
 8013d5a:	4b26      	ldr	r3, [pc, #152]	; (8013df4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8013d5c:	2208      	movs	r2, #8
 8013d5e:	621a      	str	r2, [r3, #32]
 8013d60:	e001      	b.n	8013d66 <TGFX_JPEG_GetDecodeColorConvertFunc+0x16e>
  }
  else
  {
    return HAL_ERROR; /* Color space Not supported*/
 8013d62:	2301      	movs	r3, #1
 8013d64:	e040      	b.n	8013de8 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1f0>
  }

  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
 8013d66:	4b23      	ldr	r3, [pc, #140]	; (8013df4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8013d68:	689a      	ldr	r2, [r3, #8]
 8013d6a:	4b22      	ldr	r3, [pc, #136]	; (8013df4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8013d6c:	695b      	ldr	r3, [r3, #20]
 8013d6e:	4413      	add	r3, r2
 8013d70:	4a20      	ldr	r2, [pc, #128]	; (8013df4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8013d72:	6253      	str	r3, [r2, #36]	; 0x24
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
 8013d74:	4b1f      	ldr	r3, [pc, #124]	; (8013df4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8013d76:	689b      	ldr	r3, [r3, #8]
 8013d78:	005b      	lsls	r3, r3, #1
 8013d7a:	4a1e      	ldr	r2, [pc, #120]	; (8013df4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8013d7c:	6293      	str	r3, [r2, #40]	; 0x28

  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
 8013d7e:	4b1d      	ldr	r3, [pc, #116]	; (8013df4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8013d80:	689a      	ldr	r2, [r3, #8]
 8013d82:	4b1c      	ldr	r3, [pc, #112]	; (8013df4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8013d84:	69db      	ldr	r3, [r3, #28]
 8013d86:	fbb2 f3f3 	udiv	r3, r2, r3
 8013d8a:	617b      	str	r3, [r7, #20]
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
 8013d8c:	4b19      	ldr	r3, [pc, #100]	; (8013df4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8013d8e:	689b      	ldr	r3, [r3, #8]
 8013d90:	4a18      	ldr	r2, [pc, #96]	; (8013df4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8013d92:	69d2      	ldr	r2, [r2, #28]
 8013d94:	fbb3 f1f2 	udiv	r1, r3, r2
 8013d98:	fb01 f202 	mul.w	r2, r1, r2
 8013d9c:	1a9b      	subs	r3, r3, r2
 8013d9e:	2b00      	cmp	r3, #0
 8013da0:	d002      	beq.n	8013da8 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1b0>
  {
    hMCU++; /*+1 for horizenatl incomplete MCU */
 8013da2:	697b      	ldr	r3, [r7, #20]
 8013da4:	3301      	adds	r3, #1
 8013da6:	617b      	str	r3, [r7, #20]
  }

  vMCU = (JPEG_ConvertorParams.ImageHeight / JPEG_ConvertorParams.V_factor);
 8013da8:	4b12      	ldr	r3, [pc, #72]	; (8013df4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8013daa:	68da      	ldr	r2, [r3, #12]
 8013dac:	4b11      	ldr	r3, [pc, #68]	; (8013df4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8013dae:	6a1b      	ldr	r3, [r3, #32]
 8013db0:	fbb2 f3f3 	udiv	r3, r2, r3
 8013db4:	613b      	str	r3, [r7, #16]
  if((JPEG_ConvertorParams.ImageHeight % JPEG_ConvertorParams.V_factor) != 0)
 8013db6:	4b0f      	ldr	r3, [pc, #60]	; (8013df4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8013db8:	68db      	ldr	r3, [r3, #12]
 8013dba:	4a0e      	ldr	r2, [pc, #56]	; (8013df4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8013dbc:	6a12      	ldr	r2, [r2, #32]
 8013dbe:	fbb3 f1f2 	udiv	r1, r3, r2
 8013dc2:	fb01 f202 	mul.w	r2, r1, r2
 8013dc6:	1a9b      	subs	r3, r3, r2
 8013dc8:	2b00      	cmp	r3, #0
 8013dca:	d002      	beq.n	8013dd2 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1da>
  {
    vMCU++; /*+1 for vertical incomplete MCU */
 8013dcc:	693b      	ldr	r3, [r7, #16]
 8013dce:	3301      	adds	r3, #1
 8013dd0:	613b      	str	r3, [r7, #16]
  }
  JPEG_ConvertorParams.MCU_Total_Nb = (hMCU * vMCU);
 8013dd2:	697b      	ldr	r3, [r7, #20]
 8013dd4:	693a      	ldr	r2, [r7, #16]
 8013dd6:	fb02 f303 	mul.w	r3, r2, r3
 8013dda:	4a06      	ldr	r2, [pc, #24]	; (8013df4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8013ddc:	62d3      	str	r3, [r2, #44]	; 0x2c
  *ImageNbMCUs = JPEG_ConvertorParams.MCU_Total_Nb;
 8013dde:	4b05      	ldr	r3, [pc, #20]	; (8013df4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8013de0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013de2:	687b      	ldr	r3, [r7, #4]
 8013de4:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8013de6:	2300      	movs	r3, #0
}
 8013de8:	4618      	mov	r0, r3
 8013dea:	371c      	adds	r7, #28
 8013dec:	46bd      	mov	sp, r7
 8013dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013df2:	4770      	bx	lr
 8013df4:	2001f39c 	.word	0x2001f39c
 8013df8:	08013319 	.word	0x08013319
 8013dfc:	08013615 	.word	0x08013615
 8013e00:	08013819 	.word	0x08013819
 8013e04:	080139a9 	.word	0x080139a9
 8013e08:	08013aa1 	.word	0x08013aa1

08013e0c <TGFX_JPEG_InitPostProcColorTables>:
  * @brief  Initializes the YCbCr -> RGB colors conversion Look Up Tables
  * @param  None
  * @retval None
  */
void TGFX_JPEG_InitPostProcColorTables(void)
{
 8013e0c:	b480      	push	{r7}
 8013e0e:	b083      	sub	sp, #12
 8013e10:	af00      	add	r7, sp, #0
  int32_t index, i;

  for (i = 0; i <= 255; i++)
 8013e12:	2300      	movs	r3, #0
 8013e14:	607b      	str	r3, [r7, #4]
 8013e16:	e02e      	b.n	8013e76 <TGFX_JPEG_InitPostProcColorTables+0x6a>
  {
    index = (i * 2) - 256;
 8013e18:	687b      	ldr	r3, [r7, #4]
 8013e1a:	3b80      	subs	r3, #128	; 0x80
 8013e1c:	005b      	lsls	r3, r3, #1
 8013e1e:	603b      	str	r3, [r7, #0]
    CR_RED_LUT[i] = ( (((int32_t) ((1.40200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
 8013e20:	683b      	ldr	r3, [r7, #0]
 8013e22:	f24b 3274 	movw	r2, #45940	; 0xb374
 8013e26:	fb02 f303 	mul.w	r3, r2, r3
 8013e2a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8013e2e:	141a      	asrs	r2, r3, #16
 8013e30:	4916      	ldr	r1, [pc, #88]	; (8013e8c <TGFX_JPEG_InitPostProcColorTables+0x80>)
 8013e32:	687b      	ldr	r3, [r7, #4]
 8013e34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    CB_BLUE_LUT[i] = ( (((int32_t) ((1.77200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
 8013e38:	683b      	ldr	r3, [r7, #0]
 8013e3a:	f24e 22d0 	movw	r2, #58064	; 0xe2d0
 8013e3e:	fb02 f303 	mul.w	r3, r2, r3
 8013e42:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8013e46:	141a      	asrs	r2, r3, #16
 8013e48:	4911      	ldr	r1, [pc, #68]	; (8013e90 <TGFX_JPEG_InitPostProcColorTables+0x84>)
 8013e4a:	687b      	ldr	r3, [r7, #4]
 8013e4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    CR_GREEN_LUT[i] = (-((int32_t) ((0.71414 / 2) * (1L << 16)))) * index;
 8013e50:	683b      	ldr	r3, [r7, #0]
 8013e52:	4a10      	ldr	r2, [pc, #64]	; (8013e94 <TGFX_JPEG_InitPostProcColorTables+0x88>)
 8013e54:	fb03 f202 	mul.w	r2, r3, r2
 8013e58:	490f      	ldr	r1, [pc, #60]	; (8013e98 <TGFX_JPEG_InitPostProcColorTables+0x8c>)
 8013e5a:	687b      	ldr	r3, [r7, #4]
 8013e5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    CB_GREEN_LUT[i] = (-((int32_t) ((0.34414 / 2) * (1L << 16)))) * index;
 8013e60:	683b      	ldr	r3, [r7, #0]
 8013e62:	4a0e      	ldr	r2, [pc, #56]	; (8013e9c <TGFX_JPEG_InitPostProcColorTables+0x90>)
 8013e64:	fb03 f202 	mul.w	r2, r3, r2
 8013e68:	490d      	ldr	r1, [pc, #52]	; (8013ea0 <TGFX_JPEG_InitPostProcColorTables+0x94>)
 8013e6a:	687b      	ldr	r3, [r7, #4]
 8013e6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (i = 0; i <= 255; i++)
 8013e70:	687b      	ldr	r3, [r7, #4]
 8013e72:	3301      	adds	r3, #1
 8013e74:	607b      	str	r3, [r7, #4]
 8013e76:	687b      	ldr	r3, [r7, #4]
 8013e78:	2bff      	cmp	r3, #255	; 0xff
 8013e7a:	ddcd      	ble.n	8013e18 <TGFX_JPEG_InitPostProcColorTables+0xc>
  }
}
 8013e7c:	bf00      	nop
 8013e7e:	bf00      	nop
 8013e80:	370c      	adds	r7, #12
 8013e82:	46bd      	mov	sp, r7
 8013e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e88:	4770      	bx	lr
 8013e8a:	bf00      	nop
 8013e8c:	2001f3dc 	.word	0x2001f3dc
 8013e90:	2001f7dc 	.word	0x2001f7dc
 8013e94:	ffffa498 	.word	0xffffa498
 8013e98:	2001fbdc 	.word	0x2001fbdc
 8013e9c:	ffffd3f4 	.word	0xffffd3f4
 8013ea0:	2001ffdc 	.word	0x2001ffdc

08013ea4 <TGFX_JPEG_InitColorTables>:
  * @brief  Initializes the colors conversion Look Up Tables
  * @param  None
  * @retval None
  */
void TGFX_JPEG_InitColorTables(void)
{
 8013ea4:	b580      	push	{r7, lr}
 8013ea6:	af00      	add	r7, sp, #0

#if (USE_JPEG_ENCODER == 1)
  TGFX_JPEG_InitPreProcColorTables();
 8013ea8:	f000 f806 	bl	8013eb8 <TGFX_JPEG_InitPreProcColorTables>
  TGFX_JPEG_Init_MCU_LUT();
 8013eac:	f000 f888 	bl	8013fc0 <TGFX_JPEG_Init_MCU_LUT>
#endif

#if (USE_JPEG_DECODER == 1)
  TGFX_JPEG_InitPostProcColorTables();
 8013eb0:	f7ff ffac 	bl	8013e0c <TGFX_JPEG_InitPostProcColorTables>
#endif

}
 8013eb4:	bf00      	nop
 8013eb6:	bd80      	pop	{r7, pc}

08013eb8 <TGFX_JPEG_InitPreProcColorTables>:
  * @brief  Initializes the RGB -> YCbCr colors conversion Look Up Tables
  * @param  None
  * @retval None
  */
void TGFX_JPEG_InitPreProcColorTables(void)
{
 8013eb8:	b480      	push	{r7}
 8013eba:	b083      	sub	sp, #12
 8013ebc:	af00      	add	r7, sp, #0
  int32_t i;

  for (i = 0; i <= 255; i++)
 8013ebe:	2300      	movs	r3, #0
 8013ec0:	607b      	str	r3, [r7, #4]
 8013ec2:	e05a      	b.n	8013f7a <TGFX_JPEG_InitPreProcColorTables+0xc2>
  {
    RED_Y_LUT[i]           = ((  ((int32_t) ((0.299 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8013ec4:	687b      	ldr	r3, [r7, #4]
 8013ec6:	f644 428b 	movw	r2, #19595	; 0x4c8b
 8013eca:	fb02 f303 	mul.w	r3, r2, r3
 8013ece:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8013ed2:	141a      	asrs	r2, r3, #16
 8013ed4:	492e      	ldr	r1, [pc, #184]	; (8013f90 <TGFX_JPEG_InitPreProcColorTables+0xd8>)
 8013ed6:	687b      	ldr	r3, [r7, #4]
 8013ed8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    GREEN_Y_LUT[i]         = ((  ((int32_t) ((0.587 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8013edc:	687b      	ldr	r3, [r7, #4]
 8013ede:	f249 6245 	movw	r2, #38469	; 0x9645
 8013ee2:	fb02 f303 	mul.w	r3, r2, r3
 8013ee6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8013eea:	141a      	asrs	r2, r3, #16
 8013eec:	4929      	ldr	r1, [pc, #164]	; (8013f94 <TGFX_JPEG_InitPreProcColorTables+0xdc>)
 8013eee:	687b      	ldr	r3, [r7, #4]
 8013ef0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    BLUE_Y_LUT[i]          = ((  ((int32_t) ((0.114 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8013ef4:	687b      	ldr	r3, [r7, #4]
 8013ef6:	f641 522f 	movw	r2, #7471	; 0x1d2f
 8013efa:	fb02 f303 	mul.w	r3, r2, r3
 8013efe:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8013f02:	141a      	asrs	r2, r3, #16
 8013f04:	4924      	ldr	r1, [pc, #144]	; (8013f98 <TGFX_JPEG_InitPreProcColorTables+0xe0>)
 8013f06:	687b      	ldr	r3, [r7, #4]
 8013f08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    RED_CB_LUT[i]          = (((-((int32_t) ((0.1687 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8013f0c:	687b      	ldr	r3, [r7, #4]
 8013f0e:	4a23      	ldr	r2, [pc, #140]	; (8013f9c <TGFX_JPEG_InitPreProcColorTables+0xe4>)
 8013f10:	fb02 f303 	mul.w	r3, r2, r3
 8013f14:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8013f18:	141a      	asrs	r2, r3, #16
 8013f1a:	4921      	ldr	r1, [pc, #132]	; (8013fa0 <TGFX_JPEG_InitPreProcColorTables+0xe8>)
 8013f1c:	687b      	ldr	r3, [r7, #4]
 8013f1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    GREEN_CB_LUT[i]        = (((-((int32_t) ((0.3313 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8013f22:	687b      	ldr	r3, [r7, #4]
 8013f24:	4a1f      	ldr	r2, [pc, #124]	; (8013fa4 <TGFX_JPEG_InitPreProcColorTables+0xec>)
 8013f26:	fb02 f303 	mul.w	r3, r2, r3
 8013f2a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8013f2e:	141a      	asrs	r2, r3, #16
 8013f30:	491d      	ldr	r1, [pc, #116]	; (8013fa8 <TGFX_JPEG_InitPreProcColorTables+0xf0>)
 8013f32:	687b      	ldr	r3, [r7, #4]
 8013f34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    /* BLUE_CB_LUT and RED_CR_LUT are identical */
    BLUE_CB_RED_CR_LUT[i]  = ((  ((int32_t) ((0.5 )    * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8013f38:	687b      	ldr	r3, [r7, #4]
 8013f3a:	3301      	adds	r3, #1
 8013f3c:	03db      	lsls	r3, r3, #15
 8013f3e:	141a      	asrs	r2, r3, #16
 8013f40:	491a      	ldr	r1, [pc, #104]	; (8013fac <TGFX_JPEG_InitPreProcColorTables+0xf4>)
 8013f42:	687b      	ldr	r3, [r7, #4]
 8013f44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    GREEN_CR_LUT[i]        = (((-((int32_t) ((0.4187 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8013f48:	687b      	ldr	r3, [r7, #4]
 8013f4a:	4a19      	ldr	r2, [pc, #100]	; (8013fb0 <TGFX_JPEG_InitPreProcColorTables+0xf8>)
 8013f4c:	fb02 f303 	mul.w	r3, r2, r3
 8013f50:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8013f54:	141a      	asrs	r2, r3, #16
 8013f56:	4917      	ldr	r1, [pc, #92]	; (8013fb4 <TGFX_JPEG_InitPreProcColorTables+0xfc>)
 8013f58:	687b      	ldr	r3, [r7, #4]
 8013f5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    BLUE_CR_LUT[i]         = (((-((int32_t) ((0.0813 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8013f5e:	687b      	ldr	r3, [r7, #4]
 8013f60:	4a15      	ldr	r2, [pc, #84]	; (8013fb8 <TGFX_JPEG_InitPreProcColorTables+0x100>)
 8013f62:	fb02 f303 	mul.w	r3, r2, r3
 8013f66:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8013f6a:	141a      	asrs	r2, r3, #16
 8013f6c:	4913      	ldr	r1, [pc, #76]	; (8013fbc <TGFX_JPEG_InitPreProcColorTables+0x104>)
 8013f6e:	687b      	ldr	r3, [r7, #4]
 8013f70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (i = 0; i <= 255; i++)
 8013f74:	687b      	ldr	r3, [r7, #4]
 8013f76:	3301      	adds	r3, #1
 8013f78:	607b      	str	r3, [r7, #4]
 8013f7a:	687b      	ldr	r3, [r7, #4]
 8013f7c:	2bff      	cmp	r3, #255	; 0xff
 8013f7e:	dda1      	ble.n	8013ec4 <TGFX_JPEG_InitPreProcColorTables+0xc>
  }
}
 8013f80:	bf00      	nop
 8013f82:	bf00      	nop
 8013f84:	370c      	adds	r7, #12
 8013f86:	46bd      	mov	sp, r7
 8013f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f8c:	4770      	bx	lr
 8013f8e:	bf00      	nop
 8013f90:	200203dc 	.word	0x200203dc
 8013f94:	20020fdc 	.word	0x20020fdc
 8013f98:	20021bdc 	.word	0x20021bdc
 8013f9c:	ffffd4d1 	.word	0xffffd4d1
 8013fa0:	200207dc 	.word	0x200207dc
 8013fa4:	ffffab30 	.word	0xffffab30
 8013fa8:	200217dc 	.word	0x200217dc
 8013fac:	20020bdc 	.word	0x20020bdc
 8013fb0:	ffff94d1 	.word	0xffff94d1
 8013fb4:	200213dc 	.word	0x200213dc
 8013fb8:	ffffeb30 	.word	0xffffeb30
 8013fbc:	20021fdc 	.word	0x20021fdc

08013fc0 <TGFX_JPEG_Init_MCU_LUT>:
  * @brief  Initializes the MCU Look Up Tables
  * @param  None
  * @retval None
  */
void TGFX_JPEG_Init_MCU_LUT(void)
{
 8013fc0:	b480      	push	{r7}
 8013fc2:	b085      	sub	sp, #20
 8013fc4:	af00      	add	r7, sp, #0
  uint32_t i, j, offset;

  /*Y LUT */
  for(i = 0; i < 16; i++)
 8013fc6:	2300      	movs	r3, #0
 8013fc8:	60fb      	str	r3, [r7, #12]
 8013fca:	e036      	b.n	801403a <TGFX_JPEG_Init_MCU_LUT+0x7a>
  {
    for(j = 0; j < 16; j++)
 8013fcc:	2300      	movs	r3, #0
 8013fce:	60bb      	str	r3, [r7, #8]
 8013fd0:	e02d      	b.n	801402e <TGFX_JPEG_Init_MCU_LUT+0x6e>
    {
      offset =  j + (i*8);
 8013fd2:	68fb      	ldr	r3, [r7, #12]
 8013fd4:	00db      	lsls	r3, r3, #3
 8013fd6:	68ba      	ldr	r2, [r7, #8]
 8013fd8:	4413      	add	r3, r2
 8013fda:	607b      	str	r3, [r7, #4]
      if((j>=8) && (i>=8)) offset+= 120;
 8013fdc:	68bb      	ldr	r3, [r7, #8]
 8013fde:	2b07      	cmp	r3, #7
 8013fe0:	d906      	bls.n	8013ff0 <TGFX_JPEG_Init_MCU_LUT+0x30>
 8013fe2:	68fb      	ldr	r3, [r7, #12]
 8013fe4:	2b07      	cmp	r3, #7
 8013fe6:	d903      	bls.n	8013ff0 <TGFX_JPEG_Init_MCU_LUT+0x30>
 8013fe8:	687b      	ldr	r3, [r7, #4]
 8013fea:	3378      	adds	r3, #120	; 0x78
 8013fec:	607b      	str	r3, [r7, #4]
 8013fee:	e012      	b.n	8014016 <TGFX_JPEG_Init_MCU_LUT+0x56>
      else  if((j>=8) && (i<8)) offset+= 56;
 8013ff0:	68bb      	ldr	r3, [r7, #8]
 8013ff2:	2b07      	cmp	r3, #7
 8013ff4:	d906      	bls.n	8014004 <TGFX_JPEG_Init_MCU_LUT+0x44>
 8013ff6:	68fb      	ldr	r3, [r7, #12]
 8013ff8:	2b07      	cmp	r3, #7
 8013ffa:	d803      	bhi.n	8014004 <TGFX_JPEG_Init_MCU_LUT+0x44>
 8013ffc:	687b      	ldr	r3, [r7, #4]
 8013ffe:	3338      	adds	r3, #56	; 0x38
 8014000:	607b      	str	r3, [r7, #4]
 8014002:	e008      	b.n	8014016 <TGFX_JPEG_Init_MCU_LUT+0x56>
      else  if((j<8) && (i>=8)) offset+= 64;
 8014004:	68bb      	ldr	r3, [r7, #8]
 8014006:	2b07      	cmp	r3, #7
 8014008:	d805      	bhi.n	8014016 <TGFX_JPEG_Init_MCU_LUT+0x56>
 801400a:	68fb      	ldr	r3, [r7, #12]
 801400c:	2b07      	cmp	r3, #7
 801400e:	d902      	bls.n	8014016 <TGFX_JPEG_Init_MCU_LUT+0x56>
 8014010:	687b      	ldr	r3, [r7, #4]
 8014012:	3340      	adds	r3, #64	; 0x40
 8014014:	607b      	str	r3, [r7, #4]

      JPEG_Y_MCU_LUT[i*16 + j] = offset;
 8014016:	68fb      	ldr	r3, [r7, #12]
 8014018:	011a      	lsls	r2, r3, #4
 801401a:	68bb      	ldr	r3, [r7, #8]
 801401c:	4413      	add	r3, r2
 801401e:	687a      	ldr	r2, [r7, #4]
 8014020:	b291      	uxth	r1, r2
 8014022:	4a62      	ldr	r2, [pc, #392]	; (80141ac <TGFX_JPEG_Init_MCU_LUT+0x1ec>)
 8014024:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(j = 0; j < 16; j++)
 8014028:	68bb      	ldr	r3, [r7, #8]
 801402a:	3301      	adds	r3, #1
 801402c:	60bb      	str	r3, [r7, #8]
 801402e:	68bb      	ldr	r3, [r7, #8]
 8014030:	2b0f      	cmp	r3, #15
 8014032:	d9ce      	bls.n	8013fd2 <TGFX_JPEG_Init_MCU_LUT+0x12>
  for(i = 0; i < 16; i++)
 8014034:	68fb      	ldr	r3, [r7, #12]
 8014036:	3301      	adds	r3, #1
 8014038:	60fb      	str	r3, [r7, #12]
 801403a:	68fb      	ldr	r3, [r7, #12]
 801403c:	2b0f      	cmp	r3, #15
 801403e:	d9c5      	bls.n	8013fcc <TGFX_JPEG_Init_MCU_LUT+0xc>
    }
  }

  /*Cb Cr K LUT*/
  for(i = 0; i < 16; i++)
 8014040:	2300      	movs	r3, #0
 8014042:	60fb      	str	r3, [r7, #12]
 8014044:	e072      	b.n	801412c <TGFX_JPEG_Init_MCU_LUT+0x16c>
  {
    for(j = 0; j < 16; j++)
 8014046:	2300      	movs	r3, #0
 8014048:	60bb      	str	r3, [r7, #8]
 801404a:	e069      	b.n	8014120 <TGFX_JPEG_Init_MCU_LUT+0x160>
    {
      offset = i*16 + j;
 801404c:	68fb      	ldr	r3, [r7, #12]
 801404e:	011b      	lsls	r3, r3, #4
 8014050:	68ba      	ldr	r2, [r7, #8]
 8014052:	4413      	add	r3, r2
 8014054:	607b      	str	r3, [r7, #4]

      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
 8014056:	68bb      	ldr	r3, [r7, #8]
 8014058:	085b      	lsrs	r3, r3, #1
 801405a:	b29a      	uxth	r2, r3
 801405c:	68fb      	ldr	r3, [r7, #12]
 801405e:	085b      	lsrs	r3, r3, #1
 8014060:	b29b      	uxth	r3, r3
 8014062:	00db      	lsls	r3, r3, #3
 8014064:	b29b      	uxth	r3, r3
 8014066:	4413      	add	r3, r2
 8014068:	b29b      	uxth	r3, r3
 801406a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801406e:	b299      	uxth	r1, r3
 8014070:	4a4f      	ldr	r2, [pc, #316]	; (80141b0 <TGFX_JPEG_Init_MCU_LUT+0x1f0>)
 8014072:	687b      	ldr	r3, [r7, #4]
 8014074:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
 8014078:	68bb      	ldr	r3, [r7, #8]
 801407a:	085b      	lsrs	r3, r3, #1
 801407c:	b29a      	uxth	r2, r3
 801407e:	68fb      	ldr	r3, [r7, #12]
 8014080:	b29b      	uxth	r3, r3
 8014082:	00db      	lsls	r3, r3, #3
 8014084:	b29b      	uxth	r3, r3
 8014086:	4413      	add	r3, r2
 8014088:	b29b      	uxth	r3, r3
 801408a:	3380      	adds	r3, #128	; 0x80
 801408c:	b299      	uxth	r1, r3
 801408e:	4a49      	ldr	r2, [pc, #292]	; (80141b4 <TGFX_JPEG_Init_MCU_LUT+0x1f4>)
 8014090:	687b      	ldr	r3, [r7, #4]
 8014092:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
 8014096:	68bb      	ldr	r3, [r7, #8]
 8014098:	085b      	lsrs	r3, r3, #1
 801409a:	b29a      	uxth	r2, r3
 801409c:	68fb      	ldr	r3, [r7, #12]
 801409e:	085b      	lsrs	r3, r3, #1
 80140a0:	b29b      	uxth	r3, r3
 80140a2:	00db      	lsls	r3, r3, #3
 80140a4:	b29b      	uxth	r3, r3
 80140a6:	4413      	add	r3, r2
 80140a8:	b29b      	uxth	r3, r3
 80140aa:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80140ae:	b299      	uxth	r1, r3
 80140b0:	4a41      	ldr	r2, [pc, #260]	; (80141b8 <TGFX_JPEG_Init_MCU_LUT+0x1f8>)
 80140b2:	687b      	ldr	r3, [r7, #4]
 80140b4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
 80140b8:	68bb      	ldr	r3, [r7, #8]
 80140ba:	085b      	lsrs	r3, r3, #1
 80140bc:	b29a      	uxth	r2, r3
 80140be:	68fb      	ldr	r3, [r7, #12]
 80140c0:	b29b      	uxth	r3, r3
 80140c2:	00db      	lsls	r3, r3, #3
 80140c4:	b29b      	uxth	r3, r3
 80140c6:	4413      	add	r3, r2
 80140c8:	b29b      	uxth	r3, r3
 80140ca:	33c0      	adds	r3, #192	; 0xc0
 80140cc:	b299      	uxth	r1, r3
 80140ce:	4a3b      	ldr	r2, [pc, #236]	; (80141bc <TGFX_JPEG_Init_MCU_LUT+0x1fc>)
 80140d0:	687b      	ldr	r3, [r7, #4]
 80140d2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
 80140d6:	68bb      	ldr	r3, [r7, #8]
 80140d8:	085b      	lsrs	r3, r3, #1
 80140da:	b29a      	uxth	r2, r3
 80140dc:	68fb      	ldr	r3, [r7, #12]
 80140de:	085b      	lsrs	r3, r3, #1
 80140e0:	b29b      	uxth	r3, r3
 80140e2:	00db      	lsls	r3, r3, #3
 80140e4:	b29b      	uxth	r3, r3
 80140e6:	4413      	add	r3, r2
 80140e8:	b29b      	uxth	r3, r3
 80140ea:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80140ee:	b299      	uxth	r1, r3
 80140f0:	4a33      	ldr	r2, [pc, #204]	; (80141c0 <TGFX_JPEG_Init_MCU_LUT+0x200>)
 80140f2:	687b      	ldr	r3, [r7, #4]
 80140f4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_K_MCU_422_LUT[offset] = (j/2) + ((i/2)*8) + 256;
 80140f8:	68bb      	ldr	r3, [r7, #8]
 80140fa:	085b      	lsrs	r3, r3, #1
 80140fc:	b29a      	uxth	r2, r3
 80140fe:	68fb      	ldr	r3, [r7, #12]
 8014100:	085b      	lsrs	r3, r3, #1
 8014102:	b29b      	uxth	r3, r3
 8014104:	00db      	lsls	r3, r3, #3
 8014106:	b29b      	uxth	r3, r3
 8014108:	4413      	add	r3, r2
 801410a:	b29b      	uxth	r3, r3
 801410c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8014110:	b299      	uxth	r1, r3
 8014112:	4a2c      	ldr	r2, [pc, #176]	; (80141c4 <TGFX_JPEG_Init_MCU_LUT+0x204>)
 8014114:	687b      	ldr	r3, [r7, #4]
 8014116:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(j = 0; j < 16; j++)
 801411a:	68bb      	ldr	r3, [r7, #8]
 801411c:	3301      	adds	r3, #1
 801411e:	60bb      	str	r3, [r7, #8]
 8014120:	68bb      	ldr	r3, [r7, #8]
 8014122:	2b0f      	cmp	r3, #15
 8014124:	d992      	bls.n	801404c <TGFX_JPEG_Init_MCU_LUT+0x8c>
  for(i = 0; i < 16; i++)
 8014126:	68fb      	ldr	r3, [r7, #12]
 8014128:	3301      	adds	r3, #1
 801412a:	60fb      	str	r3, [r7, #12]
 801412c:	68fb      	ldr	r3, [r7, #12]
 801412e:	2b0f      	cmp	r3, #15
 8014130:	d989      	bls.n	8014046 <TGFX_JPEG_Init_MCU_LUT+0x86>
    }
  }

  for(i = 0; i < 8; i++)
 8014132:	2300      	movs	r3, #0
 8014134:	60fb      	str	r3, [r7, #12]
 8014136:	e02e      	b.n	8014196 <TGFX_JPEG_Init_MCU_LUT+0x1d6>
  {
    for(j = 0; j < 8; j++)
 8014138:	2300      	movs	r3, #0
 801413a:	60bb      	str	r3, [r7, #8]
 801413c:	e025      	b.n	801418a <TGFX_JPEG_Init_MCU_LUT+0x1ca>
    {
      offset = i*8 + j;
 801413e:	68fb      	ldr	r3, [r7, #12]
 8014140:	00db      	lsls	r3, r3, #3
 8014142:	68ba      	ldr	r2, [r7, #8]
 8014144:	4413      	add	r3, r2
 8014146:	607b      	str	r3, [r7, #4]

      JPEG_Y_MCU_444_LUT[offset]  = offset;
 8014148:	687b      	ldr	r3, [r7, #4]
 801414a:	b299      	uxth	r1, r3
 801414c:	4a1e      	ldr	r2, [pc, #120]	; (80141c8 <TGFX_JPEG_Init_MCU_LUT+0x208>)
 801414e:	687b      	ldr	r3, [r7, #4]
 8014150:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_Cb_MCU_444_LUT[offset] = offset + 64 ;
 8014154:	687b      	ldr	r3, [r7, #4]
 8014156:	b29b      	uxth	r3, r3
 8014158:	3340      	adds	r3, #64	; 0x40
 801415a:	b299      	uxth	r1, r3
 801415c:	4a1b      	ldr	r2, [pc, #108]	; (80141cc <TGFX_JPEG_Init_MCU_LUT+0x20c>)
 801415e:	687b      	ldr	r3, [r7, #4]
 8014160:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_Cr_MCU_444_LUT[offset] = offset + 128 ;
 8014164:	687b      	ldr	r3, [r7, #4]
 8014166:	b29b      	uxth	r3, r3
 8014168:	3380      	adds	r3, #128	; 0x80
 801416a:	b299      	uxth	r1, r3
 801416c:	4a18      	ldr	r2, [pc, #96]	; (80141d0 <TGFX_JPEG_Init_MCU_LUT+0x210>)
 801416e:	687b      	ldr	r3, [r7, #4]
 8014170:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_K_MCU_444_LUT[offset]  = offset + 192 ;
 8014174:	687b      	ldr	r3, [r7, #4]
 8014176:	b29b      	uxth	r3, r3
 8014178:	33c0      	adds	r3, #192	; 0xc0
 801417a:	b299      	uxth	r1, r3
 801417c:	4a15      	ldr	r2, [pc, #84]	; (80141d4 <TGFX_JPEG_Init_MCU_LUT+0x214>)
 801417e:	687b      	ldr	r3, [r7, #4]
 8014180:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(j = 0; j < 8; j++)
 8014184:	68bb      	ldr	r3, [r7, #8]
 8014186:	3301      	adds	r3, #1
 8014188:	60bb      	str	r3, [r7, #8]
 801418a:	68bb      	ldr	r3, [r7, #8]
 801418c:	2b07      	cmp	r3, #7
 801418e:	d9d6      	bls.n	801413e <TGFX_JPEG_Init_MCU_LUT+0x17e>
  for(i = 0; i < 8; i++)
 8014190:	68fb      	ldr	r3, [r7, #12]
 8014192:	3301      	adds	r3, #1
 8014194:	60fb      	str	r3, [r7, #12]
 8014196:	68fb      	ldr	r3, [r7, #12]
 8014198:	2b07      	cmp	r3, #7
 801419a:	d9cd      	bls.n	8014138 <TGFX_JPEG_Init_MCU_LUT+0x178>
    }
  }
}
 801419c:	bf00      	nop
 801419e:	bf00      	nop
 80141a0:	3714      	adds	r7, #20
 80141a2:	46bd      	mov	sp, r7
 80141a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141a8:	4770      	bx	lr
 80141aa:	bf00      	nop
 80141ac:	200223dc 	.word	0x200223dc
 80141b0:	2002265c 	.word	0x2002265c
 80141b4:	2002285c 	.word	0x2002285c
 80141b8:	20022adc 	.word	0x20022adc
 80141bc:	20022cdc 	.word	0x20022cdc
 80141c0:	20022f5c 	.word	0x20022f5c
 80141c4:	2002315c 	.word	0x2002315c
 80141c8:	200225dc 	.word	0x200225dc
 80141cc:	20022a5c 	.word	0x20022a5c
 80141d0:	20022edc 	.word	0x20022edc
 80141d4:	2002335c 	.word	0x2002335c

080141d8 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr420_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer, 
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
 80141d8:	b480      	push	{r7}
 80141da:	b097      	sub	sp, #92	; 0x5c
 80141dc:	af00      	add	r7, sp, #0
 80141de:	60f8      	str	r0, [r7, #12]
 80141e0:	60b9      	str	r1, [r7, #8]
 80141e2:	607a      	str	r2, [r7, #4]
 80141e4:	603b      	str	r3, [r7, #0]
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr, *pOutAddr2;
  uint8_t *pChrom, *pLum;
  
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
 80141e6:	683b      	ldr	r3, [r7, #0]
 80141e8:	4a24      	ldr	r2, [pc, #144]	; (801427c <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xa4>)
 80141ea:	fba2 2303 	umull	r2, r3, r2, r3
 80141ee:	0a1b      	lsrs	r3, r3, #8
 80141f0:	633b      	str	r3, [r7, #48]	; 0x30
  currentMCU = BlockIndex;
 80141f2:	687b      	ldr	r3, [r7, #4]
 80141f4:	64bb      	str	r3, [r7, #72]	; 0x48
  

  while(currentMCU < (numberMCU + BlockIndex))
 80141f6:	e148      	b.n	801448a <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2b2>
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
 80141f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80141fa:	011a      	lsls	r2, r3, #4
 80141fc:	4b20      	ldr	r3, [pc, #128]	; (8014280 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xa8>)
 80141fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014200:	fbb2 f3f3 	udiv	r3, r2, r3
 8014204:	011b      	lsls	r3, r3, #4
 8014206:	62fb      	str	r3, [r7, #44]	; 0x2c
    
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
 8014208:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801420a:	011b      	lsls	r3, r3, #4
 801420c:	4a1c      	ldr	r2, [pc, #112]	; (8014280 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xa8>)
 801420e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8014210:	fbb3 f1f2 	udiv	r1, r3, r2
 8014214:	fb01 f202 	mul.w	r2, r1, r2
 8014218:	1a9b      	subs	r3, r3, r2
 801421a:	62bb      	str	r3, [r7, #40]	; 0x28
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 801421c:	4b18      	ldr	r3, [pc, #96]	; (8014280 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xa8>)
 801421e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014220:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014222:	fb03 f202 	mul.w	r2, r3, r2
 8014226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014228:	005b      	lsls	r3, r3, #1
 801422a:	4413      	add	r3, r2
 801422c:	647b      	str	r3, [r7, #68]	; 0x44

    currentMCU++;
 801422e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014230:	3301      	adds	r3, #1
 8014232:	64bb      	str	r3, [r7, #72]	; 0x48
    
    pChrom = pInBuffer + 256; /* pChroma = pInBuffer + 4*64 */
 8014234:	68fb      	ldr	r3, [r7, #12]
 8014236:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801423a:	63bb      	str	r3, [r7, #56]	; 0x38
    
    pLum = pInBuffer;
 801423c:	68fb      	ldr	r3, [r7, #12]
 801423e:	637b      	str	r3, [r7, #52]	; 0x34
    
    for(i= 0; i <  16; i+=2)
 8014240:	2300      	movs	r3, #0
 8014242:	657b      	str	r3, [r7, #84]	; 0x54
 8014244:	e119      	b.n	801447a <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2a2>
    {
      if(i == 8)
 8014246:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014248:	2b08      	cmp	r3, #8
 801424a:	d102      	bne.n	8014252 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x7a>
      {
        pLum = pInBuffer + 128;
 801424c:	68fb      	ldr	r3, [r7, #12]
 801424e:	3380      	adds	r3, #128	; 0x80
 8014250:	637b      	str	r3, [r7, #52]	; 0x34
      }
      
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8014252:	4b0b      	ldr	r3, [pc, #44]	; (8014280 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xa8>)
 8014254:	691b      	ldr	r3, [r3, #16]
 8014256:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014258:	429a      	cmp	r2, r3
 801425a:	f080 810b 	bcs.w	8014474 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x29c>
      {
        pOutAddr = pOutBuffer + refline;
 801425e:	68ba      	ldr	r2, [r7, #8]
 8014260:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014262:	4413      	add	r3, r2
 8014264:	643b      	str	r3, [r7, #64]	; 0x40
        pOutAddr2 = pOutAddr + JPEG_ConvertorParams.ScaledWidth;
 8014266:	4b06      	ldr	r3, [pc, #24]	; (8014280 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xa8>)
 8014268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801426a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801426c:	4413      	add	r3, r2
 801426e:	63fb      	str	r3, [r7, #60]	; 0x3c
        
        for(k= 0; k<2; k++)
 8014270:	2300      	movs	r3, #0
 8014272:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014274:	e0f1      	b.n	801445a <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x282>
        {
          for(j=0; j < 8; j+=2)
 8014276:	2300      	movs	r3, #0
 8014278:	653b      	str	r3, [r7, #80]	; 0x50
 801427a:	e0e4      	b.n	8014446 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x26e>
 801427c:	aaaaaaab 	.word	0xaaaaaaab
 8014280:	200233dc 	.word	0x200233dc
          {           
            cbcomp = (int32_t)(*(pChrom));
 8014284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014286:	781b      	ldrb	r3, [r3, #0]
 8014288:	627b      	str	r3, [r7, #36]	; 0x24
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 801428a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801428c:	009b      	lsls	r3, r3, #2
 801428e:	4a86      	ldr	r2, [pc, #536]	; (80144a8 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2d0>)
 8014290:	4413      	add	r3, r2
 8014292:	681b      	ldr	r3, [r3, #0]
 8014294:	623b      	str	r3, [r7, #32]
            
            crcomp = (int32_t)(*(pChrom + 64));
 8014296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014298:	3340      	adds	r3, #64	; 0x40
 801429a:	781b      	ldrb	r3, [r3, #0]
 801429c:	61fb      	str	r3, [r7, #28]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
 801429e:	69fb      	ldr	r3, [r7, #28]
 80142a0:	009b      	lsls	r3, r3, #2
 80142a2:	4a82      	ldr	r2, [pc, #520]	; (80144ac <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2d4>)
 80142a4:	4413      	add	r3, r2
 80142a6:	681b      	ldr	r3, [r3, #0]
 80142a8:	61bb      	str	r3, [r7, #24]
            
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
 80142aa:	69fb      	ldr	r3, [r7, #28]
 80142ac:	009b      	lsls	r3, r3, #2
 80142ae:	4a80      	ldr	r2, [pc, #512]	; (80144b0 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2d8>)
 80142b0:	4413      	add	r3, r2
 80142b2:	681a      	ldr	r2, [r3, #0]
 80142b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142b6:	009b      	lsls	r3, r3, #2
 80142b8:	497e      	ldr	r1, [pc, #504]	; (80144b4 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2dc>)
 80142ba:	440b      	add	r3, r1
 80142bc:	681b      	ldr	r3, [r3, #0]
 80142be:	4413      	add	r3, r2
 80142c0:	141b      	asrs	r3, r3, #16
 80142c2:	617b      	str	r3, [r7, #20]
            pOutAddr2[3 + JPEG_GREEN_OFFSET/8] = CLAMP(ycomp + c_green);
            pOutAddr2[3 + JPEG_BLUE_OFFSET/8] = CLAMP(ycomp + c_blue);
 
#elif (JPEG_RGB_FORMAT == JPEG_RGB565)
          
            ycomp = (int32_t)(*(pLum +j));
 80142c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80142c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80142c8:	4413      	add	r3, r2
 80142ca:	781b      	ldrb	r3, [r3, #0]
 80142cc:	613b      	str	r3, [r7, #16]
            
            *(__IO uint16_t *)pOutAddr = 
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 80142ce:	693a      	ldr	r2, [r7, #16]
 80142d0:	69bb      	ldr	r3, [r7, #24]
 80142d2:	4413      	add	r3, r2
 80142d4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80142d8:	4a77      	ldr	r2, [pc, #476]	; (80144b8 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2e0>)
 80142da:	5cd3      	ldrb	r3, [r2, r3]
 80142dc:	08db      	lsrs	r3, r3, #3
 80142de:	b2db      	uxtb	r3, r3
 80142e0:	02db      	lsls	r3, r3, #11
 80142e2:	b21a      	sxth	r2, r3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 80142e4:	6939      	ldr	r1, [r7, #16]
 80142e6:	697b      	ldr	r3, [r7, #20]
 80142e8:	440b      	add	r3, r1
 80142ea:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80142ee:	4972      	ldr	r1, [pc, #456]	; (80144b8 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2e0>)
 80142f0:	5ccb      	ldrb	r3, [r1, r3]
 80142f2:	089b      	lsrs	r3, r3, #2
 80142f4:	b2db      	uxtb	r3, r3
 80142f6:	015b      	lsls	r3, r3, #5
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 80142f8:	b21b      	sxth	r3, r3
 80142fa:	4313      	orrs	r3, r2
 80142fc:	b21a      	sxth	r2, r3
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 80142fe:	6939      	ldr	r1, [r7, #16]
 8014300:	6a3b      	ldr	r3, [r7, #32]
 8014302:	440b      	add	r3, r1
 8014304:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8014308:	496b      	ldr	r1, [pc, #428]	; (80144b8 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2e0>)
 801430a:	5ccb      	ldrb	r3, [r1, r3]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 801430c:	08db      	lsrs	r3, r3, #3
 801430e:	b2db      	uxtb	r3, r3
 8014310:	b21b      	sxth	r3, r3
 8014312:	4313      	orrs	r3, r2
 8014314:	b21b      	sxth	r3, r3
 8014316:	b29a      	uxth	r2, r3
            *(__IO uint16_t *)pOutAddr = 
 8014318:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801431a:	801a      	strh	r2, [r3, #0]
            /**********/
            ycomp = (int32_t)(*(pLum +j +1));
 801431c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801431e:	3301      	adds	r3, #1
 8014320:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014322:	4413      	add	r3, r2
 8014324:	781b      	ldrb	r3, [r3, #0]
 8014326:	613b      	str	r3, [r7, #16]
            
            *((__IO uint16_t *)(pOutAddr + 2)) = 
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8014328:	693a      	ldr	r2, [r7, #16]
 801432a:	69bb      	ldr	r3, [r7, #24]
 801432c:	4413      	add	r3, r2
 801432e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8014332:	4a61      	ldr	r2, [pc, #388]	; (80144b8 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2e0>)
 8014334:	5cd3      	ldrb	r3, [r2, r3]
 8014336:	08db      	lsrs	r3, r3, #3
 8014338:	b2db      	uxtb	r3, r3
 801433a:	02db      	lsls	r3, r3, #11
 801433c:	b21a      	sxth	r2, r3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 801433e:	6939      	ldr	r1, [r7, #16]
 8014340:	697b      	ldr	r3, [r7, #20]
 8014342:	440b      	add	r3, r1
 8014344:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8014348:	495b      	ldr	r1, [pc, #364]	; (80144b8 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2e0>)
 801434a:	5ccb      	ldrb	r3, [r1, r3]
 801434c:	089b      	lsrs	r3, r3, #2
 801434e:	b2db      	uxtb	r3, r3
 8014350:	015b      	lsls	r3, r3, #5
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8014352:	b21b      	sxth	r3, r3
 8014354:	4313      	orrs	r3, r2
 8014356:	b21a      	sxth	r2, r3
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 8014358:	6939      	ldr	r1, [r7, #16]
 801435a:	6a3b      	ldr	r3, [r7, #32]
 801435c:	440b      	add	r3, r1
 801435e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8014362:	4955      	ldr	r1, [pc, #340]	; (80144b8 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2e0>)
 8014364:	5ccb      	ldrb	r3, [r1, r3]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8014366:	08db      	lsrs	r3, r3, #3
 8014368:	b2db      	uxtb	r3, r3
 801436a:	b21b      	sxth	r3, r3
 801436c:	4313      	orrs	r3, r2
 801436e:	b21a      	sxth	r2, r3
            *((__IO uint16_t *)(pOutAddr + 2)) = 
 8014370:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014372:	3302      	adds	r3, #2
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8014374:	b292      	uxth	r2, r2
            *((__IO uint16_t *)(pOutAddr + 2)) = 
 8014376:	801a      	strh	r2, [r3, #0]
            
            /**********/
            ycomp = (int32_t)(*(pLum +j +8));
 8014378:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801437a:	3308      	adds	r3, #8
 801437c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801437e:	4413      	add	r3, r2
 8014380:	781b      	ldrb	r3, [r3, #0]
 8014382:	613b      	str	r3, [r7, #16]
            
            *(__IO uint16_t *)pOutAddr2 = 
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8014384:	693a      	ldr	r2, [r7, #16]
 8014386:	69bb      	ldr	r3, [r7, #24]
 8014388:	4413      	add	r3, r2
 801438a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801438e:	4a4a      	ldr	r2, [pc, #296]	; (80144b8 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2e0>)
 8014390:	5cd3      	ldrb	r3, [r2, r3]
 8014392:	08db      	lsrs	r3, r3, #3
 8014394:	b2db      	uxtb	r3, r3
 8014396:	02db      	lsls	r3, r3, #11
 8014398:	b21a      	sxth	r2, r3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 801439a:	6939      	ldr	r1, [r7, #16]
 801439c:	697b      	ldr	r3, [r7, #20]
 801439e:	440b      	add	r3, r1
 80143a0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80143a4:	4944      	ldr	r1, [pc, #272]	; (80144b8 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2e0>)
 80143a6:	5ccb      	ldrb	r3, [r1, r3]
 80143a8:	089b      	lsrs	r3, r3, #2
 80143aa:	b2db      	uxtb	r3, r3
 80143ac:	015b      	lsls	r3, r3, #5
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 80143ae:	b21b      	sxth	r3, r3
 80143b0:	4313      	orrs	r3, r2
 80143b2:	b21a      	sxth	r2, r3
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 80143b4:	6939      	ldr	r1, [r7, #16]
 80143b6:	6a3b      	ldr	r3, [r7, #32]
 80143b8:	440b      	add	r3, r1
 80143ba:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80143be:	493e      	ldr	r1, [pc, #248]	; (80144b8 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2e0>)
 80143c0:	5ccb      	ldrb	r3, [r1, r3]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 80143c2:	08db      	lsrs	r3, r3, #3
 80143c4:	b2db      	uxtb	r3, r3
 80143c6:	b21b      	sxth	r3, r3
 80143c8:	4313      	orrs	r3, r2
 80143ca:	b21b      	sxth	r3, r3
 80143cc:	b29a      	uxth	r2, r3
            *(__IO uint16_t *)pOutAddr2 = 
 80143ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80143d0:	801a      	strh	r2, [r3, #0]
            
            /**********/
            ycomp = (int32_t)(*(pLum +j +8 +1));
 80143d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80143d4:	3309      	adds	r3, #9
 80143d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80143d8:	4413      	add	r3, r2
 80143da:	781b      	ldrb	r3, [r3, #0]
 80143dc:	613b      	str	r3, [r7, #16]
            
            *((__IO uint16_t *)(pOutAddr2 +2)) = 
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 80143de:	693a      	ldr	r2, [r7, #16]
 80143e0:	69bb      	ldr	r3, [r7, #24]
 80143e2:	4413      	add	r3, r2
 80143e4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80143e8:	4a33      	ldr	r2, [pc, #204]	; (80144b8 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2e0>)
 80143ea:	5cd3      	ldrb	r3, [r2, r3]
 80143ec:	08db      	lsrs	r3, r3, #3
 80143ee:	b2db      	uxtb	r3, r3
 80143f0:	02db      	lsls	r3, r3, #11
 80143f2:	b21a      	sxth	r2, r3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 80143f4:	6939      	ldr	r1, [r7, #16]
 80143f6:	697b      	ldr	r3, [r7, #20]
 80143f8:	440b      	add	r3, r1
 80143fa:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80143fe:	492e      	ldr	r1, [pc, #184]	; (80144b8 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2e0>)
 8014400:	5ccb      	ldrb	r3, [r1, r3]
 8014402:	089b      	lsrs	r3, r3, #2
 8014404:	b2db      	uxtb	r3, r3
 8014406:	015b      	lsls	r3, r3, #5
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8014408:	b21b      	sxth	r3, r3
 801440a:	4313      	orrs	r3, r2
 801440c:	b21a      	sxth	r2, r3
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);         
 801440e:	6939      	ldr	r1, [r7, #16]
 8014410:	6a3b      	ldr	r3, [r7, #32]
 8014412:	440b      	add	r3, r1
 8014414:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8014418:	4927      	ldr	r1, [pc, #156]	; (80144b8 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2e0>)
 801441a:	5ccb      	ldrb	r3, [r1, r3]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 801441c:	08db      	lsrs	r3, r3, #3
 801441e:	b2db      	uxtb	r3, r3
 8014420:	b21b      	sxth	r3, r3
 8014422:	4313      	orrs	r3, r2
 8014424:	b21a      	sxth	r2, r3
            *((__IO uint16_t *)(pOutAddr2 +2)) = 
 8014426:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014428:	3302      	adds	r3, #2
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 801442a:	b292      	uxth	r2, r2
            *((__IO uint16_t *)(pOutAddr2 +2)) = 
 801442c:	801a      	strh	r2, [r3, #0]
#endif /* JPEG_RGB_FORMAT */          
          
            pOutAddr += JPEG_BYTES_PER_PIXEL * 2;
 801442e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014430:	3304      	adds	r3, #4
 8014432:	643b      	str	r3, [r7, #64]	; 0x40
            pOutAddr2 += JPEG_BYTES_PER_PIXEL * 2;
 8014434:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014436:	3304      	adds	r3, #4
 8014438:	63fb      	str	r3, [r7, #60]	; 0x3c
          
            pChrom++;
 801443a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801443c:	3301      	adds	r3, #1
 801443e:	63bb      	str	r3, [r7, #56]	; 0x38
          for(j=0; j < 8; j+=2)
 8014440:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014442:	3302      	adds	r3, #2
 8014444:	653b      	str	r3, [r7, #80]	; 0x50
 8014446:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014448:	2b07      	cmp	r3, #7
 801444a:	f67f af1b 	bls.w	8014284 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xac>
          }
          pLum += 64;                      
 801444e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014450:	3340      	adds	r3, #64	; 0x40
 8014452:	637b      	str	r3, [r7, #52]	; 0x34
        for(k= 0; k<2; k++)
 8014454:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014456:	3301      	adds	r3, #1
 8014458:	64fb      	str	r3, [r7, #76]	; 0x4c
 801445a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801445c:	2b01      	cmp	r3, #1
 801445e:	f67f af0a 	bls.w	8014276 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x9e>
        }

        pLum = pLum - 128 + 16;
 8014462:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014464:	3b70      	subs	r3, #112	; 0x70
 8014466:	637b      	str	r3, [r7, #52]	; 0x34
        
        refline += 2*JPEG_ConvertorParams.ScaledWidth;          
 8014468:	4b14      	ldr	r3, [pc, #80]	; (80144bc <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2e4>)
 801446a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801446c:	005b      	lsls	r3, r3, #1
 801446e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014470:	4413      	add	r3, r2
 8014472:	647b      	str	r3, [r7, #68]	; 0x44
    for(i= 0; i <  16; i+=2)
 8014474:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014476:	3302      	adds	r3, #2
 8014478:	657b      	str	r3, [r7, #84]	; 0x54
 801447a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801447c:	2b0f      	cmp	r3, #15
 801447e:	f67f aee2 	bls.w	8014246 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x6e>
      }
    }   
    
    pInBuffer +=  YCBCR_420_BLOCK_SIZE;
 8014482:	68fb      	ldr	r3, [r7, #12]
 8014484:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8014488:	60fb      	str	r3, [r7, #12]
  while(currentMCU < (numberMCU + BlockIndex))
 801448a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801448c:	687b      	ldr	r3, [r7, #4]
 801448e:	4413      	add	r3, r2
 8014490:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014492:	429a      	cmp	r2, r3
 8014494:	f4ff aeb0 	bcc.w	80141f8 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x20>
  }
  return numberMCU;
 8014498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 801449a:	4618      	mov	r0, r3
 801449c:	375c      	adds	r7, #92	; 0x5c
 801449e:	46bd      	mov	sp, r7
 80144a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144a4:	4770      	bx	lr
 80144a6:	bf00      	nop
 80144a8:	2002381c 	.word	0x2002381c
 80144ac:	2002341c 	.word	0x2002341c
 80144b0:	20023c1c 	.word	0x20023c1c
 80144b4:	2002401c 	.word	0x2002401c
 80144b8:	0802aa38 	.word	0x0802aa38
 80144bc:	200233dc 	.word	0x200233dc

080144c0 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr422_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
 80144c0:	b480      	push	{r7}
 80144c2:	b097      	sub	sp, #92	; 0x5c
 80144c4:	af00      	add	r7, sp, #0
 80144c6:	60f8      	str	r0, [r7, #12]
 80144c8:	60b9      	str	r1, [r7, #8]
 80144ca:	607a      	str	r2, [r7, #4]
 80144cc:	603b      	str	r3, [r7, #0]
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;
  
  numberMCU = DataCount / YCBCR_422_BLOCK_SIZE;
 80144ce:	683b      	ldr	r3, [r7, #0]
 80144d0:	0a1b      	lsrs	r3, r3, #8
 80144d2:	637b      	str	r3, [r7, #52]	; 0x34
  currentMCU = BlockIndex;
 80144d4:	687b      	ldr	r3, [r7, #4]
 80144d6:	64bb      	str	r3, [r7, #72]	; 0x48
  

  while(currentMCU < (numberMCU + BlockIndex))
 80144d8:	e0d9      	b.n	801468e <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1ce>
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
 80144da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80144dc:	011a      	lsls	r2, r3, #4
 80144de:	4b73      	ldr	r3, [pc, #460]	; (80146ac <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1ec>)
 80144e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80144e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80144e6:	00db      	lsls	r3, r3, #3
 80144e8:	633b      	str	r3, [r7, #48]	; 0x30
    
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
 80144ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80144ec:	011b      	lsls	r3, r3, #4
 80144ee:	4a6f      	ldr	r2, [pc, #444]	; (80146ac <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1ec>)
 80144f0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80144f2:	fbb3 f1f2 	udiv	r1, r3, r2
 80144f6:	fb01 f202 	mul.w	r2, r1, r2
 80144fa:	1a9b      	subs	r3, r3, r2
 80144fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 80144fe:	4b6b      	ldr	r3, [pc, #428]	; (80146ac <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1ec>)
 8014500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014502:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014504:	fb03 f202 	mul.w	r2, r3, r2
 8014508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801450a:	005b      	lsls	r3, r3, #1
 801450c:	4413      	add	r3, r2
 801450e:	647b      	str	r3, [r7, #68]	; 0x44

    currentMCU++;
 8014510:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014512:	3301      	adds	r3, #1
 8014514:	64bb      	str	r3, [r7, #72]	; 0x48
    
    pChrom = pInBuffer + 128; /* pChroma = pInBuffer + 2*64 */
 8014516:	68fb      	ldr	r3, [r7, #12]
 8014518:	3380      	adds	r3, #128	; 0x80
 801451a:	63fb      	str	r3, [r7, #60]	; 0x3c
    
    pLum = pInBuffer;
 801451c:	68fb      	ldr	r3, [r7, #12]
 801451e:	63bb      	str	r3, [r7, #56]	; 0x38
    
    for(i= 0; i <  8; i++)
 8014520:	2300      	movs	r3, #0
 8014522:	657b      	str	r3, [r7, #84]	; 0x54
 8014524:	e0ab      	b.n	801467e <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1be>
    {
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8014526:	4b61      	ldr	r3, [pc, #388]	; (80146ac <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1ec>)
 8014528:	691b      	ldr	r3, [r3, #16]
 801452a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801452c:	429a      	cmp	r2, r3
 801452e:	f080 80a3 	bcs.w	8014678 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1b8>
      {
        pOutAddr = pOutBuffer + refline;
 8014532:	68ba      	ldr	r2, [r7, #8]
 8014534:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014536:	4413      	add	r3, r2
 8014538:	643b      	str	r3, [r7, #64]	; 0x40
        
        for(k= 0; k<2; k++)
 801453a:	2300      	movs	r3, #0
 801453c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801453e:	e08f      	b.n	8014660 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1a0>
        {
          for(j=0; j < 8; j+=2)
 8014540:	2300      	movs	r3, #0
 8014542:	653b      	str	r3, [r7, #80]	; 0x50
 8014544:	e082      	b.n	801464c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x18c>
          {           
            cbcomp = (int32_t)(*(pChrom));
 8014546:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014548:	781b      	ldrb	r3, [r3, #0]
 801454a:	62bb      	str	r3, [r7, #40]	; 0x28
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 801454c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801454e:	009b      	lsls	r3, r3, #2
 8014550:	4a57      	ldr	r2, [pc, #348]	; (80146b0 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1f0>)
 8014552:	4413      	add	r3, r2
 8014554:	681b      	ldr	r3, [r3, #0]
 8014556:	627b      	str	r3, [r7, #36]	; 0x24
            
            crcomp = (int32_t)(*(pChrom + 64));
 8014558:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801455a:	3340      	adds	r3, #64	; 0x40
 801455c:	781b      	ldrb	r3, [r3, #0]
 801455e:	623b      	str	r3, [r7, #32]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
 8014560:	6a3b      	ldr	r3, [r7, #32]
 8014562:	009b      	lsls	r3, r3, #2
 8014564:	4a53      	ldr	r2, [pc, #332]	; (80146b4 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1f4>)
 8014566:	4413      	add	r3, r2
 8014568:	681b      	ldr	r3, [r3, #0]
 801456a:	61fb      	str	r3, [r7, #28]
            
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
 801456c:	6a3b      	ldr	r3, [r7, #32]
 801456e:	009b      	lsls	r3, r3, #2
 8014570:	4a51      	ldr	r2, [pc, #324]	; (80146b8 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1f8>)
 8014572:	4413      	add	r3, r2
 8014574:	681a      	ldr	r2, [r3, #0]
 8014576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014578:	009b      	lsls	r3, r3, #2
 801457a:	4950      	ldr	r1, [pc, #320]	; (80146bc <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1fc>)
 801457c:	440b      	add	r3, r1
 801457e:	681b      	ldr	r3, [r3, #0]
 8014580:	4413      	add	r3, r2
 8014582:	141b      	asrs	r3, r3, #16
 8014584:	61bb      	str	r3, [r7, #24]
            pOutAddr[3 + JPEG_GREEN_OFFSET/8] = CLAMP(ycomp + c_green);
            pOutAddr[3 + JPEG_BLUE_OFFSET/8] = CLAMP(ycomp + c_blue);

#elif (JPEG_RGB_FORMAT == JPEG_RGB565)  
          
            ycomp = (int32_t)(*(pLum +j));
 8014586:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014588:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801458a:	4413      	add	r3, r2
 801458c:	781b      	ldrb	r3, [r3, #0]
 801458e:	617b      	str	r3, [r7, #20]
            
            *(__IO uint16_t *)pOutAddr = 
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8014590:	697a      	ldr	r2, [r7, #20]
 8014592:	69fb      	ldr	r3, [r7, #28]
 8014594:	4413      	add	r3, r2
 8014596:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801459a:	4a49      	ldr	r2, [pc, #292]	; (80146c0 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x200>)
 801459c:	5cd3      	ldrb	r3, [r2, r3]
 801459e:	08db      	lsrs	r3, r3, #3
 80145a0:	b2db      	uxtb	r3, r3
 80145a2:	02db      	lsls	r3, r3, #11
 80145a4:	b21a      	sxth	r2, r3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 80145a6:	6979      	ldr	r1, [r7, #20]
 80145a8:	69bb      	ldr	r3, [r7, #24]
 80145aa:	440b      	add	r3, r1
 80145ac:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80145b0:	4943      	ldr	r1, [pc, #268]	; (80146c0 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x200>)
 80145b2:	5ccb      	ldrb	r3, [r1, r3]
 80145b4:	089b      	lsrs	r3, r3, #2
 80145b6:	b2db      	uxtb	r3, r3
 80145b8:	015b      	lsls	r3, r3, #5
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 80145ba:	b21b      	sxth	r3, r3
 80145bc:	4313      	orrs	r3, r2
 80145be:	b21a      	sxth	r2, r3
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 80145c0:	6979      	ldr	r1, [r7, #20]
 80145c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80145c4:	440b      	add	r3, r1
 80145c6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80145ca:	493d      	ldr	r1, [pc, #244]	; (80146c0 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x200>)
 80145cc:	5ccb      	ldrb	r3, [r1, r3]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 80145ce:	08db      	lsrs	r3, r3, #3
 80145d0:	b2db      	uxtb	r3, r3
 80145d2:	b21b      	sxth	r3, r3
 80145d4:	4313      	orrs	r3, r2
 80145d6:	b21b      	sxth	r3, r3
 80145d8:	b29a      	uxth	r2, r3
            *(__IO uint16_t *)pOutAddr = 
 80145da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80145dc:	801a      	strh	r2, [r3, #0]
            /**********/
            ycomp = (int32_t)(*(pLum +j +1));
 80145de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80145e0:	3301      	adds	r3, #1
 80145e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80145e4:	4413      	add	r3, r2
 80145e6:	781b      	ldrb	r3, [r3, #0]
 80145e8:	617b      	str	r3, [r7, #20]
            
            *((__IO uint16_t *)(pOutAddr + 2)) = 
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 80145ea:	697a      	ldr	r2, [r7, #20]
 80145ec:	69fb      	ldr	r3, [r7, #28]
 80145ee:	4413      	add	r3, r2
 80145f0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80145f4:	4a32      	ldr	r2, [pc, #200]	; (80146c0 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x200>)
 80145f6:	5cd3      	ldrb	r3, [r2, r3]
 80145f8:	08db      	lsrs	r3, r3, #3
 80145fa:	b2db      	uxtb	r3, r3
 80145fc:	02db      	lsls	r3, r3, #11
 80145fe:	b21a      	sxth	r2, r3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8014600:	6979      	ldr	r1, [r7, #20]
 8014602:	69bb      	ldr	r3, [r7, #24]
 8014604:	440b      	add	r3, r1
 8014606:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801460a:	492d      	ldr	r1, [pc, #180]	; (80146c0 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x200>)
 801460c:	5ccb      	ldrb	r3, [r1, r3]
 801460e:	089b      	lsrs	r3, r3, #2
 8014610:	b2db      	uxtb	r3, r3
 8014612:	015b      	lsls	r3, r3, #5
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8014614:	b21b      	sxth	r3, r3
 8014616:	4313      	orrs	r3, r2
 8014618:	b21a      	sxth	r2, r3
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);         
 801461a:	6979      	ldr	r1, [r7, #20]
 801461c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801461e:	440b      	add	r3, r1
 8014620:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8014624:	4926      	ldr	r1, [pc, #152]	; (80146c0 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x200>)
 8014626:	5ccb      	ldrb	r3, [r1, r3]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8014628:	08db      	lsrs	r3, r3, #3
 801462a:	b2db      	uxtb	r3, r3
 801462c:	b21b      	sxth	r3, r3
 801462e:	4313      	orrs	r3, r2
 8014630:	b21a      	sxth	r2, r3
            *((__IO uint16_t *)(pOutAddr + 2)) = 
 8014632:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014634:	3302      	adds	r3, #2
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8014636:	b292      	uxth	r2, r2
            *((__IO uint16_t *)(pOutAddr + 2)) = 
 8014638:	801a      	strh	r2, [r3, #0]
          
#endif /* JPEG_RGB_FORMAT*/          
          
            pOutAddr += JPEG_BYTES_PER_PIXEL * 2;
 801463a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801463c:	3304      	adds	r3, #4
 801463e:	643b      	str	r3, [r7, #64]	; 0x40
          
            pChrom++;
 8014640:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014642:	3301      	adds	r3, #1
 8014644:	63fb      	str	r3, [r7, #60]	; 0x3c
          for(j=0; j < 8; j+=2)
 8014646:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014648:	3302      	adds	r3, #2
 801464a:	653b      	str	r3, [r7, #80]	; 0x50
 801464c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801464e:	2b07      	cmp	r3, #7
 8014650:	f67f af79 	bls.w	8014546 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x86>
          }
          pLum += 64;                      
 8014654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014656:	3340      	adds	r3, #64	; 0x40
 8014658:	63bb      	str	r3, [r7, #56]	; 0x38
        for(k= 0; k<2; k++)
 801465a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801465c:	3301      	adds	r3, #1
 801465e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014660:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014662:	2b01      	cmp	r3, #1
 8014664:	f67f af6c 	bls.w	8014540 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x80>
        }
        
        pLum = pLum - 128 + 8;
 8014668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801466a:	3b78      	subs	r3, #120	; 0x78
 801466c:	63bb      	str	r3, [r7, #56]	; 0x38
        
        refline += JPEG_ConvertorParams.ScaledWidth;          
 801466e:	4b0f      	ldr	r3, [pc, #60]	; (80146ac <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1ec>)
 8014670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014672:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014674:	4413      	add	r3, r2
 8014676:	647b      	str	r3, [r7, #68]	; 0x44
    for(i= 0; i <  8; i++)
 8014678:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801467a:	3301      	adds	r3, #1
 801467c:	657b      	str	r3, [r7, #84]	; 0x54
 801467e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014680:	2b07      	cmp	r3, #7
 8014682:	f67f af50 	bls.w	8014526 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x66>
      }
    }   
    
    pInBuffer +=  YCBCR_422_BLOCK_SIZE;
 8014686:	68fb      	ldr	r3, [r7, #12]
 8014688:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801468c:	60fb      	str	r3, [r7, #12]
  while(currentMCU < (numberMCU + BlockIndex))
 801468e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014690:	687b      	ldr	r3, [r7, #4]
 8014692:	4413      	add	r3, r2
 8014694:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014696:	429a      	cmp	r2, r3
 8014698:	f4ff af1f 	bcc.w	80144da <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1a>
  }
  return numberMCU;
 801469c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801469e:	4618      	mov	r0, r3
 80146a0:	375c      	adds	r7, #92	; 0x5c
 80146a2:	46bd      	mov	sp, r7
 80146a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146a8:	4770      	bx	lr
 80146aa:	bf00      	nop
 80146ac:	200233dc 	.word	0x200233dc
 80146b0:	2002381c 	.word	0x2002381c
 80146b4:	2002341c 	.word	0x2002341c
 80146b8:	20023c1c 	.word	0x20023c1c
 80146bc:	2002401c 	.word	0x2002401c
 80146c0:	0802aa38 	.word	0x0802aa38

080146c4 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr444_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
 80146c4:	b480      	push	{r7}
 80146c6:	b095      	sub	sp, #84	; 0x54
 80146c8:	af00      	add	r7, sp, #0
 80146ca:	60f8      	str	r0, [r7, #12]
 80146cc:	60b9      	str	r1, [r7, #8]
 80146ce:	607a      	str	r2, [r7, #4]
 80146d0:	603b      	str	r3, [r7, #0]
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;
  
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
 80146d2:	683b      	ldr	r3, [r7, #0]
 80146d4:	4a58      	ldr	r2, [pc, #352]	; (8014838 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x174>)
 80146d6:	fba2 2303 	umull	r2, r3, r2, r3
 80146da:	09db      	lsrs	r3, r3, #7
 80146dc:	633b      	str	r3, [r7, #48]	; 0x30
  currentMCU = BlockIndex;
 80146de:	687b      	ldr	r3, [r7, #4]
 80146e0:	647b      	str	r3, [r7, #68]	; 0x44
  

  while(currentMCU < (numberMCU + BlockIndex))
 80146e2:	e09a      	b.n	801481a <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x156>
  {

    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 80146e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80146e6:	00da      	lsls	r2, r3, #3
 80146e8:	4b54      	ldr	r3, [pc, #336]	; (801483c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x178>)
 80146ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80146ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80146f0:	00db      	lsls	r3, r3, #3
 80146f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 80146f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80146f6:	00db      	lsls	r3, r3, #3
 80146f8:	4a50      	ldr	r2, [pc, #320]	; (801483c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x178>)
 80146fa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80146fc:	fbb3 f1f2 	udiv	r1, r3, r2
 8014700:	fb01 f202 	mul.w	r2, r1, r2
 8014704:	1a9b      	subs	r3, r3, r2
 8014706:	62bb      	str	r3, [r7, #40]	; 0x28
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8014708:	4b4c      	ldr	r3, [pc, #304]	; (801483c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x178>)
 801470a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801470c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801470e:	fb03 f202 	mul.w	r2, r3, r2
 8014712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014714:	005b      	lsls	r3, r3, #1
 8014716:	4413      	add	r3, r2
 8014718:	643b      	str	r3, [r7, #64]	; 0x40

    currentMCU++;   
 801471a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801471c:	3301      	adds	r3, #1
 801471e:	647b      	str	r3, [r7, #68]	; 0x44
    
    pChrom = pInBuffer + 64; /* pChroma = pInBuffer + 4*64 */
 8014720:	68fb      	ldr	r3, [r7, #12]
 8014722:	3340      	adds	r3, #64	; 0x40
 8014724:	63bb      	str	r3, [r7, #56]	; 0x38
    
    pLum = pInBuffer;
 8014726:	68fb      	ldr	r3, [r7, #12]
 8014728:	637b      	str	r3, [r7, #52]	; 0x34
    
    for(i= 0; i <  8; i++)
 801472a:	2300      	movs	r3, #0
 801472c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801472e:	e06e      	b.n	801480e <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x14a>
    {
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8014730:	4b42      	ldr	r3, [pc, #264]	; (801483c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x178>)
 8014732:	691b      	ldr	r3, [r3, #16]
 8014734:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8014736:	429a      	cmp	r2, r3
 8014738:	d266      	bcs.n	8014808 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x144>
      {
        pOutAddr = pOutBuffer+ refline;
 801473a:	68ba      	ldr	r2, [r7, #8]
 801473c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801473e:	4413      	add	r3, r2
 8014740:	63fb      	str	r3, [r7, #60]	; 0x3c
        

          for(j=0; j < 8; j++)
 8014742:	2300      	movs	r3, #0
 8014744:	64bb      	str	r3, [r7, #72]	; 0x48
 8014746:	e054      	b.n	80147f2 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x12e>
          {           
            cbcomp = (int32_t)(*pChrom);
 8014748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801474a:	781b      	ldrb	r3, [r3, #0]
 801474c:	627b      	str	r3, [r7, #36]	; 0x24
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 801474e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014750:	009b      	lsls	r3, r3, #2
 8014752:	4a3b      	ldr	r2, [pc, #236]	; (8014840 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x17c>)
 8014754:	4413      	add	r3, r2
 8014756:	681b      	ldr	r3, [r3, #0]
 8014758:	623b      	str	r3, [r7, #32]
            
            crcomp = (int32_t)(*(pChrom + 64));
 801475a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801475c:	3340      	adds	r3, #64	; 0x40
 801475e:	781b      	ldrb	r3, [r3, #0]
 8014760:	61fb      	str	r3, [r7, #28]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
 8014762:	69fb      	ldr	r3, [r7, #28]
 8014764:	009b      	lsls	r3, r3, #2
 8014766:	4a37      	ldr	r2, [pc, #220]	; (8014844 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x180>)
 8014768:	4413      	add	r3, r2
 801476a:	681b      	ldr	r3, [r3, #0]
 801476c:	61bb      	str	r3, [r7, #24]
            
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
 801476e:	69fb      	ldr	r3, [r7, #28]
 8014770:	009b      	lsls	r3, r3, #2
 8014772:	4a35      	ldr	r2, [pc, #212]	; (8014848 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x184>)
 8014774:	4413      	add	r3, r2
 8014776:	681a      	ldr	r2, [r3, #0]
 8014778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801477a:	009b      	lsls	r3, r3, #2
 801477c:	4933      	ldr	r1, [pc, #204]	; (801484c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x188>)
 801477e:	440b      	add	r3, r1
 8014780:	681b      	ldr	r3, [r3, #0]
 8014782:	4413      	add	r3, r2
 8014784:	141b      	asrs	r3, r3, #16
 8014786:	617b      	str	r3, [r7, #20]
            pOutAddr[JPEG_GREEN_OFFSET/8] = CLAMP(ycomp + c_green);
            pOutAddr[JPEG_BLUE_OFFSET/8] = CLAMP(ycomp + c_blue);        

#elif (JPEG_RGB_FORMAT == JPEG_RGB565)  
            
            ycomp = (int32_t)(*(pLum +j));
 8014788:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801478a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801478c:	4413      	add	r3, r2
 801478e:	781b      	ldrb	r3, [r3, #0]
 8014790:	613b      	str	r3, [r7, #16]
          
            *(__IO uint16_t *)pOutAddr = 
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8014792:	693a      	ldr	r2, [r7, #16]
 8014794:	69bb      	ldr	r3, [r7, #24]
 8014796:	4413      	add	r3, r2
 8014798:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801479c:	4a2c      	ldr	r2, [pc, #176]	; (8014850 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x18c>)
 801479e:	5cd3      	ldrb	r3, [r2, r3]
 80147a0:	08db      	lsrs	r3, r3, #3
 80147a2:	b2db      	uxtb	r3, r3
 80147a4:	02db      	lsls	r3, r3, #11
 80147a6:	b21a      	sxth	r2, r3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 80147a8:	6939      	ldr	r1, [r7, #16]
 80147aa:	697b      	ldr	r3, [r7, #20]
 80147ac:	440b      	add	r3, r1
 80147ae:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80147b2:	4927      	ldr	r1, [pc, #156]	; (8014850 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x18c>)
 80147b4:	5ccb      	ldrb	r3, [r1, r3]
 80147b6:	089b      	lsrs	r3, r3, #2
 80147b8:	b2db      	uxtb	r3, r3
 80147ba:	015b      	lsls	r3, r3, #5
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 80147bc:	b21b      	sxth	r3, r3
 80147be:	4313      	orrs	r3, r2
 80147c0:	b21a      	sxth	r2, r3
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
 80147c2:	6939      	ldr	r1, [r7, #16]
 80147c4:	6a3b      	ldr	r3, [r7, #32]
 80147c6:	440b      	add	r3, r1
 80147c8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80147cc:	4920      	ldr	r1, [pc, #128]	; (8014850 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x18c>)
 80147ce:	5ccb      	ldrb	r3, [r1, r3]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 80147d0:	08db      	lsrs	r3, r3, #3
 80147d2:	b2db      	uxtb	r3, r3
 80147d4:	b21b      	sxth	r3, r3
 80147d6:	4313      	orrs	r3, r2
 80147d8:	b21b      	sxth	r3, r3
 80147da:	b29a      	uxth	r2, r3
            *(__IO uint16_t *)pOutAddr = 
 80147dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80147de:	801a      	strh	r2, [r3, #0]
            
#endif /* JPEG_RGB_FORMAT */          
          
            pOutAddr += JPEG_BYTES_PER_PIXEL;
 80147e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80147e2:	3302      	adds	r3, #2
 80147e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          
            pChrom++;
 80147e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80147e8:	3301      	adds	r3, #1
 80147ea:	63bb      	str	r3, [r7, #56]	; 0x38
          for(j=0; j < 8; j++)
 80147ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80147ee:	3301      	adds	r3, #1
 80147f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80147f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80147f4:	2b07      	cmp	r3, #7
 80147f6:	d9a7      	bls.n	8014748 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x84>
          }
          pLum += 8;
 80147f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80147fa:	3308      	adds	r3, #8
 80147fc:	637b      	str	r3, [r7, #52]	; 0x34

        refline += JPEG_ConvertorParams.ScaledWidth;          
 80147fe:	4b0f      	ldr	r3, [pc, #60]	; (801483c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x178>)
 8014800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014802:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8014804:	4413      	add	r3, r2
 8014806:	643b      	str	r3, [r7, #64]	; 0x40
    for(i= 0; i <  8; i++)
 8014808:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801480a:	3301      	adds	r3, #1
 801480c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801480e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014810:	2b07      	cmp	r3, #7
 8014812:	d98d      	bls.n	8014730 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x6c>
      }
    }   
    
    pInBuffer +=  YCBCR_444_BLOCK_SIZE;
 8014814:	68fb      	ldr	r3, [r7, #12]
 8014816:	33c0      	adds	r3, #192	; 0xc0
 8014818:	60fb      	str	r3, [r7, #12]
  while(currentMCU < (numberMCU + BlockIndex))
 801481a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801481c:	687b      	ldr	r3, [r7, #4]
 801481e:	4413      	add	r3, r2
 8014820:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014822:	429a      	cmp	r2, r3
 8014824:	f4ff af5e 	bcc.w	80146e4 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x20>
  }
  return numberMCU;
 8014828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 801482a:	4618      	mov	r0, r3
 801482c:	3754      	adds	r7, #84	; 0x54
 801482e:	46bd      	mov	sp, r7
 8014830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014834:	4770      	bx	lr
 8014836:	bf00      	nop
 8014838:	aaaaaaab 	.word	0xaaaaaaab
 801483c:	200233dc 	.word	0x200233dc
 8014840:	2002381c 	.word	0x2002381c
 8014844:	2002341c 	.word	0x2002341c
 8014848:	20023c1c 	.word	0x20023c1c
 801484c:	2002401c 	.word	0x2002401c
 8014850:	0802aa38 	.word	0x0802aa38

08014854 <JPEG_MCU_Gray_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_Gray_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
 8014854:	b480      	push	{r7}
 8014856:	b08f      	sub	sp, #60	; 0x3c
 8014858:	af00      	add	r7, sp, #0
 801485a:	60f8      	str	r0, [r7, #12]
 801485c:	60b9      	str	r1, [r7, #8]
 801485e:	607a      	str	r2, [r7, #4]
 8014860:	603b      	str	r3, [r7, #0]

  uint32_t i,j, ySample;
  uint8_t *pOutAddr,  *pLum;

  
  numberMCU = DataCount / GRAY_444_BLOCK_SIZE;
 8014862:	683b      	ldr	r3, [r7, #0]
 8014864:	099b      	lsrs	r3, r3, #6
 8014866:	61fb      	str	r3, [r7, #28]
  currentMCU = BlockIndex;
 8014868:	687b      	ldr	r3, [r7, #4]
 801486a:	637b      	str	r3, [r7, #52]	; 0x34
  
  while(currentMCU < (numberMCU + BlockIndex))
 801486c:	e05e      	b.n	801492c <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xd8>
  {
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 801486e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014870:	00da      	lsls	r2, r3, #3
 8014872:	4b35      	ldr	r3, [pc, #212]	; (8014948 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xf4>)
 8014874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014876:	fbb2 f3f3 	udiv	r3, r2, r3
 801487a:	00db      	lsls	r3, r3, #3
 801487c:	61bb      	str	r3, [r7, #24]
    
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 801487e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014880:	00db      	lsls	r3, r3, #3
 8014882:	4a31      	ldr	r2, [pc, #196]	; (8014948 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xf4>)
 8014884:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8014886:	fbb3 f1f2 	udiv	r1, r3, r2
 801488a:	fb01 f202 	mul.w	r2, r1, r2
 801488e:	1a9b      	subs	r3, r3, r2
 8014890:	617b      	str	r3, [r7, #20]
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8014892:	4b2d      	ldr	r3, [pc, #180]	; (8014948 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xf4>)
 8014894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014896:	69ba      	ldr	r2, [r7, #24]
 8014898:	fb03 f202 	mul.w	r2, r3, r2
 801489c:	697b      	ldr	r3, [r7, #20]
 801489e:	005b      	lsls	r3, r3, #1
 80148a0:	4413      	add	r3, r2
 80148a2:	633b      	str	r3, [r7, #48]	; 0x30
    
    currentMCU++;
 80148a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80148a6:	3301      	adds	r3, #1
 80148a8:	637b      	str	r3, [r7, #52]	; 0x34
  
    pLum = pInBuffer;
 80148aa:	68fb      	ldr	r3, [r7, #12]
 80148ac:	623b      	str	r3, [r7, #32]
    
    for(i= 0; i <  8; i++)
 80148ae:	2300      	movs	r3, #0
 80148b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80148b2:	e035      	b.n	8014920 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xcc>
    { 
      pOutAddr = pOutBuffer + refline;
 80148b4:	68ba      	ldr	r2, [r7, #8]
 80148b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80148b8:	4413      	add	r3, r2
 80148ba:	627b      	str	r3, [r7, #36]	; 0x24
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 80148bc:	4b22      	ldr	r3, [pc, #136]	; (8014948 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xf4>)
 80148be:	691b      	ldr	r3, [r3, #16]
 80148c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80148c2:	429a      	cmp	r2, r3
 80148c4:	d229      	bcs.n	801491a <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xc6>
      {  
        for(j=0; j < 8; j++)
 80148c6:	2300      	movs	r3, #0
 80148c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80148ca:	e01e      	b.n	801490a <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xb6>
        { 
          ySample =   (uint32_t)(*pLum);
 80148cc:	6a3b      	ldr	r3, [r7, #32]
 80148ce:	781b      	ldrb	r3, [r3, #0]
 80148d0:	613b      	str	r3, [r7, #16]
          pOutAddr[1] =  ySample;
          pOutAddr[2] =  ySample;     
 
#elif (JPEG_RGB_FORMAT == JPEG_RGB565)
            
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);     
 80148d2:	693b      	ldr	r3, [r7, #16]
 80148d4:	08db      	lsrs	r3, r3, #3
 80148d6:	b29b      	uxth	r3, r3
 80148d8:	02db      	lsls	r3, r3, #11
 80148da:	b29a      	uxth	r2, r3
 80148dc:	693b      	ldr	r3, [r7, #16]
 80148de:	089b      	lsrs	r3, r3, #2
 80148e0:	b29b      	uxth	r3, r3
 80148e2:	015b      	lsls	r3, r3, #5
 80148e4:	b29b      	uxth	r3, r3
 80148e6:	4313      	orrs	r3, r2
 80148e8:	b29a      	uxth	r2, r3
 80148ea:	693b      	ldr	r3, [r7, #16]
 80148ec:	08db      	lsrs	r3, r3, #3
 80148ee:	b29b      	uxth	r3, r3
 80148f0:	4313      	orrs	r3, r2
 80148f2:	b29a      	uxth	r2, r3
 80148f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148f6:	801a      	strh	r2, [r3, #0]
          
#endif /* JPEG_RGB_FORMAT */          
          
          pOutAddr += JPEG_BYTES_PER_PIXEL;
 80148f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148fa:	3302      	adds	r3, #2
 80148fc:	627b      	str	r3, [r7, #36]	; 0x24
          pLum++;
 80148fe:	6a3b      	ldr	r3, [r7, #32]
 8014900:	3301      	adds	r3, #1
 8014902:	623b      	str	r3, [r7, #32]
        for(j=0; j < 8; j++)
 8014904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014906:	3301      	adds	r3, #1
 8014908:	62bb      	str	r3, [r7, #40]	; 0x28
 801490a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801490c:	2b07      	cmp	r3, #7
 801490e:	d9dd      	bls.n	80148cc <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x78>
        }

        refline += JPEG_ConvertorParams.ScaledWidth;        
 8014910:	4b0d      	ldr	r3, [pc, #52]	; (8014948 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xf4>)
 8014912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014914:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014916:	4413      	add	r3, r2
 8014918:	633b      	str	r3, [r7, #48]	; 0x30
    for(i= 0; i <  8; i++)
 801491a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801491c:	3301      	adds	r3, #1
 801491e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014922:	2b07      	cmp	r3, #7
 8014924:	d9c6      	bls.n	80148b4 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x60>
      }
    }
    
    pInBuffer +=  GRAY_444_BLOCK_SIZE;    
 8014926:	68fb      	ldr	r3, [r7, #12]
 8014928:	3340      	adds	r3, #64	; 0x40
 801492a:	60fb      	str	r3, [r7, #12]
  while(currentMCU < (numberMCU + BlockIndex))
 801492c:	69fa      	ldr	r2, [r7, #28]
 801492e:	687b      	ldr	r3, [r7, #4]
 8014930:	4413      	add	r3, r2
 8014932:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014934:	429a      	cmp	r2, r3
 8014936:	d39a      	bcc.n	801486e <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x1a>
  }
  return numberMCU;
 8014938:	69fb      	ldr	r3, [r7, #28]
}
 801493a:	4618      	mov	r0, r3
 801493c:	373c      	adds	r7, #60	; 0x3c
 801493e:	46bd      	mov	sp, r7
 8014940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014944:	4770      	bx	lr
 8014946:	bf00      	nop
 8014948:	200233dc 	.word	0x200233dc

0801494c <JPEG_MCU_YCCK_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCCK_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer, 
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
 801494c:	b480      	push	{r7}
 801494e:	b093      	sub	sp, #76	; 0x4c
 8014950:	af00      	add	r7, sp, #0
 8014952:	60f8      	str	r0, [r7, #12]
 8014954:	60b9      	str	r1, [r7, #8]
 8014956:	607a      	str	r2, [r7, #4]
 8014958:	603b      	str	r3, [r7, #0]
  
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr, *pChrom;
  
  numberMCU = DataCount / CMYK_444_BLOCK_SIZE;
 801495a:	683b      	ldr	r3, [r7, #0]
 801495c:	0a1b      	lsrs	r3, r3, #8
 801495e:	62fb      	str	r3, [r7, #44]	; 0x2c
  currentMCU = BlockIndex;
 8014960:	687b      	ldr	r3, [r7, #4]
 8014962:	63fb      	str	r3, [r7, #60]	; 0x3c
  

  while(currentMCU < (numberMCU + BlockIndex))
 8014964:	e08b      	b.n	8014a7e <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x132>
  {

    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 8014966:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014968:	00da      	lsls	r2, r3, #3
 801496a:	4b4c      	ldr	r3, [pc, #304]	; (8014a9c <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x150>)
 801496c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801496e:	fbb2 f3f3 	udiv	r3, r2, r3
 8014972:	00db      	lsls	r3, r3, #3
 8014974:	62bb      	str	r3, [r7, #40]	; 0x28
    
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 8014976:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014978:	00db      	lsls	r3, r3, #3
 801497a:	4a48      	ldr	r2, [pc, #288]	; (8014a9c <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x150>)
 801497c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801497e:	fbb3 f1f2 	udiv	r1, r3, r2
 8014982:	fb01 f202 	mul.w	r2, r1, r2
 8014986:	1a9b      	subs	r3, r3, r2
 8014988:	627b      	str	r3, [r7, #36]	; 0x24
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 801498a:	4b44      	ldr	r3, [pc, #272]	; (8014a9c <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x150>)
 801498c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801498e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014990:	fb03 f202 	mul.w	r2, r3, r2
 8014994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014996:	005b      	lsls	r3, r3, #1
 8014998:	4413      	add	r3, r2
 801499a:	63bb      	str	r3, [r7, #56]	; 0x38

    currentMCU++;
 801499c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801499e:	3301      	adds	r3, #1
 80149a0:	63fb      	str	r3, [r7, #60]	; 0x3c
    
    pChrom = pInBuffer;
 80149a2:	68fb      	ldr	r3, [r7, #12]
 80149a4:	633b      	str	r3, [r7, #48]	; 0x30
    
    for(i= 0; i <  8; i++)
 80149a6:	2300      	movs	r3, #0
 80149a8:	647b      	str	r3, [r7, #68]	; 0x44
 80149aa:	e061      	b.n	8014a70 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x124>
    {
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 80149ac:	4b3b      	ldr	r3, [pc, #236]	; (8014a9c <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x150>)
 80149ae:	691b      	ldr	r3, [r3, #16]
 80149b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80149b2:	429a      	cmp	r2, r3
 80149b4:	d259      	bcs.n	8014a6a <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x11e>
      {
        pOutAddr = pOutBuffer+ refline;        
 80149b6:	68ba      	ldr	r2, [r7, #8]
 80149b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149ba:	4413      	add	r3, r2
 80149bc:	637b      	str	r3, [r7, #52]	; 0x34

          for(j=0; j < 8; j++)
 80149be:	2300      	movs	r3, #0
 80149c0:	643b      	str	r3, [r7, #64]	; 0x40
 80149c2:	e04a      	b.n	8014a5a <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x10e>
          {           
            color_k = (int32_t)(*(pChrom + 192));
 80149c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149c6:	33c0      	adds	r3, #192	; 0xc0
 80149c8:	781b      	ldrb	r3, [r3, #0]
 80149ca:	623b      	str	r3, [r7, #32]
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
 80149cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149ce:	781b      	ldrb	r3, [r3, #0]
 80149d0:	461a      	mov	r2, r3
 80149d2:	6a3b      	ldr	r3, [r7, #32]
 80149d4:	fb02 f303 	mul.w	r3, r2, r3
 80149d8:	4a31      	ldr	r2, [pc, #196]	; (8014aa0 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x154>)
 80149da:	fb82 1203 	smull	r1, r2, r2, r3
 80149de:	441a      	add	r2, r3
 80149e0:	11d2      	asrs	r2, r2, #7
 80149e2:	17db      	asrs	r3, r3, #31
 80149e4:	1ad3      	subs	r3, r2, r3
 80149e6:	61fb      	str	r3, [r7, #28]
            
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
 80149e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149ea:	3340      	adds	r3, #64	; 0x40
 80149ec:	781b      	ldrb	r3, [r3, #0]
 80149ee:	461a      	mov	r2, r3
 80149f0:	6a3b      	ldr	r3, [r7, #32]
 80149f2:	fb02 f303 	mul.w	r3, r2, r3
 80149f6:	4a2a      	ldr	r2, [pc, #168]	; (8014aa0 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x154>)
 80149f8:	fb82 1203 	smull	r1, r2, r2, r3
 80149fc:	441a      	add	r2, r3
 80149fe:	11d2      	asrs	r2, r2, #7
 8014a00:	17db      	asrs	r3, r3, #31
 8014a02:	1ad3      	subs	r3, r2, r3
 8014a04:	61bb      	str	r3, [r7, #24]
            
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
 8014a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a08:	3380      	adds	r3, #128	; 0x80
 8014a0a:	781b      	ldrb	r3, [r3, #0]
 8014a0c:	461a      	mov	r2, r3
 8014a0e:	6a3b      	ldr	r3, [r7, #32]
 8014a10:	fb02 f303 	mul.w	r3, r2, r3
 8014a14:	4a22      	ldr	r2, [pc, #136]	; (8014aa0 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x154>)
 8014a16:	fb82 1203 	smull	r1, r2, r2, r3
 8014a1a:	441a      	add	r2, r3
 8014a1c:	11d2      	asrs	r2, r2, #7
 8014a1e:	17db      	asrs	r3, r3, #31
 8014a20:	1ad3      	subs	r3, r2, r3
 8014a22:	617b      	str	r3, [r7, #20]
          pOutAddr[JPEG_BLUE_OFFSET/8]  =  c_blue;
          
#elif (JPEG_RGB_FORMAT == JPEG_RGB565)
            
          *(__IO uint16_t *)pOutAddr = 
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
 8014a24:	69fb      	ldr	r3, [r7, #28]
 8014a26:	10db      	asrs	r3, r3, #3
 8014a28:	02db      	lsls	r3, r3, #11
 8014a2a:	b21a      	sxth	r2, r3
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
 8014a2c:	69bb      	ldr	r3, [r7, #24]
 8014a2e:	109b      	asrs	r3, r3, #2
 8014a30:	015b      	lsls	r3, r3, #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
 8014a32:	b21b      	sxth	r3, r3
 8014a34:	4313      	orrs	r3, r2
 8014a36:	b21a      	sxth	r2, r3
            ((c_blue >> 3) << JPEG_BLUE_OFFSET);         
 8014a38:	697b      	ldr	r3, [r7, #20]
 8014a3a:	10db      	asrs	r3, r3, #3
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
 8014a3c:	b21b      	sxth	r3, r3
 8014a3e:	4313      	orrs	r3, r2
 8014a40:	b21b      	sxth	r3, r3
 8014a42:	b29a      	uxth	r2, r3
          *(__IO uint16_t *)pOutAddr = 
 8014a44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014a46:	801a      	strh	r2, [r3, #0]
            
#endif /* JPEG_RGB_FORMAT */          
          
            pOutAddr += JPEG_BYTES_PER_PIXEL;
 8014a48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014a4a:	3302      	adds	r3, #2
 8014a4c:	637b      	str	r3, [r7, #52]	; 0x34
          
            pChrom++;
 8014a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a50:	3301      	adds	r3, #1
 8014a52:	633b      	str	r3, [r7, #48]	; 0x30
          for(j=0; j < 8; j++)
 8014a54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014a56:	3301      	adds	r3, #1
 8014a58:	643b      	str	r3, [r7, #64]	; 0x40
 8014a5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014a5c:	2b07      	cmp	r3, #7
 8014a5e:	d9b1      	bls.n	80149c4 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x78>
          }

        refline += JPEG_ConvertorParams.ScaledWidth;          
 8014a60:	4b0e      	ldr	r3, [pc, #56]	; (8014a9c <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x150>)
 8014a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014a64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014a66:	4413      	add	r3, r2
 8014a68:	63bb      	str	r3, [r7, #56]	; 0x38
    for(i= 0; i <  8; i++)
 8014a6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014a6c:	3301      	adds	r3, #1
 8014a6e:	647b      	str	r3, [r7, #68]	; 0x44
 8014a70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014a72:	2b07      	cmp	r3, #7
 8014a74:	d99a      	bls.n	80149ac <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x60>
      }
    }   
    
    pInBuffer +=  CMYK_444_BLOCK_SIZE;
 8014a76:	68fb      	ldr	r3, [r7, #12]
 8014a78:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8014a7c:	60fb      	str	r3, [r7, #12]
  while(currentMCU < (numberMCU + BlockIndex))
 8014a7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014a80:	687b      	ldr	r3, [r7, #4]
 8014a82:	4413      	add	r3, r2
 8014a84:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014a86:	429a      	cmp	r2, r3
 8014a88:	f4ff af6d 	bcc.w	8014966 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x1a>
  }
  return numberMCU;
 8014a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8014a8e:	4618      	mov	r0, r3
 8014a90:	374c      	adds	r7, #76	; 0x4c
 8014a92:	46bd      	mov	sp, r7
 8014a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a98:	4770      	bx	lr
 8014a9a:	bf00      	nop
 8014a9c:	200233dc 	.word	0x200233dc
 8014aa0:	80808081 	.word	0x80808081

08014aa4 <JPEG_GetDecodeColorConvertFunc>:
  *                      depending of the jpeg image color space and chroma sampling info. 
  * @param ImageNbMCUs : pointer to uint32_t, used to retrive the total number of MCU blocks in the jpeg image.  
  * @retval HAL status : HAL_OK or HAL_ERROR.
  */
HAL_StatusTypeDef JPEG_GetDecodeColorConvertFunc(JPEG_ConfTypeDef *pJpegInfo, JPEG_YCbCrToRGB_Convert_Function *pFunction, uint32_t *ImageNbMCUs)
{
 8014aa4:	b480      	push	{r7}
 8014aa6:	b087      	sub	sp, #28
 8014aa8:	af00      	add	r7, sp, #0
 8014aaa:	60f8      	str	r0, [r7, #12]
 8014aac:	60b9      	str	r1, [r7, #8]
 8014aae:	607a      	str	r2, [r7, #4]
  uint32_t hMCU, vMCU;

  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
 8014ab0:	68fb      	ldr	r3, [r7, #12]
 8014ab2:	681b      	ldr	r3, [r3, #0]
 8014ab4:	4a7a      	ldr	r2, [pc, #488]	; (8014ca0 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8014ab6:	6013      	str	r3, [r2, #0]
  JPEG_ConvertorParams.ImageWidth = pJpegInfo->ImageWidth;
 8014ab8:	68fb      	ldr	r3, [r7, #12]
 8014aba:	68db      	ldr	r3, [r3, #12]
 8014abc:	4a78      	ldr	r2, [pc, #480]	; (8014ca0 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8014abe:	6093      	str	r3, [r2, #8]
  JPEG_ConvertorParams.ImageHeight = pJpegInfo->ImageHeight;
 8014ac0:	68fb      	ldr	r3, [r7, #12]
 8014ac2:	689b      	ldr	r3, [r3, #8]
 8014ac4:	4a76      	ldr	r2, [pc, #472]	; (8014ca0 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8014ac6:	60d3      	str	r3, [r2, #12]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
 8014ac8:	68fb      	ldr	r3, [r7, #12]
 8014aca:	68db      	ldr	r3, [r3, #12]
 8014acc:	68fa      	ldr	r2, [r7, #12]
 8014ace:	6892      	ldr	r2, [r2, #8]
 8014ad0:	fb02 f303 	mul.w	r3, r2, r3
 8014ad4:	005b      	lsls	r3, r3, #1
 8014ad6:	4a72      	ldr	r2, [pc, #456]	; (8014ca0 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8014ad8:	6113      	str	r3, [r2, #16]
  
  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;  
 8014ada:	68fb      	ldr	r3, [r7, #12]
 8014adc:	685b      	ldr	r3, [r3, #4]
 8014ade:	4a70      	ldr	r2, [pc, #448]	; (8014ca0 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8014ae0:	6053      	str	r3, [r2, #4]
  if(JPEG_ConvertorParams.ColorSpace == JPEG_YCBCR_COLORSPACE)
 8014ae2:	4b6f      	ldr	r3, [pc, #444]	; (8014ca0 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8014ae4:	681b      	ldr	r3, [r3, #0]
 8014ae6:	2b10      	cmp	r3, #16
 8014ae8:	d155      	bne.n	8014b96 <JPEG_GetDecodeColorConvertFunc+0xf2>
  {
    if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_420_SUBSAMPLING)
 8014aea:	4b6d      	ldr	r3, [pc, #436]	; (8014ca0 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8014aec:	685b      	ldr	r3, [r3, #4]
 8014aee:	2b01      	cmp	r3, #1
 8014af0:	d119      	bne.n	8014b26 <JPEG_GetDecodeColorConvertFunc+0x82>
    {
      *pFunction = JPEG_MCU_YCbCr420_ARGB_ConvertBlocks;
 8014af2:	68bb      	ldr	r3, [r7, #8]
 8014af4:	4a6b      	ldr	r2, [pc, #428]	; (8014ca4 <JPEG_GetDecodeColorConvertFunc+0x200>)
 8014af6:	601a      	str	r2, [r3, #0]

      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;
 8014af8:	4b69      	ldr	r3, [pc, #420]	; (8014ca0 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8014afa:	689b      	ldr	r3, [r3, #8]
 8014afc:	f003 030f 	and.w	r3, r3, #15
 8014b00:	4a67      	ldr	r2, [pc, #412]	; (8014ca0 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8014b02:	6153      	str	r3, [r2, #20]
      
      if(JPEG_ConvertorParams.LineOffset != 0)
 8014b04:	4b66      	ldr	r3, [pc, #408]	; (8014ca0 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8014b06:	695b      	ldr	r3, [r3, #20]
 8014b08:	2b00      	cmp	r3, #0
 8014b0a:	d005      	beq.n	8014b18 <JPEG_GetDecodeColorConvertFunc+0x74>
      {
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;  
 8014b0c:	4b64      	ldr	r3, [pc, #400]	; (8014ca0 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8014b0e:	695b      	ldr	r3, [r3, #20]
 8014b10:	f1c3 0310 	rsb	r3, r3, #16
 8014b14:	4a62      	ldr	r2, [pc, #392]	; (8014ca0 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8014b16:	6153      	str	r3, [r2, #20]
      }
      JPEG_ConvertorParams.H_factor = 16;
 8014b18:	4b61      	ldr	r3, [pc, #388]	; (8014ca0 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8014b1a:	2210      	movs	r2, #16
 8014b1c:	61da      	str	r2, [r3, #28]
      JPEG_ConvertorParams.V_factor  = 16;
 8014b1e:	4b60      	ldr	r3, [pc, #384]	; (8014ca0 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8014b20:	2210      	movs	r2, #16
 8014b22:	621a      	str	r2, [r3, #32]
 8014b24:	e075      	b.n	8014c12 <JPEG_GetDecodeColorConvertFunc+0x16e>
    }
    else if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_422_SUBSAMPLING)
 8014b26:	4b5e      	ldr	r3, [pc, #376]	; (8014ca0 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8014b28:	685b      	ldr	r3, [r3, #4]
 8014b2a:	2b02      	cmp	r3, #2
 8014b2c:	d119      	bne.n	8014b62 <JPEG_GetDecodeColorConvertFunc+0xbe>
    {
      *pFunction =  JPEG_MCU_YCbCr422_ARGB_ConvertBlocks;
 8014b2e:	68bb      	ldr	r3, [r7, #8]
 8014b30:	4a5d      	ldr	r2, [pc, #372]	; (8014ca8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8014b32:	601a      	str	r2, [r3, #0]

      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;
 8014b34:	4b5a      	ldr	r3, [pc, #360]	; (8014ca0 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8014b36:	689b      	ldr	r3, [r3, #8]
 8014b38:	f003 030f 	and.w	r3, r3, #15
 8014b3c:	4a58      	ldr	r2, [pc, #352]	; (8014ca0 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8014b3e:	6153      	str	r3, [r2, #20]
      
      if(JPEG_ConvertorParams.LineOffset != 0)
 8014b40:	4b57      	ldr	r3, [pc, #348]	; (8014ca0 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8014b42:	695b      	ldr	r3, [r3, #20]
 8014b44:	2b00      	cmp	r3, #0
 8014b46:	d005      	beq.n	8014b54 <JPEG_GetDecodeColorConvertFunc+0xb0>
      {
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;  
 8014b48:	4b55      	ldr	r3, [pc, #340]	; (8014ca0 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8014b4a:	695b      	ldr	r3, [r3, #20]
 8014b4c:	f1c3 0310 	rsb	r3, r3, #16
 8014b50:	4a53      	ldr	r2, [pc, #332]	; (8014ca0 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8014b52:	6153      	str	r3, [r2, #20]
      }
      JPEG_ConvertorParams.H_factor = 16;
 8014b54:	4b52      	ldr	r3, [pc, #328]	; (8014ca0 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8014b56:	2210      	movs	r2, #16
 8014b58:	61da      	str	r2, [r3, #28]
      JPEG_ConvertorParams.V_factor  = 8;
 8014b5a:	4b51      	ldr	r3, [pc, #324]	; (8014ca0 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8014b5c:	2208      	movs	r2, #8
 8014b5e:	621a      	str	r2, [r3, #32]
 8014b60:	e057      	b.n	8014c12 <JPEG_GetDecodeColorConvertFunc+0x16e>
    }
    else /*4:4:4*/
    {
      *pFunction =  JPEG_MCU_YCbCr444_ARGB_ConvertBlocks;
 8014b62:	68bb      	ldr	r3, [r7, #8]
 8014b64:	4a51      	ldr	r2, [pc, #324]	; (8014cac <JPEG_GetDecodeColorConvertFunc+0x208>)
 8014b66:	601a      	str	r2, [r3, #0]

      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
 8014b68:	4b4d      	ldr	r3, [pc, #308]	; (8014ca0 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8014b6a:	689b      	ldr	r3, [r3, #8]
 8014b6c:	f003 0307 	and.w	r3, r3, #7
 8014b70:	4a4b      	ldr	r2, [pc, #300]	; (8014ca0 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8014b72:	6153      	str	r3, [r2, #20]
      
      if(JPEG_ConvertorParams.LineOffset != 0)
 8014b74:	4b4a      	ldr	r3, [pc, #296]	; (8014ca0 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8014b76:	695b      	ldr	r3, [r3, #20]
 8014b78:	2b00      	cmp	r3, #0
 8014b7a:	d005      	beq.n	8014b88 <JPEG_GetDecodeColorConvertFunc+0xe4>
      {
        JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;  
 8014b7c:	4b48      	ldr	r3, [pc, #288]	; (8014ca0 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8014b7e:	695b      	ldr	r3, [r3, #20]
 8014b80:	f1c3 0308 	rsb	r3, r3, #8
 8014b84:	4a46      	ldr	r2, [pc, #280]	; (8014ca0 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8014b86:	6153      	str	r3, [r2, #20]
      }
      JPEG_ConvertorParams.H_factor = 8;
 8014b88:	4b45      	ldr	r3, [pc, #276]	; (8014ca0 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8014b8a:	2208      	movs	r2, #8
 8014b8c:	61da      	str	r2, [r3, #28]
      JPEG_ConvertorParams.V_factor  = 8;
 8014b8e:	4b44      	ldr	r3, [pc, #272]	; (8014ca0 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8014b90:	2208      	movs	r2, #8
 8014b92:	621a      	str	r2, [r3, #32]
 8014b94:	e03d      	b.n	8014c12 <JPEG_GetDecodeColorConvertFunc+0x16e>
    }   
  }
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_GRAYSCALE_COLORSPACE)
 8014b96:	4b42      	ldr	r3, [pc, #264]	; (8014ca0 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8014b98:	681b      	ldr	r3, [r3, #0]
 8014b9a:	2b00      	cmp	r3, #0
 8014b9c:	d119      	bne.n	8014bd2 <JPEG_GetDecodeColorConvertFunc+0x12e>
  {
    *pFunction =  JPEG_MCU_Gray_ARGB_ConvertBlocks;
 8014b9e:	68bb      	ldr	r3, [r7, #8]
 8014ba0:	4a43      	ldr	r2, [pc, #268]	; (8014cb0 <JPEG_GetDecodeColorConvertFunc+0x20c>)
 8014ba2:	601a      	str	r2, [r3, #0]

    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
 8014ba4:	4b3e      	ldr	r3, [pc, #248]	; (8014ca0 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8014ba6:	689b      	ldr	r3, [r3, #8]
 8014ba8:	f003 0307 	and.w	r3, r3, #7
 8014bac:	4a3c      	ldr	r2, [pc, #240]	; (8014ca0 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8014bae:	6153      	str	r3, [r2, #20]
      
    if(JPEG_ConvertorParams.LineOffset != 0)
 8014bb0:	4b3b      	ldr	r3, [pc, #236]	; (8014ca0 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8014bb2:	695b      	ldr	r3, [r3, #20]
 8014bb4:	2b00      	cmp	r3, #0
 8014bb6:	d005      	beq.n	8014bc4 <JPEG_GetDecodeColorConvertFunc+0x120>
    {
      JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;  
 8014bb8:	4b39      	ldr	r3, [pc, #228]	; (8014ca0 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8014bba:	695b      	ldr	r3, [r3, #20]
 8014bbc:	f1c3 0308 	rsb	r3, r3, #8
 8014bc0:	4a37      	ldr	r2, [pc, #220]	; (8014ca0 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8014bc2:	6153      	str	r3, [r2, #20]
    }
    JPEG_ConvertorParams.H_factor = 8;
 8014bc4:	4b36      	ldr	r3, [pc, #216]	; (8014ca0 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8014bc6:	2208      	movs	r2, #8
 8014bc8:	61da      	str	r2, [r3, #28]
    JPEG_ConvertorParams.V_factor  = 8;
 8014bca:	4b35      	ldr	r3, [pc, #212]	; (8014ca0 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8014bcc:	2208      	movs	r2, #8
 8014bce:	621a      	str	r2, [r3, #32]
 8014bd0:	e01f      	b.n	8014c12 <JPEG_GetDecodeColorConvertFunc+0x16e>
  }
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_CMYK_COLORSPACE)
 8014bd2:	4b33      	ldr	r3, [pc, #204]	; (8014ca0 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8014bd4:	681b      	ldr	r3, [r3, #0]
 8014bd6:	2b30      	cmp	r3, #48	; 0x30
 8014bd8:	d119      	bne.n	8014c0e <JPEG_GetDecodeColorConvertFunc+0x16a>
  {
    *pFunction =  JPEG_MCU_YCCK_ARGB_ConvertBlocks;
 8014bda:	68bb      	ldr	r3, [r7, #8]
 8014bdc:	4a35      	ldr	r2, [pc, #212]	; (8014cb4 <JPEG_GetDecodeColorConvertFunc+0x210>)
 8014bde:	601a      	str	r2, [r3, #0]

    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
 8014be0:	4b2f      	ldr	r3, [pc, #188]	; (8014ca0 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8014be2:	689b      	ldr	r3, [r3, #8]
 8014be4:	f003 0307 	and.w	r3, r3, #7
 8014be8:	4a2d      	ldr	r2, [pc, #180]	; (8014ca0 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8014bea:	6153      	str	r3, [r2, #20]
      
    if(JPEG_ConvertorParams.LineOffset != 0)
 8014bec:	4b2c      	ldr	r3, [pc, #176]	; (8014ca0 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8014bee:	695b      	ldr	r3, [r3, #20]
 8014bf0:	2b00      	cmp	r3, #0
 8014bf2:	d005      	beq.n	8014c00 <JPEG_GetDecodeColorConvertFunc+0x15c>
    {
      JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;  
 8014bf4:	4b2a      	ldr	r3, [pc, #168]	; (8014ca0 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8014bf6:	695b      	ldr	r3, [r3, #20]
 8014bf8:	f1c3 0308 	rsb	r3, r3, #8
 8014bfc:	4a28      	ldr	r2, [pc, #160]	; (8014ca0 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8014bfe:	6153      	str	r3, [r2, #20]
    }
    JPEG_ConvertorParams.H_factor = 8;
 8014c00:	4b27      	ldr	r3, [pc, #156]	; (8014ca0 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8014c02:	2208      	movs	r2, #8
 8014c04:	61da      	str	r2, [r3, #28]
    JPEG_ConvertorParams.V_factor  = 8;
 8014c06:	4b26      	ldr	r3, [pc, #152]	; (8014ca0 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8014c08:	2208      	movs	r2, #8
 8014c0a:	621a      	str	r2, [r3, #32]
 8014c0c:	e001      	b.n	8014c12 <JPEG_GetDecodeColorConvertFunc+0x16e>
  } 
  else
  {  
    return HAL_ERROR; /* Color space Not supported*/
 8014c0e:	2301      	movs	r3, #1
 8014c10:	e040      	b.n	8014c94 <JPEG_GetDecodeColorConvertFunc+0x1f0>
  }
 
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
 8014c12:	4b23      	ldr	r3, [pc, #140]	; (8014ca0 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8014c14:	689a      	ldr	r2, [r3, #8]
 8014c16:	4b22      	ldr	r3, [pc, #136]	; (8014ca0 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8014c18:	695b      	ldr	r3, [r3, #20]
 8014c1a:	4413      	add	r3, r2
 8014c1c:	4a20      	ldr	r2, [pc, #128]	; (8014ca0 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8014c1e:	6253      	str	r3, [r2, #36]	; 0x24
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
 8014c20:	4b1f      	ldr	r3, [pc, #124]	; (8014ca0 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8014c22:	689b      	ldr	r3, [r3, #8]
 8014c24:	005b      	lsls	r3, r3, #1
 8014c26:	4a1e      	ldr	r2, [pc, #120]	; (8014ca0 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8014c28:	6293      	str	r3, [r2, #40]	; 0x28
  
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
 8014c2a:	4b1d      	ldr	r3, [pc, #116]	; (8014ca0 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8014c2c:	689a      	ldr	r2, [r3, #8]
 8014c2e:	4b1c      	ldr	r3, [pc, #112]	; (8014ca0 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8014c30:	69db      	ldr	r3, [r3, #28]
 8014c32:	fbb2 f3f3 	udiv	r3, r2, r3
 8014c36:	617b      	str	r3, [r7, #20]
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
 8014c38:	4b19      	ldr	r3, [pc, #100]	; (8014ca0 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8014c3a:	689b      	ldr	r3, [r3, #8]
 8014c3c:	4a18      	ldr	r2, [pc, #96]	; (8014ca0 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8014c3e:	69d2      	ldr	r2, [r2, #28]
 8014c40:	fbb3 f1f2 	udiv	r1, r3, r2
 8014c44:	fb01 f202 	mul.w	r2, r1, r2
 8014c48:	1a9b      	subs	r3, r3, r2
 8014c4a:	2b00      	cmp	r3, #0
 8014c4c:	d002      	beq.n	8014c54 <JPEG_GetDecodeColorConvertFunc+0x1b0>
  {
    hMCU++; /*+1 for horizenatl incomplete MCU */                
 8014c4e:	697b      	ldr	r3, [r7, #20]
 8014c50:	3301      	adds	r3, #1
 8014c52:	617b      	str	r3, [r7, #20]
  }

  vMCU = (JPEG_ConvertorParams.ImageHeight / JPEG_ConvertorParams.V_factor);
 8014c54:	4b12      	ldr	r3, [pc, #72]	; (8014ca0 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8014c56:	68da      	ldr	r2, [r3, #12]
 8014c58:	4b11      	ldr	r3, [pc, #68]	; (8014ca0 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8014c5a:	6a1b      	ldr	r3, [r3, #32]
 8014c5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8014c60:	613b      	str	r3, [r7, #16]
  if((JPEG_ConvertorParams.ImageHeight % JPEG_ConvertorParams.V_factor) != 0)
 8014c62:	4b0f      	ldr	r3, [pc, #60]	; (8014ca0 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8014c64:	68db      	ldr	r3, [r3, #12]
 8014c66:	4a0e      	ldr	r2, [pc, #56]	; (8014ca0 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8014c68:	6a12      	ldr	r2, [r2, #32]
 8014c6a:	fbb3 f1f2 	udiv	r1, r3, r2
 8014c6e:	fb01 f202 	mul.w	r2, r1, r2
 8014c72:	1a9b      	subs	r3, r3, r2
 8014c74:	2b00      	cmp	r3, #0
 8014c76:	d002      	beq.n	8014c7e <JPEG_GetDecodeColorConvertFunc+0x1da>
  {
    vMCU++; /*+1 for vertical incomplete MCU */                
 8014c78:	693b      	ldr	r3, [r7, #16]
 8014c7a:	3301      	adds	r3, #1
 8014c7c:	613b      	str	r3, [r7, #16]
  }
  JPEG_ConvertorParams.MCU_Total_Nb = (hMCU * vMCU);
 8014c7e:	697b      	ldr	r3, [r7, #20]
 8014c80:	693a      	ldr	r2, [r7, #16]
 8014c82:	fb02 f303 	mul.w	r3, r2, r3
 8014c86:	4a06      	ldr	r2, [pc, #24]	; (8014ca0 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8014c88:	62d3      	str	r3, [r2, #44]	; 0x2c
  *ImageNbMCUs = JPEG_ConvertorParams.MCU_Total_Nb;
 8014c8a:	4b05      	ldr	r3, [pc, #20]	; (8014ca0 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8014c8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014c8e:	687b      	ldr	r3, [r7, #4]
 8014c90:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8014c92:	2300      	movs	r3, #0
}
 8014c94:	4618      	mov	r0, r3
 8014c96:	371c      	adds	r7, #28
 8014c98:	46bd      	mov	sp, r7
 8014c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c9e:	4770      	bx	lr
 8014ca0:	200233dc 	.word	0x200233dc
 8014ca4:	080141d9 	.word	0x080141d9
 8014ca8:	080144c1 	.word	0x080144c1
 8014cac:	080146c5 	.word	0x080146c5
 8014cb0:	08014855 	.word	0x08014855
 8014cb4:	0801494d 	.word	0x0801494d

08014cb8 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8014cb8:	8880      	ldrh	r0, [r0, #4]
 8014cba:	4770      	bx	lr

08014cbc <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8014cbc:	b570      	push	{r4, r5, r6, lr}
 8014cbe:	6803      	ldr	r3, [r0, #0]
 8014cc0:	460c      	mov	r4, r1
 8014cc2:	2100      	movs	r1, #0
 8014cc4:	4605      	mov	r5, r0
 8014cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014cc8:	4798      	blx	r3
 8014cca:	4606      	mov	r6, r0
 8014ccc:	682b      	ldr	r3, [r5, #0]
 8014cce:	4628      	mov	r0, r5
 8014cd0:	1ba4      	subs	r4, r4, r6
 8014cd2:	6a1b      	ldr	r3, [r3, #32]
 8014cd4:	b2a4      	uxth	r4, r4
 8014cd6:	4798      	blx	r3
 8014cd8:	fbb4 f0f0 	udiv	r0, r4, r0
 8014cdc:	bd70      	pop	{r4, r5, r6, pc}

08014cde <_ZN8touchgfx17AbstractPartition5clearEv>:
 8014cde:	2300      	movs	r3, #0
 8014ce0:	8083      	strh	r3, [r0, #4]
 8014ce2:	4770      	bx	lr

08014ce4 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8014ce4:	b510      	push	{r4, lr}
 8014ce6:	6803      	ldr	r3, [r0, #0]
 8014ce8:	4604      	mov	r4, r0
 8014cea:	8881      	ldrh	r1, [r0, #4]
 8014cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014cee:	4798      	blx	r3
 8014cf0:	88a3      	ldrh	r3, [r4, #4]
 8014cf2:	3301      	adds	r3, #1
 8014cf4:	80a3      	strh	r3, [r4, #4]
 8014cf6:	bd10      	pop	{r4, pc}

08014cf8 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8014cf8:	6803      	ldr	r3, [r0, #0]
 8014cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014cfc:	4718      	bx	r3

08014cfe <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8014cfe:	4770      	bx	lr

08014d00 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8014d00:	4a02      	ldr	r2, [pc, #8]	; (8014d0c <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 8014d02:	6002      	str	r2, [r0, #0]
 8014d04:	2200      	movs	r2, #0
 8014d06:	8082      	strh	r2, [r0, #4]
 8014d08:	4770      	bx	lr
 8014d0a:	bf00      	nop
 8014d0c:	0802ad40 	.word	0x0802ad40

08014d10 <_ZN8touchgfx9Container13getFirstChildEv>:
 8014d10:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8014d12:	4770      	bx	lr

08014d14 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8014d14:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8014d16:	2000      	movs	r0, #0
 8014d18:	b12b      	cbz	r3, 8014d26 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8014d1a:	b920      	cbnz	r0, 8014d26 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8014d1c:	1a5a      	subs	r2, r3, r1
 8014d1e:	699b      	ldr	r3, [r3, #24]
 8014d20:	4250      	negs	r0, r2
 8014d22:	4150      	adcs	r0, r2
 8014d24:	e7f8      	b.n	8014d18 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 8014d26:	4770      	bx	lr

08014d28 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8014d28:	2300      	movs	r3, #0
 8014d2a:	6148      	str	r0, [r1, #20]
 8014d2c:	618b      	str	r3, [r1, #24]
 8014d2e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8014d30:	b913      	cbnz	r3, 8014d38 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 8014d32:	6281      	str	r1, [r0, #40]	; 0x28
 8014d34:	4770      	bx	lr
 8014d36:	4613      	mov	r3, r2
 8014d38:	699a      	ldr	r2, [r3, #24]
 8014d3a:	2a00      	cmp	r2, #0
 8014d3c:	d1fb      	bne.n	8014d36 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 8014d3e:	6199      	str	r1, [r3, #24]
 8014d40:	4770      	bx	lr

08014d42 <_ZN8touchgfx9Container9removeAllEv>:
 8014d42:	2200      	movs	r2, #0
 8014d44:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8014d46:	b123      	cbz	r3, 8014d52 <_ZN8touchgfx9Container9removeAllEv+0x10>
 8014d48:	6999      	ldr	r1, [r3, #24]
 8014d4a:	6281      	str	r1, [r0, #40]	; 0x28
 8014d4c:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8014d50:	e7f8      	b.n	8014d44 <_ZN8touchgfx9Container9removeAllEv+0x2>
 8014d52:	4770      	bx	lr

08014d54 <_ZN8touchgfx9Container6unlinkEv>:
 8014d54:	2300      	movs	r3, #0
 8014d56:	6283      	str	r3, [r0, #40]	; 0x28
 8014d58:	4770      	bx	lr

08014d5a <_ZNK8touchgfx9Container12getSolidRectEv>:
 8014d5a:	2200      	movs	r2, #0
 8014d5c:	8002      	strh	r2, [r0, #0]
 8014d5e:	8042      	strh	r2, [r0, #2]
 8014d60:	8082      	strh	r2, [r0, #4]
 8014d62:	80c2      	strh	r2, [r0, #6]
 8014d64:	4770      	bx	lr

08014d66 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8014d66:	b570      	push	{r4, r5, r6, lr}
 8014d68:	460d      	mov	r5, r1
 8014d6a:	4616      	mov	r6, r2
 8014d6c:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8014d6e:	b13c      	cbz	r4, 8014d80 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8014d70:	6823      	ldr	r3, [r4, #0]
 8014d72:	4620      	mov	r0, r4
 8014d74:	4632      	mov	r2, r6
 8014d76:	4629      	mov	r1, r5
 8014d78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014d7a:	4798      	blx	r3
 8014d7c:	69a4      	ldr	r4, [r4, #24]
 8014d7e:	e7f6      	b.n	8014d6e <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8014d80:	bd70      	pop	{r4, r5, r6, pc}

08014d82 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8014d82:	b538      	push	{r3, r4, r5, lr}
 8014d84:	460d      	mov	r5, r1
 8014d86:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8014d88:	b134      	cbz	r4, 8014d98 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8014d8a:	682b      	ldr	r3, [r5, #0]
 8014d8c:	4621      	mov	r1, r4
 8014d8e:	4628      	mov	r0, r5
 8014d90:	689b      	ldr	r3, [r3, #8]
 8014d92:	4798      	blx	r3
 8014d94:	69a4      	ldr	r4, [r4, #24]
 8014d96:	e7f7      	b.n	8014d88 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8014d98:	bd38      	pop	{r3, r4, r5, pc}

08014d9a <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8014d9a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8014d9c:	b19b      	cbz	r3, 8014dc6 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8014d9e:	428b      	cmp	r3, r1
 8014da0:	d109      	bne.n	8014db6 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8014da2:	699a      	ldr	r2, [r3, #24]
 8014da4:	2100      	movs	r1, #0
 8014da6:	6159      	str	r1, [r3, #20]
 8014da8:	6282      	str	r2, [r0, #40]	; 0x28
 8014daa:	b902      	cbnz	r2, 8014dae <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8014dac:	4770      	bx	lr
 8014dae:	6199      	str	r1, [r3, #24]
 8014db0:	4770      	bx	lr
 8014db2:	4613      	mov	r3, r2
 8014db4:	b13a      	cbz	r2, 8014dc6 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8014db6:	699a      	ldr	r2, [r3, #24]
 8014db8:	428a      	cmp	r2, r1
 8014dba:	d1fa      	bne.n	8014db2 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8014dbc:	698a      	ldr	r2, [r1, #24]
 8014dbe:	619a      	str	r2, [r3, #24]
 8014dc0:	2300      	movs	r3, #0
 8014dc2:	e9c1 3305 	strd	r3, r3, [r1, #20]
 8014dc6:	4770      	bx	lr

08014dc8 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8014dc8:	b410      	push	{r4}
 8014dca:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8014dcc:	4604      	mov	r4, r0
 8014dce:	b92b      	cbnz	r3, 8014ddc <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8014dd0:	6803      	ldr	r3, [r0, #0]
 8014dd2:	4611      	mov	r1, r2
 8014dd4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014dd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8014dda:	4718      	bx	r3
 8014ddc:	b941      	cbnz	r1, 8014df0 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8014dde:	6193      	str	r3, [r2, #24]
 8014de0:	6282      	str	r2, [r0, #40]	; 0x28
 8014de2:	6154      	str	r4, [r2, #20]
 8014de4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014de8:	4770      	bx	lr
 8014dea:	4603      	mov	r3, r0
 8014dec:	2800      	cmp	r0, #0
 8014dee:	d0f9      	beq.n	8014de4 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8014df0:	4299      	cmp	r1, r3
 8014df2:	6998      	ldr	r0, [r3, #24]
 8014df4:	d1f9      	bne.n	8014dea <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 8014df6:	6190      	str	r0, [r2, #24]
 8014df8:	618a      	str	r2, [r1, #24]
 8014dfa:	e7f2      	b.n	8014de2 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

08014dfc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8014dfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014e00:	461f      	mov	r7, r3
 8014e02:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8014e06:	460d      	mov	r5, r1
 8014e08:	4616      	mov	r6, r2
 8014e0a:	b103      	cbz	r3, 8014e0e <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8014e0c:	6038      	str	r0, [r7, #0]
 8014e0e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8014e10:	b314      	cbz	r4, 8014e58 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8014e12:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8014e16:	b1eb      	cbz	r3, 8014e54 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8014e18:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8014e1c:	428d      	cmp	r5, r1
 8014e1e:	db19      	blt.n	8014e54 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8014e20:	b289      	uxth	r1, r1
 8014e22:	8923      	ldrh	r3, [r4, #8]
 8014e24:	440b      	add	r3, r1
 8014e26:	b21b      	sxth	r3, r3
 8014e28:	429d      	cmp	r5, r3
 8014e2a:	da13      	bge.n	8014e54 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8014e2c:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8014e30:	4296      	cmp	r6, r2
 8014e32:	db0f      	blt.n	8014e54 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8014e34:	b292      	uxth	r2, r2
 8014e36:	8963      	ldrh	r3, [r4, #10]
 8014e38:	4413      	add	r3, r2
 8014e3a:	b21b      	sxth	r3, r3
 8014e3c:	429e      	cmp	r6, r3
 8014e3e:	da09      	bge.n	8014e54 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8014e40:	6823      	ldr	r3, [r4, #0]
 8014e42:	1ab2      	subs	r2, r6, r2
 8014e44:	1a69      	subs	r1, r5, r1
 8014e46:	4620      	mov	r0, r4
 8014e48:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
 8014e4c:	b212      	sxth	r2, r2
 8014e4e:	463b      	mov	r3, r7
 8014e50:	b209      	sxth	r1, r1
 8014e52:	47c0      	blx	r8
 8014e54:	69a4      	ldr	r4, [r4, #24]
 8014e56:	e7db      	b.n	8014e10 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8014e58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014e5c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 8014e5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e60:	4c6d      	ldr	r4, [pc, #436]	; (8015018 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 8014e62:	b0a1      	sub	sp, #132	; 0x84
 8014e64:	4606      	mov	r6, r0
 8014e66:	6824      	ldr	r4, [r4, #0]
 8014e68:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 8014e6a:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 8014e6e:	2400      	movs	r4, #0
 8014e70:	9303      	str	r3, [sp, #12]
 8014e72:	802c      	strh	r4, [r5, #0]
 8014e74:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 8014e76:	802c      	strh	r4, [r5, #0]
 8014e78:	601c      	str	r4, [r3, #0]
 8014e7a:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8014e7e:	f7ff ffbd 	bl	8014dfc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8014e82:	f1b9 0f03 	cmp.w	r9, #3
 8014e86:	f340 80c1 	ble.w	801500c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 8014e8a:	4631      	mov	r1, r6
 8014e8c:	a80c      	add	r0, sp, #48	; 0x30
 8014e8e:	f004 fad9 	bl	8019444 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8014e92:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8014e96:	9306      	str	r3, [sp, #24]
 8014e98:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8014e9c:	9307      	str	r3, [sp, #28]
 8014e9e:	9b03      	ldr	r3, [sp, #12]
 8014ea0:	f8d3 a000 	ldr.w	sl, [r3]
 8014ea4:	f1ba 0f00 	cmp.w	sl, #0
 8014ea8:	f000 80b3 	beq.w	8015012 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 8014eac:	4651      	mov	r1, sl
 8014eae:	a810      	add	r0, sp, #64	; 0x40
 8014eb0:	f004 fac8 	bl	8019444 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8014eb4:	2002      	movs	r0, #2
 8014eb6:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 8014eba:	9b01      	ldr	r3, [sp, #4]
 8014ebc:	9a06      	ldr	r2, [sp, #24]
 8014ebe:	fb91 f1f0 	sdiv	r1, r1, r0
 8014ec2:	189d      	adds	r5, r3, r2
 8014ec4:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 8014ec8:	9a07      	ldr	r2, [sp, #28]
 8014eca:	4419      	add	r1, r3
 8014ecc:	9b02      	ldr	r3, [sp, #8]
 8014ece:	4413      	add	r3, r2
 8014ed0:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 8014ed4:	1a6d      	subs	r5, r5, r1
 8014ed6:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 8014eda:	fb92 f2f0 	sdiv	r2, r2, r0
 8014ede:	440a      	add	r2, r1
 8014ee0:	1a9b      	subs	r3, r3, r2
 8014ee2:	435b      	muls	r3, r3
 8014ee4:	fb05 3505 	mla	r5, r5, r5, r3
 8014ee8:	4f4c      	ldr	r7, [pc, #304]	; (801501c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 8014eea:	ac10      	add	r4, sp, #64	; 0x40
 8014eec:	f1b9 0f0c 	cmp.w	r9, #12
 8014ef0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8014ef2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014ef4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8014ef6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014ef8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8014efa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014efc:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8014f00:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8014f04:	f04f 0303 	mov.w	r3, #3
 8014f08:	bfd8      	it	le
 8014f0a:	f109 32ff 	addle.w	r2, r9, #4294967295
 8014f0e:	f04f 0400 	mov.w	r4, #0
 8014f12:	f8cd 9000 	str.w	r9, [sp]
 8014f16:	bfcc      	ite	gt
 8014f18:	4698      	movgt	r8, r3
 8014f1a:	fb92 f8f3 	sdivle	r8, r2, r3
 8014f1e:	1c63      	adds	r3, r4, #1
 8014f20:	aa10      	add	r2, sp, #64	; 0x40
 8014f22:	f004 0401 	and.w	r4, r4, #1
 8014f26:	f04f 0b00 	mov.w	fp, #0
 8014f2a:	9308      	str	r3, [sp, #32]
 8014f2c:	9b00      	ldr	r3, [sp, #0]
 8014f2e:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 8014f32:	fb93 f3f8 	sdiv	r3, r3, r8
 8014f36:	3404      	adds	r4, #4
 8014f38:	b29b      	uxth	r3, r3
 8014f3a:	9304      	str	r3, [sp, #16]
 8014f3c:	9a04      	ldr	r2, [sp, #16]
 8014f3e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8014f42:	fb13 f302 	smulbb	r3, r3, r2
 8014f46:	9a01      	ldr	r2, [sp, #4]
 8014f48:	b29b      	uxth	r3, r3
 8014f4a:	1899      	adds	r1, r3, r2
 8014f4c:	9305      	str	r3, [sp, #20]
 8014f4e:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8014f52:	b209      	sxth	r1, r1
 8014f54:	4299      	cmp	r1, r3
 8014f56:	db4d      	blt.n	8014ff4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8014f58:	8932      	ldrh	r2, [r6, #8]
 8014f5a:	4413      	add	r3, r2
 8014f5c:	b21b      	sxth	r3, r3
 8014f5e:	4299      	cmp	r1, r3
 8014f60:	da48      	bge.n	8014ff4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8014f62:	9b04      	ldr	r3, [sp, #16]
 8014f64:	6827      	ldr	r7, [r4, #0]
 8014f66:	fb17 f703 	smulbb	r7, r7, r3
 8014f6a:	9b02      	ldr	r3, [sp, #8]
 8014f6c:	b2bf      	uxth	r7, r7
 8014f6e:	18fa      	adds	r2, r7, r3
 8014f70:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8014f74:	b212      	sxth	r2, r2
 8014f76:	429a      	cmp	r2, r3
 8014f78:	db3c      	blt.n	8014ff4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8014f7a:	8970      	ldrh	r0, [r6, #10]
 8014f7c:	4403      	add	r3, r0
 8014f7e:	b21b      	sxth	r3, r3
 8014f80:	429a      	cmp	r2, r3
 8014f82:	da37      	bge.n	8014ff4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8014f84:	2300      	movs	r3, #0
 8014f86:	4630      	mov	r0, r6
 8014f88:	930b      	str	r3, [sp, #44]	; 0x2c
 8014f8a:	ab0b      	add	r3, sp, #44	; 0x2c
 8014f8c:	f7ff ff36 	bl	8014dfc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8014f90:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014f92:	b37a      	cbz	r2, 8014ff4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8014f94:	4552      	cmp	r2, sl
 8014f96:	d02d      	beq.n	8014ff4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8014f98:	4611      	mov	r1, r2
 8014f9a:	a80e      	add	r0, sp, #56	; 0x38
 8014f9c:	9209      	str	r2, [sp, #36]	; 0x24
 8014f9e:	f004 fa51 	bl	8019444 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8014fa2:	f04f 0e02 	mov.w	lr, #2
 8014fa6:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 8014faa:	9a06      	ldr	r2, [sp, #24]
 8014fac:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 8014fb0:	9b01      	ldr	r3, [sp, #4]
 8014fb2:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 8014fb6:	4413      	add	r3, r2
 8014fb8:	9a07      	ldr	r2, [sp, #28]
 8014fba:	fb91 f1fe 	sdiv	r1, r1, lr
 8014fbe:	fb9c fcfe 	sdiv	ip, ip, lr
 8014fc2:	4401      	add	r1, r0
 8014fc4:	1a58      	subs	r0, r3, r1
 8014fc6:	9b02      	ldr	r3, [sp, #8]
 8014fc8:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 8014fcc:	4413      	add	r3, r2
 8014fce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014fd0:	448c      	add	ip, r1
 8014fd2:	eba3 030c 	sub.w	r3, r3, ip
 8014fd6:	435b      	muls	r3, r3
 8014fd8:	fb00 3300 	mla	r3, r0, r0, r3
 8014fdc:	42ab      	cmp	r3, r5
 8014fde:	d208      	bcs.n	8014ff2 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 8014fe0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014fe2:	461d      	mov	r5, r3
 8014fe4:	9803      	ldr	r0, [sp, #12]
 8014fe6:	6001      	str	r1, [r0, #0]
 8014fe8:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8014fea:	9805      	ldr	r0, [sp, #20]
 8014fec:	8008      	strh	r0, [r1, #0]
 8014fee:	992b      	ldr	r1, [sp, #172]	; 0xac
 8014ff0:	800f      	strh	r7, [r1, #0]
 8014ff2:	4692      	mov	sl, r2
 8014ff4:	f10b 0b01 	add.w	fp, fp, #1
 8014ff8:	3408      	adds	r4, #8
 8014ffa:	f1bb 0f04 	cmp.w	fp, #4
 8014ffe:	d19d      	bne.n	8014f3c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 8015000:	9b00      	ldr	r3, [sp, #0]
 8015002:	9c08      	ldr	r4, [sp, #32]
 8015004:	444b      	add	r3, r9
 8015006:	4544      	cmp	r4, r8
 8015008:	9300      	str	r3, [sp, #0]
 801500a:	d188      	bne.n	8014f1e <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 801500c:	b021      	add	sp, #132	; 0x84
 801500e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015012:	f04f 35ff 	mov.w	r5, #4294967295
 8015016:	e767      	b.n	8014ee8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 8015018:	20024428 	.word	0x20024428
 801501c:	080299e8 	.word	0x080299e8

08015020 <_ZN8touchgfx4RectaNERKS0_>:
 8015020:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015024:	f9b1 7000 	ldrsh.w	r7, [r1]
 8015028:	888c      	ldrh	r4, [r1, #4]
 801502a:	f9b0 9000 	ldrsh.w	r9, [r0]
 801502e:	443c      	add	r4, r7
 8015030:	b2a4      	uxth	r4, r4
 8015032:	fa0f f884 	sxth.w	r8, r4
 8015036:	45c1      	cmp	r9, r8
 8015038:	da2f      	bge.n	801509a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801503a:	8882      	ldrh	r2, [r0, #4]
 801503c:	444a      	add	r2, r9
 801503e:	b292      	uxth	r2, r2
 8015040:	fa0f fe82 	sxth.w	lr, r2
 8015044:	4577      	cmp	r7, lr
 8015046:	da28      	bge.n	801509a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8015048:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 801504c:	88cb      	ldrh	r3, [r1, #6]
 801504e:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8015052:	442b      	add	r3, r5
 8015054:	b21b      	sxth	r3, r3
 8015056:	429e      	cmp	r6, r3
 8015058:	da1f      	bge.n	801509a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801505a:	88c3      	ldrh	r3, [r0, #6]
 801505c:	4433      	add	r3, r6
 801505e:	b29b      	uxth	r3, r3
 8015060:	fa0f fc83 	sxth.w	ip, r3
 8015064:	4565      	cmp	r5, ip
 8015066:	da18      	bge.n	801509a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8015068:	454f      	cmp	r7, r9
 801506a:	bfb8      	it	lt
 801506c:	464f      	movlt	r7, r9
 801506e:	42b5      	cmp	r5, r6
 8015070:	bfb8      	it	lt
 8015072:	4635      	movlt	r5, r6
 8015074:	45f0      	cmp	r8, lr
 8015076:	bfd8      	it	le
 8015078:	4622      	movle	r2, r4
 801507a:	1bd2      	subs	r2, r2, r7
 801507c:	8082      	strh	r2, [r0, #4]
 801507e:	884a      	ldrh	r2, [r1, #2]
 8015080:	88c9      	ldrh	r1, [r1, #6]
 8015082:	8007      	strh	r7, [r0, #0]
 8015084:	440a      	add	r2, r1
 8015086:	8045      	strh	r5, [r0, #2]
 8015088:	b292      	uxth	r2, r2
 801508a:	b211      	sxth	r1, r2
 801508c:	458c      	cmp	ip, r1
 801508e:	bfa8      	it	ge
 8015090:	4613      	movge	r3, r2
 8015092:	1b5b      	subs	r3, r3, r5
 8015094:	80c3      	strh	r3, [r0, #6]
 8015096:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801509a:	2300      	movs	r3, #0
 801509c:	8003      	strh	r3, [r0, #0]
 801509e:	8043      	strh	r3, [r0, #2]
 80150a0:	8083      	strh	r3, [r0, #4]
 80150a2:	80c3      	strh	r3, [r0, #6]
 80150a4:	e7f7      	b.n	8015096 <_ZN8touchgfx4RectaNERKS0_+0x76>

080150a6 <_ZNK8touchgfx4Rect7isEmptyEv>:
 80150a6:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80150aa:	2b00      	cmp	r3, #0
 80150ac:	dd06      	ble.n	80150bc <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 80150ae:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 80150b2:	2800      	cmp	r0, #0
 80150b4:	bfcc      	ite	gt
 80150b6:	2000      	movgt	r0, #0
 80150b8:	2001      	movle	r0, #1
 80150ba:	4770      	bx	lr
 80150bc:	2001      	movs	r0, #1
 80150be:	4770      	bx	lr

080150c0 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 80150c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80150c4:	2300      	movs	r3, #0
 80150c6:	4604      	mov	r4, r0
 80150c8:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 80150ca:	8003      	strh	r3, [r0, #0]
 80150cc:	8043      	strh	r3, [r0, #2]
 80150ce:	8083      	strh	r3, [r0, #4]
 80150d0:	80c3      	strh	r3, [r0, #6]
 80150d2:	2d00      	cmp	r5, #0
 80150d4:	d040      	beq.n	8015158 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 80150d6:	1d28      	adds	r0, r5, #4
 80150d8:	f7ff ffe5 	bl	80150a6 <_ZNK8touchgfx4Rect7isEmptyEv>
 80150dc:	b988      	cbnz	r0, 8015102 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 80150de:	4620      	mov	r0, r4
 80150e0:	f7ff ffe1 	bl	80150a6 <_ZNK8touchgfx4Rect7isEmptyEv>
 80150e4:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 80150e8:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 80150ec:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 80150f0:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 80150f4:	b138      	cbz	r0, 8015106 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 80150f6:	8022      	strh	r2, [r4, #0]
 80150f8:	8063      	strh	r3, [r4, #2]
 80150fa:	f8a4 e004 	strh.w	lr, [r4, #4]
 80150fe:	f8a4 c006 	strh.w	ip, [r4, #6]
 8015102:	69ad      	ldr	r5, [r5, #24]
 8015104:	e7e5      	b.n	80150d2 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 8015106:	f9b4 0000 	ldrsh.w	r0, [r4]
 801510a:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801510e:	4290      	cmp	r0, r2
 8015110:	4607      	mov	r7, r0
 8015112:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 8015116:	460e      	mov	r6, r1
 8015118:	bfa8      	it	ge
 801511a:	4617      	movge	r7, r2
 801511c:	4299      	cmp	r1, r3
 801511e:	4472      	add	r2, lr
 8015120:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8015124:	bfa8      	it	ge
 8015126:	461e      	movge	r6, r3
 8015128:	4440      	add	r0, r8
 801512a:	4471      	add	r1, lr
 801512c:	4463      	add	r3, ip
 801512e:	b200      	sxth	r0, r0
 8015130:	8027      	strh	r7, [r4, #0]
 8015132:	b212      	sxth	r2, r2
 8015134:	8066      	strh	r6, [r4, #2]
 8015136:	b209      	sxth	r1, r1
 8015138:	b21b      	sxth	r3, r3
 801513a:	4290      	cmp	r0, r2
 801513c:	bfac      	ite	ge
 801513e:	ebc7 0200 	rsbge	r2, r7, r0
 8015142:	ebc7 0202 	rsblt	r2, r7, r2
 8015146:	4299      	cmp	r1, r3
 8015148:	bfac      	ite	ge
 801514a:	ebc6 0301 	rsbge	r3, r6, r1
 801514e:	ebc6 0303 	rsblt	r3, r6, r3
 8015152:	80a2      	strh	r2, [r4, #4]
 8015154:	80e3      	strh	r3, [r4, #6]
 8015156:	e7d4      	b.n	8015102 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8015158:	4620      	mov	r0, r4
 801515a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801515e <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 801515e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8015162:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8015166:	b383      	cbz	r3, 80151ca <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8015168:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801516a:	b374      	cbz	r4, 80151ca <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 801516c:	f9b1 5000 	ldrsh.w	r5, [r1]
 8015170:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8015174:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8015178:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 801517c:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8015180:	b303      	cbz	r3, 80151c4 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8015182:	4668      	mov	r0, sp
 8015184:	1d21      	adds	r1, r4, #4
 8015186:	f8ad 5000 	strh.w	r5, [sp]
 801518a:	f8ad 6002 	strh.w	r6, [sp, #2]
 801518e:	f8ad 7004 	strh.w	r7, [sp, #4]
 8015192:	f8ad 8006 	strh.w	r8, [sp, #6]
 8015196:	f7ff ff43 	bl	8015020 <_ZN8touchgfx4RectaNERKS0_>
 801519a:	4668      	mov	r0, sp
 801519c:	f7ff ff83 	bl	80150a6 <_ZNK8touchgfx4Rect7isEmptyEv>
 80151a0:	b980      	cbnz	r0, 80151c4 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 80151a2:	f8bd 3000 	ldrh.w	r3, [sp]
 80151a6:	4669      	mov	r1, sp
 80151a8:	88a2      	ldrh	r2, [r4, #4]
 80151aa:	4620      	mov	r0, r4
 80151ac:	1a9b      	subs	r3, r3, r2
 80151ae:	88e2      	ldrh	r2, [r4, #6]
 80151b0:	f8ad 3000 	strh.w	r3, [sp]
 80151b4:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80151b8:	1a9b      	subs	r3, r3, r2
 80151ba:	f8ad 3002 	strh.w	r3, [sp, #2]
 80151be:	6823      	ldr	r3, [r4, #0]
 80151c0:	689b      	ldr	r3, [r3, #8]
 80151c2:	4798      	blx	r3
 80151c4:	69a4      	ldr	r4, [r4, #24]
 80151c6:	2c00      	cmp	r4, #0
 80151c8:	d1d8      	bne.n	801517c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 80151ca:	b002      	add	sp, #8
 80151cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080151d0 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 80151d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80151d2:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80151d6:	460d      	mov	r5, r1
 80151d8:	4616      	mov	r6, r2
 80151da:	b323      	cbz	r3, 8015226 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 80151dc:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80151de:	b314      	cbz	r4, 8015226 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 80151e0:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80151e4:	b1eb      	cbz	r3, 8015222 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 80151e6:	6828      	ldr	r0, [r5, #0]
 80151e8:	466b      	mov	r3, sp
 80151ea:	6869      	ldr	r1, [r5, #4]
 80151ec:	c303      	stmia	r3!, {r0, r1}
 80151ee:	4668      	mov	r0, sp
 80151f0:	1d21      	adds	r1, r4, #4
 80151f2:	f7ff ff15 	bl	8015020 <_ZN8touchgfx4RectaNERKS0_>
 80151f6:	4668      	mov	r0, sp
 80151f8:	f7ff ff55 	bl	80150a6 <_ZNK8touchgfx4Rect7isEmptyEv>
 80151fc:	b988      	cbnz	r0, 8015222 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 80151fe:	f8bd 3000 	ldrh.w	r3, [sp]
 8015202:	4669      	mov	r1, sp
 8015204:	88a2      	ldrh	r2, [r4, #4]
 8015206:	4620      	mov	r0, r4
 8015208:	1a9b      	subs	r3, r3, r2
 801520a:	88e2      	ldrh	r2, [r4, #6]
 801520c:	f8ad 3000 	strh.w	r3, [sp]
 8015210:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8015214:	1a9b      	subs	r3, r3, r2
 8015216:	4632      	mov	r2, r6
 8015218:	f8ad 3002 	strh.w	r3, [sp, #2]
 801521c:	6823      	ldr	r3, [r4, #0]
 801521e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015220:	4798      	blx	r3
 8015222:	69a4      	ldr	r4, [r4, #24]
 8015224:	e7db      	b.n	80151de <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 8015226:	b002      	add	sp, #8
 8015228:	bd70      	pop	{r4, r5, r6, pc}

0801522a <_ZN8touchgfx3HAL15InvalidateCacheEv>:
 801522a:	4770      	bx	lr

0801522c <_ZN8touchgfx3HAL10FlushCacheEv>:
 801522c:	4770      	bx	lr

0801522e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 801522e:	6803      	ldr	r3, [r0, #0]
 8015230:	b513      	push	{r0, r1, r4, lr}
 8015232:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
 8015236:	2300      	movs	r3, #0
 8015238:	e9cd 3300 	strd	r3, r3, [sp]
 801523c:	466b      	mov	r3, sp
 801523e:	47a0      	blx	r4
 8015240:	b002      	add	sp, #8
 8015242:	bd10      	pop	{r4, pc}

08015244 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8015244:	2301      	movs	r3, #1
 8015246:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 801524a:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 801524e:	4770      	bx	lr

08015250 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8015250:	2301      	movs	r3, #1
 8015252:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8015256:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 801525a:	4770      	bx	lr

0801525c <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 801525c:	6843      	ldr	r3, [r0, #4]
 801525e:	2201      	movs	r2, #1
 8015260:	725a      	strb	r2, [r3, #9]
 8015262:	6840      	ldr	r0, [r0, #4]
 8015264:	6803      	ldr	r3, [r0, #0]
 8015266:	691b      	ldr	r3, [r3, #16]
 8015268:	4718      	bx	r3

0801526a <_ZN8touchgfx3HAL8flushDMAEv>:
 801526a:	6840      	ldr	r0, [r0, #4]
 801526c:	6803      	ldr	r3, [r0, #0]
 801526e:	689b      	ldr	r3, [r3, #8]
 8015270:	4718      	bx	r3

08015272 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 8015272:	b530      	push	{r4, r5, lr}
 8015274:	b08b      	sub	sp, #44	; 0x2c
 8015276:	6804      	ldr	r4, [r0, #0]
 8015278:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 801527c:	9509      	str	r5, [sp, #36]	; 0x24
 801527e:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 8015282:	9508      	str	r5, [sp, #32]
 8015284:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 8015288:	9507      	str	r5, [sp, #28]
 801528a:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 801528e:	9506      	str	r5, [sp, #24]
 8015290:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 8015294:	9505      	str	r5, [sp, #20]
 8015296:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 801529a:	9504      	str	r5, [sp, #16]
 801529c:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 80152a0:	9503      	str	r5, [sp, #12]
 80152a2:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 80152a6:	9502      	str	r5, [sp, #8]
 80152a8:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 80152ac:	e9cd 3500 	strd	r3, r5, [sp]
 80152b0:	4613      	mov	r3, r2
 80152b2:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 80152b4:	2200      	movs	r2, #0
 80152b6:	47a0      	blx	r4
 80152b8:	b00b      	add	sp, #44	; 0x2c
 80152ba:	bd30      	pop	{r4, r5, pc}

080152bc <_ZN8touchgfx3HAL10beginFrameEv>:
 80152bc:	4b04      	ldr	r3, [pc, #16]	; (80152d0 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 80152be:	781b      	ldrb	r3, [r3, #0]
 80152c0:	b123      	cbz	r3, 80152cc <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 80152c2:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 80152c6:	f080 0001 	eor.w	r0, r0, #1
 80152ca:	4770      	bx	lr
 80152cc:	2001      	movs	r0, #1
 80152ce:	4770      	bx	lr
 80152d0:	20024426 	.word	0x20024426

080152d4 <_ZN8touchgfx3HAL8endFrameEv>:
 80152d4:	b510      	push	{r4, lr}
 80152d6:	4604      	mov	r4, r0
 80152d8:	6840      	ldr	r0, [r0, #4]
 80152da:	6803      	ldr	r3, [r0, #0]
 80152dc:	689b      	ldr	r3, [r3, #8]
 80152de:	4798      	blx	r3
 80152e0:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 80152e4:	b113      	cbz	r3, 80152ec <_ZN8touchgfx3HAL8endFrameEv+0x18>
 80152e6:	2301      	movs	r3, #1
 80152e8:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 80152ec:	bd10      	pop	{r4, pc}

080152ee <_ZN8touchgfx3HAL10initializeEv>:
 80152ee:	b510      	push	{r4, lr}
 80152f0:	4604      	mov	r4, r0
 80152f2:	f7fb ff55 	bl	80111a0 <_ZN8touchgfx10OSWrappers10initializeEv>
 80152f6:	f7fa fbdf 	bl	800fab8 <_ZN8touchgfx4GPIO4initEv>
 80152fa:	6860      	ldr	r0, [r4, #4]
 80152fc:	6803      	ldr	r3, [r0, #0]
 80152fe:	68db      	ldr	r3, [r3, #12]
 8015300:	4798      	blx	r3
 8015302:	68e0      	ldr	r0, [r4, #12]
 8015304:	6803      	ldr	r3, [r0, #0]
 8015306:	689b      	ldr	r3, [r3, #8]
 8015308:	4798      	blx	r3
 801530a:	6823      	ldr	r3, [r4, #0]
 801530c:	4620      	mov	r0, r4
 801530e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015310:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015314:	4718      	bx	r3

08015316 <_ZN8touchgfx3HAL9taskEntryEv>:
 8015316:	b508      	push	{r3, lr}
 8015318:	6803      	ldr	r3, [r0, #0]
 801531a:	4604      	mov	r4, r0
 801531c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015320:	4798      	blx	r3
 8015322:	6823      	ldr	r3, [r4, #0]
 8015324:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015326:	4620      	mov	r0, r4
 8015328:	4798      	blx	r3
 801532a:	f7fb ff9f 	bl	801126c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 801532e:	6823      	ldr	r3, [r4, #0]
 8015330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015332:	e7f8      	b.n	8015326 <_ZN8touchgfx3HAL9taskEntryEv+0x10>

08015334 <_ZN8touchgfx3HAL4tickEv>:
 8015334:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8015336:	6803      	ldr	r3, [r0, #0]
 8015338:	4604      	mov	r4, r0
 801533a:	4d5b      	ldr	r5, [pc, #364]	; (80154a8 <_ZN8touchgfx3HAL4tickEv+0x174>)
 801533c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8015340:	4798      	blx	r3
 8015342:	2800      	cmp	r0, #0
 8015344:	f000 8095 	beq.w	8015472 <_ZN8touchgfx3HAL4tickEv+0x13e>
 8015348:	2001      	movs	r0, #1
 801534a:	2600      	movs	r6, #0
 801534c:	f7fa fbbc 	bl	800fac8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8015350:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 8015354:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 8015358:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 801535c:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 8015360:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 8015364:	b133      	cbz	r3, 8015374 <_ZN8touchgfx3HAL4tickEv+0x40>
 8015366:	6823      	ldr	r3, [r4, #0]
 8015368:	4620      	mov	r0, r4
 801536a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 801536e:	4798      	blx	r3
 8015370:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 8015374:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8015378:	2601      	movs	r6, #1
 801537a:	6862      	ldr	r2, [r4, #4]
 801537c:	f083 0301 	eor.w	r3, r3, #1
 8015380:	702e      	strb	r6, [r5, #0]
 8015382:	7253      	strb	r3, [r2, #9]
 8015384:	f002 ff7e 	bl	8018284 <_ZN8touchgfx11Application11getInstanceEv>
 8015388:	6803      	ldr	r3, [r0, #0]
 801538a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801538c:	4798      	blx	r3
 801538e:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8015392:	b90b      	cbnz	r3, 8015398 <_ZN8touchgfx3HAL4tickEv+0x64>
 8015394:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 8015398:	f002 ff74 	bl	8018284 <_ZN8touchgfx11Application11getInstanceEv>
 801539c:	6803      	ldr	r3, [r0, #0]
 801539e:	695b      	ldr	r3, [r3, #20]
 80153a0:	4798      	blx	r3
 80153a2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80153a4:	6803      	ldr	r3, [r0, #0]
 80153a6:	691b      	ldr	r3, [r3, #16]
 80153a8:	4798      	blx	r3
 80153aa:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 80153ae:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 80153b2:	3b01      	subs	r3, #1
 80153b4:	b2db      	uxtb	r3, r3
 80153b6:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 80153ba:	b10a      	cbz	r2, 80153c0 <_ZN8touchgfx3HAL4tickEv+0x8c>
 80153bc:	2b00      	cmp	r3, #0
 80153be:	d1eb      	bne.n	8015398 <_ZN8touchgfx3HAL4tickEv+0x64>
 80153c0:	4a3a      	ldr	r2, [pc, #232]	; (80154ac <_ZN8touchgfx3HAL4tickEv+0x178>)
 80153c2:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 80153c6:	7813      	ldrb	r3, [r2, #0]
 80153c8:	3301      	adds	r3, #1
 80153ca:	b25b      	sxtb	r3, r3
 80153cc:	4299      	cmp	r1, r3
 80153ce:	7013      	strb	r3, [r2, #0]
 80153d0:	dc10      	bgt.n	80153f4 <_ZN8touchgfx3HAL4tickEv+0xc0>
 80153d2:	2300      	movs	r3, #0
 80153d4:	68e0      	ldr	r0, [r4, #12]
 80153d6:	a902      	add	r1, sp, #8
 80153d8:	7013      	strb	r3, [r2, #0]
 80153da:	aa03      	add	r2, sp, #12
 80153dc:	6803      	ldr	r3, [r0, #0]
 80153de:	68db      	ldr	r3, [r3, #12]
 80153e0:	4798      	blx	r3
 80153e2:	6823      	ldr	r3, [r4, #0]
 80153e4:	2800      	cmp	r0, #0
 80153e6:	d050      	beq.n	801548a <_ZN8touchgfx3HAL4tickEv+0x156>
 80153e8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80153ec:	4620      	mov	r0, r4
 80153ee:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80153f2:	4798      	blx	r3
 80153f4:	2300      	movs	r3, #0
 80153f6:	6960      	ldr	r0, [r4, #20]
 80153f8:	f88d 3007 	strb.w	r3, [sp, #7]
 80153fc:	b158      	cbz	r0, 8015416 <_ZN8touchgfx3HAL4tickEv+0xe2>
 80153fe:	6803      	ldr	r3, [r0, #0]
 8015400:	f10d 0107 	add.w	r1, sp, #7
 8015404:	68db      	ldr	r3, [r3, #12]
 8015406:	4798      	blx	r3
 8015408:	b128      	cbz	r0, 8015416 <_ZN8touchgfx3HAL4tickEv+0xe2>
 801540a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801540c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8015410:	6803      	ldr	r3, [r0, #0]
 8015412:	68db      	ldr	r3, [r3, #12]
 8015414:	4798      	blx	r3
 8015416:	f104 001c 	add.w	r0, r4, #28
 801541a:	f011 f8ff 	bl	802661c <_ZN8touchgfx8Gestures4tickEv>
 801541e:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 8015422:	b30b      	cbz	r3, 8015468 <_ZN8touchgfx3HAL4tickEv+0x134>
 8015424:	6920      	ldr	r0, [r4, #16]
 8015426:	6803      	ldr	r3, [r0, #0]
 8015428:	691b      	ldr	r3, [r3, #16]
 801542a:	4798      	blx	r3
 801542c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801542e:	4606      	mov	r6, r0
 8015430:	b903      	cbnz	r3, 8015434 <_ZN8touchgfx3HAL4tickEv+0x100>
 8015432:	6720      	str	r0, [r4, #112]	; 0x70
 8015434:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8015436:	4a1e      	ldr	r2, [pc, #120]	; (80154b0 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8015438:	1af3      	subs	r3, r6, r3
 801543a:	4293      	cmp	r3, r2
 801543c:	d914      	bls.n	8015468 <_ZN8touchgfx3HAL4tickEv+0x134>
 801543e:	6920      	ldr	r0, [r4, #16]
 8015440:	6803      	ldr	r3, [r0, #0]
 8015442:	699b      	ldr	r3, [r3, #24]
 8015444:	4798      	blx	r3
 8015446:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8015448:	2264      	movs	r2, #100	; 0x64
 801544a:	1af3      	subs	r3, r6, r3
 801544c:	fbb3 f3f2 	udiv	r3, r3, r2
 8015450:	fbb0 f0f3 	udiv	r0, r0, r3
 8015454:	2800      	cmp	r0, #0
 8015456:	dc1d      	bgt.n	8015494 <_ZN8touchgfx3HAL4tickEv+0x160>
 8015458:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 801545c:	6920      	ldr	r0, [r4, #16]
 801545e:	2100      	movs	r1, #0
 8015460:	6803      	ldr	r3, [r0, #0]
 8015462:	69db      	ldr	r3, [r3, #28]
 8015464:	4798      	blx	r3
 8015466:	6726      	str	r6, [r4, #112]	; 0x70
 8015468:	f002 ff0c 	bl	8018284 <_ZN8touchgfx11Application11getInstanceEv>
 801546c:	6803      	ldr	r3, [r0, #0]
 801546e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015470:	4798      	blx	r3
 8015472:	6823      	ldr	r3, [r4, #0]
 8015474:	4620      	mov	r0, r4
 8015476:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801547a:	4798      	blx	r3
 801547c:	2001      	movs	r0, #1
 801547e:	f7fa fb59 	bl	800fb34 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8015482:	2300      	movs	r3, #0
 8015484:	702b      	strb	r3, [r5, #0]
 8015486:	b004      	add	sp, #16
 8015488:	bd70      	pop	{r4, r5, r6, pc}
 801548a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 801548e:	4620      	mov	r0, r4
 8015490:	4798      	blx	r3
 8015492:	e7af      	b.n	80153f4 <_ZN8touchgfx3HAL4tickEv+0xc0>
 8015494:	2863      	cmp	r0, #99	; 0x63
 8015496:	bfcb      	itete	gt
 8015498:	2300      	movgt	r3, #0
 801549a:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 801549e:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 80154a2:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 80154a6:	e7d9      	b.n	801545c <_ZN8touchgfx3HAL4tickEv+0x128>
 80154a8:	2002442c 	.word	0x2002442c
 80154ac:	2002442d 	.word	0x2002442d
 80154b0:	05f5e100 	.word	0x05f5e100

080154b4 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 80154b4:	f7fb beb6 	b.w	8011224 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

080154b8 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 80154b8:	6581      	str	r1, [r0, #88]	; 0x58
 80154ba:	301c      	adds	r0, #28
 80154bc:	f011 b8ac 	b.w	8026618 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

080154c0 <_ZN8touchgfx3HAL5touchEll>:
 80154c0:	b530      	push	{r4, r5, lr}
 80154c2:	b087      	sub	sp, #28
 80154c4:	4604      	mov	r4, r0
 80154c6:	a804      	add	r0, sp, #16
 80154c8:	e9cd 1204 	strd	r1, r2, [sp, #16]
 80154cc:	f002 fce4 	bl	8017e98 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 80154d0:	9b04      	ldr	r3, [sp, #16]
 80154d2:	a906      	add	r1, sp, #24
 80154d4:	a803      	add	r0, sp, #12
 80154d6:	f8ad 300c 	strh.w	r3, [sp, #12]
 80154da:	9b05      	ldr	r3, [sp, #20]
 80154dc:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 80154e0:	f002 fd2c 	bl	8017f3c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 80154e4:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 80154e8:	f104 001c 	add.w	r0, r4, #28
 80154ec:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 80154f0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80154f4:	b189      	cbz	r1, 801551a <_ZN8touchgfx3HAL5touchEll+0x5a>
 80154f6:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 80154fa:	9300      	str	r3, [sp, #0]
 80154fc:	4613      	mov	r3, r2
 80154fe:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8015502:	462a      	mov	r2, r5
 8015504:	f011 f898 	bl	8026638 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8015508:	b128      	cbz	r0, 8015516 <_ZN8touchgfx3HAL5touchEll+0x56>
 801550a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801550e:	65e3      	str	r3, [r4, #92]	; 0x5c
 8015510:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8015514:	6623      	str	r3, [r4, #96]	; 0x60
 8015516:	b007      	add	sp, #28
 8015518:	bd30      	pop	{r4, r5, pc}
 801551a:	f011 f8cd 	bl	80266b8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 801551e:	2301      	movs	r3, #1
 8015520:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8015524:	e7f1      	b.n	801550a <_ZN8touchgfx3HAL5touchEll+0x4a>

08015526 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 8015526:	b510      	push	{r4, lr}
 8015528:	2b00      	cmp	r3, #0
 801552a:	d046      	beq.n	80155ba <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 801552c:	ea81 0002 	eor.w	r0, r1, r2
 8015530:	07c4      	lsls	r4, r0, #31
 8015532:	d508      	bpl.n	8015546 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8015534:	440b      	add	r3, r1
 8015536:	3a01      	subs	r2, #1
 8015538:	428b      	cmp	r3, r1
 801553a:	d93e      	bls.n	80155ba <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 801553c:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8015540:	f801 0b01 	strb.w	r0, [r1], #1
 8015544:	e7f8      	b.n	8015538 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 8015546:	07d0      	lsls	r0, r2, #31
 8015548:	bf42      	ittt	mi
 801554a:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 801554e:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8015552:	f801 0b01 	strbmi.w	r0, [r1], #1
 8015556:	2b01      	cmp	r3, #1
 8015558:	d911      	bls.n	801557e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 801555a:	ea81 0402 	eor.w	r4, r1, r2
 801555e:	4610      	mov	r0, r2
 8015560:	07a4      	lsls	r4, r4, #30
 8015562:	d022      	beq.n	80155aa <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 8015564:	f023 0401 	bic.w	r4, r3, #1
 8015568:	440c      	add	r4, r1
 801556a:	428c      	cmp	r4, r1
 801556c:	4602      	mov	r2, r0
 801556e:	d904      	bls.n	801557a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 8015570:	8812      	ldrh	r2, [r2, #0]
 8015572:	3002      	adds	r0, #2
 8015574:	f821 2b02 	strh.w	r2, [r1], #2
 8015578:	e7f7      	b.n	801556a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 801557a:	f003 0301 	and.w	r3, r3, #1
 801557e:	f023 0003 	bic.w	r0, r3, #3
 8015582:	4408      	add	r0, r1
 8015584:	4288      	cmp	r0, r1
 8015586:	4614      	mov	r4, r2
 8015588:	d904      	bls.n	8015594 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 801558a:	6824      	ldr	r4, [r4, #0]
 801558c:	3204      	adds	r2, #4
 801558e:	f841 4b04 	str.w	r4, [r1], #4
 8015592:	e7f7      	b.n	8015584 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 8015594:	f003 0303 	and.w	r3, r3, #3
 8015598:	3a01      	subs	r2, #1
 801559a:	440b      	add	r3, r1
 801559c:	428b      	cmp	r3, r1
 801559e:	d90c      	bls.n	80155ba <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 80155a0:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80155a4:	f801 0b01 	strb.w	r0, [r1], #1
 80155a8:	e7f8      	b.n	801559c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 80155aa:	0790      	lsls	r0, r2, #30
 80155ac:	d0e7      	beq.n	801557e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 80155ae:	f832 0b02 	ldrh.w	r0, [r2], #2
 80155b2:	3b02      	subs	r3, #2
 80155b4:	f821 0b02 	strh.w	r0, [r1], #2
 80155b8:	e7e1      	b.n	801557e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 80155ba:	2001      	movs	r0, #1
 80155bc:	bd10      	pop	{r4, pc}

080155be <_ZN8touchgfx3HAL7noTouchEv>:
 80155be:	b510      	push	{r4, lr}
 80155c0:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 80155c4:	4604      	mov	r4, r0
 80155c6:	b153      	cbz	r3, 80155de <_ZN8touchgfx3HAL7noTouchEv+0x20>
 80155c8:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 80155cc:	2101      	movs	r1, #1
 80155ce:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 80155d2:	301c      	adds	r0, #28
 80155d4:	f011 f870 	bl	80266b8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 80155d8:	2300      	movs	r3, #0
 80155da:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 80155de:	bd10      	pop	{r4, pc}

080155e0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 80155e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80155e4:	b085      	sub	sp, #20
 80155e6:	4604      	mov	r4, r0
 80155e8:	2000      	movs	r0, #0
 80155ea:	4699      	mov	r9, r3
 80155ec:	ad04      	add	r5, sp, #16
 80155ee:	460f      	mov	r7, r1
 80155f0:	4690      	mov	r8, r2
 80155f2:	f845 0d04 	str.w	r0, [r5, #-4]!
 80155f6:	69a0      	ldr	r0, [r4, #24]
 80155f8:	6806      	ldr	r6, [r0, #0]
 80155fa:	9501      	str	r5, [sp, #4]
 80155fc:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 8015600:	9500      	str	r5, [sp, #0]
 8015602:	6835      	ldr	r5, [r6, #0]
 8015604:	47a8      	blx	r5
 8015606:	4d10      	ldr	r5, [pc, #64]	; (8015648 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 8015608:	4606      	mov	r6, r0
 801560a:	f8a5 9000 	strh.w	r9, [r5]
 801560e:	f7f8 fc97 	bl	800df40 <_ZN8touchgfx3HAL3lcdEv>
 8015612:	6803      	ldr	r3, [r0, #0]
 8015614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015616:	4798      	blx	r3
 8015618:	b128      	cbz	r0, 8015626 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 801561a:	2801      	cmp	r0, #1
 801561c:	d00b      	beq.n	8015636 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 801561e:	4630      	mov	r0, r6
 8015620:	b005      	add	sp, #20
 8015622:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015626:	882b      	ldrh	r3, [r5, #0]
 8015628:	fb08 7203 	mla	r2, r8, r3, r7
 801562c:	9b03      	ldr	r3, [sp, #12]
 801562e:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8015632:	63e3      	str	r3, [r4, #60]	; 0x3c
 8015634:	e7f3      	b.n	801561e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8015636:	882a      	ldrh	r2, [r5, #0]
 8015638:	9b03      	ldr	r3, [sp, #12]
 801563a:	fb08 7202 	mla	r2, r8, r2, r7
 801563e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8015642:	1a9a      	subs	r2, r3, r2
 8015644:	63e2      	str	r2, [r4, #60]	; 0x3c
 8015646:	e7ea      	b.n	801561e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8015648:	20024422 	.word	0x20024422

0801564c <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 801564c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801564e:	b08b      	sub	sp, #44	; 0x2c
 8015650:	4617      	mov	r7, r2
 8015652:	4604      	mov	r4, r0
 8015654:	460e      	mov	r6, r1
 8015656:	461d      	mov	r5, r3
 8015658:	f7f8 fc72 	bl	800df40 <_ZN8touchgfx3HAL3lcdEv>
 801565c:	6803      	ldr	r3, [r0, #0]
 801565e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015660:	4798      	blx	r3
 8015662:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8015666:	9007      	str	r0, [sp, #28]
 8015668:	4631      	mov	r1, r6
 801566a:	6822      	ldr	r2, [r4, #0]
 801566c:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8015670:	4b0c      	ldr	r3, [pc, #48]	; (80156a4 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 8015672:	4620      	mov	r0, r4
 8015674:	881b      	ldrh	r3, [r3, #0]
 8015676:	9306      	str	r3, [sp, #24]
 8015678:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 801567c:	9305      	str	r3, [sp, #20]
 801567e:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8015682:	9304      	str	r3, [sp, #16]
 8015684:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8015688:	9303      	str	r3, [sp, #12]
 801568a:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801568e:	9302      	str	r3, [sp, #8]
 8015690:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8015694:	e9cd 5300 	strd	r5, r3, [sp]
 8015698:	463b      	mov	r3, r7
 801569a:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 801569c:	2200      	movs	r2, #0
 801569e:	47a8      	blx	r5
 80156a0:	b00b      	add	sp, #44	; 0x2c
 80156a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80156a4:	20024422 	.word	0x20024422

080156a8 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 80156a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80156ac:	4698      	mov	r8, r3
 80156ae:	6803      	ldr	r3, [r0, #0]
 80156b0:	b08b      	sub	sp, #44	; 0x2c
 80156b2:	4617      	mov	r7, r2
 80156b4:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 80156b6:	460e      	mov	r6, r1
 80156b8:	4b13      	ldr	r3, [pc, #76]	; (8015708 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 80156ba:	4604      	mov	r4, r0
 80156bc:	f8b3 9000 	ldrh.w	r9, [r3]
 80156c0:	f7f8 fc3e 	bl	800df40 <_ZN8touchgfx3HAL3lcdEv>
 80156c4:	6803      	ldr	r3, [r0, #0]
 80156c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80156c8:	4798      	blx	r3
 80156ca:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 80156ce:	2200      	movs	r2, #0
 80156d0:	4631      	mov	r1, r6
 80156d2:	e9cd 0308 	strd	r0, r3, [sp, #32]
 80156d6:	2302      	movs	r3, #2
 80156d8:	4620      	mov	r0, r4
 80156da:	e9cd 9306 	strd	r9, r3, [sp, #24]
 80156de:	2301      	movs	r3, #1
 80156e0:	9305      	str	r3, [sp, #20]
 80156e2:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 80156e6:	9304      	str	r3, [sp, #16]
 80156e8:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 80156ec:	9303      	str	r3, [sp, #12]
 80156ee:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 80156f2:	9302      	str	r3, [sp, #8]
 80156f4:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80156f8:	e9cd 8300 	strd	r8, r3, [sp]
 80156fc:	463b      	mov	r3, r7
 80156fe:	47a8      	blx	r5
 8015700:	b00b      	add	sp, #44	; 0x2c
 8015702:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015706:	bf00      	nop
 8015708:	20024422 	.word	0x20024422

0801570c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 801570c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015710:	4698      	mov	r8, r3
 8015712:	6803      	ldr	r3, [r0, #0]
 8015714:	b087      	sub	sp, #28
 8015716:	460e      	mov	r6, r1
 8015718:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 801571a:	4617      	mov	r7, r2
 801571c:	4b0f      	ldr	r3, [pc, #60]	; (801575c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 801571e:	4604      	mov	r4, r0
 8015720:	f8b3 9000 	ldrh.w	r9, [r3]
 8015724:	f7f8 fc0c 	bl	800df40 <_ZN8touchgfx3HAL3lcdEv>
 8015728:	6803      	ldr	r3, [r0, #0]
 801572a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801572c:	4798      	blx	r3
 801572e:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 8015732:	463a      	mov	r2, r7
 8015734:	4631      	mov	r1, r6
 8015736:	f8cd 900c 	str.w	r9, [sp, #12]
 801573a:	e9cd 0304 	strd	r0, r3, [sp, #16]
 801573e:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8015742:	4620      	mov	r0, r4
 8015744:	9302      	str	r3, [sp, #8]
 8015746:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 801574a:	9301      	str	r3, [sp, #4]
 801574c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8015750:	9300      	str	r3, [sp, #0]
 8015752:	4643      	mov	r3, r8
 8015754:	47a8      	blx	r5
 8015756:	b007      	add	sp, #28
 8015758:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801575c:	20024422 	.word	0x20024422

08015760 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8015760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015764:	4604      	mov	r4, r0
 8015766:	b08f      	sub	sp, #60	; 0x3c
 8015768:	4610      	mov	r0, r2
 801576a:	460d      	mov	r5, r1
 801576c:	4691      	mov	r9, r2
 801576e:	461e      	mov	r6, r3
 8015770:	f005 f99c 	bl	801aaac <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8015774:	2800      	cmp	r0, #0
 8015776:	f000 809d 	beq.w	80158b4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 801577a:	6823      	ldr	r3, [r4, #0]
 801577c:	4620      	mov	r0, r4
 801577e:	f8df b198 	ldr.w	fp, [pc, #408]	; 8015918 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 8015782:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8015786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015788:	4798      	blx	r3
 801578a:	6823      	ldr	r3, [r4, #0]
 801578c:	4620      	mov	r0, r4
 801578e:	f8df a18c 	ldr.w	sl, [pc, #396]	; 801591c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 8015792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015794:	4798      	blx	r3
 8015796:	f8bb 3000 	ldrh.w	r3, [fp]
 801579a:	4f5c      	ldr	r7, [pc, #368]	; (801590c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 801579c:	9301      	str	r3, [sp, #4]
 801579e:	f8ba 3000 	ldrh.w	r3, [sl]
 80157a2:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 80157a6:	4640      	mov	r0, r8
 80157a8:	9302      	str	r3, [sp, #8]
 80157aa:	883b      	ldrh	r3, [r7, #0]
 80157ac:	9303      	str	r3, [sp, #12]
 80157ae:	4b58      	ldr	r3, [pc, #352]	; (8015910 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 80157b0:	881a      	ldrh	r2, [r3, #0]
 80157b2:	9305      	str	r3, [sp, #20]
 80157b4:	9204      	str	r2, [sp, #16]
 80157b6:	f005 fa0d 	bl	801abd4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80157ba:	8038      	strh	r0, [r7, #0]
 80157bc:	4640      	mov	r0, r8
 80157be:	f005 fa3d 	bl	801ac3c <_ZNK8touchgfx6Bitmap9getHeightEv>
 80157c2:	9b05      	ldr	r3, [sp, #20]
 80157c4:	b280      	uxth	r0, r0
 80157c6:	8018      	strh	r0, [r3, #0]
 80157c8:	4b52      	ldr	r3, [pc, #328]	; (8015914 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 80157ca:	781b      	ldrb	r3, [r3, #0]
 80157cc:	2b00      	cmp	r3, #0
 80157ce:	d174      	bne.n	80158ba <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 80157d0:	883b      	ldrh	r3, [r7, #0]
 80157d2:	f8aa 0000 	strh.w	r0, [sl]
 80157d6:	f8ab 3000 	strh.w	r3, [fp]
 80157da:	4648      	mov	r0, r9
 80157dc:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 80157e0:	f005 f964 	bl	801aaac <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 80157e4:	2200      	movs	r2, #0
 80157e6:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 80157ea:	4611      	mov	r1, r2
 80157ec:	4628      	mov	r0, r5
 80157ee:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 80157f2:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 80157f6:	f7f9 f91c 	bl	800ea32 <_ZN8touchgfx8Drawable5setXYEss>
 80157fa:	2301      	movs	r3, #1
 80157fc:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 8015800:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 8015804:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8015808:	2b00      	cmp	r3, #0
 801580a:	dd5c      	ble.n	80158c6 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 801580c:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8015810:	2b00      	cmp	r3, #0
 8015812:	dd58      	ble.n	80158c6 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8015814:	462a      	mov	r2, r5
 8015816:	ab0a      	add	r3, sp, #40	; 0x28
 8015818:	f852 0f04 	ldr.w	r0, [r2, #4]!
 801581c:	6851      	ldr	r1, [r2, #4]
 801581e:	c303      	stmia	r3!, {r0, r1}
 8015820:	4631      	mov	r1, r6
 8015822:	a80a      	add	r0, sp, #40	; 0x28
 8015824:	f7ff fbfc 	bl	8015020 <_ZN8touchgfx4RectaNERKS0_>
 8015828:	4b38      	ldr	r3, [pc, #224]	; (801590c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 801582a:	2100      	movs	r1, #0
 801582c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015830:	4b37      	ldr	r3, [pc, #220]	; (8015910 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8015832:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8015836:	aa0a      	add	r2, sp, #40	; 0x28
 8015838:	f9b3 3000 	ldrsh.w	r3, [r3]
 801583c:	910c      	str	r1, [sp, #48]	; 0x30
 801583e:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8015842:	ab08      	add	r3, sp, #32
 8015844:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015848:	e883 0003 	stmia.w	r3, {r0, r1}
 801584c:	4618      	mov	r0, r3
 801584e:	a90c      	add	r1, sp, #48	; 0x30
 8015850:	f7ff fbe6 	bl	8015020 <_ZN8touchgfx4RectaNERKS0_>
 8015854:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8015856:	2b00      	cmp	r3, #0
 8015858:	d13c      	bne.n	80158d4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 801585a:	2000      	movs	r0, #0
 801585c:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 8015860:	2600      	movs	r6, #0
 8015862:	696b      	ldr	r3, [r5, #20]
 8015864:	a908      	add	r1, sp, #32
 8015866:	682a      	ldr	r2, [r5, #0]
 8015868:	4628      	mov	r0, r5
 801586a:	9305      	str	r3, [sp, #20]
 801586c:	616e      	str	r6, [r5, #20]
 801586e:	6892      	ldr	r2, [r2, #8]
 8015870:	4790      	blx	r2
 8015872:	9b05      	ldr	r3, [sp, #20]
 8015874:	4652      	mov	r2, sl
 8015876:	4649      	mov	r1, r9
 8015878:	616b      	str	r3, [r5, #20]
 801587a:	4628      	mov	r0, r5
 801587c:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 8015880:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 8015884:	f7f9 f8d5 	bl	800ea32 <_ZN8touchgfx8Drawable5setXYEss>
 8015888:	9a01      	ldr	r2, [sp, #4]
 801588a:	4b23      	ldr	r3, [pc, #140]	; (8015918 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 801588c:	4620      	mov	r0, r4
 801588e:	801a      	strh	r2, [r3, #0]
 8015890:	9a02      	ldr	r2, [sp, #8]
 8015892:	4b22      	ldr	r3, [pc, #136]	; (801591c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 8015894:	801a      	strh	r2, [r3, #0]
 8015896:	9a03      	ldr	r2, [sp, #12]
 8015898:	4b1c      	ldr	r3, [pc, #112]	; (801590c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 801589a:	801a      	strh	r2, [r3, #0]
 801589c:	4b1c      	ldr	r3, [pc, #112]	; (8015910 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 801589e:	9a04      	ldr	r2, [sp, #16]
 80158a0:	801a      	strh	r2, [r3, #0]
 80158a2:	6823      	ldr	r3, [r4, #0]
 80158a4:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 80158a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80158aa:	4798      	blx	r3
 80158ac:	6823      	ldr	r3, [r4, #0]
 80158ae:	4620      	mov	r0, r4
 80158b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80158b2:	4798      	blx	r3
 80158b4:	b00f      	add	sp, #60	; 0x3c
 80158b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80158ba:	883b      	ldrh	r3, [r7, #0]
 80158bc:	f8ab 0000 	strh.w	r0, [fp]
 80158c0:	f8aa 3000 	strh.w	r3, [sl]
 80158c4:	e789      	b.n	80157da <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 80158c6:	462a      	mov	r2, r5
 80158c8:	ab0a      	add	r3, sp, #40	; 0x28
 80158ca:	f852 0f04 	ldr.w	r0, [r2, #4]!
 80158ce:	6851      	ldr	r1, [r2, #4]
 80158d0:	c303      	stmia	r3!, {r0, r1}
 80158d2:	e7a9      	b.n	8015828 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 80158d4:	a807      	add	r0, sp, #28
 80158d6:	f005 faed 	bl	801aeb4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80158da:	4606      	mov	r6, r0
 80158dc:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80158de:	6803      	ldr	r3, [r0, #0]
 80158e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80158e2:	4798      	blx	r3
 80158e4:	4286      	cmp	r6, r0
 80158e6:	d1b8      	bne.n	801585a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 80158e8:	f7f8 fb2a 	bl	800df40 <_ZN8touchgfx3HAL3lcdEv>
 80158ec:	6803      	ldr	r3, [r0, #0]
 80158ee:	4606      	mov	r6, r0
 80158f0:	a807      	add	r0, sp, #28
 80158f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80158f4:	9305      	str	r3, [sp, #20]
 80158f6:	f005 fadd 	bl	801aeb4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80158fa:	9b05      	ldr	r3, [sp, #20]
 80158fc:	4601      	mov	r1, r0
 80158fe:	4630      	mov	r0, r6
 8015900:	4798      	blx	r3
 8015902:	f080 0001 	eor.w	r0, r0, #1
 8015906:	b2c0      	uxtb	r0, r0
 8015908:	e7a8      	b.n	801585c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 801590a:	bf00      	nop
 801590c:	2002441c 	.word	0x2002441c
 8015910:	2002441e 	.word	0x2002441e
 8015914:	20024420 	.word	0x20024420
 8015918:	20024422 	.word	0x20024422
 801591c:	20024424 	.word	0x20024424

08015920 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8015920:	4b07      	ldr	r3, [pc, #28]	; (8015940 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8015922:	b510      	push	{r4, lr}
 8015924:	781b      	ldrb	r3, [r3, #0]
 8015926:	4604      	mov	r4, r0
 8015928:	b13b      	cbz	r3, 801593a <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 801592a:	6803      	ldr	r3, [r0, #0]
 801592c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801592e:	4798      	blx	r3
 8015930:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8015932:	4283      	cmp	r3, r0
 8015934:	d101      	bne.n	801593a <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8015936:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8015938:	bd10      	pop	{r4, pc}
 801593a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 801593c:	e7fc      	b.n	8015938 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 801593e:	bf00      	nop
 8015940:	20024426 	.word	0x20024426

08015944 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 8015944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015948:	461d      	mov	r5, r3
 801594a:	b08a      	sub	sp, #40	; 0x28
 801594c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015950:	4690      	mov	r8, r2
 8015952:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 8015956:	2400      	movs	r4, #0
 8015958:	4607      	mov	r7, r0
 801595a:	fb06 8505 	mla	r5, r6, r5, r8
 801595e:	9404      	str	r4, [sp, #16]
 8015960:	f88d 4020 	strb.w	r4, [sp, #32]
 8015964:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8015968:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801596c:	f8ad 3018 	strh.w	r3, [sp, #24]
 8015970:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8015974:	f8ad 301a 	strh.w	r3, [sp, #26]
 8015978:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801597c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8015980:	f7ff ffce 	bl	8015920 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8015984:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8015988:	6878      	ldr	r0, [r7, #4]
 801598a:	f8ad 601e 	strh.w	r6, [sp, #30]
 801598e:	a901      	add	r1, sp, #4
 8015990:	9505      	str	r5, [sp, #20]
 8015992:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8015996:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 801599a:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 801599e:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 80159a2:	6803      	ldr	r3, [r0, #0]
 80159a4:	685b      	ldr	r3, [r3, #4]
 80159a6:	4798      	blx	r3
 80159a8:	b00a      	add	sp, #40	; 0x28
 80159aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080159ae <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 80159ae:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80159b2:	b08b      	sub	sp, #44	; 0x2c
 80159b4:	2400      	movs	r4, #0
 80159b6:	4691      	mov	r9, r2
 80159b8:	461d      	mov	r5, r3
 80159ba:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 80159be:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80159c2:	4688      	mov	r8, r1
 80159c4:	4607      	mov	r7, r0
 80159c6:	9404      	str	r4, [sp, #16]
 80159c8:	fb06 9505 	mla	r5, r6, r5, r9
 80159cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80159d0:	f7ff ffa6 	bl	8015920 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80159d4:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80159d8:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 80159dc:	6878      	ldr	r0, [r7, #4]
 80159de:	f8ad 3018 	strh.w	r3, [sp, #24]
 80159e2:	a901      	add	r1, sp, #4
 80159e4:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 80159e8:	9505      	str	r5, [sp, #20]
 80159ea:	f8ad 301a 	strh.w	r3, [sp, #26]
 80159ee:	f8ad 401c 	strh.w	r4, [sp, #28]
 80159f2:	f8ad 601e 	strh.w	r6, [sp, #30]
 80159f6:	f8cd 8010 	str.w	r8, [sp, #16]
 80159fa:	f8ad 4020 	strh.w	r4, [sp, #32]
 80159fe:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8015a02:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 8015a06:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 8015a0a:	6803      	ldr	r3, [r0, #0]
 8015a0c:	685b      	ldr	r3, [r3, #4]
 8015a0e:	4798      	blx	r3
 8015a10:	b00b      	add	sp, #44	; 0x2c
 8015a12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08015a18 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 8015a18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015a1c:	b08a      	sub	sp, #40	; 0x28
 8015a1e:	4698      	mov	r8, r3
 8015a20:	2300      	movs	r3, #0
 8015a22:	4606      	mov	r6, r0
 8015a24:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 8015a28:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 8015a2c:	2d0b      	cmp	r5, #11
 8015a2e:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 8015a32:	f8bd 7058 	ldrh.w	r7, [sp, #88]	; 0x58
 8015a36:	f89d 4060 	ldrb.w	r4, [sp, #96]	; 0x60
 8015a3a:	9304      	str	r3, [sp, #16]
 8015a3c:	d137      	bne.n	8015aae <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 8015a3e:	2380      	movs	r3, #128	; 0x80
 8015a40:	f88d 0020 	strb.w	r0, [sp, #32]
 8015a44:	4630      	mov	r0, r6
 8015a46:	9203      	str	r2, [sp, #12]
 8015a48:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8015a4c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8015a50:	f8ad 3018 	strh.w	r3, [sp, #24]
 8015a54:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8015a58:	f8ad 301a 	strh.w	r3, [sp, #26]
 8015a5c:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8015a60:	f8ad 301c 	strh.w	r3, [sp, #28]
 8015a64:	f7ff ff5c 	bl	8015920 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8015a68:	2c0b      	cmp	r4, #11
 8015a6a:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8015a6e:	f8ad 701e 	strh.w	r7, [sp, #30]
 8015a72:	bf94      	ite	ls
 8015a74:	4b19      	ldrls	r3, [pc, #100]	; (8015adc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 8015a76:	2100      	movhi	r1, #0
 8015a78:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 8015a7c:	bf98      	it	ls
 8015a7e:	5d19      	ldrbls	r1, [r3, r4]
 8015a80:	fb02 8307 	mla	r3, r2, r7, r8
 8015a84:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8015a88:	10c9      	asrs	r1, r1, #3
 8015a8a:	fb01 0003 	mla	r0, r1, r3, r0
 8015a8e:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8015a92:	a901      	add	r1, sp, #4
 8015a94:	9005      	str	r0, [sp, #20]
 8015a96:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 8015a9a:	2300      	movs	r3, #0
 8015a9c:	6870      	ldr	r0, [r6, #4]
 8015a9e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8015aa2:	6803      	ldr	r3, [r0, #0]
 8015aa4:	685b      	ldr	r3, [r3, #4]
 8015aa6:	4798      	blx	r3
 8015aa8:	b00a      	add	sp, #40	; 0x28
 8015aaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015aae:	2d02      	cmp	r5, #2
 8015ab0:	d109      	bne.n	8015ac6 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 8015ab2:	28ff      	cmp	r0, #255	; 0xff
 8015ab4:	d105      	bne.n	8015ac2 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 8015ab6:	f1bc 0f00 	cmp.w	ip, #0
 8015aba:	bf14      	ite	ne
 8015abc:	2340      	movne	r3, #64	; 0x40
 8015abe:	2320      	moveq	r3, #32
 8015ac0:	e7be      	b.n	8015a40 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8015ac2:	2340      	movs	r3, #64	; 0x40
 8015ac4:	e7bc      	b.n	8015a40 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8015ac6:	28ff      	cmp	r0, #255	; 0xff
 8015ac8:	d105      	bne.n	8015ad6 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 8015aca:	f1bc 0f00 	cmp.w	ip, #0
 8015ace:	bf14      	ite	ne
 8015ad0:	2304      	movne	r3, #4
 8015ad2:	2301      	moveq	r3, #1
 8015ad4:	e7b4      	b.n	8015a40 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8015ad6:	2304      	movs	r3, #4
 8015ad8:	e7b2      	b.n	8015a40 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8015ada:	bf00      	nop
 8015adc:	0802adfc 	.word	0x0802adfc

08015ae0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 8015ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ae4:	b08b      	sub	sp, #44	; 0x2c
 8015ae6:	461d      	mov	r5, r3
 8015ae8:	2400      	movs	r4, #0
 8015aea:	4688      	mov	r8, r1
 8015aec:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
 8015af0:	4693      	mov	fp, r2
 8015af2:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
 8015af6:	4607      	mov	r7, r0
 8015af8:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8015afc:	f8bd a05c 	ldrh.w	sl, [sp, #92]	; 0x5c
 8015b00:	9404      	str	r4, [sp, #16]
 8015b02:	bf14      	ite	ne
 8015b04:	2308      	movne	r3, #8
 8015b06:	2302      	moveq	r3, #2
 8015b08:	fb05 b50a 	mla	r5, r5, sl, fp
 8015b0c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015b10:	f7ff ff06 	bl	8015920 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8015b14:	2e0b      	cmp	r6, #11
 8015b16:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8015b1a:	a901      	add	r1, sp, #4
 8015b1c:	bf98      	it	ls
 8015b1e:	4b13      	ldrls	r3, [pc, #76]	; (8015b6c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 8015b20:	f8ad a01e 	strh.w	sl, [sp, #30]
 8015b24:	bf98      	it	ls
 8015b26:	5d9c      	ldrbls	r4, [r3, r6]
 8015b28:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8015b2c:	10e4      	asrs	r4, r4, #3
 8015b2e:	f8cd 8010 	str.w	r8, [sp, #16]
 8015b32:	f8ad 3018 	strh.w	r3, [sp, #24]
 8015b36:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8015b3a:	fb04 0405 	mla	r4, r4, r5, r0
 8015b3e:	6878      	ldr	r0, [r7, #4]
 8015b40:	f8ad 301a 	strh.w	r3, [sp, #26]
 8015b44:	2300      	movs	r3, #0
 8015b46:	9405      	str	r4, [sp, #20]
 8015b48:	f8ad 301c 	strh.w	r3, [sp, #28]
 8015b4c:	f88d 9020 	strb.w	r9, [sp, #32]
 8015b50:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
 8015b54:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8015b58:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
 8015b5c:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
 8015b60:	6803      	ldr	r3, [r0, #0]
 8015b62:	685b      	ldr	r3, [r3, #4]
 8015b64:	4798      	blx	r3
 8015b66:	b00b      	add	sp, #44	; 0x2c
 8015b68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b6c:	0802adfc 	.word	0x0802adfc

08015b70 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8015b70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015b74:	461e      	mov	r6, r3
 8015b76:	4b0a      	ldr	r3, [pc, #40]	; (8015ba0 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 8015b78:	460f      	mov	r7, r1
 8015b7a:	4690      	mov	r8, r2
 8015b7c:	881d      	ldrh	r5, [r3, #0]
 8015b7e:	f7f8 f9df 	bl	800df40 <_ZN8touchgfx3HAL3lcdEv>
 8015b82:	6803      	ldr	r3, [r0, #0]
 8015b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015b86:	4798      	blx	r3
 8015b88:	280b      	cmp	r0, #11
 8015b8a:	bf96      	itet	ls
 8015b8c:	4b05      	ldrls	r3, [pc, #20]	; (8015ba4 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8015b8e:	2400      	movhi	r4, #0
 8015b90:	5c1c      	ldrbls	r4, [r3, r0]
 8015b92:	fb08 7005 	mla	r0, r8, r5, r7
 8015b96:	10e4      	asrs	r4, r4, #3
 8015b98:	fb04 6000 	mla	r0, r4, r0, r6
 8015b9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015ba0:	20024422 	.word	0x20024422
 8015ba4:	0802adfc 	.word	0x0802adfc

08015ba8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 8015ba8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015baa:	b08b      	sub	sp, #44	; 0x2c
 8015bac:	461f      	mov	r7, r3
 8015bae:	4604      	mov	r4, r0
 8015bb0:	4616      	mov	r6, r2
 8015bb2:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8015bb6:	2500      	movs	r5, #0
 8015bb8:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8015bbc:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8015bc0:	9504      	str	r5, [sp, #16]
 8015bc2:	f8ad 3018 	strh.w	r3, [sp, #24]
 8015bc6:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8015bca:	f8ad 301a 	strh.w	r3, [sp, #26]
 8015bce:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8015bd2:	f8ad 301c 	strh.w	r3, [sp, #28]
 8015bd6:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8015bda:	f88d 3020 	strb.w	r3, [sp, #32]
 8015bde:	f7ff fe9f 	bl	8015920 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8015be2:	463a      	mov	r2, r7
 8015be4:	4631      	mov	r1, r6
 8015be6:	4603      	mov	r3, r0
 8015be8:	4620      	mov	r0, r4
 8015bea:	f7ff ffc1 	bl	8015b70 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8015bee:	4b0e      	ldr	r3, [pc, #56]	; (8015c28 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 8015bf0:	9005      	str	r0, [sp, #20]
 8015bf2:	881b      	ldrh	r3, [r3, #0]
 8015bf4:	f8ad 301e 	strh.w	r3, [sp, #30]
 8015bf8:	f7f8 f9a2 	bl	800df40 <_ZN8touchgfx3HAL3lcdEv>
 8015bfc:	6803      	ldr	r3, [r0, #0]
 8015bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015c00:	4798      	blx	r3
 8015c02:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015c04:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 8015c08:	a901      	add	r1, sp, #4
 8015c0a:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 8015c0e:	9304      	str	r3, [sp, #16]
 8015c10:	6860      	ldr	r0, [r4, #4]
 8015c12:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8015c16:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 8015c1a:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 8015c1e:	6803      	ldr	r3, [r0, #0]
 8015c20:	685b      	ldr	r3, [r3, #4]
 8015c22:	4798      	blx	r3
 8015c24:	b00b      	add	sp, #44	; 0x2c
 8015c26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015c28:	20024422 	.word	0x20024422

08015c2c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8015c2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015c2e:	b08d      	sub	sp, #52	; 0x34
 8015c30:	2501      	movs	r5, #1
 8015c32:	4604      	mov	r4, r0
 8015c34:	466b      	mov	r3, sp
 8015c36:	9503      	str	r5, [sp, #12]
 8015c38:	e883 0006 	stmia.w	r3, {r1, r2}
 8015c3c:	2300      	movs	r3, #0
 8015c3e:	f8bd 6000 	ldrh.w	r6, [sp]
 8015c42:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8015c46:	9306      	str	r3, [sp, #24]
 8015c48:	6803      	ldr	r3, [r0, #0]
 8015c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015c4c:	4798      	blx	r3
 8015c4e:	463a      	mov	r2, r7
 8015c50:	4631      	mov	r1, r6
 8015c52:	4603      	mov	r3, r0
 8015c54:	4620      	mov	r0, r4
 8015c56:	f7ff ff8b 	bl	8015b70 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8015c5a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8015c5c:	9004      	str	r0, [sp, #16]
 8015c5e:	9307      	str	r3, [sp, #28]
 8015c60:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8015c64:	f8ad 3020 	strh.w	r3, [sp, #32]
 8015c68:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8015c6c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8015c70:	4b0e      	ldr	r3, [pc, #56]	; (8015cac <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 8015c72:	881b      	ldrh	r3, [r3, #0]
 8015c74:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8015c78:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8015c7c:	f7f8 f960 	bl	800df40 <_ZN8touchgfx3HAL3lcdEv>
 8015c80:	6803      	ldr	r3, [r0, #0]
 8015c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015c84:	4798      	blx	r3
 8015c86:	23ff      	movs	r3, #255	; 0xff
 8015c88:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 8015c8c:	a903      	add	r1, sp, #12
 8015c8e:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 8015c92:	6860      	ldr	r0, [r4, #4]
 8015c94:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8015c98:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8015c9c:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 8015ca0:	6803      	ldr	r3, [r0, #0]
 8015ca2:	685b      	ldr	r3, [r3, #4]
 8015ca4:	4798      	blx	r3
 8015ca6:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8015ca8:	b00d      	add	sp, #52	; 0x34
 8015caa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015cac:	20024422 	.word	0x20024422

08015cb0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8015cb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015cb4:	b08c      	sub	sp, #48	; 0x30
 8015cb6:	461e      	mov	r6, r3
 8015cb8:	2300      	movs	r3, #0
 8015cba:	4604      	mov	r4, r0
 8015cbc:	466d      	mov	r5, sp
 8015cbe:	9306      	str	r3, [sp, #24]
 8015cc0:	6803      	ldr	r3, [r0, #0]
 8015cc2:	e885 0006 	stmia.w	r5, {r1, r2}
 8015cc6:	2501      	movs	r5, #1
 8015cc8:	f8bd 7000 	ldrh.w	r7, [sp]
 8015ccc:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 8015cd0:	9503      	str	r5, [sp, #12]
 8015cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015cd4:	4798      	blx	r3
 8015cd6:	4642      	mov	r2, r8
 8015cd8:	4639      	mov	r1, r7
 8015cda:	4603      	mov	r3, r0
 8015cdc:	4620      	mov	r0, r4
 8015cde:	f7ff ff47 	bl	8015b70 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8015ce2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8015ce6:	9004      	str	r0, [sp, #16]
 8015ce8:	f8ad 3020 	strh.w	r3, [sp, #32]
 8015cec:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8015cf0:	9607      	str	r6, [sp, #28]
 8015cf2:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8015cf6:	4b10      	ldr	r3, [pc, #64]	; (8015d38 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 8015cf8:	881b      	ldrh	r3, [r3, #0]
 8015cfa:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8015cfe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015d00:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8015d04:	f7f8 f91c 	bl	800df40 <_ZN8touchgfx3HAL3lcdEv>
 8015d08:	6803      	ldr	r3, [r0, #0]
 8015d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015d0c:	4798      	blx	r3
 8015d0e:	23ff      	movs	r3, #255	; 0xff
 8015d10:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 8015d14:	a903      	add	r1, sp, #12
 8015d16:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 8015d1a:	6860      	ldr	r0, [r4, #4]
 8015d1c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8015d20:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8015d24:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 8015d28:	6803      	ldr	r3, [r0, #0]
 8015d2a:	685b      	ldr	r3, [r3, #4]
 8015d2c:	4798      	blx	r3
 8015d2e:	4630      	mov	r0, r6
 8015d30:	b00c      	add	sp, #48	; 0x30
 8015d32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015d36:	bf00      	nop
 8015d38:	20024422 	.word	0x20024422

08015d3c <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 8015d3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015d3e:	b085      	sub	sp, #20
 8015d40:	4605      	mov	r5, r0
 8015d42:	ac02      	add	r4, sp, #8
 8015d44:	e884 0006 	stmia.w	r4, {r1, r2}
 8015d48:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 8015d4c:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 8015d50:	f7ff fde6 	bl	8015920 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8015d54:	4631      	mov	r1, r6
 8015d56:	4603      	mov	r3, r0
 8015d58:	463a      	mov	r2, r7
 8015d5a:	4628      	mov	r0, r5
 8015d5c:	f7ff ff08 	bl	8015b70 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8015d60:	4a05      	ldr	r2, [pc, #20]	; (8015d78 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 8015d62:	682b      	ldr	r3, [r5, #0]
 8015d64:	8812      	ldrh	r2, [r2, #0]
 8015d66:	9200      	str	r2, [sp, #0]
 8015d68:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 8015d6a:	4603      	mov	r3, r0
 8015d6c:	4628      	mov	r0, r5
 8015d6e:	e894 0006 	ldmia.w	r4, {r1, r2}
 8015d72:	47b0      	blx	r6
 8015d74:	b005      	add	sp, #20
 8015d76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015d78:	20024422 	.word	0x20024422

08015d7c <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8015d7c:	b570      	push	{r4, r5, r6, lr}
 8015d7e:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8015d82:	4604      	mov	r4, r0
 8015d84:	b19b      	cbz	r3, 8015dae <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8015d86:	2002      	movs	r0, #2
 8015d88:	f7f9 ff0a 	bl	800fba0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8015d8c:	2300      	movs	r3, #0
 8015d8e:	4620      	mov	r0, r4
 8015d90:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8015d94:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 8015d98:	6823      	ldr	r3, [r4, #0]
 8015d9a:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
 8015d9e:	f7ff fdbf 	bl	8015920 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8015da2:	4601      	mov	r1, r0
 8015da4:	4620      	mov	r0, r4
 8015da6:	462b      	mov	r3, r5
 8015da8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015dac:	4718      	bx	r3
 8015dae:	bd70      	pop	{r4, r5, r6, pc}

08015db0 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 8015db0:	b538      	push	{r3, r4, r5, lr}
 8015db2:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
 8015db6:	4604      	mov	r4, r0
 8015db8:	460d      	mov	r5, r1
 8015dba:	428b      	cmp	r3, r1
 8015dbc:	d006      	beq.n	8015dcc <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 8015dbe:	6803      	ldr	r3, [r0, #0]
 8015dc0:	b929      	cbnz	r1, 8015dce <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 8015dc2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8015dc6:	4798      	blx	r3
 8015dc8:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 8015dcc:	bd38      	pop	{r3, r4, r5, pc}
 8015dce:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8015dd2:	e7f8      	b.n	8015dc6 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

08015dd4 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8015dd4:	4b0d      	ldr	r3, [pc, #52]	; (8015e0c <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 8015dd6:	b510      	push	{r4, lr}
 8015dd8:	781b      	ldrb	r3, [r3, #0]
 8015dda:	4604      	mov	r4, r0
 8015ddc:	b95b      	cbnz	r3, 8015df6 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8015dde:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 8015de2:	2b02      	cmp	r3, #2
 8015de4:	d007      	beq.n	8015df6 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8015de6:	6840      	ldr	r0, [r0, #4]
 8015de8:	f000 f90e 	bl	8016008 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8015dec:	b118      	cbz	r0, 8015df6 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8015dee:	6862      	ldr	r2, [r4, #4]
 8015df0:	7a53      	ldrb	r3, [r2, #9]
 8015df2:	2b00      	cmp	r3, #0
 8015df4:	d0fc      	beq.n	8015df0 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8015df6:	f7fb fa07 	bl	8011208 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8015dfa:	4620      	mov	r0, r4
 8015dfc:	2100      	movs	r1, #0
 8015dfe:	f7ff ffd7 	bl	8015db0 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8015e02:	4620      	mov	r0, r4
 8015e04:	f7ff fd8c 	bl	8015920 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8015e08:	bd10      	pop	{r4, pc}
 8015e0a:	bf00      	nop
 8015e0c:	20024426 	.word	0x20024426

08015e10 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 8015e10:	4770      	bx	lr

08015e12 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
 8015e12:	2000      	movs	r0, #0
 8015e14:	4770      	bx	lr

08015e16 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8015e16:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8015e1a:	1a13      	subs	r3, r2, r0
 8015e1c:	4258      	negs	r0, r3
 8015e1e:	4158      	adcs	r0, r3
 8015e20:	4770      	bx	lr

08015e22 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8015e22:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8015e26:	1a9b      	subs	r3, r3, r2
 8015e28:	2b00      	cmp	r3, #0
 8015e2a:	bfdc      	itt	le
 8015e2c:	6882      	ldrle	r2, [r0, #8]
 8015e2e:	189b      	addle	r3, r3, r2
 8015e30:	2b01      	cmp	r3, #1
 8015e32:	bfcc      	ite	gt
 8015e34:	2000      	movgt	r0, #0
 8015e36:	2001      	movle	r0, #1
 8015e38:	4770      	bx	lr

08015e3a <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8015e3a:	6902      	ldr	r2, [r0, #16]
 8015e3c:	6843      	ldr	r3, [r0, #4]
 8015e3e:	2024      	movs	r0, #36	; 0x24
 8015e40:	fb00 3002 	mla	r0, r0, r2, r3
 8015e44:	4770      	bx	lr

08015e46 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8015e46:	6803      	ldr	r3, [r0, #0]
 8015e48:	691b      	ldr	r3, [r3, #16]
 8015e4a:	4718      	bx	r3

08015e4c <_ZN8touchgfx13DMA_Interface7executeEv>:
 8015e4c:	2301      	movs	r3, #1
 8015e4e:	b570      	push	{r4, r5, r6, lr}
 8015e50:	7203      	strb	r3, [r0, #8]
 8015e52:	4604      	mov	r4, r0
 8015e54:	6840      	ldr	r0, [r0, #4]
 8015e56:	6803      	ldr	r3, [r0, #0]
 8015e58:	699b      	ldr	r3, [r3, #24]
 8015e5a:	4798      	blx	r3
 8015e5c:	6803      	ldr	r3, [r0, #0]
 8015e5e:	4605      	mov	r5, r0
 8015e60:	2b40      	cmp	r3, #64	; 0x40
 8015e62:	d00c      	beq.n	8015e7e <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8015e64:	d810      	bhi.n	8015e88 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 8015e66:	2b04      	cmp	r3, #4
 8015e68:	d01d      	beq.n	8015ea6 <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 8015e6a:	d804      	bhi.n	8015e76 <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 8015e6c:	2b01      	cmp	r3, #1
 8015e6e:	d006      	beq.n	8015e7e <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8015e70:	2b02      	cmp	r3, #2
 8015e72:	d02c      	beq.n	8015ece <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 8015e74:	bd70      	pop	{r4, r5, r6, pc}
 8015e76:	2b08      	cmp	r3, #8
 8015e78:	d01d      	beq.n	8015eb6 <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 8015e7a:	2b20      	cmp	r3, #32
 8015e7c:	d1fa      	bne.n	8015e74 <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 8015e7e:	6823      	ldr	r3, [r4, #0]
 8015e80:	4620      	mov	r0, r4
 8015e82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015e84:	4798      	blx	r3
 8015e86:	e013      	b.n	8015eb0 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8015e88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015e8c:	d0f7      	beq.n	8015e7e <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8015e8e:	d804      	bhi.n	8015e9a <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 8015e90:	2b80      	cmp	r3, #128	; 0x80
 8015e92:	d0f4      	beq.n	8015e7e <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8015e94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015e98:	e7f0      	b.n	8015e7c <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 8015e9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8015e9e:	d0ee      	beq.n	8015e7e <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8015ea0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8015ea4:	e7e5      	b.n	8015e72 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 8015ea6:	6823      	ldr	r3, [r4, #0]
 8015ea8:	7f01      	ldrb	r1, [r0, #28]
 8015eaa:	4620      	mov	r0, r4
 8015eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015eae:	4798      	blx	r3
 8015eb0:	6823      	ldr	r3, [r4, #0]
 8015eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015eb4:	e006      	b.n	8015ec4 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8015eb6:	6823      	ldr	r3, [r4, #0]
 8015eb8:	7f01      	ldrb	r1, [r0, #28]
 8015eba:	4620      	mov	r0, r4
 8015ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015ebe:	4798      	blx	r3
 8015ec0:	6823      	ldr	r3, [r4, #0]
 8015ec2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015ec4:	4629      	mov	r1, r5
 8015ec6:	4620      	mov	r0, r4
 8015ec8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015ecc:	4718      	bx	r3
 8015ece:	6823      	ldr	r3, [r4, #0]
 8015ed0:	4620      	mov	r0, r4
 8015ed2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015ed4:	4798      	blx	r3
 8015ed6:	e7f3      	b.n	8015ec0 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

08015ed8 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8015ed8:	4770      	bx	lr

08015eda <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8015eda:	4770      	bx	lr

08015edc <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8015edc:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 8015ee0:	b510      	push	{r4, lr}
 8015ee2:	1ad2      	subs	r2, r2, r3
 8015ee4:	2a00      	cmp	r2, #0
 8015ee6:	bfdc      	itt	le
 8015ee8:	6884      	ldrle	r4, [r0, #8]
 8015eea:	1912      	addle	r2, r2, r4
 8015eec:	2a01      	cmp	r2, #1
 8015eee:	dd16      	ble.n	8015f1e <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 8015ef0:	6842      	ldr	r2, [r0, #4]
 8015ef2:	2424      	movs	r4, #36	; 0x24
 8015ef4:	fb04 2303 	mla	r3, r4, r3, r2
 8015ef8:	f101 0220 	add.w	r2, r1, #32
 8015efc:	f851 4b04 	ldr.w	r4, [r1], #4
 8015f00:	4291      	cmp	r1, r2
 8015f02:	f843 4b04 	str.w	r4, [r3], #4
 8015f06:	d1f9      	bne.n	8015efc <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 8015f08:	780a      	ldrb	r2, [r1, #0]
 8015f0a:	701a      	strb	r2, [r3, #0]
 8015f0c:	68c3      	ldr	r3, [r0, #12]
 8015f0e:	6882      	ldr	r2, [r0, #8]
 8015f10:	f3bf 8f5b 	dmb	ish
 8015f14:	3301      	adds	r3, #1
 8015f16:	429a      	cmp	r2, r3
 8015f18:	bfd8      	it	le
 8015f1a:	1a9b      	suble	r3, r3, r2
 8015f1c:	60c3      	str	r3, [r0, #12]
 8015f1e:	bd10      	pop	{r4, pc}

08015f20 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8015f20:	6903      	ldr	r3, [r0, #16]
 8015f22:	6882      	ldr	r2, [r0, #8]
 8015f24:	f3bf 8f5b 	dmb	ish
 8015f28:	3301      	adds	r3, #1
 8015f2a:	429a      	cmp	r2, r3
 8015f2c:	bfd8      	it	le
 8015f2e:	1a9b      	suble	r3, r3, r2
 8015f30:	6103      	str	r3, [r0, #16]
 8015f32:	4770      	bx	lr

08015f34 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8015f34:	b570      	push	{r4, r5, r6, lr}
 8015f36:	4604      	mov	r4, r0
 8015f38:	460e      	mov	r6, r1
 8015f3a:	6860      	ldr	r0, [r4, #4]
 8015f3c:	6803      	ldr	r3, [r0, #0]
 8015f3e:	685b      	ldr	r3, [r3, #4]
 8015f40:	4798      	blx	r3
 8015f42:	2800      	cmp	r0, #0
 8015f44:	d1f9      	bne.n	8015f3a <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 8015f46:	4d0d      	ldr	r5, [pc, #52]	; (8015f7c <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 8015f48:	6828      	ldr	r0, [r5, #0]
 8015f4a:	6803      	ldr	r3, [r0, #0]
 8015f4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015f4e:	4798      	blx	r3
 8015f50:	f7fb f974 	bl	801123c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8015f54:	6828      	ldr	r0, [r5, #0]
 8015f56:	2101      	movs	r1, #1
 8015f58:	f7ff ff2a 	bl	8015db0 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8015f5c:	6860      	ldr	r0, [r4, #4]
 8015f5e:	4631      	mov	r1, r6
 8015f60:	6803      	ldr	r3, [r0, #0]
 8015f62:	689b      	ldr	r3, [r3, #8]
 8015f64:	4798      	blx	r3
 8015f66:	6823      	ldr	r3, [r4, #0]
 8015f68:	4620      	mov	r0, r4
 8015f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015f6c:	4798      	blx	r3
 8015f6e:	6828      	ldr	r0, [r5, #0]
 8015f70:	6803      	ldr	r3, [r0, #0]
 8015f72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015f76:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015f78:	4718      	bx	r3
 8015f7a:	bf00      	nop
 8015f7c:	20024428 	.word	0x20024428

08015f80 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8015f80:	b508      	push	{r3, lr}
 8015f82:	f7fb f941 	bl	8011208 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8015f86:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8015f8a:	f7fb b94b 	b.w	8011224 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08015f8e <_ZN8touchgfx13DMA_Interface5startEv>:
 8015f8e:	b510      	push	{r4, lr}
 8015f90:	4604      	mov	r4, r0
 8015f92:	6840      	ldr	r0, [r0, #4]
 8015f94:	6803      	ldr	r3, [r0, #0]
 8015f96:	681b      	ldr	r3, [r3, #0]
 8015f98:	4798      	blx	r3
 8015f9a:	b948      	cbnz	r0, 8015fb0 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8015f9c:	7a63      	ldrb	r3, [r4, #9]
 8015f9e:	b13b      	cbz	r3, 8015fb0 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8015fa0:	7a23      	ldrb	r3, [r4, #8]
 8015fa2:	b92b      	cbnz	r3, 8015fb0 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8015fa4:	6823      	ldr	r3, [r4, #0]
 8015fa6:	4620      	mov	r0, r4
 8015fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015faa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015fae:	4718      	bx	r3
 8015fb0:	bd10      	pop	{r4, pc}

08015fb2 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8015fb2:	b570      	push	{r4, r5, r6, lr}
 8015fb4:	4604      	mov	r4, r0
 8015fb6:	6840      	ldr	r0, [r0, #4]
 8015fb8:	6803      	ldr	r3, [r0, #0]
 8015fba:	681b      	ldr	r3, [r3, #0]
 8015fbc:	4798      	blx	r3
 8015fbe:	4605      	mov	r5, r0
 8015fc0:	b930      	cbnz	r0, 8015fd0 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8015fc2:	7a23      	ldrb	r3, [r4, #8]
 8015fc4:	b123      	cbz	r3, 8015fd0 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8015fc6:	6860      	ldr	r0, [r4, #4]
 8015fc8:	6803      	ldr	r3, [r0, #0]
 8015fca:	695b      	ldr	r3, [r3, #20]
 8015fcc:	4798      	blx	r3
 8015fce:	7225      	strb	r5, [r4, #8]
 8015fd0:	6860      	ldr	r0, [r4, #4]
 8015fd2:	6803      	ldr	r3, [r0, #0]
 8015fd4:	681b      	ldr	r3, [r3, #0]
 8015fd6:	4798      	blx	r3
 8015fd8:	b928      	cbnz	r0, 8015fe6 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8015fda:	6823      	ldr	r3, [r4, #0]
 8015fdc:	4620      	mov	r0, r4
 8015fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015fe0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015fe4:	4718      	bx	r3
 8015fe6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015fea:	f7fb b933 	b.w	8011254 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>
	...

08015ff0 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8015ff0:	b510      	push	{r4, lr}
 8015ff2:	6082      	str	r2, [r0, #8]
 8015ff4:	2200      	movs	r2, #0
 8015ff6:	4c03      	ldr	r4, [pc, #12]	; (8016004 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8015ff8:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8015ffc:	e9c0 4100 	strd	r4, r1, [r0]
 8016000:	bd10      	pop	{r4, pc}
 8016002:	bf00      	nop
 8016004:	0802af38 	.word	0x0802af38

08016008 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8016008:	6840      	ldr	r0, [r0, #4]
 801600a:	6803      	ldr	r3, [r0, #0]
 801600c:	681b      	ldr	r3, [r3, #0]
 801600e:	4718      	bx	r3

08016010 <_ZN8touchgfx8TextArea8setWidthEs>:
 8016010:	b530      	push	{r4, r5, lr}
 8016012:	b085      	sub	sp, #20
 8016014:	6803      	ldr	r3, [r0, #0]
 8016016:	4604      	mov	r4, r0
 8016018:	8101      	strh	r1, [r0, #8]
 801601a:	466d      	mov	r5, sp
 801601c:	4601      	mov	r1, r0
 801601e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8016022:	343c      	adds	r4, #60	; 0x3c
 8016024:	4628      	mov	r0, r5
 8016026:	4798      	blx	r3
 8016028:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801602c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8016030:	b005      	add	sp, #20
 8016032:	bd30      	pop	{r4, r5, pc}

08016034 <_ZN8touchgfx8TextArea9setHeightEs>:
 8016034:	b530      	push	{r4, r5, lr}
 8016036:	b085      	sub	sp, #20
 8016038:	6803      	ldr	r3, [r0, #0]
 801603a:	4604      	mov	r4, r0
 801603c:	8141      	strh	r1, [r0, #10]
 801603e:	466d      	mov	r5, sp
 8016040:	4601      	mov	r1, r0
 8016042:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8016046:	343c      	adds	r4, #60	; 0x3c
 8016048:	4628      	mov	r0, r5
 801604a:	4798      	blx	r3
 801604c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8016050:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8016054:	b005      	add	sp, #20
 8016056:	bd30      	pop	{r4, r5, pc}

08016058 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
 8016058:	2200      	movs	r2, #0
 801605a:	8002      	strh	r2, [r0, #0]
 801605c:	8042      	strh	r2, [r0, #2]
 801605e:	8082      	strh	r2, [r0, #4]
 8016060:	80c2      	strh	r2, [r0, #6]
 8016062:	4770      	bx	lr

08016064 <_ZN8touchgfx8TextArea8setAlphaEh>:
 8016064:	f880 1036 	strb.w	r1, [r0, #54]	; 0x36
 8016068:	4770      	bx	lr
	...

0801606c <_ZN8touchgfx8TextArea12setBaselineYEs>:
 801606c:	b570      	push	{r4, r5, r6, lr}
 801606e:	6803      	ldr	r3, [r0, #0]
 8016070:	4604      	mov	r4, r0
 8016072:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8016074:	460d      	mov	r5, r1
 8016076:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 8016078:	4b08      	ldr	r3, [pc, #32]	; (801609c <_ZN8touchgfx8TextArea12setBaselineYEs+0x30>)
 801607a:	681b      	ldr	r3, [r3, #0]
 801607c:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8016080:	4b07      	ldr	r3, [pc, #28]	; (80160a0 <_ZN8touchgfx8TextArea12setBaselineYEs+0x34>)
 8016082:	681b      	ldr	r3, [r3, #0]
 8016084:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8016088:	6803      	ldr	r3, [r0, #0]
 801608a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801608c:	4798      	blx	r3
 801608e:	1a29      	subs	r1, r5, r0
 8016090:	4633      	mov	r3, r6
 8016092:	4620      	mov	r0, r4
 8016094:	b209      	sxth	r1, r1
 8016096:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801609a:	4718      	bx	r3
 801609c:	20024478 	.word	0x20024478
 80160a0:	20024480 	.word	0x20024480

080160a4 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
 80160a4:	b570      	push	{r4, r5, r6, lr}
 80160a6:	6803      	ldr	r3, [r0, #0]
 80160a8:	4604      	mov	r4, r0
 80160aa:	4615      	mov	r5, r2
 80160ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80160ae:	4798      	blx	r3
 80160b0:	6823      	ldr	r3, [r4, #0]
 80160b2:	4629      	mov	r1, r5
 80160b4:	4620      	mov	r0, r4
 80160b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80160b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80160bc:	4718      	bx	r3

080160be <_ZNK8touchgfx8TextArea12getWildcard1Ev>:
 80160be:	2000      	movs	r0, #0
 80160c0:	4770      	bx	lr

080160c2 <_ZNK8touchgfx8TextArea12getWildcard2Ev>:
 80160c2:	2000      	movs	r0, #0
 80160c4:	4770      	bx	lr
	...

080160c8 <_ZNK8touchgfx8TextArea12getAlignmentEv>:
 80160c8:	4b07      	ldr	r3, [pc, #28]	; (80160e8 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x20>)
 80160ca:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 80160cc:	881b      	ldrh	r3, [r3, #0]
 80160ce:	4293      	cmp	r3, r2
 80160d0:	bf81      	itttt	hi
 80160d2:	4b06      	ldrhi	r3, [pc, #24]	; (80160ec <_ZNK8touchgfx8TextArea12getAlignmentEv+0x24>)
 80160d4:	681b      	ldrhi	r3, [r3, #0]
 80160d6:	eb03 0342 	addhi.w	r3, r3, r2, lsl #1
 80160da:	7858      	ldrbhi	r0, [r3, #1]
 80160dc:	bf8c      	ite	hi
 80160de:	f000 0003 	andhi.w	r0, r0, #3
 80160e2:	2000      	movls	r0, #0
 80160e4:	4770      	bx	lr
 80160e6:	bf00      	nop
 80160e8:	2002447c 	.word	0x2002447c
 80160ec:	20024478 	.word	0x20024478

080160f0 <_ZNK8touchgfx8TextArea13getTextHeightEv>:
 80160f0:	4b11      	ldr	r3, [pc, #68]	; (8016138 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x48>)
 80160f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80160f6:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 80160f8:	4604      	mov	r4, r0
 80160fa:	881b      	ldrh	r3, [r3, #0]
 80160fc:	428b      	cmp	r3, r1
 80160fe:	d918      	bls.n	8016132 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x42>
 8016100:	6803      	ldr	r3, [r0, #0]
 8016102:	6f9d      	ldr	r5, [r3, #120]	; 0x78
 8016104:	4b0d      	ldr	r3, [pc, #52]	; (801613c <_ZNK8touchgfx8TextArea13getTextHeightEv+0x4c>)
 8016106:	6818      	ldr	r0, [r3, #0]
 8016108:	f7f9 fa96 	bl	800f638 <_ZNK8touchgfx5Texts7getTextEt>
 801610c:	6823      	ldr	r3, [r4, #0]
 801610e:	4606      	mov	r6, r0
 8016110:	4620      	mov	r0, r4
 8016112:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8016114:	4798      	blx	r3
 8016116:	6823      	ldr	r3, [r4, #0]
 8016118:	4607      	mov	r7, r0
 801611a:	4620      	mov	r0, r4
 801611c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8016120:	4798      	blx	r3
 8016122:	463a      	mov	r2, r7
 8016124:	4603      	mov	r3, r0
 8016126:	4631      	mov	r1, r6
 8016128:	4620      	mov	r0, r4
 801612a:	46ac      	mov	ip, r5
 801612c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016130:	4760      	bx	ip
 8016132:	2000      	movs	r0, #0
 8016134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016138:	2002447c 	.word	0x2002447c
 801613c:	20024484 	.word	0x20024484

08016140 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 8016140:	4b18      	ldr	r3, [pc, #96]	; (80161a4 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 8016142:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016146:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8016148:	4604      	mov	r4, r0
 801614a:	881b      	ldrh	r3, [r3, #0]
 801614c:	428b      	cmp	r3, r1
 801614e:	d926      	bls.n	801619e <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5e>
 8016150:	4b15      	ldr	r3, [pc, #84]	; (80161a8 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 8016152:	681b      	ldr	r3, [r3, #0]
 8016154:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 8016158:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 801615c:	4b13      	ldr	r3, [pc, #76]	; (80161ac <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 801615e:	7855      	ldrb	r5, [r2, #1]
 8016160:	681b      	ldr	r3, [r3, #0]
 8016162:	f3c5 0581 	ubfx	r5, r5, #2, #2
 8016166:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 801616a:	6833      	ldr	r3, [r6, #0]
 801616c:	69df      	ldr	r7, [r3, #28]
 801616e:	4b10      	ldr	r3, [pc, #64]	; (80161b0 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 8016170:	6818      	ldr	r0, [r3, #0]
 8016172:	f7f9 fa61 	bl	800f638 <_ZNK8touchgfx5Texts7getTextEt>
 8016176:	6823      	ldr	r3, [r4, #0]
 8016178:	4680      	mov	r8, r0
 801617a:	4620      	mov	r0, r4
 801617c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801617e:	4798      	blx	r3
 8016180:	6823      	ldr	r3, [r4, #0]
 8016182:	4681      	mov	r9, r0
 8016184:	4620      	mov	r0, r4
 8016186:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801618a:	4798      	blx	r3
 801618c:	464b      	mov	r3, r9
 801618e:	9000      	str	r0, [sp, #0]
 8016190:	4642      	mov	r2, r8
 8016192:	4629      	mov	r1, r5
 8016194:	4630      	mov	r0, r6
 8016196:	47b8      	blx	r7
 8016198:	b003      	add	sp, #12
 801619a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801619e:	2000      	movs	r0, #0
 80161a0:	e7fa      	b.n	8016198 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x58>
 80161a2:	bf00      	nop
 80161a4:	2002447c 	.word	0x2002447c
 80161a8:	20024478 	.word	0x20024478
 80161ac:	20024480 	.word	0x20024480
 80161b0:	20024484 	.word	0x20024484

080161b4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 80161b4:	b40e      	push	{r1, r2, r3}
 80161b6:	4b30      	ldr	r3, [pc, #192]	; (8016278 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc4>)
 80161b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80161bc:	881a      	ldrh	r2, [r3, #0]
 80161be:	b09d      	sub	sp, #116	; 0x74
 80161c0:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 80161c2:	4604      	mov	r4, r0
 80161c4:	429a      	cmp	r2, r3
 80161c6:	d954      	bls.n	8016272 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xbe>
 80161c8:	aa26      	add	r2, sp, #152	; 0x98
 80161ca:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 801627c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 80161ce:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8016280 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xcc>
 80161d2:	9202      	str	r2, [sp, #8]
 80161d4:	f8d9 2000 	ldr.w	r2, [r9]
 80161d8:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 80161dc:	f8d8 3000 	ldr.w	r3, [r8]
 80161e0:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 80161e4:	682b      	ldr	r3, [r5, #0]
 80161e6:	4628      	mov	r0, r5
 80161e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80161ea:	4798      	blx	r3
 80161ec:	4606      	mov	r6, r0
 80161ee:	b207      	sxth	r7, r0
 80161f0:	a803      	add	r0, sp, #12
 80161f2:	f003 fcdd 	bl	8019bb0 <_ZN8touchgfx12TextProviderC1Ev>
 80161f6:	682b      	ldr	r3, [r5, #0]
 80161f8:	4628      	mov	r0, r5
 80161fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80161fc:	4798      	blx	r3
 80161fe:	682b      	ldr	r3, [r5, #0]
 8016200:	4682      	mov	sl, r0
 8016202:	4628      	mov	r0, r5
 8016204:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016206:	4798      	blx	r3
 8016208:	4653      	mov	r3, sl
 801620a:	9000      	str	r0, [sp, #0]
 801620c:	a803      	add	r0, sp, #12
 801620e:	9a02      	ldr	r2, [sp, #8]
 8016210:	9925      	ldr	r1, [sp, #148]	; 0x94
 8016212:	f003 fd28 	bl	8019c66 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8016216:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8016218:	f8d9 3000 	ldr.w	r3, [r9]
 801621c:	f894 c037 	ldrb.w	ip, [r4, #55]	; 0x37
 8016220:	8925      	ldrh	r5, [r4, #8]
 8016222:	eb03 0142 	add.w	r1, r3, r2, lsl #1
 8016226:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 801622a:	eba5 050c 	sub.w	r5, r5, ip
 801622e:	784a      	ldrb	r2, [r1, #1]
 8016230:	f8d8 3000 	ldr.w	r3, [r8]
 8016234:	b22d      	sxth	r5, r5
 8016236:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
 801623a:	f3c2 0281 	ubfx	r2, r2, #2, #2
 801623e:	9500      	str	r5, [sp, #0]
 8016240:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8016244:	a803      	add	r0, sp, #12
 8016246:	f001 fbb5 	bl	80179b4 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 801624a:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 801624e:	b203      	sxth	r3, r0
 8016250:	18b9      	adds	r1, r7, r2
 8016252:	2900      	cmp	r1, #0
 8016254:	dd0b      	ble.n	801626e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xba>
 8016256:	3b01      	subs	r3, #1
 8016258:	fb13 f302 	smulbb	r3, r3, r2
 801625c:	fb16 3300 	smlabb	r3, r6, r0, r3
 8016260:	b21f      	sxth	r7, r3
 8016262:	4638      	mov	r0, r7
 8016264:	b01d      	add	sp, #116	; 0x74
 8016266:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801626a:	b003      	add	sp, #12
 801626c:	4770      	bx	lr
 801626e:	2b00      	cmp	r3, #0
 8016270:	dcf7      	bgt.n	8016262 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 8016272:	2700      	movs	r7, #0
 8016274:	e7f5      	b.n	8016262 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 8016276:	bf00      	nop
 8016278:	2002447c 	.word	0x2002447c
 801627c:	20024478 	.word	0x20024478
 8016280:	20024480 	.word	0x20024480

08016284 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>:
 8016284:	4bbd      	ldr	r3, [pc, #756]	; (801657c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2f8>)
 8016286:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801628a:	460c      	mov	r4, r1
 801628c:	881b      	ldrh	r3, [r3, #0]
 801628e:	8d89      	ldrh	r1, [r1, #44]	; 0x2c
 8016290:	b0a9      	sub	sp, #164	; 0xa4
 8016292:	4680      	mov	r8, r0
 8016294:	428b      	cmp	r3, r1
 8016296:	d809      	bhi.n	80162ac <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28>
 8016298:	2300      	movs	r3, #0
 801629a:	f04f 32ff 	mov.w	r2, #4294967295
 801629e:	6083      	str	r3, [r0, #8]
 80162a0:	e9c0 3200 	strd	r3, r2, [r0]
 80162a4:	4640      	mov	r0, r8
 80162a6:	b029      	add	sp, #164	; 0xa4
 80162a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80162ac:	4eb4      	ldr	r6, [pc, #720]	; (8016580 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>)
 80162ae:	6833      	ldr	r3, [r6, #0]
 80162b0:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 80162b4:	4bb3      	ldr	r3, [pc, #716]	; (8016584 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x300>)
 80162b6:	681b      	ldr	r3, [r3, #0]
 80162b8:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 80162bc:	4bb2      	ldr	r3, [pc, #712]	; (8016588 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
 80162be:	6818      	ldr	r0, [r3, #0]
 80162c0:	f7f9 f9ba 	bl	800f638 <_ZNK8touchgfx5Texts7getTextEt>
 80162c4:	682b      	ldr	r3, [r5, #0]
 80162c6:	4681      	mov	r9, r0
 80162c8:	4628      	mov	r0, r5
 80162ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80162cc:	4798      	blx	r3
 80162ce:	8ea7      	ldrh	r7, [r4, #52]	; 0x34
 80162d0:	b203      	sxth	r3, r0
 80162d2:	4682      	mov	sl, r0
 80162d4:	4407      	add	r7, r0
 80162d6:	a80f      	add	r0, sp, #60	; 0x3c
 80162d8:	9304      	str	r3, [sp, #16]
 80162da:	b2bb      	uxth	r3, r7
 80162dc:	9303      	str	r3, [sp, #12]
 80162de:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 80162e2:	2b00      	cmp	r3, #0
 80162e4:	f040 80a5 	bne.w	8016432 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x1ae>
 80162e8:	f003 fc62 	bl	8019bb0 <_ZN8touchgfx12TextProviderC1Ev>
 80162ec:	682b      	ldr	r3, [r5, #0]
 80162ee:	4628      	mov	r0, r5
 80162f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80162f2:	4798      	blx	r3
 80162f4:	682b      	ldr	r3, [r5, #0]
 80162f6:	4606      	mov	r6, r0
 80162f8:	4628      	mov	r0, r5
 80162fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80162fc:	4798      	blx	r3
 80162fe:	6823      	ldr	r3, [r4, #0]
 8016300:	4607      	mov	r7, r0
 8016302:	4620      	mov	r0, r4
 8016304:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8016306:	4798      	blx	r3
 8016308:	6823      	ldr	r3, [r4, #0]
 801630a:	4683      	mov	fp, r0
 801630c:	4620      	mov	r0, r4
 801630e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8016312:	4798      	blx	r3
 8016314:	463b      	mov	r3, r7
 8016316:	4649      	mov	r1, r9
 8016318:	4632      	mov	r2, r6
 801631a:	2600      	movs	r6, #0
 801631c:	e9cd b000 	strd	fp, r0, [sp]
 8016320:	a80f      	add	r0, sp, #60	; 0x3c
 8016322:	4637      	mov	r7, r6
 8016324:	f003 fcb4 	bl	8019c90 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 8016328:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801632c:	f8df b250 	ldr.w	fp, [pc, #592]	; 8016580 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>
 8016330:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8016334:	bf0c      	ite	eq
 8016336:	f9b4 900a 	ldrsheq.w	r9, [r4, #10]
 801633a:	f9b4 9008 	ldrshne.w	r9, [r4, #8]
 801633e:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8016340:	4629      	mov	r1, r5
 8016342:	f8db 3000 	ldr.w	r3, [fp]
 8016346:	a80f      	add	r0, sp, #60	; 0x3c
 8016348:	3701      	adds	r7, #1
 801634a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 801634e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8016352:	b2bf      	uxth	r7, r7
 8016354:	785b      	ldrb	r3, [r3, #1]
 8016356:	f3c3 0381 	ubfx	r3, r3, #2, #2
 801635a:	f001 f846 	bl	80173ea <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 801635e:	9b03      	ldr	r3, [sp, #12]
 8016360:	4286      	cmp	r6, r0
 8016362:	eba9 0903 	sub.w	r9, r9, r3
 8016366:	bfb8      	it	lt
 8016368:	4606      	movlt	r6, r0
 801636a:	a80f      	add	r0, sp, #60	; 0x3c
 801636c:	fa0f f989 	sxth.w	r9, r9
 8016370:	b236      	sxth	r6, r6
 8016372:	f003 fc44 	bl	8019bfe <_ZN8touchgfx12TextProvider11endOfStringEv>
 8016376:	b918      	cbnz	r0, 8016380 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 8016378:	7a2b      	ldrb	r3, [r5, #8]
 801637a:	444b      	add	r3, r9
 801637c:	2b00      	cmp	r3, #0
 801637e:	dcde      	bgt.n	801633e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xba>
 8016380:	9b03      	ldr	r3, [sp, #12]
 8016382:	4620      	mov	r0, r4
 8016384:	9a04      	ldr	r2, [sp, #16]
 8016386:	fb13 f707 	smulbb	r7, r3, r7
 801638a:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801638c:	f895 9009 	ldrb.w	r9, [r5, #9]
 8016390:	1aff      	subs	r7, r7, r3
 8016392:	b2bf      	uxth	r7, r7
 8016394:	b23b      	sxth	r3, r7
 8016396:	429a      	cmp	r2, r3
 8016398:	bfa8      	it	ge
 801639a:	4657      	movge	r7, sl
 801639c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80163a0:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 80163a4:	6823      	ldr	r3, [r4, #0]
 80163a6:	444f      	add	r7, r9
 80163a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80163aa:	bf08      	it	eq
 80163ac:	f9b4 a008 	ldrsheq.w	sl, [r4, #8]
 80163b0:	fa1f f987 	uxth.w	r9, r7
 80163b4:	bf18      	it	ne
 80163b6:	f9b4 a00a 	ldrshne.w	sl, [r4, #10]
 80163ba:	4798      	blx	r3
 80163bc:	2801      	cmp	r0, #1
 80163be:	fa0f f789 	sxth.w	r7, r9
 80163c2:	b2b3      	uxth	r3, r6
 80163c4:	f000 80e2 	beq.w	801658c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x308>
 80163c8:	2802      	cmp	r0, #2
 80163ca:	f894 6037 	ldrb.w	r6, [r4, #55]	; 0x37
 80163ce:	f000 80e3 	beq.w	8016598 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x314>
 80163d2:	7aea      	ldrb	r2, [r5, #11]
 80163d4:	b236      	sxth	r6, r6
 80163d6:	7b2d      	ldrb	r5, [r5, #12]
 80163d8:	1ab6      	subs	r6, r6, r2
 80163da:	442a      	add	r2, r5
 80163dc:	fa1f fa86 	uxth.w	sl, r6
 80163e0:	4413      	add	r3, r2
 80163e2:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 80163e6:	fa0f fb8a 	sxth.w	fp, sl
 80163ea:	b29b      	uxth	r3, r3
 80163ec:	2a02      	cmp	r2, #2
 80163ee:	b21e      	sxth	r6, r3
 80163f0:	f000 80d6 	beq.w	80165a0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x31c>
 80163f4:	2a03      	cmp	r2, #3
 80163f6:	f000 80de 	beq.w	80165b6 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x332>
 80163fa:	2a01      	cmp	r2, #1
 80163fc:	f040 80e6 	bne.w	80165cc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x348>
 8016400:	8925      	ldrh	r5, [r4, #8]
 8016402:	4633      	mov	r3, r6
 8016404:	463e      	mov	r6, r7
 8016406:	eba5 0909 	sub.w	r9, r5, r9
 801640a:	461f      	mov	r7, r3
 801640c:	465d      	mov	r5, fp
 801640e:	fa0f fb89 	sxth.w	fp, r9
 8016412:	4b5d      	ldr	r3, [pc, #372]	; (8016588 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
 8016414:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8016416:	6818      	ldr	r0, [r3, #0]
 8016418:	f7f9 f90e 	bl	800f638 <_ZNK8touchgfx5Texts7getTextEt>
 801641c:	f8a8 b000 	strh.w	fp, [r8]
 8016420:	f8a8 5002 	strh.w	r5, [r8, #2]
 8016424:	f8a8 6004 	strh.w	r6, [r8, #4]
 8016428:	f8a8 7006 	strh.w	r7, [r8, #6]
 801642c:	f8c8 0008 	str.w	r0, [r8, #8]
 8016430:	e738      	b.n	80162a4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x20>
 8016432:	f003 fbbd 	bl	8019bb0 <_ZN8touchgfx12TextProviderC1Ev>
 8016436:	682b      	ldr	r3, [r5, #0]
 8016438:	4628      	mov	r0, r5
 801643a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801643c:	4798      	blx	r3
 801643e:	682b      	ldr	r3, [r5, #0]
 8016440:	4607      	mov	r7, r0
 8016442:	4628      	mov	r0, r5
 8016444:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016446:	4798      	blx	r3
 8016448:	6823      	ldr	r3, [r4, #0]
 801644a:	4683      	mov	fp, r0
 801644c:	4620      	mov	r0, r4
 801644e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8016450:	4798      	blx	r3
 8016452:	6822      	ldr	r2, [r4, #0]
 8016454:	9005      	str	r0, [sp, #20]
 8016456:	4620      	mov	r0, r4
 8016458:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 801645c:	4790      	blx	r2
 801645e:	9b05      	ldr	r3, [sp, #20]
 8016460:	463a      	mov	r2, r7
 8016462:	4649      	mov	r1, r9
 8016464:	9001      	str	r0, [sp, #4]
 8016466:	a80f      	add	r0, sp, #60	; 0x3c
 8016468:	9300      	str	r3, [sp, #0]
 801646a:	465b      	mov	r3, fp
 801646c:	f003 fc10 	bl	8019c90 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 8016470:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8016474:	f9b4 9008 	ldrsh.w	r9, [r4, #8]
 8016478:	af0f      	add	r7, sp, #60	; 0x3c
 801647a:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 801647e:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8016482:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8016484:	bf0a      	itet	eq
 8016486:	464a      	moveq	r2, r9
 8016488:	461a      	movne	r2, r3
 801648a:	4699      	moveq	r9, r3
 801648c:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 8016490:	f894 0039 	ldrb.w	r0, [r4, #57]	; 0x39
 8016494:	1ad2      	subs	r2, r2, r3
 8016496:	6833      	ldr	r3, [r6, #0]
 8016498:	f9b4 6034 	ldrsh.w	r6, [r4, #52]	; 0x34
 801649c:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 80164a0:	7859      	ldrb	r1, [r3, #1]
 80164a2:	2300      	movs	r3, #0
 80164a4:	9707      	str	r7, [sp, #28]
 80164a6:	f3c1 0181 	ubfx	r1, r1, #2, #2
 80164aa:	f8ad 3018 	strh.w	r3, [sp, #24]
 80164ae:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 80164b2:	f88d 1020 	strb.w	r1, [sp, #32]
 80164b6:	9509      	str	r5, [sp, #36]	; 0x24
 80164b8:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 80164bc:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 80164c0:	f8ad 602c 	strh.w	r6, [sp, #44]	; 0x2c
 80164c4:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 80164c8:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 80164cc:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 80164d0:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 80164d4:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 80164d8:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 80164dc:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 80164e0:	b350      	cbz	r0, 8016538 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 80164e2:	682b      	ldr	r3, [r5, #0]
 80164e4:	4628      	mov	r0, r5
 80164e6:	695b      	ldr	r3, [r3, #20]
 80164e8:	4798      	blx	r3
 80164ea:	4607      	mov	r7, r0
 80164ec:	b320      	cbz	r0, 8016538 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 80164ee:	9809      	ldr	r0, [sp, #36]	; 0x24
 80164f0:	4639      	mov	r1, r7
 80164f2:	6803      	ldr	r3, [r0, #0]
 80164f4:	68db      	ldr	r3, [r3, #12]
 80164f6:	4798      	blx	r3
 80164f8:	4606      	mov	r6, r0
 80164fa:	b1e8      	cbz	r0, 8016538 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 80164fc:	7b43      	ldrb	r3, [r0, #13]
 80164fe:	7a82      	ldrb	r2, [r0, #10]
 8016500:	005b      	lsls	r3, r3, #1
 8016502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016506:	4313      	orrs	r3, r2
 8016508:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 801650c:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
 8016510:	2b06      	cmp	r3, #6
 8016512:	d111      	bne.n	8016538 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 8016514:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016516:	4632      	mov	r2, r6
 8016518:	4639      	mov	r1, r7
 801651a:	6803      	ldr	r3, [r0, #0]
 801651c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801651e:	4798      	blx	r3
 8016520:	7b73      	ldrb	r3, [r6, #13]
 8016522:	005b      	lsls	r3, r3, #1
 8016524:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8016528:	7ab3      	ldrb	r3, [r6, #10]
 801652a:	4313      	orrs	r3, r2
 801652c:	4418      	add	r0, r3
 801652e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8016532:	4418      	add	r0, r3
 8016534:	f8ad 0038 	strh.w	r0, [sp, #56]	; 0x38
 8016538:	2600      	movs	r6, #0
 801653a:	4637      	mov	r7, r6
 801653c:	a806      	add	r0, sp, #24
 801653e:	3701      	adds	r7, #1
 8016540:	f001 f935 	bl	80177ae <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8016544:	f8bd 0036 	ldrh.w	r0, [sp, #54]	; 0x36
 8016548:	9b03      	ldr	r3, [sp, #12]
 801654a:	b2bf      	uxth	r7, r7
 801654c:	4286      	cmp	r6, r0
 801654e:	eba9 0903 	sub.w	r9, r9, r3
 8016552:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8016556:	bfb8      	it	lt
 8016558:	4606      	movlt	r6, r0
 801655a:	fa0f f989 	sxth.w	r9, r9
 801655e:	b236      	sxth	r6, r6
 8016560:	2b00      	cmp	r3, #0
 8016562:	f43f af0d 	beq.w	8016380 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 8016566:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 801656a:	2b00      	cmp	r3, #0
 801656c:	f47f af08 	bne.w	8016380 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 8016570:	7a2b      	ldrb	r3, [r5, #8]
 8016572:	444b      	add	r3, r9
 8016574:	2b00      	cmp	r3, #0
 8016576:	dce1      	bgt.n	801653c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b8>
 8016578:	e702      	b.n	8016380 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 801657a:	bf00      	nop
 801657c:	2002447c 	.word	0x2002447c
 8016580:	20024478 	.word	0x20024478
 8016584:	20024480 	.word	0x20024480
 8016588:	20024484 	.word	0x20024484
 801658c:	ebaa 0606 	sub.w	r6, sl, r6
 8016590:	2002      	movs	r0, #2
 8016592:	fb96 f6f0 	sdiv	r6, r6, r0
 8016596:	e71c      	b.n	80163d2 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x14e>
 8016598:	441e      	add	r6, r3
 801659a:	ebaa 0606 	sub.w	r6, sl, r6
 801659e:	e718      	b.n	80163d2 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x14e>
 80165a0:	8925      	ldrh	r5, [r4, #8]
 80165a2:	1aed      	subs	r5, r5, r3
 80165a4:	eba5 050a 	sub.w	r5, r5, sl
 80165a8:	fa0f fb85 	sxth.w	fp, r5
 80165ac:	8965      	ldrh	r5, [r4, #10]
 80165ae:	eba5 0509 	sub.w	r5, r5, r9
 80165b2:	b22d      	sxth	r5, r5
 80165b4:	e72d      	b.n	8016412 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
 80165b6:	8965      	ldrh	r5, [r4, #10]
 80165b8:	f04f 0b00 	mov.w	fp, #0
 80165bc:	1aed      	subs	r5, r5, r3
 80165be:	4633      	mov	r3, r6
 80165c0:	463e      	mov	r6, r7
 80165c2:	eba5 050a 	sub.w	r5, r5, sl
 80165c6:	461f      	mov	r7, r3
 80165c8:	b22d      	sxth	r5, r5
 80165ca:	e722      	b.n	8016412 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
 80165cc:	2500      	movs	r5, #0
 80165ce:	e720      	b.n	8016412 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>

080165d0 <_ZNK8touchgfx8TextArea17invalidateContentEv>:
 80165d0:	b513      	push	{r0, r1, r4, lr}
 80165d2:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
 80165d6:	4604      	mov	r4, r0
 80165d8:	b1fb      	cbz	r3, 801661a <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 80165da:	4b16      	ldr	r3, [pc, #88]	; (8016634 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x64>)
 80165dc:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 80165de:	881b      	ldrh	r3, [r3, #0]
 80165e0:	428b      	cmp	r3, r1
 80165e2:	d91a      	bls.n	801661a <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 80165e4:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 80165e8:	2b00      	cmp	r3, #0
 80165ea:	dd16      	ble.n	801661a <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 80165ec:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 80165f0:	2b00      	cmp	r3, #0
 80165f2:	dd12      	ble.n	801661a <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 80165f4:	4b10      	ldr	r3, [pc, #64]	; (8016638 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x68>)
 80165f6:	6818      	ldr	r0, [r3, #0]
 80165f8:	f7f9 f81e 	bl	800f638 <_ZNK8touchgfx5Texts7getTextEt>
 80165fc:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
 8016600:	6822      	ldr	r2, [r4, #0]
 8016602:	2b00      	cmp	r3, #0
 8016604:	db06      	blt.n	8016614 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 8016606:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 801660a:	2b00      	cmp	r3, #0
 801660c:	db02      	blt.n	8016614 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 801660e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8016610:	4298      	cmp	r0, r3
 8016612:	d004      	beq.n	801661e <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4e>
 8016614:	6953      	ldr	r3, [r2, #20]
 8016616:	4620      	mov	r0, r4
 8016618:	4798      	blx	r3
 801661a:	b002      	add	sp, #8
 801661c:	bd10      	pop	{r4, pc}
 801661e:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 8016622:	466b      	mov	r3, sp
 8016624:	6912      	ldr	r2, [r2, #16]
 8016626:	c903      	ldmia	r1, {r0, r1}
 8016628:	e883 0003 	stmia.w	r3, {r0, r1}
 801662c:	4619      	mov	r1, r3
 801662e:	4620      	mov	r0, r4
 8016630:	4790      	blx	r2
 8016632:	e7f2      	b.n	801661a <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8016634:	2002447c 	.word	0x2002447c
 8016638:	20024484 	.word	0x20024484

0801663c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 801663c:	4b45      	ldr	r3, [pc, #276]	; (8016754 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x118>)
 801663e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016642:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8016644:	b08e      	sub	sp, #56	; 0x38
 8016646:	881b      	ldrh	r3, [r3, #0]
 8016648:	4604      	mov	r4, r0
 801664a:	4293      	cmp	r3, r2
 801664c:	d97e      	bls.n	801674c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 801664e:	6808      	ldr	r0, [r1, #0]
 8016650:	ab05      	add	r3, sp, #20
 8016652:	6849      	ldr	r1, [r1, #4]
 8016654:	4d40      	ldr	r5, [pc, #256]	; (8016758 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x11c>)
 8016656:	c303      	stmia	r3!, {r0, r1}
 8016658:	4611      	mov	r1, r2
 801665a:	6828      	ldr	r0, [r5, #0]
 801665c:	f7f8 ffec 	bl	800f638 <_ZNK8touchgfx5Texts7getTextEt>
 8016660:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
 8016664:	2b00      	cmp	r3, #0
 8016666:	db11      	blt.n	801668c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 8016668:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 801666c:	2b00      	cmp	r3, #0
 801666e:	db0d      	blt.n	801668c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 8016670:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8016672:	4298      	cmp	r0, r3
 8016674:	d10a      	bne.n	801668c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 8016676:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 801667a:	ab09      	add	r3, sp, #36	; 0x24
 801667c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016680:	e883 0003 	stmia.w	r3, {r0, r1}
 8016684:	4619      	mov	r1, r3
 8016686:	a805      	add	r0, sp, #20
 8016688:	f7fe fcca 	bl	8015020 <_ZN8touchgfx4RectaNERKS0_>
 801668c:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8016690:	2b00      	cmp	r3, #0
 8016692:	dd5b      	ble.n	801674c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8016694:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8016698:	2b00      	cmp	r3, #0
 801669a:	dd57      	ble.n	801674c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 801669c:	4f2f      	ldr	r7, [pc, #188]	; (801675c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x120>)
 801669e:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 80166a0:	683b      	ldr	r3, [r7, #0]
 80166a2:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 80166a6:	4b2e      	ldr	r3, [pc, #184]	; (8016760 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x124>)
 80166a8:	681b      	ldr	r3, [r3, #0]
 80166aa:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 80166ae:	2e00      	cmp	r6, #0
 80166b0:	d04c      	beq.n	801674c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 80166b2:	6823      	ldr	r3, [r4, #0]
 80166b4:	4620      	mov	r0, r4
 80166b6:	f894 8036 	ldrb.w	r8, [r4, #54]	; 0x36
 80166ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80166bc:	4798      	blx	r3
 80166be:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 80166c0:	683b      	ldr	r3, [r7, #0]
 80166c2:	f9b4 c034 	ldrsh.w	ip, [r4, #52]	; 0x34
 80166c6:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80166ca:	f894 e038 	ldrb.w	lr, [r4, #56]	; 0x38
 80166ce:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 80166d2:	785b      	ldrb	r3, [r3, #1]
 80166d4:	f894 7037 	ldrb.w	r7, [r4, #55]	; 0x37
 80166d8:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80166dc:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80166de:	9609      	str	r6, [sp, #36]	; 0x24
 80166e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80166e4:	4b1f      	ldr	r3, [pc, #124]	; (8016764 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x128>)
 80166e6:	f88d 0028 	strb.w	r0, [sp, #40]	; 0x28
 80166ea:	681b      	ldr	r3, [r3, #0]
 80166ec:	f88d e02a 	strb.w	lr, [sp, #42]	; 0x2a
 80166f0:	910b      	str	r1, [sp, #44]	; 0x2c
 80166f2:	f8ad c030 	strh.w	ip, [sp, #48]	; 0x30
 80166f6:	f88d 8032 	strb.w	r8, [sp, #50]	; 0x32
 80166fa:	f88d 7033 	strb.w	r7, [sp, #51]	; 0x33
 80166fe:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
 8016702:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8016706:	b10a      	cbz	r2, 801670c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd0>
 8016708:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 801670a:	b906      	cbnz	r6, 801670e <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd2>
 801670c:	689e      	ldr	r6, [r3, #8]
 801670e:	af07      	add	r7, sp, #28
 8016710:	4621      	mov	r1, r4
 8016712:	4638      	mov	r0, r7
 8016714:	f002 fe96 	bl	8019444 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016718:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 801671a:	6828      	ldr	r0, [r5, #0]
 801671c:	f7f8 ff8c 	bl	800f638 <_ZNK8touchgfx5Texts7getTextEt>
 8016720:	6823      	ldr	r3, [r4, #0]
 8016722:	4605      	mov	r5, r0
 8016724:	4620      	mov	r0, r4
 8016726:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8016728:	4798      	blx	r3
 801672a:	6823      	ldr	r3, [r4, #0]
 801672c:	4680      	mov	r8, r0
 801672e:	4620      	mov	r0, r4
 8016730:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8016734:	4798      	blx	r3
 8016736:	ab09      	add	r3, sp, #36	; 0x24
 8016738:	9501      	str	r5, [sp, #4]
 801673a:	9300      	str	r3, [sp, #0]
 801673c:	ab05      	add	r3, sp, #20
 801673e:	e9cd 8002 	strd	r8, r0, [sp, #8]
 8016742:	4630      	mov	r0, r6
 8016744:	e897 0006 	ldmia.w	r7, {r1, r2}
 8016748:	f7f8 ff05 	bl	800f556 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 801674c:	b00e      	add	sp, #56	; 0x38
 801674e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016752:	bf00      	nop
 8016754:	2002447c 	.word	0x2002447c
 8016758:	20024484 	.word	0x20024484
 801675c:	20024478 	.word	0x20024478
 8016760:	20024480 	.word	0x20024480
 8016764:	20024428 	.word	0x20024428

08016768 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 8016768:	b538      	push	{r3, r4, r5, lr}
 801676a:	4b0e      	ldr	r3, [pc, #56]	; (80167a4 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>)
 801676c:	4604      	mov	r4, r0
 801676e:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8016770:	881b      	ldrh	r3, [r3, #0]
 8016772:	429a      	cmp	r2, r3
 8016774:	d214      	bcs.n	80167a0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 8016776:	6803      	ldr	r3, [r0, #0]
 8016778:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801677a:	4798      	blx	r3
 801677c:	6823      	ldr	r3, [r4, #0]
 801677e:	4605      	mov	r5, r0
 8016780:	4620      	mov	r0, r4
 8016782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016784:	4798      	blx	r3
 8016786:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801678a:	b22d      	sxth	r5, r5
 801678c:	4601      	mov	r1, r0
 801678e:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8016792:	bf06      	itte	eq
 8016794:	4602      	moveq	r2, r0
 8016796:	4629      	moveq	r1, r5
 8016798:	462a      	movne	r2, r5
 801679a:	4620      	mov	r0, r4
 801679c:	f7f8 f9a5 	bl	800eaea <_ZN8touchgfx8Drawable14setWidthHeightEss>
 80167a0:	bd38      	pop	{r3, r4, r5, pc}
 80167a2:	bf00      	nop
 80167a4:	2002447c 	.word	0x2002447c

080167a8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 80167a8:	b530      	push	{r4, r5, lr}
 80167aa:	888b      	ldrh	r3, [r1, #4]
 80167ac:	b085      	sub	sp, #20
 80167ae:	4604      	mov	r4, r0
 80167b0:	8583      	strh	r3, [r0, #44]	; 0x2c
 80167b2:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 80167b6:	b923      	cbnz	r3, 80167c2 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 80167b8:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 80167bc:	b90b      	cbnz	r3, 80167c2 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 80167be:	f7ff ffd3 	bl	8016768 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 80167c2:	6823      	ldr	r3, [r4, #0]
 80167c4:	466d      	mov	r5, sp
 80167c6:	4621      	mov	r1, r4
 80167c8:	343c      	adds	r4, #60	; 0x3c
 80167ca:	4628      	mov	r0, r5
 80167cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80167d0:	4798      	blx	r3
 80167d2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80167d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80167da:	b005      	add	sp, #20
 80167dc:	bd30      	pop	{r4, r5, pc}

080167de <_ZNK8touchgfx3Box12getSolidRectEv>:
 80167de:	2300      	movs	r3, #0
 80167e0:	8083      	strh	r3, [r0, #4]
 80167e2:	80c3      	strh	r3, [r0, #6]
 80167e4:	8003      	strh	r3, [r0, #0]
 80167e6:	8043      	strh	r3, [r0, #2]
 80167e8:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 80167ec:	2bff      	cmp	r3, #255	; 0xff
 80167ee:	bf01      	itttt	eq
 80167f0:	890b      	ldrheq	r3, [r1, #8]
 80167f2:	8083      	strheq	r3, [r0, #4]
 80167f4:	894b      	ldrheq	r3, [r1, #10]
 80167f6:	80c3      	strheq	r3, [r0, #6]
 80167f8:	4770      	bx	lr
	...

080167fc <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 80167fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80167fe:	4604      	mov	r4, r0
 8016800:	466b      	mov	r3, sp
 8016802:	6808      	ldr	r0, [r1, #0]
 8016804:	6849      	ldr	r1, [r1, #4]
 8016806:	c303      	stmia	r3!, {r0, r1}
 8016808:	6823      	ldr	r3, [r4, #0]
 801680a:	4669      	mov	r1, sp
 801680c:	4620      	mov	r0, r4
 801680e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016810:	4798      	blx	r3
 8016812:	4b08      	ldr	r3, [pc, #32]	; (8016834 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8016814:	681b      	ldr	r3, [r3, #0]
 8016816:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801681a:	b10a      	cbz	r2, 8016820 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 801681c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801681e:	b900      	cbnz	r0, 8016822 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8016820:	6898      	ldr	r0, [r3, #8]
 8016822:	6803      	ldr	r3, [r0, #0]
 8016824:	4669      	mov	r1, sp
 8016826:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8016828:	6a1d      	ldr	r5, [r3, #32]
 801682a:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 801682e:	47a8      	blx	r5
 8016830:	b003      	add	sp, #12
 8016832:	bd30      	pop	{r4, r5, pc}
 8016834:	20024428 	.word	0x20024428

08016838 <_ZNK8touchgfx3Box17invalidateContentEv>:
 8016838:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
 801683c:	b12a      	cbz	r2, 801684a <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 801683e:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8016842:	b112      	cbz	r2, 801684a <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8016844:	6803      	ldr	r3, [r0, #0]
 8016846:	695b      	ldr	r3, [r3, #20]
 8016848:	4718      	bx	r3
 801684a:	4770      	bx	lr

0801684c <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 801684c:	b570      	push	{r4, r5, r6, lr}
 801684e:	880b      	ldrh	r3, [r1, #0]
 8016850:	460d      	mov	r5, r1
 8016852:	4604      	mov	r4, r0
 8016854:	84c3      	strh	r3, [r0, #38]	; 0x26
 8016856:	4608      	mov	r0, r1
 8016858:	f004 f9bc 	bl	801abd4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801685c:	4606      	mov	r6, r0
 801685e:	4628      	mov	r0, r5
 8016860:	f004 f9ec 	bl	801ac3c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8016864:	6823      	ldr	r3, [r4, #0]
 8016866:	4605      	mov	r5, r0
 8016868:	4631      	mov	r1, r6
 801686a:	4620      	mov	r0, r4
 801686c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801686e:	4798      	blx	r3
 8016870:	6823      	ldr	r3, [r4, #0]
 8016872:	4629      	mov	r1, r5
 8016874:	4620      	mov	r0, r4
 8016876:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016878:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801687c:	4718      	bx	r3

0801687e <_ZNK8touchgfx5Image12getSolidRectEv>:
 801687e:	b510      	push	{r4, lr}
 8016880:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8016884:	4604      	mov	r4, r0
 8016886:	2bff      	cmp	r3, #255	; 0xff
 8016888:	d006      	beq.n	8016898 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 801688a:	2300      	movs	r3, #0
 801688c:	8003      	strh	r3, [r0, #0]
 801688e:	8043      	strh	r3, [r0, #2]
 8016890:	8083      	strh	r3, [r0, #4]
 8016892:	80c3      	strh	r3, [r0, #6]
 8016894:	4620      	mov	r0, r4
 8016896:	bd10      	pop	{r4, pc}
 8016898:	3126      	adds	r1, #38	; 0x26
 801689a:	f004 fa03 	bl	801aca4 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801689e:	e7f9      	b.n	8016894 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

080168a0 <_ZNK8touchgfx5Image17invalidateContentEv>:
 80168a0:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
 80168a4:	b12a      	cbz	r2, 80168b2 <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 80168a6:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 80168aa:	b112      	cbz	r2, 80168b2 <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 80168ac:	6803      	ldr	r3, [r0, #0]
 80168ae:	695b      	ldr	r3, [r3, #20]
 80168b0:	4718      	bx	r3
 80168b2:	4770      	bx	lr

080168b4 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 80168b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80168b8:	4604      	mov	r4, r0
 80168ba:	b088      	sub	sp, #32
 80168bc:	2500      	movs	r5, #0
 80168be:	460f      	mov	r7, r1
 80168c0:	f854 3b26 	ldr.w	r3, [r4], #38
 80168c4:	a904      	add	r1, sp, #16
 80168c6:	4606      	mov	r6, r0
 80168c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80168ca:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80168ce:	4798      	blx	r3
 80168d0:	4620      	mov	r0, r4
 80168d2:	f004 f97f 	bl	801abd4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80168d6:	4680      	mov	r8, r0
 80168d8:	4620      	mov	r0, r4
 80168da:	f004 f9af 	bl	801ac3c <_ZNK8touchgfx6Bitmap9getHeightEv>
 80168de:	9506      	str	r5, [sp, #24]
 80168e0:	ad06      	add	r5, sp, #24
 80168e2:	f8ad 001e 	strh.w	r0, [sp, #30]
 80168e6:	4639      	mov	r1, r7
 80168e8:	f8ad 801c 	strh.w	r8, [sp, #28]
 80168ec:	4628      	mov	r0, r5
 80168ee:	f7fe fb97 	bl	8015020 <_ZN8touchgfx4RectaNERKS0_>
 80168f2:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80168f6:	2b00      	cmp	r3, #0
 80168f8:	dd19      	ble.n	801692e <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 80168fa:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 80168fe:	2b00      	cmp	r3, #0
 8016900:	dd15      	ble.n	801692e <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8016902:	4b0c      	ldr	r3, [pc, #48]	; (8016934 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 8016904:	681b      	ldr	r3, [r3, #0]
 8016906:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801690a:	b10a      	cbz	r2, 8016910 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 801690c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801690e:	b900      	cbnz	r0, 8016912 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 8016910:	6898      	ldr	r0, [r3, #8]
 8016912:	2701      	movs	r7, #1
 8016914:	6801      	ldr	r1, [r0, #0]
 8016916:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801691a:	9702      	str	r7, [sp, #8]
 801691c:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 8016920:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8016924:	e9cd 5600 	strd	r5, r6, [sp]
 8016928:	688d      	ldr	r5, [r1, #8]
 801692a:	4621      	mov	r1, r4
 801692c:	47a8      	blx	r5
 801692e:	b008      	add	sp, #32
 8016930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016934:	20024428 	.word	0x20024428

08016938 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 8016938:	b510      	push	{r4, lr}
 801693a:	6803      	ldr	r3, [r0, #0]
 801693c:	460c      	mov	r4, r1
 801693e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016940:	4798      	blx	r3
 8016942:	1b03      	subs	r3, r0, r4
 8016944:	4258      	negs	r0, r3
 8016946:	4158      	adcs	r0, r3
 8016948:	bd10      	pop	{r4, pc}
	...

0801694c <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 801694c:	4b01      	ldr	r3, [pc, #4]	; (8016954 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 801694e:	6019      	str	r1, [r3, #0]
 8016950:	4770      	bx	lr
 8016952:	bf00      	nop
 8016954:	20024430 	.word	0x20024430

08016958 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8016958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801695c:	4696      	mov	lr, r2
 801695e:	b097      	sub	sp, #92	; 0x5c
 8016960:	4605      	mov	r5, r0
 8016962:	4614      	mov	r4, r2
 8016964:	460e      	mov	r6, r1
 8016966:	461f      	mov	r7, r3
 8016968:	f10d 0c1c 	add.w	ip, sp, #28
 801696c:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 8016970:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 8016974:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 8016978:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801697c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016980:	f8de 3000 	ldr.w	r3, [lr]
 8016984:	f104 0e14 	add.w	lr, r4, #20
 8016988:	f8cc 3000 	str.w	r3, [ip]
 801698c:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8016990:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016994:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016998:	f8de 3000 	ldr.w	r3, [lr]
 801699c:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 80169a0:	f8cc 3000 	str.w	r3, [ip]
 80169a4:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 80169a8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80169ac:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80169b0:	f8de 3000 	ldr.w	r3, [lr]
 80169b4:	4631      	mov	r1, r6
 80169b6:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80169b8:	4628      	mov	r0, r5
 80169ba:	f8cc 3000 	str.w	r3, [ip]
 80169be:	682b      	ldr	r3, [r5, #0]
 80169c0:	9201      	str	r2, [sp, #4]
 80169c2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80169c4:	f8cd 8008 	str.w	r8, [sp, #8]
 80169c8:	9200      	str	r2, [sp, #0]
 80169ca:	aa07      	add	r2, sp, #28
 80169cc:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 80169d0:	f8d3 b03c 	ldr.w	fp, [r3, #60]	; 0x3c
 80169d4:	463b      	mov	r3, r7
 80169d6:	47d8      	blx	fp
 80169d8:	46a6      	mov	lr, r4
 80169da:	f10d 0c1c 	add.w	ip, sp, #28
 80169de:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80169e2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80169e6:	f8de 3000 	ldr.w	r3, [lr]
 80169ea:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 80169ee:	343c      	adds	r4, #60	; 0x3c
 80169f0:	f8cc 3000 	str.w	r3, [ip]
 80169f4:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 80169f8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80169fc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016a00:	f8de 3000 	ldr.w	r3, [lr]
 8016a04:	f8cc 3000 	str.w	r3, [ip]
 8016a08:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8016a0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016a0e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016a12:	6823      	ldr	r3, [r4, #0]
 8016a14:	4631      	mov	r1, r6
 8016a16:	4628      	mov	r0, r5
 8016a18:	f8cc 3000 	str.w	r3, [ip]
 8016a1c:	682b      	ldr	r3, [r5, #0]
 8016a1e:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8016a22:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8016a24:	f8cd 8008 	str.w	r8, [sp, #8]
 8016a28:	9201      	str	r2, [sp, #4]
 8016a2a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8016a2c:	9200      	str	r2, [sp, #0]
 8016a2e:	aa07      	add	r2, sp, #28
 8016a30:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 8016a32:	463b      	mov	r3, r7
 8016a34:	47a0      	blx	r4
 8016a36:	b017      	add	sp, #92	; 0x5c
 8016a38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016a3c <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8016a3c:	2000      	movs	r0, #0
 8016a3e:	4770      	bx	lr

08016a40 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8016a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a44:	b08d      	sub	sp, #52	; 0x34
 8016a46:	4688      	mov	r8, r1
 8016a48:	f8d3 c000 	ldr.w	ip, [r3]
 8016a4c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8016a4e:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 8016a52:	680f      	ldr	r7, [r1, #0]
 8016a54:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 8016a58:	eba7 070c 	sub.w	r7, r7, ip
 8016a5c:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 8016a60:	edd3 6a07 	vldr	s13, [r3, #28]
 8016a64:	42bc      	cmp	r4, r7
 8016a66:	9918      	ldr	r1, [sp, #96]	; 0x60
 8016a68:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 8016a6c:	bfa8      	it	ge
 8016a6e:	463c      	movge	r4, r7
 8016a70:	f9b1 9000 	ldrsh.w	r9, [r1]
 8016a74:	f9ba 1000 	ldrsh.w	r1, [sl]
 8016a78:	ee07 4a90 	vmov	s15, r4
 8016a7c:	eb09 0e0c 	add.w	lr, r9, ip
 8016a80:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 8016a84:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8016a88:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8016a8c:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 8016a90:	4571      	cmp	r1, lr
 8016a92:	ee25 4a04 	vmul.f32	s8, s10, s8
 8016a96:	ee65 4a24 	vmul.f32	s9, s10, s9
 8016a9a:	ee25 5a27 	vmul.f32	s10, s10, s15
 8016a9e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8016aa2:	ee71 0aa4 	vadd.f32	s1, s3, s9
 8016aa6:	ee32 1a05 	vadd.f32	s2, s4, s10
 8016aaa:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8016aae:	ee36 0a84 	vadd.f32	s0, s13, s8
 8016ab2:	ee61 1a87 	vmul.f32	s3, s3, s14
 8016ab6:	ee22 2a07 	vmul.f32	s4, s4, s14
 8016aba:	f340 808c 	ble.w	8016bd6 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 8016abe:	eba1 060e 	sub.w	r6, r1, lr
 8016ac2:	fb96 f5f4 	sdiv	r5, r6, r4
 8016ac6:	ee07 5a10 	vmov	s14, r5
 8016aca:	2d00      	cmp	r5, #0
 8016acc:	fb04 6615 	mls	r6, r4, r5, r6
 8016ad0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016ad4:	eea7 0a04 	vfma.f32	s0, s14, s8
 8016ad8:	eee7 0a24 	vfma.f32	s1, s14, s9
 8016adc:	eea7 1a05 	vfma.f32	s2, s14, s10
 8016ae0:	dd12      	ble.n	8016b08 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 8016ae2:	ee70 6a44 	vsub.f32	s13, s0, s8
 8016ae6:	ee70 1ae4 	vsub.f32	s3, s1, s9
 8016aea:	ee31 2a45 	vsub.f32	s4, s2, s10
 8016aee:	eef5 6a40 	vcmp.f32	s13, #0.0
 8016af2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016af6:	bf14      	ite	ne
 8016af8:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8016afc:	eeb0 7a67 	vmoveq.f32	s14, s15
 8016b00:	ee61 1a87 	vmul.f32	s3, s3, s14
 8016b04:	ee22 2a07 	vmul.f32	s4, s4, s14
 8016b08:	fb05 f204 	mul.w	r2, r5, r4
 8016b0c:	1abf      	subs	r7, r7, r2
 8016b0e:	4494      	add	ip, r2
 8016b10:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8016b14:	4411      	add	r1, r2
 8016b16:	eb09 020c 	add.w	r2, r9, ip
 8016b1a:	b209      	sxth	r1, r1
 8016b1c:	443a      	add	r2, r7
 8016b1e:	428a      	cmp	r2, r1
 8016b20:	bfc4      	itt	gt
 8016b22:	eba1 0209 	subgt.w	r2, r1, r9
 8016b26:	eba2 070c 	subgt.w	r7, r2, ip
 8016b2a:	2f00      	cmp	r7, #0
 8016b2c:	dd50      	ble.n	8016bd0 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 8016b2e:	fb97 f1f4 	sdiv	r1, r7, r4
 8016b32:	fb04 7211 	mls	r2, r4, r1, r7
 8016b36:	b90a      	cbnz	r2, 8016b3c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 8016b38:	3901      	subs	r1, #1
 8016b3a:	4622      	mov	r2, r4
 8016b3c:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8016b40:	6840      	ldr	r0, [r0, #4]
 8016b42:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 8016b46:	44b6      	add	lr, r6
 8016b48:	f8d0 a000 	ldr.w	sl, [r0]
 8016b4c:	2900      	cmp	r1, #0
 8016b4e:	bfcc      	ite	gt
 8016b50:	46a1      	movgt	r9, r4
 8016b52:	4691      	movle	r9, r2
 8016b54:	900b      	str	r0, [sp, #44]	; 0x2c
 8016b56:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8016b58:	fb04 e505 	mla	r5, r4, r5, lr
 8016b5c:	eef0 6a42 	vmov.f32	s13, s4
 8016b60:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8016b64:	9008      	str	r0, [sp, #32]
 8016b66:	eeb0 7a61 	vmov.f32	s14, s3
 8016b6a:	9818      	ldr	r0, [sp, #96]	; 0x60
 8016b6c:	695b      	ldr	r3, [r3, #20]
 8016b6e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8016b72:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 8016b76:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8016b7a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8016b7c:	445b      	add	r3, fp
 8016b7e:	9307      	str	r3, [sp, #28]
 8016b80:	ee16 3a90 	vmov	r3, s13
 8016b84:	e9cd 8505 	strd	r8, r5, [sp, #20]
 8016b88:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8016b8c:	ee21 3a23 	vmul.f32	s6, s2, s7
 8016b90:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8016b94:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8016b98:	ee17 7a90 	vmov	r7, s15
 8016b9c:	ee73 7a42 	vsub.f32	s15, s6, s4
 8016ba0:	fb97 f7f4 	sdiv	r7, r7, r4
 8016ba4:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8016ba8:	ee17 ca90 	vmov	ip, s15
 8016bac:	fb9c fcf4 	sdiv	ip, ip, r4
 8016bb0:	fb0c 3306 	mla	r3, ip, r6, r3
 8016bb4:	9302      	str	r3, [sp, #8]
 8016bb6:	ee17 3a10 	vmov	r3, s14
 8016bba:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 8016bbe:	fb07 3706 	mla	r7, r7, r6, r3
 8016bc2:	eba9 0306 	sub.w	r3, r9, r6
 8016bc6:	e9cd 4700 	strd	r4, r7, [sp]
 8016bca:	f8da 4008 	ldr.w	r4, [sl, #8]
 8016bce:	47a0      	blx	r4
 8016bd0:	b00d      	add	sp, #52	; 0x34
 8016bd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016bd6:	2500      	movs	r5, #0
 8016bd8:	462e      	mov	r6, r5
 8016bda:	e799      	b.n	8016b10 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

08016bdc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8016bdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016be0:	b0db      	sub	sp, #364	; 0x16c
 8016be2:	461d      	mov	r5, r3
 8016be4:	4614      	mov	r4, r2
 8016be6:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 8016bea:	910f      	str	r1, [sp, #60]	; 0x3c
 8016bec:	4629      	mov	r1, r5
 8016bee:	930a      	str	r3, [sp, #40]	; 0x28
 8016bf0:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 8016bf4:	9009      	str	r0, [sp, #36]	; 0x24
 8016bf6:	930b      	str	r3, [sp, #44]	; 0x2c
 8016bf8:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 8016bfc:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 8016c00:	9310      	str	r3, [sp, #64]	; 0x40
 8016c02:	6803      	ldr	r3, [r0, #0]
 8016c04:	6c5f      	ldr	r7, [r3, #68]	; 0x44
 8016c06:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8016c0a:	47b8      	blx	r7
 8016c0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016c0e:	6058      	str	r0, [r3, #4]
 8016c10:	2800      	cmp	r0, #0
 8016c12:	f000 83a1 	beq.w	8017358 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016c16:	682b      	ldr	r3, [r5, #0]
 8016c18:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8016c1c:	ed94 7a02 	vldr	s14, [r4, #8]
 8016c20:	9314      	str	r3, [sp, #80]	; 0x50
 8016c22:	686b      	ldr	r3, [r5, #4]
 8016c24:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016c28:	9315      	str	r3, [sp, #84]	; 0x54
 8016c2a:	4bc1      	ldr	r3, [pc, #772]	; (8016f30 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 8016c2c:	7819      	ldrb	r1, [r3, #0]
 8016c2e:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8016c32:	2900      	cmp	r1, #0
 8016c34:	bf16      	itet	ne
 8016c36:	4619      	movne	r1, r3
 8016c38:	4611      	moveq	r1, r2
 8016c3a:	4613      	movne	r3, r2
 8016c3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016c40:	9116      	str	r1, [sp, #88]	; 0x58
 8016c42:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 8016c46:	f240 8387 	bls.w	8017358 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016c4a:	ed94 7a07 	vldr	s14, [r4, #28]
 8016c4e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016c52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016c56:	f240 837f 	bls.w	8017358 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016c5a:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 8016c5e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016c62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016c66:	f240 8377 	bls.w	8017358 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016c6a:	6822      	ldr	r2, [r4, #0]
 8016c6c:	4bb1      	ldr	r3, [pc, #708]	; (8016f34 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 8016c6e:	429a      	cmp	r2, r3
 8016c70:	f2c0 8372 	blt.w	8017358 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016c74:	49b0      	ldr	r1, [pc, #704]	; (8016f38 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 8016c76:	6963      	ldr	r3, [r4, #20]
 8016c78:	428a      	cmp	r2, r1
 8016c7a:	f300 836d 	bgt.w	8017358 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016c7e:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8016c82:	48ae      	ldr	r0, [pc, #696]	; (8016f3c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 8016c84:	33ff      	adds	r3, #255	; 0xff
 8016c86:	4283      	cmp	r3, r0
 8016c88:	f200 8366 	bhi.w	8017358 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016c8c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8016c8e:	4dac      	ldr	r5, [pc, #688]	; (8016f40 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 8016c90:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8016c94:	33ff      	adds	r3, #255	; 0xff
 8016c96:	42ab      	cmp	r3, r5
 8016c98:	f200 835e 	bhi.w	8017358 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016c9c:	6862      	ldr	r2, [r4, #4]
 8016c9e:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 8016ca2:	33ff      	adds	r3, #255	; 0xff
 8016ca4:	4283      	cmp	r3, r0
 8016ca6:	f200 8357 	bhi.w	8017358 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016caa:	69a1      	ldr	r1, [r4, #24]
 8016cac:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 8016cb0:	33ff      	adds	r3, #255	; 0xff
 8016cb2:	4283      	cmp	r3, r0
 8016cb4:	f200 8350 	bhi.w	8017358 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016cb8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8016cba:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 8016cbe:	30ff      	adds	r0, #255	; 0xff
 8016cc0:	42a8      	cmp	r0, r5
 8016cc2:	f200 8349 	bhi.w	8017358 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016cc6:	428a      	cmp	r2, r1
 8016cc8:	f280 8110 	bge.w	8016eec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 8016ccc:	429a      	cmp	r2, r3
 8016cce:	f300 8119 	bgt.w	8016f04 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 8016cd2:	4299      	cmp	r1, r3
 8016cd4:	f280 811d 	bge.w	8016f12 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 8016cd8:	2502      	movs	r5, #2
 8016cda:	2701      	movs	r7, #1
 8016cdc:	46a9      	mov	r9, r5
 8016cde:	46b8      	mov	r8, r7
 8016ce0:	f04f 0a00 	mov.w	sl, #0
 8016ce4:	4621      	mov	r1, r4
 8016ce6:	a849      	add	r0, sp, #292	; 0x124
 8016ce8:	f003 fcac 	bl	801a644 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 8016cec:	4622      	mov	r2, r4
 8016cee:	4653      	mov	r3, sl
 8016cf0:	a949      	add	r1, sp, #292	; 0x124
 8016cf2:	f8cd 9000 	str.w	r9, [sp]
 8016cf6:	a819      	add	r0, sp, #100	; 0x64
 8016cf8:	f003 fdd4 	bl	801a8a4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8016cfc:	4622      	mov	r2, r4
 8016cfe:	4653      	mov	r3, sl
 8016d00:	a949      	add	r1, sp, #292	; 0x124
 8016d02:	f8cd 8000 	str.w	r8, [sp]
 8016d06:	a829      	add	r0, sp, #164	; 0xa4
 8016d08:	f003 fdcc 	bl	801a8a4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8016d0c:	4643      	mov	r3, r8
 8016d0e:	4622      	mov	r2, r4
 8016d10:	a949      	add	r1, sp, #292	; 0x124
 8016d12:	f8cd 9000 	str.w	r9, [sp]
 8016d16:	a839      	add	r0, sp, #228	; 0xe4
 8016d18:	f003 fdc4 	bl	801a8a4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8016d1c:	42af      	cmp	r7, r5
 8016d1e:	af12      	add	r7, sp, #72	; 0x48
 8016d20:	bfb7      	itett	lt
 8016d22:	2300      	movlt	r3, #0
 8016d24:	2301      	movge	r3, #1
 8016d26:	ad29      	addlt	r5, sp, #164	; 0xa4
 8016d28:	ac19      	addlt	r4, sp, #100	; 0x64
 8016d2a:	bfb1      	iteee	lt
 8016d2c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8016d2e:	ad19      	addge	r5, sp, #100	; 0x64
 8016d30:	930e      	strge	r3, [sp, #56]	; 0x38
 8016d32:	ac29      	addge	r4, sp, #164	; 0xa4
 8016d34:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016d36:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016d3a:	e887 0003 	stmia.w	r7, {r0, r1}
 8016d3e:	b928      	cbnz	r0, 8016d4c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 8016d40:	4b80      	ldr	r3, [pc, #512]	; (8016f44 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 8016d42:	6818      	ldr	r0, [r3, #0]
 8016d44:	6803      	ldr	r3, [r0, #0]
 8016d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016d48:	4798      	blx	r3
 8016d4a:	6038      	str	r0, [r7, #0]
 8016d4c:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8016d4e:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8016d52:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016d56:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8016d58:	930c      	str	r3, [sp, #48]	; 0x30
 8016d5a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8016d5c:	6963      	ldr	r3, [r4, #20]
 8016d5e:	440b      	add	r3, r1
 8016d60:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8016d64:	4408      	add	r0, r1
 8016d66:	b200      	sxth	r0, r0
 8016d68:	4283      	cmp	r3, r0
 8016d6a:	900d      	str	r0, [sp, #52]	; 0x34
 8016d6c:	f280 80dd 	bge.w	8016f2a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 8016d70:	428b      	cmp	r3, r1
 8016d72:	da08      	bge.n	8016d86 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8016d74:	2a00      	cmp	r2, #0
 8016d76:	dd06      	ble.n	8016d86 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8016d78:	1acb      	subs	r3, r1, r3
 8016d7a:	429a      	cmp	r2, r3
 8016d7c:	f2c0 80e4 	blt.w	8016f48 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 8016d80:	2b00      	cmp	r3, #0
 8016d82:	f300 80e2 	bgt.w	8016f4a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 8016d86:	6967      	ldr	r7, [r4, #20]
 8016d88:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8016d8c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016d8e:	443b      	add	r3, r7
 8016d90:	461f      	mov	r7, r3
 8016d92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016d94:	1bdf      	subs	r7, r3, r7
 8016d96:	4297      	cmp	r7, r2
 8016d98:	bfa8      	it	ge
 8016d9a:	4617      	movge	r7, r2
 8016d9c:	2f00      	cmp	r7, #0
 8016d9e:	f340 8166 	ble.w	801706e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 8016da2:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8016da4:	6829      	ldr	r1, [r5, #0]
 8016da6:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016daa:	f9bb 3000 	ldrsh.w	r3, [fp]
 8016dae:	4411      	add	r1, r2
 8016db0:	6820      	ldr	r0, [r4, #0]
 8016db2:	4299      	cmp	r1, r3
 8016db4:	dd1a      	ble.n	8016dec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8016db6:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8016dba:	4402      	add	r2, r0
 8016dbc:	440b      	add	r3, r1
 8016dbe:	b21b      	sxth	r3, r3
 8016dc0:	429a      	cmp	r2, r3
 8016dc2:	dc13      	bgt.n	8016dec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8016dc4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016dc6:	a912      	add	r1, sp, #72	; 0x48
 8016dc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016dca:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016dcc:	681b      	ldr	r3, [r3, #0]
 8016dce:	9206      	str	r2, [sp, #24]
 8016dd0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016dd2:	9500      	str	r5, [sp, #0]
 8016dd4:	9205      	str	r2, [sp, #20]
 8016dd6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016dd8:	e9cd b203 	strd	fp, r2, [sp, #12]
 8016ddc:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8016dde:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8016de2:	aa49      	add	r2, sp, #292	; 0x124
 8016de4:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 8016de8:	4623      	mov	r3, r4
 8016dea:	47c8      	blx	r9
 8016dec:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8016df0:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8016df4:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8016df8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016dfc:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8016e00:	68a1      	ldr	r1, [r4, #8]
 8016e02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016e06:	ed94 6a08 	vldr	s12, [r4, #32]
 8016e0a:	edd4 6a07 	vldr	s13, [r4, #28]
 8016e0e:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8016e12:	ee76 6a86 	vadd.f32	s13, s13, s12
 8016e16:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8016e1a:	e9d4 2300 	ldrd	r2, r3, [r4]
 8016e1e:	edc4 6a07 	vstr	s13, [r4, #28]
 8016e22:	441a      	add	r2, r3
 8016e24:	6963      	ldr	r3, [r4, #20]
 8016e26:	3301      	adds	r3, #1
 8016e28:	6022      	str	r2, [r4, #0]
 8016e2a:	6163      	str	r3, [r4, #20]
 8016e2c:	69a3      	ldr	r3, [r4, #24]
 8016e2e:	3b01      	subs	r3, #1
 8016e30:	61a3      	str	r3, [r4, #24]
 8016e32:	6923      	ldr	r3, [r4, #16]
 8016e34:	440b      	add	r3, r1
 8016e36:	68e1      	ldr	r1, [r4, #12]
 8016e38:	428b      	cmp	r3, r1
 8016e3a:	6123      	str	r3, [r4, #16]
 8016e3c:	db15      	blt.n	8016e6a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 8016e3e:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8016e42:	3201      	adds	r2, #1
 8016e44:	1a5b      	subs	r3, r3, r1
 8016e46:	ee76 6a26 	vadd.f32	s13, s12, s13
 8016e4a:	6022      	str	r2, [r4, #0]
 8016e4c:	6123      	str	r3, [r4, #16]
 8016e4e:	edc4 6a07 	vstr	s13, [r4, #28]
 8016e52:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8016e56:	ee36 7a87 	vadd.f32	s14, s13, s14
 8016e5a:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8016e5e:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8016e62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016e66:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8016e6a:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8016e6e:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8016e72:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8016e76:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016e7a:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8016e7e:	68a9      	ldr	r1, [r5, #8]
 8016e80:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016e84:	ed95 6a08 	vldr	s12, [r5, #32]
 8016e88:	edd5 6a07 	vldr	s13, [r5, #28]
 8016e8c:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8016e90:	ee76 6a86 	vadd.f32	s13, s13, s12
 8016e94:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8016e98:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016e9c:	edc5 6a07 	vstr	s13, [r5, #28]
 8016ea0:	441a      	add	r2, r3
 8016ea2:	696b      	ldr	r3, [r5, #20]
 8016ea4:	3301      	adds	r3, #1
 8016ea6:	602a      	str	r2, [r5, #0]
 8016ea8:	616b      	str	r3, [r5, #20]
 8016eaa:	69ab      	ldr	r3, [r5, #24]
 8016eac:	3b01      	subs	r3, #1
 8016eae:	61ab      	str	r3, [r5, #24]
 8016eb0:	692b      	ldr	r3, [r5, #16]
 8016eb2:	440b      	add	r3, r1
 8016eb4:	68e9      	ldr	r1, [r5, #12]
 8016eb6:	428b      	cmp	r3, r1
 8016eb8:	612b      	str	r3, [r5, #16]
 8016eba:	db15      	blt.n	8016ee8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 8016ebc:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8016ec0:	3201      	adds	r2, #1
 8016ec2:	1a5b      	subs	r3, r3, r1
 8016ec4:	ee76 6a26 	vadd.f32	s13, s12, s13
 8016ec8:	602a      	str	r2, [r5, #0]
 8016eca:	612b      	str	r3, [r5, #16]
 8016ecc:	edc5 6a07 	vstr	s13, [r5, #28]
 8016ed0:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8016ed4:	ee36 7a87 	vadd.f32	s14, s13, s14
 8016ed8:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8016edc:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8016ee0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016ee4:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8016ee8:	3f01      	subs	r7, #1
 8016eea:	e757      	b.n	8016d9c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 8016eec:	4299      	cmp	r1, r3
 8016eee:	dc13      	bgt.n	8016f18 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 8016ef0:	429a      	cmp	r2, r3
 8016ef2:	da14      	bge.n	8016f1e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 8016ef4:	2502      	movs	r5, #2
 8016ef6:	2703      	movs	r7, #3
 8016ef8:	f04f 0800 	mov.w	r8, #0
 8016efc:	46a9      	mov	r9, r5
 8016efe:	f04f 0a01 	mov.w	sl, #1
 8016f02:	e6ef      	b.n	8016ce4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8016f04:	2501      	movs	r5, #1
 8016f06:	2700      	movs	r7, #0
 8016f08:	46a9      	mov	r9, r5
 8016f0a:	46b8      	mov	r8, r7
 8016f0c:	f04f 0a02 	mov.w	sl, #2
 8016f10:	e6e8      	b.n	8016ce4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8016f12:	2501      	movs	r5, #1
 8016f14:	2702      	movs	r7, #2
 8016f16:	e6e1      	b.n	8016cdc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 8016f18:	2500      	movs	r5, #0
 8016f1a:	2701      	movs	r7, #1
 8016f1c:	e7f4      	b.n	8016f08 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 8016f1e:	2702      	movs	r7, #2
 8016f20:	2503      	movs	r5, #3
 8016f22:	f04f 0900 	mov.w	r9, #0
 8016f26:	46b8      	mov	r8, r7
 8016f28:	e7e9      	b.n	8016efe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 8016f2a:	4613      	mov	r3, r2
 8016f2c:	e728      	b.n	8016d80 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 8016f2e:	bf00      	nop
 8016f30:	20024420 	.word	0x20024420
 8016f34:	fffd8f01 	.word	0xfffd8f01
 8016f38:	00027100 	.word	0x00027100
 8016f3c:	0004e1ff 	.word	0x0004e1ff
 8016f40:	0004e1fe 	.word	0x0004e1fe
 8016f44:	20024428 	.word	0x20024428
 8016f48:	4613      	mov	r3, r2
 8016f4a:	992b      	ldr	r1, [sp, #172]	; 0xac
 8016f4c:	469e      	mov	lr, r3
 8016f4e:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 8016f50:	469c      	mov	ip, r3
 8016f52:	9111      	str	r1, [sp, #68]	; 0x44
 8016f54:	f04f 0900 	mov.w	r9, #0
 8016f58:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 8016f5c:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 8016f60:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 8016f64:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 8016f68:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 8016f6c:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8016f70:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 8016f74:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 8016f78:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 8016f7c:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 8016f80:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 8016f84:	f1bc 0f00 	cmp.w	ip, #0
 8016f88:	d147      	bne.n	801701a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 8016f8a:	eb03 0c07 	add.w	ip, r3, r7
 8016f8e:	1ad7      	subs	r7, r2, r3
 8016f90:	f1b9 0f00 	cmp.w	r9, #0
 8016f94:	d009      	beq.n	8016faa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 8016f96:	9029      	str	r0, [sp, #164]	; 0xa4
 8016f98:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 8016f9c:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 8016fa0:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 8016fa4:	912d      	str	r1, [sp, #180]	; 0xb4
 8016fa6:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 8016faa:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8016fac:	f04f 0800 	mov.w	r8, #0
 8016fb0:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8016fb4:	9111      	str	r1, [sp, #68]	; 0x44
 8016fb6:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8016fba:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8016fbe:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8016fc2:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8016fc6:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8016fca:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8016fce:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 8016fd2:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 8016fd6:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8016fda:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8016fde:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 8016fe2:	f1be 0f00 	cmp.w	lr, #0
 8016fe6:	d031      	beq.n	801704c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 8016fe8:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8016fea:	4450      	add	r0, sl
 8016fec:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8016ff0:	4431      	add	r1, r6
 8016ff2:	ee37 7a04 	vadd.f32	s14, s14, s8
 8016ff6:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8016ffa:	4549      	cmp	r1, r9
 8016ffc:	db08      	blt.n	8017010 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 8016ffe:	ee77 7a85 	vadd.f32	s15, s15, s10
 8017002:	3001      	adds	r0, #1
 8017004:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8017008:	eba1 0109 	sub.w	r1, r1, r9
 801700c:	ee37 7a06 	vadd.f32	s14, s14, s12
 8017010:	f10e 3eff 	add.w	lr, lr, #4294967295
 8017014:	f04f 0801 	mov.w	r8, #1
 8017018:	e7e3      	b.n	8016fe2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 801701a:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801701c:	4450      	add	r0, sl
 801701e:	ee37 7a24 	vadd.f32	s14, s14, s9
 8017022:	4431      	add	r1, r6
 8017024:	ee77 7a84 	vadd.f32	s15, s15, s8
 8017028:	ee76 6aa3 	vadd.f32	s13, s13, s7
 801702c:	4541      	cmp	r1, r8
 801702e:	db08      	blt.n	8017042 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 8017030:	ee76 6a85 	vadd.f32	s13, s13, s10
 8017034:	3001      	adds	r0, #1
 8017036:	ee37 7a25 	vadd.f32	s14, s14, s11
 801703a:	eba1 0108 	sub.w	r1, r1, r8
 801703e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8017042:	f10c 3cff 	add.w	ip, ip, #4294967295
 8017046:	f04f 0901 	mov.w	r9, #1
 801704a:	e79b      	b.n	8016f84 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 801704c:	449c      	add	ip, r3
 801704e:	1aff      	subs	r7, r7, r3
 8017050:	f1b8 0f00 	cmp.w	r8, #0
 8017054:	d009      	beq.n	801706a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 8017056:	9019      	str	r0, [sp, #100]	; 0x64
 8017058:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 801705c:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8017060:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8017064:	911d      	str	r1, [sp, #116]	; 0x74
 8017066:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 801706a:	1ad2      	subs	r2, r2, r3
 801706c:	e68b      	b.n	8016d86 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801706e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017070:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 8017072:	2b00      	cmp	r3, #0
 8017074:	f000 80d1 	beq.w	801721a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 8017078:	ad19      	add	r5, sp, #100	; 0x64
 801707a:	ac39      	add	r4, sp, #228	; 0xe4
 801707c:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801707e:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8017082:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8017086:	930c      	str	r3, [sp, #48]	; 0x30
 8017088:	990c      	ldr	r1, [sp, #48]	; 0x30
 801708a:	6963      	ldr	r3, [r4, #20]
 801708c:	440b      	add	r3, r1
 801708e:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8017092:	4408      	add	r0, r1
 8017094:	b200      	sxth	r0, r0
 8017096:	4283      	cmp	r3, r0
 8017098:	900d      	str	r0, [sp, #52]	; 0x34
 801709a:	f280 80c1 	bge.w	8017220 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 801709e:	428b      	cmp	r3, r1
 80170a0:	da08      	bge.n	80170b4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 80170a2:	2a00      	cmp	r2, #0
 80170a4:	dd06      	ble.n	80170b4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 80170a6:	1acb      	subs	r3, r1, r3
 80170a8:	429a      	cmp	r2, r3
 80170aa:	f2c0 80bb 	blt.w	8017224 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 80170ae:	2b00      	cmp	r3, #0
 80170b0:	f300 80b9 	bgt.w	8017226 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 80170b4:	6967      	ldr	r7, [r4, #20]
 80170b6:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 80170ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80170bc:	443b      	add	r3, r7
 80170be:	461f      	mov	r7, r3
 80170c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80170c2:	1bdf      	subs	r7, r3, r7
 80170c4:	4297      	cmp	r7, r2
 80170c6:	bfa8      	it	ge
 80170c8:	4617      	movge	r7, r2
 80170ca:	2f00      	cmp	r7, #0
 80170cc:	f340 813c 	ble.w	8017348 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 80170d0:	9b64      	ldr	r3, [sp, #400]	; 0x190
 80170d2:	6829      	ldr	r1, [r5, #0]
 80170d4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80170d8:	f9bb 3000 	ldrsh.w	r3, [fp]
 80170dc:	4411      	add	r1, r2
 80170de:	6820      	ldr	r0, [r4, #0]
 80170e0:	4299      	cmp	r1, r3
 80170e2:	dd1a      	ble.n	801711a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 80170e4:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 80170e8:	4402      	add	r2, r0
 80170ea:	440b      	add	r3, r1
 80170ec:	b21b      	sxth	r3, r3
 80170ee:	429a      	cmp	r2, r3
 80170f0:	dc13      	bgt.n	801711a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 80170f2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80170f4:	a912      	add	r1, sp, #72	; 0x48
 80170f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80170f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80170fa:	681b      	ldr	r3, [r3, #0]
 80170fc:	9206      	str	r2, [sp, #24]
 80170fe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017100:	9500      	str	r5, [sp, #0]
 8017102:	9205      	str	r2, [sp, #20]
 8017104:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017106:	e9cd b203 	strd	fp, r2, [sp, #12]
 801710a:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801710c:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8017110:	aa49      	add	r2, sp, #292	; 0x124
 8017112:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 8017116:	4623      	mov	r3, r4
 8017118:	47c8      	blx	r9
 801711a:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 801711e:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8017122:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8017126:	ee37 7a27 	vadd.f32	s14, s14, s15
 801712a:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 801712e:	68a1      	ldr	r1, [r4, #8]
 8017130:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8017134:	ed94 6a08 	vldr	s12, [r4, #32]
 8017138:	edd4 6a07 	vldr	s13, [r4, #28]
 801713c:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8017140:	ee76 6a86 	vadd.f32	s13, s13, s12
 8017144:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8017148:	e9d4 2300 	ldrd	r2, r3, [r4]
 801714c:	edc4 6a07 	vstr	s13, [r4, #28]
 8017150:	441a      	add	r2, r3
 8017152:	6963      	ldr	r3, [r4, #20]
 8017154:	3301      	adds	r3, #1
 8017156:	6022      	str	r2, [r4, #0]
 8017158:	6163      	str	r3, [r4, #20]
 801715a:	69a3      	ldr	r3, [r4, #24]
 801715c:	3b01      	subs	r3, #1
 801715e:	61a3      	str	r3, [r4, #24]
 8017160:	6923      	ldr	r3, [r4, #16]
 8017162:	440b      	add	r3, r1
 8017164:	68e1      	ldr	r1, [r4, #12]
 8017166:	428b      	cmp	r3, r1
 8017168:	6123      	str	r3, [r4, #16]
 801716a:	db15      	blt.n	8017198 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 801716c:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8017170:	3201      	adds	r2, #1
 8017172:	1a5b      	subs	r3, r3, r1
 8017174:	ee76 6a26 	vadd.f32	s13, s12, s13
 8017178:	6022      	str	r2, [r4, #0]
 801717a:	6123      	str	r3, [r4, #16]
 801717c:	edc4 6a07 	vstr	s13, [r4, #28]
 8017180:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8017184:	ee36 7a87 	vadd.f32	s14, s13, s14
 8017188:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801718c:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8017190:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017194:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8017198:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 801719c:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 80171a0:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 80171a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80171a8:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 80171ac:	68a9      	ldr	r1, [r5, #8]
 80171ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80171b2:	ed95 6a08 	vldr	s12, [r5, #32]
 80171b6:	edd5 6a07 	vldr	s13, [r5, #28]
 80171ba:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 80171be:	ee76 6a86 	vadd.f32	s13, s13, s12
 80171c2:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 80171c6:	e9d5 2300 	ldrd	r2, r3, [r5]
 80171ca:	edc5 6a07 	vstr	s13, [r5, #28]
 80171ce:	441a      	add	r2, r3
 80171d0:	696b      	ldr	r3, [r5, #20]
 80171d2:	3301      	adds	r3, #1
 80171d4:	602a      	str	r2, [r5, #0]
 80171d6:	616b      	str	r3, [r5, #20]
 80171d8:	69ab      	ldr	r3, [r5, #24]
 80171da:	3b01      	subs	r3, #1
 80171dc:	61ab      	str	r3, [r5, #24]
 80171de:	692b      	ldr	r3, [r5, #16]
 80171e0:	440b      	add	r3, r1
 80171e2:	68e9      	ldr	r1, [r5, #12]
 80171e4:	428b      	cmp	r3, r1
 80171e6:	612b      	str	r3, [r5, #16]
 80171e8:	db15      	blt.n	8017216 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 80171ea:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 80171ee:	3201      	adds	r2, #1
 80171f0:	1a5b      	subs	r3, r3, r1
 80171f2:	ee76 6a26 	vadd.f32	s13, s12, s13
 80171f6:	602a      	str	r2, [r5, #0]
 80171f8:	612b      	str	r3, [r5, #16]
 80171fa:	edc5 6a07 	vstr	s13, [r5, #28]
 80171fe:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8017202:	ee36 7a87 	vadd.f32	s14, s13, s14
 8017206:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801720a:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 801720e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017212:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8017216:	3f01      	subs	r7, #1
 8017218:	e757      	b.n	80170ca <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 801721a:	ad39      	add	r5, sp, #228	; 0xe4
 801721c:	ac19      	add	r4, sp, #100	; 0x64
 801721e:	e72d      	b.n	801707c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 8017220:	4613      	mov	r3, r2
 8017222:	e744      	b.n	80170ae <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 8017224:	4613      	mov	r3, r2
 8017226:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 8017228:	469e      	mov	lr, r3
 801722a:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 801722e:	461f      	mov	r7, r3
 8017230:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 8017234:	f04f 0900 	mov.w	r9, #0
 8017238:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 801723c:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 8017240:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 8017244:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 8017248:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 801724c:	993d      	ldr	r1, [sp, #244]	; 0xf4
 801724e:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 8017252:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 8017256:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 801725a:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 801725e:	960e      	str	r6, [sp, #56]	; 0x38
 8017260:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 8017264:	2f00      	cmp	r7, #0
 8017266:	d146      	bne.n	80172f6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 8017268:	449c      	add	ip, r3
 801726a:	1ad7      	subs	r7, r2, r3
 801726c:	f1b9 0f00 	cmp.w	r9, #0
 8017270:	d009      	beq.n	8017286 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 8017272:	9039      	str	r0, [sp, #228]	; 0xe4
 8017274:	913d      	str	r1, [sp, #244]	; 0xf4
 8017276:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 801727a:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 801727e:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 8017282:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 8017286:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8017288:	f04f 0800 	mov.w	r8, #0
 801728c:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8017290:	910e      	str	r1, [sp, #56]	; 0x38
 8017292:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8017296:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 801729a:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 801729e:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 80172a2:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 80172a6:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 80172aa:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 80172ae:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 80172b2:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 80172b6:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 80172ba:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 80172be:	f1be 0f00 	cmp.w	lr, #0
 80172c2:	d030      	beq.n	8017326 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 80172c4:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80172c6:	4450      	add	r0, sl
 80172c8:	ee76 6aa4 	vadd.f32	s13, s13, s9
 80172cc:	4431      	add	r1, r6
 80172ce:	ee37 7a04 	vadd.f32	s14, s14, s8
 80172d2:	ee77 7aa3 	vadd.f32	s15, s15, s7
 80172d6:	4549      	cmp	r1, r9
 80172d8:	db08      	blt.n	80172ec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 80172da:	ee77 7a85 	vadd.f32	s15, s15, s10
 80172de:	3001      	adds	r0, #1
 80172e0:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80172e4:	eba1 0109 	sub.w	r1, r1, r9
 80172e8:	ee37 7a06 	vadd.f32	s14, s14, s12
 80172ec:	f10e 3eff 	add.w	lr, lr, #4294967295
 80172f0:	f04f 0801 	mov.w	r8, #1
 80172f4:	e7e3      	b.n	80172be <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 80172f6:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80172f8:	4450      	add	r0, sl
 80172fa:	ee37 7a24 	vadd.f32	s14, s14, s9
 80172fe:	4431      	add	r1, r6
 8017300:	ee77 7a84 	vadd.f32	s15, s15, s8
 8017304:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8017308:	4541      	cmp	r1, r8
 801730a:	db08      	blt.n	801731e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 801730c:	ee76 6a85 	vadd.f32	s13, s13, s10
 8017310:	3001      	adds	r0, #1
 8017312:	ee37 7a25 	vadd.f32	s14, s14, s11
 8017316:	eba1 0108 	sub.w	r1, r1, r8
 801731a:	ee77 7a86 	vadd.f32	s15, s15, s12
 801731e:	3f01      	subs	r7, #1
 8017320:	f04f 0901 	mov.w	r9, #1
 8017324:	e79e      	b.n	8017264 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 8017326:	449c      	add	ip, r3
 8017328:	1aff      	subs	r7, r7, r3
 801732a:	f1b8 0f00 	cmp.w	r8, #0
 801732e:	d009      	beq.n	8017344 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 8017330:	9019      	str	r0, [sp, #100]	; 0x64
 8017332:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8017336:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 801733a:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 801733e:	911d      	str	r1, [sp, #116]	; 0x74
 8017340:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8017344:	1ad2      	subs	r2, r2, r3
 8017346:	e6b5      	b.n	80170b4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8017348:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801734a:	681b      	ldr	r3, [r3, #0]
 801734c:	b923      	cbnz	r3, 8017358 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801734e:	4b04      	ldr	r3, [pc, #16]	; (8017360 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 8017350:	6818      	ldr	r0, [r3, #0]
 8017352:	6803      	ldr	r3, [r0, #0]
 8017354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017356:	4798      	blx	r3
 8017358:	b05b      	add	sp, #364	; 0x16c
 801735a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801735e:	bf00      	nop
 8017360:	20024428 	.word	0x20024428

08017364 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>:
 8017364:	b570      	push	{r4, r5, r6, lr}
 8017366:	4604      	mov	r4, r0
 8017368:	2500      	movs	r5, #0
 801736a:	9805      	ldr	r0, [sp, #20]
 801736c:	f89d 601c 	ldrb.w	r6, [sp, #28]
 8017370:	6061      	str	r1, [r4, #4]
 8017372:	8263      	strh	r3, [r4, #18]
 8017374:	f89d 1010 	ldrb.w	r1, [sp, #16]
 8017378:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801737c:	8025      	strh	r5, [r4, #0]
 801737e:	7221      	strb	r1, [r4, #8]
 8017380:	7266      	strb	r6, [r4, #9]
 8017382:	60e0      	str	r0, [r4, #12]
 8017384:	8222      	strh	r2, [r4, #16]
 8017386:	82a3      	strh	r3, [r4, #20]
 8017388:	82e5      	strh	r5, [r4, #22]
 801738a:	8325      	strh	r5, [r4, #24]
 801738c:	8365      	strh	r5, [r4, #26]
 801738e:	83a5      	strh	r5, [r4, #28]
 8017390:	83e5      	strh	r5, [r4, #30]
 8017392:	8425      	strh	r5, [r4, #32]
 8017394:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
 8017398:	b32e      	cbz	r6, 80173e6 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 801739a:	6803      	ldr	r3, [r0, #0]
 801739c:	695b      	ldr	r3, [r3, #20]
 801739e:	4798      	blx	r3
 80173a0:	4606      	mov	r6, r0
 80173a2:	b300      	cbz	r0, 80173e6 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 80173a4:	68e0      	ldr	r0, [r4, #12]
 80173a6:	4631      	mov	r1, r6
 80173a8:	6803      	ldr	r3, [r0, #0]
 80173aa:	68db      	ldr	r3, [r3, #12]
 80173ac:	4798      	blx	r3
 80173ae:	4605      	mov	r5, r0
 80173b0:	b1c8      	cbz	r0, 80173e6 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 80173b2:	7b43      	ldrb	r3, [r0, #13]
 80173b4:	7a82      	ldrb	r2, [r0, #10]
 80173b6:	005b      	lsls	r3, r3, #1
 80173b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80173bc:	4313      	orrs	r3, r2
 80173be:	8423      	strh	r3, [r4, #32]
 80173c0:	7a63      	ldrb	r3, [r4, #9]
 80173c2:	2b06      	cmp	r3, #6
 80173c4:	d10f      	bne.n	80173e6 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 80173c6:	68e0      	ldr	r0, [r4, #12]
 80173c8:	462a      	mov	r2, r5
 80173ca:	4631      	mov	r1, r6
 80173cc:	6803      	ldr	r3, [r0, #0]
 80173ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80173d0:	4798      	blx	r3
 80173d2:	7b6b      	ldrb	r3, [r5, #13]
 80173d4:	005b      	lsls	r3, r3, #1
 80173d6:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80173da:	7aab      	ldrb	r3, [r5, #10]
 80173dc:	4313      	orrs	r3, r2
 80173de:	4418      	add	r0, r3
 80173e0:	8c23      	ldrh	r3, [r4, #32]
 80173e2:	4418      	add	r0, r3
 80173e4:	8420      	strh	r0, [r4, #32]
 80173e6:	4620      	mov	r0, r4
 80173e8:	bd70      	pop	{r4, r5, r6, pc}

080173ea <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 80173ea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80173ee:	2400      	movs	r4, #0
 80173f0:	b085      	sub	sp, #20
 80173f2:	4681      	mov	r9, r0
 80173f4:	4688      	mov	r8, r1
 80173f6:	4692      	mov	sl, r2
 80173f8:	469b      	mov	fp, r3
 80173fa:	4627      	mov	r7, r4
 80173fc:	4625      	mov	r5, r4
 80173fe:	4626      	mov	r6, r4
 8017400:	4554      	cmp	r4, sl
 8017402:	da2a      	bge.n	801745a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8017404:	2300      	movs	r3, #0
 8017406:	9303      	str	r3, [sp, #12]
 8017408:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801740c:	429d      	cmp	r5, r3
 801740e:	d004      	beq.n	801741a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 8017410:	f242 030b 	movw	r3, #8203	; 0x200b
 8017414:	429d      	cmp	r5, r3
 8017416:	bf18      	it	ne
 8017418:	462f      	movne	r7, r5
 801741a:	ab03      	add	r3, sp, #12
 801741c:	4642      	mov	r2, r8
 801741e:	4659      	mov	r1, fp
 8017420:	4648      	mov	r0, r9
 8017422:	f002 ff25 	bl	801a270 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8017426:	4605      	mov	r5, r0
 8017428:	b1b8      	cbz	r0, 801745a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801742a:	280a      	cmp	r0, #10
 801742c:	d015      	beq.n	801745a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801742e:	9a03      	ldr	r2, [sp, #12]
 8017430:	b18a      	cbz	r2, 8017456 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 8017432:	7b50      	ldrb	r0, [r2, #13]
 8017434:	4639      	mov	r1, r7
 8017436:	7a93      	ldrb	r3, [r2, #10]
 8017438:	0040      	lsls	r0, r0, #1
 801743a:	8895      	ldrh	r5, [r2, #4]
 801743c:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8017440:	4303      	orrs	r3, r0
 8017442:	4640      	mov	r0, r8
 8017444:	9301      	str	r3, [sp, #4]
 8017446:	f8d8 3000 	ldr.w	r3, [r8]
 801744a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801744c:	4798      	blx	r3
 801744e:	9b01      	ldr	r3, [sp, #4]
 8017450:	4418      	add	r0, r3
 8017452:	4406      	add	r6, r0
 8017454:	b2b6      	uxth	r6, r6
 8017456:	3401      	adds	r4, #1
 8017458:	e7d2      	b.n	8017400 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 801745a:	4630      	mov	r0, r6
 801745c:	b005      	add	sp, #20
 801745e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017462 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 8017462:	2a02      	cmp	r2, #2
 8017464:	b530      	push	{r4, r5, lr}
 8017466:	d011      	beq.n	801748c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 8017468:	2a03      	cmp	r2, #3
 801746a:	d01c      	beq.n	80174a6 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 801746c:	2a01      	cmp	r2, #1
 801746e:	d10c      	bne.n	801748a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8017470:	888b      	ldrh	r3, [r1, #4]
 8017472:	8801      	ldrh	r1, [r0, #0]
 8017474:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8017478:	1a5b      	subs	r3, r3, r1
 801747a:	8844      	ldrh	r4, [r0, #2]
 801747c:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8017480:	1a9b      	subs	r3, r3, r2
 8017482:	8004      	strh	r4, [r0, #0]
 8017484:	8081      	strh	r1, [r0, #4]
 8017486:	8043      	strh	r3, [r0, #2]
 8017488:	80c2      	strh	r2, [r0, #6]
 801748a:	bd30      	pop	{r4, r5, pc}
 801748c:	88cb      	ldrh	r3, [r1, #6]
 801748e:	8842      	ldrh	r2, [r0, #2]
 8017490:	1a9b      	subs	r3, r3, r2
 8017492:	88c2      	ldrh	r2, [r0, #6]
 8017494:	1a9b      	subs	r3, r3, r2
 8017496:	888a      	ldrh	r2, [r1, #4]
 8017498:	8801      	ldrh	r1, [r0, #0]
 801749a:	8043      	strh	r3, [r0, #2]
 801749c:	1a52      	subs	r2, r2, r1
 801749e:	8881      	ldrh	r1, [r0, #4]
 80174a0:	1a52      	subs	r2, r2, r1
 80174a2:	8002      	strh	r2, [r0, #0]
 80174a4:	e7f1      	b.n	801748a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 80174a6:	88cb      	ldrh	r3, [r1, #6]
 80174a8:	8841      	ldrh	r1, [r0, #2]
 80174aa:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 80174ae:	1a5b      	subs	r3, r3, r1
 80174b0:	f9b0 5000 	ldrsh.w	r5, [r0]
 80174b4:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 80174b8:	1a9b      	subs	r3, r3, r2
 80174ba:	8045      	strh	r5, [r0, #2]
 80174bc:	8082      	strh	r2, [r0, #4]
 80174be:	8003      	strh	r3, [r0, #0]
 80174c0:	80c4      	strh	r4, [r0, #6]
 80174c2:	e7e2      	b.n	801748a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

080174c4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 80174c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80174c8:	b09f      	sub	sp, #124	; 0x7c
 80174ca:	9116      	str	r1, [sp, #88]	; 0x58
 80174cc:	9317      	str	r3, [sp, #92]	; 0x5c
 80174ce:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80174d0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80174d2:	8809      	ldrh	r1, [r1, #0]
 80174d4:	889b      	ldrh	r3, [r3, #4]
 80174d6:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 80174da:	440b      	add	r3, r1
 80174dc:	9212      	str	r2, [sp, #72]	; 0x48
 80174de:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 80174e2:	b21b      	sxth	r3, r3
 80174e4:	9011      	str	r0, [sp, #68]	; 0x44
 80174e6:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 80174ea:	9310      	str	r3, [sp, #64]	; 0x40
 80174ec:	f8d8 3000 	ldr.w	r3, [r8]
 80174f0:	f9bd 60a0 	ldrsh.w	r6, [sp, #160]	; 0xa0
 80174f4:	7b19      	ldrb	r1, [r3, #12]
 80174f6:	7adb      	ldrb	r3, [r3, #11]
 80174f8:	9114      	str	r1, [sp, #80]	; 0x50
 80174fa:	9315      	str	r3, [sp, #84]	; 0x54
 80174fc:	2a00      	cmp	r2, #0
 80174fe:	d06a      	beq.n	80175d6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 8017500:	f898 3010 	ldrb.w	r3, [r8, #16]
 8017504:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8017506:	2b06      	cmp	r3, #6
 8017508:	bf14      	ite	ne
 801750a:	2301      	movne	r3, #1
 801750c:	2302      	moveq	r3, #2
 801750e:	4413      	add	r3, r2
 8017510:	f04f 0900 	mov.w	r9, #0
 8017514:	930f      	str	r3, [sp, #60]	; 0x3c
 8017516:	464c      	mov	r4, r9
 8017518:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 801751c:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 8017520:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 8017524:	4293      	cmp	r3, r2
 8017526:	f280 808f 	bge.w	8017648 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
 801752a:	2300      	movs	r3, #0
 801752c:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
 8017530:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8017534:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8017538:	429c      	cmp	r4, r3
 801753a:	d006      	beq.n	801754a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x86>
 801753c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801753e:	f242 020b 	movw	r2, #8203	; 0x200b
 8017542:	4294      	cmp	r4, r2
 8017544:	bf18      	it	ne
 8017546:	4623      	movne	r3, r4
 8017548:	930d      	str	r3, [sp, #52]	; 0x34
 801754a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801754c:	992d      	ldr	r1, [sp, #180]	; 0xb4
 801754e:	f8d8 2000 	ldr.w	r2, [r8]
 8017552:	428b      	cmp	r3, r1
 8017554:	db41      	blt.n	80175da <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x116>
 8017556:	6813      	ldr	r3, [r2, #0]
 8017558:	4610      	mov	r0, r2
 801755a:	695b      	ldr	r3, [r3, #20]
 801755c:	4798      	blx	r3
 801755e:	4604      	mov	r4, r0
 8017560:	f8d8 0000 	ldr.w	r0, [r8]
 8017564:	aa1d      	add	r2, sp, #116	; 0x74
 8017566:	4621      	mov	r1, r4
 8017568:	6803      	ldr	r3, [r0, #0]
 801756a:	689d      	ldr	r5, [r3, #8]
 801756c:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 8017570:	47a8      	blx	r5
 8017572:	901c      	str	r0, [sp, #112]	; 0x70
 8017574:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8017578:	429c      	cmp	r4, r3
 801757a:	f000 80ec 	beq.w	8017756 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 801757e:	f242 030b 	movw	r3, #8203	; 0x200b
 8017582:	429c      	cmp	r4, r3
 8017584:	f000 80e7 	beq.w	8017756 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 8017588:	2c00      	cmp	r4, #0
 801758a:	f000 80f9 	beq.w	8017780 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
 801758e:	2c0a      	cmp	r4, #10
 8017590:	d060      	beq.n	8017654 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 8017592:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8017594:	b36a      	cbz	r2, 80175f2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12e>
 8017596:	8894      	ldrh	r4, [r2, #4]
 8017598:	f1bb 0f00 	cmp.w	fp, #0
 801759c:	d03b      	beq.n	8017616 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x152>
 801759e:	f892 900d 	ldrb.w	r9, [r2, #13]
 80175a2:	f1bb 0f01 	cmp.w	fp, #1
 80175a6:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80175aa:	f409 7380 	and.w	r3, r9, #256	; 0x100
 80175ae:	f892 900a 	ldrb.w	r9, [r2, #10]
 80175b2:	ea49 0903 	orr.w	r9, r9, r3
 80175b6:	d134      	bne.n	8017622 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15e>
 80175b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80175ba:	eba6 0609 	sub.w	r6, r6, r9
 80175be:	2b00      	cmp	r3, #0
 80175c0:	d14f      	bne.n	8017662 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
 80175c2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80175c4:	eb09 0306 	add.w	r3, r9, r6
 80175c8:	4413      	add	r3, r2
 80175ca:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80175cc:	f9b2 2000 	ldrsh.w	r2, [r2]
 80175d0:	4293      	cmp	r3, r2
 80175d2:	da51      	bge.n	8017678 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
 80175d4:	e038      	b.n	8017648 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
 80175d6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80175d8:	e79a      	b.n	8017510 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4c>
 80175da:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 80175de:	4659      	mov	r1, fp
 80175e0:	982c      	ldr	r0, [sp, #176]	; 0xb0
 80175e2:	9301      	str	r3, [sp, #4]
 80175e4:	ab1d      	add	r3, sp, #116	; 0x74
 80175e6:	9300      	str	r3, [sp, #0]
 80175e8:	ab1c      	add	r3, sp, #112	; 0x70
 80175ea:	f002 fe8a 	bl	801a302 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 80175ee:	4604      	mov	r4, r0
 80175f0:	e7c0      	b.n	8017574 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xb0>
 80175f2:	f8d8 0000 	ldr.w	r0, [r8]
 80175f6:	6803      	ldr	r3, [r0, #0]
 80175f8:	691b      	ldr	r3, [r3, #16]
 80175fa:	4798      	blx	r3
 80175fc:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8017600:	4298      	cmp	r0, r3
 8017602:	f000 80a8 	beq.w	8017756 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 8017606:	f242 030b 	movw	r3, #8203	; 0x200b
 801760a:	4298      	cmp	r0, r3
 801760c:	f000 80a3 	beq.w	8017756 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 8017610:	f1bb 0f00 	cmp.w	fp, #0
 8017614:	d100      	bne.n	8017618 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 8017616:	444e      	add	r6, r9
 8017618:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801761a:	2a00      	cmp	r2, #0
 801761c:	d1bf      	bne.n	801759e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 801761e:	4691      	mov	r9, r2
 8017620:	e099      	b.n	8017756 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 8017622:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017624:	2b00      	cmp	r3, #0
 8017626:	f000 80ad 	beq.w	8017784 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c0>
 801762a:	f1bb 0f00 	cmp.w	fp, #0
 801762e:	d118      	bne.n	8017662 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
 8017630:	f8d8 0000 	ldr.w	r0, [r8]
 8017634:	990d      	ldr	r1, [sp, #52]	; 0x34
 8017636:	6803      	ldr	r3, [r0, #0]
 8017638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801763a:	4798      	blx	r3
 801763c:	4406      	add	r6, r0
 801763e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017640:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8017642:	1af3      	subs	r3, r6, r3
 8017644:	4293      	cmp	r3, r2
 8017646:	dd17      	ble.n	8017678 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
 8017648:	2c00      	cmp	r4, #0
 801764a:	f000 8099 	beq.w	8017780 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
 801764e:	2c0a      	cmp	r4, #10
 8017650:	f040 8087 	bne.w	8017762 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29e>
 8017654:	240a      	movs	r4, #10
 8017656:	fab4 f084 	clz	r0, r4
 801765a:	0940      	lsrs	r0, r0, #5
 801765c:	b01f      	add	sp, #124	; 0x7c
 801765e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017662:	f8d8 0000 	ldr.w	r0, [r8]
 8017666:	990d      	ldr	r1, [sp, #52]	; 0x34
 8017668:	6803      	ldr	r3, [r0, #0]
 801766a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801766c:	4798      	blx	r3
 801766e:	f1bb 0f01 	cmp.w	fp, #1
 8017672:	eba6 0600 	sub.w	r6, r6, r0
 8017676:	d0a4      	beq.n	80175c2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfe>
 8017678:	981c      	ldr	r0, [sp, #112]	; 0x70
 801767a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801767c:	f990 1009 	ldrsb.w	r1, [r0, #9]
 8017680:	f9b3 7000 	ldrsh.w	r7, [r3]
 8017684:	7b43      	ldrb	r3, [r0, #13]
 8017686:	4431      	add	r1, r6
 8017688:	015b      	lsls	r3, r3, #5
 801768a:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801768e:	7983      	ldrb	r3, [r0, #6]
 8017690:	4313      	orrs	r3, r2
 8017692:	440b      	add	r3, r1
 8017694:	42bb      	cmp	r3, r7
 8017696:	db5e      	blt.n	8017756 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 8017698:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801769a:	4299      	cmp	r1, r3
 801769c:	da5b      	bge.n	8017756 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 801769e:	f8d8 0000 	ldr.w	r0, [r8]
 80176a2:	42b7      	cmp	r7, r6
 80176a4:	6803      	ldr	r3, [r0, #0]
 80176a6:	bfcc      	ite	gt
 80176a8:	1bbf      	subgt	r7, r7, r6
 80176aa:	2700      	movle	r7, #0
 80176ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80176ae:	bfc8      	it	gt
 80176b0:	b2bf      	uxthgt	r7, r7
 80176b2:	4798      	blx	r3
 80176b4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80176b6:	7b5a      	ldrb	r2, [r3, #13]
 80176b8:	00d1      	lsls	r1, r2, #3
 80176ba:	f401 7580 	and.w	r5, r1, #256	; 0x100
 80176be:	7a19      	ldrb	r1, [r3, #8]
 80176c0:	4329      	orrs	r1, r5
 80176c2:	0655      	lsls	r5, r2, #25
 80176c4:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 80176c6:	bf48      	it	mi
 80176c8:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 80176cc:	4405      	add	r5, r0
 80176ce:	bf48      	it	mi
 80176d0:	b209      	sxthmi	r1, r1
 80176d2:	1a6d      	subs	r5, r5, r1
 80176d4:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80176d6:	b2ad      	uxth	r5, r5
 80176d8:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 80176dc:	fa0f fa85 	sxth.w	sl, r5
 80176e0:	4551      	cmp	r1, sl
 80176e2:	dd3c      	ble.n	801775e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29a>
 80176e4:	0112      	lsls	r2, r2, #4
 80176e6:	79d8      	ldrb	r0, [r3, #7]
 80176e8:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80176ec:	4302      	orrs	r2, r0
 80176ee:	4492      	add	sl, r2
 80176f0:	4551      	cmp	r1, sl
 80176f2:	dc30      	bgt.n	8017756 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 80176f4:	1b4d      	subs	r5, r1, r5
 80176f6:	468a      	mov	sl, r1
 80176f8:	b22d      	sxth	r5, r5
 80176fa:	9319      	str	r3, [sp, #100]	; 0x64
 80176fc:	b2ad      	uxth	r5, r5
 80176fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017700:	f8d8 0000 	ldr.w	r0, [r8]
 8017704:	681a      	ldr	r2, [r3, #0]
 8017706:	6801      	ldr	r1, [r0, #0]
 8017708:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 801770a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801770c:	9313      	str	r3, [sp, #76]	; 0x4c
 801770e:	9218      	str	r2, [sp, #96]	; 0x60
 8017710:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8017712:	4788      	blx	r1
 8017714:	f898 1006 	ldrb.w	r1, [r8, #6]
 8017718:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801771a:	910b      	str	r1, [sp, #44]	; 0x2c
 801771c:	f898 100e 	ldrb.w	r1, [r8, #14]
 8017720:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8017722:	910a      	str	r1, [sp, #40]	; 0x28
 8017724:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 8017728:	9109      	str	r1, [sp, #36]	; 0x24
 801772a:	f8d8 1008 	ldr.w	r1, [r8, #8]
 801772e:	9305      	str	r3, [sp, #20]
 8017730:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8017732:	9206      	str	r2, [sp, #24]
 8017734:	9304      	str	r3, [sp, #16]
 8017736:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8017738:	f8cd a004 	str.w	sl, [sp, #4]
 801773c:	e9cd 7502 	strd	r7, r5, [sp, #8]
 8017740:	4437      	add	r7, r6
 8017742:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8017744:	b23f      	sxth	r7, r7
 8017746:	e9cd 0107 	strd	r0, r1, [sp, #28]
 801774a:	9700      	str	r7, [sp, #0]
 801774c:	9916      	ldr	r1, [sp, #88]	; 0x58
 801774e:	681a      	ldr	r2, [r3, #0]
 8017750:	9811      	ldr	r0, [sp, #68]	; 0x44
 8017752:	685b      	ldr	r3, [r3, #4]
 8017754:	47a8      	blx	r5
 8017756:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017758:	3301      	adds	r3, #1
 801775a:	930e      	str	r3, [sp, #56]	; 0x38
 801775c:	e6e0      	b.n	8017520 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5c>
 801775e:	2500      	movs	r5, #0
 8017760:	e7cb      	b.n	80176fa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x236>
 8017762:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8017764:	3501      	adds	r5, #1
 8017766:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8017768:	429d      	cmp	r5, r3
 801776a:	f6bf af74 	bge.w	8017656 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
 801776e:	4659      	mov	r1, fp
 8017770:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8017772:	f7f7 fe3f 	bl	800f3f4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8017776:	4604      	mov	r4, r0
 8017778:	b110      	cbz	r0, 8017780 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
 801777a:	280a      	cmp	r0, #10
 801777c:	d1f2      	bne.n	8017764 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2a0>
 801777e:	e769      	b.n	8017654 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 8017780:	2400      	movs	r4, #0
 8017782:	e768      	b.n	8017656 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
 8017784:	f1bb 0f00 	cmp.w	fp, #0
 8017788:	f43f af59 	beq.w	801763e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x17a>
 801778c:	e774      	b.n	8017678 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>

0801778e <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 801778e:	b530      	push	{r4, r5, lr}
 8017790:	8ac4      	ldrh	r4, [r0, #22]
 8017792:	8b45      	ldrh	r5, [r0, #26]
 8017794:	8343      	strh	r3, [r0, #26]
 8017796:	442c      	add	r4, r5
 8017798:	1ae4      	subs	r4, r4, r3
 801779a:	8b83      	ldrh	r3, [r0, #28]
 801779c:	82c4      	strh	r4, [r0, #22]
 801779e:	8b04      	ldrh	r4, [r0, #24]
 80177a0:	4422      	add	r2, r4
 80177a2:	440c      	add	r4, r1
 80177a4:	1a59      	subs	r1, r3, r1
 80177a6:	83c2      	strh	r2, [r0, #30]
 80177a8:	8304      	strh	r4, [r0, #24]
 80177aa:	8381      	strh	r1, [r0, #28]
 80177ac:	bd30      	pop	{r4, r5, pc}

080177ae <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>:
 80177ae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80177b2:	4604      	mov	r4, r0
 80177b4:	8a47      	ldrh	r7, [r0, #18]
 80177b6:	68c0      	ldr	r0, [r0, #12]
 80177b8:	b085      	sub	sp, #20
 80177ba:	6803      	ldr	r3, [r0, #0]
 80177bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80177be:	4798      	blx	r3
 80177c0:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 80177c4:	7a63      	ldrb	r3, [r4, #9]
 80177c6:	eb06 0640 	add.w	r6, r6, r0, lsl #1
 80177ca:	3b01      	subs	r3, #1
 80177cc:	42b7      	cmp	r7, r6
 80177ce:	bfac      	ite	ge
 80177d0:	f04f 0900 	movge.w	r9, #0
 80177d4:	f04f 0901 	movlt.w	r9, #1
 80177d8:	2b05      	cmp	r3, #5
 80177da:	d804      	bhi.n	80177e6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x38>
 80177dc:	e8df f003 	tbb	[pc, r3]
 80177e0:	470f0854 	.word	0x470f0854
 80177e4:	4c4c      	.short	0x4c4c
 80177e6:	2500      	movs	r5, #0
 80177e8:	46a9      	mov	r9, r5
 80177ea:	462e      	mov	r6, r5
 80177ec:	462f      	mov	r7, r5
 80177ee:	e00e      	b.n	801780e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 80177f0:	42b7      	cmp	r7, r6
 80177f2:	f04f 0500 	mov.w	r5, #0
 80177f6:	bfb4      	ite	lt
 80177f8:	2600      	movlt	r6, #0
 80177fa:	2601      	movge	r6, #1
 80177fc:	e7f6      	b.n	80177ec <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
 80177fe:	42b7      	cmp	r7, r6
 8017800:	464d      	mov	r5, r9
 8017802:	f04f 0900 	mov.w	r9, #0
 8017806:	bfb4      	ite	lt
 8017808:	2600      	movlt	r6, #0
 801780a:	2601      	movge	r6, #1
 801780c:	464f      	mov	r7, r9
 801780e:	f04f 0800 	mov.w	r8, #0
 8017812:	f8a4 8016 	strh.w	r8, [r4, #22]
 8017816:	f8a4 8018 	strh.w	r8, [r4, #24]
 801781a:	f8cd 8004 	str.w	r8, [sp, #4]
 801781e:	2300      	movs	r3, #0
 8017820:	9303      	str	r3, [sp, #12]
 8017822:	8823      	ldrh	r3, [r4, #0]
 8017824:	2b20      	cmp	r3, #32
 8017826:	d033      	beq.n	8017890 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xe2>
 8017828:	f242 010b 	movw	r1, #8203	; 0x200b
 801782c:	1a5a      	subs	r2, r3, r1
 801782e:	f1d2 0a00 	rsbs	sl, r2, #0
 8017832:	eb4a 0a02 	adc.w	sl, sl, r2
 8017836:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801783a:	4293      	cmp	r3, r2
 801783c:	d008      	beq.n	8017850 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 801783e:	428b      	cmp	r3, r1
 8017840:	9a01      	ldr	r2, [sp, #4]
 8017842:	bf0e      	itee	eq
 8017844:	f04f 0a01 	moveq.w	sl, #1
 8017848:	461a      	movne	r2, r3
 801784a:	f04f 0a00 	movne.w	sl, #0
 801784e:	9201      	str	r2, [sp, #4]
 8017850:	ab03      	add	r3, sp, #12
 8017852:	68e2      	ldr	r2, [r4, #12]
 8017854:	7a21      	ldrb	r1, [r4, #8]
 8017856:	6860      	ldr	r0, [r4, #4]
 8017858:	f002 fd0a 	bl	801a270 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801785c:	8020      	strh	r0, [r4, #0]
 801785e:	b9d8      	cbnz	r0, 8017898 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xea>
 8017860:	8ba2      	ldrh	r2, [r4, #28]
 8017862:	2300      	movs	r3, #0
 8017864:	4611      	mov	r1, r2
 8017866:	4620      	mov	r0, r4
 8017868:	f7ff ff91 	bl	801778e <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801786c:	e06e      	b.n	801794c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
 801786e:	2500      	movs	r5, #0
 8017870:	2701      	movs	r7, #1
 8017872:	46a9      	mov	r9, r5
 8017874:	462e      	mov	r6, r5
 8017876:	e7ca      	b.n	801780e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 8017878:	42b7      	cmp	r7, r6
 801787a:	f04f 0500 	mov.w	r5, #0
 801787e:	bfb4      	ite	lt
 8017880:	2700      	movlt	r7, #0
 8017882:	2701      	movge	r7, #1
 8017884:	462e      	mov	r6, r5
 8017886:	e7c2      	b.n	801780e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 8017888:	2500      	movs	r5, #0
 801788a:	2601      	movs	r6, #1
 801788c:	46a9      	mov	r9, r5
 801788e:	e7ad      	b.n	80177ec <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
 8017890:	9301      	str	r3, [sp, #4]
 8017892:	f04f 0a01 	mov.w	sl, #1
 8017896:	e7db      	b.n	8017850 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 8017898:	8b63      	ldrh	r3, [r4, #26]
 801789a:	280a      	cmp	r0, #10
 801789c:	f103 0301 	add.w	r3, r3, #1
 80178a0:	8363      	strh	r3, [r4, #26]
 80178a2:	d0dd      	beq.n	8017860 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb2>
 80178a4:	9a03      	ldr	r2, [sp, #12]
 80178a6:	bb62      	cbnz	r2, 8017902 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x154>
 80178a8:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80178ac:	4298      	cmp	r0, r3
 80178ae:	d003      	beq.n	80178b8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
 80178b0:	f242 030b 	movw	r3, #8203	; 0x200b
 80178b4:	4298      	cmp	r0, r3
 80178b6:	d1b2      	bne.n	801781e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80178b8:	8823      	ldrh	r3, [r4, #0]
 80178ba:	8ba1      	ldrh	r1, [r4, #28]
 80178bc:	2b20      	cmp	r3, #32
 80178be:	d003      	beq.n	80178c8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x11a>
 80178c0:	f242 000b 	movw	r0, #8203	; 0x200b
 80178c4:	4283      	cmp	r3, r0
 80178c6:	d131      	bne.n	801792c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x17e>
 80178c8:	f1ba 0f00 	cmp.w	sl, #0
 80178cc:	bf0a      	itet	eq
 80178ce:	4688      	moveq	r8, r1
 80178d0:	4650      	movne	r0, sl
 80178d2:	2001      	moveq	r0, #1
 80178d4:	440a      	add	r2, r1
 80178d6:	8b23      	ldrh	r3, [r4, #24]
 80178d8:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 80178dc:	b292      	uxth	r2, r2
 80178de:	83a2      	strh	r2, [r4, #28]
 80178e0:	4413      	add	r3, r2
 80178e2:	f1b9 0f00 	cmp.w	r9, #0
 80178e6:	d102      	bne.n	80178ee <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x140>
 80178e8:	2d00      	cmp	r5, #0
 80178ea:	d042      	beq.n	8017972 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1c4>
 80178ec:	b300      	cbz	r0, 8017930 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x182>
 80178ee:	8c21      	ldrh	r1, [r4, #32]
 80178f0:	4419      	add	r1, r3
 80178f2:	458c      	cmp	ip, r1
 80178f4:	da37      	bge.n	8017966 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
 80178f6:	8ae1      	ldrh	r1, [r4, #22]
 80178f8:	2900      	cmp	r1, #0
 80178fa:	d034      	beq.n	8017966 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
 80178fc:	4563      	cmp	r3, ip
 80178fe:	dd8e      	ble.n	801781e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8017900:	e01d      	b.n	801793e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x190>
 8017902:	8893      	ldrh	r3, [r2, #4]
 8017904:	9901      	ldr	r1, [sp, #4]
 8017906:	8023      	strh	r3, [r4, #0]
 8017908:	f892 b00d 	ldrb.w	fp, [r2, #13]
 801790c:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 8017910:	f40b 7080 	and.w	r0, fp, #256	; 0x100
 8017914:	f892 b00a 	ldrb.w	fp, [r2, #10]
 8017918:	ea4b 0b00 	orr.w	fp, fp, r0
 801791c:	68e0      	ldr	r0, [r4, #12]
 801791e:	6803      	ldr	r3, [r0, #0]
 8017920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017922:	4798      	blx	r3
 8017924:	eb0b 0200 	add.w	r2, fp, r0
 8017928:	b292      	uxth	r2, r2
 801792a:	e7c5      	b.n	80178b8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
 801792c:	2000      	movs	r0, #0
 801792e:	e7d1      	b.n	80178d4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x126>
 8017930:	4563      	cmp	r3, ip
 8017932:	f77f af74 	ble.w	801781e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8017936:	8ae3      	ldrh	r3, [r4, #22]
 8017938:	2b00      	cmp	r3, #0
 801793a:	f43f af70 	beq.w	801781e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801793e:	2301      	movs	r3, #1
 8017940:	8c22      	ldrh	r2, [r4, #32]
 8017942:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 8017946:	8be3      	ldrh	r3, [r4, #30]
 8017948:	4413      	add	r3, r2
 801794a:	83e3      	strh	r3, [r4, #30]
 801794c:	68e0      	ldr	r0, [r4, #12]
 801794e:	6803      	ldr	r3, [r0, #0]
 8017950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017952:	4798      	blx	r3
 8017954:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 8017958:	4418      	add	r0, r3
 801795a:	8a63      	ldrh	r3, [r4, #18]
 801795c:	1a18      	subs	r0, r3, r0
 801795e:	8260      	strh	r0, [r4, #18]
 8017960:	b005      	add	sp, #20
 8017962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017966:	2300      	movs	r3, #0
 8017968:	4611      	mov	r1, r2
 801796a:	4620      	mov	r0, r4
 801796c:	f7ff ff0f 	bl	801778e <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8017970:	e755      	b.n	801781e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8017972:	4563      	cmp	r3, ip
 8017974:	dd14      	ble.n	80179a0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1f2>
 8017976:	b117      	cbz	r7, 801797e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1d0>
 8017978:	2301      	movs	r3, #1
 801797a:	460a      	mov	r2, r1
 801797c:	e772      	b.n	8017864 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb6>
 801797e:	2e00      	cmp	r6, #0
 8017980:	f43f af4d 	beq.w	801781e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8017984:	2800      	cmp	r0, #0
 8017986:	f47f af4a 	bne.w	801781e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801798a:	f1ba 0f00 	cmp.w	sl, #0
 801798e:	d002      	beq.n	8017996 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1e8>
 8017990:	2301      	movs	r3, #1
 8017992:	4642      	mov	r2, r8
 8017994:	e767      	b.n	8017866 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb8>
 8017996:	8ae3      	ldrh	r3, [r4, #22]
 8017998:	2b00      	cmp	r3, #0
 801799a:	f43f af40 	beq.w	801781e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801799e:	e7d5      	b.n	801794c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
 80179a0:	2800      	cmp	r0, #0
 80179a2:	f47f af3c 	bne.w	801781e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80179a6:	f1ba 0f00 	cmp.w	sl, #0
 80179aa:	f43f af38 	beq.w	801781e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80179ae:	2301      	movs	r3, #1
 80179b0:	4642      	mov	r2, r8
 80179b2:	e7da      	b.n	801796a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1bc>

080179b4 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 80179b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80179b6:	4605      	mov	r5, r0
 80179b8:	b08f      	sub	sp, #60	; 0x3c
 80179ba:	4617      	mov	r7, r2
 80179bc:	461c      	mov	r4, r3
 80179be:	460e      	mov	r6, r1
 80179c0:	b1d1      	cbz	r1, 80179f8 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 80179c2:	681b      	ldr	r3, [r3, #0]
 80179c4:	4620      	mov	r0, r4
 80179c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80179c8:	4798      	blx	r3
 80179ca:	4240      	negs	r0, r0
 80179cc:	9603      	str	r6, [sp, #12]
 80179ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80179d2:	b200      	sxth	r0, r0
 80179d4:	9700      	str	r7, [sp, #0]
 80179d6:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 80179da:	4629      	mov	r1, r5
 80179dc:	e9cd 4001 	strd	r4, r0, [sp, #4]
 80179e0:	2401      	movs	r4, #1
 80179e2:	a805      	add	r0, sp, #20
 80179e4:	f7ff fcbe 	bl	8017364 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 80179e8:	a805      	add	r0, sp, #20
 80179ea:	f7ff fee0 	bl	80177ae <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 80179ee:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 80179f2:	b163      	cbz	r3, 8017a0e <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x5a>
 80179f4:	3401      	adds	r4, #1
 80179f6:	e7f7      	b.n	80179e8 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 80179f8:	2401      	movs	r4, #1
 80179fa:	f002 fd05 	bl	801a408 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80179fe:	280a      	cmp	r0, #10
 8017a00:	4628      	mov	r0, r5
 8017a02:	bf08      	it	eq
 8017a04:	3401      	addeq	r4, #1
 8017a06:	f002 fcff 	bl	801a408 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8017a0a:	2800      	cmp	r0, #0
 8017a0c:	d1f7      	bne.n	80179fe <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
 8017a0e:	b2a0      	uxth	r0, r4
 8017a10:	b00f      	add	sp, #60	; 0x3c
 8017a12:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017a14 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 8017a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a18:	b0e3      	sub	sp, #396	; 0x18c
 8017a1a:	461c      	mov	r4, r3
 8017a1c:	4683      	mov	fp, r0
 8017a1e:	4688      	mov	r8, r1
 8017a20:	9b6c      	ldr	r3, [sp, #432]	; 0x1b0
 8017a22:	2b00      	cmp	r3, #0
 8017a24:	f000 810f 	beq.w	8017c46 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 8017a28:	6823      	ldr	r3, [r4, #0]
 8017a2a:	2b00      	cmp	r3, #0
 8017a2c:	f000 810b 	beq.w	8017c46 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 8017a30:	7ba3      	ldrb	r3, [r4, #14]
 8017a32:	2b00      	cmp	r3, #0
 8017a34:	f000 8107 	beq.w	8017c46 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 8017a38:	ad0a      	add	r5, sp, #40	; 0x28
 8017a3a:	6810      	ldr	r0, [r2, #0]
 8017a3c:	6851      	ldr	r1, [r2, #4]
 8017a3e:	462b      	mov	r3, r5
 8017a40:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
 8017a44:	c303      	stmia	r3!, {r0, r1}
 8017a46:	2100      	movs	r1, #0
 8017a48:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 8017a4c:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8017a50:	4628      	mov	r0, r5
 8017a52:	910c      	str	r1, [sp, #48]	; 0x30
 8017a54:	a90c      	add	r1, sp, #48	; 0x30
 8017a56:	79a2      	ldrb	r2, [r4, #6]
 8017a58:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8017a5c:	f7ff fd01 	bl	8017462 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8017a60:	a90c      	add	r1, sp, #48	; 0x30
 8017a62:	79a2      	ldrb	r2, [r4, #6]
 8017a64:	4608      	mov	r0, r1
 8017a66:	f7ff fcfc 	bl	8017462 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8017a6a:	a817      	add	r0, sp, #92	; 0x5c
 8017a6c:	f002 f8a0 	bl	8019bb0 <_ZN8touchgfx12TextProviderC1Ev>
 8017a70:	6820      	ldr	r0, [r4, #0]
 8017a72:	6803      	ldr	r3, [r0, #0]
 8017a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017a76:	4798      	blx	r3
 8017a78:	4606      	mov	r6, r0
 8017a7a:	6820      	ldr	r0, [r4, #0]
 8017a7c:	6803      	ldr	r3, [r0, #0]
 8017a7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017a80:	4798      	blx	r3
 8017a82:	4633      	mov	r3, r6
 8017a84:	9a6d      	ldr	r2, [sp, #436]	; 0x1b4
 8017a86:	996c      	ldr	r1, [sp, #432]	; 0x1b0
 8017a88:	9000      	str	r0, [sp, #0]
 8017a8a:	a817      	add	r0, sp, #92	; 0x5c
 8017a8c:	f002 f8eb 	bl	8019c66 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8017a90:	6820      	ldr	r0, [r4, #0]
 8017a92:	f894 a004 	ldrb.w	sl, [r4, #4]
 8017a96:	6803      	ldr	r3, [r0, #0]
 8017a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017a9a:	4798      	blx	r3
 8017a9c:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 8017aa0:	6823      	ldr	r3, [r4, #0]
 8017aa2:	4607      	mov	r7, r0
 8017aa4:	4406      	add	r6, r0
 8017aa6:	a830      	add	r0, sp, #192	; 0xc0
 8017aa8:	f893 9009 	ldrb.w	r9, [r3, #9]
 8017aac:	f002 f880 	bl	8019bb0 <_ZN8touchgfx12TextProviderC1Ev>
 8017ab0:	7c23      	ldrb	r3, [r4, #16]
 8017ab2:	b17b      	cbz	r3, 8017ad4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xc0>
 8017ab4:	6820      	ldr	r0, [r4, #0]
 8017ab6:	6803      	ldr	r3, [r0, #0]
 8017ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017aba:	4798      	blx	r3
 8017abc:	9009      	str	r0, [sp, #36]	; 0x24
 8017abe:	6820      	ldr	r0, [r4, #0]
 8017ac0:	6802      	ldr	r2, [r0, #0]
 8017ac2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8017ac4:	4790      	blx	r2
 8017ac6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017ac8:	9000      	str	r0, [sp, #0]
 8017aca:	a830      	add	r0, sp, #192	; 0xc0
 8017acc:	9a6d      	ldr	r2, [sp, #436]	; 0x1b4
 8017ace:	996c      	ldr	r1, [sp, #432]	; 0x1b0
 8017ad0:	f002 f8c9 	bl	8019c66 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8017ad4:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8017ad8:	a80e      	add	r0, sp, #56	; 0x38
 8017ada:	7be2      	ldrb	r2, [r4, #15]
 8017adc:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 8017ae0:	1a8a      	subs	r2, r1, r2
 8017ae2:	7c21      	ldrb	r1, [r4, #16]
 8017ae4:	9103      	str	r1, [sp, #12]
 8017ae6:	b292      	uxth	r2, r2
 8017ae8:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8017aec:	9102      	str	r1, [sp, #8]
 8017aee:	6821      	ldr	r1, [r4, #0]
 8017af0:	9101      	str	r1, [sp, #4]
 8017af2:	7961      	ldrb	r1, [r4, #5]
 8017af4:	9100      	str	r1, [sp, #0]
 8017af6:	a930      	add	r1, sp, #192	; 0xc0
 8017af8:	f7ff fc34 	bl	8017364 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 8017afc:	2e00      	cmp	r6, #0
 8017afe:	dc5b      	bgt.n	8017bb8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
 8017b00:	af17      	add	r7, sp, #92	; 0x5c
 8017b02:	f04f 0900 	mov.w	r9, #0
 8017b06:	7c23      	ldrb	r3, [r4, #16]
 8017b08:	2b00      	cmp	r3, #0
 8017b0a:	f000 80ae 	beq.w	8017c6a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 8017b0e:	a80e      	add	r0, sp, #56	; 0x38
 8017b10:	f7ff fe4d 	bl	80177ae <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8017b14:	f1ba 0f00 	cmp.w	sl, #0
 8017b18:	f000 80a2 	beq.w	8017c60 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24c>
 8017b1c:	7c23      	ldrb	r3, [r4, #16]
 8017b1e:	2264      	movs	r2, #100	; 0x64
 8017b20:	4639      	mov	r1, r7
 8017b22:	a849      	add	r0, sp, #292	; 0x124
 8017b24:	9309      	str	r3, [sp, #36]	; 0x24
 8017b26:	f00e fedb 	bl	80268e0 <memcpy>
 8017b2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017b2c:	2b00      	cmp	r3, #0
 8017b2e:	f000 80a4 	beq.w	8017c7a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x266>
 8017b32:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 8017b36:	7922      	ldrb	r2, [r4, #4]
 8017b38:	2a01      	cmp	r2, #1
 8017b3a:	f040 8087 	bne.w	8017c4c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8017b3e:	f9bd 0034 	ldrsh.w	r0, [sp, #52]	; 0x34
 8017b42:	1ac0      	subs	r0, r0, r3
 8017b44:	2302      	movs	r3, #2
 8017b46:	fb90 f0f3 	sdiv	r0, r0, r3
 8017b4a:	b200      	sxth	r0, r0
 8017b4c:	7c23      	ldrb	r3, [r4, #16]
 8017b4e:	2b00      	cmp	r3, #0
 8017b50:	f000 8088 	beq.w	8017c64 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x250>
 8017b54:	f8bd 204e 	ldrh.w	r2, [sp, #78]	; 0x4e
 8017b58:	f89d 105a 	ldrb.w	r1, [sp, #90]	; 0x5a
 8017b5c:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8017b60:	e9cd 2105 	strd	r2, r1, [sp, #20]
 8017b64:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 8017b68:	2100      	movs	r1, #0
 8017b6a:	4410      	add	r0, r2
 8017b6c:	4642      	mov	r2, r8
 8017b6e:	b200      	sxth	r0, r0
 8017b70:	e9cd 9703 	strd	r9, r7, [sp, #12]
 8017b74:	9000      	str	r0, [sp, #0]
 8017b76:	4658      	mov	r0, fp
 8017b78:	e9cd 5401 	strd	r5, r4, [sp, #4]
 8017b7c:	f7ff fca2 	bl	80174c4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 8017b80:	2800      	cmp	r0, #0
 8017b82:	d160      	bne.n	8017c46 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 8017b84:	b2b2      	uxth	r2, r6
 8017b86:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 8017b8a:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 8017b8e:	4413      	add	r3, r2
 8017b90:	1a8a      	subs	r2, r1, r2
 8017b92:	b21b      	sxth	r3, r3
 8017b94:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
 8017b98:	f89d 205a 	ldrb.w	r2, [sp, #90]	; 0x5a
 8017b9c:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8017ba0:	2a00      	cmp	r2, #0
 8017ba2:	d150      	bne.n	8017c46 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 8017ba4:	6822      	ldr	r2, [r4, #0]
 8017ba6:	8869      	ldrh	r1, [r5, #2]
 8017ba8:	7a12      	ldrb	r2, [r2, #8]
 8017baa:	1a9b      	subs	r3, r3, r2
 8017bac:	88ea      	ldrh	r2, [r5, #6]
 8017bae:	440a      	add	r2, r1
 8017bb0:	b212      	sxth	r2, r2
 8017bb2:	4293      	cmp	r3, r2
 8017bb4:	dda7      	ble.n	8017b06 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf2>
 8017bb6:	e046      	b.n	8017c46 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 8017bb8:	7c23      	ldrb	r3, [r4, #16]
 8017bba:	444f      	add	r7, r9
 8017bbc:	b1c3      	cbz	r3, 8017bf0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1dc>
 8017bbe:	f64f 79ff 	movw	r9, #65535	; 0xffff
 8017bc2:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8017bc6:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8017bca:	443b      	add	r3, r7
 8017bcc:	4293      	cmp	r3, r2
 8017bce:	da97      	bge.n	8017b00 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 8017bd0:	a80e      	add	r0, sp, #56	; 0x38
 8017bd2:	f7ff fdec 	bl	80177ae <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8017bd6:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 8017bda:	3b01      	subs	r3, #1
 8017bdc:	b29b      	uxth	r3, r3
 8017bde:	454b      	cmp	r3, r9
 8017be0:	9309      	str	r3, [sp, #36]	; 0x24
 8017be2:	d021      	beq.n	8017c28 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x214>
 8017be4:	7961      	ldrb	r1, [r4, #5]
 8017be6:	a817      	add	r0, sp, #92	; 0x5c
 8017be8:	f7f7 fc04 	bl	800f3f4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8017bec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017bee:	e7f4      	b.n	8017bda <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c6>
 8017bf0:	fa1f f986 	uxth.w	r9, r6
 8017bf4:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8017bf8:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8017bfc:	443b      	add	r3, r7
 8017bfe:	4293      	cmp	r3, r2
 8017c00:	f6bf af7e 	bge.w	8017b00 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 8017c04:	a817      	add	r0, sp, #92	; 0x5c
 8017c06:	f002 fbff 	bl	801a408 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8017c0a:	b1e0      	cbz	r0, 8017c46 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 8017c0c:	280a      	cmp	r0, #10
 8017c0e:	d1f1      	bne.n	8017bf4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 8017c10:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 8017c14:	444b      	add	r3, r9
 8017c16:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8017c1a:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 8017c1e:	eba3 0309 	sub.w	r3, r3, r9
 8017c22:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8017c26:	e7e5      	b.n	8017bf4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 8017c28:	b2b3      	uxth	r3, r6
 8017c2a:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8017c2e:	441a      	add	r2, r3
 8017c30:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 8017c34:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
 8017c38:	1ad3      	subs	r3, r2, r3
 8017c3a:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8017c3e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8017c42:	2b00      	cmp	r3, #0
 8017c44:	d1bd      	bne.n	8017bc2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ae>
 8017c46:	b063      	add	sp, #396	; 0x18c
 8017c48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017c4c:	2a02      	cmp	r2, #2
 8017c4e:	d105      	bne.n	8017c5c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x248>
 8017c50:	7be2      	ldrb	r2, [r4, #15]
 8017c52:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 8017c56:	1a80      	subs	r0, r0, r2
 8017c58:	1ac0      	subs	r0, r0, r3
 8017c5a:	e776      	b.n	8017b4a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x136>
 8017c5c:	2000      	movs	r0, #0
 8017c5e:	e775      	b.n	8017b4c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 8017c60:	7be0      	ldrb	r0, [r4, #15]
 8017c62:	e773      	b.n	8017b4c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 8017c64:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8017c68:	e776      	b.n	8017b58 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x144>
 8017c6a:	f1ba 0f00 	cmp.w	sl, #0
 8017c6e:	d0f7      	beq.n	8017c60 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24c>
 8017c70:	2264      	movs	r2, #100	; 0x64
 8017c72:	4639      	mov	r1, r7
 8017c74:	a849      	add	r0, sp, #292	; 0x124
 8017c76:	f00e fe33 	bl	80268e0 <memcpy>
 8017c7a:	2300      	movs	r3, #0
 8017c7c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8017c80:	6821      	ldr	r1, [r4, #0]
 8017c82:	a849      	add	r0, sp, #292	; 0x124
 8017c84:	f7ff fbb1 	bl	80173ea <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 8017c88:	b203      	sxth	r3, r0
 8017c8a:	e754      	b.n	8017b36 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>

08017c8c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 8017c8c:	2b03      	cmp	r3, #3
 8017c8e:	d818      	bhi.n	8017cc2 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 8017c90:	e8df f003 	tbb	[pc, r3]
 8017c94:	130d0602 	.word	0x130d0602
 8017c98:	f9b0 2000 	ldrsh.w	r2, [r0]
 8017c9c:	1850      	adds	r0, r2, r1
 8017c9e:	4770      	bx	lr
 8017ca0:	8803      	ldrh	r3, [r0, #0]
 8017ca2:	8880      	ldrh	r0, [r0, #4]
 8017ca4:	4418      	add	r0, r3
 8017ca6:	b200      	sxth	r0, r0
 8017ca8:	1a80      	subs	r0, r0, r2
 8017caa:	3801      	subs	r0, #1
 8017cac:	4770      	bx	lr
 8017cae:	8803      	ldrh	r3, [r0, #0]
 8017cb0:	8880      	ldrh	r0, [r0, #4]
 8017cb2:	4418      	add	r0, r3
 8017cb4:	b200      	sxth	r0, r0
 8017cb6:	1a40      	subs	r0, r0, r1
 8017cb8:	e7f7      	b.n	8017caa <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 8017cba:	f9b0 0000 	ldrsh.w	r0, [r0]
 8017cbe:	4410      	add	r0, r2
 8017cc0:	4770      	bx	lr
 8017cc2:	2000      	movs	r0, #0
 8017cc4:	4770      	bx	lr

08017cc6 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 8017cc6:	2b03      	cmp	r3, #3
 8017cc8:	d817      	bhi.n	8017cfa <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 8017cca:	e8df f003 	tbb	[pc, r3]
 8017cce:	0602      	.short	0x0602
 8017cd0:	1009      	.short	0x1009
 8017cd2:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8017cd6:	1850      	adds	r0, r2, r1
 8017cd8:	4770      	bx	lr
 8017cda:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8017cde:	e7fa      	b.n	8017cd6 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 8017ce0:	8843      	ldrh	r3, [r0, #2]
 8017ce2:	88c0      	ldrh	r0, [r0, #6]
 8017ce4:	4418      	add	r0, r3
 8017ce6:	b200      	sxth	r0, r0
 8017ce8:	1a80      	subs	r0, r0, r2
 8017cea:	3801      	subs	r0, #1
 8017cec:	4770      	bx	lr
 8017cee:	8843      	ldrh	r3, [r0, #2]
 8017cf0:	88c0      	ldrh	r0, [r0, #6]
 8017cf2:	4418      	add	r0, r3
 8017cf4:	b200      	sxth	r0, r0
 8017cf6:	1a40      	subs	r0, r0, r1
 8017cf8:	e7f7      	b.n	8017cea <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 8017cfa:	2000      	movs	r0, #0
 8017cfc:	4770      	bx	lr
	...

08017d00 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 8017d00:	4b01      	ldr	r3, [pc, #4]	; (8017d08 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 8017d02:	2200      	movs	r2, #0
 8017d04:	601a      	str	r2, [r3, #0]
 8017d06:	4770      	bx	lr
 8017d08:	20024430 	.word	0x20024430

08017d0c <_ZN8touchgfx16TouchCalibration4clzuEm>:
 8017d0c:	4603      	mov	r3, r0
 8017d0e:	b1c8      	cbz	r0, 8017d44 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 8017d10:	0c02      	lsrs	r2, r0, #16
 8017d12:	0412      	lsls	r2, r2, #16
 8017d14:	b9a2      	cbnz	r2, 8017d40 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 8017d16:	0403      	lsls	r3, r0, #16
 8017d18:	2010      	movs	r0, #16
 8017d1a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8017d1e:	bf04      	itt	eq
 8017d20:	021b      	lsleq	r3, r3, #8
 8017d22:	3008      	addeq	r0, #8
 8017d24:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8017d28:	bf04      	itt	eq
 8017d2a:	011b      	lsleq	r3, r3, #4
 8017d2c:	3004      	addeq	r0, #4
 8017d2e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8017d32:	bf04      	itt	eq
 8017d34:	009b      	lsleq	r3, r3, #2
 8017d36:	3002      	addeq	r0, #2
 8017d38:	2b00      	cmp	r3, #0
 8017d3a:	db04      	blt.n	8017d46 <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 8017d3c:	3001      	adds	r0, #1
 8017d3e:	4770      	bx	lr
 8017d40:	2000      	movs	r0, #0
 8017d42:	e7ea      	b.n	8017d1a <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 8017d44:	2020      	movs	r0, #32
 8017d46:	4770      	bx	lr

08017d48 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 8017d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017d4c:	b087      	sub	sp, #28
 8017d4e:	4681      	mov	r9, r0
 8017d50:	4698      	mov	r8, r3
 8017d52:	4610      	mov	r0, r2
 8017d54:	460d      	mov	r5, r1
 8017d56:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 8017d5a:	b981      	cbnz	r1, 8017d7e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 8017d5c:	b14b      	cbz	r3, 8017d72 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 8017d5e:	460b      	mov	r3, r1
 8017d60:	464a      	mov	r2, r9
 8017d62:	4641      	mov	r1, r8
 8017d64:	e9cd 4700 	strd	r4, r7, [sp]
 8017d68:	f7ff ffee 	bl	8017d48 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8017d6c:	b007      	add	sp, #28
 8017d6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017d72:	f04f 33ff 	mov.w	r3, #4294967295
 8017d76:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8017d7a:	603b      	str	r3, [r7, #0]
 8017d7c:	e7f6      	b.n	8017d6c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 8017d7e:	fa32 fa01 	lsrs.w	sl, r2, r1
 8017d82:	d107      	bne.n	8017d94 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 8017d84:	fb09 f602 	mul.w	r6, r9, r2
 8017d88:	fbb6 f0f4 	udiv	r0, r6, r4
 8017d8c:	fb04 6610 	mls	r6, r4, r0, r6
 8017d90:	603e      	str	r6, [r7, #0]
 8017d92:	e7eb      	b.n	8017d6c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 8017d94:	2601      	movs	r6, #1
 8017d96:	fa09 fb01 	lsl.w	fp, r9, r1
 8017d9a:	408e      	lsls	r6, r1
 8017d9c:	fbbb f3f4 	udiv	r3, fp, r4
 8017da0:	3e01      	subs	r6, #1
 8017da2:	9302      	str	r3, [sp, #8]
 8017da4:	fb0a f303 	mul.w	r3, sl, r3
 8017da8:	4016      	ands	r6, r2
 8017daa:	9303      	str	r3, [sp, #12]
 8017dac:	4630      	mov	r0, r6
 8017dae:	f7ff ffad 	bl	8017d0c <_ZN8touchgfx16TouchCalibration4clzuEm>
 8017db2:	464a      	mov	r2, r9
 8017db4:	460b      	mov	r3, r1
 8017db6:	4601      	mov	r1, r0
 8017db8:	4630      	mov	r0, r6
 8017dba:	e9cd 4700 	strd	r4, r7, [sp]
 8017dbe:	f7ff ffc3 	bl	8017d48 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8017dc2:	9b02      	ldr	r3, [sp, #8]
 8017dc4:	4606      	mov	r6, r0
 8017dc6:	eb05 0108 	add.w	r1, r5, r8
 8017dca:	fb04 bb13 	mls	fp, r4, r3, fp
 8017dce:	4658      	mov	r0, fp
 8017dd0:	f7ff ff9c 	bl	8017d0c <_ZN8touchgfx16TouchCalibration4clzuEm>
 8017dd4:	ab05      	add	r3, sp, #20
 8017dd6:	465a      	mov	r2, fp
 8017dd8:	e9cd 4300 	strd	r4, r3, [sp]
 8017ddc:	4603      	mov	r3, r0
 8017dde:	4650      	mov	r0, sl
 8017de0:	f7ff ffb2 	bl	8017d48 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8017de4:	6839      	ldr	r1, [r7, #0]
 8017de6:	9a05      	ldr	r2, [sp, #20]
 8017de8:	9b03      	ldr	r3, [sp, #12]
 8017dea:	4411      	add	r1, r2
 8017dec:	fbb1 f2f4 	udiv	r2, r1, r4
 8017df0:	18d3      	adds	r3, r2, r3
 8017df2:	fb04 1412 	mls	r4, r4, r2, r1
 8017df6:	441e      	add	r6, r3
 8017df8:	603c      	str	r4, [r7, #0]
 8017dfa:	4430      	add	r0, r6
 8017dfc:	e7b6      	b.n	8017d6c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

08017dfe <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 8017dfe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017e02:	b085      	sub	sp, #20
 8017e04:	f1b0 0900 	subs.w	r9, r0, #0
 8017e08:	461d      	mov	r5, r3
 8017e0a:	4617      	mov	r7, r2
 8017e0c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8017e0e:	bfbb      	ittet	lt
 8017e10:	f1c9 0900 	rsblt	r9, r9, #0
 8017e14:	f04f 36ff 	movlt.w	r6, #4294967295
 8017e18:	2601      	movge	r6, #1
 8017e1a:	6823      	ldrlt	r3, [r4, #0]
 8017e1c:	bfbc      	itt	lt
 8017e1e:	425b      	neglt	r3, r3
 8017e20:	6023      	strlt	r3, [r4, #0]
 8017e22:	2a00      	cmp	r2, #0
 8017e24:	da04      	bge.n	8017e30 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 8017e26:	6823      	ldr	r3, [r4, #0]
 8017e28:	4257      	negs	r7, r2
 8017e2a:	4276      	negs	r6, r6
 8017e2c:	425b      	negs	r3, r3
 8017e2e:	6023      	str	r3, [r4, #0]
 8017e30:	2d00      	cmp	r5, #0
 8017e32:	4638      	mov	r0, r7
 8017e34:	bfba      	itte	lt
 8017e36:	426d      	neglt	r5, r5
 8017e38:	f04f 38ff 	movlt.w	r8, #4294967295
 8017e3c:	f04f 0801 	movge.w	r8, #1
 8017e40:	f7ff ff64 	bl	8017d0c <_ZN8touchgfx16TouchCalibration4clzuEm>
 8017e44:	ab03      	add	r3, sp, #12
 8017e46:	463a      	mov	r2, r7
 8017e48:	e9cd 5300 	strd	r5, r3, [sp]
 8017e4c:	4603      	mov	r3, r0
 8017e4e:	4648      	mov	r0, r9
 8017e50:	f7ff ff7a 	bl	8017d48 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8017e54:	6823      	ldr	r3, [r4, #0]
 8017e56:	9a03      	ldr	r2, [sp, #12]
 8017e58:	4546      	cmp	r6, r8
 8017e5a:	441a      	add	r2, r3
 8017e5c:	fb92 f3f5 	sdiv	r3, r2, r5
 8017e60:	4418      	add	r0, r3
 8017e62:	fb05 2313 	mls	r3, r5, r3, r2
 8017e66:	bf18      	it	ne
 8017e68:	4240      	negne	r0, r0
 8017e6a:	1c72      	adds	r2, r6, #1
 8017e6c:	6023      	str	r3, [r4, #0]
 8017e6e:	d105      	bne.n	8017e7c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 8017e70:	2b00      	cmp	r3, #0
 8017e72:	f1c3 0200 	rsb	r2, r3, #0
 8017e76:	db0b      	blt.n	8017e90 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 8017e78:	6022      	str	r2, [r4, #0]
 8017e7a:	e006      	b.n	8017e8a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8017e7c:	2e01      	cmp	r6, #1
 8017e7e:	d104      	bne.n	8017e8a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8017e80:	2b00      	cmp	r3, #0
 8017e82:	da02      	bge.n	8017e8a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8017e84:	442b      	add	r3, r5
 8017e86:	3801      	subs	r0, #1
 8017e88:	6023      	str	r3, [r4, #0]
 8017e8a:	b005      	add	sp, #20
 8017e8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017e90:	3801      	subs	r0, #1
 8017e92:	1b52      	subs	r2, r2, r5
 8017e94:	e7f0      	b.n	8017e78 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

08017e98 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 8017e98:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8017e9c:	4c1c      	ldr	r4, [pc, #112]	; (8017f10 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 8017e9e:	4605      	mov	r5, r0
 8017ea0:	6807      	ldr	r7, [r0, #0]
 8017ea2:	69a3      	ldr	r3, [r4, #24]
 8017ea4:	b92b      	cbnz	r3, 8017eb2 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 8017ea6:	6840      	ldr	r0, [r0, #4]
 8017ea8:	e9c5 7000 	strd	r7, r0, [r5]
 8017eac:	b004      	add	sp, #16
 8017eae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017eb2:	f04f 0802 	mov.w	r8, #2
 8017eb6:	68a2      	ldr	r2, [r4, #8]
 8017eb8:	ae04      	add	r6, sp, #16
 8017eba:	6820      	ldr	r0, [r4, #0]
 8017ebc:	fb93 f1f8 	sdiv	r1, r3, r8
 8017ec0:	440a      	add	r2, r1
 8017ec2:	69e1      	ldr	r1, [r4, #28]
 8017ec4:	f846 2d04 	str.w	r2, [r6, #-4]!
 8017ec8:	463a      	mov	r2, r7
 8017eca:	9600      	str	r6, [sp, #0]
 8017ecc:	f7ff ff97 	bl	8017dfe <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8017ed0:	69a3      	ldr	r3, [r4, #24]
 8017ed2:	4607      	mov	r7, r0
 8017ed4:	686a      	ldr	r2, [r5, #4]
 8017ed6:	6a21      	ldr	r1, [r4, #32]
 8017ed8:	9600      	str	r6, [sp, #0]
 8017eda:	6860      	ldr	r0, [r4, #4]
 8017edc:	f7ff ff8f 	bl	8017dfe <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8017ee0:	69a3      	ldr	r3, [r4, #24]
 8017ee2:	6962      	ldr	r2, [r4, #20]
 8017ee4:	4407      	add	r7, r0
 8017ee6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8017ee8:	9600      	str	r6, [sp, #0]
 8017eea:	68e0      	ldr	r0, [r4, #12]
 8017eec:	fb93 f8f8 	sdiv	r8, r3, r8
 8017ef0:	4442      	add	r2, r8
 8017ef2:	9203      	str	r2, [sp, #12]
 8017ef4:	682a      	ldr	r2, [r5, #0]
 8017ef6:	f7ff ff82 	bl	8017dfe <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8017efa:	4680      	mov	r8, r0
 8017efc:	9600      	str	r6, [sp, #0]
 8017efe:	69a3      	ldr	r3, [r4, #24]
 8017f00:	686a      	ldr	r2, [r5, #4]
 8017f02:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8017f04:	6920      	ldr	r0, [r4, #16]
 8017f06:	f7ff ff7a 	bl	8017dfe <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8017f0a:	4440      	add	r0, r8
 8017f0c:	e7cc      	b.n	8017ea8 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 8017f0e:	bf00      	nop
 8017f10:	20024434 	.word	0x20024434

08017f14 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8017f14:	4b07      	ldr	r3, [pc, #28]	; (8017f34 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 8017f16:	781b      	ldrb	r3, [r3, #0]
 8017f18:	2b01      	cmp	r3, #1
 8017f1a:	d109      	bne.n	8017f30 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 8017f1c:	f9b1 3000 	ldrsh.w	r3, [r1]
 8017f20:	f9b0 2000 	ldrsh.w	r2, [r0]
 8017f24:	8003      	strh	r3, [r0, #0]
 8017f26:	4b04      	ldr	r3, [pc, #16]	; (8017f38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 8017f28:	881b      	ldrh	r3, [r3, #0]
 8017f2a:	3b01      	subs	r3, #1
 8017f2c:	1a9b      	subs	r3, r3, r2
 8017f2e:	800b      	strh	r3, [r1, #0]
 8017f30:	4770      	bx	lr
 8017f32:	bf00      	nop
 8017f34:	20024420 	.word	0x20024420
 8017f38:	2002441c 	.word	0x2002441c

08017f3c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 8017f3c:	4b07      	ldr	r3, [pc, #28]	; (8017f5c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 8017f3e:	b510      	push	{r4, lr}
 8017f40:	781b      	ldrb	r3, [r3, #0]
 8017f42:	2b01      	cmp	r3, #1
 8017f44:	d108      	bne.n	8017f58 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 8017f46:	4b06      	ldr	r3, [pc, #24]	; (8017f60 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 8017f48:	880c      	ldrh	r4, [r1, #0]
 8017f4a:	881b      	ldrh	r3, [r3, #0]
 8017f4c:	f9b0 2000 	ldrsh.w	r2, [r0]
 8017f50:	3b01      	subs	r3, #1
 8017f52:	1b1b      	subs	r3, r3, r4
 8017f54:	8003      	strh	r3, [r0, #0]
 8017f56:	800a      	strh	r2, [r1, #0]
 8017f58:	bd10      	pop	{r4, pc}
 8017f5a:	bf00      	nop
 8017f5c:	20024420 	.word	0x20024420
 8017f60:	2002441c 	.word	0x2002441c

08017f64 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 8017f64:	4b0a      	ldr	r3, [pc, #40]	; (8017f90 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 8017f66:	b510      	push	{r4, lr}
 8017f68:	781b      	ldrb	r3, [r3, #0]
 8017f6a:	2b01      	cmp	r3, #1
 8017f6c:	d10e      	bne.n	8017f8c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 8017f6e:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8017f72:	8843      	ldrh	r3, [r0, #2]
 8017f74:	f9b0 4000 	ldrsh.w	r4, [r0]
 8017f78:	18ca      	adds	r2, r1, r3
 8017f7a:	4b06      	ldr	r3, [pc, #24]	; (8017f94 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 8017f7c:	8044      	strh	r4, [r0, #2]
 8017f7e:	881b      	ldrh	r3, [r3, #0]
 8017f80:	1a9b      	subs	r3, r3, r2
 8017f82:	8003      	strh	r3, [r0, #0]
 8017f84:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8017f88:	8081      	strh	r1, [r0, #4]
 8017f8a:	80c3      	strh	r3, [r0, #6]
 8017f8c:	bd10      	pop	{r4, pc}
 8017f8e:	bf00      	nop
 8017f90:	20024420 	.word	0x20024420
 8017f94:	2002441c 	.word	0x2002441c

08017f98 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 8017f98:	4b08      	ldr	r3, [pc, #32]	; (8017fbc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 8017f9a:	781b      	ldrb	r3, [r3, #0]
 8017f9c:	2b01      	cmp	r3, #1
 8017f9e:	d10c      	bne.n	8017fba <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 8017fa0:	8803      	ldrh	r3, [r0, #0]
 8017fa2:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 8017fa6:	8842      	ldrh	r2, [r0, #2]
 8017fa8:	8002      	strh	r2, [r0, #0]
 8017faa:	185a      	adds	r2, r3, r1
 8017fac:	4b04      	ldr	r3, [pc, #16]	; (8017fc0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 8017fae:	881b      	ldrh	r3, [r3, #0]
 8017fb0:	1a9b      	subs	r3, r3, r2
 8017fb2:	8043      	strh	r3, [r0, #2]
 8017fb4:	88c3      	ldrh	r3, [r0, #6]
 8017fb6:	80c1      	strh	r1, [r0, #6]
 8017fb8:	8083      	strh	r3, [r0, #4]
 8017fba:	4770      	bx	lr
 8017fbc:	20024420 	.word	0x20024420
 8017fc0:	2002441c 	.word	0x2002441c

08017fc4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8017fc4:	4b07      	ldr	r3, [pc, #28]	; (8017fe4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 8017fc6:	b510      	push	{r4, lr}
 8017fc8:	781b      	ldrb	r3, [r3, #0]
 8017fca:	2b01      	cmp	r3, #1
 8017fcc:	d108      	bne.n	8017fe0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 8017fce:	f9b1 3000 	ldrsh.w	r3, [r1]
 8017fd2:	f9b0 4000 	ldrsh.w	r4, [r0]
 8017fd6:	8003      	strh	r3, [r0, #0]
 8017fd8:	8893      	ldrh	r3, [r2, #4]
 8017fda:	3b01      	subs	r3, #1
 8017fdc:	1b1b      	subs	r3, r3, r4
 8017fde:	800b      	strh	r3, [r1, #0]
 8017fe0:	bd10      	pop	{r4, pc}
 8017fe2:	bf00      	nop
 8017fe4:	20024420 	.word	0x20024420

08017fe8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 8017fe8:	4b0a      	ldr	r3, [pc, #40]	; (8018014 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 8017fea:	460a      	mov	r2, r1
 8017fec:	b510      	push	{r4, lr}
 8017fee:	781b      	ldrb	r3, [r3, #0]
 8017ff0:	2b01      	cmp	r3, #1
 8017ff2:	d10d      	bne.n	8018010 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8017ff4:	8881      	ldrh	r1, [r0, #4]
 8017ff6:	8803      	ldrh	r3, [r0, #0]
 8017ff8:	440b      	add	r3, r1
 8017ffa:	4601      	mov	r1, r0
 8017ffc:	3b01      	subs	r3, #1
 8017ffe:	f821 3b02 	strh.w	r3, [r1], #2
 8018002:	f7ff ffdf 	bl	8017fc4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8018006:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801800a:	88c2      	ldrh	r2, [r0, #6]
 801800c:	80c3      	strh	r3, [r0, #6]
 801800e:	8082      	strh	r2, [r0, #4]
 8018010:	bd10      	pop	{r4, pc}
 8018012:	bf00      	nop
 8018014:	20024420 	.word	0x20024420

08018018 <_ZN8touchgfx11Application13requestRedrawEv>:
 8018018:	4b06      	ldr	r3, [pc, #24]	; (8018034 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 801801a:	2100      	movs	r1, #0
 801801c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018020:	4b05      	ldr	r3, [pc, #20]	; (8018038 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 8018022:	f8c0 1130 	str.w	r1, [r0, #304]	; 0x130
 8018026:	f9b3 3000 	ldrsh.w	r3, [r3]
 801802a:	f8a0 2134 	strh.w	r2, [r0, #308]	; 0x134
 801802e:	f8a0 3136 	strh.w	r3, [r0, #310]	; 0x136
 8018032:	4770      	bx	lr
 8018034:	2002441c 	.word	0x2002441c
 8018038:	2002441e 	.word	0x2002441e

0801803c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 801803c:	4b03      	ldr	r3, [pc, #12]	; (801804c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 801803e:	6818      	ldr	r0, [r3, #0]
 8018040:	b110      	cbz	r0, 8018048 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 8018042:	6803      	ldr	r3, [r0, #0]
 8018044:	699b      	ldr	r3, [r3, #24]
 8018046:	4718      	bx	r3
 8018048:	4770      	bx	lr
 801804a:	bf00      	nop
 801804c:	20024464 	.word	0x20024464

08018050 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 8018050:	4770      	bx	lr
	...

08018054 <_ZN8touchgfx11Application4drawEv>:
 8018054:	4b09      	ldr	r3, [pc, #36]	; (801807c <_ZN8touchgfx11Application4drawEv+0x28>)
 8018056:	b507      	push	{r0, r1, r2, lr}
 8018058:	f9b3 2000 	ldrsh.w	r2, [r3]
 801805c:	2100      	movs	r1, #0
 801805e:	4b08      	ldr	r3, [pc, #32]	; (8018080 <_ZN8touchgfx11Application4drawEv+0x2c>)
 8018060:	9100      	str	r1, [sp, #0]
 8018062:	4669      	mov	r1, sp
 8018064:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018068:	f8ad 2004 	strh.w	r2, [sp, #4]
 801806c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8018070:	6803      	ldr	r3, [r0, #0]
 8018072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018074:	4798      	blx	r3
 8018076:	b003      	add	sp, #12
 8018078:	f85d fb04 	ldr.w	pc, [sp], #4
 801807c:	2002441c 	.word	0x2002441c
 8018080:	2002441e 	.word	0x2002441e

08018084 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8018084:	4b03      	ldr	r3, [pc, #12]	; (8018094 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 8018086:	6818      	ldr	r0, [r3, #0]
 8018088:	b110      	cbz	r0, 8018090 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801808a:	6803      	ldr	r3, [r0, #0]
 801808c:	69db      	ldr	r3, [r3, #28]
 801808e:	4718      	bx	r3
 8018090:	4770      	bx	lr
 8018092:	bf00      	nop
 8018094:	20024464 	.word	0x20024464

08018098 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 8018098:	4b03      	ldr	r3, [pc, #12]	; (80180a8 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801809a:	6818      	ldr	r0, [r3, #0]
 801809c:	b110      	cbz	r0, 80180a4 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801809e:	6803      	ldr	r3, [r0, #0]
 80180a0:	6a1b      	ldr	r3, [r3, #32]
 80180a2:	4718      	bx	r3
 80180a4:	4770      	bx	lr
 80180a6:	bf00      	nop
 80180a8:	20024464 	.word	0x20024464

080180ac <_ZN8touchgfx11Application16clearCachedAreasEv>:
 80180ac:	2300      	movs	r3, #0
 80180ae:	f8a0 30ec 	strh.w	r3, [r0, #236]	; 0xec
 80180b2:	4770      	bx	lr

080180b4 <_ZN8touchgfx11Application14handleKeyEventEh>:
 80180b4:	4b03      	ldr	r3, [pc, #12]	; (80180c4 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 80180b6:	6818      	ldr	r0, [r3, #0]
 80180b8:	b110      	cbz	r0, 80180c0 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 80180ba:	6803      	ldr	r3, [r0, #0]
 80180bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80180be:	4718      	bx	r3
 80180c0:	4770      	bx	lr
 80180c2:	bf00      	nop
 80180c4:	20024464 	.word	0x20024464

080180c8 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 80180c8:	b510      	push	{r4, lr}
 80180ca:	f9b1 4000 	ldrsh.w	r4, [r1]
 80180ce:	888a      	ldrh	r2, [r1, #4]
 80180d0:	f9b0 3000 	ldrsh.w	r3, [r0]
 80180d4:	4422      	add	r2, r4
 80180d6:	b212      	sxth	r2, r2
 80180d8:	4293      	cmp	r3, r2
 80180da:	da15      	bge.n	8018108 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80180dc:	8882      	ldrh	r2, [r0, #4]
 80180de:	4413      	add	r3, r2
 80180e0:	b21b      	sxth	r3, r3
 80180e2:	429c      	cmp	r4, r3
 80180e4:	da10      	bge.n	8018108 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80180e6:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 80180ea:	88c9      	ldrh	r1, [r1, #6]
 80180ec:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80180f0:	4419      	add	r1, r3
 80180f2:	b209      	sxth	r1, r1
 80180f4:	428a      	cmp	r2, r1
 80180f6:	da07      	bge.n	8018108 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80180f8:	88c0      	ldrh	r0, [r0, #6]
 80180fa:	4410      	add	r0, r2
 80180fc:	b200      	sxth	r0, r0
 80180fe:	4283      	cmp	r3, r0
 8018100:	bfac      	ite	ge
 8018102:	2000      	movge	r0, #0
 8018104:	2001      	movlt	r0, #1
 8018106:	bd10      	pop	{r4, pc}
 8018108:	2000      	movs	r0, #0
 801810a:	e7fc      	b.n	8018106 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0801810c <_ZN8touchgfx4Rect10restrictToEss>:
 801810c:	f9b0 3000 	ldrsh.w	r3, [r0]
 8018110:	2b00      	cmp	r3, #0
 8018112:	b510      	push	{r4, lr}
 8018114:	da04      	bge.n	8018120 <_ZN8touchgfx4Rect10restrictToEss+0x14>
 8018116:	8884      	ldrh	r4, [r0, #4]
 8018118:	4423      	add	r3, r4
 801811a:	8083      	strh	r3, [r0, #4]
 801811c:	2300      	movs	r3, #0
 801811e:	8003      	strh	r3, [r0, #0]
 8018120:	f9b0 4000 	ldrsh.w	r4, [r0]
 8018124:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8018128:	1b09      	subs	r1, r1, r4
 801812a:	428b      	cmp	r3, r1
 801812c:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8018130:	bfc8      	it	gt
 8018132:	8081      	strhgt	r1, [r0, #4]
 8018134:	2b00      	cmp	r3, #0
 8018136:	da04      	bge.n	8018142 <_ZN8touchgfx4Rect10restrictToEss+0x36>
 8018138:	88c1      	ldrh	r1, [r0, #6]
 801813a:	440b      	add	r3, r1
 801813c:	80c3      	strh	r3, [r0, #6]
 801813e:	2300      	movs	r3, #0
 8018140:	8043      	strh	r3, [r0, #2]
 8018142:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8018146:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 801814a:	1a52      	subs	r2, r2, r1
 801814c:	4293      	cmp	r3, r2
 801814e:	bfc8      	it	gt
 8018150:	80c2      	strhgt	r2, [r0, #6]
 8018152:	bd10      	pop	{r4, pc}

08018154 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 8018154:	4b10      	ldr	r3, [pc, #64]	; (8018198 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 8018156:	b510      	push	{r4, lr}
 8018158:	460c      	mov	r4, r1
 801815a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801815e:	4b0f      	ldr	r3, [pc, #60]	; (801819c <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 8018160:	4620      	mov	r0, r4
 8018162:	f9b3 1000 	ldrsh.w	r1, [r3]
 8018166:	f7ff ffd1 	bl	801810c <_ZN8touchgfx4Rect10restrictToEss>
 801816a:	4b0d      	ldr	r3, [pc, #52]	; (80181a0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 801816c:	6818      	ldr	r0, [r3, #0]
 801816e:	b190      	cbz	r0, 8018196 <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 8018170:	6803      	ldr	r3, [r0, #0]
 8018172:	4621      	mov	r1, r4
 8018174:	689b      	ldr	r3, [r3, #8]
 8018176:	4798      	blx	r3
 8018178:	4b0a      	ldr	r3, [pc, #40]	; (80181a4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 801817a:	6818      	ldr	r0, [r3, #0]
 801817c:	b118      	cbz	r0, 8018186 <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 801817e:	6803      	ldr	r3, [r0, #0]
 8018180:	4621      	mov	r1, r4
 8018182:	689b      	ldr	r3, [r3, #8]
 8018184:	4798      	blx	r3
 8018186:	4b08      	ldr	r3, [pc, #32]	; (80181a8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 8018188:	4621      	mov	r1, r4
 801818a:	6818      	ldr	r0, [r3, #0]
 801818c:	6803      	ldr	r3, [r0, #0]
 801818e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018192:	69db      	ldr	r3, [r3, #28]
 8018194:	4718      	bx	r3
 8018196:	bd10      	pop	{r4, pc}
 8018198:	2002441e 	.word	0x2002441e
 801819c:	2002441c 	.word	0x2002441c
 80181a0:	20024464 	.word	0x20024464
 80181a4:	20024460 	.word	0x20024460
 80181a8:	20024428 	.word	0x20024428

080181ac <_ZNK8touchgfx4Rect8includesERKS0_>:
 80181ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80181ae:	4606      	mov	r6, r0
 80181b0:	4608      	mov	r0, r1
 80181b2:	460f      	mov	r7, r1
 80181b4:	f7fc ff77 	bl	80150a6 <_ZNK8touchgfx4Rect7isEmptyEv>
 80181b8:	b9e8      	cbnz	r0, 80181f6 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 80181ba:	f9b7 5000 	ldrsh.w	r5, [r7]
 80181be:	f9b6 4000 	ldrsh.w	r4, [r6]
 80181c2:	42a5      	cmp	r5, r4
 80181c4:	db17      	blt.n	80181f6 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 80181c6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80181ca:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 80181ce:	429a      	cmp	r2, r3
 80181d0:	db11      	blt.n	80181f6 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 80181d2:	88b9      	ldrh	r1, [r7, #4]
 80181d4:	440d      	add	r5, r1
 80181d6:	88b1      	ldrh	r1, [r6, #4]
 80181d8:	440c      	add	r4, r1
 80181da:	b22d      	sxth	r5, r5
 80181dc:	b224      	sxth	r4, r4
 80181de:	42a5      	cmp	r5, r4
 80181e0:	dc09      	bgt.n	80181f6 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 80181e2:	88f8      	ldrh	r0, [r7, #6]
 80181e4:	4410      	add	r0, r2
 80181e6:	88f2      	ldrh	r2, [r6, #6]
 80181e8:	4413      	add	r3, r2
 80181ea:	b200      	sxth	r0, r0
 80181ec:	b21b      	sxth	r3, r3
 80181ee:	4298      	cmp	r0, r3
 80181f0:	bfcc      	ite	gt
 80181f2:	2000      	movgt	r0, #0
 80181f4:	2001      	movle	r0, #1
 80181f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080181f8 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 80181f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80181fa:	4604      	mov	r4, r0
 80181fc:	4608      	mov	r0, r1
 80181fe:	460d      	mov	r5, r1
 8018200:	f7fc ff51 	bl	80150a6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8018204:	b978      	cbnz	r0, 8018226 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 8018206:	4620      	mov	r0, r4
 8018208:	f7fc ff4d 	bl	80150a6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801820c:	f9b5 6000 	ldrsh.w	r6, [r5]
 8018210:	b150      	cbz	r0, 8018228 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 8018212:	8026      	strh	r6, [r4, #0]
 8018214:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8018218:	8063      	strh	r3, [r4, #2]
 801821a:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 801821e:	80a3      	strh	r3, [r4, #4]
 8018220:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8018224:	80e3      	strh	r3, [r4, #6]
 8018226:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018228:	f9b4 1000 	ldrsh.w	r1, [r4]
 801822c:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8018230:	42b1      	cmp	r1, r6
 8018232:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8018236:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 801823a:	460f      	mov	r7, r1
 801823c:	88ed      	ldrh	r5, [r5, #6]
 801823e:	bfa8      	it	ge
 8018240:	4637      	movge	r7, r6
 8018242:	4293      	cmp	r3, r2
 8018244:	4618      	mov	r0, r3
 8018246:	4466      	add	r6, ip
 8018248:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 801824c:	bfa8      	it	ge
 801824e:	4610      	movge	r0, r2
 8018250:	442a      	add	r2, r5
 8018252:	88e5      	ldrh	r5, [r4, #6]
 8018254:	4461      	add	r1, ip
 8018256:	b236      	sxth	r6, r6
 8018258:	8027      	strh	r7, [r4, #0]
 801825a:	442b      	add	r3, r5
 801825c:	b209      	sxth	r1, r1
 801825e:	b212      	sxth	r2, r2
 8018260:	8060      	strh	r0, [r4, #2]
 8018262:	b21b      	sxth	r3, r3
 8018264:	428e      	cmp	r6, r1
 8018266:	bfac      	ite	ge
 8018268:	ebc7 0106 	rsbge	r1, r7, r6
 801826c:	ebc7 0101 	rsblt	r1, r7, r1
 8018270:	429a      	cmp	r2, r3
 8018272:	bfac      	ite	ge
 8018274:	ebc0 0202 	rsbge	r2, r0, r2
 8018278:	ebc0 0203 	rsblt	r2, r0, r3
 801827c:	80a1      	strh	r1, [r4, #4]
 801827e:	80e2      	strh	r2, [r4, #6]
 8018280:	e7d1      	b.n	8018226 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

08018284 <_ZN8touchgfx11Application11getInstanceEv>:
 8018284:	4b01      	ldr	r3, [pc, #4]	; (801828c <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 8018286:	6818      	ldr	r0, [r3, #0]
 8018288:	4770      	bx	lr
 801828a:	bf00      	nop
 801828c:	20024474 	.word	0x20024474

08018290 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 8018290:	2300      	movs	r3, #0
 8018292:	b510      	push	{r4, lr}
 8018294:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
 8018298:	4604      	mov	r4, r0
 801829a:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
 801829e:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
 80182a2:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 80182a6:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	; 0xa6
 80182aa:	429a      	cmp	r2, r3
 80182ac:	d90e      	bls.n	80182cc <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 80182ae:	18e2      	adds	r2, r4, r3
 80182b0:	f892 2084 	ldrb.w	r2, [r2, #132]	; 0x84
 80182b4:	b122      	cbz	r2, 80182c0 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 80182b6:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 80182ba:	6803      	ldr	r3, [r0, #0]
 80182bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80182be:	4798      	blx	r3
 80182c0:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 80182c4:	3301      	adds	r3, #1
 80182c6:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 80182ca:	e7ea      	b.n	80182a2 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 80182cc:	bd10      	pop	{r4, pc}

080182ce <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 80182ce:	2300      	movs	r3, #0
 80182d0:	f100 0284 	add.w	r2, r0, #132	; 0x84
 80182d4:	30a4      	adds	r0, #164	; 0xa4
 80182d6:	f820 3c24 	strh.w	r3, [r0, #-36]
 80182da:	f802 3b01 	strb.w	r3, [r2], #1
 80182de:	4282      	cmp	r2, r0
 80182e0:	d1fb      	bne.n	80182da <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 80182e2:	4770      	bx	lr

080182e4 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 80182e4:	b570      	push	{r4, r5, r6, lr}
 80182e6:	4c0b      	ldr	r4, [pc, #44]	; (8018314 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 80182e8:	4605      	mov	r5, r0
 80182ea:	460e      	mov	r6, r1
 80182ec:	6820      	ldr	r0, [r4, #0]
 80182ee:	b110      	cbz	r0, 80182f6 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 80182f0:	6803      	ldr	r3, [r0, #0]
 80182f2:	695b      	ldr	r3, [r3, #20]
 80182f4:	4798      	blx	r3
 80182f6:	1d28      	adds	r0, r5, #4
 80182f8:	f7ff ffe9 	bl	80182ce <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 80182fc:	6026      	str	r6, [r4, #0]
 80182fe:	6833      	ldr	r3, [r6, #0]
 8018300:	4630      	mov	r0, r6
 8018302:	68db      	ldr	r3, [r3, #12]
 8018304:	4798      	blx	r3
 8018306:	682b      	ldr	r3, [r5, #0]
 8018308:	4628      	mov	r0, r5
 801830a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801830c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018310:	4718      	bx	r3
 8018312:	bf00      	nop
 8018314:	20024464 	.word	0x20024464

08018318 <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 8018318:	2300      	movs	r3, #0
 801831a:	f8b0 c080 	ldrh.w	ip, [r0, #128]	; 0x80
 801831e:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	; 0xa4
 8018322:	461a      	mov	r2, r3
 8018324:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018326:	461c      	mov	r4, r3
 8018328:	461d      	mov	r5, r3
 801832a:	459c      	cmp	ip, r3
 801832c:	dd1a      	ble.n	8018364 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 801832e:	18c6      	adds	r6, r0, r3
 8018330:	f896 6084 	ldrb.w	r6, [r6, #132]	; 0x84
 8018334:	b16e      	cbz	r6, 8018352 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 8018336:	429a      	cmp	r2, r3
 8018338:	d008      	beq.n	801834c <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 801833a:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 801833e:	fa1f fe82 	uxth.w	lr, r2
 8018342:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 8018346:	1887      	adds	r7, r0, r2
 8018348:	f887 6084 	strb.w	r6, [r7, #132]	; 0x84
 801834c:	3201      	adds	r2, #1
 801834e:	3301      	adds	r3, #1
 8018350:	e7eb      	b.n	801832a <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 8018352:	4299      	cmp	r1, r3
 8018354:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	; 0xa6
 8018358:	bfa8      	it	ge
 801835a:	3501      	addge	r5, #1
 801835c:	429e      	cmp	r6, r3
 801835e:	bfc8      	it	gt
 8018360:	3401      	addgt	r4, #1
 8018362:	e7f4      	b.n	801834e <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 8018364:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
 8018368:	1b49      	subs	r1, r1, r5
 801836a:	1b1b      	subs	r3, r3, r4
 801836c:	f8a0 10a4 	strh.w	r1, [r0, #164]	; 0xa4
 8018370:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
 8018374:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
 8018378:	4293      	cmp	r3, r2
 801837a:	dd03      	ble.n	8018384 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 801837c:	3b01      	subs	r3, #1
 801837e:	f8a0 3080 	strh.w	r3, [r0, #128]	; 0x80
 8018382:	e7f7      	b.n	8018374 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 8018384:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08018388 <_ZN8touchgfx11Application15handleTickEventEv>:
 8018388:	b570      	push	{r4, r5, r6, lr}
 801838a:	4d16      	ldr	r5, [pc, #88]	; (80183e4 <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 801838c:	4604      	mov	r4, r0
 801838e:	6828      	ldr	r0, [r5, #0]
 8018390:	b140      	cbz	r0, 80183a4 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8018392:	7a03      	ldrb	r3, [r0, #8]
 8018394:	b933      	cbnz	r3, 80183a4 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8018396:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 801839a:	6803      	ldr	r3, [r0, #0]
 801839c:	689b      	ldr	r3, [r3, #8]
 801839e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80183a2:	4718      	bx	r3
 80183a4:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
 80183a8:	4e0f      	ldr	r6, [pc, #60]	; (80183e8 <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 80183aa:	b973      	cbnz	r3, 80183ca <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 80183ac:	b168      	cbz	r0, 80183ca <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 80183ae:	7a03      	ldrb	r3, [r0, #8]
 80183b0:	b15b      	cbz	r3, 80183ca <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 80183b2:	6830      	ldr	r0, [r6, #0]
 80183b4:	b110      	cbz	r0, 80183bc <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 80183b6:	6803      	ldr	r3, [r0, #0]
 80183b8:	691b      	ldr	r3, [r3, #16]
 80183ba:	4798      	blx	r3
 80183bc:	6828      	ldr	r0, [r5, #0]
 80183be:	6803      	ldr	r3, [r0, #0]
 80183c0:	68db      	ldr	r3, [r3, #12]
 80183c2:	4798      	blx	r3
 80183c4:	2301      	movs	r3, #1
 80183c6:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 80183ca:	3404      	adds	r4, #4
 80183cc:	4620      	mov	r0, r4
 80183ce:	f7ff ff5f 	bl	8018290 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 80183d2:	4620      	mov	r0, r4
 80183d4:	f7ff ffa0 	bl	8018318 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 80183d8:	6830      	ldr	r0, [r6, #0]
 80183da:	b110      	cbz	r0, 80183e2 <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 80183dc:	6803      	ldr	r3, [r0, #0]
 80183de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80183e0:	e7dd      	b.n	801839e <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 80183e2:	bd70      	pop	{r4, r5, r6, pc}
 80183e4:	20024468 	.word	0x20024468
 80183e8:	20024464 	.word	0x20024464

080183ec <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 80183ec:	4603      	mov	r3, r0
 80183ee:	f100 0140 	add.w	r1, r0, #64	; 0x40
 80183f2:	2200      	movs	r2, #0
 80183f4:	801a      	strh	r2, [r3, #0]
 80183f6:	3308      	adds	r3, #8
 80183f8:	f823 2c06 	strh.w	r2, [r3, #-6]
 80183fc:	f823 2c04 	strh.w	r2, [r3, #-4]
 8018400:	f823 2c02 	strh.w	r2, [r3, #-2]
 8018404:	428b      	cmp	r3, r1
 8018406:	d1f5      	bne.n	80183f4 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 8018408:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 801840c:	4770      	bx	lr
	...

08018410 <_ZN8touchgfx11ApplicationC1Ev>:
 8018410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018412:	4b1d      	ldr	r3, [pc, #116]	; (8018488 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 8018414:	4606      	mov	r6, r0
 8018416:	4604      	mov	r4, r0
 8018418:	2500      	movs	r5, #0
 801841a:	f846 3b04 	str.w	r3, [r6], #4
 801841e:	22a8      	movs	r2, #168	; 0xa8
 8018420:	2100      	movs	r1, #0
 8018422:	4630      	mov	r0, r6
 8018424:	f00e fa6a 	bl	80268fc <memset>
 8018428:	f8a4 5084 	strh.w	r5, [r4, #132]	; 0x84
 801842c:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 8018430:	4f16      	ldr	r7, [pc, #88]	; (801848c <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 8018432:	f7ff ffdb 	bl	80183ec <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8018436:	f104 00ee 	add.w	r0, r4, #238	; 0xee
 801843a:	f7ff ffd7 	bl	80183ec <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801843e:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 8018442:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 8018446:	f8a4 5134 	strh.w	r5, [r4, #308]	; 0x134
 801844a:	f8a4 5136 	strh.w	r5, [r4, #310]	; 0x136
 801844e:	f884 5138 	strb.w	r5, [r4, #312]	; 0x138
 8018452:	490f      	ldr	r1, [pc, #60]	; (8018490 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 8018454:	480f      	ldr	r0, [pc, #60]	; (8018494 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 8018456:	f00e f88d 	bl	8026574 <CRC_Lock>
 801845a:	4b0f      	ldr	r3, [pc, #60]	; (8018498 <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 801845c:	b158      	cbz	r0, 8018476 <_ZN8touchgfx11ApplicationC1Ev+0x66>
 801845e:	801d      	strh	r5, [r3, #0]
 8018460:	2300      	movs	r3, #0
 8018462:	4a0e      	ldr	r2, [pc, #56]	; (801849c <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 8018464:	4630      	mov	r0, r6
 8018466:	6013      	str	r3, [r2, #0]
 8018468:	4a0d      	ldr	r2, [pc, #52]	; (80184a0 <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 801846a:	603b      	str	r3, [r7, #0]
 801846c:	6013      	str	r3, [r2, #0]
 801846e:	f7ff ff2e 	bl	80182ce <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8018472:	4620      	mov	r0, r4
 8018474:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018476:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801847a:	2002      	movs	r0, #2
 801847c:	801a      	strh	r2, [r3, #0]
 801847e:	6038      	str	r0, [r7, #0]
 8018480:	f001 fa1c 	bl	80198bc <_ZN8touchgfx6Screen4drawEv>
 8018484:	e7ec      	b.n	8018460 <_ZN8touchgfx11ApplicationC1Ev+0x50>
 8018486:	bf00      	nop
 8018488:	0802b118 	.word	0x0802b118
 801848c:	20024464 	.word	0x20024464
 8018490:	b5e8b5cd 	.word	0xb5e8b5cd
 8018494:	f407a5c2 	.word	0xf407a5c2
 8018498:	20000030 	.word	0x20000030
 801849c:	20024474 	.word	0x20024474
 80184a0:	20024468 	.word	0x20024468

080184a4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 80184a4:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80184a8:	3b01      	subs	r3, #1
 80184aa:	b29b      	uxth	r3, r3
 80184ac:	428b      	cmp	r3, r1
 80184ae:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 80184b2:	b510      	push	{r4, lr}
 80184b4:	d908      	bls.n	80184c8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 80184b6:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 80184ba:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 80184be:	681a      	ldr	r2, [r3, #0]
 80184c0:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 80184c4:	685a      	ldr	r2, [r3, #4]
 80184c6:	6062      	str	r2, [r4, #4]
 80184c8:	bd10      	pop	{r4, pc}
	...

080184cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 80184cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80184d0:	b08f      	sub	sp, #60	; 0x3c
 80184d2:	4b8f      	ldr	r3, [pc, #572]	; (8018710 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x244>)
 80184d4:	4683      	mov	fp, r0
 80184d6:	ac0a      	add	r4, sp, #40	; 0x28
 80184d8:	e884 0006 	stmia.w	r4, {r1, r2}
 80184dc:	f9b3 2000 	ldrsh.w	r2, [r3]
 80184e0:	4620      	mov	r0, r4
 80184e2:	4b8c      	ldr	r3, [pc, #560]	; (8018714 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x248>)
 80184e4:	f9b3 1000 	ldrsh.w	r1, [r3]
 80184e8:	f7ff fe10 	bl	801810c <_ZN8touchgfx4Rect10restrictToEss>
 80184ec:	4620      	mov	r0, r4
 80184ee:	f7fc fdda 	bl	80150a6 <_ZNK8touchgfx4Rect7isEmptyEv>
 80184f2:	2800      	cmp	r0, #0
 80184f4:	d16a      	bne.n	80185cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 80184f6:	9403      	str	r4, [sp, #12]
 80184f8:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	; 0xec
 80184fc:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
 8018500:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 8018504:	9301      	str	r3, [sp, #4]
 8018506:	35a4      	adds	r5, #164	; 0xa4
 8018508:	b15c      	cbz	r4, 8018522 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 801850a:	4629      	mov	r1, r5
 801850c:	9803      	ldr	r0, [sp, #12]
 801850e:	f7ff fe4d 	bl	80181ac <_ZNK8touchgfx4Rect8includesERKS0_>
 8018512:	3c01      	subs	r4, #1
 8018514:	b118      	cbz	r0, 801851e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52>
 8018516:	b2a1      	uxth	r1, r4
 8018518:	9801      	ldr	r0, [sp, #4]
 801851a:	f7ff ffc3 	bl	80184a4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801851e:	3d08      	subs	r5, #8
 8018520:	e7f2      	b.n	8018508 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c>
 8018522:	f8bb 80ec 	ldrh.w	r8, [fp, #236]	; 0xec
 8018526:	f108 33ff 	add.w	r3, r8, #4294967295
 801852a:	f8cd 8010 	str.w	r8, [sp, #16]
 801852e:	9302      	str	r3, [sp, #8]
 8018530:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8018534:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 8018538:	9306      	str	r3, [sp, #24]
 801853a:	445c      	add	r4, fp
 801853c:	2500      	movs	r5, #0
 801853e:	4626      	mov	r6, r4
 8018540:	f8cd 8014 	str.w	r8, [sp, #20]
 8018544:	462f      	mov	r7, r5
 8018546:	9b05      	ldr	r3, [sp, #20]
 8018548:	2b00      	cmp	r3, #0
 801854a:	d073      	beq.n	8018634 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 801854c:	9903      	ldr	r1, [sp, #12]
 801854e:	4630      	mov	r0, r6
 8018550:	f7ff fdba 	bl	80180c8 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8018554:	b350      	cbz	r0, 80185ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 8018556:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 801855a:	f9b6 c000 	ldrsh.w	ip, [r6]
 801855e:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	; 0x2a
 8018562:	45e6      	cmp	lr, ip
 8018564:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 8018568:	db33      	blt.n	80185d2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 801856a:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 801856e:	88b3      	ldrh	r3, [r6, #4]
 8018570:	4472      	add	r2, lr
 8018572:	4463      	add	r3, ip
 8018574:	b212      	sxth	r2, r2
 8018576:	b21b      	sxth	r3, r3
 8018578:	429a      	cmp	r2, r3
 801857a:	dc2a      	bgt.n	80185d2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 801857c:	fa1f f289 	uxth.w	r2, r9
 8018580:	88f3      	ldrh	r3, [r6, #6]
 8018582:	45ca      	cmp	sl, r9
 8018584:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 8018588:	4413      	add	r3, r2
 801858a:	fa1f fc8a 	uxth.w	ip, sl
 801858e:	b29b      	uxth	r3, r3
 8018590:	fa0f fe83 	sxth.w	lr, r3
 8018594:	db0f      	blt.n	80185b6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 8018596:	eba3 030c 	sub.w	r3, r3, ip
 801859a:	1ac9      	subs	r1, r1, r3
 801859c:	b209      	sxth	r1, r1
 801859e:	2900      	cmp	r1, #0
 80185a0:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 80185a4:	dd12      	ble.n	80185cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 80185a6:	f8ad e02a 	strh.w	lr, [sp, #42]	; 0x2a
 80185aa:	4605      	mov	r5, r0
 80185ac:	9b05      	ldr	r3, [sp, #20]
 80185ae:	3e08      	subs	r6, #8
 80185b0:	3b01      	subs	r3, #1
 80185b2:	9305      	str	r3, [sp, #20]
 80185b4:	e7c7      	b.n	8018546 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 80185b6:	4461      	add	r1, ip
 80185b8:	b209      	sxth	r1, r1
 80185ba:	4571      	cmp	r1, lr
 80185bc:	dc38      	bgt.n	8018630 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 80185be:	eba2 020c 	sub.w	r2, r2, ip
 80185c2:	b212      	sxth	r2, r2
 80185c4:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 80185c8:	2a00      	cmp	r2, #0
 80185ca:	dcee      	bgt.n	80185aa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 80185cc:	b00f      	add	sp, #60	; 0x3c
 80185ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80185d2:	45ca      	cmp	sl, r9
 80185d4:	db2c      	blt.n	8018630 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 80185d6:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 80185da:	449a      	add	sl, r3
 80185dc:	88f3      	ldrh	r3, [r6, #6]
 80185de:	4499      	add	r9, r3
 80185e0:	fa0f fa8a 	sxth.w	sl, sl
 80185e4:	fa0f f989 	sxth.w	r9, r9
 80185e8:	45ca      	cmp	sl, r9
 80185ea:	dc21      	bgt.n	8018630 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 80185ec:	fa1f f28c 	uxth.w	r2, ip
 80185f0:	88b3      	ldrh	r3, [r6, #4]
 80185f2:	45e6      	cmp	lr, ip
 80185f4:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 80185f8:	4413      	add	r3, r2
 80185fa:	fa1f f98e 	uxth.w	r9, lr
 80185fe:	b29b      	uxth	r3, r3
 8018600:	fa0f fa83 	sxth.w	sl, r3
 8018604:	db0a      	blt.n	801861c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x150>
 8018606:	eba3 0309 	sub.w	r3, r3, r9
 801860a:	1ac9      	subs	r1, r1, r3
 801860c:	b209      	sxth	r1, r1
 801860e:	2900      	cmp	r1, #0
 8018610:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 8018614:	ddda      	ble.n	80185cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8018616:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 801861a:	e7c6      	b.n	80185aa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 801861c:	4449      	add	r1, r9
 801861e:	b209      	sxth	r1, r1
 8018620:	4551      	cmp	r1, sl
 8018622:	dc05      	bgt.n	8018630 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8018624:	eba2 0209 	sub.w	r2, r2, r9
 8018628:	b212      	sxth	r2, r2
 801862a:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 801862e:	e7cb      	b.n	80185c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 8018630:	4607      	mov	r7, r0
 8018632:	e7bb      	b.n	80185ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 8018634:	2d00      	cmp	r5, #0
 8018636:	d181      	bne.n	801853c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x70>
 8018638:	2f00      	cmp	r7, #0
 801863a:	f000 81dd 	beq.w	80189f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 801863e:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
 8018642:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	; 0x2a
 8018646:	b2b3      	uxth	r3, r6
 8018648:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 801864c:	b2b9      	uxth	r1, r7
 801864e:	f8bd a02e 	ldrh.w	sl, [sp, #46]	; 0x2e
 8018652:	441a      	add	r2, r3
 8018654:	448a      	add	sl, r1
 8018656:	9105      	str	r1, [sp, #20]
 8018658:	b292      	uxth	r2, r2
 801865a:	fa1f fa8a 	uxth.w	sl, sl
 801865e:	fa0f f882 	sxth.w	r8, r2
 8018662:	fa0f f98a 	sxth.w	r9, sl
 8018666:	e9cd 2307 	strd	r2, r3, [sp, #28]
 801866a:	9b04      	ldr	r3, [sp, #16]
 801866c:	2b00      	cmp	r3, #0
 801866e:	d053      	beq.n	8018718 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 8018670:	9903      	ldr	r1, [sp, #12]
 8018672:	4620      	mov	r0, r4
 8018674:	f7ff fd28 	bl	80180c8 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8018678:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801867c:	b1c0      	cbz	r0, 80186b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801867e:	f9b4 e000 	ldrsh.w	lr, [r4]
 8018682:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8018686:	4576      	cmp	r6, lr
 8018688:	dc23      	bgt.n	80186d2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801868a:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 801868e:	44f4      	add	ip, lr
 8018690:	fa0f fc8c 	sxth.w	ip, ip
 8018694:	45e0      	cmp	r8, ip
 8018696:	db1c      	blt.n	80186d2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8018698:	428f      	cmp	r7, r1
 801869a:	fa1f fc81 	uxth.w	ip, r1
 801869e:	88e1      	ldrh	r1, [r4, #6]
 80186a0:	dc0d      	bgt.n	80186be <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 80186a2:	ebaa 0c0c 	sub.w	ip, sl, ip
 80186a6:	f8a4 9002 	strh.w	r9, [r4, #2]
 80186aa:	eba1 010c 	sub.w	r1, r1, ip
 80186ae:	80e1      	strh	r1, [r4, #6]
 80186b0:	4628      	mov	r0, r5
 80186b2:	9904      	ldr	r1, [sp, #16]
 80186b4:	3c08      	subs	r4, #8
 80186b6:	4605      	mov	r5, r0
 80186b8:	3901      	subs	r1, #1
 80186ba:	9104      	str	r1, [sp, #16]
 80186bc:	e7d3      	b.n	8018666 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x19a>
 80186be:	4461      	add	r1, ip
 80186c0:	b209      	sxth	r1, r1
 80186c2:	4549      	cmp	r1, r9
 80186c4:	dcf5      	bgt.n	80186b2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 80186c6:	9905      	ldr	r1, [sp, #20]
 80186c8:	eba1 0c0c 	sub.w	ip, r1, ip
 80186cc:	f8a4 c006 	strh.w	ip, [r4, #6]
 80186d0:	e7ee      	b.n	80186b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 80186d2:	428f      	cmp	r7, r1
 80186d4:	dced      	bgt.n	80186b2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 80186d6:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 80186da:	4461      	add	r1, ip
 80186dc:	b209      	sxth	r1, r1
 80186de:	4589      	cmp	r9, r1
 80186e0:	dbe7      	blt.n	80186b2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 80186e2:	4576      	cmp	r6, lr
 80186e4:	fa1f fc8e 	uxth.w	ip, lr
 80186e8:	88a1      	ldrh	r1, [r4, #4]
 80186ea:	dc07      	bgt.n	80186fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x230>
 80186ec:	eba2 0c0c 	sub.w	ip, r2, ip
 80186f0:	f8a4 8000 	strh.w	r8, [r4]
 80186f4:	eba1 010c 	sub.w	r1, r1, ip
 80186f8:	80a1      	strh	r1, [r4, #4]
 80186fa:	e7d9      	b.n	80186b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 80186fc:	4461      	add	r1, ip
 80186fe:	b209      	sxth	r1, r1
 8018700:	4588      	cmp	r8, r1
 8018702:	dbd6      	blt.n	80186b2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8018704:	eba3 0c0c 	sub.w	ip, r3, ip
 8018708:	f8a4 c004 	strh.w	ip, [r4, #4]
 801870c:	e7d0      	b.n	80186b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801870e:	bf00      	nop
 8018710:	2002441e 	.word	0x2002441e
 8018714:	2002441c 	.word	0x2002441c
 8018718:	2d00      	cmp	r5, #0
 801871a:	f000 816d 	beq.w	80189f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 801871e:	9b06      	ldr	r3, [sp, #24]
 8018720:	445b      	add	r3, fp
 8018722:	461c      	mov	r4, r3
 8018724:	9b02      	ldr	r3, [sp, #8]
 8018726:	3301      	adds	r3, #1
 8018728:	f000 8166 	beq.w	80189f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 801872c:	f104 05a4 	add.w	r5, r4, #164	; 0xa4
 8018730:	9803      	ldr	r0, [sp, #12]
 8018732:	4629      	mov	r1, r5
 8018734:	f7ff fd3a 	bl	80181ac <_ZNK8touchgfx4Rect8includesERKS0_>
 8018738:	b120      	cbz	r0, 8018744 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x278>
 801873a:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801873e:	9801      	ldr	r0, [sp, #4]
 8018740:	f7ff feb0 	bl	80184a4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8018744:	9903      	ldr	r1, [sp, #12]
 8018746:	4628      	mov	r0, r5
 8018748:	f7ff fcbe 	bl	80180c8 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801874c:	2800      	cmp	r0, #0
 801874e:	f000 809c 	beq.w	801888a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 8018752:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	; 0xa4
 8018756:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
 801875a:	fa1f f189 	uxth.w	r1, r9
 801875e:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 8018762:	9309      	str	r3, [sp, #36]	; 0x24
 8018764:	eb01 0c03 	add.w	ip, r1, r3
 8018768:	b283      	uxth	r3, r0
 801876a:	4548      	cmp	r0, r9
 801876c:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	; 0x2a
 8018770:	fa1f fa8c 	uxth.w	sl, ip
 8018774:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 8018778:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	; 0xa6
 801877c:	eb03 050c 	add.w	r5, r3, ip
 8018780:	b2ad      	uxth	r5, r5
 8018782:	9505      	str	r5, [sp, #20]
 8018784:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 8018788:	9504      	str	r5, [sp, #16]
 801878a:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	; 0xec
 801878e:	f340 8099 	ble.w	80188c4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3f8>
 8018792:	1a5b      	subs	r3, r3, r1
 8018794:	4596      	cmp	lr, r2
 8018796:	fa0f f08a 	sxth.w	r0, sl
 801879a:	b29b      	uxth	r3, r3
 801879c:	b21e      	sxth	r6, r3
 801879e:	dd2e      	ble.n	80187fe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x332>
 80187a0:	9f02      	ldr	r7, [sp, #8]
 80187a2:	fa1f fe8e 	uxth.w	lr, lr
 80187a6:	b292      	uxth	r2, r2
 80187a8:	f8bd 402e 	ldrh.w	r4, [sp, #46]	; 0x2e
 80187ac:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 80187b0:	9f04      	ldr	r7, [sp, #16]
 80187b2:	ebae 0102 	sub.w	r1, lr, r2
 80187b6:	44a6      	add	lr, r4
 80187b8:	1a3f      	subs	r7, r7, r0
 80187ba:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	; 0xb2
 80187be:	b289      	uxth	r1, r1
 80187c0:	4402      	add	r2, r0
 80187c2:	fa0f fe8e 	sxth.w	lr, lr
 80187c6:	b20d      	sxth	r5, r1
 80187c8:	b212      	sxth	r2, r2
 80187ca:	436f      	muls	r7, r5
 80187cc:	ebae 0202 	sub.w	r2, lr, r2
 80187d0:	4372      	muls	r2, r6
 80187d2:	4297      	cmp	r7, r2
 80187d4:	db09      	blt.n	80187ea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 80187d6:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	; 0xac
 80187da:	f8a8 50b2 	strh.w	r5, [r8, #178]	; 0xb2
 80187de:	449c      	add	ip, r3
 80187e0:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 80187e4:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 80187e8:	e686      	b.n	80184f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80187ea:	4421      	add	r1, r4
 80187ec:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	; 0xae
 80187f0:	f8a8 60b0 	strh.w	r6, [r8, #176]	; 0xb0
 80187f4:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 80187f8:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 80187fc:	e67c      	b.n	80184f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80187fe:	9f04      	ldr	r7, [sp, #16]
 8018800:	42b8      	cmp	r0, r7
 8018802:	da27      	bge.n	8018854 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 8018804:	9902      	ldr	r1, [sp, #8]
 8018806:	1a3f      	subs	r7, r7, r0
 8018808:	f8bd 502e 	ldrh.w	r5, [sp, #46]	; 0x2e
 801880c:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 8018810:	eb05 010e 	add.w	r1, r5, lr
 8018814:	fa1f f881 	uxth.w	r8, r1
 8018818:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	; 0xb2
 801881c:	4411      	add	r1, r2
 801881e:	fa0f f988 	sxth.w	r9, r8
 8018822:	eba2 020e 	sub.w	r2, r2, lr
 8018826:	eba1 0108 	sub.w	r1, r1, r8
 801882a:	4372      	muls	r2, r6
 801882c:	b289      	uxth	r1, r1
 801882e:	fa0f f881 	sxth.w	r8, r1
 8018832:	fb08 f707 	mul.w	r7, r8, r7
 8018836:	42ba      	cmp	r2, r7
 8018838:	dc06      	bgt.n	8018848 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37c>
 801883a:	f8a4 90ae 	strh.w	r9, [r4, #174]	; 0xae
 801883e:	f8a4 80b2 	strh.w	r8, [r4, #178]	; 0xb2
 8018842:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
 8018846:	e7ca      	b.n	80187de <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x312>
 8018848:	4429      	add	r1, r5
 801884a:	f8a4 60b0 	strh.w	r6, [r4, #176]	; 0xb0
 801884e:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8018852:	e651      	b.n	80184f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8018854:	9805      	ldr	r0, [sp, #20]
 8018856:	2d06      	cmp	r5, #6
 8018858:	ebaa 0000 	sub.w	r0, sl, r0
 801885c:	b280      	uxth	r0, r0
 801885e:	fa0f fe80 	sxth.w	lr, r0
 8018862:	d817      	bhi.n	8018894 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c8>
 8018864:	9b04      	ldr	r3, [sp, #16]
 8018866:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	; 0xaa
 801886a:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 801886e:	1c6b      	adds	r3, r5, #1
 8018870:	f8a4 e0a8 	strh.w	lr, [r4, #168]	; 0xa8
 8018874:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
 8018878:	9b01      	ldr	r3, [sp, #4]
 801887a:	9801      	ldr	r0, [sp, #4]
 801887c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8018880:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 8018884:	805a      	strh	r2, [r3, #2]
 8018886:	809e      	strh	r6, [r3, #4]
 8018888:	80d9      	strh	r1, [r3, #6]
 801888a:	9b02      	ldr	r3, [sp, #8]
 801888c:	3c08      	subs	r4, #8
 801888e:	3b01      	subs	r3, #1
 8018890:	9302      	str	r3, [sp, #8]
 8018892:	e747      	b.n	8018724 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>
 8018894:	9a02      	ldr	r2, [sp, #8]
 8018896:	45b6      	cmp	lr, r6
 8018898:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 801889c:	db0d      	blt.n	80188ba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 801889e:	449c      	add	ip, r3
 80188a0:	445a      	add	r2, fp
 80188a2:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
 80188a6:	fa1f fc8c 	uxth.w	ip, ip
 80188aa:	f8a2 e0b0 	strh.w	lr, [r2, #176]	; 0xb0
 80188ae:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 80188b2:	448c      	add	ip, r1
 80188b4:	f8a2 c0ac 	strh.w	ip, [r2, #172]	; 0xac
 80188b8:	e61e      	b.n	80184f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80188ba:	445a      	add	r2, fp
 80188bc:	4484      	add	ip, r0
 80188be:	f8a2 60b0 	strh.w	r6, [r2, #176]	; 0xb0
 80188c2:	e78f      	b.n	80187e4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 80188c4:	fa1f f18e 	uxth.w	r1, lr
 80188c8:	f8bd 602e 	ldrh.w	r6, [sp, #46]	; 0x2e
 80188cc:	b293      	uxth	r3, r2
 80188ce:	4596      	cmp	lr, r2
 80188d0:	eb01 0806 	add.w	r8, r1, r6
 80188d4:	9306      	str	r3, [sp, #24]
 80188d6:	fa1f f888 	uxth.w	r8, r8
 80188da:	9f06      	ldr	r7, [sp, #24]
 80188dc:	fa0f f388 	sxth.w	r3, r8
 80188e0:	9307      	str	r3, [sp, #28]
 80188e2:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
 80188e6:	443b      	add	r3, r7
 80188e8:	b29b      	uxth	r3, r3
 80188ea:	9308      	str	r3, [sp, #32]
 80188ec:	da24      	bge.n	8018938 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46c>
 80188ee:	9905      	ldr	r1, [sp, #20]
 80188f0:	eba3 0308 	sub.w	r3, r3, r8
 80188f4:	eba2 020e 	sub.w	r2, r2, lr
 80188f8:	eba9 0000 	sub.w	r0, r9, r0
 80188fc:	ebaa 0401 	sub.w	r4, sl, r1
 8018900:	b29b      	uxth	r3, r3
 8018902:	b2a4      	uxth	r4, r4
 8018904:	b219      	sxth	r1, r3
 8018906:	b225      	sxth	r5, r4
 8018908:	4348      	muls	r0, r1
 801890a:	436a      	muls	r2, r5
 801890c:	4282      	cmp	r2, r0
 801890e:	9a02      	ldr	r2, [sp, #8]
 8018910:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8018914:	445a      	add	r2, fp
 8018916:	dc06      	bgt.n	8018926 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45a>
 8018918:	9b07      	ldr	r3, [sp, #28]
 801891a:	44a4      	add	ip, r4
 801891c:	f8a2 10b2 	strh.w	r1, [r2, #178]	; 0xb2
 8018920:	f8a2 30ae 	strh.w	r3, [r2, #174]	; 0xae
 8018924:	e75e      	b.n	80187e4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 8018926:	9904      	ldr	r1, [sp, #16]
 8018928:	f8a2 50b0 	strh.w	r5, [r2, #176]	; 0xb0
 801892c:	f8a2 10ac 	strh.w	r1, [r2, #172]	; 0xac
 8018930:	4433      	add	r3, r6
 8018932:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8018936:	e5df      	b.n	80184f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8018938:	9f06      	ldr	r7, [sp, #24]
 801893a:	9b04      	ldr	r3, [sp, #16]
 801893c:	1bc9      	subs	r1, r1, r7
 801893e:	fa0f f78a 	sxth.w	r7, sl
 8018942:	b289      	uxth	r1, r1
 8018944:	429f      	cmp	r7, r3
 8018946:	fa0f fe81 	sxth.w	lr, r1
 801894a:	dd23      	ble.n	8018994 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c8>
 801894c:	9a05      	ldr	r2, [sp, #20]
 801894e:	eba9 0000 	sub.w	r0, r9, r0
 8018952:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8018956:	ebaa 0202 	sub.w	r2, sl, r2
 801895a:	9d07      	ldr	r5, [sp, #28]
 801895c:	fb0e f000 	mul.w	r0, lr, r0
 8018960:	b292      	uxth	r2, r2
 8018962:	eba5 0a03 	sub.w	sl, r5, r3
 8018966:	9b02      	ldr	r3, [sp, #8]
 8018968:	b214      	sxth	r4, r2
 801896a:	00db      	lsls	r3, r3, #3
 801896c:	fb04 fa0a 	mul.w	sl, r4, sl
 8018970:	445b      	add	r3, fp
 8018972:	4550      	cmp	r0, sl
 8018974:	db03      	blt.n	801897e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4b2>
 8018976:	f8a3 e0b2 	strh.w	lr, [r3, #178]	; 0xb2
 801897a:	4494      	add	ip, r2
 801897c:	e732      	b.n	80187e4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 801897e:	9a04      	ldr	r2, [sp, #16]
 8018980:	4431      	add	r1, r6
 8018982:	f8a3 40b0 	strh.w	r4, [r3, #176]	; 0xb0
 8018986:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 801898a:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
 801898e:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8018992:	e75c      	b.n	801884e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x382>
 8018994:	9b08      	ldr	r3, [sp, #32]
 8018996:	2d06      	cmp	r5, #6
 8018998:	eba3 0308 	sub.w	r3, r3, r8
 801899c:	b29b      	uxth	r3, r3
 801899e:	b218      	sxth	r0, r3
 80189a0:	d813      	bhi.n	80189ca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4fe>
 80189a2:	9b07      	ldr	r3, [sp, #28]
 80189a4:	f8a4 00aa 	strh.w	r0, [r4, #170]	; 0xaa
 80189a8:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
 80189ac:	1c6b      	adds	r3, r5, #1
 80189ae:	9901      	ldr	r1, [sp, #4]
 80189b0:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
 80189b4:	9b01      	ldr	r3, [sp, #4]
 80189b6:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 80189ba:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80189be:	805a      	strh	r2, [r3, #2]
 80189c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80189c2:	f8a3 e006 	strh.w	lr, [r3, #6]
 80189c6:	809a      	strh	r2, [r3, #4]
 80189c8:	e75f      	b.n	801888a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 80189ca:	9c02      	ldr	r4, [sp, #8]
 80189cc:	4570      	cmp	r0, lr
 80189ce:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 80189d2:	db0d      	blt.n	80189f0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x524>
 80189d4:	4431      	add	r1, r6
 80189d6:	9b06      	ldr	r3, [sp, #24]
 80189d8:	445c      	add	r4, fp
 80189da:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 80189de:	b289      	uxth	r1, r1
 80189e0:	f8a4 00b2 	strh.w	r0, [r4, #178]	; 0xb2
 80189e4:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 80189e8:	4419      	add	r1, r3
 80189ea:	f8a4 10ae 	strh.w	r1, [r4, #174]	; 0xae
 80189ee:	e583      	b.n	80184f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80189f0:	445c      	add	r4, fp
 80189f2:	f8a4 e0b2 	strh.w	lr, [r4, #178]	; 0xb2
 80189f6:	e79b      	b.n	8018930 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x464>
 80189f8:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	; 0xec
 80189fc:	2e07      	cmp	r6, #7
 80189fe:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 8018a02:	d812      	bhi.n	8018a2a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x55e>
 8018a04:	1c75      	adds	r5, r6, #1
 8018a06:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 8018a0a:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 8018a0e:	f8ab 50ec 	strh.w	r5, [fp, #236]	; 0xec
 8018a12:	9d01      	ldr	r5, [sp, #4]
 8018a14:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 8018a18:	442c      	add	r4, r5
 8018a1a:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 8018a1e:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 8018a22:	8061      	strh	r1, [r4, #2]
 8018a24:	80a2      	strh	r2, [r4, #4]
 8018a26:	80e3      	strh	r3, [r4, #6]
 8018a28:	e5d0      	b.n	80185cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8018a2a:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
 8018a2e:	3e01      	subs	r6, #1
 8018a30:	445c      	add	r4, fp
 8018a32:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8018a36:	f04f 37ff 	mov.w	r7, #4294967295
 8018a3a:	2500      	movs	r5, #0
 8018a3c:	9305      	str	r3, [sp, #20]
 8018a3e:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
 8018a42:	1e72      	subs	r2, r6, #1
 8018a44:	9302      	str	r3, [sp, #8]
 8018a46:	4691      	mov	r9, r2
 8018a48:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	; 0xaa
 8018a4c:	9304      	str	r3, [sp, #16]
 8018a4e:	f104 03a4 	add.w	r3, r4, #164	; 0xa4
 8018a52:	f1b9 3fff 	cmp.w	r9, #4294967295
 8018a56:	6818      	ldr	r0, [r3, #0]
 8018a58:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8018a5c:	9207      	str	r2, [sp, #28]
 8018a5e:	bf16      	itet	ne
 8018a60:	9905      	ldrne	r1, [sp, #20]
 8018a62:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 8018a66:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 8018a6a:	9306      	str	r3, [sp, #24]
 8018a6c:	f8be 1006 	ldrh.w	r1, [lr, #6]
 8018a70:	f8be 8004 	ldrh.w	r8, [lr, #4]
 8018a74:	fb18 f801 	smulbb	r8, r8, r1
 8018a78:	6859      	ldr	r1, [r3, #4]
 8018a7a:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8018a7e:	4671      	mov	r1, lr
 8018a80:	a80c      	add	r0, sp, #48	; 0x30
 8018a82:	f7ff fbb9 	bl	80181f8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8018a86:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 8018a8a:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 8018a8e:	f04f 0c08 	mov.w	ip, #8
 8018a92:	9b04      	ldr	r3, [sp, #16]
 8018a94:	9a02      	ldr	r2, [sp, #8]
 8018a96:	fb10 f001 	smulbb	r0, r0, r1
 8018a9a:	fb02 8803 	mla	r8, r2, r3, r8
 8018a9e:	eba0 0108 	sub.w	r1, r0, r8
 8018aa2:	fb90 f0fc 	sdiv	r0, r0, ip
 8018aa6:	4288      	cmp	r0, r1
 8018aa8:	dc20      	bgt.n	8018aec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x620>
 8018aaa:	4551      	cmp	r1, sl
 8018aac:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8018ab0:	da03      	bge.n	8018aba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5ee>
 8018ab2:	b1d9      	cbz	r1, 8018aec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x620>
 8018ab4:	468a      	mov	sl, r1
 8018ab6:	464f      	mov	r7, r9
 8018ab8:	4635      	mov	r5, r6
 8018aba:	f109 39ff 	add.w	r9, r9, #4294967295
 8018abe:	f119 0f02 	cmn.w	r9, #2
 8018ac2:	d1c6      	bne.n	8018a52 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x586>
 8018ac4:	4616      	mov	r6, r2
 8018ac6:	3201      	adds	r2, #1
 8018ac8:	f1a4 0408 	sub.w	r4, r4, #8
 8018acc:	d1b7      	bne.n	8018a3e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x572>
 8018ace:	9b01      	ldr	r3, [sp, #4]
 8018ad0:	b2ac      	uxth	r4, r5
 8018ad2:	00ed      	lsls	r5, r5, #3
 8018ad4:	1958      	adds	r0, r3, r5
 8018ad6:	1c7b      	adds	r3, r7, #1
 8018ad8:	d10b      	bne.n	8018af2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x626>
 8018ada:	4601      	mov	r1, r0
 8018adc:	9803      	ldr	r0, [sp, #12]
 8018ade:	f7ff fb8b 	bl	80181f8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8018ae2:	4621      	mov	r1, r4
 8018ae4:	9801      	ldr	r0, [sp, #4]
 8018ae6:	f7ff fcdd 	bl	80184a4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8018aea:	e505      	b.n	80184f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8018aec:	464f      	mov	r7, r9
 8018aee:	4635      	mov	r5, r6
 8018af0:	e7ed      	b.n	8018ace <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x602>
 8018af2:	9b01      	ldr	r3, [sp, #4]
 8018af4:	00ff      	lsls	r7, r7, #3
 8018af6:	445d      	add	r5, fp
 8018af8:	19d9      	adds	r1, r3, r7
 8018afa:	445f      	add	r7, fp
 8018afc:	f7ff fb7c 	bl	80181f8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8018b00:	9b03      	ldr	r3, [sp, #12]
 8018b02:	cb03      	ldmia	r3!, {r0, r1}
 8018b04:	9b03      	ldr	r3, [sp, #12]
 8018b06:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
 8018b0a:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 8018b0e:	f855 0fac 	ldr.w	r0, [r5, #172]!
 8018b12:	6869      	ldr	r1, [r5, #4]
 8018b14:	c303      	stmia	r3!, {r0, r1}
 8018b16:	e7e4      	b.n	8018ae2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x616>

08018b18 <_ZN8touchgfx11Application10invalidateEv>:
 8018b18:	4b09      	ldr	r3, [pc, #36]	; (8018b40 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 8018b1a:	b082      	sub	sp, #8
 8018b1c:	2100      	movs	r1, #0
 8018b1e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018b22:	4b08      	ldr	r3, [pc, #32]	; (8018b44 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 8018b24:	9100      	str	r1, [sp, #0]
 8018b26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018b2a:	f8ad 2004 	strh.w	r2, [sp, #4]
 8018b2e:	f8ad 3006 	strh.w	r3, [sp, #6]
 8018b32:	ab02      	add	r3, sp, #8
 8018b34:	e913 0006 	ldmdb	r3, {r1, r2}
 8018b38:	b002      	add	sp, #8
 8018b3a:	f7ff bcc7 	b.w	80184cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8018b3e:	bf00      	nop
 8018b40:	2002441c 	.word	0x2002441c
 8018b44:	2002441e 	.word	0x2002441e

08018b48 <_ZN8touchgfx11Application15drawCachedAreasEv>:
 8018b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b4c:	f500 7698 	add.w	r6, r0, #304	; 0x130
 8018b50:	b09b      	sub	sp, #108	; 0x6c
 8018b52:	4604      	mov	r4, r0
 8018b54:	4630      	mov	r0, r6
 8018b56:	f7fc faa6 	bl	80150a6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8018b5a:	4605      	mov	r5, r0
 8018b5c:	b940      	cbnz	r0, 8018b70 <_ZN8touchgfx11Application15drawCachedAreasEv+0x28>
 8018b5e:	4620      	mov	r0, r4
 8018b60:	e896 0006 	ldmia.w	r6, {r1, r2}
 8018b64:	f7ff fcb2 	bl	80184cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8018b68:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 8018b6c:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
 8018b70:	4bc8      	ldr	r3, [pc, #800]	; (8018e94 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 8018b72:	681b      	ldr	r3, [r3, #0]
 8018b74:	2b00      	cmp	r3, #0
 8018b76:	d03e      	beq.n	8018bf6 <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 8018b78:	4dc7      	ldr	r5, [pc, #796]	; (8018e98 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 8018b7a:	4628      	mov	r0, r5
 8018b7c:	f7fc fa93 	bl	80150a6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8018b80:	4606      	mov	r6, r0
 8018b82:	2800      	cmp	r0, #0
 8018b84:	d137      	bne.n	8018bf6 <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 8018b86:	4628      	mov	r0, r5
 8018b88:	f7ff f9ec 	bl	8017f64 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8018b8c:	6829      	ldr	r1, [r5, #0]
 8018b8e:	686a      	ldr	r2, [r5, #4]
 8018b90:	4620      	mov	r0, r4
 8018b92:	f7ff fc9b 	bl	80184cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8018b96:	802e      	strh	r6, [r5, #0]
 8018b98:	806e      	strh	r6, [r5, #2]
 8018b9a:	80ae      	strh	r6, [r5, #4]
 8018b9c:	80ee      	strh	r6, [r5, #6]
 8018b9e:	ae09      	add	r6, sp, #36	; 0x24
 8018ba0:	4630      	mov	r0, r6
 8018ba2:	f7ff fc23 	bl	80183ec <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8018ba6:	4abd      	ldr	r2, [pc, #756]	; (8018e9c <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 8018ba8:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
 8018bac:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 8018bb0:	8815      	ldrh	r5, [r2, #0]
 8018bb2:	9202      	str	r2, [sp, #8]
 8018bb4:	462b      	mov	r3, r5
 8018bb6:	429f      	cmp	r7, r3
 8018bb8:	d924      	bls.n	8018c04 <_ZN8touchgfx11Application15drawCachedAreasEv+0xbc>
 8018bba:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 8018bbe:	2907      	cmp	r1, #7
 8018bc0:	d816      	bhi.n	8018bf0 <_ZN8touchgfx11Application15drawCachedAreasEv+0xa8>
 8018bc2:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 8018bc6:	f930 8033 	ldrsh.w	r8, [r0, r3, lsl #3]
 8018bca:	f9b2 9002 	ldrsh.w	r9, [r2, #2]
 8018bce:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 8018bd2:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 8018bd6:	1c4a      	adds	r2, r1, #1
 8018bd8:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
 8018bdc:	eb06 02c1 	add.w	r2, r6, r1, lsl #3
 8018be0:	f826 8031 	strh.w	r8, [r6, r1, lsl #3]
 8018be4:	f8a2 9002 	strh.w	r9, [r2, #2]
 8018be8:	f8a2 e004 	strh.w	lr, [r2, #4]
 8018bec:	f8a2 c006 	strh.w	ip, [r2, #6]
 8018bf0:	3301      	adds	r3, #1
 8018bf2:	b29b      	uxth	r3, r3
 8018bf4:	e7df      	b.n	8018bb6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x6e>
 8018bf6:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 8018bfa:	2b00      	cmp	r3, #0
 8018bfc:	d1cf      	bne.n	8018b9e <_ZN8touchgfx11Application15drawCachedAreasEv+0x56>
 8018bfe:	b01b      	add	sp, #108	; 0x6c
 8018c00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018c04:	462f      	mov	r7, r5
 8018c06:	f8b4 312e 	ldrh.w	r3, [r4, #302]	; 0x12e
 8018c0a:	42bb      	cmp	r3, r7
 8018c0c:	d90b      	bls.n	8018c26 <_ZN8touchgfx11Application15drawCachedAreasEv+0xde>
 8018c0e:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
 8018c12:	3701      	adds	r7, #1
 8018c14:	4620      	mov	r0, r4
 8018c16:	f8d3 10ee 	ldr.w	r1, [r3, #238]	; 0xee
 8018c1a:	b2bf      	uxth	r7, r7
 8018c1c:	f8d3 20f2 	ldr.w	r2, [r3, #242]	; 0xf2
 8018c20:	f7ff fc54 	bl	80184cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8018c24:	e7ef      	b.n	8018c06 <_ZN8touchgfx11Application15drawCachedAreasEv+0xbe>
 8018c26:	4a9e      	ldr	r2, [pc, #632]	; (8018ea0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 8018c28:	6813      	ldr	r3, [r2, #0]
 8018c2a:	4690      	mov	r8, r2
 8018c2c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8018c30:	2b01      	cmp	r3, #1
 8018c32:	f040 80e4 	bne.w	8018dfe <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b6>
 8018c36:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 8018c3a:	4629      	mov	r1, r5
 8018c3c:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
 8018c40:	2500      	movs	r5, #0
 8018c42:	33ae      	adds	r3, #174	; 0xae
 8018c44:	428f      	cmp	r7, r1
 8018c46:	f103 0308 	add.w	r3, r3, #8
 8018c4a:	dd0a      	ble.n	8018c62 <_ZN8touchgfx11Application15drawCachedAreasEv+0x11a>
 8018c4c:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 8018c50:	3101      	adds	r1, #1
 8018c52:	f833 0c04 	ldrh.w	r0, [r3, #-4]
 8018c56:	4402      	add	r2, r0
 8018c58:	b212      	sxth	r2, r2
 8018c5a:	4295      	cmp	r5, r2
 8018c5c:	bfb8      	it	lt
 8018c5e:	4615      	movlt	r5, r2
 8018c60:	e7f0      	b.n	8018c44 <_ZN8touchgfx11Application15drawCachedAreasEv+0xfc>
 8018c62:	4b90      	ldr	r3, [pc, #576]	; (8018ea4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 8018c64:	f8df b238 	ldr.w	fp, [pc, #568]	; 8018ea0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>
 8018c68:	881b      	ldrh	r3, [r3, #0]
 8018c6a:	46d8      	mov	r8, fp
 8018c6c:	2b0f      	cmp	r3, #15
 8018c6e:	bf8c      	ite	hi
 8018c70:	ea4f 0ad3 	movhi.w	sl, r3, lsr #3
 8018c74:	f04f 0a01 	movls.w	sl, #1
 8018c78:	2300      	movs	r3, #0
 8018c7a:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8018c7e:	f8bd 701a 	ldrh.w	r7, [sp, #26]
 8018c82:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8018c86:	4438      	add	r0, r7
 8018c88:	b207      	sxth	r7, r0
 8018c8a:	f8db 0000 	ldr.w	r0, [fp]
 8018c8e:	42bd      	cmp	r5, r7
 8018c90:	6803      	ldr	r3, [r0, #0]
 8018c92:	f340 8084 	ble.w	8018d9e <_ZN8touchgfx11Application15drawCachedAreasEv+0x256>
 8018c96:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8018c9a:	4798      	blx	r3
 8018c9c:	eb07 030a 	add.w	r3, r7, sl
 8018ca0:	4298      	cmp	r0, r3
 8018ca2:	da07      	bge.n	8018cb4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 8018ca4:	4285      	cmp	r5, r0
 8018ca6:	dd05      	ble.n	8018cb4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 8018ca8:	4287      	cmp	r7, r0
 8018caa:	dd6d      	ble.n	8018d88 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 8018cac:	2f00      	cmp	r7, #0
 8018cae:	dd6b      	ble.n	8018d88 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 8018cb0:	4628      	mov	r0, r5
 8018cb2:	e004      	b.n	8018cbe <_ZN8touchgfx11Application15drawCachedAreasEv+0x176>
 8018cb4:	4287      	cmp	r7, r0
 8018cb6:	dcfb      	bgt.n	8018cb0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x168>
 8018cb8:	42a8      	cmp	r0, r5
 8018cba:	bfa8      	it	ge
 8018cbc:	4628      	movge	r0, r5
 8018cbe:	4b7a      	ldr	r3, [pc, #488]	; (8018ea8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>)
 8018cc0:	1bc0      	subs	r0, r0, r7
 8018cc2:	2200      	movs	r2, #0
 8018cc4:	f8ad 7016 	strh.w	r7, [sp, #22]
 8018cc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018ccc:	f8ad 2014 	strh.w	r2, [sp, #20]
 8018cd0:	f8ad 3018 	strh.w	r3, [sp, #24]
 8018cd4:	9b02      	ldr	r3, [sp, #8]
 8018cd6:	f8ad 001a 	strh.w	r0, [sp, #26]
 8018cda:	881f      	ldrh	r7, [r3, #0]
 8018cdc:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 8018ce0:	42bb      	cmp	r3, r7
 8018ce2:	d9cc      	bls.n	8018c7e <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
 8018ce4:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 8018ce8:	ab07      	add	r3, sp, #28
 8018cea:	f852 0fac 	ldr.w	r0, [r2, #172]!
 8018cee:	6851      	ldr	r1, [r2, #4]
 8018cf0:	c303      	stmia	r3!, {r0, r1}
 8018cf2:	a905      	add	r1, sp, #20
 8018cf4:	a807      	add	r0, sp, #28
 8018cf6:	f7ff f9e7 	bl	80180c8 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8018cfa:	2800      	cmp	r0, #0
 8018cfc:	d04c      	beq.n	8018d98 <_ZN8touchgfx11Application15drawCachedAreasEv+0x250>
 8018cfe:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 8018d02:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 8018d06:	f8bd 9020 	ldrh.w	r9, [sp, #32]
 8018d0a:	4686      	mov	lr, r0
 8018d0c:	4290      	cmp	r0, r2
 8018d0e:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 8018d12:	4448      	add	r0, r9
 8018d14:	f8bd 9018 	ldrh.w	r9, [sp, #24]
 8018d18:	bfb8      	it	lt
 8018d1a:	4696      	movlt	lr, r2
 8018d1c:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8018d20:	444a      	add	r2, r9
 8018d22:	b280      	uxth	r0, r0
 8018d24:	4299      	cmp	r1, r3
 8018d26:	468c      	mov	ip, r1
 8018d28:	b292      	uxth	r2, r2
 8018d2a:	9303      	str	r3, [sp, #12]
 8018d2c:	bfb8      	it	lt
 8018d2e:	469c      	movlt	ip, r3
 8018d30:	b203      	sxth	r3, r0
 8018d32:	fa0f f982 	sxth.w	r9, r2
 8018d36:	f8ad e01c 	strh.w	lr, [sp, #28]
 8018d3a:	f8ad c01e 	strh.w	ip, [sp, #30]
 8018d3e:	454b      	cmp	r3, r9
 8018d40:	bfb8      	it	lt
 8018d42:	4602      	movlt	r2, r0
 8018d44:	9b03      	ldr	r3, [sp, #12]
 8018d46:	eba2 020e 	sub.w	r2, r2, lr
 8018d4a:	f8ad 2020 	strh.w	r2, [sp, #32]
 8018d4e:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 8018d52:	4411      	add	r1, r2
 8018d54:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8018d58:	4413      	add	r3, r2
 8018d5a:	b289      	uxth	r1, r1
 8018d5c:	b29b      	uxth	r3, r3
 8018d5e:	b208      	sxth	r0, r1
 8018d60:	b21a      	sxth	r2, r3
 8018d62:	4290      	cmp	r0, r2
 8018d64:	bfb8      	it	lt
 8018d66:	460b      	movlt	r3, r1
 8018d68:	eba3 030c 	sub.w	r3, r3, ip
 8018d6c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8018d70:	a807      	add	r0, sp, #28
 8018d72:	f7fc f998 	bl	80150a6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8018d76:	b920      	cbnz	r0, 8018d82 <_ZN8touchgfx11Application15drawCachedAreasEv+0x23a>
 8018d78:	6823      	ldr	r3, [r4, #0]
 8018d7a:	a907      	add	r1, sp, #28
 8018d7c:	4620      	mov	r0, r4
 8018d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018d80:	4798      	blx	r3
 8018d82:	3701      	adds	r7, #1
 8018d84:	b2bf      	uxth	r7, r7
 8018d86:	e7a9      	b.n	8018cdc <_ZN8touchgfx11Application15drawCachedAreasEv+0x194>
 8018d88:	f8d8 0000 	ldr.w	r0, [r8]
 8018d8c:	2101      	movs	r1, #1
 8018d8e:	6803      	ldr	r3, [r0, #0]
 8018d90:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8018d94:	4798      	blx	r3
 8018d96:	e772      	b.n	8018c7e <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
 8018d98:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8018d9c:	e7e8      	b.n	8018d70 <_ZN8touchgfx11Application15drawCachedAreasEv+0x228>
 8018d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018da0:	4798      	blx	r3
 8018da2:	4b42      	ldr	r3, [pc, #264]	; (8018eac <_ZN8touchgfx11Application15drawCachedAreasEv+0x364>)
 8018da4:	781b      	ldrb	r3, [r3, #0]
 8018da6:	2b00      	cmp	r3, #0
 8018da8:	f43f af29 	beq.w	8018bfe <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 8018dac:	2300      	movs	r3, #0
 8018dae:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 8018db2:	f104 00ee 	add.w	r0, r4, #238	; 0xee
 8018db6:	f8a4 312e 	strh.w	r3, [r4, #302]	; 0x12e
 8018dba:	9b02      	ldr	r3, [sp, #8]
 8018dbc:	881b      	ldrh	r3, [r3, #0]
 8018dbe:	429d      	cmp	r5, r3
 8018dc0:	f67f af1d 	bls.w	8018bfe <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 8018dc4:	f8b4 112e 	ldrh.w	r1, [r4, #302]	; 0x12e
 8018dc8:	2907      	cmp	r1, #7
 8018dca:	d815      	bhi.n	8018df8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b0>
 8018dcc:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 8018dd0:	f936 8033 	ldrsh.w	r8, [r6, r3, lsl #3]
 8018dd4:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
 8018dd8:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
 8018ddc:	f9b2 7006 	ldrsh.w	r7, [r2, #6]
 8018de0:	1c4a      	adds	r2, r1, #1
 8018de2:	f8a4 212e 	strh.w	r2, [r4, #302]	; 0x12e
 8018de6:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 8018dea:	f820 8031 	strh.w	r8, [r0, r1, lsl #3]
 8018dee:	f8a2 e002 	strh.w	lr, [r2, #2]
 8018df2:	f8a2 c004 	strh.w	ip, [r2, #4]
 8018df6:	80d7      	strh	r7, [r2, #6]
 8018df8:	3301      	adds	r3, #1
 8018dfa:	b29b      	uxth	r3, r3
 8018dfc:	e7df      	b.n	8018dbe <_ZN8touchgfx11Application15drawCachedAreasEv+0x276>
 8018dfe:	2b02      	cmp	r3, #2
 8018e00:	f040 8135 	bne.w	801906e <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
 8018e04:	4b2a      	ldr	r3, [pc, #168]	; (8018eb0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x368>)
 8018e06:	f104 09ac 	add.w	r9, r4, #172	; 0xac
 8018e0a:	781b      	ldrb	r3, [r3, #0]
 8018e0c:	2b01      	cmp	r3, #1
 8018e0e:	f000 809c 	beq.w	8018f4a <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 8018e12:	9b02      	ldr	r3, [sp, #8]
 8018e14:	f8b4 20ec 	ldrh.w	r2, [r4, #236]	; 0xec
 8018e18:	f8b3 b000 	ldrh.w	fp, [r3]
 8018e1c:	f10b 0b01 	add.w	fp, fp, #1
 8018e20:	fa1f fb8b 	uxth.w	fp, fp
 8018e24:	2a00      	cmp	r2, #0
 8018e26:	d0bc      	beq.n	8018da2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 8018e28:	f8b4 50ae 	ldrh.w	r5, [r4, #174]	; 0xae
 8018e2c:	4659      	mov	r1, fp
 8018e2e:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	; 0xb2
 8018e32:	f04f 0800 	mov.w	r8, #0
 8018e36:	441d      	add	r5, r3
 8018e38:	b22d      	sxth	r5, r5
 8018e3a:	b28b      	uxth	r3, r1
 8018e3c:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 8018e40:	429a      	cmp	r2, r3
 8018e42:	f240 80c0 	bls.w	8018fc6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x47e>
 8018e46:	4427      	add	r7, r4
 8018e48:	eb04 0ec1 	add.w	lr, r4, r1, lsl #3
 8018e4c:	4608      	mov	r0, r1
 8018e4e:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	; 0xae
 8018e52:	f9be c0ae 	ldrsh.w	ip, [lr, #174]	; 0xae
 8018e56:	4563      	cmp	r3, ip
 8018e58:	f340 80a2 	ble.w	8018fa0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x458>
 8018e5c:	f8be 50b2 	ldrh.w	r5, [lr, #178]	; 0xb2
 8018e60:	4465      	add	r5, ip
 8018e62:	b22d      	sxth	r5, r5
 8018e64:	429d      	cmp	r5, r3
 8018e66:	bfa8      	it	ge
 8018e68:	461d      	movge	r5, r3
 8018e6a:	3101      	adds	r1, #1
 8018e6c:	4680      	mov	r8, r0
 8018e6e:	e7e4      	b.n	8018e3a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f2>
 8018e70:	d10b      	bne.n	8018e8a <_ZN8touchgfx11Application15drawCachedAreasEv+0x342>
 8018e72:	f9b5 c0b2 	ldrsh.w	ip, [r5, #178]	; 0xb2
 8018e76:	f9ba 10b2 	ldrsh.w	r1, [sl, #178]	; 0xb2
 8018e7a:	458c      	cmp	ip, r1
 8018e7c:	bfb4      	ite	lt
 8018e7e:	469c      	movlt	ip, r3
 8018e80:	46bc      	movge	ip, r7
 8018e82:	4572      	cmp	r2, lr
 8018e84:	bfb8      	it	lt
 8018e86:	4672      	movlt	r2, lr
 8018e88:	e087      	b.n	8018f9a <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
 8018e8a:	428a      	cmp	r2, r1
 8018e8c:	46bc      	mov	ip, r7
 8018e8e:	bfb8      	it	lt
 8018e90:	460a      	movlt	r2, r1
 8018e92:	e082      	b.n	8018f9a <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
 8018e94:	20024460 	.word	0x20024460
 8018e98:	2002446c 	.word	0x2002446c
 8018e9c:	20000030 	.word	0x20000030
 8018ea0:	20024428 	.word	0x20024428
 8018ea4:	2002441e 	.word	0x2002441e
 8018ea8:	2002441c 	.word	0x2002441c
 8018eac:	20024426 	.word	0x20024426
 8018eb0:	20024420 	.word	0x20024420
 8018eb4:	1961      	adds	r1, r4, r5
 8018eb6:	ab07      	add	r3, sp, #28
 8018eb8:	f851 0fac 	ldr.w	r0, [r1, #172]!
 8018ebc:	6849      	ldr	r1, [r1, #4]
 8018ebe:	c303      	stmia	r3!, {r0, r1}
 8018ec0:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8018ec4:	a807      	add	r0, sp, #28
 8018ec6:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8018eca:	2b13      	cmp	r3, #19
 8018ecc:	440b      	add	r3, r1
 8018ece:	bfd8      	it	le
 8018ed0:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 8018ed4:	1a9b      	subs	r3, r3, r2
 8018ed6:	f8ad 201c 	strh.w	r2, [sp, #28]
 8018eda:	f8ad 3020 	strh.w	r3, [sp, #32]
 8018ede:	f7ff f85b 	bl	8017f98 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8018ee2:	a807      	add	r0, sp, #28
 8018ee4:	f7fc f8df 	bl	80150a6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8018ee8:	bb78      	cbnz	r0, 8018f4a <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 8018eea:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 8018eee:	4425      	add	r5, r4
 8018ef0:	f8d8 0000 	ldr.w	r0, [r8]
 8018ef4:	f1bc 0f14 	cmp.w	ip, #20
 8018ef8:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8018efc:	f8d0 e000 	ldr.w	lr, [r0]
 8018f00:	bfa8      	it	ge
 8018f02:	f04f 0c14 	movge.w	ip, #20
 8018f06:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8018f0a:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8018f0e:	fa1f fc8c 	uxth.w	ip, ip
 8018f12:	f8cd c000 	str.w	ip, [sp]
 8018f16:	f8de a090 	ldr.w	sl, [lr, #144]	; 0x90
 8018f1a:	47d0      	blx	sl
 8018f1c:	4682      	mov	sl, r0
 8018f1e:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8018f22:	a807      	add	r0, sp, #28
 8018f24:	f7ff f81e 	bl	8017f64 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8018f28:	6823      	ldr	r3, [r4, #0]
 8018f2a:	4620      	mov	r0, r4
 8018f2c:	a907      	add	r1, sp, #28
 8018f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018f30:	4798      	blx	r3
 8018f32:	f8b5 00b0 	ldrh.w	r0, [r5, #176]	; 0xb0
 8018f36:	eba0 000a 	sub.w	r0, r0, sl
 8018f3a:	b200      	sxth	r0, r0
 8018f3c:	f8a5 00b0 	strh.w	r0, [r5, #176]	; 0xb0
 8018f40:	b918      	cbnz	r0, 8018f4a <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 8018f42:	b2b9      	uxth	r1, r7
 8018f44:	4648      	mov	r0, r9
 8018f46:	f7ff faad 	bl	80184a4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8018f4a:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	; 0xec
 8018f4e:	f1bb 0f00 	cmp.w	fp, #0
 8018f52:	f43f af26 	beq.w	8018da2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 8018f56:	9b02      	ldr	r3, [sp, #8]
 8018f58:	2700      	movs	r7, #0
 8018f5a:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	; 0xac
 8018f5e:	881b      	ldrh	r3, [r3, #0]
 8018f60:	3301      	adds	r3, #1
 8018f62:	b29b      	uxth	r3, r3
 8018f64:	b299      	uxth	r1, r3
 8018f66:	00fd      	lsls	r5, r7, #3
 8018f68:	458b      	cmp	fp, r1
 8018f6a:	d9a3      	bls.n	8018eb4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x36c>
 8018f6c:	4425      	add	r5, r4
 8018f6e:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 8018f72:	469c      	mov	ip, r3
 8018f74:	f8b5 10b0 	ldrh.w	r1, [r5, #176]	; 0xb0
 8018f78:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 8018f7c:	f9ba e0ac 	ldrsh.w	lr, [sl, #172]	; 0xac
 8018f80:	4408      	add	r0, r1
 8018f82:	f8ba 10b0 	ldrh.w	r1, [sl, #176]	; 0xb0
 8018f86:	4471      	add	r1, lr
 8018f88:	b200      	sxth	r0, r0
 8018f8a:	b209      	sxth	r1, r1
 8018f8c:	4288      	cmp	r0, r1
 8018f8e:	f6bf af6f 	bge.w	8018e70 <_ZN8touchgfx11Application15drawCachedAreasEv+0x328>
 8018f92:	4586      	cmp	lr, r0
 8018f94:	4672      	mov	r2, lr
 8018f96:	bfb8      	it	lt
 8018f98:	4602      	movlt	r2, r0
 8018f9a:	3301      	adds	r3, #1
 8018f9c:	4667      	mov	r7, ip
 8018f9e:	e7e1      	b.n	8018f64 <_ZN8touchgfx11Application15drawCachedAreasEv+0x41c>
 8018fa0:	d10c      	bne.n	8018fbc <_ZN8touchgfx11Application15drawCachedAreasEv+0x474>
 8018fa2:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	; 0xb0
 8018fa6:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	; 0xb0
 8018faa:	4287      	cmp	r7, r0
 8018fac:	bfb4      	ite	lt
 8018fae:	4608      	movlt	r0, r1
 8018fb0:	4640      	movge	r0, r8
 8018fb2:	f8be 70b2 	ldrh.w	r7, [lr, #178]	; 0xb2
 8018fb6:	443b      	add	r3, r7
 8018fb8:	b21b      	sxth	r3, r3
 8018fba:	e753      	b.n	8018e64 <_ZN8touchgfx11Application15drawCachedAreasEv+0x31c>
 8018fbc:	4565      	cmp	r5, ip
 8018fbe:	4640      	mov	r0, r8
 8018fc0:	bfa8      	it	ge
 8018fc2:	4665      	movge	r5, ip
 8018fc4:	e751      	b.n	8018e6a <_ZN8touchgfx11Application15drawCachedAreasEv+0x322>
 8018fc6:	eb09 0007 	add.w	r0, r9, r7
 8018fca:	4427      	add	r7, r4
 8018fcc:	9203      	str	r2, [sp, #12]
 8018fce:	f9b7 a0b2 	ldrsh.w	sl, [r7, #178]	; 0xb2
 8018fd2:	f1ba 0f13 	cmp.w	sl, #19
 8018fd6:	bfde      	ittt	le
 8018fd8:	f8b7 50ae 	ldrhle.w	r5, [r7, #174]	; 0xae
 8018fdc:	4455      	addle	r5, sl
 8018fde:	b22d      	sxthle	r5, r5
 8018fe0:	f7fc f861 	bl	80150a6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8018fe4:	9a03      	ldr	r2, [sp, #12]
 8018fe6:	2800      	cmp	r0, #0
 8018fe8:	f47f af1c 	bne.w	8018e24 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2dc>
 8018fec:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	; 0xae
 8018ff0:	fa1f fa8a 	uxth.w	sl, sl
 8018ff4:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8018ff8:	1aad      	subs	r5, r5, r2
 8018ffa:	4829      	ldr	r0, [pc, #164]	; (80190a0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x558>)
 8018ffc:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	; 0xac
 8019000:	2d14      	cmp	r5, #20
 8019002:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	; 0xb0
 8019006:	6800      	ldr	r0, [r0, #0]
 8019008:	bfa8      	it	ge
 801900a:	2514      	movge	r5, #20
 801900c:	f8ad 101c 	strh.w	r1, [sp, #28]
 8019010:	f8ad 201e 	strh.w	r2, [sp, #30]
 8019014:	b289      	uxth	r1, r1
 8019016:	f8ad 3020 	strh.w	r3, [sp, #32]
 801901a:	b2ad      	uxth	r5, r5
 801901c:	f8d0 c000 	ldr.w	ip, [r0]
 8019020:	b292      	uxth	r2, r2
 8019022:	4555      	cmp	r5, sl
 8019024:	bf94      	ite	ls
 8019026:	9500      	strls	r5, [sp, #0]
 8019028:	f8cd a000 	strhi.w	sl, [sp]
 801902c:	b29b      	uxth	r3, r3
 801902e:	f8dc 5090 	ldr.w	r5, [ip, #144]	; 0x90
 8019032:	47a8      	blx	r5
 8019034:	6823      	ldr	r3, [r4, #0]
 8019036:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801903a:	a907      	add	r1, sp, #28
 801903c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801903e:	4620      	mov	r0, r4
 8019040:	4798      	blx	r3
 8019042:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8019046:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801904a:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
 801904e:	1a5b      	subs	r3, r3, r1
 8019050:	440a      	add	r2, r1
 8019052:	b21b      	sxth	r3, r3
 8019054:	f8a7 20ae 	strh.w	r2, [r7, #174]	; 0xae
 8019058:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801905c:	2b00      	cmp	r3, #0
 801905e:	f47f aed8 	bne.w	8018e12 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 8019062:	fa1f f188 	uxth.w	r1, r8
 8019066:	4648      	mov	r0, r9
 8019068:	f7ff fa1c 	bl	80184a4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801906c:	e6d1      	b.n	8018e12 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 801906e:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 8019072:	42ab      	cmp	r3, r5
 8019074:	f67f ae95 	bls.w	8018da2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 8019078:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 801907c:	ab07      	add	r3, sp, #28
 801907e:	f852 0fac 	ldr.w	r0, [r2, #172]!
 8019082:	6851      	ldr	r1, [r2, #4]
 8019084:	c303      	stmia	r3!, {r0, r1}
 8019086:	a807      	add	r0, sp, #28
 8019088:	f7fc f80d 	bl	80150a6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801908c:	b920      	cbnz	r0, 8019098 <_ZN8touchgfx11Application15drawCachedAreasEv+0x550>
 801908e:	6823      	ldr	r3, [r4, #0]
 8019090:	a907      	add	r1, sp, #28
 8019092:	4620      	mov	r0, r4
 8019094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019096:	4798      	blx	r3
 8019098:	3501      	adds	r5, #1
 801909a:	b2ad      	uxth	r5, r5
 801909c:	e7e7      	b.n	801906e <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
 801909e:	bf00      	nop
 80190a0:	20024428 	.word	0x20024428

080190a4 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 80190a4:	4b03      	ldr	r3, [pc, #12]	; (80190b4 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 80190a6:	2200      	movs	r2, #0
 80190a8:	801a      	strh	r2, [r3, #0]
 80190aa:	805a      	strh	r2, [r3, #2]
 80190ac:	809a      	strh	r2, [r3, #4]
 80190ae:	80da      	strh	r2, [r3, #6]
 80190b0:	4770      	bx	lr
 80190b2:	bf00      	nop
 80190b4:	2002446c 	.word	0x2002446c

080190b8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 80190b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80190bc:	b09d      	sub	sp, #116	; 0x74
 80190be:	4606      	mov	r6, r0
 80190c0:	4614      	mov	r4, r2
 80190c2:	468a      	mov	sl, r1
 80190c4:	a803      	add	r0, sp, #12
 80190c6:	461d      	mov	r5, r3
 80190c8:	f000 fd72 	bl	8019bb0 <_ZN8touchgfx12TextProviderC1Ev>
 80190cc:	6833      	ldr	r3, [r6, #0]
 80190ce:	4630      	mov	r0, r6
 80190d0:	f242 0b0b 	movw	fp, #8203	; 0x200b
 80190d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80190d6:	4798      	blx	r3
 80190d8:	6833      	ldr	r3, [r6, #0]
 80190da:	4607      	mov	r7, r0
 80190dc:	4630      	mov	r0, r6
 80190de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80190e0:	4798      	blx	r3
 80190e2:	462a      	mov	r2, r5
 80190e4:	2500      	movs	r5, #0
 80190e6:	4621      	mov	r1, r4
 80190e8:	9000      	str	r0, [sp, #0]
 80190ea:	463b      	mov	r3, r7
 80190ec:	462c      	mov	r4, r5
 80190ee:	46a9      	mov	r9, r5
 80190f0:	46a8      	mov	r8, r5
 80190f2:	a803      	add	r0, sp, #12
 80190f4:	f000 fdb7 	bl	8019c66 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80190f8:	2300      	movs	r3, #0
 80190fa:	9302      	str	r3, [sp, #8]
 80190fc:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8019100:	429c      	cmp	r4, r3
 8019102:	d002      	beq.n	801910a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 8019104:	455c      	cmp	r4, fp
 8019106:	bf18      	it	ne
 8019108:	4625      	movne	r5, r4
 801910a:	ab02      	add	r3, sp, #8
 801910c:	4632      	mov	r2, r6
 801910e:	4651      	mov	r1, sl
 8019110:	a803      	add	r0, sp, #12
 8019112:	f001 f8ad 	bl	801a270 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8019116:	4604      	mov	r4, r0
 8019118:	b108      	cbz	r0, 801911e <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 801911a:	280a      	cmp	r0, #10
 801911c:	d10a      	bne.n	8019134 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 801911e:	45c1      	cmp	r9, r8
 8019120:	bf38      	it	cc
 8019122:	46c1      	movcc	r9, r8
 8019124:	f04f 0800 	mov.w	r8, #0
 8019128:	2c00      	cmp	r4, #0
 801912a:	d1e5      	bne.n	80190f8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801912c:	4648      	mov	r0, r9
 801912e:	b01d      	add	sp, #116	; 0x74
 8019130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019134:	9a02      	ldr	r2, [sp, #8]
 8019136:	2a00      	cmp	r2, #0
 8019138:	d0de      	beq.n	80190f8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801913a:	7b57      	ldrb	r7, [r2, #13]
 801913c:	4629      	mov	r1, r5
 801913e:	6833      	ldr	r3, [r6, #0]
 8019140:	007f      	lsls	r7, r7, #1
 8019142:	8894      	ldrh	r4, [r2, #4]
 8019144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019146:	f407 7080 	and.w	r0, r7, #256	; 0x100
 801914a:	7a97      	ldrb	r7, [r2, #10]
 801914c:	4307      	orrs	r7, r0
 801914e:	4630      	mov	r0, r6
 8019150:	4798      	blx	r3
 8019152:	4438      	add	r0, r7
 8019154:	4480      	add	r8, r0
 8019156:	fa1f f888 	uxth.w	r8, r8
 801915a:	e7e5      	b.n	8019128 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

0801915c <_ZNK8touchgfx4Font12getCharWidthEt>:
 801915c:	b508      	push	{r3, lr}
 801915e:	6803      	ldr	r3, [r0, #0]
 8019160:	68db      	ldr	r3, [r3, #12]
 8019162:	4798      	blx	r3
 8019164:	b128      	cbz	r0, 8019172 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 8019166:	7b43      	ldrb	r3, [r0, #13]
 8019168:	7a80      	ldrb	r0, [r0, #10]
 801916a:	005b      	lsls	r3, r3, #1
 801916c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019170:	4318      	orrs	r0, r3
 8019172:	bd08      	pop	{r3, pc}

08019174 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 8019174:	b40e      	push	{r1, r2, r3}
 8019176:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019178:	b09e      	sub	sp, #120	; 0x78
 801917a:	4605      	mov	r5, r0
 801917c:	ab23      	add	r3, sp, #140	; 0x8c
 801917e:	a805      	add	r0, sp, #20
 8019180:	f853 4b04 	ldr.w	r4, [r3], #4
 8019184:	9303      	str	r3, [sp, #12]
 8019186:	f000 fd13 	bl	8019bb0 <_ZN8touchgfx12TextProviderC1Ev>
 801918a:	682b      	ldr	r3, [r5, #0]
 801918c:	4628      	mov	r0, r5
 801918e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019190:	4798      	blx	r3
 8019192:	682b      	ldr	r3, [r5, #0]
 8019194:	4606      	mov	r6, r0
 8019196:	4628      	mov	r0, r5
 8019198:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801919a:	4798      	blx	r3
 801919c:	4633      	mov	r3, r6
 801919e:	4621      	mov	r1, r4
 80191a0:	ae1e      	add	r6, sp, #120	; 0x78
 80191a2:	2400      	movs	r4, #0
 80191a4:	9000      	str	r0, [sp, #0]
 80191a6:	9a03      	ldr	r2, [sp, #12]
 80191a8:	a805      	add	r0, sp, #20
 80191aa:	f000 fd5c 	bl	8019c66 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80191ae:	f846 4d68 	str.w	r4, [r6, #-104]!
 80191b2:	462a      	mov	r2, r5
 80191b4:	4633      	mov	r3, r6
 80191b6:	4621      	mov	r1, r4
 80191b8:	a805      	add	r0, sp, #20
 80191ba:	f001 f859 	bl	801a270 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80191be:	b300      	cbz	r0, 8019202 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 80191c0:	280a      	cmp	r0, #10
 80191c2:	d01a      	beq.n	80191fa <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 80191c4:	9f04      	ldr	r7, [sp, #16]
 80191c6:	b1c7      	cbz	r7, 80191fa <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 80191c8:	7b78      	ldrb	r0, [r7, #13]
 80191ca:	7a3b      	ldrb	r3, [r7, #8]
 80191cc:	00c1      	lsls	r1, r0, #3
 80191ce:	88ea      	ldrh	r2, [r5, #6]
 80191d0:	f401 7180 	and.w	r1, r1, #256	; 0x100
 80191d4:	4319      	orrs	r1, r3
 80191d6:	0643      	lsls	r3, r0, #25
 80191d8:	ea4f 1000 	mov.w	r0, r0, lsl #4
 80191dc:	bf48      	it	mi
 80191de:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 80191e2:	f400 7080 	and.w	r0, r0, #256	; 0x100
 80191e6:	bf48      	it	mi
 80191e8:	b219      	sxthmi	r1, r3
 80191ea:	79fb      	ldrb	r3, [r7, #7]
 80191ec:	4303      	orrs	r3, r0
 80191ee:	4413      	add	r3, r2
 80191f0:	1a5b      	subs	r3, r3, r1
 80191f2:	b21b      	sxth	r3, r3
 80191f4:	429c      	cmp	r4, r3
 80191f6:	bfb8      	it	lt
 80191f8:	461c      	movlt	r4, r3
 80191fa:	4633      	mov	r3, r6
 80191fc:	462a      	mov	r2, r5
 80191fe:	2100      	movs	r1, #0
 8019200:	e7da      	b.n	80191b8 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 8019202:	b2a0      	uxth	r0, r4
 8019204:	b01e      	add	sp, #120	; 0x78
 8019206:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801920a:	b003      	add	sp, #12
 801920c:	4770      	bx	lr

0801920e <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 801920e:	7a43      	ldrb	r3, [r0, #9]
 8019210:	8880      	ldrh	r0, [r0, #4]
 8019212:	4418      	add	r0, r3
 8019214:	b280      	uxth	r0, r0
 8019216:	4770      	bx	lr

08019218 <_ZNK8touchgfx4Font13getFontHeightEv>:
 8019218:	6803      	ldr	r3, [r0, #0]
 801921a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801921c:	4718      	bx	r3

0801921e <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801921e:	b40e      	push	{r1, r2, r3}
 8019220:	b570      	push	{r4, r5, r6, lr}
 8019222:	b09d      	sub	sp, #116	; 0x74
 8019224:	4604      	mov	r4, r0
 8019226:	ab21      	add	r3, sp, #132	; 0x84
 8019228:	a803      	add	r0, sp, #12
 801922a:	f853 5b04 	ldr.w	r5, [r3], #4
 801922e:	9302      	str	r3, [sp, #8]
 8019230:	f000 fcbe 	bl	8019bb0 <_ZN8touchgfx12TextProviderC1Ev>
 8019234:	6823      	ldr	r3, [r4, #0]
 8019236:	4620      	mov	r0, r4
 8019238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801923a:	4798      	blx	r3
 801923c:	6823      	ldr	r3, [r4, #0]
 801923e:	4606      	mov	r6, r0
 8019240:	4620      	mov	r0, r4
 8019242:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019244:	2401      	movs	r4, #1
 8019246:	4798      	blx	r3
 8019248:	4633      	mov	r3, r6
 801924a:	9000      	str	r0, [sp, #0]
 801924c:	4629      	mov	r1, r5
 801924e:	9a02      	ldr	r2, [sp, #8]
 8019250:	a803      	add	r0, sp, #12
 8019252:	f000 fd08 	bl	8019c66 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8019256:	a803      	add	r0, sp, #12
 8019258:	f001 f8d6 	bl	801a408 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801925c:	b2a3      	uxth	r3, r4
 801925e:	b138      	cbz	r0, 8019270 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 8019260:	280a      	cmp	r0, #10
 8019262:	a803      	add	r0, sp, #12
 8019264:	bf04      	itt	eq
 8019266:	3301      	addeq	r3, #1
 8019268:	b21c      	sxtheq	r4, r3
 801926a:	f001 f8cd 	bl	801a408 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801926e:	e7f5      	b.n	801925c <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 8019270:	4618      	mov	r0, r3
 8019272:	b01d      	add	sp, #116	; 0x74
 8019274:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019278:	b003      	add	sp, #12
 801927a:	4770      	bx	lr

0801927c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801927c:	b40e      	push	{r1, r2, r3}
 801927e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019280:	b09e      	sub	sp, #120	; 0x78
 8019282:	4604      	mov	r4, r0
 8019284:	ab23      	add	r3, sp, #140	; 0x8c
 8019286:	a805      	add	r0, sp, #20
 8019288:	f853 5b04 	ldr.w	r5, [r3], #4
 801928c:	9303      	str	r3, [sp, #12]
 801928e:	f000 fc8f 	bl	8019bb0 <_ZN8touchgfx12TextProviderC1Ev>
 8019292:	6823      	ldr	r3, [r4, #0]
 8019294:	4620      	mov	r0, r4
 8019296:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019298:	4798      	blx	r3
 801929a:	6823      	ldr	r3, [r4, #0]
 801929c:	4606      	mov	r6, r0
 801929e:	4620      	mov	r0, r4
 80192a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80192a2:	4798      	blx	r3
 80192a4:	4633      	mov	r3, r6
 80192a6:	4629      	mov	r1, r5
 80192a8:	9000      	str	r0, [sp, #0]
 80192aa:	9a03      	ldr	r2, [sp, #12]
 80192ac:	a805      	add	r0, sp, #20
 80192ae:	f000 fcda 	bl	8019c66 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80192b2:	ad1e      	add	r5, sp, #120	; 0x78
 80192b4:	2100      	movs	r1, #0
 80192b6:	f647 76ff 	movw	r6, #32767	; 0x7fff
 80192ba:	4622      	mov	r2, r4
 80192bc:	a805      	add	r0, sp, #20
 80192be:	f845 1d68 	str.w	r1, [r5, #-104]!
 80192c2:	462b      	mov	r3, r5
 80192c4:	f000 ffd4 	bl	801a270 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80192c8:	b1d8      	cbz	r0, 8019302 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 80192ca:	280a      	cmp	r0, #10
 80192cc:	d012      	beq.n	80192f4 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 80192ce:	9804      	ldr	r0, [sp, #16]
 80192d0:	b180      	cbz	r0, 80192f4 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 80192d2:	7b47      	ldrb	r7, [r0, #13]
 80192d4:	88e2      	ldrh	r2, [r4, #6]
 80192d6:	00fb      	lsls	r3, r7, #3
 80192d8:	f403 7180 	and.w	r1, r3, #256	; 0x100
 80192dc:	7a03      	ldrb	r3, [r0, #8]
 80192de:	430b      	orrs	r3, r1
 80192e0:	0679      	lsls	r1, r7, #25
 80192e2:	bf44      	itt	mi
 80192e4:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80192e8:	b21b      	sxthmi	r3, r3
 80192ea:	1ad3      	subs	r3, r2, r3
 80192ec:	b21b      	sxth	r3, r3
 80192ee:	429e      	cmp	r6, r3
 80192f0:	bfa8      	it	ge
 80192f2:	461e      	movge	r6, r3
 80192f4:	462b      	mov	r3, r5
 80192f6:	4622      	mov	r2, r4
 80192f8:	2100      	movs	r1, #0
 80192fa:	a805      	add	r0, sp, #20
 80192fc:	f000 ffb8 	bl	801a270 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8019300:	e7e2      	b.n	80192c8 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 8019302:	4630      	mov	r0, r6
 8019304:	b01e      	add	sp, #120	; 0x78
 8019306:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801930a:	b003      	add	sp, #12
 801930c:	4770      	bx	lr

0801930e <_ZNK8touchgfx8Drawable10invalidateEv>:
 801930e:	b513      	push	{r0, r1, r4, lr}
 8019310:	6803      	ldr	r3, [r0, #0]
 8019312:	2400      	movs	r4, #0
 8019314:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8019318:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801931c:	f8ad 1004 	strh.w	r1, [sp, #4]
 8019320:	4669      	mov	r1, sp
 8019322:	691b      	ldr	r3, [r3, #16]
 8019324:	9400      	str	r4, [sp, #0]
 8019326:	f8ad 2006 	strh.w	r2, [sp, #6]
 801932a:	4798      	blx	r3
 801932c:	b002      	add	sp, #8
 801932e:	bd10      	pop	{r4, pc}

08019330 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 8019330:	b538      	push	{r3, r4, r5, lr}
 8019332:	680b      	ldr	r3, [r1, #0]
 8019334:	460c      	mov	r4, r1
 8019336:	4605      	mov	r5, r0
 8019338:	68db      	ldr	r3, [r3, #12]
 801933a:	4798      	blx	r3
 801933c:	6823      	ldr	r3, [r4, #0]
 801933e:	4620      	mov	r0, r4
 8019340:	4629      	mov	r1, r5
 8019342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019344:	4798      	blx	r3
 8019346:	4628      	mov	r0, r5
 8019348:	bd38      	pop	{r3, r4, r5, pc}

0801934a <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801934a:	b410      	push	{r4}
 801934c:	880a      	ldrh	r2, [r1, #0]
 801934e:	8884      	ldrh	r4, [r0, #4]
 8019350:	4422      	add	r2, r4
 8019352:	800a      	strh	r2, [r1, #0]
 8019354:	884a      	ldrh	r2, [r1, #2]
 8019356:	88c4      	ldrh	r4, [r0, #6]
 8019358:	4422      	add	r2, r4
 801935a:	804a      	strh	r2, [r1, #2]
 801935c:	6940      	ldr	r0, [r0, #20]
 801935e:	b120      	cbz	r0, 801936a <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 8019360:	6803      	ldr	r3, [r0, #0]
 8019362:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019368:	4718      	bx	r3
 801936a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801936e:	4770      	bx	lr

08019370 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 8019370:	b570      	push	{r4, r5, r6, lr}
 8019372:	8882      	ldrh	r2, [r0, #4]
 8019374:	460c      	mov	r4, r1
 8019376:	880b      	ldrh	r3, [r1, #0]
 8019378:	4605      	mov	r5, r0
 801937a:	4413      	add	r3, r2
 801937c:	800b      	strh	r3, [r1, #0]
 801937e:	884b      	ldrh	r3, [r1, #2]
 8019380:	88c2      	ldrh	r2, [r0, #6]
 8019382:	4413      	add	r3, r2
 8019384:	804b      	strh	r3, [r1, #2]
 8019386:	1d01      	adds	r1, r0, #4
 8019388:	4620      	mov	r0, r4
 801938a:	f7fb fe49 	bl	8015020 <_ZN8touchgfx4RectaNERKS0_>
 801938e:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8019392:	2b00      	cmp	r3, #0
 8019394:	dd0b      	ble.n	80193ae <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8019396:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801939a:	2b00      	cmp	r3, #0
 801939c:	dd07      	ble.n	80193ae <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801939e:	6968      	ldr	r0, [r5, #20]
 80193a0:	b128      	cbz	r0, 80193ae <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 80193a2:	6803      	ldr	r3, [r0, #0]
 80193a4:	4621      	mov	r1, r4
 80193a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80193a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80193ac:	4718      	bx	r3
 80193ae:	bd70      	pop	{r4, r5, r6, pc}

080193b0 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 80193b0:	b570      	push	{r4, r5, r6, lr}
 80193b2:	8882      	ldrh	r2, [r0, #4]
 80193b4:	460c      	mov	r4, r1
 80193b6:	880b      	ldrh	r3, [r1, #0]
 80193b8:	4605      	mov	r5, r0
 80193ba:	4413      	add	r3, r2
 80193bc:	800b      	strh	r3, [r1, #0]
 80193be:	884b      	ldrh	r3, [r1, #2]
 80193c0:	88c2      	ldrh	r2, [r0, #6]
 80193c2:	4413      	add	r3, r2
 80193c4:	804b      	strh	r3, [r1, #2]
 80193c6:	1d01      	adds	r1, r0, #4
 80193c8:	4620      	mov	r0, r4
 80193ca:	f7fb fe29 	bl	8015020 <_ZN8touchgfx4RectaNERKS0_>
 80193ce:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 80193d2:	2b00      	cmp	r3, #0
 80193d4:	dd18      	ble.n	8019408 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 80193d6:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80193da:	2b00      	cmp	r3, #0
 80193dc:	dd14      	ble.n	8019408 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 80193de:	6968      	ldr	r0, [r5, #20]
 80193e0:	b128      	cbz	r0, 80193ee <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 80193e2:	6803      	ldr	r3, [r0, #0]
 80193e4:	4621      	mov	r1, r4
 80193e6:	691b      	ldr	r3, [r3, #16]
 80193e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80193ec:	4718      	bx	r3
 80193ee:	4b07      	ldr	r3, [pc, #28]	; (801940c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 80193f0:	681b      	ldr	r3, [r3, #0]
 80193f2:	3304      	adds	r3, #4
 80193f4:	429d      	cmp	r5, r3
 80193f6:	d107      	bne.n	8019408 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 80193f8:	f7fe ff44 	bl	8018284 <_ZN8touchgfx11Application11getInstanceEv>
 80193fc:	6821      	ldr	r1, [r4, #0]
 80193fe:	6862      	ldr	r2, [r4, #4]
 8019400:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019404:	f7ff b862 	b.w	80184cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8019408:	bd70      	pop	{r4, r5, r6, pc}
 801940a:	bf00      	nop
 801940c:	20024464 	.word	0x20024464

08019410 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 8019410:	b570      	push	{r4, r5, r6, lr}
 8019412:	4604      	mov	r4, r0
 8019414:	4616      	mov	r6, r2
 8019416:	460d      	mov	r5, r1
 8019418:	b901      	cbnz	r1, 801941c <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801941a:	b192      	cbz	r2, 8019442 <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 801941c:	6823      	ldr	r3, [r4, #0]
 801941e:	4620      	mov	r0, r4
 8019420:	699b      	ldr	r3, [r3, #24]
 8019422:	4798      	blx	r3
 8019424:	88e2      	ldrh	r2, [r4, #6]
 8019426:	88a1      	ldrh	r1, [r4, #4]
 8019428:	4620      	mov	r0, r4
 801942a:	4432      	add	r2, r6
 801942c:	4429      	add	r1, r5
 801942e:	b212      	sxth	r2, r2
 8019430:	b209      	sxth	r1, r1
 8019432:	f7f5 fafe 	bl	800ea32 <_ZN8touchgfx8Drawable5setXYEss>
 8019436:	6823      	ldr	r3, [r4, #0]
 8019438:	4620      	mov	r0, r4
 801943a:	699b      	ldr	r3, [r3, #24]
 801943c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019440:	4718      	bx	r3
 8019442:	bd70      	pop	{r4, r5, r6, pc}

08019444 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 8019444:	b510      	push	{r4, lr}
 8019446:	2300      	movs	r3, #0
 8019448:	4604      	mov	r4, r0
 801944a:	4608      	mov	r0, r1
 801944c:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8019450:	8023      	strh	r3, [r4, #0]
 8019452:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8019456:	8063      	strh	r3, [r4, #2]
 8019458:	6803      	ldr	r3, [r0, #0]
 801945a:	80a1      	strh	r1, [r4, #4]
 801945c:	4621      	mov	r1, r4
 801945e:	80e2      	strh	r2, [r4, #6]
 8019460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019462:	4798      	blx	r3
 8019464:	4620      	mov	r0, r4
 8019466:	bd10      	pop	{r4, pc}

08019468 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 8019468:	b530      	push	{r4, r5, lr}
 801946a:	8083      	strh	r3, [r0, #4]
 801946c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8019470:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8019474:	80c3      	strh	r3, [r0, #6]
 8019476:	f89d 3010 	ldrb.w	r3, [sp, #16]
 801947a:	6141      	str	r1, [r0, #20]
 801947c:	7203      	strb	r3, [r0, #8]
 801947e:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8019482:	8302      	strh	r2, [r0, #24]
 8019484:	7243      	strb	r3, [r0, #9]
 8019486:	7a83      	ldrb	r3, [r0, #10]
 8019488:	f365 0306 	bfi	r3, r5, #0, #7
 801948c:	f89d 501c 	ldrb.w	r5, [sp, #28]
 8019490:	f365 13c7 	bfi	r3, r5, #7, #1
 8019494:	7283      	strb	r3, [r0, #10]
 8019496:	f89d 3020 	ldrb.w	r3, [sp, #32]
 801949a:	72c3      	strb	r3, [r0, #11]
 801949c:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 80194a0:	7303      	strb	r3, [r0, #12]
 80194a2:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 80194a6:	81c3      	strh	r3, [r0, #14]
 80194a8:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 80194ac:	8203      	strh	r3, [r0, #16]
 80194ae:	4b01      	ldr	r3, [pc, #4]	; (80194b4 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 80194b0:	6003      	str	r3, [r0, #0]
 80194b2:	bd30      	pop	{r4, r5, pc}
 80194b4:	0802b1cc 	.word	0x0802b1cc

080194b8 <_ZNK8touchgfx9ConstFont4findEt>:
 80194b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80194ba:	6944      	ldr	r4, [r0, #20]
 80194bc:	b3bc      	cbz	r4, 801952e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80194be:	88a3      	ldrh	r3, [r4, #4]
 80194c0:	8b02      	ldrh	r2, [r0, #24]
 80194c2:	1acb      	subs	r3, r1, r3
 80194c4:	f102 32ff 	add.w	r2, r2, #4294967295
 80194c8:	d431      	bmi.n	801952e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80194ca:	4293      	cmp	r3, r2
 80194cc:	dd0c      	ble.n	80194e8 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 80194ce:	230e      	movs	r3, #14
 80194d0:	fb03 4302 	mla	r3, r3, r2, r4
 80194d4:	889b      	ldrh	r3, [r3, #4]
 80194d6:	1a5b      	subs	r3, r3, r1
 80194d8:	1ad3      	subs	r3, r2, r3
 80194da:	429a      	cmp	r2, r3
 80194dc:	db27      	blt.n	801952e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80194de:	2b00      	cmp	r3, #0
 80194e0:	bfbc      	itt	lt
 80194e2:	2302      	movlt	r3, #2
 80194e4:	fb92 f3f3 	sdivlt	r3, r2, r3
 80194e8:	2500      	movs	r5, #0
 80194ea:	260e      	movs	r6, #14
 80194ec:	4295      	cmp	r5, r2
 80194ee:	dc1e      	bgt.n	801952e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80194f0:	fb06 4003 	mla	r0, r6, r3, r4
 80194f4:	8887      	ldrh	r7, [r0, #4]
 80194f6:	42b9      	cmp	r1, r7
 80194f8:	d01a      	beq.n	8019530 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 80194fa:	d20d      	bcs.n	8019518 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 80194fc:	1e5a      	subs	r2, r3, #1
 80194fe:	4295      	cmp	r5, r2
 8019500:	dc15      	bgt.n	801952e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8019502:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 8019506:	1a5b      	subs	r3, r3, r1
 8019508:	1ad3      	subs	r3, r2, r3
 801950a:	429a      	cmp	r2, r3
 801950c:	db0f      	blt.n	801952e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801950e:	429d      	cmp	r5, r3
 8019510:	ddec      	ble.n	80194ec <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8019512:	1953      	adds	r3, r2, r5
 8019514:	105b      	asrs	r3, r3, #1
 8019516:	e7e9      	b.n	80194ec <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8019518:	1c5d      	adds	r5, r3, #1
 801951a:	42aa      	cmp	r2, r5
 801951c:	db07      	blt.n	801952e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801951e:	8a43      	ldrh	r3, [r0, #18]
 8019520:	1acb      	subs	r3, r1, r3
 8019522:	442b      	add	r3, r5
 8019524:	429d      	cmp	r5, r3
 8019526:	dc02      	bgt.n	801952e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8019528:	429a      	cmp	r2, r3
 801952a:	dadf      	bge.n	80194ec <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801952c:	e7f1      	b.n	8019512 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 801952e:	2000      	movs	r0, #0
 8019530:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019532 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 8019532:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019534:	4604      	mov	r4, r0
 8019536:	4617      	mov	r7, r2
 8019538:	461e      	mov	r6, r3
 801953a:	b911      	cbnz	r1, 8019542 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801953c:	2500      	movs	r5, #0
 801953e:	4628      	mov	r0, r5
 8019540:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019542:	290a      	cmp	r1, #10
 8019544:	d0fa      	beq.n	801953c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8019546:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801954a:	4291      	cmp	r1, r2
 801954c:	d0f6      	beq.n	801953c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801954e:	f242 020b 	movw	r2, #8203	; 0x200b
 8019552:	4291      	cmp	r1, r2
 8019554:	d0f2      	beq.n	801953c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8019556:	f7ff ffaf 	bl	80194b8 <_ZNK8touchgfx9ConstFont4findEt>
 801955a:	4605      	mov	r5, r0
 801955c:	b950      	cbnz	r0, 8019574 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 801955e:	6823      	ldr	r3, [r4, #0]
 8019560:	4620      	mov	r0, r4
 8019562:	691b      	ldr	r3, [r3, #16]
 8019564:	4798      	blx	r3
 8019566:	4601      	mov	r1, r0
 8019568:	4620      	mov	r0, r4
 801956a:	f7ff ffa5 	bl	80194b8 <_ZNK8touchgfx9ConstFont4findEt>
 801956e:	4605      	mov	r5, r0
 8019570:	2800      	cmp	r0, #0
 8019572:	d0e3      	beq.n	801953c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8019574:	6823      	ldr	r3, [r4, #0]
 8019576:	4629      	mov	r1, r5
 8019578:	4620      	mov	r0, r4
 801957a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801957c:	4798      	blx	r3
 801957e:	6038      	str	r0, [r7, #0]
 8019580:	6823      	ldr	r3, [r4, #0]
 8019582:	4620      	mov	r0, r4
 8019584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019586:	4798      	blx	r3
 8019588:	7030      	strb	r0, [r6, #0]
 801958a:	e7d8      	b.n	801953e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0801958c <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 801958c:	2000      	movs	r0, #0
 801958e:	4770      	bx	lr

08019590 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 8019590:	2001      	movs	r0, #1
 8019592:	4770      	bx	lr

08019594 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 8019594:	2002      	movs	r0, #2
 8019596:	4770      	bx	lr

08019598 <_ZN8touchgfx12GestureEventD1Ev>:
 8019598:	4770      	bx	lr

0801959a <_ZN8touchgfx9DragEventD1Ev>:
 801959a:	4770      	bx	lr

0801959c <_ZN8touchgfx10ClickEventD1Ev>:
 801959c:	4770      	bx	lr

0801959e <_ZN8touchgfx10ClickEventD0Ev>:
 801959e:	b510      	push	{r4, lr}
 80195a0:	4604      	mov	r4, r0
 80195a2:	210c      	movs	r1, #12
 80195a4:	f00d f8ef 	bl	8026786 <_ZdlPvj>
 80195a8:	4620      	mov	r0, r4
 80195aa:	bd10      	pop	{r4, pc}

080195ac <_ZN8touchgfx9DragEventD0Ev>:
 80195ac:	b510      	push	{r4, lr}
 80195ae:	4604      	mov	r4, r0
 80195b0:	2110      	movs	r1, #16
 80195b2:	f00d f8e8 	bl	8026786 <_ZdlPvj>
 80195b6:	4620      	mov	r0, r4
 80195b8:	bd10      	pop	{r4, pc}

080195ba <_ZN8touchgfx12GestureEventD0Ev>:
 80195ba:	b510      	push	{r4, lr}
 80195bc:	4604      	mov	r4, r0
 80195be:	210c      	movs	r1, #12
 80195c0:	f00d f8e1 	bl	8026786 <_ZdlPvj>
 80195c4:	4620      	mov	r0, r4
 80195c6:	bd10      	pop	{r4, pc}

080195c8 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 80195c8:	b530      	push	{r4, r5, lr}
 80195ca:	460d      	mov	r5, r1
 80195cc:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80195ce:	b087      	sub	sp, #28
 80195d0:	4604      	mov	r4, r0
 80195d2:	b301      	cbz	r1, 8019616 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 80195d4:	a801      	add	r0, sp, #4
 80195d6:	f7ff ff35 	bl	8019444 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80195da:	892a      	ldrh	r2, [r5, #8]
 80195dc:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80195e0:	7928      	ldrb	r0, [r5, #4]
 80195e2:	1ad2      	subs	r2, r2, r3
 80195e4:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80195e6:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 80195ea:	441a      	add	r2, r3
 80195ec:	896b      	ldrh	r3, [r5, #10]
 80195ee:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 80195f2:	f88d 0010 	strb.w	r0, [sp, #16]
 80195f6:	1b5b      	subs	r3, r3, r5
 80195f8:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 80195fa:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80195fc:	442b      	add	r3, r5
 80195fe:	4d07      	ldr	r5, [pc, #28]	; (801961c <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 8019600:	f8ad 1012 	strh.w	r1, [sp, #18]
 8019604:	a903      	add	r1, sp, #12
 8019606:	9503      	str	r5, [sp, #12]
 8019608:	f8ad 2014 	strh.w	r2, [sp, #20]
 801960c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019610:	6803      	ldr	r3, [r0, #0]
 8019612:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019614:	4798      	blx	r3
 8019616:	b007      	add	sp, #28
 8019618:	bd30      	pop	{r4, r5, pc}
 801961a:	bf00      	nop
 801961c:	0802b254 	.word	0x0802b254

08019620 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 8019620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019624:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8019626:	b08a      	sub	sp, #40	; 0x28
 8019628:	4604      	mov	r4, r0
 801962a:	460d      	mov	r5, r1
 801962c:	b113      	cbz	r3, 8019634 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 801962e:	790b      	ldrb	r3, [r1, #4]
 8019630:	2b00      	cmp	r3, #0
 8019632:	d044      	beq.n	80196be <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8019634:	f104 0804 	add.w	r8, r4, #4
 8019638:	a803      	add	r0, sp, #12
 801963a:	4641      	mov	r1, r8
 801963c:	f7ff ff02 	bl	8019444 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019640:	792b      	ldrb	r3, [r5, #4]
 8019642:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 8019646:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 801964a:	b983      	cbnz	r3, 801966e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 801964c:	f104 0336 	add.w	r3, r4, #54	; 0x36
 8019650:	892a      	ldrh	r2, [r5, #8]
 8019652:	88e9      	ldrh	r1, [r5, #6]
 8019654:	4640      	mov	r0, r8
 8019656:	1b92      	subs	r2, r2, r6
 8019658:	9301      	str	r3, [sp, #4]
 801965a:	1bc9      	subs	r1, r1, r7
 801965c:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8019660:	b212      	sxth	r2, r2
 8019662:	9300      	str	r3, [sp, #0]
 8019664:	b209      	sxth	r1, r1
 8019666:	f104 0330 	add.w	r3, r4, #48	; 0x30
 801966a:	f7fb fbf7 	bl	8014e5c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 801966e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8019670:	b329      	cbz	r1, 80196be <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8019672:	a805      	add	r0, sp, #20
 8019674:	f7ff fee6 	bl	8019444 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019678:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801967c:	792b      	ldrb	r3, [r5, #4]
 801967e:	a907      	add	r1, sp, #28
 8019680:	1abf      	subs	r7, r7, r2
 8019682:	88ea      	ldrh	r2, [r5, #6]
 8019684:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8019686:	4417      	add	r7, r2
 8019688:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 801968a:	f88d 3020 	strb.w	r3, [sp, #32]
 801968e:	4417      	add	r7, r2
 8019690:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8019694:	1ab6      	subs	r6, r6, r2
 8019696:	892a      	ldrh	r2, [r5, #8]
 8019698:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 801969c:	4416      	add	r6, r2
 801969e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80196a0:	4416      	add	r6, r2
 80196a2:	4a08      	ldr	r2, [pc, #32]	; (80196c4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 80196a4:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 80196a8:	2600      	movs	r6, #0
 80196aa:	9207      	str	r2, [sp, #28]
 80196ac:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 80196b0:	6803      	ldr	r3, [r0, #0]
 80196b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80196b4:	4798      	blx	r3
 80196b6:	792b      	ldrb	r3, [r5, #4]
 80196b8:	b10b      	cbz	r3, 80196be <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 80196ba:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 80196be:	b00a      	add	sp, #40	; 0x28
 80196c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80196c4:	0802b22c 	.word	0x0802b22c

080196c8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 80196c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80196cc:	460c      	mov	r4, r1
 80196ce:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80196d0:	b088      	sub	sp, #32
 80196d2:	4605      	mov	r5, r0
 80196d4:	2900      	cmp	r1, #0
 80196d6:	d06d      	beq.n	80197b4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 80196d8:	4668      	mov	r0, sp
 80196da:	f7ff feb3 	bl	8019444 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80196de:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 80196e0:	88e3      	ldrh	r3, [r4, #6]
 80196e2:	f9bd 8000 	ldrsh.w	r8, [sp]
 80196e6:	440b      	add	r3, r1
 80196e8:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 80196ec:	b21b      	sxth	r3, r3
 80196ee:	4543      	cmp	r3, r8
 80196f0:	db31      	blt.n	8019756 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 80196f2:	f8bd c004 	ldrh.w	ip, [sp, #4]
 80196f6:	44c4      	add	ip, r8
 80196f8:	fa0f fc8c 	sxth.w	ip, ip
 80196fc:	4563      	cmp	r3, ip
 80196fe:	da2a      	bge.n	8019756 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8019700:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 8019702:	8926      	ldrh	r6, [r4, #8]
 8019704:	4416      	add	r6, r2
 8019706:	b236      	sxth	r6, r6
 8019708:	42be      	cmp	r6, r7
 801970a:	db24      	blt.n	8019756 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801970c:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8019710:	4438      	add	r0, r7
 8019712:	b200      	sxth	r0, r0
 8019714:	4286      	cmp	r6, r0
 8019716:	da1e      	bge.n	8019756 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8019718:	8963      	ldrh	r3, [r4, #10]
 801971a:	4419      	add	r1, r3
 801971c:	b209      	sxth	r1, r1
 801971e:	4541      	cmp	r1, r8
 8019720:	db08      	blt.n	8019734 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8019722:	4561      	cmp	r1, ip
 8019724:	da06      	bge.n	8019734 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8019726:	89a3      	ldrh	r3, [r4, #12]
 8019728:	441a      	add	r2, r3
 801972a:	b212      	sxth	r2, r2
 801972c:	42ba      	cmp	r2, r7
 801972e:	db01      	blt.n	8019734 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8019730:	4282      	cmp	r2, r0
 8019732:	db10      	blt.n	8019756 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8019734:	4b21      	ldr	r3, [pc, #132]	; (80197bc <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 8019736:	a904      	add	r1, sp, #16
 8019738:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801973a:	9304      	str	r3, [sp, #16]
 801973c:	2302      	movs	r3, #2
 801973e:	f88d 3014 	strb.w	r3, [sp, #20]
 8019742:	2300      	movs	r3, #0
 8019744:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019748:	f8ad 3018 	strh.w	r3, [sp, #24]
 801974c:	f8ad 301a 	strh.w	r3, [sp, #26]
 8019750:	6803      	ldr	r3, [r0, #0]
 8019752:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019754:	4798      	blx	r3
 8019756:	1d29      	adds	r1, r5, #4
 8019758:	a802      	add	r0, sp, #8
 801975a:	f7ff fe73 	bl	8019444 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801975e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8019762:	88e0      	ldrh	r0, [r4, #6]
 8019764:	eba3 0808 	sub.w	r8, r3, r8
 8019768:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801976c:	7921      	ldrb	r1, [r4, #4]
 801976e:	fa1f f888 	uxth.w	r8, r8
 8019772:	1bdf      	subs	r7, r3, r7
 8019774:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 8019778:	b2bb      	uxth	r3, r7
 801977a:	4440      	add	r0, r8
 801977c:	8922      	ldrh	r2, [r4, #8]
 801977e:	8967      	ldrh	r7, [r4, #10]
 8019780:	4460      	add	r0, ip
 8019782:	89a4      	ldrh	r4, [r4, #12]
 8019784:	441a      	add	r2, r3
 8019786:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 8019788:	44b8      	add	r8, r7
 801978a:	4423      	add	r3, r4
 801978c:	f8ad 0016 	strh.w	r0, [sp, #22]
 8019790:	4432      	add	r2, r6
 8019792:	44e0      	add	r8, ip
 8019794:	4433      	add	r3, r6
 8019796:	4c0a      	ldr	r4, [pc, #40]	; (80197c0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 8019798:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801979a:	f88d 1014 	strb.w	r1, [sp, #20]
 801979e:	a904      	add	r1, sp, #16
 80197a0:	9404      	str	r4, [sp, #16]
 80197a2:	f8ad 2018 	strh.w	r2, [sp, #24]
 80197a6:	f8ad 801a 	strh.w	r8, [sp, #26]
 80197aa:	f8ad 301c 	strh.w	r3, [sp, #28]
 80197ae:	6803      	ldr	r3, [r0, #0]
 80197b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80197b2:	4798      	blx	r3
 80197b4:	b008      	add	sp, #32
 80197b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80197ba:	bf00      	nop
 80197bc:	0802b22c 	.word	0x0802b22c
 80197c0:	0802b240 	.word	0x0802b240

080197c4 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 80197c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80197c6:	4604      	mov	r4, r0
 80197c8:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 80197cc:	3201      	adds	r2, #1
 80197ce:	d112      	bne.n	80197f6 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 80197d0:	2500      	movs	r5, #0
 80197d2:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 80197d6:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80197da:	6803      	ldr	r3, [r0, #0]
 80197dc:	9500      	str	r5, [sp, #0]
 80197de:	466d      	mov	r5, sp
 80197e0:	f8ad 1004 	strh.w	r1, [sp, #4]
 80197e4:	f8ad 2006 	strh.w	r2, [sp, #6]
 80197e8:	4629      	mov	r1, r5
 80197ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80197ec:	4798      	blx	r3
 80197ee:	e895 0003 	ldmia.w	r5, {r0, r1}
 80197f2:	e884 0003 	stmia.w	r4, {r0, r1}
 80197f6:	4620      	mov	r0, r4
 80197f8:	b003      	add	sp, #12
 80197fa:	bd30      	pop	{r4, r5, pc}

080197fc <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 80197fc:	b513      	push	{r0, r1, r4, lr}
 80197fe:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 8019802:	4604      	mov	r4, r0
 8019804:	3301      	adds	r3, #1
 8019806:	d109      	bne.n	801981c <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 8019808:	4601      	mov	r1, r0
 801980a:	4668      	mov	r0, sp
 801980c:	f7ff fe1a 	bl	8019444 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019810:	f8bd 3000 	ldrh.w	r3, [sp]
 8019814:	8423      	strh	r3, [r4, #32]
 8019816:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801981a:	8463      	strh	r3, [r4, #34]	; 0x22
 801981c:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 8019820:	b002      	add	sp, #8
 8019822:	bd10      	pop	{r4, pc}

08019824 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 8019824:	b513      	push	{r0, r1, r4, lr}
 8019826:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 801982a:	4604      	mov	r4, r0
 801982c:	3301      	adds	r3, #1
 801982e:	d109      	bne.n	8019844 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 8019830:	4601      	mov	r1, r0
 8019832:	4668      	mov	r0, sp
 8019834:	f7ff fe06 	bl	8019444 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019838:	f8bd 3000 	ldrh.w	r3, [sp]
 801983c:	8423      	strh	r3, [r4, #32]
 801983e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8019842:	8463      	strh	r3, [r4, #34]	; 0x22
 8019844:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 8019848:	b002      	add	sp, #8
 801984a:	bd10      	pop	{r4, pc}

0801984c <_ZN8touchgfx6ScreenC1Ev>:
 801984c:	b570      	push	{r4, r5, r6, lr}
 801984e:	4b17      	ldr	r3, [pc, #92]	; (80198ac <_ZN8touchgfx6ScreenC1Ev+0x60>)
 8019850:	4605      	mov	r5, r0
 8019852:	4a17      	ldr	r2, [pc, #92]	; (80198b0 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 8019854:	2101      	movs	r1, #1
 8019856:	f845 3b04 	str.w	r3, [r5], #4
 801985a:	2300      	movs	r3, #0
 801985c:	6042      	str	r2, [r0, #4]
 801985e:	4604      	mov	r4, r0
 8019860:	8103      	strh	r3, [r0, #8]
 8019862:	8143      	strh	r3, [r0, #10]
 8019864:	8183      	strh	r3, [r0, #12]
 8019866:	81c3      	strh	r3, [r0, #14]
 8019868:	8203      	strh	r3, [r0, #16]
 801986a:	8243      	strh	r3, [r0, #18]
 801986c:	8283      	strh	r3, [r0, #20]
 801986e:	82c3      	strh	r3, [r0, #22]
 8019870:	6203      	str	r3, [r0, #32]
 8019872:	8483      	strh	r3, [r0, #36]	; 0x24
 8019874:	84c3      	strh	r3, [r0, #38]	; 0x26
 8019876:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 801987a:	6343      	str	r3, [r0, #52]	; 0x34
 801987c:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 8019880:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 8019884:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8019888:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 801988c:	4b09      	ldr	r3, [pc, #36]	; (80198b4 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801988e:	4628      	mov	r0, r5
 8019890:	f9b3 6000 	ldrsh.w	r6, [r3]
 8019894:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8019896:	4a08      	ldr	r2, [pc, #32]	; (80198b8 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 8019898:	f9b2 1000 	ldrsh.w	r1, [r2]
 801989c:	4798      	blx	r3
 801989e:	6863      	ldr	r3, [r4, #4]
 80198a0:	4628      	mov	r0, r5
 80198a2:	4631      	mov	r1, r6
 80198a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80198a6:	4798      	blx	r3
 80198a8:	4620      	mov	r0, r4
 80198aa:	bd70      	pop	{r4, r5, r6, pc}
 80198ac:	0802b268 	.word	0x0802b268
 80198b0:	0802ad74 	.word	0x0802ad74
 80198b4:	2002441e 	.word	0x2002441e
 80198b8:	2002441c 	.word	0x2002441c

080198bc <_ZN8touchgfx6Screen4drawEv>:
 80198bc:	4b09      	ldr	r3, [pc, #36]	; (80198e4 <_ZN8touchgfx6Screen4drawEv+0x28>)
 80198be:	b507      	push	{r0, r1, r2, lr}
 80198c0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80198c4:	2100      	movs	r1, #0
 80198c6:	4b08      	ldr	r3, [pc, #32]	; (80198e8 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 80198c8:	9100      	str	r1, [sp, #0]
 80198ca:	4669      	mov	r1, sp
 80198cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80198d0:	f8ad 2004 	strh.w	r2, [sp, #4]
 80198d4:	f8ad 3006 	strh.w	r3, [sp, #6]
 80198d8:	6803      	ldr	r3, [r0, #0]
 80198da:	689b      	ldr	r3, [r3, #8]
 80198dc:	4798      	blx	r3
 80198de:	b003      	add	sp, #12
 80198e0:	f85d fb04 	ldr.w	pc, [sp], #4
 80198e4:	2002441c 	.word	0x2002441c
 80198e8:	2002441e 	.word	0x2002441e

080198ec <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 80198ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80198f0:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 80198f4:	b089      	sub	sp, #36	; 0x24
 80198f6:	4680      	mov	r8, r0
 80198f8:	460c      	mov	r4, r1
 80198fa:	2b00      	cmp	r3, #0
 80198fc:	4615      	mov	r5, r2
 80198fe:	dd0e      	ble.n	801991e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8019900:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8019904:	2b00      	cmp	r3, #0
 8019906:	dd0a      	ble.n	801991e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8019908:	4628      	mov	r0, r5
 801990a:	f7ff ff5b 	bl	80197c4 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801990e:	4621      	mov	r1, r4
 8019910:	f7fe fbda 	bl	80180c8 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8019914:	69eb      	ldr	r3, [r5, #28]
 8019916:	b928      	cbnz	r0, 8019924 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 8019918:	461d      	mov	r5, r3
 801991a:	2b00      	cmp	r3, #0
 801991c:	d1f4      	bne.n	8019908 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 801991e:	b009      	add	sp, #36	; 0x24
 8019920:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019924:	ae04      	add	r6, sp, #16
 8019926:	2b00      	cmp	r3, #0
 8019928:	f000 80b5 	beq.w	8019a96 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801992c:	682b      	ldr	r3, [r5, #0]
 801992e:	4629      	mov	r1, r5
 8019930:	a802      	add	r0, sp, #8
 8019932:	68db      	ldr	r3, [r3, #12]
 8019934:	4798      	blx	r3
 8019936:	4628      	mov	r0, r5
 8019938:	f7ff ff60 	bl	80197fc <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801993c:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 8019940:	4407      	add	r7, r0
 8019942:	4628      	mov	r0, r5
 8019944:	f7ff ff6e 	bl	8019824 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8019948:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801994c:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8019950:	b23f      	sxth	r7, r7
 8019952:	4418      	add	r0, r3
 8019954:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8019958:	4621      	mov	r1, r4
 801995a:	f8ad 2014 	strh.w	r2, [sp, #20]
 801995e:	f8ad 0012 	strh.w	r0, [sp, #18]
 8019962:	4630      	mov	r0, r6
 8019964:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019968:	f8ad 7010 	strh.w	r7, [sp, #16]
 801996c:	f7fb fb58 	bl	8015020 <_ZN8touchgfx4RectaNERKS0_>
 8019970:	4628      	mov	r0, r5
 8019972:	f7ff ff27 	bl	80197c4 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8019976:	ab06      	add	r3, sp, #24
 8019978:	4602      	mov	r2, r0
 801997a:	e896 0003 	ldmia.w	r6, {r0, r1}
 801997e:	e883 0003 	stmia.w	r3, {r0, r1}
 8019982:	4611      	mov	r1, r2
 8019984:	4618      	mov	r0, r3
 8019986:	f7fb fb4b 	bl	8015020 <_ZN8touchgfx4RectaNERKS0_>
 801998a:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801998e:	f9b4 1000 	ldrsh.w	r1, [r4]
 8019992:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 8019996:	4299      	cmp	r1, r3
 8019998:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 801999c:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 80199a0:	d10b      	bne.n	80199ba <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 80199a2:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80199a6:	4552      	cmp	r2, sl
 80199a8:	d107      	bne.n	80199ba <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 80199aa:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 80199ae:	455a      	cmp	r2, fp
 80199b0:	d103      	bne.n	80199ba <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 80199b2:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80199b6:	454a      	cmp	r2, r9
 80199b8:	d06d      	beq.n	8019a96 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 80199ba:	f1bb 0f00 	cmp.w	fp, #0
 80199be:	dd65      	ble.n	8019a8c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 80199c0:	f1b9 0f00 	cmp.w	r9, #0
 80199c4:	dd62      	ble.n	8019a8c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 80199c6:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80199ca:	fa1f f08a 	uxth.w	r0, sl
 80199ce:	4552      	cmp	r2, sl
 80199d0:	9000      	str	r0, [sp, #0]
 80199d2:	da12      	bge.n	80199fa <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 80199d4:	9301      	str	r3, [sp, #4]
 80199d6:	9b00      	ldr	r3, [sp, #0]
 80199d8:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80199dc:	f8ad 2012 	strh.w	r2, [sp, #18]
 80199e0:	1a9a      	subs	r2, r3, r2
 80199e2:	f8ad 1010 	strh.w	r1, [sp, #16]
 80199e6:	4631      	mov	r1, r6
 80199e8:	f8ad 0014 	strh.w	r0, [sp, #20]
 80199ec:	4640      	mov	r0, r8
 80199ee:	f8ad 2016 	strh.w	r2, [sp, #22]
 80199f2:	69ea      	ldr	r2, [r5, #28]
 80199f4:	f7ff ff7a 	bl	80198ec <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80199f8:	9b01      	ldr	r3, [sp, #4]
 80199fa:	f9b4 2000 	ldrsh.w	r2, [r4]
 80199fe:	b29f      	uxth	r7, r3
 8019a00:	429a      	cmp	r2, r3
 8019a02:	da0d      	bge.n	8019a20 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 8019a04:	f8ad 2010 	strh.w	r2, [sp, #16]
 8019a08:	1aba      	subs	r2, r7, r2
 8019a0a:	f8ad a012 	strh.w	sl, [sp, #18]
 8019a0e:	4631      	mov	r1, r6
 8019a10:	f8ad 2014 	strh.w	r2, [sp, #20]
 8019a14:	4640      	mov	r0, r8
 8019a16:	f8ad 9016 	strh.w	r9, [sp, #22]
 8019a1a:	69ea      	ldr	r2, [r5, #28]
 8019a1c:	f7ff ff66 	bl	80198ec <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8019a20:	8822      	ldrh	r2, [r4, #0]
 8019a22:	445f      	add	r7, fp
 8019a24:	88a3      	ldrh	r3, [r4, #4]
 8019a26:	b2bf      	uxth	r7, r7
 8019a28:	4413      	add	r3, r2
 8019a2a:	b23a      	sxth	r2, r7
 8019a2c:	b29b      	uxth	r3, r3
 8019a2e:	b219      	sxth	r1, r3
 8019a30:	4291      	cmp	r1, r2
 8019a32:	dd0d      	ble.n	8019a50 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 8019a34:	1bdb      	subs	r3, r3, r7
 8019a36:	f8ad 2010 	strh.w	r2, [sp, #16]
 8019a3a:	f8ad a012 	strh.w	sl, [sp, #18]
 8019a3e:	4631      	mov	r1, r6
 8019a40:	f8ad 3014 	strh.w	r3, [sp, #20]
 8019a44:	4640      	mov	r0, r8
 8019a46:	f8ad 9016 	strh.w	r9, [sp, #22]
 8019a4a:	69ea      	ldr	r2, [r5, #28]
 8019a4c:	f7ff ff4e 	bl	80198ec <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8019a50:	88e2      	ldrh	r2, [r4, #6]
 8019a52:	8863      	ldrh	r3, [r4, #2]
 8019a54:	4413      	add	r3, r2
 8019a56:	9a00      	ldr	r2, [sp, #0]
 8019a58:	444a      	add	r2, r9
 8019a5a:	b29b      	uxth	r3, r3
 8019a5c:	fa1f f982 	uxth.w	r9, r2
 8019a60:	b219      	sxth	r1, r3
 8019a62:	fa0f f289 	sxth.w	r2, r9
 8019a66:	428a      	cmp	r2, r1
 8019a68:	da15      	bge.n	8019a96 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8019a6a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8019a6e:	eba3 0309 	sub.w	r3, r3, r9
 8019a72:	f9b4 0000 	ldrsh.w	r0, [r4]
 8019a76:	f8ad 1014 	strh.w	r1, [sp, #20]
 8019a7a:	4631      	mov	r1, r6
 8019a7c:	f8ad 0010 	strh.w	r0, [sp, #16]
 8019a80:	f8ad 2012 	strh.w	r2, [sp, #18]
 8019a84:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019a88:	69ea      	ldr	r2, [r5, #28]
 8019a8a:	e001      	b.n	8019a90 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 8019a8c:	69ea      	ldr	r2, [r5, #28]
 8019a8e:	4621      	mov	r1, r4
 8019a90:	4640      	mov	r0, r8
 8019a92:	f7ff ff2b 	bl	80198ec <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8019a96:	4628      	mov	r0, r5
 8019a98:	f7ff fe94 	bl	80197c4 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8019a9c:	6861      	ldr	r1, [r4, #4]
 8019a9e:	4602      	mov	r2, r0
 8019aa0:	4633      	mov	r3, r6
 8019aa2:	6820      	ldr	r0, [r4, #0]
 8019aa4:	c303      	stmia	r3!, {r0, r1}
 8019aa6:	4611      	mov	r1, r2
 8019aa8:	4630      	mov	r0, r6
 8019aaa:	f7fb fab9 	bl	8015020 <_ZN8touchgfx4RectaNERKS0_>
 8019aae:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8019ab2:	2b00      	cmp	r3, #0
 8019ab4:	f77f af33 	ble.w	801991e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8019ab8:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8019abc:	2b00      	cmp	r3, #0
 8019abe:	f77f af2e 	ble.w	801991e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8019ac2:	4628      	mov	r0, r5
 8019ac4:	f7ff fe9a 	bl	80197fc <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8019ac8:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8019acc:	1a18      	subs	r0, r3, r0
 8019ace:	f8ad 0010 	strh.w	r0, [sp, #16]
 8019ad2:	4628      	mov	r0, r5
 8019ad4:	f7ff fea6 	bl	8019824 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8019ad8:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8019adc:	4631      	mov	r1, r6
 8019ade:	1a18      	subs	r0, r3, r0
 8019ae0:	f8ad 0012 	strh.w	r0, [sp, #18]
 8019ae4:	4628      	mov	r0, r5
 8019ae6:	682b      	ldr	r3, [r5, #0]
 8019ae8:	689b      	ldr	r3, [r3, #8]
 8019aea:	4798      	blx	r3
 8019aec:	e717      	b.n	801991e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

08019aee <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 8019aee:	b570      	push	{r4, r5, r6, lr}
 8019af0:	1d06      	adds	r6, r0, #4
 8019af2:	b086      	sub	sp, #24
 8019af4:	460c      	mov	r4, r1
 8019af6:	2300      	movs	r3, #0
 8019af8:	4631      	mov	r1, r6
 8019afa:	4605      	mov	r5, r0
 8019afc:	a802      	add	r0, sp, #8
 8019afe:	9301      	str	r3, [sp, #4]
 8019b00:	f7ff fca0 	bl	8019444 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019b04:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8019b08:	8822      	ldrh	r2, [r4, #0]
 8019b0a:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 8019b0e:	1ad2      	subs	r2, r2, r3
 8019b10:	8863      	ldrh	r3, [r4, #2]
 8019b12:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8019b16:	1a5b      	subs	r3, r3, r1
 8019b18:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8019b1c:	f8ad 2010 	strh.w	r2, [sp, #16]
 8019b20:	aa01      	add	r2, sp, #4
 8019b22:	f8ad 0014 	strh.w	r0, [sp, #20]
 8019b26:	4630      	mov	r0, r6
 8019b28:	f8ad 1016 	strh.w	r1, [sp, #22]
 8019b2c:	a904      	add	r1, sp, #16
 8019b2e:	f8ad 3012 	strh.w	r3, [sp, #18]
 8019b32:	f7fb fb4d 	bl	80151d0 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 8019b36:	9a01      	ldr	r2, [sp, #4]
 8019b38:	b11a      	cbz	r2, 8019b42 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 8019b3a:	4621      	mov	r1, r4
 8019b3c:	4628      	mov	r0, r5
 8019b3e:	f7ff fed5 	bl	80198ec <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8019b42:	b006      	add	sp, #24
 8019b44:	bd70      	pop	{r4, r5, r6, pc}

08019b46 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 8019b46:	4602      	mov	r2, r0
 8019b48:	b530      	push	{r4, r5, lr}
 8019b4a:	4604      	mov	r4, r0
 8019b4c:	b085      	sub	sp, #20
 8019b4e:	f852 0f08 	ldr.w	r0, [r2, #8]!
 8019b52:	460d      	mov	r5, r1
 8019b54:	466b      	mov	r3, sp
 8019b56:	6851      	ldr	r1, [r2, #4]
 8019b58:	c303      	stmia	r3!, {r0, r1}
 8019b5a:	4629      	mov	r1, r5
 8019b5c:	4668      	mov	r0, sp
 8019b5e:	f7fb fa5f 	bl	8015020 <_ZN8touchgfx4RectaNERKS0_>
 8019b62:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8019b66:	b12b      	cbz	r3, 8019b74 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 8019b68:	4669      	mov	r1, sp
 8019b6a:	4620      	mov	r0, r4
 8019b6c:	f7ff ffbf 	bl	8019aee <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 8019b70:	b005      	add	sp, #20
 8019b72:	bd30      	pop	{r4, r5, pc}
 8019b74:	3404      	adds	r4, #4
 8019b76:	a802      	add	r0, sp, #8
 8019b78:	4621      	mov	r1, r4
 8019b7a:	f7ff fc63 	bl	8019444 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019b7e:	f8bd 3000 	ldrh.w	r3, [sp]
 8019b82:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8019b86:	4669      	mov	r1, sp
 8019b88:	4620      	mov	r0, r4
 8019b8a:	1a9b      	subs	r3, r3, r2
 8019b8c:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8019b90:	f8ad 3000 	strh.w	r3, [sp]
 8019b94:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8019b98:	1a9b      	subs	r3, r3, r2
 8019b9a:	f8ad 3002 	strh.w	r3, [sp, #2]
 8019b9e:	f7fb fade 	bl	801515e <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 8019ba2:	e7e5      	b.n	8019b70 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

08019ba4 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 8019ba4:	460b      	mov	r3, r1
 8019ba6:	680a      	ldr	r2, [r1, #0]
 8019ba8:	1d01      	adds	r1, r0, #4
 8019baa:	6992      	ldr	r2, [r2, #24]
 8019bac:	4618      	mov	r0, r3
 8019bae:	4710      	bx	r2

08019bb0 <_ZN8touchgfx12TextProviderC1Ev>:
 8019bb0:	b538      	push	{r3, r4, r5, lr}
 8019bb2:	2500      	movs	r5, #0
 8019bb4:	2302      	movs	r3, #2
 8019bb6:	4604      	mov	r4, r0
 8019bb8:	220e      	movs	r2, #14
 8019bba:	7403      	strb	r3, [r0, #16]
 8019bbc:	4629      	mov	r1, r5
 8019bbe:	6145      	str	r5, [r0, #20]
 8019bc0:	7605      	strb	r5, [r0, #24]
 8019bc2:	83c5      	strh	r5, [r0, #30]
 8019bc4:	8405      	strh	r5, [r0, #32]
 8019bc6:	86c5      	strh	r5, [r0, #54]	; 0x36
 8019bc8:	8705      	strh	r5, [r0, #56]	; 0x38
 8019bca:	87c5      	strh	r5, [r0, #62]	; 0x3e
 8019bcc:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 8019bd0:	e9c0 5500 	strd	r5, r5, [r0]
 8019bd4:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 8019bd8:	304c      	adds	r0, #76	; 0x4c
 8019bda:	f00c fe8f 	bl	80268fc <memset>
 8019bde:	2301      	movs	r3, #1
 8019be0:	4620      	mov	r0, r4
 8019be2:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 8019be6:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8019bea:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 8019bee:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 8019bf2:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 8019bf6:	f7f5 fca3 	bl	800f540 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 8019bfa:	4620      	mov	r0, r4
 8019bfc:	bd38      	pop	{r3, r4, r5, pc}

08019bfe <_ZN8touchgfx12TextProvider11endOfStringEv>:
 8019bfe:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8019c00:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8019c04:	8c40      	ldrh	r0, [r0, #34]	; 0x22
 8019c06:	fab0 f080 	clz	r0, r0
 8019c0a:	0940      	lsrs	r0, r0, #5
 8019c0c:	4770      	bx	lr

08019c0e <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 8019c0e:	b530      	push	{r4, r5, lr}
 8019c10:	2500      	movs	r5, #0
 8019c12:	2401      	movs	r4, #1
 8019c14:	6843      	ldr	r3, [r0, #4]
 8019c16:	b913      	cbnz	r3, 8019c1e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 8019c18:	6803      	ldr	r3, [r0, #0]
 8019c1a:	b313      	cbz	r3, 8019c62 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8019c1c:	6043      	str	r3, [r0, #4]
 8019c1e:	7e03      	ldrb	r3, [r0, #24]
 8019c20:	b143      	cbz	r3, 8019c34 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 8019c22:	6943      	ldr	r3, [r0, #20]
 8019c24:	b12b      	cbz	r3, 8019c32 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8019c26:	881a      	ldrh	r2, [r3, #0]
 8019c28:	b11a      	cbz	r2, 8019c32 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8019c2a:	1c9a      	adds	r2, r3, #2
 8019c2c:	6142      	str	r2, [r0, #20]
 8019c2e:	8818      	ldrh	r0, [r3, #0]
 8019c30:	bd30      	pop	{r4, r5, pc}
 8019c32:	7605      	strb	r5, [r0, #24]
 8019c34:	6843      	ldr	r3, [r0, #4]
 8019c36:	8819      	ldrh	r1, [r3, #0]
 8019c38:	b199      	cbz	r1, 8019c62 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8019c3a:	1c9a      	adds	r2, r3, #2
 8019c3c:	2902      	cmp	r1, #2
 8019c3e:	6042      	str	r2, [r0, #4]
 8019c40:	d1f5      	bne.n	8019c2e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 8019c42:	7c03      	ldrb	r3, [r0, #16]
 8019c44:	2b01      	cmp	r3, #1
 8019c46:	d8e5      	bhi.n	8019c14 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8019c48:	1c5a      	adds	r2, r3, #1
 8019c4a:	3302      	adds	r3, #2
 8019c4c:	7402      	strb	r2, [r0, #16]
 8019c4e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8019c52:	6143      	str	r3, [r0, #20]
 8019c54:	2b00      	cmp	r3, #0
 8019c56:	d0dd      	beq.n	8019c14 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8019c58:	881b      	ldrh	r3, [r3, #0]
 8019c5a:	2b00      	cmp	r3, #0
 8019c5c:	d0da      	beq.n	8019c14 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8019c5e:	7604      	strb	r4, [r0, #24]
 8019c60:	e7d8      	b.n	8019c14 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8019c62:	2000      	movs	r0, #0
 8019c64:	e7e4      	b.n	8019c30 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

08019c66 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 8019c66:	6001      	str	r1, [r0, #0]
 8019c68:	2100      	movs	r1, #0
 8019c6a:	b430      	push	{r4, r5}
 8019c6c:	6041      	str	r1, [r0, #4]
 8019c6e:	6815      	ldr	r5, [r2, #0]
 8019c70:	6085      	str	r5, [r0, #8]
 8019c72:	6852      	ldr	r2, [r2, #4]
 8019c74:	6443      	str	r3, [r0, #68]	; 0x44
 8019c76:	9b02      	ldr	r3, [sp, #8]
 8019c78:	60c2      	str	r2, [r0, #12]
 8019c7a:	7401      	strb	r1, [r0, #16]
 8019c7c:	6141      	str	r1, [r0, #20]
 8019c7e:	7601      	strb	r1, [r0, #24]
 8019c80:	8701      	strh	r1, [r0, #56]	; 0x38
 8019c82:	8401      	strh	r1, [r0, #32]
 8019c84:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 8019c88:	6483      	str	r3, [r0, #72]	; 0x48
 8019c8a:	bc30      	pop	{r4, r5}
 8019c8c:	f7f5 bc58 	b.w	800f540 <_ZN8touchgfx12TextProvider18initializeInternalEv>

08019c90 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>:
 8019c90:	b408      	push	{r3}
 8019c92:	b510      	push	{r4, lr}
 8019c94:	b085      	sub	sp, #20
 8019c96:	ac07      	add	r4, sp, #28
 8019c98:	f854 3b04 	ldr.w	r3, [r4], #4
 8019c9c:	9300      	str	r3, [sp, #0]
 8019c9e:	4613      	mov	r3, r2
 8019ca0:	4622      	mov	r2, r4
 8019ca2:	9403      	str	r4, [sp, #12]
 8019ca4:	f7ff ffdf 	bl	8019c66 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8019ca8:	b005      	add	sp, #20
 8019caa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019cae:	b001      	add	sp, #4
 8019cb0:	4770      	bx	lr

08019cb2 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 8019cb2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019cb4:	4605      	mov	r5, r0
 8019cb6:	4608      	mov	r0, r1
 8019cb8:	b1f1      	cbz	r1, 8019cf8 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 8019cba:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 8019cbe:	460b      	mov	r3, r1
 8019cc0:	f101 0708 	add.w	r7, r1, #8
 8019cc4:	4622      	mov	r2, r4
 8019cc6:	6818      	ldr	r0, [r3, #0]
 8019cc8:	3308      	adds	r3, #8
 8019cca:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8019cce:	4626      	mov	r6, r4
 8019cd0:	42bb      	cmp	r3, r7
 8019cd2:	c603      	stmia	r6!, {r0, r1}
 8019cd4:	4634      	mov	r4, r6
 8019cd6:	d1f6      	bne.n	8019cc6 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 8019cd8:	6818      	ldr	r0, [r3, #0]
 8019cda:	6030      	str	r0, [r6, #0]
 8019cdc:	4610      	mov	r0, r2
 8019cde:	889b      	ldrh	r3, [r3, #4]
 8019ce0:	80b3      	strh	r3, [r6, #4]
 8019ce2:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 8019ce6:	015b      	lsls	r3, r3, #5
 8019ce8:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8019cec:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 8019cf0:	430b      	orrs	r3, r1
 8019cf2:	425b      	negs	r3, r3
 8019cf4:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 8019cf8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019cfa <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 8019cfa:	b538      	push	{r3, r4, r5, lr}
 8019cfc:	460c      	mov	r4, r1
 8019cfe:	6811      	ldr	r1, [r2, #0]
 8019d00:	4610      	mov	r0, r2
 8019d02:	68cd      	ldr	r5, [r1, #12]
 8019d04:	4619      	mov	r1, r3
 8019d06:	47a8      	blx	r5
 8019d08:	2800      	cmp	r0, #0
 8019d0a:	bf08      	it	eq
 8019d0c:	4620      	moveq	r0, r4
 8019d0e:	bd38      	pop	{r3, r4, r5, pc}

08019d10 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 8019d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019d12:	4604      	mov	r4, r0
 8019d14:	4615      	mov	r5, r2
 8019d16:	4608      	mov	r0, r1
 8019d18:	b93a      	cbnz	r2, 8019d2a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 8019d1a:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 8019d1e:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8019d22:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 8019d26:	4628      	mov	r0, r5
 8019d28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019d2a:	f892 c00d 	ldrb.w	ip, [r2, #13]
 8019d2e:	f46f 6763 	mvn.w	r7, #3632	; 0xe30
 8019d32:	8893      	ldrh	r3, [r2, #4]
 8019d34:	ea4f 160c 	mov.w	r6, ip, lsl #4
 8019d38:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8019d3c:	79ee      	ldrb	r6, [r5, #7]
 8019d3e:	4316      	orrs	r6, r2
 8019d40:	19da      	adds	r2, r3, r7
 8019d42:	b291      	uxth	r1, r2
 8019d44:	b2b7      	uxth	r7, r6
 8019d46:	291d      	cmp	r1, #29
 8019d48:	d87b      	bhi.n	8019e42 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 8019d4a:	2201      	movs	r2, #1
 8019d4c:	10f6      	asrs	r6, r6, #3
 8019d4e:	408a      	lsls	r2, r1
 8019d50:	4974      	ldr	r1, [pc, #464]	; (8019f24 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
 8019d52:	420a      	tst	r2, r1
 8019d54:	d12e      	bne.n	8019db4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 8019d56:	f412 7f60 	tst.w	r2, #896	; 0x380
 8019d5a:	d072      	beq.n	8019e42 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 8019d5c:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 8019d60:	462b      	mov	r3, r5
 8019d62:	f105 0e08 	add.w	lr, r5, #8
 8019d66:	4615      	mov	r5, r2
 8019d68:	6818      	ldr	r0, [r3, #0]
 8019d6a:	3308      	adds	r3, #8
 8019d6c:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8019d70:	4694      	mov	ip, r2
 8019d72:	4573      	cmp	r3, lr
 8019d74:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8019d78:	4662      	mov	r2, ip
 8019d7a:	d1f5      	bne.n	8019d68 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 8019d7c:	6818      	ldr	r0, [r3, #0]
 8019d7e:	f8cc 0000 	str.w	r0, [ip]
 8019d82:	889b      	ldrh	r3, [r3, #4]
 8019d84:	f8ac 3004 	strh.w	r3, [ip, #4]
 8019d88:	b2b3      	uxth	r3, r6
 8019d8a:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8019d8e:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 8019d92:	1aca      	subs	r2, r1, r3
 8019d94:	1bcf      	subs	r7, r1, r7
 8019d96:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 8019d9a:	b292      	uxth	r2, r2
 8019d9c:	1afb      	subs	r3, r7, r3
 8019d9e:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 8019da2:	10d2      	asrs	r2, r2, #3
 8019da4:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8019da8:	4302      	orrs	r2, r0
 8019daa:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 8019dae:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 8019db2:	e7b8      	b.n	8019d26 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 8019db4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8019db6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8019dba:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 8019dbc:	f640 6333 	movw	r3, #3635	; 0xe33
 8019dc0:	4299      	cmp	r1, r3
 8019dc2:	d110      	bne.n	8019de6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd6>
 8019dc4:	6803      	ldr	r3, [r0, #0]
 8019dc6:	68db      	ldr	r3, [r3, #12]
 8019dc8:	4798      	blx	r3
 8019dca:	7b41      	ldrb	r1, [r0, #13]
 8019dcc:	00cb      	lsls	r3, r1, #3
 8019dce:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8019dd2:	7a03      	ldrb	r3, [r0, #8]
 8019dd4:	0648      	lsls	r0, r1, #25
 8019dd6:	ea43 0302 	orr.w	r3, r3, r2
 8019dda:	bf44      	itt	mi
 8019ddc:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8019de0:	b21b      	sxthmi	r3, r3
 8019de2:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8019de6:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8019dea:	462a      	mov	r2, r5
 8019dec:	f105 0c08 	add.w	ip, r5, #8
 8019df0:	443b      	add	r3, r7
 8019df2:	4433      	add	r3, r6
 8019df4:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 8019df8:	b29b      	uxth	r3, r3
 8019dfa:	4635      	mov	r5, r6
 8019dfc:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8019e00:	6810      	ldr	r0, [r2, #0]
 8019e02:	3208      	adds	r2, #8
 8019e04:	f852 1c04 	ldr.w	r1, [r2, #-4]
 8019e08:	4637      	mov	r7, r6
 8019e0a:	4562      	cmp	r2, ip
 8019e0c:	c703      	stmia	r7!, {r0, r1}
 8019e0e:	463e      	mov	r6, r7
 8019e10:	d1f6      	bne.n	8019e00 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf0>
 8019e12:	6810      	ldr	r0, [r2, #0]
 8019e14:	6038      	str	r0, [r7, #0]
 8019e16:	8892      	ldrh	r2, [r2, #4]
 8019e18:	80ba      	strh	r2, [r7, #4]
 8019e1a:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8019e1e:	10db      	asrs	r3, r3, #3
 8019e20:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8019e24:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8019e28:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8019e2c:	4313      	orrs	r3, r2
 8019e2e:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 8019e32:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8019e36:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 8019e3a:	1a9b      	subs	r3, r3, r2
 8019e3c:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 8019e40:	e771      	b.n	8019d26 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 8019e42:	f023 0204 	bic.w	r2, r3, #4
 8019e46:	f640 611b 	movw	r1, #3611	; 0xe1b
 8019e4a:	428a      	cmp	r2, r1
 8019e4c:	d003      	beq.n	8019e56 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x146>
 8019e4e:	f640 621d 	movw	r2, #3613	; 0xe1d
 8019e52:	4293      	cmp	r3, r2
 8019e54:	d120      	bne.n	8019e98 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x188>
 8019e56:	3b01      	subs	r3, #1
 8019e58:	4602      	mov	r2, r0
 8019e5a:	4629      	mov	r1, r5
 8019e5c:	4620      	mov	r0, r4
 8019e5e:	b29b      	uxth	r3, r3
 8019e60:	f7ff ff4b 	bl	8019cfa <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8019e64:	7b41      	ldrb	r1, [r0, #13]
 8019e66:	00cb      	lsls	r3, r1, #3
 8019e68:	0649      	lsls	r1, r1, #25
 8019e6a:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8019e6e:	7a03      	ldrb	r3, [r0, #8]
 8019e70:	ea43 0302 	orr.w	r3, r3, r2
 8019e74:	bf44      	itt	mi
 8019e76:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8019e7a:	b21b      	sxthmi	r3, r3
 8019e7c:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8019e80:	7b6b      	ldrb	r3, [r5, #13]
 8019e82:	7aaa      	ldrb	r2, [r5, #10]
 8019e84:	005b      	lsls	r3, r3, #1
 8019e86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019e8a:	4313      	orrs	r3, r2
 8019e8c:	115a      	asrs	r2, r3, #5
 8019e8e:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 8019e92:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 8019e96:	e035      	b.n	8019f04 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f4>
 8019e98:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 8019e9c:	f01c 0f40 	tst.w	ip, #64	; 0x40
 8019ea0:	f402 7180 	and.w	r1, r2, #256	; 0x100
 8019ea4:	7a2a      	ldrb	r2, [r5, #8]
 8019ea6:	ea42 0201 	orr.w	r2, r2, r1
 8019eaa:	f640 6109 	movw	r1, #3593	; 0xe09
 8019eae:	bf1c      	itt	ne
 8019eb0:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 8019eb4:	b212      	sxthne	r2, r2
 8019eb6:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 8019eba:	f023 0210 	bic.w	r2, r3, #16
 8019ebe:	428a      	cmp	r2, r1
 8019ec0:	d003      	beq.n	8019eca <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
 8019ec2:	f640 6213 	movw	r2, #3603	; 0xe13
 8019ec6:	4293      	cmp	r3, r2
 8019ec8:	d129      	bne.n	8019f1e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20e>
 8019eca:	7b6e      	ldrb	r6, [r5, #13]
 8019ecc:	4629      	mov	r1, r5
 8019ece:	0076      	lsls	r6, r6, #1
 8019ed0:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8019ed4:	7aae      	ldrb	r6, [r5, #10]
 8019ed6:	4316      	orrs	r6, r2
 8019ed8:	f640 6213 	movw	r2, #3603	; 0xe13
 8019edc:	4293      	cmp	r3, r2
 8019ede:	4602      	mov	r2, r0
 8019ee0:	4620      	mov	r0, r4
 8019ee2:	bf16      	itet	ne
 8019ee4:	f103 33ff 	addne.w	r3, r3, #4294967295
 8019ee8:	f640 630c 	movweq	r3, #3596	; 0xe0c
 8019eec:	b29b      	uxthne	r3, r3
 8019eee:	f7ff ff04 	bl	8019cfa <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8019ef2:	7b43      	ldrb	r3, [r0, #13]
 8019ef4:	7a82      	ldrb	r2, [r0, #10]
 8019ef6:	005b      	lsls	r3, r3, #1
 8019ef8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019efc:	4313      	orrs	r3, r2
 8019efe:	1af6      	subs	r6, r6, r3
 8019f00:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 8019f04:	7b69      	ldrb	r1, [r5, #13]
 8019f06:	00cb      	lsls	r3, r1, #3
 8019f08:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8019f0c:	7a2b      	ldrb	r3, [r5, #8]
 8019f0e:	4313      	orrs	r3, r2
 8019f10:	064a      	lsls	r2, r1, #25
 8019f12:	bf44      	itt	mi
 8019f14:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8019f18:	b21b      	sxthmi	r3, r3
 8019f1a:	1bdb      	subs	r3, r3, r7
 8019f1c:	e747      	b.n	8019dae <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 8019f1e:	2300      	movs	r3, #0
 8019f20:	e7b7      	b.n	8019e92 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x182>
 8019f22:	bf00      	nop
 8019f24:	3fc00079 	.word	0x3fc00079

08019f28 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 8019f28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019f2c:	4604      	mov	r4, r0
 8019f2e:	b942      	cbnz	r2, 8019f42 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 8019f30:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8019f34:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 8019f38:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8019f3c:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 8019f40:	e047      	b.n	8019fd2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8019f42:	7b51      	ldrb	r1, [r2, #13]
 8019f44:	8893      	ldrh	r3, [r2, #4]
 8019f46:	010d      	lsls	r5, r1, #4
 8019f48:	f405 7080 	and.w	r0, r5, #256	; 0x100
 8019f4c:	79d5      	ldrb	r5, [r2, #7]
 8019f4e:	4305      	orrs	r5, r0
 8019f50:	2d04      	cmp	r5, #4
 8019f52:	bfcc      	ite	gt
 8019f54:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 8019f58:	f04f 0e01 	movle.w	lr, #1
 8019f5c:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 8019f60:	f200 80ab 	bhi.w	801a0ba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 8019f64:	f240 60e7 	movw	r0, #1767	; 0x6e7
 8019f68:	4283      	cmp	r3, r0
 8019f6a:	d216      	bcs.n	8019f9a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019f6c:	f240 605b 	movw	r0, #1627	; 0x65b
 8019f70:	4283      	cmp	r3, r0
 8019f72:	d859      	bhi.n	801a028 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 8019f74:	f240 6057 	movw	r0, #1623	; 0x657
 8019f78:	4283      	cmp	r3, r0
 8019f7a:	d20e      	bcs.n	8019f9a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019f7c:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 8019f80:	d24a      	bcs.n	801a018 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 8019f82:	f240 604e 	movw	r0, #1614	; 0x64e
 8019f86:	4283      	cmp	r3, r0
 8019f88:	d207      	bcs.n	8019f9a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019f8a:	f240 601a 	movw	r0, #1562	; 0x61a
 8019f8e:	4283      	cmp	r3, r0
 8019f90:	d02a      	beq.n	8019fe8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8019f92:	d821      	bhi.n	8019fd8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 8019f94:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 8019f98:	d35b      	bcc.n	801a052 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8019f9a:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 8019f9e:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8019fa2:	f040 80d0 	bne.w	801a146 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 8019fa6:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 8019faa:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8019fae:	f040 80ca 	bne.w	801a146 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 8019fb2:	00cb      	lsls	r3, r1, #3
 8019fb4:	0649      	lsls	r1, r1, #25
 8019fb6:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8019fba:	7a13      	ldrb	r3, [r2, #8]
 8019fbc:	ea43 0300 	orr.w	r3, r3, r0
 8019fc0:	bf44      	itt	mi
 8019fc2:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8019fc6:	b21b      	sxthmi	r3, r3
 8019fc8:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8019fcc:	1b5d      	subs	r5, r3, r5
 8019fce:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8019fd2:	4610      	mov	r0, r2
 8019fd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019fd8:	f240 604b 	movw	r0, #1611	; 0x64b
 8019fdc:	4283      	cmp	r3, r0
 8019fde:	d338      	bcc.n	801a052 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8019fe0:	f240 604c 	movw	r0, #1612	; 0x64c
 8019fe4:	4283      	cmp	r3, r0
 8019fe6:	d9d8      	bls.n	8019f9a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019fe8:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 8019fec:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 8019ff0:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8019ff4:	f040 80f3 	bne.w	801a1de <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 8019ff8:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8019ffc:	f040 80ef 	bne.w	801a1de <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 801a000:	00cb      	lsls	r3, r1, #3
 801a002:	064e      	lsls	r6, r1, #25
 801a004:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801a008:	7a13      	ldrb	r3, [r2, #8]
 801a00a:	ea43 0300 	orr.w	r3, r3, r0
 801a00e:	bf44      	itt	mi
 801a010:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801a014:	b21b      	sxthmi	r3, r3
 801a016:	e7d9      	b.n	8019fcc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 801a018:	f240 6054 	movw	r0, #1620	; 0x654
 801a01c:	4283      	cmp	r3, r0
 801a01e:	d8e3      	bhi.n	8019fe8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801a020:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801a024:	d9e0      	bls.n	8019fe8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801a026:	e7b8      	b.n	8019f9a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801a028:	f240 6074 	movw	r0, #1652	; 0x674
 801a02c:	4283      	cmp	r3, r0
 801a02e:	d0b4      	beq.n	8019f9a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801a030:	d82d      	bhi.n	801a08e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 801a032:	f240 605e 	movw	r0, #1630	; 0x65e
 801a036:	4283      	cmp	r3, r0
 801a038:	d804      	bhi.n	801a044 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 801a03a:	f240 605d 	movw	r0, #1629	; 0x65d
 801a03e:	4283      	cmp	r3, r0
 801a040:	d3d2      	bcc.n	8019fe8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801a042:	e7aa      	b.n	8019f9a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801a044:	f240 605f 	movw	r0, #1631	; 0x65f
 801a048:	4283      	cmp	r3, r0
 801a04a:	d0cd      	beq.n	8019fe8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801a04c:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 801a050:	d0a3      	beq.n	8019f9a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801a052:	00cb      	lsls	r3, r1, #3
 801a054:	0649      	lsls	r1, r1, #25
 801a056:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801a05a:	7a13      	ldrb	r3, [r2, #8]
 801a05c:	ea43 0300 	orr.w	r3, r3, r0
 801a060:	bf44      	itt	mi
 801a062:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801a066:	b21b      	sxthmi	r3, r3
 801a068:	1b5d      	subs	r5, r3, r5
 801a06a:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801a06e:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801a072:	7b53      	ldrb	r3, [r2, #13]
 801a074:	015b      	lsls	r3, r3, #5
 801a076:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801a07a:	7993      	ldrb	r3, [r2, #6]
 801a07c:	430b      	orrs	r3, r1
 801a07e:	2105      	movs	r1, #5
 801a080:	005b      	lsls	r3, r3, #1
 801a082:	fb93 f3f1 	sdiv	r3, r3, r1
 801a086:	f992 1009 	ldrsb.w	r1, [r2, #9]
 801a08a:	440b      	add	r3, r1
 801a08c:	e756      	b.n	8019f3c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 801a08e:	f240 60e2 	movw	r0, #1762	; 0x6e2
 801a092:	4283      	cmp	r3, r0
 801a094:	d809      	bhi.n	801a0aa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 801a096:	f240 60df 	movw	r0, #1759	; 0x6df
 801a09a:	4283      	cmp	r3, r0
 801a09c:	f4bf af7d 	bcs.w	8019f9a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801a0a0:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 801a0a4:	2b05      	cmp	r3, #5
 801a0a6:	d8d4      	bhi.n	801a052 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801a0a8:	e777      	b.n	8019f9a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801a0aa:	f240 60e3 	movw	r0, #1763	; 0x6e3
 801a0ae:	4283      	cmp	r3, r0
 801a0b0:	d09a      	beq.n	8019fe8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801a0b2:	f240 60e4 	movw	r0, #1764	; 0x6e4
 801a0b6:	4283      	cmp	r3, r0
 801a0b8:	e7ca      	b.n	801a050 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801a0ba:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 801a0be:	d22b      	bcs.n	801a118 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 801a0c0:	f640 00ed 	movw	r0, #2285	; 0x8ed
 801a0c4:	4283      	cmp	r3, r0
 801a0c6:	d28f      	bcs.n	8019fe8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801a0c8:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801a0cc:	4283      	cmp	r3, r0
 801a0ce:	d816      	bhi.n	801a0fe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 801a0d0:	f640 00e4 	movw	r0, #2276	; 0x8e4
 801a0d4:	4283      	cmp	r3, r0
 801a0d6:	f4bf af60 	bcs.w	8019f9a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801a0da:	f240 60ec 	movw	r0, #1772	; 0x6ec
 801a0de:	4283      	cmp	r3, r0
 801a0e0:	d80a      	bhi.n	801a0f8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 801a0e2:	f240 60eb 	movw	r0, #1771	; 0x6eb
 801a0e6:	4283      	cmp	r3, r0
 801a0e8:	f4bf af57 	bcs.w	8019f9a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801a0ec:	f240 60ea 	movw	r0, #1770	; 0x6ea
 801a0f0:	4283      	cmp	r3, r0
 801a0f2:	f43f af79 	beq.w	8019fe8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801a0f6:	e7ac      	b.n	801a052 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801a0f8:	f240 60ed 	movw	r0, #1773	; 0x6ed
 801a0fc:	e7f8      	b.n	801a0f0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 801a0fe:	f640 00e8 	movw	r0, #2280	; 0x8e8
 801a102:	4283      	cmp	r3, r0
 801a104:	d802      	bhi.n	801a10c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 801a106:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801a10a:	e798      	b.n	801a03e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 801a10c:	f640 00e9 	movw	r0, #2281	; 0x8e9
 801a110:	4283      	cmp	r3, r0
 801a112:	f47f af42 	bne.w	8019f9a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801a116:	e767      	b.n	8019fe8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801a118:	f640 00f6 	movw	r0, #2294	; 0x8f6
 801a11c:	4283      	cmp	r3, r0
 801a11e:	f43f af63 	beq.w	8019fe8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801a122:	d802      	bhi.n	801a12a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 801a124:	f640 00f2 	movw	r0, #2290	; 0x8f2
 801a128:	e7f2      	b.n	801a110 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 801a12a:	f640 00fa 	movw	r0, #2298	; 0x8fa
 801a12e:	4283      	cmp	r3, r0
 801a130:	d805      	bhi.n	801a13e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 801a132:	f640 00f9 	movw	r0, #2297	; 0x8f9
 801a136:	4283      	cmp	r3, r0
 801a138:	f4ff af2f 	bcc.w	8019f9a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801a13c:	e754      	b.n	8019fe8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801a13e:	f640 00fe 	movw	r0, #2302	; 0x8fe
 801a142:	4283      	cmp	r3, r0
 801a144:	e7af      	b.n	801a0a6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 801a146:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 801a14a:	4617      	mov	r7, r2
 801a14c:	f102 0808 	add.w	r8, r2, #8
 801a150:	4666      	mov	r6, ip
 801a152:	6838      	ldr	r0, [r7, #0]
 801a154:	3708      	adds	r7, #8
 801a156:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801a15a:	46e6      	mov	lr, ip
 801a15c:	4547      	cmp	r7, r8
 801a15e:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801a162:	46f4      	mov	ip, lr
 801a164:	d1f5      	bne.n	801a152 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 801a166:	6838      	ldr	r0, [r7, #0]
 801a168:	f8ce 0000 	str.w	r0, [lr]
 801a16c:	88b9      	ldrh	r1, [r7, #4]
 801a16e:	f8ae 1004 	strh.w	r1, [lr, #4]
 801a172:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 801a176:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801a17a:	d009      	beq.n	801a190 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
 801a17c:	7b51      	ldrb	r1, [r2, #13]
 801a17e:	7992      	ldrb	r2, [r2, #6]
 801a180:	0149      	lsls	r1, r1, #5
 801a182:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801a186:	4311      	orrs	r1, r2
 801a188:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801a18c:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 801a190:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801a194:	b2ad      	uxth	r5, r5
 801a196:	d00d      	beq.n	801a1b4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
 801a198:	442b      	add	r3, r5
 801a19a:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801a19e:	b29b      	uxth	r3, r3
 801a1a0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801a1a4:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801a1a8:	10db      	asrs	r3, r3, #3
 801a1aa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801a1ae:	4313      	orrs	r3, r2
 801a1b0:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801a1b4:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 801a1b8:	00cb      	lsls	r3, r1, #3
 801a1ba:	064f      	lsls	r7, r1, #25
 801a1bc:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801a1c0:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801a1c4:	ea43 0302 	orr.w	r3, r3, r2
 801a1c8:	bf44      	itt	mi
 801a1ca:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801a1ce:	b21b      	sxthmi	r3, r3
 801a1d0:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801a1d4:	1b5b      	subs	r3, r3, r5
 801a1d6:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 801a1da:	4632      	mov	r2, r6
 801a1dc:	e6f9      	b.n	8019fd2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801a1de:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 801a1e2:	4617      	mov	r7, r2
 801a1e4:	f102 0908 	add.w	r9, r2, #8
 801a1e8:	4666      	mov	r6, ip
 801a1ea:	6838      	ldr	r0, [r7, #0]
 801a1ec:	3708      	adds	r7, #8
 801a1ee:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801a1f2:	46e0      	mov	r8, ip
 801a1f4:	454f      	cmp	r7, r9
 801a1f6:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 801a1fa:	46c4      	mov	ip, r8
 801a1fc:	d1f5      	bne.n	801a1ea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
 801a1fe:	6838      	ldr	r0, [r7, #0]
 801a200:	f8c8 0000 	str.w	r0, [r8]
 801a204:	88b9      	ldrh	r1, [r7, #4]
 801a206:	f8a8 1004 	strh.w	r1, [r8, #4]
 801a20a:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 801a20e:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801a212:	d009      	beq.n	801a228 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
 801a214:	7b51      	ldrb	r1, [r2, #13]
 801a216:	7992      	ldrb	r2, [r2, #6]
 801a218:	0149      	lsls	r1, r1, #5
 801a21a:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801a21e:	4311      	orrs	r1, r2
 801a220:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801a224:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 801a228:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801a22c:	d00e      	beq.n	801a24c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 801a22e:	eba3 030e 	sub.w	r3, r3, lr
 801a232:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801a236:	b29b      	uxth	r3, r3
 801a238:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801a23c:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801a240:	10db      	asrs	r3, r3, #3
 801a242:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801a246:	4313      	orrs	r3, r2
 801a248:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801a24c:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 801a250:	00cb      	lsls	r3, r1, #3
 801a252:	0648      	lsls	r0, r1, #25
 801a254:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801a258:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801a25c:	ea43 0302 	orr.w	r3, r3, r2
 801a260:	bf44      	itt	mi
 801a262:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801a266:	b21b      	sxthmi	r3, r3
 801a268:	1b5d      	subs	r5, r3, r5
 801a26a:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801a26e:	e7b4      	b.n	801a1da <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

0801a270 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801a270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a274:	461e      	mov	r6, r3
 801a276:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801a278:	4604      	mov	r4, r0
 801a27a:	4617      	mov	r7, r2
 801a27c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801a280:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801a284:	f7f5 f8b6 	bl	800f3f4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801a288:	4605      	mov	r5, r0
 801a28a:	b918      	cbnz	r0, 801a294 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 801a28c:	6030      	str	r0, [r6, #0]
 801a28e:	4628      	mov	r0, r5
 801a290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a294:	683b      	ldr	r3, [r7, #0]
 801a296:	4601      	mov	r1, r0
 801a298:	4638      	mov	r0, r7
 801a29a:	68db      	ldr	r3, [r3, #12]
 801a29c:	4798      	blx	r3
 801a29e:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801a2a2:	4602      	mov	r2, r0
 801a2a4:	6030      	str	r0, [r6, #0]
 801a2a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801a2aa:	d213      	bcs.n	801a2d4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 801a2ac:	4643      	mov	r3, r8
 801a2ae:	4639      	mov	r1, r7
 801a2b0:	4620      	mov	r0, r4
 801a2b2:	f7ff fe39 	bl	8019f28 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801a2b6:	6030      	str	r0, [r6, #0]
 801a2b8:	6833      	ldr	r3, [r6, #0]
 801a2ba:	b143      	cbz	r3, 801a2ce <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 801a2bc:	7b5a      	ldrb	r2, [r3, #13]
 801a2be:	7a9b      	ldrb	r3, [r3, #10]
 801a2c0:	0052      	lsls	r2, r2, #1
 801a2c2:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801a2c6:	4313      	orrs	r3, r2
 801a2c8:	bf0c      	ite	eq
 801a2ca:	2301      	moveq	r3, #1
 801a2cc:	2300      	movne	r3, #0
 801a2ce:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 801a2d2:	e7dc      	b.n	801a28e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 801a2d4:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 801a2d8:	b29b      	uxth	r3, r3
 801a2da:	2b7f      	cmp	r3, #127	; 0x7f
 801a2dc:	d804      	bhi.n	801a2e8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 801a2de:	4639      	mov	r1, r7
 801a2e0:	4620      	mov	r0, r4
 801a2e2:	f7ff fd15 	bl	8019d10 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801a2e6:	e7e6      	b.n	801a2b6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 801a2e8:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 801a2ec:	2b00      	cmp	r3, #0
 801a2ee:	d0e3      	beq.n	801a2b8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 801a2f0:	f640 1302 	movw	r3, #2306	; 0x902
 801a2f4:	429d      	cmp	r5, r3
 801a2f6:	d1df      	bne.n	801a2b8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 801a2f8:	4601      	mov	r1, r0
 801a2fa:	4620      	mov	r0, r4
 801a2fc:	f7ff fcd9 	bl	8019cb2 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801a300:	e7d9      	b.n	801a2b6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

0801a302 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 801a302:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a306:	461e      	mov	r6, r3
 801a308:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801a30a:	4604      	mov	r4, r0
 801a30c:	4617      	mov	r7, r2
 801a30e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801a312:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801a316:	f7f5 f86d 	bl	800f3f4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801a31a:	4605      	mov	r5, r0
 801a31c:	b918      	cbnz	r0, 801a326 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x24>
 801a31e:	6030      	str	r0, [r6, #0]
 801a320:	4628      	mov	r0, r5
 801a322:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a326:	683b      	ldr	r3, [r7, #0]
 801a328:	4601      	mov	r1, r0
 801a32a:	4638      	mov	r0, r7
 801a32c:	f8d3 9008 	ldr.w	r9, [r3, #8]
 801a330:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801a334:	47c8      	blx	r9
 801a336:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801a33a:	4602      	mov	r2, r0
 801a33c:	6030      	str	r0, [r6, #0]
 801a33e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801a342:	d213      	bcs.n	801a36c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
 801a344:	4643      	mov	r3, r8
 801a346:	4639      	mov	r1, r7
 801a348:	4620      	mov	r0, r4
 801a34a:	f7ff fded 	bl	8019f28 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801a34e:	6030      	str	r0, [r6, #0]
 801a350:	6833      	ldr	r3, [r6, #0]
 801a352:	b143      	cbz	r3, 801a366 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x64>
 801a354:	7b5a      	ldrb	r2, [r3, #13]
 801a356:	7a9b      	ldrb	r3, [r3, #10]
 801a358:	0052      	lsls	r2, r2, #1
 801a35a:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801a35e:	4313      	orrs	r3, r2
 801a360:	bf0c      	ite	eq
 801a362:	2301      	moveq	r3, #1
 801a364:	2300      	movne	r3, #0
 801a366:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 801a36a:	e7d9      	b.n	801a320 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1e>
 801a36c:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 801a370:	b29b      	uxth	r3, r3
 801a372:	2b7f      	cmp	r3, #127	; 0x7f
 801a374:	d804      	bhi.n	801a380 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7e>
 801a376:	4639      	mov	r1, r7
 801a378:	4620      	mov	r0, r4
 801a37a:	f7ff fcc9 	bl	8019d10 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801a37e:	e7e6      	b.n	801a34e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>
 801a380:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 801a384:	2b00      	cmp	r3, #0
 801a386:	d0e3      	beq.n	801a350 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 801a388:	f640 1302 	movw	r3, #2306	; 0x902
 801a38c:	429d      	cmp	r5, r3
 801a38e:	d1df      	bne.n	801a350 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 801a390:	4601      	mov	r1, r0
 801a392:	4620      	mov	r0, r4
 801a394:	f7ff fc8d 	bl	8019cb2 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801a398:	e7d9      	b.n	801a34e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>

0801a39a <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801a39a:	b510      	push	{r4, lr}
 801a39c:	4604      	mov	r4, r0
 801a39e:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 801a3a2:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801a3a4:	b1e1      	cbz	r1, 801a3e0 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 801a3a6:	2b0a      	cmp	r3, #10
 801a3a8:	d02d      	beq.n	801a406 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 801a3aa:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 801a3ac:	3901      	subs	r1, #1
 801a3ae:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 801a3b2:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 801a3b4:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 801a3b8:	1c51      	adds	r1, r2, #1
 801a3ba:	b289      	uxth	r1, r1
 801a3bc:	2901      	cmp	r1, #1
 801a3be:	bf8a      	itet	hi
 801a3c0:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801a3c4:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 801a3c6:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 801a3c8:	1c5a      	adds	r2, r3, #1
 801a3ca:	8722      	strh	r2, [r4, #56]	; 0x38
 801a3cc:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801a3ce:	4413      	add	r3, r2
 801a3d0:	b29b      	uxth	r3, r3
 801a3d2:	2b09      	cmp	r3, #9
 801a3d4:	bf88      	it	hi
 801a3d6:	3b0a      	subhi	r3, #10
 801a3d8:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801a3dc:	8458      	strh	r0, [r3, #34]	; 0x22
 801a3de:	e7de      	b.n	801a39e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 801a3e0:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801a3e2:	2b0a      	cmp	r3, #10
 801a3e4:	d00f      	beq.n	801a406 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 801a3e6:	4620      	mov	r0, r4
 801a3e8:	f7ff fc11 	bl	8019c0e <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801a3ec:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801a3ee:	1c5a      	adds	r2, r3, #1
 801a3f0:	8722      	strh	r2, [r4, #56]	; 0x38
 801a3f2:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801a3f4:	4413      	add	r3, r2
 801a3f6:	b29b      	uxth	r3, r3
 801a3f8:	2b09      	cmp	r3, #9
 801a3fa:	bf88      	it	hi
 801a3fc:	3b0a      	subhi	r3, #10
 801a3fe:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801a402:	8458      	strh	r0, [r3, #34]	; 0x22
 801a404:	e7ec      	b.n	801a3e0 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 801a406:	bd10      	pop	{r4, pc}

0801a408 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801a408:	b538      	push	{r3, r4, r5, lr}
 801a40a:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801a40c:	4604      	mov	r4, r0
 801a40e:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 801a412:	8c55      	ldrh	r5, [r2, #34]	; 0x22
 801a414:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 801a416:	3a01      	subs	r2, #1
 801a418:	8702      	strh	r2, [r0, #56]	; 0x38
 801a41a:	1c5a      	adds	r2, r3, #1
 801a41c:	b292      	uxth	r2, r2
 801a41e:	2a09      	cmp	r2, #9
 801a420:	bf8a      	itet	hi
 801a422:	3b09      	subhi	r3, #9
 801a424:	86c2      	strhls	r2, [r0, #54]	; 0x36
 801a426:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 801a428:	f7ff ffb7 	bl	801a39a <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801a42c:	8c23      	ldrh	r3, [r4, #32]
 801a42e:	2b01      	cmp	r3, #1
 801a430:	bf9c      	itt	ls
 801a432:	3301      	addls	r3, #1
 801a434:	8423      	strhls	r3, [r4, #32]
 801a436:	8be3      	ldrh	r3, [r4, #30]
 801a438:	b90b      	cbnz	r3, 801a43e <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 801a43a:	2302      	movs	r3, #2
 801a43c:	83e3      	strh	r3, [r4, #30]
 801a43e:	8be3      	ldrh	r3, [r4, #30]
 801a440:	4628      	mov	r0, r5
 801a442:	3b01      	subs	r3, #1
 801a444:	b29b      	uxth	r3, r3
 801a446:	83e3      	strh	r3, [r4, #30]
 801a448:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801a44c:	8365      	strh	r5, [r4, #26]
 801a44e:	bd38      	pop	{r3, r4, r5, pc}

0801a450 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801a450:	428a      	cmp	r2, r1
 801a452:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a456:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
 801a458:	d932      	bls.n	801a4c0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
 801a45a:	8f05      	ldrh	r5, [r0, #56]	; 0x38
 801a45c:	1a54      	subs	r4, r2, r1
 801a45e:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
 801a462:	19ee      	adds	r6, r5, r7
 801a464:	fa1f fe84 	uxth.w	lr, r4
 801a468:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	; 0x3e
 801a46c:	3e01      	subs	r6, #1
 801a46e:	b2b4      	uxth	r4, r6
 801a470:	eba4 090e 	sub.w	r9, r4, lr
 801a474:	fa1f f989 	uxth.w	r9, r9
 801a478:	2c09      	cmp	r4, #9
 801a47a:	4626      	mov	r6, r4
 801a47c:	bf88      	it	hi
 801a47e:	f1a4 060a 	subhi.w	r6, r4, #10
 801a482:	f1bc 0f00 	cmp.w	ip, #0
 801a486:	f104 34ff 	add.w	r4, r4, #4294967295
 801a48a:	bf08      	it	eq
 801a48c:	f04f 0c02 	moveq.w	ip, #2
 801a490:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801a494:	b2a4      	uxth	r4, r4
 801a496:	f10c 3cff 	add.w	ip, ip, #4294967295
 801a49a:	f8b6 a022 	ldrh.w	sl, [r6, #34]	; 0x22
 801a49e:	454c      	cmp	r4, r9
 801a4a0:	fa1f fc8c 	uxth.w	ip, ip
 801a4a4:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 801a4a8:	f8a6 a03a 	strh.w	sl, [r6, #58]	; 0x3a
 801a4ac:	d1e4      	bne.n	801a478 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 801a4ae:	eba5 050e 	sub.w	r5, r5, lr
 801a4b2:	eb0e 0408 	add.w	r4, lr, r8
 801a4b6:	f8a0 c03e 	strh.w	ip, [r0, #62]	; 0x3e
 801a4ba:	8705      	strh	r5, [r0, #56]	; 0x38
 801a4bc:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
 801a4c0:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 801a4c2:	250a      	movs	r5, #10
 801a4c4:	1a64      	subs	r4, r4, r1
 801a4c6:	4439      	add	r1, r7
 801a4c8:	b289      	uxth	r1, r1
 801a4ca:	8704      	strh	r4, [r0, #56]	; 0x38
 801a4cc:	2909      	cmp	r1, #9
 801a4ce:	bf88      	it	hi
 801a4d0:	390a      	subhi	r1, #10
 801a4d2:	86c1      	strh	r1, [r0, #54]	; 0x36
 801a4d4:	b18a      	cbz	r2, 801a4fa <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 801a4d6:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 801a4d8:	3a01      	subs	r2, #1
 801a4da:	3101      	adds	r1, #1
 801a4dc:	b292      	uxth	r2, r2
 801a4de:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 801a4e2:	8701      	strh	r1, [r0, #56]	; 0x38
 801a4e4:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 801a4e6:	b901      	cbnz	r1, 801a4ea <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
 801a4e8:	86c5      	strh	r5, [r0, #54]	; 0x36
 801a4ea:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 801a4ec:	3901      	subs	r1, #1
 801a4ee:	b289      	uxth	r1, r1
 801a4f0:	86c1      	strh	r1, [r0, #54]	; 0x36
 801a4f2:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801a4f6:	844c      	strh	r4, [r1, #34]	; 0x22
 801a4f8:	e7ec      	b.n	801a4d4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
 801a4fa:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a4fe:	f7ff bf4c 	b.w	801a39a <_ZN8touchgfx12TextProvider15fillInputBufferEv>

0801a502 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801a502:	b570      	push	{r4, r5, r6, lr}
 801a504:	2500      	movs	r5, #0
 801a506:	4295      	cmp	r5, r2
 801a508:	d011      	beq.n	801a52e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 801a50a:	8bc4      	ldrh	r4, [r0, #30]
 801a50c:	f831 6b02 	ldrh.w	r6, [r1], #2
 801a510:	4414      	add	r4, r2
 801a512:	3c01      	subs	r4, #1
 801a514:	1b64      	subs	r4, r4, r5
 801a516:	b2a4      	uxth	r4, r4
 801a518:	2c01      	cmp	r4, #1
 801a51a:	bf88      	it	hi
 801a51c:	3c02      	subhi	r4, #2
 801a51e:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801a522:	8b64      	ldrh	r4, [r4, #26]
 801a524:	42b4      	cmp	r4, r6
 801a526:	d117      	bne.n	801a558 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 801a528:	3501      	adds	r5, #1
 801a52a:	b2ad      	uxth	r5, r5
 801a52c:	e7eb      	b.n	801a506 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 801a52e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801a532:	2400      	movs	r4, #0
 801a534:	4413      	add	r3, r2
 801a536:	b2a2      	uxth	r2, r4
 801a538:	429a      	cmp	r2, r3
 801a53a:	da0f      	bge.n	801a55c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 801a53c:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 801a53e:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 801a542:	3401      	adds	r4, #1
 801a544:	4432      	add	r2, r6
 801a546:	b292      	uxth	r2, r2
 801a548:	2a09      	cmp	r2, #9
 801a54a:	bf88      	it	hi
 801a54c:	3a0a      	subhi	r2, #10
 801a54e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801a552:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 801a554:	42aa      	cmp	r2, r5
 801a556:	d0ee      	beq.n	801a536 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 801a558:	2000      	movs	r0, #0
 801a55a:	bd70      	pop	{r4, r5, r6, pc}
 801a55c:	2001      	movs	r0, #1
 801a55e:	e7fc      	b.n	801a55a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

0801a560 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801a560:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a564:	4605      	mov	r5, r0
 801a566:	4616      	mov	r6, r2
 801a568:	1c8c      	adds	r4, r1, #2
 801a56a:	8809      	ldrh	r1, [r1, #0]
 801a56c:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801a570:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801a574:	42b3      	cmp	r3, r6
 801a576:	d124      	bne.n	801a5c2 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801a578:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801a57c:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801a580:	f001 070f 	and.w	r7, r1, #15
 801a584:	4652      	mov	r2, sl
 801a586:	f8cd 8000 	str.w	r8, [sp]
 801a58a:	464b      	mov	r3, r9
 801a58c:	4621      	mov	r1, r4
 801a58e:	4628      	mov	r0, r5
 801a590:	f7ff ffb7 	bl	801a502 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801a594:	4683      	mov	fp, r0
 801a596:	b168      	cbz	r0, 801a5b4 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801a598:	eb0a 0109 	add.w	r1, sl, r9
 801a59c:	463a      	mov	r2, r7
 801a59e:	4628      	mov	r0, r5
 801a5a0:	4441      	add	r1, r8
 801a5a2:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801a5a6:	4649      	mov	r1, r9
 801a5a8:	f7ff ff52 	bl	801a450 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801a5ac:	4658      	mov	r0, fp
 801a5ae:	b003      	add	sp, #12
 801a5b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a5b4:	eb07 010a 	add.w	r1, r7, sl
 801a5b8:	4449      	add	r1, r9
 801a5ba:	4441      	add	r1, r8
 801a5bc:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801a5c0:	e7d2      	b.n	801a568 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801a5c2:	f04f 0b00 	mov.w	fp, #0
 801a5c6:	e7f1      	b.n	801a5ac <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801a5c8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801a5c8:	b570      	push	{r4, r5, r6, lr}
 801a5ca:	8810      	ldrh	r0, [r2, #0]
 801a5cc:	4298      	cmp	r0, r3
 801a5ce:	d817      	bhi.n	801a600 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801a5d0:	1e48      	subs	r0, r1, #1
 801a5d2:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801a5d6:	4298      	cmp	r0, r3
 801a5d8:	d312      	bcc.n	801a600 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801a5da:	2400      	movs	r4, #0
 801a5dc:	428c      	cmp	r4, r1
 801a5de:	d20f      	bcs.n	801a600 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801a5e0:	1860      	adds	r0, r4, r1
 801a5e2:	1040      	asrs	r0, r0, #1
 801a5e4:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801a5e8:	0085      	lsls	r5, r0, #2
 801a5ea:	42b3      	cmp	r3, r6
 801a5ec:	d902      	bls.n	801a5f4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801a5ee:	3001      	adds	r0, #1
 801a5f0:	b284      	uxth	r4, r0
 801a5f2:	e7f3      	b.n	801a5dc <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801a5f4:	d201      	bcs.n	801a5fa <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 801a5f6:	b281      	uxth	r1, r0
 801a5f8:	e7f0      	b.n	801a5dc <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801a5fa:	442a      	add	r2, r5
 801a5fc:	8850      	ldrh	r0, [r2, #2]
 801a5fe:	bd70      	pop	{r4, r5, r6, pc}
 801a600:	2000      	movs	r0, #0
 801a602:	e7fc      	b.n	801a5fe <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0801a604 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801a604:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a608:	6c45      	ldr	r5, [r0, #68]	; 0x44
 801a60a:	4604      	mov	r4, r0
 801a60c:	260b      	movs	r6, #11
 801a60e:	886f      	ldrh	r7, [r5, #2]
 801a610:	087f      	lsrs	r7, r7, #1
 801a612:	3e01      	subs	r6, #1
 801a614:	d013      	beq.n	801a63e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801a616:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801a618:	462a      	mov	r2, r5
 801a61a:	4639      	mov	r1, r7
 801a61c:	4620      	mov	r0, r4
 801a61e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801a622:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801a626:	4643      	mov	r3, r8
 801a628:	f7ff ffce 	bl	801a5c8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801a62c:	b138      	cbz	r0, 801a63e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801a62e:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801a632:	4642      	mov	r2, r8
 801a634:	4620      	mov	r0, r4
 801a636:	f7ff ff93 	bl	801a560 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801a63a:	2800      	cmp	r0, #0
 801a63c:	d1e9      	bne.n	801a612 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801a63e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0801a644 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 801a644:	b570      	push	{r4, r5, r6, lr}
 801a646:	694a      	ldr	r2, [r1, #20]
 801a648:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 801a64a:	684b      	ldr	r3, [r1, #4]
 801a64c:	1b54      	subs	r4, r2, r5
 801a64e:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 801a650:	f000 8106 	beq.w	801a860 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 801a654:	1b9b      	subs	r3, r3, r6
 801a656:	d003      	beq.n	801a660 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801a658:	4363      	muls	r3, r4
 801a65a:	2210      	movs	r2, #16
 801a65c:	fb93 f3f2 	sdiv	r3, r3, r2
 801a660:	680c      	ldr	r4, [r1, #0]
 801a662:	698a      	ldr	r2, [r1, #24]
 801a664:	1b65      	subs	r5, r4, r5
 801a666:	f000 80fd 	beq.w	801a864 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 801a66a:	1b92      	subs	r2, r2, r6
 801a66c:	d003      	beq.n	801a676 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801a66e:	436a      	muls	r2, r5
 801a670:	2410      	movs	r4, #16
 801a672:	fb92 f2f4 	sdiv	r2, r2, r4
 801a676:	1a9b      	subs	r3, r3, r2
 801a678:	ed9f 4a89 	vldr	s8, [pc, #548]	; 801a8a0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 801a67c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801a680:	460a      	mov	r2, r1
 801a682:	ee07 3a90 	vmov	s15, r3
 801a686:	f100 040c 	add.w	r4, r0, #12
 801a68a:	4603      	mov	r3, r0
 801a68c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a690:	ee67 7a84 	vmul.f32	s15, s15, s8
 801a694:	ee87 3a27 	vdiv.f32	s6, s14, s15
 801a698:	eeb1 6a43 	vneg.f32	s12, s6
 801a69c:	edd2 7a02 	vldr	s15, [r2, #8]
 801a6a0:	3214      	adds	r2, #20
 801a6a2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801a6a6:	ece3 6a01 	vstmia	r3!, {s13}
 801a6aa:	429c      	cmp	r4, r3
 801a6ac:	ed52 7a02 	vldr	s15, [r2, #-8]
 801a6b0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801a6b4:	edc3 7a02 	vstr	s15, [r3, #8]
 801a6b8:	ed52 7a01 	vldr	s15, [r2, #-4]
 801a6bc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801a6c0:	edc3 7a05 	vstr	s15, [r3, #20]
 801a6c4:	d1ea      	bne.n	801a69c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 801a6c6:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801a6c8:	698b      	ldr	r3, [r1, #24]
 801a6ca:	edd0 4a02 	vldr	s9, [r0, #8]
 801a6ce:	1a9b      	subs	r3, r3, r2
 801a6d0:	edd0 3a00 	vldr	s7, [r0]
 801a6d4:	edd0 6a01 	vldr	s13, [r0, #4]
 801a6d8:	ee07 3a90 	vmov	s15, r3
 801a6dc:	684b      	ldr	r3, [r1, #4]
 801a6de:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801a6e2:	ed90 5a05 	vldr	s10, [r0, #20]
 801a6e6:	1a9b      	subs	r3, r3, r2
 801a6e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a6ec:	ee73 4ae4 	vsub.f32	s9, s7, s9
 801a6f0:	ed90 2a03 	vldr	s4, [r0, #12]
 801a6f4:	ee07 3a10 	vmov	s14, r3
 801a6f8:	edd0 5a04 	vldr	s11, [r0, #16]
 801a6fc:	ee67 7a84 	vmul.f32	s15, s15, s8
 801a700:	ed90 1a07 	vldr	s2, [r0, #28]
 801a704:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a708:	edd0 2a06 	vldr	s5, [r0, #24]
 801a70c:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801a710:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 801a714:	ee27 7a04 	vmul.f32	s14, s14, s8
 801a718:	ee32 5a45 	vsub.f32	s10, s4, s10
 801a71c:	eee6 7a87 	vfma.f32	s15, s13, s14
 801a720:	ee67 7a83 	vmul.f32	s15, s15, s6
 801a724:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 801a728:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801a72a:	694a      	ldr	r2, [r1, #20]
 801a72c:	1b13      	subs	r3, r2, r4
 801a72e:	ee07 3a10 	vmov	s14, r3
 801a732:	680b      	ldr	r3, [r1, #0]
 801a734:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a738:	1b1b      	subs	r3, r3, r4
 801a73a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801a73e:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 801a742:	ee07 3a10 	vmov	s14, r3
 801a746:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a74a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801a74e:	eee6 4a87 	vfma.f32	s9, s13, s14
 801a752:	ee64 4a86 	vmul.f32	s9, s9, s12
 801a756:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 801a75a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801a75c:	698b      	ldr	r3, [r1, #24]
 801a75e:	1a9b      	subs	r3, r3, r2
 801a760:	ee06 3a90 	vmov	s13, r3
 801a764:	684b      	ldr	r3, [r1, #4]
 801a766:	1a9b      	subs	r3, r3, r2
 801a768:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801a76c:	ee07 3a10 	vmov	s14, r3
 801a770:	ee66 6a84 	vmul.f32	s13, s13, s8
 801a774:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a778:	ee65 6a66 	vnmul.f32	s13, s10, s13
 801a77c:	ee27 7a04 	vmul.f32	s14, s14, s8
 801a780:	eee5 6a87 	vfma.f32	s13, s11, s14
 801a784:	ee66 6a83 	vmul.f32	s13, s13, s6
 801a788:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 801a78c:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801a78e:	694a      	ldr	r2, [r1, #20]
 801a790:	1b13      	subs	r3, r2, r4
 801a792:	ee07 3a10 	vmov	s14, r3
 801a796:	680b      	ldr	r3, [r1, #0]
 801a798:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a79c:	1b1b      	subs	r3, r3, r4
 801a79e:	ee27 7a04 	vmul.f32	s14, s14, s8
 801a7a2:	ee25 5a47 	vnmul.f32	s10, s10, s14
 801a7a6:	ee07 3a10 	vmov	s14, r3
 801a7aa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a7ae:	ee27 7a04 	vmul.f32	s14, s14, s8
 801a7b2:	eea5 5a87 	vfma.f32	s10, s11, s14
 801a7b6:	edd0 5a08 	vldr	s11, [r0, #32]
 801a7ba:	ee31 1a65 	vsub.f32	s2, s2, s11
 801a7be:	ee72 5ae5 	vsub.f32	s11, s5, s11
 801a7c2:	ee25 5a06 	vmul.f32	s10, s10, s12
 801a7c6:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 801a7ca:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801a7cc:	698b      	ldr	r3, [r1, #24]
 801a7ce:	1a9b      	subs	r3, r3, r2
 801a7d0:	ee07 3a10 	vmov	s14, r3
 801a7d4:	684b      	ldr	r3, [r1, #4]
 801a7d6:	1a9b      	subs	r3, r3, r2
 801a7d8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a7dc:	ee01 3a90 	vmov	s3, r3
 801a7e0:	ee27 7a04 	vmul.f32	s14, s14, s8
 801a7e4:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801a7e8:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 801a7ec:	ee61 1a84 	vmul.f32	s3, s3, s8
 801a7f0:	eea1 7a21 	vfma.f32	s14, s2, s3
 801a7f4:	ee27 7a03 	vmul.f32	s14, s14, s6
 801a7f8:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801a7fc:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801a7fe:	694a      	ldr	r2, [r1, #20]
 801a800:	1b13      	subs	r3, r2, r4
 801a802:	ee03 3a10 	vmov	s6, r3
 801a806:	680b      	ldr	r3, [r1, #0]
 801a808:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801a80c:	1b1b      	subs	r3, r3, r4
 801a80e:	ee23 3a04 	vmul.f32	s6, s6, s8
 801a812:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 801a816:	ee03 3a10 	vmov	s6, r3
 801a81a:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801a81e:	ee23 4a04 	vmul.f32	s8, s6, s8
 801a822:	eee1 5a04 	vfma.f32	s11, s2, s8
 801a826:	ee25 6a86 	vmul.f32	s12, s11, s12
 801a82a:	ee62 5a67 	vnmul.f32	s11, s4, s15
 801a82e:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 801a832:	eee3 5aa6 	vfma.f32	s11, s7, s13
 801a836:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801a83a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a83e:	dd13      	ble.n	801a868 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 801a840:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801a844:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 801a848:	63c3      	str	r3, [r0, #60]	; 0x3c
 801a84a:	eee3 7a87 	vfma.f32	s15, s7, s14
 801a84e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801a852:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a856:	dd15      	ble.n	801a884 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 801a858:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801a85c:	6403      	str	r3, [r0, #64]	; 0x40
 801a85e:	bd70      	pop	{r4, r5, r6, pc}
 801a860:	4623      	mov	r3, r4
 801a862:	e6fd      	b.n	801a660 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801a864:	462a      	mov	r2, r5
 801a866:	e706      	b.n	801a676 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801a868:	d502      	bpl.n	801a870 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 801a86a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801a86e:	e7e9      	b.n	801a844 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 801a870:	ee22 2a64 	vnmul.f32	s4, s4, s9
 801a874:	eea3 2a85 	vfma.f32	s4, s7, s10
 801a878:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 801a87c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a880:	dade      	bge.n	801a840 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 801a882:	e7f2      	b.n	801a86a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 801a884:	d502      	bpl.n	801a88c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 801a886:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801a88a:	e7e7      	b.n	801a85c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 801a88c:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 801a890:	eee3 4a86 	vfma.f32	s9, s7, s12
 801a894:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 801a898:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a89c:	dadc      	bge.n	801a858 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 801a89e:	e7f2      	b.n	801a886 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 801a8a0:	3d800000 	.word	0x3d800000

0801a8a4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 801a8a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a8a8:	2714      	movs	r7, #20
 801a8aa:	435f      	muls	r7, r3
 801a8ac:	eb02 0c07 	add.w	ip, r2, r7
 801a8b0:	f8dc 5004 	ldr.w	r5, [ip, #4]
 801a8b4:	f115 0e0f 	adds.w	lr, r5, #15
 801a8b8:	f100 80a2 	bmi.w	801aa00 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 801a8bc:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 801a8c0:	9c08      	ldr	r4, [sp, #32]
 801a8c2:	2614      	movs	r6, #20
 801a8c4:	f8c0 e014 	str.w	lr, [r0, #20]
 801a8c8:	4366      	muls	r6, r4
 801a8ca:	eb02 0806 	add.w	r8, r2, r6
 801a8ce:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801a8d2:	f115 040f 	adds.w	r4, r5, #15
 801a8d6:	f100 809f 	bmi.w	801aa18 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 801a8da:	1124      	asrs	r4, r4, #4
 801a8dc:	eba4 040e 	sub.w	r4, r4, lr
 801a8e0:	6184      	str	r4, [r0, #24]
 801a8e2:	2c00      	cmp	r4, #0
 801a8e4:	f000 808a 	beq.w	801a9fc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 801a8e8:	f8dc 9004 	ldr.w	r9, [ip, #4]
 801a8ec:	f8d8 4004 	ldr.w	r4, [r8, #4]
 801a8f0:	5995      	ldr	r5, [r2, r6]
 801a8f2:	eba4 0809 	sub.w	r8, r4, r9
 801a8f6:	59d4      	ldr	r4, [r2, r7]
 801a8f8:	eba5 0a04 	sub.w	sl, r5, r4
 801a8fc:	ea4f 1608 	mov.w	r6, r8, lsl #4
 801a900:	ea4f 150a 	mov.w	r5, sl, lsl #4
 801a904:	fb0e fe05 	mul.w	lr, lr, r5
 801a908:	fb0a ee19 	mls	lr, sl, r9, lr
 801a90c:	fb08 e404 	mla	r4, r8, r4, lr
 801a910:	3c01      	subs	r4, #1
 801a912:	19a4      	adds	r4, r4, r6
 801a914:	f100 808c 	bmi.w	801aa30 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 801a918:	fb94 fef6 	sdiv	lr, r4, r6
 801a91c:	fb06 441e 	mls	r4, r6, lr, r4
 801a920:	f8c0 e000 	str.w	lr, [r0]
 801a924:	6104      	str	r4, [r0, #16]
 801a926:	2d00      	cmp	r5, #0
 801a928:	f2c0 8095 	blt.w	801aa56 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 801a92c:	fb95 f4f6 	sdiv	r4, r5, r6
 801a930:	fb06 5514 	mls	r5, r6, r4, r5
 801a934:	6044      	str	r4, [r0, #4]
 801a936:	6085      	str	r5, [r0, #8]
 801a938:	60c6      	str	r6, [r0, #12]
 801a93a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801a93e:	f8dc 4004 	ldr.w	r4, [ip, #4]
 801a942:	6945      	ldr	r5, [r0, #20]
 801a944:	59d2      	ldr	r2, [r2, r7]
 801a946:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 801a94a:	eddf 6a4b 	vldr	s13, [pc, #300]	; 801aa78 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 801a94e:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 801a952:	ee07 4a10 	vmov	s14, r4
 801a956:	6804      	ldr	r4, [r0, #0]
 801a958:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 801a95c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a960:	ee07 2a90 	vmov	s15, r2
 801a964:	ee27 7a26 	vmul.f32	s14, s14, s13
 801a968:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a96c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801a970:	edd3 6a00 	vldr	s13, [r3]
 801a974:	eee6 6a07 	vfma.f32	s13, s12, s14
 801a978:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 801a97c:	eee6 6a27 	vfma.f32	s13, s12, s15
 801a980:	edc0 6a07 	vstr	s13, [r0, #28]
 801a984:	edd0 6a01 	vldr	s13, [r0, #4]
 801a988:	edd1 5a09 	vldr	s11, [r1, #36]	; 0x24
 801a98c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801a990:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 801a994:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801a998:	ed80 6a08 	vstr	s12, [r0, #32]
 801a99c:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 801a99e:	6242      	str	r2, [r0, #36]	; 0x24
 801a9a0:	edd1 5a0c 	vldr	s11, [r1, #48]	; 0x30
 801a9a4:	ed93 6a03 	vldr	s12, [r3, #12]
 801a9a8:	eea5 6a87 	vfma.f32	s12, s11, s14
 801a9ac:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 801a9b0:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801a9b4:	ed80 6a0a 	vstr	s12, [r0, #40]	; 0x28
 801a9b8:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 801a9bc:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 801a9c0:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801a9c4:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
 801a9c8:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801a9ca:	6302      	str	r2, [r0, #48]	; 0x30
 801a9cc:	ed93 6a06 	vldr	s12, [r3, #24]
 801a9d0:	edd1 5a0e 	vldr	s11, [r1, #56]	; 0x38
 801a9d4:	eea5 6a87 	vfma.f32	s12, s11, s14
 801a9d8:	eeb0 7a46 	vmov.f32	s14, s12
 801a9dc:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 801a9e0:	eea6 7a27 	vfma.f32	s14, s12, s15
 801a9e4:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801a9e8:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 801a9ec:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
 801a9f0:	eee6 7a87 	vfma.f32	s15, s13, s14
 801a9f4:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
 801a9f8:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 801a9fa:	63c3      	str	r3, [r0, #60]	; 0x3c
 801a9fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801aa00:	2410      	movs	r4, #16
 801aa02:	f1c5 0501 	rsb	r5, r5, #1
 801aa06:	fb9e fef4 	sdiv	lr, lr, r4
 801aa0a:	f015 050f 	ands.w	r5, r5, #15
 801aa0e:	bf18      	it	ne
 801aa10:	2501      	movne	r5, #1
 801aa12:	ebae 0e05 	sub.w	lr, lr, r5
 801aa16:	e753      	b.n	801a8c0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 801aa18:	f04f 0910 	mov.w	r9, #16
 801aa1c:	f1c5 0501 	rsb	r5, r5, #1
 801aa20:	fb94 f4f9 	sdiv	r4, r4, r9
 801aa24:	f015 050f 	ands.w	r5, r5, #15
 801aa28:	bf18      	it	ne
 801aa2a:	2501      	movne	r5, #1
 801aa2c:	1b64      	subs	r4, r4, r5
 801aa2e:	e755      	b.n	801a8dc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 801aa30:	4264      	negs	r4, r4
 801aa32:	fb94 fef6 	sdiv	lr, r4, r6
 801aa36:	f1ce 0800 	rsb	r8, lr, #0
 801aa3a:	fb06 441e 	mls	r4, r6, lr, r4
 801aa3e:	f8c0 8000 	str.w	r8, [r0]
 801aa42:	6104      	str	r4, [r0, #16]
 801aa44:	2c00      	cmp	r4, #0
 801aa46:	f43f af6e 	beq.w	801a926 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 801aa4a:	ea6f 0e0e 	mvn.w	lr, lr
 801aa4e:	1b34      	subs	r4, r6, r4
 801aa50:	f8c0 e000 	str.w	lr, [r0]
 801aa54:	e766      	b.n	801a924 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 801aa56:	426d      	negs	r5, r5
 801aa58:	fb95 f4f6 	sdiv	r4, r5, r6
 801aa5c:	f1c4 0e00 	rsb	lr, r4, #0
 801aa60:	fb06 5514 	mls	r5, r6, r4, r5
 801aa64:	f8c0 e004 	str.w	lr, [r0, #4]
 801aa68:	6085      	str	r5, [r0, #8]
 801aa6a:	2d00      	cmp	r5, #0
 801aa6c:	f43f af64 	beq.w	801a938 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 801aa70:	43e4      	mvns	r4, r4
 801aa72:	1b75      	subs	r5, r6, r5
 801aa74:	6044      	str	r4, [r0, #4]
 801aa76:	e75e      	b.n	801a936 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 801aa78:	3d800000 	.word	0x3d800000

0801aa7c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801aa7c:	4b01      	ldr	r3, [pc, #4]	; (801aa84 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801aa7e:	6018      	str	r0, [r3, #0]
 801aa80:	4770      	bx	lr
 801aa82:	bf00      	nop
 801aa84:	20024488 	.word	0x20024488

0801aa88 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 801aa88:	4b06      	ldr	r3, [pc, #24]	; (801aaa4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801aa8a:	881a      	ldrh	r2, [r3, #0]
 801aa8c:	4282      	cmp	r2, r0
 801aa8e:	d807      	bhi.n	801aaa0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 801aa90:	4b05      	ldr	r3, [pc, #20]	; (801aaa8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801aa92:	881b      	ldrh	r3, [r3, #0]
 801aa94:	4413      	add	r3, r2
 801aa96:	4298      	cmp	r0, r3
 801aa98:	bfac      	ite	ge
 801aa9a:	2000      	movge	r0, #0
 801aa9c:	2001      	movlt	r0, #1
 801aa9e:	4770      	bx	lr
 801aaa0:	2000      	movs	r0, #0
 801aaa2:	4770      	bx	lr
 801aaa4:	200244a8 	.word	0x200244a8
 801aaa8:	200244ac 	.word	0x200244ac

0801aaac <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801aaac:	b508      	push	{r3, lr}
 801aaae:	4601      	mov	r1, r0
 801aab0:	f7ff ffea 	bl	801aa88 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801aab4:	b118      	cbz	r0, 801aabe <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801aab6:	4b02      	ldr	r3, [pc, #8]	; (801aac0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 801aab8:	681b      	ldr	r3, [r3, #0]
 801aaba:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801aabe:	bd08      	pop	{r3, pc}
 801aac0:	2002448c 	.word	0x2002448c

0801aac4 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801aac4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801aac6:	4c24      	ldr	r4, [pc, #144]	; (801ab58 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 801aac8:	6823      	ldr	r3, [r4, #0]
 801aaca:	2b00      	cmp	r3, #0
 801aacc:	d042      	beq.n	801ab54 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801aace:	4a23      	ldr	r2, [pc, #140]	; (801ab5c <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 801aad0:	4d23      	ldr	r5, [pc, #140]	; (801ab60 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 801aad2:	8811      	ldrh	r1, [r2, #0]
 801aad4:	f8b5 c000 	ldrh.w	ip, [r5]
 801aad8:	4822      	ldr	r0, [pc, #136]	; (801ab64 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 801aada:	4461      	add	r1, ip
 801aadc:	1c4a      	adds	r2, r1, #1
 801aade:	008f      	lsls	r7, r1, #2
 801aae0:	f022 0201 	bic.w	r2, r2, #1
 801aae4:	19de      	adds	r6, r3, r7
 801aae6:	0412      	lsls	r2, r2, #16
 801aae8:	6006      	str	r6, [r0, #0]
 801aaea:	4e1f      	ldr	r6, [pc, #124]	; (801ab68 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 801aaec:	0c12      	lsrs	r2, r2, #16
 801aaee:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 801aaf2:	19da      	adds	r2, r3, r7
 801aaf4:	6032      	str	r2, [r6, #0]
 801aaf6:	220e      	movs	r2, #14
 801aaf8:	fb02 f20c 	mul.w	r2, r2, ip
 801aafc:	3203      	adds	r2, #3
 801aafe:	f022 0203 	bic.w	r2, r2, #3
 801ab02:	443a      	add	r2, r7
 801ab04:	4f19      	ldr	r7, [pc, #100]	; (801ab6c <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801ab06:	4413      	add	r3, r2
 801ab08:	603b      	str	r3, [r7, #0]
 801ab0a:	2300      	movs	r3, #0
 801ab0c:	4f18      	ldr	r7, [pc, #96]	; (801ab70 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801ab0e:	469c      	mov	ip, r3
 801ab10:	803b      	strh	r3, [r7, #0]
 801ab12:	4f18      	ldr	r7, [pc, #96]	; (801ab74 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801ab14:	683f      	ldr	r7, [r7, #0]
 801ab16:	1aba      	subs	r2, r7, r2
 801ab18:	4f17      	ldr	r7, [pc, #92]	; (801ab78 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801ab1a:	603a      	str	r2, [r7, #0]
 801ab1c:	f64f 77ff 	movw	r7, #65535	; 0xffff
 801ab20:	4a16      	ldr	r2, [pc, #88]	; (801ab7c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801ab22:	8013      	strh	r3, [r2, #0]
 801ab24:	428b      	cmp	r3, r1
 801ab26:	d10d      	bne.n	801ab44 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 801ab28:	882d      	ldrh	r5, [r5, #0]
 801ab2a:	2300      	movs	r3, #0
 801ab2c:	6830      	ldr	r0, [r6, #0]
 801ab2e:	240e      	movs	r4, #14
 801ab30:	429d      	cmp	r5, r3
 801ab32:	d90f      	bls.n	801ab54 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801ab34:	fb04 0203 	mla	r2, r4, r3, r0
 801ab38:	3301      	adds	r3, #1
 801ab3a:	7b11      	ldrb	r1, [r2, #12]
 801ab3c:	f36f 1145 	bfc	r1, #5, #1
 801ab40:	7311      	strb	r1, [r2, #12]
 801ab42:	e7f5      	b.n	801ab30 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 801ab44:	6822      	ldr	r2, [r4, #0]
 801ab46:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801ab4a:	6802      	ldr	r2, [r0, #0]
 801ab4c:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 801ab50:	3301      	adds	r3, #1
 801ab52:	e7e7      	b.n	801ab24 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 801ab54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ab56:	bf00      	nop
 801ab58:	2002448c 	.word	0x2002448c
 801ab5c:	200244a8 	.word	0x200244a8
 801ab60:	200244ac 	.word	0x200244ac
 801ab64:	200244a0 	.word	0x200244a0
 801ab68:	20024490 	.word	0x20024490
 801ab6c:	20024498 	.word	0x20024498
 801ab70:	200244aa 	.word	0x200244aa
 801ab74:	20024494 	.word	0x20024494
 801ab78:	200244a4 	.word	0x200244a4
 801ab7c:	2002449c 	.word	0x2002449c

0801ab80 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801ab80:	4b06      	ldr	r3, [pc, #24]	; (801ab9c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 801ab82:	681b      	ldr	r3, [r3, #0]
 801ab84:	b943      	cbnz	r3, 801ab98 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801ab86:	b139      	cbz	r1, 801ab98 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801ab88:	4b05      	ldr	r3, [pc, #20]	; (801aba0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 801ab8a:	801a      	strh	r2, [r3, #0]
 801ab8c:	4b05      	ldr	r3, [pc, #20]	; (801aba4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 801ab8e:	6019      	str	r1, [r3, #0]
 801ab90:	4b05      	ldr	r3, [pc, #20]	; (801aba8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 801ab92:	6018      	str	r0, [r3, #0]
 801ab94:	f7ff bf96 	b.w	801aac4 <_ZN8touchgfx6Bitmap10clearCacheEv>
 801ab98:	4770      	bx	lr
 801ab9a:	bf00      	nop
 801ab9c:	20024498 	.word	0x20024498
 801aba0:	200244ac 	.word	0x200244ac
 801aba4:	20024494 	.word	0x20024494
 801aba8:	2002448c 	.word	0x2002448c

0801abac <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801abac:	b470      	push	{r4, r5, r6}
 801abae:	4c07      	ldr	r4, [pc, #28]	; (801abcc <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801abb0:	4605      	mov	r5, r0
 801abb2:	4610      	mov	r0, r2
 801abb4:	9a03      	ldr	r2, [sp, #12]
 801abb6:	6826      	ldr	r6, [r4, #0]
 801abb8:	b936      	cbnz	r6, 801abc8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801abba:	6025      	str	r5, [r4, #0]
 801abbc:	4c04      	ldr	r4, [pc, #16]	; (801abd0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801abbe:	8021      	strh	r1, [r4, #0]
 801abc0:	4619      	mov	r1, r3
 801abc2:	bc70      	pop	{r4, r5, r6}
 801abc4:	f7ff bfdc 	b.w	801ab80 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801abc8:	bc70      	pop	{r4, r5, r6}
 801abca:	4770      	bx	lr
 801abcc:	200244b0 	.word	0x200244b0
 801abd0:	200244a8 	.word	0x200244a8

0801abd4 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801abd4:	4a12      	ldr	r2, [pc, #72]	; (801ac20 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 801abd6:	8803      	ldrh	r3, [r0, #0]
 801abd8:	8812      	ldrh	r2, [r2, #0]
 801abda:	4293      	cmp	r3, r2
 801abdc:	d207      	bcs.n	801abee <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 801abde:	4a11      	ldr	r2, [pc, #68]	; (801ac24 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 801abe0:	2114      	movs	r1, #20
 801abe2:	6812      	ldr	r2, [r2, #0]
 801abe4:	fb01 2303 	mla	r3, r1, r3, r2
 801abe8:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 801abec:	4770      	bx	lr
 801abee:	490e      	ldr	r1, [pc, #56]	; (801ac28 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801abf0:	8809      	ldrh	r1, [r1, #0]
 801abf2:	4411      	add	r1, r2
 801abf4:	428b      	cmp	r3, r1
 801abf6:	da04      	bge.n	801ac02 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 801abf8:	1a9b      	subs	r3, r3, r2
 801abfa:	4a0c      	ldr	r2, [pc, #48]	; (801ac2c <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801abfc:	210e      	movs	r1, #14
 801abfe:	6812      	ldr	r2, [r2, #0]
 801ac00:	e7f0      	b.n	801abe4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 801ac02:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801ac06:	4293      	cmp	r3, r2
 801ac08:	d108      	bne.n	801ac1c <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 801ac0a:	4b09      	ldr	r3, [pc, #36]	; (801ac30 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801ac0c:	781b      	ldrb	r3, [r3, #0]
 801ac0e:	b91b      	cbnz	r3, 801ac18 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 801ac10:	4b08      	ldr	r3, [pc, #32]	; (801ac34 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801ac12:	f9b3 0000 	ldrsh.w	r0, [r3]
 801ac16:	4770      	bx	lr
 801ac18:	4b07      	ldr	r3, [pc, #28]	; (801ac38 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801ac1a:	e7fa      	b.n	801ac12 <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 801ac1c:	2000      	movs	r0, #0
 801ac1e:	4770      	bx	lr
 801ac20:	200244a8 	.word	0x200244a8
 801ac24:	200244b0 	.word	0x200244b0
 801ac28:	200244ac 	.word	0x200244ac
 801ac2c:	20024490 	.word	0x20024490
 801ac30:	20024420 	.word	0x20024420
 801ac34:	20024422 	.word	0x20024422
 801ac38:	20024424 	.word	0x20024424

0801ac3c <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801ac3c:	4a12      	ldr	r2, [pc, #72]	; (801ac88 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 801ac3e:	8803      	ldrh	r3, [r0, #0]
 801ac40:	8812      	ldrh	r2, [r2, #0]
 801ac42:	4293      	cmp	r3, r2
 801ac44:	d207      	bcs.n	801ac56 <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 801ac46:	4a11      	ldr	r2, [pc, #68]	; (801ac8c <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 801ac48:	2114      	movs	r1, #20
 801ac4a:	6812      	ldr	r2, [r2, #0]
 801ac4c:	fb01 2303 	mla	r3, r1, r3, r2
 801ac50:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 801ac54:	4770      	bx	lr
 801ac56:	490e      	ldr	r1, [pc, #56]	; (801ac90 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801ac58:	8809      	ldrh	r1, [r1, #0]
 801ac5a:	4411      	add	r1, r2
 801ac5c:	428b      	cmp	r3, r1
 801ac5e:	da04      	bge.n	801ac6a <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 801ac60:	1a9b      	subs	r3, r3, r2
 801ac62:	4a0c      	ldr	r2, [pc, #48]	; (801ac94 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801ac64:	210e      	movs	r1, #14
 801ac66:	6812      	ldr	r2, [r2, #0]
 801ac68:	e7f0      	b.n	801ac4c <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 801ac6a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801ac6e:	4293      	cmp	r3, r2
 801ac70:	d108      	bne.n	801ac84 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 801ac72:	4b09      	ldr	r3, [pc, #36]	; (801ac98 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801ac74:	781b      	ldrb	r3, [r3, #0]
 801ac76:	b91b      	cbnz	r3, 801ac80 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 801ac78:	4b08      	ldr	r3, [pc, #32]	; (801ac9c <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801ac7a:	f9b3 0000 	ldrsh.w	r0, [r3]
 801ac7e:	4770      	bx	lr
 801ac80:	4b07      	ldr	r3, [pc, #28]	; (801aca0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801ac82:	e7fa      	b.n	801ac7a <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 801ac84:	2000      	movs	r0, #0
 801ac86:	4770      	bx	lr
 801ac88:	200244a8 	.word	0x200244a8
 801ac8c:	200244b0 	.word	0x200244b0
 801ac90:	200244ac 	.word	0x200244ac
 801ac94:	20024490 	.word	0x20024490
 801ac98:	20024420 	.word	0x20024420
 801ac9c:	20024424 	.word	0x20024424
 801aca0:	20024422 	.word	0x20024422

0801aca4 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801aca4:	4a1f      	ldr	r2, [pc, #124]	; (801ad24 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>)
 801aca6:	b510      	push	{r4, lr}
 801aca8:	880b      	ldrh	r3, [r1, #0]
 801acaa:	8812      	ldrh	r2, [r2, #0]
 801acac:	4293      	cmp	r3, r2
 801acae:	d213      	bcs.n	801acd8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 801acb0:	4a1d      	ldr	r2, [pc, #116]	; (801ad28 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>)
 801acb2:	2114      	movs	r1, #20
 801acb4:	6812      	ldr	r2, [r2, #0]
 801acb6:	fb01 2303 	mla	r3, r1, r3, r2
 801acba:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801acbe:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801acc2:	8a1a      	ldrh	r2, [r3, #16]
 801acc4:	8a5b      	ldrh	r3, [r3, #18]
 801acc6:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801acca:	8004      	strh	r4, [r0, #0]
 801accc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801acd0:	8041      	strh	r1, [r0, #2]
 801acd2:	8082      	strh	r2, [r0, #4]
 801acd4:	80c3      	strh	r3, [r0, #6]
 801acd6:	e00e      	b.n	801acf6 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 801acd8:	4914      	ldr	r1, [pc, #80]	; (801ad2c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x88>)
 801acda:	8809      	ldrh	r1, [r1, #0]
 801acdc:	4411      	add	r1, r2
 801acde:	428b      	cmp	r3, r1
 801ace0:	da0a      	bge.n	801acf8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x54>
 801ace2:	1a9b      	subs	r3, r3, r2
 801ace4:	4a12      	ldr	r2, [pc, #72]	; (801ad30 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 801ace6:	210e      	movs	r1, #14
 801ace8:	6812      	ldr	r2, [r2, #0]
 801acea:	fb01 2303 	mla	r3, r1, r3, r2
 801acee:	681a      	ldr	r2, [r3, #0]
 801acf0:	6002      	str	r2, [r0, #0]
 801acf2:	685a      	ldr	r2, [r3, #4]
 801acf4:	6042      	str	r2, [r0, #4]
 801acf6:	bd10      	pop	{r4, pc}
 801acf8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801acfc:	4293      	cmp	r3, r2
 801acfe:	d10b      	bne.n	801ad18 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x74>
 801ad00:	4b0c      	ldr	r3, [pc, #48]	; (801ad34 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801ad02:	f9b3 1000 	ldrsh.w	r1, [r3]
 801ad06:	4b0c      	ldr	r3, [pc, #48]	; (801ad38 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801ad08:	8081      	strh	r1, [r0, #4]
 801ad0a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801ad0e:	2300      	movs	r3, #0
 801ad10:	80c2      	strh	r2, [r0, #6]
 801ad12:	8003      	strh	r3, [r0, #0]
 801ad14:	8043      	strh	r3, [r0, #2]
 801ad16:	e7ee      	b.n	801acf6 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 801ad18:	2300      	movs	r3, #0
 801ad1a:	8003      	strh	r3, [r0, #0]
 801ad1c:	8043      	strh	r3, [r0, #2]
 801ad1e:	8083      	strh	r3, [r0, #4]
 801ad20:	e7d8      	b.n	801acd4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 801ad22:	bf00      	nop
 801ad24:	200244a8 	.word	0x200244a8
 801ad28:	200244b0 	.word	0x200244b0
 801ad2c:	200244ac 	.word	0x200244ac
 801ad30:	20024490 	.word	0x20024490
 801ad34:	2002441c 	.word	0x2002441c
 801ad38:	2002441e 	.word	0x2002441e

0801ad3c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 801ad3c:	4a17      	ldr	r2, [pc, #92]	; (801ad9c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
 801ad3e:	8803      	ldrh	r3, [r0, #0]
 801ad40:	8812      	ldrh	r2, [r2, #0]
 801ad42:	4293      	cmp	r3, r2
 801ad44:	d213      	bcs.n	801ad6e <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x32>
 801ad46:	4a16      	ldr	r2, [pc, #88]	; (801ada0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 801ad48:	2114      	movs	r1, #20
 801ad4a:	6812      	ldr	r2, [r2, #0]
 801ad4c:	fb01 2303 	mla	r3, r1, r3, r2
 801ad50:	8a1a      	ldrh	r2, [r3, #16]
 801ad52:	8919      	ldrh	r1, [r3, #8]
 801ad54:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801ad58:	428a      	cmp	r2, r1
 801ad5a:	db1d      	blt.n	801ad98 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 801ad5c:	8a58      	ldrh	r0, [r3, #18]
 801ad5e:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801ad62:	895b      	ldrh	r3, [r3, #10]
 801ad64:	4298      	cmp	r0, r3
 801ad66:	bfac      	ite	ge
 801ad68:	2000      	movge	r0, #0
 801ad6a:	2001      	movlt	r0, #1
 801ad6c:	4770      	bx	lr
 801ad6e:	490d      	ldr	r1, [pc, #52]	; (801ada4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 801ad70:	8809      	ldrh	r1, [r1, #0]
 801ad72:	4411      	add	r1, r2
 801ad74:	428b      	cmp	r3, r1
 801ad76:	da0d      	bge.n	801ad94 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 801ad78:	1a9b      	subs	r3, r3, r2
 801ad7a:	4a0b      	ldr	r2, [pc, #44]	; (801ada8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 801ad7c:	210e      	movs	r1, #14
 801ad7e:	6812      	ldr	r2, [r2, #0]
 801ad80:	fb01 2303 	mla	r3, r1, r3, r2
 801ad84:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801ad88:	891a      	ldrh	r2, [r3, #8]
 801ad8a:	4291      	cmp	r1, r2
 801ad8c:	db04      	blt.n	801ad98 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 801ad8e:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801ad92:	e7e6      	b.n	801ad62 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x26>
 801ad94:	2000      	movs	r0, #0
 801ad96:	4770      	bx	lr
 801ad98:	2001      	movs	r0, #1
 801ad9a:	4770      	bx	lr
 801ad9c:	200244a8 	.word	0x200244a8
 801ada0:	200244b0 	.word	0x200244b0
 801ada4:	200244ac 	.word	0x200244ac
 801ada8:	20024490 	.word	0x20024490

0801adac <_ZNK8touchgfx6Bitmap7getDataEv>:
 801adac:	4a12      	ldr	r2, [pc, #72]	; (801adf8 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801adae:	8803      	ldrh	r3, [r0, #0]
 801adb0:	8811      	ldrh	r1, [r2, #0]
 801adb2:	428b      	cmp	r3, r1
 801adb4:	d20b      	bcs.n	801adce <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 801adb6:	4a11      	ldr	r2, [pc, #68]	; (801adfc <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801adb8:	6812      	ldr	r2, [r2, #0]
 801adba:	b112      	cbz	r2, 801adc2 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801adbc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801adc0:	b9c0      	cbnz	r0, 801adf4 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 801adc2:	4a0f      	ldr	r2, [pc, #60]	; (801ae00 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801adc4:	6811      	ldr	r1, [r2, #0]
 801adc6:	2214      	movs	r2, #20
 801adc8:	4353      	muls	r3, r2
 801adca:	58c8      	ldr	r0, [r1, r3]
 801adcc:	4770      	bx	lr
 801adce:	4a0d      	ldr	r2, [pc, #52]	; (801ae04 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801add0:	8812      	ldrh	r2, [r2, #0]
 801add2:	440a      	add	r2, r1
 801add4:	4293      	cmp	r3, r2
 801add6:	da04      	bge.n	801ade2 <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 801add8:	4a08      	ldr	r2, [pc, #32]	; (801adfc <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801adda:	6812      	ldr	r2, [r2, #0]
 801addc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801ade0:	4770      	bx	lr
 801ade2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801ade6:	4293      	cmp	r3, r2
 801ade8:	d103      	bne.n	801adf2 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801adea:	4b07      	ldr	r3, [pc, #28]	; (801ae08 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801adec:	681b      	ldr	r3, [r3, #0]
 801adee:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801adf0:	4770      	bx	lr
 801adf2:	2000      	movs	r0, #0
 801adf4:	4770      	bx	lr
 801adf6:	bf00      	nop
 801adf8:	200244a8 	.word	0x200244a8
 801adfc:	2002448c 	.word	0x2002448c
 801ae00:	200244b0 	.word	0x200244b0
 801ae04:	200244ac 	.word	0x200244ac
 801ae08:	20024428 	.word	0x20024428

0801ae0c <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801ae0c:	4b24      	ldr	r3, [pc, #144]	; (801aea0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 801ae0e:	8802      	ldrh	r2, [r0, #0]
 801ae10:	8818      	ldrh	r0, [r3, #0]
 801ae12:	4282      	cmp	r2, r0
 801ae14:	d221      	bcs.n	801ae5a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 801ae16:	4b23      	ldr	r3, [pc, #140]	; (801aea4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801ae18:	6819      	ldr	r1, [r3, #0]
 801ae1a:	2314      	movs	r3, #20
 801ae1c:	fb03 1302 	mla	r3, r3, r2, r1
 801ae20:	6858      	ldr	r0, [r3, #4]
 801ae22:	2800      	cmp	r0, #0
 801ae24:	d03a      	beq.n	801ae9c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801ae26:	4920      	ldr	r1, [pc, #128]	; (801aea8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801ae28:	6809      	ldr	r1, [r1, #0]
 801ae2a:	2900      	cmp	r1, #0
 801ae2c:	d036      	beq.n	801ae9c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801ae2e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801ae32:	2900      	cmp	r1, #0
 801ae34:	d032      	beq.n	801ae9c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801ae36:	891a      	ldrh	r2, [r3, #8]
 801ae38:	8958      	ldrh	r0, [r3, #10]
 801ae3a:	4350      	muls	r0, r2
 801ae3c:	7c5a      	ldrb	r2, [r3, #17]
 801ae3e:	7cdb      	ldrb	r3, [r3, #19]
 801ae40:	0952      	lsrs	r2, r2, #5
 801ae42:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801ae46:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801ae4a:	2b0b      	cmp	r3, #11
 801ae4c:	bf18      	it	ne
 801ae4e:	0040      	lslne	r0, r0, #1
 801ae50:	3003      	adds	r0, #3
 801ae52:	f020 0003 	bic.w	r0, r0, #3
 801ae56:	4408      	add	r0, r1
 801ae58:	4770      	bx	lr
 801ae5a:	4b14      	ldr	r3, [pc, #80]	; (801aeac <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801ae5c:	881b      	ldrh	r3, [r3, #0]
 801ae5e:	4403      	add	r3, r0
 801ae60:	429a      	cmp	r2, r3
 801ae62:	da1a      	bge.n	801ae9a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801ae64:	4b12      	ldr	r3, [pc, #72]	; (801aeb0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801ae66:	1a10      	subs	r0, r2, r0
 801ae68:	210e      	movs	r1, #14
 801ae6a:	681b      	ldr	r3, [r3, #0]
 801ae6c:	fb01 3000 	mla	r0, r1, r0, r3
 801ae70:	7b03      	ldrb	r3, [r0, #12]
 801ae72:	f003 031f 	and.w	r3, r3, #31
 801ae76:	2b0b      	cmp	r3, #11
 801ae78:	d10b      	bne.n	801ae92 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 801ae7a:	8903      	ldrh	r3, [r0, #8]
 801ae7c:	8940      	ldrh	r0, [r0, #10]
 801ae7e:	4358      	muls	r0, r3
 801ae80:	4b09      	ldr	r3, [pc, #36]	; (801aea8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801ae82:	3003      	adds	r0, #3
 801ae84:	6819      	ldr	r1, [r3, #0]
 801ae86:	f020 0303 	bic.w	r3, r0, #3
 801ae8a:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801ae8e:	4418      	add	r0, r3
 801ae90:	4770      	bx	lr
 801ae92:	2b0d      	cmp	r3, #13
 801ae94:	d101      	bne.n	801ae9a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801ae96:	300d      	adds	r0, #13
 801ae98:	4770      	bx	lr
 801ae9a:	2000      	movs	r0, #0
 801ae9c:	4770      	bx	lr
 801ae9e:	bf00      	nop
 801aea0:	200244a8 	.word	0x200244a8
 801aea4:	200244b0 	.word	0x200244b0
 801aea8:	2002448c 	.word	0x2002448c
 801aeac:	200244ac 	.word	0x200244ac
 801aeb0:	20024490 	.word	0x20024490

0801aeb4 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801aeb4:	4a17      	ldr	r2, [pc, #92]	; (801af14 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 801aeb6:	b510      	push	{r4, lr}
 801aeb8:	8803      	ldrh	r3, [r0, #0]
 801aeba:	8812      	ldrh	r2, [r2, #0]
 801aebc:	4293      	cmp	r3, r2
 801aebe:	d20c      	bcs.n	801aeda <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801aec0:	4a15      	ldr	r2, [pc, #84]	; (801af18 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 801aec2:	2114      	movs	r1, #20
 801aec4:	6812      	ldr	r2, [r2, #0]
 801aec6:	fb01 2303 	mla	r3, r1, r3, r2
 801aeca:	7c58      	ldrb	r0, [r3, #17]
 801aecc:	0942      	lsrs	r2, r0, #5
 801aece:	7cd8      	ldrb	r0, [r3, #19]
 801aed0:	f3c0 1042 	ubfx	r0, r0, #5, #3
 801aed4:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801aed8:	bd10      	pop	{r4, pc}
 801aeda:	4910      	ldr	r1, [pc, #64]	; (801af1c <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801aedc:	8809      	ldrh	r1, [r1, #0]
 801aede:	4411      	add	r1, r2
 801aee0:	428b      	cmp	r3, r1
 801aee2:	da09      	bge.n	801aef8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801aee4:	1a9b      	subs	r3, r3, r2
 801aee6:	4a0e      	ldr	r2, [pc, #56]	; (801af20 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801aee8:	210e      	movs	r1, #14
 801aeea:	6812      	ldr	r2, [r2, #0]
 801aeec:	fb01 2303 	mla	r3, r1, r3, r2
 801aef0:	7b18      	ldrb	r0, [r3, #12]
 801aef2:	f000 001f 	and.w	r0, r0, #31
 801aef6:	e7ef      	b.n	801aed8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 801aef8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801aefc:	4293      	cmp	r3, r2
 801aefe:	d106      	bne.n	801af0e <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 801af00:	f7f3 f81e 	bl	800df40 <_ZN8touchgfx3HAL3lcdEv>
 801af04:	6803      	ldr	r3, [r0, #0]
 801af06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801af0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801af0c:	4718      	bx	r3
 801af0e:	2000      	movs	r0, #0
 801af10:	e7e2      	b.n	801aed8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 801af12:	bf00      	nop
 801af14:	200244a8 	.word	0x200244a8
 801af18:	200244b0 	.word	0x200244b0
 801af1c:	200244ac 	.word	0x200244ac
 801af20:	20024490 	.word	0x20024490

0801af24 <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 801af24:	2010      	movs	r0, #16
 801af26:	4770      	bx	lr

0801af28 <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 801af28:	2000      	movs	r0, #0
 801af2a:	4770      	bx	lr

0801af2c <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 801af2c:	4b02      	ldr	r3, [pc, #8]	; (801af38 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0xc>)
 801af2e:	8818      	ldrh	r0, [r3, #0]
 801af30:	0040      	lsls	r0, r0, #1
 801af32:	b280      	uxth	r0, r0
 801af34:	4770      	bx	lr
 801af36:	bf00      	nop
 801af38:	20024422 	.word	0x20024422

0801af3c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801af3c:	2bff      	cmp	r3, #255	; 0xff
 801af3e:	d050      	beq.n	801afe2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 801af40:	2a0b      	cmp	r2, #11
 801af42:	d04a      	beq.n	801afda <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801af44:	d80e      	bhi.n	801af64 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 801af46:	2a03      	cmp	r2, #3
 801af48:	d03f      	beq.n	801afca <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801af4a:	d804      	bhi.n	801af56 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801af4c:	2a01      	cmp	r2, #1
 801af4e:	d03e      	beq.n	801afce <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 801af50:	d93f      	bls.n	801afd2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801af52:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801af54:	4770      	bx	lr
 801af56:	2a09      	cmp	r2, #9
 801af58:	d03f      	beq.n	801afda <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801af5a:	d83c      	bhi.n	801afd6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801af5c:	2a08      	cmp	r2, #8
 801af5e:	d03a      	beq.n	801afd6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801af60:	2000      	movs	r0, #0
 801af62:	4770      	bx	lr
 801af64:	2a2f      	cmp	r2, #47	; 0x2f
 801af66:	d024      	beq.n	801afb2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 801af68:	d80d      	bhi.n	801af86 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 801af6a:	2a2d      	cmp	r2, #45	; 0x2d
 801af6c:	d014      	beq.n	801af98 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5c>
 801af6e:	d826      	bhi.n	801afbe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 801af70:	2a2c      	cmp	r2, #44	; 0x2c
 801af72:	d1f5      	bne.n	801af60 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801af74:	684b      	ldr	r3, [r1, #4]
 801af76:	781b      	ldrb	r3, [r3, #0]
 801af78:	2b01      	cmp	r3, #1
 801af7a:	d018      	beq.n	801afae <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 801af7c:	d323      	bcc.n	801afc6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 801af7e:	2b02      	cmp	r3, #2
 801af80:	d1ee      	bne.n	801af60 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801af82:	6880      	ldr	r0, [r0, #8]
 801af84:	4770      	bx	lr
 801af86:	2a31      	cmp	r2, #49	; 0x31
 801af88:	d004      	beq.n	801af94 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x58>
 801af8a:	d328      	bcc.n	801afde <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801af8c:	2a32      	cmp	r2, #50	; 0x32
 801af8e:	d026      	beq.n	801afde <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801af90:	2a33      	cmp	r2, #51	; 0x33
 801af92:	d1e5      	bne.n	801af60 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801af94:	6f00      	ldr	r0, [r0, #112]	; 0x70
 801af96:	4770      	bx	lr
 801af98:	684b      	ldr	r3, [r1, #4]
 801af9a:	781b      	ldrb	r3, [r3, #0]
 801af9c:	2b01      	cmp	r3, #1
 801af9e:	d004      	beq.n	801afaa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801afa0:	d30b      	bcc.n	801afba <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801afa2:	2b02      	cmp	r3, #2
 801afa4:	d1dc      	bne.n	801af60 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801afa6:	6900      	ldr	r0, [r0, #16]
 801afa8:	4770      	bx	lr
 801afaa:	6a00      	ldr	r0, [r0, #32]
 801afac:	4770      	bx	lr
 801afae:	6980      	ldr	r0, [r0, #24]
 801afb0:	4770      	bx	lr
 801afb2:	684b      	ldr	r3, [r1, #4]
 801afb4:	781b      	ldrb	r3, [r3, #0]
 801afb6:	2b00      	cmp	r3, #0
 801afb8:	d1d2      	bne.n	801af60 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801afba:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801afbc:	4770      	bx	lr
 801afbe:	684b      	ldr	r3, [r1, #4]
 801afc0:	781b      	ldrb	r3, [r3, #0]
 801afc2:	2b00      	cmp	r3, #0
 801afc4:	d1cc      	bne.n	801af60 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801afc6:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801afc8:	4770      	bx	lr
 801afca:	6c80      	ldr	r0, [r0, #72]	; 0x48
 801afcc:	4770      	bx	lr
 801afce:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801afd0:	4770      	bx	lr
 801afd2:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801afd4:	4770      	bx	lr
 801afd6:	6d80      	ldr	r0, [r0, #88]	; 0x58
 801afd8:	4770      	bx	lr
 801afda:	6e00      	ldr	r0, [r0, #96]	; 0x60
 801afdc:	4770      	bx	lr
 801afde:	6e80      	ldr	r0, [r0, #104]	; 0x68
 801afe0:	4770      	bx	lr
 801afe2:	2a0b      	cmp	r2, #11
 801afe4:	d049      	beq.n	801b07a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801afe6:	d80e      	bhi.n	801b006 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xca>
 801afe8:	2a03      	cmp	r2, #3
 801afea:	d040      	beq.n	801b06e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801afec:	d804      	bhi.n	801aff8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbc>
 801afee:	2a01      	cmp	r2, #1
 801aff0:	d03f      	beq.n	801b072 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 801aff2:	d940      	bls.n	801b076 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801aff4:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801aff6:	4770      	bx	lr
 801aff8:	2a09      	cmp	r2, #9
 801affa:	d03e      	beq.n	801b07a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801affc:	d801      	bhi.n	801b002 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc6>
 801affe:	2a08      	cmp	r2, #8
 801b000:	d1ae      	bne.n	801af60 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801b002:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 801b004:	4770      	bx	lr
 801b006:	2a2f      	cmp	r2, #47	; 0x2f
 801b008:	d024      	beq.n	801b054 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 801b00a:	d80d      	bhi.n	801b028 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 801b00c:	2a2d      	cmp	r2, #45	; 0x2d
 801b00e:	d014      	beq.n	801b03a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfe>
 801b010:	d826      	bhi.n	801b060 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x124>
 801b012:	2a2c      	cmp	r2, #44	; 0x2c
 801b014:	d1a4      	bne.n	801af60 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801b016:	684b      	ldr	r3, [r1, #4]
 801b018:	781b      	ldrb	r3, [r3, #0]
 801b01a:	2b01      	cmp	r3, #1
 801b01c:	d018      	beq.n	801b050 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x114>
 801b01e:	d324      	bcc.n	801b06a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 801b020:	2b02      	cmp	r3, #2
 801b022:	d19d      	bne.n	801af60 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801b024:	68c0      	ldr	r0, [r0, #12]
 801b026:	4770      	bx	lr
 801b028:	2a31      	cmp	r2, #49	; 0x31
 801b02a:	d004      	beq.n	801b036 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfa>
 801b02c:	d327      	bcc.n	801b07e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 801b02e:	2a32      	cmp	r2, #50	; 0x32
 801b030:	d025      	beq.n	801b07e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 801b032:	2a33      	cmp	r2, #51	; 0x33
 801b034:	d194      	bne.n	801af60 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801b036:	6f40      	ldr	r0, [r0, #116]	; 0x74
 801b038:	4770      	bx	lr
 801b03a:	684b      	ldr	r3, [r1, #4]
 801b03c:	781b      	ldrb	r3, [r3, #0]
 801b03e:	2b01      	cmp	r3, #1
 801b040:	d004      	beq.n	801b04c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 801b042:	d30b      	bcc.n	801b05c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x120>
 801b044:	2b02      	cmp	r3, #2
 801b046:	d18b      	bne.n	801af60 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801b048:	6940      	ldr	r0, [r0, #20]
 801b04a:	4770      	bx	lr
 801b04c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801b04e:	4770      	bx	lr
 801b050:	69c0      	ldr	r0, [r0, #28]
 801b052:	4770      	bx	lr
 801b054:	684b      	ldr	r3, [r1, #4]
 801b056:	781b      	ldrb	r3, [r3, #0]
 801b058:	2b00      	cmp	r3, #0
 801b05a:	d181      	bne.n	801af60 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801b05c:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801b05e:	4770      	bx	lr
 801b060:	684b      	ldr	r3, [r1, #4]
 801b062:	781b      	ldrb	r3, [r3, #0]
 801b064:	2b00      	cmp	r3, #0
 801b066:	f47f af7b 	bne.w	801af60 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801b06a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801b06c:	4770      	bx	lr
 801b06e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 801b070:	4770      	bx	lr
 801b072:	6d40      	ldr	r0, [r0, #84]	; 0x54
 801b074:	4770      	bx	lr
 801b076:	6c40      	ldr	r0, [r0, #68]	; 0x44
 801b078:	4770      	bx	lr
 801b07a:	6e40      	ldr	r0, [r0, #100]	; 0x64
 801b07c:	4770      	bx	lr
 801b07e:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 801b080:	4770      	bx	lr

0801b082 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b082:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b086:	b087      	sub	sp, #28
 801b088:	9815      	ldr	r0, [sp, #84]	; 0x54
 801b08a:	9205      	str	r2, [sp, #20]
 801b08c:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801b090:	9101      	str	r1, [sp, #4]
 801b092:	9202      	str	r2, [sp, #8]
 801b094:	6841      	ldr	r1, [r0, #4]
 801b096:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 801b09a:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801b09e:	fb01 2404 	mla	r4, r1, r4, r2
 801b0a2:	6802      	ldr	r2, [r0, #0]
 801b0a4:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801b0a8:	f8de 2000 	ldr.w	r2, [lr]
 801b0ac:	9203      	str	r2, [sp, #12]
 801b0ae:	f8de 2004 	ldr.w	r2, [lr, #4]
 801b0b2:	3204      	adds	r2, #4
 801b0b4:	9204      	str	r2, [sp, #16]
 801b0b6:	9a02      	ldr	r2, [sp, #8]
 801b0b8:	43d6      	mvns	r6, r2
 801b0ba:	b2f6      	uxtb	r6, r6
 801b0bc:	9a01      	ldr	r2, [sp, #4]
 801b0be:	2a00      	cmp	r2, #0
 801b0c0:	dc03      	bgt.n	801b0ca <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801b0c2:	9a05      	ldr	r2, [sp, #20]
 801b0c4:	2a00      	cmp	r2, #0
 801b0c6:	f340 8129 	ble.w	801b31c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801b0ca:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801b0cc:	f9be c008 	ldrsh.w	ip, [lr, #8]
 801b0d0:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801b0d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801b0d6:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 801b0da:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801b0de:	2b00      	cmp	r3, #0
 801b0e0:	dd0e      	ble.n	801b100 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801b0e2:	1408      	asrs	r0, r1, #16
 801b0e4:	d405      	bmi.n	801b0f2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801b0e6:	4560      	cmp	r0, ip
 801b0e8:	da03      	bge.n	801b0f2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801b0ea:	1410      	asrs	r0, r2, #16
 801b0ec:	d401      	bmi.n	801b0f2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801b0ee:	42b8      	cmp	r0, r7
 801b0f0:	db07      	blt.n	801b102 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801b0f2:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801b0f4:	3b01      	subs	r3, #1
 801b0f6:	3402      	adds	r4, #2
 801b0f8:	4401      	add	r1, r0
 801b0fa:	9814      	ldr	r0, [sp, #80]	; 0x50
 801b0fc:	4402      	add	r2, r0
 801b0fe:	e7ee      	b.n	801b0de <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801b100:	d071      	beq.n	801b1e6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801b102:	1e58      	subs	r0, r3, #1
 801b104:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801b106:	fb05 1500 	mla	r5, r5, r0, r1
 801b10a:	142d      	asrs	r5, r5, #16
 801b10c:	d45f      	bmi.n	801b1ce <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801b10e:	4565      	cmp	r5, ip
 801b110:	da5d      	bge.n	801b1ce <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801b112:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801b114:	fb05 2000 	mla	r0, r5, r0, r2
 801b118:	1400      	asrs	r0, r0, #16
 801b11a:	d458      	bmi.n	801b1ce <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801b11c:	42b8      	cmp	r0, r7
 801b11e:	da56      	bge.n	801b1ce <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801b120:	4699      	mov	r9, r3
 801b122:	46a2      	mov	sl, r4
 801b124:	f8bd b008 	ldrh.w	fp, [sp, #8]
 801b128:	f1b9 0f00 	cmp.w	r9, #0
 801b12c:	dd57      	ble.n	801b1de <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 801b12e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801b132:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801b136:	9803      	ldr	r0, [sp, #12]
 801b138:	140d      	asrs	r5, r1, #16
 801b13a:	f109 39ff 	add.w	r9, r9, #4294967295
 801b13e:	fb07 000c 	mla	r0, r7, ip, r0
 801b142:	5d40      	ldrb	r0, [r0, r5]
 801b144:	9d04      	ldr	r5, [sp, #16]
 801b146:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801b14a:	f8ba 5000 	ldrh.w	r5, [sl]
 801b14e:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801b152:	122f      	asrs	r7, r5, #8
 801b154:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801b158:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801b15c:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801b160:	00ed      	lsls	r5, r5, #3
 801b162:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 801b166:	fb17 f706 	smulbb	r7, r7, r6
 801b16a:	b2ed      	uxtb	r5, r5
 801b16c:	fb18 f806 	smulbb	r8, r8, r6
 801b170:	fb0c 7c0b 	mla	ip, ip, fp, r7
 801b174:	10c7      	asrs	r7, r0, #3
 801b176:	fb15 f506 	smulbb	r5, r5, r6
 801b17a:	00c0      	lsls	r0, r0, #3
 801b17c:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801b180:	fa1f fc8c 	uxth.w	ip, ip
 801b184:	b2c0      	uxtb	r0, r0
 801b186:	fb07 870b 	mla	r7, r7, fp, r8
 801b18a:	fb00 500b 	mla	r0, r0, fp, r5
 801b18e:	f10c 0501 	add.w	r5, ip, #1
 801b192:	b2bf      	uxth	r7, r7
 801b194:	b280      	uxth	r0, r0
 801b196:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801b19a:	f107 0801 	add.w	r8, r7, #1
 801b19e:	1c45      	adds	r5, r0, #1
 801b1a0:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 801b1a4:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801b1a8:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801b1ac:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801b1ae:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801b1b2:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801b1b6:	4401      	add	r1, r0
 801b1b8:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801b1bc:	9814      	ldr	r0, [sp, #80]	; 0x50
 801b1be:	ea45 0c0c 	orr.w	ip, r5, ip
 801b1c2:	4402      	add	r2, r0
 801b1c4:	ea4c 0c08 	orr.w	ip, ip, r8
 801b1c8:	f82a cb02 	strh.w	ip, [sl], #2
 801b1cc:	e7ac      	b.n	801b128 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801b1ce:	f04f 0800 	mov.w	r8, #0
 801b1d2:	f8bd a008 	ldrh.w	sl, [sp, #8]
 801b1d6:	eb03 0008 	add.w	r0, r3, r8
 801b1da:	2800      	cmp	r0, #0
 801b1dc:	dc41      	bgt.n	801b262 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801b1de:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b1e2:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801b1e6:	9b01      	ldr	r3, [sp, #4]
 801b1e8:	2b00      	cmp	r3, #0
 801b1ea:	f340 8097 	ble.w	801b31c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801b1ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801b1f2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b1f4:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b1f8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b1fc:	eef0 6a62 	vmov.f32	s13, s5
 801b200:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801b204:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b208:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b20c:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 801b210:	eef0 6a43 	vmov.f32	s13, s6
 801b214:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b218:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 801b21c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b220:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b224:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b228:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b22c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b230:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b234:	ee12 2a90 	vmov	r2, s5
 801b238:	eef0 2a47 	vmov.f32	s5, s14
 801b23c:	fb92 f3f3 	sdiv	r3, r2, r3
 801b240:	ee13 2a10 	vmov	r2, s6
 801b244:	9313      	str	r3, [sp, #76]	; 0x4c
 801b246:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b248:	eeb0 3a67 	vmov.f32	s6, s15
 801b24c:	fb92 f3f3 	sdiv	r3, r2, r3
 801b250:	9314      	str	r3, [sp, #80]	; 0x50
 801b252:	9b01      	ldr	r3, [sp, #4]
 801b254:	9a05      	ldr	r2, [sp, #20]
 801b256:	3b01      	subs	r3, #1
 801b258:	9301      	str	r3, [sp, #4]
 801b25a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b25c:	bf08      	it	eq
 801b25e:	4613      	moveq	r3, r2
 801b260:	e72c      	b.n	801b0bc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801b262:	140f      	asrs	r7, r1, #16
 801b264:	d453      	bmi.n	801b30e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801b266:	f8de 5008 	ldr.w	r5, [lr, #8]
 801b26a:	42bd      	cmp	r5, r7
 801b26c:	dd4f      	ble.n	801b30e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801b26e:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801b272:	d44c      	bmi.n	801b30e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801b274:	f8de 000c 	ldr.w	r0, [lr, #12]
 801b278:	4560      	cmp	r0, ip
 801b27a:	dd48      	ble.n	801b30e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801b27c:	9803      	ldr	r0, [sp, #12]
 801b27e:	b22d      	sxth	r5, r5
 801b280:	fb0c 0505 	mla	r5, ip, r5, r0
 801b284:	5de8      	ldrb	r0, [r5, r7]
 801b286:	9d04      	ldr	r5, [sp, #16]
 801b288:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801b28c:	f06f 0501 	mvn.w	r5, #1
 801b290:	fb05 fb08 	mul.w	fp, r5, r8
 801b294:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801b298:	f834 500b 	ldrh.w	r5, [r4, fp]
 801b29c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801b2a0:	122f      	asrs	r7, r5, #8
 801b2a2:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801b2a6:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801b2aa:	00ed      	lsls	r5, r5, #3
 801b2ac:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801b2b0:	fb17 f706 	smulbb	r7, r7, r6
 801b2b4:	b2ed      	uxtb	r5, r5
 801b2b6:	fb19 f906 	smulbb	r9, r9, r6
 801b2ba:	fb0c 7c0a 	mla	ip, ip, sl, r7
 801b2be:	10c7      	asrs	r7, r0, #3
 801b2c0:	fb15 f506 	smulbb	r5, r5, r6
 801b2c4:	00c0      	lsls	r0, r0, #3
 801b2c6:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801b2ca:	fa1f fc8c 	uxth.w	ip, ip
 801b2ce:	b2c0      	uxtb	r0, r0
 801b2d0:	fb07 970a 	mla	r7, r7, sl, r9
 801b2d4:	fb00 500a 	mla	r0, r0, sl, r5
 801b2d8:	f10c 0501 	add.w	r5, ip, #1
 801b2dc:	b2bf      	uxth	r7, r7
 801b2de:	b280      	uxth	r0, r0
 801b2e0:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801b2e4:	f107 0901 	add.w	r9, r7, #1
 801b2e8:	1c45      	adds	r5, r0, #1
 801b2ea:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 801b2ee:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801b2f2:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801b2f6:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801b2fa:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801b2fe:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801b302:	ea45 0c0c 	orr.w	ip, r5, ip
 801b306:	ea4c 0c09 	orr.w	ip, ip, r9
 801b30a:	f824 c00b 	strh.w	ip, [r4, fp]
 801b30e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801b310:	f108 38ff 	add.w	r8, r8, #4294967295
 801b314:	4401      	add	r1, r0
 801b316:	9814      	ldr	r0, [sp, #80]	; 0x50
 801b318:	4402      	add	r2, r0
 801b31a:	e75c      	b.n	801b1d6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801b31c:	b007      	add	sp, #28
 801b31e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b322 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b322:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b326:	b085      	sub	sp, #20
 801b328:	4693      	mov	fp, r2
 801b32a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b32e:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801b330:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801b332:	6870      	ldr	r0, [r6, #4]
 801b334:	9100      	str	r1, [sp, #0]
 801b336:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801b33a:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 801b33e:	fb00 2404 	mla	r4, r0, r4, r2
 801b342:	6832      	ldr	r2, [r6, #0]
 801b344:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801b348:	682a      	ldr	r2, [r5, #0]
 801b34a:	9201      	str	r2, [sp, #4]
 801b34c:	686a      	ldr	r2, [r5, #4]
 801b34e:	3204      	adds	r2, #4
 801b350:	9202      	str	r2, [sp, #8]
 801b352:	9a00      	ldr	r2, [sp, #0]
 801b354:	2a00      	cmp	r2, #0
 801b356:	dc03      	bgt.n	801b360 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801b358:	f1bb 0f00 	cmp.w	fp, #0
 801b35c:	f340 80a0 	ble.w	801b4a0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 801b360:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b362:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801b366:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801b36a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801b36c:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801b370:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801b374:	2b00      	cmp	r3, #0
 801b376:	dd0c      	ble.n	801b392 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801b378:	1406      	asrs	r6, r0, #16
 801b37a:	d405      	bmi.n	801b388 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801b37c:	454e      	cmp	r6, r9
 801b37e:	da03      	bge.n	801b388 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801b380:	1416      	asrs	r6, r2, #16
 801b382:	d401      	bmi.n	801b388 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801b384:	4546      	cmp	r6, r8
 801b386:	db05      	blt.n	801b394 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801b388:	4470      	add	r0, lr
 801b38a:	4462      	add	r2, ip
 801b38c:	3b01      	subs	r3, #1
 801b38e:	3402      	adds	r4, #2
 801b390:	e7f0      	b.n	801b374 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801b392:	d00f      	beq.n	801b3b4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801b394:	1e5e      	subs	r6, r3, #1
 801b396:	fb0e 0706 	mla	r7, lr, r6, r0
 801b39a:	143f      	asrs	r7, r7, #16
 801b39c:	d541      	bpl.n	801b422 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
 801b39e:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 801b3a2:	4698      	mov	r8, r3
 801b3a4:	9603      	str	r6, [sp, #12]
 801b3a6:	f1b8 0f00 	cmp.w	r8, #0
 801b3aa:	dc59      	bgt.n	801b460 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801b3ac:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b3b0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801b3b4:	9b00      	ldr	r3, [sp, #0]
 801b3b6:	2b00      	cmp	r3, #0
 801b3b8:	dd72      	ble.n	801b4a0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 801b3ba:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b3be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b3c0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b3c4:	eeb0 6a62 	vmov.f32	s12, s5
 801b3c8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b3cc:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b3d0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b3d4:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801b3d8:	eeb0 6a43 	vmov.f32	s12, s6
 801b3dc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b3e0:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801b3e4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b3e8:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b3ec:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b3f0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b3f4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b3f8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b3fc:	ee12 2a90 	vmov	r2, s5
 801b400:	eef0 2a47 	vmov.f32	s5, s14
 801b404:	fb92 fef3 	sdiv	lr, r2, r3
 801b408:	ee13 2a10 	vmov	r2, s6
 801b40c:	eeb0 3a67 	vmov.f32	s6, s15
 801b410:	fb92 fcf3 	sdiv	ip, r2, r3
 801b414:	9b00      	ldr	r3, [sp, #0]
 801b416:	3b01      	subs	r3, #1
 801b418:	9300      	str	r3, [sp, #0]
 801b41a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b41c:	bf08      	it	eq
 801b41e:	465b      	moveq	r3, fp
 801b420:	e797      	b.n	801b352 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801b422:	454f      	cmp	r7, r9
 801b424:	dabb      	bge.n	801b39e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801b426:	fb0c 2606 	mla	r6, ip, r6, r2
 801b42a:	1436      	asrs	r6, r6, #16
 801b42c:	d4b7      	bmi.n	801b39e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801b42e:	4546      	cmp	r6, r8
 801b430:	dab5      	bge.n	801b39e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801b432:	461e      	mov	r6, r3
 801b434:	46a0      	mov	r8, r4
 801b436:	2e00      	cmp	r6, #0
 801b438:	ddb8      	ble.n	801b3ac <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801b43a:	1417      	asrs	r7, r2, #16
 801b43c:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 801b440:	9901      	ldr	r1, [sp, #4]
 801b442:	ea4f 4920 	mov.w	r9, r0, asr #16
 801b446:	4462      	add	r2, ip
 801b448:	4470      	add	r0, lr
 801b44a:	fb0a 1707 	mla	r7, sl, r7, r1
 801b44e:	9902      	ldr	r1, [sp, #8]
 801b450:	3e01      	subs	r6, #1
 801b452:	f817 7009 	ldrb.w	r7, [r7, r9]
 801b456:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 801b45a:	f828 7b02 	strh.w	r7, [r8], #2
 801b45e:	e7ea      	b.n	801b436 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801b460:	ea5f 4920 	movs.w	r9, r0, asr #16
 801b464:	d417      	bmi.n	801b496 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801b466:	68ae      	ldr	r6, [r5, #8]
 801b468:	454e      	cmp	r6, r9
 801b46a:	dd14      	ble.n	801b496 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801b46c:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801b470:	d411      	bmi.n	801b496 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801b472:	68ef      	ldr	r7, [r5, #12]
 801b474:	4557      	cmp	r7, sl
 801b476:	dd0e      	ble.n	801b496 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801b478:	9f01      	ldr	r7, [sp, #4]
 801b47a:	b236      	sxth	r6, r6
 801b47c:	f06f 0101 	mvn.w	r1, #1
 801b480:	fb0a 7606 	mla	r6, sl, r6, r7
 801b484:	9f02      	ldr	r7, [sp, #8]
 801b486:	f816 6009 	ldrb.w	r6, [r6, r9]
 801b48a:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801b48e:	fb01 f608 	mul.w	r6, r1, r8
 801b492:	9903      	ldr	r1, [sp, #12]
 801b494:	538f      	strh	r7, [r1, r6]
 801b496:	4470      	add	r0, lr
 801b498:	4462      	add	r2, ip
 801b49a:	f108 38ff 	add.w	r8, r8, #4294967295
 801b49e:	e782      	b.n	801b3a6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801b4a0:	b005      	add	sp, #20
 801b4a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b4a6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b4a6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b4aa:	b087      	sub	sp, #28
 801b4ac:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801b4ae:	9205      	str	r2, [sp, #20]
 801b4b0:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801b4b4:	9102      	str	r1, [sp, #8]
 801b4b6:	9203      	str	r2, [sp, #12]
 801b4b8:	6861      	ldr	r1, [r4, #4]
 801b4ba:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801b4be:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 801b4c2:	fb01 2000 	mla	r0, r1, r0, r2
 801b4c6:	6822      	ldr	r2, [r4, #0]
 801b4c8:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 801b4cc:	9200      	str	r2, [sp, #0]
 801b4ce:	f8dc 2000 	ldr.w	r2, [ip]
 801b4d2:	9204      	str	r2, [sp, #16]
 801b4d4:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801b4d8:	3204      	adds	r2, #4
 801b4da:	9201      	str	r2, [sp, #4]
 801b4dc:	9a03      	ldr	r2, [sp, #12]
 801b4de:	43d5      	mvns	r5, r2
 801b4e0:	b2ed      	uxtb	r5, r5
 801b4e2:	9a02      	ldr	r2, [sp, #8]
 801b4e4:	2a00      	cmp	r2, #0
 801b4e6:	dc03      	bgt.n	801b4f0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801b4e8:	9a05      	ldr	r2, [sp, #20]
 801b4ea:	2a00      	cmp	r2, #0
 801b4ec:	f340 812c 	ble.w	801b748 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801b4f0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801b4f2:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801b4f6:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801b4fa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801b4fc:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801b500:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801b504:	2b00      	cmp	r3, #0
 801b506:	dd10      	ble.n	801b52a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801b508:	140c      	asrs	r4, r1, #16
 801b50a:	d405      	bmi.n	801b518 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801b50c:	4574      	cmp	r4, lr
 801b50e:	da03      	bge.n	801b518 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801b510:	1414      	asrs	r4, r2, #16
 801b512:	d401      	bmi.n	801b518 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801b514:	42bc      	cmp	r4, r7
 801b516:	db09      	blt.n	801b52c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801b518:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801b51a:	3b01      	subs	r3, #1
 801b51c:	9800      	ldr	r0, [sp, #0]
 801b51e:	4421      	add	r1, r4
 801b520:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801b522:	3002      	adds	r0, #2
 801b524:	4422      	add	r2, r4
 801b526:	9000      	str	r0, [sp, #0]
 801b528:	e7ec      	b.n	801b504 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801b52a:	d071      	beq.n	801b610 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 801b52c:	1e5c      	subs	r4, r3, #1
 801b52e:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801b530:	fb06 1604 	mla	r6, r6, r4, r1
 801b534:	1436      	asrs	r6, r6, #16
 801b536:	d45d      	bmi.n	801b5f4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801b538:	4576      	cmp	r6, lr
 801b53a:	da5b      	bge.n	801b5f4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801b53c:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801b53e:	fb06 2404 	mla	r4, r6, r4, r2
 801b542:	1424      	asrs	r4, r4, #16
 801b544:	d456      	bmi.n	801b5f4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801b546:	42bc      	cmp	r4, r7
 801b548:	da54      	bge.n	801b5f4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801b54a:	4698      	mov	r8, r3
 801b54c:	f8dd 9000 	ldr.w	r9, [sp]
 801b550:	f8bd a00c 	ldrh.w	sl, [sp, #12]
 801b554:	f1b8 0f00 	cmp.w	r8, #0
 801b558:	dd54      	ble.n	801b604 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801b55a:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801b55e:	1414      	asrs	r4, r2, #16
 801b560:	9804      	ldr	r0, [sp, #16]
 801b562:	140e      	asrs	r6, r1, #16
 801b564:	f108 38ff 	add.w	r8, r8, #4294967295
 801b568:	fb07 0404 	mla	r4, r7, r4, r0
 801b56c:	9801      	ldr	r0, [sp, #4]
 801b56e:	f814 e006 	ldrb.w	lr, [r4, r6]
 801b572:	f8b9 4000 	ldrh.w	r4, [r9]
 801b576:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801b57a:	1227      	asrs	r7, r4, #8
 801b57c:	eb00 0b0e 	add.w	fp, r0, lr
 801b580:	f810 e00e 	ldrb.w	lr, [r0, lr]
 801b584:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801b588:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801b58a:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801b58e:	f89b b001 	ldrb.w	fp, [fp, #1]
 801b592:	4401      	add	r1, r0
 801b594:	fb16 f60a 	smulbb	r6, r6, sl
 801b598:	9814      	ldr	r0, [sp, #80]	; 0x50
 801b59a:	fb1b fb0a 	smulbb	fp, fp, sl
 801b59e:	fb07 6705 	mla	r7, r7, r5, r6
 801b5a2:	10e6      	asrs	r6, r4, #3
 801b5a4:	00e4      	lsls	r4, r4, #3
 801b5a6:	4402      	add	r2, r0
 801b5a8:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801b5ac:	b2bf      	uxth	r7, r7
 801b5ae:	b2e4      	uxtb	r4, r4
 801b5b0:	fb06 b605 	mla	r6, r6, r5, fp
 801b5b4:	fb14 f405 	smulbb	r4, r4, r5
 801b5b8:	b2b6      	uxth	r6, r6
 801b5ba:	fb0e 4e0a 	mla	lr, lr, sl, r4
 801b5be:	1c7c      	adds	r4, r7, #1
 801b5c0:	f106 0b01 	add.w	fp, r6, #1
 801b5c4:	fa1f fe8e 	uxth.w	lr, lr
 801b5c8:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801b5cc:	f10e 0401 	add.w	r4, lr, #1
 801b5d0:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801b5d4:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801b5d8:	eb04 241e 	add.w	r4, r4, lr, lsr #8
 801b5dc:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801b5e0:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801b5e4:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801b5e8:	4327      	orrs	r7, r4
 801b5ea:	ea47 070b 	orr.w	r7, r7, fp
 801b5ee:	f829 7b02 	strh.w	r7, [r9], #2
 801b5f2:	e7af      	b.n	801b554 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 801b5f4:	f04f 0e00 	mov.w	lr, #0
 801b5f8:	f8bd 900c 	ldrh.w	r9, [sp, #12]
 801b5fc:	eb03 040e 	add.w	r4, r3, lr
 801b600:	2c00      	cmp	r4, #0
 801b602:	dc43      	bgt.n	801b68c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801b604:	9a00      	ldr	r2, [sp, #0]
 801b606:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b60a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801b60e:	9300      	str	r3, [sp, #0]
 801b610:	9b02      	ldr	r3, [sp, #8]
 801b612:	2b00      	cmp	r3, #0
 801b614:	f340 8098 	ble.w	801b748 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801b618:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801b61c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b61e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b622:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b626:	eef0 6a62 	vmov.f32	s13, s5
 801b62a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801b62e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b632:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b636:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 801b63a:	eef0 6a43 	vmov.f32	s13, s6
 801b63e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b642:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 801b646:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b64a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b64e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b652:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b656:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b65a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b65e:	ee12 2a90 	vmov	r2, s5
 801b662:	eef0 2a47 	vmov.f32	s5, s14
 801b666:	fb92 f3f3 	sdiv	r3, r2, r3
 801b66a:	ee13 2a10 	vmov	r2, s6
 801b66e:	9313      	str	r3, [sp, #76]	; 0x4c
 801b670:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b672:	eeb0 3a67 	vmov.f32	s6, s15
 801b676:	fb92 f3f3 	sdiv	r3, r2, r3
 801b67a:	9314      	str	r3, [sp, #80]	; 0x50
 801b67c:	9b02      	ldr	r3, [sp, #8]
 801b67e:	9a05      	ldr	r2, [sp, #20]
 801b680:	3b01      	subs	r3, #1
 801b682:	9302      	str	r3, [sp, #8]
 801b684:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b686:	bf08      	it	eq
 801b688:	4613      	moveq	r3, r2
 801b68a:	e72a      	b.n	801b4e2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801b68c:	140f      	asrs	r7, r1, #16
 801b68e:	d454      	bmi.n	801b73a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801b690:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801b694:	42be      	cmp	r6, r7
 801b696:	dd50      	ble.n	801b73a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801b698:	ea5f 4822 	movs.w	r8, r2, asr #16
 801b69c:	d44d      	bmi.n	801b73a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801b69e:	f8dc 400c 	ldr.w	r4, [ip, #12]
 801b6a2:	4544      	cmp	r4, r8
 801b6a4:	dd49      	ble.n	801b73a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801b6a6:	9c04      	ldr	r4, [sp, #16]
 801b6a8:	b236      	sxth	r6, r6
 801b6aa:	f06f 0001 	mvn.w	r0, #1
 801b6ae:	fb08 4606 	mla	r6, r8, r6, r4
 801b6b2:	9c01      	ldr	r4, [sp, #4]
 801b6b4:	fb00 fa0e 	mul.w	sl, r0, lr
 801b6b8:	9800      	ldr	r0, [sp, #0]
 801b6ba:	f816 8007 	ldrb.w	r8, [r6, r7]
 801b6be:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801b6c2:	eb04 0b08 	add.w	fp, r4, r8
 801b6c6:	f830 400a 	ldrh.w	r4, [r0, sl]
 801b6ca:	9801      	ldr	r0, [sp, #4]
 801b6cc:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801b6d0:	1227      	asrs	r7, r4, #8
 801b6d2:	f89b b001 	ldrb.w	fp, [fp, #1]
 801b6d6:	fb16 f609 	smulbb	r6, r6, r9
 801b6da:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801b6de:	f810 8008 	ldrb.w	r8, [r0, r8]
 801b6e2:	fb1b fb09 	smulbb	fp, fp, r9
 801b6e6:	fb07 6705 	mla	r7, r7, r5, r6
 801b6ea:	10e6      	asrs	r6, r4, #3
 801b6ec:	00e4      	lsls	r4, r4, #3
 801b6ee:	9800      	ldr	r0, [sp, #0]
 801b6f0:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801b6f4:	b2bf      	uxth	r7, r7
 801b6f6:	b2e4      	uxtb	r4, r4
 801b6f8:	fb06 b605 	mla	r6, r6, r5, fp
 801b6fc:	fb14 f405 	smulbb	r4, r4, r5
 801b700:	b2b6      	uxth	r6, r6
 801b702:	fb08 4809 	mla	r8, r8, r9, r4
 801b706:	1c7c      	adds	r4, r7, #1
 801b708:	f106 0b01 	add.w	fp, r6, #1
 801b70c:	fa1f f888 	uxth.w	r8, r8
 801b710:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801b714:	f108 0401 	add.w	r4, r8, #1
 801b718:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801b71c:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801b720:	eb04 2418 	add.w	r4, r4, r8, lsr #8
 801b724:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801b728:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801b72c:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801b730:	4327      	orrs	r7, r4
 801b732:	ea47 070b 	orr.w	r7, r7, fp
 801b736:	f820 700a 	strh.w	r7, [r0, sl]
 801b73a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801b73c:	f10e 3eff 	add.w	lr, lr, #4294967295
 801b740:	4401      	add	r1, r0
 801b742:	9814      	ldr	r0, [sp, #80]	; 0x50
 801b744:	4402      	add	r2, r0
 801b746:	e759      	b.n	801b5fc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801b748:	b007      	add	sp, #28
 801b74a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801b750 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b754:	b085      	sub	sp, #20
 801b756:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b75a:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801b75c:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801b75e:	9203      	str	r2, [sp, #12]
 801b760:	6870      	ldr	r0, [r6, #4]
 801b762:	686f      	ldr	r7, [r5, #4]
 801b764:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
 801b768:	3704      	adds	r7, #4
 801b76a:	9101      	str	r1, [sp, #4]
 801b76c:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801b770:	fb00 2404 	mla	r4, r0, r4, r2
 801b774:	6832      	ldr	r2, [r6, #0]
 801b776:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801b77a:	682a      	ldr	r2, [r5, #0]
 801b77c:	9202      	str	r2, [sp, #8]
 801b77e:	9a01      	ldr	r2, [sp, #4]
 801b780:	2a00      	cmp	r2, #0
 801b782:	dc03      	bgt.n	801b78c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801b784:	9a03      	ldr	r2, [sp, #12]
 801b786:	2a00      	cmp	r2, #0
 801b788:	f340 80cc 	ble.w	801b924 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801b78c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b78e:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801b792:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801b796:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801b798:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801b79c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801b7a0:	2b00      	cmp	r3, #0
 801b7a2:	dd0d      	ble.n	801b7c0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801b7a4:	1406      	asrs	r6, r0, #16
 801b7a6:	d405      	bmi.n	801b7b4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801b7a8:	454e      	cmp	r6, r9
 801b7aa:	da03      	bge.n	801b7b4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801b7ac:	1416      	asrs	r6, r2, #16
 801b7ae:	d401      	bmi.n	801b7b4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801b7b0:	4546      	cmp	r6, r8
 801b7b2:	db06      	blt.n	801b7c2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801b7b4:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801b7b6:	4460      	add	r0, ip
 801b7b8:	3b01      	subs	r3, #1
 801b7ba:	3402      	adds	r4, #2
 801b7bc:	4432      	add	r2, r6
 801b7be:	e7ef      	b.n	801b7a0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801b7c0:	d00f      	beq.n	801b7e2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801b7c2:	1e5e      	subs	r6, r3, #1
 801b7c4:	fb0c 0e06 	mla	lr, ip, r6, r0
 801b7c8:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 801b7cc:	d543      	bpl.n	801b856 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 801b7ce:	4698      	mov	r8, r3
 801b7d0:	eb04 0a43 	add.w	sl, r4, r3, lsl #1
 801b7d4:	f1b8 0f00 	cmp.w	r8, #0
 801b7d8:	dc71      	bgt.n	801b8be <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 801b7da:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b7de:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801b7e2:	9b01      	ldr	r3, [sp, #4]
 801b7e4:	2b00      	cmp	r3, #0
 801b7e6:	f340 809d 	ble.w	801b924 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801b7ea:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b7ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b7f0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b7f4:	eeb0 6a62 	vmov.f32	s12, s5
 801b7f8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b7fc:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b800:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b804:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801b808:	eeb0 6a43 	vmov.f32	s12, s6
 801b80c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b810:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801b814:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b818:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b81c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b820:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b824:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b828:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b82c:	ee12 2a90 	vmov	r2, s5
 801b830:	eef0 2a47 	vmov.f32	s5, s14
 801b834:	fb92 fcf3 	sdiv	ip, r2, r3
 801b838:	ee13 2a10 	vmov	r2, s6
 801b83c:	eeb0 3a67 	vmov.f32	s6, s15
 801b840:	fb92 f3f3 	sdiv	r3, r2, r3
 801b844:	9312      	str	r3, [sp, #72]	; 0x48
 801b846:	9b01      	ldr	r3, [sp, #4]
 801b848:	9a03      	ldr	r2, [sp, #12]
 801b84a:	3b01      	subs	r3, #1
 801b84c:	9301      	str	r3, [sp, #4]
 801b84e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b850:	bf08      	it	eq
 801b852:	4613      	moveq	r3, r2
 801b854:	e793      	b.n	801b77e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801b856:	45ce      	cmp	lr, r9
 801b858:	dab9      	bge.n	801b7ce <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801b85a:	9912      	ldr	r1, [sp, #72]	; 0x48
 801b85c:	fb01 2606 	mla	r6, r1, r6, r2
 801b860:	1436      	asrs	r6, r6, #16
 801b862:	d4b4      	bmi.n	801b7ce <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801b864:	4546      	cmp	r6, r8
 801b866:	dab2      	bge.n	801b7ce <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801b868:	4698      	mov	r8, r3
 801b86a:	46a2      	mov	sl, r4
 801b86c:	f1b8 0f00 	cmp.w	r8, #0
 801b870:	ddb3      	ble.n	801b7da <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801b872:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801b876:	1416      	asrs	r6, r2, #16
 801b878:	9902      	ldr	r1, [sp, #8]
 801b87a:	ea4f 4e20 	mov.w	lr, r0, asr #16
 801b87e:	f108 38ff 	add.w	r8, r8, #4294967295
 801b882:	4460      	add	r0, ip
 801b884:	fb09 1606 	mla	r6, r9, r6, r1
 801b888:	4928      	ldr	r1, [pc, #160]	; (801b92c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>)
 801b88a:	f816 e00e 	ldrb.w	lr, [r6, lr]
 801b88e:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801b892:	eb07 0b0e 	add.w	fp, r7, lr
 801b896:	f89b 6001 	ldrb.w	r6, [fp, #1]
 801b89a:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801b89e:	00f6      	lsls	r6, r6, #3
 801b8a0:	ea01 2909 	and.w	r9, r1, r9, lsl #8
 801b8a4:	9912      	ldr	r1, [sp, #72]	; 0x48
 801b8a6:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801b8aa:	440a      	add	r2, r1
 801b8ac:	ea49 0606 	orr.w	r6, r9, r6
 801b8b0:	f817 900e 	ldrb.w	r9, [r7, lr]
 801b8b4:	ea46 06d9 	orr.w	r6, r6, r9, lsr #3
 801b8b8:	f82a 6b02 	strh.w	r6, [sl], #2
 801b8bc:	e7d6      	b.n	801b86c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801b8be:	ea5f 4920 	movs.w	r9, r0, asr #16
 801b8c2:	d429      	bmi.n	801b918 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801b8c4:	68ae      	ldr	r6, [r5, #8]
 801b8c6:	454e      	cmp	r6, r9
 801b8c8:	dd26      	ble.n	801b918 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801b8ca:	ea5f 4b22 	movs.w	fp, r2, asr #16
 801b8ce:	d423      	bmi.n	801b918 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801b8d0:	68e9      	ldr	r1, [r5, #12]
 801b8d2:	4559      	cmp	r1, fp
 801b8d4:	dd20      	ble.n	801b918 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801b8d6:	fa0f fe86 	sxth.w	lr, r6
 801b8da:	9902      	ldr	r1, [sp, #8]
 801b8dc:	fb0b 1e0e 	mla	lr, fp, lr, r1
 801b8e0:	f06f 0101 	mvn.w	r1, #1
 801b8e4:	f81e e009 	ldrb.w	lr, [lr, r9]
 801b8e8:	fb01 f908 	mul.w	r9, r1, r8
 801b8ec:	f2a1 71fe 	subw	r1, r1, #2046	; 0x7fe
 801b8f0:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801b8f4:	eb07 060e 	add.w	r6, r7, lr
 801b8f8:	f896 b002 	ldrb.w	fp, [r6, #2]
 801b8fc:	7876      	ldrb	r6, [r6, #1]
 801b8fe:	ea01 2b0b 	and.w	fp, r1, fp, lsl #8
 801b902:	00f6      	lsls	r6, r6, #3
 801b904:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801b908:	ea4b 0606 	orr.w	r6, fp, r6
 801b90c:	f817 b00e 	ldrb.w	fp, [r7, lr]
 801b910:	ea46 06db 	orr.w	r6, r6, fp, lsr #3
 801b914:	f82a 6009 	strh.w	r6, [sl, r9]
 801b918:	9912      	ldr	r1, [sp, #72]	; 0x48
 801b91a:	4460      	add	r0, ip
 801b91c:	f108 38ff 	add.w	r8, r8, #4294967295
 801b920:	440a      	add	r2, r1
 801b922:	e757      	b.n	801b7d4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801b924:	b005      	add	sp, #20
 801b926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b92a:	bf00      	nop
 801b92c:	fffff800 	.word	0xfffff800

0801b930 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b934:	b087      	sub	sp, #28
 801b936:	468b      	mov	fp, r1
 801b938:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b93c:	9815      	ldr	r0, [sp, #84]	; 0x54
 801b93e:	9204      	str	r2, [sp, #16]
 801b940:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801b944:	6841      	ldr	r1, [r0, #4]
 801b946:	9205      	str	r2, [sp, #20]
 801b948:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801b94c:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801b950:	fb01 2404 	mla	r4, r1, r4, r2
 801b954:	6802      	ldr	r2, [r0, #0]
 801b956:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801b95a:	f8dc 2000 	ldr.w	r2, [ip]
 801b95e:	9201      	str	r2, [sp, #4]
 801b960:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801b964:	3204      	adds	r2, #4
 801b966:	9202      	str	r2, [sp, #8]
 801b968:	f1bb 0f00 	cmp.w	fp, #0
 801b96c:	dc03      	bgt.n	801b976 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801b96e:	9a04      	ldr	r2, [sp, #16]
 801b970:	2a00      	cmp	r2, #0
 801b972:	f340 8138 	ble.w	801bbe6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801b976:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801b978:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801b97c:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801b980:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801b982:	f9bc 600c 	ldrsh.w	r6, [ip, #12]
 801b986:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801b98a:	2b00      	cmp	r3, #0
 801b98c:	dd0e      	ble.n	801b9ac <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801b98e:	1402      	asrs	r2, r0, #16
 801b990:	d405      	bmi.n	801b99e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801b992:	42ba      	cmp	r2, r7
 801b994:	da03      	bge.n	801b99e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801b996:	140a      	asrs	r2, r1, #16
 801b998:	d401      	bmi.n	801b99e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801b99a:	42b2      	cmp	r2, r6
 801b99c:	db07      	blt.n	801b9ae <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801b99e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b9a0:	3b01      	subs	r3, #1
 801b9a2:	3402      	adds	r4, #2
 801b9a4:	4410      	add	r0, r2
 801b9a6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b9a8:	4411      	add	r1, r2
 801b9aa:	e7ee      	b.n	801b98a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801b9ac:	d019      	beq.n	801b9e2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801b9ae:	1e5a      	subs	r2, r3, #1
 801b9b0:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801b9b2:	fb05 0502 	mla	r5, r5, r2, r0
 801b9b6:	142d      	asrs	r5, r5, #16
 801b9b8:	d409      	bmi.n	801b9ce <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801b9ba:	42bd      	cmp	r5, r7
 801b9bc:	da07      	bge.n	801b9ce <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801b9be:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801b9c0:	fb05 1202 	mla	r2, r5, r2, r1
 801b9c4:	1412      	asrs	r2, r2, #16
 801b9c6:	d402      	bmi.n	801b9ce <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801b9c8:	42b2      	cmp	r2, r6
 801b9ca:	f2c0 80ac 	blt.w	801bb26 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 801b9ce:	f04f 0e00 	mov.w	lr, #0
 801b9d2:	eb03 020e 	add.w	r2, r3, lr
 801b9d6:	2a00      	cmp	r2, #0
 801b9d8:	dc3e      	bgt.n	801ba58 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801b9da:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b9de:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801b9e2:	f1bb 0f00 	cmp.w	fp, #0
 801b9e6:	f340 80fe 	ble.w	801bbe6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801b9ea:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b9ee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b9f0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b9f4:	f1bb 0b01 	subs.w	fp, fp, #1
 801b9f8:	eeb0 6a62 	vmov.f32	s12, s5
 801b9fc:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ba00:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ba04:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ba08:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801ba0c:	eeb0 6a43 	vmov.f32	s12, s6
 801ba10:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ba14:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801ba18:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ba1c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ba20:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ba24:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ba28:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ba2c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ba30:	ee12 2a90 	vmov	r2, s5
 801ba34:	eef0 2a47 	vmov.f32	s5, s14
 801ba38:	fb92 f3f3 	sdiv	r3, r2, r3
 801ba3c:	ee13 2a10 	vmov	r2, s6
 801ba40:	9313      	str	r3, [sp, #76]	; 0x4c
 801ba42:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ba44:	eeb0 3a67 	vmov.f32	s6, s15
 801ba48:	fb92 f3f3 	sdiv	r3, r2, r3
 801ba4c:	9a04      	ldr	r2, [sp, #16]
 801ba4e:	9314      	str	r3, [sp, #80]	; 0x50
 801ba50:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ba52:	bf08      	it	eq
 801ba54:	4613      	moveq	r3, r2
 801ba56:	e787      	b.n	801b968 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801ba58:	1406      	asrs	r6, r0, #16
 801ba5a:	d45d      	bmi.n	801bb18 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801ba5c:	f8dc 5008 	ldr.w	r5, [ip, #8]
 801ba60:	42b5      	cmp	r5, r6
 801ba62:	dd59      	ble.n	801bb18 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801ba64:	140f      	asrs	r7, r1, #16
 801ba66:	d457      	bmi.n	801bb18 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801ba68:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801ba6c:	42ba      	cmp	r2, r7
 801ba6e:	dd53      	ble.n	801bb18 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801ba70:	9a01      	ldr	r2, [sp, #4]
 801ba72:	b22d      	sxth	r5, r5
 801ba74:	fb07 2505 	mla	r5, r7, r5, r2
 801ba78:	5daa      	ldrb	r2, [r5, r6]
 801ba7a:	9d02      	ldr	r5, [sp, #8]
 801ba7c:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801ba80:	0e2e      	lsrs	r6, r5, #24
 801ba82:	d049      	beq.n	801bb18 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801ba84:	f06f 0201 	mvn.w	r2, #1
 801ba88:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801ba8c:	fb02 f20e 	mul.w	r2, r2, lr
 801ba90:	f834 8002 	ldrh.w	r8, [r4, r2]
 801ba94:	9203      	str	r2, [sp, #12]
 801ba96:	9a05      	ldr	r2, [sp, #20]
 801ba98:	ea4f 2728 	mov.w	r7, r8, asr #8
 801ba9c:	4356      	muls	r6, r2
 801ba9e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801baa2:	1c72      	adds	r2, r6, #1
 801baa4:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801baa8:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801baac:	b2ed      	uxtb	r5, r5
 801baae:	1212      	asrs	r2, r2, #8
 801bab0:	fa1f f982 	uxth.w	r9, r2
 801bab4:	43d2      	mvns	r2, r2
 801bab6:	fb16 f609 	smulbb	r6, r6, r9
 801baba:	b2d2      	uxtb	r2, r2
 801babc:	fb15 f509 	smulbb	r5, r5, r9
 801bac0:	fb07 6702 	mla	r7, r7, r2, r6
 801bac4:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801bac8:	fb1a fa09 	smulbb	sl, sl, r9
 801bacc:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801bad0:	b2bf      	uxth	r7, r7
 801bad2:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801bad6:	fa5f f888 	uxtb.w	r8, r8
 801bada:	fb06 a602 	mla	r6, r6, r2, sl
 801bade:	fb08 5502 	mla	r5, r8, r2, r5
 801bae2:	1c7a      	adds	r2, r7, #1
 801bae4:	b2b6      	uxth	r6, r6
 801bae6:	b2ad      	uxth	r5, r5
 801bae8:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801baec:	9a03      	ldr	r2, [sp, #12]
 801baee:	f105 0a01 	add.w	sl, r5, #1
 801baf2:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801baf6:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801bafa:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801bafe:	ea4a 0707 	orr.w	r7, sl, r7
 801bb02:	f106 0a01 	add.w	sl, r6, #1
 801bb06:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801bb0a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801bb0e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801bb12:	ea47 070a 	orr.w	r7, r7, sl
 801bb16:	52a7      	strh	r7, [r4, r2]
 801bb18:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801bb1a:	f10e 3eff 	add.w	lr, lr, #4294967295
 801bb1e:	4410      	add	r0, r2
 801bb20:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801bb22:	4411      	add	r1, r2
 801bb24:	e755      	b.n	801b9d2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801bb26:	f04f 0800 	mov.w	r8, #0
 801bb2a:	eba3 0208 	sub.w	r2, r3, r8
 801bb2e:	2a00      	cmp	r2, #0
 801bb30:	f77f af53 	ble.w	801b9da <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801bb34:	f9bc 6008 	ldrsh.w	r6, [ip, #8]
 801bb38:	140a      	asrs	r2, r1, #16
 801bb3a:	9f01      	ldr	r7, [sp, #4]
 801bb3c:	1405      	asrs	r5, r0, #16
 801bb3e:	fb06 7202 	mla	r2, r6, r2, r7
 801bb42:	5d52      	ldrb	r2, [r2, r5]
 801bb44:	9d02      	ldr	r5, [sp, #8]
 801bb46:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801bb4a:	0e2e      	lsrs	r6, r5, #24
 801bb4c:	d044      	beq.n	801bbd8 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801bb4e:	9a05      	ldr	r2, [sp, #20]
 801bb50:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801bb54:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 801bb58:	4356      	muls	r6, r2
 801bb5a:	ea4f 272e 	mov.w	r7, lr, asr #8
 801bb5e:	1c72      	adds	r2, r6, #1
 801bb60:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801bb64:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801bb68:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801bb6c:	b2ed      	uxtb	r5, r5
 801bb6e:	1212      	asrs	r2, r2, #8
 801bb70:	fa1f f982 	uxth.w	r9, r2
 801bb74:	43d2      	mvns	r2, r2
 801bb76:	fb16 f609 	smulbb	r6, r6, r9
 801bb7a:	b2d2      	uxtb	r2, r2
 801bb7c:	fb15 f509 	smulbb	r5, r5, r9
 801bb80:	fb07 6702 	mla	r7, r7, r2, r6
 801bb84:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801bb88:	fb1a fa09 	smulbb	sl, sl, r9
 801bb8c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801bb90:	b2bf      	uxth	r7, r7
 801bb92:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801bb96:	fa5f fe8e 	uxtb.w	lr, lr
 801bb9a:	fb06 a602 	mla	r6, r6, r2, sl
 801bb9e:	fb0e 5502 	mla	r5, lr, r2, r5
 801bba2:	1c7a      	adds	r2, r7, #1
 801bba4:	b2b6      	uxth	r6, r6
 801bba6:	b2ad      	uxth	r5, r5
 801bba8:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801bbac:	f105 0a01 	add.w	sl, r5, #1
 801bbb0:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801bbb4:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801bbb8:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801bbbc:	ea4a 0707 	orr.w	r7, sl, r7
 801bbc0:	f106 0a01 	add.w	sl, r6, #1
 801bbc4:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801bbc8:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801bbcc:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801bbd0:	ea47 070a 	orr.w	r7, r7, sl
 801bbd4:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801bbd8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801bbda:	f108 0801 	add.w	r8, r8, #1
 801bbde:	4410      	add	r0, r2
 801bbe0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801bbe2:	4411      	add	r1, r2
 801bbe4:	e7a1      	b.n	801bb2a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801bbe6:	b007      	add	sp, #28
 801bbe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801bbec <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801bbec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bbf0:	b085      	sub	sp, #20
 801bbf2:	468b      	mov	fp, r1
 801bbf4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801bbf8:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801bbfa:	9203      	str	r2, [sp, #12]
 801bbfc:	6841      	ldr	r1, [r0, #4]
 801bbfe:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 801bc02:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801bc06:	fb01 2404 	mla	r4, r1, r4, r2
 801bc0a:	6802      	ldr	r2, [r0, #0]
 801bc0c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801bc10:	f8de 2000 	ldr.w	r2, [lr]
 801bc14:	9200      	str	r2, [sp, #0]
 801bc16:	f8de 2004 	ldr.w	r2, [lr, #4]
 801bc1a:	3204      	adds	r2, #4
 801bc1c:	9201      	str	r2, [sp, #4]
 801bc1e:	f1bb 0f00 	cmp.w	fp, #0
 801bc22:	dc03      	bgt.n	801bc2c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801bc24:	9a03      	ldr	r2, [sp, #12]
 801bc26:	2a00      	cmp	r2, #0
 801bc28:	f340 8153 	ble.w	801bed2 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801bc2c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801bc2e:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801bc32:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801bc36:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801bc38:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 801bc3c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801bc40:	2b00      	cmp	r3, #0
 801bc42:	dd0e      	ble.n	801bc62 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801bc44:	1408      	asrs	r0, r1, #16
 801bc46:	d405      	bmi.n	801bc54 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801bc48:	42b8      	cmp	r0, r7
 801bc4a:	da03      	bge.n	801bc54 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801bc4c:	1410      	asrs	r0, r2, #16
 801bc4e:	d401      	bmi.n	801bc54 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801bc50:	42b0      	cmp	r0, r6
 801bc52:	db07      	blt.n	801bc64 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801bc54:	9811      	ldr	r0, [sp, #68]	; 0x44
 801bc56:	3b01      	subs	r3, #1
 801bc58:	3402      	adds	r4, #2
 801bc5a:	4401      	add	r1, r0
 801bc5c:	9812      	ldr	r0, [sp, #72]	; 0x48
 801bc5e:	4402      	add	r2, r0
 801bc60:	e7ee      	b.n	801bc40 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801bc62:	d017      	beq.n	801bc94 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801bc64:	1e58      	subs	r0, r3, #1
 801bc66:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801bc68:	fb05 1500 	mla	r5, r5, r0, r1
 801bc6c:	142d      	asrs	r5, r5, #16
 801bc6e:	d409      	bmi.n	801bc84 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801bc70:	42bd      	cmp	r5, r7
 801bc72:	da07      	bge.n	801bc84 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801bc74:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801bc76:	fb05 2000 	mla	r0, r5, r0, r2
 801bc7a:	1400      	asrs	r0, r0, #16
 801bc7c:	d402      	bmi.n	801bc84 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801bc7e:	42b0      	cmp	r0, r6
 801bc80:	f2c0 80bc 	blt.w	801bdfc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801bc84:	2600      	movs	r6, #0
 801bc86:	1998      	adds	r0, r3, r6
 801bc88:	2800      	cmp	r0, #0
 801bc8a:	dc3e      	bgt.n	801bd0a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801bc8c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801bc90:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801bc94:	f1bb 0f00 	cmp.w	fp, #0
 801bc98:	f340 811b 	ble.w	801bed2 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801bc9c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801bca0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bca2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801bca6:	f1bb 0b01 	subs.w	fp, fp, #1
 801bcaa:	eeb0 6a62 	vmov.f32	s12, s5
 801bcae:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801bcb2:	ee31 1a05 	vadd.f32	s2, s2, s10
 801bcb6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801bcba:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801bcbe:	eeb0 6a43 	vmov.f32	s12, s6
 801bcc2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801bcc6:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801bcca:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801bcce:	ee61 7a27 	vmul.f32	s15, s2, s15
 801bcd2:	ee77 2a62 	vsub.f32	s5, s14, s5
 801bcd6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801bcda:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801bcde:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801bce2:	ee12 2a90 	vmov	r2, s5
 801bce6:	eef0 2a47 	vmov.f32	s5, s14
 801bcea:	fb92 f3f3 	sdiv	r3, r2, r3
 801bcee:	ee13 2a10 	vmov	r2, s6
 801bcf2:	9311      	str	r3, [sp, #68]	; 0x44
 801bcf4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bcf6:	eeb0 3a67 	vmov.f32	s6, s15
 801bcfa:	fb92 f3f3 	sdiv	r3, r2, r3
 801bcfe:	9a03      	ldr	r2, [sp, #12]
 801bd00:	9312      	str	r3, [sp, #72]	; 0x48
 801bd02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bd04:	bf08      	it	eq
 801bd06:	4613      	moveq	r3, r2
 801bd08:	e789      	b.n	801bc1e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801bd0a:	140f      	asrs	r7, r1, #16
 801bd0c:	d426      	bmi.n	801bd5c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801bd0e:	f8de 5008 	ldr.w	r5, [lr, #8]
 801bd12:	42bd      	cmp	r5, r7
 801bd14:	dd22      	ble.n	801bd5c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801bd16:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801bd1a:	d41f      	bmi.n	801bd5c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801bd1c:	f8de 000c 	ldr.w	r0, [lr, #12]
 801bd20:	4560      	cmp	r0, ip
 801bd22:	dd1b      	ble.n	801bd5c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801bd24:	9800      	ldr	r0, [sp, #0]
 801bd26:	b22d      	sxth	r5, r5
 801bd28:	fb0c 0505 	mla	r5, ip, r5, r0
 801bd2c:	5de8      	ldrb	r0, [r5, r7]
 801bd2e:	9d01      	ldr	r5, [sp, #4]
 801bd30:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 801bd34:	0e07      	lsrs	r7, r0, #24
 801bd36:	2fff      	cmp	r7, #255	; 0xff
 801bd38:	d116      	bne.n	801bd68 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801bd3a:	f06f 0501 	mvn.w	r5, #1
 801bd3e:	fb05 f706 	mul.w	r7, r5, r6
 801bd42:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 801bd46:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 801bd4a:	0945      	lsrs	r5, r0, #5
 801bd4c:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801bd50:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801bd54:	ea4c 0505 	orr.w	r5, ip, r5
 801bd58:	4305      	orrs	r5, r0
 801bd5a:	53e5      	strh	r5, [r4, r7]
 801bd5c:	9811      	ldr	r0, [sp, #68]	; 0x44
 801bd5e:	3e01      	subs	r6, #1
 801bd60:	4401      	add	r1, r0
 801bd62:	9812      	ldr	r0, [sp, #72]	; 0x48
 801bd64:	4402      	add	r2, r0
 801bd66:	e78e      	b.n	801bc86 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801bd68:	b2fd      	uxtb	r5, r7
 801bd6a:	2f00      	cmp	r7, #0
 801bd6c:	d0f6      	beq.n	801bd5c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801bd6e:	f06f 0701 	mvn.w	r7, #1
 801bd72:	fa1f f985 	uxth.w	r9, r5
 801bd76:	43ed      	mvns	r5, r5
 801bd78:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801bd7c:	4377      	muls	r7, r6
 801bd7e:	fb1a fa09 	smulbb	sl, sl, r9
 801bd82:	b2ed      	uxtb	r5, r5
 801bd84:	f834 8007 	ldrh.w	r8, [r4, r7]
 801bd88:	9702      	str	r7, [sp, #8]
 801bd8a:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801bd8e:	ea4f 2c28 	mov.w	ip, r8, asr #8
 801bd92:	fb17 f709 	smulbb	r7, r7, r9
 801bd96:	b2c0      	uxtb	r0, r0
 801bd98:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801bd9c:	fb10 f009 	smulbb	r0, r0, r9
 801bda0:	fb0c 7c05 	mla	ip, ip, r5, r7
 801bda4:	ea4f 07e8 	mov.w	r7, r8, asr #3
 801bda8:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801bdac:	fa1f fc8c 	uxth.w	ip, ip
 801bdb0:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801bdb4:	fa5f f888 	uxtb.w	r8, r8
 801bdb8:	fb07 a705 	mla	r7, r7, r5, sl
 801bdbc:	fb08 0005 	mla	r0, r8, r5, r0
 801bdc0:	f10c 0501 	add.w	r5, ip, #1
 801bdc4:	b2bf      	uxth	r7, r7
 801bdc6:	b280      	uxth	r0, r0
 801bdc8:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801bdcc:	f100 0a01 	add.w	sl, r0, #1
 801bdd0:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801bdd4:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 801bdd8:	9802      	ldr	r0, [sp, #8]
 801bdda:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801bdde:	ea4a 0c0c 	orr.w	ip, sl, ip
 801bde2:	f107 0a01 	add.w	sl, r7, #1
 801bde6:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801bdea:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801bdee:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801bdf2:	ea4c 0c0a 	orr.w	ip, ip, sl
 801bdf6:	f824 c000 	strh.w	ip, [r4, r0]
 801bdfa:	e7af      	b.n	801bd5c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801bdfc:	f04f 0800 	mov.w	r8, #0
 801be00:	eba3 0008 	sub.w	r0, r3, r8
 801be04:	2800      	cmp	r0, #0
 801be06:	f77f af41 	ble.w	801bc8c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801be0a:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 801be0e:	1410      	asrs	r0, r2, #16
 801be10:	9f00      	ldr	r7, [sp, #0]
 801be12:	140d      	asrs	r5, r1, #16
 801be14:	fb06 7000 	mla	r0, r6, r0, r7
 801be18:	5d40      	ldrb	r0, [r0, r5]
 801be1a:	9d01      	ldr	r5, [sp, #4]
 801be1c:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 801be20:	0e2e      	lsrs	r6, r5, #24
 801be22:	2eff      	cmp	r6, #255	; 0xff
 801be24:	d112      	bne.n	801be4c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x260>
 801be26:	482c      	ldr	r0, [pc, #176]	; (801bed8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
 801be28:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 801be2c:	0968      	lsrs	r0, r5, #5
 801be2e:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801be32:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801be36:	4330      	orrs	r0, r6
 801be38:	4328      	orrs	r0, r5
 801be3a:	f824 0018 	strh.w	r0, [r4, r8, lsl #1]
 801be3e:	9811      	ldr	r0, [sp, #68]	; 0x44
 801be40:	f108 0801 	add.w	r8, r8, #1
 801be44:	4401      	add	r1, r0
 801be46:	9812      	ldr	r0, [sp, #72]	; 0x48
 801be48:	4402      	add	r2, r0
 801be4a:	e7d9      	b.n	801be00 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801be4c:	b2f0      	uxtb	r0, r6
 801be4e:	2e00      	cmp	r6, #0
 801be50:	d0f5      	beq.n	801be3e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801be52:	f834 c018 	ldrh.w	ip, [r4, r8, lsl #1]
 801be56:	fa1f f980 	uxth.w	r9, r0
 801be5a:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801be5e:	43c0      	mvns	r0, r0
 801be60:	ea4f 272c 	mov.w	r7, ip, asr #8
 801be64:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801be68:	fb16 f609 	smulbb	r6, r6, r9
 801be6c:	b2c0      	uxtb	r0, r0
 801be6e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801be72:	b2ed      	uxtb	r5, r5
 801be74:	fb1a fa09 	smulbb	sl, sl, r9
 801be78:	fb07 6700 	mla	r7, r7, r0, r6
 801be7c:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801be80:	fb15 f509 	smulbb	r5, r5, r9
 801be84:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801be88:	b2bf      	uxth	r7, r7
 801be8a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801be8e:	fa5f fc8c 	uxtb.w	ip, ip
 801be92:	fb06 a600 	mla	r6, r6, r0, sl
 801be96:	fb0c 5500 	mla	r5, ip, r0, r5
 801be9a:	1c78      	adds	r0, r7, #1
 801be9c:	b2b6      	uxth	r6, r6
 801be9e:	b2ad      	uxth	r5, r5
 801bea0:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 801bea4:	f105 0a01 	add.w	sl, r5, #1
 801bea8:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801beac:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801beb0:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801beb4:	ea4a 0707 	orr.w	r7, sl, r7
 801beb8:	f106 0a01 	add.w	sl, r6, #1
 801bebc:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801bec0:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801bec4:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801bec8:	ea47 070a 	orr.w	r7, r7, sl
 801becc:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801bed0:	e7b5      	b.n	801be3e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801bed2:	b005      	add	sp, #20
 801bed4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bed8:	fffff800 	.word	0xfffff800

0801bedc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801bedc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bee0:	b087      	sub	sp, #28
 801bee2:	468b      	mov	fp, r1
 801bee4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801bee8:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801beea:	9204      	str	r2, [sp, #16]
 801beec:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801bef0:	6861      	ldr	r1, [r4, #4]
 801bef2:	9205      	str	r2, [sp, #20]
 801bef4:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 801bef8:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 801befc:	fb01 2000 	mla	r0, r1, r0, r2
 801bf00:	6822      	ldr	r2, [r4, #0]
 801bf02:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801bf06:	f8de 2000 	ldr.w	r2, [lr]
 801bf0a:	9201      	str	r2, [sp, #4]
 801bf0c:	f8de 2004 	ldr.w	r2, [lr, #4]
 801bf10:	9202      	str	r2, [sp, #8]
 801bf12:	f1bb 0f00 	cmp.w	fp, #0
 801bf16:	dc03      	bgt.n	801bf20 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801bf18:	9a04      	ldr	r2, [sp, #16]
 801bf1a:	2a00      	cmp	r2, #0
 801bf1c:	f340 8142 	ble.w	801c1a4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 801bf20:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801bf22:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801bf26:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801bf2a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801bf2c:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 801bf30:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801bf34:	2b00      	cmp	r3, #0
 801bf36:	dd0e      	ble.n	801bf56 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801bf38:	140c      	asrs	r4, r1, #16
 801bf3a:	d405      	bmi.n	801bf48 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801bf3c:	42bc      	cmp	r4, r7
 801bf3e:	da03      	bge.n	801bf48 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801bf40:	1414      	asrs	r4, r2, #16
 801bf42:	d401      	bmi.n	801bf48 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801bf44:	42b4      	cmp	r4, r6
 801bf46:	db07      	blt.n	801bf58 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801bf48:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801bf4a:	3b01      	subs	r3, #1
 801bf4c:	3002      	adds	r0, #2
 801bf4e:	4421      	add	r1, r4
 801bf50:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801bf52:	4422      	add	r2, r4
 801bf54:	e7ee      	b.n	801bf34 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801bf56:	d019      	beq.n	801bf8c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801bf58:	1e5c      	subs	r4, r3, #1
 801bf5a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801bf5c:	fb05 1504 	mla	r5, r5, r4, r1
 801bf60:	142d      	asrs	r5, r5, #16
 801bf62:	d409      	bmi.n	801bf78 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801bf64:	42bd      	cmp	r5, r7
 801bf66:	da07      	bge.n	801bf78 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801bf68:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801bf6a:	fb05 2404 	mla	r4, r5, r4, r2
 801bf6e:	1424      	asrs	r4, r4, #16
 801bf70:	d402      	bmi.n	801bf78 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801bf72:	42b4      	cmp	r4, r6
 801bf74:	f2c0 80b1 	blt.w	801c0da <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 801bf78:	f04f 0800 	mov.w	r8, #0
 801bf7c:	eb03 0408 	add.w	r4, r3, r8
 801bf80:	2c00      	cmp	r4, #0
 801bf82:	dc3e      	bgt.n	801c002 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801bf84:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801bf88:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801bf8c:	f1bb 0f00 	cmp.w	fp, #0
 801bf90:	f340 8108 	ble.w	801c1a4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 801bf94:	ee30 0a04 	vadd.f32	s0, s0, s8
 801bf98:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bf9a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801bf9e:	f1bb 0b01 	subs.w	fp, fp, #1
 801bfa2:	eeb0 6a62 	vmov.f32	s12, s5
 801bfa6:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801bfaa:	ee31 1a05 	vadd.f32	s2, s2, s10
 801bfae:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801bfb2:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801bfb6:	eeb0 6a43 	vmov.f32	s12, s6
 801bfba:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801bfbe:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801bfc2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801bfc6:	ee61 7a27 	vmul.f32	s15, s2, s15
 801bfca:	ee77 2a62 	vsub.f32	s5, s14, s5
 801bfce:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801bfd2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801bfd6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801bfda:	ee12 2a90 	vmov	r2, s5
 801bfde:	eef0 2a47 	vmov.f32	s5, s14
 801bfe2:	fb92 f3f3 	sdiv	r3, r2, r3
 801bfe6:	ee13 2a10 	vmov	r2, s6
 801bfea:	9313      	str	r3, [sp, #76]	; 0x4c
 801bfec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bfee:	eeb0 3a67 	vmov.f32	s6, s15
 801bff2:	fb92 f3f3 	sdiv	r3, r2, r3
 801bff6:	9a04      	ldr	r2, [sp, #16]
 801bff8:	9314      	str	r3, [sp, #80]	; 0x50
 801bffa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bffc:	bf08      	it	eq
 801bffe:	4613      	moveq	r3, r2
 801c000:	e787      	b.n	801bf12 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801c002:	140e      	asrs	r6, r1, #16
 801c004:	d462      	bmi.n	801c0cc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801c006:	f8de 5008 	ldr.w	r5, [lr, #8]
 801c00a:	42b5      	cmp	r5, r6
 801c00c:	dd5e      	ble.n	801c0cc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801c00e:	1417      	asrs	r7, r2, #16
 801c010:	d45c      	bmi.n	801c0cc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801c012:	f8de 400c 	ldr.w	r4, [lr, #12]
 801c016:	42bc      	cmp	r4, r7
 801c018:	dd58      	ble.n	801c0cc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801c01a:	b22d      	sxth	r5, r5
 801c01c:	9c02      	ldr	r4, [sp, #8]
 801c01e:	fb07 6505 	mla	r5, r7, r5, r6
 801c022:	5d66      	ldrb	r6, [r4, r5]
 801c024:	2e00      	cmp	r6, #0
 801c026:	d051      	beq.n	801c0cc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801c028:	9c01      	ldr	r4, [sp, #4]
 801c02a:	f834 9015 	ldrh.w	r9, [r4, r5, lsl #1]
 801c02e:	f06f 0401 	mvn.w	r4, #1
 801c032:	fb04 f408 	mul.w	r4, r4, r8
 801c036:	ea4f 2c29 	mov.w	ip, r9, asr #8
 801c03a:	5b05      	ldrh	r5, [r0, r4]
 801c03c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801c040:	9403      	str	r4, [sp, #12]
 801c042:	9c05      	ldr	r4, [sp, #20]
 801c044:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801c048:	4366      	muls	r6, r4
 801c04a:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801c04e:	1c74      	adds	r4, r6, #1
 801c050:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 801c054:	122e      	asrs	r6, r5, #8
 801c056:	1224      	asrs	r4, r4, #8
 801c058:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801c05c:	00ed      	lsls	r5, r5, #3
 801c05e:	b2a7      	uxth	r7, r4
 801c060:	43e4      	mvns	r4, r4
 801c062:	b2ed      	uxtb	r5, r5
 801c064:	b2e4      	uxtb	r4, r4
 801c066:	fb16 f604 	smulbb	r6, r6, r4
 801c06a:	fb15 f504 	smulbb	r5, r5, r4
 801c06e:	fb0c 6c07 	mla	ip, ip, r7, r6
 801c072:	ea4f 06e9 	mov.w	r6, r9, asr #3
 801c076:	fb1a fa04 	smulbb	sl, sl, r4
 801c07a:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801c07e:	fa1f fc8c 	uxth.w	ip, ip
 801c082:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801c086:	fa5f f989 	uxtb.w	r9, r9
 801c08a:	fb06 a607 	mla	r6, r6, r7, sl
 801c08e:	f10c 0401 	add.w	r4, ip, #1
 801c092:	fb09 5507 	mla	r5, r9, r7, r5
 801c096:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801c09a:	9c03      	ldr	r4, [sp, #12]
 801c09c:	b2ad      	uxth	r5, r5
 801c09e:	b2b6      	uxth	r6, r6
 801c0a0:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801c0a4:	f105 0a01 	add.w	sl, r5, #1
 801c0a8:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801c0ac:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801c0b0:	ea4a 0c0c 	orr.w	ip, sl, ip
 801c0b4:	f106 0a01 	add.w	sl, r6, #1
 801c0b8:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801c0bc:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801c0c0:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801c0c4:	ea4c 0c0a 	orr.w	ip, ip, sl
 801c0c8:	f820 c004 	strh.w	ip, [r0, r4]
 801c0cc:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801c0ce:	f108 38ff 	add.w	r8, r8, #4294967295
 801c0d2:	4421      	add	r1, r4
 801c0d4:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801c0d6:	4422      	add	r2, r4
 801c0d8:	e750      	b.n	801bf7c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801c0da:	f04f 0900 	mov.w	r9, #0
 801c0de:	eba3 0409 	sub.w	r4, r3, r9
 801c0e2:	2c00      	cmp	r4, #0
 801c0e4:	f77f af4e 	ble.w	801bf84 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801c0e8:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 801c0ec:	140d      	asrs	r5, r1, #16
 801c0ee:	1414      	asrs	r4, r2, #16
 801c0f0:	fb06 5404 	mla	r4, r6, r4, r5
 801c0f4:	9d02      	ldr	r5, [sp, #8]
 801c0f6:	5d2e      	ldrb	r6, [r5, r4]
 801c0f8:	2e00      	cmp	r6, #0
 801c0fa:	d04c      	beq.n	801c196 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801c0fc:	9d01      	ldr	r5, [sp, #4]
 801c0fe:	f835 8014 	ldrh.w	r8, [r5, r4, lsl #1]
 801c102:	9c05      	ldr	r4, [sp, #20]
 801c104:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 801c108:	ea4f 2c28 	mov.w	ip, r8, asr #8
 801c10c:	4366      	muls	r6, r4
 801c10e:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801c112:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801c116:	1c74      	adds	r4, r6, #1
 801c118:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801c11c:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 801c120:	122e      	asrs	r6, r5, #8
 801c122:	1224      	asrs	r4, r4, #8
 801c124:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801c128:	00ed      	lsls	r5, r5, #3
 801c12a:	b2a7      	uxth	r7, r4
 801c12c:	43e4      	mvns	r4, r4
 801c12e:	b2ed      	uxtb	r5, r5
 801c130:	b2e4      	uxtb	r4, r4
 801c132:	fb16 f604 	smulbb	r6, r6, r4
 801c136:	fb15 f504 	smulbb	r5, r5, r4
 801c13a:	fb0c 6c07 	mla	ip, ip, r7, r6
 801c13e:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801c142:	fb1a fa04 	smulbb	sl, sl, r4
 801c146:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801c14a:	fa1f fc8c 	uxth.w	ip, ip
 801c14e:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801c152:	fa5f f888 	uxtb.w	r8, r8
 801c156:	fb06 a607 	mla	r6, r6, r7, sl
 801c15a:	f10c 0401 	add.w	r4, ip, #1
 801c15e:	fb08 5507 	mla	r5, r8, r7, r5
 801c162:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801c166:	b2ad      	uxth	r5, r5
 801c168:	b2b6      	uxth	r6, r6
 801c16a:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801c16e:	f105 0a01 	add.w	sl, r5, #1
 801c172:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801c176:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801c17a:	ea4a 0c0c 	orr.w	ip, sl, ip
 801c17e:	f106 0a01 	add.w	sl, r6, #1
 801c182:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801c186:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801c18a:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801c18e:	ea4c 0c0a 	orr.w	ip, ip, sl
 801c192:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 801c196:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801c198:	f109 0901 	add.w	r9, r9, #1
 801c19c:	4421      	add	r1, r4
 801c19e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801c1a0:	4422      	add	r2, r4
 801c1a2:	e79c      	b.n	801c0de <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801c1a4:	b007      	add	sp, #28
 801c1a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c1aa <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c1aa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c1ae:	b085      	sub	sp, #20
 801c1b0:	468b      	mov	fp, r1
 801c1b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c1b6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801c1b8:	9203      	str	r2, [sp, #12]
 801c1ba:	6861      	ldr	r1, [r4, #4]
 801c1bc:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801c1c0:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	; 0x50
 801c1c4:	fb01 2000 	mla	r0, r1, r0, r2
 801c1c8:	6822      	ldr	r2, [r4, #0]
 801c1ca:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801c1ce:	f8d8 2000 	ldr.w	r2, [r8]
 801c1d2:	9200      	str	r2, [sp, #0]
 801c1d4:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801c1d8:	9201      	str	r2, [sp, #4]
 801c1da:	f1bb 0f00 	cmp.w	fp, #0
 801c1de:	dc03      	bgt.n	801c1e8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801c1e0:	9a03      	ldr	r2, [sp, #12]
 801c1e2:	2a00      	cmp	r2, #0
 801c1e4:	f340 8146 	ble.w	801c474 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801c1e8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c1ea:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801c1ee:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801c1f2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c1f4:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801c1f8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801c1fc:	2b00      	cmp	r3, #0
 801c1fe:	dd0e      	ble.n	801c21e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801c200:	140c      	asrs	r4, r1, #16
 801c202:	d405      	bmi.n	801c210 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801c204:	42bc      	cmp	r4, r7
 801c206:	da03      	bge.n	801c210 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801c208:	1414      	asrs	r4, r2, #16
 801c20a:	d401      	bmi.n	801c210 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801c20c:	42b4      	cmp	r4, r6
 801c20e:	db07      	blt.n	801c220 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801c210:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801c212:	3b01      	subs	r3, #1
 801c214:	3002      	adds	r0, #2
 801c216:	4421      	add	r1, r4
 801c218:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801c21a:	4422      	add	r2, r4
 801c21c:	e7ee      	b.n	801c1fc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801c21e:	d017      	beq.n	801c250 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801c220:	1e5c      	subs	r4, r3, #1
 801c222:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801c224:	fb05 1504 	mla	r5, r5, r4, r1
 801c228:	142d      	asrs	r5, r5, #16
 801c22a:	d409      	bmi.n	801c240 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801c22c:	42bd      	cmp	r5, r7
 801c22e:	da07      	bge.n	801c240 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801c230:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801c232:	fb05 2404 	mla	r4, r5, r4, r2
 801c236:	1424      	asrs	r4, r4, #16
 801c238:	d402      	bmi.n	801c240 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801c23a:	42b4      	cmp	r4, r6
 801c23c:	f2c0 80b3 	blt.w	801c3a6 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 801c240:	2600      	movs	r6, #0
 801c242:	199c      	adds	r4, r3, r6
 801c244:	2c00      	cmp	r4, #0
 801c246:	dc3e      	bgt.n	801c2c6 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801c248:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c24c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801c250:	f1bb 0f00 	cmp.w	fp, #0
 801c254:	f340 810e 	ble.w	801c474 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801c258:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c25c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c25e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c262:	f1bb 0b01 	subs.w	fp, fp, #1
 801c266:	eeb0 6a62 	vmov.f32	s12, s5
 801c26a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c26e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c272:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c276:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801c27a:	eeb0 6a43 	vmov.f32	s12, s6
 801c27e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c282:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801c286:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c28a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c28e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c292:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c296:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c29a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c29e:	ee12 2a90 	vmov	r2, s5
 801c2a2:	eef0 2a47 	vmov.f32	s5, s14
 801c2a6:	fb92 f3f3 	sdiv	r3, r2, r3
 801c2aa:	ee13 2a10 	vmov	r2, s6
 801c2ae:	9311      	str	r3, [sp, #68]	; 0x44
 801c2b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c2b2:	eeb0 3a67 	vmov.f32	s6, s15
 801c2b6:	fb92 f3f3 	sdiv	r3, r2, r3
 801c2ba:	9a03      	ldr	r2, [sp, #12]
 801c2bc:	9312      	str	r3, [sp, #72]	; 0x48
 801c2be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c2c0:	bf08      	it	eq
 801c2c2:	4613      	moveq	r3, r2
 801c2c4:	e789      	b.n	801c1da <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801c2c6:	140f      	asrs	r7, r1, #16
 801c2c8:	d418      	bmi.n	801c2fc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801c2ca:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801c2ce:	42bd      	cmp	r5, r7
 801c2d0:	dd14      	ble.n	801c2fc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801c2d2:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801c2d6:	d411      	bmi.n	801c2fc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801c2d8:	f8d8 400c 	ldr.w	r4, [r8, #12]
 801c2dc:	4564      	cmp	r4, ip
 801c2de:	dd0d      	ble.n	801c2fc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801c2e0:	b22d      	sxth	r5, r5
 801c2e2:	9c01      	ldr	r4, [sp, #4]
 801c2e4:	fb0c 7505 	mla	r5, ip, r5, r7
 801c2e8:	5d64      	ldrb	r4, [r4, r5]
 801c2ea:	2cff      	cmp	r4, #255	; 0xff
 801c2ec:	d10c      	bne.n	801c308 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801c2ee:	9c00      	ldr	r4, [sp, #0]
 801c2f0:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
 801c2f4:	f06f 0401 	mvn.w	r4, #1
 801c2f8:	4374      	muls	r4, r6
 801c2fa:	5305      	strh	r5, [r0, r4]
 801c2fc:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801c2fe:	3e01      	subs	r6, #1
 801c300:	4421      	add	r1, r4
 801c302:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801c304:	4422      	add	r2, r4
 801c306:	e79c      	b.n	801c242 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801c308:	2c00      	cmp	r4, #0
 801c30a:	d0f7      	beq.n	801c2fc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801c30c:	9f00      	ldr	r7, [sp, #0]
 801c30e:	fa1f fc84 	uxth.w	ip, r4
 801c312:	43e4      	mvns	r4, r4
 801c314:	f837 9015 	ldrh.w	r9, [r7, r5, lsl #1]
 801c318:	f06f 0501 	mvn.w	r5, #1
 801c31c:	b2e4      	uxtb	r4, r4
 801c31e:	4375      	muls	r5, r6
 801c320:	ea4f 2e29 	mov.w	lr, r9, asr #8
 801c324:	9502      	str	r5, [sp, #8]
 801c326:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801c32a:	5b45      	ldrh	r5, [r0, r5]
 801c32c:	122f      	asrs	r7, r5, #8
 801c32e:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801c332:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801c336:	00ed      	lsls	r5, r5, #3
 801c338:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801c33c:	fb17 f704 	smulbb	r7, r7, r4
 801c340:	b2ed      	uxtb	r5, r5
 801c342:	fb1a fa04 	smulbb	sl, sl, r4
 801c346:	fb0e 7e0c 	mla	lr, lr, ip, r7
 801c34a:	ea4f 07e9 	mov.w	r7, r9, asr #3
 801c34e:	fb15 f504 	smulbb	r5, r5, r4
 801c352:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801c356:	fa1f fe8e 	uxth.w	lr, lr
 801c35a:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801c35e:	fa5f f989 	uxtb.w	r9, r9
 801c362:	fb07 a70c 	mla	r7, r7, ip, sl
 801c366:	f10e 0401 	add.w	r4, lr, #1
 801c36a:	fb09 550c 	mla	r5, r9, ip, r5
 801c36e:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
 801c372:	9c02      	ldr	r4, [sp, #8]
 801c374:	b2ad      	uxth	r5, r5
 801c376:	b2bf      	uxth	r7, r7
 801c378:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 801c37c:	f105 0a01 	add.w	sl, r5, #1
 801c380:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801c384:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801c388:	ea4a 0e0e 	orr.w	lr, sl, lr
 801c38c:	f107 0a01 	add.w	sl, r7, #1
 801c390:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801c394:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801c398:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801c39c:	ea4e 0e0a 	orr.w	lr, lr, sl
 801c3a0:	f820 e004 	strh.w	lr, [r0, r4]
 801c3a4:	e7aa      	b.n	801c2fc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801c3a6:	f04f 0900 	mov.w	r9, #0
 801c3aa:	eba3 0409 	sub.w	r4, r3, r9
 801c3ae:	2c00      	cmp	r4, #0
 801c3b0:	f77f af4a 	ble.w	801c248 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801c3b4:	1414      	asrs	r4, r2, #16
 801c3b6:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 801c3ba:	140d      	asrs	r5, r1, #16
 801c3bc:	fb06 5504 	mla	r5, r6, r4, r5
 801c3c0:	9c01      	ldr	r4, [sp, #4]
 801c3c2:	5d64      	ldrb	r4, [r4, r5]
 801c3c4:	2cff      	cmp	r4, #255	; 0xff
 801c3c6:	d10b      	bne.n	801c3e0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 801c3c8:	9c00      	ldr	r4, [sp, #0]
 801c3ca:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
 801c3ce:	f820 4019 	strh.w	r4, [r0, r9, lsl #1]
 801c3d2:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801c3d4:	f109 0901 	add.w	r9, r9, #1
 801c3d8:	4421      	add	r1, r4
 801c3da:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801c3dc:	4422      	add	r2, r4
 801c3de:	e7e4      	b.n	801c3aa <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801c3e0:	2c00      	cmp	r4, #0
 801c3e2:	d0f6      	beq.n	801c3d2 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801c3e4:	9e00      	ldr	r6, [sp, #0]
 801c3e6:	b2a7      	uxth	r7, r4
 801c3e8:	43e4      	mvns	r4, r4
 801c3ea:	f836 e015 	ldrh.w	lr, [r6, r5, lsl #1]
 801c3ee:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 801c3f2:	b2e4      	uxtb	r4, r4
 801c3f4:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801c3f8:	122e      	asrs	r6, r5, #8
 801c3fa:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801c3fe:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801c402:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801c406:	00ed      	lsls	r5, r5, #3
 801c408:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801c40c:	fb16 f604 	smulbb	r6, r6, r4
 801c410:	b2ed      	uxtb	r5, r5
 801c412:	fb1a fa04 	smulbb	sl, sl, r4
 801c416:	fb0c 6c07 	mla	ip, ip, r7, r6
 801c41a:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801c41e:	fb15 f504 	smulbb	r5, r5, r4
 801c422:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801c426:	fa1f fc8c 	uxth.w	ip, ip
 801c42a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801c42e:	fa5f fe8e 	uxtb.w	lr, lr
 801c432:	fb06 a607 	mla	r6, r6, r7, sl
 801c436:	f10c 0401 	add.w	r4, ip, #1
 801c43a:	fb0e 5507 	mla	r5, lr, r7, r5
 801c43e:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801c442:	b2ad      	uxth	r5, r5
 801c444:	b2b6      	uxth	r6, r6
 801c446:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801c44a:	f105 0a01 	add.w	sl, r5, #1
 801c44e:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801c452:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801c456:	ea4a 0c0c 	orr.w	ip, sl, ip
 801c45a:	f106 0a01 	add.w	sl, r6, #1
 801c45e:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801c462:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801c466:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801c46a:	ea4c 0c0a 	orr.w	ip, ip, sl
 801c46e:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 801c472:	e7ae      	b.n	801c3d2 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801c474:	b005      	add	sp, #20
 801c476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c47a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c47a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c47e:	b085      	sub	sp, #20
 801c480:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801c482:	9203      	str	r2, [sp, #12]
 801c484:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 801c488:	9100      	str	r1, [sp, #0]
 801c48a:	9201      	str	r2, [sp, #4]
 801c48c:	6841      	ldr	r1, [r0, #4]
 801c48e:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 801c492:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801c496:	fb01 2404 	mla	r4, r1, r4, r2
 801c49a:	6802      	ldr	r2, [r0, #0]
 801c49c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801c4a0:	f8de 2000 	ldr.w	r2, [lr]
 801c4a4:	9202      	str	r2, [sp, #8]
 801c4a6:	9a01      	ldr	r2, [sp, #4]
 801c4a8:	43d6      	mvns	r6, r2
 801c4aa:	b2f6      	uxtb	r6, r6
 801c4ac:	9a00      	ldr	r2, [sp, #0]
 801c4ae:	2a00      	cmp	r2, #0
 801c4b0:	dc03      	bgt.n	801c4ba <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801c4b2:	9a03      	ldr	r2, [sp, #12]
 801c4b4:	2a00      	cmp	r2, #0
 801c4b6:	f340 8124 	ble.w	801c702 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801c4ba:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c4bc:	f9be c008 	ldrsh.w	ip, [lr, #8]
 801c4c0:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801c4c4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c4c6:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 801c4ca:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801c4ce:	2b00      	cmp	r3, #0
 801c4d0:	dd0e      	ble.n	801c4f0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801c4d2:	1408      	asrs	r0, r1, #16
 801c4d4:	d405      	bmi.n	801c4e2 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801c4d6:	4560      	cmp	r0, ip
 801c4d8:	da03      	bge.n	801c4e2 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801c4da:	1410      	asrs	r0, r2, #16
 801c4dc:	d401      	bmi.n	801c4e2 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801c4de:	42b8      	cmp	r0, r7
 801c4e0:	db07      	blt.n	801c4f2 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801c4e2:	9811      	ldr	r0, [sp, #68]	; 0x44
 801c4e4:	3b01      	subs	r3, #1
 801c4e6:	3402      	adds	r4, #2
 801c4e8:	4401      	add	r1, r0
 801c4ea:	9812      	ldr	r0, [sp, #72]	; 0x48
 801c4ec:	4402      	add	r2, r0
 801c4ee:	e7ee      	b.n	801c4ce <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801c4f0:	d06e      	beq.n	801c5d0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801c4f2:	1e58      	subs	r0, r3, #1
 801c4f4:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801c4f6:	fb05 1500 	mla	r5, r5, r0, r1
 801c4fa:	142d      	asrs	r5, r5, #16
 801c4fc:	d45c      	bmi.n	801c5b8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801c4fe:	4565      	cmp	r5, ip
 801c500:	da5a      	bge.n	801c5b8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801c502:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801c504:	fb05 2000 	mla	r0, r5, r0, r2
 801c508:	1400      	asrs	r0, r0, #16
 801c50a:	d455      	bmi.n	801c5b8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801c50c:	42b8      	cmp	r0, r7
 801c50e:	da53      	bge.n	801c5b8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801c510:	4699      	mov	r9, r3
 801c512:	46a2      	mov	sl, r4
 801c514:	f8bd b004 	ldrh.w	fp, [sp, #4]
 801c518:	f1b9 0f00 	cmp.w	r9, #0
 801c51c:	dd54      	ble.n	801c5c8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801c51e:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801c522:	140d      	asrs	r5, r1, #16
 801c524:	1410      	asrs	r0, r2, #16
 801c526:	f109 39ff 	add.w	r9, r9, #4294967295
 801c52a:	fb07 5000 	mla	r0, r7, r0, r5
 801c52e:	9d02      	ldr	r5, [sp, #8]
 801c530:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801c534:	f8ba 5000 	ldrh.w	r5, [sl]
 801c538:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801c53c:	122f      	asrs	r7, r5, #8
 801c53e:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801c542:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801c546:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801c54a:	00ed      	lsls	r5, r5, #3
 801c54c:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 801c550:	fb17 f706 	smulbb	r7, r7, r6
 801c554:	b2ed      	uxtb	r5, r5
 801c556:	fb18 f806 	smulbb	r8, r8, r6
 801c55a:	fb0c 7c0b 	mla	ip, ip, fp, r7
 801c55e:	10c7      	asrs	r7, r0, #3
 801c560:	fb15 f506 	smulbb	r5, r5, r6
 801c564:	00c0      	lsls	r0, r0, #3
 801c566:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801c56a:	fa1f fc8c 	uxth.w	ip, ip
 801c56e:	b2c0      	uxtb	r0, r0
 801c570:	fb07 870b 	mla	r7, r7, fp, r8
 801c574:	fb00 500b 	mla	r0, r0, fp, r5
 801c578:	f10c 0501 	add.w	r5, ip, #1
 801c57c:	b2bf      	uxth	r7, r7
 801c57e:	b280      	uxth	r0, r0
 801c580:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801c584:	f107 0801 	add.w	r8, r7, #1
 801c588:	1c45      	adds	r5, r0, #1
 801c58a:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 801c58e:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801c592:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801c596:	9811      	ldr	r0, [sp, #68]	; 0x44
 801c598:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801c59c:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801c5a0:	4401      	add	r1, r0
 801c5a2:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801c5a6:	9812      	ldr	r0, [sp, #72]	; 0x48
 801c5a8:	ea45 0c0c 	orr.w	ip, r5, ip
 801c5ac:	4402      	add	r2, r0
 801c5ae:	ea4c 0c08 	orr.w	ip, ip, r8
 801c5b2:	f82a cb02 	strh.w	ip, [sl], #2
 801c5b6:	e7af      	b.n	801c518 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801c5b8:	f04f 0800 	mov.w	r8, #0
 801c5bc:	f8bd a004 	ldrh.w	sl, [sp, #4]
 801c5c0:	eb03 0008 	add.w	r0, r3, r8
 801c5c4:	2800      	cmp	r0, #0
 801c5c6:	dc41      	bgt.n	801c64c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801c5c8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c5cc:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801c5d0:	9b00      	ldr	r3, [sp, #0]
 801c5d2:	2b00      	cmp	r3, #0
 801c5d4:	f340 8095 	ble.w	801c702 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801c5d8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801c5dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c5de:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c5e2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c5e6:	eef0 6a62 	vmov.f32	s13, s5
 801c5ea:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801c5ee:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c5f2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c5f6:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 801c5fa:	eef0 6a43 	vmov.f32	s13, s6
 801c5fe:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c602:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 801c606:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c60a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c60e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c612:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c616:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c61a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c61e:	ee12 2a90 	vmov	r2, s5
 801c622:	eef0 2a47 	vmov.f32	s5, s14
 801c626:	fb92 f3f3 	sdiv	r3, r2, r3
 801c62a:	ee13 2a10 	vmov	r2, s6
 801c62e:	9311      	str	r3, [sp, #68]	; 0x44
 801c630:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c632:	eeb0 3a67 	vmov.f32	s6, s15
 801c636:	fb92 f3f3 	sdiv	r3, r2, r3
 801c63a:	9312      	str	r3, [sp, #72]	; 0x48
 801c63c:	9b00      	ldr	r3, [sp, #0]
 801c63e:	9a03      	ldr	r2, [sp, #12]
 801c640:	3b01      	subs	r3, #1
 801c642:	9300      	str	r3, [sp, #0]
 801c644:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c646:	bf08      	it	eq
 801c648:	4613      	moveq	r3, r2
 801c64a:	e72f      	b.n	801c4ac <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801c64c:	140f      	asrs	r7, r1, #16
 801c64e:	d451      	bmi.n	801c6f4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801c650:	f8de 5008 	ldr.w	r5, [lr, #8]
 801c654:	42bd      	cmp	r5, r7
 801c656:	dd4d      	ble.n	801c6f4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801c658:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801c65c:	d44a      	bmi.n	801c6f4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801c65e:	f8de 000c 	ldr.w	r0, [lr, #12]
 801c662:	4560      	cmp	r0, ip
 801c664:	dd46      	ble.n	801c6f4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801c666:	b22d      	sxth	r5, r5
 801c668:	9802      	ldr	r0, [sp, #8]
 801c66a:	fb0c 7505 	mla	r5, ip, r5, r7
 801c66e:	f830 0015 	ldrh.w	r0, [r0, r5, lsl #1]
 801c672:	f06f 0501 	mvn.w	r5, #1
 801c676:	fb05 fb08 	mul.w	fp, r5, r8
 801c67a:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801c67e:	f834 500b 	ldrh.w	r5, [r4, fp]
 801c682:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801c686:	122f      	asrs	r7, r5, #8
 801c688:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801c68c:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801c690:	00ed      	lsls	r5, r5, #3
 801c692:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801c696:	fb17 f706 	smulbb	r7, r7, r6
 801c69a:	b2ed      	uxtb	r5, r5
 801c69c:	fb19 f906 	smulbb	r9, r9, r6
 801c6a0:	fb0c 7c0a 	mla	ip, ip, sl, r7
 801c6a4:	10c7      	asrs	r7, r0, #3
 801c6a6:	fb15 f506 	smulbb	r5, r5, r6
 801c6aa:	00c0      	lsls	r0, r0, #3
 801c6ac:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801c6b0:	fa1f fc8c 	uxth.w	ip, ip
 801c6b4:	b2c0      	uxtb	r0, r0
 801c6b6:	fb07 970a 	mla	r7, r7, sl, r9
 801c6ba:	fb00 500a 	mla	r0, r0, sl, r5
 801c6be:	f10c 0501 	add.w	r5, ip, #1
 801c6c2:	b2bf      	uxth	r7, r7
 801c6c4:	b280      	uxth	r0, r0
 801c6c6:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801c6ca:	f107 0901 	add.w	r9, r7, #1
 801c6ce:	1c45      	adds	r5, r0, #1
 801c6d0:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 801c6d4:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801c6d8:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801c6dc:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801c6e0:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801c6e4:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801c6e8:	ea45 0c0c 	orr.w	ip, r5, ip
 801c6ec:	ea4c 0c09 	orr.w	ip, ip, r9
 801c6f0:	f824 c00b 	strh.w	ip, [r4, fp]
 801c6f4:	9811      	ldr	r0, [sp, #68]	; 0x44
 801c6f6:	f108 38ff 	add.w	r8, r8, #4294967295
 801c6fa:	4401      	add	r1, r0
 801c6fc:	9812      	ldr	r0, [sp, #72]	; 0x48
 801c6fe:	4402      	add	r2, r0
 801c700:	e75e      	b.n	801c5c0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801c702:	b005      	add	sp, #20
 801c704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c708 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c70c:	b085      	sub	sp, #20
 801c70e:	4693      	mov	fp, r2
 801c710:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c714:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801c716:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801c718:	6870      	ldr	r0, [r6, #4]
 801c71a:	9101      	str	r1, [sp, #4]
 801c71c:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801c720:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 801c724:	fb00 2404 	mla	r4, r0, r4, r2
 801c728:	6832      	ldr	r2, [r6, #0]
 801c72a:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801c72e:	682a      	ldr	r2, [r5, #0]
 801c730:	9202      	str	r2, [sp, #8]
 801c732:	9a01      	ldr	r2, [sp, #4]
 801c734:	2a00      	cmp	r2, #0
 801c736:	dc03      	bgt.n	801c740 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801c738:	f1bb 0f00 	cmp.w	fp, #0
 801c73c:	f340 809a 	ble.w	801c874 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801c740:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c742:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801c746:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801c74a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c74c:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801c750:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801c754:	2b00      	cmp	r3, #0
 801c756:	dd0c      	ble.n	801c772 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801c758:	1406      	asrs	r6, r0, #16
 801c75a:	d405      	bmi.n	801c768 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801c75c:	454e      	cmp	r6, r9
 801c75e:	da03      	bge.n	801c768 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801c760:	1416      	asrs	r6, r2, #16
 801c762:	d401      	bmi.n	801c768 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801c764:	4546      	cmp	r6, r8
 801c766:	db05      	blt.n	801c774 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801c768:	4470      	add	r0, lr
 801c76a:	4462      	add	r2, ip
 801c76c:	3b01      	subs	r3, #1
 801c76e:	3402      	adds	r4, #2
 801c770:	e7f0      	b.n	801c754 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801c772:	d00f      	beq.n	801c794 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801c774:	1e5e      	subs	r6, r3, #1
 801c776:	fb0e 0706 	mla	r7, lr, r6, r0
 801c77a:	143f      	asrs	r7, r7, #16
 801c77c:	d541      	bpl.n	801c802 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 801c77e:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 801c782:	4698      	mov	r8, r3
 801c784:	9603      	str	r6, [sp, #12]
 801c786:	f1b8 0f00 	cmp.w	r8, #0
 801c78a:	dc56      	bgt.n	801c83a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 801c78c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c790:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801c794:	9b01      	ldr	r3, [sp, #4]
 801c796:	2b00      	cmp	r3, #0
 801c798:	dd6c      	ble.n	801c874 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801c79a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c79e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c7a0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c7a4:	eeb0 6a62 	vmov.f32	s12, s5
 801c7a8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c7ac:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c7b0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c7b4:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801c7b8:	eeb0 6a43 	vmov.f32	s12, s6
 801c7bc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c7c0:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801c7c4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c7c8:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c7cc:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c7d0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c7d4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c7d8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c7dc:	ee12 2a90 	vmov	r2, s5
 801c7e0:	eef0 2a47 	vmov.f32	s5, s14
 801c7e4:	fb92 fef3 	sdiv	lr, r2, r3
 801c7e8:	ee13 2a10 	vmov	r2, s6
 801c7ec:	eeb0 3a67 	vmov.f32	s6, s15
 801c7f0:	fb92 fcf3 	sdiv	ip, r2, r3
 801c7f4:	9b01      	ldr	r3, [sp, #4]
 801c7f6:	3b01      	subs	r3, #1
 801c7f8:	9301      	str	r3, [sp, #4]
 801c7fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c7fc:	bf08      	it	eq
 801c7fe:	465b      	moveq	r3, fp
 801c800:	e797      	b.n	801c732 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801c802:	454f      	cmp	r7, r9
 801c804:	dabb      	bge.n	801c77e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801c806:	fb0c 2606 	mla	r6, ip, r6, r2
 801c80a:	1436      	asrs	r6, r6, #16
 801c80c:	d4b7      	bmi.n	801c77e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801c80e:	4546      	cmp	r6, r8
 801c810:	dab5      	bge.n	801c77e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801c812:	461e      	mov	r6, r3
 801c814:	46a0      	mov	r8, r4
 801c816:	2e00      	cmp	r6, #0
 801c818:	ddb8      	ble.n	801c78c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801c81a:	1417      	asrs	r7, r2, #16
 801c81c:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 801c820:	ea4f 4920 	mov.w	r9, r0, asr #16
 801c824:	9902      	ldr	r1, [sp, #8]
 801c826:	4470      	add	r0, lr
 801c828:	4462      	add	r2, ip
 801c82a:	fb0a 9707 	mla	r7, sl, r7, r9
 801c82e:	3e01      	subs	r6, #1
 801c830:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 801c834:	f828 7b02 	strh.w	r7, [r8], #2
 801c838:	e7ed      	b.n	801c816 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 801c83a:	ea5f 4920 	movs.w	r9, r0, asr #16
 801c83e:	d414      	bmi.n	801c86a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801c840:	68ae      	ldr	r6, [r5, #8]
 801c842:	454e      	cmp	r6, r9
 801c844:	dd11      	ble.n	801c86a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801c846:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801c84a:	d40e      	bmi.n	801c86a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801c84c:	68ef      	ldr	r7, [r5, #12]
 801c84e:	4557      	cmp	r7, sl
 801c850:	dd0b      	ble.n	801c86a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801c852:	b236      	sxth	r6, r6
 801c854:	f06f 0101 	mvn.w	r1, #1
 801c858:	9f02      	ldr	r7, [sp, #8]
 801c85a:	fb0a 9606 	mla	r6, sl, r6, r9
 801c85e:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801c862:	fb01 f608 	mul.w	r6, r1, r8
 801c866:	9903      	ldr	r1, [sp, #12]
 801c868:	538f      	strh	r7, [r1, r6]
 801c86a:	4470      	add	r0, lr
 801c86c:	4462      	add	r2, ip
 801c86e:	f108 38ff 	add.w	r8, r8, #4294967295
 801c872:	e788      	b.n	801c786 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801c874:	b005      	add	sp, #20
 801c876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c87a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c87a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c87e:	b087      	sub	sp, #28
 801c880:	468b      	mov	fp, r1
 801c882:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c886:	9815      	ldr	r0, [sp, #84]	; 0x54
 801c888:	9203      	str	r2, [sp, #12]
 801c88a:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801c88e:	6841      	ldr	r1, [r0, #4]
 801c890:	9204      	str	r2, [sp, #16]
 801c892:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 801c896:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801c89a:	fb01 2505 	mla	r5, r1, r5, r2
 801c89e:	6802      	ldr	r2, [r0, #0]
 801c8a0:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 801c8a4:	f8d9 2000 	ldr.w	r2, [r9]
 801c8a8:	9201      	str	r2, [sp, #4]
 801c8aa:	f1bb 0f00 	cmp.w	fp, #0
 801c8ae:	dc03      	bgt.n	801c8b8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801c8b0:	9a03      	ldr	r2, [sp, #12]
 801c8b2:	2a00      	cmp	r2, #0
 801c8b4:	f340 8158 	ble.w	801cb68 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
 801c8b8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c8ba:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 801c8be:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801c8c2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c8c4:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 801c8c8:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801c8cc:	2b00      	cmp	r3, #0
 801c8ce:	dd0e      	ble.n	801c8ee <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801c8d0:	1402      	asrs	r2, r0, #16
 801c8d2:	d405      	bmi.n	801c8e0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801c8d4:	42ba      	cmp	r2, r7
 801c8d6:	da03      	bge.n	801c8e0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801c8d8:	140a      	asrs	r2, r1, #16
 801c8da:	d401      	bmi.n	801c8e0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801c8dc:	42b2      	cmp	r2, r6
 801c8de:	db07      	blt.n	801c8f0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801c8e0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c8e2:	3b01      	subs	r3, #1
 801c8e4:	3502      	adds	r5, #2
 801c8e6:	4410      	add	r0, r2
 801c8e8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c8ea:	4411      	add	r1, r2
 801c8ec:	e7ee      	b.n	801c8cc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801c8ee:	d017      	beq.n	801c920 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801c8f0:	1e5a      	subs	r2, r3, #1
 801c8f2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801c8f4:	fb04 0402 	mla	r4, r4, r2, r0
 801c8f8:	1424      	asrs	r4, r4, #16
 801c8fa:	d409      	bmi.n	801c910 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801c8fc:	42bc      	cmp	r4, r7
 801c8fe:	da07      	bge.n	801c910 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801c900:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801c902:	fb04 1202 	mla	r2, r4, r2, r1
 801c906:	1412      	asrs	r2, r2, #16
 801c908:	d402      	bmi.n	801c910 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801c90a:	42b2      	cmp	r2, r6
 801c90c:	f2c0 80bf 	blt.w	801ca8e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801c910:	2700      	movs	r7, #0
 801c912:	19da      	adds	r2, r3, r7
 801c914:	2a00      	cmp	r2, #0
 801c916:	dc3e      	bgt.n	801c996 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801c918:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c91c:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 801c920:	f1bb 0f00 	cmp.w	fp, #0
 801c924:	f340 8120 	ble.w	801cb68 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
 801c928:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c92c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c92e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c932:	f1bb 0b01 	subs.w	fp, fp, #1
 801c936:	eeb0 6a62 	vmov.f32	s12, s5
 801c93a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c93e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c942:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c946:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801c94a:	eeb0 6a43 	vmov.f32	s12, s6
 801c94e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c952:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801c956:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c95a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c95e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c962:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c966:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c96a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c96e:	ee12 2a90 	vmov	r2, s5
 801c972:	eef0 2a47 	vmov.f32	s5, s14
 801c976:	fb92 f3f3 	sdiv	r3, r2, r3
 801c97a:	ee13 2a10 	vmov	r2, s6
 801c97e:	9313      	str	r3, [sp, #76]	; 0x4c
 801c980:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c982:	eeb0 3a67 	vmov.f32	s6, s15
 801c986:	fb92 f3f3 	sdiv	r3, r2, r3
 801c98a:	9a03      	ldr	r2, [sp, #12]
 801c98c:	9314      	str	r3, [sp, #80]	; 0x50
 801c98e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c990:	bf08      	it	eq
 801c992:	4613      	moveq	r3, r2
 801c994:	e789      	b.n	801c8aa <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801c996:	1406      	asrs	r6, r0, #16
 801c998:	d42d      	bmi.n	801c9f6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801c99a:	f8d9 4008 	ldr.w	r4, [r9, #8]
 801c99e:	42b4      	cmp	r4, r6
 801c9a0:	dd29      	ble.n	801c9f6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801c9a2:	ea5f 4c21 	movs.w	ip, r1, asr #16
 801c9a6:	d426      	bmi.n	801c9f6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801c9a8:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801c9ac:	4562      	cmp	r2, ip
 801c9ae:	dd22      	ble.n	801c9f6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801c9b0:	b224      	sxth	r4, r4
 801c9b2:	9a01      	ldr	r2, [sp, #4]
 801c9b4:	fb0c 6404 	mla	r4, ip, r4, r6
 801c9b8:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
 801c9bc:	0e22      	lsrs	r2, r4, #24
 801c9be:	d01a      	beq.n	801c9f6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801c9c0:	9e04      	ldr	r6, [sp, #16]
 801c9c2:	4372      	muls	r2, r6
 801c9c4:	1c56      	adds	r6, r2, #1
 801c9c6:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801c9ca:	0a26      	lsrs	r6, r4, #8
 801c9cc:	1212      	asrs	r2, r2, #8
 801c9ce:	9605      	str	r6, [sp, #20]
 801c9d0:	2aff      	cmp	r2, #255	; 0xff
 801c9d2:	d116      	bne.n	801ca02 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 801c9d4:	f06f 0201 	mvn.w	r2, #1
 801c9d8:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 801c9dc:	fb02 fc07 	mul.w	ip, r2, r7
 801c9e0:	0962      	lsrs	r2, r4, #5
 801c9e2:	f026 0607 	bic.w	r6, r6, #7
 801c9e6:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801c9ea:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801c9ee:	4316      	orrs	r6, r2
 801c9f0:	4326      	orrs	r6, r4
 801c9f2:	f825 600c 	strh.w	r6, [r5, ip]
 801c9f6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c9f8:	3f01      	subs	r7, #1
 801c9fa:	4410      	add	r0, r2
 801c9fc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c9fe:	4411      	add	r1, r2
 801ca00:	e787      	b.n	801c912 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801ca02:	f06f 0601 	mvn.w	r6, #1
 801ca06:	fa1f fa82 	uxth.w	sl, r2
 801ca0a:	f3c4 4c07 	ubfx	ip, r4, #16, #8
 801ca0e:	43d2      	mvns	r2, r2
 801ca10:	437e      	muls	r6, r7
 801ca12:	b2e4      	uxtb	r4, r4
 801ca14:	fb1c fc0a 	smulbb	ip, ip, sl
 801ca18:	b2d2      	uxtb	r2, r2
 801ca1a:	f835 8006 	ldrh.w	r8, [r5, r6]
 801ca1e:	fb14 f40a 	smulbb	r4, r4, sl
 801ca22:	9602      	str	r6, [sp, #8]
 801ca24:	ea4f 2e28 	mov.w	lr, r8, asr #8
 801ca28:	f89d 6014 	ldrb.w	r6, [sp, #20]
 801ca2c:	fb16 f60a 	smulbb	r6, r6, sl
 801ca30:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801ca34:	fb0e ce02 	mla	lr, lr, r2, ip
 801ca38:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 801ca3c:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801ca40:	fa1f fe8e 	uxth.w	lr, lr
 801ca44:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801ca48:	fa5f f888 	uxtb.w	r8, r8
 801ca4c:	fb0c 6c02 	mla	ip, ip, r2, r6
 801ca50:	fb08 4402 	mla	r4, r8, r2, r4
 801ca54:	f10e 0201 	add.w	r2, lr, #1
 801ca58:	fa1f fc8c 	uxth.w	ip, ip
 801ca5c:	b2a4      	uxth	r4, r4
 801ca5e:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801ca62:	9a02      	ldr	r2, [sp, #8]
 801ca64:	1c66      	adds	r6, r4, #1
 801ca66:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 801ca6a:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 801ca6e:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801ca72:	ea46 0e0e 	orr.w	lr, r6, lr
 801ca76:	f10c 0601 	add.w	r6, ip, #1
 801ca7a:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 801ca7e:	0976      	lsrs	r6, r6, #5
 801ca80:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801ca84:	ea4e 0e06 	orr.w	lr, lr, r6
 801ca88:	f825 e002 	strh.w	lr, [r5, r2]
 801ca8c:	e7b3      	b.n	801c9f6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801ca8e:	f04f 0800 	mov.w	r8, #0
 801ca92:	eba3 0208 	sub.w	r2, r3, r8
 801ca96:	2a00      	cmp	r2, #0
 801ca98:	f77f af3e 	ble.w	801c918 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801ca9c:	1404      	asrs	r4, r0, #16
 801ca9e:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
 801caa2:	140a      	asrs	r2, r1, #16
 801caa4:	fb06 4202 	mla	r2, r6, r2, r4
 801caa8:	9c01      	ldr	r4, [sp, #4]
 801caaa:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
 801caae:	0e22      	lsrs	r2, r4, #24
 801cab0:	d015      	beq.n	801cade <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 801cab2:	9e04      	ldr	r6, [sp, #16]
 801cab4:	4372      	muls	r2, r6
 801cab6:	1c56      	adds	r6, r2, #1
 801cab8:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801cabc:	0a26      	lsrs	r6, r4, #8
 801cabe:	1212      	asrs	r2, r2, #8
 801cac0:	2aff      	cmp	r2, #255	; 0xff
 801cac2:	d113      	bne.n	801caec <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 801cac4:	0962      	lsrs	r2, r4, #5
 801cac6:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 801caca:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801cace:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801cad2:	f026 0607 	bic.w	r6, r6, #7
 801cad6:	4316      	orrs	r6, r2
 801cad8:	4326      	orrs	r6, r4
 801cada:	f825 6018 	strh.w	r6, [r5, r8, lsl #1]
 801cade:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801cae0:	f108 0801 	add.w	r8, r8, #1
 801cae4:	4410      	add	r0, r2
 801cae6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801cae8:	4411      	add	r1, r2
 801caea:	e7d2      	b.n	801ca92 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 801caec:	f835 e018 	ldrh.w	lr, [r5, r8, lsl #1]
 801caf0:	fa1f fa82 	uxth.w	sl, r2
 801caf4:	f3c4 4707 	ubfx	r7, r4, #16, #8
 801caf8:	43d2      	mvns	r2, r2
 801cafa:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801cafe:	fb17 f70a 	smulbb	r7, r7, sl
 801cb02:	b2d2      	uxtb	r2, r2
 801cb04:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801cb08:	b2e4      	uxtb	r4, r4
 801cb0a:	b2f6      	uxtb	r6, r6
 801cb0c:	fb0c 7c02 	mla	ip, ip, r2, r7
 801cb10:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801cb14:	fb14 f40a 	smulbb	r4, r4, sl
 801cb18:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801cb1c:	fa1f fc8c 	uxth.w	ip, ip
 801cb20:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801cb24:	fb16 f60a 	smulbb	r6, r6, sl
 801cb28:	fa5f fe8e 	uxtb.w	lr, lr
 801cb2c:	fb0e 4402 	mla	r4, lr, r2, r4
 801cb30:	fb07 6702 	mla	r7, r7, r2, r6
 801cb34:	f10c 0201 	add.w	r2, ip, #1
 801cb38:	b2a4      	uxth	r4, r4
 801cb3a:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801cb3e:	1c66      	adds	r6, r4, #1
 801cb40:	b2bf      	uxth	r7, r7
 801cb42:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801cb46:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 801cb4a:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801cb4e:	ea46 0c0c 	orr.w	ip, r6, ip
 801cb52:	1c7e      	adds	r6, r7, #1
 801cb54:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 801cb58:	0976      	lsrs	r6, r6, #5
 801cb5a:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801cb5e:	ea4c 0c06 	orr.w	ip, ip, r6
 801cb62:	f825 c018 	strh.w	ip, [r5, r8, lsl #1]
 801cb66:	e7ba      	b.n	801cade <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 801cb68:	b007      	add	sp, #28
 801cb6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801cb70 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801cb70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cb74:	b085      	sub	sp, #20
 801cb76:	468b      	mov	fp, r1
 801cb78:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801cb7c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801cb7e:	9203      	str	r2, [sp, #12]
 801cb80:	6841      	ldr	r1, [r0, #4]
 801cb82:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801cb86:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801cb8a:	fb01 2404 	mla	r4, r1, r4, r2
 801cb8e:	6802      	ldr	r2, [r0, #0]
 801cb90:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801cb94:	f8d8 2000 	ldr.w	r2, [r8]
 801cb98:	9201      	str	r2, [sp, #4]
 801cb9a:	f1bb 0f00 	cmp.w	fp, #0
 801cb9e:	dc03      	bgt.n	801cba8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801cba0:	9a03      	ldr	r2, [sp, #12]
 801cba2:	2a00      	cmp	r2, #0
 801cba4:	f340 814f 	ble.w	801ce46 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 801cba8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801cbaa:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801cbae:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801cbb2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801cbb4:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801cbb8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801cbbc:	2b00      	cmp	r3, #0
 801cbbe:	dd0e      	ble.n	801cbde <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801cbc0:	1408      	asrs	r0, r1, #16
 801cbc2:	d405      	bmi.n	801cbd0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801cbc4:	42b8      	cmp	r0, r7
 801cbc6:	da03      	bge.n	801cbd0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801cbc8:	1410      	asrs	r0, r2, #16
 801cbca:	d401      	bmi.n	801cbd0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801cbcc:	42b0      	cmp	r0, r6
 801cbce:	db07      	blt.n	801cbe0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801cbd0:	9811      	ldr	r0, [sp, #68]	; 0x44
 801cbd2:	3b01      	subs	r3, #1
 801cbd4:	3402      	adds	r4, #2
 801cbd6:	4401      	add	r1, r0
 801cbd8:	9812      	ldr	r0, [sp, #72]	; 0x48
 801cbda:	4402      	add	r2, r0
 801cbdc:	e7ee      	b.n	801cbbc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801cbde:	d017      	beq.n	801cc10 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801cbe0:	1e58      	subs	r0, r3, #1
 801cbe2:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801cbe4:	fb05 1500 	mla	r5, r5, r0, r1
 801cbe8:	142d      	asrs	r5, r5, #16
 801cbea:	d409      	bmi.n	801cc00 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801cbec:	42bd      	cmp	r5, r7
 801cbee:	da07      	bge.n	801cc00 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801cbf0:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801cbf2:	fb05 2000 	mla	r0, r5, r0, r2
 801cbf6:	1400      	asrs	r0, r0, #16
 801cbf8:	d402      	bmi.n	801cc00 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801cbfa:	42b0      	cmp	r0, r6
 801cbfc:	f2c0 80ba 	blt.w	801cd74 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801cc00:	2600      	movs	r6, #0
 801cc02:	1998      	adds	r0, r3, r6
 801cc04:	2800      	cmp	r0, #0
 801cc06:	dc3e      	bgt.n	801cc86 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801cc08:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801cc0c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801cc10:	f1bb 0f00 	cmp.w	fp, #0
 801cc14:	f340 8117 	ble.w	801ce46 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 801cc18:	ee30 0a04 	vadd.f32	s0, s0, s8
 801cc1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cc1e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801cc22:	f1bb 0b01 	subs.w	fp, fp, #1
 801cc26:	eeb0 6a62 	vmov.f32	s12, s5
 801cc2a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801cc2e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801cc32:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801cc36:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801cc3a:	eeb0 6a43 	vmov.f32	s12, s6
 801cc3e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801cc42:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801cc46:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801cc4a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801cc4e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801cc52:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801cc56:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801cc5a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801cc5e:	ee12 2a90 	vmov	r2, s5
 801cc62:	eef0 2a47 	vmov.f32	s5, s14
 801cc66:	fb92 f3f3 	sdiv	r3, r2, r3
 801cc6a:	ee13 2a10 	vmov	r2, s6
 801cc6e:	9311      	str	r3, [sp, #68]	; 0x44
 801cc70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cc72:	eeb0 3a67 	vmov.f32	s6, s15
 801cc76:	fb92 f3f3 	sdiv	r3, r2, r3
 801cc7a:	9a03      	ldr	r2, [sp, #12]
 801cc7c:	9312      	str	r3, [sp, #72]	; 0x48
 801cc7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cc80:	bf08      	it	eq
 801cc82:	4613      	moveq	r3, r2
 801cc84:	e789      	b.n	801cb9a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801cc86:	140f      	asrs	r7, r1, #16
 801cc88:	d424      	bmi.n	801ccd4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801cc8a:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801cc8e:	42bd      	cmp	r5, r7
 801cc90:	dd20      	ble.n	801ccd4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801cc92:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801cc96:	d41d      	bmi.n	801ccd4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801cc98:	f8d8 000c 	ldr.w	r0, [r8, #12]
 801cc9c:	4560      	cmp	r0, ip
 801cc9e:	dd19      	ble.n	801ccd4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801cca0:	b22d      	sxth	r5, r5
 801cca2:	9801      	ldr	r0, [sp, #4]
 801cca4:	fb0c 7505 	mla	r5, ip, r5, r7
 801cca8:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 801ccac:	0e07      	lsrs	r7, r0, #24
 801ccae:	2fff      	cmp	r7, #255	; 0xff
 801ccb0:	d116      	bne.n	801cce0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801ccb2:	f06f 0501 	mvn.w	r5, #1
 801ccb6:	fb05 f706 	mul.w	r7, r5, r6
 801ccba:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 801ccbe:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 801ccc2:	0945      	lsrs	r5, r0, #5
 801ccc4:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801ccc8:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801cccc:	ea4c 0505 	orr.w	r5, ip, r5
 801ccd0:	4305      	orrs	r5, r0
 801ccd2:	53e5      	strh	r5, [r4, r7]
 801ccd4:	9811      	ldr	r0, [sp, #68]	; 0x44
 801ccd6:	3e01      	subs	r6, #1
 801ccd8:	4401      	add	r1, r0
 801ccda:	9812      	ldr	r0, [sp, #72]	; 0x48
 801ccdc:	4402      	add	r2, r0
 801ccde:	e790      	b.n	801cc02 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801cce0:	b2fd      	uxtb	r5, r7
 801cce2:	2f00      	cmp	r7, #0
 801cce4:	d0f6      	beq.n	801ccd4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801cce6:	f06f 0701 	mvn.w	r7, #1
 801ccea:	fa1f f985 	uxth.w	r9, r5
 801ccee:	43ed      	mvns	r5, r5
 801ccf0:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801ccf4:	4377      	muls	r7, r6
 801ccf6:	fb1a fa09 	smulbb	sl, sl, r9
 801ccfa:	b2ed      	uxtb	r5, r5
 801ccfc:	f834 e007 	ldrh.w	lr, [r4, r7]
 801cd00:	9702      	str	r7, [sp, #8]
 801cd02:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801cd06:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801cd0a:	fb17 f709 	smulbb	r7, r7, r9
 801cd0e:	b2c0      	uxtb	r0, r0
 801cd10:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801cd14:	fb10 f009 	smulbb	r0, r0, r9
 801cd18:	fb0c 7c05 	mla	ip, ip, r5, r7
 801cd1c:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801cd20:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801cd24:	fa1f fc8c 	uxth.w	ip, ip
 801cd28:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801cd2c:	fa5f fe8e 	uxtb.w	lr, lr
 801cd30:	fb07 a705 	mla	r7, r7, r5, sl
 801cd34:	fb0e 0005 	mla	r0, lr, r5, r0
 801cd38:	f10c 0501 	add.w	r5, ip, #1
 801cd3c:	b2bf      	uxth	r7, r7
 801cd3e:	b280      	uxth	r0, r0
 801cd40:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801cd44:	f100 0a01 	add.w	sl, r0, #1
 801cd48:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801cd4c:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 801cd50:	9802      	ldr	r0, [sp, #8]
 801cd52:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801cd56:	ea4a 0c0c 	orr.w	ip, sl, ip
 801cd5a:	f107 0a01 	add.w	sl, r7, #1
 801cd5e:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801cd62:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801cd66:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801cd6a:	ea4c 0c0a 	orr.w	ip, ip, sl
 801cd6e:	f824 c000 	strh.w	ip, [r4, r0]
 801cd72:	e7af      	b.n	801ccd4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801cd74:	f04f 0e00 	mov.w	lr, #0
 801cd78:	eba3 000e 	sub.w	r0, r3, lr
 801cd7c:	2800      	cmp	r0, #0
 801cd7e:	f77f af43 	ble.w	801cc08 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801cd82:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 801cd86:	140d      	asrs	r5, r1, #16
 801cd88:	1410      	asrs	r0, r2, #16
 801cd8a:	fb06 5000 	mla	r0, r6, r0, r5
 801cd8e:	9d01      	ldr	r5, [sp, #4]
 801cd90:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 801cd94:	0e2e      	lsrs	r6, r5, #24
 801cd96:	2eff      	cmp	r6, #255	; 0xff
 801cd98:	d112      	bne.n	801cdc0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 801cd9a:	482c      	ldr	r0, [pc, #176]	; (801ce4c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>)
 801cd9c:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 801cda0:	0968      	lsrs	r0, r5, #5
 801cda2:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801cda6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801cdaa:	4330      	orrs	r0, r6
 801cdac:	4328      	orrs	r0, r5
 801cdae:	f824 001e 	strh.w	r0, [r4, lr, lsl #1]
 801cdb2:	9811      	ldr	r0, [sp, #68]	; 0x44
 801cdb4:	f10e 0e01 	add.w	lr, lr, #1
 801cdb8:	4401      	add	r1, r0
 801cdba:	9812      	ldr	r0, [sp, #72]	; 0x48
 801cdbc:	4402      	add	r2, r0
 801cdbe:	e7db      	b.n	801cd78 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801cdc0:	b2f0      	uxtb	r0, r6
 801cdc2:	2e00      	cmp	r6, #0
 801cdc4:	d0f5      	beq.n	801cdb2 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 801cdc6:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 801cdca:	fa1f f980 	uxth.w	r9, r0
 801cdce:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801cdd2:	43c0      	mvns	r0, r0
 801cdd4:	ea4f 272c 	mov.w	r7, ip, asr #8
 801cdd8:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801cddc:	fb16 f609 	smulbb	r6, r6, r9
 801cde0:	b2c0      	uxtb	r0, r0
 801cde2:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801cde6:	b2ed      	uxtb	r5, r5
 801cde8:	fb1a fa09 	smulbb	sl, sl, r9
 801cdec:	fb07 6700 	mla	r7, r7, r0, r6
 801cdf0:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801cdf4:	fb15 f509 	smulbb	r5, r5, r9
 801cdf8:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801cdfc:	b2bf      	uxth	r7, r7
 801cdfe:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801ce02:	fa5f fc8c 	uxtb.w	ip, ip
 801ce06:	fb06 a600 	mla	r6, r6, r0, sl
 801ce0a:	fb0c 5500 	mla	r5, ip, r0, r5
 801ce0e:	1c78      	adds	r0, r7, #1
 801ce10:	b2b6      	uxth	r6, r6
 801ce12:	b2ad      	uxth	r5, r5
 801ce14:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 801ce18:	f105 0a01 	add.w	sl, r5, #1
 801ce1c:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801ce20:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801ce24:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801ce28:	ea4a 0707 	orr.w	r7, sl, r7
 801ce2c:	f106 0a01 	add.w	sl, r6, #1
 801ce30:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801ce34:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801ce38:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801ce3c:	ea47 070a 	orr.w	r7, r7, sl
 801ce40:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 801ce44:	e7b5      	b.n	801cdb2 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 801ce46:	b005      	add	sp, #20
 801ce48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ce4c:	fffff800 	.word	0xfffff800

0801ce50 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ce50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ce54:	b087      	sub	sp, #28
 801ce56:	468b      	mov	fp, r1
 801ce58:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ce5c:	9815      	ldr	r0, [sp, #84]	; 0x54
 801ce5e:	9203      	str	r2, [sp, #12]
 801ce60:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801ce64:	6841      	ldr	r1, [r0, #4]
 801ce66:	9204      	str	r2, [sp, #16]
 801ce68:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 801ce6c:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801ce70:	fb01 2404 	mla	r4, r1, r4, r2
 801ce74:	6802      	ldr	r2, [r0, #0]
 801ce76:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801ce7a:	f8d9 2008 	ldr.w	r2, [r9, #8]
 801ce7e:	3201      	adds	r2, #1
 801ce80:	f022 0201 	bic.w	r2, r2, #1
 801ce84:	9200      	str	r2, [sp, #0]
 801ce86:	f8d9 2000 	ldr.w	r2, [r9]
 801ce8a:	9201      	str	r2, [sp, #4]
 801ce8c:	f1bb 0f00 	cmp.w	fp, #0
 801ce90:	dc03      	bgt.n	801ce9a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801ce92:	9a03      	ldr	r2, [sp, #12]
 801ce94:	2a00      	cmp	r2, #0
 801ce96:	f340 816a 	ble.w	801d16e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 801ce9a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801ce9c:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 801cea0:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801cea4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801cea6:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 801ceaa:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801ceae:	2b00      	cmp	r3, #0
 801ceb0:	dd0e      	ble.n	801ced0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801ceb2:	1402      	asrs	r2, r0, #16
 801ceb4:	d405      	bmi.n	801cec2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801ceb6:	42ba      	cmp	r2, r7
 801ceb8:	da03      	bge.n	801cec2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801ceba:	140a      	asrs	r2, r1, #16
 801cebc:	d401      	bmi.n	801cec2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801cebe:	42b2      	cmp	r2, r6
 801cec0:	db07      	blt.n	801ced2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801cec2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801cec4:	3b01      	subs	r3, #1
 801cec6:	3402      	adds	r4, #2
 801cec8:	4410      	add	r0, r2
 801ceca:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801cecc:	4411      	add	r1, r2
 801cece:	e7ee      	b.n	801ceae <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801ced0:	d017      	beq.n	801cf02 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801ced2:	1e5a      	subs	r2, r3, #1
 801ced4:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801ced6:	fb05 0502 	mla	r5, r5, r2, r0
 801ceda:	142d      	asrs	r5, r5, #16
 801cedc:	d409      	bmi.n	801cef2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801cede:	42bd      	cmp	r5, r7
 801cee0:	da07      	bge.n	801cef2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801cee2:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801cee4:	fb05 1202 	mla	r2, r5, r2, r1
 801cee8:	1412      	asrs	r2, r2, #16
 801ceea:	d402      	bmi.n	801cef2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801ceec:	42b2      	cmp	r2, r6
 801ceee:	f2c0 80c8 	blt.w	801d082 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 801cef2:	2700      	movs	r7, #0
 801cef4:	19da      	adds	r2, r3, r7
 801cef6:	2a00      	cmp	r2, #0
 801cef8:	dc3e      	bgt.n	801cf78 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801cefa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801cefe:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801cf02:	f1bb 0f00 	cmp.w	fp, #0
 801cf06:	f340 8132 	ble.w	801d16e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 801cf0a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801cf0e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801cf10:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801cf14:	f1bb 0b01 	subs.w	fp, fp, #1
 801cf18:	eeb0 6a62 	vmov.f32	s12, s5
 801cf1c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801cf20:	ee31 1a05 	vadd.f32	s2, s2, s10
 801cf24:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801cf28:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801cf2c:	eeb0 6a43 	vmov.f32	s12, s6
 801cf30:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801cf34:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801cf38:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801cf3c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801cf40:	ee77 2a62 	vsub.f32	s5, s14, s5
 801cf44:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801cf48:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801cf4c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801cf50:	ee12 2a90 	vmov	r2, s5
 801cf54:	eef0 2a47 	vmov.f32	s5, s14
 801cf58:	fb92 f3f3 	sdiv	r3, r2, r3
 801cf5c:	ee13 2a10 	vmov	r2, s6
 801cf60:	9313      	str	r3, [sp, #76]	; 0x4c
 801cf62:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801cf64:	eeb0 3a67 	vmov.f32	s6, s15
 801cf68:	fb92 f3f3 	sdiv	r3, r2, r3
 801cf6c:	9a03      	ldr	r2, [sp, #12]
 801cf6e:	9314      	str	r3, [sp, #80]	; 0x50
 801cf70:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801cf72:	bf08      	it	eq
 801cf74:	4613      	moveq	r3, r2
 801cf76:	e789      	b.n	801ce8c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801cf78:	1405      	asrs	r5, r0, #16
 801cf7a:	d436      	bmi.n	801cfea <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801cf7c:	f8d9 2008 	ldr.w	r2, [r9, #8]
 801cf80:	42aa      	cmp	r2, r5
 801cf82:	dd32      	ble.n	801cfea <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801cf84:	140e      	asrs	r6, r1, #16
 801cf86:	d430      	bmi.n	801cfea <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801cf88:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801cf8c:	42b2      	cmp	r2, r6
 801cf8e:	dd2c      	ble.n	801cfea <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801cf90:	9a00      	ldr	r2, [sp, #0]
 801cf92:	fb06 5502 	mla	r5, r6, r2, r5
 801cf96:	9e01      	ldr	r6, [sp, #4]
 801cf98:	086a      	lsrs	r2, r5, #1
 801cf9a:	5cb2      	ldrb	r2, [r6, r2]
 801cf9c:	07ee      	lsls	r6, r5, #31
 801cf9e:	bf54      	ite	pl
 801cfa0:	f002 020f 	andpl.w	r2, r2, #15
 801cfa4:	1112      	asrmi	r2, r2, #4
 801cfa6:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801cfaa:	b2d2      	uxtb	r2, r2
 801cfac:	b1ea      	cbz	r2, 801cfea <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801cfae:	9d04      	ldr	r5, [sp, #16]
 801cfb0:	436a      	muls	r2, r5
 801cfb2:	1c55      	adds	r5, r2, #1
 801cfb4:	eb05 2222 	add.w	r2, r5, r2, asr #8
 801cfb8:	4d6e      	ldr	r5, [pc, #440]	; (801d174 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 801cfba:	1212      	asrs	r2, r2, #8
 801cfbc:	682d      	ldr	r5, [r5, #0]
 801cfbe:	2aff      	cmp	r2, #255	; 0xff
 801cfc0:	ea4f 2615 	mov.w	r6, r5, lsr #8
 801cfc4:	9605      	str	r6, [sp, #20]
 801cfc6:	d116      	bne.n	801cff6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801cfc8:	f06f 0201 	mvn.w	r2, #1
 801cfcc:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 801cfd0:	fb02 fc07 	mul.w	ip, r2, r7
 801cfd4:	096a      	lsrs	r2, r5, #5
 801cfd6:	f026 0607 	bic.w	r6, r6, #7
 801cfda:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801cfde:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801cfe2:	4316      	orrs	r6, r2
 801cfe4:	432e      	orrs	r6, r5
 801cfe6:	f824 600c 	strh.w	r6, [r4, ip]
 801cfea:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801cfec:	3f01      	subs	r7, #1
 801cfee:	4410      	add	r0, r2
 801cff0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801cff2:	4411      	add	r1, r2
 801cff4:	e77e      	b.n	801cef4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 801cff6:	f06f 0601 	mvn.w	r6, #1
 801cffa:	fa1f fa82 	uxth.w	sl, r2
 801cffe:	f3c5 4c07 	ubfx	ip, r5, #16, #8
 801d002:	43d2      	mvns	r2, r2
 801d004:	437e      	muls	r6, r7
 801d006:	b2ed      	uxtb	r5, r5
 801d008:	fb1c fc0a 	smulbb	ip, ip, sl
 801d00c:	b2d2      	uxtb	r2, r2
 801d00e:	f834 8006 	ldrh.w	r8, [r4, r6]
 801d012:	fb15 f50a 	smulbb	r5, r5, sl
 801d016:	9602      	str	r6, [sp, #8]
 801d018:	ea4f 2e28 	mov.w	lr, r8, asr #8
 801d01c:	f89d 6014 	ldrb.w	r6, [sp, #20]
 801d020:	fb16 f60a 	smulbb	r6, r6, sl
 801d024:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801d028:	fb0e ce02 	mla	lr, lr, r2, ip
 801d02c:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 801d030:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801d034:	fa1f fe8e 	uxth.w	lr, lr
 801d038:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801d03c:	fa5f f888 	uxtb.w	r8, r8
 801d040:	fb0c 6c02 	mla	ip, ip, r2, r6
 801d044:	fb08 5502 	mla	r5, r8, r2, r5
 801d048:	f10e 0201 	add.w	r2, lr, #1
 801d04c:	fa1f fc8c 	uxth.w	ip, ip
 801d050:	b2ad      	uxth	r5, r5
 801d052:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801d056:	9a02      	ldr	r2, [sp, #8]
 801d058:	1c6e      	adds	r6, r5, #1
 801d05a:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 801d05e:	eb06 2615 	add.w	r6, r6, r5, lsr #8
 801d062:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801d066:	ea46 0e0e 	orr.w	lr, r6, lr
 801d06a:	f10c 0601 	add.w	r6, ip, #1
 801d06e:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 801d072:	0976      	lsrs	r6, r6, #5
 801d074:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801d078:	ea4e 0e06 	orr.w	lr, lr, r6
 801d07c:	f824 e002 	strh.w	lr, [r4, r2]
 801d080:	e7b3      	b.n	801cfea <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801d082:	f04f 0800 	mov.w	r8, #0
 801d086:	eba3 0208 	sub.w	r2, r3, r8
 801d08a:	2a00      	cmp	r2, #0
 801d08c:	f77f af35 	ble.w	801cefa <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801d090:	1402      	asrs	r2, r0, #16
 801d092:	9e00      	ldr	r6, [sp, #0]
 801d094:	140d      	asrs	r5, r1, #16
 801d096:	fb06 2505 	mla	r5, r6, r5, r2
 801d09a:	9e01      	ldr	r6, [sp, #4]
 801d09c:	086a      	lsrs	r2, r5, #1
 801d09e:	07ed      	lsls	r5, r5, #31
 801d0a0:	5cb2      	ldrb	r2, [r6, r2]
 801d0a2:	bf54      	ite	pl
 801d0a4:	f002 020f 	andpl.w	r2, r2, #15
 801d0a8:	1112      	asrmi	r2, r2, #4
 801d0aa:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801d0ae:	b2d2      	uxtb	r2, r2
 801d0b0:	b1c2      	cbz	r2, 801d0e4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801d0b2:	9d04      	ldr	r5, [sp, #16]
 801d0b4:	436a      	muls	r2, r5
 801d0b6:	1c55      	adds	r5, r2, #1
 801d0b8:	eb05 2222 	add.w	r2, r5, r2, asr #8
 801d0bc:	4d2d      	ldr	r5, [pc, #180]	; (801d174 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 801d0be:	1212      	asrs	r2, r2, #8
 801d0c0:	682e      	ldr	r6, [r5, #0]
 801d0c2:	2aff      	cmp	r2, #255	; 0xff
 801d0c4:	ea4f 2516 	mov.w	r5, r6, lsr #8
 801d0c8:	d113      	bne.n	801d0f2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801d0ca:	0972      	lsrs	r2, r6, #5
 801d0cc:	f425 65ff 	bic.w	r5, r5, #2040	; 0x7f8
 801d0d0:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 801d0d4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801d0d8:	f025 0507 	bic.w	r5, r5, #7
 801d0dc:	4315      	orrs	r5, r2
 801d0de:	4335      	orrs	r5, r6
 801d0e0:	f824 5018 	strh.w	r5, [r4, r8, lsl #1]
 801d0e4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d0e6:	f108 0801 	add.w	r8, r8, #1
 801d0ea:	4410      	add	r0, r2
 801d0ec:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d0ee:	4411      	add	r1, r2
 801d0f0:	e7c9      	b.n	801d086 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 801d0f2:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 801d0f6:	fa1f fa82 	uxth.w	sl, r2
 801d0fa:	f3c6 4707 	ubfx	r7, r6, #16, #8
 801d0fe:	43d2      	mvns	r2, r2
 801d100:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801d104:	fb17 f70a 	smulbb	r7, r7, sl
 801d108:	b2d2      	uxtb	r2, r2
 801d10a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801d10e:	b2f6      	uxtb	r6, r6
 801d110:	b2ed      	uxtb	r5, r5
 801d112:	fb0c 7c02 	mla	ip, ip, r2, r7
 801d116:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801d11a:	fb16 f60a 	smulbb	r6, r6, sl
 801d11e:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801d122:	fa1f fc8c 	uxth.w	ip, ip
 801d126:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801d12a:	fb15 f50a 	smulbb	r5, r5, sl
 801d12e:	fa5f fe8e 	uxtb.w	lr, lr
 801d132:	fb0e 6602 	mla	r6, lr, r2, r6
 801d136:	fb07 5702 	mla	r7, r7, r2, r5
 801d13a:	f10c 0201 	add.w	r2, ip, #1
 801d13e:	b2b6      	uxth	r6, r6
 801d140:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801d144:	1c75      	adds	r5, r6, #1
 801d146:	b2bf      	uxth	r7, r7
 801d148:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801d14c:	eb05 2516 	add.w	r5, r5, r6, lsr #8
 801d150:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801d154:	ea45 0c0c 	orr.w	ip, r5, ip
 801d158:	1c7d      	adds	r5, r7, #1
 801d15a:	eb05 2517 	add.w	r5, r5, r7, lsr #8
 801d15e:	096d      	lsrs	r5, r5, #5
 801d160:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801d164:	ea4c 0c05 	orr.w	ip, ip, r5
 801d168:	f824 c018 	strh.w	ip, [r4, r8, lsl #1]
 801d16c:	e7ba      	b.n	801d0e4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801d16e:	b007      	add	sp, #28
 801d170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d174:	20024430 	.word	0x20024430

0801d178 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d17c:	b087      	sub	sp, #28
 801d17e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d182:	f8df 8308 	ldr.w	r8, [pc, #776]	; 801d48c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
 801d186:	9815      	ldr	r0, [sp, #84]	; 0x54
 801d188:	9101      	str	r1, [sp, #4]
 801d18a:	9205      	str	r2, [sp, #20]
 801d18c:	6841      	ldr	r1, [r0, #4]
 801d18e:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
 801d192:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801d196:	fb01 2404 	mla	r4, r1, r4, r2
 801d19a:	6802      	ldr	r2, [r0, #0]
 801d19c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801d1a0:	f8db 2008 	ldr.w	r2, [fp, #8]
 801d1a4:	3201      	adds	r2, #1
 801d1a6:	f022 0201 	bic.w	r2, r2, #1
 801d1aa:	9202      	str	r2, [sp, #8]
 801d1ac:	f8db 2000 	ldr.w	r2, [fp]
 801d1b0:	9203      	str	r2, [sp, #12]
 801d1b2:	9a01      	ldr	r2, [sp, #4]
 801d1b4:	2a00      	cmp	r2, #0
 801d1b6:	dc03      	bgt.n	801d1c0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801d1b8:	9a05      	ldr	r2, [sp, #20]
 801d1ba:	2a00      	cmp	r2, #0
 801d1bc:	f340 8162 	ble.w	801d484 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 801d1c0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801d1c2:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 801d1c6:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801d1ca:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d1cc:	f9bb 600c 	ldrsh.w	r6, [fp, #12]
 801d1d0:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801d1d4:	2b00      	cmp	r3, #0
 801d1d6:	dd0e      	ble.n	801d1f6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801d1d8:	1402      	asrs	r2, r0, #16
 801d1da:	d405      	bmi.n	801d1e8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801d1dc:	42ba      	cmp	r2, r7
 801d1de:	da03      	bge.n	801d1e8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801d1e0:	140a      	asrs	r2, r1, #16
 801d1e2:	d401      	bmi.n	801d1e8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801d1e4:	42b2      	cmp	r2, r6
 801d1e6:	db07      	blt.n	801d1f8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801d1e8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d1ea:	3b01      	subs	r3, #1
 801d1ec:	3402      	adds	r4, #2
 801d1ee:	4410      	add	r0, r2
 801d1f0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d1f2:	4411      	add	r1, r2
 801d1f4:	e7ee      	b.n	801d1d4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801d1f6:	d017      	beq.n	801d228 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801d1f8:	1e5a      	subs	r2, r3, #1
 801d1fa:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801d1fc:	fb05 0502 	mla	r5, r5, r2, r0
 801d200:	142d      	asrs	r5, r5, #16
 801d202:	d409      	bmi.n	801d218 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801d204:	42bd      	cmp	r5, r7
 801d206:	da07      	bge.n	801d218 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801d208:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801d20a:	fb05 1202 	mla	r2, r5, r2, r1
 801d20e:	1412      	asrs	r2, r2, #16
 801d210:	d402      	bmi.n	801d218 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801d212:	42b2      	cmp	r2, r6
 801d214:	f2c0 80c3 	blt.w	801d39e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x226>
 801d218:	2500      	movs	r5, #0
 801d21a:	195a      	adds	r2, r3, r5
 801d21c:	2a00      	cmp	r2, #0
 801d21e:	dc3f      	bgt.n	801d2a0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801d220:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d224:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801d228:	9b01      	ldr	r3, [sp, #4]
 801d22a:	2b00      	cmp	r3, #0
 801d22c:	f340 812a 	ble.w	801d484 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 801d230:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d234:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d236:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d23a:	eeb0 6a62 	vmov.f32	s12, s5
 801d23e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d242:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d246:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d24a:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801d24e:	eeb0 6a43 	vmov.f32	s12, s6
 801d252:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d256:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801d25a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d25e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d262:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d266:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d26a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d26e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d272:	ee12 2a90 	vmov	r2, s5
 801d276:	eef0 2a47 	vmov.f32	s5, s14
 801d27a:	fb92 f3f3 	sdiv	r3, r2, r3
 801d27e:	ee13 2a10 	vmov	r2, s6
 801d282:	9313      	str	r3, [sp, #76]	; 0x4c
 801d284:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d286:	eeb0 3a67 	vmov.f32	s6, s15
 801d28a:	fb92 f3f3 	sdiv	r3, r2, r3
 801d28e:	9314      	str	r3, [sp, #80]	; 0x50
 801d290:	9b01      	ldr	r3, [sp, #4]
 801d292:	9a05      	ldr	r2, [sp, #20]
 801d294:	3b01      	subs	r3, #1
 801d296:	9301      	str	r3, [sp, #4]
 801d298:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d29a:	bf08      	it	eq
 801d29c:	4613      	moveq	r3, r2
 801d29e:	e788      	b.n	801d1b2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801d2a0:	1406      	asrs	r6, r0, #16
 801d2a2:	d42c      	bmi.n	801d2fe <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801d2a4:	f8db 2008 	ldr.w	r2, [fp, #8]
 801d2a8:	42b2      	cmp	r2, r6
 801d2aa:	dd28      	ble.n	801d2fe <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801d2ac:	140f      	asrs	r7, r1, #16
 801d2ae:	d426      	bmi.n	801d2fe <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801d2b0:	f8db 200c 	ldr.w	r2, [fp, #12]
 801d2b4:	42ba      	cmp	r2, r7
 801d2b6:	dd22      	ble.n	801d2fe <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801d2b8:	9a02      	ldr	r2, [sp, #8]
 801d2ba:	fb07 6602 	mla	r6, r7, r2, r6
 801d2be:	9f03      	ldr	r7, [sp, #12]
 801d2c0:	0872      	lsrs	r2, r6, #1
 801d2c2:	07f6      	lsls	r6, r6, #31
 801d2c4:	5cba      	ldrb	r2, [r7, r2]
 801d2c6:	bf54      	ite	pl
 801d2c8:	f002 020f 	andpl.w	r2, r2, #15
 801d2cc:	1112      	asrmi	r2, r2, #4
 801d2ce:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801d2d2:	b2d2      	uxtb	r2, r2
 801d2d4:	2aff      	cmp	r2, #255	; 0xff
 801d2d6:	d118      	bne.n	801d30a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801d2d8:	f06f 0601 	mvn.w	r6, #1
 801d2dc:	f8d8 2000 	ldr.w	r2, [r8]
 801d2e0:	fb06 f705 	mul.w	r7, r6, r5
 801d2e4:	f2a6 76fe 	subw	r6, r6, #2046	; 0x7fe
 801d2e8:	ea06 2c12 	and.w	ip, r6, r2, lsr #8
 801d2ec:	0956      	lsrs	r6, r2, #5
 801d2ee:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801d2f2:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801d2f6:	ea4c 0606 	orr.w	r6, ip, r6
 801d2fa:	4316      	orrs	r6, r2
 801d2fc:	53e6      	strh	r6, [r4, r7]
 801d2fe:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d300:	3d01      	subs	r5, #1
 801d302:	4410      	add	r0, r2
 801d304:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d306:	4411      	add	r1, r2
 801d308:	e787      	b.n	801d21a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801d30a:	2a00      	cmp	r2, #0
 801d30c:	d0f7      	beq.n	801d2fe <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801d30e:	f06f 0601 	mvn.w	r6, #1
 801d312:	f8d8 c000 	ldr.w	ip, [r8]
 801d316:	fa1f f982 	uxth.w	r9, r2
 801d31a:	43d2      	mvns	r2, r2
 801d31c:	436e      	muls	r6, r5
 801d31e:	f3cc 2a07 	ubfx	sl, ip, #8, #8
 801d322:	b2d2      	uxtb	r2, r2
 801d324:	f834 e006 	ldrh.w	lr, [r4, r6]
 801d328:	fb1a fa09 	smulbb	sl, sl, r9
 801d32c:	9604      	str	r6, [sp, #16]
 801d32e:	f3cc 4607 	ubfx	r6, ip, #16, #8
 801d332:	ea4f 272e 	mov.w	r7, lr, asr #8
 801d336:	fb16 f609 	smulbb	r6, r6, r9
 801d33a:	fa5f fc8c 	uxtb.w	ip, ip
 801d33e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801d342:	fb1c fc09 	smulbb	ip, ip, r9
 801d346:	fb07 6702 	mla	r7, r7, r2, r6
 801d34a:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801d34e:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801d352:	b2bf      	uxth	r7, r7
 801d354:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801d358:	fa5f fe8e 	uxtb.w	lr, lr
 801d35c:	fb06 a602 	mla	r6, r6, r2, sl
 801d360:	fb0e cc02 	mla	ip, lr, r2, ip
 801d364:	1c7a      	adds	r2, r7, #1
 801d366:	b2b6      	uxth	r6, r6
 801d368:	fa1f fc8c 	uxth.w	ip, ip
 801d36c:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801d370:	9a04      	ldr	r2, [sp, #16]
 801d372:	f10c 0a01 	add.w	sl, ip, #1
 801d376:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801d37a:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 801d37e:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801d382:	ea4a 0707 	orr.w	r7, sl, r7
 801d386:	f106 0a01 	add.w	sl, r6, #1
 801d38a:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801d38e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801d392:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801d396:	ea47 070a 	orr.w	r7, r7, sl
 801d39a:	52a7      	strh	r7, [r4, r2]
 801d39c:	e7af      	b.n	801d2fe <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801d39e:	f04f 0e00 	mov.w	lr, #0
 801d3a2:	eba3 020e 	sub.w	r2, r3, lr
 801d3a6:	2a00      	cmp	r2, #0
 801d3a8:	f77f af3a 	ble.w	801d220 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801d3ac:	1402      	asrs	r2, r0, #16
 801d3ae:	9e02      	ldr	r6, [sp, #8]
 801d3b0:	140d      	asrs	r5, r1, #16
 801d3b2:	fb06 2505 	mla	r5, r6, r5, r2
 801d3b6:	9e03      	ldr	r6, [sp, #12]
 801d3b8:	086a      	lsrs	r2, r5, #1
 801d3ba:	07ed      	lsls	r5, r5, #31
 801d3bc:	5cb2      	ldrb	r2, [r6, r2]
 801d3be:	bf54      	ite	pl
 801d3c0:	f002 020f 	andpl.w	r2, r2, #15
 801d3c4:	1112      	asrmi	r2, r2, #4
 801d3c6:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801d3ca:	b2d2      	uxtb	r2, r2
 801d3cc:	2aff      	cmp	r2, #255	; 0xff
 801d3ce:	d115      	bne.n	801d3fc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801d3d0:	f8d8 5000 	ldr.w	r5, [r8]
 801d3d4:	f6a2 02ff 	subw	r2, r2, #2303	; 0x8ff
 801d3d8:	ea02 2615 	and.w	r6, r2, r5, lsr #8
 801d3dc:	096a      	lsrs	r2, r5, #5
 801d3de:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801d3e2:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801d3e6:	4332      	orrs	r2, r6
 801d3e8:	432a      	orrs	r2, r5
 801d3ea:	f824 201e 	strh.w	r2, [r4, lr, lsl #1]
 801d3ee:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d3f0:	f10e 0e01 	add.w	lr, lr, #1
 801d3f4:	4410      	add	r0, r2
 801d3f6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d3f8:	4411      	add	r1, r2
 801d3fa:	e7d2      	b.n	801d3a2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801d3fc:	2a00      	cmp	r2, #0
 801d3fe:	d0f6      	beq.n	801d3ee <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801d400:	f8d8 7000 	ldr.w	r7, [r8]
 801d404:	fa1f f982 	uxth.w	r9, r2
 801d408:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 801d40c:	43d2      	mvns	r2, r2
 801d40e:	f3c7 4507 	ubfx	r5, r7, #16, #8
 801d412:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 801d416:	ea4f 262c 	mov.w	r6, ip, asr #8
 801d41a:	fb15 f509 	smulbb	r5, r5, r9
 801d41e:	b2d2      	uxtb	r2, r2
 801d420:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801d424:	b2ff      	uxtb	r7, r7
 801d426:	fb1a fa09 	smulbb	sl, sl, r9
 801d42a:	fb06 5602 	mla	r6, r6, r2, r5
 801d42e:	ea4f 05ec 	mov.w	r5, ip, asr #3
 801d432:	fb17 f709 	smulbb	r7, r7, r9
 801d436:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801d43a:	b2b6      	uxth	r6, r6
 801d43c:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801d440:	fa5f fc8c 	uxtb.w	ip, ip
 801d444:	fb05 a502 	mla	r5, r5, r2, sl
 801d448:	fb0c 7702 	mla	r7, ip, r2, r7
 801d44c:	1c72      	adds	r2, r6, #1
 801d44e:	b2ad      	uxth	r5, r5
 801d450:	b2bf      	uxth	r7, r7
 801d452:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 801d456:	f107 0a01 	add.w	sl, r7, #1
 801d45a:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 801d45e:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801d462:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801d466:	ea4a 0606 	orr.w	r6, sl, r6
 801d46a:	f105 0a01 	add.w	sl, r5, #1
 801d46e:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801d472:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801d476:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801d47a:	ea46 060a 	orr.w	r6, r6, sl
 801d47e:	f824 601e 	strh.w	r6, [r4, lr, lsl #1]
 801d482:	e7b4      	b.n	801d3ee <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801d484:	b007      	add	sp, #28
 801d486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d48a:	bf00      	nop
 801d48c:	20024430 	.word	0x20024430

0801d490 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801d490:	4770      	bx	lr

0801d492 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801d492:	4770      	bx	lr

0801d494 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801d494:	4770      	bx	lr

0801d496 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801d496:	4770      	bx	lr

0801d498 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801d498:	4770      	bx	lr

0801d49a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801d49a:	4770      	bx	lr

0801d49c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801d49c:	4770      	bx	lr

0801d49e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801d49e:	4770      	bx	lr

0801d4a0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801d4a0:	4770      	bx	lr

0801d4a2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 801d4a2:	4770      	bx	lr

0801d4a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801d4a4:	4770      	bx	lr

0801d4a6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801d4a6:	4770      	bx	lr

0801d4a8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 801d4a8:	4770      	bx	lr

0801d4aa <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 801d4aa:	4770      	bx	lr

0801d4ac <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801d4ac:	4770      	bx	lr

0801d4ae <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
 801d4ae:	4770      	bx	lr

0801d4b0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801d4b0:	4770      	bx	lr

0801d4b2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801d4b2:	4770      	bx	lr

0801d4b4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801d4b4:	4770      	bx	lr

0801d4b6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801d4b6:	4770      	bx	lr

0801d4b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801d4b8:	4770      	bx	lr

0801d4ba <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801d4ba:	4770      	bx	lr

0801d4bc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801d4bc:	4770      	bx	lr

0801d4be <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801d4be:	4770      	bx	lr

0801d4c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801d4c0:	4770      	bx	lr

0801d4c2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 801d4c2:	4770      	bx	lr

0801d4c4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 801d4c4:	4770      	bx	lr

0801d4c6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 801d4c6:	4770      	bx	lr

0801d4c8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801d4c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d4cc:	b088      	sub	sp, #32
 801d4ce:	4606      	mov	r6, r0
 801d4d0:	4688      	mov	r8, r1
 801d4d2:	4691      	mov	r9, r2
 801d4d4:	ac08      	add	r4, sp, #32
 801d4d6:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 801d4da:	4620      	mov	r0, r4
 801d4dc:	f7fd fc66 	bl	801adac <_ZNK8touchgfx6Bitmap7getDataEv>
 801d4e0:	6833      	ldr	r3, [r6, #0]
 801d4e2:	4605      	mov	r5, r0
 801d4e4:	4620      	mov	r0, r4
 801d4e6:	699f      	ldr	r7, [r3, #24]
 801d4e8:	f7fd fb74 	bl	801abd4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801d4ec:	4682      	mov	sl, r0
 801d4ee:	4620      	mov	r0, r4
 801d4f0:	f7fd fba4 	bl	801ac3c <_ZNK8touchgfx6Bitmap9getHeightEv>
 801d4f4:	9500      	str	r5, [sp, #0]
 801d4f6:	464b      	mov	r3, r9
 801d4f8:	4642      	mov	r2, r8
 801d4fa:	4631      	mov	r1, r6
 801d4fc:	e9cd a001 	strd	sl, r0, [sp, #4]
 801d500:	a806      	add	r0, sp, #24
 801d502:	47b8      	blx	r7
 801d504:	4628      	mov	r0, r5
 801d506:	b008      	add	sp, #32
 801d508:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801d50c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 801d50c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801d510:	2300      	movs	r3, #0
 801d512:	9300      	str	r3, [sp, #0]
 801d514:	4b3d      	ldr	r3, [pc, #244]	; (801d60c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x100>)
 801d516:	781b      	ldrb	r3, [r3, #0]
 801d518:	2b00      	cmp	r3, #0
 801d51a:	d137      	bne.n	801d58c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x80>
 801d51c:	4a3c      	ldr	r2, [pc, #240]	; (801d610 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801d51e:	f9b2 2000 	ldrsh.w	r2, [r2]
 801d522:	f8ad 2004 	strh.w	r2, [sp, #4]
 801d526:	2b00      	cmp	r3, #0
 801d528:	d132      	bne.n	801d590 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x84>
 801d52a:	4b3a      	ldr	r3, [pc, #232]	; (801d614 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 801d52c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d530:	ac02      	add	r4, sp, #8
 801d532:	6808      	ldr	r0, [r1, #0]
 801d534:	f8ad 3006 	strh.w	r3, [sp, #6]
 801d538:	ab02      	add	r3, sp, #8
 801d53a:	6849      	ldr	r1, [r1, #4]
 801d53c:	4d36      	ldr	r5, [pc, #216]	; (801d618 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x10c>)
 801d53e:	c303      	stmia	r3!, {r0, r1}
 801d540:	4669      	mov	r1, sp
 801d542:	4620      	mov	r0, r4
 801d544:	f7fa fd50 	bl	8017fe8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d548:	4668      	mov	r0, sp
 801d54a:	f7fa fd25 	bl	8017f98 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d54e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801d552:	f8bd 2000 	ldrh.w	r2, [sp]
 801d556:	462f      	mov	r7, r5
 801d558:	6828      	ldr	r0, [r5, #0]
 801d55a:	4413      	add	r3, r2
 801d55c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801d560:	f8ad 3008 	strh.w	r3, [sp, #8]
 801d564:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801d568:	4413      	add	r3, r2
 801d56a:	f8ad 300a 	strh.w	r3, [sp, #10]
 801d56e:	6803      	ldr	r3, [r0, #0]
 801d570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d572:	4798      	blx	r3
 801d574:	f010 0f01 	tst.w	r0, #1
 801d578:	d00c      	beq.n	801d594 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x88>
 801d57a:	6828      	ldr	r0, [r5, #0]
 801d57c:	6803      	ldr	r3, [r0, #0]
 801d57e:	e894 0006 	ldmia.w	r4, {r1, r2}
 801d582:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801d584:	4798      	blx	r3
 801d586:	b004      	add	sp, #16
 801d588:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d58c:	4a21      	ldr	r2, [pc, #132]	; (801d614 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 801d58e:	e7c6      	b.n	801d51e <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 801d590:	4b1f      	ldr	r3, [pc, #124]	; (801d610 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801d592:	e7cb      	b.n	801d52c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 801d594:	6838      	ldr	r0, [r7, #0]
 801d596:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 801d59a:	6803      	ldr	r3, [r0, #0]
 801d59c:	f9bd 500e 	ldrsh.w	r5, [sp, #14]
 801d5a0:	ea4f 0848 	mov.w	r8, r8, lsl #1
 801d5a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d5a6:	4798      	blx	r3
 801d5a8:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 801d5ac:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801d5b0:	f8bd 6004 	ldrh.w	r6, [sp, #4]
 801d5b4:	fb16 3602 	smlabb	r6, r6, r2, r3
 801d5b8:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801d5bc:	6838      	ldr	r0, [r7, #0]
 801d5be:	6803      	ldr	r3, [r0, #0]
 801d5c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d5c2:	4798      	blx	r3
 801d5c4:	4a12      	ldr	r2, [pc, #72]	; (801d610 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801d5c6:	f9bd 400a 	ldrsh.w	r4, [sp, #10]
 801d5ca:	8813      	ldrh	r3, [r2, #0]
 801d5cc:	4691      	mov	r9, r2
 801d5ce:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 801d5d2:	435d      	muls	r5, r3
 801d5d4:	fb03 1404 	mla	r4, r3, r4, r1
 801d5d8:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801d5dc:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801d5e0:	6838      	ldr	r0, [r7, #0]
 801d5e2:	42ac      	cmp	r4, r5
 801d5e4:	6803      	ldr	r3, [r0, #0]
 801d5e6:	d20e      	bcs.n	801d606 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xfa>
 801d5e8:	f8d3 a034 	ldr.w	sl, [r3, #52]	; 0x34
 801d5ec:	4632      	mov	r2, r6
 801d5ee:	4643      	mov	r3, r8
 801d5f0:	4621      	mov	r1, r4
 801d5f2:	47d0      	blx	sl
 801d5f4:	f8b9 3000 	ldrh.w	r3, [r9]
 801d5f8:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801d5fc:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801d600:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801d604:	e7ec      	b.n	801d5e0 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd4>
 801d606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d608:	4798      	blx	r3
 801d60a:	e7bc      	b.n	801d586 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 801d60c:	20024420 	.word	0x20024420
 801d610:	20024422 	.word	0x20024422
 801d614:	20024424 	.word	0x20024424
 801d618:	20024428 	.word	0x20024428

0801d61c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801d61c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d620:	b08b      	sub	sp, #44	; 0x2c
 801d622:	460f      	mov	r7, r1
 801d624:	4616      	mov	r6, r2
 801d626:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
 801d62a:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 801d62e:	f1bb 0f00 	cmp.w	fp, #0
 801d632:	d049      	beq.n	801d6c8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801d634:	6810      	ldr	r0, [r2, #0]
 801d636:	ad06      	add	r5, sp, #24
 801d638:	6851      	ldr	r1, [r2, #4]
 801d63a:	c503      	stmia	r5!, {r0, r1}
 801d63c:	6818      	ldr	r0, [r3, #0]
 801d63e:	ad08      	add	r5, sp, #32
 801d640:	6859      	ldr	r1, [r3, #4]
 801d642:	c503      	stmia	r5!, {r0, r1}
 801d644:	a806      	add	r0, sp, #24
 801d646:	f7fa fca7 	bl	8017f98 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d64a:	4631      	mov	r1, r6
 801d64c:	a808      	add	r0, sp, #32
 801d64e:	f7fa fccb 	bl	8017fe8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d652:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801d656:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801d65a:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 801d65e:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 801d662:	fb16 2103 	smlabb	r1, r6, r3, r2
 801d666:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 801d66a:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 801d66e:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801d672:	4f5f      	ldr	r7, [pc, #380]	; (801d7f0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 801d674:	440a      	add	r2, r1
 801d676:	6838      	ldr	r0, [r7, #0]
 801d678:	46b9      	mov	r9, r7
 801d67a:	f8ad 2020 	strh.w	r2, [sp, #32]
 801d67e:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801d682:	4413      	add	r3, r2
 801d684:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801d688:	6803      	ldr	r3, [r0, #0]
 801d68a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d68c:	4798      	blx	r3
 801d68e:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801d692:	d01c      	beq.n	801d6ce <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 801d694:	f010 0f04 	tst.w	r0, #4
 801d698:	d01d      	beq.n	801d6d6 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 801d69a:	f8d9 0000 	ldr.w	r0, [r9]
 801d69e:	2700      	movs	r7, #0
 801d6a0:	b2ad      	uxth	r5, r5
 801d6a2:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801d6a6:	6801      	ldr	r1, [r0, #0]
 801d6a8:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801d6ac:	f8cd b00c 	str.w	fp, [sp, #12]
 801d6b0:	9501      	str	r5, [sp, #4]
 801d6b2:	e9cd 4704 	strd	r4, r7, [sp, #16]
 801d6b6:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 801d6ba:	9402      	str	r4, [sp, #8]
 801d6bc:	fa1f f488 	uxth.w	r4, r8
 801d6c0:	9400      	str	r4, [sp, #0]
 801d6c2:	6c4c      	ldr	r4, [r1, #68]	; 0x44
 801d6c4:	4631      	mov	r1, r6
 801d6c6:	47a0      	blx	r4
 801d6c8:	b00b      	add	sp, #44	; 0x2c
 801d6ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d6ce:	b914      	cbnz	r4, 801d6d6 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 801d6d0:	f010 0f01 	tst.w	r0, #1
 801d6d4:	e7e0      	b.n	801d698 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7c>
 801d6d6:	f8d9 0000 	ldr.w	r0, [r9]
 801d6da:	ea4f 0748 	mov.w	r7, r8, lsl #1
 801d6de:	6803      	ldr	r3, [r0, #0]
 801d6e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d6e2:	4798      	blx	r3
 801d6e4:	4b43      	ldr	r3, [pc, #268]	; (801d7f4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d8>)
 801d6e6:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 801d6ea:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801d6ee:	881a      	ldrh	r2, [r3, #0]
 801d6f0:	469a      	mov	sl, r3
 801d6f2:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801d6f6:	fb05 f502 	mul.w	r5, r5, r2
 801d6fa:	fb02 1404 	mla	r4, r2, r4, r1
 801d6fe:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801d702:	d059      	beq.n	801d7b8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>
 801d704:	f1cb 09ff 	rsb	r9, fp, #255	; 0xff
 801d708:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801d70c:	fa1f f28b 	uxth.w	r2, fp
 801d710:	469e      	mov	lr, r3
 801d712:	fa1f f989 	uxth.w	r9, r9
 801d716:	42ac      	cmp	r4, r5
 801d718:	d264      	bcs.n	801d7e4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 801d71a:	eb04 0a07 	add.w	sl, r4, r7
 801d71e:	4554      	cmp	r4, sl
 801d720:	d23d      	bcs.n	801d79e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x182>
 801d722:	8821      	ldrh	r1, [r4, #0]
 801d724:	f836 3b02 	ldrh.w	r3, [r6], #2
 801d728:	1208      	asrs	r0, r1, #8
 801d72a:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801d72e:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801d732:	ea4f 0be1 	mov.w	fp, r1, asr #3
 801d736:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801d73a:	00c9      	lsls	r1, r1, #3
 801d73c:	fb10 f009 	smulbb	r0, r0, r9
 801d740:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 801d744:	b2c9      	uxtb	r1, r1
 801d746:	fb0c 0c02 	mla	ip, ip, r2, r0
 801d74a:	10d8      	asrs	r0, r3, #3
 801d74c:	fb1b fb09 	smulbb	fp, fp, r9
 801d750:	00db      	lsls	r3, r3, #3
 801d752:	fa1f fc8c 	uxth.w	ip, ip
 801d756:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801d75a:	fb11 f109 	smulbb	r1, r1, r9
 801d75e:	b2db      	uxtb	r3, r3
 801d760:	fb00 b002 	mla	r0, r0, r2, fp
 801d764:	f10c 0b01 	add.w	fp, ip, #1
 801d768:	fb03 1302 	mla	r3, r3, r2, r1
 801d76c:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801d770:	b29b      	uxth	r3, r3
 801d772:	b280      	uxth	r0, r0
 801d774:	f40c 4b78 	and.w	fp, ip, #63488	; 0xf800
 801d778:	f103 0c01 	add.w	ip, r3, #1
 801d77c:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801d780:	1c43      	adds	r3, r0, #1
 801d782:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801d786:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801d78a:	0940      	lsrs	r0, r0, #5
 801d78c:	ea4c 0c0b 	orr.w	ip, ip, fp
 801d790:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801d794:	ea4c 0c00 	orr.w	ip, ip, r0
 801d798:	f824 cb02 	strh.w	ip, [r4], #2
 801d79c:	e7bf      	b.n	801d71e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x102>
 801d79e:	f8be 3000 	ldrh.w	r3, [lr]
 801d7a2:	eba3 0308 	sub.w	r3, r3, r8
 801d7a6:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801d7aa:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801d7ae:	eba3 0308 	sub.w	r3, r3, r8
 801d7b2:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801d7b6:	e7ae      	b.n	801d716 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfa>
 801d7b8:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801d7bc:	f8d9 0000 	ldr.w	r0, [r9]
 801d7c0:	42ac      	cmp	r4, r5
 801d7c2:	6803      	ldr	r3, [r0, #0]
 801d7c4:	d20e      	bcs.n	801d7e4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 801d7c6:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
 801d7ca:	4632      	mov	r2, r6
 801d7cc:	463b      	mov	r3, r7
 801d7ce:	4621      	mov	r1, r4
 801d7d0:	47c0      	blx	r8
 801d7d2:	f8ba 3000 	ldrh.w	r3, [sl]
 801d7d6:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801d7da:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801d7de:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801d7e2:	e7eb      	b.n	801d7bc <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
 801d7e4:	4b02      	ldr	r3, [pc, #8]	; (801d7f0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 801d7e6:	6818      	ldr	r0, [r3, #0]
 801d7e8:	6803      	ldr	r3, [r0, #0]
 801d7ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d7ec:	4798      	blx	r3
 801d7ee:	e76b      	b.n	801d6c8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801d7f0:	20024428 	.word	0x20024428
 801d7f4:	20024422 	.word	0x20024422

0801d7f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801d7f8:	b510      	push	{r4, lr}
 801d7fa:	4604      	mov	r4, r0
 801d7fc:	2104      	movs	r1, #4
 801d7fe:	f008 ffc2 	bl	8026786 <_ZdlPvj>
 801d802:	4620      	mov	r0, r4
 801d804:	bd10      	pop	{r4, pc}

0801d806 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 801d806:	b510      	push	{r4, lr}
 801d808:	4604      	mov	r4, r0
 801d80a:	2104      	movs	r1, #4
 801d80c:	f008 ffbb 	bl	8026786 <_ZdlPvj>
 801d810:	4620      	mov	r0, r4
 801d812:	bd10      	pop	{r4, pc}

0801d814 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 801d814:	b510      	push	{r4, lr}
 801d816:	4604      	mov	r4, r0
 801d818:	2104      	movs	r1, #4
 801d81a:	f008 ffb4 	bl	8026786 <_ZdlPvj>
 801d81e:	4620      	mov	r0, r4
 801d820:	bd10      	pop	{r4, pc}

0801d822 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 801d822:	b510      	push	{r4, lr}
 801d824:	4604      	mov	r4, r0
 801d826:	2104      	movs	r1, #4
 801d828:	f008 ffad 	bl	8026786 <_ZdlPvj>
 801d82c:	4620      	mov	r0, r4
 801d82e:	bd10      	pop	{r4, pc}

0801d830 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801d830:	b510      	push	{r4, lr}
 801d832:	4604      	mov	r4, r0
 801d834:	2104      	movs	r1, #4
 801d836:	f008 ffa6 	bl	8026786 <_ZdlPvj>
 801d83a:	4620      	mov	r0, r4
 801d83c:	bd10      	pop	{r4, pc}

0801d83e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801d83e:	b510      	push	{r4, lr}
 801d840:	4604      	mov	r4, r0
 801d842:	2104      	movs	r1, #4
 801d844:	f008 ff9f 	bl	8026786 <_ZdlPvj>
 801d848:	4620      	mov	r0, r4
 801d84a:	bd10      	pop	{r4, pc}

0801d84c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801d84c:	b510      	push	{r4, lr}
 801d84e:	4604      	mov	r4, r0
 801d850:	2104      	movs	r1, #4
 801d852:	f008 ff98 	bl	8026786 <_ZdlPvj>
 801d856:	4620      	mov	r0, r4
 801d858:	bd10      	pop	{r4, pc}

0801d85a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801d85a:	b510      	push	{r4, lr}
 801d85c:	4604      	mov	r4, r0
 801d85e:	2104      	movs	r1, #4
 801d860:	f008 ff91 	bl	8026786 <_ZdlPvj>
 801d864:	4620      	mov	r0, r4
 801d866:	bd10      	pop	{r4, pc}

0801d868 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801d868:	b510      	push	{r4, lr}
 801d86a:	4604      	mov	r4, r0
 801d86c:	2104      	movs	r1, #4
 801d86e:	f008 ff8a 	bl	8026786 <_ZdlPvj>
 801d872:	4620      	mov	r0, r4
 801d874:	bd10      	pop	{r4, pc}

0801d876 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801d876:	b510      	push	{r4, lr}
 801d878:	4604      	mov	r4, r0
 801d87a:	2104      	movs	r1, #4
 801d87c:	f008 ff83 	bl	8026786 <_ZdlPvj>
 801d880:	4620      	mov	r0, r4
 801d882:	bd10      	pop	{r4, pc}

0801d884 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801d884:	b510      	push	{r4, lr}
 801d886:	4604      	mov	r4, r0
 801d888:	2104      	movs	r1, #4
 801d88a:	f008 ff7c 	bl	8026786 <_ZdlPvj>
 801d88e:	4620      	mov	r0, r4
 801d890:	bd10      	pop	{r4, pc}

0801d892 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801d892:	b510      	push	{r4, lr}
 801d894:	4604      	mov	r4, r0
 801d896:	2104      	movs	r1, #4
 801d898:	f008 ff75 	bl	8026786 <_ZdlPvj>
 801d89c:	4620      	mov	r0, r4
 801d89e:	bd10      	pop	{r4, pc}

0801d8a0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801d8a0:	b510      	push	{r4, lr}
 801d8a2:	4604      	mov	r4, r0
 801d8a4:	2104      	movs	r1, #4
 801d8a6:	f008 ff6e 	bl	8026786 <_ZdlPvj>
 801d8aa:	4620      	mov	r0, r4
 801d8ac:	bd10      	pop	{r4, pc}

0801d8ae <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 801d8ae:	b510      	push	{r4, lr}
 801d8b0:	4604      	mov	r4, r0
 801d8b2:	2104      	movs	r1, #4
 801d8b4:	f008 ff67 	bl	8026786 <_ZdlPvj>
 801d8b8:	4620      	mov	r0, r4
 801d8ba:	bd10      	pop	{r4, pc}

0801d8bc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801d8bc:	b510      	push	{r4, lr}
 801d8be:	4604      	mov	r4, r0
 801d8c0:	2104      	movs	r1, #4
 801d8c2:	f008 ff60 	bl	8026786 <_ZdlPvj>
 801d8c6:	4620      	mov	r0, r4
 801d8c8:	bd10      	pop	{r4, pc}

0801d8ca <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801d8ca:	b510      	push	{r4, lr}
 801d8cc:	4604      	mov	r4, r0
 801d8ce:	2104      	movs	r1, #4
 801d8d0:	f008 ff59 	bl	8026786 <_ZdlPvj>
 801d8d4:	4620      	mov	r0, r4
 801d8d6:	bd10      	pop	{r4, pc}

0801d8d8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 801d8d8:	b510      	push	{r4, lr}
 801d8da:	4604      	mov	r4, r0
 801d8dc:	2104      	movs	r1, #4
 801d8de:	f008 ff52 	bl	8026786 <_ZdlPvj>
 801d8e2:	4620      	mov	r0, r4
 801d8e4:	bd10      	pop	{r4, pc}

0801d8e6 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 801d8e6:	b510      	push	{r4, lr}
 801d8e8:	4604      	mov	r4, r0
 801d8ea:	2104      	movs	r1, #4
 801d8ec:	f008 ff4b 	bl	8026786 <_ZdlPvj>
 801d8f0:	4620      	mov	r0, r4
 801d8f2:	bd10      	pop	{r4, pc}

0801d8f4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801d8f4:	b510      	push	{r4, lr}
 801d8f6:	4604      	mov	r4, r0
 801d8f8:	2104      	movs	r1, #4
 801d8fa:	f008 ff44 	bl	8026786 <_ZdlPvj>
 801d8fe:	4620      	mov	r0, r4
 801d900:	bd10      	pop	{r4, pc}

0801d902 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
 801d902:	b510      	push	{r4, lr}
 801d904:	4604      	mov	r4, r0
 801d906:	2104      	movs	r1, #4
 801d908:	f008 ff3d 	bl	8026786 <_ZdlPvj>
 801d90c:	4620      	mov	r0, r4
 801d90e:	bd10      	pop	{r4, pc}

0801d910 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801d910:	b510      	push	{r4, lr}
 801d912:	4604      	mov	r4, r0
 801d914:	2104      	movs	r1, #4
 801d916:	f008 ff36 	bl	8026786 <_ZdlPvj>
 801d91a:	4620      	mov	r0, r4
 801d91c:	bd10      	pop	{r4, pc}

0801d91e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801d91e:	b510      	push	{r4, lr}
 801d920:	4604      	mov	r4, r0
 801d922:	2104      	movs	r1, #4
 801d924:	f008 ff2f 	bl	8026786 <_ZdlPvj>
 801d928:	4620      	mov	r0, r4
 801d92a:	bd10      	pop	{r4, pc}

0801d92c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801d92c:	b510      	push	{r4, lr}
 801d92e:	4604      	mov	r4, r0
 801d930:	2104      	movs	r1, #4
 801d932:	f008 ff28 	bl	8026786 <_ZdlPvj>
 801d936:	4620      	mov	r0, r4
 801d938:	bd10      	pop	{r4, pc}

0801d93a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801d93a:	b510      	push	{r4, lr}
 801d93c:	4604      	mov	r4, r0
 801d93e:	2104      	movs	r1, #4
 801d940:	f008 ff21 	bl	8026786 <_ZdlPvj>
 801d944:	4620      	mov	r0, r4
 801d946:	bd10      	pop	{r4, pc}

0801d948 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801d948:	b510      	push	{r4, lr}
 801d94a:	4604      	mov	r4, r0
 801d94c:	2104      	movs	r1, #4
 801d94e:	f008 ff1a 	bl	8026786 <_ZdlPvj>
 801d952:	4620      	mov	r0, r4
 801d954:	bd10      	pop	{r4, pc}

0801d956 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801d956:	b510      	push	{r4, lr}
 801d958:	4604      	mov	r4, r0
 801d95a:	2104      	movs	r1, #4
 801d95c:	f008 ff13 	bl	8026786 <_ZdlPvj>
 801d960:	4620      	mov	r0, r4
 801d962:	bd10      	pop	{r4, pc}

0801d964 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801d964:	b510      	push	{r4, lr}
 801d966:	4604      	mov	r4, r0
 801d968:	2104      	movs	r1, #4
 801d96a:	f008 ff0c 	bl	8026786 <_ZdlPvj>
 801d96e:	4620      	mov	r0, r4
 801d970:	bd10      	pop	{r4, pc}

0801d972 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801d972:	b510      	push	{r4, lr}
 801d974:	4604      	mov	r4, r0
 801d976:	2104      	movs	r1, #4
 801d978:	f008 ff05 	bl	8026786 <_ZdlPvj>
 801d97c:	4620      	mov	r0, r4
 801d97e:	bd10      	pop	{r4, pc}

0801d980 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 801d980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d984:	b091      	sub	sp, #68	; 0x44
 801d986:	469b      	mov	fp, r3
 801d988:	4616      	mov	r6, r2
 801d98a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801d98e:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 801d992:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801d996:	f9bd 906c 	ldrsh.w	r9, [sp, #108]	; 0x6c
 801d99a:	4604      	mov	r4, r0
 801d99c:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	; 0x70
 801d9a0:	4640      	mov	r0, r8
 801d9a2:	460d      	mov	r5, r1
 801d9a4:	4659      	mov	r1, fp
 801d9a6:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801d9aa:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801d9ae:	f8ad 902c 	strh.w	r9, [sp, #44]	; 0x2c
 801d9b2:	f8ad 702e 	strh.w	r7, [sp, #46]	; 0x2e
 801d9b6:	f7f7 fb33 	bl	8015020 <_ZN8touchgfx4RectaNERKS0_>
 801d9ba:	4631      	mov	r1, r6
 801d9bc:	4640      	mov	r0, r8
 801d9be:	f7f7 fb2f 	bl	8015020 <_ZN8touchgfx4RectaNERKS0_>
 801d9c2:	4b74      	ldr	r3, [pc, #464]	; (801db94 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x214>)
 801d9c4:	8818      	ldrh	r0, [r3, #0]
 801d9c6:	4b74      	ldr	r3, [pc, #464]	; (801db98 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x218>)
 801d9c8:	b202      	sxth	r2, r0
 801d9ca:	8819      	ldrh	r1, [r3, #0]
 801d9cc:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 801d9d0:	b20e      	sxth	r6, r1
 801d9d2:	2b00      	cmp	r3, #0
 801d9d4:	da07      	bge.n	801d9e6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x66>
 801d9d6:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 801d9da:	4463      	add	r3, ip
 801d9dc:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 801d9e0:	2300      	movs	r3, #0
 801d9e2:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 801d9e6:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 801d9ea:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 801d9ee:	1ad2      	subs	r2, r2, r3
 801d9f0:	4594      	cmp	ip, r2
 801d9f2:	bfc4      	itt	gt
 801d9f4:	1ac2      	subgt	r2, r0, r3
 801d9f6:	f8ad 202c 	strhgt.w	r2, [sp, #44]	; 0x2c
 801d9fa:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801d9fe:	2a00      	cmp	r2, #0
 801da00:	da07      	bge.n	801da12 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x92>
 801da02:	f8bd c02e 	ldrh.w	ip, [sp, #46]	; 0x2e
 801da06:	4462      	add	r2, ip
 801da08:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 801da0c:	2200      	movs	r2, #0
 801da0e:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 801da12:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	; 0x2a
 801da16:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 801da1a:	eba6 060a 	sub.w	r6, r6, sl
 801da1e:	42b2      	cmp	r2, r6
 801da20:	bfc4      	itt	gt
 801da22:	eba1 020a 	subgt.w	r2, r1, sl
 801da26:	f8ad 202e 	strhgt.w	r2, [sp, #46]	; 0x2e
 801da2a:	4a5c      	ldr	r2, [pc, #368]	; (801db9c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x21c>)
 801da2c:	7812      	ldrb	r2, [r2, #0]
 801da2e:	b9a2      	cbnz	r2, 801da5a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xda>
 801da30:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 801da34:	4286      	cmp	r6, r0
 801da36:	4640      	mov	r0, r8
 801da38:	9303      	str	r3, [sp, #12]
 801da3a:	bf14      	ite	ne
 801da3c:	2600      	movne	r6, #0
 801da3e:	2601      	moveq	r6, #1
 801da40:	f7f7 fb31 	bl	80150a6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801da44:	9b03      	ldr	r3, [sp, #12]
 801da46:	b160      	cbz	r0, 801da62 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xe2>
 801da48:	2300      	movs	r3, #0
 801da4a:	8023      	strh	r3, [r4, #0]
 801da4c:	8063      	strh	r3, [r4, #2]
 801da4e:	80a3      	strh	r3, [r4, #4]
 801da50:	4620      	mov	r0, r4
 801da52:	80e3      	strh	r3, [r4, #6]
 801da54:	b011      	add	sp, #68	; 0x44
 801da56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801da5a:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 801da5e:	428e      	cmp	r6, r1
 801da60:	e7e9      	b.n	801da36 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb6>
 801da62:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 801da66:	a90e      	add	r1, sp, #56	; 0x38
 801da68:	900e      	str	r0, [sp, #56]	; 0x38
 801da6a:	a80c      	add	r0, sp, #48	; 0x30
 801da6c:	9205      	str	r2, [sp, #20]
 801da6e:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 801da72:	f8ad 903c 	strh.w	r9, [sp, #60]	; 0x3c
 801da76:	9206      	str	r2, [sp, #24]
 801da78:	f8bb 2000 	ldrh.w	r2, [fp]
 801da7c:	f8ad 703e 	strh.w	r7, [sp, #62]	; 0x3e
 801da80:	1a9b      	subs	r3, r3, r2
 801da82:	b21b      	sxth	r3, r3
 801da84:	9303      	str	r3, [sp, #12]
 801da86:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 801da8a:	f8df b118 	ldr.w	fp, [pc, #280]	; 801dba4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 801da8e:	ebaa 0a03 	sub.w	sl, sl, r3
 801da92:	fa0f f38a 	sxth.w	r3, sl
 801da96:	9304      	str	r3, [sp, #16]
 801da98:	9b03      	ldr	r3, [sp, #12]
 801da9a:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 801da9e:	9b04      	ldr	r3, [sp, #16]
 801daa0:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801daa4:	9b05      	ldr	r3, [sp, #20]
 801daa6:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 801daaa:	9b06      	ldr	r3, [sp, #24]
 801daac:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801dab0:	f7fa fa9a 	bl	8017fe8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801dab4:	4640      	mov	r0, r8
 801dab6:	f7fa fa6f 	bl	8017f98 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801daba:	a80e      	add	r0, sp, #56	; 0x38
 801dabc:	f7fa fa6c 	bl	8017f98 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801dac0:	4b37      	ldr	r3, [pc, #220]	; (801dba0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 801dac2:	4628      	mov	r0, r5
 801dac4:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 801dac8:	881b      	ldrh	r3, [r3, #0]
 801daca:	9307      	str	r3, [sp, #28]
 801dacc:	682b      	ldr	r3, [r5, #0]
 801dace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801dad0:	4798      	blx	r3
 801dad2:	f8bd 5032 	ldrh.w	r5, [sp, #50]	; 0x32
 801dad6:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 801dada:	4681      	mov	r9, r0
 801dadc:	f8db 0000 	ldr.w	r0, [fp]
 801dae0:	fb1a 3305 	smlabb	r3, sl, r5, r3
 801dae4:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 801dae6:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 801daea:	6803      	ldr	r3, [r0, #0]
 801daec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801daee:	4798      	blx	r3
 801daf0:	4607      	mov	r7, r0
 801daf2:	f8db 0000 	ldr.w	r0, [fp]
 801daf6:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 801dafa:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801dafe:	6803      	ldr	r3, [r0, #0]
 801db00:	9109      	str	r1, [sp, #36]	; 0x24
 801db02:	9208      	str	r2, [sp, #32]
 801db04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801db06:	4798      	blx	r3
 801db08:	f010 0f01 	tst.w	r0, #1
 801db0c:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801db10:	d012      	beq.n	801db38 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b8>
 801db12:	f8db 0000 	ldr.w	r0, [fp]
 801db16:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 801db1a:	6803      	ldr	r3, [r0, #0]
 801db1c:	9200      	str	r2, [sp, #0]
 801db1e:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 801db20:	462b      	mov	r3, r5
 801db22:	e898 0006 	ldmia.w	r8, {r1, r2}
 801db26:	47b0      	blx	r6
 801db28:	9b03      	ldr	r3, [sp, #12]
 801db2a:	8023      	strh	r3, [r4, #0]
 801db2c:	9b04      	ldr	r3, [sp, #16]
 801db2e:	8063      	strh	r3, [r4, #2]
 801db30:	9b05      	ldr	r3, [sp, #20]
 801db32:	80a3      	strh	r3, [r4, #4]
 801db34:	9b06      	ldr	r3, [sp, #24]
 801db36:	e78b      	b.n	801da50 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xd0>
 801db38:	fb09 f202 	mul.w	r2, r9, r2
 801db3c:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 801db40:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 801db44:	440f      	add	r7, r1
 801db46:	b166      	cbz	r6, 801db62 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 801db48:	9a07      	ldr	r2, [sp, #28]
 801db4a:	4592      	cmp	sl, r2
 801db4c:	d109      	bne.n	801db62 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 801db4e:	f8db 0000 	ldr.w	r0, [fp]
 801db52:	fb09 f303 	mul.w	r3, r9, r3
 801db56:	4629      	mov	r1, r5
 801db58:	6802      	ldr	r2, [r0, #0]
 801db5a:	6b56      	ldr	r6, [r2, #52]	; 0x34
 801db5c:	463a      	mov	r2, r7
 801db5e:	47b0      	blx	r6
 801db60:	e7e2      	b.n	801db28 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 801db62:	fb0a f303 	mul.w	r3, sl, r3
 801db66:	ea4f 064a 	mov.w	r6, sl, lsl #1
 801db6a:	f8df b038 	ldr.w	fp, [pc, #56]	; 801dba4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 801db6e:	eb05 0843 	add.w	r8, r5, r3, lsl #1
 801db72:	4545      	cmp	r5, r8
 801db74:	d2d8      	bcs.n	801db28 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 801db76:	f8db 0000 	ldr.w	r0, [fp]
 801db7a:	4629      	mov	r1, r5
 801db7c:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801db80:	4435      	add	r5, r6
 801db82:	6802      	ldr	r2, [r0, #0]
 801db84:	005b      	lsls	r3, r3, #1
 801db86:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 801db8a:	463a      	mov	r2, r7
 801db8c:	47d0      	blx	sl
 801db8e:	444f      	add	r7, r9
 801db90:	e7ef      	b.n	801db72 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f2>
 801db92:	bf00      	nop
 801db94:	2002441c 	.word	0x2002441c
 801db98:	2002441e 	.word	0x2002441e
 801db9c:	20024420 	.word	0x20024420
 801dba0:	20024422 	.word	0x20024422
 801dba4:	20024428 	.word	0x20024428

0801dba8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801dba8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dbaa:	4606      	mov	r6, r0
 801dbac:	b087      	sub	sp, #28
 801dbae:	460c      	mov	r4, r1
 801dbb0:	4617      	mov	r7, r2
 801dbb2:	461d      	mov	r5, r3
 801dbb4:	b333      	cbz	r3, 801dc04 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801dbb6:	4608      	mov	r0, r1
 801dbb8:	f7f7 fa75 	bl	80150a6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801dbbc:	bb10      	cbnz	r0, 801dc04 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801dbbe:	6820      	ldr	r0, [r4, #0]
 801dbc0:	ab04      	add	r3, sp, #16
 801dbc2:	6861      	ldr	r1, [r4, #4]
 801dbc4:	4c1b      	ldr	r4, [pc, #108]	; (801dc34 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
 801dbc6:	c303      	stmia	r3!, {r0, r1}
 801dbc8:	a804      	add	r0, sp, #16
 801dbca:	f7fa f9e5 	bl	8017f98 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801dbce:	6820      	ldr	r0, [r4, #0]
 801dbd0:	6803      	ldr	r3, [r0, #0]
 801dbd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dbd4:	4798      	blx	r3
 801dbd6:	2dff      	cmp	r5, #255	; 0xff
 801dbd8:	d016      	beq.n	801dc08 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 801dbda:	f010 0f08 	tst.w	r0, #8
 801dbde:	6820      	ldr	r0, [r4, #0]
 801dbe0:	d015      	beq.n	801dc0e <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 801dbe2:	2400      	movs	r4, #0
 801dbe4:	6801      	ldr	r1, [r0, #0]
 801dbe6:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801dbea:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801dbee:	e9cd 5402 	strd	r5, r4, [sp, #8]
 801dbf2:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 801dbf6:	9401      	str	r4, [sp, #4]
 801dbf8:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801dbfc:	9400      	str	r4, [sp, #0]
 801dbfe:	6e0c      	ldr	r4, [r1, #96]	; 0x60
 801dc00:	4639      	mov	r1, r7
 801dc02:	47a0      	blx	r4
 801dc04:	b007      	add	sp, #28
 801dc06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801dc08:	f010 0f02 	tst.w	r0, #2
 801dc0c:	e7e7      	b.n	801dbde <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
 801dc0e:	6803      	ldr	r3, [r0, #0]
 801dc10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801dc12:	4798      	blx	r3
 801dc14:	4b08      	ldr	r3, [pc, #32]	; (801dc38 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 801dc16:	4601      	mov	r1, r0
 801dc18:	4630      	mov	r0, r6
 801dc1a:	881a      	ldrh	r2, [r3, #0]
 801dc1c:	6833      	ldr	r3, [r6, #0]
 801dc1e:	e9cd 7500 	strd	r7, r5, [sp]
 801dc22:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 801dc24:	ab04      	add	r3, sp, #16
 801dc26:	47a8      	blx	r5
 801dc28:	6820      	ldr	r0, [r4, #0]
 801dc2a:	6803      	ldr	r3, [r0, #0]
 801dc2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801dc2e:	4798      	blx	r3
 801dc30:	e7e8      	b.n	801dc04 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801dc32:	bf00      	nop
 801dc34:	20024428 	.word	0x20024428
 801dc38:	20024422 	.word	0x20024422

0801dc3c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 801dc3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801dc40:	f89d 7024 	ldrb.w	r7, [sp, #36]	; 0x24
 801dc44:	4688      	mov	r8, r1
 801dc46:	4614      	mov	r4, r2
 801dc48:	461d      	mov	r5, r3
 801dc4a:	9e08      	ldr	r6, [sp, #32]
 801dc4c:	2f00      	cmp	r7, #0
 801dc4e:	f000 80ab 	beq.w	801dda8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 801dc52:	4618      	mov	r0, r3
 801dc54:	f7f7 fa27 	bl	80150a6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801dc58:	2800      	cmp	r0, #0
 801dc5a:	f040 80a5 	bne.w	801dda8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 801dc5e:	f9b5 1000 	ldrsh.w	r1, [r5]
 801dc62:	2fff      	cmp	r7, #255	; 0xff
 801dc64:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801dc68:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
 801dc6c:	fb04 1303 	mla	r3, r4, r3, r1
 801dc70:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
 801dc74:	eba4 0200 	sub.w	r2, r4, r0
 801dc78:	eb08 0143 	add.w	r1, r8, r3, lsl #1
 801dc7c:	fb04 f505 	mul.w	r5, r4, r5
 801dc80:	ea4f 2816 	mov.w	r8, r6, lsr #8
 801dc84:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 801dc88:	d04a      	beq.n	801dd20 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe4>
 801dc8a:	b2bc      	uxth	r4, r7
 801dc8c:	f1c7 0cff 	rsb	ip, r7, #255	; 0xff
 801dc90:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 801dc94:	fa5f f788 	uxtb.w	r7, r8
 801dc98:	b2f3      	uxtb	r3, r6
 801dc9a:	0040      	lsls	r0, r0, #1
 801dc9c:	fb0e fe04 	mul.w	lr, lr, r4
 801dca0:	4367      	muls	r7, r4
 801dca2:	ea4f 0842 	mov.w	r8, r2, lsl #1
 801dca6:	4363      	muls	r3, r4
 801dca8:	fa1f fc8c 	uxth.w	ip, ip
 801dcac:	42a9      	cmp	r1, r5
 801dcae:	d27b      	bcs.n	801dda8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 801dcb0:	eb01 0900 	add.w	r9, r1, r0
 801dcb4:	4549      	cmp	r1, r9
 801dcb6:	d231      	bcs.n	801dd1c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe0>
 801dcb8:	880a      	ldrh	r2, [r1, #0]
 801dcba:	1214      	asrs	r4, r2, #8
 801dcbc:	10d6      	asrs	r6, r2, #3
 801dcbe:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 801dcc2:	00d2      	lsls	r2, r2, #3
 801dcc4:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801dcc8:	b2d2      	uxtb	r2, r2
 801dcca:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 801dcce:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801dcd2:	fb14 f40c 	smulbb	r4, r4, ip
 801dcd6:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 801dcda:	fb12 f20c 	smulbb	r2, r2, ip
 801dcde:	fb16 f60c 	smulbb	r6, r6, ip
 801dce2:	4474      	add	r4, lr
 801dce4:	441a      	add	r2, r3
 801dce6:	b2a4      	uxth	r4, r4
 801dce8:	443e      	add	r6, r7
 801dcea:	b292      	uxth	r2, r2
 801dcec:	f104 0a01 	add.w	sl, r4, #1
 801dcf0:	b2b6      	uxth	r6, r6
 801dcf2:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 801dcf6:	f102 0a01 	add.w	sl, r2, #1
 801dcfa:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
 801dcfe:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 801dd02:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801dd06:	4322      	orrs	r2, r4
 801dd08:	1c74      	adds	r4, r6, #1
 801dd0a:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 801dd0e:	0976      	lsrs	r6, r6, #5
 801dd10:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801dd14:	4332      	orrs	r2, r6
 801dd16:	f821 2b02 	strh.w	r2, [r1], #2
 801dd1a:	e7cb      	b.n	801dcb4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x78>
 801dd1c:	4441      	add	r1, r8
 801dd1e:	e7c5      	b.n	801dcac <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x70>
 801dd20:	0973      	lsrs	r3, r6, #5
 801dd22:	4f22      	ldr	r7, [pc, #136]	; (801ddac <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x170>)
 801dd24:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 801dd28:	ea08 0707 	and.w	r7, r8, r7
 801dd2c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801dd30:	433b      	orrs	r3, r7
 801dd32:	07e7      	lsls	r7, r4, #31
 801dd34:	ea43 0306 	orr.w	r3, r3, r6
 801dd38:	b29b      	uxth	r3, r3
 801dd3a:	d50b      	bpl.n	801dd54 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x118>
 801dd3c:	0040      	lsls	r0, r0, #1
 801dd3e:	0052      	lsls	r2, r2, #1
 801dd40:	42a9      	cmp	r1, r5
 801dd42:	d231      	bcs.n	801dda8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 801dd44:	180c      	adds	r4, r1, r0
 801dd46:	42a1      	cmp	r1, r4
 801dd48:	d202      	bcs.n	801dd50 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x114>
 801dd4a:	f821 3b02 	strh.w	r3, [r1], #2
 801dd4e:	e7fa      	b.n	801dd46 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x10a>
 801dd50:	4411      	add	r1, r2
 801dd52:	e7f5      	b.n	801dd40 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x104>
 801dd54:	078e      	lsls	r6, r1, #30
 801dd56:	d008      	beq.n	801dd6a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12e>
 801dd58:	0066      	lsls	r6, r4, #1
 801dd5a:	460a      	mov	r2, r1
 801dd5c:	42aa      	cmp	r2, r5
 801dd5e:	d202      	bcs.n	801dd66 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12a>
 801dd60:	8013      	strh	r3, [r2, #0]
 801dd62:	4432      	add	r2, r6
 801dd64:	e7fa      	b.n	801dd5c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x120>
 801dd66:	3102      	adds	r1, #2
 801dd68:	3801      	subs	r0, #1
 801dd6a:	07c2      	lsls	r2, r0, #31
 801dd6c:	d50b      	bpl.n	801dd86 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x14a>
 801dd6e:	f100 4200 	add.w	r2, r0, #2147483648	; 0x80000000
 801dd72:	0066      	lsls	r6, r4, #1
 801dd74:	3a01      	subs	r2, #1
 801dd76:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 801dd7a:	42aa      	cmp	r2, r5
 801dd7c:	d202      	bcs.n	801dd84 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x148>
 801dd7e:	8013      	strh	r3, [r2, #0]
 801dd80:	4432      	add	r2, r6
 801dd82:	e7fa      	b.n	801dd7a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x13e>
 801dd84:	3801      	subs	r0, #1
 801dd86:	b178      	cbz	r0, 801dda8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 801dd88:	1040      	asrs	r0, r0, #1
 801dd8a:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
 801dd8e:	0080      	lsls	r0, r0, #2
 801dd90:	0064      	lsls	r4, r4, #1
 801dd92:	42a9      	cmp	r1, r5
 801dd94:	d208      	bcs.n	801dda8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 801dd96:	180e      	adds	r6, r1, r0
 801dd98:	460a      	mov	r2, r1
 801dd9a:	42b2      	cmp	r2, r6
 801dd9c:	d202      	bcs.n	801dda4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 801dd9e:	f842 3b04 	str.w	r3, [r2], #4
 801dda2:	e7fa      	b.n	801dd9a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x15e>
 801dda4:	4421      	add	r1, r4
 801dda6:	e7f4      	b.n	801dd92 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x156>
 801dda8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ddac:	00fff800 	.word	0x00fff800

0801ddb0 <_ZN8touchgfx8LCD16bppC1Ev>:
 801ddb0:	2200      	movs	r2, #0
 801ddb2:	4910      	ldr	r1, [pc, #64]	; (801ddf4 <_ZN8touchgfx8LCD16bppC1Ev+0x44>)
 801ddb4:	6042      	str	r2, [r0, #4]
 801ddb6:	6001      	str	r1, [r0, #0]
 801ddb8:	e9c0 2202 	strd	r2, r2, [r0, #8]
 801ddbc:	e9c0 2204 	strd	r2, r2, [r0, #16]
 801ddc0:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801ddc4:	e9c0 2208 	strd	r2, r2, [r0, #32]
 801ddc8:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 801ddcc:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 801ddd0:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 801ddd4:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 801ddd8:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 801dddc:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 801dde0:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 801dde4:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 801dde8:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
 801ddec:	e9c0 221c 	strd	r2, r2, [r0, #112]	; 0x70
 801ddf0:	4770      	bx	lr
 801ddf2:	bf00      	nop
 801ddf4:	0802b4cc 	.word	0x0802b4cc

0801ddf8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801ddf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ddfc:	b08d      	sub	sp, #52	; 0x34
 801ddfe:	460d      	mov	r5, r1
 801de00:	4604      	mov	r4, r0
 801de02:	4699      	mov	r9, r3
 801de04:	6808      	ldr	r0, [r1, #0]
 801de06:	ab08      	add	r3, sp, #32
 801de08:	6849      	ldr	r1, [r1, #4]
 801de0a:	c303      	stmia	r3!, {r0, r1}
 801de0c:	6810      	ldr	r0, [r2, #0]
 801de0e:	ab0a      	add	r3, sp, #40	; 0x28
 801de10:	6851      	ldr	r1, [r2, #4]
 801de12:	c303      	stmia	r3!, {r0, r1}
 801de14:	a808      	add	r0, sp, #32
 801de16:	f7fa f8bf 	bl	8017f98 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801de1a:	4629      	mov	r1, r5
 801de1c:	a80a      	add	r0, sp, #40	; 0x28
 801de1e:	4d67      	ldr	r5, [pc, #412]	; (801dfbc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 801de20:	f7fa f8e2 	bl	8017fe8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801de24:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801de28:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 801de2c:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 801de30:	6828      	ldr	r0, [r5, #0]
 801de32:	fb11 2103 	smlabb	r1, r1, r3, r2
 801de36:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	; 0x2c
 801de3a:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 801de3e:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801de42:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 801de46:	440a      	add	r2, r1
 801de48:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801de4c:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801de50:	4413      	add	r3, r2
 801de52:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801de56:	6803      	ldr	r3, [r0, #0]
 801de58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801de5a:	4798      	blx	r3
 801de5c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801de60:	d119      	bne.n	801de96 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 801de62:	f010 0f20 	tst.w	r0, #32
 801de66:	6828      	ldr	r0, [r5, #0]
 801de68:	d018      	beq.n	801de9c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
 801de6a:	2500      	movs	r5, #0
 801de6c:	6801      	ldr	r1, [r0, #0]
 801de6e:	b2b6      	uxth	r6, r6
 801de70:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801de74:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801de78:	9601      	str	r6, [sp, #4]
 801de7a:	e9cd 9503 	strd	r9, r5, [sp, #12]
 801de7e:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 801de82:	9502      	str	r5, [sp, #8]
 801de84:	fa1f f588 	uxth.w	r5, r8
 801de88:	9500      	str	r5, [sp, #0]
 801de8a:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 801de8c:	4621      	mov	r1, r4
 801de8e:	47a8      	blx	r5
 801de90:	b00d      	add	sp, #52	; 0x34
 801de92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801de96:	f010 0f40 	tst.w	r0, #64	; 0x40
 801de9a:	e7e4      	b.n	801de66 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 801de9c:	6803      	ldr	r3, [r0, #0]
 801de9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801dea0:	4798      	blx	r3
 801dea2:	4947      	ldr	r1, [pc, #284]	; (801dfc0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c8>)
 801dea4:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801dea8:	880b      	ldrh	r3, [r1, #0]
 801deaa:	468a      	mov	sl, r1
 801deac:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
 801deb0:	fb03 5202 	mla	r2, r3, r2, r5
 801deb4:	4373      	muls	r3, r6
 801deb6:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801deba:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801debe:	9307      	str	r3, [sp, #28]
 801dec0:	ea4f 0348 	mov.w	r3, r8, lsl #1
 801dec4:	9306      	str	r3, [sp, #24]
 801dec6:	9b07      	ldr	r3, [sp, #28]
 801dec8:	4298      	cmp	r0, r3
 801deca:	d270      	bcs.n	801dfae <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b6>
 801decc:	9b06      	ldr	r3, [sp, #24]
 801dece:	4621      	mov	r1, r4
 801ded0:	eb00 0b03 	add.w	fp, r0, r3
 801ded4:	4558      	cmp	r0, fp
 801ded6:	d25d      	bcs.n	801df94 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x19c>
 801ded8:	f851 4b04 	ldr.w	r4, [r1], #4
 801dedc:	0e23      	lsrs	r3, r4, #24
 801dede:	d014      	beq.n	801df0a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 801dee0:	2bff      	cmp	r3, #255	; 0xff
 801dee2:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 801dee6:	d112      	bne.n	801df0e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 801dee8:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801deec:	d10f      	bne.n	801df0e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 801deee:	0963      	lsrs	r3, r4, #5
 801def0:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 801def4:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801def8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801defc:	f02c 0c07 	bic.w	ip, ip, #7
 801df00:	ea43 0c0c 	orr.w	ip, r3, ip
 801df04:	ea4c 0404 	orr.w	r4, ip, r4
 801df08:	8004      	strh	r4, [r0, #0]
 801df0a:	3002      	adds	r0, #2
 801df0c:	e7e2      	b.n	801ded4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xdc>
 801df0e:	fb09 f303 	mul.w	r3, r9, r3
 801df12:	8807      	ldrh	r7, [r0, #0]
 801df14:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 801df18:	fa5f fc8c 	uxtb.w	ip, ip
 801df1c:	1c5a      	adds	r2, r3, #1
 801df1e:	123e      	asrs	r6, r7, #8
 801df20:	10fd      	asrs	r5, r7, #3
 801df22:	eb02 2223 	add.w	r2, r2, r3, asr #8
 801df26:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801df2a:	00ff      	lsls	r7, r7, #3
 801df2c:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801df30:	1212      	asrs	r2, r2, #8
 801df32:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801df36:	b293      	uxth	r3, r2
 801df38:	43d2      	mvns	r2, r2
 801df3a:	b2ff      	uxtb	r7, r7
 801df3c:	fb1e fe03 	smulbb	lr, lr, r3
 801df40:	b2d2      	uxtb	r2, r2
 801df42:	fb1c fc03 	smulbb	ip, ip, r3
 801df46:	b2e4      	uxtb	r4, r4
 801df48:	fb06 e602 	mla	r6, r6, r2, lr
 801df4c:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 801df50:	fb14 f403 	smulbb	r4, r4, r3
 801df54:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 801df58:	b2b6      	uxth	r6, r6
 801df5a:	fb05 c502 	mla	r5, r5, r2, ip
 801df5e:	fb07 4702 	mla	r7, r7, r2, r4
 801df62:	f106 0e01 	add.w	lr, r6, #1
 801df66:	b2ad      	uxth	r5, r5
 801df68:	b2bf      	uxth	r7, r7
 801df6a:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 801df6e:	f105 0c01 	add.w	ip, r5, #1
 801df72:	f406 4e78 	and.w	lr, r6, #63488	; 0xf800
 801df76:	1c7e      	adds	r6, r7, #1
 801df78:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 801df7c:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 801df80:	096d      	lsrs	r5, r5, #5
 801df82:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801df86:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801df8a:	ea46 060e 	orr.w	r6, r6, lr
 801df8e:	432e      	orrs	r6, r5
 801df90:	8006      	strh	r6, [r0, #0]
 801df92:	e7ba      	b.n	801df0a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 801df94:	f8ba 3000 	ldrh.w	r3, [sl]
 801df98:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	; 0x24
 801df9c:	eba3 0308 	sub.w	r3, r3, r8
 801dfa0:	eba4 0408 	sub.w	r4, r4, r8
 801dfa4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801dfa8:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 801dfac:	e78b      	b.n	801dec6 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
 801dfae:	4b03      	ldr	r3, [pc, #12]	; (801dfbc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 801dfb0:	6818      	ldr	r0, [r3, #0]
 801dfb2:	6803      	ldr	r3, [r0, #0]
 801dfb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801dfb6:	4798      	blx	r3
 801dfb8:	e76a      	b.n	801de90 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 801dfba:	bf00      	nop
 801dfbc:	20024428 	.word	0x20024428
 801dfc0:	20024422 	.word	0x20024422

0801dfc4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>:
 801dfc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801dfc8:	b085      	sub	sp, #20
 801dfca:	6810      	ldr	r0, [r2, #0]
 801dfcc:	460c      	mov	r4, r1
 801dfce:	6851      	ldr	r1, [r2, #4]
 801dfd0:	466d      	mov	r5, sp
 801dfd2:	4616      	mov	r6, r2
 801dfd4:	c503      	stmia	r5!, {r0, r1}
 801dfd6:	6818      	ldr	r0, [r3, #0]
 801dfd8:	6859      	ldr	r1, [r3, #4]
 801dfda:	c503      	stmia	r5!, {r0, r1}
 801dfdc:	4668      	mov	r0, sp
 801dfde:	4d2e      	ldr	r5, [pc, #184]	; (801e098 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd4>)
 801dfe0:	f7f9 ffda 	bl	8017f98 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801dfe4:	4631      	mov	r1, r6
 801dfe6:	a802      	add	r0, sp, #8
 801dfe8:	4e2c      	ldr	r6, [pc, #176]	; (801e09c <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd8>)
 801dfea:	f7f9 fffd 	bl	8017fe8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801dfee:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 801dff2:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 801dff6:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 801dffa:	6828      	ldr	r0, [r5, #0]
 801dffc:	fb11 2103 	smlabb	r1, r1, r3, r2
 801e000:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801e004:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
 801e008:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801e00c:	f8bd 1000 	ldrh.w	r1, [sp]
 801e010:	440a      	add	r2, r1
 801e012:	f8ad 2008 	strh.w	r2, [sp, #8]
 801e016:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801e01a:	4413      	add	r3, r2
 801e01c:	f8ad 300a 	strh.w	r3, [sp, #10]
 801e020:	6803      	ldr	r3, [r0, #0]
 801e022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e024:	4798      	blx	r3
 801e026:	8833      	ldrh	r3, [r6, #0]
 801e028:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 801e02c:	ea4f 0c47 	mov.w	ip, r7, lsl #1
 801e030:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 801e034:	f8df e068 	ldr.w	lr, [pc, #104]	; 801e0a0 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xdc>
 801e038:	fb03 1202 	mla	r2, r3, r2, r1
 801e03c:	fb08 f303 	mul.w	r3, r8, r3
 801e040:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801e044:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801e048:	4298      	cmp	r0, r3
 801e04a:	d21d      	bcs.n	801e088 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xc4>
 801e04c:	eb00 080c 	add.w	r8, r0, ip
 801e050:	4540      	cmp	r0, r8
 801e052:	d20f      	bcs.n	801e074 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xb0>
 801e054:	f854 1b04 	ldr.w	r1, [r4], #4
 801e058:	ea4f 1951 	mov.w	r9, r1, lsr #5
 801e05c:	ea0e 2211 	and.w	r2, lr, r1, lsr #8
 801e060:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 801e064:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801e068:	ea42 0209 	orr.w	r2, r2, r9
 801e06c:	430a      	orrs	r2, r1
 801e06e:	f820 2b02 	strh.w	r2, [r0], #2
 801e072:	e7ed      	b.n	801e050 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x8c>
 801e074:	8832      	ldrh	r2, [r6, #0]
 801e076:	1bd2      	subs	r2, r2, r7
 801e078:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801e07c:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 801e080:	1bd2      	subs	r2, r2, r7
 801e082:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 801e086:	e7df      	b.n	801e048 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x84>
 801e088:	6828      	ldr	r0, [r5, #0]
 801e08a:	6803      	ldr	r3, [r0, #0]
 801e08c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e08e:	4798      	blx	r3
 801e090:	b005      	add	sp, #20
 801e092:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e096:	bf00      	nop
 801e098:	20024428 	.word	0x20024428
 801e09c:	20024422 	.word	0x20024422
 801e0a0:	fffff800 	.word	0xfffff800

0801e0a4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>:
 801e0a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e0a8:	b08e      	sub	sp, #56	; 0x38
 801e0aa:	460e      	mov	r6, r1
 801e0ac:	4604      	mov	r4, r0
 801e0ae:	461d      	mov	r5, r3
 801e0b0:	6808      	ldr	r0, [r1, #0]
 801e0b2:	ab0a      	add	r3, sp, #40	; 0x28
 801e0b4:	6849      	ldr	r1, [r1, #4]
 801e0b6:	f8df 81d4 	ldr.w	r8, [pc, #468]	; 801e28c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>
 801e0ba:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 801e290 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1ec>
 801e0be:	c303      	stmia	r3!, {r0, r1}
 801e0c0:	6810      	ldr	r0, [r2, #0]
 801e0c2:	ab0c      	add	r3, sp, #48	; 0x30
 801e0c4:	6851      	ldr	r1, [r2, #4]
 801e0c6:	c303      	stmia	r3!, {r0, r1}
 801e0c8:	a80a      	add	r0, sp, #40	; 0x28
 801e0ca:	f7f9 ff65 	bl	8017f98 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e0ce:	4631      	mov	r1, r6
 801e0d0:	a80c      	add	r0, sp, #48	; 0x30
 801e0d2:	f7f9 ff89 	bl	8017fe8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e0d6:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 801e0da:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801e0de:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801e0e2:	f8d8 0000 	ldr.w	r0, [r8]
 801e0e6:	fb11 2103 	smlabb	r1, r1, r3, r2
 801e0ea:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
 801e0ee:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	; 0x36
 801e0f2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801e0f6:	440c      	add	r4, r1
 801e0f8:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 801e0fc:	440a      	add	r2, r1
 801e0fe:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 801e102:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 801e106:	4413      	add	r3, r2
 801e108:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801e10c:	6803      	ldr	r3, [r0, #0]
 801e10e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e110:	4798      	blx	r3
 801e112:	2dff      	cmp	r5, #255	; 0xff
 801e114:	d124      	bne.n	801e160 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xbc>
 801e116:	f010 0f01 	tst.w	r0, #1
 801e11a:	f8d8 0000 	ldr.w	r0, [r8]
 801e11e:	d022      	beq.n	801e166 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xc2>
 801e120:	2100      	movs	r1, #0
 801e122:	f04f 0e01 	mov.w	lr, #1
 801e126:	f8d0 c000 	ldr.w	ip, [r0]
 801e12a:	b2b6      	uxth	r6, r6
 801e12c:	f8cd e018 	str.w	lr, [sp, #24]
 801e130:	b2bf      	uxth	r7, r7
 801e132:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 801e136:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 801e13a:	e9cd 1107 	strd	r1, r1, [sp, #28]
 801e13e:	f8b9 e000 	ldrh.w	lr, [r9]
 801e142:	9503      	str	r5, [sp, #12]
 801e144:	9601      	str	r6, [sp, #4]
 801e146:	9700      	str	r7, [sp, #0]
 801e148:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 801e14c:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801e150:	9102      	str	r1, [sp, #8]
 801e152:	4621      	mov	r1, r4
 801e154:	f8dc 5040 	ldr.w	r5, [ip, #64]	; 0x40
 801e158:	47a8      	blx	r5
 801e15a:	b00e      	add	sp, #56	; 0x38
 801e15c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e160:	f010 0f04 	tst.w	r0, #4
 801e164:	e7d9      	b.n	801e11a <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x76>
 801e166:	6803      	ldr	r3, [r0, #0]
 801e168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e16a:	4798      	blx	r3
 801e16c:	f8b9 3000 	ldrh.w	r3, [r9]
 801e170:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 801e174:	ea4f 0e47 	mov.w	lr, r7, lsl #1
 801e178:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 801e17c:	435e      	muls	r6, r3
 801e17e:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 801e182:	2dff      	cmp	r5, #255	; 0xff
 801e184:	fb03 1202 	mla	r2, r3, r2, r1
 801e188:	ebac 0c07 	sub.w	ip, ip, r7
 801e18c:	eba3 0707 	sub.w	r7, r3, r7
 801e190:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801e194:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801e198:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801e19c:	ea4f 0747 	mov.w	r7, r7, lsl #1
 801e1a0:	d049      	beq.n	801e236 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x192>
 801e1a2:	43eb      	mvns	r3, r5
 801e1a4:	fa1f f985 	uxth.w	r9, r5
 801e1a8:	b2db      	uxtb	r3, r3
 801e1aa:	42b0      	cmp	r0, r6
 801e1ac:	d266      	bcs.n	801e27c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 801e1ae:	eb00 0a0e 	add.w	sl, r0, lr
 801e1b2:	4550      	cmp	r0, sl
 801e1b4:	4621      	mov	r1, r4
 801e1b6:	f104 0403 	add.w	r4, r4, #3
 801e1ba:	d25b      	bcs.n	801e274 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d0>
 801e1bc:	8802      	ldrh	r2, [r0, #0]
 801e1be:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 801e1c2:	ea4f 2822 	mov.w	r8, r2, asr #8
 801e1c6:	fb11 f109 	smulbb	r1, r1, r9
 801e1ca:	10d5      	asrs	r5, r2, #3
 801e1cc:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
 801e1d0:	00d2      	lsls	r2, r2, #3
 801e1d2:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801e1d6:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 801e1da:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 801e1de:	fb08 1803 	mla	r8, r8, r3, r1
 801e1e2:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 801e1e6:	b2d2      	uxtb	r2, r2
 801e1e8:	fb11 f109 	smulbb	r1, r1, r9
 801e1ec:	fa1f f888 	uxth.w	r8, r8
 801e1f0:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801e1f4:	fb05 1503 	mla	r5, r5, r3, r1
 801e1f8:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 801e1fc:	fb11 f109 	smulbb	r1, r1, r9
 801e200:	b2ad      	uxth	r5, r5
 801e202:	fb02 1203 	mla	r2, r2, r3, r1
 801e206:	f108 0101 	add.w	r1, r8, #1
 801e20a:	b292      	uxth	r2, r2
 801e20c:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 801e210:	1c51      	adds	r1, r2, #1
 801e212:	f408 4878 	and.w	r8, r8, #63488	; 0xf800
 801e216:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801e21a:	1c69      	adds	r1, r5, #1
 801e21c:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 801e220:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801e224:	096d      	lsrs	r5, r5, #5
 801e226:	ea42 0208 	orr.w	r2, r2, r8
 801e22a:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801e22e:	432a      	orrs	r2, r5
 801e230:	f820 2b02 	strh.w	r2, [r0], #2
 801e234:	e7bd      	b.n	801e1b2 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x10e>
 801e236:	4a14      	ldr	r2, [pc, #80]	; (801e288 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e4>)
 801e238:	42b0      	cmp	r0, r6
 801e23a:	d21f      	bcs.n	801e27c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 801e23c:	eb00 050e 	add.w	r5, r0, lr
 801e240:	42a8      	cmp	r0, r5
 801e242:	4621      	mov	r1, r4
 801e244:	f104 0403 	add.w	r4, r4, #3
 801e248:	d210      	bcs.n	801e26c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1c8>
 801e24a:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 801e24e:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 801e252:	00db      	lsls	r3, r3, #3
 801e254:	ea02 2101 	and.w	r1, r2, r1, lsl #8
 801e258:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801e25c:	430b      	orrs	r3, r1
 801e25e:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 801e262:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
 801e266:	f820 3b02 	strh.w	r3, [r0], #2
 801e26a:	e7e9      	b.n	801e240 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x19c>
 801e26c:	4438      	add	r0, r7
 801e26e:	eb01 040c 	add.w	r4, r1, ip
 801e272:	e7e1      	b.n	801e238 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x194>
 801e274:	4438      	add	r0, r7
 801e276:	eb01 040c 	add.w	r4, r1, ip
 801e27a:	e796      	b.n	801e1aa <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x106>
 801e27c:	4b03      	ldr	r3, [pc, #12]	; (801e28c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>)
 801e27e:	6818      	ldr	r0, [r3, #0]
 801e280:	6803      	ldr	r3, [r0, #0]
 801e282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e284:	4798      	blx	r3
 801e286:	e768      	b.n	801e15a <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xb6>
 801e288:	fffff800 	.word	0xfffff800
 801e28c:	20024428 	.word	0x20024428
 801e290:	20024422 	.word	0x20024422

0801e294 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801e294:	b4f0      	push	{r4, r5, r6, r7}
 801e296:	4616      	mov	r6, r2
 801e298:	461c      	mov	r4, r3
 801e29a:	460d      	mov	r5, r1
 801e29c:	9a04      	ldr	r2, [sp, #16]
 801e29e:	2e01      	cmp	r6, #1
 801e2a0:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801e2a4:	f89d 7018 	ldrb.w	r7, [sp, #24]
 801e2a8:	d012      	beq.n	801e2d0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x3c>
 801e2aa:	d303      	bcc.n	801e2b4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x20>
 801e2ac:	2e02      	cmp	r6, #2
 801e2ae:	d00a      	beq.n	801e2c6 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x32>
 801e2b0:	bcf0      	pop	{r4, r5, r6, r7}
 801e2b2:	4770      	bx	lr
 801e2b4:	6805      	ldr	r5, [r0, #0]
 801e2b6:	e9cd 3704 	strd	r3, r7, [sp, #16]
 801e2ba:	68ed      	ldr	r5, [r5, #12]
 801e2bc:	4613      	mov	r3, r2
 801e2be:	4622      	mov	r2, r4
 801e2c0:	46ac      	mov	ip, r5
 801e2c2:	bcf0      	pop	{r4, r5, r6, r7}
 801e2c4:	4760      	bx	ip
 801e2c6:	4621      	mov	r1, r4
 801e2c8:	4628      	mov	r0, r5
 801e2ca:	bcf0      	pop	{r4, r5, r6, r7}
 801e2cc:	f7ff bd94 	b.w	801ddf8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801e2d0:	4621      	mov	r1, r4
 801e2d2:	4628      	mov	r0, r5
 801e2d4:	bcf0      	pop	{r4, r5, r6, r7}
 801e2d6:	f7ff bee5 	b.w	801e0a4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
	...

0801e2dc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801e2dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e2e0:	b093      	sub	sp, #76	; 0x4c
 801e2e2:	4681      	mov	r9, r0
 801e2e4:	4688      	mov	r8, r1
 801e2e6:	6810      	ldr	r0, [r2, #0]
 801e2e8:	6851      	ldr	r1, [r2, #4]
 801e2ea:	ac0e      	add	r4, sp, #56	; 0x38
 801e2ec:	4616      	mov	r6, r2
 801e2ee:	f89d a070 	ldrb.w	sl, [sp, #112]	; 0x70
 801e2f2:	4f6b      	ldr	r7, [pc, #428]	; (801e4a0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 801e2f4:	c403      	stmia	r4!, {r0, r1}
 801e2f6:	6818      	ldr	r0, [r3, #0]
 801e2f8:	ac10      	add	r4, sp, #64	; 0x40
 801e2fa:	6859      	ldr	r1, [r3, #4]
 801e2fc:	c403      	stmia	r4!, {r0, r1}
 801e2fe:	a80e      	add	r0, sp, #56	; 0x38
 801e300:	f7f9 fe4a 	bl	8017f98 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e304:	4631      	mov	r1, r6
 801e306:	a810      	add	r0, sp, #64	; 0x40
 801e308:	4e66      	ldr	r6, [pc, #408]	; (801e4a4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 801e30a:	f7f9 fe6d 	bl	8017fe8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e30e:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801e312:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 801e316:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 801e31a:	6830      	ldr	r0, [r6, #0]
 801e31c:	fb11 2103 	smlabb	r1, r1, r3, r2
 801e320:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	; 0x44
 801e324:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	; 0x46
 801e328:	4489      	add	r9, r1
 801e32a:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 801e32e:	440a      	add	r2, r1
 801e330:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801e334:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801e338:	4413      	add	r3, r2
 801e33a:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801e33e:	6803      	ldr	r3, [r0, #0]
 801e340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e342:	4798      	blx	r3
 801e344:	f010 0f80 	tst.w	r0, #128	; 0x80
 801e348:	6830      	ldr	r0, [r6, #0]
 801e34a:	d01d      	beq.n	801e388 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 801e34c:	2200      	movs	r2, #0
 801e34e:	6801      	ldr	r1, [r0, #0]
 801e350:	b2a4      	uxth	r4, r4
 801e352:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801e356:	b2ad      	uxth	r5, r5
 801e358:	e9cd 2208 	strd	r2, r2, [sp, #32]
 801e35c:	220b      	movs	r2, #11
 801e35e:	9207      	str	r2, [sp, #28]
 801e360:	883a      	ldrh	r2, [r7, #0]
 801e362:	9502      	str	r5, [sp, #8]
 801e364:	9206      	str	r2, [sp, #24]
 801e366:	2201      	movs	r2, #1
 801e368:	9401      	str	r4, [sp, #4]
 801e36a:	e9cd a204 	strd	sl, r2, [sp, #16]
 801e36e:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 801e372:	9203      	str	r2, [sp, #12]
 801e374:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801e378:	9200      	str	r2, [sp, #0]
 801e37a:	4642      	mov	r2, r8
 801e37c:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 801e37e:	4649      	mov	r1, r9
 801e380:	47a0      	blx	r4
 801e382:	b013      	add	sp, #76	; 0x4c
 801e384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e388:	6803      	ldr	r3, [r0, #0]
 801e38a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e38c:	4798      	blx	r3
 801e38e:	883b      	ldrh	r3, [r7, #0]
 801e390:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 801e394:	f04f 0e04 	mov.w	lr, #4
 801e398:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
 801e39c:	435d      	muls	r5, r3
 801e39e:	fb03 1202 	mla	r2, r3, r2, r1
 801e3a2:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801e3a6:	eb00 0245 	add.w	r2, r0, r5, lsl #1
 801e3aa:	920c      	str	r2, [sp, #48]	; 0x30
 801e3ac:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 801e3b0:	1b12      	subs	r2, r2, r4
 801e3b2:	920d      	str	r2, [sp, #52]	; 0x34
 801e3b4:	0062      	lsls	r2, r4, #1
 801e3b6:	1b1c      	subs	r4, r3, r4
 801e3b8:	920a      	str	r2, [sp, #40]	; 0x28
 801e3ba:	0063      	lsls	r3, r4, #1
 801e3bc:	930b      	str	r3, [sp, #44]	; 0x2c
 801e3be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e3c0:	4298      	cmp	r0, r3
 801e3c2:	d266      	bcs.n	801e492 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b6>
 801e3c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e3c6:	eb00 0b03 	add.w	fp, r0, r3
 801e3ca:	4558      	cmp	r0, fp
 801e3cc:	d25c      	bcs.n	801e488 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 801e3ce:	f819 3b01 	ldrb.w	r3, [r9], #1
 801e3d2:	fb1e e303 	smlabb	r3, lr, r3, lr
 801e3d6:	f858 2003 	ldr.w	r2, [r8, r3]
 801e3da:	0e11      	lsrs	r1, r2, #24
 801e3dc:	d012      	beq.n	801e404 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801e3de:	29ff      	cmp	r1, #255	; 0xff
 801e3e0:	ea4f 2712 	mov.w	r7, r2, lsr #8
 801e3e4:	d110      	bne.n	801e408 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801e3e6:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801e3ea:	d10d      	bne.n	801e408 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801e3ec:	0953      	lsrs	r3, r2, #5
 801e3ee:	f427 67ff 	bic.w	r7, r7, #2040	; 0x7f8
 801e3f2:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801e3f6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801e3fa:	f027 0707 	bic.w	r7, r7, #7
 801e3fe:	431f      	orrs	r7, r3
 801e400:	433a      	orrs	r2, r7
 801e402:	8002      	strh	r2, [r0, #0]
 801e404:	3002      	adds	r0, #2
 801e406:	e7e0      	b.n	801e3ca <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xee>
 801e408:	fb0a f101 	mul.w	r1, sl, r1
 801e40c:	8806      	ldrh	r6, [r0, #0]
 801e40e:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 801e412:	b2d2      	uxtb	r2, r2
 801e414:	1c4b      	adds	r3, r1, #1
 801e416:	1235      	asrs	r5, r6, #8
 801e418:	10f4      	asrs	r4, r6, #3
 801e41a:	eb03 2321 	add.w	r3, r3, r1, asr #8
 801e41e:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801e422:	00f6      	lsls	r6, r6, #3
 801e424:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 801e428:	121b      	asrs	r3, r3, #8
 801e42a:	b2f6      	uxtb	r6, r6
 801e42c:	b299      	uxth	r1, r3
 801e42e:	43db      	mvns	r3, r3
 801e430:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 801e434:	fb1c fc01 	smulbb	ip, ip, r1
 801e438:	b2db      	uxtb	r3, r3
 801e43a:	fb12 f201 	smulbb	r2, r2, r1
 801e43e:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801e442:	fb05 c503 	mla	r5, r5, r3, ip
 801e446:	b2ff      	uxtb	r7, r7
 801e448:	fb06 2203 	mla	r2, r6, r3, r2
 801e44c:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 801e450:	fb17 f701 	smulbb	r7, r7, r1
 801e454:	b2ad      	uxth	r5, r5
 801e456:	b292      	uxth	r2, r2
 801e458:	fb04 7403 	mla	r4, r4, r3, r7
 801e45c:	f105 0c01 	add.w	ip, r5, #1
 801e460:	1c57      	adds	r7, r2, #1
 801e462:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 801e466:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 801e46a:	b2a4      	uxth	r4, r4
 801e46c:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801e470:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801e474:	433d      	orrs	r5, r7
 801e476:	1c67      	adds	r7, r4, #1
 801e478:	eb07 2414 	add.w	r4, r7, r4, lsr #8
 801e47c:	0964      	lsrs	r4, r4, #5
 801e47e:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 801e482:	4325      	orrs	r5, r4
 801e484:	8005      	strh	r5, [r0, #0]
 801e486:	e7bd      	b.n	801e404 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801e488:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e48a:	4418      	add	r0, r3
 801e48c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e48e:	4499      	add	r9, r3
 801e490:	e795      	b.n	801e3be <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xe2>
 801e492:	4b04      	ldr	r3, [pc, #16]	; (801e4a4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 801e494:	6818      	ldr	r0, [r3, #0]
 801e496:	6803      	ldr	r3, [r0, #0]
 801e498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e49a:	4798      	blx	r3
 801e49c:	e771      	b.n	801e382 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xa6>
 801e49e:	bf00      	nop
 801e4a0:	20024422 	.word	0x20024422
 801e4a4:	20024428 	.word	0x20024428

0801e4a8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 801e4a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e4ac:	b087      	sub	sp, #28
 801e4ae:	4680      	mov	r8, r0
 801e4b0:	460d      	mov	r5, r1
 801e4b2:	4614      	mov	r4, r2
 801e4b4:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
 801e4b8:	2e00      	cmp	r6, #0
 801e4ba:	f000 80b9 	beq.w	801e630 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x188>
 801e4be:	6810      	ldr	r0, [r2, #0]
 801e4c0:	af02      	add	r7, sp, #8
 801e4c2:	6851      	ldr	r1, [r2, #4]
 801e4c4:	c703      	stmia	r7!, {r0, r1}
 801e4c6:	6818      	ldr	r0, [r3, #0]
 801e4c8:	af04      	add	r7, sp, #16
 801e4ca:	6859      	ldr	r1, [r3, #4]
 801e4cc:	c703      	stmia	r7!, {r0, r1}
 801e4ce:	a802      	add	r0, sp, #8
 801e4d0:	f7f9 fd62 	bl	8017f98 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e4d4:	4621      	mov	r1, r4
 801e4d6:	a804      	add	r0, sp, #16
 801e4d8:	f7f9 fd86 	bl	8017fe8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e4dc:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801e4e0:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801e4e4:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 801e4e8:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 801e4ec:	fb14 2103 	smlabb	r1, r4, r3, r2
 801e4f0:	eb08 0401 	add.w	r4, r8, r1
 801e4f4:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801e4f8:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 801e4fc:	440a      	add	r2, r1
 801e4fe:	ea4f 0a48 	mov.w	sl, r8, lsl #1
 801e502:	f8ad 2010 	strh.w	r2, [sp, #16]
 801e506:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801e50a:	4413      	add	r3, r2
 801e50c:	f8ad 3012 	strh.w	r3, [sp, #18]
 801e510:	4b49      	ldr	r3, [pc, #292]	; (801e638 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 801e512:	6818      	ldr	r0, [r3, #0]
 801e514:	6803      	ldr	r3, [r0, #0]
 801e516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e518:	4798      	blx	r3
 801e51a:	4b48      	ldr	r3, [pc, #288]	; (801e63c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x194>)
 801e51c:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 801e520:	2eff      	cmp	r6, #255	; 0xff
 801e522:	881a      	ldrh	r2, [r3, #0]
 801e524:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 801e528:	fb02 c101 	mla	r1, r2, r1, ip
 801e52c:	fb02 f207 	mul.w	r2, r2, r7
 801e530:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 801e534:	f105 0104 	add.w	r1, r5, #4
 801e538:	461d      	mov	r5, r3
 801e53a:	d05a      	beq.n	801e5f2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14a>
 801e53c:	f1c6 0eff 	rsb	lr, r6, #255	; 0xff
 801e540:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801e544:	b2b6      	uxth	r6, r6
 801e546:	9301      	str	r3, [sp, #4]
 801e548:	fa1f fe8e 	uxth.w	lr, lr
 801e54c:	4282      	cmp	r2, r0
 801e54e:	d96a      	bls.n	801e626 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 801e550:	eb00 0b0a 	add.w	fp, r0, sl
 801e554:	4583      	cmp	fp, r0
 801e556:	d940      	bls.n	801e5da <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x132>
 801e558:	8805      	ldrh	r5, [r0, #0]
 801e55a:	f814 3b01 	ldrb.w	r3, [r4], #1
 801e55e:	122f      	asrs	r7, r5, #8
 801e560:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801e564:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801e568:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801e56c:	00ed      	lsls	r5, r5, #3
 801e56e:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801e572:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801e576:	fb17 f70e 	smulbb	r7, r7, lr
 801e57a:	b2ed      	uxtb	r5, r5
 801e57c:	fb19 f90e 	smulbb	r9, r9, lr
 801e580:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801e584:	fb15 f50e 	smulbb	r5, r5, lr
 801e588:	fb0c 7c06 	mla	ip, ip, r6, r7
 801e58c:	10df      	asrs	r7, r3, #3
 801e58e:	00db      	lsls	r3, r3, #3
 801e590:	fa1f fc8c 	uxth.w	ip, ip
 801e594:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801e598:	b2db      	uxtb	r3, r3
 801e59a:	fb07 9706 	mla	r7, r7, r6, r9
 801e59e:	f10c 0901 	add.w	r9, ip, #1
 801e5a2:	fb03 5306 	mla	r3, r3, r6, r5
 801e5a6:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 801e5aa:	b29b      	uxth	r3, r3
 801e5ac:	f40c 4978 	and.w	r9, ip, #63488	; 0xf800
 801e5b0:	b2bf      	uxth	r7, r7
 801e5b2:	f103 0c01 	add.w	ip, r3, #1
 801e5b6:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801e5ba:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801e5be:	ea4c 0c09 	orr.w	ip, ip, r9
 801e5c2:	f107 0901 	add.w	r9, r7, #1
 801e5c6:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 801e5ca:	097f      	lsrs	r7, r7, #5
 801e5cc:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801e5d0:	ea4c 0c07 	orr.w	ip, ip, r7
 801e5d4:	f820 cb02 	strh.w	ip, [r0], #2
 801e5d8:	e7bc      	b.n	801e554 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xac>
 801e5da:	9b01      	ldr	r3, [sp, #4]
 801e5dc:	881b      	ldrh	r3, [r3, #0]
 801e5de:	eba3 0308 	sub.w	r3, r3, r8
 801e5e2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801e5e6:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801e5ea:	eba3 0308 	sub.w	r3, r3, r8
 801e5ee:	441c      	add	r4, r3
 801e5f0:	e7ac      	b.n	801e54c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xa4>
 801e5f2:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801e5f6:	4282      	cmp	r2, r0
 801e5f8:	d915      	bls.n	801e626 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 801e5fa:	eb00 060a 	add.w	r6, r0, sl
 801e5fe:	4286      	cmp	r6, r0
 801e600:	d906      	bls.n	801e610 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x168>
 801e602:	f814 3b01 	ldrb.w	r3, [r4], #1
 801e606:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801e60a:	f820 3b02 	strh.w	r3, [r0], #2
 801e60e:	e7f6      	b.n	801e5fe <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x156>
 801e610:	882b      	ldrh	r3, [r5, #0]
 801e612:	eba3 0308 	sub.w	r3, r3, r8
 801e616:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801e61a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801e61e:	eba3 0308 	sub.w	r3, r3, r8
 801e622:	441c      	add	r4, r3
 801e624:	e7e7      	b.n	801e5f6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14e>
 801e626:	4b04      	ldr	r3, [pc, #16]	; (801e638 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 801e628:	6818      	ldr	r0, [r3, #0]
 801e62a:	6803      	ldr	r3, [r0, #0]
 801e62c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e62e:	4798      	blx	r3
 801e630:	b007      	add	sp, #28
 801e632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e636:	bf00      	nop
 801e638:	20024428 	.word	0x20024428
 801e63c:	20024422 	.word	0x20024422

0801e640 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 801e640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e644:	b091      	sub	sp, #68	; 0x44
 801e646:	4680      	mov	r8, r0
 801e648:	460f      	mov	r7, r1
 801e64a:	4614      	mov	r4, r2
 801e64c:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
 801e650:	2d00      	cmp	r5, #0
 801e652:	d051      	beq.n	801e6f8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 801e654:	6810      	ldr	r0, [r2, #0]
 801e656:	ae0c      	add	r6, sp, #48	; 0x30
 801e658:	6851      	ldr	r1, [r2, #4]
 801e65a:	f8df 9200 	ldr.w	r9, [pc, #512]	; 801e85c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>
 801e65e:	c603      	stmia	r6!, {r0, r1}
 801e660:	6818      	ldr	r0, [r3, #0]
 801e662:	ae0e      	add	r6, sp, #56	; 0x38
 801e664:	6859      	ldr	r1, [r3, #4]
 801e666:	c603      	stmia	r6!, {r0, r1}
 801e668:	a80c      	add	r0, sp, #48	; 0x30
 801e66a:	f7f9 fc95 	bl	8017f98 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e66e:	4621      	mov	r1, r4
 801e670:	a80e      	add	r0, sp, #56	; 0x38
 801e672:	f7f9 fcb9 	bl	8017fe8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e676:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801e67a:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801e67e:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801e682:	f8d9 0000 	ldr.w	r0, [r9]
 801e686:	fb11 2103 	smlabb	r1, r1, r3, r2
 801e68a:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	; 0x3c
 801e68e:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
 801e692:	eb08 0401 	add.w	r4, r8, r1
 801e696:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801e69a:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 801e860 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x220>
 801e69e:	440a      	add	r2, r1
 801e6a0:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801e6a4:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801e6a8:	4413      	add	r3, r2
 801e6aa:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801e6ae:	6803      	ldr	r3, [r0, #0]
 801e6b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e6b2:	4798      	blx	r3
 801e6b4:	f010 0f80 	tst.w	r0, #128	; 0x80
 801e6b8:	f8d9 0000 	ldr.w	r0, [r9]
 801e6bc:	d01f      	beq.n	801e6fe <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xbe>
 801e6be:	2200      	movs	r2, #0
 801e6c0:	6801      	ldr	r1, [r0, #0]
 801e6c2:	b2b6      	uxth	r6, r6
 801e6c4:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801e6c8:	e9cd 2208 	strd	r2, r2, [sp, #32]
 801e6cc:	220b      	movs	r2, #11
 801e6ce:	9207      	str	r2, [sp, #28]
 801e6d0:	f8b8 2000 	ldrh.w	r2, [r8]
 801e6d4:	9601      	str	r6, [sp, #4]
 801e6d6:	9206      	str	r2, [sp, #24]
 801e6d8:	2201      	movs	r2, #1
 801e6da:	e9cd 5204 	strd	r5, r2, [sp, #16]
 801e6de:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801e6e2:	9203      	str	r2, [sp, #12]
 801e6e4:	fa1f f28a 	uxth.w	r2, sl
 801e6e8:	9202      	str	r2, [sp, #8]
 801e6ea:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801e6ee:	9200      	str	r2, [sp, #0]
 801e6f0:	463a      	mov	r2, r7
 801e6f2:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 801e6f4:	4621      	mov	r1, r4
 801e6f6:	47a8      	blx	r5
 801e6f8:	b011      	add	sp, #68	; 0x44
 801e6fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e6fe:	6803      	ldr	r3, [r0, #0]
 801e700:	ea4f 0946 	mov.w	r9, r6, lsl #1
 801e704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e706:	4798      	blx	r3
 801e708:	f8b8 2000 	ldrh.w	r2, [r8]
 801e70c:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801e710:	2dff      	cmp	r5, #255	; 0xff
 801e712:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 801e716:	fb0a fa02 	mul.w	sl, sl, r2
 801e71a:	fb02 1303 	mla	r3, r2, r3, r1
 801e71e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801e722:	d062      	beq.n	801e7ea <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
 801e724:	ea6f 0c05 	mvn.w	ip, r5
 801e728:	eb00 034a 	add.w	r3, r0, sl, lsl #1
 801e72c:	b2ad      	uxth	r5, r5
 801e72e:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 801e732:	fa5f fc8c 	uxtb.w	ip, ip
 801e736:	930a      	str	r3, [sp, #40]	; 0x28
 801e738:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e73a:	4298      	cmp	r0, r3
 801e73c:	f080 8085 	bcs.w	801e84a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 801e740:	eb00 0b09 	add.w	fp, r0, r9
 801e744:	4558      	cmp	r0, fp
 801e746:	d246      	bcs.n	801e7d6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x196>
 801e748:	f814 eb01 	ldrb.w	lr, [r4], #1
 801e74c:	2303      	movs	r3, #3
 801e74e:	2204      	movs	r2, #4
 801e750:	fb13 2e0e 	smlabb	lr, r3, lr, r2
 801e754:	8803      	ldrh	r3, [r0, #0]
 801e756:	eb07 0a0e 	add.w	sl, r7, lr
 801e75a:	1219      	asrs	r1, r3, #8
 801e75c:	10da      	asrs	r2, r3, #3
 801e75e:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801e762:	f89a 8002 	ldrb.w	r8, [sl, #2]
 801e766:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801e76a:	00db      	lsls	r3, r3, #3
 801e76c:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801e770:	fb18 f805 	smulbb	r8, r8, r5
 801e774:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 801e778:	fb1e fe05 	smulbb	lr, lr, r5
 801e77c:	b2db      	uxtb	r3, r3
 801e77e:	fb01 810c 	mla	r1, r1, ip, r8
 801e782:	f89a 8001 	ldrb.w	r8, [sl, #1]
 801e786:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 801e78a:	fb18 f805 	smulbb	r8, r8, r5
 801e78e:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 801e792:	b289      	uxth	r1, r1
 801e794:	fb02 820c 	mla	r2, r2, ip, r8
 801e798:	fb03 e30c 	mla	r3, r3, ip, lr
 801e79c:	f101 0801 	add.w	r8, r1, #1
 801e7a0:	b292      	uxth	r2, r2
 801e7a2:	b29b      	uxth	r3, r3
 801e7a4:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801e7a8:	f102 0801 	add.w	r8, r2, #1
 801e7ac:	f103 0e01 	add.w	lr, r3, #1
 801e7b0:	eb08 2812 	add.w	r8, r8, r2, lsr #8
 801e7b4:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 801e7b8:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 801e7bc:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801e7c0:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 801e7c4:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801e7c8:	ea4e 0101 	orr.w	r1, lr, r1
 801e7cc:	ea41 0108 	orr.w	r1, r1, r8
 801e7d0:	f820 1b02 	strh.w	r1, [r0], #2
 801e7d4:	e7b6      	b.n	801e744 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x104>
 801e7d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e7d8:	881b      	ldrh	r3, [r3, #0]
 801e7da:	1b9b      	subs	r3, r3, r6
 801e7dc:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801e7e0:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801e7e4:	1b9b      	subs	r3, r3, r6
 801e7e6:	441c      	add	r4, r3
 801e7e8:	e7a6      	b.n	801e738 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xf8>
 801e7ea:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
 801e7ee:	2203      	movs	r2, #3
 801e7f0:	2504      	movs	r5, #4
 801e7f2:	4919      	ldr	r1, [pc, #100]	; (801e858 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x218>)
 801e7f4:	4550      	cmp	r0, sl
 801e7f6:	d228      	bcs.n	801e84a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 801e7f8:	eb00 0c09 	add.w	ip, r0, r9
 801e7fc:	4560      	cmp	r0, ip
 801e7fe:	4623      	mov	r3, r4
 801e800:	d219      	bcs.n	801e836 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1f6>
 801e802:	f893 e000 	ldrb.w	lr, [r3]
 801e806:	3401      	adds	r4, #1
 801e808:	fb12 5e0e 	smlabb	lr, r2, lr, r5
 801e80c:	eb07 0b0e 	add.w	fp, r7, lr
 801e810:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801e814:	f89b 3002 	ldrb.w	r3, [fp, #2]
 801e818:	f89b b001 	ldrb.w	fp, [fp, #1]
 801e81c:	ea01 2303 	and.w	r3, r1, r3, lsl #8
 801e820:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 801e824:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801e828:	ea43 030b 	orr.w	r3, r3, fp
 801e82c:	ea43 03de 	orr.w	r3, r3, lr, lsr #3
 801e830:	f820 3b02 	strh.w	r3, [r0], #2
 801e834:	e7e2      	b.n	801e7fc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1bc>
 801e836:	f8b8 3000 	ldrh.w	r3, [r8]
 801e83a:	1b9b      	subs	r3, r3, r6
 801e83c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801e840:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801e844:	1b9b      	subs	r3, r3, r6
 801e846:	441c      	add	r4, r3
 801e848:	e7d4      	b.n	801e7f4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 801e84a:	4b04      	ldr	r3, [pc, #16]	; (801e85c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>)
 801e84c:	6818      	ldr	r0, [r3, #0]
 801e84e:	6803      	ldr	r3, [r0, #0]
 801e850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e852:	4798      	blx	r3
 801e854:	e750      	b.n	801e6f8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 801e856:	bf00      	nop
 801e858:	fffff800 	.word	0xfffff800
 801e85c:	20024428 	.word	0x20024428
 801e860:	20024422 	.word	0x20024422

0801e864 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801e864:	b430      	push	{r4, r5}
 801e866:	780d      	ldrb	r5, [r1, #0]
 801e868:	f89d 4008 	ldrb.w	r4, [sp, #8]
 801e86c:	2d01      	cmp	r5, #1
 801e86e:	d00a      	beq.n	801e886 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x22>
 801e870:	d305      	bcc.n	801e87e <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 801e872:	2d02      	cmp	r5, #2
 801e874:	d10b      	bne.n	801e88e <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x2a>
 801e876:	9402      	str	r4, [sp, #8]
 801e878:	bc30      	pop	{r4, r5}
 801e87a:	f7ff be15 	b.w	801e4a8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 801e87e:	9402      	str	r4, [sp, #8]
 801e880:	bc30      	pop	{r4, r5}
 801e882:	f7ff bd2b 	b.w	801e2dc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801e886:	9402      	str	r4, [sp, #8]
 801e888:	bc30      	pop	{r4, r5}
 801e88a:	f7ff bed9 	b.w	801e640 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 801e88e:	bc30      	pop	{r4, r5}
 801e890:	4770      	bx	lr
	...

0801e894 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 801e894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e898:	b087      	sub	sp, #28
 801e89a:	4604      	mov	r4, r0
 801e89c:	460e      	mov	r6, r1
 801e89e:	6810      	ldr	r0, [r2, #0]
 801e8a0:	6851      	ldr	r1, [r2, #4]
 801e8a2:	ad02      	add	r5, sp, #8
 801e8a4:	4617      	mov	r7, r2
 801e8a6:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 801e8aa:	f8df 9230 	ldr.w	r9, [pc, #560]	; 801eadc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
 801e8ae:	c503      	stmia	r5!, {r0, r1}
 801e8b0:	6818      	ldr	r0, [r3, #0]
 801e8b2:	ad04      	add	r5, sp, #16
 801e8b4:	6859      	ldr	r1, [r3, #4]
 801e8b6:	c503      	stmia	r5!, {r0, r1}
 801e8b8:	a802      	add	r0, sp, #8
 801e8ba:	f7f9 fb6d 	bl	8017f98 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e8be:	4639      	mov	r1, r7
 801e8c0:	a804      	add	r0, sp, #16
 801e8c2:	f7f9 fb91 	bl	8017fe8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e8c6:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801e8ca:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801e8ce:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801e8d2:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 801e8d6:	fb11 2103 	smlabb	r1, r1, r3, r2
 801e8da:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 801e8de:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 801e8e2:	440e      	add	r6, r1
 801e8e4:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801e8e8:	440a      	add	r2, r1
 801e8ea:	f8ad 2010 	strh.w	r2, [sp, #16]
 801e8ee:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801e8f2:	4413      	add	r3, r2
 801e8f4:	f8ad 3012 	strh.w	r3, [sp, #18]
 801e8f8:	4b77      	ldr	r3, [pc, #476]	; (801ead8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 801e8fa:	6818      	ldr	r0, [r3, #0]
 801e8fc:	6803      	ldr	r3, [r0, #0]
 801e8fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e900:	4798      	blx	r3
 801e902:	f8b9 b000 	ldrh.w	fp, [r9]
 801e906:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801e90a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801e90e:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801e912:	fb05 f50b 	mul.w	r5, r5, fp
 801e916:	fb0b 2303 	mla	r3, fp, r3, r2
 801e91a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801e91e:	ea4f 0348 	mov.w	r3, r8, lsl #1
 801e922:	9300      	str	r3, [sp, #0]
 801e924:	d069      	beq.n	801e9fa <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x166>
 801e926:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
 801e92a:	4558      	cmp	r0, fp
 801e92c:	f080 80cc 	bcs.w	801eac8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 801e930:	9b00      	ldr	r3, [sp, #0]
 801e932:	4631      	mov	r1, r6
 801e934:	18c3      	adds	r3, r0, r3
 801e936:	9301      	str	r3, [sp, #4]
 801e938:	9b01      	ldr	r3, [sp, #4]
 801e93a:	4298      	cmp	r0, r3
 801e93c:	d24f      	bcs.n	801e9de <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14a>
 801e93e:	f811 2b01 	ldrb.w	r2, [r1], #1
 801e942:	2a00      	cmp	r2, #0
 801e944:	d048      	beq.n	801e9d8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 801e946:	fb0a f202 	mul.w	r2, sl, r2
 801e94a:	1c53      	adds	r3, r2, #1
 801e94c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801e950:	121b      	asrs	r3, r3, #8
 801e952:	d041      	beq.n	801e9d8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 801e954:	8802      	ldrh	r2, [r0, #0]
 801e956:	b29e      	uxth	r6, r3
 801e958:	f8b4 c000 	ldrh.w	ip, [r4]
 801e95c:	43db      	mvns	r3, r3
 801e95e:	1215      	asrs	r5, r2, #8
 801e960:	b2db      	uxtb	r3, r3
 801e962:	ea4f 272c 	mov.w	r7, ip, asr #8
 801e966:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801e96a:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 801e96e:	fb15 f503 	smulbb	r5, r5, r3
 801e972:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801e976:	00d2      	lsls	r2, r2, #3
 801e978:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 801e97c:	fb07 5706 	mla	r7, r7, r6, r5
 801e980:	ea4f 05ec 	mov.w	r5, ip, asr #3
 801e984:	b2d2      	uxtb	r2, r2
 801e986:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801e98a:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801e98e:	fb1e fe03 	smulbb	lr, lr, r3
 801e992:	b2bf      	uxth	r7, r7
 801e994:	fb12 f203 	smulbb	r2, r2, r3
 801e998:	fa5f fc8c 	uxtb.w	ip, ip
 801e99c:	fb05 e506 	mla	r5, r5, r6, lr
 801e9a0:	f107 0e01 	add.w	lr, r7, #1
 801e9a4:	fb0c 2c06 	mla	ip, ip, r6, r2
 801e9a8:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 801e9ac:	fa1f fc8c 	uxth.w	ip, ip
 801e9b0:	f407 4e78 	and.w	lr, r7, #63488	; 0xf800
 801e9b4:	b2ad      	uxth	r5, r5
 801e9b6:	f10c 0701 	add.w	r7, ip, #1
 801e9ba:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801e9be:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801e9c2:	ea47 070e 	orr.w	r7, r7, lr
 801e9c6:	f105 0e01 	add.w	lr, r5, #1
 801e9ca:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 801e9ce:	096d      	lsrs	r5, r5, #5
 801e9d0:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801e9d4:	432f      	orrs	r7, r5
 801e9d6:	8007      	strh	r7, [r0, #0]
 801e9d8:	3002      	adds	r0, #2
 801e9da:	3402      	adds	r4, #2
 801e9dc:	e7ac      	b.n	801e938 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
 801e9de:	f8b9 3000 	ldrh.w	r3, [r9]
 801e9e2:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 801e9e6:	eba3 0308 	sub.w	r3, r3, r8
 801e9ea:	eba6 0608 	sub.w	r6, r6, r8
 801e9ee:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801e9f2:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 801e9f6:	440e      	add	r6, r1
 801e9f8:	e797      	b.n	801e92a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
 801e9fa:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 801e9fe:	42a8      	cmp	r0, r5
 801ea00:	d262      	bcs.n	801eac8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 801ea02:	9b00      	ldr	r3, [sp, #0]
 801ea04:	4631      	mov	r1, r6
 801ea06:	eb00 0b03 	add.w	fp, r0, r3
 801ea0a:	4558      	cmp	r0, fp
 801ea0c:	d24e      	bcs.n	801eaac <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
 801ea0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ea12:	b12b      	cbz	r3, 801ea20 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 801ea14:	2bff      	cmp	r3, #255	; 0xff
 801ea16:	f8b4 e000 	ldrh.w	lr, [r4]
 801ea1a:	d104      	bne.n	801ea26 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x192>
 801ea1c:	f8a0 e000 	strh.w	lr, [r0]
 801ea20:	3002      	adds	r0, #2
 801ea22:	3402      	adds	r4, #2
 801ea24:	e7f1      	b.n	801ea0a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x176>
 801ea26:	8802      	ldrh	r2, [r0, #0]
 801ea28:	b29f      	uxth	r7, r3
 801ea2a:	43db      	mvns	r3, r3
 801ea2c:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801ea30:	1216      	asrs	r6, r2, #8
 801ea32:	b2db      	uxtb	r3, r3
 801ea34:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801ea38:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801ea3c:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 801ea40:	00d2      	lsls	r2, r2, #3
 801ea42:	fb16 f603 	smulbb	r6, r6, r3
 801ea46:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801ea4a:	b2d2      	uxtb	r2, r2
 801ea4c:	fb0c 6c07 	mla	ip, ip, r7, r6
 801ea50:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801ea54:	fb1a fa03 	smulbb	sl, sl, r3
 801ea58:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801ea5c:	fa1f fc8c 	uxth.w	ip, ip
 801ea60:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801ea64:	fb12 f303 	smulbb	r3, r2, r3
 801ea68:	fa5f fe8e 	uxtb.w	lr, lr
 801ea6c:	fb06 a607 	mla	r6, r6, r7, sl
 801ea70:	f10c 0201 	add.w	r2, ip, #1
 801ea74:	fb0e 3307 	mla	r3, lr, r7, r3
 801ea78:	b2b6      	uxth	r6, r6
 801ea7a:	b29b      	uxth	r3, r3
 801ea7c:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801ea80:	f106 0a01 	add.w	sl, r6, #1
 801ea84:	f40c 4278 	and.w	r2, ip, #63488	; 0xf800
 801ea88:	f103 0c01 	add.w	ip, r3, #1
 801ea8c:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 801ea90:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801ea94:	0976      	lsrs	r6, r6, #5
 801ea96:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801ea9a:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801ea9e:	ea4c 0c02 	orr.w	ip, ip, r2
 801eaa2:	ea4c 0c06 	orr.w	ip, ip, r6
 801eaa6:	f8a0 c000 	strh.w	ip, [r0]
 801eaaa:	e7b9      	b.n	801ea20 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 801eaac:	f8b9 3000 	ldrh.w	r3, [r9]
 801eab0:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 801eab4:	eba3 0308 	sub.w	r3, r3, r8
 801eab8:	eba6 0608 	sub.w	r6, r6, r8
 801eabc:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801eac0:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 801eac4:	440e      	add	r6, r1
 801eac6:	e79a      	b.n	801e9fe <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x16a>
 801eac8:	4b03      	ldr	r3, [pc, #12]	; (801ead8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 801eaca:	6818      	ldr	r0, [r3, #0]
 801eacc:	6803      	ldr	r3, [r0, #0]
 801eace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ead0:	4798      	blx	r3
 801ead2:	b007      	add	sp, #28
 801ead4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ead8:	20024428 	.word	0x20024428
 801eadc:	20024422 	.word	0x20024422

0801eae0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801eae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eae4:	b089      	sub	sp, #36	; 0x24
 801eae6:	4682      	mov	sl, r0
 801eae8:	460f      	mov	r7, r1
 801eaea:	4691      	mov	r9, r2
 801eaec:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
 801eaf0:	4698      	mov	r8, r3
 801eaf2:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801eaf4:	2e00      	cmp	r6, #0
 801eaf6:	d036      	beq.n	801eb66 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801eaf8:	4608      	mov	r0, r1
 801eafa:	f7fc f86b 	bl	801abd4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801eafe:	4605      	mov	r5, r0
 801eb00:	4638      	mov	r0, r7
 801eb02:	f7fc f89b 	bl	801ac3c <_ZNK8touchgfx6Bitmap9getHeightEv>
 801eb06:	f8ad 000e 	strh.w	r0, [sp, #14]
 801eb0a:	4638      	mov	r0, r7
 801eb0c:	f8ad 9008 	strh.w	r9, [sp, #8]
 801eb10:	f8ad 500c 	strh.w	r5, [sp, #12]
 801eb14:	f8ad 800a 	strh.w	r8, [sp, #10]
 801eb18:	f7fc f948 	bl	801adac <_ZNK8touchgfx6Bitmap7getDataEv>
 801eb1c:	4605      	mov	r5, r0
 801eb1e:	4638      	mov	r0, r7
 801eb20:	f7fc f974 	bl	801ae0c <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801eb24:	4681      	mov	r9, r0
 801eb26:	4638      	mov	r0, r7
 801eb28:	f7fc f9c4 	bl	801aeb4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801eb2c:	280b      	cmp	r0, #11
 801eb2e:	d81a      	bhi.n	801eb66 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801eb30:	e8df f000 	tbb	[pc, r0]
 801eb34:	1906aebd 	.word	0x1906aebd
 801eb38:	19191919 	.word	0x19191919
 801eb3c:	b5191919 	.word	0xb5191919
 801eb40:	4bb0      	ldr	r3, [pc, #704]	; (801ee04 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x324>)
 801eb42:	6818      	ldr	r0, [r3, #0]
 801eb44:	6803      	ldr	r3, [r0, #0]
 801eb46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801eb48:	4798      	blx	r3
 801eb4a:	2eff      	cmp	r6, #255	; 0xff
 801eb4c:	d121      	bne.n	801eb92 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb2>
 801eb4e:	0683      	lsls	r3, r0, #26
 801eb50:	d41f      	bmi.n	801eb92 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb2>
 801eb52:	4638      	mov	r0, r7
 801eb54:	f7fc f8f2 	bl	801ad3c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801eb58:	b940      	cbnz	r0, 801eb6c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x8c>
 801eb5a:	4623      	mov	r3, r4
 801eb5c:	aa02      	add	r2, sp, #8
 801eb5e:	4629      	mov	r1, r5
 801eb60:	4650      	mov	r0, sl
 801eb62:	f7ff fa2f 	bl	801dfc4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 801eb66:	b009      	add	sp, #36	; 0x24
 801eb68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eb6c:	f10d 0818 	add.w	r8, sp, #24
 801eb70:	4639      	mov	r1, r7
 801eb72:	af04      	add	r7, sp, #16
 801eb74:	4640      	mov	r0, r8
 801eb76:	f7fc f895 	bl	801aca4 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801eb7a:	e898 0003 	ldmia.w	r8, {r0, r1}
 801eb7e:	e887 0003 	stmia.w	r7, {r0, r1}
 801eb82:	4638      	mov	r0, r7
 801eb84:	4621      	mov	r1, r4
 801eb86:	f7f6 fa4b 	bl	8015020 <_ZN8touchgfx4RectaNERKS0_>
 801eb8a:	4638      	mov	r0, r7
 801eb8c:	f7f6 fa8b 	bl	80150a6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801eb90:	b130      	cbz	r0, 801eba0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
 801eb92:	4633      	mov	r3, r6
 801eb94:	4622      	mov	r2, r4
 801eb96:	a902      	add	r1, sp, #8
 801eb98:	4628      	mov	r0, r5
 801eb9a:	f7ff f92d 	bl	801ddf8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801eb9e:	e7e2      	b.n	801eb66 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801eba0:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801eba4:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801eba8:	4293      	cmp	r3, r2
 801ebaa:	dd12      	ble.n	801ebd2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xf2>
 801ebac:	1a9b      	subs	r3, r3, r2
 801ebae:	f9b4 0000 	ldrsh.w	r0, [r4]
 801ebb2:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801ebb6:	f8ad 0018 	strh.w	r0, [sp, #24]
 801ebba:	4628      	mov	r0, r5
 801ebbc:	f8ad 201a 	strh.w	r2, [sp, #26]
 801ebc0:	4642      	mov	r2, r8
 801ebc2:	f8ad 101c 	strh.w	r1, [sp, #28]
 801ebc6:	a902      	add	r1, sp, #8
 801ebc8:	f8ad 301e 	strh.w	r3, [sp, #30]
 801ebcc:	4633      	mov	r3, r6
 801ebce:	f7ff f913 	bl	801ddf8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801ebd2:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 801ebd6:	f9b4 2000 	ldrsh.w	r2, [r4]
 801ebda:	4293      	cmp	r3, r2
 801ebdc:	dd12      	ble.n	801ec04 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x124>
 801ebde:	1a9b      	subs	r3, r3, r2
 801ebe0:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 801ebe4:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 801ebe8:	f8ad 2018 	strh.w	r2, [sp, #24]
 801ebec:	4642      	mov	r2, r8
 801ebee:	f8ad 001a 	strh.w	r0, [sp, #26]
 801ebf2:	4628      	mov	r0, r5
 801ebf4:	f8ad 301c 	strh.w	r3, [sp, #28]
 801ebf8:	23ff      	movs	r3, #255	; 0xff
 801ebfa:	f8ad 101e 	strh.w	r1, [sp, #30]
 801ebfe:	a902      	add	r1, sp, #8
 801ec00:	f7ff f8fa 	bl	801ddf8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801ec04:	463b      	mov	r3, r7
 801ec06:	aa02      	add	r2, sp, #8
 801ec08:	4629      	mov	r1, r5
 801ec0a:	4650      	mov	r0, sl
 801ec0c:	f7ff f9da 	bl	801dfc4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 801ec10:	88a2      	ldrh	r2, [r4, #4]
 801ec12:	8823      	ldrh	r3, [r4, #0]
 801ec14:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801ec18:	4413      	add	r3, r2
 801ec1a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801ec1e:	440a      	add	r2, r1
 801ec20:	b29b      	uxth	r3, r3
 801ec22:	b292      	uxth	r2, r2
 801ec24:	b218      	sxth	r0, r3
 801ec26:	b211      	sxth	r1, r2
 801ec28:	4288      	cmp	r0, r1
 801ec2a:	dd12      	ble.n	801ec52 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x172>
 801ec2c:	1a9b      	subs	r3, r3, r2
 801ec2e:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 801ec32:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
 801ec36:	4642      	mov	r2, r8
 801ec38:	f8ad 1018 	strh.w	r1, [sp, #24]
 801ec3c:	a902      	add	r1, sp, #8
 801ec3e:	f8ad 301c 	strh.w	r3, [sp, #28]
 801ec42:	23ff      	movs	r3, #255	; 0xff
 801ec44:	f8ad 001e 	strh.w	r0, [sp, #30]
 801ec48:	4628      	mov	r0, r5
 801ec4a:	f8ad 601a 	strh.w	r6, [sp, #26]
 801ec4e:	f7ff f8d3 	bl	801ddf8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801ec52:	88e2      	ldrh	r2, [r4, #6]
 801ec54:	8863      	ldrh	r3, [r4, #2]
 801ec56:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 801ec5a:	4413      	add	r3, r2
 801ec5c:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801ec60:	440a      	add	r2, r1
 801ec62:	b29b      	uxth	r3, r3
 801ec64:	b292      	uxth	r2, r2
 801ec66:	b218      	sxth	r0, r3
 801ec68:	b211      	sxth	r1, r2
 801ec6a:	4288      	cmp	r0, r1
 801ec6c:	f77f af7b 	ble.w	801eb66 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801ec70:	1a9b      	subs	r3, r3, r2
 801ec72:	f9b4 6000 	ldrsh.w	r6, [r4]
 801ec76:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801ec7a:	4642      	mov	r2, r8
 801ec7c:	f8ad 301e 	strh.w	r3, [sp, #30]
 801ec80:	23ff      	movs	r3, #255	; 0xff
 801ec82:	f8ad 6018 	strh.w	r6, [sp, #24]
 801ec86:	f8ad 101a 	strh.w	r1, [sp, #26]
 801ec8a:	f8ad 001c 	strh.w	r0, [sp, #28]
 801ec8e:	e782      	b.n	801eb96 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb6>
 801ec90:	4633      	mov	r3, r6
 801ec92:	4622      	mov	r2, r4
 801ec94:	a902      	add	r1, sp, #8
 801ec96:	4628      	mov	r0, r5
 801ec98:	f7ff fa04 	bl	801e0a4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 801ec9c:	e763      	b.n	801eb66 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801ec9e:	9600      	str	r6, [sp, #0]
 801eca0:	4623      	mov	r3, r4
 801eca2:	aa02      	add	r2, sp, #8
 801eca4:	4649      	mov	r1, r9
 801eca6:	4628      	mov	r0, r5
 801eca8:	f7ff fddc 	bl	801e864 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801ecac:	e75b      	b.n	801eb66 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801ecae:	4638      	mov	r0, r7
 801ecb0:	f7fc f844 	bl	801ad3c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801ecb4:	b950      	cbnz	r0, 801eccc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1ec>
 801ecb6:	f8da 3000 	ldr.w	r3, [sl]
 801ecba:	aa02      	add	r2, sp, #8
 801ecbc:	4629      	mov	r1, r5
 801ecbe:	e9cd 6000 	strd	r6, r0, [sp]
 801ecc2:	4650      	mov	r0, sl
 801ecc4:	68de      	ldr	r6, [r3, #12]
 801ecc6:	4623      	mov	r3, r4
 801ecc8:	47b0      	blx	r6
 801ecca:	e74c      	b.n	801eb66 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801eccc:	f10d 0818 	add.w	r8, sp, #24
 801ecd0:	4639      	mov	r1, r7
 801ecd2:	af04      	add	r7, sp, #16
 801ecd4:	4640      	mov	r0, r8
 801ecd6:	f7fb ffe5 	bl	801aca4 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801ecda:	e898 0003 	ldmia.w	r8, {r0, r1}
 801ecde:	e887 0003 	stmia.w	r7, {r0, r1}
 801ece2:	4638      	mov	r0, r7
 801ece4:	4621      	mov	r1, r4
 801ece6:	f7f6 f99b 	bl	8015020 <_ZN8touchgfx4RectaNERKS0_>
 801ecea:	4638      	mov	r0, r7
 801ecec:	f7f6 f9db 	bl	80150a6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801ecf0:	b138      	cbz	r0, 801ed02 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x222>
 801ecf2:	4623      	mov	r3, r4
 801ecf4:	9600      	str	r6, [sp, #0]
 801ecf6:	aa02      	add	r2, sp, #8
 801ecf8:	4649      	mov	r1, r9
 801ecfa:	4628      	mov	r0, r5
 801ecfc:	f7ff fdca 	bl	801e894 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801ed00:	e731      	b.n	801eb66 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801ed02:	f8da 3000 	ldr.w	r3, [sl]
 801ed06:	aa02      	add	r2, sp, #8
 801ed08:	4629      	mov	r1, r5
 801ed0a:	e9cd 6000 	strd	r6, r0, [sp]
 801ed0e:	4650      	mov	r0, sl
 801ed10:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 801ed14:	463b      	mov	r3, r7
 801ed16:	47d8      	blx	fp
 801ed18:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801ed1c:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801ed20:	4293      	cmp	r3, r2
 801ed22:	dd13      	ble.n	801ed4c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x26c>
 801ed24:	f9b4 0000 	ldrsh.w	r0, [r4]
 801ed28:	1a9b      	subs	r3, r3, r2
 801ed2a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801ed2e:	f8ad 0018 	strh.w	r0, [sp, #24]
 801ed32:	4628      	mov	r0, r5
 801ed34:	f8ad 201a 	strh.w	r2, [sp, #26]
 801ed38:	aa02      	add	r2, sp, #8
 801ed3a:	f8ad 101c 	strh.w	r1, [sp, #28]
 801ed3e:	4649      	mov	r1, r9
 801ed40:	f8ad 301e 	strh.w	r3, [sp, #30]
 801ed44:	4643      	mov	r3, r8
 801ed46:	9600      	str	r6, [sp, #0]
 801ed48:	f7ff fda4 	bl	801e894 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801ed4c:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 801ed50:	f9b4 2000 	ldrsh.w	r2, [r4]
 801ed54:	4293      	cmp	r3, r2
 801ed56:	dd13      	ble.n	801ed80 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2a0>
 801ed58:	1a9b      	subs	r3, r3, r2
 801ed5a:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 801ed5e:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 801ed62:	f8ad 2018 	strh.w	r2, [sp, #24]
 801ed66:	aa02      	add	r2, sp, #8
 801ed68:	f8ad 001a 	strh.w	r0, [sp, #26]
 801ed6c:	4628      	mov	r0, r5
 801ed6e:	f8ad 301c 	strh.w	r3, [sp, #28]
 801ed72:	4643      	mov	r3, r8
 801ed74:	f8ad 101e 	strh.w	r1, [sp, #30]
 801ed78:	4649      	mov	r1, r9
 801ed7a:	9600      	str	r6, [sp, #0]
 801ed7c:	f7ff fd8a 	bl	801e894 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801ed80:	88a2      	ldrh	r2, [r4, #4]
 801ed82:	8823      	ldrh	r3, [r4, #0]
 801ed84:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801ed88:	4413      	add	r3, r2
 801ed8a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801ed8e:	440a      	add	r2, r1
 801ed90:	b29b      	uxth	r3, r3
 801ed92:	b292      	uxth	r2, r2
 801ed94:	b218      	sxth	r0, r3
 801ed96:	b211      	sxth	r1, r2
 801ed98:	4288      	cmp	r0, r1
 801ed9a:	dd13      	ble.n	801edc4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2e4>
 801ed9c:	1a9b      	subs	r3, r3, r2
 801ed9e:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 801eda2:	f9bd 7012 	ldrsh.w	r7, [sp, #18]
 801eda6:	aa02      	add	r2, sp, #8
 801eda8:	f8ad 1018 	strh.w	r1, [sp, #24]
 801edac:	4649      	mov	r1, r9
 801edae:	f8ad 301c 	strh.w	r3, [sp, #28]
 801edb2:	4643      	mov	r3, r8
 801edb4:	f8ad 001e 	strh.w	r0, [sp, #30]
 801edb8:	4628      	mov	r0, r5
 801edba:	9600      	str	r6, [sp, #0]
 801edbc:	f8ad 701a 	strh.w	r7, [sp, #26]
 801edc0:	f7ff fd68 	bl	801e894 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801edc4:	88e2      	ldrh	r2, [r4, #6]
 801edc6:	8863      	ldrh	r3, [r4, #2]
 801edc8:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 801edcc:	4413      	add	r3, r2
 801edce:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801edd2:	440a      	add	r2, r1
 801edd4:	b29b      	uxth	r3, r3
 801edd6:	b292      	uxth	r2, r2
 801edd8:	b218      	sxth	r0, r3
 801edda:	b211      	sxth	r1, r2
 801eddc:	4288      	cmp	r0, r1
 801edde:	f77f aec2 	ble.w	801eb66 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801ede2:	f9b4 7000 	ldrsh.w	r7, [r4]
 801ede6:	1a9b      	subs	r3, r3, r2
 801ede8:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801edec:	f8ad 301e 	strh.w	r3, [sp, #30]
 801edf0:	4643      	mov	r3, r8
 801edf2:	f8ad 7018 	strh.w	r7, [sp, #24]
 801edf6:	f8ad 101a 	strh.w	r1, [sp, #26]
 801edfa:	f8ad 001c 	strh.w	r0, [sp, #28]
 801edfe:	9600      	str	r6, [sp, #0]
 801ee00:	e779      	b.n	801ecf6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x216>
 801ee02:	bf00      	nop
 801ee04:	20024428 	.word	0x20024428

0801ee08 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 801ee08:	b180      	cbz	r0, 801ee2c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x24>
 801ee0a:	2903      	cmp	r1, #3
 801ee0c:	d81c      	bhi.n	801ee48 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 801ee0e:	e8df f001 	tbb	[pc, r1]
 801ee12:	1d02      	.short	0x1d02
 801ee14:	1f08      	.short	0x1f08
 801ee16:	4b10      	ldr	r3, [pc, #64]	; (801ee58 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 801ee18:	8818      	ldrh	r0, [r3, #0]
 801ee1a:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801ee1e:	4240      	negs	r0, r0
 801ee20:	4770      	bx	lr
 801ee22:	4b0d      	ldr	r3, [pc, #52]	; (801ee58 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 801ee24:	8818      	ldrh	r0, [r3, #0]
 801ee26:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801ee2a:	4770      	bx	lr
 801ee2c:	2903      	cmp	r1, #3
 801ee2e:	d80b      	bhi.n	801ee48 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 801ee30:	a301      	add	r3, pc, #4	; (adr r3, 801ee38 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x30>)
 801ee32:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801ee36:	bf00      	nop
 801ee38:	0801ee4d 	.word	0x0801ee4d
 801ee3c:	0801ee23 	.word	0x0801ee23
 801ee40:	0801ee51 	.word	0x0801ee51
 801ee44:	0801ee17 	.word	0x0801ee17
 801ee48:	2000      	movs	r0, #0
 801ee4a:	4770      	bx	lr
 801ee4c:	2001      	movs	r0, #1
 801ee4e:	4770      	bx	lr
 801ee50:	f04f 30ff 	mov.w	r0, #4294967295
 801ee54:	4770      	bx	lr
 801ee56:	bf00      	nop
 801ee58:	20024422 	.word	0x20024422

0801ee5c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 801ee5c:	b180      	cbz	r0, 801ee80 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x24>
 801ee5e:	2903      	cmp	r1, #3
 801ee60:	d81c      	bhi.n	801ee9c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 801ee62:	e8df f001 	tbb	[pc, r1]
 801ee66:	021d      	.short	0x021d
 801ee68:	071f      	.short	0x071f
 801ee6a:	4b10      	ldr	r3, [pc, #64]	; (801eeac <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 801ee6c:	8818      	ldrh	r0, [r3, #0]
 801ee6e:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801ee72:	4770      	bx	lr
 801ee74:	4b0d      	ldr	r3, [pc, #52]	; (801eeac <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 801ee76:	8818      	ldrh	r0, [r3, #0]
 801ee78:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801ee7c:	4240      	negs	r0, r0
 801ee7e:	4770      	bx	lr
 801ee80:	2903      	cmp	r1, #3
 801ee82:	d80b      	bhi.n	801ee9c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 801ee84:	a301      	add	r3, pc, #4	; (adr r3, 801ee8c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x30>)
 801ee86:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801ee8a:	bf00      	nop
 801ee8c:	0801ee6b 	.word	0x0801ee6b
 801ee90:	0801eea5 	.word	0x0801eea5
 801ee94:	0801ee75 	.word	0x0801ee75
 801ee98:	0801eea1 	.word	0x0801eea1
 801ee9c:	2000      	movs	r0, #0
 801ee9e:	4770      	bx	lr
 801eea0:	2001      	movs	r0, #1
 801eea2:	4770      	bx	lr
 801eea4:	f04f 30ff 	mov.w	r0, #4294967295
 801eea8:	4770      	bx	lr
 801eeaa:	bf00      	nop
 801eeac:	20024422 	.word	0x20024422

0801eeb0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801eeb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eeb4:	b099      	sub	sp, #100	; 0x64
 801eeb6:	910b      	str	r1, [sp, #44]	; 0x2c
 801eeb8:	a914      	add	r1, sp, #80	; 0x50
 801eeba:	f9bd 4088 	ldrsh.w	r4, [sp, #136]	; 0x88
 801eebe:	f8bd 5090 	ldrh.w	r5, [sp, #144]	; 0x90
 801eec2:	f8bd 6094 	ldrh.w	r6, [sp, #148]	; 0x94
 801eec6:	f89d 80ac 	ldrb.w	r8, [sp, #172]	; 0xac
 801eeca:	f89d a0b4 	ldrb.w	sl, [sp, #180]	; 0xb4
 801eece:	e881 000c 	stmia.w	r1, {r2, r3}
 801eed2:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
 801eed6:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	; 0x98
 801eeda:	9309      	str	r3, [sp, #36]	; 0x24
 801eedc:	f891 900d 	ldrb.w	r9, [r1, #13]
 801eee0:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 801eee4:	ea4f 1749 	mov.w	r7, r9, lsl #5
 801eee8:	9310      	str	r3, [sp, #64]	; 0x40
 801eeea:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
 801eeee:	930c      	str	r3, [sp, #48]	; 0x30
 801eef0:	f407 7380 	and.w	r3, r7, #256	; 0x100
 801eef4:	798f      	ldrb	r7, [r1, #6]
 801eef6:	431f      	orrs	r7, r3
 801eef8:	f000 8195 	beq.w	801f226 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801eefc:	ea4f 1909 	mov.w	r9, r9, lsl #4
 801ef00:	f409 7380 	and.w	r3, r9, #256	; 0x100
 801ef04:	f891 9007 	ldrb.w	r9, [r1, #7]
 801ef08:	ea59 0903 	orrs.w	r9, r9, r3
 801ef0c:	f000 818b 	beq.w	801f226 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801ef10:	f991 3009 	ldrsb.w	r3, [r1, #9]
 801ef14:	b29b      	uxth	r3, r3
 801ef16:	2d00      	cmp	r5, #0
 801ef18:	f000 812e 	beq.w	801f178 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c8>
 801ef1c:	1aed      	subs	r5, r5, r3
 801ef1e:	b2ad      	uxth	r5, r5
 801ef20:	042b      	lsls	r3, r5, #16
 801ef22:	d502      	bpl.n	801ef2a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 801ef24:	1b64      	subs	r4, r4, r5
 801ef26:	2500      	movs	r5, #0
 801ef28:	b224      	sxth	r4, r4
 801ef2a:	f9b2 1000 	ldrsh.w	r1, [r2]
 801ef2e:	a814      	add	r0, sp, #80	; 0x50
 801ef30:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 801ef34:	428c      	cmp	r4, r1
 801ef36:	b28b      	uxth	r3, r1
 801ef38:	bfbf      	itttt	lt
 801ef3a:	18ed      	addlt	r5, r5, r3
 801ef3c:	1b2c      	sublt	r4, r5, r4
 801ef3e:	b2a5      	uxthlt	r5, r4
 801ef40:	460c      	movlt	r4, r1
 801ef42:	8891      	ldrh	r1, [r2, #4]
 801ef44:	440b      	add	r3, r1
 801ef46:	4621      	mov	r1, r4
 801ef48:	b21b      	sxth	r3, r3
 801ef4a:	930f      	str	r3, [sp, #60]	; 0x3c
 801ef4c:	88d3      	ldrh	r3, [r2, #6]
 801ef4e:	8852      	ldrh	r2, [r2, #2]
 801ef50:	4413      	add	r3, r2
 801ef52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ef54:	b21b      	sxth	r3, r3
 801ef56:	930d      	str	r3, [sp, #52]	; 0x34
 801ef58:	4bbd      	ldr	r3, [pc, #756]	; (801f250 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>)
 801ef5a:	f893 b000 	ldrb.w	fp, [r3]
 801ef5e:	f10b 3cff 	add.w	ip, fp, #4294967295
 801ef62:	f1dc 0300 	rsbs	r3, ip, #0
 801ef66:	eb43 030c 	adc.w	r3, r3, ip
 801ef6a:	930e      	str	r3, [sp, #56]	; 0x38
 801ef6c:	4653      	mov	r3, sl
 801ef6e:	f7f8 fe8d 	bl	8017c8c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801ef72:	4621      	mov	r1, r4
 801ef74:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
 801ef78:	4653      	mov	r3, sl
 801ef7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ef7c:	a814      	add	r0, sp, #80	; 0x50
 801ef7e:	f7f8 fea2 	bl	8017cc6 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801ef82:	a918      	add	r1, sp, #96	; 0x60
 801ef84:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801ef88:	a817      	add	r0, sp, #92	; 0x5c
 801ef8a:	f7f8 ffc3 	bl	8017f14 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801ef8e:	f1ba 0f00 	cmp.w	sl, #0
 801ef92:	f040 80f4 	bne.w	801f17e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
 801ef96:	f1bb 0f01 	cmp.w	fp, #1
 801ef9a:	f040 80f8 	bne.w	801f18e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2de>
 801ef9e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801efa0:	2b00      	cmp	r3, #0
 801efa2:	f040 8145 	bne.w	801f230 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>
 801efa6:	b2ba      	uxth	r2, r7
 801efa8:	b905      	cbnz	r5, 801efac <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xfc>
 801efaa:	b16e      	cbz	r6, 801efc8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x118>
 801efac:	fb06 5302 	mla	r3, r6, r2, r5
 801efb0:	9828      	ldr	r0, [sp, #160]	; 0xa0
 801efb2:	4631      	mov	r1, r6
 801efb4:	fb08 f303 	mul.w	r3, r8, r3
 801efb8:	f003 0607 	and.w	r6, r3, #7
 801efbc:	eb00 03d3 	add.w	r3, r0, r3, lsr #3
 801efc0:	9328      	str	r3, [sp, #160]	; 0xa0
 801efc2:	eba9 0301 	sub.w	r3, r9, r1
 801efc6:	930a      	str	r3, [sp, #40]	; 0x28
 801efc8:	4651      	mov	r1, sl
 801efca:	980e      	ldr	r0, [sp, #56]	; 0x38
 801efcc:	f7ff ff1c 	bl	801ee08 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 801efd0:	4681      	mov	r9, r0
 801efd2:	980e      	ldr	r0, [sp, #56]	; 0x38
 801efd4:	f7ff ff42 	bl	801ee5c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 801efd8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801efda:	9909      	ldr	r1, [sp, #36]	; 0x24
 801efdc:	4683      	mov	fp, r0
 801efde:	eba3 0a01 	sub.w	sl, r3, r1
 801efe2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801efe4:	459a      	cmp	sl, r3
 801efe6:	bfa8      	it	ge
 801efe8:	469a      	movge	sl, r3
 801efea:	f1ba 0f00 	cmp.w	sl, #0
 801efee:	f340 811a 	ble.w	801f226 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801eff2:	1b64      	subs	r4, r4, r5
 801eff4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801eff6:	1b1c      	subs	r4, r3, r4
 801eff8:	42bc      	cmp	r4, r7
 801effa:	bfd4      	ite	le
 801effc:	ebc5 0504 	rsble	r5, r5, r4
 801f000:	ebc5 0507 	rsbgt	r5, r5, r7
 801f004:	2d00      	cmp	r5, #0
 801f006:	f340 810e 	ble.w	801f226 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801f00a:	1b52      	subs	r2, r2, r5
 801f00c:	fb08 f302 	mul.w	r3, r8, r2
 801f010:	930f      	str	r3, [sp, #60]	; 0x3c
 801f012:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f014:	2b00      	cmp	r3, #0
 801f016:	f040 8116 	bne.w	801f246 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x396>
 801f01a:	4b8e      	ldr	r3, [pc, #568]	; (801f254 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>)
 801f01c:	6818      	ldr	r0, [r3, #0]
 801f01e:	6803      	ldr	r3, [r0, #0]
 801f020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f022:	4798      	blx	r3
 801f024:	2301      	movs	r3, #1
 801f026:	4a8c      	ldr	r2, [pc, #560]	; (801f258 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
 801f028:	fa03 f308 	lsl.w	r3, r3, r8
 801f02c:	8811      	ldrh	r1, [r2, #0]
 801f02e:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801f032:	3b01      	subs	r3, #1
 801f034:	b2db      	uxtb	r3, r3
 801f036:	930e      	str	r3, [sp, #56]	; 0x38
 801f038:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 801f03c:	fb01 2303 	mla	r3, r1, r3, r2
 801f040:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801f044:	930a      	str	r3, [sp, #40]	; 0x28
 801f046:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801f048:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801f04c:	9313      	str	r3, [sp, #76]	; 0x4c
 801f04e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801f050:	0a19      	lsrs	r1, r3, #8
 801f052:	b2cb      	uxtb	r3, r1
 801f054:	9312      	str	r3, [sp, #72]	; 0x48
 801f056:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801f058:	b2db      	uxtb	r3, r3
 801f05a:	9311      	str	r3, [sp, #68]	; 0x44
 801f05c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801f05e:	095a      	lsrs	r2, r3, #5
 801f060:	4b7e      	ldr	r3, [pc, #504]	; (801f25c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 801f062:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801f066:	400b      	ands	r3, r1
 801f068:	4313      	orrs	r3, r2
 801f06a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801f06c:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801f070:	4313      	orrs	r3, r2
 801f072:	b29b      	uxth	r3, r3
 801f074:	9310      	str	r3, [sp, #64]	; 0x40
 801f076:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f078:	781a      	ldrb	r2, [r3, #0]
 801f07a:	ea4f 0349 	mov.w	r3, r9, lsl #1
 801f07e:	fb05 b919 	mls	r9, r5, r9, fp
 801f082:	4132      	asrs	r2, r6
 801f084:	fb03 fb05 	mul.w	fp, r3, r5
 801f088:	930d      	str	r3, [sp, #52]	; 0x34
 801f08a:	b2d2      	uxtb	r2, r2
 801f08c:	eb0b 0b49 	add.w	fp, fp, r9, lsl #1
 801f090:	f11a 3aff 	adds.w	sl, sl, #4294967295
 801f094:	f0c0 80f5 	bcc.w	801f282 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3d2>
 801f098:	46ae      	mov	lr, r5
 801f09a:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 801f09e:	f11e 3eff 	adds.w	lr, lr, #4294967295
 801f0a2:	f0c0 80dd 	bcc.w	801f260 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b0>
 801f0a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f0a8:	4013      	ands	r3, r2
 801f0aa:	d055      	beq.n	801f158 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 801f0ac:	20ff      	movs	r0, #255	; 0xff
 801f0ae:	990e      	ldr	r1, [sp, #56]	; 0x38
 801f0b0:	fb90 f1f1 	sdiv	r1, r0, r1
 801f0b4:	434b      	muls	r3, r1
 801f0b6:	2bfe      	cmp	r3, #254	; 0xfe
 801f0b8:	dd03      	ble.n	801f0c2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x212>
 801f0ba:	990c      	ldr	r1, [sp, #48]	; 0x30
 801f0bc:	4281      	cmp	r1, r0
 801f0be:	f000 80c4 	beq.w	801f24a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39a>
 801f0c2:	990c      	ldr	r1, [sp, #48]	; 0x30
 801f0c4:	f8bc 4000 	ldrh.w	r4, [ip]
 801f0c8:	fb11 f303 	smulbb	r3, r1, r3
 801f0cc:	1220      	asrs	r0, r4, #8
 801f0ce:	b29b      	uxth	r3, r3
 801f0d0:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801f0d4:	1c59      	adds	r1, r3, #1
 801f0d6:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 801f0da:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801f0de:	10e1      	asrs	r1, r4, #3
 801f0e0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801f0e4:	00e4      	lsls	r4, r4, #3
 801f0e6:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801f0ea:	b29f      	uxth	r7, r3
 801f0ec:	43db      	mvns	r3, r3
 801f0ee:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 801f0f2:	b2db      	uxtb	r3, r3
 801f0f4:	b2e4      	uxtb	r4, r4
 801f0f6:	9309      	str	r3, [sp, #36]	; 0x24
 801f0f8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801f0fa:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 801f0fe:	fb13 f907 	smulbb	r9, r3, r7
 801f102:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f104:	fb00 9003 	mla	r0, r0, r3, r9
 801f108:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801f10a:	fb13 f907 	smulbb	r9, r3, r7
 801f10e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f110:	b280      	uxth	r0, r0
 801f112:	fb01 9103 	mla	r1, r1, r3, r9
 801f116:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f118:	fb13 f707 	smulbb	r7, r3, r7
 801f11c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f11e:	b289      	uxth	r1, r1
 801f120:	fb04 7403 	mla	r4, r4, r3, r7
 801f124:	1c43      	adds	r3, r0, #1
 801f126:	b2a4      	uxth	r4, r4
 801f128:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801f12c:	f104 0901 	add.w	r9, r4, #1
 801f130:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801f134:	eb09 2914 	add.w	r9, r9, r4, lsr #8
 801f138:	f3c9 29c4 	ubfx	r9, r9, #11, #5
 801f13c:	ea49 0000 	orr.w	r0, r9, r0
 801f140:	f101 0901 	add.w	r9, r1, #1
 801f144:	eb09 2911 	add.w	r9, r9, r1, lsr #8
 801f148:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801f14c:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801f150:	ea40 0009 	orr.w	r0, r0, r9
 801f154:	f8ac 0000 	strh.w	r0, [ip]
 801f158:	4446      	add	r6, r8
 801f15a:	b2b6      	uxth	r6, r6
 801f15c:	2e07      	cmp	r6, #7
 801f15e:	bf89      	itett	hi
 801f160:	9b28      	ldrhi	r3, [sp, #160]	; 0xa0
 801f162:	fa42 f208 	asrls.w	r2, r2, r8
 801f166:	2600      	movhi	r6, #0
 801f168:	785a      	ldrbhi	r2, [r3, #1]
 801f16a:	bf8a      	itet	hi
 801f16c:	3301      	addhi	r3, #1
 801f16e:	b2d2      	uxtbls	r2, r2
 801f170:	9328      	strhi	r3, [sp, #160]	; 0xa0
 801f172:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f174:	449c      	add	ip, r3
 801f176:	e792      	b.n	801f09e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ee>
 801f178:	441c      	add	r4, r3
 801f17a:	b224      	sxth	r4, r4
 801f17c:	e6d5      	b.n	801ef2a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 801f17e:	f1ba 0f01 	cmp.w	sl, #1
 801f182:	f47f af0c 	bne.w	801ef9e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801f186:	f1bb 0f01 	cmp.w	fp, #1
 801f18a:	f47f af08 	bne.w	801ef9e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801f18e:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 801f254 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>
 801f192:	f8db 0000 	ldr.w	r0, [fp]
 801f196:	6803      	ldr	r3, [r0, #0]
 801f198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f19a:	4798      	blx	r3
 801f19c:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 801f1a0:	465a      	mov	r2, fp
 801f1a2:	d006      	beq.n	801f1b2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
 801f1a4:	f1b8 0f04 	cmp.w	r8, #4
 801f1a8:	d140      	bne.n	801f22c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>
 801f1aa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f1ac:	3300      	adds	r3, #0
 801f1ae:	bf18      	it	ne
 801f1b0:	2301      	movne	r3, #1
 801f1b2:	0580      	lsls	r0, r0, #22
 801f1b4:	d56e      	bpl.n	801f294 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
 801f1b6:	f1b8 0f08 	cmp.w	r8, #8
 801f1ba:	d16b      	bne.n	801f294 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
 801f1bc:	2b00      	cmp	r3, #0
 801f1be:	bf0c      	ite	eq
 801f1c0:	f44f 7100 	moveq.w	r1, #512	; 0x200
 801f1c4:	f44f 7180 	movne.w	r1, #256	; 0x100
 801f1c8:	2d00      	cmp	r5, #0
 801f1ca:	f47f aee8 	bne.w	801ef9e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801f1ce:	2e00      	cmp	r6, #0
 801f1d0:	f47f aee5 	bne.w	801ef9e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801f1d4:	19e3      	adds	r3, r4, r7
 801f1d6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801f1d8:	4283      	cmp	r3, r0
 801f1da:	f73f aee0 	bgt.w	801ef9e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801f1de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f1e0:	980d      	ldr	r0, [sp, #52]	; 0x34
 801f1e2:	444b      	add	r3, r9
 801f1e4:	4283      	cmp	r3, r0
 801f1e6:	f73f aeda 	bgt.w	801ef9e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801f1ea:	b2bf      	uxth	r7, r7
 801f1ec:	f1b8 0f08 	cmp.w	r8, #8
 801f1f0:	6810      	ldr	r0, [r2, #0]
 801f1f2:	f04f 0500 	mov.w	r5, #0
 801f1f6:	bf18      	it	ne
 801f1f8:	3701      	addne	r7, #1
 801f1fa:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
 801f1fe:	6804      	ldr	r4, [r0, #0]
 801f200:	bf18      	it	ne
 801f202:	f027 0701 	bicne.w	r7, r7, #1
 801f206:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 801f20a:	e9cd 1505 	strd	r1, r5, [sp, #20]
 801f20e:	990c      	ldr	r1, [sp, #48]	; 0x30
 801f210:	bf18      	it	ne
 801f212:	b2bf      	uxthne	r7, r7
 801f214:	9104      	str	r1, [sp, #16]
 801f216:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801f218:	e9cd 7900 	strd	r7, r9, [sp]
 801f21c:	e9cd 7102 	strd	r7, r1, [sp, #8]
 801f220:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801f222:	6d64      	ldr	r4, [r4, #84]	; 0x54
 801f224:	47a0      	blx	r4
 801f226:	b019      	add	sp, #100	; 0x64
 801f228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f22c:	2300      	movs	r3, #0
 801f22e:	e7c0      	b.n	801f1b2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
 801f230:	2208      	movs	r2, #8
 801f232:	fb92 f3f8 	sdiv	r3, r2, r8
 801f236:	1e5a      	subs	r2, r3, #1
 801f238:	443a      	add	r2, r7
 801f23a:	fb92 f2f3 	sdiv	r2, r2, r3
 801f23e:	fb12 f203 	smulbb	r2, r2, r3
 801f242:	b292      	uxth	r2, r2
 801f244:	e6b0      	b.n	801efa8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf8>
 801f246:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801f248:	e6ec      	b.n	801f024 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x174>
 801f24a:	9810      	ldr	r0, [sp, #64]	; 0x40
 801f24c:	e782      	b.n	801f154 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a4>
 801f24e:	bf00      	nop
 801f250:	20024420 	.word	0x20024420
 801f254:	20024428 	.word	0x20024428
 801f258:	20024422 	.word	0x20024422
 801f25c:	00fff800 	.word	0x00fff800
 801f260:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f262:	b153      	cbz	r3, 801f27a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ca>
 801f264:	441e      	add	r6, r3
 801f266:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f268:	b2b6      	uxth	r6, r6
 801f26a:	eb03 03d6 	add.w	r3, r3, r6, lsr #3
 801f26e:	f006 0607 	and.w	r6, r6, #7
 801f272:	781a      	ldrb	r2, [r3, #0]
 801f274:	9328      	str	r3, [sp, #160]	; 0xa0
 801f276:	4132      	asrs	r2, r6
 801f278:	b2d2      	uxtb	r2, r2
 801f27a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f27c:	445b      	add	r3, fp
 801f27e:	930a      	str	r3, [sp, #40]	; 0x28
 801f280:	e706      	b.n	801f090 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e0>
 801f282:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f284:	2b00      	cmp	r3, #0
 801f286:	d1ce      	bne.n	801f226 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801f288:	4b05      	ldr	r3, [pc, #20]	; (801f2a0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f0>)
 801f28a:	6818      	ldr	r0, [r3, #0]
 801f28c:	6803      	ldr	r3, [r0, #0]
 801f28e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f290:	4798      	blx	r3
 801f292:	e7c8      	b.n	801f226 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801f294:	2b00      	cmp	r3, #0
 801f296:	f43f ae82 	beq.w	801ef9e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801f29a:	f44f 7180 	mov.w	r1, #256	; 0x100
 801f29e:	e793      	b.n	801f1c8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x318>
 801f2a0:	20024428 	.word	0x20024428

0801f2a4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
 801f2a4:	b538      	push	{r3, r4, r5, lr}
 801f2a6:	4c15      	ldr	r4, [pc, #84]	; (801f2fc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 801f2a8:	4605      	mov	r5, r0
 801f2aa:	7823      	ldrb	r3, [r4, #0]
 801f2ac:	f3bf 8f5b 	dmb	ish
 801f2b0:	07da      	lsls	r2, r3, #31
 801f2b2:	d40b      	bmi.n	801f2cc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 801f2b4:	4620      	mov	r0, r4
 801f2b6:	f007 fa68 	bl	802678a <__cxa_guard_acquire>
 801f2ba:	b138      	cbz	r0, 801f2cc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 801f2bc:	4620      	mov	r0, r4
 801f2be:	f007 fa70 	bl	80267a2 <__cxa_guard_release>
 801f2c2:	4a0f      	ldr	r2, [pc, #60]	; (801f300 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 801f2c4:	490f      	ldr	r1, [pc, #60]	; (801f304 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 801f2c6:	4810      	ldr	r0, [pc, #64]	; (801f308 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 801f2c8:	f007 fa58 	bl	802677c <__aeabi_atexit>
 801f2cc:	4c0f      	ldr	r4, [pc, #60]	; (801f30c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
 801f2ce:	7823      	ldrb	r3, [r4, #0]
 801f2d0:	f3bf 8f5b 	dmb	ish
 801f2d4:	07db      	lsls	r3, r3, #31
 801f2d6:	d40b      	bmi.n	801f2f0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 801f2d8:	4620      	mov	r0, r4
 801f2da:	f007 fa56 	bl	802678a <__cxa_guard_acquire>
 801f2de:	b138      	cbz	r0, 801f2f0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 801f2e0:	4620      	mov	r0, r4
 801f2e2:	f007 fa5e 	bl	80267a2 <__cxa_guard_release>
 801f2e6:	4a06      	ldr	r2, [pc, #24]	; (801f300 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 801f2e8:	4909      	ldr	r1, [pc, #36]	; (801f310 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 801f2ea:	480a      	ldr	r0, [pc, #40]	; (801f314 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 801f2ec:	f007 fa46 	bl	802677c <__aeabi_atexit>
 801f2f0:	4b05      	ldr	r3, [pc, #20]	; (801f308 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 801f2f2:	612b      	str	r3, [r5, #16]
 801f2f4:	4b07      	ldr	r3, [pc, #28]	; (801f314 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 801f2f6:	616b      	str	r3, [r5, #20]
 801f2f8:	bd38      	pop	{r3, r4, r5, pc}
 801f2fa:	bf00      	nop
 801f2fc:	200244f4 	.word	0x200244f4
 801f300:	20000000 	.word	0x20000000
 801f304:	0801d4c3 	.word	0x0801d4c3
 801f308:	20000074 	.word	0x20000074
 801f30c:	200244f8 	.word	0x200244f8
 801f310:	0801d4c1 	.word	0x0801d4c1
 801f314:	20000078 	.word	0x20000078

0801f318 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
 801f318:	b538      	push	{r3, r4, r5, lr}
 801f31a:	4c15      	ldr	r4, [pc, #84]	; (801f370 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 801f31c:	4605      	mov	r5, r0
 801f31e:	7823      	ldrb	r3, [r4, #0]
 801f320:	f3bf 8f5b 	dmb	ish
 801f324:	07da      	lsls	r2, r3, #31
 801f326:	d40b      	bmi.n	801f340 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 801f328:	4620      	mov	r0, r4
 801f32a:	f007 fa2e 	bl	802678a <__cxa_guard_acquire>
 801f32e:	b138      	cbz	r0, 801f340 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 801f330:	4620      	mov	r0, r4
 801f332:	f007 fa36 	bl	80267a2 <__cxa_guard_release>
 801f336:	4a0f      	ldr	r2, [pc, #60]	; (801f374 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 801f338:	490f      	ldr	r1, [pc, #60]	; (801f378 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 801f33a:	4810      	ldr	r0, [pc, #64]	; (801f37c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 801f33c:	f007 fa1e 	bl	802677c <__aeabi_atexit>
 801f340:	4c0f      	ldr	r4, [pc, #60]	; (801f380 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
 801f342:	7823      	ldrb	r3, [r4, #0]
 801f344:	f3bf 8f5b 	dmb	ish
 801f348:	07db      	lsls	r3, r3, #31
 801f34a:	d40b      	bmi.n	801f364 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 801f34c:	4620      	mov	r0, r4
 801f34e:	f007 fa1c 	bl	802678a <__cxa_guard_acquire>
 801f352:	b138      	cbz	r0, 801f364 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 801f354:	4620      	mov	r0, r4
 801f356:	f007 fa24 	bl	80267a2 <__cxa_guard_release>
 801f35a:	4a06      	ldr	r2, [pc, #24]	; (801f374 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 801f35c:	4909      	ldr	r1, [pc, #36]	; (801f384 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 801f35e:	480a      	ldr	r0, [pc, #40]	; (801f388 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 801f360:	f007 fa0c 	bl	802677c <__aeabi_atexit>
 801f364:	4b05      	ldr	r3, [pc, #20]	; (801f37c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 801f366:	60ab      	str	r3, [r5, #8]
 801f368:	4b07      	ldr	r3, [pc, #28]	; (801f388 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 801f36a:	60eb      	str	r3, [r5, #12]
 801f36c:	bd38      	pop	{r3, r4, r5, pc}
 801f36e:	bf00      	nop
 801f370:	200244cc 	.word	0x200244cc
 801f374:	20000000 	.word	0x20000000
 801f378:	0801d4c7 	.word	0x0801d4c7
 801f37c:	2000004c 	.word	0x2000004c
 801f380:	200244d0 	.word	0x200244d0
 801f384:	0801d4c5 	.word	0x0801d4c5
 801f388:	20000050 	.word	0x20000050

0801f38c <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>:
 801f38c:	b510      	push	{r4, lr}
 801f38e:	4604      	mov	r4, r0
 801f390:	f7ff ff88 	bl	801f2a4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
 801f394:	4620      	mov	r0, r4
 801f396:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f39a:	f7ff bfbd 	b.w	801f318 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

0801f3a0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 801f3a0:	b538      	push	{r3, r4, r5, lr}
 801f3a2:	4c15      	ldr	r4, [pc, #84]	; (801f3f8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801f3a4:	4605      	mov	r5, r0
 801f3a6:	7823      	ldrb	r3, [r4, #0]
 801f3a8:	f3bf 8f5b 	dmb	ish
 801f3ac:	07da      	lsls	r2, r3, #31
 801f3ae:	d40b      	bmi.n	801f3c8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801f3b0:	4620      	mov	r0, r4
 801f3b2:	f007 f9ea 	bl	802678a <__cxa_guard_acquire>
 801f3b6:	b138      	cbz	r0, 801f3c8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801f3b8:	4620      	mov	r0, r4
 801f3ba:	f007 f9f2 	bl	80267a2 <__cxa_guard_release>
 801f3be:	4a0f      	ldr	r2, [pc, #60]	; (801f3fc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801f3c0:	490f      	ldr	r1, [pc, #60]	; (801f400 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801f3c2:	4810      	ldr	r0, [pc, #64]	; (801f404 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801f3c4:	f007 f9da 	bl	802677c <__aeabi_atexit>
 801f3c8:	4c0f      	ldr	r4, [pc, #60]	; (801f408 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 801f3ca:	7823      	ldrb	r3, [r4, #0]
 801f3cc:	f3bf 8f5b 	dmb	ish
 801f3d0:	07db      	lsls	r3, r3, #31
 801f3d2:	d40b      	bmi.n	801f3ec <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801f3d4:	4620      	mov	r0, r4
 801f3d6:	f007 f9d8 	bl	802678a <__cxa_guard_acquire>
 801f3da:	b138      	cbz	r0, 801f3ec <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801f3dc:	4620      	mov	r0, r4
 801f3de:	f007 f9e0 	bl	80267a2 <__cxa_guard_release>
 801f3e2:	4a06      	ldr	r2, [pc, #24]	; (801f3fc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801f3e4:	4909      	ldr	r1, [pc, #36]	; (801f40c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801f3e6:	480a      	ldr	r0, [pc, #40]	; (801f410 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801f3e8:	f007 f9c8 	bl	802677c <__aeabi_atexit>
 801f3ec:	4b05      	ldr	r3, [pc, #20]	; (801f404 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801f3ee:	622b      	str	r3, [r5, #32]
 801f3f0:	4b07      	ldr	r3, [pc, #28]	; (801f410 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801f3f2:	626b      	str	r3, [r5, #36]	; 0x24
 801f3f4:	bd38      	pop	{r3, r4, r5, pc}
 801f3f6:	bf00      	nop
 801f3f8:	200244fc 	.word	0x200244fc
 801f3fc:	20000000 	.word	0x20000000
 801f400:	0801d4bb 	.word	0x0801d4bb
 801f404:	2000007c 	.word	0x2000007c
 801f408:	20024500 	.word	0x20024500
 801f40c:	0801d4b9 	.word	0x0801d4b9
 801f410:	20000080 	.word	0x20000080

0801f414 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 801f414:	b538      	push	{r3, r4, r5, lr}
 801f416:	4c15      	ldr	r4, [pc, #84]	; (801f46c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 801f418:	4605      	mov	r5, r0
 801f41a:	7823      	ldrb	r3, [r4, #0]
 801f41c:	f3bf 8f5b 	dmb	ish
 801f420:	07da      	lsls	r2, r3, #31
 801f422:	d40b      	bmi.n	801f43c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801f424:	4620      	mov	r0, r4
 801f426:	f007 f9b0 	bl	802678a <__cxa_guard_acquire>
 801f42a:	b138      	cbz	r0, 801f43c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801f42c:	4620      	mov	r0, r4
 801f42e:	f007 f9b8 	bl	80267a2 <__cxa_guard_release>
 801f432:	4a0f      	ldr	r2, [pc, #60]	; (801f470 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801f434:	490f      	ldr	r1, [pc, #60]	; (801f474 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801f436:	4810      	ldr	r0, [pc, #64]	; (801f478 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801f438:	f007 f9a0 	bl	802677c <__aeabi_atexit>
 801f43c:	4c0f      	ldr	r4, [pc, #60]	; (801f47c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 801f43e:	7823      	ldrb	r3, [r4, #0]
 801f440:	f3bf 8f5b 	dmb	ish
 801f444:	07db      	lsls	r3, r3, #31
 801f446:	d40b      	bmi.n	801f460 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801f448:	4620      	mov	r0, r4
 801f44a:	f007 f99e 	bl	802678a <__cxa_guard_acquire>
 801f44e:	b138      	cbz	r0, 801f460 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801f450:	4620      	mov	r0, r4
 801f452:	f007 f9a6 	bl	80267a2 <__cxa_guard_release>
 801f456:	4a06      	ldr	r2, [pc, #24]	; (801f470 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801f458:	4909      	ldr	r1, [pc, #36]	; (801f480 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801f45a:	480a      	ldr	r0, [pc, #40]	; (801f484 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801f45c:	f007 f98e 	bl	802677c <__aeabi_atexit>
 801f460:	4b05      	ldr	r3, [pc, #20]	; (801f478 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801f462:	61ab      	str	r3, [r5, #24]
 801f464:	4b07      	ldr	r3, [pc, #28]	; (801f484 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801f466:	61eb      	str	r3, [r5, #28]
 801f468:	bd38      	pop	{r3, r4, r5, pc}
 801f46a:	bf00      	nop
 801f46c:	200244d4 	.word	0x200244d4
 801f470:	20000000 	.word	0x20000000
 801f474:	0801d4bf 	.word	0x0801d4bf
 801f478:	20000054 	.word	0x20000054
 801f47c:	200244d8 	.word	0x200244d8
 801f480:	0801d4bd 	.word	0x0801d4bd
 801f484:	20000058 	.word	0x20000058

0801f488 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>:
 801f488:	b510      	push	{r4, lr}
 801f48a:	4604      	mov	r4, r0
 801f48c:	f7ff ff88 	bl	801f3a0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 801f490:	4620      	mov	r0, r4
 801f492:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f496:	f7ff bfbd 	b.w	801f414 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0801f49c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 801f49c:	b538      	push	{r3, r4, r5, lr}
 801f49e:	4c15      	ldr	r4, [pc, #84]	; (801f4f4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 801f4a0:	4605      	mov	r5, r0
 801f4a2:	7823      	ldrb	r3, [r4, #0]
 801f4a4:	f3bf 8f5b 	dmb	ish
 801f4a8:	07da      	lsls	r2, r3, #31
 801f4aa:	d40b      	bmi.n	801f4c4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801f4ac:	4620      	mov	r0, r4
 801f4ae:	f007 f96c 	bl	802678a <__cxa_guard_acquire>
 801f4b2:	b138      	cbz	r0, 801f4c4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801f4b4:	4620      	mov	r0, r4
 801f4b6:	f007 f974 	bl	80267a2 <__cxa_guard_release>
 801f4ba:	4a0f      	ldr	r2, [pc, #60]	; (801f4f8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801f4bc:	490f      	ldr	r1, [pc, #60]	; (801f4fc <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 801f4be:	4810      	ldr	r0, [pc, #64]	; (801f500 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801f4c0:	f007 f95c 	bl	802677c <__aeabi_atexit>
 801f4c4:	4c0f      	ldr	r4, [pc, #60]	; (801f504 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 801f4c6:	7823      	ldrb	r3, [r4, #0]
 801f4c8:	f3bf 8f5b 	dmb	ish
 801f4cc:	07db      	lsls	r3, r3, #31
 801f4ce:	d40b      	bmi.n	801f4e8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801f4d0:	4620      	mov	r0, r4
 801f4d2:	f007 f95a 	bl	802678a <__cxa_guard_acquire>
 801f4d6:	b138      	cbz	r0, 801f4e8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801f4d8:	4620      	mov	r0, r4
 801f4da:	f007 f962 	bl	80267a2 <__cxa_guard_release>
 801f4de:	4a06      	ldr	r2, [pc, #24]	; (801f4f8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801f4e0:	4909      	ldr	r1, [pc, #36]	; (801f508 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801f4e2:	480a      	ldr	r0, [pc, #40]	; (801f50c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801f4e4:	f007 f94a 	bl	802677c <__aeabi_atexit>
 801f4e8:	4b05      	ldr	r3, [pc, #20]	; (801f500 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801f4ea:	632b      	str	r3, [r5, #48]	; 0x30
 801f4ec:	4b07      	ldr	r3, [pc, #28]	; (801f50c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801f4ee:	636b      	str	r3, [r5, #52]	; 0x34
 801f4f0:	bd38      	pop	{r3, r4, r5, pc}
 801f4f2:	bf00      	nop
 801f4f4:	2002450c 	.word	0x2002450c
 801f4f8:	20000000 	.word	0x20000000
 801f4fc:	0801d4b3 	.word	0x0801d4b3
 801f500:	2000008c 	.word	0x2000008c
 801f504:	20024510 	.word	0x20024510
 801f508:	0801d4b1 	.word	0x0801d4b1
 801f50c:	20000090 	.word	0x20000090

0801f510 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 801f510:	b538      	push	{r3, r4, r5, lr}
 801f512:	4c15      	ldr	r4, [pc, #84]	; (801f568 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 801f514:	4605      	mov	r5, r0
 801f516:	7823      	ldrb	r3, [r4, #0]
 801f518:	f3bf 8f5b 	dmb	ish
 801f51c:	07da      	lsls	r2, r3, #31
 801f51e:	d40b      	bmi.n	801f538 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801f520:	4620      	mov	r0, r4
 801f522:	f007 f932 	bl	802678a <__cxa_guard_acquire>
 801f526:	b138      	cbz	r0, 801f538 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801f528:	4620      	mov	r0, r4
 801f52a:	f007 f93a 	bl	80267a2 <__cxa_guard_release>
 801f52e:	4a0f      	ldr	r2, [pc, #60]	; (801f56c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801f530:	490f      	ldr	r1, [pc, #60]	; (801f570 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801f532:	4810      	ldr	r0, [pc, #64]	; (801f574 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801f534:	f007 f922 	bl	802677c <__aeabi_atexit>
 801f538:	4c0f      	ldr	r4, [pc, #60]	; (801f578 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 801f53a:	7823      	ldrb	r3, [r4, #0]
 801f53c:	f3bf 8f5b 	dmb	ish
 801f540:	07db      	lsls	r3, r3, #31
 801f542:	d40b      	bmi.n	801f55c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801f544:	4620      	mov	r0, r4
 801f546:	f007 f920 	bl	802678a <__cxa_guard_acquire>
 801f54a:	b138      	cbz	r0, 801f55c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801f54c:	4620      	mov	r0, r4
 801f54e:	f007 f928 	bl	80267a2 <__cxa_guard_release>
 801f552:	4a06      	ldr	r2, [pc, #24]	; (801f56c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801f554:	4909      	ldr	r1, [pc, #36]	; (801f57c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801f556:	480a      	ldr	r0, [pc, #40]	; (801f580 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801f558:	f007 f910 	bl	802677c <__aeabi_atexit>
 801f55c:	4b05      	ldr	r3, [pc, #20]	; (801f574 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801f55e:	62ab      	str	r3, [r5, #40]	; 0x28
 801f560:	4b07      	ldr	r3, [pc, #28]	; (801f580 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801f562:	62eb      	str	r3, [r5, #44]	; 0x2c
 801f564:	bd38      	pop	{r3, r4, r5, pc}
 801f566:	bf00      	nop
 801f568:	200244dc 	.word	0x200244dc
 801f56c:	20000000 	.word	0x20000000
 801f570:	0801d4b7 	.word	0x0801d4b7
 801f574:	2000005c 	.word	0x2000005c
 801f578:	200244e0 	.word	0x200244e0
 801f57c:	0801d4b5 	.word	0x0801d4b5
 801f580:	20000060 	.word	0x20000060

0801f584 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>:
 801f584:	b510      	push	{r4, lr}
 801f586:	4604      	mov	r4, r0
 801f588:	f7ff ff88 	bl	801f49c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 801f58c:	4620      	mov	r0, r4
 801f58e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f592:	f7ff bfbd 	b.w	801f510 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

0801f598 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
 801f598:	b538      	push	{r3, r4, r5, lr}
 801f59a:	4c15      	ldr	r4, [pc, #84]	; (801f5f0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 801f59c:	4605      	mov	r5, r0
 801f59e:	7823      	ldrb	r3, [r4, #0]
 801f5a0:	f3bf 8f5b 	dmb	ish
 801f5a4:	07da      	lsls	r2, r3, #31
 801f5a6:	d40b      	bmi.n	801f5c0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 801f5a8:	4620      	mov	r0, r4
 801f5aa:	f007 f8ee 	bl	802678a <__cxa_guard_acquire>
 801f5ae:	b138      	cbz	r0, 801f5c0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 801f5b0:	4620      	mov	r0, r4
 801f5b2:	f007 f8f6 	bl	80267a2 <__cxa_guard_release>
 801f5b6:	4a0f      	ldr	r2, [pc, #60]	; (801f5f4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 801f5b8:	490f      	ldr	r1, [pc, #60]	; (801f5f8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 801f5ba:	4810      	ldr	r0, [pc, #64]	; (801f5fc <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 801f5bc:	f007 f8de 	bl	802677c <__aeabi_atexit>
 801f5c0:	4c0f      	ldr	r4, [pc, #60]	; (801f600 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
 801f5c2:	7823      	ldrb	r3, [r4, #0]
 801f5c4:	f3bf 8f5b 	dmb	ish
 801f5c8:	07db      	lsls	r3, r3, #31
 801f5ca:	d40b      	bmi.n	801f5e4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 801f5cc:	4620      	mov	r0, r4
 801f5ce:	f007 f8dc 	bl	802678a <__cxa_guard_acquire>
 801f5d2:	b138      	cbz	r0, 801f5e4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 801f5d4:	4620      	mov	r0, r4
 801f5d6:	f007 f8e4 	bl	80267a2 <__cxa_guard_release>
 801f5da:	4a06      	ldr	r2, [pc, #24]	; (801f5f4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 801f5dc:	4909      	ldr	r1, [pc, #36]	; (801f604 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 801f5de:	480a      	ldr	r0, [pc, #40]	; (801f608 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 801f5e0:	f007 f8cc 	bl	802677c <__aeabi_atexit>
 801f5e4:	4b05      	ldr	r3, [pc, #20]	; (801f5fc <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 801f5e6:	652b      	str	r3, [r5, #80]	; 0x50
 801f5e8:	4b07      	ldr	r3, [pc, #28]	; (801f608 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 801f5ea:	656b      	str	r3, [r5, #84]	; 0x54
 801f5ec:	bd38      	pop	{r3, r4, r5, pc}
 801f5ee:	bf00      	nop
 801f5f0:	20024514 	.word	0x20024514
 801f5f4:	20000000 	.word	0x20000000
 801f5f8:	0801d4a3 	.word	0x0801d4a3
 801f5fc:	20000094 	.word	0x20000094
 801f600:	20024518 	.word	0x20024518
 801f604:	0801d4a1 	.word	0x0801d4a1
 801f608:	20000098 	.word	0x20000098

0801f60c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
 801f60c:	b538      	push	{r3, r4, r5, lr}
 801f60e:	4c15      	ldr	r4, [pc, #84]	; (801f664 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 801f610:	4605      	mov	r5, r0
 801f612:	7823      	ldrb	r3, [r4, #0]
 801f614:	f3bf 8f5b 	dmb	ish
 801f618:	07da      	lsls	r2, r3, #31
 801f61a:	d40b      	bmi.n	801f634 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 801f61c:	4620      	mov	r0, r4
 801f61e:	f007 f8b4 	bl	802678a <__cxa_guard_acquire>
 801f622:	b138      	cbz	r0, 801f634 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 801f624:	4620      	mov	r0, r4
 801f626:	f007 f8bc 	bl	80267a2 <__cxa_guard_release>
 801f62a:	4a0f      	ldr	r2, [pc, #60]	; (801f668 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 801f62c:	490f      	ldr	r1, [pc, #60]	; (801f66c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 801f62e:	4810      	ldr	r0, [pc, #64]	; (801f670 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 801f630:	f007 f8a4 	bl	802677c <__aeabi_atexit>
 801f634:	4c0f      	ldr	r4, [pc, #60]	; (801f674 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
 801f636:	7823      	ldrb	r3, [r4, #0]
 801f638:	f3bf 8f5b 	dmb	ish
 801f63c:	07db      	lsls	r3, r3, #31
 801f63e:	d40b      	bmi.n	801f658 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 801f640:	4620      	mov	r0, r4
 801f642:	f007 f8a2 	bl	802678a <__cxa_guard_acquire>
 801f646:	b138      	cbz	r0, 801f658 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 801f648:	4620      	mov	r0, r4
 801f64a:	f007 f8aa 	bl	80267a2 <__cxa_guard_release>
 801f64e:	4a06      	ldr	r2, [pc, #24]	; (801f668 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 801f650:	4909      	ldr	r1, [pc, #36]	; (801f678 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 801f652:	480a      	ldr	r0, [pc, #40]	; (801f67c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 801f654:	f007 f892 	bl	802677c <__aeabi_atexit>
 801f658:	4b05      	ldr	r3, [pc, #20]	; (801f670 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 801f65a:	64ab      	str	r3, [r5, #72]	; 0x48
 801f65c:	4b07      	ldr	r3, [pc, #28]	; (801f67c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 801f65e:	64eb      	str	r3, [r5, #76]	; 0x4c
 801f660:	bd38      	pop	{r3, r4, r5, pc}
 801f662:	bf00      	nop
 801f664:	2002451c 	.word	0x2002451c
 801f668:	20000000 	.word	0x20000000
 801f66c:	0801d4a7 	.word	0x0801d4a7
 801f670:	2000009c 	.word	0x2000009c
 801f674:	20024520 	.word	0x20024520
 801f678:	0801d4a5 	.word	0x0801d4a5
 801f67c:	200000a0 	.word	0x200000a0

0801f680 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
 801f680:	b538      	push	{r3, r4, r5, lr}
 801f682:	4c15      	ldr	r4, [pc, #84]	; (801f6d8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 801f684:	4605      	mov	r5, r0
 801f686:	7823      	ldrb	r3, [r4, #0]
 801f688:	f3bf 8f5b 	dmb	ish
 801f68c:	07da      	lsls	r2, r3, #31
 801f68e:	d40b      	bmi.n	801f6a8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 801f690:	4620      	mov	r0, r4
 801f692:	f007 f87a 	bl	802678a <__cxa_guard_acquire>
 801f696:	b138      	cbz	r0, 801f6a8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 801f698:	4620      	mov	r0, r4
 801f69a:	f007 f882 	bl	80267a2 <__cxa_guard_release>
 801f69e:	4a0f      	ldr	r2, [pc, #60]	; (801f6dc <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 801f6a0:	490f      	ldr	r1, [pc, #60]	; (801f6e0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 801f6a2:	4810      	ldr	r0, [pc, #64]	; (801f6e4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 801f6a4:	f007 f86a 	bl	802677c <__aeabi_atexit>
 801f6a8:	4c0f      	ldr	r4, [pc, #60]	; (801f6e8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
 801f6aa:	7823      	ldrb	r3, [r4, #0]
 801f6ac:	f3bf 8f5b 	dmb	ish
 801f6b0:	07db      	lsls	r3, r3, #31
 801f6b2:	d40b      	bmi.n	801f6cc <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 801f6b4:	4620      	mov	r0, r4
 801f6b6:	f007 f868 	bl	802678a <__cxa_guard_acquire>
 801f6ba:	b138      	cbz	r0, 801f6cc <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 801f6bc:	4620      	mov	r0, r4
 801f6be:	f007 f870 	bl	80267a2 <__cxa_guard_release>
 801f6c2:	4a06      	ldr	r2, [pc, #24]	; (801f6dc <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 801f6c4:	4909      	ldr	r1, [pc, #36]	; (801f6ec <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 801f6c6:	480a      	ldr	r0, [pc, #40]	; (801f6f0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 801f6c8:	f007 f858 	bl	802677c <__aeabi_atexit>
 801f6cc:	4b05      	ldr	r3, [pc, #20]	; (801f6e4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 801f6ce:	642b      	str	r3, [r5, #64]	; 0x40
 801f6d0:	4b07      	ldr	r3, [pc, #28]	; (801f6f0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 801f6d2:	646b      	str	r3, [r5, #68]	; 0x44
 801f6d4:	bd38      	pop	{r3, r4, r5, pc}
 801f6d6:	bf00      	nop
 801f6d8:	200244e4 	.word	0x200244e4
 801f6dc:	20000000 	.word	0x20000000
 801f6e0:	0801d4ab 	.word	0x0801d4ab
 801f6e4:	20000064 	.word	0x20000064
 801f6e8:	200244e8 	.word	0x200244e8
 801f6ec:	0801d4a9 	.word	0x0801d4a9
 801f6f0:	20000068 	.word	0x20000068

0801f6f4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
 801f6f4:	b538      	push	{r3, r4, r5, lr}
 801f6f6:	4c15      	ldr	r4, [pc, #84]	; (801f74c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 801f6f8:	4605      	mov	r5, r0
 801f6fa:	7823      	ldrb	r3, [r4, #0]
 801f6fc:	f3bf 8f5b 	dmb	ish
 801f700:	07da      	lsls	r2, r3, #31
 801f702:	d40b      	bmi.n	801f71c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 801f704:	4620      	mov	r0, r4
 801f706:	f007 f840 	bl	802678a <__cxa_guard_acquire>
 801f70a:	b138      	cbz	r0, 801f71c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 801f70c:	4620      	mov	r0, r4
 801f70e:	f007 f848 	bl	80267a2 <__cxa_guard_release>
 801f712:	4a0f      	ldr	r2, [pc, #60]	; (801f750 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 801f714:	490f      	ldr	r1, [pc, #60]	; (801f754 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 801f716:	4810      	ldr	r0, [pc, #64]	; (801f758 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 801f718:	f007 f830 	bl	802677c <__aeabi_atexit>
 801f71c:	4c0f      	ldr	r4, [pc, #60]	; (801f75c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
 801f71e:	7823      	ldrb	r3, [r4, #0]
 801f720:	f3bf 8f5b 	dmb	ish
 801f724:	07db      	lsls	r3, r3, #31
 801f726:	d40b      	bmi.n	801f740 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 801f728:	4620      	mov	r0, r4
 801f72a:	f007 f82e 	bl	802678a <__cxa_guard_acquire>
 801f72e:	b138      	cbz	r0, 801f740 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 801f730:	4620      	mov	r0, r4
 801f732:	f007 f836 	bl	80267a2 <__cxa_guard_release>
 801f736:	4a06      	ldr	r2, [pc, #24]	; (801f750 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 801f738:	4909      	ldr	r1, [pc, #36]	; (801f760 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 801f73a:	480a      	ldr	r0, [pc, #40]	; (801f764 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 801f73c:	f007 f81e 	bl	802677c <__aeabi_atexit>
 801f740:	4b05      	ldr	r3, [pc, #20]	; (801f758 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 801f742:	63ab      	str	r3, [r5, #56]	; 0x38
 801f744:	4b07      	ldr	r3, [pc, #28]	; (801f764 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 801f746:	63eb      	str	r3, [r5, #60]	; 0x3c
 801f748:	bd38      	pop	{r3, r4, r5, pc}
 801f74a:	bf00      	nop
 801f74c:	20024504 	.word	0x20024504
 801f750:	20000000 	.word	0x20000000
 801f754:	0801d4af 	.word	0x0801d4af
 801f758:	20000084 	.word	0x20000084
 801f75c:	20024508 	.word	0x20024508
 801f760:	0801d4ad 	.word	0x0801d4ad
 801f764:	20000088 	.word	0x20000088

0801f768 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>:
 801f768:	b510      	push	{r4, lr}
 801f76a:	4604      	mov	r4, r0
 801f76c:	f7ff ff14 	bl	801f598 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
 801f770:	4620      	mov	r0, r4
 801f772:	f7ff ff85 	bl	801f680 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
 801f776:	4620      	mov	r0, r4
 801f778:	f7ff ff48 	bl	801f60c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
 801f77c:	4620      	mov	r0, r4
 801f77e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f782:	f7ff bfb7 	b.w	801f6f4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

0801f788 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 801f788:	b538      	push	{r3, r4, r5, lr}
 801f78a:	4c15      	ldr	r4, [pc, #84]	; (801f7e0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 801f78c:	4605      	mov	r5, r0
 801f78e:	7823      	ldrb	r3, [r4, #0]
 801f790:	f3bf 8f5b 	dmb	ish
 801f794:	07da      	lsls	r2, r3, #31
 801f796:	d40b      	bmi.n	801f7b0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801f798:	4620      	mov	r0, r4
 801f79a:	f006 fff6 	bl	802678a <__cxa_guard_acquire>
 801f79e:	b138      	cbz	r0, 801f7b0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801f7a0:	4620      	mov	r0, r4
 801f7a2:	f006 fffe 	bl	80267a2 <__cxa_guard_release>
 801f7a6:	4a0f      	ldr	r2, [pc, #60]	; (801f7e4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801f7a8:	490f      	ldr	r1, [pc, #60]	; (801f7e8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801f7aa:	4810      	ldr	r0, [pc, #64]	; (801f7ec <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801f7ac:	f006 ffe6 	bl	802677c <__aeabi_atexit>
 801f7b0:	4c0f      	ldr	r4, [pc, #60]	; (801f7f0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 801f7b2:	7823      	ldrb	r3, [r4, #0]
 801f7b4:	f3bf 8f5b 	dmb	ish
 801f7b8:	07db      	lsls	r3, r3, #31
 801f7ba:	d40b      	bmi.n	801f7d4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801f7bc:	4620      	mov	r0, r4
 801f7be:	f006 ffe4 	bl	802678a <__cxa_guard_acquire>
 801f7c2:	b138      	cbz	r0, 801f7d4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801f7c4:	4620      	mov	r0, r4
 801f7c6:	f006 ffec 	bl	80267a2 <__cxa_guard_release>
 801f7ca:	4a06      	ldr	r2, [pc, #24]	; (801f7e4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801f7cc:	4909      	ldr	r1, [pc, #36]	; (801f7f4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 801f7ce:	480a      	ldr	r0, [pc, #40]	; (801f7f8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801f7d0:	f006 ffd4 	bl	802677c <__aeabi_atexit>
 801f7d4:	4b05      	ldr	r3, [pc, #20]	; (801f7ec <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801f7d6:	662b      	str	r3, [r5, #96]	; 0x60
 801f7d8:	4b07      	ldr	r3, [pc, #28]	; (801f7f8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801f7da:	666b      	str	r3, [r5, #100]	; 0x64
 801f7dc:	bd38      	pop	{r3, r4, r5, pc}
 801f7de:	bf00      	nop
 801f7e0:	200244ec 	.word	0x200244ec
 801f7e4:	20000000 	.word	0x20000000
 801f7e8:	0801d49b 	.word	0x0801d49b
 801f7ec:	2000006c 	.word	0x2000006c
 801f7f0:	200244f0 	.word	0x200244f0
 801f7f4:	0801d499 	.word	0x0801d499
 801f7f8:	20000070 	.word	0x20000070

0801f7fc <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 801f7fc:	b538      	push	{r3, r4, r5, lr}
 801f7fe:	4c15      	ldr	r4, [pc, #84]	; (801f854 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 801f800:	4605      	mov	r5, r0
 801f802:	7823      	ldrb	r3, [r4, #0]
 801f804:	f3bf 8f5b 	dmb	ish
 801f808:	07da      	lsls	r2, r3, #31
 801f80a:	d40b      	bmi.n	801f824 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801f80c:	4620      	mov	r0, r4
 801f80e:	f006 ffbc 	bl	802678a <__cxa_guard_acquire>
 801f812:	b138      	cbz	r0, 801f824 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801f814:	4620      	mov	r0, r4
 801f816:	f006 ffc4 	bl	80267a2 <__cxa_guard_release>
 801f81a:	4a0f      	ldr	r2, [pc, #60]	; (801f858 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801f81c:	490f      	ldr	r1, [pc, #60]	; (801f85c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 801f81e:	4810      	ldr	r0, [pc, #64]	; (801f860 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801f820:	f006 ffac 	bl	802677c <__aeabi_atexit>
 801f824:	4c0f      	ldr	r4, [pc, #60]	; (801f864 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 801f826:	7823      	ldrb	r3, [r4, #0]
 801f828:	f3bf 8f5b 	dmb	ish
 801f82c:	07db      	lsls	r3, r3, #31
 801f82e:	d40b      	bmi.n	801f848 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801f830:	4620      	mov	r0, r4
 801f832:	f006 ffaa 	bl	802678a <__cxa_guard_acquire>
 801f836:	b138      	cbz	r0, 801f848 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801f838:	4620      	mov	r0, r4
 801f83a:	f006 ffb2 	bl	80267a2 <__cxa_guard_release>
 801f83e:	4a06      	ldr	r2, [pc, #24]	; (801f858 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801f840:	4909      	ldr	r1, [pc, #36]	; (801f868 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801f842:	480a      	ldr	r0, [pc, #40]	; (801f86c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801f844:	f006 ff9a 	bl	802677c <__aeabi_atexit>
 801f848:	4b05      	ldr	r3, [pc, #20]	; (801f860 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801f84a:	65ab      	str	r3, [r5, #88]	; 0x58
 801f84c:	4b07      	ldr	r3, [pc, #28]	; (801f86c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801f84e:	65eb      	str	r3, [r5, #92]	; 0x5c
 801f850:	bd38      	pop	{r3, r4, r5, pc}
 801f852:	bf00      	nop
 801f854:	200244c4 	.word	0x200244c4
 801f858:	20000000 	.word	0x20000000
 801f85c:	0801d49f 	.word	0x0801d49f
 801f860:	20000044 	.word	0x20000044
 801f864:	200244c8 	.word	0x200244c8
 801f868:	0801d49d 	.word	0x0801d49d
 801f86c:	20000048 	.word	0x20000048

0801f870 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>:
 801f870:	b510      	push	{r4, lr}
 801f872:	4604      	mov	r4, r0
 801f874:	f7ff ff88 	bl	801f788 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 801f878:	4620      	mov	r0, r4
 801f87a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f87e:	f7ff bfbd 	b.w	801f7fc <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

0801f884 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 801f884:	b538      	push	{r3, r4, r5, lr}
 801f886:	4c15      	ldr	r4, [pc, #84]	; (801f8dc <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 801f888:	4605      	mov	r5, r0
 801f88a:	7823      	ldrb	r3, [r4, #0]
 801f88c:	f3bf 8f5b 	dmb	ish
 801f890:	07da      	lsls	r2, r3, #31
 801f892:	d40b      	bmi.n	801f8ac <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801f894:	4620      	mov	r0, r4
 801f896:	f006 ff78 	bl	802678a <__cxa_guard_acquire>
 801f89a:	b138      	cbz	r0, 801f8ac <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801f89c:	4620      	mov	r0, r4
 801f89e:	f006 ff80 	bl	80267a2 <__cxa_guard_release>
 801f8a2:	4a0f      	ldr	r2, [pc, #60]	; (801f8e0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801f8a4:	490f      	ldr	r1, [pc, #60]	; (801f8e4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801f8a6:	4810      	ldr	r0, [pc, #64]	; (801f8e8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801f8a8:	f006 ff68 	bl	802677c <__aeabi_atexit>
 801f8ac:	4c0f      	ldr	r4, [pc, #60]	; (801f8ec <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 801f8ae:	7823      	ldrb	r3, [r4, #0]
 801f8b0:	f3bf 8f5b 	dmb	ish
 801f8b4:	07db      	lsls	r3, r3, #31
 801f8b6:	d40b      	bmi.n	801f8d0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801f8b8:	4620      	mov	r0, r4
 801f8ba:	f006 ff66 	bl	802678a <__cxa_guard_acquire>
 801f8be:	b138      	cbz	r0, 801f8d0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801f8c0:	4620      	mov	r0, r4
 801f8c2:	f006 ff6e 	bl	80267a2 <__cxa_guard_release>
 801f8c6:	4a06      	ldr	r2, [pc, #24]	; (801f8e0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801f8c8:	4909      	ldr	r1, [pc, #36]	; (801f8f0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801f8ca:	480a      	ldr	r0, [pc, #40]	; (801f8f4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801f8cc:	f006 ff56 	bl	802677c <__aeabi_atexit>
 801f8d0:	4b05      	ldr	r3, [pc, #20]	; (801f8e8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801f8d2:	672b      	str	r3, [r5, #112]	; 0x70
 801f8d4:	4b07      	ldr	r3, [pc, #28]	; (801f8f4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801f8d6:	676b      	str	r3, [r5, #116]	; 0x74
 801f8d8:	bd38      	pop	{r3, r4, r5, pc}
 801f8da:	bf00      	nop
 801f8dc:	200244bc 	.word	0x200244bc
 801f8e0:	20000000 	.word	0x20000000
 801f8e4:	0801d493 	.word	0x0801d493
 801f8e8:	2000003c 	.word	0x2000003c
 801f8ec:	200244c0 	.word	0x200244c0
 801f8f0:	0801d491 	.word	0x0801d491
 801f8f4:	20000040 	.word	0x20000040

0801f8f8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>:
 801f8f8:	b538      	push	{r3, r4, r5, lr}
 801f8fa:	4c15      	ldr	r4, [pc, #84]	; (801f950 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 801f8fc:	4605      	mov	r5, r0
 801f8fe:	7823      	ldrb	r3, [r4, #0]
 801f900:	f3bf 8f5b 	dmb	ish
 801f904:	07da      	lsls	r2, r3, #31
 801f906:	d40b      	bmi.n	801f920 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801f908:	4620      	mov	r0, r4
 801f90a:	f006 ff3e 	bl	802678a <__cxa_guard_acquire>
 801f90e:	b138      	cbz	r0, 801f920 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801f910:	4620      	mov	r0, r4
 801f912:	f006 ff46 	bl	80267a2 <__cxa_guard_release>
 801f916:	4a0f      	ldr	r2, [pc, #60]	; (801f954 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801f918:	490f      	ldr	r1, [pc, #60]	; (801f958 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801f91a:	4810      	ldr	r0, [pc, #64]	; (801f95c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801f91c:	f006 ff2e 	bl	802677c <__aeabi_atexit>
 801f920:	4c0f      	ldr	r4, [pc, #60]	; (801f960 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 801f922:	7823      	ldrb	r3, [r4, #0]
 801f924:	f3bf 8f5b 	dmb	ish
 801f928:	07db      	lsls	r3, r3, #31
 801f92a:	d40b      	bmi.n	801f944 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801f92c:	4620      	mov	r0, r4
 801f92e:	f006 ff2c 	bl	802678a <__cxa_guard_acquire>
 801f932:	b138      	cbz	r0, 801f944 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801f934:	4620      	mov	r0, r4
 801f936:	f006 ff34 	bl	80267a2 <__cxa_guard_release>
 801f93a:	4a06      	ldr	r2, [pc, #24]	; (801f954 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801f93c:	4909      	ldr	r1, [pc, #36]	; (801f964 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 801f93e:	480a      	ldr	r0, [pc, #40]	; (801f968 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801f940:	f006 ff1c 	bl	802677c <__aeabi_atexit>
 801f944:	4b05      	ldr	r3, [pc, #20]	; (801f95c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801f946:	66ab      	str	r3, [r5, #104]	; 0x68
 801f948:	4b07      	ldr	r3, [pc, #28]	; (801f968 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801f94a:	66eb      	str	r3, [r5, #108]	; 0x6c
 801f94c:	bd38      	pop	{r3, r4, r5, pc}
 801f94e:	bf00      	nop
 801f950:	200244b4 	.word	0x200244b4
 801f954:	20000000 	.word	0x20000000
 801f958:	0801d497 	.word	0x0801d497
 801f95c:	20000034 	.word	0x20000034
 801f960:	200244b8 	.word	0x200244b8
 801f964:	0801d495 	.word	0x0801d495
 801f968:	20000038 	.word	0x20000038

0801f96c <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>:
 801f96c:	b510      	push	{r4, lr}
 801f96e:	4604      	mov	r4, r0
 801f970:	f7ff ff88 	bl	801f884 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>
 801f974:	4620      	mov	r0, r4
 801f976:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f97a:	f7ff bfbd 	b.w	801f8f8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>

0801f97e <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>:
 801f97e:	b510      	push	{r4, lr}
 801f980:	4604      	mov	r4, r0
 801f982:	f7ff fff3 	bl	801f96c <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>
 801f986:	4620      	mov	r0, r4
 801f988:	f7ff ff72 	bl	801f870 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>
 801f98c:	4620      	mov	r0, r4
 801f98e:	f7ff fdf9 	bl	801f584 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>
 801f992:	4620      	mov	r0, r4
 801f994:	f7ff fcfa 	bl	801f38c <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>
 801f998:	4620      	mov	r0, r4
 801f99a:	f7ff fd75 	bl	801f488 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>
 801f99e:	4620      	mov	r0, r4
 801f9a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f9a4:	f7ff bee0 	b.w	801f768 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>

0801f9a8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>:
 801f9a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f9ac:	e9dd 450b 	ldrd	r4, r5, [sp, #44]	; 0x2c
 801f9b0:	f9bd e024 	ldrsh.w	lr, [sp, #36]	; 0x24
 801f9b4:	2d00      	cmp	r5, #0
 801f9b6:	f9bd b028 	ldrsh.w	fp, [sp, #40]	; 0x28
 801f9ba:	fb05 4c0e 	mla	ip, r5, lr, r4
 801f9be:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
 801f9c2:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 801f9c6:	f89d 603c 	ldrb.w	r6, [sp, #60]	; 0x3c
 801f9ca:	eb02 0a0c 	add.w	sl, r2, ip
 801f9ce:	8808      	ldrh	r0, [r1, #0]
 801f9d0:	f2c0 80b0 	blt.w	801fb34 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
 801f9d4:	45ab      	cmp	fp, r5
 801f9d6:	f340 80ad 	ble.w	801fb34 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
 801f9da:	2c00      	cmp	r4, #0
 801f9dc:	f2c0 80a8 	blt.w	801fb30 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
 801f9e0:	45a6      	cmp	lr, r4
 801f9e2:	f340 80a5 	ble.w	801fb30 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
 801f9e6:	f812 200c 	ldrb.w	r2, [r2, ip]
 801f9ea:	f833 8012 	ldrh.w	r8, [r3, r2, lsl #1]
 801f9ee:	1c62      	adds	r2, r4, #1
 801f9f0:	f100 80a3 	bmi.w	801fb3a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 801f9f4:	4596      	cmp	lr, r2
 801f9f6:	f340 80a0 	ble.w	801fb3a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 801f9fa:	f1b9 0f00 	cmp.w	r9, #0
 801f9fe:	f000 809c 	beq.w	801fb3a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 801fa02:	f89a 2001 	ldrb.w	r2, [sl, #1]
 801fa06:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 801fa0a:	3501      	adds	r5, #1
 801fa0c:	f100 8099 	bmi.w	801fb42 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 801fa10:	45ab      	cmp	fp, r5
 801fa12:	f340 8096 	ble.w	801fb42 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 801fa16:	2f00      	cmp	r7, #0
 801fa18:	f000 8093 	beq.w	801fb42 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 801fa1c:	2c00      	cmp	r4, #0
 801fa1e:	f2c0 808e 	blt.w	801fb3e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
 801fa22:	45a6      	cmp	lr, r4
 801fa24:	f340 808b 	ble.w	801fb3e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
 801fa28:	f81a 200e 	ldrb.w	r2, [sl, lr]
 801fa2c:	f833 5012 	ldrh.w	r5, [r3, r2, lsl #1]
 801fa30:	3401      	adds	r4, #1
 801fa32:	f100 8089 	bmi.w	801fb48 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 801fa36:	45a6      	cmp	lr, r4
 801fa38:	f340 8086 	ble.w	801fb48 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 801fa3c:	f1b9 0f00 	cmp.w	r9, #0
 801fa40:	f000 8082 	beq.w	801fb48 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 801fa44:	44d6      	add	lr, sl
 801fa46:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801fa4a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801fa4e:	ea4f 4408 	mov.w	r4, r8, lsl #16
 801fa52:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 801fa56:	fb19 fe07 	smulbb	lr, r9, r7
 801fa5a:	f1c7 0210 	rsb	r2, r7, #16
 801fa5e:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 801fa62:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 801fa66:	eba2 0209 	sub.w	r2, r2, r9
 801fa6a:	ea44 0808 	orr.w	r8, r4, r8
 801fa6e:	ea4f 440c 	mov.w	r4, ip, lsl #16
 801fa72:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801fa76:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 801fa7a:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 801fa7e:	ebce 0747 	rsb	r7, lr, r7, lsl #1
 801fa82:	ea44 0c0c 	orr.w	ip, r4, ip
 801fa86:	ebce 0449 	rsb	r4, lr, r9, lsl #1
 801fa8a:	fb04 f40c 	mul.w	r4, r4, ip
 801fa8e:	fb02 4808 	mla	r8, r2, r8, r4
 801fa92:	041a      	lsls	r2, r3, #16
 801fa94:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801fa98:	b2b4      	uxth	r4, r6
 801fa9a:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801fa9e:	43f6      	mvns	r6, r6
 801faa0:	4313      	orrs	r3, r2
 801faa2:	042a      	lsls	r2, r5, #16
 801faa4:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 801faa8:	b2f6      	uxtb	r6, r6
 801faaa:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801faae:	fb0e 8303 	mla	r3, lr, r3, r8
 801fab2:	432a      	orrs	r2, r5
 801fab4:	fb07 3202 	mla	r2, r7, r2, r3
 801fab8:	10c7      	asrs	r7, r0, #3
 801faba:	0d53      	lsrs	r3, r2, #21
 801fabc:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801fac0:	0952      	lsrs	r2, r2, #5
 801fac2:	fb17 f706 	smulbb	r7, r7, r6
 801fac6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801faca:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801face:	431a      	orrs	r2, r3
 801fad0:	b293      	uxth	r3, r2
 801fad2:	1202      	asrs	r2, r0, #8
 801fad4:	121d      	asrs	r5, r3, #8
 801fad6:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801fada:	00c0      	lsls	r0, r0, #3
 801fadc:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801fae0:	fb12 f206 	smulbb	r2, r2, r6
 801fae4:	b2c0      	uxtb	r0, r0
 801fae6:	fb05 2504 	mla	r5, r5, r4, r2
 801faea:	10da      	asrs	r2, r3, #3
 801faec:	fb10 f006 	smulbb	r0, r0, r6
 801faf0:	00db      	lsls	r3, r3, #3
 801faf2:	b2ad      	uxth	r5, r5
 801faf4:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801faf8:	b2db      	uxtb	r3, r3
 801fafa:	fb02 7204 	mla	r2, r2, r4, r7
 801fafe:	fb03 0004 	mla	r0, r3, r4, r0
 801fb02:	1c6b      	adds	r3, r5, #1
 801fb04:	b292      	uxth	r2, r2
 801fb06:	b280      	uxth	r0, r0
 801fb08:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801fb0c:	1c43      	adds	r3, r0, #1
 801fb0e:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801fb12:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801fb16:	1c50      	adds	r0, r2, #1
 801fb18:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801fb1c:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801fb20:	0952      	lsrs	r2, r2, #5
 801fb22:	432b      	orrs	r3, r5
 801fb24:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801fb28:	4313      	orrs	r3, r2
 801fb2a:	800b      	strh	r3, [r1, #0]
 801fb2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fb30:	4680      	mov	r8, r0
 801fb32:	e75c      	b.n	801f9ee <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x46>
 801fb34:	4684      	mov	ip, r0
 801fb36:	4680      	mov	r8, r0
 801fb38:	e767      	b.n	801fa0a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
 801fb3a:	4684      	mov	ip, r0
 801fb3c:	e765      	b.n	801fa0a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
 801fb3e:	4605      	mov	r5, r0
 801fb40:	e776      	b.n	801fa30 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x88>
 801fb42:	4603      	mov	r3, r0
 801fb44:	4605      	mov	r5, r0
 801fb46:	e782      	b.n	801fa4e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 801fb48:	4603      	mov	r3, r0
 801fb4a:	e780      	b.n	801fa4e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>

0801fb4c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fb4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fb50:	b099      	sub	sp, #100	; 0x64
 801fb52:	9215      	str	r2, [sp, #84]	; 0x54
 801fb54:	9309      	str	r3, [sp, #36]	; 0x24
 801fb56:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801fb58:	f89d 30ac 	ldrb.w	r3, [sp, #172]	; 0xac
 801fb5c:	9016      	str	r0, [sp, #88]	; 0x58
 801fb5e:	930d      	str	r3, [sp, #52]	; 0x34
 801fb60:	6850      	ldr	r0, [r2, #4]
 801fb62:	910c      	str	r1, [sp, #48]	; 0x30
 801fb64:	6812      	ldr	r2, [r2, #0]
 801fb66:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
 801fb6a:	e9dd a523 	ldrd	sl, r5, [sp, #140]	; 0x8c
 801fb6e:	fb00 1303 	mla	r3, r0, r3, r1
 801fb72:	eb02 0843 	add.w	r8, r2, r3, lsl #1
 801fb76:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801fb78:	681b      	ldr	r3, [r3, #0]
 801fb7a:	930b      	str	r3, [sp, #44]	; 0x2c
 801fb7c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801fb7e:	685e      	ldr	r6, [r3, #4]
 801fb80:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801fb82:	3604      	adds	r6, #4
 801fb84:	43db      	mvns	r3, r3
 801fb86:	b2db      	uxtb	r3, r3
 801fb88:	930a      	str	r3, [sp, #40]	; 0x28
 801fb8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801fb8c:	2b00      	cmp	r3, #0
 801fb8e:	dc03      	bgt.n	801fb98 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801fb90:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801fb92:	2b00      	cmp	r3, #0
 801fb94:	f340 8225 	ble.w	801ffe2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 801fb98:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801fb9a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801fb9e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801fba2:	1e48      	subs	r0, r1, #1
 801fba4:	1e57      	subs	r7, r2, #1
 801fba6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fba8:	2b00      	cmp	r3, #0
 801fbaa:	f340 80e3 	ble.w	801fd74 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801fbae:	ea5f 4c2a 	movs.w	ip, sl, asr #16
 801fbb2:	ea4f 4325 	mov.w	r3, r5, asr #16
 801fbb6:	d406      	bmi.n	801fbc6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801fbb8:	4584      	cmp	ip, r0
 801fbba:	da04      	bge.n	801fbc6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801fbbc:	2b00      	cmp	r3, #0
 801fbbe:	db02      	blt.n	801fbc6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801fbc0:	42bb      	cmp	r3, r7
 801fbc2:	f2c0 80d8 	blt.w	801fd76 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801fbc6:	f11c 0c01 	adds.w	ip, ip, #1
 801fbca:	f100 80c9 	bmi.w	801fd60 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801fbce:	4561      	cmp	r1, ip
 801fbd0:	f2c0 80c6 	blt.w	801fd60 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801fbd4:	3301      	adds	r3, #1
 801fbd6:	f100 80c3 	bmi.w	801fd60 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801fbda:	429a      	cmp	r2, r3
 801fbdc:	f2c0 80c0 	blt.w	801fd60 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801fbe0:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 801fbe4:	4647      	mov	r7, r8
 801fbe6:	f1bb 0f00 	cmp.w	fp, #0
 801fbea:	f340 80e3 	ble.w	801fdb4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 801fbee:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801fbf0:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801fbf4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801fbf6:	f3ca 3003 	ubfx	r0, sl, #12, #4
 801fbfa:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 801fbfe:	ea5f 422a 	movs.w	r2, sl, asr #16
 801fc02:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801fc06:	689b      	ldr	r3, [r3, #8]
 801fc08:	f100 8121 	bmi.w	801fe4e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 801fc0c:	f103 39ff 	add.w	r9, r3, #4294967295
 801fc10:	454a      	cmp	r2, r9
 801fc12:	f280 811c 	bge.w	801fe4e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 801fc16:	f1bc 0f00 	cmp.w	ip, #0
 801fc1a:	f2c0 8118 	blt.w	801fe4e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 801fc1e:	f10e 39ff 	add.w	r9, lr, #4294967295
 801fc22:	45cc      	cmp	ip, r9
 801fc24:	f280 8113 	bge.w	801fe4e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 801fc28:	b21b      	sxth	r3, r3
 801fc2a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801fc2c:	fb0c 2203 	mla	r2, ip, r3, r2
 801fc30:	eb04 0902 	add.w	r9, r4, r2
 801fc34:	5ca2      	ldrb	r2, [r4, r2]
 801fc36:	f836 e012 	ldrh.w	lr, [r6, r2, lsl #1]
 801fc3a:	2800      	cmp	r0, #0
 801fc3c:	f000 80fe 	beq.w	801fe3c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 801fc40:	f899 2001 	ldrb.w	r2, [r9, #1]
 801fc44:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 801fc48:	9211      	str	r2, [sp, #68]	; 0x44
 801fc4a:	b151      	cbz	r1, 801fc62 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801fc4c:	eb09 0203 	add.w	r2, r9, r3
 801fc50:	f819 3003 	ldrb.w	r3, [r9, r3]
 801fc54:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801fc58:	930f      	str	r3, [sp, #60]	; 0x3c
 801fc5a:	7853      	ldrb	r3, [r2, #1]
 801fc5c:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801fc60:	9312      	str	r3, [sp, #72]	; 0x48
 801fc62:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801fc64:	fb10 f201 	smulbb	r2, r0, r1
 801fc68:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801fc6a:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801fc6e:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801fc72:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 801fc76:	10d2      	asrs	r2, r2, #3
 801fc78:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801fc7c:	ebc2 0940 	rsb	r9, r2, r0, lsl #1
 801fc80:	ea4c 0c03 	orr.w	ip, ip, r3
 801fc84:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801fc86:	041b      	lsls	r3, r3, #16
 801fc88:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801fc8c:	4323      	orrs	r3, r4
 801fc8e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801fc90:	4353      	muls	r3, r2
 801fc92:	fb09 330c 	mla	r3, r9, ip, r3
 801fc96:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 801fc9a:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801fc9e:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801fca2:	ea4c 0e0e 	orr.w	lr, ip, lr
 801fca6:	f1c1 0c10 	rsb	ip, r1, #16
 801fcaa:	ebac 0c00 	sub.w	ip, ip, r0
 801fcae:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801fcb2:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 801fcb6:	fb0c 3c0e 	mla	ip, ip, lr, r3
 801fcba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801fcbc:	0418      	lsls	r0, r3, #16
 801fcbe:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801fcc2:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801fcc6:	4318      	orrs	r0, r3
 801fcc8:	fb02 c200 	mla	r2, r2, r0, ip
 801fccc:	8838      	ldrh	r0, [r7, #0]
 801fcce:	0d53      	lsrs	r3, r2, #21
 801fcd0:	0952      	lsrs	r2, r2, #5
 801fcd2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801fcd6:	1201      	asrs	r1, r0, #8
 801fcd8:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801fcdc:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 801fce0:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801fce4:	00c0      	lsls	r0, r0, #3
 801fce6:	431a      	orrs	r2, r3
 801fce8:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 801fcec:	fb11 f104 	smulbb	r1, r1, r4
 801fcf0:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 801fcf4:	b292      	uxth	r2, r2
 801fcf6:	fb1e fe04 	smulbb	lr, lr, r4
 801fcfa:	b2c0      	uxtb	r0, r0
 801fcfc:	ea4f 2c22 	mov.w	ip, r2, asr #8
 801fd00:	fb10 f004 	smulbb	r0, r0, r4
 801fd04:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801fd08:	fb0c 1c03 	mla	ip, ip, r3, r1
 801fd0c:	10d1      	asrs	r1, r2, #3
 801fd0e:	00d2      	lsls	r2, r2, #3
 801fd10:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801fd14:	fa1f fc8c 	uxth.w	ip, ip
 801fd18:	b2d2      	uxtb	r2, r2
 801fd1a:	fb01 e103 	mla	r1, r1, r3, lr
 801fd1e:	fb02 0303 	mla	r3, r2, r3, r0
 801fd22:	b289      	uxth	r1, r1
 801fd24:	b29a      	uxth	r2, r3
 801fd26:	f10c 0301 	add.w	r3, ip, #1
 801fd2a:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801fd2e:	1c53      	adds	r3, r2, #1
 801fd30:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801fd34:	1c4a      	adds	r2, r1, #1
 801fd36:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801fd3a:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801fd3e:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801fd42:	0949      	lsrs	r1, r1, #5
 801fd44:	ea43 030c 	orr.w	r3, r3, ip
 801fd48:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801fd4c:	430b      	orrs	r3, r1
 801fd4e:	803b      	strh	r3, [r7, #0]
 801fd50:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801fd52:	3702      	adds	r7, #2
 801fd54:	f10b 3bff 	add.w	fp, fp, #4294967295
 801fd58:	449a      	add	sl, r3
 801fd5a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801fd5c:	441d      	add	r5, r3
 801fd5e:	e742      	b.n	801fbe6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801fd60:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801fd62:	f108 0802 	add.w	r8, r8, #2
 801fd66:	449a      	add	sl, r3
 801fd68:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801fd6a:	441d      	add	r5, r3
 801fd6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fd6e:	3b01      	subs	r3, #1
 801fd70:	9309      	str	r3, [sp, #36]	; 0x24
 801fd72:	e718      	b.n	801fba6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801fd74:	d023      	beq.n	801fdbe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 801fd76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fd78:	9825      	ldr	r0, [sp, #148]	; 0x94
 801fd7a:	3b01      	subs	r3, #1
 801fd7c:	fb00 a003 	mla	r0, r0, r3, sl
 801fd80:	1400      	asrs	r0, r0, #16
 801fd82:	f53f af2d 	bmi.w	801fbe0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801fd86:	3901      	subs	r1, #1
 801fd88:	4288      	cmp	r0, r1
 801fd8a:	f6bf af29 	bge.w	801fbe0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801fd8e:	9926      	ldr	r1, [sp, #152]	; 0x98
 801fd90:	fb01 5303 	mla	r3, r1, r3, r5
 801fd94:	141b      	asrs	r3, r3, #16
 801fd96:	f53f af23 	bmi.w	801fbe0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801fd9a:	3a01      	subs	r2, #1
 801fd9c:	4293      	cmp	r3, r2
 801fd9e:	f6bf af1f 	bge.w	801fbe0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801fda2:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 801fda6:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
 801fdaa:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801fdae:	f1be 0f00 	cmp.w	lr, #0
 801fdb2:	dc6c      	bgt.n	801fe8e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 801fdb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fdb6:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801fdba:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 801fdbe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801fdc0:	2b00      	cmp	r3, #0
 801fdc2:	f340 810e 	ble.w	801ffe2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 801fdc6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801fdca:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801fdcc:	ee30 0a04 	vadd.f32	s0, s0, s8
 801fdd0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801fdd4:	eef0 6a62 	vmov.f32	s13, s5
 801fdd8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801fddc:	ee31 1a05 	vadd.f32	s2, s2, s10
 801fde0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fde4:	ee16 aa90 	vmov	sl, s13
 801fde8:	eef0 6a43 	vmov.f32	s13, s6
 801fdec:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fdf0:	ee16 5a90 	vmov	r5, s13
 801fdf4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801fdf8:	ee61 7a27 	vmul.f32	s15, s2, s15
 801fdfc:	ee77 2a62 	vsub.f32	s5, s14, s5
 801fe00:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801fe04:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801fe08:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801fe0c:	ee12 2a90 	vmov	r2, s5
 801fe10:	eef0 2a47 	vmov.f32	s5, s14
 801fe14:	fb92 f3f3 	sdiv	r3, r2, r3
 801fe18:	ee13 2a10 	vmov	r2, s6
 801fe1c:	9325      	str	r3, [sp, #148]	; 0x94
 801fe1e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801fe20:	eeb0 3a67 	vmov.f32	s6, s15
 801fe24:	fb92 f3f3 	sdiv	r3, r2, r3
 801fe28:	9326      	str	r3, [sp, #152]	; 0x98
 801fe2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801fe2c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801fe2e:	3b01      	subs	r3, #1
 801fe30:	930c      	str	r3, [sp, #48]	; 0x30
 801fe32:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801fe34:	bf08      	it	eq
 801fe36:	4613      	moveq	r3, r2
 801fe38:	9309      	str	r3, [sp, #36]	; 0x24
 801fe3a:	e6a6      	b.n	801fb8a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801fe3c:	2900      	cmp	r1, #0
 801fe3e:	f43f af10 	beq.w	801fc62 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801fe42:	f819 3003 	ldrb.w	r3, [r9, r3]
 801fe46:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801fe4a:	930f      	str	r3, [sp, #60]	; 0x3c
 801fe4c:	e709      	b.n	801fc62 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801fe4e:	f112 0901 	adds.w	r9, r2, #1
 801fe52:	f53f af7d 	bmi.w	801fd50 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801fe56:	454b      	cmp	r3, r9
 801fe58:	f6ff af7a 	blt.w	801fd50 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801fe5c:	f11c 0901 	adds.w	r9, ip, #1
 801fe60:	f53f af76 	bmi.w	801fd50 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801fe64:	45ce      	cmp	lr, r9
 801fe66:	f6ff af73 	blt.w	801fd50 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801fe6a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801fe6c:	b21b      	sxth	r3, r3
 801fe6e:	9202      	str	r2, [sp, #8]
 801fe70:	fa0f f28e 	sxth.w	r2, lr
 801fe74:	9300      	str	r3, [sp, #0]
 801fe76:	4633      	mov	r3, r6
 801fe78:	9201      	str	r2, [sp, #4]
 801fe7a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801fe7c:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801fe80:	e9cd c003 	strd	ip, r0, [sp, #12]
 801fe84:	4639      	mov	r1, r7
 801fe86:	9816      	ldr	r0, [sp, #88]	; 0x58
 801fe88:	f7ff fd8e 	bl	801f9a8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>
 801fe8c:	e760      	b.n	801fd50 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801fe8e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801fe90:	ea4f 422a 	mov.w	r2, sl, asr #16
 801fe94:	1429      	asrs	r1, r5, #16
 801fe96:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801fe98:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801fe9c:	f3ca 3c03 	ubfx	ip, sl, #12, #4
 801fea0:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801fea4:	fb03 2101 	mla	r1, r3, r1, r2
 801fea8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801feaa:	440a      	add	r2, r1
 801feac:	5c61      	ldrb	r1, [r4, r1]
 801feae:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
 801feb2:	f1bc 0f00 	cmp.w	ip, #0
 801feb6:	f000 808c 	beq.w	801ffd2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
 801feba:	7857      	ldrb	r7, [r2, #1]
 801febc:	f836 4017 	ldrh.w	r4, [r6, r7, lsl #1]
 801fec0:	9413      	str	r4, [sp, #76]	; 0x4c
 801fec2:	b140      	cbz	r0, 801fed6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801fec4:	18d7      	adds	r7, r2, r3
 801fec6:	5cd3      	ldrb	r3, [r2, r3]
 801fec8:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801fecc:	9310      	str	r3, [sp, #64]	; 0x40
 801fece:	787b      	ldrb	r3, [r7, #1]
 801fed0:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801fed4:	9314      	str	r3, [sp, #80]	; 0x50
 801fed6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801fed8:	fb1c f200 	smulbb	r2, ip, r0
 801fedc:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801fede:	f10e 3eff 	add.w	lr, lr, #4294967295
 801fee2:	041f      	lsls	r7, r3, #16
 801fee4:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801fee8:	10d2      	asrs	r2, r2, #3
 801feea:	f424 6bfc 	bic.w	fp, r4, #2016	; 0x7e0
 801feee:	f007 67fc 	and.w	r7, r7, #132120576	; 0x7e00000
 801fef2:	431f      	orrs	r7, r3
 801fef4:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
 801fef8:	9317      	str	r3, [sp, #92]	; 0x5c
 801fefa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801fefc:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801fefe:	041b      	lsls	r3, r3, #16
 801ff00:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801ff04:	ea43 030b 	orr.w	r3, r3, fp
 801ff08:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 801ff0c:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801ff10:	4353      	muls	r3, r2
 801ff12:	fb04 3707 	mla	r7, r4, r7, r3
 801ff16:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 801ff1a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801ff1c:	ea43 0b01 	orr.w	fp, r3, r1
 801ff20:	f1c0 0110 	rsb	r1, r0, #16
 801ff24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ff26:	eba1 0c0c 	sub.w	ip, r1, ip
 801ff2a:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801ff2e:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 801ff32:	fb0c 770b 	mla	r7, ip, fp, r7
 801ff36:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801ff3a:	f423 6bfc 	bic.w	fp, r3, #2016	; 0x7e0
 801ff3e:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801ff42:	ea4c 0c0b 	orr.w	ip, ip, fp
 801ff46:	fb02 770c 	mla	r7, r2, ip, r7
 801ff4a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ff4c:	0d79      	lsrs	r1, r7, #21
 801ff4e:	8812      	ldrh	r2, [r2, #0]
 801ff50:	097f      	lsrs	r7, r7, #5
 801ff52:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801ff56:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801ff5a:	430f      	orrs	r7, r1
 801ff5c:	1211      	asrs	r1, r2, #8
 801ff5e:	b2bb      	uxth	r3, r7
 801ff60:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801ff64:	10d7      	asrs	r7, r2, #3
 801ff66:	fb11 f104 	smulbb	r1, r1, r4
 801ff6a:	1218      	asrs	r0, r3, #8
 801ff6c:	00d2      	lsls	r2, r2, #3
 801ff6e:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801ff72:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801ff76:	fb17 f704 	smulbb	r7, r7, r4
 801ff7a:	b2d2      	uxtb	r2, r2
 801ff7c:	fb00 1009 	mla	r0, r0, r9, r1
 801ff80:	10d9      	asrs	r1, r3, #3
 801ff82:	fb12 f204 	smulbb	r2, r2, r4
 801ff86:	00db      	lsls	r3, r3, #3
 801ff88:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801ff8c:	b280      	uxth	r0, r0
 801ff8e:	b2db      	uxtb	r3, r3
 801ff90:	fb01 7109 	mla	r1, r1, r9, r7
 801ff94:	fb03 2309 	mla	r3, r3, r9, r2
 801ff98:	1c42      	adds	r2, r0, #1
 801ff9a:	b289      	uxth	r1, r1
 801ff9c:	b29b      	uxth	r3, r3
 801ff9e:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801ffa2:	1c4f      	adds	r7, r1, #1
 801ffa4:	1c5a      	adds	r2, r3, #1
 801ffa6:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 801ffaa:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801ffae:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801ffb2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ffb4:	0949      	lsrs	r1, r1, #5
 801ffb6:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801ffba:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801ffbe:	4310      	orrs	r0, r2
 801ffc0:	4308      	orrs	r0, r1
 801ffc2:	f823 0b02 	strh.w	r0, [r3], #2
 801ffc6:	930e      	str	r3, [sp, #56]	; 0x38
 801ffc8:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801ffca:	449a      	add	sl, r3
 801ffcc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801ffce:	441d      	add	r5, r3
 801ffd0:	e6ed      	b.n	801fdae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x262>
 801ffd2:	2800      	cmp	r0, #0
 801ffd4:	f43f af7f 	beq.w	801fed6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801ffd8:	5cd3      	ldrb	r3, [r2, r3]
 801ffda:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801ffde:	9310      	str	r3, [sp, #64]	; 0x40
 801ffe0:	e779      	b.n	801fed6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801ffe2:	b019      	add	sp, #100	; 0x64
 801ffe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ffe8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 801ffe8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ffec:	e9dd 480a 	ldrd	r4, r8, [sp, #40]	; 0x28
 801fff0:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 801fff4:	f1b8 0f00 	cmp.w	r8, #0
 801fff8:	f9bd a024 	ldrsh.w	sl, [sp, #36]	; 0x24
 801fffc:	fb08 470e 	mla	r7, r8, lr, r4
 8020000:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 8020004:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 8020008:	eb02 0907 	add.w	r9, r2, r7
 802000c:	8808      	ldrh	r0, [r1, #0]
 802000e:	db67      	blt.n	80200e0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
 8020010:	45c2      	cmp	sl, r8
 8020012:	dd65      	ble.n	80200e0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
 8020014:	2c00      	cmp	r4, #0
 8020016:	db61      	blt.n	80200dc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
 8020018:	45a6      	cmp	lr, r4
 802001a:	dd5f      	ble.n	80200dc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
 802001c:	5dd2      	ldrb	r2, [r2, r7]
 802001e:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 8020022:	1c62      	adds	r2, r4, #1
 8020024:	d45f      	bmi.n	80200e6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 8020026:	4596      	cmp	lr, r2
 8020028:	dd5d      	ble.n	80200e6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 802002a:	2d00      	cmp	r5, #0
 802002c:	d05b      	beq.n	80200e6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 802002e:	f899 2001 	ldrb.w	r2, [r9, #1]
 8020032:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 8020036:	f118 0801 	adds.w	r8, r8, #1
 802003a:	d458      	bmi.n	80200ee <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 802003c:	45c2      	cmp	sl, r8
 802003e:	dd56      	ble.n	80200ee <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 8020040:	2e00      	cmp	r6, #0
 8020042:	d054      	beq.n	80200ee <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 8020044:	2c00      	cmp	r4, #0
 8020046:	db50      	blt.n	80200ea <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
 8020048:	45a6      	cmp	lr, r4
 802004a:	dd4e      	ble.n	80200ea <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
 802004c:	f819 200e 	ldrb.w	r2, [r9, lr]
 8020050:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8020054:	3401      	adds	r4, #1
 8020056:	d407      	bmi.n	8020068 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 8020058:	45a6      	cmp	lr, r4
 802005a:	dd05      	ble.n	8020068 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 802005c:	b125      	cbz	r5, 8020068 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 802005e:	44ce      	add	lr, r9
 8020060:	f89e 0001 	ldrb.w	r0, [lr, #1]
 8020064:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8020068:	fb15 f406 	smulbb	r4, r5, r6
 802006c:	ea4f 430c 	mov.w	r3, ip, lsl #16
 8020070:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 8020074:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8020078:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 802007c:	f3c4 04c7 	ubfx	r4, r4, #3, #8
 8020080:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8020084:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8020088:	ea43 0c0c 	orr.w	ip, r3, ip
 802008c:	f1c6 0310 	rsb	r3, r6, #16
 8020090:	ea4e 0707 	orr.w	r7, lr, r7
 8020094:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
 8020098:	1b5b      	subs	r3, r3, r5
 802009a:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
 802009e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80200a2:	437d      	muls	r5, r7
 80200a4:	fb03 5c0c 	mla	ip, r3, ip, r5
 80200a8:	0403      	lsls	r3, r0, #16
 80200aa:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80200ae:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 80200b2:	4318      	orrs	r0, r3
 80200b4:	0413      	lsls	r3, r2, #16
 80200b6:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80200ba:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 80200be:	fb04 c000 	mla	r0, r4, r0, ip
 80200c2:	4313      	orrs	r3, r2
 80200c4:	fb06 0003 	mla	r0, r6, r3, r0
 80200c8:	0d43      	lsrs	r3, r0, #21
 80200ca:	0940      	lsrs	r0, r0, #5
 80200cc:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80200d0:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80200d4:	4318      	orrs	r0, r3
 80200d6:	8008      	strh	r0, [r1, #0]
 80200d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80200dc:	4684      	mov	ip, r0
 80200de:	e7a0      	b.n	8020022 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x3a>
 80200e0:	4607      	mov	r7, r0
 80200e2:	4684      	mov	ip, r0
 80200e4:	e7a7      	b.n	8020036 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
 80200e6:	4607      	mov	r7, r0
 80200e8:	e7a5      	b.n	8020036 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
 80200ea:	4602      	mov	r2, r0
 80200ec:	e7b2      	b.n	8020054 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x6c>
 80200ee:	4602      	mov	r2, r0
 80200f0:	e7ba      	b.n	8020068 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>

080200f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80200f2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80200f6:	b093      	sub	sp, #76	; 0x4c
 80200f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80200fc:	920f      	str	r2, [sp, #60]	; 0x3c
 80200fe:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8020100:	9010      	str	r0, [sp, #64]	; 0x40
 8020102:	9108      	str	r1, [sp, #32]
 8020104:	6850      	ldr	r0, [r2, #4]
 8020106:	9306      	str	r3, [sp, #24]
 8020108:	6812      	ldr	r2, [r2, #0]
 802010a:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 802010e:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 8020112:	fb00 1303 	mla	r3, r0, r3, r1
 8020116:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 802011a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802011c:	681b      	ldr	r3, [r3, #0]
 802011e:	9307      	str	r3, [sp, #28]
 8020120:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020122:	685f      	ldr	r7, [r3, #4]
 8020124:	3704      	adds	r7, #4
 8020126:	9b08      	ldr	r3, [sp, #32]
 8020128:	2b00      	cmp	r3, #0
 802012a:	dc03      	bgt.n	8020134 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 802012c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802012e:	2b00      	cmp	r3, #0
 8020130:	f340 81b2 	ble.w	8020498 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 8020134:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020136:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802013a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802013e:	1e48      	subs	r0, r1, #1
 8020140:	f102 3cff 	add.w	ip, r2, #4294967295
 8020144:	9b06      	ldr	r3, [sp, #24]
 8020146:	2b00      	cmp	r3, #0
 8020148:	f340 80a9 	ble.w	802029e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 802014c:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8020150:	ea4f 4326 	mov.w	r3, r6, asr #16
 8020154:	d406      	bmi.n	8020164 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8020156:	4586      	cmp	lr, r0
 8020158:	da04      	bge.n	8020164 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 802015a:	2b00      	cmp	r3, #0
 802015c:	db02      	blt.n	8020164 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 802015e:	4563      	cmp	r3, ip
 8020160:	f2c0 809e 	blt.w	80202a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 8020164:	f11e 0e01 	adds.w	lr, lr, #1
 8020168:	f100 808f 	bmi.w	802028a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 802016c:	4571      	cmp	r1, lr
 802016e:	f2c0 808c 	blt.w	802028a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8020172:	3301      	adds	r3, #1
 8020174:	f100 8089 	bmi.w	802028a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8020178:	429a      	cmp	r2, r3
 802017a:	f2c0 8086 	blt.w	802028a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 802017e:	f8dd b018 	ldr.w	fp, [sp, #24]
 8020182:	46c8      	mov	r8, r9
 8020184:	f1bb 0f00 	cmp.w	fp, #0
 8020188:	f340 80a6 	ble.w	80202d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 802018c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 802018e:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8020192:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020194:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8020198:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 802019c:	1422      	asrs	r2, r4, #16
 802019e:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80201a2:	689b      	ldr	r3, [r3, #8]
 80201a4:	f100 80e3 	bmi.w	802036e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 80201a8:	f103 3aff 	add.w	sl, r3, #4294967295
 80201ac:	4552      	cmp	r2, sl
 80201ae:	f280 80de 	bge.w	802036e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 80201b2:	f1bc 0f00 	cmp.w	ip, #0
 80201b6:	f2c0 80da 	blt.w	802036e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 80201ba:	f10e 3aff 	add.w	sl, lr, #4294967295
 80201be:	45d4      	cmp	ip, sl
 80201c0:	f280 80d5 	bge.w	802036e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 80201c4:	b21b      	sxth	r3, r3
 80201c6:	9d07      	ldr	r5, [sp, #28]
 80201c8:	fb0c 2203 	mla	r2, ip, r3, r2
 80201cc:	eb05 0a02 	add.w	sl, r5, r2
 80201d0:	5caa      	ldrb	r2, [r5, r2]
 80201d2:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
 80201d6:	2800      	cmp	r0, #0
 80201d8:	f000 80c0 	beq.w	802035c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 80201dc:	f89a 2001 	ldrb.w	r2, [sl, #1]
 80201e0:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 80201e4:	920b      	str	r2, [sp, #44]	; 0x2c
 80201e6:	b151      	cbz	r1, 80201fe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 80201e8:	eb0a 0203 	add.w	r2, sl, r3
 80201ec:	f81a 3003 	ldrb.w	r3, [sl, r3]
 80201f0:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80201f4:	9309      	str	r3, [sp, #36]	; 0x24
 80201f6:	7853      	ldrb	r3, [r2, #1]
 80201f8:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80201fc:	930c      	str	r3, [sp, #48]	; 0x30
 80201fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020200:	fb10 f201 	smulbb	r2, r0, r1
 8020204:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8020206:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 802020a:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 802020e:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8020212:	10d2      	asrs	r2, r2, #3
 8020214:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8020218:	ebc2 0a40 	rsb	sl, r2, r0, lsl #1
 802021c:	ea4c 0c03 	orr.w	ip, ip, r3
 8020220:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020222:	041b      	lsls	r3, r3, #16
 8020224:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8020228:	432b      	orrs	r3, r5
 802022a:	4353      	muls	r3, r2
 802022c:	fb0a 330c 	mla	r3, sl, ip, r3
 8020230:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 8020234:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8020238:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 802023c:	ea4c 0e0e 	orr.w	lr, ip, lr
 8020240:	f1c1 0c10 	rsb	ip, r1, #16
 8020244:	ebac 0c00 	sub.w	ip, ip, r0
 8020248:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 802024c:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 8020250:	fb0c 3c0e 	mla	ip, ip, lr, r3
 8020254:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020256:	0418      	lsls	r0, r3, #16
 8020258:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 802025c:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8020260:	4318      	orrs	r0, r3
 8020262:	fb02 c200 	mla	r2, r2, r0, ip
 8020266:	0d53      	lsrs	r3, r2, #21
 8020268:	0952      	lsrs	r2, r2, #5
 802026a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802026e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8020272:	431a      	orrs	r2, r3
 8020274:	f8a8 2000 	strh.w	r2, [r8]
 8020278:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802027a:	f108 0802 	add.w	r8, r8, #2
 802027e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8020282:	441c      	add	r4, r3
 8020284:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020286:	441e      	add	r6, r3
 8020288:	e77c      	b.n	8020184 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802028a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802028c:	f109 0902 	add.w	r9, r9, #2
 8020290:	441c      	add	r4, r3
 8020292:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020294:	441e      	add	r6, r3
 8020296:	9b06      	ldr	r3, [sp, #24]
 8020298:	3b01      	subs	r3, #1
 802029a:	9306      	str	r3, [sp, #24]
 802029c:	e752      	b.n	8020144 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 802029e:	d020      	beq.n	80202e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 80202a0:	9b06      	ldr	r3, [sp, #24]
 80202a2:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80202a4:	3b01      	subs	r3, #1
 80202a6:	fb00 4003 	mla	r0, r0, r3, r4
 80202aa:	1400      	asrs	r0, r0, #16
 80202ac:	f53f af67 	bmi.w	802017e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 80202b0:	3901      	subs	r1, #1
 80202b2:	4288      	cmp	r0, r1
 80202b4:	f6bf af63 	bge.w	802017e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 80202b8:	9920      	ldr	r1, [sp, #128]	; 0x80
 80202ba:	fb01 6303 	mla	r3, r1, r3, r6
 80202be:	141b      	asrs	r3, r3, #16
 80202c0:	f53f af5d 	bmi.w	802017e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 80202c4:	3a01      	subs	r2, #1
 80202c6:	4293      	cmp	r3, r2
 80202c8:	f6bf af59 	bge.w	802017e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 80202cc:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80202d0:	46ca      	mov	sl, r9
 80202d2:	f1b8 0f00 	cmp.w	r8, #0
 80202d6:	dc67      	bgt.n	80203a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 80202d8:	9b06      	ldr	r3, [sp, #24]
 80202da:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 80202de:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 80202e2:	9b08      	ldr	r3, [sp, #32]
 80202e4:	2b00      	cmp	r3, #0
 80202e6:	f340 80d7 	ble.w	8020498 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 80202ea:	ee30 0a04 	vadd.f32	s0, s0, s8
 80202ee:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80202f0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80202f4:	eeb0 6a62 	vmov.f32	s12, s5
 80202f8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80202fc:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020300:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020304:	ee16 4a10 	vmov	r4, s12
 8020308:	eeb0 6a43 	vmov.f32	s12, s6
 802030c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020310:	ee16 6a10 	vmov	r6, s12
 8020314:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020318:	ee61 7a27 	vmul.f32	s15, s2, s15
 802031c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020320:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020324:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020328:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802032c:	ee12 2a90 	vmov	r2, s5
 8020330:	eef0 2a47 	vmov.f32	s5, s14
 8020334:	fb92 f3f3 	sdiv	r3, r2, r3
 8020338:	ee13 2a10 	vmov	r2, s6
 802033c:	931f      	str	r3, [sp, #124]	; 0x7c
 802033e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8020340:	eeb0 3a67 	vmov.f32	s6, s15
 8020344:	fb92 f3f3 	sdiv	r3, r2, r3
 8020348:	9320      	str	r3, [sp, #128]	; 0x80
 802034a:	9b08      	ldr	r3, [sp, #32]
 802034c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802034e:	3b01      	subs	r3, #1
 8020350:	9308      	str	r3, [sp, #32]
 8020352:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8020354:	bf08      	it	eq
 8020356:	4613      	moveq	r3, r2
 8020358:	9306      	str	r3, [sp, #24]
 802035a:	e6e4      	b.n	8020126 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 802035c:	2900      	cmp	r1, #0
 802035e:	f43f af4e 	beq.w	80201fe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 8020362:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8020366:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 802036a:	9309      	str	r3, [sp, #36]	; 0x24
 802036c:	e747      	b.n	80201fe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 802036e:	f112 0a01 	adds.w	sl, r2, #1
 8020372:	d481      	bmi.n	8020278 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8020374:	4553      	cmp	r3, sl
 8020376:	f6ff af7f 	blt.w	8020278 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 802037a:	f11c 0a01 	adds.w	sl, ip, #1
 802037e:	f53f af7b 	bmi.w	8020278 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8020382:	45d6      	cmp	lr, sl
 8020384:	f6ff af78 	blt.w	8020278 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8020388:	b21b      	sxth	r3, r3
 802038a:	e9cd 2c02 	strd	r2, ip, [sp, #8]
 802038e:	fa0f f28e 	sxth.w	r2, lr
 8020392:	9300      	str	r3, [sp, #0]
 8020394:	463b      	mov	r3, r7
 8020396:	9201      	str	r2, [sp, #4]
 8020398:	9a07      	ldr	r2, [sp, #28]
 802039a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 802039e:	4641      	mov	r1, r8
 80203a0:	9810      	ldr	r0, [sp, #64]	; 0x40
 80203a2:	f7ff fe21 	bl	801ffe8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 80203a6:	e767      	b.n	8020278 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80203a8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80203aa:	1422      	asrs	r2, r4, #16
 80203ac:	1431      	asrs	r1, r6, #16
 80203ae:	9d07      	ldr	r5, [sp, #28]
 80203b0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80203b4:	f3c4 3e03 	ubfx	lr, r4, #12, #4
 80203b8:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80203bc:	fb03 2101 	mla	r1, r3, r1, r2
 80203c0:	9a07      	ldr	r2, [sp, #28]
 80203c2:	440a      	add	r2, r1
 80203c4:	5c69      	ldrb	r1, [r5, r1]
 80203c6:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
 80203ca:	f1be 0f00 	cmp.w	lr, #0
 80203ce:	d05c      	beq.n	802048a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x398>
 80203d0:	f892 c001 	ldrb.w	ip, [r2, #1]
 80203d4:	f837 501c 	ldrh.w	r5, [r7, ip, lsl #1]
 80203d8:	950d      	str	r5, [sp, #52]	; 0x34
 80203da:	b150      	cbz	r0, 80203f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 80203dc:	eb02 0c03 	add.w	ip, r2, r3
 80203e0:	5cd3      	ldrb	r3, [r2, r3]
 80203e2:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80203e6:	930a      	str	r3, [sp, #40]	; 0x28
 80203e8:	f89c 3001 	ldrb.w	r3, [ip, #1]
 80203ec:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80203f0:	930e      	str	r3, [sp, #56]	; 0x38
 80203f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80203f4:	fb1e f200 	smulbb	r2, lr, r0
 80203f8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80203fa:	f108 38ff 	add.w	r8, r8, #4294967295
 80203fe:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8020402:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8020406:	10d2      	asrs	r2, r2, #3
 8020408:	f425 6bfc 	bic.w	fp, r5, #2016	; 0x7e0
 802040c:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8020410:	ea4c 0c03 	orr.w	ip, ip, r3
 8020414:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
 8020418:	9311      	str	r3, [sp, #68]	; 0x44
 802041a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802041c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802041e:	041b      	lsls	r3, r3, #16
 8020420:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8020424:	ea43 030b 	orr.w	r3, r3, fp
 8020428:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 802042c:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8020430:	4353      	muls	r3, r2
 8020432:	fb05 3c0c 	mla	ip, r5, ip, r3
 8020436:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 802043a:	ea43 0b01 	orr.w	fp, r3, r1
 802043e:	f1c0 0110 	rsb	r1, r0, #16
 8020442:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020444:	eba1 0e0e 	sub.w	lr, r1, lr
 8020448:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 802044c:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 8020450:	fb0e cc0b 	mla	ip, lr, fp, ip
 8020454:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 8020458:	f423 6efc 	bic.w	lr, r3, #2016	; 0x7e0
 802045c:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8020460:	ea4b 0e0e 	orr.w	lr, fp, lr
 8020464:	fb02 cc0e 	mla	ip, r2, lr, ip
 8020468:	ea4f 535c 	mov.w	r3, ip, lsr #21
 802046c:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8020470:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8020474:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8020478:	ea43 0c0c 	orr.w	ip, r3, ip
 802047c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802047e:	441c      	add	r4, r3
 8020480:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020482:	f82a cb02 	strh.w	ip, [sl], #2
 8020486:	441e      	add	r6, r3
 8020488:	e723      	b.n	80202d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 802048a:	2800      	cmp	r0, #0
 802048c:	d0b1      	beq.n	80203f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 802048e:	5cd3      	ldrb	r3, [r2, r3]
 8020490:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8020494:	930a      	str	r3, [sp, #40]	; 0x28
 8020496:	e7ac      	b.n	80203f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 8020498:	b013      	add	sp, #76	; 0x4c
 802049a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802049e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
 802049e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80204a2:	880d      	ldrh	r5, [r1, #0]
 80204a4:	b087      	sub	sp, #28
 80204a6:	10ef      	asrs	r7, r5, #3
 80204a8:	9103      	str	r1, [sp, #12]
 80204aa:	ea4f 2a25 	mov.w	sl, r5, asr #8
 80204ae:	f9bd 9040 	ldrsh.w	r9, [sp, #64]	; 0x40
 80204b2:	00ed      	lsls	r5, r5, #3
 80204b4:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80204b8:	f00a 0af8 	and.w	sl, sl, #248	; 0xf8
 80204bc:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 80204c0:	b2ed      	uxtb	r5, r5
 80204c2:	9701      	str	r7, [sp, #4]
 80204c4:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
 80204c8:	9502      	str	r5, [sp, #8]
 80204ca:	9d01      	ldr	r5, [sp, #4]
 80204cc:	9902      	ldr	r1, [sp, #8]
 80204ce:	022d      	lsls	r5, r5, #8
 80204d0:	f89d e054 	ldrb.w	lr, [sp, #84]	; 0x54
 80204d4:	f89d 8058 	ldrb.w	r8, [sp, #88]	; 0x58
 80204d8:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 80204dc:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	; 0x48
 80204e0:	430d      	orrs	r5, r1
 80204e2:	fb06 0709 	mla	r7, r6, r9, r0
 80204e6:	2e00      	cmp	r6, #0
 80204e8:	9505      	str	r5, [sp, #20]
 80204ea:	eb02 0c07 	add.w	ip, r2, r7
 80204ee:	f2c0 80b6 	blt.w	802065e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
 80204f2:	45b3      	cmp	fp, r6
 80204f4:	f340 80b3 	ble.w	802065e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
 80204f8:	2800      	cmp	r0, #0
 80204fa:	f2c0 80ae 	blt.w	802065a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
 80204fe:	4581      	cmp	r9, r0
 8020500:	f340 80ab 	ble.w	802065a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
 8020504:	5dd7      	ldrb	r7, [r2, r7]
 8020506:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 802050a:	441f      	add	r7, r3
 802050c:	1c42      	adds	r2, r0, #1
 802050e:	f100 80a9 	bmi.w	8020664 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 8020512:	4591      	cmp	r9, r2
 8020514:	f340 80a6 	ble.w	8020664 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 8020518:	2c00      	cmp	r4, #0
 802051a:	f000 80a3 	beq.w	8020664 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 802051e:	f89c 5001 	ldrb.w	r5, [ip, #1]
 8020522:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8020526:	441d      	add	r5, r3
 8020528:	3601      	adds	r6, #1
 802052a:	f100 809f 	bmi.w	802066c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 802052e:	45b3      	cmp	fp, r6
 8020530:	f340 809c 	ble.w	802066c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 8020534:	f1be 0f00 	cmp.w	lr, #0
 8020538:	f000 8098 	beq.w	802066c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 802053c:	2800      	cmp	r0, #0
 802053e:	f2c0 8093 	blt.w	8020668 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
 8020542:	4581      	cmp	r9, r0
 8020544:	f340 8090 	ble.w	8020668 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
 8020548:	f81c 6009 	ldrb.w	r6, [ip, r9]
 802054c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8020550:	441e      	add	r6, r3
 8020552:	3001      	adds	r0, #1
 8020554:	f100 808d 	bmi.w	8020672 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 8020558:	4581      	cmp	r9, r0
 802055a:	f340 808a 	ble.w	8020672 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 802055e:	2c00      	cmp	r4, #0
 8020560:	f000 8087 	beq.w	8020672 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 8020564:	44e1      	add	r9, ip
 8020566:	f899 2001 	ldrb.w	r2, [r9, #1]
 802056a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802056e:	4413      	add	r3, r2
 8020570:	b2a4      	uxth	r4, r4
 8020572:	f897 c002 	ldrb.w	ip, [r7, #2]
 8020576:	fa1f fe8e 	uxth.w	lr, lr
 802057a:	9901      	ldr	r1, [sp, #4]
 802057c:	fb04 fb0e 	mul.w	fp, r4, lr
 8020580:	0124      	lsls	r4, r4, #4
 8020582:	ebcb 1e0e 	rsb	lr, fp, lr, lsl #4
 8020586:	f5c4 7980 	rsb	r9, r4, #256	; 0x100
 802058a:	eba4 040b 	sub.w	r4, r4, fp
 802058e:	fa1f f08e 	uxth.w	r0, lr
 8020592:	b2a2      	uxth	r2, r4
 8020594:	78ac      	ldrb	r4, [r5, #2]
 8020596:	eba9 0900 	sub.w	r9, r9, r0
 802059a:	fa1f fe88 	uxth.w	lr, r8
 802059e:	4354      	muls	r4, r2
 80205a0:	ea6f 0808 	mvn.w	r8, r8
 80205a4:	fa1f f989 	uxth.w	r9, r9
 80205a8:	fa5f f888 	uxtb.w	r8, r8
 80205ac:	fb09 440c 	mla	r4, r9, ip, r4
 80205b0:	f896 c002 	ldrb.w	ip, [r6, #2]
 80205b4:	fb1a fa08 	smulbb	sl, sl, r8
 80205b8:	fb00 440c 	mla	r4, r0, ip, r4
 80205bc:	f893 c002 	ldrb.w	ip, [r3, #2]
 80205c0:	fb0b 4c0c 	mla	ip, fp, ip, r4
 80205c4:	787c      	ldrb	r4, [r7, #1]
 80205c6:	783f      	ldrb	r7, [r7, #0]
 80205c8:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 80205cc:	fb0c ac0e 	mla	ip, ip, lr, sl
 80205d0:	f895 a001 	ldrb.w	sl, [r5, #1]
 80205d4:	782d      	ldrb	r5, [r5, #0]
 80205d6:	fb02 fa0a 	mul.w	sl, r2, sl
 80205da:	fa1f fc8c 	uxth.w	ip, ip
 80205de:	436a      	muls	r2, r5
 80205e0:	7835      	ldrb	r5, [r6, #0]
 80205e2:	fb09 aa04 	mla	sl, r9, r4, sl
 80205e6:	7874      	ldrb	r4, [r6, #1]
 80205e8:	fb09 2207 	mla	r2, r9, r7, r2
 80205ec:	fb00 aa04 	mla	sl, r0, r4, sl
 80205f0:	785c      	ldrb	r4, [r3, #1]
 80205f2:	fb00 2005 	mla	r0, r0, r5, r2
 80205f6:	781b      	ldrb	r3, [r3, #0]
 80205f8:	fb0b a404 	mla	r4, fp, r4, sl
 80205fc:	fb11 fa08 	smulbb	sl, r1, r8
 8020600:	fb0b 0b03 	mla	fp, fp, r3, r0
 8020604:	9b02      	ldr	r3, [sp, #8]
 8020606:	f3c4 2407 	ubfx	r4, r4, #8, #8
 802060a:	fb13 f808 	smulbb	r8, r3, r8
 802060e:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 8020612:	fb04 a40e 	mla	r4, r4, lr, sl
 8020616:	f10c 0301 	add.w	r3, ip, #1
 802061a:	fb0b 8e0e 	mla	lr, fp, lr, r8
 802061e:	b2a4      	uxth	r4, r4
 8020620:	fa1f fe8e 	uxth.w	lr, lr
 8020624:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8020628:	f104 0a01 	add.w	sl, r4, #1
 802062c:	f40c 4378 	and.w	r3, ip, #63488	; 0xf800
 8020630:	f10e 0c01 	add.w	ip, lr, #1
 8020634:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 8020638:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 802063c:	0964      	lsrs	r4, r4, #5
 802063e:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8020642:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 8020646:	ea4c 0c03 	orr.w	ip, ip, r3
 802064a:	9b03      	ldr	r3, [sp, #12]
 802064c:	ea4c 0c04 	orr.w	ip, ip, r4
 8020650:	f8a3 c000 	strh.w	ip, [r3]
 8020654:	b007      	add	sp, #28
 8020656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802065a:	af05      	add	r7, sp, #20
 802065c:	e756      	b.n	802050c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6e>
 802065e:	ad05      	add	r5, sp, #20
 8020660:	462f      	mov	r7, r5
 8020662:	e761      	b.n	8020528 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
 8020664:	ad05      	add	r5, sp, #20
 8020666:	e75f      	b.n	8020528 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
 8020668:	ae05      	add	r6, sp, #20
 802066a:	e772      	b.n	8020552 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
 802066c:	ab05      	add	r3, sp, #20
 802066e:	461e      	mov	r6, r3
 8020670:	e77e      	b.n	8020570 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>
 8020672:	ab05      	add	r3, sp, #20
 8020674:	e77c      	b.n	8020570 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>

08020676 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020676:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802067a:	b095      	sub	sp, #84	; 0x54
 802067c:	9212      	str	r2, [sp, #72]	; 0x48
 802067e:	9309      	str	r3, [sp, #36]	; 0x24
 8020680:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8020682:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 8020686:	9013      	str	r0, [sp, #76]	; 0x4c
 8020688:	930f      	str	r3, [sp, #60]	; 0x3c
 802068a:	6850      	ldr	r0, [r2, #4]
 802068c:	910e      	str	r1, [sp, #56]	; 0x38
 802068e:	6812      	ldr	r2, [r2, #0]
 8020690:	e9dd 1324 	ldrd	r1, r3, [sp, #144]	; 0x90
 8020694:	fb00 1303 	mla	r3, r0, r3, r1
 8020698:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802069c:	930a      	str	r3, [sp, #40]	; 0x28
 802069e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80206a0:	681b      	ldr	r3, [r3, #0]
 80206a2:	930d      	str	r3, [sp, #52]	; 0x34
 80206a4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80206a6:	685c      	ldr	r4, [r3, #4]
 80206a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80206aa:	3404      	adds	r4, #4
 80206ac:	43db      	mvns	r3, r3
 80206ae:	b2db      	uxtb	r3, r3
 80206b0:	930b      	str	r3, [sp, #44]	; 0x2c
 80206b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80206b4:	2b00      	cmp	r3, #0
 80206b6:	dc03      	bgt.n	80206c0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 80206b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80206ba:	2b00      	cmp	r3, #0
 80206bc:	f340 8255 	ble.w	8020b6a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 80206c0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80206c2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80206c6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80206ca:	1e48      	subs	r0, r1, #1
 80206cc:	1e55      	subs	r5, r2, #1
 80206ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80206d0:	2b00      	cmp	r3, #0
 80206d2:	f340 80f9 	ble.w	80208c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 80206d6:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 80206d8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80206da:	1436      	asrs	r6, r6, #16
 80206dc:	ea4f 4323 	mov.w	r3, r3, asr #16
 80206e0:	d406      	bmi.n	80206f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 80206e2:	4286      	cmp	r6, r0
 80206e4:	da04      	bge.n	80206f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 80206e6:	2b00      	cmp	r3, #0
 80206e8:	db02      	blt.n	80206f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 80206ea:	42ab      	cmp	r3, r5
 80206ec:	f2c0 80ed 	blt.w	80208ca <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 80206f0:	3601      	adds	r6, #1
 80206f2:	f100 80da 	bmi.w	80208aa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 80206f6:	42b1      	cmp	r1, r6
 80206f8:	f2c0 80d7 	blt.w	80208aa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 80206fc:	3301      	adds	r3, #1
 80206fe:	f100 80d4 	bmi.w	80208aa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 8020702:	429a      	cmp	r2, r3
 8020704:	f2c0 80d1 	blt.w	80208aa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 8020708:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802070a:	9311      	str	r3, [sp, #68]	; 0x44
 802070c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802070e:	930c      	str	r3, [sp, #48]	; 0x30
 8020710:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8020712:	2b00      	cmp	r3, #0
 8020714:	f340 80fa 	ble.w	802090c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8020718:	9826      	ldr	r0, [sp, #152]	; 0x98
 802071a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802071c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 802071e:	68c6      	ldr	r6, [r0, #12]
 8020720:	141d      	asrs	r5, r3, #16
 8020722:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8020724:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8020728:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802072a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 802072c:	1400      	asrs	r0, r0, #16
 802072e:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8020732:	6892      	ldr	r2, [r2, #8]
 8020734:	f100 813e 	bmi.w	80209b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8020738:	1e57      	subs	r7, r2, #1
 802073a:	42b8      	cmp	r0, r7
 802073c:	f280 813a 	bge.w	80209b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8020740:	2d00      	cmp	r5, #0
 8020742:	f2c0 8137 	blt.w	80209b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8020746:	1e77      	subs	r7, r6, #1
 8020748:	42bd      	cmp	r5, r7
 802074a:	f280 8133 	bge.w	80209b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 802074e:	b212      	sxth	r2, r2
 8020750:	fb05 0002 	mla	r0, r5, r2, r0
 8020754:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8020756:	f815 a000 	ldrb.w	sl, [r5, r0]
 802075a:	182e      	adds	r6, r5, r0
 802075c:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 8020760:	eb04 050a 	add.w	r5, r4, sl
 8020764:	2b00      	cmp	r3, #0
 8020766:	f000 8117 	beq.w	8020998 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 802076a:	f896 c001 	ldrb.w	ip, [r6, #1]
 802076e:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8020772:	44a4      	add	ip, r4
 8020774:	2900      	cmp	r1, #0
 8020776:	f000 8117 	beq.w	80209a8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 802077a:	18b0      	adds	r0, r6, r2
 802077c:	5cb2      	ldrb	r2, [r6, r2]
 802077e:	7840      	ldrb	r0, [r0, #1]
 8020780:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020784:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8020788:	4422      	add	r2, r4
 802078a:	4420      	add	r0, r4
 802078c:	b29b      	uxth	r3, r3
 802078e:	f89c 7002 	ldrb.w	r7, [ip, #2]
 8020792:	b289      	uxth	r1, r1
 8020794:	f895 b002 	ldrb.w	fp, [r5, #2]
 8020798:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 802079a:	fb03 f901 	mul.w	r9, r3, r1
 802079e:	011b      	lsls	r3, r3, #4
 80207a0:	f8b6 e000 	ldrh.w	lr, [r6]
 80207a4:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80207a8:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 80207ac:	eba3 0309 	sub.w	r3, r3, r9
 80207b0:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
 80207b4:	b289      	uxth	r1, r1
 80207b6:	f814 a00a 	ldrb.w	sl, [r4, sl]
 80207ba:	b29b      	uxth	r3, r3
 80207bc:	eba8 0801 	sub.w	r8, r8, r1
 80207c0:	435f      	muls	r7, r3
 80207c2:	fa1f f888 	uxth.w	r8, r8
 80207c6:	9310      	str	r3, [sp, #64]	; 0x40
 80207c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80207ca:	fb08 770b 	mla	r7, r8, fp, r7
 80207ce:	f892 b002 	ldrb.w	fp, [r2, #2]
 80207d2:	fb01 770b 	mla	r7, r1, fp, r7
 80207d6:	f890 b002 	ldrb.w	fp, [r0, #2]
 80207da:	fb09 770b 	mla	r7, r9, fp, r7
 80207de:	ea4f 2b2e 	mov.w	fp, lr, asr #8
 80207e2:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 80207e6:	f3c7 2707 	ubfx	r7, r7, #8, #8
 80207ea:	fb1b fb03 	smulbb	fp, fp, r3
 80207ee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80207f0:	fb07 b706 	mla	r7, r7, r6, fp
 80207f4:	f895 b001 	ldrb.w	fp, [r5, #1]
 80207f8:	f89c 5001 	ldrb.w	r5, [ip, #1]
 80207fc:	f89c c000 	ldrb.w	ip, [ip]
 8020800:	b2bf      	uxth	r7, r7
 8020802:	435d      	muls	r5, r3
 8020804:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020806:	fb08 550b 	mla	r5, r8, fp, r5
 802080a:	f892 b001 	ldrb.w	fp, [r2, #1]
 802080e:	fb01 550b 	mla	r5, r1, fp, r5
 8020812:	f890 b001 	ldrb.w	fp, [r0, #1]
 8020816:	fb09 550b 	mla	r5, r9, fp, r5
 802081a:	ea4f 0bee 	mov.w	fp, lr, asr #3
 802081e:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8020822:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 8020826:	f3c5 2507 	ubfx	r5, r5, #8, #8
 802082a:	fa5f fe8e 	uxtb.w	lr, lr
 802082e:	fb1b fb03 	smulbb	fp, fp, r3
 8020832:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020834:	fb03 f30c 	mul.w	r3, r3, ip
 8020838:	f892 c000 	ldrb.w	ip, [r2]
 802083c:	fb05 b506 	mla	r5, r5, r6, fp
 8020840:	fb08 330a 	mla	r3, r8, sl, r3
 8020844:	b2ad      	uxth	r5, r5
 8020846:	fb01 330c 	mla	r3, r1, ip, r3
 802084a:	f890 c000 	ldrb.w	ip, [r0]
 802084e:	f105 0b01 	add.w	fp, r5, #1
 8020852:	fb09 3c0c 	mla	ip, r9, ip, r3
 8020856:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020858:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 802085c:	fb1e fe03 	smulbb	lr, lr, r3
 8020860:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8020864:	1c7b      	adds	r3, r7, #1
 8020866:	096d      	lsrs	r5, r5, #5
 8020868:	fb0c e606 	mla	r6, ip, r6, lr
 802086c:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 8020870:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8020874:	b2b6      	uxth	r6, r6
 8020876:	f407 4378 	and.w	r3, r7, #63488	; 0xf800
 802087a:	1c77      	adds	r7, r6, #1
 802087c:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 8020880:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8020884:	431f      	orrs	r7, r3
 8020886:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020888:	433d      	orrs	r5, r7
 802088a:	801d      	strh	r5, [r3, #0]
 802088c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802088e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8020890:	3302      	adds	r3, #2
 8020892:	930c      	str	r3, [sp, #48]	; 0x30
 8020894:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8020896:	4413      	add	r3, r2
 8020898:	9a22      	ldr	r2, [sp, #136]	; 0x88
 802089a:	931f      	str	r3, [sp, #124]	; 0x7c
 802089c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802089e:	4413      	add	r3, r2
 80208a0:	9320      	str	r3, [sp, #128]	; 0x80
 80208a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80208a4:	3b01      	subs	r3, #1
 80208a6:	9311      	str	r3, [sp, #68]	; 0x44
 80208a8:	e732      	b.n	8020710 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 80208aa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80208ac:	9e21      	ldr	r6, [sp, #132]	; 0x84
 80208ae:	4433      	add	r3, r6
 80208b0:	9e22      	ldr	r6, [sp, #136]	; 0x88
 80208b2:	931f      	str	r3, [sp, #124]	; 0x7c
 80208b4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80208b6:	4433      	add	r3, r6
 80208b8:	9320      	str	r3, [sp, #128]	; 0x80
 80208ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80208bc:	3b01      	subs	r3, #1
 80208be:	9309      	str	r3, [sp, #36]	; 0x24
 80208c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80208c2:	3302      	adds	r3, #2
 80208c4:	930a      	str	r3, [sp, #40]	; 0x28
 80208c6:	e702      	b.n	80206ce <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 80208c8:	d027      	beq.n	802091a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 80208ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80208cc:	9821      	ldr	r0, [sp, #132]	; 0x84
 80208ce:	3b01      	subs	r3, #1
 80208d0:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 80208d2:	fb00 5003 	mla	r0, r0, r3, r5
 80208d6:	1400      	asrs	r0, r0, #16
 80208d8:	f53f af16 	bmi.w	8020708 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80208dc:	3901      	subs	r1, #1
 80208de:	4288      	cmp	r0, r1
 80208e0:	f6bf af12 	bge.w	8020708 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80208e4:	9922      	ldr	r1, [sp, #136]	; 0x88
 80208e6:	9820      	ldr	r0, [sp, #128]	; 0x80
 80208e8:	fb01 0303 	mla	r3, r1, r3, r0
 80208ec:	141b      	asrs	r3, r3, #16
 80208ee:	f53f af0b 	bmi.w	8020708 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80208f2:	3a01      	subs	r2, #1
 80208f4:	4293      	cmp	r3, r2
 80208f6:	f6bf af07 	bge.w	8020708 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80208fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80208fc:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 8020900:	9311      	str	r3, [sp, #68]	; 0x44
 8020902:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020904:	930c      	str	r3, [sp, #48]	; 0x30
 8020906:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8020908:	2b00      	cmp	r3, #0
 802090a:	dc70      	bgt.n	80209ee <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
 802090c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802090e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020910:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020914:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8020918:	930a      	str	r3, [sp, #40]	; 0x28
 802091a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802091c:	2b00      	cmp	r3, #0
 802091e:	f340 8124 	ble.w	8020b6a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 8020922:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8020926:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8020928:	ee30 0a04 	vadd.f32	s0, s0, s8
 802092c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020930:	eef0 6a62 	vmov.f32	s13, s5
 8020934:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8020938:	ee31 1a05 	vadd.f32	s2, s2, s10
 802093c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020940:	edcd 6a1f 	vstr	s13, [sp, #124]	; 0x7c
 8020944:	eef0 6a43 	vmov.f32	s13, s6
 8020948:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802094c:	edcd 6a20 	vstr	s13, [sp, #128]	; 0x80
 8020950:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020954:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020958:	ee77 2a62 	vsub.f32	s5, s14, s5
 802095c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020960:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020964:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020968:	ee12 2a90 	vmov	r2, s5
 802096c:	eef0 2a47 	vmov.f32	s5, s14
 8020970:	fb92 f3f3 	sdiv	r3, r2, r3
 8020974:	ee13 2a10 	vmov	r2, s6
 8020978:	9321      	str	r3, [sp, #132]	; 0x84
 802097a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 802097c:	eeb0 3a67 	vmov.f32	s6, s15
 8020980:	fb92 f3f3 	sdiv	r3, r2, r3
 8020984:	9322      	str	r3, [sp, #136]	; 0x88
 8020986:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020988:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802098a:	3b01      	subs	r3, #1
 802098c:	930e      	str	r3, [sp, #56]	; 0x38
 802098e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8020990:	bf08      	it	eq
 8020992:	4613      	moveq	r3, r2
 8020994:	9309      	str	r3, [sp, #36]	; 0x24
 8020996:	e68c      	b.n	80206b2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8020998:	b149      	cbz	r1, 80209ae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x338>
 802099a:	5cb2      	ldrb	r2, [r6, r2]
 802099c:	4628      	mov	r0, r5
 802099e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80209a2:	4422      	add	r2, r4
 80209a4:	46ac      	mov	ip, r5
 80209a6:	e6f1      	b.n	802078c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 80209a8:	4628      	mov	r0, r5
 80209aa:	462a      	mov	r2, r5
 80209ac:	e6ee      	b.n	802078c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 80209ae:	4628      	mov	r0, r5
 80209b0:	462a      	mov	r2, r5
 80209b2:	e7f7      	b.n	80209a4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 80209b4:	1c47      	adds	r7, r0, #1
 80209b6:	f53f af69 	bmi.w	802088c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 80209ba:	42ba      	cmp	r2, r7
 80209bc:	f6ff af66 	blt.w	802088c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 80209c0:	1c6f      	adds	r7, r5, #1
 80209c2:	f53f af63 	bmi.w	802088c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 80209c6:	42be      	cmp	r6, r7
 80209c8:	f6ff af60 	blt.w	802088c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 80209cc:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80209ce:	b236      	sxth	r6, r6
 80209d0:	b212      	sxth	r2, r2
 80209d2:	9002      	str	r0, [sp, #8]
 80209d4:	9601      	str	r6, [sp, #4]
 80209d6:	9200      	str	r2, [sp, #0]
 80209d8:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80209da:	e9cd 1705 	strd	r1, r7, [sp, #20]
 80209de:	e9cd 5303 	strd	r5, r3, [sp, #12]
 80209e2:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 80209e6:	4623      	mov	r3, r4
 80209e8:	f7ff fd59 	bl	802049e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
 80209ec:	e74e      	b.n	802088c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 80209ee:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80209f0:	9820      	ldr	r0, [sp, #128]	; 0x80
 80209f2:	f3c2 3103 	ubfx	r1, r2, #12, #4
 80209f6:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 80209f8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80209fa:	1400      	asrs	r0, r0, #16
 80209fc:	142d      	asrs	r5, r5, #16
 80209fe:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8020a00:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8020a04:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8020a08:	fb02 5000 	mla	r0, r2, r0, r5
 8020a0c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8020a0e:	f815 9000 	ldrb.w	r9, [r5, r0]
 8020a12:	182e      	adds	r6, r5, r0
 8020a14:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8020a18:	eb04 0509 	add.w	r5, r4, r9
 8020a1c:	2b00      	cmp	r3, #0
 8020a1e:	f000 8096 	beq.w	8020b4e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8020a22:	7877      	ldrb	r7, [r6, #1]
 8020a24:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8020a28:	4427      	add	r7, r4
 8020a2a:	2900      	cmp	r1, #0
 8020a2c:	f000 8097 	beq.w	8020b5e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e8>
 8020a30:	18b0      	adds	r0, r6, r2
 8020a32:	5cb2      	ldrb	r2, [r6, r2]
 8020a34:	7840      	ldrb	r0, [r0, #1]
 8020a36:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020a3a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8020a3e:	4422      	add	r2, r4
 8020a40:	4420      	add	r0, r4
 8020a42:	b29b      	uxth	r3, r3
 8020a44:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8020a46:	b289      	uxth	r1, r1
 8020a48:	f895 b002 	ldrb.w	fp, [r5, #2]
 8020a4c:	f8b6 c000 	ldrh.w	ip, [r6]
 8020a50:	fb03 f801 	mul.w	r8, r3, r1
 8020a54:	011b      	lsls	r3, r3, #4
 8020a56:	78be      	ldrb	r6, [r7, #2]
 8020a58:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 8020a5c:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8020a60:	eba3 0308 	sub.w	r3, r3, r8
 8020a64:	f814 9009 	ldrb.w	r9, [r4, r9]
 8020a68:	b289      	uxth	r1, r1
 8020a6a:	b29b      	uxth	r3, r3
 8020a6c:	ebae 0e01 	sub.w	lr, lr, r1
 8020a70:	435e      	muls	r6, r3
 8020a72:	fa1f fe8e 	uxth.w	lr, lr
 8020a76:	9310      	str	r3, [sp, #64]	; 0x40
 8020a78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020a7a:	fb0e 660b 	mla	r6, lr, fp, r6
 8020a7e:	f892 b002 	ldrb.w	fp, [r2, #2]
 8020a82:	fb01 660b 	mla	r6, r1, fp, r6
 8020a86:	f890 b002 	ldrb.w	fp, [r0, #2]
 8020a8a:	fb08 660b 	mla	r6, r8, fp, r6
 8020a8e:	ea4f 2b2c 	mov.w	fp, ip, asr #8
 8020a92:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 8020a96:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8020a9a:	fb1b fb03 	smulbb	fp, fp, r3
 8020a9e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020aa0:	fb06 b60a 	mla	r6, r6, sl, fp
 8020aa4:	f895 b001 	ldrb.w	fp, [r5, #1]
 8020aa8:	787d      	ldrb	r5, [r7, #1]
 8020aaa:	783f      	ldrb	r7, [r7, #0]
 8020aac:	b2b6      	uxth	r6, r6
 8020aae:	435d      	muls	r5, r3
 8020ab0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020ab2:	fb0e 550b 	mla	r5, lr, fp, r5
 8020ab6:	f892 b001 	ldrb.w	fp, [r2, #1]
 8020aba:	fb01 550b 	mla	r5, r1, fp, r5
 8020abe:	f890 b001 	ldrb.w	fp, [r0, #1]
 8020ac2:	fb08 550b 	mla	r5, r8, fp, r5
 8020ac6:	ea4f 0bec 	mov.w	fp, ip, asr #3
 8020aca:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8020ace:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 8020ad2:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8020ad6:	fa5f fc8c 	uxtb.w	ip, ip
 8020ada:	fb1b fb03 	smulbb	fp, fp, r3
 8020ade:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020ae0:	437b      	muls	r3, r7
 8020ae2:	7817      	ldrb	r7, [r2, #0]
 8020ae4:	fb05 b50a 	mla	r5, r5, sl, fp
 8020ae8:	fb0e 3309 	mla	r3, lr, r9, r3
 8020aec:	b2ad      	uxth	r5, r5
 8020aee:	fb01 3307 	mla	r3, r1, r7, r3
 8020af2:	7807      	ldrb	r7, [r0, #0]
 8020af4:	f105 0b01 	add.w	fp, r5, #1
 8020af8:	fb08 3707 	mla	r7, r8, r7, r3
 8020afc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020afe:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 8020b02:	fb1c fc03 	smulbb	ip, ip, r3
 8020b06:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8020b0a:	1c73      	adds	r3, r6, #1
 8020b0c:	096d      	lsrs	r5, r5, #5
 8020b0e:	fb07 c70a 	mla	r7, r7, sl, ip
 8020b12:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8020b16:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8020b1a:	b2bf      	uxth	r7, r7
 8020b1c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020b1e:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 8020b22:	1c7a      	adds	r2, r7, #1
 8020b24:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 8020b28:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8020b2c:	4316      	orrs	r6, r2
 8020b2e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8020b30:	432e      	orrs	r6, r5
 8020b32:	f823 6b02 	strh.w	r6, [r3], #2
 8020b36:	930c      	str	r3, [sp, #48]	; 0x30
 8020b38:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8020b3a:	4413      	add	r3, r2
 8020b3c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8020b3e:	931f      	str	r3, [sp, #124]	; 0x7c
 8020b40:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020b42:	4413      	add	r3, r2
 8020b44:	9320      	str	r3, [sp, #128]	; 0x80
 8020b46:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8020b48:	3b01      	subs	r3, #1
 8020b4a:	9311      	str	r3, [sp, #68]	; 0x44
 8020b4c:	e6db      	b.n	8020906 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x290>
 8020b4e:	b149      	cbz	r1, 8020b64 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ee>
 8020b50:	5cb2      	ldrb	r2, [r6, r2]
 8020b52:	4628      	mov	r0, r5
 8020b54:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020b58:	4422      	add	r2, r4
 8020b5a:	462f      	mov	r7, r5
 8020b5c:	e771      	b.n	8020a42 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 8020b5e:	4628      	mov	r0, r5
 8020b60:	462a      	mov	r2, r5
 8020b62:	e76e      	b.n	8020a42 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 8020b64:	4628      	mov	r0, r5
 8020b66:	462a      	mov	r2, r5
 8020b68:	e7f7      	b.n	8020b5a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8020b6a:	b015      	add	sp, #84	; 0x54
 8020b6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020b70 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
 8020b70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020b74:	880f      	ldrh	r7, [r1, #0]
 8020b76:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 8020b7a:	023c      	lsls	r4, r7, #8
 8020b7c:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 8020b80:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 8020b84:	f404 0b78 	and.w	fp, r4, #16252928	; 0xf80000
 8020b88:	017c      	lsls	r4, r7, #5
 8020b8a:	00ff      	lsls	r7, r7, #3
 8020b8c:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 8020b90:	f404 447c 	and.w	r4, r4, #64512	; 0xfc00
 8020b94:	b2ff      	uxtb	r7, r7
 8020b96:	ea4b 0404 	orr.w	r4, fp, r4
 8020b9a:	e9dd c50e 	ldrd	ip, r5, [sp, #56]	; 0x38
 8020b9e:	4327      	orrs	r7, r4
 8020ba0:	fb05 ca0e 	mla	sl, r5, lr, ip
 8020ba4:	2d00      	cmp	r5, #0
 8020ba6:	9701      	str	r7, [sp, #4]
 8020ba8:	eb02 080a 	add.w	r8, r2, sl
 8020bac:	db7e      	blt.n	8020cac <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
 8020bae:	45a9      	cmp	r9, r5
 8020bb0:	dd7c      	ble.n	8020cac <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
 8020bb2:	f1bc 0f00 	cmp.w	ip, #0
 8020bb6:	db77      	blt.n	8020ca8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 8020bb8:	45e6      	cmp	lr, ip
 8020bba:	dd75      	ble.n	8020ca8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 8020bbc:	f812 700a 	ldrb.w	r7, [r2, sl]
 8020bc0:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8020bc4:	441f      	add	r7, r3
 8020bc6:	f11c 0201 	adds.w	r2, ip, #1
 8020bca:	d472      	bmi.n	8020cb2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 8020bcc:	4596      	cmp	lr, r2
 8020bce:	dd70      	ble.n	8020cb2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 8020bd0:	2800      	cmp	r0, #0
 8020bd2:	d06e      	beq.n	8020cb2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 8020bd4:	f898 4001 	ldrb.w	r4, [r8, #1]
 8020bd8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8020bdc:	441c      	add	r4, r3
 8020bde:	3501      	adds	r5, #1
 8020be0:	d46b      	bmi.n	8020cba <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 8020be2:	45a9      	cmp	r9, r5
 8020be4:	dd69      	ble.n	8020cba <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 8020be6:	2e00      	cmp	r6, #0
 8020be8:	d067      	beq.n	8020cba <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 8020bea:	f1bc 0f00 	cmp.w	ip, #0
 8020bee:	db62      	blt.n	8020cb6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
 8020bf0:	45e6      	cmp	lr, ip
 8020bf2:	dd60      	ble.n	8020cb6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
 8020bf4:	f818 500e 	ldrb.w	r5, [r8, lr]
 8020bf8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8020bfc:	441d      	add	r5, r3
 8020bfe:	f11c 0201 	adds.w	r2, ip, #1
 8020c02:	d45d      	bmi.n	8020cc0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 8020c04:	4596      	cmp	lr, r2
 8020c06:	dd5b      	ble.n	8020cc0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 8020c08:	2800      	cmp	r0, #0
 8020c0a:	d059      	beq.n	8020cc0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 8020c0c:	44c6      	add	lr, r8
 8020c0e:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8020c12:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020c16:	4413      	add	r3, r2
 8020c18:	b280      	uxth	r0, r0
 8020c1a:	f897 e002 	ldrb.w	lr, [r7, #2]
 8020c1e:	b2b2      	uxth	r2, r6
 8020c20:	f897 9000 	ldrb.w	r9, [r7]
 8020c24:	787f      	ldrb	r7, [r7, #1]
 8020c26:	fb00 f602 	mul.w	r6, r0, r2
 8020c2a:	0100      	lsls	r0, r0, #4
 8020c2c:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 8020c30:	f5c0 7880 	rsb	r8, r0, #256	; 0x100
 8020c34:	1b80      	subs	r0, r0, r6
 8020c36:	fa1f fc82 	uxth.w	ip, r2
 8020c3a:	b282      	uxth	r2, r0
 8020c3c:	78a0      	ldrb	r0, [r4, #2]
 8020c3e:	eba8 080c 	sub.w	r8, r8, ip
 8020c42:	4350      	muls	r0, r2
 8020c44:	fa1f f888 	uxth.w	r8, r8
 8020c48:	fb08 0e0e 	mla	lr, r8, lr, r0
 8020c4c:	78a8      	ldrb	r0, [r5, #2]
 8020c4e:	fb0c e000 	mla	r0, ip, r0, lr
 8020c52:	f893 e002 	ldrb.w	lr, [r3, #2]
 8020c56:	fb06 0e0e 	mla	lr, r6, lr, r0
 8020c5a:	f40e 4078 	and.w	r0, lr, #63488	; 0xf800
 8020c5e:	f894 e000 	ldrb.w	lr, [r4]
 8020c62:	fb02 fe0e 	mul.w	lr, r2, lr
 8020c66:	fb08 e909 	mla	r9, r8, r9, lr
 8020c6a:	f895 e000 	ldrb.w	lr, [r5]
 8020c6e:	fb0c 990e 	mla	r9, ip, lr, r9
 8020c72:	f893 e000 	ldrb.w	lr, [r3]
 8020c76:	785b      	ldrb	r3, [r3, #1]
 8020c78:	fb06 9e0e 	mla	lr, r6, lr, r9
 8020c7c:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 8020c80:	ea4e 0e00 	orr.w	lr, lr, r0
 8020c84:	7860      	ldrb	r0, [r4, #1]
 8020c86:	4350      	muls	r0, r2
 8020c88:	786a      	ldrb	r2, [r5, #1]
 8020c8a:	fb08 0007 	mla	r0, r8, r7, r0
 8020c8e:	fb0c 0202 	mla	r2, ip, r2, r0
 8020c92:	fb06 2303 	mla	r3, r6, r3, r2
 8020c96:	095b      	lsrs	r3, r3, #5
 8020c98:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8020c9c:	ea4e 0303 	orr.w	r3, lr, r3
 8020ca0:	800b      	strh	r3, [r1, #0]
 8020ca2:	b003      	add	sp, #12
 8020ca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020ca8:	af01      	add	r7, sp, #4
 8020caa:	e78c      	b.n	8020bc6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x56>
 8020cac:	ac01      	add	r4, sp, #4
 8020cae:	4627      	mov	r7, r4
 8020cb0:	e795      	b.n	8020bde <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 8020cb2:	ac01      	add	r4, sp, #4
 8020cb4:	e793      	b.n	8020bde <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 8020cb6:	ad01      	add	r5, sp, #4
 8020cb8:	e7a1      	b.n	8020bfe <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x8e>
 8020cba:	ab01      	add	r3, sp, #4
 8020cbc:	461d      	mov	r5, r3
 8020cbe:	e7ab      	b.n	8020c18 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>
 8020cc0:	ab01      	add	r3, sp, #4
 8020cc2:	e7a9      	b.n	8020c18 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>

08020cc4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020cc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020cc8:	b08f      	sub	sp, #60	; 0x3c
 8020cca:	920c      	str	r2, [sp, #48]	; 0x30
 8020ccc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8020cce:	900d      	str	r0, [sp, #52]	; 0x34
 8020cd0:	910a      	str	r1, [sp, #40]	; 0x28
 8020cd2:	6850      	ldr	r0, [r2, #4]
 8020cd4:	9306      	str	r3, [sp, #24]
 8020cd6:	6812      	ldr	r2, [r2, #0]
 8020cd8:	e9dd 131e 	ldrd	r1, r3, [sp, #120]	; 0x78
 8020cdc:	e9dd b519 	ldrd	fp, r5, [sp, #100]	; 0x64
 8020ce0:	fb00 1303 	mla	r3, r0, r3, r1
 8020ce4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8020ce8:	9307      	str	r3, [sp, #28]
 8020cea:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020cec:	681b      	ldr	r3, [r3, #0]
 8020cee:	9308      	str	r3, [sp, #32]
 8020cf0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020cf2:	685c      	ldr	r4, [r3, #4]
 8020cf4:	3404      	adds	r4, #4
 8020cf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020cf8:	2b00      	cmp	r3, #0
 8020cfa:	dc03      	bgt.n	8020d04 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 8020cfc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020cfe:	2b00      	cmp	r3, #0
 8020d00:	f340 81d5 	ble.w	80210ae <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 8020d04:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020d06:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8020d0a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8020d0e:	1e48      	subs	r0, r1, #1
 8020d10:	1e56      	subs	r6, r2, #1
 8020d12:	9b06      	ldr	r3, [sp, #24]
 8020d14:	2b00      	cmp	r3, #0
 8020d16:	f340 80b6 	ble.w	8020e86 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8020d1a:	ea5f 472b 	movs.w	r7, fp, asr #16
 8020d1e:	ea4f 4325 	mov.w	r3, r5, asr #16
 8020d22:	d406      	bmi.n	8020d32 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8020d24:	4287      	cmp	r7, r0
 8020d26:	da04      	bge.n	8020d32 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8020d28:	2b00      	cmp	r3, #0
 8020d2a:	db02      	blt.n	8020d32 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8020d2c:	42b3      	cmp	r3, r6
 8020d2e:	f2c0 80ab 	blt.w	8020e88 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c4>
 8020d32:	3701      	adds	r7, #1
 8020d34:	f100 809c 	bmi.w	8020e70 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8020d38:	42b9      	cmp	r1, r7
 8020d3a:	f2c0 8099 	blt.w	8020e70 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8020d3e:	3301      	adds	r3, #1
 8020d40:	f100 8096 	bmi.w	8020e70 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8020d44:	429a      	cmp	r2, r3
 8020d46:	f2c0 8093 	blt.w	8020e70 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8020d4a:	9b06      	ldr	r3, [sp, #24]
 8020d4c:	930b      	str	r3, [sp, #44]	; 0x2c
 8020d4e:	9b07      	ldr	r3, [sp, #28]
 8020d50:	9309      	str	r3, [sp, #36]	; 0x24
 8020d52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020d54:	2b00      	cmp	r3, #0
 8020d56:	f340 80b4 	ble.w	8020ec2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 8020d5a:	9820      	ldr	r0, [sp, #128]	; 0x80
 8020d5c:	142e      	asrs	r6, r5, #16
 8020d5e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8020d60:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8020d64:	68c7      	ldr	r7, [r0, #12]
 8020d66:	ea5f 402b 	movs.w	r0, fp, asr #16
 8020d6a:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8020d6e:	6892      	ldr	r2, [r2, #8]
 8020d70:	f100 80fb 	bmi.w	8020f6a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8020d74:	f102 3cff 	add.w	ip, r2, #4294967295
 8020d78:	4560      	cmp	r0, ip
 8020d7a:	f280 80f6 	bge.w	8020f6a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8020d7e:	2e00      	cmp	r6, #0
 8020d80:	f2c0 80f3 	blt.w	8020f6a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8020d84:	f107 3cff 	add.w	ip, r7, #4294967295
 8020d88:	4566      	cmp	r6, ip
 8020d8a:	f280 80ee 	bge.w	8020f6a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8020d8e:	b212      	sxth	r2, r2
 8020d90:	fb06 0002 	mla	r0, r6, r2, r0
 8020d94:	9e08      	ldr	r6, [sp, #32]
 8020d96:	1837      	adds	r7, r6, r0
 8020d98:	5c30      	ldrb	r0, [r6, r0]
 8020d9a:	eb00 0840 	add.w	r8, r0, r0, lsl #1
 8020d9e:	eb04 0c08 	add.w	ip, r4, r8
 8020da2:	2b00      	cmp	r3, #0
 8020da4:	f000 80d3 	beq.w	8020f4e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8020da8:	787e      	ldrb	r6, [r7, #1]
 8020daa:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8020dae:	4426      	add	r6, r4
 8020db0:	2900      	cmp	r1, #0
 8020db2:	f000 80d4 	beq.w	8020f5e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8020db6:	18b8      	adds	r0, r7, r2
 8020db8:	5cba      	ldrb	r2, [r7, r2]
 8020dba:	7840      	ldrb	r0, [r0, #1]
 8020dbc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020dc0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8020dc4:	4422      	add	r2, r4
 8020dc6:	4420      	add	r0, r4
 8020dc8:	b29b      	uxth	r3, r3
 8020dca:	78b7      	ldrb	r7, [r6, #2]
 8020dcc:	b289      	uxth	r1, r1
 8020dce:	f89c a002 	ldrb.w	sl, [ip, #2]
 8020dd2:	f89c c001 	ldrb.w	ip, [ip, #1]
 8020dd6:	fb03 f901 	mul.w	r9, r3, r1
 8020dda:	011b      	lsls	r3, r3, #4
 8020ddc:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8020de0:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8020de4:	eba3 0309 	sub.w	r3, r3, r9
 8020de8:	b289      	uxth	r1, r1
 8020dea:	b29b      	uxth	r3, r3
 8020dec:	ebae 0e01 	sub.w	lr, lr, r1
 8020df0:	435f      	muls	r7, r3
 8020df2:	fa1f fe8e 	uxth.w	lr, lr
 8020df6:	fb0e 770a 	mla	r7, lr, sl, r7
 8020dfa:	f892 a002 	ldrb.w	sl, [r2, #2]
 8020dfe:	fb01 770a 	mla	r7, r1, sl, r7
 8020e02:	f890 a002 	ldrb.w	sl, [r0, #2]
 8020e06:	fb09 7a0a 	mla	sl, r9, sl, r7
 8020e0a:	f814 7008 	ldrb.w	r7, [r4, r8]
 8020e0e:	f896 8000 	ldrb.w	r8, [r6]
 8020e12:	7876      	ldrb	r6, [r6, #1]
 8020e14:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 8020e18:	fb03 f808 	mul.w	r8, r3, r8
 8020e1c:	4373      	muls	r3, r6
 8020e1e:	fb0e 8807 	mla	r8, lr, r7, r8
 8020e22:	7817      	ldrb	r7, [r2, #0]
 8020e24:	fb0e 330c 	mla	r3, lr, ip, r3
 8020e28:	fb01 8807 	mla	r8, r1, r7, r8
 8020e2c:	7807      	ldrb	r7, [r0, #0]
 8020e2e:	fb09 8707 	mla	r7, r9, r7, r8
 8020e32:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8020e36:	ea47 070a 	orr.w	r7, r7, sl
 8020e3a:	f892 a001 	ldrb.w	sl, [r2, #1]
 8020e3e:	fb01 310a 	mla	r1, r1, sl, r3
 8020e42:	f890 a001 	ldrb.w	sl, [r0, #1]
 8020e46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020e48:	fb09 1a0a 	mla	sl, r9, sl, r1
 8020e4c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8020e50:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8020e54:	ea47 070a 	orr.w	r7, r7, sl
 8020e58:	801f      	strh	r7, [r3, #0]
 8020e5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020e5c:	3302      	adds	r3, #2
 8020e5e:	9309      	str	r3, [sp, #36]	; 0x24
 8020e60:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8020e62:	449b      	add	fp, r3
 8020e64:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8020e66:	441d      	add	r5, r3
 8020e68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020e6a:	3b01      	subs	r3, #1
 8020e6c:	930b      	str	r3, [sp, #44]	; 0x2c
 8020e6e:	e770      	b.n	8020d52 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8020e70:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8020e72:	449b      	add	fp, r3
 8020e74:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8020e76:	441d      	add	r5, r3
 8020e78:	9b06      	ldr	r3, [sp, #24]
 8020e7a:	3b01      	subs	r3, #1
 8020e7c:	9306      	str	r3, [sp, #24]
 8020e7e:	9b07      	ldr	r3, [sp, #28]
 8020e80:	3302      	adds	r3, #2
 8020e82:	9307      	str	r3, [sp, #28]
 8020e84:	e745      	b.n	8020d12 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 8020e86:	d023      	beq.n	8020ed0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8020e88:	9b06      	ldr	r3, [sp, #24]
 8020e8a:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8020e8c:	3b01      	subs	r3, #1
 8020e8e:	fb00 b003 	mla	r0, r0, r3, fp
 8020e92:	1400      	asrs	r0, r0, #16
 8020e94:	f53f af59 	bmi.w	8020d4a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8020e98:	3901      	subs	r1, #1
 8020e9a:	4288      	cmp	r0, r1
 8020e9c:	f6bf af55 	bge.w	8020d4a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8020ea0:	991c      	ldr	r1, [sp, #112]	; 0x70
 8020ea2:	fb01 5303 	mla	r3, r1, r3, r5
 8020ea6:	141b      	asrs	r3, r3, #16
 8020ea8:	f53f af4f 	bmi.w	8020d4a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8020eac:	3a01      	subs	r2, #1
 8020eae:	4293      	cmp	r3, r2
 8020eb0:	f6bf af4b 	bge.w	8020d4a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8020eb4:	9b06      	ldr	r3, [sp, #24]
 8020eb6:	9309      	str	r3, [sp, #36]	; 0x24
 8020eb8:	9b07      	ldr	r3, [sp, #28]
 8020eba:	930b      	str	r3, [sp, #44]	; 0x2c
 8020ebc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020ebe:	2b00      	cmp	r3, #0
 8020ec0:	dc70      	bgt.n	8020fa4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8020ec2:	9b06      	ldr	r3, [sp, #24]
 8020ec4:	9a07      	ldr	r2, [sp, #28]
 8020ec6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020eca:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8020ece:	9307      	str	r3, [sp, #28]
 8020ed0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020ed2:	2b00      	cmp	r3, #0
 8020ed4:	f340 80eb 	ble.w	80210ae <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 8020ed8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8020edc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8020ede:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020ee2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020ee6:	eef0 6a62 	vmov.f32	s13, s5
 8020eea:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8020eee:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020ef2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020ef6:	ee16 ba90 	vmov	fp, s13
 8020efa:	eef0 6a43 	vmov.f32	s13, s6
 8020efe:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020f02:	ee16 5a90 	vmov	r5, s13
 8020f06:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020f0a:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020f0e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020f12:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020f16:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020f1a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020f1e:	ee12 2a90 	vmov	r2, s5
 8020f22:	eef0 2a47 	vmov.f32	s5, s14
 8020f26:	fb92 f3f3 	sdiv	r3, r2, r3
 8020f2a:	ee13 2a10 	vmov	r2, s6
 8020f2e:	931b      	str	r3, [sp, #108]	; 0x6c
 8020f30:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8020f32:	eeb0 3a67 	vmov.f32	s6, s15
 8020f36:	fb92 f3f3 	sdiv	r3, r2, r3
 8020f3a:	931c      	str	r3, [sp, #112]	; 0x70
 8020f3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020f3e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020f40:	3b01      	subs	r3, #1
 8020f42:	930a      	str	r3, [sp, #40]	; 0x28
 8020f44:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8020f46:	bf08      	it	eq
 8020f48:	4613      	moveq	r3, r2
 8020f4a:	9306      	str	r3, [sp, #24]
 8020f4c:	e6d3      	b.n	8020cf6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 8020f4e:	b149      	cbz	r1, 8020f64 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8020f50:	5cba      	ldrb	r2, [r7, r2]
 8020f52:	4660      	mov	r0, ip
 8020f54:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020f58:	4422      	add	r2, r4
 8020f5a:	4666      	mov	r6, ip
 8020f5c:	e734      	b.n	8020dc8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 8020f5e:	4660      	mov	r0, ip
 8020f60:	4662      	mov	r2, ip
 8020f62:	e731      	b.n	8020dc8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 8020f64:	4660      	mov	r0, ip
 8020f66:	4662      	mov	r2, ip
 8020f68:	e7f7      	b.n	8020f5a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8020f6a:	f110 0c01 	adds.w	ip, r0, #1
 8020f6e:	f53f af74 	bmi.w	8020e5a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8020f72:	4562      	cmp	r2, ip
 8020f74:	f6ff af71 	blt.w	8020e5a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8020f78:	f116 0c01 	adds.w	ip, r6, #1
 8020f7c:	f53f af6d 	bmi.w	8020e5a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8020f80:	4567      	cmp	r7, ip
 8020f82:	f6ff af6a 	blt.w	8020e5a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8020f86:	b23f      	sxth	r7, r7
 8020f88:	b212      	sxth	r2, r2
 8020f8a:	9701      	str	r7, [sp, #4]
 8020f8c:	9200      	str	r2, [sp, #0]
 8020f8e:	e9cd 3104 	strd	r3, r1, [sp, #16]
 8020f92:	e9cd 0602 	strd	r0, r6, [sp, #8]
 8020f96:	4623      	mov	r3, r4
 8020f98:	980d      	ldr	r0, [sp, #52]	; 0x34
 8020f9a:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8020f9e:	f7ff fde7 	bl	8020b70 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
 8020fa2:	e75a      	b.n	8020e5a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8020fa4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8020fa6:	ea4f 462b 	mov.w	r6, fp, asr #16
 8020faa:	1428      	asrs	r0, r5, #16
 8020fac:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8020fb0:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8020fb4:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8020fb8:	fb02 6000 	mla	r0, r2, r0, r6
 8020fbc:	9e08      	ldr	r6, [sp, #32]
 8020fbe:	f816 8000 	ldrb.w	r8, [r6, r0]
 8020fc2:	1837      	adds	r7, r6, r0
 8020fc4:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8020fc8:	eb04 0c08 	add.w	ip, r4, r8
 8020fcc:	2b00      	cmp	r3, #0
 8020fce:	d060      	beq.n	8021092 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ce>
 8020fd0:	787e      	ldrb	r6, [r7, #1]
 8020fd2:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8020fd6:	4426      	add	r6, r4
 8020fd8:	2900      	cmp	r1, #0
 8020fda:	d062      	beq.n	80210a2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
 8020fdc:	18b8      	adds	r0, r7, r2
 8020fde:	5cba      	ldrb	r2, [r7, r2]
 8020fe0:	7840      	ldrb	r0, [r0, #1]
 8020fe2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020fe6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8020fea:	4422      	add	r2, r4
 8020fec:	4420      	add	r0, r4
 8020fee:	b29b      	uxth	r3, r3
 8020ff0:	78b7      	ldrb	r7, [r6, #2]
 8020ff2:	b289      	uxth	r1, r1
 8020ff4:	f89c a002 	ldrb.w	sl, [ip, #2]
 8020ff8:	f89c c001 	ldrb.w	ip, [ip, #1]
 8020ffc:	fb03 f901 	mul.w	r9, r3, r1
 8021000:	011b      	lsls	r3, r3, #4
 8021002:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8021006:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 802100a:	eba3 0309 	sub.w	r3, r3, r9
 802100e:	b289      	uxth	r1, r1
 8021010:	b29b      	uxth	r3, r3
 8021012:	ebae 0e01 	sub.w	lr, lr, r1
 8021016:	435f      	muls	r7, r3
 8021018:	fa1f fe8e 	uxth.w	lr, lr
 802101c:	fb0e 770a 	mla	r7, lr, sl, r7
 8021020:	f892 a002 	ldrb.w	sl, [r2, #2]
 8021024:	fb01 770a 	mla	r7, r1, sl, r7
 8021028:	f890 a002 	ldrb.w	sl, [r0, #2]
 802102c:	fb09 7a0a 	mla	sl, r9, sl, r7
 8021030:	f814 7008 	ldrb.w	r7, [r4, r8]
 8021034:	f896 8000 	ldrb.w	r8, [r6]
 8021038:	7876      	ldrb	r6, [r6, #1]
 802103a:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 802103e:	fb03 f808 	mul.w	r8, r3, r8
 8021042:	4373      	muls	r3, r6
 8021044:	7856      	ldrb	r6, [r2, #1]
 8021046:	fb0e 8807 	mla	r8, lr, r7, r8
 802104a:	7817      	ldrb	r7, [r2, #0]
 802104c:	fb0e 330c 	mla	r3, lr, ip, r3
 8021050:	fb01 8807 	mla	r8, r1, r7, r8
 8021054:	7807      	ldrb	r7, [r0, #0]
 8021056:	fb01 3306 	mla	r3, r1, r6, r3
 802105a:	fb09 8707 	mla	r7, r9, r7, r8
 802105e:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8021062:	ea47 070a 	orr.w	r7, r7, sl
 8021066:	f890 a001 	ldrb.w	sl, [r0, #1]
 802106a:	fb09 3a0a 	mla	sl, r9, sl, r3
 802106e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021070:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8021074:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8021078:	ea47 070a 	orr.w	r7, r7, sl
 802107c:	f823 7b02 	strh.w	r7, [r3], #2
 8021080:	930b      	str	r3, [sp, #44]	; 0x2c
 8021082:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8021084:	449b      	add	fp, r3
 8021086:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8021088:	441d      	add	r5, r3
 802108a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802108c:	3b01      	subs	r3, #1
 802108e:	9309      	str	r3, [sp, #36]	; 0x24
 8021090:	e714      	b.n	8020ebc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f8>
 8021092:	b149      	cbz	r1, 80210a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 8021094:	5cba      	ldrb	r2, [r7, r2]
 8021096:	4660      	mov	r0, ip
 8021098:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802109c:	4422      	add	r2, r4
 802109e:	4666      	mov	r6, ip
 80210a0:	e7a5      	b.n	8020fee <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 80210a2:	4660      	mov	r0, ip
 80210a4:	4662      	mov	r2, ip
 80210a6:	e7a2      	b.n	8020fee <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 80210a8:	4660      	mov	r0, ip
 80210aa:	4662      	mov	r2, ip
 80210ac:	e7f7      	b.n	802109e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3da>
 80210ae:	b00f      	add	sp, #60	; 0x3c
 80210b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080210b4 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
 80210b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80210b8:	b085      	sub	sp, #20
 80210ba:	e9dd 7410 	ldrd	r7, r4, [sp, #64]	; 0x40
 80210be:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 80210c2:	9102      	str	r1, [sp, #8]
 80210c4:	2c00      	cmp	r4, #0
 80210c6:	fb04 710c 	mla	r1, r4, ip, r7
 80210ca:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 80210ce:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
 80210d2:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 80210d6:	eb02 0e01 	add.w	lr, r2, r1
 80210da:	f2c0 8122 	blt.w	8021322 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
 80210de:	45a0      	cmp	r8, r4
 80210e0:	f340 811f 	ble.w	8021322 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
 80210e4:	2f00      	cmp	r7, #0
 80210e6:	f2c0 811a 	blt.w	802131e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
 80210ea:	45bc      	cmp	ip, r7
 80210ec:	f340 8117 	ble.w	802131e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
 80210f0:	5c52      	ldrb	r2, [r2, r1]
 80210f2:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 80210f6:	1c7a      	adds	r2, r7, #1
 80210f8:	f100 8116 	bmi.w	8021328 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
 80210fc:	4594      	cmp	ip, r2
 80210fe:	f340 8113 	ble.w	8021328 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
 8021102:	2e00      	cmp	r6, #0
 8021104:	f000 8112 	beq.w	802132c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x278>
 8021108:	f89e 2001 	ldrb.w	r2, [lr, #1]
 802110c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8021110:	3401      	adds	r4, #1
 8021112:	f100 810f 	bmi.w	8021334 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
 8021116:	45a0      	cmp	r8, r4
 8021118:	f340 810c 	ble.w	8021334 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
 802111c:	2800      	cmp	r0, #0
 802111e:	f000 810c 	beq.w	802133a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x286>
 8021122:	2f00      	cmp	r7, #0
 8021124:	f2c0 8104 	blt.w	8021330 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
 8021128:	45bc      	cmp	ip, r7
 802112a:	f340 8101 	ble.w	8021330 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
 802112e:	f81e 200c 	ldrb.w	r2, [lr, ip]
 8021132:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8021136:	3701      	adds	r7, #1
 8021138:	f100 8102 	bmi.w	8021340 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
 802113c:	45bc      	cmp	ip, r7
 802113e:	f340 80ff 	ble.w	8021340 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
 8021142:	2e00      	cmp	r6, #0
 8021144:	f000 80fe 	beq.w	8021344 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x290>
 8021148:	44f4      	add	ip, lr
 802114a:	f89c 2001 	ldrb.w	r2, [ip, #1]
 802114e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8021152:	b2b6      	uxth	r6, r6
 8021154:	b280      	uxth	r0, r0
 8021156:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 802115a:	fb00 fe06 	mul.w	lr, r0, r6
 802115e:	0136      	lsls	r6, r6, #4
 8021160:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 8021164:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 8021168:	eba6 070e 	sub.w	r7, r6, lr
 802116c:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 8021170:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8021174:	b280      	uxth	r0, r0
 8021176:	b2bf      	uxth	r7, r7
 8021178:	1a1b      	subs	r3, r3, r0
 802117a:	ea4f 6812 	mov.w	r8, r2, lsr #24
 802117e:	fb0a f607 	mul.w	r6, sl, r7
 8021182:	b29b      	uxth	r3, r3
 8021184:	fb0b 6603 	mla	r6, fp, r3, r6
 8021188:	fb00 6609 	mla	r6, r0, r9, r6
 802118c:	fb0e 6608 	mla	r6, lr, r8, r6
 8021190:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8021194:	9600      	str	r6, [sp, #0]
 8021196:	2e00      	cmp	r6, #0
 8021198:	f000 80be 	beq.w	8021318 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x264>
 802119c:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80211a0:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80211a4:	9e02      	ldr	r6, [sp, #8]
 80211a6:	fb0b fc0c 	mul.w	ip, fp, ip
 80211aa:	fb0b f505 	mul.w	r5, fp, r5
 80211ae:	8836      	ldrh	r6, [r6, #0]
 80211b0:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 80211b4:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80211b8:	9501      	str	r5, [sp, #4]
 80211ba:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 80211be:	44dc      	add	ip, fp
 80211c0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80211c4:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 80211c8:	9503      	str	r5, [sp, #12]
 80211ca:	9d01      	ldr	r5, [sp, #4]
 80211cc:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 80211d0:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 80211d4:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 80211d8:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 80211dc:	fb0a fc0c 	mul.w	ip, sl, ip
 80211e0:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 80211e4:	fb0a fa01 	mul.w	sl, sl, r1
 80211e8:	ea4f 251c 	mov.w	r5, ip, lsr #8
 80211ec:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80211f0:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 80211f4:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80211f8:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 80211fc:	4465      	add	r5, ip
 80211fe:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8021202:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8021206:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802120a:	fb09 fc0c 	mul.w	ip, r9, ip
 802120e:	0a2d      	lsrs	r5, r5, #8
 8021210:	fb09 f904 	mul.w	r9, r9, r4
 8021214:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021218:	ea4f 211c 	mov.w	r1, ip, lsr #8
 802121c:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8021220:	f509 7480 	add.w	r4, r9, #256	; 0x100
 8021224:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8021228:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 802122c:	437d      	muls	r5, r7
 802122e:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8021232:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 8021236:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802123a:	4461      	add	r1, ip
 802123c:	fb08 f404 	mul.w	r4, r8, r4
 8021240:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8021244:	fb08 f802 	mul.w	r8, r8, r2
 8021248:	0a09      	lsrs	r1, r1, #8
 802124a:	0a22      	lsrs	r2, r4, #8
 802124c:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 8021250:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8021254:	fb07 f70a 	mul.w	r7, r7, sl
 8021258:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802125c:	4414      	add	r4, r2
 802125e:	f508 7280 	add.w	r2, r8, #256	; 0x100
 8021262:	0a24      	lsrs	r4, r4, #8
 8021264:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8021268:	9a03      	ldr	r2, [sp, #12]
 802126a:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 802126e:	fb02 5503 	mla	r5, r2, r3, r5
 8021272:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8021276:	9a00      	ldr	r2, [sp, #0]
 8021278:	fb04 540e 	mla	r4, r4, lr, r5
 802127c:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8021280:	1235      	asrs	r5, r6, #8
 8021282:	fb01 4100 	mla	r1, r1, r0, r4
 8021286:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 802128a:	0a09      	lsrs	r1, r1, #8
 802128c:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 8021290:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 8021294:	fb03 7101 	mla	r1, r3, r1, r7
 8021298:	fb0e 1e08 	mla	lr, lr, r8, r1
 802129c:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 80212a0:	fb00 e101 	mla	r1, r0, r1, lr
 80212a4:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 80212a8:	b287      	uxth	r7, r0
 80212aa:	0a09      	lsrs	r1, r1, #8
 80212ac:	437a      	muls	r2, r7
 80212ae:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 80212b2:	1c53      	adds	r3, r2, #1
 80212b4:	4321      	orrs	r1, r4
 80212b6:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80212ba:	0c0a      	lsrs	r2, r1, #16
 80212bc:	f3c1 2407 	ubfx	r4, r1, #8, #8
 80212c0:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 80212c4:	b2c8      	uxtb	r0, r1
 80212c6:	fb12 f207 	smulbb	r2, r2, r7
 80212ca:	fb14 f407 	smulbb	r4, r4, r7
 80212ce:	b2db      	uxtb	r3, r3
 80212d0:	fb10 f007 	smulbb	r0, r0, r7
 80212d4:	fb05 2503 	mla	r5, r5, r3, r2
 80212d8:	10f2      	asrs	r2, r6, #3
 80212da:	00f6      	lsls	r6, r6, #3
 80212dc:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80212e0:	b2ad      	uxth	r5, r5
 80212e2:	b2f6      	uxtb	r6, r6
 80212e4:	fb02 4203 	mla	r2, r2, r3, r4
 80212e8:	fb06 0303 	mla	r3, r6, r3, r0
 80212ec:	b294      	uxth	r4, r2
 80212ee:	b299      	uxth	r1, r3
 80212f0:	1c6b      	adds	r3, r5, #1
 80212f2:	1c62      	adds	r2, r4, #1
 80212f4:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80212f8:	1c4b      	adds	r3, r1, #1
 80212fa:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 80212fe:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8021302:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8021306:	0952      	lsrs	r2, r2, #5
 8021308:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802130c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021310:	432b      	orrs	r3, r5
 8021312:	4313      	orrs	r3, r2
 8021314:	9a02      	ldr	r2, [sp, #8]
 8021316:	8013      	strh	r3, [r2, #0]
 8021318:	b005      	add	sp, #20
 802131a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802131e:	2500      	movs	r5, #0
 8021320:	e6e9      	b.n	80210f6 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x42>
 8021322:	2100      	movs	r1, #0
 8021324:	460d      	mov	r5, r1
 8021326:	e6f3      	b.n	8021110 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 8021328:	2100      	movs	r1, #0
 802132a:	e6f1      	b.n	8021110 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 802132c:	4631      	mov	r1, r6
 802132e:	e6ef      	b.n	8021110 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 8021330:	2400      	movs	r4, #0
 8021332:	e700      	b.n	8021136 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x82>
 8021334:	2200      	movs	r2, #0
 8021336:	4614      	mov	r4, r2
 8021338:	e70b      	b.n	8021152 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 802133a:	4602      	mov	r2, r0
 802133c:	4604      	mov	r4, r0
 802133e:	e708      	b.n	8021152 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 8021340:	2200      	movs	r2, #0
 8021342:	e706      	b.n	8021152 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 8021344:	4632      	mov	r2, r6
 8021346:	e704      	b.n	8021152 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>

08021348 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802134c:	b09f      	sub	sp, #124	; 0x7c
 802134e:	921b      	str	r2, [sp, #108]	; 0x6c
 8021350:	9309      	str	r3, [sp, #36]	; 0x24
 8021352:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8021354:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 8021358:	901d      	str	r0, [sp, #116]	; 0x74
 802135a:	931c      	str	r3, [sp, #112]	; 0x70
 802135c:	6850      	ldr	r0, [r2, #4]
 802135e:	9119      	str	r1, [sp, #100]	; 0x64
 8021360:	6812      	ldr	r2, [r2, #0]
 8021362:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 8021364:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8021368:	fb00 1303 	mla	r3, r0, r3, r1
 802136c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8021370:	930c      	str	r3, [sp, #48]	; 0x30
 8021372:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8021374:	681b      	ldr	r3, [r3, #0]
 8021376:	9312      	str	r3, [sp, #72]	; 0x48
 8021378:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802137a:	685e      	ldr	r6, [r3, #4]
 802137c:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 8021380:	3604      	adds	r6, #4
 8021382:	930d      	str	r3, [sp, #52]	; 0x34
 8021384:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8021386:	2b00      	cmp	r3, #0
 8021388:	dc03      	bgt.n	8021392 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 802138a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 802138c:	2b00      	cmp	r3, #0
 802138e:	f340 8387 	ble.w	8021aa0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
 8021392:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8021394:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8021398:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802139c:	1e48      	subs	r0, r1, #1
 802139e:	1e57      	subs	r7, r2, #1
 80213a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80213a2:	2b00      	cmp	r3, #0
 80213a4:	f340 8194 	ble.w	80216d0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x388>
 80213a8:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80213aa:	142b      	asrs	r3, r5, #16
 80213ac:	ea5f 4c24 	movs.w	ip, r4, asr #16
 80213b0:	d406      	bmi.n	80213c0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80213b2:	4584      	cmp	ip, r0
 80213b4:	da04      	bge.n	80213c0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80213b6:	2b00      	cmp	r3, #0
 80213b8:	db02      	blt.n	80213c0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80213ba:	42bb      	cmp	r3, r7
 80213bc:	f2c0 8189 	blt.w	80216d2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 80213c0:	f11c 0c01 	adds.w	ip, ip, #1
 80213c4:	f100 8177 	bmi.w	80216b6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80213c8:	4561      	cmp	r1, ip
 80213ca:	f2c0 8174 	blt.w	80216b6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80213ce:	3301      	adds	r3, #1
 80213d0:	f100 8171 	bmi.w	80216b6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80213d4:	429a      	cmp	r2, r3
 80213d6:	f2c0 816e 	blt.w	80216b6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80213da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80213dc:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80213de:	931a      	str	r3, [sp, #104]	; 0x68
 80213e0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80213e2:	2b00      	cmp	r3, #0
 80213e4:	f340 8193 	ble.w	802170e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 80213e8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80213ea:	ea4f 4c25 	mov.w	ip, r5, asr #16
 80213ee:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80213f2:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80213f6:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80213f8:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 80213fc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80213fe:	141b      	asrs	r3, r3, #16
 8021400:	f100 81d6 	bmi.w	80217b0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 8021404:	f100 38ff 	add.w	r8, r0, #4294967295
 8021408:	4543      	cmp	r3, r8
 802140a:	f280 81d1 	bge.w	80217b0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 802140e:	f1bc 0f00 	cmp.w	ip, #0
 8021412:	f2c0 81cd 	blt.w	80217b0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 8021416:	f10e 38ff 	add.w	r8, lr, #4294967295
 802141a:	45c4      	cmp	ip, r8
 802141c:	f280 81c8 	bge.w	80217b0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 8021420:	b200      	sxth	r0, r0
 8021422:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8021424:	fb0c 3300 	mla	r3, ip, r0, r3
 8021428:	eb04 0803 	add.w	r8, r4, r3
 802142c:	5ce3      	ldrb	r3, [r4, r3]
 802142e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8021432:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8021436:	2a00      	cmp	r2, #0
 8021438:	f000 81af 	beq.w	802179a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 802143c:	f898 c001 	ldrb.w	ip, [r8, #1]
 8021440:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8021444:	940e      	str	r4, [sp, #56]	; 0x38
 8021446:	0e24      	lsrs	r4, r4, #24
 8021448:	9415      	str	r4, [sp, #84]	; 0x54
 802144a:	b179      	cbz	r1, 802146c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 802144c:	eb08 0c00 	add.w	ip, r8, r0
 8021450:	f818 0000 	ldrb.w	r0, [r8, r0]
 8021454:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8021458:	900a      	str	r0, [sp, #40]	; 0x28
 802145a:	0e00      	lsrs	r0, r0, #24
 802145c:	9013      	str	r0, [sp, #76]	; 0x4c
 802145e:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8021462:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8021466:	900f      	str	r0, [sp, #60]	; 0x3c
 8021468:	0e00      	lsrs	r0, r0, #24
 802146a:	9016      	str	r0, [sp, #88]	; 0x58
 802146c:	b292      	uxth	r2, r2
 802146e:	9815      	ldr	r0, [sp, #84]	; 0x54
 8021470:	b289      	uxth	r1, r1
 8021472:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8021474:	fb02 f901 	mul.w	r9, r2, r1
 8021478:	0112      	lsls	r2, r2, #4
 802147a:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 802147e:	eba2 0809 	sub.w	r8, r2, r9
 8021482:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8021486:	b289      	uxth	r1, r1
 8021488:	fa1f f888 	uxth.w	r8, r8
 802148c:	1a52      	subs	r2, r2, r1
 802148e:	fb08 f000 	mul.w	r0, r8, r0
 8021492:	b292      	uxth	r2, r2
 8021494:	fb02 000e 	mla	r0, r2, lr, r0
 8021498:	fb01 0004 	mla	r0, r1, r4, r0
 802149c:	9c16      	ldr	r4, [sp, #88]	; 0x58
 802149e:	fb09 0004 	mla	r0, r9, r4, r0
 80214a2:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80214a6:	2800      	cmp	r0, #0
 80214a8:	f000 80fa 	beq.w	80216a0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80214ac:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80214b0:	d01b      	beq.n	80214ea <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 80214b2:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80214b6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80214ba:	fb0e fa0a 	mul.w	sl, lr, sl
 80214be:	fb0e fe03 	mul.w	lr, lr, r3
 80214c2:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80214c6:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80214ca:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 80214ce:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80214d2:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80214d6:	4453      	add	r3, sl
 80214d8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80214dc:	0a1b      	lsrs	r3, r3, #8
 80214de:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80214e2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80214e6:	ea43 030c 	orr.w	r3, r3, ip
 80214ea:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80214ec:	2cff      	cmp	r4, #255	; 0xff
 80214ee:	d021      	beq.n	8021534 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 80214f0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80214f2:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80214f6:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80214f8:	fb04 fb0b 	mul.w	fp, r4, fp
 80214fc:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80214fe:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8021502:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8021504:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8021508:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802150c:	fb04 fa0a 	mul.w	sl, r4, sl
 8021510:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021514:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8021518:	44de      	add	lr, fp
 802151a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802151e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021522:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021526:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802152a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802152e:	ea4e 040a 	orr.w	r4, lr, sl
 8021532:	940e      	str	r4, [sp, #56]	; 0x38
 8021534:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8021536:	2cff      	cmp	r4, #255	; 0xff
 8021538:	d021      	beq.n	802157e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 802153a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802153c:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8021540:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8021542:	fb04 fb0b 	mul.w	fp, r4, fp
 8021546:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8021548:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802154c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802154e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8021552:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8021556:	fb04 fa0a 	mul.w	sl, r4, sl
 802155a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802155e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8021562:	44de      	add	lr, fp
 8021564:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8021568:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802156c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021570:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021574:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021578:	ea4e 040a 	orr.w	r4, lr, sl
 802157c:	940a      	str	r4, [sp, #40]	; 0x28
 802157e:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8021580:	2cff      	cmp	r4, #255	; 0xff
 8021582:	d021      	beq.n	80215c8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x280>
 8021584:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8021586:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 802158a:	9c16      	ldr	r4, [sp, #88]	; 0x58
 802158c:	fb04 fb0b 	mul.w	fp, r4, fp
 8021590:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8021592:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8021596:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8021598:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802159c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80215a0:	fb04 fa0a 	mul.w	sl, r4, sl
 80215a4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80215a8:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80215ac:	44de      	add	lr, fp
 80215ae:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80215b2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80215b6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80215ba:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80215be:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80215c2:	ea4e 040a 	orr.w	r4, lr, sl
 80215c6:	940f      	str	r4, [sp, #60]	; 0x3c
 80215c8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80215ca:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 80215ce:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80215d2:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80215d6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80215d8:	fb08 fc0c 	mul.w	ip, r8, ip
 80215dc:	fb02 cc0e 	mla	ip, r2, lr, ip
 80215e0:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80215e4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80215e6:	fb01 cc0e 	mla	ip, r1, lr, ip
 80215ea:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80215ee:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80215f0:	fb09 cc0e 	mla	ip, r9, lr, ip
 80215f4:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 80215f8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80215fa:	fb08 f80e 	mul.w	r8, r8, lr
 80215fe:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021602:	fb02 8303 	mla	r3, r2, r3, r8
 8021606:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021608:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802160c:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8021610:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8021612:	fb01 330a 	mla	r3, r1, sl, r3
 8021616:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 802161a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802161c:	fb09 3901 	mla	r9, r9, r1, r3
 8021620:	883b      	ldrh	r3, [r7, #0]
 8021622:	4342      	muls	r2, r0
 8021624:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8021628:	1c50      	adds	r0, r2, #1
 802162a:	1219      	asrs	r1, r3, #8
 802162c:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8021630:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8021634:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8021638:	ea4c 0c09 	orr.w	ip, ip, r9
 802163c:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8021640:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8021644:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 8021648:	b2c0      	uxtb	r0, r0
 802164a:	fb12 f204 	smulbb	r2, r2, r4
 802164e:	fa5f fc8c 	uxtb.w	ip, ip
 8021652:	fb1e fe04 	smulbb	lr, lr, r4
 8021656:	fb01 2100 	mla	r1, r1, r0, r2
 802165a:	10da      	asrs	r2, r3, #3
 802165c:	fb1c fc04 	smulbb	ip, ip, r4
 8021660:	00db      	lsls	r3, r3, #3
 8021662:	b289      	uxth	r1, r1
 8021664:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8021668:	b2db      	uxtb	r3, r3
 802166a:	fb02 e200 	mla	r2, r2, r0, lr
 802166e:	fb03 c300 	mla	r3, r3, r0, ip
 8021672:	b292      	uxth	r2, r2
 8021674:	fa1f fc83 	uxth.w	ip, r3
 8021678:	1c4b      	adds	r3, r1, #1
 802167a:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 802167e:	f10c 0301 	add.w	r3, ip, #1
 8021682:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 8021686:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 802168a:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802168e:	430b      	orrs	r3, r1
 8021690:	1c51      	adds	r1, r2, #1
 8021692:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8021696:	0952      	lsrs	r2, r2, #5
 8021698:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802169c:	4313      	orrs	r3, r2
 802169e:	803b      	strh	r3, [r7, #0]
 80216a0:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80216a2:	3702      	adds	r7, #2
 80216a4:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80216a6:	441a      	add	r2, r3
 80216a8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80216aa:	441d      	add	r5, r3
 80216ac:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80216ae:	9229      	str	r2, [sp, #164]	; 0xa4
 80216b0:	3b01      	subs	r3, #1
 80216b2:	931a      	str	r3, [sp, #104]	; 0x68
 80216b4:	e694      	b.n	80213e0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80216b6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80216b8:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80216ba:	441c      	add	r4, r3
 80216bc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80216be:	441d      	add	r5, r3
 80216c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80216c2:	9429      	str	r4, [sp, #164]	; 0xa4
 80216c4:	3b01      	subs	r3, #1
 80216c6:	9309      	str	r3, [sp, #36]	; 0x24
 80216c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80216ca:	3302      	adds	r3, #2
 80216cc:	930c      	str	r3, [sp, #48]	; 0x30
 80216ce:	e667      	b.n	80213a0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 80216d0:	d024      	beq.n	802171c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d4>
 80216d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80216d4:	982b      	ldr	r0, [sp, #172]	; 0xac
 80216d6:	3b01      	subs	r3, #1
 80216d8:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80216da:	fb00 4003 	mla	r0, r0, r3, r4
 80216de:	1400      	asrs	r0, r0, #16
 80216e0:	f53f ae7b 	bmi.w	80213da <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80216e4:	3901      	subs	r1, #1
 80216e6:	4288      	cmp	r0, r1
 80216e8:	f6bf ae77 	bge.w	80213da <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80216ec:	992c      	ldr	r1, [sp, #176]	; 0xb0
 80216ee:	fb01 5303 	mla	r3, r1, r3, r5
 80216f2:	141b      	asrs	r3, r3, #16
 80216f4:	f53f ae71 	bmi.w	80213da <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80216f8:	3a01      	subs	r2, #1
 80216fa:	4293      	cmp	r3, r2
 80216fc:	f6bf ae6d 	bge.w	80213da <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8021700:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8021704:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 8021708:	f1bb 0f00 	cmp.w	fp, #0
 802170c:	dc70      	bgt.n	80217f0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>
 802170e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021710:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8021714:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021716:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 802171a:	930c      	str	r3, [sp, #48]	; 0x30
 802171c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 802171e:	2b00      	cmp	r3, #0
 8021720:	f340 81be 	ble.w	8021aa0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
 8021724:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8021728:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802172a:	ee30 0a04 	vadd.f32	s0, s0, s8
 802172e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021732:	eef0 6a62 	vmov.f32	s13, s5
 8021736:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802173a:	ee31 1a05 	vadd.f32	s2, s2, s10
 802173e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021742:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 8021746:	eef0 6a43 	vmov.f32	s13, s6
 802174a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802174e:	ee16 5a90 	vmov	r5, s13
 8021752:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021756:	ee61 7a27 	vmul.f32	s15, s2, s15
 802175a:	ee77 2a62 	vsub.f32	s5, s14, s5
 802175e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8021762:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8021766:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802176a:	ee12 2a90 	vmov	r2, s5
 802176e:	eef0 2a47 	vmov.f32	s5, s14
 8021772:	fb92 f3f3 	sdiv	r3, r2, r3
 8021776:	ee13 2a10 	vmov	r2, s6
 802177a:	932b      	str	r3, [sp, #172]	; 0xac
 802177c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802177e:	eeb0 3a67 	vmov.f32	s6, s15
 8021782:	fb92 f3f3 	sdiv	r3, r2, r3
 8021786:	932c      	str	r3, [sp, #176]	; 0xb0
 8021788:	9b19      	ldr	r3, [sp, #100]	; 0x64
 802178a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 802178c:	3b01      	subs	r3, #1
 802178e:	9319      	str	r3, [sp, #100]	; 0x64
 8021790:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021792:	bf08      	it	eq
 8021794:	4613      	moveq	r3, r2
 8021796:	9309      	str	r3, [sp, #36]	; 0x24
 8021798:	e5f4      	b.n	8021384 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 802179a:	2900      	cmp	r1, #0
 802179c:	f43f ae66 	beq.w	802146c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 80217a0:	f818 0000 	ldrb.w	r0, [r8, r0]
 80217a4:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 80217a8:	900a      	str	r0, [sp, #40]	; 0x28
 80217aa:	0e00      	lsrs	r0, r0, #24
 80217ac:	9013      	str	r0, [sp, #76]	; 0x4c
 80217ae:	e65d      	b.n	802146c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 80217b0:	f113 0801 	adds.w	r8, r3, #1
 80217b4:	f53f af74 	bmi.w	80216a0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80217b8:	4540      	cmp	r0, r8
 80217ba:	f6ff af71 	blt.w	80216a0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80217be:	f11c 0801 	adds.w	r8, ip, #1
 80217c2:	f53f af6d 	bmi.w	80216a0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80217c6:	45c6      	cmp	lr, r8
 80217c8:	f6ff af6a 	blt.w	80216a0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80217cc:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80217ce:	b200      	sxth	r0, r0
 80217d0:	9302      	str	r3, [sp, #8]
 80217d2:	fa0f f38e 	sxth.w	r3, lr
 80217d6:	9000      	str	r0, [sp, #0]
 80217d8:	9301      	str	r3, [sp, #4]
 80217da:	4633      	mov	r3, r6
 80217dc:	981d      	ldr	r0, [sp, #116]	; 0x74
 80217de:	e9cd 1405 	strd	r1, r4, [sp, #20]
 80217e2:	e9cd c203 	strd	ip, r2, [sp, #12]
 80217e6:	4639      	mov	r1, r7
 80217e8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80217ea:	f7ff fc63 	bl	80210b4 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
 80217ee:	e757      	b.n	80216a0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80217f0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80217f2:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80217f6:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80217f8:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80217fc:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80217fe:	1427      	asrs	r7, r4, #16
 8021800:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8021802:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8021806:	142b      	asrs	r3, r5, #16
 8021808:	fb01 7303 	mla	r3, r1, r3, r7
 802180c:	18e7      	adds	r7, r4, r3
 802180e:	5ce3      	ldrb	r3, [r4, r3]
 8021810:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8021814:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8021818:	2a00      	cmp	r2, #0
 802181a:	f000 8137 	beq.w	8021a8c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x744>
 802181e:	f897 e001 	ldrb.w	lr, [r7, #1]
 8021822:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 8021826:	9410      	str	r4, [sp, #64]	; 0x40
 8021828:	0e24      	lsrs	r4, r4, #24
 802182a:	9417      	str	r4, [sp, #92]	; 0x5c
 802182c:	b170      	cbz	r0, 802184c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 802182e:	eb07 0e01 	add.w	lr, r7, r1
 8021832:	5c79      	ldrb	r1, [r7, r1]
 8021834:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8021838:	910b      	str	r1, [sp, #44]	; 0x2c
 802183a:	0e09      	lsrs	r1, r1, #24
 802183c:	9114      	str	r1, [sp, #80]	; 0x50
 802183e:	f89e 1001 	ldrb.w	r1, [lr, #1]
 8021842:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8021846:	9111      	str	r1, [sp, #68]	; 0x44
 8021848:	0e09      	lsrs	r1, r1, #24
 802184a:	9118      	str	r1, [sp, #96]	; 0x60
 802184c:	b292      	uxth	r2, r2
 802184e:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8021850:	b280      	uxth	r0, r0
 8021852:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8021854:	fb02 f800 	mul.w	r8, r2, r0
 8021858:	0112      	lsls	r2, r2, #4
 802185a:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 802185e:	eba2 0e08 	sub.w	lr, r2, r8
 8021862:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8021866:	b280      	uxth	r0, r0
 8021868:	fa1f fe8e 	uxth.w	lr, lr
 802186c:	1a12      	subs	r2, r2, r0
 802186e:	fb0e f101 	mul.w	r1, lr, r1
 8021872:	b292      	uxth	r2, r2
 8021874:	fb02 110c 	mla	r1, r2, ip, r1
 8021878:	fb00 1104 	mla	r1, r0, r4, r1
 802187c:	9c18      	ldr	r4, [sp, #96]	; 0x60
 802187e:	fb08 1104 	mla	r1, r8, r4, r1
 8021882:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8021886:	2900      	cmp	r1, #0
 8021888:	f000 80f5 	beq.w	8021a76 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72e>
 802188c:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8021890:	d019      	beq.n	80218c6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57e>
 8021892:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8021896:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802189a:	fb0c fa0a 	mul.w	sl, ip, sl
 802189e:	fb0c fc03 	mul.w	ip, ip, r3
 80218a2:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80218a6:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80218aa:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 80218ae:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80218b2:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80218b6:	4453      	add	r3, sl
 80218b8:	0a3f      	lsrs	r7, r7, #8
 80218ba:	0a1b      	lsrs	r3, r3, #8
 80218bc:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80218c0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80218c4:	433b      	orrs	r3, r7
 80218c6:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80218c8:	2cff      	cmp	r4, #255	; 0xff
 80218ca:	d020      	beq.n	802190e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c6>
 80218cc:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80218ce:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80218d2:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80218d4:	4367      	muls	r7, r4
 80218d6:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80218d8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80218dc:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80218e0:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80218e2:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80218e6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80218ea:	fb04 fa0a 	mul.w	sl, r4, sl
 80218ee:	44bc      	add	ip, r7
 80218f0:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80218f4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80218f8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80218fc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021900:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021904:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021908:	ea4c 040a 	orr.w	r4, ip, sl
 802190c:	9410      	str	r4, [sp, #64]	; 0x40
 802190e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8021910:	2cff      	cmp	r4, #255	; 0xff
 8021912:	d020      	beq.n	8021956 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60e>
 8021914:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021916:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 802191a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802191c:	4367      	muls	r7, r4
 802191e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021920:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8021924:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8021928:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802192a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802192e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021932:	fb04 fa0a 	mul.w	sl, r4, sl
 8021936:	44bc      	add	ip, r7
 8021938:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802193c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021940:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8021944:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021948:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802194c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021950:	ea4c 040a 	orr.w	r4, ip, sl
 8021954:	940b      	str	r4, [sp, #44]	; 0x2c
 8021956:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8021958:	2cff      	cmp	r4, #255	; 0xff
 802195a:	d020      	beq.n	802199e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x656>
 802195c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 802195e:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8021962:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8021964:	4367      	muls	r7, r4
 8021966:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8021968:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802196c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8021970:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8021972:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8021976:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802197a:	fb04 fa0a 	mul.w	sl, r4, sl
 802197e:	44bc      	add	ip, r7
 8021980:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8021984:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021988:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802198c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021990:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021994:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021998:	ea4c 040a 	orr.w	r4, ip, sl
 802199c:	9411      	str	r4, [sp, #68]	; 0x44
 802199e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80219a0:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80219a4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80219a8:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80219ac:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80219ae:	fb0e f707 	mul.w	r7, lr, r7
 80219b2:	fb02 770c 	mla	r7, r2, ip, r7
 80219b6:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80219ba:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80219bc:	fb00 770c 	mla	r7, r0, ip, r7
 80219c0:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80219c4:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80219c6:	fb08 770c 	mla	r7, r8, ip, r7
 80219ca:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 80219ce:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80219d0:	fb0e fe0c 	mul.w	lr, lr, ip
 80219d4:	0a3f      	lsrs	r7, r7, #8
 80219d6:	fb02 e303 	mla	r3, r2, r3, lr
 80219da:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80219dc:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80219e0:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 80219e4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80219e6:	fb00 330a 	mla	r3, r0, sl, r3
 80219ea:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 80219ee:	f8b9 0000 	ldrh.w	r0, [r9]
 80219f2:	fb08 3c0c 	mla	ip, r8, ip, r3
 80219f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80219f8:	1202      	asrs	r2, r0, #8
 80219fa:	434b      	muls	r3, r1
 80219fc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021a00:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8021a04:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8021a08:	1c59      	adds	r1, r3, #1
 8021a0a:	ea47 070c 	orr.w	r7, r7, ip
 8021a0e:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8021a12:	0c3b      	lsrs	r3, r7, #16
 8021a14:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8021a18:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 8021a1c:	b2ff      	uxtb	r7, r7
 8021a1e:	fb13 f304 	smulbb	r3, r3, r4
 8021a22:	b2c9      	uxtb	r1, r1
 8021a24:	fb1c fc04 	smulbb	ip, ip, r4
 8021a28:	fb02 3201 	mla	r2, r2, r1, r3
 8021a2c:	10c3      	asrs	r3, r0, #3
 8021a2e:	fb17 f704 	smulbb	r7, r7, r4
 8021a32:	00c0      	lsls	r0, r0, #3
 8021a34:	b292      	uxth	r2, r2
 8021a36:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8021a3a:	b2c0      	uxtb	r0, r0
 8021a3c:	fb03 c301 	mla	r3, r3, r1, ip
 8021a40:	f102 0c01 	add.w	ip, r2, #1
 8021a44:	fb00 7001 	mla	r0, r0, r1, r7
 8021a48:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8021a4c:	b280      	uxth	r0, r0
 8021a4e:	f402 4c78 	and.w	ip, r2, #63488	; 0xf800
 8021a52:	b29b      	uxth	r3, r3
 8021a54:	1c42      	adds	r2, r0, #1
 8021a56:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8021a5a:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8021a5e:	ea42 020c 	orr.w	r2, r2, ip
 8021a62:	f103 0c01 	add.w	ip, r3, #1
 8021a66:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8021a6a:	095b      	lsrs	r3, r3, #5
 8021a6c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8021a70:	431a      	orrs	r2, r3
 8021a72:	f8a9 2000 	strh.w	r2, [r9]
 8021a76:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8021a78:	f109 0902 	add.w	r9, r9, #2
 8021a7c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8021a7e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8021a82:	441a      	add	r2, r3
 8021a84:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8021a86:	9229      	str	r2, [sp, #164]	; 0xa4
 8021a88:	441d      	add	r5, r3
 8021a8a:	e63d      	b.n	8021708 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8021a8c:	2800      	cmp	r0, #0
 8021a8e:	f43f aedd 	beq.w	802184c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 8021a92:	5c79      	ldrb	r1, [r7, r1]
 8021a94:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8021a98:	910b      	str	r1, [sp, #44]	; 0x2c
 8021a9a:	0e09      	lsrs	r1, r1, #24
 8021a9c:	9114      	str	r1, [sp, #80]	; 0x50
 8021a9e:	e6d5      	b.n	802184c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 8021aa0:	b01f      	add	sp, #124	; 0x7c
 8021aa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021aa6 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
 8021aa6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021aaa:	b089      	sub	sp, #36	; 0x24
 8021aac:	9101      	str	r1, [sp, #4]
 8021aae:	9801      	ldr	r0, [sp, #4]
 8021ab0:	f9bd c048 	ldrsh.w	ip, [sp, #72]	; 0x48
 8021ab4:	8800      	ldrh	r0, [r0, #0]
 8021ab6:	f9bd 804c 	ldrsh.w	r8, [sp, #76]	; 0x4c
 8021aba:	1206      	asrs	r6, r0, #8
 8021abc:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 8021ac0:	f89d 405c 	ldrb.w	r4, [sp, #92]	; 0x5c
 8021ac4:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8021ac8:	9602      	str	r6, [sp, #8]
 8021aca:	10c6      	asrs	r6, r0, #3
 8021acc:	00c0      	lsls	r0, r0, #3
 8021ace:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8021ad2:	b2c0      	uxtb	r0, r0
 8021ad4:	9603      	str	r6, [sp, #12]
 8021ad6:	9004      	str	r0, [sp, #16]
 8021ad8:	e9dd 1714 	ldrd	r1, r7, [sp, #80]	; 0x50
 8021adc:	fb07 100c 	mla	r0, r7, ip, r1
 8021ae0:	2f00      	cmp	r7, #0
 8021ae2:	eb02 0e00 	add.w	lr, r2, r0
 8021ae6:	f2c0 810a 	blt.w	8021cfe <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
 8021aea:	45b8      	cmp	r8, r7
 8021aec:	f340 8107 	ble.w	8021cfe <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
 8021af0:	2900      	cmp	r1, #0
 8021af2:	f2c0 8102 	blt.w	8021cfa <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
 8021af6:	458c      	cmp	ip, r1
 8021af8:	f340 80ff 	ble.w	8021cfa <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
 8021afc:	5c12      	ldrb	r2, [r2, r0]
 8021afe:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8021b02:	1c4a      	adds	r2, r1, #1
 8021b04:	f100 80fe 	bmi.w	8021d04 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
 8021b08:	4594      	cmp	ip, r2
 8021b0a:	f340 80fb 	ble.w	8021d04 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
 8021b0e:	2d00      	cmp	r5, #0
 8021b10:	f000 80fa 	beq.w	8021d08 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x262>
 8021b14:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8021b18:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8021b1c:	3701      	adds	r7, #1
 8021b1e:	f100 80f7 	bmi.w	8021d10 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
 8021b22:	45b8      	cmp	r8, r7
 8021b24:	f340 80f4 	ble.w	8021d10 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
 8021b28:	2c00      	cmp	r4, #0
 8021b2a:	f000 80f4 	beq.w	8021d16 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x270>
 8021b2e:	2900      	cmp	r1, #0
 8021b30:	eb0e 020c 	add.w	r2, lr, ip
 8021b34:	f2c0 80ea 	blt.w	8021d0c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
 8021b38:	458c      	cmp	ip, r1
 8021b3a:	f340 80e7 	ble.w	8021d0c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
 8021b3e:	f81e 700c 	ldrb.w	r7, [lr, ip]
 8021b42:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 8021b46:	3101      	adds	r1, #1
 8021b48:	f100 80e8 	bmi.w	8021d1c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
 8021b4c:	458c      	cmp	ip, r1
 8021b4e:	f340 80e5 	ble.w	8021d1c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
 8021b52:	2d00      	cmp	r5, #0
 8021b54:	f000 80e4 	beq.w	8021d20 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x27a>
 8021b58:	7852      	ldrb	r2, [r2, #1]
 8021b5a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8021b5e:	0e0b      	lsrs	r3, r1, #24
 8021b60:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8021b64:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 8021b68:	9300      	str	r3, [sp, #0]
 8021b6a:	b2a4      	uxth	r4, r4
 8021b6c:	b2ab      	uxth	r3, r5
 8021b6e:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 8021b72:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 8021b76:	fb03 f904 	mul.w	r9, r3, r4
 8021b7a:	011b      	lsls	r3, r3, #4
 8021b7c:	fb0a f505 	mul.w	r5, sl, r5
 8021b80:	ea4f 6817 	mov.w	r8, r7, lsr #24
 8021b84:	eba3 0e09 	sub.w	lr, r3, r9
 8021b88:	f5c3 7280 	rsb	r2, r3, #256	; 0x100
 8021b8c:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
 8021b90:	0a28      	lsrs	r0, r5, #8
 8021b92:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 8021b96:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8021b9a:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8021b9e:	fb0a f303 	mul.w	r3, sl, r3
 8021ba2:	fb08 f707 	mul.w	r7, r8, r7
 8021ba6:	ebc9 1404 	rsb	r4, r9, r4, lsl #4
 8021baa:	4405      	add	r5, r0
 8021bac:	fb08 fc0c 	mul.w	ip, r8, ip
 8021bb0:	b2a4      	uxth	r4, r4
 8021bb2:	0a2d      	lsrs	r5, r5, #8
 8021bb4:	fa1f fe8e 	uxth.w	lr, lr
 8021bb8:	1b12      	subs	r2, r2, r4
 8021bba:	f005 10ff 	and.w	r0, r5, #16711935	; 0xff00ff
 8021bbe:	b292      	uxth	r2, r2
 8021bc0:	9005      	str	r0, [sp, #20]
 8021bc2:	f503 7080 	add.w	r0, r3, #256	; 0x100
 8021bc6:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8021bca:	ea4f 201c 	mov.w	r0, ip, lsr #8
 8021bce:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8021bd2:	0a1b      	lsrs	r3, r3, #8
 8021bd4:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8021bd8:	9306      	str	r3, [sp, #24]
 8021bda:	f006 13ff 	and.w	r3, r6, #16711935	; 0xff00ff
 8021bde:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8021be2:	4460      	add	r0, ip
 8021be4:	fb0b f303 	mul.w	r3, fp, r3
 8021be8:	fb0b f606 	mul.w	r6, fp, r6
 8021bec:	0a00      	lsrs	r0, r0, #8
 8021bee:	0a1d      	lsrs	r5, r3, #8
 8021bf0:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 8021bf4:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8021bf8:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8021bfc:	441d      	add	r5, r3
 8021bfe:	f506 7380 	add.w	r3, r6, #256	; 0x100
 8021c02:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8021c06:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8021c0a:	0a2d      	lsrs	r5, r5, #8
 8021c0c:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 8021c10:	f001 17ff 	and.w	r7, r1, #16711935	; 0xff00ff
 8021c14:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8021c18:	0a36      	lsrs	r6, r6, #8
 8021c1a:	0a1b      	lsrs	r3, r3, #8
 8021c1c:	fb05 f50e 	mul.w	r5, r5, lr
 8021c20:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8021c24:	9307      	str	r3, [sp, #28]
 8021c26:	0e0b      	lsrs	r3, r1, #24
 8021c28:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8021c2c:	fb0e f606 	mul.w	r6, lr, r6
 8021c30:	435f      	muls	r7, r3
 8021c32:	4359      	muls	r1, r3
 8021c34:	9b05      	ldr	r3, [sp, #20]
 8021c36:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8021c3a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8021c3e:	fb03 5502 	mla	r5, r3, r2, r5
 8021c42:	9b06      	ldr	r3, [sp, #24]
 8021c44:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021c48:	fb0e fe0b 	mul.w	lr, lr, fp
 8021c4c:	44bc      	add	ip, r7
 8021c4e:	f501 7780 	add.w	r7, r1, #256	; 0x100
 8021c52:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021c56:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8021c5a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021c5e:	0a09      	lsrs	r1, r1, #8
 8021c60:	fb0c 5509 	mla	r5, ip, r9, r5
 8021c64:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8021c68:	fb00 5504 	mla	r5, r0, r4, r5
 8021c6c:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
 8021c70:	9b07      	ldr	r3, [sp, #28]
 8021c72:	fb02 6000 	mla	r0, r2, r0, r6
 8021c76:	0a2d      	lsrs	r5, r5, #8
 8021c78:	fb02 e20a 	mla	r2, r2, sl, lr
 8021c7c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021c80:	fb09 0001 	mla	r0, r9, r1, r0
 8021c84:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8021c88:	fb04 0003 	mla	r0, r4, r3, r0
 8021c8c:	9b00      	ldr	r3, [sp, #0]
 8021c8e:	fb04 2408 	mla	r4, r4, r8, r2
 8021c92:	9a04      	ldr	r2, [sp, #16]
 8021c94:	0a00      	lsrs	r0, r0, #8
 8021c96:	fb09 4903 	mla	r9, r9, r3, r4
 8021c9a:	9b02      	ldr	r3, [sp, #8]
 8021c9c:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8021ca0:	ea6f 2929 	mvn.w	r9, r9, asr #8
 8021ca4:	4305      	orrs	r5, r0
 8021ca6:	fa5f f989 	uxtb.w	r9, r9
 8021caa:	fb03 f109 	mul.w	r1, r3, r9
 8021cae:	9b03      	ldr	r3, [sp, #12]
 8021cb0:	fb03 f309 	mul.w	r3, r3, r9
 8021cb4:	fb02 f909 	mul.w	r9, r2, r9
 8021cb8:	1c4a      	adds	r2, r1, #1
 8021cba:	1c58      	adds	r0, r3, #1
 8021cbc:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8021cc0:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8021cc4:	0c2a      	lsrs	r2, r5, #16
 8021cc6:	0a2b      	lsrs	r3, r5, #8
 8021cc8:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 8021ccc:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8021cd0:	0212      	lsls	r2, r2, #8
 8021cd2:	00db      	lsls	r3, r3, #3
 8021cd4:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 8021cd8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8021cdc:	4313      	orrs	r3, r2
 8021cde:	f109 0201 	add.w	r2, r9, #1
 8021ce2:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 8021ce6:	eb05 2519 	add.w	r5, r5, r9, lsr #8
 8021cea:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8021cee:	431d      	orrs	r5, r3
 8021cf0:	9b01      	ldr	r3, [sp, #4]
 8021cf2:	801d      	strh	r5, [r3, #0]
 8021cf4:	b009      	add	sp, #36	; 0x24
 8021cf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021cfa:	2000      	movs	r0, #0
 8021cfc:	e701      	b.n	8021b02 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x5c>
 8021cfe:	2600      	movs	r6, #0
 8021d00:	4630      	mov	r0, r6
 8021d02:	e70b      	b.n	8021b1c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 8021d04:	2600      	movs	r6, #0
 8021d06:	e709      	b.n	8021b1c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 8021d08:	462e      	mov	r6, r5
 8021d0a:	e707      	b.n	8021b1c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 8021d0c:	2700      	movs	r7, #0
 8021d0e:	e71a      	b.n	8021b46 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xa0>
 8021d10:	2100      	movs	r1, #0
 8021d12:	460f      	mov	r7, r1
 8021d14:	e723      	b.n	8021b5e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 8021d16:	4621      	mov	r1, r4
 8021d18:	4627      	mov	r7, r4
 8021d1a:	e720      	b.n	8021b5e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 8021d1c:	2100      	movs	r1, #0
 8021d1e:	e71e      	b.n	8021b5e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 8021d20:	4629      	mov	r1, r5
 8021d22:	e71c      	b.n	8021b5e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>

08021d24 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021d24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021d28:	b09b      	sub	sp, #108	; 0x6c
 8021d2a:	9218      	str	r2, [sp, #96]	; 0x60
 8021d2c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8021d2e:	9019      	str	r0, [sp, #100]	; 0x64
 8021d30:	9116      	str	r1, [sp, #88]	; 0x58
 8021d32:	6850      	ldr	r0, [r2, #4]
 8021d34:	9307      	str	r3, [sp, #28]
 8021d36:	6812      	ldr	r2, [r2, #0]
 8021d38:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8021d3a:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8021d3e:	fb00 1303 	mla	r3, r0, r3, r1
 8021d42:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8021d46:	930a      	str	r3, [sp, #40]	; 0x28
 8021d48:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8021d4a:	681b      	ldr	r3, [r3, #0]
 8021d4c:	930f      	str	r3, [sp, #60]	; 0x3c
 8021d4e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8021d50:	685e      	ldr	r6, [r3, #4]
 8021d52:	3604      	adds	r6, #4
 8021d54:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8021d56:	2b00      	cmp	r3, #0
 8021d58:	dc03      	bgt.n	8021d62 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8021d5a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8021d5c:	2b00      	cmp	r3, #0
 8021d5e:	f340 8373 	ble.w	8022448 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
 8021d62:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8021d64:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8021d68:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8021d6c:	1e48      	subs	r0, r1, #1
 8021d6e:	1e57      	subs	r7, r2, #1
 8021d70:	9b07      	ldr	r3, [sp, #28]
 8021d72:	2b00      	cmp	r3, #0
 8021d74:	f340 818f 	ble.w	8022096 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
 8021d78:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8021d7a:	142b      	asrs	r3, r5, #16
 8021d7c:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8021d80:	d406      	bmi.n	8021d90 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8021d82:	4584      	cmp	ip, r0
 8021d84:	da04      	bge.n	8021d90 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8021d86:	2b00      	cmp	r3, #0
 8021d88:	db02      	blt.n	8021d90 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8021d8a:	42bb      	cmp	r3, r7
 8021d8c:	f2c0 8184 	blt.w	8022098 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8021d90:	f11c 0c01 	adds.w	ip, ip, #1
 8021d94:	f100 8172 	bmi.w	802207c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8021d98:	4561      	cmp	r1, ip
 8021d9a:	f2c0 816f 	blt.w	802207c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8021d9e:	3301      	adds	r3, #1
 8021da0:	f100 816c 	bmi.w	802207c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8021da4:	429a      	cmp	r2, r3
 8021da6:	f2c0 8169 	blt.w	802207c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8021daa:	9b07      	ldr	r3, [sp, #28]
 8021dac:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8021dae:	9317      	str	r3, [sp, #92]	; 0x5c
 8021db0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8021db2:	2b00      	cmp	r3, #0
 8021db4:	f340 818e 	ble.w	80220d4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b0>
 8021db8:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8021dba:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8021dbe:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8021dc2:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8021dc6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8021dc8:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 8021dcc:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8021dce:	141b      	asrs	r3, r3, #16
 8021dd0:	f100 81d1 	bmi.w	8022176 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8021dd4:	f101 38ff 	add.w	r8, r1, #4294967295
 8021dd8:	4543      	cmp	r3, r8
 8021dda:	f280 81cc 	bge.w	8022176 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8021dde:	f1bc 0f00 	cmp.w	ip, #0
 8021de2:	f2c0 81c8 	blt.w	8022176 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8021de6:	f10e 38ff 	add.w	r8, lr, #4294967295
 8021dea:	45c4      	cmp	ip, r8
 8021dec:	f280 81c3 	bge.w	8022176 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8021df0:	b209      	sxth	r1, r1
 8021df2:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8021df4:	fb0c 3301 	mla	r3, ip, r1, r3
 8021df8:	eb04 0803 	add.w	r8, r4, r3
 8021dfc:	5ce3      	ldrb	r3, [r4, r3]
 8021dfe:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8021e02:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8021e06:	2a00      	cmp	r2, #0
 8021e08:	f000 81aa 	beq.w	8022160 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x43c>
 8021e0c:	f898 c001 	ldrb.w	ip, [r8, #1]
 8021e10:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8021e14:	940b      	str	r4, [sp, #44]	; 0x2c
 8021e16:	0e24      	lsrs	r4, r4, #24
 8021e18:	9412      	str	r4, [sp, #72]	; 0x48
 8021e1a:	b178      	cbz	r0, 8021e3c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 8021e1c:	eb08 0c01 	add.w	ip, r8, r1
 8021e20:	f818 1001 	ldrb.w	r1, [r8, r1]
 8021e24:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8021e28:	9108      	str	r1, [sp, #32]
 8021e2a:	0e09      	lsrs	r1, r1, #24
 8021e2c:	9110      	str	r1, [sp, #64]	; 0x40
 8021e2e:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8021e32:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8021e36:	910c      	str	r1, [sp, #48]	; 0x30
 8021e38:	0e09      	lsrs	r1, r1, #24
 8021e3a:	9113      	str	r1, [sp, #76]	; 0x4c
 8021e3c:	b292      	uxth	r2, r2
 8021e3e:	9912      	ldr	r1, [sp, #72]	; 0x48
 8021e40:	b280      	uxth	r0, r0
 8021e42:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8021e44:	fb02 f900 	mul.w	r9, r2, r0
 8021e48:	0112      	lsls	r2, r2, #4
 8021e4a:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8021e4e:	eba2 0809 	sub.w	r8, r2, r9
 8021e52:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8021e56:	b280      	uxth	r0, r0
 8021e58:	fa1f f888 	uxth.w	r8, r8
 8021e5c:	1a12      	subs	r2, r2, r0
 8021e5e:	fb08 f101 	mul.w	r1, r8, r1
 8021e62:	b292      	uxth	r2, r2
 8021e64:	fb02 110e 	mla	r1, r2, lr, r1
 8021e68:	fb00 1104 	mla	r1, r0, r4, r1
 8021e6c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8021e6e:	fb09 1104 	mla	r1, r9, r4, r1
 8021e72:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8021e76:	2900      	cmp	r1, #0
 8021e78:	f000 80f5 	beq.w	8022066 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8021e7c:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8021e80:	d01b      	beq.n	8021eba <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8021e82:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8021e86:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021e8a:	fb0e fa0a 	mul.w	sl, lr, sl
 8021e8e:	fb0e fe03 	mul.w	lr, lr, r3
 8021e92:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8021e96:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8021e9a:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8021e9e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021ea2:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8021ea6:	4453      	add	r3, sl
 8021ea8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021eac:	0a1b      	lsrs	r3, r3, #8
 8021eae:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8021eb2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021eb6:	ea43 030c 	orr.w	r3, r3, ip
 8021eba:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8021ebc:	2cff      	cmp	r4, #255	; 0xff
 8021ebe:	d021      	beq.n	8021f04 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 8021ec0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021ec2:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8021ec6:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8021ec8:	fb04 fb0b 	mul.w	fp, r4, fp
 8021ecc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021ece:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8021ed2:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8021ed4:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8021ed8:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8021edc:	fb04 fa0a 	mul.w	sl, r4, sl
 8021ee0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021ee4:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8021ee8:	44de      	add	lr, fp
 8021eea:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8021eee:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021ef2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021ef6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021efa:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021efe:	ea4e 040a 	orr.w	r4, lr, sl
 8021f02:	940b      	str	r4, [sp, #44]	; 0x2c
 8021f04:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8021f06:	2cff      	cmp	r4, #255	; 0xff
 8021f08:	d021      	beq.n	8021f4e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8021f0a:	9c08      	ldr	r4, [sp, #32]
 8021f0c:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8021f10:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8021f12:	fb04 fb0b 	mul.w	fp, r4, fp
 8021f16:	9c08      	ldr	r4, [sp, #32]
 8021f18:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8021f1c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8021f1e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8021f22:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8021f26:	fb04 fa0a 	mul.w	sl, r4, sl
 8021f2a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021f2e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8021f32:	44de      	add	lr, fp
 8021f34:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8021f38:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021f3c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021f40:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021f44:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021f48:	ea4e 040a 	orr.w	r4, lr, sl
 8021f4c:	9408      	str	r4, [sp, #32]
 8021f4e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8021f50:	2cff      	cmp	r4, #255	; 0xff
 8021f52:	d021      	beq.n	8021f98 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 8021f54:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8021f56:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8021f5a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8021f5c:	fb04 fb0b 	mul.w	fp, r4, fp
 8021f60:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8021f62:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8021f66:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8021f68:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8021f6c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8021f70:	fb04 fa0a 	mul.w	sl, r4, sl
 8021f74:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021f78:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8021f7c:	44de      	add	lr, fp
 8021f7e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8021f82:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021f86:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021f8a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021f8e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021f92:	ea4e 040a 	orr.w	r4, lr, sl
 8021f96:	940c      	str	r4, [sp, #48]	; 0x30
 8021f98:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021f9a:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8021f9e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021fa2:	43c9      	mvns	r1, r1
 8021fa4:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8021fa8:	9c08      	ldr	r4, [sp, #32]
 8021faa:	fb08 fc0c 	mul.w	ip, r8, ip
 8021fae:	fb02 cc0e 	mla	ip, r2, lr, ip
 8021fb2:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8021fb6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8021fb8:	fb00 cc0e 	mla	ip, r0, lr, ip
 8021fbc:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8021fc0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021fc2:	fb09 cc0e 	mla	ip, r9, lr, ip
 8021fc6:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8021fca:	fb08 f80e 	mul.w	r8, r8, lr
 8021fce:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021fd2:	fa5f fe81 	uxtb.w	lr, r1
 8021fd6:	fb02 8303 	mla	r3, r2, r3, r8
 8021fda:	9a08      	ldr	r2, [sp, #32]
 8021fdc:	f8b7 8000 	ldrh.w	r8, [r7]
 8021fe0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021fe4:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8021fe8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8021fea:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8021fee:	fb00 330a 	mla	r3, r0, sl, r3
 8021ff2:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 8021ff6:	ea4f 2228 	mov.w	r2, r8, asr #8
 8021ffa:	fb09 3900 	mla	r9, r9, r0, r3
 8021ffe:	ea4f 00e8 	mov.w	r0, r8, asr #3
 8022002:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8022006:	b2c9      	uxtb	r1, r1
 8022008:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802200c:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8022010:	fb02 f20e 	mul.w	r2, r2, lr
 8022014:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8022018:	fb00 f00e 	mul.w	r0, r0, lr
 802201c:	1c53      	adds	r3, r2, #1
 802201e:	fb01 f10e 	mul.w	r1, r1, lr
 8022022:	ea4c 0c09 	orr.w	ip, ip, r9
 8022026:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 802202a:	ea4f 431c 	mov.w	r3, ip, lsr #16
 802202e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8022032:	4a60      	ldr	r2, [pc, #384]	; (80221b4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>)
 8022034:	b2db      	uxtb	r3, r3
 8022036:	ea02 2203 	and.w	r2, r2, r3, lsl #8
 802203a:	1c43      	adds	r3, r0, #1
 802203c:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8022040:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8022044:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8022048:	00db      	lsls	r3, r3, #3
 802204a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802204e:	4313      	orrs	r3, r2
 8022050:	1c4a      	adds	r2, r1, #1
 8022052:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8022056:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 802205a:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 802205e:	ea4c 0c03 	orr.w	ip, ip, r3
 8022062:	f8a7 c000 	strh.w	ip, [r7]
 8022066:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8022068:	3702      	adds	r7, #2
 802206a:	9a25      	ldr	r2, [sp, #148]	; 0x94
 802206c:	441a      	add	r2, r3
 802206e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022070:	441d      	add	r5, r3
 8022072:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8022074:	9225      	str	r2, [sp, #148]	; 0x94
 8022076:	3b01      	subs	r3, #1
 8022078:	9317      	str	r3, [sp, #92]	; 0x5c
 802207a:	e699      	b.n	8021db0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 802207c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802207e:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8022080:	441c      	add	r4, r3
 8022082:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022084:	441d      	add	r5, r3
 8022086:	9b07      	ldr	r3, [sp, #28]
 8022088:	9425      	str	r4, [sp, #148]	; 0x94
 802208a:	3b01      	subs	r3, #1
 802208c:	9307      	str	r3, [sp, #28]
 802208e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022090:	3302      	adds	r3, #2
 8022092:	930a      	str	r3, [sp, #40]	; 0x28
 8022094:	e66c      	b.n	8021d70 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8022096:	d024      	beq.n	80220e2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3be>
 8022098:	9b07      	ldr	r3, [sp, #28]
 802209a:	9827      	ldr	r0, [sp, #156]	; 0x9c
 802209c:	3b01      	subs	r3, #1
 802209e:	9c25      	ldr	r4, [sp, #148]	; 0x94
 80220a0:	fb00 4003 	mla	r0, r0, r3, r4
 80220a4:	1400      	asrs	r0, r0, #16
 80220a6:	f53f ae80 	bmi.w	8021daa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 80220aa:	3901      	subs	r1, #1
 80220ac:	4288      	cmp	r0, r1
 80220ae:	f6bf ae7c 	bge.w	8021daa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 80220b2:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80220b4:	fb01 5303 	mla	r3, r1, r3, r5
 80220b8:	141b      	asrs	r3, r3, #16
 80220ba:	f53f ae76 	bmi.w	8021daa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 80220be:	3a01      	subs	r2, #1
 80220c0:	4293      	cmp	r3, r2
 80220c2:	f6bf ae72 	bge.w	8021daa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 80220c6:	f8dd b01c 	ldr.w	fp, [sp, #28]
 80220ca:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 80220ce:	f1bb 0f00 	cmp.w	fp, #0
 80220d2:	dc71      	bgt.n	80221b8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 80220d4:	9b07      	ldr	r3, [sp, #28]
 80220d6:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80220da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80220dc:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 80220e0:	930a      	str	r3, [sp, #40]	; 0x28
 80220e2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80220e4:	2b00      	cmp	r3, #0
 80220e6:	f340 81af 	ble.w	8022448 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
 80220ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80220ee:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80220f0:	ee30 0a04 	vadd.f32	s0, s0, s8
 80220f4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80220f8:	eef0 6a62 	vmov.f32	s13, s5
 80220fc:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8022100:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022104:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022108:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
 802210c:	eef0 6a43 	vmov.f32	s13, s6
 8022110:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022114:	ee16 5a90 	vmov	r5, s13
 8022118:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802211c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8022120:	ee77 2a62 	vsub.f32	s5, s14, s5
 8022124:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022128:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802212c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8022130:	ee12 2a90 	vmov	r2, s5
 8022134:	eef0 2a47 	vmov.f32	s5, s14
 8022138:	fb92 f3f3 	sdiv	r3, r2, r3
 802213c:	ee13 2a10 	vmov	r2, s6
 8022140:	9327      	str	r3, [sp, #156]	; 0x9c
 8022142:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022144:	eeb0 3a67 	vmov.f32	s6, s15
 8022148:	fb92 f3f3 	sdiv	r3, r2, r3
 802214c:	9328      	str	r3, [sp, #160]	; 0xa0
 802214e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8022150:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8022152:	3b01      	subs	r3, #1
 8022154:	9316      	str	r3, [sp, #88]	; 0x58
 8022156:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022158:	bf08      	it	eq
 802215a:	4613      	moveq	r3, r2
 802215c:	9307      	str	r3, [sp, #28]
 802215e:	e5f9      	b.n	8021d54 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 8022160:	2800      	cmp	r0, #0
 8022162:	f43f ae6b 	beq.w	8021e3c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 8022166:	f818 1001 	ldrb.w	r1, [r8, r1]
 802216a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802216e:	9108      	str	r1, [sp, #32]
 8022170:	0e09      	lsrs	r1, r1, #24
 8022172:	9110      	str	r1, [sp, #64]	; 0x40
 8022174:	e662      	b.n	8021e3c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 8022176:	f113 0801 	adds.w	r8, r3, #1
 802217a:	f53f af74 	bmi.w	8022066 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 802217e:	4541      	cmp	r1, r8
 8022180:	f6ff af71 	blt.w	8022066 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8022184:	f11c 0801 	adds.w	r8, ip, #1
 8022188:	f53f af6d 	bmi.w	8022066 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 802218c:	45c6      	cmp	lr, r8
 802218e:	f6ff af6a 	blt.w	8022066 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8022192:	b209      	sxth	r1, r1
 8022194:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8022198:	fa0f f38e 	sxth.w	r3, lr
 802219c:	9100      	str	r1, [sp, #0]
 802219e:	4639      	mov	r1, r7
 80221a0:	9301      	str	r3, [sp, #4]
 80221a2:	4633      	mov	r3, r6
 80221a4:	e9cd 2004 	strd	r2, r0, [sp, #16]
 80221a8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80221aa:	9819      	ldr	r0, [sp, #100]	; 0x64
 80221ac:	f7ff fc7b 	bl	8021aa6 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
 80221b0:	e759      	b.n	8022066 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 80221b2:	bf00      	nop
 80221b4:	fffff800 	.word	0xfffff800
 80221b8:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80221ba:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80221be:	9c25      	ldr	r4, [sp, #148]	; 0x94
 80221c0:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80221c4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80221c6:	1427      	asrs	r7, r4, #16
 80221c8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80221ca:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80221ce:	142b      	asrs	r3, r5, #16
 80221d0:	fb01 7303 	mla	r3, r1, r3, r7
 80221d4:	18e7      	adds	r7, r4, r3
 80221d6:	5ce3      	ldrb	r3, [r4, r3]
 80221d8:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80221dc:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80221e0:	2a00      	cmp	r2, #0
 80221e2:	f000 8127 	beq.w	8022434 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
 80221e6:	f897 e001 	ldrb.w	lr, [r7, #1]
 80221ea:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 80221ee:	940d      	str	r4, [sp, #52]	; 0x34
 80221f0:	0e24      	lsrs	r4, r4, #24
 80221f2:	9414      	str	r4, [sp, #80]	; 0x50
 80221f4:	b170      	cbz	r0, 8022214 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 80221f6:	eb07 0e01 	add.w	lr, r7, r1
 80221fa:	5c79      	ldrb	r1, [r7, r1]
 80221fc:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8022200:	9109      	str	r1, [sp, #36]	; 0x24
 8022202:	0e09      	lsrs	r1, r1, #24
 8022204:	9111      	str	r1, [sp, #68]	; 0x44
 8022206:	f89e 1001 	ldrb.w	r1, [lr, #1]
 802220a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802220e:	910e      	str	r1, [sp, #56]	; 0x38
 8022210:	0e09      	lsrs	r1, r1, #24
 8022212:	9115      	str	r1, [sp, #84]	; 0x54
 8022214:	b292      	uxth	r2, r2
 8022216:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8022218:	b280      	uxth	r0, r0
 802221a:	fb02 f800 	mul.w	r8, r2, r0
 802221e:	0112      	lsls	r2, r2, #4
 8022220:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8022224:	eba2 0e08 	sub.w	lr, r2, r8
 8022228:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 802222c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802222e:	b280      	uxth	r0, r0
 8022230:	fa1f fe8e 	uxth.w	lr, lr
 8022234:	1a09      	subs	r1, r1, r0
 8022236:	fb0e f202 	mul.w	r2, lr, r2
 802223a:	b289      	uxth	r1, r1
 802223c:	fb01 220c 	mla	r2, r1, ip, r2
 8022240:	fb00 2204 	mla	r2, r0, r4, r2
 8022244:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8022246:	fb08 2204 	mla	r2, r8, r4, r2
 802224a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802224e:	2a00      	cmp	r2, #0
 8022250:	f000 80e5 	beq.w	802241e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fa>
 8022254:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8022258:	d019      	beq.n	802228e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56a>
 802225a:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 802225e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022262:	fb0c fa0a 	mul.w	sl, ip, sl
 8022266:	fb0c fc03 	mul.w	ip, ip, r3
 802226a:	ea4f 231a 	mov.w	r3, sl, lsr #8
 802226e:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8022272:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8022276:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802227a:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 802227e:	4453      	add	r3, sl
 8022280:	0a3f      	lsrs	r7, r7, #8
 8022282:	0a1b      	lsrs	r3, r3, #8
 8022284:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8022288:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802228c:	433b      	orrs	r3, r7
 802228e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8022290:	2cff      	cmp	r4, #255	; 0xff
 8022292:	d020      	beq.n	80222d6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5b2>
 8022294:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8022296:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 802229a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802229c:	4367      	muls	r7, r4
 802229e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80222a0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80222a4:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80222a8:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80222aa:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80222ae:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80222b2:	fb04 fa0a 	mul.w	sl, r4, sl
 80222b6:	44bc      	add	ip, r7
 80222b8:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80222bc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80222c0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80222c4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80222c8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80222cc:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80222d0:	ea4c 040a 	orr.w	r4, ip, sl
 80222d4:	940d      	str	r4, [sp, #52]	; 0x34
 80222d6:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80222d8:	2cff      	cmp	r4, #255	; 0xff
 80222da:	d020      	beq.n	802231e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5fa>
 80222dc:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80222de:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80222e2:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80222e4:	4367      	muls	r7, r4
 80222e6:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80222e8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80222ec:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80222f0:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80222f2:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80222f6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80222fa:	fb04 fa0a 	mul.w	sl, r4, sl
 80222fe:	44bc      	add	ip, r7
 8022300:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8022304:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022308:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802230c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022310:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022314:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022318:	ea4c 040a 	orr.w	r4, ip, sl
 802231c:	9409      	str	r4, [sp, #36]	; 0x24
 802231e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8022320:	2cff      	cmp	r4, #255	; 0xff
 8022322:	d020      	beq.n	8022366 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x642>
 8022324:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8022326:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 802232a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 802232c:	4367      	muls	r7, r4
 802232e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8022330:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8022334:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8022338:	9c15      	ldr	r4, [sp, #84]	; 0x54
 802233a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802233e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022342:	fb04 fa0a 	mul.w	sl, r4, sl
 8022346:	44bc      	add	ip, r7
 8022348:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802234c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022350:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8022354:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022358:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802235c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022360:	ea4c 040a 	orr.w	r4, ip, sl
 8022364:	940e      	str	r4, [sp, #56]	; 0x38
 8022366:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8022368:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 802236c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022370:	43d2      	mvns	r2, r2
 8022372:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8022376:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8022378:	b2d2      	uxtb	r2, r2
 802237a:	fb0e f707 	mul.w	r7, lr, r7
 802237e:	fb01 770c 	mla	r7, r1, ip, r7
 8022382:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8022386:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8022388:	fb00 770c 	mla	r7, r0, ip, r7
 802238c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8022390:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8022392:	fb08 770c 	mla	r7, r8, ip, r7
 8022396:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 802239a:	fb0e fe0c 	mul.w	lr, lr, ip
 802239e:	0a3f      	lsrs	r7, r7, #8
 80223a0:	fb01 e303 	mla	r3, r1, r3, lr
 80223a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80223a6:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80223aa:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 80223ae:	990e      	ldr	r1, [sp, #56]	; 0x38
 80223b0:	fb00 330a 	mla	r3, r0, sl, r3
 80223b4:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 80223b8:	fb08 3c0c 	mla	ip, r8, ip, r3
 80223bc:	f8b9 3000 	ldrh.w	r3, [r9]
 80223c0:	1218      	asrs	r0, r3, #8
 80223c2:	10d9      	asrs	r1, r3, #3
 80223c4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80223c8:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80223cc:	00db      	lsls	r3, r3, #3
 80223ce:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80223d2:	4350      	muls	r0, r2
 80223d4:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80223d8:	b2db      	uxtb	r3, r3
 80223da:	4351      	muls	r1, r2
 80223dc:	ea47 070c 	orr.w	r7, r7, ip
 80223e0:	4353      	muls	r3, r2
 80223e2:	1c42      	adds	r2, r0, #1
 80223e4:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80223e8:	0c3a      	lsrs	r2, r7, #16
 80223ea:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80223ee:	4a18      	ldr	r2, [pc, #96]	; (8022450 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72c>)
 80223f0:	b2c0      	uxtb	r0, r0
 80223f2:	ea02 2000 	and.w	r0, r2, r0, lsl #8
 80223f6:	1c4a      	adds	r2, r1, #1
 80223f8:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80223fc:	0a3a      	lsrs	r2, r7, #8
 80223fe:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8022402:	00c9      	lsls	r1, r1, #3
 8022404:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8022408:	4301      	orrs	r1, r0
 802240a:	1c58      	adds	r0, r3, #1
 802240c:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8022410:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 8022414:	f3c7 00c4 	ubfx	r0, r7, #3, #5
 8022418:	4308      	orrs	r0, r1
 802241a:	f8a9 0000 	strh.w	r0, [r9]
 802241e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8022420:	f109 0902 	add.w	r9, r9, #2
 8022424:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8022426:	f10b 3bff 	add.w	fp, fp, #4294967295
 802242a:	441a      	add	r2, r3
 802242c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802242e:	9225      	str	r2, [sp, #148]	; 0x94
 8022430:	441d      	add	r5, r3
 8022432:	e64c      	b.n	80220ce <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 8022434:	2800      	cmp	r0, #0
 8022436:	f43f aeed 	beq.w	8022214 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 802243a:	5c79      	ldrb	r1, [r7, r1]
 802243c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8022440:	9109      	str	r1, [sp, #36]	; 0x24
 8022442:	0e09      	lsrs	r1, r1, #24
 8022444:	9111      	str	r1, [sp, #68]	; 0x44
 8022446:	e6e5      	b.n	8022214 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 8022448:	b01b      	add	sp, #108	; 0x6c
 802244a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802244e:	bf00      	nop
 8022450:	fffff800 	.word	0xfffff800

08022454 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>:
 8022454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022458:	b085      	sub	sp, #20
 802245a:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
 802245e:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 8022462:	2800      	cmp	r0, #0
 8022464:	9103      	str	r1, [sp, #12]
 8022466:	fb00 7406 	mla	r4, r0, r6, r7
 802246a:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	; 0x3c
 802246e:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 8022472:	eb02 0544 	add.w	r5, r2, r4, lsl #1
 8022476:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 802247a:	eb03 0904 	add.w	r9, r3, r4
 802247e:	9501      	str	r5, [sp, #4]
 8022480:	f2c0 8150 	blt.w	8022724 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
 8022484:	4583      	cmp	fp, r0
 8022486:	f340 814d 	ble.w	8022724 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
 802248a:	2f00      	cmp	r7, #0
 802248c:	f2c0 8146 	blt.w	802271c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
 8022490:	42be      	cmp	r6, r7
 8022492:	f340 8143 	ble.w	802271c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
 8022496:	f813 c004 	ldrb.w	ip, [r3, r4]
 802249a:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
 802249e:	f64f 041f 	movw	r4, #63519	; 0xf81f
 80224a2:	ea4f 02ec 	mov.w	r2, ip, asr #3
 80224a6:	f423 65fc 	bic.w	r5, r3, #2016	; 0x7e0
 80224aa:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80224ae:	4355      	muls	r5, r2
 80224b0:	fb0c f203 	mul.w	r2, ip, r3
 80224b4:	ea04 1355 	and.w	r3, r4, r5, lsr #5
 80224b8:	f605 0501 	addw	r5, r5, #2049	; 0x801
 80224bc:	441d      	add	r5, r3
 80224be:	f102 0320 	add.w	r3, r2, #32
 80224c2:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80224c6:	ea04 1455 	and.w	r4, r4, r5, lsr #5
 80224ca:	0a1b      	lsrs	r3, r3, #8
 80224cc:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80224d0:	431c      	orrs	r4, r3
 80224d2:	1c7b      	adds	r3, r7, #1
 80224d4:	f100 812b 	bmi.w	802272e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
 80224d8:	429e      	cmp	r6, r3
 80224da:	f340 8128 	ble.w	802272e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
 80224de:	2900      	cmp	r1, #0
 80224e0:	f000 8128 	beq.w	8022734 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e0>
 80224e4:	9a01      	ldr	r2, [sp, #4]
 80224e6:	f899 3001 	ldrb.w	r3, [r9, #1]
 80224ea:	8855      	ldrh	r5, [r2, #2]
 80224ec:	ea4f 08e3 	mov.w	r8, r3, asr #3
 80224f0:	f425 62fc 	bic.w	r2, r5, #2016	; 0x7e0
 80224f4:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80224f8:	fb08 f802 	mul.w	r8, r8, r2
 80224fc:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8022500:	435d      	muls	r5, r3
 8022502:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
 8022506:	f608 0801 	addw	r8, r8, #2049	; 0x801
 802250a:	44d0      	add	r8, sl
 802250c:	f105 0a20 	add.w	sl, r5, #32
 8022510:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 8022514:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 8022518:	0a2d      	lsrs	r5, r5, #8
 802251a:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 802251e:	432a      	orrs	r2, r5
 8022520:	3001      	adds	r0, #1
 8022522:	f100 810d 	bmi.w	8022740 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
 8022526:	4583      	cmp	fp, r0
 8022528:	f340 810a 	ble.w	8022740 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
 802252c:	f1be 0f00 	cmp.w	lr, #0
 8022530:	f000 810b 	beq.w	802274a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2f6>
 8022534:	2f00      	cmp	r7, #0
 8022536:	f2c0 8100 	blt.w	802273a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
 802253a:	42be      	cmp	r6, r7
 802253c:	f340 80fd 	ble.w	802273a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
 8022540:	9801      	ldr	r0, [sp, #4]
 8022542:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 8022546:	f819 5006 	ldrb.w	r5, [r9, r6]
 802254a:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
 802254e:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8022552:	f428 60fc 	bic.w	r0, r8, #2016	; 0x7e0
 8022556:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 802255a:	fb0a fa00 	mul.w	sl, sl, r0
 802255e:	fb05 f808 	mul.w	r8, r5, r8
 8022562:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
 8022566:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 802256a:	4482      	add	sl, r0
 802256c:	f108 0020 	add.w	r0, r8, #32
 8022570:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8022574:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
 8022578:	0a00      	lsrs	r0, r0, #8
 802257a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802257e:	ea4b 0b00 	orr.w	fp, fp, r0
 8022582:	3701      	adds	r7, #1
 8022584:	f100 80e6 	bmi.w	8022754 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
 8022588:	42be      	cmp	r6, r7
 802258a:	f340 80e3 	ble.w	8022754 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
 802258e:	2900      	cmp	r1, #0
 8022590:	f000 80e3 	beq.w	802275a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x306>
 8022594:	3601      	adds	r6, #1
 8022596:	9801      	ldr	r0, [sp, #4]
 8022598:	f819 7006 	ldrb.w	r7, [r9, r6]
 802259c:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
 80225a0:	ea4f 09e7 	mov.w	r9, r7, asr #3
 80225a4:	f420 66fc 	bic.w	r6, r0, #2016	; 0x7e0
 80225a8:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80225ac:	fb09 f906 	mul.w	r9, r9, r6
 80225b0:	fb07 f800 	mul.w	r8, r7, r0
 80225b4:	f64f 001f 	movw	r0, #63519	; 0xf81f
 80225b8:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
 80225bc:	f609 0901 	addw	r9, r9, #2049	; 0x801
 80225c0:	44d1      	add	r9, sl
 80225c2:	ea00 1659 	and.w	r6, r0, r9, lsr #5
 80225c6:	f108 0020 	add.w	r0, r8, #32
 80225ca:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 80225ce:	0a00      	lsrs	r0, r0, #8
 80225d0:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80225d4:	4330      	orrs	r0, r6
 80225d6:	b28e      	uxth	r6, r1
 80225d8:	fa1f f98e 	uxth.w	r9, lr
 80225dc:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 80225e0:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 80225e4:	fb06 f809 	mul.w	r8, r6, r9
 80225e8:	0136      	lsls	r6, r6, #4
 80225ea:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80225ee:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 80225f2:	9601      	str	r6, [sp, #4]
 80225f4:	ea4a 0404 	orr.w	r4, sl, r4
 80225f8:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 80225fc:	fa1f f689 	uxth.w	r6, r9
 8022600:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8022604:	fb11 f90e 	smulbb	r9, r1, lr
 8022608:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802260c:	9602      	str	r6, [sp, #8]
 802260e:	4626      	mov	r6, r4
 8022610:	f3c9 09c7 	ubfx	r9, r9, #3, #8
 8022614:	f1ce 0410 	rsb	r4, lr, #16
 8022618:	ea4a 0202 	orr.w	r2, sl, r2
 802261c:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8022620:	1a64      	subs	r4, r4, r1
 8022622:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
 8022626:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802262a:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802262e:	434a      	muls	r2, r1
 8022630:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 8022634:	ea4a 0000 	orr.w	r0, sl, r0
 8022638:	9903      	ldr	r1, [sp, #12]
 802263a:	fb04 2406 	mla	r4, r4, r6, r2
 802263e:	9e02      	ldr	r6, [sp, #8]
 8022640:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 8022644:	fb09 4200 	mla	r2, r9, r0, r4
 8022648:	ea4f 440b 	mov.w	r4, fp, lsl #16
 802264c:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 8022650:	8808      	ldrh	r0, [r1, #0]
 8022652:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8022656:	f89d 1050 	ldrb.w	r1, [sp, #80]	; 0x50
 802265a:	ea44 0b0b 	orr.w	fp, r4, fp
 802265e:	9c01      	ldr	r4, [sp, #4]
 8022660:	b289      	uxth	r1, r1
 8022662:	f5c4 7480 	rsb	r4, r4, #256	; 0x100
 8022666:	fb0e 2e0b 	mla	lr, lr, fp, r2
 802266a:	1ba4      	subs	r4, r4, r6
 802266c:	9e01      	ldr	r6, [sp, #4]
 802266e:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8022672:	eba6 0608 	sub.w	r6, r6, r8
 8022676:	b2a4      	uxth	r4, r4
 8022678:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 802267c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8022680:	b2b6      	uxth	r6, r6
 8022682:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8022686:	4373      	muls	r3, r6
 8022688:	ea42 0e0e 	orr.w	lr, r2, lr
 802268c:	fb0c 3304 	mla	r3, ip, r4, r3
 8022690:	9c02      	ldr	r4, [sp, #8]
 8022692:	fa1f f28e 	uxth.w	r2, lr
 8022696:	fb04 3505 	mla	r5, r4, r5, r3
 802269a:	10d4      	asrs	r4, r2, #3
 802269c:	fb08 5707 	mla	r7, r8, r7, r5
 80226a0:	1215      	asrs	r5, r2, #8
 80226a2:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 80226a6:	00d2      	lsls	r2, r2, #3
 80226a8:	f3c7 2707 	ubfx	r7, r7, #8, #8
 80226ac:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 80226b0:	b2d2      	uxtb	r2, r2
 80226b2:	434f      	muls	r7, r1
 80226b4:	1c7b      	adds	r3, r7, #1
 80226b6:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 80226ba:	1203      	asrs	r3, r0, #8
 80226bc:	ea6f 2717 	mvn.w	r7, r7, lsr #8
 80226c0:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80226c4:	b2ff      	uxtb	r7, r7
 80226c6:	fb13 f307 	smulbb	r3, r3, r7
 80226ca:	fb05 3501 	mla	r5, r5, r1, r3
 80226ce:	10c3      	asrs	r3, r0, #3
 80226d0:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 80226d4:	b2ad      	uxth	r5, r5
 80226d6:	fb13 f307 	smulbb	r3, r3, r7
 80226da:	fb04 3401 	mla	r4, r4, r1, r3
 80226de:	00c3      	lsls	r3, r0, #3
 80226e0:	b2db      	uxtb	r3, r3
 80226e2:	b2a4      	uxth	r4, r4
 80226e4:	fb13 f307 	smulbb	r3, r3, r7
 80226e8:	fb02 3101 	mla	r1, r2, r1, r3
 80226ec:	1c6b      	adds	r3, r5, #1
 80226ee:	1c62      	adds	r2, r4, #1
 80226f0:	b289      	uxth	r1, r1
 80226f2:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80226f6:	1c4b      	adds	r3, r1, #1
 80226f8:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 80226fc:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8022700:	9a03      	ldr	r2, [sp, #12]
 8022702:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8022706:	0964      	lsrs	r4, r4, #5
 8022708:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802270c:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 8022710:	432b      	orrs	r3, r5
 8022712:	4323      	orrs	r3, r4
 8022714:	8013      	strh	r3, [r2, #0]
 8022716:	b005      	add	sp, #20
 8022718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802271c:	f04f 0c00 	mov.w	ip, #0
 8022720:	4664      	mov	r4, ip
 8022722:	e6d6      	b.n	80224d2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x7e>
 8022724:	2300      	movs	r3, #0
 8022726:	469c      	mov	ip, r3
 8022728:	461a      	mov	r2, r3
 802272a:	461c      	mov	r4, r3
 802272c:	e6f8      	b.n	8022520 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 802272e:	2300      	movs	r3, #0
 8022730:	461a      	mov	r2, r3
 8022732:	e6f5      	b.n	8022520 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 8022734:	460b      	mov	r3, r1
 8022736:	460a      	mov	r2, r1
 8022738:	e6f2      	b.n	8022520 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 802273a:	2500      	movs	r5, #0
 802273c:	46ab      	mov	fp, r5
 802273e:	e720      	b.n	8022582 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x12e>
 8022740:	2700      	movs	r7, #0
 8022742:	463d      	mov	r5, r7
 8022744:	4638      	mov	r0, r7
 8022746:	46bb      	mov	fp, r7
 8022748:	e745      	b.n	80225d6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 802274a:	4677      	mov	r7, lr
 802274c:	4675      	mov	r5, lr
 802274e:	4670      	mov	r0, lr
 8022750:	46f3      	mov	fp, lr
 8022752:	e740      	b.n	80225d6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 8022754:	2700      	movs	r7, #0
 8022756:	4638      	mov	r0, r7
 8022758:	e73d      	b.n	80225d6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 802275a:	460f      	mov	r7, r1
 802275c:	4608      	mov	r0, r1
 802275e:	e73a      	b.n	80225d6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>

08022760 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022764:	b097      	sub	sp, #92	; 0x5c
 8022766:	9214      	str	r2, [sp, #80]	; 0x50
 8022768:	9308      	str	r3, [sp, #32]
 802276a:	9a25      	ldr	r2, [sp, #148]	; 0x94
 802276c:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 8022770:	9015      	str	r0, [sp, #84]	; 0x54
 8022772:	9312      	str	r3, [sp, #72]	; 0x48
 8022774:	6850      	ldr	r0, [r2, #4]
 8022776:	9111      	str	r1, [sp, #68]	; 0x44
 8022778:	6812      	ldr	r2, [r2, #0]
 802277a:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 802277e:	fb00 1303 	mla	r3, r0, r3, r1
 8022782:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8022786:	9309      	str	r3, [sp, #36]	; 0x24
 8022788:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802278a:	681b      	ldr	r3, [r3, #0]
 802278c:	930b      	str	r3, [sp, #44]	; 0x2c
 802278e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022790:	685b      	ldr	r3, [r3, #4]
 8022792:	930c      	str	r3, [sp, #48]	; 0x30
 8022794:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8022798:	930a      	str	r3, [sp, #40]	; 0x28
 802279a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802279c:	2b00      	cmp	r3, #0
 802279e:	dc03      	bgt.n	80227a8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80227a0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80227a2:	2b00      	cmp	r3, #0
 80227a4:	f340 83cd 	ble.w	8022f42 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e2>
 80227a8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80227aa:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80227ae:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80227b2:	1e48      	subs	r0, r1, #1
 80227b4:	1e55      	subs	r5, r2, #1
 80227b6:	9b08      	ldr	r3, [sp, #32]
 80227b8:	2b00      	cmp	r3, #0
 80227ba:	f340 81a5 	ble.w	8022b08 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 80227be:	9e21      	ldr	r6, [sp, #132]	; 0x84
 80227c0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80227c2:	1436      	asrs	r6, r6, #16
 80227c4:	ea4f 4323 	mov.w	r3, r3, asr #16
 80227c8:	d406      	bmi.n	80227d8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80227ca:	4286      	cmp	r6, r0
 80227cc:	da04      	bge.n	80227d8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80227ce:	2b00      	cmp	r3, #0
 80227d0:	db02      	blt.n	80227d8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80227d2:	42ab      	cmp	r3, r5
 80227d4:	f2c0 8199 	blt.w	8022b0a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 80227d8:	3601      	adds	r6, #1
 80227da:	f100 8186 	bmi.w	8022aea <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 80227de:	42b1      	cmp	r1, r6
 80227e0:	f2c0 8183 	blt.w	8022aea <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 80227e4:	3301      	adds	r3, #1
 80227e6:	f100 8180 	bmi.w	8022aea <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 80227ea:	429a      	cmp	r2, r3
 80227ec:	f2c0 817d 	blt.w	8022aea <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 80227f0:	9b08      	ldr	r3, [sp, #32]
 80227f2:	f64f 061f 	movw	r6, #63519	; 0xf81f
 80227f6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80227f8:	9313      	str	r3, [sp, #76]	; 0x4c
 80227fa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80227fc:	2b00      	cmp	r3, #0
 80227fe:	f340 81a6 	ble.w	8022b4e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8022802:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8022804:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8022806:	1418      	asrs	r0, r3, #16
 8022808:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802280a:	142d      	asrs	r5, r5, #16
 802280c:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8022810:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8022812:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 8022816:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022818:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 802281c:	f100 81fa 	bmi.w	8022c14 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8022820:	f102 3eff 	add.w	lr, r2, #4294967295
 8022824:	4575      	cmp	r5, lr
 8022826:	f280 81f5 	bge.w	8022c14 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 802282a:	2800      	cmp	r0, #0
 802282c:	f2c0 81f2 	blt.w	8022c14 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8022830:	f103 3eff 	add.w	lr, r3, #4294967295
 8022834:	4570      	cmp	r0, lr
 8022836:	f280 81ed 	bge.w	8022c14 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 802283a:	b212      	sxth	r2, r2
 802283c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802283e:	fa1f fe81 	uxth.w	lr, r1
 8022842:	fb00 5002 	mla	r0, r0, r2, r5
 8022846:	ea4f 150e 	mov.w	r5, lr, lsl #4
 802284a:	eb03 0a00 	add.w	sl, r3, r0
 802284e:	f813 9000 	ldrb.w	r9, [r3, r0]
 8022852:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 8022856:	f89a 8001 	ldrb.w	r8, [sl, #1]
 802285a:	b29b      	uxth	r3, r3
 802285c:	f1bc 0f00 	cmp.w	ip, #0
 8022860:	f000 81bb 	beq.w	8022bda <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
 8022864:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8022868:	eb0a 0b02 	add.w	fp, sl, r2
 802286c:	fa1f fa8c 	uxth.w	sl, ip
 8022870:	940d      	str	r4, [sp, #52]	; 0x34
 8022872:	fb0a fe0e 	mul.w	lr, sl, lr
 8022876:	f89b 4001 	ldrb.w	r4, [fp, #1]
 802287a:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 802287e:	eba5 050e 	sub.w	r5, r5, lr
 8022882:	940e      	str	r4, [sp, #56]	; 0x38
 8022884:	fa1f fa8a 	uxth.w	sl, sl
 8022888:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802288a:	b2ad      	uxth	r5, r5
 802288c:	eba3 030a 	sub.w	r3, r3, sl
 8022890:	fb08 f505 	mul.w	r5, r8, r5
 8022894:	b29b      	uxth	r3, r3
 8022896:	fb09 5303 	mla	r3, r9, r3, r5
 802289a:	fb0a 3304 	mla	r3, sl, r4, r3
 802289e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80228a0:	fb0e 3304 	mla	r3, lr, r4, r3
 80228a4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80228a8:	2b00      	cmp	r3, #0
 80228aa:	f000 8111 	beq.w	8022ad0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 80228ae:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80228b0:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80228b4:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 80228b8:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 80228bc:	f000 8192 	beq.w	8022be4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>
 80228c0:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 80228c4:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 80228c8:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80228cc:	fb0a fe0e 	mul.w	lr, sl, lr
 80228d0:	fb09 f000 	mul.w	r0, r9, r0
 80228d4:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 80228d8:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 80228dc:	f100 0b20 	add.w	fp, r0, #32
 80228e0:	44ce      	add	lr, r9
 80228e2:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 80228e6:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 80228ea:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80228ee:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80228f2:	ea4e 0909 	orr.w	r9, lr, r9
 80228f6:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80228fa:	8868      	ldrh	r0, [r5, #2]
 80228fc:	d019      	beq.n	8022932 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 80228fe:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8022902:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8022906:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802290a:	fb0a fe0e 	mul.w	lr, sl, lr
 802290e:	fb08 f800 	mul.w	r8, r8, r0
 8022912:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 8022916:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 802291a:	f108 0b20 	add.w	fp, r8, #32
 802291e:	4486      	add	lr, r0
 8022920:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 8022924:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8022928:	0a00      	lsrs	r0, r0, #8
 802292a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802292e:	ea4e 0000 	orr.w	r0, lr, r0
 8022932:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8022936:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 802293a:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 802293e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8022942:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8022946:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802294a:	ea4e 0909 	orr.w	r9, lr, r9
 802294e:	ea4a 0000 	orr.w	r0, sl, r0
 8022952:	f1bc 0f00 	cmp.w	ip, #0
 8022956:	f000 8147 	beq.w	8022be8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 802295a:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 802295e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8022960:	3a01      	subs	r2, #1
 8022962:	2cff      	cmp	r4, #255	; 0xff
 8022964:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8022968:	f102 0202 	add.w	r2, r2, #2
 802296c:	eb05 0e02 	add.w	lr, r5, r2
 8022970:	5aaa      	ldrh	r2, [r5, r2]
 8022972:	d018      	beq.n	80229a6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 8022974:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 8022978:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802297c:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8022980:	fb04 fa02 	mul.w	sl, r4, r2
 8022984:	fb08 f805 	mul.w	r8, r8, r5
 8022988:	f10a 0520 	add.w	r5, sl, #32
 802298c:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 8022990:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8022994:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 8022998:	4442      	add	r2, r8
 802299a:	0a2d      	lsrs	r5, r5, #8
 802299c:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 80229a0:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80229a4:	432a      	orrs	r2, r5
 80229a6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80229a8:	f8be 5002 	ldrh.w	r5, [lr, #2]
 80229ac:	2cff      	cmp	r4, #255	; 0xff
 80229ae:	d01a      	beq.n	80229e6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x286>
 80229b0:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 80229b4:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80229b8:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80229bc:	fb04 fa05 	mul.w	sl, r4, r5
 80229c0:	fb08 f80e 	mul.w	r8, r8, lr
 80229c4:	f10a 0e20 	add.w	lr, sl, #32
 80229c8:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 80229cc:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80229d0:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 80229d4:	4445      	add	r5, r8
 80229d6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80229da:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 80229de:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 80229e2:	ea45 050e 	orr.w	r5, r5, lr
 80229e6:	fb1c fe01 	smulbb	lr, ip, r1
 80229ea:	f1cc 0810 	rsb	r8, ip, #16
 80229ee:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 80229f2:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80229f6:	ea4f 0eee 	mov.w	lr, lr, asr #3
 80229fa:	eba8 0801 	sub.w	r8, r8, r1
 80229fe:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 8022a02:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8022a06:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 8022a0a:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8022a0e:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 8022a12:	ea4a 0202 	orr.w	r2, sl, r2
 8022a16:	4341      	muls	r1, r0
 8022a18:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 8022a1c:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8022a20:	fb09 1108 	mla	r1, r9, r8, r1
 8022a24:	ea4b 0505 	orr.w	r5, fp, r5
 8022a28:	fb0c 1102 	mla	r1, ip, r2, r1
 8022a2c:	fb0e 1e05 	mla	lr, lr, r5, r1
 8022a30:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8022a34:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8022a38:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8022a3c:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8022a40:	ea42 0e0e 	orr.w	lr, r2, lr
 8022a44:	fa1f f28e 	uxth.w	r2, lr
 8022a48:	2bff      	cmp	r3, #255	; 0xff
 8022a4a:	d103      	bne.n	8022a54 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8022a4c:	9912      	ldr	r1, [sp, #72]	; 0x48
 8022a4e:	29ff      	cmp	r1, #255	; 0xff
 8022a50:	f000 80de 	beq.w	8022c10 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 8022a54:	990a      	ldr	r1, [sp, #40]	; 0x28
 8022a56:	1215      	asrs	r5, r2, #8
 8022a58:	8838      	ldrh	r0, [r7, #0]
 8022a5a:	434b      	muls	r3, r1
 8022a5c:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8022a60:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8022a62:	f103 0c01 	add.w	ip, r3, #1
 8022a66:	eb0c 2323 	add.w	r3, ip, r3, asr #8
 8022a6a:	ea6f 2323 	mvn.w	r3, r3, asr #8
 8022a6e:	fa5f fc83 	uxtb.w	ip, r3
 8022a72:	1203      	asrs	r3, r0, #8
 8022a74:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8022a78:	fb13 f30c 	smulbb	r3, r3, ip
 8022a7c:	fb05 3501 	mla	r5, r5, r1, r3
 8022a80:	10c3      	asrs	r3, r0, #3
 8022a82:	10d1      	asrs	r1, r2, #3
 8022a84:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8022a88:	00d2      	lsls	r2, r2, #3
 8022a8a:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8022a8e:	b2ad      	uxth	r5, r5
 8022a90:	fb13 f30c 	smulbb	r3, r3, ip
 8022a94:	b2d2      	uxtb	r2, r2
 8022a96:	fb01 3104 	mla	r1, r1, r4, r3
 8022a9a:	00c3      	lsls	r3, r0, #3
 8022a9c:	b2db      	uxtb	r3, r3
 8022a9e:	b289      	uxth	r1, r1
 8022aa0:	fb13 f30c 	smulbb	r3, r3, ip
 8022aa4:	fb02 3304 	mla	r3, r2, r4, r3
 8022aa8:	b29a      	uxth	r2, r3
 8022aaa:	1c6b      	adds	r3, r5, #1
 8022aac:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8022ab0:	1c53      	adds	r3, r2, #1
 8022ab2:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8022ab6:	1c4a      	adds	r2, r1, #1
 8022ab8:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8022abc:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8022ac0:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8022ac4:	0949      	lsrs	r1, r1, #5
 8022ac6:	432b      	orrs	r3, r5
 8022ac8:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8022acc:	430b      	orrs	r3, r1
 8022ace:	803b      	strh	r3, [r7, #0]
 8022ad0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8022ad2:	3702      	adds	r7, #2
 8022ad4:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8022ad6:	4413      	add	r3, r2
 8022ad8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8022ada:	9321      	str	r3, [sp, #132]	; 0x84
 8022adc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022ade:	441a      	add	r2, r3
 8022ae0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8022ae2:	3b01      	subs	r3, #1
 8022ae4:	9222      	str	r2, [sp, #136]	; 0x88
 8022ae6:	9313      	str	r3, [sp, #76]	; 0x4c
 8022ae8:	e687      	b.n	80227fa <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8022aea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8022aec:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 8022aee:	9c22      	ldr	r4, [sp, #136]	; 0x88
 8022af0:	4433      	add	r3, r6
 8022af2:	9321      	str	r3, [sp, #132]	; 0x84
 8022af4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022af6:	441c      	add	r4, r3
 8022af8:	9b08      	ldr	r3, [sp, #32]
 8022afa:	3b01      	subs	r3, #1
 8022afc:	9422      	str	r4, [sp, #136]	; 0x88
 8022afe:	9308      	str	r3, [sp, #32]
 8022b00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022b02:	3302      	adds	r3, #2
 8022b04:	9309      	str	r3, [sp, #36]	; 0x24
 8022b06:	e656      	b.n	80227b6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8022b08:	d028      	beq.n	8022b5c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fc>
 8022b0a:	9b08      	ldr	r3, [sp, #32]
 8022b0c:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8022b0e:	3b01      	subs	r3, #1
 8022b10:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8022b12:	fb00 5003 	mla	r0, r0, r3, r5
 8022b16:	1400      	asrs	r0, r0, #16
 8022b18:	f53f ae6a 	bmi.w	80227f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8022b1c:	3901      	subs	r1, #1
 8022b1e:	4288      	cmp	r0, r1
 8022b20:	f6bf ae66 	bge.w	80227f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8022b24:	9924      	ldr	r1, [sp, #144]	; 0x90
 8022b26:	9822      	ldr	r0, [sp, #136]	; 0x88
 8022b28:	fb01 0303 	mla	r3, r1, r3, r0
 8022b2c:	141b      	asrs	r3, r3, #16
 8022b2e:	f53f ae5f 	bmi.w	80227f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8022b32:	3a01      	subs	r2, #1
 8022b34:	4293      	cmp	r3, r2
 8022b36:	f6bf ae5b 	bge.w	80227f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8022b3a:	9b08      	ldr	r3, [sp, #32]
 8022b3c:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8022b40:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8022b44:	9313      	str	r3, [sp, #76]	; 0x4c
 8022b46:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8022b48:	2b00      	cmp	r3, #0
 8022b4a:	f300 8082 	bgt.w	8022c52 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f2>
 8022b4e:	9b08      	ldr	r3, [sp, #32]
 8022b50:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8022b54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022b56:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8022b5a:	9309      	str	r3, [sp, #36]	; 0x24
 8022b5c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022b5e:	2b00      	cmp	r3, #0
 8022b60:	f340 81ef 	ble.w	8022f42 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e2>
 8022b64:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022b68:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022b6a:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022b6e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022b72:	eef0 6a62 	vmov.f32	s13, s5
 8022b76:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8022b7a:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022b7e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022b82:	edcd 6a21 	vstr	s13, [sp, #132]	; 0x84
 8022b86:	eef0 6a43 	vmov.f32	s13, s6
 8022b8a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022b8e:	edcd 6a22 	vstr	s13, [sp, #136]	; 0x88
 8022b92:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022b96:	ee61 7a27 	vmul.f32	s15, s2, s15
 8022b9a:	ee77 2a62 	vsub.f32	s5, s14, s5
 8022b9e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022ba2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022ba6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8022baa:	ee12 2a90 	vmov	r2, s5
 8022bae:	eef0 2a47 	vmov.f32	s5, s14
 8022bb2:	fb92 f3f3 	sdiv	r3, r2, r3
 8022bb6:	ee13 2a10 	vmov	r2, s6
 8022bba:	9323      	str	r3, [sp, #140]	; 0x8c
 8022bbc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022bbe:	eeb0 3a67 	vmov.f32	s6, s15
 8022bc2:	fb92 f3f3 	sdiv	r3, r2, r3
 8022bc6:	9324      	str	r3, [sp, #144]	; 0x90
 8022bc8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022bca:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8022bcc:	3b01      	subs	r3, #1
 8022bce:	9311      	str	r3, [sp, #68]	; 0x44
 8022bd0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022bd2:	bf08      	it	eq
 8022bd4:	4613      	moveq	r3, r2
 8022bd6:	9308      	str	r3, [sp, #32]
 8022bd8:	e5df      	b.n	802279a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8022bda:	fb08 f505 	mul.w	r5, r8, r5
 8022bde:	fb09 5303 	mla	r3, r9, r3, r5
 8022be2:	e65f      	b.n	80228a4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x144>
 8022be4:	4681      	mov	r9, r0
 8022be6:	e686      	b.n	80228f6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8022be8:	f1c1 0210 	rsb	r2, r1, #16
 8022bec:	4341      	muls	r1, r0
 8022bee:	fb09 1902 	mla	r9, r9, r2, r1
 8022bf2:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8022bf6:	ea4f 5259 	mov.w	r2, r9, lsr #21
 8022bfa:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8022bfe:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8022c02:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8022c06:	ea42 0909 	orr.w	r9, r2, r9
 8022c0a:	fa1f f289 	uxth.w	r2, r9
 8022c0e:	e71b      	b.n	8022a48 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
 8022c10:	803a      	strh	r2, [r7, #0]
 8022c12:	e75d      	b.n	8022ad0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8022c14:	f115 0e01 	adds.w	lr, r5, #1
 8022c18:	f53f af5a 	bmi.w	8022ad0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8022c1c:	4572      	cmp	r2, lr
 8022c1e:	f6ff af57 	blt.w	8022ad0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8022c22:	f110 0e01 	adds.w	lr, r0, #1
 8022c26:	f53f af53 	bmi.w	8022ad0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8022c2a:	4573      	cmp	r3, lr
 8022c2c:	f6ff af50 	blt.w	8022ad0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8022c30:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8022c32:	b21b      	sxth	r3, r3
 8022c34:	b212      	sxth	r2, r2
 8022c36:	9502      	str	r5, [sp, #8]
 8022c38:	9301      	str	r3, [sp, #4]
 8022c3a:	9200      	str	r2, [sp, #0]
 8022c3c:	e9cd 0103 	strd	r0, r1, [sp, #12]
 8022c40:	e9cd c405 	strd	ip, r4, [sp, #20]
 8022c44:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 8022c48:	4639      	mov	r1, r7
 8022c4a:	9815      	ldr	r0, [sp, #84]	; 0x54
 8022c4c:	f7ff fc02 	bl	8022454 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>
 8022c50:	e73e      	b.n	8022ad0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8022c52:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8022c54:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8022c58:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8022c5a:	f3c3 3503 	ubfx	r5, r3, #12, #4
 8022c5e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022c60:	fa1f fc82 	uxth.w	ip, r2
 8022c64:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022c68:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8022c6a:	ea4f 100c 	mov.w	r0, ip, lsl #4
 8022c6e:	141f      	asrs	r7, r3, #16
 8022c70:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8022c72:	141b      	asrs	r3, r3, #16
 8022c74:	fb01 3707 	mla	r7, r1, r7, r3
 8022c78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022c7a:	eb03 0a07 	add.w	sl, r3, r7
 8022c7e:	f813 9007 	ldrb.w	r9, [r3, r7]
 8022c82:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8022c86:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8022c8a:	b29b      	uxth	r3, r3
 8022c8c:	2d00      	cmp	r5, #0
 8022c8e:	f000 813d 	beq.w	8022f0c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ac>
 8022c92:	f81a 4001 	ldrb.w	r4, [sl, r1]
 8022c96:	eb0a 0b01 	add.w	fp, sl, r1
 8022c9a:	fa1f fa85 	uxth.w	sl, r5
 8022c9e:	940f      	str	r4, [sp, #60]	; 0x3c
 8022ca0:	fb0a fc0c 	mul.w	ip, sl, ip
 8022ca4:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8022ca8:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 8022cac:	eba0 000c 	sub.w	r0, r0, ip
 8022cb0:	9410      	str	r4, [sp, #64]	; 0x40
 8022cb2:	fa1f fa8a 	uxth.w	sl, sl
 8022cb6:	b280      	uxth	r0, r0
 8022cb8:	eba3 030a 	sub.w	r3, r3, sl
 8022cbc:	fb08 f000 	mul.w	r0, r8, r0
 8022cc0:	b29b      	uxth	r3, r3
 8022cc2:	fb09 0303 	mla	r3, r9, r3, r0
 8022cc6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8022cc8:	fb0a 3300 	mla	r3, sl, r0, r3
 8022ccc:	fb0c 3304 	mla	r3, ip, r4, r3
 8022cd0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022cd4:	2b00      	cmp	r3, #0
 8022cd6:	f000 810b 	beq.w	8022ef0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x790>
 8022cda:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8022cdc:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8022ce0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8022ce2:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 8022ce6:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 8022cea:	f000 8114 	beq.w	8022f16 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b6>
 8022cee:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8022cf2:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8022cf6:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8022cfa:	fb0a fc0c 	mul.w	ip, sl, ip
 8022cfe:	fb09 f707 	mul.w	r7, r9, r7
 8022d02:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 8022d06:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8022d0a:	f107 0b20 	add.w	fp, r7, #32
 8022d0e:	44cc      	add	ip, r9
 8022d10:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 8022d14:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8022d18:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8022d1c:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8022d20:	ea4c 0909 	orr.w	r9, ip, r9
 8022d24:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8022d28:	8847      	ldrh	r7, [r0, #2]
 8022d2a:	d019      	beq.n	8022d60 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x600>
 8022d2c:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8022d30:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8022d34:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8022d38:	fb0a fc0c 	mul.w	ip, sl, ip
 8022d3c:	fb08 f807 	mul.w	r8, r8, r7
 8022d40:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 8022d44:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8022d48:	f108 0b20 	add.w	fp, r8, #32
 8022d4c:	44bc      	add	ip, r7
 8022d4e:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 8022d52:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8022d56:	0a3f      	lsrs	r7, r7, #8
 8022d58:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8022d5c:	ea4c 0707 	orr.w	r7, ip, r7
 8022d60:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 8022d64:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8022d68:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8022d6c:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8022d70:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8022d74:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8022d78:	ea4c 0909 	orr.w	r9, ip, r9
 8022d7c:	ea4a 0707 	orr.w	r7, sl, r7
 8022d80:	2d00      	cmp	r5, #0
 8022d82:	f000 80ca 	beq.w	8022f1a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ba>
 8022d86:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8022d8a:	3901      	subs	r1, #1
 8022d8c:	0049      	lsls	r1, r1, #1
 8022d8e:	3102      	adds	r1, #2
 8022d90:	eb00 0c01 	add.w	ip, r0, r1
 8022d94:	5a41      	ldrh	r1, [r0, r1]
 8022d96:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8022d98:	28ff      	cmp	r0, #255	; 0xff
 8022d9a:	d019      	beq.n	8022dd0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x670>
 8022d9c:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 8022da0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8022da2:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8022da6:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8022daa:	fb04 fa01 	mul.w	sl, r4, r1
 8022dae:	fb08 f800 	mul.w	r8, r8, r0
 8022db2:	f10a 0020 	add.w	r0, sl, #32
 8022db6:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 8022dba:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8022dbe:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8022dc2:	4441      	add	r1, r8
 8022dc4:	0a00      	lsrs	r0, r0, #8
 8022dc6:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 8022dca:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8022dce:	4301      	orrs	r1, r0
 8022dd0:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8022dd2:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 8022dd6:	2cff      	cmp	r4, #255	; 0xff
 8022dd8:	d01a      	beq.n	8022e10 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b0>
 8022dda:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 8022dde:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8022de2:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8022de6:	fb04 fa00 	mul.w	sl, r4, r0
 8022dea:	fb08 f80c 	mul.w	r8, r8, ip
 8022dee:	f10a 0c20 	add.w	ip, sl, #32
 8022df2:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 8022df6:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8022dfa:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 8022dfe:	4440      	add	r0, r8
 8022e00:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022e04:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 8022e08:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8022e0c:	ea40 000c 	orr.w	r0, r0, ip
 8022e10:	fb15 fc02 	smulbb	ip, r5, r2
 8022e14:	f1c5 0810 	rsb	r8, r5, #16
 8022e18:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8022e1c:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8022e20:	ea4f 0cec 	mov.w	ip, ip, asr #3
 8022e24:	eba8 0802 	sub.w	r8, r8, r2
 8022e28:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8022e2c:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8022e30:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 8022e34:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8022e38:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 8022e3c:	ea4a 0101 	orr.w	r1, sl, r1
 8022e40:	437a      	muls	r2, r7
 8022e42:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 8022e46:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8022e4a:	fb09 2208 	mla	r2, r9, r8, r2
 8022e4e:	ea4b 0000 	orr.w	r0, fp, r0
 8022e52:	fb05 2201 	mla	r2, r5, r1, r2
 8022e56:	fb0c 2200 	mla	r2, ip, r0, r2
 8022e5a:	0d57      	lsrs	r7, r2, #21
 8022e5c:	0952      	lsrs	r2, r2, #5
 8022e5e:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8022e62:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8022e66:	433a      	orrs	r2, r7
 8022e68:	2bff      	cmp	r3, #255	; 0xff
 8022e6a:	b292      	uxth	r2, r2
 8022e6c:	d102      	bne.n	8022e74 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x714>
 8022e6e:	9912      	ldr	r1, [sp, #72]	; 0x48
 8022e70:	29ff      	cmp	r1, #255	; 0xff
 8022e72:	d063      	beq.n	8022f3c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7dc>
 8022e74:	980a      	ldr	r0, [sp, #40]	; 0x28
 8022e76:	1215      	asrs	r5, r2, #8
 8022e78:	f8be 1000 	ldrh.w	r1, [lr]
 8022e7c:	4343      	muls	r3, r0
 8022e7e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8022e80:	10cf      	asrs	r7, r1, #3
 8022e82:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8022e86:	1c58      	adds	r0, r3, #1
 8022e88:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8022e8c:	eb00 2323 	add.w	r3, r0, r3, asr #8
 8022e90:	1208      	asrs	r0, r1, #8
 8022e92:	ea6f 2323 	mvn.w	r3, r3, asr #8
 8022e96:	00c9      	lsls	r1, r1, #3
 8022e98:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8022e9c:	b2db      	uxtb	r3, r3
 8022e9e:	b2c9      	uxtb	r1, r1
 8022ea0:	fb10 f003 	smulbb	r0, r0, r3
 8022ea4:	fb11 f103 	smulbb	r1, r1, r3
 8022ea8:	fb05 0504 	mla	r5, r5, r4, r0
 8022eac:	10d0      	asrs	r0, r2, #3
 8022eae:	fb17 f703 	smulbb	r7, r7, r3
 8022eb2:	00d2      	lsls	r2, r2, #3
 8022eb4:	b2ad      	uxth	r5, r5
 8022eb6:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8022eba:	b2d2      	uxtb	r2, r2
 8022ebc:	fb00 7004 	mla	r0, r0, r4, r7
 8022ec0:	1c6b      	adds	r3, r5, #1
 8022ec2:	fb02 1204 	mla	r2, r2, r4, r1
 8022ec6:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8022eca:	b292      	uxth	r2, r2
 8022ecc:	b280      	uxth	r0, r0
 8022ece:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8022ed2:	1c57      	adds	r7, r2, #1
 8022ed4:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8022ed8:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8022edc:	433d      	orrs	r5, r7
 8022ede:	1c47      	adds	r7, r0, #1
 8022ee0:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 8022ee4:	097f      	lsrs	r7, r7, #5
 8022ee6:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8022eea:	433d      	orrs	r5, r7
 8022eec:	f8ae 5000 	strh.w	r5, [lr]
 8022ef0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8022ef2:	f10e 0e02 	add.w	lr, lr, #2
 8022ef6:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8022ef8:	4413      	add	r3, r2
 8022efa:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8022efc:	9321      	str	r3, [sp, #132]	; 0x84
 8022efe:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022f00:	441a      	add	r2, r3
 8022f02:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8022f04:	3b01      	subs	r3, #1
 8022f06:	9222      	str	r2, [sp, #136]	; 0x88
 8022f08:	9313      	str	r3, [sp, #76]	; 0x4c
 8022f0a:	e61c      	b.n	8022b46 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 8022f0c:	fb08 f000 	mul.w	r0, r8, r0
 8022f10:	fb09 0303 	mla	r3, r9, r3, r0
 8022f14:	e6dc      	b.n	8022cd0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x570>
 8022f16:	46b9      	mov	r9, r7
 8022f18:	e704      	b.n	8022d24 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c4>
 8022f1a:	f1c2 0110 	rsb	r1, r2, #16
 8022f1e:	437a      	muls	r2, r7
 8022f20:	fb09 2901 	mla	r9, r9, r1, r2
 8022f24:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8022f28:	ea4f 5059 	mov.w	r0, r9, lsr #21
 8022f2c:	ea4f 1259 	mov.w	r2, r9, lsr #5
 8022f30:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8022f34:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8022f38:	4302      	orrs	r2, r0
 8022f3a:	e795      	b.n	8022e68 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x708>
 8022f3c:	f8ae 2000 	strh.w	r2, [lr]
 8022f40:	e7d6      	b.n	8022ef0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x790>
 8022f42:	b017      	add	sp, #92	; 0x5c
 8022f44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022f48 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 8022f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022f4c:	b085      	sub	sp, #20
 8022f4e:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
 8022f52:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 8022f56:	2800      	cmp	r0, #0
 8022f58:	9103      	str	r1, [sp, #12]
 8022f5a:	fb00 7406 	mla	r4, r0, r6, r7
 8022f5e:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	; 0x3c
 8022f62:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 8022f66:	eb03 0544 	add.w	r5, r3, r4, lsl #1
 8022f6a:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 8022f6e:	eb02 0904 	add.w	r9, r2, r4
 8022f72:	9501      	str	r5, [sp, #4]
 8022f74:	f2c0 8141 	blt.w	80231fa <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
 8022f78:	4583      	cmp	fp, r0
 8022f7a:	f340 813e 	ble.w	80231fa <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
 8022f7e:	2f00      	cmp	r7, #0
 8022f80:	f2c0 8137 	blt.w	80231f2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
 8022f84:	42be      	cmp	r6, r7
 8022f86:	f340 8134 	ble.w	80231f2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
 8022f8a:	f812 c004 	ldrb.w	ip, [r2, r4]
 8022f8e:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8022f92:	f64f 041f 	movw	r4, #63519	; 0xf81f
 8022f96:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8022f9a:	f423 65fc 	bic.w	r5, r3, #2016	; 0x7e0
 8022f9e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8022fa2:	4355      	muls	r5, r2
 8022fa4:	fb0c f203 	mul.w	r2, ip, r3
 8022fa8:	ea04 1355 	and.w	r3, r4, r5, lsr #5
 8022fac:	f605 0501 	addw	r5, r5, #2049	; 0x801
 8022fb0:	441d      	add	r5, r3
 8022fb2:	f102 0320 	add.w	r3, r2, #32
 8022fb6:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8022fba:	ea04 1455 	and.w	r4, r4, r5, lsr #5
 8022fbe:	0a1b      	lsrs	r3, r3, #8
 8022fc0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8022fc4:	431c      	orrs	r4, r3
 8022fc6:	1c7b      	adds	r3, r7, #1
 8022fc8:	f100 811c 	bmi.w	8023204 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
 8022fcc:	429e      	cmp	r6, r3
 8022fce:	f340 8119 	ble.w	8023204 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
 8022fd2:	2900      	cmp	r1, #0
 8022fd4:	f000 8119 	beq.w	802320a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c2>
 8022fd8:	9a01      	ldr	r2, [sp, #4]
 8022fda:	f899 3001 	ldrb.w	r3, [r9, #1]
 8022fde:	8855      	ldrh	r5, [r2, #2]
 8022fe0:	ea4f 08e3 	mov.w	r8, r3, asr #3
 8022fe4:	f425 62fc 	bic.w	r2, r5, #2016	; 0x7e0
 8022fe8:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8022fec:	fb08 f802 	mul.w	r8, r8, r2
 8022ff0:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8022ff4:	435d      	muls	r5, r3
 8022ff6:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
 8022ffa:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8022ffe:	44d0      	add	r8, sl
 8023000:	f105 0a20 	add.w	sl, r5, #32
 8023004:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 8023008:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 802300c:	0a2d      	lsrs	r5, r5, #8
 802300e:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8023012:	432a      	orrs	r2, r5
 8023014:	3001      	adds	r0, #1
 8023016:	f100 80fe 	bmi.w	8023216 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
 802301a:	4583      	cmp	fp, r0
 802301c:	f340 80fb 	ble.w	8023216 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
 8023020:	f1be 0f00 	cmp.w	lr, #0
 8023024:	f000 80fc 	beq.w	8023220 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2d8>
 8023028:	2f00      	cmp	r7, #0
 802302a:	f2c0 80f1 	blt.w	8023210 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
 802302e:	42be      	cmp	r6, r7
 8023030:	f340 80ee 	ble.w	8023210 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
 8023034:	9801      	ldr	r0, [sp, #4]
 8023036:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 802303a:	f819 5006 	ldrb.w	r5, [r9, r6]
 802303e:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
 8023042:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8023046:	f428 60fc 	bic.w	r0, r8, #2016	; 0x7e0
 802304a:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 802304e:	fb0a fa00 	mul.w	sl, sl, r0
 8023052:	fb05 f808 	mul.w	r8, r5, r8
 8023056:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
 802305a:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 802305e:	4482      	add	sl, r0
 8023060:	f108 0020 	add.w	r0, r8, #32
 8023064:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8023068:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
 802306c:	0a00      	lsrs	r0, r0, #8
 802306e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8023072:	ea4b 0b00 	orr.w	fp, fp, r0
 8023076:	3701      	adds	r7, #1
 8023078:	f100 80d7 	bmi.w	802322a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
 802307c:	42be      	cmp	r6, r7
 802307e:	f340 80d4 	ble.w	802322a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
 8023082:	2900      	cmp	r1, #0
 8023084:	f000 80d4 	beq.w	8023230 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e8>
 8023088:	3601      	adds	r6, #1
 802308a:	9801      	ldr	r0, [sp, #4]
 802308c:	f819 7006 	ldrb.w	r7, [r9, r6]
 8023090:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
 8023094:	ea4f 09e7 	mov.w	r9, r7, asr #3
 8023098:	f420 66fc 	bic.w	r6, r0, #2016	; 0x7e0
 802309c:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80230a0:	fb09 f906 	mul.w	r9, r9, r6
 80230a4:	fb07 f800 	mul.w	r8, r7, r0
 80230a8:	f64f 001f 	movw	r0, #63519	; 0xf81f
 80230ac:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
 80230b0:	f609 0901 	addw	r9, r9, #2049	; 0x801
 80230b4:	44d1      	add	r9, sl
 80230b6:	ea00 1659 	and.w	r6, r0, r9, lsr #5
 80230ba:	f108 0020 	add.w	r0, r8, #32
 80230be:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 80230c2:	0a00      	lsrs	r0, r0, #8
 80230c4:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80230c8:	4330      	orrs	r0, r6
 80230ca:	b28e      	uxth	r6, r1
 80230cc:	fa1f f98e 	uxth.w	r9, lr
 80230d0:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 80230d4:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 80230d8:	fb06 f809 	mul.w	r8, r6, r9
 80230dc:	0136      	lsls	r6, r6, #4
 80230de:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80230e2:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 80230e6:	9601      	str	r6, [sp, #4]
 80230e8:	ea4a 0404 	orr.w	r4, sl, r4
 80230ec:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 80230f0:	fa1f f689 	uxth.w	r6, r9
 80230f4:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80230f8:	fb11 f90e 	smulbb	r9, r1, lr
 80230fc:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8023100:	9602      	str	r6, [sp, #8]
 8023102:	4626      	mov	r6, r4
 8023104:	f3c9 09c7 	ubfx	r9, r9, #3, #8
 8023108:	f1ce 0410 	rsb	r4, lr, #16
 802310c:	ea4a 0202 	orr.w	r2, sl, r2
 8023110:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8023114:	1a64      	subs	r4, r4, r1
 8023116:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
 802311a:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802311e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8023122:	434a      	muls	r2, r1
 8023124:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 8023128:	ea4a 0000 	orr.w	r0, sl, r0
 802312c:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 8023130:	fb04 2406 	mla	r4, r4, r6, r2
 8023134:	9903      	ldr	r1, [sp, #12]
 8023136:	fb09 4200 	mla	r2, r9, r0, r4
 802313a:	ea4f 440b 	mov.w	r4, fp, lsl #16
 802313e:	9801      	ldr	r0, [sp, #4]
 8023140:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 8023144:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8023148:	8809      	ldrh	r1, [r1, #0]
 802314a:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 802314e:	ea44 0b0b 	orr.w	fp, r4, fp
 8023152:	9c02      	ldr	r4, [sp, #8]
 8023154:	1b00      	subs	r0, r0, r4
 8023156:	9c01      	ldr	r4, [sp, #4]
 8023158:	fb0e 2e0b 	mla	lr, lr, fp, r2
 802315c:	eba4 0608 	sub.w	r6, r4, r8
 8023160:	b280      	uxth	r0, r0
 8023162:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8023166:	b2b6      	uxth	r6, r6
 8023168:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 802316c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8023170:	4373      	muls	r3, r6
 8023172:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8023176:	fb0c 3300 	mla	r3, ip, r0, r3
 802317a:	9802      	ldr	r0, [sp, #8]
 802317c:	ea42 0e0e 	orr.w	lr, r2, lr
 8023180:	fb00 3505 	mla	r5, r0, r5, r3
 8023184:	120b      	asrs	r3, r1, #8
 8023186:	10c8      	asrs	r0, r1, #3
 8023188:	fb08 5707 	mla	r7, r8, r7, r5
 802318c:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8023190:	00c9      	lsls	r1, r1, #3
 8023192:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8023196:	ea6f 2727 	mvn.w	r7, r7, asr #8
 802319a:	fa1f f28e 	uxth.w	r2, lr
 802319e:	b2c9      	uxtb	r1, r1
 80231a0:	b2ff      	uxtb	r7, r7
 80231a2:	437b      	muls	r3, r7
 80231a4:	4378      	muls	r0, r7
 80231a6:	434f      	muls	r7, r1
 80231a8:	1c59      	adds	r1, r3, #1
 80231aa:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80231ae:	1213      	asrs	r3, r2, #8
 80231b0:	f023 0307 	bic.w	r3, r3, #7
 80231b4:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 80231b8:	1c41      	adds	r1, r0, #1
 80231ba:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 80231be:	10d1      	asrs	r1, r2, #3
 80231c0:	021b      	lsls	r3, r3, #8
 80231c2:	f021 0103 	bic.w	r1, r1, #3
 80231c6:	00d2      	lsls	r2, r2, #3
 80231c8:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 80231cc:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 80231d0:	00c9      	lsls	r1, r1, #3
 80231d2:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80231d6:	430b      	orrs	r3, r1
 80231d8:	1c79      	adds	r1, r7, #1
 80231da:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 80231de:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 80231e2:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80231e6:	431a      	orrs	r2, r3
 80231e8:	9b03      	ldr	r3, [sp, #12]
 80231ea:	801a      	strh	r2, [r3, #0]
 80231ec:	b005      	add	sp, #20
 80231ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80231f2:	f04f 0c00 	mov.w	ip, #0
 80231f6:	4664      	mov	r4, ip
 80231f8:	e6e5      	b.n	8022fc6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7e>
 80231fa:	2300      	movs	r3, #0
 80231fc:	469c      	mov	ip, r3
 80231fe:	461a      	mov	r2, r3
 8023200:	461c      	mov	r4, r3
 8023202:	e707      	b.n	8023014 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 8023204:	2300      	movs	r3, #0
 8023206:	461a      	mov	r2, r3
 8023208:	e704      	b.n	8023014 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 802320a:	460b      	mov	r3, r1
 802320c:	460a      	mov	r2, r1
 802320e:	e701      	b.n	8023014 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 8023210:	2500      	movs	r5, #0
 8023212:	46ab      	mov	fp, r5
 8023214:	e72f      	b.n	8023076 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x12e>
 8023216:	2700      	movs	r7, #0
 8023218:	463d      	mov	r5, r7
 802321a:	4638      	mov	r0, r7
 802321c:	46bb      	mov	fp, r7
 802321e:	e754      	b.n	80230ca <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 8023220:	4677      	mov	r7, lr
 8023222:	4675      	mov	r5, lr
 8023224:	4670      	mov	r0, lr
 8023226:	46f3      	mov	fp, lr
 8023228:	e74f      	b.n	80230ca <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 802322a:	2700      	movs	r7, #0
 802322c:	4638      	mov	r0, r7
 802322e:	e74c      	b.n	80230ca <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 8023230:	460f      	mov	r7, r1
 8023232:	4608      	mov	r0, r1
 8023234:	e749      	b.n	80230ca <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
	...

08023238 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802323c:	b093      	sub	sp, #76	; 0x4c
 802323e:	9210      	str	r2, [sp, #64]	; 0x40
 8023240:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8023242:	9011      	str	r0, [sp, #68]	; 0x44
 8023244:	910e      	str	r1, [sp, #56]	; 0x38
 8023246:	6850      	ldr	r0, [r2, #4]
 8023248:	9306      	str	r3, [sp, #24]
 802324a:	6812      	ldr	r2, [r2, #0]
 802324c:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 8023250:	fb00 1303 	mla	r3, r0, r3, r1
 8023254:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8023258:	9307      	str	r3, [sp, #28]
 802325a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802325c:	681b      	ldr	r3, [r3, #0]
 802325e:	9308      	str	r3, [sp, #32]
 8023260:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8023262:	685b      	ldr	r3, [r3, #4]
 8023264:	9309      	str	r3, [sp, #36]	; 0x24
 8023266:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023268:	2b00      	cmp	r3, #0
 802326a:	dc03      	bgt.n	8023274 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 802326c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802326e:	2b00      	cmp	r3, #0
 8023270:	f340 83b6 	ble.w	80239e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
 8023274:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8023276:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802327a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802327e:	1e48      	subs	r0, r1, #1
 8023280:	1e55      	subs	r5, r2, #1
 8023282:	9b06      	ldr	r3, [sp, #24]
 8023284:	2b00      	cmp	r3, #0
 8023286:	f340 8165 	ble.w	8023554 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 802328a:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 802328c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 802328e:	1436      	asrs	r6, r6, #16
 8023290:	ea4f 4323 	mov.w	r3, r3, asr #16
 8023294:	d406      	bmi.n	80232a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8023296:	4286      	cmp	r6, r0
 8023298:	da04      	bge.n	80232a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 802329a:	2b00      	cmp	r3, #0
 802329c:	db02      	blt.n	80232a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 802329e:	42ab      	cmp	r3, r5
 80232a0:	f2c0 8159 	blt.w	8023556 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 80232a4:	3601      	adds	r6, #1
 80232a6:	f100 8146 	bmi.w	8023536 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 80232aa:	42b1      	cmp	r1, r6
 80232ac:	f2c0 8143 	blt.w	8023536 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 80232b0:	3301      	adds	r3, #1
 80232b2:	f100 8140 	bmi.w	8023536 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 80232b6:	429a      	cmp	r2, r3
 80232b8:	f2c0 813d 	blt.w	8023536 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 80232bc:	9b06      	ldr	r3, [sp, #24]
 80232be:	f64f 061f 	movw	r6, #63519	; 0xf81f
 80232c2:	9f07      	ldr	r7, [sp, #28]
 80232c4:	930f      	str	r3, [sp, #60]	; 0x3c
 80232c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80232c8:	2b00      	cmp	r3, #0
 80232ca:	f340 8166 	ble.w	802359a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 80232ce:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80232d0:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 80232d2:	1418      	asrs	r0, r3, #16
 80232d4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80232d6:	142d      	asrs	r5, r5, #16
 80232d8:	f3c3 3103 	ubfx	r1, r3, #12, #4
 80232dc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80232de:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 80232e2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80232e4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80232e8:	f100 81f0 	bmi.w	80236cc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 80232ec:	f102 3eff 	add.w	lr, r2, #4294967295
 80232f0:	4575      	cmp	r5, lr
 80232f2:	f280 81eb 	bge.w	80236cc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 80232f6:	2800      	cmp	r0, #0
 80232f8:	f2c0 81e8 	blt.w	80236cc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 80232fc:	f103 3eff 	add.w	lr, r3, #4294967295
 8023300:	4570      	cmp	r0, lr
 8023302:	f280 81e3 	bge.w	80236cc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 8023306:	b212      	sxth	r2, r2
 8023308:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802330a:	fa1f fe81 	uxth.w	lr, r1
 802330e:	fb00 5002 	mla	r0, r0, r2, r5
 8023312:	ea4f 150e 	mov.w	r5, lr, lsl #4
 8023316:	eb03 0a00 	add.w	sl, r3, r0
 802331a:	f813 9000 	ldrb.w	r9, [r3, r0]
 802331e:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 8023322:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8023326:	b29b      	uxth	r3, r3
 8023328:	f1bc 0f00 	cmp.w	ip, #0
 802332c:	f000 817b 	beq.w	8023626 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8023330:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8023334:	eb0a 0b02 	add.w	fp, sl, r2
 8023338:	fa1f fa8c 	uxth.w	sl, ip
 802333c:	940a      	str	r4, [sp, #40]	; 0x28
 802333e:	fb0a fe0e 	mul.w	lr, sl, lr
 8023342:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8023346:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 802334a:	eba5 050e 	sub.w	r5, r5, lr
 802334e:	940b      	str	r4, [sp, #44]	; 0x2c
 8023350:	fa1f fa8a 	uxth.w	sl, sl
 8023354:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8023356:	b2ad      	uxth	r5, r5
 8023358:	eba3 030a 	sub.w	r3, r3, sl
 802335c:	fb08 f505 	mul.w	r5, r8, r5
 8023360:	b29b      	uxth	r3, r3
 8023362:	fb09 5303 	mla	r3, r9, r3, r5
 8023366:	fb0a 3304 	mla	r3, sl, r4, r3
 802336a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802336c:	fb0e 3304 	mla	r3, lr, r4, r3
 8023370:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8023374:	2b00      	cmp	r3, #0
 8023376:	f000 80d1 	beq.w	802351c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 802337a:	9c08      	ldr	r4, [sp, #32]
 802337c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8023380:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 8023384:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 8023388:	f000 8152 	beq.w	8023630 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 802338c:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8023390:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8023394:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8023398:	fb0a fe0e 	mul.w	lr, sl, lr
 802339c:	fb09 f000 	mul.w	r0, r9, r0
 80233a0:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 80233a4:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 80233a8:	f100 0b20 	add.w	fp, r0, #32
 80233ac:	44ce      	add	lr, r9
 80233ae:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 80233b2:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 80233b6:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80233ba:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80233be:	ea4e 0909 	orr.w	r9, lr, r9
 80233c2:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80233c6:	8868      	ldrh	r0, [r5, #2]
 80233c8:	d019      	beq.n	80233fe <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 80233ca:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 80233ce:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 80233d2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80233d6:	fb0a fe0e 	mul.w	lr, sl, lr
 80233da:	fb08 f800 	mul.w	r8, r8, r0
 80233de:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 80233e2:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 80233e6:	f108 0b20 	add.w	fp, r8, #32
 80233ea:	4486      	add	lr, r0
 80233ec:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 80233f0:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 80233f4:	0a00      	lsrs	r0, r0, #8
 80233f6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80233fa:	ea4e 0000 	orr.w	r0, lr, r0
 80233fe:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8023402:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8023406:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 802340a:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802340e:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8023412:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8023416:	ea4e 0909 	orr.w	r9, lr, r9
 802341a:	ea4a 0000 	orr.w	r0, sl, r0
 802341e:	f1bc 0f00 	cmp.w	ip, #0
 8023422:	f000 8107 	beq.w	8023634 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fc>
 8023426:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 802342a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802342c:	3a01      	subs	r2, #1
 802342e:	2cff      	cmp	r4, #255	; 0xff
 8023430:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8023434:	f102 0202 	add.w	r2, r2, #2
 8023438:	eb05 0e02 	add.w	lr, r5, r2
 802343c:	5aaa      	ldrh	r2, [r5, r2]
 802343e:	d018      	beq.n	8023472 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8023440:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 8023444:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8023448:	ea4f 08e4 	mov.w	r8, r4, asr #3
 802344c:	fb04 fa02 	mul.w	sl, r4, r2
 8023450:	fb08 f805 	mul.w	r8, r8, r5
 8023454:	f10a 0520 	add.w	r5, sl, #32
 8023458:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 802345c:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8023460:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 8023464:	4442      	add	r2, r8
 8023466:	0a2d      	lsrs	r5, r5, #8
 8023468:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 802346c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8023470:	432a      	orrs	r2, r5
 8023472:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8023474:	f8be 5002 	ldrh.w	r5, [lr, #2]
 8023478:	2cff      	cmp	r4, #255	; 0xff
 802347a:	d01a      	beq.n	80234b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 802347c:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 8023480:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8023484:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8023488:	fb04 fa05 	mul.w	sl, r4, r5
 802348c:	fb08 f80e 	mul.w	r8, r8, lr
 8023490:	f10a 0e20 	add.w	lr, sl, #32
 8023494:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 8023498:	f608 0801 	addw	r8, r8, #2049	; 0x801
 802349c:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 80234a0:	4445      	add	r5, r8
 80234a2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80234a6:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 80234aa:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 80234ae:	ea45 050e 	orr.w	r5, r5, lr
 80234b2:	fb1c fe01 	smulbb	lr, ip, r1
 80234b6:	f1cc 0810 	rsb	r8, ip, #16
 80234ba:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 80234be:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80234c2:	ea4f 0eee 	mov.w	lr, lr, asr #3
 80234c6:	eba8 0801 	sub.w	r8, r8, r1
 80234ca:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 80234ce:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80234d2:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 80234d6:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 80234da:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 80234de:	ea4a 0202 	orr.w	r2, sl, r2
 80234e2:	4341      	muls	r1, r0
 80234e4:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 80234e8:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80234ec:	fb09 1108 	mla	r1, r9, r8, r1
 80234f0:	ea4b 0505 	orr.w	r5, fp, r5
 80234f4:	fb0c 1102 	mla	r1, ip, r2, r1
 80234f8:	fb0e 1e05 	mla	lr, lr, r5, r1
 80234fc:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8023500:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8023504:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8023508:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 802350c:	ea42 0e0e 	orr.w	lr, r2, lr
 8023510:	fa1f f28e 	uxth.w	r2, lr
 8023514:	2bff      	cmp	r3, #255	; 0xff
 8023516:	f040 80a1 	bne.w	802365c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 802351a:	803a      	strh	r2, [r7, #0]
 802351c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802351e:	3702      	adds	r7, #2
 8023520:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8023522:	4413      	add	r3, r2
 8023524:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8023526:	931d      	str	r3, [sp, #116]	; 0x74
 8023528:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802352a:	441a      	add	r2, r3
 802352c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802352e:	3b01      	subs	r3, #1
 8023530:	921e      	str	r2, [sp, #120]	; 0x78
 8023532:	930f      	str	r3, [sp, #60]	; 0x3c
 8023534:	e6c7      	b.n	80232c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8023536:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8023538:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 802353a:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 802353c:	4433      	add	r3, r6
 802353e:	931d      	str	r3, [sp, #116]	; 0x74
 8023540:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8023542:	441c      	add	r4, r3
 8023544:	9b06      	ldr	r3, [sp, #24]
 8023546:	3b01      	subs	r3, #1
 8023548:	941e      	str	r4, [sp, #120]	; 0x78
 802354a:	9306      	str	r3, [sp, #24]
 802354c:	9b07      	ldr	r3, [sp, #28]
 802354e:	3302      	adds	r3, #2
 8023550:	9307      	str	r3, [sp, #28]
 8023552:	e696      	b.n	8023282 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8023554:	d028      	beq.n	80235a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8023556:	9b06      	ldr	r3, [sp, #24]
 8023558:	981f      	ldr	r0, [sp, #124]	; 0x7c
 802355a:	3b01      	subs	r3, #1
 802355c:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 802355e:	fb00 5003 	mla	r0, r0, r3, r5
 8023562:	1400      	asrs	r0, r0, #16
 8023564:	f53f aeaa 	bmi.w	80232bc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8023568:	3901      	subs	r1, #1
 802356a:	4288      	cmp	r0, r1
 802356c:	f6bf aea6 	bge.w	80232bc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8023570:	9920      	ldr	r1, [sp, #128]	; 0x80
 8023572:	981e      	ldr	r0, [sp, #120]	; 0x78
 8023574:	fb01 0303 	mla	r3, r1, r3, r0
 8023578:	141b      	asrs	r3, r3, #16
 802357a:	f53f ae9f 	bmi.w	80232bc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 802357e:	3a01      	subs	r2, #1
 8023580:	4293      	cmp	r3, r2
 8023582:	f6bf ae9b 	bge.w	80232bc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8023586:	9b06      	ldr	r3, [sp, #24]
 8023588:	f64f 061f 	movw	r6, #63519	; 0xf81f
 802358c:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8023590:	930f      	str	r3, [sp, #60]	; 0x3c
 8023592:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8023594:	2b00      	cmp	r3, #0
 8023596:	f300 80b6 	bgt.w	8023706 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ce>
 802359a:	9b06      	ldr	r3, [sp, #24]
 802359c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80235a0:	9b07      	ldr	r3, [sp, #28]
 80235a2:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 80235a6:	9307      	str	r3, [sp, #28]
 80235a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80235aa:	2b00      	cmp	r3, #0
 80235ac:	f340 8218 	ble.w	80239e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
 80235b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80235b4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80235b6:	ee30 0a04 	vadd.f32	s0, s0, s8
 80235ba:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80235be:	eef0 6a62 	vmov.f32	s13, s5
 80235c2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80235c6:	ee31 1a05 	vadd.f32	s2, s2, s10
 80235ca:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80235ce:	edcd 6a1d 	vstr	s13, [sp, #116]	; 0x74
 80235d2:	eef0 6a43 	vmov.f32	s13, s6
 80235d6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80235da:	edcd 6a1e 	vstr	s13, [sp, #120]	; 0x78
 80235de:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80235e2:	ee61 7a27 	vmul.f32	s15, s2, s15
 80235e6:	ee77 2a62 	vsub.f32	s5, s14, s5
 80235ea:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80235ee:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80235f2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80235f6:	ee12 2a90 	vmov	r2, s5
 80235fa:	eef0 2a47 	vmov.f32	s5, s14
 80235fe:	fb92 f3f3 	sdiv	r3, r2, r3
 8023602:	ee13 2a10 	vmov	r2, s6
 8023606:	931f      	str	r3, [sp, #124]	; 0x7c
 8023608:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802360a:	eeb0 3a67 	vmov.f32	s6, s15
 802360e:	fb92 f3f3 	sdiv	r3, r2, r3
 8023612:	9320      	str	r3, [sp, #128]	; 0x80
 8023614:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023616:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8023618:	3b01      	subs	r3, #1
 802361a:	930e      	str	r3, [sp, #56]	; 0x38
 802361c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802361e:	bf08      	it	eq
 8023620:	4613      	moveq	r3, r2
 8023622:	9306      	str	r3, [sp, #24]
 8023624:	e61f      	b.n	8023266 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8023626:	fb08 f505 	mul.w	r5, r8, r5
 802362a:	fb09 5303 	mla	r3, r9, r3, r5
 802362e:	e69f      	b.n	8023370 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8023630:	4681      	mov	r9, r0
 8023632:	e6c6      	b.n	80233c2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8023634:	f1c1 0210 	rsb	r2, r1, #16
 8023638:	4341      	muls	r1, r0
 802363a:	fb09 1902 	mla	r9, r9, r2, r1
 802363e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8023642:	ea4f 5259 	mov.w	r2, r9, lsr #21
 8023646:	ea4f 1959 	mov.w	r9, r9, lsr #5
 802364a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802364e:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8023652:	ea42 0909 	orr.w	r9, r2, r9
 8023656:	fa1f f289 	uxth.w	r2, r9
 802365a:	e75b      	b.n	8023514 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>
 802365c:	f8b7 c000 	ldrh.w	ip, [r7]
 8023660:	43db      	mvns	r3, r3
 8023662:	ea4f 202c 	mov.w	r0, ip, asr #8
 8023666:	fa5f fe83 	uxtb.w	lr, r3
 802366a:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802366e:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8023672:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 8023676:	fb00 f00e 	mul.w	r0, r0, lr
 802367a:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 802367e:	b2db      	uxtb	r3, r3
 8023680:	1c41      	adds	r1, r0, #1
 8023682:	fb05 f50e 	mul.w	r5, r5, lr
 8023686:	fb03 f30e 	mul.w	r3, r3, lr
 802368a:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 802368e:	1211      	asrs	r1, r2, #8
 8023690:	f021 0107 	bic.w	r1, r1, #7
 8023694:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8023698:	48d3      	ldr	r0, [pc, #844]	; (80239e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b0>)
 802369a:	b2c9      	uxtb	r1, r1
 802369c:	ea00 2001 	and.w	r0, r0, r1, lsl #8
 80236a0:	1c69      	adds	r1, r5, #1
 80236a2:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 80236a6:	10d1      	asrs	r1, r2, #3
 80236a8:	00d2      	lsls	r2, r2, #3
 80236aa:	f021 0103 	bic.w	r1, r1, #3
 80236ae:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 80236b2:	00c9      	lsls	r1, r1, #3
 80236b4:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80236b8:	4301      	orrs	r1, r0
 80236ba:	1c58      	adds	r0, r3, #1
 80236bc:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 80236c0:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80236c4:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80236c8:	430a      	orrs	r2, r1
 80236ca:	e726      	b.n	802351a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e2>
 80236cc:	f115 0e01 	adds.w	lr, r5, #1
 80236d0:	f53f af24 	bmi.w	802351c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 80236d4:	4572      	cmp	r2, lr
 80236d6:	f6ff af21 	blt.w	802351c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 80236da:	f110 0e01 	adds.w	lr, r0, #1
 80236de:	f53f af1d 	bmi.w	802351c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 80236e2:	4573      	cmp	r3, lr
 80236e4:	f6ff af1a 	blt.w	802351c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 80236e8:	b21b      	sxth	r3, r3
 80236ea:	b212      	sxth	r2, r2
 80236ec:	9301      	str	r3, [sp, #4]
 80236ee:	9200      	str	r2, [sp, #0]
 80236f0:	e9cd 1c04 	strd	r1, ip, [sp, #16]
 80236f4:	e9cd 5002 	strd	r5, r0, [sp, #8]
 80236f8:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 80236fc:	4639      	mov	r1, r7
 80236fe:	9811      	ldr	r0, [sp, #68]	; 0x44
 8023700:	f7ff fc22 	bl	8022f48 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 8023704:	e70a      	b.n	802351c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 8023706:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8023708:	f3c3 3203 	ubfx	r2, r3, #12, #4
 802370c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 802370e:	f3c3 3503 	ubfx	r5, r3, #12, #4
 8023712:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8023714:	fa1f fc82 	uxth.w	ip, r2
 8023718:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802371c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 802371e:	ea4f 100c 	mov.w	r0, ip, lsl #4
 8023722:	141f      	asrs	r7, r3, #16
 8023724:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8023726:	141b      	asrs	r3, r3, #16
 8023728:	fb01 3707 	mla	r7, r1, r7, r3
 802372c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802372e:	eb03 0a07 	add.w	sl, r3, r7
 8023732:	f813 9007 	ldrb.w	r9, [r3, r7]
 8023736:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 802373a:	f89a 8001 	ldrb.w	r8, [sl, #1]
 802373e:	b29b      	uxth	r3, r3
 8023740:	2d00      	cmp	r5, #0
 8023742:	f000 80fe 	beq.w	8023942 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70a>
 8023746:	f81a 4001 	ldrb.w	r4, [sl, r1]
 802374a:	eb0a 0b01 	add.w	fp, sl, r1
 802374e:	fa1f fa85 	uxth.w	sl, r5
 8023752:	940c      	str	r4, [sp, #48]	; 0x30
 8023754:	fb0a fc0c 	mul.w	ip, sl, ip
 8023758:	f89b 4001 	ldrb.w	r4, [fp, #1]
 802375c:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 8023760:	eba0 000c 	sub.w	r0, r0, ip
 8023764:	940d      	str	r4, [sp, #52]	; 0x34
 8023766:	fa1f fa8a 	uxth.w	sl, sl
 802376a:	b280      	uxth	r0, r0
 802376c:	eba3 030a 	sub.w	r3, r3, sl
 8023770:	fb08 f000 	mul.w	r0, r8, r0
 8023774:	b29b      	uxth	r3, r3
 8023776:	fb09 0303 	mla	r3, r9, r3, r0
 802377a:	980c      	ldr	r0, [sp, #48]	; 0x30
 802377c:	fb0a 3300 	mla	r3, sl, r0, r3
 8023780:	fb0c 3304 	mla	r3, ip, r4, r3
 8023784:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8023788:	2b00      	cmp	r3, #0
 802378a:	f000 80cc 	beq.w	8023926 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ee>
 802378e:	9808      	ldr	r0, [sp, #32]
 8023790:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8023794:	9c08      	ldr	r4, [sp, #32]
 8023796:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 802379a:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 802379e:	f000 80d5 	beq.w	802394c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x714>
 80237a2:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 80237a6:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 80237aa:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80237ae:	fb0a fc0c 	mul.w	ip, sl, ip
 80237b2:	fb09 f707 	mul.w	r7, r9, r7
 80237b6:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 80237ba:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 80237be:	f107 0b20 	add.w	fp, r7, #32
 80237c2:	44cc      	add	ip, r9
 80237c4:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 80237c8:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 80237cc:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80237d0:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80237d4:	ea4c 0909 	orr.w	r9, ip, r9
 80237d8:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80237dc:	8847      	ldrh	r7, [r0, #2]
 80237de:	d019      	beq.n	8023814 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5dc>
 80237e0:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 80237e4:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 80237e8:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80237ec:	fb0a fc0c 	mul.w	ip, sl, ip
 80237f0:	fb08 f807 	mul.w	r8, r8, r7
 80237f4:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 80237f8:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 80237fc:	f108 0b20 	add.w	fp, r8, #32
 8023800:	44bc      	add	ip, r7
 8023802:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 8023806:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 802380a:	0a3f      	lsrs	r7, r7, #8
 802380c:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8023810:	ea4c 0707 	orr.w	r7, ip, r7
 8023814:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 8023818:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 802381c:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8023820:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8023824:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8023828:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802382c:	ea4c 0909 	orr.w	r9, ip, r9
 8023830:	ea4a 0707 	orr.w	r7, sl, r7
 8023834:	2d00      	cmp	r5, #0
 8023836:	f000 808b 	beq.w	8023950 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 802383a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 802383e:	3901      	subs	r1, #1
 8023840:	0049      	lsls	r1, r1, #1
 8023842:	3102      	adds	r1, #2
 8023844:	eb00 0c01 	add.w	ip, r0, r1
 8023848:	5a41      	ldrh	r1, [r0, r1]
 802384a:	980c      	ldr	r0, [sp, #48]	; 0x30
 802384c:	28ff      	cmp	r0, #255	; 0xff
 802384e:	d019      	beq.n	8023884 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64c>
 8023850:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 8023854:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8023856:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802385a:	ea4f 08e4 	mov.w	r8, r4, asr #3
 802385e:	fb04 fa01 	mul.w	sl, r4, r1
 8023862:	fb08 f800 	mul.w	r8, r8, r0
 8023866:	f10a 0020 	add.w	r0, sl, #32
 802386a:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 802386e:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8023872:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8023876:	4441      	add	r1, r8
 8023878:	0a00      	lsrs	r0, r0, #8
 802387a:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 802387e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8023882:	4301      	orrs	r1, r0
 8023884:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8023886:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 802388a:	2cff      	cmp	r4, #255	; 0xff
 802388c:	d01a      	beq.n	80238c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68c>
 802388e:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 8023892:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8023896:	ea4f 08e4 	mov.w	r8, r4, asr #3
 802389a:	fb04 fa00 	mul.w	sl, r4, r0
 802389e:	fb08 f80c 	mul.w	r8, r8, ip
 80238a2:	f10a 0c20 	add.w	ip, sl, #32
 80238a6:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 80238aa:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80238ae:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 80238b2:	4440      	add	r0, r8
 80238b4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80238b8:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 80238bc:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 80238c0:	ea40 000c 	orr.w	r0, r0, ip
 80238c4:	fb15 fc02 	smulbb	ip, r5, r2
 80238c8:	f1c5 0810 	rsb	r8, r5, #16
 80238cc:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 80238d0:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80238d4:	ea4f 0cec 	mov.w	ip, ip, asr #3
 80238d8:	eba8 0802 	sub.w	r8, r8, r2
 80238dc:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 80238e0:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80238e4:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 80238e8:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80238ec:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 80238f0:	ea4a 0101 	orr.w	r1, sl, r1
 80238f4:	437a      	muls	r2, r7
 80238f6:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 80238fa:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80238fe:	fb09 2208 	mla	r2, r9, r8, r2
 8023902:	ea4b 0000 	orr.w	r0, fp, r0
 8023906:	fb05 2201 	mla	r2, r5, r1, r2
 802390a:	fb0c 2200 	mla	r2, ip, r0, r2
 802390e:	0d57      	lsrs	r7, r2, #21
 8023910:	0952      	lsrs	r2, r2, #5
 8023912:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8023916:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802391a:	433a      	orrs	r2, r7
 802391c:	2bff      	cmp	r3, #255	; 0xff
 802391e:	b292      	uxth	r2, r2
 8023920:	d127      	bne.n	8023972 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73a>
 8023922:	f8ae 2000 	strh.w	r2, [lr]
 8023926:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8023928:	f10e 0e02 	add.w	lr, lr, #2
 802392c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 802392e:	4413      	add	r3, r2
 8023930:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8023932:	931d      	str	r3, [sp, #116]	; 0x74
 8023934:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8023936:	441a      	add	r2, r3
 8023938:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802393a:	3b01      	subs	r3, #1
 802393c:	921e      	str	r2, [sp, #120]	; 0x78
 802393e:	930f      	str	r3, [sp, #60]	; 0x3c
 8023940:	e627      	b.n	8023592 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 8023942:	fb08 f000 	mul.w	r0, r8, r0
 8023946:	fb09 0303 	mla	r3, r9, r3, r0
 802394a:	e71b      	b.n	8023784 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54c>
 802394c:	46b9      	mov	r9, r7
 802394e:	e743      	b.n	80237d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a0>
 8023950:	f1c2 0110 	rsb	r1, r2, #16
 8023954:	437a      	muls	r2, r7
 8023956:	fb09 2901 	mla	r9, r9, r1, r2
 802395a:	ea4f 0949 	mov.w	r9, r9, lsl #1
 802395e:	ea4f 5059 	mov.w	r0, r9, lsr #21
 8023962:	ea4f 1259 	mov.w	r2, r9, lsr #5
 8023966:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802396a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802396e:	4302      	orrs	r2, r0
 8023970:	e7d4      	b.n	802391c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e4>
 8023972:	f8be 7000 	ldrh.w	r7, [lr]
 8023976:	43db      	mvns	r3, r3
 8023978:	4c1b      	ldr	r4, [pc, #108]	; (80239e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b0>)
 802397a:	1238      	asrs	r0, r7, #8
 802397c:	fa5f fc83 	uxtb.w	ip, r3
 8023980:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8023984:	10fd      	asrs	r5, r7, #3
 8023986:	00fb      	lsls	r3, r7, #3
 8023988:	fb00 f00c 	mul.w	r0, r0, ip
 802398c:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8023990:	b2db      	uxtb	r3, r3
 8023992:	fb05 f10c 	mul.w	r1, r5, ip
 8023996:	1c45      	adds	r5, r0, #1
 8023998:	fb03 f30c 	mul.w	r3, r3, ip
 802399c:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 80239a0:	1215      	asrs	r5, r2, #8
 80239a2:	f025 0507 	bic.w	r5, r5, #7
 80239a6:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 80239aa:	1c4d      	adds	r5, r1, #1
 80239ac:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 80239b0:	10d1      	asrs	r1, r2, #3
 80239b2:	b2c0      	uxtb	r0, r0
 80239b4:	f021 0103 	bic.w	r1, r1, #3
 80239b8:	00d2      	lsls	r2, r2, #3
 80239ba:	ea04 2000 	and.w	r0, r4, r0, lsl #8
 80239be:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 80239c2:	00c9      	lsls	r1, r1, #3
 80239c4:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80239c8:	4308      	orrs	r0, r1
 80239ca:	1c59      	adds	r1, r3, #1
 80239cc:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 80239d0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80239d4:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 80239d8:	4318      	orrs	r0, r3
 80239da:	f8ae 0000 	strh.w	r0, [lr]
 80239de:	e7a2      	b.n	8023926 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ee>
 80239e0:	b013      	add	sp, #76	; 0x4c
 80239e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80239e6:	bf00      	nop
 80239e8:	fffff800 	.word	0xfffff800

080239ec <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>:
 80239ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80239f0:	e9dd 4509 	ldrd	r4, r5, [sp, #36]	; 0x24
 80239f4:	f9bd a020 	ldrsh.w	sl, [sp, #32]
 80239f8:	fb05 4c03 	mla	ip, r5, r3, r4
 80239fc:	2d00      	cmp	r5, #0
 80239fe:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 8023a02:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 8023a06:	eb02 0e4c 	add.w	lr, r2, ip, lsl #1
 8023a0a:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 8023a0e:	8808      	ldrh	r0, [r1, #0]
 8023a10:	f2c0 80a7 	blt.w	8023b62 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
 8023a14:	45aa      	cmp	sl, r5
 8023a16:	f340 80a4 	ble.w	8023b62 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
 8023a1a:	2c00      	cmp	r4, #0
 8023a1c:	f2c0 809f 	blt.w	8023b5e <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
 8023a20:	42a3      	cmp	r3, r4
 8023a22:	f340 809c 	ble.w	8023b5e <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
 8023a26:	f832 801c 	ldrh.w	r8, [r2, ip, lsl #1]
 8023a2a:	1c62      	adds	r2, r4, #1
 8023a2c:	f100 809c 	bmi.w	8023b68 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 8023a30:	4293      	cmp	r3, r2
 8023a32:	f340 8099 	ble.w	8023b68 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 8023a36:	f1b9 0f00 	cmp.w	r9, #0
 8023a3a:	f000 8095 	beq.w	8023b68 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 8023a3e:	f8be c002 	ldrh.w	ip, [lr, #2]
 8023a42:	3501      	adds	r5, #1
 8023a44:	f100 8094 	bmi.w	8023b70 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 8023a48:	45aa      	cmp	sl, r5
 8023a4a:	f340 8091 	ble.w	8023b70 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 8023a4e:	2f00      	cmp	r7, #0
 8023a50:	f000 808e 	beq.w	8023b70 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 8023a54:	2c00      	cmp	r4, #0
 8023a56:	f2c0 8089 	blt.w	8023b6c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
 8023a5a:	42a3      	cmp	r3, r4
 8023a5c:	f340 8086 	ble.w	8023b6c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
 8023a60:	f83e 5013 	ldrh.w	r5, [lr, r3, lsl #1]
 8023a64:	3401      	adds	r4, #1
 8023a66:	f100 8086 	bmi.w	8023b76 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 8023a6a:	42a3      	cmp	r3, r4
 8023a6c:	f340 8083 	ble.w	8023b76 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 8023a70:	f1b9 0f00 	cmp.w	r9, #0
 8023a74:	d07f      	beq.n	8023b76 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 8023a76:	3301      	adds	r3, #1
 8023a78:	f83e 3013 	ldrh.w	r3, [lr, r3, lsl #1]
 8023a7c:	ea4f 4408 	mov.w	r4, r8, lsl #16
 8023a80:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 8023a84:	fb19 fe07 	smulbb	lr, r9, r7
 8023a88:	f1c7 0210 	rsb	r2, r7, #16
 8023a8c:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8023a90:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 8023a94:	eba2 0209 	sub.w	r2, r2, r9
 8023a98:	ea44 0808 	orr.w	r8, r4, r8
 8023a9c:	ea4f 440c 	mov.w	r4, ip, lsl #16
 8023aa0:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8023aa4:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 8023aa8:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8023aac:	ebce 0747 	rsb	r7, lr, r7, lsl #1
 8023ab0:	ea44 0c0c 	orr.w	ip, r4, ip
 8023ab4:	ebce 0449 	rsb	r4, lr, r9, lsl #1
 8023ab8:	fb04 f40c 	mul.w	r4, r4, ip
 8023abc:	fb02 4808 	mla	r8, r2, r8, r4
 8023ac0:	041a      	lsls	r2, r3, #16
 8023ac2:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8023ac6:	b2b4      	uxth	r4, r6
 8023ac8:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8023acc:	43f6      	mvns	r6, r6
 8023ace:	4313      	orrs	r3, r2
 8023ad0:	042a      	lsls	r2, r5, #16
 8023ad2:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8023ad6:	b2f6      	uxtb	r6, r6
 8023ad8:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8023adc:	fb0e 8303 	mla	r3, lr, r3, r8
 8023ae0:	432a      	orrs	r2, r5
 8023ae2:	fb07 3202 	mla	r2, r7, r2, r3
 8023ae6:	10c7      	asrs	r7, r0, #3
 8023ae8:	0d53      	lsrs	r3, r2, #21
 8023aea:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8023aee:	0952      	lsrs	r2, r2, #5
 8023af0:	fb17 f706 	smulbb	r7, r7, r6
 8023af4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8023af8:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8023afc:	431a      	orrs	r2, r3
 8023afe:	b293      	uxth	r3, r2
 8023b00:	1202      	asrs	r2, r0, #8
 8023b02:	121d      	asrs	r5, r3, #8
 8023b04:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8023b08:	00c0      	lsls	r0, r0, #3
 8023b0a:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8023b0e:	fb12 f206 	smulbb	r2, r2, r6
 8023b12:	b2c0      	uxtb	r0, r0
 8023b14:	fb05 2504 	mla	r5, r5, r4, r2
 8023b18:	10da      	asrs	r2, r3, #3
 8023b1a:	fb10 f006 	smulbb	r0, r0, r6
 8023b1e:	00db      	lsls	r3, r3, #3
 8023b20:	b2ad      	uxth	r5, r5
 8023b22:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8023b26:	b2db      	uxtb	r3, r3
 8023b28:	fb02 7204 	mla	r2, r2, r4, r7
 8023b2c:	fb03 0004 	mla	r0, r3, r4, r0
 8023b30:	1c6b      	adds	r3, r5, #1
 8023b32:	b292      	uxth	r2, r2
 8023b34:	b280      	uxth	r0, r0
 8023b36:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8023b3a:	1c43      	adds	r3, r0, #1
 8023b3c:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8023b40:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8023b44:	1c50      	adds	r0, r2, #1
 8023b46:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8023b4a:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8023b4e:	0952      	lsrs	r2, r2, #5
 8023b50:	432b      	orrs	r3, r5
 8023b52:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8023b56:	4313      	orrs	r3, r2
 8023b58:	800b      	strh	r3, [r1, #0]
 8023b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023b5e:	4680      	mov	r8, r0
 8023b60:	e763      	b.n	8023a2a <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x3e>
 8023b62:	4684      	mov	ip, r0
 8023b64:	4680      	mov	r8, r0
 8023b66:	e76c      	b.n	8023a42 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
 8023b68:	4684      	mov	ip, r0
 8023b6a:	e76a      	b.n	8023a42 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
 8023b6c:	4605      	mov	r5, r0
 8023b6e:	e779      	b.n	8023a64 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x78>
 8023b70:	4603      	mov	r3, r0
 8023b72:	4605      	mov	r5, r0
 8023b74:	e782      	b.n	8023a7c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>
 8023b76:	4603      	mov	r3, r0
 8023b78:	e780      	b.n	8023a7c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>

08023b7a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023b7a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023b7e:	b093      	sub	sp, #76	; 0x4c
 8023b80:	461d      	mov	r5, r3
 8023b82:	9210      	str	r2, [sp, #64]	; 0x40
 8023b84:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8023b86:	f89d 2094 	ldrb.w	r2, [sp, #148]	; 0x94
 8023b8a:	910a      	str	r1, [sp, #40]	; 0x28
 8023b8c:	920b      	str	r2, [sp, #44]	; 0x2c
 8023b8e:	6859      	ldr	r1, [r3, #4]
 8023b90:	681b      	ldr	r3, [r3, #0]
 8023b92:	9011      	str	r0, [sp, #68]	; 0x44
 8023b94:	e9dd 2722 	ldrd	r2, r7, [sp, #136]	; 0x88
 8023b98:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 8023b9c:	fb01 2707 	mla	r7, r1, r7, r2
 8023ba0:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 8023ba4:	9307      	str	r3, [sp, #28]
 8023ba6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8023ba8:	681b      	ldr	r3, [r3, #0]
 8023baa:	9309      	str	r3, [sp, #36]	; 0x24
 8023bac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023bae:	43db      	mvns	r3, r3
 8023bb0:	b2db      	uxtb	r3, r3
 8023bb2:	9308      	str	r3, [sp, #32]
 8023bb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023bb6:	2b00      	cmp	r3, #0
 8023bb8:	dc03      	bgt.n	8023bc2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8023bba:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8023bbc:	2b00      	cmp	r3, #0
 8023bbe:	f340 8205 	ble.w	8023fcc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8023bc2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8023bc4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023bc8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8023bcc:	1e48      	subs	r0, r1, #1
 8023bce:	f102 3cff 	add.w	ip, r2, #4294967295
 8023bd2:	2d00      	cmp	r5, #0
 8023bd4:	f340 80da 	ble.w	8023d8c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8023bd8:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8023bdc:	ea4f 4326 	mov.w	r3, r6, asr #16
 8023be0:	d406      	bmi.n	8023bf0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8023be2:	4586      	cmp	lr, r0
 8023be4:	da04      	bge.n	8023bf0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8023be6:	2b00      	cmp	r3, #0
 8023be8:	db02      	blt.n	8023bf0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8023bea:	4563      	cmp	r3, ip
 8023bec:	f2c0 80cf 	blt.w	8023d8e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8023bf0:	f11e 0e01 	adds.w	lr, lr, #1
 8023bf4:	f100 80c1 	bmi.w	8023d7a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8023bf8:	4571      	cmp	r1, lr
 8023bfa:	f2c0 80be 	blt.w	8023d7a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8023bfe:	3301      	adds	r3, #1
 8023c00:	f100 80bb 	bmi.w	8023d7a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8023c04:	429a      	cmp	r2, r3
 8023c06:	f2c0 80b8 	blt.w	8023d7a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8023c0a:	46a9      	mov	r9, r5
 8023c0c:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8023c10:	f1b9 0f00 	cmp.w	r9, #0
 8023c14:	f340 80d8 	ble.w	8023dc8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 8023c18:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8023c1a:	1421      	asrs	r1, r4, #16
 8023c1c:	ea4f 4026 	mov.w	r0, r6, asr #16
 8023c20:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8023c24:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8023c28:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8023c2c:	f100 8112 	bmi.w	8023e54 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 8023c30:	f10e 3aff 	add.w	sl, lr, #4294967295
 8023c34:	4551      	cmp	r1, sl
 8023c36:	f280 810d 	bge.w	8023e54 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 8023c3a:	2800      	cmp	r0, #0
 8023c3c:	f2c0 810a 	blt.w	8023e54 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 8023c40:	f103 3aff 	add.w	sl, r3, #4294967295
 8023c44:	4550      	cmp	r0, sl
 8023c46:	f280 8105 	bge.w	8023e54 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 8023c4a:	fa0f f38e 	sxth.w	r3, lr
 8023c4e:	fb00 1103 	mla	r1, r0, r3, r1
 8023c52:	9809      	ldr	r0, [sp, #36]	; 0x24
 8023c54:	eb00 0a41 	add.w	sl, r0, r1, lsl #1
 8023c58:	f830 e011 	ldrh.w	lr, [r0, r1, lsl #1]
 8023c5c:	f8ba 1002 	ldrh.w	r1, [sl, #2]
 8023c60:	f1bc 0f00 	cmp.w	ip, #0
 8023c64:	d007      	beq.n	8023c76 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfc>
 8023c66:	005b      	lsls	r3, r3, #1
 8023c68:	eb0a 0003 	add.w	r0, sl, r3
 8023c6c:	f83a 3003 	ldrh.w	r3, [sl, r3]
 8023c70:	930c      	str	r3, [sp, #48]	; 0x30
 8023c72:	8843      	ldrh	r3, [r0, #2]
 8023c74:	930d      	str	r3, [sp, #52]	; 0x34
 8023c76:	ea4f 400e 	mov.w	r0, lr, lsl #16
 8023c7a:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8023c7e:	fb12 f30c 	smulbb	r3, r2, ip
 8023c82:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8023c86:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8023c8a:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8023c8e:	10db      	asrs	r3, r3, #3
 8023c90:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8023c94:	ea40 000e 	orr.w	r0, r0, lr
 8023c98:	f1cc 0e10 	rsb	lr, ip, #16
 8023c9c:	ea4a 0101 	orr.w	r1, sl, r1
 8023ca0:	9f08      	ldr	r7, [sp, #32]
 8023ca2:	ebae 0e02 	sub.w	lr, lr, r2
 8023ca6:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8023caa:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 8023cae:	4351      	muls	r1, r2
 8023cb0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8023cb2:	fb0e 1e00 	mla	lr, lr, r0, r1
 8023cb6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8023cb8:	0410      	lsls	r0, r2, #16
 8023cba:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8023cbe:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8023cc2:	4310      	orrs	r0, r2
 8023cc4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8023cc6:	0412      	lsls	r2, r2, #16
 8023cc8:	fb03 e000 	mla	r0, r3, r0, lr
 8023ccc:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 8023cd0:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8023cd4:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8023cd8:	ea42 020e 	orr.w	r2, r2, lr
 8023cdc:	fb03 0302 	mla	r3, r3, r2, r0
 8023ce0:	f8b8 0000 	ldrh.w	r0, [r8]
 8023ce4:	0d5a      	lsrs	r2, r3, #21
 8023ce6:	095b      	lsrs	r3, r3, #5
 8023ce8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8023cec:	1201      	asrs	r1, r0, #8
 8023cee:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8023cf2:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 8023cf6:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8023cfa:	00c0      	lsls	r0, r0, #3
 8023cfc:	4313      	orrs	r3, r2
 8023cfe:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8023d02:	fb11 f107 	smulbb	r1, r1, r7
 8023d06:	b2c0      	uxtb	r0, r0
 8023d08:	b29b      	uxth	r3, r3
 8023d0a:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8023d0e:	fb10 f007 	smulbb	r0, r0, r7
 8023d12:	fb1e fe07 	smulbb	lr, lr, r7
 8023d16:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8023d1a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8023d1e:	fb0c 1c02 	mla	ip, ip, r2, r1
 8023d22:	10d9      	asrs	r1, r3, #3
 8023d24:	00db      	lsls	r3, r3, #3
 8023d26:	fa1f fc8c 	uxth.w	ip, ip
 8023d2a:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8023d2e:	b2db      	uxtb	r3, r3
 8023d30:	fb01 e102 	mla	r1, r1, r2, lr
 8023d34:	fb03 0302 	mla	r3, r3, r2, r0
 8023d38:	b289      	uxth	r1, r1
 8023d3a:	b29a      	uxth	r2, r3
 8023d3c:	f10c 0301 	add.w	r3, ip, #1
 8023d40:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8023d44:	1c53      	adds	r3, r2, #1
 8023d46:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8023d4a:	1c4a      	adds	r2, r1, #1
 8023d4c:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8023d50:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8023d54:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8023d58:	0949      	lsrs	r1, r1, #5
 8023d5a:	ea43 030c 	orr.w	r3, r3, ip
 8023d5e:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8023d62:	430b      	orrs	r3, r1
 8023d64:	f8a8 3000 	strh.w	r3, [r8]
 8023d68:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8023d6a:	f108 0802 	add.w	r8, r8, #2
 8023d6e:	f109 39ff 	add.w	r9, r9, #4294967295
 8023d72:	441c      	add	r4, r3
 8023d74:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8023d76:	441e      	add	r6, r3
 8023d78:	e74a      	b.n	8023c10 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8023d7a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8023d7c:	3d01      	subs	r5, #1
 8023d7e:	441c      	add	r4, r3
 8023d80:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8023d82:	441e      	add	r6, r3
 8023d84:	9b07      	ldr	r3, [sp, #28]
 8023d86:	3302      	adds	r3, #2
 8023d88:	9307      	str	r3, [sp, #28]
 8023d8a:	e722      	b.n	8023bd2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8023d8c:	d022      	beq.n	8023dd4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 8023d8e:	1e6b      	subs	r3, r5, #1
 8023d90:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8023d92:	fb00 4003 	mla	r0, r0, r3, r4
 8023d96:	1400      	asrs	r0, r0, #16
 8023d98:	f53f af37 	bmi.w	8023c0a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8023d9c:	3901      	subs	r1, #1
 8023d9e:	4288      	cmp	r0, r1
 8023da0:	f6bf af33 	bge.w	8023c0a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8023da4:	9920      	ldr	r1, [sp, #128]	; 0x80
 8023da6:	fb01 6303 	mla	r3, r1, r3, r6
 8023daa:	141b      	asrs	r3, r3, #16
 8023dac:	f53f af2d 	bmi.w	8023c0a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8023db0:	3a01      	subs	r2, #1
 8023db2:	4293      	cmp	r3, r2
 8023db4:	f6bf af29 	bge.w	8023c0a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8023db8:	46a8      	mov	r8, r5
 8023dba:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8023dbe:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
 8023dc2:	f1b8 0f00 	cmp.w	r8, #0
 8023dc6:	dc60      	bgt.n	8023e8a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x310>
 8023dc8:	9b07      	ldr	r3, [sp, #28]
 8023dca:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8023dce:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8023dd2:	9307      	str	r3, [sp, #28]
 8023dd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023dd6:	2b00      	cmp	r3, #0
 8023dd8:	f340 80f8 	ble.w	8023fcc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8023ddc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023de0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8023de2:	ee30 0a04 	vadd.f32	s0, s0, s8
 8023de6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8023dea:	eef0 6a62 	vmov.f32	s13, s5
 8023dee:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8023df2:	ee31 1a05 	vadd.f32	s2, s2, s10
 8023df6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023dfa:	ee16 4a90 	vmov	r4, s13
 8023dfe:	eef0 6a43 	vmov.f32	s13, s6
 8023e02:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023e06:	ee16 6a90 	vmov	r6, s13
 8023e0a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8023e0e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8023e12:	ee77 2a62 	vsub.f32	s5, s14, s5
 8023e16:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8023e1a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8023e1e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8023e22:	ee12 2a90 	vmov	r2, s5
 8023e26:	eef0 2a47 	vmov.f32	s5, s14
 8023e2a:	fb92 f3f3 	sdiv	r3, r2, r3
 8023e2e:	ee13 2a10 	vmov	r2, s6
 8023e32:	931f      	str	r3, [sp, #124]	; 0x7c
 8023e34:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8023e36:	eeb0 3a67 	vmov.f32	s6, s15
 8023e3a:	fb92 f3f3 	sdiv	r3, r2, r3
 8023e3e:	9320      	str	r3, [sp, #128]	; 0x80
 8023e40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023e42:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8023e44:	3b01      	subs	r3, #1
 8023e46:	930a      	str	r3, [sp, #40]	; 0x28
 8023e48:	bf08      	it	eq
 8023e4a:	4615      	moveq	r5, r2
 8023e4c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8023e4e:	bf18      	it	ne
 8023e50:	461d      	movne	r5, r3
 8023e52:	e6af      	b.n	8023bb4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8023e54:	f111 0a01 	adds.w	sl, r1, #1
 8023e58:	d486      	bmi.n	8023d68 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8023e5a:	45d6      	cmp	lr, sl
 8023e5c:	db84      	blt.n	8023d68 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8023e5e:	f110 0a01 	adds.w	sl, r0, #1
 8023e62:	d481      	bmi.n	8023d68 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8023e64:	4553      	cmp	r3, sl
 8023e66:	f6ff af7f 	blt.w	8023d68 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8023e6a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8023e6c:	b21b      	sxth	r3, r3
 8023e6e:	9101      	str	r1, [sp, #4]
 8023e70:	4641      	mov	r1, r8
 8023e72:	9300      	str	r3, [sp, #0]
 8023e74:	fa0f f38e 	sxth.w	r3, lr
 8023e78:	e9cd 0202 	strd	r0, r2, [sp, #8]
 8023e7c:	e9cd c704 	strd	ip, r7, [sp, #16]
 8023e80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8023e82:	9811      	ldr	r0, [sp, #68]	; 0x44
 8023e84:	f7ff fdb2 	bl	80239ec <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>
 8023e88:	e76e      	b.n	8023d68 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8023e8a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8023e8c:	1430      	asrs	r0, r6, #16
 8023e8e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8023e90:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8023e94:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023e98:	1423      	asrs	r3, r4, #16
 8023e9a:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8023e9e:	fb01 3000 	mla	r0, r1, r0, r3
 8023ea2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023ea4:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8023ea8:	f837 c010 	ldrh.w	ip, [r7, r0, lsl #1]
 8023eac:	8858      	ldrh	r0, [r3, #2]
 8023eae:	f1be 0f00 	cmp.w	lr, #0
 8023eb2:	d00b      	beq.n	8023ecc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 8023eb4:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8023eb8:	3901      	subs	r1, #1
 8023eba:	0049      	lsls	r1, r1, #1
 8023ebc:	3102      	adds	r1, #2
 8023ebe:	eb03 0b01 	add.w	fp, r3, r1
 8023ec2:	5a5b      	ldrh	r3, [r3, r1]
 8023ec4:	930e      	str	r3, [sp, #56]	; 0x38
 8023ec6:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8023eca:	930f      	str	r3, [sp, #60]	; 0x3c
 8023ecc:	ea4f 410c 	mov.w	r1, ip, lsl #16
 8023ed0:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8023ed4:	fb12 f30e 	smulbb	r3, r2, lr
 8023ed8:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8023edc:	f001 61fc 	and.w	r1, r1, #132120576	; 0x7e00000
 8023ee0:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8023ee4:	10db      	asrs	r3, r3, #3
 8023ee6:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8023eea:	ea41 010c 	orr.w	r1, r1, ip
 8023eee:	f1ce 0c10 	rsb	ip, lr, #16
 8023ef2:	ea4b 0000 	orr.w	r0, fp, r0
 8023ef6:	9f08      	ldr	r7, [sp, #32]
 8023ef8:	ebac 0c02 	sub.w	ip, ip, r2
 8023efc:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8023f00:	f108 38ff 	add.w	r8, r8, #4294967295
 8023f04:	4350      	muls	r0, r2
 8023f06:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 8023f0a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8023f0c:	fb0c 0c01 	mla	ip, ip, r1, r0
 8023f10:	980e      	ldr	r0, [sp, #56]	; 0x38
 8023f12:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8023f16:	f422 61fc 	bic.w	r1, r2, #2016	; 0x7e0
 8023f1a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8023f1c:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8023f20:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8023f24:	0412      	lsls	r2, r2, #16
 8023f26:	ea4b 0101 	orr.w	r1, fp, r1
 8023f2a:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8023f2e:	fb03 c101 	mla	r1, r3, r1, ip
 8023f32:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 8023f36:	4302      	orrs	r2, r0
 8023f38:	fb03 1202 	mla	r2, r3, r2, r1
 8023f3c:	ea4f 5b52 	mov.w	fp, r2, lsr #21
 8023f40:	0952      	lsrs	r2, r2, #5
 8023f42:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8023f46:	f422 63fc 	bic.w	r3, r2, #2016	; 0x7e0
 8023f4a:	f8b9 2000 	ldrh.w	r2, [r9]
 8023f4e:	ea4b 0303 	orr.w	r3, fp, r3
 8023f52:	1211      	asrs	r1, r2, #8
 8023f54:	ea4f 0ce2 	mov.w	ip, r2, asr #3
 8023f58:	b29b      	uxth	r3, r3
 8023f5a:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8023f5e:	00d2      	lsls	r2, r2, #3
 8023f60:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8023f64:	fb11 f107 	smulbb	r1, r1, r7
 8023f68:	1218      	asrs	r0, r3, #8
 8023f6a:	fb1c fc07 	smulbb	ip, ip, r7
 8023f6e:	b2d2      	uxtb	r2, r2
 8023f70:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8023f74:	fb12 f207 	smulbb	r2, r2, r7
 8023f78:	fb00 100a 	mla	r0, r0, sl, r1
 8023f7c:	10d9      	asrs	r1, r3, #3
 8023f7e:	00db      	lsls	r3, r3, #3
 8023f80:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8023f84:	b280      	uxth	r0, r0
 8023f86:	b2db      	uxtb	r3, r3
 8023f88:	fb01 c10a 	mla	r1, r1, sl, ip
 8023f8c:	fb03 230a 	mla	r3, r3, sl, r2
 8023f90:	1c42      	adds	r2, r0, #1
 8023f92:	b289      	uxth	r1, r1
 8023f94:	b29b      	uxth	r3, r3
 8023f96:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8023f9a:	f101 0c01 	add.w	ip, r1, #1
 8023f9e:	1c5a      	adds	r2, r3, #1
 8023fa0:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8023fa4:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8023fa8:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8023fac:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8023fae:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8023fb2:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8023fb6:	441c      	add	r4, r3
 8023fb8:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8023fbc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8023fbe:	4310      	orrs	r0, r2
 8023fc0:	441e      	add	r6, r3
 8023fc2:	ea40 000c 	orr.w	r0, r0, ip
 8023fc6:	f829 0b02 	strh.w	r0, [r9], #2
 8023fca:	e6fa      	b.n	8023dc2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8023fcc:	b013      	add	sp, #76	; 0x4c
 8023fce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08023fd2 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>:
 8023fd2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8023fd6:	e9dd 4e08 	ldrd	r4, lr, [sp, #32]
 8023fda:	f9bd 901c 	ldrsh.w	r9, [sp, #28]
 8023fde:	fb0e 4703 	mla	r7, lr, r3, r4
 8023fe2:	f1be 0f00 	cmp.w	lr, #0
 8023fe6:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
 8023fea:	f89d 602c 	ldrb.w	r6, [sp, #44]	; 0x2c
 8023fee:	eb02 0847 	add.w	r8, r2, r7, lsl #1
 8023ff2:	8808      	ldrh	r0, [r1, #0]
 8023ff4:	db60      	blt.n	80240b8 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
 8023ff6:	45f1      	cmp	r9, lr
 8023ff8:	dd5e      	ble.n	80240b8 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
 8023ffa:	2c00      	cmp	r4, #0
 8023ffc:	db5a      	blt.n	80240b4 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
 8023ffe:	42a3      	cmp	r3, r4
 8024000:	dd58      	ble.n	80240b4 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
 8024002:	f832 c017 	ldrh.w	ip, [r2, r7, lsl #1]
 8024006:	1c62      	adds	r2, r4, #1
 8024008:	d459      	bmi.n	80240be <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 802400a:	4293      	cmp	r3, r2
 802400c:	dd57      	ble.n	80240be <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 802400e:	2d00      	cmp	r5, #0
 8024010:	d055      	beq.n	80240be <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 8024012:	f8b8 7002 	ldrh.w	r7, [r8, #2]
 8024016:	f11e 0e01 	adds.w	lr, lr, #1
 802401a:	d454      	bmi.n	80240c6 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 802401c:	45f1      	cmp	r9, lr
 802401e:	dd52      	ble.n	80240c6 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 8024020:	2e00      	cmp	r6, #0
 8024022:	d050      	beq.n	80240c6 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 8024024:	2c00      	cmp	r4, #0
 8024026:	db4c      	blt.n	80240c2 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
 8024028:	42a3      	cmp	r3, r4
 802402a:	dd4a      	ble.n	80240c2 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
 802402c:	f838 2013 	ldrh.w	r2, [r8, r3, lsl #1]
 8024030:	3401      	adds	r4, #1
 8024032:	d405      	bmi.n	8024040 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8024034:	42a3      	cmp	r3, r4
 8024036:	dd03      	ble.n	8024040 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8024038:	b115      	cbz	r5, 8024040 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 802403a:	3301      	adds	r3, #1
 802403c:	f838 0013 	ldrh.w	r0, [r8, r3, lsl #1]
 8024040:	fb15 f406 	smulbb	r4, r5, r6
 8024044:	ea4f 430c 	mov.w	r3, ip, lsl #16
 8024048:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 802404c:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8024050:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8024054:	f3c4 04c7 	ubfx	r4, r4, #3, #8
 8024058:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 802405c:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8024060:	ea43 0c0c 	orr.w	ip, r3, ip
 8024064:	f1c6 0310 	rsb	r3, r6, #16
 8024068:	ea4e 0707 	orr.w	r7, lr, r7
 802406c:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
 8024070:	1b5b      	subs	r3, r3, r5
 8024072:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
 8024076:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 802407a:	437d      	muls	r5, r7
 802407c:	fb03 5c0c 	mla	ip, r3, ip, r5
 8024080:	0403      	lsls	r3, r0, #16
 8024082:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8024086:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 802408a:	4318      	orrs	r0, r3
 802408c:	0413      	lsls	r3, r2, #16
 802408e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8024092:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8024096:	fb04 c000 	mla	r0, r4, r0, ip
 802409a:	4313      	orrs	r3, r2
 802409c:	fb06 0003 	mla	r0, r6, r3, r0
 80240a0:	0d43      	lsrs	r3, r0, #21
 80240a2:	0940      	lsrs	r0, r0, #5
 80240a4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80240a8:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80240ac:	4318      	orrs	r0, r3
 80240ae:	8008      	strh	r0, [r1, #0]
 80240b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80240b4:	4684      	mov	ip, r0
 80240b6:	e7a6      	b.n	8024006 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x34>
 80240b8:	4607      	mov	r7, r0
 80240ba:	4684      	mov	ip, r0
 80240bc:	e7ab      	b.n	8024016 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
 80240be:	4607      	mov	r7, r0
 80240c0:	e7a9      	b.n	8024016 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
 80240c2:	4602      	mov	r2, r0
 80240c4:	e7b4      	b.n	8024030 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x5e>
 80240c6:	4602      	mov	r2, r0
 80240c8:	e7ba      	b.n	8024040 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>

080240ca <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80240ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80240ce:	b08f      	sub	sp, #60	; 0x3c
 80240d0:	461d      	mov	r5, r3
 80240d2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80240d4:	9107      	str	r1, [sp, #28]
 80240d6:	920c      	str	r2, [sp, #48]	; 0x30
 80240d8:	6859      	ldr	r1, [r3, #4]
 80240da:	681b      	ldr	r3, [r3, #0]
 80240dc:	900d      	str	r0, [sp, #52]	; 0x34
 80240de:	e9dd 271e 	ldrd	r2, r7, [sp, #120]	; 0x78
 80240e2:	e9dd 4619 	ldrd	r4, r6, [sp, #100]	; 0x64
 80240e6:	fb01 2707 	mla	r7, r1, r7, r2
 80240ea:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 80240ee:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80240f0:	f8d3 8000 	ldr.w	r8, [r3]
 80240f4:	9b07      	ldr	r3, [sp, #28]
 80240f6:	2b00      	cmp	r3, #0
 80240f8:	dc03      	bgt.n	8024102 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 80240fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80240fc:	2b00      	cmp	r3, #0
 80240fe:	f340 8182 	ble.w	8024406 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33c>
 8024102:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8024104:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024108:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802410c:	1e48      	subs	r0, r1, #1
 802410e:	f102 3cff 	add.w	ip, r2, #4294967295
 8024112:	2d00      	cmp	r5, #0
 8024114:	f340 809b 	ble.w	802424e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x184>
 8024118:	ea5f 4e24 	movs.w	lr, r4, asr #16
 802411c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8024120:	d406      	bmi.n	8024130 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8024122:	4586      	cmp	lr, r0
 8024124:	da04      	bge.n	8024130 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8024126:	2b00      	cmp	r3, #0
 8024128:	db02      	blt.n	8024130 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 802412a:	4563      	cmp	r3, ip
 802412c:	f2c0 8090 	blt.w	8024250 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8024130:	f11e 0e01 	adds.w	lr, lr, #1
 8024134:	f100 8084 	bmi.w	8024240 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8024138:	4571      	cmp	r1, lr
 802413a:	f2c0 8081 	blt.w	8024240 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 802413e:	3301      	adds	r3, #1
 8024140:	d47e      	bmi.n	8024240 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8024142:	429a      	cmp	r2, r3
 8024144:	db7c      	blt.n	8024240 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8024146:	46aa      	mov	sl, r5
 8024148:	46b9      	mov	r9, r7
 802414a:	f1ba 0f00 	cmp.w	sl, #0
 802414e:	f340 8099 	ble.w	8024284 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8024152:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8024154:	1421      	asrs	r1, r4, #16
 8024156:	ea4f 4026 	mov.w	r0, r6, asr #16
 802415a:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802415e:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8024162:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8024166:	f100 80d1 	bmi.w	802430c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 802416a:	f10e 3bff 	add.w	fp, lr, #4294967295
 802416e:	4559      	cmp	r1, fp
 8024170:	f280 80cc 	bge.w	802430c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8024174:	2800      	cmp	r0, #0
 8024176:	f2c0 80c9 	blt.w	802430c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 802417a:	f103 3bff 	add.w	fp, r3, #4294967295
 802417e:	4558      	cmp	r0, fp
 8024180:	f280 80c4 	bge.w	802430c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8024184:	fa0f fe8e 	sxth.w	lr, lr
 8024188:	fb00 110e 	mla	r1, r0, lr, r1
 802418c:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 8024190:	f838 b011 	ldrh.w	fp, [r8, r1, lsl #1]
 8024194:	8841      	ldrh	r1, [r0, #2]
 8024196:	f1bc 0f00 	cmp.w	ip, #0
 802419a:	d00b      	beq.n	80241b4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xea>
 802419c:	f10e 4300 	add.w	r3, lr, #2147483648	; 0x80000000
 80241a0:	3b01      	subs	r3, #1
 80241a2:	005b      	lsls	r3, r3, #1
 80241a4:	3302      	adds	r3, #2
 80241a6:	eb00 0e03 	add.w	lr, r0, r3
 80241aa:	5ac3      	ldrh	r3, [r0, r3]
 80241ac:	9308      	str	r3, [sp, #32]
 80241ae:	f8be 3002 	ldrh.w	r3, [lr, #2]
 80241b2:	9309      	str	r3, [sp, #36]	; 0x24
 80241b4:	ea4f 400b 	mov.w	r0, fp, lsl #16
 80241b8:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 80241bc:	fb12 f30c 	smulbb	r3, r2, ip
 80241c0:	f1cc 0e10 	rsb	lr, ip, #16
 80241c4:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 80241c8:	10db      	asrs	r3, r3, #3
 80241ca:	ebae 0e02 	sub.w	lr, lr, r2
 80241ce:	ea40 000b 	orr.w	r0, r0, fp
 80241d2:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 80241d6:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80241da:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 80241de:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80241e2:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 80241e6:	ea4b 0101 	orr.w	r1, fp, r1
 80241ea:	4351      	muls	r1, r2
 80241ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80241ee:	fb0e 1e00 	mla	lr, lr, r0, r1
 80241f2:	0410      	lsls	r0, r2, #16
 80241f4:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80241f8:	9908      	ldr	r1, [sp, #32]
 80241fa:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 80241fe:	4310      	orrs	r0, r2
 8024200:	9a08      	ldr	r2, [sp, #32]
 8024202:	0412      	lsls	r2, r2, #16
 8024204:	fb03 e000 	mla	r0, r3, r0, lr
 8024208:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 802420c:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8024210:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8024214:	ea42 020e 	orr.w	r2, r2, lr
 8024218:	fb03 0302 	mla	r3, r3, r2, r0
 802421c:	0d5a      	lsrs	r2, r3, #21
 802421e:	095b      	lsrs	r3, r3, #5
 8024220:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8024224:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8024228:	4313      	orrs	r3, r2
 802422a:	f8a9 3000 	strh.w	r3, [r9]
 802422e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8024230:	f109 0902 	add.w	r9, r9, #2
 8024234:	f10a 3aff 	add.w	sl, sl, #4294967295
 8024238:	441c      	add	r4, r3
 802423a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802423c:	441e      	add	r6, r3
 802423e:	e784      	b.n	802414a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8024240:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8024242:	3d01      	subs	r5, #1
 8024244:	3702      	adds	r7, #2
 8024246:	441c      	add	r4, r3
 8024248:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802424a:	441e      	add	r6, r3
 802424c:	e761      	b.n	8024112 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 802424e:	d01d      	beq.n	802428c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8024250:	1e6b      	subs	r3, r5, #1
 8024252:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8024254:	fb00 4003 	mla	r0, r0, r3, r4
 8024258:	1400      	asrs	r0, r0, #16
 802425a:	f53f af74 	bmi.w	8024146 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802425e:	3901      	subs	r1, #1
 8024260:	4288      	cmp	r0, r1
 8024262:	f6bf af70 	bge.w	8024146 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8024266:	991c      	ldr	r1, [sp, #112]	; 0x70
 8024268:	fb01 6303 	mla	r3, r1, r3, r6
 802426c:	141b      	asrs	r3, r3, #16
 802426e:	f53f af6a 	bmi.w	8024146 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8024272:	3a01      	subs	r2, #1
 8024274:	4293      	cmp	r3, r2
 8024276:	f6bf af66 	bge.w	8024146 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802427a:	46a9      	mov	r9, r5
 802427c:	46ba      	mov	sl, r7
 802427e:	f1b9 0f00 	cmp.w	r9, #0
 8024282:	dc5b      	bgt.n	802433c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 8024284:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8024288:	eb07 0745 	add.w	r7, r7, r5, lsl #1
 802428c:	9b07      	ldr	r3, [sp, #28]
 802428e:	2b00      	cmp	r3, #0
 8024290:	f340 80b9 	ble.w	8024406 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33c>
 8024294:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8024298:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802429a:	ee30 0a04 	vadd.f32	s0, s0, s8
 802429e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80242a2:	eef0 6a62 	vmov.f32	s13, s5
 80242a6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80242aa:	ee31 1a05 	vadd.f32	s2, s2, s10
 80242ae:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80242b2:	ee16 4a90 	vmov	r4, s13
 80242b6:	eef0 6a43 	vmov.f32	s13, s6
 80242ba:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80242be:	ee16 6a90 	vmov	r6, s13
 80242c2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80242c6:	ee61 7a27 	vmul.f32	s15, s2, s15
 80242ca:	ee77 2a62 	vsub.f32	s5, s14, s5
 80242ce:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80242d2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80242d6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80242da:	ee12 2a90 	vmov	r2, s5
 80242de:	eef0 2a47 	vmov.f32	s5, s14
 80242e2:	fb92 f3f3 	sdiv	r3, r2, r3
 80242e6:	ee13 2a10 	vmov	r2, s6
 80242ea:	931b      	str	r3, [sp, #108]	; 0x6c
 80242ec:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80242ee:	eeb0 3a67 	vmov.f32	s6, s15
 80242f2:	fb92 f3f3 	sdiv	r3, r2, r3
 80242f6:	931c      	str	r3, [sp, #112]	; 0x70
 80242f8:	9b07      	ldr	r3, [sp, #28]
 80242fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80242fc:	3b01      	subs	r3, #1
 80242fe:	9307      	str	r3, [sp, #28]
 8024300:	bf08      	it	eq
 8024302:	4615      	moveq	r5, r2
 8024304:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8024306:	bf18      	it	ne
 8024308:	461d      	movne	r5, r3
 802430a:	e6f3      	b.n	80240f4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 802430c:	f111 0b01 	adds.w	fp, r1, #1
 8024310:	d48d      	bmi.n	802422e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8024312:	45de      	cmp	lr, fp
 8024314:	db8b      	blt.n	802422e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8024316:	f110 0b01 	adds.w	fp, r0, #1
 802431a:	d488      	bmi.n	802422e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 802431c:	455b      	cmp	r3, fp
 802431e:	db86      	blt.n	802422e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8024320:	b21b      	sxth	r3, r3
 8024322:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8024326:	e9cd 2c03 	strd	r2, ip, [sp, #12]
 802432a:	9300      	str	r3, [sp, #0]
 802432c:	4642      	mov	r2, r8
 802432e:	fa0f f38e 	sxth.w	r3, lr
 8024332:	4649      	mov	r1, r9
 8024334:	980d      	ldr	r0, [sp, #52]	; 0x34
 8024336:	f7ff fe4c 	bl	8023fd2 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>
 802433a:	e778      	b.n	802422e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 802433c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802433e:	1420      	asrs	r0, r4, #16
 8024340:	1431      	asrs	r1, r6, #16
 8024342:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8024346:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 802434a:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802434e:	fb03 0101 	mla	r1, r3, r1, r0
 8024352:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 8024356:	f838 c011 	ldrh.w	ip, [r8, r1, lsl #1]
 802435a:	8841      	ldrh	r1, [r0, #2]
 802435c:	f1be 0f00 	cmp.w	lr, #0
 8024360:	d00b      	beq.n	802437a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8024362:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8024366:	3b01      	subs	r3, #1
 8024368:	005b      	lsls	r3, r3, #1
 802436a:	3302      	adds	r3, #2
 802436c:	eb00 0b03 	add.w	fp, r0, r3
 8024370:	5ac3      	ldrh	r3, [r0, r3]
 8024372:	930a      	str	r3, [sp, #40]	; 0x28
 8024374:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8024378:	930b      	str	r3, [sp, #44]	; 0x2c
 802437a:	ea4f 400c 	mov.w	r0, ip, lsl #16
 802437e:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8024382:	fb12 f30e 	smulbb	r3, r2, lr
 8024386:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 802438a:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 802438e:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8024392:	10db      	asrs	r3, r3, #3
 8024394:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8024398:	ea40 000c 	orr.w	r0, r0, ip
 802439c:	f1ce 0c10 	rsb	ip, lr, #16
 80243a0:	ea4b 0101 	orr.w	r1, fp, r1
 80243a4:	f109 39ff 	add.w	r9, r9, #4294967295
 80243a8:	ebac 0c02 	sub.w	ip, ip, r2
 80243ac:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 80243b0:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 80243b4:	4351      	muls	r1, r2
 80243b6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80243b8:	fb0c 1c00 	mla	ip, ip, r0, r1
 80243bc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80243be:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 80243c2:	f422 60fc 	bic.w	r0, r2, #2016	; 0x7e0
 80243c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80243c8:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80243cc:	0412      	lsls	r2, r2, #16
 80243ce:	ea4b 0000 	orr.w	r0, fp, r0
 80243d2:	f421 6bfc 	bic.w	fp, r1, #2016	; 0x7e0
 80243d6:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 80243da:	fb03 c000 	mla	r0, r3, r0, ip
 80243de:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 80243e2:	ea42 0b0b 	orr.w	fp, r2, fp
 80243e6:	fb03 000b 	mla	r0, r3, fp, r0
 80243ea:	0d43      	lsrs	r3, r0, #21
 80243ec:	0940      	lsrs	r0, r0, #5
 80243ee:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80243f2:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80243f6:	4318      	orrs	r0, r3
 80243f8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80243fa:	441c      	add	r4, r3
 80243fc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80243fe:	f82a 0b02 	strh.w	r0, [sl], #2
 8024402:	441e      	add	r6, r3
 8024404:	e73b      	b.n	802427e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8024406:	b00f      	add	sp, #60	; 0x3c
 8024408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802440c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>:
 802440c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024410:	b085      	sub	sp, #20
 8024412:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	; 0x3c
 8024416:	9102      	str	r1, [sp, #8]
 8024418:	2c00      	cmp	r4, #0
 802441a:	fb04 7103 	mla	r1, r4, r3, r7
 802441e:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
 8024422:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 8024426:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
 802442a:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 802442e:	f2c0 811b 	blt.w	8024668 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
 8024432:	45a6      	cmp	lr, r4
 8024434:	f340 8118 	ble.w	8024668 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
 8024438:	2f00      	cmp	r7, #0
 802443a:	f2c0 8113 	blt.w	8024664 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
 802443e:	42bb      	cmp	r3, r7
 8024440:	f340 8110 	ble.w	8024664 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
 8024444:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 8024448:	1c7a      	adds	r2, r7, #1
 802444a:	f100 8110 	bmi.w	802466e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
 802444e:	4293      	cmp	r3, r2
 8024450:	f340 810d 	ble.w	802466e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
 8024454:	2e00      	cmp	r6, #0
 8024456:	f000 810c 	beq.w	8024672 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x266>
 802445a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 802445e:	3401      	adds	r4, #1
 8024460:	f100 810b 	bmi.w	802467a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
 8024464:	45a6      	cmp	lr, r4
 8024466:	f340 8108 	ble.w	802467a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
 802446a:	2800      	cmp	r0, #0
 802446c:	f000 8108 	beq.w	8024680 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x274>
 8024470:	2f00      	cmp	r7, #0
 8024472:	f2c0 8100 	blt.w	8024676 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
 8024476:	42bb      	cmp	r3, r7
 8024478:	f340 80fd 	ble.w	8024676 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
 802447c:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8024480:	3701      	adds	r7, #1
 8024482:	f100 8100 	bmi.w	8024686 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
 8024486:	42bb      	cmp	r3, r7
 8024488:	f340 80fd 	ble.w	8024686 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
 802448c:	2e00      	cmp	r6, #0
 802448e:	f000 80fc 	beq.w	802468a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27e>
 8024492:	3301      	adds	r3, #1
 8024494:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8024498:	b2b6      	uxth	r6, r6
 802449a:	b280      	uxth	r0, r0
 802449c:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 80244a0:	fb00 fe06 	mul.w	lr, r0, r6
 80244a4:	0136      	lsls	r6, r6, #4
 80244a6:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 80244aa:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 80244ae:	eba6 070e 	sub.w	r7, r6, lr
 80244b2:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 80244b6:	ea4f 6914 	mov.w	r9, r4, lsr #24
 80244ba:	b280      	uxth	r0, r0
 80244bc:	b2bf      	uxth	r7, r7
 80244be:	1a1b      	subs	r3, r3, r0
 80244c0:	ea4f 6812 	mov.w	r8, r2, lsr #24
 80244c4:	fb0a f607 	mul.w	r6, sl, r7
 80244c8:	b29b      	uxth	r3, r3
 80244ca:	fb0b 6603 	mla	r6, fp, r3, r6
 80244ce:	fb00 6609 	mla	r6, r0, r9, r6
 80244d2:	fb0e 6608 	mla	r6, lr, r8, r6
 80244d6:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80244da:	9600      	str	r6, [sp, #0]
 80244dc:	2e00      	cmp	r6, #0
 80244de:	f000 80be 	beq.w	802465e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x252>
 80244e2:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80244e6:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80244ea:	9e02      	ldr	r6, [sp, #8]
 80244ec:	fb0b fc0c 	mul.w	ip, fp, ip
 80244f0:	fb0b f505 	mul.w	r5, fp, r5
 80244f4:	8836      	ldrh	r6, [r6, #0]
 80244f6:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 80244fa:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80244fe:	9501      	str	r5, [sp, #4]
 8024500:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8024504:	44dc      	add	ip, fp
 8024506:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802450a:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 802450e:	9503      	str	r5, [sp, #12]
 8024510:	9d01      	ldr	r5, [sp, #4]
 8024512:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 8024516:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 802451a:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 802451e:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8024522:	fb0a fc0c 	mul.w	ip, sl, ip
 8024526:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 802452a:	fb0a fa01 	mul.w	sl, sl, r1
 802452e:	ea4f 251c 	mov.w	r5, ip, lsr #8
 8024532:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8024536:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 802453a:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802453e:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 8024542:	4465      	add	r5, ip
 8024544:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8024548:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802454c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024550:	fb09 fc0c 	mul.w	ip, r9, ip
 8024554:	0a2d      	lsrs	r5, r5, #8
 8024556:	fb09 f904 	mul.w	r9, r9, r4
 802455a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802455e:	ea4f 211c 	mov.w	r1, ip, lsr #8
 8024562:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8024566:	f509 7480 	add.w	r4, r9, #256	; 0x100
 802456a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802456e:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8024572:	437d      	muls	r5, r7
 8024574:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8024578:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 802457c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8024580:	4461      	add	r1, ip
 8024582:	fb08 f404 	mul.w	r4, r8, r4
 8024586:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802458a:	fb08 f802 	mul.w	r8, r8, r2
 802458e:	0a09      	lsrs	r1, r1, #8
 8024590:	0a22      	lsrs	r2, r4, #8
 8024592:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 8024596:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 802459a:	fb07 f70a 	mul.w	r7, r7, sl
 802459e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80245a2:	4414      	add	r4, r2
 80245a4:	f508 7280 	add.w	r2, r8, #256	; 0x100
 80245a8:	0a24      	lsrs	r4, r4, #8
 80245aa:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 80245ae:	9a03      	ldr	r2, [sp, #12]
 80245b0:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80245b4:	fb02 5503 	mla	r5, r2, r3, r5
 80245b8:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80245bc:	9a00      	ldr	r2, [sp, #0]
 80245be:	fb04 540e 	mla	r4, r4, lr, r5
 80245c2:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 80245c6:	1235      	asrs	r5, r6, #8
 80245c8:	fb01 4100 	mla	r1, r1, r0, r4
 80245cc:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 80245d0:	0a09      	lsrs	r1, r1, #8
 80245d2:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 80245d6:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 80245da:	fb03 7101 	mla	r1, r3, r1, r7
 80245de:	fb0e 1e08 	mla	lr, lr, r8, r1
 80245e2:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 80245e6:	fb00 e101 	mla	r1, r0, r1, lr
 80245ea:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 80245ee:	b287      	uxth	r7, r0
 80245f0:	0a09      	lsrs	r1, r1, #8
 80245f2:	437a      	muls	r2, r7
 80245f4:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 80245f8:	1c53      	adds	r3, r2, #1
 80245fa:	4321      	orrs	r1, r4
 80245fc:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8024600:	0c0a      	lsrs	r2, r1, #16
 8024602:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8024606:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 802460a:	b2c8      	uxtb	r0, r1
 802460c:	fb12 f207 	smulbb	r2, r2, r7
 8024610:	fb14 f407 	smulbb	r4, r4, r7
 8024614:	b2db      	uxtb	r3, r3
 8024616:	fb10 f007 	smulbb	r0, r0, r7
 802461a:	fb05 2503 	mla	r5, r5, r3, r2
 802461e:	10f2      	asrs	r2, r6, #3
 8024620:	00f6      	lsls	r6, r6, #3
 8024622:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8024626:	b2ad      	uxth	r5, r5
 8024628:	b2f6      	uxtb	r6, r6
 802462a:	fb02 4203 	mla	r2, r2, r3, r4
 802462e:	fb06 0303 	mla	r3, r6, r3, r0
 8024632:	b294      	uxth	r4, r2
 8024634:	b299      	uxth	r1, r3
 8024636:	1c6b      	adds	r3, r5, #1
 8024638:	1c62      	adds	r2, r4, #1
 802463a:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 802463e:	1c4b      	adds	r3, r1, #1
 8024640:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8024644:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8024648:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 802464c:	0952      	lsrs	r2, r2, #5
 802464e:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8024652:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8024656:	432b      	orrs	r3, r5
 8024658:	4313      	orrs	r3, r2
 802465a:	9a02      	ldr	r2, [sp, #8]
 802465c:	8013      	strh	r3, [r2, #0]
 802465e:	b005      	add	sp, #20
 8024660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024664:	2500      	movs	r5, #0
 8024666:	e6ef      	b.n	8024448 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3c>
 8024668:	2100      	movs	r1, #0
 802466a:	460d      	mov	r5, r1
 802466c:	e6f7      	b.n	802445e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 802466e:	2100      	movs	r1, #0
 8024670:	e6f5      	b.n	802445e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 8024672:	4631      	mov	r1, r6
 8024674:	e6f3      	b.n	802445e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 8024676:	2400      	movs	r4, #0
 8024678:	e702      	b.n	8024480 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x74>
 802467a:	2200      	movs	r2, #0
 802467c:	4614      	mov	r4, r2
 802467e:	e70b      	b.n	8024498 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 8024680:	4602      	mov	r2, r0
 8024682:	4604      	mov	r4, r0
 8024684:	e708      	b.n	8024498 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 8024686:	2200      	movs	r2, #0
 8024688:	e706      	b.n	8024498 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 802468a:	4632      	mov	r2, r6
 802468c:	e704      	b.n	8024498 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>

0802468e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802468e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024692:	b09d      	sub	sp, #116	; 0x74
 8024694:	9219      	str	r2, [sp, #100]	; 0x64
 8024696:	9307      	str	r3, [sp, #28]
 8024698:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 802469a:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
 802469e:	901b      	str	r0, [sp, #108]	; 0x6c
 80246a0:	931a      	str	r3, [sp, #104]	; 0x68
 80246a2:	6850      	ldr	r0, [r2, #4]
 80246a4:	9117      	str	r1, [sp, #92]	; 0x5c
 80246a6:	6812      	ldr	r2, [r2, #0]
 80246a8:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 80246ac:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	; 0x9c
 80246b0:	fb00 1303 	mla	r3, r0, r3, r1
 80246b4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80246b8:	930a      	str	r3, [sp, #40]	; 0x28
 80246ba:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80246bc:	681b      	ldr	r3, [r3, #0]
 80246be:	9310      	str	r3, [sp, #64]	; 0x40
 80246c0:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 80246c4:	930b      	str	r3, [sp, #44]	; 0x2c
 80246c6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80246c8:	2b00      	cmp	r3, #0
 80246ca:	dc03      	bgt.n	80246d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 80246cc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80246ce:	2b00      	cmp	r3, #0
 80246d0:	f340 8375 	ble.w	8024dbe <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 80246d4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80246d6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80246da:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80246de:	1e48      	subs	r0, r1, #1
 80246e0:	1e57      	subs	r7, r2, #1
 80246e2:	9b07      	ldr	r3, [sp, #28]
 80246e4:	2b00      	cmp	r3, #0
 80246e6:	f340 818e 	ble.w	8024a06 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
 80246ea:	ea5f 4c24 	movs.w	ip, r4, asr #16
 80246ee:	ea4f 4326 	mov.w	r3, r6, asr #16
 80246f2:	d406      	bmi.n	8024702 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80246f4:	4584      	cmp	ip, r0
 80246f6:	da04      	bge.n	8024702 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80246f8:	2b00      	cmp	r3, #0
 80246fa:	db02      	blt.n	8024702 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80246fc:	42bb      	cmp	r3, r7
 80246fe:	f2c0 8183 	blt.w	8024a08 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8024702:	f11c 0c01 	adds.w	ip, ip, #1
 8024706:	f100 8173 	bmi.w	80249f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 802470a:	4561      	cmp	r1, ip
 802470c:	f2c0 8170 	blt.w	80249f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8024710:	3301      	adds	r3, #1
 8024712:	f100 816d 	bmi.w	80249f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8024716:	429a      	cmp	r2, r3
 8024718:	f2c0 816a 	blt.w	80249f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 802471c:	9b07      	ldr	r3, [sp, #28]
 802471e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8024720:	9318      	str	r3, [sp, #96]	; 0x60
 8024722:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8024724:	2b00      	cmp	r3, #0
 8024726:	f340 818c 	ble.w	8024a42 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 802472a:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 802472c:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8024730:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8024732:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8024736:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 802473a:	1422      	asrs	r2, r4, #16
 802473c:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8024740:	689b      	ldr	r3, [r3, #8]
 8024742:	f100 81cd 	bmi.w	8024ae0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8024746:	f103 38ff 	add.w	r8, r3, #4294967295
 802474a:	4542      	cmp	r2, r8
 802474c:	f280 81c8 	bge.w	8024ae0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8024750:	f1bc 0f00 	cmp.w	ip, #0
 8024754:	f2c0 81c4 	blt.w	8024ae0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8024758:	f10e 38ff 	add.w	r8, lr, #4294967295
 802475c:	45c4      	cmp	ip, r8
 802475e:	f280 81bf 	bge.w	8024ae0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8024762:	b21b      	sxth	r3, r3
 8024764:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8024766:	fb0c 2203 	mla	r2, ip, r3, r2
 802476a:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 802476e:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8024772:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8024776:	2800      	cmp	r0, #0
 8024778:	f000 81a9 	beq.w	8024ace <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x440>
 802477c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8024780:	950c      	str	r5, [sp, #48]	; 0x30
 8024782:	0e2d      	lsrs	r5, r5, #24
 8024784:	9513      	str	r5, [sp, #76]	; 0x4c
 8024786:	b181      	cbz	r1, 80247aa <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8024788:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 802478c:	3b01      	subs	r3, #1
 802478e:	009b      	lsls	r3, r3, #2
 8024790:	3304      	adds	r3, #4
 8024792:	eb08 0c03 	add.w	ip, r8, r3
 8024796:	f858 3003 	ldr.w	r3, [r8, r3]
 802479a:	9308      	str	r3, [sp, #32]
 802479c:	0e1b      	lsrs	r3, r3, #24
 802479e:	9311      	str	r3, [sp, #68]	; 0x44
 80247a0:	f8dc 3004 	ldr.w	r3, [ip, #4]
 80247a4:	930d      	str	r3, [sp, #52]	; 0x34
 80247a6:	0e1b      	lsrs	r3, r3, #24
 80247a8:	9314      	str	r3, [sp, #80]	; 0x50
 80247aa:	b280      	uxth	r0, r0
 80247ac:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80247ae:	b289      	uxth	r1, r1
 80247b0:	fb00 f901 	mul.w	r9, r0, r1
 80247b4:	0100      	lsls	r0, r0, #4
 80247b6:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80247ba:	eba0 0809 	sub.w	r8, r0, r9
 80247be:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 80247c2:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80247c4:	b289      	uxth	r1, r1
 80247c6:	fa1f f888 	uxth.w	r8, r8
 80247ca:	1a5b      	subs	r3, r3, r1
 80247cc:	fb08 f000 	mul.w	r0, r8, r0
 80247d0:	b29b      	uxth	r3, r3
 80247d2:	fb03 000e 	mla	r0, r3, lr, r0
 80247d6:	fb01 0005 	mla	r0, r1, r5, r0
 80247da:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80247dc:	fb09 0005 	mla	r0, r9, r5, r0
 80247e0:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80247e4:	2800      	cmp	r0, #0
 80247e6:	f000 80fa 	beq.w	80249de <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 80247ea:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80247ee:	d01b      	beq.n	8024828 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 80247f0:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 80247f4:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80247f8:	fb0e fa0a 	mul.w	sl, lr, sl
 80247fc:	fb0e fe02 	mul.w	lr, lr, r2
 8024800:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8024804:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8024808:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 802480c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8024810:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8024814:	4452      	add	r2, sl
 8024816:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802481a:	0a12      	lsrs	r2, r2, #8
 802481c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8024820:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8024824:	ea42 020c 	orr.w	r2, r2, ip
 8024828:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802482a:	2dff      	cmp	r5, #255	; 0xff
 802482c:	d021      	beq.n	8024872 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 802482e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8024830:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8024834:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8024836:	fb05 fb0b 	mul.w	fp, r5, fp
 802483a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802483c:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8024840:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8024842:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8024846:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802484a:	fb05 fa0a 	mul.w	sl, r5, sl
 802484e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024852:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8024856:	44de      	add	lr, fp
 8024858:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802485c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024860:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024864:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024868:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802486c:	ea4e 050a 	orr.w	r5, lr, sl
 8024870:	950c      	str	r5, [sp, #48]	; 0x30
 8024872:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8024874:	2dff      	cmp	r5, #255	; 0xff
 8024876:	d021      	beq.n	80248bc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 8024878:	9d08      	ldr	r5, [sp, #32]
 802487a:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 802487e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8024880:	fb05 fb0b 	mul.w	fp, r5, fp
 8024884:	9d08      	ldr	r5, [sp, #32]
 8024886:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802488a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802488c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8024890:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8024894:	fb05 fa0a 	mul.w	sl, r5, sl
 8024898:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802489c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80248a0:	44de      	add	lr, fp
 80248a2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80248a6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80248aa:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80248ae:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80248b2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80248b6:	ea4e 050a 	orr.w	r5, lr, sl
 80248ba:	9508      	str	r5, [sp, #32]
 80248bc:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80248be:	2dff      	cmp	r5, #255	; 0xff
 80248c0:	d021      	beq.n	8024906 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 80248c2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80248c4:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 80248c8:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80248ca:	fb05 fb0b 	mul.w	fp, r5, fp
 80248ce:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80248d0:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80248d4:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80248d6:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80248da:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80248de:	fb05 fa0a 	mul.w	sl, r5, sl
 80248e2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80248e6:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80248ea:	44de      	add	lr, fp
 80248ec:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80248f0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80248f4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80248f8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80248fc:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024900:	ea4e 050a 	orr.w	r5, lr, sl
 8024904:	950d      	str	r5, [sp, #52]	; 0x34
 8024906:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8024908:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 802490c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8024910:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8024914:	9d08      	ldr	r5, [sp, #32]
 8024916:	fb08 fc0c 	mul.w	ip, r8, ip
 802491a:	fb03 cc0e 	mla	ip, r3, lr, ip
 802491e:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8024922:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8024924:	fb01 cc0e 	mla	ip, r1, lr, ip
 8024928:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 802492c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802492e:	fb09 cc0e 	mla	ip, r9, lr, ip
 8024932:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8024936:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8024938:	fb08 f80e 	mul.w	r8, r8, lr
 802493c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024940:	fb03 8202 	mla	r2, r3, r2, r8
 8024944:	9b08      	ldr	r3, [sp, #32]
 8024946:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802494a:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 802494e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024950:	fb01 220a 	mla	r2, r1, sl, r2
 8024954:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 8024958:	883b      	ldrh	r3, [r7, #0]
 802495a:	fb09 2901 	mla	r9, r9, r1, r2
 802495e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8024960:	1219      	asrs	r1, r3, #8
 8024962:	4342      	muls	r2, r0
 8024964:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8024968:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 802496c:	1c50      	adds	r0, r2, #1
 802496e:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8024972:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8024976:	ea4c 0c09 	orr.w	ip, ip, r9
 802497a:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 802497e:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8024982:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 8024986:	fa5f fc8c 	uxtb.w	ip, ip
 802498a:	fb12 f205 	smulbb	r2, r2, r5
 802498e:	b2c0      	uxtb	r0, r0
 8024990:	fb1c fc05 	smulbb	ip, ip, r5
 8024994:	fb01 2100 	mla	r1, r1, r0, r2
 8024998:	10da      	asrs	r2, r3, #3
 802499a:	fb1e fe05 	smulbb	lr, lr, r5
 802499e:	00db      	lsls	r3, r3, #3
 80249a0:	b289      	uxth	r1, r1
 80249a2:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80249a6:	b2db      	uxtb	r3, r3
 80249a8:	fb02 e200 	mla	r2, r2, r0, lr
 80249ac:	fb03 c300 	mla	r3, r3, r0, ip
 80249b0:	b292      	uxth	r2, r2
 80249b2:	fa1f fc83 	uxth.w	ip, r3
 80249b6:	1c4b      	adds	r3, r1, #1
 80249b8:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 80249bc:	f10c 0301 	add.w	r3, ip, #1
 80249c0:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 80249c4:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 80249c8:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80249cc:	430b      	orrs	r3, r1
 80249ce:	1c51      	adds	r1, r2, #1
 80249d0:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80249d4:	0952      	lsrs	r2, r2, #5
 80249d6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80249da:	4313      	orrs	r3, r2
 80249dc:	803b      	strh	r3, [r7, #0]
 80249de:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80249e0:	3702      	adds	r7, #2
 80249e2:	441c      	add	r4, r3
 80249e4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80249e6:	441e      	add	r6, r3
 80249e8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80249ea:	3b01      	subs	r3, #1
 80249ec:	9318      	str	r3, [sp, #96]	; 0x60
 80249ee:	e698      	b.n	8024722 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80249f0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80249f2:	441c      	add	r4, r3
 80249f4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80249f6:	441e      	add	r6, r3
 80249f8:	9b07      	ldr	r3, [sp, #28]
 80249fa:	3b01      	subs	r3, #1
 80249fc:	9307      	str	r3, [sp, #28]
 80249fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024a00:	3302      	adds	r3, #2
 8024a02:	930a      	str	r3, [sp, #40]	; 0x28
 8024a04:	e66d      	b.n	80246e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8024a06:	d023      	beq.n	8024a50 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 8024a08:	9b07      	ldr	r3, [sp, #28]
 8024a0a:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8024a0c:	3b01      	subs	r3, #1
 8024a0e:	fb00 4003 	mla	r0, r0, r3, r4
 8024a12:	1400      	asrs	r0, r0, #16
 8024a14:	f53f ae82 	bmi.w	802471c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8024a18:	3901      	subs	r1, #1
 8024a1a:	4288      	cmp	r0, r1
 8024a1c:	f6bf ae7e 	bge.w	802471c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8024a20:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8024a22:	fb01 6303 	mla	r3, r1, r3, r6
 8024a26:	141b      	asrs	r3, r3, #16
 8024a28:	f53f ae78 	bmi.w	802471c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8024a2c:	3a01      	subs	r2, #1
 8024a2e:	4293      	cmp	r3, r2
 8024a30:	f6bf ae74 	bge.w	802471c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8024a34:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8024a38:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8024a3c:	f1bb 0f00 	cmp.w	fp, #0
 8024a40:	dc6c      	bgt.n	8024b1c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 8024a42:	9b07      	ldr	r3, [sp, #28]
 8024a44:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8024a48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024a4a:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8024a4e:	930a      	str	r3, [sp, #40]	; 0x28
 8024a50:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8024a52:	2b00      	cmp	r3, #0
 8024a54:	f340 81b3 	ble.w	8024dbe <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 8024a58:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8024a5c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8024a5e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8024a62:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8024a66:	eef0 6a62 	vmov.f32	s13, s5
 8024a6a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8024a6e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8024a72:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024a76:	ee16 4a90 	vmov	r4, s13
 8024a7a:	eef0 6a43 	vmov.f32	s13, s6
 8024a7e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024a82:	ee16 6a90 	vmov	r6, s13
 8024a86:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8024a8a:	ee61 7a27 	vmul.f32	s15, s2, s15
 8024a8e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8024a92:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8024a96:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8024a9a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8024a9e:	ee12 2a90 	vmov	r2, s5
 8024aa2:	eef0 2a47 	vmov.f32	s5, s14
 8024aa6:	fb92 f3f3 	sdiv	r3, r2, r3
 8024aaa:	ee13 2a10 	vmov	r2, s6
 8024aae:	9329      	str	r3, [sp, #164]	; 0xa4
 8024ab0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8024ab2:	eeb0 3a67 	vmov.f32	s6, s15
 8024ab6:	fb92 f3f3 	sdiv	r3, r2, r3
 8024aba:	932a      	str	r3, [sp, #168]	; 0xa8
 8024abc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8024abe:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8024ac0:	3b01      	subs	r3, #1
 8024ac2:	9317      	str	r3, [sp, #92]	; 0x5c
 8024ac4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8024ac6:	bf08      	it	eq
 8024ac8:	4613      	moveq	r3, r2
 8024aca:	9307      	str	r3, [sp, #28]
 8024acc:	e5fb      	b.n	80246c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8024ace:	2900      	cmp	r1, #0
 8024ad0:	f43f ae6b 	beq.w	80247aa <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8024ad4:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8024ad8:	9308      	str	r3, [sp, #32]
 8024ada:	0e1b      	lsrs	r3, r3, #24
 8024adc:	9311      	str	r3, [sp, #68]	; 0x44
 8024ade:	e664      	b.n	80247aa <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8024ae0:	f112 0801 	adds.w	r8, r2, #1
 8024ae4:	f53f af7b 	bmi.w	80249de <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8024ae8:	4543      	cmp	r3, r8
 8024aea:	f6ff af78 	blt.w	80249de <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8024aee:	f11c 0801 	adds.w	r8, ip, #1
 8024af2:	f53f af74 	bmi.w	80249de <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8024af6:	45c6      	cmp	lr, r8
 8024af8:	f6ff af71 	blt.w	80249de <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8024afc:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8024afe:	b21b      	sxth	r3, r3
 8024b00:	9201      	str	r2, [sp, #4]
 8024b02:	fa0f f28e 	sxth.w	r2, lr
 8024b06:	e9cd 1504 	strd	r1, r5, [sp, #16]
 8024b0a:	e9cd c002 	strd	ip, r0, [sp, #8]
 8024b0e:	9200      	str	r2, [sp, #0]
 8024b10:	4639      	mov	r1, r7
 8024b12:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8024b14:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8024b16:	f7ff fc79 	bl	802440c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>
 8024b1a:	e760      	b.n	80249de <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8024b1c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8024b1e:	1427      	asrs	r7, r4, #16
 8024b20:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8024b22:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8024b26:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024b2a:	1433      	asrs	r3, r6, #16
 8024b2c:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8024b30:	fb01 7303 	mla	r3, r1, r3, r7
 8024b34:	eb05 0783 	add.w	r7, r5, r3, lsl #2
 8024b38:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8024b3c:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8024b40:	2a00      	cmp	r2, #0
 8024b42:	f000 8133 	beq.w	8024dac <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x71e>
 8024b46:	687d      	ldr	r5, [r7, #4]
 8024b48:	950e      	str	r5, [sp, #56]	; 0x38
 8024b4a:	0e2d      	lsrs	r5, r5, #24
 8024b4c:	9515      	str	r5, [sp, #84]	; 0x54
 8024b4e:	b178      	cbz	r0, 8024b70 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 8024b50:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8024b54:	3901      	subs	r1, #1
 8024b56:	0089      	lsls	r1, r1, #2
 8024b58:	3104      	adds	r1, #4
 8024b5a:	eb07 0e01 	add.w	lr, r7, r1
 8024b5e:	5879      	ldr	r1, [r7, r1]
 8024b60:	9109      	str	r1, [sp, #36]	; 0x24
 8024b62:	0e09      	lsrs	r1, r1, #24
 8024b64:	9112      	str	r1, [sp, #72]	; 0x48
 8024b66:	f8de 1004 	ldr.w	r1, [lr, #4]
 8024b6a:	910f      	str	r1, [sp, #60]	; 0x3c
 8024b6c:	0e09      	lsrs	r1, r1, #24
 8024b6e:	9116      	str	r1, [sp, #88]	; 0x58
 8024b70:	b292      	uxth	r2, r2
 8024b72:	9915      	ldr	r1, [sp, #84]	; 0x54
 8024b74:	b280      	uxth	r0, r0
 8024b76:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8024b78:	fb02 f800 	mul.w	r8, r2, r0
 8024b7c:	0112      	lsls	r2, r2, #4
 8024b7e:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8024b82:	eba2 0e08 	sub.w	lr, r2, r8
 8024b86:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8024b8a:	b280      	uxth	r0, r0
 8024b8c:	fa1f fe8e 	uxth.w	lr, lr
 8024b90:	1a12      	subs	r2, r2, r0
 8024b92:	fb0e f101 	mul.w	r1, lr, r1
 8024b96:	b292      	uxth	r2, r2
 8024b98:	fb02 110c 	mla	r1, r2, ip, r1
 8024b9c:	fb00 1105 	mla	r1, r0, r5, r1
 8024ba0:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8024ba2:	fb08 1105 	mla	r1, r8, r5, r1
 8024ba6:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8024baa:	2900      	cmp	r1, #0
 8024bac:	f000 80f5 	beq.w	8024d9a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70c>
 8024bb0:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8024bb4:	d019      	beq.n	8024bea <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55c>
 8024bb6:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8024bba:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024bbe:	fb0c fa0a 	mul.w	sl, ip, sl
 8024bc2:	fb0c fc03 	mul.w	ip, ip, r3
 8024bc6:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8024bca:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8024bce:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8024bd2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024bd6:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8024bda:	4453      	add	r3, sl
 8024bdc:	0a3f      	lsrs	r7, r7, #8
 8024bde:	0a1b      	lsrs	r3, r3, #8
 8024be0:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8024be4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024be8:	433b      	orrs	r3, r7
 8024bea:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8024bec:	2dff      	cmp	r5, #255	; 0xff
 8024bee:	d020      	beq.n	8024c32 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a4>
 8024bf0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8024bf2:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8024bf6:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8024bf8:	436f      	muls	r7, r5
 8024bfa:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8024bfc:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8024c00:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8024c04:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8024c06:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8024c0a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024c0e:	fb05 fa0a 	mul.w	sl, r5, sl
 8024c12:	44bc      	add	ip, r7
 8024c14:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8024c18:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024c1c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8024c20:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024c24:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024c28:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024c2c:	ea4c 050a 	orr.w	r5, ip, sl
 8024c30:	950e      	str	r5, [sp, #56]	; 0x38
 8024c32:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8024c34:	2dff      	cmp	r5, #255	; 0xff
 8024c36:	d020      	beq.n	8024c7a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ec>
 8024c38:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8024c3a:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8024c3e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8024c40:	436f      	muls	r7, r5
 8024c42:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8024c44:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8024c48:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8024c4c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8024c4e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8024c52:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024c56:	fb05 fa0a 	mul.w	sl, r5, sl
 8024c5a:	44bc      	add	ip, r7
 8024c5c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8024c60:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024c64:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8024c68:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024c6c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024c70:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024c74:	ea4c 050a 	orr.w	r5, ip, sl
 8024c78:	9509      	str	r5, [sp, #36]	; 0x24
 8024c7a:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8024c7c:	2dff      	cmp	r5, #255	; 0xff
 8024c7e:	d020      	beq.n	8024cc2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x634>
 8024c80:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8024c82:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8024c86:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8024c88:	436f      	muls	r7, r5
 8024c8a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8024c8c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8024c90:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8024c94:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8024c96:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8024c9a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024c9e:	fb05 fa0a 	mul.w	sl, r5, sl
 8024ca2:	44bc      	add	ip, r7
 8024ca4:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8024ca8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024cac:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8024cb0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024cb4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024cb8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024cbc:	ea4c 050a 	orr.w	r5, ip, sl
 8024cc0:	950f      	str	r5, [sp, #60]	; 0x3c
 8024cc2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8024cc4:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8024cc8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024ccc:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8024cd0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8024cd2:	fb0e f707 	mul.w	r7, lr, r7
 8024cd6:	fb02 770c 	mla	r7, r2, ip, r7
 8024cda:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8024cde:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8024ce0:	fb00 770c 	mla	r7, r0, ip, r7
 8024ce4:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8024ce8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8024cea:	fb08 770c 	mla	r7, r8, ip, r7
 8024cee:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8024cf2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8024cf4:	fb0e fe0c 	mul.w	lr, lr, ip
 8024cf8:	0a3f      	lsrs	r7, r7, #8
 8024cfa:	fb02 e303 	mla	r3, r2, r3, lr
 8024cfe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8024d00:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8024d04:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8024d08:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8024d0a:	fb00 330a 	mla	r3, r0, sl, r3
 8024d0e:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8024d12:	f8b9 0000 	ldrh.w	r0, [r9]
 8024d16:	fb08 3c0c 	mla	ip, r8, ip, r3
 8024d1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024d1c:	1202      	asrs	r2, r0, #8
 8024d1e:	4359      	muls	r1, r3
 8024d20:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024d24:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8024d28:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8024d2c:	1c4b      	adds	r3, r1, #1
 8024d2e:	ea47 070c 	orr.w	r7, r7, ip
 8024d32:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8024d36:	0c3b      	lsrs	r3, r7, #16
 8024d38:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8024d3c:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 8024d40:	b2ff      	uxtb	r7, r7
 8024d42:	fb13 f305 	smulbb	r3, r3, r5
 8024d46:	b2c9      	uxtb	r1, r1
 8024d48:	fb17 f705 	smulbb	r7, r7, r5
 8024d4c:	fb02 3201 	mla	r2, r2, r1, r3
 8024d50:	10c3      	asrs	r3, r0, #3
 8024d52:	fb1c fc05 	smulbb	ip, ip, r5
 8024d56:	00c0      	lsls	r0, r0, #3
 8024d58:	b292      	uxth	r2, r2
 8024d5a:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8024d5e:	b2c0      	uxtb	r0, r0
 8024d60:	fb03 c301 	mla	r3, r3, r1, ip
 8024d64:	fb00 7001 	mla	r0, r0, r1, r7
 8024d68:	1c51      	adds	r1, r2, #1
 8024d6a:	b29b      	uxth	r3, r3
 8024d6c:	b280      	uxth	r0, r0
 8024d6e:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8024d72:	f100 0c01 	add.w	ip, r0, #1
 8024d76:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 8024d7a:	eb0c 2c10 	add.w	ip, ip, r0, lsr #8
 8024d7e:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8024d82:	ea4c 0202 	orr.w	r2, ip, r2
 8024d86:	f103 0c01 	add.w	ip, r3, #1
 8024d8a:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8024d8e:	095b      	lsrs	r3, r3, #5
 8024d90:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8024d94:	431a      	orrs	r2, r3
 8024d96:	f8a9 2000 	strh.w	r2, [r9]
 8024d9a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8024d9c:	f109 0902 	add.w	r9, r9, #2
 8024da0:	f10b 3bff 	add.w	fp, fp, #4294967295
 8024da4:	441c      	add	r4, r3
 8024da6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8024da8:	441e      	add	r6, r3
 8024daa:	e647      	b.n	8024a3c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8024dac:	2800      	cmp	r0, #0
 8024dae:	f43f aedf 	beq.w	8024b70 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 8024db2:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 8024db6:	9109      	str	r1, [sp, #36]	; 0x24
 8024db8:	0e09      	lsrs	r1, r1, #24
 8024dba:	9112      	str	r1, [sp, #72]	; 0x48
 8024dbc:	e6d8      	b.n	8024b70 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 8024dbe:	b01d      	add	sp, #116	; 0x74
 8024dc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08024dc4 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>:
 8024dc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024dc8:	b085      	sub	sp, #20
 8024dca:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	; 0x3c
 8024dce:	9102      	str	r1, [sp, #8]
 8024dd0:	2c00      	cmp	r4, #0
 8024dd2:	fb04 7103 	mla	r1, r4, r3, r7
 8024dd6:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
 8024dda:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 8024dde:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
 8024de2:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 8024de6:	f2c0 810c 	blt.w	8025002 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
 8024dea:	45a6      	cmp	lr, r4
 8024dec:	f340 8109 	ble.w	8025002 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
 8024df0:	2f00      	cmp	r7, #0
 8024df2:	f2c0 8104 	blt.w	8024ffe <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
 8024df6:	42bb      	cmp	r3, r7
 8024df8:	f340 8101 	ble.w	8024ffe <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
 8024dfc:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 8024e00:	1c7a      	adds	r2, r7, #1
 8024e02:	f100 8101 	bmi.w	8025008 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
 8024e06:	4293      	cmp	r3, r2
 8024e08:	f340 80fe 	ble.w	8025008 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
 8024e0c:	2e00      	cmp	r6, #0
 8024e0e:	f000 80fd 	beq.w	802500c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x248>
 8024e12:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8024e16:	3401      	adds	r4, #1
 8024e18:	f100 80fc 	bmi.w	8025014 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
 8024e1c:	45a6      	cmp	lr, r4
 8024e1e:	f340 80f9 	ble.w	8025014 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
 8024e22:	2800      	cmp	r0, #0
 8024e24:	f000 80f9 	beq.w	802501a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x256>
 8024e28:	2f00      	cmp	r7, #0
 8024e2a:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
 8024e2e:	f2c0 80ef 	blt.w	8025010 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
 8024e32:	42bb      	cmp	r3, r7
 8024e34:	f340 80ec 	ble.w	8025010 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
 8024e38:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8024e3c:	3701      	adds	r7, #1
 8024e3e:	f100 80ef 	bmi.w	8025020 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
 8024e42:	42bb      	cmp	r3, r7
 8024e44:	f340 80ec 	ble.w	8025020 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
 8024e48:	2e00      	cmp	r6, #0
 8024e4a:	f000 80eb 	beq.w	8025024 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x260>
 8024e4e:	6852      	ldr	r2, [r2, #4]
 8024e50:	b2b6      	uxth	r6, r6
 8024e52:	b280      	uxth	r0, r0
 8024e54:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 8024e58:	fb00 fe06 	mul.w	lr, r0, r6
 8024e5c:	0136      	lsls	r6, r6, #4
 8024e5e:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 8024e62:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 8024e66:	eba6 070e 	sub.w	r7, r6, lr
 8024e6a:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 8024e6e:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8024e72:	b280      	uxth	r0, r0
 8024e74:	b2bf      	uxth	r7, r7
 8024e76:	1a1b      	subs	r3, r3, r0
 8024e78:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8024e7c:	fb07 f60a 	mul.w	r6, r7, sl
 8024e80:	b29b      	uxth	r3, r3
 8024e82:	fb0b 6603 	mla	r6, fp, r3, r6
 8024e86:	fb00 6609 	mla	r6, r0, r9, r6
 8024e8a:	fb0e 6608 	mla	r6, lr, r8, r6
 8024e8e:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8024e92:	9600      	str	r6, [sp, #0]
 8024e94:	2e00      	cmp	r6, #0
 8024e96:	f000 80af 	beq.w	8024ff8 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x234>
 8024e9a:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8024e9e:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8024ea2:	9e02      	ldr	r6, [sp, #8]
 8024ea4:	fb0b fc0c 	mul.w	ip, fp, ip
 8024ea8:	fb0b f505 	mul.w	r5, fp, r5
 8024eac:	8836      	ldrh	r6, [r6, #0]
 8024eae:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8024eb2:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8024eb6:	9501      	str	r5, [sp, #4]
 8024eb8:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8024ebc:	44dc      	add	ip, fp
 8024ebe:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024ec2:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 8024ec6:	9503      	str	r5, [sp, #12]
 8024ec8:	9d01      	ldr	r5, [sp, #4]
 8024eca:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 8024ece:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8024ed2:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 8024ed6:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8024eda:	fb0a fc0c 	mul.w	ip, sl, ip
 8024ede:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 8024ee2:	fb0a fa01 	mul.w	sl, sl, r1
 8024ee6:	ea4f 251c 	mov.w	r5, ip, lsr #8
 8024eea:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8024eee:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 8024ef2:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8024ef6:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 8024efa:	4465      	add	r5, ip
 8024efc:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8024f00:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8024f04:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024f08:	fb09 fc0c 	mul.w	ip, r9, ip
 8024f0c:	0a2d      	lsrs	r5, r5, #8
 8024f0e:	fb09 f904 	mul.w	r9, r9, r4
 8024f12:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024f16:	ea4f 211c 	mov.w	r1, ip, lsr #8
 8024f1a:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8024f1e:	f509 7480 	add.w	r4, r9, #256	; 0x100
 8024f22:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8024f26:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8024f2a:	437d      	muls	r5, r7
 8024f2c:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8024f30:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 8024f34:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8024f38:	4461      	add	r1, ip
 8024f3a:	fb08 f404 	mul.w	r4, r8, r4
 8024f3e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8024f42:	fb08 f802 	mul.w	r8, r8, r2
 8024f46:	0a09      	lsrs	r1, r1, #8
 8024f48:	0a22      	lsrs	r2, r4, #8
 8024f4a:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 8024f4e:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8024f52:	fb07 f70a 	mul.w	r7, r7, sl
 8024f56:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8024f5a:	4414      	add	r4, r2
 8024f5c:	f508 7280 	add.w	r2, r8, #256	; 0x100
 8024f60:	0a24      	lsrs	r4, r4, #8
 8024f62:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8024f66:	9a03      	ldr	r2, [sp, #12]
 8024f68:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8024f6c:	fb02 5503 	mla	r5, r2, r3, r5
 8024f70:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8024f74:	fb04 540e 	mla	r4, r4, lr, r5
 8024f78:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8024f7c:	fb01 4100 	mla	r1, r1, r0, r4
 8024f80:	0a09      	lsrs	r1, r1, #8
 8024f82:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 8024f86:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 8024f8a:	fb03 7101 	mla	r1, r3, r1, r7
 8024f8e:	9b00      	ldr	r3, [sp, #0]
 8024f90:	fb0e 1e08 	mla	lr, lr, r8, r1
 8024f94:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 8024f98:	43da      	mvns	r2, r3
 8024f9a:	1233      	asrs	r3, r6, #8
 8024f9c:	fb00 e101 	mla	r1, r0, r1, lr
 8024fa0:	10f0      	asrs	r0, r6, #3
 8024fa2:	b2d2      	uxtb	r2, r2
 8024fa4:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8024fa8:	0a09      	lsrs	r1, r1, #8
 8024faa:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8024fae:	00f6      	lsls	r6, r6, #3
 8024fb0:	4353      	muls	r3, r2
 8024fb2:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8024fb6:	4350      	muls	r0, r2
 8024fb8:	b2f6      	uxtb	r6, r6
 8024fba:	4321      	orrs	r1, r4
 8024fbc:	4356      	muls	r6, r2
 8024fbe:	1c5a      	adds	r2, r3, #1
 8024fc0:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8024fc4:	0c0b      	lsrs	r3, r1, #16
 8024fc6:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8024fca:	1c42      	adds	r2, r0, #1
 8024fcc:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8024fd0:	0a0a      	lsrs	r2, r1, #8
 8024fd2:	021b      	lsls	r3, r3, #8
 8024fd4:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8024fd8:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8024fdc:	00d2      	lsls	r2, r2, #3
 8024fde:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8024fe2:	4313      	orrs	r3, r2
 8024fe4:	1c72      	adds	r2, r6, #1
 8024fe6:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 8024fea:	eb01 2116 	add.w	r1, r1, r6, lsr #8
 8024fee:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8024ff2:	4319      	orrs	r1, r3
 8024ff4:	9b02      	ldr	r3, [sp, #8]
 8024ff6:	8019      	strh	r1, [r3, #0]
 8024ff8:	b005      	add	sp, #20
 8024ffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024ffe:	2500      	movs	r5, #0
 8025000:	e6fe      	b.n	8024e00 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3c>
 8025002:	2100      	movs	r1, #0
 8025004:	460d      	mov	r5, r1
 8025006:	e706      	b.n	8024e16 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 8025008:	2100      	movs	r1, #0
 802500a:	e704      	b.n	8024e16 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 802500c:	4631      	mov	r1, r6
 802500e:	e702      	b.n	8024e16 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 8025010:	2400      	movs	r4, #0
 8025012:	e713      	b.n	8024e3c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x78>
 8025014:	2200      	movs	r2, #0
 8025016:	4614      	mov	r4, r2
 8025018:	e71a      	b.n	8024e50 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 802501a:	4602      	mov	r2, r0
 802501c:	4604      	mov	r4, r0
 802501e:	e717      	b.n	8024e50 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8025020:	2200      	movs	r2, #0
 8025022:	e715      	b.n	8024e50 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8025024:	4632      	mov	r2, r6
 8025026:	e713      	b.n	8024e50 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>

08025028 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8025028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802502c:	b09b      	sub	sp, #108	; 0x6c
 802502e:	9218      	str	r2, [sp, #96]	; 0x60
 8025030:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8025032:	9019      	str	r0, [sp, #100]	; 0x64
 8025034:	9116      	str	r1, [sp, #88]	; 0x58
 8025036:	6850      	ldr	r0, [r2, #4]
 8025038:	9307      	str	r3, [sp, #28]
 802503a:	6812      	ldr	r2, [r2, #0]
 802503c:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8025040:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
 8025044:	fb00 1303 	mla	r3, r0, r3, r1
 8025048:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802504c:	930a      	str	r3, [sp, #40]	; 0x28
 802504e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025050:	681b      	ldr	r3, [r3, #0]
 8025052:	930f      	str	r3, [sp, #60]	; 0x3c
 8025054:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8025056:	2b00      	cmp	r3, #0
 8025058:	dc03      	bgt.n	8025062 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 802505a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802505c:	2b00      	cmp	r3, #0
 802505e:	f340 8387 	ble.w	8025770 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 8025062:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025064:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025068:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802506c:	1e48      	subs	r0, r1, #1
 802506e:	1e57      	subs	r7, r2, #1
 8025070:	9b07      	ldr	r3, [sp, #28]
 8025072:	2b00      	cmp	r3, #0
 8025074:	f340 8166 	ble.w	8025344 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 8025078:	ea5f 4c24 	movs.w	ip, r4, asr #16
 802507c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8025080:	d406      	bmi.n	8025090 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8025082:	4584      	cmp	ip, r0
 8025084:	da04      	bge.n	8025090 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8025086:	2b00      	cmp	r3, #0
 8025088:	db02      	blt.n	8025090 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 802508a:	42bb      	cmp	r3, r7
 802508c:	f2c0 815b 	blt.w	8025346 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 8025090:	f11c 0c01 	adds.w	ip, ip, #1
 8025094:	f100 814b 	bmi.w	802532e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8025098:	4561      	cmp	r1, ip
 802509a:	f2c0 8148 	blt.w	802532e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 802509e:	3301      	adds	r3, #1
 80250a0:	f100 8145 	bmi.w	802532e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 80250a4:	429a      	cmp	r2, r3
 80250a6:	f2c0 8142 	blt.w	802532e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 80250aa:	9b07      	ldr	r3, [sp, #28]
 80250ac:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80250ae:	9317      	str	r3, [sp, #92]	; 0x5c
 80250b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80250b2:	2b00      	cmp	r3, #0
 80250b4:	f340 8165 	ble.w	8025382 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 80250b8:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80250ba:	ea4f 4c26 	mov.w	ip, r6, asr #16
 80250be:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80250c0:	f3c4 3103 	ubfx	r1, r4, #12, #4
 80250c4:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 80250c8:	1422      	asrs	r2, r4, #16
 80250ca:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80250ce:	689b      	ldr	r3, [r3, #8]
 80250d0:	f100 81d5 	bmi.w	802547e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 80250d4:	f103 38ff 	add.w	r8, r3, #4294967295
 80250d8:	4542      	cmp	r2, r8
 80250da:	f280 81d0 	bge.w	802547e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 80250de:	f1bc 0f00 	cmp.w	ip, #0
 80250e2:	f2c0 81cc 	blt.w	802547e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 80250e6:	f10e 38ff 	add.w	r8, lr, #4294967295
 80250ea:	45c4      	cmp	ip, r8
 80250ec:	f280 81c7 	bge.w	802547e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 80250f0:	b21b      	sxth	r3, r3
 80250f2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80250f4:	fb0c 2203 	mla	r2, ip, r3, r2
 80250f8:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 80250fc:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8025100:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8025104:	2900      	cmp	r1, #0
 8025106:	f000 8182 	beq.w	802540e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 802510a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 802510e:	950b      	str	r5, [sp, #44]	; 0x2c
 8025110:	0e2d      	lsrs	r5, r5, #24
 8025112:	9512      	str	r5, [sp, #72]	; 0x48
 8025114:	b180      	cbz	r0, 8025138 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 8025116:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 802511a:	3b01      	subs	r3, #1
 802511c:	009b      	lsls	r3, r3, #2
 802511e:	3304      	adds	r3, #4
 8025120:	eb08 0c03 	add.w	ip, r8, r3
 8025124:	f858 3003 	ldr.w	r3, [r8, r3]
 8025128:	9308      	str	r3, [sp, #32]
 802512a:	0e1b      	lsrs	r3, r3, #24
 802512c:	9310      	str	r3, [sp, #64]	; 0x40
 802512e:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8025132:	930c      	str	r3, [sp, #48]	; 0x30
 8025134:	0e1b      	lsrs	r3, r3, #24
 8025136:	9313      	str	r3, [sp, #76]	; 0x4c
 8025138:	b289      	uxth	r1, r1
 802513a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802513c:	b280      	uxth	r0, r0
 802513e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8025140:	fb01 f900 	mul.w	r9, r1, r0
 8025144:	0109      	lsls	r1, r1, #4
 8025146:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 802514a:	eba1 0809 	sub.w	r8, r1, r9
 802514e:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 8025152:	b280      	uxth	r0, r0
 8025154:	fa1f f888 	uxth.w	r8, r8
 8025158:	1a09      	subs	r1, r1, r0
 802515a:	fb08 f303 	mul.w	r3, r8, r3
 802515e:	b289      	uxth	r1, r1
 8025160:	fb01 330e 	mla	r3, r1, lr, r3
 8025164:	fb00 3305 	mla	r3, r0, r5, r3
 8025168:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802516a:	fb09 3305 	mla	r3, r9, r5, r3
 802516e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8025172:	2b00      	cmp	r3, #0
 8025174:	f000 80d2 	beq.w	802531c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8025178:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 802517c:	d01b      	beq.n	80251b6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18e>
 802517e:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 8025182:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8025186:	fb0e fa0a 	mul.w	sl, lr, sl
 802518a:	fb0e fe02 	mul.w	lr, lr, r2
 802518e:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8025192:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8025196:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 802519a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802519e:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80251a2:	4452      	add	r2, sl
 80251a4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80251a8:	0a12      	lsrs	r2, r2, #8
 80251aa:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80251ae:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80251b2:	ea42 020c 	orr.w	r2, r2, ip
 80251b6:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80251b8:	2dff      	cmp	r5, #255	; 0xff
 80251ba:	d021      	beq.n	8025200 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 80251bc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80251be:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 80251c2:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80251c4:	fb05 fb0b 	mul.w	fp, r5, fp
 80251c8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80251ca:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80251ce:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80251d0:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80251d4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80251d8:	fb05 fa0a 	mul.w	sl, r5, sl
 80251dc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80251e0:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80251e4:	44de      	add	lr, fp
 80251e6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80251ea:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80251ee:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80251f2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80251f6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80251fa:	ea4e 050a 	orr.w	r5, lr, sl
 80251fe:	950b      	str	r5, [sp, #44]	; 0x2c
 8025200:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8025202:	2dff      	cmp	r5, #255	; 0xff
 8025204:	d021      	beq.n	802524a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x222>
 8025206:	9d08      	ldr	r5, [sp, #32]
 8025208:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 802520c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802520e:	fb05 fb0b 	mul.w	fp, r5, fp
 8025212:	9d08      	ldr	r5, [sp, #32]
 8025214:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8025218:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802521a:	fb05 fa0e 	mul.w	sl, r5, lr
 802521e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8025222:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8025226:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802522a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802522e:	44de      	add	lr, fp
 8025230:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8025234:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025238:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802523c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025240:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025244:	ea4e 050a 	orr.w	r5, lr, sl
 8025248:	9508      	str	r5, [sp, #32]
 802524a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802524c:	2dff      	cmp	r5, #255	; 0xff
 802524e:	d021      	beq.n	8025294 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 8025250:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8025252:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8025256:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8025258:	fb05 fb0b 	mul.w	fp, r5, fp
 802525c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802525e:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8025262:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8025264:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8025268:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802526c:	fb05 fa0a 	mul.w	sl, r5, sl
 8025270:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025274:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8025278:	44de      	add	lr, fp
 802527a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802527e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025282:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025286:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802528a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802528e:	ea4e 050a 	orr.w	r5, lr, sl
 8025292:	950c      	str	r5, [sp, #48]	; 0x30
 8025294:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8025296:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 802529a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802529e:	2bff      	cmp	r3, #255	; 0xff
 80252a0:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80252a4:	9d08      	ldr	r5, [sp, #32]
 80252a6:	fb08 fc0c 	mul.w	ip, r8, ip
 80252aa:	fb01 cc0e 	mla	ip, r1, lr, ip
 80252ae:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 80252b2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80252b4:	fb00 cc0e 	mla	ip, r0, lr, ip
 80252b8:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 80252bc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80252be:	fb09 cc0e 	mla	ip, r9, lr, ip
 80252c2:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 80252c6:	fb08 f80e 	mul.w	r8, r8, lr
 80252ca:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80252ce:	fb01 8202 	mla	r2, r1, r2, r8
 80252d2:	9908      	ldr	r1, [sp, #32]
 80252d4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80252d8:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 80252dc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80252de:	fb00 220a 	mla	r2, r0, sl, r2
 80252e2:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 80252e6:	fb09 2900 	mla	r9, r9, r0, r2
 80252ea:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80252ee:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80252f2:	ea4c 0c09 	orr.w	ip, ip, r9
 80252f6:	ea4f 221c 	mov.w	r2, ip, lsr #8
 80252fa:	f040 8091 	bne.w	8025420 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 80252fe:	ea4f 135c 	mov.w	r3, ip, lsr #5
 8025302:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 8025306:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802530a:	f022 0207 	bic.w	r2, r2, #7
 802530e:	431a      	orrs	r2, r3
 8025310:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 8025314:	ea4c 0c02 	orr.w	ip, ip, r2
 8025318:	f8a7 c000 	strh.w	ip, [r7]
 802531c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802531e:	3702      	adds	r7, #2
 8025320:	441c      	add	r4, r3
 8025322:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025324:	441e      	add	r6, r3
 8025326:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8025328:	3b01      	subs	r3, #1
 802532a:	9317      	str	r3, [sp, #92]	; 0x5c
 802532c:	e6c0      	b.n	80250b0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 802532e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8025330:	441c      	add	r4, r3
 8025332:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025334:	441e      	add	r6, r3
 8025336:	9b07      	ldr	r3, [sp, #28]
 8025338:	3b01      	subs	r3, #1
 802533a:	9307      	str	r3, [sp, #28]
 802533c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802533e:	3302      	adds	r3, #2
 8025340:	930a      	str	r3, [sp, #40]	; 0x28
 8025342:	e695      	b.n	8025070 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8025344:	d024      	beq.n	8025390 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8025346:	9b07      	ldr	r3, [sp, #28]
 8025348:	9827      	ldr	r0, [sp, #156]	; 0x9c
 802534a:	3b01      	subs	r3, #1
 802534c:	fb00 4003 	mla	r0, r0, r3, r4
 8025350:	1400      	asrs	r0, r0, #16
 8025352:	f53f aeaa 	bmi.w	80250aa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8025356:	3901      	subs	r1, #1
 8025358:	4288      	cmp	r0, r1
 802535a:	f6bf aea6 	bge.w	80250aa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802535e:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8025360:	fb01 6303 	mla	r3, r1, r3, r6
 8025364:	141b      	asrs	r3, r3, #16
 8025366:	f53f aea0 	bmi.w	80250aa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802536a:	3a01      	subs	r2, #1
 802536c:	4293      	cmp	r3, r2
 802536e:	f6bf ae9c 	bge.w	80250aa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8025372:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8025376:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 802537a:	f1bb 0f00 	cmp.w	fp, #0
 802537e:	f300 809a 	bgt.w	80254b6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 8025382:	9b07      	ldr	r3, [sp, #28]
 8025384:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8025388:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802538a:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 802538e:	930a      	str	r3, [sp, #40]	; 0x28
 8025390:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8025392:	2b00      	cmp	r3, #0
 8025394:	f340 81ec 	ble.w	8025770 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 8025398:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802539c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802539e:	ee30 0a04 	vadd.f32	s0, s0, s8
 80253a2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80253a6:	eef0 6a62 	vmov.f32	s13, s5
 80253aa:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80253ae:	ee31 1a05 	vadd.f32	s2, s2, s10
 80253b2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80253b6:	ee16 4a90 	vmov	r4, s13
 80253ba:	eef0 6a43 	vmov.f32	s13, s6
 80253be:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80253c2:	ee16 6a90 	vmov	r6, s13
 80253c6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80253ca:	ee61 7a27 	vmul.f32	s15, s2, s15
 80253ce:	ee77 2a62 	vsub.f32	s5, s14, s5
 80253d2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80253d6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80253da:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80253de:	ee12 2a90 	vmov	r2, s5
 80253e2:	eef0 2a47 	vmov.f32	s5, s14
 80253e6:	fb92 f3f3 	sdiv	r3, r2, r3
 80253ea:	ee13 2a10 	vmov	r2, s6
 80253ee:	9327      	str	r3, [sp, #156]	; 0x9c
 80253f0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80253f2:	eeb0 3a67 	vmov.f32	s6, s15
 80253f6:	fb92 f3f3 	sdiv	r3, r2, r3
 80253fa:	9328      	str	r3, [sp, #160]	; 0xa0
 80253fc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80253fe:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8025400:	3b01      	subs	r3, #1
 8025402:	9316      	str	r3, [sp, #88]	; 0x58
 8025404:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025406:	bf08      	it	eq
 8025408:	4613      	moveq	r3, r2
 802540a:	9307      	str	r3, [sp, #28]
 802540c:	e622      	b.n	8025054 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c>
 802540e:	2800      	cmp	r0, #0
 8025410:	f43f ae92 	beq.w	8025138 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 8025414:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8025418:	9308      	str	r3, [sp, #32]
 802541a:	0e1b      	lsrs	r3, r3, #24
 802541c:	9310      	str	r3, [sp, #64]	; 0x40
 802541e:	e68b      	b.n	8025138 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 8025420:	8839      	ldrh	r1, [r7, #0]
 8025422:	43db      	mvns	r3, r3
 8025424:	4dd4      	ldr	r5, [pc, #848]	; (8025778 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
 8025426:	ea4f 2e21 	mov.w	lr, r1, asr #8
 802542a:	fa5f f883 	uxtb.w	r8, r3
 802542e:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8025432:	10c8      	asrs	r0, r1, #3
 8025434:	00cb      	lsls	r3, r1, #3
 8025436:	fb0e fe08 	mul.w	lr, lr, r8
 802543a:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802543e:	b2db      	uxtb	r3, r3
 8025440:	f10e 0101 	add.w	r1, lr, #1
 8025444:	fb00 f008 	mul.w	r0, r0, r8
 8025448:	fb03 f308 	mul.w	r3, r3, r8
 802544c:	eb01 2e1e 	add.w	lr, r1, lr, lsr #8
 8025450:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8025454:	eb01 211e 	add.w	r1, r1, lr, lsr #8
 8025458:	f100 0e01 	add.w	lr, r0, #1
 802545c:	eb0e 2010 	add.w	r0, lr, r0, lsr #8
 8025460:	b2c9      	uxtb	r1, r1
 8025462:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8025466:	ea05 2101 	and.w	r1, r5, r1, lsl #8
 802546a:	00d2      	lsls	r2, r2, #3
 802546c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8025470:	430a      	orrs	r2, r1
 8025472:	1c59      	adds	r1, r3, #1
 8025474:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8025478:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 802547c:	e748      	b.n	8025310 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
 802547e:	f112 0801 	adds.w	r8, r2, #1
 8025482:	f53f af4b 	bmi.w	802531c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8025486:	4543      	cmp	r3, r8
 8025488:	f6ff af48 	blt.w	802531c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 802548c:	f11c 0801 	adds.w	r8, ip, #1
 8025490:	f53f af44 	bmi.w	802531c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8025494:	45c6      	cmp	lr, r8
 8025496:	f6ff af41 	blt.w	802531c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 802549a:	b21b      	sxth	r3, r3
 802549c:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 80254a0:	fa0f f28e 	sxth.w	r2, lr
 80254a4:	e9cd 1003 	strd	r1, r0, [sp, #12]
 80254a8:	9200      	str	r2, [sp, #0]
 80254aa:	4639      	mov	r1, r7
 80254ac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80254ae:	9819      	ldr	r0, [sp, #100]	; 0x64
 80254b0:	f7ff fc88 	bl	8024dc4 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>
 80254b4:	e732      	b.n	802531c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 80254b6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80254b8:	1421      	asrs	r1, r4, #16
 80254ba:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80254bc:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80254c0:	f9b3 7008 	ldrsh.w	r7, [r3, #8]
 80254c4:	1433      	asrs	r3, r6, #16
 80254c6:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80254ca:	fb07 1303 	mla	r3, r7, r3, r1
 80254ce:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80254d0:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80254d4:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80254d8:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80254dc:	2a00      	cmp	r2, #0
 80254de:	f000 8108 	beq.w	80256f2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ca>
 80254e2:	684d      	ldr	r5, [r1, #4]
 80254e4:	950d      	str	r5, [sp, #52]	; 0x34
 80254e6:	0e2d      	lsrs	r5, r5, #24
 80254e8:	9514      	str	r5, [sp, #80]	; 0x50
 80254ea:	b178      	cbz	r0, 802550c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 80254ec:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80254f0:	3f01      	subs	r7, #1
 80254f2:	00bf      	lsls	r7, r7, #2
 80254f4:	3704      	adds	r7, #4
 80254f6:	eb01 0e07 	add.w	lr, r1, r7
 80254fa:	59c9      	ldr	r1, [r1, r7]
 80254fc:	9109      	str	r1, [sp, #36]	; 0x24
 80254fe:	0e09      	lsrs	r1, r1, #24
 8025500:	9111      	str	r1, [sp, #68]	; 0x44
 8025502:	f8de 1004 	ldr.w	r1, [lr, #4]
 8025506:	910e      	str	r1, [sp, #56]	; 0x38
 8025508:	0e09      	lsrs	r1, r1, #24
 802550a:	9115      	str	r1, [sp, #84]	; 0x54
 802550c:	b292      	uxth	r2, r2
 802550e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8025510:	b280      	uxth	r0, r0
 8025512:	fb02 f900 	mul.w	r9, r2, r0
 8025516:	0112      	lsls	r2, r2, #4
 8025518:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 802551c:	eba2 0e09 	sub.w	lr, r2, r9
 8025520:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8025524:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8025526:	b280      	uxth	r0, r0
 8025528:	fa1f fe8e 	uxth.w	lr, lr
 802552c:	1a09      	subs	r1, r1, r0
 802552e:	fb0e f202 	mul.w	r2, lr, r2
 8025532:	b289      	uxth	r1, r1
 8025534:	fb01 220c 	mla	r2, r1, ip, r2
 8025538:	fb00 2205 	mla	r2, r0, r5, r2
 802553c:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802553e:	fb09 2205 	mla	r2, r9, r5, r2
 8025542:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8025546:	2a00      	cmp	r2, #0
 8025548:	f000 80ca 	beq.w	80256e0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 802554c:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8025550:	d019      	beq.n	8025586 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55e>
 8025552:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8025556:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802555a:	fb0c fa0a 	mul.w	sl, ip, sl
 802555e:	fb0c fc03 	mul.w	ip, ip, r3
 8025562:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8025566:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802556a:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 802556e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8025572:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8025576:	4453      	add	r3, sl
 8025578:	0a3f      	lsrs	r7, r7, #8
 802557a:	0a1b      	lsrs	r3, r3, #8
 802557c:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8025580:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8025584:	433b      	orrs	r3, r7
 8025586:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8025588:	2dff      	cmp	r5, #255	; 0xff
 802558a:	d020      	beq.n	80255ce <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a6>
 802558c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802558e:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8025592:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8025594:	436f      	muls	r7, r5
 8025596:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8025598:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802559c:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80255a0:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80255a2:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80255a6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80255aa:	fb05 fa0a 	mul.w	sl, r5, sl
 80255ae:	44bc      	add	ip, r7
 80255b0:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80255b4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80255b8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80255bc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80255c0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80255c4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80255c8:	ea4c 050a 	orr.w	r5, ip, sl
 80255cc:	950d      	str	r5, [sp, #52]	; 0x34
 80255ce:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80255d0:	2dff      	cmp	r5, #255	; 0xff
 80255d2:	d020      	beq.n	8025616 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ee>
 80255d4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80255d6:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 80255da:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80255dc:	436f      	muls	r7, r5
 80255de:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80255e0:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 80255e4:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80255e6:	fb05 fa0c 	mul.w	sl, r5, ip
 80255ea:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80255ee:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80255f2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80255f6:	44bc      	add	ip, r7
 80255f8:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80255fc:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8025600:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025604:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025608:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802560c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025610:	ea4c 050a 	orr.w	r5, ip, sl
 8025614:	9509      	str	r5, [sp, #36]	; 0x24
 8025616:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8025618:	2dff      	cmp	r5, #255	; 0xff
 802561a:	d020      	beq.n	802565e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x636>
 802561c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802561e:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8025622:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8025624:	436f      	muls	r7, r5
 8025626:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8025628:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802562c:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8025630:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8025632:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8025636:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802563a:	fb05 fa0a 	mul.w	sl, r5, sl
 802563e:	44bc      	add	ip, r7
 8025640:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8025644:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025648:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802564c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025650:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025654:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025658:	ea4c 050a 	orr.w	r5, ip, sl
 802565c:	950e      	str	r5, [sp, #56]	; 0x38
 802565e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8025660:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8025664:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025668:	2aff      	cmp	r2, #255	; 0xff
 802566a:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802566e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8025670:	fb0e f707 	mul.w	r7, lr, r7
 8025674:	fb01 770c 	mla	r7, r1, ip, r7
 8025678:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 802567c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802567e:	fb00 770c 	mla	r7, r0, ip, r7
 8025682:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8025686:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8025688:	fb09 770c 	mla	r7, r9, ip, r7
 802568c:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8025690:	fb0e fe0c 	mul.w	lr, lr, ip
 8025694:	ea4f 2717 	mov.w	r7, r7, lsr #8
 8025698:	fb01 e303 	mla	r3, r1, r3, lr
 802569c:	9909      	ldr	r1, [sp, #36]	; 0x24
 802569e:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80256a2:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 80256a6:	990e      	ldr	r1, [sp, #56]	; 0x38
 80256a8:	fb00 330a 	mla	r3, r0, sl, r3
 80256ac:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 80256b0:	fb09 3c0c 	mla	ip, r9, ip, r3
 80256b4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80256b8:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80256bc:	ea47 070c 	orr.w	r7, r7, ip
 80256c0:	ea4f 2317 	mov.w	r3, r7, lsr #8
 80256c4:	d11e      	bne.n	8025704 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
 80256c6:	097a      	lsrs	r2, r7, #5
 80256c8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80256cc:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 80256d0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80256d4:	f023 0307 	bic.w	r3, r3, #7
 80256d8:	4313      	orrs	r3, r2
 80256da:	431f      	orrs	r7, r3
 80256dc:	f8a8 7000 	strh.w	r7, [r8]
 80256e0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80256e2:	f108 0802 	add.w	r8, r8, #2
 80256e6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80256ea:	441c      	add	r4, r3
 80256ec:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80256ee:	441e      	add	r6, r3
 80256f0:	e643      	b.n	802537a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 80256f2:	2800      	cmp	r0, #0
 80256f4:	f43f af0a 	beq.w	802550c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 80256f8:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 80256fc:	9109      	str	r1, [sp, #36]	; 0x24
 80256fe:	0e09      	lsrs	r1, r1, #24
 8025700:	9111      	str	r1, [sp, #68]	; 0x44
 8025702:	e703      	b.n	802550c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8025704:	f8b8 1000 	ldrh.w	r1, [r8]
 8025708:	43d2      	mvns	r2, r2
 802570a:	ea4f 2c21 	mov.w	ip, r1, asr #8
 802570e:	fa5f fe82 	uxtb.w	lr, r2
 8025712:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8025716:	10c8      	asrs	r0, r1, #3
 8025718:	00ca      	lsls	r2, r1, #3
 802571a:	fb0c fc0e 	mul.w	ip, ip, lr
 802571e:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8025722:	b2d2      	uxtb	r2, r2
 8025724:	f10c 0101 	add.w	r1, ip, #1
 8025728:	fb00 f00e 	mul.w	r0, r0, lr
 802572c:	fb02 f20e 	mul.w	r2, r2, lr
 8025730:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8025734:	0c39      	lsrs	r1, r7, #16
 8025736:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 802573a:	490f      	ldr	r1, [pc, #60]	; (8025778 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
 802573c:	fa5f fc8c 	uxtb.w	ip, ip
 8025740:	ea01 2c0c 	and.w	ip, r1, ip, lsl #8
 8025744:	1c41      	adds	r1, r0, #1
 8025746:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 802574a:	1c51      	adds	r1, r2, #1
 802574c:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8025750:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8025754:	00c0      	lsls	r0, r0, #3
 8025756:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 802575a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802575e:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 8025762:	ea4c 0c00 	orr.w	ip, ip, r0
 8025766:	ea47 0c0c 	orr.w	ip, r7, ip
 802576a:	f8a8 c000 	strh.w	ip, [r8]
 802576e:	e7b7      	b.n	80256e0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 8025770:	b01b      	add	sp, #108	; 0x6c
 8025772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025776:	bf00      	nop
 8025778:	fffff800 	.word	0xfffff800

0802577c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>:
 802577c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8025780:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	; 0x28
 8025784:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 8025788:	2d00      	cmp	r5, #0
 802578a:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 802578e:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 8025792:	fb05 0e03 	mla	lr, r5, r3, r0
 8025796:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 802579a:	f2c0 808c 	blt.w	80258b6 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
 802579e:	45a9      	cmp	r9, r5
 80257a0:	f340 8089 	ble.w	80258b6 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
 80257a4:	2800      	cmp	r0, #0
 80257a6:	f2c0 8084 	blt.w	80258b2 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
 80257aa:	4580      	cmp	r8, r0
 80257ac:	f340 8081 	ble.w	80258b2 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
 80257b0:	ea4f 045e 	mov.w	r4, lr, lsr #1
 80257b4:	f01e 0f01 	tst.w	lr, #1
 80257b8:	5d16      	ldrb	r6, [r2, r4]
 80257ba:	bf0c      	ite	eq
 80257bc:	f006 060f 	andeq.w	r6, r6, #15
 80257c0:	1136      	asrne	r6, r6, #4
 80257c2:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 80257c6:	b2f6      	uxtb	r6, r6
 80257c8:	1c44      	adds	r4, r0, #1
 80257ca:	d477      	bmi.n	80258bc <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
 80257cc:	45a0      	cmp	r8, r4
 80257ce:	dd75      	ble.n	80258bc <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
 80257d0:	2f00      	cmp	r7, #0
 80257d2:	d075      	beq.n	80258c0 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x144>
 80257d4:	f10e 0a01 	add.w	sl, lr, #1
 80257d8:	ea4f 045a 	mov.w	r4, sl, lsr #1
 80257dc:	f01a 0f01 	tst.w	sl, #1
 80257e0:	5d14      	ldrb	r4, [r2, r4]
 80257e2:	bf0c      	ite	eq
 80257e4:	f004 040f 	andeq.w	r4, r4, #15
 80257e8:	1124      	asrne	r4, r4, #4
 80257ea:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 80257ee:	b2e4      	uxtb	r4, r4
 80257f0:	3501      	adds	r5, #1
 80257f2:	d469      	bmi.n	80258c8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
 80257f4:	45a9      	cmp	r9, r5
 80257f6:	dd67      	ble.n	80258c8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
 80257f8:	f1bc 0f00 	cmp.w	ip, #0
 80257fc:	d067      	beq.n	80258ce <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x152>
 80257fe:	2800      	cmp	r0, #0
 8025800:	db60      	blt.n	80258c4 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
 8025802:	4580      	cmp	r8, r0
 8025804:	dd5e      	ble.n	80258c4 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
 8025806:	eb03 090e 	add.w	r9, r3, lr
 802580a:	ea4f 0559 	mov.w	r5, r9, lsr #1
 802580e:	f019 0f01 	tst.w	r9, #1
 8025812:	5d55      	ldrb	r5, [r2, r5]
 8025814:	bf0c      	ite	eq
 8025816:	f005 050f 	andeq.w	r5, r5, #15
 802581a:	112d      	asrne	r5, r5, #4
 802581c:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8025820:	b2ed      	uxtb	r5, r5
 8025822:	3001      	adds	r0, #1
 8025824:	d456      	bmi.n	80258d4 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
 8025826:	4580      	cmp	r8, r0
 8025828:	dd54      	ble.n	80258d4 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
 802582a:	2f00      	cmp	r7, #0
 802582c:	d054      	beq.n	80258d8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x15c>
 802582e:	3301      	adds	r3, #1
 8025830:	449e      	add	lr, r3
 8025832:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8025836:	f01e 0f01 	tst.w	lr, #1
 802583a:	5cd0      	ldrb	r0, [r2, r3]
 802583c:	bf0c      	ite	eq
 802583e:	f000 000f 	andeq.w	r0, r0, #15
 8025842:	1100      	asrne	r0, r0, #4
 8025844:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8025848:	b2c3      	uxtb	r3, r0
 802584a:	b2ba      	uxth	r2, r7
 802584c:	fa1f fc8c 	uxth.w	ip, ip
 8025850:	fb02 f00c 	mul.w	r0, r2, ip
 8025854:	0112      	lsls	r2, r2, #4
 8025856:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 802585a:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 802585e:	1a12      	subs	r2, r2, r0
 8025860:	fa1f fc8c 	uxth.w	ip, ip
 8025864:	b292      	uxth	r2, r2
 8025866:	eba7 070c 	sub.w	r7, r7, ip
 802586a:	4362      	muls	r2, r4
 802586c:	b2bf      	uxth	r7, r7
 802586e:	fb06 2207 	mla	r2, r6, r7, r2
 8025872:	fb0c 2505 	mla	r5, ip, r5, r2
 8025876:	fb00 5303 	mla	r3, r0, r3, r5
 802587a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802587e:	b1b3      	cbz	r3, 80258ae <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
 8025880:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 8025884:	435a      	muls	r2, r3
 8025886:	1c53      	adds	r3, r2, #1
 8025888:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802588c:	4a2d      	ldr	r2, [pc, #180]	; (8025944 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1c8>)
 802588e:	121b      	asrs	r3, r3, #8
 8025890:	6812      	ldr	r2, [r2, #0]
 8025892:	2bff      	cmp	r3, #255	; 0xff
 8025894:	ea4f 2612 	mov.w	r6, r2, lsr #8
 8025898:	d120      	bne.n	80258dc <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x160>
 802589a:	0950      	lsrs	r0, r2, #5
 802589c:	4b2a      	ldr	r3, [pc, #168]	; (8025948 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1cc>)
 802589e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80258a2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80258a6:	4033      	ands	r3, r6
 80258a8:	4318      	orrs	r0, r3
 80258aa:	4302      	orrs	r2, r0
 80258ac:	800a      	strh	r2, [r1, #0]
 80258ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80258b2:	2600      	movs	r6, #0
 80258b4:	e788      	b.n	80257c8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x4c>
 80258b6:	2400      	movs	r4, #0
 80258b8:	4626      	mov	r6, r4
 80258ba:	e799      	b.n	80257f0 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 80258bc:	2400      	movs	r4, #0
 80258be:	e797      	b.n	80257f0 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 80258c0:	463c      	mov	r4, r7
 80258c2:	e795      	b.n	80257f0 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 80258c4:	2500      	movs	r5, #0
 80258c6:	e7ac      	b.n	8025822 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xa6>
 80258c8:	2300      	movs	r3, #0
 80258ca:	461d      	mov	r5, r3
 80258cc:	e7bd      	b.n	802584a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 80258ce:	4663      	mov	r3, ip
 80258d0:	4665      	mov	r5, ip
 80258d2:	e7ba      	b.n	802584a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 80258d4:	2300      	movs	r3, #0
 80258d6:	e7b8      	b.n	802584a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 80258d8:	463b      	mov	r3, r7
 80258da:	e7b6      	b.n	802584a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 80258dc:	880d      	ldrh	r5, [r1, #0]
 80258de:	b29f      	uxth	r7, r3
 80258e0:	f3c2 4007 	ubfx	r0, r2, #16, #8
 80258e4:	43db      	mvns	r3, r3
 80258e6:	122c      	asrs	r4, r5, #8
 80258e8:	fb10 f007 	smulbb	r0, r0, r7
 80258ec:	b2db      	uxtb	r3, r3
 80258ee:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 80258f2:	b2f6      	uxtb	r6, r6
 80258f4:	b2d2      	uxtb	r2, r2
 80258f6:	fb04 0403 	mla	r4, r4, r3, r0
 80258fa:	10e8      	asrs	r0, r5, #3
 80258fc:	fb12 f207 	smulbb	r2, r2, r7
 8025900:	00ed      	lsls	r5, r5, #3
 8025902:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8025906:	b2a4      	uxth	r4, r4
 8025908:	fb16 f607 	smulbb	r6, r6, r7
 802590c:	b2ed      	uxtb	r5, r5
 802590e:	fb00 6603 	mla	r6, r0, r3, r6
 8025912:	fb05 2303 	mla	r3, r5, r3, r2
 8025916:	b2b0      	uxth	r0, r6
 8025918:	b29a      	uxth	r2, r3
 802591a:	1c63      	adds	r3, r4, #1
 802591c:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8025920:	1c53      	adds	r3, r2, #1
 8025922:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8025926:	1c42      	adds	r2, r0, #1
 8025928:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 802592c:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8025930:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8025934:	0940      	lsrs	r0, r0, #5
 8025936:	4323      	orrs	r3, r4
 8025938:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802593c:	4303      	orrs	r3, r0
 802593e:	800b      	strh	r3, [r1, #0]
 8025940:	e7b5      	b.n	80258ae <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
 8025942:	bf00      	nop
 8025944:	20024430 	.word	0x20024430
 8025948:	00fff800 	.word	0x00fff800

0802594c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802594c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025950:	b097      	sub	sp, #92	; 0x5c
 8025952:	9214      	str	r2, [sp, #80]	; 0x50
 8025954:	9309      	str	r3, [sp, #36]	; 0x24
 8025956:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8025958:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 802595c:	9015      	str	r0, [sp, #84]	; 0x54
 802595e:	910d      	str	r1, [sp, #52]	; 0x34
 8025960:	6850      	ldr	r0, [r2, #4]
 8025962:	930f      	str	r3, [sp, #60]	; 0x3c
 8025964:	6812      	ldr	r2, [r2, #0]
 8025966:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 802596a:	e9dd 4621 	ldrd	r4, r6, [sp, #132]	; 0x84
 802596e:	fb00 1303 	mla	r3, r0, r3, r1
 8025972:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8025976:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025978:	689b      	ldr	r3, [r3, #8]
 802597a:	3301      	adds	r3, #1
 802597c:	f023 0301 	bic.w	r3, r3, #1
 8025980:	930a      	str	r3, [sp, #40]	; 0x28
 8025982:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025984:	681f      	ldr	r7, [r3, #0]
 8025986:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8025988:	2b00      	cmp	r3, #0
 802598a:	dc03      	bgt.n	8025994 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 802598c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802598e:	2b00      	cmp	r3, #0
 8025990:	f340 8289 	ble.w	8025ea6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55a>
 8025994:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025996:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802599a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802599e:	1e48      	subs	r0, r1, #1
 80259a0:	f102 3cff 	add.w	ip, r2, #4294967295
 80259a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80259a6:	2b00      	cmp	r3, #0
 80259a8:	f340 80c5 	ble.w	8025b36 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80259ac:	ea5f 4e24 	movs.w	lr, r4, asr #16
 80259b0:	ea4f 4326 	mov.w	r3, r6, asr #16
 80259b4:	d406      	bmi.n	80259c4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80259b6:	4586      	cmp	lr, r0
 80259b8:	da04      	bge.n	80259c4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80259ba:	2b00      	cmp	r3, #0
 80259bc:	db02      	blt.n	80259c4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80259be:	4563      	cmp	r3, ip
 80259c0:	f2c0 80ba 	blt.w	8025b38 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 80259c4:	f11e 0e01 	adds.w	lr, lr, #1
 80259c8:	f100 80ab 	bmi.w	8025b22 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 80259cc:	4571      	cmp	r1, lr
 80259ce:	f2c0 80a8 	blt.w	8025b22 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 80259d2:	3301      	adds	r3, #1
 80259d4:	f100 80a5 	bmi.w	8025b22 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 80259d8:	429a      	cmp	r2, r3
 80259da:	f2c0 80a2 	blt.w	8025b22 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 80259de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80259e0:	46c8      	mov	r8, r9
 80259e2:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
 80259e6:	930e      	str	r3, [sp, #56]	; 0x38
 80259e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80259ea:	2b00      	cmp	r3, #0
 80259ec:	f340 80c4 	ble.w	8025b78 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 80259f0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80259f2:	1430      	asrs	r0, r6, #16
 80259f4:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80259f8:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80259fc:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8025a00:	1423      	asrs	r3, r4, #16
 8025a02:	f100 814f 	bmi.w	8025ca4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8025a06:	f10c 3bff 	add.w	fp, ip, #4294967295
 8025a0a:	455b      	cmp	r3, fp
 8025a0c:	f280 814a 	bge.w	8025ca4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8025a10:	2800      	cmp	r0, #0
 8025a12:	f2c0 8147 	blt.w	8025ca4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8025a16:	f10e 3bff 	add.w	fp, lr, #4294967295
 8025a1a:	4558      	cmp	r0, fp
 8025a1c:	f280 8142 	bge.w	8025ca4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8025a20:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8025a22:	fb00 3305 	mla	r3, r0, r5, r3
 8025a26:	0858      	lsrs	r0, r3, #1
 8025a28:	07dd      	lsls	r5, r3, #31
 8025a2a:	f817 c000 	ldrb.w	ip, [r7, r0]
 8025a2e:	bf54      	ite	pl
 8025a30:	f00c 0c0f 	andpl.w	ip, ip, #15
 8025a34:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8025a38:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8025a3c:	fa5f fc8c 	uxtb.w	ip, ip
 8025a40:	2a00      	cmp	r2, #0
 8025a42:	f000 80dd 	beq.w	8025c00 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b4>
 8025a46:	1c58      	adds	r0, r3, #1
 8025a48:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8025a4c:	07c0      	lsls	r0, r0, #31
 8025a4e:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8025a52:	bf54      	ite	pl
 8025a54:	f00e 0e0f 	andpl.w	lr, lr, #15
 8025a58:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8025a5c:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8025a60:	fa5f f08e 	uxtb.w	r0, lr
 8025a64:	9010      	str	r0, [sp, #64]	; 0x40
 8025a66:	b1d9      	cbz	r1, 8025aa0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8025a68:	4453      	add	r3, sl
 8025a6a:	0858      	lsrs	r0, r3, #1
 8025a6c:	07dd      	lsls	r5, r3, #31
 8025a6e:	f103 0301 	add.w	r3, r3, #1
 8025a72:	5c38      	ldrb	r0, [r7, r0]
 8025a74:	bf54      	ite	pl
 8025a76:	f000 000f 	andpl.w	r0, r0, #15
 8025a7a:	1100      	asrmi	r0, r0, #4
 8025a7c:	07dd      	lsls	r5, r3, #31
 8025a7e:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8025a82:	b2c0      	uxtb	r0, r0
 8025a84:	900b      	str	r0, [sp, #44]	; 0x2c
 8025a86:	ea4f 0053 	mov.w	r0, r3, lsr #1
 8025a8a:	f817 e000 	ldrb.w	lr, [r7, r0]
 8025a8e:	bf54      	ite	pl
 8025a90:	f00e 030f 	andpl.w	r3, lr, #15
 8025a94:	ea4f 132e 	movmi.w	r3, lr, asr #4
 8025a98:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8025a9c:	b2db      	uxtb	r3, r3
 8025a9e:	9311      	str	r3, [sp, #68]	; 0x44
 8025aa0:	b292      	uxth	r2, r2
 8025aa2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8025aa4:	b289      	uxth	r1, r1
 8025aa6:	fb02 f301 	mul.w	r3, r2, r1
 8025aaa:	0112      	lsls	r2, r2, #4
 8025aac:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8025ab0:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 8025ab4:	1ad2      	subs	r2, r2, r3
 8025ab6:	b289      	uxth	r1, r1
 8025ab8:	b292      	uxth	r2, r2
 8025aba:	1a40      	subs	r0, r0, r1
 8025abc:	436a      	muls	r2, r5
 8025abe:	b280      	uxth	r0, r0
 8025ac0:	fb0c 2c00 	mla	ip, ip, r0, r2
 8025ac4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8025ac6:	fb01 c102 	mla	r1, r1, r2, ip
 8025aca:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8025acc:	fb03 1302 	mla	r3, r3, r2, r1
 8025ad0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8025ad4:	b1db      	cbz	r3, 8025b0e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8025ad6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8025ad8:	4353      	muls	r3, r2
 8025ada:	1c5a      	adds	r2, r3, #1
 8025adc:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8025ae0:	4ac6      	ldr	r2, [pc, #792]	; (8025dfc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 8025ae2:	121b      	asrs	r3, r3, #8
 8025ae4:	6812      	ldr	r2, [r2, #0]
 8025ae6:	2bff      	cmp	r3, #255	; 0xff
 8025ae8:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 8025aec:	f040 8099 	bne.w	8025c22 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 8025af0:	0953      	lsrs	r3, r2, #5
 8025af2:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 8025af6:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8025afa:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8025afe:	f02c 0c07 	bic.w	ip, ip, #7
 8025b02:	ea43 0c0c 	orr.w	ip, r3, ip
 8025b06:	ea4c 0202 	orr.w	r2, ip, r2
 8025b0a:	f8a8 2000 	strh.w	r2, [r8]
 8025b0e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8025b10:	f108 0802 	add.w	r8, r8, #2
 8025b14:	441c      	add	r4, r3
 8025b16:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025b18:	441e      	add	r6, r3
 8025b1a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8025b1c:	3b01      	subs	r3, #1
 8025b1e:	930e      	str	r3, [sp, #56]	; 0x38
 8025b20:	e762      	b.n	80259e8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8025b22:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8025b24:	f109 0902 	add.w	r9, r9, #2
 8025b28:	441c      	add	r4, r3
 8025b2a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025b2c:	441e      	add	r6, r3
 8025b2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025b30:	3b01      	subs	r3, #1
 8025b32:	9309      	str	r3, [sp, #36]	; 0x24
 8025b34:	e736      	b.n	80259a4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8025b36:	d024      	beq.n	8025b82 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8025b38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025b3a:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8025b3c:	3b01      	subs	r3, #1
 8025b3e:	fb00 4003 	mla	r0, r0, r3, r4
 8025b42:	1400      	asrs	r0, r0, #16
 8025b44:	f53f af4b 	bmi.w	80259de <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8025b48:	3901      	subs	r1, #1
 8025b4a:	4288      	cmp	r0, r1
 8025b4c:	f6bf af47 	bge.w	80259de <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8025b50:	9924      	ldr	r1, [sp, #144]	; 0x90
 8025b52:	fb01 6303 	mla	r3, r1, r3, r6
 8025b56:	141b      	asrs	r3, r3, #16
 8025b58:	f53f af41 	bmi.w	80259de <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8025b5c:	3a01      	subs	r2, #1
 8025b5e:	4293      	cmp	r3, r2
 8025b60:	f6bf af3d 	bge.w	80259de <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8025b64:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 8025b68:	46c8      	mov	r8, r9
 8025b6a:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8025b6e:	930e      	str	r3, [sp, #56]	; 0x38
 8025b70:	f1bb 0f00 	cmp.w	fp, #0
 8025b74:	f300 80b7 	bgt.w	8025ce6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39a>
 8025b78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025b7a:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8025b7e:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 8025b82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8025b84:	2b00      	cmp	r3, #0
 8025b86:	f340 818e 	ble.w	8025ea6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55a>
 8025b8a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8025b8e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8025b90:	ee30 0a04 	vadd.f32	s0, s0, s8
 8025b94:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8025b98:	eef0 6a62 	vmov.f32	s13, s5
 8025b9c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8025ba0:	ee31 1a05 	vadd.f32	s2, s2, s10
 8025ba4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025ba8:	ee16 4a90 	vmov	r4, s13
 8025bac:	eef0 6a43 	vmov.f32	s13, s6
 8025bb0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025bb4:	ee16 6a90 	vmov	r6, s13
 8025bb8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8025bbc:	ee61 7a27 	vmul.f32	s15, s2, s15
 8025bc0:	ee77 2a62 	vsub.f32	s5, s14, s5
 8025bc4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8025bc8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8025bcc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8025bd0:	ee12 2a90 	vmov	r2, s5
 8025bd4:	eef0 2a47 	vmov.f32	s5, s14
 8025bd8:	fb92 f3f3 	sdiv	r3, r2, r3
 8025bdc:	ee13 2a10 	vmov	r2, s6
 8025be0:	9323      	str	r3, [sp, #140]	; 0x8c
 8025be2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8025be4:	eeb0 3a67 	vmov.f32	s6, s15
 8025be8:	fb92 f3f3 	sdiv	r3, r2, r3
 8025bec:	9324      	str	r3, [sp, #144]	; 0x90
 8025bee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8025bf0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8025bf2:	3b01      	subs	r3, #1
 8025bf4:	930d      	str	r3, [sp, #52]	; 0x34
 8025bf6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8025bf8:	bf08      	it	eq
 8025bfa:	4613      	moveq	r3, r2
 8025bfc:	9309      	str	r3, [sp, #36]	; 0x24
 8025bfe:	e6c2      	b.n	8025986 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8025c00:	2900      	cmp	r1, #0
 8025c02:	f43f af4d 	beq.w	8025aa0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8025c06:	eb0a 0003 	add.w	r0, sl, r3
 8025c0a:	0843      	lsrs	r3, r0, #1
 8025c0c:	07c0      	lsls	r0, r0, #31
 8025c0e:	5cfb      	ldrb	r3, [r7, r3]
 8025c10:	bf54      	ite	pl
 8025c12:	f003 030f 	andpl.w	r3, r3, #15
 8025c16:	111b      	asrmi	r3, r3, #4
 8025c18:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8025c1c:	b2db      	uxtb	r3, r3
 8025c1e:	930b      	str	r3, [sp, #44]	; 0x2c
 8025c20:	e73e      	b.n	8025aa0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8025c22:	f8b8 e000 	ldrh.w	lr, [r8]
 8025c26:	fa1f fb83 	uxth.w	fp, r3
 8025c2a:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8025c2e:	43db      	mvns	r3, r3
 8025c30:	ea4f 202e 	mov.w	r0, lr, asr #8
 8025c34:	fb11 f10b 	smulbb	r1, r1, fp
 8025c38:	b2db      	uxtb	r3, r3
 8025c3a:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8025c3e:	fa5f fc8c 	uxtb.w	ip, ip
 8025c42:	b2d2      	uxtb	r2, r2
 8025c44:	fb00 1003 	mla	r0, r0, r3, r1
 8025c48:	ea4f 01ee 	mov.w	r1, lr, asr #3
 8025c4c:	fb1c fc0b 	smulbb	ip, ip, fp
 8025c50:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8025c54:	b280      	uxth	r0, r0
 8025c56:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8025c5a:	fb12 fb0b 	smulbb	fp, r2, fp
 8025c5e:	fa5f fe8e 	uxtb.w	lr, lr
 8025c62:	fb01 cc03 	mla	ip, r1, r3, ip
 8025c66:	fb0e bb03 	mla	fp, lr, r3, fp
 8025c6a:	1c43      	adds	r3, r0, #1
 8025c6c:	fa1f fc8c 	uxth.w	ip, ip
 8025c70:	fa1f fb8b 	uxth.w	fp, fp
 8025c74:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8025c78:	f10c 0101 	add.w	r1, ip, #1
 8025c7c:	f400 4378 	and.w	r3, r0, #63488	; 0xf800
 8025c80:	f10b 0001 	add.w	r0, fp, #1
 8025c84:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8025c88:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8025c8c:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8025c90:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8025c94:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8025c98:	4318      	orrs	r0, r3
 8025c9a:	ea40 000c 	orr.w	r0, r0, ip
 8025c9e:	f8a8 0000 	strh.w	r0, [r8]
 8025ca2:	e734      	b.n	8025b0e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8025ca4:	f113 0b01 	adds.w	fp, r3, #1
 8025ca8:	f53f af31 	bmi.w	8025b0e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8025cac:	45dc      	cmp	ip, fp
 8025cae:	f6ff af2e 	blt.w	8025b0e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8025cb2:	f110 0b01 	adds.w	fp, r0, #1
 8025cb6:	f53f af2a 	bmi.w	8025b0e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8025cba:	45de      	cmp	lr, fp
 8025cbc:	f6ff af27 	blt.w	8025b0e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8025cc0:	9302      	str	r3, [sp, #8]
 8025cc2:	fa0f f38e 	sxth.w	r3, lr
 8025cc6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8025cc8:	9301      	str	r3, [sp, #4]
 8025cca:	fa0f f38c 	sxth.w	r3, ip
 8025cce:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8025cd2:	e9cd 1505 	strd	r1, r5, [sp, #20]
 8025cd6:	9300      	str	r3, [sp, #0]
 8025cd8:	463a      	mov	r2, r7
 8025cda:	4653      	mov	r3, sl
 8025cdc:	4641      	mov	r1, r8
 8025cde:	9815      	ldr	r0, [sp, #84]	; 0x54
 8025ce0:	f7ff fd4c 	bl	802577c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>
 8025ce4:	e713      	b.n	8025b0e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8025ce6:	1422      	asrs	r2, r4, #16
 8025ce8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8025cea:	1433      	asrs	r3, r6, #16
 8025cec:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8025cf0:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8025cf4:	fb05 2303 	mla	r3, r5, r3, r2
 8025cf8:	085a      	lsrs	r2, r3, #1
 8025cfa:	07dd      	lsls	r5, r3, #31
 8025cfc:	5cba      	ldrb	r2, [r7, r2]
 8025cfe:	bf54      	ite	pl
 8025d00:	f002 020f 	andpl.w	r2, r2, #15
 8025d04:	1112      	asrmi	r2, r2, #4
 8025d06:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8025d0a:	b2d2      	uxtb	r2, r2
 8025d0c:	2900      	cmp	r1, #0
 8025d0e:	d077      	beq.n	8025e00 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8025d10:	f103 0e01 	add.w	lr, r3, #1
 8025d14:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8025d18:	f01e 0f01 	tst.w	lr, #1
 8025d1c:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8025d20:	bf0c      	ite	eq
 8025d22:	f00c 0c0f 	andeq.w	ip, ip, #15
 8025d26:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8025d2a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8025d2e:	fa5f f58c 	uxtb.w	r5, ip
 8025d32:	9512      	str	r5, [sp, #72]	; 0x48
 8025d34:	b308      	cbz	r0, 8025d7a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 8025d36:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8025d38:	442b      	add	r3, r5
 8025d3a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8025d3e:	07dd      	lsls	r5, r3, #31
 8025d40:	f103 0301 	add.w	r3, r3, #1
 8025d44:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8025d48:	bf54      	ite	pl
 8025d4a:	f00c 0c0f 	andpl.w	ip, ip, #15
 8025d4e:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8025d52:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8025d56:	fa5f f58c 	uxtb.w	r5, ip
 8025d5a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8025d5e:	950c      	str	r5, [sp, #48]	; 0x30
 8025d60:	07dd      	lsls	r5, r3, #31
 8025d62:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8025d66:	bf54      	ite	pl
 8025d68:	f00c 0c0f 	andpl.w	ip, ip, #15
 8025d6c:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8025d70:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8025d74:	fa5f f38c 	uxtb.w	r3, ip
 8025d78:	9313      	str	r3, [sp, #76]	; 0x4c
 8025d7a:	b289      	uxth	r1, r1
 8025d7c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8025d7e:	b280      	uxth	r0, r0
 8025d80:	fb01 f300 	mul.w	r3, r1, r0
 8025d84:	0109      	lsls	r1, r1, #4
 8025d86:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 8025d8a:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 8025d8e:	1ac9      	subs	r1, r1, r3
 8025d90:	b280      	uxth	r0, r0
 8025d92:	b289      	uxth	r1, r1
 8025d94:	ebac 0c00 	sub.w	ip, ip, r0
 8025d98:	4369      	muls	r1, r5
 8025d9a:	fa1f fc8c 	uxth.w	ip, ip
 8025d9e:	fb02 120c 	mla	r2, r2, ip, r1
 8025da2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8025da4:	fb00 2001 	mla	r0, r0, r1, r2
 8025da8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8025daa:	fb03 0302 	mla	r3, r3, r2, r0
 8025dae:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8025db2:	b1d3      	cbz	r3, 8025dea <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8025db4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8025db6:	4353      	muls	r3, r2
 8025db8:	1c5a      	adds	r2, r3, #1
 8025dba:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8025dbe:	4a0f      	ldr	r2, [pc, #60]	; (8025dfc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 8025dc0:	121b      	asrs	r3, r3, #8
 8025dc2:	6812      	ldr	r2, [r2, #0]
 8025dc4:	2bff      	cmp	r3, #255	; 0xff
 8025dc6:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 8025dca:	d12d      	bne.n	8025e28 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 8025dcc:	0953      	lsrs	r3, r2, #5
 8025dce:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 8025dd2:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8025dd6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8025dda:	f02c 0c07 	bic.w	ip, ip, #7
 8025dde:	ea43 0c0c 	orr.w	ip, r3, ip
 8025de2:	ea4c 0202 	orr.w	r2, ip, r2
 8025de6:	f8a8 2000 	strh.w	r2, [r8]
 8025dea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8025dec:	f108 0802 	add.w	r8, r8, #2
 8025df0:	f10b 3bff 	add.w	fp, fp, #4294967295
 8025df4:	441c      	add	r4, r3
 8025df6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025df8:	441e      	add	r6, r3
 8025dfa:	e6b9      	b.n	8025b70 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8025dfc:	20024430 	.word	0x20024430
 8025e00:	2800      	cmp	r0, #0
 8025e02:	d0ba      	beq.n	8025d7a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 8025e04:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8025e06:	442b      	add	r3, r5
 8025e08:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8025e0c:	07db      	lsls	r3, r3, #31
 8025e0e:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8025e12:	bf54      	ite	pl
 8025e14:	f00c 0c0f 	andpl.w	ip, ip, #15
 8025e18:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8025e1c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8025e20:	fa5f f38c 	uxtb.w	r3, ip
 8025e24:	930c      	str	r3, [sp, #48]	; 0x30
 8025e26:	e7a8      	b.n	8025d7a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 8025e28:	f8b8 e000 	ldrh.w	lr, [r8]
 8025e2c:	fa1f fa83 	uxth.w	sl, r3
 8025e30:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8025e34:	43db      	mvns	r3, r3
 8025e36:	ea4f 202e 	mov.w	r0, lr, asr #8
 8025e3a:	fb11 f10a 	smulbb	r1, r1, sl
 8025e3e:	b2db      	uxtb	r3, r3
 8025e40:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8025e44:	b2d2      	uxtb	r2, r2
 8025e46:	fa5f fc8c 	uxtb.w	ip, ip
 8025e4a:	fb00 1003 	mla	r0, r0, r3, r1
 8025e4e:	ea4f 01ee 	mov.w	r1, lr, asr #3
 8025e52:	fb12 f20a 	smulbb	r2, r2, sl
 8025e56:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8025e5a:	b280      	uxth	r0, r0
 8025e5c:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8025e60:	fb1c fc0a 	smulbb	ip, ip, sl
 8025e64:	fa5f fe8e 	uxtb.w	lr, lr
 8025e68:	fb0e 2203 	mla	r2, lr, r3, r2
 8025e6c:	fb01 cc03 	mla	ip, r1, r3, ip
 8025e70:	1c43      	adds	r3, r0, #1
 8025e72:	b292      	uxth	r2, r2
 8025e74:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8025e78:	1c51      	adds	r1, r2, #1
 8025e7a:	fa1f fc8c 	uxth.w	ip, ip
 8025e7e:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8025e82:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 8025e86:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 8025e8a:	4308      	orrs	r0, r1
 8025e8c:	f10c 0101 	add.w	r1, ip, #1
 8025e90:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8025e94:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8025e98:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8025e9c:	ea40 000c 	orr.w	r0, r0, ip
 8025ea0:	f8a8 0000 	strh.w	r0, [r8]
 8025ea4:	e7a1      	b.n	8025dea <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8025ea6:	b017      	add	sp, #92	; 0x5c
 8025ea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08025eac <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>:
 8025eac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8025eb0:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	; 0x28
 8025eb4:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 8025eb8:	2d00      	cmp	r5, #0
 8025eba:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8025ebe:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 8025ec2:	fb05 0e03 	mla	lr, r5, r3, r0
 8025ec6:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 8025eca:	f2c0 80b0 	blt.w	802602e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
 8025ece:	45a9      	cmp	r9, r5
 8025ed0:	f340 80ad 	ble.w	802602e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
 8025ed4:	2800      	cmp	r0, #0
 8025ed6:	f2c0 80a8 	blt.w	802602a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
 8025eda:	4580      	cmp	r8, r0
 8025edc:	f340 80a5 	ble.w	802602a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
 8025ee0:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8025ee4:	f01e 0f01 	tst.w	lr, #1
 8025ee8:	5d16      	ldrb	r6, [r2, r4]
 8025eea:	bf0c      	ite	eq
 8025eec:	f006 060f 	andeq.w	r6, r6, #15
 8025ef0:	1136      	asrne	r6, r6, #4
 8025ef2:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8025ef6:	b2f6      	uxtb	r6, r6
 8025ef8:	1c44      	adds	r4, r0, #1
 8025efa:	f100 809b 	bmi.w	8026034 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
 8025efe:	45a0      	cmp	r8, r4
 8025f00:	f340 8098 	ble.w	8026034 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
 8025f04:	2f00      	cmp	r7, #0
 8025f06:	f000 8097 	beq.w	8026038 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x18c>
 8025f0a:	f10e 0a01 	add.w	sl, lr, #1
 8025f0e:	ea4f 045a 	mov.w	r4, sl, lsr #1
 8025f12:	f01a 0f01 	tst.w	sl, #1
 8025f16:	5d14      	ldrb	r4, [r2, r4]
 8025f18:	bf0c      	ite	eq
 8025f1a:	f004 040f 	andeq.w	r4, r4, #15
 8025f1e:	1124      	asrne	r4, r4, #4
 8025f20:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8025f24:	b2e4      	uxtb	r4, r4
 8025f26:	3501      	adds	r5, #1
 8025f28:	f100 808a 	bmi.w	8026040 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
 8025f2c:	45a9      	cmp	r9, r5
 8025f2e:	f340 8087 	ble.w	8026040 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
 8025f32:	f1bc 0f00 	cmp.w	ip, #0
 8025f36:	f000 8086 	beq.w	8026046 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x19a>
 8025f3a:	2800      	cmp	r0, #0
 8025f3c:	db7e      	blt.n	802603c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
 8025f3e:	4580      	cmp	r8, r0
 8025f40:	dd7c      	ble.n	802603c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
 8025f42:	eb03 090e 	add.w	r9, r3, lr
 8025f46:	ea4f 0559 	mov.w	r5, r9, lsr #1
 8025f4a:	f019 0f01 	tst.w	r9, #1
 8025f4e:	5d55      	ldrb	r5, [r2, r5]
 8025f50:	bf0c      	ite	eq
 8025f52:	f005 050f 	andeq.w	r5, r5, #15
 8025f56:	112d      	asrne	r5, r5, #4
 8025f58:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8025f5c:	b2ed      	uxtb	r5, r5
 8025f5e:	3001      	adds	r0, #1
 8025f60:	d474      	bmi.n	802604c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 8025f62:	4580      	cmp	r8, r0
 8025f64:	dd72      	ble.n	802604c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 8025f66:	2f00      	cmp	r7, #0
 8025f68:	d072      	beq.n	8026050 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a4>
 8025f6a:	3301      	adds	r3, #1
 8025f6c:	449e      	add	lr, r3
 8025f6e:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8025f72:	f01e 0f01 	tst.w	lr, #1
 8025f76:	5cd0      	ldrb	r0, [r2, r3]
 8025f78:	bf0c      	ite	eq
 8025f7a:	f000 000f 	andeq.w	r0, r0, #15
 8025f7e:	1100      	asrne	r0, r0, #4
 8025f80:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8025f84:	b2c3      	uxtb	r3, r0
 8025f86:	b2ba      	uxth	r2, r7
 8025f88:	fa1f fc8c 	uxth.w	ip, ip
 8025f8c:	fb02 f00c 	mul.w	r0, r2, ip
 8025f90:	0112      	lsls	r2, r2, #4
 8025f92:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 8025f96:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 8025f9a:	1a12      	subs	r2, r2, r0
 8025f9c:	fa1f fc8c 	uxth.w	ip, ip
 8025fa0:	b292      	uxth	r2, r2
 8025fa2:	eba7 070c 	sub.w	r7, r7, ip
 8025fa6:	4362      	muls	r2, r4
 8025fa8:	b2bf      	uxth	r7, r7
 8025faa:	fb06 2207 	mla	r2, r6, r7, r2
 8025fae:	fb0c 2505 	mla	r5, ip, r5, r2
 8025fb2:	fb00 5303 	mla	r3, r0, r3, r5
 8025fb6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8025fba:	b3a3      	cbz	r3, 8026026 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17a>
 8025fbc:	4a25      	ldr	r2, [pc, #148]	; (8026054 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a8>)
 8025fbe:	880e      	ldrh	r6, [r1, #0]
 8025fc0:	6815      	ldr	r5, [r2, #0]
 8025fc2:	b29a      	uxth	r2, r3
 8025fc4:	1234      	asrs	r4, r6, #8
 8025fc6:	43db      	mvns	r3, r3
 8025fc8:	f3c5 4007 	ubfx	r0, r5, #16, #8
 8025fcc:	f3c5 2707 	ubfx	r7, r5, #8, #8
 8025fd0:	b2db      	uxtb	r3, r3
 8025fd2:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8025fd6:	fb10 f002 	smulbb	r0, r0, r2
 8025fda:	b2ed      	uxtb	r5, r5
 8025fdc:	fb17 f702 	smulbb	r7, r7, r2
 8025fe0:	fb04 0403 	mla	r4, r4, r3, r0
 8025fe4:	10f0      	asrs	r0, r6, #3
 8025fe6:	fb15 f202 	smulbb	r2, r5, r2
 8025fea:	00f6      	lsls	r6, r6, #3
 8025fec:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8025ff0:	b2a4      	uxth	r4, r4
 8025ff2:	b2f6      	uxtb	r6, r6
 8025ff4:	fb00 7003 	mla	r0, r0, r3, r7
 8025ff8:	fb06 2303 	mla	r3, r6, r3, r2
 8025ffc:	b280      	uxth	r0, r0
 8025ffe:	b29a      	uxth	r2, r3
 8026000:	1c63      	adds	r3, r4, #1
 8026002:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8026006:	1c53      	adds	r3, r2, #1
 8026008:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802600c:	1c42      	adds	r2, r0, #1
 802600e:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8026012:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8026016:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802601a:	0940      	lsrs	r0, r0, #5
 802601c:	4323      	orrs	r3, r4
 802601e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8026022:	4303      	orrs	r3, r0
 8026024:	800b      	strh	r3, [r1, #0]
 8026026:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802602a:	2600      	movs	r6, #0
 802602c:	e764      	b.n	8025ef8 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x4c>
 802602e:	2400      	movs	r4, #0
 8026030:	4626      	mov	r6, r4
 8026032:	e778      	b.n	8025f26 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 8026034:	2400      	movs	r4, #0
 8026036:	e776      	b.n	8025f26 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 8026038:	463c      	mov	r4, r7
 802603a:	e774      	b.n	8025f26 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 802603c:	2500      	movs	r5, #0
 802603e:	e78e      	b.n	8025f5e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xb2>
 8026040:	2300      	movs	r3, #0
 8026042:	461d      	mov	r5, r3
 8026044:	e79f      	b.n	8025f86 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8026046:	4663      	mov	r3, ip
 8026048:	4665      	mov	r5, ip
 802604a:	e79c      	b.n	8025f86 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 802604c:	2300      	movs	r3, #0
 802604e:	e79a      	b.n	8025f86 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8026050:	463b      	mov	r3, r7
 8026052:	e798      	b.n	8025f86 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8026054:	20024430 	.word	0x20024430

08026058 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8026058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802605c:	b093      	sub	sp, #76	; 0x4c
 802605e:	461d      	mov	r5, r3
 8026060:	920c      	str	r2, [sp, #48]	; 0x30
 8026062:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8026064:	9011      	str	r0, [sp, #68]	; 0x44
 8026066:	9107      	str	r1, [sp, #28]
 8026068:	6850      	ldr	r0, [r2, #4]
 802606a:	6812      	ldr	r2, [r2, #0]
 802606c:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 8026070:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 8026074:	fb00 1303 	mla	r3, r0, r3, r1
 8026078:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 802607c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802607e:	689b      	ldr	r3, [r3, #8]
 8026080:	3301      	adds	r3, #1
 8026082:	f023 0301 	bic.w	r3, r3, #1
 8026086:	9306      	str	r3, [sp, #24]
 8026088:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802608a:	681f      	ldr	r7, [r3, #0]
 802608c:	9b07      	ldr	r3, [sp, #28]
 802608e:	2b00      	cmp	r3, #0
 8026090:	dc03      	bgt.n	802609a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8026092:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8026094:	2b00      	cmp	r3, #0
 8026096:	f340 8267 	ble.w	8026568 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 802609a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802609c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80260a0:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80260a4:	1e48      	subs	r0, r1, #1
 80260a6:	f102 3cff 	add.w	ip, r2, #4294967295
 80260aa:	2d00      	cmp	r5, #0
 80260ac:	f340 80b7 	ble.w	802621e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 80260b0:	ea5f 4e24 	movs.w	lr, r4, asr #16
 80260b4:	ea4f 4326 	mov.w	r3, r6, asr #16
 80260b8:	d406      	bmi.n	80260c8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80260ba:	4586      	cmp	lr, r0
 80260bc:	da04      	bge.n	80260c8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80260be:	2b00      	cmp	r3, #0
 80260c0:	db02      	blt.n	80260c8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80260c2:	4563      	cmp	r3, ip
 80260c4:	f2c0 80ac 	blt.w	8026220 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 80260c8:	f11e 0e01 	adds.w	lr, lr, #1
 80260cc:	f100 809f 	bmi.w	802620e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 80260d0:	4571      	cmp	r1, lr
 80260d2:	f2c0 809c 	blt.w	802620e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 80260d6:	3301      	adds	r3, #1
 80260d8:	f100 8099 	bmi.w	802620e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 80260dc:	429a      	cmp	r2, r3
 80260de:	f2c0 8096 	blt.w	802620e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 80260e2:	46c8      	mov	r8, r9
 80260e4:	f9bd a018 	ldrsh.w	sl, [sp, #24]
 80260e8:	9509      	str	r5, [sp, #36]	; 0x24
 80260ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80260ec:	2b00      	cmp	r3, #0
 80260ee:	f340 80b5 	ble.w	802625c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 80260f2:	f3c4 3303 	ubfx	r3, r4, #12, #4
 80260f6:	1430      	asrs	r0, r6, #16
 80260f8:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80260fc:	9308      	str	r3, [sp, #32]
 80260fe:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8026100:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8026104:	1423      	asrs	r3, r4, #16
 8026106:	f100 813f 	bmi.w	8026388 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 802610a:	f10c 3bff 	add.w	fp, ip, #4294967295
 802610e:	455b      	cmp	r3, fp
 8026110:	f280 813a 	bge.w	8026388 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8026114:	2800      	cmp	r0, #0
 8026116:	f2c0 8137 	blt.w	8026388 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 802611a:	f10e 3bff 	add.w	fp, lr, #4294967295
 802611e:	4558      	cmp	r0, fp
 8026120:	f280 8132 	bge.w	8026388 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8026124:	9a06      	ldr	r2, [sp, #24]
 8026126:	fb00 3302 	mla	r3, r0, r2, r3
 802612a:	0858      	lsrs	r0, r3, #1
 802612c:	07da      	lsls	r2, r3, #31
 802612e:	9a08      	ldr	r2, [sp, #32]
 8026130:	f817 c000 	ldrb.w	ip, [r7, r0]
 8026134:	bf54      	ite	pl
 8026136:	f00c 0c0f 	andpl.w	ip, ip, #15
 802613a:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802613e:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8026142:	fa5f fc8c 	uxtb.w	ip, ip
 8026146:	2a00      	cmp	r2, #0
 8026148:	f000 80cc 	beq.w	80262e4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 802614c:	1c58      	adds	r0, r3, #1
 802614e:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8026152:	07c0      	lsls	r0, r0, #31
 8026154:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8026158:	bf54      	ite	pl
 802615a:	f00e 0e0f 	andpl.w	lr, lr, #15
 802615e:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8026162:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8026166:	fa5f fe8e 	uxtb.w	lr, lr
 802616a:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 802616e:	b1b9      	cbz	r1, 80261a0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8026170:	4453      	add	r3, sl
 8026172:	0858      	lsrs	r0, r3, #1
 8026174:	07da      	lsls	r2, r3, #31
 8026176:	5c38      	ldrb	r0, [r7, r0]
 8026178:	bf54      	ite	pl
 802617a:	f000 000f 	andpl.w	r0, r0, #15
 802617e:	1100      	asrmi	r0, r0, #4
 8026180:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8026184:	b2c0      	uxtb	r0, r0
 8026186:	900a      	str	r0, [sp, #40]	; 0x28
 8026188:	1c58      	adds	r0, r3, #1
 802618a:	0843      	lsrs	r3, r0, #1
 802618c:	07c2      	lsls	r2, r0, #31
 802618e:	5cfb      	ldrb	r3, [r7, r3]
 8026190:	bf54      	ite	pl
 8026192:	f003 030f 	andpl.w	r3, r3, #15
 8026196:	111b      	asrmi	r3, r3, #4
 8026198:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802619c:	b2db      	uxtb	r3, r3
 802619e:	930e      	str	r3, [sp, #56]	; 0x38
 80261a0:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80261a4:	b289      	uxth	r1, r1
 80261a6:	fb02 f301 	mul.w	r3, r2, r1
 80261aa:	0112      	lsls	r2, r2, #4
 80261ac:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 80261b0:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 80261b4:	1ad2      	subs	r2, r2, r3
 80261b6:	b289      	uxth	r1, r1
 80261b8:	b292      	uxth	r2, r2
 80261ba:	1a40      	subs	r0, r0, r1
 80261bc:	fa1f fe80 	uxth.w	lr, r0
 80261c0:	980d      	ldr	r0, [sp, #52]	; 0x34
 80261c2:	4342      	muls	r2, r0
 80261c4:	fb0c 2c0e 	mla	ip, ip, lr, r2
 80261c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80261ca:	fb01 c102 	mla	r1, r1, r2, ip
 80261ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80261d0:	fb03 1302 	mla	r3, r3, r2, r1
 80261d4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80261d8:	2bff      	cmp	r3, #255	; 0xff
 80261da:	f040 8094 	bne.w	8026306 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ae>
 80261de:	4bbf      	ldr	r3, [pc, #764]	; (80264dc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 80261e0:	681a      	ldr	r2, [r3, #0]
 80261e2:	4bbf      	ldr	r3, [pc, #764]	; (80264e0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>)
 80261e4:	0951      	lsrs	r1, r2, #5
 80261e6:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 80261ea:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80261ee:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80261f2:	430b      	orrs	r3, r1
 80261f4:	4313      	orrs	r3, r2
 80261f6:	f8a8 3000 	strh.w	r3, [r8]
 80261fa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80261fc:	f108 0802 	add.w	r8, r8, #2
 8026200:	441c      	add	r4, r3
 8026202:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8026204:	441e      	add	r6, r3
 8026206:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026208:	3b01      	subs	r3, #1
 802620a:	9309      	str	r3, [sp, #36]	; 0x24
 802620c:	e76d      	b.n	80260ea <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802620e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8026210:	3d01      	subs	r5, #1
 8026212:	f109 0902 	add.w	r9, r9, #2
 8026216:	441c      	add	r4, r3
 8026218:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802621a:	441e      	add	r6, r3
 802621c:	e745      	b.n	80260aa <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 802621e:	d021      	beq.n	8026264 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8026220:	1e6b      	subs	r3, r5, #1
 8026222:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8026224:	fb00 4003 	mla	r0, r0, r3, r4
 8026228:	1400      	asrs	r0, r0, #16
 802622a:	f53f af5a 	bmi.w	80260e2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802622e:	3901      	subs	r1, #1
 8026230:	4288      	cmp	r0, r1
 8026232:	f6bf af56 	bge.w	80260e2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8026236:	9920      	ldr	r1, [sp, #128]	; 0x80
 8026238:	fb01 6303 	mla	r3, r1, r3, r6
 802623c:	141b      	asrs	r3, r3, #16
 802623e:	f53f af50 	bmi.w	80260e2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8026242:	3a01      	subs	r2, #1
 8026244:	4293      	cmp	r3, r2
 8026246:	f6bf af4c 	bge.w	80260e2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802624a:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 802624e:	46a8      	mov	r8, r5
 8026250:	46ce      	mov	lr, r9
 8026252:	9308      	str	r3, [sp, #32]
 8026254:	f1b8 0f00 	cmp.w	r8, #0
 8026258:	f300 80b6 	bgt.w	80263c8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 802625c:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8026260:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 8026264:	9b07      	ldr	r3, [sp, #28]
 8026266:	2b00      	cmp	r3, #0
 8026268:	f340 817e 	ble.w	8026568 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 802626c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8026270:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8026272:	ee30 0a04 	vadd.f32	s0, s0, s8
 8026276:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802627a:	eef0 6a62 	vmov.f32	s13, s5
 802627e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8026282:	ee31 1a05 	vadd.f32	s2, s2, s10
 8026286:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802628a:	ee16 4a90 	vmov	r4, s13
 802628e:	eef0 6a43 	vmov.f32	s13, s6
 8026292:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026296:	ee16 6a90 	vmov	r6, s13
 802629a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802629e:	ee61 7a27 	vmul.f32	s15, s2, s15
 80262a2:	ee77 2a62 	vsub.f32	s5, s14, s5
 80262a6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80262aa:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80262ae:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80262b2:	ee12 2a90 	vmov	r2, s5
 80262b6:	eef0 2a47 	vmov.f32	s5, s14
 80262ba:	fb92 f3f3 	sdiv	r3, r2, r3
 80262be:	ee13 2a10 	vmov	r2, s6
 80262c2:	931f      	str	r3, [sp, #124]	; 0x7c
 80262c4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80262c6:	eeb0 3a67 	vmov.f32	s6, s15
 80262ca:	fb92 f3f3 	sdiv	r3, r2, r3
 80262ce:	9320      	str	r3, [sp, #128]	; 0x80
 80262d0:	9b07      	ldr	r3, [sp, #28]
 80262d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80262d4:	3b01      	subs	r3, #1
 80262d6:	9307      	str	r3, [sp, #28]
 80262d8:	bf08      	it	eq
 80262da:	4615      	moveq	r5, r2
 80262dc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80262de:	bf18      	it	ne
 80262e0:	461d      	movne	r5, r3
 80262e2:	e6d3      	b.n	802608c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 80262e4:	2900      	cmp	r1, #0
 80262e6:	f43f af5b 	beq.w	80261a0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 80262ea:	eb0a 0003 	add.w	r0, sl, r3
 80262ee:	0843      	lsrs	r3, r0, #1
 80262f0:	07c0      	lsls	r0, r0, #31
 80262f2:	5cfb      	ldrb	r3, [r7, r3]
 80262f4:	bf54      	ite	pl
 80262f6:	f003 030f 	andpl.w	r3, r3, #15
 80262fa:	111b      	asrmi	r3, r3, #4
 80262fc:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8026300:	b2db      	uxtb	r3, r3
 8026302:	930a      	str	r3, [sp, #40]	; 0x28
 8026304:	e74c      	b.n	80261a0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8026306:	2b00      	cmp	r3, #0
 8026308:	f43f af77 	beq.w	80261fa <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802630c:	4a73      	ldr	r2, [pc, #460]	; (80264dc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 802630e:	fa1f fe83 	uxth.w	lr, r3
 8026312:	f8b8 c000 	ldrh.w	ip, [r8]
 8026316:	43db      	mvns	r3, r3
 8026318:	6810      	ldr	r0, [r2, #0]
 802631a:	ea4f 212c 	mov.w	r1, ip, asr #8
 802631e:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8026322:	b2db      	uxtb	r3, r3
 8026324:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8026328:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 802632c:	fb12 f20e 	smulbb	r2, r2, lr
 8026330:	b2c0      	uxtb	r0, r0
 8026332:	fb1b fb0e 	smulbb	fp, fp, lr
 8026336:	fb01 2103 	mla	r1, r1, r3, r2
 802633a:	ea4f 02ec 	mov.w	r2, ip, asr #3
 802633e:	fb10 fe0e 	smulbb	lr, r0, lr
 8026342:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8026346:	b289      	uxth	r1, r1
 8026348:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 802634c:	fa5f fc8c 	uxtb.w	ip, ip
 8026350:	fb02 b203 	mla	r2, r2, r3, fp
 8026354:	1c48      	adds	r0, r1, #1
 8026356:	fb0c e303 	mla	r3, ip, r3, lr
 802635a:	b292      	uxth	r2, r2
 802635c:	b29b      	uxth	r3, r3
 802635e:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8026362:	f102 0b01 	add.w	fp, r2, #1
 8026366:	f401 4078 	and.w	r0, r1, #63488	; 0xf800
 802636a:	1c59      	adds	r1, r3, #1
 802636c:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 8026370:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8026374:	0952      	lsrs	r2, r2, #5
 8026376:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 802637a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802637e:	4301      	orrs	r1, r0
 8026380:	4311      	orrs	r1, r2
 8026382:	f8a8 1000 	strh.w	r1, [r8]
 8026386:	e738      	b.n	80261fa <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8026388:	f113 0b01 	adds.w	fp, r3, #1
 802638c:	f53f af35 	bmi.w	80261fa <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8026390:	45dc      	cmp	ip, fp
 8026392:	f6ff af32 	blt.w	80261fa <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8026396:	f110 0b01 	adds.w	fp, r0, #1
 802639a:	f53f af2e 	bmi.w	80261fa <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802639e:	45de      	cmp	lr, fp
 80263a0:	f6ff af2b 	blt.w	80261fa <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 80263a4:	9302      	str	r3, [sp, #8]
 80263a6:	fa0f f38e 	sxth.w	r3, lr
 80263aa:	9a08      	ldr	r2, [sp, #32]
 80263ac:	9301      	str	r3, [sp, #4]
 80263ae:	fa0f f38c 	sxth.w	r3, ip
 80263b2:	9105      	str	r1, [sp, #20]
 80263b4:	4641      	mov	r1, r8
 80263b6:	9300      	str	r3, [sp, #0]
 80263b8:	4653      	mov	r3, sl
 80263ba:	e9cd 0203 	strd	r0, r2, [sp, #12]
 80263be:	463a      	mov	r2, r7
 80263c0:	9811      	ldr	r0, [sp, #68]	; 0x44
 80263c2:	f7ff fd73 	bl	8025eac <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>
 80263c6:	e718      	b.n	80261fa <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 80263c8:	1422      	asrs	r2, r4, #16
 80263ca:	9906      	ldr	r1, [sp, #24]
 80263cc:	1433      	asrs	r3, r6, #16
 80263ce:	f3c4 3003 	ubfx	r0, r4, #12, #4
 80263d2:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 80263d6:	fb01 2303 	mla	r3, r1, r3, r2
 80263da:	085a      	lsrs	r2, r3, #1
 80263dc:	07d9      	lsls	r1, r3, #31
 80263de:	5cba      	ldrb	r2, [r7, r2]
 80263e0:	bf54      	ite	pl
 80263e2:	f002 020f 	andpl.w	r2, r2, #15
 80263e6:	1112      	asrmi	r2, r2, #4
 80263e8:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80263ec:	b2d2      	uxtb	r2, r2
 80263ee:	2800      	cmp	r0, #0
 80263f0:	d063      	beq.n	80264ba <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x462>
 80263f2:	f103 0a01 	add.w	sl, r3, #1
 80263f6:	ea4f 015a 	mov.w	r1, sl, lsr #1
 80263fa:	f01a 0f01 	tst.w	sl, #1
 80263fe:	5c79      	ldrb	r1, [r7, r1]
 8026400:	bf0c      	ite	eq
 8026402:	f001 010f 	andeq.w	r1, r1, #15
 8026406:	1109      	asrne	r1, r1, #4
 8026408:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802640c:	b2c9      	uxtb	r1, r1
 802640e:	910f      	str	r1, [sp, #60]	; 0x3c
 8026410:	f1bc 0f00 	cmp.w	ip, #0
 8026414:	d01a      	beq.n	802644c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 8026416:	9908      	ldr	r1, [sp, #32]
 8026418:	440b      	add	r3, r1
 802641a:	0859      	lsrs	r1, r3, #1
 802641c:	f013 0f01 	tst.w	r3, #1
 8026420:	f103 0301 	add.w	r3, r3, #1
 8026424:	5c79      	ldrb	r1, [r7, r1]
 8026426:	bf0c      	ite	eq
 8026428:	f001 010f 	andeq.w	r1, r1, #15
 802642c:	1109      	asrne	r1, r1, #4
 802642e:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8026432:	b2c9      	uxtb	r1, r1
 8026434:	910b      	str	r1, [sp, #44]	; 0x2c
 8026436:	0859      	lsrs	r1, r3, #1
 8026438:	07db      	lsls	r3, r3, #31
 802643a:	5c79      	ldrb	r1, [r7, r1]
 802643c:	bf54      	ite	pl
 802643e:	f001 010f 	andpl.w	r1, r1, #15
 8026442:	1109      	asrmi	r1, r1, #4
 8026444:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8026448:	b2c9      	uxtb	r1, r1
 802644a:	9110      	str	r1, [sp, #64]	; 0x40
 802644c:	b280      	uxth	r0, r0
 802644e:	fa1f fc8c 	uxth.w	ip, ip
 8026452:	fb00 f30c 	mul.w	r3, r0, ip
 8026456:	0100      	lsls	r0, r0, #4
 8026458:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 802645c:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 8026460:	1ac0      	subs	r0, r0, r3
 8026462:	fa1f fc8c 	uxth.w	ip, ip
 8026466:	b280      	uxth	r0, r0
 8026468:	eba1 010c 	sub.w	r1, r1, ip
 802646c:	fa1f fa81 	uxth.w	sl, r1
 8026470:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8026472:	4348      	muls	r0, r1
 8026474:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8026476:	fb02 020a 	mla	r2, r2, sl, r0
 802647a:	fb0c 2c01 	mla	ip, ip, r1, r2
 802647e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8026480:	fb03 c302 	mla	r3, r3, r2, ip
 8026484:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8026488:	2bff      	cmp	r3, #255	; 0xff
 802648a:	d12b      	bne.n	80264e4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 802648c:	4b13      	ldr	r3, [pc, #76]	; (80264dc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 802648e:	681a      	ldr	r2, [r3, #0]
 8026490:	4b13      	ldr	r3, [pc, #76]	; (80264e0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>)
 8026492:	0951      	lsrs	r1, r2, #5
 8026494:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 8026498:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802649c:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80264a0:	430b      	orrs	r3, r1
 80264a2:	4313      	orrs	r3, r2
 80264a4:	f8ae 3000 	strh.w	r3, [lr]
 80264a8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80264aa:	f10e 0e02 	add.w	lr, lr, #2
 80264ae:	f108 38ff 	add.w	r8, r8, #4294967295
 80264b2:	441c      	add	r4, r3
 80264b4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80264b6:	441e      	add	r6, r3
 80264b8:	e6cc      	b.n	8026254 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 80264ba:	f1bc 0f00 	cmp.w	ip, #0
 80264be:	d0c5      	beq.n	802644c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 80264c0:	9908      	ldr	r1, [sp, #32]
 80264c2:	440b      	add	r3, r1
 80264c4:	0859      	lsrs	r1, r3, #1
 80264c6:	07db      	lsls	r3, r3, #31
 80264c8:	5c79      	ldrb	r1, [r7, r1]
 80264ca:	bf54      	ite	pl
 80264cc:	f001 010f 	andpl.w	r1, r1, #15
 80264d0:	1109      	asrmi	r1, r1, #4
 80264d2:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80264d6:	b2c9      	uxtb	r1, r1
 80264d8:	910b      	str	r1, [sp, #44]	; 0x2c
 80264da:	e7b7      	b.n	802644c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 80264dc:	20024430 	.word	0x20024430
 80264e0:	fffff800 	.word	0xfffff800
 80264e4:	2b00      	cmp	r3, #0
 80264e6:	d0df      	beq.n	80264a8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x450>
 80264e8:	4a21      	ldr	r2, [pc, #132]	; (8026570 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>)
 80264ea:	fa1f fa83 	uxth.w	sl, r3
 80264ee:	f8be c000 	ldrh.w	ip, [lr]
 80264f2:	43db      	mvns	r3, r3
 80264f4:	6810      	ldr	r0, [r2, #0]
 80264f6:	ea4f 212c 	mov.w	r1, ip, asr #8
 80264fa:	f3c0 4207 	ubfx	r2, r0, #16, #8
 80264fe:	b2db      	uxtb	r3, r3
 8026500:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8026504:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 8026508:	fb12 f20a 	smulbb	r2, r2, sl
 802650c:	b2c0      	uxtb	r0, r0
 802650e:	fb1b fb0a 	smulbb	fp, fp, sl
 8026512:	fb01 2103 	mla	r1, r1, r3, r2
 8026516:	ea4f 02ec 	mov.w	r2, ip, asr #3
 802651a:	fb10 f00a 	smulbb	r0, r0, sl
 802651e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8026522:	b289      	uxth	r1, r1
 8026524:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8026528:	fa5f fc8c 	uxtb.w	ip, ip
 802652c:	fb02 b203 	mla	r2, r2, r3, fp
 8026530:	fb0c 0003 	mla	r0, ip, r3, r0
 8026534:	1c4b      	adds	r3, r1, #1
 8026536:	b292      	uxth	r2, r2
 8026538:	b280      	uxth	r0, r0
 802653a:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 802653e:	f100 0b01 	add.w	fp, r0, #1
 8026542:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 8026546:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
 802654a:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 802654e:	ea4b 0101 	orr.w	r1, fp, r1
 8026552:	f102 0b01 	add.w	fp, r2, #1
 8026556:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 802655a:	0952      	lsrs	r2, r2, #5
 802655c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8026560:	4311      	orrs	r1, r2
 8026562:	f8ae 1000 	strh.w	r1, [lr]
 8026566:	e79f      	b.n	80264a8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x450>
 8026568:	b013      	add	sp, #76	; 0x4c
 802656a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802656e:	bf00      	nop
 8026570:	20024430 	.word	0x20024430

08026574 <CRC_Lock>:
 8026574:	4a20      	ldr	r2, [pc, #128]	; (80265f8 <CRC_Lock+0x84>)
 8026576:	b530      	push	{r4, r5, lr}
 8026578:	6813      	ldr	r3, [r2, #0]
 802657a:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 802657e:	f24c 2540 	movw	r5, #49728	; 0xc240
 8026582:	f023 0301 	bic.w	r3, r3, #1
 8026586:	6013      	str	r3, [r2, #0]
 8026588:	4b1c      	ldr	r3, [pc, #112]	; (80265fc <CRC_Lock+0x88>)
 802658a:	681a      	ldr	r2, [r3, #0]
 802658c:	4022      	ands	r2, r4
 802658e:	42aa      	cmp	r2, r5
 8026590:	d005      	beq.n	802659e <CRC_Lock+0x2a>
 8026592:	681b      	ldr	r3, [r3, #0]
 8026594:	f24c 2270 	movw	r2, #49776	; 0xc270
 8026598:	4023      	ands	r3, r4
 802659a:	4293      	cmp	r3, r2
 802659c:	d124      	bne.n	80265e8 <CRC_Lock+0x74>
 802659e:	4b18      	ldr	r3, [pc, #96]	; (8026600 <CRC_Lock+0x8c>)
 80265a0:	681b      	ldr	r3, [r3, #0]
 80265a2:	bb0b      	cbnz	r3, 80265e8 <CRC_Lock+0x74>
 80265a4:	4b17      	ldr	r3, [pc, #92]	; (8026604 <CRC_Lock+0x90>)
 80265a6:	681a      	ldr	r2, [r3, #0]
 80265a8:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80265ac:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 80265b0:	d00d      	beq.n	80265ce <CRC_Lock+0x5a>
 80265b2:	681a      	ldr	r2, [r3, #0]
 80265b4:	f240 4483 	movw	r4, #1155	; 0x483
 80265b8:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80265bc:	42a2      	cmp	r2, r4
 80265be:	d006      	beq.n	80265ce <CRC_Lock+0x5a>
 80265c0:	681b      	ldr	r3, [r3, #0]
 80265c2:	f240 4285 	movw	r2, #1157	; 0x485
 80265c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80265ca:	4293      	cmp	r3, r2
 80265cc:	d10c      	bne.n	80265e8 <CRC_Lock+0x74>
 80265ce:	4b0e      	ldr	r3, [pc, #56]	; (8026608 <CRC_Lock+0x94>)
 80265d0:	2201      	movs	r2, #1
 80265d2:	601a      	str	r2, [r3, #0]
 80265d4:	681a      	ldr	r2, [r3, #0]
 80265d6:	2a00      	cmp	r2, #0
 80265d8:	d1fc      	bne.n	80265d4 <CRC_Lock+0x60>
 80265da:	4b0c      	ldr	r3, [pc, #48]	; (802660c <CRC_Lock+0x98>)
 80265dc:	6018      	str	r0, [r3, #0]
 80265de:	6818      	ldr	r0, [r3, #0]
 80265e0:	1a43      	subs	r3, r0, r1
 80265e2:	4258      	negs	r0, r3
 80265e4:	4158      	adcs	r0, r3
 80265e6:	bd30      	pop	{r4, r5, pc}
 80265e8:	4b09      	ldr	r3, [pc, #36]	; (8026610 <CRC_Lock+0x9c>)
 80265ea:	2201      	movs	r2, #1
 80265ec:	601a      	str	r2, [r3, #0]
 80265ee:	681a      	ldr	r2, [r3, #0]
 80265f0:	2a00      	cmp	r2, #0
 80265f2:	d1fc      	bne.n	80265ee <CRC_Lock+0x7a>
 80265f4:	4b07      	ldr	r3, [pc, #28]	; (8026614 <CRC_Lock+0xa0>)
 80265f6:	e7f1      	b.n	80265dc <CRC_Lock+0x68>
 80265f8:	e0002000 	.word	0xe0002000
 80265fc:	e000ed00 	.word	0xe000ed00
 8026600:	e0042000 	.word	0xe0042000
 8026604:	5c001000 	.word	0x5c001000
 8026608:	58024c08 	.word	0x58024c08
 802660c:	58024c00 	.word	0x58024c00
 8026610:	40023008 	.word	0x40023008
 8026614:	40023000 	.word	0x40023000

08026618 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8026618:	6101      	str	r1, [r0, #16]
 802661a:	4770      	bx	lr

0802661c <_ZN8touchgfx8Gestures4tickEv>:
 802661c:	7b83      	ldrb	r3, [r0, #14]
 802661e:	b14b      	cbz	r3, 8026634 <_ZN8touchgfx8Gestures4tickEv+0x18>
 8026620:	8903      	ldrh	r3, [r0, #8]
 8026622:	3301      	adds	r3, #1
 8026624:	b29b      	uxth	r3, r3
 8026626:	2b07      	cmp	r3, #7
 8026628:	8103      	strh	r3, [r0, #8]
 802662a:	bf81      	itttt	hi
 802662c:	2300      	movhi	r3, #0
 802662e:	8143      	strhhi	r3, [r0, #10]
 8026630:	8183      	strhhi	r3, [r0, #12]
 8026632:	7383      	strbhi	r3, [r0, #14]
 8026634:	4770      	bx	lr
	...

08026638 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8026638:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 802663c:	4698      	mov	r8, r3
 802663e:	8883      	ldrh	r3, [r0, #4]
 8026640:	4604      	mov	r4, r0
 8026642:	4617      	mov	r7, r2
 8026644:	f8ad 3006 	strh.w	r3, [sp, #6]
 8026648:	eba8 0303 	sub.w	r3, r8, r3
 802664c:	4a19      	ldr	r2, [pc, #100]	; (80266b4 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 802664e:	460e      	mov	r6, r1
 8026650:	b21b      	sxth	r3, r3
 8026652:	88c1      	ldrh	r1, [r0, #6]
 8026654:	9200      	str	r2, [sp, #0]
 8026656:	2000      	movs	r0, #0
 8026658:	2b00      	cmp	r3, #0
 802665a:	8aa2      	ldrh	r2, [r4, #20]
 802665c:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 8026660:	bfb8      	it	lt
 8026662:	425b      	neglt	r3, r3
 8026664:	f88d 0004 	strb.w	r0, [sp, #4]
 8026668:	f8ad 1008 	strh.w	r1, [sp, #8]
 802666c:	b21b      	sxth	r3, r3
 802666e:	f8ad 800a 	strh.w	r8, [sp, #10]
 8026672:	f8ad 500c 	strh.w	r5, [sp, #12]
 8026676:	4293      	cmp	r3, r2
 8026678:	dc07      	bgt.n	802668a <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 802667a:	1a69      	subs	r1, r5, r1
 802667c:	b209      	sxth	r1, r1
 802667e:	2900      	cmp	r1, #0
 8026680:	bfb8      	it	lt
 8026682:	4249      	neglt	r1, r1
 8026684:	b209      	sxth	r1, r1
 8026686:	428a      	cmp	r2, r1
 8026688:	da10      	bge.n	80266ac <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 802668a:	6920      	ldr	r0, [r4, #16]
 802668c:	4669      	mov	r1, sp
 802668e:	eba8 0606 	sub.w	r6, r8, r6
 8026692:	1bef      	subs	r7, r5, r7
 8026694:	6803      	ldr	r3, [r0, #0]
 8026696:	685b      	ldr	r3, [r3, #4]
 8026698:	4798      	blx	r3
 802669a:	2300      	movs	r3, #0
 802669c:	2001      	movs	r0, #1
 802669e:	8166      	strh	r6, [r4, #10]
 80266a0:	8123      	strh	r3, [r4, #8]
 80266a2:	81a7      	strh	r7, [r4, #12]
 80266a4:	f8a4 8004 	strh.w	r8, [r4, #4]
 80266a8:	80e5      	strh	r5, [r4, #6]
 80266aa:	73a0      	strb	r0, [r4, #14]
 80266ac:	b004      	add	sp, #16
 80266ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80266b2:	bf00      	nop
 80266b4:	0802b240 	.word	0x0802b240

080266b8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 80266b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80266ba:	461e      	mov	r6, r3
 80266bc:	1e4b      	subs	r3, r1, #1
 80266be:	b085      	sub	sp, #20
 80266c0:	4604      	mov	r4, r0
 80266c2:	2b01      	cmp	r3, #1
 80266c4:	460d      	mov	r5, r1
 80266c6:	4617      	mov	r7, r2
 80266c8:	d84b      	bhi.n	8026762 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 80266ca:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80266ce:	1cd3      	adds	r3, r2, #3
 80266d0:	b29b      	uxth	r3, r3
 80266d2:	2b06      	cmp	r3, #6
 80266d4:	d916      	bls.n	8026704 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 80266d6:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 8026778 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 80266da:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80266de:	f8cd c004 	str.w	ip, [sp, #4]
 80266e2:	f04f 0c00 	mov.w	ip, #0
 80266e6:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80266ea:	6900      	ldr	r0, [r0, #16]
 80266ec:	f8ad 100c 	strh.w	r1, [sp, #12]
 80266f0:	a901      	add	r1, sp, #4
 80266f2:	f88d c008 	strb.w	ip, [sp, #8]
 80266f6:	f8ad 200a 	strh.w	r2, [sp, #10]
 80266fa:	f8ad 300e 	strh.w	r3, [sp, #14]
 80266fe:	6803      	ldr	r3, [r0, #0]
 8026700:	689b      	ldr	r3, [r3, #8]
 8026702:	4798      	blx	r3
 8026704:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8026708:	1cd3      	adds	r3, r2, #3
 802670a:	b29b      	uxth	r3, r3
 802670c:	2b06      	cmp	r3, #6
 802670e:	d916      	bls.n	802673e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8026710:	f8df c064 	ldr.w	ip, [pc, #100]	; 8026778 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8026714:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8026718:	f8cd c004 	str.w	ip, [sp, #4]
 802671c:	f04f 0c01 	mov.w	ip, #1
 8026720:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8026724:	6920      	ldr	r0, [r4, #16]
 8026726:	f8ad 100c 	strh.w	r1, [sp, #12]
 802672a:	a901      	add	r1, sp, #4
 802672c:	f88d c008 	strb.w	ip, [sp, #8]
 8026730:	f8ad 200a 	strh.w	r2, [sp, #10]
 8026734:	f8ad 300e 	strh.w	r3, [sp, #14]
 8026738:	6803      	ldr	r3, [r0, #0]
 802673a:	689b      	ldr	r3, [r3, #8]
 802673c:	4798      	blx	r3
 802673e:	4b0d      	ldr	r3, [pc, #52]	; (8026774 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 8026740:	a901      	add	r1, sp, #4
 8026742:	6920      	ldr	r0, [r4, #16]
 8026744:	9301      	str	r3, [sp, #4]
 8026746:	2300      	movs	r3, #0
 8026748:	f88d 5008 	strb.w	r5, [sp, #8]
 802674c:	f8ad 700a 	strh.w	r7, [sp, #10]
 8026750:	f8ad 600c 	strh.w	r6, [sp, #12]
 8026754:	f8ad 300e 	strh.w	r3, [sp, #14]
 8026758:	6803      	ldr	r3, [r0, #0]
 802675a:	681b      	ldr	r3, [r3, #0]
 802675c:	4798      	blx	r3
 802675e:	b005      	add	sp, #20
 8026760:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8026762:	2900      	cmp	r1, #0
 8026764:	d1eb      	bne.n	802673e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8026766:	80a2      	strh	r2, [r4, #4]
 8026768:	80c6      	strh	r6, [r0, #6]
 802676a:	60a1      	str	r1, [r4, #8]
 802676c:	81a1      	strh	r1, [r4, #12]
 802676e:	73a1      	strb	r1, [r4, #14]
 8026770:	e7e5      	b.n	802673e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8026772:	bf00      	nop
 8026774:	0802b22c 	.word	0x0802b22c
 8026778:	0802b254 	.word	0x0802b254

0802677c <__aeabi_atexit>:
 802677c:	460b      	mov	r3, r1
 802677e:	4601      	mov	r1, r0
 8026780:	4618      	mov	r0, r3
 8026782:	f000 b853 	b.w	802682c <__cxa_atexit>

08026786 <_ZdlPvj>:
 8026786:	f000 b812 	b.w	80267ae <_ZdlPv>

0802678a <__cxa_guard_acquire>:
 802678a:	6803      	ldr	r3, [r0, #0]
 802678c:	07db      	lsls	r3, r3, #31
 802678e:	d406      	bmi.n	802679e <__cxa_guard_acquire+0x14>
 8026790:	7843      	ldrb	r3, [r0, #1]
 8026792:	b103      	cbz	r3, 8026796 <__cxa_guard_acquire+0xc>
 8026794:	deff      	udf	#255	; 0xff
 8026796:	2301      	movs	r3, #1
 8026798:	7043      	strb	r3, [r0, #1]
 802679a:	4618      	mov	r0, r3
 802679c:	4770      	bx	lr
 802679e:	2000      	movs	r0, #0
 80267a0:	4770      	bx	lr

080267a2 <__cxa_guard_release>:
 80267a2:	2301      	movs	r3, #1
 80267a4:	6003      	str	r3, [r0, #0]
 80267a6:	4770      	bx	lr

080267a8 <__cxa_pure_virtual>:
 80267a8:	b508      	push	{r3, lr}
 80267aa:	f000 f80f 	bl	80267cc <_ZSt9terminatev>

080267ae <_ZdlPv>:
 80267ae:	f000 b88f 	b.w	80268d0 <free>

080267b2 <_ZN10__cxxabiv111__terminateEPFvvE>:
 80267b2:	b508      	push	{r3, lr}
 80267b4:	4780      	blx	r0
 80267b6:	f000 f80e 	bl	80267d6 <abort>
	...

080267bc <_ZSt13get_terminatev>:
 80267bc:	4b02      	ldr	r3, [pc, #8]	; (80267c8 <_ZSt13get_terminatev+0xc>)
 80267be:	6818      	ldr	r0, [r3, #0]
 80267c0:	f3bf 8f5b 	dmb	ish
 80267c4:	4770      	bx	lr
 80267c6:	bf00      	nop
 80267c8:	200000a4 	.word	0x200000a4

080267cc <_ZSt9terminatev>:
 80267cc:	b508      	push	{r3, lr}
 80267ce:	f7ff fff5 	bl	80267bc <_ZSt13get_terminatev>
 80267d2:	f7ff ffee 	bl	80267b2 <_ZN10__cxxabiv111__terminateEPFvvE>

080267d6 <abort>:
 80267d6:	b508      	push	{r3, lr}
 80267d8:	2006      	movs	r0, #6
 80267da:	f000 fc9d 	bl	8027118 <raise>
 80267de:	2001      	movs	r0, #1
 80267e0:	f7db fddc 	bl	800239c <_exit>

080267e4 <__assert_func>:
 80267e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80267e6:	4614      	mov	r4, r2
 80267e8:	461a      	mov	r2, r3
 80267ea:	4b09      	ldr	r3, [pc, #36]	; (8026810 <__assert_func+0x2c>)
 80267ec:	681b      	ldr	r3, [r3, #0]
 80267ee:	4605      	mov	r5, r0
 80267f0:	68d8      	ldr	r0, [r3, #12]
 80267f2:	b14c      	cbz	r4, 8026808 <__assert_func+0x24>
 80267f4:	4b07      	ldr	r3, [pc, #28]	; (8026814 <__assert_func+0x30>)
 80267f6:	9100      	str	r1, [sp, #0]
 80267f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80267fc:	4906      	ldr	r1, [pc, #24]	; (8026818 <__assert_func+0x34>)
 80267fe:	462b      	mov	r3, r5
 8026800:	f000 f828 	bl	8026854 <fiprintf>
 8026804:	f7ff ffe7 	bl	80267d6 <abort>
 8026808:	4b04      	ldr	r3, [pc, #16]	; (802681c <__assert_func+0x38>)
 802680a:	461c      	mov	r4, r3
 802680c:	e7f3      	b.n	80267f6 <__assert_func+0x12>
 802680e:	bf00      	nop
 8026810:	200000a8 	.word	0x200000a8
 8026814:	0802b51c 	.word	0x0802b51c
 8026818:	0802b529 	.word	0x0802b529
 802681c:	0802b557 	.word	0x0802b557

08026820 <atexit>:
 8026820:	2300      	movs	r3, #0
 8026822:	4601      	mov	r1, r0
 8026824:	461a      	mov	r2, r3
 8026826:	4618      	mov	r0, r3
 8026828:	f000 bd66 	b.w	80272f8 <__register_exitproc>

0802682c <__cxa_atexit>:
 802682c:	b510      	push	{r4, lr}
 802682e:	4c05      	ldr	r4, [pc, #20]	; (8026844 <__cxa_atexit+0x18>)
 8026830:	4613      	mov	r3, r2
 8026832:	b12c      	cbz	r4, 8026840 <__cxa_atexit+0x14>
 8026834:	460a      	mov	r2, r1
 8026836:	4601      	mov	r1, r0
 8026838:	2002      	movs	r0, #2
 802683a:	f000 fd5d 	bl	80272f8 <__register_exitproc>
 802683e:	bd10      	pop	{r4, pc}
 8026840:	4620      	mov	r0, r4
 8026842:	e7fc      	b.n	802683e <__cxa_atexit+0x12>
 8026844:	080272f9 	.word	0x080272f9

08026848 <__errno>:
 8026848:	4b01      	ldr	r3, [pc, #4]	; (8026850 <__errno+0x8>)
 802684a:	6818      	ldr	r0, [r3, #0]
 802684c:	4770      	bx	lr
 802684e:	bf00      	nop
 8026850:	200000a8 	.word	0x200000a8

08026854 <fiprintf>:
 8026854:	b40e      	push	{r1, r2, r3}
 8026856:	b503      	push	{r0, r1, lr}
 8026858:	4601      	mov	r1, r0
 802685a:	ab03      	add	r3, sp, #12
 802685c:	4805      	ldr	r0, [pc, #20]	; (8026874 <fiprintf+0x20>)
 802685e:	f853 2b04 	ldr.w	r2, [r3], #4
 8026862:	6800      	ldr	r0, [r0, #0]
 8026864:	9301      	str	r3, [sp, #4]
 8026866:	f000 f95b 	bl	8026b20 <_vfiprintf_r>
 802686a:	b002      	add	sp, #8
 802686c:	f85d eb04 	ldr.w	lr, [sp], #4
 8026870:	b003      	add	sp, #12
 8026872:	4770      	bx	lr
 8026874:	200000a8 	.word	0x200000a8

08026878 <__libc_init_array>:
 8026878:	b570      	push	{r4, r5, r6, lr}
 802687a:	4d0d      	ldr	r5, [pc, #52]	; (80268b0 <__libc_init_array+0x38>)
 802687c:	4c0d      	ldr	r4, [pc, #52]	; (80268b4 <__libc_init_array+0x3c>)
 802687e:	1b64      	subs	r4, r4, r5
 8026880:	10a4      	asrs	r4, r4, #2
 8026882:	2600      	movs	r6, #0
 8026884:	42a6      	cmp	r6, r4
 8026886:	d109      	bne.n	802689c <__libc_init_array+0x24>
 8026888:	4d0b      	ldr	r5, [pc, #44]	; (80268b8 <__libc_init_array+0x40>)
 802688a:	4c0c      	ldr	r4, [pc, #48]	; (80268bc <__libc_init_array+0x44>)
 802688c:	f001 f86e 	bl	802796c <_init>
 8026890:	1b64      	subs	r4, r4, r5
 8026892:	10a4      	asrs	r4, r4, #2
 8026894:	2600      	movs	r6, #0
 8026896:	42a6      	cmp	r6, r4
 8026898:	d105      	bne.n	80268a6 <__libc_init_array+0x2e>
 802689a:	bd70      	pop	{r4, r5, r6, pc}
 802689c:	f855 3b04 	ldr.w	r3, [r5], #4
 80268a0:	4798      	blx	r3
 80268a2:	3601      	adds	r6, #1
 80268a4:	e7ee      	b.n	8026884 <__libc_init_array+0xc>
 80268a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80268aa:	4798      	blx	r3
 80268ac:	3601      	adds	r6, #1
 80268ae:	e7f2      	b.n	8026896 <__libc_init_array+0x1e>
 80268b0:	0802b628 	.word	0x0802b628
 80268b4:	0802b628 	.word	0x0802b628
 80268b8:	0802b628 	.word	0x0802b628
 80268bc:	0802b640 	.word	0x0802b640

080268c0 <malloc>:
 80268c0:	4b02      	ldr	r3, [pc, #8]	; (80268cc <malloc+0xc>)
 80268c2:	4601      	mov	r1, r0
 80268c4:	6818      	ldr	r0, [r3, #0]
 80268c6:	f000 b88d 	b.w	80269e4 <_malloc_r>
 80268ca:	bf00      	nop
 80268cc:	200000a8 	.word	0x200000a8

080268d0 <free>:
 80268d0:	4b02      	ldr	r3, [pc, #8]	; (80268dc <free+0xc>)
 80268d2:	4601      	mov	r1, r0
 80268d4:	6818      	ldr	r0, [r3, #0]
 80268d6:	f000 b819 	b.w	802690c <_free_r>
 80268da:	bf00      	nop
 80268dc:	200000a8 	.word	0x200000a8

080268e0 <memcpy>:
 80268e0:	440a      	add	r2, r1
 80268e2:	4291      	cmp	r1, r2
 80268e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80268e8:	d100      	bne.n	80268ec <memcpy+0xc>
 80268ea:	4770      	bx	lr
 80268ec:	b510      	push	{r4, lr}
 80268ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80268f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80268f6:	4291      	cmp	r1, r2
 80268f8:	d1f9      	bne.n	80268ee <memcpy+0xe>
 80268fa:	bd10      	pop	{r4, pc}

080268fc <memset>:
 80268fc:	4402      	add	r2, r0
 80268fe:	4603      	mov	r3, r0
 8026900:	4293      	cmp	r3, r2
 8026902:	d100      	bne.n	8026906 <memset+0xa>
 8026904:	4770      	bx	lr
 8026906:	f803 1b01 	strb.w	r1, [r3], #1
 802690a:	e7f9      	b.n	8026900 <memset+0x4>

0802690c <_free_r>:
 802690c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802690e:	2900      	cmp	r1, #0
 8026910:	d044      	beq.n	802699c <_free_r+0x90>
 8026912:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8026916:	9001      	str	r0, [sp, #4]
 8026918:	2b00      	cmp	r3, #0
 802691a:	f1a1 0404 	sub.w	r4, r1, #4
 802691e:	bfb8      	it	lt
 8026920:	18e4      	addlt	r4, r4, r3
 8026922:	f000 ff6b 	bl	80277fc <__malloc_lock>
 8026926:	4a1e      	ldr	r2, [pc, #120]	; (80269a0 <_free_r+0x94>)
 8026928:	9801      	ldr	r0, [sp, #4]
 802692a:	6813      	ldr	r3, [r2, #0]
 802692c:	b933      	cbnz	r3, 802693c <_free_r+0x30>
 802692e:	6063      	str	r3, [r4, #4]
 8026930:	6014      	str	r4, [r2, #0]
 8026932:	b003      	add	sp, #12
 8026934:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8026938:	f000 bf66 	b.w	8027808 <__malloc_unlock>
 802693c:	42a3      	cmp	r3, r4
 802693e:	d908      	bls.n	8026952 <_free_r+0x46>
 8026940:	6825      	ldr	r5, [r4, #0]
 8026942:	1961      	adds	r1, r4, r5
 8026944:	428b      	cmp	r3, r1
 8026946:	bf01      	itttt	eq
 8026948:	6819      	ldreq	r1, [r3, #0]
 802694a:	685b      	ldreq	r3, [r3, #4]
 802694c:	1949      	addeq	r1, r1, r5
 802694e:	6021      	streq	r1, [r4, #0]
 8026950:	e7ed      	b.n	802692e <_free_r+0x22>
 8026952:	461a      	mov	r2, r3
 8026954:	685b      	ldr	r3, [r3, #4]
 8026956:	b10b      	cbz	r3, 802695c <_free_r+0x50>
 8026958:	42a3      	cmp	r3, r4
 802695a:	d9fa      	bls.n	8026952 <_free_r+0x46>
 802695c:	6811      	ldr	r1, [r2, #0]
 802695e:	1855      	adds	r5, r2, r1
 8026960:	42a5      	cmp	r5, r4
 8026962:	d10b      	bne.n	802697c <_free_r+0x70>
 8026964:	6824      	ldr	r4, [r4, #0]
 8026966:	4421      	add	r1, r4
 8026968:	1854      	adds	r4, r2, r1
 802696a:	42a3      	cmp	r3, r4
 802696c:	6011      	str	r1, [r2, #0]
 802696e:	d1e0      	bne.n	8026932 <_free_r+0x26>
 8026970:	681c      	ldr	r4, [r3, #0]
 8026972:	685b      	ldr	r3, [r3, #4]
 8026974:	6053      	str	r3, [r2, #4]
 8026976:	4421      	add	r1, r4
 8026978:	6011      	str	r1, [r2, #0]
 802697a:	e7da      	b.n	8026932 <_free_r+0x26>
 802697c:	d902      	bls.n	8026984 <_free_r+0x78>
 802697e:	230c      	movs	r3, #12
 8026980:	6003      	str	r3, [r0, #0]
 8026982:	e7d6      	b.n	8026932 <_free_r+0x26>
 8026984:	6825      	ldr	r5, [r4, #0]
 8026986:	1961      	adds	r1, r4, r5
 8026988:	428b      	cmp	r3, r1
 802698a:	bf04      	itt	eq
 802698c:	6819      	ldreq	r1, [r3, #0]
 802698e:	685b      	ldreq	r3, [r3, #4]
 8026990:	6063      	str	r3, [r4, #4]
 8026992:	bf04      	itt	eq
 8026994:	1949      	addeq	r1, r1, r5
 8026996:	6021      	streq	r1, [r4, #0]
 8026998:	6054      	str	r4, [r2, #4]
 802699a:	e7ca      	b.n	8026932 <_free_r+0x26>
 802699c:	b003      	add	sp, #12
 802699e:	bd30      	pop	{r4, r5, pc}
 80269a0:	20024524 	.word	0x20024524

080269a4 <sbrk_aligned>:
 80269a4:	b570      	push	{r4, r5, r6, lr}
 80269a6:	4e0e      	ldr	r6, [pc, #56]	; (80269e0 <sbrk_aligned+0x3c>)
 80269a8:	460c      	mov	r4, r1
 80269aa:	6831      	ldr	r1, [r6, #0]
 80269ac:	4605      	mov	r5, r0
 80269ae:	b911      	cbnz	r1, 80269b6 <sbrk_aligned+0x12>
 80269b0:	f000 fb7a 	bl	80270a8 <_sbrk_r>
 80269b4:	6030      	str	r0, [r6, #0]
 80269b6:	4621      	mov	r1, r4
 80269b8:	4628      	mov	r0, r5
 80269ba:	f000 fb75 	bl	80270a8 <_sbrk_r>
 80269be:	1c43      	adds	r3, r0, #1
 80269c0:	d00a      	beq.n	80269d8 <sbrk_aligned+0x34>
 80269c2:	1cc4      	adds	r4, r0, #3
 80269c4:	f024 0403 	bic.w	r4, r4, #3
 80269c8:	42a0      	cmp	r0, r4
 80269ca:	d007      	beq.n	80269dc <sbrk_aligned+0x38>
 80269cc:	1a21      	subs	r1, r4, r0
 80269ce:	4628      	mov	r0, r5
 80269d0:	f000 fb6a 	bl	80270a8 <_sbrk_r>
 80269d4:	3001      	adds	r0, #1
 80269d6:	d101      	bne.n	80269dc <sbrk_aligned+0x38>
 80269d8:	f04f 34ff 	mov.w	r4, #4294967295
 80269dc:	4620      	mov	r0, r4
 80269de:	bd70      	pop	{r4, r5, r6, pc}
 80269e0:	20024528 	.word	0x20024528

080269e4 <_malloc_r>:
 80269e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80269e8:	1ccd      	adds	r5, r1, #3
 80269ea:	f025 0503 	bic.w	r5, r5, #3
 80269ee:	3508      	adds	r5, #8
 80269f0:	2d0c      	cmp	r5, #12
 80269f2:	bf38      	it	cc
 80269f4:	250c      	movcc	r5, #12
 80269f6:	2d00      	cmp	r5, #0
 80269f8:	4607      	mov	r7, r0
 80269fa:	db01      	blt.n	8026a00 <_malloc_r+0x1c>
 80269fc:	42a9      	cmp	r1, r5
 80269fe:	d905      	bls.n	8026a0c <_malloc_r+0x28>
 8026a00:	230c      	movs	r3, #12
 8026a02:	603b      	str	r3, [r7, #0]
 8026a04:	2600      	movs	r6, #0
 8026a06:	4630      	mov	r0, r6
 8026a08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8026a0c:	4e2e      	ldr	r6, [pc, #184]	; (8026ac8 <_malloc_r+0xe4>)
 8026a0e:	f000 fef5 	bl	80277fc <__malloc_lock>
 8026a12:	6833      	ldr	r3, [r6, #0]
 8026a14:	461c      	mov	r4, r3
 8026a16:	bb34      	cbnz	r4, 8026a66 <_malloc_r+0x82>
 8026a18:	4629      	mov	r1, r5
 8026a1a:	4638      	mov	r0, r7
 8026a1c:	f7ff ffc2 	bl	80269a4 <sbrk_aligned>
 8026a20:	1c43      	adds	r3, r0, #1
 8026a22:	4604      	mov	r4, r0
 8026a24:	d14d      	bne.n	8026ac2 <_malloc_r+0xde>
 8026a26:	6834      	ldr	r4, [r6, #0]
 8026a28:	4626      	mov	r6, r4
 8026a2a:	2e00      	cmp	r6, #0
 8026a2c:	d140      	bne.n	8026ab0 <_malloc_r+0xcc>
 8026a2e:	6823      	ldr	r3, [r4, #0]
 8026a30:	4631      	mov	r1, r6
 8026a32:	4638      	mov	r0, r7
 8026a34:	eb04 0803 	add.w	r8, r4, r3
 8026a38:	f000 fb36 	bl	80270a8 <_sbrk_r>
 8026a3c:	4580      	cmp	r8, r0
 8026a3e:	d13a      	bne.n	8026ab6 <_malloc_r+0xd2>
 8026a40:	6821      	ldr	r1, [r4, #0]
 8026a42:	3503      	adds	r5, #3
 8026a44:	1a6d      	subs	r5, r5, r1
 8026a46:	f025 0503 	bic.w	r5, r5, #3
 8026a4a:	3508      	adds	r5, #8
 8026a4c:	2d0c      	cmp	r5, #12
 8026a4e:	bf38      	it	cc
 8026a50:	250c      	movcc	r5, #12
 8026a52:	4629      	mov	r1, r5
 8026a54:	4638      	mov	r0, r7
 8026a56:	f7ff ffa5 	bl	80269a4 <sbrk_aligned>
 8026a5a:	3001      	adds	r0, #1
 8026a5c:	d02b      	beq.n	8026ab6 <_malloc_r+0xd2>
 8026a5e:	6823      	ldr	r3, [r4, #0]
 8026a60:	442b      	add	r3, r5
 8026a62:	6023      	str	r3, [r4, #0]
 8026a64:	e00e      	b.n	8026a84 <_malloc_r+0xa0>
 8026a66:	6822      	ldr	r2, [r4, #0]
 8026a68:	1b52      	subs	r2, r2, r5
 8026a6a:	d41e      	bmi.n	8026aaa <_malloc_r+0xc6>
 8026a6c:	2a0b      	cmp	r2, #11
 8026a6e:	d916      	bls.n	8026a9e <_malloc_r+0xba>
 8026a70:	1961      	adds	r1, r4, r5
 8026a72:	42a3      	cmp	r3, r4
 8026a74:	6025      	str	r5, [r4, #0]
 8026a76:	bf18      	it	ne
 8026a78:	6059      	strne	r1, [r3, #4]
 8026a7a:	6863      	ldr	r3, [r4, #4]
 8026a7c:	bf08      	it	eq
 8026a7e:	6031      	streq	r1, [r6, #0]
 8026a80:	5162      	str	r2, [r4, r5]
 8026a82:	604b      	str	r3, [r1, #4]
 8026a84:	4638      	mov	r0, r7
 8026a86:	f104 060b 	add.w	r6, r4, #11
 8026a8a:	f000 febd 	bl	8027808 <__malloc_unlock>
 8026a8e:	f026 0607 	bic.w	r6, r6, #7
 8026a92:	1d23      	adds	r3, r4, #4
 8026a94:	1af2      	subs	r2, r6, r3
 8026a96:	d0b6      	beq.n	8026a06 <_malloc_r+0x22>
 8026a98:	1b9b      	subs	r3, r3, r6
 8026a9a:	50a3      	str	r3, [r4, r2]
 8026a9c:	e7b3      	b.n	8026a06 <_malloc_r+0x22>
 8026a9e:	6862      	ldr	r2, [r4, #4]
 8026aa0:	42a3      	cmp	r3, r4
 8026aa2:	bf0c      	ite	eq
 8026aa4:	6032      	streq	r2, [r6, #0]
 8026aa6:	605a      	strne	r2, [r3, #4]
 8026aa8:	e7ec      	b.n	8026a84 <_malloc_r+0xa0>
 8026aaa:	4623      	mov	r3, r4
 8026aac:	6864      	ldr	r4, [r4, #4]
 8026aae:	e7b2      	b.n	8026a16 <_malloc_r+0x32>
 8026ab0:	4634      	mov	r4, r6
 8026ab2:	6876      	ldr	r6, [r6, #4]
 8026ab4:	e7b9      	b.n	8026a2a <_malloc_r+0x46>
 8026ab6:	230c      	movs	r3, #12
 8026ab8:	603b      	str	r3, [r7, #0]
 8026aba:	4638      	mov	r0, r7
 8026abc:	f000 fea4 	bl	8027808 <__malloc_unlock>
 8026ac0:	e7a1      	b.n	8026a06 <_malloc_r+0x22>
 8026ac2:	6025      	str	r5, [r4, #0]
 8026ac4:	e7de      	b.n	8026a84 <_malloc_r+0xa0>
 8026ac6:	bf00      	nop
 8026ac8:	20024524 	.word	0x20024524

08026acc <__sfputc_r>:
 8026acc:	6893      	ldr	r3, [r2, #8]
 8026ace:	3b01      	subs	r3, #1
 8026ad0:	2b00      	cmp	r3, #0
 8026ad2:	b410      	push	{r4}
 8026ad4:	6093      	str	r3, [r2, #8]
 8026ad6:	da08      	bge.n	8026aea <__sfputc_r+0x1e>
 8026ad8:	6994      	ldr	r4, [r2, #24]
 8026ada:	42a3      	cmp	r3, r4
 8026adc:	db01      	blt.n	8026ae2 <__sfputc_r+0x16>
 8026ade:	290a      	cmp	r1, #10
 8026ae0:	d103      	bne.n	8026aea <__sfputc_r+0x1e>
 8026ae2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8026ae6:	f000 bb47 	b.w	8027178 <__swbuf_r>
 8026aea:	6813      	ldr	r3, [r2, #0]
 8026aec:	1c58      	adds	r0, r3, #1
 8026aee:	6010      	str	r0, [r2, #0]
 8026af0:	7019      	strb	r1, [r3, #0]
 8026af2:	4608      	mov	r0, r1
 8026af4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8026af8:	4770      	bx	lr

08026afa <__sfputs_r>:
 8026afa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026afc:	4606      	mov	r6, r0
 8026afe:	460f      	mov	r7, r1
 8026b00:	4614      	mov	r4, r2
 8026b02:	18d5      	adds	r5, r2, r3
 8026b04:	42ac      	cmp	r4, r5
 8026b06:	d101      	bne.n	8026b0c <__sfputs_r+0x12>
 8026b08:	2000      	movs	r0, #0
 8026b0a:	e007      	b.n	8026b1c <__sfputs_r+0x22>
 8026b0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8026b10:	463a      	mov	r2, r7
 8026b12:	4630      	mov	r0, r6
 8026b14:	f7ff ffda 	bl	8026acc <__sfputc_r>
 8026b18:	1c43      	adds	r3, r0, #1
 8026b1a:	d1f3      	bne.n	8026b04 <__sfputs_r+0xa>
 8026b1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08026b20 <_vfiprintf_r>:
 8026b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026b24:	460d      	mov	r5, r1
 8026b26:	b09d      	sub	sp, #116	; 0x74
 8026b28:	4614      	mov	r4, r2
 8026b2a:	4698      	mov	r8, r3
 8026b2c:	4606      	mov	r6, r0
 8026b2e:	b118      	cbz	r0, 8026b38 <_vfiprintf_r+0x18>
 8026b30:	6983      	ldr	r3, [r0, #24]
 8026b32:	b90b      	cbnz	r3, 8026b38 <_vfiprintf_r+0x18>
 8026b34:	f000 fd5c 	bl	80275f0 <__sinit>
 8026b38:	4b89      	ldr	r3, [pc, #548]	; (8026d60 <_vfiprintf_r+0x240>)
 8026b3a:	429d      	cmp	r5, r3
 8026b3c:	d11b      	bne.n	8026b76 <_vfiprintf_r+0x56>
 8026b3e:	6875      	ldr	r5, [r6, #4]
 8026b40:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8026b42:	07d9      	lsls	r1, r3, #31
 8026b44:	d405      	bmi.n	8026b52 <_vfiprintf_r+0x32>
 8026b46:	89ab      	ldrh	r3, [r5, #12]
 8026b48:	059a      	lsls	r2, r3, #22
 8026b4a:	d402      	bmi.n	8026b52 <_vfiprintf_r+0x32>
 8026b4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8026b4e:	f000 fded 	bl	802772c <__retarget_lock_acquire_recursive>
 8026b52:	89ab      	ldrh	r3, [r5, #12]
 8026b54:	071b      	lsls	r3, r3, #28
 8026b56:	d501      	bpl.n	8026b5c <_vfiprintf_r+0x3c>
 8026b58:	692b      	ldr	r3, [r5, #16]
 8026b5a:	b9eb      	cbnz	r3, 8026b98 <_vfiprintf_r+0x78>
 8026b5c:	4629      	mov	r1, r5
 8026b5e:	4630      	mov	r0, r6
 8026b60:	f000 fb5c 	bl	802721c <__swsetup_r>
 8026b64:	b1c0      	cbz	r0, 8026b98 <_vfiprintf_r+0x78>
 8026b66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8026b68:	07dc      	lsls	r4, r3, #31
 8026b6a:	d50e      	bpl.n	8026b8a <_vfiprintf_r+0x6a>
 8026b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8026b70:	b01d      	add	sp, #116	; 0x74
 8026b72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026b76:	4b7b      	ldr	r3, [pc, #492]	; (8026d64 <_vfiprintf_r+0x244>)
 8026b78:	429d      	cmp	r5, r3
 8026b7a:	d101      	bne.n	8026b80 <_vfiprintf_r+0x60>
 8026b7c:	68b5      	ldr	r5, [r6, #8]
 8026b7e:	e7df      	b.n	8026b40 <_vfiprintf_r+0x20>
 8026b80:	4b79      	ldr	r3, [pc, #484]	; (8026d68 <_vfiprintf_r+0x248>)
 8026b82:	429d      	cmp	r5, r3
 8026b84:	bf08      	it	eq
 8026b86:	68f5      	ldreq	r5, [r6, #12]
 8026b88:	e7da      	b.n	8026b40 <_vfiprintf_r+0x20>
 8026b8a:	89ab      	ldrh	r3, [r5, #12]
 8026b8c:	0598      	lsls	r0, r3, #22
 8026b8e:	d4ed      	bmi.n	8026b6c <_vfiprintf_r+0x4c>
 8026b90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8026b92:	f000 fdcd 	bl	8027730 <__retarget_lock_release_recursive>
 8026b96:	e7e9      	b.n	8026b6c <_vfiprintf_r+0x4c>
 8026b98:	2300      	movs	r3, #0
 8026b9a:	9309      	str	r3, [sp, #36]	; 0x24
 8026b9c:	2320      	movs	r3, #32
 8026b9e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8026ba2:	f8cd 800c 	str.w	r8, [sp, #12]
 8026ba6:	2330      	movs	r3, #48	; 0x30
 8026ba8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8026d6c <_vfiprintf_r+0x24c>
 8026bac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8026bb0:	f04f 0901 	mov.w	r9, #1
 8026bb4:	4623      	mov	r3, r4
 8026bb6:	469a      	mov	sl, r3
 8026bb8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8026bbc:	b10a      	cbz	r2, 8026bc2 <_vfiprintf_r+0xa2>
 8026bbe:	2a25      	cmp	r2, #37	; 0x25
 8026bc0:	d1f9      	bne.n	8026bb6 <_vfiprintf_r+0x96>
 8026bc2:	ebba 0b04 	subs.w	fp, sl, r4
 8026bc6:	d00b      	beq.n	8026be0 <_vfiprintf_r+0xc0>
 8026bc8:	465b      	mov	r3, fp
 8026bca:	4622      	mov	r2, r4
 8026bcc:	4629      	mov	r1, r5
 8026bce:	4630      	mov	r0, r6
 8026bd0:	f7ff ff93 	bl	8026afa <__sfputs_r>
 8026bd4:	3001      	adds	r0, #1
 8026bd6:	f000 80aa 	beq.w	8026d2e <_vfiprintf_r+0x20e>
 8026bda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8026bdc:	445a      	add	r2, fp
 8026bde:	9209      	str	r2, [sp, #36]	; 0x24
 8026be0:	f89a 3000 	ldrb.w	r3, [sl]
 8026be4:	2b00      	cmp	r3, #0
 8026be6:	f000 80a2 	beq.w	8026d2e <_vfiprintf_r+0x20e>
 8026bea:	2300      	movs	r3, #0
 8026bec:	f04f 32ff 	mov.w	r2, #4294967295
 8026bf0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8026bf4:	f10a 0a01 	add.w	sl, sl, #1
 8026bf8:	9304      	str	r3, [sp, #16]
 8026bfa:	9307      	str	r3, [sp, #28]
 8026bfc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8026c00:	931a      	str	r3, [sp, #104]	; 0x68
 8026c02:	4654      	mov	r4, sl
 8026c04:	2205      	movs	r2, #5
 8026c06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8026c0a:	4858      	ldr	r0, [pc, #352]	; (8026d6c <_vfiprintf_r+0x24c>)
 8026c0c:	f7d9 fb18 	bl	8000240 <memchr>
 8026c10:	9a04      	ldr	r2, [sp, #16]
 8026c12:	b9d8      	cbnz	r0, 8026c4c <_vfiprintf_r+0x12c>
 8026c14:	06d1      	lsls	r1, r2, #27
 8026c16:	bf44      	itt	mi
 8026c18:	2320      	movmi	r3, #32
 8026c1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8026c1e:	0713      	lsls	r3, r2, #28
 8026c20:	bf44      	itt	mi
 8026c22:	232b      	movmi	r3, #43	; 0x2b
 8026c24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8026c28:	f89a 3000 	ldrb.w	r3, [sl]
 8026c2c:	2b2a      	cmp	r3, #42	; 0x2a
 8026c2e:	d015      	beq.n	8026c5c <_vfiprintf_r+0x13c>
 8026c30:	9a07      	ldr	r2, [sp, #28]
 8026c32:	4654      	mov	r4, sl
 8026c34:	2000      	movs	r0, #0
 8026c36:	f04f 0c0a 	mov.w	ip, #10
 8026c3a:	4621      	mov	r1, r4
 8026c3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8026c40:	3b30      	subs	r3, #48	; 0x30
 8026c42:	2b09      	cmp	r3, #9
 8026c44:	d94e      	bls.n	8026ce4 <_vfiprintf_r+0x1c4>
 8026c46:	b1b0      	cbz	r0, 8026c76 <_vfiprintf_r+0x156>
 8026c48:	9207      	str	r2, [sp, #28]
 8026c4a:	e014      	b.n	8026c76 <_vfiprintf_r+0x156>
 8026c4c:	eba0 0308 	sub.w	r3, r0, r8
 8026c50:	fa09 f303 	lsl.w	r3, r9, r3
 8026c54:	4313      	orrs	r3, r2
 8026c56:	9304      	str	r3, [sp, #16]
 8026c58:	46a2      	mov	sl, r4
 8026c5a:	e7d2      	b.n	8026c02 <_vfiprintf_r+0xe2>
 8026c5c:	9b03      	ldr	r3, [sp, #12]
 8026c5e:	1d19      	adds	r1, r3, #4
 8026c60:	681b      	ldr	r3, [r3, #0]
 8026c62:	9103      	str	r1, [sp, #12]
 8026c64:	2b00      	cmp	r3, #0
 8026c66:	bfbb      	ittet	lt
 8026c68:	425b      	neglt	r3, r3
 8026c6a:	f042 0202 	orrlt.w	r2, r2, #2
 8026c6e:	9307      	strge	r3, [sp, #28]
 8026c70:	9307      	strlt	r3, [sp, #28]
 8026c72:	bfb8      	it	lt
 8026c74:	9204      	strlt	r2, [sp, #16]
 8026c76:	7823      	ldrb	r3, [r4, #0]
 8026c78:	2b2e      	cmp	r3, #46	; 0x2e
 8026c7a:	d10c      	bne.n	8026c96 <_vfiprintf_r+0x176>
 8026c7c:	7863      	ldrb	r3, [r4, #1]
 8026c7e:	2b2a      	cmp	r3, #42	; 0x2a
 8026c80:	d135      	bne.n	8026cee <_vfiprintf_r+0x1ce>
 8026c82:	9b03      	ldr	r3, [sp, #12]
 8026c84:	1d1a      	adds	r2, r3, #4
 8026c86:	681b      	ldr	r3, [r3, #0]
 8026c88:	9203      	str	r2, [sp, #12]
 8026c8a:	2b00      	cmp	r3, #0
 8026c8c:	bfb8      	it	lt
 8026c8e:	f04f 33ff 	movlt.w	r3, #4294967295
 8026c92:	3402      	adds	r4, #2
 8026c94:	9305      	str	r3, [sp, #20]
 8026c96:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8026d7c <_vfiprintf_r+0x25c>
 8026c9a:	7821      	ldrb	r1, [r4, #0]
 8026c9c:	2203      	movs	r2, #3
 8026c9e:	4650      	mov	r0, sl
 8026ca0:	f7d9 face 	bl	8000240 <memchr>
 8026ca4:	b140      	cbz	r0, 8026cb8 <_vfiprintf_r+0x198>
 8026ca6:	2340      	movs	r3, #64	; 0x40
 8026ca8:	eba0 000a 	sub.w	r0, r0, sl
 8026cac:	fa03 f000 	lsl.w	r0, r3, r0
 8026cb0:	9b04      	ldr	r3, [sp, #16]
 8026cb2:	4303      	orrs	r3, r0
 8026cb4:	3401      	adds	r4, #1
 8026cb6:	9304      	str	r3, [sp, #16]
 8026cb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8026cbc:	482c      	ldr	r0, [pc, #176]	; (8026d70 <_vfiprintf_r+0x250>)
 8026cbe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8026cc2:	2206      	movs	r2, #6
 8026cc4:	f7d9 fabc 	bl	8000240 <memchr>
 8026cc8:	2800      	cmp	r0, #0
 8026cca:	d03f      	beq.n	8026d4c <_vfiprintf_r+0x22c>
 8026ccc:	4b29      	ldr	r3, [pc, #164]	; (8026d74 <_vfiprintf_r+0x254>)
 8026cce:	bb1b      	cbnz	r3, 8026d18 <_vfiprintf_r+0x1f8>
 8026cd0:	9b03      	ldr	r3, [sp, #12]
 8026cd2:	3307      	adds	r3, #7
 8026cd4:	f023 0307 	bic.w	r3, r3, #7
 8026cd8:	3308      	adds	r3, #8
 8026cda:	9303      	str	r3, [sp, #12]
 8026cdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026cde:	443b      	add	r3, r7
 8026ce0:	9309      	str	r3, [sp, #36]	; 0x24
 8026ce2:	e767      	b.n	8026bb4 <_vfiprintf_r+0x94>
 8026ce4:	fb0c 3202 	mla	r2, ip, r2, r3
 8026ce8:	460c      	mov	r4, r1
 8026cea:	2001      	movs	r0, #1
 8026cec:	e7a5      	b.n	8026c3a <_vfiprintf_r+0x11a>
 8026cee:	2300      	movs	r3, #0
 8026cf0:	3401      	adds	r4, #1
 8026cf2:	9305      	str	r3, [sp, #20]
 8026cf4:	4619      	mov	r1, r3
 8026cf6:	f04f 0c0a 	mov.w	ip, #10
 8026cfa:	4620      	mov	r0, r4
 8026cfc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8026d00:	3a30      	subs	r2, #48	; 0x30
 8026d02:	2a09      	cmp	r2, #9
 8026d04:	d903      	bls.n	8026d0e <_vfiprintf_r+0x1ee>
 8026d06:	2b00      	cmp	r3, #0
 8026d08:	d0c5      	beq.n	8026c96 <_vfiprintf_r+0x176>
 8026d0a:	9105      	str	r1, [sp, #20]
 8026d0c:	e7c3      	b.n	8026c96 <_vfiprintf_r+0x176>
 8026d0e:	fb0c 2101 	mla	r1, ip, r1, r2
 8026d12:	4604      	mov	r4, r0
 8026d14:	2301      	movs	r3, #1
 8026d16:	e7f0      	b.n	8026cfa <_vfiprintf_r+0x1da>
 8026d18:	ab03      	add	r3, sp, #12
 8026d1a:	9300      	str	r3, [sp, #0]
 8026d1c:	462a      	mov	r2, r5
 8026d1e:	4b16      	ldr	r3, [pc, #88]	; (8026d78 <_vfiprintf_r+0x258>)
 8026d20:	a904      	add	r1, sp, #16
 8026d22:	4630      	mov	r0, r6
 8026d24:	f3af 8000 	nop.w
 8026d28:	4607      	mov	r7, r0
 8026d2a:	1c78      	adds	r0, r7, #1
 8026d2c:	d1d6      	bne.n	8026cdc <_vfiprintf_r+0x1bc>
 8026d2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8026d30:	07d9      	lsls	r1, r3, #31
 8026d32:	d405      	bmi.n	8026d40 <_vfiprintf_r+0x220>
 8026d34:	89ab      	ldrh	r3, [r5, #12]
 8026d36:	059a      	lsls	r2, r3, #22
 8026d38:	d402      	bmi.n	8026d40 <_vfiprintf_r+0x220>
 8026d3a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8026d3c:	f000 fcf8 	bl	8027730 <__retarget_lock_release_recursive>
 8026d40:	89ab      	ldrh	r3, [r5, #12]
 8026d42:	065b      	lsls	r3, r3, #25
 8026d44:	f53f af12 	bmi.w	8026b6c <_vfiprintf_r+0x4c>
 8026d48:	9809      	ldr	r0, [sp, #36]	; 0x24
 8026d4a:	e711      	b.n	8026b70 <_vfiprintf_r+0x50>
 8026d4c:	ab03      	add	r3, sp, #12
 8026d4e:	9300      	str	r3, [sp, #0]
 8026d50:	462a      	mov	r2, r5
 8026d52:	4b09      	ldr	r3, [pc, #36]	; (8026d78 <_vfiprintf_r+0x258>)
 8026d54:	a904      	add	r1, sp, #16
 8026d56:	4630      	mov	r0, r6
 8026d58:	f000 f880 	bl	8026e5c <_printf_i>
 8026d5c:	e7e4      	b.n	8026d28 <_vfiprintf_r+0x208>
 8026d5e:	bf00      	nop
 8026d60:	0802b5b4 	.word	0x0802b5b4
 8026d64:	0802b5d4 	.word	0x0802b5d4
 8026d68:	0802b594 	.word	0x0802b594
 8026d6c:	0802b55c 	.word	0x0802b55c
 8026d70:	0802b566 	.word	0x0802b566
 8026d74:	00000000 	.word	0x00000000
 8026d78:	08026afb 	.word	0x08026afb
 8026d7c:	0802b562 	.word	0x0802b562

08026d80 <_printf_common>:
 8026d80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026d84:	4616      	mov	r6, r2
 8026d86:	4699      	mov	r9, r3
 8026d88:	688a      	ldr	r2, [r1, #8]
 8026d8a:	690b      	ldr	r3, [r1, #16]
 8026d8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8026d90:	4293      	cmp	r3, r2
 8026d92:	bfb8      	it	lt
 8026d94:	4613      	movlt	r3, r2
 8026d96:	6033      	str	r3, [r6, #0]
 8026d98:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8026d9c:	4607      	mov	r7, r0
 8026d9e:	460c      	mov	r4, r1
 8026da0:	b10a      	cbz	r2, 8026da6 <_printf_common+0x26>
 8026da2:	3301      	adds	r3, #1
 8026da4:	6033      	str	r3, [r6, #0]
 8026da6:	6823      	ldr	r3, [r4, #0]
 8026da8:	0699      	lsls	r1, r3, #26
 8026daa:	bf42      	ittt	mi
 8026dac:	6833      	ldrmi	r3, [r6, #0]
 8026dae:	3302      	addmi	r3, #2
 8026db0:	6033      	strmi	r3, [r6, #0]
 8026db2:	6825      	ldr	r5, [r4, #0]
 8026db4:	f015 0506 	ands.w	r5, r5, #6
 8026db8:	d106      	bne.n	8026dc8 <_printf_common+0x48>
 8026dba:	f104 0a19 	add.w	sl, r4, #25
 8026dbe:	68e3      	ldr	r3, [r4, #12]
 8026dc0:	6832      	ldr	r2, [r6, #0]
 8026dc2:	1a9b      	subs	r3, r3, r2
 8026dc4:	42ab      	cmp	r3, r5
 8026dc6:	dc26      	bgt.n	8026e16 <_printf_common+0x96>
 8026dc8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8026dcc:	1e13      	subs	r3, r2, #0
 8026dce:	6822      	ldr	r2, [r4, #0]
 8026dd0:	bf18      	it	ne
 8026dd2:	2301      	movne	r3, #1
 8026dd4:	0692      	lsls	r2, r2, #26
 8026dd6:	d42b      	bmi.n	8026e30 <_printf_common+0xb0>
 8026dd8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8026ddc:	4649      	mov	r1, r9
 8026dde:	4638      	mov	r0, r7
 8026de0:	47c0      	blx	r8
 8026de2:	3001      	adds	r0, #1
 8026de4:	d01e      	beq.n	8026e24 <_printf_common+0xa4>
 8026de6:	6823      	ldr	r3, [r4, #0]
 8026de8:	68e5      	ldr	r5, [r4, #12]
 8026dea:	6832      	ldr	r2, [r6, #0]
 8026dec:	f003 0306 	and.w	r3, r3, #6
 8026df0:	2b04      	cmp	r3, #4
 8026df2:	bf08      	it	eq
 8026df4:	1aad      	subeq	r5, r5, r2
 8026df6:	68a3      	ldr	r3, [r4, #8]
 8026df8:	6922      	ldr	r2, [r4, #16]
 8026dfa:	bf0c      	ite	eq
 8026dfc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8026e00:	2500      	movne	r5, #0
 8026e02:	4293      	cmp	r3, r2
 8026e04:	bfc4      	itt	gt
 8026e06:	1a9b      	subgt	r3, r3, r2
 8026e08:	18ed      	addgt	r5, r5, r3
 8026e0a:	2600      	movs	r6, #0
 8026e0c:	341a      	adds	r4, #26
 8026e0e:	42b5      	cmp	r5, r6
 8026e10:	d11a      	bne.n	8026e48 <_printf_common+0xc8>
 8026e12:	2000      	movs	r0, #0
 8026e14:	e008      	b.n	8026e28 <_printf_common+0xa8>
 8026e16:	2301      	movs	r3, #1
 8026e18:	4652      	mov	r2, sl
 8026e1a:	4649      	mov	r1, r9
 8026e1c:	4638      	mov	r0, r7
 8026e1e:	47c0      	blx	r8
 8026e20:	3001      	adds	r0, #1
 8026e22:	d103      	bne.n	8026e2c <_printf_common+0xac>
 8026e24:	f04f 30ff 	mov.w	r0, #4294967295
 8026e28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026e2c:	3501      	adds	r5, #1
 8026e2e:	e7c6      	b.n	8026dbe <_printf_common+0x3e>
 8026e30:	18e1      	adds	r1, r4, r3
 8026e32:	1c5a      	adds	r2, r3, #1
 8026e34:	2030      	movs	r0, #48	; 0x30
 8026e36:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8026e3a:	4422      	add	r2, r4
 8026e3c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8026e40:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8026e44:	3302      	adds	r3, #2
 8026e46:	e7c7      	b.n	8026dd8 <_printf_common+0x58>
 8026e48:	2301      	movs	r3, #1
 8026e4a:	4622      	mov	r2, r4
 8026e4c:	4649      	mov	r1, r9
 8026e4e:	4638      	mov	r0, r7
 8026e50:	47c0      	blx	r8
 8026e52:	3001      	adds	r0, #1
 8026e54:	d0e6      	beq.n	8026e24 <_printf_common+0xa4>
 8026e56:	3601      	adds	r6, #1
 8026e58:	e7d9      	b.n	8026e0e <_printf_common+0x8e>
	...

08026e5c <_printf_i>:
 8026e5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8026e60:	7e0f      	ldrb	r7, [r1, #24]
 8026e62:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8026e64:	2f78      	cmp	r7, #120	; 0x78
 8026e66:	4691      	mov	r9, r2
 8026e68:	4680      	mov	r8, r0
 8026e6a:	460c      	mov	r4, r1
 8026e6c:	469a      	mov	sl, r3
 8026e6e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8026e72:	d807      	bhi.n	8026e84 <_printf_i+0x28>
 8026e74:	2f62      	cmp	r7, #98	; 0x62
 8026e76:	d80a      	bhi.n	8026e8e <_printf_i+0x32>
 8026e78:	2f00      	cmp	r7, #0
 8026e7a:	f000 80d8 	beq.w	802702e <_printf_i+0x1d2>
 8026e7e:	2f58      	cmp	r7, #88	; 0x58
 8026e80:	f000 80a3 	beq.w	8026fca <_printf_i+0x16e>
 8026e84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8026e88:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8026e8c:	e03a      	b.n	8026f04 <_printf_i+0xa8>
 8026e8e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8026e92:	2b15      	cmp	r3, #21
 8026e94:	d8f6      	bhi.n	8026e84 <_printf_i+0x28>
 8026e96:	a101      	add	r1, pc, #4	; (adr r1, 8026e9c <_printf_i+0x40>)
 8026e98:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8026e9c:	08026ef5 	.word	0x08026ef5
 8026ea0:	08026f09 	.word	0x08026f09
 8026ea4:	08026e85 	.word	0x08026e85
 8026ea8:	08026e85 	.word	0x08026e85
 8026eac:	08026e85 	.word	0x08026e85
 8026eb0:	08026e85 	.word	0x08026e85
 8026eb4:	08026f09 	.word	0x08026f09
 8026eb8:	08026e85 	.word	0x08026e85
 8026ebc:	08026e85 	.word	0x08026e85
 8026ec0:	08026e85 	.word	0x08026e85
 8026ec4:	08026e85 	.word	0x08026e85
 8026ec8:	08027015 	.word	0x08027015
 8026ecc:	08026f39 	.word	0x08026f39
 8026ed0:	08026ff7 	.word	0x08026ff7
 8026ed4:	08026e85 	.word	0x08026e85
 8026ed8:	08026e85 	.word	0x08026e85
 8026edc:	08027037 	.word	0x08027037
 8026ee0:	08026e85 	.word	0x08026e85
 8026ee4:	08026f39 	.word	0x08026f39
 8026ee8:	08026e85 	.word	0x08026e85
 8026eec:	08026e85 	.word	0x08026e85
 8026ef0:	08026fff 	.word	0x08026fff
 8026ef4:	682b      	ldr	r3, [r5, #0]
 8026ef6:	1d1a      	adds	r2, r3, #4
 8026ef8:	681b      	ldr	r3, [r3, #0]
 8026efa:	602a      	str	r2, [r5, #0]
 8026efc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8026f00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8026f04:	2301      	movs	r3, #1
 8026f06:	e0a3      	b.n	8027050 <_printf_i+0x1f4>
 8026f08:	6820      	ldr	r0, [r4, #0]
 8026f0a:	6829      	ldr	r1, [r5, #0]
 8026f0c:	0606      	lsls	r6, r0, #24
 8026f0e:	f101 0304 	add.w	r3, r1, #4
 8026f12:	d50a      	bpl.n	8026f2a <_printf_i+0xce>
 8026f14:	680e      	ldr	r6, [r1, #0]
 8026f16:	602b      	str	r3, [r5, #0]
 8026f18:	2e00      	cmp	r6, #0
 8026f1a:	da03      	bge.n	8026f24 <_printf_i+0xc8>
 8026f1c:	232d      	movs	r3, #45	; 0x2d
 8026f1e:	4276      	negs	r6, r6
 8026f20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8026f24:	485e      	ldr	r0, [pc, #376]	; (80270a0 <_printf_i+0x244>)
 8026f26:	230a      	movs	r3, #10
 8026f28:	e019      	b.n	8026f5e <_printf_i+0x102>
 8026f2a:	680e      	ldr	r6, [r1, #0]
 8026f2c:	602b      	str	r3, [r5, #0]
 8026f2e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8026f32:	bf18      	it	ne
 8026f34:	b236      	sxthne	r6, r6
 8026f36:	e7ef      	b.n	8026f18 <_printf_i+0xbc>
 8026f38:	682b      	ldr	r3, [r5, #0]
 8026f3a:	6820      	ldr	r0, [r4, #0]
 8026f3c:	1d19      	adds	r1, r3, #4
 8026f3e:	6029      	str	r1, [r5, #0]
 8026f40:	0601      	lsls	r1, r0, #24
 8026f42:	d501      	bpl.n	8026f48 <_printf_i+0xec>
 8026f44:	681e      	ldr	r6, [r3, #0]
 8026f46:	e002      	b.n	8026f4e <_printf_i+0xf2>
 8026f48:	0646      	lsls	r6, r0, #25
 8026f4a:	d5fb      	bpl.n	8026f44 <_printf_i+0xe8>
 8026f4c:	881e      	ldrh	r6, [r3, #0]
 8026f4e:	4854      	ldr	r0, [pc, #336]	; (80270a0 <_printf_i+0x244>)
 8026f50:	2f6f      	cmp	r7, #111	; 0x6f
 8026f52:	bf0c      	ite	eq
 8026f54:	2308      	moveq	r3, #8
 8026f56:	230a      	movne	r3, #10
 8026f58:	2100      	movs	r1, #0
 8026f5a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8026f5e:	6865      	ldr	r5, [r4, #4]
 8026f60:	60a5      	str	r5, [r4, #8]
 8026f62:	2d00      	cmp	r5, #0
 8026f64:	bfa2      	ittt	ge
 8026f66:	6821      	ldrge	r1, [r4, #0]
 8026f68:	f021 0104 	bicge.w	r1, r1, #4
 8026f6c:	6021      	strge	r1, [r4, #0]
 8026f6e:	b90e      	cbnz	r6, 8026f74 <_printf_i+0x118>
 8026f70:	2d00      	cmp	r5, #0
 8026f72:	d04d      	beq.n	8027010 <_printf_i+0x1b4>
 8026f74:	4615      	mov	r5, r2
 8026f76:	fbb6 f1f3 	udiv	r1, r6, r3
 8026f7a:	fb03 6711 	mls	r7, r3, r1, r6
 8026f7e:	5dc7      	ldrb	r7, [r0, r7]
 8026f80:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8026f84:	4637      	mov	r7, r6
 8026f86:	42bb      	cmp	r3, r7
 8026f88:	460e      	mov	r6, r1
 8026f8a:	d9f4      	bls.n	8026f76 <_printf_i+0x11a>
 8026f8c:	2b08      	cmp	r3, #8
 8026f8e:	d10b      	bne.n	8026fa8 <_printf_i+0x14c>
 8026f90:	6823      	ldr	r3, [r4, #0]
 8026f92:	07de      	lsls	r6, r3, #31
 8026f94:	d508      	bpl.n	8026fa8 <_printf_i+0x14c>
 8026f96:	6923      	ldr	r3, [r4, #16]
 8026f98:	6861      	ldr	r1, [r4, #4]
 8026f9a:	4299      	cmp	r1, r3
 8026f9c:	bfde      	ittt	le
 8026f9e:	2330      	movle	r3, #48	; 0x30
 8026fa0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8026fa4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8026fa8:	1b52      	subs	r2, r2, r5
 8026faa:	6122      	str	r2, [r4, #16]
 8026fac:	f8cd a000 	str.w	sl, [sp]
 8026fb0:	464b      	mov	r3, r9
 8026fb2:	aa03      	add	r2, sp, #12
 8026fb4:	4621      	mov	r1, r4
 8026fb6:	4640      	mov	r0, r8
 8026fb8:	f7ff fee2 	bl	8026d80 <_printf_common>
 8026fbc:	3001      	adds	r0, #1
 8026fbe:	d14c      	bne.n	802705a <_printf_i+0x1fe>
 8026fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8026fc4:	b004      	add	sp, #16
 8026fc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026fca:	4835      	ldr	r0, [pc, #212]	; (80270a0 <_printf_i+0x244>)
 8026fcc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8026fd0:	6829      	ldr	r1, [r5, #0]
 8026fd2:	6823      	ldr	r3, [r4, #0]
 8026fd4:	f851 6b04 	ldr.w	r6, [r1], #4
 8026fd8:	6029      	str	r1, [r5, #0]
 8026fda:	061d      	lsls	r5, r3, #24
 8026fdc:	d514      	bpl.n	8027008 <_printf_i+0x1ac>
 8026fde:	07df      	lsls	r7, r3, #31
 8026fe0:	bf44      	itt	mi
 8026fe2:	f043 0320 	orrmi.w	r3, r3, #32
 8026fe6:	6023      	strmi	r3, [r4, #0]
 8026fe8:	b91e      	cbnz	r6, 8026ff2 <_printf_i+0x196>
 8026fea:	6823      	ldr	r3, [r4, #0]
 8026fec:	f023 0320 	bic.w	r3, r3, #32
 8026ff0:	6023      	str	r3, [r4, #0]
 8026ff2:	2310      	movs	r3, #16
 8026ff4:	e7b0      	b.n	8026f58 <_printf_i+0xfc>
 8026ff6:	6823      	ldr	r3, [r4, #0]
 8026ff8:	f043 0320 	orr.w	r3, r3, #32
 8026ffc:	6023      	str	r3, [r4, #0]
 8026ffe:	2378      	movs	r3, #120	; 0x78
 8027000:	4828      	ldr	r0, [pc, #160]	; (80270a4 <_printf_i+0x248>)
 8027002:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8027006:	e7e3      	b.n	8026fd0 <_printf_i+0x174>
 8027008:	0659      	lsls	r1, r3, #25
 802700a:	bf48      	it	mi
 802700c:	b2b6      	uxthmi	r6, r6
 802700e:	e7e6      	b.n	8026fde <_printf_i+0x182>
 8027010:	4615      	mov	r5, r2
 8027012:	e7bb      	b.n	8026f8c <_printf_i+0x130>
 8027014:	682b      	ldr	r3, [r5, #0]
 8027016:	6826      	ldr	r6, [r4, #0]
 8027018:	6961      	ldr	r1, [r4, #20]
 802701a:	1d18      	adds	r0, r3, #4
 802701c:	6028      	str	r0, [r5, #0]
 802701e:	0635      	lsls	r5, r6, #24
 8027020:	681b      	ldr	r3, [r3, #0]
 8027022:	d501      	bpl.n	8027028 <_printf_i+0x1cc>
 8027024:	6019      	str	r1, [r3, #0]
 8027026:	e002      	b.n	802702e <_printf_i+0x1d2>
 8027028:	0670      	lsls	r0, r6, #25
 802702a:	d5fb      	bpl.n	8027024 <_printf_i+0x1c8>
 802702c:	8019      	strh	r1, [r3, #0]
 802702e:	2300      	movs	r3, #0
 8027030:	6123      	str	r3, [r4, #16]
 8027032:	4615      	mov	r5, r2
 8027034:	e7ba      	b.n	8026fac <_printf_i+0x150>
 8027036:	682b      	ldr	r3, [r5, #0]
 8027038:	1d1a      	adds	r2, r3, #4
 802703a:	602a      	str	r2, [r5, #0]
 802703c:	681d      	ldr	r5, [r3, #0]
 802703e:	6862      	ldr	r2, [r4, #4]
 8027040:	2100      	movs	r1, #0
 8027042:	4628      	mov	r0, r5
 8027044:	f7d9 f8fc 	bl	8000240 <memchr>
 8027048:	b108      	cbz	r0, 802704e <_printf_i+0x1f2>
 802704a:	1b40      	subs	r0, r0, r5
 802704c:	6060      	str	r0, [r4, #4]
 802704e:	6863      	ldr	r3, [r4, #4]
 8027050:	6123      	str	r3, [r4, #16]
 8027052:	2300      	movs	r3, #0
 8027054:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8027058:	e7a8      	b.n	8026fac <_printf_i+0x150>
 802705a:	6923      	ldr	r3, [r4, #16]
 802705c:	462a      	mov	r2, r5
 802705e:	4649      	mov	r1, r9
 8027060:	4640      	mov	r0, r8
 8027062:	47d0      	blx	sl
 8027064:	3001      	adds	r0, #1
 8027066:	d0ab      	beq.n	8026fc0 <_printf_i+0x164>
 8027068:	6823      	ldr	r3, [r4, #0]
 802706a:	079b      	lsls	r3, r3, #30
 802706c:	d413      	bmi.n	8027096 <_printf_i+0x23a>
 802706e:	68e0      	ldr	r0, [r4, #12]
 8027070:	9b03      	ldr	r3, [sp, #12]
 8027072:	4298      	cmp	r0, r3
 8027074:	bfb8      	it	lt
 8027076:	4618      	movlt	r0, r3
 8027078:	e7a4      	b.n	8026fc4 <_printf_i+0x168>
 802707a:	2301      	movs	r3, #1
 802707c:	4632      	mov	r2, r6
 802707e:	4649      	mov	r1, r9
 8027080:	4640      	mov	r0, r8
 8027082:	47d0      	blx	sl
 8027084:	3001      	adds	r0, #1
 8027086:	d09b      	beq.n	8026fc0 <_printf_i+0x164>
 8027088:	3501      	adds	r5, #1
 802708a:	68e3      	ldr	r3, [r4, #12]
 802708c:	9903      	ldr	r1, [sp, #12]
 802708e:	1a5b      	subs	r3, r3, r1
 8027090:	42ab      	cmp	r3, r5
 8027092:	dcf2      	bgt.n	802707a <_printf_i+0x21e>
 8027094:	e7eb      	b.n	802706e <_printf_i+0x212>
 8027096:	2500      	movs	r5, #0
 8027098:	f104 0619 	add.w	r6, r4, #25
 802709c:	e7f5      	b.n	802708a <_printf_i+0x22e>
 802709e:	bf00      	nop
 80270a0:	0802b56d 	.word	0x0802b56d
 80270a4:	0802b57e 	.word	0x0802b57e

080270a8 <_sbrk_r>:
 80270a8:	b538      	push	{r3, r4, r5, lr}
 80270aa:	4d06      	ldr	r5, [pc, #24]	; (80270c4 <_sbrk_r+0x1c>)
 80270ac:	2300      	movs	r3, #0
 80270ae:	4604      	mov	r4, r0
 80270b0:	4608      	mov	r0, r1
 80270b2:	602b      	str	r3, [r5, #0]
 80270b4:	f7db f9ea 	bl	800248c <_sbrk>
 80270b8:	1c43      	adds	r3, r0, #1
 80270ba:	d102      	bne.n	80270c2 <_sbrk_r+0x1a>
 80270bc:	682b      	ldr	r3, [r5, #0]
 80270be:	b103      	cbz	r3, 80270c2 <_sbrk_r+0x1a>
 80270c0:	6023      	str	r3, [r4, #0]
 80270c2:	bd38      	pop	{r3, r4, r5, pc}
 80270c4:	200246c8 	.word	0x200246c8

080270c8 <_raise_r>:
 80270c8:	291f      	cmp	r1, #31
 80270ca:	b538      	push	{r3, r4, r5, lr}
 80270cc:	4604      	mov	r4, r0
 80270ce:	460d      	mov	r5, r1
 80270d0:	d904      	bls.n	80270dc <_raise_r+0x14>
 80270d2:	2316      	movs	r3, #22
 80270d4:	6003      	str	r3, [r0, #0]
 80270d6:	f04f 30ff 	mov.w	r0, #4294967295
 80270da:	bd38      	pop	{r3, r4, r5, pc}
 80270dc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80270de:	b112      	cbz	r2, 80270e6 <_raise_r+0x1e>
 80270e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80270e4:	b94b      	cbnz	r3, 80270fa <_raise_r+0x32>
 80270e6:	4620      	mov	r0, r4
 80270e8:	f000 f830 	bl	802714c <_getpid_r>
 80270ec:	462a      	mov	r2, r5
 80270ee:	4601      	mov	r1, r0
 80270f0:	4620      	mov	r0, r4
 80270f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80270f6:	f000 b817 	b.w	8027128 <_kill_r>
 80270fa:	2b01      	cmp	r3, #1
 80270fc:	d00a      	beq.n	8027114 <_raise_r+0x4c>
 80270fe:	1c59      	adds	r1, r3, #1
 8027100:	d103      	bne.n	802710a <_raise_r+0x42>
 8027102:	2316      	movs	r3, #22
 8027104:	6003      	str	r3, [r0, #0]
 8027106:	2001      	movs	r0, #1
 8027108:	e7e7      	b.n	80270da <_raise_r+0x12>
 802710a:	2400      	movs	r4, #0
 802710c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8027110:	4628      	mov	r0, r5
 8027112:	4798      	blx	r3
 8027114:	2000      	movs	r0, #0
 8027116:	e7e0      	b.n	80270da <_raise_r+0x12>

08027118 <raise>:
 8027118:	4b02      	ldr	r3, [pc, #8]	; (8027124 <raise+0xc>)
 802711a:	4601      	mov	r1, r0
 802711c:	6818      	ldr	r0, [r3, #0]
 802711e:	f7ff bfd3 	b.w	80270c8 <_raise_r>
 8027122:	bf00      	nop
 8027124:	200000a8 	.word	0x200000a8

08027128 <_kill_r>:
 8027128:	b538      	push	{r3, r4, r5, lr}
 802712a:	4d07      	ldr	r5, [pc, #28]	; (8027148 <_kill_r+0x20>)
 802712c:	2300      	movs	r3, #0
 802712e:	4604      	mov	r4, r0
 8027130:	4608      	mov	r0, r1
 8027132:	4611      	mov	r1, r2
 8027134:	602b      	str	r3, [r5, #0]
 8027136:	f7db f921 	bl	800237c <_kill>
 802713a:	1c43      	adds	r3, r0, #1
 802713c:	d102      	bne.n	8027144 <_kill_r+0x1c>
 802713e:	682b      	ldr	r3, [r5, #0]
 8027140:	b103      	cbz	r3, 8027144 <_kill_r+0x1c>
 8027142:	6023      	str	r3, [r4, #0]
 8027144:	bd38      	pop	{r3, r4, r5, pc}
 8027146:	bf00      	nop
 8027148:	200246c8 	.word	0x200246c8

0802714c <_getpid_r>:
 802714c:	f7db b90e 	b.w	800236c <_getpid>

08027150 <strncmp>:
 8027150:	b510      	push	{r4, lr}
 8027152:	b17a      	cbz	r2, 8027174 <strncmp+0x24>
 8027154:	4603      	mov	r3, r0
 8027156:	3901      	subs	r1, #1
 8027158:	1884      	adds	r4, r0, r2
 802715a:	f813 0b01 	ldrb.w	r0, [r3], #1
 802715e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8027162:	4290      	cmp	r0, r2
 8027164:	d101      	bne.n	802716a <strncmp+0x1a>
 8027166:	42a3      	cmp	r3, r4
 8027168:	d101      	bne.n	802716e <strncmp+0x1e>
 802716a:	1a80      	subs	r0, r0, r2
 802716c:	bd10      	pop	{r4, pc}
 802716e:	2800      	cmp	r0, #0
 8027170:	d1f3      	bne.n	802715a <strncmp+0xa>
 8027172:	e7fa      	b.n	802716a <strncmp+0x1a>
 8027174:	4610      	mov	r0, r2
 8027176:	e7f9      	b.n	802716c <strncmp+0x1c>

08027178 <__swbuf_r>:
 8027178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802717a:	460e      	mov	r6, r1
 802717c:	4614      	mov	r4, r2
 802717e:	4605      	mov	r5, r0
 8027180:	b118      	cbz	r0, 802718a <__swbuf_r+0x12>
 8027182:	6983      	ldr	r3, [r0, #24]
 8027184:	b90b      	cbnz	r3, 802718a <__swbuf_r+0x12>
 8027186:	f000 fa33 	bl	80275f0 <__sinit>
 802718a:	4b21      	ldr	r3, [pc, #132]	; (8027210 <__swbuf_r+0x98>)
 802718c:	429c      	cmp	r4, r3
 802718e:	d12b      	bne.n	80271e8 <__swbuf_r+0x70>
 8027190:	686c      	ldr	r4, [r5, #4]
 8027192:	69a3      	ldr	r3, [r4, #24]
 8027194:	60a3      	str	r3, [r4, #8]
 8027196:	89a3      	ldrh	r3, [r4, #12]
 8027198:	071a      	lsls	r2, r3, #28
 802719a:	d52f      	bpl.n	80271fc <__swbuf_r+0x84>
 802719c:	6923      	ldr	r3, [r4, #16]
 802719e:	b36b      	cbz	r3, 80271fc <__swbuf_r+0x84>
 80271a0:	6923      	ldr	r3, [r4, #16]
 80271a2:	6820      	ldr	r0, [r4, #0]
 80271a4:	1ac0      	subs	r0, r0, r3
 80271a6:	6963      	ldr	r3, [r4, #20]
 80271a8:	b2f6      	uxtb	r6, r6
 80271aa:	4283      	cmp	r3, r0
 80271ac:	4637      	mov	r7, r6
 80271ae:	dc04      	bgt.n	80271ba <__swbuf_r+0x42>
 80271b0:	4621      	mov	r1, r4
 80271b2:	4628      	mov	r0, r5
 80271b4:	f000 f988 	bl	80274c8 <_fflush_r>
 80271b8:	bb30      	cbnz	r0, 8027208 <__swbuf_r+0x90>
 80271ba:	68a3      	ldr	r3, [r4, #8]
 80271bc:	3b01      	subs	r3, #1
 80271be:	60a3      	str	r3, [r4, #8]
 80271c0:	6823      	ldr	r3, [r4, #0]
 80271c2:	1c5a      	adds	r2, r3, #1
 80271c4:	6022      	str	r2, [r4, #0]
 80271c6:	701e      	strb	r6, [r3, #0]
 80271c8:	6963      	ldr	r3, [r4, #20]
 80271ca:	3001      	adds	r0, #1
 80271cc:	4283      	cmp	r3, r0
 80271ce:	d004      	beq.n	80271da <__swbuf_r+0x62>
 80271d0:	89a3      	ldrh	r3, [r4, #12]
 80271d2:	07db      	lsls	r3, r3, #31
 80271d4:	d506      	bpl.n	80271e4 <__swbuf_r+0x6c>
 80271d6:	2e0a      	cmp	r6, #10
 80271d8:	d104      	bne.n	80271e4 <__swbuf_r+0x6c>
 80271da:	4621      	mov	r1, r4
 80271dc:	4628      	mov	r0, r5
 80271de:	f000 f973 	bl	80274c8 <_fflush_r>
 80271e2:	b988      	cbnz	r0, 8027208 <__swbuf_r+0x90>
 80271e4:	4638      	mov	r0, r7
 80271e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80271e8:	4b0a      	ldr	r3, [pc, #40]	; (8027214 <__swbuf_r+0x9c>)
 80271ea:	429c      	cmp	r4, r3
 80271ec:	d101      	bne.n	80271f2 <__swbuf_r+0x7a>
 80271ee:	68ac      	ldr	r4, [r5, #8]
 80271f0:	e7cf      	b.n	8027192 <__swbuf_r+0x1a>
 80271f2:	4b09      	ldr	r3, [pc, #36]	; (8027218 <__swbuf_r+0xa0>)
 80271f4:	429c      	cmp	r4, r3
 80271f6:	bf08      	it	eq
 80271f8:	68ec      	ldreq	r4, [r5, #12]
 80271fa:	e7ca      	b.n	8027192 <__swbuf_r+0x1a>
 80271fc:	4621      	mov	r1, r4
 80271fe:	4628      	mov	r0, r5
 8027200:	f000 f80c 	bl	802721c <__swsetup_r>
 8027204:	2800      	cmp	r0, #0
 8027206:	d0cb      	beq.n	80271a0 <__swbuf_r+0x28>
 8027208:	f04f 37ff 	mov.w	r7, #4294967295
 802720c:	e7ea      	b.n	80271e4 <__swbuf_r+0x6c>
 802720e:	bf00      	nop
 8027210:	0802b5b4 	.word	0x0802b5b4
 8027214:	0802b5d4 	.word	0x0802b5d4
 8027218:	0802b594 	.word	0x0802b594

0802721c <__swsetup_r>:
 802721c:	4b32      	ldr	r3, [pc, #200]	; (80272e8 <__swsetup_r+0xcc>)
 802721e:	b570      	push	{r4, r5, r6, lr}
 8027220:	681d      	ldr	r5, [r3, #0]
 8027222:	4606      	mov	r6, r0
 8027224:	460c      	mov	r4, r1
 8027226:	b125      	cbz	r5, 8027232 <__swsetup_r+0x16>
 8027228:	69ab      	ldr	r3, [r5, #24]
 802722a:	b913      	cbnz	r3, 8027232 <__swsetup_r+0x16>
 802722c:	4628      	mov	r0, r5
 802722e:	f000 f9df 	bl	80275f0 <__sinit>
 8027232:	4b2e      	ldr	r3, [pc, #184]	; (80272ec <__swsetup_r+0xd0>)
 8027234:	429c      	cmp	r4, r3
 8027236:	d10f      	bne.n	8027258 <__swsetup_r+0x3c>
 8027238:	686c      	ldr	r4, [r5, #4]
 802723a:	89a3      	ldrh	r3, [r4, #12]
 802723c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8027240:	0719      	lsls	r1, r3, #28
 8027242:	d42c      	bmi.n	802729e <__swsetup_r+0x82>
 8027244:	06dd      	lsls	r5, r3, #27
 8027246:	d411      	bmi.n	802726c <__swsetup_r+0x50>
 8027248:	2309      	movs	r3, #9
 802724a:	6033      	str	r3, [r6, #0]
 802724c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8027250:	81a3      	strh	r3, [r4, #12]
 8027252:	f04f 30ff 	mov.w	r0, #4294967295
 8027256:	e03e      	b.n	80272d6 <__swsetup_r+0xba>
 8027258:	4b25      	ldr	r3, [pc, #148]	; (80272f0 <__swsetup_r+0xd4>)
 802725a:	429c      	cmp	r4, r3
 802725c:	d101      	bne.n	8027262 <__swsetup_r+0x46>
 802725e:	68ac      	ldr	r4, [r5, #8]
 8027260:	e7eb      	b.n	802723a <__swsetup_r+0x1e>
 8027262:	4b24      	ldr	r3, [pc, #144]	; (80272f4 <__swsetup_r+0xd8>)
 8027264:	429c      	cmp	r4, r3
 8027266:	bf08      	it	eq
 8027268:	68ec      	ldreq	r4, [r5, #12]
 802726a:	e7e6      	b.n	802723a <__swsetup_r+0x1e>
 802726c:	0758      	lsls	r0, r3, #29
 802726e:	d512      	bpl.n	8027296 <__swsetup_r+0x7a>
 8027270:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8027272:	b141      	cbz	r1, 8027286 <__swsetup_r+0x6a>
 8027274:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8027278:	4299      	cmp	r1, r3
 802727a:	d002      	beq.n	8027282 <__swsetup_r+0x66>
 802727c:	4630      	mov	r0, r6
 802727e:	f7ff fb45 	bl	802690c <_free_r>
 8027282:	2300      	movs	r3, #0
 8027284:	6363      	str	r3, [r4, #52]	; 0x34
 8027286:	89a3      	ldrh	r3, [r4, #12]
 8027288:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802728c:	81a3      	strh	r3, [r4, #12]
 802728e:	2300      	movs	r3, #0
 8027290:	6063      	str	r3, [r4, #4]
 8027292:	6923      	ldr	r3, [r4, #16]
 8027294:	6023      	str	r3, [r4, #0]
 8027296:	89a3      	ldrh	r3, [r4, #12]
 8027298:	f043 0308 	orr.w	r3, r3, #8
 802729c:	81a3      	strh	r3, [r4, #12]
 802729e:	6923      	ldr	r3, [r4, #16]
 80272a0:	b94b      	cbnz	r3, 80272b6 <__swsetup_r+0x9a>
 80272a2:	89a3      	ldrh	r3, [r4, #12]
 80272a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80272a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80272ac:	d003      	beq.n	80272b6 <__swsetup_r+0x9a>
 80272ae:	4621      	mov	r1, r4
 80272b0:	4630      	mov	r0, r6
 80272b2:	f000 fa63 	bl	802777c <__smakebuf_r>
 80272b6:	89a0      	ldrh	r0, [r4, #12]
 80272b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80272bc:	f010 0301 	ands.w	r3, r0, #1
 80272c0:	d00a      	beq.n	80272d8 <__swsetup_r+0xbc>
 80272c2:	2300      	movs	r3, #0
 80272c4:	60a3      	str	r3, [r4, #8]
 80272c6:	6963      	ldr	r3, [r4, #20]
 80272c8:	425b      	negs	r3, r3
 80272ca:	61a3      	str	r3, [r4, #24]
 80272cc:	6923      	ldr	r3, [r4, #16]
 80272ce:	b943      	cbnz	r3, 80272e2 <__swsetup_r+0xc6>
 80272d0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80272d4:	d1ba      	bne.n	802724c <__swsetup_r+0x30>
 80272d6:	bd70      	pop	{r4, r5, r6, pc}
 80272d8:	0781      	lsls	r1, r0, #30
 80272da:	bf58      	it	pl
 80272dc:	6963      	ldrpl	r3, [r4, #20]
 80272de:	60a3      	str	r3, [r4, #8]
 80272e0:	e7f4      	b.n	80272cc <__swsetup_r+0xb0>
 80272e2:	2000      	movs	r0, #0
 80272e4:	e7f7      	b.n	80272d6 <__swsetup_r+0xba>
 80272e6:	bf00      	nop
 80272e8:	200000a8 	.word	0x200000a8
 80272ec:	0802b5b4 	.word	0x0802b5b4
 80272f0:	0802b5d4 	.word	0x0802b5d4
 80272f4:	0802b594 	.word	0x0802b594

080272f8 <__register_exitproc>:
 80272f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80272fc:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 80273b8 <__register_exitproc+0xc0>
 8027300:	4606      	mov	r6, r0
 8027302:	f8d8 0000 	ldr.w	r0, [r8]
 8027306:	461f      	mov	r7, r3
 8027308:	460d      	mov	r5, r1
 802730a:	4691      	mov	r9, r2
 802730c:	f000 fa0e 	bl	802772c <__retarget_lock_acquire_recursive>
 8027310:	4b25      	ldr	r3, [pc, #148]	; (80273a8 <__register_exitproc+0xb0>)
 8027312:	681c      	ldr	r4, [r3, #0]
 8027314:	b934      	cbnz	r4, 8027324 <__register_exitproc+0x2c>
 8027316:	4c25      	ldr	r4, [pc, #148]	; (80273ac <__register_exitproc+0xb4>)
 8027318:	601c      	str	r4, [r3, #0]
 802731a:	4b25      	ldr	r3, [pc, #148]	; (80273b0 <__register_exitproc+0xb8>)
 802731c:	b113      	cbz	r3, 8027324 <__register_exitproc+0x2c>
 802731e:	681b      	ldr	r3, [r3, #0]
 8027320:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8027324:	6863      	ldr	r3, [r4, #4]
 8027326:	2b1f      	cmp	r3, #31
 8027328:	dd07      	ble.n	802733a <__register_exitproc+0x42>
 802732a:	f8d8 0000 	ldr.w	r0, [r8]
 802732e:	f000 f9ff 	bl	8027730 <__retarget_lock_release_recursive>
 8027332:	f04f 30ff 	mov.w	r0, #4294967295
 8027336:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802733a:	b34e      	cbz	r6, 8027390 <__register_exitproc+0x98>
 802733c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8027340:	b988      	cbnz	r0, 8027366 <__register_exitproc+0x6e>
 8027342:	4b1c      	ldr	r3, [pc, #112]	; (80273b4 <__register_exitproc+0xbc>)
 8027344:	b923      	cbnz	r3, 8027350 <__register_exitproc+0x58>
 8027346:	f8d8 0000 	ldr.w	r0, [r8]
 802734a:	f000 f9f0 	bl	802772e <__retarget_lock_release>
 802734e:	e7f0      	b.n	8027332 <__register_exitproc+0x3a>
 8027350:	f44f 7084 	mov.w	r0, #264	; 0x108
 8027354:	f7ff fab4 	bl	80268c0 <malloc>
 8027358:	2800      	cmp	r0, #0
 802735a:	d0f4      	beq.n	8027346 <__register_exitproc+0x4e>
 802735c:	2300      	movs	r3, #0
 802735e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8027362:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8027366:	6863      	ldr	r3, [r4, #4]
 8027368:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 802736c:	2201      	movs	r2, #1
 802736e:	409a      	lsls	r2, r3
 8027370:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8027374:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8027378:	4313      	orrs	r3, r2
 802737a:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 802737e:	2e02      	cmp	r6, #2
 8027380:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8027384:	bf02      	ittt	eq
 8027386:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 802738a:	4313      	orreq	r3, r2
 802738c:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 8027390:	6863      	ldr	r3, [r4, #4]
 8027392:	f8d8 0000 	ldr.w	r0, [r8]
 8027396:	1c5a      	adds	r2, r3, #1
 8027398:	3302      	adds	r3, #2
 802739a:	6062      	str	r2, [r4, #4]
 802739c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 80273a0:	f000 f9c6 	bl	8027730 <__retarget_lock_release_recursive>
 80273a4:	2000      	movs	r0, #0
 80273a6:	e7c6      	b.n	8027336 <__register_exitproc+0x3e>
 80273a8:	200246c0 	.word	0x200246c0
 80273ac:	20024634 	.word	0x20024634
 80273b0:	0802b590 	.word	0x0802b590
 80273b4:	080268c1 	.word	0x080268c1
 80273b8:	2000010c 	.word	0x2000010c

080273bc <__sflush_r>:
 80273bc:	898a      	ldrh	r2, [r1, #12]
 80273be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80273c2:	4605      	mov	r5, r0
 80273c4:	0710      	lsls	r0, r2, #28
 80273c6:	460c      	mov	r4, r1
 80273c8:	d458      	bmi.n	802747c <__sflush_r+0xc0>
 80273ca:	684b      	ldr	r3, [r1, #4]
 80273cc:	2b00      	cmp	r3, #0
 80273ce:	dc05      	bgt.n	80273dc <__sflush_r+0x20>
 80273d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80273d2:	2b00      	cmp	r3, #0
 80273d4:	dc02      	bgt.n	80273dc <__sflush_r+0x20>
 80273d6:	2000      	movs	r0, #0
 80273d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80273dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80273de:	2e00      	cmp	r6, #0
 80273e0:	d0f9      	beq.n	80273d6 <__sflush_r+0x1a>
 80273e2:	2300      	movs	r3, #0
 80273e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80273e8:	682f      	ldr	r7, [r5, #0]
 80273ea:	602b      	str	r3, [r5, #0]
 80273ec:	d032      	beq.n	8027454 <__sflush_r+0x98>
 80273ee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80273f0:	89a3      	ldrh	r3, [r4, #12]
 80273f2:	075a      	lsls	r2, r3, #29
 80273f4:	d505      	bpl.n	8027402 <__sflush_r+0x46>
 80273f6:	6863      	ldr	r3, [r4, #4]
 80273f8:	1ac0      	subs	r0, r0, r3
 80273fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80273fc:	b10b      	cbz	r3, 8027402 <__sflush_r+0x46>
 80273fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8027400:	1ac0      	subs	r0, r0, r3
 8027402:	2300      	movs	r3, #0
 8027404:	4602      	mov	r2, r0
 8027406:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8027408:	6a21      	ldr	r1, [r4, #32]
 802740a:	4628      	mov	r0, r5
 802740c:	47b0      	blx	r6
 802740e:	1c43      	adds	r3, r0, #1
 8027410:	89a3      	ldrh	r3, [r4, #12]
 8027412:	d106      	bne.n	8027422 <__sflush_r+0x66>
 8027414:	6829      	ldr	r1, [r5, #0]
 8027416:	291d      	cmp	r1, #29
 8027418:	d82c      	bhi.n	8027474 <__sflush_r+0xb8>
 802741a:	4a2a      	ldr	r2, [pc, #168]	; (80274c4 <__sflush_r+0x108>)
 802741c:	40ca      	lsrs	r2, r1
 802741e:	07d6      	lsls	r6, r2, #31
 8027420:	d528      	bpl.n	8027474 <__sflush_r+0xb8>
 8027422:	2200      	movs	r2, #0
 8027424:	6062      	str	r2, [r4, #4]
 8027426:	04d9      	lsls	r1, r3, #19
 8027428:	6922      	ldr	r2, [r4, #16]
 802742a:	6022      	str	r2, [r4, #0]
 802742c:	d504      	bpl.n	8027438 <__sflush_r+0x7c>
 802742e:	1c42      	adds	r2, r0, #1
 8027430:	d101      	bne.n	8027436 <__sflush_r+0x7a>
 8027432:	682b      	ldr	r3, [r5, #0]
 8027434:	b903      	cbnz	r3, 8027438 <__sflush_r+0x7c>
 8027436:	6560      	str	r0, [r4, #84]	; 0x54
 8027438:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802743a:	602f      	str	r7, [r5, #0]
 802743c:	2900      	cmp	r1, #0
 802743e:	d0ca      	beq.n	80273d6 <__sflush_r+0x1a>
 8027440:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8027444:	4299      	cmp	r1, r3
 8027446:	d002      	beq.n	802744e <__sflush_r+0x92>
 8027448:	4628      	mov	r0, r5
 802744a:	f7ff fa5f 	bl	802690c <_free_r>
 802744e:	2000      	movs	r0, #0
 8027450:	6360      	str	r0, [r4, #52]	; 0x34
 8027452:	e7c1      	b.n	80273d8 <__sflush_r+0x1c>
 8027454:	6a21      	ldr	r1, [r4, #32]
 8027456:	2301      	movs	r3, #1
 8027458:	4628      	mov	r0, r5
 802745a:	47b0      	blx	r6
 802745c:	1c41      	adds	r1, r0, #1
 802745e:	d1c7      	bne.n	80273f0 <__sflush_r+0x34>
 8027460:	682b      	ldr	r3, [r5, #0]
 8027462:	2b00      	cmp	r3, #0
 8027464:	d0c4      	beq.n	80273f0 <__sflush_r+0x34>
 8027466:	2b1d      	cmp	r3, #29
 8027468:	d001      	beq.n	802746e <__sflush_r+0xb2>
 802746a:	2b16      	cmp	r3, #22
 802746c:	d101      	bne.n	8027472 <__sflush_r+0xb6>
 802746e:	602f      	str	r7, [r5, #0]
 8027470:	e7b1      	b.n	80273d6 <__sflush_r+0x1a>
 8027472:	89a3      	ldrh	r3, [r4, #12]
 8027474:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8027478:	81a3      	strh	r3, [r4, #12]
 802747a:	e7ad      	b.n	80273d8 <__sflush_r+0x1c>
 802747c:	690f      	ldr	r7, [r1, #16]
 802747e:	2f00      	cmp	r7, #0
 8027480:	d0a9      	beq.n	80273d6 <__sflush_r+0x1a>
 8027482:	0793      	lsls	r3, r2, #30
 8027484:	680e      	ldr	r6, [r1, #0]
 8027486:	bf08      	it	eq
 8027488:	694b      	ldreq	r3, [r1, #20]
 802748a:	600f      	str	r7, [r1, #0]
 802748c:	bf18      	it	ne
 802748e:	2300      	movne	r3, #0
 8027490:	eba6 0807 	sub.w	r8, r6, r7
 8027494:	608b      	str	r3, [r1, #8]
 8027496:	f1b8 0f00 	cmp.w	r8, #0
 802749a:	dd9c      	ble.n	80273d6 <__sflush_r+0x1a>
 802749c:	6a21      	ldr	r1, [r4, #32]
 802749e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80274a0:	4643      	mov	r3, r8
 80274a2:	463a      	mov	r2, r7
 80274a4:	4628      	mov	r0, r5
 80274a6:	47b0      	blx	r6
 80274a8:	2800      	cmp	r0, #0
 80274aa:	dc06      	bgt.n	80274ba <__sflush_r+0xfe>
 80274ac:	89a3      	ldrh	r3, [r4, #12]
 80274ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80274b2:	81a3      	strh	r3, [r4, #12]
 80274b4:	f04f 30ff 	mov.w	r0, #4294967295
 80274b8:	e78e      	b.n	80273d8 <__sflush_r+0x1c>
 80274ba:	4407      	add	r7, r0
 80274bc:	eba8 0800 	sub.w	r8, r8, r0
 80274c0:	e7e9      	b.n	8027496 <__sflush_r+0xda>
 80274c2:	bf00      	nop
 80274c4:	20400001 	.word	0x20400001

080274c8 <_fflush_r>:
 80274c8:	b538      	push	{r3, r4, r5, lr}
 80274ca:	690b      	ldr	r3, [r1, #16]
 80274cc:	4605      	mov	r5, r0
 80274ce:	460c      	mov	r4, r1
 80274d0:	b913      	cbnz	r3, 80274d8 <_fflush_r+0x10>
 80274d2:	2500      	movs	r5, #0
 80274d4:	4628      	mov	r0, r5
 80274d6:	bd38      	pop	{r3, r4, r5, pc}
 80274d8:	b118      	cbz	r0, 80274e2 <_fflush_r+0x1a>
 80274da:	6983      	ldr	r3, [r0, #24]
 80274dc:	b90b      	cbnz	r3, 80274e2 <_fflush_r+0x1a>
 80274de:	f000 f887 	bl	80275f0 <__sinit>
 80274e2:	4b14      	ldr	r3, [pc, #80]	; (8027534 <_fflush_r+0x6c>)
 80274e4:	429c      	cmp	r4, r3
 80274e6:	d11b      	bne.n	8027520 <_fflush_r+0x58>
 80274e8:	686c      	ldr	r4, [r5, #4]
 80274ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80274ee:	2b00      	cmp	r3, #0
 80274f0:	d0ef      	beq.n	80274d2 <_fflush_r+0xa>
 80274f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80274f4:	07d0      	lsls	r0, r2, #31
 80274f6:	d404      	bmi.n	8027502 <_fflush_r+0x3a>
 80274f8:	0599      	lsls	r1, r3, #22
 80274fa:	d402      	bmi.n	8027502 <_fflush_r+0x3a>
 80274fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80274fe:	f000 f915 	bl	802772c <__retarget_lock_acquire_recursive>
 8027502:	4628      	mov	r0, r5
 8027504:	4621      	mov	r1, r4
 8027506:	f7ff ff59 	bl	80273bc <__sflush_r>
 802750a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802750c:	07da      	lsls	r2, r3, #31
 802750e:	4605      	mov	r5, r0
 8027510:	d4e0      	bmi.n	80274d4 <_fflush_r+0xc>
 8027512:	89a3      	ldrh	r3, [r4, #12]
 8027514:	059b      	lsls	r3, r3, #22
 8027516:	d4dd      	bmi.n	80274d4 <_fflush_r+0xc>
 8027518:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802751a:	f000 f909 	bl	8027730 <__retarget_lock_release_recursive>
 802751e:	e7d9      	b.n	80274d4 <_fflush_r+0xc>
 8027520:	4b05      	ldr	r3, [pc, #20]	; (8027538 <_fflush_r+0x70>)
 8027522:	429c      	cmp	r4, r3
 8027524:	d101      	bne.n	802752a <_fflush_r+0x62>
 8027526:	68ac      	ldr	r4, [r5, #8]
 8027528:	e7df      	b.n	80274ea <_fflush_r+0x22>
 802752a:	4b04      	ldr	r3, [pc, #16]	; (802753c <_fflush_r+0x74>)
 802752c:	429c      	cmp	r4, r3
 802752e:	bf08      	it	eq
 8027530:	68ec      	ldreq	r4, [r5, #12]
 8027532:	e7da      	b.n	80274ea <_fflush_r+0x22>
 8027534:	0802b5b4 	.word	0x0802b5b4
 8027538:	0802b5d4 	.word	0x0802b5d4
 802753c:	0802b594 	.word	0x0802b594

08027540 <std>:
 8027540:	2300      	movs	r3, #0
 8027542:	b510      	push	{r4, lr}
 8027544:	4604      	mov	r4, r0
 8027546:	e9c0 3300 	strd	r3, r3, [r0]
 802754a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802754e:	6083      	str	r3, [r0, #8]
 8027550:	8181      	strh	r1, [r0, #12]
 8027552:	6643      	str	r3, [r0, #100]	; 0x64
 8027554:	81c2      	strh	r2, [r0, #14]
 8027556:	6183      	str	r3, [r0, #24]
 8027558:	4619      	mov	r1, r3
 802755a:	2208      	movs	r2, #8
 802755c:	305c      	adds	r0, #92	; 0x5c
 802755e:	f7ff f9cd 	bl	80268fc <memset>
 8027562:	4b05      	ldr	r3, [pc, #20]	; (8027578 <std+0x38>)
 8027564:	6263      	str	r3, [r4, #36]	; 0x24
 8027566:	4b05      	ldr	r3, [pc, #20]	; (802757c <std+0x3c>)
 8027568:	62a3      	str	r3, [r4, #40]	; 0x28
 802756a:	4b05      	ldr	r3, [pc, #20]	; (8027580 <std+0x40>)
 802756c:	62e3      	str	r3, [r4, #44]	; 0x2c
 802756e:	4b05      	ldr	r3, [pc, #20]	; (8027584 <std+0x44>)
 8027570:	6224      	str	r4, [r4, #32]
 8027572:	6323      	str	r3, [r4, #48]	; 0x30
 8027574:	bd10      	pop	{r4, pc}
 8027576:	bf00      	nop
 8027578:	08027815 	.word	0x08027815
 802757c:	08027837 	.word	0x08027837
 8027580:	0802786f 	.word	0x0802786f
 8027584:	08027893 	.word	0x08027893

08027588 <_cleanup_r>:
 8027588:	4901      	ldr	r1, [pc, #4]	; (8027590 <_cleanup_r+0x8>)
 802758a:	f000 b8af 	b.w	80276ec <_fwalk_reent>
 802758e:	bf00      	nop
 8027590:	080274c9 	.word	0x080274c9

08027594 <__sfmoreglue>:
 8027594:	b570      	push	{r4, r5, r6, lr}
 8027596:	2268      	movs	r2, #104	; 0x68
 8027598:	1e4d      	subs	r5, r1, #1
 802759a:	4355      	muls	r5, r2
 802759c:	460e      	mov	r6, r1
 802759e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80275a2:	f7ff fa1f 	bl	80269e4 <_malloc_r>
 80275a6:	4604      	mov	r4, r0
 80275a8:	b140      	cbz	r0, 80275bc <__sfmoreglue+0x28>
 80275aa:	2100      	movs	r1, #0
 80275ac:	e9c0 1600 	strd	r1, r6, [r0]
 80275b0:	300c      	adds	r0, #12
 80275b2:	60a0      	str	r0, [r4, #8]
 80275b4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80275b8:	f7ff f9a0 	bl	80268fc <memset>
 80275bc:	4620      	mov	r0, r4
 80275be:	bd70      	pop	{r4, r5, r6, pc}

080275c0 <__sfp_lock_acquire>:
 80275c0:	4801      	ldr	r0, [pc, #4]	; (80275c8 <__sfp_lock_acquire+0x8>)
 80275c2:	f000 b8b3 	b.w	802772c <__retarget_lock_acquire_recursive>
 80275c6:	bf00      	nop
 80275c8:	200246c6 	.word	0x200246c6

080275cc <__sfp_lock_release>:
 80275cc:	4801      	ldr	r0, [pc, #4]	; (80275d4 <__sfp_lock_release+0x8>)
 80275ce:	f000 b8af 	b.w	8027730 <__retarget_lock_release_recursive>
 80275d2:	bf00      	nop
 80275d4:	200246c6 	.word	0x200246c6

080275d8 <__sinit_lock_acquire>:
 80275d8:	4801      	ldr	r0, [pc, #4]	; (80275e0 <__sinit_lock_acquire+0x8>)
 80275da:	f000 b8a7 	b.w	802772c <__retarget_lock_acquire_recursive>
 80275de:	bf00      	nop
 80275e0:	200246c7 	.word	0x200246c7

080275e4 <__sinit_lock_release>:
 80275e4:	4801      	ldr	r0, [pc, #4]	; (80275ec <__sinit_lock_release+0x8>)
 80275e6:	f000 b8a3 	b.w	8027730 <__retarget_lock_release_recursive>
 80275ea:	bf00      	nop
 80275ec:	200246c7 	.word	0x200246c7

080275f0 <__sinit>:
 80275f0:	b510      	push	{r4, lr}
 80275f2:	4604      	mov	r4, r0
 80275f4:	f7ff fff0 	bl	80275d8 <__sinit_lock_acquire>
 80275f8:	69a3      	ldr	r3, [r4, #24]
 80275fa:	b11b      	cbz	r3, 8027604 <__sinit+0x14>
 80275fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8027600:	f7ff bff0 	b.w	80275e4 <__sinit_lock_release>
 8027604:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8027608:	6523      	str	r3, [r4, #80]	; 0x50
 802760a:	4b13      	ldr	r3, [pc, #76]	; (8027658 <__sinit+0x68>)
 802760c:	4a13      	ldr	r2, [pc, #76]	; (802765c <__sinit+0x6c>)
 802760e:	681b      	ldr	r3, [r3, #0]
 8027610:	62a2      	str	r2, [r4, #40]	; 0x28
 8027612:	42a3      	cmp	r3, r4
 8027614:	bf04      	itt	eq
 8027616:	2301      	moveq	r3, #1
 8027618:	61a3      	streq	r3, [r4, #24]
 802761a:	4620      	mov	r0, r4
 802761c:	f000 f820 	bl	8027660 <__sfp>
 8027620:	6060      	str	r0, [r4, #4]
 8027622:	4620      	mov	r0, r4
 8027624:	f000 f81c 	bl	8027660 <__sfp>
 8027628:	60a0      	str	r0, [r4, #8]
 802762a:	4620      	mov	r0, r4
 802762c:	f000 f818 	bl	8027660 <__sfp>
 8027630:	2200      	movs	r2, #0
 8027632:	60e0      	str	r0, [r4, #12]
 8027634:	2104      	movs	r1, #4
 8027636:	6860      	ldr	r0, [r4, #4]
 8027638:	f7ff ff82 	bl	8027540 <std>
 802763c:	68a0      	ldr	r0, [r4, #8]
 802763e:	2201      	movs	r2, #1
 8027640:	2109      	movs	r1, #9
 8027642:	f7ff ff7d 	bl	8027540 <std>
 8027646:	68e0      	ldr	r0, [r4, #12]
 8027648:	2202      	movs	r2, #2
 802764a:	2112      	movs	r1, #18
 802764c:	f7ff ff78 	bl	8027540 <std>
 8027650:	2301      	movs	r3, #1
 8027652:	61a3      	str	r3, [r4, #24]
 8027654:	e7d2      	b.n	80275fc <__sinit+0xc>
 8027656:	bf00      	nop
 8027658:	0802b558 	.word	0x0802b558
 802765c:	08027589 	.word	0x08027589

08027660 <__sfp>:
 8027660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027662:	4607      	mov	r7, r0
 8027664:	f7ff ffac 	bl	80275c0 <__sfp_lock_acquire>
 8027668:	4b1e      	ldr	r3, [pc, #120]	; (80276e4 <__sfp+0x84>)
 802766a:	681e      	ldr	r6, [r3, #0]
 802766c:	69b3      	ldr	r3, [r6, #24]
 802766e:	b913      	cbnz	r3, 8027676 <__sfp+0x16>
 8027670:	4630      	mov	r0, r6
 8027672:	f7ff ffbd 	bl	80275f0 <__sinit>
 8027676:	3648      	adds	r6, #72	; 0x48
 8027678:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 802767c:	3b01      	subs	r3, #1
 802767e:	d503      	bpl.n	8027688 <__sfp+0x28>
 8027680:	6833      	ldr	r3, [r6, #0]
 8027682:	b30b      	cbz	r3, 80276c8 <__sfp+0x68>
 8027684:	6836      	ldr	r6, [r6, #0]
 8027686:	e7f7      	b.n	8027678 <__sfp+0x18>
 8027688:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 802768c:	b9d5      	cbnz	r5, 80276c4 <__sfp+0x64>
 802768e:	4b16      	ldr	r3, [pc, #88]	; (80276e8 <__sfp+0x88>)
 8027690:	60e3      	str	r3, [r4, #12]
 8027692:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8027696:	6665      	str	r5, [r4, #100]	; 0x64
 8027698:	f000 f847 	bl	802772a <__retarget_lock_init_recursive>
 802769c:	f7ff ff96 	bl	80275cc <__sfp_lock_release>
 80276a0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80276a4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80276a8:	6025      	str	r5, [r4, #0]
 80276aa:	61a5      	str	r5, [r4, #24]
 80276ac:	2208      	movs	r2, #8
 80276ae:	4629      	mov	r1, r5
 80276b0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80276b4:	f7ff f922 	bl	80268fc <memset>
 80276b8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80276bc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80276c0:	4620      	mov	r0, r4
 80276c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80276c4:	3468      	adds	r4, #104	; 0x68
 80276c6:	e7d9      	b.n	802767c <__sfp+0x1c>
 80276c8:	2104      	movs	r1, #4
 80276ca:	4638      	mov	r0, r7
 80276cc:	f7ff ff62 	bl	8027594 <__sfmoreglue>
 80276d0:	4604      	mov	r4, r0
 80276d2:	6030      	str	r0, [r6, #0]
 80276d4:	2800      	cmp	r0, #0
 80276d6:	d1d5      	bne.n	8027684 <__sfp+0x24>
 80276d8:	f7ff ff78 	bl	80275cc <__sfp_lock_release>
 80276dc:	230c      	movs	r3, #12
 80276de:	603b      	str	r3, [r7, #0]
 80276e0:	e7ee      	b.n	80276c0 <__sfp+0x60>
 80276e2:	bf00      	nop
 80276e4:	0802b558 	.word	0x0802b558
 80276e8:	ffff0001 	.word	0xffff0001

080276ec <_fwalk_reent>:
 80276ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80276f0:	4606      	mov	r6, r0
 80276f2:	4688      	mov	r8, r1
 80276f4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80276f8:	2700      	movs	r7, #0
 80276fa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80276fe:	f1b9 0901 	subs.w	r9, r9, #1
 8027702:	d505      	bpl.n	8027710 <_fwalk_reent+0x24>
 8027704:	6824      	ldr	r4, [r4, #0]
 8027706:	2c00      	cmp	r4, #0
 8027708:	d1f7      	bne.n	80276fa <_fwalk_reent+0xe>
 802770a:	4638      	mov	r0, r7
 802770c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8027710:	89ab      	ldrh	r3, [r5, #12]
 8027712:	2b01      	cmp	r3, #1
 8027714:	d907      	bls.n	8027726 <_fwalk_reent+0x3a>
 8027716:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802771a:	3301      	adds	r3, #1
 802771c:	d003      	beq.n	8027726 <_fwalk_reent+0x3a>
 802771e:	4629      	mov	r1, r5
 8027720:	4630      	mov	r0, r6
 8027722:	47c0      	blx	r8
 8027724:	4307      	orrs	r7, r0
 8027726:	3568      	adds	r5, #104	; 0x68
 8027728:	e7e9      	b.n	80276fe <_fwalk_reent+0x12>

0802772a <__retarget_lock_init_recursive>:
 802772a:	4770      	bx	lr

0802772c <__retarget_lock_acquire_recursive>:
 802772c:	4770      	bx	lr

0802772e <__retarget_lock_release>:
 802772e:	4770      	bx	lr

08027730 <__retarget_lock_release_recursive>:
 8027730:	4770      	bx	lr

08027732 <__swhatbuf_r>:
 8027732:	b570      	push	{r4, r5, r6, lr}
 8027734:	460e      	mov	r6, r1
 8027736:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802773a:	2900      	cmp	r1, #0
 802773c:	b096      	sub	sp, #88	; 0x58
 802773e:	4614      	mov	r4, r2
 8027740:	461d      	mov	r5, r3
 8027742:	da08      	bge.n	8027756 <__swhatbuf_r+0x24>
 8027744:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8027748:	2200      	movs	r2, #0
 802774a:	602a      	str	r2, [r5, #0]
 802774c:	061a      	lsls	r2, r3, #24
 802774e:	d410      	bmi.n	8027772 <__swhatbuf_r+0x40>
 8027750:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8027754:	e00e      	b.n	8027774 <__swhatbuf_r+0x42>
 8027756:	466a      	mov	r2, sp
 8027758:	f000 f8c2 	bl	80278e0 <_fstat_r>
 802775c:	2800      	cmp	r0, #0
 802775e:	dbf1      	blt.n	8027744 <__swhatbuf_r+0x12>
 8027760:	9a01      	ldr	r2, [sp, #4]
 8027762:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8027766:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802776a:	425a      	negs	r2, r3
 802776c:	415a      	adcs	r2, r3
 802776e:	602a      	str	r2, [r5, #0]
 8027770:	e7ee      	b.n	8027750 <__swhatbuf_r+0x1e>
 8027772:	2340      	movs	r3, #64	; 0x40
 8027774:	2000      	movs	r0, #0
 8027776:	6023      	str	r3, [r4, #0]
 8027778:	b016      	add	sp, #88	; 0x58
 802777a:	bd70      	pop	{r4, r5, r6, pc}

0802777c <__smakebuf_r>:
 802777c:	898b      	ldrh	r3, [r1, #12]
 802777e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8027780:	079d      	lsls	r5, r3, #30
 8027782:	4606      	mov	r6, r0
 8027784:	460c      	mov	r4, r1
 8027786:	d507      	bpl.n	8027798 <__smakebuf_r+0x1c>
 8027788:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802778c:	6023      	str	r3, [r4, #0]
 802778e:	6123      	str	r3, [r4, #16]
 8027790:	2301      	movs	r3, #1
 8027792:	6163      	str	r3, [r4, #20]
 8027794:	b002      	add	sp, #8
 8027796:	bd70      	pop	{r4, r5, r6, pc}
 8027798:	ab01      	add	r3, sp, #4
 802779a:	466a      	mov	r2, sp
 802779c:	f7ff ffc9 	bl	8027732 <__swhatbuf_r>
 80277a0:	9900      	ldr	r1, [sp, #0]
 80277a2:	4605      	mov	r5, r0
 80277a4:	4630      	mov	r0, r6
 80277a6:	f7ff f91d 	bl	80269e4 <_malloc_r>
 80277aa:	b948      	cbnz	r0, 80277c0 <__smakebuf_r+0x44>
 80277ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80277b0:	059a      	lsls	r2, r3, #22
 80277b2:	d4ef      	bmi.n	8027794 <__smakebuf_r+0x18>
 80277b4:	f023 0303 	bic.w	r3, r3, #3
 80277b8:	f043 0302 	orr.w	r3, r3, #2
 80277bc:	81a3      	strh	r3, [r4, #12]
 80277be:	e7e3      	b.n	8027788 <__smakebuf_r+0xc>
 80277c0:	4b0d      	ldr	r3, [pc, #52]	; (80277f8 <__smakebuf_r+0x7c>)
 80277c2:	62b3      	str	r3, [r6, #40]	; 0x28
 80277c4:	89a3      	ldrh	r3, [r4, #12]
 80277c6:	6020      	str	r0, [r4, #0]
 80277c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80277cc:	81a3      	strh	r3, [r4, #12]
 80277ce:	9b00      	ldr	r3, [sp, #0]
 80277d0:	6163      	str	r3, [r4, #20]
 80277d2:	9b01      	ldr	r3, [sp, #4]
 80277d4:	6120      	str	r0, [r4, #16]
 80277d6:	b15b      	cbz	r3, 80277f0 <__smakebuf_r+0x74>
 80277d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80277dc:	4630      	mov	r0, r6
 80277de:	f000 f891 	bl	8027904 <_isatty_r>
 80277e2:	b128      	cbz	r0, 80277f0 <__smakebuf_r+0x74>
 80277e4:	89a3      	ldrh	r3, [r4, #12]
 80277e6:	f023 0303 	bic.w	r3, r3, #3
 80277ea:	f043 0301 	orr.w	r3, r3, #1
 80277ee:	81a3      	strh	r3, [r4, #12]
 80277f0:	89a0      	ldrh	r0, [r4, #12]
 80277f2:	4305      	orrs	r5, r0
 80277f4:	81a5      	strh	r5, [r4, #12]
 80277f6:	e7cd      	b.n	8027794 <__smakebuf_r+0x18>
 80277f8:	08027589 	.word	0x08027589

080277fc <__malloc_lock>:
 80277fc:	4801      	ldr	r0, [pc, #4]	; (8027804 <__malloc_lock+0x8>)
 80277fe:	f7ff bf95 	b.w	802772c <__retarget_lock_acquire_recursive>
 8027802:	bf00      	nop
 8027804:	200246c5 	.word	0x200246c5

08027808 <__malloc_unlock>:
 8027808:	4801      	ldr	r0, [pc, #4]	; (8027810 <__malloc_unlock+0x8>)
 802780a:	f7ff bf91 	b.w	8027730 <__retarget_lock_release_recursive>
 802780e:	bf00      	nop
 8027810:	200246c5 	.word	0x200246c5

08027814 <__sread>:
 8027814:	b510      	push	{r4, lr}
 8027816:	460c      	mov	r4, r1
 8027818:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802781c:	f000 f894 	bl	8027948 <_read_r>
 8027820:	2800      	cmp	r0, #0
 8027822:	bfab      	itete	ge
 8027824:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8027826:	89a3      	ldrhlt	r3, [r4, #12]
 8027828:	181b      	addge	r3, r3, r0
 802782a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802782e:	bfac      	ite	ge
 8027830:	6563      	strge	r3, [r4, #84]	; 0x54
 8027832:	81a3      	strhlt	r3, [r4, #12]
 8027834:	bd10      	pop	{r4, pc}

08027836 <__swrite>:
 8027836:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802783a:	461f      	mov	r7, r3
 802783c:	898b      	ldrh	r3, [r1, #12]
 802783e:	05db      	lsls	r3, r3, #23
 8027840:	4605      	mov	r5, r0
 8027842:	460c      	mov	r4, r1
 8027844:	4616      	mov	r6, r2
 8027846:	d505      	bpl.n	8027854 <__swrite+0x1e>
 8027848:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802784c:	2302      	movs	r3, #2
 802784e:	2200      	movs	r2, #0
 8027850:	f000 f868 	bl	8027924 <_lseek_r>
 8027854:	89a3      	ldrh	r3, [r4, #12]
 8027856:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802785a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802785e:	81a3      	strh	r3, [r4, #12]
 8027860:	4632      	mov	r2, r6
 8027862:	463b      	mov	r3, r7
 8027864:	4628      	mov	r0, r5
 8027866:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802786a:	f000 b817 	b.w	802789c <_write_r>

0802786e <__sseek>:
 802786e:	b510      	push	{r4, lr}
 8027870:	460c      	mov	r4, r1
 8027872:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8027876:	f000 f855 	bl	8027924 <_lseek_r>
 802787a:	1c43      	adds	r3, r0, #1
 802787c:	89a3      	ldrh	r3, [r4, #12]
 802787e:	bf15      	itete	ne
 8027880:	6560      	strne	r0, [r4, #84]	; 0x54
 8027882:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8027886:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802788a:	81a3      	strheq	r3, [r4, #12]
 802788c:	bf18      	it	ne
 802788e:	81a3      	strhne	r3, [r4, #12]
 8027890:	bd10      	pop	{r4, pc}

08027892 <__sclose>:
 8027892:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8027896:	f000 b813 	b.w	80278c0 <_close_r>
	...

0802789c <_write_r>:
 802789c:	b538      	push	{r3, r4, r5, lr}
 802789e:	4d07      	ldr	r5, [pc, #28]	; (80278bc <_write_r+0x20>)
 80278a0:	4604      	mov	r4, r0
 80278a2:	4608      	mov	r0, r1
 80278a4:	4611      	mov	r1, r2
 80278a6:	2200      	movs	r2, #0
 80278a8:	602a      	str	r2, [r5, #0]
 80278aa:	461a      	mov	r2, r3
 80278ac:	f7da fd9d 	bl	80023ea <_write>
 80278b0:	1c43      	adds	r3, r0, #1
 80278b2:	d102      	bne.n	80278ba <_write_r+0x1e>
 80278b4:	682b      	ldr	r3, [r5, #0]
 80278b6:	b103      	cbz	r3, 80278ba <_write_r+0x1e>
 80278b8:	6023      	str	r3, [r4, #0]
 80278ba:	bd38      	pop	{r3, r4, r5, pc}
 80278bc:	200246c8 	.word	0x200246c8

080278c0 <_close_r>:
 80278c0:	b538      	push	{r3, r4, r5, lr}
 80278c2:	4d06      	ldr	r5, [pc, #24]	; (80278dc <_close_r+0x1c>)
 80278c4:	2300      	movs	r3, #0
 80278c6:	4604      	mov	r4, r0
 80278c8:	4608      	mov	r0, r1
 80278ca:	602b      	str	r3, [r5, #0]
 80278cc:	f7da fda9 	bl	8002422 <_close>
 80278d0:	1c43      	adds	r3, r0, #1
 80278d2:	d102      	bne.n	80278da <_close_r+0x1a>
 80278d4:	682b      	ldr	r3, [r5, #0]
 80278d6:	b103      	cbz	r3, 80278da <_close_r+0x1a>
 80278d8:	6023      	str	r3, [r4, #0]
 80278da:	bd38      	pop	{r3, r4, r5, pc}
 80278dc:	200246c8 	.word	0x200246c8

080278e0 <_fstat_r>:
 80278e0:	b538      	push	{r3, r4, r5, lr}
 80278e2:	4d07      	ldr	r5, [pc, #28]	; (8027900 <_fstat_r+0x20>)
 80278e4:	2300      	movs	r3, #0
 80278e6:	4604      	mov	r4, r0
 80278e8:	4608      	mov	r0, r1
 80278ea:	4611      	mov	r1, r2
 80278ec:	602b      	str	r3, [r5, #0]
 80278ee:	f7da fda4 	bl	800243a <_fstat>
 80278f2:	1c43      	adds	r3, r0, #1
 80278f4:	d102      	bne.n	80278fc <_fstat_r+0x1c>
 80278f6:	682b      	ldr	r3, [r5, #0]
 80278f8:	b103      	cbz	r3, 80278fc <_fstat_r+0x1c>
 80278fa:	6023      	str	r3, [r4, #0]
 80278fc:	bd38      	pop	{r3, r4, r5, pc}
 80278fe:	bf00      	nop
 8027900:	200246c8 	.word	0x200246c8

08027904 <_isatty_r>:
 8027904:	b538      	push	{r3, r4, r5, lr}
 8027906:	4d06      	ldr	r5, [pc, #24]	; (8027920 <_isatty_r+0x1c>)
 8027908:	2300      	movs	r3, #0
 802790a:	4604      	mov	r4, r0
 802790c:	4608      	mov	r0, r1
 802790e:	602b      	str	r3, [r5, #0]
 8027910:	f7da fda3 	bl	800245a <_isatty>
 8027914:	1c43      	adds	r3, r0, #1
 8027916:	d102      	bne.n	802791e <_isatty_r+0x1a>
 8027918:	682b      	ldr	r3, [r5, #0]
 802791a:	b103      	cbz	r3, 802791e <_isatty_r+0x1a>
 802791c:	6023      	str	r3, [r4, #0]
 802791e:	bd38      	pop	{r3, r4, r5, pc}
 8027920:	200246c8 	.word	0x200246c8

08027924 <_lseek_r>:
 8027924:	b538      	push	{r3, r4, r5, lr}
 8027926:	4d07      	ldr	r5, [pc, #28]	; (8027944 <_lseek_r+0x20>)
 8027928:	4604      	mov	r4, r0
 802792a:	4608      	mov	r0, r1
 802792c:	4611      	mov	r1, r2
 802792e:	2200      	movs	r2, #0
 8027930:	602a      	str	r2, [r5, #0]
 8027932:	461a      	mov	r2, r3
 8027934:	f7da fd9c 	bl	8002470 <_lseek>
 8027938:	1c43      	adds	r3, r0, #1
 802793a:	d102      	bne.n	8027942 <_lseek_r+0x1e>
 802793c:	682b      	ldr	r3, [r5, #0]
 802793e:	b103      	cbz	r3, 8027942 <_lseek_r+0x1e>
 8027940:	6023      	str	r3, [r4, #0]
 8027942:	bd38      	pop	{r3, r4, r5, pc}
 8027944:	200246c8 	.word	0x200246c8

08027948 <_read_r>:
 8027948:	b538      	push	{r3, r4, r5, lr}
 802794a:	4d07      	ldr	r5, [pc, #28]	; (8027968 <_read_r+0x20>)
 802794c:	4604      	mov	r4, r0
 802794e:	4608      	mov	r0, r1
 8027950:	4611      	mov	r1, r2
 8027952:	2200      	movs	r2, #0
 8027954:	602a      	str	r2, [r5, #0]
 8027956:	461a      	mov	r2, r3
 8027958:	f7da fd2a 	bl	80023b0 <_read>
 802795c:	1c43      	adds	r3, r0, #1
 802795e:	d102      	bne.n	8027966 <_read_r+0x1e>
 8027960:	682b      	ldr	r3, [r5, #0]
 8027962:	b103      	cbz	r3, 8027966 <_read_r+0x1e>
 8027964:	6023      	str	r3, [r4, #0]
 8027966:	bd38      	pop	{r3, r4, r5, pc}
 8027968:	200246c8 	.word	0x200246c8

0802796c <_init>:
 802796c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802796e:	bf00      	nop
 8027970:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8027972:	bc08      	pop	{r3}
 8027974:	469e      	mov	lr, r3
 8027976:	4770      	bx	lr

08027978 <_fini>:
 8027978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802797a:	bf00      	nop
 802797c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802797e:	bc08      	pop	{r3}
 8027980:	469e      	mov	lr, r3
 8027982:	4770      	bx	lr
