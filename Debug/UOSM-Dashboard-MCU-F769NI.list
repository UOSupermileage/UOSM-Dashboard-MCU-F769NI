
UOSM-Dashboard-MCU-F769NI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b7dc  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003338  0801b9dc  0801b9dc  0002b9dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontSearchFlashSection 0000002c  0801ed14  0801ed14  0002ed14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0801ed40  0801ed40  00040b7c  2**0
                  CONTENTS
  5 .ARM          00000008  0801ed40  0801ed40  0002ed40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0801ed48  0801ed48  00040b7c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000018  0801ed48  0801ed48  0002ed48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   0000000c  0801ed60  0801ed60  0002ed60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         0000009c  20000000  0801ed6c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 CCMRAM        00009600  2000009c  0801ee08  0003009c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0001af3c  2000969c  08028408  0003969c  2**2
                  ALLOC
 12 ._user_heap_stack 00002000  200245d8  08028408  000445d8  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00040b7c  2**0
                  CONTENTS, READONLY
 14 ExtFlashSection 00000000  90000000  90000000  00040baa  2**0
                  CONTENTS
 15 FontFlashSection 00000b7c  90000000  90000000  00040000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 TextFlashSection 00000000  90000b7c  90000b7c  00040baa  2**0
                  CONTENTS
 17 BufferSection 00177000  c0000000  c0000000  00050000  2**2
                  ALLOC
 18 .debug_info   00083b10  00000000  00000000  00040baa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_abbrev 0000edcf  00000000  00000000  000c46ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_aranges 00003dd8  00000000  00000000  000d3490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_ranges 00003968  00000000  00000000  000d7268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_macro  0003d5a4  00000000  00000000  000dabd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line   000504e7  00000000  00000000  00118174  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_str    0015655b  00000000  00000000  0016865b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .comment      000000cf  00000000  00000000  002bebb6  2**0
                  CONTENTS, READONLY
 26 .debug_frame  00011270  00000000  00000000  002bec88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000969c 	.word	0x2000969c
 800021c:	00000000 	.word	0x00000000
 8000220:	0801b9c4 	.word	0x0801b9c4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200096a0 	.word	0x200096a0
 800023c:	0801b9c4 	.word	0x0801b9c4

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <ErrorDataCallback>:
#include "ApplicationTypes.h"

#include "CANMessageLookUpModule.h"
#include "InternalCommsModule.h"

void ErrorDataCallback(iCommsMessage_t *msg) {
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
    DebugPrint("ErrorDataCallback! %d", msg->standardMessageID);
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	881b      	ldrh	r3, [r3, #0]
 80005f0:	4619      	mov	r1, r3
 80005f2:	4803      	ldr	r0, [pc, #12]	; (8000600 <ErrorDataCallback+0x1c>)
 80005f4:	f013 fed0 	bl	8014398 <SerialPrintln>
}
 80005f8:	bf00      	nop
 80005fa:	3708      	adds	r7, #8
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	0801b9dc 	.word	0x0801b9dc

08000604 <EventDataCallback>:

void EventDataCallback(iCommsMessage_t *msg) {
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
    DebugPrint("EventDataCallback! %d", msg->standardMessageID);
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	881b      	ldrh	r3, [r3, #0]
 8000610:	4619      	mov	r1, r3
 8000612:	4803      	ldr	r0, [pc, #12]	; (8000620 <EventDataCallback+0x1c>)
 8000614:	f013 fec0 	bl	8014398 <SerialPrintln>
}
 8000618:	bf00      	nop
 800061a:	3708      	adds	r7, #8
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	0801b9f4 	.word	0x0801b9f4

08000624 <MotorRPMDataCallback>:

void MotorRPMDataCallback(iCommsMessage_t* msg) {
 8000624:	b580      	push	{r7, lr}
 8000626:	b084      	sub	sp, #16
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
	int32_t rpm = readMsg(msg);
 800062c:	6878      	ldr	r0, [r7, #4]
 800062e:	f013 fcfc 	bl	801402a <readMsg>
 8000632:	60f8      	str	r0, [r7, #12]
	DebugPrint("CAN rpm received: %d", rpm);
 8000634:	68f9      	ldr	r1, [r7, #12]
 8000636:	4803      	ldr	r0, [pc, #12]	; (8000644 <MotorRPMDataCallback+0x20>)
 8000638:	f013 feae 	bl	8014398 <SerialPrintln>
}
 800063c:	bf00      	nop
 800063e:	3710      	adds	r7, #16
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	0801ba0c 	.word	0x0801ba0c

08000648 <VoltageDataCallback>:

void VoltageDataCallback(iCommsMessage_t* msg) {
 8000648:	b580      	push	{r7, lr}
 800064a:	b084      	sub	sp, #16
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
	int32_t voltage = readMsg(msg);
 8000650:	6878      	ldr	r0, [r7, #4]
 8000652:	f013 fcea 	bl	801402a <readMsg>
 8000656:	60f8      	str	r0, [r7, #12]
	DebugPrint("CAN voltage received: %d", voltage);
 8000658:	68f9      	ldr	r1, [r7, #12]
 800065a:	4803      	ldr	r0, [pc, #12]	; (8000668 <VoltageDataCallback+0x20>)
 800065c:	f013 fe9c 	bl	8014398 <SerialPrintln>
}
 8000660:	bf00      	nop
 8000662:	3710      	adds	r7, #16
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	0801ba24 	.word	0x0801ba24

0800066c <vApplicationIdleHook>:
/* Hook prototypes */
void vApplicationIdleHook(void);

/* USER CODE BEGIN 2 */
void vApplicationIdleHook( void )
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000670:	bf00      	nop
 8000672:	46bd      	mov	sp, r7
 8000674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000678:	4770      	bx	lr
	...

0800067c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000680:	f001 f9b3 	bl	80019ea <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000684:	f002 fad8 	bl	8002c38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000688:	f000 f82e 	bl	80006e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800068c:	f000 fc6c 	bl	8000f68 <MX_GPIO_Init>
  MX_DMA_Init();
 8000690:	f000 fbe8 	bl	8000e64 <MX_DMA_Init>
  MX_DSIHOST_DSI_Init();
 8000694:	f000 f8f2 	bl	800087c <MX_DSIHOST_DSI_Init>
  MX_LTDC_Init();
 8000698:	f000 fa58 	bl	8000b4c <MX_LTDC_Init>
  MX_FMC_Init();
 800069c:	f000 fc08 	bl	8000eb0 <MX_FMC_Init>
  MX_QUADSPI_Init();
 80006a0:	f000 fb16 	bl	8000cd0 <MX_QUADSPI_Init>
  MX_DMA2D_Init();
 80006a4:	f000 f8b2 	bl	800080c <MX_DMA2D_Init>
  MX_I2C4_Init();
 80006a8:	f000 f9fc 	bl	8000aa4 <MX_I2C4_Init>
  MX_CRC_Init();
 80006ac:	f000 f88c 	bl	80007c8 <MX_CRC_Init>
  MX_JPEG_Init();
 80006b0:	f000 fa38 	bl	8000b24 <MX_JPEG_Init>
  MX_SPI1_Init();
 80006b4:	f000 fb68 	bl	8000d88 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80006b8:	f000 fba4 	bl	8000e04 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80006bc:	f00a fe72 	bl	800b3a4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80006c0:	4a06      	ldr	r2, [pc, #24]	; (80006dc <main+0x60>)
 80006c2:	2100      	movs	r1, #0
 80006c4:	4806      	ldr	r0, [pc, #24]	; (80006e0 <main+0x64>)
 80006c6:	f00a feff 	bl	800b4c8 <osThreadNew>
 80006ca:	4603      	mov	r3, r0
 80006cc:	4a05      	ldr	r2, [pc, #20]	; (80006e4 <main+0x68>)
 80006ce:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  RunTaskManager();
 80006d0:	f002 f83e 	bl	8002750 <RunTaskManager>
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80006d4:	f00a fe9a 	bl	800b40c <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006d8:	e7fe      	b.n	80006d8 <main+0x5c>
 80006da:	bf00      	nop
 80006dc:	0801da3c 	.word	0x0801da3c
 80006e0:	080019db 	.word	0x080019db
 80006e4:	20009ad0 	.word	0x20009ad0

080006e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b094      	sub	sp, #80	; 0x50
 80006ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ee:	f107 031c 	add.w	r3, r7, #28
 80006f2:	2234      	movs	r2, #52	; 0x34
 80006f4:	2100      	movs	r1, #0
 80006f6:	4618      	mov	r0, r3
 80006f8:	f019 ff60 	bl	801a5bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006fc:	f107 0308 	add.w	r3, r7, #8
 8000700:	2200      	movs	r2, #0
 8000702:	601a      	str	r2, [r3, #0]
 8000704:	605a      	str	r2, [r3, #4]
 8000706:	609a      	str	r2, [r3, #8]
 8000708:	60da      	str	r2, [r3, #12]
 800070a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800070c:	4b2c      	ldr	r3, [pc, #176]	; (80007c0 <SystemClock_Config+0xd8>)
 800070e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000710:	4a2b      	ldr	r2, [pc, #172]	; (80007c0 <SystemClock_Config+0xd8>)
 8000712:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000716:	6413      	str	r3, [r2, #64]	; 0x40
 8000718:	4b29      	ldr	r3, [pc, #164]	; (80007c0 <SystemClock_Config+0xd8>)
 800071a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800071c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000720:	607b      	str	r3, [r7, #4]
 8000722:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000724:	4b27      	ldr	r3, [pc, #156]	; (80007c4 <SystemClock_Config+0xdc>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4a26      	ldr	r2, [pc, #152]	; (80007c4 <SystemClock_Config+0xdc>)
 800072a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800072e:	6013      	str	r3, [r2, #0]
 8000730:	4b24      	ldr	r3, [pc, #144]	; (80007c4 <SystemClock_Config+0xdc>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000738:	603b      	str	r3, [r7, #0]
 800073a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800073c:	2301      	movs	r3, #1
 800073e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000740:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000744:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000746:	2302      	movs	r3, #2
 8000748:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800074a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800074e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000750:	2319      	movs	r3, #25
 8000752:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000754:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000758:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800075a:	2302      	movs	r3, #2
 800075c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800075e:	2302      	movs	r3, #2
 8000760:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 7;
 8000762:	2307      	movs	r3, #7
 8000764:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000766:	f107 031c 	add.w	r3, r7, #28
 800076a:	4618      	mov	r0, r3
 800076c:	f007 fc56 	bl	800801c <HAL_RCC_OscConfig>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000776:	f001 f9b5 	bl	8001ae4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800077a:	f006 ff51 	bl	8007620 <HAL_PWREx_EnableOverDrive>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000784:	f001 f9ae 	bl	8001ae4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000788:	230f      	movs	r3, #15
 800078a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800078c:	2302      	movs	r3, #2
 800078e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000790:	2300      	movs	r3, #0
 8000792:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000794:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000798:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800079a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800079e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80007a0:	f107 0308 	add.w	r3, r7, #8
 80007a4:	2106      	movs	r1, #6
 80007a6:	4618      	mov	r0, r3
 80007a8:	f007 fee6 	bl	8008578 <HAL_RCC_ClockConfig>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <SystemClock_Config+0xce>
  {
    Error_Handler();
 80007b2:	f001 f997 	bl	8001ae4 <Error_Handler>
  }
}
 80007b6:	bf00      	nop
 80007b8:	3750      	adds	r7, #80	; 0x50
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	40023800 	.word	0x40023800
 80007c4:	40007000 	.word	0x40007000

080007c8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80007cc:	4b0d      	ldr	r3, [pc, #52]	; (8000804 <MX_CRC_Init+0x3c>)
 80007ce:	4a0e      	ldr	r2, [pc, #56]	; (8000808 <MX_CRC_Init+0x40>)
 80007d0:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80007d2:	4b0c      	ldr	r3, [pc, #48]	; (8000804 <MX_CRC_Init+0x3c>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80007d8:	4b0a      	ldr	r3, [pc, #40]	; (8000804 <MX_CRC_Init+0x3c>)
 80007da:	2200      	movs	r2, #0
 80007dc:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80007de:	4b09      	ldr	r3, [pc, #36]	; (8000804 <MX_CRC_Init+0x3c>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80007e4:	4b07      	ldr	r3, [pc, #28]	; (8000804 <MX_CRC_Init+0x3c>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80007ea:	4b06      	ldr	r3, [pc, #24]	; (8000804 <MX_CRC_Init+0x3c>)
 80007ec:	2201      	movs	r2, #1
 80007ee:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80007f0:	4804      	ldr	r0, [pc, #16]	; (8000804 <MX_CRC_Init+0x3c>)
 80007f2:	f002 fbd1 	bl	8002f98 <HAL_CRC_Init>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80007fc:	f001 f972 	bl	8001ae4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000800:	bf00      	nop
 8000802:	bd80      	pop	{r7, pc}
 8000804:	200096b8 	.word	0x200096b8
 8000808:	40023000 	.word	0x40023000

0800080c <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000810:	4b18      	ldr	r3, [pc, #96]	; (8000874 <MX_DMA2D_Init+0x68>)
 8000812:	4a19      	ldr	r2, [pc, #100]	; (8000878 <MX_DMA2D_Init+0x6c>)
 8000814:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000816:	4b17      	ldr	r3, [pc, #92]	; (8000874 <MX_DMA2D_Init+0x68>)
 8000818:	2200      	movs	r2, #0
 800081a:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 800081c:	4b15      	ldr	r3, [pc, #84]	; (8000874 <MX_DMA2D_Init+0x68>)
 800081e:	2200      	movs	r2, #0
 8000820:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000822:	4b14      	ldr	r3, [pc, #80]	; (8000874 <MX_DMA2D_Init+0x68>)
 8000824:	2200      	movs	r2, #0
 8000826:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000828:	4b12      	ldr	r3, [pc, #72]	; (8000874 <MX_DMA2D_Init+0x68>)
 800082a:	2200      	movs	r2, #0
 800082c:	639a      	str	r2, [r3, #56]	; 0x38
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800082e:	4b11      	ldr	r3, [pc, #68]	; (8000874 <MX_DMA2D_Init+0x68>)
 8000830:	2200      	movs	r2, #0
 8000832:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000834:	4b0f      	ldr	r3, [pc, #60]	; (8000874 <MX_DMA2D_Init+0x68>)
 8000836:	2200      	movs	r2, #0
 8000838:	641a      	str	r2, [r3, #64]	; 0x40
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800083a:	4b0e      	ldr	r3, [pc, #56]	; (8000874 <MX_DMA2D_Init+0x68>)
 800083c:	2200      	movs	r2, #0
 800083e:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8000840:	4b0c      	ldr	r3, [pc, #48]	; (8000874 <MX_DMA2D_Init+0x68>)
 8000842:	2200      	movs	r2, #0
 8000844:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8000846:	4b0b      	ldr	r3, [pc, #44]	; (8000874 <MX_DMA2D_Init+0x68>)
 8000848:	2200      	movs	r2, #0
 800084a:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800084c:	4809      	ldr	r0, [pc, #36]	; (8000874 <MX_DMA2D_Init+0x68>)
 800084e:	f003 f833 	bl	80038b8 <HAL_DMA2D_Init>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <MX_DMA2D_Init+0x50>
  {
    Error_Handler();
 8000858:	f001 f944 	bl	8001ae4 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800085c:	2101      	movs	r1, #1
 800085e:	4805      	ldr	r0, [pc, #20]	; (8000874 <MX_DMA2D_Init+0x68>)
 8000860:	f003 f994 	bl	8003b8c <HAL_DMA2D_ConfigLayer>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <MX_DMA2D_Init+0x62>
  {
    Error_Handler();
 800086a:	f001 f93b 	bl	8001ae4 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800086e:	bf00      	nop
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	200096dc 	.word	0x200096dc
 8000878:	4002b000 	.word	0x4002b000

0800087c <MX_DSIHOST_DSI_Init>:
  * @brief DSIHOST Initialization Function
  * @param None
  * @retval None
  */
static void MX_DSIHOST_DSI_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b0aa      	sub	sp, #168	; 0xa8
 8000880:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */
  /* Activate XRES active low */
  HAL_GPIO_WritePin(DSI_RESET_GPIO_Port, DSI_RESET_Pin, GPIO_PIN_RESET);
 8000882:	2200      	movs	r2, #0
 8000884:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000888:	4883      	ldr	r0, [pc, #524]	; (8000a98 <MX_DSIHOST_DSI_Init+0x21c>)
 800088a:	f004 f9ff 	bl	8004c8c <HAL_GPIO_WritePin>
  HAL_Delay(20); /* wait 20 ms */
 800088e:	2014      	movs	r0, #20
 8000890:	f002 fa00 	bl	8002c94 <HAL_Delay>
  /* Desactivate XRES */
  HAL_GPIO_WritePin(DSI_RESET_GPIO_Port, DSI_RESET_Pin, GPIO_PIN_SET);
 8000894:	2201      	movs	r2, #1
 8000896:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800089a:	487f      	ldr	r0, [pc, #508]	; (8000a98 <MX_DSIHOST_DSI_Init+0x21c>)
 800089c:	f004 f9f6 	bl	8004c8c <HAL_GPIO_WritePin>
  /* Wait for 10ms after releasing XRES before sending commands */
  HAL_Delay(10);
 80008a0:	200a      	movs	r0, #10
 80008a2:	f002 f9f7 	bl	8002c94 <HAL_Delay>
  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 80008a6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
 80008ae:	605a      	str	r2, [r3, #4]
 80008b0:	609a      	str	r2, [r3, #8]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 80008b2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80008b6:	2224      	movs	r2, #36	; 0x24
 80008b8:	2100      	movs	r1, #0
 80008ba:	4618      	mov	r0, r3
 80008bc:	f019 fe7e 	bl	801a5bc <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 80008c0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80008c4:	2200      	movs	r2, #0
 80008c6:	601a      	str	r2, [r3, #0]
 80008c8:	605a      	str	r2, [r3, #4]
 80008ca:	609a      	str	r2, [r3, #8]
 80008cc:	60da      	str	r2, [r3, #12]
 80008ce:	611a      	str	r2, [r3, #16]
 80008d0:	615a      	str	r2, [r3, #20]
  DSI_LPCmdTypeDef LPCmd = {0};
 80008d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008d6:	2234      	movs	r2, #52	; 0x34
 80008d8:	2100      	movs	r1, #0
 80008da:	4618      	mov	r0, r3
 80008dc:	f019 fe6e 	bl	801a5bc <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 80008e0:	463b      	mov	r3, r7
 80008e2:	222c      	movs	r2, #44	; 0x2c
 80008e4:	2100      	movs	r1, #0
 80008e6:	4618      	mov	r0, r3
 80008e8:	f019 fe68 	bl	801a5bc <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 80008ec:	4b6b      	ldr	r3, [pc, #428]	; (8000a9c <MX_DSIHOST_DSI_Init+0x220>)
 80008ee:	4a6c      	ldr	r2, [pc, #432]	; (8000aa0 <MX_DSIHOST_DSI_Init+0x224>)
 80008f0:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 80008f2:	4b6a      	ldr	r3, [pc, #424]	; (8000a9c <MX_DSIHOST_DSI_Init+0x220>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 4;
 80008f8:	4b68      	ldr	r3, [pc, #416]	; (8000a9c <MX_DSIHOST_DSI_Init+0x220>)
 80008fa:	2204      	movs	r2, #4
 80008fc:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 80008fe:	4b67      	ldr	r3, [pc, #412]	; (8000a9c <MX_DSIHOST_DSI_Init+0x220>)
 8000900:	2201      	movs	r2, #1
 8000902:	60da      	str	r2, [r3, #12]
  PLLInit.PLLNDIV = 100;
 8000904:	2364      	movs	r3, #100	; 0x64
 8000906:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  PLLInit.PLLIDF = DSI_PLL_IN_DIV5;
 800090a:	2305      	movs	r3, #5
 800090c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 8000910:	2300      	movs	r3, #0
 8000912:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8000916:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800091a:	4619      	mov	r1, r3
 800091c:	485f      	ldr	r0, [pc, #380]	; (8000a9c <MX_DSIHOST_DSI_Init+0x220>)
 800091e:	f003 fa03 	bl	8003d28 <HAL_DSI_Init>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_DSIHOST_DSI_Init+0xb0>
  {
    Error_Handler();
 8000928:	f001 f8dc 	bl	8001ae4 <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 800092c:	2301      	movs	r3, #1
 800092e:	67bb      	str	r3, [r7, #120]	; 0x78
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 8000930:	2300      	movs	r3, #0
 8000932:	67fb      	str	r3, [r7, #124]	; 0x7c
  HostTimeouts.LowPowerReceptionTimeout = 0;
 8000934:	2300      	movs	r3, #0
 8000936:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  HostTimeouts.HighSpeedReadTimeout = 0;
 800093a:	2300      	movs	r3, #0
 800093c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  HostTimeouts.LowPowerReadTimeout = 0;
 8000940:	2300      	movs	r3, #0
 8000942:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  HostTimeouts.HighSpeedWriteTimeout = 0;
 8000946:	2300      	movs	r3, #0
 8000948:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 800094c:	2300      	movs	r3, #0
 800094e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  HostTimeouts.LowPowerWriteTimeout = 0;
 8000952:	2300      	movs	r3, #0
 8000954:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  HostTimeouts.BTATimeout = 0;
 8000958:	2300      	movs	r3, #0
 800095a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 800095e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000962:	4619      	mov	r1, r3
 8000964:	484d      	ldr	r0, [pc, #308]	; (8000a9c <MX_DSIHOST_DSI_Init+0x220>)
 8000966:	f003 fe91 	bl	800468c <HAL_DSI_ConfigHostTimeouts>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_DSIHOST_DSI_Init+0xf8>
  {
    Error_Handler();
 8000970:	f001 f8b8 	bl	8001ae4 <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 28;
 8000974:	231c      	movs	r3, #28
 8000976:	663b      	str	r3, [r7, #96]	; 0x60
  PhyTimings.ClockLaneLP2HSTime = 33;
 8000978:	2321      	movs	r3, #33	; 0x21
 800097a:	667b      	str	r3, [r7, #100]	; 0x64
  PhyTimings.DataLaneHS2LPTime = 15;
 800097c:	230f      	movs	r3, #15
 800097e:	66bb      	str	r3, [r7, #104]	; 0x68
  PhyTimings.DataLaneLP2HSTime = 25;
 8000980:	2319      	movs	r3, #25
 8000982:	66fb      	str	r3, [r7, #108]	; 0x6c
  PhyTimings.DataLaneMaxReadTime = 0;
 8000984:	2300      	movs	r3, #0
 8000986:	673b      	str	r3, [r7, #112]	; 0x70
  PhyTimings.StopWaitTime = 0;
 8000988:	2300      	movs	r3, #0
 800098a:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 800098c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000990:	4619      	mov	r1, r3
 8000992:	4842      	ldr	r0, [pc, #264]	; (8000a9c <MX_DSIHOST_DSI_Init+0x220>)
 8000994:	f003 fe10 	bl	80045b8 <HAL_DSI_ConfigPhyTimer>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_DSIHOST_DSI_Init+0x126>
  {
    Error_Handler();
 800099e:	f001 f8a1 	bl	8001ae4 <Error_Handler>
  }
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 80009a2:	2104      	movs	r1, #4
 80009a4:	483d      	ldr	r0, [pc, #244]	; (8000a9c <MX_DSIHOST_DSI_Init+0x220>)
 80009a6:	f003 fddf 	bl	8004568 <HAL_DSI_ConfigFlowControl>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_DSIHOST_DSI_Init+0x138>
  {
    Error_Handler();
 80009b0:	f001 f898 	bl	8001ae4 <Error_Handler>
  }
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 80009b4:	f242 7110 	movw	r1, #10000	; 0x2710
 80009b8:	4838      	ldr	r0, [pc, #224]	; (8000a9c <MX_DSIHOST_DSI_Init+0x220>)
 80009ba:	f003 ff8d 	bl	80048d8 <HAL_DSI_SetLowPowerRXFilter>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_DSIHOST_DSI_Init+0x14c>
  {
    Error_Handler();
 80009c4:	f001 f88e 	bl	8001ae4 <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_OVF) != HAL_OK)
 80009c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009cc:	4833      	ldr	r0, [pc, #204]	; (8000a9c <MX_DSIHOST_DSI_Init+0x220>)
 80009ce:	f003 fac7 	bl	8003f60 <HAL_DSI_ConfigErrorMonitor>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_DSIHOST_DSI_Init+0x160>
  {
    Error_Handler();
 80009d8:	f001 f884 	bl	8001ae4 <Error_Handler>
  }
  LPCmd.LPGenShortWriteNoP = DSI_LP_GSW0P_ENABLE;
 80009dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 80009e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009e6:	633b      	str	r3, [r7, #48]	; 0x30
  LPCmd.LPGenShortWriteTwoP = DSI_LP_GSW2P_ENABLE;
 80009e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009ec:	637b      	str	r3, [r7, #52]	; 0x34
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 80009ee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80009f2:	63bb      	str	r3, [r7, #56]	; 0x38
  LPCmd.LPGenShortReadOneP = DSI_LP_GSR1P_ENABLE;
 80009f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 80009fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009fe:	643b      	str	r3, [r7, #64]	; 0x40
  LPCmd.LPGenLongWrite = DSI_LP_GLW_ENABLE;
 8000a00:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a04:	647b      	str	r3, [r7, #68]	; 0x44
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8000a06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a0a:	64bb      	str	r3, [r7, #72]	; 0x48
  LPCmd.LPDcsShortWriteOneP = DSI_LP_DSW1P_ENABLE;
 8000a0c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a10:	64fb      	str	r3, [r7, #76]	; 0x4c
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000a12:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000a16:	653b      	str	r3, [r7, #80]	; 0x50
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_ENABLE;
 8000a18:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000a1c:	657b      	str	r3, [r7, #84]	; 0x54
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8000a1e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000a22:	65bb      	str	r3, [r7, #88]	; 0x58
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_ENABLE;
 8000a24:	2302      	movs	r3, #2
 8000a26:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000a28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	481b      	ldr	r0, [pc, #108]	; (8000a9c <MX_DSIHOST_DSI_Init+0x220>)
 8000a30:	f003 fd3c 	bl	80044ac <HAL_DSI_ConfigCommand>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_DSIHOST_DSI_Init+0x1c2>
  {
    Error_Handler();
 8000a3a:	f001 f853 	bl	8001ae4 <Error_Handler>
  }
  CmdCfg.VirtualChannelID = 0;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	603b      	str	r3, [r7, #0]
  CmdCfg.ColorCoding = DSI_RGB565;
 8000a42:	2300      	movs	r3, #0
 8000a44:	607b      	str	r3, [r7, #4]
  CmdCfg.CommandSize = 200;
 8000a46:	23c8      	movs	r3, #200	; 0xc8
 8000a48:	60bb      	str	r3, [r7, #8]
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 8000a4a:	2310      	movs	r3, #16
 8000a4c:	60fb      	str	r3, [r7, #12]
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	613b      	str	r3, [r7, #16]
  CmdCfg.HSPolarity = DSI_HSYNC_ACTIVE_LOW;
 8000a52:	2304      	movs	r3, #4
 8000a54:	617b      	str	r3, [r7, #20]
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_LOW;
 8000a56:	2302      	movs	r3, #2
 8000a58:	61bb      	str	r3, [r7, #24]
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	61fb      	str	r3, [r7, #28]
  CmdCfg.VSyncPol = DSI_VSYNC_FALLING;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	623b      	str	r3, [r7, #32]
  CmdCfg.AutomaticRefresh = DSI_AR_DISABLE;
 8000a62:	2300      	movs	r3, #0
 8000a64:	627b      	str	r3, [r7, #36]	; 0x24
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 8000a66:	2301      	movs	r3, #1
 8000a68:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8000a6a:	463b      	mov	r3, r7
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	480b      	ldr	r0, [pc, #44]	; (8000a9c <MX_DSIHOST_DSI_Init+0x220>)
 8000a70:	f003 fc42 	bl	80042f8 <HAL_DSI_ConfigAdaptedCommandMode>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_DSIHOST_DSI_Init+0x202>
  {
    Error_Handler();
 8000a7a:	f001 f833 	bl	8001ae4 <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8000a7e:	2100      	movs	r1, #0
 8000a80:	4806      	ldr	r0, [pc, #24]	; (8000a9c <MX_DSIHOST_DSI_Init+0x220>)
 8000a82:	f003 fc10 	bl	80042a6 <HAL_DSI_SetGenericVCID>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_DSIHOST_DSI_Init+0x214>
  {
    Error_Handler();
 8000a8c:	f001 f82a 	bl	8001ae4 <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */

  /* USER CODE END DSIHOST_Init 2 */

}
 8000a90:	bf00      	nop
 8000a92:	37a8      	adds	r7, #168	; 0xa8
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	40022400 	.word	0x40022400
 8000a9c:	20009734 	.word	0x20009734
 8000aa0:	40016c00 	.word	0x40016c00

08000aa4 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C4_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000aa8:	4b1b      	ldr	r3, [pc, #108]	; (8000b18 <MX_I2C4_Init+0x74>)
 8000aaa:	4a1c      	ldr	r2, [pc, #112]	; (8000b1c <MX_I2C4_Init+0x78>)
 8000aac:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00C0EAFF;
 8000aae:	4b1a      	ldr	r3, [pc, #104]	; (8000b18 <MX_I2C4_Init+0x74>)
 8000ab0:	4a1b      	ldr	r2, [pc, #108]	; (8000b20 <MX_I2C4_Init+0x7c>)
 8000ab2:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000ab4:	4b18      	ldr	r3, [pc, #96]	; (8000b18 <MX_I2C4_Init+0x74>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000aba:	4b17      	ldr	r3, [pc, #92]	; (8000b18 <MX_I2C4_Init+0x74>)
 8000abc:	2201      	movs	r2, #1
 8000abe:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ac0:	4b15      	ldr	r3, [pc, #84]	; (8000b18 <MX_I2C4_Init+0x74>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000ac6:	4b14      	ldr	r3, [pc, #80]	; (8000b18 <MX_I2C4_Init+0x74>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000acc:	4b12      	ldr	r3, [pc, #72]	; (8000b18 <MX_I2C4_Init+0x74>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ad2:	4b11      	ldr	r3, [pc, #68]	; (8000b18 <MX_I2C4_Init+0x74>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ad8:	4b0f      	ldr	r3, [pc, #60]	; (8000b18 <MX_I2C4_Init+0x74>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000ade:	480e      	ldr	r0, [pc, #56]	; (8000b18 <MX_I2C4_Init+0x74>)
 8000ae0:	f004 f908 	bl	8004cf4 <HAL_I2C_Init>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000aea:	f000 fffb 	bl	8001ae4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000aee:	2100      	movs	r1, #0
 8000af0:	4809      	ldr	r0, [pc, #36]	; (8000b18 <MX_I2C4_Init+0x74>)
 8000af2:	f004 f9a9 	bl	8004e48 <HAL_I2CEx_ConfigAnalogFilter>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000afc:	f000 fff2 	bl	8001ae4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000b00:	2100      	movs	r1, #0
 8000b02:	4805      	ldr	r0, [pc, #20]	; (8000b18 <MX_I2C4_Init+0x74>)
 8000b04:	f004 f9eb 	bl	8004ede <HAL_I2CEx_ConfigDigitalFilter>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000b0e:	f000 ffe9 	bl	8001ae4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000b12:	bf00      	nop
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	20009750 	.word	0x20009750
 8000b1c:	40006000 	.word	0x40006000
 8000b20:	00c0eaff 	.word	0x00c0eaff

08000b24 <MX_JPEG_Init>:
  * @brief JPEG Initialization Function
  * @param None
  * @retval None
  */
static void MX_JPEG_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE END JPEG_Init 0 */

  /* USER CODE BEGIN JPEG_Init 1 */

  /* USER CODE END JPEG_Init 1 */
  hjpeg.Instance = JPEG;
 8000b28:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <MX_JPEG_Init+0x20>)
 8000b2a:	4a07      	ldr	r2, [pc, #28]	; (8000b48 <MX_JPEG_Init+0x24>)
 8000b2c:	601a      	str	r2, [r3, #0]
  if (HAL_JPEG_Init(&hjpeg) != HAL_OK)
 8000b2e:	4805      	ldr	r0, [pc, #20]	; (8000b44 <MX_JPEG_Init+0x20>)
 8000b30:	f004 fa22 	bl	8004f78 <HAL_JPEG_Init>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <MX_JPEG_Init+0x1a>
  {
    Error_Handler();
 8000b3a:	f000 ffd3 	bl	8001ae4 <Error_Handler>
  }
  /* USER CODE BEGIN JPEG_Init 2 */

  /* USER CODE END JPEG_Init 2 */

}
 8000b3e:	bf00      	nop
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	200097a4 	.word	0x200097a4
 8000b48:	50051000 	.word	0x50051000

08000b4c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b09c      	sub	sp, #112	; 0x70
 8000b50:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000b52:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000b56:	2234      	movs	r2, #52	; 0x34
 8000b58:	2100      	movs	r1, #0
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f019 fd2e 	bl	801a5bc <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000b60:	4b58      	ldr	r3, [pc, #352]	; (8000cc4 <MX_LTDC_Init+0x178>)
 8000b62:	4a59      	ldr	r2, [pc, #356]	; (8000cc8 <MX_LTDC_Init+0x17c>)
 8000b64:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000b66:	4b57      	ldr	r3, [pc, #348]	; (8000cc4 <MX_LTDC_Init+0x178>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000b6c:	4b55      	ldr	r3, [pc, #340]	; (8000cc4 <MX_LTDC_Init+0x178>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000b72:	4b54      	ldr	r3, [pc, #336]	; (8000cc4 <MX_LTDC_Init+0x178>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000b78:	4b52      	ldr	r3, [pc, #328]	; (8000cc4 <MX_LTDC_Init+0x178>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 1;
 8000b7e:	4b51      	ldr	r3, [pc, #324]	; (8000cc4 <MX_LTDC_Init+0x178>)
 8000b80:	2201      	movs	r2, #1
 8000b82:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8000b84:	4b4f      	ldr	r3, [pc, #316]	; (8000cc4 <MX_LTDC_Init+0x178>)
 8000b86:	2201      	movs	r2, #1
 8000b88:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 2;
 8000b8a:	4b4e      	ldr	r3, [pc, #312]	; (8000cc4 <MX_LTDC_Init+0x178>)
 8000b8c:	2202      	movs	r2, #2
 8000b8e:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 2;
 8000b90:	4b4c      	ldr	r3, [pc, #304]	; (8000cc4 <MX_LTDC_Init+0x178>)
 8000b92:	2202      	movs	r2, #2
 8000b94:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 202;
 8000b96:	4b4b      	ldr	r3, [pc, #300]	; (8000cc4 <MX_LTDC_Init+0x178>)
 8000b98:	22ca      	movs	r2, #202	; 0xca
 8000b9a:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 482;
 8000b9c:	4b49      	ldr	r3, [pc, #292]	; (8000cc4 <MX_LTDC_Init+0x178>)
 8000b9e:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8000ba2:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 203;
 8000ba4:	4b47      	ldr	r3, [pc, #284]	; (8000cc4 <MX_LTDC_Init+0x178>)
 8000ba6:	22cb      	movs	r2, #203	; 0xcb
 8000ba8:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 483;
 8000baa:	4b46      	ldr	r3, [pc, #280]	; (8000cc4 <MX_LTDC_Init+0x178>)
 8000bac:	f240 12e3 	movw	r2, #483	; 0x1e3
 8000bb0:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000bb2:	4b44      	ldr	r3, [pc, #272]	; (8000cc4 <MX_LTDC_Init+0x178>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000bba:	4b42      	ldr	r3, [pc, #264]	; (8000cc4 <MX_LTDC_Init+0x178>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000bc2:	4b40      	ldr	r3, [pc, #256]	; (8000cc4 <MX_LTDC_Init+0x178>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000bca:	483e      	ldr	r0, [pc, #248]	; (8000cc4 <MX_LTDC_Init+0x178>)
 8000bcc:	f006 f938 	bl	8006e40 <HAL_LTDC_Init>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <MX_LTDC_Init+0x8e>
  {
    Error_Handler();
 8000bd6:	f000 ff85 	bl	8001ae4 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 200;
 8000bde:	23c8      	movs	r3, #200	; 0xc8
 8000be0:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8000be2:	2300      	movs	r3, #0
 8000be4:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 480;
 8000be6:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000bea:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000bec:	2302      	movs	r3, #2
 8000bee:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 255;
 8000bf0:	23ff      	movs	r3, #255	; 0xff
 8000bf2:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000bf8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bfc:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000bfe:	2305      	movs	r3, #5
 8000c00:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0xC0000000;
 8000c02:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8000c06:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 200;
 8000c08:	23c8      	movs	r3, #200	; 0xc8
 8000c0a:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 480;
 8000c0c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000c10:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8000c12:	2300      	movs	r3, #0
 8000c14:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000c24:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000c28:	2200      	movs	r2, #0
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4825      	ldr	r0, [pc, #148]	; (8000cc4 <MX_LTDC_Init+0x178>)
 8000c2e:	f006 fa99 	bl	8007164 <HAL_LTDC_ConfigLayer>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 8000c38:	f000 ff54 	bl	8001ae4 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */
  __HAL_LTDC_DISABLE(&hltdc);
 8000c3c:	4b21      	ldr	r3, [pc, #132]	; (8000cc4 <MX_LTDC_Init+0x178>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	699a      	ldr	r2, [r3, #24]
 8000c42:	4b20      	ldr	r3, [pc, #128]	; (8000cc4 <MX_LTDC_Init+0x178>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	f022 0201 	bic.w	r2, r2, #1
 8000c4a:	619a      	str	r2, [r3, #24]
  DSI_LPCmdTypeDef LPCmd;

  HAL_DSI_Start(&hdsi);
 8000c4c:	481f      	ldr	r0, [pc, #124]	; (8000ccc <MX_LTDC_Init+0x180>)
 8000c4e:	f003 fde5 	bl	800481c <HAL_DSI_Start>
  OTM8009A_Init(OTM8009A_FORMAT_RBG565, LCD_ORIENTATION_LANDSCAPE);
 8000c52:	2101      	movs	r1, #1
 8000c54:	2002      	movs	r0, #2
 8000c56:	f001 fd97 	bl	8002788 <OTM8009A_Init>

  HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_DISPOFF, 0x00);
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	9300      	str	r3, [sp, #0]
 8000c5e:	2328      	movs	r3, #40	; 0x28
 8000c60:	2215      	movs	r2, #21
 8000c62:	2100      	movs	r1, #0
 8000c64:	4819      	ldr	r0, [pc, #100]	; (8000ccc <MX_LTDC_Init+0x180>)
 8000c66:	f003 fe15 	bl	8004894 <HAL_DSI_ShortWrite>

  LPCmd.LPGenShortWriteNoP = DSI_LP_GSW0P_DISABLE;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	603b      	str	r3, [r7, #0]
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_DISABLE;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	607b      	str	r3, [r7, #4]
  LPCmd.LPGenShortWriteTwoP = DSI_LP_GSW2P_DISABLE;
 8000c72:	2300      	movs	r3, #0
 8000c74:	60bb      	str	r3, [r7, #8]
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_DISABLE;
 8000c76:	2300      	movs	r3, #0
 8000c78:	60fb      	str	r3, [r7, #12]
  LPCmd.LPGenShortReadOneP = DSI_LP_GSR1P_DISABLE;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	613b      	str	r3, [r7, #16]
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_DISABLE;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	617b      	str	r3, [r7, #20]
  LPCmd.LPGenLongWrite = DSI_LP_GLW_DISABLE;
 8000c82:	2300      	movs	r3, #0
 8000c84:	61bb      	str	r3, [r7, #24]
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_DISABLE;
 8000c86:	2300      	movs	r3, #0
 8000c88:	61fb      	str	r3, [r7, #28]
  LPCmd.LPDcsShortWriteOneP = DSI_LP_DSW1P_DISABLE;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	623b      	str	r3, [r7, #32]
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_DISABLE;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	627b      	str	r3, [r7, #36]	; 0x24
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_DISABLE;
 8000c92:	2300      	movs	r3, #0
 8000c94:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_DSI_ConfigCommand(&hdsi, &LPCmd);
 8000c96:	463b      	mov	r3, r7
 8000c98:	4619      	mov	r1, r3
 8000c9a:	480c      	ldr	r0, [pc, #48]	; (8000ccc <MX_LTDC_Init+0x180>)
 8000c9c:	f003 fc06 	bl	80044ac <HAL_DSI_ConfigCommand>

  HAL_LTDC_SetPitch(&hltdc, 800, 0);
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	f44f 7148 	mov.w	r1, #800	; 0x320
 8000ca6:	4807      	ldr	r0, [pc, #28]	; (8000cc4 <MX_LTDC_Init+0x178>)
 8000ca8:	f006 fa9a 	bl	80071e0 <HAL_LTDC_SetPitch>
  __HAL_LTDC_ENABLE(&hltdc);
 8000cac:	4b05      	ldr	r3, [pc, #20]	; (8000cc4 <MX_LTDC_Init+0x178>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	699a      	ldr	r2, [r3, #24]
 8000cb2:	4b04      	ldr	r3, [pc, #16]	; (8000cc4 <MX_LTDC_Init+0x178>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f042 0201 	orr.w	r2, r2, #1
 8000cba:	619a      	str	r2, [r3, #24]
  // HAL_LTDC_SetPitch(&hltdc, 800, 0);
  // __HAL_LTDC_ENABLE(&hltdc);

  /* USER CODE END LTDC_Init 2 */

}
 8000cbc:	bf00      	nop
 8000cbe:	3768      	adds	r7, #104	; 0x68
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	200098bc 	.word	0x200098bc
 8000cc8:	40016800 	.word	0x40016800
 8000ccc:	20009734 	.word	0x20009734

08000cd0 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000cd4:	4b2a      	ldr	r3, [pc, #168]	; (8000d80 <MX_QUADSPI_Init+0xb0>)
 8000cd6:	4a2b      	ldr	r2, [pc, #172]	; (8000d84 <MX_QUADSPI_Init+0xb4>)
 8000cd8:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8000cda:	4b29      	ldr	r3, [pc, #164]	; (8000d80 <MX_QUADSPI_Init+0xb0>)
 8000cdc:	2201      	movs	r2, #1
 8000cde:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 16;
 8000ce0:	4b27      	ldr	r3, [pc, #156]	; (8000d80 <MX_QUADSPI_Init+0xb0>)
 8000ce2:	2210      	movs	r2, #16
 8000ce4:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000ce6:	4b26      	ldr	r3, [pc, #152]	; (8000d80 <MX_QUADSPI_Init+0xb0>)
 8000ce8:	2210      	movs	r2, #16
 8000cea:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 25;
 8000cec:	4b24      	ldr	r3, [pc, #144]	; (8000d80 <MX_QUADSPI_Init+0xb0>)
 8000cee:	2219      	movs	r2, #25
 8000cf0:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE;
 8000cf2:	4b23      	ldr	r3, [pc, #140]	; (8000d80 <MX_QUADSPI_Init+0xb0>)
 8000cf4:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000cf8:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000cfa:	4b21      	ldr	r3, [pc, #132]	; (8000d80 <MX_QUADSPI_Init+0xb0>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000d00:	4b1f      	ldr	r3, [pc, #124]	; (8000d80 <MX_QUADSPI_Init+0xb0>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000d06:	4b1e      	ldr	r3, [pc, #120]	; (8000d80 <MX_QUADSPI_Init+0xb0>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000d0c:	481c      	ldr	r0, [pc, #112]	; (8000d80 <MX_QUADSPI_Init+0xb0>)
 8000d0e:	f006 fcd7 	bl	80076c0 <HAL_QSPI_Init>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8000d18:	f000 fee4 	bl	8001ae4 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */
  /* QSPI memory reset */
  if (QSPI_ResetMemory(&hqspi) != QSPI_OK)
 8000d1c:	4818      	ldr	r0, [pc, #96]	; (8000d80 <MX_QUADSPI_Init+0xb0>)
 8000d1e:	f000 fa85 	bl	800122c <QSPI_ResetMemory>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <MX_QUADSPI_Init+0x5c>
  {
    Error_Handler();
 8000d28:	f000 fedc 	bl	8001ae4 <Error_Handler>
  }

  /* Put QSPI memory in QPI mode */
  if( QSPI_EnterMemory_QPI( &hqspi )!=QSPI_OK )
 8000d2c:	4814      	ldr	r0, [pc, #80]	; (8000d80 <MX_QUADSPI_Init+0xb0>)
 8000d2e:	f000 fba5 	bl	800147c <QSPI_EnterMemory_QPI>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <MX_QUADSPI_Init+0x6c>
  {
    Error_Handler();
 8000d38:	f000 fed4 	bl	8001ae4 <Error_Handler>
  }

  /* Set the QSPI memory in 4-bytes address mode */
  if (QSPI_EnterFourBytesAddress(&hqspi) != QSPI_OK)
 8000d3c:	4810      	ldr	r0, [pc, #64]	; (8000d80 <MX_QUADSPI_Init+0xb0>)
 8000d3e:	f000 fbe9 	bl	8001514 <QSPI_EnterFourBytesAddress>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <MX_QUADSPI_Init+0x7c>
  {
    Error_Handler();
 8000d48:	f000 fecc 	bl	8001ae4 <Error_Handler>
  }

  /* Configuration of the dummy cycles on QSPI memory side */
  if (QSPI_DummyCyclesCfg(&hqspi) != QSPI_OK)
 8000d4c:	480c      	ldr	r0, [pc, #48]	; (8000d80 <MX_QUADSPI_Init+0xb0>)
 8000d4e:	f000 fc1c 	bl	800158a <QSPI_DummyCyclesCfg>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <MX_QUADSPI_Init+0x8c>
  {
    Error_Handler();
 8000d58:	f000 fec4 	bl	8001ae4 <Error_Handler>
  }

  /* Configuration of the Output driver strength on memory side */
  if( QSPI_OutDrvStrengthCfg( &hqspi ) != QSPI_OK )
 8000d5c:	4808      	ldr	r0, [pc, #32]	; (8000d80 <MX_QUADSPI_Init+0xb0>)
 8000d5e:	f000 fcd0 	bl	8001702 <QSPI_OutDrvStrengthCfg>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <MX_QUADSPI_Init+0x9c>
  {
    Error_Handler();
 8000d68:	f000 febc 	bl	8001ae4 <Error_Handler>
  }

  if( BSP_QSPI_EnableMemoryMappedMode(&hqspi) != QSPI_OK )
 8000d6c:	4804      	ldr	r0, [pc, #16]	; (8000d80 <MX_QUADSPI_Init+0xb0>)
 8000d6e:	f000 fe02 	bl	8001976 <BSP_QSPI_EnableMemoryMappedMode>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <MX_QUADSPI_Init+0xac>
  {
    Error_Handler();
 8000d78:	f000 feb4 	bl	8001ae4 <Error_Handler>
  }

  /* USER CODE END QUADSPI_Init 2 */

}
 8000d7c:	bf00      	nop
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	20009964 	.word	0x20009964
 8000d84:	a0001000 	.word	0xa0001000

08000d88 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000d8c:	4b1b      	ldr	r3, [pc, #108]	; (8000dfc <MX_SPI1_Init+0x74>)
 8000d8e:	4a1c      	ldr	r2, [pc, #112]	; (8000e00 <MX_SPI1_Init+0x78>)
 8000d90:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d92:	4b1a      	ldr	r3, [pc, #104]	; (8000dfc <MX_SPI1_Init+0x74>)
 8000d94:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d98:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d9a:	4b18      	ldr	r3, [pc, #96]	; (8000dfc <MX_SPI1_Init+0x74>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000da0:	4b16      	ldr	r3, [pc, #88]	; (8000dfc <MX_SPI1_Init+0x74>)
 8000da2:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000da6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000da8:	4b14      	ldr	r3, [pc, #80]	; (8000dfc <MX_SPI1_Init+0x74>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000dae:	4b13      	ldr	r3, [pc, #76]	; (8000dfc <MX_SPI1_Init+0x74>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000db4:	4b11      	ldr	r3, [pc, #68]	; (8000dfc <MX_SPI1_Init+0x74>)
 8000db6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dba:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000dbc:	4b0f      	ldr	r3, [pc, #60]	; (8000dfc <MX_SPI1_Init+0x74>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000dc2:	4b0e      	ldr	r3, [pc, #56]	; (8000dfc <MX_SPI1_Init+0x74>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000dc8:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <MX_SPI1_Init+0x74>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000dce:	4b0b      	ldr	r3, [pc, #44]	; (8000dfc <MX_SPI1_Init+0x74>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000dd4:	4b09      	ldr	r3, [pc, #36]	; (8000dfc <MX_SPI1_Init+0x74>)
 8000dd6:	2207      	movs	r2, #7
 8000dd8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000dda:	4b08      	ldr	r3, [pc, #32]	; (8000dfc <MX_SPI1_Init+0x74>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000de0:	4b06      	ldr	r3, [pc, #24]	; (8000dfc <MX_SPI1_Init+0x74>)
 8000de2:	2208      	movs	r2, #8
 8000de4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000de6:	4805      	ldr	r0, [pc, #20]	; (8000dfc <MX_SPI1_Init+0x74>)
 8000de8:	f008 fa97 	bl	800931a <HAL_SPI_Init>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000df2:	f000 fe77 	bl	8001ae4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000df6:	bf00      	nop
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	200099b0 	.word	0x200099b0
 8000e00:	40013000 	.word	0x40013000

08000e04 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e08:	4b14      	ldr	r3, [pc, #80]	; (8000e5c <MX_USART2_UART_Init+0x58>)
 8000e0a:	4a15      	ldr	r2, [pc, #84]	; (8000e60 <MX_USART2_UART_Init+0x5c>)
 8000e0c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e0e:	4b13      	ldr	r3, [pc, #76]	; (8000e5c <MX_USART2_UART_Init+0x58>)
 8000e10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e14:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e16:	4b11      	ldr	r3, [pc, #68]	; (8000e5c <MX_USART2_UART_Init+0x58>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e1c:	4b0f      	ldr	r3, [pc, #60]	; (8000e5c <MX_USART2_UART_Init+0x58>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e22:	4b0e      	ldr	r3, [pc, #56]	; (8000e5c <MX_USART2_UART_Init+0x58>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e28:	4b0c      	ldr	r3, [pc, #48]	; (8000e5c <MX_USART2_UART_Init+0x58>)
 8000e2a:	220c      	movs	r2, #12
 8000e2c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e2e:	4b0b      	ldr	r3, [pc, #44]	; (8000e5c <MX_USART2_UART_Init+0x58>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e34:	4b09      	ldr	r3, [pc, #36]	; (8000e5c <MX_USART2_UART_Init+0x58>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e3a:	4b08      	ldr	r3, [pc, #32]	; (8000e5c <MX_USART2_UART_Init+0x58>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e40:	4b06      	ldr	r3, [pc, #24]	; (8000e5c <MX_USART2_UART_Init+0x58>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e46:	4805      	ldr	r0, [pc, #20]	; (8000e5c <MX_USART2_UART_Init+0x58>)
 8000e48:	f009 fcb6 	bl	800a7b8 <HAL_UART_Init>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000e52:	f000 fe47 	bl	8001ae4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e56:	bf00      	nop
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	20009a14 	.word	0x20009a14
 8000e60:	40004400 	.word	0x40004400

08000e64 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000e6a:	4b10      	ldr	r3, [pc, #64]	; (8000eac <MX_DMA_Init+0x48>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6e:	4a0f      	ldr	r2, [pc, #60]	; (8000eac <MX_DMA_Init+0x48>)
 8000e70:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e74:	6313      	str	r3, [r2, #48]	; 0x30
 8000e76:	4b0d      	ldr	r3, [pc, #52]	; (8000eac <MX_DMA_Init+0x48>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e7e:	607b      	str	r3, [r7, #4]
 8000e80:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8000e82:	2200      	movs	r2, #0
 8000e84:	2105      	movs	r1, #5
 8000e86:	2038      	movs	r0, #56	; 0x38
 8000e88:	f001 ffe0 	bl	8002e4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000e8c:	2038      	movs	r0, #56	; 0x38
 8000e8e:	f001 fff9 	bl	8002e84 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8000e92:	2200      	movs	r2, #0
 8000e94:	2105      	movs	r1, #5
 8000e96:	2039      	movs	r0, #57	; 0x39
 8000e98:	f001 ffd8 	bl	8002e4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000e9c:	2039      	movs	r0, #57	; 0x39
 8000e9e:	f001 fff1 	bl	8002e84 <HAL_NVIC_EnableIRQ>

}
 8000ea2:	bf00      	nop
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	40023800 	.word	0x40023800

08000eb0 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b08c      	sub	sp, #48	; 0x30
 8000eb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000eb6:	f107 0314 	add.w	r3, r7, #20
 8000eba:	2200      	movs	r2, #0
 8000ebc:	601a      	str	r2, [r3, #0]
 8000ebe:	605a      	str	r2, [r3, #4]
 8000ec0:	609a      	str	r2, [r3, #8]
 8000ec2:	60da      	str	r2, [r3, #12]
 8000ec4:	611a      	str	r2, [r3, #16]
 8000ec6:	615a      	str	r2, [r3, #20]
 8000ec8:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000eca:	4b25      	ldr	r3, [pc, #148]	; (8000f60 <MX_FMC_Init+0xb0>)
 8000ecc:	4a25      	ldr	r2, [pc, #148]	; (8000f64 <MX_FMC_Init+0xb4>)
 8000ece:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000ed0:	4b23      	ldr	r3, [pc, #140]	; (8000f60 <MX_FMC_Init+0xb0>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000ed6:	4b22      	ldr	r3, [pc, #136]	; (8000f60 <MX_FMC_Init+0xb0>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000edc:	4b20      	ldr	r3, [pc, #128]	; (8000f60 <MX_FMC_Init+0xb0>)
 8000ede:	2204      	movs	r2, #4
 8000ee0:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8000ee2:	4b1f      	ldr	r3, [pc, #124]	; (8000f60 <MX_FMC_Init+0xb0>)
 8000ee4:	2220      	movs	r2, #32
 8000ee6:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000ee8:	4b1d      	ldr	r3, [pc, #116]	; (8000f60 <MX_FMC_Init+0xb0>)
 8000eea:	2240      	movs	r2, #64	; 0x40
 8000eec:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000eee:	4b1c      	ldr	r3, [pc, #112]	; (8000f60 <MX_FMC_Init+0xb0>)
 8000ef0:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000ef4:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000ef6:	4b1a      	ldr	r3, [pc, #104]	; (8000f60 <MX_FMC_Init+0xb0>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000efc:	4b18      	ldr	r3, [pc, #96]	; (8000f60 <MX_FMC_Init+0xb0>)
 8000efe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f02:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000f04:	4b16      	ldr	r3, [pc, #88]	; (8000f60 <MX_FMC_Init+0xb0>)
 8000f06:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f0a:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000f0c:	4b14      	ldr	r3, [pc, #80]	; (8000f60 <MX_FMC_Init+0xb0>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000f12:	2302      	movs	r3, #2
 8000f14:	617b      	str	r3, [r7, #20]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000f16:	2307      	movs	r3, #7
 8000f18:	61bb      	str	r3, [r7, #24]
  SdramTiming.SelfRefreshTime = 4;
 8000f1a:	2304      	movs	r3, #4
 8000f1c:	61fb      	str	r3, [r7, #28]
  SdramTiming.RowCycleDelay = 7;
 8000f1e:	2307      	movs	r3, #7
 8000f20:	623b      	str	r3, [r7, #32]
  SdramTiming.WriteRecoveryTime = 2;
 8000f22:	2302      	movs	r3, #2
 8000f24:	627b      	str	r3, [r7, #36]	; 0x24
  SdramTiming.RPDelay = 2;
 8000f26:	2302      	movs	r3, #2
 8000f28:	62bb      	str	r3, [r7, #40]	; 0x28
  SdramTiming.RCDDelay = 3;
 8000f2a:	2303      	movs	r3, #3
 8000f2c:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000f2e:	f107 0314 	add.w	r3, r7, #20
 8000f32:	4619      	mov	r1, r3
 8000f34:	480a      	ldr	r0, [pc, #40]	; (8000f60 <MX_FMC_Init+0xb0>)
 8000f36:	f008 f95f 	bl	80091f8 <HAL_SDRAM_Init>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <MX_FMC_Init+0x94>
  {
    Error_Handler( );
 8000f40:	f000 fdd0 	bl	8001ae4 <Error_Handler>
  /* USER CODE BEGIN FMC_Init 2 */

  FMC_SDRAM_CommandTypeDef command;

  /* Program the SDRAM external device */
  BSP_SDRAM_Initialization_Sequence(&hsdram1, &command);
 8000f44:	1d3b      	adds	r3, r7, #4
 8000f46:	4619      	mov	r1, r3
 8000f48:	4805      	ldr	r0, [pc, #20]	; (8000f60 <MX_FMC_Init+0xb0>)
 8000f4a:	f000 f911 	bl	8001170 <BSP_SDRAM_Initialization_Sequence>

  //Deactivate speculative/cache access to first FMC Bank to save FMC bandwidth
  FMC_Bank1->BTCR[0] = 0x000030D2;
 8000f4e:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8000f52:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000f56:	601a      	str	r2, [r3, #0]
  /* USER CODE END FMC_Init 2 */
}
 8000f58:	bf00      	nop
 8000f5a:	3730      	adds	r7, #48	; 0x30
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	20009a9c 	.word	0x20009a9c
 8000f64:	a0000140 	.word	0xa0000140

08000f68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b090      	sub	sp, #64	; 0x40
 8000f6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f6e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f72:	2200      	movs	r2, #0
 8000f74:	601a      	str	r2, [r3, #0]
 8000f76:	605a      	str	r2, [r3, #4]
 8000f78:	609a      	str	r2, [r3, #8]
 8000f7a:	60da      	str	r2, [r3, #12]
 8000f7c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f7e:	4b77      	ldr	r3, [pc, #476]	; (800115c <MX_GPIO_Init+0x1f4>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	4a76      	ldr	r2, [pc, #472]	; (800115c <MX_GPIO_Init+0x1f4>)
 8000f84:	f043 0310 	orr.w	r3, r3, #16
 8000f88:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8a:	4b74      	ldr	r3, [pc, #464]	; (800115c <MX_GPIO_Init+0x1f4>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	f003 0310 	and.w	r3, r3, #16
 8000f92:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f96:	4b71      	ldr	r3, [pc, #452]	; (800115c <MX_GPIO_Init+0x1f4>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9a:	4a70      	ldr	r2, [pc, #448]	; (800115c <MX_GPIO_Init+0x1f4>)
 8000f9c:	f043 0302 	orr.w	r3, r3, #2
 8000fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa2:	4b6e      	ldr	r3, [pc, #440]	; (800115c <MX_GPIO_Init+0x1f4>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa6:	f003 0302 	and.w	r3, r3, #2
 8000faa:	627b      	str	r3, [r7, #36]	; 0x24
 8000fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fae:	4b6b      	ldr	r3, [pc, #428]	; (800115c <MX_GPIO_Init+0x1f4>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	4a6a      	ldr	r2, [pc, #424]	; (800115c <MX_GPIO_Init+0x1f4>)
 8000fb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fba:	4b68      	ldr	r3, [pc, #416]	; (800115c <MX_GPIO_Init+0x1f4>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fc2:	623b      	str	r3, [r7, #32]
 8000fc4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000fc6:	4b65      	ldr	r3, [pc, #404]	; (800115c <MX_GPIO_Init+0x1f4>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fca:	4a64      	ldr	r2, [pc, #400]	; (800115c <MX_GPIO_Init+0x1f4>)
 8000fcc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd2:	4b62      	ldr	r3, [pc, #392]	; (800115c <MX_GPIO_Init+0x1f4>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000fda:	61fb      	str	r3, [r7, #28]
 8000fdc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fde:	4b5f      	ldr	r3, [pc, #380]	; (800115c <MX_GPIO_Init+0x1f4>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	4a5e      	ldr	r2, [pc, #376]	; (800115c <MX_GPIO_Init+0x1f4>)
 8000fe4:	f043 0308 	orr.w	r3, r3, #8
 8000fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fea:	4b5c      	ldr	r3, [pc, #368]	; (800115c <MX_GPIO_Init+0x1f4>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	f003 0308 	and.w	r3, r3, #8
 8000ff2:	61bb      	str	r3, [r7, #24]
 8000ff4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ff6:	4b59      	ldr	r3, [pc, #356]	; (800115c <MX_GPIO_Init+0x1f4>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffa:	4a58      	ldr	r2, [pc, #352]	; (800115c <MX_GPIO_Init+0x1f4>)
 8000ffc:	f043 0304 	orr.w	r3, r3, #4
 8001000:	6313      	str	r3, [r2, #48]	; 0x30
 8001002:	4b56      	ldr	r3, [pc, #344]	; (800115c <MX_GPIO_Init+0x1f4>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001006:	f003 0304 	and.w	r3, r3, #4
 800100a:	617b      	str	r3, [r7, #20]
 800100c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800100e:	4b53      	ldr	r3, [pc, #332]	; (800115c <MX_GPIO_Init+0x1f4>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	4a52      	ldr	r2, [pc, #328]	; (800115c <MX_GPIO_Init+0x1f4>)
 8001014:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001018:	6313      	str	r3, [r2, #48]	; 0x30
 800101a:	4b50      	ldr	r3, [pc, #320]	; (800115c <MX_GPIO_Init+0x1f4>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001022:	613b      	str	r3, [r7, #16]
 8001024:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001026:	4b4d      	ldr	r3, [pc, #308]	; (800115c <MX_GPIO_Init+0x1f4>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	4a4c      	ldr	r2, [pc, #304]	; (800115c <MX_GPIO_Init+0x1f4>)
 800102c:	f043 0320 	orr.w	r3, r3, #32
 8001030:	6313      	str	r3, [r2, #48]	; 0x30
 8001032:	4b4a      	ldr	r3, [pc, #296]	; (800115c <MX_GPIO_Init+0x1f4>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	f003 0320 	and.w	r3, r3, #32
 800103a:	60fb      	str	r3, [r7, #12]
 800103c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800103e:	4b47      	ldr	r3, [pc, #284]	; (800115c <MX_GPIO_Init+0x1f4>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	4a46      	ldr	r2, [pc, #280]	; (800115c <MX_GPIO_Init+0x1f4>)
 8001044:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001048:	6313      	str	r3, [r2, #48]	; 0x30
 800104a:	4b44      	ldr	r3, [pc, #272]	; (800115c <MX_GPIO_Init+0x1f4>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001052:	60bb      	str	r3, [r7, #8]
 8001054:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001056:	4b41      	ldr	r3, [pc, #260]	; (800115c <MX_GPIO_Init+0x1f4>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	4a40      	ldr	r2, [pc, #256]	; (800115c <MX_GPIO_Init+0x1f4>)
 800105c:	f043 0301 	orr.w	r3, r3, #1
 8001060:	6313      	str	r3, [r2, #48]	; 0x30
 8001062:	4b3e      	ldr	r3, [pc, #248]	; (800115c <MX_GPIO_Init+0x1f4>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	f003 0301 	and.w	r3, r3, #1
 800106a:	607b      	str	r3, [r7, #4]
 800106c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN_CS_GPIO_Port, CAN_CS_Pin, GPIO_PIN_RESET);
 800106e:	2200      	movs	r2, #0
 8001070:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001074:	483a      	ldr	r0, [pc, #232]	; (8001160 <MX_GPIO_Init+0x1f8>)
 8001076:	f003 fe09 	bl	8004c8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_13|FRAME_RATE_Pin, GPIO_PIN_RESET);
 800107a:	2200      	movs	r2, #0
 800107c:	f242 0102 	movw	r1, #8194	; 0x2002
 8001080:	4838      	ldr	r0, [pc, #224]	; (8001164 <MX_GPIO_Init+0x1fc>)
 8001082:	f003 fe03 	bl	8004c8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DSI_RESET_GPIO_Port, DSI_RESET_Pin, GPIO_PIN_SET);
 8001086:	2201      	movs	r2, #1
 8001088:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800108c:	4835      	ldr	r0, [pc, #212]	; (8001164 <MX_GPIO_Init+0x1fc>)
 800108e:	f003 fdfd 	bl	8004c8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RENDER_TIME_Pin|VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 8001092:	2200      	movs	r2, #0
 8001094:	21c0      	movs	r1, #192	; 0xc0
 8001096:	4834      	ldr	r0, [pc, #208]	; (8001168 <MX_GPIO_Init+0x200>)
 8001098:	f003 fdf8 	bl	8004c8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 800109c:	2200      	movs	r2, #0
 800109e:	2140      	movs	r1, #64	; 0x40
 80010a0:	4832      	ldr	r0, [pc, #200]	; (800116c <MX_GPIO_Init+0x204>)
 80010a2:	f003 fdf3 	bl	8004c8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CAN_CS_Pin */
  GPIO_InitStruct.Pin = CAN_CS_Pin;
 80010a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ac:	2301      	movs	r3, #1
 80010ae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b0:	2300      	movs	r3, #0
 80010b2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b4:	2300      	movs	r3, #0
 80010b6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(CAN_CS_GPIO_Port, &GPIO_InitStruct);
 80010b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010bc:	4619      	mov	r1, r3
 80010be:	4828      	ldr	r0, [pc, #160]	; (8001160 <MX_GPIO_Init+0x1f8>)
 80010c0:	f003 fc38 	bl	8004934 <HAL_GPIO_Init>

  /*Configure GPIO pin : PJ13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80010c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ca:	2301      	movs	r3, #1
 80010cc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ce:	2300      	movs	r3, #0
 80010d0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d2:	2300      	movs	r3, #0
 80010d4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80010d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010da:	4619      	mov	r1, r3
 80010dc:	4821      	ldr	r0, [pc, #132]	; (8001164 <MX_GPIO_Init+0x1fc>)
 80010de:	f003 fc29 	bl	8004934 <HAL_GPIO_Init>

  /*Configure GPIO pin : DSI_RESET_Pin */
  GPIO_InitStruct.Pin = DSI_RESET_Pin;
 80010e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80010e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e8:	2301      	movs	r3, #1
 80010ea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010ec:	2301      	movs	r3, #1
 80010ee:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80010f0:	2301      	movs	r3, #1
 80010f2:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DSI_RESET_GPIO_Port, &GPIO_InitStruct);
 80010f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010f8:	4619      	mov	r1, r3
 80010fa:	481a      	ldr	r0, [pc, #104]	; (8001164 <MX_GPIO_Init+0x1fc>)
 80010fc:	f003 fc1a 	bl	8004934 <HAL_GPIO_Init>

  /*Configure GPIO pins : RENDER_TIME_Pin VSYNC_FREQ_Pin */
  GPIO_InitStruct.Pin = RENDER_TIME_Pin|VSYNC_FREQ_Pin;
 8001100:	23c0      	movs	r3, #192	; 0xc0
 8001102:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001104:	2301      	movs	r3, #1
 8001106:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001108:	2300      	movs	r3, #0
 800110a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800110c:	2303      	movs	r3, #3
 800110e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001110:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001114:	4619      	mov	r1, r3
 8001116:	4814      	ldr	r0, [pc, #80]	; (8001168 <MX_GPIO_Init+0x200>)
 8001118:	f003 fc0c 	bl	8004934 <HAL_GPIO_Init>

  /*Configure GPIO pin : MCU_ACTIVE_Pin */
  GPIO_InitStruct.Pin = MCU_ACTIVE_Pin;
 800111c:	2340      	movs	r3, #64	; 0x40
 800111e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001120:	2301      	movs	r3, #1
 8001122:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001124:	2300      	movs	r3, #0
 8001126:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001128:	2303      	movs	r3, #3
 800112a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 800112c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001130:	4619      	mov	r1, r3
 8001132:	480e      	ldr	r0, [pc, #56]	; (800116c <MX_GPIO_Init+0x204>)
 8001134:	f003 fbfe 	bl	8004934 <HAL_GPIO_Init>

  /*Configure GPIO pin : FRAME_RATE_Pin */
  GPIO_InitStruct.Pin = FRAME_RATE_Pin;
 8001138:	2302      	movs	r3, #2
 800113a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800113c:	2301      	movs	r3, #1
 800113e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001140:	2300      	movs	r3, #0
 8001142:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001144:	2303      	movs	r3, #3
 8001146:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(FRAME_RATE_GPIO_Port, &GPIO_InitStruct);
 8001148:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800114c:	4619      	mov	r1, r3
 800114e:	4805      	ldr	r0, [pc, #20]	; (8001164 <MX_GPIO_Init+0x1fc>)
 8001150:	f003 fbf0 	bl	8004934 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001154:	bf00      	nop
 8001156:	3740      	adds	r7, #64	; 0x40
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	40023800 	.word	0x40023800
 8001160:	40020400 	.word	0x40020400
 8001164:	40022400 	.word	0x40022400
 8001168:	40020800 	.word	0x40020800
 800116c:	40021400 	.word	0x40021400

08001170 <BSP_SDRAM_Initialization_Sequence>:
  * @param  hsdram: SDRAM handle
  * @param  Command: Pointer to SDRAM command structure
  * @retval None
  */
static void BSP_SDRAM_Initialization_Sequence(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	6039      	str	r1, [r7, #0]
 __IO uint32_t tmpmrd = 0;
 800117a:	2300      	movs	r3, #0
 800117c:	60fb      	str	r3, [r7, #12]

    /* Step 1: Configure a clock configuration enable command */
    Command->CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	2201      	movs	r2, #1
 8001182:	601a      	str	r2, [r3, #0]
    Command->CommandTarget          =  FMC_SDRAM_CMD_TARGET_BANK1;
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	2210      	movs	r2, #16
 8001188:	605a      	str	r2, [r3, #4]
    Command->AutoRefreshNumber      = 1;
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	2201      	movs	r2, #1
 800118e:	609a      	str	r2, [r3, #8]
    Command->ModeRegisterDefinition = 0;
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	2200      	movs	r2, #0
 8001194:	60da      	str	r2, [r3, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8001196:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800119a:	6839      	ldr	r1, [r7, #0]
 800119c:	6878      	ldr	r0, [r7, #4]
 800119e:	f008 f85f 	bl	8009260 <HAL_SDRAM_SendCommand>

    /* Step 2: Insert 100 us minimum delay */
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    HAL_Delay(1);
 80011a2:	2001      	movs	r0, #1
 80011a4:	f001 fd76 	bl	8002c94 <HAL_Delay>

    /* Step 3: Configure a PALL (precharge all) command */
    Command->CommandMode            = FMC_SDRAM_CMD_PALL;
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	2202      	movs	r2, #2
 80011ac:	601a      	str	r2, [r3, #0]
    Command->CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	2210      	movs	r2, #16
 80011b2:	605a      	str	r2, [r3, #4]
    Command->AutoRefreshNumber      = 1;
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	2201      	movs	r2, #1
 80011b8:	609a      	str	r2, [r3, #8]
    Command->ModeRegisterDefinition = 0;
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	2200      	movs	r2, #0
 80011be:	60da      	str	r2, [r3, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 80011c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011c4:	6839      	ldr	r1, [r7, #0]
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f008 f84a 	bl	8009260 <HAL_SDRAM_SendCommand>

    /* Step 4: Configure an Auto Refresh command */
    Command->CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	2203      	movs	r2, #3
 80011d0:	601a      	str	r2, [r3, #0]
    Command->CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	2210      	movs	r2, #16
 80011d6:	605a      	str	r2, [r3, #4]
    Command->AutoRefreshNumber      = 8;
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	2208      	movs	r2, #8
 80011dc:	609a      	str	r2, [r3, #8]
    Command->ModeRegisterDefinition = 0;
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	2200      	movs	r2, #0
 80011e2:	60da      	str	r2, [r3, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 80011e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011e8:	6839      	ldr	r1, [r7, #0]
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f008 f838 	bl	8009260 <HAL_SDRAM_SendCommand>

    /* Step 5: Program the external memory mode register */
    tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          | \
 80011f0:	f44f 730c 	mov.w	r3, #560	; 0x230
 80011f4:	60fb      	str	r3, [r7, #12]
             SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   | \
             SDRAM_MODEREG_CAS_LATENCY_3           | \
             SDRAM_MODEREG_OPERATING_MODE_STANDARD | \
             SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

    Command->CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	2204      	movs	r2, #4
 80011fa:	601a      	str	r2, [r3, #0]
    Command->CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	2210      	movs	r2, #16
 8001200:	605a      	str	r2, [r3, #4]
    Command->AutoRefreshNumber      = 1;
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	2201      	movs	r2, #1
 8001206:	609a      	str	r2, [r3, #8]
    Command->ModeRegisterDefinition = tmpmrd;
 8001208:	68fa      	ldr	r2, [r7, #12]
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	60da      	str	r2, [r3, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 800120e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001212:	6839      	ldr	r1, [r7, #0]
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	f008 f823 	bl	8009260 <HAL_SDRAM_SendCommand>

    /* Step 6: Set the refresh rate counter */
    /* Set the device refresh rate */
    HAL_SDRAM_ProgramRefreshRate(hsdram, REFRESH_COUNT);
 800121a:	f240 712a 	movw	r1, #1834	; 0x72a
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	f008 f853 	bl	80092ca <HAL_SDRAM_ProgramRefreshRate>

}
 8001224:	bf00      	nop
 8001226:	3710      	adds	r7, #16
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}

0800122c <QSPI_ResetMemory>:
  * @brief  This function reset the QSPI memory.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_ResetMemory(QSPI_HandleTypeDef *hqspi)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b098      	sub	sp, #96	; 0x60
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  QSPI_AutoPollingTypeDef  s_config;
  uint8_t                  reg;

  /* Send command RESET command in QPI mode (QUAD I/Os) */
  /* Initialize the reset enable command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8001234:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001238:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Instruction       = RESET_ENABLE_CMD;
 800123a:	2366      	movs	r3, #102	; 0x66
 800123c:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800123e:	2300      	movs	r3, #0
 8001240:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001242:	2300      	movs	r3, #0
 8001244:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataMode          = QSPI_DATA_NONE;
 8001246:	2300      	movs	r3, #0
 8001248:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DummyCycles       = 0;
 800124a:	2300      	movs	r3, #0
 800124c:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800124e:	2300      	movs	r3, #0
 8001250:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001252:	2300      	movs	r3, #0
 8001254:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001256:	2300      	movs	r3, #0
 8001258:	65fb      	str	r3, [r7, #92]	; 0x5c
  /* Send the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800125a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800125e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001262:	4619      	mov	r1, r3
 8001264:	6878      	ldr	r0, [r7, #4]
 8001266:	f006 faa7 	bl	80077b8 <HAL_QSPI_Command>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <QSPI_ResetMemory+0x48>
  {
    return QSPI_ERROR;
 8001270:	2301      	movs	r3, #1
 8001272:	e0ff      	b.n	8001474 <QSPI_ResetMemory+0x248>
  }
  /* Send the reset memory command */
  s_command.Instruction = RESET_MEMORY_CMD;
 8001274:	2399      	movs	r3, #153	; 0x99
 8001276:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001278:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800127c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001280:	4619      	mov	r1, r3
 8001282:	6878      	ldr	r0, [r7, #4]
 8001284:	f006 fa98 	bl	80077b8 <HAL_QSPI_Command>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <QSPI_ResetMemory+0x66>
  {
    return QSPI_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	e0f0      	b.n	8001474 <QSPI_ResetMemory+0x248>
  }

  /* Send command RESET command in SPI mode */
  /* Initialize the reset enable command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001292:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001296:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Instruction       = RESET_ENABLE_CMD;
 8001298:	2366      	movs	r3, #102	; 0x66
 800129a:	62bb      	str	r3, [r7, #40]	; 0x28
  /* Send the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800129c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80012a4:	4619      	mov	r1, r3
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	f006 fa86 	bl	80077b8 <HAL_QSPI_Command>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <QSPI_ResetMemory+0x8a>
  {
    return QSPI_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	e0de      	b.n	8001474 <QSPI_ResetMemory+0x248>
  }
  /* Send the reset memory command */
  s_command.Instruction = RESET_MEMORY_CMD;
 80012b6:	2399      	movs	r3, #153	; 0x99
 80012b8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80012ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012be:	f241 3288 	movw	r2, #5000	; 0x1388
 80012c2:	4619      	mov	r1, r3
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f006 fa77 	bl	80077b8 <HAL_QSPI_Command>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <QSPI_ResetMemory+0xa8>
  {
    return QSPI_ERROR;
 80012d0:	2301      	movs	r3, #1
 80012d2:	e0cf      	b.n	8001474 <QSPI_ResetMemory+0x248>
  }

  /* After reset CMD, 1000ms requested if QSPI memory SWReset occured during full chip erase operation */
  HAL_Delay( 1000 );
 80012d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012d8:	f001 fcdc 	bl	8002c94 <HAL_Delay>

  /* Configure automatic polling mode to wait the WIP bit=0 */
  s_config.Match           = 0;
 80012dc:	2300      	movs	r3, #0
 80012de:	613b      	str	r3, [r7, #16]
  s_config.Mask            = MX25L512_SR_WIP;
 80012e0:	2301      	movs	r3, #1
 80012e2:	617b      	str	r3, [r7, #20]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 80012e4:	2300      	movs	r3, #0
 80012e6:	623b      	str	r3, [r7, #32]
  s_config.StatusBytesSize = 1;
 80012e8:	2301      	movs	r3, #1
 80012ea:	61fb      	str	r3, [r7, #28]
  s_config.Interval        = 0x10;
 80012ec:	2310      	movs	r3, #16
 80012ee:	61bb      	str	r3, [r7, #24]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 80012f0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80012f4:	627b      	str	r3, [r7, #36]	; 0x24

  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80012f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012fa:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Instruction     = READ_STATUS_REG_CMD;
 80012fc:	2305      	movs	r3, #5
 80012fe:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode        = QSPI_DATA_1_LINE;
 8001300:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001304:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001306:	f107 0210 	add.w	r2, r7, #16
 800130a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800130e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001312:	6878      	ldr	r0, [r7, #4]
 8001314:	f006 fbdd 	bl	8007ad2 <HAL_QSPI_AutoPolling>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <QSPI_ResetMemory+0xf6>
  {
    return QSPI_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e0a8      	b.n	8001474 <QSPI_ResetMemory+0x248>
  }

  /* Initialize the reading of status register */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001322:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001326:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Instruction       = READ_STATUS_REG_CMD;
 8001328:	2305      	movs	r3, #5
 800132a:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800132c:	2300      	movs	r3, #0
 800132e:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001330:	2300      	movs	r3, #0
 8001332:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataMode          = QSPI_DATA_1_LINE;
 8001334:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001338:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DummyCycles       = 0;
 800133a:	2300      	movs	r3, #0
 800133c:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.NbData            = 1;
 800133e:	2301      	movs	r3, #1
 8001340:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001342:	2300      	movs	r3, #0
 8001344:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001346:	2300      	movs	r3, #0
 8001348:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800134a:	2300      	movs	r3, #0
 800134c:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800134e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001352:	f241 3288 	movw	r2, #5000	; 0x1388
 8001356:	4619      	mov	r1, r3
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f006 fa2d 	bl	80077b8 <HAL_QSPI_Command>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <QSPI_ResetMemory+0x13c>
  {
    return QSPI_ERROR;
 8001364:	2301      	movs	r3, #1
 8001366:	e085      	b.n	8001474 <QSPI_ResetMemory+0x248>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001368:	f107 030f 	add.w	r3, r7, #15
 800136c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001370:	4619      	mov	r1, r3
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	f006 fb10 	bl	8007998 <HAL_QSPI_Receive>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <QSPI_ResetMemory+0x156>
  {
    return QSPI_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	e078      	b.n	8001474 <QSPI_ResetMemory+0x248>
  }

  /* Enable write operations, command in 1 bit */
  /* Enable write operations */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001382:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001386:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Instruction       = WRITE_ENABLE_CMD;
 8001388:	2306      	movs	r3, #6
 800138a:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800138c:	2300      	movs	r3, #0
 800138e:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001390:	2300      	movs	r3, #0
 8001392:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataMode          = QSPI_DATA_NONE;
 8001394:	2300      	movs	r3, #0
 8001396:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DummyCycles       = 0;
 8001398:	2300      	movs	r3, #0
 800139a:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800139c:	2300      	movs	r3, #0
 800139e:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80013a0:	2300      	movs	r3, #0
 80013a2:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80013a4:	2300      	movs	r3, #0
 80013a6:	65fb      	str	r3, [r7, #92]	; 0x5c

  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80013a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80013b0:	4619      	mov	r1, r3
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	f006 fa00 	bl	80077b8 <HAL_QSPI_Command>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <QSPI_ResetMemory+0x196>
  {
    return QSPI_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	e058      	b.n	8001474 <QSPI_ResetMemory+0x248>
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_config.Match           = MX25L512_SR_WREN;
 80013c2:	2302      	movs	r3, #2
 80013c4:	613b      	str	r3, [r7, #16]
  s_config.Mask            = MX25L512_SR_WREN;
 80013c6:	2302      	movs	r3, #2
 80013c8:	617b      	str	r3, [r7, #20]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 80013ca:	2300      	movs	r3, #0
 80013cc:	623b      	str	r3, [r7, #32]
  s_config.StatusBytesSize = 1;
 80013ce:	2301      	movs	r3, #1
 80013d0:	61fb      	str	r3, [r7, #28]
  s_config.Interval        = 0x10;
 80013d2:	2310      	movs	r3, #16
 80013d4:	61bb      	str	r3, [r7, #24]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 80013d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80013da:	627b      	str	r3, [r7, #36]	; 0x24

  s_command.Instruction    = READ_STATUS_REG_CMD;
 80013dc:	2305      	movs	r3, #5
 80013de:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode       = QSPI_DATA_1_LINE;
 80013e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80013e4:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80013e6:	f107 0210 	add.w	r2, r7, #16
 80013ea:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80013ee:	f241 3388 	movw	r3, #5000	; 0x1388
 80013f2:	6878      	ldr	r0, [r7, #4]
 80013f4:	f006 fb6d 	bl	8007ad2 <HAL_QSPI_AutoPolling>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <QSPI_ResetMemory+0x1d6>
  {
    return QSPI_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	e038      	b.n	8001474 <QSPI_ResetMemory+0x248>
  }

  /* Update the configuration register with new dummy cycles */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001402:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001406:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Instruction       = WRITE_STATUS_CFG_REG_CMD;
 8001408:	2301      	movs	r3, #1
 800140a:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800140c:	2300      	movs	r3, #0
 800140e:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001410:	2300      	movs	r3, #0
 8001412:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataMode          = QSPI_DATA_1_LINE;
 8001414:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001418:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DummyCycles       = 0;
 800141a:	2300      	movs	r3, #0
 800141c:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.NbData            = 1;
 800141e:	2301      	movs	r3, #1
 8001420:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001422:	2300      	movs	r3, #0
 8001424:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001426:	2300      	movs	r3, #0
 8001428:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800142a:	2300      	movs	r3, #0
 800142c:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Enable the Quad IO on the QSPI memory (Non-volatile bit) */
  reg |= MX25L512_SR_QUADEN;
 800142e:	7bfb      	ldrb	r3, [r7, #15]
 8001430:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001434:	b2db      	uxtb	r3, r3
 8001436:	73fb      	strb	r3, [r7, #15]

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001438:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800143c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001440:	4619      	mov	r1, r3
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f006 f9b8 	bl	80077b8 <HAL_QSPI_Command>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <QSPI_ResetMemory+0x226>
  {
    return QSPI_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	e010      	b.n	8001474 <QSPI_ResetMemory+0x248>
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001452:	f107 030f 	add.w	r3, r7, #15
 8001456:	f241 3288 	movw	r2, #5000	; 0x1388
 800145a:	4619      	mov	r1, r3
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f006 fa09 	bl	8007874 <HAL_QSPI_Transmit>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <QSPI_ResetMemory+0x240>
  {
    return QSPI_ERROR;
 8001468:	2301      	movs	r3, #1
 800146a:	e003      	b.n	8001474 <QSPI_ResetMemory+0x248>
  }

  /* 40ms  Write Status/Configuration Register Cycle Time */
  HAL_Delay( 40 );
 800146c:	2028      	movs	r0, #40	; 0x28
 800146e:	f001 fc11 	bl	8002c94 <HAL_Delay>

  return QSPI_OK;
 8001472:	2300      	movs	r3, #0
}
 8001474:	4618      	mov	r0, r3
 8001476:	3760      	adds	r7, #96	; 0x60
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}

0800147c <QSPI_EnterMemory_QPI>:
  * @brief  This function put QSPI memory in QPI mode (quad I/O).
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_EnterMemory_QPI( QSPI_HandleTypeDef *hqspi )
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b096      	sub	sp, #88	; 0x58
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef      s_command;
  QSPI_AutoPollingTypeDef  s_config;

  /* Initialize the QPI enable command */
  /* QSPI memory is supported to be in SPI mode, so CMD on 1 LINE */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001484:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001488:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = ENTER_QUAD_CMD;
 800148a:	2335      	movs	r3, #53	; 0x35
 800148c:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800148e:	2300      	movs	r3, #0
 8001490:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001492:	2300      	movs	r3, #0
 8001494:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_NONE;
 8001496:	2300      	movs	r3, #0
 8001498:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 800149a:	2300      	movs	r3, #0
 800149c:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800149e:	2300      	movs	r3, #0
 80014a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80014a2:	2300      	movs	r3, #0
 80014a4:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80014a6:	2300      	movs	r3, #0
 80014a8:	657b      	str	r3, [r7, #84]	; 0x54

  /* Send the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80014aa:	f107 0320 	add.w	r3, r7, #32
 80014ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80014b2:	4619      	mov	r1, r3
 80014b4:	6878      	ldr	r0, [r7, #4]
 80014b6:	f006 f97f 	bl	80077b8 <HAL_QSPI_Command>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <QSPI_EnterMemory_QPI+0x48>
  {
    return QSPI_ERROR;
 80014c0:	2301      	movs	r3, #1
 80014c2:	e023      	b.n	800150c <QSPI_EnterMemory_QPI+0x90>
  }

  /* Configure automatic polling mode to wait the QUADEN bit=1 and WIP bit=0 */
  s_config.Match           = MX25L512_SR_QUADEN;
 80014c4:	2340      	movs	r3, #64	; 0x40
 80014c6:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = MX25L512_SR_QUADEN|MX25L512_SR_WIP;
 80014c8:	2341      	movs	r3, #65	; 0x41
 80014ca:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 80014cc:	2300      	movs	r3, #0
 80014ce:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 1;
 80014d0:	2301      	movs	r3, #1
 80014d2:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 80014d4:	2310      	movs	r3, #16
 80014d6:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 80014d8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80014dc:	61fb      	str	r3, [r7, #28]

  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80014de:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014e2:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = READ_STATUS_REG_CMD;
 80014e4:	2305      	movs	r3, #5
 80014e6:	623b      	str	r3, [r7, #32]
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80014e8:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80014ec:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80014ee:	f107 0208 	add.w	r2, r7, #8
 80014f2:	f107 0120 	add.w	r1, r7, #32
 80014f6:	f241 3388 	movw	r3, #5000	; 0x1388
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f006 fae9 	bl	8007ad2 <HAL_QSPI_AutoPolling>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <QSPI_EnterMemory_QPI+0x8e>
  {
    return QSPI_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e000      	b.n	800150c <QSPI_EnterMemory_QPI+0x90>
  }

  return QSPI_OK;
 800150a:	2300      	movs	r3, #0
}
 800150c:	4618      	mov	r0, r3
 800150e:	3758      	adds	r7, #88	; 0x58
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}

08001514 <QSPI_EnterFourBytesAddress>:
  * @brief  This function set the QSPI memory in 4-byte address mode
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_EnterFourBytesAddress(QSPI_HandleTypeDef *hqspi)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b090      	sub	sp, #64	; 0x40
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  /* Initialize the command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800151c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001520:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = ENTER_4_BYTE_ADDR_MODE_CMD;
 8001522:	23b7      	movs	r3, #183	; 0xb7
 8001524:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8001526:	2300      	movs	r3, #0
 8001528:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800152a:	2300      	movs	r3, #0
 800152c:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 800152e:	2300      	movs	r3, #0
 8001530:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 8001532:	2300      	movs	r3, #0
 8001534:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001536:	2300      	movs	r3, #0
 8001538:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800153a:	2300      	movs	r3, #0
 800153c:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800153e:	2300      	movs	r3, #0
 8001540:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Enable write operations */
  if (QSPI_WriteEnable(hqspi) != QSPI_OK)
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	f000 f996 	bl	8001874 <QSPI_WriteEnable>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <QSPI_EnterFourBytesAddress+0x3e>
  {
    return QSPI_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e017      	b.n	8001582 <QSPI_EnterFourBytesAddress+0x6e>
  }

  /* Send the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001552:	f107 0308 	add.w	r3, r7, #8
 8001556:	f241 3288 	movw	r2, #5000	; 0x1388
 800155a:	4619      	mov	r1, r3
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	f006 f92b 	bl	80077b8 <HAL_QSPI_Command>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <QSPI_EnterFourBytesAddress+0x58>
  {
    return QSPI_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	e00a      	b.n	8001582 <QSPI_EnterFourBytesAddress+0x6e>
  }

  /* Configure automatic polling mode to wait the memory is ready */
  if (QSPI_AutoPollingMemReady(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 800156c:	f241 3188 	movw	r1, #5000	; 0x1388
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	f000 f9c8 	bl	8001906 <QSPI_AutoPollingMemReady>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <QSPI_EnterFourBytesAddress+0x6c>
  {
    return QSPI_ERROR;
 800157c:	2301      	movs	r3, #1
 800157e:	e000      	b.n	8001582 <QSPI_EnterFourBytesAddress+0x6e>
  }

  return QSPI_OK;
 8001580:	2300      	movs	r3, #0
}
 8001582:	4618      	mov	r0, r3
 8001584:	3740      	adds	r7, #64	; 0x40
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <QSPI_DummyCyclesCfg>:
  * @brief  This function configure the dummy cycles on memory side.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_DummyCyclesCfg(QSPI_HandleTypeDef *hqspi)
{
 800158a:	b580      	push	{r7, lr}
 800158c:	b094      	sub	sp, #80	; 0x50
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;
  uint8_t reg[2];

  /* Initialize the reading of status register */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8001592:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001596:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction       = READ_STATUS_REG_CMD;
 8001598:	2305      	movs	r3, #5
 800159a:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800159c:	2300      	movs	r3, #0
 800159e:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80015a0:	2300      	movs	r3, #0
 80015a2:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80015a4:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80015a8:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles       = 0;
 80015aa:	2300      	movs	r3, #0
 80015ac:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData            = 1;
 80015ae:	2301      	movs	r3, #1
 80015b0:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80015b2:	2300      	movs	r3, #0
 80015b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80015b6:	2300      	movs	r3, #0
 80015b8:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80015ba:	2300      	movs	r3, #0
 80015bc:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80015be:	f107 0310 	add.w	r3, r7, #16
 80015c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80015c6:	4619      	mov	r1, r3
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	f006 f8f5 	bl	80077b8 <HAL_QSPI_Command>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <QSPI_DummyCyclesCfg+0x4e>
  {
    return QSPI_ERROR;
 80015d4:	2301      	movs	r3, #1
 80015d6:	e090      	b.n	80016fa <QSPI_DummyCyclesCfg+0x170>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80015d8:	f107 030c 	add.w	r3, r7, #12
 80015dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80015e0:	4619      	mov	r1, r3
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f006 f9d8 	bl	8007998 <HAL_QSPI_Receive>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <QSPI_DummyCyclesCfg+0x68>
  {
    return QSPI_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e083      	b.n	80016fa <QSPI_DummyCyclesCfg+0x170>
  }

  /* Initialize the reading of configuration register */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80015f2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015f6:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction       = READ_CFG_REG_CMD;
 80015f8:	2315      	movs	r3, #21
 80015fa:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80015fc:	2300      	movs	r3, #0
 80015fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001600:	2300      	movs	r3, #0
 8001602:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8001604:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8001608:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles       = 0;
 800160a:	2300      	movs	r3, #0
 800160c:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData            = 1;
 800160e:	2301      	movs	r3, #1
 8001610:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001612:	2300      	movs	r3, #0
 8001614:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001616:	2300      	movs	r3, #0
 8001618:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800161a:	2300      	movs	r3, #0
 800161c:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800161e:	f107 0310 	add.w	r3, r7, #16
 8001622:	f241 3288 	movw	r2, #5000	; 0x1388
 8001626:	4619      	mov	r1, r3
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f006 f8c5 	bl	80077b8 <HAL_QSPI_Command>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <QSPI_DummyCyclesCfg+0xae>
  {
    return QSPI_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	e060      	b.n	80016fa <QSPI_DummyCyclesCfg+0x170>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, &(reg[1]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001638:	f107 030c 	add.w	r3, r7, #12
 800163c:	3301      	adds	r3, #1
 800163e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001642:	4619      	mov	r1, r3
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	f006 f9a7 	bl	8007998 <HAL_QSPI_Receive>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <QSPI_DummyCyclesCfg+0xca>
  {
    return QSPI_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	e052      	b.n	80016fa <QSPI_DummyCyclesCfg+0x170>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(hqspi) != QSPI_OK)
 8001654:	6878      	ldr	r0, [r7, #4]
 8001656:	f000 f90d 	bl	8001874 <QSPI_WriteEnable>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <QSPI_DummyCyclesCfg+0xda>
  {
    return QSPI_ERROR;
 8001660:	2301      	movs	r3, #1
 8001662:	e04a      	b.n	80016fa <QSPI_DummyCyclesCfg+0x170>
  }

  /* Update the configuration register with new dummy cycles */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8001664:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001668:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction       = WRITE_STATUS_CFG_REG_CMD;
 800166a:	2301      	movs	r3, #1
 800166c:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800166e:	2300      	movs	r3, #0
 8001670:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001672:	2300      	movs	r3, #0
 8001674:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8001676:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800167a:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles       = 0;
 800167c:	2300      	movs	r3, #0
 800167e:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData            = 2;
 8001680:	2302      	movs	r3, #2
 8001682:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001684:	2300      	movs	r3, #0
 8001686:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001688:	2300      	movs	r3, #0
 800168a:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800168c:	2300      	movs	r3, #0
 800168e:	647b      	str	r3, [r7, #68]	; 0x44

  /* MX25L512_DUMMY_CYCLES_READ_QUAD = 3 for 10 cycles in QPI mode */
  MODIFY_REG( reg[1], MX25L512_CR_NB_DUMMY, (MX25L512_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(MX25L512_CR_NB_DUMMY)));
 8001690:	7b7b      	ldrb	r3, [r7, #13]
 8001692:	b25b      	sxtb	r3, r3
 8001694:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001698:	b25a      	sxtb	r2, r3
 800169a:	23c0      	movs	r3, #192	; 0xc0
 800169c:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800169e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80016a0:	fa93 f3a3 	rbit	r3, r3
 80016a4:	64bb      	str	r3, [r7, #72]	; 0x48
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80016a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80016a8:	fab3 f383 	clz	r3, r3
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	4619      	mov	r1, r3
 80016b0:	2303      	movs	r3, #3
 80016b2:	408b      	lsls	r3, r1
 80016b4:	b25b      	sxtb	r3, r3
 80016b6:	4313      	orrs	r3, r2
 80016b8:	b25b      	sxtb	r3, r3
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	737b      	strb	r3, [r7, #13]

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80016be:	f107 0310 	add.w	r3, r7, #16
 80016c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80016c6:	4619      	mov	r1, r3
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f006 f875 	bl	80077b8 <HAL_QSPI_Command>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <QSPI_DummyCyclesCfg+0x14e>
  {
    return QSPI_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	e010      	b.n	80016fa <QSPI_DummyCyclesCfg+0x170>
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(hqspi, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80016d8:	f107 030c 	add.w	r3, r7, #12
 80016dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80016e0:	4619      	mov	r1, r3
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f006 f8c6 	bl	8007874 <HAL_QSPI_Transmit>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <QSPI_DummyCyclesCfg+0x168>
  {
    return QSPI_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e003      	b.n	80016fa <QSPI_DummyCyclesCfg+0x170>
  }

  /* 40ms  Write Status/Configuration Register Cycle Time */
  HAL_Delay( 40 );
 80016f2:	2028      	movs	r0, #40	; 0x28
 80016f4:	f001 face 	bl	8002c94 <HAL_Delay>

  return QSPI_OK;
 80016f8:	2300      	movs	r3, #0
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3750      	adds	r7, #80	; 0x50
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}

08001702 <QSPI_OutDrvStrengthCfg>:
  * @brief  This function configure the Output driver strength on memory side.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_OutDrvStrengthCfg( QSPI_HandleTypeDef *hqspi )
{
 8001702:	b580      	push	{r7, lr}
 8001704:	b094      	sub	sp, #80	; 0x50
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;
  uint8_t reg[2];

  /* Initialize the reading of status register */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800170a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800170e:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction       = READ_STATUS_REG_CMD;
 8001710:	2305      	movs	r3, #5
 8001712:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8001714:	2300      	movs	r3, #0
 8001716:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001718:	2300      	movs	r3, #0
 800171a:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode          = QSPI_DATA_4_LINES;
 800171c:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8001720:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles       = 0;
 8001722:	2300      	movs	r3, #0
 8001724:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData            = 1;
 8001726:	2301      	movs	r3, #1
 8001728:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800172a:	2300      	movs	r3, #0
 800172c:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800172e:	2300      	movs	r3, #0
 8001730:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001732:	2300      	movs	r3, #0
 8001734:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001736:	f107 0310 	add.w	r3, r7, #16
 800173a:	f241 3288 	movw	r2, #5000	; 0x1388
 800173e:	4619      	mov	r1, r3
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	f006 f839 	bl	80077b8 <HAL_QSPI_Command>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <QSPI_OutDrvStrengthCfg+0x4e>
  {
    return QSPI_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	e08d      	b.n	800186c <QSPI_OutDrvStrengthCfg+0x16a>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001750:	f107 030c 	add.w	r3, r7, #12
 8001754:	f241 3288 	movw	r2, #5000	; 0x1388
 8001758:	4619      	mov	r1, r3
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	f006 f91c 	bl	8007998 <HAL_QSPI_Receive>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <QSPI_OutDrvStrengthCfg+0x68>
  {
    return QSPI_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	e080      	b.n	800186c <QSPI_OutDrvStrengthCfg+0x16a>
  }

  /* Initialize the reading of configuration register */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800176a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800176e:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction       = READ_CFG_REG_CMD;
 8001770:	2315      	movs	r3, #21
 8001772:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8001774:	2300      	movs	r3, #0
 8001776:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001778:	2300      	movs	r3, #0
 800177a:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode          = QSPI_DATA_4_LINES;
 800177c:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8001780:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles       = 0;
 8001782:	2300      	movs	r3, #0
 8001784:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData            = 1;
 8001786:	2301      	movs	r3, #1
 8001788:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800178a:	2300      	movs	r3, #0
 800178c:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800178e:	2300      	movs	r3, #0
 8001790:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001792:	2300      	movs	r3, #0
 8001794:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001796:	f107 0310 	add.w	r3, r7, #16
 800179a:	f241 3288 	movw	r2, #5000	; 0x1388
 800179e:	4619      	mov	r1, r3
 80017a0:	6878      	ldr	r0, [r7, #4]
 80017a2:	f006 f809 	bl	80077b8 <HAL_QSPI_Command>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d001      	beq.n	80017b0 <QSPI_OutDrvStrengthCfg+0xae>
  {
    return QSPI_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	e05d      	b.n	800186c <QSPI_OutDrvStrengthCfg+0x16a>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, &(reg[1]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80017b0:	f107 030c 	add.w	r3, r7, #12
 80017b4:	3301      	adds	r3, #1
 80017b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80017ba:	4619      	mov	r1, r3
 80017bc:	6878      	ldr	r0, [r7, #4]
 80017be:	f006 f8eb 	bl	8007998 <HAL_QSPI_Receive>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <QSPI_OutDrvStrengthCfg+0xca>
  {
    return QSPI_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	e04f      	b.n	800186c <QSPI_OutDrvStrengthCfg+0x16a>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(hqspi) != QSPI_OK)
 80017cc:	6878      	ldr	r0, [r7, #4]
 80017ce:	f000 f851 	bl	8001874 <QSPI_WriteEnable>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <QSPI_OutDrvStrengthCfg+0xda>
  {
    return QSPI_ERROR;
 80017d8:	2301      	movs	r3, #1
 80017da:	e047      	b.n	800186c <QSPI_OutDrvStrengthCfg+0x16a>
  }

  /* Update the configuration register with new output driver strength */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80017dc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80017e0:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction       = WRITE_STATUS_CFG_REG_CMD;
 80017e2:	2301      	movs	r3, #1
 80017e4:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80017e6:	2300      	movs	r3, #0
 80017e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80017ea:	2300      	movs	r3, #0
 80017ec:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80017ee:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80017f2:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles       = 0;
 80017f4:	2300      	movs	r3, #0
 80017f6:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData            = 2;
 80017f8:	2302      	movs	r3, #2
 80017fa:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80017fc:	2300      	movs	r3, #0
 80017fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001800:	2300      	movs	r3, #0
 8001802:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001804:	2300      	movs	r3, #0
 8001806:	647b      	str	r3, [r7, #68]	; 0x44

  /* Set Output Strength of the QSPI memory 15 ohms */
  MODIFY_REG( reg[1], MX25L512_CR_ODS, (MX25L512_CR_ODS_15 << POSITION_VAL(MX25L512_CR_ODS)));
 8001808:	7b7b      	ldrb	r3, [r7, #13]
 800180a:	b25b      	sxtb	r3, r3
 800180c:	f023 0307 	bic.w	r3, r3, #7
 8001810:	b25a      	sxtb	r2, r3
 8001812:	2307      	movs	r3, #7
 8001814:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001816:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001818:	fa93 f3a3 	rbit	r3, r3
 800181c:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800181e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001820:	fab3 f383 	clz	r3, r3
 8001824:	b2db      	uxtb	r3, r3
 8001826:	4619      	mov	r1, r3
 8001828:	2306      	movs	r3, #6
 800182a:	408b      	lsls	r3, r1
 800182c:	b25b      	sxtb	r3, r3
 800182e:	4313      	orrs	r3, r2
 8001830:	b25b      	sxtb	r3, r3
 8001832:	b2db      	uxtb	r3, r3
 8001834:	737b      	strb	r3, [r7, #13]

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001836:	f107 0310 	add.w	r3, r7, #16
 800183a:	f241 3288 	movw	r2, #5000	; 0x1388
 800183e:	4619      	mov	r1, r3
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	f005 ffb9 	bl	80077b8 <HAL_QSPI_Command>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d001      	beq.n	8001850 <QSPI_OutDrvStrengthCfg+0x14e>
  {
    return QSPI_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	e00d      	b.n	800186c <QSPI_OutDrvStrengthCfg+0x16a>
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(hqspi, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001850:	f107 030c 	add.w	r3, r7, #12
 8001854:	f241 3288 	movw	r2, #5000	; 0x1388
 8001858:	4619      	mov	r1, r3
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f006 f80a 	bl	8007874 <HAL_QSPI_Transmit>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <QSPI_OutDrvStrengthCfg+0x168>
  {
    return QSPI_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e000      	b.n	800186c <QSPI_OutDrvStrengthCfg+0x16a>
  }

  return QSPI_OK;
 800186a:	2300      	movs	r3, #0
}
 800186c:	4618      	mov	r0, r3
 800186e:	3750      	adds	r7, #80	; 0x50
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}

08001874 <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b096      	sub	sp, #88	; 0x58
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800187c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001880:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = WRITE_ENABLE_CMD;
 8001882:	2306      	movs	r3, #6
 8001884:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8001886:	2300      	movs	r3, #0
 8001888:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800188a:	2300      	movs	r3, #0
 800188c:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_NONE;
 800188e:	2300      	movs	r3, #0
 8001890:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 8001892:	2300      	movs	r3, #0
 8001894:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001896:	2300      	movs	r3, #0
 8001898:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800189a:	2300      	movs	r3, #0
 800189c:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800189e:	2300      	movs	r3, #0
 80018a0:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80018a2:	f107 0320 	add.w	r3, r7, #32
 80018a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80018aa:	4619      	mov	r1, r3
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	f005 ff83 	bl	80077b8 <HAL_QSPI_Command>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <QSPI_WriteEnable+0x48>
  {
    return QSPI_ERROR;
 80018b8:	2301      	movs	r3, #1
 80018ba:	e020      	b.n	80018fe <QSPI_WriteEnable+0x8a>
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_config.Match           = MX25L512_SR_WREN;
 80018bc:	2302      	movs	r3, #2
 80018be:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = MX25L512_SR_WREN;
 80018c0:	2302      	movs	r3, #2
 80018c2:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 80018c4:	2300      	movs	r3, #0
 80018c6:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 1;
 80018c8:	2301      	movs	r3, #1
 80018ca:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 80018cc:	2310      	movs	r3, #16
 80018ce:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 80018d0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80018d4:	61fb      	str	r3, [r7, #28]

  s_command.Instruction    = READ_STATUS_REG_CMD;
 80018d6:	2305      	movs	r3, #5
 80018d8:	623b      	str	r3, [r7, #32]
  s_command.DataMode       = QSPI_DATA_4_LINES;
 80018da:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80018de:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80018e0:	f107 0208 	add.w	r2, r7, #8
 80018e4:	f107 0120 	add.w	r1, r7, #32
 80018e8:	f241 3388 	movw	r3, #5000	; 0x1388
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f006 f8f0 	bl	8007ad2 <HAL_QSPI_AutoPolling>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d001      	beq.n	80018fc <QSPI_WriteEnable+0x88>
  {
    return QSPI_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e000      	b.n	80018fe <QSPI_WriteEnable+0x8a>
  }

  return QSPI_OK;
 80018fc:	2300      	movs	r3, #0
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3758      	adds	r7, #88	; 0x58
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}

08001906 <QSPI_AutoPollingMemReady>:
  * @param  hqspi: QSPI handle
  * @param  Timeout
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8001906:	b580      	push	{r7, lr}
 8001908:	b096      	sub	sp, #88	; 0x58
 800190a:	af00      	add	r7, sp, #0
 800190c:	6078      	str	r0, [r7, #4]
 800190e:	6039      	str	r1, [r7, #0]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8001910:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001914:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = READ_STATUS_REG_CMD;
 8001916:	2305      	movs	r3, #5
 8001918:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800191a:	2300      	movs	r3, #0
 800191c:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800191e:	2300      	movs	r3, #0
 8001920:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8001922:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8001926:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 8001928:	2300      	movs	r3, #0
 800192a:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800192c:	2300      	movs	r3, #0
 800192e:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001930:	2300      	movs	r3, #0
 8001932:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001934:	2300      	movs	r3, #0
 8001936:	657b      	str	r3, [r7, #84]	; 0x54

  s_config.Match           = 0;
 8001938:	2300      	movs	r3, #0
 800193a:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = MX25L512_SR_WIP;
 800193c:	2301      	movs	r3, #1
 800193e:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8001940:	2300      	movs	r3, #0
 8001942:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 1;
 8001944:	2301      	movs	r3, #1
 8001946:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 8001948:	2310      	movs	r3, #16
 800194a:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 800194c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001950:	61fb      	str	r3, [r7, #28]

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 8001952:	f107 0208 	add.w	r2, r7, #8
 8001956:	f107 0120 	add.w	r1, r7, #32
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	f006 f8b8 	bl	8007ad2 <HAL_QSPI_AutoPolling>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <QSPI_AutoPollingMemReady+0x66>
  {
    return QSPI_ERROR;
 8001968:	2301      	movs	r3, #1
 800196a:	e000      	b.n	800196e <QSPI_AutoPollingMemReady+0x68>
  }

  return QSPI_OK;
 800196c:	2300      	movs	r3, #0
}
 800196e:	4618      	mov	r0, r3
 8001970:	3758      	adds	r7, #88	; 0x58
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}

08001976 <BSP_QSPI_EnableMemoryMappedMode>:
/**
  * @brief  Configure the QSPI in memory-mapped mode
  * @retval QSPI memory status
  */
static uint8_t BSP_QSPI_EnableMemoryMappedMode(QSPI_HandleTypeDef *hqspi)
{
 8001976:	b580      	push	{r7, lr}
 8001978:	b092      	sub	sp, #72	; 0x48
 800197a:	af00      	add	r7, sp, #0
 800197c:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;

  /* Configure the command for the read instruction */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800197e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001982:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction       = QPI_READ_4_BYTE_ADDR_CMD;
 8001984:	23ec      	movs	r3, #236	; 0xec
 8001986:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8001988:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800198c:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 800198e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001992:	61fb      	str	r3, [r7, #28]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001994:	2300      	movs	r3, #0
 8001996:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8001998:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800199c:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles       = MX25L512_DUMMY_CYCLES_READ_QUAD_IO;
 800199e:	230a      	movs	r3, #10
 80019a0:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80019a2:	2300      	movs	r3, #0
 80019a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80019a6:	2300      	movs	r3, #0
 80019a8:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80019aa:	2300      	movs	r3, #0
 80019ac:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 80019ae:	2300      	movs	r3, #0
 80019b0:	60fb      	str	r3, [r7, #12]
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 80019b2:	2300      	movs	r3, #0
 80019b4:	60bb      	str	r3, [r7, #8]

  if (HAL_QSPI_MemoryMapped(hqspi, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 80019b6:	f107 0208 	add.w	r2, r7, #8
 80019ba:	f107 0310 	add.w	r3, r7, #16
 80019be:	4619      	mov	r1, r3
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	f006 f8fd 	bl	8007bc0 <HAL_QSPI_MemoryMapped>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d001      	beq.n	80019d0 <BSP_QSPI_EnableMemoryMappedMode+0x5a>
  {
    return QSPI_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	e000      	b.n	80019d2 <BSP_QSPI_EnableMemoryMappedMode+0x5c>
  }

  return QSPI_OK;
 80019d0:	2300      	movs	r3, #0
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3748      	adds	r7, #72	; 0x48
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}

080019da <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80019da:	b580      	push	{r7, lr}
 80019dc:	b082      	sub	sp, #8
 80019de:	af00      	add	r7, sp, #0
 80019e0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  for(;;)
  {
    osDelay(100);
 80019e2:	2064      	movs	r0, #100	; 0x64
 80019e4:	f009 fe16 	bl	800b614 <osDelay>
 80019e8:	e7fb      	b.n	80019e2 <StartDefaultTask+0x8>

080019ea <MPU_Config>:
}

/* MPU Configuration */

void MPU_Config(void)
{
 80019ea:	b580      	push	{r7, lr}
 80019ec:	b084      	sub	sp, #16
 80019ee:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80019f0:	463b      	mov	r3, r7
 80019f2:	2200      	movs	r2, #0
 80019f4:	601a      	str	r2, [r3, #0]
 80019f6:	605a      	str	r2, [r3, #4]
 80019f8:	609a      	str	r2, [r3, #8]
 80019fa:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80019fc:	f001 fa50 	bl	8002ea0 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001a00:	2301      	movs	r3, #1
 8001a02:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001a04:	2300      	movs	r3, #0
 8001a06:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x20000000;
 8001a08:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001a0c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8001a0e:	2312      	movs	r3, #18
 8001a10:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8001a12:	2300      	movs	r3, #0
 8001a14:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001a16:	2300      	movs	r3, #0
 8001a18:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8001a22:	2300      	movs	r3, #0
 8001a24:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8001a26:	2301      	movs	r3, #1
 8001a28:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001a2e:	463b      	mov	r3, r7
 8001a30:	4618      	mov	r0, r3
 8001a32:	f001 fa6d 	bl	8002f10 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8001a36:	2301      	movs	r3, #1
 8001a38:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x90000000;
 8001a3a:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 8001a3e:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512MB;
 8001a40:	231c      	movs	r3, #28
 8001a42:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001a44:	2300      	movs	r3, #0
 8001a46:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001a50:	463b      	mov	r3, r7
 8001a52:	4618      	mov	r0, r3
 8001a54:	f001 fa5c 	bl	8002f10 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8001a58:	2302      	movs	r3, #2
 8001a5a:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
 8001a5c:	2319      	movs	r3, #25
 8001a5e:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001a60:	2303      	movs	r3, #3
 8001a62:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8001a64:	2301      	movs	r3, #1
 8001a66:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001a6c:	463b      	mov	r3, r7
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f001 fa4e 	bl	8002f10 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8001a74:	2303      	movs	r3, #3
 8001a76:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0xC0000000;
 8001a78:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001a7c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512MB;
 8001a7e:	231c      	movs	r3, #28
 8001a80:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001a82:	2300      	movs	r3, #0
 8001a84:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001a86:	2300      	movs	r3, #0
 8001a88:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001a8e:	463b      	mov	r3, r7
 8001a90:	4618      	mov	r0, r3
 8001a92:	f001 fa3d 	bl	8002f10 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 8001a96:	2304      	movs	r3, #4
 8001a98:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
 8001a9a:	2317      	movs	r3, #23
 8001a9c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001aaa:	463b      	mov	r3, r7
 8001aac:	4618      	mov	r0, r3
 8001aae:	f001 fa2f 	bl	8002f10 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001ab2:	2004      	movs	r0, #4
 8001ab4:	f001 fa0c 	bl	8002ed0 <HAL_MPU_Enable>

}
 8001ab8:	bf00      	nop
 8001aba:	3710      	adds	r7, #16
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}

08001ac0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a04      	ldr	r2, [pc, #16]	; (8001ae0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d101      	bne.n	8001ad6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001ad2:	f001 f8bf 	bl	8002c54 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001ad6:	bf00      	nop
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	40001000 	.word	0x40001000

08001ae4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001ae8:	bf00      	nop
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
	...

08001af4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001afa:	4b11      	ldr	r3, [pc, #68]	; (8001b40 <HAL_MspInit+0x4c>)
 8001afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afe:	4a10      	ldr	r2, [pc, #64]	; (8001b40 <HAL_MspInit+0x4c>)
 8001b00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b04:	6413      	str	r3, [r2, #64]	; 0x40
 8001b06:	4b0e      	ldr	r3, [pc, #56]	; (8001b40 <HAL_MspInit+0x4c>)
 8001b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b0e:	607b      	str	r3, [r7, #4]
 8001b10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b12:	4b0b      	ldr	r3, [pc, #44]	; (8001b40 <HAL_MspInit+0x4c>)
 8001b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b16:	4a0a      	ldr	r2, [pc, #40]	; (8001b40 <HAL_MspInit+0x4c>)
 8001b18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b1c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b1e:	4b08      	ldr	r3, [pc, #32]	; (8001b40 <HAL_MspInit+0x4c>)
 8001b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b26:	603b      	str	r3, [r7, #0]
 8001b28:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	210f      	movs	r1, #15
 8001b2e:	f06f 0001 	mvn.w	r0, #1
 8001b32:	f001 f98b 	bl	8002e4c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b36:	bf00      	nop
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	40023800 	.word	0x40023800

08001b44 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b085      	sub	sp, #20
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a0a      	ldr	r2, [pc, #40]	; (8001b7c <HAL_CRC_MspInit+0x38>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d10b      	bne.n	8001b6e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001b56:	4b0a      	ldr	r3, [pc, #40]	; (8001b80 <HAL_CRC_MspInit+0x3c>)
 8001b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5a:	4a09      	ldr	r2, [pc, #36]	; (8001b80 <HAL_CRC_MspInit+0x3c>)
 8001b5c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b60:	6313      	str	r3, [r2, #48]	; 0x30
 8001b62:	4b07      	ldr	r3, [pc, #28]	; (8001b80 <HAL_CRC_MspInit+0x3c>)
 8001b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b6a:	60fb      	str	r3, [r7, #12]
 8001b6c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001b6e:	bf00      	nop
 8001b70:	3714      	adds	r7, #20
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	40023000 	.word	0x40023000
 8001b80:	40023800 	.word	0x40023800

08001b84 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a0d      	ldr	r2, [pc, #52]	; (8001bc8 <HAL_DMA2D_MspInit+0x44>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d113      	bne.n	8001bbe <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001b96:	4b0d      	ldr	r3, [pc, #52]	; (8001bcc <HAL_DMA2D_MspInit+0x48>)
 8001b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9a:	4a0c      	ldr	r2, [pc, #48]	; (8001bcc <HAL_DMA2D_MspInit+0x48>)
 8001b9c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ba2:	4b0a      	ldr	r3, [pc, #40]	; (8001bcc <HAL_DMA2D_MspInit+0x48>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001baa:	60fb      	str	r3, [r7, #12]
 8001bac:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8001bae:	2200      	movs	r2, #0
 8001bb0:	2105      	movs	r1, #5
 8001bb2:	205a      	movs	r0, #90	; 0x5a
 8001bb4:	f001 f94a 	bl	8002e4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001bb8:	205a      	movs	r0, #90	; 0x5a
 8001bba:	f001 f963 	bl	8002e84 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001bbe:	bf00      	nop
 8001bc0:	3710      	adds	r7, #16
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	4002b000 	.word	0x4002b000
 8001bcc:	40023800 	.word	0x40023800

08001bd0 <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b08a      	sub	sp, #40	; 0x28
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd8:	f107 0314 	add.w	r3, r7, #20
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]
 8001be0:	605a      	str	r2, [r3, #4]
 8001be2:	609a      	str	r2, [r3, #8]
 8001be4:	60da      	str	r2, [r3, #12]
 8001be6:	611a      	str	r2, [r3, #16]
  if(hdsi->Instance==DSI)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a1b      	ldr	r2, [pc, #108]	; (8001c5c <HAL_DSI_MspInit+0x8c>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d12f      	bne.n	8001c52 <HAL_DSI_MspInit+0x82>
  {
  /* USER CODE BEGIN DSI_MspInit 0 */

  /* USER CODE END DSI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 8001bf2:	4b1b      	ldr	r3, [pc, #108]	; (8001c60 <HAL_DSI_MspInit+0x90>)
 8001bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf6:	4a1a      	ldr	r2, [pc, #104]	; (8001c60 <HAL_DSI_MspInit+0x90>)
 8001bf8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001bfc:	6453      	str	r3, [r2, #68]	; 0x44
 8001bfe:	4b18      	ldr	r3, [pc, #96]	; (8001c60 <HAL_DSI_MspInit+0x90>)
 8001c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c02:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001c06:	613b      	str	r3, [r7, #16]
 8001c08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001c0a:	4b15      	ldr	r3, [pc, #84]	; (8001c60 <HAL_DSI_MspInit+0x90>)
 8001c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0e:	4a14      	ldr	r2, [pc, #80]	; (8001c60 <HAL_DSI_MspInit+0x90>)
 8001c10:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c14:	6313      	str	r3, [r2, #48]	; 0x30
 8001c16:	4b12      	ldr	r3, [pc, #72]	; (8001c60 <HAL_DSI_MspInit+0x90>)
 8001c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c1e:	60fb      	str	r3, [r7, #12]
 8001c20:	68fb      	ldr	r3, [r7, #12]
    /**DSIHOST GPIO Configuration
    PJ2     ------> DSIHOST_TE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001c22:	2304      	movs	r3, #4
 8001c24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c26:	2302      	movs	r3, #2
 8001c28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 8001c32:	230d      	movs	r3, #13
 8001c34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001c36:	f107 0314 	add.w	r3, r7, #20
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	4809      	ldr	r0, [pc, #36]	; (8001c64 <HAL_DSI_MspInit+0x94>)
 8001c3e:	f002 fe79 	bl	8004934 <HAL_GPIO_Init>

    /* DSI interrupt Init */
    HAL_NVIC_SetPriority(DSI_IRQn, 5, 0);
 8001c42:	2200      	movs	r2, #0
 8001c44:	2105      	movs	r1, #5
 8001c46:	2062      	movs	r0, #98	; 0x62
 8001c48:	f001 f900 	bl	8002e4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 8001c4c:	2062      	movs	r0, #98	; 0x62
 8001c4e:	f001 f919 	bl	8002e84 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }

}
 8001c52:	bf00      	nop
 8001c54:	3728      	adds	r7, #40	; 0x28
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	40016c00 	.word	0x40016c00
 8001c60:	40023800 	.word	0x40023800
 8001c64:	40022400 	.word	0x40022400

08001c68 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b0ae      	sub	sp, #184	; 0xb8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c70:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001c74:	2200      	movs	r2, #0
 8001c76:	601a      	str	r2, [r3, #0]
 8001c78:	605a      	str	r2, [r3, #4]
 8001c7a:	609a      	str	r2, [r3, #8]
 8001c7c:	60da      	str	r2, [r3, #12]
 8001c7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c80:	f107 0314 	add.w	r3, r7, #20
 8001c84:	2290      	movs	r2, #144	; 0x90
 8001c86:	2100      	movs	r1, #0
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f018 fc97 	bl	801a5bc <memset>
  if(hi2c->Instance==I2C4)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a37      	ldr	r2, [pc, #220]	; (8001d70 <HAL_I2C_MspInit+0x108>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d166      	bne.n	8001d66 <HAL_I2C_MspInit+0xfe>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001c98:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c9c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ca4:	f107 0314 	add.w	r3, r7, #20
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f006 fe7d 	bl	80089a8 <HAL_RCCEx_PeriphCLKConfig>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d001      	beq.n	8001cb8 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8001cb4:	f7ff ff16 	bl	8001ae4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cb8:	4b2e      	ldr	r3, [pc, #184]	; (8001d74 <HAL_I2C_MspInit+0x10c>)
 8001cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cbc:	4a2d      	ldr	r2, [pc, #180]	; (8001d74 <HAL_I2C_MspInit+0x10c>)
 8001cbe:	f043 0302 	orr.w	r3, r3, #2
 8001cc2:	6313      	str	r3, [r2, #48]	; 0x30
 8001cc4:	4b2b      	ldr	r3, [pc, #172]	; (8001d74 <HAL_I2C_MspInit+0x10c>)
 8001cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc8:	f003 0302 	and.w	r3, r3, #2
 8001ccc:	613b      	str	r3, [r7, #16]
 8001cce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cd0:	4b28      	ldr	r3, [pc, #160]	; (8001d74 <HAL_I2C_MspInit+0x10c>)
 8001cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd4:	4a27      	ldr	r2, [pc, #156]	; (8001d74 <HAL_I2C_MspInit+0x10c>)
 8001cd6:	f043 0308 	orr.w	r3, r3, #8
 8001cda:	6313      	str	r3, [r2, #48]	; 0x30
 8001cdc:	4b25      	ldr	r3, [pc, #148]	; (8001d74 <HAL_I2C_MspInit+0x10c>)
 8001cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce0:	f003 0308 	and.w	r3, r3, #8
 8001ce4:	60fb      	str	r3, [r7, #12]
 8001ce6:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PB7     ------> I2C4_SDA
    PD12     ------> I2C4_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001ce8:	2380      	movs	r3, #128	; 0x80
 8001cea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cee:	2312      	movs	r3, #18
 8001cf0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF11_I2C4;
 8001d00:	230b      	movs	r3, #11
 8001d02:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d06:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	481a      	ldr	r0, [pc, #104]	; (8001d78 <HAL_I2C_MspInit+0x110>)
 8001d0e:	f002 fe11 	bl	8004934 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001d12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d16:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d1a:	2312      	movs	r3, #18
 8001d1c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d20:	2301      	movs	r3, #1
 8001d22:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d26:	2303      	movs	r3, #3
 8001d28:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001d2c:	2304      	movs	r3, #4
 8001d2e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d32:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001d36:	4619      	mov	r1, r3
 8001d38:	4810      	ldr	r0, [pc, #64]	; (8001d7c <HAL_I2C_MspInit+0x114>)
 8001d3a:	f002 fdfb 	bl	8004934 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001d3e:	4b0d      	ldr	r3, [pc, #52]	; (8001d74 <HAL_I2C_MspInit+0x10c>)
 8001d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d42:	4a0c      	ldr	r2, [pc, #48]	; (8001d74 <HAL_I2C_MspInit+0x10c>)
 8001d44:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d48:	6413      	str	r3, [r2, #64]	; 0x40
 8001d4a:	4b0a      	ldr	r3, [pc, #40]	; (8001d74 <HAL_I2C_MspInit+0x10c>)
 8001d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d52:	60bb      	str	r3, [r7, #8]
 8001d54:	68bb      	ldr	r3, [r7, #8]
    /* I2C4 interrupt Init */
    HAL_NVIC_SetPriority(I2C4_EV_IRQn, 5, 0);
 8001d56:	2200      	movs	r2, #0
 8001d58:	2105      	movs	r1, #5
 8001d5a:	205f      	movs	r0, #95	; 0x5f
 8001d5c:	f001 f876 	bl	8002e4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_EV_IRQn);
 8001d60:	205f      	movs	r0, #95	; 0x5f
 8001d62:	f001 f88f 	bl	8002e84 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8001d66:	bf00      	nop
 8001d68:	37b8      	adds	r7, #184	; 0xb8
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	40006000 	.word	0x40006000
 8001d74:	40023800 	.word	0x40023800
 8001d78:	40020400 	.word	0x40020400
 8001d7c:	40020c00 	.word	0x40020c00

08001d80 <HAL_JPEG_MspInit>:
* This function configures the hardware resources used in this example
* @param hjpeg: JPEG handle pointer
* @retval None
*/
void HAL_JPEG_MspInit(JPEG_HandleTypeDef* hjpeg)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b084      	sub	sp, #16
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  if(hjpeg->Instance==JPEG)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a48      	ldr	r2, [pc, #288]	; (8001eb0 <HAL_JPEG_MspInit+0x130>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	f040 808a 	bne.w	8001ea8 <HAL_JPEG_MspInit+0x128>
  {
  /* USER CODE BEGIN JPEG_MspInit 0 */

  /* USER CODE END JPEG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_JPEG_CLK_ENABLE();
 8001d94:	4b47      	ldr	r3, [pc, #284]	; (8001eb4 <HAL_JPEG_MspInit+0x134>)
 8001d96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d98:	4a46      	ldr	r2, [pc, #280]	; (8001eb4 <HAL_JPEG_MspInit+0x134>)
 8001d9a:	f043 0302 	orr.w	r3, r3, #2
 8001d9e:	6353      	str	r3, [r2, #52]	; 0x34
 8001da0:	4b44      	ldr	r3, [pc, #272]	; (8001eb4 <HAL_JPEG_MspInit+0x134>)
 8001da2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001da4:	f003 0302 	and.w	r3, r3, #2
 8001da8:	60fb      	str	r3, [r7, #12]
 8001daa:	68fb      	ldr	r3, [r7, #12]

    /* JPEG DMA Init */
    /* JPEG_IN Init */
    hdma_jpeg_in.Instance = DMA2_Stream0;
 8001dac:	4b42      	ldr	r3, [pc, #264]	; (8001eb8 <HAL_JPEG_MspInit+0x138>)
 8001dae:	4a43      	ldr	r2, [pc, #268]	; (8001ebc <HAL_JPEG_MspInit+0x13c>)
 8001db0:	601a      	str	r2, [r3, #0]
    hdma_jpeg_in.Init.Channel = DMA_CHANNEL_9;
 8001db2:	4b41      	ldr	r3, [pc, #260]	; (8001eb8 <HAL_JPEG_MspInit+0x138>)
 8001db4:	f04f 5290 	mov.w	r2, #301989888	; 0x12000000
 8001db8:	605a      	str	r2, [r3, #4]
    hdma_jpeg_in.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001dba:	4b3f      	ldr	r3, [pc, #252]	; (8001eb8 <HAL_JPEG_MspInit+0x138>)
 8001dbc:	2240      	movs	r2, #64	; 0x40
 8001dbe:	609a      	str	r2, [r3, #8]
    hdma_jpeg_in.Init.PeriphInc = DMA_PINC_DISABLE;
 8001dc0:	4b3d      	ldr	r3, [pc, #244]	; (8001eb8 <HAL_JPEG_MspInit+0x138>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	60da      	str	r2, [r3, #12]
    hdma_jpeg_in.Init.MemInc = DMA_MINC_ENABLE;
 8001dc6:	4b3c      	ldr	r3, [pc, #240]	; (8001eb8 <HAL_JPEG_MspInit+0x138>)
 8001dc8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001dcc:	611a      	str	r2, [r3, #16]
    hdma_jpeg_in.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001dce:	4b3a      	ldr	r3, [pc, #232]	; (8001eb8 <HAL_JPEG_MspInit+0x138>)
 8001dd0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001dd4:	615a      	str	r2, [r3, #20]
    hdma_jpeg_in.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001dd6:	4b38      	ldr	r3, [pc, #224]	; (8001eb8 <HAL_JPEG_MspInit+0x138>)
 8001dd8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ddc:	619a      	str	r2, [r3, #24]
    hdma_jpeg_in.Init.Mode = DMA_NORMAL;
 8001dde:	4b36      	ldr	r3, [pc, #216]	; (8001eb8 <HAL_JPEG_MspInit+0x138>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	61da      	str	r2, [r3, #28]
    hdma_jpeg_in.Init.Priority = DMA_PRIORITY_LOW;
 8001de4:	4b34      	ldr	r3, [pc, #208]	; (8001eb8 <HAL_JPEG_MspInit+0x138>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	621a      	str	r2, [r3, #32]
    hdma_jpeg_in.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001dea:	4b33      	ldr	r3, [pc, #204]	; (8001eb8 <HAL_JPEG_MspInit+0x138>)
 8001dec:	2204      	movs	r2, #4
 8001dee:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_jpeg_in.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001df0:	4b31      	ldr	r3, [pc, #196]	; (8001eb8 <HAL_JPEG_MspInit+0x138>)
 8001df2:	2203      	movs	r2, #3
 8001df4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_jpeg_in.Init.MemBurst = DMA_MBURST_INC4;
 8001df6:	4b30      	ldr	r3, [pc, #192]	; (8001eb8 <HAL_JPEG_MspInit+0x138>)
 8001df8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001dfc:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_jpeg_in.Init.PeriphBurst = DMA_PBURST_INC4;
 8001dfe:	4b2e      	ldr	r3, [pc, #184]	; (8001eb8 <HAL_JPEG_MspInit+0x138>)
 8001e00:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001e04:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_jpeg_in) != HAL_OK)
 8001e06:	482c      	ldr	r0, [pc, #176]	; (8001eb8 <HAL_JPEG_MspInit+0x138>)
 8001e08:	f001 f9b0 	bl	800316c <HAL_DMA_Init>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <HAL_JPEG_MspInit+0x96>
    {
      Error_Handler();
 8001e12:	f7ff fe67 	bl	8001ae4 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmain,hdma_jpeg_in);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4a27      	ldr	r2, [pc, #156]	; (8001eb8 <HAL_JPEG_MspInit+0x138>)
 8001e1a:	631a      	str	r2, [r3, #48]	; 0x30
 8001e1c:	4a26      	ldr	r2, [pc, #152]	; (8001eb8 <HAL_JPEG_MspInit+0x138>)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6393      	str	r3, [r2, #56]	; 0x38

    /* JPEG_OUT Init */
    hdma_jpeg_out.Instance = DMA2_Stream1;
 8001e22:	4b27      	ldr	r3, [pc, #156]	; (8001ec0 <HAL_JPEG_MspInit+0x140>)
 8001e24:	4a27      	ldr	r2, [pc, #156]	; (8001ec4 <HAL_JPEG_MspInit+0x144>)
 8001e26:	601a      	str	r2, [r3, #0]
    hdma_jpeg_out.Init.Channel = DMA_CHANNEL_9;
 8001e28:	4b25      	ldr	r3, [pc, #148]	; (8001ec0 <HAL_JPEG_MspInit+0x140>)
 8001e2a:	f04f 5290 	mov.w	r2, #301989888	; 0x12000000
 8001e2e:	605a      	str	r2, [r3, #4]
    hdma_jpeg_out.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e30:	4b23      	ldr	r3, [pc, #140]	; (8001ec0 <HAL_JPEG_MspInit+0x140>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	609a      	str	r2, [r3, #8]
    hdma_jpeg_out.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e36:	4b22      	ldr	r3, [pc, #136]	; (8001ec0 <HAL_JPEG_MspInit+0x140>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	60da      	str	r2, [r3, #12]
    hdma_jpeg_out.Init.MemInc = DMA_MINC_ENABLE;
 8001e3c:	4b20      	ldr	r3, [pc, #128]	; (8001ec0 <HAL_JPEG_MspInit+0x140>)
 8001e3e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e42:	611a      	str	r2, [r3, #16]
    hdma_jpeg_out.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001e44:	4b1e      	ldr	r3, [pc, #120]	; (8001ec0 <HAL_JPEG_MspInit+0x140>)
 8001e46:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e4a:	615a      	str	r2, [r3, #20]
    hdma_jpeg_out.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001e4c:	4b1c      	ldr	r3, [pc, #112]	; (8001ec0 <HAL_JPEG_MspInit+0x140>)
 8001e4e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e52:	619a      	str	r2, [r3, #24]
    hdma_jpeg_out.Init.Mode = DMA_NORMAL;
 8001e54:	4b1a      	ldr	r3, [pc, #104]	; (8001ec0 <HAL_JPEG_MspInit+0x140>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	61da      	str	r2, [r3, #28]
    hdma_jpeg_out.Init.Priority = DMA_PRIORITY_LOW;
 8001e5a:	4b19      	ldr	r3, [pc, #100]	; (8001ec0 <HAL_JPEG_MspInit+0x140>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	621a      	str	r2, [r3, #32]
    hdma_jpeg_out.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001e60:	4b17      	ldr	r3, [pc, #92]	; (8001ec0 <HAL_JPEG_MspInit+0x140>)
 8001e62:	2204      	movs	r2, #4
 8001e64:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_jpeg_out.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001e66:	4b16      	ldr	r3, [pc, #88]	; (8001ec0 <HAL_JPEG_MspInit+0x140>)
 8001e68:	2203      	movs	r2, #3
 8001e6a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_jpeg_out.Init.MemBurst = DMA_MBURST_INC4;
 8001e6c:	4b14      	ldr	r3, [pc, #80]	; (8001ec0 <HAL_JPEG_MspInit+0x140>)
 8001e6e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001e72:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_jpeg_out.Init.PeriphBurst = DMA_PBURST_INC4;
 8001e74:	4b12      	ldr	r3, [pc, #72]	; (8001ec0 <HAL_JPEG_MspInit+0x140>)
 8001e76:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001e7a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_jpeg_out) != HAL_OK)
 8001e7c:	4810      	ldr	r0, [pc, #64]	; (8001ec0 <HAL_JPEG_MspInit+0x140>)
 8001e7e:	f001 f975 	bl	800316c <HAL_DMA_Init>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d001      	beq.n	8001e8c <HAL_JPEG_MspInit+0x10c>
    {
      Error_Handler();
 8001e88:	f7ff fe2c 	bl	8001ae4 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmaout,hdma_jpeg_out);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	4a0c      	ldr	r2, [pc, #48]	; (8001ec0 <HAL_JPEG_MspInit+0x140>)
 8001e90:	635a      	str	r2, [r3, #52]	; 0x34
 8001e92:	4a0b      	ldr	r2, [pc, #44]	; (8001ec0 <HAL_JPEG_MspInit+0x140>)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6393      	str	r3, [r2, #56]	; 0x38

    /* JPEG interrupt Init */
    HAL_NVIC_SetPriority(JPEG_IRQn, 5, 0);
 8001e98:	2200      	movs	r2, #0
 8001e9a:	2105      	movs	r1, #5
 8001e9c:	206c      	movs	r0, #108	; 0x6c
 8001e9e:	f000 ffd5 	bl	8002e4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
 8001ea2:	206c      	movs	r0, #108	; 0x6c
 8001ea4:	f000 ffee 	bl	8002e84 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN JPEG_MspInit 1 */

  /* USER CODE END JPEG_MspInit 1 */
  }

}
 8001ea8:	bf00      	nop
 8001eaa:	3710      	adds	r7, #16
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	50051000 	.word	0x50051000
 8001eb4:	40023800 	.word	0x40023800
 8001eb8:	200097fc 	.word	0x200097fc
 8001ebc:	40026410 	.word	0x40026410
 8001ec0:	2000985c 	.word	0x2000985c
 8001ec4:	40026428 	.word	0x40026428

08001ec8 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b0a8      	sub	sp, #160	; 0xa0
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ed0:	f107 0310 	add.w	r3, r7, #16
 8001ed4:	2290      	movs	r2, #144	; 0x90
 8001ed6:	2100      	movs	r1, #0
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f018 fb6f 	bl	801a5bc <memset>
  if(hltdc->Instance==LTDC)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a1a      	ldr	r2, [pc, #104]	; (8001f4c <HAL_LTDC_MspInit+0x84>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d12c      	bne.n	8001f42 <HAL_LTDC_MspInit+0x7a>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001ee8:	2308      	movs	r3, #8
 8001eea:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8001eec:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001ef0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 7;
 8001ef2:	2307      	movs	r3, #7
 8001ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001ef6:	2302      	movs	r3, #2
 8001ef8:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8001efa:	2300      	movs	r3, #0
 8001efc:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8001efe:	2301      	movs	r3, #1
 8001f00:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8001f02:	2300      	movs	r3, #0
 8001f04:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f06:	f107 0310 	add.w	r3, r7, #16
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f006 fd4c 	bl	80089a8 <HAL_RCCEx_PeriphCLKConfig>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <HAL_LTDC_MspInit+0x52>
    {
      Error_Handler();
 8001f16:	f7ff fde5 	bl	8001ae4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001f1a:	4b0d      	ldr	r3, [pc, #52]	; (8001f50 <HAL_LTDC_MspInit+0x88>)
 8001f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f1e:	4a0c      	ldr	r2, [pc, #48]	; (8001f50 <HAL_LTDC_MspInit+0x88>)
 8001f20:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001f24:	6453      	str	r3, [r2, #68]	; 0x44
 8001f26:	4b0a      	ldr	r3, [pc, #40]	; (8001f50 <HAL_LTDC_MspInit+0x88>)
 8001f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f2a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001f2e:	60fb      	str	r3, [r7, #12]
 8001f30:	68fb      	ldr	r3, [r7, #12]
    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 3, 0);
 8001f32:	2200      	movs	r2, #0
 8001f34:	2103      	movs	r1, #3
 8001f36:	2058      	movs	r0, #88	; 0x58
 8001f38:	f000 ff88 	bl	8002e4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001f3c:	2058      	movs	r0, #88	; 0x58
 8001f3e:	f000 ffa1 	bl	8002e84 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001f42:	bf00      	nop
 8001f44:	37a0      	adds	r7, #160	; 0xa0
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	40016800 	.word	0x40016800
 8001f50:	40023800 	.word	0x40023800

08001f54 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b08c      	sub	sp, #48	; 0x30
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f5c:	f107 031c 	add.w	r3, r7, #28
 8001f60:	2200      	movs	r2, #0
 8001f62:	601a      	str	r2, [r3, #0]
 8001f64:	605a      	str	r2, [r3, #4]
 8001f66:	609a      	str	r2, [r3, #8]
 8001f68:	60da      	str	r2, [r3, #12]
 8001f6a:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a4a      	ldr	r2, [pc, #296]	; (800209c <HAL_QSPI_MspInit+0x148>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	f040 808e 	bne.w	8002094 <HAL_QSPI_MspInit+0x140>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001f78:	4b49      	ldr	r3, [pc, #292]	; (80020a0 <HAL_QSPI_MspInit+0x14c>)
 8001f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f7c:	4a48      	ldr	r2, [pc, #288]	; (80020a0 <HAL_QSPI_MspInit+0x14c>)
 8001f7e:	f043 0302 	orr.w	r3, r3, #2
 8001f82:	6393      	str	r3, [r2, #56]	; 0x38
 8001f84:	4b46      	ldr	r3, [pc, #280]	; (80020a0 <HAL_QSPI_MspInit+0x14c>)
 8001f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f88:	f003 0302 	and.w	r3, r3, #2
 8001f8c:	61bb      	str	r3, [r7, #24]
 8001f8e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f90:	4b43      	ldr	r3, [pc, #268]	; (80020a0 <HAL_QSPI_MspInit+0x14c>)
 8001f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f94:	4a42      	ldr	r2, [pc, #264]	; (80020a0 <HAL_QSPI_MspInit+0x14c>)
 8001f96:	f043 0310 	orr.w	r3, r3, #16
 8001f9a:	6313      	str	r3, [r2, #48]	; 0x30
 8001f9c:	4b40      	ldr	r3, [pc, #256]	; (80020a0 <HAL_QSPI_MspInit+0x14c>)
 8001f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa0:	f003 0310 	and.w	r3, r3, #16
 8001fa4:	617b      	str	r3, [r7, #20]
 8001fa6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fa8:	4b3d      	ldr	r3, [pc, #244]	; (80020a0 <HAL_QSPI_MspInit+0x14c>)
 8001faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fac:	4a3c      	ldr	r2, [pc, #240]	; (80020a0 <HAL_QSPI_MspInit+0x14c>)
 8001fae:	f043 0302 	orr.w	r3, r3, #2
 8001fb2:	6313      	str	r3, [r2, #48]	; 0x30
 8001fb4:	4b3a      	ldr	r3, [pc, #232]	; (80020a0 <HAL_QSPI_MspInit+0x14c>)
 8001fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb8:	f003 0302 	and.w	r3, r3, #2
 8001fbc:	613b      	str	r3, [r7, #16]
 8001fbe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fc0:	4b37      	ldr	r3, [pc, #220]	; (80020a0 <HAL_QSPI_MspInit+0x14c>)
 8001fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc4:	4a36      	ldr	r2, [pc, #216]	; (80020a0 <HAL_QSPI_MspInit+0x14c>)
 8001fc6:	f043 0304 	orr.w	r3, r3, #4
 8001fca:	6313      	str	r3, [r2, #48]	; 0x30
 8001fcc:	4b34      	ldr	r3, [pc, #208]	; (80020a0 <HAL_QSPI_MspInit+0x14c>)
 8001fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd0:	f003 0304 	and.w	r3, r3, #4
 8001fd4:	60fb      	str	r3, [r7, #12]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fd8:	4b31      	ldr	r3, [pc, #196]	; (80020a0 <HAL_QSPI_MspInit+0x14c>)
 8001fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fdc:	4a30      	ldr	r2, [pc, #192]	; (80020a0 <HAL_QSPI_MspInit+0x14c>)
 8001fde:	f043 0308 	orr.w	r3, r3, #8
 8001fe2:	6313      	str	r3, [r2, #48]	; 0x30
 8001fe4:	4b2e      	ldr	r3, [pc, #184]	; (80020a0 <HAL_QSPI_MspInit+0x14c>)
 8001fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe8:	f003 0308 	and.w	r3, r3, #8
 8001fec:	60bb      	str	r3, [r7, #8]
 8001fee:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> QUADSPI_BK1_IO1
    PC9     ------> QUADSPI_BK1_IO0
    PB2     ------> QUADSPI_CLK
    PD13     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001ff0:	2304      	movs	r3, #4
 8001ff2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002000:	2309      	movs	r3, #9
 8002002:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002004:	f107 031c 	add.w	r3, r7, #28
 8002008:	4619      	mov	r1, r3
 800200a:	4826      	ldr	r0, [pc, #152]	; (80020a4 <HAL_QSPI_MspInit+0x150>)
 800200c:	f002 fc92 	bl	8004934 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002010:	2340      	movs	r3, #64	; 0x40
 8002012:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002014:	2302      	movs	r3, #2
 8002016:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002018:	2301      	movs	r3, #1
 800201a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800201c:	2303      	movs	r3, #3
 800201e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002020:	230a      	movs	r3, #10
 8002022:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002024:	f107 031c 	add.w	r3, r7, #28
 8002028:	4619      	mov	r1, r3
 800202a:	481f      	ldr	r0, [pc, #124]	; (80020a8 <HAL_QSPI_MspInit+0x154>)
 800202c:	f002 fc82 	bl	8004934 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8002030:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002034:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002036:	2302      	movs	r3, #2
 8002038:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203a:	2300      	movs	r3, #0
 800203c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800203e:	2303      	movs	r3, #3
 8002040:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002042:	2309      	movs	r3, #9
 8002044:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002046:	f107 031c 	add.w	r3, r7, #28
 800204a:	4619      	mov	r1, r3
 800204c:	4817      	ldr	r0, [pc, #92]	; (80020ac <HAL_QSPI_MspInit+0x158>)
 800204e:	f002 fc71 	bl	8004934 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002052:	2304      	movs	r3, #4
 8002054:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002056:	2302      	movs	r3, #2
 8002058:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205a:	2300      	movs	r3, #0
 800205c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800205e:	2303      	movs	r3, #3
 8002060:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002062:	2309      	movs	r3, #9
 8002064:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002066:	f107 031c 	add.w	r3, r7, #28
 800206a:	4619      	mov	r1, r3
 800206c:	480e      	ldr	r0, [pc, #56]	; (80020a8 <HAL_QSPI_MspInit+0x154>)
 800206e:	f002 fc61 	bl	8004934 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002072:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002076:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002078:	2302      	movs	r3, #2
 800207a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207c:	2300      	movs	r3, #0
 800207e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002080:	2303      	movs	r3, #3
 8002082:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002084:	2309      	movs	r3, #9
 8002086:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002088:	f107 031c 	add.w	r3, r7, #28
 800208c:	4619      	mov	r1, r3
 800208e:	4808      	ldr	r0, [pc, #32]	; (80020b0 <HAL_QSPI_MspInit+0x15c>)
 8002090:	f002 fc50 	bl	8004934 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8002094:	bf00      	nop
 8002096:	3730      	adds	r7, #48	; 0x30
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	a0001000 	.word	0xa0001000
 80020a0:	40023800 	.word	0x40023800
 80020a4:	40021000 	.word	0x40021000
 80020a8:	40020400 	.word	0x40020400
 80020ac:	40020800 	.word	0x40020800
 80020b0:	40020c00 	.word	0x40020c00

080020b4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b08a      	sub	sp, #40	; 0x28
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020bc:	f107 0314 	add.w	r3, r7, #20
 80020c0:	2200      	movs	r2, #0
 80020c2:	601a      	str	r2, [r3, #0]
 80020c4:	605a      	str	r2, [r3, #4]
 80020c6:	609a      	str	r2, [r3, #8]
 80020c8:	60da      	str	r2, [r3, #12]
 80020ca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a17      	ldr	r2, [pc, #92]	; (8002130 <HAL_SPI_MspInit+0x7c>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d127      	bne.n	8002126 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80020d6:	4b17      	ldr	r3, [pc, #92]	; (8002134 <HAL_SPI_MspInit+0x80>)
 80020d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020da:	4a16      	ldr	r2, [pc, #88]	; (8002134 <HAL_SPI_MspInit+0x80>)
 80020dc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80020e0:	6453      	str	r3, [r2, #68]	; 0x44
 80020e2:	4b14      	ldr	r3, [pc, #80]	; (8002134 <HAL_SPI_MspInit+0x80>)
 80020e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020ea:	613b      	str	r3, [r7, #16]
 80020ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020ee:	4b11      	ldr	r3, [pc, #68]	; (8002134 <HAL_SPI_MspInit+0x80>)
 80020f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f2:	4a10      	ldr	r2, [pc, #64]	; (8002134 <HAL_SPI_MspInit+0x80>)
 80020f4:	f043 0302 	orr.w	r3, r3, #2
 80020f8:	6313      	str	r3, [r2, #48]	; 0x30
 80020fa:	4b0e      	ldr	r3, [pc, #56]	; (8002134 <HAL_SPI_MspInit+0x80>)
 80020fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fe:	f003 0302 	and.w	r3, r3, #2
 8002102:	60fb      	str	r3, [r7, #12]
 8002104:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB5     ------> SPI1_MOSI
    PB4     ------> SPI1_MISO
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_3;
 8002106:	2338      	movs	r3, #56	; 0x38
 8002108:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800210a:	2302      	movs	r3, #2
 800210c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210e:	2300      	movs	r3, #0
 8002110:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002112:	2303      	movs	r3, #3
 8002114:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002116:	2305      	movs	r3, #5
 8002118:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800211a:	f107 0314 	add.w	r3, r7, #20
 800211e:	4619      	mov	r1, r3
 8002120:	4805      	ldr	r0, [pc, #20]	; (8002138 <HAL_SPI_MspInit+0x84>)
 8002122:	f002 fc07 	bl	8004934 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002126:	bf00      	nop
 8002128:	3728      	adds	r7, #40	; 0x28
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	40013000 	.word	0x40013000
 8002134:	40023800 	.word	0x40023800
 8002138:	40020400 	.word	0x40020400

0800213c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b0ae      	sub	sp, #184	; 0xb8
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002144:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002148:	2200      	movs	r2, #0
 800214a:	601a      	str	r2, [r3, #0]
 800214c:	605a      	str	r2, [r3, #4]
 800214e:	609a      	str	r2, [r3, #8]
 8002150:	60da      	str	r2, [r3, #12]
 8002152:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002154:	f107 0314 	add.w	r3, r7, #20
 8002158:	2290      	movs	r2, #144	; 0x90
 800215a:	2100      	movs	r1, #0
 800215c:	4618      	mov	r0, r3
 800215e:	f018 fa2d 	bl	801a5bc <memset>
  if(huart->Instance==USART2)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a21      	ldr	r2, [pc, #132]	; (80021ec <HAL_UART_MspInit+0xb0>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d13a      	bne.n	80021e2 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800216c:	2380      	movs	r3, #128	; 0x80
 800216e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002170:	2300      	movs	r3, #0
 8002172:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002174:	f107 0314 	add.w	r3, r7, #20
 8002178:	4618      	mov	r0, r3
 800217a:	f006 fc15 	bl	80089a8 <HAL_RCCEx_PeriphCLKConfig>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d001      	beq.n	8002188 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002184:	f7ff fcae 	bl	8001ae4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002188:	4b19      	ldr	r3, [pc, #100]	; (80021f0 <HAL_UART_MspInit+0xb4>)
 800218a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218c:	4a18      	ldr	r2, [pc, #96]	; (80021f0 <HAL_UART_MspInit+0xb4>)
 800218e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002192:	6413      	str	r3, [r2, #64]	; 0x40
 8002194:	4b16      	ldr	r3, [pc, #88]	; (80021f0 <HAL_UART_MspInit+0xb4>)
 8002196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002198:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800219c:	613b      	str	r3, [r7, #16]
 800219e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021a0:	4b13      	ldr	r3, [pc, #76]	; (80021f0 <HAL_UART_MspInit+0xb4>)
 80021a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a4:	4a12      	ldr	r2, [pc, #72]	; (80021f0 <HAL_UART_MspInit+0xb4>)
 80021a6:	f043 0301 	orr.w	r3, r3, #1
 80021aa:	6313      	str	r3, [r2, #48]	; 0x30
 80021ac:	4b10      	ldr	r3, [pc, #64]	; (80021f0 <HAL_UART_MspInit+0xb4>)
 80021ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b0:	f003 0301 	and.w	r3, r3, #1
 80021b4:	60fb      	str	r3, [r7, #12]
 80021b6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80021b8:	230c      	movs	r3, #12
 80021ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021be:	2302      	movs	r3, #2
 80021c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c4:	2300      	movs	r3, #0
 80021c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021ca:	2303      	movs	r3, #3
 80021cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80021d0:	2307      	movs	r3, #7
 80021d2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021d6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80021da:	4619      	mov	r1, r3
 80021dc:	4805      	ldr	r0, [pc, #20]	; (80021f4 <HAL_UART_MspInit+0xb8>)
 80021de:	f002 fba9 	bl	8004934 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80021e2:	bf00      	nop
 80021e4:	37b8      	adds	r7, #184	; 0xb8
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	40004400 	.word	0x40004400
 80021f0:	40023800 	.word	0x40023800
 80021f4:	40020000 	.word	0x40020000

080021f8 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b086      	sub	sp, #24
 80021fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80021fe:	1d3b      	adds	r3, r7, #4
 8002200:	2200      	movs	r2, #0
 8002202:	601a      	str	r2, [r3, #0]
 8002204:	605a      	str	r2, [r3, #4]
 8002206:	609a      	str	r2, [r3, #8]
 8002208:	60da      	str	r2, [r3, #12]
 800220a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800220c:	4b3b      	ldr	r3, [pc, #236]	; (80022fc <HAL_FMC_MspInit+0x104>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d16f      	bne.n	80022f4 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8002214:	4b39      	ldr	r3, [pc, #228]	; (80022fc <HAL_FMC_MspInit+0x104>)
 8002216:	2201      	movs	r2, #1
 8002218:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800221a:	4b39      	ldr	r3, [pc, #228]	; (8002300 <HAL_FMC_MspInit+0x108>)
 800221c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800221e:	4a38      	ldr	r2, [pc, #224]	; (8002300 <HAL_FMC_MspInit+0x108>)
 8002220:	f043 0301 	orr.w	r3, r3, #1
 8002224:	6393      	str	r3, [r2, #56]	; 0x38
 8002226:	4b36      	ldr	r3, [pc, #216]	; (8002300 <HAL_FMC_MspInit+0x108>)
 8002228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800222a:	f003 0301 	and.w	r3, r3, #1
 800222e:	603b      	str	r3, [r7, #0]
 8002230:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9
 8002232:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002236:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_7|GPIO_PIN_10
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002238:	2302      	movs	r3, #2
 800223a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223c:	2300      	movs	r3, #0
 800223e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002240:	2303      	movs	r3, #3
 8002242:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002244:	230c      	movs	r3, #12
 8002246:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002248:	1d3b      	adds	r3, r7, #4
 800224a:	4619      	mov	r1, r3
 800224c:	482d      	ldr	r0, [pc, #180]	; (8002304 <HAL_FMC_MspInit+0x10c>)
 800224e:	f002 fb71 	bl	8004934 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0
 8002252:	f248 1333 	movw	r3, #33075	; 0x8133
 8002256:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002258:	2302      	movs	r3, #2
 800225a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225c:	2300      	movs	r3, #0
 800225e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002260:	2303      	movs	r3, #3
 8002262:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002264:	230c      	movs	r3, #12
 8002266:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002268:	1d3b      	adds	r3, r7, #4
 800226a:	4619      	mov	r1, r3
 800226c:	4826      	ldr	r0, [pc, #152]	; (8002308 <HAL_FMC_MspInit+0x110>)
 800226e:	f002 fb61 	bl	8004934 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
 8002272:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002276:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002278:	2302      	movs	r3, #2
 800227a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800227c:	2300      	movs	r3, #0
 800227e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002280:	2303      	movs	r3, #3
 8002282:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002284:	230c      	movs	r3, #12
 8002286:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002288:	1d3b      	adds	r3, r7, #4
 800228a:	4619      	mov	r1, r3
 800228c:	481f      	ldr	r0, [pc, #124]	; (800230c <HAL_FMC_MspInit+0x114>)
 800228e:	f002 fb51 	bl	8004934 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_5
 8002292:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8002296:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_6|GPIO_PIN_1
                          |GPIO_PIN_9|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002298:	2302      	movs	r3, #2
 800229a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229c:	2300      	movs	r3, #0
 800229e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022a0:	2303      	movs	r3, #3
 80022a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80022a4:	230c      	movs	r3, #12
 80022a6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80022a8:	1d3b      	adds	r3, r7, #4
 80022aa:	4619      	mov	r1, r3
 80022ac:	4818      	ldr	r0, [pc, #96]	; (8002310 <HAL_FMC_MspInit+0x118>)
 80022ae:	f002 fb41 	bl	8004934 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80022b2:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80022b6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_15
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b8:	2302      	movs	r3, #2
 80022ba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022bc:	2300      	movs	r3, #0
 80022be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022c0:	2303      	movs	r3, #3
 80022c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80022c4:	230c      	movs	r3, #12
 80022c6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80022c8:	1d3b      	adds	r3, r7, #4
 80022ca:	4619      	mov	r1, r3
 80022cc:	4811      	ldr	r0, [pc, #68]	; (8002314 <HAL_FMC_MspInit+0x11c>)
 80022ce:	f002 fb31 	bl	8004934 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_5
 80022d2:	f64f 732c 	movw	r3, #65324	; 0xff2c
 80022d6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_9
                          |GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d8:	2302      	movs	r3, #2
 80022da:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022dc:	2300      	movs	r3, #0
 80022de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022e0:	2303      	movs	r3, #3
 80022e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80022e4:	230c      	movs	r3, #12
 80022e6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80022e8:	1d3b      	adds	r3, r7, #4
 80022ea:	4619      	mov	r1, r3
 80022ec:	480a      	ldr	r0, [pc, #40]	; (8002318 <HAL_FMC_MspInit+0x120>)
 80022ee:	f002 fb21 	bl	8004934 <HAL_GPIO_Init>
 80022f2:	e000      	b.n	80022f6 <HAL_FMC_MspInit+0xfe>
    return;
 80022f4:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80022f6:	3718      	adds	r7, #24
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	20009ad4 	.word	0x20009ad4
 8002300:	40023800 	.word	0x40023800
 8002304:	40021000 	.word	0x40021000
 8002308:	40021800 	.word	0x40021800
 800230c:	40020c00 	.word	0x40020c00
 8002310:	40022000 	.word	0x40022000
 8002314:	40021400 	.word	0x40021400
 8002318:	40021c00 	.word	0x40021c00

0800231c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002324:	f7ff ff68 	bl	80021f8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002328:	bf00      	nop
 800232a:	3708      	adds	r7, #8
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}

08002330 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b08e      	sub	sp, #56	; 0x38
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002338:	2300      	movs	r3, #0
 800233a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800233c:	2300      	movs	r3, #0
 800233e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002340:	4b33      	ldr	r3, [pc, #204]	; (8002410 <HAL_InitTick+0xe0>)
 8002342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002344:	4a32      	ldr	r2, [pc, #200]	; (8002410 <HAL_InitTick+0xe0>)
 8002346:	f043 0310 	orr.w	r3, r3, #16
 800234a:	6413      	str	r3, [r2, #64]	; 0x40
 800234c:	4b30      	ldr	r3, [pc, #192]	; (8002410 <HAL_InitTick+0xe0>)
 800234e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002350:	f003 0310 	and.w	r3, r3, #16
 8002354:	60fb      	str	r3, [r7, #12]
 8002356:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002358:	f107 0210 	add.w	r2, r7, #16
 800235c:	f107 0314 	add.w	r3, r7, #20
 8002360:	4611      	mov	r1, r2
 8002362:	4618      	mov	r0, r3
 8002364:	f006 faee 	bl	8008944 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002368:	6a3b      	ldr	r3, [r7, #32]
 800236a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800236c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800236e:	2b00      	cmp	r3, #0
 8002370:	d103      	bne.n	800237a <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002372:	f006 fabf 	bl	80088f4 <HAL_RCC_GetPCLK1Freq>
 8002376:	6378      	str	r0, [r7, #52]	; 0x34
 8002378:	e004      	b.n	8002384 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800237a:	f006 fabb 	bl	80088f4 <HAL_RCC_GetPCLK1Freq>
 800237e:	4603      	mov	r3, r0
 8002380:	005b      	lsls	r3, r3, #1
 8002382:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002386:	4a23      	ldr	r2, [pc, #140]	; (8002414 <HAL_InitTick+0xe4>)
 8002388:	fba2 2303 	umull	r2, r3, r2, r3
 800238c:	0c9b      	lsrs	r3, r3, #18
 800238e:	3b01      	subs	r3, #1
 8002390:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002392:	4b21      	ldr	r3, [pc, #132]	; (8002418 <HAL_InitTick+0xe8>)
 8002394:	4a21      	ldr	r2, [pc, #132]	; (800241c <HAL_InitTick+0xec>)
 8002396:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002398:	4b1f      	ldr	r3, [pc, #124]	; (8002418 <HAL_InitTick+0xe8>)
 800239a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800239e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80023a0:	4a1d      	ldr	r2, [pc, #116]	; (8002418 <HAL_InitTick+0xe8>)
 80023a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023a4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80023a6:	4b1c      	ldr	r3, [pc, #112]	; (8002418 <HAL_InitTick+0xe8>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023ac:	4b1a      	ldr	r3, [pc, #104]	; (8002418 <HAL_InitTick+0xe8>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023b2:	4b19      	ldr	r3, [pc, #100]	; (8002418 <HAL_InitTick+0xe8>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80023b8:	4817      	ldr	r0, [pc, #92]	; (8002418 <HAL_InitTick+0xe8>)
 80023ba:	f007 ff1d 	bl	800a1f8 <HAL_TIM_Base_Init>
 80023be:	4603      	mov	r3, r0
 80023c0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80023c4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d11b      	bne.n	8002404 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80023cc:	4812      	ldr	r0, [pc, #72]	; (8002418 <HAL_InitTick+0xe8>)
 80023ce:	f007 ff75 	bl	800a2bc <HAL_TIM_Base_Start_IT>
 80023d2:	4603      	mov	r3, r0
 80023d4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80023d8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d111      	bne.n	8002404 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80023e0:	2036      	movs	r0, #54	; 0x36
 80023e2:	f000 fd4f 	bl	8002e84 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2b0f      	cmp	r3, #15
 80023ea:	d808      	bhi.n	80023fe <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80023ec:	2200      	movs	r2, #0
 80023ee:	6879      	ldr	r1, [r7, #4]
 80023f0:	2036      	movs	r0, #54	; 0x36
 80023f2:	f000 fd2b 	bl	8002e4c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80023f6:	4a0a      	ldr	r2, [pc, #40]	; (8002420 <HAL_InitTick+0xf0>)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6013      	str	r3, [r2, #0]
 80023fc:	e002      	b.n	8002404 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002404:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002408:	4618      	mov	r0, r3
 800240a:	3738      	adds	r7, #56	; 0x38
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	40023800 	.word	0x40023800
 8002414:	431bde83 	.word	0x431bde83
 8002418:	20009ad8 	.word	0x20009ad8
 800241c:	40001000 	.word	0x40001000
 8002420:	20000004 	.word	0x20000004

08002424 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002428:	e7fe      	b.n	8002428 <NMI_Handler+0x4>

0800242a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800242a:	b480      	push	{r7}
 800242c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800242e:	e7fe      	b.n	800242e <HardFault_Handler+0x4>

08002430 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002430:	b480      	push	{r7}
 8002432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002434:	e7fe      	b.n	8002434 <MemManage_Handler+0x4>

08002436 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002436:	b480      	push	{r7}
 8002438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800243a:	e7fe      	b.n	800243a <BusFault_Handler+0x4>

0800243c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002440:	e7fe      	b.n	8002440 <UsageFault_Handler+0x4>

08002442 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002442:	b480      	push	{r7}
 8002444:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002446:	bf00      	nop
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr

08002450 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002454:	4802      	ldr	r0, [pc, #8]	; (8002460 <TIM6_DAC_IRQHandler+0x10>)
 8002456:	f007 ffa9 	bl	800a3ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800245a:	bf00      	nop
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	20009ad8 	.word	0x20009ad8

08002464 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_jpeg_in);
 8002468:	4802      	ldr	r0, [pc, #8]	; (8002474 <DMA2_Stream0_IRQHandler+0x10>)
 800246a:	f000 ffaf 	bl	80033cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800246e:	bf00      	nop
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	200097fc 	.word	0x200097fc

08002478 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_jpeg_out);
 800247c:	4802      	ldr	r0, [pc, #8]	; (8002488 <DMA2_Stream1_IRQHandler+0x10>)
 800247e:	f000 ffa5 	bl	80033cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8002482:	bf00      	nop
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	2000985c 	.word	0x2000985c

0800248c <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002490:	4802      	ldr	r0, [pc, #8]	; (800249c <LTDC_IRQHandler+0x10>)
 8002492:	f004 fda5 	bl	8006fe0 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8002496:	bf00      	nop
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	200098bc 	.word	0x200098bc

080024a0 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80024a4:	4802      	ldr	r0, [pc, #8]	; (80024b0 <DMA2D_IRQHandler+0x10>)
 80024a6:	f001 fa61 	bl	800396c <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80024aa:	bf00      	nop
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	200096dc 	.word	0x200096dc

080024b4 <I2C4_EV_IRQHandler>:

/**
  * @brief This function handles I2C4 event interrupt.
  */
void I2C4_EV_IRQHandler(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_EV_IRQn 0 */

  /* USER CODE END I2C4_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c4);
 80024b8:	4802      	ldr	r0, [pc, #8]	; (80024c4 <I2C4_EV_IRQHandler+0x10>)
 80024ba:	f002 fcab 	bl	8004e14 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C4_EV_IRQn 1 */

  /* USER CODE END I2C4_EV_IRQn 1 */
}
 80024be:	bf00      	nop
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	20009750 	.word	0x20009750

080024c8 <DSI_IRQHandler>:

/**
  * @brief This function handles DSI global interrupt.
  */
void DSI_IRQHandler(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 80024cc:	4802      	ldr	r0, [pc, #8]	; (80024d8 <DSI_IRQHandler+0x10>)
 80024ce:	f001 fe03 	bl	80040d8 <HAL_DSI_IRQHandler>
  /* USER CODE BEGIN DSI_IRQn 1 */

  /* USER CODE END DSI_IRQn 1 */
}
 80024d2:	bf00      	nop
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	20009734 	.word	0x20009734

080024dc <JPEG_IRQHandler>:

/**
  * @brief This function handles JPEG global interrupt.
  */
void JPEG_IRQHandler(void)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN JPEG_IRQn 0 */

  /* USER CODE END JPEG_IRQn 0 */
  HAL_JPEG_IRQHandler(&hjpeg);
 80024e0:	4802      	ldr	r0, [pc, #8]	; (80024ec <JPEG_IRQHandler+0x10>)
 80024e2:	f003 f821 	bl	8005528 <HAL_JPEG_IRQHandler>
  /* USER CODE BEGIN JPEG_IRQn 1 */

  /* USER CODE END JPEG_IRQn 1 */
}
 80024e6:	bf00      	nop
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	200097a4 	.word	0x200097a4

080024f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
  return 1;
 80024f4:	2301      	movs	r3, #1
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr

08002500 <_kill>:

int _kill(int pid, int sig)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800250a:	f017 fffd 	bl	801a508 <__errno>
 800250e:	4603      	mov	r3, r0
 8002510:	2216      	movs	r2, #22
 8002512:	601a      	str	r2, [r3, #0]
  return -1;
 8002514:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002518:	4618      	mov	r0, r3
 800251a:	3708      	adds	r7, #8
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}

08002520 <_exit>:

void _exit (int status)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002528:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f7ff ffe7 	bl	8002500 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002532:	e7fe      	b.n	8002532 <_exit+0x12>

08002534 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b086      	sub	sp, #24
 8002538:	af00      	add	r7, sp, #0
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	60b9      	str	r1, [r7, #8]
 800253e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002540:	2300      	movs	r3, #0
 8002542:	617b      	str	r3, [r7, #20]
 8002544:	e00a      	b.n	800255c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002546:	f3af 8000 	nop.w
 800254a:	4601      	mov	r1, r0
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	1c5a      	adds	r2, r3, #1
 8002550:	60ba      	str	r2, [r7, #8]
 8002552:	b2ca      	uxtb	r2, r1
 8002554:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	3301      	adds	r3, #1
 800255a:	617b      	str	r3, [r7, #20]
 800255c:	697a      	ldr	r2, [r7, #20]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	429a      	cmp	r2, r3
 8002562:	dbf0      	blt.n	8002546 <_read+0x12>
  }

  return len;
 8002564:	687b      	ldr	r3, [r7, #4]
}
 8002566:	4618      	mov	r0, r3
 8002568:	3718      	adds	r7, #24
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}

0800256e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800256e:	b580      	push	{r7, lr}
 8002570:	b086      	sub	sp, #24
 8002572:	af00      	add	r7, sp, #0
 8002574:	60f8      	str	r0, [r7, #12]
 8002576:	60b9      	str	r1, [r7, #8]
 8002578:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800257a:	2300      	movs	r3, #0
 800257c:	617b      	str	r3, [r7, #20]
 800257e:	e009      	b.n	8002594 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	1c5a      	adds	r2, r3, #1
 8002584:	60ba      	str	r2, [r7, #8]
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	4618      	mov	r0, r3
 800258a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	3301      	adds	r3, #1
 8002592:	617b      	str	r3, [r7, #20]
 8002594:	697a      	ldr	r2, [r7, #20]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	429a      	cmp	r2, r3
 800259a:	dbf1      	blt.n	8002580 <_write+0x12>
  }
  return len;
 800259c:	687b      	ldr	r3, [r7, #4]
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3718      	adds	r7, #24
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}

080025a6 <_close>:

int _close(int file)
{
 80025a6:	b480      	push	{r7}
 80025a8:	b083      	sub	sp, #12
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80025ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	370c      	adds	r7, #12
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr

080025be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80025be:	b480      	push	{r7}
 80025c0:	b083      	sub	sp, #12
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
 80025c6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80025ce:	605a      	str	r2, [r3, #4]
  return 0;
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	370c      	adds	r7, #12
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr

080025de <_isatty>:

int _isatty(int file)
{
 80025de:	b480      	push	{r7}
 80025e0:	b083      	sub	sp, #12
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80025e6:	2301      	movs	r3, #1
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	370c      	adds	r7, #12
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr

080025f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b085      	sub	sp, #20
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	60f8      	str	r0, [r7, #12]
 80025fc:	60b9      	str	r1, [r7, #8]
 80025fe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002600:	2300      	movs	r3, #0
}
 8002602:	4618      	mov	r0, r3
 8002604:	3714      	adds	r7, #20
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr
	...

08002610 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b086      	sub	sp, #24
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002618:	4a14      	ldr	r2, [pc, #80]	; (800266c <_sbrk+0x5c>)
 800261a:	4b15      	ldr	r3, [pc, #84]	; (8002670 <_sbrk+0x60>)
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002624:	4b13      	ldr	r3, [pc, #76]	; (8002674 <_sbrk+0x64>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d102      	bne.n	8002632 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800262c:	4b11      	ldr	r3, [pc, #68]	; (8002674 <_sbrk+0x64>)
 800262e:	4a12      	ldr	r2, [pc, #72]	; (8002678 <_sbrk+0x68>)
 8002630:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002632:	4b10      	ldr	r3, [pc, #64]	; (8002674 <_sbrk+0x64>)
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4413      	add	r3, r2
 800263a:	693a      	ldr	r2, [r7, #16]
 800263c:	429a      	cmp	r2, r3
 800263e:	d207      	bcs.n	8002650 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002640:	f017 ff62 	bl	801a508 <__errno>
 8002644:	4603      	mov	r3, r0
 8002646:	220c      	movs	r2, #12
 8002648:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800264a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800264e:	e009      	b.n	8002664 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002650:	4b08      	ldr	r3, [pc, #32]	; (8002674 <_sbrk+0x64>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002656:	4b07      	ldr	r3, [pc, #28]	; (8002674 <_sbrk+0x64>)
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4413      	add	r3, r2
 800265e:	4a05      	ldr	r2, [pc, #20]	; (8002674 <_sbrk+0x64>)
 8002660:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002662:	68fb      	ldr	r3, [r7, #12]
}
 8002664:	4618      	mov	r0, r3
 8002666:	3718      	adds	r7, #24
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}
 800266c:	20080000 	.word	0x20080000
 8002670:	00001000 	.word	0x00001000
 8002674:	20009b24 	.word	0x20009b24
 8002678:	200245d8 	.word	0x200245d8

0800267c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800267c:	b480      	push	{r7}
 800267e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002680:	4b06      	ldr	r3, [pc, #24]	; (800269c <SystemInit+0x20>)
 8002682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002686:	4a05      	ldr	r2, [pc, #20]	; (800269c <SystemInit+0x20>)
 8002688:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800268c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002690:	bf00      	nop
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop
 800269c:	e000ed00 	.word	0xe000ed00

080026a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80026a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026d8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80026a4:	480d      	ldr	r0, [pc, #52]	; (80026dc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80026a6:	490e      	ldr	r1, [pc, #56]	; (80026e0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80026a8:	4a0e      	ldr	r2, [pc, #56]	; (80026e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80026aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026ac:	e002      	b.n	80026b4 <LoopCopyDataInit>

080026ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026b2:	3304      	adds	r3, #4

080026b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026b8:	d3f9      	bcc.n	80026ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026ba:	4a0b      	ldr	r2, [pc, #44]	; (80026e8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80026bc:	4c0b      	ldr	r4, [pc, #44]	; (80026ec <LoopFillZerobss+0x26>)
  movs r3, #0
 80026be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026c0:	e001      	b.n	80026c6 <LoopFillZerobss>

080026c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026c4:	3204      	adds	r2, #4

080026c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026c8:	d3fb      	bcc.n	80026c2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80026ca:	f7ff ffd7 	bl	800267c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80026ce:	f017 ff33 	bl	801a538 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026d2:	f7fd ffd3 	bl	800067c <main>
  bx  lr    
 80026d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80026d8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80026dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026e0:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 80026e4:	0801ed6c 	.word	0x0801ed6c
  ldr r2, =_sbss
 80026e8:	2000969c 	.word	0x2000969c
  ldr r4, =_ebss
 80026ec:	200245d8 	.word	0x200245d8

080026f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026f0:	e7fe      	b.n	80026f0 <ADC_IRQHandler>
	...

080026f4 <InitInternalCommsTask>:
    .name = "InternalCommunications",
    .stack_size = STACK_SIZE,
    .priority = INTERNAL_COMMS_TASK_PRIORITY,
};

PUBLIC void InitInternalCommsTask(void) {
 80026f4:	b580      	push	{r7, lr}
 80026f6:	af00      	add	r7, sp, #0

  InternalCommsTaskHandle =
      osThreadNew(InternalCommsTask, NULL, &InternalCommsTask_attributes);
 80026f8:	4a04      	ldr	r2, [pc, #16]	; (800270c <InitInternalCommsTask+0x18>)
 80026fa:	2100      	movs	r1, #0
 80026fc:	4804      	ldr	r0, [pc, #16]	; (8002710 <InitInternalCommsTask+0x1c>)
 80026fe:	f008 fee3 	bl	800b4c8 <osThreadNew>
 8002702:	4603      	mov	r3, r0
  InternalCommsTaskHandle =
 8002704:	4a03      	ldr	r2, [pc, #12]	; (8002714 <InitInternalCommsTask+0x20>)
 8002706:	6013      	str	r3, [r2, #0]
}
 8002708:	bf00      	nop
 800270a:	bd80      	pop	{r7, pc}
 800270c:	0801da78 	.word	0x0801da78
 8002710:	08002719 	.word	0x08002719
 8002714:	20009b28 	.word	0x20009b28

08002718 <InternalCommsTask>:
PRIVATE void InternalCommsTask(void *argument) {
 8002718:	b580      	push	{r7, lr}
 800271a:	b084      	sub	sp, #16
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  uint32_t cycleTick = osKernelGetTickCount();
 8002720:	f008 feaa 	bl	800b478 <osKernelGetTickCount>
 8002724:	60f8      	str	r0, [r7, #12]
  DebugPrint("icomms");
 8002726:	4808      	ldr	r0, [pc, #32]	; (8002748 <InternalCommsTask+0x30>)
 8002728:	f011 fe36 	bl	8014398 <SerialPrintln>

  IComms_Init();
 800272c:	f011 fe80 	bl	8014430 <IComms_Init>
  for (;;) {
    cycleTick += TIMER_INTERNAL_COMMS_TASK;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	33c8      	adds	r3, #200	; 0xc8
 8002734:	60fb      	str	r3, [r7, #12]
    osDelayUntil(cycleTick);
 8002736:	68f8      	ldr	r0, [r7, #12]
 8002738:	f008 ff9a 	bl	800b670 <osDelayUntil>

    IComms_PeriodicReceive();
 800273c:	f011 ff26 	bl	801458c <IComms_PeriodicReceive>
    DebugPrint("hi");
 8002740:	4802      	ldr	r0, [pc, #8]	; (800274c <InternalCommsTask+0x34>)
 8002742:	f011 fe29 	bl	8014398 <SerialPrintln>
    cycleTick += TIMER_INTERNAL_COMMS_TASK;
 8002746:	e7f3      	b.n	8002730 <InternalCommsTask+0x18>
 8002748:	0801ba80 	.word	0x0801ba80
 800274c:	0801ba88 	.word	0x0801ba88

08002750 <RunTaskManager>:
 * appropriate tasks
 */
#include "TaskManager.h"
#include "InternalCommsTask.h"

void RunTaskManager(void) { InitInternalCommsTask(); }
 8002750:	b580      	push	{r7, lr}
 8002752:	af00      	add	r7, sp, #0
 8002754:	f7ff ffce 	bl	80026f4 <InitInternalCommsTask>
 8002758:	bf00      	nop
 800275a:	bd80      	pop	{r7, pc}

0800275c <DSI_IO_WriteCmd>:
/**
  * @brief  DSI IO write short/long command.
  * @note : Can be surcharged by application code implementation of the function.
  */
__weak void DSI_IO_WriteCmd(uint32_t NbrParams, uint8_t *pParams)
{
 800275c:	b480      	push	{r7}
 800275e:	b083      	sub	sp, #12
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
 8002764:	6039      	str	r1, [r7, #0]
  /* NOTE : This function Should not be modified, when it is needed,
            the DSI_IO_WriteCmd could be implemented in the user file
   */
}
 8002766:	bf00      	nop
 8002768:	370c      	adds	r7, #12
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr

08002772 <OTM8009A_IO_Delay>:

void OTM8009A_IO_Delay(uint32_t Delay) {
 8002772:	b580      	push	{r7, lr}
 8002774:	b082      	sub	sp, #8
 8002776:	af00      	add	r7, sp, #0
 8002778:	6078      	str	r0, [r7, #4]
	HAL_Delay(Delay);
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f000 fa8a 	bl	8002c94 <HAL_Delay>
}
 8002780:	bf00      	nop
 8002782:	3708      	adds	r7, #8
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}

08002788 <OTM8009A_Init>:
  * @param  hdsi_eval : pointer on DSI configuration structure
  * @param  hdsivideo_handle : pointer on DSI video mode configuration structure
  * @retval Status
  */
uint8_t OTM8009A_Init(uint32_t ColorCoding, uint32_t orientation)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	6039      	str	r1, [r7, #0]
  /* Enable CMD2 to access vendor specific commands                               */
  /* Enter in command 2 mode and set EXTC to enable address shift function (0x00) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8002792:	49c1      	ldr	r1, [pc, #772]	; (8002a98 <OTM8009A_Init+0x310>)
 8002794:	2000      	movs	r0, #0
 8002796:	f7ff ffe1 	bl	800275c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData1);
 800279a:	49c0      	ldr	r1, [pc, #768]	; (8002a9c <OTM8009A_Init+0x314>)
 800279c:	2003      	movs	r0, #3
 800279e:	f7ff ffdd 	bl	800275c <DSI_IO_WriteCmd>

  /* Enter ORISE Command 2 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2); /* Shift address to 0x80 */
 80027a2:	49bf      	ldr	r1, [pc, #764]	; (8002aa0 <OTM8009A_Init+0x318>)
 80027a4:	2000      	movs	r0, #0
 80027a6:	f7ff ffd9 	bl	800275c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData2);
 80027aa:	49be      	ldr	r1, [pc, #760]	; (8002aa4 <OTM8009A_Init+0x31c>)
 80027ac:	2002      	movs	r0, #2
 80027ae:	f7ff ffd5 	bl	800275c <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////
  /* SD_PCH_CTRL - 0xC480h - 129th parameter - Default 0x00          */
  /* Set SD_PT                                                       */
  /* -> Source output level during porch and non-display area to GND */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 80027b2:	49bb      	ldr	r1, [pc, #748]	; (8002aa0 <OTM8009A_Init+0x318>)
 80027b4:	2000      	movs	r0, #0
 80027b6:	f7ff ffd1 	bl	800275c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData3);
 80027ba:	49bb      	ldr	r1, [pc, #748]	; (8002aa8 <OTM8009A_Init+0x320>)
 80027bc:	2000      	movs	r0, #0
 80027be:	f7ff ffcd 	bl	800275c <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 80027c2:	200a      	movs	r0, #10
 80027c4:	f7ff ffd5 	bl	8002772 <OTM8009A_IO_Delay>
  /* Not documented */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData4);
 80027c8:	49b8      	ldr	r1, [pc, #736]	; (8002aac <OTM8009A_Init+0x324>)
 80027ca:	2000      	movs	r0, #0
 80027cc:	f7ff ffc6 	bl	800275c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData5);
 80027d0:	49b7      	ldr	r1, [pc, #732]	; (8002ab0 <OTM8009A_Init+0x328>)
 80027d2:	2000      	movs	r0, #0
 80027d4:	f7ff ffc2 	bl	800275c <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 80027d8:	200a      	movs	r0, #10
 80027da:	f7ff ffca 	bl	8002772 <OTM8009A_IO_Delay>
  /////////////////////////////////////////////////////////////////////

  /* PWR_CTRL4 - 0xC4B0h - 178th parameter - Default 0xA8 */
  /* Set gvdd_en_test                                     */
  /* -> enable GVDD test mode !!!                         */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData6);
 80027de:	49b5      	ldr	r1, [pc, #724]	; (8002ab4 <OTM8009A_Init+0x32c>)
 80027e0:	2000      	movs	r0, #0
 80027e2:	f7ff ffbb 	bl	800275c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData7);
 80027e6:	49b4      	ldr	r1, [pc, #720]	; (8002ab8 <OTM8009A_Init+0x330>)
 80027e8:	2000      	movs	r0, #0
 80027ea:	f7ff ffb7 	bl	800275c <DSI_IO_WriteCmd>
  /* PWR_CTRL2 - 0xC590h - 146th parameter - Default 0x79      */
  /* Set pump 4 vgh voltage                                    */
  /* -> from 15.0v down to 13.0v                               */
  /* Set pump 5 vgh voltage                                    */
  /* -> from -12.0v downto -9.0v                               */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData8);
 80027ee:	49b3      	ldr	r1, [pc, #716]	; (8002abc <OTM8009A_Init+0x334>)
 80027f0:	2000      	movs	r0, #0
 80027f2:	f7ff ffb3 	bl	800275c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 80027f6:	49b2      	ldr	r1, [pc, #712]	; (8002ac0 <OTM8009A_Init+0x338>)
 80027f8:	2000      	movs	r0, #0
 80027fa:	f7ff ffaf 	bl	800275c <DSI_IO_WriteCmd>

  /* P_DRV_M - 0xC0B4h - 181th parameter - Default 0x00 */
  /* -> Column inversion                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData10);
 80027fe:	49b1      	ldr	r1, [pc, #708]	; (8002ac4 <OTM8009A_Init+0x33c>)
 8002800:	2000      	movs	r0, #0
 8002802:	f7ff ffab 	bl	800275c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData11);
 8002806:	49b0      	ldr	r1, [pc, #704]	; (8002ac8 <OTM8009A_Init+0x340>)
 8002808:	2000      	movs	r0, #0
 800280a:	f7ff ffa7 	bl	800275c <DSI_IO_WriteCmd>

  /* VCOMDC - 0xD900h - 1st parameter - Default 0x39h */
  /* VCOM Voltage settings                            */
  /* -> from -1.0000v downto -1.2625v                 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 800280e:	49a2      	ldr	r1, [pc, #648]	; (8002a98 <OTM8009A_Init+0x310>)
 8002810:	2000      	movs	r0, #0
 8002812:	f7ff ffa3 	bl	800275c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData12);
 8002816:	49ad      	ldr	r1, [pc, #692]	; (8002acc <OTM8009A_Init+0x344>)
 8002818:	2000      	movs	r0, #0
 800281a:	f7ff ff9f 	bl	800275c <DSI_IO_WriteCmd>

  /* Oscillator adjustment for Idle/Normal mode (LPDT only) set to 65Hz (default is 60Hz) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 800281e:	49ac      	ldr	r1, [pc, #688]	; (8002ad0 <OTM8009A_Init+0x348>)
 8002820:	2000      	movs	r0, #0
 8002822:	f7ff ff9b 	bl	800275c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData14);
 8002826:	49ab      	ldr	r1, [pc, #684]	; (8002ad4 <OTM8009A_Init+0x34c>)
 8002828:	2000      	movs	r0, #0
 800282a:	f7ff ff97 	bl	800275c <DSI_IO_WriteCmd>

  /* Video mode internal */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 800282e:	49aa      	ldr	r1, [pc, #680]	; (8002ad8 <OTM8009A_Init+0x350>)
 8002830:	2000      	movs	r0, #0
 8002832:	f7ff ff93 	bl	800275c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData16);
 8002836:	49a9      	ldr	r1, [pc, #676]	; (8002adc <OTM8009A_Init+0x354>)
 8002838:	2000      	movs	r0, #0
 800283a:	f7ff ff8f 	bl	800275c <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 147h parameter - Default 0x00 */
  /* Set pump 4&5 x6                                     */
  /* -> ONLY VALID when PUMP4_EN_ASDM_HV = "0"           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData17);
 800283e:	49a8      	ldr	r1, [pc, #672]	; (8002ae0 <OTM8009A_Init+0x358>)
 8002840:	2000      	movs	r0, #0
 8002842:	f7ff ff8b 	bl	800275c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData18);
 8002846:	49a7      	ldr	r1, [pc, #668]	; (8002ae4 <OTM8009A_Init+0x35c>)
 8002848:	2000      	movs	r0, #0
 800284a:	f7ff ff87 	bl	800275c <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 150th parameter - Default 0x33h */
  /* Change pump4 clock ratio                              */
  /* -> from 1 line to 1/2 line                            */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData19);
 800284e:	49a6      	ldr	r1, [pc, #664]	; (8002ae8 <OTM8009A_Init+0x360>)
 8002850:	2000      	movs	r0, #0
 8002852:	f7ff ff83 	bl	800275c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 8002856:	499a      	ldr	r1, [pc, #616]	; (8002ac0 <OTM8009A_Init+0x338>)
 8002858:	2000      	movs	r0, #0
 800285a:	f7ff ff7f 	bl	800275c <DSI_IO_WriteCmd>

  /* GVDD/NGVDD settings */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 800285e:	498e      	ldr	r1, [pc, #568]	; (8002a98 <OTM8009A_Init+0x310>)
 8002860:	2000      	movs	r0, #0
 8002862:	f7ff ff7b 	bl	800275c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData5);
 8002866:	49a1      	ldr	r1, [pc, #644]	; (8002aec <OTM8009A_Init+0x364>)
 8002868:	2002      	movs	r0, #2
 800286a:	f7ff ff77 	bl	800275c <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 149th parameter - Default 0x33h */
  /* Rewrite the default value !                           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData20);
 800286e:	49a0      	ldr	r1, [pc, #640]	; (8002af0 <OTM8009A_Init+0x368>)
 8002870:	2000      	movs	r0, #0
 8002872:	f7ff ff73 	bl	800275c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData21);
 8002876:	499f      	ldr	r1, [pc, #636]	; (8002af4 <OTM8009A_Init+0x36c>)
 8002878:	2000      	movs	r0, #0
 800287a:	f7ff ff6f 	bl	800275c <DSI_IO_WriteCmd>

  /* Panel display timing Setting 3 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData22);
 800287e:	499e      	ldr	r1, [pc, #632]	; (8002af8 <OTM8009A_Init+0x370>)
 8002880:	2000      	movs	r0, #0
 8002882:	f7ff ff6b 	bl	800275c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData23);
 8002886:	499d      	ldr	r1, [pc, #628]	; (8002afc <OTM8009A_Init+0x374>)
 8002888:	2000      	movs	r0, #0
 800288a:	f7ff ff67 	bl	800275c <DSI_IO_WriteCmd>

  /* Power control 1 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData24);
 800288e:	499c      	ldr	r1, [pc, #624]	; (8002b00 <OTM8009A_Init+0x378>)
 8002890:	2000      	movs	r0, #0
 8002892:	f7ff ff63 	bl	800275c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData25);
 8002896:	499b      	ldr	r1, [pc, #620]	; (8002b04 <OTM8009A_Init+0x37c>)
 8002898:	2000      	movs	r0, #0
 800289a:	f7ff ff5f 	bl	800275c <DSI_IO_WriteCmd>

  /* Source driver precharge */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 800289e:	498c      	ldr	r1, [pc, #560]	; (8002ad0 <OTM8009A_Init+0x348>)
 80028a0:	2000      	movs	r0, #0
 80028a2:	f7ff ff5b 	bl	800275c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData26);
 80028a6:	4998      	ldr	r1, [pc, #608]	; (8002b08 <OTM8009A_Init+0x380>)
 80028a8:	2000      	movs	r0, #0
 80028aa:	f7ff ff57 	bl	800275c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 80028ae:	498a      	ldr	r1, [pc, #552]	; (8002ad8 <OTM8009A_Init+0x350>)
 80028b0:	2000      	movs	r0, #0
 80028b2:	f7ff ff53 	bl	800275c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData27);
 80028b6:	4995      	ldr	r1, [pc, #596]	; (8002b0c <OTM8009A_Init+0x384>)
 80028b8:	2000      	movs	r0, #0
 80028ba:	f7ff ff4f 	bl	800275c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData28);
 80028be:	4994      	ldr	r1, [pc, #592]	; (8002b10 <OTM8009A_Init+0x388>)
 80028c0:	2000      	movs	r0, #0
 80028c2:	f7ff ff4b 	bl	800275c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData6);
 80028c6:	4993      	ldr	r1, [pc, #588]	; (8002b14 <OTM8009A_Init+0x38c>)
 80028c8:	2002      	movs	r0, #2
 80028ca:	f7ff ff47 	bl	800275c <DSI_IO_WriteCmd>

  /* GOAVST */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 80028ce:	4974      	ldr	r1, [pc, #464]	; (8002aa0 <OTM8009A_Init+0x318>)
 80028d0:	2000      	movs	r0, #0
 80028d2:	f7ff ff43 	bl	800275c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 6, (uint8_t *)lcdRegData7);
 80028d6:	4990      	ldr	r1, [pc, #576]	; (8002b18 <OTM8009A_Init+0x390>)
 80028d8:	2006      	movs	r0, #6
 80028da:	f7ff ff3f 	bl	800275c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 80028de:	498f      	ldr	r1, [pc, #572]	; (8002b1c <OTM8009A_Init+0x394>)
 80028e0:	2000      	movs	r0, #0
 80028e2:	f7ff ff3b 	bl	800275c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData8);
 80028e6:	498e      	ldr	r1, [pc, #568]	; (8002b20 <OTM8009A_Init+0x398>)
 80028e8:	200e      	movs	r0, #14
 80028ea:	f7ff ff37 	bl	800275c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 80028ee:	498d      	ldr	r1, [pc, #564]	; (8002b24 <OTM8009A_Init+0x39c>)
 80028f0:	2000      	movs	r0, #0
 80028f2:	f7ff ff33 	bl	800275c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData9);
 80028f6:	498c      	ldr	r1, [pc, #560]	; (8002b28 <OTM8009A_Init+0x3a0>)
 80028f8:	200e      	movs	r0, #14
 80028fa:	f7ff ff2f 	bl	800275c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 80028fe:	498b      	ldr	r1, [pc, #556]	; (8002b2c <OTM8009A_Init+0x3a4>)
 8002900:	2000      	movs	r0, #0
 8002902:	f7ff ff2b 	bl	800275c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData10);
 8002906:	498a      	ldr	r1, [pc, #552]	; (8002b30 <OTM8009A_Init+0x3a8>)
 8002908:	200a      	movs	r0, #10
 800290a:	f7ff ff27 	bl	800275c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 800290e:	4989      	ldr	r1, [pc, #548]	; (8002b34 <OTM8009A_Init+0x3ac>)
 8002910:	2000      	movs	r0, #0
 8002912:	f7ff ff23 	bl	800275c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData46);
 8002916:	4988      	ldr	r1, [pc, #544]	; (8002b38 <OTM8009A_Init+0x3b0>)
 8002918:	2000      	movs	r0, #0
 800291a:	f7ff ff1f 	bl	800275c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 800291e:	4960      	ldr	r1, [pc, #384]	; (8002aa0 <OTM8009A_Init+0x318>)
 8002920:	2000      	movs	r0, #0
 8002922:	f7ff ff1b 	bl	800275c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData11);
 8002926:	4985      	ldr	r1, [pc, #532]	; (8002b3c <OTM8009A_Init+0x3b4>)
 8002928:	200a      	movs	r0, #10
 800292a:	f7ff ff17 	bl	800275c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 800292e:	4984      	ldr	r1, [pc, #528]	; (8002b40 <OTM8009A_Init+0x3b8>)
 8002930:	2000      	movs	r0, #0
 8002932:	f7ff ff13 	bl	800275c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData12);
 8002936:	4983      	ldr	r1, [pc, #524]	; (8002b44 <OTM8009A_Init+0x3bc>)
 8002938:	200f      	movs	r0, #15
 800293a:	f7ff ff0f 	bl	800275c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 800293e:	4977      	ldr	r1, [pc, #476]	; (8002b1c <OTM8009A_Init+0x394>)
 8002940:	2000      	movs	r0, #0
 8002942:	f7ff ff0b 	bl	800275c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData13);
 8002946:	4980      	ldr	r1, [pc, #512]	; (8002b48 <OTM8009A_Init+0x3c0>)
 8002948:	200f      	movs	r0, #15
 800294a:	f7ff ff07 	bl	800275c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 800294e:	4975      	ldr	r1, [pc, #468]	; (8002b24 <OTM8009A_Init+0x39c>)
 8002950:	2000      	movs	r0, #0
 8002952:	f7ff ff03 	bl	800275c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData14);
 8002956:	497d      	ldr	r1, [pc, #500]	; (8002b4c <OTM8009A_Init+0x3c4>)
 8002958:	200a      	movs	r0, #10
 800295a:	f7ff feff 	bl	800275c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 800295e:	4973      	ldr	r1, [pc, #460]	; (8002b2c <OTM8009A_Init+0x3a4>)
 8002960:	2000      	movs	r0, #0
 8002962:	f7ff fefb 	bl	800275c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData15);
 8002966:	497a      	ldr	r1, [pc, #488]	; (8002b50 <OTM8009A_Init+0x3c8>)
 8002968:	200f      	movs	r0, #15
 800296a:	f7ff fef7 	bl	800275c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 800296e:	4971      	ldr	r1, [pc, #452]	; (8002b34 <OTM8009A_Init+0x3ac>)
 8002970:	2000      	movs	r0, #0
 8002972:	f7ff fef3 	bl	800275c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData16);
 8002976:	4977      	ldr	r1, [pc, #476]	; (8002b54 <OTM8009A_Init+0x3cc>)
 8002978:	200f      	movs	r0, #15
 800297a:	f7ff feef 	bl	800275c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData34);
 800297e:	4976      	ldr	r1, [pc, #472]	; (8002b58 <OTM8009A_Init+0x3d0>)
 8002980:	2000      	movs	r0, #0
 8002982:	f7ff feeb 	bl	800275c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData17);
 8002986:	4975      	ldr	r1, [pc, #468]	; (8002b5c <OTM8009A_Init+0x3d4>)
 8002988:	200a      	movs	r0, #10
 800298a:	f7ff fee7 	bl	800275c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData35);
 800298e:	4974      	ldr	r1, [pc, #464]	; (8002b60 <OTM8009A_Init+0x3d8>)
 8002990:	2000      	movs	r0, #0
 8002992:	f7ff fee3 	bl	800275c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData18);
 8002996:	4973      	ldr	r1, [pc, #460]	; (8002b64 <OTM8009A_Init+0x3dc>)
 8002998:	200a      	movs	r0, #10
 800299a:	f7ff fedf 	bl	800275c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 800299e:	4940      	ldr	r1, [pc, #256]	; (8002aa0 <OTM8009A_Init+0x318>)
 80029a0:	2000      	movs	r0, #0
 80029a2:	f7ff fedb 	bl	800275c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData19);
 80029a6:	4970      	ldr	r1, [pc, #448]	; (8002b68 <OTM8009A_Init+0x3e0>)
 80029a8:	200a      	movs	r0, #10
 80029aa:	f7ff fed7 	bl	800275c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 80029ae:	4964      	ldr	r1, [pc, #400]	; (8002b40 <OTM8009A_Init+0x3b8>)
 80029b0:	2000      	movs	r0, #0
 80029b2:	f7ff fed3 	bl	800275c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData20);
 80029b6:	496d      	ldr	r1, [pc, #436]	; (8002b6c <OTM8009A_Init+0x3e4>)
 80029b8:	200f      	movs	r0, #15
 80029ba:	f7ff fecf 	bl	800275c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 80029be:	4957      	ldr	r1, [pc, #348]	; (8002b1c <OTM8009A_Init+0x394>)
 80029c0:	2000      	movs	r0, #0
 80029c2:	f7ff fecb 	bl	800275c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData21);
 80029c6:	496a      	ldr	r1, [pc, #424]	; (8002b70 <OTM8009A_Init+0x3e8>)
 80029c8:	200f      	movs	r0, #15
 80029ca:	f7ff fec7 	bl	800275c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 80029ce:	4955      	ldr	r1, [pc, #340]	; (8002b24 <OTM8009A_Init+0x39c>)
 80029d0:	2000      	movs	r0, #0
 80029d2:	f7ff fec3 	bl	800275c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData22);
 80029d6:	4967      	ldr	r1, [pc, #412]	; (8002b74 <OTM8009A_Init+0x3ec>)
 80029d8:	200a      	movs	r0, #10
 80029da:	f7ff febf 	bl	800275c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 80029de:	4953      	ldr	r1, [pc, #332]	; (8002b2c <OTM8009A_Init+0x3a4>)
 80029e0:	2000      	movs	r0, #0
 80029e2:	f7ff febb 	bl	800275c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData23);
 80029e6:	4964      	ldr	r1, [pc, #400]	; (8002b78 <OTM8009A_Init+0x3f0>)
 80029e8:	200f      	movs	r0, #15
 80029ea:	f7ff feb7 	bl	800275c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 80029ee:	4951      	ldr	r1, [pc, #324]	; (8002b34 <OTM8009A_Init+0x3ac>)
 80029f0:	2000      	movs	r0, #0
 80029f2:	f7ff feb3 	bl	800275c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData24);
 80029f6:	4961      	ldr	r1, [pc, #388]	; (8002b7c <OTM8009A_Init+0x3f4>)
 80029f8:	200f      	movs	r0, #15
 80029fa:	f7ff feaf 	bl	800275c <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////////////
  /* PWR_CTRL1 - 0xc580h - 130th parameter - default 0x00 */
  /* Pump 1 min and max DM                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 80029fe:	4934      	ldr	r1, [pc, #208]	; (8002ad0 <OTM8009A_Init+0x348>)
 8002a00:	2000      	movs	r0, #0
 8002a02:	f7ff feab 	bl	800275c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData47);
 8002a06:	495e      	ldr	r1, [pc, #376]	; (8002b80 <OTM8009A_Init+0x3f8>)
 8002a08:	2000      	movs	r0, #0
 8002a0a:	f7ff fea7 	bl	800275c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData48);
 8002a0e:	495d      	ldr	r1, [pc, #372]	; (8002b84 <OTM8009A_Init+0x3fc>)
 8002a10:	2000      	movs	r0, #0
 8002a12:	f7ff fea3 	bl	800275c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData49);
 8002a16:	495c      	ldr	r1, [pc, #368]	; (8002b88 <OTM8009A_Init+0x400>)
 8002a18:	2000      	movs	r0, #0
 8002a1a:	f7ff fe9f 	bl	800275c <DSI_IO_WriteCmd>
  /////////////////////////////////////////////////////////////////////////////

  /* CABC LEDPWM frequency adjusted to 19,5kHz */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData50);
 8002a1e:	495b      	ldr	r1, [pc, #364]	; (8002b8c <OTM8009A_Init+0x404>)
 8002a20:	2000      	movs	r0, #0
 8002a22:	f7ff fe9b 	bl	800275c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData51);
 8002a26:	495a      	ldr	r1, [pc, #360]	; (8002b90 <OTM8009A_Init+0x408>)
 8002a28:	2000      	movs	r0, #0
 8002a2a:	f7ff fe97 	bl	800275c <DSI_IO_WriteCmd>
  
  /* Exit CMD2 mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8002a2e:	491a      	ldr	r1, [pc, #104]	; (8002a98 <OTM8009A_Init+0x310>)
 8002a30:	2000      	movs	r0, #0
 8002a32:	f7ff fe93 	bl	800275c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData25);
 8002a36:	4957      	ldr	r1, [pc, #348]	; (8002b94 <OTM8009A_Init+0x40c>)
 8002a38:	2003      	movs	r0, #3
 8002a3a:	f7ff fe8f 	bl	800275c <DSI_IO_WriteCmd>
  /*************************************************************************** */
  /* Standard DCS Initialization TO KEEP CAN BE DONE IN HSDT                   */
  /*************************************************************************** */

  /* NOP - goes back to DCS std command ? */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8002a3e:	4916      	ldr	r1, [pc, #88]	; (8002a98 <OTM8009A_Init+0x310>)
 8002a40:	2000      	movs	r0, #0
 8002a42:	f7ff fe8b 	bl	800275c <DSI_IO_WriteCmd>
          
  /* Gamma correction 2.2+ table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8002a46:	4914      	ldr	r1, [pc, #80]	; (8002a98 <OTM8009A_Init+0x310>)
 8002a48:	2000      	movs	r0, #0
 8002a4a:	f7ff fe87 	bl	800275c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData3);
 8002a4e:	4952      	ldr	r1, [pc, #328]	; (8002b98 <OTM8009A_Init+0x410>)
 8002a50:	2010      	movs	r0, #16
 8002a52:	f7ff fe83 	bl	800275c <DSI_IO_WriteCmd>
  
  /* Gamma correction 2.2- table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8002a56:	4910      	ldr	r1, [pc, #64]	; (8002a98 <OTM8009A_Init+0x310>)
 8002a58:	2000      	movs	r0, #0
 8002a5a:	f7ff fe7f 	bl	800275c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData4);
 8002a5e:	494f      	ldr	r1, [pc, #316]	; (8002b9c <OTM8009A_Init+0x414>)
 8002a60:	2010      	movs	r0, #16
 8002a62:	f7ff fe7b 	bl	800275c <DSI_IO_WriteCmd>
          
  /* Send Sleep Out command to display : no parameter */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData36);
 8002a66:	494e      	ldr	r1, [pc, #312]	; (8002ba0 <OTM8009A_Init+0x418>)
 8002a68:	2000      	movs	r0, #0
 8002a6a:	f7ff fe77 	bl	800275c <DSI_IO_WriteCmd>
  
  /* Wait for sleep out exit */
  OTM8009A_IO_Delay(120);
 8002a6e:	2078      	movs	r0, #120	; 0x78
 8002a70:	f7ff fe7f 	bl	8002772 <OTM8009A_IO_Delay>

  switch(ColorCoding)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d008      	beq.n	8002a8c <OTM8009A_Init+0x304>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2b02      	cmp	r3, #2
 8002a7e:	f040 8095 	bne.w	8002bac <OTM8009A_Init+0x424>
  {
  case OTM8009A_FORMAT_RBG565 :
    /* Set Pixel color format to RGB565 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData37);
 8002a82:	4948      	ldr	r1, [pc, #288]	; (8002ba4 <OTM8009A_Init+0x41c>)
 8002a84:	2000      	movs	r0, #0
 8002a86:	f7ff fe69 	bl	800275c <DSI_IO_WriteCmd>
    break;
 8002a8a:	e090      	b.n	8002bae <OTM8009A_Init+0x426>
  case OTM8009A_FORMAT_RGB888 :
    /* Set Pixel color format to RGB888 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
 8002a8c:	4946      	ldr	r1, [pc, #280]	; (8002ba8 <OTM8009A_Init+0x420>)
 8002a8e:	2000      	movs	r0, #0
 8002a90:	f7ff fe64 	bl	800275c <DSI_IO_WriteCmd>
    break;
 8002a94:	e08b      	b.n	8002bae <OTM8009A_Init+0x426>
 8002a96:	bf00      	nop
 8002a98:	0801dbe4 	.word	0x0801dbe4
 8002a9c:	0801da9c 	.word	0x0801da9c
 8002aa0:	0801dbe8 	.word	0x0801dbe8
 8002aa4:	0801daa0 	.word	0x0801daa0
 8002aa8:	0801dbec 	.word	0x0801dbec
 8002aac:	0801dbf0 	.word	0x0801dbf0
 8002ab0:	0801dbf4 	.word	0x0801dbf4
 8002ab4:	0801dbf8 	.word	0x0801dbf8
 8002ab8:	0801dbfc 	.word	0x0801dbfc
 8002abc:	0801dc00 	.word	0x0801dc00
 8002ac0:	0801dc04 	.word	0x0801dc04
 8002ac4:	0801dc08 	.word	0x0801dc08
 8002ac8:	0801dc0c 	.word	0x0801dc0c
 8002acc:	0801dc10 	.word	0x0801dc10
 8002ad0:	0801dc14 	.word	0x0801dc14
 8002ad4:	0801dc18 	.word	0x0801dc18
 8002ad8:	0801dc1c 	.word	0x0801dc1c
 8002adc:	0801dc20 	.word	0x0801dc20
 8002ae0:	0801dc24 	.word	0x0801dc24
 8002ae4:	0801dc28 	.word	0x0801dc28
 8002ae8:	0801dc2c 	.word	0x0801dc2c
 8002aec:	0801dacc 	.word	0x0801dacc
 8002af0:	0801dc30 	.word	0x0801dc30
 8002af4:	0801dc34 	.word	0x0801dc34
 8002af8:	0801dc38 	.word	0x0801dc38
 8002afc:	0801dc3c 	.word	0x0801dc3c
 8002b00:	0801dc40 	.word	0x0801dc40
 8002b04:	0801dc44 	.word	0x0801dc44
 8002b08:	0801dc48 	.word	0x0801dc48
 8002b0c:	0801dc4c 	.word	0x0801dc4c
 8002b10:	0801dc50 	.word	0x0801dc50
 8002b14:	0801dad0 	.word	0x0801dad0
 8002b18:	0801dad4 	.word	0x0801dad4
 8002b1c:	0801dc54 	.word	0x0801dc54
 8002b20:	0801dadc 	.word	0x0801dadc
 8002b24:	0801dc58 	.word	0x0801dc58
 8002b28:	0801daec 	.word	0x0801daec
 8002b2c:	0801dc5c 	.word	0x0801dc5c
 8002b30:	0801dafc 	.word	0x0801dafc
 8002b34:	0801dc60 	.word	0x0801dc60
 8002b38:	0801dc98 	.word	0x0801dc98
 8002b3c:	0801db08 	.word	0x0801db08
 8002b40:	0801dc64 	.word	0x0801dc64
 8002b44:	0801db14 	.word	0x0801db14
 8002b48:	0801db24 	.word	0x0801db24
 8002b4c:	0801db34 	.word	0x0801db34
 8002b50:	0801db40 	.word	0x0801db40
 8002b54:	0801db50 	.word	0x0801db50
 8002b58:	0801dc68 	.word	0x0801dc68
 8002b5c:	0801db60 	.word	0x0801db60
 8002b60:	0801dc6c 	.word	0x0801dc6c
 8002b64:	0801db6c 	.word	0x0801db6c
 8002b68:	0801db78 	.word	0x0801db78
 8002b6c:	0801db84 	.word	0x0801db84
 8002b70:	0801db94 	.word	0x0801db94
 8002b74:	0801dba4 	.word	0x0801dba4
 8002b78:	0801dbb0 	.word	0x0801dbb0
 8002b7c:	0801dbc0 	.word	0x0801dbc0
 8002b80:	0801dc9c 	.word	0x0801dc9c
 8002b84:	0801dca0 	.word	0x0801dca0
 8002b88:	0801dca4 	.word	0x0801dca4
 8002b8c:	0801dca8 	.word	0x0801dca8
 8002b90:	0801dcac 	.word	0x0801dcac
 8002b94:	0801dbd0 	.word	0x0801dbd0
 8002b98:	0801daa4 	.word	0x0801daa4
 8002b9c:	0801dab8 	.word	0x0801dab8
 8002ba0:	0801dc70 	.word	0x0801dc70
 8002ba4:	0801dc74 	.word	0x0801dc74
 8002ba8:	0801dc78 	.word	0x0801dc78
  default :
    break;
 8002bac:	bf00      	nop
  }

  /* Send command to configure display in landscape orientation mode. By default
      the orientation mode is portrait  */
  if(orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d10b      	bne.n	8002bcc <OTM8009A_Init+0x444>
  {
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData39);
 8002bb4:	4916      	ldr	r1, [pc, #88]	; (8002c10 <OTM8009A_Init+0x488>)
 8002bb6:	2000      	movs	r0, #0
 8002bb8:	f7ff fdd0 	bl	800275c <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData27);
 8002bbc:	4915      	ldr	r1, [pc, #84]	; (8002c14 <OTM8009A_Init+0x48c>)
 8002bbe:	2004      	movs	r0, #4
 8002bc0:	f7ff fdcc 	bl	800275c <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData28);
 8002bc4:	4914      	ldr	r1, [pc, #80]	; (8002c18 <OTM8009A_Init+0x490>)
 8002bc6:	2004      	movs	r0, #4
 8002bc8:	f7ff fdc8 	bl	800275c <DSI_IO_WriteCmd>
  }

  /** CABC : Content Adaptive Backlight Control section start >> */
  /* Note : defaut is 0 (lowest Brightness), 0xFF is highest Brightness, try 0x7F : intermediate value */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData40);
 8002bcc:	4913      	ldr	r1, [pc, #76]	; (8002c1c <OTM8009A_Init+0x494>)
 8002bce:	2000      	movs	r0, #0
 8002bd0:	f7ff fdc4 	bl	800275c <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x2C - Brightness Control Block, Display Dimming & BackLight on */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData41);
 8002bd4:	4912      	ldr	r1, [pc, #72]	; (8002c20 <OTM8009A_Init+0x498>)
 8002bd6:	2000      	movs	r0, #0
 8002bd8:	f7ff fdc0 	bl	800275c <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x02 - image Content based Adaptive Brightness [Still Picture] */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData42);
 8002bdc:	4911      	ldr	r1, [pc, #68]	; (8002c24 <OTM8009A_Init+0x49c>)
 8002bde:	2000      	movs	r0, #0
 8002be0:	f7ff fdbc 	bl	800275c <DSI_IO_WriteCmd>

  /* defaut is 0 (lowest Brightness), 0xFF is highest Brightness */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData43);
 8002be4:	4910      	ldr	r1, [pc, #64]	; (8002c28 <OTM8009A_Init+0x4a0>)
 8002be6:	2000      	movs	r0, #0
 8002be8:	f7ff fdb8 	bl	800275c <DSI_IO_WriteCmd>

  /** CABC : Content Adaptive Backlight Control section end << */

  /* Send Command Display On */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData44);
 8002bec:	490f      	ldr	r1, [pc, #60]	; (8002c2c <OTM8009A_Init+0x4a4>)
 8002bee:	2000      	movs	r0, #0
 8002bf0:	f7ff fdb4 	bl	800275c <DSI_IO_WriteCmd>

  /* NOP command */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8002bf4:	490e      	ldr	r1, [pc, #56]	; (8002c30 <OTM8009A_Init+0x4a8>)
 8002bf6:	2000      	movs	r0, #0
 8002bf8:	f7ff fdb0 	bl	800275c <DSI_IO_WriteCmd>

  /* Send Command GRAM memory write (no parameters) : this initiates frame write via other DSI commands sent by */
  /* DSI host from LTDC incoming pixels in video mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData45);
 8002bfc:	490d      	ldr	r1, [pc, #52]	; (8002c34 <OTM8009A_Init+0x4ac>)
 8002bfe:	2000      	movs	r0, #0
 8002c00:	f7ff fdac 	bl	800275c <DSI_IO_WriteCmd>

  return 0;
 8002c04:	2300      	movs	r3, #0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3708      	adds	r7, #8
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	0801dc7c 	.word	0x0801dc7c
 8002c14:	0801dbd4 	.word	0x0801dbd4
 8002c18:	0801dbdc 	.word	0x0801dbdc
 8002c1c:	0801dc80 	.word	0x0801dc80
 8002c20:	0801dc84 	.word	0x0801dc84
 8002c24:	0801dc88 	.word	0x0801dc88
 8002c28:	0801dc8c 	.word	0x0801dc8c
 8002c2c:	0801dc90 	.word	0x0801dc90
 8002c30:	0801dbe4 	.word	0x0801dbe4
 8002c34:	0801dc94 	.word	0x0801dc94

08002c38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c3c:	2003      	movs	r0, #3
 8002c3e:	f000 f8fa 	bl	8002e36 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c42:	2000      	movs	r0, #0
 8002c44:	f7ff fb74 	bl	8002330 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c48:	f7fe ff54 	bl	8001af4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c4c:	2300      	movs	r3, #0
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	bd80      	pop	{r7, pc}
	...

08002c54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c54:	b480      	push	{r7}
 8002c56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c58:	4b06      	ldr	r3, [pc, #24]	; (8002c74 <HAL_IncTick+0x20>)
 8002c5a:	781b      	ldrb	r3, [r3, #0]
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	4b06      	ldr	r3, [pc, #24]	; (8002c78 <HAL_IncTick+0x24>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4413      	add	r3, r2
 8002c64:	4a04      	ldr	r2, [pc, #16]	; (8002c78 <HAL_IncTick+0x24>)
 8002c66:	6013      	str	r3, [r2, #0]
}
 8002c68:	bf00      	nop
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr
 8002c72:	bf00      	nop
 8002c74:	20000008 	.word	0x20000008
 8002c78:	20009b2c 	.word	0x20009b2c

08002c7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	af00      	add	r7, sp, #0
  return uwTick;
 8002c80:	4b03      	ldr	r3, [pc, #12]	; (8002c90 <HAL_GetTick+0x14>)
 8002c82:	681b      	ldr	r3, [r3, #0]
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr
 8002c8e:	bf00      	nop
 8002c90:	20009b2c 	.word	0x20009b2c

08002c94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b084      	sub	sp, #16
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c9c:	f7ff ffee 	bl	8002c7c <HAL_GetTick>
 8002ca0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002cac:	d005      	beq.n	8002cba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002cae:	4b0a      	ldr	r3, [pc, #40]	; (8002cd8 <HAL_Delay+0x44>)
 8002cb0:	781b      	ldrb	r3, [r3, #0]
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	4413      	add	r3, r2
 8002cb8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002cba:	bf00      	nop
 8002cbc:	f7ff ffde 	bl	8002c7c <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	68fa      	ldr	r2, [r7, #12]
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d8f7      	bhi.n	8002cbc <HAL_Delay+0x28>
  {
  }
}
 8002ccc:	bf00      	nop
 8002cce:	bf00      	nop
 8002cd0:	3710      	adds	r7, #16
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	20000008 	.word	0x20000008

08002cdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b085      	sub	sp, #20
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	f003 0307 	and.w	r3, r3, #7
 8002cea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cec:	4b0b      	ldr	r3, [pc, #44]	; (8002d1c <__NVIC_SetPriorityGrouping+0x40>)
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cf2:	68ba      	ldr	r2, [r7, #8]
 8002cf4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002d04:	4b06      	ldr	r3, [pc, #24]	; (8002d20 <__NVIC_SetPriorityGrouping+0x44>)
 8002d06:	4313      	orrs	r3, r2
 8002d08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d0a:	4a04      	ldr	r2, [pc, #16]	; (8002d1c <__NVIC_SetPriorityGrouping+0x40>)
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	60d3      	str	r3, [r2, #12]
}
 8002d10:	bf00      	nop
 8002d12:	3714      	adds	r7, #20
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr
 8002d1c:	e000ed00 	.word	0xe000ed00
 8002d20:	05fa0000 	.word	0x05fa0000

08002d24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d24:	b480      	push	{r7}
 8002d26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d28:	4b04      	ldr	r3, [pc, #16]	; (8002d3c <__NVIC_GetPriorityGrouping+0x18>)
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	0a1b      	lsrs	r3, r3, #8
 8002d2e:	f003 0307 	and.w	r3, r3, #7
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr
 8002d3c:	e000ed00 	.word	0xe000ed00

08002d40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b083      	sub	sp, #12
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	4603      	mov	r3, r0
 8002d48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	db0b      	blt.n	8002d6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d52:	79fb      	ldrb	r3, [r7, #7]
 8002d54:	f003 021f 	and.w	r2, r3, #31
 8002d58:	4907      	ldr	r1, [pc, #28]	; (8002d78 <__NVIC_EnableIRQ+0x38>)
 8002d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d5e:	095b      	lsrs	r3, r3, #5
 8002d60:	2001      	movs	r0, #1
 8002d62:	fa00 f202 	lsl.w	r2, r0, r2
 8002d66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d6a:	bf00      	nop
 8002d6c:	370c      	adds	r7, #12
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	e000e100 	.word	0xe000e100

08002d7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	4603      	mov	r3, r0
 8002d84:	6039      	str	r1, [r7, #0]
 8002d86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	db0a      	blt.n	8002da6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	b2da      	uxtb	r2, r3
 8002d94:	490c      	ldr	r1, [pc, #48]	; (8002dc8 <__NVIC_SetPriority+0x4c>)
 8002d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d9a:	0112      	lsls	r2, r2, #4
 8002d9c:	b2d2      	uxtb	r2, r2
 8002d9e:	440b      	add	r3, r1
 8002da0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002da4:	e00a      	b.n	8002dbc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	b2da      	uxtb	r2, r3
 8002daa:	4908      	ldr	r1, [pc, #32]	; (8002dcc <__NVIC_SetPriority+0x50>)
 8002dac:	79fb      	ldrb	r3, [r7, #7]
 8002dae:	f003 030f 	and.w	r3, r3, #15
 8002db2:	3b04      	subs	r3, #4
 8002db4:	0112      	lsls	r2, r2, #4
 8002db6:	b2d2      	uxtb	r2, r2
 8002db8:	440b      	add	r3, r1
 8002dba:	761a      	strb	r2, [r3, #24]
}
 8002dbc:	bf00      	nop
 8002dbe:	370c      	adds	r7, #12
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr
 8002dc8:	e000e100 	.word	0xe000e100
 8002dcc:	e000ed00 	.word	0xe000ed00

08002dd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b089      	sub	sp, #36	; 0x24
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	60f8      	str	r0, [r7, #12]
 8002dd8:	60b9      	str	r1, [r7, #8]
 8002dda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f003 0307 	and.w	r3, r3, #7
 8002de2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	f1c3 0307 	rsb	r3, r3, #7
 8002dea:	2b04      	cmp	r3, #4
 8002dec:	bf28      	it	cs
 8002dee:	2304      	movcs	r3, #4
 8002df0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	3304      	adds	r3, #4
 8002df6:	2b06      	cmp	r3, #6
 8002df8:	d902      	bls.n	8002e00 <NVIC_EncodePriority+0x30>
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	3b03      	subs	r3, #3
 8002dfe:	e000      	b.n	8002e02 <NVIC_EncodePriority+0x32>
 8002e00:	2300      	movs	r3, #0
 8002e02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002e08:	69bb      	ldr	r3, [r7, #24]
 8002e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0e:	43da      	mvns	r2, r3
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	401a      	ands	r2, r3
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e18:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e22:	43d9      	mvns	r1, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e28:	4313      	orrs	r3, r2
         );
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3724      	adds	r7, #36	; 0x24
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr

08002e36 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e36:	b580      	push	{r7, lr}
 8002e38:	b082      	sub	sp, #8
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f7ff ff4c 	bl	8002cdc <__NVIC_SetPriorityGrouping>
}
 8002e44:	bf00      	nop
 8002e46:	3708      	adds	r7, #8
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b086      	sub	sp, #24
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	4603      	mov	r3, r0
 8002e54:	60b9      	str	r1, [r7, #8]
 8002e56:	607a      	str	r2, [r7, #4]
 8002e58:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e5e:	f7ff ff61 	bl	8002d24 <__NVIC_GetPriorityGrouping>
 8002e62:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e64:	687a      	ldr	r2, [r7, #4]
 8002e66:	68b9      	ldr	r1, [r7, #8]
 8002e68:	6978      	ldr	r0, [r7, #20]
 8002e6a:	f7ff ffb1 	bl	8002dd0 <NVIC_EncodePriority>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e74:	4611      	mov	r1, r2
 8002e76:	4618      	mov	r0, r3
 8002e78:	f7ff ff80 	bl	8002d7c <__NVIC_SetPriority>
}
 8002e7c:	bf00      	nop
 8002e7e:	3718      	adds	r7, #24
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}

08002e84 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b082      	sub	sp, #8
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e92:	4618      	mov	r0, r3
 8002e94:	f7ff ff54 	bl	8002d40 <__NVIC_EnableIRQ>
}
 8002e98:	bf00      	nop
 8002e9a:	3708      	adds	r7, #8
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}

08002ea0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8002ea4:	f3bf 8f5f 	dmb	sy
}
 8002ea8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002eaa:	4b07      	ldr	r3, [pc, #28]	; (8002ec8 <HAL_MPU_Disable+0x28>)
 8002eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eae:	4a06      	ldr	r2, [pc, #24]	; (8002ec8 <HAL_MPU_Disable+0x28>)
 8002eb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002eb4:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002eb6:	4b05      	ldr	r3, [pc, #20]	; (8002ecc <HAL_MPU_Disable+0x2c>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	605a      	str	r2, [r3, #4]
}
 8002ebc:	bf00      	nop
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr
 8002ec6:	bf00      	nop
 8002ec8:	e000ed00 	.word	0xe000ed00
 8002ecc:	e000ed90 	.word	0xe000ed90

08002ed0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002ed8:	4a0b      	ldr	r2, [pc, #44]	; (8002f08 <HAL_MPU_Enable+0x38>)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	f043 0301 	orr.w	r3, r3, #1
 8002ee0:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002ee2:	4b0a      	ldr	r3, [pc, #40]	; (8002f0c <HAL_MPU_Enable+0x3c>)
 8002ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee6:	4a09      	ldr	r2, [pc, #36]	; (8002f0c <HAL_MPU_Enable+0x3c>)
 8002ee8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eec:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002eee:	f3bf 8f4f 	dsb	sy
}
 8002ef2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002ef4:	f3bf 8f6f 	isb	sy
}
 8002ef8:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002efa:	bf00      	nop
 8002efc:	370c      	adds	r7, #12
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr
 8002f06:	bf00      	nop
 8002f08:	e000ed90 	.word	0xe000ed90
 8002f0c:	e000ed00 	.word	0xe000ed00

08002f10 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	785a      	ldrb	r2, [r3, #1]
 8002f1c:	4b1d      	ldr	r3, [pc, #116]	; (8002f94 <HAL_MPU_ConfigRegion+0x84>)
 8002f1e:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d029      	beq.n	8002f7c <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8002f28:	4a1a      	ldr	r2, [pc, #104]	; (8002f94 <HAL_MPU_ConfigRegion+0x84>)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	7b1b      	ldrb	r3, [r3, #12]
 8002f34:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	7adb      	ldrb	r3, [r3, #11]
 8002f3a:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002f3c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	7a9b      	ldrb	r3, [r3, #10]
 8002f42:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002f44:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	7b5b      	ldrb	r3, [r3, #13]
 8002f4a:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002f4c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	7b9b      	ldrb	r3, [r3, #14]
 8002f52:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002f54:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	7bdb      	ldrb	r3, [r3, #15]
 8002f5a:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002f5c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	7a5b      	ldrb	r3, [r3, #9]
 8002f62:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002f64:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	7a1b      	ldrb	r3, [r3, #8]
 8002f6a:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002f6c:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	7812      	ldrb	r2, [r2, #0]
 8002f72:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002f74:	4a07      	ldr	r2, [pc, #28]	; (8002f94 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002f76:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002f78:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8002f7a:	e005      	b.n	8002f88 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8002f7c:	4b05      	ldr	r3, [pc, #20]	; (8002f94 <HAL_MPU_ConfigRegion+0x84>)
 8002f7e:	2200      	movs	r2, #0
 8002f80:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8002f82:	4b04      	ldr	r3, [pc, #16]	; (8002f94 <HAL_MPU_ConfigRegion+0x84>)
 8002f84:	2200      	movs	r2, #0
 8002f86:	611a      	str	r2, [r3, #16]
}
 8002f88:	bf00      	nop
 8002f8a:	370c      	adds	r7, #12
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr
 8002f94:	e000ed90 	.word	0xe000ed90

08002f98 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b082      	sub	sp, #8
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d101      	bne.n	8002faa <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e054      	b.n	8003054 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	7f5b      	ldrb	r3, [r3, #29]
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d105      	bne.n	8002fc0 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f7fe fdc2 	bl	8001b44 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2202      	movs	r2, #2
 8002fc4:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	791b      	ldrb	r3, [r3, #4]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d10c      	bne.n	8002fe8 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a22      	ldr	r2, [pc, #136]	; (800305c <HAL_CRC_Init+0xc4>)
 8002fd4:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	689a      	ldr	r2, [r3, #8]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f022 0218 	bic.w	r2, r2, #24
 8002fe4:	609a      	str	r2, [r3, #8]
 8002fe6:	e00c      	b.n	8003002 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6899      	ldr	r1, [r3, #8]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f000 f834 	bl	8003060 <HAL_CRCEx_Polynomial_Set>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d001      	beq.n	8003002 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e028      	b.n	8003054 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	795b      	ldrb	r3, [r3, #5]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d105      	bne.n	8003016 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003012:	611a      	str	r2, [r3, #16]
 8003014:	e004      	b.n	8003020 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	6912      	ldr	r2, [r2, #16]
 800301e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	695a      	ldr	r2, [r3, #20]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	430a      	orrs	r2, r1
 8003034:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	699a      	ldr	r2, [r3, #24]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	430a      	orrs	r2, r1
 800304a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8003052:	2300      	movs	r3, #0
}
 8003054:	4618      	mov	r0, r3
 8003056:	3708      	adds	r7, #8
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}
 800305c:	04c11db7 	.word	0x04c11db7

08003060 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003060:	b480      	push	{r7}
 8003062:	b087      	sub	sp, #28
 8003064:	af00      	add	r7, sp, #0
 8003066:	60f8      	str	r0, [r7, #12]
 8003068:	60b9      	str	r1, [r7, #8]
 800306a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800306c:	2300      	movs	r3, #0
 800306e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003070:	231f      	movs	r3, #31
 8003072:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003074:	bf00      	nop
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	1e5a      	subs	r2, r3, #1
 800307a:	613a      	str	r2, [r7, #16]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d009      	beq.n	8003094 <HAL_CRCEx_Polynomial_Set+0x34>
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	f003 031f 	and.w	r3, r3, #31
 8003086:	68ba      	ldr	r2, [r7, #8]
 8003088:	fa22 f303 	lsr.w	r3, r2, r3
 800308c:	f003 0301 	and.w	r3, r3, #1
 8003090:	2b00      	cmp	r3, #0
 8003092:	d0f0      	beq.n	8003076 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2b18      	cmp	r3, #24
 8003098:	d846      	bhi.n	8003128 <HAL_CRCEx_Polynomial_Set+0xc8>
 800309a:	a201      	add	r2, pc, #4	; (adr r2, 80030a0 <HAL_CRCEx_Polynomial_Set+0x40>)
 800309c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030a0:	0800312f 	.word	0x0800312f
 80030a4:	08003129 	.word	0x08003129
 80030a8:	08003129 	.word	0x08003129
 80030ac:	08003129 	.word	0x08003129
 80030b0:	08003129 	.word	0x08003129
 80030b4:	08003129 	.word	0x08003129
 80030b8:	08003129 	.word	0x08003129
 80030bc:	08003129 	.word	0x08003129
 80030c0:	0800311d 	.word	0x0800311d
 80030c4:	08003129 	.word	0x08003129
 80030c8:	08003129 	.word	0x08003129
 80030cc:	08003129 	.word	0x08003129
 80030d0:	08003129 	.word	0x08003129
 80030d4:	08003129 	.word	0x08003129
 80030d8:	08003129 	.word	0x08003129
 80030dc:	08003129 	.word	0x08003129
 80030e0:	08003111 	.word	0x08003111
 80030e4:	08003129 	.word	0x08003129
 80030e8:	08003129 	.word	0x08003129
 80030ec:	08003129 	.word	0x08003129
 80030f0:	08003129 	.word	0x08003129
 80030f4:	08003129 	.word	0x08003129
 80030f8:	08003129 	.word	0x08003129
 80030fc:	08003129 	.word	0x08003129
 8003100:	08003105 	.word	0x08003105
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	2b06      	cmp	r3, #6
 8003108:	d913      	bls.n	8003132 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800310e:	e010      	b.n	8003132 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	2b07      	cmp	r3, #7
 8003114:	d90f      	bls.n	8003136 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800311a:	e00c      	b.n	8003136 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	2b0f      	cmp	r3, #15
 8003120:	d90b      	bls.n	800313a <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003126:	e008      	b.n	800313a <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	75fb      	strb	r3, [r7, #23]
      break;
 800312c:	e006      	b.n	800313c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800312e:	bf00      	nop
 8003130:	e004      	b.n	800313c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003132:	bf00      	nop
 8003134:	e002      	b.n	800313c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003136:	bf00      	nop
 8003138:	e000      	b.n	800313c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800313a:	bf00      	nop
  }
  if (status == HAL_OK)
 800313c:	7dfb      	ldrb	r3, [r7, #23]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d10d      	bne.n	800315e <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	68ba      	ldr	r2, [r7, #8]
 8003148:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	f023 0118 	bic.w	r1, r3, #24
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	687a      	ldr	r2, [r7, #4]
 800315a:	430a      	orrs	r2, r1
 800315c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800315e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003160:	4618      	mov	r0, r3
 8003162:	371c      	adds	r7, #28
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr

0800316c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b086      	sub	sp, #24
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003174:	2300      	movs	r3, #0
 8003176:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003178:	f7ff fd80 	bl	8002c7c <HAL_GetTick>
 800317c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d101      	bne.n	8003188 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e099      	b.n	80032bc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2202      	movs	r2, #2
 800318c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f022 0201 	bic.w	r2, r2, #1
 80031a6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031a8:	e00f      	b.n	80031ca <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80031aa:	f7ff fd67 	bl	8002c7c <HAL_GetTick>
 80031ae:	4602      	mov	r2, r0
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	1ad3      	subs	r3, r2, r3
 80031b4:	2b05      	cmp	r3, #5
 80031b6:	d908      	bls.n	80031ca <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2220      	movs	r2, #32
 80031bc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2203      	movs	r2, #3
 80031c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e078      	b.n	80032bc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 0301 	and.w	r3, r3, #1
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d1e8      	bne.n	80031aa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80031e0:	697a      	ldr	r2, [r7, #20]
 80031e2:	4b38      	ldr	r3, [pc, #224]	; (80032c4 <HAL_DMA_Init+0x158>)
 80031e4:	4013      	ands	r3, r2
 80031e6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	685a      	ldr	r2, [r3, #4]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80031f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	691b      	ldr	r3, [r3, #16]
 80031fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003202:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	699b      	ldr	r3, [r3, #24]
 8003208:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800320e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6a1b      	ldr	r3, [r3, #32]
 8003214:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003216:	697a      	ldr	r2, [r7, #20]
 8003218:	4313      	orrs	r3, r2
 800321a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003220:	2b04      	cmp	r3, #4
 8003222:	d107      	bne.n	8003234 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800322c:	4313      	orrs	r3, r2
 800322e:	697a      	ldr	r2, [r7, #20]
 8003230:	4313      	orrs	r3, r2
 8003232:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	697a      	ldr	r2, [r7, #20]
 800323a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	695b      	ldr	r3, [r3, #20]
 8003242:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	f023 0307 	bic.w	r3, r3, #7
 800324a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003250:	697a      	ldr	r2, [r7, #20]
 8003252:	4313      	orrs	r3, r2
 8003254:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325a:	2b04      	cmp	r3, #4
 800325c:	d117      	bne.n	800328e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003262:	697a      	ldr	r2, [r7, #20]
 8003264:	4313      	orrs	r3, r2
 8003266:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800326c:	2b00      	cmp	r3, #0
 800326e:	d00e      	beq.n	800328e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f000 faa5 	bl	80037c0 <DMA_CheckFifoParam>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d008      	beq.n	800328e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2240      	movs	r2, #64	; 0x40
 8003280:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2201      	movs	r2, #1
 8003286:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800328a:	2301      	movs	r3, #1
 800328c:	e016      	b.n	80032bc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	697a      	ldr	r2, [r7, #20]
 8003294:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f000 fa5c 	bl	8003754 <DMA_CalcBaseAndBitshift>
 800329c:	4603      	mov	r3, r0
 800329e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032a4:	223f      	movs	r2, #63	; 0x3f
 80032a6:	409a      	lsls	r2, r3
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2201      	movs	r2, #1
 80032b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80032ba:	2300      	movs	r3, #0
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3718      	adds	r7, #24
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	e010803f 	.word	0xe010803f

080032c8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b086      	sub	sp, #24
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	60f8      	str	r0, [r7, #12]
 80032d0:	60b9      	str	r1, [r7, #8]
 80032d2:	607a      	str	r2, [r7, #4]
 80032d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032d6:	2300      	movs	r3, #0
 80032d8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032de:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d101      	bne.n	80032ee <HAL_DMA_Start_IT+0x26>
 80032ea:	2302      	movs	r3, #2
 80032ec:	e048      	b.n	8003380 <HAL_DMA_Start_IT+0xb8>
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2201      	movs	r2, #1
 80032f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d137      	bne.n	8003372 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2202      	movs	r2, #2
 8003306:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2200      	movs	r2, #0
 800330e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	68b9      	ldr	r1, [r7, #8]
 8003316:	68f8      	ldr	r0, [r7, #12]
 8003318:	f000 f9ee 	bl	80036f8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003320:	223f      	movs	r2, #63	; 0x3f
 8003322:	409a      	lsls	r2, r3
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f042 0216 	orr.w	r2, r2, #22
 8003336:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	695a      	ldr	r2, [r3, #20]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003346:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334c:	2b00      	cmp	r3, #0
 800334e:	d007      	beq.n	8003360 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f042 0208 	orr.w	r2, r2, #8
 800335e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f042 0201 	orr.w	r2, r2, #1
 800336e:	601a      	str	r2, [r3, #0]
 8003370:	e005      	b.n	800337e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2200      	movs	r2, #0
 8003376:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800337a:	2302      	movs	r3, #2
 800337c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800337e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003380:	4618      	mov	r0, r3
 8003382:	3718      	adds	r7, #24
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}

08003388 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003388:	b480      	push	{r7}
 800338a:	b083      	sub	sp, #12
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003396:	b2db      	uxtb	r3, r3
 8003398:	2b02      	cmp	r3, #2
 800339a:	d004      	beq.n	80033a6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2280      	movs	r2, #128	; 0x80
 80033a0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e00c      	b.n	80033c0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2205      	movs	r2, #5
 80033aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f022 0201 	bic.w	r2, r2, #1
 80033bc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80033be:	2300      	movs	r3, #0
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	370c      	adds	r7, #12
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr

080033cc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b086      	sub	sp, #24
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80033d4:	2300      	movs	r3, #0
 80033d6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80033d8:	4b8e      	ldr	r3, [pc, #568]	; (8003614 <HAL_DMA_IRQHandler+0x248>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a8e      	ldr	r2, [pc, #568]	; (8003618 <HAL_DMA_IRQHandler+0x24c>)
 80033de:	fba2 2303 	umull	r2, r3, r2, r3
 80033e2:	0a9b      	lsrs	r3, r3, #10
 80033e4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ea:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033f6:	2208      	movs	r2, #8
 80033f8:	409a      	lsls	r2, r3
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	4013      	ands	r3, r2
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d01a      	beq.n	8003438 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 0304 	and.w	r3, r3, #4
 800340c:	2b00      	cmp	r3, #0
 800340e:	d013      	beq.n	8003438 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f022 0204 	bic.w	r2, r2, #4
 800341e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003424:	2208      	movs	r2, #8
 8003426:	409a      	lsls	r2, r3
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003430:	f043 0201 	orr.w	r2, r3, #1
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800343c:	2201      	movs	r2, #1
 800343e:	409a      	lsls	r2, r3
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	4013      	ands	r3, r2
 8003444:	2b00      	cmp	r3, #0
 8003446:	d012      	beq.n	800346e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	695b      	ldr	r3, [r3, #20]
 800344e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003452:	2b00      	cmp	r3, #0
 8003454:	d00b      	beq.n	800346e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800345a:	2201      	movs	r2, #1
 800345c:	409a      	lsls	r2, r3
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003466:	f043 0202 	orr.w	r2, r3, #2
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003472:	2204      	movs	r2, #4
 8003474:	409a      	lsls	r2, r3
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	4013      	ands	r3, r2
 800347a:	2b00      	cmp	r3, #0
 800347c:	d012      	beq.n	80034a4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 0302 	and.w	r3, r3, #2
 8003488:	2b00      	cmp	r3, #0
 800348a:	d00b      	beq.n	80034a4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003490:	2204      	movs	r2, #4
 8003492:	409a      	lsls	r2, r3
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800349c:	f043 0204 	orr.w	r2, r3, #4
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034a8:	2210      	movs	r2, #16
 80034aa:	409a      	lsls	r2, r3
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	4013      	ands	r3, r2
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d043      	beq.n	800353c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 0308 	and.w	r3, r3, #8
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d03c      	beq.n	800353c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034c6:	2210      	movs	r2, #16
 80034c8:	409a      	lsls	r2, r3
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d018      	beq.n	800350e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d108      	bne.n	80034fc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d024      	beq.n	800353c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	4798      	blx	r3
 80034fa:	e01f      	b.n	800353c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003500:	2b00      	cmp	r3, #0
 8003502:	d01b      	beq.n	800353c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	4798      	blx	r3
 800350c:	e016      	b.n	800353c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003518:	2b00      	cmp	r3, #0
 800351a:	d107      	bne.n	800352c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f022 0208 	bic.w	r2, r2, #8
 800352a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003530:	2b00      	cmp	r3, #0
 8003532:	d003      	beq.n	800353c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003540:	2220      	movs	r2, #32
 8003542:	409a      	lsls	r2, r3
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	4013      	ands	r3, r2
 8003548:	2b00      	cmp	r3, #0
 800354a:	f000 808f 	beq.w	800366c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0310 	and.w	r3, r3, #16
 8003558:	2b00      	cmp	r3, #0
 800355a:	f000 8087 	beq.w	800366c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003562:	2220      	movs	r2, #32
 8003564:	409a      	lsls	r2, r3
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003570:	b2db      	uxtb	r3, r3
 8003572:	2b05      	cmp	r3, #5
 8003574:	d136      	bne.n	80035e4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f022 0216 	bic.w	r2, r2, #22
 8003584:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	695a      	ldr	r2, [r3, #20]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003594:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359a:	2b00      	cmp	r3, #0
 800359c:	d103      	bne.n	80035a6 <HAL_DMA_IRQHandler+0x1da>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d007      	beq.n	80035b6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f022 0208 	bic.w	r2, r2, #8
 80035b4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035ba:	223f      	movs	r2, #63	; 0x3f
 80035bc:	409a      	lsls	r2, r3
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2201      	movs	r2, #1
 80035c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d07e      	beq.n	80036d8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	4798      	blx	r3
        }
        return;
 80035e2:	e079      	b.n	80036d8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d01d      	beq.n	800362e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d10d      	bne.n	800361c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003604:	2b00      	cmp	r3, #0
 8003606:	d031      	beq.n	800366c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	4798      	blx	r3
 8003610:	e02c      	b.n	800366c <HAL_DMA_IRQHandler+0x2a0>
 8003612:	bf00      	nop
 8003614:	20000000 	.word	0x20000000
 8003618:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003620:	2b00      	cmp	r3, #0
 8003622:	d023      	beq.n	800366c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	4798      	blx	r3
 800362c:	e01e      	b.n	800366c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003638:	2b00      	cmp	r3, #0
 800363a:	d10f      	bne.n	800365c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f022 0210 	bic.w	r2, r2, #16
 800364a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2201      	movs	r2, #1
 8003650:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003660:	2b00      	cmp	r3, #0
 8003662:	d003      	beq.n	800366c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003670:	2b00      	cmp	r3, #0
 8003672:	d032      	beq.n	80036da <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003678:	f003 0301 	and.w	r3, r3, #1
 800367c:	2b00      	cmp	r3, #0
 800367e:	d022      	beq.n	80036c6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2205      	movs	r2, #5
 8003684:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f022 0201 	bic.w	r2, r2, #1
 8003696:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	3301      	adds	r3, #1
 800369c:	60bb      	str	r3, [r7, #8]
 800369e:	697a      	ldr	r2, [r7, #20]
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d307      	bcc.n	80036b4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0301 	and.w	r3, r3, #1
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d1f2      	bne.n	8003698 <HAL_DMA_IRQHandler+0x2cc>
 80036b2:	e000      	b.n	80036b6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80036b4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2201      	movs	r2, #1
 80036ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d005      	beq.n	80036da <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	4798      	blx	r3
 80036d6:	e000      	b.n	80036da <HAL_DMA_IRQHandler+0x30e>
        return;
 80036d8:	bf00      	nop
    }
  }
}
 80036da:	3718      	adds	r7, #24
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}

080036e0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b083      	sub	sp, #12
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	370c      	adds	r7, #12
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr

080036f8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b085      	sub	sp, #20
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	60b9      	str	r1, [r7, #8]
 8003702:	607a      	str	r2, [r7, #4]
 8003704:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003714:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	683a      	ldr	r2, [r7, #0]
 800371c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	2b40      	cmp	r3, #64	; 0x40
 8003724:	d108      	bne.n	8003738 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	68ba      	ldr	r2, [r7, #8]
 8003734:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003736:	e007      	b.n	8003748 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	68ba      	ldr	r2, [r7, #8]
 800373e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	687a      	ldr	r2, [r7, #4]
 8003746:	60da      	str	r2, [r3, #12]
}
 8003748:	bf00      	nop
 800374a:	3714      	adds	r7, #20
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr

08003754 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003754:	b480      	push	{r7}
 8003756:	b085      	sub	sp, #20
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	b2db      	uxtb	r3, r3
 8003762:	3b10      	subs	r3, #16
 8003764:	4a13      	ldr	r2, [pc, #76]	; (80037b4 <DMA_CalcBaseAndBitshift+0x60>)
 8003766:	fba2 2303 	umull	r2, r3, r2, r3
 800376a:	091b      	lsrs	r3, r3, #4
 800376c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800376e:	4a12      	ldr	r2, [pc, #72]	; (80037b8 <DMA_CalcBaseAndBitshift+0x64>)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	4413      	add	r3, r2
 8003774:	781b      	ldrb	r3, [r3, #0]
 8003776:	461a      	mov	r2, r3
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2b03      	cmp	r3, #3
 8003780:	d908      	bls.n	8003794 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	461a      	mov	r2, r3
 8003788:	4b0c      	ldr	r3, [pc, #48]	; (80037bc <DMA_CalcBaseAndBitshift+0x68>)
 800378a:	4013      	ands	r3, r2
 800378c:	1d1a      	adds	r2, r3, #4
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	659a      	str	r2, [r3, #88]	; 0x58
 8003792:	e006      	b.n	80037a2 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	461a      	mov	r2, r3
 800379a:	4b08      	ldr	r3, [pc, #32]	; (80037bc <DMA_CalcBaseAndBitshift+0x68>)
 800379c:	4013      	ands	r3, r2
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3714      	adds	r7, #20
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr
 80037b2:	bf00      	nop
 80037b4:	aaaaaaab 	.word	0xaaaaaaab
 80037b8:	0801dcb0 	.word	0x0801dcb0
 80037bc:	fffffc00 	.word	0xfffffc00

080037c0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b085      	sub	sp, #20
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037c8:	2300      	movs	r3, #0
 80037ca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037d0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	699b      	ldr	r3, [r3, #24]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d11f      	bne.n	800381a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	2b03      	cmp	r3, #3
 80037de:	d856      	bhi.n	800388e <DMA_CheckFifoParam+0xce>
 80037e0:	a201      	add	r2, pc, #4	; (adr r2, 80037e8 <DMA_CheckFifoParam+0x28>)
 80037e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037e6:	bf00      	nop
 80037e8:	080037f9 	.word	0x080037f9
 80037ec:	0800380b 	.word	0x0800380b
 80037f0:	080037f9 	.word	0x080037f9
 80037f4:	0800388f 	.word	0x0800388f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003800:	2b00      	cmp	r3, #0
 8003802:	d046      	beq.n	8003892 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003808:	e043      	b.n	8003892 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800380e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003812:	d140      	bne.n	8003896 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003818:	e03d      	b.n	8003896 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	699b      	ldr	r3, [r3, #24]
 800381e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003822:	d121      	bne.n	8003868 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	2b03      	cmp	r3, #3
 8003828:	d837      	bhi.n	800389a <DMA_CheckFifoParam+0xda>
 800382a:	a201      	add	r2, pc, #4	; (adr r2, 8003830 <DMA_CheckFifoParam+0x70>)
 800382c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003830:	08003841 	.word	0x08003841
 8003834:	08003847 	.word	0x08003847
 8003838:	08003841 	.word	0x08003841
 800383c:	08003859 	.word	0x08003859
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	73fb      	strb	r3, [r7, #15]
      break;
 8003844:	e030      	b.n	80038a8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800384a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d025      	beq.n	800389e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003856:	e022      	b.n	800389e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800385c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003860:	d11f      	bne.n	80038a2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003866:	e01c      	b.n	80038a2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	2b02      	cmp	r3, #2
 800386c:	d903      	bls.n	8003876 <DMA_CheckFifoParam+0xb6>
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	2b03      	cmp	r3, #3
 8003872:	d003      	beq.n	800387c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003874:	e018      	b.n	80038a8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	73fb      	strb	r3, [r7, #15]
      break;
 800387a:	e015      	b.n	80038a8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003880:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003884:	2b00      	cmp	r3, #0
 8003886:	d00e      	beq.n	80038a6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	73fb      	strb	r3, [r7, #15]
      break;
 800388c:	e00b      	b.n	80038a6 <DMA_CheckFifoParam+0xe6>
      break;
 800388e:	bf00      	nop
 8003890:	e00a      	b.n	80038a8 <DMA_CheckFifoParam+0xe8>
      break;
 8003892:	bf00      	nop
 8003894:	e008      	b.n	80038a8 <DMA_CheckFifoParam+0xe8>
      break;
 8003896:	bf00      	nop
 8003898:	e006      	b.n	80038a8 <DMA_CheckFifoParam+0xe8>
      break;
 800389a:	bf00      	nop
 800389c:	e004      	b.n	80038a8 <DMA_CheckFifoParam+0xe8>
      break;
 800389e:	bf00      	nop
 80038a0:	e002      	b.n	80038a8 <DMA_CheckFifoParam+0xe8>
      break;   
 80038a2:	bf00      	nop
 80038a4:	e000      	b.n	80038a8 <DMA_CheckFifoParam+0xe8>
      break;
 80038a6:	bf00      	nop
    }
  } 
  
  return status; 
 80038a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3714      	adds	r7, #20
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr
 80038b6:	bf00      	nop

080038b8 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b082      	sub	sp, #8
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d101      	bne.n	80038ca <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e049      	b.n	800395e <HAL_DMA2D_Init+0xa6>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d106      	bne.n	80038e4 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f7fe f950 	bl	8001b84 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2202      	movs	r2, #2
 80038e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	685a      	ldr	r2, [r3, #4]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	430a      	orrs	r2, r1
 8003900:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003908:	f023 0107 	bic.w	r1, r3, #7
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	689a      	ldr	r2, [r3, #8]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	430a      	orrs	r2, r1
 8003916:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800391e:	4b12      	ldr	r3, [pc, #72]	; (8003968 <HAL_DMA2D_Init+0xb0>)
 8003920:	4013      	ands	r3, r2
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	68d1      	ldr	r1, [r2, #12]
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	6812      	ldr	r2, [r2, #0]
 800392a:	430b      	orrs	r3, r1
 800392c:	6413      	str	r3, [r2, #64]	; 0x40
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003934:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	691b      	ldr	r3, [r3, #16]
 800393c:	051a      	lsls	r2, r3, #20
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	695b      	ldr	r3, [r3, #20]
 8003942:	055b      	lsls	r3, r3, #21
 8003944:	431a      	orrs	r2, r3
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	430a      	orrs	r2, r1
 800394c:	635a      	str	r2, [r3, #52]	; 0x34
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2201      	movs	r2, #1
 8003958:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800395c:	2300      	movs	r3, #0
}
 800395e:	4618      	mov	r0, r3
 8003960:	3708      	adds	r7, #8
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	ffffc000 	.word	0xffffc000

0800396c <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b084      	sub	sp, #16
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f003 0301 	and.w	r3, r3, #1
 800398a:	2b00      	cmp	r3, #0
 800398c:	d026      	beq.n	80039dc <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003994:	2b00      	cmp	r3, #0
 8003996:	d021      	beq.n	80039dc <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039a6:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ac:	f043 0201 	orr.w	r2, r3, #1
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	2201      	movs	r2, #1
 80039ba:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2204      	movs	r2, #4
 80039c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if (hdma2d->XferErrorCallback != NULL)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	69db      	ldr	r3, [r3, #28]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d003      	beq.n	80039dc <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	69db      	ldr	r3, [r3, #28]
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f003 0320 	and.w	r3, r3, #32
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d026      	beq.n	8003a34 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d021      	beq.n	8003a34 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80039fe:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	2220      	movs	r2, #32
 8003a06:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a0c:	f043 0202 	orr.w	r2, r3, #2
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2204      	movs	r2, #4
 8003a18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if (hdma2d->XferErrorCallback != NULL)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	69db      	ldr	r3, [r3, #28]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d003      	beq.n	8003a34 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	69db      	ldr	r3, [r3, #28]
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f003 0308 	and.w	r3, r3, #8
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d026      	beq.n	8003a8c <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d021      	beq.n	8003a8c <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a56:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	2208      	movs	r2, #8
 8003a5e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a64:	f043 0204 	orr.w	r2, r3, #4
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2204      	movs	r2, #4
 8003a70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if (hdma2d->XferErrorCallback != NULL)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	69db      	ldr	r3, [r3, #28]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d003      	beq.n	8003a8c <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	69db      	ldr	r3, [r3, #28]
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f003 0304 	and.w	r3, r3, #4
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d013      	beq.n	8003abe <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d00e      	beq.n	8003abe <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003aae:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	2204      	movs	r2, #4
 8003ab6:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f000 f853 	bl	8003b64 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	f003 0302 	and.w	r3, r3, #2
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d024      	beq.n	8003b12 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d01f      	beq.n	8003b12 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003ae0:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	2202      	movs	r2, #2
 8003ae8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2201      	movs	r2, #1
 8003af6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2200      	movs	r2, #0
 8003afe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if (hdma2d->XferCpltCallback != NULL)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	699b      	ldr	r3, [r3, #24]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d003      	beq.n	8003b12 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	699b      	ldr	r3, [r3, #24]
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	f003 0310 	and.w	r3, r3, #16
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d01f      	beq.n	8003b5c <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d01a      	beq.n	8003b5c <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003b34:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	2210      	movs	r2, #16
 8003b3c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2201      	movs	r2, #1
 8003b4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2200      	movs	r2, #0
 8003b52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f000 f80e 	bl	8003b78 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8003b5c:	bf00      	nop
 8003b5e:	3710      	adds	r7, #16
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}

08003b64 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b083      	sub	sp, #12
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8003b6c:	bf00      	nop
 8003b6e:	370c      	adds	r7, #12
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr

08003b78 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b083      	sub	sp, #12
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8003b80:	bf00      	nop
 8003b82:	370c      	adds	r7, #12
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr

08003b8c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b087      	sub	sp, #28
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
 8003b94:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d101      	bne.n	8003bac <HAL_DMA2D_ConfigLayer+0x20>
 8003ba8:	2302      	movs	r3, #2
 8003baa:	e084      	b.n	8003cb6 <HAL_DMA2D_ConfigLayer+0x12a>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2202      	movs	r2, #2
 8003bb8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003bbc:	683a      	ldr	r2, [r7, #0]
 8003bbe:	4613      	mov	r3, r2
 8003bc0:	005b      	lsls	r3, r3, #1
 8003bc2:	4413      	add	r3, r2
 8003bc4:	00db      	lsls	r3, r3, #3
 8003bc6:	3320      	adds	r3, #32
 8003bc8:	687a      	ldr	r2, [r7, #4]
 8003bca:	4413      	add	r3, r2
 8003bcc:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	685a      	ldr	r2, [r3, #4]
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	041b      	lsls	r3, r3, #16
 8003bd8:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	691b      	ldr	r3, [r3, #16]
 8003bde:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8003be0:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	695b      	ldr	r3, [r3, #20]
 8003be6:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8003be8:	4313      	orrs	r3, r2
 8003bea:	617b      	str	r3, [r7, #20]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8003bec:	4b35      	ldr	r3, [pc, #212]	; (8003cc4 <HAL_DMA2D_ConfigLayer+0x138>)
 8003bee:	60fb      	str	r3, [r7, #12]
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	2b0a      	cmp	r3, #10
 8003bf6:	d003      	beq.n	8003c00 <HAL_DMA2D_ConfigLayer+0x74>
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	2b09      	cmp	r3, #9
 8003bfe:	d107      	bne.n	8003c10 <HAL_DMA2D_ConfigLayer+0x84>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003c08:	697a      	ldr	r2, [r7, #20]
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	617b      	str	r3, [r7, #20]
 8003c0e:	e005      	b.n	8003c1c <HAL_DMA2D_ConfigLayer+0x90>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	061b      	lsls	r3, r3, #24
 8003c16:	697a      	ldr	r2, [r7, #20]
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d120      	bne.n	8003c64 <HAL_DMA2D_ConfigLayer+0xd8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	43db      	mvns	r3, r3
 8003c2c:	ea02 0103 	and.w	r1, r2, r3
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	697a      	ldr	r2, [r7, #20]
 8003c36:	430a      	orrs	r2, r1
 8003c38:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	693a      	ldr	r2, [r7, #16]
 8003c40:	6812      	ldr	r2, [r2, #0]
 8003c42:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	2b0a      	cmp	r3, #10
 8003c4a:	d003      	beq.n	8003c54 <HAL_DMA2D_ConfigLayer+0xc8>
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	2b09      	cmp	r3, #9
 8003c52:	d127      	bne.n	8003ca4 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	68da      	ldr	r2, [r3, #12]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003c60:	629a      	str	r2, [r3, #40]	; 0x28
 8003c62:	e01f      	b.n	8003ca4 <HAL_DMA2D_ConfigLayer+0x118>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	69da      	ldr	r2, [r3, #28]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	43db      	mvns	r3, r3
 8003c6e:	ea02 0103 	and.w	r1, r2, r3
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	697a      	ldr	r2, [r7, #20]
 8003c78:	430a      	orrs	r2, r1
 8003c7a:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	693a      	ldr	r2, [r7, #16]
 8003c82:	6812      	ldr	r2, [r2, #0]
 8003c84:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	2b0a      	cmp	r3, #10
 8003c8c:	d003      	beq.n	8003c96 <HAL_DMA2D_ConfigLayer+0x10a>
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	2b09      	cmp	r3, #9
 8003c94:	d106      	bne.n	8003ca4 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	68da      	ldr	r2, [r3, #12]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003ca2:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003cb4:	2300      	movs	r3, #0
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	371c      	adds	r7, #28
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr
 8003cc2:	bf00      	nop
 8003cc4:	ff33000f 	.word	0xff33000f

08003cc8 <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b086      	sub	sp, #24
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	60f8      	str	r0, [r7, #12]
 8003cd0:	60b9      	str	r1, [r7, #8]
 8003cd2:	607a      	str	r2, [r7, #4]
 8003cd4:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8003cd6:	f7fe ffd1 	bl	8002c7c <HAL_GetTick>
 8003cda:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8003cdc:	e009      	b.n	8003cf2 <DSI_ShortWrite+0x2a>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8003cde:	f7fe ffcd 	bl	8002c7c <HAL_GetTick>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	1ad3      	subs	r3, r2, r3
 8003ce8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003cec:	d901      	bls.n	8003cf2 <DSI_ShortWrite+0x2a>
    {
      return HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	e015      	b.n	8003d1e <DSI_ShortWrite+0x56>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cf8:	f003 0301 	and.w	r3, r3, #1
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d0ee      	beq.n	8003cde <DSI_ShortWrite+0x16>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	019a      	lsls	r2, r3, #6
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	431a      	orrs	r2, r3
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	021b      	lsls	r3, r3, #8
 8003d0c:	ea42 0103 	orr.w	r1, r2, r3
 8003d10:	6a3b      	ldr	r3, [r7, #32]
 8003d12:	041a      	lsls	r2, r3, #16
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	430a      	orrs	r2, r1
 8003d1a:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 8003d1c:	2300      	movs	r3, #0
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3718      	adds	r7, #24
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
	...

08003d28 <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b088      	sub	sp, #32
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
 8003d30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d101      	bne.n	8003d3c <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e109      	b.n	8003f50 <HAL_DSI_Init+0x228>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	7c5b      	ldrb	r3, [r3, #17]
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d102      	bne.n	8003d4c <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f7fd ff42 	bl	8001bd0 <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2203      	movs	r2, #3
 8003d50:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 8003d52:	2300      	movs	r3, #0
 8003d54:	613b      	str	r3, [r7, #16]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003d66:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8003d72:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d76:	613b      	str	r3, [r7, #16]
 8003d78:	693b      	ldr	r3, [r7, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d7a:	f7fe ff7f 	bl	8002c7c <HAL_GetTick>
 8003d7e:	61f8      	str	r0, [r7, #28]

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8003d80:	e009      	b.n	8003d96 <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8003d82:	f7fe ff7b 	bl	8002c7c <HAL_GetTick>
 8003d86:	4602      	mov	r2, r0
 8003d88:	69fb      	ldr	r3, [r7, #28]
 8003d8a:	1ad3      	subs	r3, r2, r3
 8003d8c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d90:	d901      	bls.n	8003d96 <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 8003d92:	2303      	movs	r3, #3
 8003d94:	e0dc      	b.n	8003f50 <HAL_DSI_Init+0x228>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8003d9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d0ed      	beq.n	8003d82 <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	4b69      	ldr	r3, [pc, #420]	; (8003f58 <HAL_DSI_Init+0x230>)
 8003db4:	400b      	ands	r3, r1
 8003db6:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	009a      	lsls	r2, r3, #2
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8003dce:	431a      	orrs	r2, r3
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	041b      	lsls	r3, r3, #16
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8003dd6:	431a      	orrs	r2, r3
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	430a      	orrs	r2, r1
 8003dde:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 8003de2:	2300      	movs	r3, #0
 8003de4:	60fb      	str	r3, [r7, #12]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f042 0201 	orr.w	r2, r2, #1
 8003df6:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8003e02:	f003 0301 	and.w	r3, r3, #1
 8003e06:	60fb      	str	r3, [r7, #12]
 8003e08:	68fb      	ldr	r3, [r7, #12]

  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 8003e0a:	2001      	movs	r0, #1
 8003e0c:	f7fe ff42 	bl	8002c94 <HAL_Delay>

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e10:	f7fe ff34 	bl	8002c7c <HAL_GetTick>
 8003e14:	61f8      	str	r0, [r7, #28]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8003e16:	e009      	b.n	8003e2c <HAL_DSI_Init+0x104>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8003e18:	f7fe ff30 	bl	8002c7c <HAL_GetTick>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	69fb      	ldr	r3, [r7, #28]
 8003e20:	1ad3      	subs	r3, r2, r3
 8003e22:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e26:	d901      	bls.n	8003e2c <HAL_DSI_Init+0x104>
    {
      return HAL_TIMEOUT;
 8003e28:	2303      	movs	r3, #3
 8003e2a:	e091      	b.n	8003f50 <HAL_DSI_Init+0x228>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8003e34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d0ed      	beq.n	8003e18 <HAL_DSI_Init+0xf0>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f042 0206 	orr.w	r2, r2, #6
 8003e4c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f022 0203 	bic.w	r2, r2, #3
 8003e60:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	431a      	orrs	r2, r3
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f042 0201 	orr.w	r2, r2, #1
 8003e7a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f022 0203 	bic.w	r2, r2, #3
 8003e8e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	68da      	ldr	r2, [r3, #12]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	430a      	orrs	r2, r1
 8003ea4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	689a      	ldr	r2, [r3, #8]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003eb6:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	6899      	ldr	r1, [r3, #8]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	689a      	ldr	r2, [r3, #8]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	430a      	orrs	r2, r1
 8003ec8:	609a      	str	r2, [r3, #8]

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d002      	beq.n	8003ed8 <HAL_DSI_Init+0x1b0>
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	e000      	b.n	8003eda <HAL_DSI_Init+0x1b2>
 8003ed8:	2301      	movs	r3, #1
 8003eda:	61bb      	str	r3, [r7, #24]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8003edc:	69bb      	ldr	r3, [r7, #24]
 8003ede:	4a1f      	ldr	r2, [pc, #124]	; (8003f5c <HAL_DSI_Init+0x234>)
 8003ee0:	fb03 f202 	mul.w	r2, r3, r2
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	f003 0303 	and.w	r3, r3, #3
 8003eec:	409a      	lsls	r2, r3
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f246 11a8 	movw	r1, #25000	; 0x61a8
 8003ef6:	fb01 f303 	mul.w	r3, r1, r3
 8003efa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003efe:	617b      	str	r3, [r7, #20]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8003f10:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	697a      	ldr	r2, [r7, #20]
 8003f22:	430a      	orrs	r2, r1
 8003f24:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	2200      	movs	r2, #0
 8003f38:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2200      	movs	r2, #0
 8003f46:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 8003f4e:	2300      	movs	r3, #0
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	3720      	adds	r7, #32
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}
 8003f58:	fffc8603 	.word	0xfffc8603
 8003f5c:	003d0900 	.word	0x003d0900

08003f60 <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @arg DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b083      	sub	sp, #12
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	7c1b      	ldrb	r3, [r3, #16]
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d101      	bne.n	8003f76 <HAL_DSI_ConfigErrorMonitor+0x16>
 8003f72:	2302      	movs	r3, #2
 8003f74:	e0aa      	b.n	80040cc <HAL_DSI_ConfigErrorMonitor+0x16c>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2201      	movs	r2, #1
 8003f7a:	741a      	strb	r2, [r3, #16]

  hdsi->Instance->IER[0U] = 0U;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	2200      	movs	r2, #0
 8003f82:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	683a      	ldr	r2, [r7, #0]
 8003f94:	619a      	str	r2, [r3, #24]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	f003 0301 	and.w	r3, r3, #1
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d00a      	beq.n	8003fb6 <HAL_DSI_ConfigErrorMonitor+0x56>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003fb0:	430b      	orrs	r3, r1
 8003fb2:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	f003 0302 	and.w	r3, r3, #2
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d009      	beq.n	8003fd4 <HAL_DSI_ConfigErrorMonitor+0x74>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f442 12f8 	orr.w	r2, r2, #2031616	; 0x1f0000
 8003fd0:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	f003 0304 	and.w	r3, r3, #4
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d009      	beq.n	8003ff2 <HAL_DSI_ConfigErrorMonitor+0x92>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f042 0201 	orr.w	r2, r2, #1
 8003fee:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	f003 0308 	and.w	r3, r3, #8
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d009      	beq.n	8004010 <HAL_DSI_ConfigErrorMonitor+0xb0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f042 0202 	orr.w	r2, r2, #2
 800400c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	f003 0310 	and.w	r3, r3, #16
 8004016:	2b00      	cmp	r3, #0
 8004018:	d009      	beq.n	800402e <HAL_DSI_ConfigErrorMonitor+0xce>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f042 020c 	orr.w	r2, r2, #12
 800402a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	f003 0320 	and.w	r3, r3, #32
 8004034:	2b00      	cmp	r3, #0
 8004036:	d009      	beq.n	800404c <HAL_DSI_ConfigErrorMonitor+0xec>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f042 0210 	orr.w	r2, r2, #16
 8004048:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004052:	2b00      	cmp	r3, #0
 8004054:	d009      	beq.n	800406a <HAL_DSI_ConfigErrorMonitor+0x10a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f042 0220 	orr.w	r2, r2, #32
 8004066:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004070:	2b00      	cmp	r3, #0
 8004072:	d009      	beq.n	8004088 <HAL_DSI_ConfigErrorMonitor+0x128>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004084:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800408e:	2b00      	cmp	r3, #0
 8004090:	d009      	beq.n	80040a6 <HAL_DSI_ConfigErrorMonitor+0x146>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80040a2:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d009      	beq.n	80040c4 <HAL_DSI_ConfigErrorMonitor+0x164>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f442 52f8 	orr.w	r2, r2, #7936	; 0x1f00
 80040c0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80040ca:	2300      	movs	r3, #0
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	370c      	adds	r7, #12
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr

080040d8 <HAL_DSI_IRQHandler>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
void HAL_DSI_IRQHandler(DSI_HandleTypeDef *hdsi)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b084      	sub	sp, #16
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  uint32_t ErrorStatus0;
  uint32_t ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80040e8:	f003 0301 	and.w	r3, r3, #1
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d00f      	beq.n	8004110 <HAL_DSI_IRQHandler+0x38>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80040f8:	f003 0301 	and.w	r3, r3, #1
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d007      	beq.n	8004110 <HAL_DSI_IRQHandler+0x38>
    {
      /* Clear the Tearing Effect Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	2201      	movs	r2, #1
 8004106:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Tearing Effect callback */
      hdsi->TearingEffectCallback(hdsi);
#else
      /*Call legacy Tearing Effect callback*/
      HAL_DSI_TearingEffectCallback(hdsi);
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f000 f8ad 	bl	800426a <HAL_DSI_TearingEffectCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8004118:	f003 0302 	and.w	r3, r3, #2
 800411c:	2b00      	cmp	r3, #0
 800411e:	d00f      	beq.n	8004140 <HAL_DSI_IRQHandler+0x68>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8004128:	f003 0302 	and.w	r3, r3, #2
 800412c:	2b00      	cmp	r3, #0
 800412e:	d007      	beq.n	8004140 <HAL_DSI_IRQHandler+0x68>
    {
      /* Clear the End of Refresh Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	2202      	movs	r2, #2
 8004136:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered End of refresh callback */
      hdsi->EndOfRefreshCallback(hdsi);
#else
      /*Call Legacy End of refresh callback */
      HAL_DSI_EndOfRefreshCallback(hdsi);
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f000 f89f 	bl	800427e <HAL_DSI_EndOfRefreshCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	699b      	ldr	r3, [r3, #24]
 8004144:	2b00      	cmp	r3, #0
 8004146:	f000 808c 	beq.w	8004262 <HAL_DSI_IRQHandler+0x18a>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004152:	60fb      	str	r3, [r7, #12]
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800415c:	68fa      	ldr	r2, [r7, #12]
 800415e:	4013      	ands	r3, r2
 8004160:	60fb      	str	r3, [r7, #12]
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800416a:	60bb      	str	r3, [r7, #8]
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8004174:	68ba      	ldr	r2, [r7, #8]
 8004176:	4013      	ands	r3, r2
 8004178:	60bb      	str	r3, [r7, #8]

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	b29b      	uxth	r3, r3
 800417e:	2b00      	cmp	r3, #0
 8004180:	d005      	beq.n	800418e <HAL_DSI_IRQHandler+0xb6>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	695b      	ldr	r3, [r3, #20]
 8004186:	f043 0201 	orr.w	r2, r3, #1
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8004194:	2b00      	cmp	r3, #0
 8004196:	d005      	beq.n	80041a4 <HAL_DSI_IRQHandler+0xcc>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	695b      	ldr	r3, [r3, #20]
 800419c:	f043 0202 	orr.w	r2, r3, #2
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	f003 0301 	and.w	r3, r3, #1
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d005      	beq.n	80041ba <HAL_DSI_IRQHandler+0xe2>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	695b      	ldr	r3, [r3, #20]
 80041b2:	f043 0204 	orr.w	r2, r3, #4
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	f003 0302 	and.w	r3, r3, #2
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d005      	beq.n	80041d0 <HAL_DSI_IRQHandler+0xf8>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	695b      	ldr	r3, [r3, #20]
 80041c8:	f043 0208 	orr.w	r2, r3, #8
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	f003 030c 	and.w	r3, r3, #12
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d005      	beq.n	80041e6 <HAL_DSI_IRQHandler+0x10e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	695b      	ldr	r3, [r3, #20]
 80041de:	f043 0210 	orr.w	r2, r3, #16
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	f003 0310 	and.w	r3, r3, #16
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d005      	beq.n	80041fc <HAL_DSI_IRQHandler+0x124>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	695b      	ldr	r3, [r3, #20]
 80041f4:	f043 0220 	orr.w	r2, r3, #32
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	f003 0320 	and.w	r3, r3, #32
 8004202:	2b00      	cmp	r3, #0
 8004204:	d005      	beq.n	8004212 <HAL_DSI_IRQHandler+0x13a>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	695b      	ldr	r3, [r3, #20]
 800420a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004218:	2b00      	cmp	r3, #0
 800421a:	d005      	beq.n	8004228 <HAL_DSI_IRQHandler+0x150>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	695b      	ldr	r3, [r3, #20]
 8004220:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800422e:	2b00      	cmp	r3, #0
 8004230:	d005      	beq.n	800423e <HAL_DSI_IRQHandler+0x166>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	695b      	ldr	r3, [r3, #20]
 8004236:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 8004244:	2b00      	cmp	r3, #0
 8004246:	d005      	beq.n	8004254 <HAL_DSI_IRQHandler+0x17c>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	695b      	ldr	r3, [r3, #20]
 800424c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	615a      	str	r2, [r3, #20]
    }

    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	695b      	ldr	r3, [r3, #20]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d002      	beq.n	8004262 <HAL_DSI_IRQHandler+0x18a>
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Error callback */
      hdsi->ErrorCallback(hdsi);
#else
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	f000 f818 	bl	8004292 <HAL_DSI_ErrorCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 8004262:	bf00      	nop
 8004264:	3710      	adds	r7, #16
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}

0800426a <HAL_DSI_TearingEffectCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef *hdsi)
{
 800426a:	b480      	push	{r7}
 800426c:	b083      	sub	sp, #12
 800426e:	af00      	add	r7, sp, #0
 8004270:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_TearingEffectCallback could be implemented in the user file
   */
}
 8004272:	bf00      	nop
 8004274:	370c      	adds	r7, #12
 8004276:	46bd      	mov	sp, r7
 8004278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427c:	4770      	bx	lr

0800427e <HAL_DSI_EndOfRefreshCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef *hdsi)
{
 800427e:	b480      	push	{r7}
 8004280:	b083      	sub	sp, #12
 8004282:	af00      	add	r7, sp, #0
 8004284:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_EndOfRefreshCallback could be implemented in the user file
   */
}
 8004286:	bf00      	nop
 8004288:	370c      	adds	r7, #12
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr

08004292 <HAL_DSI_ErrorCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_ErrorCallback(DSI_HandleTypeDef *hdsi)
{
 8004292:	b480      	push	{r7}
 8004294:	b083      	sub	sp, #12
 8004296:	af00      	add	r7, sp, #0
 8004298:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_ErrorCallback could be implemented in the user file
   */
}
 800429a:	bf00      	nop
 800429c:	370c      	adds	r7, #12
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr

080042a6 <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 80042a6:	b480      	push	{r7}
 80042a8:	b083      	sub	sp, #12
 80042aa:	af00      	add	r7, sp, #0
 80042ac:	6078      	str	r0, [r7, #4]
 80042ae:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	7c1b      	ldrb	r3, [r3, #16]
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d101      	bne.n	80042bc <HAL_DSI_SetGenericVCID+0x16>
 80042b8:	2302      	movs	r3, #2
 80042ba:	e016      	b.n	80042ea <HAL_DSI_SetGenericVCID+0x44>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	741a      	strb	r2, [r3, #16]

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f022 0203 	bic.w	r2, r2, #3
 80042d0:	631a      	str	r2, [r3, #48]	; 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	683a      	ldr	r2, [r7, #0]
 80042de:	430a      	orrs	r2, r1
 80042e0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80042e8:	2300      	movs	r3, #0
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	370c      	adds	r7, #12
 80042ee:	46bd      	mov	sp, r7
 80042f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f4:	4770      	bx	lr
	...

080042f8 <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	7c1b      	ldrb	r3, [r3, #16]
 8004306:	2b01      	cmp	r3, #1
 8004308:	d101      	bne.n	800430e <HAL_DSI_ConfigAdaptedCommandMode+0x16>
 800430a:	2302      	movs	r3, #2
 800430c:	e0c5      	b.n	800449a <HAL_DSI_ConfigAdaptedCommandMode+0x1a2>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2201      	movs	r2, #1
 8004312:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f042 0201 	orr.w	r2, r2, #1
 8004322:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f022 0201 	bic.w	r2, r2, #1
 8004334:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f042 0201 	orr.w	r2, r2, #1
 8004348:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	68da      	ldr	r2, [r3, #12]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f022 0203 	bic.w	r2, r2, #3
 800435a:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	68d9      	ldr	r1, [r3, #12]
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	430a      	orrs	r2, r1
 800436c:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	695a      	ldr	r2, [r3, #20]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f022 0207 	bic.w	r2, r2, #7
 800437c:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	6959      	ldr	r1, [r3, #20]
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	69da      	ldr	r2, [r3, #28]
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	699b      	ldr	r3, [r3, #24]
 800438c:	431a      	orrs	r2, r3
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	695b      	ldr	r3, [r3, #20]
 8004392:	431a      	orrs	r2, r3
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	430a      	orrs	r2, r1
 800439a:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	691a      	ldr	r2, [r3, #16]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f022 020f 	bic.w	r2, r2, #15
 80043aa:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	6919      	ldr	r1, [r3, #16]
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	685a      	ldr	r2, [r3, #4]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	430a      	orrs	r2, r1
 80043bc:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f022 020e 	bic.w	r2, r2, #14
 80043ce:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	005a      	lsls	r2, r3, #1
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	430a      	orrs	r2, r1
 80043e6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	6e59      	ldr	r1, [r3, #100]	; 0x64
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	4b2c      	ldr	r3, [pc, #176]	; (80044a8 <HAL_DSI_ConfigAdaptedCommandMode+0x1b0>)
 80043f6:	400b      	ands	r3, r1
 80043f8:	6653      	str	r3, [r2, #100]	; 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	689a      	ldr	r2, [r3, #8]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	430a      	orrs	r2, r1
 800440a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800441c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	68da      	ldr	r2, [r3, #12]
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	691b      	ldr	r3, [r3, #16]
 8004430:	431a      	orrs	r2, r3
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004436:	431a      	orrs	r2, r3
                            CmdCfg->VSyncPol);
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	6a1b      	ldr	r3, [r3, #32]
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 800443c:	431a      	orrs	r2, r3
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	430a      	orrs	r2, r1
 8004444:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f022 0201 	bic.w	r2, r2, #1
 8004456:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	6e99      	ldr	r1, [r3, #104]	; 0x68
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	430a      	orrs	r2, r1
 8004468:	669a      	str	r2, [r3, #104]	; 0x68

  /* Enable the Tearing Effect interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f042 0201 	orr.w	r2, r2, #1
 800447a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f042 0202 	orr.w	r2, r2, #2
 800448e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2200      	movs	r2, #0
 8004496:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004498:	2300      	movs	r3, #0
}
 800449a:	4618      	mov	r0, r3
 800449c:	370c      	adds	r7, #12
 800449e:	46bd      	mov	sp, r7
 80044a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a4:	4770      	bx	lr
 80044a6:	bf00      	nop
 80044a8:	ffff0000 	.word	0xffff0000

080044ac <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b083      	sub	sp, #12
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	7c1b      	ldrb	r3, [r3, #16]
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d101      	bne.n	80044c2 <HAL_DSI_ConfigCommand+0x16>
 80044be:	2302      	movs	r3, #2
 80044c0:	e049      	b.n	8004556 <HAL_DSI_ConfigCommand+0xaa>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2201      	movs	r2, #1
 80044c6:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	6e99      	ldr	r1, [r3, #104]	; 0x68
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	4b24      	ldr	r3, [pc, #144]	; (8004564 <HAL_DSI_ConfigCommand+0xb8>)
 80044d4:	400b      	ands	r3, r1
 80044d6:	6693      	str	r3, [r2, #104]	; 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	6e99      	ldr	r1, [r3, #104]	; 0x68
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	681a      	ldr	r2, [r3, #0]
                           LPCmd->LPGenShortWriteOneP | \
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	685b      	ldr	r3, [r3, #4]
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 80044e6:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortWriteTwoP | \
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	689b      	ldr	r3, [r3, #8]
                           LPCmd->LPGenShortWriteOneP | \
 80044ec:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadNoP   | \
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	68db      	ldr	r3, [r3, #12]
                           LPCmd->LPGenShortWriteTwoP | \
 80044f2:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadOneP  | \
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	691b      	ldr	r3, [r3, #16]
                           LPCmd->LPGenShortReadNoP   | \
 80044f8:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadTwoP  | \
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	695b      	ldr	r3, [r3, #20]
                           LPCmd->LPGenShortReadOneP  | \
 80044fe:	431a      	orrs	r2, r3
                           LPCmd->LPGenLongWrite      | \
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	699b      	ldr	r3, [r3, #24]
                           LPCmd->LPGenShortReadTwoP  | \
 8004504:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteNoP  | \
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	69db      	ldr	r3, [r3, #28]
                           LPCmd->LPGenLongWrite      | \
 800450a:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteOneP | \
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	6a1b      	ldr	r3, [r3, #32]
                           LPCmd->LPDcsShortWriteNoP  | \
 8004510:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortReadNoP   | \
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           LPCmd->LPDcsShortWriteOneP | \
 8004516:	431a      	orrs	r2, r3
                           LPCmd->LPDcsLongWrite      | \
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                           LPCmd->LPDcsShortReadNoP   | \
 800451c:	431a      	orrs	r2, r3
                           LPCmd->LPMaxReadPacket);
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                           LPCmd->LPDcsLongWrite      | \
 8004522:	431a      	orrs	r2, r3
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	430a      	orrs	r2, r1
 800452a:	669a      	str	r2, [r3, #104]	; 0x68

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f022 0202 	bic.w	r2, r2, #2
 800453a:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	430a      	orrs	r2, r1
 800454c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2200      	movs	r2, #0
 8004552:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004554:	2300      	movs	r3, #0
}
 8004556:	4618      	mov	r0, r3
 8004558:	370c      	adds	r7, #12
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr
 8004562:	bf00      	nop
 8004564:	fef080ff 	.word	0xfef080ff

08004568 <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @arg DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 8004568:	b480      	push	{r7}
 800456a:	b083      	sub	sp, #12
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	7c1b      	ldrb	r3, [r3, #16]
 8004576:	2b01      	cmp	r3, #1
 8004578:	d101      	bne.n	800457e <HAL_DSI_ConfigFlowControl+0x16>
 800457a:	2302      	movs	r3, #2
 800457c:	e016      	b.n	80045ac <HAL_DSI_ConfigFlowControl+0x44>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2201      	movs	r2, #1
 8004582:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f022 021f 	bic.w	r2, r2, #31
 8004592:	62da      	str	r2, [r3, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	683a      	ldr	r2, [r7, #0]
 80045a0:	430a      	orrs	r2, r1
 80045a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80045aa:	2300      	movs	r3, #0
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	370c      	adds	r7, #12
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr

080045b8 <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b085      	sub	sp, #20
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	7c1b      	ldrb	r3, [r3, #16]
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d101      	bne.n	80045ce <HAL_DSI_ConfigPhyTimer+0x16>
 80045ca:	2302      	movs	r3, #2
 80045cc:	e058      	b.n	8004680 <HAL_DSI_ConfigPhyTimer+0xc8>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2201      	movs	r2, #1
 80045d2:	741a      	strb	r2, [r3, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	4293      	cmp	r3, r2
 80045de:	bf38      	it	cc
 80045e0:	4613      	movcc	r3, r2
 80045e2:	60fb      	str	r3, [r7, #12]
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 80045f4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	041a      	lsls	r2, r3, #16
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	431a      	orrs	r2, r3
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	430a      	orrs	r2, r1
 800460e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8004622:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	691a      	ldr	r2, [r3, #16]
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	68db      	ldr	r3, [r3, #12]
 8004636:	041b      	lsls	r3, r3, #16
 8004638:	431a      	orrs	r2, r3
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	061b      	lsls	r3, r3, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8004640:	431a      	orrs	r2, r3
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	430a      	orrs	r2, r1
 8004648:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800465c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	695b      	ldr	r3, [r3, #20]
 800466c:	021a      	lsls	r2, r3, #8
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	430a      	orrs	r2, r1
 8004674:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2200      	movs	r2, #0
 800467c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800467e:	2300      	movs	r3, #0
}
 8004680:	4618      	mov	r0, r3
 8004682:	3714      	adds	r7, #20
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr

0800468c <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 800468c:	b480      	push	{r7}
 800468e:	b083      	sub	sp, #12
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	7c1b      	ldrb	r3, [r3, #16]
 800469a:	2b01      	cmp	r3, #1
 800469c:	d101      	bne.n	80046a2 <HAL_DSI_ConfigHostTimeouts+0x16>
 800469e:	2302      	movs	r3, #2
 80046a0:	e0b4      	b.n	800480c <HAL_DSI_ConfigHostTimeouts+0x180>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2201      	movs	r2, #1
 80046a6:	741a      	strb	r2, [r3, #16]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	689a      	ldr	r2, [r3, #8]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80046b6:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	6899      	ldr	r1, [r3, #8]
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	021a      	lsls	r2, r3, #8
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	430a      	orrs	r2, r1
 80046ca:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	b292      	uxth	r2, r2
 80046d8:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	6f99      	ldr	r1, [r3, #120]	; 0x78
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	041a      	lsls	r2, r3, #16
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	430a      	orrs	r2, r1
 80046ec:	679a      	str	r2, [r3, #120]	; 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	6f99      	ldr	r1, [r3, #120]	; 0x78
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	4b47      	ldr	r3, [pc, #284]	; (8004818 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 80046fa:	400b      	ands	r3, r1
 80046fc:	6793      	str	r3, [r2, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	689a      	ldr	r2, [r3, #8]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	430a      	orrs	r2, r1
 800470e:	679a      	str	r2, [r3, #120]	; 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	4b3f      	ldr	r3, [pc, #252]	; (8004818 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 800471c:	400b      	ands	r3, r1
 800471e:	67d3      	str	r3, [r2, #124]	; 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	68da      	ldr	r2, [r3, #12]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	430a      	orrs	r2, r1
 8004730:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	4b36      	ldr	r3, [pc, #216]	; (8004818 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8004740:	400b      	ands	r3, r1
 8004742:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	691a      	ldr	r2, [r3, #16]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	430a      	orrs	r2, r1
 8004758:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	4b2b      	ldr	r3, [pc, #172]	; (8004818 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 800476a:	400b      	ands	r3, r1
 800476c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	695a      	ldr	r2, [r3, #20]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	430a      	orrs	r2, r1
 8004782:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8004796:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	699a      	ldr	r2, [r3, #24]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	430a      	orrs	r2, r1
 80047ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	4b16      	ldr	r3, [pc, #88]	; (8004818 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 80047be:	400b      	ands	r3, r1
 80047c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	69da      	ldr	r2, [r3, #28]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	430a      	orrs	r2, r1
 80047d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	4b0c      	ldr	r3, [pc, #48]	; (8004818 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 80047e8:	400b      	ands	r3, r1
 80047ea:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	6a1a      	ldr	r2, [r3, #32]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	430a      	orrs	r2, r1
 8004800:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2200      	movs	r2, #0
 8004808:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800480a:	2300      	movs	r3, #0
}
 800480c:	4618      	mov	r0, r3
 800480e:	370c      	adds	r7, #12
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr
 8004818:	ffff0000 	.word	0xffff0000

0800481c <HAL_DSI_Start>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
 800481c:	b480      	push	{r7}
 800481e:	b085      	sub	sp, #20
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	7c1b      	ldrb	r3, [r3, #16]
 8004828:	2b01      	cmp	r3, #1
 800482a:	d101      	bne.n	8004830 <HAL_DSI_Start+0x14>
 800482c:	2302      	movs	r3, #2
 800482e:	e02b      	b.n	8004888 <HAL_DSI_Start+0x6c>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2201      	movs	r2, #1
 8004834:	741a      	strb	r2, [r3, #16]

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 8004836:	2300      	movs	r3, #0
 8004838:	60fb      	str	r3, [r7, #12]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	685a      	ldr	r2, [r3, #4]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f042 0201 	orr.w	r2, r2, #1
 8004848:	605a      	str	r2, [r3, #4]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	f003 0301 	and.w	r3, r3, #1
 8004854:	60fb      	str	r3, [r7, #12]
 8004856:	68fb      	ldr	r3, [r7, #12]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8004858:	2300      	movs	r3, #0
 800485a:	60bb      	str	r3, [r7, #8]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f042 0208 	orr.w	r2, r2, #8
 800486c:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8004878:	f003 0308 	and.w	r3, r3, #8
 800487c:	60bb      	str	r3, [r7, #8]
 800487e:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2200      	movs	r2, #0
 8004884:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004886:	2300      	movs	r3, #0
}
 8004888:	4618      	mov	r0, r3
 800488a:	3714      	adds	r7, #20
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr

08004894 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b088      	sub	sp, #32
 8004898:	af02      	add	r7, sp, #8
 800489a:	60f8      	str	r0, [r7, #12]
 800489c:	60b9      	str	r1, [r7, #8]
 800489e:	607a      	str	r2, [r7, #4]
 80048a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	7c1b      	ldrb	r3, [r3, #16]
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d101      	bne.n	80048ae <HAL_DSI_ShortWrite+0x1a>
 80048aa:	2302      	movs	r3, #2
 80048ac:	e010      	b.n	80048d0 <HAL_DSI_ShortWrite+0x3c>
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2201      	movs	r2, #1
 80048b2:	741a      	strb	r2, [r3, #16]

  status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 80048b4:	6a3b      	ldr	r3, [r7, #32]
 80048b6:	9300      	str	r3, [sp, #0]
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	68b9      	ldr	r1, [r7, #8]
 80048be:	68f8      	ldr	r0, [r7, #12]
 80048c0:	f7ff fa02 	bl	8003cc8 <DSI_ShortWrite>
 80048c4:	4603      	mov	r3, r0
 80048c6:	75fb      	strb	r3, [r7, #23]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2200      	movs	r2, #0
 80048cc:	741a      	strb	r2, [r3, #16]

  return status;
 80048ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3718      	adds	r7, #24
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}

080048d8 <HAL_DSI_SetLowPowerRXFilter>:
  *               the configuration information for the DSI.
  * @param  Frequency  cutoff frequency of low-pass filter at the input of LPRX
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
 80048d8:	b480      	push	{r7}
 80048da:	b083      	sub	sp, #12
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
 80048e0:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	7c1b      	ldrb	r3, [r3, #16]
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d101      	bne.n	80048ee <HAL_DSI_SetLowPowerRXFilter+0x16>
 80048ea:	2302      	movs	r3, #2
 80048ec:	e01b      	b.n	8004926 <HAL_DSI_SetLowPowerRXFilter+0x4e>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2201      	movs	r2, #1
 80048f2:	741a      	strb	r2, [r3, #16]

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 8004904:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	065a      	lsls	r2, r3, #25
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	430a      	orrs	r2, r1
 800491a:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2200      	movs	r2, #0
 8004922:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004924:	2300      	movs	r3, #0
}
 8004926:	4618      	mov	r0, r3
 8004928:	370c      	adds	r7, #12
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr
	...

08004934 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004934:	b480      	push	{r7}
 8004936:	b089      	sub	sp, #36	; 0x24
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
 800493c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800493e:	2300      	movs	r3, #0
 8004940:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004942:	2300      	movs	r3, #0
 8004944:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004946:	2300      	movs	r3, #0
 8004948:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800494a:	2300      	movs	r3, #0
 800494c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800494e:	2300      	movs	r3, #0
 8004950:	61fb      	str	r3, [r7, #28]
 8004952:	e175      	b.n	8004c40 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004954:	2201      	movs	r2, #1
 8004956:	69fb      	ldr	r3, [r7, #28]
 8004958:	fa02 f303 	lsl.w	r3, r2, r3
 800495c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	697a      	ldr	r2, [r7, #20]
 8004964:	4013      	ands	r3, r2
 8004966:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004968:	693a      	ldr	r2, [r7, #16]
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	429a      	cmp	r2, r3
 800496e:	f040 8164 	bne.w	8004c3a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	f003 0303 	and.w	r3, r3, #3
 800497a:	2b01      	cmp	r3, #1
 800497c:	d005      	beq.n	800498a <HAL_GPIO_Init+0x56>
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	f003 0303 	and.w	r3, r3, #3
 8004986:	2b02      	cmp	r3, #2
 8004988:	d130      	bne.n	80049ec <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004990:	69fb      	ldr	r3, [r7, #28]
 8004992:	005b      	lsls	r3, r3, #1
 8004994:	2203      	movs	r2, #3
 8004996:	fa02 f303 	lsl.w	r3, r2, r3
 800499a:	43db      	mvns	r3, r3
 800499c:	69ba      	ldr	r2, [r7, #24]
 800499e:	4013      	ands	r3, r2
 80049a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	68da      	ldr	r2, [r3, #12]
 80049a6:	69fb      	ldr	r3, [r7, #28]
 80049a8:	005b      	lsls	r3, r3, #1
 80049aa:	fa02 f303 	lsl.w	r3, r2, r3
 80049ae:	69ba      	ldr	r2, [r7, #24]
 80049b0:	4313      	orrs	r3, r2
 80049b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	69ba      	ldr	r2, [r7, #24]
 80049b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80049c0:	2201      	movs	r2, #1
 80049c2:	69fb      	ldr	r3, [r7, #28]
 80049c4:	fa02 f303 	lsl.w	r3, r2, r3
 80049c8:	43db      	mvns	r3, r3
 80049ca:	69ba      	ldr	r2, [r7, #24]
 80049cc:	4013      	ands	r3, r2
 80049ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	091b      	lsrs	r3, r3, #4
 80049d6:	f003 0201 	and.w	r2, r3, #1
 80049da:	69fb      	ldr	r3, [r7, #28]
 80049dc:	fa02 f303 	lsl.w	r3, r2, r3
 80049e0:	69ba      	ldr	r2, [r7, #24]
 80049e2:	4313      	orrs	r3, r2
 80049e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	69ba      	ldr	r2, [r7, #24]
 80049ea:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	f003 0303 	and.w	r3, r3, #3
 80049f4:	2b03      	cmp	r3, #3
 80049f6:	d017      	beq.n	8004a28 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	68db      	ldr	r3, [r3, #12]
 80049fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80049fe:	69fb      	ldr	r3, [r7, #28]
 8004a00:	005b      	lsls	r3, r3, #1
 8004a02:	2203      	movs	r2, #3
 8004a04:	fa02 f303 	lsl.w	r3, r2, r3
 8004a08:	43db      	mvns	r3, r3
 8004a0a:	69ba      	ldr	r2, [r7, #24]
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	689a      	ldr	r2, [r3, #8]
 8004a14:	69fb      	ldr	r3, [r7, #28]
 8004a16:	005b      	lsls	r3, r3, #1
 8004a18:	fa02 f303 	lsl.w	r3, r2, r3
 8004a1c:	69ba      	ldr	r2, [r7, #24]
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	69ba      	ldr	r2, [r7, #24]
 8004a26:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	f003 0303 	and.w	r3, r3, #3
 8004a30:	2b02      	cmp	r3, #2
 8004a32:	d123      	bne.n	8004a7c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004a34:	69fb      	ldr	r3, [r7, #28]
 8004a36:	08da      	lsrs	r2, r3, #3
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	3208      	adds	r2, #8
 8004a3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004a42:	69fb      	ldr	r3, [r7, #28]
 8004a44:	f003 0307 	and.w	r3, r3, #7
 8004a48:	009b      	lsls	r3, r3, #2
 8004a4a:	220f      	movs	r2, #15
 8004a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a50:	43db      	mvns	r3, r3
 8004a52:	69ba      	ldr	r2, [r7, #24]
 8004a54:	4013      	ands	r3, r2
 8004a56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	691a      	ldr	r2, [r3, #16]
 8004a5c:	69fb      	ldr	r3, [r7, #28]
 8004a5e:	f003 0307 	and.w	r3, r3, #7
 8004a62:	009b      	lsls	r3, r3, #2
 8004a64:	fa02 f303 	lsl.w	r3, r2, r3
 8004a68:	69ba      	ldr	r2, [r7, #24]
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004a6e:	69fb      	ldr	r3, [r7, #28]
 8004a70:	08da      	lsrs	r2, r3, #3
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	3208      	adds	r2, #8
 8004a76:	69b9      	ldr	r1, [r7, #24]
 8004a78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004a82:	69fb      	ldr	r3, [r7, #28]
 8004a84:	005b      	lsls	r3, r3, #1
 8004a86:	2203      	movs	r2, #3
 8004a88:	fa02 f303 	lsl.w	r3, r2, r3
 8004a8c:	43db      	mvns	r3, r3
 8004a8e:	69ba      	ldr	r2, [r7, #24]
 8004a90:	4013      	ands	r3, r2
 8004a92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	f003 0203 	and.w	r2, r3, #3
 8004a9c:	69fb      	ldr	r3, [r7, #28]
 8004a9e:	005b      	lsls	r3, r3, #1
 8004aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa4:	69ba      	ldr	r2, [r7, #24]
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	69ba      	ldr	r2, [r7, #24]
 8004aae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	f000 80be 	beq.w	8004c3a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004abe:	4b66      	ldr	r3, [pc, #408]	; (8004c58 <HAL_GPIO_Init+0x324>)
 8004ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ac2:	4a65      	ldr	r2, [pc, #404]	; (8004c58 <HAL_GPIO_Init+0x324>)
 8004ac4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004ac8:	6453      	str	r3, [r2, #68]	; 0x44
 8004aca:	4b63      	ldr	r3, [pc, #396]	; (8004c58 <HAL_GPIO_Init+0x324>)
 8004acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ace:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ad2:	60fb      	str	r3, [r7, #12]
 8004ad4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004ad6:	4a61      	ldr	r2, [pc, #388]	; (8004c5c <HAL_GPIO_Init+0x328>)
 8004ad8:	69fb      	ldr	r3, [r7, #28]
 8004ada:	089b      	lsrs	r3, r3, #2
 8004adc:	3302      	adds	r3, #2
 8004ade:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004ae4:	69fb      	ldr	r3, [r7, #28]
 8004ae6:	f003 0303 	and.w	r3, r3, #3
 8004aea:	009b      	lsls	r3, r3, #2
 8004aec:	220f      	movs	r2, #15
 8004aee:	fa02 f303 	lsl.w	r3, r2, r3
 8004af2:	43db      	mvns	r3, r3
 8004af4:	69ba      	ldr	r2, [r7, #24]
 8004af6:	4013      	ands	r3, r2
 8004af8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	4a58      	ldr	r2, [pc, #352]	; (8004c60 <HAL_GPIO_Init+0x32c>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d037      	beq.n	8004b72 <HAL_GPIO_Init+0x23e>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	4a57      	ldr	r2, [pc, #348]	; (8004c64 <HAL_GPIO_Init+0x330>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d031      	beq.n	8004b6e <HAL_GPIO_Init+0x23a>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	4a56      	ldr	r2, [pc, #344]	; (8004c68 <HAL_GPIO_Init+0x334>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d02b      	beq.n	8004b6a <HAL_GPIO_Init+0x236>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	4a55      	ldr	r2, [pc, #340]	; (8004c6c <HAL_GPIO_Init+0x338>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d025      	beq.n	8004b66 <HAL_GPIO_Init+0x232>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	4a54      	ldr	r2, [pc, #336]	; (8004c70 <HAL_GPIO_Init+0x33c>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d01f      	beq.n	8004b62 <HAL_GPIO_Init+0x22e>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	4a53      	ldr	r2, [pc, #332]	; (8004c74 <HAL_GPIO_Init+0x340>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d019      	beq.n	8004b5e <HAL_GPIO_Init+0x22a>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	4a52      	ldr	r2, [pc, #328]	; (8004c78 <HAL_GPIO_Init+0x344>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d013      	beq.n	8004b5a <HAL_GPIO_Init+0x226>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	4a51      	ldr	r2, [pc, #324]	; (8004c7c <HAL_GPIO_Init+0x348>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d00d      	beq.n	8004b56 <HAL_GPIO_Init+0x222>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	4a50      	ldr	r2, [pc, #320]	; (8004c80 <HAL_GPIO_Init+0x34c>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d007      	beq.n	8004b52 <HAL_GPIO_Init+0x21e>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	4a4f      	ldr	r2, [pc, #316]	; (8004c84 <HAL_GPIO_Init+0x350>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d101      	bne.n	8004b4e <HAL_GPIO_Init+0x21a>
 8004b4a:	2309      	movs	r3, #9
 8004b4c:	e012      	b.n	8004b74 <HAL_GPIO_Init+0x240>
 8004b4e:	230a      	movs	r3, #10
 8004b50:	e010      	b.n	8004b74 <HAL_GPIO_Init+0x240>
 8004b52:	2308      	movs	r3, #8
 8004b54:	e00e      	b.n	8004b74 <HAL_GPIO_Init+0x240>
 8004b56:	2307      	movs	r3, #7
 8004b58:	e00c      	b.n	8004b74 <HAL_GPIO_Init+0x240>
 8004b5a:	2306      	movs	r3, #6
 8004b5c:	e00a      	b.n	8004b74 <HAL_GPIO_Init+0x240>
 8004b5e:	2305      	movs	r3, #5
 8004b60:	e008      	b.n	8004b74 <HAL_GPIO_Init+0x240>
 8004b62:	2304      	movs	r3, #4
 8004b64:	e006      	b.n	8004b74 <HAL_GPIO_Init+0x240>
 8004b66:	2303      	movs	r3, #3
 8004b68:	e004      	b.n	8004b74 <HAL_GPIO_Init+0x240>
 8004b6a:	2302      	movs	r3, #2
 8004b6c:	e002      	b.n	8004b74 <HAL_GPIO_Init+0x240>
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e000      	b.n	8004b74 <HAL_GPIO_Init+0x240>
 8004b72:	2300      	movs	r3, #0
 8004b74:	69fa      	ldr	r2, [r7, #28]
 8004b76:	f002 0203 	and.w	r2, r2, #3
 8004b7a:	0092      	lsls	r2, r2, #2
 8004b7c:	4093      	lsls	r3, r2
 8004b7e:	69ba      	ldr	r2, [r7, #24]
 8004b80:	4313      	orrs	r3, r2
 8004b82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004b84:	4935      	ldr	r1, [pc, #212]	; (8004c5c <HAL_GPIO_Init+0x328>)
 8004b86:	69fb      	ldr	r3, [r7, #28]
 8004b88:	089b      	lsrs	r3, r3, #2
 8004b8a:	3302      	adds	r3, #2
 8004b8c:	69ba      	ldr	r2, [r7, #24]
 8004b8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004b92:	4b3d      	ldr	r3, [pc, #244]	; (8004c88 <HAL_GPIO_Init+0x354>)
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	43db      	mvns	r3, r3
 8004b9c:	69ba      	ldr	r2, [r7, #24]
 8004b9e:	4013      	ands	r3, r2
 8004ba0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d003      	beq.n	8004bb6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004bae:	69ba      	ldr	r2, [r7, #24]
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004bb6:	4a34      	ldr	r2, [pc, #208]	; (8004c88 <HAL_GPIO_Init+0x354>)
 8004bb8:	69bb      	ldr	r3, [r7, #24]
 8004bba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004bbc:	4b32      	ldr	r3, [pc, #200]	; (8004c88 <HAL_GPIO_Init+0x354>)
 8004bbe:	68db      	ldr	r3, [r3, #12]
 8004bc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	43db      	mvns	r3, r3
 8004bc6:	69ba      	ldr	r2, [r7, #24]
 8004bc8:	4013      	ands	r3, r2
 8004bca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d003      	beq.n	8004be0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004bd8:	69ba      	ldr	r2, [r7, #24]
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004be0:	4a29      	ldr	r2, [pc, #164]	; (8004c88 <HAL_GPIO_Init+0x354>)
 8004be2:	69bb      	ldr	r3, [r7, #24]
 8004be4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004be6:	4b28      	ldr	r3, [pc, #160]	; (8004c88 <HAL_GPIO_Init+0x354>)
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	43db      	mvns	r3, r3
 8004bf0:	69ba      	ldr	r2, [r7, #24]
 8004bf2:	4013      	ands	r3, r2
 8004bf4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d003      	beq.n	8004c0a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004c02:	69ba      	ldr	r2, [r7, #24]
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	4313      	orrs	r3, r2
 8004c08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004c0a:	4a1f      	ldr	r2, [pc, #124]	; (8004c88 <HAL_GPIO_Init+0x354>)
 8004c0c:	69bb      	ldr	r3, [r7, #24]
 8004c0e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004c10:	4b1d      	ldr	r3, [pc, #116]	; (8004c88 <HAL_GPIO_Init+0x354>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	43db      	mvns	r3, r3
 8004c1a:	69ba      	ldr	r2, [r7, #24]
 8004c1c:	4013      	ands	r3, r2
 8004c1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d003      	beq.n	8004c34 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004c2c:	69ba      	ldr	r2, [r7, #24]
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	4313      	orrs	r3, r2
 8004c32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004c34:	4a14      	ldr	r2, [pc, #80]	; (8004c88 <HAL_GPIO_Init+0x354>)
 8004c36:	69bb      	ldr	r3, [r7, #24]
 8004c38:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004c3a:	69fb      	ldr	r3, [r7, #28]
 8004c3c:	3301      	adds	r3, #1
 8004c3e:	61fb      	str	r3, [r7, #28]
 8004c40:	69fb      	ldr	r3, [r7, #28]
 8004c42:	2b0f      	cmp	r3, #15
 8004c44:	f67f ae86 	bls.w	8004954 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004c48:	bf00      	nop
 8004c4a:	bf00      	nop
 8004c4c:	3724      	adds	r7, #36	; 0x24
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr
 8004c56:	bf00      	nop
 8004c58:	40023800 	.word	0x40023800
 8004c5c:	40013800 	.word	0x40013800
 8004c60:	40020000 	.word	0x40020000
 8004c64:	40020400 	.word	0x40020400
 8004c68:	40020800 	.word	0x40020800
 8004c6c:	40020c00 	.word	0x40020c00
 8004c70:	40021000 	.word	0x40021000
 8004c74:	40021400 	.word	0x40021400
 8004c78:	40021800 	.word	0x40021800
 8004c7c:	40021c00 	.word	0x40021c00
 8004c80:	40022000 	.word	0x40022000
 8004c84:	40022400 	.word	0x40022400
 8004c88:	40013c00 	.word	0x40013c00

08004c8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b083      	sub	sp, #12
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
 8004c94:	460b      	mov	r3, r1
 8004c96:	807b      	strh	r3, [r7, #2]
 8004c98:	4613      	mov	r3, r2
 8004c9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004c9c:	787b      	ldrb	r3, [r7, #1]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d003      	beq.n	8004caa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004ca2:	887a      	ldrh	r2, [r7, #2]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004ca8:	e003      	b.n	8004cb2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004caa:	887b      	ldrh	r3, [r7, #2]
 8004cac:	041a      	lsls	r2, r3, #16
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	619a      	str	r2, [r3, #24]
}
 8004cb2:	bf00      	nop
 8004cb4:	370c      	adds	r7, #12
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbc:	4770      	bx	lr

08004cbe <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004cbe:	b480      	push	{r7}
 8004cc0:	b085      	sub	sp, #20
 8004cc2:	af00      	add	r7, sp, #0
 8004cc4:	6078      	str	r0, [r7, #4]
 8004cc6:	460b      	mov	r3, r1
 8004cc8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	695b      	ldr	r3, [r3, #20]
 8004cce:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004cd0:	887a      	ldrh	r2, [r7, #2]
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	4013      	ands	r3, r2
 8004cd6:	041a      	lsls	r2, r3, #16
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	43d9      	mvns	r1, r3
 8004cdc:	887b      	ldrh	r3, [r7, #2]
 8004cde:	400b      	ands	r3, r1
 8004ce0:	431a      	orrs	r2, r3
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	619a      	str	r2, [r3, #24]
}
 8004ce6:	bf00      	nop
 8004ce8:	3714      	adds	r7, #20
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr
	...

08004cf4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b082      	sub	sp, #8
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d101      	bne.n	8004d06 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	e07f      	b.n	8004e06 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d0c:	b2db      	uxtb	r3, r3
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d106      	bne.n	8004d20 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2200      	movs	r2, #0
 8004d16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f7fc ffa4 	bl	8001c68 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2224      	movs	r2, #36	; 0x24
 8004d24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f022 0201 	bic.w	r2, r2, #1
 8004d36:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	685a      	ldr	r2, [r3, #4]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004d44:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	689a      	ldr	r2, [r3, #8]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004d54:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	68db      	ldr	r3, [r3, #12]
 8004d5a:	2b01      	cmp	r3, #1
 8004d5c:	d107      	bne.n	8004d6e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	689a      	ldr	r2, [r3, #8]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d6a:	609a      	str	r2, [r3, #8]
 8004d6c:	e006      	b.n	8004d7c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	689a      	ldr	r2, [r3, #8]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004d7a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	68db      	ldr	r3, [r3, #12]
 8004d80:	2b02      	cmp	r3, #2
 8004d82:	d104      	bne.n	8004d8e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d8c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	6859      	ldr	r1, [r3, #4]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	4b1d      	ldr	r3, [pc, #116]	; (8004e10 <HAL_I2C_Init+0x11c>)
 8004d9a:	430b      	orrs	r3, r1
 8004d9c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	68da      	ldr	r2, [r3, #12]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004dac:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	691a      	ldr	r2, [r3, #16]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	695b      	ldr	r3, [r3, #20]
 8004db6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	699b      	ldr	r3, [r3, #24]
 8004dbe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	430a      	orrs	r2, r1
 8004dc6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	69d9      	ldr	r1, [r3, #28]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6a1a      	ldr	r2, [r3, #32]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	430a      	orrs	r2, r1
 8004dd6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f042 0201 	orr.w	r2, r2, #1
 8004de6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2200      	movs	r2, #0
 8004dec:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2220      	movs	r2, #32
 8004df2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004e04:	2300      	movs	r3, #0
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	3708      	adds	r7, #8
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}
 8004e0e:	bf00      	nop
 8004e10:	02008000 	.word	0x02008000

08004e14 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b084      	sub	sp, #16
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	699b      	ldr	r3, [r3, #24]
 8004e22:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d005      	beq.n	8004e40 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e38:	68ba      	ldr	r2, [r7, #8]
 8004e3a:	68f9      	ldr	r1, [r7, #12]
 8004e3c:	6878      	ldr	r0, [r7, #4]
 8004e3e:	4798      	blx	r3
  }
}
 8004e40:	bf00      	nop
 8004e42:	3710      	adds	r7, #16
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}

08004e48 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b083      	sub	sp, #12
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
 8004e50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e58:	b2db      	uxtb	r3, r3
 8004e5a:	2b20      	cmp	r3, #32
 8004e5c:	d138      	bne.n	8004ed0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d101      	bne.n	8004e6c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004e68:	2302      	movs	r3, #2
 8004e6a:	e032      	b.n	8004ed2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2224      	movs	r2, #36	; 0x24
 8004e78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f022 0201 	bic.w	r2, r2, #1
 8004e8a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004e9a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	6819      	ldr	r1, [r3, #0]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	683a      	ldr	r2, [r7, #0]
 8004ea8:	430a      	orrs	r2, r1
 8004eaa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f042 0201 	orr.w	r2, r2, #1
 8004eba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2220      	movs	r2, #32
 8004ec0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	e000      	b.n	8004ed2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004ed0:	2302      	movs	r3, #2
  }
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	370c      	adds	r7, #12
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr

08004ede <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004ede:	b480      	push	{r7}
 8004ee0:	b085      	sub	sp, #20
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	6078      	str	r0, [r7, #4]
 8004ee6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004eee:	b2db      	uxtb	r3, r3
 8004ef0:	2b20      	cmp	r3, #32
 8004ef2:	d139      	bne.n	8004f68 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	d101      	bne.n	8004f02 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004efe:	2302      	movs	r3, #2
 8004f00:	e033      	b.n	8004f6a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2201      	movs	r2, #1
 8004f06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2224      	movs	r2, #36	; 0x24
 8004f0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f022 0201 	bic.w	r2, r2, #1
 8004f20:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004f30:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	021b      	lsls	r3, r3, #8
 8004f36:	68fa      	ldr	r2, [r7, #12]
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	68fa      	ldr	r2, [r7, #12]
 8004f42:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f042 0201 	orr.w	r2, r2, #1
 8004f52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2220      	movs	r2, #32
 8004f58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004f64:	2300      	movs	r3, #0
 8004f66:	e000      	b.n	8004f6a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004f68:	2302      	movs	r3, #2
  }
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3714      	adds	r7, #20
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f74:	4770      	bx	lr
	...

08004f78 <HAL_JPEG_Init>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_Init(JPEG_HandleTypeDef *hjpeg)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b082      	sub	sp, #8
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
    99,  99,  99,  99,  99,  99,  99,  99,
    99,  99,  99,  99,  99,  99,  99,  99
  };

  /* Check the JPEG handle allocation */
  if (hjpeg == NULL)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d101      	bne.n	8004f8a <HAL_JPEG_Init+0x12>
  {
    return HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	e078      	b.n	800507c <HAL_JPEG_Init+0x104>

    /* Init the low level hardware */
    hjpeg->MspInitCallback(hjpeg);
  }
#else
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d106      	bne.n	8004fa4 <HAL_JPEG_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hjpeg->Lock = HAL_UNLOCKED;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_JPEG_MspInit(hjpeg);
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f7fc feee 	bl	8001d80 <HAL_JPEG_MspInit>
  }
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2202      	movs	r2, #2
 8004fa8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Start the JPEG Core*/
  __HAL_JPEG_ENABLE(hjpeg);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f042 0201 	orr.w	r2, r2, #1
 8004fba:	631a      	str	r2, [r3, #48]	; 0x30

  /* Stop the JPEG encoding/decoding process*/
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f022 0201 	bic.w	r2, r2, #1
 8004fca:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 8004fda:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable All DMA requests */
  JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_MASK);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
 8004fea:	631a      	str	r2, [r3, #48]	; 0x30

  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ffa:	631a      	str	r2, [r3, #48]	; 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800500a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800501a:	639a      	str	r2, [r3, #56]	; 0x38

  /* init default quantization tables*/
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	4a19      	ldr	r2, [pc, #100]	; (8005084 <HAL_JPEG_Init+0x10c>)
 8005020:	63da      	str	r2, [r3, #60]	; 0x3c
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	4a18      	ldr	r2, [pc, #96]	; (8005088 <HAL_JPEG_Init+0x110>)
 8005026:	641a      	str	r2, [r3, #64]	; 0x40
  hjpeg->QuantTable2 = NULL;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2200      	movs	r2, #0
 800502c:	645a      	str	r2, [r3, #68]	; 0x44
  hjpeg->QuantTable3 = NULL;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2200      	movs	r2, #0
 8005032:	649a      	str	r2, [r3, #72]	; 0x48

  /* init the default Huffman tables*/
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	f000 fdab 	bl	8005b90 <JPEG_Set_HuffEnc_Mem>
 800503a:	4603      	mov	r3, r0
 800503c:	2b00      	cmp	r3, #0
 800503e:	d004      	beq.n	800504a <HAL_JPEG_Init+0xd2>
  {
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2201      	movs	r2, #1
 8005044:	651a      	str	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	e018      	b.n	800507c <HAL_JPEG_Init+0x104>
  }

  /* Enable header processing*/
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	685a      	ldr	r2, [r3, #4]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005058:	605a      	str	r2, [r3, #4]

  /* Reset JpegInCount and JpegOutCount */
  hjpeg->JpegInCount = 0;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2200      	movs	r2, #0
 800505e:	621a      	str	r2, [r3, #32]
  hjpeg->JpegOutCount = 0;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2200      	movs	r2, #0
 8005064:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_READY;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2201      	movs	r2, #1
 800506a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Reset the JPEG ErrorCode */
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2200      	movs	r2, #0
 8005072:	651a      	str	r2, [r3, #80]	; 0x50

  /*Clear the context filelds*/
  hjpeg->Context = 0;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2200      	movs	r2, #0
 8005078:	655a      	str	r2, [r3, #84]	; 0x54

  /* Return function status */
  return HAL_OK;
 800507a:	2300      	movs	r3, #0
}
 800507c:	4618      	mov	r0, r3
 800507e:	3708      	adds	r7, #8
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}
 8005084:	0801de98 	.word	0x0801de98
 8005088:	0801ded8 	.word	0x0801ded8

0800508c <HAL_JPEG_GetInfo>:
  * @param  pInfo pointer to a JPEG_ConfTypeDef structure that contains
  *         The JPEG decoded header information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_GetInfo(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b086      	sub	sp, #24
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
 8005094:	6039      	str	r1, [r7, #0]
  uint32_t yblockNb;
  uint32_t cBblockNb;
  uint32_t cRblockNb;

  /* Check the JPEG handle allocation */
  if ((hjpeg == NULL) || (pInfo == NULL))
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d002      	beq.n	80050a2 <HAL_JPEG_GetInfo+0x16>
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d101      	bne.n	80050a6 <HAL_JPEG_GetInfo+0x1a>
  {
    return HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	e083      	b.n	80051ae <HAL_JPEG_GetInfo+0x122>
  }

  /*Read the conf parameters */
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	f003 0303 	and.w	r3, r3, #3
 80050b0:	2b02      	cmp	r3, #2
 80050b2:	d103      	bne.n	80050bc <HAL_JPEG_GetInfo+0x30>
  {
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	2210      	movs	r2, #16
 80050b8:	601a      	str	r2, [r3, #0]
 80050ba:	e017      	b.n	80050ec <HAL_JPEG_GetInfo+0x60>
  }
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	f003 0303 	and.w	r3, r3, #3
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d103      	bne.n	80050d2 <HAL_JPEG_GetInfo+0x46>
  {
    pInfo->ColorSpace = JPEG_GRAYSCALE_COLORSPACE;
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	2200      	movs	r2, #0
 80050ce:	601a      	str	r2, [r3, #0]
 80050d0:	e00c      	b.n	80050ec <HAL_JPEG_GetInfo+0x60>
  }
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	f003 0303 	and.w	r3, r3, #3
 80050dc:	2b03      	cmp	r3, #3
 80050de:	d103      	bne.n	80050e8 <HAL_JPEG_GetInfo+0x5c>
  {
    pInfo->ColorSpace = JPEG_CMYK_COLORSPACE;
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	2230      	movs	r2, #48	; 0x30
 80050e4:	601a      	str	r2, [r3, #0]
 80050e6:	e001      	b.n	80050ec <HAL_JPEG_GetInfo+0x60>
  }
  else
  {
    return HAL_ERROR;
 80050e8:	2301      	movs	r3, #1
 80050ea:	e060      	b.n	80051ae <HAL_JPEG_GetInfo+0x122>
  }

  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	0c1b      	lsrs	r3, r3, #16
 80050f4:	b29a      	uxth	r2, r3
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	609a      	str	r2, [r3, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	68db      	ldr	r3, [r3, #12]
 8005100:	0c1b      	lsrs	r3, r3, #16
 8005102:	b29a      	uxth	r2, r3
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	60da      	str	r2, [r3, #12]

  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	2b10      	cmp	r3, #16
 800510e:	d003      	beq.n	8005118 <HAL_JPEG_GetInfo+0x8c>
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	2b30      	cmp	r3, #48	; 0x30
 8005116:	d140      	bne.n	800519a <HAL_JPEG_GetInfo+0x10e>
  {
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	691b      	ldr	r3, [r3, #16]
 800511e:	091b      	lsrs	r3, r3, #4
 8005120:	f003 030f 	and.w	r3, r3, #15
 8005124:	617b      	str	r3, [r7, #20]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	695b      	ldr	r3, [r3, #20]
 800512c:	091b      	lsrs	r3, r3, #4
 800512e:	f003 030f 	and.w	r3, r3, #15
 8005132:	613b      	str	r3, [r7, #16]
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	699b      	ldr	r3, [r3, #24]
 800513a:	091b      	lsrs	r3, r3, #4
 800513c:	f003 030f 	and.w	r3, r3, #15
 8005140:	60fb      	str	r3, [r7, #12]

    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	2b01      	cmp	r3, #1
 8005146:	d109      	bne.n	800515c <HAL_JPEG_GetInfo+0xd0>
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d106      	bne.n	800515c <HAL_JPEG_GetInfo+0xd0>
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d103      	bne.n	800515c <HAL_JPEG_GetInfo+0xd0>
    {
      pInfo->ChromaSubsampling = JPEG_422_SUBSAMPLING; /*16x8 block*/
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	2202      	movs	r2, #2
 8005158:	605a      	str	r2, [r3, #4]
 800515a:	e01d      	b.n	8005198 <HAL_JPEG_GetInfo+0x10c>
    }
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d109      	bne.n	8005176 <HAL_JPEG_GetInfo+0xea>
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d106      	bne.n	8005176 <HAL_JPEG_GetInfo+0xea>
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d103      	bne.n	8005176 <HAL_JPEG_GetInfo+0xea>
    {
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	2200      	movs	r2, #0
 8005172:	605a      	str	r2, [r3, #4]
 8005174:	e010      	b.n	8005198 <HAL_JPEG_GetInfo+0x10c>
    }
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	2b03      	cmp	r3, #3
 800517a:	d109      	bne.n	8005190 <HAL_JPEG_GetInfo+0x104>
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d106      	bne.n	8005190 <HAL_JPEG_GetInfo+0x104>
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d103      	bne.n	8005190 <HAL_JPEG_GetInfo+0x104>
    {
      pInfo->ChromaSubsampling = JPEG_420_SUBSAMPLING;
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	2201      	movs	r2, #1
 800518c:	605a      	str	r2, [r3, #4]
 800518e:	e003      	b.n	8005198 <HAL_JPEG_GetInfo+0x10c>
    }
    else /*Default is 4:4:4*/
    {
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	2200      	movs	r2, #0
 8005194:	605a      	str	r2, [r3, #4]
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8005196:	e003      	b.n	80051a0 <HAL_JPEG_GetInfo+0x114>
 8005198:	e002      	b.n	80051a0 <HAL_JPEG_GetInfo+0x114>
    }
  }
  else
  {
    pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	2200      	movs	r2, #0
 800519e:	605a      	str	r2, [r3, #4]
  }

  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	f001 fdef 	bl	8006d84 <JPEG_GetQuality>
 80051a6:	4602      	mov	r2, r0
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	611a      	str	r2, [r3, #16]

  /* Return function status */
  return HAL_OK;
 80051ac:	2300      	movs	r3, #0
}
 80051ae:	4618      	mov	r0, r3
 80051b0:	3718      	adds	r7, #24
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}

080051b6 <HAL_JPEG_Decode_DMA>:
  * @param  OutDataLength size in bytes of the Output buffer
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Decode_DMA(JPEG_HandleTypeDef *hjpeg, uint8_t *pDataIn, uint32_t InDataLength,
                                       uint8_t *pDataOutMCU, uint32_t OutDataLength)
{
 80051b6:	b580      	push	{r7, lr}
 80051b8:	b084      	sub	sp, #16
 80051ba:	af00      	add	r7, sp, #0
 80051bc:	60f8      	str	r0, [r7, #12]
 80051be:	60b9      	str	r1, [r7, #8]
 80051c0:	607a      	str	r2, [r7, #4]
 80051c2:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param((InDataLength >= 4UL));
  assert_param((OutDataLength >= 4UL));

  /* Check In/out buffer allocation and size */
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d005      	beq.n	80051d6 <HAL_JPEG_Decode_DMA+0x20>
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d002      	beq.n	80051d6 <HAL_JPEG_Decode_DMA+0x20>
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d101      	bne.n	80051da <HAL_JPEG_Decode_DMA+0x24>
  {
    return HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	e04c      	b.n	8005274 <HAL_JPEG_Decode_DMA+0xbe>
  }

  /* Process Locked */
  __HAL_LOCK(hjpeg);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	d101      	bne.n	80051e8 <HAL_JPEG_Decode_DMA+0x32>
 80051e4:	2302      	movs	r3, #2
 80051e6:	e045      	b.n	8005274 <HAL_JPEG_Decode_DMA+0xbe>
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2201      	movs	r2, #1
 80051ec:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  if (hjpeg->State == HAL_JPEG_STATE_READY)
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80051f6:	b2db      	uxtb	r3, r3
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	d134      	bne.n	8005266 <HAL_JPEG_Decode_DMA+0xb0>
  {
    /*Change JPEG state*/
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2204      	movs	r2, #4
 8005200:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

    /*Set the Context to Decode with DMA*/
    hjpeg->Context &= ~(JPEG_CONTEXT_OPERATION_MASK | JPEG_CONTEXT_METHOD_MASK);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005208:	f023 020f 	bic.w	r2, r3, #15
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	655a      	str	r2, [r3, #84]	; 0x54
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005214:	f043 020e 	orr.w	r2, r3, #14
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	655a      	str	r2, [r3, #84]	; 0x54

    /*Store In/out buffers pointers and size*/
    hjpeg->pJpegInBuffPtr = pDataIn;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	68ba      	ldr	r2, [r7, #8]
 8005220:	619a      	str	r2, [r3, #24]
    hjpeg->pJpegOutBuffPtr = pDataOutMCU;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	683a      	ldr	r2, [r7, #0]
 8005226:	61da      	str	r2, [r3, #28]
    hjpeg->InDataLength = InDataLength;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	687a      	ldr	r2, [r7, #4]
 800522c:	629a      	str	r2, [r3, #40]	; 0x28
    hjpeg->OutDataLength = OutDataLength;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	69ba      	ldr	r2, [r7, #24]
 8005232:	62da      	str	r2, [r3, #44]	; 0x2c

    /*Reset In/out data counter */
    hjpeg->JpegInCount = 0;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2200      	movs	r2, #0
 8005238:	621a      	str	r2, [r3, #32]
    hjpeg->JpegOutCount = 0;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2200      	movs	r2, #0
 800523e:	625a      	str	r2, [r3, #36]	; 0x24

    /*Init decoding process*/
    JPEG_Init_Process(hjpeg);
 8005240:	68f8      	ldr	r0, [r7, #12]
 8005242:	f000 ff27 	bl	8006094 <JPEG_Init_Process>

    /* JPEG decoding process using DMA */
    if (JPEG_DMA_StartProcess(hjpeg) != HAL_OK)
 8005246:	68f8      	ldr	r0, [r7, #12]
 8005248:	f001 fa50 	bl	80066ec <JPEG_DMA_StartProcess>
 800524c:	4603      	mov	r3, r0
 800524e:	2b00      	cmp	r3, #0
 8005250:	d00f      	beq.n	8005272 <HAL_JPEG_Decode_DMA+0xbc>
    {
      /* Update State */
      hjpeg->State = HAL_JPEG_STATE_ERROR;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2206      	movs	r2, #6
 8005256:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      /* Process Unlocked */
      __HAL_UNLOCK(hjpeg);
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2200      	movs	r2, #0
 800525e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      return HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	e006      	b.n	8005274 <HAL_JPEG_Decode_DMA+0xbe>
    }
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2200      	movs	r2, #0
 800526a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    return HAL_BUSY;
 800526e:	2302      	movs	r3, #2
 8005270:	e000      	b.n	8005274 <HAL_JPEG_Decode_DMA+0xbe>
  }
  /* Return function status */
  return HAL_OK;
 8005272:	2300      	movs	r3, #0
}
 8005274:	4618      	mov	r0, r3
 8005276:	3710      	adds	r7, #16
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}

0800527c <HAL_JPEG_Pause>:
  *                           JPEG_PAUSE_RESUME_OUTPUT: Pause Output processing
  *                           JPEG_PAUSE_RESUME_INPUT_OUTPUT: Pause Input and Output processing
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Pause(JPEG_HandleTypeDef *hjpeg, uint32_t XferSelection)
{
 800527c:	b480      	push	{r7}
 800527e:	b085      	sub	sp, #20
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
 8005284:	6039      	str	r1, [r7, #0]
  uint32_t mask = 0;
 8005286:	2300      	movs	r3, #0
 8005288:	60fb      	str	r3, [r7, #12]

  assert_param(IS_JPEG_PAUSE_RESUME_STATE(XferSelection));

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800528e:	f003 030c 	and.w	r3, r3, #12
 8005292:	2b0c      	cmp	r3, #12
 8005294:	d129      	bne.n	80052ea <HAL_JPEG_Pause+0x6e>
  {
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	f003 0301 	and.w	r3, r3, #1
 800529c:	2b00      	cmp	r3, #0
 800529e:	d009      	beq.n	80052b4 <HAL_JPEG_Pause+0x38>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052a4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	655a      	str	r2, [r3, #84]	; 0x54
      mask |= JPEG_DMA_IDMA;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80052b2:	60fb      	str	r3, [r7, #12]
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	f003 0302 	and.w	r3, r3, #2
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d009      	beq.n	80052d2 <HAL_JPEG_Pause+0x56>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052c2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	655a      	str	r2, [r3, #84]	; 0x54
      mask |= JPEG_DMA_ODMA;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80052d0:	60fb      	str	r3, [r7, #12]
    }
    JPEG_DISABLE_DMA(hjpeg, mask);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80052de:	43da      	mvns	r2, r3
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	400a      	ands	r2, r1
 80052e6:	631a      	str	r2, [r3, #48]	; 0x30
 80052e8:	e02c      	b.n	8005344 <HAL_JPEG_Pause+0xc8>

  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052ee:	f003 030c 	and.w	r3, r3, #12
 80052f2:	2b08      	cmp	r3, #8
 80052f4:	d126      	bne.n	8005344 <HAL_JPEG_Pause+0xc8>
  {

    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	f003 0301 	and.w	r3, r3, #1
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d009      	beq.n	8005314 <HAL_JPEG_Pause+0x98>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005304:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	655a      	str	r2, [r3, #84]	; 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f043 0306 	orr.w	r3, r3, #6
 8005312:	60fb      	str	r3, [r7, #12]
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	f003 0302 	and.w	r3, r3, #2
 800531a:	2b00      	cmp	r3, #0
 800531c:	d009      	beq.n	8005332 <HAL_JPEG_Pause+0xb6>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005322:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	655a      	str	r2, [r3, #84]	; 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8005330:	60fb      	str	r3, [r7, #12]
    }
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	43da      	mvns	r2, r3
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	400a      	ands	r2, r1
 8005342:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Nothing to do */
  }

  /* Return function status */
  return HAL_OK;
 8005344:	2300      	movs	r3, #0
}
 8005346:	4618      	mov	r0, r3
 8005348:	3714      	adds	r7, #20
 800534a:	46bd      	mov	sp, r7
 800534c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005350:	4770      	bx	lr

08005352 <HAL_JPEG_Resume>:
  *                           JPEG_PAUSE_RESUME_OUTPUT: Resume Output processing
  *                           JPEG_PAUSE_RESUME_INPUT_OUTPUT: Resume Input and Output processing
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Resume(JPEG_HandleTypeDef *hjpeg, uint32_t XferSelection)
{
 8005352:	b580      	push	{r7, lr}
 8005354:	b084      	sub	sp, #16
 8005356:	af00      	add	r7, sp, #0
 8005358:	6078      	str	r0, [r7, #4]
 800535a:	6039      	str	r1, [r7, #0]
  uint32_t mask = 0;
 800535c:	2300      	movs	r3, #0
 800535e:	60fb      	str	r3, [r7, #12]

  assert_param(IS_JPEG_PAUSE_RESUME_STATE(XferSelection));

  if ((hjpeg->Context & (JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT)) == 0UL)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005364:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005368:	2b00      	cmp	r3, #0
 800536a:	d101      	bne.n	8005370 <HAL_JPEG_Resume+0x1e>
  {
    /* if nothing paused to resume return error*/
    return HAL_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	e0a9      	b.n	80054c4 <HAL_JPEG_Resume+0x172>
  }

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005374:	f003 030c 	and.w	r3, r3, #12
 8005378:	2b0c      	cmp	r3, #12
 800537a:	d176      	bne.n	800546a <HAL_JPEG_Resume+0x118>
  {

    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	f003 0301 	and.w	r3, r3, #1
 8005382:	2b00      	cmp	r3, #0
 8005384:	d030      	beq.n	80053e8 <HAL_JPEG_Resume+0x96>
    {
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800538a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	655a      	str	r2, [r3, #84]	; 0x54
      mask |= JPEG_DMA_IDMA;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005398:	60fb      	str	r3, [r7, #12]

      /*JPEG Input DMA transfer data number must be multiple of DMA buffer size
        as the destination is a 32 bits register */
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800539e:	f023 0203 	bic.w	r2, r3, #3
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	629a      	str	r2, [r3, #40]	; 0x28

      if (hjpeg->InDataLength > 0UL)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d01c      	beq.n	80053e8 <HAL_JPEG_Resume+0x96>
      {
        /* Start DMA FIFO In transfer */
        if (HAL_DMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	699b      	ldr	r3, [r3, #24]
 80053b6:	4619      	mov	r1, r3
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	3340      	adds	r3, #64	; 0x40
 80053be:	461a      	mov	r2, r3
                             hjpeg->InDataLength >> 2) != HAL_OK)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if (HAL_DMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 80053c4:	089b      	lsrs	r3, r3, #2
 80053c6:	f7fd ff7f 	bl	80032c8 <HAL_DMA_Start_IT>
 80053ca:	4603      	mov	r3, r0
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d00b      	beq.n	80053e8 <HAL_JPEG_Resume+0x96>
        {
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053d4:	f043 0204 	orr.w	r2, r3, #4
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	651a      	str	r2, [r3, #80]	; 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2206      	movs	r2, #6
 80053e0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          return HAL_ERROR;
 80053e4:	2301      	movs	r3, #1
 80053e6:	e06d      	b.n	80054c4 <HAL_JPEG_Resume+0x172>
        }
      }
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	f003 0302 	and.w	r3, r3, #2
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d030      	beq.n	8005454 <HAL_JPEG_Resume+0x102>
    {
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053f6:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005402:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005406:	2b00      	cmp	r3, #0
 8005408:	d003      	beq.n	8005412 <HAL_JPEG_Resume+0xc0>
      {
        JPEG_DMA_PollResidualData(hjpeg);
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f001 fadc 	bl	80069c8 <JPEG_DMA_PollResidualData>
 8005410:	e020      	b.n	8005454 <HAL_JPEG_Resume+0x102>
      }
      else
      {
        mask |= JPEG_DMA_ODMA;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005418:	60fb      	str	r3, [r7, #12]

        /* Start DMA FIFO Out transfer */
        if (HAL_DMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	3344      	adds	r3, #68	; 0x44
 8005424:	4619      	mov	r1, r3
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	69db      	ldr	r3, [r3, #28]
 800542a:	461a      	mov	r2, r3
                             hjpeg->OutDataLength >> 2) != HAL_OK)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if (HAL_DMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8005430:	089b      	lsrs	r3, r3, #2
 8005432:	f7fd ff49 	bl	80032c8 <HAL_DMA_Start_IT>
 8005436:	4603      	mov	r3, r0
 8005438:	2b00      	cmp	r3, #0
 800543a:	d00b      	beq.n	8005454 <HAL_JPEG_Resume+0x102>
        {
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005440:	f043 0204 	orr.w	r2, r3, #4
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	651a      	str	r2, [r3, #80]	; 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2206      	movs	r2, #6
 800544c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          return HAL_ERROR;
 8005450:	2301      	movs	r3, #1
 8005452:	e037      	b.n	80054c4 <HAL_JPEG_Resume+0x172>
        }
      }

    }
    JPEG_ENABLE_DMA(hjpeg, mask);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	f403 52c0 	and.w	r2, r3, #6144	; 0x1800
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	430a      	orrs	r2, r1
 8005466:	631a      	str	r2, [r3, #48]	; 0x30
 8005468:	e02b      	b.n	80054c2 <HAL_JPEG_Resume+0x170>

  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800546e:	f003 030c 	and.w	r3, r3, #12
 8005472:	2b08      	cmp	r3, #8
 8005474:	d125      	bne.n	80054c2 <HAL_JPEG_Resume+0x170>
  {
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	f003 0301 	and.w	r3, r3, #1
 800547c:	2b00      	cmp	r3, #0
 800547e:	d009      	beq.n	8005494 <HAL_JPEG_Resume+0x142>
    {
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005484:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	655a      	str	r2, [r3, #84]	; 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f043 0306 	orr.w	r3, r3, #6
 8005492:	60fb      	str	r3, [r7, #12]
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	f003 0302 	and.w	r3, r3, #2
 800549a:	2b00      	cmp	r3, #0
 800549c:	d009      	beq.n	80054b2 <HAL_JPEG_Resume+0x160>
    {
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054a2:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	655a      	str	r2, [r3, #84]	; 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 80054b0:	60fb      	str	r3, [r7, #12]
    }
    __HAL_JPEG_ENABLE_IT(hjpeg, mask);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	68fa      	ldr	r2, [r7, #12]
 80054be:	430a      	orrs	r2, r1
 80054c0:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Nothing to do */
  }

  /* Return function status */
  return HAL_OK;
 80054c2:	2300      	movs	r3, #0
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	3710      	adds	r7, #16
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}

080054cc <HAL_JPEG_ConfigInputBuffer>:
  * @param  pNewInputBuffer Pointer to the new input data buffer
  * @param  InDataLength Size in bytes of the new Input data buffer
  * @retval HAL status
  */
void HAL_JPEG_ConfigInputBuffer(JPEG_HandleTypeDef *hjpeg, uint8_t *pNewInputBuffer, uint32_t InDataLength)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b085      	sub	sp, #20
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	60f8      	str	r0, [r7, #12]
 80054d4:	60b9      	str	r1, [r7, #8]
 80054d6:	607a      	str	r2, [r7, #4]
  hjpeg->pJpegInBuffPtr =  pNewInputBuffer;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	68ba      	ldr	r2, [r7, #8]
 80054dc:	619a      	str	r2, [r3, #24]
  hjpeg->InDataLength = InDataLength;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	687a      	ldr	r2, [r7, #4]
 80054e2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80054e4:	bf00      	nop
 80054e6:	3714      	adds	r7, #20
 80054e8:	46bd      	mov	sp, r7
 80054ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ee:	4770      	bx	lr

080054f0 <HAL_JPEG_ConfigOutputBuffer>:
  * @param  pNewOutputBuffer Pointer to the new output data buffer
  * @param  OutDataLength Size in bytes of the new Output data buffer
  * @retval HAL status
  */
void HAL_JPEG_ConfigOutputBuffer(JPEG_HandleTypeDef *hjpeg, uint8_t *pNewOutputBuffer, uint32_t OutDataLength)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b085      	sub	sp, #20
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	60f8      	str	r0, [r7, #12]
 80054f8:	60b9      	str	r1, [r7, #8]
 80054fa:	607a      	str	r2, [r7, #4]
  hjpeg->pJpegOutBuffPtr = pNewOutputBuffer;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	68ba      	ldr	r2, [r7, #8]
 8005500:	61da      	str	r2, [r3, #28]
  hjpeg->OutDataLength = OutDataLength;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	687a      	ldr	r2, [r7, #4]
 8005506:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005508:	bf00      	nop
 800550a:	3714      	adds	r7, #20
 800550c:	46bd      	mov	sp, r7
 800550e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005512:	4770      	bx	lr

08005514 <HAL_JPEG_EncodeCpltCallback>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
__weak void HAL_JPEG_EncodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
{
 8005514:	b480      	push	{r7}
 8005516:	b083      	sub	sp, #12
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  UNUSED(hjpeg);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_EncodeCpltCallback could be implemented in the user file
   */
}
 800551c:	bf00      	nop
 800551e:	370c      	adds	r7, #12
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	4770      	bx	lr

08005528 <HAL_JPEG_IRQHandler>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
void HAL_JPEG_IRQHandler(JPEG_HandleTypeDef *hjpeg)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b082      	sub	sp, #8
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  switch (hjpeg->State)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8005536:	b2db      	uxtb	r3, r3
 8005538:	3b03      	subs	r3, #3
 800553a:	2b01      	cmp	r3, #1
 800553c:	d813      	bhi.n	8005566 <HAL_JPEG_IRQHandler+0x3e>
  {
    case HAL_JPEG_STATE_BUSY_ENCODING:
    case HAL_JPEG_STATE_BUSY_DECODING:
      /* continue JPEG data encoding/Decoding*/
      /* JPEG data processing : In/Out FIFO transfer*/
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005542:	f003 030c 	and.w	r3, r3, #12
 8005546:	2b08      	cmp	r3, #8
 8005548:	d103      	bne.n	8005552 <HAL_JPEG_IRQHandler+0x2a>
      {
        (void) JPEG_Process(hjpeg);
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f000 fe1e 	bl	800618c <JPEG_Process>
      }
      else
      {
        /* Nothing to do */
      }
      break;
 8005550:	e00b      	b.n	800556a <HAL_JPEG_IRQHandler+0x42>
      else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005556:	f003 030c 	and.w	r3, r3, #12
 800555a:	2b0c      	cmp	r3, #12
 800555c:	d105      	bne.n	800556a <HAL_JPEG_IRQHandler+0x42>
        JPEG_DMA_ContinueProcess(hjpeg);
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f001 f948 	bl	80067f4 <JPEG_DMA_ContinueProcess>
      break;
 8005564:	e001      	b.n	800556a <HAL_JPEG_IRQHandler+0x42>

    default:
      break;
 8005566:	bf00      	nop
 8005568:	e000      	b.n	800556c <HAL_JPEG_IRQHandler+0x44>
      break;
 800556a:	bf00      	nop
  }
}
 800556c:	bf00      	nop
 800556e:	3708      	adds	r7, #8
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}

08005574 <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 8005574:	b480      	push	{r7}
 8005576:	b08b      	sub	sp, #44	; 0x2c
 8005578:	af00      	add	r7, sp, #0
 800557a:	60f8      	str	r0, [r7, #12]
 800557c:	60b9      	str	r1, [r7, #8]
 800557e:	607a      	str	r2, [r7, #4]
 8005580:	603b      	str	r3, [r7, #0]
  uint32_t l;
  uint32_t code;
  uint32_t si;

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
 8005582:	2300      	movs	r3, #0
 8005584:	623b      	str	r3, [r7, #32]
  for (l = 0; l < 16UL; l++)
 8005586:	2300      	movs	r3, #0
 8005588:	61fb      	str	r3, [r7, #28]
 800558a:	e020      	b.n	80055ce <JPEG_Bits_To_SizeCodes+0x5a>
  {
    i = (uint32_t)Bits[l];
 800558c:	68fa      	ldr	r2, [r7, #12]
 800558e:	69fb      	ldr	r3, [r7, #28]
 8005590:	4413      	add	r3, r2
 8005592:	781b      	ldrb	r3, [r3, #0]
 8005594:	627b      	str	r3, [r7, #36]	; 0x24
    if ((p + i) > 256UL)
 8005596:	6a3a      	ldr	r2, [r7, #32]
 8005598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800559a:	4413      	add	r3, r2
 800559c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055a0:	d90f      	bls.n	80055c2 <JPEG_Bits_To_SizeCodes+0x4e>
    {
      /* check for table overflow */
      return HAL_ERROR;
 80055a2:	2301      	movs	r3, #1
 80055a4:	e055      	b.n	8005652 <JPEG_Bits_To_SizeCodes+0xde>
    }
    while (i != 0UL)
    {
      Huffsize[p] = (uint8_t) l + 1U;
 80055a6:	69fb      	ldr	r3, [r7, #28]
 80055a8:	b2da      	uxtb	r2, r3
 80055aa:	68b9      	ldr	r1, [r7, #8]
 80055ac:	6a3b      	ldr	r3, [r7, #32]
 80055ae:	440b      	add	r3, r1
 80055b0:	3201      	adds	r2, #1
 80055b2:	b2d2      	uxtb	r2, r2
 80055b4:	701a      	strb	r2, [r3, #0]
      p++;
 80055b6:	6a3b      	ldr	r3, [r7, #32]
 80055b8:	3301      	adds	r3, #1
 80055ba:	623b      	str	r3, [r7, #32]
      i--;
 80055bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055be:	3b01      	subs	r3, #1
 80055c0:	627b      	str	r3, [r7, #36]	; 0x24
    while (i != 0UL)
 80055c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d1ee      	bne.n	80055a6 <JPEG_Bits_To_SizeCodes+0x32>
  for (l = 0; l < 16UL; l++)
 80055c8:	69fb      	ldr	r3, [r7, #28]
 80055ca:	3301      	adds	r3, #1
 80055cc:	61fb      	str	r3, [r7, #28]
 80055ce:	69fb      	ldr	r3, [r7, #28]
 80055d0:	2b0f      	cmp	r3, #15
 80055d2:	d9db      	bls.n	800558c <JPEG_Bits_To_SizeCodes+0x18>
    }
  }
  Huffsize[p] = 0;
 80055d4:	68ba      	ldr	r2, [r7, #8]
 80055d6:	6a3b      	ldr	r3, [r7, #32]
 80055d8:	4413      	add	r3, r2
 80055da:	2200      	movs	r2, #0
 80055dc:	701a      	strb	r2, [r3, #0]
  *LastK = p;
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	6a3a      	ldr	r2, [r7, #32]
 80055e2:	601a      	str	r2, [r3, #0]

  /* Figure C.2: Generation of table of Huffman codes */
  code = 0;
 80055e4:	2300      	movs	r3, #0
 80055e6:	61bb      	str	r3, [r7, #24]
  si = Huffsize[0];
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	781b      	ldrb	r3, [r3, #0]
 80055ec:	617b      	str	r3, [r7, #20]
  p = 0;
 80055ee:	2300      	movs	r3, #0
 80055f0:	623b      	str	r3, [r7, #32]
  while (Huffsize[p] != 0U)
 80055f2:	e027      	b.n	8005644 <JPEG_Bits_To_SizeCodes+0xd0>
  {
    while (((uint32_t) Huffsize[p]) == si)
    {
      Huffcode[p] = code;
 80055f4:	6a3b      	ldr	r3, [r7, #32]
 80055f6:	009b      	lsls	r3, r3, #2
 80055f8:	687a      	ldr	r2, [r7, #4]
 80055fa:	4413      	add	r3, r2
 80055fc:	69ba      	ldr	r2, [r7, #24]
 80055fe:	601a      	str	r2, [r3, #0]
      p++;
 8005600:	6a3b      	ldr	r3, [r7, #32]
 8005602:	3301      	adds	r3, #1
 8005604:	623b      	str	r3, [r7, #32]
      code++;
 8005606:	69bb      	ldr	r3, [r7, #24]
 8005608:	3301      	adds	r3, #1
 800560a:	61bb      	str	r3, [r7, #24]
    while (((uint32_t) Huffsize[p]) == si)
 800560c:	68ba      	ldr	r2, [r7, #8]
 800560e:	6a3b      	ldr	r3, [r7, #32]
 8005610:	4413      	add	r3, r2
 8005612:	781b      	ldrb	r3, [r3, #0]
 8005614:	461a      	mov	r2, r3
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	4293      	cmp	r3, r2
 800561a:	d0eb      	beq.n	80055f4 <JPEG_Bits_To_SizeCodes+0x80>
    }
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	2b1f      	cmp	r3, #31
 8005620:	d901      	bls.n	8005626 <JPEG_Bits_To_SizeCodes+0xb2>
    {
      return HAL_ERROR;
 8005622:	2301      	movs	r3, #1
 8005624:	e015      	b.n	8005652 <JPEG_Bits_To_SizeCodes+0xde>
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 8005626:	2201      	movs	r2, #1
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	fa02 f303 	lsl.w	r3, r2, r3
 800562e:	69ba      	ldr	r2, [r7, #24]
 8005630:	429a      	cmp	r2, r3
 8005632:	d301      	bcc.n	8005638 <JPEG_Bits_To_SizeCodes+0xc4>
    {
      return HAL_ERROR;
 8005634:	2301      	movs	r3, #1
 8005636:	e00c      	b.n	8005652 <JPEG_Bits_To_SizeCodes+0xde>
    }
    code <<= 1;
 8005638:	69bb      	ldr	r3, [r7, #24]
 800563a:	005b      	lsls	r3, r3, #1
 800563c:	61bb      	str	r3, [r7, #24]
    si++;
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	3301      	adds	r3, #1
 8005642:	617b      	str	r3, [r7, #20]
  while (Huffsize[p] != 0U)
 8005644:	68ba      	ldr	r2, [r7, #8]
 8005646:	6a3b      	ldr	r3, [r7, #32]
 8005648:	4413      	add	r3, r2
 800564a:	781b      	ldrb	r3, [r3, #0]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d1dd      	bne.n	800560c <JPEG_Bits_To_SizeCodes+0x98>
  }
  /* Return function status */
  return HAL_OK;
 8005650:	2300      	movs	r3, #0
}
 8005652:	4618      	mov	r0, r3
 8005654:	372c      	adds	r7, #44	; 0x2c
 8005656:	46bd      	mov	sp, r7
 8005658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565c:	4770      	bx	lr

0800565e <JPEG_ACHuff_BitsVals_To_SizeCodes>:
  * @param  AC_SizeCodesTable pointer to AC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_ACHuff_BitsVals_To_SizeCodes(JPEG_ACHuffTableTypeDef *AC_BitsValsTable,
                                                           JPEG_AC_HuffCodeTableTypeDef *AC_SizeCodesTable)
{
 800565e:	b580      	push	{r7, lr}
 8005660:	f5ad 6da5 	sub.w	sp, sp, #1320	; 0x528
 8005664:	af00      	add	r7, sp, #0
 8005666:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 800566a:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 800566e:	6018      	str	r0, [r3, #0]
 8005670:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8005674:	f5a3 63a5 	sub.w	r3, r3, #1320	; 0x528
 8005678:	6019      	str	r1, [r3, #0]
  uint32_t huffcode[257];
  uint32_t k;
  uint32_t l, lsb, msb;
  uint32_t lastK;

  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 800567a:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 800567e:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8005682:	6818      	ldr	r0, [r3, #0]
 8005684:	f107 0308 	add.w	r3, r7, #8
 8005688:	f107 020c 	add.w	r2, r7, #12
 800568c:	f507 6182 	add.w	r1, r7, #1040	; 0x410
 8005690:	f7ff ff70 	bl	8005574 <JPEG_Bits_To_SizeCodes>
 8005694:	4603      	mov	r3, r0
 8005696:	f887 351f 	strb.w	r3, [r7, #1311]	; 0x51f
  if (error != HAL_OK)
 800569a:	f897 351f 	ldrb.w	r3, [r7, #1311]	; 0x51f
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d002      	beq.n	80056a8 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 80056a2:	f897 351f 	ldrb.w	r3, [r7, #1311]	; 0x51f
 80056a6:	e075      	b.n	8005794 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
  }

  /* Figure C.3: Ordering procedure for encoding procedure code tables */
  k = 0;
 80056a8:	2300      	movs	r3, #0
 80056aa:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524

  while (k < lastK)
 80056ae:	e067      	b.n	8005780 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x122>
  {
    l = AC_BitsValsTable->HuffVal[k];
 80056b0:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 80056b4:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 80056be:	4413      	add	r3, r2
 80056c0:	3310      	adds	r3, #16
 80056c2:	781b      	ldrb	r3, [r3, #0]
 80056c4:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
    if (l == 0UL)
 80056c8:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d103      	bne.n	80056d8 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x7a>
    {
      l = 160; /*l = 0x00 EOB code*/
 80056d0:	23a0      	movs	r3, #160	; 0xa0
 80056d2:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
 80056d6:	e021      	b.n	800571c <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 80056d8:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 80056dc:	2bf0      	cmp	r3, #240	; 0xf0
 80056de:	d103      	bne.n	80056e8 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x8a>
    {
      l = 161;
 80056e0:	23a1      	movs	r3, #161	; 0xa1
 80056e2:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
 80056e6:	e019      	b.n	800571c <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else
    {
      msb = (l & 0xF0UL) >> 4;
 80056e8:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 80056ec:	091b      	lsrs	r3, r3, #4
 80056ee:	f003 030f 	and.w	r3, r3, #15
 80056f2:	f8c7 3518 	str.w	r3, [r7, #1304]	; 0x518
      lsb = (l & 0x0FUL);
 80056f6:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 80056fa:	f003 030f 	and.w	r3, r3, #15
 80056fe:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
      l = (msb * 10UL) + lsb - 1UL;
 8005702:	f8d7 2518 	ldr.w	r2, [r7, #1304]	; 0x518
 8005706:	4613      	mov	r3, r2
 8005708:	009b      	lsls	r3, r3, #2
 800570a:	4413      	add	r3, r2
 800570c:	005b      	lsls	r3, r3, #1
 800570e:	461a      	mov	r2, r3
 8005710:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8005714:	4413      	add	r3, r2
 8005716:	3b01      	subs	r3, #1
 8005718:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
    }
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 800571c:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 8005720:	2ba1      	cmp	r3, #161	; 0xa1
 8005722:	d901      	bls.n	8005728 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xca>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 8005724:	2301      	movs	r3, #1
 8005726:	e035      	b.n	8005794 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
    }
    else
    {
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8005728:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 800572c:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 8005730:	f8d7 2524 	ldr.w	r2, [r7, #1316]	; 0x524
 8005734:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005738:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 800573c:	f5a3 63a5 	sub.w	r3, r3, #1320	; 0x528
 8005740:	6819      	ldr	r1, [r3, #0]
 8005742:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 8005746:	3328      	adds	r3, #40	; 0x28
 8005748:	009b      	lsls	r3, r3, #2
 800574a:	440b      	add	r3, r1
 800574c:	605a      	str	r2, [r3, #4]
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 800574e:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8005752:	f5a3 728c 	sub.w	r2, r3, #280	; 0x118
 8005756:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 800575a:	4413      	add	r3, r2
 800575c:	781b      	ldrb	r3, [r3, #0]
 800575e:	3b01      	subs	r3, #1
 8005760:	b2d9      	uxtb	r1, r3
 8005762:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8005766:	f5a3 63a5 	sub.w	r3, r3, #1320	; 0x528
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 8005770:	4413      	add	r3, r2
 8005772:	460a      	mov	r2, r1
 8005774:	701a      	strb	r2, [r3, #0]
      k++;
 8005776:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 800577a:	3301      	adds	r3, #1
 800577c:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
  while (k < lastK)
 8005780:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8005784:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f8d7 2524 	ldr.w	r2, [r7, #1316]	; 0x524
 800578e:	429a      	cmp	r2, r3
 8005790:	d38e      	bcc.n	80056b0 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 8005792:	2300      	movs	r3, #0
}
 8005794:	4618      	mov	r0, r3
 8005796:	f507 67a5 	add.w	r7, r7, #1320	; 0x528
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}

0800579e <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 800579e:	b580      	push	{r7, lr}
 80057a0:	f5ad 6da4 	sub.w	sp, sp, #1312	; 0x520
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 80057aa:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 80057ae:	6018      	str	r0, [r3, #0]
 80057b0:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 80057b4:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 80057b8:	6019      	str	r1, [r3, #0]
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 80057ba:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 80057be:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 80057c2:	6818      	ldr	r0, [r3, #0]
 80057c4:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 80057c8:	f107 0208 	add.w	r2, r7, #8
 80057cc:	f207 410c 	addw	r1, r7, #1036	; 0x40c
 80057d0:	f7ff fed0 	bl	8005574 <JPEG_Bits_To_SizeCodes>
 80057d4:	4603      	mov	r3, r0
 80057d6:	f887 351b 	strb.w	r3, [r7, #1307]	; 0x51b
  if (error != HAL_OK)
 80057da:	f897 351b 	ldrb.w	r3, [r7, #1307]	; 0x51b
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d002      	beq.n	80057e8 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 80057e2:	f897 351b 	ldrb.w	r3, [r7, #1307]	; 0x51b
 80057e6:	e048      	b.n	800587a <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;
 80057e8:	2300      	movs	r3, #0
 80057ea:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c

  while (k < lastK)
 80057ee:	e03d      	b.n	800586c <JPEG_DCHuff_BitsVals_To_SizeCodes+0xce>
  {
    l = DC_BitsValsTable->HuffVal[k];
 80057f0:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 80057f4:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 80057f8:	681a      	ldr	r2, [r3, #0]
 80057fa:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 80057fe:	4413      	add	r3, r2
 8005800:	3310      	adds	r3, #16
 8005802:	781b      	ldrb	r3, [r3, #0]
 8005804:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 8005808:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 800580c:	2b0b      	cmp	r3, #11
 800580e:	d901      	bls.n	8005814 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x76>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 8005810:	2301      	movs	r3, #1
 8005812:	e032      	b.n	800587a <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
    }
    else
    {
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8005814:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8005818:	f5a3 63a3 	sub.w	r3, r3, #1304	; 0x518
 800581c:	f8d7 251c 	ldr.w	r2, [r7, #1308]	; 0x51c
 8005820:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005824:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8005828:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 800582c:	6819      	ldr	r1, [r3, #0]
 800582e:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8005832:	3302      	adds	r3, #2
 8005834:	009b      	lsls	r3, r3, #2
 8005836:	440b      	add	r3, r1
 8005838:	605a      	str	r2, [r3, #4]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 800583a:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 800583e:	f5a3 728a 	sub.w	r2, r3, #276	; 0x114
 8005842:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 8005846:	4413      	add	r3, r2
 8005848:	781b      	ldrb	r3, [r3, #0]
 800584a:	3b01      	subs	r3, #1
 800584c:	b2d9      	uxtb	r1, r3
 800584e:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8005852:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 8005856:	681a      	ldr	r2, [r3, #0]
 8005858:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 800585c:	4413      	add	r3, r2
 800585e:	460a      	mov	r2, r1
 8005860:	701a      	strb	r2, [r3, #0]
      k++;
 8005862:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 8005866:	3301      	adds	r3, #1
 8005868:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c
  while (k < lastK)
 800586c:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 8005870:	f8d7 251c 	ldr.w	r2, [r7, #1308]	; 0x51c
 8005874:	429a      	cmp	r2, r3
 8005876:	d3bb      	bcc.n	80057f0 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 8005878:	2300      	movs	r3, #0
}
 800587a:	4618      	mov	r0, r3
 800587c:	f507 67a4 	add.w	r7, r7, #1312	; 0x520
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}

08005884 <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b09a      	sub	sp, #104	; 0x68
 8005888:	af00      	add	r7, sp, #0
 800588a:	60f8      	str	r0, [r7, #12]
 800588c:	60b9      	str	r1, [r7, #8]
 800588e:	607a      	str	r2, [r7, #4]
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f503 63f8 	add.w	r3, r3, #1984	; 0x7c0
 8005898:	687a      	ldr	r2, [r7, #4]
 800589a:	429a      	cmp	r2, r3
 800589c:	d106      	bne.n	80058ac <JPEG_Set_HuffDC_Mem+0x28>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f503 63f8 	add.w	r3, r3, #1984	; 0x7c0
 80058a6:	3318      	adds	r3, #24
 80058a8:	663b      	str	r3, [r7, #96]	; 0x60
 80058aa:	e00f      	b.n	80058cc <JPEG_Set_HuffDC_Mem+0x48>
  }
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f503 63fc 	add.w	r3, r3, #2016	; 0x7e0
 80058b4:	687a      	ldr	r2, [r7, #4]
 80058b6:	429a      	cmp	r2, r3
 80058b8:	d106      	bne.n	80058c8 <JPEG_Set_HuffDC_Mem+0x44>
  {
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f503 63fc 	add.w	r3, r3, #2016	; 0x7e0
 80058c2:	3318      	adds	r3, #24
 80058c4:	663b      	str	r3, [r7, #96]	; 0x60
 80058c6:	e001      	b.n	80058cc <JPEG_Set_HuffDC_Mem+0x48>
  }
  else
  {
    return HAL_ERROR;
 80058c8:	2301      	movs	r3, #1
 80058ca:	e059      	b.n	8005980 <JPEG_Set_HuffDC_Mem+0xfc>
  }

  if (HuffTableDC != NULL)
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d055      	beq.n	800597e <JPEG_Set_HuffDC_Mem+0xfa>
  {
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 80058d2:	f107 0314 	add.w	r3, r7, #20
 80058d6:	4619      	mov	r1, r3
 80058d8:	68b8      	ldr	r0, [r7, #8]
 80058da:	f7ff ff60 	bl	800579e <JPEG_DCHuff_BitsVals_To_SizeCodes>
 80058de:	4603      	mov	r3, r0
 80058e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if (error != HAL_OK)
 80058e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d002      	beq.n	80058f2 <JPEG_Set_HuffDC_Mem+0x6e>
    {
      return  error;
 80058ec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80058f0:	e046      	b.n	8005980 <JPEG_Set_HuffDC_Mem+0xfc>
    }
    addressDef = address;
 80058f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80058f4:	65bb      	str	r3, [r7, #88]	; 0x58
    *addressDef = 0x0FFF0FFF;
 80058f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80058f8:	f06f 22f0 	mvn.w	r2, #4026593280	; 0xf000f000
 80058fc:	601a      	str	r2, [r3, #0]
    addressDef++;
 80058fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005900:	3304      	adds	r3, #4
 8005902:	65bb      	str	r3, [r7, #88]	; 0x58
    *addressDef = 0x0FFF0FFF;
 8005904:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005906:	f06f 22f0 	mvn.w	r2, #4026593280	; 0xf000f000
 800590a:	601a      	str	r2, [r3, #0]

    i = JPEG_DC_HUFF_TABLE_SIZE;
 800590c:	230c      	movs	r3, #12
 800590e:	667b      	str	r3, [r7, #100]	; 0x64
    while (i > 1UL)
 8005910:	e032      	b.n	8005978 <JPEG_Set_HuffDC_Mem+0xf4>
    {
      i--;
 8005912:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005914:	3b01      	subs	r3, #1
 8005916:	667b      	str	r3, [r7, #100]	; 0x64
      address --;
 8005918:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800591a:	3b04      	subs	r3, #4
 800591c:	663b      	str	r3, [r7, #96]	; 0x60
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800591e:	f107 0214 	add.w	r2, r7, #20
 8005922:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005924:	4413      	add	r3, r2
 8005926:	781b      	ldrb	r3, [r3, #0]
 8005928:	021b      	lsls	r3, r3, #8
 800592a:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800592e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005930:	3302      	adds	r3, #2
 8005932:	009b      	lsls	r3, r3, #2
 8005934:	3368      	adds	r3, #104	; 0x68
 8005936:	443b      	add	r3, r7
 8005938:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800593c:	b2db      	uxtb	r3, r3
 800593e:	4313      	orrs	r3, r2
 8005940:	657b      	str	r3, [r7, #84]	; 0x54
                                                                                   0xFFUL);
      i--;
 8005942:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005944:	3b01      	subs	r3, #1
 8005946:	667b      	str	r3, [r7, #100]	; 0x64
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8005948:	f107 0214 	add.w	r2, r7, #20
 800594c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800594e:	4413      	add	r3, r2
 8005950:	781b      	ldrb	r3, [r3, #0]
 8005952:	021b      	lsls	r3, r3, #8
 8005954:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8005958:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800595a:	3302      	adds	r3, #2
 800595c:	009b      	lsls	r3, r3, #2
 800595e:	3368      	adds	r3, #104	; 0x68
 8005960:	443b      	add	r3, r7
 8005962:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8005966:	b2db      	uxtb	r3, r3
 8005968:	4313      	orrs	r3, r2
 800596a:	653b      	str	r3, [r7, #80]	; 0x50
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 800596c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800596e:	041a      	lsls	r2, r3, #16
 8005970:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005972:	431a      	orrs	r2, r3
 8005974:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005976:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 8005978:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800597a:	2b01      	cmp	r3, #1
 800597c:	d8c9      	bhi.n	8005912 <JPEG_Set_HuffDC_Mem+0x8e>
    }
  }

  /* Return function status */
  return HAL_OK;
 800597e:	2300      	movs	r3, #0
}
 8005980:	4618      	mov	r0, r3
 8005982:	3768      	adds	r7, #104	; 0x68
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}

08005988 <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	f5ad 7d56 	sub.w	sp, sp, #856	; 0x358
 800598e:	af00      	add	r7, sp, #0
 8005990:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8005994:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8005998:	6018      	str	r0, [r3, #0]
 800599a:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800599e:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 80059a2:	6019      	str	r1, [r3, #0]
 80059a4:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80059a8:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 80059ac:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 80059ae:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80059b2:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059be:	f507 7256 	add.w	r2, r7, #856	; 0x358
 80059c2:	f5a2 7255 	sub.w	r2, r2, #852	; 0x354
 80059c6:	6812      	ldr	r2, [r2, #0]
 80059c8:	429a      	cmp	r2, r3
 80059ca:	d10c      	bne.n	80059e6 <JPEG_Set_HuffAC_Mem+0x5e>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 80059cc:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80059d0:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059dc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80059e0:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 80059e4:	e01d      	b.n	8005a22 <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 80059e6:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80059ea:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
 80059f6:	f507 7256 	add.w	r2, r7, #856	; 0x358
 80059fa:	f5a2 7255 	sub.w	r2, r2, #852	; 0x354
 80059fe:	6812      	ldr	r2, [r2, #0]
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d10c      	bne.n	8005a1e <JPEG_Set_HuffAC_Mem+0x96>
  {
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8005a04:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8005a08:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
 8005a14:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8005a18:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 8005a1c:	e001      	b.n	8005a22 <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else
  {
    return HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e0a8      	b.n	8005b74 <JPEG_Set_HuffAC_Mem+0x1ec>
  }

  if (HuffTableAC != NULL)
 8005a22:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8005a26:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	f000 80a0 	beq.w	8005b72 <JPEG_Set_HuffAC_Mem+0x1ea>
  {
    error = JPEG_ACHuff_BitsVals_To_SizeCodes(HuffTableAC, &acSizeCodesTable);
 8005a32:	f107 0214 	add.w	r2, r7, #20
 8005a36:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8005a3a:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 8005a3e:	4611      	mov	r1, r2
 8005a40:	6818      	ldr	r0, [r3, #0]
 8005a42:	f7ff fe0c 	bl	800565e <JPEG_ACHuff_BitsVals_To_SizeCodes>
 8005a46:	4603      	mov	r3, r0
 8005a48:	f887 334b 	strb.w	r3, [r7, #843]	; 0x34b
    if (error != HAL_OK)
 8005a4c:	f897 334b 	ldrb.w	r3, [r7, #843]	; 0x34b
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d002      	beq.n	8005a5a <JPEG_Set_HuffAC_Mem+0xd2>
    {
      return  error;
 8005a54:	f897 334b 	ldrb.w	r3, [r7, #843]	; 0x34b
 8005a58:	e08c      	b.n	8005b74 <JPEG_Set_HuffAC_Mem+0x1ec>
    }
    /* Default values settings: 162:167 FFFh , 168:175 FD0h_FD7h */
    /* Locations 162:175 of each AC table contain information used internally by the core */

    addressDef = address;
 8005a5a:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8005a5e:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    for (i = 0; i < 3UL; i++)
 8005a62:	2300      	movs	r3, #0
 8005a64:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 8005a68:	e00e      	b.n	8005a88 <JPEG_Set_HuffAC_Mem+0x100>
    {
      *addressDef = 0x0FFF0FFF;
 8005a6a:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8005a6e:	f06f 22f0 	mvn.w	r2, #4026593280	; 0xf000f000
 8005a72:	601a      	str	r2, [r3, #0]
      addressDef++;
 8005a74:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8005a78:	3304      	adds	r3, #4
 8005a7a:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    for (i = 0; i < 3UL; i++)
 8005a7e:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8005a82:	3301      	adds	r3, #1
 8005a84:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 8005a88:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8005a8c:	2b02      	cmp	r3, #2
 8005a8e:	d9ec      	bls.n	8005a6a <JPEG_Set_HuffAC_Mem+0xe2>
    }
    *addressDef = 0x0FD10FD0;
 8005a90:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8005a94:	4a3a      	ldr	r2, [pc, #232]	; (8005b80 <JPEG_Set_HuffAC_Mem+0x1f8>)
 8005a96:	601a      	str	r2, [r3, #0]
    addressDef++;
 8005a98:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8005a9c:	3304      	adds	r3, #4
 8005a9e:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    *addressDef = 0x0FD30FD2;
 8005aa2:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8005aa6:	4a37      	ldr	r2, [pc, #220]	; (8005b84 <JPEG_Set_HuffAC_Mem+0x1fc>)
 8005aa8:	601a      	str	r2, [r3, #0]
    addressDef++;
 8005aaa:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8005aae:	3304      	adds	r3, #4
 8005ab0:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    *addressDef = 0x0FD50FD4;
 8005ab4:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8005ab8:	4a33      	ldr	r2, [pc, #204]	; (8005b88 <JPEG_Set_HuffAC_Mem+0x200>)
 8005aba:	601a      	str	r2, [r3, #0]
    addressDef++;
 8005abc:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8005ac0:	3304      	adds	r3, #4
 8005ac2:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    *addressDef = 0x0FD70FD6;
 8005ac6:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8005aca:	4a30      	ldr	r2, [pc, #192]	; (8005b8c <JPEG_Set_HuffAC_Mem+0x204>)
 8005acc:	601a      	str	r2, [r3, #0]
    /* end of Locations 162:175  */


    i = JPEG_AC_HUFF_TABLE_SIZE;
 8005ace:	23a2      	movs	r3, #162	; 0xa2
 8005ad0:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
    while (i > 1UL)
 8005ad4:	e049      	b.n	8005b6a <JPEG_Set_HuffAC_Mem+0x1e2>
    {
      i--;
 8005ad6:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8005ada:	3b01      	subs	r3, #1
 8005adc:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
      address--;
 8005ae0:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8005ae4:	3b04      	subs	r3, #4
 8005ae6:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8005aea:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8005aee:	f5a3 7251 	sub.w	r2, r3, #836	; 0x344
 8005af2:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8005af6:	4413      	add	r3, r2
 8005af8:	781b      	ldrb	r3, [r3, #0]
 8005afa:	021b      	lsls	r3, r3, #8
 8005afc:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8005b00:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8005b04:	f5a3 7151 	sub.w	r1, r3, #836	; 0x344
 8005b08:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8005b0c:	3328      	adds	r3, #40	; 0x28
 8005b0e:	009b      	lsls	r3, r3, #2
 8005b10:	440b      	add	r3, r1
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	b2db      	uxtb	r3, r3
 8005b16:	4313      	orrs	r3, r2
 8005b18:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
                                                                                   0xFFUL);
      i--;
 8005b1c:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8005b20:	3b01      	subs	r3, #1
 8005b22:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8005b26:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8005b2a:	f5a3 7251 	sub.w	r2, r3, #836	; 0x344
 8005b2e:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8005b32:	4413      	add	r3, r2
 8005b34:	781b      	ldrb	r3, [r3, #0]
 8005b36:	021b      	lsls	r3, r3, #8
 8005b38:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8005b3c:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8005b40:	f5a3 7151 	sub.w	r1, r3, #836	; 0x344
 8005b44:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8005b48:	3328      	adds	r3, #40	; 0x28
 8005b4a:	009b      	lsls	r3, r3, #2
 8005b4c:	440b      	add	r3, r1
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	b2db      	uxtb	r3, r3
 8005b52:	4313      	orrs	r3, r2
 8005b54:	f8c7 3340 	str.w	r3, [r7, #832]	; 0x340
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 8005b58:	f8d7 3344 	ldr.w	r3, [r7, #836]	; 0x344
 8005b5c:	041a      	lsls	r2, r3, #16
 8005b5e:	f8d7 3340 	ldr.w	r3, [r7, #832]	; 0x340
 8005b62:	431a      	orrs	r2, r3
 8005b64:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8005b68:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 8005b6a:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8005b6e:	2b01      	cmp	r3, #1
 8005b70:	d8b1      	bhi.n	8005ad6 <JPEG_Set_HuffAC_Mem+0x14e>
    }
  }

  /* Return function status */
  return HAL_OK;
 8005b72:	2300      	movs	r3, #0
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	f507 7756 	add.w	r7, r7, #856	; 0x358
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}
 8005b7e:	bf00      	nop
 8005b80:	0fd10fd0 	.word	0x0fd10fd0
 8005b84:	0fd30fd2 	.word	0x0fd30fd2
 8005b88:	0fd50fd4 	.word	0x0fd50fd4
 8005b8c:	0fd70fd6 	.word	0x0fd70fd6

08005b90 <JPEG_Set_HuffEnc_Mem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static HAL_StatusTypeDef JPEG_Set_HuffEnc_Mem(JPEG_HandleTypeDef *hjpeg)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b084      	sub	sp, #16
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef error;

  JPEG_Set_Huff_DHTMem(hjpeg);
 8005b98:	6878      	ldr	r0, [r7, #4]
 8005b9a:	f000 f84d 	bl	8005c38 <JPEG_Set_Huff_DHTMem>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC0));
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	491f      	ldr	r1, [pc, #124]	; (8005c28 <JPEG_Set_HuffEnc_Mem+0x98>)
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f7ff feec 	bl	8005988 <JPEG_Set_HuffAC_Mem>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8005bb4:	7bfb      	ldrb	r3, [r7, #15]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d001      	beq.n	8005bbe <JPEG_Set_HuffEnc_Mem+0x2e>
  {
    return  error;
 8005bba:	7bfb      	ldrb	r3, [r7, #15]
 8005bbc:	e030      	b.n	8005c20 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC1));
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 8005bc6:	461a      	mov	r2, r3
 8005bc8:	4918      	ldr	r1, [pc, #96]	; (8005c2c <JPEG_Set_HuffEnc_Mem+0x9c>)
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f7ff fedc 	bl	8005988 <JPEG_Set_HuffAC_Mem>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8005bd4:	7bfb      	ldrb	r3, [r7, #15]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d001      	beq.n	8005bde <JPEG_Set_HuffEnc_Mem+0x4e>
  {
    return  error;
 8005bda:	7bfb      	ldrb	r3, [r7, #15]
 8005bdc:	e020      	b.n	8005c20 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC0);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f503 63f8 	add.w	r3, r3, #1984	; 0x7c0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 8005be6:	461a      	mov	r2, r3
 8005be8:	4911      	ldr	r1, [pc, #68]	; (8005c30 <JPEG_Set_HuffEnc_Mem+0xa0>)
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f7ff fe4a 	bl	8005884 <JPEG_Set_HuffDC_Mem>
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8005bf4:	7bfb      	ldrb	r3, [r7, #15]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d001      	beq.n	8005bfe <JPEG_Set_HuffEnc_Mem+0x6e>
  {
    return  error;
 8005bfa:	7bfb      	ldrb	r3, [r7, #15]
 8005bfc:	e010      	b.n	8005c20 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC1);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f503 63fc 	add.w	r3, r3, #2016	; 0x7e0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 8005c06:	461a      	mov	r2, r3
 8005c08:	490a      	ldr	r1, [pc, #40]	; (8005c34 <JPEG_Set_HuffEnc_Mem+0xa4>)
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f7ff fe3a 	bl	8005884 <JPEG_Set_HuffDC_Mem>
 8005c10:	4603      	mov	r3, r0
 8005c12:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8005c14:	7bfb      	ldrb	r3, [r7, #15]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d001      	beq.n	8005c1e <JPEG_Set_HuffEnc_Mem+0x8e>
  {
    return  error;
 8005c1a:	7bfb      	ldrb	r3, [r7, #15]
 8005c1c:	e000      	b.n	8005c20 <JPEG_Set_HuffEnc_Mem+0x90>
  }
  /* Return function status */
  return HAL_OK;
 8005c1e:	2300      	movs	r3, #0
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3710      	adds	r7, #16
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}
 8005c28:	0801dcf0 	.word	0x0801dcf0
 8005c2c:	0801dda4 	.word	0x0801dda4
 8005c30:	0801dcb8 	.word	0x0801dcb8
 8005c34:	0801dcd4 	.word	0x0801dcd4

08005c38 <JPEG_Set_Huff_DHTMem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Set_Huff_DHTMem(JPEG_HandleTypeDef *hjpeg)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b08b      	sub	sp, #44	; 0x2c
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  JPEG_ACHuffTableTypeDef *HuffTableAC0 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable;
 8005c40:	4b80      	ldr	r3, [pc, #512]	; (8005e44 <JPEG_Set_Huff_DHTMem+0x20c>)
 8005c42:	61fb      	str	r3, [r7, #28]
  JPEG_ACHuffTableTypeDef *HuffTableAC1 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable;
 8005c44:	4b80      	ldr	r3, [pc, #512]	; (8005e48 <JPEG_Set_Huff_DHTMem+0x210>)
 8005c46:	61bb      	str	r3, [r7, #24]
  JPEG_DCHuffTableTypeDef *HuffTableDC0 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable;
 8005c48:	4b80      	ldr	r3, [pc, #512]	; (8005e4c <JPEG_Set_Huff_DHTMem+0x214>)
 8005c4a:	617b      	str	r3, [r7, #20]
  JPEG_DCHuffTableTypeDef *HuffTableDC1 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable;
 8005c4c:	4b80      	ldr	r3, [pc, #512]	; (8005e50 <JPEG_Set_Huff_DHTMem+0x218>)
 8005c4e:	613b      	str	r3, [r7, #16]
  uint32_t value, index;
  __IO uint32_t *address;

  /* DC0 Huffman Table : BITS*/
  /* DC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address to DHTMEM + 3*/
  address = (hjpeg->Instance->DHTMEM + 3);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8005c58:	330c      	adds	r3, #12
 8005c5a:	623b      	str	r3, [r7, #32]
  index = 16;
 8005c5c:	2310      	movs	r3, #16
 8005c5e:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8005c60:	e01d      	b.n	8005c9e <JPEG_Set_Huff_DHTMem+0x66>
  {

    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8005c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c64:	3b01      	subs	r3, #1
 8005c66:	697a      	ldr	r2, [r7, #20]
 8005c68:	5cd3      	ldrb	r3, [r2, r3]
 8005c6a:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8005c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c6e:	3b02      	subs	r3, #2
 8005c70:	6979      	ldr	r1, [r7, #20]
 8005c72:	5ccb      	ldrb	r3, [r1, r3]
 8005c74:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8005c76:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8005c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c7a:	3b03      	subs	r3, #3
 8005c7c:	6979      	ldr	r1, [r7, #20]
 8005c7e:	5ccb      	ldrb	r3, [r1, r3]
 8005c80:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8005c82:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->Bits[index - 4UL] & 0xFFUL);
 8005c84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c86:	3a04      	subs	r2, #4
 8005c88:	6979      	ldr	r1, [r7, #20]
 8005c8a:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8005c8c:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8005c8e:	6a3b      	ldr	r3, [r7, #32]
 8005c90:	601a      	str	r2, [r3, #0]
    address--;
 8005c92:	6a3b      	ldr	r3, [r7, #32]
 8005c94:	3b04      	subs	r3, #4
 8005c96:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8005c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c9a:	3b04      	subs	r3, #4
 8005c9c:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8005c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca0:	2b03      	cmp	r3, #3
 8005ca2:	d8de      	bhi.n	8005c62 <JPEG_Set_Huff_DHTMem+0x2a>

  }
  /* DC0 Huffman Table : Val*/
  /* DC0 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +4 to DHTMEM + 6 */
  address = (hjpeg->Instance->DHTMEM + 6);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8005cac:	3318      	adds	r3, #24
 8005cae:	623b      	str	r3, [r7, #32]
  index = 12;
 8005cb0:	230c      	movs	r3, #12
 8005cb2:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8005cb4:	e021      	b.n	8005cfa <JPEG_Set_Huff_DHTMem+0xc2>
  {
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8005cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb8:	3b01      	subs	r3, #1
 8005cba:	697a      	ldr	r2, [r7, #20]
 8005cbc:	4413      	add	r3, r2
 8005cbe:	7c1b      	ldrb	r3, [r3, #16]
 8005cc0:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8005cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc4:	3b02      	subs	r3, #2
 8005cc6:	6979      	ldr	r1, [r7, #20]
 8005cc8:	440b      	add	r3, r1
 8005cca:	7c1b      	ldrb	r3, [r3, #16]
 8005ccc:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8005cce:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8005cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd2:	3b03      	subs	r3, #3
 8005cd4:	6979      	ldr	r1, [r7, #20]
 8005cd6:	440b      	add	r3, r1
 8005cd8:	7c1b      	ldrb	r3, [r3, #16]
 8005cda:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8005cdc:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->HuffVal[index - 4UL] & 0xFFUL);
 8005cde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ce0:	3a04      	subs	r2, #4
 8005ce2:	6979      	ldr	r1, [r7, #20]
 8005ce4:	440a      	add	r2, r1
 8005ce6:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8005ce8:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8005cea:	6a3b      	ldr	r3, [r7, #32]
 8005cec:	601a      	str	r2, [r3, #0]
    address--;
 8005cee:	6a3b      	ldr	r3, [r7, #32]
 8005cf0:	3b04      	subs	r3, #4
 8005cf2:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8005cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf6:	3b04      	subs	r3, #4
 8005cf8:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8005cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfc:	2b03      	cmp	r3, #3
 8005cfe:	d8da      	bhi.n	8005cb6 <JPEG_Set_Huff_DHTMem+0x7e>
  }

  /* AC0 Huffman Table : BITS*/
  /* AC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 7 to DHTMEM + 10*/
  address = (hjpeg->Instance->DHTMEM + 10UL);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8005d08:	3328      	adds	r3, #40	; 0x28
 8005d0a:	623b      	str	r3, [r7, #32]
  index = 16;
 8005d0c:	2310      	movs	r3, #16
 8005d0e:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8005d10:	e01d      	b.n	8005d4e <JPEG_Set_Huff_DHTMem+0x116>
  {

    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8005d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d14:	3b01      	subs	r3, #1
 8005d16:	69fa      	ldr	r2, [r7, #28]
 8005d18:	5cd3      	ldrb	r3, [r2, r3]
 8005d1a:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8005d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d1e:	3b02      	subs	r3, #2
 8005d20:	69f9      	ldr	r1, [r7, #28]
 8005d22:	5ccb      	ldrb	r3, [r1, r3]
 8005d24:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8005d26:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8005d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d2a:	3b03      	subs	r3, #3
 8005d2c:	69f9      	ldr	r1, [r7, #28]
 8005d2e:	5ccb      	ldrb	r3, [r1, r3]
 8005d30:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8005d32:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->Bits[index - 4UL] & 0xFFUL);
 8005d34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d36:	3a04      	subs	r2, #4
 8005d38:	69f9      	ldr	r1, [r7, #28]
 8005d3a:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8005d3c:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8005d3e:	6a3b      	ldr	r3, [r7, #32]
 8005d40:	601a      	str	r2, [r3, #0]
    address--;
 8005d42:	6a3b      	ldr	r3, [r7, #32]
 8005d44:	3b04      	subs	r3, #4
 8005d46:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8005d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d4a:	3b04      	subs	r3, #4
 8005d4c:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8005d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d50:	2b03      	cmp	r3, #3
 8005d52:	d8de      	bhi.n	8005d12 <JPEG_Set_Huff_DHTMem+0xda>

  }
  /* AC0 Huffman Table : Val*/
  /* AC0 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 11 to DHTMEM + 51 */
  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 51) belong to AC0 VALS table */
  address = (hjpeg->Instance->DHTMEM + 51);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8005d5c:	33cc      	adds	r3, #204	; 0xcc
 8005d5e:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 8005d60:	6a3b      	ldr	r3, [r7, #32]
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	4b3b      	ldr	r3, [pc, #236]	; (8005e54 <JPEG_Set_Huff_DHTMem+0x21c>)
 8005d66:	4013      	ands	r3, r2
 8005d68:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 8005d6a:	69fb      	ldr	r3, [r7, #28]
 8005d6c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8005d70:	021a      	lsls	r2, r3, #8
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	4313      	orrs	r3, r2
 8005d76:	69fa      	ldr	r2, [r7, #28]
 8005d78:	f892 20b0 	ldrb.w	r2, [r2, #176]	; 0xb0
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	60fb      	str	r3, [r7, #12]
  *address = value;
 8005d80:	6a3b      	ldr	r3, [r7, #32]
 8005d82:	68fa      	ldr	r2, [r7, #12]
 8005d84:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC0 huffman values */
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 8005d86:	6a3b      	ldr	r3, [r7, #32]
 8005d88:	3b04      	subs	r3, #4
 8005d8a:	623b      	str	r3, [r7, #32]
  index = 160;
 8005d8c:	23a0      	movs	r3, #160	; 0xa0
 8005d8e:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8005d90:	e021      	b.n	8005dd6 <JPEG_Set_Huff_DHTMem+0x19e>
  {
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8005d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d94:	3b01      	subs	r3, #1
 8005d96:	69fa      	ldr	r2, [r7, #28]
 8005d98:	4413      	add	r3, r2
 8005d9a:	7c1b      	ldrb	r3, [r3, #16]
 8005d9c:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8005d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da0:	3b02      	subs	r3, #2
 8005da2:	69f9      	ldr	r1, [r7, #28]
 8005da4:	440b      	add	r3, r1
 8005da6:	7c1b      	ldrb	r3, [r3, #16]
 8005da8:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8005daa:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8005dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dae:	3b03      	subs	r3, #3
 8005db0:	69f9      	ldr	r1, [r7, #28]
 8005db2:	440b      	add	r3, r1
 8005db4:	7c1b      	ldrb	r3, [r3, #16]
 8005db6:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8005db8:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 8005dba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dbc:	3a04      	subs	r2, #4
 8005dbe:	69f9      	ldr	r1, [r7, #28]
 8005dc0:	440a      	add	r2, r1
 8005dc2:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8005dc4:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8005dc6:	6a3b      	ldr	r3, [r7, #32]
 8005dc8:	601a      	str	r2, [r3, #0]
    address--;
 8005dca:	6a3b      	ldr	r3, [r7, #32]
 8005dcc:	3b04      	subs	r3, #4
 8005dce:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8005dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd2:	3b04      	subs	r3, #4
 8005dd4:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8005dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd8:	2b03      	cmp	r3, #3
 8005dda:	d8da      	bhi.n	8005d92 <JPEG_Set_Huff_DHTMem+0x15a>
  }

  /* DC1 Huffman Table : BITS*/
  /* DC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM + 51 base address to DHTMEM + 55*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 51) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 51);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8005de4:	33cc      	adds	r3, #204	; 0xcc
 8005de6:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 8005de8:	6a3b      	ldr	r3, [r7, #32]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	b29b      	uxth	r3, r3
 8005dee:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	785b      	ldrb	r3, [r3, #1]
 8005df4:	061a      	lsls	r2, r3, #24
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	431a      	orrs	r2, r3
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	781b      	ldrb	r3, [r3, #0]
 8005dfe:	041b      	lsls	r3, r3, #16
 8005e00:	4313      	orrs	r3, r2
 8005e02:	60fb      	str	r3, [r7, #12]
  *address = value;
 8005e04:	6a3b      	ldr	r3, [r7, #32]
 8005e06:	68fa      	ldr	r2, [r7, #12]
 8005e08:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 55) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 55);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8005e12:	33dc      	adds	r3, #220	; 0xdc
 8005e14:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 8005e16:	6a3b      	ldr	r3, [r7, #32]
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	4b0e      	ldr	r3, [pc, #56]	; (8005e54 <JPEG_Set_Huff_DHTMem+0x21c>)
 8005e1c:	4013      	ands	r3, r2
 8005e1e:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->Bits[14] & 0xFFUL);
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	7bdb      	ldrb	r3, [r3, #15]
 8005e24:	021a      	lsls	r2, r3, #8
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	693a      	ldr	r2, [r7, #16]
 8005e2c:	7b92      	ldrb	r2, [r2, #14]
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	60fb      	str	r3, [r7, #12]
  *address = value;
 8005e32:	6a3b      	ldr	r3, [r7, #32]
 8005e34:	68fa      	ldr	r2, [r7, #12]
 8005e36:	601a      	str	r2, [r3, #0]

  /*continue setting 12 DC1 huffman Bits from DHTMEM + 54 down to DHTMEM + 52*/
  address--;
 8005e38:	6a3b      	ldr	r3, [r7, #32]
 8005e3a:	3b04      	subs	r3, #4
 8005e3c:	623b      	str	r3, [r7, #32]
  index = 12;
 8005e3e:	230c      	movs	r3, #12
 8005e40:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8005e42:	e027      	b.n	8005e94 <JPEG_Set_Huff_DHTMem+0x25c>
 8005e44:	0801dcf0 	.word	0x0801dcf0
 8005e48:	0801dda4 	.word	0x0801dda4
 8005e4c:	0801dcb8 	.word	0x0801dcb8
 8005e50:	0801dcd4 	.word	0x0801dcd4
 8005e54:	ffff0000 	.word	0xffff0000
  {

    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8005e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e5a:	3301      	adds	r3, #1
 8005e5c:	693a      	ldr	r2, [r7, #16]
 8005e5e:	5cd3      	ldrb	r3, [r2, r3]
 8005e60:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 8005e62:	6939      	ldr	r1, [r7, #16]
 8005e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e66:	440b      	add	r3, r1
 8005e68:	781b      	ldrb	r3, [r3, #0]
 8005e6a:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8005e6c:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8005e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e70:	3b01      	subs	r3, #1
 8005e72:	6939      	ldr	r1, [r7, #16]
 8005e74:	5ccb      	ldrb	r3, [r1, r3]
 8005e76:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 8005e78:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->Bits[index - 2UL] & 0xFFUL);
 8005e7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e7c:	3a02      	subs	r2, #2
 8005e7e:	6939      	ldr	r1, [r7, #16]
 8005e80:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8005e82:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8005e84:	6a3b      	ldr	r3, [r7, #32]
 8005e86:	601a      	str	r2, [r3, #0]
    address--;
 8005e88:	6a3b      	ldr	r3, [r7, #32]
 8005e8a:	3b04      	subs	r3, #4
 8005e8c:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8005e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e90:	3b04      	subs	r3, #4
 8005e92:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8005e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e96:	2b03      	cmp	r3, #3
 8005e98:	d8de      	bhi.n	8005e58 <JPEG_Set_Huff_DHTMem+0x220>

  }
  /* DC1 Huffman Table : Val*/
  /* DC1 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +55 to DHTMEM + 58 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 55) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 55);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8005ea2:	33dc      	adds	r3, #220	; 0xdc
 8005ea4:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 8005ea6:	6a3b      	ldr	r3, [r7, #32]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	b29b      	uxth	r3, r3
 8005eac:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	7c5b      	ldrb	r3, [r3, #17]
 8005eb2:	061a      	lsls	r2, r3, #24
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	431a      	orrs	r2, r3
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	7c1b      	ldrb	r3, [r3, #16]
 8005ebc:	041b      	lsls	r3, r3, #16
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 8005ec2:	6a3b      	ldr	r3, [r7, #32]
 8005ec4:	68fa      	ldr	r2, [r7, #12]
 8005ec6:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 58) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 58);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8005ed0:	33e8      	adds	r3, #232	; 0xe8
 8005ed2:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000UL;
 8005ed4:	6a3b      	ldr	r3, [r7, #32]
 8005ed6:	681a      	ldr	r2, [r3, #0]
 8005ed8:	4b6d      	ldr	r3, [pc, #436]	; (8006090 <JPEG_Set_Huff_DHTMem+0x458>)
 8005eda:	4013      	ands	r3, r2
 8005edc:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	7edb      	ldrb	r3, [r3, #27]
 8005ee2:	021a      	lsls	r2, r3, #8
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	693a      	ldr	r2, [r7, #16]
 8005eea:	7e92      	ldrb	r2, [r2, #26]
 8005eec:	4313      	orrs	r3, r2
 8005eee:	60fb      	str	r3, [r7, #12]
  *address = value;
 8005ef0:	6a3b      	ldr	r3, [r7, #32]
 8005ef2:	68fa      	ldr	r2, [r7, #12]
 8005ef4:	601a      	str	r2, [r3, #0]

  /*continue setting 8 DC1 huffman val from DHTMEM + 57 down to DHTMEM + 56*/
  address--;
 8005ef6:	6a3b      	ldr	r3, [r7, #32]
 8005ef8:	3b04      	subs	r3, #4
 8005efa:	623b      	str	r3, [r7, #32]
  index = 8;
 8005efc:	2308      	movs	r3, #8
 8005efe:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8005f00:	e021      	b.n	8005f46 <JPEG_Set_Huff_DHTMem+0x30e>
  {
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8005f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f04:	3301      	adds	r3, #1
 8005f06:	693a      	ldr	r2, [r7, #16]
 8005f08:	4413      	add	r3, r2
 8005f0a:	7c1b      	ldrb	r3, [r3, #16]
 8005f0c:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 8005f0e:	6939      	ldr	r1, [r7, #16]
 8005f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f12:	440b      	add	r3, r1
 8005f14:	3310      	adds	r3, #16
 8005f16:	781b      	ldrb	r3, [r3, #0]
 8005f18:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8005f1a:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8005f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f1e:	3b01      	subs	r3, #1
 8005f20:	6939      	ldr	r1, [r7, #16]
 8005f22:	440b      	add	r3, r1
 8005f24:	7c1b      	ldrb	r3, [r3, #16]
 8005f26:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 8005f28:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->HuffVal[index - 2UL] & 0xFFUL);
 8005f2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f2c:	3a02      	subs	r2, #2
 8005f2e:	6939      	ldr	r1, [r7, #16]
 8005f30:	440a      	add	r2, r1
 8005f32:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8005f34:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8005f36:	6a3b      	ldr	r3, [r7, #32]
 8005f38:	601a      	str	r2, [r3, #0]
    address--;
 8005f3a:	6a3b      	ldr	r3, [r7, #32]
 8005f3c:	3b04      	subs	r3, #4
 8005f3e:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8005f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f42:	3b04      	subs	r3, #4
 8005f44:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8005f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f48:	2b03      	cmp	r3, #3
 8005f4a:	d8da      	bhi.n	8005f02 <JPEG_Set_Huff_DHTMem+0x2ca>
  }

  /* AC1 Huffman Table : BITS*/
  /* AC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 58 to DHTMEM + 62*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 58) belong to AC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 58);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8005f54:	33e8      	adds	r3, #232	; 0xe8
 8005f56:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 8005f58:	6a3b      	ldr	r3, [r7, #32]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	b29b      	uxth	r3, r3
 8005f5e:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 8005f60:	69bb      	ldr	r3, [r7, #24]
 8005f62:	785b      	ldrb	r3, [r3, #1]
 8005f64:	061a      	lsls	r2, r3, #24
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	431a      	orrs	r2, r3
 8005f6a:	69bb      	ldr	r3, [r7, #24]
 8005f6c:	781b      	ldrb	r3, [r3, #0]
 8005f6e:	041b      	lsls	r3, r3, #16
 8005f70:	4313      	orrs	r3, r2
 8005f72:	60fb      	str	r3, [r7, #12]
  *address = value;
 8005f74:	6a3b      	ldr	r3, [r7, #32]
 8005f76:	68fa      	ldr	r2, [r7, #12]
 8005f78:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 62) belong to Bits Val table */
  address = (hjpeg->Instance->DHTMEM + 62);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8005f82:	33f8      	adds	r3, #248	; 0xf8
 8005f84:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 8005f86:	6a3b      	ldr	r3, [r7, #32]
 8005f88:	681a      	ldr	r2, [r3, #0]
 8005f8a:	4b41      	ldr	r3, [pc, #260]	; (8006090 <JPEG_Set_Huff_DHTMem+0x458>)
 8005f8c:	4013      	ands	r3, r2
 8005f8e:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 8005f90:	69bb      	ldr	r3, [r7, #24]
 8005f92:	7bdb      	ldrb	r3, [r3, #15]
 8005f94:	021a      	lsls	r2, r3, #8
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	69ba      	ldr	r2, [r7, #24]
 8005f9c:	7b92      	ldrb	r2, [r2, #14]
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	60fb      	str	r3, [r7, #12]
  *address = value;
 8005fa2:	6a3b      	ldr	r3, [r7, #32]
 8005fa4:	68fa      	ldr	r2, [r7, #12]
 8005fa6:	601a      	str	r2, [r3, #0]

  /*continue setting 12 AC1 huffman Bits from DHTMEM + 61 down to DHTMEM + 59*/
  address--;
 8005fa8:	6a3b      	ldr	r3, [r7, #32]
 8005faa:	3b04      	subs	r3, #4
 8005fac:	623b      	str	r3, [r7, #32]
  index = 12;
 8005fae:	230c      	movs	r3, #12
 8005fb0:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8005fb2:	e01d      	b.n	8005ff0 <JPEG_Set_Huff_DHTMem+0x3b8>
  {

    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8005fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb6:	3301      	adds	r3, #1
 8005fb8:	69ba      	ldr	r2, [r7, #24]
 8005fba:	5cd3      	ldrb	r3, [r2, r3]
 8005fbc:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 8005fbe:	69b9      	ldr	r1, [r7, #24]
 8005fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc2:	440b      	add	r3, r1
 8005fc4:	781b      	ldrb	r3, [r3, #0]
 8005fc6:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8005fc8:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8005fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fcc:	3b01      	subs	r3, #1
 8005fce:	69b9      	ldr	r1, [r7, #24]
 8005fd0:	5ccb      	ldrb	r3, [r1, r3]
 8005fd2:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 8005fd4:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->Bits[index - 2UL] & 0xFFUL);
 8005fd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fd8:	3a02      	subs	r2, #2
 8005fda:	69b9      	ldr	r1, [r7, #24]
 8005fdc:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8005fde:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8005fe0:	6a3b      	ldr	r3, [r7, #32]
 8005fe2:	601a      	str	r2, [r3, #0]
    address--;
 8005fe4:	6a3b      	ldr	r3, [r7, #32]
 8005fe6:	3b04      	subs	r3, #4
 8005fe8:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8005fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fec:	3b04      	subs	r3, #4
 8005fee:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8005ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff2:	2b03      	cmp	r3, #3
 8005ff4:	d8de      	bhi.n	8005fb4 <JPEG_Set_Huff_DHTMem+0x37c>

  }
  /* AC1 Huffman Table : Val*/
  /* AC1 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 62 to DHTMEM + 102 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 62) belong to AC1 VALS table */
  address = (hjpeg->Instance->DHTMEM + 62);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8005ffe:	33f8      	adds	r3, #248	; 0xf8
 8006000:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 8006002:	6a3b      	ldr	r3, [r7, #32]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	b29b      	uxth	r3, r3
 8006008:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 800600a:	69bb      	ldr	r3, [r7, #24]
 800600c:	7c5b      	ldrb	r3, [r3, #17]
 800600e:	061a      	lsls	r2, r3, #24
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	431a      	orrs	r2, r3
 8006014:	69bb      	ldr	r3, [r7, #24]
 8006016:	7c1b      	ldrb	r3, [r3, #16]
 8006018:	041b      	lsls	r3, r3, #16
 800601a:	4313      	orrs	r3, r2
 800601c:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 800601e:	6a3b      	ldr	r3, [r7, #32]
 8006020:	68fa      	ldr	r2, [r7, #12]
 8006022:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC1 huffman values from DHTMEM + 63 to DHTMEM+102 */
  address = (hjpeg->Instance->DHTMEM + 102);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800602c:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 8006030:	623b      	str	r3, [r7, #32]
  index = 160;
 8006032:	23a0      	movs	r3, #160	; 0xa0
 8006034:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8006036:	e021      	b.n	800607c <JPEG_Set_Huff_DHTMem+0x444>
  {
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8006038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800603a:	3301      	adds	r3, #1
 800603c:	69ba      	ldr	r2, [r7, #24]
 800603e:	4413      	add	r3, r2
 8006040:	7c1b      	ldrb	r3, [r3, #16]
 8006042:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 8006044:	69b9      	ldr	r1, [r7, #24]
 8006046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006048:	440b      	add	r3, r1
 800604a:	3310      	adds	r3, #16
 800604c:	781b      	ldrb	r3, [r3, #0]
 800604e:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8006050:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8006052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006054:	3b01      	subs	r3, #1
 8006056:	69b9      	ldr	r1, [r7, #24]
 8006058:	440b      	add	r3, r1
 800605a:	7c1b      	ldrb	r3, [r3, #16]
 800605c:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 800605e:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 8006060:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006062:	3a02      	subs	r2, #2
 8006064:	69b9      	ldr	r1, [r7, #24]
 8006066:	440a      	add	r2, r1
 8006068:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800606a:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800606c:	6a3b      	ldr	r3, [r7, #32]
 800606e:	601a      	str	r2, [r3, #0]
    address--;
 8006070:	6a3b      	ldr	r3, [r7, #32]
 8006072:	3b04      	subs	r3, #4
 8006074:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8006076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006078:	3b04      	subs	r3, #4
 800607a:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800607c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800607e:	2b03      	cmp	r3, #3
 8006080:	d8da      	bhi.n	8006038 <JPEG_Set_Huff_DHTMem+0x400>
  }

}
 8006082:	bf00      	nop
 8006084:	bf00      	nop
 8006086:	372c      	adds	r7, #44	; 0x2c
 8006088:	46bd      	mov	sp, r7
 800608a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608e:	4770      	bx	lr
 8006090:	ffff0000 	.word	0xffff0000

08006094 <JPEG_Init_Process>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Init_Process(JPEG_HandleTypeDef *hjpeg)
{
 8006094:	b480      	push	{r7}
 8006096:	b083      	sub	sp, #12
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  /*Reset pause*/
  hjpeg->Context &= (~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT));
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060a0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	655a      	str	r2, [r3, #84]	; 0x54

  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060ac:	f003 0303 	and.w	r3, r3, #3
 80060b0:	2b02      	cmp	r3, #2
 80060b2:	d108      	bne.n	80060c6 <JPEG_Init_Process+0x32>
  {
    /*Set JPEG Codec to Decoding mode */
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	685a      	ldr	r2, [r3, #4]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f042 0208 	orr.w	r2, r2, #8
 80060c2:	605a      	str	r2, [r3, #4]
 80060c4:	e007      	b.n	80060d6 <JPEG_Init_Process+0x42>
  }
  else /* JPEG_CONTEXT_ENCODE */
  {
    /*Set JPEG Codec to Encoding mode */
    hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_DE;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	685a      	ldr	r2, [r3, #4]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f022 0208 	bic.w	r2, r2, #8
 80060d4:	605a      	str	r2, [r3, #4]
  }

  /*Stop JPEG processing */
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	681a      	ldr	r2, [r3, #0]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f022 0201 	bic.w	r2, r2, #1
 80060e4:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 80060f4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable All DMA requests */
  JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_MASK);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
 8006104:	631a      	str	r2, [r3, #48]	; 0x30
  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006114:	631a      	str	r2, [r3, #48]	; 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006124:	631a      	str	r2, [r3, #48]	; 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8006134:	639a      	str	r2, [r3, #56]	; 0x38

  /*Start Encoding/Decoding*/
  hjpeg->Instance->CONFR0 |=  JPEG_CONFR0_START;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	681a      	ldr	r2, [r3, #0]
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f042 0201 	orr.w	r2, r2, #1
 8006144:	601a      	str	r2, [r3, #0]

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800614a:	f003 030c 	and.w	r3, r3, #12
 800614e:	2b08      	cmp	r3, #8
 8006150:	d108      	bne.n	8006164 <JPEG_Init_Process+0xd0>
  {
    /*Enable IN/OUT, end of Conversation, and end of header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f042 026e 	orr.w	r2, r2, #110	; 0x6e
 8006160:	631a      	str	r2, [r3, #48]	; 0x30
  }
  else
  {
    /* Nothing to do */
  }
}
 8006162:	e00d      	b.n	8006180 <JPEG_Init_Process+0xec>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006168:	f003 030c 	and.w	r3, r3, #12
 800616c:	2b0c      	cmp	r3, #12
 800616e:	d107      	bne.n	8006180 <JPEG_Init_Process+0xec>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800617e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006180:	bf00      	nop
 8006182:	370c      	adds	r7, #12
 8006184:	46bd      	mov	sp, r7
 8006186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618a:	4770      	bx	lr

0800618c <JPEG_Process>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if the process has ends else JPEG_PROCESS_ONGOING
  */
static uint32_t JPEG_Process(JPEG_HandleTypeDef *hjpeg)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b084      	sub	sp, #16
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;

  /*End of header processing flag */
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006198:	f003 0303 	and.w	r3, r3, #3
 800619c:	2b02      	cmp	r3, #2
 800619e:	d125      	bne.n	80061ec <JPEG_Process+0x60>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d01e      	beq.n	80061ec <JPEG_Process+0x60>
    {
      /*Call Header parsing complete callback */
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	3304      	adds	r3, #4
 80061b2:	4619      	mov	r1, r3
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	f7fe ff69 	bl	800508c <HAL_JPEG_GetInfo>
      /* Reset the ImageQuality */
      hjpeg->Conf.ImageQuality = 0;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2200      	movs	r2, #0
 80061be:	615a      	str	r2, [r3, #20]

      /*Call Info Ready callback */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->InfoReadyCallback(hjpeg, &hjpeg->Conf);
#else
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	3304      	adds	r3, #4
 80061c4:	4619      	mov	r1, r3
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f00a fea2 	bl	8010f10 <HAL_JPEG_InfoReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80061da:	631a      	str	r2, [r3, #48]	; 0x30

      /* Clear header processing done flag */
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80061ea:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  /*Input FIFO status handling*/
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d116      	bne.n	8006226 <JPEG_Process+0x9a>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFTF) != 0UL)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061fe:	f003 0302 	and.w	r3, r3, #2
 8006202:	2b00      	cmp	r3, #0
 8006204:	d004      	beq.n	8006210 <JPEG_Process+0x84>
    {
      /*Input FIFO threshold flag */
      /*JPEG_FIFO_TH_SIZE words can be written in */
      JPEG_ReadInputData(hjpeg, JPEG_FIFO_TH_SIZE);
 8006206:	2104      	movs	r1, #4
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f000 f988 	bl	800651e <JPEG_ReadInputData>
 800620e:	e00a      	b.n	8006226 <JPEG_Process+0x9a>
    }
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFNFF) != 0UL)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006216:	f003 0304 	and.w	r3, r3, #4
 800621a:	2b00      	cmp	r3, #0
 800621c:	d003      	beq.n	8006226 <JPEG_Process+0x9a>
    {
      /*Input FIFO Not Full flag */
      /*32-bit value can be written in */
      JPEG_ReadInputData(hjpeg, 1);
 800621e:	2101      	movs	r1, #1
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f000 f97c 	bl	800651e <JPEG_ReadInputData>
    }
  }


  /*Output FIFO flag handling*/
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800622a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800622e:	2b00      	cmp	r3, #0
 8006230:	d116      	bne.n	8006260 <JPEG_Process+0xd4>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFTF) != 0UL)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006238:	f003 0308 	and.w	r3, r3, #8
 800623c:	2b00      	cmp	r3, #0
 800623e:	d004      	beq.n	800624a <JPEG_Process+0xbe>
    {
      /*Output FIFO threshold flag */
      /*JPEG_FIFO_TH_SIZE words can be read out */
      JPEG_StoreOutputData(hjpeg, JPEG_FIFO_TH_SIZE);
 8006240:	2104      	movs	r1, #4
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f000 f864 	bl	8006310 <JPEG_StoreOutputData>
 8006248:	e00a      	b.n	8006260 <JPEG_Process+0xd4>
    }
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006250:	f003 0310 	and.w	r3, r3, #16
 8006254:	2b00      	cmp	r3, #0
 8006256:	d003      	beq.n	8006260 <JPEG_Process+0xd4>
    {
      /*Output FIFO Not Empty flag */
      /*32-bit value can be read out */
      JPEG_StoreOutputData(hjpeg, 1);
 8006258:	2101      	movs	r1, #1
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f000 f858 	bl	8006310 <JPEG_StoreOutputData>
      /* Nothing to do */
    }
  }

  /*End of Conversion handling :i.e EOC flag is high and OFTF low and OFNEF low*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006266:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800626a:	2b20      	cmp	r3, #32
 800626c:	d14b      	bne.n	8006306 <JPEG_Process+0x17a>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	681a      	ldr	r2, [r3, #0]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f022 0201 	bic.w	r2, r2, #1
 800627c:	601a      	str	r2, [r3, #0]

    if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006282:	f003 030c 	and.w	r3, r3, #12
 8006286:	2b08      	cmp	r3, #8
 8006288:	d107      	bne.n	800629a <JPEG_Process+0x10e>
    {
      /* Disable All Interrupts */
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 8006298:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Clear all flags */
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80062a8:	639a      	str	r2, [r3, #56]	; 0x38

    /*Call End of conversion callback */
    if (hjpeg->JpegOutCount > 0UL)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d00a      	beq.n	80062c8 <JPEG_Process+0x13c>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	69d9      	ldr	r1, [r3, #28]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ba:	461a      	mov	r2, r3
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	f00a fef7 	bl	80110b0 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2200      	movs	r2, #0
 80062c6:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /*Reset Context Operation*/
    tmpContext = hjpeg->Context;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062cc:	60fb      	str	r3, [r7, #12]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062d2:	f403 4282 	and.w	r2, r3, #16640	; 0x4100
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2200      	movs	r2, #0
 80062de:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2201      	movs	r2, #1
 80062e6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	f003 0303 	and.w	r3, r3, #3
 80062f0:	2b02      	cmp	r3, #2
 80062f2:	d103      	bne.n	80062fc <JPEG_Process+0x170>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	f00a ff43 	bl	8011180 <HAL_JPEG_DecodeCpltCallback>
 80062fa:	e002      	b.n	8006302 <JPEG_Process+0x176>
    else /* JPEG_CONTEXT_ENCODE */
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->EncodeCpltCallback(hjpeg);
#else
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f7ff f909 	bl	8005514 <HAL_JPEG_EncodeCpltCallback>
#endif
    }

    return JPEG_PROCESS_DONE;
 8006302:	2301      	movs	r3, #1
 8006304:	e000      	b.n	8006308 <JPEG_Process+0x17c>
  }


  return JPEG_PROCESS_ONGOING;
 8006306:	2300      	movs	r3, #0
}
 8006308:	4618      	mov	r0, r3
 800630a:	3710      	adds	r7, #16
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}

08006310 <JPEG_StoreOutputData>:
  *         the configuration information for JPEG module
  * @param  nbOutputWords Number of output words (of 32 bits) ready from the JPEG peripheral
  * @retval None
  */
static void JPEG_StoreOutputData(JPEG_HandleTypeDef *hjpeg, uint32_t nbOutputWords)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b086      	sub	sp, #24
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
 8006318:	6039      	str	r1, [r7, #0]
  uint32_t index;
  uint32_t nb_words;
  uint32_t nb_bytes;
  uint32_t dataword;

  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	009b      	lsls	r3, r3, #2
 8006326:	440b      	add	r3, r1
 8006328:	429a      	cmp	r2, r3
 800632a:	d34b      	bcc.n	80063c4 <JPEG_StoreOutputData+0xb4>
  {
    for (index = 0; index < nbOutputWords; index++)
 800632c:	2300      	movs	r3, #0
 800632e:	617b      	str	r3, [r7, #20]
 8006330:	e031      	b.n	8006396 <JPEG_StoreOutputData+0x86>
    {
      /*Transfer 32 bits from the JPEG output FIFO*/
      dataword = hjpeg->Instance->DOR;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006338:	60bb      	str	r3, [r7, #8]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	69da      	ldr	r2, [r3, #28]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006342:	4413      	add	r3, r2
 8006344:	68ba      	ldr	r2, [r7, #8]
 8006346:	b2d2      	uxtb	r2, r2
 8006348:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	0a19      	lsrs	r1, r3, #8
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	69da      	ldr	r2, [r3, #28]
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006356:	3301      	adds	r3, #1
 8006358:	4413      	add	r3, r2
 800635a:	b2ca      	uxtb	r2, r1
 800635c:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	0c19      	lsrs	r1, r3, #16
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	69da      	ldr	r2, [r3, #28]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800636a:	3302      	adds	r3, #2
 800636c:	4413      	add	r3, r2
 800636e:	b2ca      	uxtb	r2, r1
 8006370:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	0e19      	lsrs	r1, r3, #24
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	69da      	ldr	r2, [r3, #28]
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800637e:	3303      	adds	r3, #3
 8006380:	4413      	add	r3, r2
 8006382:	b2ca      	uxtb	r2, r1
 8006384:	701a      	strb	r2, [r3, #0]
      hjpeg->JpegOutCount += 4UL;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800638a:	1d1a      	adds	r2, r3, #4
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	625a      	str	r2, [r3, #36]	; 0x24
    for (index = 0; index < nbOutputWords; index++)
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	3301      	adds	r3, #1
 8006394:	617b      	str	r3, [r7, #20]
 8006396:	697a      	ldr	r2, [r7, #20]
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	429a      	cmp	r2, r3
 800639c:	d3c9      	bcc.n	8006332 <JPEG_StoreOutputData+0x22>
    }
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a6:	429a      	cmp	r2, r3
 80063a8:	f040 80b5 	bne.w	8006516 <JPEG_StoreOutputData+0x206>
    {
      /*Output Buffer is full, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	69d9      	ldr	r1, [r3, #28]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b4:	461a      	mov	r2, r3
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f00a fe7a 	bl	80110b0 <HAL_JPEG_DataReadyCallback>
#endif /*USE_HAL_JPEG_REGISTER_CALLBACKS*/
      hjpeg->JpegOutCount = 0;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2200      	movs	r2, #0
 80063c0:	625a      	str	r2, [r3, #36]	; 0x24
  }
  else
  {
    /* Nothing to do */
  }
}
 80063c2:	e0a8      	b.n	8006516 <JPEG_StoreOutputData+0x206>
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063cc:	429a      	cmp	r2, r3
 80063ce:	f240 80a2 	bls.w	8006516 <JPEG_StoreOutputData+0x206>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063da:	1ad3      	subs	r3, r2, r3
 80063dc:	089b      	lsrs	r3, r3, #2
 80063de:	613b      	str	r3, [r7, #16]
    for (index = 0; index < nb_words; index++)
 80063e0:	2300      	movs	r3, #0
 80063e2:	617b      	str	r3, [r7, #20]
 80063e4:	e031      	b.n	800644a <JPEG_StoreOutputData+0x13a>
      dataword = hjpeg->Instance->DOR;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063ec:	60bb      	str	r3, [r7, #8]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	69da      	ldr	r2, [r3, #28]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f6:	4413      	add	r3, r2
 80063f8:	68ba      	ldr	r2, [r7, #8]
 80063fa:	b2d2      	uxtb	r2, r2
 80063fc:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	0a19      	lsrs	r1, r3, #8
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	69da      	ldr	r2, [r3, #28]
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800640a:	3301      	adds	r3, #1
 800640c:	4413      	add	r3, r2
 800640e:	b2ca      	uxtb	r2, r1
 8006410:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	0c19      	lsrs	r1, r3, #16
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	69da      	ldr	r2, [r3, #28]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800641e:	3302      	adds	r3, #2
 8006420:	4413      	add	r3, r2
 8006422:	b2ca      	uxtb	r2, r1
 8006424:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	0e19      	lsrs	r1, r3, #24
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	69da      	ldr	r2, [r3, #28]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006432:	3303      	adds	r3, #3
 8006434:	4413      	add	r3, r2
 8006436:	b2ca      	uxtb	r2, r1
 8006438:	701a      	strb	r2, [r3, #0]
      hjpeg->JpegOutCount += 4UL;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800643e:	1d1a      	adds	r2, r3, #4
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	625a      	str	r2, [r3, #36]	; 0x24
    for (index = 0; index < nb_words; index++)
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	3301      	adds	r3, #1
 8006448:	617b      	str	r3, [r7, #20]
 800644a:	697a      	ldr	r2, [r7, #20]
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	429a      	cmp	r2, r3
 8006450:	d3c9      	bcc.n	80063e6 <JPEG_StoreOutputData+0xd6>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800645a:	429a      	cmp	r2, r3
 800645c:	d10b      	bne.n	8006476 <JPEG_StoreOutputData+0x166>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	69d9      	ldr	r1, [r3, #28]
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006466:	461a      	mov	r2, r3
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f00a fe21 	bl	80110b0 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2200      	movs	r2, #0
 8006472:	625a      	str	r2, [r3, #36]	; 0x24
}
 8006474:	e04f      	b.n	8006516 <JPEG_StoreOutputData+0x206>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800647e:	1ad3      	subs	r3, r2, r3
 8006480:	60fb      	str	r3, [r7, #12]
      dataword = hjpeg->Instance->DOR;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006488:	60bb      	str	r3, [r7, #8]
      for (index = 0; index < nb_bytes; index++)
 800648a:	2300      	movs	r3, #0
 800648c:	617b      	str	r3, [r7, #20]
 800648e:	e015      	b.n	80064bc <JPEG_StoreOutputData+0x1ac>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	f003 0303 	and.w	r3, r3, #3
 8006496:	00db      	lsls	r3, r3, #3
 8006498:	68ba      	ldr	r2, [r7, #8]
 800649a:	fa22 f103 	lsr.w	r1, r2, r3
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	69da      	ldr	r2, [r3, #28]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a6:	4413      	add	r3, r2
 80064a8:	b2ca      	uxtb	r2, r1
 80064aa:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount++;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b0:	1c5a      	adds	r2, r3, #1
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	625a      	str	r2, [r3, #36]	; 0x24
      for (index = 0; index < nb_bytes; index++)
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	3301      	adds	r3, #1
 80064ba:	617b      	str	r3, [r7, #20]
 80064bc:	697a      	ldr	r2, [r7, #20]
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	429a      	cmp	r2, r3
 80064c2:	d3e5      	bcc.n	8006490 <JPEG_StoreOutputData+0x180>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	69d9      	ldr	r1, [r3, #28]
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064cc:	461a      	mov	r2, r3
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f00a fdee 	bl	80110b0 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2200      	movs	r2, #0
 80064d8:	625a      	str	r2, [r3, #36]	; 0x24
      nb_bytes = 4UL - nb_bytes;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	f1c3 0304 	rsb	r3, r3, #4
 80064e0:	60fb      	str	r3, [r7, #12]
      for (index = nb_bytes; index < 4UL; index++)
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	617b      	str	r3, [r7, #20]
 80064e6:	e013      	b.n	8006510 <JPEG_StoreOutputData+0x200>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	00db      	lsls	r3, r3, #3
 80064ec:	68ba      	ldr	r2, [r7, #8]
 80064ee:	fa22 f103 	lsr.w	r1, r2, r3
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	69da      	ldr	r2, [r3, #28]
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064fa:	4413      	add	r3, r2
 80064fc:	b2ca      	uxtb	r2, r1
 80064fe:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount++;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006504:	1c5a      	adds	r2, r3, #1
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	625a      	str	r2, [r3, #36]	; 0x24
      for (index = nb_bytes; index < 4UL; index++)
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	3301      	adds	r3, #1
 800650e:	617b      	str	r3, [r7, #20]
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	2b03      	cmp	r3, #3
 8006514:	d9e8      	bls.n	80064e8 <JPEG_StoreOutputData+0x1d8>
}
 8006516:	bf00      	nop
 8006518:	3718      	adds	r7, #24
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}

0800651e <JPEG_ReadInputData>:
  *         the configuration information for JPEG module
  * @param  nbRequestWords Number of input words (of 32 bits) that the JPE peripheral request
  * @retval None
  */
static void JPEG_ReadInputData(JPEG_HandleTypeDef *hjpeg, uint32_t nbRequestWords)
{
 800651e:	b580      	push	{r7, lr}
 8006520:	b088      	sub	sp, #32
 8006522:	af00      	add	r7, sp, #0
 8006524:	6078      	str	r0, [r7, #4]
 8006526:	6039      	str	r1, [r7, #0]
  uint32_t nb_bytes = 0;
 8006528:	2300      	movs	r3, #0
 800652a:	61fb      	str	r3, [r7, #28]
  uint32_t nb_words;
  uint32_t index;
  uint32_t dataword;
  uint32_t input_count;

  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006530:	2b00      	cmp	r3, #0
 8006532:	d002      	beq.n	800653a <JPEG_ReadInputData+0x1c>
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d104      	bne.n	8006544 <JPEG_ReadInputData+0x26>
  {
    /* No more Input data : nothing to do*/
    (void) HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_INPUT);
 800653a:	2101      	movs	r1, #1
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	f7fe fe9d 	bl	800527c <HAL_JPEG_Pause>
 8006542:	e028      	b.n	8006596 <JPEG_ReadInputData+0x78>
  }
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6a1b      	ldr	r3, [r3, #32]
 800654c:	429a      	cmp	r2, r3
 800654e:	d906      	bls.n	800655e <JPEG_ReadInputData+0x40>
  {
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6a1b      	ldr	r3, [r3, #32]
 8006558:	1ad3      	subs	r3, r2, r3
 800655a:	61fb      	str	r3, [r7, #28]
 800655c:	e01b      	b.n	8006596 <JPEG_ReadInputData+0x78>
  }
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6a1b      	ldr	r3, [r3, #32]
 8006566:	429a      	cmp	r2, r3
 8006568:	d115      	bne.n	8006596 <JPEG_ReadInputData+0x78>
  {
    /*Call HAL_JPEG_GetDataCallback to get new data */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->GetDataCallback(hjpeg, hjpeg->JpegInCount);
#else
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6a1b      	ldr	r3, [r3, #32]
 800656e:	4619      	mov	r1, r3
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f00a fd69 	bl	8011048 <HAL_JPEG_GetDataCallback>
#endif /*USE_HAL_JPEG_REGISTER_CALLBACKS*/

    if (hjpeg->InDataLength > 4UL)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800657a:	2b04      	cmp	r3, #4
 800657c:	d905      	bls.n	800658a <JPEG_ReadInputData+0x6c>
    {
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006582:	f023 0203 	bic.w	r2, r3, #3
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	629a      	str	r2, [r3, #40]	; 0x28
    }
    hjpeg->JpegInCount = 0;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2200      	movs	r2, #0
 800658e:	621a      	str	r2, [r3, #32]
    nb_bytes = hjpeg->InDataLength;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006594:	61fb      	str	r3, [r7, #28]
  }
  else
  {
    /* Nothing to do */
  }
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800659a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800659e:	2b00      	cmp	r3, #0
 80065a0:	f040 809f 	bne.w	80066e2 <JPEG_ReadInputData+0x1c4>
 80065a4:	69fb      	ldr	r3, [r7, #28]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	f000 809b 	beq.w	80066e2 <JPEG_ReadInputData+0x1c4>
  {
    nb_words = nb_bytes / 4UL;
 80065ac:	69fb      	ldr	r3, [r7, #28]
 80065ae:	089b      	lsrs	r3, r3, #2
 80065b0:	613b      	str	r3, [r7, #16]
    if (nb_words >= nbRequestWords)
 80065b2:	693a      	ldr	r2, [r7, #16]
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	429a      	cmp	r2, r3
 80065b8:	d335      	bcc.n	8006626 <JPEG_ReadInputData+0x108>
    {
      for (index = 0; index < nbRequestWords; index++)
 80065ba:	2300      	movs	r3, #0
 80065bc:	61bb      	str	r3, [r7, #24]
 80065be:	e02d      	b.n	800661c <JPEG_ReadInputData+0xfe>
      {
        input_count = hjpeg->JpegInCount;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6a1b      	ldr	r3, [r3, #32]
 80065c4:	60fb      	str	r3, [r7, #12]
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	699a      	ldr	r2, [r3, #24]
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	4413      	add	r3, r2
 80065ce:	781b      	ldrb	r3, [r3, #0]
 80065d0:	4619      	mov	r1, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	699a      	ldr	r2, [r3, #24]
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	3301      	adds	r3, #1
 80065da:	4413      	add	r3, r2
 80065dc:	781b      	ldrb	r3, [r3, #0]
 80065de:	021b      	lsls	r3, r3, #8
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80065e0:	ea41 0203 	orr.w	r2, r1, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6999      	ldr	r1, [r3, #24]
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	3302      	adds	r3, #2
 80065ec:	440b      	add	r3, r1
 80065ee:	781b      	ldrb	r3, [r3, #0]
 80065f0:	041b      	lsls	r3, r3, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80065f2:	ea42 0103 	orr.w	r1, r2, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	699a      	ldr	r2, [r3, #24]
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	3303      	adds	r3, #3
 80065fe:	4413      	add	r3, r2
 8006600:	781b      	ldrb	r3, [r3, #0]
 8006602:	061a      	lsls	r2, r3, #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8006608:	430a      	orrs	r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800660a:	641a      	str	r2, [r3, #64]	; 0x40

        hjpeg->JpegInCount += 4UL;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6a1b      	ldr	r3, [r3, #32]
 8006610:	1d1a      	adds	r2, r3, #4
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	621a      	str	r2, [r3, #32]
      for (index = 0; index < nbRequestWords; index++)
 8006616:	69bb      	ldr	r3, [r7, #24]
 8006618:	3301      	adds	r3, #1
 800661a:	61bb      	str	r3, [r7, #24]
 800661c:	69ba      	ldr	r2, [r7, #24]
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	429a      	cmp	r2, r3
 8006622:	d3cd      	bcc.n	80065c0 <JPEG_ReadInputData+0xa2>
        }
        hjpeg->Instance->DIR = dataword;
      }
    }
  }
}
 8006624:	e05d      	b.n	80066e2 <JPEG_ReadInputData+0x1c4>
      if (nb_words > 0UL)
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d035      	beq.n	8006698 <JPEG_ReadInputData+0x17a>
        for (index = 0; index < nb_words; index++)
 800662c:	2300      	movs	r3, #0
 800662e:	61bb      	str	r3, [r7, #24]
 8006630:	e02d      	b.n	800668e <JPEG_ReadInputData+0x170>
          input_count = hjpeg->JpegInCount;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6a1b      	ldr	r3, [r3, #32]
 8006636:	60fb      	str	r3, [r7, #12]
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	699a      	ldr	r2, [r3, #24]
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	4413      	add	r3, r2
 8006640:	781b      	ldrb	r3, [r3, #0]
 8006642:	4619      	mov	r1, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	699a      	ldr	r2, [r3, #24]
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	3301      	adds	r3, #1
 800664c:	4413      	add	r3, r2
 800664e:	781b      	ldrb	r3, [r3, #0]
 8006650:	021b      	lsls	r3, r3, #8
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8006652:	ea41 0203 	orr.w	r2, r1, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6999      	ldr	r1, [r3, #24]
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	3302      	adds	r3, #2
 800665e:	440b      	add	r3, r1
 8006660:	781b      	ldrb	r3, [r3, #0]
 8006662:	041b      	lsls	r3, r3, #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8006664:	ea42 0103 	orr.w	r1, r2, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	699a      	ldr	r2, [r3, #24]
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	3303      	adds	r3, #3
 8006670:	4413      	add	r3, r2
 8006672:	781b      	ldrb	r3, [r3, #0]
 8006674:	061a      	lsls	r2, r3, #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800667a:	430a      	orrs	r2, r1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800667c:	641a      	str	r2, [r3, #64]	; 0x40
          hjpeg->JpegInCount += 4UL;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6a1b      	ldr	r3, [r3, #32]
 8006682:	1d1a      	adds	r2, r3, #4
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	621a      	str	r2, [r3, #32]
        for (index = 0; index < nb_words; index++)
 8006688:	69bb      	ldr	r3, [r7, #24]
 800668a:	3301      	adds	r3, #1
 800668c:	61bb      	str	r3, [r7, #24]
 800668e:	69ba      	ldr	r2, [r7, #24]
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	429a      	cmp	r2, r3
 8006694:	d3cd      	bcc.n	8006632 <JPEG_ReadInputData+0x114>
}
 8006696:	e024      	b.n	80066e2 <JPEG_ReadInputData+0x1c4>
        dataword = 0;
 8006698:	2300      	movs	r3, #0
 800669a:	617b      	str	r3, [r7, #20]
        for (index = 0; index < nb_bytes; index++)
 800669c:	2300      	movs	r3, #0
 800669e:	61bb      	str	r3, [r7, #24]
 80066a0:	e017      	b.n	80066d2 <JPEG_ReadInputData+0x1b4>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	699a      	ldr	r2, [r3, #24]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6a1b      	ldr	r3, [r3, #32]
 80066aa:	4413      	add	r3, r2
 80066ac:	781b      	ldrb	r3, [r3, #0]
 80066ae:	461a      	mov	r2, r3
 80066b0:	69bb      	ldr	r3, [r7, #24]
 80066b2:	f003 0303 	and.w	r3, r3, #3
 80066b6:	00db      	lsls	r3, r3, #3
 80066b8:	fa02 f303 	lsl.w	r3, r2, r3
 80066bc:	697a      	ldr	r2, [r7, #20]
 80066be:	4313      	orrs	r3, r2
 80066c0:	617b      	str	r3, [r7, #20]
          hjpeg->JpegInCount++;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6a1b      	ldr	r3, [r3, #32]
 80066c6:	1c5a      	adds	r2, r3, #1
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	621a      	str	r2, [r3, #32]
        for (index = 0; index < nb_bytes; index++)
 80066cc:	69bb      	ldr	r3, [r7, #24]
 80066ce:	3301      	adds	r3, #1
 80066d0:	61bb      	str	r3, [r7, #24]
 80066d2:	69ba      	ldr	r2, [r7, #24]
 80066d4:	69fb      	ldr	r3, [r7, #28]
 80066d6:	429a      	cmp	r2, r3
 80066d8:	d3e3      	bcc.n	80066a2 <JPEG_ReadInputData+0x184>
        hjpeg->Instance->DIR = dataword;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	697a      	ldr	r2, [r7, #20]
 80066e0:	641a      	str	r2, [r3, #64]	; 0x40
}
 80066e2:	bf00      	nop
 80066e4:	3720      	adds	r7, #32
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bd80      	pop	{r7, pc}
	...

080066ec <JPEG_DMA_StartProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static HAL_StatusTypeDef JPEG_DMA_StartProcess(JPEG_HandleTypeDef *hjpeg)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b082      	sub	sp, #8
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  if ((hjpeg->InDataLength < 4UL) || (hjpeg->OutDataLength < 4UL))
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066f8:	2b03      	cmp	r3, #3
 80066fa:	d903      	bls.n	8006704 <JPEG_DMA_StartProcess+0x18>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006700:	2b03      	cmp	r3, #3
 8006702:	d801      	bhi.n	8006708 <JPEG_DMA_StartProcess+0x1c>
  {
    return HAL_ERROR;
 8006704:	2301      	movs	r3, #1
 8006706:	e068      	b.n	80067da <JPEG_DMA_StartProcess+0xee>
  }
  /* Reset Ending DMA internal context flag*/
  hjpeg->Context &= ~JPEG_CONTEXT_ENDING_DMA;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800670c:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	655a      	str	r2, [r3, #84]	; 0x54

  /* Disable DMA In/Out Request*/
  JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_ODMA | JPEG_DMA_IDMA);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
 8006722:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the JPEG DMA In transfer complete callback */
  hjpeg->hdmain->XferCpltCallback = JPEG_DMAInCpltCallback;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006728:	4a2e      	ldr	r2, [pc, #184]	; (80067e4 <JPEG_DMA_StartProcess+0xf8>)
 800672a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Set the DMA In error callback */
  hjpeg->hdmain->XferErrorCallback = JPEG_DMAErrorCallback;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006730:	4a2d      	ldr	r2, [pc, #180]	; (80067e8 <JPEG_DMA_StartProcess+0xfc>)
 8006732:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the JPEG DMA Out transfer complete callback */
  hjpeg->hdmaout->XferCpltCallback = JPEG_DMAOutCpltCallback;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006738:	4a2c      	ldr	r2, [pc, #176]	; (80067ec <JPEG_DMA_StartProcess+0x100>)
 800673a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Set the DMA Out error callback */
  hjpeg->hdmaout->XferErrorCallback = JPEG_DMAErrorCallback;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006740:	4a29      	ldr	r2, [pc, #164]	; (80067e8 <JPEG_DMA_StartProcess+0xfc>)
 8006742:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Set the DMA Out Abort callback */
  hjpeg->hdmaout->XferAbortCallback = JPEG_DMAOutAbortCallback;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006748:	4a29      	ldr	r2, [pc, #164]	; (80067f0 <JPEG_DMA_StartProcess+0x104>)
 800674a:	651a      	str	r2, [r3, #80]	; 0x50

  /*DMA transfer size must be a multiple of 4 bytes i.e multiple of 32bits words*/
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006750:	f023 0203 	bic.w	r2, r3, #3
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	629a      	str	r2, [r3, #40]	; 0x28

  /*DMA transfer size must be a multiple of 4 bytes i.e multiple of 32bits words*/
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % 4UL);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800675c:	f023 0203 	bic.w	r2, r3, #3
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Start DMA FIFO In transfer */
  if (HAL_DMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	699b      	ldr	r3, [r3, #24]
 800676c:	4619      	mov	r1, r3
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	3340      	adds	r3, #64	; 0x40
 8006774:	461a      	mov	r2, r3
                       hjpeg->InDataLength >> 2)  != HAL_OK)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (HAL_DMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800677a:	089b      	lsrs	r3, r3, #2
 800677c:	f7fc fda4 	bl	80032c8 <HAL_DMA_Start_IT>
 8006780:	4603      	mov	r3, r0
 8006782:	2b00      	cmp	r3, #0
 8006784:	d007      	beq.n	8006796 <JPEG_DMA_StartProcess+0xaa>
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800678a:	f043 0204 	orr.w	r2, r3, #4
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	651a      	str	r2, [r3, #80]	; 0x50
    return HAL_ERROR;
 8006792:	2301      	movs	r3, #1
 8006794:	e021      	b.n	80067da <JPEG_DMA_StartProcess+0xee>
  }

  /* Start DMA FIFO Out transfer */
  if (HAL_DMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	3344      	adds	r3, #68	; 0x44
 80067a0:	4619      	mov	r1, r3
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	69db      	ldr	r3, [r3, #28]
 80067a6:	461a      	mov	r2, r3
                       hjpeg->OutDataLength >> 2)  != HAL_OK)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  if (HAL_DMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 80067ac:	089b      	lsrs	r3, r3, #2
 80067ae:	f7fc fd8b 	bl	80032c8 <HAL_DMA_Start_IT>
 80067b2:	4603      	mov	r3, r0
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d007      	beq.n	80067c8 <JPEG_DMA_StartProcess+0xdc>
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067bc:	f043 0204 	orr.w	r2, r3, #4
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	651a      	str	r2, [r3, #80]	; 0x50
    return HAL_ERROR;
 80067c4:	2301      	movs	r3, #1
 80067c6:	e008      	b.n	80067da <JPEG_DMA_StartProcess+0xee>
  }

  /* Enable JPEG In/Out DMA requests*/
  JPEG_ENABLE_DMA(hjpeg, JPEG_DMA_IDMA | JPEG_DMA_ODMA);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f442 52c0 	orr.w	r2, r2, #6144	; 0x1800
 80067d6:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 80067d8:	2300      	movs	r3, #0
}
 80067da:	4618      	mov	r0, r3
 80067dc:	3708      	adds	r7, #8
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}
 80067e2:	bf00      	nop
 80067e4:	08006b0d 	.word	0x08006b0d
 80067e8:	08006cf1 	.word	0x08006cf1
 80067ec:	08006c0d 	.word	0x08006c0d
 80067f0:	08006d5d 	.word	0x08006d5d

080067f4 <JPEG_DMA_ContinueProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static void JPEG_DMA_ContinueProcess(JPEG_HandleTypeDef *hjpeg)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b082      	sub	sp, #8
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
  /*End of header processing flag rises*/
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006800:	f003 0303 	and.w	r3, r3, #3
 8006804:	2b02      	cmp	r3, #2
 8006806:	d125      	bne.n	8006854 <JPEG_DMA_ContinueProcess+0x60>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800680e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006812:	2b00      	cmp	r3, #0
 8006814:	d01e      	beq.n	8006854 <JPEG_DMA_ContinueProcess+0x60>
    {
      /*Call Header parsing complete callback */
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	3304      	adds	r3, #4
 800681a:	4619      	mov	r1, r3
 800681c:	6878      	ldr	r0, [r7, #4]
 800681e:	f7fe fc35 	bl	800508c <HAL_JPEG_GetInfo>

      /* Reset the ImageQuality */
      hjpeg->Conf.ImageQuality = 0;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2200      	movs	r2, #0
 8006826:	615a      	str	r2, [r3, #20]

      /*Call Info Ready callback */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->InfoReadyCallback(hjpeg, &hjpeg->Conf);
#else
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	3304      	adds	r3, #4
 800682c:	4619      	mov	r1, r3
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f00a fb6e 	bl	8010f10 <HAL_JPEG_InfoReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006842:	631a      	str	r2, [r3, #48]	; 0x30

      /* Clear header processing done flag */
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006852:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  /*End of Conversion handling*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) != 0UL)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800685a:	f003 0320 	and.w	r3, r3, #32
 800685e:	2b00      	cmp	r3, #0
 8006860:	d041      	beq.n	80068e6 <JPEG_DMA_ContinueProcess+0xf2>
  {
    /*Disabkle JPEG In/Out DMA Requests*/
    JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_ODMA | JPEG_DMA_IDMA);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
 8006870:	631a      	str	r2, [r3, #48]	; 0x30

    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006876:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	655a      	str	r2, [r3, #84]	; 0x54

    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	681a      	ldr	r2, [r3, #0]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f022 0201 	bic.w	r2, r2, #1
 800688c:	601a      	str	r2, [r3, #0]

    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 800689c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear all flags */
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80068ac:	639a      	str	r2, [r3, #56]	; 0x38

    if (hjpeg->hdmain->State == HAL_DMA_STATE_BUSY)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068b2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80068b6:	b2db      	uxtb	r3, r3
 80068b8:	2b02      	cmp	r3, #2
 80068ba:	d104      	bne.n	80068c6 <JPEG_DMA_ContinueProcess+0xd2>
    {
      /* Stop the DMA In Xfer*/
      (void) HAL_DMA_Abort_IT(hjpeg->hdmain);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068c0:	4618      	mov	r0, r3
 80068c2:	f7fc fd61 	bl	8003388 <HAL_DMA_Abort_IT>
    }

    if (hjpeg->hdmaout->State == HAL_DMA_STATE_BUSY)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068ca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80068ce:	b2db      	uxtb	r3, r3
 80068d0:	2b02      	cmp	r3, #2
 80068d2:	d105      	bne.n	80068e0 <JPEG_DMA_ContinueProcess+0xec>
    {
      /* Stop the DMA out Xfer*/
      (void) HAL_DMA_Abort_IT(hjpeg->hdmaout);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068d8:	4618      	mov	r0, r3
 80068da:	f7fc fd55 	bl	8003388 <HAL_DMA_Abort_IT>
      JPEG_DMA_EndProcess(hjpeg);
    }
  }


}
 80068de:	e002      	b.n	80068e6 <JPEG_DMA_ContinueProcess+0xf2>
      JPEG_DMA_EndProcess(hjpeg);
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f000 f805 	bl	80068f0 <JPEG_DMA_EndProcess>
}
 80068e6:	bf00      	nop
 80068e8:	3708      	adds	r7, #8
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}
	...

080068f0 <JPEG_DMA_EndProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE
  */
static void JPEG_DMA_EndProcess(JPEG_HandleTypeDef *hjpeg)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b084      	sub	sp, #16
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;
  hjpeg->JpegOutCount = hjpeg->OutDataLength - ((hjpeg->hdmaout->Instance->NDTR & DMA_SxNDT) << 2);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	0099      	lsls	r1, r3, #2
 8006906:	4b2f      	ldr	r3, [pc, #188]	; (80069c4 <JPEG_DMA_EndProcess+0xd4>)
 8006908:	400b      	ands	r3, r1
 800690a:	1ad2      	subs	r2, r2, r3
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	625a      	str	r2, [r3, #36]	; 0x24

  /*if Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006918:	429a      	cmp	r2, r3
 800691a:	d10a      	bne.n	8006932 <JPEG_DMA_EndProcess+0x42>
  {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	69d9      	ldr	r1, [r3, #28]
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006924:	461a      	mov	r2, r3
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f00a fbc2 	bl	80110b0 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

    hjpeg->JpegOutCount = 0;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2200      	movs	r2, #0
 8006930:	625a      	str	r2, [r3, #36]	; 0x24
  }

  /*Check if remaining data in the output FIFO*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006938:	f003 0310 	and.w	r3, r3, #16
 800693c:	2b00      	cmp	r3, #0
 800693e:	d134      	bne.n	80069aa <JPEG_DMA_EndProcess+0xba>
  {
    if (hjpeg->JpegOutCount > 0UL)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006944:	2b00      	cmp	r3, #0
 8006946:	d00a      	beq.n	800695e <JPEG_DMA_EndProcess+0x6e>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	69d9      	ldr	r1, [r3, #28]
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006950:	461a      	mov	r2, r3
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f00a fbac 	bl	80110b0 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2200      	movs	r2, #0
 800695c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	681a      	ldr	r2, [r3, #0]
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f022 0201 	bic.w	r2, r2, #1
 800696c:	601a      	str	r2, [r3, #0]

    tmpContext = hjpeg->Context;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006972:	60fb      	str	r3, [r7, #12]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006978:	f403 4282 	and.w	r2, r3, #16640	; 0x4100
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2200      	movs	r2, #0
 8006984:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2201      	movs	r2, #1
 800698c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	f003 0303 	and.w	r3, r3, #3
 8006996:	2b02      	cmp	r3, #2
 8006998:	d103      	bne.n	80069a2 <JPEG_DMA_EndProcess+0xb2>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f00a fbf0 	bl	8011180 <HAL_JPEG_DecodeCpltCallback>
  else
  {
    /* Nothing to do */
  }

}
 80069a0:	e00c      	b.n	80069bc <JPEG_DMA_EndProcess+0xcc>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f7fe fdb6 	bl	8005514 <HAL_JPEG_EncodeCpltCallback>
}
 80069a8:	e008      	b.n	80069bc <JPEG_DMA_EndProcess+0xcc>
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d102      	bne.n	80069bc <JPEG_DMA_EndProcess+0xcc>
    JPEG_DMA_PollResidualData(hjpeg);
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f000 f806 	bl	80069c8 <JPEG_DMA_PollResidualData>
}
 80069bc:	bf00      	nop
 80069be:	3710      	adds	r7, #16
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}
 80069c4:	0003fffc 	.word	0x0003fffc

080069c8 <JPEG_DMA_PollResidualData>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None.
  */
static void JPEG_DMA_PollResidualData(JPEG_HandleTypeDef *hjpeg)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b086      	sub	sp, #24
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;
  uint32_t count;
  uint32_t dataOut;

  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 80069d0:	2310      	movs	r3, #16
 80069d2:	617b      	str	r3, [r7, #20]
 80069d4:	e04f      	b.n	8006a76 <JPEG_DMA_PollResidualData+0xae>
  {
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d146      	bne.n	8006a70 <JPEG_DMA_PollResidualData+0xa8>
    {
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069e8:	f003 0310 	and.w	r3, r3, #16
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d03f      	beq.n	8006a70 <JPEG_DMA_PollResidualData+0xa8>
      {
        dataOut = hjpeg->Instance->DOR;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069f6:	60fb      	str	r3, [r7, #12]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	69da      	ldr	r2, [r3, #28]
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a00:	4413      	add	r3, r2
 8006a02:	68fa      	ldr	r2, [r7, #12]
 8006a04:	b2d2      	uxtb	r2, r2
 8006a06:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	0a19      	lsrs	r1, r3, #8
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	69da      	ldr	r2, [r3, #28]
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a14:	3301      	adds	r3, #1
 8006a16:	4413      	add	r3, r2
 8006a18:	b2ca      	uxtb	r2, r1
 8006a1a:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	0c19      	lsrs	r1, r3, #16
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	69da      	ldr	r2, [r3, #28]
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a28:	3302      	adds	r3, #2
 8006a2a:	4413      	add	r3, r2
 8006a2c:	b2ca      	uxtb	r2, r1
 8006a2e:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	0e19      	lsrs	r1, r3, #24
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	69da      	ldr	r2, [r3, #28]
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a3c:	3303      	adds	r3, #3
 8006a3e:	4413      	add	r3, r2
 8006a40:	b2ca      	uxtb	r2, r1
 8006a42:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount += 4UL;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a48:	1d1a      	adds	r2, r3, #4
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	625a      	str	r2, [r3, #36]	; 0x24

        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a56:	429a      	cmp	r2, r3
 8006a58:	d10a      	bne.n	8006a70 <JPEG_DMA_PollResidualData+0xa8>
        {
          /*Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
          hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
          HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	69d9      	ldr	r1, [r3, #28]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a62:	461a      	mov	r2, r3
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f00a fb23 	bl	80110b0 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

          hjpeg->JpegOutCount = 0;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	625a      	str	r2, [r3, #36]	; 0x24
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	3b01      	subs	r3, #1
 8006a74:	617b      	str	r3, [r7, #20]
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d1ac      	bne.n	80069d6 <JPEG_DMA_PollResidualData+0xe>

      }
    }
  }

  tmpContext = hjpeg->Context;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a80:	613b      	str	r3, [r7, #16]

  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a88:	f003 0310 	and.w	r3, r3, #16
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d004      	beq.n	8006a9a <JPEG_DMA_PollResidualData+0xd2>
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d133      	bne.n	8006b02 <JPEG_DMA_PollResidualData+0x13a>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	681a      	ldr	r2, [r3, #0]
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f022 0201 	bic.w	r2, r2, #1
 8006aa8:	601a      	str	r2, [r3, #0]

    if (hjpeg->JpegOutCount > 0UL)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d00a      	beq.n	8006ac8 <JPEG_DMA_PollResidualData+0x100>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	69d9      	ldr	r1, [r3, #28]
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aba:	461a      	mov	r2, r3
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	f00a faf7 	bl	80110b0 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	625a      	str	r2, [r3, #36]	; 0x24
    }

    tmpContext = hjpeg->Context;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006acc:	613b      	str	r3, [r7, #16]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ad2:	f403 4282 	and.w	r2, r3, #16640	; 0x4100
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2200      	movs	r2, #0
 8006ade:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2201      	movs	r2, #1
 8006ae6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	f003 0303 	and.w	r3, r3, #3
 8006af0:	2b02      	cmp	r3, #2
 8006af2:	d103      	bne.n	8006afc <JPEG_DMA_PollResidualData+0x134>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f00a fb43 	bl	8011180 <HAL_JPEG_DecodeCpltCallback>
#else
      HAL_JPEG_EncodeCpltCallback(hjpeg);
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
    }
  }
}
 8006afa:	e002      	b.n	8006b02 <JPEG_DMA_PollResidualData+0x13a>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f7fe fd09 	bl	8005514 <HAL_JPEG_EncodeCpltCallback>
}
 8006b02:	bf00      	nop
 8006b04:	3718      	adds	r7, #24
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}
	...

08006b0c <JPEG_DMAInCpltCallback>:
  * @brief  DMA input transfer complete callback
  * @param  hdma pointer to a DMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_DMAInCpltCallback(DMA_HandleTypeDef *hdma)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b084      	sub	sp, #16
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b18:	60fb      	str	r3, [r7, #12]

  /* Disable The JPEG IT so the DMA Input Callback can not be interrupted by the JPEG EOC IT or JPEG HPD IT */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 8006b28:	631a      	str	r2, [r3, #48]	; 0x30

  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006b2e:	f248 030c 	movw	r3, #32780	; 0x800c
 8006b32:	4013      	ands	r3, r2
 8006b34:	2b0c      	cmp	r3, #12
 8006b36:	d163      	bne.n	8006c00 <JPEG_DMAInCpltCallback+0xf4>
      JPEG_CONTEXT_DMA) /* Check if context method is DMA and we are not in ending DMA stage */
  {
    JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_IDMA);
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006b46:	631a      	str	r2, [r3, #48]	; 0x30

    hjpeg->JpegInCount = hjpeg->InDataLength - ((hdma->Instance->NDTR & DMA_SxNDT) << 2);
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	0099      	lsls	r1, r3, #2
 8006b54:	4b2c      	ldr	r3, [pc, #176]	; (8006c08 <JPEG_DMAInCpltCallback+0xfc>)
 8006b56:	400b      	ands	r3, r1
 8006b58:	1ad2      	subs	r2, r2, r3
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	621a      	str	r2, [r3, #32]

    /*Call HAL_JPEG_GetDataCallback to get new data */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->GetDataCallback(hjpeg, hjpeg->JpegInCount);
#else
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	6a1b      	ldr	r3, [r3, #32]
 8006b62:	4619      	mov	r1, r3
 8006b64:	68f8      	ldr	r0, [r7, #12]
 8006b66:	f00a fa6f 	bl	8011048 <HAL_JPEG_GetDataCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

    if (hjpeg->InDataLength >= 4UL)
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b6e:	2b03      	cmp	r3, #3
 8006b70:	d906      	bls.n	8006b80 <JPEG_DMAInCpltCallback+0x74>
    {
      /*JPEG Input DMA transfer data number must be multiple of 32 bits word
        as the destination is a 32 bits (4 bytes) register */
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b76:	f023 0203 	bic.w	r2, r3, #3
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	629a      	str	r2, [r3, #40]	; 0x28
 8006b7e:	e006      	b.n	8006b8e <JPEG_DMAInCpltCallback+0x82>
    }
    else if (hjpeg->InDataLength > 0UL)
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d002      	beq.n	8006b8e <JPEG_DMAInCpltCallback+0x82>
    {
      /*Transfer last data word (i.e last 4 bytes)*/
      hjpeg->InDataLength = 4;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	2204      	movs	r2, #4
 8006b8c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d12a      	bne.n	8006bf0 <JPEG_DMAInCpltCallback+0xe4>
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d026      	beq.n	8006bf0 <JPEG_DMAInCpltCallback+0xe4>
    {
      /* Start DMA FIFO In transfer */
      if (HAL_DMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	699b      	ldr	r3, [r3, #24]
 8006baa:	4619      	mov	r1, r3
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	3340      	adds	r3, #64	; 0x40
 8006bb2:	461a      	mov	r2, r3
                           hjpeg->InDataLength >> 2) != HAL_OK)
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (HAL_DMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 8006bb8:	089b      	lsrs	r3, r3, #2
 8006bba:	f7fc fb85 	bl	80032c8 <HAL_DMA_Start_IT>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d00d      	beq.n	8006be0 <JPEG_DMAInCpltCallback+0xd4>
      {
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bc8:	f043 0204 	orr.w	r2, r3, #4
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	651a      	str	r2, [r3, #80]	; 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	2206      	movs	r2, #6
 8006bd4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
        hjpeg->ErrorCallback(hjpeg);
#else
        HAL_JPEG_ErrorCallback(hjpeg);
 8006bd8:	68f8      	ldr	r0, [r7, #12]
 8006bda:	f00a fac9 	bl	8011170 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
        return;
 8006bde:	e00f      	b.n	8006c00 <JPEG_DMAInCpltCallback+0xf4>
      }
      JPEG_ENABLE_DMA(hjpeg, JPEG_DMA_IDMA);
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006bee:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* JPEG Conversion still on going : Enable the JPEG IT */
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8006bfe:	631a      	str	r2, [r3, #48]	; 0x30
  }
}
 8006c00:	3710      	adds	r7, #16
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}
 8006c06:	bf00      	nop
 8006c08:	0003fffc 	.word	0x0003fffc

08006c0c <JPEG_DMAOutCpltCallback>:
  * @brief  DMA output transfer complete callback
  * @param  hdma pointer to a DMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_DMAOutCpltCallback(DMA_HandleTypeDef *hdma)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b084      	sub	sp, #16
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c18:	60fb      	str	r3, [r7, #12]

  /* Disable The JPEG IT so the DMA Output Callback can not be interrupted by the JPEG EOC IT or JPEG HPD IT */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 8006c28:	631a      	str	r2, [r3, #48]	; 0x30

  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006c2e:	f248 030c 	movw	r3, #32780	; 0x800c
 8006c32:	4013      	ands	r3, r2
 8006c34:	2b0c      	cmp	r3, #12
 8006c36:	d156      	bne.n	8006ce6 <JPEG_DMAOutCpltCallback+0xda>
      JPEG_CONTEXT_DMA) /* Check if context method is DMA and we are not in ending DMA stage */
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) == 0UL)
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c3e:	f003 0320 	and.w	r3, r3, #32
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d147      	bne.n	8006cd6 <JPEG_DMAOutCpltCallback+0xca>
    {
      JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_ODMA);
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006c54:	631a      	str	r2, [r3, #48]	; 0x30
      hjpeg->JpegOutCount = hjpeg->OutDataLength - ((hdma->Instance->NDTR & DMA_SxNDT) << 2);
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	685b      	ldr	r3, [r3, #4]
 8006c60:	0099      	lsls	r1, r3, #2
 8006c62:	4b22      	ldr	r3, [pc, #136]	; (8006cec <JPEG_DMAOutCpltCallback+0xe0>)
 8006c64:	400b      	ands	r3, r1
 8006c66:	1ad2      	subs	r2, r2, r3
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	625a      	str	r2, [r3, #36]	; 0x24

      /*Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	69d9      	ldr	r1, [r3, #28]
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c74:	461a      	mov	r2, r3
 8006c76:	68f8      	ldr	r0, [r7, #12]
 8006c78:	f00a fa1a 	bl	80110b0 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d126      	bne.n	8006cd6 <JPEG_DMAOutCpltCallback+0xca>
      {
        /* Start DMA FIFO Out transfer */
        if (HAL_DMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	3344      	adds	r3, #68	; 0x44
 8006c92:	4619      	mov	r1, r3
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	69db      	ldr	r3, [r3, #28]
 8006c98:	461a      	mov	r2, r3
                             hjpeg->OutDataLength >> 2) != HAL_OK)
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if (HAL_DMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8006c9e:	089b      	lsrs	r3, r3, #2
 8006ca0:	f7fc fb12 	bl	80032c8 <HAL_DMA_Start_IT>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d00d      	beq.n	8006cc6 <JPEG_DMAOutCpltCallback+0xba>
        {
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cae:	f043 0204 	orr.w	r2, r3, #4
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	651a      	str	r2, [r3, #80]	; 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	2206      	movs	r2, #6
 8006cba:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
          hjpeg->ErrorCallback(hjpeg);
#else
          HAL_JPEG_ErrorCallback(hjpeg);
 8006cbe:	68f8      	ldr	r0, [r7, #12]
 8006cc0:	f00a fa56 	bl	8011170 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
          return;
 8006cc4:	e00f      	b.n	8006ce6 <JPEG_DMAOutCpltCallback+0xda>
        }
        JPEG_ENABLE_DMA(hjpeg, JPEG_DMA_ODMA);
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006cd4:	631a      	str	r2, [r3, #48]	; 0x30
      }
    }

    /* JPEG Conversion still on going : Enable the JPEG IT */
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8006ce4:	631a      	str	r2, [r3, #48]	; 0x30
  }
}
 8006ce6:	3710      	adds	r7, #16
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bd80      	pop	{r7, pc}
 8006cec:	0003fffc 	.word	0x0003fffc

08006cf0 <JPEG_DMAErrorCallback>:
  * @brief  DMA Transfer error callback
  * @param  hdma pointer to a DMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_DMAErrorCallback(DMA_HandleTypeDef *hdma)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b084      	sub	sp, #16
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cfc:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f7fc fcee 	bl	80036e0 <HAL_DMA_GetError>
 8006d04:	4603      	mov	r3, r0
 8006d06:	2b02      	cmp	r3, #2
 8006d08:	d024      	beq.n	8006d54 <JPEG_DMAErrorCallback+0x64>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	681a      	ldr	r2, [r3, #0]
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f022 0201 	bic.w	r2, r2, #1
 8006d18:	601a      	str	r2, [r3, #0]

    /* Disable All Interrupts */
    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 8006d28:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable All DMA requests */
    JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_MASK);
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
 8006d38:	631a      	str	r2, [r3, #48]	; 0x30

    hjpeg->State = HAL_JPEG_STATE_READY;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2201      	movs	r2, #1
 8006d3e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d46:	f043 0204 	orr.w	r2, r3, #4
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	651a      	str	r2, [r3, #80]	; 0x50
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->ErrorCallback(hjpeg);
#else
    HAL_JPEG_ErrorCallback(hjpeg);
 8006d4e:	68f8      	ldr	r0, [r7, #12]
 8006d50:	f00a fa0e 	bl	8011170 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
  }
}
 8006d54:	bf00      	nop
 8006d56:	3710      	adds	r7, #16
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bd80      	pop	{r7, pc}

08006d5c <JPEG_DMAOutAbortCallback>:
  * @brief  DMA output Abort callback
  * @param  hdma pointer to a DMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_DMAOutAbortCallback(DMA_HandleTypeDef *hdma)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b084      	sub	sp, #16
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d68:	60fb      	str	r3, [r7, #12]

  if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d002      	beq.n	8006d7c <JPEG_DMAOutAbortCallback+0x20>
  {
    JPEG_DMA_EndProcess(hjpeg);
 8006d76:	68f8      	ldr	r0, [r7, #12]
 8006d78:	f7ff fdba 	bl	80068f0 <JPEG_DMA_EndProcess>
  }
}
 8006d7c:	bf00      	nop
 8006d7e:	3710      	adds	r7, #16
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}

08006d84 <JPEG_GetQuality>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG image quality from 1 to 100.
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b08b      	sub	sp, #44	; 0x2c
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
  uint32_t quality = 0;
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	3350      	adds	r3, #80	; 0x50
 8006d96:	61bb      	str	r3, [r7, #24]

  i = 0;
 8006d98:	2300      	movs	r3, #0
 8006d9a:	623b      	str	r3, [r7, #32]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 8006d9c:	e042      	b.n	8006e24 <JPEG_GetQuality+0xa0>
  {
    quantRow = *tableAddress;
 8006d9e:	69bb      	ldr	r3, [r7, #24]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	617b      	str	r3, [r7, #20]
    for (j = 0; j < 4UL; j++)
 8006da4:	2300      	movs	r3, #0
 8006da6:	61fb      	str	r3, [r7, #28]
 8006da8:	e033      	b.n	8006e12 <JPEG_GetQuality+0x8e>
    {
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 8006daa:	69fb      	ldr	r3, [r7, #28]
 8006dac:	00db      	lsls	r3, r3, #3
 8006dae:	697a      	ldr	r2, [r7, #20]
 8006db0:	fa22 f303 	lsr.w	r3, r2, r3
 8006db4:	b2db      	uxtb	r3, r3
 8006db6:	613b      	str	r3, [r7, #16]
      if (quantVal == 1UL)
 8006db8:	693b      	ldr	r3, [r7, #16]
 8006dba:	2b01      	cmp	r3, #1
 8006dbc:	d103      	bne.n	8006dc6 <JPEG_GetQuality+0x42>
      {
        /* if Quantization value = 1 then quality is 100%*/
        quality += 100UL;
 8006dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc0:	3364      	adds	r3, #100	; 0x64
 8006dc2:	627b      	str	r3, [r7, #36]	; 0x24
 8006dc4:	e022      	b.n	8006e0c <JPEG_GetQuality+0x88>
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 8006dc6:	693b      	ldr	r3, [r7, #16]
 8006dc8:	2264      	movs	r2, #100	; 0x64
 8006dca:	fb02 f303 	mul.w	r3, r2, r3
 8006dce:	687a      	ldr	r2, [r7, #4]
 8006dd0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006dd2:	6a38      	ldr	r0, [r7, #32]
 8006dd4:	69f9      	ldr	r1, [r7, #28]
 8006dd6:	4401      	add	r1, r0
 8006dd8:	4818      	ldr	r0, [pc, #96]	; (8006e3c <JPEG_GetQuality+0xb8>)
 8006dda:	5c41      	ldrb	r1, [r0, r1]
 8006ddc:	440a      	add	r2, r1
 8006dde:	7812      	ldrb	r2, [r2, #0]
 8006de0:	fbb3 f3f2 	udiv	r3, r3, r2
 8006de4:	60fb      	str	r3, [r7, #12]

        if (scale <= 100UL)
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	2b64      	cmp	r3, #100	; 0x64
 8006dea:	d807      	bhi.n	8006dfc <JPEG_GetQuality+0x78>
        {
          quality += (200UL - scale) / 2UL;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 8006df2:	085b      	lsrs	r3, r3, #1
 8006df4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006df6:	4413      	add	r3, r2
 8006df8:	627b      	str	r3, [r7, #36]	; 0x24
 8006dfa:	e007      	b.n	8006e0c <JPEG_GetQuality+0x88>
        }
        else
        {
          quality += 5000UL / scale;
 8006dfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e08:	4413      	add	r3, r2
 8006e0a:	627b      	str	r3, [r7, #36]	; 0x24
    for (j = 0; j < 4UL; j++)
 8006e0c:	69fb      	ldr	r3, [r7, #28]
 8006e0e:	3301      	adds	r3, #1
 8006e10:	61fb      	str	r3, [r7, #28]
 8006e12:	69fb      	ldr	r3, [r7, #28]
 8006e14:	2b03      	cmp	r3, #3
 8006e16:	d9c8      	bls.n	8006daa <JPEG_GetQuality+0x26>
        }
      }
    }

    i += 4UL;
 8006e18:	6a3b      	ldr	r3, [r7, #32]
 8006e1a:	3304      	adds	r3, #4
 8006e1c:	623b      	str	r3, [r7, #32]
    tableAddress ++;
 8006e1e:	69bb      	ldr	r3, [r7, #24]
 8006e20:	3304      	adds	r3, #4
 8006e22:	61bb      	str	r3, [r7, #24]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 8006e24:	6a3b      	ldr	r3, [r7, #32]
 8006e26:	2b3c      	cmp	r3, #60	; 0x3c
 8006e28:	d9b9      	bls.n	8006d9e <JPEG_GetQuality+0x1a>
  }

  return (quality / 64UL);
 8006e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e2c:	099b      	lsrs	r3, r3, #6
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	372c      	adds	r7, #44	; 0x2c
 8006e32:	46bd      	mov	sp, r7
 8006e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e38:	4770      	bx	lr
 8006e3a:	bf00      	nop
 8006e3c:	0801de58 	.word	0x0801de58

08006e40 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b084      	sub	sp, #16
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d101      	bne.n	8006e52 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8006e4e:	2301      	movs	r3, #1
 8006e50:	e0bf      	b.n	8006fd2 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8006e58:	b2db      	uxtb	r3, r3
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d106      	bne.n	8006e6c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2200      	movs	r2, #0
 8006e62:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f7fb f82e 	bl	8001ec8 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2202      	movs	r2, #2
 8006e70:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	699a      	ldr	r2, [r3, #24]
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8006e82:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	6999      	ldr	r1, [r3, #24]
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	685a      	ldr	r2, [r3, #4]
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	689b      	ldr	r3, [r3, #8]
 8006e92:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006e98:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	691b      	ldr	r3, [r3, #16]
 8006e9e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	430a      	orrs	r2, r1
 8006ea6:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	6899      	ldr	r1, [r3, #8]
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681a      	ldr	r2, [r3, #0]
 8006eb2:	4b4a      	ldr	r3, [pc, #296]	; (8006fdc <HAL_LTDC_Init+0x19c>)
 8006eb4:	400b      	ands	r3, r1
 8006eb6:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	695b      	ldr	r3, [r3, #20]
 8006ebc:	041b      	lsls	r3, r3, #16
 8006ebe:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	6899      	ldr	r1, [r3, #8]
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	699a      	ldr	r2, [r3, #24]
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	431a      	orrs	r2, r3
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	430a      	orrs	r2, r1
 8006ed4:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	68d9      	ldr	r1, [r3, #12]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681a      	ldr	r2, [r3, #0]
 8006ee0:	4b3e      	ldr	r3, [pc, #248]	; (8006fdc <HAL_LTDC_Init+0x19c>)
 8006ee2:	400b      	ands	r3, r1
 8006ee4:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	69db      	ldr	r3, [r3, #28]
 8006eea:	041b      	lsls	r3, r3, #16
 8006eec:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	68d9      	ldr	r1, [r3, #12]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6a1a      	ldr	r2, [r3, #32]
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	431a      	orrs	r2, r3
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	430a      	orrs	r2, r1
 8006f02:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	6919      	ldr	r1, [r3, #16]
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681a      	ldr	r2, [r3, #0]
 8006f0e:	4b33      	ldr	r3, [pc, #204]	; (8006fdc <HAL_LTDC_Init+0x19c>)
 8006f10:	400b      	ands	r3, r1
 8006f12:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f18:	041b      	lsls	r3, r3, #16
 8006f1a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	6919      	ldr	r1, [r3, #16]
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	431a      	orrs	r2, r3
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	430a      	orrs	r2, r1
 8006f30:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	6959      	ldr	r1, [r3, #20]
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681a      	ldr	r2, [r3, #0]
 8006f3c:	4b27      	ldr	r3, [pc, #156]	; (8006fdc <HAL_LTDC_Init+0x19c>)
 8006f3e:	400b      	ands	r3, r1
 8006f40:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f46:	041b      	lsls	r3, r3, #16
 8006f48:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	6959      	ldr	r1, [r3, #20]
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	431a      	orrs	r2, r3
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	430a      	orrs	r2, r1
 8006f5e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006f66:	021b      	lsls	r3, r3, #8
 8006f68:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006f70:	041b      	lsls	r3, r3, #16
 8006f72:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8006f82:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006f8a:	68ba      	ldr	r2, [r7, #8]
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	687a      	ldr	r2, [r7, #4]
 8006f92:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8006f96:	431a      	orrs	r2, r3
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	430a      	orrs	r2, r1
 8006f9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f042 0206 	orr.w	r2, r2, #6
 8006fae:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	699a      	ldr	r2, [r3, #24]
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f042 0201 	orr.w	r2, r2, #1
 8006fbe:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2201      	movs	r2, #1
 8006fcc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8006fd0:	2300      	movs	r3, #0
}
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	3710      	adds	r7, #16
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}
 8006fda:	bf00      	nop
 8006fdc:	f000f800 	.word	0xf000f800

08006fe0 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b084      	sub	sp, #16
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fee:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ff6:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	f003 0304 	and.w	r3, r3, #4
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d023      	beq.n	800704a <HAL_LTDC_IRQHandler+0x6a>
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	f003 0304 	and.w	r3, r3, #4
 8007008:	2b00      	cmp	r3, #0
 800700a:	d01e      	beq.n	800704a <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f022 0204 	bic.w	r2, r2, #4
 800701a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	2204      	movs	r2, #4
 8007022:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800702a:	f043 0201 	orr.w	r2, r3, #1
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2204      	movs	r2, #4
 8007038:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2200      	movs	r2, #0
 8007040:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f000 f86f 	bl	8007128 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	f003 0302 	and.w	r3, r3, #2
 8007050:	2b00      	cmp	r3, #0
 8007052:	d023      	beq.n	800709c <HAL_LTDC_IRQHandler+0xbc>
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	f003 0302 	and.w	r3, r3, #2
 800705a:	2b00      	cmp	r3, #0
 800705c:	d01e      	beq.n	800709c <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f022 0202 	bic.w	r2, r2, #2
 800706c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	2202      	movs	r2, #2
 8007074:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800707c:	f043 0202 	orr.w	r2, r3, #2
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2204      	movs	r2, #4
 800708a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2200      	movs	r2, #0
 8007092:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f000 f846 	bl	8007128 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	f003 0301 	and.w	r3, r3, #1
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d01b      	beq.n	80070de <HAL_LTDC_IRQHandler+0xfe>
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	f003 0301 	and.w	r3, r3, #1
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d016      	beq.n	80070de <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f022 0201 	bic.w	r2, r2, #1
 80070be:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	2201      	movs	r2, #1
 80070c6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2201      	movs	r2, #1
 80070cc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2200      	movs	r2, #0
 80070d4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f000 f82f 	bl	800713c <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	f003 0308 	and.w	r3, r3, #8
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d01b      	beq.n	8007120 <HAL_LTDC_IRQHandler+0x140>
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	f003 0308 	and.w	r3, r3, #8
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d016      	beq.n	8007120 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f022 0208 	bic.w	r2, r2, #8
 8007100:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	2208      	movs	r2, #8
 8007108:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2201      	movs	r2, #1
 800710e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2200      	movs	r2, #0
 8007116:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f000 f818 	bl	8007150 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8007120:	bf00      	nop
 8007122:	3710      	adds	r7, #16
 8007124:	46bd      	mov	sp, r7
 8007126:	bd80      	pop	{r7, pc}

08007128 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8007128:	b480      	push	{r7}
 800712a:	b083      	sub	sp, #12
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8007130:	bf00      	nop
 8007132:	370c      	adds	r7, #12
 8007134:	46bd      	mov	sp, r7
 8007136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713a:	4770      	bx	lr

0800713c <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800713c:	b480      	push	{r7}
 800713e:	b083      	sub	sp, #12
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8007144:	bf00      	nop
 8007146:	370c      	adds	r7, #12
 8007148:	46bd      	mov	sp, r7
 800714a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714e:	4770      	bx	lr

08007150 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8007150:	b480      	push	{r7}
 8007152:	b083      	sub	sp, #12
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8007158:	bf00      	nop
 800715a:	370c      	adds	r7, #12
 800715c:	46bd      	mov	sp, r7
 800715e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007162:	4770      	bx	lr

08007164 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007164:	b5b0      	push	{r4, r5, r7, lr}
 8007166:	b084      	sub	sp, #16
 8007168:	af00      	add	r7, sp, #0
 800716a:	60f8      	str	r0, [r7, #12]
 800716c:	60b9      	str	r1, [r7, #8]
 800716e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8007176:	2b01      	cmp	r3, #1
 8007178:	d101      	bne.n	800717e <HAL_LTDC_ConfigLayer+0x1a>
 800717a:	2302      	movs	r3, #2
 800717c:	e02c      	b.n	80071d8 <HAL_LTDC_ConfigLayer+0x74>
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	2201      	movs	r2, #1
 8007182:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	2202      	movs	r2, #2
 800718a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800718e:	68fa      	ldr	r2, [r7, #12]
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2134      	movs	r1, #52	; 0x34
 8007194:	fb01 f303 	mul.w	r3, r1, r3
 8007198:	4413      	add	r3, r2
 800719a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	4614      	mov	r4, r2
 80071a2:	461d      	mov	r5, r3
 80071a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80071a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80071a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80071aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80071ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80071ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80071b0:	682b      	ldr	r3, [r5, #0]
 80071b2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80071b4:	687a      	ldr	r2, [r7, #4]
 80071b6:	68b9      	ldr	r1, [r7, #8]
 80071b8:	68f8      	ldr	r0, [r7, #12]
 80071ba:	f000 f897 	bl	80072ec <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	2201      	movs	r2, #1
 80071c4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	2201      	movs	r2, #1
 80071ca:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	2200      	movs	r2, #0
 80071d2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80071d6:	2300      	movs	r3, #0
}
 80071d8:	4618      	mov	r0, r3
 80071da:	3710      	adds	r7, #16
 80071dc:	46bd      	mov	sp, r7
 80071de:	bdb0      	pop	{r4, r5, r7, pc}

080071e0 <HAL_LTDC_SetPitch>:
  * @param  LinePitchInPixels  New line pitch in pixels to configure for LTDC layer 'LayerIdx'.
  * @param  LayerIdx           LTDC layer index concerned by the modification of line pitch.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetPitch(LTDC_HandleTypeDef *hltdc, uint32_t LinePitchInPixels, uint32_t LayerIdx)
{
 80071e0:	b480      	push	{r7}
 80071e2:	b089      	sub	sp, #36	; 0x24
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	60f8      	str	r0, [r7, #12]
 80071e8:	60b9      	str	r1, [r7, #8]
 80071ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80071f2:	2b01      	cmp	r3, #1
 80071f4:	d101      	bne.n	80071fa <HAL_LTDC_SetPitch+0x1a>
 80071f6:	2302      	movs	r3, #2
 80071f8:	e06e      	b.n	80072d8 <HAL_LTDC_SetPitch+0xf8>
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	2201      	movs	r2, #1
 80071fe:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	2202      	movs	r2, #2
 8007206:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* get LayerIdx used pixel format */
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 800720a:	68fa      	ldr	r2, [r7, #12]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2134      	movs	r1, #52	; 0x34
 8007210:	fb01 f303 	mul.w	r3, r1, r3
 8007214:	4413      	add	r3, r2
 8007216:	3348      	adds	r3, #72	; 0x48
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	61bb      	str	r3, [r7, #24]

  if (pixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800721c:	69bb      	ldr	r3, [r7, #24]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d102      	bne.n	8007228 <HAL_LTDC_SetPitch+0x48>
  {
    tmp = 4U;
 8007222:	2304      	movs	r3, #4
 8007224:	61fb      	str	r3, [r7, #28]
 8007226:	e016      	b.n	8007256 <HAL_LTDC_SetPitch+0x76>
  }
  else if (pixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8007228:	69bb      	ldr	r3, [r7, #24]
 800722a:	2b01      	cmp	r3, #1
 800722c:	d102      	bne.n	8007234 <HAL_LTDC_SetPitch+0x54>
  {
    tmp = 3U;
 800722e:	2303      	movs	r3, #3
 8007230:	61fb      	str	r3, [r7, #28]
 8007232:	e010      	b.n	8007256 <HAL_LTDC_SetPitch+0x76>
  }
  else if ((pixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007234:	69bb      	ldr	r3, [r7, #24]
 8007236:	2b04      	cmp	r3, #4
 8007238:	d008      	beq.n	800724c <HAL_LTDC_SetPitch+0x6c>
 800723a:	69bb      	ldr	r3, [r7, #24]
 800723c:	2b02      	cmp	r3, #2
 800723e:	d005      	beq.n	800724c <HAL_LTDC_SetPitch+0x6c>
           (pixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007240:	69bb      	ldr	r3, [r7, #24]
 8007242:	2b03      	cmp	r3, #3
 8007244:	d002      	beq.n	800724c <HAL_LTDC_SetPitch+0x6c>
           (pixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007246:	69bb      	ldr	r3, [r7, #24]
 8007248:	2b07      	cmp	r3, #7
 800724a:	d102      	bne.n	8007252 <HAL_LTDC_SetPitch+0x72>
           (pixelFormat == LTDC_PIXEL_FORMAT_AL88))
  {
    tmp = 2U;
 800724c:	2302      	movs	r3, #2
 800724e:	61fb      	str	r3, [r7, #28]
 8007250:	e001      	b.n	8007256 <HAL_LTDC_SetPitch+0x76>
  }
  else
  {
    tmp = 1U;
 8007252:	2301      	movs	r3, #1
 8007254:	61fb      	str	r3, [r7, #28]
  }

  pitchUpdate = ((LinePitchInPixels * tmp) << 16U);
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	69fa      	ldr	r2, [r7, #28]
 800725a:	fb02 f303 	mul.w	r3, r2, r3
 800725e:	041b      	lsls	r3, r3, #16
 8007260:	617b      	str	r3, [r7, #20]

  /* Clear previously set standard pitch */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	461a      	mov	r2, r3
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	01db      	lsls	r3, r3, #7
 800726c:	4413      	add	r3, r2
 800726e:	3384      	adds	r3, #132	; 0x84
 8007270:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4619      	mov	r1, r3
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	01db      	lsls	r3, r3, #7
 800727c:	440b      	add	r3, r1
 800727e:	3384      	adds	r3, #132	; 0x84
 8007280:	4619      	mov	r1, r3
 8007282:	4b18      	ldr	r3, [pc, #96]	; (80072e4 <HAL_LTDC_SetPitch+0x104>)
 8007284:	4013      	ands	r3, r2
 8007286:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Set the Reload type as immediate update of LTDC pitch configured above */
  LTDC->SRCR |= LTDC_SRCR_IMR;
 8007288:	4b17      	ldr	r3, [pc, #92]	; (80072e8 <HAL_LTDC_SetPitch+0x108>)
 800728a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800728c:	4a16      	ldr	r2, [pc, #88]	; (80072e8 <HAL_LTDC_SetPitch+0x108>)
 800728e:	f043 0301 	orr.w	r3, r3, #1
 8007292:	6253      	str	r3, [r2, #36]	; 0x24

  /* Set new line pitch value */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR |= pitchUpdate;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	461a      	mov	r2, r3
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	01db      	lsls	r3, r3, #7
 800729e:	4413      	add	r3, r2
 80072a0:	3384      	adds	r3, #132	; 0x84
 80072a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4619      	mov	r1, r3
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	01db      	lsls	r3, r3, #7
 80072ae:	440b      	add	r3, r1
 80072b0:	3384      	adds	r3, #132	; 0x84
 80072b2:	4619      	mov	r1, r3
 80072b4:	697b      	ldr	r3, [r7, #20]
 80072b6:	4313      	orrs	r3, r2
 80072b8:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Set the Reload type as immediate update of LTDC pitch configured above */
  LTDC->SRCR |= LTDC_SRCR_IMR;
 80072ba:	4b0b      	ldr	r3, [pc, #44]	; (80072e8 <HAL_LTDC_SetPitch+0x108>)
 80072bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072be:	4a0a      	ldr	r2, [pc, #40]	; (80072e8 <HAL_LTDC_SetPitch+0x108>)
 80072c0:	f043 0301 	orr.w	r3, r3, #1
 80072c4:	6253      	str	r3, [r2, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	2201      	movs	r2, #1
 80072ca:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	2200      	movs	r2, #0
 80072d2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80072d6:	2300      	movs	r3, #0
}
 80072d8:	4618      	mov	r0, r3
 80072da:	3724      	adds	r7, #36	; 0x24
 80072dc:	46bd      	mov	sp, r7
 80072de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e2:	4770      	bx	lr
 80072e4:	e000ffff 	.word	0xe000ffff
 80072e8:	40016800 	.word	0x40016800

080072ec <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80072ec:	b480      	push	{r7}
 80072ee:	b089      	sub	sp, #36	; 0x24
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	60f8      	str	r0, [r7, #12]
 80072f4:	60b9      	str	r1, [r7, #8]
 80072f6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	685a      	ldr	r2, [r3, #4]
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	68db      	ldr	r3, [r3, #12]
 8007302:	0c1b      	lsrs	r3, r3, #16
 8007304:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007308:	4413      	add	r3, r2
 800730a:	041b      	lsls	r3, r3, #16
 800730c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	461a      	mov	r2, r3
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	01db      	lsls	r3, r3, #7
 8007318:	4413      	add	r3, r2
 800731a:	3384      	adds	r3, #132	; 0x84
 800731c:	685b      	ldr	r3, [r3, #4]
 800731e:	68fa      	ldr	r2, [r7, #12]
 8007320:	6812      	ldr	r2, [r2, #0]
 8007322:	4611      	mov	r1, r2
 8007324:	687a      	ldr	r2, [r7, #4]
 8007326:	01d2      	lsls	r2, r2, #7
 8007328:	440a      	add	r2, r1
 800732a:	3284      	adds	r2, #132	; 0x84
 800732c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8007330:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007332:	68bb      	ldr	r3, [r7, #8]
 8007334:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	68db      	ldr	r3, [r3, #12]
 800733c:	0c1b      	lsrs	r3, r3, #16
 800733e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007342:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007344:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4619      	mov	r1, r3
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	01db      	lsls	r3, r3, #7
 8007350:	440b      	add	r3, r1
 8007352:	3384      	adds	r3, #132	; 0x84
 8007354:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007356:	69fb      	ldr	r3, [r7, #28]
 8007358:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800735a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	68da      	ldr	r2, [r3, #12]
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	68db      	ldr	r3, [r3, #12]
 8007366:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800736a:	4413      	add	r3, r2
 800736c:	041b      	lsls	r3, r3, #16
 800736e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	461a      	mov	r2, r3
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	01db      	lsls	r3, r3, #7
 800737a:	4413      	add	r3, r2
 800737c:	3384      	adds	r3, #132	; 0x84
 800737e:	689b      	ldr	r3, [r3, #8]
 8007380:	68fa      	ldr	r2, [r7, #12]
 8007382:	6812      	ldr	r2, [r2, #0]
 8007384:	4611      	mov	r1, r2
 8007386:	687a      	ldr	r2, [r7, #4]
 8007388:	01d2      	lsls	r2, r2, #7
 800738a:	440a      	add	r2, r1
 800738c:	3284      	adds	r2, #132	; 0x84
 800738e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8007392:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	689a      	ldr	r2, [r3, #8]
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	68db      	ldr	r3, [r3, #12]
 800739e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80073a2:	4413      	add	r3, r2
 80073a4:	1c5a      	adds	r2, r3, #1
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4619      	mov	r1, r3
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	01db      	lsls	r3, r3, #7
 80073b0:	440b      	add	r3, r1
 80073b2:	3384      	adds	r3, #132	; 0x84
 80073b4:	4619      	mov	r1, r3
 80073b6:	69fb      	ldr	r3, [r7, #28]
 80073b8:	4313      	orrs	r3, r2
 80073ba:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	461a      	mov	r2, r3
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	01db      	lsls	r3, r3, #7
 80073c6:	4413      	add	r3, r2
 80073c8:	3384      	adds	r3, #132	; 0x84
 80073ca:	691b      	ldr	r3, [r3, #16]
 80073cc:	68fa      	ldr	r2, [r7, #12]
 80073ce:	6812      	ldr	r2, [r2, #0]
 80073d0:	4611      	mov	r1, r2
 80073d2:	687a      	ldr	r2, [r7, #4]
 80073d4:	01d2      	lsls	r2, r2, #7
 80073d6:	440a      	add	r2, r1
 80073d8:	3284      	adds	r2, #132	; 0x84
 80073da:	f023 0307 	bic.w	r3, r3, #7
 80073de:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	461a      	mov	r2, r3
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	01db      	lsls	r3, r3, #7
 80073ea:	4413      	add	r3, r2
 80073ec:	3384      	adds	r3, #132	; 0x84
 80073ee:	461a      	mov	r2, r3
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	691b      	ldr	r3, [r3, #16]
 80073f4:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80073fc:	021b      	lsls	r3, r3, #8
 80073fe:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8007406:	041b      	lsls	r3, r3, #16
 8007408:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	699b      	ldr	r3, [r3, #24]
 800740e:	061b      	lsls	r3, r3, #24
 8007410:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	461a      	mov	r2, r3
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	01db      	lsls	r3, r3, #7
 800741c:	4413      	add	r3, r2
 800741e:	3384      	adds	r3, #132	; 0x84
 8007420:	699b      	ldr	r3, [r3, #24]
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	461a      	mov	r2, r3
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	01db      	lsls	r3, r3, #7
 800742c:	4413      	add	r3, r2
 800742e:	3384      	adds	r3, #132	; 0x84
 8007430:	461a      	mov	r2, r3
 8007432:	2300      	movs	r3, #0
 8007434:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800743c:	461a      	mov	r2, r3
 800743e:	69fb      	ldr	r3, [r7, #28]
 8007440:	431a      	orrs	r2, r3
 8007442:	69bb      	ldr	r3, [r7, #24]
 8007444:	431a      	orrs	r2, r3
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4619      	mov	r1, r3
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	01db      	lsls	r3, r3, #7
 8007450:	440b      	add	r3, r1
 8007452:	3384      	adds	r3, #132	; 0x84
 8007454:	4619      	mov	r1, r3
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	4313      	orrs	r3, r2
 800745a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	461a      	mov	r2, r3
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	01db      	lsls	r3, r3, #7
 8007466:	4413      	add	r3, r2
 8007468:	3384      	adds	r3, #132	; 0x84
 800746a:	695b      	ldr	r3, [r3, #20]
 800746c:	68fa      	ldr	r2, [r7, #12]
 800746e:	6812      	ldr	r2, [r2, #0]
 8007470:	4611      	mov	r1, r2
 8007472:	687a      	ldr	r2, [r7, #4]
 8007474:	01d2      	lsls	r2, r2, #7
 8007476:	440a      	add	r2, r1
 8007478:	3284      	adds	r2, #132	; 0x84
 800747a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800747e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	461a      	mov	r2, r3
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	01db      	lsls	r3, r3, #7
 800748a:	4413      	add	r3, r2
 800748c:	3384      	adds	r3, #132	; 0x84
 800748e:	461a      	mov	r2, r3
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	695b      	ldr	r3, [r3, #20]
 8007494:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	461a      	mov	r2, r3
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	01db      	lsls	r3, r3, #7
 80074a0:	4413      	add	r3, r2
 80074a2:	3384      	adds	r3, #132	; 0x84
 80074a4:	69da      	ldr	r2, [r3, #28]
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	4619      	mov	r1, r3
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	01db      	lsls	r3, r3, #7
 80074b0:	440b      	add	r3, r1
 80074b2:	3384      	adds	r3, #132	; 0x84
 80074b4:	4619      	mov	r1, r3
 80074b6:	4b58      	ldr	r3, [pc, #352]	; (8007618 <LTDC_SetConfig+0x32c>)
 80074b8:	4013      	ands	r3, r2
 80074ba:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	69da      	ldr	r2, [r3, #28]
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	6a1b      	ldr	r3, [r3, #32]
 80074c4:	68f9      	ldr	r1, [r7, #12]
 80074c6:	6809      	ldr	r1, [r1, #0]
 80074c8:	4608      	mov	r0, r1
 80074ca:	6879      	ldr	r1, [r7, #4]
 80074cc:	01c9      	lsls	r1, r1, #7
 80074ce:	4401      	add	r1, r0
 80074d0:	3184      	adds	r1, #132	; 0x84
 80074d2:	4313      	orrs	r3, r2
 80074d4:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	461a      	mov	r2, r3
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	01db      	lsls	r3, r3, #7
 80074e0:	4413      	add	r3, r2
 80074e2:	3384      	adds	r3, #132	; 0x84
 80074e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	461a      	mov	r2, r3
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	01db      	lsls	r3, r3, #7
 80074f0:	4413      	add	r3, r2
 80074f2:	3384      	adds	r3, #132	; 0x84
 80074f4:	461a      	mov	r2, r3
 80074f6:	2300      	movs	r3, #0
 80074f8:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	461a      	mov	r2, r3
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	01db      	lsls	r3, r3, #7
 8007504:	4413      	add	r3, r2
 8007506:	3384      	adds	r3, #132	; 0x84
 8007508:	461a      	mov	r2, r3
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800750e:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	691b      	ldr	r3, [r3, #16]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d102      	bne.n	800751e <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8007518:	2304      	movs	r3, #4
 800751a:	61fb      	str	r3, [r7, #28]
 800751c:	e01b      	b.n	8007556 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	691b      	ldr	r3, [r3, #16]
 8007522:	2b01      	cmp	r3, #1
 8007524:	d102      	bne.n	800752c <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8007526:	2303      	movs	r3, #3
 8007528:	61fb      	str	r3, [r7, #28]
 800752a:	e014      	b.n	8007556 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	691b      	ldr	r3, [r3, #16]
 8007530:	2b04      	cmp	r3, #4
 8007532:	d00b      	beq.n	800754c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007538:	2b02      	cmp	r3, #2
 800753a:	d007      	beq.n	800754c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007540:	2b03      	cmp	r3, #3
 8007542:	d003      	beq.n	800754c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007548:	2b07      	cmp	r3, #7
 800754a:	d102      	bne.n	8007552 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800754c:	2302      	movs	r3, #2
 800754e:	61fb      	str	r3, [r7, #28]
 8007550:	e001      	b.n	8007556 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8007552:	2301      	movs	r3, #1
 8007554:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	461a      	mov	r2, r3
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	01db      	lsls	r3, r3, #7
 8007560:	4413      	add	r3, r2
 8007562:	3384      	adds	r3, #132	; 0x84
 8007564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007566:	68fa      	ldr	r2, [r7, #12]
 8007568:	6812      	ldr	r2, [r2, #0]
 800756a:	4611      	mov	r1, r2
 800756c:	687a      	ldr	r2, [r7, #4]
 800756e:	01d2      	lsls	r2, r2, #7
 8007570:	440a      	add	r2, r1
 8007572:	3284      	adds	r2, #132	; 0x84
 8007574:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8007578:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800757e:	69fa      	ldr	r2, [r7, #28]
 8007580:	fb02 f303 	mul.w	r3, r2, r3
 8007584:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8007586:	68bb      	ldr	r3, [r7, #8]
 8007588:	6859      	ldr	r1, [r3, #4]
 800758a:	68bb      	ldr	r3, [r7, #8]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	1acb      	subs	r3, r1, r3
 8007590:	69f9      	ldr	r1, [r7, #28]
 8007592:	fb01 f303 	mul.w	r3, r1, r3
 8007596:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8007598:	68f9      	ldr	r1, [r7, #12]
 800759a:	6809      	ldr	r1, [r1, #0]
 800759c:	4608      	mov	r0, r1
 800759e:	6879      	ldr	r1, [r7, #4]
 80075a0:	01c9      	lsls	r1, r1, #7
 80075a2:	4401      	add	r1, r0
 80075a4:	3184      	adds	r1, #132	; 0x84
 80075a6:	4313      	orrs	r3, r2
 80075a8:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	461a      	mov	r2, r3
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	01db      	lsls	r3, r3, #7
 80075b4:	4413      	add	r3, r2
 80075b6:	3384      	adds	r3, #132	; 0x84
 80075b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	4619      	mov	r1, r3
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	01db      	lsls	r3, r3, #7
 80075c4:	440b      	add	r3, r1
 80075c6:	3384      	adds	r3, #132	; 0x84
 80075c8:	4619      	mov	r1, r3
 80075ca:	4b14      	ldr	r3, [pc, #80]	; (800761c <LTDC_SetConfig+0x330>)
 80075cc:	4013      	ands	r3, r2
 80075ce:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	461a      	mov	r2, r3
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	01db      	lsls	r3, r3, #7
 80075da:	4413      	add	r3, r2
 80075dc:	3384      	adds	r3, #132	; 0x84
 80075de:	461a      	mov	r2, r3
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075e4:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	461a      	mov	r2, r3
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	01db      	lsls	r3, r3, #7
 80075f0:	4413      	add	r3, r2
 80075f2:	3384      	adds	r3, #132	; 0x84
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	68fa      	ldr	r2, [r7, #12]
 80075f8:	6812      	ldr	r2, [r2, #0]
 80075fa:	4611      	mov	r1, r2
 80075fc:	687a      	ldr	r2, [r7, #4]
 80075fe:	01d2      	lsls	r2, r2, #7
 8007600:	440a      	add	r2, r1
 8007602:	3284      	adds	r2, #132	; 0x84
 8007604:	f043 0301 	orr.w	r3, r3, #1
 8007608:	6013      	str	r3, [r2, #0]
}
 800760a:	bf00      	nop
 800760c:	3724      	adds	r7, #36	; 0x24
 800760e:	46bd      	mov	sp, r7
 8007610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007614:	4770      	bx	lr
 8007616:	bf00      	nop
 8007618:	fffff8f8 	.word	0xfffff8f8
 800761c:	fffff800 	.word	0xfffff800

08007620 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b082      	sub	sp, #8
 8007624:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8007626:	2300      	movs	r3, #0
 8007628:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800762a:	4b23      	ldr	r3, [pc, #140]	; (80076b8 <HAL_PWREx_EnableOverDrive+0x98>)
 800762c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800762e:	4a22      	ldr	r2, [pc, #136]	; (80076b8 <HAL_PWREx_EnableOverDrive+0x98>)
 8007630:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007634:	6413      	str	r3, [r2, #64]	; 0x40
 8007636:	4b20      	ldr	r3, [pc, #128]	; (80076b8 <HAL_PWREx_EnableOverDrive+0x98>)
 8007638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800763a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800763e:	603b      	str	r3, [r7, #0]
 8007640:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8007642:	4b1e      	ldr	r3, [pc, #120]	; (80076bc <HAL_PWREx_EnableOverDrive+0x9c>)
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	4a1d      	ldr	r2, [pc, #116]	; (80076bc <HAL_PWREx_EnableOverDrive+0x9c>)
 8007648:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800764c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800764e:	f7fb fb15 	bl	8002c7c <HAL_GetTick>
 8007652:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007654:	e009      	b.n	800766a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007656:	f7fb fb11 	bl	8002c7c <HAL_GetTick>
 800765a:	4602      	mov	r2, r0
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	1ad3      	subs	r3, r2, r3
 8007660:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007664:	d901      	bls.n	800766a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8007666:	2303      	movs	r3, #3
 8007668:	e022      	b.n	80076b0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800766a:	4b14      	ldr	r3, [pc, #80]	; (80076bc <HAL_PWREx_EnableOverDrive+0x9c>)
 800766c:	685b      	ldr	r3, [r3, #4]
 800766e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007672:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007676:	d1ee      	bne.n	8007656 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8007678:	4b10      	ldr	r3, [pc, #64]	; (80076bc <HAL_PWREx_EnableOverDrive+0x9c>)
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	4a0f      	ldr	r2, [pc, #60]	; (80076bc <HAL_PWREx_EnableOverDrive+0x9c>)
 800767e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007682:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007684:	f7fb fafa 	bl	8002c7c <HAL_GetTick>
 8007688:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800768a:	e009      	b.n	80076a0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800768c:	f7fb faf6 	bl	8002c7c <HAL_GetTick>
 8007690:	4602      	mov	r2, r0
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	1ad3      	subs	r3, r2, r3
 8007696:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800769a:	d901      	bls.n	80076a0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800769c:	2303      	movs	r3, #3
 800769e:	e007      	b.n	80076b0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80076a0:	4b06      	ldr	r3, [pc, #24]	; (80076bc <HAL_PWREx_EnableOverDrive+0x9c>)
 80076a2:	685b      	ldr	r3, [r3, #4]
 80076a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80076ac:	d1ee      	bne.n	800768c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80076ae:	2300      	movs	r3, #0
}
 80076b0:	4618      	mov	r0, r3
 80076b2:	3708      	adds	r7, #8
 80076b4:	46bd      	mov	sp, r7
 80076b6:	bd80      	pop	{r7, pc}
 80076b8:	40023800 	.word	0x40023800
 80076bc:	40007000 	.word	0x40007000

080076c0 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b086      	sub	sp, #24
 80076c4:	af02      	add	r7, sp, #8
 80076c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80076c8:	f7fb fad8 	bl	8002c7c <HAL_GetTick>
 80076cc:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d101      	bne.n	80076d8 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80076d4:	2301      	movs	r3, #1
 80076d6:	e067      	b.n	80077a8 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80076de:	b2db      	uxtb	r3, r3
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d10b      	bne.n	80076fc <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2200      	movs	r2, #0
 80076e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80076ec:	6878      	ldr	r0, [r7, #4]
 80076ee:	f7fa fc31 	bl	8001f54 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80076f2:	f241 3188 	movw	r1, #5000	; 0x1388
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f000 fac4 	bl	8007c84 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	689b      	ldr	r3, [r3, #8]
 800770a:	3b01      	subs	r3, #1
 800770c:	021a      	lsls	r2, r3, #8
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	430a      	orrs	r2, r1
 8007714:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800771a:	9300      	str	r3, [sp, #0]
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	2200      	movs	r2, #0
 8007720:	2120      	movs	r1, #32
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f000 fabc 	bl	8007ca0 <QSPI_WaitFlagStateUntilTimeout>
 8007728:	4603      	mov	r3, r0
 800772a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800772c:	7afb      	ldrb	r3, [r7, #11]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d135      	bne.n	800779e <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	681a      	ldr	r2, [r3, #0]
 8007738:	4b1d      	ldr	r3, [pc, #116]	; (80077b0 <HAL_QSPI_Init+0xf0>)
 800773a:	4013      	ands	r3, r2
 800773c:	687a      	ldr	r2, [r7, #4]
 800773e:	6852      	ldr	r2, [r2, #4]
 8007740:	0611      	lsls	r1, r2, #24
 8007742:	687a      	ldr	r2, [r7, #4]
 8007744:	68d2      	ldr	r2, [r2, #12]
 8007746:	4311      	orrs	r1, r2
 8007748:	687a      	ldr	r2, [r7, #4]
 800774a:	69d2      	ldr	r2, [r2, #28]
 800774c:	4311      	orrs	r1, r2
 800774e:	687a      	ldr	r2, [r7, #4]
 8007750:	6a12      	ldr	r2, [r2, #32]
 8007752:	4311      	orrs	r1, r2
 8007754:	687a      	ldr	r2, [r7, #4]
 8007756:	6812      	ldr	r2, [r2, #0]
 8007758:	430b      	orrs	r3, r1
 800775a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	685a      	ldr	r2, [r3, #4]
 8007762:	4b14      	ldr	r3, [pc, #80]	; (80077b4 <HAL_QSPI_Init+0xf4>)
 8007764:	4013      	ands	r3, r2
 8007766:	687a      	ldr	r2, [r7, #4]
 8007768:	6912      	ldr	r2, [r2, #16]
 800776a:	0411      	lsls	r1, r2, #16
 800776c:	687a      	ldr	r2, [r7, #4]
 800776e:	6952      	ldr	r2, [r2, #20]
 8007770:	4311      	orrs	r1, r2
 8007772:	687a      	ldr	r2, [r7, #4]
 8007774:	6992      	ldr	r2, [r2, #24]
 8007776:	4311      	orrs	r1, r2
 8007778:	687a      	ldr	r2, [r7, #4]
 800777a:	6812      	ldr	r2, [r2, #0]
 800777c:	430b      	orrs	r3, r1
 800777e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	681a      	ldr	r2, [r3, #0]
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f042 0201 	orr.w	r2, r2, #1
 800778e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2200      	movs	r2, #0
 8007794:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2201      	movs	r2, #1
 800779a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2200      	movs	r2, #0
 80077a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80077a6:	7afb      	ldrb	r3, [r7, #11]
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	3710      	adds	r7, #16
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bd80      	pop	{r7, pc}
 80077b0:	00ffff2f 	.word	0x00ffff2f
 80077b4:	ffe0f8fe 	.word	0xffe0f8fe

080077b8 <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b088      	sub	sp, #32
 80077bc:	af02      	add	r7, sp, #8
 80077be:	60f8      	str	r0, [r7, #12]
 80077c0:	60b9      	str	r1, [r7, #8]
 80077c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80077c4:	f7fb fa5a 	bl	8002c7c <HAL_GetTick>
 80077c8:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80077d0:	b2db      	uxtb	r3, r3
 80077d2:	2b01      	cmp	r3, #1
 80077d4:	d101      	bne.n	80077da <HAL_QSPI_Command+0x22>
 80077d6:	2302      	movs	r3, #2
 80077d8:	e048      	b.n	800786c <HAL_QSPI_Command+0xb4>
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	2201      	movs	r2, #1
 80077de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80077e8:	b2db      	uxtb	r3, r3
 80077ea:	2b01      	cmp	r3, #1
 80077ec:	d137      	bne.n	800785e <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	2200      	movs	r2, #0
 80077f2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	2202      	movs	r2, #2
 80077f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	9300      	str	r3, [sp, #0]
 8007800:	693b      	ldr	r3, [r7, #16]
 8007802:	2200      	movs	r2, #0
 8007804:	2120      	movs	r1, #32
 8007806:	68f8      	ldr	r0, [r7, #12]
 8007808:	f000 fa4a 	bl	8007ca0 <QSPI_WaitFlagStateUntilTimeout>
 800780c:	4603      	mov	r3, r0
 800780e:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8007810:	7dfb      	ldrb	r3, [r7, #23]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d125      	bne.n	8007862 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8007816:	2200      	movs	r2, #0
 8007818:	68b9      	ldr	r1, [r7, #8]
 800781a:	68f8      	ldr	r0, [r7, #12]
 800781c:	f000 fa77 	bl	8007d0e <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007824:	2b00      	cmp	r3, #0
 8007826:	d115      	bne.n	8007854 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	9300      	str	r3, [sp, #0]
 800782c:	693b      	ldr	r3, [r7, #16]
 800782e:	2201      	movs	r2, #1
 8007830:	2102      	movs	r1, #2
 8007832:	68f8      	ldr	r0, [r7, #12]
 8007834:	f000 fa34 	bl	8007ca0 <QSPI_WaitFlagStateUntilTimeout>
 8007838:	4603      	mov	r3, r0
 800783a:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 800783c:	7dfb      	ldrb	r3, [r7, #23]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d10f      	bne.n	8007862 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	2202      	movs	r2, #2
 8007848:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	2201      	movs	r2, #1
 800784e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007852:	e006      	b.n	8007862 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	2201      	movs	r2, #1
 8007858:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800785c:	e001      	b.n	8007862 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800785e:	2302      	movs	r3, #2
 8007860:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	2200      	movs	r2, #0
 8007866:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800786a:	7dfb      	ldrb	r3, [r7, #23]
}
 800786c:	4618      	mov	r0, r3
 800786e:	3718      	adds	r7, #24
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}

08007874 <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b08a      	sub	sp, #40	; 0x28
 8007878:	af02      	add	r7, sp, #8
 800787a:	60f8      	str	r0, [r7, #12]
 800787c:	60b9      	str	r1, [r7, #8]
 800787e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007880:	2300      	movs	r3, #0
 8007882:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8007884:	f7fb f9fa 	bl	8002c7c <HAL_GetTick>
 8007888:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	3320      	adds	r3, #32
 8007890:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007898:	b2db      	uxtb	r3, r3
 800789a:	2b01      	cmp	r3, #1
 800789c:	d101      	bne.n	80078a2 <HAL_QSPI_Transmit+0x2e>
 800789e:	2302      	movs	r3, #2
 80078a0:	e076      	b.n	8007990 <HAL_QSPI_Transmit+0x11c>
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	2201      	movs	r2, #1
 80078a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80078b0:	b2db      	uxtb	r3, r3
 80078b2:	2b01      	cmp	r3, #1
 80078b4:	d165      	bne.n	8007982 <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	2200      	movs	r2, #0
 80078ba:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d056      	beq.n	8007970 <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	2212      	movs	r2, #18
 80078c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	691b      	ldr	r3, [r3, #16]
 80078d0:	1c5a      	adds	r2, r3, #1
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	691b      	ldr	r3, [r3, #16]
 80078dc:	1c5a      	adds	r2, r3, #1
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	68ba      	ldr	r2, [r7, #8]
 80078e6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	695a      	ldr	r2, [r3, #20]
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80078f6:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 80078f8:	e01b      	b.n	8007932 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	9300      	str	r3, [sp, #0]
 80078fe:	69bb      	ldr	r3, [r7, #24]
 8007900:	2201      	movs	r2, #1
 8007902:	2104      	movs	r1, #4
 8007904:	68f8      	ldr	r0, [r7, #12]
 8007906:	f000 f9cb 	bl	8007ca0 <QSPI_WaitFlagStateUntilTimeout>
 800790a:	4603      	mov	r3, r0
 800790c:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 800790e:	7ffb      	ldrb	r3, [r7, #31]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d113      	bne.n	800793c <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007918:	781a      	ldrb	r2, [r3, #0]
 800791a:	697b      	ldr	r3, [r7, #20]
 800791c:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007922:	1c5a      	adds	r2, r3, #1
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800792c:	1e5a      	subs	r2, r3, #1
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007936:	2b00      	cmp	r3, #0
 8007938:	d1df      	bne.n	80078fa <HAL_QSPI_Transmit+0x86>
 800793a:	e000      	b.n	800793e <HAL_QSPI_Transmit+0xca>
          break;
 800793c:	bf00      	nop
      }

      if (status == HAL_OK)
 800793e:	7ffb      	ldrb	r3, [r7, #31]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d110      	bne.n	8007966 <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	9300      	str	r3, [sp, #0]
 8007948:	69bb      	ldr	r3, [r7, #24]
 800794a:	2201      	movs	r2, #1
 800794c:	2102      	movs	r1, #2
 800794e:	68f8      	ldr	r0, [r7, #12]
 8007950:	f000 f9a6 	bl	8007ca0 <QSPI_WaitFlagStateUntilTimeout>
 8007954:	4603      	mov	r3, r0
 8007956:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8007958:	7ffb      	ldrb	r3, [r7, #31]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d103      	bne.n	8007966 <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	2202      	movs	r2, #2
 8007964:	60da      	str	r2, [r3, #12]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	2201      	movs	r2, #1
 800796a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800796e:	e00a      	b.n	8007986 <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007974:	f043 0208 	orr.w	r2, r3, #8
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800797c:	2301      	movs	r3, #1
 800797e:	77fb      	strb	r3, [r7, #31]
 8007980:	e001      	b.n	8007986 <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
 8007982:	2302      	movs	r3, #2
 8007984:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	2200      	movs	r2, #0
 800798a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 800798e:	7ffb      	ldrb	r3, [r7, #31]
}
 8007990:	4618      	mov	r0, r3
 8007992:	3720      	adds	r7, #32
 8007994:	46bd      	mov	sp, r7
 8007996:	bd80      	pop	{r7, pc}

08007998 <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b08a      	sub	sp, #40	; 0x28
 800799c:	af02      	add	r7, sp, #8
 800799e:	60f8      	str	r0, [r7, #12]
 80079a0:	60b9      	str	r1, [r7, #8]
 80079a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80079a4:	2300      	movs	r3, #0
 80079a6:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 80079a8:	f7fb f968 	bl	8002c7c <HAL_GetTick>
 80079ac:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	699b      	ldr	r3, [r3, #24]
 80079b4:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	3320      	adds	r3, #32
 80079bc:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80079c4:	b2db      	uxtb	r3, r3
 80079c6:	2b01      	cmp	r3, #1
 80079c8:	d101      	bne.n	80079ce <HAL_QSPI_Receive+0x36>
 80079ca:	2302      	movs	r3, #2
 80079cc:	e07d      	b.n	8007aca <HAL_QSPI_Receive+0x132>
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	2201      	movs	r2, #1
 80079d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80079dc:	b2db      	uxtb	r3, r3
 80079de:	2b01      	cmp	r3, #1
 80079e0:	d16c      	bne.n	8007abc <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	2200      	movs	r2, #0
 80079e6:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 80079e8:	68bb      	ldr	r3, [r7, #8]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d05d      	beq.n	8007aaa <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	2222      	movs	r2, #34	; 0x22
 80079f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	691b      	ldr	r3, [r3, #16]
 80079fc:	1c5a      	adds	r2, r3, #1
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	691b      	ldr	r3, [r3, #16]
 8007a08:	1c5a      	adds	r2, r3, #1
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	68ba      	ldr	r2, [r7, #8]
 8007a12:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	695b      	ldr	r3, [r3, #20]
 8007a1a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8007a26:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	697a      	ldr	r2, [r7, #20]
 8007a2e:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 8007a30:	e01c      	b.n	8007a6c <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	9300      	str	r3, [sp, #0]
 8007a36:	69bb      	ldr	r3, [r7, #24]
 8007a38:	2201      	movs	r2, #1
 8007a3a:	2106      	movs	r1, #6
 8007a3c:	68f8      	ldr	r0, [r7, #12]
 8007a3e:	f000 f92f 	bl	8007ca0 <QSPI_WaitFlagStateUntilTimeout>
 8007a42:	4603      	mov	r3, r0
 8007a44:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 8007a46:	7ffb      	ldrb	r3, [r7, #31]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d114      	bne.n	8007a76 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a50:	693a      	ldr	r2, [r7, #16]
 8007a52:	7812      	ldrb	r2, [r2, #0]
 8007a54:	b2d2      	uxtb	r2, r2
 8007a56:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a5c:	1c5a      	adds	r2, r3, #1
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a66:	1e5a      	subs	r2, r3, #1
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d1de      	bne.n	8007a32 <HAL_QSPI_Receive+0x9a>
 8007a74:	e000      	b.n	8007a78 <HAL_QSPI_Receive+0xe0>
          break;
 8007a76:	bf00      	nop
      }

      if (status == HAL_OK)
 8007a78:	7ffb      	ldrb	r3, [r7, #31]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d110      	bne.n	8007aa0 <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	9300      	str	r3, [sp, #0]
 8007a82:	69bb      	ldr	r3, [r7, #24]
 8007a84:	2201      	movs	r2, #1
 8007a86:	2102      	movs	r1, #2
 8007a88:	68f8      	ldr	r0, [r7, #12]
 8007a8a:	f000 f909 	bl	8007ca0 <QSPI_WaitFlagStateUntilTimeout>
 8007a8e:	4603      	mov	r3, r0
 8007a90:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 8007a92:	7ffb      	ldrb	r3, [r7, #31]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d103      	bne.n	8007aa0 <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	2202      	movs	r2, #2
 8007a9e:	60da      	str	r2, [r3, #12]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	2201      	movs	r2, #1
 8007aa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007aa8:	e00a      	b.n	8007ac0 <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007aae:	f043 0208 	orr.w	r2, r3, #8
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	77fb      	strb	r3, [r7, #31]
 8007aba:	e001      	b.n	8007ac0 <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
 8007abc:	2302      	movs	r3, #2
 8007abe:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 8007ac8:	7ffb      	ldrb	r3, [r7, #31]
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	3720      	adds	r7, #32
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}

08007ad2 <HAL_QSPI_AutoPolling>:
  * @param  Timeout Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 8007ad2:	b580      	push	{r7, lr}
 8007ad4:	b088      	sub	sp, #32
 8007ad6:	af02      	add	r7, sp, #8
 8007ad8:	60f8      	str	r0, [r7, #12]
 8007ada:	60b9      	str	r1, [r7, #8]
 8007adc:	607a      	str	r2, [r7, #4]
 8007ade:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8007ae0:	f7fb f8cc 	bl	8002c7c <HAL_GetTick>
 8007ae4:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007aec:	b2db      	uxtb	r3, r3
 8007aee:	2b01      	cmp	r3, #1
 8007af0:	d101      	bne.n	8007af6 <HAL_QSPI_AutoPolling+0x24>
 8007af2:	2302      	movs	r3, #2
 8007af4:	e060      	b.n	8007bb8 <HAL_QSPI_AutoPolling+0xe6>
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	2201      	movs	r2, #1
 8007afa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007b04:	b2db      	uxtb	r3, r3
 8007b06:	2b01      	cmp	r3, #1
 8007b08:	d14f      	bne.n	8007baa <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	2242      	movs	r2, #66	; 0x42
 8007b14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	9300      	str	r3, [sp, #0]
 8007b1c:	693b      	ldr	r3, [r7, #16]
 8007b1e:	2200      	movs	r2, #0
 8007b20:	2120      	movs	r1, #32
 8007b22:	68f8      	ldr	r0, [r7, #12]
 8007b24:	f000 f8bc 	bl	8007ca0 <QSPI_WaitFlagStateUntilTimeout>
 8007b28:	4603      	mov	r3, r0
 8007b2a:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8007b2c:	7dfb      	ldrb	r3, [r7, #23]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d13d      	bne.n	8007bae <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	687a      	ldr	r2, [r7, #4]
 8007b38:	6812      	ldr	r2, [r2, #0]
 8007b3a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	687a      	ldr	r2, [r7, #4]
 8007b42:	6852      	ldr	r2, [r2, #4]
 8007b44:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	687a      	ldr	r2, [r7, #4]
 8007b4c:	6892      	ldr	r2, [r2, #8]
 8007b4e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	691b      	ldr	r3, [r3, #16]
 8007b5e:	431a      	orrs	r2, r3
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8007b68:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	68da      	ldr	r2, [r3, #12]
 8007b6e:	68bb      	ldr	r3, [r7, #8]
 8007b70:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8007b72:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007b76:	68b9      	ldr	r1, [r7, #8]
 8007b78:	68f8      	ldr	r0, [r7, #12]
 8007b7a:	f000 f8c8 	bl	8007d0e <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	9300      	str	r3, [sp, #0]
 8007b82:	693b      	ldr	r3, [r7, #16]
 8007b84:	2201      	movs	r2, #1
 8007b86:	2108      	movs	r1, #8
 8007b88:	68f8      	ldr	r0, [r7, #12]
 8007b8a:	f000 f889 	bl	8007ca0 <QSPI_WaitFlagStateUntilTimeout>
 8007b8e:	4603      	mov	r3, r0
 8007b90:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8007b92:	7dfb      	ldrb	r3, [r7, #23]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d10a      	bne.n	8007bae <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	2208      	movs	r2, #8
 8007b9e:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	2201      	movs	r2, #1
 8007ba4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007ba8:	e001      	b.n	8007bae <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8007baa:	2302      	movs	r3, #2
 8007bac:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8007bb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bb8:	4618      	mov	r0, r3
 8007bba:	3718      	adds	r7, #24
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	bd80      	pop	{r7, pc}

08007bc0 <HAL_QSPI_MemoryMapped>:
  * @param  cfg structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_MemoryMapped(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_MemoryMappedTypeDef *cfg)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b088      	sub	sp, #32
 8007bc4:	af02      	add	r7, sp, #8
 8007bc6:	60f8      	str	r0, [r7, #12]
 8007bc8:	60b9      	str	r1, [r7, #8]
 8007bca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8007bcc:	f7fb f856 	bl	8002c7c <HAL_GetTick>
 8007bd0:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  assert_param(IS_QSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007bd8:	b2db      	uxtb	r3, r3
 8007bda:	2b01      	cmp	r3, #1
 8007bdc:	d101      	bne.n	8007be2 <HAL_QSPI_MemoryMapped+0x22>
 8007bde:	2302      	movs	r3, #2
 8007be0:	e04c      	b.n	8007c7c <HAL_QSPI_MemoryMapped+0xbc>
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	2201      	movs	r2, #1
 8007be6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007bf0:	b2db      	uxtb	r3, r3
 8007bf2:	2b01      	cmp	r3, #1
 8007bf4:	d13b      	bne.n	8007c6e <HAL_QSPI_MemoryMapped+0xae>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	2282      	movs	r2, #130	; 0x82
 8007c00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c08:	9300      	str	r3, [sp, #0]
 8007c0a:	693b      	ldr	r3, [r7, #16]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	2120      	movs	r1, #32
 8007c10:	68f8      	ldr	r0, [r7, #12]
 8007c12:	f000 f845 	bl	8007ca0 <QSPI_WaitFlagStateUntilTimeout>
 8007c16:	4603      	mov	r3, r0
 8007c18:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8007c1a:	7dfb      	ldrb	r3, [r7, #23]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d128      	bne.n	8007c72 <HAL_QSPI_MemoryMapped+0xb2>
    {
      /* Configure QSPI: CR register with timeout counter enable */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f023 0108 	bic.w	r1, r3, #8
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	685a      	ldr	r2, [r3, #4]
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	430a      	orrs	r2, r1
 8007c34:	601a      	str	r2, [r3, #0]

    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	685b      	ldr	r3, [r3, #4]
 8007c3a:	2b08      	cmp	r3, #8
 8007c3c:	d110      	bne.n	8007c60 <HAL_QSPI_MemoryMapped+0xa0>
      {
        assert_param(IS_QSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure QSPI: LPTR register with the low-power timeout value */
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	687a      	ldr	r2, [r7, #4]
 8007c44:	6812      	ldr	r2, [r2, #0]
 8007c46:	631a      	str	r2, [r3, #48]	; 0x30

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	2210      	movs	r2, #16
 8007c4e:	60da      	str	r2, [r3, #12]

        /* Enable the QSPI TimeOut Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	681a      	ldr	r2, [r3, #0]
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007c5e:	601a      	str	r2, [r3, #0]
      }

      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 8007c60:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8007c64:	68b9      	ldr	r1, [r7, #8]
 8007c66:	68f8      	ldr	r0, [r7, #12]
 8007c68:	f000 f851 	bl	8007d0e <QSPI_Config>
 8007c6c:	e001      	b.n	8007c72 <HAL_QSPI_MemoryMapped+0xb2>
    }
  }
  else
  {
    status = HAL_BUSY;
 8007c6e:	2302      	movs	r3, #2
 8007c70:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	2200      	movs	r2, #0
 8007c76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8007c7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	3718      	adds	r7, #24
 8007c80:	46bd      	mov	sp, r7
 8007c82:	bd80      	pop	{r7, pc}

08007c84 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8007c84:	b480      	push	{r7}
 8007c86:	b083      	sub	sp, #12
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
 8007c8c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	683a      	ldr	r2, [r7, #0]
 8007c92:	649a      	str	r2, [r3, #72]	; 0x48
}
 8007c94:	bf00      	nop
 8007c96:	370c      	adds	r7, #12
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9e:	4770      	bx	lr

08007ca0 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b084      	sub	sp, #16
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	60f8      	str	r0, [r7, #12]
 8007ca8:	60b9      	str	r1, [r7, #8]
 8007caa:	603b      	str	r3, [r7, #0]
 8007cac:	4613      	mov	r3, r2
 8007cae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8007cb0:	e01a      	b.n	8007ce8 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007cb2:	69bb      	ldr	r3, [r7, #24]
 8007cb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007cb8:	d016      	beq.n	8007ce8 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007cba:	f7fa ffdf 	bl	8002c7c <HAL_GetTick>
 8007cbe:	4602      	mov	r2, r0
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	1ad3      	subs	r3, r2, r3
 8007cc4:	69ba      	ldr	r2, [r7, #24]
 8007cc6:	429a      	cmp	r2, r3
 8007cc8:	d302      	bcc.n	8007cd0 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8007cca:	69bb      	ldr	r3, [r7, #24]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d10b      	bne.n	8007ce8 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	2204      	movs	r2, #4
 8007cd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cdc:	f043 0201 	orr.w	r2, r3, #1
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	e00e      	b.n	8007d06 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	689a      	ldr	r2, [r3, #8]
 8007cee:	68bb      	ldr	r3, [r7, #8]
 8007cf0:	4013      	ands	r3, r2
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	bf14      	ite	ne
 8007cf6:	2301      	movne	r3, #1
 8007cf8:	2300      	moveq	r3, #0
 8007cfa:	b2db      	uxtb	r3, r3
 8007cfc:	461a      	mov	r2, r3
 8007cfe:	79fb      	ldrb	r3, [r7, #7]
 8007d00:	429a      	cmp	r2, r3
 8007d02:	d1d6      	bne.n	8007cb2 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007d04:	2300      	movs	r3, #0
}
 8007d06:	4618      	mov	r0, r3
 8007d08:	3710      	adds	r7, #16
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	bd80      	pop	{r7, pc}

08007d0e <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8007d0e:	b480      	push	{r7}
 8007d10:	b085      	sub	sp, #20
 8007d12:	af00      	add	r7, sp, #0
 8007d14:	60f8      	str	r0, [r7, #12]
 8007d16:	60b9      	str	r1, [r7, #8]
 8007d18:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d009      	beq.n	8007d36 <QSPI_Config+0x28>
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007d28:	d005      	beq.n	8007d36 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8007d2a:	68bb      	ldr	r3, [r7, #8]
 8007d2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	3a01      	subs	r2, #1
 8007d34:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	699b      	ldr	r3, [r3, #24]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	f000 80b9 	beq.w	8007eb2 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	6a1b      	ldr	r3, [r3, #32]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d05f      	beq.n	8007e08 <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	68ba      	ldr	r2, [r7, #8]
 8007d4e:	6892      	ldr	r2, [r2, #8]
 8007d50:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8007d52:	68bb      	ldr	r3, [r7, #8]
 8007d54:	69db      	ldr	r3, [r3, #28]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d031      	beq.n	8007dbe <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d5e:	68bb      	ldr	r3, [r7, #8]
 8007d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d62:	431a      	orrs	r2, r3
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d68:	431a      	orrs	r2, r3
 8007d6a:	68bb      	ldr	r3, [r7, #8]
 8007d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d6e:	431a      	orrs	r2, r3
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	695b      	ldr	r3, [r3, #20]
 8007d74:	049b      	lsls	r3, r3, #18
 8007d76:	431a      	orrs	r2, r3
 8007d78:	68bb      	ldr	r3, [r7, #8]
 8007d7a:	691b      	ldr	r3, [r3, #16]
 8007d7c:	431a      	orrs	r2, r3
 8007d7e:	68bb      	ldr	r3, [r7, #8]
 8007d80:	6a1b      	ldr	r3, [r3, #32]
 8007d82:	431a      	orrs	r2, r3
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	68db      	ldr	r3, [r3, #12]
 8007d88:	431a      	orrs	r2, r3
 8007d8a:	68bb      	ldr	r3, [r7, #8]
 8007d8c:	69db      	ldr	r3, [r3, #28]
 8007d8e:	431a      	orrs	r2, r3
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	699b      	ldr	r3, [r3, #24]
 8007d94:	431a      	orrs	r2, r3
 8007d96:	68bb      	ldr	r3, [r7, #8]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	ea42 0103 	orr.w	r1, r2, r3
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	687a      	ldr	r2, [r7, #4]
 8007da4:	430a      	orrs	r2, r1
 8007da6:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007dae:	f000 812e 	beq.w	800800e <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	68ba      	ldr	r2, [r7, #8]
 8007db8:	6852      	ldr	r2, [r2, #4]
 8007dba:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8007dbc:	e127      	b.n	800800e <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8007dbe:	68bb      	ldr	r3, [r7, #8]
 8007dc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dc2:	68bb      	ldr	r3, [r7, #8]
 8007dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dc6:	431a      	orrs	r2, r3
 8007dc8:	68bb      	ldr	r3, [r7, #8]
 8007dca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dcc:	431a      	orrs	r2, r3
 8007dce:	68bb      	ldr	r3, [r7, #8]
 8007dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dd2:	431a      	orrs	r2, r3
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	695b      	ldr	r3, [r3, #20]
 8007dd8:	049b      	lsls	r3, r3, #18
 8007dda:	431a      	orrs	r2, r3
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	691b      	ldr	r3, [r3, #16]
 8007de0:	431a      	orrs	r2, r3
 8007de2:	68bb      	ldr	r3, [r7, #8]
 8007de4:	6a1b      	ldr	r3, [r3, #32]
 8007de6:	431a      	orrs	r2, r3
 8007de8:	68bb      	ldr	r3, [r7, #8]
 8007dea:	69db      	ldr	r3, [r3, #28]
 8007dec:	431a      	orrs	r2, r3
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	699b      	ldr	r3, [r3, #24]
 8007df2:	431a      	orrs	r2, r3
 8007df4:	68bb      	ldr	r3, [r7, #8]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	ea42 0103 	orr.w	r1, r2, r3
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	687a      	ldr	r2, [r7, #4]
 8007e02:	430a      	orrs	r2, r1
 8007e04:	615a      	str	r2, [r3, #20]
}
 8007e06:	e102      	b.n	800800e <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	69db      	ldr	r3, [r3, #28]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d02e      	beq.n	8007e6e <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e14:	68bb      	ldr	r3, [r7, #8]
 8007e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e18:	431a      	orrs	r2, r3
 8007e1a:	68bb      	ldr	r3, [r7, #8]
 8007e1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e1e:	431a      	orrs	r2, r3
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e24:	431a      	orrs	r2, r3
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	695b      	ldr	r3, [r3, #20]
 8007e2a:	049b      	lsls	r3, r3, #18
 8007e2c:	431a      	orrs	r2, r3
 8007e2e:	68bb      	ldr	r3, [r7, #8]
 8007e30:	6a1b      	ldr	r3, [r3, #32]
 8007e32:	431a      	orrs	r2, r3
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	68db      	ldr	r3, [r3, #12]
 8007e38:	431a      	orrs	r2, r3
 8007e3a:	68bb      	ldr	r3, [r7, #8]
 8007e3c:	69db      	ldr	r3, [r3, #28]
 8007e3e:	431a      	orrs	r2, r3
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	699b      	ldr	r3, [r3, #24]
 8007e44:	431a      	orrs	r2, r3
 8007e46:	68bb      	ldr	r3, [r7, #8]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	ea42 0103 	orr.w	r1, r2, r3
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	687a      	ldr	r2, [r7, #4]
 8007e54:	430a      	orrs	r2, r1
 8007e56:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007e5e:	f000 80d6 	beq.w	800800e <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	68ba      	ldr	r2, [r7, #8]
 8007e68:	6852      	ldr	r2, [r2, #4]
 8007e6a:	619a      	str	r2, [r3, #24]
}
 8007e6c:	e0cf      	b.n	800800e <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8007e6e:	68bb      	ldr	r3, [r7, #8]
 8007e70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e72:	68bb      	ldr	r3, [r7, #8]
 8007e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e76:	431a      	orrs	r2, r3
 8007e78:	68bb      	ldr	r3, [r7, #8]
 8007e7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e7c:	431a      	orrs	r2, r3
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e82:	431a      	orrs	r2, r3
 8007e84:	68bb      	ldr	r3, [r7, #8]
 8007e86:	695b      	ldr	r3, [r3, #20]
 8007e88:	049b      	lsls	r3, r3, #18
 8007e8a:	431a      	orrs	r2, r3
 8007e8c:	68bb      	ldr	r3, [r7, #8]
 8007e8e:	6a1b      	ldr	r3, [r3, #32]
 8007e90:	431a      	orrs	r2, r3
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	69db      	ldr	r3, [r3, #28]
 8007e96:	431a      	orrs	r2, r3
 8007e98:	68bb      	ldr	r3, [r7, #8]
 8007e9a:	699b      	ldr	r3, [r3, #24]
 8007e9c:	431a      	orrs	r2, r3
 8007e9e:	68bb      	ldr	r3, [r7, #8]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	ea42 0103 	orr.w	r1, r2, r3
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	687a      	ldr	r2, [r7, #4]
 8007eac:	430a      	orrs	r2, r1
 8007eae:	615a      	str	r2, [r3, #20]
}
 8007eb0:	e0ad      	b.n	800800e <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8007eb2:	68bb      	ldr	r3, [r7, #8]
 8007eb4:	6a1b      	ldr	r3, [r3, #32]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d058      	beq.n	8007f6c <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	68ba      	ldr	r2, [r7, #8]
 8007ec0:	6892      	ldr	r2, [r2, #8]
 8007ec2:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	69db      	ldr	r3, [r3, #28]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d02d      	beq.n	8007f28 <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ed0:	68bb      	ldr	r3, [r7, #8]
 8007ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ed4:	431a      	orrs	r2, r3
 8007ed6:	68bb      	ldr	r3, [r7, #8]
 8007ed8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007eda:	431a      	orrs	r2, r3
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ee0:	431a      	orrs	r2, r3
 8007ee2:	68bb      	ldr	r3, [r7, #8]
 8007ee4:	695b      	ldr	r3, [r3, #20]
 8007ee6:	049b      	lsls	r3, r3, #18
 8007ee8:	431a      	orrs	r2, r3
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	691b      	ldr	r3, [r3, #16]
 8007eee:	431a      	orrs	r2, r3
 8007ef0:	68bb      	ldr	r3, [r7, #8]
 8007ef2:	6a1b      	ldr	r3, [r3, #32]
 8007ef4:	431a      	orrs	r2, r3
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	68db      	ldr	r3, [r3, #12]
 8007efa:	431a      	orrs	r2, r3
 8007efc:	68bb      	ldr	r3, [r7, #8]
 8007efe:	69db      	ldr	r3, [r3, #28]
 8007f00:	431a      	orrs	r2, r3
 8007f02:	68bb      	ldr	r3, [r7, #8]
 8007f04:	699b      	ldr	r3, [r3, #24]
 8007f06:	ea42 0103 	orr.w	r1, r2, r3
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	687a      	ldr	r2, [r7, #4]
 8007f10:	430a      	orrs	r2, r1
 8007f12:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007f1a:	d078      	beq.n	800800e <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	68ba      	ldr	r2, [r7, #8]
 8007f22:	6852      	ldr	r2, [r2, #4]
 8007f24:	619a      	str	r2, [r3, #24]
}
 8007f26:	e072      	b.n	800800e <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f30:	431a      	orrs	r2, r3
 8007f32:	68bb      	ldr	r3, [r7, #8]
 8007f34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f36:	431a      	orrs	r2, r3
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f3c:	431a      	orrs	r2, r3
 8007f3e:	68bb      	ldr	r3, [r7, #8]
 8007f40:	695b      	ldr	r3, [r3, #20]
 8007f42:	049b      	lsls	r3, r3, #18
 8007f44:	431a      	orrs	r2, r3
 8007f46:	68bb      	ldr	r3, [r7, #8]
 8007f48:	691b      	ldr	r3, [r3, #16]
 8007f4a:	431a      	orrs	r2, r3
 8007f4c:	68bb      	ldr	r3, [r7, #8]
 8007f4e:	6a1b      	ldr	r3, [r3, #32]
 8007f50:	431a      	orrs	r2, r3
 8007f52:	68bb      	ldr	r3, [r7, #8]
 8007f54:	69db      	ldr	r3, [r3, #28]
 8007f56:	431a      	orrs	r2, r3
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	699b      	ldr	r3, [r3, #24]
 8007f5c:	ea42 0103 	orr.w	r1, r2, r3
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	687a      	ldr	r2, [r7, #4]
 8007f66:	430a      	orrs	r2, r1
 8007f68:	615a      	str	r2, [r3, #20]
}
 8007f6a:	e050      	b.n	800800e <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8007f6c:	68bb      	ldr	r3, [r7, #8]
 8007f6e:	69db      	ldr	r3, [r3, #28]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d02a      	beq.n	8007fca <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f78:	68bb      	ldr	r3, [r7, #8]
 8007f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f7c:	431a      	orrs	r2, r3
 8007f7e:	68bb      	ldr	r3, [r7, #8]
 8007f80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f82:	431a      	orrs	r2, r3
 8007f84:	68bb      	ldr	r3, [r7, #8]
 8007f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f88:	431a      	orrs	r2, r3
 8007f8a:	68bb      	ldr	r3, [r7, #8]
 8007f8c:	695b      	ldr	r3, [r3, #20]
 8007f8e:	049b      	lsls	r3, r3, #18
 8007f90:	431a      	orrs	r2, r3
 8007f92:	68bb      	ldr	r3, [r7, #8]
 8007f94:	6a1b      	ldr	r3, [r3, #32]
 8007f96:	431a      	orrs	r2, r3
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	68db      	ldr	r3, [r3, #12]
 8007f9c:	431a      	orrs	r2, r3
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	69db      	ldr	r3, [r3, #28]
 8007fa2:	431a      	orrs	r2, r3
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	699b      	ldr	r3, [r3, #24]
 8007fa8:	ea42 0103 	orr.w	r1, r2, r3
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	687a      	ldr	r2, [r7, #4]
 8007fb2:	430a      	orrs	r2, r1
 8007fb4:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007fbc:	d027      	beq.n	800800e <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	68ba      	ldr	r2, [r7, #8]
 8007fc4:	6852      	ldr	r2, [r2, #4]
 8007fc6:	619a      	str	r2, [r3, #24]
}
 8007fc8:	e021      	b.n	800800e <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d01d      	beq.n	800800e <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fd6:	68bb      	ldr	r3, [r7, #8]
 8007fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fda:	431a      	orrs	r2, r3
 8007fdc:	68bb      	ldr	r3, [r7, #8]
 8007fde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fe0:	431a      	orrs	r2, r3
 8007fe2:	68bb      	ldr	r3, [r7, #8]
 8007fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fe6:	431a      	orrs	r2, r3
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	695b      	ldr	r3, [r3, #20]
 8007fec:	049b      	lsls	r3, r3, #18
 8007fee:	431a      	orrs	r2, r3
 8007ff0:	68bb      	ldr	r3, [r7, #8]
 8007ff2:	6a1b      	ldr	r3, [r3, #32]
 8007ff4:	431a      	orrs	r2, r3
 8007ff6:	68bb      	ldr	r3, [r7, #8]
 8007ff8:	69db      	ldr	r3, [r3, #28]
 8007ffa:	431a      	orrs	r2, r3
 8007ffc:	68bb      	ldr	r3, [r7, #8]
 8007ffe:	699b      	ldr	r3, [r3, #24]
 8008000:	ea42 0103 	orr.w	r1, r2, r3
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	687a      	ldr	r2, [r7, #4]
 800800a:	430a      	orrs	r2, r1
 800800c:	615a      	str	r2, [r3, #20]
}
 800800e:	bf00      	nop
 8008010:	3714      	adds	r7, #20
 8008012:	46bd      	mov	sp, r7
 8008014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008018:	4770      	bx	lr
	...

0800801c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b086      	sub	sp, #24
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8008024:	2300      	movs	r3, #0
 8008026:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d101      	bne.n	8008032 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800802e:	2301      	movs	r3, #1
 8008030:	e29b      	b.n	800856a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f003 0301 	and.w	r3, r3, #1
 800803a:	2b00      	cmp	r3, #0
 800803c:	f000 8087 	beq.w	800814e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008040:	4b96      	ldr	r3, [pc, #600]	; (800829c <HAL_RCC_OscConfig+0x280>)
 8008042:	689b      	ldr	r3, [r3, #8]
 8008044:	f003 030c 	and.w	r3, r3, #12
 8008048:	2b04      	cmp	r3, #4
 800804a:	d00c      	beq.n	8008066 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800804c:	4b93      	ldr	r3, [pc, #588]	; (800829c <HAL_RCC_OscConfig+0x280>)
 800804e:	689b      	ldr	r3, [r3, #8]
 8008050:	f003 030c 	and.w	r3, r3, #12
 8008054:	2b08      	cmp	r3, #8
 8008056:	d112      	bne.n	800807e <HAL_RCC_OscConfig+0x62>
 8008058:	4b90      	ldr	r3, [pc, #576]	; (800829c <HAL_RCC_OscConfig+0x280>)
 800805a:	685b      	ldr	r3, [r3, #4]
 800805c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008060:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008064:	d10b      	bne.n	800807e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008066:	4b8d      	ldr	r3, [pc, #564]	; (800829c <HAL_RCC_OscConfig+0x280>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800806e:	2b00      	cmp	r3, #0
 8008070:	d06c      	beq.n	800814c <HAL_RCC_OscConfig+0x130>
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	685b      	ldr	r3, [r3, #4]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d168      	bne.n	800814c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800807a:	2301      	movs	r3, #1
 800807c:	e275      	b.n	800856a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	685b      	ldr	r3, [r3, #4]
 8008082:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008086:	d106      	bne.n	8008096 <HAL_RCC_OscConfig+0x7a>
 8008088:	4b84      	ldr	r3, [pc, #528]	; (800829c <HAL_RCC_OscConfig+0x280>)
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	4a83      	ldr	r2, [pc, #524]	; (800829c <HAL_RCC_OscConfig+0x280>)
 800808e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008092:	6013      	str	r3, [r2, #0]
 8008094:	e02e      	b.n	80080f4 <HAL_RCC_OscConfig+0xd8>
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	685b      	ldr	r3, [r3, #4]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d10c      	bne.n	80080b8 <HAL_RCC_OscConfig+0x9c>
 800809e:	4b7f      	ldr	r3, [pc, #508]	; (800829c <HAL_RCC_OscConfig+0x280>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	4a7e      	ldr	r2, [pc, #504]	; (800829c <HAL_RCC_OscConfig+0x280>)
 80080a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80080a8:	6013      	str	r3, [r2, #0]
 80080aa:	4b7c      	ldr	r3, [pc, #496]	; (800829c <HAL_RCC_OscConfig+0x280>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	4a7b      	ldr	r2, [pc, #492]	; (800829c <HAL_RCC_OscConfig+0x280>)
 80080b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80080b4:	6013      	str	r3, [r2, #0]
 80080b6:	e01d      	b.n	80080f4 <HAL_RCC_OscConfig+0xd8>
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	685b      	ldr	r3, [r3, #4]
 80080bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80080c0:	d10c      	bne.n	80080dc <HAL_RCC_OscConfig+0xc0>
 80080c2:	4b76      	ldr	r3, [pc, #472]	; (800829c <HAL_RCC_OscConfig+0x280>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	4a75      	ldr	r2, [pc, #468]	; (800829c <HAL_RCC_OscConfig+0x280>)
 80080c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80080cc:	6013      	str	r3, [r2, #0]
 80080ce:	4b73      	ldr	r3, [pc, #460]	; (800829c <HAL_RCC_OscConfig+0x280>)
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	4a72      	ldr	r2, [pc, #456]	; (800829c <HAL_RCC_OscConfig+0x280>)
 80080d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80080d8:	6013      	str	r3, [r2, #0]
 80080da:	e00b      	b.n	80080f4 <HAL_RCC_OscConfig+0xd8>
 80080dc:	4b6f      	ldr	r3, [pc, #444]	; (800829c <HAL_RCC_OscConfig+0x280>)
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	4a6e      	ldr	r2, [pc, #440]	; (800829c <HAL_RCC_OscConfig+0x280>)
 80080e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80080e6:	6013      	str	r3, [r2, #0]
 80080e8:	4b6c      	ldr	r3, [pc, #432]	; (800829c <HAL_RCC_OscConfig+0x280>)
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	4a6b      	ldr	r2, [pc, #428]	; (800829c <HAL_RCC_OscConfig+0x280>)
 80080ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80080f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	685b      	ldr	r3, [r3, #4]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d013      	beq.n	8008124 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080fc:	f7fa fdbe 	bl	8002c7c <HAL_GetTick>
 8008100:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008102:	e008      	b.n	8008116 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008104:	f7fa fdba 	bl	8002c7c <HAL_GetTick>
 8008108:	4602      	mov	r2, r0
 800810a:	693b      	ldr	r3, [r7, #16]
 800810c:	1ad3      	subs	r3, r2, r3
 800810e:	2b64      	cmp	r3, #100	; 0x64
 8008110:	d901      	bls.n	8008116 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008112:	2303      	movs	r3, #3
 8008114:	e229      	b.n	800856a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008116:	4b61      	ldr	r3, [pc, #388]	; (800829c <HAL_RCC_OscConfig+0x280>)
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800811e:	2b00      	cmp	r3, #0
 8008120:	d0f0      	beq.n	8008104 <HAL_RCC_OscConfig+0xe8>
 8008122:	e014      	b.n	800814e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008124:	f7fa fdaa 	bl	8002c7c <HAL_GetTick>
 8008128:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800812a:	e008      	b.n	800813e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800812c:	f7fa fda6 	bl	8002c7c <HAL_GetTick>
 8008130:	4602      	mov	r2, r0
 8008132:	693b      	ldr	r3, [r7, #16]
 8008134:	1ad3      	subs	r3, r2, r3
 8008136:	2b64      	cmp	r3, #100	; 0x64
 8008138:	d901      	bls.n	800813e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800813a:	2303      	movs	r3, #3
 800813c:	e215      	b.n	800856a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800813e:	4b57      	ldr	r3, [pc, #348]	; (800829c <HAL_RCC_OscConfig+0x280>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008146:	2b00      	cmp	r3, #0
 8008148:	d1f0      	bne.n	800812c <HAL_RCC_OscConfig+0x110>
 800814a:	e000      	b.n	800814e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800814c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f003 0302 	and.w	r3, r3, #2
 8008156:	2b00      	cmp	r3, #0
 8008158:	d069      	beq.n	800822e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800815a:	4b50      	ldr	r3, [pc, #320]	; (800829c <HAL_RCC_OscConfig+0x280>)
 800815c:	689b      	ldr	r3, [r3, #8]
 800815e:	f003 030c 	and.w	r3, r3, #12
 8008162:	2b00      	cmp	r3, #0
 8008164:	d00b      	beq.n	800817e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008166:	4b4d      	ldr	r3, [pc, #308]	; (800829c <HAL_RCC_OscConfig+0x280>)
 8008168:	689b      	ldr	r3, [r3, #8]
 800816a:	f003 030c 	and.w	r3, r3, #12
 800816e:	2b08      	cmp	r3, #8
 8008170:	d11c      	bne.n	80081ac <HAL_RCC_OscConfig+0x190>
 8008172:	4b4a      	ldr	r3, [pc, #296]	; (800829c <HAL_RCC_OscConfig+0x280>)
 8008174:	685b      	ldr	r3, [r3, #4]
 8008176:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800817a:	2b00      	cmp	r3, #0
 800817c:	d116      	bne.n	80081ac <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800817e:	4b47      	ldr	r3, [pc, #284]	; (800829c <HAL_RCC_OscConfig+0x280>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f003 0302 	and.w	r3, r3, #2
 8008186:	2b00      	cmp	r3, #0
 8008188:	d005      	beq.n	8008196 <HAL_RCC_OscConfig+0x17a>
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	68db      	ldr	r3, [r3, #12]
 800818e:	2b01      	cmp	r3, #1
 8008190:	d001      	beq.n	8008196 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8008192:	2301      	movs	r3, #1
 8008194:	e1e9      	b.n	800856a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008196:	4b41      	ldr	r3, [pc, #260]	; (800829c <HAL_RCC_OscConfig+0x280>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	691b      	ldr	r3, [r3, #16]
 80081a2:	00db      	lsls	r3, r3, #3
 80081a4:	493d      	ldr	r1, [pc, #244]	; (800829c <HAL_RCC_OscConfig+0x280>)
 80081a6:	4313      	orrs	r3, r2
 80081a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80081aa:	e040      	b.n	800822e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	68db      	ldr	r3, [r3, #12]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d023      	beq.n	80081fc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80081b4:	4b39      	ldr	r3, [pc, #228]	; (800829c <HAL_RCC_OscConfig+0x280>)
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	4a38      	ldr	r2, [pc, #224]	; (800829c <HAL_RCC_OscConfig+0x280>)
 80081ba:	f043 0301 	orr.w	r3, r3, #1
 80081be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081c0:	f7fa fd5c 	bl	8002c7c <HAL_GetTick>
 80081c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80081c6:	e008      	b.n	80081da <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80081c8:	f7fa fd58 	bl	8002c7c <HAL_GetTick>
 80081cc:	4602      	mov	r2, r0
 80081ce:	693b      	ldr	r3, [r7, #16]
 80081d0:	1ad3      	subs	r3, r2, r3
 80081d2:	2b02      	cmp	r3, #2
 80081d4:	d901      	bls.n	80081da <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80081d6:	2303      	movs	r3, #3
 80081d8:	e1c7      	b.n	800856a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80081da:	4b30      	ldr	r3, [pc, #192]	; (800829c <HAL_RCC_OscConfig+0x280>)
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f003 0302 	and.w	r3, r3, #2
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d0f0      	beq.n	80081c8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80081e6:	4b2d      	ldr	r3, [pc, #180]	; (800829c <HAL_RCC_OscConfig+0x280>)
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	691b      	ldr	r3, [r3, #16]
 80081f2:	00db      	lsls	r3, r3, #3
 80081f4:	4929      	ldr	r1, [pc, #164]	; (800829c <HAL_RCC_OscConfig+0x280>)
 80081f6:	4313      	orrs	r3, r2
 80081f8:	600b      	str	r3, [r1, #0]
 80081fa:	e018      	b.n	800822e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80081fc:	4b27      	ldr	r3, [pc, #156]	; (800829c <HAL_RCC_OscConfig+0x280>)
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	4a26      	ldr	r2, [pc, #152]	; (800829c <HAL_RCC_OscConfig+0x280>)
 8008202:	f023 0301 	bic.w	r3, r3, #1
 8008206:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008208:	f7fa fd38 	bl	8002c7c <HAL_GetTick>
 800820c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800820e:	e008      	b.n	8008222 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008210:	f7fa fd34 	bl	8002c7c <HAL_GetTick>
 8008214:	4602      	mov	r2, r0
 8008216:	693b      	ldr	r3, [r7, #16]
 8008218:	1ad3      	subs	r3, r2, r3
 800821a:	2b02      	cmp	r3, #2
 800821c:	d901      	bls.n	8008222 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800821e:	2303      	movs	r3, #3
 8008220:	e1a3      	b.n	800856a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008222:	4b1e      	ldr	r3, [pc, #120]	; (800829c <HAL_RCC_OscConfig+0x280>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f003 0302 	and.w	r3, r3, #2
 800822a:	2b00      	cmp	r3, #0
 800822c:	d1f0      	bne.n	8008210 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f003 0308 	and.w	r3, r3, #8
 8008236:	2b00      	cmp	r3, #0
 8008238:	d038      	beq.n	80082ac <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	695b      	ldr	r3, [r3, #20]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d019      	beq.n	8008276 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008242:	4b16      	ldr	r3, [pc, #88]	; (800829c <HAL_RCC_OscConfig+0x280>)
 8008244:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008246:	4a15      	ldr	r2, [pc, #84]	; (800829c <HAL_RCC_OscConfig+0x280>)
 8008248:	f043 0301 	orr.w	r3, r3, #1
 800824c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800824e:	f7fa fd15 	bl	8002c7c <HAL_GetTick>
 8008252:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008254:	e008      	b.n	8008268 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008256:	f7fa fd11 	bl	8002c7c <HAL_GetTick>
 800825a:	4602      	mov	r2, r0
 800825c:	693b      	ldr	r3, [r7, #16]
 800825e:	1ad3      	subs	r3, r2, r3
 8008260:	2b02      	cmp	r3, #2
 8008262:	d901      	bls.n	8008268 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008264:	2303      	movs	r3, #3
 8008266:	e180      	b.n	800856a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008268:	4b0c      	ldr	r3, [pc, #48]	; (800829c <HAL_RCC_OscConfig+0x280>)
 800826a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800826c:	f003 0302 	and.w	r3, r3, #2
 8008270:	2b00      	cmp	r3, #0
 8008272:	d0f0      	beq.n	8008256 <HAL_RCC_OscConfig+0x23a>
 8008274:	e01a      	b.n	80082ac <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008276:	4b09      	ldr	r3, [pc, #36]	; (800829c <HAL_RCC_OscConfig+0x280>)
 8008278:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800827a:	4a08      	ldr	r2, [pc, #32]	; (800829c <HAL_RCC_OscConfig+0x280>)
 800827c:	f023 0301 	bic.w	r3, r3, #1
 8008280:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008282:	f7fa fcfb 	bl	8002c7c <HAL_GetTick>
 8008286:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008288:	e00a      	b.n	80082a0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800828a:	f7fa fcf7 	bl	8002c7c <HAL_GetTick>
 800828e:	4602      	mov	r2, r0
 8008290:	693b      	ldr	r3, [r7, #16]
 8008292:	1ad3      	subs	r3, r2, r3
 8008294:	2b02      	cmp	r3, #2
 8008296:	d903      	bls.n	80082a0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8008298:	2303      	movs	r3, #3
 800829a:	e166      	b.n	800856a <HAL_RCC_OscConfig+0x54e>
 800829c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80082a0:	4b92      	ldr	r3, [pc, #584]	; (80084ec <HAL_RCC_OscConfig+0x4d0>)
 80082a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80082a4:	f003 0302 	and.w	r3, r3, #2
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d1ee      	bne.n	800828a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f003 0304 	and.w	r3, r3, #4
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	f000 80a4 	beq.w	8008402 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80082ba:	4b8c      	ldr	r3, [pc, #560]	; (80084ec <HAL_RCC_OscConfig+0x4d0>)
 80082bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d10d      	bne.n	80082e2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80082c6:	4b89      	ldr	r3, [pc, #548]	; (80084ec <HAL_RCC_OscConfig+0x4d0>)
 80082c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082ca:	4a88      	ldr	r2, [pc, #544]	; (80084ec <HAL_RCC_OscConfig+0x4d0>)
 80082cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80082d0:	6413      	str	r3, [r2, #64]	; 0x40
 80082d2:	4b86      	ldr	r3, [pc, #536]	; (80084ec <HAL_RCC_OscConfig+0x4d0>)
 80082d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80082da:	60bb      	str	r3, [r7, #8]
 80082dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80082de:	2301      	movs	r3, #1
 80082e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80082e2:	4b83      	ldr	r3, [pc, #524]	; (80084f0 <HAL_RCC_OscConfig+0x4d4>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d118      	bne.n	8008320 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80082ee:	4b80      	ldr	r3, [pc, #512]	; (80084f0 <HAL_RCC_OscConfig+0x4d4>)
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	4a7f      	ldr	r2, [pc, #508]	; (80084f0 <HAL_RCC_OscConfig+0x4d4>)
 80082f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80082f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80082fa:	f7fa fcbf 	bl	8002c7c <HAL_GetTick>
 80082fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008300:	e008      	b.n	8008314 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008302:	f7fa fcbb 	bl	8002c7c <HAL_GetTick>
 8008306:	4602      	mov	r2, r0
 8008308:	693b      	ldr	r3, [r7, #16]
 800830a:	1ad3      	subs	r3, r2, r3
 800830c:	2b64      	cmp	r3, #100	; 0x64
 800830e:	d901      	bls.n	8008314 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8008310:	2303      	movs	r3, #3
 8008312:	e12a      	b.n	800856a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008314:	4b76      	ldr	r3, [pc, #472]	; (80084f0 <HAL_RCC_OscConfig+0x4d4>)
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800831c:	2b00      	cmp	r3, #0
 800831e:	d0f0      	beq.n	8008302 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	689b      	ldr	r3, [r3, #8]
 8008324:	2b01      	cmp	r3, #1
 8008326:	d106      	bne.n	8008336 <HAL_RCC_OscConfig+0x31a>
 8008328:	4b70      	ldr	r3, [pc, #448]	; (80084ec <HAL_RCC_OscConfig+0x4d0>)
 800832a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800832c:	4a6f      	ldr	r2, [pc, #444]	; (80084ec <HAL_RCC_OscConfig+0x4d0>)
 800832e:	f043 0301 	orr.w	r3, r3, #1
 8008332:	6713      	str	r3, [r2, #112]	; 0x70
 8008334:	e02d      	b.n	8008392 <HAL_RCC_OscConfig+0x376>
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	689b      	ldr	r3, [r3, #8]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d10c      	bne.n	8008358 <HAL_RCC_OscConfig+0x33c>
 800833e:	4b6b      	ldr	r3, [pc, #428]	; (80084ec <HAL_RCC_OscConfig+0x4d0>)
 8008340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008342:	4a6a      	ldr	r2, [pc, #424]	; (80084ec <HAL_RCC_OscConfig+0x4d0>)
 8008344:	f023 0301 	bic.w	r3, r3, #1
 8008348:	6713      	str	r3, [r2, #112]	; 0x70
 800834a:	4b68      	ldr	r3, [pc, #416]	; (80084ec <HAL_RCC_OscConfig+0x4d0>)
 800834c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800834e:	4a67      	ldr	r2, [pc, #412]	; (80084ec <HAL_RCC_OscConfig+0x4d0>)
 8008350:	f023 0304 	bic.w	r3, r3, #4
 8008354:	6713      	str	r3, [r2, #112]	; 0x70
 8008356:	e01c      	b.n	8008392 <HAL_RCC_OscConfig+0x376>
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	689b      	ldr	r3, [r3, #8]
 800835c:	2b05      	cmp	r3, #5
 800835e:	d10c      	bne.n	800837a <HAL_RCC_OscConfig+0x35e>
 8008360:	4b62      	ldr	r3, [pc, #392]	; (80084ec <HAL_RCC_OscConfig+0x4d0>)
 8008362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008364:	4a61      	ldr	r2, [pc, #388]	; (80084ec <HAL_RCC_OscConfig+0x4d0>)
 8008366:	f043 0304 	orr.w	r3, r3, #4
 800836a:	6713      	str	r3, [r2, #112]	; 0x70
 800836c:	4b5f      	ldr	r3, [pc, #380]	; (80084ec <HAL_RCC_OscConfig+0x4d0>)
 800836e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008370:	4a5e      	ldr	r2, [pc, #376]	; (80084ec <HAL_RCC_OscConfig+0x4d0>)
 8008372:	f043 0301 	orr.w	r3, r3, #1
 8008376:	6713      	str	r3, [r2, #112]	; 0x70
 8008378:	e00b      	b.n	8008392 <HAL_RCC_OscConfig+0x376>
 800837a:	4b5c      	ldr	r3, [pc, #368]	; (80084ec <HAL_RCC_OscConfig+0x4d0>)
 800837c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800837e:	4a5b      	ldr	r2, [pc, #364]	; (80084ec <HAL_RCC_OscConfig+0x4d0>)
 8008380:	f023 0301 	bic.w	r3, r3, #1
 8008384:	6713      	str	r3, [r2, #112]	; 0x70
 8008386:	4b59      	ldr	r3, [pc, #356]	; (80084ec <HAL_RCC_OscConfig+0x4d0>)
 8008388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800838a:	4a58      	ldr	r2, [pc, #352]	; (80084ec <HAL_RCC_OscConfig+0x4d0>)
 800838c:	f023 0304 	bic.w	r3, r3, #4
 8008390:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	689b      	ldr	r3, [r3, #8]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d015      	beq.n	80083c6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800839a:	f7fa fc6f 	bl	8002c7c <HAL_GetTick>
 800839e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80083a0:	e00a      	b.n	80083b8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80083a2:	f7fa fc6b 	bl	8002c7c <HAL_GetTick>
 80083a6:	4602      	mov	r2, r0
 80083a8:	693b      	ldr	r3, [r7, #16]
 80083aa:	1ad3      	subs	r3, r2, r3
 80083ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80083b0:	4293      	cmp	r3, r2
 80083b2:	d901      	bls.n	80083b8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80083b4:	2303      	movs	r3, #3
 80083b6:	e0d8      	b.n	800856a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80083b8:	4b4c      	ldr	r3, [pc, #304]	; (80084ec <HAL_RCC_OscConfig+0x4d0>)
 80083ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083bc:	f003 0302 	and.w	r3, r3, #2
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d0ee      	beq.n	80083a2 <HAL_RCC_OscConfig+0x386>
 80083c4:	e014      	b.n	80083f0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80083c6:	f7fa fc59 	bl	8002c7c <HAL_GetTick>
 80083ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80083cc:	e00a      	b.n	80083e4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80083ce:	f7fa fc55 	bl	8002c7c <HAL_GetTick>
 80083d2:	4602      	mov	r2, r0
 80083d4:	693b      	ldr	r3, [r7, #16]
 80083d6:	1ad3      	subs	r3, r2, r3
 80083d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80083dc:	4293      	cmp	r3, r2
 80083de:	d901      	bls.n	80083e4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80083e0:	2303      	movs	r3, #3
 80083e2:	e0c2      	b.n	800856a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80083e4:	4b41      	ldr	r3, [pc, #260]	; (80084ec <HAL_RCC_OscConfig+0x4d0>)
 80083e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083e8:	f003 0302 	and.w	r3, r3, #2
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d1ee      	bne.n	80083ce <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80083f0:	7dfb      	ldrb	r3, [r7, #23]
 80083f2:	2b01      	cmp	r3, #1
 80083f4:	d105      	bne.n	8008402 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80083f6:	4b3d      	ldr	r3, [pc, #244]	; (80084ec <HAL_RCC_OscConfig+0x4d0>)
 80083f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083fa:	4a3c      	ldr	r2, [pc, #240]	; (80084ec <HAL_RCC_OscConfig+0x4d0>)
 80083fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008400:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	699b      	ldr	r3, [r3, #24]
 8008406:	2b00      	cmp	r3, #0
 8008408:	f000 80ae 	beq.w	8008568 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800840c:	4b37      	ldr	r3, [pc, #220]	; (80084ec <HAL_RCC_OscConfig+0x4d0>)
 800840e:	689b      	ldr	r3, [r3, #8]
 8008410:	f003 030c 	and.w	r3, r3, #12
 8008414:	2b08      	cmp	r3, #8
 8008416:	d06d      	beq.n	80084f4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	699b      	ldr	r3, [r3, #24]
 800841c:	2b02      	cmp	r3, #2
 800841e:	d14b      	bne.n	80084b8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008420:	4b32      	ldr	r3, [pc, #200]	; (80084ec <HAL_RCC_OscConfig+0x4d0>)
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	4a31      	ldr	r2, [pc, #196]	; (80084ec <HAL_RCC_OscConfig+0x4d0>)
 8008426:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800842a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800842c:	f7fa fc26 	bl	8002c7c <HAL_GetTick>
 8008430:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008432:	e008      	b.n	8008446 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008434:	f7fa fc22 	bl	8002c7c <HAL_GetTick>
 8008438:	4602      	mov	r2, r0
 800843a:	693b      	ldr	r3, [r7, #16]
 800843c:	1ad3      	subs	r3, r2, r3
 800843e:	2b02      	cmp	r3, #2
 8008440:	d901      	bls.n	8008446 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8008442:	2303      	movs	r3, #3
 8008444:	e091      	b.n	800856a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008446:	4b29      	ldr	r3, [pc, #164]	; (80084ec <HAL_RCC_OscConfig+0x4d0>)
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800844e:	2b00      	cmp	r3, #0
 8008450:	d1f0      	bne.n	8008434 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	69da      	ldr	r2, [r3, #28]
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6a1b      	ldr	r3, [r3, #32]
 800845a:	431a      	orrs	r2, r3
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008460:	019b      	lsls	r3, r3, #6
 8008462:	431a      	orrs	r2, r3
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008468:	085b      	lsrs	r3, r3, #1
 800846a:	3b01      	subs	r3, #1
 800846c:	041b      	lsls	r3, r3, #16
 800846e:	431a      	orrs	r2, r3
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008474:	061b      	lsls	r3, r3, #24
 8008476:	431a      	orrs	r2, r3
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800847c:	071b      	lsls	r3, r3, #28
 800847e:	491b      	ldr	r1, [pc, #108]	; (80084ec <HAL_RCC_OscConfig+0x4d0>)
 8008480:	4313      	orrs	r3, r2
 8008482:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008484:	4b19      	ldr	r3, [pc, #100]	; (80084ec <HAL_RCC_OscConfig+0x4d0>)
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	4a18      	ldr	r2, [pc, #96]	; (80084ec <HAL_RCC_OscConfig+0x4d0>)
 800848a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800848e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008490:	f7fa fbf4 	bl	8002c7c <HAL_GetTick>
 8008494:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008496:	e008      	b.n	80084aa <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008498:	f7fa fbf0 	bl	8002c7c <HAL_GetTick>
 800849c:	4602      	mov	r2, r0
 800849e:	693b      	ldr	r3, [r7, #16]
 80084a0:	1ad3      	subs	r3, r2, r3
 80084a2:	2b02      	cmp	r3, #2
 80084a4:	d901      	bls.n	80084aa <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80084a6:	2303      	movs	r3, #3
 80084a8:	e05f      	b.n	800856a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80084aa:	4b10      	ldr	r3, [pc, #64]	; (80084ec <HAL_RCC_OscConfig+0x4d0>)
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d0f0      	beq.n	8008498 <HAL_RCC_OscConfig+0x47c>
 80084b6:	e057      	b.n	8008568 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80084b8:	4b0c      	ldr	r3, [pc, #48]	; (80084ec <HAL_RCC_OscConfig+0x4d0>)
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	4a0b      	ldr	r2, [pc, #44]	; (80084ec <HAL_RCC_OscConfig+0x4d0>)
 80084be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80084c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084c4:	f7fa fbda 	bl	8002c7c <HAL_GetTick>
 80084c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80084ca:	e008      	b.n	80084de <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80084cc:	f7fa fbd6 	bl	8002c7c <HAL_GetTick>
 80084d0:	4602      	mov	r2, r0
 80084d2:	693b      	ldr	r3, [r7, #16]
 80084d4:	1ad3      	subs	r3, r2, r3
 80084d6:	2b02      	cmp	r3, #2
 80084d8:	d901      	bls.n	80084de <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80084da:	2303      	movs	r3, #3
 80084dc:	e045      	b.n	800856a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80084de:	4b03      	ldr	r3, [pc, #12]	; (80084ec <HAL_RCC_OscConfig+0x4d0>)
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d1f0      	bne.n	80084cc <HAL_RCC_OscConfig+0x4b0>
 80084ea:	e03d      	b.n	8008568 <HAL_RCC_OscConfig+0x54c>
 80084ec:	40023800 	.word	0x40023800
 80084f0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80084f4:	4b1f      	ldr	r3, [pc, #124]	; (8008574 <HAL_RCC_OscConfig+0x558>)
 80084f6:	685b      	ldr	r3, [r3, #4]
 80084f8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	699b      	ldr	r3, [r3, #24]
 80084fe:	2b01      	cmp	r3, #1
 8008500:	d030      	beq.n	8008564 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800850c:	429a      	cmp	r2, r3
 800850e:	d129      	bne.n	8008564 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800851a:	429a      	cmp	r2, r3
 800851c:	d122      	bne.n	8008564 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800851e:	68fa      	ldr	r2, [r7, #12]
 8008520:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008524:	4013      	ands	r3, r2
 8008526:	687a      	ldr	r2, [r7, #4]
 8008528:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800852a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800852c:	4293      	cmp	r3, r2
 800852e:	d119      	bne.n	8008564 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800853a:	085b      	lsrs	r3, r3, #1
 800853c:	3b01      	subs	r3, #1
 800853e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008540:	429a      	cmp	r2, r3
 8008542:	d10f      	bne.n	8008564 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800854e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8008550:	429a      	cmp	r2, r3
 8008552:	d107      	bne.n	8008564 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800855e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008560:	429a      	cmp	r2, r3
 8008562:	d001      	beq.n	8008568 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8008564:	2301      	movs	r3, #1
 8008566:	e000      	b.n	800856a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8008568:	2300      	movs	r3, #0
}
 800856a:	4618      	mov	r0, r3
 800856c:	3718      	adds	r7, #24
 800856e:	46bd      	mov	sp, r7
 8008570:	bd80      	pop	{r7, pc}
 8008572:	bf00      	nop
 8008574:	40023800 	.word	0x40023800

08008578 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b084      	sub	sp, #16
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
 8008580:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8008582:	2300      	movs	r3, #0
 8008584:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d101      	bne.n	8008590 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800858c:	2301      	movs	r3, #1
 800858e:	e0d0      	b.n	8008732 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008590:	4b6a      	ldr	r3, [pc, #424]	; (800873c <HAL_RCC_ClockConfig+0x1c4>)
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f003 030f 	and.w	r3, r3, #15
 8008598:	683a      	ldr	r2, [r7, #0]
 800859a:	429a      	cmp	r2, r3
 800859c:	d910      	bls.n	80085c0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800859e:	4b67      	ldr	r3, [pc, #412]	; (800873c <HAL_RCC_ClockConfig+0x1c4>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f023 020f 	bic.w	r2, r3, #15
 80085a6:	4965      	ldr	r1, [pc, #404]	; (800873c <HAL_RCC_ClockConfig+0x1c4>)
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	4313      	orrs	r3, r2
 80085ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80085ae:	4b63      	ldr	r3, [pc, #396]	; (800873c <HAL_RCC_ClockConfig+0x1c4>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	f003 030f 	and.w	r3, r3, #15
 80085b6:	683a      	ldr	r2, [r7, #0]
 80085b8:	429a      	cmp	r2, r3
 80085ba:	d001      	beq.n	80085c0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80085bc:	2301      	movs	r3, #1
 80085be:	e0b8      	b.n	8008732 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f003 0302 	and.w	r3, r3, #2
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d020      	beq.n	800860e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f003 0304 	and.w	r3, r3, #4
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d005      	beq.n	80085e4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80085d8:	4b59      	ldr	r3, [pc, #356]	; (8008740 <HAL_RCC_ClockConfig+0x1c8>)
 80085da:	689b      	ldr	r3, [r3, #8]
 80085dc:	4a58      	ldr	r2, [pc, #352]	; (8008740 <HAL_RCC_ClockConfig+0x1c8>)
 80085de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80085e2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	f003 0308 	and.w	r3, r3, #8
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d005      	beq.n	80085fc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80085f0:	4b53      	ldr	r3, [pc, #332]	; (8008740 <HAL_RCC_ClockConfig+0x1c8>)
 80085f2:	689b      	ldr	r3, [r3, #8]
 80085f4:	4a52      	ldr	r2, [pc, #328]	; (8008740 <HAL_RCC_ClockConfig+0x1c8>)
 80085f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80085fa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80085fc:	4b50      	ldr	r3, [pc, #320]	; (8008740 <HAL_RCC_ClockConfig+0x1c8>)
 80085fe:	689b      	ldr	r3, [r3, #8]
 8008600:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	689b      	ldr	r3, [r3, #8]
 8008608:	494d      	ldr	r1, [pc, #308]	; (8008740 <HAL_RCC_ClockConfig+0x1c8>)
 800860a:	4313      	orrs	r3, r2
 800860c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f003 0301 	and.w	r3, r3, #1
 8008616:	2b00      	cmp	r3, #0
 8008618:	d040      	beq.n	800869c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	685b      	ldr	r3, [r3, #4]
 800861e:	2b01      	cmp	r3, #1
 8008620:	d107      	bne.n	8008632 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008622:	4b47      	ldr	r3, [pc, #284]	; (8008740 <HAL_RCC_ClockConfig+0x1c8>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800862a:	2b00      	cmp	r3, #0
 800862c:	d115      	bne.n	800865a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800862e:	2301      	movs	r3, #1
 8008630:	e07f      	b.n	8008732 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	685b      	ldr	r3, [r3, #4]
 8008636:	2b02      	cmp	r3, #2
 8008638:	d107      	bne.n	800864a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800863a:	4b41      	ldr	r3, [pc, #260]	; (8008740 <HAL_RCC_ClockConfig+0x1c8>)
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008642:	2b00      	cmp	r3, #0
 8008644:	d109      	bne.n	800865a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008646:	2301      	movs	r3, #1
 8008648:	e073      	b.n	8008732 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800864a:	4b3d      	ldr	r3, [pc, #244]	; (8008740 <HAL_RCC_ClockConfig+0x1c8>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f003 0302 	and.w	r3, r3, #2
 8008652:	2b00      	cmp	r3, #0
 8008654:	d101      	bne.n	800865a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008656:	2301      	movs	r3, #1
 8008658:	e06b      	b.n	8008732 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800865a:	4b39      	ldr	r3, [pc, #228]	; (8008740 <HAL_RCC_ClockConfig+0x1c8>)
 800865c:	689b      	ldr	r3, [r3, #8]
 800865e:	f023 0203 	bic.w	r2, r3, #3
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	685b      	ldr	r3, [r3, #4]
 8008666:	4936      	ldr	r1, [pc, #216]	; (8008740 <HAL_RCC_ClockConfig+0x1c8>)
 8008668:	4313      	orrs	r3, r2
 800866a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800866c:	f7fa fb06 	bl	8002c7c <HAL_GetTick>
 8008670:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008672:	e00a      	b.n	800868a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008674:	f7fa fb02 	bl	8002c7c <HAL_GetTick>
 8008678:	4602      	mov	r2, r0
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	1ad3      	subs	r3, r2, r3
 800867e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008682:	4293      	cmp	r3, r2
 8008684:	d901      	bls.n	800868a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8008686:	2303      	movs	r3, #3
 8008688:	e053      	b.n	8008732 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800868a:	4b2d      	ldr	r3, [pc, #180]	; (8008740 <HAL_RCC_ClockConfig+0x1c8>)
 800868c:	689b      	ldr	r3, [r3, #8]
 800868e:	f003 020c 	and.w	r2, r3, #12
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	685b      	ldr	r3, [r3, #4]
 8008696:	009b      	lsls	r3, r3, #2
 8008698:	429a      	cmp	r2, r3
 800869a:	d1eb      	bne.n	8008674 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800869c:	4b27      	ldr	r3, [pc, #156]	; (800873c <HAL_RCC_ClockConfig+0x1c4>)
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	f003 030f 	and.w	r3, r3, #15
 80086a4:	683a      	ldr	r2, [r7, #0]
 80086a6:	429a      	cmp	r2, r3
 80086a8:	d210      	bcs.n	80086cc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80086aa:	4b24      	ldr	r3, [pc, #144]	; (800873c <HAL_RCC_ClockConfig+0x1c4>)
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f023 020f 	bic.w	r2, r3, #15
 80086b2:	4922      	ldr	r1, [pc, #136]	; (800873c <HAL_RCC_ClockConfig+0x1c4>)
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	4313      	orrs	r3, r2
 80086b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80086ba:	4b20      	ldr	r3, [pc, #128]	; (800873c <HAL_RCC_ClockConfig+0x1c4>)
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	f003 030f 	and.w	r3, r3, #15
 80086c2:	683a      	ldr	r2, [r7, #0]
 80086c4:	429a      	cmp	r2, r3
 80086c6:	d001      	beq.n	80086cc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80086c8:	2301      	movs	r3, #1
 80086ca:	e032      	b.n	8008732 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	f003 0304 	and.w	r3, r3, #4
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d008      	beq.n	80086ea <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80086d8:	4b19      	ldr	r3, [pc, #100]	; (8008740 <HAL_RCC_ClockConfig+0x1c8>)
 80086da:	689b      	ldr	r3, [r3, #8]
 80086dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	68db      	ldr	r3, [r3, #12]
 80086e4:	4916      	ldr	r1, [pc, #88]	; (8008740 <HAL_RCC_ClockConfig+0x1c8>)
 80086e6:	4313      	orrs	r3, r2
 80086e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f003 0308 	and.w	r3, r3, #8
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d009      	beq.n	800870a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80086f6:	4b12      	ldr	r3, [pc, #72]	; (8008740 <HAL_RCC_ClockConfig+0x1c8>)
 80086f8:	689b      	ldr	r3, [r3, #8]
 80086fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	691b      	ldr	r3, [r3, #16]
 8008702:	00db      	lsls	r3, r3, #3
 8008704:	490e      	ldr	r1, [pc, #56]	; (8008740 <HAL_RCC_ClockConfig+0x1c8>)
 8008706:	4313      	orrs	r3, r2
 8008708:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800870a:	f000 f821 	bl	8008750 <HAL_RCC_GetSysClockFreq>
 800870e:	4602      	mov	r2, r0
 8008710:	4b0b      	ldr	r3, [pc, #44]	; (8008740 <HAL_RCC_ClockConfig+0x1c8>)
 8008712:	689b      	ldr	r3, [r3, #8]
 8008714:	091b      	lsrs	r3, r3, #4
 8008716:	f003 030f 	and.w	r3, r3, #15
 800871a:	490a      	ldr	r1, [pc, #40]	; (8008744 <HAL_RCC_ClockConfig+0x1cc>)
 800871c:	5ccb      	ldrb	r3, [r1, r3]
 800871e:	fa22 f303 	lsr.w	r3, r2, r3
 8008722:	4a09      	ldr	r2, [pc, #36]	; (8008748 <HAL_RCC_ClockConfig+0x1d0>)
 8008724:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8008726:	4b09      	ldr	r3, [pc, #36]	; (800874c <HAL_RCC_ClockConfig+0x1d4>)
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	4618      	mov	r0, r3
 800872c:	f7f9 fe00 	bl	8002330 <HAL_InitTick>

  return HAL_OK;
 8008730:	2300      	movs	r3, #0
}
 8008732:	4618      	mov	r0, r3
 8008734:	3710      	adds	r7, #16
 8008736:	46bd      	mov	sp, r7
 8008738:	bd80      	pop	{r7, pc}
 800873a:	bf00      	nop
 800873c:	40023c00 	.word	0x40023c00
 8008740:	40023800 	.word	0x40023800
 8008744:	0801da60 	.word	0x0801da60
 8008748:	20000000 	.word	0x20000000
 800874c:	20000004 	.word	0x20000004

08008750 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008750:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008754:	b090      	sub	sp, #64	; 0x40
 8008756:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8008758:	2300      	movs	r3, #0
 800875a:	637b      	str	r3, [r7, #52]	; 0x34
 800875c:	2300      	movs	r3, #0
 800875e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008760:	2300      	movs	r3, #0
 8008762:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8008764:	2300      	movs	r3, #0
 8008766:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008768:	4b59      	ldr	r3, [pc, #356]	; (80088d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800876a:	689b      	ldr	r3, [r3, #8]
 800876c:	f003 030c 	and.w	r3, r3, #12
 8008770:	2b08      	cmp	r3, #8
 8008772:	d00d      	beq.n	8008790 <HAL_RCC_GetSysClockFreq+0x40>
 8008774:	2b08      	cmp	r3, #8
 8008776:	f200 80a1 	bhi.w	80088bc <HAL_RCC_GetSysClockFreq+0x16c>
 800877a:	2b00      	cmp	r3, #0
 800877c:	d002      	beq.n	8008784 <HAL_RCC_GetSysClockFreq+0x34>
 800877e:	2b04      	cmp	r3, #4
 8008780:	d003      	beq.n	800878a <HAL_RCC_GetSysClockFreq+0x3a>
 8008782:	e09b      	b.n	80088bc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008784:	4b53      	ldr	r3, [pc, #332]	; (80088d4 <HAL_RCC_GetSysClockFreq+0x184>)
 8008786:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008788:	e09b      	b.n	80088c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800878a:	4b53      	ldr	r3, [pc, #332]	; (80088d8 <HAL_RCC_GetSysClockFreq+0x188>)
 800878c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800878e:	e098      	b.n	80088c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008790:	4b4f      	ldr	r3, [pc, #316]	; (80088d0 <HAL_RCC_GetSysClockFreq+0x180>)
 8008792:	685b      	ldr	r3, [r3, #4]
 8008794:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008798:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800879a:	4b4d      	ldr	r3, [pc, #308]	; (80088d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800879c:	685b      	ldr	r3, [r3, #4]
 800879e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d028      	beq.n	80087f8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80087a6:	4b4a      	ldr	r3, [pc, #296]	; (80088d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80087a8:	685b      	ldr	r3, [r3, #4]
 80087aa:	099b      	lsrs	r3, r3, #6
 80087ac:	2200      	movs	r2, #0
 80087ae:	623b      	str	r3, [r7, #32]
 80087b0:	627a      	str	r2, [r7, #36]	; 0x24
 80087b2:	6a3b      	ldr	r3, [r7, #32]
 80087b4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80087b8:	2100      	movs	r1, #0
 80087ba:	4b47      	ldr	r3, [pc, #284]	; (80088d8 <HAL_RCC_GetSysClockFreq+0x188>)
 80087bc:	fb03 f201 	mul.w	r2, r3, r1
 80087c0:	2300      	movs	r3, #0
 80087c2:	fb00 f303 	mul.w	r3, r0, r3
 80087c6:	4413      	add	r3, r2
 80087c8:	4a43      	ldr	r2, [pc, #268]	; (80088d8 <HAL_RCC_GetSysClockFreq+0x188>)
 80087ca:	fba0 1202 	umull	r1, r2, r0, r2
 80087ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80087d0:	460a      	mov	r2, r1
 80087d2:	62ba      	str	r2, [r7, #40]	; 0x28
 80087d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80087d6:	4413      	add	r3, r2
 80087d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80087da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087dc:	2200      	movs	r2, #0
 80087de:	61bb      	str	r3, [r7, #24]
 80087e0:	61fa      	str	r2, [r7, #28]
 80087e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80087e6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80087ea:	f7f7 fd79 	bl	80002e0 <__aeabi_uldivmod>
 80087ee:	4602      	mov	r2, r0
 80087f0:	460b      	mov	r3, r1
 80087f2:	4613      	mov	r3, r2
 80087f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80087f6:	e053      	b.n	80088a0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80087f8:	4b35      	ldr	r3, [pc, #212]	; (80088d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80087fa:	685b      	ldr	r3, [r3, #4]
 80087fc:	099b      	lsrs	r3, r3, #6
 80087fe:	2200      	movs	r2, #0
 8008800:	613b      	str	r3, [r7, #16]
 8008802:	617a      	str	r2, [r7, #20]
 8008804:	693b      	ldr	r3, [r7, #16]
 8008806:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800880a:	f04f 0b00 	mov.w	fp, #0
 800880e:	4652      	mov	r2, sl
 8008810:	465b      	mov	r3, fp
 8008812:	f04f 0000 	mov.w	r0, #0
 8008816:	f04f 0100 	mov.w	r1, #0
 800881a:	0159      	lsls	r1, r3, #5
 800881c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008820:	0150      	lsls	r0, r2, #5
 8008822:	4602      	mov	r2, r0
 8008824:	460b      	mov	r3, r1
 8008826:	ebb2 080a 	subs.w	r8, r2, sl
 800882a:	eb63 090b 	sbc.w	r9, r3, fp
 800882e:	f04f 0200 	mov.w	r2, #0
 8008832:	f04f 0300 	mov.w	r3, #0
 8008836:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800883a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800883e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8008842:	ebb2 0408 	subs.w	r4, r2, r8
 8008846:	eb63 0509 	sbc.w	r5, r3, r9
 800884a:	f04f 0200 	mov.w	r2, #0
 800884e:	f04f 0300 	mov.w	r3, #0
 8008852:	00eb      	lsls	r3, r5, #3
 8008854:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008858:	00e2      	lsls	r2, r4, #3
 800885a:	4614      	mov	r4, r2
 800885c:	461d      	mov	r5, r3
 800885e:	eb14 030a 	adds.w	r3, r4, sl
 8008862:	603b      	str	r3, [r7, #0]
 8008864:	eb45 030b 	adc.w	r3, r5, fp
 8008868:	607b      	str	r3, [r7, #4]
 800886a:	f04f 0200 	mov.w	r2, #0
 800886e:	f04f 0300 	mov.w	r3, #0
 8008872:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008876:	4629      	mov	r1, r5
 8008878:	028b      	lsls	r3, r1, #10
 800887a:	4621      	mov	r1, r4
 800887c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008880:	4621      	mov	r1, r4
 8008882:	028a      	lsls	r2, r1, #10
 8008884:	4610      	mov	r0, r2
 8008886:	4619      	mov	r1, r3
 8008888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800888a:	2200      	movs	r2, #0
 800888c:	60bb      	str	r3, [r7, #8]
 800888e:	60fa      	str	r2, [r7, #12]
 8008890:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008894:	f7f7 fd24 	bl	80002e0 <__aeabi_uldivmod>
 8008898:	4602      	mov	r2, r0
 800889a:	460b      	mov	r3, r1
 800889c:	4613      	mov	r3, r2
 800889e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80088a0:	4b0b      	ldr	r3, [pc, #44]	; (80088d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80088a2:	685b      	ldr	r3, [r3, #4]
 80088a4:	0c1b      	lsrs	r3, r3, #16
 80088a6:	f003 0303 	and.w	r3, r3, #3
 80088aa:	3301      	adds	r3, #1
 80088ac:	005b      	lsls	r3, r3, #1
 80088ae:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 80088b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80088b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80088b8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80088ba:	e002      	b.n	80088c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80088bc:	4b05      	ldr	r3, [pc, #20]	; (80088d4 <HAL_RCC_GetSysClockFreq+0x184>)
 80088be:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80088c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80088c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80088c4:	4618      	mov	r0, r3
 80088c6:	3740      	adds	r7, #64	; 0x40
 80088c8:	46bd      	mov	sp, r7
 80088ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80088ce:	bf00      	nop
 80088d0:	40023800 	.word	0x40023800
 80088d4:	00f42400 	.word	0x00f42400
 80088d8:	017d7840 	.word	0x017d7840

080088dc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80088dc:	b480      	push	{r7}
 80088de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80088e0:	4b03      	ldr	r3, [pc, #12]	; (80088f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80088e2:	681b      	ldr	r3, [r3, #0]
}
 80088e4:	4618      	mov	r0, r3
 80088e6:	46bd      	mov	sp, r7
 80088e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ec:	4770      	bx	lr
 80088ee:	bf00      	nop
 80088f0:	20000000 	.word	0x20000000

080088f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80088f8:	f7ff fff0 	bl	80088dc <HAL_RCC_GetHCLKFreq>
 80088fc:	4602      	mov	r2, r0
 80088fe:	4b05      	ldr	r3, [pc, #20]	; (8008914 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008900:	689b      	ldr	r3, [r3, #8]
 8008902:	0a9b      	lsrs	r3, r3, #10
 8008904:	f003 0307 	and.w	r3, r3, #7
 8008908:	4903      	ldr	r1, [pc, #12]	; (8008918 <HAL_RCC_GetPCLK1Freq+0x24>)
 800890a:	5ccb      	ldrb	r3, [r1, r3]
 800890c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008910:	4618      	mov	r0, r3
 8008912:	bd80      	pop	{r7, pc}
 8008914:	40023800 	.word	0x40023800
 8008918:	0801da70 	.word	0x0801da70

0800891c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008920:	f7ff ffdc 	bl	80088dc <HAL_RCC_GetHCLKFreq>
 8008924:	4602      	mov	r2, r0
 8008926:	4b05      	ldr	r3, [pc, #20]	; (800893c <HAL_RCC_GetPCLK2Freq+0x20>)
 8008928:	689b      	ldr	r3, [r3, #8]
 800892a:	0b5b      	lsrs	r3, r3, #13
 800892c:	f003 0307 	and.w	r3, r3, #7
 8008930:	4903      	ldr	r1, [pc, #12]	; (8008940 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008932:	5ccb      	ldrb	r3, [r1, r3]
 8008934:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008938:	4618      	mov	r0, r3
 800893a:	bd80      	pop	{r7, pc}
 800893c:	40023800 	.word	0x40023800
 8008940:	0801da70 	.word	0x0801da70

08008944 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008944:	b480      	push	{r7}
 8008946:	b083      	sub	sp, #12
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
 800894c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	220f      	movs	r2, #15
 8008952:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008954:	4b12      	ldr	r3, [pc, #72]	; (80089a0 <HAL_RCC_GetClockConfig+0x5c>)
 8008956:	689b      	ldr	r3, [r3, #8]
 8008958:	f003 0203 	and.w	r2, r3, #3
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008960:	4b0f      	ldr	r3, [pc, #60]	; (80089a0 <HAL_RCC_GetClockConfig+0x5c>)
 8008962:	689b      	ldr	r3, [r3, #8]
 8008964:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800896c:	4b0c      	ldr	r3, [pc, #48]	; (80089a0 <HAL_RCC_GetClockConfig+0x5c>)
 800896e:	689b      	ldr	r3, [r3, #8]
 8008970:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8008978:	4b09      	ldr	r3, [pc, #36]	; (80089a0 <HAL_RCC_GetClockConfig+0x5c>)
 800897a:	689b      	ldr	r3, [r3, #8]
 800897c:	08db      	lsrs	r3, r3, #3
 800897e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008986:	4b07      	ldr	r3, [pc, #28]	; (80089a4 <HAL_RCC_GetClockConfig+0x60>)
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f003 020f 	and.w	r2, r3, #15
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	601a      	str	r2, [r3, #0]
}
 8008992:	bf00      	nop
 8008994:	370c      	adds	r7, #12
 8008996:	46bd      	mov	sp, r7
 8008998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899c:	4770      	bx	lr
 800899e:	bf00      	nop
 80089a0:	40023800 	.word	0x40023800
 80089a4:	40023c00 	.word	0x40023c00

080089a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b088      	sub	sp, #32
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80089b0:	2300      	movs	r3, #0
 80089b2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80089b4:	2300      	movs	r3, #0
 80089b6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80089b8:	2300      	movs	r3, #0
 80089ba:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80089bc:	2300      	movs	r3, #0
 80089be:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80089c0:	2300      	movs	r3, #0
 80089c2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	f003 0301 	and.w	r3, r3, #1
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d012      	beq.n	80089f6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80089d0:	4b69      	ldr	r3, [pc, #420]	; (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80089d2:	689b      	ldr	r3, [r3, #8]
 80089d4:	4a68      	ldr	r2, [pc, #416]	; (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80089d6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80089da:	6093      	str	r3, [r2, #8]
 80089dc:	4b66      	ldr	r3, [pc, #408]	; (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80089de:	689a      	ldr	r2, [r3, #8]
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089e4:	4964      	ldr	r1, [pc, #400]	; (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80089e6:	4313      	orrs	r3, r2
 80089e8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d101      	bne.n	80089f6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80089f2:	2301      	movs	r3, #1
 80089f4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d017      	beq.n	8008a32 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008a02:	4b5d      	ldr	r3, [pc, #372]	; (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008a04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a08:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a10:	4959      	ldr	r1, [pc, #356]	; (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008a12:	4313      	orrs	r3, r2
 8008a14:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a1c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008a20:	d101      	bne.n	8008a26 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8008a22:	2301      	movs	r3, #1
 8008a24:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d101      	bne.n	8008a32 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8008a2e:	2301      	movs	r3, #1
 8008a30:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d017      	beq.n	8008a6e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008a3e:	4b4e      	ldr	r3, [pc, #312]	; (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008a40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a44:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a4c:	494a      	ldr	r1, [pc, #296]	; (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008a4e:	4313      	orrs	r3, r2
 8008a50:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008a5c:	d101      	bne.n	8008a62 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8008a5e:	2301      	movs	r3, #1
 8008a60:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d101      	bne.n	8008a6e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8008a6a:	2301      	movs	r3, #1
 8008a6c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d001      	beq.n	8008a7e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8008a7a:	2301      	movs	r3, #1
 8008a7c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	f003 0320 	and.w	r3, r3, #32
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	f000 808b 	beq.w	8008ba2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008a8c:	4b3a      	ldr	r3, [pc, #232]	; (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a90:	4a39      	ldr	r2, [pc, #228]	; (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008a92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a96:	6413      	str	r3, [r2, #64]	; 0x40
 8008a98:	4b37      	ldr	r3, [pc, #220]	; (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008aa0:	60bb      	str	r3, [r7, #8]
 8008aa2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008aa4:	4b35      	ldr	r3, [pc, #212]	; (8008b7c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	4a34      	ldr	r2, [pc, #208]	; (8008b7c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008aaa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008aae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008ab0:	f7fa f8e4 	bl	8002c7c <HAL_GetTick>
 8008ab4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8008ab6:	e008      	b.n	8008aca <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008ab8:	f7fa f8e0 	bl	8002c7c <HAL_GetTick>
 8008abc:	4602      	mov	r2, r0
 8008abe:	697b      	ldr	r3, [r7, #20]
 8008ac0:	1ad3      	subs	r3, r2, r3
 8008ac2:	2b64      	cmp	r3, #100	; 0x64
 8008ac4:	d901      	bls.n	8008aca <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8008ac6:	2303      	movs	r3, #3
 8008ac8:	e38f      	b.n	80091ea <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8008aca:	4b2c      	ldr	r3, [pc, #176]	; (8008b7c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d0f0      	beq.n	8008ab8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008ad6:	4b28      	ldr	r3, [pc, #160]	; (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008ad8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ada:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ade:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008ae0:	693b      	ldr	r3, [r7, #16]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d035      	beq.n	8008b52 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008aea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008aee:	693a      	ldr	r2, [r7, #16]
 8008af0:	429a      	cmp	r2, r3
 8008af2:	d02e      	beq.n	8008b52 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008af4:	4b20      	ldr	r3, [pc, #128]	; (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008af6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008af8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008afc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008afe:	4b1e      	ldr	r3, [pc, #120]	; (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b02:	4a1d      	ldr	r2, [pc, #116]	; (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008b04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008b08:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008b0a:	4b1b      	ldr	r3, [pc, #108]	; (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b0e:	4a1a      	ldr	r2, [pc, #104]	; (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008b10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008b14:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8008b16:	4a18      	ldr	r2, [pc, #96]	; (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008b18:	693b      	ldr	r3, [r7, #16]
 8008b1a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008b1c:	4b16      	ldr	r3, [pc, #88]	; (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008b1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b20:	f003 0301 	and.w	r3, r3, #1
 8008b24:	2b01      	cmp	r3, #1
 8008b26:	d114      	bne.n	8008b52 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b28:	f7fa f8a8 	bl	8002c7c <HAL_GetTick>
 8008b2c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008b2e:	e00a      	b.n	8008b46 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008b30:	f7fa f8a4 	bl	8002c7c <HAL_GetTick>
 8008b34:	4602      	mov	r2, r0
 8008b36:	697b      	ldr	r3, [r7, #20]
 8008b38:	1ad3      	subs	r3, r2, r3
 8008b3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b3e:	4293      	cmp	r3, r2
 8008b40:	d901      	bls.n	8008b46 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8008b42:	2303      	movs	r3, #3
 8008b44:	e351      	b.n	80091ea <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008b46:	4b0c      	ldr	r3, [pc, #48]	; (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b4a:	f003 0302 	and.w	r3, r3, #2
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d0ee      	beq.n	8008b30 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b5a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008b5e:	d111      	bne.n	8008b84 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8008b60:	4b05      	ldr	r3, [pc, #20]	; (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008b62:	689b      	ldr	r3, [r3, #8]
 8008b64:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008b6c:	4b04      	ldr	r3, [pc, #16]	; (8008b80 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008b6e:	400b      	ands	r3, r1
 8008b70:	4901      	ldr	r1, [pc, #4]	; (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008b72:	4313      	orrs	r3, r2
 8008b74:	608b      	str	r3, [r1, #8]
 8008b76:	e00b      	b.n	8008b90 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8008b78:	40023800 	.word	0x40023800
 8008b7c:	40007000 	.word	0x40007000
 8008b80:	0ffffcff 	.word	0x0ffffcff
 8008b84:	4bac      	ldr	r3, [pc, #688]	; (8008e38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008b86:	689b      	ldr	r3, [r3, #8]
 8008b88:	4aab      	ldr	r2, [pc, #684]	; (8008e38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008b8a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008b8e:	6093      	str	r3, [r2, #8]
 8008b90:	4ba9      	ldr	r3, [pc, #676]	; (8008e38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008b92:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008b9c:	49a6      	ldr	r1, [pc, #664]	; (8008e38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008b9e:	4313      	orrs	r3, r2
 8008ba0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	f003 0310 	and.w	r3, r3, #16
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d010      	beq.n	8008bd0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008bae:	4ba2      	ldr	r3, [pc, #648]	; (8008e38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008bb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008bb4:	4aa0      	ldr	r2, [pc, #640]	; (8008e38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008bb6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008bba:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8008bbe:	4b9e      	ldr	r3, [pc, #632]	; (8008e38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008bc0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bc8:	499b      	ldr	r1, [pc, #620]	; (8008e38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008bca:	4313      	orrs	r3, r2
 8008bcc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d00a      	beq.n	8008bf2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008bdc:	4b96      	ldr	r3, [pc, #600]	; (8008e38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008be2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008bea:	4993      	ldr	r1, [pc, #588]	; (8008e38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008bec:	4313      	orrs	r3, r2
 8008bee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d00a      	beq.n	8008c14 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008bfe:	4b8e      	ldr	r3, [pc, #568]	; (8008e38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008c00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c04:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c0c:	498a      	ldr	r1, [pc, #552]	; (8008e38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008c0e:	4313      	orrs	r3, r2
 8008c10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d00a      	beq.n	8008c36 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008c20:	4b85      	ldr	r3, [pc, #532]	; (8008e38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c26:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c2e:	4982      	ldr	r1, [pc, #520]	; (8008e38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008c30:	4313      	orrs	r3, r2
 8008c32:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d00a      	beq.n	8008c58 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008c42:	4b7d      	ldr	r3, [pc, #500]	; (8008e38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c48:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c50:	4979      	ldr	r1, [pc, #484]	; (8008e38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008c52:	4313      	orrs	r3, r2
 8008c54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d00a      	beq.n	8008c7a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008c64:	4b74      	ldr	r3, [pc, #464]	; (8008e38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c6a:	f023 0203 	bic.w	r2, r3, #3
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c72:	4971      	ldr	r1, [pc, #452]	; (8008e38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008c74:	4313      	orrs	r3, r2
 8008c76:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d00a      	beq.n	8008c9c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008c86:	4b6c      	ldr	r3, [pc, #432]	; (8008e38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008c88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c8c:	f023 020c 	bic.w	r2, r3, #12
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c94:	4968      	ldr	r1, [pc, #416]	; (8008e38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008c96:	4313      	orrs	r3, r2
 8008c98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d00a      	beq.n	8008cbe <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008ca8:	4b63      	ldr	r3, [pc, #396]	; (8008e38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008cae:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008cb6:	4960      	ldr	r1, [pc, #384]	; (8008e38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008cb8:	4313      	orrs	r3, r2
 8008cba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d00a      	beq.n	8008ce0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008cca:	4b5b      	ldr	r3, [pc, #364]	; (8008e38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008ccc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008cd0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cd8:	4957      	ldr	r1, [pc, #348]	; (8008e38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008cda:	4313      	orrs	r3, r2
 8008cdc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d00a      	beq.n	8008d02 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008cec:	4b52      	ldr	r3, [pc, #328]	; (8008e38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008cf2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cfa:	494f      	ldr	r1, [pc, #316]	; (8008e38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008cfc:	4313      	orrs	r3, r2
 8008cfe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d00a      	beq.n	8008d24 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8008d0e:	4b4a      	ldr	r3, [pc, #296]	; (8008e38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008d10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d14:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d1c:	4946      	ldr	r1, [pc, #280]	; (8008e38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008d1e:	4313      	orrs	r3, r2
 8008d20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d00a      	beq.n	8008d46 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8008d30:	4b41      	ldr	r3, [pc, #260]	; (8008e38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d36:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d3e:	493e      	ldr	r1, [pc, #248]	; (8008e38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008d40:	4313      	orrs	r3, r2
 8008d42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d00a      	beq.n	8008d68 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8008d52:	4b39      	ldr	r3, [pc, #228]	; (8008e38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008d54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d58:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d60:	4935      	ldr	r1, [pc, #212]	; (8008e38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008d62:	4313      	orrs	r3, r2
 8008d64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d00a      	beq.n	8008d8a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008d74:	4b30      	ldr	r3, [pc, #192]	; (8008e38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d7a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008d82:	492d      	ldr	r1, [pc, #180]	; (8008e38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008d84:	4313      	orrs	r3, r2
 8008d86:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d011      	beq.n	8008dba <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8008d96:	4b28      	ldr	r3, [pc, #160]	; (8008e38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008d98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d9c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008da4:	4924      	ldr	r1, [pc, #144]	; (8008e38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008da6:	4313      	orrs	r3, r2
 8008da8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008db0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008db4:	d101      	bne.n	8008dba <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8008db6:	2301      	movs	r3, #1
 8008db8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	f003 0308 	and.w	r3, r3, #8
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d001      	beq.n	8008dca <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8008dc6:	2301      	movs	r3, #1
 8008dc8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d00a      	beq.n	8008dec <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008dd6:	4b18      	ldr	r3, [pc, #96]	; (8008e38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008dd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ddc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008de4:	4914      	ldr	r1, [pc, #80]	; (8008e38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008de6:	4313      	orrs	r3, r2
 8008de8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d00b      	beq.n	8008e10 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008df8:	4b0f      	ldr	r3, [pc, #60]	; (8008e38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008dfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008dfe:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008e08:	490b      	ldr	r1, [pc, #44]	; (8008e38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008e0a:	4313      	orrs	r3, r2
 8008e0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d00f      	beq.n	8008e3c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8008e1c:	4b06      	ldr	r3, [pc, #24]	; (8008e38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e22:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008e2c:	4902      	ldr	r1, [pc, #8]	; (8008e38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008e2e:	4313      	orrs	r3, r2
 8008e30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8008e34:	e002      	b.n	8008e3c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8008e36:	bf00      	nop
 8008e38:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d00b      	beq.n	8008e60 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008e48:	4b8a      	ldr	r3, [pc, #552]	; (8009074 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008e4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008e4e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e58:	4986      	ldr	r1, [pc, #536]	; (8009074 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008e5a:	4313      	orrs	r3, r2
 8008e5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d00b      	beq.n	8008e84 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8008e6c:	4b81      	ldr	r3, [pc, #516]	; (8009074 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008e6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008e72:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008e7c:	497d      	ldr	r1, [pc, #500]	; (8009074 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008e7e:	4313      	orrs	r3, r2
 8008e80:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008e84:	69fb      	ldr	r3, [r7, #28]
 8008e86:	2b01      	cmp	r3, #1
 8008e88:	d006      	beq.n	8008e98 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	f000 80d6 	beq.w	8009044 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008e98:	4b76      	ldr	r3, [pc, #472]	; (8009074 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	4a75      	ldr	r2, [pc, #468]	; (8009074 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008e9e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008ea2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008ea4:	f7f9 feea 	bl	8002c7c <HAL_GetTick>
 8008ea8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008eaa:	e008      	b.n	8008ebe <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008eac:	f7f9 fee6 	bl	8002c7c <HAL_GetTick>
 8008eb0:	4602      	mov	r2, r0
 8008eb2:	697b      	ldr	r3, [r7, #20]
 8008eb4:	1ad3      	subs	r3, r2, r3
 8008eb6:	2b64      	cmp	r3, #100	; 0x64
 8008eb8:	d901      	bls.n	8008ebe <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008eba:	2303      	movs	r3, #3
 8008ebc:	e195      	b.n	80091ea <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008ebe:	4b6d      	ldr	r3, [pc, #436]	; (8009074 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d1f0      	bne.n	8008eac <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	f003 0301 	and.w	r3, r3, #1
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d021      	beq.n	8008f1a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d11d      	bne.n	8008f1a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008ede:	4b65      	ldr	r3, [pc, #404]	; (8009074 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008ee0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008ee4:	0c1b      	lsrs	r3, r3, #16
 8008ee6:	f003 0303 	and.w	r3, r3, #3
 8008eea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008eec:	4b61      	ldr	r3, [pc, #388]	; (8009074 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008eee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008ef2:	0e1b      	lsrs	r3, r3, #24
 8008ef4:	f003 030f 	and.w	r3, r3, #15
 8008ef8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	685b      	ldr	r3, [r3, #4]
 8008efe:	019a      	lsls	r2, r3, #6
 8008f00:	693b      	ldr	r3, [r7, #16]
 8008f02:	041b      	lsls	r3, r3, #16
 8008f04:	431a      	orrs	r2, r3
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	061b      	lsls	r3, r3, #24
 8008f0a:	431a      	orrs	r2, r3
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	689b      	ldr	r3, [r3, #8]
 8008f10:	071b      	lsls	r3, r3, #28
 8008f12:	4958      	ldr	r1, [pc, #352]	; (8009074 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008f14:	4313      	orrs	r3, r2
 8008f16:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d004      	beq.n	8008f30 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008f2e:	d00a      	beq.n	8008f46 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d02e      	beq.n	8008f9a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f40:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008f44:	d129      	bne.n	8008f9a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008f46:	4b4b      	ldr	r3, [pc, #300]	; (8009074 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008f48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008f4c:	0c1b      	lsrs	r3, r3, #16
 8008f4e:	f003 0303 	and.w	r3, r3, #3
 8008f52:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008f54:	4b47      	ldr	r3, [pc, #284]	; (8009074 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008f56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008f5a:	0f1b      	lsrs	r3, r3, #28
 8008f5c:	f003 0307 	and.w	r3, r3, #7
 8008f60:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	685b      	ldr	r3, [r3, #4]
 8008f66:	019a      	lsls	r2, r3, #6
 8008f68:	693b      	ldr	r3, [r7, #16]
 8008f6a:	041b      	lsls	r3, r3, #16
 8008f6c:	431a      	orrs	r2, r3
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	68db      	ldr	r3, [r3, #12]
 8008f72:	061b      	lsls	r3, r3, #24
 8008f74:	431a      	orrs	r2, r3
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	071b      	lsls	r3, r3, #28
 8008f7a:	493e      	ldr	r1, [pc, #248]	; (8009074 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008f7c:	4313      	orrs	r3, r2
 8008f7e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008f82:	4b3c      	ldr	r3, [pc, #240]	; (8009074 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008f84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f88:	f023 021f 	bic.w	r2, r3, #31
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f90:	3b01      	subs	r3, #1
 8008f92:	4938      	ldr	r1, [pc, #224]	; (8009074 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008f94:	4313      	orrs	r3, r2
 8008f96:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d01d      	beq.n	8008fe2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008fa6:	4b33      	ldr	r3, [pc, #204]	; (8009074 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008fa8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008fac:	0e1b      	lsrs	r3, r3, #24
 8008fae:	f003 030f 	and.w	r3, r3, #15
 8008fb2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008fb4:	4b2f      	ldr	r3, [pc, #188]	; (8009074 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008fb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008fba:	0f1b      	lsrs	r3, r3, #28
 8008fbc:	f003 0307 	and.w	r3, r3, #7
 8008fc0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	685b      	ldr	r3, [r3, #4]
 8008fc6:	019a      	lsls	r2, r3, #6
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	691b      	ldr	r3, [r3, #16]
 8008fcc:	041b      	lsls	r3, r3, #16
 8008fce:	431a      	orrs	r2, r3
 8008fd0:	693b      	ldr	r3, [r7, #16]
 8008fd2:	061b      	lsls	r3, r3, #24
 8008fd4:	431a      	orrs	r2, r3
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	071b      	lsls	r3, r3, #28
 8008fda:	4926      	ldr	r1, [pc, #152]	; (8009074 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008fdc:	4313      	orrs	r3, r2
 8008fde:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d011      	beq.n	8009012 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	685b      	ldr	r3, [r3, #4]
 8008ff2:	019a      	lsls	r2, r3, #6
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	691b      	ldr	r3, [r3, #16]
 8008ff8:	041b      	lsls	r3, r3, #16
 8008ffa:	431a      	orrs	r2, r3
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	68db      	ldr	r3, [r3, #12]
 8009000:	061b      	lsls	r3, r3, #24
 8009002:	431a      	orrs	r2, r3
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	689b      	ldr	r3, [r3, #8]
 8009008:	071b      	lsls	r3, r3, #28
 800900a:	491a      	ldr	r1, [pc, #104]	; (8009074 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800900c:	4313      	orrs	r3, r2
 800900e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009012:	4b18      	ldr	r3, [pc, #96]	; (8009074 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	4a17      	ldr	r2, [pc, #92]	; (8009074 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009018:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800901c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800901e:	f7f9 fe2d 	bl	8002c7c <HAL_GetTick>
 8009022:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009024:	e008      	b.n	8009038 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009026:	f7f9 fe29 	bl	8002c7c <HAL_GetTick>
 800902a:	4602      	mov	r2, r0
 800902c:	697b      	ldr	r3, [r7, #20]
 800902e:	1ad3      	subs	r3, r2, r3
 8009030:	2b64      	cmp	r3, #100	; 0x64
 8009032:	d901      	bls.n	8009038 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009034:	2303      	movs	r3, #3
 8009036:	e0d8      	b.n	80091ea <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009038:	4b0e      	ldr	r3, [pc, #56]	; (8009074 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009040:	2b00      	cmp	r3, #0
 8009042:	d0f0      	beq.n	8009026 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8009044:	69bb      	ldr	r3, [r7, #24]
 8009046:	2b01      	cmp	r3, #1
 8009048:	f040 80ce 	bne.w	80091e8 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800904c:	4b09      	ldr	r3, [pc, #36]	; (8009074 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	4a08      	ldr	r2, [pc, #32]	; (8009074 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009052:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009056:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009058:	f7f9 fe10 	bl	8002c7c <HAL_GetTick>
 800905c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800905e:	e00b      	b.n	8009078 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009060:	f7f9 fe0c 	bl	8002c7c <HAL_GetTick>
 8009064:	4602      	mov	r2, r0
 8009066:	697b      	ldr	r3, [r7, #20]
 8009068:	1ad3      	subs	r3, r2, r3
 800906a:	2b64      	cmp	r3, #100	; 0x64
 800906c:	d904      	bls.n	8009078 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800906e:	2303      	movs	r3, #3
 8009070:	e0bb      	b.n	80091ea <HAL_RCCEx_PeriphCLKConfig+0x842>
 8009072:	bf00      	nop
 8009074:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009078:	4b5e      	ldr	r3, [pc, #376]	; (80091f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009080:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009084:	d0ec      	beq.n	8009060 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800908e:	2b00      	cmp	r3, #0
 8009090:	d003      	beq.n	800909a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009096:	2b00      	cmp	r3, #0
 8009098:	d009      	beq.n	80090ae <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d02e      	beq.n	8009104 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d12a      	bne.n	8009104 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80090ae:	4b51      	ldr	r3, [pc, #324]	; (80091f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80090b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090b4:	0c1b      	lsrs	r3, r3, #16
 80090b6:	f003 0303 	and.w	r3, r3, #3
 80090ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80090bc:	4b4d      	ldr	r3, [pc, #308]	; (80091f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80090be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090c2:	0f1b      	lsrs	r3, r3, #28
 80090c4:	f003 0307 	and.w	r3, r3, #7
 80090c8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	695b      	ldr	r3, [r3, #20]
 80090ce:	019a      	lsls	r2, r3, #6
 80090d0:	693b      	ldr	r3, [r7, #16]
 80090d2:	041b      	lsls	r3, r3, #16
 80090d4:	431a      	orrs	r2, r3
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	699b      	ldr	r3, [r3, #24]
 80090da:	061b      	lsls	r3, r3, #24
 80090dc:	431a      	orrs	r2, r3
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	071b      	lsls	r3, r3, #28
 80090e2:	4944      	ldr	r1, [pc, #272]	; (80091f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80090e4:	4313      	orrs	r3, r2
 80090e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80090ea:	4b42      	ldr	r3, [pc, #264]	; (80091f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80090ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80090f0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090f8:	3b01      	subs	r3, #1
 80090fa:	021b      	lsls	r3, r3, #8
 80090fc:	493d      	ldr	r1, [pc, #244]	; (80091f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80090fe:	4313      	orrs	r3, r2
 8009100:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800910c:	2b00      	cmp	r3, #0
 800910e:	d022      	beq.n	8009156 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009114:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009118:	d11d      	bne.n	8009156 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800911a:	4b36      	ldr	r3, [pc, #216]	; (80091f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800911c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009120:	0e1b      	lsrs	r3, r3, #24
 8009122:	f003 030f 	and.w	r3, r3, #15
 8009126:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009128:	4b32      	ldr	r3, [pc, #200]	; (80091f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800912a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800912e:	0f1b      	lsrs	r3, r3, #28
 8009130:	f003 0307 	and.w	r3, r3, #7
 8009134:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	695b      	ldr	r3, [r3, #20]
 800913a:	019a      	lsls	r2, r3, #6
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	6a1b      	ldr	r3, [r3, #32]
 8009140:	041b      	lsls	r3, r3, #16
 8009142:	431a      	orrs	r2, r3
 8009144:	693b      	ldr	r3, [r7, #16]
 8009146:	061b      	lsls	r3, r3, #24
 8009148:	431a      	orrs	r2, r3
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	071b      	lsls	r3, r3, #28
 800914e:	4929      	ldr	r1, [pc, #164]	; (80091f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009150:	4313      	orrs	r3, r2
 8009152:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	f003 0308 	and.w	r3, r3, #8
 800915e:	2b00      	cmp	r3, #0
 8009160:	d028      	beq.n	80091b4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009162:	4b24      	ldr	r3, [pc, #144]	; (80091f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009164:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009168:	0e1b      	lsrs	r3, r3, #24
 800916a:	f003 030f 	and.w	r3, r3, #15
 800916e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8009170:	4b20      	ldr	r3, [pc, #128]	; (80091f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009172:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009176:	0c1b      	lsrs	r3, r3, #16
 8009178:	f003 0303 	and.w	r3, r3, #3
 800917c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	695b      	ldr	r3, [r3, #20]
 8009182:	019a      	lsls	r2, r3, #6
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	041b      	lsls	r3, r3, #16
 8009188:	431a      	orrs	r2, r3
 800918a:	693b      	ldr	r3, [r7, #16]
 800918c:	061b      	lsls	r3, r3, #24
 800918e:	431a      	orrs	r2, r3
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	69db      	ldr	r3, [r3, #28]
 8009194:	071b      	lsls	r3, r3, #28
 8009196:	4917      	ldr	r1, [pc, #92]	; (80091f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009198:	4313      	orrs	r3, r2
 800919a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800919e:	4b15      	ldr	r3, [pc, #84]	; (80091f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80091a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80091a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091ac:	4911      	ldr	r1, [pc, #68]	; (80091f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80091ae:	4313      	orrs	r3, r2
 80091b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80091b4:	4b0f      	ldr	r3, [pc, #60]	; (80091f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	4a0e      	ldr	r2, [pc, #56]	; (80091f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80091ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80091be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80091c0:	f7f9 fd5c 	bl	8002c7c <HAL_GetTick>
 80091c4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80091c6:	e008      	b.n	80091da <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80091c8:	f7f9 fd58 	bl	8002c7c <HAL_GetTick>
 80091cc:	4602      	mov	r2, r0
 80091ce:	697b      	ldr	r3, [r7, #20]
 80091d0:	1ad3      	subs	r3, r2, r3
 80091d2:	2b64      	cmp	r3, #100	; 0x64
 80091d4:	d901      	bls.n	80091da <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80091d6:	2303      	movs	r3, #3
 80091d8:	e007      	b.n	80091ea <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80091da:	4b06      	ldr	r3, [pc, #24]	; (80091f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80091e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80091e6:	d1ef      	bne.n	80091c8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80091e8:	2300      	movs	r3, #0
}
 80091ea:	4618      	mov	r0, r3
 80091ec:	3720      	adds	r7, #32
 80091ee:	46bd      	mov	sp, r7
 80091f0:	bd80      	pop	{r7, pc}
 80091f2:	bf00      	nop
 80091f4:	40023800 	.word	0x40023800

080091f8 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b082      	sub	sp, #8
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
 8009200:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d101      	bne.n	800920c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8009208:	2301      	movs	r3, #1
 800920a:	e025      	b.n	8009258 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009212:	b2db      	uxtb	r3, r3
 8009214:	2b00      	cmp	r3, #0
 8009216:	d106      	bne.n	8009226 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2200      	movs	r2, #0
 800921c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8009220:	6878      	ldr	r0, [r7, #4]
 8009222:	f7f9 f87b 	bl	800231c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	2202      	movs	r2, #2
 800922a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681a      	ldr	r2, [r3, #0]
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	3304      	adds	r3, #4
 8009236:	4619      	mov	r1, r3
 8009238:	4610      	mov	r0, r2
 800923a:	f001 ffa9 	bl	800b190 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	6818      	ldr	r0, [r3, #0]
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	685b      	ldr	r3, [r3, #4]
 8009246:	461a      	mov	r2, r3
 8009248:	6839      	ldr	r1, [r7, #0]
 800924a:	f001 fffd 	bl	800b248 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	2201      	movs	r2, #1
 8009252:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8009256:	2300      	movs	r3, #0
}
 8009258:	4618      	mov	r0, r3
 800925a:	3708      	adds	r7, #8
 800925c:	46bd      	mov	sp, r7
 800925e:	bd80      	pop	{r7, pc}

08009260 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8009260:	b580      	push	{r7, lr}
 8009262:	b086      	sub	sp, #24
 8009264:	af00      	add	r7, sp, #0
 8009266:	60f8      	str	r0, [r7, #12]
 8009268:	60b9      	str	r1, [r7, #8]
 800926a:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009272:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8009274:	7dfb      	ldrb	r3, [r7, #23]
 8009276:	2b02      	cmp	r3, #2
 8009278:	d101      	bne.n	800927e <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800927a:	2302      	movs	r3, #2
 800927c:	e021      	b.n	80092c2 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800927e:	7dfb      	ldrb	r3, [r7, #23]
 8009280:	2b01      	cmp	r3, #1
 8009282:	d002      	beq.n	800928a <HAL_SDRAM_SendCommand+0x2a>
 8009284:	7dfb      	ldrb	r3, [r7, #23]
 8009286:	2b05      	cmp	r3, #5
 8009288:	d118      	bne.n	80092bc <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	2202      	movs	r2, #2
 800928e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	687a      	ldr	r2, [r7, #4]
 8009298:	68b9      	ldr	r1, [r7, #8]
 800929a:	4618      	mov	r0, r3
 800929c:	f002 f83e 	bl	800b31c <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80092a0:	68bb      	ldr	r3, [r7, #8]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	2b02      	cmp	r3, #2
 80092a6:	d104      	bne.n	80092b2 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	2205      	movs	r2, #5
 80092ac:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80092b0:	e006      	b.n	80092c0 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	2201      	movs	r2, #1
 80092b6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80092ba:	e001      	b.n	80092c0 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 80092bc:	2301      	movs	r3, #1
 80092be:	e000      	b.n	80092c2 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 80092c0:	2300      	movs	r3, #0
}
 80092c2:	4618      	mov	r0, r3
 80092c4:	3718      	adds	r7, #24
 80092c6:	46bd      	mov	sp, r7
 80092c8:	bd80      	pop	{r7, pc}

080092ca <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80092ca:	b580      	push	{r7, lr}
 80092cc:	b082      	sub	sp, #8
 80092ce:	af00      	add	r7, sp, #0
 80092d0:	6078      	str	r0, [r7, #4]
 80092d2:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80092da:	b2db      	uxtb	r3, r3
 80092dc:	2b02      	cmp	r3, #2
 80092de:	d101      	bne.n	80092e4 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80092e0:	2302      	movs	r3, #2
 80092e2:	e016      	b.n	8009312 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80092ea:	b2db      	uxtb	r3, r3
 80092ec:	2b01      	cmp	r3, #1
 80092ee:	d10f      	bne.n	8009310 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2202      	movs	r2, #2
 80092f4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	6839      	ldr	r1, [r7, #0]
 80092fe:	4618      	mov	r0, r3
 8009300:	f002 f830 	bl	800b364 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2201      	movs	r2, #1
 8009308:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800930c:	2300      	movs	r3, #0
 800930e:	e000      	b.n	8009312 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8009310:	2301      	movs	r3, #1
}
 8009312:	4618      	mov	r0, r3
 8009314:	3708      	adds	r7, #8
 8009316:	46bd      	mov	sp, r7
 8009318:	bd80      	pop	{r7, pc}

0800931a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800931a:	b580      	push	{r7, lr}
 800931c:	b084      	sub	sp, #16
 800931e:	af00      	add	r7, sp, #0
 8009320:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d101      	bne.n	800932c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009328:	2301      	movs	r3, #1
 800932a:	e09d      	b.n	8009468 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009330:	2b00      	cmp	r3, #0
 8009332:	d108      	bne.n	8009346 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	685b      	ldr	r3, [r3, #4]
 8009338:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800933c:	d009      	beq.n	8009352 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	2200      	movs	r2, #0
 8009342:	61da      	str	r2, [r3, #28]
 8009344:	e005      	b.n	8009352 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	2200      	movs	r2, #0
 800934a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2200      	movs	r2, #0
 8009350:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	2200      	movs	r2, #0
 8009356:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800935e:	b2db      	uxtb	r3, r3
 8009360:	2b00      	cmp	r3, #0
 8009362:	d106      	bne.n	8009372 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2200      	movs	r2, #0
 8009368:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800936c:	6878      	ldr	r0, [r7, #4]
 800936e:	f7f8 fea1 	bl	80020b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	2202      	movs	r2, #2
 8009376:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	681a      	ldr	r2, [r3, #0]
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009388:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	68db      	ldr	r3, [r3, #12]
 800938e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009392:	d902      	bls.n	800939a <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009394:	2300      	movs	r3, #0
 8009396:	60fb      	str	r3, [r7, #12]
 8009398:	e002      	b.n	80093a0 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800939a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800939e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	68db      	ldr	r3, [r3, #12]
 80093a4:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80093a8:	d007      	beq.n	80093ba <HAL_SPI_Init+0xa0>
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	68db      	ldr	r3, [r3, #12]
 80093ae:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80093b2:	d002      	beq.n	80093ba <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2200      	movs	r2, #0
 80093b8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	685b      	ldr	r3, [r3, #4]
 80093be:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	689b      	ldr	r3, [r3, #8]
 80093c6:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80093ca:	431a      	orrs	r2, r3
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	691b      	ldr	r3, [r3, #16]
 80093d0:	f003 0302 	and.w	r3, r3, #2
 80093d4:	431a      	orrs	r2, r3
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	695b      	ldr	r3, [r3, #20]
 80093da:	f003 0301 	and.w	r3, r3, #1
 80093de:	431a      	orrs	r2, r3
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	699b      	ldr	r3, [r3, #24]
 80093e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80093e8:	431a      	orrs	r2, r3
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	69db      	ldr	r3, [r3, #28]
 80093ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80093f2:	431a      	orrs	r2, r3
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	6a1b      	ldr	r3, [r3, #32]
 80093f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093fc:	ea42 0103 	orr.w	r1, r2, r3
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009404:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	430a      	orrs	r2, r1
 800940e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	699b      	ldr	r3, [r3, #24]
 8009414:	0c1b      	lsrs	r3, r3, #16
 8009416:	f003 0204 	and.w	r2, r3, #4
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800941e:	f003 0310 	and.w	r3, r3, #16
 8009422:	431a      	orrs	r2, r3
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009428:	f003 0308 	and.w	r3, r3, #8
 800942c:	431a      	orrs	r2, r3
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	68db      	ldr	r3, [r3, #12]
 8009432:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8009436:	ea42 0103 	orr.w	r1, r2, r3
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	430a      	orrs	r2, r1
 8009446:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	69da      	ldr	r2, [r3, #28]
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009456:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2200      	movs	r2, #0
 800945c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	2201      	movs	r2, #1
 8009462:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8009466:	2300      	movs	r3, #0
}
 8009468:	4618      	mov	r0, r3
 800946a:	3710      	adds	r7, #16
 800946c:	46bd      	mov	sp, r7
 800946e:	bd80      	pop	{r7, pc}

08009470 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b088      	sub	sp, #32
 8009474:	af00      	add	r7, sp, #0
 8009476:	60f8      	str	r0, [r7, #12]
 8009478:	60b9      	str	r1, [r7, #8]
 800947a:	603b      	str	r3, [r7, #0]
 800947c:	4613      	mov	r3, r2
 800947e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009480:	2300      	movs	r3, #0
 8009482:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800948a:	2b01      	cmp	r3, #1
 800948c:	d101      	bne.n	8009492 <HAL_SPI_Transmit+0x22>
 800948e:	2302      	movs	r3, #2
 8009490:	e158      	b.n	8009744 <HAL_SPI_Transmit+0x2d4>
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	2201      	movs	r2, #1
 8009496:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800949a:	f7f9 fbef 	bl	8002c7c <HAL_GetTick>
 800949e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80094a0:	88fb      	ldrh	r3, [r7, #6]
 80094a2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80094aa:	b2db      	uxtb	r3, r3
 80094ac:	2b01      	cmp	r3, #1
 80094ae:	d002      	beq.n	80094b6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80094b0:	2302      	movs	r3, #2
 80094b2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80094b4:	e13d      	b.n	8009732 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80094b6:	68bb      	ldr	r3, [r7, #8]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d002      	beq.n	80094c2 <HAL_SPI_Transmit+0x52>
 80094bc:	88fb      	ldrh	r3, [r7, #6]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d102      	bne.n	80094c8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80094c2:	2301      	movs	r3, #1
 80094c4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80094c6:	e134      	b.n	8009732 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	2203      	movs	r2, #3
 80094cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	2200      	movs	r2, #0
 80094d4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	68ba      	ldr	r2, [r7, #8]
 80094da:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	88fa      	ldrh	r2, [r7, #6]
 80094e0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	88fa      	ldrh	r2, [r7, #6]
 80094e6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	2200      	movs	r2, #0
 80094ec:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	2200      	movs	r2, #0
 80094f2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	2200      	movs	r2, #0
 80094fa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	2200      	movs	r2, #0
 8009502:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	2200      	movs	r2, #0
 8009508:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	689b      	ldr	r3, [r3, #8]
 800950e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009512:	d10f      	bne.n	8009534 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	681a      	ldr	r2, [r3, #0]
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009522:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	681a      	ldr	r2, [r3, #0]
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009532:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800953e:	2b40      	cmp	r3, #64	; 0x40
 8009540:	d007      	beq.n	8009552 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	681a      	ldr	r2, [r3, #0]
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009550:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	68db      	ldr	r3, [r3, #12]
 8009556:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800955a:	d94b      	bls.n	80095f4 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	685b      	ldr	r3, [r3, #4]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d002      	beq.n	800956a <HAL_SPI_Transmit+0xfa>
 8009564:	8afb      	ldrh	r3, [r7, #22]
 8009566:	2b01      	cmp	r3, #1
 8009568:	d13e      	bne.n	80095e8 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800956e:	881a      	ldrh	r2, [r3, #0]
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800957a:	1c9a      	adds	r2, r3, #2
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009584:	b29b      	uxth	r3, r3
 8009586:	3b01      	subs	r3, #1
 8009588:	b29a      	uxth	r2, r3
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800958e:	e02b      	b.n	80095e8 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	689b      	ldr	r3, [r3, #8]
 8009596:	f003 0302 	and.w	r3, r3, #2
 800959a:	2b02      	cmp	r3, #2
 800959c:	d112      	bne.n	80095c4 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095a2:	881a      	ldrh	r2, [r3, #0]
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095ae:	1c9a      	adds	r2, r3, #2
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80095b8:	b29b      	uxth	r3, r3
 80095ba:	3b01      	subs	r3, #1
 80095bc:	b29a      	uxth	r2, r3
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80095c2:	e011      	b.n	80095e8 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80095c4:	f7f9 fb5a 	bl	8002c7c <HAL_GetTick>
 80095c8:	4602      	mov	r2, r0
 80095ca:	69bb      	ldr	r3, [r7, #24]
 80095cc:	1ad3      	subs	r3, r2, r3
 80095ce:	683a      	ldr	r2, [r7, #0]
 80095d0:	429a      	cmp	r2, r3
 80095d2:	d803      	bhi.n	80095dc <HAL_SPI_Transmit+0x16c>
 80095d4:	683b      	ldr	r3, [r7, #0]
 80095d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80095da:	d102      	bne.n	80095e2 <HAL_SPI_Transmit+0x172>
 80095dc:	683b      	ldr	r3, [r7, #0]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d102      	bne.n	80095e8 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80095e2:	2303      	movs	r3, #3
 80095e4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80095e6:	e0a4      	b.n	8009732 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80095ec:	b29b      	uxth	r3, r3
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d1ce      	bne.n	8009590 <HAL_SPI_Transmit+0x120>
 80095f2:	e07c      	b.n	80096ee <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	685b      	ldr	r3, [r3, #4]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d002      	beq.n	8009602 <HAL_SPI_Transmit+0x192>
 80095fc:	8afb      	ldrh	r3, [r7, #22]
 80095fe:	2b01      	cmp	r3, #1
 8009600:	d170      	bne.n	80096e4 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009606:	b29b      	uxth	r3, r3
 8009608:	2b01      	cmp	r3, #1
 800960a:	d912      	bls.n	8009632 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009610:	881a      	ldrh	r2, [r3, #0]
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800961c:	1c9a      	adds	r2, r3, #2
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009626:	b29b      	uxth	r3, r3
 8009628:	3b02      	subs	r3, #2
 800962a:	b29a      	uxth	r2, r3
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009630:	e058      	b.n	80096e4 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	330c      	adds	r3, #12
 800963c:	7812      	ldrb	r2, [r2, #0]
 800963e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009644:	1c5a      	adds	r2, r3, #1
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800964e:	b29b      	uxth	r3, r3
 8009650:	3b01      	subs	r3, #1
 8009652:	b29a      	uxth	r2, r3
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8009658:	e044      	b.n	80096e4 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	689b      	ldr	r3, [r3, #8]
 8009660:	f003 0302 	and.w	r3, r3, #2
 8009664:	2b02      	cmp	r3, #2
 8009666:	d12b      	bne.n	80096c0 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800966c:	b29b      	uxth	r3, r3
 800966e:	2b01      	cmp	r3, #1
 8009670:	d912      	bls.n	8009698 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009676:	881a      	ldrh	r2, [r3, #0]
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009682:	1c9a      	adds	r2, r3, #2
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800968c:	b29b      	uxth	r3, r3
 800968e:	3b02      	subs	r3, #2
 8009690:	b29a      	uxth	r2, r3
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009696:	e025      	b.n	80096e4 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	330c      	adds	r3, #12
 80096a2:	7812      	ldrb	r2, [r2, #0]
 80096a4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096aa:	1c5a      	adds	r2, r3, #1
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80096b4:	b29b      	uxth	r3, r3
 80096b6:	3b01      	subs	r3, #1
 80096b8:	b29a      	uxth	r2, r3
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80096be:	e011      	b.n	80096e4 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80096c0:	f7f9 fadc 	bl	8002c7c <HAL_GetTick>
 80096c4:	4602      	mov	r2, r0
 80096c6:	69bb      	ldr	r3, [r7, #24]
 80096c8:	1ad3      	subs	r3, r2, r3
 80096ca:	683a      	ldr	r2, [r7, #0]
 80096cc:	429a      	cmp	r2, r3
 80096ce:	d803      	bhi.n	80096d8 <HAL_SPI_Transmit+0x268>
 80096d0:	683b      	ldr	r3, [r7, #0]
 80096d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80096d6:	d102      	bne.n	80096de <HAL_SPI_Transmit+0x26e>
 80096d8:	683b      	ldr	r3, [r7, #0]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d102      	bne.n	80096e4 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80096de:	2303      	movs	r3, #3
 80096e0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80096e2:	e026      	b.n	8009732 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80096e8:	b29b      	uxth	r3, r3
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d1b5      	bne.n	800965a <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80096ee:	69ba      	ldr	r2, [r7, #24]
 80096f0:	6839      	ldr	r1, [r7, #0]
 80096f2:	68f8      	ldr	r0, [r7, #12]
 80096f4:	f000 fd16 	bl	800a124 <SPI_EndRxTxTransaction>
 80096f8:	4603      	mov	r3, r0
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d002      	beq.n	8009704 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	2220      	movs	r2, #32
 8009702:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	689b      	ldr	r3, [r3, #8]
 8009708:	2b00      	cmp	r3, #0
 800970a:	d10a      	bne.n	8009722 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800970c:	2300      	movs	r3, #0
 800970e:	613b      	str	r3, [r7, #16]
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	68db      	ldr	r3, [r3, #12]
 8009716:	613b      	str	r3, [r7, #16]
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	689b      	ldr	r3, [r3, #8]
 800971e:	613b      	str	r3, [r7, #16]
 8009720:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009726:	2b00      	cmp	r3, #0
 8009728:	d002      	beq.n	8009730 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800972a:	2301      	movs	r3, #1
 800972c:	77fb      	strb	r3, [r7, #31]
 800972e:	e000      	b.n	8009732 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8009730:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	2201      	movs	r2, #1
 8009736:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	2200      	movs	r2, #0
 800973e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8009742:	7ffb      	ldrb	r3, [r7, #31]
}
 8009744:	4618      	mov	r0, r3
 8009746:	3720      	adds	r7, #32
 8009748:	46bd      	mov	sp, r7
 800974a:	bd80      	pop	{r7, pc}

0800974c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b088      	sub	sp, #32
 8009750:	af02      	add	r7, sp, #8
 8009752:	60f8      	str	r0, [r7, #12]
 8009754:	60b9      	str	r1, [r7, #8]
 8009756:	603b      	str	r3, [r7, #0]
 8009758:	4613      	mov	r3, r2
 800975a:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800975c:	2300      	movs	r3, #0
 800975e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	685b      	ldr	r3, [r3, #4]
 8009764:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009768:	d112      	bne.n	8009790 <HAL_SPI_Receive+0x44>
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	689b      	ldr	r3, [r3, #8]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d10e      	bne.n	8009790 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	2204      	movs	r2, #4
 8009776:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800977a:	88fa      	ldrh	r2, [r7, #6]
 800977c:	683b      	ldr	r3, [r7, #0]
 800977e:	9300      	str	r3, [sp, #0]
 8009780:	4613      	mov	r3, r2
 8009782:	68ba      	ldr	r2, [r7, #8]
 8009784:	68b9      	ldr	r1, [r7, #8]
 8009786:	68f8      	ldr	r0, [r7, #12]
 8009788:	f000 f910 	bl	80099ac <HAL_SPI_TransmitReceive>
 800978c:	4603      	mov	r3, r0
 800978e:	e109      	b.n	80099a4 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8009796:	2b01      	cmp	r3, #1
 8009798:	d101      	bne.n	800979e <HAL_SPI_Receive+0x52>
 800979a:	2302      	movs	r3, #2
 800979c:	e102      	b.n	80099a4 <HAL_SPI_Receive+0x258>
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	2201      	movs	r2, #1
 80097a2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80097a6:	f7f9 fa69 	bl	8002c7c <HAL_GetTick>
 80097aa:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80097b2:	b2db      	uxtb	r3, r3
 80097b4:	2b01      	cmp	r3, #1
 80097b6:	d002      	beq.n	80097be <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80097b8:	2302      	movs	r3, #2
 80097ba:	75fb      	strb	r3, [r7, #23]
    goto error;
 80097bc:	e0e9      	b.n	8009992 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 80097be:	68bb      	ldr	r3, [r7, #8]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d002      	beq.n	80097ca <HAL_SPI_Receive+0x7e>
 80097c4:	88fb      	ldrh	r3, [r7, #6]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d102      	bne.n	80097d0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80097ca:	2301      	movs	r3, #1
 80097cc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80097ce:	e0e0      	b.n	8009992 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	2204      	movs	r2, #4
 80097d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	2200      	movs	r2, #0
 80097dc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	68ba      	ldr	r2, [r7, #8]
 80097e2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	88fa      	ldrh	r2, [r7, #6]
 80097e8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	88fa      	ldrh	r2, [r7, #6]
 80097f0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	2200      	movs	r2, #0
 80097f8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	2200      	movs	r2, #0
 80097fe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	2200      	movs	r2, #0
 8009804:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	2200      	movs	r2, #0
 800980a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	2200      	movs	r2, #0
 8009810:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	68db      	ldr	r3, [r3, #12]
 8009816:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800981a:	d908      	bls.n	800982e <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	685a      	ldr	r2, [r3, #4]
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800982a:	605a      	str	r2, [r3, #4]
 800982c:	e007      	b.n	800983e <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	685a      	ldr	r2, [r3, #4]
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800983c:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	689b      	ldr	r3, [r3, #8]
 8009842:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009846:	d10f      	bne.n	8009868 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	681a      	ldr	r2, [r3, #0]
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009856:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	681a      	ldr	r2, [r3, #0]
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009866:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009872:	2b40      	cmp	r3, #64	; 0x40
 8009874:	d007      	beq.n	8009886 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	681a      	ldr	r2, [r3, #0]
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009884:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	68db      	ldr	r3, [r3, #12]
 800988a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800988e:	d867      	bhi.n	8009960 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8009890:	e030      	b.n	80098f4 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	689b      	ldr	r3, [r3, #8]
 8009898:	f003 0301 	and.w	r3, r3, #1
 800989c:	2b01      	cmp	r3, #1
 800989e:	d117      	bne.n	80098d0 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	f103 020c 	add.w	r2, r3, #12
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098ac:	7812      	ldrb	r2, [r2, #0]
 80098ae:	b2d2      	uxtb	r2, r2
 80098b0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098b6:	1c5a      	adds	r2, r3, #1
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80098c2:	b29b      	uxth	r3, r3
 80098c4:	3b01      	subs	r3, #1
 80098c6:	b29a      	uxth	r2, r3
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80098ce:	e011      	b.n	80098f4 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80098d0:	f7f9 f9d4 	bl	8002c7c <HAL_GetTick>
 80098d4:	4602      	mov	r2, r0
 80098d6:	693b      	ldr	r3, [r7, #16]
 80098d8:	1ad3      	subs	r3, r2, r3
 80098da:	683a      	ldr	r2, [r7, #0]
 80098dc:	429a      	cmp	r2, r3
 80098de:	d803      	bhi.n	80098e8 <HAL_SPI_Receive+0x19c>
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80098e6:	d102      	bne.n	80098ee <HAL_SPI_Receive+0x1a2>
 80098e8:	683b      	ldr	r3, [r7, #0]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d102      	bne.n	80098f4 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 80098ee:	2303      	movs	r3, #3
 80098f0:	75fb      	strb	r3, [r7, #23]
          goto error;
 80098f2:	e04e      	b.n	8009992 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80098fa:	b29b      	uxth	r3, r3
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d1c8      	bne.n	8009892 <HAL_SPI_Receive+0x146>
 8009900:	e034      	b.n	800996c <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	689b      	ldr	r3, [r3, #8]
 8009908:	f003 0301 	and.w	r3, r3, #1
 800990c:	2b01      	cmp	r3, #1
 800990e:	d115      	bne.n	800993c <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	68da      	ldr	r2, [r3, #12]
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800991a:	b292      	uxth	r2, r2
 800991c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009922:	1c9a      	adds	r2, r3, #2
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800992e:	b29b      	uxth	r3, r3
 8009930:	3b01      	subs	r3, #1
 8009932:	b29a      	uxth	r2, r3
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800993a:	e011      	b.n	8009960 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800993c:	f7f9 f99e 	bl	8002c7c <HAL_GetTick>
 8009940:	4602      	mov	r2, r0
 8009942:	693b      	ldr	r3, [r7, #16]
 8009944:	1ad3      	subs	r3, r2, r3
 8009946:	683a      	ldr	r2, [r7, #0]
 8009948:	429a      	cmp	r2, r3
 800994a:	d803      	bhi.n	8009954 <HAL_SPI_Receive+0x208>
 800994c:	683b      	ldr	r3, [r7, #0]
 800994e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009952:	d102      	bne.n	800995a <HAL_SPI_Receive+0x20e>
 8009954:	683b      	ldr	r3, [r7, #0]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d102      	bne.n	8009960 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 800995a:	2303      	movs	r3, #3
 800995c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800995e:	e018      	b.n	8009992 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009966:	b29b      	uxth	r3, r3
 8009968:	2b00      	cmp	r3, #0
 800996a:	d1ca      	bne.n	8009902 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800996c:	693a      	ldr	r2, [r7, #16]
 800996e:	6839      	ldr	r1, [r7, #0]
 8009970:	68f8      	ldr	r0, [r7, #12]
 8009972:	f000 fb5b 	bl	800a02c <SPI_EndRxTransaction>
 8009976:	4603      	mov	r3, r0
 8009978:	2b00      	cmp	r3, #0
 800997a:	d002      	beq.n	8009982 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	2220      	movs	r2, #32
 8009980:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009986:	2b00      	cmp	r3, #0
 8009988:	d002      	beq.n	8009990 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 800998a:	2301      	movs	r3, #1
 800998c:	75fb      	strb	r3, [r7, #23]
 800998e:	e000      	b.n	8009992 <HAL_SPI_Receive+0x246>
  }

error :
 8009990:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	2201      	movs	r2, #1
 8009996:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	2200      	movs	r2, #0
 800999e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80099a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80099a4:	4618      	mov	r0, r3
 80099a6:	3718      	adds	r7, #24
 80099a8:	46bd      	mov	sp, r7
 80099aa:	bd80      	pop	{r7, pc}

080099ac <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b08a      	sub	sp, #40	; 0x28
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	60f8      	str	r0, [r7, #12]
 80099b4:	60b9      	str	r1, [r7, #8]
 80099b6:	607a      	str	r2, [r7, #4]
 80099b8:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80099ba:	2301      	movs	r3, #1
 80099bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80099be:	2300      	movs	r3, #0
 80099c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80099ca:	2b01      	cmp	r3, #1
 80099cc:	d101      	bne.n	80099d2 <HAL_SPI_TransmitReceive+0x26>
 80099ce:	2302      	movs	r3, #2
 80099d0:	e1fb      	b.n	8009dca <HAL_SPI_TransmitReceive+0x41e>
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	2201      	movs	r2, #1
 80099d6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80099da:	f7f9 f94f 	bl	8002c7c <HAL_GetTick>
 80099de:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80099e6:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	685b      	ldr	r3, [r3, #4]
 80099ec:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80099ee:	887b      	ldrh	r3, [r7, #2]
 80099f0:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80099f2:	887b      	ldrh	r3, [r7, #2]
 80099f4:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80099f6:	7efb      	ldrb	r3, [r7, #27]
 80099f8:	2b01      	cmp	r3, #1
 80099fa:	d00e      	beq.n	8009a1a <HAL_SPI_TransmitReceive+0x6e>
 80099fc:	697b      	ldr	r3, [r7, #20]
 80099fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009a02:	d106      	bne.n	8009a12 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	689b      	ldr	r3, [r3, #8]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d102      	bne.n	8009a12 <HAL_SPI_TransmitReceive+0x66>
 8009a0c:	7efb      	ldrb	r3, [r7, #27]
 8009a0e:	2b04      	cmp	r3, #4
 8009a10:	d003      	beq.n	8009a1a <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8009a12:	2302      	movs	r3, #2
 8009a14:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8009a18:	e1cd      	b.n	8009db6 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009a1a:	68bb      	ldr	r3, [r7, #8]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d005      	beq.n	8009a2c <HAL_SPI_TransmitReceive+0x80>
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d002      	beq.n	8009a2c <HAL_SPI_TransmitReceive+0x80>
 8009a26:	887b      	ldrh	r3, [r7, #2]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d103      	bne.n	8009a34 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8009a2c:	2301      	movs	r3, #1
 8009a2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8009a32:	e1c0      	b.n	8009db6 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009a3a:	b2db      	uxtb	r3, r3
 8009a3c:	2b04      	cmp	r3, #4
 8009a3e:	d003      	beq.n	8009a48 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	2205      	movs	r2, #5
 8009a44:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	687a      	ldr	r2, [r7, #4]
 8009a52:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	887a      	ldrh	r2, [r7, #2]
 8009a58:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	887a      	ldrh	r2, [r7, #2]
 8009a60:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	68ba      	ldr	r2, [r7, #8]
 8009a68:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	887a      	ldrh	r2, [r7, #2]
 8009a6e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	887a      	ldrh	r2, [r7, #2]
 8009a74:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	2200      	movs	r2, #0
 8009a7a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	2200      	movs	r2, #0
 8009a80:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	68db      	ldr	r3, [r3, #12]
 8009a86:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009a8a:	d802      	bhi.n	8009a92 <HAL_SPI_TransmitReceive+0xe6>
 8009a8c:	8a3b      	ldrh	r3, [r7, #16]
 8009a8e:	2b01      	cmp	r3, #1
 8009a90:	d908      	bls.n	8009aa4 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	685a      	ldr	r2, [r3, #4]
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009aa0:	605a      	str	r2, [r3, #4]
 8009aa2:	e007      	b.n	8009ab4 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	685a      	ldr	r2, [r3, #4]
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009ab2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009abe:	2b40      	cmp	r3, #64	; 0x40
 8009ac0:	d007      	beq.n	8009ad2 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	681a      	ldr	r2, [r3, #0]
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009ad0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	68db      	ldr	r3, [r3, #12]
 8009ad6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009ada:	d97c      	bls.n	8009bd6 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	685b      	ldr	r3, [r3, #4]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d002      	beq.n	8009aea <HAL_SPI_TransmitReceive+0x13e>
 8009ae4:	8a7b      	ldrh	r3, [r7, #18]
 8009ae6:	2b01      	cmp	r3, #1
 8009ae8:	d169      	bne.n	8009bbe <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009aee:	881a      	ldrh	r2, [r3, #0]
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009afa:	1c9a      	adds	r2, r3, #2
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009b04:	b29b      	uxth	r3, r3
 8009b06:	3b01      	subs	r3, #1
 8009b08:	b29a      	uxth	r2, r3
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009b0e:	e056      	b.n	8009bbe <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	689b      	ldr	r3, [r3, #8]
 8009b16:	f003 0302 	and.w	r3, r3, #2
 8009b1a:	2b02      	cmp	r3, #2
 8009b1c:	d11b      	bne.n	8009b56 <HAL_SPI_TransmitReceive+0x1aa>
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009b22:	b29b      	uxth	r3, r3
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d016      	beq.n	8009b56 <HAL_SPI_TransmitReceive+0x1aa>
 8009b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b2a:	2b01      	cmp	r3, #1
 8009b2c:	d113      	bne.n	8009b56 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b32:	881a      	ldrh	r2, [r3, #0]
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b3e:	1c9a      	adds	r2, r3, #2
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009b48:	b29b      	uxth	r3, r3
 8009b4a:	3b01      	subs	r3, #1
 8009b4c:	b29a      	uxth	r2, r3
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009b52:	2300      	movs	r3, #0
 8009b54:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	689b      	ldr	r3, [r3, #8]
 8009b5c:	f003 0301 	and.w	r3, r3, #1
 8009b60:	2b01      	cmp	r3, #1
 8009b62:	d11c      	bne.n	8009b9e <HAL_SPI_TransmitReceive+0x1f2>
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009b6a:	b29b      	uxth	r3, r3
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d016      	beq.n	8009b9e <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	68da      	ldr	r2, [r3, #12]
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b7a:	b292      	uxth	r2, r2
 8009b7c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b82:	1c9a      	adds	r2, r3, #2
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009b8e:	b29b      	uxth	r3, r3
 8009b90:	3b01      	subs	r3, #1
 8009b92:	b29a      	uxth	r2, r3
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009b9a:	2301      	movs	r3, #1
 8009b9c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009b9e:	f7f9 f86d 	bl	8002c7c <HAL_GetTick>
 8009ba2:	4602      	mov	r2, r0
 8009ba4:	69fb      	ldr	r3, [r7, #28]
 8009ba6:	1ad3      	subs	r3, r2, r3
 8009ba8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009baa:	429a      	cmp	r2, r3
 8009bac:	d807      	bhi.n	8009bbe <HAL_SPI_TransmitReceive+0x212>
 8009bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bb0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009bb4:	d003      	beq.n	8009bbe <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8009bb6:	2303      	movs	r3, #3
 8009bb8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8009bbc:	e0fb      	b.n	8009db6 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009bc2:	b29b      	uxth	r3, r3
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d1a3      	bne.n	8009b10 <HAL_SPI_TransmitReceive+0x164>
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009bce:	b29b      	uxth	r3, r3
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d19d      	bne.n	8009b10 <HAL_SPI_TransmitReceive+0x164>
 8009bd4:	e0df      	b.n	8009d96 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	685b      	ldr	r3, [r3, #4]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d003      	beq.n	8009be6 <HAL_SPI_TransmitReceive+0x23a>
 8009bde:	8a7b      	ldrh	r3, [r7, #18]
 8009be0:	2b01      	cmp	r3, #1
 8009be2:	f040 80cb 	bne.w	8009d7c <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009bea:	b29b      	uxth	r3, r3
 8009bec:	2b01      	cmp	r3, #1
 8009bee:	d912      	bls.n	8009c16 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bf4:	881a      	ldrh	r2, [r3, #0]
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c00:	1c9a      	adds	r2, r3, #2
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009c0a:	b29b      	uxth	r3, r3
 8009c0c:	3b02      	subs	r3, #2
 8009c0e:	b29a      	uxth	r2, r3
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009c14:	e0b2      	b.n	8009d7c <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	330c      	adds	r3, #12
 8009c20:	7812      	ldrb	r2, [r2, #0]
 8009c22:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c28:	1c5a      	adds	r2, r3, #1
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009c32:	b29b      	uxth	r3, r3
 8009c34:	3b01      	subs	r3, #1
 8009c36:	b29a      	uxth	r2, r3
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009c3c:	e09e      	b.n	8009d7c <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	689b      	ldr	r3, [r3, #8]
 8009c44:	f003 0302 	and.w	r3, r3, #2
 8009c48:	2b02      	cmp	r3, #2
 8009c4a:	d134      	bne.n	8009cb6 <HAL_SPI_TransmitReceive+0x30a>
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009c50:	b29b      	uxth	r3, r3
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d02f      	beq.n	8009cb6 <HAL_SPI_TransmitReceive+0x30a>
 8009c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c58:	2b01      	cmp	r3, #1
 8009c5a:	d12c      	bne.n	8009cb6 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009c60:	b29b      	uxth	r3, r3
 8009c62:	2b01      	cmp	r3, #1
 8009c64:	d912      	bls.n	8009c8c <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c6a:	881a      	ldrh	r2, [r3, #0]
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c76:	1c9a      	adds	r2, r3, #2
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009c80:	b29b      	uxth	r3, r3
 8009c82:	3b02      	subs	r3, #2
 8009c84:	b29a      	uxth	r2, r3
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009c8a:	e012      	b.n	8009cb2 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	330c      	adds	r3, #12
 8009c96:	7812      	ldrb	r2, [r2, #0]
 8009c98:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c9e:	1c5a      	adds	r2, r3, #1
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009ca8:	b29b      	uxth	r3, r3
 8009caa:	3b01      	subs	r3, #1
 8009cac:	b29a      	uxth	r2, r3
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	689b      	ldr	r3, [r3, #8]
 8009cbc:	f003 0301 	and.w	r3, r3, #1
 8009cc0:	2b01      	cmp	r3, #1
 8009cc2:	d148      	bne.n	8009d56 <HAL_SPI_TransmitReceive+0x3aa>
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009cca:	b29b      	uxth	r3, r3
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d042      	beq.n	8009d56 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009cd6:	b29b      	uxth	r3, r3
 8009cd8:	2b01      	cmp	r3, #1
 8009cda:	d923      	bls.n	8009d24 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	68da      	ldr	r2, [r3, #12]
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ce6:	b292      	uxth	r2, r2
 8009ce8:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cee:	1c9a      	adds	r2, r3, #2
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009cfa:	b29b      	uxth	r3, r3
 8009cfc:	3b02      	subs	r3, #2
 8009cfe:	b29a      	uxth	r2, r3
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009d0c:	b29b      	uxth	r3, r3
 8009d0e:	2b01      	cmp	r3, #1
 8009d10:	d81f      	bhi.n	8009d52 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	685a      	ldr	r2, [r3, #4]
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009d20:	605a      	str	r2, [r3, #4]
 8009d22:	e016      	b.n	8009d52 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	f103 020c 	add.w	r2, r3, #12
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d30:	7812      	ldrb	r2, [r2, #0]
 8009d32:	b2d2      	uxtb	r2, r2
 8009d34:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d3a:	1c5a      	adds	r2, r3, #1
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009d46:	b29b      	uxth	r3, r3
 8009d48:	3b01      	subs	r3, #1
 8009d4a:	b29a      	uxth	r2, r3
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009d52:	2301      	movs	r3, #1
 8009d54:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009d56:	f7f8 ff91 	bl	8002c7c <HAL_GetTick>
 8009d5a:	4602      	mov	r2, r0
 8009d5c:	69fb      	ldr	r3, [r7, #28]
 8009d5e:	1ad3      	subs	r3, r2, r3
 8009d60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d62:	429a      	cmp	r2, r3
 8009d64:	d803      	bhi.n	8009d6e <HAL_SPI_TransmitReceive+0x3c2>
 8009d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009d6c:	d102      	bne.n	8009d74 <HAL_SPI_TransmitReceive+0x3c8>
 8009d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d103      	bne.n	8009d7c <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8009d74:	2303      	movs	r3, #3
 8009d76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8009d7a:	e01c      	b.n	8009db6 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009d80:	b29b      	uxth	r3, r3
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	f47f af5b 	bne.w	8009c3e <HAL_SPI_TransmitReceive+0x292>
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009d8e:	b29b      	uxth	r3, r3
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	f47f af54 	bne.w	8009c3e <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009d96:	69fa      	ldr	r2, [r7, #28]
 8009d98:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009d9a:	68f8      	ldr	r0, [r7, #12]
 8009d9c:	f000 f9c2 	bl	800a124 <SPI_EndRxTxTransaction>
 8009da0:	4603      	mov	r3, r0
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d006      	beq.n	8009db4 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8009da6:	2301      	movs	r3, #1
 8009da8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	2220      	movs	r2, #32
 8009db0:	661a      	str	r2, [r3, #96]	; 0x60
 8009db2:	e000      	b.n	8009db6 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8009db4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	2201      	movs	r2, #1
 8009dba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	2200      	movs	r2, #0
 8009dc2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8009dc6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8009dca:	4618      	mov	r0, r3
 8009dcc:	3728      	adds	r7, #40	; 0x28
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	bd80      	pop	{r7, pc}

08009dd2 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8009dd2:	b480      	push	{r7}
 8009dd4:	b083      	sub	sp, #12
 8009dd6:	af00      	add	r7, sp, #0
 8009dd8:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009de0:	b2db      	uxtb	r3, r3
}
 8009de2:	4618      	mov	r0, r3
 8009de4:	370c      	adds	r7, #12
 8009de6:	46bd      	mov	sp, r7
 8009de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dec:	4770      	bx	lr
	...

08009df0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009df0:	b580      	push	{r7, lr}
 8009df2:	b088      	sub	sp, #32
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	60f8      	str	r0, [r7, #12]
 8009df8:	60b9      	str	r1, [r7, #8]
 8009dfa:	603b      	str	r3, [r7, #0]
 8009dfc:	4613      	mov	r3, r2
 8009dfe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009e00:	f7f8 ff3c 	bl	8002c7c <HAL_GetTick>
 8009e04:	4602      	mov	r2, r0
 8009e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e08:	1a9b      	subs	r3, r3, r2
 8009e0a:	683a      	ldr	r2, [r7, #0]
 8009e0c:	4413      	add	r3, r2
 8009e0e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009e10:	f7f8 ff34 	bl	8002c7c <HAL_GetTick>
 8009e14:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009e16:	4b39      	ldr	r3, [pc, #228]	; (8009efc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	015b      	lsls	r3, r3, #5
 8009e1c:	0d1b      	lsrs	r3, r3, #20
 8009e1e:	69fa      	ldr	r2, [r7, #28]
 8009e20:	fb02 f303 	mul.w	r3, r2, r3
 8009e24:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009e26:	e054      	b.n	8009ed2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009e28:	683b      	ldr	r3, [r7, #0]
 8009e2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009e2e:	d050      	beq.n	8009ed2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009e30:	f7f8 ff24 	bl	8002c7c <HAL_GetTick>
 8009e34:	4602      	mov	r2, r0
 8009e36:	69bb      	ldr	r3, [r7, #24]
 8009e38:	1ad3      	subs	r3, r2, r3
 8009e3a:	69fa      	ldr	r2, [r7, #28]
 8009e3c:	429a      	cmp	r2, r3
 8009e3e:	d902      	bls.n	8009e46 <SPI_WaitFlagStateUntilTimeout+0x56>
 8009e40:	69fb      	ldr	r3, [r7, #28]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d13d      	bne.n	8009ec2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	685a      	ldr	r2, [r3, #4]
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009e54:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	685b      	ldr	r3, [r3, #4]
 8009e5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009e5e:	d111      	bne.n	8009e84 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	689b      	ldr	r3, [r3, #8]
 8009e64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009e68:	d004      	beq.n	8009e74 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	689b      	ldr	r3, [r3, #8]
 8009e6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009e72:	d107      	bne.n	8009e84 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	681a      	ldr	r2, [r3, #0]
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009e82:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009e8c:	d10f      	bne.n	8009eae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	681a      	ldr	r2, [r3, #0]
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009e9c:	601a      	str	r2, [r3, #0]
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	681a      	ldr	r2, [r3, #0]
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009eac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	2201      	movs	r2, #1
 8009eb2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	2200      	movs	r2, #0
 8009eba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009ebe:	2303      	movs	r3, #3
 8009ec0:	e017      	b.n	8009ef2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009ec2:	697b      	ldr	r3, [r7, #20]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d101      	bne.n	8009ecc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009ec8:	2300      	movs	r3, #0
 8009eca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009ecc:	697b      	ldr	r3, [r7, #20]
 8009ece:	3b01      	subs	r3, #1
 8009ed0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	689a      	ldr	r2, [r3, #8]
 8009ed8:	68bb      	ldr	r3, [r7, #8]
 8009eda:	4013      	ands	r3, r2
 8009edc:	68ba      	ldr	r2, [r7, #8]
 8009ede:	429a      	cmp	r2, r3
 8009ee0:	bf0c      	ite	eq
 8009ee2:	2301      	moveq	r3, #1
 8009ee4:	2300      	movne	r3, #0
 8009ee6:	b2db      	uxtb	r3, r3
 8009ee8:	461a      	mov	r2, r3
 8009eea:	79fb      	ldrb	r3, [r7, #7]
 8009eec:	429a      	cmp	r2, r3
 8009eee:	d19b      	bne.n	8009e28 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009ef0:	2300      	movs	r3, #0
}
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	3720      	adds	r7, #32
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	bd80      	pop	{r7, pc}
 8009efa:	bf00      	nop
 8009efc:	20000000 	.word	0x20000000

08009f00 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b08a      	sub	sp, #40	; 0x28
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	60f8      	str	r0, [r7, #12]
 8009f08:	60b9      	str	r1, [r7, #8]
 8009f0a:	607a      	str	r2, [r7, #4]
 8009f0c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8009f0e:	2300      	movs	r3, #0
 8009f10:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8009f12:	f7f8 feb3 	bl	8002c7c <HAL_GetTick>
 8009f16:	4602      	mov	r2, r0
 8009f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f1a:	1a9b      	subs	r3, r3, r2
 8009f1c:	683a      	ldr	r2, [r7, #0]
 8009f1e:	4413      	add	r3, r2
 8009f20:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8009f22:	f7f8 feab 	bl	8002c7c <HAL_GetTick>
 8009f26:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	330c      	adds	r3, #12
 8009f2e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009f30:	4b3d      	ldr	r3, [pc, #244]	; (800a028 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8009f32:	681a      	ldr	r2, [r3, #0]
 8009f34:	4613      	mov	r3, r2
 8009f36:	009b      	lsls	r3, r3, #2
 8009f38:	4413      	add	r3, r2
 8009f3a:	00da      	lsls	r2, r3, #3
 8009f3c:	1ad3      	subs	r3, r2, r3
 8009f3e:	0d1b      	lsrs	r3, r3, #20
 8009f40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f42:	fb02 f303 	mul.w	r3, r2, r3
 8009f46:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8009f48:	e060      	b.n	800a00c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009f4a:	68bb      	ldr	r3, [r7, #8]
 8009f4c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8009f50:	d107      	bne.n	8009f62 <SPI_WaitFifoStateUntilTimeout+0x62>
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d104      	bne.n	8009f62 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8009f58:	69fb      	ldr	r3, [r7, #28]
 8009f5a:	781b      	ldrb	r3, [r3, #0]
 8009f5c:	b2db      	uxtb	r3, r3
 8009f5e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8009f60:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8009f62:	683b      	ldr	r3, [r7, #0]
 8009f64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009f68:	d050      	beq.n	800a00c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009f6a:	f7f8 fe87 	bl	8002c7c <HAL_GetTick>
 8009f6e:	4602      	mov	r2, r0
 8009f70:	6a3b      	ldr	r3, [r7, #32]
 8009f72:	1ad3      	subs	r3, r2, r3
 8009f74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f76:	429a      	cmp	r2, r3
 8009f78:	d902      	bls.n	8009f80 <SPI_WaitFifoStateUntilTimeout+0x80>
 8009f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d13d      	bne.n	8009ffc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	685a      	ldr	r2, [r3, #4]
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009f8e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	685b      	ldr	r3, [r3, #4]
 8009f94:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009f98:	d111      	bne.n	8009fbe <SPI_WaitFifoStateUntilTimeout+0xbe>
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	689b      	ldr	r3, [r3, #8]
 8009f9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009fa2:	d004      	beq.n	8009fae <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	689b      	ldr	r3, [r3, #8]
 8009fa8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009fac:	d107      	bne.n	8009fbe <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	681a      	ldr	r2, [r3, #0]
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009fbc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009fc6:	d10f      	bne.n	8009fe8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	681a      	ldr	r2, [r3, #0]
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009fd6:	601a      	str	r2, [r3, #0]
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	681a      	ldr	r2, [r3, #0]
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009fe6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	2201      	movs	r2, #1
 8009fec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009ff8:	2303      	movs	r3, #3
 8009ffa:	e010      	b.n	800a01e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009ffc:	69bb      	ldr	r3, [r7, #24]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d101      	bne.n	800a006 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800a002:	2300      	movs	r3, #0
 800a004:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800a006:	69bb      	ldr	r3, [r7, #24]
 800a008:	3b01      	subs	r3, #1
 800a00a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	689a      	ldr	r2, [r3, #8]
 800a012:	68bb      	ldr	r3, [r7, #8]
 800a014:	4013      	ands	r3, r2
 800a016:	687a      	ldr	r2, [r7, #4]
 800a018:	429a      	cmp	r2, r3
 800a01a:	d196      	bne.n	8009f4a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800a01c:	2300      	movs	r3, #0
}
 800a01e:	4618      	mov	r0, r3
 800a020:	3728      	adds	r7, #40	; 0x28
 800a022:	46bd      	mov	sp, r7
 800a024:	bd80      	pop	{r7, pc}
 800a026:	bf00      	nop
 800a028:	20000000 	.word	0x20000000

0800a02c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b088      	sub	sp, #32
 800a030:	af02      	add	r7, sp, #8
 800a032:	60f8      	str	r0, [r7, #12]
 800a034:	60b9      	str	r1, [r7, #8]
 800a036:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	685b      	ldr	r3, [r3, #4]
 800a03c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a040:	d111      	bne.n	800a066 <SPI_EndRxTransaction+0x3a>
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	689b      	ldr	r3, [r3, #8]
 800a046:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a04a:	d004      	beq.n	800a056 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	689b      	ldr	r3, [r3, #8]
 800a050:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a054:	d107      	bne.n	800a066 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	681a      	ldr	r2, [r3, #0]
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a064:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	685b      	ldr	r3, [r3, #4]
 800a06a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a06e:	d112      	bne.n	800a096 <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	9300      	str	r3, [sp, #0]
 800a074:	68bb      	ldr	r3, [r7, #8]
 800a076:	2200      	movs	r2, #0
 800a078:	2180      	movs	r1, #128	; 0x80
 800a07a:	68f8      	ldr	r0, [r7, #12]
 800a07c:	f7ff feb8 	bl	8009df0 <SPI_WaitFlagStateUntilTimeout>
 800a080:	4603      	mov	r3, r0
 800a082:	2b00      	cmp	r3, #0
 800a084:	d021      	beq.n	800a0ca <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a08a:	f043 0220 	orr.w	r2, r3, #32
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800a092:	2303      	movs	r3, #3
 800a094:	e03d      	b.n	800a112 <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800a096:	4b21      	ldr	r3, [pc, #132]	; (800a11c <SPI_EndRxTransaction+0xf0>)
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	4a21      	ldr	r2, [pc, #132]	; (800a120 <SPI_EndRxTransaction+0xf4>)
 800a09c:	fba2 2303 	umull	r2, r3, r2, r3
 800a0a0:	0d5b      	lsrs	r3, r3, #21
 800a0a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a0a6:	fb02 f303 	mul.w	r3, r2, r3
 800a0aa:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800a0ac:	697b      	ldr	r3, [r7, #20]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d00a      	beq.n	800a0c8 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 800a0b2:	697b      	ldr	r3, [r7, #20]
 800a0b4:	3b01      	subs	r3, #1
 800a0b6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	689b      	ldr	r3, [r3, #8]
 800a0be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a0c2:	2b80      	cmp	r3, #128	; 0x80
 800a0c4:	d0f2      	beq.n	800a0ac <SPI_EndRxTransaction+0x80>
 800a0c6:	e000      	b.n	800a0ca <SPI_EndRxTransaction+0x9e>
        break;
 800a0c8:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	685b      	ldr	r3, [r3, #4]
 800a0ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a0d2:	d11d      	bne.n	800a110 <SPI_EndRxTransaction+0xe4>
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	689b      	ldr	r3, [r3, #8]
 800a0d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a0dc:	d004      	beq.n	800a0e8 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	689b      	ldr	r3, [r3, #8]
 800a0e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a0e6:	d113      	bne.n	800a110 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	9300      	str	r3, [sp, #0]
 800a0ec:	68bb      	ldr	r3, [r7, #8]
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800a0f4:	68f8      	ldr	r0, [r7, #12]
 800a0f6:	f7ff ff03 	bl	8009f00 <SPI_WaitFifoStateUntilTimeout>
 800a0fa:	4603      	mov	r3, r0
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d007      	beq.n	800a110 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a104:	f043 0220 	orr.w	r2, r3, #32
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800a10c:	2303      	movs	r3, #3
 800a10e:	e000      	b.n	800a112 <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 800a110:	2300      	movs	r3, #0
}
 800a112:	4618      	mov	r0, r3
 800a114:	3718      	adds	r7, #24
 800a116:	46bd      	mov	sp, r7
 800a118:	bd80      	pop	{r7, pc}
 800a11a:	bf00      	nop
 800a11c:	20000000 	.word	0x20000000
 800a120:	165e9f81 	.word	0x165e9f81

0800a124 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b088      	sub	sp, #32
 800a128:	af02      	add	r7, sp, #8
 800a12a:	60f8      	str	r0, [r7, #12]
 800a12c:	60b9      	str	r1, [r7, #8]
 800a12e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	9300      	str	r3, [sp, #0]
 800a134:	68bb      	ldr	r3, [r7, #8]
 800a136:	2200      	movs	r2, #0
 800a138:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800a13c:	68f8      	ldr	r0, [r7, #12]
 800a13e:	f7ff fedf 	bl	8009f00 <SPI_WaitFifoStateUntilTimeout>
 800a142:	4603      	mov	r3, r0
 800a144:	2b00      	cmp	r3, #0
 800a146:	d007      	beq.n	800a158 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a14c:	f043 0220 	orr.w	r2, r3, #32
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a154:	2303      	movs	r3, #3
 800a156:	e046      	b.n	800a1e6 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800a158:	4b25      	ldr	r3, [pc, #148]	; (800a1f0 <SPI_EndRxTxTransaction+0xcc>)
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	4a25      	ldr	r2, [pc, #148]	; (800a1f4 <SPI_EndRxTxTransaction+0xd0>)
 800a15e:	fba2 2303 	umull	r2, r3, r2, r3
 800a162:	0d5b      	lsrs	r3, r3, #21
 800a164:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a168:	fb02 f303 	mul.w	r3, r2, r3
 800a16c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	685b      	ldr	r3, [r3, #4]
 800a172:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a176:	d112      	bne.n	800a19e <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	9300      	str	r3, [sp, #0]
 800a17c:	68bb      	ldr	r3, [r7, #8]
 800a17e:	2200      	movs	r2, #0
 800a180:	2180      	movs	r1, #128	; 0x80
 800a182:	68f8      	ldr	r0, [r7, #12]
 800a184:	f7ff fe34 	bl	8009df0 <SPI_WaitFlagStateUntilTimeout>
 800a188:	4603      	mov	r3, r0
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d016      	beq.n	800a1bc <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a192:	f043 0220 	orr.w	r2, r3, #32
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800a19a:	2303      	movs	r3, #3
 800a19c:	e023      	b.n	800a1e6 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800a19e:	697b      	ldr	r3, [r7, #20]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d00a      	beq.n	800a1ba <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 800a1a4:	697b      	ldr	r3, [r7, #20]
 800a1a6:	3b01      	subs	r3, #1
 800a1a8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	689b      	ldr	r3, [r3, #8]
 800a1b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1b4:	2b80      	cmp	r3, #128	; 0x80
 800a1b6:	d0f2      	beq.n	800a19e <SPI_EndRxTxTransaction+0x7a>
 800a1b8:	e000      	b.n	800a1bc <SPI_EndRxTxTransaction+0x98>
        break;
 800a1ba:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	9300      	str	r3, [sp, #0]
 800a1c0:	68bb      	ldr	r3, [r7, #8]
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800a1c8:	68f8      	ldr	r0, [r7, #12]
 800a1ca:	f7ff fe99 	bl	8009f00 <SPI_WaitFifoStateUntilTimeout>
 800a1ce:	4603      	mov	r3, r0
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d007      	beq.n	800a1e4 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a1d8:	f043 0220 	orr.w	r2, r3, #32
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a1e0:	2303      	movs	r3, #3
 800a1e2:	e000      	b.n	800a1e6 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 800a1e4:	2300      	movs	r3, #0
}
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	3718      	adds	r7, #24
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	bd80      	pop	{r7, pc}
 800a1ee:	bf00      	nop
 800a1f0:	20000000 	.word	0x20000000
 800a1f4:	165e9f81 	.word	0x165e9f81

0800a1f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	b082      	sub	sp, #8
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	2b00      	cmp	r3, #0
 800a204:	d101      	bne.n	800a20a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a206:	2301      	movs	r3, #1
 800a208:	e049      	b.n	800a29e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a210:	b2db      	uxtb	r3, r3
 800a212:	2b00      	cmp	r3, #0
 800a214:	d106      	bne.n	800a224 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	2200      	movs	r2, #0
 800a21a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a21e:	6878      	ldr	r0, [r7, #4]
 800a220:	f000 f841 	bl	800a2a6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	2202      	movs	r2, #2
 800a228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681a      	ldr	r2, [r3, #0]
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	3304      	adds	r3, #4
 800a234:	4619      	mov	r1, r3
 800a236:	4610      	mov	r0, r2
 800a238:	f000 fa00 	bl	800a63c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	2201      	movs	r2, #1
 800a240:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	2201      	movs	r2, #1
 800a248:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	2201      	movs	r2, #1
 800a250:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	2201      	movs	r2, #1
 800a258:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	2201      	movs	r2, #1
 800a260:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	2201      	movs	r2, #1
 800a268:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	2201      	movs	r2, #1
 800a270:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	2201      	movs	r2, #1
 800a278:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	2201      	movs	r2, #1
 800a280:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	2201      	movs	r2, #1
 800a288:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	2201      	movs	r2, #1
 800a290:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	2201      	movs	r2, #1
 800a298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a29c:	2300      	movs	r3, #0
}
 800a29e:	4618      	mov	r0, r3
 800a2a0:	3708      	adds	r7, #8
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	bd80      	pop	{r7, pc}

0800a2a6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800a2a6:	b480      	push	{r7}
 800a2a8:	b083      	sub	sp, #12
 800a2aa:	af00      	add	r7, sp, #0
 800a2ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800a2ae:	bf00      	nop
 800a2b0:	370c      	adds	r7, #12
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b8:	4770      	bx	lr
	...

0800a2bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a2bc:	b480      	push	{r7}
 800a2be:	b085      	sub	sp, #20
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a2ca:	b2db      	uxtb	r3, r3
 800a2cc:	2b01      	cmp	r3, #1
 800a2ce:	d001      	beq.n	800a2d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a2d0:	2301      	movs	r3, #1
 800a2d2:	e054      	b.n	800a37e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	2202      	movs	r2, #2
 800a2d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	68da      	ldr	r2, [r3, #12]
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	f042 0201 	orr.w	r2, r2, #1
 800a2ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	4a26      	ldr	r2, [pc, #152]	; (800a38c <HAL_TIM_Base_Start_IT+0xd0>)
 800a2f2:	4293      	cmp	r3, r2
 800a2f4:	d022      	beq.n	800a33c <HAL_TIM_Base_Start_IT+0x80>
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a2fe:	d01d      	beq.n	800a33c <HAL_TIM_Base_Start_IT+0x80>
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	4a22      	ldr	r2, [pc, #136]	; (800a390 <HAL_TIM_Base_Start_IT+0xd4>)
 800a306:	4293      	cmp	r3, r2
 800a308:	d018      	beq.n	800a33c <HAL_TIM_Base_Start_IT+0x80>
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	4a21      	ldr	r2, [pc, #132]	; (800a394 <HAL_TIM_Base_Start_IT+0xd8>)
 800a310:	4293      	cmp	r3, r2
 800a312:	d013      	beq.n	800a33c <HAL_TIM_Base_Start_IT+0x80>
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	4a1f      	ldr	r2, [pc, #124]	; (800a398 <HAL_TIM_Base_Start_IT+0xdc>)
 800a31a:	4293      	cmp	r3, r2
 800a31c:	d00e      	beq.n	800a33c <HAL_TIM_Base_Start_IT+0x80>
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	4a1e      	ldr	r2, [pc, #120]	; (800a39c <HAL_TIM_Base_Start_IT+0xe0>)
 800a324:	4293      	cmp	r3, r2
 800a326:	d009      	beq.n	800a33c <HAL_TIM_Base_Start_IT+0x80>
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	4a1c      	ldr	r2, [pc, #112]	; (800a3a0 <HAL_TIM_Base_Start_IT+0xe4>)
 800a32e:	4293      	cmp	r3, r2
 800a330:	d004      	beq.n	800a33c <HAL_TIM_Base_Start_IT+0x80>
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	4a1b      	ldr	r2, [pc, #108]	; (800a3a4 <HAL_TIM_Base_Start_IT+0xe8>)
 800a338:	4293      	cmp	r3, r2
 800a33a:	d115      	bne.n	800a368 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	689a      	ldr	r2, [r3, #8]
 800a342:	4b19      	ldr	r3, [pc, #100]	; (800a3a8 <HAL_TIM_Base_Start_IT+0xec>)
 800a344:	4013      	ands	r3, r2
 800a346:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	2b06      	cmp	r3, #6
 800a34c:	d015      	beq.n	800a37a <HAL_TIM_Base_Start_IT+0xbe>
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a354:	d011      	beq.n	800a37a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	681a      	ldr	r2, [r3, #0]
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	f042 0201 	orr.w	r2, r2, #1
 800a364:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a366:	e008      	b.n	800a37a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	681a      	ldr	r2, [r3, #0]
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	f042 0201 	orr.w	r2, r2, #1
 800a376:	601a      	str	r2, [r3, #0]
 800a378:	e000      	b.n	800a37c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a37a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a37c:	2300      	movs	r3, #0
}
 800a37e:	4618      	mov	r0, r3
 800a380:	3714      	adds	r7, #20
 800a382:	46bd      	mov	sp, r7
 800a384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a388:	4770      	bx	lr
 800a38a:	bf00      	nop
 800a38c:	40010000 	.word	0x40010000
 800a390:	40000400 	.word	0x40000400
 800a394:	40000800 	.word	0x40000800
 800a398:	40000c00 	.word	0x40000c00
 800a39c:	40010400 	.word	0x40010400
 800a3a0:	40014000 	.word	0x40014000
 800a3a4:	40001800 	.word	0x40001800
 800a3a8:	00010007 	.word	0x00010007

0800a3ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b082      	sub	sp, #8
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	691b      	ldr	r3, [r3, #16]
 800a3ba:	f003 0302 	and.w	r3, r3, #2
 800a3be:	2b02      	cmp	r3, #2
 800a3c0:	d122      	bne.n	800a408 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	68db      	ldr	r3, [r3, #12]
 800a3c8:	f003 0302 	and.w	r3, r3, #2
 800a3cc:	2b02      	cmp	r3, #2
 800a3ce:	d11b      	bne.n	800a408 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	f06f 0202 	mvn.w	r2, #2
 800a3d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	2201      	movs	r2, #1
 800a3de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	699b      	ldr	r3, [r3, #24]
 800a3e6:	f003 0303 	and.w	r3, r3, #3
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d003      	beq.n	800a3f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a3ee:	6878      	ldr	r0, [r7, #4]
 800a3f0:	f000 f905 	bl	800a5fe <HAL_TIM_IC_CaptureCallback>
 800a3f4:	e005      	b.n	800a402 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a3f6:	6878      	ldr	r0, [r7, #4]
 800a3f8:	f000 f8f7 	bl	800a5ea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a3fc:	6878      	ldr	r0, [r7, #4]
 800a3fe:	f000 f908 	bl	800a612 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	2200      	movs	r2, #0
 800a406:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	691b      	ldr	r3, [r3, #16]
 800a40e:	f003 0304 	and.w	r3, r3, #4
 800a412:	2b04      	cmp	r3, #4
 800a414:	d122      	bne.n	800a45c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	68db      	ldr	r3, [r3, #12]
 800a41c:	f003 0304 	and.w	r3, r3, #4
 800a420:	2b04      	cmp	r3, #4
 800a422:	d11b      	bne.n	800a45c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	f06f 0204 	mvn.w	r2, #4
 800a42c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	2202      	movs	r2, #2
 800a432:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	699b      	ldr	r3, [r3, #24]
 800a43a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d003      	beq.n	800a44a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a442:	6878      	ldr	r0, [r7, #4]
 800a444:	f000 f8db 	bl	800a5fe <HAL_TIM_IC_CaptureCallback>
 800a448:	e005      	b.n	800a456 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a44a:	6878      	ldr	r0, [r7, #4]
 800a44c:	f000 f8cd 	bl	800a5ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a450:	6878      	ldr	r0, [r7, #4]
 800a452:	f000 f8de 	bl	800a612 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	2200      	movs	r2, #0
 800a45a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	691b      	ldr	r3, [r3, #16]
 800a462:	f003 0308 	and.w	r3, r3, #8
 800a466:	2b08      	cmp	r3, #8
 800a468:	d122      	bne.n	800a4b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	68db      	ldr	r3, [r3, #12]
 800a470:	f003 0308 	and.w	r3, r3, #8
 800a474:	2b08      	cmp	r3, #8
 800a476:	d11b      	bne.n	800a4b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	f06f 0208 	mvn.w	r2, #8
 800a480:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	2204      	movs	r2, #4
 800a486:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	69db      	ldr	r3, [r3, #28]
 800a48e:	f003 0303 	and.w	r3, r3, #3
 800a492:	2b00      	cmp	r3, #0
 800a494:	d003      	beq.n	800a49e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a496:	6878      	ldr	r0, [r7, #4]
 800a498:	f000 f8b1 	bl	800a5fe <HAL_TIM_IC_CaptureCallback>
 800a49c:	e005      	b.n	800a4aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a49e:	6878      	ldr	r0, [r7, #4]
 800a4a0:	f000 f8a3 	bl	800a5ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a4a4:	6878      	ldr	r0, [r7, #4]
 800a4a6:	f000 f8b4 	bl	800a612 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	2200      	movs	r2, #0
 800a4ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	691b      	ldr	r3, [r3, #16]
 800a4b6:	f003 0310 	and.w	r3, r3, #16
 800a4ba:	2b10      	cmp	r3, #16
 800a4bc:	d122      	bne.n	800a504 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	68db      	ldr	r3, [r3, #12]
 800a4c4:	f003 0310 	and.w	r3, r3, #16
 800a4c8:	2b10      	cmp	r3, #16
 800a4ca:	d11b      	bne.n	800a504 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	f06f 0210 	mvn.w	r2, #16
 800a4d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	2208      	movs	r2, #8
 800a4da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	69db      	ldr	r3, [r3, #28]
 800a4e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d003      	beq.n	800a4f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a4ea:	6878      	ldr	r0, [r7, #4]
 800a4ec:	f000 f887 	bl	800a5fe <HAL_TIM_IC_CaptureCallback>
 800a4f0:	e005      	b.n	800a4fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a4f2:	6878      	ldr	r0, [r7, #4]
 800a4f4:	f000 f879 	bl	800a5ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a4f8:	6878      	ldr	r0, [r7, #4]
 800a4fa:	f000 f88a 	bl	800a612 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	2200      	movs	r2, #0
 800a502:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	691b      	ldr	r3, [r3, #16]
 800a50a:	f003 0301 	and.w	r3, r3, #1
 800a50e:	2b01      	cmp	r3, #1
 800a510:	d10e      	bne.n	800a530 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	68db      	ldr	r3, [r3, #12]
 800a518:	f003 0301 	and.w	r3, r3, #1
 800a51c:	2b01      	cmp	r3, #1
 800a51e:	d107      	bne.n	800a530 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	f06f 0201 	mvn.w	r2, #1
 800a528:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a52a:	6878      	ldr	r0, [r7, #4]
 800a52c:	f7f7 fac8 	bl	8001ac0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	691b      	ldr	r3, [r3, #16]
 800a536:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a53a:	2b80      	cmp	r3, #128	; 0x80
 800a53c:	d10e      	bne.n	800a55c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	68db      	ldr	r3, [r3, #12]
 800a544:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a548:	2b80      	cmp	r3, #128	; 0x80
 800a54a:	d107      	bne.n	800a55c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a554:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a556:	6878      	ldr	r0, [r7, #4]
 800a558:	f000 f91a 	bl	800a790 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	691b      	ldr	r3, [r3, #16]
 800a562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a566:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a56a:	d10e      	bne.n	800a58a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	68db      	ldr	r3, [r3, #12]
 800a572:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a576:	2b80      	cmp	r3, #128	; 0x80
 800a578:	d107      	bne.n	800a58a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a582:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a584:	6878      	ldr	r0, [r7, #4]
 800a586:	f000 f90d 	bl	800a7a4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	691b      	ldr	r3, [r3, #16]
 800a590:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a594:	2b40      	cmp	r3, #64	; 0x40
 800a596:	d10e      	bne.n	800a5b6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	68db      	ldr	r3, [r3, #12]
 800a59e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5a2:	2b40      	cmp	r3, #64	; 0x40
 800a5a4:	d107      	bne.n	800a5b6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a5ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a5b0:	6878      	ldr	r0, [r7, #4]
 800a5b2:	f000 f838 	bl	800a626 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	691b      	ldr	r3, [r3, #16]
 800a5bc:	f003 0320 	and.w	r3, r3, #32
 800a5c0:	2b20      	cmp	r3, #32
 800a5c2:	d10e      	bne.n	800a5e2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	68db      	ldr	r3, [r3, #12]
 800a5ca:	f003 0320 	and.w	r3, r3, #32
 800a5ce:	2b20      	cmp	r3, #32
 800a5d0:	d107      	bne.n	800a5e2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	f06f 0220 	mvn.w	r2, #32
 800a5da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a5dc:	6878      	ldr	r0, [r7, #4]
 800a5de:	f000 f8cd 	bl	800a77c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a5e2:	bf00      	nop
 800a5e4:	3708      	adds	r7, #8
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	bd80      	pop	{r7, pc}

0800a5ea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a5ea:	b480      	push	{r7}
 800a5ec:	b083      	sub	sp, #12
 800a5ee:	af00      	add	r7, sp, #0
 800a5f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a5f2:	bf00      	nop
 800a5f4:	370c      	adds	r7, #12
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fc:	4770      	bx	lr

0800a5fe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a5fe:	b480      	push	{r7}
 800a600:	b083      	sub	sp, #12
 800a602:	af00      	add	r7, sp, #0
 800a604:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a606:	bf00      	nop
 800a608:	370c      	adds	r7, #12
 800a60a:	46bd      	mov	sp, r7
 800a60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a610:	4770      	bx	lr

0800a612 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a612:	b480      	push	{r7}
 800a614:	b083      	sub	sp, #12
 800a616:	af00      	add	r7, sp, #0
 800a618:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a61a:	bf00      	nop
 800a61c:	370c      	adds	r7, #12
 800a61e:	46bd      	mov	sp, r7
 800a620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a624:	4770      	bx	lr

0800a626 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a626:	b480      	push	{r7}
 800a628:	b083      	sub	sp, #12
 800a62a:	af00      	add	r7, sp, #0
 800a62c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a62e:	bf00      	nop
 800a630:	370c      	adds	r7, #12
 800a632:	46bd      	mov	sp, r7
 800a634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a638:	4770      	bx	lr
	...

0800a63c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a63c:	b480      	push	{r7}
 800a63e:	b085      	sub	sp, #20
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]
 800a644:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	4a40      	ldr	r2, [pc, #256]	; (800a750 <TIM_Base_SetConfig+0x114>)
 800a650:	4293      	cmp	r3, r2
 800a652:	d013      	beq.n	800a67c <TIM_Base_SetConfig+0x40>
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a65a:	d00f      	beq.n	800a67c <TIM_Base_SetConfig+0x40>
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	4a3d      	ldr	r2, [pc, #244]	; (800a754 <TIM_Base_SetConfig+0x118>)
 800a660:	4293      	cmp	r3, r2
 800a662:	d00b      	beq.n	800a67c <TIM_Base_SetConfig+0x40>
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	4a3c      	ldr	r2, [pc, #240]	; (800a758 <TIM_Base_SetConfig+0x11c>)
 800a668:	4293      	cmp	r3, r2
 800a66a:	d007      	beq.n	800a67c <TIM_Base_SetConfig+0x40>
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	4a3b      	ldr	r2, [pc, #236]	; (800a75c <TIM_Base_SetConfig+0x120>)
 800a670:	4293      	cmp	r3, r2
 800a672:	d003      	beq.n	800a67c <TIM_Base_SetConfig+0x40>
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	4a3a      	ldr	r2, [pc, #232]	; (800a760 <TIM_Base_SetConfig+0x124>)
 800a678:	4293      	cmp	r3, r2
 800a67a:	d108      	bne.n	800a68e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a682:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a684:	683b      	ldr	r3, [r7, #0]
 800a686:	685b      	ldr	r3, [r3, #4]
 800a688:	68fa      	ldr	r2, [r7, #12]
 800a68a:	4313      	orrs	r3, r2
 800a68c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	4a2f      	ldr	r2, [pc, #188]	; (800a750 <TIM_Base_SetConfig+0x114>)
 800a692:	4293      	cmp	r3, r2
 800a694:	d02b      	beq.n	800a6ee <TIM_Base_SetConfig+0xb2>
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a69c:	d027      	beq.n	800a6ee <TIM_Base_SetConfig+0xb2>
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	4a2c      	ldr	r2, [pc, #176]	; (800a754 <TIM_Base_SetConfig+0x118>)
 800a6a2:	4293      	cmp	r3, r2
 800a6a4:	d023      	beq.n	800a6ee <TIM_Base_SetConfig+0xb2>
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	4a2b      	ldr	r2, [pc, #172]	; (800a758 <TIM_Base_SetConfig+0x11c>)
 800a6aa:	4293      	cmp	r3, r2
 800a6ac:	d01f      	beq.n	800a6ee <TIM_Base_SetConfig+0xb2>
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	4a2a      	ldr	r2, [pc, #168]	; (800a75c <TIM_Base_SetConfig+0x120>)
 800a6b2:	4293      	cmp	r3, r2
 800a6b4:	d01b      	beq.n	800a6ee <TIM_Base_SetConfig+0xb2>
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	4a29      	ldr	r2, [pc, #164]	; (800a760 <TIM_Base_SetConfig+0x124>)
 800a6ba:	4293      	cmp	r3, r2
 800a6bc:	d017      	beq.n	800a6ee <TIM_Base_SetConfig+0xb2>
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	4a28      	ldr	r2, [pc, #160]	; (800a764 <TIM_Base_SetConfig+0x128>)
 800a6c2:	4293      	cmp	r3, r2
 800a6c4:	d013      	beq.n	800a6ee <TIM_Base_SetConfig+0xb2>
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	4a27      	ldr	r2, [pc, #156]	; (800a768 <TIM_Base_SetConfig+0x12c>)
 800a6ca:	4293      	cmp	r3, r2
 800a6cc:	d00f      	beq.n	800a6ee <TIM_Base_SetConfig+0xb2>
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	4a26      	ldr	r2, [pc, #152]	; (800a76c <TIM_Base_SetConfig+0x130>)
 800a6d2:	4293      	cmp	r3, r2
 800a6d4:	d00b      	beq.n	800a6ee <TIM_Base_SetConfig+0xb2>
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	4a25      	ldr	r2, [pc, #148]	; (800a770 <TIM_Base_SetConfig+0x134>)
 800a6da:	4293      	cmp	r3, r2
 800a6dc:	d007      	beq.n	800a6ee <TIM_Base_SetConfig+0xb2>
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	4a24      	ldr	r2, [pc, #144]	; (800a774 <TIM_Base_SetConfig+0x138>)
 800a6e2:	4293      	cmp	r3, r2
 800a6e4:	d003      	beq.n	800a6ee <TIM_Base_SetConfig+0xb2>
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	4a23      	ldr	r2, [pc, #140]	; (800a778 <TIM_Base_SetConfig+0x13c>)
 800a6ea:	4293      	cmp	r3, r2
 800a6ec:	d108      	bne.n	800a700 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a6f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a6f6:	683b      	ldr	r3, [r7, #0]
 800a6f8:	68db      	ldr	r3, [r3, #12]
 800a6fa:	68fa      	ldr	r2, [r7, #12]
 800a6fc:	4313      	orrs	r3, r2
 800a6fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a706:	683b      	ldr	r3, [r7, #0]
 800a708:	695b      	ldr	r3, [r3, #20]
 800a70a:	4313      	orrs	r3, r2
 800a70c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	68fa      	ldr	r2, [r7, #12]
 800a712:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a714:	683b      	ldr	r3, [r7, #0]
 800a716:	689a      	ldr	r2, [r3, #8]
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a71c:	683b      	ldr	r3, [r7, #0]
 800a71e:	681a      	ldr	r2, [r3, #0]
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	4a0a      	ldr	r2, [pc, #40]	; (800a750 <TIM_Base_SetConfig+0x114>)
 800a728:	4293      	cmp	r3, r2
 800a72a:	d003      	beq.n	800a734 <TIM_Base_SetConfig+0xf8>
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	4a0c      	ldr	r2, [pc, #48]	; (800a760 <TIM_Base_SetConfig+0x124>)
 800a730:	4293      	cmp	r3, r2
 800a732:	d103      	bne.n	800a73c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a734:	683b      	ldr	r3, [r7, #0]
 800a736:	691a      	ldr	r2, [r3, #16]
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	2201      	movs	r2, #1
 800a740:	615a      	str	r2, [r3, #20]
}
 800a742:	bf00      	nop
 800a744:	3714      	adds	r7, #20
 800a746:	46bd      	mov	sp, r7
 800a748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74c:	4770      	bx	lr
 800a74e:	bf00      	nop
 800a750:	40010000 	.word	0x40010000
 800a754:	40000400 	.word	0x40000400
 800a758:	40000800 	.word	0x40000800
 800a75c:	40000c00 	.word	0x40000c00
 800a760:	40010400 	.word	0x40010400
 800a764:	40014000 	.word	0x40014000
 800a768:	40014400 	.word	0x40014400
 800a76c:	40014800 	.word	0x40014800
 800a770:	40001800 	.word	0x40001800
 800a774:	40001c00 	.word	0x40001c00
 800a778:	40002000 	.word	0x40002000

0800a77c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a77c:	b480      	push	{r7}
 800a77e:	b083      	sub	sp, #12
 800a780:	af00      	add	r7, sp, #0
 800a782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a784:	bf00      	nop
 800a786:	370c      	adds	r7, #12
 800a788:	46bd      	mov	sp, r7
 800a78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78e:	4770      	bx	lr

0800a790 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a790:	b480      	push	{r7}
 800a792:	b083      	sub	sp, #12
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a798:	bf00      	nop
 800a79a:	370c      	adds	r7, #12
 800a79c:	46bd      	mov	sp, r7
 800a79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a2:	4770      	bx	lr

0800a7a4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a7a4:	b480      	push	{r7}
 800a7a6:	b083      	sub	sp, #12
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a7ac:	bf00      	nop
 800a7ae:	370c      	adds	r7, #12
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b6:	4770      	bx	lr

0800a7b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b082      	sub	sp, #8
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d101      	bne.n	800a7ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a7c6:	2301      	movs	r3, #1
 800a7c8:	e040      	b.n	800a84c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d106      	bne.n	800a7e0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a7da:	6878      	ldr	r0, [r7, #4]
 800a7dc:	f7f7 fcae 	bl	800213c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	2224      	movs	r2, #36	; 0x24
 800a7e4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	681a      	ldr	r2, [r3, #0]
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	f022 0201 	bic.w	r2, r2, #1
 800a7f4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a7f6:	6878      	ldr	r0, [r7, #4]
 800a7f8:	f000 f8b0 	bl	800a95c <UART_SetConfig>
 800a7fc:	4603      	mov	r3, r0
 800a7fe:	2b01      	cmp	r3, #1
 800a800:	d101      	bne.n	800a806 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a802:	2301      	movs	r3, #1
 800a804:	e022      	b.n	800a84c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d002      	beq.n	800a814 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a80e:	6878      	ldr	r0, [r7, #4]
 800a810:	f000 fb08 	bl	800ae24 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	685a      	ldr	r2, [r3, #4]
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a822:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	689a      	ldr	r2, [r3, #8]
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a832:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	681a      	ldr	r2, [r3, #0]
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	f042 0201 	orr.w	r2, r2, #1
 800a842:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a844:	6878      	ldr	r0, [r7, #4]
 800a846:	f000 fb8f 	bl	800af68 <UART_CheckIdleState>
 800a84a:	4603      	mov	r3, r0
}
 800a84c:	4618      	mov	r0, r3
 800a84e:	3708      	adds	r7, #8
 800a850:	46bd      	mov	sp, r7
 800a852:	bd80      	pop	{r7, pc}

0800a854 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a854:	b580      	push	{r7, lr}
 800a856:	b08a      	sub	sp, #40	; 0x28
 800a858:	af02      	add	r7, sp, #8
 800a85a:	60f8      	str	r0, [r7, #12]
 800a85c:	60b9      	str	r1, [r7, #8]
 800a85e:	603b      	str	r3, [r7, #0]
 800a860:	4613      	mov	r3, r2
 800a862:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a868:	2b20      	cmp	r3, #32
 800a86a:	d171      	bne.n	800a950 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800a86c:	68bb      	ldr	r3, [r7, #8]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d002      	beq.n	800a878 <HAL_UART_Transmit+0x24>
 800a872:	88fb      	ldrh	r3, [r7, #6]
 800a874:	2b00      	cmp	r3, #0
 800a876:	d101      	bne.n	800a87c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800a878:	2301      	movs	r3, #1
 800a87a:	e06a      	b.n	800a952 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	2200      	movs	r2, #0
 800a880:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	2221      	movs	r2, #33	; 0x21
 800a888:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a88a:	f7f8 f9f7 	bl	8002c7c <HAL_GetTick>
 800a88e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	88fa      	ldrh	r2, [r7, #6]
 800a894:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	88fa      	ldrh	r2, [r7, #6]
 800a89c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	689b      	ldr	r3, [r3, #8]
 800a8a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a8a8:	d108      	bne.n	800a8bc <HAL_UART_Transmit+0x68>
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	691b      	ldr	r3, [r3, #16]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d104      	bne.n	800a8bc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a8b6:	68bb      	ldr	r3, [r7, #8]
 800a8b8:	61bb      	str	r3, [r7, #24]
 800a8ba:	e003      	b.n	800a8c4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800a8bc:	68bb      	ldr	r3, [r7, #8]
 800a8be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a8c4:	e02c      	b.n	800a920 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a8c6:	683b      	ldr	r3, [r7, #0]
 800a8c8:	9300      	str	r3, [sp, #0]
 800a8ca:	697b      	ldr	r3, [r7, #20]
 800a8cc:	2200      	movs	r2, #0
 800a8ce:	2180      	movs	r1, #128	; 0x80
 800a8d0:	68f8      	ldr	r0, [r7, #12]
 800a8d2:	f000 fb96 	bl	800b002 <UART_WaitOnFlagUntilTimeout>
 800a8d6:	4603      	mov	r3, r0
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d001      	beq.n	800a8e0 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 800a8dc:	2303      	movs	r3, #3
 800a8de:	e038      	b.n	800a952 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800a8e0:	69fb      	ldr	r3, [r7, #28]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d10b      	bne.n	800a8fe <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a8e6:	69bb      	ldr	r3, [r7, #24]
 800a8e8:	881b      	ldrh	r3, [r3, #0]
 800a8ea:	461a      	mov	r2, r3
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a8f4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a8f6:	69bb      	ldr	r3, [r7, #24]
 800a8f8:	3302      	adds	r3, #2
 800a8fa:	61bb      	str	r3, [r7, #24]
 800a8fc:	e007      	b.n	800a90e <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a8fe:	69fb      	ldr	r3, [r7, #28]
 800a900:	781a      	ldrb	r2, [r3, #0]
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a908:	69fb      	ldr	r3, [r7, #28]
 800a90a:	3301      	adds	r3, #1
 800a90c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a914:	b29b      	uxth	r3, r3
 800a916:	3b01      	subs	r3, #1
 800a918:	b29a      	uxth	r2, r3
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a926:	b29b      	uxth	r3, r3
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d1cc      	bne.n	800a8c6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a92c:	683b      	ldr	r3, [r7, #0]
 800a92e:	9300      	str	r3, [sp, #0]
 800a930:	697b      	ldr	r3, [r7, #20]
 800a932:	2200      	movs	r2, #0
 800a934:	2140      	movs	r1, #64	; 0x40
 800a936:	68f8      	ldr	r0, [r7, #12]
 800a938:	f000 fb63 	bl	800b002 <UART_WaitOnFlagUntilTimeout>
 800a93c:	4603      	mov	r3, r0
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d001      	beq.n	800a946 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800a942:	2303      	movs	r3, #3
 800a944:	e005      	b.n	800a952 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	2220      	movs	r2, #32
 800a94a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800a94c:	2300      	movs	r3, #0
 800a94e:	e000      	b.n	800a952 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800a950:	2302      	movs	r3, #2
  }
}
 800a952:	4618      	mov	r0, r3
 800a954:	3720      	adds	r7, #32
 800a956:	46bd      	mov	sp, r7
 800a958:	bd80      	pop	{r7, pc}
	...

0800a95c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a95c:	b580      	push	{r7, lr}
 800a95e:	b088      	sub	sp, #32
 800a960:	af00      	add	r7, sp, #0
 800a962:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a964:	2300      	movs	r3, #0
 800a966:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	689a      	ldr	r2, [r3, #8]
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	691b      	ldr	r3, [r3, #16]
 800a970:	431a      	orrs	r2, r3
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	695b      	ldr	r3, [r3, #20]
 800a976:	431a      	orrs	r2, r3
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	69db      	ldr	r3, [r3, #28]
 800a97c:	4313      	orrs	r3, r2
 800a97e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	681a      	ldr	r2, [r3, #0]
 800a986:	4ba6      	ldr	r3, [pc, #664]	; (800ac20 <UART_SetConfig+0x2c4>)
 800a988:	4013      	ands	r3, r2
 800a98a:	687a      	ldr	r2, [r7, #4]
 800a98c:	6812      	ldr	r2, [r2, #0]
 800a98e:	6979      	ldr	r1, [r7, #20]
 800a990:	430b      	orrs	r3, r1
 800a992:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	685b      	ldr	r3, [r3, #4]
 800a99a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	68da      	ldr	r2, [r3, #12]
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	430a      	orrs	r2, r1
 800a9a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	699b      	ldr	r3, [r3, #24]
 800a9ae:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	6a1b      	ldr	r3, [r3, #32]
 800a9b4:	697a      	ldr	r2, [r7, #20]
 800a9b6:	4313      	orrs	r3, r2
 800a9b8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	689b      	ldr	r3, [r3, #8]
 800a9c0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	697a      	ldr	r2, [r7, #20]
 800a9ca:	430a      	orrs	r2, r1
 800a9cc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	4a94      	ldr	r2, [pc, #592]	; (800ac24 <UART_SetConfig+0x2c8>)
 800a9d4:	4293      	cmp	r3, r2
 800a9d6:	d120      	bne.n	800aa1a <UART_SetConfig+0xbe>
 800a9d8:	4b93      	ldr	r3, [pc, #588]	; (800ac28 <UART_SetConfig+0x2cc>)
 800a9da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a9de:	f003 0303 	and.w	r3, r3, #3
 800a9e2:	2b03      	cmp	r3, #3
 800a9e4:	d816      	bhi.n	800aa14 <UART_SetConfig+0xb8>
 800a9e6:	a201      	add	r2, pc, #4	; (adr r2, 800a9ec <UART_SetConfig+0x90>)
 800a9e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9ec:	0800a9fd 	.word	0x0800a9fd
 800a9f0:	0800aa09 	.word	0x0800aa09
 800a9f4:	0800aa03 	.word	0x0800aa03
 800a9f8:	0800aa0f 	.word	0x0800aa0f
 800a9fc:	2301      	movs	r3, #1
 800a9fe:	77fb      	strb	r3, [r7, #31]
 800aa00:	e150      	b.n	800aca4 <UART_SetConfig+0x348>
 800aa02:	2302      	movs	r3, #2
 800aa04:	77fb      	strb	r3, [r7, #31]
 800aa06:	e14d      	b.n	800aca4 <UART_SetConfig+0x348>
 800aa08:	2304      	movs	r3, #4
 800aa0a:	77fb      	strb	r3, [r7, #31]
 800aa0c:	e14a      	b.n	800aca4 <UART_SetConfig+0x348>
 800aa0e:	2308      	movs	r3, #8
 800aa10:	77fb      	strb	r3, [r7, #31]
 800aa12:	e147      	b.n	800aca4 <UART_SetConfig+0x348>
 800aa14:	2310      	movs	r3, #16
 800aa16:	77fb      	strb	r3, [r7, #31]
 800aa18:	e144      	b.n	800aca4 <UART_SetConfig+0x348>
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	4a83      	ldr	r2, [pc, #524]	; (800ac2c <UART_SetConfig+0x2d0>)
 800aa20:	4293      	cmp	r3, r2
 800aa22:	d132      	bne.n	800aa8a <UART_SetConfig+0x12e>
 800aa24:	4b80      	ldr	r3, [pc, #512]	; (800ac28 <UART_SetConfig+0x2cc>)
 800aa26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa2a:	f003 030c 	and.w	r3, r3, #12
 800aa2e:	2b0c      	cmp	r3, #12
 800aa30:	d828      	bhi.n	800aa84 <UART_SetConfig+0x128>
 800aa32:	a201      	add	r2, pc, #4	; (adr r2, 800aa38 <UART_SetConfig+0xdc>)
 800aa34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa38:	0800aa6d 	.word	0x0800aa6d
 800aa3c:	0800aa85 	.word	0x0800aa85
 800aa40:	0800aa85 	.word	0x0800aa85
 800aa44:	0800aa85 	.word	0x0800aa85
 800aa48:	0800aa79 	.word	0x0800aa79
 800aa4c:	0800aa85 	.word	0x0800aa85
 800aa50:	0800aa85 	.word	0x0800aa85
 800aa54:	0800aa85 	.word	0x0800aa85
 800aa58:	0800aa73 	.word	0x0800aa73
 800aa5c:	0800aa85 	.word	0x0800aa85
 800aa60:	0800aa85 	.word	0x0800aa85
 800aa64:	0800aa85 	.word	0x0800aa85
 800aa68:	0800aa7f 	.word	0x0800aa7f
 800aa6c:	2300      	movs	r3, #0
 800aa6e:	77fb      	strb	r3, [r7, #31]
 800aa70:	e118      	b.n	800aca4 <UART_SetConfig+0x348>
 800aa72:	2302      	movs	r3, #2
 800aa74:	77fb      	strb	r3, [r7, #31]
 800aa76:	e115      	b.n	800aca4 <UART_SetConfig+0x348>
 800aa78:	2304      	movs	r3, #4
 800aa7a:	77fb      	strb	r3, [r7, #31]
 800aa7c:	e112      	b.n	800aca4 <UART_SetConfig+0x348>
 800aa7e:	2308      	movs	r3, #8
 800aa80:	77fb      	strb	r3, [r7, #31]
 800aa82:	e10f      	b.n	800aca4 <UART_SetConfig+0x348>
 800aa84:	2310      	movs	r3, #16
 800aa86:	77fb      	strb	r3, [r7, #31]
 800aa88:	e10c      	b.n	800aca4 <UART_SetConfig+0x348>
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	4a68      	ldr	r2, [pc, #416]	; (800ac30 <UART_SetConfig+0x2d4>)
 800aa90:	4293      	cmp	r3, r2
 800aa92:	d120      	bne.n	800aad6 <UART_SetConfig+0x17a>
 800aa94:	4b64      	ldr	r3, [pc, #400]	; (800ac28 <UART_SetConfig+0x2cc>)
 800aa96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa9a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800aa9e:	2b30      	cmp	r3, #48	; 0x30
 800aaa0:	d013      	beq.n	800aaca <UART_SetConfig+0x16e>
 800aaa2:	2b30      	cmp	r3, #48	; 0x30
 800aaa4:	d814      	bhi.n	800aad0 <UART_SetConfig+0x174>
 800aaa6:	2b20      	cmp	r3, #32
 800aaa8:	d009      	beq.n	800aabe <UART_SetConfig+0x162>
 800aaaa:	2b20      	cmp	r3, #32
 800aaac:	d810      	bhi.n	800aad0 <UART_SetConfig+0x174>
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d002      	beq.n	800aab8 <UART_SetConfig+0x15c>
 800aab2:	2b10      	cmp	r3, #16
 800aab4:	d006      	beq.n	800aac4 <UART_SetConfig+0x168>
 800aab6:	e00b      	b.n	800aad0 <UART_SetConfig+0x174>
 800aab8:	2300      	movs	r3, #0
 800aaba:	77fb      	strb	r3, [r7, #31]
 800aabc:	e0f2      	b.n	800aca4 <UART_SetConfig+0x348>
 800aabe:	2302      	movs	r3, #2
 800aac0:	77fb      	strb	r3, [r7, #31]
 800aac2:	e0ef      	b.n	800aca4 <UART_SetConfig+0x348>
 800aac4:	2304      	movs	r3, #4
 800aac6:	77fb      	strb	r3, [r7, #31]
 800aac8:	e0ec      	b.n	800aca4 <UART_SetConfig+0x348>
 800aaca:	2308      	movs	r3, #8
 800aacc:	77fb      	strb	r3, [r7, #31]
 800aace:	e0e9      	b.n	800aca4 <UART_SetConfig+0x348>
 800aad0:	2310      	movs	r3, #16
 800aad2:	77fb      	strb	r3, [r7, #31]
 800aad4:	e0e6      	b.n	800aca4 <UART_SetConfig+0x348>
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	4a56      	ldr	r2, [pc, #344]	; (800ac34 <UART_SetConfig+0x2d8>)
 800aadc:	4293      	cmp	r3, r2
 800aade:	d120      	bne.n	800ab22 <UART_SetConfig+0x1c6>
 800aae0:	4b51      	ldr	r3, [pc, #324]	; (800ac28 <UART_SetConfig+0x2cc>)
 800aae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aae6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800aaea:	2bc0      	cmp	r3, #192	; 0xc0
 800aaec:	d013      	beq.n	800ab16 <UART_SetConfig+0x1ba>
 800aaee:	2bc0      	cmp	r3, #192	; 0xc0
 800aaf0:	d814      	bhi.n	800ab1c <UART_SetConfig+0x1c0>
 800aaf2:	2b80      	cmp	r3, #128	; 0x80
 800aaf4:	d009      	beq.n	800ab0a <UART_SetConfig+0x1ae>
 800aaf6:	2b80      	cmp	r3, #128	; 0x80
 800aaf8:	d810      	bhi.n	800ab1c <UART_SetConfig+0x1c0>
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d002      	beq.n	800ab04 <UART_SetConfig+0x1a8>
 800aafe:	2b40      	cmp	r3, #64	; 0x40
 800ab00:	d006      	beq.n	800ab10 <UART_SetConfig+0x1b4>
 800ab02:	e00b      	b.n	800ab1c <UART_SetConfig+0x1c0>
 800ab04:	2300      	movs	r3, #0
 800ab06:	77fb      	strb	r3, [r7, #31]
 800ab08:	e0cc      	b.n	800aca4 <UART_SetConfig+0x348>
 800ab0a:	2302      	movs	r3, #2
 800ab0c:	77fb      	strb	r3, [r7, #31]
 800ab0e:	e0c9      	b.n	800aca4 <UART_SetConfig+0x348>
 800ab10:	2304      	movs	r3, #4
 800ab12:	77fb      	strb	r3, [r7, #31]
 800ab14:	e0c6      	b.n	800aca4 <UART_SetConfig+0x348>
 800ab16:	2308      	movs	r3, #8
 800ab18:	77fb      	strb	r3, [r7, #31]
 800ab1a:	e0c3      	b.n	800aca4 <UART_SetConfig+0x348>
 800ab1c:	2310      	movs	r3, #16
 800ab1e:	77fb      	strb	r3, [r7, #31]
 800ab20:	e0c0      	b.n	800aca4 <UART_SetConfig+0x348>
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	4a44      	ldr	r2, [pc, #272]	; (800ac38 <UART_SetConfig+0x2dc>)
 800ab28:	4293      	cmp	r3, r2
 800ab2a:	d125      	bne.n	800ab78 <UART_SetConfig+0x21c>
 800ab2c:	4b3e      	ldr	r3, [pc, #248]	; (800ac28 <UART_SetConfig+0x2cc>)
 800ab2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ab32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ab36:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ab3a:	d017      	beq.n	800ab6c <UART_SetConfig+0x210>
 800ab3c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ab40:	d817      	bhi.n	800ab72 <UART_SetConfig+0x216>
 800ab42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ab46:	d00b      	beq.n	800ab60 <UART_SetConfig+0x204>
 800ab48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ab4c:	d811      	bhi.n	800ab72 <UART_SetConfig+0x216>
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d003      	beq.n	800ab5a <UART_SetConfig+0x1fe>
 800ab52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab56:	d006      	beq.n	800ab66 <UART_SetConfig+0x20a>
 800ab58:	e00b      	b.n	800ab72 <UART_SetConfig+0x216>
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	77fb      	strb	r3, [r7, #31]
 800ab5e:	e0a1      	b.n	800aca4 <UART_SetConfig+0x348>
 800ab60:	2302      	movs	r3, #2
 800ab62:	77fb      	strb	r3, [r7, #31]
 800ab64:	e09e      	b.n	800aca4 <UART_SetConfig+0x348>
 800ab66:	2304      	movs	r3, #4
 800ab68:	77fb      	strb	r3, [r7, #31]
 800ab6a:	e09b      	b.n	800aca4 <UART_SetConfig+0x348>
 800ab6c:	2308      	movs	r3, #8
 800ab6e:	77fb      	strb	r3, [r7, #31]
 800ab70:	e098      	b.n	800aca4 <UART_SetConfig+0x348>
 800ab72:	2310      	movs	r3, #16
 800ab74:	77fb      	strb	r3, [r7, #31]
 800ab76:	e095      	b.n	800aca4 <UART_SetConfig+0x348>
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	4a2f      	ldr	r2, [pc, #188]	; (800ac3c <UART_SetConfig+0x2e0>)
 800ab7e:	4293      	cmp	r3, r2
 800ab80:	d125      	bne.n	800abce <UART_SetConfig+0x272>
 800ab82:	4b29      	ldr	r3, [pc, #164]	; (800ac28 <UART_SetConfig+0x2cc>)
 800ab84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ab88:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800ab8c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ab90:	d017      	beq.n	800abc2 <UART_SetConfig+0x266>
 800ab92:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ab96:	d817      	bhi.n	800abc8 <UART_SetConfig+0x26c>
 800ab98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ab9c:	d00b      	beq.n	800abb6 <UART_SetConfig+0x25a>
 800ab9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aba2:	d811      	bhi.n	800abc8 <UART_SetConfig+0x26c>
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d003      	beq.n	800abb0 <UART_SetConfig+0x254>
 800aba8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800abac:	d006      	beq.n	800abbc <UART_SetConfig+0x260>
 800abae:	e00b      	b.n	800abc8 <UART_SetConfig+0x26c>
 800abb0:	2301      	movs	r3, #1
 800abb2:	77fb      	strb	r3, [r7, #31]
 800abb4:	e076      	b.n	800aca4 <UART_SetConfig+0x348>
 800abb6:	2302      	movs	r3, #2
 800abb8:	77fb      	strb	r3, [r7, #31]
 800abba:	e073      	b.n	800aca4 <UART_SetConfig+0x348>
 800abbc:	2304      	movs	r3, #4
 800abbe:	77fb      	strb	r3, [r7, #31]
 800abc0:	e070      	b.n	800aca4 <UART_SetConfig+0x348>
 800abc2:	2308      	movs	r3, #8
 800abc4:	77fb      	strb	r3, [r7, #31]
 800abc6:	e06d      	b.n	800aca4 <UART_SetConfig+0x348>
 800abc8:	2310      	movs	r3, #16
 800abca:	77fb      	strb	r3, [r7, #31]
 800abcc:	e06a      	b.n	800aca4 <UART_SetConfig+0x348>
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	4a1b      	ldr	r2, [pc, #108]	; (800ac40 <UART_SetConfig+0x2e4>)
 800abd4:	4293      	cmp	r3, r2
 800abd6:	d138      	bne.n	800ac4a <UART_SetConfig+0x2ee>
 800abd8:	4b13      	ldr	r3, [pc, #76]	; (800ac28 <UART_SetConfig+0x2cc>)
 800abda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800abde:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800abe2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800abe6:	d017      	beq.n	800ac18 <UART_SetConfig+0x2bc>
 800abe8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800abec:	d82a      	bhi.n	800ac44 <UART_SetConfig+0x2e8>
 800abee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800abf2:	d00b      	beq.n	800ac0c <UART_SetConfig+0x2b0>
 800abf4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800abf8:	d824      	bhi.n	800ac44 <UART_SetConfig+0x2e8>
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d003      	beq.n	800ac06 <UART_SetConfig+0x2aa>
 800abfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac02:	d006      	beq.n	800ac12 <UART_SetConfig+0x2b6>
 800ac04:	e01e      	b.n	800ac44 <UART_SetConfig+0x2e8>
 800ac06:	2300      	movs	r3, #0
 800ac08:	77fb      	strb	r3, [r7, #31]
 800ac0a:	e04b      	b.n	800aca4 <UART_SetConfig+0x348>
 800ac0c:	2302      	movs	r3, #2
 800ac0e:	77fb      	strb	r3, [r7, #31]
 800ac10:	e048      	b.n	800aca4 <UART_SetConfig+0x348>
 800ac12:	2304      	movs	r3, #4
 800ac14:	77fb      	strb	r3, [r7, #31]
 800ac16:	e045      	b.n	800aca4 <UART_SetConfig+0x348>
 800ac18:	2308      	movs	r3, #8
 800ac1a:	77fb      	strb	r3, [r7, #31]
 800ac1c:	e042      	b.n	800aca4 <UART_SetConfig+0x348>
 800ac1e:	bf00      	nop
 800ac20:	efff69f3 	.word	0xefff69f3
 800ac24:	40011000 	.word	0x40011000
 800ac28:	40023800 	.word	0x40023800
 800ac2c:	40004400 	.word	0x40004400
 800ac30:	40004800 	.word	0x40004800
 800ac34:	40004c00 	.word	0x40004c00
 800ac38:	40005000 	.word	0x40005000
 800ac3c:	40011400 	.word	0x40011400
 800ac40:	40007800 	.word	0x40007800
 800ac44:	2310      	movs	r3, #16
 800ac46:	77fb      	strb	r3, [r7, #31]
 800ac48:	e02c      	b.n	800aca4 <UART_SetConfig+0x348>
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	4a72      	ldr	r2, [pc, #456]	; (800ae18 <UART_SetConfig+0x4bc>)
 800ac50:	4293      	cmp	r3, r2
 800ac52:	d125      	bne.n	800aca0 <UART_SetConfig+0x344>
 800ac54:	4b71      	ldr	r3, [pc, #452]	; (800ae1c <UART_SetConfig+0x4c0>)
 800ac56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac5a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800ac5e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800ac62:	d017      	beq.n	800ac94 <UART_SetConfig+0x338>
 800ac64:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800ac68:	d817      	bhi.n	800ac9a <UART_SetConfig+0x33e>
 800ac6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ac6e:	d00b      	beq.n	800ac88 <UART_SetConfig+0x32c>
 800ac70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ac74:	d811      	bhi.n	800ac9a <UART_SetConfig+0x33e>
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d003      	beq.n	800ac82 <UART_SetConfig+0x326>
 800ac7a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ac7e:	d006      	beq.n	800ac8e <UART_SetConfig+0x332>
 800ac80:	e00b      	b.n	800ac9a <UART_SetConfig+0x33e>
 800ac82:	2300      	movs	r3, #0
 800ac84:	77fb      	strb	r3, [r7, #31]
 800ac86:	e00d      	b.n	800aca4 <UART_SetConfig+0x348>
 800ac88:	2302      	movs	r3, #2
 800ac8a:	77fb      	strb	r3, [r7, #31]
 800ac8c:	e00a      	b.n	800aca4 <UART_SetConfig+0x348>
 800ac8e:	2304      	movs	r3, #4
 800ac90:	77fb      	strb	r3, [r7, #31]
 800ac92:	e007      	b.n	800aca4 <UART_SetConfig+0x348>
 800ac94:	2308      	movs	r3, #8
 800ac96:	77fb      	strb	r3, [r7, #31]
 800ac98:	e004      	b.n	800aca4 <UART_SetConfig+0x348>
 800ac9a:	2310      	movs	r3, #16
 800ac9c:	77fb      	strb	r3, [r7, #31]
 800ac9e:	e001      	b.n	800aca4 <UART_SetConfig+0x348>
 800aca0:	2310      	movs	r3, #16
 800aca2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	69db      	ldr	r3, [r3, #28]
 800aca8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800acac:	d15b      	bne.n	800ad66 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800acae:	7ffb      	ldrb	r3, [r7, #31]
 800acb0:	2b08      	cmp	r3, #8
 800acb2:	d828      	bhi.n	800ad06 <UART_SetConfig+0x3aa>
 800acb4:	a201      	add	r2, pc, #4	; (adr r2, 800acbc <UART_SetConfig+0x360>)
 800acb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acba:	bf00      	nop
 800acbc:	0800ace1 	.word	0x0800ace1
 800acc0:	0800ace9 	.word	0x0800ace9
 800acc4:	0800acf1 	.word	0x0800acf1
 800acc8:	0800ad07 	.word	0x0800ad07
 800accc:	0800acf7 	.word	0x0800acf7
 800acd0:	0800ad07 	.word	0x0800ad07
 800acd4:	0800ad07 	.word	0x0800ad07
 800acd8:	0800ad07 	.word	0x0800ad07
 800acdc:	0800acff 	.word	0x0800acff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ace0:	f7fd fe08 	bl	80088f4 <HAL_RCC_GetPCLK1Freq>
 800ace4:	61b8      	str	r0, [r7, #24]
        break;
 800ace6:	e013      	b.n	800ad10 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ace8:	f7fd fe18 	bl	800891c <HAL_RCC_GetPCLK2Freq>
 800acec:	61b8      	str	r0, [r7, #24]
        break;
 800acee:	e00f      	b.n	800ad10 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800acf0:	4b4b      	ldr	r3, [pc, #300]	; (800ae20 <UART_SetConfig+0x4c4>)
 800acf2:	61bb      	str	r3, [r7, #24]
        break;
 800acf4:	e00c      	b.n	800ad10 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800acf6:	f7fd fd2b 	bl	8008750 <HAL_RCC_GetSysClockFreq>
 800acfa:	61b8      	str	r0, [r7, #24]
        break;
 800acfc:	e008      	b.n	800ad10 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800acfe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ad02:	61bb      	str	r3, [r7, #24]
        break;
 800ad04:	e004      	b.n	800ad10 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800ad06:	2300      	movs	r3, #0
 800ad08:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800ad0a:	2301      	movs	r3, #1
 800ad0c:	77bb      	strb	r3, [r7, #30]
        break;
 800ad0e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ad10:	69bb      	ldr	r3, [r7, #24]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d074      	beq.n	800ae00 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ad16:	69bb      	ldr	r3, [r7, #24]
 800ad18:	005a      	lsls	r2, r3, #1
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	685b      	ldr	r3, [r3, #4]
 800ad1e:	085b      	lsrs	r3, r3, #1
 800ad20:	441a      	add	r2, r3
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	685b      	ldr	r3, [r3, #4]
 800ad26:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad2a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ad2c:	693b      	ldr	r3, [r7, #16]
 800ad2e:	2b0f      	cmp	r3, #15
 800ad30:	d916      	bls.n	800ad60 <UART_SetConfig+0x404>
 800ad32:	693b      	ldr	r3, [r7, #16]
 800ad34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad38:	d212      	bcs.n	800ad60 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ad3a:	693b      	ldr	r3, [r7, #16]
 800ad3c:	b29b      	uxth	r3, r3
 800ad3e:	f023 030f 	bic.w	r3, r3, #15
 800ad42:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ad44:	693b      	ldr	r3, [r7, #16]
 800ad46:	085b      	lsrs	r3, r3, #1
 800ad48:	b29b      	uxth	r3, r3
 800ad4a:	f003 0307 	and.w	r3, r3, #7
 800ad4e:	b29a      	uxth	r2, r3
 800ad50:	89fb      	ldrh	r3, [r7, #14]
 800ad52:	4313      	orrs	r3, r2
 800ad54:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	89fa      	ldrh	r2, [r7, #14]
 800ad5c:	60da      	str	r2, [r3, #12]
 800ad5e:	e04f      	b.n	800ae00 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800ad60:	2301      	movs	r3, #1
 800ad62:	77bb      	strb	r3, [r7, #30]
 800ad64:	e04c      	b.n	800ae00 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ad66:	7ffb      	ldrb	r3, [r7, #31]
 800ad68:	2b08      	cmp	r3, #8
 800ad6a:	d828      	bhi.n	800adbe <UART_SetConfig+0x462>
 800ad6c:	a201      	add	r2, pc, #4	; (adr r2, 800ad74 <UART_SetConfig+0x418>)
 800ad6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad72:	bf00      	nop
 800ad74:	0800ad99 	.word	0x0800ad99
 800ad78:	0800ada1 	.word	0x0800ada1
 800ad7c:	0800ada9 	.word	0x0800ada9
 800ad80:	0800adbf 	.word	0x0800adbf
 800ad84:	0800adaf 	.word	0x0800adaf
 800ad88:	0800adbf 	.word	0x0800adbf
 800ad8c:	0800adbf 	.word	0x0800adbf
 800ad90:	0800adbf 	.word	0x0800adbf
 800ad94:	0800adb7 	.word	0x0800adb7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ad98:	f7fd fdac 	bl	80088f4 <HAL_RCC_GetPCLK1Freq>
 800ad9c:	61b8      	str	r0, [r7, #24]
        break;
 800ad9e:	e013      	b.n	800adc8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ada0:	f7fd fdbc 	bl	800891c <HAL_RCC_GetPCLK2Freq>
 800ada4:	61b8      	str	r0, [r7, #24]
        break;
 800ada6:	e00f      	b.n	800adc8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ada8:	4b1d      	ldr	r3, [pc, #116]	; (800ae20 <UART_SetConfig+0x4c4>)
 800adaa:	61bb      	str	r3, [r7, #24]
        break;
 800adac:	e00c      	b.n	800adc8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800adae:	f7fd fccf 	bl	8008750 <HAL_RCC_GetSysClockFreq>
 800adb2:	61b8      	str	r0, [r7, #24]
        break;
 800adb4:	e008      	b.n	800adc8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800adb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800adba:	61bb      	str	r3, [r7, #24]
        break;
 800adbc:	e004      	b.n	800adc8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800adbe:	2300      	movs	r3, #0
 800adc0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800adc2:	2301      	movs	r3, #1
 800adc4:	77bb      	strb	r3, [r7, #30]
        break;
 800adc6:	bf00      	nop
    }

    if (pclk != 0U)
 800adc8:	69bb      	ldr	r3, [r7, #24]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d018      	beq.n	800ae00 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	685b      	ldr	r3, [r3, #4]
 800add2:	085a      	lsrs	r2, r3, #1
 800add4:	69bb      	ldr	r3, [r7, #24]
 800add6:	441a      	add	r2, r3
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	685b      	ldr	r3, [r3, #4]
 800addc:	fbb2 f3f3 	udiv	r3, r2, r3
 800ade0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ade2:	693b      	ldr	r3, [r7, #16]
 800ade4:	2b0f      	cmp	r3, #15
 800ade6:	d909      	bls.n	800adfc <UART_SetConfig+0x4a0>
 800ade8:	693b      	ldr	r3, [r7, #16]
 800adea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800adee:	d205      	bcs.n	800adfc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800adf0:	693b      	ldr	r3, [r7, #16]
 800adf2:	b29a      	uxth	r2, r3
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	60da      	str	r2, [r3, #12]
 800adfa:	e001      	b.n	800ae00 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800adfc:	2301      	movs	r3, #1
 800adfe:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	2200      	movs	r2, #0
 800ae04:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	2200      	movs	r2, #0
 800ae0a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800ae0c:	7fbb      	ldrb	r3, [r7, #30]
}
 800ae0e:	4618      	mov	r0, r3
 800ae10:	3720      	adds	r7, #32
 800ae12:	46bd      	mov	sp, r7
 800ae14:	bd80      	pop	{r7, pc}
 800ae16:	bf00      	nop
 800ae18:	40007c00 	.word	0x40007c00
 800ae1c:	40023800 	.word	0x40023800
 800ae20:	00f42400 	.word	0x00f42400

0800ae24 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ae24:	b480      	push	{r7}
 800ae26:	b083      	sub	sp, #12
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae30:	f003 0301 	and.w	r3, r3, #1
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d00a      	beq.n	800ae4e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	685b      	ldr	r3, [r3, #4]
 800ae3e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	430a      	orrs	r2, r1
 800ae4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae52:	f003 0302 	and.w	r3, r3, #2
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d00a      	beq.n	800ae70 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	685b      	ldr	r3, [r3, #4]
 800ae60:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	430a      	orrs	r2, r1
 800ae6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae74:	f003 0304 	and.w	r3, r3, #4
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d00a      	beq.n	800ae92 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	685b      	ldr	r3, [r3, #4]
 800ae82:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	430a      	orrs	r2, r1
 800ae90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae96:	f003 0308 	and.w	r3, r3, #8
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d00a      	beq.n	800aeb4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	685b      	ldr	r3, [r3, #4]
 800aea4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	430a      	orrs	r2, r1
 800aeb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aeb8:	f003 0310 	and.w	r3, r3, #16
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d00a      	beq.n	800aed6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	689b      	ldr	r3, [r3, #8]
 800aec6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	430a      	orrs	r2, r1
 800aed4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aeda:	f003 0320 	and.w	r3, r3, #32
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d00a      	beq.n	800aef8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	689b      	ldr	r3, [r3, #8]
 800aee8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	430a      	orrs	r2, r1
 800aef6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aefc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af00:	2b00      	cmp	r3, #0
 800af02:	d01a      	beq.n	800af3a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	685b      	ldr	r3, [r3, #4]
 800af0a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	430a      	orrs	r2, r1
 800af18:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800af22:	d10a      	bne.n	800af3a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	685b      	ldr	r3, [r3, #4]
 800af2a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	430a      	orrs	r2, r1
 800af38:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af42:	2b00      	cmp	r3, #0
 800af44:	d00a      	beq.n	800af5c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	685b      	ldr	r3, [r3, #4]
 800af4c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	430a      	orrs	r2, r1
 800af5a:	605a      	str	r2, [r3, #4]
  }
}
 800af5c:	bf00      	nop
 800af5e:	370c      	adds	r7, #12
 800af60:	46bd      	mov	sp, r7
 800af62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af66:	4770      	bx	lr

0800af68 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	b086      	sub	sp, #24
 800af6c:	af02      	add	r7, sp, #8
 800af6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	2200      	movs	r2, #0
 800af74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800af78:	f7f7 fe80 	bl	8002c7c <HAL_GetTick>
 800af7c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	f003 0308 	and.w	r3, r3, #8
 800af88:	2b08      	cmp	r3, #8
 800af8a:	d10e      	bne.n	800afaa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800af8c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800af90:	9300      	str	r3, [sp, #0]
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	2200      	movs	r2, #0
 800af96:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800af9a:	6878      	ldr	r0, [r7, #4]
 800af9c:	f000 f831 	bl	800b002 <UART_WaitOnFlagUntilTimeout>
 800afa0:	4603      	mov	r3, r0
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d001      	beq.n	800afaa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800afa6:	2303      	movs	r3, #3
 800afa8:	e027      	b.n	800affa <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	f003 0304 	and.w	r3, r3, #4
 800afb4:	2b04      	cmp	r3, #4
 800afb6:	d10e      	bne.n	800afd6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800afb8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800afbc:	9300      	str	r3, [sp, #0]
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	2200      	movs	r2, #0
 800afc2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800afc6:	6878      	ldr	r0, [r7, #4]
 800afc8:	f000 f81b 	bl	800b002 <UART_WaitOnFlagUntilTimeout>
 800afcc:	4603      	mov	r3, r0
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d001      	beq.n	800afd6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800afd2:	2303      	movs	r3, #3
 800afd4:	e011      	b.n	800affa <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	2220      	movs	r2, #32
 800afda:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	2220      	movs	r2, #32
 800afe0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	2200      	movs	r2, #0
 800afe8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	2200      	movs	r2, #0
 800afee:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	2200      	movs	r2, #0
 800aff4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800aff8:	2300      	movs	r3, #0
}
 800affa:	4618      	mov	r0, r3
 800affc:	3710      	adds	r7, #16
 800affe:	46bd      	mov	sp, r7
 800b000:	bd80      	pop	{r7, pc}

0800b002 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b002:	b580      	push	{r7, lr}
 800b004:	b09c      	sub	sp, #112	; 0x70
 800b006:	af00      	add	r7, sp, #0
 800b008:	60f8      	str	r0, [r7, #12]
 800b00a:	60b9      	str	r1, [r7, #8]
 800b00c:	603b      	str	r3, [r7, #0]
 800b00e:	4613      	mov	r3, r2
 800b010:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b012:	e0a7      	b.n	800b164 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b014:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b016:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b01a:	f000 80a3 	beq.w	800b164 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b01e:	f7f7 fe2d 	bl	8002c7c <HAL_GetTick>
 800b022:	4602      	mov	r2, r0
 800b024:	683b      	ldr	r3, [r7, #0]
 800b026:	1ad3      	subs	r3, r2, r3
 800b028:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b02a:	429a      	cmp	r2, r3
 800b02c:	d302      	bcc.n	800b034 <UART_WaitOnFlagUntilTimeout+0x32>
 800b02e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b030:	2b00      	cmp	r3, #0
 800b032:	d13f      	bne.n	800b0b4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b03a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b03c:	e853 3f00 	ldrex	r3, [r3]
 800b040:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b042:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b044:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b048:	667b      	str	r3, [r7, #100]	; 0x64
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	461a      	mov	r2, r3
 800b050:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b052:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b054:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b056:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b058:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b05a:	e841 2300 	strex	r3, r2, [r1]
 800b05e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b060:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b062:	2b00      	cmp	r3, #0
 800b064:	d1e6      	bne.n	800b034 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	3308      	adds	r3, #8
 800b06c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b06e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b070:	e853 3f00 	ldrex	r3, [r3]
 800b074:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b078:	f023 0301 	bic.w	r3, r3, #1
 800b07c:	663b      	str	r3, [r7, #96]	; 0x60
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	3308      	adds	r3, #8
 800b084:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b086:	64ba      	str	r2, [r7, #72]	; 0x48
 800b088:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b08a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b08c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b08e:	e841 2300 	strex	r3, r2, [r1]
 800b092:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b094:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b096:	2b00      	cmp	r3, #0
 800b098:	d1e5      	bne.n	800b066 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	2220      	movs	r2, #32
 800b09e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	2220      	movs	r2, #32
 800b0a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800b0b0:	2303      	movs	r3, #3
 800b0b2:	e068      	b.n	800b186 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	f003 0304 	and.w	r3, r3, #4
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d050      	beq.n	800b164 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	69db      	ldr	r3, [r3, #28]
 800b0c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b0cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b0d0:	d148      	bne.n	800b164 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b0da:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0e4:	e853 3f00 	ldrex	r3, [r3]
 800b0e8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b0ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0ec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b0f0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	461a      	mov	r2, r3
 800b0f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b0fa:	637b      	str	r3, [r7, #52]	; 0x34
 800b0fc:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0fe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b100:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b102:	e841 2300 	strex	r3, r2, [r1]
 800b106:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d1e6      	bne.n	800b0dc <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	3308      	adds	r3, #8
 800b114:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b116:	697b      	ldr	r3, [r7, #20]
 800b118:	e853 3f00 	ldrex	r3, [r3]
 800b11c:	613b      	str	r3, [r7, #16]
   return(result);
 800b11e:	693b      	ldr	r3, [r7, #16]
 800b120:	f023 0301 	bic.w	r3, r3, #1
 800b124:	66bb      	str	r3, [r7, #104]	; 0x68
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	3308      	adds	r3, #8
 800b12c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b12e:	623a      	str	r2, [r7, #32]
 800b130:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b132:	69f9      	ldr	r1, [r7, #28]
 800b134:	6a3a      	ldr	r2, [r7, #32]
 800b136:	e841 2300 	strex	r3, r2, [r1]
 800b13a:	61bb      	str	r3, [r7, #24]
   return(result);
 800b13c:	69bb      	ldr	r3, [r7, #24]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d1e5      	bne.n	800b10e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	2220      	movs	r2, #32
 800b146:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	2220      	movs	r2, #32
 800b14c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	2220      	movs	r2, #32
 800b154:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	2200      	movs	r2, #0
 800b15c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800b160:	2303      	movs	r3, #3
 800b162:	e010      	b.n	800b186 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	69da      	ldr	r2, [r3, #28]
 800b16a:	68bb      	ldr	r3, [r7, #8]
 800b16c:	4013      	ands	r3, r2
 800b16e:	68ba      	ldr	r2, [r7, #8]
 800b170:	429a      	cmp	r2, r3
 800b172:	bf0c      	ite	eq
 800b174:	2301      	moveq	r3, #1
 800b176:	2300      	movne	r3, #0
 800b178:	b2db      	uxtb	r3, r3
 800b17a:	461a      	mov	r2, r3
 800b17c:	79fb      	ldrb	r3, [r7, #7]
 800b17e:	429a      	cmp	r2, r3
 800b180:	f43f af48 	beq.w	800b014 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b184:	2300      	movs	r3, #0
}
 800b186:	4618      	mov	r0, r3
 800b188:	3770      	adds	r7, #112	; 0x70
 800b18a:	46bd      	mov	sp, r7
 800b18c:	bd80      	pop	{r7, pc}
	...

0800b190 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800b190:	b480      	push	{r7}
 800b192:	b083      	sub	sp, #12
 800b194:	af00      	add	r7, sp, #0
 800b196:	6078      	str	r0, [r7, #4]
 800b198:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800b19a:	683b      	ldr	r3, [r7, #0]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d121      	bne.n	800b1e6 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	681a      	ldr	r2, [r3, #0]
 800b1a6:	4b27      	ldr	r3, [pc, #156]	; (800b244 <FMC_SDRAM_Init+0xb4>)
 800b1a8:	4013      	ands	r3, r2
 800b1aa:	683a      	ldr	r2, [r7, #0]
 800b1ac:	6851      	ldr	r1, [r2, #4]
 800b1ae:	683a      	ldr	r2, [r7, #0]
 800b1b0:	6892      	ldr	r2, [r2, #8]
 800b1b2:	4311      	orrs	r1, r2
 800b1b4:	683a      	ldr	r2, [r7, #0]
 800b1b6:	68d2      	ldr	r2, [r2, #12]
 800b1b8:	4311      	orrs	r1, r2
 800b1ba:	683a      	ldr	r2, [r7, #0]
 800b1bc:	6912      	ldr	r2, [r2, #16]
 800b1be:	4311      	orrs	r1, r2
 800b1c0:	683a      	ldr	r2, [r7, #0]
 800b1c2:	6952      	ldr	r2, [r2, #20]
 800b1c4:	4311      	orrs	r1, r2
 800b1c6:	683a      	ldr	r2, [r7, #0]
 800b1c8:	6992      	ldr	r2, [r2, #24]
 800b1ca:	4311      	orrs	r1, r2
 800b1cc:	683a      	ldr	r2, [r7, #0]
 800b1ce:	69d2      	ldr	r2, [r2, #28]
 800b1d0:	4311      	orrs	r1, r2
 800b1d2:	683a      	ldr	r2, [r7, #0]
 800b1d4:	6a12      	ldr	r2, [r2, #32]
 800b1d6:	4311      	orrs	r1, r2
 800b1d8:	683a      	ldr	r2, [r7, #0]
 800b1da:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b1dc:	430a      	orrs	r2, r1
 800b1de:	431a      	orrs	r2, r3
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	601a      	str	r2, [r3, #0]
 800b1e4:	e026      	b.n	800b234 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800b1ee:	683b      	ldr	r3, [r7, #0]
 800b1f0:	69d9      	ldr	r1, [r3, #28]
 800b1f2:	683b      	ldr	r3, [r7, #0]
 800b1f4:	6a1b      	ldr	r3, [r3, #32]
 800b1f6:	4319      	orrs	r1, r3
 800b1f8:	683b      	ldr	r3, [r7, #0]
 800b1fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1fc:	430b      	orrs	r3, r1
 800b1fe:	431a      	orrs	r2, r3
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	685a      	ldr	r2, [r3, #4]
 800b208:	4b0e      	ldr	r3, [pc, #56]	; (800b244 <FMC_SDRAM_Init+0xb4>)
 800b20a:	4013      	ands	r3, r2
 800b20c:	683a      	ldr	r2, [r7, #0]
 800b20e:	6851      	ldr	r1, [r2, #4]
 800b210:	683a      	ldr	r2, [r7, #0]
 800b212:	6892      	ldr	r2, [r2, #8]
 800b214:	4311      	orrs	r1, r2
 800b216:	683a      	ldr	r2, [r7, #0]
 800b218:	68d2      	ldr	r2, [r2, #12]
 800b21a:	4311      	orrs	r1, r2
 800b21c:	683a      	ldr	r2, [r7, #0]
 800b21e:	6912      	ldr	r2, [r2, #16]
 800b220:	4311      	orrs	r1, r2
 800b222:	683a      	ldr	r2, [r7, #0]
 800b224:	6952      	ldr	r2, [r2, #20]
 800b226:	4311      	orrs	r1, r2
 800b228:	683a      	ldr	r2, [r7, #0]
 800b22a:	6992      	ldr	r2, [r2, #24]
 800b22c:	430a      	orrs	r2, r1
 800b22e:	431a      	orrs	r2, r3
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800b234:	2300      	movs	r3, #0
}
 800b236:	4618      	mov	r0, r3
 800b238:	370c      	adds	r7, #12
 800b23a:	46bd      	mov	sp, r7
 800b23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b240:	4770      	bx	lr
 800b242:	bf00      	nop
 800b244:	ffff8000 	.word	0xffff8000

0800b248 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800b248:	b480      	push	{r7}
 800b24a:	b085      	sub	sp, #20
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	60f8      	str	r0, [r7, #12]
 800b250:	60b9      	str	r1, [r7, #8]
 800b252:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	2b00      	cmp	r3, #0
 800b258:	d128      	bne.n	800b2ac <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	689b      	ldr	r3, [r3, #8]
 800b25e:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800b262:	68bb      	ldr	r3, [r7, #8]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	1e59      	subs	r1, r3, #1
 800b268:	68bb      	ldr	r3, [r7, #8]
 800b26a:	685b      	ldr	r3, [r3, #4]
 800b26c:	3b01      	subs	r3, #1
 800b26e:	011b      	lsls	r3, r3, #4
 800b270:	4319      	orrs	r1, r3
 800b272:	68bb      	ldr	r3, [r7, #8]
 800b274:	689b      	ldr	r3, [r3, #8]
 800b276:	3b01      	subs	r3, #1
 800b278:	021b      	lsls	r3, r3, #8
 800b27a:	4319      	orrs	r1, r3
 800b27c:	68bb      	ldr	r3, [r7, #8]
 800b27e:	68db      	ldr	r3, [r3, #12]
 800b280:	3b01      	subs	r3, #1
 800b282:	031b      	lsls	r3, r3, #12
 800b284:	4319      	orrs	r1, r3
 800b286:	68bb      	ldr	r3, [r7, #8]
 800b288:	691b      	ldr	r3, [r3, #16]
 800b28a:	3b01      	subs	r3, #1
 800b28c:	041b      	lsls	r3, r3, #16
 800b28e:	4319      	orrs	r1, r3
 800b290:	68bb      	ldr	r3, [r7, #8]
 800b292:	695b      	ldr	r3, [r3, #20]
 800b294:	3b01      	subs	r3, #1
 800b296:	051b      	lsls	r3, r3, #20
 800b298:	4319      	orrs	r1, r3
 800b29a:	68bb      	ldr	r3, [r7, #8]
 800b29c:	699b      	ldr	r3, [r3, #24]
 800b29e:	3b01      	subs	r3, #1
 800b2a0:	061b      	lsls	r3, r3, #24
 800b2a2:	430b      	orrs	r3, r1
 800b2a4:	431a      	orrs	r2, r3
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	609a      	str	r2, [r3, #8]
 800b2aa:	e02d      	b.n	800b308 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	689a      	ldr	r2, [r3, #8]
 800b2b0:	4b19      	ldr	r3, [pc, #100]	; (800b318 <FMC_SDRAM_Timing_Init+0xd0>)
 800b2b2:	4013      	ands	r3, r2
 800b2b4:	68ba      	ldr	r2, [r7, #8]
 800b2b6:	68d2      	ldr	r2, [r2, #12]
 800b2b8:	3a01      	subs	r2, #1
 800b2ba:	0311      	lsls	r1, r2, #12
 800b2bc:	68ba      	ldr	r2, [r7, #8]
 800b2be:	6952      	ldr	r2, [r2, #20]
 800b2c0:	3a01      	subs	r2, #1
 800b2c2:	0512      	lsls	r2, r2, #20
 800b2c4:	430a      	orrs	r2, r1
 800b2c6:	431a      	orrs	r2, r3
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	68db      	ldr	r3, [r3, #12]
 800b2d0:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800b2d4:	68bb      	ldr	r3, [r7, #8]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	1e59      	subs	r1, r3, #1
 800b2da:	68bb      	ldr	r3, [r7, #8]
 800b2dc:	685b      	ldr	r3, [r3, #4]
 800b2de:	3b01      	subs	r3, #1
 800b2e0:	011b      	lsls	r3, r3, #4
 800b2e2:	4319      	orrs	r1, r3
 800b2e4:	68bb      	ldr	r3, [r7, #8]
 800b2e6:	689b      	ldr	r3, [r3, #8]
 800b2e8:	3b01      	subs	r3, #1
 800b2ea:	021b      	lsls	r3, r3, #8
 800b2ec:	4319      	orrs	r1, r3
 800b2ee:	68bb      	ldr	r3, [r7, #8]
 800b2f0:	691b      	ldr	r3, [r3, #16]
 800b2f2:	3b01      	subs	r3, #1
 800b2f4:	041b      	lsls	r3, r3, #16
 800b2f6:	4319      	orrs	r1, r3
 800b2f8:	68bb      	ldr	r3, [r7, #8]
 800b2fa:	699b      	ldr	r3, [r3, #24]
 800b2fc:	3b01      	subs	r3, #1
 800b2fe:	061b      	lsls	r3, r3, #24
 800b300:	430b      	orrs	r3, r1
 800b302:	431a      	orrs	r2, r3
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800b308:	2300      	movs	r3, #0
}
 800b30a:	4618      	mov	r0, r3
 800b30c:	3714      	adds	r7, #20
 800b30e:	46bd      	mov	sp, r7
 800b310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b314:	4770      	bx	lr
 800b316:	bf00      	nop
 800b318:	ff0f0fff 	.word	0xff0f0fff

0800b31c <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800b31c:	b480      	push	{r7}
 800b31e:	b085      	sub	sp, #20
 800b320:	af00      	add	r7, sp, #0
 800b322:	60f8      	str	r0, [r7, #12]
 800b324:	60b9      	str	r1, [r7, #8]
 800b326:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	691a      	ldr	r2, [r3, #16]
 800b32c:	4b0c      	ldr	r3, [pc, #48]	; (800b360 <FMC_SDRAM_SendCommand+0x44>)
 800b32e:	4013      	ands	r3, r2
 800b330:	68ba      	ldr	r2, [r7, #8]
 800b332:	6811      	ldr	r1, [r2, #0]
 800b334:	68ba      	ldr	r2, [r7, #8]
 800b336:	6852      	ldr	r2, [r2, #4]
 800b338:	4311      	orrs	r1, r2
 800b33a:	68ba      	ldr	r2, [r7, #8]
 800b33c:	6892      	ldr	r2, [r2, #8]
 800b33e:	3a01      	subs	r2, #1
 800b340:	0152      	lsls	r2, r2, #5
 800b342:	4311      	orrs	r1, r2
 800b344:	68ba      	ldr	r2, [r7, #8]
 800b346:	68d2      	ldr	r2, [r2, #12]
 800b348:	0252      	lsls	r2, r2, #9
 800b34a:	430a      	orrs	r2, r1
 800b34c:	431a      	orrs	r2, r3
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800b352:	2300      	movs	r3, #0
}
 800b354:	4618      	mov	r0, r3
 800b356:	3714      	adds	r7, #20
 800b358:	46bd      	mov	sp, r7
 800b35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35e:	4770      	bx	lr
 800b360:	ffc00000 	.word	0xffc00000

0800b364 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800b364:	b480      	push	{r7}
 800b366:	b083      	sub	sp, #12
 800b368:	af00      	add	r7, sp, #0
 800b36a:	6078      	str	r0, [r7, #4]
 800b36c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	695a      	ldr	r2, [r3, #20]
 800b372:	4b07      	ldr	r3, [pc, #28]	; (800b390 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800b374:	4013      	ands	r3, r2
 800b376:	683a      	ldr	r2, [r7, #0]
 800b378:	0052      	lsls	r2, r2, #1
 800b37a:	431a      	orrs	r2, r3
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800b380:	2300      	movs	r3, #0
}
 800b382:	4618      	mov	r0, r3
 800b384:	370c      	adds	r7, #12
 800b386:	46bd      	mov	sp, r7
 800b388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38c:	4770      	bx	lr
 800b38e:	bf00      	nop
 800b390:	ffffc001 	.word	0xffffc001

0800b394 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b394:	b480      	push	{r7}
 800b396:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800b398:	bf00      	nop
 800b39a:	46bd      	mov	sp, r7
 800b39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a0:	4770      	bx	lr
	...

0800b3a4 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b3a4:	b480      	push	{r7}
 800b3a6:	b085      	sub	sp, #20
 800b3a8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b3aa:	f3ef 8305 	mrs	r3, IPSR
 800b3ae:	60bb      	str	r3, [r7, #8]
  return(result);
 800b3b0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d10f      	bne.n	800b3d6 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b3b6:	f3ef 8310 	mrs	r3, PRIMASK
 800b3ba:	607b      	str	r3, [r7, #4]
  return(result);
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d105      	bne.n	800b3ce <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b3c2:	f3ef 8311 	mrs	r3, BASEPRI
 800b3c6:	603b      	str	r3, [r7, #0]
  return(result);
 800b3c8:	683b      	ldr	r3, [r7, #0]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d007      	beq.n	800b3de <osKernelInitialize+0x3a>
 800b3ce:	4b0e      	ldr	r3, [pc, #56]	; (800b408 <osKernelInitialize+0x64>)
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	2b02      	cmp	r3, #2
 800b3d4:	d103      	bne.n	800b3de <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800b3d6:	f06f 0305 	mvn.w	r3, #5
 800b3da:	60fb      	str	r3, [r7, #12]
 800b3dc:	e00c      	b.n	800b3f8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b3de:	4b0a      	ldr	r3, [pc, #40]	; (800b408 <osKernelInitialize+0x64>)
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d105      	bne.n	800b3f2 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b3e6:	4b08      	ldr	r3, [pc, #32]	; (800b408 <osKernelInitialize+0x64>)
 800b3e8:	2201      	movs	r2, #1
 800b3ea:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b3ec:	2300      	movs	r3, #0
 800b3ee:	60fb      	str	r3, [r7, #12]
 800b3f0:	e002      	b.n	800b3f8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800b3f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b3f6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800b3f8:	68fb      	ldr	r3, [r7, #12]
}
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	3714      	adds	r7, #20
 800b3fe:	46bd      	mov	sp, r7
 800b400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b404:	4770      	bx	lr
 800b406:	bf00      	nop
 800b408:	20009b30 	.word	0x20009b30

0800b40c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b40c:	b580      	push	{r7, lr}
 800b40e:	b084      	sub	sp, #16
 800b410:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b412:	f3ef 8305 	mrs	r3, IPSR
 800b416:	60bb      	str	r3, [r7, #8]
  return(result);
 800b418:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d10f      	bne.n	800b43e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b41e:	f3ef 8310 	mrs	r3, PRIMASK
 800b422:	607b      	str	r3, [r7, #4]
  return(result);
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	2b00      	cmp	r3, #0
 800b428:	d105      	bne.n	800b436 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b42a:	f3ef 8311 	mrs	r3, BASEPRI
 800b42e:	603b      	str	r3, [r7, #0]
  return(result);
 800b430:	683b      	ldr	r3, [r7, #0]
 800b432:	2b00      	cmp	r3, #0
 800b434:	d007      	beq.n	800b446 <osKernelStart+0x3a>
 800b436:	4b0f      	ldr	r3, [pc, #60]	; (800b474 <osKernelStart+0x68>)
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	2b02      	cmp	r3, #2
 800b43c:	d103      	bne.n	800b446 <osKernelStart+0x3a>
    stat = osErrorISR;
 800b43e:	f06f 0305 	mvn.w	r3, #5
 800b442:	60fb      	str	r3, [r7, #12]
 800b444:	e010      	b.n	800b468 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b446:	4b0b      	ldr	r3, [pc, #44]	; (800b474 <osKernelStart+0x68>)
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	2b01      	cmp	r3, #1
 800b44c:	d109      	bne.n	800b462 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b44e:	f7ff ffa1 	bl	800b394 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b452:	4b08      	ldr	r3, [pc, #32]	; (800b474 <osKernelStart+0x68>)
 800b454:	2202      	movs	r2, #2
 800b456:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b458:	f002 f940 	bl	800d6dc <vTaskStartScheduler>
      stat = osOK;
 800b45c:	2300      	movs	r3, #0
 800b45e:	60fb      	str	r3, [r7, #12]
 800b460:	e002      	b.n	800b468 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800b462:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b466:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800b468:	68fb      	ldr	r3, [r7, #12]
}
 800b46a:	4618      	mov	r0, r3
 800b46c:	3710      	adds	r7, #16
 800b46e:	46bd      	mov	sp, r7
 800b470:	bd80      	pop	{r7, pc}
 800b472:	bf00      	nop
 800b474:	20009b30 	.word	0x20009b30

0800b478 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800b478:	b580      	push	{r7, lr}
 800b47a:	b084      	sub	sp, #16
 800b47c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b47e:	f3ef 8305 	mrs	r3, IPSR
 800b482:	60bb      	str	r3, [r7, #8]
  return(result);
 800b484:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 800b486:	2b00      	cmp	r3, #0
 800b488:	d10f      	bne.n	800b4aa <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b48a:	f3ef 8310 	mrs	r3, PRIMASK
 800b48e:	607b      	str	r3, [r7, #4]
  return(result);
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	2b00      	cmp	r3, #0
 800b494:	d105      	bne.n	800b4a2 <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b496:	f3ef 8311 	mrs	r3, BASEPRI
 800b49a:	603b      	str	r3, [r7, #0]
  return(result);
 800b49c:	683b      	ldr	r3, [r7, #0]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d007      	beq.n	800b4b2 <osKernelGetTickCount+0x3a>
 800b4a2:	4b08      	ldr	r3, [pc, #32]	; (800b4c4 <osKernelGetTickCount+0x4c>)
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	2b02      	cmp	r3, #2
 800b4a8:	d103      	bne.n	800b4b2 <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 800b4aa:	f002 fa3f 	bl	800d92c <xTaskGetTickCountFromISR>
 800b4ae:	60f8      	str	r0, [r7, #12]
 800b4b0:	e002      	b.n	800b4b8 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 800b4b2:	f002 fa2b 	bl	800d90c <xTaskGetTickCount>
 800b4b6:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 800b4b8:	68fb      	ldr	r3, [r7, #12]
}
 800b4ba:	4618      	mov	r0, r3
 800b4bc:	3710      	adds	r7, #16
 800b4be:	46bd      	mov	sp, r7
 800b4c0:	bd80      	pop	{r7, pc}
 800b4c2:	bf00      	nop
 800b4c4:	20009b30 	.word	0x20009b30

0800b4c8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	b090      	sub	sp, #64	; 0x40
 800b4cc:	af04      	add	r7, sp, #16
 800b4ce:	60f8      	str	r0, [r7, #12]
 800b4d0:	60b9      	str	r1, [r7, #8]
 800b4d2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b4d4:	2300      	movs	r3, #0
 800b4d6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b4d8:	f3ef 8305 	mrs	r3, IPSR
 800b4dc:	61fb      	str	r3, [r7, #28]
  return(result);
 800b4de:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	f040 808f 	bne.w	800b604 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b4e6:	f3ef 8310 	mrs	r3, PRIMASK
 800b4ea:	61bb      	str	r3, [r7, #24]
  return(result);
 800b4ec:	69bb      	ldr	r3, [r7, #24]
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d105      	bne.n	800b4fe <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b4f2:	f3ef 8311 	mrs	r3, BASEPRI
 800b4f6:	617b      	str	r3, [r7, #20]
  return(result);
 800b4f8:	697b      	ldr	r3, [r7, #20]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d003      	beq.n	800b506 <osThreadNew+0x3e>
 800b4fe:	4b44      	ldr	r3, [pc, #272]	; (800b610 <osThreadNew+0x148>)
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	2b02      	cmp	r3, #2
 800b504:	d07e      	beq.n	800b604 <osThreadNew+0x13c>
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d07b      	beq.n	800b604 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800b50c:	2380      	movs	r3, #128	; 0x80
 800b50e:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800b510:	2318      	movs	r3, #24
 800b512:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800b514:	2300      	movs	r3, #0
 800b516:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800b518:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b51c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	2b00      	cmp	r3, #0
 800b522:	d045      	beq.n	800b5b0 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d002      	beq.n	800b532 <osThreadNew+0x6a>
        name = attr->name;
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	699b      	ldr	r3, [r3, #24]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d002      	beq.n	800b540 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	699b      	ldr	r3, [r3, #24]
 800b53e:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b542:	2b00      	cmp	r3, #0
 800b544:	d008      	beq.n	800b558 <osThreadNew+0x90>
 800b546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b548:	2b38      	cmp	r3, #56	; 0x38
 800b54a:	d805      	bhi.n	800b558 <osThreadNew+0x90>
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	685b      	ldr	r3, [r3, #4]
 800b550:	f003 0301 	and.w	r3, r3, #1
 800b554:	2b00      	cmp	r3, #0
 800b556:	d001      	beq.n	800b55c <osThreadNew+0x94>
        return (NULL);
 800b558:	2300      	movs	r3, #0
 800b55a:	e054      	b.n	800b606 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	695b      	ldr	r3, [r3, #20]
 800b560:	2b00      	cmp	r3, #0
 800b562:	d003      	beq.n	800b56c <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	695b      	ldr	r3, [r3, #20]
 800b568:	089b      	lsrs	r3, r3, #2
 800b56a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	689b      	ldr	r3, [r3, #8]
 800b570:	2b00      	cmp	r3, #0
 800b572:	d00e      	beq.n	800b592 <osThreadNew+0xca>
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	68db      	ldr	r3, [r3, #12]
 800b578:	2b5b      	cmp	r3, #91	; 0x5b
 800b57a:	d90a      	bls.n	800b592 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b580:	2b00      	cmp	r3, #0
 800b582:	d006      	beq.n	800b592 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	695b      	ldr	r3, [r3, #20]
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d002      	beq.n	800b592 <osThreadNew+0xca>
        mem = 1;
 800b58c:	2301      	movs	r3, #1
 800b58e:	623b      	str	r3, [r7, #32]
 800b590:	e010      	b.n	800b5b4 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	689b      	ldr	r3, [r3, #8]
 800b596:	2b00      	cmp	r3, #0
 800b598:	d10c      	bne.n	800b5b4 <osThreadNew+0xec>
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	68db      	ldr	r3, [r3, #12]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d108      	bne.n	800b5b4 <osThreadNew+0xec>
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	691b      	ldr	r3, [r3, #16]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d104      	bne.n	800b5b4 <osThreadNew+0xec>
          mem = 0;
 800b5aa:	2300      	movs	r3, #0
 800b5ac:	623b      	str	r3, [r7, #32]
 800b5ae:	e001      	b.n	800b5b4 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800b5b0:	2300      	movs	r3, #0
 800b5b2:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800b5b4:	6a3b      	ldr	r3, [r7, #32]
 800b5b6:	2b01      	cmp	r3, #1
 800b5b8:	d110      	bne.n	800b5dc <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800b5be:	687a      	ldr	r2, [r7, #4]
 800b5c0:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b5c2:	9202      	str	r2, [sp, #8]
 800b5c4:	9301      	str	r3, [sp, #4]
 800b5c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5c8:	9300      	str	r3, [sp, #0]
 800b5ca:	68bb      	ldr	r3, [r7, #8]
 800b5cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b5ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b5d0:	68f8      	ldr	r0, [r7, #12]
 800b5d2:	f001 fe1f 	bl	800d214 <xTaskCreateStatic>
 800b5d6:	4603      	mov	r3, r0
 800b5d8:	613b      	str	r3, [r7, #16]
 800b5da:	e013      	b.n	800b604 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800b5dc:	6a3b      	ldr	r3, [r7, #32]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d110      	bne.n	800b604 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b5e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5e4:	b29a      	uxth	r2, r3
 800b5e6:	f107 0310 	add.w	r3, r7, #16
 800b5ea:	9301      	str	r3, [sp, #4]
 800b5ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5ee:	9300      	str	r3, [sp, #0]
 800b5f0:	68bb      	ldr	r3, [r7, #8]
 800b5f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b5f4:	68f8      	ldr	r0, [r7, #12]
 800b5f6:	f001 fe70 	bl	800d2da <xTaskCreate>
 800b5fa:	4603      	mov	r3, r0
 800b5fc:	2b01      	cmp	r3, #1
 800b5fe:	d001      	beq.n	800b604 <osThreadNew+0x13c>
          hTask = NULL;
 800b600:	2300      	movs	r3, #0
 800b602:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b604:	693b      	ldr	r3, [r7, #16]
}
 800b606:	4618      	mov	r0, r3
 800b608:	3730      	adds	r7, #48	; 0x30
 800b60a:	46bd      	mov	sp, r7
 800b60c:	bd80      	pop	{r7, pc}
 800b60e:	bf00      	nop
 800b610:	20009b30 	.word	0x20009b30

0800b614 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800b614:	b580      	push	{r7, lr}
 800b616:	b086      	sub	sp, #24
 800b618:	af00      	add	r7, sp, #0
 800b61a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b61c:	f3ef 8305 	mrs	r3, IPSR
 800b620:	613b      	str	r3, [r7, #16]
  return(result);
 800b622:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b624:	2b00      	cmp	r3, #0
 800b626:	d10f      	bne.n	800b648 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b628:	f3ef 8310 	mrs	r3, PRIMASK
 800b62c:	60fb      	str	r3, [r7, #12]
  return(result);
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	2b00      	cmp	r3, #0
 800b632:	d105      	bne.n	800b640 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b634:	f3ef 8311 	mrs	r3, BASEPRI
 800b638:	60bb      	str	r3, [r7, #8]
  return(result);
 800b63a:	68bb      	ldr	r3, [r7, #8]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d007      	beq.n	800b650 <osDelay+0x3c>
 800b640:	4b0a      	ldr	r3, [pc, #40]	; (800b66c <osDelay+0x58>)
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	2b02      	cmp	r3, #2
 800b646:	d103      	bne.n	800b650 <osDelay+0x3c>
    stat = osErrorISR;
 800b648:	f06f 0305 	mvn.w	r3, #5
 800b64c:	617b      	str	r3, [r7, #20]
 800b64e:	e007      	b.n	800b660 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800b650:	2300      	movs	r3, #0
 800b652:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	2b00      	cmp	r3, #0
 800b658:	d002      	beq.n	800b660 <osDelay+0x4c>
      vTaskDelay(ticks);
 800b65a:	6878      	ldr	r0, [r7, #4]
 800b65c:	f002 f808 	bl	800d670 <vTaskDelay>
    }
  }

  return (stat);
 800b660:	697b      	ldr	r3, [r7, #20]
}
 800b662:	4618      	mov	r0, r3
 800b664:	3718      	adds	r7, #24
 800b666:	46bd      	mov	sp, r7
 800b668:	bd80      	pop	{r7, pc}
 800b66a:	bf00      	nop
 800b66c:	20009b30 	.word	0x20009b30

0800b670 <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 800b670:	b580      	push	{r7, lr}
 800b672:	b088      	sub	sp, #32
 800b674:	af00      	add	r7, sp, #0
 800b676:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b678:	f3ef 8305 	mrs	r3, IPSR
 800b67c:	617b      	str	r3, [r7, #20]
  return(result);
 800b67e:	697b      	ldr	r3, [r7, #20]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 800b680:	2b00      	cmp	r3, #0
 800b682:	d10f      	bne.n	800b6a4 <osDelayUntil+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b684:	f3ef 8310 	mrs	r3, PRIMASK
 800b688:	613b      	str	r3, [r7, #16]
  return(result);
 800b68a:	693b      	ldr	r3, [r7, #16]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d105      	bne.n	800b69c <osDelayUntil+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b690:	f3ef 8311 	mrs	r3, BASEPRI
 800b694:	60fb      	str	r3, [r7, #12]
  return(result);
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d007      	beq.n	800b6ac <osDelayUntil+0x3c>
 800b69c:	4b13      	ldr	r3, [pc, #76]	; (800b6ec <osDelayUntil+0x7c>)
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	2b02      	cmp	r3, #2
 800b6a2:	d103      	bne.n	800b6ac <osDelayUntil+0x3c>
    stat = osErrorISR;
 800b6a4:	f06f 0305 	mvn.w	r3, #5
 800b6a8:	61fb      	str	r3, [r7, #28]
 800b6aa:	e019      	b.n	800b6e0 <osDelayUntil+0x70>
  }
  else {
    stat = osOK;
 800b6ac:	2300      	movs	r3, #0
 800b6ae:	61fb      	str	r3, [r7, #28]
    tcnt = xTaskGetTickCount();
 800b6b0:	f002 f92c 	bl	800d90c <xTaskGetTickCount>
 800b6b4:	4603      	mov	r3, r0
 800b6b6:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 800b6b8:	68bb      	ldr	r3, [r7, #8]
 800b6ba:	687a      	ldr	r2, [r7, #4]
 800b6bc:	1ad3      	subs	r3, r2, r3
 800b6be:	61bb      	str	r3, [r7, #24]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 800b6c0:	69bb      	ldr	r3, [r7, #24]
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d009      	beq.n	800b6da <osDelayUntil+0x6a>
 800b6c6:	69bb      	ldr	r3, [r7, #24]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	db06      	blt.n	800b6da <osDelayUntil+0x6a>
      vTaskDelayUntil (&tcnt, delay);
 800b6cc:	f107 0308 	add.w	r3, r7, #8
 800b6d0:	69b9      	ldr	r1, [r7, #24]
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	f001 ff48 	bl	800d568 <vTaskDelayUntil>
 800b6d8:	e002      	b.n	800b6e0 <osDelayUntil+0x70>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 800b6da:	f06f 0303 	mvn.w	r3, #3
 800b6de:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 800b6e0:	69fb      	ldr	r3, [r7, #28]
}
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	3720      	adds	r7, #32
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	bd80      	pop	{r7, pc}
 800b6ea:	bf00      	nop
 800b6ec:	20009b30 	.word	0x20009b30

0800b6f0 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	b08a      	sub	sp, #40	; 0x28
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800b6f8:	2300      	movs	r3, #0
 800b6fa:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b6fc:	f3ef 8305 	mrs	r3, IPSR
 800b700:	613b      	str	r3, [r7, #16]
  return(result);
 800b702:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 800b704:	2b00      	cmp	r3, #0
 800b706:	f040 8085 	bne.w	800b814 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b70a:	f3ef 8310 	mrs	r3, PRIMASK
 800b70e:	60fb      	str	r3, [r7, #12]
  return(result);
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	2b00      	cmp	r3, #0
 800b714:	d105      	bne.n	800b722 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b716:	f3ef 8311 	mrs	r3, BASEPRI
 800b71a:	60bb      	str	r3, [r7, #8]
  return(result);
 800b71c:	68bb      	ldr	r3, [r7, #8]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d003      	beq.n	800b72a <osMutexNew+0x3a>
 800b722:	4b3f      	ldr	r3, [pc, #252]	; (800b820 <osMutexNew+0x130>)
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	2b02      	cmp	r3, #2
 800b728:	d074      	beq.n	800b814 <osMutexNew+0x124>
    if (attr != NULL) {
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d003      	beq.n	800b738 <osMutexNew+0x48>
      type = attr->attr_bits;
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	685b      	ldr	r3, [r3, #4]
 800b734:	623b      	str	r3, [r7, #32]
 800b736:	e001      	b.n	800b73c <osMutexNew+0x4c>
    } else {
      type = 0U;
 800b738:	2300      	movs	r3, #0
 800b73a:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800b73c:	6a3b      	ldr	r3, [r7, #32]
 800b73e:	f003 0301 	and.w	r3, r3, #1
 800b742:	2b00      	cmp	r3, #0
 800b744:	d002      	beq.n	800b74c <osMutexNew+0x5c>
      rmtx = 1U;
 800b746:	2301      	movs	r3, #1
 800b748:	61fb      	str	r3, [r7, #28]
 800b74a:	e001      	b.n	800b750 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 800b74c:	2300      	movs	r3, #0
 800b74e:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800b750:	6a3b      	ldr	r3, [r7, #32]
 800b752:	f003 0308 	and.w	r3, r3, #8
 800b756:	2b00      	cmp	r3, #0
 800b758:	d15c      	bne.n	800b814 <osMutexNew+0x124>
      mem = -1;
 800b75a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b75e:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	2b00      	cmp	r3, #0
 800b764:	d015      	beq.n	800b792 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	689b      	ldr	r3, [r3, #8]
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d006      	beq.n	800b77c <osMutexNew+0x8c>
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	68db      	ldr	r3, [r3, #12]
 800b772:	2b4f      	cmp	r3, #79	; 0x4f
 800b774:	d902      	bls.n	800b77c <osMutexNew+0x8c>
          mem = 1;
 800b776:	2301      	movs	r3, #1
 800b778:	61bb      	str	r3, [r7, #24]
 800b77a:	e00c      	b.n	800b796 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	689b      	ldr	r3, [r3, #8]
 800b780:	2b00      	cmp	r3, #0
 800b782:	d108      	bne.n	800b796 <osMutexNew+0xa6>
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	68db      	ldr	r3, [r3, #12]
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d104      	bne.n	800b796 <osMutexNew+0xa6>
            mem = 0;
 800b78c:	2300      	movs	r3, #0
 800b78e:	61bb      	str	r3, [r7, #24]
 800b790:	e001      	b.n	800b796 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 800b792:	2300      	movs	r3, #0
 800b794:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800b796:	69bb      	ldr	r3, [r7, #24]
 800b798:	2b01      	cmp	r3, #1
 800b79a:	d112      	bne.n	800b7c2 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 800b79c:	69fb      	ldr	r3, [r7, #28]
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d007      	beq.n	800b7b2 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	689b      	ldr	r3, [r3, #8]
 800b7a6:	4619      	mov	r1, r3
 800b7a8:	2004      	movs	r0, #4
 800b7aa:	f000 fda6 	bl	800c2fa <xQueueCreateMutexStatic>
 800b7ae:	6278      	str	r0, [r7, #36]	; 0x24
 800b7b0:	e016      	b.n	800b7e0 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	689b      	ldr	r3, [r3, #8]
 800b7b6:	4619      	mov	r1, r3
 800b7b8:	2001      	movs	r0, #1
 800b7ba:	f000 fd9e 	bl	800c2fa <xQueueCreateMutexStatic>
 800b7be:	6278      	str	r0, [r7, #36]	; 0x24
 800b7c0:	e00e      	b.n	800b7e0 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 800b7c2:	69bb      	ldr	r3, [r7, #24]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d10b      	bne.n	800b7e0 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 800b7c8:	69fb      	ldr	r3, [r7, #28]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d004      	beq.n	800b7d8 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800b7ce:	2004      	movs	r0, #4
 800b7d0:	f000 fd7b 	bl	800c2ca <xQueueCreateMutex>
 800b7d4:	6278      	str	r0, [r7, #36]	; 0x24
 800b7d6:	e003      	b.n	800b7e0 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 800b7d8:	2001      	movs	r0, #1
 800b7da:	f000 fd76 	bl	800c2ca <xQueueCreateMutex>
 800b7de:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800b7e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d00c      	beq.n	800b800 <osMutexNew+0x110>
        if (attr != NULL) {
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d003      	beq.n	800b7f4 <osMutexNew+0x104>
          name = attr->name;
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	617b      	str	r3, [r7, #20]
 800b7f2:	e001      	b.n	800b7f8 <osMutexNew+0x108>
        } else {
          name = NULL;
 800b7f4:	2300      	movs	r3, #0
 800b7f6:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 800b7f8:	6979      	ldr	r1, [r7, #20]
 800b7fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b7fc:	f001 fc82 	bl	800d104 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800b800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b802:	2b00      	cmp	r3, #0
 800b804:	d006      	beq.n	800b814 <osMutexNew+0x124>
 800b806:	69fb      	ldr	r3, [r7, #28]
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d003      	beq.n	800b814 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800b80c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b80e:	f043 0301 	orr.w	r3, r3, #1
 800b812:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800b814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b816:	4618      	mov	r0, r3
 800b818:	3728      	adds	r7, #40	; 0x28
 800b81a:	46bd      	mov	sp, r7
 800b81c:	bd80      	pop	{r7, pc}
 800b81e:	bf00      	nop
 800b820:	20009b30 	.word	0x20009b30

0800b824 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800b824:	b580      	push	{r7, lr}
 800b826:	b088      	sub	sp, #32
 800b828:	af00      	add	r7, sp, #0
 800b82a:	6078      	str	r0, [r7, #4]
 800b82c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	f023 0301 	bic.w	r3, r3, #1
 800b834:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	f003 0301 	and.w	r3, r3, #1
 800b83c:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800b83e:	2300      	movs	r3, #0
 800b840:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b842:	f3ef 8305 	mrs	r3, IPSR
 800b846:	613b      	str	r3, [r7, #16]
  return(result);
 800b848:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d10f      	bne.n	800b86e <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b84e:	f3ef 8310 	mrs	r3, PRIMASK
 800b852:	60fb      	str	r3, [r7, #12]
  return(result);
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	2b00      	cmp	r3, #0
 800b858:	d105      	bne.n	800b866 <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b85a:	f3ef 8311 	mrs	r3, BASEPRI
 800b85e:	60bb      	str	r3, [r7, #8]
  return(result);
 800b860:	68bb      	ldr	r3, [r7, #8]
 800b862:	2b00      	cmp	r3, #0
 800b864:	d007      	beq.n	800b876 <osMutexAcquire+0x52>
 800b866:	4b1d      	ldr	r3, [pc, #116]	; (800b8dc <osMutexAcquire+0xb8>)
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	2b02      	cmp	r3, #2
 800b86c:	d103      	bne.n	800b876 <osMutexAcquire+0x52>
    stat = osErrorISR;
 800b86e:	f06f 0305 	mvn.w	r3, #5
 800b872:	61fb      	str	r3, [r7, #28]
 800b874:	e02c      	b.n	800b8d0 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 800b876:	69bb      	ldr	r3, [r7, #24]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d103      	bne.n	800b884 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 800b87c:	f06f 0303 	mvn.w	r3, #3
 800b880:	61fb      	str	r3, [r7, #28]
 800b882:	e025      	b.n	800b8d0 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 800b884:	697b      	ldr	r3, [r7, #20]
 800b886:	2b00      	cmp	r3, #0
 800b888:	d011      	beq.n	800b8ae <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800b88a:	6839      	ldr	r1, [r7, #0]
 800b88c:	69b8      	ldr	r0, [r7, #24]
 800b88e:	f000 fd85 	bl	800c39c <xQueueTakeMutexRecursive>
 800b892:	4603      	mov	r3, r0
 800b894:	2b01      	cmp	r3, #1
 800b896:	d01b      	beq.n	800b8d0 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800b898:	683b      	ldr	r3, [r7, #0]
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d003      	beq.n	800b8a6 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 800b89e:	f06f 0301 	mvn.w	r3, #1
 800b8a2:	61fb      	str	r3, [r7, #28]
 800b8a4:	e014      	b.n	800b8d0 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800b8a6:	f06f 0302 	mvn.w	r3, #2
 800b8aa:	61fb      	str	r3, [r7, #28]
 800b8ac:	e010      	b.n	800b8d0 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800b8ae:	6839      	ldr	r1, [r7, #0]
 800b8b0:	69b8      	ldr	r0, [r7, #24]
 800b8b2:	f001 f93f 	bl	800cb34 <xQueueSemaphoreTake>
 800b8b6:	4603      	mov	r3, r0
 800b8b8:	2b01      	cmp	r3, #1
 800b8ba:	d009      	beq.n	800b8d0 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800b8bc:	683b      	ldr	r3, [r7, #0]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d003      	beq.n	800b8ca <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 800b8c2:	f06f 0301 	mvn.w	r3, #1
 800b8c6:	61fb      	str	r3, [r7, #28]
 800b8c8:	e002      	b.n	800b8d0 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800b8ca:	f06f 0302 	mvn.w	r3, #2
 800b8ce:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800b8d0:	69fb      	ldr	r3, [r7, #28]
}
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	3720      	adds	r7, #32
 800b8d6:	46bd      	mov	sp, r7
 800b8d8:	bd80      	pop	{r7, pc}
 800b8da:	bf00      	nop
 800b8dc:	20009b30 	.word	0x20009b30

0800b8e0 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	b088      	sub	sp, #32
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	f023 0301 	bic.w	r3, r3, #1
 800b8ee:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	f003 0301 	and.w	r3, r3, #1
 800b8f6:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800b8f8:	2300      	movs	r3, #0
 800b8fa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b8fc:	f3ef 8305 	mrs	r3, IPSR
 800b900:	613b      	str	r3, [r7, #16]
  return(result);
 800b902:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800b904:	2b00      	cmp	r3, #0
 800b906:	d10f      	bne.n	800b928 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b908:	f3ef 8310 	mrs	r3, PRIMASK
 800b90c:	60fb      	str	r3, [r7, #12]
  return(result);
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	2b00      	cmp	r3, #0
 800b912:	d105      	bne.n	800b920 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b914:	f3ef 8311 	mrs	r3, BASEPRI
 800b918:	60bb      	str	r3, [r7, #8]
  return(result);
 800b91a:	68bb      	ldr	r3, [r7, #8]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d007      	beq.n	800b930 <osMutexRelease+0x50>
 800b920:	4b16      	ldr	r3, [pc, #88]	; (800b97c <osMutexRelease+0x9c>)
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	2b02      	cmp	r3, #2
 800b926:	d103      	bne.n	800b930 <osMutexRelease+0x50>
    stat = osErrorISR;
 800b928:	f06f 0305 	mvn.w	r3, #5
 800b92c:	61fb      	str	r3, [r7, #28]
 800b92e:	e01f      	b.n	800b970 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 800b930:	69bb      	ldr	r3, [r7, #24]
 800b932:	2b00      	cmp	r3, #0
 800b934:	d103      	bne.n	800b93e <osMutexRelease+0x5e>
    stat = osErrorParameter;
 800b936:	f06f 0303 	mvn.w	r3, #3
 800b93a:	61fb      	str	r3, [r7, #28]
 800b93c:	e018      	b.n	800b970 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 800b93e:	697b      	ldr	r3, [r7, #20]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d009      	beq.n	800b958 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800b944:	69b8      	ldr	r0, [r7, #24]
 800b946:	f000 fcf3 	bl	800c330 <xQueueGiveMutexRecursive>
 800b94a:	4603      	mov	r3, r0
 800b94c:	2b01      	cmp	r3, #1
 800b94e:	d00f      	beq.n	800b970 <osMutexRelease+0x90>
        stat = osErrorResource;
 800b950:	f06f 0302 	mvn.w	r3, #2
 800b954:	61fb      	str	r3, [r7, #28]
 800b956:	e00b      	b.n	800b970 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800b958:	2300      	movs	r3, #0
 800b95a:	2200      	movs	r2, #0
 800b95c:	2100      	movs	r1, #0
 800b95e:	69b8      	ldr	r0, [r7, #24]
 800b960:	f000 fdc6 	bl	800c4f0 <xQueueGenericSend>
 800b964:	4603      	mov	r3, r0
 800b966:	2b01      	cmp	r3, #1
 800b968:	d002      	beq.n	800b970 <osMutexRelease+0x90>
        stat = osErrorResource;
 800b96a:	f06f 0302 	mvn.w	r3, #2
 800b96e:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 800b970:	69fb      	ldr	r3, [r7, #28]
}
 800b972:	4618      	mov	r0, r3
 800b974:	3720      	adds	r7, #32
 800b976:	46bd      	mov	sp, r7
 800b978:	bd80      	pop	{r7, pc}
 800b97a:	bf00      	nop
 800b97c:	20009b30 	.word	0x20009b30

0800b980 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800b980:	b580      	push	{r7, lr}
 800b982:	b08c      	sub	sp, #48	; 0x30
 800b984:	af02      	add	r7, sp, #8
 800b986:	60f8      	str	r0, [r7, #12]
 800b988:	60b9      	str	r1, [r7, #8]
 800b98a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800b98c:	2300      	movs	r3, #0
 800b98e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b990:	f3ef 8305 	mrs	r3, IPSR
 800b994:	61bb      	str	r3, [r7, #24]
  return(result);
 800b996:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800b998:	2b00      	cmp	r3, #0
 800b99a:	f040 8086 	bne.w	800baaa <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b99e:	f3ef 8310 	mrs	r3, PRIMASK
 800b9a2:	617b      	str	r3, [r7, #20]
  return(result);
 800b9a4:	697b      	ldr	r3, [r7, #20]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d105      	bne.n	800b9b6 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b9aa:	f3ef 8311 	mrs	r3, BASEPRI
 800b9ae:	613b      	str	r3, [r7, #16]
  return(result);
 800b9b0:	693b      	ldr	r3, [r7, #16]
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d003      	beq.n	800b9be <osSemaphoreNew+0x3e>
 800b9b6:	4b3f      	ldr	r3, [pc, #252]	; (800bab4 <osSemaphoreNew+0x134>)
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	2b02      	cmp	r3, #2
 800b9bc:	d075      	beq.n	800baaa <osSemaphoreNew+0x12a>
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d072      	beq.n	800baaa <osSemaphoreNew+0x12a>
 800b9c4:	68ba      	ldr	r2, [r7, #8]
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	429a      	cmp	r2, r3
 800b9ca:	d86e      	bhi.n	800baaa <osSemaphoreNew+0x12a>
    mem = -1;
 800b9cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b9d0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d015      	beq.n	800ba04 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	689b      	ldr	r3, [r3, #8]
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d006      	beq.n	800b9ee <osSemaphoreNew+0x6e>
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	68db      	ldr	r3, [r3, #12]
 800b9e4:	2b4f      	cmp	r3, #79	; 0x4f
 800b9e6:	d902      	bls.n	800b9ee <osSemaphoreNew+0x6e>
        mem = 1;
 800b9e8:	2301      	movs	r3, #1
 800b9ea:	623b      	str	r3, [r7, #32]
 800b9ec:	e00c      	b.n	800ba08 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	689b      	ldr	r3, [r3, #8]
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d108      	bne.n	800ba08 <osSemaphoreNew+0x88>
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	68db      	ldr	r3, [r3, #12]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d104      	bne.n	800ba08 <osSemaphoreNew+0x88>
          mem = 0;
 800b9fe:	2300      	movs	r3, #0
 800ba00:	623b      	str	r3, [r7, #32]
 800ba02:	e001      	b.n	800ba08 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 800ba04:	2300      	movs	r3, #0
 800ba06:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800ba08:	6a3b      	ldr	r3, [r7, #32]
 800ba0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ba0e:	d04c      	beq.n	800baaa <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	2b01      	cmp	r3, #1
 800ba14:	d128      	bne.n	800ba68 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 800ba16:	6a3b      	ldr	r3, [r7, #32]
 800ba18:	2b01      	cmp	r3, #1
 800ba1a:	d10a      	bne.n	800ba32 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	689b      	ldr	r3, [r3, #8]
 800ba20:	2203      	movs	r2, #3
 800ba22:	9200      	str	r2, [sp, #0]
 800ba24:	2200      	movs	r2, #0
 800ba26:	2100      	movs	r1, #0
 800ba28:	2001      	movs	r0, #1
 800ba2a:	f000 fb4d 	bl	800c0c8 <xQueueGenericCreateStatic>
 800ba2e:	6278      	str	r0, [r7, #36]	; 0x24
 800ba30:	e005      	b.n	800ba3e <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800ba32:	2203      	movs	r2, #3
 800ba34:	2100      	movs	r1, #0
 800ba36:	2001      	movs	r0, #1
 800ba38:	f000 fbc8 	bl	800c1cc <xQueueGenericCreate>
 800ba3c:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800ba3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d022      	beq.n	800ba8a <osSemaphoreNew+0x10a>
 800ba44:	68bb      	ldr	r3, [r7, #8]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d01f      	beq.n	800ba8a <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800ba4a:	2300      	movs	r3, #0
 800ba4c:	2200      	movs	r2, #0
 800ba4e:	2100      	movs	r1, #0
 800ba50:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ba52:	f000 fd4d 	bl	800c4f0 <xQueueGenericSend>
 800ba56:	4603      	mov	r3, r0
 800ba58:	2b01      	cmp	r3, #1
 800ba5a:	d016      	beq.n	800ba8a <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 800ba5c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ba5e:	f001 fa03 	bl	800ce68 <vQueueDelete>
            hSemaphore = NULL;
 800ba62:	2300      	movs	r3, #0
 800ba64:	627b      	str	r3, [r7, #36]	; 0x24
 800ba66:	e010      	b.n	800ba8a <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 800ba68:	6a3b      	ldr	r3, [r7, #32]
 800ba6a:	2b01      	cmp	r3, #1
 800ba6c:	d108      	bne.n	800ba80 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	689b      	ldr	r3, [r3, #8]
 800ba72:	461a      	mov	r2, r3
 800ba74:	68b9      	ldr	r1, [r7, #8]
 800ba76:	68f8      	ldr	r0, [r7, #12]
 800ba78:	f000 fcc8 	bl	800c40c <xQueueCreateCountingSemaphoreStatic>
 800ba7c:	6278      	str	r0, [r7, #36]	; 0x24
 800ba7e:	e004      	b.n	800ba8a <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800ba80:	68b9      	ldr	r1, [r7, #8]
 800ba82:	68f8      	ldr	r0, [r7, #12]
 800ba84:	f000 fcfd 	bl	800c482 <xQueueCreateCountingSemaphore>
 800ba88:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800ba8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d00c      	beq.n	800baaa <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d003      	beq.n	800ba9e <osSemaphoreNew+0x11e>
          name = attr->name;
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	61fb      	str	r3, [r7, #28]
 800ba9c:	e001      	b.n	800baa2 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 800ba9e:	2300      	movs	r3, #0
 800baa0:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800baa2:	69f9      	ldr	r1, [r7, #28]
 800baa4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800baa6:	f001 fb2d 	bl	800d104 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800baaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800baac:	4618      	mov	r0, r3
 800baae:	3728      	adds	r7, #40	; 0x28
 800bab0:	46bd      	mov	sp, r7
 800bab2:	bd80      	pop	{r7, pc}
 800bab4:	20009b30 	.word	0x20009b30

0800bab8 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800bab8:	b580      	push	{r7, lr}
 800baba:	b088      	sub	sp, #32
 800babc:	af00      	add	r7, sp, #0
 800babe:	6078      	str	r0, [r7, #4]
 800bac0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800bac6:	2300      	movs	r3, #0
 800bac8:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800baca:	69bb      	ldr	r3, [r7, #24]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d103      	bne.n	800bad8 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800bad0:	f06f 0303 	mvn.w	r3, #3
 800bad4:	61fb      	str	r3, [r7, #28]
 800bad6:	e04b      	b.n	800bb70 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bad8:	f3ef 8305 	mrs	r3, IPSR
 800badc:	617b      	str	r3, [r7, #20]
  return(result);
 800bade:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d10f      	bne.n	800bb04 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bae4:	f3ef 8310 	mrs	r3, PRIMASK
 800bae8:	613b      	str	r3, [r7, #16]
  return(result);
 800baea:	693b      	ldr	r3, [r7, #16]
 800baec:	2b00      	cmp	r3, #0
 800baee:	d105      	bne.n	800bafc <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800baf0:	f3ef 8311 	mrs	r3, BASEPRI
 800baf4:	60fb      	str	r3, [r7, #12]
  return(result);
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d026      	beq.n	800bb4a <osSemaphoreAcquire+0x92>
 800bafc:	4b1f      	ldr	r3, [pc, #124]	; (800bb7c <osSemaphoreAcquire+0xc4>)
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	2b02      	cmp	r3, #2
 800bb02:	d122      	bne.n	800bb4a <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 800bb04:	683b      	ldr	r3, [r7, #0]
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d003      	beq.n	800bb12 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800bb0a:	f06f 0303 	mvn.w	r3, #3
 800bb0e:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800bb10:	e02d      	b.n	800bb6e <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800bb12:	2300      	movs	r3, #0
 800bb14:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800bb16:	f107 0308 	add.w	r3, r7, #8
 800bb1a:	461a      	mov	r2, r3
 800bb1c:	2100      	movs	r1, #0
 800bb1e:	69b8      	ldr	r0, [r7, #24]
 800bb20:	f001 f91c 	bl	800cd5c <xQueueReceiveFromISR>
 800bb24:	4603      	mov	r3, r0
 800bb26:	2b01      	cmp	r3, #1
 800bb28:	d003      	beq.n	800bb32 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800bb2a:	f06f 0302 	mvn.w	r3, #2
 800bb2e:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800bb30:	e01d      	b.n	800bb6e <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800bb32:	68bb      	ldr	r3, [r7, #8]
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d01a      	beq.n	800bb6e <osSemaphoreAcquire+0xb6>
 800bb38:	4b11      	ldr	r3, [pc, #68]	; (800bb80 <osSemaphoreAcquire+0xc8>)
 800bb3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb3e:	601a      	str	r2, [r3, #0]
 800bb40:	f3bf 8f4f 	dsb	sy
 800bb44:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 800bb48:	e011      	b.n	800bb6e <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800bb4a:	6839      	ldr	r1, [r7, #0]
 800bb4c:	69b8      	ldr	r0, [r7, #24]
 800bb4e:	f000 fff1 	bl	800cb34 <xQueueSemaphoreTake>
 800bb52:	4603      	mov	r3, r0
 800bb54:	2b01      	cmp	r3, #1
 800bb56:	d00b      	beq.n	800bb70 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 800bb58:	683b      	ldr	r3, [r7, #0]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d003      	beq.n	800bb66 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800bb5e:	f06f 0301 	mvn.w	r3, #1
 800bb62:	61fb      	str	r3, [r7, #28]
 800bb64:	e004      	b.n	800bb70 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 800bb66:	f06f 0302 	mvn.w	r3, #2
 800bb6a:	61fb      	str	r3, [r7, #28]
 800bb6c:	e000      	b.n	800bb70 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800bb6e:	bf00      	nop
      }
    }
  }

  return (stat);
 800bb70:	69fb      	ldr	r3, [r7, #28]
}
 800bb72:	4618      	mov	r0, r3
 800bb74:	3720      	adds	r7, #32
 800bb76:	46bd      	mov	sp, r7
 800bb78:	bd80      	pop	{r7, pc}
 800bb7a:	bf00      	nop
 800bb7c:	20009b30 	.word	0x20009b30
 800bb80:	e000ed04 	.word	0xe000ed04

0800bb84 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800bb84:	b580      	push	{r7, lr}
 800bb86:	b088      	sub	sp, #32
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800bb90:	2300      	movs	r3, #0
 800bb92:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800bb94:	69bb      	ldr	r3, [r7, #24]
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d103      	bne.n	800bba2 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800bb9a:	f06f 0303 	mvn.w	r3, #3
 800bb9e:	61fb      	str	r3, [r7, #28]
 800bba0:	e03e      	b.n	800bc20 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bba2:	f3ef 8305 	mrs	r3, IPSR
 800bba6:	617b      	str	r3, [r7, #20]
  return(result);
 800bba8:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d10f      	bne.n	800bbce <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bbae:	f3ef 8310 	mrs	r3, PRIMASK
 800bbb2:	613b      	str	r3, [r7, #16]
  return(result);
 800bbb4:	693b      	ldr	r3, [r7, #16]
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d105      	bne.n	800bbc6 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800bbba:	f3ef 8311 	mrs	r3, BASEPRI
 800bbbe:	60fb      	str	r3, [r7, #12]
  return(result);
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d01e      	beq.n	800bc04 <osSemaphoreRelease+0x80>
 800bbc6:	4b19      	ldr	r3, [pc, #100]	; (800bc2c <osSemaphoreRelease+0xa8>)
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	2b02      	cmp	r3, #2
 800bbcc:	d11a      	bne.n	800bc04 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800bbce:	2300      	movs	r3, #0
 800bbd0:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800bbd2:	f107 0308 	add.w	r3, r7, #8
 800bbd6:	4619      	mov	r1, r3
 800bbd8:	69b8      	ldr	r0, [r7, #24]
 800bbda:	f000 fe2f 	bl	800c83c <xQueueGiveFromISR>
 800bbde:	4603      	mov	r3, r0
 800bbe0:	2b01      	cmp	r3, #1
 800bbe2:	d003      	beq.n	800bbec <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 800bbe4:	f06f 0302 	mvn.w	r3, #2
 800bbe8:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800bbea:	e018      	b.n	800bc1e <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 800bbec:	68bb      	ldr	r3, [r7, #8]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d015      	beq.n	800bc1e <osSemaphoreRelease+0x9a>
 800bbf2:	4b0f      	ldr	r3, [pc, #60]	; (800bc30 <osSemaphoreRelease+0xac>)
 800bbf4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bbf8:	601a      	str	r2, [r3, #0]
 800bbfa:	f3bf 8f4f 	dsb	sy
 800bbfe:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800bc02:	e00c      	b.n	800bc1e <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800bc04:	2300      	movs	r3, #0
 800bc06:	2200      	movs	r2, #0
 800bc08:	2100      	movs	r1, #0
 800bc0a:	69b8      	ldr	r0, [r7, #24]
 800bc0c:	f000 fc70 	bl	800c4f0 <xQueueGenericSend>
 800bc10:	4603      	mov	r3, r0
 800bc12:	2b01      	cmp	r3, #1
 800bc14:	d004      	beq.n	800bc20 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800bc16:	f06f 0302 	mvn.w	r3, #2
 800bc1a:	61fb      	str	r3, [r7, #28]
 800bc1c:	e000      	b.n	800bc20 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800bc1e:	bf00      	nop
    }
  }

  return (stat);
 800bc20:	69fb      	ldr	r3, [r7, #28]
}
 800bc22:	4618      	mov	r0, r3
 800bc24:	3720      	adds	r7, #32
 800bc26:	46bd      	mov	sp, r7
 800bc28:	bd80      	pop	{r7, pc}
 800bc2a:	bf00      	nop
 800bc2c:	20009b30 	.word	0x20009b30
 800bc30:	e000ed04 	.word	0xe000ed04

0800bc34 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800bc34:	b580      	push	{r7, lr}
 800bc36:	b08c      	sub	sp, #48	; 0x30
 800bc38:	af02      	add	r7, sp, #8
 800bc3a:	60f8      	str	r0, [r7, #12]
 800bc3c:	60b9      	str	r1, [r7, #8]
 800bc3e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800bc40:	2300      	movs	r3, #0
 800bc42:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bc44:	f3ef 8305 	mrs	r3, IPSR
 800bc48:	61bb      	str	r3, [r7, #24]
  return(result);
 800bc4a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d16f      	bne.n	800bd30 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bc50:	f3ef 8310 	mrs	r3, PRIMASK
 800bc54:	617b      	str	r3, [r7, #20]
  return(result);
 800bc56:	697b      	ldr	r3, [r7, #20]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d105      	bne.n	800bc68 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800bc5c:	f3ef 8311 	mrs	r3, BASEPRI
 800bc60:	613b      	str	r3, [r7, #16]
  return(result);
 800bc62:	693b      	ldr	r3, [r7, #16]
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d003      	beq.n	800bc70 <osMessageQueueNew+0x3c>
 800bc68:	4b34      	ldr	r3, [pc, #208]	; (800bd3c <osMessageQueueNew+0x108>)
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	2b02      	cmp	r3, #2
 800bc6e:	d05f      	beq.n	800bd30 <osMessageQueueNew+0xfc>
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d05c      	beq.n	800bd30 <osMessageQueueNew+0xfc>
 800bc76:	68bb      	ldr	r3, [r7, #8]
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d059      	beq.n	800bd30 <osMessageQueueNew+0xfc>
    mem = -1;
 800bc7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bc80:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d029      	beq.n	800bcdc <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	689b      	ldr	r3, [r3, #8]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d012      	beq.n	800bcb6 <osMessageQueueNew+0x82>
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	68db      	ldr	r3, [r3, #12]
 800bc94:	2b4f      	cmp	r3, #79	; 0x4f
 800bc96:	d90e      	bls.n	800bcb6 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d00a      	beq.n	800bcb6 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	695a      	ldr	r2, [r3, #20]
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	68b9      	ldr	r1, [r7, #8]
 800bca8:	fb01 f303 	mul.w	r3, r1, r3
 800bcac:	429a      	cmp	r2, r3
 800bcae:	d302      	bcc.n	800bcb6 <osMessageQueueNew+0x82>
        mem = 1;
 800bcb0:	2301      	movs	r3, #1
 800bcb2:	623b      	str	r3, [r7, #32]
 800bcb4:	e014      	b.n	800bce0 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	689b      	ldr	r3, [r3, #8]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d110      	bne.n	800bce0 <osMessageQueueNew+0xac>
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	68db      	ldr	r3, [r3, #12]
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d10c      	bne.n	800bce0 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d108      	bne.n	800bce0 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	695b      	ldr	r3, [r3, #20]
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d104      	bne.n	800bce0 <osMessageQueueNew+0xac>
          mem = 0;
 800bcd6:	2300      	movs	r3, #0
 800bcd8:	623b      	str	r3, [r7, #32]
 800bcda:	e001      	b.n	800bce0 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800bcdc:	2300      	movs	r3, #0
 800bcde:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800bce0:	6a3b      	ldr	r3, [r7, #32]
 800bce2:	2b01      	cmp	r3, #1
 800bce4:	d10b      	bne.n	800bcfe <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	691a      	ldr	r2, [r3, #16]
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	689b      	ldr	r3, [r3, #8]
 800bcee:	2100      	movs	r1, #0
 800bcf0:	9100      	str	r1, [sp, #0]
 800bcf2:	68b9      	ldr	r1, [r7, #8]
 800bcf4:	68f8      	ldr	r0, [r7, #12]
 800bcf6:	f000 f9e7 	bl	800c0c8 <xQueueGenericCreateStatic>
 800bcfa:	6278      	str	r0, [r7, #36]	; 0x24
 800bcfc:	e008      	b.n	800bd10 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800bcfe:	6a3b      	ldr	r3, [r7, #32]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d105      	bne.n	800bd10 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 800bd04:	2200      	movs	r2, #0
 800bd06:	68b9      	ldr	r1, [r7, #8]
 800bd08:	68f8      	ldr	r0, [r7, #12]
 800bd0a:	f000 fa5f 	bl	800c1cc <xQueueGenericCreate>
 800bd0e:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800bd10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d00c      	beq.n	800bd30 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d003      	beq.n	800bd24 <osMessageQueueNew+0xf0>
        name = attr->name;
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	61fb      	str	r3, [r7, #28]
 800bd22:	e001      	b.n	800bd28 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 800bd24:	2300      	movs	r3, #0
 800bd26:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800bd28:	69f9      	ldr	r1, [r7, #28]
 800bd2a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bd2c:	f001 f9ea 	bl	800d104 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800bd30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bd32:	4618      	mov	r0, r3
 800bd34:	3728      	adds	r7, #40	; 0x28
 800bd36:	46bd      	mov	sp, r7
 800bd38:	bd80      	pop	{r7, pc}
 800bd3a:	bf00      	nop
 800bd3c:	20009b30 	.word	0x20009b30

0800bd40 <osMessageQueueGet>:
  }

  return (stat);
}

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800bd40:	b580      	push	{r7, lr}
 800bd42:	b08a      	sub	sp, #40	; 0x28
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	60f8      	str	r0, [r7, #12]
 800bd48:	60b9      	str	r1, [r7, #8]
 800bd4a:	607a      	str	r2, [r7, #4]
 800bd4c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800bd52:	2300      	movs	r3, #0
 800bd54:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bd56:	f3ef 8305 	mrs	r3, IPSR
 800bd5a:	61fb      	str	r3, [r7, #28]
  return(result);
 800bd5c:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d10f      	bne.n	800bd82 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bd62:	f3ef 8310 	mrs	r3, PRIMASK
 800bd66:	61bb      	str	r3, [r7, #24]
  return(result);
 800bd68:	69bb      	ldr	r3, [r7, #24]
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d105      	bne.n	800bd7a <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800bd6e:	f3ef 8311 	mrs	r3, BASEPRI
 800bd72:	617b      	str	r3, [r7, #20]
  return(result);
 800bd74:	697b      	ldr	r3, [r7, #20]
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d02c      	beq.n	800bdd4 <osMessageQueueGet+0x94>
 800bd7a:	4b28      	ldr	r3, [pc, #160]	; (800be1c <osMessageQueueGet+0xdc>)
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	2b02      	cmp	r3, #2
 800bd80:	d128      	bne.n	800bdd4 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800bd82:	6a3b      	ldr	r3, [r7, #32]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d005      	beq.n	800bd94 <osMessageQueueGet+0x54>
 800bd88:	68bb      	ldr	r3, [r7, #8]
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d002      	beq.n	800bd94 <osMessageQueueGet+0x54>
 800bd8e:	683b      	ldr	r3, [r7, #0]
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d003      	beq.n	800bd9c <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800bd94:	f06f 0303 	mvn.w	r3, #3
 800bd98:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800bd9a:	e038      	b.n	800be0e <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800bd9c:	2300      	movs	r3, #0
 800bd9e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800bda0:	f107 0310 	add.w	r3, r7, #16
 800bda4:	461a      	mov	r2, r3
 800bda6:	68b9      	ldr	r1, [r7, #8]
 800bda8:	6a38      	ldr	r0, [r7, #32]
 800bdaa:	f000 ffd7 	bl	800cd5c <xQueueReceiveFromISR>
 800bdae:	4603      	mov	r3, r0
 800bdb0:	2b01      	cmp	r3, #1
 800bdb2:	d003      	beq.n	800bdbc <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800bdb4:	f06f 0302 	mvn.w	r3, #2
 800bdb8:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800bdba:	e028      	b.n	800be0e <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800bdbc:	693b      	ldr	r3, [r7, #16]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d025      	beq.n	800be0e <osMessageQueueGet+0xce>
 800bdc2:	4b17      	ldr	r3, [pc, #92]	; (800be20 <osMessageQueueGet+0xe0>)
 800bdc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bdc8:	601a      	str	r2, [r3, #0]
 800bdca:	f3bf 8f4f 	dsb	sy
 800bdce:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800bdd2:	e01c      	b.n	800be0e <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800bdd4:	6a3b      	ldr	r3, [r7, #32]
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d002      	beq.n	800bde0 <osMessageQueueGet+0xa0>
 800bdda:	68bb      	ldr	r3, [r7, #8]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d103      	bne.n	800bde8 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800bde0:	f06f 0303 	mvn.w	r3, #3
 800bde4:	627b      	str	r3, [r7, #36]	; 0x24
 800bde6:	e013      	b.n	800be10 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800bde8:	683a      	ldr	r2, [r7, #0]
 800bdea:	68b9      	ldr	r1, [r7, #8]
 800bdec:	6a38      	ldr	r0, [r7, #32]
 800bdee:	f000 fdbb 	bl	800c968 <xQueueReceive>
 800bdf2:	4603      	mov	r3, r0
 800bdf4:	2b01      	cmp	r3, #1
 800bdf6:	d00b      	beq.n	800be10 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800bdf8:	683b      	ldr	r3, [r7, #0]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d003      	beq.n	800be06 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800bdfe:	f06f 0301 	mvn.w	r3, #1
 800be02:	627b      	str	r3, [r7, #36]	; 0x24
 800be04:	e004      	b.n	800be10 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800be06:	f06f 0302 	mvn.w	r3, #2
 800be0a:	627b      	str	r3, [r7, #36]	; 0x24
 800be0c:	e000      	b.n	800be10 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800be0e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800be10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800be12:	4618      	mov	r0, r3
 800be14:	3728      	adds	r7, #40	; 0x28
 800be16:	46bd      	mov	sp, r7
 800be18:	bd80      	pop	{r7, pc}
 800be1a:	bf00      	nop
 800be1c:	20009b30 	.word	0x20009b30
 800be20:	e000ed04 	.word	0xe000ed04

0800be24 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800be24:	b480      	push	{r7}
 800be26:	b085      	sub	sp, #20
 800be28:	af00      	add	r7, sp, #0
 800be2a:	60f8      	str	r0, [r7, #12]
 800be2c:	60b9      	str	r1, [r7, #8]
 800be2e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	4a07      	ldr	r2, [pc, #28]	; (800be50 <vApplicationGetIdleTaskMemory+0x2c>)
 800be34:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800be36:	68bb      	ldr	r3, [r7, #8]
 800be38:	4a06      	ldr	r2, [pc, #24]	; (800be54 <vApplicationGetIdleTaskMemory+0x30>)
 800be3a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	2280      	movs	r2, #128	; 0x80
 800be40:	601a      	str	r2, [r3, #0]
}
 800be42:	bf00      	nop
 800be44:	3714      	adds	r7, #20
 800be46:	46bd      	mov	sp, r7
 800be48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be4c:	4770      	bx	lr
 800be4e:	bf00      	nop
 800be50:	20009b34 	.word	0x20009b34
 800be54:	20009b90 	.word	0x20009b90

0800be58 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800be58:	b480      	push	{r7}
 800be5a:	b085      	sub	sp, #20
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	60f8      	str	r0, [r7, #12]
 800be60:	60b9      	str	r1, [r7, #8]
 800be62:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	4a07      	ldr	r2, [pc, #28]	; (800be84 <vApplicationGetTimerTaskMemory+0x2c>)
 800be68:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800be6a:	68bb      	ldr	r3, [r7, #8]
 800be6c:	4a06      	ldr	r2, [pc, #24]	; (800be88 <vApplicationGetTimerTaskMemory+0x30>)
 800be6e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	f44f 7280 	mov.w	r2, #256	; 0x100
 800be76:	601a      	str	r2, [r3, #0]
}
 800be78:	bf00      	nop
 800be7a:	3714      	adds	r7, #20
 800be7c:	46bd      	mov	sp, r7
 800be7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be82:	4770      	bx	lr
 800be84:	20009d90 	.word	0x20009d90
 800be88:	20009dec 	.word	0x20009dec

0800be8c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800be8c:	b480      	push	{r7}
 800be8e:	b083      	sub	sp, #12
 800be90:	af00      	add	r7, sp, #0
 800be92:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	f103 0208 	add.w	r2, r3, #8
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bea4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	f103 0208 	add.w	r2, r3, #8
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	f103 0208 	add.w	r2, r3, #8
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	2200      	movs	r2, #0
 800bebe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800bec0:	bf00      	nop
 800bec2:	370c      	adds	r7, #12
 800bec4:	46bd      	mov	sp, r7
 800bec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beca:	4770      	bx	lr

0800becc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800becc:	b480      	push	{r7}
 800bece:	b083      	sub	sp, #12
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	2200      	movs	r2, #0
 800bed8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800beda:	bf00      	nop
 800bedc:	370c      	adds	r7, #12
 800bede:	46bd      	mov	sp, r7
 800bee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee4:	4770      	bx	lr

0800bee6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bee6:	b480      	push	{r7}
 800bee8:	b085      	sub	sp, #20
 800beea:	af00      	add	r7, sp, #0
 800beec:	6078      	str	r0, [r7, #4]
 800beee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	685b      	ldr	r3, [r3, #4]
 800bef4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800bef6:	683b      	ldr	r3, [r7, #0]
 800bef8:	68fa      	ldr	r2, [r7, #12]
 800befa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	689a      	ldr	r2, [r3, #8]
 800bf00:	683b      	ldr	r3, [r7, #0]
 800bf02:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	689b      	ldr	r3, [r3, #8]
 800bf08:	683a      	ldr	r2, [r7, #0]
 800bf0a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	683a      	ldr	r2, [r7, #0]
 800bf10:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800bf12:	683b      	ldr	r3, [r7, #0]
 800bf14:	687a      	ldr	r2, [r7, #4]
 800bf16:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	1c5a      	adds	r2, r3, #1
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	601a      	str	r2, [r3, #0]
}
 800bf22:	bf00      	nop
 800bf24:	3714      	adds	r7, #20
 800bf26:	46bd      	mov	sp, r7
 800bf28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf2c:	4770      	bx	lr

0800bf2e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bf2e:	b480      	push	{r7}
 800bf30:	b085      	sub	sp, #20
 800bf32:	af00      	add	r7, sp, #0
 800bf34:	6078      	str	r0, [r7, #4]
 800bf36:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800bf38:	683b      	ldr	r3, [r7, #0]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800bf3e:	68bb      	ldr	r3, [r7, #8]
 800bf40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bf44:	d103      	bne.n	800bf4e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	691b      	ldr	r3, [r3, #16]
 800bf4a:	60fb      	str	r3, [r7, #12]
 800bf4c:	e00c      	b.n	800bf68 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	3308      	adds	r3, #8
 800bf52:	60fb      	str	r3, [r7, #12]
 800bf54:	e002      	b.n	800bf5c <vListInsert+0x2e>
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	685b      	ldr	r3, [r3, #4]
 800bf5a:	60fb      	str	r3, [r7, #12]
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	685b      	ldr	r3, [r3, #4]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	68ba      	ldr	r2, [r7, #8]
 800bf64:	429a      	cmp	r2, r3
 800bf66:	d2f6      	bcs.n	800bf56 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	685a      	ldr	r2, [r3, #4]
 800bf6c:	683b      	ldr	r3, [r7, #0]
 800bf6e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800bf70:	683b      	ldr	r3, [r7, #0]
 800bf72:	685b      	ldr	r3, [r3, #4]
 800bf74:	683a      	ldr	r2, [r7, #0]
 800bf76:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800bf78:	683b      	ldr	r3, [r7, #0]
 800bf7a:	68fa      	ldr	r2, [r7, #12]
 800bf7c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	683a      	ldr	r2, [r7, #0]
 800bf82:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800bf84:	683b      	ldr	r3, [r7, #0]
 800bf86:	687a      	ldr	r2, [r7, #4]
 800bf88:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	1c5a      	adds	r2, r3, #1
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	601a      	str	r2, [r3, #0]
}
 800bf94:	bf00      	nop
 800bf96:	3714      	adds	r7, #20
 800bf98:	46bd      	mov	sp, r7
 800bf9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf9e:	4770      	bx	lr

0800bfa0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800bfa0:	b480      	push	{r7}
 800bfa2:	b085      	sub	sp, #20
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	691b      	ldr	r3, [r3, #16]
 800bfac:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	685b      	ldr	r3, [r3, #4]
 800bfb2:	687a      	ldr	r2, [r7, #4]
 800bfb4:	6892      	ldr	r2, [r2, #8]
 800bfb6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	689b      	ldr	r3, [r3, #8]
 800bfbc:	687a      	ldr	r2, [r7, #4]
 800bfbe:	6852      	ldr	r2, [r2, #4]
 800bfc0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	685b      	ldr	r3, [r3, #4]
 800bfc6:	687a      	ldr	r2, [r7, #4]
 800bfc8:	429a      	cmp	r2, r3
 800bfca:	d103      	bne.n	800bfd4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	689a      	ldr	r2, [r3, #8]
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	2200      	movs	r2, #0
 800bfd8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	1e5a      	subs	r2, r3, #1
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	681b      	ldr	r3, [r3, #0]
}
 800bfe8:	4618      	mov	r0, r3
 800bfea:	3714      	adds	r7, #20
 800bfec:	46bd      	mov	sp, r7
 800bfee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff2:	4770      	bx	lr

0800bff4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800bff4:	b580      	push	{r7, lr}
 800bff6:	b084      	sub	sp, #16
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	6078      	str	r0, [r7, #4]
 800bffc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	2b00      	cmp	r3, #0
 800c006:	d10c      	bne.n	800c022 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c00c:	b672      	cpsid	i
 800c00e:	f383 8811 	msr	BASEPRI, r3
 800c012:	f3bf 8f6f 	isb	sy
 800c016:	f3bf 8f4f 	dsb	sy
 800c01a:	b662      	cpsie	i
 800c01c:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c01e:	bf00      	nop
 800c020:	e7fe      	b.n	800c020 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800c022:	f002 fe2b 	bl	800ec7c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	681a      	ldr	r2, [r3, #0]
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c02e:	68f9      	ldr	r1, [r7, #12]
 800c030:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c032:	fb01 f303 	mul.w	r3, r1, r3
 800c036:	441a      	add	r2, r3
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	2200      	movs	r2, #0
 800c040:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	681a      	ldr	r2, [r3, #0]
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	681a      	ldr	r2, [r3, #0]
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c052:	3b01      	subs	r3, #1
 800c054:	68f9      	ldr	r1, [r7, #12]
 800c056:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c058:	fb01 f303 	mul.w	r3, r1, r3
 800c05c:	441a      	add	r2, r3
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	22ff      	movs	r2, #255	; 0xff
 800c066:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	22ff      	movs	r2, #255	; 0xff
 800c06e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c072:	683b      	ldr	r3, [r7, #0]
 800c074:	2b00      	cmp	r3, #0
 800c076:	d114      	bne.n	800c0a2 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	691b      	ldr	r3, [r3, #16]
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d01a      	beq.n	800c0b6 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	3310      	adds	r3, #16
 800c084:	4618      	mov	r0, r3
 800c086:	f001 fdd3 	bl	800dc30 <xTaskRemoveFromEventList>
 800c08a:	4603      	mov	r3, r0
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d012      	beq.n	800c0b6 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c090:	4b0c      	ldr	r3, [pc, #48]	; (800c0c4 <xQueueGenericReset+0xd0>)
 800c092:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c096:	601a      	str	r2, [r3, #0]
 800c098:	f3bf 8f4f 	dsb	sy
 800c09c:	f3bf 8f6f 	isb	sy
 800c0a0:	e009      	b.n	800c0b6 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	3310      	adds	r3, #16
 800c0a6:	4618      	mov	r0, r3
 800c0a8:	f7ff fef0 	bl	800be8c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	3324      	adds	r3, #36	; 0x24
 800c0b0:	4618      	mov	r0, r3
 800c0b2:	f7ff feeb 	bl	800be8c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c0b6:	f002 fe15 	bl	800ece4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c0ba:	2301      	movs	r3, #1
}
 800c0bc:	4618      	mov	r0, r3
 800c0be:	3710      	adds	r7, #16
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	bd80      	pop	{r7, pc}
 800c0c4:	e000ed04 	.word	0xe000ed04

0800c0c8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c0c8:	b580      	push	{r7, lr}
 800c0ca:	b08e      	sub	sp, #56	; 0x38
 800c0cc:	af02      	add	r7, sp, #8
 800c0ce:	60f8      	str	r0, [r7, #12]
 800c0d0:	60b9      	str	r1, [r7, #8]
 800c0d2:	607a      	str	r2, [r7, #4]
 800c0d4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d10c      	bne.n	800c0f6 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800c0dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0e0:	b672      	cpsid	i
 800c0e2:	f383 8811 	msr	BASEPRI, r3
 800c0e6:	f3bf 8f6f 	isb	sy
 800c0ea:	f3bf 8f4f 	dsb	sy
 800c0ee:	b662      	cpsie	i
 800c0f0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c0f2:	bf00      	nop
 800c0f4:	e7fe      	b.n	800c0f4 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c0f6:	683b      	ldr	r3, [r7, #0]
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d10c      	bne.n	800c116 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800c0fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c100:	b672      	cpsid	i
 800c102:	f383 8811 	msr	BASEPRI, r3
 800c106:	f3bf 8f6f 	isb	sy
 800c10a:	f3bf 8f4f 	dsb	sy
 800c10e:	b662      	cpsie	i
 800c110:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c112:	bf00      	nop
 800c114:	e7fe      	b.n	800c114 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d002      	beq.n	800c122 <xQueueGenericCreateStatic+0x5a>
 800c11c:	68bb      	ldr	r3, [r7, #8]
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d001      	beq.n	800c126 <xQueueGenericCreateStatic+0x5e>
 800c122:	2301      	movs	r3, #1
 800c124:	e000      	b.n	800c128 <xQueueGenericCreateStatic+0x60>
 800c126:	2300      	movs	r3, #0
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d10c      	bne.n	800c146 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800c12c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c130:	b672      	cpsid	i
 800c132:	f383 8811 	msr	BASEPRI, r3
 800c136:	f3bf 8f6f 	isb	sy
 800c13a:	f3bf 8f4f 	dsb	sy
 800c13e:	b662      	cpsie	i
 800c140:	623b      	str	r3, [r7, #32]
}
 800c142:	bf00      	nop
 800c144:	e7fe      	b.n	800c144 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d102      	bne.n	800c152 <xQueueGenericCreateStatic+0x8a>
 800c14c:	68bb      	ldr	r3, [r7, #8]
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d101      	bne.n	800c156 <xQueueGenericCreateStatic+0x8e>
 800c152:	2301      	movs	r3, #1
 800c154:	e000      	b.n	800c158 <xQueueGenericCreateStatic+0x90>
 800c156:	2300      	movs	r3, #0
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d10c      	bne.n	800c176 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800c15c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c160:	b672      	cpsid	i
 800c162:	f383 8811 	msr	BASEPRI, r3
 800c166:	f3bf 8f6f 	isb	sy
 800c16a:	f3bf 8f4f 	dsb	sy
 800c16e:	b662      	cpsie	i
 800c170:	61fb      	str	r3, [r7, #28]
}
 800c172:	bf00      	nop
 800c174:	e7fe      	b.n	800c174 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c176:	2350      	movs	r3, #80	; 0x50
 800c178:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c17a:	697b      	ldr	r3, [r7, #20]
 800c17c:	2b50      	cmp	r3, #80	; 0x50
 800c17e:	d00c      	beq.n	800c19a <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800c180:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c184:	b672      	cpsid	i
 800c186:	f383 8811 	msr	BASEPRI, r3
 800c18a:	f3bf 8f6f 	isb	sy
 800c18e:	f3bf 8f4f 	dsb	sy
 800c192:	b662      	cpsie	i
 800c194:	61bb      	str	r3, [r7, #24]
}
 800c196:	bf00      	nop
 800c198:	e7fe      	b.n	800c198 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c19a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c19c:	683b      	ldr	r3, [r7, #0]
 800c19e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800c1a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d00d      	beq.n	800c1c2 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c1a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1a8:	2201      	movs	r2, #1
 800c1aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c1ae:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800c1b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1b4:	9300      	str	r3, [sp, #0]
 800c1b6:	4613      	mov	r3, r2
 800c1b8:	687a      	ldr	r2, [r7, #4]
 800c1ba:	68b9      	ldr	r1, [r7, #8]
 800c1bc:	68f8      	ldr	r0, [r7, #12]
 800c1be:	f000 f847 	bl	800c250 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c1c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800c1c4:	4618      	mov	r0, r3
 800c1c6:	3730      	adds	r7, #48	; 0x30
 800c1c8:	46bd      	mov	sp, r7
 800c1ca:	bd80      	pop	{r7, pc}

0800c1cc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c1cc:	b580      	push	{r7, lr}
 800c1ce:	b08a      	sub	sp, #40	; 0x28
 800c1d0:	af02      	add	r7, sp, #8
 800c1d2:	60f8      	str	r0, [r7, #12]
 800c1d4:	60b9      	str	r1, [r7, #8]
 800c1d6:	4613      	mov	r3, r2
 800c1d8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d10c      	bne.n	800c1fa <xQueueGenericCreate+0x2e>
	__asm volatile
 800c1e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1e4:	b672      	cpsid	i
 800c1e6:	f383 8811 	msr	BASEPRI, r3
 800c1ea:	f3bf 8f6f 	isb	sy
 800c1ee:	f3bf 8f4f 	dsb	sy
 800c1f2:	b662      	cpsie	i
 800c1f4:	613b      	str	r3, [r7, #16]
}
 800c1f6:	bf00      	nop
 800c1f8:	e7fe      	b.n	800c1f8 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800c1fa:	68bb      	ldr	r3, [r7, #8]
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d102      	bne.n	800c206 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800c200:	2300      	movs	r3, #0
 800c202:	61fb      	str	r3, [r7, #28]
 800c204:	e004      	b.n	800c210 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	68ba      	ldr	r2, [r7, #8]
 800c20a:	fb02 f303 	mul.w	r3, r2, r3
 800c20e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c210:	69fb      	ldr	r3, [r7, #28]
 800c212:	3350      	adds	r3, #80	; 0x50
 800c214:	4618      	mov	r0, r3
 800c216:	f002 fe5d 	bl	800eed4 <pvPortMalloc>
 800c21a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c21c:	69bb      	ldr	r3, [r7, #24]
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d011      	beq.n	800c246 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c222:	69bb      	ldr	r3, [r7, #24]
 800c224:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c226:	697b      	ldr	r3, [r7, #20]
 800c228:	3350      	adds	r3, #80	; 0x50
 800c22a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c22c:	69bb      	ldr	r3, [r7, #24]
 800c22e:	2200      	movs	r2, #0
 800c230:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c234:	79fa      	ldrb	r2, [r7, #7]
 800c236:	69bb      	ldr	r3, [r7, #24]
 800c238:	9300      	str	r3, [sp, #0]
 800c23a:	4613      	mov	r3, r2
 800c23c:	697a      	ldr	r2, [r7, #20]
 800c23e:	68b9      	ldr	r1, [r7, #8]
 800c240:	68f8      	ldr	r0, [r7, #12]
 800c242:	f000 f805 	bl	800c250 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c246:	69bb      	ldr	r3, [r7, #24]
	}
 800c248:	4618      	mov	r0, r3
 800c24a:	3720      	adds	r7, #32
 800c24c:	46bd      	mov	sp, r7
 800c24e:	bd80      	pop	{r7, pc}

0800c250 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c250:	b580      	push	{r7, lr}
 800c252:	b084      	sub	sp, #16
 800c254:	af00      	add	r7, sp, #0
 800c256:	60f8      	str	r0, [r7, #12]
 800c258:	60b9      	str	r1, [r7, #8]
 800c25a:	607a      	str	r2, [r7, #4]
 800c25c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c25e:	68bb      	ldr	r3, [r7, #8]
 800c260:	2b00      	cmp	r3, #0
 800c262:	d103      	bne.n	800c26c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c264:	69bb      	ldr	r3, [r7, #24]
 800c266:	69ba      	ldr	r2, [r7, #24]
 800c268:	601a      	str	r2, [r3, #0]
 800c26a:	e002      	b.n	800c272 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c26c:	69bb      	ldr	r3, [r7, #24]
 800c26e:	687a      	ldr	r2, [r7, #4]
 800c270:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c272:	69bb      	ldr	r3, [r7, #24]
 800c274:	68fa      	ldr	r2, [r7, #12]
 800c276:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c278:	69bb      	ldr	r3, [r7, #24]
 800c27a:	68ba      	ldr	r2, [r7, #8]
 800c27c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c27e:	2101      	movs	r1, #1
 800c280:	69b8      	ldr	r0, [r7, #24]
 800c282:	f7ff feb7 	bl	800bff4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800c286:	69bb      	ldr	r3, [r7, #24]
 800c288:	78fa      	ldrb	r2, [r7, #3]
 800c28a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c28e:	bf00      	nop
 800c290:	3710      	adds	r7, #16
 800c292:	46bd      	mov	sp, r7
 800c294:	bd80      	pop	{r7, pc}

0800c296 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800c296:	b580      	push	{r7, lr}
 800c298:	b082      	sub	sp, #8
 800c29a:	af00      	add	r7, sp, #0
 800c29c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d00e      	beq.n	800c2c2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	2200      	movs	r2, #0
 800c2a8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	2200      	movs	r2, #0
 800c2ae:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	2200      	movs	r2, #0
 800c2b4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800c2b6:	2300      	movs	r3, #0
 800c2b8:	2200      	movs	r2, #0
 800c2ba:	2100      	movs	r1, #0
 800c2bc:	6878      	ldr	r0, [r7, #4]
 800c2be:	f000 f917 	bl	800c4f0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800c2c2:	bf00      	nop
 800c2c4:	3708      	adds	r7, #8
 800c2c6:	46bd      	mov	sp, r7
 800c2c8:	bd80      	pop	{r7, pc}

0800c2ca <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800c2ca:	b580      	push	{r7, lr}
 800c2cc:	b086      	sub	sp, #24
 800c2ce:	af00      	add	r7, sp, #0
 800c2d0:	4603      	mov	r3, r0
 800c2d2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800c2d4:	2301      	movs	r3, #1
 800c2d6:	617b      	str	r3, [r7, #20]
 800c2d8:	2300      	movs	r3, #0
 800c2da:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800c2dc:	79fb      	ldrb	r3, [r7, #7]
 800c2de:	461a      	mov	r2, r3
 800c2e0:	6939      	ldr	r1, [r7, #16]
 800c2e2:	6978      	ldr	r0, [r7, #20]
 800c2e4:	f7ff ff72 	bl	800c1cc <xQueueGenericCreate>
 800c2e8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800c2ea:	68f8      	ldr	r0, [r7, #12]
 800c2ec:	f7ff ffd3 	bl	800c296 <prvInitialiseMutex>

		return xNewQueue;
 800c2f0:	68fb      	ldr	r3, [r7, #12]
	}
 800c2f2:	4618      	mov	r0, r3
 800c2f4:	3718      	adds	r7, #24
 800c2f6:	46bd      	mov	sp, r7
 800c2f8:	bd80      	pop	{r7, pc}

0800c2fa <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800c2fa:	b580      	push	{r7, lr}
 800c2fc:	b088      	sub	sp, #32
 800c2fe:	af02      	add	r7, sp, #8
 800c300:	4603      	mov	r3, r0
 800c302:	6039      	str	r1, [r7, #0]
 800c304:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800c306:	2301      	movs	r3, #1
 800c308:	617b      	str	r3, [r7, #20]
 800c30a:	2300      	movs	r3, #0
 800c30c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800c30e:	79fb      	ldrb	r3, [r7, #7]
 800c310:	9300      	str	r3, [sp, #0]
 800c312:	683b      	ldr	r3, [r7, #0]
 800c314:	2200      	movs	r2, #0
 800c316:	6939      	ldr	r1, [r7, #16]
 800c318:	6978      	ldr	r0, [r7, #20]
 800c31a:	f7ff fed5 	bl	800c0c8 <xQueueGenericCreateStatic>
 800c31e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800c320:	68f8      	ldr	r0, [r7, #12]
 800c322:	f7ff ffb8 	bl	800c296 <prvInitialiseMutex>

		return xNewQueue;
 800c326:	68fb      	ldr	r3, [r7, #12]
	}
 800c328:	4618      	mov	r0, r3
 800c32a:	3718      	adds	r7, #24
 800c32c:	46bd      	mov	sp, r7
 800c32e:	bd80      	pop	{r7, pc}

0800c330 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800c330:	b590      	push	{r4, r7, lr}
 800c332:	b087      	sub	sp, #28
 800c334:	af00      	add	r7, sp, #0
 800c336:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800c33c:	693b      	ldr	r3, [r7, #16]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d10c      	bne.n	800c35c <xQueueGiveMutexRecursive+0x2c>
	__asm volatile
 800c342:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c346:	b672      	cpsid	i
 800c348:	f383 8811 	msr	BASEPRI, r3
 800c34c:	f3bf 8f6f 	isb	sy
 800c350:	f3bf 8f4f 	dsb	sy
 800c354:	b662      	cpsie	i
 800c356:	60fb      	str	r3, [r7, #12]
}
 800c358:	bf00      	nop
 800c35a:	e7fe      	b.n	800c35a <xQueueGiveMutexRecursive+0x2a>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800c35c:	693b      	ldr	r3, [r7, #16]
 800c35e:	689c      	ldr	r4, [r3, #8]
 800c360:	f001 fe2e 	bl	800dfc0 <xTaskGetCurrentTaskHandle>
 800c364:	4603      	mov	r3, r0
 800c366:	429c      	cmp	r4, r3
 800c368:	d111      	bne.n	800c38e <xQueueGiveMutexRecursive+0x5e>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800c36a:	693b      	ldr	r3, [r7, #16]
 800c36c:	68db      	ldr	r3, [r3, #12]
 800c36e:	1e5a      	subs	r2, r3, #1
 800c370:	693b      	ldr	r3, [r7, #16]
 800c372:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800c374:	693b      	ldr	r3, [r7, #16]
 800c376:	68db      	ldr	r3, [r3, #12]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d105      	bne.n	800c388 <xQueueGiveMutexRecursive+0x58>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800c37c:	2300      	movs	r3, #0
 800c37e:	2200      	movs	r2, #0
 800c380:	2100      	movs	r1, #0
 800c382:	6938      	ldr	r0, [r7, #16]
 800c384:	f000 f8b4 	bl	800c4f0 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800c388:	2301      	movs	r3, #1
 800c38a:	617b      	str	r3, [r7, #20]
 800c38c:	e001      	b.n	800c392 <xQueueGiveMutexRecursive+0x62>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800c38e:	2300      	movs	r3, #0
 800c390:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800c392:	697b      	ldr	r3, [r7, #20]
	}
 800c394:	4618      	mov	r0, r3
 800c396:	371c      	adds	r7, #28
 800c398:	46bd      	mov	sp, r7
 800c39a:	bd90      	pop	{r4, r7, pc}

0800c39c <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800c39c:	b590      	push	{r4, r7, lr}
 800c39e:	b087      	sub	sp, #28
 800c3a0:	af00      	add	r7, sp, #0
 800c3a2:	6078      	str	r0, [r7, #4]
 800c3a4:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800c3aa:	693b      	ldr	r3, [r7, #16]
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d10c      	bne.n	800c3ca <xQueueTakeMutexRecursive+0x2e>
	__asm volatile
 800c3b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3b4:	b672      	cpsid	i
 800c3b6:	f383 8811 	msr	BASEPRI, r3
 800c3ba:	f3bf 8f6f 	isb	sy
 800c3be:	f3bf 8f4f 	dsb	sy
 800c3c2:	b662      	cpsie	i
 800c3c4:	60fb      	str	r3, [r7, #12]
}
 800c3c6:	bf00      	nop
 800c3c8:	e7fe      	b.n	800c3c8 <xQueueTakeMutexRecursive+0x2c>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800c3ca:	693b      	ldr	r3, [r7, #16]
 800c3cc:	689c      	ldr	r4, [r3, #8]
 800c3ce:	f001 fdf7 	bl	800dfc0 <xTaskGetCurrentTaskHandle>
 800c3d2:	4603      	mov	r3, r0
 800c3d4:	429c      	cmp	r4, r3
 800c3d6:	d107      	bne.n	800c3e8 <xQueueTakeMutexRecursive+0x4c>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800c3d8:	693b      	ldr	r3, [r7, #16]
 800c3da:	68db      	ldr	r3, [r3, #12]
 800c3dc:	1c5a      	adds	r2, r3, #1
 800c3de:	693b      	ldr	r3, [r7, #16]
 800c3e0:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800c3e2:	2301      	movs	r3, #1
 800c3e4:	617b      	str	r3, [r7, #20]
 800c3e6:	e00c      	b.n	800c402 <xQueueTakeMutexRecursive+0x66>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800c3e8:	6839      	ldr	r1, [r7, #0]
 800c3ea:	6938      	ldr	r0, [r7, #16]
 800c3ec:	f000 fba2 	bl	800cb34 <xQueueSemaphoreTake>
 800c3f0:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800c3f2:	697b      	ldr	r3, [r7, #20]
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d004      	beq.n	800c402 <xQueueTakeMutexRecursive+0x66>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800c3f8:	693b      	ldr	r3, [r7, #16]
 800c3fa:	68db      	ldr	r3, [r3, #12]
 800c3fc:	1c5a      	adds	r2, r3, #1
 800c3fe:	693b      	ldr	r3, [r7, #16]
 800c400:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800c402:	697b      	ldr	r3, [r7, #20]
	}
 800c404:	4618      	mov	r0, r3
 800c406:	371c      	adds	r7, #28
 800c408:	46bd      	mov	sp, r7
 800c40a:	bd90      	pop	{r4, r7, pc}

0800c40c <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800c40c:	b580      	push	{r7, lr}
 800c40e:	b08a      	sub	sp, #40	; 0x28
 800c410:	af02      	add	r7, sp, #8
 800c412:	60f8      	str	r0, [r7, #12]
 800c414:	60b9      	str	r1, [r7, #8]
 800c416:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d10c      	bne.n	800c438 <xQueueCreateCountingSemaphoreStatic+0x2c>
	__asm volatile
 800c41e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c422:	b672      	cpsid	i
 800c424:	f383 8811 	msr	BASEPRI, r3
 800c428:	f3bf 8f6f 	isb	sy
 800c42c:	f3bf 8f4f 	dsb	sy
 800c430:	b662      	cpsie	i
 800c432:	61bb      	str	r3, [r7, #24]
}
 800c434:	bf00      	nop
 800c436:	e7fe      	b.n	800c436 <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 800c438:	68ba      	ldr	r2, [r7, #8]
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	429a      	cmp	r2, r3
 800c43e:	d90c      	bls.n	800c45a <xQueueCreateCountingSemaphoreStatic+0x4e>
	__asm volatile
 800c440:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c444:	b672      	cpsid	i
 800c446:	f383 8811 	msr	BASEPRI, r3
 800c44a:	f3bf 8f6f 	isb	sy
 800c44e:	f3bf 8f4f 	dsb	sy
 800c452:	b662      	cpsie	i
 800c454:	617b      	str	r3, [r7, #20]
}
 800c456:	bf00      	nop
 800c458:	e7fe      	b.n	800c458 <xQueueCreateCountingSemaphoreStatic+0x4c>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c45a:	2302      	movs	r3, #2
 800c45c:	9300      	str	r3, [sp, #0]
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	2200      	movs	r2, #0
 800c462:	2100      	movs	r1, #0
 800c464:	68f8      	ldr	r0, [r7, #12]
 800c466:	f7ff fe2f 	bl	800c0c8 <xQueueGenericCreateStatic>
 800c46a:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800c46c:	69fb      	ldr	r3, [r7, #28]
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d002      	beq.n	800c478 <xQueueCreateCountingSemaphoreStatic+0x6c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c472:	69fb      	ldr	r3, [r7, #28]
 800c474:	68ba      	ldr	r2, [r7, #8]
 800c476:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800c478:	69fb      	ldr	r3, [r7, #28]
	}
 800c47a:	4618      	mov	r0, r3
 800c47c:	3720      	adds	r7, #32
 800c47e:	46bd      	mov	sp, r7
 800c480:	bd80      	pop	{r7, pc}

0800c482 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800c482:	b580      	push	{r7, lr}
 800c484:	b086      	sub	sp, #24
 800c486:	af00      	add	r7, sp, #0
 800c488:	6078      	str	r0, [r7, #4]
 800c48a:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d10c      	bne.n	800c4ac <xQueueCreateCountingSemaphore+0x2a>
	__asm volatile
 800c492:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c496:	b672      	cpsid	i
 800c498:	f383 8811 	msr	BASEPRI, r3
 800c49c:	f3bf 8f6f 	isb	sy
 800c4a0:	f3bf 8f4f 	dsb	sy
 800c4a4:	b662      	cpsie	i
 800c4a6:	613b      	str	r3, [r7, #16]
}
 800c4a8:	bf00      	nop
 800c4aa:	e7fe      	b.n	800c4aa <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 800c4ac:	683a      	ldr	r2, [r7, #0]
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	429a      	cmp	r2, r3
 800c4b2:	d90c      	bls.n	800c4ce <xQueueCreateCountingSemaphore+0x4c>
	__asm volatile
 800c4b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4b8:	b672      	cpsid	i
 800c4ba:	f383 8811 	msr	BASEPRI, r3
 800c4be:	f3bf 8f6f 	isb	sy
 800c4c2:	f3bf 8f4f 	dsb	sy
 800c4c6:	b662      	cpsie	i
 800c4c8:	60fb      	str	r3, [r7, #12]
}
 800c4ca:	bf00      	nop
 800c4cc:	e7fe      	b.n	800c4cc <xQueueCreateCountingSemaphore+0x4a>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c4ce:	2202      	movs	r2, #2
 800c4d0:	2100      	movs	r1, #0
 800c4d2:	6878      	ldr	r0, [r7, #4]
 800c4d4:	f7ff fe7a 	bl	800c1cc <xQueueGenericCreate>
 800c4d8:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800c4da:	697b      	ldr	r3, [r7, #20]
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d002      	beq.n	800c4e6 <xQueueCreateCountingSemaphore+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c4e0:	697b      	ldr	r3, [r7, #20]
 800c4e2:	683a      	ldr	r2, [r7, #0]
 800c4e4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800c4e6:	697b      	ldr	r3, [r7, #20]
	}
 800c4e8:	4618      	mov	r0, r3
 800c4ea:	3718      	adds	r7, #24
 800c4ec:	46bd      	mov	sp, r7
 800c4ee:	bd80      	pop	{r7, pc}

0800c4f0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c4f0:	b580      	push	{r7, lr}
 800c4f2:	b08e      	sub	sp, #56	; 0x38
 800c4f4:	af00      	add	r7, sp, #0
 800c4f6:	60f8      	str	r0, [r7, #12]
 800c4f8:	60b9      	str	r1, [r7, #8]
 800c4fa:	607a      	str	r2, [r7, #4]
 800c4fc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c4fe:	2300      	movs	r3, #0
 800c500:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d10c      	bne.n	800c526 <xQueueGenericSend+0x36>
	__asm volatile
 800c50c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c510:	b672      	cpsid	i
 800c512:	f383 8811 	msr	BASEPRI, r3
 800c516:	f3bf 8f6f 	isb	sy
 800c51a:	f3bf 8f4f 	dsb	sy
 800c51e:	b662      	cpsie	i
 800c520:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c522:	bf00      	nop
 800c524:	e7fe      	b.n	800c524 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c526:	68bb      	ldr	r3, [r7, #8]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d103      	bne.n	800c534 <xQueueGenericSend+0x44>
 800c52c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c52e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c530:	2b00      	cmp	r3, #0
 800c532:	d101      	bne.n	800c538 <xQueueGenericSend+0x48>
 800c534:	2301      	movs	r3, #1
 800c536:	e000      	b.n	800c53a <xQueueGenericSend+0x4a>
 800c538:	2300      	movs	r3, #0
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d10c      	bne.n	800c558 <xQueueGenericSend+0x68>
	__asm volatile
 800c53e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c542:	b672      	cpsid	i
 800c544:	f383 8811 	msr	BASEPRI, r3
 800c548:	f3bf 8f6f 	isb	sy
 800c54c:	f3bf 8f4f 	dsb	sy
 800c550:	b662      	cpsie	i
 800c552:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c554:	bf00      	nop
 800c556:	e7fe      	b.n	800c556 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c558:	683b      	ldr	r3, [r7, #0]
 800c55a:	2b02      	cmp	r3, #2
 800c55c:	d103      	bne.n	800c566 <xQueueGenericSend+0x76>
 800c55e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c562:	2b01      	cmp	r3, #1
 800c564:	d101      	bne.n	800c56a <xQueueGenericSend+0x7a>
 800c566:	2301      	movs	r3, #1
 800c568:	e000      	b.n	800c56c <xQueueGenericSend+0x7c>
 800c56a:	2300      	movs	r3, #0
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d10c      	bne.n	800c58a <xQueueGenericSend+0x9a>
	__asm volatile
 800c570:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c574:	b672      	cpsid	i
 800c576:	f383 8811 	msr	BASEPRI, r3
 800c57a:	f3bf 8f6f 	isb	sy
 800c57e:	f3bf 8f4f 	dsb	sy
 800c582:	b662      	cpsie	i
 800c584:	623b      	str	r3, [r7, #32]
}
 800c586:	bf00      	nop
 800c588:	e7fe      	b.n	800c588 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c58a:	f001 fd29 	bl	800dfe0 <xTaskGetSchedulerState>
 800c58e:	4603      	mov	r3, r0
 800c590:	2b00      	cmp	r3, #0
 800c592:	d102      	bne.n	800c59a <xQueueGenericSend+0xaa>
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	2b00      	cmp	r3, #0
 800c598:	d101      	bne.n	800c59e <xQueueGenericSend+0xae>
 800c59a:	2301      	movs	r3, #1
 800c59c:	e000      	b.n	800c5a0 <xQueueGenericSend+0xb0>
 800c59e:	2300      	movs	r3, #0
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d10c      	bne.n	800c5be <xQueueGenericSend+0xce>
	__asm volatile
 800c5a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5a8:	b672      	cpsid	i
 800c5aa:	f383 8811 	msr	BASEPRI, r3
 800c5ae:	f3bf 8f6f 	isb	sy
 800c5b2:	f3bf 8f4f 	dsb	sy
 800c5b6:	b662      	cpsie	i
 800c5b8:	61fb      	str	r3, [r7, #28]
}
 800c5ba:	bf00      	nop
 800c5bc:	e7fe      	b.n	800c5bc <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c5be:	f002 fb5d 	bl	800ec7c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c5c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c5c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c5ca:	429a      	cmp	r2, r3
 800c5cc:	d302      	bcc.n	800c5d4 <xQueueGenericSend+0xe4>
 800c5ce:	683b      	ldr	r3, [r7, #0]
 800c5d0:	2b02      	cmp	r3, #2
 800c5d2:	d129      	bne.n	800c628 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c5d4:	683a      	ldr	r2, [r7, #0]
 800c5d6:	68b9      	ldr	r1, [r7, #8]
 800c5d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c5da:	f000 fc82 	bl	800cee2 <prvCopyDataToQueue>
 800c5de:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c5e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d010      	beq.n	800c60a <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c5e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5ea:	3324      	adds	r3, #36	; 0x24
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	f001 fb1f 	bl	800dc30 <xTaskRemoveFromEventList>
 800c5f2:	4603      	mov	r3, r0
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d013      	beq.n	800c620 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c5f8:	4b3f      	ldr	r3, [pc, #252]	; (800c6f8 <xQueueGenericSend+0x208>)
 800c5fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c5fe:	601a      	str	r2, [r3, #0]
 800c600:	f3bf 8f4f 	dsb	sy
 800c604:	f3bf 8f6f 	isb	sy
 800c608:	e00a      	b.n	800c620 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c60a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d007      	beq.n	800c620 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c610:	4b39      	ldr	r3, [pc, #228]	; (800c6f8 <xQueueGenericSend+0x208>)
 800c612:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c616:	601a      	str	r2, [r3, #0]
 800c618:	f3bf 8f4f 	dsb	sy
 800c61c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c620:	f002 fb60 	bl	800ece4 <vPortExitCritical>
				return pdPASS;
 800c624:	2301      	movs	r3, #1
 800c626:	e063      	b.n	800c6f0 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d103      	bne.n	800c636 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c62e:	f002 fb59 	bl	800ece4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c632:	2300      	movs	r3, #0
 800c634:	e05c      	b.n	800c6f0 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d106      	bne.n	800c64a <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c63c:	f107 0314 	add.w	r3, r7, #20
 800c640:	4618      	mov	r0, r3
 800c642:	f001 fb5b 	bl	800dcfc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c646:	2301      	movs	r3, #1
 800c648:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c64a:	f002 fb4b 	bl	800ece4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c64e:	f001 f8af 	bl	800d7b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c652:	f002 fb13 	bl	800ec7c <vPortEnterCritical>
 800c656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c658:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c65c:	b25b      	sxtb	r3, r3
 800c65e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c662:	d103      	bne.n	800c66c <xQueueGenericSend+0x17c>
 800c664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c666:	2200      	movs	r2, #0
 800c668:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c66c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c66e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c672:	b25b      	sxtb	r3, r3
 800c674:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c678:	d103      	bne.n	800c682 <xQueueGenericSend+0x192>
 800c67a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c67c:	2200      	movs	r2, #0
 800c67e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c682:	f002 fb2f 	bl	800ece4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c686:	1d3a      	adds	r2, r7, #4
 800c688:	f107 0314 	add.w	r3, r7, #20
 800c68c:	4611      	mov	r1, r2
 800c68e:	4618      	mov	r0, r3
 800c690:	f001 fb4a 	bl	800dd28 <xTaskCheckForTimeOut>
 800c694:	4603      	mov	r3, r0
 800c696:	2b00      	cmp	r3, #0
 800c698:	d124      	bne.n	800c6e4 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c69a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c69c:	f000 fd19 	bl	800d0d2 <prvIsQueueFull>
 800c6a0:	4603      	mov	r3, r0
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d018      	beq.n	800c6d8 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c6a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6a8:	3310      	adds	r3, #16
 800c6aa:	687a      	ldr	r2, [r7, #4]
 800c6ac:	4611      	mov	r1, r2
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	f001 fa6a 	bl	800db88 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c6b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c6b6:	f000 fca4 	bl	800d002 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c6ba:	f001 f887 	bl	800d7cc <xTaskResumeAll>
 800c6be:	4603      	mov	r3, r0
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	f47f af7c 	bne.w	800c5be <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800c6c6:	4b0c      	ldr	r3, [pc, #48]	; (800c6f8 <xQueueGenericSend+0x208>)
 800c6c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c6cc:	601a      	str	r2, [r3, #0]
 800c6ce:	f3bf 8f4f 	dsb	sy
 800c6d2:	f3bf 8f6f 	isb	sy
 800c6d6:	e772      	b.n	800c5be <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c6d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c6da:	f000 fc92 	bl	800d002 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c6de:	f001 f875 	bl	800d7cc <xTaskResumeAll>
 800c6e2:	e76c      	b.n	800c5be <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c6e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c6e6:	f000 fc8c 	bl	800d002 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c6ea:	f001 f86f 	bl	800d7cc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c6ee:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c6f0:	4618      	mov	r0, r3
 800c6f2:	3738      	adds	r7, #56	; 0x38
 800c6f4:	46bd      	mov	sp, r7
 800c6f6:	bd80      	pop	{r7, pc}
 800c6f8:	e000ed04 	.word	0xe000ed04

0800c6fc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c6fc:	b580      	push	{r7, lr}
 800c6fe:	b08e      	sub	sp, #56	; 0x38
 800c700:	af00      	add	r7, sp, #0
 800c702:	60f8      	str	r0, [r7, #12]
 800c704:	60b9      	str	r1, [r7, #8]
 800c706:	607a      	str	r2, [r7, #4]
 800c708:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c70e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c710:	2b00      	cmp	r3, #0
 800c712:	d10c      	bne.n	800c72e <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800c714:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c718:	b672      	cpsid	i
 800c71a:	f383 8811 	msr	BASEPRI, r3
 800c71e:	f3bf 8f6f 	isb	sy
 800c722:	f3bf 8f4f 	dsb	sy
 800c726:	b662      	cpsie	i
 800c728:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c72a:	bf00      	nop
 800c72c:	e7fe      	b.n	800c72c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c72e:	68bb      	ldr	r3, [r7, #8]
 800c730:	2b00      	cmp	r3, #0
 800c732:	d103      	bne.n	800c73c <xQueueGenericSendFromISR+0x40>
 800c734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d101      	bne.n	800c740 <xQueueGenericSendFromISR+0x44>
 800c73c:	2301      	movs	r3, #1
 800c73e:	e000      	b.n	800c742 <xQueueGenericSendFromISR+0x46>
 800c740:	2300      	movs	r3, #0
 800c742:	2b00      	cmp	r3, #0
 800c744:	d10c      	bne.n	800c760 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800c746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c74a:	b672      	cpsid	i
 800c74c:	f383 8811 	msr	BASEPRI, r3
 800c750:	f3bf 8f6f 	isb	sy
 800c754:	f3bf 8f4f 	dsb	sy
 800c758:	b662      	cpsie	i
 800c75a:	623b      	str	r3, [r7, #32]
}
 800c75c:	bf00      	nop
 800c75e:	e7fe      	b.n	800c75e <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c760:	683b      	ldr	r3, [r7, #0]
 800c762:	2b02      	cmp	r3, #2
 800c764:	d103      	bne.n	800c76e <xQueueGenericSendFromISR+0x72>
 800c766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c76a:	2b01      	cmp	r3, #1
 800c76c:	d101      	bne.n	800c772 <xQueueGenericSendFromISR+0x76>
 800c76e:	2301      	movs	r3, #1
 800c770:	e000      	b.n	800c774 <xQueueGenericSendFromISR+0x78>
 800c772:	2300      	movs	r3, #0
 800c774:	2b00      	cmp	r3, #0
 800c776:	d10c      	bne.n	800c792 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800c778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c77c:	b672      	cpsid	i
 800c77e:	f383 8811 	msr	BASEPRI, r3
 800c782:	f3bf 8f6f 	isb	sy
 800c786:	f3bf 8f4f 	dsb	sy
 800c78a:	b662      	cpsie	i
 800c78c:	61fb      	str	r3, [r7, #28]
}
 800c78e:	bf00      	nop
 800c790:	e7fe      	b.n	800c790 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c792:	f002 fb5b 	bl	800ee4c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c796:	f3ef 8211 	mrs	r2, BASEPRI
 800c79a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c79e:	b672      	cpsid	i
 800c7a0:	f383 8811 	msr	BASEPRI, r3
 800c7a4:	f3bf 8f6f 	isb	sy
 800c7a8:	f3bf 8f4f 	dsb	sy
 800c7ac:	b662      	cpsie	i
 800c7ae:	61ba      	str	r2, [r7, #24]
 800c7b0:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c7b2:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c7b4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c7b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c7ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c7be:	429a      	cmp	r2, r3
 800c7c0:	d302      	bcc.n	800c7c8 <xQueueGenericSendFromISR+0xcc>
 800c7c2:	683b      	ldr	r3, [r7, #0]
 800c7c4:	2b02      	cmp	r3, #2
 800c7c6:	d12c      	bne.n	800c822 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c7c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c7ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c7d2:	683a      	ldr	r2, [r7, #0]
 800c7d4:	68b9      	ldr	r1, [r7, #8]
 800c7d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c7d8:	f000 fb83 	bl	800cee2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c7dc:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800c7e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c7e4:	d112      	bne.n	800c80c <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c7e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d016      	beq.n	800c81c <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c7ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7f0:	3324      	adds	r3, #36	; 0x24
 800c7f2:	4618      	mov	r0, r3
 800c7f4:	f001 fa1c 	bl	800dc30 <xTaskRemoveFromEventList>
 800c7f8:	4603      	mov	r3, r0
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d00e      	beq.n	800c81c <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	2b00      	cmp	r3, #0
 800c802:	d00b      	beq.n	800c81c <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	2201      	movs	r2, #1
 800c808:	601a      	str	r2, [r3, #0]
 800c80a:	e007      	b.n	800c81c <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c80c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c810:	3301      	adds	r3, #1
 800c812:	b2db      	uxtb	r3, r3
 800c814:	b25a      	sxtb	r2, r3
 800c816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c818:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c81c:	2301      	movs	r3, #1
 800c81e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800c820:	e001      	b.n	800c826 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c822:	2300      	movs	r3, #0
 800c824:	637b      	str	r3, [r7, #52]	; 0x34
 800c826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c828:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c82a:	693b      	ldr	r3, [r7, #16]
 800c82c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c830:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c834:	4618      	mov	r0, r3
 800c836:	3738      	adds	r7, #56	; 0x38
 800c838:	46bd      	mov	sp, r7
 800c83a:	bd80      	pop	{r7, pc}

0800c83c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c83c:	b580      	push	{r7, lr}
 800c83e:	b08e      	sub	sp, #56	; 0x38
 800c840:	af00      	add	r7, sp, #0
 800c842:	6078      	str	r0, [r7, #4]
 800c844:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800c84a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d10c      	bne.n	800c86a <xQueueGiveFromISR+0x2e>
	__asm volatile
 800c850:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c854:	b672      	cpsid	i
 800c856:	f383 8811 	msr	BASEPRI, r3
 800c85a:	f3bf 8f6f 	isb	sy
 800c85e:	f3bf 8f4f 	dsb	sy
 800c862:	b662      	cpsie	i
 800c864:	623b      	str	r3, [r7, #32]
}
 800c866:	bf00      	nop
 800c868:	e7fe      	b.n	800c868 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c86a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c86c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d00c      	beq.n	800c88c <xQueueGiveFromISR+0x50>
	__asm volatile
 800c872:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c876:	b672      	cpsid	i
 800c878:	f383 8811 	msr	BASEPRI, r3
 800c87c:	f3bf 8f6f 	isb	sy
 800c880:	f3bf 8f4f 	dsb	sy
 800c884:	b662      	cpsie	i
 800c886:	61fb      	str	r3, [r7, #28]
}
 800c888:	bf00      	nop
 800c88a:	e7fe      	b.n	800c88a <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800c88c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	2b00      	cmp	r3, #0
 800c892:	d103      	bne.n	800c89c <xQueueGiveFromISR+0x60>
 800c894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c896:	689b      	ldr	r3, [r3, #8]
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d101      	bne.n	800c8a0 <xQueueGiveFromISR+0x64>
 800c89c:	2301      	movs	r3, #1
 800c89e:	e000      	b.n	800c8a2 <xQueueGiveFromISR+0x66>
 800c8a0:	2300      	movs	r3, #0
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d10c      	bne.n	800c8c0 <xQueueGiveFromISR+0x84>
	__asm volatile
 800c8a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8aa:	b672      	cpsid	i
 800c8ac:	f383 8811 	msr	BASEPRI, r3
 800c8b0:	f3bf 8f6f 	isb	sy
 800c8b4:	f3bf 8f4f 	dsb	sy
 800c8b8:	b662      	cpsie	i
 800c8ba:	61bb      	str	r3, [r7, #24]
}
 800c8bc:	bf00      	nop
 800c8be:	e7fe      	b.n	800c8be <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c8c0:	f002 fac4 	bl	800ee4c <vPortValidateInterruptPriority>
	__asm volatile
 800c8c4:	f3ef 8211 	mrs	r2, BASEPRI
 800c8c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8cc:	b672      	cpsid	i
 800c8ce:	f383 8811 	msr	BASEPRI, r3
 800c8d2:	f3bf 8f6f 	isb	sy
 800c8d6:	f3bf 8f4f 	dsb	sy
 800c8da:	b662      	cpsie	i
 800c8dc:	617a      	str	r2, [r7, #20]
 800c8de:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800c8e0:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c8e2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c8e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8e8:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800c8ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c8f0:	429a      	cmp	r2, r3
 800c8f2:	d22b      	bcs.n	800c94c <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c8f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c8fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c8fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c900:	1c5a      	adds	r2, r3, #1
 800c902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c904:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c906:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c90a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c90e:	d112      	bne.n	800c936 <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c914:	2b00      	cmp	r3, #0
 800c916:	d016      	beq.n	800c946 <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c91a:	3324      	adds	r3, #36	; 0x24
 800c91c:	4618      	mov	r0, r3
 800c91e:	f001 f987 	bl	800dc30 <xTaskRemoveFromEventList>
 800c922:	4603      	mov	r3, r0
 800c924:	2b00      	cmp	r3, #0
 800c926:	d00e      	beq.n	800c946 <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c928:	683b      	ldr	r3, [r7, #0]
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d00b      	beq.n	800c946 <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c92e:	683b      	ldr	r3, [r7, #0]
 800c930:	2201      	movs	r2, #1
 800c932:	601a      	str	r2, [r3, #0]
 800c934:	e007      	b.n	800c946 <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c936:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c93a:	3301      	adds	r3, #1
 800c93c:	b2db      	uxtb	r3, r3
 800c93e:	b25a      	sxtb	r2, r3
 800c940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c942:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c946:	2301      	movs	r3, #1
 800c948:	637b      	str	r3, [r7, #52]	; 0x34
 800c94a:	e001      	b.n	800c950 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c94c:	2300      	movs	r3, #0
 800c94e:	637b      	str	r3, [r7, #52]	; 0x34
 800c950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c952:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	f383 8811 	msr	BASEPRI, r3
}
 800c95a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c95c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c95e:	4618      	mov	r0, r3
 800c960:	3738      	adds	r7, #56	; 0x38
 800c962:	46bd      	mov	sp, r7
 800c964:	bd80      	pop	{r7, pc}
	...

0800c968 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c968:	b580      	push	{r7, lr}
 800c96a:	b08c      	sub	sp, #48	; 0x30
 800c96c:	af00      	add	r7, sp, #0
 800c96e:	60f8      	str	r0, [r7, #12]
 800c970:	60b9      	str	r1, [r7, #8]
 800c972:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c974:	2300      	movs	r3, #0
 800c976:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c97c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d10c      	bne.n	800c99c <xQueueReceive+0x34>
	__asm volatile
 800c982:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c986:	b672      	cpsid	i
 800c988:	f383 8811 	msr	BASEPRI, r3
 800c98c:	f3bf 8f6f 	isb	sy
 800c990:	f3bf 8f4f 	dsb	sy
 800c994:	b662      	cpsie	i
 800c996:	623b      	str	r3, [r7, #32]
}
 800c998:	bf00      	nop
 800c99a:	e7fe      	b.n	800c99a <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c99c:	68bb      	ldr	r3, [r7, #8]
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d103      	bne.n	800c9aa <xQueueReceive+0x42>
 800c9a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d101      	bne.n	800c9ae <xQueueReceive+0x46>
 800c9aa:	2301      	movs	r3, #1
 800c9ac:	e000      	b.n	800c9b0 <xQueueReceive+0x48>
 800c9ae:	2300      	movs	r3, #0
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d10c      	bne.n	800c9ce <xQueueReceive+0x66>
	__asm volatile
 800c9b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9b8:	b672      	cpsid	i
 800c9ba:	f383 8811 	msr	BASEPRI, r3
 800c9be:	f3bf 8f6f 	isb	sy
 800c9c2:	f3bf 8f4f 	dsb	sy
 800c9c6:	b662      	cpsie	i
 800c9c8:	61fb      	str	r3, [r7, #28]
}
 800c9ca:	bf00      	nop
 800c9cc:	e7fe      	b.n	800c9cc <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c9ce:	f001 fb07 	bl	800dfe0 <xTaskGetSchedulerState>
 800c9d2:	4603      	mov	r3, r0
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d102      	bne.n	800c9de <xQueueReceive+0x76>
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d101      	bne.n	800c9e2 <xQueueReceive+0x7a>
 800c9de:	2301      	movs	r3, #1
 800c9e0:	e000      	b.n	800c9e4 <xQueueReceive+0x7c>
 800c9e2:	2300      	movs	r3, #0
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d10c      	bne.n	800ca02 <xQueueReceive+0x9a>
	__asm volatile
 800c9e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9ec:	b672      	cpsid	i
 800c9ee:	f383 8811 	msr	BASEPRI, r3
 800c9f2:	f3bf 8f6f 	isb	sy
 800c9f6:	f3bf 8f4f 	dsb	sy
 800c9fa:	b662      	cpsie	i
 800c9fc:	61bb      	str	r3, [r7, #24]
}
 800c9fe:	bf00      	nop
 800ca00:	e7fe      	b.n	800ca00 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ca02:	f002 f93b 	bl	800ec7c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ca06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca0a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ca0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d01f      	beq.n	800ca52 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ca12:	68b9      	ldr	r1, [r7, #8]
 800ca14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ca16:	f000 face 	bl	800cfb6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ca1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca1c:	1e5a      	subs	r2, r3, #1
 800ca1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca20:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ca22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca24:	691b      	ldr	r3, [r3, #16]
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d00f      	beq.n	800ca4a <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ca2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca2c:	3310      	adds	r3, #16
 800ca2e:	4618      	mov	r0, r3
 800ca30:	f001 f8fe 	bl	800dc30 <xTaskRemoveFromEventList>
 800ca34:	4603      	mov	r3, r0
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d007      	beq.n	800ca4a <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ca3a:	4b3d      	ldr	r3, [pc, #244]	; (800cb30 <xQueueReceive+0x1c8>)
 800ca3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca40:	601a      	str	r2, [r3, #0]
 800ca42:	f3bf 8f4f 	dsb	sy
 800ca46:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ca4a:	f002 f94b 	bl	800ece4 <vPortExitCritical>
				return pdPASS;
 800ca4e:	2301      	movs	r3, #1
 800ca50:	e069      	b.n	800cb26 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d103      	bne.n	800ca60 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ca58:	f002 f944 	bl	800ece4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ca5c:	2300      	movs	r3, #0
 800ca5e:	e062      	b.n	800cb26 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ca60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d106      	bne.n	800ca74 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ca66:	f107 0310 	add.w	r3, r7, #16
 800ca6a:	4618      	mov	r0, r3
 800ca6c:	f001 f946 	bl	800dcfc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ca70:	2301      	movs	r3, #1
 800ca72:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ca74:	f002 f936 	bl	800ece4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ca78:	f000 fe9a 	bl	800d7b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ca7c:	f002 f8fe 	bl	800ec7c <vPortEnterCritical>
 800ca80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca82:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ca86:	b25b      	sxtb	r3, r3
 800ca88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ca8c:	d103      	bne.n	800ca96 <xQueueReceive+0x12e>
 800ca8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca90:	2200      	movs	r2, #0
 800ca92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ca96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca98:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ca9c:	b25b      	sxtb	r3, r3
 800ca9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800caa2:	d103      	bne.n	800caac <xQueueReceive+0x144>
 800caa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caa6:	2200      	movs	r2, #0
 800caa8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800caac:	f002 f91a 	bl	800ece4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cab0:	1d3a      	adds	r2, r7, #4
 800cab2:	f107 0310 	add.w	r3, r7, #16
 800cab6:	4611      	mov	r1, r2
 800cab8:	4618      	mov	r0, r3
 800caba:	f001 f935 	bl	800dd28 <xTaskCheckForTimeOut>
 800cabe:	4603      	mov	r3, r0
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d123      	bne.n	800cb0c <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cac4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cac6:	f000 faee 	bl	800d0a6 <prvIsQueueEmpty>
 800caca:	4603      	mov	r3, r0
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d017      	beq.n	800cb00 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cad2:	3324      	adds	r3, #36	; 0x24
 800cad4:	687a      	ldr	r2, [r7, #4]
 800cad6:	4611      	mov	r1, r2
 800cad8:	4618      	mov	r0, r3
 800cada:	f001 f855 	bl	800db88 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cade:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cae0:	f000 fa8f 	bl	800d002 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800cae4:	f000 fe72 	bl	800d7cc <xTaskResumeAll>
 800cae8:	4603      	mov	r3, r0
 800caea:	2b00      	cmp	r3, #0
 800caec:	d189      	bne.n	800ca02 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800caee:	4b10      	ldr	r3, [pc, #64]	; (800cb30 <xQueueReceive+0x1c8>)
 800caf0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800caf4:	601a      	str	r2, [r3, #0]
 800caf6:	f3bf 8f4f 	dsb	sy
 800cafa:	f3bf 8f6f 	isb	sy
 800cafe:	e780      	b.n	800ca02 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800cb00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cb02:	f000 fa7e 	bl	800d002 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cb06:	f000 fe61 	bl	800d7cc <xTaskResumeAll>
 800cb0a:	e77a      	b.n	800ca02 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800cb0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cb0e:	f000 fa78 	bl	800d002 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cb12:	f000 fe5b 	bl	800d7cc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cb16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cb18:	f000 fac5 	bl	800d0a6 <prvIsQueueEmpty>
 800cb1c:	4603      	mov	r3, r0
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	f43f af6f 	beq.w	800ca02 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800cb24:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800cb26:	4618      	mov	r0, r3
 800cb28:	3730      	adds	r7, #48	; 0x30
 800cb2a:	46bd      	mov	sp, r7
 800cb2c:	bd80      	pop	{r7, pc}
 800cb2e:	bf00      	nop
 800cb30:	e000ed04 	.word	0xe000ed04

0800cb34 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800cb34:	b580      	push	{r7, lr}
 800cb36:	b08e      	sub	sp, #56	; 0x38
 800cb38:	af00      	add	r7, sp, #0
 800cb3a:	6078      	str	r0, [r7, #4]
 800cb3c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800cb3e:	2300      	movs	r3, #0
 800cb40:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800cb46:	2300      	movs	r3, #0
 800cb48:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800cb4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d10c      	bne.n	800cb6a <xQueueSemaphoreTake+0x36>
	__asm volatile
 800cb50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb54:	b672      	cpsid	i
 800cb56:	f383 8811 	msr	BASEPRI, r3
 800cb5a:	f3bf 8f6f 	isb	sy
 800cb5e:	f3bf 8f4f 	dsb	sy
 800cb62:	b662      	cpsie	i
 800cb64:	623b      	str	r3, [r7, #32]
}
 800cb66:	bf00      	nop
 800cb68:	e7fe      	b.n	800cb68 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800cb6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d00c      	beq.n	800cb8c <xQueueSemaphoreTake+0x58>
	__asm volatile
 800cb72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb76:	b672      	cpsid	i
 800cb78:	f383 8811 	msr	BASEPRI, r3
 800cb7c:	f3bf 8f6f 	isb	sy
 800cb80:	f3bf 8f4f 	dsb	sy
 800cb84:	b662      	cpsie	i
 800cb86:	61fb      	str	r3, [r7, #28]
}
 800cb88:	bf00      	nop
 800cb8a:	e7fe      	b.n	800cb8a <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cb8c:	f001 fa28 	bl	800dfe0 <xTaskGetSchedulerState>
 800cb90:	4603      	mov	r3, r0
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d102      	bne.n	800cb9c <xQueueSemaphoreTake+0x68>
 800cb96:	683b      	ldr	r3, [r7, #0]
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d101      	bne.n	800cba0 <xQueueSemaphoreTake+0x6c>
 800cb9c:	2301      	movs	r3, #1
 800cb9e:	e000      	b.n	800cba2 <xQueueSemaphoreTake+0x6e>
 800cba0:	2300      	movs	r3, #0
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d10c      	bne.n	800cbc0 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 800cba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbaa:	b672      	cpsid	i
 800cbac:	f383 8811 	msr	BASEPRI, r3
 800cbb0:	f3bf 8f6f 	isb	sy
 800cbb4:	f3bf 8f4f 	dsb	sy
 800cbb8:	b662      	cpsie	i
 800cbba:	61bb      	str	r3, [r7, #24]
}
 800cbbc:	bf00      	nop
 800cbbe:	e7fe      	b.n	800cbbe <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cbc0:	f002 f85c 	bl	800ec7c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800cbc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbc8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800cbca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d024      	beq.n	800cc1a <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800cbd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbd2:	1e5a      	subs	r2, r3, #1
 800cbd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbd6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cbd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d104      	bne.n	800cbea <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800cbe0:	f001 fb7c 	bl	800e2dc <pvTaskIncrementMutexHeldCount>
 800cbe4:	4602      	mov	r2, r0
 800cbe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbe8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cbea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbec:	691b      	ldr	r3, [r3, #16]
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d00f      	beq.n	800cc12 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cbf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbf4:	3310      	adds	r3, #16
 800cbf6:	4618      	mov	r0, r3
 800cbf8:	f001 f81a 	bl	800dc30 <xTaskRemoveFromEventList>
 800cbfc:	4603      	mov	r3, r0
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d007      	beq.n	800cc12 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800cc02:	4b55      	ldr	r3, [pc, #340]	; (800cd58 <xQueueSemaphoreTake+0x224>)
 800cc04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc08:	601a      	str	r2, [r3, #0]
 800cc0a:	f3bf 8f4f 	dsb	sy
 800cc0e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800cc12:	f002 f867 	bl	800ece4 <vPortExitCritical>
				return pdPASS;
 800cc16:	2301      	movs	r3, #1
 800cc18:	e099      	b.n	800cd4e <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cc1a:	683b      	ldr	r3, [r7, #0]
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d113      	bne.n	800cc48 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800cc20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d00c      	beq.n	800cc40 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 800cc26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc2a:	b672      	cpsid	i
 800cc2c:	f383 8811 	msr	BASEPRI, r3
 800cc30:	f3bf 8f6f 	isb	sy
 800cc34:	f3bf 8f4f 	dsb	sy
 800cc38:	b662      	cpsie	i
 800cc3a:	617b      	str	r3, [r7, #20]
}
 800cc3c:	bf00      	nop
 800cc3e:	e7fe      	b.n	800cc3e <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800cc40:	f002 f850 	bl	800ece4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800cc44:	2300      	movs	r3, #0
 800cc46:	e082      	b.n	800cd4e <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cc48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d106      	bne.n	800cc5c <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cc4e:	f107 030c 	add.w	r3, r7, #12
 800cc52:	4618      	mov	r0, r3
 800cc54:	f001 f852 	bl	800dcfc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cc58:	2301      	movs	r3, #1
 800cc5a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cc5c:	f002 f842 	bl	800ece4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cc60:	f000 fda6 	bl	800d7b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cc64:	f002 f80a 	bl	800ec7c <vPortEnterCritical>
 800cc68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc6a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cc6e:	b25b      	sxtb	r3, r3
 800cc70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cc74:	d103      	bne.n	800cc7e <xQueueSemaphoreTake+0x14a>
 800cc76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc78:	2200      	movs	r2, #0
 800cc7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cc7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cc84:	b25b      	sxtb	r3, r3
 800cc86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cc8a:	d103      	bne.n	800cc94 <xQueueSemaphoreTake+0x160>
 800cc8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc8e:	2200      	movs	r2, #0
 800cc90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cc94:	f002 f826 	bl	800ece4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cc98:	463a      	mov	r2, r7
 800cc9a:	f107 030c 	add.w	r3, r7, #12
 800cc9e:	4611      	mov	r1, r2
 800cca0:	4618      	mov	r0, r3
 800cca2:	f001 f841 	bl	800dd28 <xTaskCheckForTimeOut>
 800cca6:	4603      	mov	r3, r0
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d132      	bne.n	800cd12 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ccac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ccae:	f000 f9fa 	bl	800d0a6 <prvIsQueueEmpty>
 800ccb2:	4603      	mov	r3, r0
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d026      	beq.n	800cd06 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ccb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d109      	bne.n	800ccd4 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 800ccc0:	f001 ffdc 	bl	800ec7c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ccc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccc6:	689b      	ldr	r3, [r3, #8]
 800ccc8:	4618      	mov	r0, r3
 800ccca:	f001 f9a7 	bl	800e01c <xTaskPriorityInherit>
 800ccce:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800ccd0:	f002 f808 	bl	800ece4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ccd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccd6:	3324      	adds	r3, #36	; 0x24
 800ccd8:	683a      	ldr	r2, [r7, #0]
 800ccda:	4611      	mov	r1, r2
 800ccdc:	4618      	mov	r0, r3
 800ccde:	f000 ff53 	bl	800db88 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cce2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cce4:	f000 f98d 	bl	800d002 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800cce8:	f000 fd70 	bl	800d7cc <xTaskResumeAll>
 800ccec:	4603      	mov	r3, r0
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	f47f af66 	bne.w	800cbc0 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 800ccf4:	4b18      	ldr	r3, [pc, #96]	; (800cd58 <xQueueSemaphoreTake+0x224>)
 800ccf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ccfa:	601a      	str	r2, [r3, #0]
 800ccfc:	f3bf 8f4f 	dsb	sy
 800cd00:	f3bf 8f6f 	isb	sy
 800cd04:	e75c      	b.n	800cbc0 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800cd06:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cd08:	f000 f97b 	bl	800d002 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cd0c:	f000 fd5e 	bl	800d7cc <xTaskResumeAll>
 800cd10:	e756      	b.n	800cbc0 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800cd12:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cd14:	f000 f975 	bl	800d002 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cd18:	f000 fd58 	bl	800d7cc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cd1c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cd1e:	f000 f9c2 	bl	800d0a6 <prvIsQueueEmpty>
 800cd22:	4603      	mov	r3, r0
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	f43f af4b 	beq.w	800cbc0 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800cd2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d00d      	beq.n	800cd4c <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 800cd30:	f001 ffa4 	bl	800ec7c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800cd34:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cd36:	f000 f8bc 	bl	800ceb2 <prvGetDisinheritPriorityAfterTimeout>
 800cd3a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800cd3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd3e:	689b      	ldr	r3, [r3, #8]
 800cd40:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cd42:	4618      	mov	r0, r3
 800cd44:	f001 fa44 	bl	800e1d0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800cd48:	f001 ffcc 	bl	800ece4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800cd4c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800cd4e:	4618      	mov	r0, r3
 800cd50:	3738      	adds	r7, #56	; 0x38
 800cd52:	46bd      	mov	sp, r7
 800cd54:	bd80      	pop	{r7, pc}
 800cd56:	bf00      	nop
 800cd58:	e000ed04 	.word	0xe000ed04

0800cd5c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800cd5c:	b580      	push	{r7, lr}
 800cd5e:	b08e      	sub	sp, #56	; 0x38
 800cd60:	af00      	add	r7, sp, #0
 800cd62:	60f8      	str	r0, [r7, #12]
 800cd64:	60b9      	str	r1, [r7, #8]
 800cd66:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800cd6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d10c      	bne.n	800cd8c <xQueueReceiveFromISR+0x30>
	__asm volatile
 800cd72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd76:	b672      	cpsid	i
 800cd78:	f383 8811 	msr	BASEPRI, r3
 800cd7c:	f3bf 8f6f 	isb	sy
 800cd80:	f3bf 8f4f 	dsb	sy
 800cd84:	b662      	cpsie	i
 800cd86:	623b      	str	r3, [r7, #32]
}
 800cd88:	bf00      	nop
 800cd8a:	e7fe      	b.n	800cd8a <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cd8c:	68bb      	ldr	r3, [r7, #8]
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d103      	bne.n	800cd9a <xQueueReceiveFromISR+0x3e>
 800cd92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d101      	bne.n	800cd9e <xQueueReceiveFromISR+0x42>
 800cd9a:	2301      	movs	r3, #1
 800cd9c:	e000      	b.n	800cda0 <xQueueReceiveFromISR+0x44>
 800cd9e:	2300      	movs	r3, #0
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d10c      	bne.n	800cdbe <xQueueReceiveFromISR+0x62>
	__asm volatile
 800cda4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cda8:	b672      	cpsid	i
 800cdaa:	f383 8811 	msr	BASEPRI, r3
 800cdae:	f3bf 8f6f 	isb	sy
 800cdb2:	f3bf 8f4f 	dsb	sy
 800cdb6:	b662      	cpsie	i
 800cdb8:	61fb      	str	r3, [r7, #28]
}
 800cdba:	bf00      	nop
 800cdbc:	e7fe      	b.n	800cdbc <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cdbe:	f002 f845 	bl	800ee4c <vPortValidateInterruptPriority>
	__asm volatile
 800cdc2:	f3ef 8211 	mrs	r2, BASEPRI
 800cdc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdca:	b672      	cpsid	i
 800cdcc:	f383 8811 	msr	BASEPRI, r3
 800cdd0:	f3bf 8f6f 	isb	sy
 800cdd4:	f3bf 8f4f 	dsb	sy
 800cdd8:	b662      	cpsie	i
 800cdda:	61ba      	str	r2, [r7, #24]
 800cddc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800cdde:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cde0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cde2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cde4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cde6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cde8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d02f      	beq.n	800ce4e <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800cdee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdf0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cdf4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cdf8:	68b9      	ldr	r1, [r7, #8]
 800cdfa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cdfc:	f000 f8db 	bl	800cfb6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ce00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce02:	1e5a      	subs	r2, r3, #1
 800ce04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce06:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800ce08:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ce0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ce10:	d112      	bne.n	800ce38 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ce12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce14:	691b      	ldr	r3, [r3, #16]
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d016      	beq.n	800ce48 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ce1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce1c:	3310      	adds	r3, #16
 800ce1e:	4618      	mov	r0, r3
 800ce20:	f000 ff06 	bl	800dc30 <xTaskRemoveFromEventList>
 800ce24:	4603      	mov	r3, r0
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d00e      	beq.n	800ce48 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d00b      	beq.n	800ce48 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	2201      	movs	r2, #1
 800ce34:	601a      	str	r2, [r3, #0]
 800ce36:	e007      	b.n	800ce48 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800ce38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ce3c:	3301      	adds	r3, #1
 800ce3e:	b2db      	uxtb	r3, r3
 800ce40:	b25a      	sxtb	r2, r3
 800ce42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800ce48:	2301      	movs	r3, #1
 800ce4a:	637b      	str	r3, [r7, #52]	; 0x34
 800ce4c:	e001      	b.n	800ce52 <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 800ce4e:	2300      	movs	r3, #0
 800ce50:	637b      	str	r3, [r7, #52]	; 0x34
 800ce52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce54:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ce56:	693b      	ldr	r3, [r7, #16]
 800ce58:	f383 8811 	msr	BASEPRI, r3
}
 800ce5c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ce5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ce60:	4618      	mov	r0, r3
 800ce62:	3738      	adds	r7, #56	; 0x38
 800ce64:	46bd      	mov	sp, r7
 800ce66:	bd80      	pop	{r7, pc}

0800ce68 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800ce68:	b580      	push	{r7, lr}
 800ce6a:	b084      	sub	sp, #16
 800ce6c:	af00      	add	r7, sp, #0
 800ce6e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d10c      	bne.n	800ce94 <vQueueDelete+0x2c>
	__asm volatile
 800ce7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce7e:	b672      	cpsid	i
 800ce80:	f383 8811 	msr	BASEPRI, r3
 800ce84:	f3bf 8f6f 	isb	sy
 800ce88:	f3bf 8f4f 	dsb	sy
 800ce8c:	b662      	cpsie	i
 800ce8e:	60bb      	str	r3, [r7, #8]
}
 800ce90:	bf00      	nop
 800ce92:	e7fe      	b.n	800ce92 <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800ce94:	68f8      	ldr	r0, [r7, #12]
 800ce96:	f000 f95f 	bl	800d158 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d102      	bne.n	800ceaa <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 800cea4:	68f8      	ldr	r0, [r7, #12]
 800cea6:	f002 f8df 	bl	800f068 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800ceaa:	bf00      	nop
 800ceac:	3710      	adds	r7, #16
 800ceae:	46bd      	mov	sp, r7
 800ceb0:	bd80      	pop	{r7, pc}

0800ceb2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800ceb2:	b480      	push	{r7}
 800ceb4:	b085      	sub	sp, #20
 800ceb6:	af00      	add	r7, sp, #0
 800ceb8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d006      	beq.n	800ced0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800cecc:	60fb      	str	r3, [r7, #12]
 800cece:	e001      	b.n	800ced4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800ced0:	2300      	movs	r3, #0
 800ced2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800ced4:	68fb      	ldr	r3, [r7, #12]
	}
 800ced6:	4618      	mov	r0, r3
 800ced8:	3714      	adds	r7, #20
 800ceda:	46bd      	mov	sp, r7
 800cedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cee0:	4770      	bx	lr

0800cee2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800cee2:	b580      	push	{r7, lr}
 800cee4:	b086      	sub	sp, #24
 800cee6:	af00      	add	r7, sp, #0
 800cee8:	60f8      	str	r0, [r7, #12]
 800ceea:	60b9      	str	r1, [r7, #8]
 800ceec:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ceee:	2300      	movs	r3, #0
 800cef0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cef6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d10d      	bne.n	800cf1c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d14d      	bne.n	800cfa4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	689b      	ldr	r3, [r3, #8]
 800cf0c:	4618      	mov	r0, r3
 800cf0e:	f001 f8ed 	bl	800e0ec <xTaskPriorityDisinherit>
 800cf12:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	2200      	movs	r2, #0
 800cf18:	609a      	str	r2, [r3, #8]
 800cf1a:	e043      	b.n	800cfa4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d119      	bne.n	800cf56 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	6858      	ldr	r0, [r3, #4]
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf2a:	461a      	mov	r2, r3
 800cf2c:	68b9      	ldr	r1, [r7, #8]
 800cf2e:	f00d fb37 	bl	801a5a0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	685a      	ldr	r2, [r3, #4]
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf3a:	441a      	add	r2, r3
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	685a      	ldr	r2, [r3, #4]
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	689b      	ldr	r3, [r3, #8]
 800cf48:	429a      	cmp	r2, r3
 800cf4a:	d32b      	bcc.n	800cfa4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	681a      	ldr	r2, [r3, #0]
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	605a      	str	r2, [r3, #4]
 800cf54:	e026      	b.n	800cfa4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	68d8      	ldr	r0, [r3, #12]
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf5e:	461a      	mov	r2, r3
 800cf60:	68b9      	ldr	r1, [r7, #8]
 800cf62:	f00d fb1d 	bl	801a5a0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	68da      	ldr	r2, [r3, #12]
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf6e:	425b      	negs	r3, r3
 800cf70:	441a      	add	r2, r3
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	68da      	ldr	r2, [r3, #12]
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	429a      	cmp	r2, r3
 800cf80:	d207      	bcs.n	800cf92 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	689a      	ldr	r2, [r3, #8]
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf8a:	425b      	negs	r3, r3
 800cf8c:	441a      	add	r2, r3
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	2b02      	cmp	r3, #2
 800cf96:	d105      	bne.n	800cfa4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cf98:	693b      	ldr	r3, [r7, #16]
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d002      	beq.n	800cfa4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800cf9e:	693b      	ldr	r3, [r7, #16]
 800cfa0:	3b01      	subs	r3, #1
 800cfa2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800cfa4:	693b      	ldr	r3, [r7, #16]
 800cfa6:	1c5a      	adds	r2, r3, #1
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800cfac:	697b      	ldr	r3, [r7, #20]
}
 800cfae:	4618      	mov	r0, r3
 800cfb0:	3718      	adds	r7, #24
 800cfb2:	46bd      	mov	sp, r7
 800cfb4:	bd80      	pop	{r7, pc}

0800cfb6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800cfb6:	b580      	push	{r7, lr}
 800cfb8:	b082      	sub	sp, #8
 800cfba:	af00      	add	r7, sp, #0
 800cfbc:	6078      	str	r0, [r7, #4]
 800cfbe:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d018      	beq.n	800cffa <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	68da      	ldr	r2, [r3, #12]
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfd0:	441a      	add	r2, r3
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	68da      	ldr	r2, [r3, #12]
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	689b      	ldr	r3, [r3, #8]
 800cfde:	429a      	cmp	r2, r3
 800cfe0:	d303      	bcc.n	800cfea <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	681a      	ldr	r2, [r3, #0]
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	68d9      	ldr	r1, [r3, #12]
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cff2:	461a      	mov	r2, r3
 800cff4:	6838      	ldr	r0, [r7, #0]
 800cff6:	f00d fad3 	bl	801a5a0 <memcpy>
	}
}
 800cffa:	bf00      	nop
 800cffc:	3708      	adds	r7, #8
 800cffe:	46bd      	mov	sp, r7
 800d000:	bd80      	pop	{r7, pc}

0800d002 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d002:	b580      	push	{r7, lr}
 800d004:	b084      	sub	sp, #16
 800d006:	af00      	add	r7, sp, #0
 800d008:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d00a:	f001 fe37 	bl	800ec7c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d014:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d016:	e011      	b.n	800d03c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d012      	beq.n	800d046 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	3324      	adds	r3, #36	; 0x24
 800d024:	4618      	mov	r0, r3
 800d026:	f000 fe03 	bl	800dc30 <xTaskRemoveFromEventList>
 800d02a:	4603      	mov	r3, r0
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d001      	beq.n	800d034 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d030:	f000 fee0 	bl	800ddf4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d034:	7bfb      	ldrb	r3, [r7, #15]
 800d036:	3b01      	subs	r3, #1
 800d038:	b2db      	uxtb	r3, r3
 800d03a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d03c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d040:	2b00      	cmp	r3, #0
 800d042:	dce9      	bgt.n	800d018 <prvUnlockQueue+0x16>
 800d044:	e000      	b.n	800d048 <prvUnlockQueue+0x46>
					break;
 800d046:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	22ff      	movs	r2, #255	; 0xff
 800d04c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d050:	f001 fe48 	bl	800ece4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d054:	f001 fe12 	bl	800ec7c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d05e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d060:	e011      	b.n	800d086 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	691b      	ldr	r3, [r3, #16]
 800d066:	2b00      	cmp	r3, #0
 800d068:	d012      	beq.n	800d090 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	3310      	adds	r3, #16
 800d06e:	4618      	mov	r0, r3
 800d070:	f000 fdde 	bl	800dc30 <xTaskRemoveFromEventList>
 800d074:	4603      	mov	r3, r0
 800d076:	2b00      	cmp	r3, #0
 800d078:	d001      	beq.n	800d07e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d07a:	f000 febb 	bl	800ddf4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d07e:	7bbb      	ldrb	r3, [r7, #14]
 800d080:	3b01      	subs	r3, #1
 800d082:	b2db      	uxtb	r3, r3
 800d084:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d086:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	dce9      	bgt.n	800d062 <prvUnlockQueue+0x60>
 800d08e:	e000      	b.n	800d092 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d090:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	22ff      	movs	r2, #255	; 0xff
 800d096:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d09a:	f001 fe23 	bl	800ece4 <vPortExitCritical>
}
 800d09e:	bf00      	nop
 800d0a0:	3710      	adds	r7, #16
 800d0a2:	46bd      	mov	sp, r7
 800d0a4:	bd80      	pop	{r7, pc}

0800d0a6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d0a6:	b580      	push	{r7, lr}
 800d0a8:	b084      	sub	sp, #16
 800d0aa:	af00      	add	r7, sp, #0
 800d0ac:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d0ae:	f001 fde5 	bl	800ec7c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d102      	bne.n	800d0c0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d0ba:	2301      	movs	r3, #1
 800d0bc:	60fb      	str	r3, [r7, #12]
 800d0be:	e001      	b.n	800d0c4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d0c0:	2300      	movs	r3, #0
 800d0c2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d0c4:	f001 fe0e 	bl	800ece4 <vPortExitCritical>

	return xReturn;
 800d0c8:	68fb      	ldr	r3, [r7, #12]
}
 800d0ca:	4618      	mov	r0, r3
 800d0cc:	3710      	adds	r7, #16
 800d0ce:	46bd      	mov	sp, r7
 800d0d0:	bd80      	pop	{r7, pc}

0800d0d2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d0d2:	b580      	push	{r7, lr}
 800d0d4:	b084      	sub	sp, #16
 800d0d6:	af00      	add	r7, sp, #0
 800d0d8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d0da:	f001 fdcf 	bl	800ec7c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d0e6:	429a      	cmp	r2, r3
 800d0e8:	d102      	bne.n	800d0f0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d0ea:	2301      	movs	r3, #1
 800d0ec:	60fb      	str	r3, [r7, #12]
 800d0ee:	e001      	b.n	800d0f4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d0f0:	2300      	movs	r3, #0
 800d0f2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d0f4:	f001 fdf6 	bl	800ece4 <vPortExitCritical>

	return xReturn;
 800d0f8:	68fb      	ldr	r3, [r7, #12]
}
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	3710      	adds	r7, #16
 800d0fe:	46bd      	mov	sp, r7
 800d100:	bd80      	pop	{r7, pc}
	...

0800d104 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d104:	b480      	push	{r7}
 800d106:	b085      	sub	sp, #20
 800d108:	af00      	add	r7, sp, #0
 800d10a:	6078      	str	r0, [r7, #4]
 800d10c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d10e:	2300      	movs	r3, #0
 800d110:	60fb      	str	r3, [r7, #12]
 800d112:	e014      	b.n	800d13e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d114:	4a0f      	ldr	r2, [pc, #60]	; (800d154 <vQueueAddToRegistry+0x50>)
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d10b      	bne.n	800d138 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d120:	490c      	ldr	r1, [pc, #48]	; (800d154 <vQueueAddToRegistry+0x50>)
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	683a      	ldr	r2, [r7, #0]
 800d126:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d12a:	4a0a      	ldr	r2, [pc, #40]	; (800d154 <vQueueAddToRegistry+0x50>)
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	00db      	lsls	r3, r3, #3
 800d130:	4413      	add	r3, r2
 800d132:	687a      	ldr	r2, [r7, #4]
 800d134:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d136:	e006      	b.n	800d146 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	3301      	adds	r3, #1
 800d13c:	60fb      	str	r3, [r7, #12]
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	2b07      	cmp	r3, #7
 800d142:	d9e7      	bls.n	800d114 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d144:	bf00      	nop
 800d146:	bf00      	nop
 800d148:	3714      	adds	r7, #20
 800d14a:	46bd      	mov	sp, r7
 800d14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d150:	4770      	bx	lr
 800d152:	bf00      	nop
 800d154:	2000a1ec 	.word	0x2000a1ec

0800d158 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800d158:	b480      	push	{r7}
 800d15a:	b085      	sub	sp, #20
 800d15c:	af00      	add	r7, sp, #0
 800d15e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d160:	2300      	movs	r3, #0
 800d162:	60fb      	str	r3, [r7, #12]
 800d164:	e016      	b.n	800d194 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800d166:	4a10      	ldr	r2, [pc, #64]	; (800d1a8 <vQueueUnregisterQueue+0x50>)
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	00db      	lsls	r3, r3, #3
 800d16c:	4413      	add	r3, r2
 800d16e:	685b      	ldr	r3, [r3, #4]
 800d170:	687a      	ldr	r2, [r7, #4]
 800d172:	429a      	cmp	r2, r3
 800d174:	d10b      	bne.n	800d18e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800d176:	4a0c      	ldr	r2, [pc, #48]	; (800d1a8 <vQueueUnregisterQueue+0x50>)
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	2100      	movs	r1, #0
 800d17c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800d180:	4a09      	ldr	r2, [pc, #36]	; (800d1a8 <vQueueUnregisterQueue+0x50>)
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	00db      	lsls	r3, r3, #3
 800d186:	4413      	add	r3, r2
 800d188:	2200      	movs	r2, #0
 800d18a:	605a      	str	r2, [r3, #4]
				break;
 800d18c:	e006      	b.n	800d19c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	3301      	adds	r3, #1
 800d192:	60fb      	str	r3, [r7, #12]
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	2b07      	cmp	r3, #7
 800d198:	d9e5      	bls.n	800d166 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800d19a:	bf00      	nop
 800d19c:	bf00      	nop
 800d19e:	3714      	adds	r7, #20
 800d1a0:	46bd      	mov	sp, r7
 800d1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1a6:	4770      	bx	lr
 800d1a8:	2000a1ec 	.word	0x2000a1ec

0800d1ac <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d1ac:	b580      	push	{r7, lr}
 800d1ae:	b086      	sub	sp, #24
 800d1b0:	af00      	add	r7, sp, #0
 800d1b2:	60f8      	str	r0, [r7, #12]
 800d1b4:	60b9      	str	r1, [r7, #8]
 800d1b6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d1bc:	f001 fd5e 	bl	800ec7c <vPortEnterCritical>
 800d1c0:	697b      	ldr	r3, [r7, #20]
 800d1c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d1c6:	b25b      	sxtb	r3, r3
 800d1c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d1cc:	d103      	bne.n	800d1d6 <vQueueWaitForMessageRestricted+0x2a>
 800d1ce:	697b      	ldr	r3, [r7, #20]
 800d1d0:	2200      	movs	r2, #0
 800d1d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d1d6:	697b      	ldr	r3, [r7, #20]
 800d1d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d1dc:	b25b      	sxtb	r3, r3
 800d1de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d1e2:	d103      	bne.n	800d1ec <vQueueWaitForMessageRestricted+0x40>
 800d1e4:	697b      	ldr	r3, [r7, #20]
 800d1e6:	2200      	movs	r2, #0
 800d1e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d1ec:	f001 fd7a 	bl	800ece4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d1f0:	697b      	ldr	r3, [r7, #20]
 800d1f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d106      	bne.n	800d206 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d1f8:	697b      	ldr	r3, [r7, #20]
 800d1fa:	3324      	adds	r3, #36	; 0x24
 800d1fc:	687a      	ldr	r2, [r7, #4]
 800d1fe:	68b9      	ldr	r1, [r7, #8]
 800d200:	4618      	mov	r0, r3
 800d202:	f000 fce7 	bl	800dbd4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d206:	6978      	ldr	r0, [r7, #20]
 800d208:	f7ff fefb 	bl	800d002 <prvUnlockQueue>
	}
 800d20c:	bf00      	nop
 800d20e:	3718      	adds	r7, #24
 800d210:	46bd      	mov	sp, r7
 800d212:	bd80      	pop	{r7, pc}

0800d214 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d214:	b580      	push	{r7, lr}
 800d216:	b08e      	sub	sp, #56	; 0x38
 800d218:	af04      	add	r7, sp, #16
 800d21a:	60f8      	str	r0, [r7, #12]
 800d21c:	60b9      	str	r1, [r7, #8]
 800d21e:	607a      	str	r2, [r7, #4]
 800d220:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d224:	2b00      	cmp	r3, #0
 800d226:	d10c      	bne.n	800d242 <xTaskCreateStatic+0x2e>
	__asm volatile
 800d228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d22c:	b672      	cpsid	i
 800d22e:	f383 8811 	msr	BASEPRI, r3
 800d232:	f3bf 8f6f 	isb	sy
 800d236:	f3bf 8f4f 	dsb	sy
 800d23a:	b662      	cpsie	i
 800d23c:	623b      	str	r3, [r7, #32]
}
 800d23e:	bf00      	nop
 800d240:	e7fe      	b.n	800d240 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800d242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d244:	2b00      	cmp	r3, #0
 800d246:	d10c      	bne.n	800d262 <xTaskCreateStatic+0x4e>
	__asm volatile
 800d248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d24c:	b672      	cpsid	i
 800d24e:	f383 8811 	msr	BASEPRI, r3
 800d252:	f3bf 8f6f 	isb	sy
 800d256:	f3bf 8f4f 	dsb	sy
 800d25a:	b662      	cpsie	i
 800d25c:	61fb      	str	r3, [r7, #28]
}
 800d25e:	bf00      	nop
 800d260:	e7fe      	b.n	800d260 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d262:	235c      	movs	r3, #92	; 0x5c
 800d264:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d266:	693b      	ldr	r3, [r7, #16]
 800d268:	2b5c      	cmp	r3, #92	; 0x5c
 800d26a:	d00c      	beq.n	800d286 <xTaskCreateStatic+0x72>
	__asm volatile
 800d26c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d270:	b672      	cpsid	i
 800d272:	f383 8811 	msr	BASEPRI, r3
 800d276:	f3bf 8f6f 	isb	sy
 800d27a:	f3bf 8f4f 	dsb	sy
 800d27e:	b662      	cpsie	i
 800d280:	61bb      	str	r3, [r7, #24]
}
 800d282:	bf00      	nop
 800d284:	e7fe      	b.n	800d284 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d286:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d01e      	beq.n	800d2cc <xTaskCreateStatic+0xb8>
 800d28e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d290:	2b00      	cmp	r3, #0
 800d292:	d01b      	beq.n	800d2cc <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d296:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d29a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d29c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d29e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2a0:	2202      	movs	r2, #2
 800d2a2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d2a6:	2300      	movs	r3, #0
 800d2a8:	9303      	str	r3, [sp, #12]
 800d2aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2ac:	9302      	str	r3, [sp, #8]
 800d2ae:	f107 0314 	add.w	r3, r7, #20
 800d2b2:	9301      	str	r3, [sp, #4]
 800d2b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2b6:	9300      	str	r3, [sp, #0]
 800d2b8:	683b      	ldr	r3, [r7, #0]
 800d2ba:	687a      	ldr	r2, [r7, #4]
 800d2bc:	68b9      	ldr	r1, [r7, #8]
 800d2be:	68f8      	ldr	r0, [r7, #12]
 800d2c0:	f000 f850 	bl	800d364 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d2c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d2c6:	f000 f8df 	bl	800d488 <prvAddNewTaskToReadyList>
 800d2ca:	e001      	b.n	800d2d0 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800d2cc:	2300      	movs	r3, #0
 800d2ce:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d2d0:	697b      	ldr	r3, [r7, #20]
	}
 800d2d2:	4618      	mov	r0, r3
 800d2d4:	3728      	adds	r7, #40	; 0x28
 800d2d6:	46bd      	mov	sp, r7
 800d2d8:	bd80      	pop	{r7, pc}

0800d2da <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d2da:	b580      	push	{r7, lr}
 800d2dc:	b08c      	sub	sp, #48	; 0x30
 800d2de:	af04      	add	r7, sp, #16
 800d2e0:	60f8      	str	r0, [r7, #12]
 800d2e2:	60b9      	str	r1, [r7, #8]
 800d2e4:	603b      	str	r3, [r7, #0]
 800d2e6:	4613      	mov	r3, r2
 800d2e8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d2ea:	88fb      	ldrh	r3, [r7, #6]
 800d2ec:	009b      	lsls	r3, r3, #2
 800d2ee:	4618      	mov	r0, r3
 800d2f0:	f001 fdf0 	bl	800eed4 <pvPortMalloc>
 800d2f4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d2f6:	697b      	ldr	r3, [r7, #20]
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d00e      	beq.n	800d31a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d2fc:	205c      	movs	r0, #92	; 0x5c
 800d2fe:	f001 fde9 	bl	800eed4 <pvPortMalloc>
 800d302:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d304:	69fb      	ldr	r3, [r7, #28]
 800d306:	2b00      	cmp	r3, #0
 800d308:	d003      	beq.n	800d312 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d30a:	69fb      	ldr	r3, [r7, #28]
 800d30c:	697a      	ldr	r2, [r7, #20]
 800d30e:	631a      	str	r2, [r3, #48]	; 0x30
 800d310:	e005      	b.n	800d31e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d312:	6978      	ldr	r0, [r7, #20]
 800d314:	f001 fea8 	bl	800f068 <vPortFree>
 800d318:	e001      	b.n	800d31e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d31a:	2300      	movs	r3, #0
 800d31c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d31e:	69fb      	ldr	r3, [r7, #28]
 800d320:	2b00      	cmp	r3, #0
 800d322:	d017      	beq.n	800d354 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d324:	69fb      	ldr	r3, [r7, #28]
 800d326:	2200      	movs	r2, #0
 800d328:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d32c:	88fa      	ldrh	r2, [r7, #6]
 800d32e:	2300      	movs	r3, #0
 800d330:	9303      	str	r3, [sp, #12]
 800d332:	69fb      	ldr	r3, [r7, #28]
 800d334:	9302      	str	r3, [sp, #8]
 800d336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d338:	9301      	str	r3, [sp, #4]
 800d33a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d33c:	9300      	str	r3, [sp, #0]
 800d33e:	683b      	ldr	r3, [r7, #0]
 800d340:	68b9      	ldr	r1, [r7, #8]
 800d342:	68f8      	ldr	r0, [r7, #12]
 800d344:	f000 f80e 	bl	800d364 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d348:	69f8      	ldr	r0, [r7, #28]
 800d34a:	f000 f89d 	bl	800d488 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d34e:	2301      	movs	r3, #1
 800d350:	61bb      	str	r3, [r7, #24]
 800d352:	e002      	b.n	800d35a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d354:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d358:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d35a:	69bb      	ldr	r3, [r7, #24]
	}
 800d35c:	4618      	mov	r0, r3
 800d35e:	3720      	adds	r7, #32
 800d360:	46bd      	mov	sp, r7
 800d362:	bd80      	pop	{r7, pc}

0800d364 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d364:	b580      	push	{r7, lr}
 800d366:	b088      	sub	sp, #32
 800d368:	af00      	add	r7, sp, #0
 800d36a:	60f8      	str	r0, [r7, #12]
 800d36c:	60b9      	str	r1, [r7, #8]
 800d36e:	607a      	str	r2, [r7, #4]
 800d370:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d374:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	009b      	lsls	r3, r3, #2
 800d37a:	461a      	mov	r2, r3
 800d37c:	21a5      	movs	r1, #165	; 0xa5
 800d37e:	f00d f91d 	bl	801a5bc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d384:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d386:	6879      	ldr	r1, [r7, #4]
 800d388:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800d38c:	440b      	add	r3, r1
 800d38e:	009b      	lsls	r3, r3, #2
 800d390:	4413      	add	r3, r2
 800d392:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d394:	69bb      	ldr	r3, [r7, #24]
 800d396:	f023 0307 	bic.w	r3, r3, #7
 800d39a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d39c:	69bb      	ldr	r3, [r7, #24]
 800d39e:	f003 0307 	and.w	r3, r3, #7
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d00c      	beq.n	800d3c0 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800d3a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3aa:	b672      	cpsid	i
 800d3ac:	f383 8811 	msr	BASEPRI, r3
 800d3b0:	f3bf 8f6f 	isb	sy
 800d3b4:	f3bf 8f4f 	dsb	sy
 800d3b8:	b662      	cpsie	i
 800d3ba:	617b      	str	r3, [r7, #20]
}
 800d3bc:	bf00      	nop
 800d3be:	e7fe      	b.n	800d3be <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d3c0:	68bb      	ldr	r3, [r7, #8]
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d01f      	beq.n	800d406 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d3c6:	2300      	movs	r3, #0
 800d3c8:	61fb      	str	r3, [r7, #28]
 800d3ca:	e012      	b.n	800d3f2 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d3cc:	68ba      	ldr	r2, [r7, #8]
 800d3ce:	69fb      	ldr	r3, [r7, #28]
 800d3d0:	4413      	add	r3, r2
 800d3d2:	7819      	ldrb	r1, [r3, #0]
 800d3d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d3d6:	69fb      	ldr	r3, [r7, #28]
 800d3d8:	4413      	add	r3, r2
 800d3da:	3334      	adds	r3, #52	; 0x34
 800d3dc:	460a      	mov	r2, r1
 800d3de:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d3e0:	68ba      	ldr	r2, [r7, #8]
 800d3e2:	69fb      	ldr	r3, [r7, #28]
 800d3e4:	4413      	add	r3, r2
 800d3e6:	781b      	ldrb	r3, [r3, #0]
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d006      	beq.n	800d3fa <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d3ec:	69fb      	ldr	r3, [r7, #28]
 800d3ee:	3301      	adds	r3, #1
 800d3f0:	61fb      	str	r3, [r7, #28]
 800d3f2:	69fb      	ldr	r3, [r7, #28]
 800d3f4:	2b0f      	cmp	r3, #15
 800d3f6:	d9e9      	bls.n	800d3cc <prvInitialiseNewTask+0x68>
 800d3f8:	e000      	b.n	800d3fc <prvInitialiseNewTask+0x98>
			{
				break;
 800d3fa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d3fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3fe:	2200      	movs	r2, #0
 800d400:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d404:	e003      	b.n	800d40e <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d408:	2200      	movs	r2, #0
 800d40a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d40e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d410:	2b37      	cmp	r3, #55	; 0x37
 800d412:	d901      	bls.n	800d418 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d414:	2337      	movs	r3, #55	; 0x37
 800d416:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d41a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d41c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d41e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d420:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d422:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800d424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d426:	2200      	movs	r2, #0
 800d428:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d42a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d42c:	3304      	adds	r3, #4
 800d42e:	4618      	mov	r0, r3
 800d430:	f7fe fd4c 	bl	800becc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d436:	3318      	adds	r3, #24
 800d438:	4618      	mov	r0, r3
 800d43a:	f7fe fd47 	bl	800becc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d43e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d440:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d442:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d446:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d44a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d44c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d44e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d450:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d452:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d456:	2200      	movs	r2, #0
 800d458:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d45a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d45c:	2200      	movs	r2, #0
 800d45e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d462:	683a      	ldr	r2, [r7, #0]
 800d464:	68f9      	ldr	r1, [r7, #12]
 800d466:	69b8      	ldr	r0, [r7, #24]
 800d468:	f001 fafc 	bl	800ea64 <pxPortInitialiseStack>
 800d46c:	4602      	mov	r2, r0
 800d46e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d470:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d474:	2b00      	cmp	r3, #0
 800d476:	d002      	beq.n	800d47e <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d47a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d47c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d47e:	bf00      	nop
 800d480:	3720      	adds	r7, #32
 800d482:	46bd      	mov	sp, r7
 800d484:	bd80      	pop	{r7, pc}
	...

0800d488 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d488:	b580      	push	{r7, lr}
 800d48a:	b082      	sub	sp, #8
 800d48c:	af00      	add	r7, sp, #0
 800d48e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d490:	f001 fbf4 	bl	800ec7c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d494:	4b2d      	ldr	r3, [pc, #180]	; (800d54c <prvAddNewTaskToReadyList+0xc4>)
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	3301      	adds	r3, #1
 800d49a:	4a2c      	ldr	r2, [pc, #176]	; (800d54c <prvAddNewTaskToReadyList+0xc4>)
 800d49c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d49e:	4b2c      	ldr	r3, [pc, #176]	; (800d550 <prvAddNewTaskToReadyList+0xc8>)
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d109      	bne.n	800d4ba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d4a6:	4a2a      	ldr	r2, [pc, #168]	; (800d550 <prvAddNewTaskToReadyList+0xc8>)
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d4ac:	4b27      	ldr	r3, [pc, #156]	; (800d54c <prvAddNewTaskToReadyList+0xc4>)
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	2b01      	cmp	r3, #1
 800d4b2:	d110      	bne.n	800d4d6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d4b4:	f000 fcc4 	bl	800de40 <prvInitialiseTaskLists>
 800d4b8:	e00d      	b.n	800d4d6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d4ba:	4b26      	ldr	r3, [pc, #152]	; (800d554 <prvAddNewTaskToReadyList+0xcc>)
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d109      	bne.n	800d4d6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d4c2:	4b23      	ldr	r3, [pc, #140]	; (800d550 <prvAddNewTaskToReadyList+0xc8>)
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4cc:	429a      	cmp	r2, r3
 800d4ce:	d802      	bhi.n	800d4d6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d4d0:	4a1f      	ldr	r2, [pc, #124]	; (800d550 <prvAddNewTaskToReadyList+0xc8>)
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d4d6:	4b20      	ldr	r3, [pc, #128]	; (800d558 <prvAddNewTaskToReadyList+0xd0>)
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	3301      	adds	r3, #1
 800d4dc:	4a1e      	ldr	r2, [pc, #120]	; (800d558 <prvAddNewTaskToReadyList+0xd0>)
 800d4de:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d4e0:	4b1d      	ldr	r3, [pc, #116]	; (800d558 <prvAddNewTaskToReadyList+0xd0>)
 800d4e2:	681a      	ldr	r2, [r3, #0]
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4ec:	4b1b      	ldr	r3, [pc, #108]	; (800d55c <prvAddNewTaskToReadyList+0xd4>)
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	429a      	cmp	r2, r3
 800d4f2:	d903      	bls.n	800d4fc <prvAddNewTaskToReadyList+0x74>
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4f8:	4a18      	ldr	r2, [pc, #96]	; (800d55c <prvAddNewTaskToReadyList+0xd4>)
 800d4fa:	6013      	str	r3, [r2, #0]
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d500:	4613      	mov	r3, r2
 800d502:	009b      	lsls	r3, r3, #2
 800d504:	4413      	add	r3, r2
 800d506:	009b      	lsls	r3, r3, #2
 800d508:	4a15      	ldr	r2, [pc, #84]	; (800d560 <prvAddNewTaskToReadyList+0xd8>)
 800d50a:	441a      	add	r2, r3
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	3304      	adds	r3, #4
 800d510:	4619      	mov	r1, r3
 800d512:	4610      	mov	r0, r2
 800d514:	f7fe fce7 	bl	800bee6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d518:	f001 fbe4 	bl	800ece4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d51c:	4b0d      	ldr	r3, [pc, #52]	; (800d554 <prvAddNewTaskToReadyList+0xcc>)
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	2b00      	cmp	r3, #0
 800d522:	d00e      	beq.n	800d542 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d524:	4b0a      	ldr	r3, [pc, #40]	; (800d550 <prvAddNewTaskToReadyList+0xc8>)
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d52e:	429a      	cmp	r2, r3
 800d530:	d207      	bcs.n	800d542 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d532:	4b0c      	ldr	r3, [pc, #48]	; (800d564 <prvAddNewTaskToReadyList+0xdc>)
 800d534:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d538:	601a      	str	r2, [r3, #0]
 800d53a:	f3bf 8f4f 	dsb	sy
 800d53e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d542:	bf00      	nop
 800d544:	3708      	adds	r7, #8
 800d546:	46bd      	mov	sp, r7
 800d548:	bd80      	pop	{r7, pc}
 800d54a:	bf00      	nop
 800d54c:	2000a700 	.word	0x2000a700
 800d550:	2000a22c 	.word	0x2000a22c
 800d554:	2000a70c 	.word	0x2000a70c
 800d558:	2000a71c 	.word	0x2000a71c
 800d55c:	2000a708 	.word	0x2000a708
 800d560:	2000a230 	.word	0x2000a230
 800d564:	e000ed04 	.word	0xe000ed04

0800d568 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800d568:	b580      	push	{r7, lr}
 800d56a:	b08a      	sub	sp, #40	; 0x28
 800d56c:	af00      	add	r7, sp, #0
 800d56e:	6078      	str	r0, [r7, #4]
 800d570:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800d572:	2300      	movs	r3, #0
 800d574:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d10c      	bne.n	800d596 <vTaskDelayUntil+0x2e>
	__asm volatile
 800d57c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d580:	b672      	cpsid	i
 800d582:	f383 8811 	msr	BASEPRI, r3
 800d586:	f3bf 8f6f 	isb	sy
 800d58a:	f3bf 8f4f 	dsb	sy
 800d58e:	b662      	cpsie	i
 800d590:	617b      	str	r3, [r7, #20]
}
 800d592:	bf00      	nop
 800d594:	e7fe      	b.n	800d594 <vTaskDelayUntil+0x2c>
		configASSERT( ( xTimeIncrement > 0U ) );
 800d596:	683b      	ldr	r3, [r7, #0]
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d10c      	bne.n	800d5b6 <vTaskDelayUntil+0x4e>
	__asm volatile
 800d59c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5a0:	b672      	cpsid	i
 800d5a2:	f383 8811 	msr	BASEPRI, r3
 800d5a6:	f3bf 8f6f 	isb	sy
 800d5aa:	f3bf 8f4f 	dsb	sy
 800d5ae:	b662      	cpsie	i
 800d5b0:	613b      	str	r3, [r7, #16]
}
 800d5b2:	bf00      	nop
 800d5b4:	e7fe      	b.n	800d5b4 <vTaskDelayUntil+0x4c>
		configASSERT( uxSchedulerSuspended == 0 );
 800d5b6:	4b2b      	ldr	r3, [pc, #172]	; (800d664 <vTaskDelayUntil+0xfc>)
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d00c      	beq.n	800d5d8 <vTaskDelayUntil+0x70>
	__asm volatile
 800d5be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5c2:	b672      	cpsid	i
 800d5c4:	f383 8811 	msr	BASEPRI, r3
 800d5c8:	f3bf 8f6f 	isb	sy
 800d5cc:	f3bf 8f4f 	dsb	sy
 800d5d0:	b662      	cpsie	i
 800d5d2:	60fb      	str	r3, [r7, #12]
}
 800d5d4:	bf00      	nop
 800d5d6:	e7fe      	b.n	800d5d6 <vTaskDelayUntil+0x6e>

		vTaskSuspendAll();
 800d5d8:	f000 f8ea 	bl	800d7b0 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800d5dc:	4b22      	ldr	r3, [pc, #136]	; (800d668 <vTaskDelayUntil+0x100>)
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	683a      	ldr	r2, [r7, #0]
 800d5e8:	4413      	add	r3, r2
 800d5ea:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	6a3a      	ldr	r2, [r7, #32]
 800d5f2:	429a      	cmp	r2, r3
 800d5f4:	d20b      	bcs.n	800d60e <vTaskDelayUntil+0xa6>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	69fa      	ldr	r2, [r7, #28]
 800d5fc:	429a      	cmp	r2, r3
 800d5fe:	d211      	bcs.n	800d624 <vTaskDelayUntil+0xbc>
 800d600:	69fa      	ldr	r2, [r7, #28]
 800d602:	6a3b      	ldr	r3, [r7, #32]
 800d604:	429a      	cmp	r2, r3
 800d606:	d90d      	bls.n	800d624 <vTaskDelayUntil+0xbc>
				{
					xShouldDelay = pdTRUE;
 800d608:	2301      	movs	r3, #1
 800d60a:	627b      	str	r3, [r7, #36]	; 0x24
 800d60c:	e00a      	b.n	800d624 <vTaskDelayUntil+0xbc>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	69fa      	ldr	r2, [r7, #28]
 800d614:	429a      	cmp	r2, r3
 800d616:	d303      	bcc.n	800d620 <vTaskDelayUntil+0xb8>
 800d618:	69fa      	ldr	r2, [r7, #28]
 800d61a:	6a3b      	ldr	r3, [r7, #32]
 800d61c:	429a      	cmp	r2, r3
 800d61e:	d901      	bls.n	800d624 <vTaskDelayUntil+0xbc>
				{
					xShouldDelay = pdTRUE;
 800d620:	2301      	movs	r3, #1
 800d622:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	69fa      	ldr	r2, [r7, #28]
 800d628:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800d62a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d006      	beq.n	800d63e <vTaskDelayUntil+0xd6>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800d630:	69fa      	ldr	r2, [r7, #28]
 800d632:	6a3b      	ldr	r3, [r7, #32]
 800d634:	1ad3      	subs	r3, r2, r3
 800d636:	2100      	movs	r1, #0
 800d638:	4618      	mov	r0, r3
 800d63a:	f000 fe63 	bl	800e304 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800d63e:	f000 f8c5 	bl	800d7cc <xTaskResumeAll>
 800d642:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d644:	69bb      	ldr	r3, [r7, #24]
 800d646:	2b00      	cmp	r3, #0
 800d648:	d107      	bne.n	800d65a <vTaskDelayUntil+0xf2>
		{
			portYIELD_WITHIN_API();
 800d64a:	4b08      	ldr	r3, [pc, #32]	; (800d66c <vTaskDelayUntil+0x104>)
 800d64c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d650:	601a      	str	r2, [r3, #0]
 800d652:	f3bf 8f4f 	dsb	sy
 800d656:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d65a:	bf00      	nop
 800d65c:	3728      	adds	r7, #40	; 0x28
 800d65e:	46bd      	mov	sp, r7
 800d660:	bd80      	pop	{r7, pc}
 800d662:	bf00      	nop
 800d664:	2000a728 	.word	0x2000a728
 800d668:	2000a704 	.word	0x2000a704
 800d66c:	e000ed04 	.word	0xe000ed04

0800d670 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d670:	b580      	push	{r7, lr}
 800d672:	b084      	sub	sp, #16
 800d674:	af00      	add	r7, sp, #0
 800d676:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d678:	2300      	movs	r3, #0
 800d67a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d019      	beq.n	800d6b6 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d682:	4b14      	ldr	r3, [pc, #80]	; (800d6d4 <vTaskDelay+0x64>)
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	2b00      	cmp	r3, #0
 800d688:	d00c      	beq.n	800d6a4 <vTaskDelay+0x34>
	__asm volatile
 800d68a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d68e:	b672      	cpsid	i
 800d690:	f383 8811 	msr	BASEPRI, r3
 800d694:	f3bf 8f6f 	isb	sy
 800d698:	f3bf 8f4f 	dsb	sy
 800d69c:	b662      	cpsie	i
 800d69e:	60bb      	str	r3, [r7, #8]
}
 800d6a0:	bf00      	nop
 800d6a2:	e7fe      	b.n	800d6a2 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800d6a4:	f000 f884 	bl	800d7b0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d6a8:	2100      	movs	r1, #0
 800d6aa:	6878      	ldr	r0, [r7, #4]
 800d6ac:	f000 fe2a 	bl	800e304 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d6b0:	f000 f88c 	bl	800d7cc <xTaskResumeAll>
 800d6b4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d107      	bne.n	800d6cc <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800d6bc:	4b06      	ldr	r3, [pc, #24]	; (800d6d8 <vTaskDelay+0x68>)
 800d6be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d6c2:	601a      	str	r2, [r3, #0]
 800d6c4:	f3bf 8f4f 	dsb	sy
 800d6c8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d6cc:	bf00      	nop
 800d6ce:	3710      	adds	r7, #16
 800d6d0:	46bd      	mov	sp, r7
 800d6d2:	bd80      	pop	{r7, pc}
 800d6d4:	2000a728 	.word	0x2000a728
 800d6d8:	e000ed04 	.word	0xe000ed04

0800d6dc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d6dc:	b580      	push	{r7, lr}
 800d6de:	b08a      	sub	sp, #40	; 0x28
 800d6e0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d6e2:	2300      	movs	r3, #0
 800d6e4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d6e6:	2300      	movs	r3, #0
 800d6e8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d6ea:	463a      	mov	r2, r7
 800d6ec:	1d39      	adds	r1, r7, #4
 800d6ee:	f107 0308 	add.w	r3, r7, #8
 800d6f2:	4618      	mov	r0, r3
 800d6f4:	f7fe fb96 	bl	800be24 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d6f8:	6839      	ldr	r1, [r7, #0]
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	68ba      	ldr	r2, [r7, #8]
 800d6fe:	9202      	str	r2, [sp, #8]
 800d700:	9301      	str	r3, [sp, #4]
 800d702:	2300      	movs	r3, #0
 800d704:	9300      	str	r3, [sp, #0]
 800d706:	2300      	movs	r3, #0
 800d708:	460a      	mov	r2, r1
 800d70a:	4923      	ldr	r1, [pc, #140]	; (800d798 <vTaskStartScheduler+0xbc>)
 800d70c:	4823      	ldr	r0, [pc, #140]	; (800d79c <vTaskStartScheduler+0xc0>)
 800d70e:	f7ff fd81 	bl	800d214 <xTaskCreateStatic>
 800d712:	4603      	mov	r3, r0
 800d714:	4a22      	ldr	r2, [pc, #136]	; (800d7a0 <vTaskStartScheduler+0xc4>)
 800d716:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d718:	4b21      	ldr	r3, [pc, #132]	; (800d7a0 <vTaskStartScheduler+0xc4>)
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d002      	beq.n	800d726 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d720:	2301      	movs	r3, #1
 800d722:	617b      	str	r3, [r7, #20]
 800d724:	e001      	b.n	800d72a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d726:	2300      	movs	r3, #0
 800d728:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d72a:	697b      	ldr	r3, [r7, #20]
 800d72c:	2b01      	cmp	r3, #1
 800d72e:	d102      	bne.n	800d736 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800d730:	f000 fe3c 	bl	800e3ac <xTimerCreateTimerTask>
 800d734:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d736:	697b      	ldr	r3, [r7, #20]
 800d738:	2b01      	cmp	r3, #1
 800d73a:	d118      	bne.n	800d76e <vTaskStartScheduler+0x92>
	__asm volatile
 800d73c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d740:	b672      	cpsid	i
 800d742:	f383 8811 	msr	BASEPRI, r3
 800d746:	f3bf 8f6f 	isb	sy
 800d74a:	f3bf 8f4f 	dsb	sy
 800d74e:	b662      	cpsie	i
 800d750:	613b      	str	r3, [r7, #16]
}
 800d752:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d754:	4b13      	ldr	r3, [pc, #76]	; (800d7a4 <vTaskStartScheduler+0xc8>)
 800d756:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d75a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d75c:	4b12      	ldr	r3, [pc, #72]	; (800d7a8 <vTaskStartScheduler+0xcc>)
 800d75e:	2201      	movs	r2, #1
 800d760:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d762:	4b12      	ldr	r3, [pc, #72]	; (800d7ac <vTaskStartScheduler+0xd0>)
 800d764:	2200      	movs	r2, #0
 800d766:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d768:	f001 fa0a 	bl	800eb80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d76c:	e010      	b.n	800d790 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d76e:	697b      	ldr	r3, [r7, #20]
 800d770:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d774:	d10c      	bne.n	800d790 <vTaskStartScheduler+0xb4>
	__asm volatile
 800d776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d77a:	b672      	cpsid	i
 800d77c:	f383 8811 	msr	BASEPRI, r3
 800d780:	f3bf 8f6f 	isb	sy
 800d784:	f3bf 8f4f 	dsb	sy
 800d788:	b662      	cpsie	i
 800d78a:	60fb      	str	r3, [r7, #12]
}
 800d78c:	bf00      	nop
 800d78e:	e7fe      	b.n	800d78e <vTaskStartScheduler+0xb2>
}
 800d790:	bf00      	nop
 800d792:	3718      	adds	r7, #24
 800d794:	46bd      	mov	sp, r7
 800d796:	bd80      	pop	{r7, pc}
 800d798:	0801ba8c 	.word	0x0801ba8c
 800d79c:	0800de0d 	.word	0x0800de0d
 800d7a0:	2000a724 	.word	0x2000a724
 800d7a4:	2000a720 	.word	0x2000a720
 800d7a8:	2000a70c 	.word	0x2000a70c
 800d7ac:	2000a704 	.word	0x2000a704

0800d7b0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d7b0:	b480      	push	{r7}
 800d7b2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800d7b4:	4b04      	ldr	r3, [pc, #16]	; (800d7c8 <vTaskSuspendAll+0x18>)
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	3301      	adds	r3, #1
 800d7ba:	4a03      	ldr	r2, [pc, #12]	; (800d7c8 <vTaskSuspendAll+0x18>)
 800d7bc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800d7be:	bf00      	nop
 800d7c0:	46bd      	mov	sp, r7
 800d7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c6:	4770      	bx	lr
 800d7c8:	2000a728 	.word	0x2000a728

0800d7cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d7cc:	b580      	push	{r7, lr}
 800d7ce:	b084      	sub	sp, #16
 800d7d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d7d2:	2300      	movs	r3, #0
 800d7d4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d7d6:	2300      	movs	r3, #0
 800d7d8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d7da:	4b43      	ldr	r3, [pc, #268]	; (800d8e8 <xTaskResumeAll+0x11c>)
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d10c      	bne.n	800d7fc <xTaskResumeAll+0x30>
	__asm volatile
 800d7e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7e6:	b672      	cpsid	i
 800d7e8:	f383 8811 	msr	BASEPRI, r3
 800d7ec:	f3bf 8f6f 	isb	sy
 800d7f0:	f3bf 8f4f 	dsb	sy
 800d7f4:	b662      	cpsie	i
 800d7f6:	603b      	str	r3, [r7, #0]
}
 800d7f8:	bf00      	nop
 800d7fa:	e7fe      	b.n	800d7fa <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d7fc:	f001 fa3e 	bl	800ec7c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d800:	4b39      	ldr	r3, [pc, #228]	; (800d8e8 <xTaskResumeAll+0x11c>)
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	3b01      	subs	r3, #1
 800d806:	4a38      	ldr	r2, [pc, #224]	; (800d8e8 <xTaskResumeAll+0x11c>)
 800d808:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d80a:	4b37      	ldr	r3, [pc, #220]	; (800d8e8 <xTaskResumeAll+0x11c>)
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d162      	bne.n	800d8d8 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d812:	4b36      	ldr	r3, [pc, #216]	; (800d8ec <xTaskResumeAll+0x120>)
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	2b00      	cmp	r3, #0
 800d818:	d05e      	beq.n	800d8d8 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d81a:	e02f      	b.n	800d87c <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d81c:	4b34      	ldr	r3, [pc, #208]	; (800d8f0 <xTaskResumeAll+0x124>)
 800d81e:	68db      	ldr	r3, [r3, #12]
 800d820:	68db      	ldr	r3, [r3, #12]
 800d822:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	3318      	adds	r3, #24
 800d828:	4618      	mov	r0, r3
 800d82a:	f7fe fbb9 	bl	800bfa0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	3304      	adds	r3, #4
 800d832:	4618      	mov	r0, r3
 800d834:	f7fe fbb4 	bl	800bfa0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d83c:	4b2d      	ldr	r3, [pc, #180]	; (800d8f4 <xTaskResumeAll+0x128>)
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	429a      	cmp	r2, r3
 800d842:	d903      	bls.n	800d84c <xTaskResumeAll+0x80>
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d848:	4a2a      	ldr	r2, [pc, #168]	; (800d8f4 <xTaskResumeAll+0x128>)
 800d84a:	6013      	str	r3, [r2, #0]
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d850:	4613      	mov	r3, r2
 800d852:	009b      	lsls	r3, r3, #2
 800d854:	4413      	add	r3, r2
 800d856:	009b      	lsls	r3, r3, #2
 800d858:	4a27      	ldr	r2, [pc, #156]	; (800d8f8 <xTaskResumeAll+0x12c>)
 800d85a:	441a      	add	r2, r3
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	3304      	adds	r3, #4
 800d860:	4619      	mov	r1, r3
 800d862:	4610      	mov	r0, r2
 800d864:	f7fe fb3f 	bl	800bee6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d86c:	4b23      	ldr	r3, [pc, #140]	; (800d8fc <xTaskResumeAll+0x130>)
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d872:	429a      	cmp	r2, r3
 800d874:	d302      	bcc.n	800d87c <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800d876:	4b22      	ldr	r3, [pc, #136]	; (800d900 <xTaskResumeAll+0x134>)
 800d878:	2201      	movs	r2, #1
 800d87a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d87c:	4b1c      	ldr	r3, [pc, #112]	; (800d8f0 <xTaskResumeAll+0x124>)
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	2b00      	cmp	r3, #0
 800d882:	d1cb      	bne.n	800d81c <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	2b00      	cmp	r3, #0
 800d888:	d001      	beq.n	800d88e <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d88a:	f000 fb79 	bl	800df80 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800d88e:	4b1d      	ldr	r3, [pc, #116]	; (800d904 <xTaskResumeAll+0x138>)
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	2b00      	cmp	r3, #0
 800d898:	d010      	beq.n	800d8bc <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d89a:	f000 f859 	bl	800d950 <xTaskIncrementTick>
 800d89e:	4603      	mov	r3, r0
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d002      	beq.n	800d8aa <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800d8a4:	4b16      	ldr	r3, [pc, #88]	; (800d900 <xTaskResumeAll+0x134>)
 800d8a6:	2201      	movs	r2, #1
 800d8a8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	3b01      	subs	r3, #1
 800d8ae:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d1f1      	bne.n	800d89a <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800d8b6:	4b13      	ldr	r3, [pc, #76]	; (800d904 <xTaskResumeAll+0x138>)
 800d8b8:	2200      	movs	r2, #0
 800d8ba:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d8bc:	4b10      	ldr	r3, [pc, #64]	; (800d900 <xTaskResumeAll+0x134>)
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d009      	beq.n	800d8d8 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d8c4:	2301      	movs	r3, #1
 800d8c6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d8c8:	4b0f      	ldr	r3, [pc, #60]	; (800d908 <xTaskResumeAll+0x13c>)
 800d8ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d8ce:	601a      	str	r2, [r3, #0]
 800d8d0:	f3bf 8f4f 	dsb	sy
 800d8d4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d8d8:	f001 fa04 	bl	800ece4 <vPortExitCritical>

	return xAlreadyYielded;
 800d8dc:	68bb      	ldr	r3, [r7, #8]
}
 800d8de:	4618      	mov	r0, r3
 800d8e0:	3710      	adds	r7, #16
 800d8e2:	46bd      	mov	sp, r7
 800d8e4:	bd80      	pop	{r7, pc}
 800d8e6:	bf00      	nop
 800d8e8:	2000a728 	.word	0x2000a728
 800d8ec:	2000a700 	.word	0x2000a700
 800d8f0:	2000a6c0 	.word	0x2000a6c0
 800d8f4:	2000a708 	.word	0x2000a708
 800d8f8:	2000a230 	.word	0x2000a230
 800d8fc:	2000a22c 	.word	0x2000a22c
 800d900:	2000a714 	.word	0x2000a714
 800d904:	2000a710 	.word	0x2000a710
 800d908:	e000ed04 	.word	0xe000ed04

0800d90c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d90c:	b480      	push	{r7}
 800d90e:	b083      	sub	sp, #12
 800d910:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d912:	4b05      	ldr	r3, [pc, #20]	; (800d928 <xTaskGetTickCount+0x1c>)
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d918:	687b      	ldr	r3, [r7, #4]
}
 800d91a:	4618      	mov	r0, r3
 800d91c:	370c      	adds	r7, #12
 800d91e:	46bd      	mov	sp, r7
 800d920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d924:	4770      	bx	lr
 800d926:	bf00      	nop
 800d928:	2000a704 	.word	0x2000a704

0800d92c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800d92c:	b580      	push	{r7, lr}
 800d92e:	b082      	sub	sp, #8
 800d930:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d932:	f001 fa8b 	bl	800ee4c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800d936:	2300      	movs	r3, #0
 800d938:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800d93a:	4b04      	ldr	r3, [pc, #16]	; (800d94c <xTaskGetTickCountFromISR+0x20>)
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d940:	683b      	ldr	r3, [r7, #0]
}
 800d942:	4618      	mov	r0, r3
 800d944:	3708      	adds	r7, #8
 800d946:	46bd      	mov	sp, r7
 800d948:	bd80      	pop	{r7, pc}
 800d94a:	bf00      	nop
 800d94c:	2000a704 	.word	0x2000a704

0800d950 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d950:	b580      	push	{r7, lr}
 800d952:	b086      	sub	sp, #24
 800d954:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d956:	2300      	movs	r3, #0
 800d958:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d95a:	4b50      	ldr	r3, [pc, #320]	; (800da9c <xTaskIncrementTick+0x14c>)
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	2b00      	cmp	r3, #0
 800d960:	f040 808b 	bne.w	800da7a <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d964:	4b4e      	ldr	r3, [pc, #312]	; (800daa0 <xTaskIncrementTick+0x150>)
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	3301      	adds	r3, #1
 800d96a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d96c:	4a4c      	ldr	r2, [pc, #304]	; (800daa0 <xTaskIncrementTick+0x150>)
 800d96e:	693b      	ldr	r3, [r7, #16]
 800d970:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d972:	693b      	ldr	r3, [r7, #16]
 800d974:	2b00      	cmp	r3, #0
 800d976:	d122      	bne.n	800d9be <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800d978:	4b4a      	ldr	r3, [pc, #296]	; (800daa4 <xTaskIncrementTick+0x154>)
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d00c      	beq.n	800d99c <xTaskIncrementTick+0x4c>
	__asm volatile
 800d982:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d986:	b672      	cpsid	i
 800d988:	f383 8811 	msr	BASEPRI, r3
 800d98c:	f3bf 8f6f 	isb	sy
 800d990:	f3bf 8f4f 	dsb	sy
 800d994:	b662      	cpsie	i
 800d996:	603b      	str	r3, [r7, #0]
}
 800d998:	bf00      	nop
 800d99a:	e7fe      	b.n	800d99a <xTaskIncrementTick+0x4a>
 800d99c:	4b41      	ldr	r3, [pc, #260]	; (800daa4 <xTaskIncrementTick+0x154>)
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	60fb      	str	r3, [r7, #12]
 800d9a2:	4b41      	ldr	r3, [pc, #260]	; (800daa8 <xTaskIncrementTick+0x158>)
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	4a3f      	ldr	r2, [pc, #252]	; (800daa4 <xTaskIncrementTick+0x154>)
 800d9a8:	6013      	str	r3, [r2, #0]
 800d9aa:	4a3f      	ldr	r2, [pc, #252]	; (800daa8 <xTaskIncrementTick+0x158>)
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	6013      	str	r3, [r2, #0]
 800d9b0:	4b3e      	ldr	r3, [pc, #248]	; (800daac <xTaskIncrementTick+0x15c>)
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	3301      	adds	r3, #1
 800d9b6:	4a3d      	ldr	r2, [pc, #244]	; (800daac <xTaskIncrementTick+0x15c>)
 800d9b8:	6013      	str	r3, [r2, #0]
 800d9ba:	f000 fae1 	bl	800df80 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d9be:	4b3c      	ldr	r3, [pc, #240]	; (800dab0 <xTaskIncrementTick+0x160>)
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	693a      	ldr	r2, [r7, #16]
 800d9c4:	429a      	cmp	r2, r3
 800d9c6:	d349      	bcc.n	800da5c <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d9c8:	4b36      	ldr	r3, [pc, #216]	; (800daa4 <xTaskIncrementTick+0x154>)
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d104      	bne.n	800d9dc <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d9d2:	4b37      	ldr	r3, [pc, #220]	; (800dab0 <xTaskIncrementTick+0x160>)
 800d9d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d9d8:	601a      	str	r2, [r3, #0]
					break;
 800d9da:	e03f      	b.n	800da5c <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d9dc:	4b31      	ldr	r3, [pc, #196]	; (800daa4 <xTaskIncrementTick+0x154>)
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	68db      	ldr	r3, [r3, #12]
 800d9e2:	68db      	ldr	r3, [r3, #12]
 800d9e4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d9e6:	68bb      	ldr	r3, [r7, #8]
 800d9e8:	685b      	ldr	r3, [r3, #4]
 800d9ea:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d9ec:	693a      	ldr	r2, [r7, #16]
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	429a      	cmp	r2, r3
 800d9f2:	d203      	bcs.n	800d9fc <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d9f4:	4a2e      	ldr	r2, [pc, #184]	; (800dab0 <xTaskIncrementTick+0x160>)
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d9fa:	e02f      	b.n	800da5c <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d9fc:	68bb      	ldr	r3, [r7, #8]
 800d9fe:	3304      	adds	r3, #4
 800da00:	4618      	mov	r0, r3
 800da02:	f7fe facd 	bl	800bfa0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800da06:	68bb      	ldr	r3, [r7, #8]
 800da08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d004      	beq.n	800da18 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800da0e:	68bb      	ldr	r3, [r7, #8]
 800da10:	3318      	adds	r3, #24
 800da12:	4618      	mov	r0, r3
 800da14:	f7fe fac4 	bl	800bfa0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800da18:	68bb      	ldr	r3, [r7, #8]
 800da1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da1c:	4b25      	ldr	r3, [pc, #148]	; (800dab4 <xTaskIncrementTick+0x164>)
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	429a      	cmp	r2, r3
 800da22:	d903      	bls.n	800da2c <xTaskIncrementTick+0xdc>
 800da24:	68bb      	ldr	r3, [r7, #8]
 800da26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da28:	4a22      	ldr	r2, [pc, #136]	; (800dab4 <xTaskIncrementTick+0x164>)
 800da2a:	6013      	str	r3, [r2, #0]
 800da2c:	68bb      	ldr	r3, [r7, #8]
 800da2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da30:	4613      	mov	r3, r2
 800da32:	009b      	lsls	r3, r3, #2
 800da34:	4413      	add	r3, r2
 800da36:	009b      	lsls	r3, r3, #2
 800da38:	4a1f      	ldr	r2, [pc, #124]	; (800dab8 <xTaskIncrementTick+0x168>)
 800da3a:	441a      	add	r2, r3
 800da3c:	68bb      	ldr	r3, [r7, #8]
 800da3e:	3304      	adds	r3, #4
 800da40:	4619      	mov	r1, r3
 800da42:	4610      	mov	r0, r2
 800da44:	f7fe fa4f 	bl	800bee6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800da48:	68bb      	ldr	r3, [r7, #8]
 800da4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da4c:	4b1b      	ldr	r3, [pc, #108]	; (800dabc <xTaskIncrementTick+0x16c>)
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da52:	429a      	cmp	r2, r3
 800da54:	d3b8      	bcc.n	800d9c8 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800da56:	2301      	movs	r3, #1
 800da58:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800da5a:	e7b5      	b.n	800d9c8 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800da5c:	4b17      	ldr	r3, [pc, #92]	; (800dabc <xTaskIncrementTick+0x16c>)
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da62:	4915      	ldr	r1, [pc, #84]	; (800dab8 <xTaskIncrementTick+0x168>)
 800da64:	4613      	mov	r3, r2
 800da66:	009b      	lsls	r3, r3, #2
 800da68:	4413      	add	r3, r2
 800da6a:	009b      	lsls	r3, r3, #2
 800da6c:	440b      	add	r3, r1
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	2b01      	cmp	r3, #1
 800da72:	d907      	bls.n	800da84 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800da74:	2301      	movs	r3, #1
 800da76:	617b      	str	r3, [r7, #20]
 800da78:	e004      	b.n	800da84 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800da7a:	4b11      	ldr	r3, [pc, #68]	; (800dac0 <xTaskIncrementTick+0x170>)
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	3301      	adds	r3, #1
 800da80:	4a0f      	ldr	r2, [pc, #60]	; (800dac0 <xTaskIncrementTick+0x170>)
 800da82:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800da84:	4b0f      	ldr	r3, [pc, #60]	; (800dac4 <xTaskIncrementTick+0x174>)
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d001      	beq.n	800da90 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800da8c:	2301      	movs	r3, #1
 800da8e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800da90:	697b      	ldr	r3, [r7, #20]
}
 800da92:	4618      	mov	r0, r3
 800da94:	3718      	adds	r7, #24
 800da96:	46bd      	mov	sp, r7
 800da98:	bd80      	pop	{r7, pc}
 800da9a:	bf00      	nop
 800da9c:	2000a728 	.word	0x2000a728
 800daa0:	2000a704 	.word	0x2000a704
 800daa4:	2000a6b8 	.word	0x2000a6b8
 800daa8:	2000a6bc 	.word	0x2000a6bc
 800daac:	2000a718 	.word	0x2000a718
 800dab0:	2000a720 	.word	0x2000a720
 800dab4:	2000a708 	.word	0x2000a708
 800dab8:	2000a230 	.word	0x2000a230
 800dabc:	2000a22c 	.word	0x2000a22c
 800dac0:	2000a710 	.word	0x2000a710
 800dac4:	2000a714 	.word	0x2000a714

0800dac8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800dac8:	b480      	push	{r7}
 800daca:	b085      	sub	sp, #20
 800dacc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800dace:	4b29      	ldr	r3, [pc, #164]	; (800db74 <vTaskSwitchContext+0xac>)
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d003      	beq.n	800dade <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800dad6:	4b28      	ldr	r3, [pc, #160]	; (800db78 <vTaskSwitchContext+0xb0>)
 800dad8:	2201      	movs	r2, #1
 800dada:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800dadc:	e043      	b.n	800db66 <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
 800dade:	4b26      	ldr	r3, [pc, #152]	; (800db78 <vTaskSwitchContext+0xb0>)
 800dae0:	2200      	movs	r2, #0
 800dae2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dae4:	4b25      	ldr	r3, [pc, #148]	; (800db7c <vTaskSwitchContext+0xb4>)
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	60fb      	str	r3, [r7, #12]
 800daea:	e012      	b.n	800db12 <vTaskSwitchContext+0x4a>
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d10c      	bne.n	800db0c <vTaskSwitchContext+0x44>
	__asm volatile
 800daf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800daf6:	b672      	cpsid	i
 800daf8:	f383 8811 	msr	BASEPRI, r3
 800dafc:	f3bf 8f6f 	isb	sy
 800db00:	f3bf 8f4f 	dsb	sy
 800db04:	b662      	cpsie	i
 800db06:	607b      	str	r3, [r7, #4]
}
 800db08:	bf00      	nop
 800db0a:	e7fe      	b.n	800db0a <vTaskSwitchContext+0x42>
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	3b01      	subs	r3, #1
 800db10:	60fb      	str	r3, [r7, #12]
 800db12:	491b      	ldr	r1, [pc, #108]	; (800db80 <vTaskSwitchContext+0xb8>)
 800db14:	68fa      	ldr	r2, [r7, #12]
 800db16:	4613      	mov	r3, r2
 800db18:	009b      	lsls	r3, r3, #2
 800db1a:	4413      	add	r3, r2
 800db1c:	009b      	lsls	r3, r3, #2
 800db1e:	440b      	add	r3, r1
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	2b00      	cmp	r3, #0
 800db24:	d0e2      	beq.n	800daec <vTaskSwitchContext+0x24>
 800db26:	68fa      	ldr	r2, [r7, #12]
 800db28:	4613      	mov	r3, r2
 800db2a:	009b      	lsls	r3, r3, #2
 800db2c:	4413      	add	r3, r2
 800db2e:	009b      	lsls	r3, r3, #2
 800db30:	4a13      	ldr	r2, [pc, #76]	; (800db80 <vTaskSwitchContext+0xb8>)
 800db32:	4413      	add	r3, r2
 800db34:	60bb      	str	r3, [r7, #8]
 800db36:	68bb      	ldr	r3, [r7, #8]
 800db38:	685b      	ldr	r3, [r3, #4]
 800db3a:	685a      	ldr	r2, [r3, #4]
 800db3c:	68bb      	ldr	r3, [r7, #8]
 800db3e:	605a      	str	r2, [r3, #4]
 800db40:	68bb      	ldr	r3, [r7, #8]
 800db42:	685a      	ldr	r2, [r3, #4]
 800db44:	68bb      	ldr	r3, [r7, #8]
 800db46:	3308      	adds	r3, #8
 800db48:	429a      	cmp	r2, r3
 800db4a:	d104      	bne.n	800db56 <vTaskSwitchContext+0x8e>
 800db4c:	68bb      	ldr	r3, [r7, #8]
 800db4e:	685b      	ldr	r3, [r3, #4]
 800db50:	685a      	ldr	r2, [r3, #4]
 800db52:	68bb      	ldr	r3, [r7, #8]
 800db54:	605a      	str	r2, [r3, #4]
 800db56:	68bb      	ldr	r3, [r7, #8]
 800db58:	685b      	ldr	r3, [r3, #4]
 800db5a:	68db      	ldr	r3, [r3, #12]
 800db5c:	4a09      	ldr	r2, [pc, #36]	; (800db84 <vTaskSwitchContext+0xbc>)
 800db5e:	6013      	str	r3, [r2, #0]
 800db60:	4a06      	ldr	r2, [pc, #24]	; (800db7c <vTaskSwitchContext+0xb4>)
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	6013      	str	r3, [r2, #0]
}
 800db66:	bf00      	nop
 800db68:	3714      	adds	r7, #20
 800db6a:	46bd      	mov	sp, r7
 800db6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db70:	4770      	bx	lr
 800db72:	bf00      	nop
 800db74:	2000a728 	.word	0x2000a728
 800db78:	2000a714 	.word	0x2000a714
 800db7c:	2000a708 	.word	0x2000a708
 800db80:	2000a230 	.word	0x2000a230
 800db84:	2000a22c 	.word	0x2000a22c

0800db88 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800db88:	b580      	push	{r7, lr}
 800db8a:	b084      	sub	sp, #16
 800db8c:	af00      	add	r7, sp, #0
 800db8e:	6078      	str	r0, [r7, #4]
 800db90:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	2b00      	cmp	r3, #0
 800db96:	d10c      	bne.n	800dbb2 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800db98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db9c:	b672      	cpsid	i
 800db9e:	f383 8811 	msr	BASEPRI, r3
 800dba2:	f3bf 8f6f 	isb	sy
 800dba6:	f3bf 8f4f 	dsb	sy
 800dbaa:	b662      	cpsie	i
 800dbac:	60fb      	str	r3, [r7, #12]
}
 800dbae:	bf00      	nop
 800dbb0:	e7fe      	b.n	800dbb0 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800dbb2:	4b07      	ldr	r3, [pc, #28]	; (800dbd0 <vTaskPlaceOnEventList+0x48>)
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	3318      	adds	r3, #24
 800dbb8:	4619      	mov	r1, r3
 800dbba:	6878      	ldr	r0, [r7, #4]
 800dbbc:	f7fe f9b7 	bl	800bf2e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800dbc0:	2101      	movs	r1, #1
 800dbc2:	6838      	ldr	r0, [r7, #0]
 800dbc4:	f000 fb9e 	bl	800e304 <prvAddCurrentTaskToDelayedList>
}
 800dbc8:	bf00      	nop
 800dbca:	3710      	adds	r7, #16
 800dbcc:	46bd      	mov	sp, r7
 800dbce:	bd80      	pop	{r7, pc}
 800dbd0:	2000a22c 	.word	0x2000a22c

0800dbd4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800dbd4:	b580      	push	{r7, lr}
 800dbd6:	b086      	sub	sp, #24
 800dbd8:	af00      	add	r7, sp, #0
 800dbda:	60f8      	str	r0, [r7, #12]
 800dbdc:	60b9      	str	r1, [r7, #8]
 800dbde:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d10c      	bne.n	800dc00 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800dbe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbea:	b672      	cpsid	i
 800dbec:	f383 8811 	msr	BASEPRI, r3
 800dbf0:	f3bf 8f6f 	isb	sy
 800dbf4:	f3bf 8f4f 	dsb	sy
 800dbf8:	b662      	cpsie	i
 800dbfa:	617b      	str	r3, [r7, #20]
}
 800dbfc:	bf00      	nop
 800dbfe:	e7fe      	b.n	800dbfe <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800dc00:	4b0a      	ldr	r3, [pc, #40]	; (800dc2c <vTaskPlaceOnEventListRestricted+0x58>)
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	3318      	adds	r3, #24
 800dc06:	4619      	mov	r1, r3
 800dc08:	68f8      	ldr	r0, [r7, #12]
 800dc0a:	f7fe f96c 	bl	800bee6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d002      	beq.n	800dc1a <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800dc14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dc18:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800dc1a:	6879      	ldr	r1, [r7, #4]
 800dc1c:	68b8      	ldr	r0, [r7, #8]
 800dc1e:	f000 fb71 	bl	800e304 <prvAddCurrentTaskToDelayedList>
	}
 800dc22:	bf00      	nop
 800dc24:	3718      	adds	r7, #24
 800dc26:	46bd      	mov	sp, r7
 800dc28:	bd80      	pop	{r7, pc}
 800dc2a:	bf00      	nop
 800dc2c:	2000a22c 	.word	0x2000a22c

0800dc30 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800dc30:	b580      	push	{r7, lr}
 800dc32:	b086      	sub	sp, #24
 800dc34:	af00      	add	r7, sp, #0
 800dc36:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	68db      	ldr	r3, [r3, #12]
 800dc3c:	68db      	ldr	r3, [r3, #12]
 800dc3e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800dc40:	693b      	ldr	r3, [r7, #16]
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d10c      	bne.n	800dc60 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800dc46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc4a:	b672      	cpsid	i
 800dc4c:	f383 8811 	msr	BASEPRI, r3
 800dc50:	f3bf 8f6f 	isb	sy
 800dc54:	f3bf 8f4f 	dsb	sy
 800dc58:	b662      	cpsie	i
 800dc5a:	60fb      	str	r3, [r7, #12]
}
 800dc5c:	bf00      	nop
 800dc5e:	e7fe      	b.n	800dc5e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800dc60:	693b      	ldr	r3, [r7, #16]
 800dc62:	3318      	adds	r3, #24
 800dc64:	4618      	mov	r0, r3
 800dc66:	f7fe f99b 	bl	800bfa0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dc6a:	4b1e      	ldr	r3, [pc, #120]	; (800dce4 <xTaskRemoveFromEventList+0xb4>)
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d11d      	bne.n	800dcae <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800dc72:	693b      	ldr	r3, [r7, #16]
 800dc74:	3304      	adds	r3, #4
 800dc76:	4618      	mov	r0, r3
 800dc78:	f7fe f992 	bl	800bfa0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800dc7c:	693b      	ldr	r3, [r7, #16]
 800dc7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc80:	4b19      	ldr	r3, [pc, #100]	; (800dce8 <xTaskRemoveFromEventList+0xb8>)
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	429a      	cmp	r2, r3
 800dc86:	d903      	bls.n	800dc90 <xTaskRemoveFromEventList+0x60>
 800dc88:	693b      	ldr	r3, [r7, #16]
 800dc8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc8c:	4a16      	ldr	r2, [pc, #88]	; (800dce8 <xTaskRemoveFromEventList+0xb8>)
 800dc8e:	6013      	str	r3, [r2, #0]
 800dc90:	693b      	ldr	r3, [r7, #16]
 800dc92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc94:	4613      	mov	r3, r2
 800dc96:	009b      	lsls	r3, r3, #2
 800dc98:	4413      	add	r3, r2
 800dc9a:	009b      	lsls	r3, r3, #2
 800dc9c:	4a13      	ldr	r2, [pc, #76]	; (800dcec <xTaskRemoveFromEventList+0xbc>)
 800dc9e:	441a      	add	r2, r3
 800dca0:	693b      	ldr	r3, [r7, #16]
 800dca2:	3304      	adds	r3, #4
 800dca4:	4619      	mov	r1, r3
 800dca6:	4610      	mov	r0, r2
 800dca8:	f7fe f91d 	bl	800bee6 <vListInsertEnd>
 800dcac:	e005      	b.n	800dcba <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800dcae:	693b      	ldr	r3, [r7, #16]
 800dcb0:	3318      	adds	r3, #24
 800dcb2:	4619      	mov	r1, r3
 800dcb4:	480e      	ldr	r0, [pc, #56]	; (800dcf0 <xTaskRemoveFromEventList+0xc0>)
 800dcb6:	f7fe f916 	bl	800bee6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800dcba:	693b      	ldr	r3, [r7, #16]
 800dcbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dcbe:	4b0d      	ldr	r3, [pc, #52]	; (800dcf4 <xTaskRemoveFromEventList+0xc4>)
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcc4:	429a      	cmp	r2, r3
 800dcc6:	d905      	bls.n	800dcd4 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800dcc8:	2301      	movs	r3, #1
 800dcca:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800dccc:	4b0a      	ldr	r3, [pc, #40]	; (800dcf8 <xTaskRemoveFromEventList+0xc8>)
 800dcce:	2201      	movs	r2, #1
 800dcd0:	601a      	str	r2, [r3, #0]
 800dcd2:	e001      	b.n	800dcd8 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800dcd4:	2300      	movs	r3, #0
 800dcd6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800dcd8:	697b      	ldr	r3, [r7, #20]
}
 800dcda:	4618      	mov	r0, r3
 800dcdc:	3718      	adds	r7, #24
 800dcde:	46bd      	mov	sp, r7
 800dce0:	bd80      	pop	{r7, pc}
 800dce2:	bf00      	nop
 800dce4:	2000a728 	.word	0x2000a728
 800dce8:	2000a708 	.word	0x2000a708
 800dcec:	2000a230 	.word	0x2000a230
 800dcf0:	2000a6c0 	.word	0x2000a6c0
 800dcf4:	2000a22c 	.word	0x2000a22c
 800dcf8:	2000a714 	.word	0x2000a714

0800dcfc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800dcfc:	b480      	push	{r7}
 800dcfe:	b083      	sub	sp, #12
 800dd00:	af00      	add	r7, sp, #0
 800dd02:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800dd04:	4b06      	ldr	r3, [pc, #24]	; (800dd20 <vTaskInternalSetTimeOutState+0x24>)
 800dd06:	681a      	ldr	r2, [r3, #0]
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800dd0c:	4b05      	ldr	r3, [pc, #20]	; (800dd24 <vTaskInternalSetTimeOutState+0x28>)
 800dd0e:	681a      	ldr	r2, [r3, #0]
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	605a      	str	r2, [r3, #4]
}
 800dd14:	bf00      	nop
 800dd16:	370c      	adds	r7, #12
 800dd18:	46bd      	mov	sp, r7
 800dd1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd1e:	4770      	bx	lr
 800dd20:	2000a718 	.word	0x2000a718
 800dd24:	2000a704 	.word	0x2000a704

0800dd28 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800dd28:	b580      	push	{r7, lr}
 800dd2a:	b088      	sub	sp, #32
 800dd2c:	af00      	add	r7, sp, #0
 800dd2e:	6078      	str	r0, [r7, #4]
 800dd30:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d10c      	bne.n	800dd52 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800dd38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd3c:	b672      	cpsid	i
 800dd3e:	f383 8811 	msr	BASEPRI, r3
 800dd42:	f3bf 8f6f 	isb	sy
 800dd46:	f3bf 8f4f 	dsb	sy
 800dd4a:	b662      	cpsie	i
 800dd4c:	613b      	str	r3, [r7, #16]
}
 800dd4e:	bf00      	nop
 800dd50:	e7fe      	b.n	800dd50 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800dd52:	683b      	ldr	r3, [r7, #0]
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d10c      	bne.n	800dd72 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800dd58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd5c:	b672      	cpsid	i
 800dd5e:	f383 8811 	msr	BASEPRI, r3
 800dd62:	f3bf 8f6f 	isb	sy
 800dd66:	f3bf 8f4f 	dsb	sy
 800dd6a:	b662      	cpsie	i
 800dd6c:	60fb      	str	r3, [r7, #12]
}
 800dd6e:	bf00      	nop
 800dd70:	e7fe      	b.n	800dd70 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800dd72:	f000 ff83 	bl	800ec7c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800dd76:	4b1d      	ldr	r3, [pc, #116]	; (800ddec <xTaskCheckForTimeOut+0xc4>)
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	685b      	ldr	r3, [r3, #4]
 800dd80:	69ba      	ldr	r2, [r7, #24]
 800dd82:	1ad3      	subs	r3, r2, r3
 800dd84:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800dd86:	683b      	ldr	r3, [r7, #0]
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dd8e:	d102      	bne.n	800dd96 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800dd90:	2300      	movs	r3, #0
 800dd92:	61fb      	str	r3, [r7, #28]
 800dd94:	e023      	b.n	800ddde <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	681a      	ldr	r2, [r3, #0]
 800dd9a:	4b15      	ldr	r3, [pc, #84]	; (800ddf0 <xTaskCheckForTimeOut+0xc8>)
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	429a      	cmp	r2, r3
 800dda0:	d007      	beq.n	800ddb2 <xTaskCheckForTimeOut+0x8a>
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	685b      	ldr	r3, [r3, #4]
 800dda6:	69ba      	ldr	r2, [r7, #24]
 800dda8:	429a      	cmp	r2, r3
 800ddaa:	d302      	bcc.n	800ddb2 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ddac:	2301      	movs	r3, #1
 800ddae:	61fb      	str	r3, [r7, #28]
 800ddb0:	e015      	b.n	800ddde <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ddb2:	683b      	ldr	r3, [r7, #0]
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	697a      	ldr	r2, [r7, #20]
 800ddb8:	429a      	cmp	r2, r3
 800ddba:	d20b      	bcs.n	800ddd4 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ddbc:	683b      	ldr	r3, [r7, #0]
 800ddbe:	681a      	ldr	r2, [r3, #0]
 800ddc0:	697b      	ldr	r3, [r7, #20]
 800ddc2:	1ad2      	subs	r2, r2, r3
 800ddc4:	683b      	ldr	r3, [r7, #0]
 800ddc6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ddc8:	6878      	ldr	r0, [r7, #4]
 800ddca:	f7ff ff97 	bl	800dcfc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ddce:	2300      	movs	r3, #0
 800ddd0:	61fb      	str	r3, [r7, #28]
 800ddd2:	e004      	b.n	800ddde <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800ddd4:	683b      	ldr	r3, [r7, #0]
 800ddd6:	2200      	movs	r2, #0
 800ddd8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ddda:	2301      	movs	r3, #1
 800dddc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ddde:	f000 ff81 	bl	800ece4 <vPortExitCritical>

	return xReturn;
 800dde2:	69fb      	ldr	r3, [r7, #28]
}
 800dde4:	4618      	mov	r0, r3
 800dde6:	3720      	adds	r7, #32
 800dde8:	46bd      	mov	sp, r7
 800ddea:	bd80      	pop	{r7, pc}
 800ddec:	2000a704 	.word	0x2000a704
 800ddf0:	2000a718 	.word	0x2000a718

0800ddf4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ddf4:	b480      	push	{r7}
 800ddf6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ddf8:	4b03      	ldr	r3, [pc, #12]	; (800de08 <vTaskMissedYield+0x14>)
 800ddfa:	2201      	movs	r2, #1
 800ddfc:	601a      	str	r2, [r3, #0]
}
 800ddfe:	bf00      	nop
 800de00:	46bd      	mov	sp, r7
 800de02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de06:	4770      	bx	lr
 800de08:	2000a714 	.word	0x2000a714

0800de0c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800de0c:	b580      	push	{r7, lr}
 800de0e:	b082      	sub	sp, #8
 800de10:	af00      	add	r7, sp, #0
 800de12:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800de14:	f000 f854 	bl	800dec0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800de18:	4b07      	ldr	r3, [pc, #28]	; (800de38 <prvIdleTask+0x2c>)
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	2b01      	cmp	r3, #1
 800de1e:	d907      	bls.n	800de30 <prvIdleTask+0x24>
			{
				taskYIELD();
 800de20:	4b06      	ldr	r3, [pc, #24]	; (800de3c <prvIdleTask+0x30>)
 800de22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800de26:	601a      	str	r2, [r3, #0]
 800de28:	f3bf 8f4f 	dsb	sy
 800de2c:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800de30:	f7f2 fc1c 	bl	800066c <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800de34:	e7ee      	b.n	800de14 <prvIdleTask+0x8>
 800de36:	bf00      	nop
 800de38:	2000a230 	.word	0x2000a230
 800de3c:	e000ed04 	.word	0xe000ed04

0800de40 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800de40:	b580      	push	{r7, lr}
 800de42:	b082      	sub	sp, #8
 800de44:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800de46:	2300      	movs	r3, #0
 800de48:	607b      	str	r3, [r7, #4]
 800de4a:	e00c      	b.n	800de66 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800de4c:	687a      	ldr	r2, [r7, #4]
 800de4e:	4613      	mov	r3, r2
 800de50:	009b      	lsls	r3, r3, #2
 800de52:	4413      	add	r3, r2
 800de54:	009b      	lsls	r3, r3, #2
 800de56:	4a12      	ldr	r2, [pc, #72]	; (800dea0 <prvInitialiseTaskLists+0x60>)
 800de58:	4413      	add	r3, r2
 800de5a:	4618      	mov	r0, r3
 800de5c:	f7fe f816 	bl	800be8c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	3301      	adds	r3, #1
 800de64:	607b      	str	r3, [r7, #4]
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	2b37      	cmp	r3, #55	; 0x37
 800de6a:	d9ef      	bls.n	800de4c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800de6c:	480d      	ldr	r0, [pc, #52]	; (800dea4 <prvInitialiseTaskLists+0x64>)
 800de6e:	f7fe f80d 	bl	800be8c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800de72:	480d      	ldr	r0, [pc, #52]	; (800dea8 <prvInitialiseTaskLists+0x68>)
 800de74:	f7fe f80a 	bl	800be8c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800de78:	480c      	ldr	r0, [pc, #48]	; (800deac <prvInitialiseTaskLists+0x6c>)
 800de7a:	f7fe f807 	bl	800be8c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800de7e:	480c      	ldr	r0, [pc, #48]	; (800deb0 <prvInitialiseTaskLists+0x70>)
 800de80:	f7fe f804 	bl	800be8c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800de84:	480b      	ldr	r0, [pc, #44]	; (800deb4 <prvInitialiseTaskLists+0x74>)
 800de86:	f7fe f801 	bl	800be8c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800de8a:	4b0b      	ldr	r3, [pc, #44]	; (800deb8 <prvInitialiseTaskLists+0x78>)
 800de8c:	4a05      	ldr	r2, [pc, #20]	; (800dea4 <prvInitialiseTaskLists+0x64>)
 800de8e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800de90:	4b0a      	ldr	r3, [pc, #40]	; (800debc <prvInitialiseTaskLists+0x7c>)
 800de92:	4a05      	ldr	r2, [pc, #20]	; (800dea8 <prvInitialiseTaskLists+0x68>)
 800de94:	601a      	str	r2, [r3, #0]
}
 800de96:	bf00      	nop
 800de98:	3708      	adds	r7, #8
 800de9a:	46bd      	mov	sp, r7
 800de9c:	bd80      	pop	{r7, pc}
 800de9e:	bf00      	nop
 800dea0:	2000a230 	.word	0x2000a230
 800dea4:	2000a690 	.word	0x2000a690
 800dea8:	2000a6a4 	.word	0x2000a6a4
 800deac:	2000a6c0 	.word	0x2000a6c0
 800deb0:	2000a6d4 	.word	0x2000a6d4
 800deb4:	2000a6ec 	.word	0x2000a6ec
 800deb8:	2000a6b8 	.word	0x2000a6b8
 800debc:	2000a6bc 	.word	0x2000a6bc

0800dec0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800dec0:	b580      	push	{r7, lr}
 800dec2:	b082      	sub	sp, #8
 800dec4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800dec6:	e019      	b.n	800defc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800dec8:	f000 fed8 	bl	800ec7c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800decc:	4b10      	ldr	r3, [pc, #64]	; (800df10 <prvCheckTasksWaitingTermination+0x50>)
 800dece:	68db      	ldr	r3, [r3, #12]
 800ded0:	68db      	ldr	r3, [r3, #12]
 800ded2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	3304      	adds	r3, #4
 800ded8:	4618      	mov	r0, r3
 800deda:	f7fe f861 	bl	800bfa0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800dede:	4b0d      	ldr	r3, [pc, #52]	; (800df14 <prvCheckTasksWaitingTermination+0x54>)
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	3b01      	subs	r3, #1
 800dee4:	4a0b      	ldr	r2, [pc, #44]	; (800df14 <prvCheckTasksWaitingTermination+0x54>)
 800dee6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800dee8:	4b0b      	ldr	r3, [pc, #44]	; (800df18 <prvCheckTasksWaitingTermination+0x58>)
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	3b01      	subs	r3, #1
 800deee:	4a0a      	ldr	r2, [pc, #40]	; (800df18 <prvCheckTasksWaitingTermination+0x58>)
 800def0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800def2:	f000 fef7 	bl	800ece4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800def6:	6878      	ldr	r0, [r7, #4]
 800def8:	f000 f810 	bl	800df1c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800defc:	4b06      	ldr	r3, [pc, #24]	; (800df18 <prvCheckTasksWaitingTermination+0x58>)
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	2b00      	cmp	r3, #0
 800df02:	d1e1      	bne.n	800dec8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800df04:	bf00      	nop
 800df06:	bf00      	nop
 800df08:	3708      	adds	r7, #8
 800df0a:	46bd      	mov	sp, r7
 800df0c:	bd80      	pop	{r7, pc}
 800df0e:	bf00      	nop
 800df10:	2000a6d4 	.word	0x2000a6d4
 800df14:	2000a700 	.word	0x2000a700
 800df18:	2000a6e8 	.word	0x2000a6e8

0800df1c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800df1c:	b580      	push	{r7, lr}
 800df1e:	b084      	sub	sp, #16
 800df20:	af00      	add	r7, sp, #0
 800df22:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d108      	bne.n	800df40 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df32:	4618      	mov	r0, r3
 800df34:	f001 f898 	bl	800f068 <vPortFree>
				vPortFree( pxTCB );
 800df38:	6878      	ldr	r0, [r7, #4]
 800df3a:	f001 f895 	bl	800f068 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800df3e:	e01a      	b.n	800df76 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800df46:	2b01      	cmp	r3, #1
 800df48:	d103      	bne.n	800df52 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800df4a:	6878      	ldr	r0, [r7, #4]
 800df4c:	f001 f88c 	bl	800f068 <vPortFree>
	}
 800df50:	e011      	b.n	800df76 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800df58:	2b02      	cmp	r3, #2
 800df5a:	d00c      	beq.n	800df76 <prvDeleteTCB+0x5a>
	__asm volatile
 800df5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df60:	b672      	cpsid	i
 800df62:	f383 8811 	msr	BASEPRI, r3
 800df66:	f3bf 8f6f 	isb	sy
 800df6a:	f3bf 8f4f 	dsb	sy
 800df6e:	b662      	cpsie	i
 800df70:	60fb      	str	r3, [r7, #12]
}
 800df72:	bf00      	nop
 800df74:	e7fe      	b.n	800df74 <prvDeleteTCB+0x58>
	}
 800df76:	bf00      	nop
 800df78:	3710      	adds	r7, #16
 800df7a:	46bd      	mov	sp, r7
 800df7c:	bd80      	pop	{r7, pc}
	...

0800df80 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800df80:	b480      	push	{r7}
 800df82:	b083      	sub	sp, #12
 800df84:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800df86:	4b0c      	ldr	r3, [pc, #48]	; (800dfb8 <prvResetNextTaskUnblockTime+0x38>)
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d104      	bne.n	800df9a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800df90:	4b0a      	ldr	r3, [pc, #40]	; (800dfbc <prvResetNextTaskUnblockTime+0x3c>)
 800df92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800df96:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800df98:	e008      	b.n	800dfac <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800df9a:	4b07      	ldr	r3, [pc, #28]	; (800dfb8 <prvResetNextTaskUnblockTime+0x38>)
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	68db      	ldr	r3, [r3, #12]
 800dfa0:	68db      	ldr	r3, [r3, #12]
 800dfa2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	685b      	ldr	r3, [r3, #4]
 800dfa8:	4a04      	ldr	r2, [pc, #16]	; (800dfbc <prvResetNextTaskUnblockTime+0x3c>)
 800dfaa:	6013      	str	r3, [r2, #0]
}
 800dfac:	bf00      	nop
 800dfae:	370c      	adds	r7, #12
 800dfb0:	46bd      	mov	sp, r7
 800dfb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfb6:	4770      	bx	lr
 800dfb8:	2000a6b8 	.word	0x2000a6b8
 800dfbc:	2000a720 	.word	0x2000a720

0800dfc0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800dfc0:	b480      	push	{r7}
 800dfc2:	b083      	sub	sp, #12
 800dfc4:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800dfc6:	4b05      	ldr	r3, [pc, #20]	; (800dfdc <xTaskGetCurrentTaskHandle+0x1c>)
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	607b      	str	r3, [r7, #4]

		return xReturn;
 800dfcc:	687b      	ldr	r3, [r7, #4]
	}
 800dfce:	4618      	mov	r0, r3
 800dfd0:	370c      	adds	r7, #12
 800dfd2:	46bd      	mov	sp, r7
 800dfd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfd8:	4770      	bx	lr
 800dfda:	bf00      	nop
 800dfdc:	2000a22c 	.word	0x2000a22c

0800dfe0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800dfe0:	b480      	push	{r7}
 800dfe2:	b083      	sub	sp, #12
 800dfe4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800dfe6:	4b0b      	ldr	r3, [pc, #44]	; (800e014 <xTaskGetSchedulerState+0x34>)
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d102      	bne.n	800dff4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800dfee:	2301      	movs	r3, #1
 800dff0:	607b      	str	r3, [r7, #4]
 800dff2:	e008      	b.n	800e006 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dff4:	4b08      	ldr	r3, [pc, #32]	; (800e018 <xTaskGetSchedulerState+0x38>)
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	d102      	bne.n	800e002 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800dffc:	2302      	movs	r3, #2
 800dffe:	607b      	str	r3, [r7, #4]
 800e000:	e001      	b.n	800e006 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e002:	2300      	movs	r3, #0
 800e004:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e006:	687b      	ldr	r3, [r7, #4]
	}
 800e008:	4618      	mov	r0, r3
 800e00a:	370c      	adds	r7, #12
 800e00c:	46bd      	mov	sp, r7
 800e00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e012:	4770      	bx	lr
 800e014:	2000a70c 	.word	0x2000a70c
 800e018:	2000a728 	.word	0x2000a728

0800e01c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800e01c:	b580      	push	{r7, lr}
 800e01e:	b084      	sub	sp, #16
 800e020:	af00      	add	r7, sp, #0
 800e022:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800e028:	2300      	movs	r3, #0
 800e02a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d051      	beq.n	800e0d6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e032:	68bb      	ldr	r3, [r7, #8]
 800e034:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e036:	4b2a      	ldr	r3, [pc, #168]	; (800e0e0 <xTaskPriorityInherit+0xc4>)
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e03c:	429a      	cmp	r2, r3
 800e03e:	d241      	bcs.n	800e0c4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e040:	68bb      	ldr	r3, [r7, #8]
 800e042:	699b      	ldr	r3, [r3, #24]
 800e044:	2b00      	cmp	r3, #0
 800e046:	db06      	blt.n	800e056 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e048:	4b25      	ldr	r3, [pc, #148]	; (800e0e0 <xTaskPriorityInherit+0xc4>)
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e04e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e052:	68bb      	ldr	r3, [r7, #8]
 800e054:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800e056:	68bb      	ldr	r3, [r7, #8]
 800e058:	6959      	ldr	r1, [r3, #20]
 800e05a:	68bb      	ldr	r3, [r7, #8]
 800e05c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e05e:	4613      	mov	r3, r2
 800e060:	009b      	lsls	r3, r3, #2
 800e062:	4413      	add	r3, r2
 800e064:	009b      	lsls	r3, r3, #2
 800e066:	4a1f      	ldr	r2, [pc, #124]	; (800e0e4 <xTaskPriorityInherit+0xc8>)
 800e068:	4413      	add	r3, r2
 800e06a:	4299      	cmp	r1, r3
 800e06c:	d122      	bne.n	800e0b4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e06e:	68bb      	ldr	r3, [r7, #8]
 800e070:	3304      	adds	r3, #4
 800e072:	4618      	mov	r0, r3
 800e074:	f7fd ff94 	bl	800bfa0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e078:	4b19      	ldr	r3, [pc, #100]	; (800e0e0 <xTaskPriorityInherit+0xc4>)
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e07e:	68bb      	ldr	r3, [r7, #8]
 800e080:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e082:	68bb      	ldr	r3, [r7, #8]
 800e084:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e086:	4b18      	ldr	r3, [pc, #96]	; (800e0e8 <xTaskPriorityInherit+0xcc>)
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	429a      	cmp	r2, r3
 800e08c:	d903      	bls.n	800e096 <xTaskPriorityInherit+0x7a>
 800e08e:	68bb      	ldr	r3, [r7, #8]
 800e090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e092:	4a15      	ldr	r2, [pc, #84]	; (800e0e8 <xTaskPriorityInherit+0xcc>)
 800e094:	6013      	str	r3, [r2, #0]
 800e096:	68bb      	ldr	r3, [r7, #8]
 800e098:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e09a:	4613      	mov	r3, r2
 800e09c:	009b      	lsls	r3, r3, #2
 800e09e:	4413      	add	r3, r2
 800e0a0:	009b      	lsls	r3, r3, #2
 800e0a2:	4a10      	ldr	r2, [pc, #64]	; (800e0e4 <xTaskPriorityInherit+0xc8>)
 800e0a4:	441a      	add	r2, r3
 800e0a6:	68bb      	ldr	r3, [r7, #8]
 800e0a8:	3304      	adds	r3, #4
 800e0aa:	4619      	mov	r1, r3
 800e0ac:	4610      	mov	r0, r2
 800e0ae:	f7fd ff1a 	bl	800bee6 <vListInsertEnd>
 800e0b2:	e004      	b.n	800e0be <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e0b4:	4b0a      	ldr	r3, [pc, #40]	; (800e0e0 <xTaskPriorityInherit+0xc4>)
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0ba:	68bb      	ldr	r3, [r7, #8]
 800e0bc:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800e0be:	2301      	movs	r3, #1
 800e0c0:	60fb      	str	r3, [r7, #12]
 800e0c2:	e008      	b.n	800e0d6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800e0c4:	68bb      	ldr	r3, [r7, #8]
 800e0c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e0c8:	4b05      	ldr	r3, [pc, #20]	; (800e0e0 <xTaskPriorityInherit+0xc4>)
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0ce:	429a      	cmp	r2, r3
 800e0d0:	d201      	bcs.n	800e0d6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800e0d2:	2301      	movs	r3, #1
 800e0d4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e0d6:	68fb      	ldr	r3, [r7, #12]
	}
 800e0d8:	4618      	mov	r0, r3
 800e0da:	3710      	adds	r7, #16
 800e0dc:	46bd      	mov	sp, r7
 800e0de:	bd80      	pop	{r7, pc}
 800e0e0:	2000a22c 	.word	0x2000a22c
 800e0e4:	2000a230 	.word	0x2000a230
 800e0e8:	2000a708 	.word	0x2000a708

0800e0ec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e0ec:	b580      	push	{r7, lr}
 800e0ee:	b086      	sub	sp, #24
 800e0f0:	af00      	add	r7, sp, #0
 800e0f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e0f8:	2300      	movs	r3, #0
 800e0fa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d05a      	beq.n	800e1b8 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e102:	4b30      	ldr	r3, [pc, #192]	; (800e1c4 <xTaskPriorityDisinherit+0xd8>)
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	693a      	ldr	r2, [r7, #16]
 800e108:	429a      	cmp	r2, r3
 800e10a:	d00c      	beq.n	800e126 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800e10c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e110:	b672      	cpsid	i
 800e112:	f383 8811 	msr	BASEPRI, r3
 800e116:	f3bf 8f6f 	isb	sy
 800e11a:	f3bf 8f4f 	dsb	sy
 800e11e:	b662      	cpsie	i
 800e120:	60fb      	str	r3, [r7, #12]
}
 800e122:	bf00      	nop
 800e124:	e7fe      	b.n	800e124 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800e126:	693b      	ldr	r3, [r7, #16]
 800e128:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d10c      	bne.n	800e148 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800e12e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e132:	b672      	cpsid	i
 800e134:	f383 8811 	msr	BASEPRI, r3
 800e138:	f3bf 8f6f 	isb	sy
 800e13c:	f3bf 8f4f 	dsb	sy
 800e140:	b662      	cpsie	i
 800e142:	60bb      	str	r3, [r7, #8]
}
 800e144:	bf00      	nop
 800e146:	e7fe      	b.n	800e146 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800e148:	693b      	ldr	r3, [r7, #16]
 800e14a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e14c:	1e5a      	subs	r2, r3, #1
 800e14e:	693b      	ldr	r3, [r7, #16]
 800e150:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e152:	693b      	ldr	r3, [r7, #16]
 800e154:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e156:	693b      	ldr	r3, [r7, #16]
 800e158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e15a:	429a      	cmp	r2, r3
 800e15c:	d02c      	beq.n	800e1b8 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e15e:	693b      	ldr	r3, [r7, #16]
 800e160:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e162:	2b00      	cmp	r3, #0
 800e164:	d128      	bne.n	800e1b8 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e166:	693b      	ldr	r3, [r7, #16]
 800e168:	3304      	adds	r3, #4
 800e16a:	4618      	mov	r0, r3
 800e16c:	f7fd ff18 	bl	800bfa0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e170:	693b      	ldr	r3, [r7, #16]
 800e172:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e174:	693b      	ldr	r3, [r7, #16]
 800e176:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e178:	693b      	ldr	r3, [r7, #16]
 800e17a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e17c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e180:	693b      	ldr	r3, [r7, #16]
 800e182:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e184:	693b      	ldr	r3, [r7, #16]
 800e186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e188:	4b0f      	ldr	r3, [pc, #60]	; (800e1c8 <xTaskPriorityDisinherit+0xdc>)
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	429a      	cmp	r2, r3
 800e18e:	d903      	bls.n	800e198 <xTaskPriorityDisinherit+0xac>
 800e190:	693b      	ldr	r3, [r7, #16]
 800e192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e194:	4a0c      	ldr	r2, [pc, #48]	; (800e1c8 <xTaskPriorityDisinherit+0xdc>)
 800e196:	6013      	str	r3, [r2, #0]
 800e198:	693b      	ldr	r3, [r7, #16]
 800e19a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e19c:	4613      	mov	r3, r2
 800e19e:	009b      	lsls	r3, r3, #2
 800e1a0:	4413      	add	r3, r2
 800e1a2:	009b      	lsls	r3, r3, #2
 800e1a4:	4a09      	ldr	r2, [pc, #36]	; (800e1cc <xTaskPriorityDisinherit+0xe0>)
 800e1a6:	441a      	add	r2, r3
 800e1a8:	693b      	ldr	r3, [r7, #16]
 800e1aa:	3304      	adds	r3, #4
 800e1ac:	4619      	mov	r1, r3
 800e1ae:	4610      	mov	r0, r2
 800e1b0:	f7fd fe99 	bl	800bee6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e1b4:	2301      	movs	r3, #1
 800e1b6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e1b8:	697b      	ldr	r3, [r7, #20]
	}
 800e1ba:	4618      	mov	r0, r3
 800e1bc:	3718      	adds	r7, #24
 800e1be:	46bd      	mov	sp, r7
 800e1c0:	bd80      	pop	{r7, pc}
 800e1c2:	bf00      	nop
 800e1c4:	2000a22c 	.word	0x2000a22c
 800e1c8:	2000a708 	.word	0x2000a708
 800e1cc:	2000a230 	.word	0x2000a230

0800e1d0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800e1d0:	b580      	push	{r7, lr}
 800e1d2:	b088      	sub	sp, #32
 800e1d4:	af00      	add	r7, sp, #0
 800e1d6:	6078      	str	r0, [r7, #4]
 800e1d8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800e1de:	2301      	movs	r3, #1
 800e1e0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d06e      	beq.n	800e2c6 <vTaskPriorityDisinheritAfterTimeout+0xf6>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800e1e8:	69bb      	ldr	r3, [r7, #24]
 800e1ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d10c      	bne.n	800e20a <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 800e1f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1f4:	b672      	cpsid	i
 800e1f6:	f383 8811 	msr	BASEPRI, r3
 800e1fa:	f3bf 8f6f 	isb	sy
 800e1fe:	f3bf 8f4f 	dsb	sy
 800e202:	b662      	cpsie	i
 800e204:	60fb      	str	r3, [r7, #12]
}
 800e206:	bf00      	nop
 800e208:	e7fe      	b.n	800e208 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800e20a:	69bb      	ldr	r3, [r7, #24]
 800e20c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e20e:	683a      	ldr	r2, [r7, #0]
 800e210:	429a      	cmp	r2, r3
 800e212:	d902      	bls.n	800e21a <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800e214:	683b      	ldr	r3, [r7, #0]
 800e216:	61fb      	str	r3, [r7, #28]
 800e218:	e002      	b.n	800e220 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800e21a:	69bb      	ldr	r3, [r7, #24]
 800e21c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e21e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800e220:	69bb      	ldr	r3, [r7, #24]
 800e222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e224:	69fa      	ldr	r2, [r7, #28]
 800e226:	429a      	cmp	r2, r3
 800e228:	d04d      	beq.n	800e2c6 <vTaskPriorityDisinheritAfterTimeout+0xf6>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e22a:	69bb      	ldr	r3, [r7, #24]
 800e22c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e22e:	697a      	ldr	r2, [r7, #20]
 800e230:	429a      	cmp	r2, r3
 800e232:	d148      	bne.n	800e2c6 <vTaskPriorityDisinheritAfterTimeout+0xf6>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800e234:	4b26      	ldr	r3, [pc, #152]	; (800e2d0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	69ba      	ldr	r2, [r7, #24]
 800e23a:	429a      	cmp	r2, r3
 800e23c:	d10c      	bne.n	800e258 <vTaskPriorityDisinheritAfterTimeout+0x88>
	__asm volatile
 800e23e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e242:	b672      	cpsid	i
 800e244:	f383 8811 	msr	BASEPRI, r3
 800e248:	f3bf 8f6f 	isb	sy
 800e24c:	f3bf 8f4f 	dsb	sy
 800e250:	b662      	cpsie	i
 800e252:	60bb      	str	r3, [r7, #8]
}
 800e254:	bf00      	nop
 800e256:	e7fe      	b.n	800e256 <vTaskPriorityDisinheritAfterTimeout+0x86>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e258:	69bb      	ldr	r3, [r7, #24]
 800e25a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e25c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800e25e:	69bb      	ldr	r3, [r7, #24]
 800e260:	69fa      	ldr	r2, [r7, #28]
 800e262:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e264:	69bb      	ldr	r3, [r7, #24]
 800e266:	699b      	ldr	r3, [r3, #24]
 800e268:	2b00      	cmp	r3, #0
 800e26a:	db04      	blt.n	800e276 <vTaskPriorityDisinheritAfterTimeout+0xa6>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e26c:	69fb      	ldr	r3, [r7, #28]
 800e26e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e272:	69bb      	ldr	r3, [r7, #24]
 800e274:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e276:	69bb      	ldr	r3, [r7, #24]
 800e278:	6959      	ldr	r1, [r3, #20]
 800e27a:	693a      	ldr	r2, [r7, #16]
 800e27c:	4613      	mov	r3, r2
 800e27e:	009b      	lsls	r3, r3, #2
 800e280:	4413      	add	r3, r2
 800e282:	009b      	lsls	r3, r3, #2
 800e284:	4a13      	ldr	r2, [pc, #76]	; (800e2d4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800e286:	4413      	add	r3, r2
 800e288:	4299      	cmp	r1, r3
 800e28a:	d11c      	bne.n	800e2c6 <vTaskPriorityDisinheritAfterTimeout+0xf6>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e28c:	69bb      	ldr	r3, [r7, #24]
 800e28e:	3304      	adds	r3, #4
 800e290:	4618      	mov	r0, r3
 800e292:	f7fd fe85 	bl	800bfa0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800e296:	69bb      	ldr	r3, [r7, #24]
 800e298:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e29a:	4b0f      	ldr	r3, [pc, #60]	; (800e2d8 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	429a      	cmp	r2, r3
 800e2a0:	d903      	bls.n	800e2aa <vTaskPriorityDisinheritAfterTimeout+0xda>
 800e2a2:	69bb      	ldr	r3, [r7, #24]
 800e2a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2a6:	4a0c      	ldr	r2, [pc, #48]	; (800e2d8 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800e2a8:	6013      	str	r3, [r2, #0]
 800e2aa:	69bb      	ldr	r3, [r7, #24]
 800e2ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2ae:	4613      	mov	r3, r2
 800e2b0:	009b      	lsls	r3, r3, #2
 800e2b2:	4413      	add	r3, r2
 800e2b4:	009b      	lsls	r3, r3, #2
 800e2b6:	4a07      	ldr	r2, [pc, #28]	; (800e2d4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800e2b8:	441a      	add	r2, r3
 800e2ba:	69bb      	ldr	r3, [r7, #24]
 800e2bc:	3304      	adds	r3, #4
 800e2be:	4619      	mov	r1, r3
 800e2c0:	4610      	mov	r0, r2
 800e2c2:	f7fd fe10 	bl	800bee6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e2c6:	bf00      	nop
 800e2c8:	3720      	adds	r7, #32
 800e2ca:	46bd      	mov	sp, r7
 800e2cc:	bd80      	pop	{r7, pc}
 800e2ce:	bf00      	nop
 800e2d0:	2000a22c 	.word	0x2000a22c
 800e2d4:	2000a230 	.word	0x2000a230
 800e2d8:	2000a708 	.word	0x2000a708

0800e2dc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800e2dc:	b480      	push	{r7}
 800e2de:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800e2e0:	4b07      	ldr	r3, [pc, #28]	; (800e300 <pvTaskIncrementMutexHeldCount+0x24>)
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d004      	beq.n	800e2f2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800e2e8:	4b05      	ldr	r3, [pc, #20]	; (800e300 <pvTaskIncrementMutexHeldCount+0x24>)
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e2ee:	3201      	adds	r2, #1
 800e2f0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800e2f2:	4b03      	ldr	r3, [pc, #12]	; (800e300 <pvTaskIncrementMutexHeldCount+0x24>)
 800e2f4:	681b      	ldr	r3, [r3, #0]
	}
 800e2f6:	4618      	mov	r0, r3
 800e2f8:	46bd      	mov	sp, r7
 800e2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2fe:	4770      	bx	lr
 800e300:	2000a22c 	.word	0x2000a22c

0800e304 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e304:	b580      	push	{r7, lr}
 800e306:	b084      	sub	sp, #16
 800e308:	af00      	add	r7, sp, #0
 800e30a:	6078      	str	r0, [r7, #4]
 800e30c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e30e:	4b21      	ldr	r3, [pc, #132]	; (800e394 <prvAddCurrentTaskToDelayedList+0x90>)
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e314:	4b20      	ldr	r3, [pc, #128]	; (800e398 <prvAddCurrentTaskToDelayedList+0x94>)
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	3304      	adds	r3, #4
 800e31a:	4618      	mov	r0, r3
 800e31c:	f7fd fe40 	bl	800bfa0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e326:	d10a      	bne.n	800e33e <prvAddCurrentTaskToDelayedList+0x3a>
 800e328:	683b      	ldr	r3, [r7, #0]
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d007      	beq.n	800e33e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e32e:	4b1a      	ldr	r3, [pc, #104]	; (800e398 <prvAddCurrentTaskToDelayedList+0x94>)
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	3304      	adds	r3, #4
 800e334:	4619      	mov	r1, r3
 800e336:	4819      	ldr	r0, [pc, #100]	; (800e39c <prvAddCurrentTaskToDelayedList+0x98>)
 800e338:	f7fd fdd5 	bl	800bee6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e33c:	e026      	b.n	800e38c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e33e:	68fa      	ldr	r2, [r7, #12]
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	4413      	add	r3, r2
 800e344:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e346:	4b14      	ldr	r3, [pc, #80]	; (800e398 <prvAddCurrentTaskToDelayedList+0x94>)
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	68ba      	ldr	r2, [r7, #8]
 800e34c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e34e:	68ba      	ldr	r2, [r7, #8]
 800e350:	68fb      	ldr	r3, [r7, #12]
 800e352:	429a      	cmp	r2, r3
 800e354:	d209      	bcs.n	800e36a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e356:	4b12      	ldr	r3, [pc, #72]	; (800e3a0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800e358:	681a      	ldr	r2, [r3, #0]
 800e35a:	4b0f      	ldr	r3, [pc, #60]	; (800e398 <prvAddCurrentTaskToDelayedList+0x94>)
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	3304      	adds	r3, #4
 800e360:	4619      	mov	r1, r3
 800e362:	4610      	mov	r0, r2
 800e364:	f7fd fde3 	bl	800bf2e <vListInsert>
}
 800e368:	e010      	b.n	800e38c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e36a:	4b0e      	ldr	r3, [pc, #56]	; (800e3a4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800e36c:	681a      	ldr	r2, [r3, #0]
 800e36e:	4b0a      	ldr	r3, [pc, #40]	; (800e398 <prvAddCurrentTaskToDelayedList+0x94>)
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	3304      	adds	r3, #4
 800e374:	4619      	mov	r1, r3
 800e376:	4610      	mov	r0, r2
 800e378:	f7fd fdd9 	bl	800bf2e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e37c:	4b0a      	ldr	r3, [pc, #40]	; (800e3a8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	68ba      	ldr	r2, [r7, #8]
 800e382:	429a      	cmp	r2, r3
 800e384:	d202      	bcs.n	800e38c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800e386:	4a08      	ldr	r2, [pc, #32]	; (800e3a8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e388:	68bb      	ldr	r3, [r7, #8]
 800e38a:	6013      	str	r3, [r2, #0]
}
 800e38c:	bf00      	nop
 800e38e:	3710      	adds	r7, #16
 800e390:	46bd      	mov	sp, r7
 800e392:	bd80      	pop	{r7, pc}
 800e394:	2000a704 	.word	0x2000a704
 800e398:	2000a22c 	.word	0x2000a22c
 800e39c:	2000a6ec 	.word	0x2000a6ec
 800e3a0:	2000a6bc 	.word	0x2000a6bc
 800e3a4:	2000a6b8 	.word	0x2000a6b8
 800e3a8:	2000a720 	.word	0x2000a720

0800e3ac <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e3ac:	b580      	push	{r7, lr}
 800e3ae:	b08a      	sub	sp, #40	; 0x28
 800e3b0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e3b2:	2300      	movs	r3, #0
 800e3b4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e3b6:	f000 fb15 	bl	800e9e4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e3ba:	4b1d      	ldr	r3, [pc, #116]	; (800e430 <xTimerCreateTimerTask+0x84>)
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d021      	beq.n	800e406 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e3c2:	2300      	movs	r3, #0
 800e3c4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e3c6:	2300      	movs	r3, #0
 800e3c8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e3ca:	1d3a      	adds	r2, r7, #4
 800e3cc:	f107 0108 	add.w	r1, r7, #8
 800e3d0:	f107 030c 	add.w	r3, r7, #12
 800e3d4:	4618      	mov	r0, r3
 800e3d6:	f7fd fd3f 	bl	800be58 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e3da:	6879      	ldr	r1, [r7, #4]
 800e3dc:	68bb      	ldr	r3, [r7, #8]
 800e3de:	68fa      	ldr	r2, [r7, #12]
 800e3e0:	9202      	str	r2, [sp, #8]
 800e3e2:	9301      	str	r3, [sp, #4]
 800e3e4:	2302      	movs	r3, #2
 800e3e6:	9300      	str	r3, [sp, #0]
 800e3e8:	2300      	movs	r3, #0
 800e3ea:	460a      	mov	r2, r1
 800e3ec:	4911      	ldr	r1, [pc, #68]	; (800e434 <xTimerCreateTimerTask+0x88>)
 800e3ee:	4812      	ldr	r0, [pc, #72]	; (800e438 <xTimerCreateTimerTask+0x8c>)
 800e3f0:	f7fe ff10 	bl	800d214 <xTaskCreateStatic>
 800e3f4:	4603      	mov	r3, r0
 800e3f6:	4a11      	ldr	r2, [pc, #68]	; (800e43c <xTimerCreateTimerTask+0x90>)
 800e3f8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e3fa:	4b10      	ldr	r3, [pc, #64]	; (800e43c <xTimerCreateTimerTask+0x90>)
 800e3fc:	681b      	ldr	r3, [r3, #0]
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d001      	beq.n	800e406 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800e402:	2301      	movs	r3, #1
 800e404:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e406:	697b      	ldr	r3, [r7, #20]
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d10c      	bne.n	800e426 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 800e40c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e410:	b672      	cpsid	i
 800e412:	f383 8811 	msr	BASEPRI, r3
 800e416:	f3bf 8f6f 	isb	sy
 800e41a:	f3bf 8f4f 	dsb	sy
 800e41e:	b662      	cpsie	i
 800e420:	613b      	str	r3, [r7, #16]
}
 800e422:	bf00      	nop
 800e424:	e7fe      	b.n	800e424 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800e426:	697b      	ldr	r3, [r7, #20]
}
 800e428:	4618      	mov	r0, r3
 800e42a:	3718      	adds	r7, #24
 800e42c:	46bd      	mov	sp, r7
 800e42e:	bd80      	pop	{r7, pc}
 800e430:	2000a75c 	.word	0x2000a75c
 800e434:	0801ba94 	.word	0x0801ba94
 800e438:	0800e57d 	.word	0x0800e57d
 800e43c:	2000a760 	.word	0x2000a760

0800e440 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e440:	b580      	push	{r7, lr}
 800e442:	b08a      	sub	sp, #40	; 0x28
 800e444:	af00      	add	r7, sp, #0
 800e446:	60f8      	str	r0, [r7, #12]
 800e448:	60b9      	str	r1, [r7, #8]
 800e44a:	607a      	str	r2, [r7, #4]
 800e44c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e44e:	2300      	movs	r3, #0
 800e450:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	2b00      	cmp	r3, #0
 800e456:	d10c      	bne.n	800e472 <xTimerGenericCommand+0x32>
	__asm volatile
 800e458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e45c:	b672      	cpsid	i
 800e45e:	f383 8811 	msr	BASEPRI, r3
 800e462:	f3bf 8f6f 	isb	sy
 800e466:	f3bf 8f4f 	dsb	sy
 800e46a:	b662      	cpsie	i
 800e46c:	623b      	str	r3, [r7, #32]
}
 800e46e:	bf00      	nop
 800e470:	e7fe      	b.n	800e470 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e472:	4b1a      	ldr	r3, [pc, #104]	; (800e4dc <xTimerGenericCommand+0x9c>)
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	2b00      	cmp	r3, #0
 800e478:	d02a      	beq.n	800e4d0 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e47a:	68bb      	ldr	r3, [r7, #8]
 800e47c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e486:	68bb      	ldr	r3, [r7, #8]
 800e488:	2b05      	cmp	r3, #5
 800e48a:	dc18      	bgt.n	800e4be <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e48c:	f7ff fda8 	bl	800dfe0 <xTaskGetSchedulerState>
 800e490:	4603      	mov	r3, r0
 800e492:	2b02      	cmp	r3, #2
 800e494:	d109      	bne.n	800e4aa <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e496:	4b11      	ldr	r3, [pc, #68]	; (800e4dc <xTimerGenericCommand+0x9c>)
 800e498:	6818      	ldr	r0, [r3, #0]
 800e49a:	f107 0110 	add.w	r1, r7, #16
 800e49e:	2300      	movs	r3, #0
 800e4a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e4a2:	f7fe f825 	bl	800c4f0 <xQueueGenericSend>
 800e4a6:	6278      	str	r0, [r7, #36]	; 0x24
 800e4a8:	e012      	b.n	800e4d0 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e4aa:	4b0c      	ldr	r3, [pc, #48]	; (800e4dc <xTimerGenericCommand+0x9c>)
 800e4ac:	6818      	ldr	r0, [r3, #0]
 800e4ae:	f107 0110 	add.w	r1, r7, #16
 800e4b2:	2300      	movs	r3, #0
 800e4b4:	2200      	movs	r2, #0
 800e4b6:	f7fe f81b 	bl	800c4f0 <xQueueGenericSend>
 800e4ba:	6278      	str	r0, [r7, #36]	; 0x24
 800e4bc:	e008      	b.n	800e4d0 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e4be:	4b07      	ldr	r3, [pc, #28]	; (800e4dc <xTimerGenericCommand+0x9c>)
 800e4c0:	6818      	ldr	r0, [r3, #0]
 800e4c2:	f107 0110 	add.w	r1, r7, #16
 800e4c6:	2300      	movs	r3, #0
 800e4c8:	683a      	ldr	r2, [r7, #0]
 800e4ca:	f7fe f917 	bl	800c6fc <xQueueGenericSendFromISR>
 800e4ce:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800e4d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e4d2:	4618      	mov	r0, r3
 800e4d4:	3728      	adds	r7, #40	; 0x28
 800e4d6:	46bd      	mov	sp, r7
 800e4d8:	bd80      	pop	{r7, pc}
 800e4da:	bf00      	nop
 800e4dc:	2000a75c 	.word	0x2000a75c

0800e4e0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800e4e0:	b580      	push	{r7, lr}
 800e4e2:	b088      	sub	sp, #32
 800e4e4:	af02      	add	r7, sp, #8
 800e4e6:	6078      	str	r0, [r7, #4]
 800e4e8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e4ea:	4b23      	ldr	r3, [pc, #140]	; (800e578 <prvProcessExpiredTimer+0x98>)
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	68db      	ldr	r3, [r3, #12]
 800e4f0:	68db      	ldr	r3, [r3, #12]
 800e4f2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e4f4:	697b      	ldr	r3, [r7, #20]
 800e4f6:	3304      	adds	r3, #4
 800e4f8:	4618      	mov	r0, r3
 800e4fa:	f7fd fd51 	bl	800bfa0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e4fe:	697b      	ldr	r3, [r7, #20]
 800e500:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e504:	f003 0304 	and.w	r3, r3, #4
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d024      	beq.n	800e556 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e50c:	697b      	ldr	r3, [r7, #20]
 800e50e:	699a      	ldr	r2, [r3, #24]
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	18d1      	adds	r1, r2, r3
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	683a      	ldr	r2, [r7, #0]
 800e518:	6978      	ldr	r0, [r7, #20]
 800e51a:	f000 f8d3 	bl	800e6c4 <prvInsertTimerInActiveList>
 800e51e:	4603      	mov	r3, r0
 800e520:	2b00      	cmp	r3, #0
 800e522:	d021      	beq.n	800e568 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e524:	2300      	movs	r3, #0
 800e526:	9300      	str	r3, [sp, #0]
 800e528:	2300      	movs	r3, #0
 800e52a:	687a      	ldr	r2, [r7, #4]
 800e52c:	2100      	movs	r1, #0
 800e52e:	6978      	ldr	r0, [r7, #20]
 800e530:	f7ff ff86 	bl	800e440 <xTimerGenericCommand>
 800e534:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800e536:	693b      	ldr	r3, [r7, #16]
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d115      	bne.n	800e568 <prvProcessExpiredTimer+0x88>
	__asm volatile
 800e53c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e540:	b672      	cpsid	i
 800e542:	f383 8811 	msr	BASEPRI, r3
 800e546:	f3bf 8f6f 	isb	sy
 800e54a:	f3bf 8f4f 	dsb	sy
 800e54e:	b662      	cpsie	i
 800e550:	60fb      	str	r3, [r7, #12]
}
 800e552:	bf00      	nop
 800e554:	e7fe      	b.n	800e554 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e556:	697b      	ldr	r3, [r7, #20]
 800e558:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e55c:	f023 0301 	bic.w	r3, r3, #1
 800e560:	b2da      	uxtb	r2, r3
 800e562:	697b      	ldr	r3, [r7, #20]
 800e564:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e568:	697b      	ldr	r3, [r7, #20]
 800e56a:	6a1b      	ldr	r3, [r3, #32]
 800e56c:	6978      	ldr	r0, [r7, #20]
 800e56e:	4798      	blx	r3
}
 800e570:	bf00      	nop
 800e572:	3718      	adds	r7, #24
 800e574:	46bd      	mov	sp, r7
 800e576:	bd80      	pop	{r7, pc}
 800e578:	2000a754 	.word	0x2000a754

0800e57c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800e57c:	b580      	push	{r7, lr}
 800e57e:	b084      	sub	sp, #16
 800e580:	af00      	add	r7, sp, #0
 800e582:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e584:	f107 0308 	add.w	r3, r7, #8
 800e588:	4618      	mov	r0, r3
 800e58a:	f000 f857 	bl	800e63c <prvGetNextExpireTime>
 800e58e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e590:	68bb      	ldr	r3, [r7, #8]
 800e592:	4619      	mov	r1, r3
 800e594:	68f8      	ldr	r0, [r7, #12]
 800e596:	f000 f803 	bl	800e5a0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e59a:	f000 f8d5 	bl	800e748 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e59e:	e7f1      	b.n	800e584 <prvTimerTask+0x8>

0800e5a0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e5a0:	b580      	push	{r7, lr}
 800e5a2:	b084      	sub	sp, #16
 800e5a4:	af00      	add	r7, sp, #0
 800e5a6:	6078      	str	r0, [r7, #4]
 800e5a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e5aa:	f7ff f901 	bl	800d7b0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e5ae:	f107 0308 	add.w	r3, r7, #8
 800e5b2:	4618      	mov	r0, r3
 800e5b4:	f000 f866 	bl	800e684 <prvSampleTimeNow>
 800e5b8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e5ba:	68bb      	ldr	r3, [r7, #8]
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d130      	bne.n	800e622 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e5c0:	683b      	ldr	r3, [r7, #0]
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d10a      	bne.n	800e5dc <prvProcessTimerOrBlockTask+0x3c>
 800e5c6:	687a      	ldr	r2, [r7, #4]
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	429a      	cmp	r2, r3
 800e5cc:	d806      	bhi.n	800e5dc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e5ce:	f7ff f8fd 	bl	800d7cc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e5d2:	68f9      	ldr	r1, [r7, #12]
 800e5d4:	6878      	ldr	r0, [r7, #4]
 800e5d6:	f7ff ff83 	bl	800e4e0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e5da:	e024      	b.n	800e626 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e5dc:	683b      	ldr	r3, [r7, #0]
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d008      	beq.n	800e5f4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e5e2:	4b13      	ldr	r3, [pc, #76]	; (800e630 <prvProcessTimerOrBlockTask+0x90>)
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d101      	bne.n	800e5f0 <prvProcessTimerOrBlockTask+0x50>
 800e5ec:	2301      	movs	r3, #1
 800e5ee:	e000      	b.n	800e5f2 <prvProcessTimerOrBlockTask+0x52>
 800e5f0:	2300      	movs	r3, #0
 800e5f2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e5f4:	4b0f      	ldr	r3, [pc, #60]	; (800e634 <prvProcessTimerOrBlockTask+0x94>)
 800e5f6:	6818      	ldr	r0, [r3, #0]
 800e5f8:	687a      	ldr	r2, [r7, #4]
 800e5fa:	68fb      	ldr	r3, [r7, #12]
 800e5fc:	1ad3      	subs	r3, r2, r3
 800e5fe:	683a      	ldr	r2, [r7, #0]
 800e600:	4619      	mov	r1, r3
 800e602:	f7fe fdd3 	bl	800d1ac <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e606:	f7ff f8e1 	bl	800d7cc <xTaskResumeAll>
 800e60a:	4603      	mov	r3, r0
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d10a      	bne.n	800e626 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e610:	4b09      	ldr	r3, [pc, #36]	; (800e638 <prvProcessTimerOrBlockTask+0x98>)
 800e612:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e616:	601a      	str	r2, [r3, #0]
 800e618:	f3bf 8f4f 	dsb	sy
 800e61c:	f3bf 8f6f 	isb	sy
}
 800e620:	e001      	b.n	800e626 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e622:	f7ff f8d3 	bl	800d7cc <xTaskResumeAll>
}
 800e626:	bf00      	nop
 800e628:	3710      	adds	r7, #16
 800e62a:	46bd      	mov	sp, r7
 800e62c:	bd80      	pop	{r7, pc}
 800e62e:	bf00      	nop
 800e630:	2000a758 	.word	0x2000a758
 800e634:	2000a75c 	.word	0x2000a75c
 800e638:	e000ed04 	.word	0xe000ed04

0800e63c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e63c:	b480      	push	{r7}
 800e63e:	b085      	sub	sp, #20
 800e640:	af00      	add	r7, sp, #0
 800e642:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e644:	4b0e      	ldr	r3, [pc, #56]	; (800e680 <prvGetNextExpireTime+0x44>)
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d101      	bne.n	800e652 <prvGetNextExpireTime+0x16>
 800e64e:	2201      	movs	r2, #1
 800e650:	e000      	b.n	800e654 <prvGetNextExpireTime+0x18>
 800e652:	2200      	movs	r2, #0
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d105      	bne.n	800e66c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e660:	4b07      	ldr	r3, [pc, #28]	; (800e680 <prvGetNextExpireTime+0x44>)
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	68db      	ldr	r3, [r3, #12]
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	60fb      	str	r3, [r7, #12]
 800e66a:	e001      	b.n	800e670 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e66c:	2300      	movs	r3, #0
 800e66e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e670:	68fb      	ldr	r3, [r7, #12]
}
 800e672:	4618      	mov	r0, r3
 800e674:	3714      	adds	r7, #20
 800e676:	46bd      	mov	sp, r7
 800e678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e67c:	4770      	bx	lr
 800e67e:	bf00      	nop
 800e680:	2000a754 	.word	0x2000a754

0800e684 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e684:	b580      	push	{r7, lr}
 800e686:	b084      	sub	sp, #16
 800e688:	af00      	add	r7, sp, #0
 800e68a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e68c:	f7ff f93e 	bl	800d90c <xTaskGetTickCount>
 800e690:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e692:	4b0b      	ldr	r3, [pc, #44]	; (800e6c0 <prvSampleTimeNow+0x3c>)
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	68fa      	ldr	r2, [r7, #12]
 800e698:	429a      	cmp	r2, r3
 800e69a:	d205      	bcs.n	800e6a8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e69c:	f000 f93c 	bl	800e918 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	2201      	movs	r2, #1
 800e6a4:	601a      	str	r2, [r3, #0]
 800e6a6:	e002      	b.n	800e6ae <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	2200      	movs	r2, #0
 800e6ac:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e6ae:	4a04      	ldr	r2, [pc, #16]	; (800e6c0 <prvSampleTimeNow+0x3c>)
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e6b4:	68fb      	ldr	r3, [r7, #12]
}
 800e6b6:	4618      	mov	r0, r3
 800e6b8:	3710      	adds	r7, #16
 800e6ba:	46bd      	mov	sp, r7
 800e6bc:	bd80      	pop	{r7, pc}
 800e6be:	bf00      	nop
 800e6c0:	2000a764 	.word	0x2000a764

0800e6c4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e6c4:	b580      	push	{r7, lr}
 800e6c6:	b086      	sub	sp, #24
 800e6c8:	af00      	add	r7, sp, #0
 800e6ca:	60f8      	str	r0, [r7, #12]
 800e6cc:	60b9      	str	r1, [r7, #8]
 800e6ce:	607a      	str	r2, [r7, #4]
 800e6d0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e6d2:	2300      	movs	r3, #0
 800e6d4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e6d6:	68fb      	ldr	r3, [r7, #12]
 800e6d8:	68ba      	ldr	r2, [r7, #8]
 800e6da:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	68fa      	ldr	r2, [r7, #12]
 800e6e0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e6e2:	68ba      	ldr	r2, [r7, #8]
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	429a      	cmp	r2, r3
 800e6e8:	d812      	bhi.n	800e710 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e6ea:	687a      	ldr	r2, [r7, #4]
 800e6ec:	683b      	ldr	r3, [r7, #0]
 800e6ee:	1ad2      	subs	r2, r2, r3
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	699b      	ldr	r3, [r3, #24]
 800e6f4:	429a      	cmp	r2, r3
 800e6f6:	d302      	bcc.n	800e6fe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e6f8:	2301      	movs	r3, #1
 800e6fa:	617b      	str	r3, [r7, #20]
 800e6fc:	e01b      	b.n	800e736 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e6fe:	4b10      	ldr	r3, [pc, #64]	; (800e740 <prvInsertTimerInActiveList+0x7c>)
 800e700:	681a      	ldr	r2, [r3, #0]
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	3304      	adds	r3, #4
 800e706:	4619      	mov	r1, r3
 800e708:	4610      	mov	r0, r2
 800e70a:	f7fd fc10 	bl	800bf2e <vListInsert>
 800e70e:	e012      	b.n	800e736 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e710:	687a      	ldr	r2, [r7, #4]
 800e712:	683b      	ldr	r3, [r7, #0]
 800e714:	429a      	cmp	r2, r3
 800e716:	d206      	bcs.n	800e726 <prvInsertTimerInActiveList+0x62>
 800e718:	68ba      	ldr	r2, [r7, #8]
 800e71a:	683b      	ldr	r3, [r7, #0]
 800e71c:	429a      	cmp	r2, r3
 800e71e:	d302      	bcc.n	800e726 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e720:	2301      	movs	r3, #1
 800e722:	617b      	str	r3, [r7, #20]
 800e724:	e007      	b.n	800e736 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e726:	4b07      	ldr	r3, [pc, #28]	; (800e744 <prvInsertTimerInActiveList+0x80>)
 800e728:	681a      	ldr	r2, [r3, #0]
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	3304      	adds	r3, #4
 800e72e:	4619      	mov	r1, r3
 800e730:	4610      	mov	r0, r2
 800e732:	f7fd fbfc 	bl	800bf2e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e736:	697b      	ldr	r3, [r7, #20]
}
 800e738:	4618      	mov	r0, r3
 800e73a:	3718      	adds	r7, #24
 800e73c:	46bd      	mov	sp, r7
 800e73e:	bd80      	pop	{r7, pc}
 800e740:	2000a758 	.word	0x2000a758
 800e744:	2000a754 	.word	0x2000a754

0800e748 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e748:	b580      	push	{r7, lr}
 800e74a:	b08e      	sub	sp, #56	; 0x38
 800e74c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e74e:	e0d0      	b.n	800e8f2 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	2b00      	cmp	r3, #0
 800e754:	da1a      	bge.n	800e78c <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e756:	1d3b      	adds	r3, r7, #4
 800e758:	3304      	adds	r3, #4
 800e75a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800e75c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d10c      	bne.n	800e77c <prvProcessReceivedCommands+0x34>
	__asm volatile
 800e762:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e766:	b672      	cpsid	i
 800e768:	f383 8811 	msr	BASEPRI, r3
 800e76c:	f3bf 8f6f 	isb	sy
 800e770:	f3bf 8f4f 	dsb	sy
 800e774:	b662      	cpsie	i
 800e776:	61fb      	str	r3, [r7, #28]
}
 800e778:	bf00      	nop
 800e77a:	e7fe      	b.n	800e77a <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e77c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e782:	6850      	ldr	r0, [r2, #4]
 800e784:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e786:	6892      	ldr	r2, [r2, #8]
 800e788:	4611      	mov	r1, r2
 800e78a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	2b00      	cmp	r3, #0
 800e790:	f2c0 80ae 	blt.w	800e8f0 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e79a:	695b      	ldr	r3, [r3, #20]
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d004      	beq.n	800e7aa <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e7a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7a2:	3304      	adds	r3, #4
 800e7a4:	4618      	mov	r0, r3
 800e7a6:	f7fd fbfb 	bl	800bfa0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e7aa:	463b      	mov	r3, r7
 800e7ac:	4618      	mov	r0, r3
 800e7ae:	f7ff ff69 	bl	800e684 <prvSampleTimeNow>
 800e7b2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	2b09      	cmp	r3, #9
 800e7b8:	f200 809b 	bhi.w	800e8f2 <prvProcessReceivedCommands+0x1aa>
 800e7bc:	a201      	add	r2, pc, #4	; (adr r2, 800e7c4 <prvProcessReceivedCommands+0x7c>)
 800e7be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7c2:	bf00      	nop
 800e7c4:	0800e7ed 	.word	0x0800e7ed
 800e7c8:	0800e7ed 	.word	0x0800e7ed
 800e7cc:	0800e7ed 	.word	0x0800e7ed
 800e7d0:	0800e865 	.word	0x0800e865
 800e7d4:	0800e879 	.word	0x0800e879
 800e7d8:	0800e8c7 	.word	0x0800e8c7
 800e7dc:	0800e7ed 	.word	0x0800e7ed
 800e7e0:	0800e7ed 	.word	0x0800e7ed
 800e7e4:	0800e865 	.word	0x0800e865
 800e7e8:	0800e879 	.word	0x0800e879
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e7ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e7f2:	f043 0301 	orr.w	r3, r3, #1
 800e7f6:	b2da      	uxtb	r2, r3
 800e7f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e7fe:	68ba      	ldr	r2, [r7, #8]
 800e800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e802:	699b      	ldr	r3, [r3, #24]
 800e804:	18d1      	adds	r1, r2, r3
 800e806:	68bb      	ldr	r3, [r7, #8]
 800e808:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e80a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e80c:	f7ff ff5a 	bl	800e6c4 <prvInsertTimerInActiveList>
 800e810:	4603      	mov	r3, r0
 800e812:	2b00      	cmp	r3, #0
 800e814:	d06d      	beq.n	800e8f2 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e818:	6a1b      	ldr	r3, [r3, #32]
 800e81a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e81c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e81e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e820:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e824:	f003 0304 	and.w	r3, r3, #4
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d062      	beq.n	800e8f2 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e82c:	68ba      	ldr	r2, [r7, #8]
 800e82e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e830:	699b      	ldr	r3, [r3, #24]
 800e832:	441a      	add	r2, r3
 800e834:	2300      	movs	r3, #0
 800e836:	9300      	str	r3, [sp, #0]
 800e838:	2300      	movs	r3, #0
 800e83a:	2100      	movs	r1, #0
 800e83c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e83e:	f7ff fdff 	bl	800e440 <xTimerGenericCommand>
 800e842:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800e844:	6a3b      	ldr	r3, [r7, #32]
 800e846:	2b00      	cmp	r3, #0
 800e848:	d153      	bne.n	800e8f2 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800e84a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e84e:	b672      	cpsid	i
 800e850:	f383 8811 	msr	BASEPRI, r3
 800e854:	f3bf 8f6f 	isb	sy
 800e858:	f3bf 8f4f 	dsb	sy
 800e85c:	b662      	cpsie	i
 800e85e:	61bb      	str	r3, [r7, #24]
}
 800e860:	bf00      	nop
 800e862:	e7fe      	b.n	800e862 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e866:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e86a:	f023 0301 	bic.w	r3, r3, #1
 800e86e:	b2da      	uxtb	r2, r3
 800e870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e872:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800e876:	e03c      	b.n	800e8f2 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e87a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e87e:	f043 0301 	orr.w	r3, r3, #1
 800e882:	b2da      	uxtb	r2, r3
 800e884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e886:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e88a:	68ba      	ldr	r2, [r7, #8]
 800e88c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e88e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e892:	699b      	ldr	r3, [r3, #24]
 800e894:	2b00      	cmp	r3, #0
 800e896:	d10c      	bne.n	800e8b2 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 800e898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e89c:	b672      	cpsid	i
 800e89e:	f383 8811 	msr	BASEPRI, r3
 800e8a2:	f3bf 8f6f 	isb	sy
 800e8a6:	f3bf 8f4f 	dsb	sy
 800e8aa:	b662      	cpsie	i
 800e8ac:	617b      	str	r3, [r7, #20]
}
 800e8ae:	bf00      	nop
 800e8b0:	e7fe      	b.n	800e8b0 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e8b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8b4:	699a      	ldr	r2, [r3, #24]
 800e8b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8b8:	18d1      	adds	r1, r2, r3
 800e8ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e8be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e8c0:	f7ff ff00 	bl	800e6c4 <prvInsertTimerInActiveList>
					break;
 800e8c4:	e015      	b.n	800e8f2 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e8c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e8cc:	f003 0302 	and.w	r3, r3, #2
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d103      	bne.n	800e8dc <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 800e8d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e8d6:	f000 fbc7 	bl	800f068 <vPortFree>
 800e8da:	e00a      	b.n	800e8f2 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e8dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e8e2:	f023 0301 	bic.w	r3, r3, #1
 800e8e6:	b2da      	uxtb	r2, r3
 800e8e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e8ee:	e000      	b.n	800e8f2 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800e8f0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e8f2:	4b08      	ldr	r3, [pc, #32]	; (800e914 <prvProcessReceivedCommands+0x1cc>)
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	1d39      	adds	r1, r7, #4
 800e8f8:	2200      	movs	r2, #0
 800e8fa:	4618      	mov	r0, r3
 800e8fc:	f7fe f834 	bl	800c968 <xQueueReceive>
 800e900:	4603      	mov	r3, r0
 800e902:	2b00      	cmp	r3, #0
 800e904:	f47f af24 	bne.w	800e750 <prvProcessReceivedCommands+0x8>
	}
}
 800e908:	bf00      	nop
 800e90a:	bf00      	nop
 800e90c:	3730      	adds	r7, #48	; 0x30
 800e90e:	46bd      	mov	sp, r7
 800e910:	bd80      	pop	{r7, pc}
 800e912:	bf00      	nop
 800e914:	2000a75c 	.word	0x2000a75c

0800e918 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e918:	b580      	push	{r7, lr}
 800e91a:	b088      	sub	sp, #32
 800e91c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e91e:	e04a      	b.n	800e9b6 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e920:	4b2e      	ldr	r3, [pc, #184]	; (800e9dc <prvSwitchTimerLists+0xc4>)
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	68db      	ldr	r3, [r3, #12]
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e92a:	4b2c      	ldr	r3, [pc, #176]	; (800e9dc <prvSwitchTimerLists+0xc4>)
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	68db      	ldr	r3, [r3, #12]
 800e930:	68db      	ldr	r3, [r3, #12]
 800e932:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e934:	68fb      	ldr	r3, [r7, #12]
 800e936:	3304      	adds	r3, #4
 800e938:	4618      	mov	r0, r3
 800e93a:	f7fd fb31 	bl	800bfa0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e93e:	68fb      	ldr	r3, [r7, #12]
 800e940:	6a1b      	ldr	r3, [r3, #32]
 800e942:	68f8      	ldr	r0, [r7, #12]
 800e944:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e946:	68fb      	ldr	r3, [r7, #12]
 800e948:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e94c:	f003 0304 	and.w	r3, r3, #4
 800e950:	2b00      	cmp	r3, #0
 800e952:	d030      	beq.n	800e9b6 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	699b      	ldr	r3, [r3, #24]
 800e958:	693a      	ldr	r2, [r7, #16]
 800e95a:	4413      	add	r3, r2
 800e95c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e95e:	68ba      	ldr	r2, [r7, #8]
 800e960:	693b      	ldr	r3, [r7, #16]
 800e962:	429a      	cmp	r2, r3
 800e964:	d90e      	bls.n	800e984 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	68ba      	ldr	r2, [r7, #8]
 800e96a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	68fa      	ldr	r2, [r7, #12]
 800e970:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e972:	4b1a      	ldr	r3, [pc, #104]	; (800e9dc <prvSwitchTimerLists+0xc4>)
 800e974:	681a      	ldr	r2, [r3, #0]
 800e976:	68fb      	ldr	r3, [r7, #12]
 800e978:	3304      	adds	r3, #4
 800e97a:	4619      	mov	r1, r3
 800e97c:	4610      	mov	r0, r2
 800e97e:	f7fd fad6 	bl	800bf2e <vListInsert>
 800e982:	e018      	b.n	800e9b6 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e984:	2300      	movs	r3, #0
 800e986:	9300      	str	r3, [sp, #0]
 800e988:	2300      	movs	r3, #0
 800e98a:	693a      	ldr	r2, [r7, #16]
 800e98c:	2100      	movs	r1, #0
 800e98e:	68f8      	ldr	r0, [r7, #12]
 800e990:	f7ff fd56 	bl	800e440 <xTimerGenericCommand>
 800e994:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d10c      	bne.n	800e9b6 <prvSwitchTimerLists+0x9e>
	__asm volatile
 800e99c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9a0:	b672      	cpsid	i
 800e9a2:	f383 8811 	msr	BASEPRI, r3
 800e9a6:	f3bf 8f6f 	isb	sy
 800e9aa:	f3bf 8f4f 	dsb	sy
 800e9ae:	b662      	cpsie	i
 800e9b0:	603b      	str	r3, [r7, #0]
}
 800e9b2:	bf00      	nop
 800e9b4:	e7fe      	b.n	800e9b4 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e9b6:	4b09      	ldr	r3, [pc, #36]	; (800e9dc <prvSwitchTimerLists+0xc4>)
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d1af      	bne.n	800e920 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e9c0:	4b06      	ldr	r3, [pc, #24]	; (800e9dc <prvSwitchTimerLists+0xc4>)
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e9c6:	4b06      	ldr	r3, [pc, #24]	; (800e9e0 <prvSwitchTimerLists+0xc8>)
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	4a04      	ldr	r2, [pc, #16]	; (800e9dc <prvSwitchTimerLists+0xc4>)
 800e9cc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e9ce:	4a04      	ldr	r2, [pc, #16]	; (800e9e0 <prvSwitchTimerLists+0xc8>)
 800e9d0:	697b      	ldr	r3, [r7, #20]
 800e9d2:	6013      	str	r3, [r2, #0]
}
 800e9d4:	bf00      	nop
 800e9d6:	3718      	adds	r7, #24
 800e9d8:	46bd      	mov	sp, r7
 800e9da:	bd80      	pop	{r7, pc}
 800e9dc:	2000a754 	.word	0x2000a754
 800e9e0:	2000a758 	.word	0x2000a758

0800e9e4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e9e4:	b580      	push	{r7, lr}
 800e9e6:	b082      	sub	sp, #8
 800e9e8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e9ea:	f000 f947 	bl	800ec7c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e9ee:	4b15      	ldr	r3, [pc, #84]	; (800ea44 <prvCheckForValidListAndQueue+0x60>)
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d120      	bne.n	800ea38 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e9f6:	4814      	ldr	r0, [pc, #80]	; (800ea48 <prvCheckForValidListAndQueue+0x64>)
 800e9f8:	f7fd fa48 	bl	800be8c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e9fc:	4813      	ldr	r0, [pc, #76]	; (800ea4c <prvCheckForValidListAndQueue+0x68>)
 800e9fe:	f7fd fa45 	bl	800be8c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ea02:	4b13      	ldr	r3, [pc, #76]	; (800ea50 <prvCheckForValidListAndQueue+0x6c>)
 800ea04:	4a10      	ldr	r2, [pc, #64]	; (800ea48 <prvCheckForValidListAndQueue+0x64>)
 800ea06:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ea08:	4b12      	ldr	r3, [pc, #72]	; (800ea54 <prvCheckForValidListAndQueue+0x70>)
 800ea0a:	4a10      	ldr	r2, [pc, #64]	; (800ea4c <prvCheckForValidListAndQueue+0x68>)
 800ea0c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ea0e:	2300      	movs	r3, #0
 800ea10:	9300      	str	r3, [sp, #0]
 800ea12:	4b11      	ldr	r3, [pc, #68]	; (800ea58 <prvCheckForValidListAndQueue+0x74>)
 800ea14:	4a11      	ldr	r2, [pc, #68]	; (800ea5c <prvCheckForValidListAndQueue+0x78>)
 800ea16:	2110      	movs	r1, #16
 800ea18:	200a      	movs	r0, #10
 800ea1a:	f7fd fb55 	bl	800c0c8 <xQueueGenericCreateStatic>
 800ea1e:	4603      	mov	r3, r0
 800ea20:	4a08      	ldr	r2, [pc, #32]	; (800ea44 <prvCheckForValidListAndQueue+0x60>)
 800ea22:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ea24:	4b07      	ldr	r3, [pc, #28]	; (800ea44 <prvCheckForValidListAndQueue+0x60>)
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d005      	beq.n	800ea38 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ea2c:	4b05      	ldr	r3, [pc, #20]	; (800ea44 <prvCheckForValidListAndQueue+0x60>)
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	490b      	ldr	r1, [pc, #44]	; (800ea60 <prvCheckForValidListAndQueue+0x7c>)
 800ea32:	4618      	mov	r0, r3
 800ea34:	f7fe fb66 	bl	800d104 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ea38:	f000 f954 	bl	800ece4 <vPortExitCritical>
}
 800ea3c:	bf00      	nop
 800ea3e:	46bd      	mov	sp, r7
 800ea40:	bd80      	pop	{r7, pc}
 800ea42:	bf00      	nop
 800ea44:	2000a75c 	.word	0x2000a75c
 800ea48:	2000a72c 	.word	0x2000a72c
 800ea4c:	2000a740 	.word	0x2000a740
 800ea50:	2000a754 	.word	0x2000a754
 800ea54:	2000a758 	.word	0x2000a758
 800ea58:	2000a808 	.word	0x2000a808
 800ea5c:	2000a768 	.word	0x2000a768
 800ea60:	0801ba9c 	.word	0x0801ba9c

0800ea64 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ea64:	b480      	push	{r7}
 800ea66:	b085      	sub	sp, #20
 800ea68:	af00      	add	r7, sp, #0
 800ea6a:	60f8      	str	r0, [r7, #12]
 800ea6c:	60b9      	str	r1, [r7, #8]
 800ea6e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ea70:	68fb      	ldr	r3, [r7, #12]
 800ea72:	3b04      	subs	r3, #4
 800ea74:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ea7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ea7e:	68fb      	ldr	r3, [r7, #12]
 800ea80:	3b04      	subs	r3, #4
 800ea82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ea84:	68bb      	ldr	r3, [r7, #8]
 800ea86:	f023 0201 	bic.w	r2, r3, #1
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	3b04      	subs	r3, #4
 800ea92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ea94:	4a0c      	ldr	r2, [pc, #48]	; (800eac8 <pxPortInitialiseStack+0x64>)
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	3b14      	subs	r3, #20
 800ea9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800eaa0:	687a      	ldr	r2, [r7, #4]
 800eaa2:	68fb      	ldr	r3, [r7, #12]
 800eaa4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800eaa6:	68fb      	ldr	r3, [r7, #12]
 800eaa8:	3b04      	subs	r3, #4
 800eaaa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	f06f 0202 	mvn.w	r2, #2
 800eab2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	3b20      	subs	r3, #32
 800eab8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800eaba:	68fb      	ldr	r3, [r7, #12]
}
 800eabc:	4618      	mov	r0, r3
 800eabe:	3714      	adds	r7, #20
 800eac0:	46bd      	mov	sp, r7
 800eac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eac6:	4770      	bx	lr
 800eac8:	0800eacd 	.word	0x0800eacd

0800eacc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800eacc:	b480      	push	{r7}
 800eace:	b085      	sub	sp, #20
 800ead0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ead2:	2300      	movs	r3, #0
 800ead4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ead6:	4b14      	ldr	r3, [pc, #80]	; (800eb28 <prvTaskExitError+0x5c>)
 800ead8:	681b      	ldr	r3, [r3, #0]
 800eada:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eade:	d00c      	beq.n	800eafa <prvTaskExitError+0x2e>
	__asm volatile
 800eae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eae4:	b672      	cpsid	i
 800eae6:	f383 8811 	msr	BASEPRI, r3
 800eaea:	f3bf 8f6f 	isb	sy
 800eaee:	f3bf 8f4f 	dsb	sy
 800eaf2:	b662      	cpsie	i
 800eaf4:	60fb      	str	r3, [r7, #12]
}
 800eaf6:	bf00      	nop
 800eaf8:	e7fe      	b.n	800eaf8 <prvTaskExitError+0x2c>
	__asm volatile
 800eafa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eafe:	b672      	cpsid	i
 800eb00:	f383 8811 	msr	BASEPRI, r3
 800eb04:	f3bf 8f6f 	isb	sy
 800eb08:	f3bf 8f4f 	dsb	sy
 800eb0c:	b662      	cpsie	i
 800eb0e:	60bb      	str	r3, [r7, #8]
}
 800eb10:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800eb12:	bf00      	nop
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d0fc      	beq.n	800eb14 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800eb1a:	bf00      	nop
 800eb1c:	bf00      	nop
 800eb1e:	3714      	adds	r7, #20
 800eb20:	46bd      	mov	sp, r7
 800eb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb26:	4770      	bx	lr
 800eb28:	2000000c 	.word	0x2000000c
 800eb2c:	00000000 	.word	0x00000000

0800eb30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800eb30:	4b07      	ldr	r3, [pc, #28]	; (800eb50 <pxCurrentTCBConst2>)
 800eb32:	6819      	ldr	r1, [r3, #0]
 800eb34:	6808      	ldr	r0, [r1, #0]
 800eb36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb3a:	f380 8809 	msr	PSP, r0
 800eb3e:	f3bf 8f6f 	isb	sy
 800eb42:	f04f 0000 	mov.w	r0, #0
 800eb46:	f380 8811 	msr	BASEPRI, r0
 800eb4a:	4770      	bx	lr
 800eb4c:	f3af 8000 	nop.w

0800eb50 <pxCurrentTCBConst2>:
 800eb50:	2000a22c 	.word	0x2000a22c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800eb54:	bf00      	nop
 800eb56:	bf00      	nop

0800eb58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800eb58:	4808      	ldr	r0, [pc, #32]	; (800eb7c <prvPortStartFirstTask+0x24>)
 800eb5a:	6800      	ldr	r0, [r0, #0]
 800eb5c:	6800      	ldr	r0, [r0, #0]
 800eb5e:	f380 8808 	msr	MSP, r0
 800eb62:	f04f 0000 	mov.w	r0, #0
 800eb66:	f380 8814 	msr	CONTROL, r0
 800eb6a:	b662      	cpsie	i
 800eb6c:	b661      	cpsie	f
 800eb6e:	f3bf 8f4f 	dsb	sy
 800eb72:	f3bf 8f6f 	isb	sy
 800eb76:	df00      	svc	0
 800eb78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800eb7a:	bf00      	nop
 800eb7c:	e000ed08 	.word	0xe000ed08

0800eb80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800eb80:	b580      	push	{r7, lr}
 800eb82:	b084      	sub	sp, #16
 800eb84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800eb86:	4b37      	ldr	r3, [pc, #220]	; (800ec64 <xPortStartScheduler+0xe4>)
 800eb88:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800eb8a:	68fb      	ldr	r3, [r7, #12]
 800eb8c:	781b      	ldrb	r3, [r3, #0]
 800eb8e:	b2db      	uxtb	r3, r3
 800eb90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	22ff      	movs	r2, #255	; 0xff
 800eb96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	781b      	ldrb	r3, [r3, #0]
 800eb9c:	b2db      	uxtb	r3, r3
 800eb9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800eba0:	78fb      	ldrb	r3, [r7, #3]
 800eba2:	b2db      	uxtb	r3, r3
 800eba4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800eba8:	b2da      	uxtb	r2, r3
 800ebaa:	4b2f      	ldr	r3, [pc, #188]	; (800ec68 <xPortStartScheduler+0xe8>)
 800ebac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ebae:	4b2f      	ldr	r3, [pc, #188]	; (800ec6c <xPortStartScheduler+0xec>)
 800ebb0:	2207      	movs	r2, #7
 800ebb2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ebb4:	e009      	b.n	800ebca <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800ebb6:	4b2d      	ldr	r3, [pc, #180]	; (800ec6c <xPortStartScheduler+0xec>)
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	3b01      	subs	r3, #1
 800ebbc:	4a2b      	ldr	r2, [pc, #172]	; (800ec6c <xPortStartScheduler+0xec>)
 800ebbe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ebc0:	78fb      	ldrb	r3, [r7, #3]
 800ebc2:	b2db      	uxtb	r3, r3
 800ebc4:	005b      	lsls	r3, r3, #1
 800ebc6:	b2db      	uxtb	r3, r3
 800ebc8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ebca:	78fb      	ldrb	r3, [r7, #3]
 800ebcc:	b2db      	uxtb	r3, r3
 800ebce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ebd2:	2b80      	cmp	r3, #128	; 0x80
 800ebd4:	d0ef      	beq.n	800ebb6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ebd6:	4b25      	ldr	r3, [pc, #148]	; (800ec6c <xPortStartScheduler+0xec>)
 800ebd8:	681b      	ldr	r3, [r3, #0]
 800ebda:	f1c3 0307 	rsb	r3, r3, #7
 800ebde:	2b04      	cmp	r3, #4
 800ebe0:	d00c      	beq.n	800ebfc <xPortStartScheduler+0x7c>
	__asm volatile
 800ebe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebe6:	b672      	cpsid	i
 800ebe8:	f383 8811 	msr	BASEPRI, r3
 800ebec:	f3bf 8f6f 	isb	sy
 800ebf0:	f3bf 8f4f 	dsb	sy
 800ebf4:	b662      	cpsie	i
 800ebf6:	60bb      	str	r3, [r7, #8]
}
 800ebf8:	bf00      	nop
 800ebfa:	e7fe      	b.n	800ebfa <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ebfc:	4b1b      	ldr	r3, [pc, #108]	; (800ec6c <xPortStartScheduler+0xec>)
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	021b      	lsls	r3, r3, #8
 800ec02:	4a1a      	ldr	r2, [pc, #104]	; (800ec6c <xPortStartScheduler+0xec>)
 800ec04:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ec06:	4b19      	ldr	r3, [pc, #100]	; (800ec6c <xPortStartScheduler+0xec>)
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ec0e:	4a17      	ldr	r2, [pc, #92]	; (800ec6c <xPortStartScheduler+0xec>)
 800ec10:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	b2da      	uxtb	r2, r3
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ec1a:	4b15      	ldr	r3, [pc, #84]	; (800ec70 <xPortStartScheduler+0xf0>)
 800ec1c:	681b      	ldr	r3, [r3, #0]
 800ec1e:	4a14      	ldr	r2, [pc, #80]	; (800ec70 <xPortStartScheduler+0xf0>)
 800ec20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ec24:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ec26:	4b12      	ldr	r3, [pc, #72]	; (800ec70 <xPortStartScheduler+0xf0>)
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	4a11      	ldr	r2, [pc, #68]	; (800ec70 <xPortStartScheduler+0xf0>)
 800ec2c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ec30:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ec32:	f000 f8dd 	bl	800edf0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ec36:	4b0f      	ldr	r3, [pc, #60]	; (800ec74 <xPortStartScheduler+0xf4>)
 800ec38:	2200      	movs	r2, #0
 800ec3a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ec3c:	f000 f8fc 	bl	800ee38 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ec40:	4b0d      	ldr	r3, [pc, #52]	; (800ec78 <xPortStartScheduler+0xf8>)
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	4a0c      	ldr	r2, [pc, #48]	; (800ec78 <xPortStartScheduler+0xf8>)
 800ec46:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ec4a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ec4c:	f7ff ff84 	bl	800eb58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ec50:	f7fe ff3a 	bl	800dac8 <vTaskSwitchContext>
	prvTaskExitError();
 800ec54:	f7ff ff3a 	bl	800eacc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ec58:	2300      	movs	r3, #0
}
 800ec5a:	4618      	mov	r0, r3
 800ec5c:	3710      	adds	r7, #16
 800ec5e:	46bd      	mov	sp, r7
 800ec60:	bd80      	pop	{r7, pc}
 800ec62:	bf00      	nop
 800ec64:	e000e400 	.word	0xe000e400
 800ec68:	2000a858 	.word	0x2000a858
 800ec6c:	2000a85c 	.word	0x2000a85c
 800ec70:	e000ed20 	.word	0xe000ed20
 800ec74:	2000000c 	.word	0x2000000c
 800ec78:	e000ef34 	.word	0xe000ef34

0800ec7c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ec7c:	b480      	push	{r7}
 800ec7e:	b083      	sub	sp, #12
 800ec80:	af00      	add	r7, sp, #0
	__asm volatile
 800ec82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec86:	b672      	cpsid	i
 800ec88:	f383 8811 	msr	BASEPRI, r3
 800ec8c:	f3bf 8f6f 	isb	sy
 800ec90:	f3bf 8f4f 	dsb	sy
 800ec94:	b662      	cpsie	i
 800ec96:	607b      	str	r3, [r7, #4]
}
 800ec98:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ec9a:	4b10      	ldr	r3, [pc, #64]	; (800ecdc <vPortEnterCritical+0x60>)
 800ec9c:	681b      	ldr	r3, [r3, #0]
 800ec9e:	3301      	adds	r3, #1
 800eca0:	4a0e      	ldr	r2, [pc, #56]	; (800ecdc <vPortEnterCritical+0x60>)
 800eca2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800eca4:	4b0d      	ldr	r3, [pc, #52]	; (800ecdc <vPortEnterCritical+0x60>)
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	2b01      	cmp	r3, #1
 800ecaa:	d111      	bne.n	800ecd0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ecac:	4b0c      	ldr	r3, [pc, #48]	; (800ece0 <vPortEnterCritical+0x64>)
 800ecae:	681b      	ldr	r3, [r3, #0]
 800ecb0:	b2db      	uxtb	r3, r3
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d00c      	beq.n	800ecd0 <vPortEnterCritical+0x54>
	__asm volatile
 800ecb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecba:	b672      	cpsid	i
 800ecbc:	f383 8811 	msr	BASEPRI, r3
 800ecc0:	f3bf 8f6f 	isb	sy
 800ecc4:	f3bf 8f4f 	dsb	sy
 800ecc8:	b662      	cpsie	i
 800ecca:	603b      	str	r3, [r7, #0]
}
 800eccc:	bf00      	nop
 800ecce:	e7fe      	b.n	800ecce <vPortEnterCritical+0x52>
	}
}
 800ecd0:	bf00      	nop
 800ecd2:	370c      	adds	r7, #12
 800ecd4:	46bd      	mov	sp, r7
 800ecd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecda:	4770      	bx	lr
 800ecdc:	2000000c 	.word	0x2000000c
 800ece0:	e000ed04 	.word	0xe000ed04

0800ece4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ece4:	b480      	push	{r7}
 800ece6:	b083      	sub	sp, #12
 800ece8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ecea:	4b13      	ldr	r3, [pc, #76]	; (800ed38 <vPortExitCritical+0x54>)
 800ecec:	681b      	ldr	r3, [r3, #0]
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d10c      	bne.n	800ed0c <vPortExitCritical+0x28>
	__asm volatile
 800ecf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecf6:	b672      	cpsid	i
 800ecf8:	f383 8811 	msr	BASEPRI, r3
 800ecfc:	f3bf 8f6f 	isb	sy
 800ed00:	f3bf 8f4f 	dsb	sy
 800ed04:	b662      	cpsie	i
 800ed06:	607b      	str	r3, [r7, #4]
}
 800ed08:	bf00      	nop
 800ed0a:	e7fe      	b.n	800ed0a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800ed0c:	4b0a      	ldr	r3, [pc, #40]	; (800ed38 <vPortExitCritical+0x54>)
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	3b01      	subs	r3, #1
 800ed12:	4a09      	ldr	r2, [pc, #36]	; (800ed38 <vPortExitCritical+0x54>)
 800ed14:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ed16:	4b08      	ldr	r3, [pc, #32]	; (800ed38 <vPortExitCritical+0x54>)
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d105      	bne.n	800ed2a <vPortExitCritical+0x46>
 800ed1e:	2300      	movs	r3, #0
 800ed20:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ed22:	683b      	ldr	r3, [r7, #0]
 800ed24:	f383 8811 	msr	BASEPRI, r3
}
 800ed28:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ed2a:	bf00      	nop
 800ed2c:	370c      	adds	r7, #12
 800ed2e:	46bd      	mov	sp, r7
 800ed30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed34:	4770      	bx	lr
 800ed36:	bf00      	nop
 800ed38:	2000000c 	.word	0x2000000c
 800ed3c:	00000000 	.word	0x00000000

0800ed40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ed40:	f3ef 8009 	mrs	r0, PSP
 800ed44:	f3bf 8f6f 	isb	sy
 800ed48:	4b15      	ldr	r3, [pc, #84]	; (800eda0 <pxCurrentTCBConst>)
 800ed4a:	681a      	ldr	r2, [r3, #0]
 800ed4c:	f01e 0f10 	tst.w	lr, #16
 800ed50:	bf08      	it	eq
 800ed52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ed56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed5a:	6010      	str	r0, [r2, #0]
 800ed5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ed60:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ed64:	b672      	cpsid	i
 800ed66:	f380 8811 	msr	BASEPRI, r0
 800ed6a:	f3bf 8f4f 	dsb	sy
 800ed6e:	f3bf 8f6f 	isb	sy
 800ed72:	b662      	cpsie	i
 800ed74:	f7fe fea8 	bl	800dac8 <vTaskSwitchContext>
 800ed78:	f04f 0000 	mov.w	r0, #0
 800ed7c:	f380 8811 	msr	BASEPRI, r0
 800ed80:	bc09      	pop	{r0, r3}
 800ed82:	6819      	ldr	r1, [r3, #0]
 800ed84:	6808      	ldr	r0, [r1, #0]
 800ed86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed8a:	f01e 0f10 	tst.w	lr, #16
 800ed8e:	bf08      	it	eq
 800ed90:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ed94:	f380 8809 	msr	PSP, r0
 800ed98:	f3bf 8f6f 	isb	sy
 800ed9c:	4770      	bx	lr
 800ed9e:	bf00      	nop

0800eda0 <pxCurrentTCBConst>:
 800eda0:	2000a22c 	.word	0x2000a22c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800eda4:	bf00      	nop
 800eda6:	bf00      	nop

0800eda8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800eda8:	b580      	push	{r7, lr}
 800edaa:	b082      	sub	sp, #8
 800edac:	af00      	add	r7, sp, #0
	__asm volatile
 800edae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edb2:	b672      	cpsid	i
 800edb4:	f383 8811 	msr	BASEPRI, r3
 800edb8:	f3bf 8f6f 	isb	sy
 800edbc:	f3bf 8f4f 	dsb	sy
 800edc0:	b662      	cpsie	i
 800edc2:	607b      	str	r3, [r7, #4]
}
 800edc4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800edc6:	f7fe fdc3 	bl	800d950 <xTaskIncrementTick>
 800edca:	4603      	mov	r3, r0
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d003      	beq.n	800edd8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800edd0:	4b06      	ldr	r3, [pc, #24]	; (800edec <SysTick_Handler+0x44>)
 800edd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800edd6:	601a      	str	r2, [r3, #0]
 800edd8:	2300      	movs	r3, #0
 800edda:	603b      	str	r3, [r7, #0]
	__asm volatile
 800eddc:	683b      	ldr	r3, [r7, #0]
 800edde:	f383 8811 	msr	BASEPRI, r3
}
 800ede2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ede4:	bf00      	nop
 800ede6:	3708      	adds	r7, #8
 800ede8:	46bd      	mov	sp, r7
 800edea:	bd80      	pop	{r7, pc}
 800edec:	e000ed04 	.word	0xe000ed04

0800edf0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800edf0:	b480      	push	{r7}
 800edf2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800edf4:	4b0b      	ldr	r3, [pc, #44]	; (800ee24 <vPortSetupTimerInterrupt+0x34>)
 800edf6:	2200      	movs	r2, #0
 800edf8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800edfa:	4b0b      	ldr	r3, [pc, #44]	; (800ee28 <vPortSetupTimerInterrupt+0x38>)
 800edfc:	2200      	movs	r2, #0
 800edfe:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ee00:	4b0a      	ldr	r3, [pc, #40]	; (800ee2c <vPortSetupTimerInterrupt+0x3c>)
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	4a0a      	ldr	r2, [pc, #40]	; (800ee30 <vPortSetupTimerInterrupt+0x40>)
 800ee06:	fba2 2303 	umull	r2, r3, r2, r3
 800ee0a:	099b      	lsrs	r3, r3, #6
 800ee0c:	4a09      	ldr	r2, [pc, #36]	; (800ee34 <vPortSetupTimerInterrupt+0x44>)
 800ee0e:	3b01      	subs	r3, #1
 800ee10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ee12:	4b04      	ldr	r3, [pc, #16]	; (800ee24 <vPortSetupTimerInterrupt+0x34>)
 800ee14:	2207      	movs	r2, #7
 800ee16:	601a      	str	r2, [r3, #0]
}
 800ee18:	bf00      	nop
 800ee1a:	46bd      	mov	sp, r7
 800ee1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee20:	4770      	bx	lr
 800ee22:	bf00      	nop
 800ee24:	e000e010 	.word	0xe000e010
 800ee28:	e000e018 	.word	0xe000e018
 800ee2c:	20000000 	.word	0x20000000
 800ee30:	10624dd3 	.word	0x10624dd3
 800ee34:	e000e014 	.word	0xe000e014

0800ee38 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ee38:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ee48 <vPortEnableVFP+0x10>
 800ee3c:	6801      	ldr	r1, [r0, #0]
 800ee3e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ee42:	6001      	str	r1, [r0, #0]
 800ee44:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ee46:	bf00      	nop
 800ee48:	e000ed88 	.word	0xe000ed88

0800ee4c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ee4c:	b480      	push	{r7}
 800ee4e:	b085      	sub	sp, #20
 800ee50:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ee52:	f3ef 8305 	mrs	r3, IPSR
 800ee56:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ee58:	68fb      	ldr	r3, [r7, #12]
 800ee5a:	2b0f      	cmp	r3, #15
 800ee5c:	d916      	bls.n	800ee8c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ee5e:	4a19      	ldr	r2, [pc, #100]	; (800eec4 <vPortValidateInterruptPriority+0x78>)
 800ee60:	68fb      	ldr	r3, [r7, #12]
 800ee62:	4413      	add	r3, r2
 800ee64:	781b      	ldrb	r3, [r3, #0]
 800ee66:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ee68:	4b17      	ldr	r3, [pc, #92]	; (800eec8 <vPortValidateInterruptPriority+0x7c>)
 800ee6a:	781b      	ldrb	r3, [r3, #0]
 800ee6c:	7afa      	ldrb	r2, [r7, #11]
 800ee6e:	429a      	cmp	r2, r3
 800ee70:	d20c      	bcs.n	800ee8c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800ee72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee76:	b672      	cpsid	i
 800ee78:	f383 8811 	msr	BASEPRI, r3
 800ee7c:	f3bf 8f6f 	isb	sy
 800ee80:	f3bf 8f4f 	dsb	sy
 800ee84:	b662      	cpsie	i
 800ee86:	607b      	str	r3, [r7, #4]
}
 800ee88:	bf00      	nop
 800ee8a:	e7fe      	b.n	800ee8a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ee8c:	4b0f      	ldr	r3, [pc, #60]	; (800eecc <vPortValidateInterruptPriority+0x80>)
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ee94:	4b0e      	ldr	r3, [pc, #56]	; (800eed0 <vPortValidateInterruptPriority+0x84>)
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	429a      	cmp	r2, r3
 800ee9a:	d90c      	bls.n	800eeb6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800ee9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eea0:	b672      	cpsid	i
 800eea2:	f383 8811 	msr	BASEPRI, r3
 800eea6:	f3bf 8f6f 	isb	sy
 800eeaa:	f3bf 8f4f 	dsb	sy
 800eeae:	b662      	cpsie	i
 800eeb0:	603b      	str	r3, [r7, #0]
}
 800eeb2:	bf00      	nop
 800eeb4:	e7fe      	b.n	800eeb4 <vPortValidateInterruptPriority+0x68>
	}
 800eeb6:	bf00      	nop
 800eeb8:	3714      	adds	r7, #20
 800eeba:	46bd      	mov	sp, r7
 800eebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eec0:	4770      	bx	lr
 800eec2:	bf00      	nop
 800eec4:	e000e3f0 	.word	0xe000e3f0
 800eec8:	2000a858 	.word	0x2000a858
 800eecc:	e000ed0c 	.word	0xe000ed0c
 800eed0:	2000a85c 	.word	0x2000a85c

0800eed4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800eed4:	b580      	push	{r7, lr}
 800eed6:	b08a      	sub	sp, #40	; 0x28
 800eed8:	af00      	add	r7, sp, #0
 800eeda:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800eedc:	2300      	movs	r3, #0
 800eede:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800eee0:	f7fe fc66 	bl	800d7b0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800eee4:	4b5b      	ldr	r3, [pc, #364]	; (800f054 <pvPortMalloc+0x180>)
 800eee6:	681b      	ldr	r3, [r3, #0]
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	d101      	bne.n	800eef0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800eeec:	f000 f91a 	bl	800f124 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800eef0:	4b59      	ldr	r3, [pc, #356]	; (800f058 <pvPortMalloc+0x184>)
 800eef2:	681a      	ldr	r2, [r3, #0]
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	4013      	ands	r3, r2
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	f040 8092 	bne.w	800f022 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d01f      	beq.n	800ef44 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800ef04:	2208      	movs	r2, #8
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	4413      	add	r3, r2
 800ef0a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	f003 0307 	and.w	r3, r3, #7
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	d016      	beq.n	800ef44 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	f023 0307 	bic.w	r3, r3, #7
 800ef1c:	3308      	adds	r3, #8
 800ef1e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	f003 0307 	and.w	r3, r3, #7
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d00c      	beq.n	800ef44 <pvPortMalloc+0x70>
	__asm volatile
 800ef2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef2e:	b672      	cpsid	i
 800ef30:	f383 8811 	msr	BASEPRI, r3
 800ef34:	f3bf 8f6f 	isb	sy
 800ef38:	f3bf 8f4f 	dsb	sy
 800ef3c:	b662      	cpsie	i
 800ef3e:	617b      	str	r3, [r7, #20]
}
 800ef40:	bf00      	nop
 800ef42:	e7fe      	b.n	800ef42 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d06b      	beq.n	800f022 <pvPortMalloc+0x14e>
 800ef4a:	4b44      	ldr	r3, [pc, #272]	; (800f05c <pvPortMalloc+0x188>)
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	687a      	ldr	r2, [r7, #4]
 800ef50:	429a      	cmp	r2, r3
 800ef52:	d866      	bhi.n	800f022 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ef54:	4b42      	ldr	r3, [pc, #264]	; (800f060 <pvPortMalloc+0x18c>)
 800ef56:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ef58:	4b41      	ldr	r3, [pc, #260]	; (800f060 <pvPortMalloc+0x18c>)
 800ef5a:	681b      	ldr	r3, [r3, #0]
 800ef5c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ef5e:	e004      	b.n	800ef6a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800ef60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef62:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ef64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ef6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef6c:	685b      	ldr	r3, [r3, #4]
 800ef6e:	687a      	ldr	r2, [r7, #4]
 800ef70:	429a      	cmp	r2, r3
 800ef72:	d903      	bls.n	800ef7c <pvPortMalloc+0xa8>
 800ef74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef76:	681b      	ldr	r3, [r3, #0]
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	d1f1      	bne.n	800ef60 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ef7c:	4b35      	ldr	r3, [pc, #212]	; (800f054 <pvPortMalloc+0x180>)
 800ef7e:	681b      	ldr	r3, [r3, #0]
 800ef80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ef82:	429a      	cmp	r2, r3
 800ef84:	d04d      	beq.n	800f022 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ef86:	6a3b      	ldr	r3, [r7, #32]
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	2208      	movs	r2, #8
 800ef8c:	4413      	add	r3, r2
 800ef8e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ef90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef92:	681a      	ldr	r2, [r3, #0]
 800ef94:	6a3b      	ldr	r3, [r7, #32]
 800ef96:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ef98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef9a:	685a      	ldr	r2, [r3, #4]
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	1ad2      	subs	r2, r2, r3
 800efa0:	2308      	movs	r3, #8
 800efa2:	005b      	lsls	r3, r3, #1
 800efa4:	429a      	cmp	r2, r3
 800efa6:	d921      	bls.n	800efec <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800efa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	4413      	add	r3, r2
 800efae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800efb0:	69bb      	ldr	r3, [r7, #24]
 800efb2:	f003 0307 	and.w	r3, r3, #7
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d00c      	beq.n	800efd4 <pvPortMalloc+0x100>
	__asm volatile
 800efba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efbe:	b672      	cpsid	i
 800efc0:	f383 8811 	msr	BASEPRI, r3
 800efc4:	f3bf 8f6f 	isb	sy
 800efc8:	f3bf 8f4f 	dsb	sy
 800efcc:	b662      	cpsie	i
 800efce:	613b      	str	r3, [r7, #16]
}
 800efd0:	bf00      	nop
 800efd2:	e7fe      	b.n	800efd2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800efd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efd6:	685a      	ldr	r2, [r3, #4]
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	1ad2      	subs	r2, r2, r3
 800efdc:	69bb      	ldr	r3, [r7, #24]
 800efde:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800efe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efe2:	687a      	ldr	r2, [r7, #4]
 800efe4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800efe6:	69b8      	ldr	r0, [r7, #24]
 800efe8:	f000 f900 	bl	800f1ec <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800efec:	4b1b      	ldr	r3, [pc, #108]	; (800f05c <pvPortMalloc+0x188>)
 800efee:	681a      	ldr	r2, [r3, #0]
 800eff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eff2:	685b      	ldr	r3, [r3, #4]
 800eff4:	1ad3      	subs	r3, r2, r3
 800eff6:	4a19      	ldr	r2, [pc, #100]	; (800f05c <pvPortMalloc+0x188>)
 800eff8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800effa:	4b18      	ldr	r3, [pc, #96]	; (800f05c <pvPortMalloc+0x188>)
 800effc:	681a      	ldr	r2, [r3, #0]
 800effe:	4b19      	ldr	r3, [pc, #100]	; (800f064 <pvPortMalloc+0x190>)
 800f000:	681b      	ldr	r3, [r3, #0]
 800f002:	429a      	cmp	r2, r3
 800f004:	d203      	bcs.n	800f00e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f006:	4b15      	ldr	r3, [pc, #84]	; (800f05c <pvPortMalloc+0x188>)
 800f008:	681b      	ldr	r3, [r3, #0]
 800f00a:	4a16      	ldr	r2, [pc, #88]	; (800f064 <pvPortMalloc+0x190>)
 800f00c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f00e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f010:	685a      	ldr	r2, [r3, #4]
 800f012:	4b11      	ldr	r3, [pc, #68]	; (800f058 <pvPortMalloc+0x184>)
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	431a      	orrs	r2, r3
 800f018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f01a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f01c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f01e:	2200      	movs	r2, #0
 800f020:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f022:	f7fe fbd3 	bl	800d7cc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f026:	69fb      	ldr	r3, [r7, #28]
 800f028:	f003 0307 	and.w	r3, r3, #7
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d00c      	beq.n	800f04a <pvPortMalloc+0x176>
	__asm volatile
 800f030:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f034:	b672      	cpsid	i
 800f036:	f383 8811 	msr	BASEPRI, r3
 800f03a:	f3bf 8f6f 	isb	sy
 800f03e:	f3bf 8f4f 	dsb	sy
 800f042:	b662      	cpsie	i
 800f044:	60fb      	str	r3, [r7, #12]
}
 800f046:	bf00      	nop
 800f048:	e7fe      	b.n	800f048 <pvPortMalloc+0x174>
	return pvReturn;
 800f04a:	69fb      	ldr	r3, [r7, #28]
}
 800f04c:	4618      	mov	r0, r3
 800f04e:	3728      	adds	r7, #40	; 0x28
 800f050:	46bd      	mov	sp, r7
 800f052:	bd80      	pop	{r7, pc}
 800f054:	2001e0e8 	.word	0x2001e0e8
 800f058:	2001e0f4 	.word	0x2001e0f4
 800f05c:	2001e0ec 	.word	0x2001e0ec
 800f060:	2001e0e0 	.word	0x2001e0e0
 800f064:	2001e0f0 	.word	0x2001e0f0

0800f068 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f068:	b580      	push	{r7, lr}
 800f06a:	b086      	sub	sp, #24
 800f06c:	af00      	add	r7, sp, #0
 800f06e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	2b00      	cmp	r3, #0
 800f078:	d04c      	beq.n	800f114 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f07a:	2308      	movs	r3, #8
 800f07c:	425b      	negs	r3, r3
 800f07e:	697a      	ldr	r2, [r7, #20]
 800f080:	4413      	add	r3, r2
 800f082:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f084:	697b      	ldr	r3, [r7, #20]
 800f086:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f088:	693b      	ldr	r3, [r7, #16]
 800f08a:	685a      	ldr	r2, [r3, #4]
 800f08c:	4b23      	ldr	r3, [pc, #140]	; (800f11c <vPortFree+0xb4>)
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	4013      	ands	r3, r2
 800f092:	2b00      	cmp	r3, #0
 800f094:	d10c      	bne.n	800f0b0 <vPortFree+0x48>
	__asm volatile
 800f096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f09a:	b672      	cpsid	i
 800f09c:	f383 8811 	msr	BASEPRI, r3
 800f0a0:	f3bf 8f6f 	isb	sy
 800f0a4:	f3bf 8f4f 	dsb	sy
 800f0a8:	b662      	cpsie	i
 800f0aa:	60fb      	str	r3, [r7, #12]
}
 800f0ac:	bf00      	nop
 800f0ae:	e7fe      	b.n	800f0ae <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f0b0:	693b      	ldr	r3, [r7, #16]
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d00c      	beq.n	800f0d2 <vPortFree+0x6a>
	__asm volatile
 800f0b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0bc:	b672      	cpsid	i
 800f0be:	f383 8811 	msr	BASEPRI, r3
 800f0c2:	f3bf 8f6f 	isb	sy
 800f0c6:	f3bf 8f4f 	dsb	sy
 800f0ca:	b662      	cpsie	i
 800f0cc:	60bb      	str	r3, [r7, #8]
}
 800f0ce:	bf00      	nop
 800f0d0:	e7fe      	b.n	800f0d0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f0d2:	693b      	ldr	r3, [r7, #16]
 800f0d4:	685a      	ldr	r2, [r3, #4]
 800f0d6:	4b11      	ldr	r3, [pc, #68]	; (800f11c <vPortFree+0xb4>)
 800f0d8:	681b      	ldr	r3, [r3, #0]
 800f0da:	4013      	ands	r3, r2
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	d019      	beq.n	800f114 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f0e0:	693b      	ldr	r3, [r7, #16]
 800f0e2:	681b      	ldr	r3, [r3, #0]
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d115      	bne.n	800f114 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f0e8:	693b      	ldr	r3, [r7, #16]
 800f0ea:	685a      	ldr	r2, [r3, #4]
 800f0ec:	4b0b      	ldr	r3, [pc, #44]	; (800f11c <vPortFree+0xb4>)
 800f0ee:	681b      	ldr	r3, [r3, #0]
 800f0f0:	43db      	mvns	r3, r3
 800f0f2:	401a      	ands	r2, r3
 800f0f4:	693b      	ldr	r3, [r7, #16]
 800f0f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f0f8:	f7fe fb5a 	bl	800d7b0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f0fc:	693b      	ldr	r3, [r7, #16]
 800f0fe:	685a      	ldr	r2, [r3, #4]
 800f100:	4b07      	ldr	r3, [pc, #28]	; (800f120 <vPortFree+0xb8>)
 800f102:	681b      	ldr	r3, [r3, #0]
 800f104:	4413      	add	r3, r2
 800f106:	4a06      	ldr	r2, [pc, #24]	; (800f120 <vPortFree+0xb8>)
 800f108:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f10a:	6938      	ldr	r0, [r7, #16]
 800f10c:	f000 f86e 	bl	800f1ec <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800f110:	f7fe fb5c 	bl	800d7cc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f114:	bf00      	nop
 800f116:	3718      	adds	r7, #24
 800f118:	46bd      	mov	sp, r7
 800f11a:	bd80      	pop	{r7, pc}
 800f11c:	2001e0f4 	.word	0x2001e0f4
 800f120:	2001e0ec 	.word	0x2001e0ec

0800f124 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f124:	b480      	push	{r7}
 800f126:	b085      	sub	sp, #20
 800f128:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f12a:	4b29      	ldr	r3, [pc, #164]	; (800f1d0 <prvHeapInit+0xac>)
 800f12c:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f12e:	4b29      	ldr	r3, [pc, #164]	; (800f1d4 <prvHeapInit+0xb0>)
 800f130:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f132:	68fb      	ldr	r3, [r7, #12]
 800f134:	f003 0307 	and.w	r3, r3, #7
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d00c      	beq.n	800f156 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f13c:	68fb      	ldr	r3, [r7, #12]
 800f13e:	3307      	adds	r3, #7
 800f140:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f142:	68fb      	ldr	r3, [r7, #12]
 800f144:	f023 0307 	bic.w	r3, r3, #7
 800f148:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f14a:	68ba      	ldr	r2, [r7, #8]
 800f14c:	68fb      	ldr	r3, [r7, #12]
 800f14e:	1ad3      	subs	r3, r2, r3
 800f150:	4a20      	ldr	r2, [pc, #128]	; (800f1d4 <prvHeapInit+0xb0>)
 800f152:	4413      	add	r3, r2
 800f154:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f15a:	4a1f      	ldr	r2, [pc, #124]	; (800f1d8 <prvHeapInit+0xb4>)
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f160:	4b1d      	ldr	r3, [pc, #116]	; (800f1d8 <prvHeapInit+0xb4>)
 800f162:	2200      	movs	r2, #0
 800f164:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	68ba      	ldr	r2, [r7, #8]
 800f16a:	4413      	add	r3, r2
 800f16c:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f16e:	2208      	movs	r2, #8
 800f170:	68fb      	ldr	r3, [r7, #12]
 800f172:	1a9b      	subs	r3, r3, r2
 800f174:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f176:	68fb      	ldr	r3, [r7, #12]
 800f178:	f023 0307 	bic.w	r3, r3, #7
 800f17c:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f17e:	68fb      	ldr	r3, [r7, #12]
 800f180:	4a16      	ldr	r2, [pc, #88]	; (800f1dc <prvHeapInit+0xb8>)
 800f182:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f184:	4b15      	ldr	r3, [pc, #84]	; (800f1dc <prvHeapInit+0xb8>)
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	2200      	movs	r2, #0
 800f18a:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f18c:	4b13      	ldr	r3, [pc, #76]	; (800f1dc <prvHeapInit+0xb8>)
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	2200      	movs	r2, #0
 800f192:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f198:	683b      	ldr	r3, [r7, #0]
 800f19a:	68fa      	ldr	r2, [r7, #12]
 800f19c:	1ad2      	subs	r2, r2, r3
 800f19e:	683b      	ldr	r3, [r7, #0]
 800f1a0:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f1a2:	4b0e      	ldr	r3, [pc, #56]	; (800f1dc <prvHeapInit+0xb8>)
 800f1a4:	681a      	ldr	r2, [r3, #0]
 800f1a6:	683b      	ldr	r3, [r7, #0]
 800f1a8:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f1aa:	683b      	ldr	r3, [r7, #0]
 800f1ac:	685b      	ldr	r3, [r3, #4]
 800f1ae:	4a0c      	ldr	r2, [pc, #48]	; (800f1e0 <prvHeapInit+0xbc>)
 800f1b0:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f1b2:	683b      	ldr	r3, [r7, #0]
 800f1b4:	685b      	ldr	r3, [r3, #4]
 800f1b6:	4a0b      	ldr	r2, [pc, #44]	; (800f1e4 <prvHeapInit+0xc0>)
 800f1b8:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f1ba:	4b0b      	ldr	r3, [pc, #44]	; (800f1e8 <prvHeapInit+0xc4>)
 800f1bc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f1c0:	601a      	str	r2, [r3, #0]
}
 800f1c2:	bf00      	nop
 800f1c4:	3714      	adds	r7, #20
 800f1c6:	46bd      	mov	sp, r7
 800f1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1cc:	4770      	bx	lr
 800f1ce:	bf00      	nop
 800f1d0:	00013880 	.word	0x00013880
 800f1d4:	2000a860 	.word	0x2000a860
 800f1d8:	2001e0e0 	.word	0x2001e0e0
 800f1dc:	2001e0e8 	.word	0x2001e0e8
 800f1e0:	2001e0f0 	.word	0x2001e0f0
 800f1e4:	2001e0ec 	.word	0x2001e0ec
 800f1e8:	2001e0f4 	.word	0x2001e0f4

0800f1ec <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f1ec:	b480      	push	{r7}
 800f1ee:	b085      	sub	sp, #20
 800f1f0:	af00      	add	r7, sp, #0
 800f1f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f1f4:	4b28      	ldr	r3, [pc, #160]	; (800f298 <prvInsertBlockIntoFreeList+0xac>)
 800f1f6:	60fb      	str	r3, [r7, #12]
 800f1f8:	e002      	b.n	800f200 <prvInsertBlockIntoFreeList+0x14>
 800f1fa:	68fb      	ldr	r3, [r7, #12]
 800f1fc:	681b      	ldr	r3, [r3, #0]
 800f1fe:	60fb      	str	r3, [r7, #12]
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	681b      	ldr	r3, [r3, #0]
 800f204:	687a      	ldr	r2, [r7, #4]
 800f206:	429a      	cmp	r2, r3
 800f208:	d8f7      	bhi.n	800f1fa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f20a:	68fb      	ldr	r3, [r7, #12]
 800f20c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f20e:	68fb      	ldr	r3, [r7, #12]
 800f210:	685b      	ldr	r3, [r3, #4]
 800f212:	68ba      	ldr	r2, [r7, #8]
 800f214:	4413      	add	r3, r2
 800f216:	687a      	ldr	r2, [r7, #4]
 800f218:	429a      	cmp	r2, r3
 800f21a:	d108      	bne.n	800f22e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f21c:	68fb      	ldr	r3, [r7, #12]
 800f21e:	685a      	ldr	r2, [r3, #4]
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	685b      	ldr	r3, [r3, #4]
 800f224:	441a      	add	r2, r3
 800f226:	68fb      	ldr	r3, [r7, #12]
 800f228:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f22a:	68fb      	ldr	r3, [r7, #12]
 800f22c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	685b      	ldr	r3, [r3, #4]
 800f236:	68ba      	ldr	r2, [r7, #8]
 800f238:	441a      	add	r2, r3
 800f23a:	68fb      	ldr	r3, [r7, #12]
 800f23c:	681b      	ldr	r3, [r3, #0]
 800f23e:	429a      	cmp	r2, r3
 800f240:	d118      	bne.n	800f274 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f242:	68fb      	ldr	r3, [r7, #12]
 800f244:	681a      	ldr	r2, [r3, #0]
 800f246:	4b15      	ldr	r3, [pc, #84]	; (800f29c <prvInsertBlockIntoFreeList+0xb0>)
 800f248:	681b      	ldr	r3, [r3, #0]
 800f24a:	429a      	cmp	r2, r3
 800f24c:	d00d      	beq.n	800f26a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	685a      	ldr	r2, [r3, #4]
 800f252:	68fb      	ldr	r3, [r7, #12]
 800f254:	681b      	ldr	r3, [r3, #0]
 800f256:	685b      	ldr	r3, [r3, #4]
 800f258:	441a      	add	r2, r3
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f25e:	68fb      	ldr	r3, [r7, #12]
 800f260:	681b      	ldr	r3, [r3, #0]
 800f262:	681a      	ldr	r2, [r3, #0]
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	601a      	str	r2, [r3, #0]
 800f268:	e008      	b.n	800f27c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f26a:	4b0c      	ldr	r3, [pc, #48]	; (800f29c <prvInsertBlockIntoFreeList+0xb0>)
 800f26c:	681a      	ldr	r2, [r3, #0]
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	601a      	str	r2, [r3, #0]
 800f272:	e003      	b.n	800f27c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f274:	68fb      	ldr	r3, [r7, #12]
 800f276:	681a      	ldr	r2, [r3, #0]
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f27c:	68fa      	ldr	r2, [r7, #12]
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	429a      	cmp	r2, r3
 800f282:	d002      	beq.n	800f28a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f284:	68fb      	ldr	r3, [r7, #12]
 800f286:	687a      	ldr	r2, [r7, #4]
 800f288:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f28a:	bf00      	nop
 800f28c:	3714      	adds	r7, #20
 800f28e:	46bd      	mov	sp, r7
 800f290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f294:	4770      	bx	lr
 800f296:	bf00      	nop
 800f298:	2001e0e0 	.word	0x2001e0e0
 800f29c:	2001e0e8 	.word	0x2001e0e8

0800f2a0 <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 800f2a0:	b480      	push	{r7}
 800f2a2:	b083      	sub	sp, #12
 800f2a4:	af00      	add	r7, sp, #0
 800f2a6:	6078      	str	r0, [r7, #4]
    {
 800f2a8:	4a04      	ldr	r2, [pc, #16]	; (800f2bc <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	601a      	str	r2, [r3, #0]
    }
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	4618      	mov	r0, r3
 800f2b2:	370c      	adds	r7, #12
 800f2b4:	46bd      	mov	sp, r7
 800f2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ba:	4770      	bx	lr
 800f2bc:	0801df34 	.word	0x0801df34

0800f2c0 <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 800f2c0:	b580      	push	{r7, lr}
 800f2c2:	b082      	sub	sp, #8
 800f2c4:	af00      	add	r7, sp, #0
 800f2c6:	6078      	str	r0, [r7, #4]
    }
 800f2c8:	6878      	ldr	r0, [r7, #4]
 800f2ca:	f7ff ffe9 	bl	800f2a0 <_ZN8touchgfx12FontProviderD1Ev>
 800f2ce:	2104      	movs	r1, #4
 800f2d0:	6878      	ldr	r0, [r7, #4]
 800f2d2:	f00b f8c7 	bl	801a464 <_ZdlPvj>
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	4618      	mov	r0, r3
 800f2da:	3708      	adds	r7, #8
 800f2dc:	46bd      	mov	sp, r7
 800f2de:	bd80      	pop	{r7, pc}

0800f2e0 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 800f2e0:	b580      	push	{r7, lr}
 800f2e2:	b082      	sub	sp, #8
 800f2e4:	af00      	add	r7, sp, #0
 800f2e6:	6078      	str	r0, [r7, #4]
 800f2e8:	460b      	mov	r3, r1
 800f2ea:	807b      	strh	r3, [r7, #2]
    switch (typography)
 800f2ec:	887b      	ldrh	r3, [r7, #2]
 800f2ee:	2b02      	cmp	r3, #2
 800f2f0:	d010      	beq.n	800f314 <_ZN23ApplicationFontProvider7getFontEt+0x34>
 800f2f2:	2b02      	cmp	r3, #2
 800f2f4:	dc13      	bgt.n	800f31e <_ZN23ApplicationFontProvider7getFontEt+0x3e>
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	d002      	beq.n	800f300 <_ZN23ApplicationFontProvider7getFontEt+0x20>
 800f2fa:	2b01      	cmp	r3, #1
 800f2fc:	d005      	beq.n	800f30a <_ZN23ApplicationFontProvider7getFontEt+0x2a>
 800f2fe:	e00e      	b.n	800f31e <_ZN23ApplicationFontProvider7getFontEt+0x3e>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 800f300:	f000 fc32 	bl	800fb68 <_ZN17TypedTextDatabase8getFontsEv>
 800f304:	4603      	mov	r3, r0
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	e00a      	b.n	800f320 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 800f30a:	f000 fc2d 	bl	800fb68 <_ZN17TypedTextDatabase8getFontsEv>
 800f30e:	4603      	mov	r3, r0
 800f310:	685b      	ldr	r3, [r3, #4]
 800f312:	e005      	b.n	800f320 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800f314:	f000 fc28 	bl	800fb68 <_ZN17TypedTextDatabase8getFontsEv>
 800f318:	4603      	mov	r3, r0
 800f31a:	689b      	ldr	r3, [r3, #8]
 800f31c:	e000      	b.n	800f320 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    default:
        return 0;
 800f31e:	2300      	movs	r3, #0
    }
}
 800f320:	4618      	mov	r0, r3
 800f322:	3708      	adds	r7, #8
 800f324:	46bd      	mov	sp, r7
 800f326:	bd80      	pop	{r7, pc}

0800f328 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 800f328:	b580      	push	{r7, lr}
 800f32a:	b082      	sub	sp, #8
 800f32c:	af00      	add	r7, sp, #0
 800f32e:	6078      	str	r0, [r7, #4]
 800f330:	4a05      	ldr	r2, [pc, #20]	; (800f348 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	601a      	str	r2, [r3, #0]
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	4618      	mov	r0, r3
 800f33a:	f7ff ffb1 	bl	800f2a0 <_ZN8touchgfx12FontProviderD1Ev>
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	4618      	mov	r0, r3
 800f342:	3708      	adds	r7, #8
 800f344:	46bd      	mov	sp, r7
 800f346:	bd80      	pop	{r7, pc}
 800f348:	0801df20 	.word	0x0801df20

0800f34c <_ZN23ApplicationFontProviderD0Ev>:
 800f34c:	b580      	push	{r7, lr}
 800f34e:	b082      	sub	sp, #8
 800f350:	af00      	add	r7, sp, #0
 800f352:	6078      	str	r0, [r7, #4]
 800f354:	6878      	ldr	r0, [r7, #4]
 800f356:	f7ff ffe7 	bl	800f328 <_ZN23ApplicationFontProviderD1Ev>
 800f35a:	2104      	movs	r1, #4
 800f35c:	6878      	ldr	r0, [r7, #4]
 800f35e:	f00b f881 	bl	801a464 <_ZdlPvj>
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	4618      	mov	r0, r3
 800f366:	3708      	adds	r7, #8
 800f368:	46bd      	mov	sp, r7
 800f36a:	bd80      	pop	{r7, pc}

0800f36c <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 800f36c:	b480      	push	{r7}
 800f36e:	b083      	sub	sp, #12
 800f370:	af00      	add	r7, sp, #0
 800f372:	6078      	str	r0, [r7, #4]
    {
 800f374:	4a04      	ldr	r2, [pc, #16]	; (800f388 <_ZN8touchgfx4FontD1Ev+0x1c>)
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	601a      	str	r2, [r3, #0]
    }
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	4618      	mov	r0, r3
 800f37e:	370c      	adds	r7, #12
 800f380:	46bd      	mov	sp, r7
 800f382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f386:	4770      	bx	lr
 800f388:	0801dfa8 	.word	0x0801dfa8

0800f38c <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 800f38c:	b580      	push	{r7, lr}
 800f38e:	b082      	sub	sp, #8
 800f390:	af00      	add	r7, sp, #0
 800f392:	6078      	str	r0, [r7, #4]
    }
 800f394:	6878      	ldr	r0, [r7, #4]
 800f396:	f7ff ffe9 	bl	800f36c <_ZN8touchgfx4FontD1Ev>
 800f39a:	2114      	movs	r1, #20
 800f39c:	6878      	ldr	r0, [r7, #4]
 800f39e:	f00b f861 	bl	801a464 <_ZdlPvj>
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	4618      	mov	r0, r3
 800f3a6:	3708      	adds	r7, #8
 800f3a8:	46bd      	mov	sp, r7
 800f3aa:	bd80      	pop	{r7, pc}

0800f3ac <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 800f3ac:	b590      	push	{r4, r7, lr}
 800f3ae:	b087      	sub	sp, #28
 800f3b0:	af00      	add	r7, sp, #0
 800f3b2:	6078      	str	r0, [r7, #4]
 800f3b4:	460b      	mov	r3, r1
 800f3b6:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 800f3b8:	887b      	ldrh	r3, [r7, #2]
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	d101      	bne.n	800f3c2 <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 800f3be:	2300      	movs	r3, #0
 800f3c0:	e010      	b.n	800f3e4 <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 800f3c2:	2300      	movs	r3, #0
 800f3c4:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 800f3c6:	2300      	movs	r3, #0
 800f3c8:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	681b      	ldr	r3, [r3, #0]
 800f3ce:	3308      	adds	r3, #8
 800f3d0:	681c      	ldr	r4, [r3, #0]
 800f3d2:	f107 030f 	add.w	r3, r7, #15
 800f3d6:	f107 0210 	add.w	r2, r7, #16
 800f3da:	8879      	ldrh	r1, [r7, #2]
 800f3dc:	6878      	ldr	r0, [r7, #4]
 800f3de:	47a0      	blx	r4
 800f3e0:	6178      	str	r0, [r7, #20]
        return glyph;
 800f3e2:	697b      	ldr	r3, [r7, #20]
    }
 800f3e4:	4618      	mov	r0, r3
 800f3e6:	371c      	adds	r7, #28
 800f3e8:	46bd      	mov	sp, r7
 800f3ea:	bd90      	pop	{r4, r7, pc}

0800f3ec <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 800f3ec:	b480      	push	{r7}
 800f3ee:	b083      	sub	sp, #12
 800f3f0:	af00      	add	r7, sp, #0
 800f3f2:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	89db      	ldrh	r3, [r3, #14]
    }
 800f3f8:	4618      	mov	r0, r3
 800f3fa:	370c      	adds	r7, #12
 800f3fc:	46bd      	mov	sp, r7
 800f3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f402:	4770      	bx	lr

0800f404 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 800f404:	b480      	push	{r7}
 800f406:	b083      	sub	sp, #12
 800f408:	af00      	add	r7, sp, #0
 800f40a:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	8a1b      	ldrh	r3, [r3, #16]
    }
 800f410:	4618      	mov	r0, r3
 800f412:	370c      	adds	r7, #12
 800f414:	46bd      	mov	sp, r7
 800f416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f41a:	4770      	bx	lr

0800f41c <_ZNK8touchgfx4Font11getBaselineEv>:
     * @return The height in pixels of this font.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
 800f41c:	b480      	push	{r7}
 800f41e:	b083      	sub	sp, #12
 800f420:	af00      	add	r7, sp, #0
 800f422:	6078      	str	r0, [r7, #4]
    {
        return baselineHeight;
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	88db      	ldrh	r3, [r3, #6]
    }
 800f428:	4618      	mov	r0, r3
 800f42a:	370c      	adds	r7, #12
 800f42c:	46bd      	mov	sp, r7
 800f42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f432:	4770      	bx	lr

0800f434 <_ZNK8touchgfx4Font9getHeightEv>:
     * Returns the height of a font. The font may exceed the top by getPixelsAboveTop() or the
     * bottom by getPixelsBelowBottom.
     *
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
 800f434:	b480      	push	{r7}
 800f436:	b083      	sub	sp, #12
 800f438:	af00      	add	r7, sp, #0
 800f43a:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	889b      	ldrh	r3, [r3, #4]
    }
 800f440:	4618      	mov	r0, r3
 800f442:	370c      	adds	r7, #12
 800f444:	46bd      	mov	sp, r7
 800f446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f44a:	4770      	bx	lr

0800f44c <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 800f44c:	b480      	push	{r7}
 800f44e:	b083      	sub	sp, #12
 800f450:	af00      	add	r7, sp, #0
 800f452:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	7a9b      	ldrb	r3, [r3, #10]
 800f458:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800f45c:	b2db      	uxtb	r3, r3
    }
 800f45e:	4618      	mov	r0, r3
 800f460:	370c      	adds	r7, #12
 800f462:	46bd      	mov	sp, r7
 800f464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f468:	4770      	bx	lr

0800f46a <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 800f46a:	b480      	push	{r7}
 800f46c:	b083      	sub	sp, #12
 800f46e:	af00      	add	r7, sp, #0
 800f470:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	7a9b      	ldrb	r3, [r3, #10]
 800f476:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800f47a:	b2db      	uxtb	r3, r3
    }
 800f47c:	4618      	mov	r0, r3
 800f47e:	370c      	adds	r7, #12
 800f480:	46bd      	mov	sp, r7
 800f482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f486:	4770      	bx	lr

0800f488 <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 800f488:	b580      	push	{r7, lr}
 800f48a:	b082      	sub	sp, #8
 800f48c:	af00      	add	r7, sp, #0
 800f48e:	6078      	str	r0, [r7, #4]
 800f490:	4a05      	ldr	r2, [pc, #20]	; (800f4a8 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	601a      	str	r2, [r3, #0]
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	4618      	mov	r0, r3
 800f49a:	f7ff ff67 	bl	800f36c <_ZN8touchgfx4FontD1Ev>
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	4618      	mov	r0, r3
 800f4a2:	3708      	adds	r7, #8
 800f4a4:	46bd      	mov	sp, r7
 800f4a6:	bd80      	pop	{r7, pc}
 800f4a8:	0801eb50 	.word	0x0801eb50

0800f4ac <_ZN8touchgfx9ConstFontD0Ev>:
 800f4ac:	b580      	push	{r7, lr}
 800f4ae:	b082      	sub	sp, #8
 800f4b0:	af00      	add	r7, sp, #0
 800f4b2:	6078      	str	r0, [r7, #4]
 800f4b4:	6878      	ldr	r0, [r7, #4]
 800f4b6:	f7ff ffe7 	bl	800f488 <_ZN8touchgfx9ConstFontD1Ev>
 800f4ba:	211c      	movs	r1, #28
 800f4bc:	6878      	ldr	r0, [r7, #4]
 800f4be:	f00a ffd1 	bl	801a464 <_ZdlPvj>
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	4618      	mov	r0, r3
 800f4c6:	3708      	adds	r7, #8
 800f4c8:	46bd      	mov	sp, r7
 800f4ca:	bd80      	pop	{r7, pc}

0800f4cc <_ZN8touchgfx13GeneratedFontD1Ev>:

#include <touchgfx/ConstFont.hpp>

namespace touchgfx
{
class GeneratedFont : public ConstFont
 800f4cc:	b580      	push	{r7, lr}
 800f4ce:	b082      	sub	sp, #8
 800f4d0:	af00      	add	r7, sp, #0
 800f4d2:	6078      	str	r0, [r7, #4]
 800f4d4:	4a05      	ldr	r2, [pc, #20]	; (800f4ec <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	601a      	str	r2, [r3, #0]
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	4618      	mov	r0, r3
 800f4de:	f7ff ffd3 	bl	800f488 <_ZN8touchgfx9ConstFontD1Ev>
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	4618      	mov	r0, r3
 800f4e6:	3708      	adds	r7, #8
 800f4e8:	46bd      	mov	sp, r7
 800f4ea:	bd80      	pop	{r7, pc}
 800f4ec:	0801df48 	.word	0x0801df48

0800f4f0 <_ZN8touchgfx13GeneratedFontD0Ev>:
 800f4f0:	b580      	push	{r7, lr}
 800f4f2:	b082      	sub	sp, #8
 800f4f4:	af00      	add	r7, sp, #0
 800f4f6:	6078      	str	r0, [r7, #4]
 800f4f8:	6878      	ldr	r0, [r7, #4]
 800f4fa:	f7ff ffe7 	bl	800f4cc <_ZN8touchgfx13GeneratedFontD1Ev>
 800f4fe:	212c      	movs	r1, #44	; 0x2c
 800f500:	6878      	ldr	r0, [r7, #4]
 800f502:	f00a ffaf 	bl	801a464 <_ZdlPvj>
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	4618      	mov	r0, r3
 800f50a:	3708      	adds	r7, #8
 800f50c:	46bd      	mov	sp, r7
 800f50e:	bd80      	pop	{r7, pc}

0800f510 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:

    virtual const uint8_t* getPixelData(const GlyphNode* glyph) const;

    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
 800f510:	b480      	push	{r7}
 800f512:	b083      	sub	sp, #12
 800f514:	af00      	add	r7, sp, #0
 800f516:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    }
 800f51c:	4618      	mov	r0, r3
 800f51e:	370c      	adds	r7, #12
 800f520:	46bd      	mov	sp, r7
 800f522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f526:	4770      	bx	lr

0800f528 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
 800f528:	b480      	push	{r7}
 800f52a:	b083      	sub	sp, #12
 800f52c:	af00      	add	r7, sp, #0
 800f52e:	6078      	str	r0, [r7, #4]
    {
        return arabicTable;
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    }
 800f534:	4618      	mov	r0, r3
 800f536:	370c      	adds	r7, #12
 800f538:	46bd      	mov	sp, r7
 800f53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f53e:	4770      	bx	lr

0800f540 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 800f540:	b580      	push	{r7, lr}
 800f542:	b08e      	sub	sp, #56	; 0x38
 800f544:	af0a      	add	r7, sp, #40	; 0x28
 800f546:	60f8      	str	r0, [r7, #12]
 800f548:	60b9      	str	r1, [r7, #8]
 800f54a:	4611      	mov	r1, r2
 800f54c:	461a      	mov	r2, r3
 800f54e:	460b      	mov	r3, r1
 800f550:	80fb      	strh	r3, [r7, #6]
 800f552:	4613      	mov	r3, r2
 800f554:	80bb      	strh	r3, [r7, #4]
    : ConstFont(glyphs, numGlyphs, height, baseline, pixAboveTop, pixBelowBottom, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
      glyphData(glyphDataInternalFlash),
      kerningData(kerningList),
      gsubTable(gsubData),
      arabicTable(formsTable)
 800f556:	68f8      	ldr	r0, [r7, #12]
 800f558:	88b9      	ldrh	r1, [r7, #4]
 800f55a:	88fa      	ldrh	r2, [r7, #6]
 800f55c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800f560:	9308      	str	r3, [sp, #32]
 800f562:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f564:	9307      	str	r3, [sp, #28]
 800f566:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800f56a:	9306      	str	r3, [sp, #24]
 800f56c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f570:	9305      	str	r3, [sp, #20]
 800f572:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f576:	9304      	str	r3, [sp, #16]
 800f578:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f57c:	9303      	str	r3, [sp, #12]
 800f57e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f582:	9302      	str	r3, [sp, #8]
 800f584:	7f3b      	ldrb	r3, [r7, #28]
 800f586:	9301      	str	r3, [sp, #4]
 800f588:	8b3b      	ldrh	r3, [r7, #24]
 800f58a:	9300      	str	r3, [sp, #0]
 800f58c:	460b      	mov	r3, r1
 800f58e:	68b9      	ldr	r1, [r7, #8]
 800f590:	f007 fe64 	bl	801725c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 800f594:	4a09      	ldr	r2, [pc, #36]	; (800f5bc <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x7c>)
 800f596:	68fb      	ldr	r3, [r7, #12]
 800f598:	601a      	str	r2, [r3, #0]
 800f59a:	68fb      	ldr	r3, [r7, #12]
 800f59c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f59e:	61da      	str	r2, [r3, #28]
 800f5a0:	68fb      	ldr	r3, [r7, #12]
 800f5a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f5a4:	621a      	str	r2, [r3, #32]
 800f5a6:	68fb      	ldr	r3, [r7, #12]
 800f5a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f5aa:	625a      	str	r2, [r3, #36]	; 0x24
 800f5ac:	68fb      	ldr	r3, [r7, #12]
 800f5ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f5b0:	629a      	str	r2, [r3, #40]	; 0x28
{
}
 800f5b2:	68fb      	ldr	r3, [r7, #12]
 800f5b4:	4618      	mov	r0, r3
 800f5b6:	3710      	adds	r7, #16
 800f5b8:	46bd      	mov	sp, r7
 800f5ba:	bd80      	pop	{r7, pc}
 800f5bc:	0801df48 	.word	0x0801df48

0800f5c0 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 800f5c0:	b480      	push	{r7}
 800f5c2:	b085      	sub	sp, #20
 800f5c4:	af00      	add	r7, sp, #0
 800f5c6:	6078      	str	r0, [r7, #4]
 800f5c8:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	69db      	ldr	r3, [r3, #28]
 800f5ce:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 800f5d0:	683b      	ldr	r3, [r7, #0]
 800f5d2:	889b      	ldrh	r3, [r3, #4]
 800f5d4:	0adb      	lsrs	r3, r3, #11
 800f5d6:	b29b      	uxth	r3, r3
 800f5d8:	009b      	lsls	r3, r3, #2
 800f5da:	68fa      	ldr	r2, [r7, #12]
 800f5dc:	4413      	add	r3, r2
 800f5de:	681a      	ldr	r2, [r3, #0]
 800f5e0:	683b      	ldr	r3, [r7, #0]
 800f5e2:	681b      	ldr	r3, [r3, #0]
 800f5e4:	4413      	add	r3, r2
}
 800f5e6:	4618      	mov	r0, r3
 800f5e8:	3714      	adds	r7, #20
 800f5ea:	46bd      	mov	sp, r7
 800f5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5f0:	4770      	bx	lr

0800f5f2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800f5f2:	b480      	push	{r7}
 800f5f4:	b089      	sub	sp, #36	; 0x24
 800f5f6:	af00      	add	r7, sp, #0
 800f5f8:	60f8      	str	r0, [r7, #12]
 800f5fa:	460b      	mov	r3, r1
 800f5fc:	607a      	str	r2, [r7, #4]
 800f5fe:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	2b00      	cmp	r3, #0
 800f604:	d003      	beq.n	800f60e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	7b1b      	ldrb	r3, [r3, #12]
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	d101      	bne.n	800f612 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 800f60e:	2300      	movs	r3, #0
 800f610:	e030      	b.n	800f674 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 800f612:	68fb      	ldr	r3, [r7, #12]
 800f614:	6a1a      	ldr	r2, [r3, #32]
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 800f61a:	697b      	ldr	r3, [r7, #20]
 800f61c:	7b5b      	ldrb	r3, [r3, #13]
 800f61e:	021b      	lsls	r3, r3, #8
 800f620:	b21b      	sxth	r3, r3
 800f622:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f626:	b219      	sxth	r1, r3
 800f628:	697b      	ldr	r3, [r7, #20]
 800f62a:	7adb      	ldrb	r3, [r3, #11]
 800f62c:	b21b      	sxth	r3, r3
 800f62e:	430b      	orrs	r3, r1
 800f630:	b21b      	sxth	r3, r3
 800f632:	b29b      	uxth	r3, r3
 800f634:	009b      	lsls	r3, r3, #2
 800f636:	4413      	add	r3, r2
 800f638:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	7b1b      	ldrb	r3, [r3, #12]
 800f63e:	837b      	strh	r3, [r7, #26]
 800f640:	8b7b      	ldrh	r3, [r7, #26]
 800f642:	2b00      	cmp	r3, #0
 800f644:	d015      	beq.n	800f672 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    {
        if (prevChar == kerndata->unicodePrevChar)
 800f646:	69fb      	ldr	r3, [r7, #28]
 800f648:	881b      	ldrh	r3, [r3, #0]
 800f64a:	897a      	ldrh	r2, [r7, #10]
 800f64c:	429a      	cmp	r2, r3
 800f64e:	d103      	bne.n	800f658 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
        {
            return kerndata->distance;
 800f650:	69fb      	ldr	r3, [r7, #28]
 800f652:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800f656:	e00d      	b.n	800f674 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        }
        if (prevChar < kerndata->unicodePrevChar)
 800f658:	69fb      	ldr	r3, [r7, #28]
 800f65a:	881b      	ldrh	r3, [r3, #0]
 800f65c:	897a      	ldrh	r2, [r7, #10]
 800f65e:	429a      	cmp	r2, r3
 800f660:	d306      	bcc.n	800f670 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x7e>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800f662:	8b7b      	ldrh	r3, [r7, #26]
 800f664:	3b01      	subs	r3, #1
 800f666:	837b      	strh	r3, [r7, #26]
 800f668:	69fb      	ldr	r3, [r7, #28]
 800f66a:	3304      	adds	r3, #4
 800f66c:	61fb      	str	r3, [r7, #28]
 800f66e:	e7e7      	b.n	800f640 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x4e>
        {
            break;
 800f670:	bf00      	nop
        }
    }
    return 0;
 800f672:	2300      	movs	r3, #0
}
 800f674:	4618      	mov	r0, r3
 800f676:	3724      	adds	r7, #36	; 0x24
 800f678:	46bd      	mov	sp, r7
 800f67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f67e:	4770      	bx	lr

0800f680 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800f680:	b580      	push	{r7, lr}
 800f682:	af00      	add	r7, sp, #0
 800f684:	4801      	ldr	r0, [pc, #4]	; (800f68c <__tcf_0+0xc>)
 800f686:	f7ff ff21 	bl	800f4cc <_ZN8touchgfx13GeneratedFontD1Ev>
 800f68a:	bd80      	pop	{r7, pc}
 800f68c:	2001e0f8 	.word	0x2001e0f8

0800f690 <_Z23getFont_verdana_10_4bppv>:
{
 800f690:	b580      	push	{r7, lr}
 800f692:	b08e      	sub	sp, #56	; 0x38
 800f694:	af0e      	add	r7, sp, #56	; 0x38
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800f696:	4b21      	ldr	r3, [pc, #132]	; (800f71c <_Z23getFont_verdana_10_4bppv+0x8c>)
 800f698:	781b      	ldrb	r3, [r3, #0]
 800f69a:	f3bf 8f5b 	dmb	ish
 800f69e:	b2db      	uxtb	r3, r3
 800f6a0:	f003 0301 	and.w	r3, r3, #1
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	bf0c      	ite	eq
 800f6a8:	2301      	moveq	r3, #1
 800f6aa:	2300      	movne	r3, #0
 800f6ac:	b2db      	uxtb	r3, r3
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	d030      	beq.n	800f714 <_Z23getFont_verdana_10_4bppv+0x84>
 800f6b2:	481a      	ldr	r0, [pc, #104]	; (800f71c <_Z23getFont_verdana_10_4bppv+0x8c>)
 800f6b4:	f00a fed8 	bl	801a468 <__cxa_guard_acquire>
 800f6b8:	4603      	mov	r3, r0
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	bf14      	ite	ne
 800f6be:	2301      	movne	r3, #1
 800f6c0:	2300      	moveq	r3, #0
 800f6c2:	b2db      	uxtb	r3, r3
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	d025      	beq.n	800f714 <_Z23getFont_verdana_10_4bppv+0x84>
 800f6c8:	2300      	movs	r3, #0
 800f6ca:	930c      	str	r3, [sp, #48]	; 0x30
 800f6cc:	2300      	movs	r3, #0
 800f6ce:	930b      	str	r3, [sp, #44]	; 0x2c
 800f6d0:	2300      	movs	r3, #0
 800f6d2:	930a      	str	r3, [sp, #40]	; 0x28
 800f6d4:	233f      	movs	r3, #63	; 0x3f
 800f6d6:	9309      	str	r3, [sp, #36]	; 0x24
 800f6d8:	4b11      	ldr	r3, [pc, #68]	; (800f720 <_Z23getFont_verdana_10_4bppv+0x90>)
 800f6da:	9308      	str	r3, [sp, #32]
 800f6dc:	4b11      	ldr	r3, [pc, #68]	; (800f724 <_Z23getFont_verdana_10_4bppv+0x94>)
 800f6de:	9307      	str	r3, [sp, #28]
 800f6e0:	2300      	movs	r3, #0
 800f6e2:	9306      	str	r3, [sp, #24]
 800f6e4:	2300      	movs	r3, #0
 800f6e6:	9305      	str	r3, [sp, #20]
 800f6e8:	2301      	movs	r3, #1
 800f6ea:	9304      	str	r3, [sp, #16]
 800f6ec:	2304      	movs	r3, #4
 800f6ee:	9303      	str	r3, [sp, #12]
 800f6f0:	2300      	movs	r3, #0
 800f6f2:	9302      	str	r3, [sp, #8]
 800f6f4:	2300      	movs	r3, #0
 800f6f6:	9301      	str	r3, [sp, #4]
 800f6f8:	230a      	movs	r3, #10
 800f6fa:	9300      	str	r3, [sp, #0]
 800f6fc:	230a      	movs	r3, #10
 800f6fe:	2201      	movs	r2, #1
 800f700:	4909      	ldr	r1, [pc, #36]	; (800f728 <_Z23getFont_verdana_10_4bppv+0x98>)
 800f702:	480a      	ldr	r0, [pc, #40]	; (800f72c <_Z23getFont_verdana_10_4bppv+0x9c>)
 800f704:	f7ff ff1c 	bl	800f540 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800f708:	4809      	ldr	r0, [pc, #36]	; (800f730 <_Z23getFont_verdana_10_4bppv+0xa0>)
 800f70a:	f00a fef7 	bl	801a4fc <atexit>
 800f70e:	4803      	ldr	r0, [pc, #12]	; (800f71c <_Z23getFont_verdana_10_4bppv+0x8c>)
 800f710:	f00a feb6 	bl	801a480 <__cxa_guard_release>
    return verdana_10_4bpp;
 800f714:	4b05      	ldr	r3, [pc, #20]	; (800f72c <_Z23getFont_verdana_10_4bppv+0x9c>)
}
 800f716:	4618      	mov	r0, r3
 800f718:	46bd      	mov	sp, r7
 800f71a:	bd80      	pop	{r7, pc}
 800f71c:	2001e124 	.word	0x2001e124
 800f720:	0801ed14 	.word	0x0801ed14
 800f724:	0801ed34 	.word	0x0801ed34
 800f728:	90000a98 	.word	0x90000a98
 800f72c:	2001e0f8 	.word	0x2001e0f8
 800f730:	0800f681 	.word	0x0800f681

0800f734 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 4, 24, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 112, 0, 0);
 800f734:	b580      	push	{r7, lr}
 800f736:	af00      	add	r7, sp, #0
 800f738:	4801      	ldr	r0, [pc, #4]	; (800f740 <__tcf_0+0xc>)
 800f73a:	f7ff fec7 	bl	800f4cc <_ZN8touchgfx13GeneratedFontD1Ev>
 800f73e:	bd80      	pop	{r7, pc}
 800f740:	2001e128 	.word	0x2001e128

0800f744 <_Z23getFont_verdana_20_4bppv>:
{
 800f744:	b580      	push	{r7, lr}
 800f746:	b08e      	sub	sp, #56	; 0x38
 800f748:	af0e      	add	r7, sp, #56	; 0x38
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 4, 24, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 112, 0, 0);
 800f74a:	4b21      	ldr	r3, [pc, #132]	; (800f7d0 <_Z23getFont_verdana_20_4bppv+0x8c>)
 800f74c:	781b      	ldrb	r3, [r3, #0]
 800f74e:	f3bf 8f5b 	dmb	ish
 800f752:	b2db      	uxtb	r3, r3
 800f754:	f003 0301 	and.w	r3, r3, #1
 800f758:	2b00      	cmp	r3, #0
 800f75a:	bf0c      	ite	eq
 800f75c:	2301      	moveq	r3, #1
 800f75e:	2300      	movne	r3, #0
 800f760:	b2db      	uxtb	r3, r3
 800f762:	2b00      	cmp	r3, #0
 800f764:	d030      	beq.n	800f7c8 <_Z23getFont_verdana_20_4bppv+0x84>
 800f766:	481a      	ldr	r0, [pc, #104]	; (800f7d0 <_Z23getFont_verdana_20_4bppv+0x8c>)
 800f768:	f00a fe7e 	bl	801a468 <__cxa_guard_acquire>
 800f76c:	4603      	mov	r3, r0
 800f76e:	2b00      	cmp	r3, #0
 800f770:	bf14      	ite	ne
 800f772:	2301      	movne	r3, #1
 800f774:	2300      	moveq	r3, #0
 800f776:	b2db      	uxtb	r3, r3
 800f778:	2b00      	cmp	r3, #0
 800f77a:	d025      	beq.n	800f7c8 <_Z23getFont_verdana_20_4bppv+0x84>
 800f77c:	2300      	movs	r3, #0
 800f77e:	930c      	str	r3, [sp, #48]	; 0x30
 800f780:	2300      	movs	r3, #0
 800f782:	930b      	str	r3, [sp, #44]	; 0x2c
 800f784:	2370      	movs	r3, #112	; 0x70
 800f786:	930a      	str	r3, [sp, #40]	; 0x28
 800f788:	233f      	movs	r3, #63	; 0x3f
 800f78a:	9309      	str	r3, [sp, #36]	; 0x24
 800f78c:	4b11      	ldr	r3, [pc, #68]	; (800f7d4 <_Z23getFont_verdana_20_4bppv+0x90>)
 800f78e:	9308      	str	r3, [sp, #32]
 800f790:	4b11      	ldr	r3, [pc, #68]	; (800f7d8 <_Z23getFont_verdana_20_4bppv+0x94>)
 800f792:	9307      	str	r3, [sp, #28]
 800f794:	2300      	movs	r3, #0
 800f796:	9306      	str	r3, [sp, #24]
 800f798:	2300      	movs	r3, #0
 800f79a:	9305      	str	r3, [sp, #20]
 800f79c:	2301      	movs	r3, #1
 800f79e:	9304      	str	r3, [sp, #16]
 800f7a0:	2304      	movs	r3, #4
 800f7a2:	9303      	str	r3, [sp, #12]
 800f7a4:	2300      	movs	r3, #0
 800f7a6:	9302      	str	r3, [sp, #8]
 800f7a8:	2300      	movs	r3, #0
 800f7aa:	9301      	str	r3, [sp, #4]
 800f7ac:	2314      	movs	r3, #20
 800f7ae:	9300      	str	r3, [sp, #0]
 800f7b0:	2318      	movs	r3, #24
 800f7b2:	2204      	movs	r2, #4
 800f7b4:	4909      	ldr	r1, [pc, #36]	; (800f7dc <_Z23getFont_verdana_20_4bppv+0x98>)
 800f7b6:	480a      	ldr	r0, [pc, #40]	; (800f7e0 <_Z23getFont_verdana_20_4bppv+0x9c>)
 800f7b8:	f7ff fec2 	bl	800f540 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800f7bc:	4809      	ldr	r0, [pc, #36]	; (800f7e4 <_Z23getFont_verdana_20_4bppv+0xa0>)
 800f7be:	f00a fe9d 	bl	801a4fc <atexit>
 800f7c2:	4803      	ldr	r0, [pc, #12]	; (800f7d0 <_Z23getFont_verdana_20_4bppv+0x8c>)
 800f7c4:	f00a fe5c 	bl	801a480 <__cxa_guard_release>
    return verdana_20_4bpp;
 800f7c8:	4b05      	ldr	r3, [pc, #20]	; (800f7e0 <_Z23getFont_verdana_20_4bppv+0x9c>)
}
 800f7ca:	4618      	mov	r0, r3
 800f7cc:	46bd      	mov	sp, r7
 800f7ce:	bd80      	pop	{r7, pc}
 800f7d0:	2001e154 	.word	0x2001e154
 800f7d4:	0801ed18 	.word	0x0801ed18
 800f7d8:	0801ed38 	.word	0x0801ed38
 800f7dc:	90000aa8 	.word	0x90000aa8
 800f7e0:	2001e128 	.word	0x2001e128
 800f7e4:	0800f735 	.word	0x0800f735

0800f7e8 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 11, 41, 40, 0, 0, 4, 1, 0, 1, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800f7e8:	b580      	push	{r7, lr}
 800f7ea:	af00      	add	r7, sp, #0
 800f7ec:	4801      	ldr	r0, [pc, #4]	; (800f7f4 <__tcf_0+0xc>)
 800f7ee:	f7ff fe6d 	bl	800f4cc <_ZN8touchgfx13GeneratedFontD1Ev>
 800f7f2:	bd80      	pop	{r7, pc}
 800f7f4:	2001e158 	.word	0x2001e158

0800f7f8 <_Z23getFont_verdana_40_4bppv>:
{
 800f7f8:	b580      	push	{r7, lr}
 800f7fa:	b08e      	sub	sp, #56	; 0x38
 800f7fc:	af0e      	add	r7, sp, #56	; 0x38
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 11, 41, 40, 0, 0, 4, 1, 0, 1, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800f7fe:	4b21      	ldr	r3, [pc, #132]	; (800f884 <_Z23getFont_verdana_40_4bppv+0x8c>)
 800f800:	781b      	ldrb	r3, [r3, #0]
 800f802:	f3bf 8f5b 	dmb	ish
 800f806:	b2db      	uxtb	r3, r3
 800f808:	f003 0301 	and.w	r3, r3, #1
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	bf0c      	ite	eq
 800f810:	2301      	moveq	r3, #1
 800f812:	2300      	movne	r3, #0
 800f814:	b2db      	uxtb	r3, r3
 800f816:	2b00      	cmp	r3, #0
 800f818:	d030      	beq.n	800f87c <_Z23getFont_verdana_40_4bppv+0x84>
 800f81a:	481a      	ldr	r0, [pc, #104]	; (800f884 <_Z23getFont_verdana_40_4bppv+0x8c>)
 800f81c:	f00a fe24 	bl	801a468 <__cxa_guard_acquire>
 800f820:	4603      	mov	r3, r0
 800f822:	2b00      	cmp	r3, #0
 800f824:	bf14      	ite	ne
 800f826:	2301      	movne	r3, #1
 800f828:	2300      	moveq	r3, #0
 800f82a:	b2db      	uxtb	r3, r3
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d025      	beq.n	800f87c <_Z23getFont_verdana_40_4bppv+0x84>
 800f830:	2300      	movs	r3, #0
 800f832:	930c      	str	r3, [sp, #48]	; 0x30
 800f834:	2300      	movs	r3, #0
 800f836:	930b      	str	r3, [sp, #44]	; 0x2c
 800f838:	2300      	movs	r3, #0
 800f83a:	930a      	str	r3, [sp, #40]	; 0x28
 800f83c:	233f      	movs	r3, #63	; 0x3f
 800f83e:	9309      	str	r3, [sp, #36]	; 0x24
 800f840:	4b11      	ldr	r3, [pc, #68]	; (800f888 <_Z23getFont_verdana_40_4bppv+0x90>)
 800f842:	9308      	str	r3, [sp, #32]
 800f844:	4b11      	ldr	r3, [pc, #68]	; (800f88c <_Z23getFont_verdana_40_4bppv+0x94>)
 800f846:	9307      	str	r3, [sp, #28]
 800f848:	2301      	movs	r3, #1
 800f84a:	9306      	str	r3, [sp, #24]
 800f84c:	2300      	movs	r3, #0
 800f84e:	9305      	str	r3, [sp, #20]
 800f850:	2301      	movs	r3, #1
 800f852:	9304      	str	r3, [sp, #16]
 800f854:	2304      	movs	r3, #4
 800f856:	9303      	str	r3, [sp, #12]
 800f858:	2300      	movs	r3, #0
 800f85a:	9302      	str	r3, [sp, #8]
 800f85c:	2300      	movs	r3, #0
 800f85e:	9301      	str	r3, [sp, #4]
 800f860:	2328      	movs	r3, #40	; 0x28
 800f862:	9300      	str	r3, [sp, #0]
 800f864:	2329      	movs	r3, #41	; 0x29
 800f866:	220b      	movs	r2, #11
 800f868:	4909      	ldr	r1, [pc, #36]	; (800f890 <_Z23getFont_verdana_40_4bppv+0x98>)
 800f86a:	480a      	ldr	r0, [pc, #40]	; (800f894 <_Z23getFont_verdana_40_4bppv+0x9c>)
 800f86c:	f7ff fe68 	bl	800f540 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800f870:	4809      	ldr	r0, [pc, #36]	; (800f898 <_Z23getFont_verdana_40_4bppv+0xa0>)
 800f872:	f00a fe43 	bl	801a4fc <atexit>
 800f876:	4803      	ldr	r0, [pc, #12]	; (800f884 <_Z23getFont_verdana_40_4bppv+0x8c>)
 800f878:	f00a fe02 	bl	801a480 <__cxa_guard_release>
    return verdana_40_4bpp;
 800f87c:	4b05      	ldr	r3, [pc, #20]	; (800f894 <_Z23getFont_verdana_40_4bppv+0x9c>)
}
 800f87e:	4618      	mov	r0, r3
 800f880:	46bd      	mov	sp, r7
 800f882:	bd80      	pop	{r7, pc}
 800f884:	2001e184 	.word	0x2001e184
 800f888:	0801ed1c 	.word	0x0801ed1c
 800f88c:	0801ed3c 	.word	0x0801ed3c
 800f890:	90000ae0 	.word	0x90000ae0
 800f894:	2001e158 	.word	0x2001e158
 800f898:	0800f7e9 	.word	0x0800f7e9

0800f89c <_ZN8touchgfx3HAL11getInstanceEv>:
    /**
     * Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 800f89c:	b480      	push	{r7}
 800f89e:	af00      	add	r7, sp, #0
    {
        return instance;
 800f8a0:	4b03      	ldr	r3, [pc, #12]	; (800f8b0 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 800f8a2:	681b      	ldr	r3, [r3, #0]
    }
 800f8a4:	4618      	mov	r0, r3
 800f8a6:	46bd      	mov	sp, r7
 800f8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ac:	4770      	bx	lr
 800f8ae:	bf00      	nop
 800f8b0:	200243dc 	.word	0x200243dc

0800f8b4 <_ZN8touchgfx3HAL3lcdEv>:
    /**
     * Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 800f8b4:	b480      	push	{r7}
 800f8b6:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 800f8b8:	4b0b      	ldr	r3, [pc, #44]	; (800f8e8 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800f8ba:	681b      	ldr	r3, [r3, #0]
 800f8bc:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d008      	beq.n	800f8d6 <_ZN8touchgfx3HAL3lcdEv+0x22>
 800f8c4:	4b08      	ldr	r3, [pc, #32]	; (800f8e8 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800f8c6:	681b      	ldr	r3, [r3, #0]
 800f8c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	d003      	beq.n	800f8d6 <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 800f8ce:	4b06      	ldr	r3, [pc, #24]	; (800f8e8 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800f8d0:	681b      	ldr	r3, [r3, #0]
 800f8d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f8d4:	e002      	b.n	800f8dc <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        return instance->lcdRef;
 800f8d6:	4b04      	ldr	r3, [pc, #16]	; (800f8e8 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800f8d8:	681b      	ldr	r3, [r3, #0]
 800f8da:	689b      	ldr	r3, [r3, #8]
    }
 800f8dc:	4618      	mov	r0, r3
 800f8de:	46bd      	mov	sp, r7
 800f8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8e4:	4770      	bx	lr
 800f8e6:	bf00      	nop
 800f8e8:	200243dc 	.word	0x200243dc

0800f8ec <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 800f8ec:	b480      	push	{r7}
 800f8ee:	b083      	sub	sp, #12
 800f8f0:	af00      	add	r7, sp, #0
 800f8f2:	6078      	str	r0, [r7, #4]
        : x(0), y(0), width(0), height(0)
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	2200      	movs	r2, #0
 800f8f8:	801a      	strh	r2, [r3, #0]
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	2200      	movs	r2, #0
 800f8fe:	805a      	strh	r2, [r3, #2]
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	2200      	movs	r2, #0
 800f904:	809a      	strh	r2, [r3, #4]
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	2200      	movs	r2, #0
 800f90a:	80da      	strh	r2, [r3, #6]
    {
    }
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	4618      	mov	r0, r3
 800f910:	370c      	adds	r7, #12
 800f912:	46bd      	mov	sp, r7
 800f914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f918:	4770      	bx	lr

0800f91a <_ZN8touchgfx8Drawable5setXYEss>:
     *
     * @see moveTo
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setXY(int16_t x, int16_t y)
 800f91a:	b580      	push	{r7, lr}
 800f91c:	b082      	sub	sp, #8
 800f91e:	af00      	add	r7, sp, #0
 800f920:	6078      	str	r0, [r7, #4]
 800f922:	460b      	mov	r3, r1
 800f924:	807b      	strh	r3, [r7, #2]
 800f926:	4613      	mov	r3, r2
 800f928:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	681b      	ldr	r3, [r3, #0]
 800f92e:	3330      	adds	r3, #48	; 0x30
 800f930:	681b      	ldr	r3, [r3, #0]
 800f932:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800f936:	4611      	mov	r1, r2
 800f938:	6878      	ldr	r0, [r7, #4]
 800f93a:	4798      	blx	r3
        setY(y);
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	681b      	ldr	r3, [r3, #0]
 800f940:	3334      	adds	r3, #52	; 0x34
 800f942:	681b      	ldr	r3, [r3, #0]
 800f944:	f9b7 2000 	ldrsh.w	r2, [r7]
 800f948:	4611      	mov	r1, r2
 800f94a:	6878      	ldr	r0, [r7, #4]
 800f94c:	4798      	blx	r3
    }
 800f94e:	bf00      	nop
 800f950:	3708      	adds	r7, #8
 800f952:	46bd      	mov	sp, r7
 800f954:	bd80      	pop	{r7, pc}

0800f956 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
     * @param  prevChar The Unicode value of the previous character.
     * @param  glyph    the glyph object for the current character.
     *
     * @return The kerning distance between prevChar and glyph char.
     */
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 800f956:	b480      	push	{r7}
 800f958:	b085      	sub	sp, #20
 800f95a:	af00      	add	r7, sp, #0
 800f95c:	60f8      	str	r0, [r7, #12]
 800f95e:	460b      	mov	r3, r1
 800f960:	607a      	str	r2, [r7, #4]
 800f962:	817b      	strh	r3, [r7, #10]
    {
        (void)prevChar; // Unused variable
        (void)glyph;    // Unused variable
        return 0;
 800f964:	2300      	movs	r3, #0
    }
 800f966:	4618      	mov	r0, r3
 800f968:	3714      	adds	r7, #20
 800f96a:	46bd      	mov	sp, r7
 800f96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f970:	4770      	bx	lr

0800f972 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    /**
     * Gets GSUB table. Currently only used for Devanagari fonts.
     *
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
 800f972:	b480      	push	{r7}
 800f974:	b083      	sub	sp, #12
 800f976:	af00      	add	r7, sp, #0
 800f978:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800f97a:	2300      	movs	r3, #0
    }
 800f97c:	4618      	mov	r0, r3
 800f97e:	370c      	adds	r7, #12
 800f980:	46bd      	mov	sp, r7
 800f982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f986:	4770      	bx	lr

0800f988 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 800f988:	b480      	push	{r7}
 800f98a:	b083      	sub	sp, #12
 800f98c:	af00      	add	r7, sp, #0
 800f98e:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800f990:	2300      	movs	r3, #0
    }
 800f992:	4618      	mov	r0, r3
 800f994:	370c      	adds	r7, #12
 800f996:	46bd      	mov	sp, r7
 800f998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f99c:	4770      	bx	lr

0800f99e <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 800f99e:	b40e      	push	{r1, r2, r3}
 800f9a0:	b580      	push	{r7, lr}
 800f9a2:	b085      	sub	sp, #20
 800f9a4:	af00      	add	r7, sp, #0
 800f9a6:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 800f9a8:	f107 0320 	add.w	r3, r7, #32
 800f9ac:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 800f9ae:	68bb      	ldr	r3, [r7, #8]
 800f9b0:	69fa      	ldr	r2, [r7, #28]
 800f9b2:	2100      	movs	r1, #0
 800f9b4:	6878      	ldr	r0, [r7, #4]
 800f9b6:	f007 fb25 	bl	8017004 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 800f9ba:	4603      	mov	r3, r0
 800f9bc:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 800f9be:	89fb      	ldrh	r3, [r7, #14]
}
 800f9c0:	4618      	mov	r0, r3
 800f9c2:	3714      	adds	r7, #20
 800f9c4:	46bd      	mov	sp, r7
 800f9c6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f9ca:	b003      	add	sp, #12
 800f9cc:	4770      	bx	lr

0800f9ce <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 800f9ce:	b40c      	push	{r2, r3}
 800f9d0:	b580      	push	{r7, lr}
 800f9d2:	b084      	sub	sp, #16
 800f9d4:	af00      	add	r7, sp, #0
 800f9d6:	6078      	str	r0, [r7, #4]
 800f9d8:	460b      	mov	r3, r1
 800f9da:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 800f9dc:	f107 031c 	add.w	r3, r7, #28
 800f9e0:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 800f9e2:	78f9      	ldrb	r1, [r7, #3]
 800f9e4:	68bb      	ldr	r3, [r7, #8]
 800f9e6:	69ba      	ldr	r2, [r7, #24]
 800f9e8:	6878      	ldr	r0, [r7, #4]
 800f9ea:	f007 fb0b 	bl	8017004 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 800f9ee:	4603      	mov	r3, r0
 800f9f0:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 800f9f2:	89fb      	ldrh	r3, [r7, #14]
}
 800f9f4:	4618      	mov	r0, r3
 800f9f6:	3710      	adds	r7, #16
 800f9f8:	46bd      	mov	sp, r7
 800f9fa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f9fe:	b002      	add	sp, #8
 800fa00:	4770      	bx	lr
	...

0800fa04 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 800fa04:	b580      	push	{r7, lr}
 800fa06:	b08a      	sub	sp, #40	; 0x28
 800fa08:	af00      	add	r7, sp, #0
 800fa0a:	6078      	str	r0, [r7, #4]
 800fa0c:	460b      	mov	r3, r1
 800fa0e:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	d016      	beq.n	800fa46 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	3322      	adds	r3, #34	; 0x22
 800fa1c:	627b      	str	r3, [r7, #36]	; 0x24
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 800fa1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa20:	8adb      	ldrh	r3, [r3, #22]
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	d105      	bne.n	800fa32 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 800fa26:	4b43      	ldr	r3, [pc, #268]	; (800fb34 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 800fa28:	4a43      	ldr	r2, [pc, #268]	; (800fb38 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 800fa2a:	21c5      	movs	r1, #197	; 0xc5
 800fa2c:	4843      	ldr	r0, [pc, #268]	; (800fb3c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800fa2e:	f00a fd47 	bl	801a4c0 <__assert_func>
            return buffer[pos];
 800fa32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa34:	8a9b      	ldrh	r3, [r3, #20]
 800fa36:	461a      	mov	r2, r3
 800fa38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa3a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	d001      	beq.n	800fa46 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 800fa42:	2301      	movs	r3, #1
 800fa44:	e000      	b.n	800fa48 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 800fa46:	2300      	movs	r3, #0
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	d06a      	beq.n	800fb22 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 800fa4c:	6878      	ldr	r0, [r7, #4]
 800fa4e:	f008 f97b 	bl	8017d48 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	3322      	adds	r3, #34	; 0x22
 800fa56:	623b      	str	r3, [r7, #32]
 800fa58:	2301      	movs	r3, #1
 800fa5a:	83fb      	strh	r3, [r7, #30]
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 800fa5c:	6a3b      	ldr	r3, [r7, #32]
 800fa5e:	8adb      	ldrh	r3, [r3, #22]
 800fa60:	8bfa      	ldrh	r2, [r7, #30]
 800fa62:	429a      	cmp	r2, r3
 800fa64:	d305      	bcc.n	800fa72 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 800fa66:	4b36      	ldr	r3, [pc, #216]	; (800fb40 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 800fa68:	4a36      	ldr	r2, [pc, #216]	; (800fb44 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 800fa6a:	21cb      	movs	r1, #203	; 0xcb
 800fa6c:	4833      	ldr	r0, [pc, #204]	; (800fb3c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800fa6e:	f00a fd27 	bl	801a4c0 <__assert_func>
            const uint16_t index = pos + offset;
 800fa72:	6a3b      	ldr	r3, [r7, #32]
 800fa74:	8a9a      	ldrh	r2, [r3, #20]
 800fa76:	8bfb      	ldrh	r3, [r7, #30]
 800fa78:	4413      	add	r3, r2
 800fa7a:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 800fa7c:	8bbb      	ldrh	r3, [r7, #28]
 800fa7e:	2b09      	cmp	r3, #9
 800fa80:	d801      	bhi.n	800fa86 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 800fa82:	8bbb      	ldrh	r3, [r7, #28]
 800fa84:	e001      	b.n	800fa8a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 800fa86:	8bbb      	ldrh	r3, [r7, #28]
 800fa88:	3b0a      	subs	r3, #10
 800fa8a:	6a3a      	ldr	r2, [r7, #32]
 800fa8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fa90:	f640 123f 	movw	r2, #2367	; 0x93f
 800fa94:	4293      	cmp	r3, r2
 800fa96:	bf0c      	ite	eq
 800fa98:	2301      	moveq	r3, #1
 800fa9a:	2300      	movne	r3, #0
 800fa9c:	b2db      	uxtb	r3, r3
 800fa9e:	2b00      	cmp	r3, #0
 800faa0:	d03f      	beq.n	800fb22 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	3322      	adds	r3, #34	; 0x22
 800faa6:	687a      	ldr	r2, [r7, #4]
 800faa8:	3222      	adds	r2, #34	; 0x22
 800faaa:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 800faac:	68ba      	ldr	r2, [r7, #8]
 800faae:	8ad2      	ldrh	r2, [r2, #22]
 800fab0:	2a00      	cmp	r2, #0
 800fab2:	d105      	bne.n	800fac0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 800fab4:	4b1f      	ldr	r3, [pc, #124]	; (800fb34 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 800fab6:	4a20      	ldr	r2, [pc, #128]	; (800fb38 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 800fab8:	21c5      	movs	r1, #197	; 0xc5
 800faba:	4820      	ldr	r0, [pc, #128]	; (800fb3c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800fabc:	f00a fd00 	bl	801a4c0 <__assert_func>
            return buffer[pos];
 800fac0:	68ba      	ldr	r2, [r7, #8]
 800fac2:	8a92      	ldrh	r2, [r2, #20]
 800fac4:	4611      	mov	r1, r2
 800fac6:	68ba      	ldr	r2, [r7, #8]
 800fac8:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800facc:	613b      	str	r3, [r7, #16]
 800face:	4613      	mov	r3, r2
 800fad0:	81fb      	strh	r3, [r7, #14]
            buffer[pos] = newChar;
        }

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 800fad2:	693b      	ldr	r3, [r7, #16]
 800fad4:	8adb      	ldrh	r3, [r3, #22]
 800fad6:	2b01      	cmp	r3, #1
 800fad8:	d806      	bhi.n	800fae8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 800fada:	4b1b      	ldr	r3, [pc, #108]	; (800fb48 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 800fadc:	4a1b      	ldr	r2, [pc, #108]	; (800fb4c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 800fade:	f44f 718e 	mov.w	r1, #284	; 0x11c
 800fae2:	4816      	ldr	r0, [pc, #88]	; (800fb3c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800fae4:	f00a fcec 	bl	801a4c0 <__assert_func>
            const uint16_t index = pos + 1;
 800fae8:	693b      	ldr	r3, [r7, #16]
 800faea:	8a9b      	ldrh	r3, [r3, #20]
 800faec:	3301      	adds	r3, #1
 800faee:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 800faf0:	89bb      	ldrh	r3, [r7, #12]
 800faf2:	2b09      	cmp	r3, #9
 800faf4:	d801      	bhi.n	800fafa <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 800faf6:	89bb      	ldrh	r3, [r7, #12]
 800faf8:	e000      	b.n	800fafc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 800fafa:	2300      	movs	r3, #0
 800fafc:	693a      	ldr	r2, [r7, #16]
 800fafe:	89f9      	ldrh	r1, [r7, #14]
 800fb00:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 800fb04:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	3322      	adds	r3, #34	; 0x22
 800fb0a:	61bb      	str	r3, [r7, #24]
 800fb0c:	f640 133f 	movw	r3, #2367	; 0x93f
 800fb10:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 800fb12:	69bb      	ldr	r3, [r7, #24]
 800fb14:	8a9b      	ldrh	r3, [r3, #20]
 800fb16:	4619      	mov	r1, r3
 800fb18:	69bb      	ldr	r3, [r7, #24]
 800fb1a:	8afa      	ldrh	r2, [r7, #22]
 800fb1c:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 800fb20:	bf00      	nop
        }
    }
    return getNextChar();
 800fb22:	6878      	ldr	r0, [r7, #4]
 800fb24:	f008 f812 	bl	8017b4c <_ZN8touchgfx12TextProvider11getNextCharEv>
 800fb28:	4603      	mov	r3, r0
}
 800fb2a:	4618      	mov	r0, r3
 800fb2c:	3728      	adds	r7, #40	; 0x28
 800fb2e:	46bd      	mov	sp, r7
 800fb30:	bd80      	pop	{r7, pc}
 800fb32:	bf00      	nop
 800fb34:	0801baa4 	.word	0x0801baa4
 800fb38:	0801bab0 	.word	0x0801bab0
 800fb3c:	0801bb5c 	.word	0x0801bb5c
 800fb40:	0801bba4 	.word	0x0801bba4
 800fb44:	0801bbb4 	.word	0x0801bbb4
 800fb48:	0801bc88 	.word	0x0801bc88
 800fb4c:	0801bc94 	.word	0x0801bc94

0800fb50 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 800fb50:	b580      	push	{r7, lr}
 800fb52:	b082      	sub	sp, #8
 800fb54:	af00      	add	r7, sp, #0
 800fb56:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 800fb58:	6878      	ldr	r0, [r7, #4]
 800fb5a:	f007 ffc0 	bl	8017ade <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 800fb5e:	bf00      	nop
 800fb60:	3708      	adds	r7, #8
 800fb62:	46bd      	mov	sp, r7
 800fb64:	bd80      	pop	{r7, pc}
	...

0800fb68 <_ZN17TypedTextDatabase8getFontsEv>:
{
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
}

const touchgfx::Font** getFonts()
{
 800fb68:	b480      	push	{r7}
 800fb6a:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 800fb6c:	4b02      	ldr	r3, [pc, #8]	; (800fb78 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 800fb6e:	4618      	mov	r0, r3
 800fb70:	46bd      	mov	sp, r7
 800fb72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb76:	4770      	bx	lr
 800fb78:	2001e188 	.word	0x2001e188

0800fb7c <_Z41__static_initialization_and_destruction_0ii>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 800fb7c:	b580      	push	{r7, lr}
 800fb7e:	b082      	sub	sp, #8
 800fb80:	af00      	add	r7, sp, #0
 800fb82:	6078      	str	r0, [r7, #4]
 800fb84:	6039      	str	r1, [r7, #0]
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	2b01      	cmp	r3, #1
 800fb8a:	d113      	bne.n	800fbb4 <_Z41__static_initialization_and_destruction_0ii+0x38>
 800fb8c:	683b      	ldr	r3, [r7, #0]
 800fb8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fb92:	4293      	cmp	r3, r2
 800fb94:	d10e      	bne.n	800fbb4 <_Z41__static_initialization_and_destruction_0ii+0x38>
    &(getFont_verdana_20_4bpp()),
 800fb96:	f7ff fdd5 	bl	800f744 <_Z23getFont_verdana_20_4bppv>
 800fb9a:	4603      	mov	r3, r0
};
 800fb9c:	4a07      	ldr	r2, [pc, #28]	; (800fbbc <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800fb9e:	6013      	str	r3, [r2, #0]
    &(getFont_verdana_40_4bpp()),
 800fba0:	f7ff fe2a 	bl	800f7f8 <_Z23getFont_verdana_40_4bppv>
 800fba4:	4603      	mov	r3, r0
};
 800fba6:	4a05      	ldr	r2, [pc, #20]	; (800fbbc <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800fba8:	6053      	str	r3, [r2, #4]
    &(getFont_verdana_10_4bpp())
 800fbaa:	f7ff fd71 	bl	800f690 <_Z23getFont_verdana_10_4bppv>
 800fbae:	4603      	mov	r3, r0
};
 800fbb0:	4a02      	ldr	r2, [pc, #8]	; (800fbbc <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800fbb2:	6093      	str	r3, [r2, #8]
} // namespace TypedTextDatabase
 800fbb4:	bf00      	nop
 800fbb6:	3708      	adds	r7, #8
 800fbb8:	46bd      	mov	sp, r7
 800fbba:	bd80      	pop	{r7, pc}
 800fbbc:	2001e188 	.word	0x2001e188

0800fbc0 <_GLOBAL__sub_I_touchgfx_fonts>:
 800fbc0:	b580      	push	{r7, lr}
 800fbc2:	af00      	add	r7, sp, #0
 800fbc4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800fbc8:	2001      	movs	r0, #1
 800fbca:	f7ff ffd7 	bl	800fb7c <_Z41__static_initialization_and_destruction_0ii>
 800fbce:	bd80      	pop	{r7, pc}

0800fbd0 <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 800fbd0:	b480      	push	{r7}
 800fbd2:	b083      	sub	sp, #12
 800fbd4:	af00      	add	r7, sp, #0
 800fbd6:	6078      	str	r0, [r7, #4]
    {
 800fbd8:	4a04      	ldr	r2, [pc, #16]	; (800fbec <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	601a      	str	r2, [r3, #0]
    }
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	4618      	mov	r0, r3
 800fbe2:	370c      	adds	r7, #12
 800fbe4:	46bd      	mov	sp, r7
 800fbe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbea:	4770      	bx	lr
 800fbec:	0801e01c 	.word	0x0801e01c

0800fbf0 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 800fbf0:	b580      	push	{r7, lr}
 800fbf2:	b082      	sub	sp, #8
 800fbf4:	af00      	add	r7, sp, #0
 800fbf6:	6078      	str	r0, [r7, #4]
    }
 800fbf8:	6878      	ldr	r0, [r7, #4]
 800fbfa:	f7ff ffe9 	bl	800fbd0 <_ZN8touchgfx15TouchControllerD1Ev>
 800fbfe:	2104      	movs	r1, #4
 800fc00:	6878      	ldr	r0, [r7, #4]
 800fc02:	f00a fc2f 	bl	801a464 <_ZdlPvj>
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	4618      	mov	r0, r3
 800fc0a:	3708      	adds	r7, #8
 800fc0c:	46bd      	mov	sp, r7
 800fc0e:	bd80      	pop	{r7, pc}

0800fc10 <_ZN20STM32TouchController4initEv>:
/* USER CODE BEGIN STM32TouchController */

#include <STM32TouchController.hpp>

void STM32TouchController::init()
{
 800fc10:	b480      	push	{r7}
 800fc12:	b083      	sub	sp, #12
 800fc14:	af00      	add	r7, sp, #0
 800fc16:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
}
 800fc18:	bf00      	nop
 800fc1a:	370c      	adds	r7, #12
 800fc1c:	46bd      	mov	sp, r7
 800fc1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc22:	4770      	bx	lr

0800fc24 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 800fc24:	b480      	push	{r7}
 800fc26:	b085      	sub	sp, #20
 800fc28:	af00      	add	r7, sp, #0
 800fc2a:	60f8      	str	r0, [r7, #12]
 800fc2c:	60b9      	str	r1, [r7, #8]
 800fc2e:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    return false;
 800fc30:	2300      	movs	r3, #0
}
 800fc32:	4618      	mov	r0, r3
 800fc34:	3714      	adds	r7, #20
 800fc36:	46bd      	mov	sp, r7
 800fc38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc3c:	4770      	bx	lr
	...

0800fc40 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 800fc40:	b580      	push	{r7, lr}
 800fc42:	b082      	sub	sp, #8
 800fc44:	af00      	add	r7, sp, #0
 800fc46:	6078      	str	r0, [r7, #4]
 800fc48:	4a05      	ldr	r2, [pc, #20]	; (800fc60 <_ZN20STM32TouchControllerD1Ev+0x20>)
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	601a      	str	r2, [r3, #0]
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	4618      	mov	r0, r3
 800fc52:	f7ff ffbd 	bl	800fbd0 <_ZN8touchgfx15TouchControllerD1Ev>
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	4618      	mov	r0, r3
 800fc5a:	3708      	adds	r7, #8
 800fc5c:	46bd      	mov	sp, r7
 800fc5e:	bd80      	pop	{r7, pc}
 800fc60:	0801e004 	.word	0x0801e004

0800fc64 <_ZN20STM32TouchControllerD0Ev>:
 800fc64:	b580      	push	{r7, lr}
 800fc66:	b082      	sub	sp, #8
 800fc68:	af00      	add	r7, sp, #0
 800fc6a:	6078      	str	r0, [r7, #4]
 800fc6c:	6878      	ldr	r0, [r7, #4]
 800fc6e:	f7ff ffe7 	bl	800fc40 <_ZN20STM32TouchControllerD1Ev>
 800fc72:	2104      	movs	r1, #4
 800fc74:	6878      	ldr	r0, [r7, #4]
 800fc76:	f00a fbf5 	bl	801a464 <_ZdlPvj>
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	4618      	mov	r0, r3
 800fc7e:	3708      	adds	r7, #8
 800fc80:	46bd      	mov	sp, r7
 800fc82:	bd80      	pop	{r7, pc}

0800fc84 <_ZN8touchgfx4GPIO4initEv>:

/*
 * Perform configuration of IO pins.
 */
void GPIO::init()
{
 800fc84:	b480      	push	{r7}
 800fc86:	af00      	add	r7, sp, #0

}
 800fc88:	bf00      	nop
 800fc8a:	46bd      	mov	sp, r7
 800fc8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc90:	4770      	bx	lr
	...

0800fc94 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 800fc94:	b580      	push	{r7, lr}
 800fc96:	b082      	sub	sp, #8
 800fc98:	af00      	add	r7, sp, #0
 800fc9a:	4603      	mov	r3, r0
 800fc9c:	71fb      	strb	r3, [r7, #7]
    switch (id)
 800fc9e:	79fb      	ldrb	r3, [r7, #7]
 800fca0:	2b03      	cmp	r3, #3
 800fca2:	d823      	bhi.n	800fcec <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x58>
 800fca4:	a201      	add	r2, pc, #4	; (adr r2, 800fcac <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>)
 800fca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fcaa:	bf00      	nop
 800fcac:	0800fcbd 	.word	0x0800fcbd
 800fcb0:	0800fcc9 	.word	0x0800fcc9
 800fcb4:	0800fcd5 	.word	0x0800fcd5
 800fcb8:	0800fce1 	.word	0x0800fce1
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_SET);
 800fcbc:	2201      	movs	r2, #1
 800fcbe:	2140      	movs	r1, #64	; 0x40
 800fcc0:	480c      	ldr	r0, [pc, #48]	; (800fcf4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x60>)
 800fcc2:	f7f4 ffe3 	bl	8004c8c <HAL_GPIO_WritePin>
#endif
        break;
 800fcc6:	e011      	b.n	800fcec <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x58>
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, GPIO_PIN_SET);
 800fcc8:	2201      	movs	r2, #1
 800fcca:	2180      	movs	r1, #128	; 0x80
 800fccc:	4809      	ldr	r0, [pc, #36]	; (800fcf4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x60>)
 800fcce:	f7f4 ffdd 	bl	8004c8c <HAL_GPIO_WritePin>
#endif
        break;
 800fcd2:	e00b      	b.n	800fcec <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x58>
    case GPIO::FRAME_RATE:
#if defined(FRAME_RATE_GPIO_Port) && defined(FRAME_RATE_Pin)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, GPIO_PIN_SET);
 800fcd4:	2201      	movs	r2, #1
 800fcd6:	2102      	movs	r1, #2
 800fcd8:	4807      	ldr	r0, [pc, #28]	; (800fcf8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x64>)
 800fcda:	f7f4 ffd7 	bl	8004c8c <HAL_GPIO_WritePin>
#endif
        break;
 800fcde:	e005      	b.n	800fcec <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x58>
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_SET);
 800fce0:	2201      	movs	r2, #1
 800fce2:	2140      	movs	r1, #64	; 0x40
 800fce4:	4805      	ldr	r0, [pc, #20]	; (800fcfc <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x68>)
 800fce6:	f7f4 ffd1 	bl	8004c8c <HAL_GPIO_WritePin>
#endif
        break;
 800fcea:	bf00      	nop
    }
}
 800fcec:	bf00      	nop
 800fcee:	3708      	adds	r7, #8
 800fcf0:	46bd      	mov	sp, r7
 800fcf2:	bd80      	pop	{r7, pc}
 800fcf4:	40020800 	.word	0x40020800
 800fcf8:	40022400 	.word	0x40022400
 800fcfc:	40021400 	.word	0x40021400

0800fd00 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 800fd00:	b580      	push	{r7, lr}
 800fd02:	b082      	sub	sp, #8
 800fd04:	af00      	add	r7, sp, #0
 800fd06:	4603      	mov	r3, r0
 800fd08:	71fb      	strb	r3, [r7, #7]
    switch (id)
 800fd0a:	79fb      	ldrb	r3, [r7, #7]
 800fd0c:	2b03      	cmp	r3, #3
 800fd0e:	d823      	bhi.n	800fd58 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>
 800fd10:	a201      	add	r2, pc, #4	; (adr r2, 800fd18 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>)
 800fd12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd16:	bf00      	nop
 800fd18:	0800fd29 	.word	0x0800fd29
 800fd1c:	0800fd35 	.word	0x0800fd35
 800fd20:	0800fd41 	.word	0x0800fd41
 800fd24:	0800fd4d 	.word	0x0800fd4d
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 800fd28:	2200      	movs	r2, #0
 800fd2a:	2140      	movs	r1, #64	; 0x40
 800fd2c:	480c      	ldr	r0, [pc, #48]	; (800fd60 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x60>)
 800fd2e:	f7f4 ffad 	bl	8004c8c <HAL_GPIO_WritePin>
#endif
        break;
 800fd32:	e011      	b.n	800fd58 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, GPIO_PIN_RESET);
 800fd34:	2200      	movs	r2, #0
 800fd36:	2180      	movs	r1, #128	; 0x80
 800fd38:	4809      	ldr	r0, [pc, #36]	; (800fd60 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x60>)
 800fd3a:	f7f4 ffa7 	bl	8004c8c <HAL_GPIO_WritePin>
#endif
        break;
 800fd3e:	e00b      	b.n	800fd58 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>
    case GPIO::FRAME_RATE:
#if defined(FRAME_RATE_GPIO_Port) && defined(FRAME_RATE_Pin)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, GPIO_PIN_RESET);
 800fd40:	2200      	movs	r2, #0
 800fd42:	2102      	movs	r1, #2
 800fd44:	4807      	ldr	r0, [pc, #28]	; (800fd64 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x64>)
 800fd46:	f7f4 ffa1 	bl	8004c8c <HAL_GPIO_WritePin>
#endif
        break;
 800fd4a:	e005      	b.n	800fd58 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 800fd4c:	2200      	movs	r2, #0
 800fd4e:	2140      	movs	r1, #64	; 0x40
 800fd50:	4805      	ldr	r0, [pc, #20]	; (800fd68 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x68>)
 800fd52:	f7f4 ff9b 	bl	8004c8c <HAL_GPIO_WritePin>
#endif
        break;
 800fd56:	bf00      	nop
    }
}
 800fd58:	bf00      	nop
 800fd5a:	3708      	adds	r7, #8
 800fd5c:	46bd      	mov	sp, r7
 800fd5e:	bd80      	pop	{r7, pc}
 800fd60:	40020800 	.word	0x40020800
 800fd64:	40022400 	.word	0x40022400
 800fd68:	40021400 	.word	0x40021400

0800fd6c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 800fd6c:	b580      	push	{r7, lr}
 800fd6e:	b082      	sub	sp, #8
 800fd70:	af00      	add	r7, sp, #0
 800fd72:	4603      	mov	r3, r0
 800fd74:	71fb      	strb	r3, [r7, #7]
    switch (id)
 800fd76:	79fb      	ldrb	r3, [r7, #7]
 800fd78:	2b03      	cmp	r3, #3
 800fd7a:	d81f      	bhi.n	800fdbc <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x50>
 800fd7c:	a201      	add	r2, pc, #4	; (adr r2, 800fd84 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>)
 800fd7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd82:	bf00      	nop
 800fd84:	0800fd95 	.word	0x0800fd95
 800fd88:	0800fd9f 	.word	0x0800fd9f
 800fd8c:	0800fda9 	.word	0x0800fda9
 800fd90:	0800fdb3 	.word	0x0800fdb3
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 800fd94:	2140      	movs	r1, #64	; 0x40
 800fd96:	480b      	ldr	r0, [pc, #44]	; (800fdc4 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x58>)
 800fd98:	f7f4 ff91 	bl	8004cbe <HAL_GPIO_TogglePin>
#endif
        break;
 800fd9c:	e00e      	b.n	800fdbc <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x50>
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 800fd9e:	2180      	movs	r1, #128	; 0x80
 800fda0:	4808      	ldr	r0, [pc, #32]	; (800fdc4 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x58>)
 800fda2:	f7f4 ff8c 	bl	8004cbe <HAL_GPIO_TogglePin>
#endif
        break;
 800fda6:	e009      	b.n	800fdbc <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x50>
    case GPIO::FRAME_RATE:
#if defined(FRAME_RATE_GPIO_Port) && defined(FRAME_RATE_Pin)
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 800fda8:	2102      	movs	r1, #2
 800fdaa:	4807      	ldr	r0, [pc, #28]	; (800fdc8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x5c>)
 800fdac:	f7f4 ff87 	bl	8004cbe <HAL_GPIO_TogglePin>
#endif
        break;
 800fdb0:	e004      	b.n	800fdbc <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x50>
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 800fdb2:	2140      	movs	r1, #64	; 0x40
 800fdb4:	4805      	ldr	r0, [pc, #20]	; (800fdcc <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x60>)
 800fdb6:	f7f4 ff82 	bl	8004cbe <HAL_GPIO_TogglePin>
#endif
        break;
 800fdba:	bf00      	nop
    }
}
 800fdbc:	bf00      	nop
 800fdbe:	3708      	adds	r7, #8
 800fdc0:	46bd      	mov	sp, r7
 800fdc2:	bd80      	pop	{r7, pc}
 800fdc4:	40020800 	.word	0x40020800
 800fdc8:	40022400 	.word	0x40022400
 800fdcc:	40021400 	.word	0x40021400

0800fdd0 <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 800fdd0:	b480      	push	{r7}
 800fdd2:	b083      	sub	sp, #12
 800fdd4:	af00      	add	r7, sp, #0
 800fdd6:	6078      	str	r0, [r7, #4]
    {
 800fdd8:	4a04      	ldr	r2, [pc, #16]	; (800fdec <_ZN8touchgfx3HALD1Ev+0x1c>)
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	601a      	str	r2, [r3, #0]
    }
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	4618      	mov	r0, r3
 800fde2:	370c      	adds	r7, #12
 800fde4:	46bd      	mov	sp, r7
 800fde6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdea:	4770      	bx	lr
 800fdec:	0801e9ac 	.word	0x0801e9ac

0800fdf0 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 800fdf0:	b580      	push	{r7, lr}
 800fdf2:	b082      	sub	sp, #8
 800fdf4:	af00      	add	r7, sp, #0
 800fdf6:	6078      	str	r0, [r7, #4]
    }
 800fdf8:	6878      	ldr	r0, [r7, #4]
 800fdfa:	f7ff ffe9 	bl	800fdd0 <_ZN8touchgfx3HALD1Ev>
 800fdfe:	217c      	movs	r1, #124	; 0x7c
 800fe00:	6878      	ldr	r0, [r7, #4]
 800fe02:	f00a fb2f 	bl	801a464 <_ZdlPvj>
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	4618      	mov	r0, r3
 800fe0a:	3708      	adds	r7, #8
 800fe0c:	46bd      	mov	sp, r7
 800fe0e:	bd80      	pop	{r7, pc}

0800fe10 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 800fe10:	b480      	push	{r7}
 800fe12:	b083      	sub	sp, #12
 800fe14:	af00      	add	r7, sp, #0
 800fe16:	6078      	str	r0, [r7, #4]
 800fe18:	460b      	mov	r3, r1
 800fe1a:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	78fa      	ldrb	r2, [r7, #3]
 800fe20:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	2201      	movs	r2, #1
 800fe28:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 800fe2c:	bf00      	nop
 800fe2e:	370c      	adds	r7, #12
 800fe30:	46bd      	mov	sp, r7
 800fe32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe36:	4770      	bx	lr

0800fe38 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 800fe38:	b580      	push	{r7, lr}
 800fe3a:	b082      	sub	sp, #8
 800fe3c:	af00      	add	r7, sp, #0
 800fe3e:	6078      	str	r0, [r7, #4]
 800fe40:	460b      	mov	r3, r1
 800fe42:	807b      	strh	r3, [r7, #2]
 800fe44:	4613      	mov	r3, r2
 800fe46:	803b      	strh	r3, [r7, #0]
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 800fe48:	4b0c      	ldr	r3, [pc, #48]	; (800fe7c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x44>)
 800fe4a:	881b      	ldrh	r3, [r3, #0]
 800fe4c:	887a      	ldrh	r2, [r7, #2]
 800fe4e:	429a      	cmp	r2, r3
 800fe50:	d304      	bcc.n	800fe5c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x24>
 800fe52:	4b0b      	ldr	r3, [pc, #44]	; (800fe80 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x48>)
 800fe54:	881b      	ldrh	r3, [r3, #0]
 800fe56:	883a      	ldrh	r2, [r7, #0]
 800fe58:	429a      	cmp	r2, r3
 800fe5a:	d205      	bcs.n	800fe68 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>
 800fe5c:	4b09      	ldr	r3, [pc, #36]	; (800fe84 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x4c>)
 800fe5e:	4a0a      	ldr	r2, [pc, #40]	; (800fe88 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x50>)
 800fe60:	219e      	movs	r1, #158	; 0x9e
 800fe62:	480a      	ldr	r0, [pc, #40]	; (800fe8c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x54>)
 800fe64:	f00a fb2c 	bl	801a4c0 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 800fe68:	4a09      	ldr	r2, [pc, #36]	; (800fe90 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x58>)
 800fe6a:	887b      	ldrh	r3, [r7, #2]
 800fe6c:	8013      	strh	r3, [r2, #0]
        FRAME_BUFFER_HEIGHT = height;
 800fe6e:	4a09      	ldr	r2, [pc, #36]	; (800fe94 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x5c>)
 800fe70:	883b      	ldrh	r3, [r7, #0]
 800fe72:	8013      	strh	r3, [r2, #0]
    }
 800fe74:	bf00      	nop
 800fe76:	3708      	adds	r7, #8
 800fe78:	46bd      	mov	sp, r7
 800fe7a:	bd80      	pop	{r7, pc}
 800fe7c:	200243d0 	.word	0x200243d0
 800fe80:	200243d2 	.word	0x200243d2
 800fe84:	0801bd48 	.word	0x0801bd48
 800fe88:	0801bdac 	.word	0x0801bdac
 800fe8c:	0801bdf0 	.word	0x0801bdf0
 800fe90:	200243d6 	.word	0x200243d6
 800fe94:	200243d8 	.word	0x200243d8

0800fe98 <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 800fe98:	b580      	push	{r7, lr}
 800fe9a:	b082      	sub	sp, #8
 800fe9c:	af00      	add	r7, sp, #0
 800fe9e:	6078      	str	r0, [r7, #4]
    {
        if (useDMAAcceleration)
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	d009      	beq.n	800febe <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
        {
            return dma.getBlitCaps();
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	685a      	ldr	r2, [r3, #4]
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	685b      	ldr	r3, [r3, #4]
 800feb2:	681b      	ldr	r3, [r3, #0]
 800feb4:	681b      	ldr	r3, [r3, #0]
 800feb6:	4610      	mov	r0, r2
 800feb8:	4798      	blx	r3
 800feba:	4603      	mov	r3, r0
 800febc:	e000      	b.n	800fec0 <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        }
        return static_cast<BlitOperations>(0);
 800febe:	2300      	movs	r3, #0
    }
 800fec0:	4618      	mov	r0, r3
 800fec2:	3708      	adds	r7, #8
 800fec4:	46bd      	mov	sp, r7
 800fec6:	bd80      	pop	{r7, pc}

0800fec8 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    /**
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     */
    virtual void backPorchExited()
 800fec8:	b580      	push	{r7, lr}
 800feca:	b082      	sub	sp, #8
 800fecc:	af00      	add	r7, sp, #0
 800fece:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 800fed0:	6878      	ldr	r0, [r7, #4]
 800fed2:	f006 f87b 	bl	8015fcc <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	681b      	ldr	r3, [r3, #0]
 800feda:	33ac      	adds	r3, #172	; 0xac
 800fedc:	681b      	ldr	r3, [r3, #0]
 800fede:	6878      	ldr	r0, [r7, #4]
 800fee0:	4798      	blx	r3
    }
 800fee2:	bf00      	nop
 800fee4:	3708      	adds	r7, #8
 800fee6:	46bd      	mov	sp, r7
 800fee8:	bd80      	pop	{r7, pc}

0800feea <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 800feea:	b480      	push	{r7}
 800feec:	b083      	sub	sp, #12
 800feee:	af00      	add	r7, sp, #0
 800fef0:	6078      	str	r0, [r7, #4]
 800fef2:	6039      	str	r1, [r7, #0]
    {
        (void)key; // Unused variable
        return false;
 800fef4:	2300      	movs	r3, #0
    }
 800fef6:	4618      	mov	r0, r3
 800fef8:	370c      	adds	r7, #12
 800fefa:	46bd      	mov	sp, r7
 800fefc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff00:	4770      	bx	lr
	...

0800ff04 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     *
     * @see setAnimationStorage
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 800ff04:	b580      	push	{r7, lr}
 800ff06:	b084      	sub	sp, #16
 800ff08:	af00      	add	r7, sp, #0
 800ff0a:	60f8      	str	r0, [r7, #12]
 800ff0c:	60b9      	str	r1, [r7, #8]
 800ff0e:	607a      	str	r2, [r7, #4]
 800ff10:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 800ff12:	68bb      	ldr	r3, [r7, #8]
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	d106      	bne.n	800ff26 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 800ff18:	4b0f      	ldr	r3, [pc, #60]	; (800ff58 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x54>)
 800ff1a:	4a10      	ldr	r2, [pc, #64]	; (800ff5c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x58>)
 800ff1c:	f240 21d2 	movw	r1, #722	; 0x2d2
 800ff20:	480f      	ldr	r0, [pc, #60]	; (800ff60 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 800ff22:	f00a facd 	bl	801a4c0 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 800ff26:	68fb      	ldr	r3, [r7, #12]
 800ff28:	68ba      	ldr	r2, [r7, #8]
 800ff2a:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 800ff2c:	68fb      	ldr	r3, [r7, #12]
 800ff2e:	687a      	ldr	r2, [r7, #4]
 800ff30:	641a      	str	r2, [r3, #64]	; 0x40
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	bf14      	ite	ne
 800ff38:	2301      	movne	r3, #1
 800ff3a:	2300      	moveq	r3, #0
 800ff3c:	b2da      	uxtb	r2, r3
 800ff3e:	4b09      	ldr	r3, [pc, #36]	; (800ff64 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 800ff40:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 800ff42:	68fb      	ldr	r3, [r7, #12]
 800ff44:	681b      	ldr	r3, [r3, #0]
 800ff46:	338c      	adds	r3, #140	; 0x8c
 800ff48:	681b      	ldr	r3, [r3, #0]
 800ff4a:	6839      	ldr	r1, [r7, #0]
 800ff4c:	68f8      	ldr	r0, [r7, #12]
 800ff4e:	4798      	blx	r3
    }
 800ff50:	bf00      	nop
 800ff52:	3710      	adds	r7, #16
 800ff54:	46bd      	mov	sp, r7
 800ff56:	bd80      	pop	{r7, pc}
 800ff58:	0801be34 	.word	0x0801be34
 800ff5c:	0801be6c 	.word	0x0801be6c
 800ff60:	0801bdf0 	.word	0x0801bdf0
 800ff64:	200243da 	.word	0x200243da

0800ff68 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
 800ff68:	b480      	push	{r7}
 800ff6a:	b083      	sub	sp, #12
 800ff6c:	af00      	add	r7, sp, #0
 800ff6e:	6078      	str	r0, [r7, #4]
 800ff70:	6039      	str	r1, [r7, #0]
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	683a      	ldr	r2, [r7, #0]
 800ff76:	645a      	str	r2, [r3, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 800ff78:	683b      	ldr	r3, [r7, #0]
 800ff7a:	2b00      	cmp	r3, #0
 800ff7c:	bf14      	ite	ne
 800ff7e:	2301      	movne	r3, #1
 800ff80:	2300      	moveq	r3, #0
 800ff82:	b2da      	uxtb	r2, r3
 800ff84:	4b03      	ldr	r3, [pc, #12]	; (800ff94 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x2c>)
 800ff86:	701a      	strb	r2, [r3, #0]
    }
 800ff88:	bf00      	nop
 800ff8a:	370c      	adds	r7, #12
 800ff8c:	46bd      	mov	sp, r7
 800ff8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff92:	4770      	bx	lr
 800ff94:	200243db 	.word	0x200243db

0800ff98 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * Gets the flash data reader. This method must be implemented in
     * subclasses that uses a FlashDataReader object.
     *
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
 800ff98:	b480      	push	{r7}
 800ff9a:	b083      	sub	sp, #12
 800ff9c:	af00      	add	r7, sp, #0
 800ff9e:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800ffa0:	2300      	movs	r3, #0
    }
 800ffa2:	4618      	mov	r0, r3
 800ffa4:	370c      	adds	r7, #12
 800ffa6:	46bd      	mov	sp, r7
 800ffa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffac:	4770      	bx	lr

0800ffae <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 800ffae:	b580      	push	{r7, lr}
 800ffb0:	b082      	sub	sp, #8
 800ffb2:	af00      	add	r7, sp, #0
 800ffb4:	6078      	str	r0, [r7, #4]
 800ffb6:	460b      	mov	r3, r1
 800ffb8:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	d004      	beq.n	800ffcc <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ffc6:	887a      	ldrh	r2, [r7, #2]
 800ffc8:	4610      	mov	r0, r2
 800ffca:	4798      	blx	r3
        }
    }
 800ffcc:	bf00      	nop
 800ffce:	3708      	adds	r7, #8
 800ffd0:	46bd      	mov	sp, r7
 800ffd2:	bd80      	pop	{r7, pc}

0800ffd4 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     * getTFTCurrentLine function is never called and can be disregarded.
     *
     * @return In this default implementation, 0xFFFF is returned to signify "not
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
 800ffd4:	b480      	push	{r7}
 800ffd6:	b083      	sub	sp, #12
 800ffd8:	af00      	add	r7, sp, #0
 800ffda:	6078      	str	r0, [r7, #4]
    {
        return 0xFFFFu;
 800ffdc:	f64f 73ff 	movw	r3, #65535	; 0xffff
    }
 800ffe0:	4618      	mov	r0, r3
 800ffe2:	370c      	adds	r7, #12
 800ffe4:	46bd      	mov	sp, r7
 800ffe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffea:	4770      	bx	lr

0800ffec <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 800ffec:	b580      	push	{r7, lr}
 800ffee:	b082      	sub	sp, #8
 800fff0:	af00      	add	r7, sp, #0
 800fff2:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	685a      	ldr	r2, [r3, #4]
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	685b      	ldr	r3, [r3, #4]
 800fffc:	681b      	ldr	r3, [r3, #0]
 800fffe:	3318      	adds	r3, #24
 8010000:	681b      	ldr	r3, [r3, #0]
 8010002:	4610      	mov	r0, r2
 8010004:	4798      	blx	r3
 8010006:	4603      	mov	r3, r0
    }
 8010008:	4618      	mov	r0, r3
 801000a:	3708      	adds	r7, #8
 801000c:	46bd      	mov	sp, r7
 801000e:	bd80      	pop	{r7, pc}

08010010 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 8010010:	b480      	push	{r7}
 8010012:	b085      	sub	sp, #20
 8010014:	af00      	add	r7, sp, #0
 8010016:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010024:	429a      	cmp	r2, r3
 8010026:	d011      	beq.n	801004c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>
        {
            if (DISPLAY_ROTATION == rotate0)
 8010028:	4b14      	ldr	r3, [pc, #80]	; (801007c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 801002a:	781b      	ldrb	r3, [r3, #0]
 801002c:	2b00      	cmp	r3, #0
 801002e:	d11e      	bne.n	801006e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 8010030:	4b13      	ldr	r3, [pc, #76]	; (8010080 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8010032:	881b      	ldrh	r3, [r3, #0]
 8010034:	81bb      	strh	r3, [r7, #12]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8010036:	4b13      	ldr	r3, [pc, #76]	; (8010084 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8010038:	881a      	ldrh	r2, [r3, #0]
 801003a:	4b11      	ldr	r3, [pc, #68]	; (8010080 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 801003c:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = tmp;
 801003e:	4a11      	ldr	r2, [pc, #68]	; (8010084 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8010040:	89bb      	ldrh	r3, [r7, #12]
 8010042:	8013      	strh	r3, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 8010044:	4b0d      	ldr	r3, [pc, #52]	; (801007c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8010046:	2201      	movs	r2, #1
 8010048:	701a      	strb	r2, [r3, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
        }
    }
 801004a:	e010      	b.n	801006e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
        else if (DISPLAY_ROTATION != rotate0)
 801004c:	4b0b      	ldr	r3, [pc, #44]	; (801007c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 801004e:	781b      	ldrb	r3, [r3, #0]
 8010050:	2b00      	cmp	r3, #0
 8010052:	d00c      	beq.n	801006e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            const uint16_t tmp = DISPLAY_HEIGHT;
 8010054:	4b0a      	ldr	r3, [pc, #40]	; (8010080 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8010056:	881b      	ldrh	r3, [r3, #0]
 8010058:	81fb      	strh	r3, [r7, #14]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 801005a:	4b0a      	ldr	r3, [pc, #40]	; (8010084 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 801005c:	881a      	ldrh	r2, [r3, #0]
 801005e:	4b08      	ldr	r3, [pc, #32]	; (8010080 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8010060:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = tmp;
 8010062:	4a08      	ldr	r2, [pc, #32]	; (8010084 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8010064:	89fb      	ldrh	r3, [r7, #14]
 8010066:	8013      	strh	r3, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 8010068:	4b04      	ldr	r3, [pc, #16]	; (801007c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 801006a:	2200      	movs	r2, #0
 801006c:	701a      	strb	r2, [r3, #0]
    }
 801006e:	bf00      	nop
 8010070:	3714      	adds	r7, #20
 8010072:	46bd      	mov	sp, r7
 8010074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010078:	4770      	bx	lr
 801007a:	bf00      	nop
 801007c:	200243d4 	.word	0x200243d4
 8010080:	200243d2 	.word	0x200243d2
 8010084:	200243d0 	.word	0x200243d0

08010088 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8010088:	b580      	push	{r7, lr}
 801008a:	b082      	sub	sp, #8
 801008c:	af00      	add	r7, sp, #0
 801008e:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	4618      	mov	r0, r3
 8010094:	f005 f9fd 	bl	8015492 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 8010098:	bf00      	nop
 801009a:	3708      	adds	r7, #8
 801009c:	46bd      	mov	sp, r7
 801009e:	bd80      	pop	{r7, pc}

080100a0 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 80100a0:	b580      	push	{r7, lr}
 80100a2:	b082      	sub	sp, #8
 80100a4:	af00      	add	r7, sp, #0
 80100a6:	6078      	str	r0, [r7, #4]
 80100a8:	4a05      	ldr	r2, [pc, #20]	; (80100c0 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	601a      	str	r2, [r3, #0]
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	4618      	mov	r0, r3
 80100b2:	f7ff fe8d 	bl	800fdd0 <_ZN8touchgfx3HALD1Ev>
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	4618      	mov	r0, r3
 80100ba:	3708      	adds	r7, #8
 80100bc:	46bd      	mov	sp, r7
 80100be:	bd80      	pop	{r7, pc}
 80100c0:	0801e280 	.word	0x0801e280

080100c4 <_ZN20TouchGFXGeneratedHALD0Ev>:
 80100c4:	b580      	push	{r7, lr}
 80100c6:	b082      	sub	sp, #8
 80100c8:	af00      	add	r7, sp, #0
 80100ca:	6078      	str	r0, [r7, #4]
 80100cc:	6878      	ldr	r0, [r7, #4]
 80100ce:	f7ff ffe7 	bl	80100a0 <_ZN20TouchGFXGeneratedHALD1Ev>
 80100d2:	217c      	movs	r1, #124	; 0x7c
 80100d4:	6878      	ldr	r0, [r7, #4]
 80100d6:	f00a f9c5 	bl	801a464 <_ZdlPvj>
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	4618      	mov	r0, r3
 80100de:	3708      	adds	r7, #8
 80100e0:	46bd      	mov	sp, r7
 80100e2:	bd80      	pop	{r7, pc}

080100e4 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 80100e4:	b580      	push	{r7, lr}
 80100e6:	b082      	sub	sp, #8
 80100e8:	af00      	add	r7, sp, #0
 80100ea:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	4618      	mov	r0, r3
 80100f0:	f7ff ffca 	bl	8010088 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 80100f4:	bf00      	nop
 80100f6:	3708      	adds	r7, #8
 80100f8:	46bd      	mov	sp, r7
 80100fa:	bd80      	pop	{r7, pc}

080100fc <_ZN11TouchGFXHAL10initializeEv>:
/* USER CODE BEGIN TouchGFXHAL.cpp */

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 80100fc:	b580      	push	{r7, lr}
 80100fe:	b082      	sub	sp, #8
 8010100:	af00      	add	r7, sp, #0
 8010102:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	4618      	mov	r0, r3
 8010108:	f002 f8d4 	bl	80122b4 <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 801010c:	bf00      	nop
 801010e:	3708      	adds	r7, #8
 8010110:	46bd      	mov	sp, r7
 8010112:	bd80      	pop	{r7, pc}

08010114 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 8010114:	b580      	push	{r7, lr}
 8010116:	b082      	sub	sp, #8
 8010118:	af00      	add	r7, sp, #0
 801011a:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	4618      	mov	r0, r3
 8010120:	f002 f948 	bl	80123b4 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 8010124:	4603      	mov	r3, r0
}
 8010126:	4618      	mov	r0, r3
 8010128:	3708      	adds	r7, #8
 801012a:	46bd      	mov	sp, r7
 801012c:	bd80      	pop	{r7, pc}

0801012e <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 801012e:	b580      	push	{r7, lr}
 8010130:	b082      	sub	sp, #8
 8010132:	af00      	add	r7, sp, #0
 8010134:	6078      	str	r0, [r7, #4]
 8010136:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	6839      	ldr	r1, [r7, #0]
 801013c:	4618      	mov	r0, r3
 801013e:	f002 f947 	bl	80123d0 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 8010142:	bf00      	nop
 8010144:	3708      	adds	r7, #8
 8010146:	46bd      	mov	sp, r7
 8010148:	bd80      	pop	{r7, pc}

0801014a <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 801014a:	b580      	push	{r7, lr}
 801014c:	b082      	sub	sp, #8
 801014e:	af00      	add	r7, sp, #0
 8010150:	6078      	str	r0, [r7, #4]
 8010152:	6039      	str	r1, [r7, #0]
    // be called to notify the touchgfx framework that flush has been performed.
    // To calculate he start adress of rect,
    // use advanceFrameBufferToRect(uint8_t* fbPtr, const touchgfx::Rect& rect)
    // defined in TouchGFXGeneratedHAL.cpp

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	6839      	ldr	r1, [r7, #0]
 8010158:	4618      	mov	r0, r3
 801015a:	f002 f944 	bl	80123e6 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
}
 801015e:	bf00      	nop
 8010160:	3708      	adds	r7, #8
 8010162:	46bd      	mov	sp, r7
 8010164:	bd80      	pop	{r7, pc}

08010166 <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8010166:	b580      	push	{r7, lr}
 8010168:	b084      	sub	sp, #16
 801016a:	af00      	add	r7, sp, #0
 801016c:	60f8      	str	r0, [r7, #12]
 801016e:	60b9      	str	r1, [r7, #8]
 8010170:	607a      	str	r2, [r7, #4]
 8010172:	603b      	str	r3, [r7, #0]
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 8010174:	68f8      	ldr	r0, [r7, #12]
 8010176:	683b      	ldr	r3, [r7, #0]
 8010178:	687a      	ldr	r2, [r7, #4]
 801017a:	68b9      	ldr	r1, [r7, #8]
 801017c:	f002 f941 	bl	8012402 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>
 8010180:	4603      	mov	r3, r0
}
 8010182:	4618      	mov	r0, r3
 8010184:	3710      	adds	r7, #16
 8010186:	46bd      	mov	sp, r7
 8010188:	bd80      	pop	{r7, pc}

0801018a <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 801018a:	b580      	push	{r7, lr}
 801018c:	b082      	sub	sp, #8
 801018e:	af00      	add	r7, sp, #0
 8010190:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	4618      	mov	r0, r3
 8010196:	f002 f8c1 	bl	801231c <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 801019a:	bf00      	nop
 801019c:	3708      	adds	r7, #8
 801019e:	46bd      	mov	sp, r7
 80101a0:	bd80      	pop	{r7, pc}

080101a2 <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 80101a2:	b580      	push	{r7, lr}
 80101a4:	b082      	sub	sp, #8
 80101a6:	af00      	add	r7, sp, #0
 80101a8:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	4618      	mov	r0, r3
 80101ae:	f002 f8c1 	bl	8012334 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 80101b2:	bf00      	nop
 80101b4:	3708      	adds	r7, #8
 80101b6:	46bd      	mov	sp, r7
 80101b8:	bd80      	pop	{r7, pc}

080101ba <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 80101ba:	b580      	push	{r7, lr}
 80101bc:	b082      	sub	sp, #8
 80101be:	af00      	add	r7, sp, #0
 80101c0:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	4618      	mov	r0, r3
 80101c6:	f002 f8c0 	bl	801234a <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 80101ca:	bf00      	nop
 80101cc:	3708      	adds	r7, #8
 80101ce:	46bd      	mov	sp, r7
 80101d0:	bd80      	pop	{r7, pc}

080101d2 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 80101d2:	b580      	push	{r7, lr}
 80101d4:	b082      	sub	sp, #8
 80101d6:	af00      	add	r7, sp, #0
 80101d8:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	4618      	mov	r0, r3
 80101de:	f002 f8bf 	bl	8012360 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 80101e2:	bf00      	nop
 80101e4:	3708      	adds	r7, #8
 80101e6:	46bd      	mov	sp, r7
 80101e8:	bd80      	pop	{r7, pc}

080101ea <_ZN11TouchGFXHAL10beginFrameEv>:

bool TouchGFXHAL::beginFrame()
{
 80101ea:	b580      	push	{r7, lr}
 80101ec:	b082      	sub	sp, #8
 80101ee:	af00      	add	r7, sp, #0
 80101f0:	6078      	str	r0, [r7, #4]
    return TouchGFXGeneratedHAL::beginFrame();
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	4618      	mov	r0, r3
 80101f6:	f002 f8bd 	bl	8012374 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>
 80101fa:	4603      	mov	r3, r0
}
 80101fc:	4618      	mov	r0, r3
 80101fe:	3708      	adds	r7, #8
 8010200:	46bd      	mov	sp, r7
 8010202:	bd80      	pop	{r7, pc}

08010204 <_ZN11TouchGFXHAL8endFrameEv>:

void TouchGFXHAL::endFrame()
{
 8010204:	b580      	push	{r7, lr}
 8010206:	b082      	sub	sp, #8
 8010208:	af00      	add	r7, sp, #0
 801020a:	6078      	str	r0, [r7, #4]
    TouchGFXGeneratedHAL::endFrame();
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	4618      	mov	r0, r3
 8010210:	f002 f8be 	bl	8012390 <_ZN20TouchGFXGeneratedHAL8endFrameEv>
}
 8010214:	bf00      	nop
 8010216:	3708      	adds	r7, #8
 8010218:	46bd      	mov	sp, r7
 801021a:	bd80      	pop	{r7, pc}

0801021c <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 801021c:	b580      	push	{r7, lr}
 801021e:	b082      	sub	sp, #8
 8010220:	af00      	add	r7, sp, #0
 8010222:	6078      	str	r0, [r7, #4]
 8010224:	4a05      	ldr	r2, [pc, #20]	; (801023c <_ZN11TouchGFXHALD1Ev+0x20>)
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	601a      	str	r2, [r3, #0]
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	4618      	mov	r0, r3
 801022e:	f7ff ff37 	bl	80100a0 <_ZN20TouchGFXGeneratedHALD1Ev>
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	4618      	mov	r0, r3
 8010236:	3708      	adds	r7, #8
 8010238:	46bd      	mov	sp, r7
 801023a:	bd80      	pop	{r7, pc}
 801023c:	0801e034 	.word	0x0801e034

08010240 <_ZN11TouchGFXHALD0Ev>:
 8010240:	b580      	push	{r7, lr}
 8010242:	b082      	sub	sp, #8
 8010244:	af00      	add	r7, sp, #0
 8010246:	6078      	str	r0, [r7, #4]
 8010248:	6878      	ldr	r0, [r7, #4]
 801024a:	f7ff ffe7 	bl	801021c <_ZN11TouchGFXHALD1Ev>
 801024e:	217c      	movs	r1, #124	; 0x7c
 8010250:	6878      	ldr	r0, [r7, #4]
 8010252:	f00a f907 	bl	801a464 <_ZdlPvj>
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	4618      	mov	r0, r3
 801025a:	3708      	adds	r7, #8
 801025c:	46bd      	mov	sp, r7
 801025e:	bd80      	pop	{r7, pc}

08010260 <_ZN12MJPEGDecoderD1Ev>:
#include <touchgfx/hal/VideoController.hpp>

class MJPEGDecoder
{
public:
    virtual ~MJPEGDecoder()
 8010260:	b480      	push	{r7}
 8010262:	b083      	sub	sp, #12
 8010264:	af00      	add	r7, sp, #0
 8010266:	6078      	str	r0, [r7, #4]
    {
 8010268:	4a04      	ldr	r2, [pc, #16]	; (801027c <_ZN12MJPEGDecoderD1Ev+0x1c>)
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	601a      	str	r2, [r3, #0]
    }
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	4618      	mov	r0, r3
 8010272:	370c      	adds	r7, #12
 8010274:	46bd      	mov	sp, r7
 8010276:	f85d 7b04 	ldr.w	r7, [sp], #4
 801027a:	4770      	bx	lr
 801027c:	0801e150 	.word	0x0801e150

08010280 <_ZN12MJPEGDecoderD0Ev>:
    virtual ~MJPEGDecoder()
 8010280:	b580      	push	{r7, lr}
 8010282:	b082      	sub	sp, #8
 8010284:	af00      	add	r7, sp, #0
 8010286:	6078      	str	r0, [r7, #4]
    }
 8010288:	6878      	ldr	r0, [r7, #4]
 801028a:	f7ff ffe9 	bl	8010260 <_ZN12MJPEGDecoderD1Ev>
 801028e:	2104      	movs	r1, #4
 8010290:	6878      	ldr	r0, [r7, #4]
 8010292:	f00a f8e7 	bl	801a464 <_ZdlPvj>
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	4618      	mov	r0, r3
 801029a:	3708      	adds	r7, #8
 801029c:	46bd      	mov	sp, r7
 801029e:	bd80      	pop	{r7, pc}

080102a0 <_ZNK20HardwareMJPEGDecoder21getCurrentFrameNumberEv>:
    virtual bool gotoNextFrame();
    //Decode part of the current frame
    virtual bool decodeFrame(const touchgfx::Rect& area, uint8_t* frameBuffer, uint32_t framebuffer_width);
    virtual bool decodeThumbnail(uint32_t frameno, uint8_t* buffer, uint16_t width, uint16_t height);
    virtual void gotoFrame(uint32_t frameno);
    virtual uint32_t getCurrentFrameNumber() const { return frameNumber; }
 80102a0:	b480      	push	{r7}
 80102a2:	b083      	sub	sp, #12
 80102a4:	af00      	add	r7, sp, #0
 80102a6:	6078      	str	r0, [r7, #4]
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	695b      	ldr	r3, [r3, #20]
 80102ac:	4618      	mov	r0, r3
 80102ae:	370c      	adds	r7, #12
 80102b0:	46bd      	mov	sp, r7
 80102b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102b6:	4770      	bx	lr

080102b8 <_ZN20HardwareMJPEGDecoder12getLastErrorEv>:
    virtual void setRepeatVideo(bool repeat);
    virtual void getVideoInfo(touchgfx::VideoInformation* data);

    void setAVIFileBuffer(uint8_t* buffer, uint32_t size) { aviBuffer = buffer, aviBufferLength = size; }

    virtual AVIErrors getLastError() { return lastError; }
 80102b8:	b480      	push	{r7}
 80102ba:	b083      	sub	sp, #12
 80102bc:	af00      	add	r7, sp, #0
 80102be:	6078      	str	r0, [r7, #4]
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80102c6:	4618      	mov	r0, r3
 80102c8:	370c      	adds	r7, #12
 80102ca:	46bd      	mov	sp, r7
 80102cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102d0:	4770      	bx	lr
	...

080102d4 <SCB_CleanInvalidateDCache>:
/**
  \brief   Clean & Invalidate D-Cache
  \details Cleans and Invalidates D-Cache
  */
__STATIC_INLINE void SCB_CleanInvalidateDCache (void)
{
 80102d4:	b480      	push	{r7}
 80102d6:	b085      	sub	sp, #20
 80102d8:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80102da:	4b21      	ldr	r3, [pc, #132]	; (8010360 <SCB_CleanInvalidateDCache+0x8c>)
 80102dc:	2200      	movs	r2, #0
 80102de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80102e2:	f3bf 8f4f 	dsb	sy
}
 80102e6:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80102e8:	4b1d      	ldr	r3, [pc, #116]	; (8010360 <SCB_CleanInvalidateDCache+0x8c>)
 80102ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80102ee:	607b      	str	r3, [r7, #4]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	0b5b      	lsrs	r3, r3, #13
 80102f4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80102f8:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	08db      	lsrs	r3, r3, #3
 80102fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010302:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8010304:	68fb      	ldr	r3, [r7, #12]
 8010306:	015a      	lsls	r2, r3, #5
 8010308:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 801030c:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 801030e:	68ba      	ldr	r2, [r7, #8]
 8010310:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8010312:	4913      	ldr	r1, [pc, #76]	; (8010360 <SCB_CleanInvalidateDCache+0x8c>)
 8010314:	4313      	orrs	r3, r2
 8010316:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 801031a:	68bb      	ldr	r3, [r7, #8]
 801031c:	1e5a      	subs	r2, r3, #1
 801031e:	60ba      	str	r2, [r7, #8]
 8010320:	2b00      	cmp	r3, #0
 8010322:	bf14      	ite	ne
 8010324:	2301      	movne	r3, #1
 8010326:	2300      	moveq	r3, #0
 8010328:	b2db      	uxtb	r3, r3
 801032a:	2b00      	cmp	r3, #0
 801032c:	d000      	beq.n	8010330 <SCB_CleanInvalidateDCache+0x5c>
      do {
 801032e:	e7e9      	b.n	8010304 <SCB_CleanInvalidateDCache+0x30>
    } while(sets-- != 0U);
 8010330:	68fb      	ldr	r3, [r7, #12]
 8010332:	1e5a      	subs	r2, r3, #1
 8010334:	60fa      	str	r2, [r7, #12]
 8010336:	2b00      	cmp	r3, #0
 8010338:	bf14      	ite	ne
 801033a:	2301      	movne	r3, #1
 801033c:	2300      	moveq	r3, #0
 801033e:	b2db      	uxtb	r3, r3
 8010340:	2b00      	cmp	r3, #0
 8010342:	d000      	beq.n	8010346 <SCB_CleanInvalidateDCache+0x72>
    do {
 8010344:	e7d9      	b.n	80102fa <SCB_CleanInvalidateDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8010346:	f3bf 8f4f 	dsb	sy
}
 801034a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801034c:	f3bf 8f6f 	isb	sy
}
 8010350:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8010352:	bf00      	nop
 8010354:	3714      	adds	r7, #20
 8010356:	46bd      	mov	sp, r7
 8010358:	f85d 7b04 	ldr.w	r7, [sp], #4
 801035c:	4770      	bx	lr
 801035e:	bf00      	nop
 8010360:	e000ed00 	.word	0xe000ed00

08010364 <_ZN12MJPEGDecoderC1Ev>:
class MJPEGDecoder
 8010364:	b480      	push	{r7}
 8010366:	b083      	sub	sp, #12
 8010368:	af00      	add	r7, sp, #0
 801036a:	6078      	str	r0, [r7, #4]
 801036c:	4a04      	ldr	r2, [pc, #16]	; (8010380 <_ZN12MJPEGDecoderC1Ev+0x1c>)
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	601a      	str	r2, [r3, #0]
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	4618      	mov	r0, r3
 8010376:	370c      	adds	r7, #12
 8010378:	46bd      	mov	sp, r7
 801037a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801037e:	4770      	bx	lr
 8010380:	0801e150 	.word	0x0801e150

08010384 <_ZN20HardwareMJPEGDecoderC1Ev>:
  uint32_t LastLineHeight;
  uint32_t MCU_pr_line;
  uint32_t bytes_pr_pixel;
} JPEG_ConvertorParams;

HardwareMJPEGDecoder::HardwareMJPEGDecoder()
 8010384:	b580      	push	{r7, lr}
 8010386:	b082      	sub	sp, #8
 8010388:	af00      	add	r7, sp, #0
 801038a:	6078      	str	r0, [r7, #4]
    : frameNumber(0), currentMovieOffset(0), indexOffset(0), firstFrameOffset(0), lastFrameEnd(0), movieLength(0), movieData(0),
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	4618      	mov	r0, r3
 8010390:	f7ff ffe8 	bl	8010364 <_ZN12MJPEGDecoderC1Ev>
 8010394:	4a21      	ldr	r2, [pc, #132]	; (801041c <_ZN20HardwareMJPEGDecoderC1Ev+0x98>)
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	601a      	str	r2, [r3, #0]
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	2200      	movs	r2, #0
 801039e:	615a      	str	r2, [r3, #20]
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	2200      	movs	r2, #0
 80103a4:	619a      	str	r2, [r3, #24]
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	2200      	movs	r2, #0
 80103aa:	61da      	str	r2, [r3, #28]
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	2200      	movs	r2, #0
 80103b0:	621a      	str	r2, [r3, #32]
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	2200      	movs	r2, #0
 80103b6:	625a      	str	r2, [r3, #36]	; 0x24
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	2200      	movs	r2, #0
 80103bc:	629a      	str	r2, [r3, #40]	; 0x28
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	2200      	movs	r2, #0
 80103c2:	62da      	str	r2, [r3, #44]	; 0x2c
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	2200      	movs	r2, #0
 80103c8:	631a      	str	r2, [r3, #48]	; 0x30
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	2200      	movs	r2, #0
 80103ce:	635a      	str	r2, [r3, #52]	; 0x34
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	2200      	movs	r2, #0
 80103d4:	639a      	str	r2, [r3, #56]	; 0x38
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	2200      	movs	r2, #0
 80103da:	63da      	str	r2, [r3, #60]	; 0x3c
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	2200      	movs	r2, #0
 80103e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
{
    //Clear video info
    videoInfo.frame_height = 0;
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	2200      	movs	r2, #0
 80103e8:	611a      	str	r2, [r3, #16]
    videoInfo.frame_width = 0;
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	2200      	movs	r2, #0
 80103ee:	60da      	str	r2, [r3, #12]
    videoInfo.ms_between_frames = 0;
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	2200      	movs	r2, #0
 80103f4:	605a      	str	r2, [r3, #4]
    videoInfo.number_of_frames = 0;
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	2200      	movs	r2, #0
 80103fa:	609a      	str	r2, [r3, #8]

    //Init color tables
    TGFX_JPEG_InitColorTables();
 80103fc:	f003 fa98 	bl	8013930 <TGFX_JPEG_InitColorTables>

    //Create decoding semaphore
    semDecodingDone = SEM_CREATE();
 8010400:	2200      	movs	r2, #0
 8010402:	2100      	movs	r1, #0
 8010404:	2001      	movs	r0, #1
 8010406:	f7fb fabb 	bl	800b980 <osSemaphoreNew>
 801040a:	4603      	mov	r3, r0
 801040c:	4a04      	ldr	r2, [pc, #16]	; (8010420 <_ZN20HardwareMJPEGDecoderC1Ev+0x9c>)
 801040e:	6013      	str	r3, [r2, #0]
}
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	4618      	mov	r0, r3
 8010414:	3708      	adds	r7, #8
 8010416:	46bd      	mov	sp, r7
 8010418:	bd80      	pop	{r7, pc}
 801041a:	bf00      	nop
 801041c:	0801e10c 	.word	0x0801e10c
 8010420:	2001e1c4 	.word	0x2001e1c4

08010424 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>:

int HardwareMJPEGDecoder::compare(const uint32_t offset, const char* str, uint32_t num)
{
 8010424:	b580      	push	{r7, lr}
 8010426:	b086      	sub	sp, #24
 8010428:	af00      	add	r7, sp, #0
 801042a:	60f8      	str	r0, [r7, #12]
 801042c:	60b9      	str	r1, [r7, #8]
 801042e:	607a      	str	r2, [r7, #4]
 8010430:	603b      	str	r3, [r7, #0]
    const char* src;
    if (reader != 0)
 8010432:	68fb      	ldr	r3, [r7, #12]
 8010434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010436:	2b00      	cmp	r3, #0
 8010438:	d008      	beq.n	801044c <_ZN20HardwareMJPEGDecoder7compareEmPKcm+0x28>
    {
        // Assuming data is in buffer!
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
 801043a:	68fb      	ldr	r3, [r7, #12]
 801043c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801043e:	68fb      	ldr	r3, [r7, #12]
 8010440:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010442:	68b9      	ldr	r1, [r7, #8]
 8010444:	1acb      	subs	r3, r1, r3
 8010446:	4413      	add	r3, r2
 8010448:	617b      	str	r3, [r7, #20]
 801044a:	e004      	b.n	8010456 <_ZN20HardwareMJPEGDecoder7compareEmPKcm+0x32>
    }
    else
    {
        src = (const char*)movieData + offset;
 801044c:	68fb      	ldr	r3, [r7, #12]
 801044e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010450:	68bb      	ldr	r3, [r7, #8]
 8010452:	4413      	add	r3, r2
 8010454:	617b      	str	r3, [r7, #20]
    }
    return strncmp(src, str, num);
 8010456:	683a      	ldr	r2, [r7, #0]
 8010458:	6879      	ldr	r1, [r7, #4]
 801045a:	6978      	ldr	r0, [r7, #20]
 801045c:	f00a fcd8 	bl	801ae10 <strncmp>
 8010460:	4603      	mov	r3, r0
}
 8010462:	4618      	mov	r0, r3
 8010464:	3718      	adds	r7, #24
 8010466:	46bd      	mov	sp, r7
 8010468:	bd80      	pop	{r7, pc}

0801046a <_ZN20HardwareMJPEGDecoder6getU32Em>:

inline uint32_t HardwareMJPEGDecoder::getU32(const uint32_t offset)
{
 801046a:	b480      	push	{r7}
 801046c:	b085      	sub	sp, #20
 801046e:	af00      	add	r7, sp, #0
 8010470:	6078      	str	r0, [r7, #4]
 8010472:	6039      	str	r1, [r7, #0]
    if (reader != 0)
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010478:	2b00      	cmp	r3, #0
 801047a:	d024      	beq.n	80104c6 <_ZN20HardwareMJPEGDecoder6getU32Em+0x5c>
    {
        // Assuming data is in buffer!
        const uint32_t index = offset - aviBufferStartOffset;
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010480:	683a      	ldr	r2, [r7, #0]
 8010482:	1ad3      	subs	r3, r2, r3
 8010484:	60bb      	str	r3, [r7, #8]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801048a:	68bb      	ldr	r3, [r7, #8]
 801048c:	4413      	add	r3, r2
 801048e:	781b      	ldrb	r3, [r3, #0]
 8010490:	4619      	mov	r1, r3
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010496:	68bb      	ldr	r3, [r7, #8]
 8010498:	3301      	adds	r3, #1
 801049a:	4413      	add	r3, r2
 801049c:	781b      	ldrb	r3, [r3, #0]
 801049e:	021b      	lsls	r3, r3, #8
 80104a0:	ea41 0203 	orr.w	r2, r1, r3
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80104a8:	68bb      	ldr	r3, [r7, #8]
 80104aa:	3302      	adds	r3, #2
 80104ac:	440b      	add	r3, r1
 80104ae:	781b      	ldrb	r3, [r3, #0]
 80104b0:	041b      	lsls	r3, r3, #16
 80104b2:	431a      	orrs	r2, r3
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80104b8:	68bb      	ldr	r3, [r7, #8]
 80104ba:	3303      	adds	r3, #3
 80104bc:	440b      	add	r3, r1
 80104be:	781b      	ldrb	r3, [r3, #0]
 80104c0:	061b      	lsls	r3, r3, #24
 80104c2:	4313      	orrs	r3, r2
 80104c4:	e016      	b.n	80104f4 <_ZN20HardwareMJPEGDecoder6getU32Em+0x8a>
    }
    else
    {
        const uint8_t* const d = movieData + offset;
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80104ca:	683b      	ldr	r3, [r7, #0]
 80104cc:	4413      	add	r3, r2
 80104ce:	60fb      	str	r3, [r7, #12]
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
 80104d0:	68fb      	ldr	r3, [r7, #12]
 80104d2:	781b      	ldrb	r3, [r3, #0]
 80104d4:	461a      	mov	r2, r3
 80104d6:	68fb      	ldr	r3, [r7, #12]
 80104d8:	3301      	adds	r3, #1
 80104da:	781b      	ldrb	r3, [r3, #0]
 80104dc:	021b      	lsls	r3, r3, #8
 80104de:	431a      	orrs	r2, r3
 80104e0:	68fb      	ldr	r3, [r7, #12]
 80104e2:	3302      	adds	r3, #2
 80104e4:	781b      	ldrb	r3, [r3, #0]
 80104e6:	041b      	lsls	r3, r3, #16
 80104e8:	431a      	orrs	r2, r3
 80104ea:	68fb      	ldr	r3, [r7, #12]
 80104ec:	3303      	adds	r3, #3
 80104ee:	781b      	ldrb	r3, [r3, #0]
 80104f0:	061b      	lsls	r3, r3, #24
 80104f2:	4313      	orrs	r3, r2
    }
}
 80104f4:	4618      	mov	r0, r3
 80104f6:	3714      	adds	r7, #20
 80104f8:	46bd      	mov	sp, r7
 80104fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104fe:	4770      	bx	lr

08010500 <_ZN20HardwareMJPEGDecoder6getU16Em>:

inline uint32_t HardwareMJPEGDecoder::getU16(const uint32_t offset)
{
 8010500:	b480      	push	{r7}
 8010502:	b085      	sub	sp, #20
 8010504:	af00      	add	r7, sp, #0
 8010506:	6078      	str	r0, [r7, #4]
 8010508:	6039      	str	r1, [r7, #0]
    if (reader != 0)
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801050e:	2b00      	cmp	r3, #0
 8010510:	d013      	beq.n	801053a <_ZN20HardwareMJPEGDecoder6getU16Em+0x3a>
    {
        // Assuming data is in buffer!
        const uint32_t index = offset - aviBufferStartOffset;
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010516:	683a      	ldr	r2, [r7, #0]
 8010518:	1ad3      	subs	r3, r2, r3
 801051a:	60bb      	str	r3, [r7, #8]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8);
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010520:	68bb      	ldr	r3, [r7, #8]
 8010522:	4413      	add	r3, r2
 8010524:	781b      	ldrb	r3, [r3, #0]
 8010526:	4619      	mov	r1, r3
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801052c:	68bb      	ldr	r3, [r7, #8]
 801052e:	3301      	adds	r3, #1
 8010530:	4413      	add	r3, r2
 8010532:	781b      	ldrb	r3, [r3, #0]
 8010534:	021b      	lsls	r3, r3, #8
 8010536:	430b      	orrs	r3, r1
 8010538:	e00c      	b.n	8010554 <_ZN20HardwareMJPEGDecoder6getU16Em+0x54>
    }
    else
    {
        const uint8_t* const d = movieData + offset;
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801053e:	683b      	ldr	r3, [r7, #0]
 8010540:	4413      	add	r3, r2
 8010542:	60fb      	str	r3, [r7, #12]
        return d[0] | (d[1] << 8);
 8010544:	68fb      	ldr	r3, [r7, #12]
 8010546:	781b      	ldrb	r3, [r3, #0]
 8010548:	461a      	mov	r2, r3
 801054a:	68fb      	ldr	r3, [r7, #12]
 801054c:	3301      	adds	r3, #1
 801054e:	781b      	ldrb	r3, [r3, #0]
 8010550:	021b      	lsls	r3, r3, #8
 8010552:	4313      	orrs	r3, r2
    }
}
 8010554:	4618      	mov	r0, r3
 8010556:	3714      	adds	r7, #20
 8010558:	46bd      	mov	sp, r7
 801055a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801055e:	4770      	bx	lr

08010560 <_ZN20HardwareMJPEGDecoder8readDataEmm>:

const uint8_t* HardwareMJPEGDecoder::readData(uint32_t offset, uint32_t length)
{
 8010560:	b580      	push	{r7, lr}
 8010562:	b084      	sub	sp, #16
 8010564:	af00      	add	r7, sp, #0
 8010566:	60f8      	str	r0, [r7, #12]
 8010568:	60b9      	str	r1, [r7, #8]
 801056a:	607a      	str	r2, [r7, #4]
    if (reader != 0)
 801056c:	68fb      	ldr	r3, [r7, #12]
 801056e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010570:	2b00      	cmp	r3, #0
 8010572:	d033      	beq.n	80105dc <_ZN20HardwareMJPEGDecoder8readDataEmm+0x7c>
    {
        if (length > aviBufferLength)
 8010574:	68fb      	ldr	r3, [r7, #12]
 8010576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010578:	687a      	ldr	r2, [r7, #4]
 801057a:	429a      	cmp	r2, r3
 801057c:	d909      	bls.n	8010592 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x32>
        {
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
 801057e:	68fb      	ldr	r3, [r7, #12]
 8010580:	2209      	movs	r2, #9
 8010582:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
            assert(!"Buffer to small");
 8010586:	4b19      	ldr	r3, [pc, #100]	; (80105ec <_ZN20HardwareMJPEGDecoder8readDataEmm+0x8c>)
 8010588:	4a19      	ldr	r2, [pc, #100]	; (80105f0 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x90>)
 801058a:	21a7      	movs	r1, #167	; 0xa7
 801058c:	4819      	ldr	r0, [pc, #100]	; (80105f4 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x94>)
 801058e:	f009 ff97 	bl	801a4c0 <__assert_func>
        }

        reader->seek(offset);
 8010592:	68fb      	ldr	r3, [r7, #12]
 8010594:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010596:	68fb      	ldr	r3, [r7, #12]
 8010598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801059a:	681b      	ldr	r3, [r3, #0]
 801059c:	330c      	adds	r3, #12
 801059e:	681b      	ldr	r3, [r3, #0]
 80105a0:	68b9      	ldr	r1, [r7, #8]
 80105a2:	4610      	mov	r0, r2
 80105a4:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
 80105a6:	68fb      	ldr	r3, [r7, #12]
 80105a8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80105aa:	68fb      	ldr	r3, [r7, #12]
 80105ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80105ae:	681b      	ldr	r3, [r3, #0]
 80105b0:	3310      	adds	r3, #16
 80105b2:	681b      	ldr	r3, [r3, #0]
 80105b4:	68fa      	ldr	r2, [r7, #12]
 80105b6:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80105b8:	687a      	ldr	r2, [r7, #4]
 80105ba:	4798      	blx	r3
 80105bc:	4603      	mov	r3, r0
 80105be:	f083 0301 	eor.w	r3, r3, #1
 80105c2:	b2db      	uxtb	r3, r3
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d003      	beq.n	80105d0 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x70>
        {
            lastError = AVI_ERROR_EOF_REACHED;
 80105c8:	68fb      	ldr	r3, [r7, #12]
 80105ca:	220d      	movs	r2, #13
 80105cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        }

        aviBufferStartOffset = offset;
 80105d0:	68fb      	ldr	r3, [r7, #12]
 80105d2:	68ba      	ldr	r2, [r7, #8]
 80105d4:	63da      	str	r2, [r3, #60]	; 0x3c
        return aviBuffer;
 80105d6:	68fb      	ldr	r3, [r7, #12]
 80105d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80105da:	e003      	b.n	80105e4 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x84>
    }

    return movieData + offset;
 80105dc:	68fb      	ldr	r3, [r7, #12]
 80105de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80105e0:	68bb      	ldr	r3, [r7, #8]
 80105e2:	4413      	add	r3, r2
}
 80105e4:	4618      	mov	r0, r3
 80105e6:	3710      	adds	r7, #16
 80105e8:	46bd      	mov	sp, r7
 80105ea:	bd80      	pop	{r7, pc}
 80105ec:	0801bebc 	.word	0x0801bebc
 80105f0:	0801bed0 	.word	0x0801bed0
 80105f4:	0801bf14 	.word	0x0801bf14

080105f8 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm>:

bool HardwareMJPEGDecoder::decodeNextFrame(uint8_t* buffer, uint16_t buffer_width, uint16_t buffer_height, uint32_t buffer_stride)
{
 80105f8:	b580      	push	{r7, lr}
 80105fa:	b08e      	sub	sp, #56	; 0x38
 80105fc:	af04      	add	r7, sp, #16
 80105fe:	60f8      	str	r0, [r7, #12]
 8010600:	60b9      	str	r1, [r7, #8]
 8010602:	4611      	mov	r1, r2
 8010604:	461a      	mov	r2, r3
 8010606:	460b      	mov	r3, r1
 8010608:	80fb      	strh	r3, [r7, #6]
 801060a:	4613      	mov	r3, r2
 801060c:	80bb      	strh	r3, [r7, #4]
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 801060e:	68fb      	ldr	r3, [r7, #12]
 8010610:	695b      	ldr	r3, [r3, #20]
 8010612:	2b00      	cmp	r3, #0
 8010614:	d105      	bne.n	8010622 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x2a>
 8010616:	4b4e      	ldr	r3, [pc, #312]	; (8010750 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x158>)
 8010618:	4a4e      	ldr	r2, [pc, #312]	; (8010754 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x15c>)
 801061a:	21b9      	movs	r1, #185	; 0xb9
 801061c:	484e      	ldr	r0, [pc, #312]	; (8010758 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x160>)
 801061e:	f009 ff4f 	bl	801a4c0 <__assert_func>

    //find next frame and decode it
    readData(currentMovieOffset, 8);
 8010622:	68fb      	ldr	r3, [r7, #12]
 8010624:	699b      	ldr	r3, [r3, #24]
 8010626:	2208      	movs	r2, #8
 8010628:	4619      	mov	r1, r3
 801062a:	68f8      	ldr	r0, [r7, #12]
 801062c:	f7ff ff98 	bl	8010560 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    uint32_t streamNo  = getU16(currentMovieOffset);
 8010630:	68fb      	ldr	r3, [r7, #12]
 8010632:	699b      	ldr	r3, [r3, #24]
 8010634:	4619      	mov	r1, r3
 8010636:	68f8      	ldr	r0, [r7, #12]
 8010638:	f7ff ff62 	bl	8010500 <_ZN20HardwareMJPEGDecoder6getU16Em>
 801063c:	6238      	str	r0, [r7, #32]
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 801063e:	68fb      	ldr	r3, [r7, #12]
 8010640:	699b      	ldr	r3, [r3, #24]
 8010642:	3302      	adds	r3, #2
 8010644:	4619      	mov	r1, r3
 8010646:	68f8      	ldr	r0, [r7, #12]
 8010648:	f7ff ff5a 	bl	8010500 <_ZN20HardwareMJPEGDecoder6getU16Em>
 801064c:	61f8      	str	r0, [r7, #28]
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 801064e:	68fb      	ldr	r3, [r7, #12]
 8010650:	699b      	ldr	r3, [r3, #24]
 8010652:	3304      	adds	r3, #4
 8010654:	4619      	mov	r1, r3
 8010656:	68f8      	ldr	r0, [r7, #12]
 8010658:	f7ff ff07 	bl	801046a <_ZN20HardwareMJPEGDecoder6getU32Em>
 801065c:	61b8      	str	r0, [r7, #24]

    const uint16_t STREAM0 = 0x3030;
 801065e:	f243 0330 	movw	r3, #12336	; 0x3030
 8010662:	82fb      	strh	r3, [r7, #22]
    const uint16_t TYPEDC  = 0x6364;
 8010664:	f246 3364 	movw	r3, #25444	; 0x6364
 8010668:	82bb      	strh	r3, [r7, #20]

    bool isCurrentFrameLast;
    //play frame if we have it all
    if (currentMovieOffset + 8 + chunkSize < movieLength)
 801066a:	68fb      	ldr	r3, [r7, #12]
 801066c:	699a      	ldr	r2, [r3, #24]
 801066e:	69bb      	ldr	r3, [r7, #24]
 8010670:	4413      	add	r3, r2
 8010672:	f103 0208 	add.w	r2, r3, #8
 8010676:	68fb      	ldr	r3, [r7, #12]
 8010678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801067a:	429a      	cmp	r2, r3
 801067c:	d255      	bcs.n	801072a <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x132>
    {
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 801067e:	6a3b      	ldr	r3, [r7, #32]
 8010680:	f243 0230 	movw	r2, #12336	; 0x3030
 8010684:	4293      	cmp	r3, r2
 8010686:	d126      	bne.n	80106d6 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xde>
 8010688:	69fb      	ldr	r3, [r7, #28]
 801068a:	f246 3264 	movw	r2, #25444	; 0x6364
 801068e:	4293      	cmp	r3, r2
 8010690:	d121      	bne.n	80106d6 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xde>
 8010692:	69bb      	ldr	r3, [r7, #24]
 8010694:	2b00      	cmp	r3, #0
 8010696:	d01e      	beq.n	80106d6 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xde>
        {
            currentMovieOffset += 8;
 8010698:	68fb      	ldr	r3, [r7, #12]
 801069a:	699b      	ldr	r3, [r3, #24]
 801069c:	f103 0208 	add.w	r2, r3, #8
 80106a0:	68fb      	ldr	r3, [r7, #12]
 80106a2:	619a      	str	r2, [r3, #24]
            //decode frame
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 80106a4:	68fb      	ldr	r3, [r7, #12]
 80106a6:	699b      	ldr	r3, [r3, #24]
 80106a8:	69ba      	ldr	r2, [r7, #24]
 80106aa:	4619      	mov	r1, r3
 80106ac:	68f8      	ldr	r0, [r7, #12]
 80106ae:	f7ff ff57 	bl	8010560 <_ZN20HardwareMJPEGDecoder8readDataEmm>
 80106b2:	6138      	str	r0, [r7, #16]
            decodeMJPEGFrame(chunk, chunkSize, buffer, buffer_width, buffer_height, buffer_stride);
 80106b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106b6:	9302      	str	r3, [sp, #8]
 80106b8:	88bb      	ldrh	r3, [r7, #4]
 80106ba:	9301      	str	r3, [sp, #4]
 80106bc:	88fb      	ldrh	r3, [r7, #6]
 80106be:	9300      	str	r3, [sp, #0]
 80106c0:	68bb      	ldr	r3, [r7, #8]
 80106c2:	69ba      	ldr	r2, [r7, #24]
 80106c4:	6939      	ldr	r1, [r7, #16]
 80106c6:	68f8      	ldr	r0, [r7, #12]
 80106c8:	f000 fa8e 	bl	8010be8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>
            frameNumber++;
 80106cc:	68fb      	ldr	r3, [r7, #12]
 80106ce:	695b      	ldr	r3, [r3, #20]
 80106d0:	1c5a      	adds	r2, r3, #1
 80106d2:	68fb      	ldr	r3, [r7, #12]
 80106d4:	615a      	str	r2, [r3, #20]
        }

        isCurrentFrameLast = false;
 80106d6:	2300      	movs	r3, #0
 80106d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        // Advance to next frame
        currentMovieOffset += chunkSize;
 80106dc:	68fb      	ldr	r3, [r7, #12]
 80106de:	699a      	ldr	r2, [r3, #24]
 80106e0:	69bb      	ldr	r3, [r7, #24]
 80106e2:	441a      	add	r2, r3
 80106e4:	68fb      	ldr	r3, [r7, #12]
 80106e6:	619a      	str	r2, [r3, #24]
        if (chunkSize == 0) // Empty frame - Skip
 80106e8:	69bb      	ldr	r3, [r7, #24]
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d105      	bne.n	80106fa <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x102>
        {
          currentMovieOffset += 8;
 80106ee:	68fb      	ldr	r3, [r7, #12]
 80106f0:	699b      	ldr	r3, [r3, #24]
 80106f2:	f103 0208 	add.w	r2, r3, #8
 80106f6:	68fb      	ldr	r3, [r7, #12]
 80106f8:	619a      	str	r2, [r3, #24]
        }
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 80106fa:	68fb      	ldr	r3, [r7, #12]
 80106fc:	699b      	ldr	r3, [r3, #24]
 80106fe:	3301      	adds	r3, #1
 8010700:	f023 0201 	bic.w	r2, r3, #1
 8010704:	68fb      	ldr	r3, [r7, #12]
 8010706:	619a      	str	r2, [r3, #24]

        if (currentMovieOffset == lastFrameEnd)
 8010708:	68fb      	ldr	r3, [r7, #12]
 801070a:	699a      	ldr	r2, [r3, #24]
 801070c:	68fb      	ldr	r3, [r7, #12]
 801070e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010710:	429a      	cmp	r2, r3
 8010712:	d114      	bne.n	801073e <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x146>
        {
            frameNumber = 1;
 8010714:	68fb      	ldr	r3, [r7, #12]
 8010716:	2201      	movs	r2, #1
 8010718:	615a      	str	r2, [r3, #20]
            currentMovieOffset = firstFrameOffset; //start over
 801071a:	68fb      	ldr	r3, [r7, #12]
 801071c:	6a1a      	ldr	r2, [r3, #32]
 801071e:	68fb      	ldr	r3, [r7, #12]
 8010720:	619a      	str	r2, [r3, #24]
            isCurrentFrameLast = true;
 8010722:	2301      	movs	r3, #1
 8010724:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010728:	e009      	b.n	801073e <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x146>
        }
    }
    else
    {
        frameNumber = 1;
 801072a:	68fb      	ldr	r3, [r7, #12]
 801072c:	2201      	movs	r2, #1
 801072e:	615a      	str	r2, [r3, #20]
        currentMovieOffset = firstFrameOffset; //start over
 8010730:	68fb      	ldr	r3, [r7, #12]
 8010732:	6a1a      	ldr	r2, [r3, #32]
 8010734:	68fb      	ldr	r3, [r7, #12]
 8010736:	619a      	str	r2, [r3, #24]
        isCurrentFrameLast = true;
 8010738:	2301      	movs	r3, #1
 801073a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    return !isCurrentFrameLast;
 801073e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010742:	f083 0301 	eor.w	r3, r3, #1
 8010746:	b2db      	uxtb	r3, r3
}
 8010748:	4618      	mov	r0, r3
 801074a:	3728      	adds	r7, #40	; 0x28
 801074c:	46bd      	mov	sp, r7
 801074e:	bd80      	pop	{r7, pc}
 8010750:	0801bf4c 	.word	0x0801bf4c
 8010754:	0801bf98 	.word	0x0801bf98
 8010758:	0801bf14 	.word	0x0801bf14

0801075c <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv>:

bool HardwareMJPEGDecoder::gotoNextFrame()
{
 801075c:	b580      	push	{r7, lr}
 801075e:	b086      	sub	sp, #24
 8010760:	af00      	add	r7, sp, #0
 8010762:	6078      	str	r0, [r7, #4]
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	695b      	ldr	r3, [r3, #20]
 8010768:	2b00      	cmp	r3, #0
 801076a:	d105      	bne.n	8010778 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x1c>
 801076c:	4b37      	ldr	r3, [pc, #220]	; (801084c <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0xf0>)
 801076e:	4a38      	ldr	r2, [pc, #224]	; (8010850 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0xf4>)
 8010770:	21ed      	movs	r1, #237	; 0xed
 8010772:	4838      	ldr	r0, [pc, #224]	; (8010854 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0xf8>)
 8010774:	f009 fea4 	bl	801a4c0 <__assert_func>

    readData(currentMovieOffset, 8);
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	699b      	ldr	r3, [r3, #24]
 801077c:	2208      	movs	r2, #8
 801077e:	4619      	mov	r1, r3
 8010780:	6878      	ldr	r0, [r7, #4]
 8010782:	f7ff feed 	bl	8010560 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	699b      	ldr	r3, [r3, #24]
 801078a:	3304      	adds	r3, #4
 801078c:	4619      	mov	r1, r3
 801078e:	6878      	ldr	r0, [r7, #4]
 8010790:	f7ff fe6b 	bl	801046a <_ZN20HardwareMJPEGDecoder6getU32Em>
 8010794:	6178      	str	r0, [r7, #20]

    //increment until next video frame
    while (currentMovieOffset + 8 + chunkSize < movieLength)
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	699a      	ldr	r2, [r3, #24]
 801079a:	697b      	ldr	r3, [r7, #20]
 801079c:	4413      	add	r3, r2
 801079e:	f103 0208 	add.w	r2, r3, #8
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80107a6:	429a      	cmp	r2, r3
 80107a8:	d243      	bcs.n	8010832 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0xd6>
    {
        //increment one frame
        currentMovieOffset += chunkSize + 8;
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	699a      	ldr	r2, [r3, #24]
 80107ae:	697b      	ldr	r3, [r7, #20]
 80107b0:	4413      	add	r3, r2
 80107b2:	f103 0208 	add.w	r2, r3, #8
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	619a      	str	r2, [r3, #24]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	699b      	ldr	r3, [r3, #24]
 80107be:	3301      	adds	r3, #1
 80107c0:	f023 0201 	bic.w	r2, r3, #1
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	619a      	str	r2, [r3, #24]
        frameNumber++;
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	695b      	ldr	r3, [r3, #20]
 80107cc:	1c5a      	adds	r2, r3, #1
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	615a      	str	r2, [r3, #20]

        //next chunk
        readData(currentMovieOffset, 8);
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	699b      	ldr	r3, [r3, #24]
 80107d6:	2208      	movs	r2, #8
 80107d8:	4619      	mov	r1, r3
 80107da:	6878      	ldr	r0, [r7, #4]
 80107dc:	f7ff fec0 	bl	8010560 <_ZN20HardwareMJPEGDecoder8readDataEmm>
        //check it is a video frame
        uint32_t streamNo  = getU16(currentMovieOffset);
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	699b      	ldr	r3, [r3, #24]
 80107e4:	4619      	mov	r1, r3
 80107e6:	6878      	ldr	r0, [r7, #4]
 80107e8:	f7ff fe8a 	bl	8010500 <_ZN20HardwareMJPEGDecoder6getU16Em>
 80107ec:	6138      	str	r0, [r7, #16]
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	699b      	ldr	r3, [r3, #24]
 80107f2:	3302      	adds	r3, #2
 80107f4:	4619      	mov	r1, r3
 80107f6:	6878      	ldr	r0, [r7, #4]
 80107f8:	f7ff fe82 	bl	8010500 <_ZN20HardwareMJPEGDecoder6getU16Em>
 80107fc:	60f8      	str	r0, [r7, #12]
        chunkSize = getU32(currentMovieOffset + 4);
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	699b      	ldr	r3, [r3, #24]
 8010802:	3304      	adds	r3, #4
 8010804:	4619      	mov	r1, r3
 8010806:	6878      	ldr	r0, [r7, #4]
 8010808:	f7ff fe2f 	bl	801046a <_ZN20HardwareMJPEGDecoder6getU32Em>
 801080c:	6178      	str	r0, [r7, #20]
        const uint16_t STREAM0 = 0x3030;
 801080e:	f243 0330 	movw	r3, #12336	; 0x3030
 8010812:	817b      	strh	r3, [r7, #10]
        const uint16_t TYPEDC  = 0x6364;
 8010814:	f246 3364 	movw	r3, #25444	; 0x6364
 8010818:	813b      	strh	r3, [r7, #8]

        if (streamNo == STREAM0 && chunkType == TYPEDC)
 801081a:	693b      	ldr	r3, [r7, #16]
 801081c:	f243 0230 	movw	r2, #12336	; 0x3030
 8010820:	4293      	cmp	r3, r2
 8010822:	d1b8      	bne.n	8010796 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x3a>
 8010824:	68fb      	ldr	r3, [r7, #12]
 8010826:	f246 3264 	movw	r2, #25444	; 0x6364
 801082a:	4293      	cmp	r3, r2
 801082c:	d1b3      	bne.n	8010796 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x3a>
        {
            // Found next frame
            return true;
 801082e:	2301      	movs	r3, #1
 8010830:	e007      	b.n	8010842 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0xe6>
        }
    }

    //skip back to first frame
    frameNumber = 1;
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	2201      	movs	r2, #1
 8010836:	615a      	str	r2, [r3, #20]
    currentMovieOffset = firstFrameOffset; //start over
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	6a1a      	ldr	r2, [r3, #32]
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	619a      	str	r2, [r3, #24]
    return false;
 8010840:	2300      	movs	r3, #0
}
 8010842:	4618      	mov	r0, r3
 8010844:	3718      	adds	r7, #24
 8010846:	46bd      	mov	sp, r7
 8010848:	bd80      	pop	{r7, pc}
 801084a:	bf00      	nop
 801084c:	0801bf4c 	.word	0x0801bf4c
 8010850:	0801bff4 	.word	0x0801bff4
 8010854:	0801bf14 	.word	0x0801bf14

08010858 <_ZN20HardwareMJPEGDecoder12setVideoDataEPKhm>:

void HardwareMJPEGDecoder::setVideoData(const uint8_t* movie, const uint32_t length)
{
 8010858:	b580      	push	{r7, lr}
 801085a:	b084      	sub	sp, #16
 801085c:	af00      	add	r7, sp, #0
 801085e:	60f8      	str	r0, [r7, #12]
 8010860:	60b9      	str	r1, [r7, #8]
 8010862:	607a      	str	r2, [r7, #4]
    movieData = movie;
 8010864:	68fb      	ldr	r3, [r7, #12]
 8010866:	68ba      	ldr	r2, [r7, #8]
 8010868:	62da      	str	r2, [r3, #44]	; 0x2c
    movieLength = length;
 801086a:	68fb      	ldr	r3, [r7, #12]
 801086c:	687a      	ldr	r2, [r7, #4]
 801086e:	629a      	str	r2, [r3, #40]	; 0x28
    reader = 0; //not using reader
 8010870:	68fb      	ldr	r3, [r7, #12]
 8010872:	2200      	movs	r2, #0
 8010874:	631a      	str	r2, [r3, #48]	; 0x30

    readVideoHeader();
 8010876:	68f8      	ldr	r0, [r7, #12]
 8010878:	f000 f834 	bl	80108e4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>
}
 801087c:	bf00      	nop
 801087e:	3710      	adds	r7, #16
 8010880:	46bd      	mov	sp, r7
 8010882:	bd80      	pop	{r7, pc}

08010884 <_ZN20HardwareMJPEGDecoder12setVideoDataERN8touchgfx15VideoDataReaderE>:

void HardwareMJPEGDecoder::setVideoData(touchgfx::VideoDataReader& reader)
{
 8010884:	b580      	push	{r7, lr}
 8010886:	b082      	sub	sp, #8
 8010888:	af00      	add	r7, sp, #0
 801088a:	6078      	str	r0, [r7, #4]
 801088c:	6039      	str	r1, [r7, #0]
    this->reader = &reader;
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	683a      	ldr	r2, [r7, #0]
 8010892:	631a      	str	r2, [r3, #48]	; 0x30
    movieData = 0;
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	2200      	movs	r2, #0
 8010898:	62da      	str	r2, [r3, #44]	; 0x2c
    movieLength = reader.getDataLength();
 801089a:	683b      	ldr	r3, [r7, #0]
 801089c:	681b      	ldr	r3, [r3, #0]
 801089e:	3308      	adds	r3, #8
 80108a0:	681b      	ldr	r3, [r3, #0]
 80108a2:	6838      	ldr	r0, [r7, #0]
 80108a4:	4798      	blx	r3
 80108a6:	4602      	mov	r2, r0
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	629a      	str	r2, [r3, #40]	; 0x28

    readVideoHeader();
 80108ac:	6878      	ldr	r0, [r7, #4]
 80108ae:	f000 f819 	bl	80108e4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>
}
 80108b2:	bf00      	nop
 80108b4:	3708      	adds	r7, #8
 80108b6:	46bd      	mov	sp, r7
 80108b8:	bd80      	pop	{r7, pc}

080108ba <_ZN20HardwareMJPEGDecoder8hasVideoEv>:

bool HardwareMJPEGDecoder::hasVideo()
{
 80108ba:	b480      	push	{r7}
 80108bc:	b083      	sub	sp, #12
 80108be:	af00      	add	r7, sp, #0
 80108c0:	6078      	str	r0, [r7, #4]
    return (reader != 0) || (movieData != 0);
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80108c6:	2b00      	cmp	r3, #0
 80108c8:	d103      	bne.n	80108d2 <_ZN20HardwareMJPEGDecoder8hasVideoEv+0x18>
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	d001      	beq.n	80108d6 <_ZN20HardwareMJPEGDecoder8hasVideoEv+0x1c>
 80108d2:	2301      	movs	r3, #1
 80108d4:	e000      	b.n	80108d8 <_ZN20HardwareMJPEGDecoder8hasVideoEv+0x1e>
 80108d6:	2300      	movs	r3, #0
}
 80108d8:	4618      	mov	r0, r3
 80108da:	370c      	adds	r7, #12
 80108dc:	46bd      	mov	sp, r7
 80108de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108e2:	4770      	bx	lr

080108e4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>:

void HardwareMJPEGDecoder::readVideoHeader()
{
 80108e4:	b580      	push	{r7, lr}
 80108e6:	b08a      	sub	sp, #40	; 0x28
 80108e8:	af00      	add	r7, sp, #0
 80108ea:	6078      	str	r0, [r7, #4]
    // Start from the start
    currentMovieOffset = 0;
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	2200      	movs	r2, #0
 80108f0:	619a      	str	r2, [r3, #24]
    lastError = AVI_NO_ERROR;
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	2200      	movs	r2, #0
 80108f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    // Make header available in buffer
    readData(0, 72);
 80108fa:	2248      	movs	r2, #72	; 0x48
 80108fc:	2100      	movs	r1, #0
 80108fe:	6878      	ldr	r0, [r7, #4]
 8010900:	f7ff fe2e 	bl	8010560 <_ZN20HardwareMJPEGDecoder8readDataEmm>

    // Decode the movie header to find first frame
    // Must be RIFF file
    if (compare(currentMovieOffset, "RIFF", 4))
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	6999      	ldr	r1, [r3, #24]
 8010908:	2304      	movs	r3, #4
 801090a:	4aa5      	ldr	r2, [pc, #660]	; (8010ba0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2bc>)
 801090c:	6878      	ldr	r0, [r7, #4]
 801090e:	f7ff fd89 	bl	8010424 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8010912:	4603      	mov	r3, r0
 8010914:	2b00      	cmp	r3, #0
 8010916:	bf14      	ite	ne
 8010918:	2301      	movne	r3, #1
 801091a:	2300      	moveq	r3, #0
 801091c:	b2db      	uxtb	r3, r3
 801091e:	2b00      	cmp	r3, #0
 8010920:	d00a      	beq.n	8010938 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x54>
    {
        lastError = AVI_ERROR_NOT_RIFF;
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	2203      	movs	r2, #3
 8010926:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        assert(!"RIFF header not found");
 801092a:	4b9e      	ldr	r3, [pc, #632]	; (8010ba4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c0>)
 801092c:	4a9e      	ldr	r2, [pc, #632]	; (8010ba8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c4>)
 801092e:	f240 1135 	movw	r1, #309	; 0x135
 8010932:	489e      	ldr	r0, [pc, #632]	; (8010bac <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c8>)
 8010934:	f009 fdc4 	bl	801a4c0 <__assert_func>
    }

    //skip fourcc and length
    currentMovieOffset += 8;
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	699b      	ldr	r3, [r3, #24]
 801093c:	f103 0208 	add.w	r2, r3, #8
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	619a      	str	r2, [r3, #24]
    if (compare(currentMovieOffset, "AVI ", 4))
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	6999      	ldr	r1, [r3, #24]
 8010948:	2304      	movs	r3, #4
 801094a:	4a99      	ldr	r2, [pc, #612]	; (8010bb0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2cc>)
 801094c:	6878      	ldr	r0, [r7, #4]
 801094e:	f7ff fd69 	bl	8010424 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8010952:	4603      	mov	r3, r0
 8010954:	2b00      	cmp	r3, #0
 8010956:	bf14      	ite	ne
 8010958:	2301      	movne	r3, #1
 801095a:	2300      	moveq	r3, #0
 801095c:	b2db      	uxtb	r3, r3
 801095e:	2b00      	cmp	r3, #0
 8010960:	d00a      	beq.n	8010978 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x94>
    {
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	2204      	movs	r2, #4
 8010966:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        assert(!"AVI header not found");
 801096a:	4b92      	ldr	r3, [pc, #584]	; (8010bb4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2d0>)
 801096c:	4a8e      	ldr	r2, [pc, #568]	; (8010ba8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c4>)
 801096e:	f240 113d 	movw	r1, #317	; 0x13d
 8010972:	488e      	ldr	r0, [pc, #568]	; (8010bac <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c8>)
 8010974:	f009 fda4 	bl	801a4c0 <__assert_func>
    }

    currentMovieOffset += 4;
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	699b      	ldr	r3, [r3, #24]
 801097c:	1d1a      	adds	r2, r3, #4
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	619a      	str	r2, [r3, #24]
    if (compare(currentMovieOffset, "LIST", 4))
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	6999      	ldr	r1, [r3, #24]
 8010986:	2304      	movs	r3, #4
 8010988:	4a8b      	ldr	r2, [pc, #556]	; (8010bb8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2d4>)
 801098a:	6878      	ldr	r0, [r7, #4]
 801098c:	f7ff fd4a 	bl	8010424 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8010990:	4603      	mov	r3, r0
 8010992:	2b00      	cmp	r3, #0
 8010994:	bf14      	ite	ne
 8010996:	2301      	movne	r3, #1
 8010998:	2300      	moveq	r3, #0
 801099a:	b2db      	uxtb	r3, r3
 801099c:	2b00      	cmp	r3, #0
 801099e:	d00a      	beq.n	80109b6 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xd2>
    {
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	2205      	movs	r2, #5
 80109a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        assert(!"AVI LIST not found");
 80109a8:	4b84      	ldr	r3, [pc, #528]	; (8010bbc <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2d8>)
 80109aa:	4a7f      	ldr	r2, [pc, #508]	; (8010ba8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c4>)
 80109ac:	f44f 71a2 	mov.w	r1, #324	; 0x144
 80109b0:	487e      	ldr	r0, [pc, #504]	; (8010bac <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c8>)
 80109b2:	f009 fd85 	bl	801a4c0 <__assert_func>
    }

    //save AVI List info
    const uint32_t aviListSize = getU32(currentMovieOffset + 4);
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	699b      	ldr	r3, [r3, #24]
 80109ba:	3304      	adds	r3, #4
 80109bc:	4619      	mov	r1, r3
 80109be:	6878      	ldr	r0, [r7, #4]
 80109c0:	f7ff fd53 	bl	801046a <_ZN20HardwareMJPEGDecoder6getU32Em>
 80109c4:	61f8      	str	r0, [r7, #28]
    const uint32_t aviListOffset = currentMovieOffset;
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	699b      	ldr	r3, [r3, #24]
 80109ca:	61bb      	str	r3, [r7, #24]
    assert(aviListSize);
 80109cc:	69fb      	ldr	r3, [r7, #28]
 80109ce:	2b00      	cmp	r3, #0
 80109d0:	d106      	bne.n	80109e0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xfc>
 80109d2:	4b7b      	ldr	r3, [pc, #492]	; (8010bc0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2dc>)
 80109d4:	4a74      	ldr	r2, [pc, #464]	; (8010ba8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c4>)
 80109d6:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 80109da:	4874      	ldr	r0, [pc, #464]	; (8010bac <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c8>)
 80109dc:	f009 fd70 	bl	801a4c0 <__assert_func>

    //look into header to find frame rate
    bool foundFrame = true;
 80109e0:	2301      	movs	r3, #1
 80109e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint32_t offset =  currentMovieOffset + 8;
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	699b      	ldr	r3, [r3, #24]
 80109ea:	3308      	adds	r3, #8
 80109ec:	617b      	str	r3, [r7, #20]
    if (compare(offset, "hdrl", 4))
 80109ee:	2304      	movs	r3, #4
 80109f0:	4a74      	ldr	r2, [pc, #464]	; (8010bc4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2e0>)
 80109f2:	6979      	ldr	r1, [r7, #20]
 80109f4:	6878      	ldr	r0, [r7, #4]
 80109f6:	f7ff fd15 	bl	8010424 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 80109fa:	4603      	mov	r3, r0
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	bf14      	ite	ne
 8010a00:	2301      	movne	r3, #1
 8010a02:	2300      	moveq	r3, #0
 8010a04:	b2db      	uxtb	r3, r3
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	d006      	beq.n	8010a18 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x134>
    {
        lastError = AVI_ERROR_AVI_HDRL_NOT_FOUND;
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	2206      	movs	r2, #6
 8010a0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        foundFrame = false;
 8010a12:	2300      	movs	r3, #0
 8010a14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    offset += 4;
 8010a18:	697b      	ldr	r3, [r7, #20]
 8010a1a:	3304      	adds	r3, #4
 8010a1c:	617b      	str	r3, [r7, #20]
    if (compare(offset, "avih", 4))
 8010a1e:	2304      	movs	r3, #4
 8010a20:	4a69      	ldr	r2, [pc, #420]	; (8010bc8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2e4>)
 8010a22:	6979      	ldr	r1, [r7, #20]
 8010a24:	6878      	ldr	r0, [r7, #4]
 8010a26:	f7ff fcfd 	bl	8010424 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8010a2a:	4603      	mov	r3, r0
 8010a2c:	2b00      	cmp	r3, #0
 8010a2e:	bf14      	ite	ne
 8010a30:	2301      	movne	r3, #1
 8010a32:	2300      	moveq	r3, #0
 8010a34:	b2db      	uxtb	r3, r3
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	d006      	beq.n	8010a48 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x164>
    {
        lastError = AVI_ERROR_AVI_AVIH_NOT_FOUND;
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	2207      	movs	r2, #7
 8010a3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        foundFrame = false;
 8010a42:	2300      	movs	r3, #0
 8010a44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if (foundFrame)
 8010a48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	d028      	beq.n	8010aa2 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1be>
    {
        offset += 8; //skip fourcc and cb in AVIMAINHEADER
 8010a50:	697b      	ldr	r3, [r7, #20]
 8010a52:	3308      	adds	r3, #8
 8010a54:	617b      	str	r3, [r7, #20]
        videoInfo.ms_between_frames = getU32(offset)/1000;
 8010a56:	6979      	ldr	r1, [r7, #20]
 8010a58:	6878      	ldr	r0, [r7, #4]
 8010a5a:	f7ff fd06 	bl	801046a <_ZN20HardwareMJPEGDecoder6getU32Em>
 8010a5e:	4603      	mov	r3, r0
 8010a60:	4a5a      	ldr	r2, [pc, #360]	; (8010bcc <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2e8>)
 8010a62:	fba2 2303 	umull	r2, r3, r2, r3
 8010a66:	099a      	lsrs	r2, r3, #6
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	605a      	str	r2, [r3, #4]
        videoInfo.number_of_frames = getU32(offset + 16);
 8010a6c:	697b      	ldr	r3, [r7, #20]
 8010a6e:	3310      	adds	r3, #16
 8010a70:	4619      	mov	r1, r3
 8010a72:	6878      	ldr	r0, [r7, #4]
 8010a74:	f7ff fcf9 	bl	801046a <_ZN20HardwareMJPEGDecoder6getU32Em>
 8010a78:	4602      	mov	r2, r0
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	609a      	str	r2, [r3, #8]
        videoInfo.frame_width = getU32(offset + 32);
 8010a7e:	697b      	ldr	r3, [r7, #20]
 8010a80:	3320      	adds	r3, #32
 8010a82:	4619      	mov	r1, r3
 8010a84:	6878      	ldr	r0, [r7, #4]
 8010a86:	f7ff fcf0 	bl	801046a <_ZN20HardwareMJPEGDecoder6getU32Em>
 8010a8a:	4602      	mov	r2, r0
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	60da      	str	r2, [r3, #12]
        videoInfo.frame_height = getU32(offset + 36);
 8010a90:	697b      	ldr	r3, [r7, #20]
 8010a92:	3324      	adds	r3, #36	; 0x24
 8010a94:	4619      	mov	r1, r3
 8010a96:	6878      	ldr	r0, [r7, #4]
 8010a98:	f7ff fce7 	bl	801046a <_ZN20HardwareMJPEGDecoder6getU32Em>
 8010a9c:	4602      	mov	r2, r0
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	611a      	str	r2, [r3, #16]
    }
    //skip rest of AVI header, start from end of AVI List

    //look for list with 'movi' header
    uint32_t listOffset = aviListOffset + aviListSize + 8;
 8010aa2:	69ba      	ldr	r2, [r7, #24]
 8010aa4:	69fb      	ldr	r3, [r7, #28]
 8010aa6:	4413      	add	r3, r2
 8010aa8:	3308      	adds	r3, #8
 8010aaa:	623b      	str	r3, [r7, #32]
    readData(listOffset, 12);
 8010aac:	220c      	movs	r2, #12
 8010aae:	6a39      	ldr	r1, [r7, #32]
 8010ab0:	6878      	ldr	r0, [r7, #4]
 8010ab2:	f7ff fd55 	bl	8010560 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 8010ab6:	6a3b      	ldr	r3, [r7, #32]
 8010ab8:	f103 0108 	add.w	r1, r3, #8
 8010abc:	2304      	movs	r3, #4
 8010abe:	4a44      	ldr	r2, [pc, #272]	; (8010bd0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2ec>)
 8010ac0:	6878      	ldr	r0, [r7, #4]
 8010ac2:	f7ff fcaf 	bl	8010424 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8010ac6:	4603      	mov	r3, r0
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	d00b      	beq.n	8010ae4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x200>
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010ad2:	2b00      	cmp	r3, #0
 8010ad4:	d106      	bne.n	8010ae4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x200>
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010ada:	6a3a      	ldr	r2, [r7, #32]
 8010adc:	429a      	cmp	r2, r3
 8010ade:	d201      	bcs.n	8010ae4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x200>
 8010ae0:	2301      	movs	r3, #1
 8010ae2:	e000      	b.n	8010ae6 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x202>
 8010ae4:	2300      	movs	r3, #0
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	d012      	beq.n	8010b10 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x22c>
    {
        const uint32_t listSize = getU32(listOffset + 4) + 8;
 8010aea:	6a3b      	ldr	r3, [r7, #32]
 8010aec:	3304      	adds	r3, #4
 8010aee:	4619      	mov	r1, r3
 8010af0:	6878      	ldr	r0, [r7, #4]
 8010af2:	f7ff fcba 	bl	801046a <_ZN20HardwareMJPEGDecoder6getU32Em>
 8010af6:	4603      	mov	r3, r0
 8010af8:	3308      	adds	r3, #8
 8010afa:	60fb      	str	r3, [r7, #12]
        listOffset += listSize;
 8010afc:	6a3a      	ldr	r2, [r7, #32]
 8010afe:	68fb      	ldr	r3, [r7, #12]
 8010b00:	4413      	add	r3, r2
 8010b02:	623b      	str	r3, [r7, #32]
        readData(listOffset, 12);
 8010b04:	220c      	movs	r2, #12
 8010b06:	6a39      	ldr	r1, [r7, #32]
 8010b08:	6878      	ldr	r0, [r7, #4]
 8010b0a:	f7ff fd29 	bl	8010560 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 8010b0e:	e7d2      	b.n	8010ab6 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d2>
    }

    if (lastError != AVI_NO_ERROR)
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010b16:	2b00      	cmp	r3, #0
 8010b18:	d004      	beq.n	8010b24 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x240>
    {
        lastError = AVI_ERROR_MOVI_NOT_FOUND;
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	220a      	movs	r2, #10
 8010b1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return;
 8010b22:	e05e      	b.n	8010be2 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2fe>
    }

    //save first frame and end of last frame
    currentMovieOffset = listOffset + 8 + 4; //skip LIST and 'movi'
 8010b24:	6a3b      	ldr	r3, [r7, #32]
 8010b26:	f103 020c 	add.w	r2, r3, #12
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	619a      	str	r2, [r3, #24]
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 8010b2e:	6a3b      	ldr	r3, [r7, #32]
 8010b30:	3304      	adds	r3, #4
 8010b32:	4619      	mov	r1, r3
 8010b34:	6878      	ldr	r0, [r7, #4]
 8010b36:	f7ff fc98 	bl	801046a <_ZN20HardwareMJPEGDecoder6getU32Em>
 8010b3a:	4602      	mov	r2, r0
 8010b3c:	6a3b      	ldr	r3, [r7, #32]
 8010b3e:	4413      	add	r3, r2
 8010b40:	f103 0208 	add.w	r2, r3, #8
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	625a      	str	r2, [r3, #36]	; 0x24

    //find idx
    const uint32_t listSize = getU32(listOffset+4)+8;
 8010b48:	6a3b      	ldr	r3, [r7, #32]
 8010b4a:	3304      	adds	r3, #4
 8010b4c:	4619      	mov	r1, r3
 8010b4e:	6878      	ldr	r0, [r7, #4]
 8010b50:	f7ff fc8b 	bl	801046a <_ZN20HardwareMJPEGDecoder6getU32Em>
 8010b54:	4603      	mov	r3, r0
 8010b56:	3308      	adds	r3, #8
 8010b58:	613b      	str	r3, [r7, #16]
    listOffset += listSize;
 8010b5a:	6a3a      	ldr	r2, [r7, #32]
 8010b5c:	693b      	ldr	r3, [r7, #16]
 8010b5e:	4413      	add	r3, r2
 8010b60:	623b      	str	r3, [r7, #32]
    readData(listOffset, 4);
 8010b62:	2204      	movs	r2, #4
 8010b64:	6a39      	ldr	r1, [r7, #32]
 8010b66:	6878      	ldr	r0, [r7, #4]
 8010b68:	f7ff fcfa 	bl	8010560 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    if (!compare(listOffset, "idx1", 4))
 8010b6c:	2304      	movs	r3, #4
 8010b6e:	4a19      	ldr	r2, [pc, #100]	; (8010bd4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2f0>)
 8010b70:	6a39      	ldr	r1, [r7, #32]
 8010b72:	6878      	ldr	r0, [r7, #4]
 8010b74:	f7ff fc56 	bl	8010424 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8010b78:	4603      	mov	r3, r0
 8010b7a:	2b00      	cmp	r3, #0
 8010b7c:	bf0c      	ite	eq
 8010b7e:	2301      	moveq	r3, #1
 8010b80:	2300      	movne	r3, #0
 8010b82:	b2db      	uxtb	r3, r3
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	d027      	beq.n	8010bd8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2f4>
    {
        indexOffset = listOffset;
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	6a3a      	ldr	r2, [r7, #32]
 8010b8c:	61da      	str	r2, [r3, #28]
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
        return;
    }

    //start on first frame
    frameNumber = 1; //next frame number is 1
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	2201      	movs	r2, #1
 8010b92:	615a      	str	r2, [r3, #20]
    firstFrameOffset = currentMovieOffset;
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	699a      	ldr	r2, [r3, #24]
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	621a      	str	r2, [r3, #32]
 8010b9c:	e021      	b.n	8010be2 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2fe>
 8010b9e:	bf00      	nop
 8010ba0:	0801c028 	.word	0x0801c028
 8010ba4:	0801c030 	.word	0x0801c030
 8010ba8:	0801c04c 	.word	0x0801c04c
 8010bac:	0801bf14 	.word	0x0801bf14
 8010bb0:	0801c07c 	.word	0x0801c07c
 8010bb4:	0801c084 	.word	0x0801c084
 8010bb8:	0801c09c 	.word	0x0801c09c
 8010bbc:	0801c0a4 	.word	0x0801c0a4
 8010bc0:	0801c0bc 	.word	0x0801c0bc
 8010bc4:	0801c0c8 	.word	0x0801c0c8
 8010bc8:	0801c0d0 	.word	0x0801c0d0
 8010bcc:	10624dd3 	.word	0x10624dd3
 8010bd0:	0801c0d8 	.word	0x0801c0d8
 8010bd4:	0801c0e0 	.word	0x0801c0e0
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	220b      	movs	r2, #11
 8010bdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return;
 8010be0:	bf00      	nop
}
 8010be2:	3728      	adds	r7, #40	; 0x28
 8010be4:	46bd      	mov	sp, r7
 8010be6:	bd80      	pop	{r7, pc}

08010be8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>:

void HardwareMJPEGDecoder::decodeMJPEGFrame(const uint8_t* const mjpgdata, const uint32_t length, uint8_t* outputBuffer, uint16_t bufferWidth, uint16_t bufferHeight, uint32_t bufferStride)
{
 8010be8:	b580      	push	{r7, lr}
 8010bea:	b084      	sub	sp, #16
 8010bec:	af00      	add	r7, sp, #0
 8010bee:	60f8      	str	r0, [r7, #12]
 8010bf0:	60b9      	str	r1, [r7, #8]
 8010bf2:	607a      	str	r2, [r7, #4]
 8010bf4:	603b      	str	r3, [r7, #0]
    if (length == 0)
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	2b00      	cmp	r3, #0
 8010bfa:	d051      	beq.n	8010ca0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xb8>
    {
        return;
    }

    if (outputBuffer) //only decode if buffers are assigned.
 8010bfc:	683b      	ldr	r3, [r7, #0]
 8010bfe:	2b00      	cmp	r3, #0
 8010c00:	d04f      	beq.n	8010ca2 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xba>
    {
      // Update JPEG conversion parameters
      JPEG_ConvertorParams.bytes_pr_pixel = 2;
 8010c02:	4b29      	ldr	r3, [pc, #164]	; (8010ca8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xc0>)
 8010c04:	2202      	movs	r2, #2
 8010c06:	611a      	str	r2, [r3, #16]
      JPEG_ConvertorParams.WidthExtend = videoInfo.frame_width;
 8010c08:	68fb      	ldr	r3, [r7, #12]
 8010c0a:	68db      	ldr	r3, [r3, #12]
 8010c0c:	4a26      	ldr	r2, [pc, #152]	; (8010ca8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xc0>)
 8010c0e:	6013      	str	r3, [r2, #0]
      if((JPEG_ConvertorParams.WidthExtend % 16) != 0)
 8010c10:	4b25      	ldr	r3, [pc, #148]	; (8010ca8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xc0>)
 8010c12:	681b      	ldr	r3, [r3, #0]
 8010c14:	f003 030f 	and.w	r3, r3, #15
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	d006      	beq.n	8010c2a <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x42>
      {
          JPEG_ConvertorParams.WidthExtend += 16 - (JPEG_ConvertorParams.WidthExtend % 16);
 8010c1c:	4b22      	ldr	r3, [pc, #136]	; (8010ca8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xc0>)
 8010c1e:	681b      	ldr	r3, [r3, #0]
 8010c20:	f023 030f 	bic.w	r3, r3, #15
 8010c24:	3310      	adds	r3, #16
 8010c26:	4a20      	ldr	r2, [pc, #128]	; (8010ca8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xc0>)
 8010c28:	6013      	str	r3, [r2, #0]
      }
      JPEG_ConvertorParams.ScaledWidth = 800 * JPEG_ConvertorParams.bytes_pr_pixel;
 8010c2a:	4b1f      	ldr	r3, [pc, #124]	; (8010ca8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xc0>)
 8010c2c:	691b      	ldr	r3, [r3, #16]
 8010c2e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8010c32:	fb02 f303 	mul.w	r3, r2, r3
 8010c36:	4a1c      	ldr	r2, [pc, #112]	; (8010ca8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xc0>)
 8010c38:	6053      	str	r3, [r2, #4]
      JPEG_ConvertorParams.MCU_pr_line = JPEG_ConvertorParams.WidthExtend / MCU_WIDTH_PIXELS;
 8010c3a:	4b1b      	ldr	r3, [pc, #108]	; (8010ca8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xc0>)
 8010c3c:	681b      	ldr	r3, [r3, #0]
 8010c3e:	091b      	lsrs	r3, r3, #4
 8010c40:	4a19      	ldr	r2, [pc, #100]	; (8010ca8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xc0>)
 8010c42:	60d3      	str	r3, [r2, #12]
      JPEG_ConvertorParams.LastLineHeight = 16 - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
 8010c44:	68fb      	ldr	r3, [r7, #12]
 8010c46:	691b      	ldr	r3, [r3, #16]
 8010c48:	f003 030f 	and.w	r3, r3, #15
 8010c4c:	f1c3 0310 	rsb	r3, r3, #16
 8010c50:	4a15      	ldr	r2, [pc, #84]	; (8010ca8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xc0>)
 8010c52:	6093      	str	r3, [r2, #8]

      JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, outputBuffer);
 8010c54:	683b      	ldr	r3, [r7, #0]
 8010c56:	687a      	ldr	r2, [r7, #4]
 8010c58:	68b9      	ldr	r1, [r7, #8]
 8010c5a:	4814      	ldr	r0, [pc, #80]	; (8010cac <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xc4>)
 8010c5c:	f000 f8ec 	bl	8010e38 <JPEG_Decode_DMA>
      do
      {
        JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8010c60:	4812      	ldr	r0, [pc, #72]	; (8010cac <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xc4>)
 8010c62:	f000 fa9d 	bl	80111a0 <JPEG_OutputHandler>
 8010c66:	4603      	mov	r3, r0
 8010c68:	4a11      	ldr	r2, [pc, #68]	; (8010cb0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xc8>)
 8010c6a:	6013      	str	r3, [r2, #0]

        //If nothing to do, allow other tasks
        if (JpegProcessing_End == 2)
 8010c6c:	4b10      	ldr	r3, [pc, #64]	; (8010cb0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xc8>)
 8010c6e:	681b      	ldr	r3, [r3, #0]
 8010c70:	2b02      	cmp	r3, #2
 8010c72:	bf0c      	ite	eq
 8010c74:	2301      	moveq	r3, #1
 8010c76:	2300      	movne	r3, #0
 8010c78:	b2db      	uxtb	r3, r3
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	d006      	beq.n	8010c8c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xa4>
        {
          SEM_WAIT(semDecodingDone);
 8010c7e:	4b0d      	ldr	r3, [pc, #52]	; (8010cb4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xcc>)
 8010c80:	681b      	ldr	r3, [r3, #0]
 8010c82:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8010c86:	4618      	mov	r0, r3
 8010c88:	f7fa ff16 	bl	800bab8 <osSemaphoreAcquire>
        }
      }
      while(JpegProcessing_End != 1);
 8010c8c:	4b08      	ldr	r3, [pc, #32]	; (8010cb0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xc8>)
 8010c8e:	681b      	ldr	r3, [r3, #0]
 8010c90:	2b01      	cmp	r3, #1
 8010c92:	bf14      	ite	ne
 8010c94:	2301      	movne	r3, #1
 8010c96:	2300      	moveq	r3, #0
 8010c98:	b2db      	uxtb	r3, r3
 8010c9a:	2b00      	cmp	r3, #0
 8010c9c:	d001      	beq.n	8010ca2 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xba>
      do
 8010c9e:	e7df      	b.n	8010c60 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x78>
        return;
 8010ca0:	bf00      	nop
    }
}
 8010ca2:	3710      	adds	r7, #16
 8010ca4:	46bd      	mov	sp, r7
 8010ca6:	bd80      	pop	{r7, pc}
 8010ca8:	2001e1c8 	.word	0x2001e1c8
 8010cac:	200097a4 	.word	0x200097a4
 8010cb0:	2001e1b4 	.word	0x2001e1b4
 8010cb4:	2001e1c4 	.word	0x2001e1c4

08010cb8 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm>:

bool HardwareMJPEGDecoder::decodeFrame(const touchgfx::Rect& area, uint8_t* frameBuffer, uint32_t framebuffer_width)
{
 8010cb8:	b580      	push	{r7, lr}
 8010cba:	b086      	sub	sp, #24
 8010cbc:	af00      	add	r7, sp, #0
 8010cbe:	60f8      	str	r0, [r7, #12]
 8010cc0:	60b9      	str	r1, [r7, #8]
 8010cc2:	607a      	str	r2, [r7, #4]
 8010cc4:	603b      	str	r3, [r7, #0]
     // Assuming that chunk is available and streamNo and chunkType is correct.
    // Check by gotoNextFrame

    readData(currentMovieOffset, 8);
 8010cc6:	68fb      	ldr	r3, [r7, #12]
 8010cc8:	699b      	ldr	r3, [r3, #24]
 8010cca:	2208      	movs	r2, #8
 8010ccc:	4619      	mov	r1, r3
 8010cce:	68f8      	ldr	r0, [r7, #12]
 8010cd0:	f7ff fc46 	bl	8010560 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    const uint32_t length = getU32(currentMovieOffset + 4);
 8010cd4:	68fb      	ldr	r3, [r7, #12]
 8010cd6:	699b      	ldr	r3, [r3, #24]
 8010cd8:	3304      	adds	r3, #4
 8010cda:	4619      	mov	r1, r3
 8010cdc:	68f8      	ldr	r0, [r7, #12]
 8010cde:	f7ff fbc4 	bl	801046a <_ZN20HardwareMJPEGDecoder6getU32Em>
 8010ce2:	6178      	str	r0, [r7, #20]

    // Ensure whole frame is read
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 8010ce4:	68fb      	ldr	r3, [r7, #12]
 8010ce6:	699b      	ldr	r3, [r3, #24]
 8010ce8:	3308      	adds	r3, #8
 8010cea:	697a      	ldr	r2, [r7, #20]
 8010cec:	4619      	mov	r1, r3
 8010cee:	68f8      	ldr	r0, [r7, #12]
 8010cf0:	f7ff fc36 	bl	8010560 <_ZN20HardwareMJPEGDecoder8readDataEmm>
 8010cf4:	6138      	str	r0, [r7, #16]

    if (frameBuffer) //only decode if buffers are assigned.
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	d015      	beq.n	8010d28 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x70>
    {
      JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, frameBuffer);
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	697a      	ldr	r2, [r7, #20]
 8010d00:	6939      	ldr	r1, [r7, #16]
 8010d02:	480c      	ldr	r0, [pc, #48]	; (8010d34 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x7c>)
 8010d04:	f000 f898 	bl	8010e38 <JPEG_Decode_DMA>

      do
      {
        JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8010d08:	480a      	ldr	r0, [pc, #40]	; (8010d34 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x7c>)
 8010d0a:	f000 fa49 	bl	80111a0 <JPEG_OutputHandler>
 8010d0e:	4603      	mov	r3, r0
 8010d10:	4a09      	ldr	r2, [pc, #36]	; (8010d38 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x80>)
 8010d12:	6013      	str	r3, [r2, #0]
      }
      while(JpegProcessing_End == 0);
 8010d14:	4b08      	ldr	r3, [pc, #32]	; (8010d38 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x80>)
 8010d16:	681b      	ldr	r3, [r3, #0]
 8010d18:	2b00      	cmp	r3, #0
 8010d1a:	bf0c      	ite	eq
 8010d1c:	2301      	moveq	r3, #1
 8010d1e:	2300      	movne	r3, #0
 8010d20:	b2db      	uxtb	r3, r3
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	d000      	beq.n	8010d28 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x70>
      do
 8010d26:	e7ef      	b.n	8010d08 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x50>

    }
    return true;
 8010d28:	2301      	movs	r3, #1
}
 8010d2a:	4618      	mov	r0, r3
 8010d2c:	3718      	adds	r7, #24
 8010d2e:	46bd      	mov	sp, r7
 8010d30:	bd80      	pop	{r7, pc}
 8010d32:	bf00      	nop
 8010d34:	200097a4 	.word	0x200097a4
 8010d38:	2001e1b4 	.word	0x2001e1b4

08010d3c <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt>:

bool HardwareMJPEGDecoder::decodeThumbnail(uint32_t frameno, uint8_t* buffer, uint16_t width, uint16_t height)
{
 8010d3c:	b580      	push	{r7, lr}
 8010d3e:	b084      	sub	sp, #16
 8010d40:	af00      	add	r7, sp, #0
 8010d42:	60f8      	str	r0, [r7, #12]
 8010d44:	60b9      	str	r1, [r7, #8]
 8010d46:	607a      	str	r2, [r7, #4]
 8010d48:	807b      	strh	r3, [r7, #2]
    assert(0);
 8010d4a:	4b03      	ldr	r3, [pc, #12]	; (8010d58 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x1c>)
 8010d4c:	4a03      	ldr	r2, [pc, #12]	; (8010d5c <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x20>)
 8010d4e:	f240 11cb 	movw	r1, #459	; 0x1cb
 8010d52:	4803      	ldr	r0, [pc, #12]	; (8010d60 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x24>)
 8010d54:	f009 fbb4 	bl	801a4c0 <__assert_func>
 8010d58:	0801c0e8 	.word	0x0801c0e8
 8010d5c:	0801c0ec 	.word	0x0801c0ec
 8010d60:	0801bf14 	.word	0x0801bf14

08010d64 <_ZN20HardwareMJPEGDecoder9gotoFrameEm>:
    return false;
}

void HardwareMJPEGDecoder::gotoFrame(uint32_t frameNumber)
{
 8010d64:	b580      	push	{r7, lr}
 8010d66:	b084      	sub	sp, #16
 8010d68:	af00      	add	r7, sp, #0
 8010d6a:	6078      	str	r0, [r7, #4]
 8010d6c:	6039      	str	r1, [r7, #0]
    if (frameNumber==0)
 8010d6e:	683b      	ldr	r3, [r7, #0]
 8010d70:	2b00      	cmp	r3, #0
 8010d72:	d101      	bne.n	8010d78 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x14>
    {
        frameNumber = 1;
 8010d74:	2301      	movs	r3, #1
 8010d76:	603b      	str	r3, [r7, #0]
    }

    if (frameNumber > getNumberOfFrames())
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	681b      	ldr	r3, [r3, #0]
 8010d7c:	332c      	adds	r3, #44	; 0x2c
 8010d7e:	681b      	ldr	r3, [r3, #0]
 8010d80:	6878      	ldr	r0, [r7, #4]
 8010d82:	4798      	blx	r3
 8010d84:	4602      	mov	r2, r0
 8010d86:	683b      	ldr	r3, [r7, #0]
 8010d88:	4293      	cmp	r3, r2
 8010d8a:	bf8c      	ite	hi
 8010d8c:	2301      	movhi	r3, #1
 8010d8e:	2300      	movls	r3, #0
 8010d90:	b2db      	uxtb	r3, r3
 8010d92:	2b00      	cmp	r3, #0
 8010d94:	d006      	beq.n	8010da4 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x40>
    {
        frameNumber = getNumberOfFrames();
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	681b      	ldr	r3, [r3, #0]
 8010d9a:	332c      	adds	r3, #44	; 0x2c
 8010d9c:	681b      	ldr	r3, [r3, #0]
 8010d9e:	6878      	ldr	r0, [r7, #4]
 8010da0:	4798      	blx	r3
 8010da2:	6038      	str	r0, [r7, #0]
    }

    uint32_t offset = indexOffset + 8 + (frameNumber-1)*16;
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	69da      	ldr	r2, [r3, #28]
 8010da8:	683b      	ldr	r3, [r7, #0]
 8010daa:	3b01      	subs	r3, #1
 8010dac:	011b      	lsls	r3, r3, #4
 8010dae:	4413      	add	r3, r2
 8010db0:	3308      	adds	r3, #8
 8010db2:	60fb      	str	r3, [r7, #12]

    readData(offset, 16);
 8010db4:	2210      	movs	r2, #16
 8010db6:	68f9      	ldr	r1, [r7, #12]
 8010db8:	6878      	ldr	r0, [r7, #4]
 8010dba:	f7ff fbd1 	bl	8010560 <_ZN20HardwareMJPEGDecoder8readDataEmm>

    currentMovieOffset = getU32(offset + 8) + firstFrameOffset - 4;
 8010dbe:	68fb      	ldr	r3, [r7, #12]
 8010dc0:	3308      	adds	r3, #8
 8010dc2:	4619      	mov	r1, r3
 8010dc4:	6878      	ldr	r0, [r7, #4]
 8010dc6:	f7ff fb50 	bl	801046a <_ZN20HardwareMJPEGDecoder6getU32Em>
 8010dca:	4602      	mov	r2, r0
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	6a1b      	ldr	r3, [r3, #32]
 8010dd0:	4413      	add	r3, r2
 8010dd2:	1f1a      	subs	r2, r3, #4
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	619a      	str	r2, [r3, #24]
    this->frameNumber = frameNumber;
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	683a      	ldr	r2, [r7, #0]
 8010ddc:	615a      	str	r2, [r3, #20]
}
 8010dde:	bf00      	nop
 8010de0:	3710      	adds	r7, #16
 8010de2:	46bd      	mov	sp, r7
 8010de4:	bd80      	pop	{r7, pc}

08010de6 <_ZN20HardwareMJPEGDecoder17getNumberOfFramesEv>:

uint32_t HardwareMJPEGDecoder::getNumberOfFrames()
{
 8010de6:	b480      	push	{r7}
 8010de8:	b083      	sub	sp, #12
 8010dea:	af00      	add	r7, sp, #0
 8010dec:	6078      	str	r0, [r7, #4]
    return videoInfo.number_of_frames;
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	689b      	ldr	r3, [r3, #8]
}
 8010df2:	4618      	mov	r0, r3
 8010df4:	370c      	adds	r7, #12
 8010df6:	46bd      	mov	sp, r7
 8010df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dfc:	4770      	bx	lr

08010dfe <_ZN20HardwareMJPEGDecoder14setRepeatVideoEb>:

void HardwareMJPEGDecoder::setRepeatVideo(bool repeat)
{
 8010dfe:	b480      	push	{r7}
 8010e00:	b083      	sub	sp, #12
 8010e02:	af00      	add	r7, sp, #0
 8010e04:	6078      	str	r0, [r7, #4]
 8010e06:	460b      	mov	r3, r1
 8010e08:	70fb      	strb	r3, [r7, #3]

}
 8010e0a:	bf00      	nop
 8010e0c:	370c      	adds	r7, #12
 8010e0e:	46bd      	mov	sp, r7
 8010e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e14:	4770      	bx	lr

08010e16 <_ZN20HardwareMJPEGDecoder12getVideoInfoEPN8touchgfx16VideoInformationE>:

void HardwareMJPEGDecoder::getVideoInfo(touchgfx::VideoInformation* data)
{
 8010e16:	b490      	push	{r4, r7}
 8010e18:	b082      	sub	sp, #8
 8010e1a:	af00      	add	r7, sp, #0
 8010e1c:	6078      	str	r0, [r7, #4]
 8010e1e:	6039      	str	r1, [r7, #0]
    *data = videoInfo;
 8010e20:	683a      	ldr	r2, [r7, #0]
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	4614      	mov	r4, r2
 8010e26:	3304      	adds	r3, #4
 8010e28:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010e2a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8010e2e:	bf00      	nop
 8010e30:	3708      	adds	r7, #8
 8010e32:	46bd      	mov	sp, r7
 8010e34:	bc90      	pop	{r4, r7}
 8010e36:	4770      	bx	lr

08010e38 <JPEG_Decode_DMA>:
  * @param  JPEGImageSize_Bytes    : jpg image size in bytes.
  * @param  DestAddress : ARGB8888 destination Frame Buffer Address.
  * @retval None
  */
uint32_t JPEG_Decode_DMA(JPEG_HandleTypeDef *hjpeg, uint8_t* input, uint32_t chunkSizeIn /* length */, uint8_t* output)
{
 8010e38:	b580      	push	{r7, lr}
 8010e3a:	b088      	sub	sp, #32
 8010e3c:	af02      	add	r7, sp, #8
 8010e3e:	60f8      	str	r0, [r7, #12]
 8010e40:	60b9      	str	r1, [r7, #8]
 8010e42:	607a      	str	r2, [r7, #4]
 8010e44:	603b      	str	r3, [r7, #0]
    FrameBufferAddress = output;
 8010e46:	4a28      	ldr	r2, [pc, #160]	; (8010ee8 <JPEG_Decode_DMA+0xb0>)
 8010e48:	683b      	ldr	r3, [r7, #0]
 8010e4a:	6013      	str	r3, [r2, #0]
    Output_Is_Paused = 0;
 8010e4c:	4b27      	ldr	r3, [pc, #156]	; (8010eec <JPEG_Decode_DMA+0xb4>)
 8010e4e:	2200      	movs	r2, #0
 8010e50:	601a      	str	r2, [r3, #0]
    JPEG_OUT_Read_BufferIndex = 0;
 8010e52:	4b27      	ldr	r3, [pc, #156]	; (8010ef0 <JPEG_Decode_DMA+0xb8>)
 8010e54:	2200      	movs	r2, #0
 8010e56:	601a      	str	r2, [r3, #0]
    JPEG_OUT_Write_BufferIndex = 0;
 8010e58:	4b26      	ldr	r3, [pc, #152]	; (8010ef4 <JPEG_Decode_DMA+0xbc>)
 8010e5a:	2200      	movs	r2, #0
 8010e5c:	601a      	str	r2, [r3, #0]
    JPEG_InputImageIndex = 0;
 8010e5e:	4b26      	ldr	r3, [pc, #152]	; (8010ef8 <JPEG_Decode_DMA+0xc0>)
 8010e60:	2200      	movs	r2, #0
 8010e62:	601a      	str	r2, [r3, #0]
    JPEG_InputImageAddress = (uint32_t)input;
 8010e64:	68bb      	ldr	r3, [r7, #8]
 8010e66:	4a25      	ldr	r2, [pc, #148]	; (8010efc <JPEG_Decode_DMA+0xc4>)
 8010e68:	6013      	str	r3, [r2, #0]
    JPEG_InputImageSize_Bytes = chunkSizeIn;
 8010e6a:	4a25      	ldr	r2, [pc, #148]	; (8010f00 <JPEG_Decode_DMA+0xc8>)
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	6013      	str	r3, [r2, #0]
    MCU_BlockIndex = 0;
 8010e70:	4b24      	ldr	r3, [pc, #144]	; (8010f04 <JPEG_Decode_DMA+0xcc>)
 8010e72:	2200      	movs	r2, #0
 8010e74:	601a      	str	r2, [r3, #0]

    //Init buffers
    for(uint32_t i = 0; i < NB_OUTPUT_DATA_BUFFERS; ++i)
 8010e76:	2300      	movs	r3, #0
 8010e78:	617b      	str	r3, [r7, #20]
 8010e7a:	697b      	ldr	r3, [r7, #20]
 8010e7c:	2b01      	cmp	r3, #1
 8010e7e:	d816      	bhi.n	8010eae <JPEG_Decode_DMA+0x76>
    {
      Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
 8010e80:	4921      	ldr	r1, [pc, #132]	; (8010f08 <JPEG_Decode_DMA+0xd0>)
 8010e82:	697a      	ldr	r2, [r7, #20]
 8010e84:	4613      	mov	r3, r2
 8010e86:	005b      	lsls	r3, r3, #1
 8010e88:	4413      	add	r3, r2
 8010e8a:	009b      	lsls	r3, r3, #2
 8010e8c:	440b      	add	r3, r1
 8010e8e:	2200      	movs	r2, #0
 8010e90:	701a      	strb	r2, [r3, #0]
      Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
 8010e92:	491d      	ldr	r1, [pc, #116]	; (8010f08 <JPEG_Decode_DMA+0xd0>)
 8010e94:	697a      	ldr	r2, [r7, #20]
 8010e96:	4613      	mov	r3, r2
 8010e98:	005b      	lsls	r3, r3, #1
 8010e9a:	4413      	add	r3, r2
 8010e9c:	009b      	lsls	r3, r3, #2
 8010e9e:	440b      	add	r3, r1
 8010ea0:	3308      	adds	r3, #8
 8010ea2:	2200      	movs	r2, #0
 8010ea4:	601a      	str	r2, [r3, #0]
    for(uint32_t i = 0; i < NB_OUTPUT_DATA_BUFFERS; ++i)
 8010ea6:	697b      	ldr	r3, [r7, #20]
 8010ea8:	3301      	adds	r3, #1
 8010eaa:	617b      	str	r3, [r7, #20]
 8010eac:	e7e5      	b.n	8010e7a <JPEG_Decode_DMA+0x42>
    }

    //Do not return from this function until done with decoding all chunks.
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 8010eae:	4b11      	ldr	r3, [pc, #68]	; (8010ef4 <JPEG_Decode_DMA+0xbc>)
 8010eb0:	681a      	ldr	r2, [r3, #0]
 8010eb2:	4915      	ldr	r1, [pc, #84]	; (8010f08 <JPEG_Decode_DMA+0xd0>)
 8010eb4:	4613      	mov	r3, r2
 8010eb6:	005b      	lsls	r3, r3, #1
 8010eb8:	4413      	add	r3, r2
 8010eba:	009b      	lsls	r3, r3, #2
 8010ebc:	440b      	add	r3, r1
 8010ebe:	3304      	adds	r3, #4
 8010ec0:	6819      	ldr	r1, [r3, #0]
 8010ec2:	4b12      	ldr	r3, [pc, #72]	; (8010f0c <JPEG_Decode_DMA+0xd4>)
 8010ec4:	68da      	ldr	r2, [r3, #12]
 8010ec6:	4613      	mov	r3, r2
 8010ec8:	005b      	lsls	r3, r3, #1
 8010eca:	4413      	add	r3, r2
 8010ecc:	01db      	lsls	r3, r3, #7
 8010ece:	9300      	str	r3, [sp, #0]
 8010ed0:	460b      	mov	r3, r1
 8010ed2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8010ed6:	68b9      	ldr	r1, [r7, #8]
 8010ed8:	68f8      	ldr	r0, [r7, #12]
 8010eda:	f7f4 f96c 	bl	80051b6 <HAL_JPEG_Decode_DMA>

    return 0;
 8010ede:	2300      	movs	r3, #0
}
 8010ee0:	4618      	mov	r0, r3
 8010ee2:	3718      	adds	r7, #24
 8010ee4:	46bd      	mov	sp, r7
 8010ee6:	bd80      	pop	{r7, pc}
 8010ee8:	2001e194 	.word	0x2001e194
 8010eec:	2001e1b0 	.word	0x2001e1b0
 8010ef0:	2001e1a8 	.word	0x2001e1a8
 8010ef4:	2001e1ac 	.word	0x2001e1ac
 8010ef8:	2001e198 	.word	0x2001e198
 8010efc:	2001e1a0 	.word	0x2001e1a0
 8010f00:	2001e19c 	.word	0x2001e19c
 8010f04:	2001e1c0 	.word	0x2001e1c0
 8010f08:	20000010 	.word	0x20000010
 8010f0c:	2001e1c8 	.word	0x2001e1c8

08010f10 <HAL_JPEG_InfoReadyCallback>:
  * @param hjpeg: JPEG handle pointer
  * @param pInfo: JPEG Info Struct pointer
  * @retval None
  */
void HAL_JPEG_InfoReadyCallback(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{
 8010f10:	b580      	push	{r7, lr}
 8010f12:	b084      	sub	sp, #16
 8010f14:	af00      	add	r7, sp, #0
 8010f16:	6078      	str	r0, [r7, #4]
 8010f18:	6039      	str	r1, [r7, #0]
  if(pInfo->ChromaSubsampling == JPEG_420_SUBSAMPLING)
 8010f1a:	683b      	ldr	r3, [r7, #0]
 8010f1c:	685b      	ldr	r3, [r3, #4]
 8010f1e:	2b01      	cmp	r3, #1
 8010f20:	d12f      	bne.n	8010f82 <HAL_JPEG_InfoReadyCallback+0x72>
  {
    if((pInfo->ImageWidth % 16) != 0)
 8010f22:	683b      	ldr	r3, [r7, #0]
 8010f24:	68db      	ldr	r3, [r3, #12]
 8010f26:	f003 030f 	and.w	r3, r3, #15
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	d007      	beq.n	8010f3e <HAL_JPEG_InfoReadyCallback+0x2e>
      pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
 8010f2e:	683b      	ldr	r3, [r7, #0]
 8010f30:	68db      	ldr	r3, [r3, #12]
 8010f32:	f023 030f 	bic.w	r3, r3, #15
 8010f36:	f103 0210 	add.w	r2, r3, #16
 8010f3a:	683b      	ldr	r3, [r7, #0]
 8010f3c:	60da      	str	r2, [r3, #12]

    if((pInfo->ImageHeight % 16) != 0)
 8010f3e:	683b      	ldr	r3, [r7, #0]
 8010f40:	689b      	ldr	r3, [r3, #8]
 8010f42:	f003 030f 	and.w	r3, r3, #15
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	d007      	beq.n	8010f5a <HAL_JPEG_InfoReadyCallback+0x4a>
      pInfo->ImageHeight += (16 - (pInfo->ImageHeight % 16));
 8010f4a:	683b      	ldr	r3, [r7, #0]
 8010f4c:	689b      	ldr	r3, [r3, #8]
 8010f4e:	f023 030f 	bic.w	r3, r3, #15
 8010f52:	f103 0210 	add.w	r2, r3, #16
 8010f56:	683b      	ldr	r3, [r7, #0]
 8010f58:	609a      	str	r2, [r3, #8]

    HAL_StatusTypeDef status = TGFX_JPEG_GetDecodeColorConvertFunc(pInfo, &pConvert_Function, &MCU_TotalNb);
 8010f5a:	4a36      	ldr	r2, [pc, #216]	; (8011034 <HAL_JPEG_InfoReadyCallback+0x124>)
 8010f5c:	4936      	ldr	r1, [pc, #216]	; (8011038 <HAL_JPEG_InfoReadyCallback+0x128>)
 8010f5e:	6838      	ldr	r0, [r7, #0]
 8010f60:	f002 fb90 	bl	8013684 <TGFX_JPEG_GetDecodeColorConvertFunc>
 8010f64:	4603      	mov	r3, r0
 8010f66:	73bb      	strb	r3, [r7, #14]
    if(status != HAL_OK)
 8010f68:	7bbb      	ldrb	r3, [r7, #14]
 8010f6a:	2b00      	cmp	r3, #0
 8010f6c:	d05d      	beq.n	801102a <HAL_JPEG_InfoReadyCallback+0x11a>
    {
      assert(status == HAL_OK);
 8010f6e:	7bbb      	ldrb	r3, [r7, #14]
 8010f70:	2b00      	cmp	r3, #0
 8010f72:	d05a      	beq.n	801102a <HAL_JPEG_InfoReadyCallback+0x11a>
 8010f74:	4b31      	ldr	r3, [pc, #196]	; (801103c <HAL_JPEG_InfoReadyCallback+0x12c>)
 8010f76:	4a32      	ldr	r2, [pc, #200]	; (8011040 <HAL_JPEG_InfoReadyCallback+0x130>)
 8010f78:	f240 2129 	movw	r1, #553	; 0x229
 8010f7c:	4831      	ldr	r0, [pc, #196]	; (8011044 <HAL_JPEG_InfoReadyCallback+0x134>)
 8010f7e:	f009 fa9f 	bl	801a4c0 <__assert_func>
    }
  }
  else
  {
    if(pInfo->ChromaSubsampling == JPEG_422_SUBSAMPLING)
 8010f82:	683b      	ldr	r3, [r7, #0]
 8010f84:	685b      	ldr	r3, [r3, #4]
 8010f86:	2b02      	cmp	r3, #2
 8010f88:	d11b      	bne.n	8010fc2 <HAL_JPEG_InfoReadyCallback+0xb2>
    {
      if((pInfo->ImageWidth % 16) != 0)
 8010f8a:	683b      	ldr	r3, [r7, #0]
 8010f8c:	68db      	ldr	r3, [r3, #12]
 8010f8e:	f003 030f 	and.w	r3, r3, #15
 8010f92:	2b00      	cmp	r3, #0
 8010f94:	d007      	beq.n	8010fa6 <HAL_JPEG_InfoReadyCallback+0x96>
        pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
 8010f96:	683b      	ldr	r3, [r7, #0]
 8010f98:	68db      	ldr	r3, [r3, #12]
 8010f9a:	f023 030f 	bic.w	r3, r3, #15
 8010f9e:	f103 0210 	add.w	r2, r3, #16
 8010fa2:	683b      	ldr	r3, [r7, #0]
 8010fa4:	60da      	str	r2, [r3, #12]

      if((pInfo->ImageHeight % 8) != 0)
 8010fa6:	683b      	ldr	r3, [r7, #0]
 8010fa8:	689b      	ldr	r3, [r3, #8]
 8010faa:	f003 0307 	and.w	r3, r3, #7
 8010fae:	2b00      	cmp	r3, #0
 8010fb0:	d007      	beq.n	8010fc2 <HAL_JPEG_InfoReadyCallback+0xb2>
        pInfo->ImageHeight += (8 - (pInfo->ImageHeight % 8));
 8010fb2:	683b      	ldr	r3, [r7, #0]
 8010fb4:	689b      	ldr	r3, [r3, #8]
 8010fb6:	f023 0307 	bic.w	r3, r3, #7
 8010fba:	f103 0208 	add.w	r2, r3, #8
 8010fbe:	683b      	ldr	r3, [r7, #0]
 8010fc0:	609a      	str	r2, [r3, #8]
    }

    if(pInfo->ChromaSubsampling == JPEG_444_SUBSAMPLING)
 8010fc2:	683b      	ldr	r3, [r7, #0]
 8010fc4:	685b      	ldr	r3, [r3, #4]
 8010fc6:	2b00      	cmp	r3, #0
 8010fc8:	d11b      	bne.n	8011002 <HAL_JPEG_InfoReadyCallback+0xf2>
    {
      if((pInfo->ImageWidth % 8) != 0)
 8010fca:	683b      	ldr	r3, [r7, #0]
 8010fcc:	68db      	ldr	r3, [r3, #12]
 8010fce:	f003 0307 	and.w	r3, r3, #7
 8010fd2:	2b00      	cmp	r3, #0
 8010fd4:	d007      	beq.n	8010fe6 <HAL_JPEG_InfoReadyCallback+0xd6>
        pInfo->ImageWidth += (8 - (pInfo->ImageWidth % 8));
 8010fd6:	683b      	ldr	r3, [r7, #0]
 8010fd8:	68db      	ldr	r3, [r3, #12]
 8010fda:	f023 0307 	bic.w	r3, r3, #7
 8010fde:	f103 0208 	add.w	r2, r3, #8
 8010fe2:	683b      	ldr	r3, [r7, #0]
 8010fe4:	60da      	str	r2, [r3, #12]

      if((pInfo->ImageHeight % 8) != 0)
 8010fe6:	683b      	ldr	r3, [r7, #0]
 8010fe8:	689b      	ldr	r3, [r3, #8]
 8010fea:	f003 0307 	and.w	r3, r3, #7
 8010fee:	2b00      	cmp	r3, #0
 8010ff0:	d007      	beq.n	8011002 <HAL_JPEG_InfoReadyCallback+0xf2>
        pInfo->ImageHeight += (8 - (pInfo->ImageHeight % 8));
 8010ff2:	683b      	ldr	r3, [r7, #0]
 8010ff4:	689b      	ldr	r3, [r3, #8]
 8010ff6:	f023 0307 	bic.w	r3, r3, #7
 8010ffa:	f103 0208 	add.w	r2, r3, #8
 8010ffe:	683b      	ldr	r3, [r7, #0]
 8011000:	609a      	str	r2, [r3, #8]
    }

    HAL_StatusTypeDef status = JPEG_GetDecodeColorConvertFunc(pInfo, &pConvert_Function, &MCU_TotalNb);
 8011002:	4a0c      	ldr	r2, [pc, #48]	; (8011034 <HAL_JPEG_InfoReadyCallback+0x124>)
 8011004:	490c      	ldr	r1, [pc, #48]	; (8011038 <HAL_JPEG_InfoReadyCallback+0x128>)
 8011006:	6838      	ldr	r0, [r7, #0]
 8011008:	f004 f8dc 	bl	80151c4 <JPEG_GetDecodeColorConvertFunc>
 801100c:	4603      	mov	r3, r0
 801100e:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK)
 8011010:	7bfb      	ldrb	r3, [r7, #15]
 8011012:	2b00      	cmp	r3, #0
 8011014:	d009      	beq.n	801102a <HAL_JPEG_InfoReadyCallback+0x11a>
    {
      assert(status == HAL_OK);
 8011016:	7bfb      	ldrb	r3, [r7, #15]
 8011018:	2b00      	cmp	r3, #0
 801101a:	d006      	beq.n	801102a <HAL_JPEG_InfoReadyCallback+0x11a>
 801101c:	4b07      	ldr	r3, [pc, #28]	; (801103c <HAL_JPEG_InfoReadyCallback+0x12c>)
 801101e:	4a08      	ldr	r2, [pc, #32]	; (8011040 <HAL_JPEG_InfoReadyCallback+0x130>)
 8011020:	f240 2143 	movw	r1, #579	; 0x243
 8011024:	4807      	ldr	r0, [pc, #28]	; (8011044 <HAL_JPEG_InfoReadyCallback+0x134>)
 8011026:	f009 fa4b 	bl	801a4c0 <__assert_func>
    }
  }
}
 801102a:	bf00      	nop
 801102c:	3710      	adds	r7, #16
 801102e:	46bd      	mov	sp, r7
 8011030:	bd80      	pop	{r7, pc}
 8011032:	bf00      	nop
 8011034:	2001e1b8 	.word	0x2001e1b8
 8011038:	2001e1bc 	.word	0x2001e1bc
 801103c:	0801c148 	.word	0x0801c148
 8011040:	0801c15c 	.word	0x0801c15c
 8011044:	0801bf14 	.word	0x0801bf14

08011048 <HAL_JPEG_GetDataCallback>:
  * @param hjpeg: JPEG handle pointer
  * @param NbDecodedData: Number of decoded (consummed) bytes from input buffer
  * @retval None
  */
void HAL_JPEG_GetDataCallback(JPEG_HandleTypeDef *hjpeg, uint32_t NbDecodedData)
{
 8011048:	b580      	push	{r7, lr}
 801104a:	b084      	sub	sp, #16
 801104c:	af00      	add	r7, sp, #0
 801104e:	6078      	str	r0, [r7, #4]
 8011050:	6039      	str	r1, [r7, #0]
  //Input buffer has been consumed by the peripheral and to ask for a new data chunk if the operation (encoding/decoding) has not been complete yet.
  JPEG_InputImageIndex += NbDecodedData;
 8011052:	4b14      	ldr	r3, [pc, #80]	; (80110a4 <HAL_JPEG_GetDataCallback+0x5c>)
 8011054:	681a      	ldr	r2, [r3, #0]
 8011056:	683b      	ldr	r3, [r7, #0]
 8011058:	4413      	add	r3, r2
 801105a:	4a12      	ldr	r2, [pc, #72]	; (80110a4 <HAL_JPEG_GetDataCallback+0x5c>)
 801105c:	6013      	str	r3, [r2, #0]
  if(JPEG_InputImageIndex < JPEG_InputImageSize_Bytes)
 801105e:	4b11      	ldr	r3, [pc, #68]	; (80110a4 <HAL_JPEG_GetDataCallback+0x5c>)
 8011060:	681a      	ldr	r2, [r3, #0]
 8011062:	4b11      	ldr	r3, [pc, #68]	; (80110a8 <HAL_JPEG_GetDataCallback+0x60>)
 8011064:	681b      	ldr	r3, [r3, #0]
 8011066:	429a      	cmp	r2, r3
 8011068:	d218      	bcs.n	801109c <HAL_JPEG_GetDataCallback+0x54>
  {
    JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 801106a:	4b10      	ldr	r3, [pc, #64]	; (80110ac <HAL_JPEG_GetDataCallback+0x64>)
 801106c:	681a      	ldr	r2, [r3, #0]
 801106e:	683b      	ldr	r3, [r7, #0]
 8011070:	4413      	add	r3, r2
 8011072:	4a0e      	ldr	r2, [pc, #56]	; (80110ac <HAL_JPEG_GetDataCallback+0x64>)
 8011074:	6013      	str	r3, [r2, #0]
    uint32_t inDataLength = JPEG_InputImageSize_Bytes - JPEG_InputImageIndex;
 8011076:	4b0c      	ldr	r3, [pc, #48]	; (80110a8 <HAL_JPEG_GetDataCallback+0x60>)
 8011078:	681a      	ldr	r2, [r3, #0]
 801107a:	4b0a      	ldr	r3, [pc, #40]	; (80110a4 <HAL_JPEG_GetDataCallback+0x5c>)
 801107c:	681b      	ldr	r3, [r3, #0]
 801107e:	1ad3      	subs	r3, r2, r3
 8011080:	60fb      	str	r3, [r7, #12]
    HAL_JPEG_ConfigInputBuffer(hjpeg,(uint8_t *)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
 8011082:	4b0a      	ldr	r3, [pc, #40]	; (80110ac <HAL_JPEG_GetDataCallback+0x64>)
 8011084:	681b      	ldr	r3, [r3, #0]
 8011086:	4619      	mov	r1, r3
 8011088:	68fb      	ldr	r3, [r7, #12]
 801108a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801108e:	bf28      	it	cs
 8011090:	f44f 3380 	movcs.w	r3, #65536	; 0x10000
 8011094:	461a      	mov	r2, r3
 8011096:	6878      	ldr	r0, [r7, #4]
 8011098:	f7f4 fa18 	bl	80054cc <HAL_JPEG_ConfigInputBuffer>
  }
}
 801109c:	bf00      	nop
 801109e:	3710      	adds	r7, #16
 80110a0:	46bd      	mov	sp, r7
 80110a2:	bd80      	pop	{r7, pc}
 80110a4:	2001e198 	.word	0x2001e198
 80110a8:	2001e19c 	.word	0x2001e19c
 80110ac:	2001e1a0 	.word	0x2001e1a0

080110b0 <HAL_JPEG_DataReadyCallback>:
  * @param pDataOut: pointer to the output data buffer
  * @param OutDataLength: length of output buffer in bytes
  * @retval None
  */
void HAL_JPEG_DataReadyCallback (JPEG_HandleTypeDef *hjpeg, uint8_t *pDataOut, uint32_t OutDataLength)
{
 80110b0:	b580      	push	{r7, lr}
 80110b2:	b084      	sub	sp, #16
 80110b4:	af00      	add	r7, sp, #0
 80110b6:	60f8      	str	r0, [r7, #12]
 80110b8:	60b9      	str	r1, [r7, #8]
 80110ba:	607a      	str	r2, [r7, #4]
    Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
 80110bc:	4b27      	ldr	r3, [pc, #156]	; (801115c <HAL_JPEG_DataReadyCallback+0xac>)
 80110be:	681a      	ldr	r2, [r3, #0]
 80110c0:	4927      	ldr	r1, [pc, #156]	; (8011160 <HAL_JPEG_DataReadyCallback+0xb0>)
 80110c2:	4613      	mov	r3, r2
 80110c4:	005b      	lsls	r3, r3, #1
 80110c6:	4413      	add	r3, r2
 80110c8:	009b      	lsls	r3, r3, #2
 80110ca:	440b      	add	r3, r1
 80110cc:	2201      	movs	r2, #1
 80110ce:	701a      	strb	r2, [r3, #0]
    Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBufferSize = OutDataLength;
 80110d0:	4b22      	ldr	r3, [pc, #136]	; (801115c <HAL_JPEG_DataReadyCallback+0xac>)
 80110d2:	681a      	ldr	r2, [r3, #0]
 80110d4:	4922      	ldr	r1, [pc, #136]	; (8011160 <HAL_JPEG_DataReadyCallback+0xb0>)
 80110d6:	4613      	mov	r3, r2
 80110d8:	005b      	lsls	r3, r3, #1
 80110da:	4413      	add	r3, r2
 80110dc:	009b      	lsls	r3, r3, #2
 80110de:	440b      	add	r3, r1
 80110e0:	3308      	adds	r3, #8
 80110e2:	687a      	ldr	r2, [r7, #4]
 80110e4:	601a      	str	r2, [r3, #0]

    JPEG_OUT_Write_BufferIndex++;
 80110e6:	4b1d      	ldr	r3, [pc, #116]	; (801115c <HAL_JPEG_DataReadyCallback+0xac>)
 80110e8:	681b      	ldr	r3, [r3, #0]
 80110ea:	3301      	adds	r3, #1
 80110ec:	4a1b      	ldr	r2, [pc, #108]	; (801115c <HAL_JPEG_DataReadyCallback+0xac>)
 80110ee:	6013      	str	r3, [r2, #0]
    if(JPEG_OUT_Write_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
 80110f0:	4b1a      	ldr	r3, [pc, #104]	; (801115c <HAL_JPEG_DataReadyCallback+0xac>)
 80110f2:	681b      	ldr	r3, [r3, #0]
 80110f4:	2b01      	cmp	r3, #1
 80110f6:	d902      	bls.n	80110fe <HAL_JPEG_DataReadyCallback+0x4e>
    {
      JPEG_OUT_Write_BufferIndex = 0;
 80110f8:	4b18      	ldr	r3, [pc, #96]	; (801115c <HAL_JPEG_DataReadyCallback+0xac>)
 80110fa:	2200      	movs	r2, #0
 80110fc:	601a      	str	r2, [r3, #0]
    }

    //if the other buffer is full, then ui thread might be converting it
    if(Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State != JPEG_BUFFER_EMPTY)
 80110fe:	4b17      	ldr	r3, [pc, #92]	; (801115c <HAL_JPEG_DataReadyCallback+0xac>)
 8011100:	681a      	ldr	r2, [r3, #0]
 8011102:	4917      	ldr	r1, [pc, #92]	; (8011160 <HAL_JPEG_DataReadyCallback+0xb0>)
 8011104:	4613      	mov	r3, r2
 8011106:	005b      	lsls	r3, r3, #1
 8011108:	4413      	add	r3, r2
 801110a:	009b      	lsls	r3, r3, #2
 801110c:	440b      	add	r3, r1
 801110e:	781b      	ldrb	r3, [r3, #0]
 8011110:	2b00      	cmp	r3, #0
 8011112:	d006      	beq.n	8011122 <HAL_JPEG_DataReadyCallback+0x72>
    {
      HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 8011114:	2102      	movs	r1, #2
 8011116:	68f8      	ldr	r0, [r7, #12]
 8011118:	f7f4 f8b0 	bl	800527c <HAL_JPEG_Pause>
      Output_Is_Paused = 1;
 801111c:	4b11      	ldr	r3, [pc, #68]	; (8011164 <HAL_JPEG_DataReadyCallback+0xb4>)
 801111e:	2201      	movs	r2, #1
 8011120:	601a      	str	r2, [r3, #0]
    }
    HAL_JPEG_ConfigOutputBuffer(hjpeg, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 8011122:	4b0e      	ldr	r3, [pc, #56]	; (801115c <HAL_JPEG_DataReadyCallback+0xac>)
 8011124:	681a      	ldr	r2, [r3, #0]
 8011126:	490e      	ldr	r1, [pc, #56]	; (8011160 <HAL_JPEG_DataReadyCallback+0xb0>)
 8011128:	4613      	mov	r3, r2
 801112a:	005b      	lsls	r3, r3, #1
 801112c:	4413      	add	r3, r2
 801112e:	009b      	lsls	r3, r3, #2
 8011130:	440b      	add	r3, r1
 8011132:	3304      	adds	r3, #4
 8011134:	6819      	ldr	r1, [r3, #0]
 8011136:	4b0c      	ldr	r3, [pc, #48]	; (8011168 <HAL_JPEG_DataReadyCallback+0xb8>)
 8011138:	68da      	ldr	r2, [r3, #12]
 801113a:	4613      	mov	r3, r2
 801113c:	005b      	lsls	r3, r3, #1
 801113e:	4413      	add	r3, r2
 8011140:	01db      	lsls	r3, r3, #7
 8011142:	461a      	mov	r2, r3
 8011144:	68f8      	ldr	r0, [r7, #12]
 8011146:	f7f4 f9d3 	bl	80054f0 <HAL_JPEG_ConfigOutputBuffer>

    // Signal Hardware Decoding to wake up
    SEM_POST(semDecodingDone);
 801114a:	4b08      	ldr	r3, [pc, #32]	; (801116c <HAL_JPEG_DataReadyCallback+0xbc>)
 801114c:	681b      	ldr	r3, [r3, #0]
 801114e:	4618      	mov	r0, r3
 8011150:	f7fa fd18 	bl	800bb84 <osSemaphoreRelease>
}
 8011154:	bf00      	nop
 8011156:	3710      	adds	r7, #16
 8011158:	46bd      	mov	sp, r7
 801115a:	bd80      	pop	{r7, pc}
 801115c:	2001e1ac 	.word	0x2001e1ac
 8011160:	20000010 	.word	0x20000010
 8011164:	2001e1b0 	.word	0x2001e1b0
 8011168:	2001e1c8 	.word	0x2001e1c8
 801116c:	2001e1c4 	.word	0x2001e1c4

08011170 <HAL_JPEG_ErrorCallback>:
  * @brief  JPEG Error callback
  * @param hjpeg: JPEG handle pointer
  * @retval None
  */
void HAL_JPEG_ErrorCallback(JPEG_HandleTypeDef *hjpeg)
{
 8011170:	b480      	push	{r7}
 8011172:	b083      	sub	sp, #12
 8011174:	af00      	add	r7, sp, #0
 8011176:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8011178:	b672      	cpsid	i
}
 801117a:	bf00      	nop
  __disable_irq();
  while (1)
 801117c:	e7fe      	b.n	801117c <HAL_JPEG_ErrorCallback+0xc>
	...

08011180 <HAL_JPEG_DecodeCpltCallback>:
  * @brief  JPEG Decode complete callback
  * @param hjpeg: JPEG handle pointer
  * @retval None
  */
void HAL_JPEG_DecodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
{
 8011180:	b480      	push	{r7}
 8011182:	b083      	sub	sp, #12
 8011184:	af00      	add	r7, sp, #0
 8011186:	6078      	str	r0, [r7, #4]
  Jpeg_HWDecodingEnd = 1;
 8011188:	4b04      	ldr	r3, [pc, #16]	; (801119c <HAL_JPEG_DecodeCpltCallback+0x1c>)
 801118a:	2201      	movs	r2, #1
 801118c:	601a      	str	r2, [r3, #0]
}
 801118e:	bf00      	nop
 8011190:	370c      	adds	r7, #12
 8011192:	46bd      	mov	sp, r7
 8011194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011198:	4770      	bx	lr
 801119a:	bf00      	nop
 801119c:	2001e1a4 	.word	0x2001e1a4

080111a0 <JPEG_OutputHandler>:
  * @brief  JPEG Ouput Data BackGround Postprocessing .
  * @param hjpeg: JPEG handle pointer
  * @retval 1 : if JPEG processing has finished, 0 : if JPEG processing still ongoing
  */
uint32_t JPEG_OutputHandler(JPEG_HandleTypeDef *hjpeg)
{
 80111a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80111a2:	b087      	sub	sp, #28
 80111a4:	af02      	add	r7, sp, #8
 80111a6:	6078      	str	r0, [r7, #4]
  uint32_t ConvertedDataCount;

  if(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL)
 80111a8:	4b55      	ldr	r3, [pc, #340]	; (8011300 <JPEG_OutputHandler+0x160>)
 80111aa:	681a      	ldr	r2, [r3, #0]
 80111ac:	4955      	ldr	r1, [pc, #340]	; (8011304 <JPEG_OutputHandler+0x164>)
 80111ae:	4613      	mov	r3, r2
 80111b0:	005b      	lsls	r3, r3, #1
 80111b2:	4413      	add	r3, r2
 80111b4:	009b      	lsls	r3, r3, #2
 80111b6:	440b      	add	r3, r1
 80111b8:	781b      	ldrb	r3, [r3, #0]
 80111ba:	2b01      	cmp	r3, #1
 80111bc:	d160      	bne.n	8011280 <JPEG_OutputHandler+0xe0>
  {
    /* Invalidate DCache prior to YCbCr/RGB software conversion. */
    if (SCB->CCR & SCB_CCR_DC_Msk)
 80111be:	4b52      	ldr	r3, [pc, #328]	; (8011308 <JPEG_OutputHandler+0x168>)
 80111c0:	695b      	ldr	r3, [r3, #20]
 80111c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	bf14      	ite	ne
 80111ca:	2301      	movne	r3, #1
 80111cc:	2300      	moveq	r3, #0
 80111ce:	b2db      	uxtb	r3, r3
 80111d0:	2b00      	cmp	r3, #0
 80111d2:	d001      	beq.n	80111d8 <JPEG_OutputHandler+0x38>
    {
      SCB_CleanInvalidateDCache();
 80111d4:	f7ff f87e 	bl	80102d4 <SCB_CleanInvalidateDCache>
    }

    MCU_BlockIndex += pConvert_Function(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].DataBuffer, FrameBufferAddress, MCU_BlockIndex, Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].DataBufferSize, &ConvertedDataCount);
 80111d8:	4b4c      	ldr	r3, [pc, #304]	; (801130c <JPEG_OutputHandler+0x16c>)
 80111da:	681c      	ldr	r4, [r3, #0]
 80111dc:	4b48      	ldr	r3, [pc, #288]	; (8011300 <JPEG_OutputHandler+0x160>)
 80111de:	681a      	ldr	r2, [r3, #0]
 80111e0:	4948      	ldr	r1, [pc, #288]	; (8011304 <JPEG_OutputHandler+0x164>)
 80111e2:	4613      	mov	r3, r2
 80111e4:	005b      	lsls	r3, r3, #1
 80111e6:	4413      	add	r3, r2
 80111e8:	009b      	lsls	r3, r3, #2
 80111ea:	440b      	add	r3, r1
 80111ec:	3304      	adds	r3, #4
 80111ee:	6818      	ldr	r0, [r3, #0]
 80111f0:	4b47      	ldr	r3, [pc, #284]	; (8011310 <JPEG_OutputHandler+0x170>)
 80111f2:	6819      	ldr	r1, [r3, #0]
 80111f4:	4b47      	ldr	r3, [pc, #284]	; (8011314 <JPEG_OutputHandler+0x174>)
 80111f6:	681d      	ldr	r5, [r3, #0]
 80111f8:	4b41      	ldr	r3, [pc, #260]	; (8011300 <JPEG_OutputHandler+0x160>)
 80111fa:	681a      	ldr	r2, [r3, #0]
 80111fc:	4e41      	ldr	r6, [pc, #260]	; (8011304 <JPEG_OutputHandler+0x164>)
 80111fe:	4613      	mov	r3, r2
 8011200:	005b      	lsls	r3, r3, #1
 8011202:	4413      	add	r3, r2
 8011204:	009b      	lsls	r3, r3, #2
 8011206:	4433      	add	r3, r6
 8011208:	3308      	adds	r3, #8
 801120a:	681a      	ldr	r2, [r3, #0]
 801120c:	f107 030c 	add.w	r3, r7, #12
 8011210:	9300      	str	r3, [sp, #0]
 8011212:	4613      	mov	r3, r2
 8011214:	462a      	mov	r2, r5
 8011216:	47a0      	blx	r4
 8011218:	4602      	mov	r2, r0
 801121a:	4b3e      	ldr	r3, [pc, #248]	; (8011314 <JPEG_OutputHandler+0x174>)
 801121c:	681b      	ldr	r3, [r3, #0]
 801121e:	4413      	add	r3, r2
 8011220:	4a3c      	ldr	r2, [pc, #240]	; (8011314 <JPEG_OutputHandler+0x174>)
 8011222:	6013      	str	r3, [r2, #0]

    Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State = JPEG_BUFFER_EMPTY;
 8011224:	4b36      	ldr	r3, [pc, #216]	; (8011300 <JPEG_OutputHandler+0x160>)
 8011226:	681a      	ldr	r2, [r3, #0]
 8011228:	4936      	ldr	r1, [pc, #216]	; (8011304 <JPEG_OutputHandler+0x164>)
 801122a:	4613      	mov	r3, r2
 801122c:	005b      	lsls	r3, r3, #1
 801122e:	4413      	add	r3, r2
 8011230:	009b      	lsls	r3, r3, #2
 8011232:	440b      	add	r3, r1
 8011234:	2200      	movs	r2, #0
 8011236:	701a      	strb	r2, [r3, #0]
    Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].DataBufferSize = 0;
 8011238:	4b31      	ldr	r3, [pc, #196]	; (8011300 <JPEG_OutputHandler+0x160>)
 801123a:	681a      	ldr	r2, [r3, #0]
 801123c:	4931      	ldr	r1, [pc, #196]	; (8011304 <JPEG_OutputHandler+0x164>)
 801123e:	4613      	mov	r3, r2
 8011240:	005b      	lsls	r3, r3, #1
 8011242:	4413      	add	r3, r2
 8011244:	009b      	lsls	r3, r3, #2
 8011246:	440b      	add	r3, r1
 8011248:	3308      	adds	r3, #8
 801124a:	2200      	movs	r2, #0
 801124c:	601a      	str	r2, [r3, #0]

    JPEG_OUT_Read_BufferIndex++;
 801124e:	4b2c      	ldr	r3, [pc, #176]	; (8011300 <JPEG_OutputHandler+0x160>)
 8011250:	681b      	ldr	r3, [r3, #0]
 8011252:	3301      	adds	r3, #1
 8011254:	4a2a      	ldr	r2, [pc, #168]	; (8011300 <JPEG_OutputHandler+0x160>)
 8011256:	6013      	str	r3, [r2, #0]
    if(JPEG_OUT_Read_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
 8011258:	4b29      	ldr	r3, [pc, #164]	; (8011300 <JPEG_OutputHandler+0x160>)
 801125a:	681b      	ldr	r3, [r3, #0]
 801125c:	2b01      	cmp	r3, #1
 801125e:	d902      	bls.n	8011266 <JPEG_OutputHandler+0xc6>
    {
      JPEG_OUT_Read_BufferIndex = 0;
 8011260:	4b27      	ldr	r3, [pc, #156]	; (8011300 <JPEG_OutputHandler+0x160>)
 8011262:	2200      	movs	r2, #0
 8011264:	601a      	str	r2, [r3, #0]
    }

    if(MCU_BlockIndex == MCU_TotalNb)
 8011266:	4b2b      	ldr	r3, [pc, #172]	; (8011314 <JPEG_OutputHandler+0x174>)
 8011268:	681a      	ldr	r2, [r3, #0]
 801126a:	4b2b      	ldr	r3, [pc, #172]	; (8011318 <JPEG_OutputHandler+0x178>)
 801126c:	681b      	ldr	r3, [r3, #0]
 801126e:	429a      	cmp	r2, r3
 8011270:	bf0c      	ite	eq
 8011272:	2301      	moveq	r3, #1
 8011274:	2300      	movne	r3, #0
 8011276:	b2db      	uxtb	r3, r3
 8011278:	2b00      	cmp	r3, #0
 801127a:	d02a      	beq.n	80112d2 <JPEG_OutputHandler+0x132>
    {
      return 1;
 801127c:	2301      	movs	r3, #1
 801127e:	e03a      	b.n	80112f6 <JPEG_OutputHandler+0x156>
    }
  }
  else if((Output_Is_Paused == 1) && \
 8011280:	4b26      	ldr	r3, [pc, #152]	; (801131c <JPEG_OutputHandler+0x17c>)
 8011282:	681b      	ldr	r3, [r3, #0]
          (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) &&\
 8011284:	2b01      	cmp	r3, #1
 8011286:	d117      	bne.n	80112b8 <JPEG_OutputHandler+0x118>
 8011288:	4b25      	ldr	r3, [pc, #148]	; (8011320 <JPEG_OutputHandler+0x180>)
 801128a:	681a      	ldr	r2, [r3, #0]
 801128c:	491d      	ldr	r1, [pc, #116]	; (8011304 <JPEG_OutputHandler+0x164>)
 801128e:	4613      	mov	r3, r2
 8011290:	005b      	lsls	r3, r3, #1
 8011292:	4413      	add	r3, r2
 8011294:	009b      	lsls	r3, r3, #2
 8011296:	440b      	add	r3, r1
 8011298:	781b      	ldrb	r3, [r3, #0]
  else if((Output_Is_Paused == 1) && \
 801129a:	2b00      	cmp	r3, #0
 801129c:	d10c      	bne.n	80112b8 <JPEG_OutputHandler+0x118>
          (Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_EMPTY))
 801129e:	4b18      	ldr	r3, [pc, #96]	; (8011300 <JPEG_OutputHandler+0x160>)
 80112a0:	681a      	ldr	r2, [r3, #0]
 80112a2:	4918      	ldr	r1, [pc, #96]	; (8011304 <JPEG_OutputHandler+0x164>)
 80112a4:	4613      	mov	r3, r2
 80112a6:	005b      	lsls	r3, r3, #1
 80112a8:	4413      	add	r3, r2
 80112aa:	009b      	lsls	r3, r3, #2
 80112ac:	440b      	add	r3, r1
 80112ae:	781b      	ldrb	r3, [r3, #0]
          (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) &&\
 80112b0:	2b00      	cmp	r3, #0
 80112b2:	d101      	bne.n	80112b8 <JPEG_OutputHandler+0x118>
 80112b4:	2301      	movs	r3, #1
 80112b6:	e000      	b.n	80112ba <JPEG_OutputHandler+0x11a>
 80112b8:	2300      	movs	r3, #0
  else if((Output_Is_Paused == 1) && \
 80112ba:	2b00      	cmp	r3, #0
 80112bc:	d007      	beq.n	80112ce <JPEG_OutputHandler+0x12e>
  {
    Output_Is_Paused = 0;
 80112be:	4b17      	ldr	r3, [pc, #92]	; (801131c <JPEG_OutputHandler+0x17c>)
 80112c0:	2200      	movs	r2, #0
 80112c2:	601a      	str	r2, [r3, #0]
    HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 80112c4:	2102      	movs	r1, #2
 80112c6:	6878      	ldr	r0, [r7, #4]
 80112c8:	f7f4 f843 	bl	8005352 <HAL_JPEG_Resume>
 80112cc:	e001      	b.n	80112d2 <JPEG_OutputHandler+0x132>
  }
  else
  {
    return 2;
 80112ce:	2302      	movs	r3, #2
 80112d0:	e011      	b.n	80112f6 <JPEG_OutputHandler+0x156>
  }

  if((MCU_BlockIndex == MCU_TotalNb) && (Jpeg_HWDecodingEnd))// decode completed
 80112d2:	4b10      	ldr	r3, [pc, #64]	; (8011314 <JPEG_OutputHandler+0x174>)
 80112d4:	681a      	ldr	r2, [r3, #0]
 80112d6:	4b10      	ldr	r3, [pc, #64]	; (8011318 <JPEG_OutputHandler+0x178>)
 80112d8:	681b      	ldr	r3, [r3, #0]
 80112da:	429a      	cmp	r2, r3
 80112dc:	d105      	bne.n	80112ea <JPEG_OutputHandler+0x14a>
 80112de:	4b11      	ldr	r3, [pc, #68]	; (8011324 <JPEG_OutputHandler+0x184>)
 80112e0:	681b      	ldr	r3, [r3, #0]
 80112e2:	2b00      	cmp	r3, #0
 80112e4:	d001      	beq.n	80112ea <JPEG_OutputHandler+0x14a>
 80112e6:	2301      	movs	r3, #1
 80112e8:	e000      	b.n	80112ec <JPEG_OutputHandler+0x14c>
 80112ea:	2300      	movs	r3, #0
 80112ec:	2b00      	cmp	r3, #0
 80112ee:	d001      	beq.n	80112f4 <JPEG_OutputHandler+0x154>
  {
    return 1;
 80112f0:	2301      	movs	r3, #1
 80112f2:	e000      	b.n	80112f6 <JPEG_OutputHandler+0x156>
  }

  return 0;
 80112f4:	2300      	movs	r3, #0
}
 80112f6:	4618      	mov	r0, r3
 80112f8:	3714      	adds	r7, #20
 80112fa:	46bd      	mov	sp, r7
 80112fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80112fe:	bf00      	nop
 8011300:	2001e1a8 	.word	0x2001e1a8
 8011304:	20000010 	.word	0x20000010
 8011308:	e000ed00 	.word	0xe000ed00
 801130c:	2001e1bc 	.word	0x2001e1bc
 8011310:	2001e194 	.word	0x2001e194
 8011314:	2001e1c0 	.word	0x2001e1c0
 8011318:	2001e1b8 	.word	0x2001e1b8
 801131c:	2001e1b0 	.word	0x2001e1b0
 8011320:	2001e1ac 	.word	0x2001e1ac
 8011324:	2001e1a4 	.word	0x2001e1a4

08011328 <_ZN20HardwareMJPEGDecoderD1Ev>:
class HardwareMJPEGDecoder : public MJPEGDecoder
 8011328:	b580      	push	{r7, lr}
 801132a:	b082      	sub	sp, #8
 801132c:	af00      	add	r7, sp, #0
 801132e:	6078      	str	r0, [r7, #4]
 8011330:	4a05      	ldr	r2, [pc, #20]	; (8011348 <_ZN20HardwareMJPEGDecoderD1Ev+0x20>)
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	601a      	str	r2, [r3, #0]
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	4618      	mov	r0, r3
 801133a:	f7fe ff91 	bl	8010260 <_ZN12MJPEGDecoderD1Ev>
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	4618      	mov	r0, r3
 8011342:	3708      	adds	r7, #8
 8011344:	46bd      	mov	sp, r7
 8011346:	bd80      	pop	{r7, pc}
 8011348:	0801e10c 	.word	0x0801e10c

0801134c <_ZN20HardwareMJPEGDecoderD0Ev>:
 801134c:	b580      	push	{r7, lr}
 801134e:	b082      	sub	sp, #8
 8011350:	af00      	add	r7, sp, #0
 8011352:	6078      	str	r0, [r7, #4]
 8011354:	6878      	ldr	r0, [r7, #4]
 8011356:	f7ff ffe7 	bl	8011328 <_ZN20HardwareMJPEGDecoderD1Ev>
 801135a:	2144      	movs	r1, #68	; 0x44
 801135c:	6878      	ldr	r0, [r7, #4]
 801135e:	f009 f881 	bl	801a464 <_ZdlPvj>
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	4618      	mov	r0, r3
 8011366:	3708      	adds	r7, #8
 8011368:	46bd      	mov	sp, r7
 801136a:	bd80      	pop	{r7, pc}

0801136c <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 801136c:	b580      	push	{r7, lr}
 801136e:	af00      	add	r7, sp, #0
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8011370:	2200      	movs	r2, #0
 8011372:	2101      	movs	r1, #1
 8011374:	2001      	movs	r0, #1
 8011376:	f7fa fb03 	bl	800b980 <osSemaphoreNew>
 801137a:	4603      	mov	r3, r0
 801137c:	4a0f      	ldr	r2, [pc, #60]	; (80113bc <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 801137e:	6013      	str	r3, [r2, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8011380:	4b0e      	ldr	r3, [pc, #56]	; (80113bc <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8011382:	681b      	ldr	r3, [r3, #0]
 8011384:	2b00      	cmp	r3, #0
 8011386:	d105      	bne.n	8011394 <_ZN8touchgfx10OSWrappers10initializeEv+0x28>
 8011388:	4b0d      	ldr	r3, [pc, #52]	; (80113c0 <_ZN8touchgfx10OSWrappers10initializeEv+0x54>)
 801138a:	4a0e      	ldr	r2, [pc, #56]	; (80113c4 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 801138c:	2128      	movs	r1, #40	; 0x28
 801138e:	480e      	ldr	r0, [pc, #56]	; (80113c8 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8011390:	f009 f896 	bl	801a4c0 <__assert_func>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8011394:	2200      	movs	r2, #0
 8011396:	2104      	movs	r1, #4
 8011398:	2001      	movs	r0, #1
 801139a:	f7fa fc4b 	bl	800bc34 <osMessageQueueNew>
 801139e:	4603      	mov	r3, r0
 80113a0:	4a0a      	ldr	r2, [pc, #40]	; (80113cc <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 80113a2:	6013      	str	r3, [r2, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 80113a4:	4b09      	ldr	r3, [pc, #36]	; (80113cc <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 80113a6:	681b      	ldr	r3, [r3, #0]
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	d105      	bne.n	80113b8 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>
 80113ac:	4b08      	ldr	r3, [pc, #32]	; (80113d0 <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 80113ae:	4a05      	ldr	r2, [pc, #20]	; (80113c4 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 80113b0:	212c      	movs	r1, #44	; 0x2c
 80113b2:	4805      	ldr	r0, [pc, #20]	; (80113c8 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 80113b4:	f009 f884 	bl	801a4c0 <__assert_func>
}
 80113b8:	bf00      	nop
 80113ba:	bd80      	pop	{r7, pc}
 80113bc:	2001e1dc 	.word	0x2001e1dc
 80113c0:	0801c1a4 	.word	0x0801c1a4
 80113c4:	0801c1f0 	.word	0x0801c1f0
 80113c8:	0801c220 	.word	0x0801c220
 80113cc:	2001e1e0 	.word	0x2001e1e0
 80113d0:	0801c24c 	.word	0x0801c24c

080113d4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 80113d4:	b580      	push	{r7, lr}
 80113d6:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 80113d8:	4b04      	ldr	r3, [pc, #16]	; (80113ec <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 80113da:	681b      	ldr	r3, [r3, #0]
 80113dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80113e0:	4618      	mov	r0, r3
 80113e2:	f7fa fb69 	bl	800bab8 <osSemaphoreAcquire>
}
 80113e6:	bf00      	nop
 80113e8:	bd80      	pop	{r7, pc}
 80113ea:	bf00      	nop
 80113ec:	2001e1dc 	.word	0x2001e1dc

080113f0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 80113f0:	b580      	push	{r7, lr}
 80113f2:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 80113f4:	4b03      	ldr	r3, [pc, #12]	; (8011404 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 80113f6:	681b      	ldr	r3, [r3, #0]
 80113f8:	4618      	mov	r0, r3
 80113fa:	f7fa fbc3 	bl	800bb84 <osSemaphoreRelease>
}
 80113fe:	bf00      	nop
 8011400:	bd80      	pop	{r7, pc}
 8011402:	bf00      	nop
 8011404:	2001e1dc 	.word	0x2001e1dc

08011408 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 8011408:	b580      	push	{r7, lr}
 801140a:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, 0);
 801140c:	4b03      	ldr	r3, [pc, #12]	; (801141c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 801140e:	681b      	ldr	r3, [r3, #0]
 8011410:	2100      	movs	r1, #0
 8011412:	4618      	mov	r0, r3
 8011414:	f7fa fb50 	bl	800bab8 <osSemaphoreAcquire>
}
 8011418:	bf00      	nop
 801141a:	bd80      	pop	{r7, pc}
 801141c:	2001e1dc 	.word	0x2001e1dc

08011420 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 8011420:	b580      	push	{r7, lr}
 8011422:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8011424:	4b03      	ldr	r3, [pc, #12]	; (8011434 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 8011426:	681b      	ldr	r3, [r3, #0]
 8011428:	4618      	mov	r0, r3
 801142a:	f7fa fbab 	bl	800bb84 <osSemaphoreRelease>
}
 801142e:	bf00      	nop
 8011430:	bd80      	pop	{r7, pc}
 8011432:	bf00      	nop
 8011434:	2001e1dc 	.word	0x2001e1dc

08011438 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8011438:	b580      	push	{r7, lr}
 801143a:	b082      	sub	sp, #8
 801143c:	af00      	add	r7, sp, #0
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 801143e:	4b09      	ldr	r3, [pc, #36]	; (8011464 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8011440:	6818      	ldr	r0, [r3, #0]
 8011442:	1d39      	adds	r1, r7, #4
 8011444:	2300      	movs	r3, #0
 8011446:	2200      	movs	r2, #0
 8011448:	f7fa fc7a 	bl	800bd40 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 801144c:	4b05      	ldr	r3, [pc, #20]	; (8011464 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 801144e:	6818      	ldr	r0, [r3, #0]
 8011450:	1d39      	adds	r1, r7, #4
 8011452:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011456:	2200      	movs	r2, #0
 8011458:	f7fa fc72 	bl	800bd40 <osMessageQueueGet>
}
 801145c:	bf00      	nop
 801145e:	3708      	adds	r7, #8
 8011460:	46bd      	mov	sp, r7
 8011462:	bd80      	pop	{r7, pc}
 8011464:	2001e1e0 	.word	0x2001e1e0

08011468 <__NVIC_EnableIRQ>:
{
 8011468:	b480      	push	{r7}
 801146a:	b083      	sub	sp, #12
 801146c:	af00      	add	r7, sp, #0
 801146e:	4603      	mov	r3, r0
 8011470:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8011472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011476:	2b00      	cmp	r3, #0
 8011478:	db0b      	blt.n	8011492 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801147a:	79fb      	ldrb	r3, [r7, #7]
 801147c:	f003 021f 	and.w	r2, r3, #31
 8011480:	4907      	ldr	r1, [pc, #28]	; (80114a0 <__NVIC_EnableIRQ+0x38>)
 8011482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011486:	095b      	lsrs	r3, r3, #5
 8011488:	2001      	movs	r0, #1
 801148a:	fa00 f202 	lsl.w	r2, r0, r2
 801148e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8011492:	bf00      	nop
 8011494:	370c      	adds	r7, #12
 8011496:	46bd      	mov	sp, r7
 8011498:	f85d 7b04 	ldr.w	r7, [sp], #4
 801149c:	4770      	bx	lr
 801149e:	bf00      	nop
 80114a0:	e000e100 	.word	0xe000e100

080114a4 <__NVIC_DisableIRQ>:
{
 80114a4:	b480      	push	{r7}
 80114a6:	b083      	sub	sp, #12
 80114a8:	af00      	add	r7, sp, #0
 80114aa:	4603      	mov	r3, r0
 80114ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80114ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80114b2:	2b00      	cmp	r3, #0
 80114b4:	db12      	blt.n	80114dc <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80114b6:	79fb      	ldrb	r3, [r7, #7]
 80114b8:	f003 021f 	and.w	r2, r3, #31
 80114bc:	490a      	ldr	r1, [pc, #40]	; (80114e8 <__NVIC_DisableIRQ+0x44>)
 80114be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80114c2:	095b      	lsrs	r3, r3, #5
 80114c4:	2001      	movs	r0, #1
 80114c6:	fa00 f202 	lsl.w	r2, r0, r2
 80114ca:	3320      	adds	r3, #32
 80114cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80114d0:	f3bf 8f4f 	dsb	sy
}
 80114d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80114d6:	f3bf 8f6f 	isb	sy
}
 80114da:	bf00      	nop
}
 80114dc:	bf00      	nop
 80114de:	370c      	adds	r7, #12
 80114e0:	46bd      	mov	sp, r7
 80114e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114e6:	4770      	bx	lr
 80114e8:	e000e100 	.word	0xe000e100

080114ec <_ZN8touchgfx9colortypeC1Ev>:
    colortype()
 80114ec:	b480      	push	{r7}
 80114ee:	b083      	sub	sp, #12
 80114f0:	af00      	add	r7, sp, #0
 80114f2:	6078      	str	r0, [r7, #4]
        : color(0)
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	2200      	movs	r2, #0
 80114f8:	601a      	str	r2, [r3, #0]
    }
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	4618      	mov	r0, r3
 80114fe:	370c      	adds	r7, #12
 8011500:	46bd      	mov	sp, r7
 8011502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011506:	4770      	bx	lr

08011508 <_ZNK8touchgfx9colortypecvmEv>:
    operator uint32_t() const
 8011508:	b480      	push	{r7}
 801150a:	b083      	sub	sp, #12
 801150c:	af00      	add	r7, sp, #0
 801150e:	6078      	str	r0, [r7, #4]
        return color;
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	681b      	ldr	r3, [r3, #0]
    }
 8011514:	4618      	mov	r0, r3
 8011516:	370c      	adds	r7, #12
 8011518:	46bd      	mov	sp, r7
 801151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801151e:	4770      	bx	lr

08011520 <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 8011520:	b480      	push	{r7}
 8011522:	b083      	sub	sp, #12
 8011524:	af00      	add	r7, sp, #0
 8011526:	6078      	str	r0, [r7, #4]
    {
 8011528:	4a04      	ldr	r2, [pc, #16]	; (801153c <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	601a      	str	r2, [r3, #0]
    }
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	4618      	mov	r0, r3
 8011532:	370c      	adds	r7, #12
 8011534:	46bd      	mov	sp, r7
 8011536:	f85d 7b04 	ldr.w	r7, [sp], #4
 801153a:	4770      	bx	lr
 801153c:	0801e1e0 	.word	0x0801e1e0

08011540 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 8011540:	b580      	push	{r7, lr}
 8011542:	b082      	sub	sp, #8
 8011544:	af00      	add	r7, sp, #0
 8011546:	6078      	str	r0, [r7, #4]
    }
 8011548:	6878      	ldr	r0, [r7, #4]
 801154a:	f7ff ffe9 	bl	8011520 <_ZN8touchgfx9DMA_QueueD1Ev>
 801154e:	2104      	movs	r1, #4
 8011550:	6878      	ldr	r0, [r7, #4]
 8011552:	f008 ff87 	bl	801a464 <_ZdlPvj>
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	4618      	mov	r0, r3
 801155a:	3708      	adds	r7, #8
 801155c:	46bd      	mov	sp, r7
 801155e:	bd80      	pop	{r7, pc}

08011560 <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 8011560:	b580      	push	{r7, lr}
 8011562:	b082      	sub	sp, #8
 8011564:	af00      	add	r7, sp, #0
 8011566:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	681b      	ldr	r3, [r3, #0]
 801156c:	3344      	adds	r3, #68	; 0x44
 801156e:	681b      	ldr	r3, [r3, #0]
 8011570:	6878      	ldr	r0, [r7, #4]
 8011572:	4798      	blx	r3
    }
 8011574:	bf00      	nop
 8011576:	3708      	adds	r7, #8
 8011578:	46bd      	mov	sp, r7
 801157a:	bd80      	pop	{r7, pc}

0801157c <_ZN8touchgfx13DMA_InterfaceD1Ev>:
    {
        return DMA_TYPE_GENERIC;
    }

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 801157c:	b480      	push	{r7}
 801157e:	b083      	sub	sp, #12
 8011580:	af00      	add	r7, sp, #0
 8011582:	6078      	str	r0, [r7, #4]
    {
 8011584:	4a04      	ldr	r2, [pc, #16]	; (8011598 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	601a      	str	r2, [r3, #0]
    }
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	4618      	mov	r0, r3
 801158e:	370c      	adds	r7, #12
 8011590:	46bd      	mov	sp, r7
 8011592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011596:	4770      	bx	lr
 8011598:	0801ea84 	.word	0x0801ea84

0801159c <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 801159c:	b580      	push	{r7, lr}
 801159e:	b082      	sub	sp, #8
 80115a0:	af00      	add	r7, sp, #0
 80115a2:	6078      	str	r0, [r7, #4]
    }
 80115a4:	6878      	ldr	r0, [r7, #4]
 80115a6:	f7ff ffe9 	bl	801157c <_ZN8touchgfx13DMA_InterfaceD1Ev>
 80115aa:	210c      	movs	r1, #12
 80115ac:	6878      	ldr	r0, [r7, #4]
 80115ae:	f008 ff59 	bl	801a464 <_ZdlPvj>
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	4618      	mov	r0, r3
 80115b6:	3708      	adds	r7, #8
 80115b8:	46bd      	mov	sp, r7
 80115ba:	bd80      	pop	{r7, pc}

080115bc <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 80115bc:	b480      	push	{r7}
 80115be:	b083      	sub	sp, #12
 80115c0:	af00      	add	r7, sp, #0
 80115c2:	6078      	str	r0, [r7, #4]
 80115c4:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 80115c6:	4a09      	ldr	r2, [pc, #36]	; (80115ec <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	601a      	str	r2, [r3, #0]
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	683a      	ldr	r2, [r7, #0]
 80115d0:	605a      	str	r2, [r3, #4]
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	2200      	movs	r2, #0
 80115d6:	721a      	strb	r2, [r3, #8]
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	2200      	movs	r2, #0
 80115dc:	725a      	strb	r2, [r3, #9]
    {
    }
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	4618      	mov	r0, r3
 80115e2:	370c      	adds	r7, #12
 80115e4:	46bd      	mov	sp, r7
 80115e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115ea:	4770      	bx	lr
 80115ec:	0801ea84 	.word	0x0801ea84

080115f0 <_ZN8STM32DMA10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_CHROMART type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
 80115f0:	b480      	push	{r7}
 80115f2:	b083      	sub	sp, #12
 80115f4:	af00      	add	r7, sp, #0
 80115f6:	6078      	str	r0, [r7, #4]
    {
        return touchgfx::DMA_TYPE_CHROMART;
 80115f8:	2301      	movs	r3, #1
    }
 80115fa:	4618      	mov	r0, r3
 80115fc:	370c      	adds	r7, #12
 80115fe:	46bd      	mov	sp, r7
 8011600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011604:	4770      	bx	lr

08011606 <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 8011606:	b580      	push	{r7, lr}
 8011608:	b082      	sub	sp, #8
 801160a:	af00      	add	r7, sp, #0
 801160c:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 801160e:	687a      	ldr	r2, [r7, #4]
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	681b      	ldr	r3, [r3, #0]
 8011614:	3328      	adds	r3, #40	; 0x28
 8011616:	681b      	ldr	r3, [r3, #0]
 8011618:	4610      	mov	r0, r2
 801161a:	4798      	blx	r3
    }
 801161c:	bf00      	nop
 801161e:	3708      	adds	r7, #8
 8011620:	46bd      	mov	sp, r7
 8011622:	bd80      	pop	{r7, pc}

08011624 <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 8011624:	b580      	push	{r7, lr}
 8011626:	b082      	sub	sp, #8
 8011628:	af00      	add	r7, sp, #0
 801162a:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	685a      	ldr	r2, [r3, #4]
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	685b      	ldr	r3, [r3, #4]
 8011634:	681b      	ldr	r3, [r3, #0]
 8011636:	3314      	adds	r3, #20
 8011638:	681b      	ldr	r3, [r3, #0]
 801163a:	4610      	mov	r0, r2
 801163c:	4798      	blx	r3
    }
 801163e:	bf00      	nop
 8011640:	3708      	adds	r7, #8
 8011642:	46bd      	mov	sp, r7
 8011644:	bd80      	pop	{r7, pc}

08011646 <DMA2D_XferCpltCallback>:

extern "C" DMA2D_HandleTypeDef hdma2d;

extern "C" {
    static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
    {
 8011646:	b580      	push	{r7, lr}
 8011648:	b082      	sub	sp, #8
 801164a:	af00      	add	r7, sp, #0
 801164c:	6078      	str	r0, [r7, #4]
        (void)handle; // Unused argument
        HAL::getInstance()->signalDMAInterrupt();
 801164e:	f7fe f925 	bl	800f89c <_ZN8touchgfx3HAL11getInstanceEv>
 8011652:	4603      	mov	r3, r0
 8011654:	4618      	mov	r0, r3
 8011656:	f7ff ffe5 	bl	8011624 <_ZN8touchgfx3HAL18signalDMAInterruptEv>
    }
 801165a:	bf00      	nop
 801165c:	3708      	adds	r7, #8
 801165e:	46bd      	mov	sp, r7
 8011660:	bd80      	pop	{r7, pc}

08011662 <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 8011662:	b580      	push	{r7, lr}
 8011664:	b082      	sub	sp, #8
 8011666:	af00      	add	r7, sp, #0
 8011668:	6078      	str	r0, [r7, #4]
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	330c      	adds	r3, #12
 801166e:	4618      	mov	r0, r3
 8011670:	f7ff ff3c 	bl	80114ec <_ZN8touchgfx9colortypeC1Ev>
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	4618      	mov	r0, r3
 8011678:	3708      	adds	r7, #8
 801167a:	46bd      	mov	sp, r7
 801167c:	bd80      	pop	{r7, pc}
	...

08011680 <_ZN8STM32DMAC1Ev>:
}

STM32DMA::STM32DMA()
 8011680:	b5b0      	push	{r4, r5, r7, lr}
 8011682:	b082      	sub	sp, #8
 8011684:	af00      	add	r7, sp, #0
 8011686:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8011688:	687a      	ldr	r2, [r7, #4]
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	330c      	adds	r3, #12
 801168e:	4619      	mov	r1, r3
 8011690:	4610      	mov	r0, r2
 8011692:	f7ff ff93 	bl	80115bc <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 8011696:	4a0e      	ldr	r2, [pc, #56]	; (80116d0 <_ZN8STM32DMAC1Ev+0x50>)
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	601a      	str	r2, [r3, #0]
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	f103 000c 	add.w	r0, r3, #12
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	3320      	adds	r3, #32
 80116a6:	2260      	movs	r2, #96	; 0x60
 80116a8:	4619      	mov	r1, r3
 80116aa:	f004 fdc9 	bl	8016240 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	3320      	adds	r3, #32
 80116b2:	245f      	movs	r4, #95	; 0x5f
 80116b4:	461d      	mov	r5, r3
 80116b6:	2c00      	cmp	r4, #0
 80116b8:	db05      	blt.n	80116c6 <_ZN8STM32DMAC1Ev+0x46>
 80116ba:	4628      	mov	r0, r5
 80116bc:	f7ff ffd1 	bl	8011662 <_ZN8touchgfx6BlitOpC1Ev>
 80116c0:	3524      	adds	r5, #36	; 0x24
 80116c2:	3c01      	subs	r4, #1
 80116c4:	e7f7      	b.n	80116b6 <_ZN8STM32DMAC1Ev+0x36>
{
}
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	4618      	mov	r0, r3
 80116ca:	3708      	adds	r7, #8
 80116cc:	46bd      	mov	sp, r7
 80116ce:	bdb0      	pop	{r4, r5, r7, pc}
 80116d0:	0801e190 	.word	0x0801e190

080116d4 <_ZN8STM32DMAD1Ev>:

STM32DMA::~STM32DMA()
 80116d4:	b580      	push	{r7, lr}
 80116d6:	b082      	sub	sp, #8
 80116d8:	af00      	add	r7, sp, #0
 80116da:	6078      	str	r0, [r7, #4]
 80116dc:	4a09      	ldr	r2, [pc, #36]	; (8011704 <_ZN8STM32DMAD1Ev+0x30>)
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	601a      	str	r2, [r3, #0]
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
 80116e2:	205a      	movs	r0, #90	; 0x5a
 80116e4:	f7ff fede 	bl	80114a4 <__NVIC_DisableIRQ>
STM32DMA::~STM32DMA()
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	330c      	adds	r3, #12
 80116ec:	4618      	mov	r0, r3
 80116ee:	f000 fac7 	bl	8011c80 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	4618      	mov	r0, r3
 80116f6:	f7ff ff41 	bl	801157c <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 80116fa:	687b      	ldr	r3, [r7, #4]
 80116fc:	4618      	mov	r0, r3
 80116fe:	3708      	adds	r7, #8
 8011700:	46bd      	mov	sp, r7
 8011702:	bd80      	pop	{r7, pc}
 8011704:	0801e190 	.word	0x0801e190

08011708 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8011708:	b580      	push	{r7, lr}
 801170a:	b082      	sub	sp, #8
 801170c:	af00      	add	r7, sp, #0
 801170e:	6078      	str	r0, [r7, #4]
}
 8011710:	6878      	ldr	r0, [r7, #4]
 8011712:	f7ff ffdf 	bl	80116d4 <_ZN8STM32DMAD1Ev>
 8011716:	f44f 615a 	mov.w	r1, #3488	; 0xda0
 801171a:	6878      	ldr	r0, [r7, #4]
 801171c:	f008 fea2 	bl	801a464 <_ZdlPvj>
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	4618      	mov	r0, r3
 8011724:	3708      	adds	r7, #8
 8011726:	46bd      	mov	sp, r7
 8011728:	bd80      	pop	{r7, pc}
	...

0801172c <_ZN8STM32DMA10initializeEv>:

void STM32DMA::initialize()
{
 801172c:	b580      	push	{r7, lr}
 801172e:	b084      	sub	sp, #16
 8011730:	af00      	add	r7, sp, #0
 8011732:	6078      	str	r0, [r7, #4]
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8011734:	4b10      	ldr	r3, [pc, #64]	; (8011778 <_ZN8STM32DMA10initializeEv+0x4c>)
 8011736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011738:	4a0f      	ldr	r2, [pc, #60]	; (8011778 <_ZN8STM32DMA10initializeEv+0x4c>)
 801173a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 801173e:	6313      	str	r3, [r2, #48]	; 0x30
 8011740:	4b0d      	ldr	r3, [pc, #52]	; (8011778 <_ZN8STM32DMA10initializeEv+0x4c>)
 8011742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011744:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011748:	60fb      	str	r3, [r7, #12]
 801174a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DMA2D_FORCE_RESET();
 801174c:	4b0a      	ldr	r3, [pc, #40]	; (8011778 <_ZN8STM32DMA10initializeEv+0x4c>)
 801174e:	691b      	ldr	r3, [r3, #16]
 8011750:	4a09      	ldr	r2, [pc, #36]	; (8011778 <_ZN8STM32DMA10initializeEv+0x4c>)
 8011752:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8011756:	6113      	str	r3, [r2, #16]
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8011758:	4b07      	ldr	r3, [pc, #28]	; (8011778 <_ZN8STM32DMA10initializeEv+0x4c>)
 801175a:	691b      	ldr	r3, [r3, #16]
 801175c:	4a06      	ldr	r2, [pc, #24]	; (8011778 <_ZN8STM32DMA10initializeEv+0x4c>)
 801175e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8011762:	6113      	str	r3, [r2, #16]

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8011764:	4b05      	ldr	r3, [pc, #20]	; (801177c <_ZN8STM32DMA10initializeEv+0x50>)
 8011766:	4a06      	ldr	r2, [pc, #24]	; (8011780 <_ZN8STM32DMA10initializeEv+0x54>)
 8011768:	619a      	str	r2, [r3, #24]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
 801176a:	205a      	movs	r0, #90	; 0x5a
 801176c:	f7ff fe7c 	bl	8011468 <__NVIC_EnableIRQ>
}
 8011770:	bf00      	nop
 8011772:	3710      	adds	r7, #16
 8011774:	46bd      	mov	sp, r7
 8011776:	bd80      	pop	{r7, pc}
 8011778:	40023800 	.word	0x40023800
 801177c:	200096dc 	.word	0x200096dc
 8011780:	08011647 	.word	0x08011647

08011784 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
{
 8011784:	b580      	push	{r7, lr}
 8011786:	b084      	sub	sp, #16
 8011788:	af00      	add	r7, sp, #0
 801178a:	6078      	str	r0, [r7, #4]
 801178c:	460b      	mov	r3, r1
 801178e:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8011790:	2300      	movs	r3, #0
 8011792:	60fb      	str	r3, [r7, #12]

    switch (format)
 8011794:	78fb      	ldrb	r3, [r7, #3]
 8011796:	2b0b      	cmp	r3, #11
 8011798:	d826      	bhi.n	80117e8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x64>
 801179a:	a201      	add	r2, pc, #4	; (adr r2, 80117a0 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 801179c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80117a0:	080117dd 	.word	0x080117dd
 80117a4:	080117d7 	.word	0x080117d7
 80117a8:	080117d1 	.word	0x080117d1
 80117ac:	080117e9 	.word	0x080117e9
 80117b0:	080117e9 	.word	0x080117e9
 80117b4:	080117e9 	.word	0x080117e9
 80117b8:	080117e9 	.word	0x080117e9
 80117bc:	080117e3 	.word	0x080117e3
 80117c0:	080117e3 	.word	0x080117e3
 80117c4:	080117e3 	.word	0x080117e3
 80117c8:	080117e3 	.word	0x080117e3
 80117cc:	080117e3 	.word	0x080117e3
    {
    case Bitmap::ARGB8888: /* DMA2D input mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 80117d0:	2300      	movs	r3, #0
 80117d2:	60fb      	str	r3, [r7, #12]
        break;
 80117d4:	e00e      	b.n	80117f4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB888: /* DMA2D input mode set to 24bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB888;
 80117d6:	2301      	movs	r3, #1
 80117d8:	60fb      	str	r3, [r7, #12]
        break;
 80117da:	e00b      	b.n	80117f4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB565: /* DMA2D input mode set to 16bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB565;
 80117dc:	2302      	movs	r3, #2
 80117de:	60fb      	str	r3, [r7, #12]
        break;
 80117e0:	e008      	b.n	80117f4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* Fall through */
    case Bitmap::L8:       /* DMA2D input mode set to 8bit Color Look up table*/
        dma2dColorMode = DMA2D_INPUT_L8;
 80117e2:	2305      	movs	r3, #5
 80117e4:	60fb      	str	r3, [r7, #12]
        break;
 80117e6:	e005      	b.n	80117f4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported input format for DMA2D */
        assert(0 && "Unsupported Format!");
 80117e8:	4b05      	ldr	r3, [pc, #20]	; (8011800 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x7c>)
 80117ea:	4a06      	ldr	r2, [pc, #24]	; (8011804 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x80>)
 80117ec:	2166      	movs	r1, #102	; 0x66
 80117ee:	4806      	ldr	r0, [pc, #24]	; (8011808 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x84>)
 80117f0:	f008 fe66 	bl	801a4c0 <__assert_func>
        break;
    }

    return dma2dColorMode;
 80117f4:	68fb      	ldr	r3, [r7, #12]
}
 80117f6:	4618      	mov	r0, r3
 80117f8:	3710      	adds	r7, #16
 80117fa:	46bd      	mov	sp, r7
 80117fc:	bd80      	pop	{r7, pc}
 80117fe:	bf00      	nop
 8011800:	0801c290 	.word	0x0801c290
 8011804:	0801c2ac 	.word	0x0801c2ac
 8011808:	0801c2f8 	.word	0x0801c2f8

0801180c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
{
 801180c:	b580      	push	{r7, lr}
 801180e:	b084      	sub	sp, #16
 8011810:	af00      	add	r7, sp, #0
 8011812:	6078      	str	r0, [r7, #4]
 8011814:	460b      	mov	r3, r1
 8011816:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8011818:	2300      	movs	r3, #0
 801181a:	60fb      	str	r3, [r7, #12]

    switch (format)
 801181c:	78fb      	ldrb	r3, [r7, #3]
 801181e:	2b0a      	cmp	r3, #10
 8011820:	d821      	bhi.n	8011866 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x5a>
 8011822:	a201      	add	r2, pc, #4	; (adr r2, 8011828 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 8011824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011828:	08011861 	.word	0x08011861
 801182c:	0801185b 	.word	0x0801185b
 8011830:	08011855 	.word	0x08011855
 8011834:	08011867 	.word	0x08011867
 8011838:	08011867 	.word	0x08011867
 801183c:	08011867 	.word	0x08011867
 8011840:	08011867 	.word	0x08011867
 8011844:	0801185b 	.word	0x0801185b
 8011848:	0801185b 	.word	0x0801185b
 801184c:	0801185b 	.word	0x0801185b
 8011850:	0801185b 	.word	0x0801185b
    {
    case Bitmap::ARGB8888: /* DMA2D output mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8011854:	2300      	movs	r3, #0
 8011856:	60fb      	str	r3, [r7, #12]
        break;
 8011858:	e00b      	b.n	8011872 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB888:   /* Fall through */
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* DMA2D output mode set to 24bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 801185a:	2301      	movs	r3, #1
 801185c:	60fb      	str	r3, [r7, #12]
        break;
 801185e:	e008      	b.n	8011872 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB565: /* DMA2D output mode set to 16bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8011860:	2302      	movs	r3, #2
 8011862:	60fb      	str	r3, [r7, #12]
        break;
 8011864:	e005      	b.n	8011872 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported output format for DMA2D */
        assert(0 && "Unsupported Format!");
 8011866:	4b05      	ldr	r3, [pc, #20]	; (801187c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>)
 8011868:	4a05      	ldr	r2, [pc, #20]	; (8011880 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x74>)
 801186a:	2187      	movs	r1, #135	; 0x87
 801186c:	4805      	ldr	r0, [pc, #20]	; (8011884 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x78>)
 801186e:	f008 fe27 	bl	801a4c0 <__assert_func>
        break;
    }

    return dma2dColorMode;
 8011872:	68fb      	ldr	r3, [r7, #12]
}
 8011874:	4618      	mov	r0, r3
 8011876:	3710      	adds	r7, #16
 8011878:	46bd      	mov	sp, r7
 801187a:	bd80      	pop	{r7, pc}
 801187c:	0801c290 	.word	0x0801c290
 8011880:	0801c324 	.word	0x0801c324
 8011884:	0801c2f8 	.word	0x0801c2f8

08011888 <_ZN8STM32DMA11getBlitCapsEv>:

BlitOperations STM32DMA::getBlitCaps()
{
 8011888:	b480      	push	{r7}
 801188a:	b083      	sub	sp, #12
 801188c:	af00      	add	r7, sp, #0
 801188e:	6078      	str	r0, [r7, #4]
                                       | BLIT_OP_COPY_L8
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
 8011890:	f240 33ef 	movw	r3, #1007	; 0x3ef
}
 8011894:	4618      	mov	r0, r3
 8011896:	370c      	adds	r7, #12
 8011898:	46bd      	mov	sp, r7
 801189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801189e:	4770      	bx	lr

080118a0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 80118a0:	b590      	push	{r4, r7, lr}
 80118a2:	b089      	sub	sp, #36	; 0x24
 80118a4:	af00      	add	r7, sp, #0
 80118a6:	6078      	str	r0, [r7, #4]
 80118a8:	6039      	str	r1, [r7, #0]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 80118aa:	683b      	ldr	r3, [r7, #0]
 80118ac:	7f5b      	ldrb	r3, [r3, #29]
 80118ae:	4619      	mov	r1, r3
 80118b0:	6878      	ldr	r0, [r7, #4]
 80118b2:	f7ff ff67 	bl	8011784 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 80118b6:	61b8      	str	r0, [r7, #24]
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80118b8:	683b      	ldr	r3, [r7, #0]
 80118ba:	7f9b      	ldrb	r3, [r3, #30]
 80118bc:	4619      	mov	r1, r3
 80118be:	6878      	ldr	r0, [r7, #4]
 80118c0:	f7ff ff60 	bl	8011784 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 80118c4:	6178      	str	r0, [r7, #20]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80118c6:	683b      	ldr	r3, [r7, #0]
 80118c8:	7f9b      	ldrb	r3, [r3, #30]
 80118ca:	4619      	mov	r1, r3
 80118cc:	6878      	ldr	r0, [r7, #4]
 80118ce:	f7ff ff9d 	bl	801180c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 80118d2:	6138      	str	r0, [r7, #16]

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80118d4:	683b      	ldr	r3, [r7, #0]
 80118d6:	8b5b      	ldrh	r3, [r3, #26]
 80118d8:	461a      	mov	r2, r3
 80118da:	683b      	ldr	r3, [r7, #0]
 80118dc:	8a9b      	ldrh	r3, [r3, #20]
 80118de:	1ad2      	subs	r2, r2, r3
 80118e0:	4b92      	ldr	r3, [pc, #584]	; (8011b2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80118e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration */
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80118e4:	683b      	ldr	r3, [r7, #0]
 80118e6:	8b5b      	ldrh	r3, [r3, #26]
 80118e8:	461a      	mov	r2, r3
 80118ea:	683b      	ldr	r3, [r7, #0]
 80118ec:	8a9b      	ldrh	r3, [r3, #20]
 80118ee:	1ad2      	subs	r2, r2, r3
 80118f0:	4b8e      	ldr	r3, [pc, #568]	; (8011b2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80118f2:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration */
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 80118f4:	683b      	ldr	r3, [r7, #0]
 80118f6:	8b1b      	ldrh	r3, [r3, #24]
 80118f8:	461a      	mov	r2, r3
 80118fa:	683b      	ldr	r3, [r7, #0]
 80118fc:	8a9b      	ldrh	r3, [r3, #20]
 80118fe:	1ad2      	subs	r2, r2, r3
 8011900:	4b8a      	ldr	r3, [pc, #552]	; (8011b2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8011902:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8011904:	4a89      	ldr	r2, [pc, #548]	; (8011b2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8011906:	693b      	ldr	r3, [r7, #16]
 8011908:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 801190a:	683b      	ldr	r3, [r7, #0]
 801190c:	8adb      	ldrh	r3, [r3, #22]
 801190e:	461a      	mov	r2, r3
 8011910:	683b      	ldr	r3, [r7, #0]
 8011912:	8a9b      	ldrh	r3, [r3, #20]
 8011914:	041b      	lsls	r3, r3, #16
 8011916:	431a      	orrs	r2, r3
 8011918:	4b84      	ldr	r3, [pc, #528]	; (8011b2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 801191a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 801191c:	683b      	ldr	r3, [r7, #0]
 801191e:	691a      	ldr	r2, [r3, #16]
 8011920:	4b82      	ldr	r3, [pc, #520]	; (8011b2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8011922:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8011924:	683b      	ldr	r3, [r7, #0]
 8011926:	685a      	ldr	r2, [r3, #4]
 8011928:	4b80      	ldr	r3, [pc, #512]	; (8011b2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 801192a:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 801192c:	683b      	ldr	r3, [r7, #0]
 801192e:	681b      	ldr	r3, [r3, #0]
 8011930:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011934:	d036      	beq.n	80119a4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x104>
 8011936:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801193a:	f200 80e2 	bhi.w	8011b02 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x262>
 801193e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011942:	d014      	beq.n	801196e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xce>
 8011944:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011948:	f200 80db 	bhi.w	8011b02 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x262>
 801194c:	2b80      	cmp	r3, #128	; 0x80
 801194e:	d059      	beq.n	8011a04 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x164>
 8011950:	2b80      	cmp	r3, #128	; 0x80
 8011952:	f200 80d6 	bhi.w	8011b02 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x262>
 8011956:	2b40      	cmp	r3, #64	; 0x40
 8011958:	f000 80be 	beq.w	8011ad8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x238>
 801195c:	2b40      	cmp	r3, #64	; 0x40
 801195e:	f200 80d0 	bhi.w	8011b02 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x262>
 8011962:	2b04      	cmp	r3, #4
 8011964:	d039      	beq.n	80119da <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13a>
 8011966:	2b20      	cmp	r3, #32
 8011968:	f000 80b6 	beq.w	8011ad8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x238>
 801196c:	e0c9      	b.n	8011b02 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x262>
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 801196e:	683b      	ldr	r3, [r7, #0]
 8011970:	7f1b      	ldrb	r3, [r3, #28]
 8011972:	061b      	lsls	r3, r3, #24
 8011974:	4619      	mov	r1, r3
 8011976:	4a6d      	ldr	r2, [pc, #436]	; (8011b2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8011978:	4b6d      	ldr	r3, [pc, #436]	; (8011b30 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 801197a:	430b      	orrs	r3, r1
 801197c:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 801197e:	683b      	ldr	r3, [r7, #0]
 8011980:	330c      	adds	r3, #12
 8011982:	4c6a      	ldr	r4, [pc, #424]	; (8011b2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8011984:	4618      	mov	r0, r3
 8011986:	f7ff fdbf 	bl	8011508 <_ZNK8touchgfx9colortypecvmEv>
 801198a:	4603      	mov	r3, r0
 801198c:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 801198e:	4a67      	ldr	r2, [pc, #412]	; (8011b2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8011990:	697b      	ldr	r3, [r7, #20]
 8011992:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8011994:	683b      	ldr	r3, [r7, #0]
 8011996:	691a      	ldr	r2, [r3, #16]
 8011998:	4b64      	ldr	r3, [pc, #400]	; (8011b2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 801199a:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 801199c:	4b63      	ldr	r3, [pc, #396]	; (8011b2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 801199e:	4a65      	ldr	r2, [pc, #404]	; (8011b34 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 80119a0:	601a      	str	r2, [r3, #0]
        break;
 80119a2:	e0da      	b.n	8011b5a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_A8:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80119a4:	683b      	ldr	r3, [r7, #0]
 80119a6:	7f1b      	ldrb	r3, [r3, #28]
 80119a8:	061b      	lsls	r3, r3, #24
 80119aa:	4619      	mov	r1, r3
 80119ac:	4a5f      	ldr	r2, [pc, #380]	; (8011b2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80119ae:	4b62      	ldr	r3, [pc, #392]	; (8011b38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80119b0:	430b      	orrs	r3, r1
 80119b2:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 80119b4:	683b      	ldr	r3, [r7, #0]
 80119b6:	330c      	adds	r3, #12
 80119b8:	4c5c      	ldr	r4, [pc, #368]	; (8011b2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80119ba:	4618      	mov	r0, r3
 80119bc:	f7ff fda4 	bl	8011508 <_ZNK8touchgfx9colortypecvmEv>
 80119c0:	4603      	mov	r3, r0
 80119c2:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80119c4:	4a59      	ldr	r2, [pc, #356]	; (8011b2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80119c6:	697b      	ldr	r3, [r7, #20]
 80119c8:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80119ca:	683b      	ldr	r3, [r7, #0]
 80119cc:	691a      	ldr	r2, [r3, #16]
 80119ce:	4b57      	ldr	r3, [pc, #348]	; (8011b2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80119d0:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 80119d2:	4b56      	ldr	r3, [pc, #344]	; (8011b2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80119d4:	4a57      	ldr	r2, [pc, #348]	; (8011b34 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 80119d6:	601a      	str	r2, [r3, #0]
        break;
 80119d8:	e0bf      	b.n	8011b5a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80119da:	683b      	ldr	r3, [r7, #0]
 80119dc:	7f1b      	ldrb	r3, [r3, #28]
 80119de:	061b      	lsls	r3, r3, #24
 80119e0:	461a      	mov	r2, r3
 80119e2:	69bb      	ldr	r3, [r7, #24]
 80119e4:	4313      	orrs	r3, r2
 80119e6:	4a51      	ldr	r2, [pc, #324]	; (8011b2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80119e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80119ec:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80119ee:	4a4f      	ldr	r2, [pc, #316]	; (8011b2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80119f0:	697b      	ldr	r3, [r7, #20]
 80119f2:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80119f4:	683b      	ldr	r3, [r7, #0]
 80119f6:	691a      	ldr	r2, [r3, #16]
 80119f8:	4b4c      	ldr	r3, [pc, #304]	; (8011b2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80119fa:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 80119fc:	4b4b      	ldr	r3, [pc, #300]	; (8011b2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80119fe:	4a4d      	ldr	r2, [pc, #308]	; (8011b34 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8011a00:	601a      	str	r2, [r3, #0]
        break;
 8011a02:	e0aa      	b.n	8011b5a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_L8:
        {
            bool blend = true;
 8011a04:	2301      	movs	r3, #1
 8011a06:	77fb      	strb	r3, [r7, #31]
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8011a08:	683b      	ldr	r3, [r7, #0]
 8011a0a:	689b      	ldr	r3, [r3, #8]
 8011a0c:	60fb      	str	r3, [r7, #12]

            /* Write foreground CLUT memory address */
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8011a0e:	68fb      	ldr	r3, [r7, #12]
 8011a10:	1d1a      	adds	r2, r3, #4
 8011a12:	4b46      	ldr	r3, [pc, #280]	; (8011b2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8011a14:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Set DMA2D color mode and alpha mode */
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8011a16:	683b      	ldr	r3, [r7, #0]
 8011a18:	7f1b      	ldrb	r3, [r3, #28]
 8011a1a:	061b      	lsls	r3, r3, #24
 8011a1c:	461a      	mov	r2, r3
 8011a1e:	69bb      	ldr	r3, [r7, #24]
 8011a20:	4313      	orrs	r3, r2
 8011a22:	4a42      	ldr	r2, [pc, #264]	; (8011b2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8011a24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011a28:	61d3      	str	r3, [r2, #28]

            /* Write DMA2D BGPFCCR register */
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8011a2a:	4a40      	ldr	r2, [pc, #256]	; (8011b2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8011a2c:	697b      	ldr	r3, [r7, #20]
 8011a2e:	6253      	str	r3, [r2, #36]	; 0x24

            /* Configure DMA2D Stream source2 address */
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8011a30:	683b      	ldr	r3, [r7, #0]
 8011a32:	691a      	ldr	r2, [r3, #16]
 8011a34:	4b3d      	ldr	r3, [pc, #244]	; (8011b2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8011a36:	615a      	str	r2, [r3, #20]

            /* Configure CLUT */
            switch ((Bitmap::ClutFormat)palette->format)
 8011a38:	68fb      	ldr	r3, [r7, #12]
 8011a3a:	881b      	ldrh	r3, [r3, #0]
 8011a3c:	b2db      	uxtb	r3, r3
 8011a3e:	2b00      	cmp	r3, #0
 8011a40:	d002      	beq.n	8011a48 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a8>
 8011a42:	2b01      	cmp	r3, #1
 8011a44:	d00d      	beq.n	8011a62 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c2>
 8011a46:	e020      	b.n	8011a8a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ea>
            {
            case Bitmap::CLUT_FORMAT_L8_ARGB8888:
                /* Write foreground CLUT size and CLUT color mode */
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8011a48:	4b38      	ldr	r3, [pc, #224]	; (8011b2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8011a4a:	69da      	ldr	r2, [r3, #28]
 8011a4c:	4b3b      	ldr	r3, [pc, #236]	; (8011b3c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8011a4e:	4013      	ands	r3, r2
 8011a50:	68fa      	ldr	r2, [r7, #12]
 8011a52:	8852      	ldrh	r2, [r2, #2]
 8011a54:	3a01      	subs	r2, #1
 8011a56:	0212      	lsls	r2, r2, #8
 8011a58:	4611      	mov	r1, r2
 8011a5a:	4a34      	ldr	r2, [pc, #208]	; (8011b2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8011a5c:	430b      	orrs	r3, r1
 8011a5e:	61d3      	str	r3, [r2, #28]
                break;
 8011a60:	e01a      	b.n	8011a98 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f8>
            case Bitmap::CLUT_FORMAT_L8_RGB888:
                if(blitOp.alpha == 255)
 8011a62:	683b      	ldr	r3, [r7, #0]
 8011a64:	7f1b      	ldrb	r3, [r3, #28]
 8011a66:	2bff      	cmp	r3, #255	; 0xff
 8011a68:	d101      	bne.n	8011a6e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ce>
                {
                    blend = false;
 8011a6a:	2300      	movs	r3, #0
 8011a6c:	77fb      	strb	r3, [r7, #31]
                }
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8011a6e:	4b2f      	ldr	r3, [pc, #188]	; (8011b2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8011a70:	69da      	ldr	r2, [r3, #28]
 8011a72:	4b32      	ldr	r3, [pc, #200]	; (8011b3c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8011a74:	4013      	ands	r3, r2
 8011a76:	68fa      	ldr	r2, [r7, #12]
 8011a78:	8852      	ldrh	r2, [r2, #2]
 8011a7a:	3a01      	subs	r2, #1
 8011a7c:	0212      	lsls	r2, r2, #8
 8011a7e:	4313      	orrs	r3, r2
 8011a80:	4a2a      	ldr	r2, [pc, #168]	; (8011b2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8011a82:	f043 0310 	orr.w	r3, r3, #16
 8011a86:	61d3      	str	r3, [r2, #28]
                break;
 8011a88:	e006      	b.n	8011a98 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f8>

            case Bitmap::CLUT_FORMAT_L8_RGB565:
            default:
                assert(0 && "Unsupported format");
 8011a8a:	4b2d      	ldr	r3, [pc, #180]	; (8011b40 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8011a8c:	4a2d      	ldr	r2, [pc, #180]	; (8011b44 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8011a8e:	f240 1111 	movw	r1, #273	; 0x111
 8011a92:	482d      	ldr	r0, [pc, #180]	; (8011b48 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8011a94:	f008 fd14 	bl	801a4c0 <__assert_func>
                break;
            }

            /* Enable the CLUT loading for the foreground */
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8011a98:	4b24      	ldr	r3, [pc, #144]	; (8011b2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8011a9a:	69db      	ldr	r3, [r3, #28]
 8011a9c:	4a23      	ldr	r2, [pc, #140]	; (8011b2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8011a9e:	f043 0320 	orr.w	r3, r3, #32
 8011aa2:	61d3      	str	r3, [r2, #28]

            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8011aa4:	4b21      	ldr	r3, [pc, #132]	; (8011b2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8011aa6:	69db      	ldr	r3, [r3, #28]
 8011aa8:	f003 0320 	and.w	r3, r3, #32
 8011aac:	2b00      	cmp	r3, #0
 8011aae:	bf14      	ite	ne
 8011ab0:	2301      	movne	r3, #1
 8011ab2:	2300      	moveq	r3, #0
 8011ab4:	b2db      	uxtb	r3, r3
 8011ab6:	2b00      	cmp	r3, #0
 8011ab8:	d000      	beq.n	8011abc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>
 8011aba:	e7f3      	b.n	8011aa4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x204>
            {
            }
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8011abc:	4b1b      	ldr	r3, [pc, #108]	; (8011b2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8011abe:	2210      	movs	r2, #16
 8011ac0:	609a      	str	r2, [r3, #8]

            /* Set DMA2D mode */
            if(blend)
 8011ac2:	7ffb      	ldrb	r3, [r7, #31]
 8011ac4:	2b00      	cmp	r3, #0
 8011ac6:	d003      	beq.n	8011ad0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x230>
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8011ac8:	4b18      	ldr	r3, [pc, #96]	; (8011b2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8011aca:	4a1a      	ldr	r2, [pc, #104]	; (8011b34 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8011acc:	601a      	str	r2, [r3, #0]
            else
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
            }
        }
        break;
 8011ace:	e044      	b.n	8011b5a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8011ad0:	4b16      	ldr	r3, [pc, #88]	; (8011b2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8011ad2:	4a1e      	ldr	r2, [pc, #120]	; (8011b4c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 8011ad4:	601a      	str	r2, [r3, #0]
        break;
 8011ad6:	e040      	b.n	8011b5a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8011ad8:	683b      	ldr	r3, [r7, #0]
 8011ada:	7f1b      	ldrb	r3, [r3, #28]
 8011adc:	061b      	lsls	r3, r3, #24
 8011ade:	461a      	mov	r2, r3
 8011ae0:	69bb      	ldr	r3, [r7, #24]
 8011ae2:	4313      	orrs	r3, r2
 8011ae4:	4a11      	ldr	r2, [pc, #68]	; (8011b2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8011ae6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011aea:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8011aec:	4a0f      	ldr	r2, [pc, #60]	; (8011b2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8011aee:	697b      	ldr	r3, [r7, #20]
 8011af0:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8011af2:	683b      	ldr	r3, [r7, #0]
 8011af4:	691a      	ldr	r2, [r3, #16]
 8011af6:	4b0d      	ldr	r3, [pc, #52]	; (8011b2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8011af8:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8011afa:	4b0c      	ldr	r3, [pc, #48]	; (8011b2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8011afc:	4a0d      	ldr	r2, [pc, #52]	; (8011b34 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8011afe:	601a      	str	r2, [r3, #0]
        break;
 8011b00:	e02b      	b.n	8011b5a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8011b02:	683b      	ldr	r3, [r7, #0]
 8011b04:	7f1b      	ldrb	r3, [r3, #28]
 8011b06:	061b      	lsls	r3, r3, #24
 8011b08:	461a      	mov	r2, r3
 8011b0a:	69bb      	ldr	r3, [r7, #24]
 8011b0c:	4313      	orrs	r3, r2
 8011b0e:	4a07      	ldr	r2, [pc, #28]	; (8011b2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8011b10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011b14:	61d3      	str	r3, [r2, #28]

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 8011b16:	683b      	ldr	r3, [r7, #0]
 8011b18:	7f5a      	ldrb	r2, [r3, #29]
 8011b1a:	683b      	ldr	r3, [r7, #0]
 8011b1c:	7f9b      	ldrb	r3, [r3, #30]
 8011b1e:	429a      	cmp	r2, r3
 8011b20:	d016      	beq.n	8011b50 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b0>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8011b22:	4b02      	ldr	r3, [pc, #8]	; (8011b2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8011b24:	4a09      	ldr	r2, [pc, #36]	; (8011b4c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 8011b26:	601a      	str	r2, [r3, #0]
        else
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
        }
        break;
 8011b28:	e016      	b.n	8011b58 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b8>
 8011b2a:	bf00      	nop
 8011b2c:	4002b000 	.word	0x4002b000
 8011b30:	0002000a 	.word	0x0002000a
 8011b34:	00020201 	.word	0x00020201
 8011b38:	00020009 	.word	0x00020009
 8011b3c:	ffff00ef 	.word	0xffff00ef
 8011b40:	0801c370 	.word	0x0801c370
 8011b44:	0801c38c 	.word	0x0801c38c
 8011b48:	0801c2f8 	.word	0x0801c2f8
 8011b4c:	00010201 	.word	0x00010201
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8011b50:	4b04      	ldr	r3, [pc, #16]	; (8011b64 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c4>)
 8011b52:	f240 2201 	movw	r2, #513	; 0x201
 8011b56:	601a      	str	r2, [r3, #0]
        break;
 8011b58:	bf00      	nop
    }
}
 8011b5a:	bf00      	nop
 8011b5c:	3724      	adds	r7, #36	; 0x24
 8011b5e:	46bd      	mov	sp, r7
 8011b60:	bd90      	pop	{r4, r7, pc}
 8011b62:	bf00      	nop
 8011b64:	4002b000 	.word	0x4002b000

08011b68 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8011b68:	b590      	push	{r4, r7, lr}
 8011b6a:	b085      	sub	sp, #20
 8011b6c:	af00      	add	r7, sp, #0
 8011b6e:	6078      	str	r0, [r7, #4]
 8011b70:	6039      	str	r1, [r7, #0]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8011b72:	683b      	ldr	r3, [r7, #0]
 8011b74:	7f9b      	ldrb	r3, [r3, #30]
 8011b76:	4619      	mov	r1, r3
 8011b78:	6878      	ldr	r0, [r7, #4]
 8011b7a:	f7ff fe47 	bl	801180c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8011b7e:	60f8      	str	r0, [r7, #12]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8011b80:	4a3b      	ldr	r2, [pc, #236]	; (8011c70 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8011b82:	68fb      	ldr	r3, [r7, #12]
 8011b84:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8011b86:	683b      	ldr	r3, [r7, #0]
 8011b88:	8adb      	ldrh	r3, [r3, #22]
 8011b8a:	461a      	mov	r2, r3
 8011b8c:	683b      	ldr	r3, [r7, #0]
 8011b8e:	8a9b      	ldrh	r3, [r3, #20]
 8011b90:	041b      	lsls	r3, r3, #16
 8011b92:	431a      	orrs	r2, r3
 8011b94:	4b36      	ldr	r3, [pc, #216]	; (8011c70 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8011b96:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8011b98:	683b      	ldr	r3, [r7, #0]
 8011b9a:	691a      	ldr	r2, [r3, #16]
 8011b9c:	4b34      	ldr	r3, [pc, #208]	; (8011c70 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8011b9e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8011ba0:	683b      	ldr	r3, [r7, #0]
 8011ba2:	8b5b      	ldrh	r3, [r3, #26]
 8011ba4:	461a      	mov	r2, r3
 8011ba6:	683b      	ldr	r3, [r7, #0]
 8011ba8:	8a9b      	ldrh	r3, [r3, #20]
 8011baa:	1ad2      	subs	r2, r2, r3
 8011bac:	4b30      	ldr	r3, [pc, #192]	; (8011c70 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8011bae:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8011bb0:	683b      	ldr	r3, [r7, #0]
 8011bb2:	681b      	ldr	r3, [r3, #0]
 8011bb4:	2b08      	cmp	r3, #8
 8011bb6:	d12e      	bne.n	8011c16 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xae>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8011bb8:	683b      	ldr	r3, [r7, #0]
 8011bba:	8b5b      	ldrh	r3, [r3, #26]
 8011bbc:	461a      	mov	r2, r3
 8011bbe:	683b      	ldr	r3, [r7, #0]
 8011bc0:	8a9b      	ldrh	r3, [r3, #20]
 8011bc2:	1ad2      	subs	r2, r2, r3
 8011bc4:	4b2a      	ldr	r3, [pc, #168]	; (8011c70 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8011bc6:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8011bc8:	683b      	ldr	r3, [r7, #0]
 8011bca:	8b5b      	ldrh	r3, [r3, #26]
 8011bcc:	461a      	mov	r2, r3
 8011bce:	683b      	ldr	r3, [r7, #0]
 8011bd0:	8a9b      	ldrh	r3, [r3, #20]
 8011bd2:	1ad2      	subs	r2, r2, r3
 8011bd4:	4b26      	ldr	r3, [pc, #152]	; (8011c70 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8011bd6:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8011bd8:	4a25      	ldr	r2, [pc, #148]	; (8011c70 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8011bda:	68fb      	ldr	r3, [r7, #12]
 8011bdc:	6253      	str	r3, [r2, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8011bde:	683b      	ldr	r3, [r7, #0]
 8011be0:	7f1b      	ldrb	r3, [r3, #28]
 8011be2:	061b      	lsls	r3, r3, #24
 8011be4:	4619      	mov	r1, r3
 8011be6:	4a22      	ldr	r2, [pc, #136]	; (8011c70 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8011be8:	4b22      	ldr	r3, [pc, #136]	; (8011c74 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10c>)
 8011bea:	430b      	orrs	r3, r1
 8011bec:	61d3      	str	r3, [r2, #28]

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8011bee:	683b      	ldr	r3, [r7, #0]
 8011bf0:	330c      	adds	r3, #12
 8011bf2:	4c1f      	ldr	r4, [pc, #124]	; (8011c70 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8011bf4:	4618      	mov	r0, r3
 8011bf6:	f7ff fc87 	bl	8011508 <_ZNK8touchgfx9colortypecvmEv>
 8011bfa:	4603      	mov	r3, r0
 8011bfc:	6223      	str	r3, [r4, #32]

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8011bfe:	683b      	ldr	r3, [r7, #0]
 8011c00:	691a      	ldr	r2, [r3, #16]
 8011c02:	4b1b      	ldr	r3, [pc, #108]	; (8011c70 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8011c04:	615a      	str	r2, [r3, #20]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8011c06:	683b      	ldr	r3, [r7, #0]
 8011c08:	691a      	ldr	r2, [r3, #16]
 8011c0a:	4b19      	ldr	r3, [pc, #100]	; (8011c70 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8011c0c:	60da      	str	r2, [r3, #12]

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 8011c0e:	4b18      	ldr	r3, [pc, #96]	; (8011c70 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8011c10:	4a19      	ldr	r2, [pc, #100]	; (8011c78 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x110>)
 8011c12:	601a      	str	r2, [r3, #0]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
    }
}
 8011c14:	e027      	b.n	8011c66 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xfe>
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8011c16:	4a16      	ldr	r2, [pc, #88]	; (8011c70 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8011c18:	68fb      	ldr	r3, [r7, #12]
 8011c1a:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 8011c1c:	4b14      	ldr	r3, [pc, #80]	; (8011c70 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8011c1e:	2200      	movs	r2, #0
 8011c20:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));
 8011c22:	683b      	ldr	r3, [r7, #0]
 8011c24:	330c      	adds	r3, #12
 8011c26:	4618      	mov	r0, r3
 8011c28:	f7ff fc6e 	bl	8011508 <_ZNK8touchgfx9colortypecvmEv>
 8011c2c:	4603      	mov	r3, r0
 8011c2e:	0a1b      	lsrs	r3, r3, #8
 8011c30:	f403 4478 	and.w	r4, r3, #63488	; 0xf800
 8011c34:	683b      	ldr	r3, [r7, #0]
 8011c36:	330c      	adds	r3, #12
 8011c38:	4618      	mov	r0, r3
 8011c3a:	f7ff fc65 	bl	8011508 <_ZNK8touchgfx9colortypecvmEv>
 8011c3e:	4603      	mov	r3, r0
 8011c40:	095b      	lsrs	r3, r3, #5
 8011c42:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8011c46:	431c      	orrs	r4, r3
 8011c48:	683b      	ldr	r3, [r7, #0]
 8011c4a:	330c      	adds	r3, #12
 8011c4c:	4618      	mov	r0, r3
 8011c4e:	f7ff fc5b 	bl	8011508 <_ZNK8touchgfx9colortypecvmEv>
 8011c52:	4603      	mov	r3, r0
 8011c54:	08db      	lsrs	r3, r3, #3
 8011c56:	f003 031f 	and.w	r3, r3, #31
 8011c5a:	4a05      	ldr	r2, [pc, #20]	; (8011c70 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8011c5c:	4323      	orrs	r3, r4
 8011c5e:	6393      	str	r3, [r2, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8011c60:	4b03      	ldr	r3, [pc, #12]	; (8011c70 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8011c62:	4a06      	ldr	r2, [pc, #24]	; (8011c7c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x114>)
 8011c64:	601a      	str	r2, [r3, #0]
}
 8011c66:	bf00      	nop
 8011c68:	3714      	adds	r7, #20
 8011c6a:	46bd      	mov	sp, r7
 8011c6c:	bd90      	pop	{r4, r7, pc}
 8011c6e:	bf00      	nop
 8011c70:	4002b000 	.word	0x4002b000
 8011c74:	00010009 	.word	0x00010009
 8011c78:	00020201 	.word	0x00020201
 8011c7c:	00030201 	.word	0x00030201

08011c80 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 8011c80:	b580      	push	{r7, lr}
 8011c82:	b082      	sub	sp, #8
 8011c84:	af00      	add	r7, sp, #0
 8011c86:	6078      	str	r0, [r7, #4]
 8011c88:	4a05      	ldr	r2, [pc, #20]	; (8011ca0 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	601a      	str	r2, [r3, #0]
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	4618      	mov	r0, r3
 8011c92:	f7ff fc45 	bl	8011520 <_ZN8touchgfx9DMA_QueueD1Ev>
 8011c96:	687b      	ldr	r3, [r7, #4]
 8011c98:	4618      	mov	r0, r3
 8011c9a:	3708      	adds	r7, #8
 8011c9c:	46bd      	mov	sp, r7
 8011c9e:	bd80      	pop	{r7, pc}
 8011ca0:	0801ead4 	.word	0x0801ead4

08011ca4 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8011ca4:	b580      	push	{r7, lr}
 8011ca6:	b082      	sub	sp, #8
 8011ca8:	af00      	add	r7, sp, #0
 8011caa:	6078      	str	r0, [r7, #4]
 8011cac:	6878      	ldr	r0, [r7, #4]
 8011cae:	f7ff ffe7 	bl	8011c80 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8011cb2:	2114      	movs	r1, #20
 8011cb4:	6878      	ldr	r0, [r7, #4]
 8011cb6:	f008 fbd5 	bl	801a464 <_ZdlPvj>
 8011cba:	687b      	ldr	r3, [r7, #4]
 8011cbc:	4618      	mov	r0, r3
 8011cbe:	3708      	adds	r7, #8
 8011cc0:	46bd      	mov	sp, r7
 8011cc2:	bd80      	pop	{r7, pc}

08011cc4 <_ZN8touchgfx3LCDD1Ev>:
        : textureMapperClass(0)
    {
    }

    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 8011cc4:	b480      	push	{r7}
 8011cc6:	b083      	sub	sp, #12
 8011cc8:	af00      	add	r7, sp, #0
 8011cca:	6078      	str	r0, [r7, #4]
    {
 8011ccc:	4a04      	ldr	r2, [pc, #16]	; (8011ce0 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	601a      	str	r2, [r3, #0]
    }
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	4618      	mov	r0, r3
 8011cd6:	370c      	adds	r7, #12
 8011cd8:	46bd      	mov	sp, r7
 8011cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cde:	4770      	bx	lr
 8011ce0:	0801eaf8 	.word	0x0801eaf8

08011ce4 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 8011ce4:	b580      	push	{r7, lr}
 8011ce6:	b082      	sub	sp, #8
 8011ce8:	af00      	add	r7, sp, #0
 8011cea:	6078      	str	r0, [r7, #4]
    }
 8011cec:	6878      	ldr	r0, [r7, #4]
 8011cee:	f7ff ffe9 	bl	8011cc4 <_ZN8touchgfx3LCDD1Ev>
 8011cf2:	2108      	movs	r1, #8
 8011cf4:	6878      	ldr	r0, [r7, #4]
 8011cf6:	f008 fbb5 	bl	801a464 <_ZdlPvj>
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	4618      	mov	r0, r3
 8011cfe:	3708      	adds	r7, #8
 8011d00:	46bd      	mov	sp, r7
 8011d02:	bd80      	pop	{r7, pc}

08011d04 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 8011d04:	b480      	push	{r7}
 8011d06:	b083      	sub	sp, #12
 8011d08:	af00      	add	r7, sp, #0
 8011d0a:	6078      	str	r0, [r7, #4]
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	2200      	movs	r2, #0
 8011d10:	801a      	strh	r2, [r3, #0]
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	2200      	movs	r2, #0
 8011d16:	805a      	strh	r2, [r3, #2]
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	2200      	movs	r2, #0
 8011d1c:	809a      	strh	r2, [r3, #4]
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	2200      	movs	r2, #0
 8011d22:	80da      	strh	r2, [r3, #6]
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	2200      	movs	r2, #0
 8011d28:	811a      	strh	r2, [r3, #8]
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	2200      	movs	r2, #0
 8011d2e:	815a      	strh	r2, [r3, #10]
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	2200      	movs	r2, #0
 8011d34:	819a      	strh	r2, [r3, #12]
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	2200      	movs	r2, #0
 8011d3a:	739a      	strb	r2, [r3, #14]
        {
        }
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	4618      	mov	r0, r3
 8011d40:	370c      	adds	r7, #12
 8011d42:	46bd      	mov	sp, r7
 8011d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d48:	4770      	bx	lr

08011d4a <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 8011d4a:	b580      	push	{r7, lr}
 8011d4c:	b082      	sub	sp, #8
 8011d4e:	af00      	add	r7, sp, #0
 8011d50:	6078      	str	r0, [r7, #4]
        : drag(), listener(0), dragThresholdValue(0)
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	4618      	mov	r0, r3
 8011d56:	f7ff ffd5 	bl	8011d04 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	2200      	movs	r2, #0
 8011d5e:	611a      	str	r2, [r3, #16]
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	2200      	movs	r2, #0
 8011d64:	829a      	strh	r2, [r3, #20]
    {
    }
 8011d66:	687b      	ldr	r3, [r7, #4]
 8011d68:	4618      	mov	r0, r3
 8011d6a:	3708      	adds	r7, #8
 8011d6c:	46bd      	mov	sp, r7
 8011d6e:	bd80      	pop	{r7, pc}

08011d70 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 8011d70:	b580      	push	{r7, lr}
 8011d72:	b084      	sub	sp, #16
 8011d74:	af00      	add	r7, sp, #0
 8011d76:	60f8      	str	r0, [r7, #12]
 8011d78:	60b9      	str	r1, [r7, #8]
 8011d7a:	607a      	str	r2, [r7, #4]
 8011d7c:	603b      	str	r3, [r7, #0]
          lastRenderMethod(HARDWARE)
 8011d7e:	4a55      	ldr	r2, [pc, #340]	; (8011ed4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x164>)
 8011d80:	68fb      	ldr	r3, [r7, #12]
 8011d82:	601a      	str	r2, [r3, #0]
 8011d84:	68fb      	ldr	r3, [r7, #12]
 8011d86:	68ba      	ldr	r2, [r7, #8]
 8011d88:	605a      	str	r2, [r3, #4]
 8011d8a:	68fb      	ldr	r3, [r7, #12]
 8011d8c:	687a      	ldr	r2, [r7, #4]
 8011d8e:	609a      	str	r2, [r3, #8]
 8011d90:	68fb      	ldr	r3, [r7, #12]
 8011d92:	683a      	ldr	r2, [r7, #0]
 8011d94:	60da      	str	r2, [r3, #12]
 8011d96:	68fb      	ldr	r3, [r7, #12]
 8011d98:	2200      	movs	r2, #0
 8011d9a:	611a      	str	r2, [r3, #16]
 8011d9c:	68fb      	ldr	r3, [r7, #12]
 8011d9e:	2200      	movs	r2, #0
 8011da0:	615a      	str	r2, [r3, #20]
 8011da2:	68fb      	ldr	r3, [r7, #12]
 8011da4:	2200      	movs	r2, #0
 8011da6:	619a      	str	r2, [r3, #24]
 8011da8:	68fb      	ldr	r3, [r7, #12]
 8011daa:	331c      	adds	r3, #28
 8011dac:	4618      	mov	r0, r3
 8011dae:	f7ff ffcc 	bl	8011d4a <_ZN8touchgfx8GesturesC1Ev>
 8011db2:	68fb      	ldr	r3, [r7, #12]
 8011db4:	2200      	movs	r2, #0
 8011db6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8011dba:	68fb      	ldr	r3, [r7, #12]
 8011dbc:	2200      	movs	r2, #0
 8011dbe:	639a      	str	r2, [r3, #56]	; 0x38
 8011dc0:	68fb      	ldr	r3, [r7, #12]
 8011dc2:	2200      	movs	r2, #0
 8011dc4:	63da      	str	r2, [r3, #60]	; 0x3c
 8011dc6:	68fb      	ldr	r3, [r7, #12]
 8011dc8:	2200      	movs	r2, #0
 8011dca:	641a      	str	r2, [r3, #64]	; 0x40
 8011dcc:	68fb      	ldr	r3, [r7, #12]
 8011dce:	2200      	movs	r2, #0
 8011dd0:	645a      	str	r2, [r3, #68]	; 0x44
 8011dd2:	68fb      	ldr	r3, [r7, #12]
 8011dd4:	2200      	movs	r2, #0
 8011dd6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8011dda:	68fb      	ldr	r3, [r7, #12]
 8011ddc:	2201      	movs	r2, #1
 8011dde:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 8011de2:	68fb      	ldr	r3, [r7, #12]
 8011de4:	2200      	movs	r2, #0
 8011de6:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8011dea:	68fb      	ldr	r3, [r7, #12]
 8011dec:	2200      	movs	r2, #0
 8011dee:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 8011df2:	68fb      	ldr	r3, [r7, #12]
 8011df4:	2200      	movs	r2, #0
 8011df6:	64da      	str	r2, [r3, #76]	; 0x4c
 8011df8:	68fb      	ldr	r3, [r7, #12]
 8011dfa:	3350      	adds	r3, #80	; 0x50
 8011dfc:	4618      	mov	r0, r3
 8011dfe:	f7fd fd75 	bl	800f8ec <_ZN8touchgfx4RectC1Ev>
 8011e02:	68fb      	ldr	r3, [r7, #12]
 8011e04:	2200      	movs	r2, #0
 8011e06:	659a      	str	r2, [r3, #88]	; 0x58
 8011e08:	68fb      	ldr	r3, [r7, #12]
 8011e0a:	2200      	movs	r2, #0
 8011e0c:	65da      	str	r2, [r3, #92]	; 0x5c
 8011e0e:	68fb      	ldr	r3, [r7, #12]
 8011e10:	2200      	movs	r2, #0
 8011e12:	661a      	str	r2, [r3, #96]	; 0x60
 8011e14:	68fb      	ldr	r3, [r7, #12]
 8011e16:	2201      	movs	r2, #1
 8011e18:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8011e1c:	68fb      	ldr	r3, [r7, #12]
 8011e1e:	2200      	movs	r2, #0
 8011e20:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 8011e24:	68fb      	ldr	r3, [r7, #12]
 8011e26:	2200      	movs	r2, #0
 8011e28:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 8011e2c:	68fb      	ldr	r3, [r7, #12]
 8011e2e:	2201      	movs	r2, #1
 8011e30:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 8011e34:	68fb      	ldr	r3, [r7, #12]
 8011e36:	2200      	movs	r2, #0
 8011e38:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8011e3c:	68fb      	ldr	r3, [r7, #12]
 8011e3e:	2200      	movs	r2, #0
 8011e40:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 8011e44:	68fb      	ldr	r3, [r7, #12]
 8011e46:	2200      	movs	r2, #0
 8011e48:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 8011e4c:	68fb      	ldr	r3, [r7, #12]
 8011e4e:	2200      	movs	r2, #0
 8011e50:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 8011e54:	68fb      	ldr	r3, [r7, #12]
 8011e56:	2200      	movs	r2, #0
 8011e58:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8011e5c:	68fb      	ldr	r3, [r7, #12]
 8011e5e:	2200      	movs	r2, #0
 8011e60:	671a      	str	r2, [r3, #112]	; 0x70
 8011e62:	68fb      	ldr	r3, [r7, #12]
 8011e64:	2200      	movs	r2, #0
 8011e66:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 8011e6a:	68fb      	ldr	r3, [r7, #12]
 8011e6c:	2200      	movs	r2, #0
 8011e6e:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 8011e72:	68fb      	ldr	r3, [r7, #12]
 8011e74:	2200      	movs	r2, #0
 8011e76:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 8011e7a:	68fb      	ldr	r3, [r7, #12]
 8011e7c:	2201      	movs	r2, #1
 8011e7e:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 8011e82:	68fb      	ldr	r3, [r7, #12]
 8011e84:	2201      	movs	r2, #1
 8011e86:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        instance = this;
 8011e8a:	4a13      	ldr	r2, [pc, #76]	; (8011ed8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x168>)
 8011e8c:	68fb      	ldr	r3, [r7, #12]
 8011e8e:	6013      	str	r3, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8011e90:	4a12      	ldr	r2, [pc, #72]	; (8011edc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 8011e92:	8b3b      	ldrh	r3, [r7, #24]
 8011e94:	8013      	strh	r3, [r2, #0]
 8011e96:	4b11      	ldr	r3, [pc, #68]	; (8011edc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 8011e98:	881a      	ldrh	r2, [r3, #0]
 8011e9a:	4b11      	ldr	r3, [pc, #68]	; (8011ee0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x170>)
 8011e9c:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8011e9e:	4a11      	ldr	r2, [pc, #68]	; (8011ee4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 8011ea0:	8bbb      	ldrh	r3, [r7, #28]
 8011ea2:	8013      	strh	r3, [r2, #0]
 8011ea4:	4b0f      	ldr	r3, [pc, #60]	; (8011ee4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 8011ea6:	881a      	ldrh	r2, [r3, #0]
 8011ea8:	4b0f      	ldr	r3, [pc, #60]	; (8011ee8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x178>)
 8011eaa:	801a      	strh	r2, [r3, #0]
        DISPLAY_ROTATION = rotate0;
 8011eac:	4b0f      	ldr	r3, [pc, #60]	; (8011eec <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x17c>)
 8011eae:	2200      	movs	r2, #0
 8011eb0:	701a      	strb	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8011eb2:	8b3a      	ldrh	r2, [r7, #24]
 8011eb4:	8bbb      	ldrh	r3, [r7, #28]
 8011eb6:	429a      	cmp	r2, r3
 8011eb8:	bf34      	ite	cc
 8011eba:	2301      	movcc	r3, #1
 8011ebc:	2300      	movcs	r3, #0
 8011ebe:	b2db      	uxtb	r3, r3
 8011ec0:	461a      	mov	r2, r3
 8011ec2:	68fb      	ldr	r3, [r7, #12]
 8011ec4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 8011ec8:	68fb      	ldr	r3, [r7, #12]
 8011eca:	4618      	mov	r0, r3
 8011ecc:	3710      	adds	r7, #16
 8011ece:	46bd      	mov	sp, r7
 8011ed0:	bd80      	pop	{r7, pc}
 8011ed2:	bf00      	nop
 8011ed4:	0801e9ac 	.word	0x0801e9ac
 8011ed8:	200243dc 	.word	0x200243dc
 8011edc:	200243d0 	.word	0x200243d0
 8011ee0:	200243d6 	.word	0x200243d6
 8011ee4:	200243d2 	.word	0x200243d2
 8011ee8:	200243d8 	.word	0x200243d8
 8011eec:	200243d4 	.word	0x200243d4

08011ef0 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 8011ef0:	b580      	push	{r7, lr}
 8011ef2:	b086      	sub	sp, #24
 8011ef4:	af02      	add	r7, sp, #8
 8011ef6:	60f8      	str	r0, [r7, #12]
 8011ef8:	60b9      	str	r1, [r7, #8]
 8011efa:	607a      	str	r2, [r7, #4]
 8011efc:	603b      	str	r3, [r7, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 8011efe:	68f8      	ldr	r0, [r7, #12]
 8011f00:	8bbb      	ldrh	r3, [r7, #28]
 8011f02:	9301      	str	r3, [sp, #4]
 8011f04:	8b3b      	ldrh	r3, [r7, #24]
 8011f06:	9300      	str	r3, [sp, #0]
 8011f08:	683b      	ldr	r3, [r7, #0]
 8011f0a:	687a      	ldr	r2, [r7, #4]
 8011f0c:	68b9      	ldr	r1, [r7, #8]
 8011f0e:	f7ff ff2f 	bl	8011d70 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 8011f12:	4a04      	ldr	r2, [pc, #16]	; (8011f24 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8011f14:	68fb      	ldr	r3, [r7, #12]
 8011f16:	601a      	str	r2, [r3, #0]
    }
 8011f18:	68fb      	ldr	r3, [r7, #12]
 8011f1a:	4618      	mov	r0, r3
 8011f1c:	3710      	adds	r7, #16
 8011f1e:	46bd      	mov	sp, r7
 8011f20:	bd80      	pop	{r7, pc}
 8011f22:	bf00      	nop
 8011f24:	0801e280 	.word	0x0801e280

08011f28 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 8011f28:	b580      	push	{r7, lr}
 8011f2a:	b086      	sub	sp, #24
 8011f2c:	af02      	add	r7, sp, #8
 8011f2e:	60f8      	str	r0, [r7, #12]
 8011f30:	60b9      	str	r1, [r7, #8]
 8011f32:	607a      	str	r2, [r7, #4]
 8011f34:	603b      	str	r3, [r7, #0]
 8011f36:	68f8      	ldr	r0, [r7, #12]
 8011f38:	8bbb      	ldrh	r3, [r7, #28]
 8011f3a:	9301      	str	r3, [sp, #4]
 8011f3c:	8b3b      	ldrh	r3, [r7, #24]
 8011f3e:	9300      	str	r3, [sp, #0]
 8011f40:	683b      	ldr	r3, [r7, #0]
 8011f42:	687a      	ldr	r2, [r7, #4]
 8011f44:	68b9      	ldr	r1, [r7, #8]
 8011f46:	f7ff ffd3 	bl	8011ef0 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8011f4a:	4a04      	ldr	r2, [pc, #16]	; (8011f5c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8011f4c:	68fb      	ldr	r3, [r7, #12]
 8011f4e:	601a      	str	r2, [r3, #0]
    }
 8011f50:	68fb      	ldr	r3, [r7, #12]
 8011f52:	4618      	mov	r0, r3
 8011f54:	3710      	adds	r7, #16
 8011f56:	46bd      	mov	sp, r7
 8011f58:	bd80      	pop	{r7, pc}
 8011f5a:	bf00      	nop
 8011f5c:	0801e034 	.word	0x0801e034

08011f60 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 8011f60:	b480      	push	{r7}
 8011f62:	b083      	sub	sp, #12
 8011f64:	af00      	add	r7, sp, #0
 8011f66:	6078      	str	r0, [r7, #4]
 8011f68:	4a04      	ldr	r2, [pc, #16]	; (8011f7c <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	601a      	str	r2, [r3, #0]
 8011f6e:	687b      	ldr	r3, [r7, #4]
 8011f70:	4618      	mov	r0, r3
 8011f72:	370c      	adds	r7, #12
 8011f74:	46bd      	mov	sp, r7
 8011f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f7a:	4770      	bx	lr
 8011f7c:	0801e01c 	.word	0x0801e01c

08011f80 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 8011f80:	b580      	push	{r7, lr}
 8011f82:	b082      	sub	sp, #8
 8011f84:	af00      	add	r7, sp, #0
 8011f86:	6078      	str	r0, [r7, #4]
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	4618      	mov	r0, r3
 8011f8c:	f7ff ffe8 	bl	8011f60 <_ZN8touchgfx15TouchControllerC1Ev>
 8011f90:	4a03      	ldr	r2, [pc, #12]	; (8011fa0 <_ZN20STM32TouchControllerC1Ev+0x20>)
 8011f92:	687b      	ldr	r3, [r7, #4]
 8011f94:	601a      	str	r2, [r3, #0]
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	4618      	mov	r0, r3
 8011f9a:	3708      	adds	r7, #8
 8011f9c:	46bd      	mov	sp, r7
 8011f9e:	bd80      	pop	{r7, pc}
 8011fa0:	0801e004 	.word	0x0801e004

08011fa4 <_ZN8touchgfx8LCD16bppD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD16bpp : public LCD
 8011fa4:	b580      	push	{r7, lr}
 8011fa6:	b082      	sub	sp, #8
 8011fa8:	af00      	add	r7, sp, #0
 8011faa:	6078      	str	r0, [r7, #4]
 8011fac:	4a05      	ldr	r2, [pc, #20]	; (8011fc4 <_ZN8touchgfx8LCD16bppD1Ev+0x20>)
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	601a      	str	r2, [r3, #0]
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	4618      	mov	r0, r3
 8011fb6:	f7ff fe85 	bl	8011cc4 <_ZN8touchgfx3LCDD1Ev>
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	4618      	mov	r0, r3
 8011fbe:	3708      	adds	r7, #8
 8011fc0:	46bd      	mov	sp, r7
 8011fc2:	bd80      	pop	{r7, pc}
 8011fc4:	0801ebec 	.word	0x0801ebec

08011fc8 <_ZN8touchgfx8LCD16bppD0Ev>:
 8011fc8:	b580      	push	{r7, lr}
 8011fca:	b082      	sub	sp, #8
 8011fcc:	af00      	add	r7, sp, #0
 8011fce:	6078      	str	r0, [r7, #4]
 8011fd0:	6878      	ldr	r0, [r7, #4]
 8011fd2:	f7ff ffe7 	bl	8011fa4 <_ZN8touchgfx8LCD16bppD1Ev>
 8011fd6:	2178      	movs	r1, #120	; 0x78
 8011fd8:	6878      	ldr	r0, [r7, #4]
 8011fda:	f008 fa43 	bl	801a464 <_ZdlPvj>
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	4618      	mov	r0, r3
 8011fe2:	3708      	adds	r7, #8
 8011fe4:	46bd      	mov	sp, r7
 8011fe6:	bd80      	pop	{r7, pc}

08011fe8 <_Z41__static_initialization_and_destruction_0ii>:
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
}
 8011fe8:	b580      	push	{r7, lr}
 8011fea:	b084      	sub	sp, #16
 8011fec:	af02      	add	r7, sp, #8
 8011fee:	6078      	str	r0, [r7, #4]
 8011ff0:	6039      	str	r1, [r7, #0]
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	2b01      	cmp	r3, #1
 8011ff6:	d119      	bne.n	801202c <_Z41__static_initialization_and_destruction_0ii+0x44>
 8011ff8:	683b      	ldr	r3, [r7, #0]
 8011ffa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011ffe:	4293      	cmp	r3, r2
 8012000:	d114      	bne.n	801202c <_Z41__static_initialization_and_destruction_0ii+0x44>
static STM32TouchController tc;
 8012002:	4818      	ldr	r0, [pc, #96]	; (8012064 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8012004:	f7ff ffbc 	bl	8011f80 <_ZN20STM32TouchControllerC1Ev>
static STM32DMA dma;
 8012008:	4817      	ldr	r0, [pc, #92]	; (8012068 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 801200a:	f7ff fb39 	bl	8011680 <_ZN8STM32DMAC1Ev>
static LCD16bpp display;
 801200e:	4817      	ldr	r0, [pc, #92]	; (801206c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8012010:	f006 fefc 	bl	8018e0c <_ZN8touchgfx8LCD16bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 800, 480);
 8012014:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8012018:	9301      	str	r3, [sp, #4]
 801201a:	f44f 7348 	mov.w	r3, #800	; 0x320
 801201e:	9300      	str	r3, [sp, #0]
 8012020:	4b10      	ldr	r3, [pc, #64]	; (8012064 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8012022:	4a12      	ldr	r2, [pc, #72]	; (801206c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8012024:	4910      	ldr	r1, [pc, #64]	; (8012068 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8012026:	4812      	ldr	r0, [pc, #72]	; (8012070 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8012028:	f7ff ff7e 	bl	8011f28 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 801202c:	687b      	ldr	r3, [r7, #4]
 801202e:	2b00      	cmp	r3, #0
 8012030:	d113      	bne.n	801205a <_Z41__static_initialization_and_destruction_0ii+0x72>
 8012032:	683b      	ldr	r3, [r7, #0]
 8012034:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012038:	4293      	cmp	r3, r2
 801203a:	d10e      	bne.n	801205a <_Z41__static_initialization_and_destruction_0ii+0x72>
 801203c:	480c      	ldr	r0, [pc, #48]	; (8012070 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 801203e:	f7fe f8ed 	bl	801021c <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 8012042:	480c      	ldr	r0, [pc, #48]	; (8012074 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8012044:	f7fd f970 	bl	800f328 <_ZN23ApplicationFontProviderD1Ev>
static LCD16bpp display;
 8012048:	4808      	ldr	r0, [pc, #32]	; (801206c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 801204a:	f7ff ffab 	bl	8011fa4 <_ZN8touchgfx8LCD16bppD1Ev>
static STM32DMA dma;
 801204e:	4806      	ldr	r0, [pc, #24]	; (8012068 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8012050:	f7ff fb40 	bl	80116d4 <_ZN8STM32DMAD1Ev>
static STM32TouchController tc;
 8012054:	4803      	ldr	r0, [pc, #12]	; (8012064 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8012056:	f7fd fdf3 	bl	800fc40 <_ZN20STM32TouchControllerD1Ev>
}
 801205a:	bf00      	nop
 801205c:	3708      	adds	r7, #8
 801205e:	46bd      	mov	sp, r7
 8012060:	bd80      	pop	{r7, pc}
 8012062:	bf00      	nop
 8012064:	2001e1e4 	.word	0x2001e1e4
 8012068:	2001e1e8 	.word	0x2001e1e8
 801206c:	2001ef88 	.word	0x2001ef88
 8012070:	2001f000 	.word	0x2001f000
 8012074:	20000028 	.word	0x20000028

08012078 <_GLOBAL__sub_I_touchgfx_init>:
 8012078:	b580      	push	{r7, lr}
 801207a:	af00      	add	r7, sp, #0
 801207c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8012080:	2001      	movs	r0, #1
 8012082:	f7ff ffb1 	bl	8011fe8 <_Z41__static_initialization_and_destruction_0ii>
 8012086:	bd80      	pop	{r7, pc}

08012088 <_GLOBAL__sub_D_touchgfx_init>:
 8012088:	b580      	push	{r7, lr}
 801208a:	af00      	add	r7, sp, #0
 801208c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8012090:	2000      	movs	r0, #0
 8012092:	f7ff ffa9 	bl	8011fe8 <_Z41__static_initialization_and_destruction_0ii>
 8012096:	bd80      	pop	{r7, pc}

08012098 <_ZN8touchgfx3HAL18getLCDRefreshCountEv>:
    uint32_t getLCDRefreshCount()
 8012098:	b480      	push	{r7}
 801209a:	b083      	sub	sp, #12
 801209c:	af00      	add	r7, sp, #0
 801209e:	6078      	str	r0, [r7, #4]
        return vSyncForFrame;
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
    }
 80120a6:	4618      	mov	r0, r3
 80120a8:	370c      	adds	r7, #12
 80120aa:	46bd      	mov	sp, r7
 80120ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120b0:	4770      	bx	lr
	...

080120b4 <_ZN8touchgfx15VideoControllerD1Ev>:
        STOP,      ///< Stop the video
        SET_REPEAT ///< Set repeat mode
    };

    /** Virtual destructor. */
    virtual ~VideoController()
 80120b4:	b480      	push	{r7}
 80120b6:	b083      	sub	sp, #12
 80120b8:	af00      	add	r7, sp, #0
 80120ba:	6078      	str	r0, [r7, #4]
    {
 80120bc:	4a04      	ldr	r2, [pc, #16]	; (80120d0 <_ZN8touchgfx15VideoControllerD1Ev+0x1c>)
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	601a      	str	r2, [r3, #0]
    }
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	4618      	mov	r0, r3
 80120c6:	370c      	adds	r7, #12
 80120c8:	46bd      	mov	sp, r7
 80120ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120ce:	4770      	bx	lr
 80120d0:	0801e244 	.word	0x0801e244

080120d4 <_ZN8touchgfx15VideoControllerD0Ev>:
    virtual ~VideoController()
 80120d4:	b580      	push	{r7, lr}
 80120d6:	b082      	sub	sp, #8
 80120d8:	af00      	add	r7, sp, #0
 80120da:	6078      	str	r0, [r7, #4]
    }
 80120dc:	6878      	ldr	r0, [r7, #4]
 80120de:	f7ff ffe9 	bl	80120b4 <_ZN8touchgfx15VideoControllerD1Ev>
 80120e2:	2104      	movs	r1, #4
 80120e4:	6878      	ldr	r0, [r7, #4]
 80120e6:	f008 f9bd 	bl	801a464 <_ZdlPvj>
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	4618      	mov	r0, r3
 80120ee:	3708      	adds	r7, #8
 80120f0:	46bd      	mov	sp, r7
 80120f2:	bd80      	pop	{r7, pc}

080120f4 <_ZN8touchgfx11VideoWidget14setVideoBufferEPh>:
     * Set video buffer data.
     * Only used when video frames are decoded to a buffer and not directly to the framebuffer.
     *
     * @param [in] videoBuffer Video buffer.
     */
    void setVideoBuffer(uint8_t* const videoBuffer)
 80120f4:	b480      	push	{r7}
 80120f6:	b083      	sub	sp, #12
 80120f8:	af00      	add	r7, sp, #0
 80120fa:	6078      	str	r0, [r7, #4]
 80120fc:	6039      	str	r1, [r7, #0]
    {
        buffer = videoBuffer;
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	683a      	ldr	r2, [r7, #0]
 8012102:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8012104:	bf00      	nop
 8012106:	370c      	adds	r7, #12
 8012108:	46bd      	mov	sp, r7
 801210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801210e:	4770      	bx	lr

08012110 <_ZN8touchgfx11VideoWidget20setVideoBufferFormatENS_6Bitmap12BitmapFormatEss>:
     *
     * @param bufferFormat Format of the videoBuffer (RGB565 or RGB888)
     * @param width  Width of the videoBuffer in pixels
     * @param height Height of the videoBuffer in pixels
     */
    void setVideoBufferFormat(Bitmap::BitmapFormat bufferFormat, int16_t width, int16_t height)
 8012110:	b480      	push	{r7}
 8012112:	b085      	sub	sp, #20
 8012114:	af00      	add	r7, sp, #0
 8012116:	60f8      	str	r0, [r7, #12]
 8012118:	4608      	mov	r0, r1
 801211a:	4611      	mov	r1, r2
 801211c:	461a      	mov	r2, r3
 801211e:	4603      	mov	r3, r0
 8012120:	72fb      	strb	r3, [r7, #11]
 8012122:	460b      	mov	r3, r1
 8012124:	813b      	strh	r3, [r7, #8]
 8012126:	4613      	mov	r3, r2
 8012128:	80fb      	strh	r3, [r7, #6]
    {
        format = bufferFormat;
 801212a:	68fb      	ldr	r3, [r7, #12]
 801212c:	7afa      	ldrb	r2, [r7, #11]
 801212e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        bufferWidth = width;
 8012132:	68fb      	ldr	r3, [r7, #12]
 8012134:	893a      	ldrh	r2, [r7, #8]
 8012136:	86da      	strh	r2, [r3, #54]	; 0x36
        bufferHeight = height;
 8012138:	68fb      	ldr	r3, [r7, #12]
 801213a:	88fa      	ldrh	r2, [r7, #6]
 801213c:	871a      	strh	r2, [r3, #56]	; 0x38
    }
 801213e:	bf00      	nop
 8012140:	3714      	adds	r7, #20
 8012142:	46bd      	mov	sp, r7
 8012144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012148:	4770      	bx	lr
	...

0801214c <__NVIC_EnableIRQ>:
{
 801214c:	b480      	push	{r7}
 801214e:	b083      	sub	sp, #12
 8012150:	af00      	add	r7, sp, #0
 8012152:	4603      	mov	r3, r0
 8012154:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8012156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801215a:	2b00      	cmp	r3, #0
 801215c:	db0b      	blt.n	8012176 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801215e:	79fb      	ldrb	r3, [r7, #7]
 8012160:	f003 021f 	and.w	r2, r3, #31
 8012164:	4907      	ldr	r1, [pc, #28]	; (8012184 <__NVIC_EnableIRQ+0x38>)
 8012166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801216a:	095b      	lsrs	r3, r3, #5
 801216c:	2001      	movs	r0, #1
 801216e:	fa00 f202 	lsl.w	r2, r0, r2
 8012172:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8012176:	bf00      	nop
 8012178:	370c      	adds	r7, #12
 801217a:	46bd      	mov	sp, r7
 801217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012180:	4770      	bx	lr
 8012182:	bf00      	nop
 8012184:	e000e100 	.word	0xe000e100

08012188 <__NVIC_DisableIRQ>:
{
 8012188:	b480      	push	{r7}
 801218a:	b083      	sub	sp, #12
 801218c:	af00      	add	r7, sp, #0
 801218e:	4603      	mov	r3, r0
 8012190:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8012192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012196:	2b00      	cmp	r3, #0
 8012198:	db12      	blt.n	80121c0 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801219a:	79fb      	ldrb	r3, [r7, #7]
 801219c:	f003 021f 	and.w	r2, r3, #31
 80121a0:	490a      	ldr	r1, [pc, #40]	; (80121cc <__NVIC_DisableIRQ+0x44>)
 80121a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80121a6:	095b      	lsrs	r3, r3, #5
 80121a8:	2001      	movs	r0, #1
 80121aa:	fa00 f202 	lsl.w	r2, r0, r2
 80121ae:	3320      	adds	r3, #32
 80121b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80121b4:	f3bf 8f4f 	dsb	sy
}
 80121b8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80121ba:	f3bf 8f6f 	isb	sy
}
 80121be:	bf00      	nop
}
 80121c0:	bf00      	nop
 80121c2:	370c      	adds	r7, #12
 80121c4:	46bd      	mov	sp, r7
 80121c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121ca:	4770      	bx	lr
 80121cc:	e000e100 	.word	0xe000e100

080121d0 <__NVIC_SetPriority>:
{
 80121d0:	b480      	push	{r7}
 80121d2:	b083      	sub	sp, #12
 80121d4:	af00      	add	r7, sp, #0
 80121d6:	4603      	mov	r3, r0
 80121d8:	6039      	str	r1, [r7, #0]
 80121da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80121dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80121e0:	2b00      	cmp	r3, #0
 80121e2:	db0a      	blt.n	80121fa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80121e4:	683b      	ldr	r3, [r7, #0]
 80121e6:	b2da      	uxtb	r2, r3
 80121e8:	490c      	ldr	r1, [pc, #48]	; (801221c <__NVIC_SetPriority+0x4c>)
 80121ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80121ee:	0112      	lsls	r2, r2, #4
 80121f0:	b2d2      	uxtb	r2, r2
 80121f2:	440b      	add	r3, r1
 80121f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80121f8:	e00a      	b.n	8012210 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80121fa:	683b      	ldr	r3, [r7, #0]
 80121fc:	b2da      	uxtb	r2, r3
 80121fe:	4908      	ldr	r1, [pc, #32]	; (8012220 <__NVIC_SetPriority+0x50>)
 8012200:	79fb      	ldrb	r3, [r7, #7]
 8012202:	f003 030f 	and.w	r3, r3, #15
 8012206:	3b04      	subs	r3, #4
 8012208:	0112      	lsls	r2, r2, #4
 801220a:	b2d2      	uxtb	r2, r2
 801220c:	440b      	add	r3, r1
 801220e:	761a      	strb	r2, [r3, #24]
}
 8012210:	bf00      	nop
 8012212:	370c      	adds	r7, #12
 8012214:	46bd      	mov	sp, r7
 8012216:	f85d 7b04 	ldr.w	r7, [sp], #4
 801221a:	4770      	bx	lr
 801221c:	e000e100 	.word	0xe000e100
 8012220:	e000ed00 	.word	0xe000ed00

08012224 <SCB_CleanInvalidateDCache>:
{
 8012224:	b480      	push	{r7}
 8012226:	b085      	sub	sp, #20
 8012228:	af00      	add	r7, sp, #0
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 801222a:	4b21      	ldr	r3, [pc, #132]	; (80122b0 <SCB_CleanInvalidateDCache+0x8c>)
 801222c:	2200      	movs	r2, #0
 801222e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8012232:	f3bf 8f4f 	dsb	sy
}
 8012236:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8012238:	4b1d      	ldr	r3, [pc, #116]	; (80122b0 <SCB_CleanInvalidateDCache+0x8c>)
 801223a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801223e:	607b      	str	r3, [r7, #4]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8012240:	687b      	ldr	r3, [r7, #4]
 8012242:	0b5b      	lsrs	r3, r3, #13
 8012244:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8012248:	60fb      	str	r3, [r7, #12]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 801224a:	687b      	ldr	r3, [r7, #4]
 801224c:	08db      	lsrs	r3, r3, #3
 801224e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8012252:	60bb      	str	r3, [r7, #8]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8012254:	68fb      	ldr	r3, [r7, #12]
 8012256:	015a      	lsls	r2, r3, #5
 8012258:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 801225c:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 801225e:	68ba      	ldr	r2, [r7, #8]
 8012260:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8012262:	4913      	ldr	r1, [pc, #76]	; (80122b0 <SCB_CleanInvalidateDCache+0x8c>)
 8012264:	4313      	orrs	r3, r2
 8012266:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 801226a:	68bb      	ldr	r3, [r7, #8]
 801226c:	1e5a      	subs	r2, r3, #1
 801226e:	60ba      	str	r2, [r7, #8]
 8012270:	2b00      	cmp	r3, #0
 8012272:	bf14      	ite	ne
 8012274:	2301      	movne	r3, #1
 8012276:	2300      	moveq	r3, #0
 8012278:	b2db      	uxtb	r3, r3
 801227a:	2b00      	cmp	r3, #0
 801227c:	d000      	beq.n	8012280 <SCB_CleanInvalidateDCache+0x5c>
      do {
 801227e:	e7e9      	b.n	8012254 <SCB_CleanInvalidateDCache+0x30>
    } while(sets-- != 0U);
 8012280:	68fb      	ldr	r3, [r7, #12]
 8012282:	1e5a      	subs	r2, r3, #1
 8012284:	60fa      	str	r2, [r7, #12]
 8012286:	2b00      	cmp	r3, #0
 8012288:	bf14      	ite	ne
 801228a:	2301      	movne	r3, #1
 801228c:	2300      	moveq	r3, #0
 801228e:	b2db      	uxtb	r3, r3
 8012290:	2b00      	cmp	r3, #0
 8012292:	d000      	beq.n	8012296 <SCB_CleanInvalidateDCache+0x72>
    do {
 8012294:	e7d9      	b.n	801224a <SCB_CleanInvalidateDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8012296:	f3bf 8f4f 	dsb	sy
}
 801229a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801229c:	f3bf 8f6f 	isb	sy
}
 80122a0:	bf00      	nop
}
 80122a2:	bf00      	nop
 80122a4:	3714      	adds	r7, #20
 80122a6:	46bd      	mov	sp, r7
 80122a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122ac:	4770      	bx	lr
 80122ae:	bf00      	nop
 80122b0:	e000ed00 	.word	0xe000ed00

080122b4 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
    LOCATION_PRAGMA_NOLOAD("TouchGFX_Framebuffer")
    uint32_t frameBuf[(800 * 480 * 2 + 3) / 4] LOCATION_ATTRIBUTE_NOLOAD("TouchGFX_Framebuffer");
}

void TouchGFXGeneratedHAL::initialize()
{
 80122b4:	b5b0      	push	{r4, r5, r7, lr}
 80122b6:	b082      	sub	sp, #8
 80122b8:	af00      	add	r7, sp, #0
 80122ba:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	4618      	mov	r0, r3
 80122c0:	f003 f93d 	bl	801553e <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 80122c4:	687d      	ldr	r5, [r7, #4]
 80122c6:	687b      	ldr	r3, [r7, #4]
 80122c8:	681b      	ldr	r3, [r3, #0]
 80122ca:	3364      	adds	r3, #100	; 0x64
 80122cc:	681c      	ldr	r4, [r3, #0]
 80122ce:	f004 fe89 	bl	8016fe4 <_ZN8touchgfx11Application11getInstanceEv>
 80122d2:	4603      	mov	r3, r0
 80122d4:	4619      	mov	r1, r3
 80122d6:	4628      	mov	r0, r5
 80122d8:	47a0      	blx	r4
    setFrameBufferStartAddresses((void*)frameBuf, (void*)0, (void*)0);
 80122da:	6878      	ldr	r0, [r7, #4]
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	681b      	ldr	r3, [r3, #0]
 80122e0:	3388      	adds	r3, #136	; 0x88
 80122e2:	681c      	ldr	r4, [r3, #0]
 80122e4:	2300      	movs	r3, #0
 80122e6:	2200      	movs	r2, #0
 80122e8:	4907      	ldr	r1, [pc, #28]	; (8012308 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x54>)
 80122ea:	47a0      	blx	r4
    /*
     * Add hardware decoder to video controller
     */
    videoController.addDecoder(mjpegdecoder1, 0);
 80122ec:	2200      	movs	r2, #0
 80122ee:	4907      	ldr	r1, [pc, #28]	; (801230c <_ZN20TouchGFXGeneratedHAL10initializeEv+0x58>)
 80122f0:	4807      	ldr	r0, [pc, #28]	; (8012310 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x5c>)
 80122f2:	f000 f92f 	bl	8012554 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10addDecoderER12MJPEGDecoderm>
    videoController.setRGBBuffer((uint8_t*)videoRGBBuffer, sizeof(videoRGBBuffer));
 80122f6:	4a07      	ldr	r2, [pc, #28]	; (8012314 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x60>)
 80122f8:	4907      	ldr	r1, [pc, #28]	; (8012318 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x64>)
 80122fa:	4805      	ldr	r0, [pc, #20]	; (8012310 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x5c>)
 80122fc:	f000 f94a 	bl	8012594 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setRGBBufferEPhj>
}
 8012300:	bf00      	nop
 8012302:	3708      	adds	r7, #8
 8012304:	46bd      	mov	sp, r7
 8012306:	bdb0      	pop	{r4, r5, r7, pc}
 8012308:	c00bb800 	.word	0xc00bb800
 801230c:	2001f07c 	.word	0x2001f07c
 8012310:	2001f0c0 	.word	0x2001f0c0
 8012314:	000bb800 	.word	0x000bb800
 8012318:	c0000000 	.word	0xc0000000

0801231c <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 801231c:	b580      	push	{r7, lr}
 801231e:	b082      	sub	sp, #8
 8012320:	af00      	add	r7, sp, #0
 8012322:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 8012324:	2109      	movs	r1, #9
 8012326:	205a      	movs	r0, #90	; 0x5a
 8012328:	f7ff ff52 	bl	80121d0 <__NVIC_SetPriority>
}
 801232c:	bf00      	nop
 801232e:	3708      	adds	r7, #8
 8012330:	46bd      	mov	sp, r7
 8012332:	bd80      	pop	{r7, pc}

08012334 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 8012334:	b580      	push	{r7, lr}
 8012336:	b082      	sub	sp, #8
 8012338:	af00      	add	r7, sp, #0
 801233a:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 801233c:	205a      	movs	r0, #90	; 0x5a
 801233e:	f7ff ff05 	bl	801214c <__NVIC_EnableIRQ>
}
 8012342:	bf00      	nop
 8012344:	3708      	adds	r7, #8
 8012346:	46bd      	mov	sp, r7
 8012348:	bd80      	pop	{r7, pc}

0801234a <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 801234a:	b580      	push	{r7, lr}
 801234c:	b082      	sub	sp, #8
 801234e:	af00      	add	r7, sp, #0
 8012350:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 8012352:	205a      	movs	r0, #90	; 0x5a
 8012354:	f7ff ff18 	bl	8012188 <__NVIC_DisableIRQ>
}
 8012358:	bf00      	nop
 801235a:	3708      	adds	r7, #8
 801235c:	46bd      	mov	sp, r7
 801235e:	bd80      	pop	{r7, pc}

08012360 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 8012360:	b480      	push	{r7}
 8012362:	b083      	sub	sp, #12
 8012364:	af00      	add	r7, sp, #0
 8012366:	6078      	str	r0, [r7, #4]
}
 8012368:	bf00      	nop
 801236a:	370c      	adds	r7, #12
 801236c:	46bd      	mov	sp, r7
 801236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012372:	4770      	bx	lr

08012374 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:

bool TouchGFXGeneratedHAL::beginFrame()
{
 8012374:	b580      	push	{r7, lr}
 8012376:	b082      	sub	sp, #8
 8012378:	af00      	add	r7, sp, #0
 801237a:	6078      	str	r0, [r7, #4]
    return HAL::beginFrame();
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	4618      	mov	r0, r3
 8012380:	f003 f8c4 	bl	801550c <_ZN8touchgfx3HAL10beginFrameEv>
 8012384:	4603      	mov	r3, r0
}
 8012386:	4618      	mov	r0, r3
 8012388:	3708      	adds	r7, #8
 801238a:	46bd      	mov	sp, r7
 801238c:	bd80      	pop	{r7, pc}
	...

08012390 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:

void TouchGFXGeneratedHAL::endFrame()
{
 8012390:	b580      	push	{r7, lr}
 8012392:	b082      	sub	sp, #8
 8012394:	af00      	add	r7, sp, #0
 8012396:	6078      	str	r0, [r7, #4]
    HAL::endFrame();
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	4618      	mov	r0, r3
 801239c:	f003 f8c2 	bl	8015524 <_ZN8touchgfx3HAL8endFrameEv>
    videoController.endFrame();
 80123a0:	4803      	ldr	r0, [pc, #12]	; (80123b0 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x20>)
 80123a2:	f000 f90d 	bl	80125c0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE8endFrameEv>
}
 80123a6:	bf00      	nop
 80123a8:	3708      	adds	r7, #8
 80123aa:	46bd      	mov	sp, r7
 80123ac:	bd80      	pop	{r7, pc}
 80123ae:	bf00      	nop
 80123b0:	2001f0c0 	.word	0x2001f0c0

080123b4 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:
    fbPtr += rect.y * lcd().framebufferStride() + rect.x * 2;
    return fbPtr;
}

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 80123b4:	b480      	push	{r7}
 80123b6:	b083      	sub	sp, #12
 80123b8:	af00      	add	r7, sp, #0
 80123ba:	6078      	str	r0, [r7, #4]
    return (uint16_t*)frameBuf;
 80123bc:	4b03      	ldr	r3, [pc, #12]	; (80123cc <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
}
 80123be:	4618      	mov	r0, r3
 80123c0:	370c      	adds	r7, #12
 80123c2:	46bd      	mov	sp, r7
 80123c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123c8:	4770      	bx	lr
 80123ca:	bf00      	nop
 80123cc:	c00bb800 	.word	0xc00bb800

080123d0 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 80123d0:	b480      	push	{r7}
 80123d2:	b083      	sub	sp, #12
 80123d4:	af00      	add	r7, sp, #0
 80123d6:	6078      	str	r0, [r7, #4]
 80123d8:	6039      	str	r1, [r7, #0]
    //setTFTFrameBuffer() not used for selected display interface
}
 80123da:	bf00      	nop
 80123dc:	370c      	adds	r7, #12
 80123de:	46bd      	mov	sp, r7
 80123e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123e4:	4770      	bx	lr

080123e6 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 80123e6:	b580      	push	{r7, lr}
 80123e8:	b082      	sub	sp, #8
 80123ea:	af00      	add	r7, sp, #0
 80123ec:	6078      	str	r0, [r7, #4]
 80123ee:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	6839      	ldr	r1, [r7, #0]
 80123f4:	4618      	mov	r0, r3
 80123f6:	f003 f852 	bl	801549e <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 80123fa:	bf00      	nop
 80123fc:	3708      	adds	r7, #8
 80123fe:	46bd      	mov	sp, r7
 8012400:	bd80      	pop	{r7, pc}

08012402 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8012402:	b580      	push	{r7, lr}
 8012404:	b084      	sub	sp, #16
 8012406:	af00      	add	r7, sp, #0
 8012408:	60f8      	str	r0, [r7, #12]
 801240a:	60b9      	str	r1, [r7, #8]
 801240c:	607a      	str	r2, [r7, #4]
 801240e:	603b      	str	r3, [r7, #0]
    return HAL::blockCopy(dest, src, numBytes);
 8012410:	68f8      	ldr	r0, [r7, #12]
 8012412:	683b      	ldr	r3, [r7, #0]
 8012414:	687a      	ldr	r2, [r7, #4]
 8012416:	68b9      	ldr	r1, [r7, #8]
 8012418:	f003 f9ad 	bl	8015776 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 801241c:	4603      	mov	r3, r0
}
 801241e:	4618      	mov	r0, r3
 8012420:	3710      	adds	r7, #16
 8012422:	46bd      	mov	sp, r7
 8012424:	bd80      	pop	{r7, pc}
	...

08012428 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv>:

void TouchGFXGeneratedHAL::InvalidateCache()
{
 8012428:	b580      	push	{r7, lr}
 801242a:	b082      	sub	sp, #8
 801242c:	af00      	add	r7, sp, #0
 801242e:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8012430:	4b08      	ldr	r3, [pc, #32]	; (8012454 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x2c>)
 8012432:	695b      	ldr	r3, [r3, #20]
 8012434:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8012438:	2b00      	cmp	r3, #0
 801243a:	bf14      	ite	ne
 801243c:	2301      	movne	r3, #1
 801243e:	2300      	moveq	r3, #0
 8012440:	b2db      	uxtb	r3, r3
 8012442:	2b00      	cmp	r3, #0
 8012444:	d001      	beq.n	801244a <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x22>
    {
        SCB_CleanInvalidateDCache();
 8012446:	f7ff feed 	bl	8012224 <SCB_CleanInvalidateDCache>
    }
}
 801244a:	bf00      	nop
 801244c:	3708      	adds	r7, #8
 801244e:	46bd      	mov	sp, r7
 8012450:	bd80      	pop	{r7, pc}
 8012452:	bf00      	nop
 8012454:	e000ed00 	.word	0xe000ed00

08012458 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:

void TouchGFXGeneratedHAL::FlushCache()
{
 8012458:	b580      	push	{r7, lr}
 801245a:	b082      	sub	sp, #8
 801245c:	af00      	add	r7, sp, #0
 801245e:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8012460:	4b08      	ldr	r3, [pc, #32]	; (8012484 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x2c>)
 8012462:	695b      	ldr	r3, [r3, #20]
 8012464:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8012468:	2b00      	cmp	r3, #0
 801246a:	bf14      	ite	ne
 801246c:	2301      	movne	r3, #1
 801246e:	2300      	moveq	r3, #0
 8012470:	b2db      	uxtb	r3, r3
 8012472:	2b00      	cmp	r3, #0
 8012474:	d001      	beq.n	801247a <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x22>
    {
        SCB_CleanInvalidateDCache();
 8012476:	f7ff fed5 	bl	8012224 <SCB_CleanInvalidateDCache>
    }
}
 801247a:	bf00      	nop
 801247c:	3708      	adds	r7, #8
 801247e:	46bd      	mov	sp, r7
 8012480:	bd80      	pop	{r7, pc}
 8012482:	bf00      	nop
 8012484:	e000ed00 	.word	0xe000ed00

08012488 <_ZN8touchgfx15VideoControllerC1Ev>:
class VideoController
 8012488:	b480      	push	{r7}
 801248a:	b083      	sub	sp, #12
 801248c:	af00      	add	r7, sp, #0
 801248e:	6078      	str	r0, [r7, #4]
 8012490:	4a04      	ldr	r2, [pc, #16]	; (80124a4 <_ZN8touchgfx15VideoControllerC1Ev+0x1c>)
 8012492:	687b      	ldr	r3, [r7, #4]
 8012494:	601a      	str	r2, [r3, #0]
 8012496:	687b      	ldr	r3, [r7, #4]
 8012498:	4618      	mov	r0, r3
 801249a:	370c      	adds	r7, #12
 801249c:	46bd      	mov	sp, r7
 801249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124a2:	4770      	bx	lr
 80124a4:	0801e244 	.word	0x0801e244

080124a8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EEC1Ev>:

template <uint32_t no_streams, uint32_t width, uint32_t height, uint32_t stride, touchgfx::Bitmap::BitmapFormat output_format>
class DedicatedBufferController : public touchgfx::VideoController
{
public:
    DedicatedBufferController()
 80124a8:	b5b0      	push	{r4, r5, r7, lr}
 80124aa:	b082      	sub	sp, #8
 80124ac:	af00      	add	r7, sp, #0
 80124ae:	6078      	str	r0, [r7, #4]
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 80124b0:	687b      	ldr	r3, [r7, #4]
 80124b2:	4618      	mov	r0, r3
 80124b4:	f7ff ffe8 	bl	8012488 <_ZN8touchgfx15VideoControllerC1Ev>
 80124b8:	4a25      	ldr	r2, [pc, #148]	; (8012550 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EEC1Ev+0xa8>)
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	601a      	str	r2, [r3, #0]
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	330c      	adds	r3, #12
 80124c2:	2400      	movs	r4, #0
 80124c4:	461d      	mov	r5, r3
 80124c6:	2c00      	cmp	r4, #0
 80124c8:	db05      	blt.n	80124d6 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EEC1Ev+0x2e>
 80124ca:	4628      	mov	r0, r5
 80124cc:	f000 f8bd 	bl	801264a <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE6StreamC1Ev>
 80124d0:	3524      	adds	r5, #36	; 0x24
 80124d2:	3c01      	subs	r4, #1
 80124d4:	e7f7      	b.n	80124c6 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EEC1Ev+0x1e>
 80124d6:	687b      	ldr	r3, [r7, #4]
 80124d8:	2200      	movs	r2, #0
 80124da:	631a      	str	r2, [r3, #48]	; 0x30
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	2200      	movs	r2, #0
 80124e0:	635a      	str	r2, [r3, #52]	; 0x34
 80124e2:	687b      	ldr	r3, [r7, #4]
 80124e4:	2200      	movs	r2, #0
 80124e6:	639a      	str	r2, [r3, #56]	; 0x38
 80124e8:	687b      	ldr	r3, [r7, #4]
 80124ea:	2200      	movs	r2, #0
 80124ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	2201      	movs	r2, #1
 80124f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80124f8:	687b      	ldr	r3, [r7, #4]
 80124fa:	2200      	movs	r2, #0
 80124fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8012500:	687b      	ldr	r3, [r7, #4]
 8012502:	2200      	movs	r2, #0
 8012504:	641a      	str	r2, [r3, #64]	; 0x40
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	2200      	movs	r2, #0
 801250a:	645a      	str	r2, [r3, #68]	; 0x44
    {
        assert((no_streams > 0) && "Video: Number of streams zero!");

        // Clear arrays
        memset(decodeBuffers, 0, sizeof(decodeBuffers));
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	3308      	adds	r3, #8
 8012510:	2204      	movs	r2, #4
 8012512:	2100      	movs	r1, #0
 8012514:	4618      	mov	r0, r3
 8012516:	f008 f851 	bl	801a5bc <memset>
        memset(mjpegDecoders, 0, sizeof(mjpegDecoders));
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	3304      	adds	r3, #4
 801251e:	2204      	movs	r2, #4
 8012520:	2100      	movs	r1, #0
 8012522:	4618      	mov	r0, r3
 8012524:	f008 f84a 	bl	801a5bc <memset>

        // Initialize synchronization primitives
        semDecode = SEM_CREATE(); // Binary semaphore
 8012528:	2200      	movs	r2, #0
 801252a:	2100      	movs	r1, #0
 801252c:	2001      	movs	r0, #1
 801252e:	f7f9 fa27 	bl	800b980 <osSemaphoreNew>
 8012532:	4602      	mov	r2, r0
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	641a      	str	r2, [r3, #64]	; 0x40
        mutexBuffers = MUTEX_CREATE();
 8012538:	2000      	movs	r0, #0
 801253a:	f7f9 f8d9 	bl	800b6f0 <osMutexNew>
 801253e:	4602      	mov	r2, r0
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	645a      	str	r2, [r3, #68]	; 0x44
    }
 8012544:	687b      	ldr	r3, [r7, #4]
 8012546:	4618      	mov	r0, r3
 8012548:	3708      	adds	r7, #8
 801254a:	46bd      	mov	sp, r7
 801254c:	bdb0      	pop	{r4, r5, r7, pc}
 801254e:	bf00      	nop
 8012550:	0801e204 	.word	0x0801e204

08012554 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10addDecoderER12MJPEGDecoderm>:
        bufferRGB = buffer;
        topBufferRGB = bufferRGB;
        sizeBufferRGB = sizeOfBuffer;
    }

    void addDecoder(MJPEGDecoder& decoder, uint32_t index)
 8012554:	b580      	push	{r7, lr}
 8012556:	b084      	sub	sp, #16
 8012558:	af00      	add	r7, sp, #0
 801255a:	60f8      	str	r0, [r7, #12]
 801255c:	60b9      	str	r1, [r7, #8]
 801255e:	607a      	str	r2, [r7, #4]
    {
        // Running in UI thread / main

        assert(index < no_streams);
 8012560:	687b      	ldr	r3, [r7, #4]
 8012562:	2b00      	cmp	r3, #0
 8012564:	d006      	beq.n	8012574 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10addDecoderER12MJPEGDecoderm+0x20>
 8012566:	4b08      	ldr	r3, [pc, #32]	; (8012588 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10addDecoderER12MJPEGDecoderm+0x34>)
 8012568:	4a08      	ldr	r2, [pc, #32]	; (801258c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10addDecoderER12MJPEGDecoderm+0x38>)
 801256a:	f240 1103 	movw	r1, #259	; 0x103
 801256e:	4808      	ldr	r0, [pc, #32]	; (8012590 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10addDecoderER12MJPEGDecoderm+0x3c>)
 8012570:	f007 ffa6 	bl	801a4c0 <__assert_func>
        mjpegDecoders[index] = &decoder;
 8012574:	68fa      	ldr	r2, [r7, #12]
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	009b      	lsls	r3, r3, #2
 801257a:	4413      	add	r3, r2
 801257c:	68ba      	ldr	r2, [r7, #8]
 801257e:	605a      	str	r2, [r3, #4]
    }
 8012580:	bf00      	nop
 8012582:	3710      	adds	r7, #16
 8012584:	46bd      	mov	sp, r7
 8012586:	bd80      	pop	{r7, pc}
 8012588:	0801c63c 	.word	0x0801c63c
 801258c:	0801c650 	.word	0x0801c650
 8012590:	0801c7b8 	.word	0x0801c7b8

08012594 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setRGBBufferEPhj>:
    virtual void setRGBBuffer(uint8_t* buffer, size_t sizeOfBuffer)
 8012594:	b480      	push	{r7}
 8012596:	b085      	sub	sp, #20
 8012598:	af00      	add	r7, sp, #0
 801259a:	60f8      	str	r0, [r7, #12]
 801259c:	60b9      	str	r1, [r7, #8]
 801259e:	607a      	str	r2, [r7, #4]
        bufferRGB = buffer;
 80125a0:	68fb      	ldr	r3, [r7, #12]
 80125a2:	68ba      	ldr	r2, [r7, #8]
 80125a4:	631a      	str	r2, [r3, #48]	; 0x30
        topBufferRGB = bufferRGB;
 80125a6:	68fb      	ldr	r3, [r7, #12]
 80125a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80125aa:	68fb      	ldr	r3, [r7, #12]
 80125ac:	639a      	str	r2, [r3, #56]	; 0x38
        sizeBufferRGB = sizeOfBuffer;
 80125ae:	68fb      	ldr	r3, [r7, #12]
 80125b0:	687a      	ldr	r2, [r7, #4]
 80125b2:	635a      	str	r2, [r3, #52]	; 0x34
    }
 80125b4:	bf00      	nop
 80125b6:	3714      	adds	r7, #20
 80125b8:	46bd      	mov	sp, r7
 80125ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125be:	4770      	bx	lr

080125c0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE8endFrameEv>:

    void endFrame()
 80125c0:	b580      	push	{r7, lr}
 80125c2:	b084      	sub	sp, #16
 80125c4:	af00      	add	r7, sp, #0
 80125c6:	6078      	str	r0, [r7, #4]
    {
        // Running in UI thread

        // Check if we should invalidate in next frame
        for (uint32_t i = 0; i < no_streams; i++)
 80125c8:	2300      	movs	r3, #0
 80125ca:	60fb      	str	r3, [r7, #12]
 80125cc:	68fb      	ldr	r3, [r7, #12]
 80125ce:	2b00      	cmp	r3, #0
 80125d0:	d120      	bne.n	8012614 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE8endFrameEv+0x54>
        {
            Stream& stream = streams[i];
 80125d2:	68fa      	ldr	r2, [r7, #12]
 80125d4:	4613      	mov	r3, r2
 80125d6:	00db      	lsls	r3, r3, #3
 80125d8:	4413      	add	r3, r2
 80125da:	009b      	lsls	r3, r3, #2
 80125dc:	3308      	adds	r3, #8
 80125de:	687a      	ldr	r2, [r7, #4]
 80125e0:	4413      	add	r3, r2
 80125e2:	3304      	adds	r3, #4
 80125e4:	60bb      	str	r3, [r7, #8]
            if (stream.isPlaying || stream.isShowingOneFrame)
 80125e6:	68bb      	ldr	r3, [r7, #8]
 80125e8:	7f5b      	ldrb	r3, [r3, #29]
 80125ea:	2b00      	cmp	r3, #0
 80125ec:	d103      	bne.n	80125f6 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE8endFrameEv+0x36>
 80125ee:	68bb      	ldr	r3, [r7, #8]
 80125f0:	7f9b      	ldrb	r3, [r3, #30]
 80125f2:	2b00      	cmp	r3, #0
 80125f4:	d00a      	beq.n	801260c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE8endFrameEv+0x4c>
            {
                if (decodeForNextTick(stream))
 80125f6:	68b9      	ldr	r1, [r7, #8]
 80125f8:	6878      	ldr	r0, [r7, #4]
 80125fa:	f000 f85e 	bl	80126ba <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE17decodeForNextTickERNS3_6StreamE>
 80125fe:	4603      	mov	r3, r0
 8012600:	2b00      	cmp	r3, #0
 8012602:	d003      	beq.n	801260c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE8endFrameEv+0x4c>
                {
                    stream.doDecode = true;
 8012604:	68bb      	ldr	r3, [r7, #8]
 8012606:	2201      	movs	r2, #1
 8012608:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
        for (uint32_t i = 0; i < no_streams; i++)
 801260c:	68fb      	ldr	r3, [r7, #12]
 801260e:	3301      	adds	r3, #1
 8012610:	60fb      	str	r3, [r7, #12]
 8012612:	e7db      	b.n	80125cc <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE8endFrameEv+0xc>
                }
            }
        }

        // Mark next draw as first
        firstDrawThisFrame = true;
 8012614:	687b      	ldr	r3, [r7, #4]
 8012616:	2201      	movs	r2, #1
 8012618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        // Signal decoder thread to wake up
        SEM_POST(semDecode);
 801261c:	687b      	ldr	r3, [r7, #4]
 801261e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012620:	4618      	mov	r0, r3
 8012622:	f7f9 faaf 	bl	800bb84 <osSemaphoreRelease>
        // Unlock the buffer mutex. FreeRTOS does not allow unlocking a mutex you did not lock
        if (uiHasMutex)
 8012626:	687b      	ldr	r3, [r7, #4]
 8012628:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801262c:	2b00      	cmp	r3, #0
 801262e:	d008      	beq.n	8012642 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE8endFrameEv+0x82>
        {
            MUTEX_UNLOCK(mutexBuffers);
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012634:	4618      	mov	r0, r3
 8012636:	f7f9 f953 	bl	800b8e0 <osMutexRelease>
            uiHasMutex = false;
 801263a:	687b      	ldr	r3, [r7, #4]
 801263c:	2200      	movs	r2, #0
 801263e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        }
    }
 8012642:	bf00      	nop
 8012644:	3710      	adds	r7, #16
 8012646:	46bd      	mov	sp, r7
 8012648:	bd80      	pop	{r7, pc}

0801264a <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE6StreamC1Ev>:

private:
    class Stream
    {
    public:
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
 801264a:	b480      	push	{r7}
 801264c:	b083      	sub	sp, #12
 801264e:	af00      	add	r7, sp, #0
 8012650:	6078      	str	r0, [r7, #4]
                   seek_to_frame(0), skip_frames(0),
                   isActive(false), isPlaying(false), isShowingOneFrame(false),
                   doInvalidateOnNextTick(false), hasMoreFrames(false), repeat(true), doDecode(false) {}
 8012652:	687b      	ldr	r3, [r7, #4]
 8012654:	2200      	movs	r2, #0
 8012656:	601a      	str	r2, [r3, #0]
 8012658:	687b      	ldr	r3, [r7, #4]
 801265a:	2200      	movs	r2, #0
 801265c:	605a      	str	r2, [r3, #4]
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	2200      	movs	r2, #0
 8012662:	609a      	str	r2, [r3, #8]
 8012664:	687b      	ldr	r3, [r7, #4]
 8012666:	2200      	movs	r2, #0
 8012668:	60da      	str	r2, [r3, #12]
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	2200      	movs	r2, #0
 801266e:	611a      	str	r2, [r3, #16]
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	2200      	movs	r2, #0
 8012674:	615a      	str	r2, [r3, #20]
 8012676:	687b      	ldr	r3, [r7, #4]
 8012678:	2200      	movs	r2, #0
 801267a:	619a      	str	r2, [r3, #24]
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	2200      	movs	r2, #0
 8012680:	771a      	strb	r2, [r3, #28]
 8012682:	687b      	ldr	r3, [r7, #4]
 8012684:	2200      	movs	r2, #0
 8012686:	775a      	strb	r2, [r3, #29]
 8012688:	687b      	ldr	r3, [r7, #4]
 801268a:	2200      	movs	r2, #0
 801268c:	779a      	strb	r2, [r3, #30]
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	2200      	movs	r2, #0
 8012692:	77da      	strb	r2, [r3, #31]
 8012694:	687b      	ldr	r3, [r7, #4]
 8012696:	2200      	movs	r2, #0
 8012698:	f883 2020 	strb.w	r2, [r3, #32]
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	2201      	movs	r2, #1
 80126a0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	2200      	movs	r2, #0
 80126a8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 80126ac:	687b      	ldr	r3, [r7, #4]
 80126ae:	4618      	mov	r0, r3
 80126b0:	370c      	adds	r7, #12
 80126b2:	46bd      	mov	sp, r7
 80126b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126b8:	4770      	bx	lr

080126ba <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE17decodeForNextTickERNS3_6StreamE>:
    MUTEX_TYPE mutexBuffers;     // Mutual exclusion of the video buffers and stream data

    /**
     * Return true, if new video frame should be decoded for the next tick (keep video decode framerate low)
     */
    bool decodeForNextTick(Stream& stream)
 80126ba:	b480      	push	{r7}
 80126bc:	b083      	sub	sp, #12
 80126be:	af00      	add	r7, sp, #0
 80126c0:	6078      	str	r0, [r7, #4]
 80126c2:	6039      	str	r1, [r7, #0]
    {
        // Running in UI thread

        // Compare tickCount/frameCount to frame_rate_ticks/frame_rate_video
        if ((stream.tickCount * stream.frame_rate_video) >= (stream.frame_rate_ticks * stream.frameCount))
 80126c4:	683b      	ldr	r3, [r7, #0]
 80126c6:	689b      	ldr	r3, [r3, #8]
 80126c8:	683a      	ldr	r2, [r7, #0]
 80126ca:	68d2      	ldr	r2, [r2, #12]
 80126cc:	fb03 f202 	mul.w	r2, r3, r2
 80126d0:	683b      	ldr	r3, [r7, #0]
 80126d2:	691b      	ldr	r3, [r3, #16]
 80126d4:	6839      	ldr	r1, [r7, #0]
 80126d6:	6849      	ldr	r1, [r1, #4]
 80126d8:	fb01 f303 	mul.w	r3, r1, r3
 80126dc:	429a      	cmp	r2, r3
 80126de:	d322      	bcc.n	8012726 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE17decodeForNextTickERNS3_6StreamE+0x6c>
        {
            if (allowSkipFrames)
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80126e6:	2b00      	cmp	r3, #0
 80126e8:	d01b      	beq.n	8012722 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE17decodeForNextTickERNS3_6StreamE+0x68>
            {
                stream.skip_frames = (stream.tickCount * stream.frame_rate_video - stream.frame_rate_ticks * stream.frameCount) / stream.frame_rate_ticks;
 80126ea:	683b      	ldr	r3, [r7, #0]
 80126ec:	689b      	ldr	r3, [r3, #8]
 80126ee:	683a      	ldr	r2, [r7, #0]
 80126f0:	68d2      	ldr	r2, [r2, #12]
 80126f2:	fb03 f202 	mul.w	r2, r3, r2
 80126f6:	683b      	ldr	r3, [r7, #0]
 80126f8:	691b      	ldr	r3, [r3, #16]
 80126fa:	6839      	ldr	r1, [r7, #0]
 80126fc:	6849      	ldr	r1, [r1, #4]
 80126fe:	fb01 f303 	mul.w	r3, r1, r3
 8012702:	1ad2      	subs	r2, r2, r3
 8012704:	683b      	ldr	r3, [r7, #0]
 8012706:	691b      	ldr	r3, [r3, #16]
 8012708:	fbb2 f2f3 	udiv	r2, r2, r3
 801270c:	683b      	ldr	r3, [r7, #0]
 801270e:	619a      	str	r2, [r3, #24]
                if (stream.skip_frames > 0)
 8012710:	683b      	ldr	r3, [r7, #0]
 8012712:	699b      	ldr	r3, [r3, #24]
 8012714:	2b00      	cmp	r3, #0
 8012716:	d004      	beq.n	8012722 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE17decodeForNextTickERNS3_6StreamE+0x68>
                {
                    stream.skip_frames--;
 8012718:	683b      	ldr	r3, [r7, #0]
 801271a:	699b      	ldr	r3, [r3, #24]
 801271c:	1e5a      	subs	r2, r3, #1
 801271e:	683b      	ldr	r3, [r7, #0]
 8012720:	619a      	str	r2, [r3, #24]
                }
            }
            return true;
 8012722:	2301      	movs	r3, #1
 8012724:	e000      	b.n	8012728 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE17decodeForNextTickERNS3_6StreamE+0x6e>
        }
        return false;
 8012726:	2300      	movs	r3, #0
    }
 8012728:	4618      	mov	r0, r3
 801272a:	370c      	adds	r7, #12
 801272c:	46bd      	mov	sp, r7
 801272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012732:	4770      	bx	lr

08012734 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EED1Ev>:
class DedicatedBufferController : public touchgfx::VideoController
 8012734:	b580      	push	{r7, lr}
 8012736:	b082      	sub	sp, #8
 8012738:	af00      	add	r7, sp, #0
 801273a:	6078      	str	r0, [r7, #4]
 801273c:	4a05      	ldr	r2, [pc, #20]	; (8012754 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EED1Ev+0x20>)
 801273e:	687b      	ldr	r3, [r7, #4]
 8012740:	601a      	str	r2, [r3, #0]
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	4618      	mov	r0, r3
 8012746:	f7ff fcb5 	bl	80120b4 <_ZN8touchgfx15VideoControllerD1Ev>
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	4618      	mov	r0, r3
 801274e:	3708      	adds	r7, #8
 8012750:	46bd      	mov	sp, r7
 8012752:	bd80      	pop	{r7, pc}
 8012754:	0801e204 	.word	0x0801e204

08012758 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EED0Ev>:
 8012758:	b580      	push	{r7, lr}
 801275a:	b082      	sub	sp, #8
 801275c:	af00      	add	r7, sp, #0
 801275e:	6078      	str	r0, [r7, #4]
 8012760:	6878      	ldr	r0, [r7, #4]
 8012762:	f7ff ffe7 	bl	8012734 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EED1Ev>
 8012766:	2148      	movs	r1, #72	; 0x48
 8012768:	6878      	ldr	r0, [r7, #4]
 801276a:	f007 fe7b 	bl	801a464 <_ZdlPvj>
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	4618      	mov	r0, r3
 8012772:	3708      	adds	r7, #8
 8012774:	46bd      	mov	sp, r7
 8012776:	bd80      	pop	{r7, pc}

08012778 <_Z41__static_initialization_and_destruction_0ii>:

extern "C" void videoTaskFunc(void *argument)
{
    videoController.decoderTaskEntry();
}
 8012778:	b580      	push	{r7, lr}
 801277a:	b082      	sub	sp, #8
 801277c:	af00      	add	r7, sp, #0
 801277e:	6078      	str	r0, [r7, #4]
 8012780:	6039      	str	r1, [r7, #0]
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	2b01      	cmp	r3, #1
 8012786:	d10a      	bne.n	801279e <_Z41__static_initialization_and_destruction_0ii+0x26>
 8012788:	683b      	ldr	r3, [r7, #0]
 801278a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801278e:	4293      	cmp	r3, r2
 8012790:	d105      	bne.n	801279e <_Z41__static_initialization_and_destruction_0ii+0x26>
HardwareMJPEGDecoder mjpegdecoder1;
 8012792:	480c      	ldr	r0, [pc, #48]	; (80127c4 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8012794:	f7fd fdf6 	bl	8010384 <_ZN20HardwareMJPEGDecoderC1Ev>
DedicatedBufferController<1, 800, 480, 800*2U, Bitmap::RGB565> videoController;
 8012798:	480b      	ldr	r0, [pc, #44]	; (80127c8 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 801279a:	f7ff fe85 	bl	80124a8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EEC1Ev>
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	2b00      	cmp	r3, #0
 80127a2:	d10a      	bne.n	80127ba <_Z41__static_initialization_and_destruction_0ii+0x42>
 80127a4:	683b      	ldr	r3, [r7, #0]
 80127a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80127aa:	4293      	cmp	r3, r2
 80127ac:	d105      	bne.n	80127ba <_Z41__static_initialization_and_destruction_0ii+0x42>
 80127ae:	4806      	ldr	r0, [pc, #24]	; (80127c8 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80127b0:	f7ff ffc0 	bl	8012734 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EED1Ev>
HardwareMJPEGDecoder mjpegdecoder1;
 80127b4:	4803      	ldr	r0, [pc, #12]	; (80127c4 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80127b6:	f7fe fdb7 	bl	8011328 <_ZN20HardwareMJPEGDecoderD1Ev>
}
 80127ba:	bf00      	nop
 80127bc:	3708      	adds	r7, #8
 80127be:	46bd      	mov	sp, r7
 80127c0:	bd80      	pop	{r7, pc}
 80127c2:	bf00      	nop
 80127c4:	2001f07c 	.word	0x2001f07c
 80127c8:	2001f0c0 	.word	0x2001f0c0

080127cc <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE>:
    virtual Handle registerVideoWidget(touchgfx::VideoWidget& widget)
 80127cc:	b580      	push	{r7, lr}
 80127ce:	b084      	sub	sp, #16
 80127d0:	af00      	add	r7, sp, #0
 80127d2:	6078      	str	r0, [r7, #4]
 80127d4:	6039      	str	r1, [r7, #0]
        const uint32_t sizeOfOneDecodeBuffer = height * stride;
 80127d6:	4b1f      	ldr	r3, [pc, #124]	; (8012854 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x88>)
 80127d8:	60fb      	str	r3, [r7, #12]
        Handle handle = getFreeHandle();
 80127da:	6878      	ldr	r0, [r7, #4]
 80127dc:	f000 fa82 	bl	8012ce4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE13getFreeHandleEv>
 80127e0:	60b8      	str	r0, [r7, #8]
        streams[handle].isActive = true;
 80127e2:	6879      	ldr	r1, [r7, #4]
 80127e4:	68ba      	ldr	r2, [r7, #8]
 80127e6:	4613      	mov	r3, r2
 80127e8:	00db      	lsls	r3, r3, #3
 80127ea:	4413      	add	r3, r2
 80127ec:	009b      	lsls	r3, r3, #2
 80127ee:	440b      	add	r3, r1
 80127f0:	3328      	adds	r3, #40	; 0x28
 80127f2:	2201      	movs	r2, #1
 80127f4:	701a      	strb	r2, [r3, #0]
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 80127f6:	687b      	ldr	r3, [r7, #4]
 80127f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80127fa:	4b16      	ldr	r3, [pc, #88]	; (8012854 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x88>)
 80127fc:	4413      	add	r3, r2
 80127fe:	687a      	ldr	r2, [r7, #4]
 8012800:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8012802:	687a      	ldr	r2, [r7, #4]
 8012804:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8012806:	440a      	add	r2, r1
 8012808:	4293      	cmp	r3, r2
 801280a:	d905      	bls.n	8012818 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x4c>
            assert(0 && "registerVideoWidget: Unable to allocate RGB buffer!");
 801280c:	4b12      	ldr	r3, [pc, #72]	; (8012858 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x8c>)
 801280e:	4a13      	ldr	r2, [pc, #76]	; (801285c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x90>)
 8012810:	2152      	movs	r1, #82	; 0x52
 8012812:	4813      	ldr	r0, [pc, #76]	; (8012860 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x94>)
 8012814:	f007 fe54 	bl	801a4c0 <__assert_func>
        decodeBuffers[handle] = (uint32_t*)topBufferRGB;
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 801281c:	687b      	ldr	r3, [r7, #4]
 801281e:	68ba      	ldr	r2, [r7, #8]
 8012820:	3202      	adds	r2, #2
 8012822:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        topBufferRGB += sizeOfOneDecodeBuffer;
 8012826:	687b      	ldr	r3, [r7, #4]
 8012828:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801282a:	4b0a      	ldr	r3, [pc, #40]	; (8012854 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x88>)
 801282c:	4413      	add	r3, r2
 801282e:	687a      	ldr	r2, [r7, #4]
 8012830:	6393      	str	r3, [r2, #56]	; 0x38
        widget.setVideoBufferFormat(output_format, width, height);
 8012832:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8012836:	f44f 7248 	mov.w	r2, #800	; 0x320
 801283a:	2100      	movs	r1, #0
 801283c:	6838      	ldr	r0, [r7, #0]
 801283e:	f7ff fc67 	bl	8012110 <_ZN8touchgfx11VideoWidget20setVideoBufferFormatENS_6Bitmap12BitmapFormatEss>
        widget.setVideoBuffer((uint8_t*)0);
 8012842:	2100      	movs	r1, #0
 8012844:	6838      	ldr	r0, [r7, #0]
 8012846:	f7ff fc55 	bl	80120f4 <_ZN8touchgfx11VideoWidget14setVideoBufferEPh>
        return handle;
 801284a:	68bb      	ldr	r3, [r7, #8]
    }
 801284c:	4618      	mov	r0, r3
 801284e:	3710      	adds	r7, #16
 8012850:	46bd      	mov	sp, r7
 8012852:	bd80      	pop	{r7, pc}
 8012854:	000bb800 	.word	0x000bb800
 8012858:	0801c7f8 	.word	0x0801c7f8
 801285c:	0801c834 	.word	0x0801c834
 8012860:	0801c7b8 	.word	0x0801c7b8

08012864 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE21unregisterVideoWidgetEm>:
    virtual void unregisterVideoWidget(const Handle handle)
 8012864:	b580      	push	{r7, lr}
 8012866:	b084      	sub	sp, #16
 8012868:	af00      	add	r7, sp, #0
 801286a:	6078      	str	r0, [r7, #4]
 801286c:	6039      	str	r1, [r7, #0]
        MUTEX_LOCK(mutexBuffers);
 801286e:	687b      	ldr	r3, [r7, #4]
 8012870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012872:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8012876:	4618      	mov	r0, r3
 8012878:	f7f8 ffd4 	bl	800b824 <osMutexAcquire>
        MUTEX_UNLOCK(mutexBuffers);
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012880:	4618      	mov	r0, r3
 8012882:	f7f9 f82d 	bl	800b8e0 <osMutexRelease>
        streams[handle].isActive = false;
 8012886:	6879      	ldr	r1, [r7, #4]
 8012888:	683a      	ldr	r2, [r7, #0]
 801288a:	4613      	mov	r3, r2
 801288c:	00db      	lsls	r3, r3, #3
 801288e:	4413      	add	r3, r2
 8012890:	009b      	lsls	r3, r3, #2
 8012892:	440b      	add	r3, r1
 8012894:	3328      	adds	r3, #40	; 0x28
 8012896:	2200      	movs	r2, #0
 8012898:	701a      	strb	r2, [r3, #0]
        bool oneIsActive = false;
 801289a:	2300      	movs	r3, #0
 801289c:	73fb      	strb	r3, [r7, #15]
        for (uint32_t i = 0; i < no_streams; i++)
 801289e:	2300      	movs	r3, #0
 80128a0:	60bb      	str	r3, [r7, #8]
 80128a2:	68bb      	ldr	r3, [r7, #8]
 80128a4:	2b00      	cmp	r3, #0
 80128a6:	d114      	bne.n	80128d2 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE21unregisterVideoWidgetEm+0x6e>
            oneIsActive |= streams[i].isActive;
 80128a8:	6879      	ldr	r1, [r7, #4]
 80128aa:	68ba      	ldr	r2, [r7, #8]
 80128ac:	4613      	mov	r3, r2
 80128ae:	00db      	lsls	r3, r3, #3
 80128b0:	4413      	add	r3, r2
 80128b2:	009b      	lsls	r3, r3, #2
 80128b4:	440b      	add	r3, r1
 80128b6:	3328      	adds	r3, #40	; 0x28
 80128b8:	781a      	ldrb	r2, [r3, #0]
 80128ba:	7bfb      	ldrb	r3, [r7, #15]
 80128bc:	4313      	orrs	r3, r2
 80128be:	b2db      	uxtb	r3, r3
 80128c0:	2b00      	cmp	r3, #0
 80128c2:	bf14      	ite	ne
 80128c4:	2301      	movne	r3, #1
 80128c6:	2300      	moveq	r3, #0
 80128c8:	73fb      	strb	r3, [r7, #15]
        for (uint32_t i = 0; i < no_streams; i++)
 80128ca:	68bb      	ldr	r3, [r7, #8]
 80128cc:	3301      	adds	r3, #1
 80128ce:	60bb      	str	r3, [r7, #8]
 80128d0:	e7e7      	b.n	80128a2 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE21unregisterVideoWidgetEm+0x3e>
        if (oneIsActive == false)
 80128d2:	7bfb      	ldrb	r3, [r7, #15]
 80128d4:	2b00      	cmp	r3, #0
 80128d6:	d103      	bne.n	80128e0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE21unregisterVideoWidgetEm+0x7c>
            topBufferRGB = bufferRGB;
 80128d8:	687b      	ldr	r3, [r7, #4]
 80128da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	639a      	str	r2, [r3, #56]	; 0x38
    }
 80128e0:	bf00      	nop
 80128e2:	3710      	adds	r7, #16
 80128e4:	46bd      	mov	sp, r7
 80128e6:	bd80      	pop	{r7, pc}

080128e8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm>:
    virtual void setFrameRate(const Handle handle, uint32_t ui_frames, uint32_t video_frames)
 80128e8:	b580      	push	{r7, lr}
 80128ea:	b086      	sub	sp, #24
 80128ec:	af00      	add	r7, sp, #0
 80128ee:	60f8      	str	r0, [r7, #12]
 80128f0:	60b9      	str	r1, [r7, #8]
 80128f2:	607a      	str	r2, [r7, #4]
 80128f4:	603b      	str	r3, [r7, #0]
        assert(handle < no_streams);
 80128f6:	68bb      	ldr	r3, [r7, #8]
 80128f8:	2b00      	cmp	r3, #0
 80128fa:	d005      	beq.n	8012908 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x20>
 80128fc:	4b0f      	ldr	r3, [pc, #60]	; (801293c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x54>)
 80128fe:	4a10      	ldr	r2, [pc, #64]	; (8012940 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x58>)
 8012900:	2182      	movs	r1, #130	; 0x82
 8012902:	4810      	ldr	r0, [pc, #64]	; (8012944 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x5c>)
 8012904:	f007 fddc 	bl	801a4c0 <__assert_func>
        Stream& stream = streams[handle];
 8012908:	68ba      	ldr	r2, [r7, #8]
 801290a:	4613      	mov	r3, r2
 801290c:	00db      	lsls	r3, r3, #3
 801290e:	4413      	add	r3, r2
 8012910:	009b      	lsls	r3, r3, #2
 8012912:	3308      	adds	r3, #8
 8012914:	68fa      	ldr	r2, [r7, #12]
 8012916:	4413      	add	r3, r2
 8012918:	3304      	adds	r3, #4
 801291a:	617b      	str	r3, [r7, #20]
        stream.frameCount = 0;
 801291c:	697b      	ldr	r3, [r7, #20]
 801291e:	2200      	movs	r2, #0
 8012920:	605a      	str	r2, [r3, #4]
        stream.tickCount = 0;
 8012922:	697b      	ldr	r3, [r7, #20]
 8012924:	2200      	movs	r2, #0
 8012926:	609a      	str	r2, [r3, #8]
        stream.frame_rate_ticks = ui_frames;
 8012928:	697b      	ldr	r3, [r7, #20]
 801292a:	687a      	ldr	r2, [r7, #4]
 801292c:	611a      	str	r2, [r3, #16]
        stream.frame_rate_video = video_frames;
 801292e:	697b      	ldr	r3, [r7, #20]
 8012930:	683a      	ldr	r2, [r7, #0]
 8012932:	60da      	str	r2, [r3, #12]
    }
 8012934:	bf00      	nop
 8012936:	3718      	adds	r7, #24
 8012938:	46bd      	mov	sp, r7
 801293a:	bd80      	pop	{r7, pc}
 801293c:	0801c9d8 	.word	0x0801c9d8
 8012940:	0801c9ec 	.word	0x0801c9ec
 8012944:	0801c7b8 	.word	0x0801c7b8

08012948 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE>:
    virtual bool updateFrame(const Handle handle, touchgfx::VideoWidget& widget)
 8012948:	b580      	push	{r7, lr}
 801294a:	b086      	sub	sp, #24
 801294c:	af00      	add	r7, sp, #0
 801294e:	60f8      	str	r0, [r7, #12]
 8012950:	60b9      	str	r1, [r7, #8]
 8012952:	607a      	str	r2, [r7, #4]
        assert(handle < no_streams);
 8012954:	68bb      	ldr	r3, [r7, #8]
 8012956:	2b00      	cmp	r3, #0
 8012958:	d005      	beq.n	8012966 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x1e>
 801295a:	4b29      	ldr	r3, [pc, #164]	; (8012a00 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0xb8>)
 801295c:	4a29      	ldr	r2, [pc, #164]	; (8012a04 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0xbc>)
 801295e:	21d0      	movs	r1, #208	; 0xd0
 8012960:	4829      	ldr	r0, [pc, #164]	; (8012a08 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0xc0>)
 8012962:	f007 fdad 	bl	801a4c0 <__assert_func>
        Stream& stream = streams[handle];
 8012966:	68ba      	ldr	r2, [r7, #8]
 8012968:	4613      	mov	r3, r2
 801296a:	00db      	lsls	r3, r3, #3
 801296c:	4413      	add	r3, r2
 801296e:	009b      	lsls	r3, r3, #2
 8012970:	3308      	adds	r3, #8
 8012972:	68fa      	ldr	r2, [r7, #12]
 8012974:	4413      	add	r3, r2
 8012976:	3304      	adds	r3, #4
 8012978:	617b      	str	r3, [r7, #20]
        if (stream.isPlaying)
 801297a:	697b      	ldr	r3, [r7, #20]
 801297c:	7f5b      	ldrb	r3, [r3, #29]
 801297e:	2b00      	cmp	r3, #0
 8012980:	d00b      	beq.n	801299a <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x52>
            stream.tickCount+=HAL::getInstance()->getLCDRefreshCount();
 8012982:	f7fc ff8b 	bl	800f89c <_ZN8touchgfx3HAL11getInstanceEv>
 8012986:	4603      	mov	r3, r0
 8012988:	4618      	mov	r0, r3
 801298a:	f7ff fb85 	bl	8012098 <_ZN8touchgfx3HAL18getLCDRefreshCountEv>
 801298e:	4602      	mov	r2, r0
 8012990:	697b      	ldr	r3, [r7, #20]
 8012992:	689b      	ldr	r3, [r3, #8]
 8012994:	441a      	add	r2, r3
 8012996:	697b      	ldr	r3, [r7, #20]
 8012998:	609a      	str	r2, [r3, #8]
        if (stream.doInvalidateOnNextTick)
 801299a:	697b      	ldr	r3, [r7, #20]
 801299c:	7fdb      	ldrb	r3, [r3, #31]
 801299e:	2b00      	cmp	r3, #0
 80129a0:	d029      	beq.n	80129f6 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0xae>
            widget.setVideoBuffer((uint8_t*)decodeBuffers[handle]);
 80129a2:	68fb      	ldr	r3, [r7, #12]
 80129a4:	68ba      	ldr	r2, [r7, #8]
 80129a6:	3202      	adds	r2, #2
 80129a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80129ac:	4619      	mov	r1, r3
 80129ae:	6878      	ldr	r0, [r7, #4]
 80129b0:	f7ff fba0 	bl	80120f4 <_ZN8touchgfx11VideoWidget14setVideoBufferEPh>
            widget.invalidate();
 80129b4:	687a      	ldr	r2, [r7, #4]
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	681b      	ldr	r3, [r3, #0]
 80129ba:	3314      	adds	r3, #20
 80129bc:	681b      	ldr	r3, [r3, #0]
 80129be:	4610      	mov	r0, r2
 80129c0:	4798      	blx	r3
            stream.doInvalidateOnNextTick = false;
 80129c2:	697b      	ldr	r3, [r7, #20]
 80129c4:	2200      	movs	r2, #0
 80129c6:	77da      	strb	r2, [r3, #31]
            if (!stream.hasMoreFrames && !stream.repeat)
 80129c8:	697b      	ldr	r3, [r7, #20]
 80129ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80129ce:	f083 0301 	eor.w	r3, r3, #1
 80129d2:	b2db      	uxtb	r3, r3
 80129d4:	2b00      	cmp	r3, #0
 80129d6:	d00a      	beq.n	80129ee <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0xa6>
 80129d8:	697b      	ldr	r3, [r7, #20]
 80129da:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80129de:	f083 0301 	eor.w	r3, r3, #1
 80129e2:	b2db      	uxtb	r3, r3
 80129e4:	2b00      	cmp	r3, #0
 80129e6:	d002      	beq.n	80129ee <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0xa6>
                stream.isPlaying = false;
 80129e8:	697b      	ldr	r3, [r7, #20]
 80129ea:	2200      	movs	r2, #0
 80129ec:	775a      	strb	r2, [r3, #29]
            return stream.hasMoreFrames;
 80129ee:	697b      	ldr	r3, [r7, #20]
 80129f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80129f4:	e000      	b.n	80129f8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0xb0>
        return true;
 80129f6:	2301      	movs	r3, #1
    }
 80129f8:	4618      	mov	r0, r3
 80129fa:	3718      	adds	r7, #24
 80129fc:	46bd      	mov	sp, r7
 80129fe:	bd80      	pop	{r7, pc}
 8012a00:	0801c9d8 	.word	0x0801c9d8
 8012a04:	0801cba8 	.word	0x0801cba8
 8012a08:	0801c7b8 	.word	0x0801c7b8

08012a0c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE>:
    virtual void draw(const Handle handle, const touchgfx::Rect& invalidatedArea, const touchgfx::VideoWidget& widget)
 8012a0c:	b580      	push	{r7, lr}
 8012a0e:	b084      	sub	sp, #16
 8012a10:	af00      	add	r7, sp, #0
 8012a12:	60f8      	str	r0, [r7, #12]
 8012a14:	60b9      	str	r1, [r7, #8]
 8012a16:	607a      	str	r2, [r7, #4]
 8012a18:	603b      	str	r3, [r7, #0]
        if (firstDrawThisFrame)
 8012a1a:	68fb      	ldr	r3, [r7, #12]
 8012a1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012a20:	2b00      	cmp	r3, #0
 8012a22:	d00e      	beq.n	8012a42 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE+0x36>
            MUTEX_LOCK(mutexBuffers);
 8012a24:	68fb      	ldr	r3, [r7, #12]
 8012a26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012a28:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8012a2c:	4618      	mov	r0, r3
 8012a2e:	f7f8 fef9 	bl	800b824 <osMutexAcquire>
            firstDrawThisFrame = false;
 8012a32:	68fb      	ldr	r3, [r7, #12]
 8012a34:	2200      	movs	r2, #0
 8012a36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
            uiHasMutex = true;
 8012a3a:	68fb      	ldr	r3, [r7, #12]
 8012a3c:	2201      	movs	r2, #1
 8012a3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
 8012a42:	bf00      	nop
 8012a44:	3710      	adds	r7, #16
 8012a46:	46bd      	mov	sp, r7
 8012a48:	bd80      	pop	{r7, pc}
	...

08012a4c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm>:
    virtual void setVideoData(const Handle handle, const uint8_t* movie, const uint32_t length)
 8012a4c:	b580      	push	{r7, lr}
 8012a4e:	b086      	sub	sp, #24
 8012a50:	af00      	add	r7, sp, #0
 8012a52:	60f8      	str	r0, [r7, #12]
 8012a54:	60b9      	str	r1, [r7, #8]
 8012a56:	607a      	str	r2, [r7, #4]
 8012a58:	603b      	str	r3, [r7, #0]
        assert(handle < no_streams);
 8012a5a:	68bb      	ldr	r3, [r7, #8]
 8012a5c:	2b00      	cmp	r3, #0
 8012a5e:	d005      	beq.n	8012a6c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm+0x20>
 8012a60:	4b13      	ldr	r3, [pc, #76]	; (8012ab0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm+0x64>)
 8012a62:	4a14      	ldr	r2, [pc, #80]	; (8012ab4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm+0x68>)
 8012a64:	2190      	movs	r1, #144	; 0x90
 8012a66:	4814      	ldr	r0, [pc, #80]	; (8012ab8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm+0x6c>)
 8012a68:	f007 fd2a 	bl	801a4c0 <__assert_func>
        Stream& stream = streams[handle];
 8012a6c:	68ba      	ldr	r2, [r7, #8]
 8012a6e:	4613      	mov	r3, r2
 8012a70:	00db      	lsls	r3, r3, #3
 8012a72:	4413      	add	r3, r2
 8012a74:	009b      	lsls	r3, r3, #2
 8012a76:	3308      	adds	r3, #8
 8012a78:	68fa      	ldr	r2, [r7, #12]
 8012a7a:	4413      	add	r3, r2
 8012a7c:	3304      	adds	r3, #4
 8012a7e:	617b      	str	r3, [r7, #20]
        stream.frameNumber = 0;
 8012a80:	697b      	ldr	r3, [r7, #20]
 8012a82:	2200      	movs	r2, #0
 8012a84:	601a      	str	r2, [r3, #0]
        mjpegDecoders[handle]->setVideoData(movie, length);
 8012a86:	68fa      	ldr	r2, [r7, #12]
 8012a88:	68bb      	ldr	r3, [r7, #8]
 8012a8a:	009b      	lsls	r3, r3, #2
 8012a8c:	4413      	add	r3, r2
 8012a8e:	6858      	ldr	r0, [r3, #4]
 8012a90:	68fa      	ldr	r2, [r7, #12]
 8012a92:	68bb      	ldr	r3, [r7, #8]
 8012a94:	009b      	lsls	r3, r3, #2
 8012a96:	4413      	add	r3, r2
 8012a98:	685b      	ldr	r3, [r3, #4]
 8012a9a:	681b      	ldr	r3, [r3, #0]
 8012a9c:	3308      	adds	r3, #8
 8012a9e:	681b      	ldr	r3, [r3, #0]
 8012aa0:	683a      	ldr	r2, [r7, #0]
 8012aa2:	6879      	ldr	r1, [r7, #4]
 8012aa4:	4798      	blx	r3
    }
 8012aa6:	bf00      	nop
 8012aa8:	3718      	adds	r7, #24
 8012aaa:	46bd      	mov	sp, r7
 8012aac:	bd80      	pop	{r7, pc}
 8012aae:	bf00      	nop
 8012ab0:	0801c9d8 	.word	0x0801c9d8
 8012ab4:	0801cd4c 	.word	0x0801cd4c
 8012ab8:	0801c7b8 	.word	0x0801c7b8

08012abc <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmRNS0_15VideoDataReaderE>:
    virtual void setVideoData(const Handle handle, VideoDataReader& reader)
 8012abc:	b580      	push	{r7, lr}
 8012abe:	b084      	sub	sp, #16
 8012ac0:	af00      	add	r7, sp, #0
 8012ac2:	60f8      	str	r0, [r7, #12]
 8012ac4:	60b9      	str	r1, [r7, #8]
 8012ac6:	607a      	str	r2, [r7, #4]
        mjpegDecoders[handle]->setVideoData(reader);
 8012ac8:	68fa      	ldr	r2, [r7, #12]
 8012aca:	68bb      	ldr	r3, [r7, #8]
 8012acc:	009b      	lsls	r3, r3, #2
 8012ace:	4413      	add	r3, r2
 8012ad0:	6858      	ldr	r0, [r3, #4]
 8012ad2:	68fa      	ldr	r2, [r7, #12]
 8012ad4:	68bb      	ldr	r3, [r7, #8]
 8012ad6:	009b      	lsls	r3, r3, #2
 8012ad8:	4413      	add	r3, r2
 8012ada:	685b      	ldr	r3, [r3, #4]
 8012adc:	681b      	ldr	r3, [r3, #0]
 8012ade:	330c      	adds	r3, #12
 8012ae0:	681b      	ldr	r3, [r3, #0]
 8012ae2:	6879      	ldr	r1, [r7, #4]
 8012ae4:	4798      	blx	r3
    }
 8012ae6:	bf00      	nop
 8012ae8:	3710      	adds	r7, #16
 8012aea:	46bd      	mov	sp, r7
 8012aec:	bd80      	pop	{r7, pc}
	...

08012af0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm>:
    virtual void setCommand(const Handle handle, Command cmd, uint32_t param)
 8012af0:	b580      	push	{r7, lr}
 8012af2:	b086      	sub	sp, #24
 8012af4:	af00      	add	r7, sp, #0
 8012af6:	60f8      	str	r0, [r7, #12]
 8012af8:	60b9      	str	r1, [r7, #8]
 8012afa:	603b      	str	r3, [r7, #0]
 8012afc:	4613      	mov	r3, r2
 8012afe:	71fb      	strb	r3, [r7, #7]
        assert(handle < no_streams);
 8012b00:	68bb      	ldr	r3, [r7, #8]
 8012b02:	2b00      	cmp	r3, #0
 8012b04:	d005      	beq.n	8012b12 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x22>
 8012b06:	4b3a      	ldr	r3, [pc, #232]	; (8012bf0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x100>)
 8012b08:	4a3a      	ldr	r2, [pc, #232]	; (8012bf4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x104>)
 8012b0a:	21a2      	movs	r1, #162	; 0xa2
 8012b0c:	483a      	ldr	r0, [pc, #232]	; (8012bf8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x108>)
 8012b0e:	f007 fcd7 	bl	801a4c0 <__assert_func>
        Stream& stream = streams[handle];
 8012b12:	68ba      	ldr	r2, [r7, #8]
 8012b14:	4613      	mov	r3, r2
 8012b16:	00db      	lsls	r3, r3, #3
 8012b18:	4413      	add	r3, r2
 8012b1a:	009b      	lsls	r3, r3, #2
 8012b1c:	3308      	adds	r3, #8
 8012b1e:	68fa      	ldr	r2, [r7, #12]
 8012b20:	4413      	add	r3, r2
 8012b22:	3304      	adds	r3, #4
 8012b24:	617b      	str	r3, [r7, #20]
        switch (cmd)
 8012b26:	79fb      	ldrb	r3, [r7, #7]
 8012b28:	2b05      	cmp	r3, #5
 8012b2a:	d85c      	bhi.n	8012be6 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0xf6>
 8012b2c:	a201      	add	r2, pc, #4	; (adr r2, 8012b34 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x44>)
 8012b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012b32:	bf00      	nop
 8012b34:	08012b4d 	.word	0x08012b4d
 8012b38:	08012b8d 	.word	0x08012b8d
 8012b3c:	08012b95 	.word	0x08012b95
 8012b40:	08012ba9 	.word	0x08012ba9
 8012b44:	08012bc3 	.word	0x08012bc3
 8012b48:	08012bd1 	.word	0x08012bd1
            if (mjpegDecoders[handle]->hasVideo())
 8012b4c:	68fa      	ldr	r2, [r7, #12]
 8012b4e:	68bb      	ldr	r3, [r7, #8]
 8012b50:	009b      	lsls	r3, r3, #2
 8012b52:	4413      	add	r3, r2
 8012b54:	6859      	ldr	r1, [r3, #4]
 8012b56:	68fa      	ldr	r2, [r7, #12]
 8012b58:	68bb      	ldr	r3, [r7, #8]
 8012b5a:	009b      	lsls	r3, r3, #2
 8012b5c:	4413      	add	r3, r2
 8012b5e:	685b      	ldr	r3, [r3, #4]
 8012b60:	681b      	ldr	r3, [r3, #0]
 8012b62:	3310      	adds	r3, #16
 8012b64:	681b      	ldr	r3, [r3, #0]
 8012b66:	4608      	mov	r0, r1
 8012b68:	4798      	blx	r3
 8012b6a:	4603      	mov	r3, r0
 8012b6c:	2b00      	cmp	r3, #0
 8012b6e:	d039      	beq.n	8012be4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0xf4>
                stream.isPlaying = true;
 8012b70:	697b      	ldr	r3, [r7, #20]
 8012b72:	2201      	movs	r2, #1
 8012b74:	775a      	strb	r2, [r3, #29]
                stream.hasMoreFrames = true; // Assume more frames, lowered on end
 8012b76:	697b      	ldr	r3, [r7, #20]
 8012b78:	2201      	movs	r2, #1
 8012b7a:	f883 2020 	strb.w	r2, [r3, #32]
                stream.frameCount = 0;
 8012b7e:	697b      	ldr	r3, [r7, #20]
 8012b80:	2200      	movs	r2, #0
 8012b82:	605a      	str	r2, [r3, #4]
                stream.tickCount = 0;
 8012b84:	697b      	ldr	r3, [r7, #20]
 8012b86:	2200      	movs	r2, #0
 8012b88:	609a      	str	r2, [r3, #8]
            break;
 8012b8a:	e02b      	b.n	8012be4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0xf4>
            stream.isPlaying = false;
 8012b8c:	697b      	ldr	r3, [r7, #20]
 8012b8e:	2200      	movs	r2, #0
 8012b90:	775a      	strb	r2, [r3, #29]
            break;
 8012b92:	e028      	b.n	8012be6 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0xf6>
            stream.seek_to_frame = param;
 8012b94:	697b      	ldr	r3, [r7, #20]
 8012b96:	683a      	ldr	r2, [r7, #0]
 8012b98:	615a      	str	r2, [r3, #20]
            stream.frameCount = 0;
 8012b9a:	697b      	ldr	r3, [r7, #20]
 8012b9c:	2200      	movs	r2, #0
 8012b9e:	605a      	str	r2, [r3, #4]
            stream.tickCount = 0;
 8012ba0:	697b      	ldr	r3, [r7, #20]
 8012ba2:	2200      	movs	r2, #0
 8012ba4:	609a      	str	r2, [r3, #8]
            break;
 8012ba6:	e01e      	b.n	8012be6 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0xf6>
            stream.seek_to_frame = param;
 8012ba8:	697b      	ldr	r3, [r7, #20]
 8012baa:	683a      	ldr	r2, [r7, #0]
 8012bac:	615a      	str	r2, [r3, #20]
            stream.isShowingOneFrame = true;
 8012bae:	697b      	ldr	r3, [r7, #20]
 8012bb0:	2201      	movs	r2, #1
 8012bb2:	779a      	strb	r2, [r3, #30]
            stream.frameCount = 0;
 8012bb4:	697b      	ldr	r3, [r7, #20]
 8012bb6:	2200      	movs	r2, #0
 8012bb8:	605a      	str	r2, [r3, #4]
            stream.tickCount = 0;
 8012bba:	697b      	ldr	r3, [r7, #20]
 8012bbc:	2200      	movs	r2, #0
 8012bbe:	609a      	str	r2, [r3, #8]
            break;
 8012bc0:	e011      	b.n	8012be6 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0xf6>
            stream.isPlaying = false;
 8012bc2:	697b      	ldr	r3, [r7, #20]
 8012bc4:	2200      	movs	r2, #0
 8012bc6:	775a      	strb	r2, [r3, #29]
            stream.seek_to_frame = 1;
 8012bc8:	697b      	ldr	r3, [r7, #20]
 8012bca:	2201      	movs	r2, #1
 8012bcc:	615a      	str	r2, [r3, #20]
            break;
 8012bce:	e00a      	b.n	8012be6 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0xf6>
            stream.repeat = (param > 0);
 8012bd0:	683b      	ldr	r3, [r7, #0]
 8012bd2:	2b00      	cmp	r3, #0
 8012bd4:	bf14      	ite	ne
 8012bd6:	2301      	movne	r3, #1
 8012bd8:	2300      	moveq	r3, #0
 8012bda:	b2da      	uxtb	r2, r3
 8012bdc:	697b      	ldr	r3, [r7, #20]
 8012bde:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            break;
 8012be2:	e000      	b.n	8012be6 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0xf6>
            break;
 8012be4:	bf00      	nop
    }
 8012be6:	bf00      	nop
 8012be8:	3718      	adds	r7, #24
 8012bea:	46bd      	mov	sp, r7
 8012bec:	bd80      	pop	{r7, pc}
 8012bee:	bf00      	nop
 8012bf0:	0801c9d8 	.word	0x0801c9d8
 8012bf4:	0801cf28 	.word	0x0801cf28
 8012bf8:	0801c7b8 	.word	0x0801c7b8

08012bfc <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm>:
    virtual uint32_t getCurrentFrameNumber(const Handle handle)
 8012bfc:	b580      	push	{r7, lr}
 8012bfe:	b084      	sub	sp, #16
 8012c00:	af00      	add	r7, sp, #0
 8012c02:	6078      	str	r0, [r7, #4]
 8012c04:	6039      	str	r1, [r7, #0]
        assert(handle < no_streams);
 8012c06:	683b      	ldr	r3, [r7, #0]
 8012c08:	2b00      	cmp	r3, #0
 8012c0a:	d005      	beq.n	8012c18 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x1c>
 8012c0c:	4b0a      	ldr	r3, [pc, #40]	; (8012c38 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x3c>)
 8012c0e:	4a0b      	ldr	r2, [pc, #44]	; (8012c3c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x40>)
 8012c10:	2179      	movs	r1, #121	; 0x79
 8012c12:	480b      	ldr	r0, [pc, #44]	; (8012c40 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x44>)
 8012c14:	f007 fc54 	bl	801a4c0 <__assert_func>
        const Stream& stream = streams[handle];
 8012c18:	683a      	ldr	r2, [r7, #0]
 8012c1a:	4613      	mov	r3, r2
 8012c1c:	00db      	lsls	r3, r3, #3
 8012c1e:	4413      	add	r3, r2
 8012c20:	009b      	lsls	r3, r3, #2
 8012c22:	3308      	adds	r3, #8
 8012c24:	687a      	ldr	r2, [r7, #4]
 8012c26:	4413      	add	r3, r2
 8012c28:	3304      	adds	r3, #4
 8012c2a:	60fb      	str	r3, [r7, #12]
        return stream.frameNumber;
 8012c2c:	68fb      	ldr	r3, [r7, #12]
 8012c2e:	681b      	ldr	r3, [r3, #0]
    }
 8012c30:	4618      	mov	r0, r3
 8012c32:	3710      	adds	r7, #16
 8012c34:	46bd      	mov	sp, r7
 8012c36:	bd80      	pop	{r7, pc}
 8012c38:	0801c9d8 	.word	0x0801c9d8
 8012c3c:	0801d0fc 	.word	0x0801d0fc
 8012c40:	0801c7b8 	.word	0x0801c7b8

08012c44 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE>:
    virtual void getVideoInformation(const Handle handle, touchgfx::VideoInformation* data)
 8012c44:	b580      	push	{r7, lr}
 8012c46:	b084      	sub	sp, #16
 8012c48:	af00      	add	r7, sp, #0
 8012c4a:	60f8      	str	r0, [r7, #12]
 8012c4c:	60b9      	str	r1, [r7, #8]
 8012c4e:	607a      	str	r2, [r7, #4]
        assert(handle < no_streams);
 8012c50:	68bb      	ldr	r3, [r7, #8]
 8012c52:	2b00      	cmp	r3, #0
 8012c54:	d006      	beq.n	8012c64 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x20>
 8012c56:	4b0d      	ldr	r3, [pc, #52]	; (8012c8c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x48>)
 8012c58:	4a0d      	ldr	r2, [pc, #52]	; (8012c90 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x4c>)
 8012c5a:	f44f 71b5 	mov.w	r1, #362	; 0x16a
 8012c5e:	480d      	ldr	r0, [pc, #52]	; (8012c94 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x50>)
 8012c60:	f007 fc2e 	bl	801a4c0 <__assert_func>
        mjpegDecoders[handle]->getVideoInfo(data);
 8012c64:	68fa      	ldr	r2, [r7, #12]
 8012c66:	68bb      	ldr	r3, [r7, #8]
 8012c68:	009b      	lsls	r3, r3, #2
 8012c6a:	4413      	add	r3, r2
 8012c6c:	6858      	ldr	r0, [r3, #4]
 8012c6e:	68fa      	ldr	r2, [r7, #12]
 8012c70:	68bb      	ldr	r3, [r7, #8]
 8012c72:	009b      	lsls	r3, r3, #2
 8012c74:	4413      	add	r3, r2
 8012c76:	685b      	ldr	r3, [r3, #4]
 8012c78:	681b      	ldr	r3, [r3, #0]
 8012c7a:	3330      	adds	r3, #48	; 0x30
 8012c7c:	681b      	ldr	r3, [r3, #0]
 8012c7e:	6879      	ldr	r1, [r7, #4]
 8012c80:	4798      	blx	r3
    }
 8012c82:	bf00      	nop
 8012c84:	3710      	adds	r7, #16
 8012c86:	46bd      	mov	sp, r7
 8012c88:	bd80      	pop	{r7, pc}
 8012c8a:	bf00      	nop
 8012c8c:	0801c9d8 	.word	0x0801c9d8
 8012c90:	0801d2b4 	.word	0x0801d2b4
 8012c94:	0801c7b8 	.word	0x0801c7b8

08012c98 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm>:
    virtual bool getIsPlaying(const Handle handle)
 8012c98:	b580      	push	{r7, lr}
 8012c9a:	b084      	sub	sp, #16
 8012c9c:	af00      	add	r7, sp, #0
 8012c9e:	6078      	str	r0, [r7, #4]
 8012ca0:	6039      	str	r1, [r7, #0]
        assert(handle < no_streams);
 8012ca2:	683b      	ldr	r3, [r7, #0]
 8012ca4:	2b00      	cmp	r3, #0
 8012ca6:	d006      	beq.n	8012cb6 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x1e>
 8012ca8:	4b0b      	ldr	r3, [pc, #44]	; (8012cd8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x40>)
 8012caa:	4a0c      	ldr	r2, [pc, #48]	; (8012cdc <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x44>)
 8012cac:	f44f 71b8 	mov.w	r1, #368	; 0x170
 8012cb0:	480b      	ldr	r0, [pc, #44]	; (8012ce0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x48>)
 8012cb2:	f007 fc05 	bl	801a4c0 <__assert_func>
        Stream& stream = streams[handle];
 8012cb6:	683a      	ldr	r2, [r7, #0]
 8012cb8:	4613      	mov	r3, r2
 8012cba:	00db      	lsls	r3, r3, #3
 8012cbc:	4413      	add	r3, r2
 8012cbe:	009b      	lsls	r3, r3, #2
 8012cc0:	3308      	adds	r3, #8
 8012cc2:	687a      	ldr	r2, [r7, #4]
 8012cc4:	4413      	add	r3, r2
 8012cc6:	3304      	adds	r3, #4
 8012cc8:	60fb      	str	r3, [r7, #12]
        return stream.isPlaying;
 8012cca:	68fb      	ldr	r3, [r7, #12]
 8012ccc:	7f5b      	ldrb	r3, [r3, #29]
    }
 8012cce:	4618      	mov	r0, r3
 8012cd0:	3710      	adds	r7, #16
 8012cd2:	46bd      	mov	sp, r7
 8012cd4:	bd80      	pop	{r7, pc}
 8012cd6:	bf00      	nop
 8012cd8:	0801c9d8 	.word	0x0801c9d8
 8012cdc:	0801d464 	.word	0x0801d464
 8012ce0:	0801c7b8 	.word	0x0801c7b8

08012ce4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE13getFreeHandleEv>:

    Handle getFreeHandle()
 8012ce4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012ce6:	b08d      	sub	sp, #52	; 0x34
 8012ce8:	af00      	add	r7, sp, #0
 8012cea:	6078      	str	r0, [r7, #4]
    {
        // Running in UI thread

        for (uint32_t i = 0; i < no_streams; i++)
 8012cec:	2300      	movs	r3, #0
 8012cee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cf2:	2b00      	cmp	r3, #0
 8012cf4:	d135      	bne.n	8012d62 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE13getFreeHandleEv+0x7e>
        {
            if (streams[i].isActive == false)
 8012cf6:	6879      	ldr	r1, [r7, #4]
 8012cf8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012cfa:	4613      	mov	r3, r2
 8012cfc:	00db      	lsls	r3, r3, #3
 8012cfe:	4413      	add	r3, r2
 8012d00:	009b      	lsls	r3, r3, #2
 8012d02:	440b      	add	r3, r1
 8012d04:	3328      	adds	r3, #40	; 0x28
 8012d06:	781b      	ldrb	r3, [r3, #0]
 8012d08:	2b00      	cmp	r3, #0
 8012d0a:	d126      	bne.n	8012d5a <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE13getFreeHandleEv+0x76>
            {
                // Reset stream parameters
                streams[i] = Stream();
 8012d0c:	f107 0308 	add.w	r3, r7, #8
 8012d10:	4618      	mov	r0, r3
 8012d12:	f7ff fc9a 	bl	801264a <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE6StreamC1Ev>
 8012d16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012d18:	4613      	mov	r3, r2
 8012d1a:	00db      	lsls	r3, r3, #3
 8012d1c:	4413      	add	r3, r2
 8012d1e:	009b      	lsls	r3, r3, #2
 8012d20:	3308      	adds	r3, #8
 8012d22:	687a      	ldr	r2, [r7, #4]
 8012d24:	4413      	add	r3, r2
 8012d26:	3304      	adds	r3, #4
 8012d28:	f107 0408 	add.w	r4, r7, #8
 8012d2c:	469c      	mov	ip, r3
 8012d2e:	f104 0e20 	add.w	lr, r4, #32
 8012d32:	4665      	mov	r5, ip
 8012d34:	4626      	mov	r6, r4
 8012d36:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8012d38:	6028      	str	r0, [r5, #0]
 8012d3a:	6069      	str	r1, [r5, #4]
 8012d3c:	60aa      	str	r2, [r5, #8]
 8012d3e:	60eb      	str	r3, [r5, #12]
 8012d40:	3410      	adds	r4, #16
 8012d42:	f10c 0c10 	add.w	ip, ip, #16
 8012d46:	4574      	cmp	r4, lr
 8012d48:	d1f3      	bne.n	8012d32 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE13getFreeHandleEv+0x4e>
 8012d4a:	4663      	mov	r3, ip
 8012d4c:	4622      	mov	r2, r4
 8012d4e:	8811      	ldrh	r1, [r2, #0]
 8012d50:	7892      	ldrb	r2, [r2, #2]
 8012d52:	8019      	strh	r1, [r3, #0]
 8012d54:	709a      	strb	r2, [r3, #2]

                return static_cast<VideoController::Handle>(i);
 8012d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d58:	e00a      	b.n	8012d70 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE13getFreeHandleEv+0x8c>
        for (uint32_t i = 0; i < no_streams; i++)
 8012d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d5c:	3301      	adds	r3, #1
 8012d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012d60:	e7c6      	b.n	8012cf0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE13getFreeHandleEv+0xc>
            }
        }

        assert(0 && "Unable to find free video stream handle!");
 8012d62:	4b05      	ldr	r3, [pc, #20]	; (8012d78 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE13getFreeHandleEv+0x94>)
 8012d64:	4a05      	ldr	r2, [pc, #20]	; (8012d7c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE13getFreeHandleEv+0x98>)
 8012d66:	f240 11c5 	movw	r1, #453	; 0x1c5
 8012d6a:	4805      	ldr	r0, [pc, #20]	; (8012d80 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE13getFreeHandleEv+0x9c>)
 8012d6c:	f007 fba8 	bl	801a4c0 <__assert_func>
        return static_cast<VideoController::Handle>(0);
    }
 8012d70:	4618      	mov	r0, r3
 8012d72:	3734      	adds	r7, #52	; 0x34
 8012d74:	46bd      	mov	sp, r7
 8012d76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012d78:	0801d5f0 	.word	0x0801d5f0
 8012d7c:	0801d620 	.word	0x0801d620
 8012d80:	0801c7b8 	.word	0x0801c7b8

08012d84 <_GLOBAL__sub_I_mjpegdecoder1>:
 8012d84:	b580      	push	{r7, lr}
 8012d86:	af00      	add	r7, sp, #0
 8012d88:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8012d8c:	2001      	movs	r0, #1
 8012d8e:	f7ff fcf3 	bl	8012778 <_Z41__static_initialization_and_destruction_0ii>
 8012d92:	bd80      	pop	{r7, pc}

08012d94 <_GLOBAL__sub_D_mjpegdecoder1>:
 8012d94:	b580      	push	{r7, lr}
 8012d96:	af00      	add	r7, sp, #0
 8012d98:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8012d9c:	2000      	movs	r0, #0
 8012d9e:	f7ff fceb 	bl	8012778 <_Z41__static_initialization_and_destruction_0ii>
 8012da2:	bd80      	pop	{r7, pc}

08012da4 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks>:
static uint32_t TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
 8012da4:	b480      	push	{r7}
 8012da6:	b097      	sub	sp, #92	; 0x5c
 8012da8:	af00      	add	r7, sp, #0
 8012daa:	60f8      	str	r0, [r7, #12]
 8012dac:	60b9      	str	r1, [r7, #8]
 8012dae:	607a      	str	r2, [r7, #4]
 8012db0:	603b      	str	r3, [r7, #0]
  int32_t c_red, c_blue, c_green;

  uint8_t *pOutAddr, *pOutAddr2;
  uint8_t *pChrom, *pLum;

  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
 8012db2:	683b      	ldr	r3, [r7, #0]
 8012db4:	4a29      	ldr	r2, [pc, #164]	; (8012e5c <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xb8>)
 8012db6:	fba2 2303 	umull	r2, r3, r2, r3
 8012dba:	0a1b      	lsrs	r3, r3, #8
 8012dbc:	633b      	str	r3, [r7, #48]	; 0x30
  currentMCU = BlockIndex;
 8012dbe:	687b      	ldr	r3, [r7, #4]
 8012dc0:	64bb      	str	r3, [r7, #72]	; 0x48

  while(currentMCU < (numberMCU + BlockIndex))
 8012dc2:	e152      	b.n	801306a <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2c6>
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
 8012dc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012dc6:	011a      	lsls	r2, r3, #4
 8012dc8:	4b25      	ldr	r3, [pc, #148]	; (8012e60 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xbc>)
 8012dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012dcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8012dd0:	011b      	lsls	r3, r3, #4
 8012dd2:	62fb      	str	r3, [r7, #44]	; 0x2c

    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
 8012dd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012dd6:	011b      	lsls	r3, r3, #4
 8012dd8:	4a21      	ldr	r2, [pc, #132]	; (8012e60 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xbc>)
 8012dda:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8012ddc:	fbb3 f1f2 	udiv	r1, r3, r2
 8012de0:	fb01 f202 	mul.w	r2, r1, r2
 8012de4:	1a9b      	subs	r3, r3, r2
 8012de6:	62bb      	str	r3, [r7, #40]	; 0x28

    //tgfx: Set stride to the full width of the RGB Buffer, and not the video itself.
    JPEG_ConvertorParams.ScaledWidth = 800 * 2;
 8012de8:	4b1d      	ldr	r3, [pc, #116]	; (8012e60 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xbc>)
 8012dea:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8012dee:	629a      	str	r2, [r3, #40]	; 0x28

    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8012df0:	4b1b      	ldr	r3, [pc, #108]	; (8012e60 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xbc>)
 8012df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012df4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012df6:	fb03 f202 	mul.w	r2, r3, r2
 8012dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012dfc:	005b      	lsls	r3, r3, #1
 8012dfe:	4413      	add	r3, r2
 8012e00:	647b      	str	r3, [r7, #68]	; 0x44

    currentMCU++;
 8012e02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012e04:	3301      	adds	r3, #1
 8012e06:	64bb      	str	r3, [r7, #72]	; 0x48

    pChrom = pInBuffer + 256; /* pChroma = pInBuffer + 4*64 */
 8012e08:	68fb      	ldr	r3, [r7, #12]
 8012e0a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8012e0e:	63bb      	str	r3, [r7, #56]	; 0x38

    pLum = pInBuffer;
 8012e10:	68fb      	ldr	r3, [r7, #12]
 8012e12:	637b      	str	r3, [r7, #52]	; 0x34

    for(i= 0; i <  16; i+=2)
 8012e14:	2300      	movs	r3, #0
 8012e16:	657b      	str	r3, [r7, #84]	; 0x54
 8012e18:	e11f      	b.n	801305a <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2b6>
    {
      if(i == 8)
 8012e1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012e1c:	2b08      	cmp	r3, #8
 8012e1e:	d102      	bne.n	8012e26 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x82>
      {
        pLum = pInBuffer + 128;
 8012e20:	68fb      	ldr	r3, [r7, #12]
 8012e22:	3380      	adds	r3, #128	; 0x80
 8012e24:	637b      	str	r3, [r7, #52]	; 0x34
      }

      if(refline < JPEG_ConvertorParams.ScaledWidth * 480)
 8012e26:	4b0e      	ldr	r3, [pc, #56]	; (8012e60 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xbc>)
 8012e28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012e2a:	4613      	mov	r3, r2
 8012e2c:	011b      	lsls	r3, r3, #4
 8012e2e:	1a9b      	subs	r3, r3, r2
 8012e30:	015b      	lsls	r3, r3, #5
 8012e32:	461a      	mov	r2, r3
 8012e34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012e36:	4293      	cmp	r3, r2
 8012e38:	f080 810c 	bcs.w	8013054 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2b0>
      {
        pOutAddr = pOutBuffer + refline;
 8012e3c:	68ba      	ldr	r2, [r7, #8]
 8012e3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012e40:	4413      	add	r3, r2
 8012e42:	643b      	str	r3, [r7, #64]	; 0x40
        pOutAddr2 = pOutAddr + JPEG_ConvertorParams.ScaledWidth;
 8012e44:	4b06      	ldr	r3, [pc, #24]	; (8012e60 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xbc>)
 8012e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012e48:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012e4a:	4413      	add	r3, r2
 8012e4c:	63fb      	str	r3, [r7, #60]	; 0x3c

        for(k= 0; k<2; k++)
 8012e4e:	2300      	movs	r3, #0
 8012e50:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012e52:	e0f2      	b.n	801303a <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x296>
        {
          for(j=0; j < 8; j+=2)
 8012e54:	2300      	movs	r3, #0
 8012e56:	653b      	str	r3, [r7, #80]	; 0x50
 8012e58:	e0e5      	b.n	8013026 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x282>
 8012e5a:	bf00      	nop
 8012e5c:	aaaaaaab 	.word	0xaaaaaaab
 8012e60:	2001f108 	.word	0x2001f108
          {
            cbcomp = (int32_t)(*(pChrom));
 8012e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e66:	781b      	ldrb	r3, [r3, #0]
 8012e68:	627b      	str	r3, [r7, #36]	; 0x24
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 8012e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e6c:	009b      	lsls	r3, r3, #2
 8012e6e:	4a86      	ldr	r2, [pc, #536]	; (8013088 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2e4>)
 8012e70:	4413      	add	r3, r2
 8012e72:	681b      	ldr	r3, [r3, #0]
 8012e74:	623b      	str	r3, [r7, #32]

            crcomp = (int32_t)(*(pChrom + 64));
 8012e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e78:	3340      	adds	r3, #64	; 0x40
 8012e7a:	781b      	ldrb	r3, [r3, #0]
 8012e7c:	61fb      	str	r3, [r7, #28]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
 8012e7e:	69fb      	ldr	r3, [r7, #28]
 8012e80:	009b      	lsls	r3, r3, #2
 8012e82:	4a82      	ldr	r2, [pc, #520]	; (801308c <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2e8>)
 8012e84:	4413      	add	r3, r2
 8012e86:	681b      	ldr	r3, [r3, #0]
 8012e88:	61bb      	str	r3, [r7, #24]

            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
 8012e8a:	69fb      	ldr	r3, [r7, #28]
 8012e8c:	009b      	lsls	r3, r3, #2
 8012e8e:	4a80      	ldr	r2, [pc, #512]	; (8013090 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2ec>)
 8012e90:	4413      	add	r3, r2
 8012e92:	681a      	ldr	r2, [r3, #0]
 8012e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e96:	009b      	lsls	r3, r3, #2
 8012e98:	497e      	ldr	r1, [pc, #504]	; (8013094 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2f0>)
 8012e9a:	440b      	add	r3, r1
 8012e9c:	681b      	ldr	r3, [r3, #0]
 8012e9e:	4413      	add	r3, r2
 8012ea0:	141b      	asrs	r3, r3, #16
 8012ea2:	617b      	str	r3, [r7, #20]
            pOutAddr2[3 + JPEG_GREEN_OFFSET/8] = CLAMP(ycomp + c_green);
            pOutAddr2[3 + JPEG_BLUE_OFFSET/8] = CLAMP(ycomp + c_blue);

#elif (JPEG_RGB_FORMAT == JPEG_RGB565)

            ycomp = (int32_t)(*(pLum +j));
 8012ea4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012ea6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012ea8:	4413      	add	r3, r2
 8012eaa:	781b      	ldrb	r3, [r3, #0]
 8012eac:	613b      	str	r3, [r7, #16]

            *(__IO uint16_t *)pOutAddr =
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8012eae:	693a      	ldr	r2, [r7, #16]
 8012eb0:	69bb      	ldr	r3, [r7, #24]
 8012eb2:	4413      	add	r3, r2
 8012eb4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8012eb8:	4a77      	ldr	r2, [pc, #476]	; (8013098 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2f4>)
 8012eba:	5cd3      	ldrb	r3, [r2, r3]
 8012ebc:	08db      	lsrs	r3, r3, #3
 8012ebe:	b2db      	uxtb	r3, r3
 8012ec0:	02db      	lsls	r3, r3, #11
 8012ec2:	b21a      	sxth	r2, r3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8012ec4:	6939      	ldr	r1, [r7, #16]
 8012ec6:	697b      	ldr	r3, [r7, #20]
 8012ec8:	440b      	add	r3, r1
 8012eca:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8012ece:	4972      	ldr	r1, [pc, #456]	; (8013098 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2f4>)
 8012ed0:	5ccb      	ldrb	r3, [r1, r3]
 8012ed2:	089b      	lsrs	r3, r3, #2
 8012ed4:	b2db      	uxtb	r3, r3
 8012ed6:	015b      	lsls	r3, r3, #5
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8012ed8:	b21b      	sxth	r3, r3
 8012eda:	4313      	orrs	r3, r2
 8012edc:	b21a      	sxth	r2, r3
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 8012ede:	6939      	ldr	r1, [r7, #16]
 8012ee0:	6a3b      	ldr	r3, [r7, #32]
 8012ee2:	440b      	add	r3, r1
 8012ee4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8012ee8:	496b      	ldr	r1, [pc, #428]	; (8013098 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2f4>)
 8012eea:	5ccb      	ldrb	r3, [r1, r3]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8012eec:	08db      	lsrs	r3, r3, #3
 8012eee:	b2db      	uxtb	r3, r3
 8012ef0:	b21b      	sxth	r3, r3
 8012ef2:	4313      	orrs	r3, r2
 8012ef4:	b21b      	sxth	r3, r3
 8012ef6:	b29a      	uxth	r2, r3
            *(__IO uint16_t *)pOutAddr =
 8012ef8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012efa:	801a      	strh	r2, [r3, #0]
            /**********/
            ycomp = (int32_t)(*(pLum +j +1));
 8012efc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012efe:	3301      	adds	r3, #1
 8012f00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012f02:	4413      	add	r3, r2
 8012f04:	781b      	ldrb	r3, [r3, #0]
 8012f06:	613b      	str	r3, [r7, #16]

            *((__IO uint16_t *)(pOutAddr + 2)) =
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8012f08:	693a      	ldr	r2, [r7, #16]
 8012f0a:	69bb      	ldr	r3, [r7, #24]
 8012f0c:	4413      	add	r3, r2
 8012f0e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8012f12:	4a61      	ldr	r2, [pc, #388]	; (8013098 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2f4>)
 8012f14:	5cd3      	ldrb	r3, [r2, r3]
 8012f16:	08db      	lsrs	r3, r3, #3
 8012f18:	b2db      	uxtb	r3, r3
 8012f1a:	02db      	lsls	r3, r3, #11
 8012f1c:	b21a      	sxth	r2, r3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8012f1e:	6939      	ldr	r1, [r7, #16]
 8012f20:	697b      	ldr	r3, [r7, #20]
 8012f22:	440b      	add	r3, r1
 8012f24:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8012f28:	495b      	ldr	r1, [pc, #364]	; (8013098 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2f4>)
 8012f2a:	5ccb      	ldrb	r3, [r1, r3]
 8012f2c:	089b      	lsrs	r3, r3, #2
 8012f2e:	b2db      	uxtb	r3, r3
 8012f30:	015b      	lsls	r3, r3, #5
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8012f32:	b21b      	sxth	r3, r3
 8012f34:	4313      	orrs	r3, r2
 8012f36:	b21a      	sxth	r2, r3
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 8012f38:	6939      	ldr	r1, [r7, #16]
 8012f3a:	6a3b      	ldr	r3, [r7, #32]
 8012f3c:	440b      	add	r3, r1
 8012f3e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8012f42:	4955      	ldr	r1, [pc, #340]	; (8013098 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2f4>)
 8012f44:	5ccb      	ldrb	r3, [r1, r3]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8012f46:	08db      	lsrs	r3, r3, #3
 8012f48:	b2db      	uxtb	r3, r3
 8012f4a:	b21b      	sxth	r3, r3
 8012f4c:	4313      	orrs	r3, r2
 8012f4e:	b21a      	sxth	r2, r3
            *((__IO uint16_t *)(pOutAddr + 2)) =
 8012f50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012f52:	3302      	adds	r3, #2
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8012f54:	b292      	uxth	r2, r2
            *((__IO uint16_t *)(pOutAddr + 2)) =
 8012f56:	801a      	strh	r2, [r3, #0]

            /**********/
            ycomp = (int32_t)(*(pLum +j +8));
 8012f58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012f5a:	3308      	adds	r3, #8
 8012f5c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012f5e:	4413      	add	r3, r2
 8012f60:	781b      	ldrb	r3, [r3, #0]
 8012f62:	613b      	str	r3, [r7, #16]

            *(__IO uint16_t *)pOutAddr2 =
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8012f64:	693a      	ldr	r2, [r7, #16]
 8012f66:	69bb      	ldr	r3, [r7, #24]
 8012f68:	4413      	add	r3, r2
 8012f6a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8012f6e:	4a4a      	ldr	r2, [pc, #296]	; (8013098 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2f4>)
 8012f70:	5cd3      	ldrb	r3, [r2, r3]
 8012f72:	08db      	lsrs	r3, r3, #3
 8012f74:	b2db      	uxtb	r3, r3
 8012f76:	02db      	lsls	r3, r3, #11
 8012f78:	b21a      	sxth	r2, r3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8012f7a:	6939      	ldr	r1, [r7, #16]
 8012f7c:	697b      	ldr	r3, [r7, #20]
 8012f7e:	440b      	add	r3, r1
 8012f80:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8012f84:	4944      	ldr	r1, [pc, #272]	; (8013098 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2f4>)
 8012f86:	5ccb      	ldrb	r3, [r1, r3]
 8012f88:	089b      	lsrs	r3, r3, #2
 8012f8a:	b2db      	uxtb	r3, r3
 8012f8c:	015b      	lsls	r3, r3, #5
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8012f8e:	b21b      	sxth	r3, r3
 8012f90:	4313      	orrs	r3, r2
 8012f92:	b21a      	sxth	r2, r3
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 8012f94:	6939      	ldr	r1, [r7, #16]
 8012f96:	6a3b      	ldr	r3, [r7, #32]
 8012f98:	440b      	add	r3, r1
 8012f9a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8012f9e:	493e      	ldr	r1, [pc, #248]	; (8013098 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2f4>)
 8012fa0:	5ccb      	ldrb	r3, [r1, r3]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8012fa2:	08db      	lsrs	r3, r3, #3
 8012fa4:	b2db      	uxtb	r3, r3
 8012fa6:	b21b      	sxth	r3, r3
 8012fa8:	4313      	orrs	r3, r2
 8012faa:	b21b      	sxth	r3, r3
 8012fac:	b29a      	uxth	r2, r3
            *(__IO uint16_t *)pOutAddr2 =
 8012fae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012fb0:	801a      	strh	r2, [r3, #0]

            /**********/
            ycomp = (int32_t)(*(pLum +j +8 +1));
 8012fb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012fb4:	3309      	adds	r3, #9
 8012fb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012fb8:	4413      	add	r3, r2
 8012fba:	781b      	ldrb	r3, [r3, #0]
 8012fbc:	613b      	str	r3, [r7, #16]

            *((__IO uint16_t *)(pOutAddr2 +2)) =
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8012fbe:	693a      	ldr	r2, [r7, #16]
 8012fc0:	69bb      	ldr	r3, [r7, #24]
 8012fc2:	4413      	add	r3, r2
 8012fc4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8012fc8:	4a33      	ldr	r2, [pc, #204]	; (8013098 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2f4>)
 8012fca:	5cd3      	ldrb	r3, [r2, r3]
 8012fcc:	08db      	lsrs	r3, r3, #3
 8012fce:	b2db      	uxtb	r3, r3
 8012fd0:	02db      	lsls	r3, r3, #11
 8012fd2:	b21a      	sxth	r2, r3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8012fd4:	6939      	ldr	r1, [r7, #16]
 8012fd6:	697b      	ldr	r3, [r7, #20]
 8012fd8:	440b      	add	r3, r1
 8012fda:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8012fde:	492e      	ldr	r1, [pc, #184]	; (8013098 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2f4>)
 8012fe0:	5ccb      	ldrb	r3, [r1, r3]
 8012fe2:	089b      	lsrs	r3, r3, #2
 8012fe4:	b2db      	uxtb	r3, r3
 8012fe6:	015b      	lsls	r3, r3, #5
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8012fe8:	b21b      	sxth	r3, r3
 8012fea:	4313      	orrs	r3, r2
 8012fec:	b21a      	sxth	r2, r3
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 8012fee:	6939      	ldr	r1, [r7, #16]
 8012ff0:	6a3b      	ldr	r3, [r7, #32]
 8012ff2:	440b      	add	r3, r1
 8012ff4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8012ff8:	4927      	ldr	r1, [pc, #156]	; (8013098 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2f4>)
 8012ffa:	5ccb      	ldrb	r3, [r1, r3]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8012ffc:	08db      	lsrs	r3, r3, #3
 8012ffe:	b2db      	uxtb	r3, r3
 8013000:	b21b      	sxth	r3, r3
 8013002:	4313      	orrs	r3, r2
 8013004:	b21a      	sxth	r2, r3
            *((__IO uint16_t *)(pOutAddr2 +2)) =
 8013006:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013008:	3302      	adds	r3, #2
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 801300a:	b292      	uxth	r2, r2
            *((__IO uint16_t *)(pOutAddr2 +2)) =
 801300c:	801a      	strh	r2, [r3, #0]
#endif /* JPEG_RGB_FORMAT */

            pOutAddr += JPEG_BYTES_PER_PIXEL * 2;
 801300e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013010:	3304      	adds	r3, #4
 8013012:	643b      	str	r3, [r7, #64]	; 0x40
            pOutAddr2 += JPEG_BYTES_PER_PIXEL * 2;
 8013014:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013016:	3304      	adds	r3, #4
 8013018:	63fb      	str	r3, [r7, #60]	; 0x3c

            pChrom++;
 801301a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801301c:	3301      	adds	r3, #1
 801301e:	63bb      	str	r3, [r7, #56]	; 0x38
          for(j=0; j < 8; j+=2)
 8013020:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013022:	3302      	adds	r3, #2
 8013024:	653b      	str	r3, [r7, #80]	; 0x50
 8013026:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013028:	2b07      	cmp	r3, #7
 801302a:	f67f af1b 	bls.w	8012e64 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xc0>
          }
          pLum += 64;
 801302e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013030:	3340      	adds	r3, #64	; 0x40
 8013032:	637b      	str	r3, [r7, #52]	; 0x34
        for(k= 0; k<2; k++)
 8013034:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013036:	3301      	adds	r3, #1
 8013038:	64fb      	str	r3, [r7, #76]	; 0x4c
 801303a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801303c:	2b01      	cmp	r3, #1
 801303e:	f67f af09 	bls.w	8012e54 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xb0>
        }

        pLum = pLum - 128 + 16;
 8013042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013044:	3b70      	subs	r3, #112	; 0x70
 8013046:	637b      	str	r3, [r7, #52]	; 0x34

        refline += 2*JPEG_ConvertorParams.ScaledWidth;
 8013048:	4b14      	ldr	r3, [pc, #80]	; (801309c <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2f8>)
 801304a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801304c:	005b      	lsls	r3, r3, #1
 801304e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013050:	4413      	add	r3, r2
 8013052:	647b      	str	r3, [r7, #68]	; 0x44
    for(i= 0; i <  16; i+=2)
 8013054:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013056:	3302      	adds	r3, #2
 8013058:	657b      	str	r3, [r7, #84]	; 0x54
 801305a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801305c:	2b0f      	cmp	r3, #15
 801305e:	f67f aedc 	bls.w	8012e1a <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x76>
      }
    }

    pInBuffer +=  YCBCR_420_BLOCK_SIZE;
 8013062:	68fb      	ldr	r3, [r7, #12]
 8013064:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8013068:	60fb      	str	r3, [r7, #12]
  while(currentMCU < (numberMCU + BlockIndex))
 801306a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801306c:	687b      	ldr	r3, [r7, #4]
 801306e:	4413      	add	r3, r2
 8013070:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013072:	429a      	cmp	r2, r3
 8013074:	f4ff aea6 	bcc.w	8012dc4 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x20>
  }
  return numberMCU;
 8013078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 801307a:	4618      	mov	r0, r3
 801307c:	375c      	adds	r7, #92	; 0x5c
 801307e:	46bd      	mov	sp, r7
 8013080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013084:	4770      	bx	lr
 8013086:	bf00      	nop
 8013088:	2001f548 	.word	0x2001f548
 801308c:	2001f148 	.word	0x2001f148
 8013090:	2001f948 	.word	0x2001f948
 8013094:	2001fd48 	.word	0x2001fd48
 8013098:	0801e350 	.word	0x0801e350
 801309c:	2001f108 	.word	0x2001f108

080130a0 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr422_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
 80130a0:	b480      	push	{r7}
 80130a2:	b097      	sub	sp, #92	; 0x5c
 80130a4:	af00      	add	r7, sp, #0
 80130a6:	60f8      	str	r0, [r7, #12]
 80130a8:	60b9      	str	r1, [r7, #8]
 80130aa:	607a      	str	r2, [r7, #4]
 80130ac:	603b      	str	r3, [r7, #0]
  int32_t c_red, c_blue, c_green;

  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;

  numberMCU = DataCount / YCBCR_422_BLOCK_SIZE;
 80130ae:	683b      	ldr	r3, [r7, #0]
 80130b0:	0a1b      	lsrs	r3, r3, #8
 80130b2:	637b      	str	r3, [r7, #52]	; 0x34
  currentMCU = BlockIndex;
 80130b4:	687b      	ldr	r3, [r7, #4]
 80130b6:	64bb      	str	r3, [r7, #72]	; 0x48

  while(currentMCU < (numberMCU + BlockIndex))
 80130b8:	e0d9      	b.n	801326e <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1ce>
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
 80130ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80130bc:	011a      	lsls	r2, r3, #4
 80130be:	4b73      	ldr	r3, [pc, #460]	; (801328c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1ec>)
 80130c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80130c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80130c6:	00db      	lsls	r3, r3, #3
 80130c8:	633b      	str	r3, [r7, #48]	; 0x30

    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
 80130ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80130cc:	011b      	lsls	r3, r3, #4
 80130ce:	4a6f      	ldr	r2, [pc, #444]	; (801328c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1ec>)
 80130d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80130d2:	fbb3 f1f2 	udiv	r1, r3, r2
 80130d6:	fb01 f202 	mul.w	r2, r1, r2
 80130da:	1a9b      	subs	r3, r3, r2
 80130dc:	62fb      	str	r3, [r7, #44]	; 0x2c

    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 80130de:	4b6b      	ldr	r3, [pc, #428]	; (801328c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1ec>)
 80130e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80130e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80130e4:	fb03 f202 	mul.w	r2, r3, r2
 80130e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130ea:	005b      	lsls	r3, r3, #1
 80130ec:	4413      	add	r3, r2
 80130ee:	647b      	str	r3, [r7, #68]	; 0x44

    currentMCU++;
 80130f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80130f2:	3301      	adds	r3, #1
 80130f4:	64bb      	str	r3, [r7, #72]	; 0x48

    pChrom = pInBuffer + 128; /* pChroma = pInBuffer + 2*64 */
 80130f6:	68fb      	ldr	r3, [r7, #12]
 80130f8:	3380      	adds	r3, #128	; 0x80
 80130fa:	63fb      	str	r3, [r7, #60]	; 0x3c

    pLum = pInBuffer;
 80130fc:	68fb      	ldr	r3, [r7, #12]
 80130fe:	63bb      	str	r3, [r7, #56]	; 0x38

    for(i= 0; i <  8; i++)
 8013100:	2300      	movs	r3, #0
 8013102:	657b      	str	r3, [r7, #84]	; 0x54
 8013104:	e0ab      	b.n	801325e <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1be>
    {
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8013106:	4b61      	ldr	r3, [pc, #388]	; (801328c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1ec>)
 8013108:	691b      	ldr	r3, [r3, #16]
 801310a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801310c:	429a      	cmp	r2, r3
 801310e:	f080 80a3 	bcs.w	8013258 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1b8>
      {
        pOutAddr = pOutBuffer + refline;
 8013112:	68ba      	ldr	r2, [r7, #8]
 8013114:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013116:	4413      	add	r3, r2
 8013118:	643b      	str	r3, [r7, #64]	; 0x40

        for(k= 0; k<2; k++)
 801311a:	2300      	movs	r3, #0
 801311c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801311e:	e08f      	b.n	8013240 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1a0>
        {
          for(j=0; j < 8; j+=2)
 8013120:	2300      	movs	r3, #0
 8013122:	653b      	str	r3, [r7, #80]	; 0x50
 8013124:	e082      	b.n	801322c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x18c>
          {
            cbcomp = (int32_t)(*(pChrom));
 8013126:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013128:	781b      	ldrb	r3, [r3, #0]
 801312a:	62bb      	str	r3, [r7, #40]	; 0x28
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 801312c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801312e:	009b      	lsls	r3, r3, #2
 8013130:	4a57      	ldr	r2, [pc, #348]	; (8013290 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1f0>)
 8013132:	4413      	add	r3, r2
 8013134:	681b      	ldr	r3, [r3, #0]
 8013136:	627b      	str	r3, [r7, #36]	; 0x24

            crcomp = (int32_t)(*(pChrom + 64));
 8013138:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801313a:	3340      	adds	r3, #64	; 0x40
 801313c:	781b      	ldrb	r3, [r3, #0]
 801313e:	623b      	str	r3, [r7, #32]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
 8013140:	6a3b      	ldr	r3, [r7, #32]
 8013142:	009b      	lsls	r3, r3, #2
 8013144:	4a53      	ldr	r2, [pc, #332]	; (8013294 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1f4>)
 8013146:	4413      	add	r3, r2
 8013148:	681b      	ldr	r3, [r3, #0]
 801314a:	61fb      	str	r3, [r7, #28]

            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
 801314c:	6a3b      	ldr	r3, [r7, #32]
 801314e:	009b      	lsls	r3, r3, #2
 8013150:	4a51      	ldr	r2, [pc, #324]	; (8013298 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1f8>)
 8013152:	4413      	add	r3, r2
 8013154:	681a      	ldr	r2, [r3, #0]
 8013156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013158:	009b      	lsls	r3, r3, #2
 801315a:	4950      	ldr	r1, [pc, #320]	; (801329c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1fc>)
 801315c:	440b      	add	r3, r1
 801315e:	681b      	ldr	r3, [r3, #0]
 8013160:	4413      	add	r3, r2
 8013162:	141b      	asrs	r3, r3, #16
 8013164:	61bb      	str	r3, [r7, #24]
            pOutAddr[3 + JPEG_GREEN_OFFSET/8] = CLAMP(ycomp + c_green);
            pOutAddr[3 + JPEG_BLUE_OFFSET/8] = CLAMP(ycomp + c_blue);

#elif (JPEG_RGB_FORMAT == JPEG_RGB565)

            ycomp = (int32_t)(*(pLum +j));
 8013166:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013168:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801316a:	4413      	add	r3, r2
 801316c:	781b      	ldrb	r3, [r3, #0]
 801316e:	617b      	str	r3, [r7, #20]

            *(__IO uint16_t *)pOutAddr =
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8013170:	697a      	ldr	r2, [r7, #20]
 8013172:	69fb      	ldr	r3, [r7, #28]
 8013174:	4413      	add	r3, r2
 8013176:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801317a:	4a49      	ldr	r2, [pc, #292]	; (80132a0 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x200>)
 801317c:	5cd3      	ldrb	r3, [r2, r3]
 801317e:	08db      	lsrs	r3, r3, #3
 8013180:	b2db      	uxtb	r3, r3
 8013182:	02db      	lsls	r3, r3, #11
 8013184:	b21a      	sxth	r2, r3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8013186:	6979      	ldr	r1, [r7, #20]
 8013188:	69bb      	ldr	r3, [r7, #24]
 801318a:	440b      	add	r3, r1
 801318c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8013190:	4943      	ldr	r1, [pc, #268]	; (80132a0 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x200>)
 8013192:	5ccb      	ldrb	r3, [r1, r3]
 8013194:	089b      	lsrs	r3, r3, #2
 8013196:	b2db      	uxtb	r3, r3
 8013198:	015b      	lsls	r3, r3, #5
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 801319a:	b21b      	sxth	r3, r3
 801319c:	4313      	orrs	r3, r2
 801319e:	b21a      	sxth	r2, r3
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 80131a0:	6979      	ldr	r1, [r7, #20]
 80131a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131a4:	440b      	add	r3, r1
 80131a6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80131aa:	493d      	ldr	r1, [pc, #244]	; (80132a0 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x200>)
 80131ac:	5ccb      	ldrb	r3, [r1, r3]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 80131ae:	08db      	lsrs	r3, r3, #3
 80131b0:	b2db      	uxtb	r3, r3
 80131b2:	b21b      	sxth	r3, r3
 80131b4:	4313      	orrs	r3, r2
 80131b6:	b21b      	sxth	r3, r3
 80131b8:	b29a      	uxth	r2, r3
            *(__IO uint16_t *)pOutAddr =
 80131ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80131bc:	801a      	strh	r2, [r3, #0]
            /**********/
            ycomp = (int32_t)(*(pLum +j +1));
 80131be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80131c0:	3301      	adds	r3, #1
 80131c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80131c4:	4413      	add	r3, r2
 80131c6:	781b      	ldrb	r3, [r3, #0]
 80131c8:	617b      	str	r3, [r7, #20]

            *((__IO uint16_t *)(pOutAddr + 2)) =
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 80131ca:	697a      	ldr	r2, [r7, #20]
 80131cc:	69fb      	ldr	r3, [r7, #28]
 80131ce:	4413      	add	r3, r2
 80131d0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80131d4:	4a32      	ldr	r2, [pc, #200]	; (80132a0 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x200>)
 80131d6:	5cd3      	ldrb	r3, [r2, r3]
 80131d8:	08db      	lsrs	r3, r3, #3
 80131da:	b2db      	uxtb	r3, r3
 80131dc:	02db      	lsls	r3, r3, #11
 80131de:	b21a      	sxth	r2, r3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 80131e0:	6979      	ldr	r1, [r7, #20]
 80131e2:	69bb      	ldr	r3, [r7, #24]
 80131e4:	440b      	add	r3, r1
 80131e6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80131ea:	492d      	ldr	r1, [pc, #180]	; (80132a0 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x200>)
 80131ec:	5ccb      	ldrb	r3, [r1, r3]
 80131ee:	089b      	lsrs	r3, r3, #2
 80131f0:	b2db      	uxtb	r3, r3
 80131f2:	015b      	lsls	r3, r3, #5
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 80131f4:	b21b      	sxth	r3, r3
 80131f6:	4313      	orrs	r3, r2
 80131f8:	b21a      	sxth	r2, r3
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 80131fa:	6979      	ldr	r1, [r7, #20]
 80131fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131fe:	440b      	add	r3, r1
 8013200:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8013204:	4926      	ldr	r1, [pc, #152]	; (80132a0 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x200>)
 8013206:	5ccb      	ldrb	r3, [r1, r3]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8013208:	08db      	lsrs	r3, r3, #3
 801320a:	b2db      	uxtb	r3, r3
 801320c:	b21b      	sxth	r3, r3
 801320e:	4313      	orrs	r3, r2
 8013210:	b21a      	sxth	r2, r3
            *((__IO uint16_t *)(pOutAddr + 2)) =
 8013212:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013214:	3302      	adds	r3, #2
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8013216:	b292      	uxth	r2, r2
            *((__IO uint16_t *)(pOutAddr + 2)) =
 8013218:	801a      	strh	r2, [r3, #0]

#endif /* JPEG_RGB_FORMAT*/

            pOutAddr += JPEG_BYTES_PER_PIXEL * 2;
 801321a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801321c:	3304      	adds	r3, #4
 801321e:	643b      	str	r3, [r7, #64]	; 0x40

            pChrom++;
 8013220:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013222:	3301      	adds	r3, #1
 8013224:	63fb      	str	r3, [r7, #60]	; 0x3c
          for(j=0; j < 8; j+=2)
 8013226:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013228:	3302      	adds	r3, #2
 801322a:	653b      	str	r3, [r7, #80]	; 0x50
 801322c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801322e:	2b07      	cmp	r3, #7
 8013230:	f67f af79 	bls.w	8013126 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x86>
          }
          pLum += 64;
 8013234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013236:	3340      	adds	r3, #64	; 0x40
 8013238:	63bb      	str	r3, [r7, #56]	; 0x38
        for(k= 0; k<2; k++)
 801323a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801323c:	3301      	adds	r3, #1
 801323e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013240:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013242:	2b01      	cmp	r3, #1
 8013244:	f67f af6c 	bls.w	8013120 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x80>
        }

        pLum = pLum - 128 + 8;
 8013248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801324a:	3b78      	subs	r3, #120	; 0x78
 801324c:	63bb      	str	r3, [r7, #56]	; 0x38

        refline += JPEG_ConvertorParams.ScaledWidth;
 801324e:	4b0f      	ldr	r3, [pc, #60]	; (801328c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1ec>)
 8013250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013252:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013254:	4413      	add	r3, r2
 8013256:	647b      	str	r3, [r7, #68]	; 0x44
    for(i= 0; i <  8; i++)
 8013258:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801325a:	3301      	adds	r3, #1
 801325c:	657b      	str	r3, [r7, #84]	; 0x54
 801325e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013260:	2b07      	cmp	r3, #7
 8013262:	f67f af50 	bls.w	8013106 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x66>
      }
    }

    pInBuffer +=  YCBCR_422_BLOCK_SIZE;
 8013266:	68fb      	ldr	r3, [r7, #12]
 8013268:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801326c:	60fb      	str	r3, [r7, #12]
  while(currentMCU < (numberMCU + BlockIndex))
 801326e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013270:	687b      	ldr	r3, [r7, #4]
 8013272:	4413      	add	r3, r2
 8013274:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013276:	429a      	cmp	r2, r3
 8013278:	f4ff af1f 	bcc.w	80130ba <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1a>
  }
  return numberMCU;
 801327c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801327e:	4618      	mov	r0, r3
 8013280:	375c      	adds	r7, #92	; 0x5c
 8013282:	46bd      	mov	sp, r7
 8013284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013288:	4770      	bx	lr
 801328a:	bf00      	nop
 801328c:	2001f108 	.word	0x2001f108
 8013290:	2001f548 	.word	0x2001f548
 8013294:	2001f148 	.word	0x2001f148
 8013298:	2001f948 	.word	0x2001f948
 801329c:	2001fd48 	.word	0x2001fd48
 80132a0:	0801e350 	.word	0x0801e350

080132a4 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr444_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
 80132a4:	b480      	push	{r7}
 80132a6:	b095      	sub	sp, #84	; 0x54
 80132a8:	af00      	add	r7, sp, #0
 80132aa:	60f8      	str	r0, [r7, #12]
 80132ac:	60b9      	str	r1, [r7, #8]
 80132ae:	607a      	str	r2, [r7, #4]
 80132b0:	603b      	str	r3, [r7, #0]
  int32_t c_red, c_blue, c_green;

  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;

  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
 80132b2:	683b      	ldr	r3, [r7, #0]
 80132b4:	4a58      	ldr	r2, [pc, #352]	; (8013418 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x174>)
 80132b6:	fba2 2303 	umull	r2, r3, r2, r3
 80132ba:	09db      	lsrs	r3, r3, #7
 80132bc:	633b      	str	r3, [r7, #48]	; 0x30
  currentMCU = BlockIndex;
 80132be:	687b      	ldr	r3, [r7, #4]
 80132c0:	647b      	str	r3, [r7, #68]	; 0x44

  while(currentMCU < (numberMCU + BlockIndex))
 80132c2:	e09a      	b.n	80133fa <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x156>
  {

    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 80132c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80132c6:	00da      	lsls	r2, r3, #3
 80132c8:	4b54      	ldr	r3, [pc, #336]	; (801341c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x178>)
 80132ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80132cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80132d0:	00db      	lsls	r3, r3, #3
 80132d2:	62fb      	str	r3, [r7, #44]	; 0x2c

    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 80132d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80132d6:	00db      	lsls	r3, r3, #3
 80132d8:	4a50      	ldr	r2, [pc, #320]	; (801341c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x178>)
 80132da:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80132dc:	fbb3 f1f2 	udiv	r1, r3, r2
 80132e0:	fb01 f202 	mul.w	r2, r1, r2
 80132e4:	1a9b      	subs	r3, r3, r2
 80132e6:	62bb      	str	r3, [r7, #40]	; 0x28

    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 80132e8:	4b4c      	ldr	r3, [pc, #304]	; (801341c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x178>)
 80132ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80132ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80132ee:	fb03 f202 	mul.w	r2, r3, r2
 80132f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132f4:	005b      	lsls	r3, r3, #1
 80132f6:	4413      	add	r3, r2
 80132f8:	643b      	str	r3, [r7, #64]	; 0x40

    currentMCU++;
 80132fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80132fc:	3301      	adds	r3, #1
 80132fe:	647b      	str	r3, [r7, #68]	; 0x44

    pChrom = pInBuffer + 64; /* pChroma = pInBuffer + 4*64 */
 8013300:	68fb      	ldr	r3, [r7, #12]
 8013302:	3340      	adds	r3, #64	; 0x40
 8013304:	63bb      	str	r3, [r7, #56]	; 0x38

    pLum = pInBuffer;
 8013306:	68fb      	ldr	r3, [r7, #12]
 8013308:	637b      	str	r3, [r7, #52]	; 0x34

    for(i= 0; i <  8; i++)
 801330a:	2300      	movs	r3, #0
 801330c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801330e:	e06e      	b.n	80133ee <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x14a>
    {
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8013310:	4b42      	ldr	r3, [pc, #264]	; (801341c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x178>)
 8013312:	691b      	ldr	r3, [r3, #16]
 8013314:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013316:	429a      	cmp	r2, r3
 8013318:	d266      	bcs.n	80133e8 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x144>
      {
        pOutAddr = pOutBuffer+ refline;
 801331a:	68ba      	ldr	r2, [r7, #8]
 801331c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801331e:	4413      	add	r3, r2
 8013320:	63fb      	str	r3, [r7, #60]	; 0x3c

          for(j=0; j < 8; j++)
 8013322:	2300      	movs	r3, #0
 8013324:	64bb      	str	r3, [r7, #72]	; 0x48
 8013326:	e054      	b.n	80133d2 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x12e>
          {
            cbcomp = (int32_t)(*pChrom);
 8013328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801332a:	781b      	ldrb	r3, [r3, #0]
 801332c:	627b      	str	r3, [r7, #36]	; 0x24
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 801332e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013330:	009b      	lsls	r3, r3, #2
 8013332:	4a3b      	ldr	r2, [pc, #236]	; (8013420 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x17c>)
 8013334:	4413      	add	r3, r2
 8013336:	681b      	ldr	r3, [r3, #0]
 8013338:	623b      	str	r3, [r7, #32]

            crcomp = (int32_t)(*(pChrom + 64));
 801333a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801333c:	3340      	adds	r3, #64	; 0x40
 801333e:	781b      	ldrb	r3, [r3, #0]
 8013340:	61fb      	str	r3, [r7, #28]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
 8013342:	69fb      	ldr	r3, [r7, #28]
 8013344:	009b      	lsls	r3, r3, #2
 8013346:	4a37      	ldr	r2, [pc, #220]	; (8013424 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x180>)
 8013348:	4413      	add	r3, r2
 801334a:	681b      	ldr	r3, [r3, #0]
 801334c:	61bb      	str	r3, [r7, #24]

            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
 801334e:	69fb      	ldr	r3, [r7, #28]
 8013350:	009b      	lsls	r3, r3, #2
 8013352:	4a35      	ldr	r2, [pc, #212]	; (8013428 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x184>)
 8013354:	4413      	add	r3, r2
 8013356:	681a      	ldr	r2, [r3, #0]
 8013358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801335a:	009b      	lsls	r3, r3, #2
 801335c:	4933      	ldr	r1, [pc, #204]	; (801342c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x188>)
 801335e:	440b      	add	r3, r1
 8013360:	681b      	ldr	r3, [r3, #0]
 8013362:	4413      	add	r3, r2
 8013364:	141b      	asrs	r3, r3, #16
 8013366:	617b      	str	r3, [r7, #20]
            pOutAddr[JPEG_GREEN_OFFSET/8] = CLAMP(ycomp + c_green);
            pOutAddr[JPEG_BLUE_OFFSET/8] = CLAMP(ycomp + c_blue);

#elif (JPEG_RGB_FORMAT == JPEG_RGB565)

            ycomp = (int32_t)(*(pLum +j));
 8013368:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801336a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801336c:	4413      	add	r3, r2
 801336e:	781b      	ldrb	r3, [r3, #0]
 8013370:	613b      	str	r3, [r7, #16]

            *(__IO uint16_t *)pOutAddr =
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8013372:	693a      	ldr	r2, [r7, #16]
 8013374:	69bb      	ldr	r3, [r7, #24]
 8013376:	4413      	add	r3, r2
 8013378:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801337c:	4a2c      	ldr	r2, [pc, #176]	; (8013430 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x18c>)
 801337e:	5cd3      	ldrb	r3, [r2, r3]
 8013380:	08db      	lsrs	r3, r3, #3
 8013382:	b2db      	uxtb	r3, r3
 8013384:	02db      	lsls	r3, r3, #11
 8013386:	b21a      	sxth	r2, r3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8013388:	6939      	ldr	r1, [r7, #16]
 801338a:	697b      	ldr	r3, [r7, #20]
 801338c:	440b      	add	r3, r1
 801338e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8013392:	4927      	ldr	r1, [pc, #156]	; (8013430 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x18c>)
 8013394:	5ccb      	ldrb	r3, [r1, r3]
 8013396:	089b      	lsrs	r3, r3, #2
 8013398:	b2db      	uxtb	r3, r3
 801339a:	015b      	lsls	r3, r3, #5
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 801339c:	b21b      	sxth	r3, r3
 801339e:	4313      	orrs	r3, r2
 80133a0:	b21a      	sxth	r2, r3
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 80133a2:	6939      	ldr	r1, [r7, #16]
 80133a4:	6a3b      	ldr	r3, [r7, #32]
 80133a6:	440b      	add	r3, r1
 80133a8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80133ac:	4920      	ldr	r1, [pc, #128]	; (8013430 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x18c>)
 80133ae:	5ccb      	ldrb	r3, [r1, r3]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 80133b0:	08db      	lsrs	r3, r3, #3
 80133b2:	b2db      	uxtb	r3, r3
 80133b4:	b21b      	sxth	r3, r3
 80133b6:	4313      	orrs	r3, r2
 80133b8:	b21b      	sxth	r3, r3
 80133ba:	b29a      	uxth	r2, r3
            *(__IO uint16_t *)pOutAddr =
 80133bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80133be:	801a      	strh	r2, [r3, #0]

#endif /* JPEG_RGB_FORMAT */

            pOutAddr += JPEG_BYTES_PER_PIXEL;
 80133c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80133c2:	3302      	adds	r3, #2
 80133c4:	63fb      	str	r3, [r7, #60]	; 0x3c

            pChrom++;
 80133c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80133c8:	3301      	adds	r3, #1
 80133ca:	63bb      	str	r3, [r7, #56]	; 0x38
          for(j=0; j < 8; j++)
 80133cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80133ce:	3301      	adds	r3, #1
 80133d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80133d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80133d4:	2b07      	cmp	r3, #7
 80133d6:	d9a7      	bls.n	8013328 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x84>
          }
          pLum += 8;
 80133d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80133da:	3308      	adds	r3, #8
 80133dc:	637b      	str	r3, [r7, #52]	; 0x34

        refline += JPEG_ConvertorParams.ScaledWidth;
 80133de:	4b0f      	ldr	r3, [pc, #60]	; (801341c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x178>)
 80133e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80133e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80133e4:	4413      	add	r3, r2
 80133e6:	643b      	str	r3, [r7, #64]	; 0x40
    for(i= 0; i <  8; i++)
 80133e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80133ea:	3301      	adds	r3, #1
 80133ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 80133ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80133f0:	2b07      	cmp	r3, #7
 80133f2:	d98d      	bls.n	8013310 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x6c>
      }
    }

    pInBuffer +=  YCBCR_444_BLOCK_SIZE;
 80133f4:	68fb      	ldr	r3, [r7, #12]
 80133f6:	33c0      	adds	r3, #192	; 0xc0
 80133f8:	60fb      	str	r3, [r7, #12]
  while(currentMCU < (numberMCU + BlockIndex))
 80133fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80133fc:	687b      	ldr	r3, [r7, #4]
 80133fe:	4413      	add	r3, r2
 8013400:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013402:	429a      	cmp	r2, r3
 8013404:	f4ff af5e 	bcc.w	80132c4 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x20>
  }
  return numberMCU;
 8013408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 801340a:	4618      	mov	r0, r3
 801340c:	3754      	adds	r7, #84	; 0x54
 801340e:	46bd      	mov	sp, r7
 8013410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013414:	4770      	bx	lr
 8013416:	bf00      	nop
 8013418:	aaaaaaab 	.word	0xaaaaaaab
 801341c:	2001f108 	.word	0x2001f108
 8013420:	2001f548 	.word	0x2001f548
 8013424:	2001f148 	.word	0x2001f148
 8013428:	2001f948 	.word	0x2001f948
 801342c:	2001fd48 	.word	0x2001fd48
 8013430:	0801e350 	.word	0x0801e350

08013434 <JPEG_MCU_Gray_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_Gray_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
 8013434:	b480      	push	{r7}
 8013436:	b08f      	sub	sp, #60	; 0x3c
 8013438:	af00      	add	r7, sp, #0
 801343a:	60f8      	str	r0, [r7, #12]
 801343c:	60b9      	str	r1, [r7, #8]
 801343e:	607a      	str	r2, [r7, #4]
 8013440:	603b      	str	r3, [r7, #0]
  uint32_t refline;

  uint32_t i,j, ySample;
  uint8_t *pOutAddr,  *pLum;

  numberMCU = DataCount / GRAY_444_BLOCK_SIZE;
 8013442:	683b      	ldr	r3, [r7, #0]
 8013444:	099b      	lsrs	r3, r3, #6
 8013446:	61fb      	str	r3, [r7, #28]
  currentMCU = BlockIndex;
 8013448:	687b      	ldr	r3, [r7, #4]
 801344a:	637b      	str	r3, [r7, #52]	; 0x34

  while(currentMCU < (numberMCU + BlockIndex))
 801344c:	e05e      	b.n	801350c <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xd8>
  {
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 801344e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013450:	00da      	lsls	r2, r3, #3
 8013452:	4b35      	ldr	r3, [pc, #212]	; (8013528 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xf4>)
 8013454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013456:	fbb2 f3f3 	udiv	r3, r2, r3
 801345a:	00db      	lsls	r3, r3, #3
 801345c:	61bb      	str	r3, [r7, #24]

    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 801345e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013460:	00db      	lsls	r3, r3, #3
 8013462:	4a31      	ldr	r2, [pc, #196]	; (8013528 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xf4>)
 8013464:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8013466:	fbb3 f1f2 	udiv	r1, r3, r2
 801346a:	fb01 f202 	mul.w	r2, r1, r2
 801346e:	1a9b      	subs	r3, r3, r2
 8013470:	617b      	str	r3, [r7, #20]

    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8013472:	4b2d      	ldr	r3, [pc, #180]	; (8013528 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xf4>)
 8013474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013476:	69ba      	ldr	r2, [r7, #24]
 8013478:	fb03 f202 	mul.w	r2, r3, r2
 801347c:	697b      	ldr	r3, [r7, #20]
 801347e:	005b      	lsls	r3, r3, #1
 8013480:	4413      	add	r3, r2
 8013482:	633b      	str	r3, [r7, #48]	; 0x30

    currentMCU++;
 8013484:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013486:	3301      	adds	r3, #1
 8013488:	637b      	str	r3, [r7, #52]	; 0x34

    pLum = pInBuffer;
 801348a:	68fb      	ldr	r3, [r7, #12]
 801348c:	623b      	str	r3, [r7, #32]

    for(i= 0; i <  8; i++)
 801348e:	2300      	movs	r3, #0
 8013490:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013492:	e035      	b.n	8013500 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xcc>
    {
      pOutAddr = pOutBuffer + refline;
 8013494:	68ba      	ldr	r2, [r7, #8]
 8013496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013498:	4413      	add	r3, r2
 801349a:	627b      	str	r3, [r7, #36]	; 0x24
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 801349c:	4b22      	ldr	r3, [pc, #136]	; (8013528 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xf4>)
 801349e:	691b      	ldr	r3, [r3, #16]
 80134a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80134a2:	429a      	cmp	r2, r3
 80134a4:	d229      	bcs.n	80134fa <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xc6>
      {
        for(j=0; j < 8; j++)
 80134a6:	2300      	movs	r3, #0
 80134a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80134aa:	e01e      	b.n	80134ea <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xb6>
        {
          ySample =   (uint32_t)(*pLum);
 80134ac:	6a3b      	ldr	r3, [r7, #32]
 80134ae:	781b      	ldrb	r3, [r3, #0]
 80134b0:	613b      	str	r3, [r7, #16]
          pOutAddr[1] =  ySample;
          pOutAddr[2] =  ySample;

#elif (JPEG_RGB_FORMAT == JPEG_RGB565)

          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);
 80134b2:	693b      	ldr	r3, [r7, #16]
 80134b4:	08db      	lsrs	r3, r3, #3
 80134b6:	b29b      	uxth	r3, r3
 80134b8:	02db      	lsls	r3, r3, #11
 80134ba:	b29a      	uxth	r2, r3
 80134bc:	693b      	ldr	r3, [r7, #16]
 80134be:	089b      	lsrs	r3, r3, #2
 80134c0:	b29b      	uxth	r3, r3
 80134c2:	015b      	lsls	r3, r3, #5
 80134c4:	b29b      	uxth	r3, r3
 80134c6:	4313      	orrs	r3, r2
 80134c8:	b29a      	uxth	r2, r3
 80134ca:	693b      	ldr	r3, [r7, #16]
 80134cc:	08db      	lsrs	r3, r3, #3
 80134ce:	b29b      	uxth	r3, r3
 80134d0:	4313      	orrs	r3, r2
 80134d2:	b29a      	uxth	r2, r3
 80134d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134d6:	801a      	strh	r2, [r3, #0]

#endif /* JPEG_RGB_FORMAT */

          pOutAddr += JPEG_BYTES_PER_PIXEL;
 80134d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134da:	3302      	adds	r3, #2
 80134dc:	627b      	str	r3, [r7, #36]	; 0x24
          pLum++;
 80134de:	6a3b      	ldr	r3, [r7, #32]
 80134e0:	3301      	adds	r3, #1
 80134e2:	623b      	str	r3, [r7, #32]
        for(j=0; j < 8; j++)
 80134e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134e6:	3301      	adds	r3, #1
 80134e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80134ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134ec:	2b07      	cmp	r3, #7
 80134ee:	d9dd      	bls.n	80134ac <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x78>
        }

        refline += JPEG_ConvertorParams.ScaledWidth;
 80134f0:	4b0d      	ldr	r3, [pc, #52]	; (8013528 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xf4>)
 80134f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80134f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80134f6:	4413      	add	r3, r2
 80134f8:	633b      	str	r3, [r7, #48]	; 0x30
    for(i= 0; i <  8; i++)
 80134fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134fc:	3301      	adds	r3, #1
 80134fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013502:	2b07      	cmp	r3, #7
 8013504:	d9c6      	bls.n	8013494 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x60>
      }
    }

    pInBuffer +=  GRAY_444_BLOCK_SIZE;
 8013506:	68fb      	ldr	r3, [r7, #12]
 8013508:	3340      	adds	r3, #64	; 0x40
 801350a:	60fb      	str	r3, [r7, #12]
  while(currentMCU < (numberMCU + BlockIndex))
 801350c:	69fa      	ldr	r2, [r7, #28]
 801350e:	687b      	ldr	r3, [r7, #4]
 8013510:	4413      	add	r3, r2
 8013512:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013514:	429a      	cmp	r2, r3
 8013516:	d39a      	bcc.n	801344e <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x1a>
  }
  return numberMCU;
 8013518:	69fb      	ldr	r3, [r7, #28]
}
 801351a:	4618      	mov	r0, r3
 801351c:	373c      	adds	r7, #60	; 0x3c
 801351e:	46bd      	mov	sp, r7
 8013520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013524:	4770      	bx	lr
 8013526:	bf00      	nop
 8013528:	2001f108 	.word	0x2001f108

0801352c <JPEG_MCU_YCCK_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCCK_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
 801352c:	b480      	push	{r7}
 801352e:	b093      	sub	sp, #76	; 0x4c
 8013530:	af00      	add	r7, sp, #0
 8013532:	60f8      	str	r0, [r7, #12]
 8013534:	60b9      	str	r1, [r7, #8]
 8013536:	607a      	str	r2, [r7, #4]
 8013538:	603b      	str	r3, [r7, #0]

  int32_t c_red, c_blue, c_green;

  uint8_t *pOutAddr, *pChrom;

  numberMCU = DataCount / CMYK_444_BLOCK_SIZE;
 801353a:	683b      	ldr	r3, [r7, #0]
 801353c:	0a1b      	lsrs	r3, r3, #8
 801353e:	62fb      	str	r3, [r7, #44]	; 0x2c
  currentMCU = BlockIndex;
 8013540:	687b      	ldr	r3, [r7, #4]
 8013542:	63fb      	str	r3, [r7, #60]	; 0x3c

  while(currentMCU < (numberMCU + BlockIndex))
 8013544:	e08b      	b.n	801365e <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x132>
  {

    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 8013546:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013548:	00da      	lsls	r2, r3, #3
 801354a:	4b4c      	ldr	r3, [pc, #304]	; (801367c <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x150>)
 801354c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801354e:	fbb2 f3f3 	udiv	r3, r2, r3
 8013552:	00db      	lsls	r3, r3, #3
 8013554:	62bb      	str	r3, [r7, #40]	; 0x28

    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 8013556:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013558:	00db      	lsls	r3, r3, #3
 801355a:	4a48      	ldr	r2, [pc, #288]	; (801367c <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x150>)
 801355c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801355e:	fbb3 f1f2 	udiv	r1, r3, r2
 8013562:	fb01 f202 	mul.w	r2, r1, r2
 8013566:	1a9b      	subs	r3, r3, r2
 8013568:	627b      	str	r3, [r7, #36]	; 0x24

    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 801356a:	4b44      	ldr	r3, [pc, #272]	; (801367c <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x150>)
 801356c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801356e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013570:	fb03 f202 	mul.w	r2, r3, r2
 8013574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013576:	005b      	lsls	r3, r3, #1
 8013578:	4413      	add	r3, r2
 801357a:	63bb      	str	r3, [r7, #56]	; 0x38

    currentMCU++;
 801357c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801357e:	3301      	adds	r3, #1
 8013580:	63fb      	str	r3, [r7, #60]	; 0x3c

    pChrom = pInBuffer;
 8013582:	68fb      	ldr	r3, [r7, #12]
 8013584:	633b      	str	r3, [r7, #48]	; 0x30

    for(i= 0; i <  8; i++)
 8013586:	2300      	movs	r3, #0
 8013588:	647b      	str	r3, [r7, #68]	; 0x44
 801358a:	e061      	b.n	8013650 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x124>
    {
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 801358c:	4b3b      	ldr	r3, [pc, #236]	; (801367c <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x150>)
 801358e:	691b      	ldr	r3, [r3, #16]
 8013590:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013592:	429a      	cmp	r2, r3
 8013594:	d259      	bcs.n	801364a <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x11e>
      {
        pOutAddr = pOutBuffer+ refline;
 8013596:	68ba      	ldr	r2, [r7, #8]
 8013598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801359a:	4413      	add	r3, r2
 801359c:	637b      	str	r3, [r7, #52]	; 0x34

          for(j=0; j < 8; j++)
 801359e:	2300      	movs	r3, #0
 80135a0:	643b      	str	r3, [r7, #64]	; 0x40
 80135a2:	e04a      	b.n	801363a <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x10e>
          {
            color_k = (int32_t)(*(pChrom + 192));
 80135a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135a6:	33c0      	adds	r3, #192	; 0xc0
 80135a8:	781b      	ldrb	r3, [r3, #0]
 80135aa:	623b      	str	r3, [r7, #32]
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
 80135ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135ae:	781b      	ldrb	r3, [r3, #0]
 80135b0:	461a      	mov	r2, r3
 80135b2:	6a3b      	ldr	r3, [r7, #32]
 80135b4:	fb02 f303 	mul.w	r3, r2, r3
 80135b8:	4a31      	ldr	r2, [pc, #196]	; (8013680 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x154>)
 80135ba:	fb82 1203 	smull	r1, r2, r2, r3
 80135be:	441a      	add	r2, r3
 80135c0:	11d2      	asrs	r2, r2, #7
 80135c2:	17db      	asrs	r3, r3, #31
 80135c4:	1ad3      	subs	r3, r2, r3
 80135c6:	61fb      	str	r3, [r7, #28]

            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
 80135c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135ca:	3340      	adds	r3, #64	; 0x40
 80135cc:	781b      	ldrb	r3, [r3, #0]
 80135ce:	461a      	mov	r2, r3
 80135d0:	6a3b      	ldr	r3, [r7, #32]
 80135d2:	fb02 f303 	mul.w	r3, r2, r3
 80135d6:	4a2a      	ldr	r2, [pc, #168]	; (8013680 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x154>)
 80135d8:	fb82 1203 	smull	r1, r2, r2, r3
 80135dc:	441a      	add	r2, r3
 80135de:	11d2      	asrs	r2, r2, #7
 80135e0:	17db      	asrs	r3, r3, #31
 80135e2:	1ad3      	subs	r3, r2, r3
 80135e4:	61bb      	str	r3, [r7, #24]

            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
 80135e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135e8:	3380      	adds	r3, #128	; 0x80
 80135ea:	781b      	ldrb	r3, [r3, #0]
 80135ec:	461a      	mov	r2, r3
 80135ee:	6a3b      	ldr	r3, [r7, #32]
 80135f0:	fb02 f303 	mul.w	r3, r2, r3
 80135f4:	4a22      	ldr	r2, [pc, #136]	; (8013680 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x154>)
 80135f6:	fb82 1203 	smull	r1, r2, r2, r3
 80135fa:	441a      	add	r2, r3
 80135fc:	11d2      	asrs	r2, r2, #7
 80135fe:	17db      	asrs	r3, r3, #31
 8013600:	1ad3      	subs	r3, r2, r3
 8013602:	617b      	str	r3, [r7, #20]
          pOutAddr[JPEG_BLUE_OFFSET/8]  =  c_blue;

#elif (JPEG_RGB_FORMAT == JPEG_RGB565)

          *(__IO uint16_t *)pOutAddr =
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
 8013604:	69fb      	ldr	r3, [r7, #28]
 8013606:	10db      	asrs	r3, r3, #3
 8013608:	02db      	lsls	r3, r3, #11
 801360a:	b21a      	sxth	r2, r3
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
 801360c:	69bb      	ldr	r3, [r7, #24]
 801360e:	109b      	asrs	r3, r3, #2
 8013610:	015b      	lsls	r3, r3, #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
 8013612:	b21b      	sxth	r3, r3
 8013614:	4313      	orrs	r3, r2
 8013616:	b21a      	sxth	r2, r3
            ((c_blue >> 3) << JPEG_BLUE_OFFSET);
 8013618:	697b      	ldr	r3, [r7, #20]
 801361a:	10db      	asrs	r3, r3, #3
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
 801361c:	b21b      	sxth	r3, r3
 801361e:	4313      	orrs	r3, r2
 8013620:	b21b      	sxth	r3, r3
 8013622:	b29a      	uxth	r2, r3
          *(__IO uint16_t *)pOutAddr =
 8013624:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013626:	801a      	strh	r2, [r3, #0]

#endif /* JPEG_RGB_FORMAT */

            pOutAddr += JPEG_BYTES_PER_PIXEL;
 8013628:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801362a:	3302      	adds	r3, #2
 801362c:	637b      	str	r3, [r7, #52]	; 0x34

            pChrom++;
 801362e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013630:	3301      	adds	r3, #1
 8013632:	633b      	str	r3, [r7, #48]	; 0x30
          for(j=0; j < 8; j++)
 8013634:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013636:	3301      	adds	r3, #1
 8013638:	643b      	str	r3, [r7, #64]	; 0x40
 801363a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801363c:	2b07      	cmp	r3, #7
 801363e:	d9b1      	bls.n	80135a4 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x78>
          }

        refline += JPEG_ConvertorParams.ScaledWidth;
 8013640:	4b0e      	ldr	r3, [pc, #56]	; (801367c <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x150>)
 8013642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013644:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013646:	4413      	add	r3, r2
 8013648:	63bb      	str	r3, [r7, #56]	; 0x38
    for(i= 0; i <  8; i++)
 801364a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801364c:	3301      	adds	r3, #1
 801364e:	647b      	str	r3, [r7, #68]	; 0x44
 8013650:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013652:	2b07      	cmp	r3, #7
 8013654:	d99a      	bls.n	801358c <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x60>
      }
    }

    pInBuffer +=  CMYK_444_BLOCK_SIZE;
 8013656:	68fb      	ldr	r3, [r7, #12]
 8013658:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801365c:	60fb      	str	r3, [r7, #12]
  while(currentMCU < (numberMCU + BlockIndex))
 801365e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013660:	687b      	ldr	r3, [r7, #4]
 8013662:	4413      	add	r3, r2
 8013664:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013666:	429a      	cmp	r2, r3
 8013668:	f4ff af6d 	bcc.w	8013546 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x1a>
  }
  return numberMCU;
 801366c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 801366e:	4618      	mov	r0, r3
 8013670:	374c      	adds	r7, #76	; 0x4c
 8013672:	46bd      	mov	sp, r7
 8013674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013678:	4770      	bx	lr
 801367a:	bf00      	nop
 801367c:	2001f108 	.word	0x2001f108
 8013680:	80808081 	.word	0x80808081

08013684 <TGFX_JPEG_GetDecodeColorConvertFunc>:
  *                      depending of the jpeg image color space and chroma sampling info.
  * @param ImageNbMCUs : pointer to uint32_t, used to retrive the total number of MCU blocks in the jpeg image.
  * @retval HAL status : HAL_OK or HAL_ERROR.
  */
HAL_StatusTypeDef TGFX_JPEG_GetDecodeColorConvertFunc(JPEG_ConfTypeDef *pJpegInfo, JPEG_YCbCrToRGB_Convert_Function *pFunction, uint32_t *ImageNbMCUs)
{
 8013684:	b480      	push	{r7}
 8013686:	b087      	sub	sp, #28
 8013688:	af00      	add	r7, sp, #0
 801368a:	60f8      	str	r0, [r7, #12]
 801368c:	60b9      	str	r1, [r7, #8]
 801368e:	607a      	str	r2, [r7, #4]
  uint32_t hMCU, vMCU;

  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
 8013690:	68fb      	ldr	r3, [r7, #12]
 8013692:	681b      	ldr	r3, [r3, #0]
 8013694:	4a7a      	ldr	r2, [pc, #488]	; (8013880 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8013696:	6013      	str	r3, [r2, #0]
  JPEG_ConvertorParams.ImageWidth = pJpegInfo->ImageWidth;
 8013698:	68fb      	ldr	r3, [r7, #12]
 801369a:	68db      	ldr	r3, [r3, #12]
 801369c:	4a78      	ldr	r2, [pc, #480]	; (8013880 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 801369e:	6093      	str	r3, [r2, #8]
  JPEG_ConvertorParams.ImageHeight = pJpegInfo->ImageHeight;
 80136a0:	68fb      	ldr	r3, [r7, #12]
 80136a2:	689b      	ldr	r3, [r3, #8]
 80136a4:	4a76      	ldr	r2, [pc, #472]	; (8013880 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 80136a6:	60d3      	str	r3, [r2, #12]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
 80136a8:	68fb      	ldr	r3, [r7, #12]
 80136aa:	68db      	ldr	r3, [r3, #12]
 80136ac:	68fa      	ldr	r2, [r7, #12]
 80136ae:	6892      	ldr	r2, [r2, #8]
 80136b0:	fb02 f303 	mul.w	r3, r2, r3
 80136b4:	005b      	lsls	r3, r3, #1
 80136b6:	4a72      	ldr	r2, [pc, #456]	; (8013880 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 80136b8:	6113      	str	r3, [r2, #16]

  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;
 80136ba:	68fb      	ldr	r3, [r7, #12]
 80136bc:	685b      	ldr	r3, [r3, #4]
 80136be:	4a70      	ldr	r2, [pc, #448]	; (8013880 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 80136c0:	6053      	str	r3, [r2, #4]
  if(JPEG_ConvertorParams.ColorSpace == JPEG_YCBCR_COLORSPACE)
 80136c2:	4b6f      	ldr	r3, [pc, #444]	; (8013880 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 80136c4:	681b      	ldr	r3, [r3, #0]
 80136c6:	2b10      	cmp	r3, #16
 80136c8:	d155      	bne.n	8013776 <TGFX_JPEG_GetDecodeColorConvertFunc+0xf2>
  {
    if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_420_SUBSAMPLING)
 80136ca:	4b6d      	ldr	r3, [pc, #436]	; (8013880 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 80136cc:	685b      	ldr	r3, [r3, #4]
 80136ce:	2b01      	cmp	r3, #1
 80136d0:	d119      	bne.n	8013706 <TGFX_JPEG_GetDecodeColorConvertFunc+0x82>
    {
      *pFunction = TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks;
 80136d2:	68bb      	ldr	r3, [r7, #8]
 80136d4:	4a6b      	ldr	r2, [pc, #428]	; (8013884 <TGFX_JPEG_GetDecodeColorConvertFunc+0x200>)
 80136d6:	601a      	str	r2, [r3, #0]

      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;
 80136d8:	4b69      	ldr	r3, [pc, #420]	; (8013880 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 80136da:	689b      	ldr	r3, [r3, #8]
 80136dc:	f003 030f 	and.w	r3, r3, #15
 80136e0:	4a67      	ldr	r2, [pc, #412]	; (8013880 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 80136e2:	6153      	str	r3, [r2, #20]

      if(JPEG_ConvertorParams.LineOffset != 0)
 80136e4:	4b66      	ldr	r3, [pc, #408]	; (8013880 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 80136e6:	695b      	ldr	r3, [r3, #20]
 80136e8:	2b00      	cmp	r3, #0
 80136ea:	d005      	beq.n	80136f8 <TGFX_JPEG_GetDecodeColorConvertFunc+0x74>
      {
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;
 80136ec:	4b64      	ldr	r3, [pc, #400]	; (8013880 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 80136ee:	695b      	ldr	r3, [r3, #20]
 80136f0:	f1c3 0310 	rsb	r3, r3, #16
 80136f4:	4a62      	ldr	r2, [pc, #392]	; (8013880 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 80136f6:	6153      	str	r3, [r2, #20]
      }
      JPEG_ConvertorParams.H_factor = 16;
 80136f8:	4b61      	ldr	r3, [pc, #388]	; (8013880 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 80136fa:	2210      	movs	r2, #16
 80136fc:	61da      	str	r2, [r3, #28]
      JPEG_ConvertorParams.V_factor  = 16;
 80136fe:	4b60      	ldr	r3, [pc, #384]	; (8013880 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8013700:	2210      	movs	r2, #16
 8013702:	621a      	str	r2, [r3, #32]
 8013704:	e075      	b.n	80137f2 <TGFX_JPEG_GetDecodeColorConvertFunc+0x16e>
    }
    else if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_422_SUBSAMPLING)
 8013706:	4b5e      	ldr	r3, [pc, #376]	; (8013880 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8013708:	685b      	ldr	r3, [r3, #4]
 801370a:	2b02      	cmp	r3, #2
 801370c:	d119      	bne.n	8013742 <TGFX_JPEG_GetDecodeColorConvertFunc+0xbe>
    {
      *pFunction =  JPEG_MCU_YCbCr422_ARGB_ConvertBlocks;
 801370e:	68bb      	ldr	r3, [r7, #8]
 8013710:	4a5d      	ldr	r2, [pc, #372]	; (8013888 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8013712:	601a      	str	r2, [r3, #0]

      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;
 8013714:	4b5a      	ldr	r3, [pc, #360]	; (8013880 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8013716:	689b      	ldr	r3, [r3, #8]
 8013718:	f003 030f 	and.w	r3, r3, #15
 801371c:	4a58      	ldr	r2, [pc, #352]	; (8013880 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 801371e:	6153      	str	r3, [r2, #20]

      if(JPEG_ConvertorParams.LineOffset != 0)
 8013720:	4b57      	ldr	r3, [pc, #348]	; (8013880 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8013722:	695b      	ldr	r3, [r3, #20]
 8013724:	2b00      	cmp	r3, #0
 8013726:	d005      	beq.n	8013734 <TGFX_JPEG_GetDecodeColorConvertFunc+0xb0>
      {
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;
 8013728:	4b55      	ldr	r3, [pc, #340]	; (8013880 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 801372a:	695b      	ldr	r3, [r3, #20]
 801372c:	f1c3 0310 	rsb	r3, r3, #16
 8013730:	4a53      	ldr	r2, [pc, #332]	; (8013880 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8013732:	6153      	str	r3, [r2, #20]
      }
      JPEG_ConvertorParams.H_factor = 16;
 8013734:	4b52      	ldr	r3, [pc, #328]	; (8013880 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8013736:	2210      	movs	r2, #16
 8013738:	61da      	str	r2, [r3, #28]
      JPEG_ConvertorParams.V_factor  = 8;
 801373a:	4b51      	ldr	r3, [pc, #324]	; (8013880 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 801373c:	2208      	movs	r2, #8
 801373e:	621a      	str	r2, [r3, #32]
 8013740:	e057      	b.n	80137f2 <TGFX_JPEG_GetDecodeColorConvertFunc+0x16e>
    }
    else /*4:4:4*/
    {
      *pFunction =  JPEG_MCU_YCbCr444_ARGB_ConvertBlocks;
 8013742:	68bb      	ldr	r3, [r7, #8]
 8013744:	4a51      	ldr	r2, [pc, #324]	; (801388c <TGFX_JPEG_GetDecodeColorConvertFunc+0x208>)
 8013746:	601a      	str	r2, [r3, #0]

      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
 8013748:	4b4d      	ldr	r3, [pc, #308]	; (8013880 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 801374a:	689b      	ldr	r3, [r3, #8]
 801374c:	f003 0307 	and.w	r3, r3, #7
 8013750:	4a4b      	ldr	r2, [pc, #300]	; (8013880 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8013752:	6153      	str	r3, [r2, #20]

      if(JPEG_ConvertorParams.LineOffset != 0)
 8013754:	4b4a      	ldr	r3, [pc, #296]	; (8013880 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8013756:	695b      	ldr	r3, [r3, #20]
 8013758:	2b00      	cmp	r3, #0
 801375a:	d005      	beq.n	8013768 <TGFX_JPEG_GetDecodeColorConvertFunc+0xe4>
      {
        JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;
 801375c:	4b48      	ldr	r3, [pc, #288]	; (8013880 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 801375e:	695b      	ldr	r3, [r3, #20]
 8013760:	f1c3 0308 	rsb	r3, r3, #8
 8013764:	4a46      	ldr	r2, [pc, #280]	; (8013880 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8013766:	6153      	str	r3, [r2, #20]
      }
      JPEG_ConvertorParams.H_factor = 8;
 8013768:	4b45      	ldr	r3, [pc, #276]	; (8013880 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 801376a:	2208      	movs	r2, #8
 801376c:	61da      	str	r2, [r3, #28]
      JPEG_ConvertorParams.V_factor  = 8;
 801376e:	4b44      	ldr	r3, [pc, #272]	; (8013880 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8013770:	2208      	movs	r2, #8
 8013772:	621a      	str	r2, [r3, #32]
 8013774:	e03d      	b.n	80137f2 <TGFX_JPEG_GetDecodeColorConvertFunc+0x16e>
    }
  }
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_GRAYSCALE_COLORSPACE)
 8013776:	4b42      	ldr	r3, [pc, #264]	; (8013880 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8013778:	681b      	ldr	r3, [r3, #0]
 801377a:	2b00      	cmp	r3, #0
 801377c:	d119      	bne.n	80137b2 <TGFX_JPEG_GetDecodeColorConvertFunc+0x12e>
  {
    *pFunction =  JPEG_MCU_Gray_ARGB_ConvertBlocks;
 801377e:	68bb      	ldr	r3, [r7, #8]
 8013780:	4a43      	ldr	r2, [pc, #268]	; (8013890 <TGFX_JPEG_GetDecodeColorConvertFunc+0x20c>)
 8013782:	601a      	str	r2, [r3, #0]

    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
 8013784:	4b3e      	ldr	r3, [pc, #248]	; (8013880 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8013786:	689b      	ldr	r3, [r3, #8]
 8013788:	f003 0307 	and.w	r3, r3, #7
 801378c:	4a3c      	ldr	r2, [pc, #240]	; (8013880 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 801378e:	6153      	str	r3, [r2, #20]

    if(JPEG_ConvertorParams.LineOffset != 0)
 8013790:	4b3b      	ldr	r3, [pc, #236]	; (8013880 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8013792:	695b      	ldr	r3, [r3, #20]
 8013794:	2b00      	cmp	r3, #0
 8013796:	d005      	beq.n	80137a4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x120>
    {
      JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;
 8013798:	4b39      	ldr	r3, [pc, #228]	; (8013880 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 801379a:	695b      	ldr	r3, [r3, #20]
 801379c:	f1c3 0308 	rsb	r3, r3, #8
 80137a0:	4a37      	ldr	r2, [pc, #220]	; (8013880 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 80137a2:	6153      	str	r3, [r2, #20]
    }
    JPEG_ConvertorParams.H_factor = 8;
 80137a4:	4b36      	ldr	r3, [pc, #216]	; (8013880 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 80137a6:	2208      	movs	r2, #8
 80137a8:	61da      	str	r2, [r3, #28]
    JPEG_ConvertorParams.V_factor  = 8;
 80137aa:	4b35      	ldr	r3, [pc, #212]	; (8013880 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 80137ac:	2208      	movs	r2, #8
 80137ae:	621a      	str	r2, [r3, #32]
 80137b0:	e01f      	b.n	80137f2 <TGFX_JPEG_GetDecodeColorConvertFunc+0x16e>
  }
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_CMYK_COLORSPACE)
 80137b2:	4b33      	ldr	r3, [pc, #204]	; (8013880 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 80137b4:	681b      	ldr	r3, [r3, #0]
 80137b6:	2b30      	cmp	r3, #48	; 0x30
 80137b8:	d119      	bne.n	80137ee <TGFX_JPEG_GetDecodeColorConvertFunc+0x16a>
  {
    *pFunction =  JPEG_MCU_YCCK_ARGB_ConvertBlocks;
 80137ba:	68bb      	ldr	r3, [r7, #8]
 80137bc:	4a35      	ldr	r2, [pc, #212]	; (8013894 <TGFX_JPEG_GetDecodeColorConvertFunc+0x210>)
 80137be:	601a      	str	r2, [r3, #0]

    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
 80137c0:	4b2f      	ldr	r3, [pc, #188]	; (8013880 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 80137c2:	689b      	ldr	r3, [r3, #8]
 80137c4:	f003 0307 	and.w	r3, r3, #7
 80137c8:	4a2d      	ldr	r2, [pc, #180]	; (8013880 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 80137ca:	6153      	str	r3, [r2, #20]

    if(JPEG_ConvertorParams.LineOffset != 0)
 80137cc:	4b2c      	ldr	r3, [pc, #176]	; (8013880 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 80137ce:	695b      	ldr	r3, [r3, #20]
 80137d0:	2b00      	cmp	r3, #0
 80137d2:	d005      	beq.n	80137e0 <TGFX_JPEG_GetDecodeColorConvertFunc+0x15c>
    {
      JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;
 80137d4:	4b2a      	ldr	r3, [pc, #168]	; (8013880 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 80137d6:	695b      	ldr	r3, [r3, #20]
 80137d8:	f1c3 0308 	rsb	r3, r3, #8
 80137dc:	4a28      	ldr	r2, [pc, #160]	; (8013880 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 80137de:	6153      	str	r3, [r2, #20]
    }
    JPEG_ConvertorParams.H_factor = 8;
 80137e0:	4b27      	ldr	r3, [pc, #156]	; (8013880 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 80137e2:	2208      	movs	r2, #8
 80137e4:	61da      	str	r2, [r3, #28]
    JPEG_ConvertorParams.V_factor  = 8;
 80137e6:	4b26      	ldr	r3, [pc, #152]	; (8013880 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 80137e8:	2208      	movs	r2, #8
 80137ea:	621a      	str	r2, [r3, #32]
 80137ec:	e001      	b.n	80137f2 <TGFX_JPEG_GetDecodeColorConvertFunc+0x16e>
  }
  else
  {
    return HAL_ERROR; /* Color space Not supported*/
 80137ee:	2301      	movs	r3, #1
 80137f0:	e040      	b.n	8013874 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1f0>
  }

  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
 80137f2:	4b23      	ldr	r3, [pc, #140]	; (8013880 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 80137f4:	689a      	ldr	r2, [r3, #8]
 80137f6:	4b22      	ldr	r3, [pc, #136]	; (8013880 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 80137f8:	695b      	ldr	r3, [r3, #20]
 80137fa:	4413      	add	r3, r2
 80137fc:	4a20      	ldr	r2, [pc, #128]	; (8013880 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 80137fe:	6253      	str	r3, [r2, #36]	; 0x24
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
 8013800:	4b1f      	ldr	r3, [pc, #124]	; (8013880 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8013802:	689b      	ldr	r3, [r3, #8]
 8013804:	005b      	lsls	r3, r3, #1
 8013806:	4a1e      	ldr	r2, [pc, #120]	; (8013880 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8013808:	6293      	str	r3, [r2, #40]	; 0x28

  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
 801380a:	4b1d      	ldr	r3, [pc, #116]	; (8013880 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 801380c:	689a      	ldr	r2, [r3, #8]
 801380e:	4b1c      	ldr	r3, [pc, #112]	; (8013880 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8013810:	69db      	ldr	r3, [r3, #28]
 8013812:	fbb2 f3f3 	udiv	r3, r2, r3
 8013816:	617b      	str	r3, [r7, #20]
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
 8013818:	4b19      	ldr	r3, [pc, #100]	; (8013880 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 801381a:	689b      	ldr	r3, [r3, #8]
 801381c:	4a18      	ldr	r2, [pc, #96]	; (8013880 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 801381e:	69d2      	ldr	r2, [r2, #28]
 8013820:	fbb3 f1f2 	udiv	r1, r3, r2
 8013824:	fb01 f202 	mul.w	r2, r1, r2
 8013828:	1a9b      	subs	r3, r3, r2
 801382a:	2b00      	cmp	r3, #0
 801382c:	d002      	beq.n	8013834 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1b0>
  {
    hMCU++; /*+1 for horizenatl incomplete MCU */
 801382e:	697b      	ldr	r3, [r7, #20]
 8013830:	3301      	adds	r3, #1
 8013832:	617b      	str	r3, [r7, #20]
  }

  vMCU = (JPEG_ConvertorParams.ImageHeight / JPEG_ConvertorParams.V_factor);
 8013834:	4b12      	ldr	r3, [pc, #72]	; (8013880 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8013836:	68da      	ldr	r2, [r3, #12]
 8013838:	4b11      	ldr	r3, [pc, #68]	; (8013880 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 801383a:	6a1b      	ldr	r3, [r3, #32]
 801383c:	fbb2 f3f3 	udiv	r3, r2, r3
 8013840:	613b      	str	r3, [r7, #16]
  if((JPEG_ConvertorParams.ImageHeight % JPEG_ConvertorParams.V_factor) != 0)
 8013842:	4b0f      	ldr	r3, [pc, #60]	; (8013880 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8013844:	68db      	ldr	r3, [r3, #12]
 8013846:	4a0e      	ldr	r2, [pc, #56]	; (8013880 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8013848:	6a12      	ldr	r2, [r2, #32]
 801384a:	fbb3 f1f2 	udiv	r1, r3, r2
 801384e:	fb01 f202 	mul.w	r2, r1, r2
 8013852:	1a9b      	subs	r3, r3, r2
 8013854:	2b00      	cmp	r3, #0
 8013856:	d002      	beq.n	801385e <TGFX_JPEG_GetDecodeColorConvertFunc+0x1da>
  {
    vMCU++; /*+1 for vertical incomplete MCU */
 8013858:	693b      	ldr	r3, [r7, #16]
 801385a:	3301      	adds	r3, #1
 801385c:	613b      	str	r3, [r7, #16]
  }
  JPEG_ConvertorParams.MCU_Total_Nb = (hMCU * vMCU);
 801385e:	697b      	ldr	r3, [r7, #20]
 8013860:	693a      	ldr	r2, [r7, #16]
 8013862:	fb02 f303 	mul.w	r3, r2, r3
 8013866:	4a06      	ldr	r2, [pc, #24]	; (8013880 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8013868:	62d3      	str	r3, [r2, #44]	; 0x2c
  *ImageNbMCUs = JPEG_ConvertorParams.MCU_Total_Nb;
 801386a:	4b05      	ldr	r3, [pc, #20]	; (8013880 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 801386c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801386e:	687b      	ldr	r3, [r7, #4]
 8013870:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8013872:	2300      	movs	r3, #0
}
 8013874:	4618      	mov	r0, r3
 8013876:	371c      	adds	r7, #28
 8013878:	46bd      	mov	sp, r7
 801387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801387e:	4770      	bx	lr
 8013880:	2001f108 	.word	0x2001f108
 8013884:	08012da5 	.word	0x08012da5
 8013888:	080130a1 	.word	0x080130a1
 801388c:	080132a5 	.word	0x080132a5
 8013890:	08013435 	.word	0x08013435
 8013894:	0801352d 	.word	0x0801352d

08013898 <TGFX_JPEG_InitPostProcColorTables>:
  * @brief  Initializes the YCbCr -> RGB colors conversion Look Up Tables
  * @param  None
  * @retval None
  */
void TGFX_JPEG_InitPostProcColorTables(void)
{
 8013898:	b480      	push	{r7}
 801389a:	b083      	sub	sp, #12
 801389c:	af00      	add	r7, sp, #0
  int32_t index, i;

  for (i = 0; i <= 255; i++)
 801389e:	2300      	movs	r3, #0
 80138a0:	607b      	str	r3, [r7, #4]
 80138a2:	e02e      	b.n	8013902 <TGFX_JPEG_InitPostProcColorTables+0x6a>
  {
    index = (i * 2) - 256;
 80138a4:	687b      	ldr	r3, [r7, #4]
 80138a6:	3b80      	subs	r3, #128	; 0x80
 80138a8:	005b      	lsls	r3, r3, #1
 80138aa:	603b      	str	r3, [r7, #0]
    CR_RED_LUT[i] = ( (((int32_t) ((1.40200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
 80138ac:	683b      	ldr	r3, [r7, #0]
 80138ae:	f24b 3274 	movw	r2, #45940	; 0xb374
 80138b2:	fb02 f303 	mul.w	r3, r2, r3
 80138b6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80138ba:	141a      	asrs	r2, r3, #16
 80138bc:	4916      	ldr	r1, [pc, #88]	; (8013918 <TGFX_JPEG_InitPostProcColorTables+0x80>)
 80138be:	687b      	ldr	r3, [r7, #4]
 80138c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    CB_BLUE_LUT[i] = ( (((int32_t) ((1.77200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
 80138c4:	683b      	ldr	r3, [r7, #0]
 80138c6:	f24e 22d0 	movw	r2, #58064	; 0xe2d0
 80138ca:	fb02 f303 	mul.w	r3, r2, r3
 80138ce:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80138d2:	141a      	asrs	r2, r3, #16
 80138d4:	4911      	ldr	r1, [pc, #68]	; (801391c <TGFX_JPEG_InitPostProcColorTables+0x84>)
 80138d6:	687b      	ldr	r3, [r7, #4]
 80138d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    CR_GREEN_LUT[i] = (-((int32_t) ((0.71414 / 2) * (1L << 16)))) * index;
 80138dc:	683b      	ldr	r3, [r7, #0]
 80138de:	4a10      	ldr	r2, [pc, #64]	; (8013920 <TGFX_JPEG_InitPostProcColorTables+0x88>)
 80138e0:	fb03 f202 	mul.w	r2, r3, r2
 80138e4:	490f      	ldr	r1, [pc, #60]	; (8013924 <TGFX_JPEG_InitPostProcColorTables+0x8c>)
 80138e6:	687b      	ldr	r3, [r7, #4]
 80138e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    CB_GREEN_LUT[i] = (-((int32_t) ((0.34414 / 2) * (1L << 16)))) * index;
 80138ec:	683b      	ldr	r3, [r7, #0]
 80138ee:	4a0e      	ldr	r2, [pc, #56]	; (8013928 <TGFX_JPEG_InitPostProcColorTables+0x90>)
 80138f0:	fb03 f202 	mul.w	r2, r3, r2
 80138f4:	490d      	ldr	r1, [pc, #52]	; (801392c <TGFX_JPEG_InitPostProcColorTables+0x94>)
 80138f6:	687b      	ldr	r3, [r7, #4]
 80138f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (i = 0; i <= 255; i++)
 80138fc:	687b      	ldr	r3, [r7, #4]
 80138fe:	3301      	adds	r3, #1
 8013900:	607b      	str	r3, [r7, #4]
 8013902:	687b      	ldr	r3, [r7, #4]
 8013904:	2bff      	cmp	r3, #255	; 0xff
 8013906:	ddcd      	ble.n	80138a4 <TGFX_JPEG_InitPostProcColorTables+0xc>
  }
}
 8013908:	bf00      	nop
 801390a:	bf00      	nop
 801390c:	370c      	adds	r7, #12
 801390e:	46bd      	mov	sp, r7
 8013910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013914:	4770      	bx	lr
 8013916:	bf00      	nop
 8013918:	2001f148 	.word	0x2001f148
 801391c:	2001f548 	.word	0x2001f548
 8013920:	ffffa498 	.word	0xffffa498
 8013924:	2001f948 	.word	0x2001f948
 8013928:	ffffd3f4 	.word	0xffffd3f4
 801392c:	2001fd48 	.word	0x2001fd48

08013930 <TGFX_JPEG_InitColorTables>:
  * @brief  Initializes the colors conversion Look Up Tables
  * @param  None
  * @retval None
  */
void TGFX_JPEG_InitColorTables(void)
{
 8013930:	b580      	push	{r7, lr}
 8013932:	af00      	add	r7, sp, #0

#if (USE_JPEG_ENCODER == 1)
  TGFX_JPEG_InitPreProcColorTables();
 8013934:	f000 f806 	bl	8013944 <TGFX_JPEG_InitPreProcColorTables>
  TGFX_JPEG_Init_MCU_LUT();
 8013938:	f000 f888 	bl	8013a4c <TGFX_JPEG_Init_MCU_LUT>
#endif

#if (USE_JPEG_DECODER == 1)
  TGFX_JPEG_InitPostProcColorTables();
 801393c:	f7ff ffac 	bl	8013898 <TGFX_JPEG_InitPostProcColorTables>
#endif

}
 8013940:	bf00      	nop
 8013942:	bd80      	pop	{r7, pc}

08013944 <TGFX_JPEG_InitPreProcColorTables>:
  * @brief  Initializes the RGB -> YCbCr colors conversion Look Up Tables
  * @param  None
  * @retval None
  */
void TGFX_JPEG_InitPreProcColorTables(void)
{
 8013944:	b480      	push	{r7}
 8013946:	b083      	sub	sp, #12
 8013948:	af00      	add	r7, sp, #0
  int32_t i;

  for (i = 0; i <= 255; i++)
 801394a:	2300      	movs	r3, #0
 801394c:	607b      	str	r3, [r7, #4]
 801394e:	e05a      	b.n	8013a06 <TGFX_JPEG_InitPreProcColorTables+0xc2>
  {
    RED_Y_LUT[i]           = ((  ((int32_t) ((0.299 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8013950:	687b      	ldr	r3, [r7, #4]
 8013952:	f644 428b 	movw	r2, #19595	; 0x4c8b
 8013956:	fb02 f303 	mul.w	r3, r2, r3
 801395a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 801395e:	141a      	asrs	r2, r3, #16
 8013960:	492e      	ldr	r1, [pc, #184]	; (8013a1c <TGFX_JPEG_InitPreProcColorTables+0xd8>)
 8013962:	687b      	ldr	r3, [r7, #4]
 8013964:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    GREEN_Y_LUT[i]         = ((  ((int32_t) ((0.587 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8013968:	687b      	ldr	r3, [r7, #4]
 801396a:	f249 6245 	movw	r2, #38469	; 0x9645
 801396e:	fb02 f303 	mul.w	r3, r2, r3
 8013972:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8013976:	141a      	asrs	r2, r3, #16
 8013978:	4929      	ldr	r1, [pc, #164]	; (8013a20 <TGFX_JPEG_InitPreProcColorTables+0xdc>)
 801397a:	687b      	ldr	r3, [r7, #4]
 801397c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    BLUE_Y_LUT[i]          = ((  ((int32_t) ((0.114 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8013980:	687b      	ldr	r3, [r7, #4]
 8013982:	f641 522f 	movw	r2, #7471	; 0x1d2f
 8013986:	fb02 f303 	mul.w	r3, r2, r3
 801398a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 801398e:	141a      	asrs	r2, r3, #16
 8013990:	4924      	ldr	r1, [pc, #144]	; (8013a24 <TGFX_JPEG_InitPreProcColorTables+0xe0>)
 8013992:	687b      	ldr	r3, [r7, #4]
 8013994:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    RED_CB_LUT[i]          = (((-((int32_t) ((0.1687 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8013998:	687b      	ldr	r3, [r7, #4]
 801399a:	4a23      	ldr	r2, [pc, #140]	; (8013a28 <TGFX_JPEG_InitPreProcColorTables+0xe4>)
 801399c:	fb02 f303 	mul.w	r3, r2, r3
 80139a0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80139a4:	141a      	asrs	r2, r3, #16
 80139a6:	4921      	ldr	r1, [pc, #132]	; (8013a2c <TGFX_JPEG_InitPreProcColorTables+0xe8>)
 80139a8:	687b      	ldr	r3, [r7, #4]
 80139aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    GREEN_CB_LUT[i]        = (((-((int32_t) ((0.3313 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 80139ae:	687b      	ldr	r3, [r7, #4]
 80139b0:	4a1f      	ldr	r2, [pc, #124]	; (8013a30 <TGFX_JPEG_InitPreProcColorTables+0xec>)
 80139b2:	fb02 f303 	mul.w	r3, r2, r3
 80139b6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80139ba:	141a      	asrs	r2, r3, #16
 80139bc:	491d      	ldr	r1, [pc, #116]	; (8013a34 <TGFX_JPEG_InitPreProcColorTables+0xf0>)
 80139be:	687b      	ldr	r3, [r7, #4]
 80139c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    /* BLUE_CB_LUT and RED_CR_LUT are identical */
    BLUE_CB_RED_CR_LUT[i]  = ((  ((int32_t) ((0.5 )    * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 80139c4:	687b      	ldr	r3, [r7, #4]
 80139c6:	3301      	adds	r3, #1
 80139c8:	03db      	lsls	r3, r3, #15
 80139ca:	141a      	asrs	r2, r3, #16
 80139cc:	491a      	ldr	r1, [pc, #104]	; (8013a38 <TGFX_JPEG_InitPreProcColorTables+0xf4>)
 80139ce:	687b      	ldr	r3, [r7, #4]
 80139d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    GREEN_CR_LUT[i]        = (((-((int32_t) ((0.4187 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 80139d4:	687b      	ldr	r3, [r7, #4]
 80139d6:	4a19      	ldr	r2, [pc, #100]	; (8013a3c <TGFX_JPEG_InitPreProcColorTables+0xf8>)
 80139d8:	fb02 f303 	mul.w	r3, r2, r3
 80139dc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80139e0:	141a      	asrs	r2, r3, #16
 80139e2:	4917      	ldr	r1, [pc, #92]	; (8013a40 <TGFX_JPEG_InitPreProcColorTables+0xfc>)
 80139e4:	687b      	ldr	r3, [r7, #4]
 80139e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    BLUE_CR_LUT[i]         = (((-((int32_t) ((0.0813 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 80139ea:	687b      	ldr	r3, [r7, #4]
 80139ec:	4a15      	ldr	r2, [pc, #84]	; (8013a44 <TGFX_JPEG_InitPreProcColorTables+0x100>)
 80139ee:	fb02 f303 	mul.w	r3, r2, r3
 80139f2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80139f6:	141a      	asrs	r2, r3, #16
 80139f8:	4913      	ldr	r1, [pc, #76]	; (8013a48 <TGFX_JPEG_InitPreProcColorTables+0x104>)
 80139fa:	687b      	ldr	r3, [r7, #4]
 80139fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (i = 0; i <= 255; i++)
 8013a00:	687b      	ldr	r3, [r7, #4]
 8013a02:	3301      	adds	r3, #1
 8013a04:	607b      	str	r3, [r7, #4]
 8013a06:	687b      	ldr	r3, [r7, #4]
 8013a08:	2bff      	cmp	r3, #255	; 0xff
 8013a0a:	dda1      	ble.n	8013950 <TGFX_JPEG_InitPreProcColorTables+0xc>
  }
}
 8013a0c:	bf00      	nop
 8013a0e:	bf00      	nop
 8013a10:	370c      	adds	r7, #12
 8013a12:	46bd      	mov	sp, r7
 8013a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a18:	4770      	bx	lr
 8013a1a:	bf00      	nop
 8013a1c:	20020148 	.word	0x20020148
 8013a20:	20020d48 	.word	0x20020d48
 8013a24:	20021948 	.word	0x20021948
 8013a28:	ffffd4d1 	.word	0xffffd4d1
 8013a2c:	20020548 	.word	0x20020548
 8013a30:	ffffab30 	.word	0xffffab30
 8013a34:	20021548 	.word	0x20021548
 8013a38:	20020948 	.word	0x20020948
 8013a3c:	ffff94d1 	.word	0xffff94d1
 8013a40:	20021148 	.word	0x20021148
 8013a44:	ffffeb30 	.word	0xffffeb30
 8013a48:	20021d48 	.word	0x20021d48

08013a4c <TGFX_JPEG_Init_MCU_LUT>:
  * @brief  Initializes the MCU Look Up Tables
  * @param  None
  * @retval None
  */
void TGFX_JPEG_Init_MCU_LUT(void)
{
 8013a4c:	b480      	push	{r7}
 8013a4e:	b085      	sub	sp, #20
 8013a50:	af00      	add	r7, sp, #0
  uint32_t i, j, offset;

  /*Y LUT */
  for(i = 0; i < 16; i++)
 8013a52:	2300      	movs	r3, #0
 8013a54:	60fb      	str	r3, [r7, #12]
 8013a56:	e036      	b.n	8013ac6 <TGFX_JPEG_Init_MCU_LUT+0x7a>
  {
    for(j = 0; j < 16; j++)
 8013a58:	2300      	movs	r3, #0
 8013a5a:	60bb      	str	r3, [r7, #8]
 8013a5c:	e02d      	b.n	8013aba <TGFX_JPEG_Init_MCU_LUT+0x6e>
    {
      offset =  j + (i*8);
 8013a5e:	68fb      	ldr	r3, [r7, #12]
 8013a60:	00db      	lsls	r3, r3, #3
 8013a62:	68ba      	ldr	r2, [r7, #8]
 8013a64:	4413      	add	r3, r2
 8013a66:	607b      	str	r3, [r7, #4]
      if((j>=8) && (i>=8)) offset+= 120;
 8013a68:	68bb      	ldr	r3, [r7, #8]
 8013a6a:	2b07      	cmp	r3, #7
 8013a6c:	d906      	bls.n	8013a7c <TGFX_JPEG_Init_MCU_LUT+0x30>
 8013a6e:	68fb      	ldr	r3, [r7, #12]
 8013a70:	2b07      	cmp	r3, #7
 8013a72:	d903      	bls.n	8013a7c <TGFX_JPEG_Init_MCU_LUT+0x30>
 8013a74:	687b      	ldr	r3, [r7, #4]
 8013a76:	3378      	adds	r3, #120	; 0x78
 8013a78:	607b      	str	r3, [r7, #4]
 8013a7a:	e012      	b.n	8013aa2 <TGFX_JPEG_Init_MCU_LUT+0x56>
      else  if((j>=8) && (i<8)) offset+= 56;
 8013a7c:	68bb      	ldr	r3, [r7, #8]
 8013a7e:	2b07      	cmp	r3, #7
 8013a80:	d906      	bls.n	8013a90 <TGFX_JPEG_Init_MCU_LUT+0x44>
 8013a82:	68fb      	ldr	r3, [r7, #12]
 8013a84:	2b07      	cmp	r3, #7
 8013a86:	d803      	bhi.n	8013a90 <TGFX_JPEG_Init_MCU_LUT+0x44>
 8013a88:	687b      	ldr	r3, [r7, #4]
 8013a8a:	3338      	adds	r3, #56	; 0x38
 8013a8c:	607b      	str	r3, [r7, #4]
 8013a8e:	e008      	b.n	8013aa2 <TGFX_JPEG_Init_MCU_LUT+0x56>
      else  if((j<8) && (i>=8)) offset+= 64;
 8013a90:	68bb      	ldr	r3, [r7, #8]
 8013a92:	2b07      	cmp	r3, #7
 8013a94:	d805      	bhi.n	8013aa2 <TGFX_JPEG_Init_MCU_LUT+0x56>
 8013a96:	68fb      	ldr	r3, [r7, #12]
 8013a98:	2b07      	cmp	r3, #7
 8013a9a:	d902      	bls.n	8013aa2 <TGFX_JPEG_Init_MCU_LUT+0x56>
 8013a9c:	687b      	ldr	r3, [r7, #4]
 8013a9e:	3340      	adds	r3, #64	; 0x40
 8013aa0:	607b      	str	r3, [r7, #4]

      JPEG_Y_MCU_LUT[i*16 + j] = offset;
 8013aa2:	68fb      	ldr	r3, [r7, #12]
 8013aa4:	011a      	lsls	r2, r3, #4
 8013aa6:	68bb      	ldr	r3, [r7, #8]
 8013aa8:	4413      	add	r3, r2
 8013aaa:	687a      	ldr	r2, [r7, #4]
 8013aac:	b291      	uxth	r1, r2
 8013aae:	4a62      	ldr	r2, [pc, #392]	; (8013c38 <TGFX_JPEG_Init_MCU_LUT+0x1ec>)
 8013ab0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(j = 0; j < 16; j++)
 8013ab4:	68bb      	ldr	r3, [r7, #8]
 8013ab6:	3301      	adds	r3, #1
 8013ab8:	60bb      	str	r3, [r7, #8]
 8013aba:	68bb      	ldr	r3, [r7, #8]
 8013abc:	2b0f      	cmp	r3, #15
 8013abe:	d9ce      	bls.n	8013a5e <TGFX_JPEG_Init_MCU_LUT+0x12>
  for(i = 0; i < 16; i++)
 8013ac0:	68fb      	ldr	r3, [r7, #12]
 8013ac2:	3301      	adds	r3, #1
 8013ac4:	60fb      	str	r3, [r7, #12]
 8013ac6:	68fb      	ldr	r3, [r7, #12]
 8013ac8:	2b0f      	cmp	r3, #15
 8013aca:	d9c5      	bls.n	8013a58 <TGFX_JPEG_Init_MCU_LUT+0xc>
    }
  }

  /*Cb Cr K LUT*/
  for(i = 0; i < 16; i++)
 8013acc:	2300      	movs	r3, #0
 8013ace:	60fb      	str	r3, [r7, #12]
 8013ad0:	e072      	b.n	8013bb8 <TGFX_JPEG_Init_MCU_LUT+0x16c>
  {
    for(j = 0; j < 16; j++)
 8013ad2:	2300      	movs	r3, #0
 8013ad4:	60bb      	str	r3, [r7, #8]
 8013ad6:	e069      	b.n	8013bac <TGFX_JPEG_Init_MCU_LUT+0x160>
    {
      offset = i*16 + j;
 8013ad8:	68fb      	ldr	r3, [r7, #12]
 8013ada:	011b      	lsls	r3, r3, #4
 8013adc:	68ba      	ldr	r2, [r7, #8]
 8013ade:	4413      	add	r3, r2
 8013ae0:	607b      	str	r3, [r7, #4]

      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
 8013ae2:	68bb      	ldr	r3, [r7, #8]
 8013ae4:	085b      	lsrs	r3, r3, #1
 8013ae6:	b29a      	uxth	r2, r3
 8013ae8:	68fb      	ldr	r3, [r7, #12]
 8013aea:	085b      	lsrs	r3, r3, #1
 8013aec:	b29b      	uxth	r3, r3
 8013aee:	00db      	lsls	r3, r3, #3
 8013af0:	b29b      	uxth	r3, r3
 8013af2:	4413      	add	r3, r2
 8013af4:	b29b      	uxth	r3, r3
 8013af6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8013afa:	b299      	uxth	r1, r3
 8013afc:	4a4f      	ldr	r2, [pc, #316]	; (8013c3c <TGFX_JPEG_Init_MCU_LUT+0x1f0>)
 8013afe:	687b      	ldr	r3, [r7, #4]
 8013b00:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
 8013b04:	68bb      	ldr	r3, [r7, #8]
 8013b06:	085b      	lsrs	r3, r3, #1
 8013b08:	b29a      	uxth	r2, r3
 8013b0a:	68fb      	ldr	r3, [r7, #12]
 8013b0c:	b29b      	uxth	r3, r3
 8013b0e:	00db      	lsls	r3, r3, #3
 8013b10:	b29b      	uxth	r3, r3
 8013b12:	4413      	add	r3, r2
 8013b14:	b29b      	uxth	r3, r3
 8013b16:	3380      	adds	r3, #128	; 0x80
 8013b18:	b299      	uxth	r1, r3
 8013b1a:	4a49      	ldr	r2, [pc, #292]	; (8013c40 <TGFX_JPEG_Init_MCU_LUT+0x1f4>)
 8013b1c:	687b      	ldr	r3, [r7, #4]
 8013b1e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
 8013b22:	68bb      	ldr	r3, [r7, #8]
 8013b24:	085b      	lsrs	r3, r3, #1
 8013b26:	b29a      	uxth	r2, r3
 8013b28:	68fb      	ldr	r3, [r7, #12]
 8013b2a:	085b      	lsrs	r3, r3, #1
 8013b2c:	b29b      	uxth	r3, r3
 8013b2e:	00db      	lsls	r3, r3, #3
 8013b30:	b29b      	uxth	r3, r3
 8013b32:	4413      	add	r3, r2
 8013b34:	b29b      	uxth	r3, r3
 8013b36:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8013b3a:	b299      	uxth	r1, r3
 8013b3c:	4a41      	ldr	r2, [pc, #260]	; (8013c44 <TGFX_JPEG_Init_MCU_LUT+0x1f8>)
 8013b3e:	687b      	ldr	r3, [r7, #4]
 8013b40:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
 8013b44:	68bb      	ldr	r3, [r7, #8]
 8013b46:	085b      	lsrs	r3, r3, #1
 8013b48:	b29a      	uxth	r2, r3
 8013b4a:	68fb      	ldr	r3, [r7, #12]
 8013b4c:	b29b      	uxth	r3, r3
 8013b4e:	00db      	lsls	r3, r3, #3
 8013b50:	b29b      	uxth	r3, r3
 8013b52:	4413      	add	r3, r2
 8013b54:	b29b      	uxth	r3, r3
 8013b56:	33c0      	adds	r3, #192	; 0xc0
 8013b58:	b299      	uxth	r1, r3
 8013b5a:	4a3b      	ldr	r2, [pc, #236]	; (8013c48 <TGFX_JPEG_Init_MCU_LUT+0x1fc>)
 8013b5c:	687b      	ldr	r3, [r7, #4]
 8013b5e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
 8013b62:	68bb      	ldr	r3, [r7, #8]
 8013b64:	085b      	lsrs	r3, r3, #1
 8013b66:	b29a      	uxth	r2, r3
 8013b68:	68fb      	ldr	r3, [r7, #12]
 8013b6a:	085b      	lsrs	r3, r3, #1
 8013b6c:	b29b      	uxth	r3, r3
 8013b6e:	00db      	lsls	r3, r3, #3
 8013b70:	b29b      	uxth	r3, r3
 8013b72:	4413      	add	r3, r2
 8013b74:	b29b      	uxth	r3, r3
 8013b76:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8013b7a:	b299      	uxth	r1, r3
 8013b7c:	4a33      	ldr	r2, [pc, #204]	; (8013c4c <TGFX_JPEG_Init_MCU_LUT+0x200>)
 8013b7e:	687b      	ldr	r3, [r7, #4]
 8013b80:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_K_MCU_422_LUT[offset] = (j/2) + ((i/2)*8) + 256;
 8013b84:	68bb      	ldr	r3, [r7, #8]
 8013b86:	085b      	lsrs	r3, r3, #1
 8013b88:	b29a      	uxth	r2, r3
 8013b8a:	68fb      	ldr	r3, [r7, #12]
 8013b8c:	085b      	lsrs	r3, r3, #1
 8013b8e:	b29b      	uxth	r3, r3
 8013b90:	00db      	lsls	r3, r3, #3
 8013b92:	b29b      	uxth	r3, r3
 8013b94:	4413      	add	r3, r2
 8013b96:	b29b      	uxth	r3, r3
 8013b98:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8013b9c:	b299      	uxth	r1, r3
 8013b9e:	4a2c      	ldr	r2, [pc, #176]	; (8013c50 <TGFX_JPEG_Init_MCU_LUT+0x204>)
 8013ba0:	687b      	ldr	r3, [r7, #4]
 8013ba2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(j = 0; j < 16; j++)
 8013ba6:	68bb      	ldr	r3, [r7, #8]
 8013ba8:	3301      	adds	r3, #1
 8013baa:	60bb      	str	r3, [r7, #8]
 8013bac:	68bb      	ldr	r3, [r7, #8]
 8013bae:	2b0f      	cmp	r3, #15
 8013bb0:	d992      	bls.n	8013ad8 <TGFX_JPEG_Init_MCU_LUT+0x8c>
  for(i = 0; i < 16; i++)
 8013bb2:	68fb      	ldr	r3, [r7, #12]
 8013bb4:	3301      	adds	r3, #1
 8013bb6:	60fb      	str	r3, [r7, #12]
 8013bb8:	68fb      	ldr	r3, [r7, #12]
 8013bba:	2b0f      	cmp	r3, #15
 8013bbc:	d989      	bls.n	8013ad2 <TGFX_JPEG_Init_MCU_LUT+0x86>
    }
  }

  for(i = 0; i < 8; i++)
 8013bbe:	2300      	movs	r3, #0
 8013bc0:	60fb      	str	r3, [r7, #12]
 8013bc2:	e02e      	b.n	8013c22 <TGFX_JPEG_Init_MCU_LUT+0x1d6>
  {
    for(j = 0; j < 8; j++)
 8013bc4:	2300      	movs	r3, #0
 8013bc6:	60bb      	str	r3, [r7, #8]
 8013bc8:	e025      	b.n	8013c16 <TGFX_JPEG_Init_MCU_LUT+0x1ca>
    {
      offset = i*8 + j;
 8013bca:	68fb      	ldr	r3, [r7, #12]
 8013bcc:	00db      	lsls	r3, r3, #3
 8013bce:	68ba      	ldr	r2, [r7, #8]
 8013bd0:	4413      	add	r3, r2
 8013bd2:	607b      	str	r3, [r7, #4]

      JPEG_Y_MCU_444_LUT[offset]  = offset;
 8013bd4:	687b      	ldr	r3, [r7, #4]
 8013bd6:	b299      	uxth	r1, r3
 8013bd8:	4a1e      	ldr	r2, [pc, #120]	; (8013c54 <TGFX_JPEG_Init_MCU_LUT+0x208>)
 8013bda:	687b      	ldr	r3, [r7, #4]
 8013bdc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_Cb_MCU_444_LUT[offset] = offset + 64 ;
 8013be0:	687b      	ldr	r3, [r7, #4]
 8013be2:	b29b      	uxth	r3, r3
 8013be4:	3340      	adds	r3, #64	; 0x40
 8013be6:	b299      	uxth	r1, r3
 8013be8:	4a1b      	ldr	r2, [pc, #108]	; (8013c58 <TGFX_JPEG_Init_MCU_LUT+0x20c>)
 8013bea:	687b      	ldr	r3, [r7, #4]
 8013bec:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_Cr_MCU_444_LUT[offset] = offset + 128 ;
 8013bf0:	687b      	ldr	r3, [r7, #4]
 8013bf2:	b29b      	uxth	r3, r3
 8013bf4:	3380      	adds	r3, #128	; 0x80
 8013bf6:	b299      	uxth	r1, r3
 8013bf8:	4a18      	ldr	r2, [pc, #96]	; (8013c5c <TGFX_JPEG_Init_MCU_LUT+0x210>)
 8013bfa:	687b      	ldr	r3, [r7, #4]
 8013bfc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_K_MCU_444_LUT[offset]  = offset + 192 ;
 8013c00:	687b      	ldr	r3, [r7, #4]
 8013c02:	b29b      	uxth	r3, r3
 8013c04:	33c0      	adds	r3, #192	; 0xc0
 8013c06:	b299      	uxth	r1, r3
 8013c08:	4a15      	ldr	r2, [pc, #84]	; (8013c60 <TGFX_JPEG_Init_MCU_LUT+0x214>)
 8013c0a:	687b      	ldr	r3, [r7, #4]
 8013c0c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(j = 0; j < 8; j++)
 8013c10:	68bb      	ldr	r3, [r7, #8]
 8013c12:	3301      	adds	r3, #1
 8013c14:	60bb      	str	r3, [r7, #8]
 8013c16:	68bb      	ldr	r3, [r7, #8]
 8013c18:	2b07      	cmp	r3, #7
 8013c1a:	d9d6      	bls.n	8013bca <TGFX_JPEG_Init_MCU_LUT+0x17e>
  for(i = 0; i < 8; i++)
 8013c1c:	68fb      	ldr	r3, [r7, #12]
 8013c1e:	3301      	adds	r3, #1
 8013c20:	60fb      	str	r3, [r7, #12]
 8013c22:	68fb      	ldr	r3, [r7, #12]
 8013c24:	2b07      	cmp	r3, #7
 8013c26:	d9cd      	bls.n	8013bc4 <TGFX_JPEG_Init_MCU_LUT+0x178>
    }
  }
}
 8013c28:	bf00      	nop
 8013c2a:	bf00      	nop
 8013c2c:	3714      	adds	r7, #20
 8013c2e:	46bd      	mov	sp, r7
 8013c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c34:	4770      	bx	lr
 8013c36:	bf00      	nop
 8013c38:	20022148 	.word	0x20022148
 8013c3c:	200223c8 	.word	0x200223c8
 8013c40:	200225c8 	.word	0x200225c8
 8013c44:	20022848 	.word	0x20022848
 8013c48:	20022a48 	.word	0x20022a48
 8013c4c:	20022cc8 	.word	0x20022cc8
 8013c50:	20022ec8 	.word	0x20022ec8
 8013c54:	20022348 	.word	0x20022348
 8013c58:	200227c8 	.word	0x200227c8
 8013c5c:	20022c48 	.word	0x20022c48
 8013c60:	200230c8 	.word	0x200230c8

08013c64 <CANSPI_Initialize>:
  MCP2515_SetSleepMode();
}

/* CAN */
bool CANSPI_Initialize(void)
{
 8013c64:	b580      	push	{r7, lr}
 8013c66:	b088      	sub	sp, #32
 8013c68:	af00      	add	r7, sp, #0
	DebugPrint("CanSPI Initialize");
 8013c6a:	4858      	ldr	r0, [pc, #352]	; (8013dcc <CANSPI_Initialize+0x168>)
 8013c6c:	f000 fb94 	bl	8014398 <SerialPrintln>
  RXF5 RXF5reg;
  RXM0 RXM0reg;
  RXM1 RXM1reg;

  /* Rx Mask values 초기화 */
  RXM0reg.RXM0SIDH = 0x00;
 8013c70:	2300      	movs	r3, #0
 8013c72:	713b      	strb	r3, [r7, #4]
  RXM0reg.RXM0SIDL = 0x00;
 8013c74:	2300      	movs	r3, #0
 8013c76:	717b      	strb	r3, [r7, #5]
  RXM0reg.RXM0EID8 = 0x00;
 8013c78:	2300      	movs	r3, #0
 8013c7a:	71bb      	strb	r3, [r7, #6]
  RXM0reg.RXM0EID0 = 0x00;
 8013c7c:	2300      	movs	r3, #0
 8013c7e:	71fb      	strb	r3, [r7, #7]

  RXM1reg.RXM1SIDH = 0x00;
 8013c80:	2300      	movs	r3, #0
 8013c82:	703b      	strb	r3, [r7, #0]
  RXM1reg.RXM1SIDL = 0x00;
 8013c84:	2300      	movs	r3, #0
 8013c86:	707b      	strb	r3, [r7, #1]
  RXM1reg.RXM1EID8 = 0x00;
 8013c88:	2300      	movs	r3, #0
 8013c8a:	70bb      	strb	r3, [r7, #2]
  RXM1reg.RXM1EID0 = 0x00;
 8013c8c:	2300      	movs	r3, #0
 8013c8e:	70fb      	strb	r3, [r7, #3]

  /* Rx Filter values 초기화 */
  RXF0reg.RXF0SIDH = 0x00;
 8013c90:	2300      	movs	r3, #0
 8013c92:	773b      	strb	r3, [r7, #28]
  RXF0reg.RXF0SIDL = 0x00;      //Starndard Filter
 8013c94:	2300      	movs	r3, #0
 8013c96:	777b      	strb	r3, [r7, #29]
  RXF0reg.RXF0EID8 = 0x00;
 8013c98:	2300      	movs	r3, #0
 8013c9a:	77bb      	strb	r3, [r7, #30]
  RXF0reg.RXF0EID0 = 0x00;
 8013c9c:	2300      	movs	r3, #0
 8013c9e:	77fb      	strb	r3, [r7, #31]

  RXF1reg.RXF1SIDH = 0x00;
 8013ca0:	2300      	movs	r3, #0
 8013ca2:	763b      	strb	r3, [r7, #24]
  RXF1reg.RXF1SIDL = 0x08;      //Exntended Filter
 8013ca4:	2308      	movs	r3, #8
 8013ca6:	767b      	strb	r3, [r7, #25]
  RXF1reg.RXF1EID8 = 0x00;
 8013ca8:	2300      	movs	r3, #0
 8013caa:	76bb      	strb	r3, [r7, #26]
  RXF1reg.RXF1EID0 = 0x00;
 8013cac:	2300      	movs	r3, #0
 8013cae:	76fb      	strb	r3, [r7, #27]

  RXF2reg.RXF2SIDH = 0x00;
 8013cb0:	2300      	movs	r3, #0
 8013cb2:	753b      	strb	r3, [r7, #20]
  RXF2reg.RXF2SIDL = 0x00;
 8013cb4:	2300      	movs	r3, #0
 8013cb6:	757b      	strb	r3, [r7, #21]
  RXF2reg.RXF2EID8 = 0x00;
 8013cb8:	2300      	movs	r3, #0
 8013cba:	75bb      	strb	r3, [r7, #22]
  RXF2reg.RXF2EID0 = 0x00;
 8013cbc:	2300      	movs	r3, #0
 8013cbe:	75fb      	strb	r3, [r7, #23]

  RXF3reg.RXF3SIDH = 0x00;
 8013cc0:	2300      	movs	r3, #0
 8013cc2:	743b      	strb	r3, [r7, #16]
  RXF3reg.RXF3SIDL = 0x00;
 8013cc4:	2300      	movs	r3, #0
 8013cc6:	747b      	strb	r3, [r7, #17]
  RXF3reg.RXF3EID8 = 0x00;
 8013cc8:	2300      	movs	r3, #0
 8013cca:	74bb      	strb	r3, [r7, #18]
  RXF3reg.RXF3EID0 = 0x00;
 8013ccc:	2300      	movs	r3, #0
 8013cce:	74fb      	strb	r3, [r7, #19]

  RXF4reg.RXF4SIDH = 0x00;
 8013cd0:	2300      	movs	r3, #0
 8013cd2:	733b      	strb	r3, [r7, #12]
  RXF4reg.RXF4SIDL = 0x00;
 8013cd4:	2300      	movs	r3, #0
 8013cd6:	737b      	strb	r3, [r7, #13]
  RXF4reg.RXF4EID8 = 0x00;
 8013cd8:	2300      	movs	r3, #0
 8013cda:	73bb      	strb	r3, [r7, #14]
  RXF4reg.RXF4EID0 = 0x00;
 8013cdc:	2300      	movs	r3, #0
 8013cde:	73fb      	strb	r3, [r7, #15]

  RXF5reg.RXF5SIDH = 0x00;
 8013ce0:	2300      	movs	r3, #0
 8013ce2:	723b      	strb	r3, [r7, #8]
  RXF5reg.RXF5SIDL = 0x08;
 8013ce4:	2308      	movs	r3, #8
 8013ce6:	727b      	strb	r3, [r7, #9]
  RXF5reg.RXF5EID8 = 0x00;
 8013ce8:	2300      	movs	r3, #0
 8013cea:	72bb      	strb	r3, [r7, #10]
  RXF5reg.RXF5EID0 = 0x00;
 8013cec:	2300      	movs	r3, #0
 8013cee:	72fb      	strb	r3, [r7, #11]

  /* MCP2515 초기화, SPI 통신 상태 확인 */
  if(!MCP2515_Initialize())
 8013cf0:	f000 f9c4 	bl	801407c <MCP2515_Initialize>
 8013cf4:	4603      	mov	r3, r0
 8013cf6:	f083 0301 	eor.w	r3, r3, #1
 8013cfa:	b2db      	uxtb	r3, r3
 8013cfc:	2b00      	cmp	r3, #0
 8013cfe:	d001      	beq.n	8013d04 <CANSPI_Initialize+0xa0>
    return false;
 8013d00:	2300      	movs	r3, #0
 8013d02:	e05e      	b.n	8013dc2 <CANSPI_Initialize+0x15e>

  /* Configuration 모드로 설정 */
  if(!MCP2515_SetConfigMode())
 8013d04:	f000 f9ec 	bl	80140e0 <MCP2515_SetConfigMode>
 8013d08:	4603      	mov	r3, r0
 8013d0a:	f083 0301 	eor.w	r3, r3, #1
 8013d0e:	b2db      	uxtb	r3, r3
 8013d10:	2b00      	cmp	r3, #0
 8013d12:	d001      	beq.n	8013d18 <CANSPI_Initialize+0xb4>
    return false;
 8013d14:	2300      	movs	r3, #0
 8013d16:	e054      	b.n	8013dc2 <CANSPI_Initialize+0x15e>

  /* Filter & Mask 값 설정 */
  MCP2515_WriteByteSequence(MCP2515_RXM0SIDH, MCP2515_RXM0EID0, &(RXM0reg.RXM0SIDH));
 8013d18:	1d3b      	adds	r3, r7, #4
 8013d1a:	461a      	mov	r2, r3
 8013d1c:	2123      	movs	r1, #35	; 0x23
 8013d1e:	2020      	movs	r0, #32
 8013d20:	f000 fa88 	bl	8014234 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXM1SIDH, MCP2515_RXM1EID0, &(RXM1reg.RXM1SIDH));
 8013d24:	463b      	mov	r3, r7
 8013d26:	461a      	mov	r2, r3
 8013d28:	2127      	movs	r1, #39	; 0x27
 8013d2a:	2024      	movs	r0, #36	; 0x24
 8013d2c:	f000 fa82 	bl	8014234 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF0SIDH, MCP2515_RXF0EID0, &(RXF0reg.RXF0SIDH));
 8013d30:	f107 031c 	add.w	r3, r7, #28
 8013d34:	461a      	mov	r2, r3
 8013d36:	2103      	movs	r1, #3
 8013d38:	2000      	movs	r0, #0
 8013d3a:	f000 fa7b 	bl	8014234 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF1SIDH, MCP2515_RXF1EID0, &(RXF1reg.RXF1SIDH));
 8013d3e:	f107 0318 	add.w	r3, r7, #24
 8013d42:	461a      	mov	r2, r3
 8013d44:	2107      	movs	r1, #7
 8013d46:	2004      	movs	r0, #4
 8013d48:	f000 fa74 	bl	8014234 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF2SIDH, MCP2515_RXF2EID0, &(RXF2reg.RXF2SIDH));
 8013d4c:	f107 0314 	add.w	r3, r7, #20
 8013d50:	461a      	mov	r2, r3
 8013d52:	210b      	movs	r1, #11
 8013d54:	2008      	movs	r0, #8
 8013d56:	f000 fa6d 	bl	8014234 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF3SIDH, MCP2515_RXF3EID0, &(RXF3reg.RXF3SIDH));
 8013d5a:	f107 0310 	add.w	r3, r7, #16
 8013d5e:	461a      	mov	r2, r3
 8013d60:	2113      	movs	r1, #19
 8013d62:	2010      	movs	r0, #16
 8013d64:	f000 fa66 	bl	8014234 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF4SIDH, MCP2515_RXF4EID0, &(RXF4reg.RXF4SIDH));
 8013d68:	f107 030c 	add.w	r3, r7, #12
 8013d6c:	461a      	mov	r2, r3
 8013d6e:	2117      	movs	r1, #23
 8013d70:	2014      	movs	r0, #20
 8013d72:	f000 fa5f 	bl	8014234 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF5SIDH, MCP2515_RXF5EID0, &(RXF5reg.RXF5SIDH));
 8013d76:	f107 0308 	add.w	r3, r7, #8
 8013d7a:	461a      	mov	r2, r3
 8013d7c:	211b      	movs	r1, #27
 8013d7e:	2018      	movs	r0, #24
 8013d80:	f000 fa58 	bl	8014234 <MCP2515_WriteByteSequence>

  /* Accept All (Standard + Extended) */
  MCP2515_WriteByte(MCP2515_RXB0CTRL, 0x04);    //Enable BUKT, Accept Filter 0
 8013d84:	2104      	movs	r1, #4
 8013d86:	2060      	movs	r0, #96	; 0x60
 8013d88:	f000 fa2e 	bl	80141e8 <MCP2515_WriteByte>
  MCP2515_WriteByte(MCP2515_RXB1CTRL, 0x01);    //Accept Filter 1
 8013d8c:	2101      	movs	r1, #1
 8013d8e:	2070      	movs	r0, #112	; 0x70
 8013d90:	f000 fa2a 	bl	80141e8 <MCP2515_WriteByte>
  * tbit = 1tq + 5tq + 6tq + 4tq = 16tq
  * 16tq = 2us = 500kbps
  */

  /* 00(SJW 1tq) 000000 */
  MCP2515_WriteByte(MCP2515_CNF1, 0x00);
 8013d94:	2100      	movs	r1, #0
 8013d96:	202a      	movs	r0, #42	; 0x2a
 8013d98:	f000 fa26 	bl	80141e8 <MCP2515_WriteByte>

  /* 1 1 100(5tq) 101(6tq) */
  MCP2515_WriteByte(MCP2515_CNF2, 0xE5);
 8013d9c:	21e5      	movs	r1, #229	; 0xe5
 8013d9e:	2029      	movs	r0, #41	; 0x29
 8013da0:	f000 fa22 	bl	80141e8 <MCP2515_WriteByte>

  /* 1 0 000 011(4tq) */
  MCP2515_WriteByte(MCP2515_CNF3, 0x83);
 8013da4:	2183      	movs	r1, #131	; 0x83
 8013da6:	2028      	movs	r0, #40	; 0x28
 8013da8:	f000 fa1e 	bl	80141e8 <MCP2515_WriteByte>

  /* Normal 모드로 설정 */
  if(!MCP2515_SetNormalMode())
 8013dac:	f000 f9b6 	bl	801411c <MCP2515_SetNormalMode>
 8013db0:	4603      	mov	r3, r0
 8013db2:	f083 0301 	eor.w	r3, r3, #1
 8013db6:	b2db      	uxtb	r3, r3
 8013db8:	2b00      	cmp	r3, #0
 8013dba:	d001      	beq.n	8013dc0 <CANSPI_Initialize+0x15c>
    return false;
 8013dbc:	2300      	movs	r3, #0
 8013dbe:	e000      	b.n	8013dc2 <CANSPI_Initialize+0x15e>

  return true;
 8013dc0:	2301      	movs	r3, #1
}
 8013dc2:	4618      	mov	r0, r3
 8013dc4:	3720      	adds	r7, #32
 8013dc6:	46bd      	mov	sp, r7
 8013dc8:	bd80      	pop	{r7, pc}
 8013dca:	bf00      	nop
 8013dcc:	0801d7a8 	.word	0x0801d7a8

08013dd0 <CANSPI_Receive>:
	return (returnValue);
}

/* CAN 메시지 수신 */
uint8_t CANSPI_Receive(iCommsMessage_t * rxMsg)
{
 8013dd0:	b580      	push	{r7, lr}
 8013dd2:	b08e      	sub	sp, #56	; 0x38
 8013dd4:	af00      	add	r7, sp, #0
 8013dd6:	6078      	str	r0, [r7, #4]
	uCAN_MSG tempCanMsg;

	uint8_t returnValue = 0;
 8013dd8:	2300      	movs	r3, #0
 8013dda:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	rx_reg_t rxReg;
	ctrl_rx_status_t rxStatus;

	rxStatus.ctrl_rx_status = MCP2515_GetRxStatus();
 8013dde:	f000 fa73 	bl	80142c8 <MCP2515_GetRxStatus>
 8013de2:	4603      	mov	r3, r0
 8013de4:	733b      	strb	r3, [r7, #12]

	/* 버퍼에 수신된 메시지가 있는지 확인 */
	if (rxStatus.rxBuffer != 0)
 8013de6:	7b3b      	ldrb	r3, [r7, #12]
 8013de8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8013dec:	b2db      	uxtb	r3, r3
 8013dee:	2b00      	cmp	r3, #0
 8013df0:	f000 8092 	beq.w	8013f18 <CANSPI_Receive+0x148>
	{
	/* 어떤 버퍼에 메시지가 있는지 확인 후 처리 */
	if ((rxStatus.rxBuffer == MSG_IN_RXB0)|(rxStatus.rxBuffer == MSG_IN_BOTH_BUFFERS))
 8013df4:	7b3b      	ldrb	r3, [r7, #12]
 8013df6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8013dfa:	b2db      	uxtb	r3, r3
 8013dfc:	2b40      	cmp	r3, #64	; 0x40
 8013dfe:	bf0c      	ite	eq
 8013e00:	2301      	moveq	r3, #1
 8013e02:	2300      	movne	r3, #0
 8013e04:	b2da      	uxtb	r2, r3
 8013e06:	7b3b      	ldrb	r3, [r7, #12]
 8013e08:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8013e0c:	b2db      	uxtb	r3, r3
 8013e0e:	2bc0      	cmp	r3, #192	; 0xc0
 8013e10:	bf0c      	ite	eq
 8013e12:	2301      	moveq	r3, #1
 8013e14:	2300      	movne	r3, #0
 8013e16:	b2db      	uxtb	r3, r3
 8013e18:	4313      	orrs	r3, r2
 8013e1a:	b2db      	uxtb	r3, r3
 8013e1c:	2b00      	cmp	r3, #0
 8013e1e:	d007      	beq.n	8013e30 <CANSPI_Receive+0x60>
	{
	  MCP2515_ReadRxSequence(MCP2515_READ_RXB0SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 8013e20:	f107 0310 	add.w	r3, r7, #16
 8013e24:	220d      	movs	r2, #13
 8013e26:	4619      	mov	r1, r3
 8013e28:	2090      	movs	r0, #144	; 0x90
 8013e2a:	f000 f9b9 	bl	80141a0 <MCP2515_ReadRxSequence>
 8013e2e:	e00c      	b.n	8013e4a <CANSPI_Receive+0x7a>
	}
	else if (rxStatus.rxBuffer == MSG_IN_RXB1)
 8013e30:	7b3b      	ldrb	r3, [r7, #12]
 8013e32:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8013e36:	b2db      	uxtb	r3, r3
 8013e38:	2b80      	cmp	r3, #128	; 0x80
 8013e3a:	d106      	bne.n	8013e4a <CANSPI_Receive+0x7a>
	{
	  MCP2515_ReadRxSequence(MCP2515_READ_RXB1SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 8013e3c:	f107 0310 	add.w	r3, r7, #16
 8013e40:	220d      	movs	r2, #13
 8013e42:	4619      	mov	r1, r3
 8013e44:	2094      	movs	r0, #148	; 0x94
 8013e46:	f000 f9ab 	bl	80141a0 <MCP2515_ReadRxSequence>
	}

	/* Extended 타입 */
	if (rxStatus.msgType == dEXTENDED_CAN_MSG_ID_2_0B)
 8013e4a:	7b3b      	ldrb	r3, [r7, #12]
 8013e4c:	f003 0318 	and.w	r3, r3, #24
 8013e50:	b2db      	uxtb	r3, r3
 8013e52:	2b10      	cmp	r3, #16
 8013e54:	d10b      	bne.n	8013e6e <CANSPI_Receive+0x9e>
	{
	  tempCanMsg.frame.idType = (uint8_t) dEXTENDED_CAN_MSG_ID_2_0B;
 8013e56:	2302      	movs	r3, #2
 8013e58:	f887 3020 	strb.w	r3, [r7, #32]
	  tempCanMsg.frame.id = convertReg2ExtendedCANid(rxReg.RXBnEID8, rxReg.RXBnEID0, rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 8013e5c:	7cb8      	ldrb	r0, [r7, #18]
 8013e5e:	7cf9      	ldrb	r1, [r7, #19]
 8013e60:	7c3a      	ldrb	r2, [r7, #16]
 8013e62:	7c7b      	ldrb	r3, [r7, #17]
 8013e64:	f000 f886 	bl	8013f74 <convertReg2ExtendedCANid>
 8013e68:	4603      	mov	r3, r0
 8013e6a:	627b      	str	r3, [r7, #36]	; 0x24
 8013e6c:	e00a      	b.n	8013e84 <CANSPI_Receive+0xb4>
	}
	else
	{
	  /* Standard 타입 */
	  tempCanMsg.frame.idType = (uint8_t) dSTANDARD_CAN_MSG_ID_2_0B;
 8013e6e:	2301      	movs	r3, #1
 8013e70:	f887 3020 	strb.w	r3, [r7, #32]
	  tempCanMsg.frame.id = convertReg2StandardCANid(rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 8013e74:	7c3b      	ldrb	r3, [r7, #16]
 8013e76:	7c7a      	ldrb	r2, [r7, #17]
 8013e78:	4611      	mov	r1, r2
 8013e7a:	4618      	mov	r0, r3
 8013e7c:	f000 f8b8 	bl	8013ff0 <convertReg2StandardCANid>
 8013e80:	4603      	mov	r3, r0
 8013e82:	627b      	str	r3, [r7, #36]	; 0x24
	}

	tempCanMsg.frame.dlc   = rxReg.RXBnDLC;
 8013e84:	7d3b      	ldrb	r3, [r7, #20]
 8013e86:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	tempCanMsg.frame.data[0] = rxReg.RXBnD0;
 8013e8a:	7d7b      	ldrb	r3, [r7, #21]
 8013e8c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	tempCanMsg.frame.data[1] = rxReg.RXBnD1;
 8013e90:	7dbb      	ldrb	r3, [r7, #22]
 8013e92:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	tempCanMsg.frame.data[2] = rxReg.RXBnD2;
 8013e96:	7dfb      	ldrb	r3, [r7, #23]
 8013e98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	tempCanMsg.frame.data[3] = rxReg.RXBnD3;
 8013e9c:	7e3b      	ldrb	r3, [r7, #24]
 8013e9e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	tempCanMsg.frame.data[4] = rxReg.RXBnD4;
 8013ea2:	7e7b      	ldrb	r3, [r7, #25]
 8013ea4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	tempCanMsg.frame.data[5] = rxReg.RXBnD5;
 8013ea8:	7ebb      	ldrb	r3, [r7, #26]
 8013eaa:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	tempCanMsg.frame.data[6] = rxReg.RXBnD6;
 8013eae:	7efb      	ldrb	r3, [r7, #27]
 8013eb0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	tempCanMsg.frame.data[7] = rxReg.RXBnD7;
 8013eb4:	7f3b      	ldrb	r3, [r7, #28]
 8013eb6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30

	// Pack into iCommsMessage_t
	rxMsg->standardMessageID = tempCanMsg.frame.id;
 8013eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ebc:	b29a      	uxth	r2, r3
 8013ebe:	687b      	ldr	r3, [r7, #4]
 8013ec0:	801a      	strh	r2, [r3, #0]
	rxMsg->dataLength = tempCanMsg.frame.dlc;
 8013ec2:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8013ec6:	687b      	ldr	r3, [r7, #4]
 8013ec8:	709a      	strb	r2, [r3, #2]

	if (tempCanMsg.frame.dlc == 255) {
 8013eca:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013ece:	2bff      	cmp	r3, #255	; 0xff
 8013ed0:	d104      	bne.n	8013edc <CANSPI_Receive+0x10c>
		DebugPrint("IGNORING CAN, MESSAGE PROBABLY CORRUPTED");
 8013ed2:	4814      	ldr	r0, [pc, #80]	; (8013f24 <CANSPI_Receive+0x154>)
 8013ed4:	f000 fa60 	bl	8014398 <SerialPrintln>
		return 0;
 8013ed8:	2300      	movs	r3, #0
 8013eda:	e01f      	b.n	8013f1c <CANSPI_Receive+0x14c>
	}

	// TODO: Make this not crash when CAN
	for(uint8_t i=0; i<tempCanMsg.frame.dlc; i++)
 8013edc:	2300      	movs	r3, #0
 8013ede:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8013ee2:	e010      	b.n	8013f06 <CANSPI_Receive+0x136>
	{
		rxMsg->data[i] = tempCanMsg.frame.data[i];
 8013ee4:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8013ee8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8013eec:	3238      	adds	r2, #56	; 0x38
 8013eee:	443a      	add	r2, r7
 8013ef0:	f812 1c0f 	ldrb.w	r1, [r2, #-15]
 8013ef4:	687a      	ldr	r2, [r7, #4]
 8013ef6:	4413      	add	r3, r2
 8013ef8:	460a      	mov	r2, r1
 8013efa:	70da      	strb	r2, [r3, #3]
	for(uint8_t i=0; i<tempCanMsg.frame.dlc; i++)
 8013efc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8013f00:	3301      	adds	r3, #1
 8013f02:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8013f06:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013f0a:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8013f0e:	429a      	cmp	r2, r3
 8013f10:	d3e8      	bcc.n	8013ee4 <CANSPI_Receive+0x114>
	}
	returnValue = 1;
 8013f12:	2301      	movs	r3, #1
 8013f14:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	}

	return (returnValue);
 8013f18:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8013f1c:	4618      	mov	r0, r3
 8013f1e:	3738      	adds	r7, #56	; 0x38
 8013f20:	46bd      	mov	sp, r7
 8013f22:	bd80      	pop	{r7, pc}
 8013f24:	0801d7bc 	.word	0x0801d7bc

08013f28 <CANSPI_messagesInBuffer>:

/* 수신 버퍼에 메시지가 있는지 체크 */
uint8_t CANSPI_messagesInBuffer(void)
{
 8013f28:	b580      	push	{r7, lr}
 8013f2a:	b082      	sub	sp, #8
 8013f2c:	af00      	add	r7, sp, #0
  uint8_t messageCount = 0;
 8013f2e:	2300      	movs	r3, #0
 8013f30:	71fb      	strb	r3, [r7, #7]

  ctrlStatus.ctrl_status = MCP2515_ReadStatus();
 8013f32:	f000 f9ab 	bl	801428c <MCP2515_ReadStatus>
 8013f36:	4603      	mov	r3, r0
 8013f38:	461a      	mov	r2, r3
 8013f3a:	4b0d      	ldr	r3, [pc, #52]	; (8013f70 <CANSPI_messagesInBuffer+0x48>)
 8013f3c:	701a      	strb	r2, [r3, #0]

  if(ctrlStatus.RX0IF != 0)
 8013f3e:	4b0c      	ldr	r3, [pc, #48]	; (8013f70 <CANSPI_messagesInBuffer+0x48>)
 8013f40:	781b      	ldrb	r3, [r3, #0]
 8013f42:	f003 0301 	and.w	r3, r3, #1
 8013f46:	b2db      	uxtb	r3, r3
 8013f48:	2b00      	cmp	r3, #0
 8013f4a:	d002      	beq.n	8013f52 <CANSPI_messagesInBuffer+0x2a>
  {
    messageCount++;
 8013f4c:	79fb      	ldrb	r3, [r7, #7]
 8013f4e:	3301      	adds	r3, #1
 8013f50:	71fb      	strb	r3, [r7, #7]
  }

  if(ctrlStatus.RX1IF != 0)
 8013f52:	4b07      	ldr	r3, [pc, #28]	; (8013f70 <CANSPI_messagesInBuffer+0x48>)
 8013f54:	781b      	ldrb	r3, [r3, #0]
 8013f56:	f003 0302 	and.w	r3, r3, #2
 8013f5a:	b2db      	uxtb	r3, r3
 8013f5c:	2b00      	cmp	r3, #0
 8013f5e:	d002      	beq.n	8013f66 <CANSPI_messagesInBuffer+0x3e>
  {
    messageCount++;
 8013f60:	79fb      	ldrb	r3, [r7, #7]
 8013f62:	3301      	adds	r3, #1
 8013f64:	71fb      	strb	r3, [r7, #7]
  }

  return (messageCount);
 8013f66:	79fb      	ldrb	r3, [r7, #7]
}
 8013f68:	4618      	mov	r0, r3
 8013f6a:	3708      	adds	r7, #8
 8013f6c:	46bd      	mov	sp, r7
 8013f6e:	bd80      	pop	{r7, pc}
 8013f70:	20023148 	.word	0x20023148

08013f74 <convertReg2ExtendedCANid>:
  return (returnValue);
}

/* Register 저장값을 Extended ID 타입으로 변환하기 위한 함수 */
static uint32_t convertReg2ExtendedCANid(uint8_t tempRXBn_EIDH, uint8_t tempRXBn_EIDL, uint8_t tempRXBn_SIDH, uint8_t tempRXBn_SIDL)
{
 8013f74:	b490      	push	{r4, r7}
 8013f76:	b086      	sub	sp, #24
 8013f78:	af00      	add	r7, sp, #0
 8013f7a:	4604      	mov	r4, r0
 8013f7c:	4608      	mov	r0, r1
 8013f7e:	4611      	mov	r1, r2
 8013f80:	461a      	mov	r2, r3
 8013f82:	4623      	mov	r3, r4
 8013f84:	71fb      	strb	r3, [r7, #7]
 8013f86:	4603      	mov	r3, r0
 8013f88:	71bb      	strb	r3, [r7, #6]
 8013f8a:	460b      	mov	r3, r1
 8013f8c:	717b      	strb	r3, [r7, #5]
 8013f8e:	4613      	mov	r3, r2
 8013f90:	713b      	strb	r3, [r7, #4]
  uint32_t returnValue = 0;
 8013f92:	2300      	movs	r3, #0
 8013f94:	617b      	str	r3, [r7, #20]
  uint32_t ConvertedID = 0;
 8013f96:	2300      	movs	r3, #0
 8013f98:	613b      	str	r3, [r7, #16]
  uint8_t CAN_standardLo_ID_lo2bits;
  uint8_t CAN_standardLo_ID_hi3bits;

  CAN_standardLo_ID_lo2bits = (tempRXBn_SIDL & 0x03);
 8013f9a:	793b      	ldrb	r3, [r7, #4]
 8013f9c:	f003 0303 	and.w	r3, r3, #3
 8013fa0:	73fb      	strb	r3, [r7, #15]
  CAN_standardLo_ID_hi3bits = (tempRXBn_SIDL >> 5);
 8013fa2:	793b      	ldrb	r3, [r7, #4]
 8013fa4:	095b      	lsrs	r3, r3, #5
 8013fa6:	73bb      	strb	r3, [r7, #14]
  ConvertedID = (tempRXBn_SIDH << 3);
 8013fa8:	797b      	ldrb	r3, [r7, #5]
 8013faa:	00db      	lsls	r3, r3, #3
 8013fac:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + CAN_standardLo_ID_hi3bits;
 8013fae:	7bbb      	ldrb	r3, [r7, #14]
 8013fb0:	693a      	ldr	r2, [r7, #16]
 8013fb2:	4413      	add	r3, r2
 8013fb4:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 2);
 8013fb6:	693b      	ldr	r3, [r7, #16]
 8013fb8:	009b      	lsls	r3, r3, #2
 8013fba:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + CAN_standardLo_ID_lo2bits;
 8013fbc:	7bfb      	ldrb	r3, [r7, #15]
 8013fbe:	693a      	ldr	r2, [r7, #16]
 8013fc0:	4413      	add	r3, r2
 8013fc2:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 8);
 8013fc4:	693b      	ldr	r3, [r7, #16]
 8013fc6:	021b      	lsls	r3, r3, #8
 8013fc8:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + tempRXBn_EIDH;
 8013fca:	79fb      	ldrb	r3, [r7, #7]
 8013fcc:	693a      	ldr	r2, [r7, #16]
 8013fce:	4413      	add	r3, r2
 8013fd0:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 8);
 8013fd2:	693b      	ldr	r3, [r7, #16]
 8013fd4:	021b      	lsls	r3, r3, #8
 8013fd6:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + tempRXBn_EIDL;
 8013fd8:	79bb      	ldrb	r3, [r7, #6]
 8013fda:	693a      	ldr	r2, [r7, #16]
 8013fdc:	4413      	add	r3, r2
 8013fde:	613b      	str	r3, [r7, #16]
  returnValue = ConvertedID;
 8013fe0:	693b      	ldr	r3, [r7, #16]
 8013fe2:	617b      	str	r3, [r7, #20]
  return (returnValue);
 8013fe4:	697b      	ldr	r3, [r7, #20]
}
 8013fe6:	4618      	mov	r0, r3
 8013fe8:	3718      	adds	r7, #24
 8013fea:	46bd      	mov	sp, r7
 8013fec:	bc90      	pop	{r4, r7}
 8013fee:	4770      	bx	lr

08013ff0 <convertReg2StandardCANid>:

/* Register 저장값을 Standard ID 타입으로 변환하기 위한 함수 */
static uint32_t convertReg2StandardCANid(uint8_t tempRXBn_SIDH, uint8_t tempRXBn_SIDL)
{
 8013ff0:	b480      	push	{r7}
 8013ff2:	b085      	sub	sp, #20
 8013ff4:	af00      	add	r7, sp, #0
 8013ff6:	4603      	mov	r3, r0
 8013ff8:	460a      	mov	r2, r1
 8013ffa:	71fb      	strb	r3, [r7, #7]
 8013ffc:	4613      	mov	r3, r2
 8013ffe:	71bb      	strb	r3, [r7, #6]
  uint32_t returnValue = 0;
 8014000:	2300      	movs	r3, #0
 8014002:	60fb      	str	r3, [r7, #12]
  uint32_t ConvertedID;

  ConvertedID = (tempRXBn_SIDH << 3);
 8014004:	79fb      	ldrb	r3, [r7, #7]
 8014006:	00db      	lsls	r3, r3, #3
 8014008:	60bb      	str	r3, [r7, #8]
  ConvertedID = ConvertedID + (tempRXBn_SIDL >> 5);
 801400a:	79bb      	ldrb	r3, [r7, #6]
 801400c:	095b      	lsrs	r3, r3, #5
 801400e:	b2db      	uxtb	r3, r3
 8014010:	461a      	mov	r2, r3
 8014012:	68bb      	ldr	r3, [r7, #8]
 8014014:	4413      	add	r3, r2
 8014016:	60bb      	str	r3, [r7, #8]
  returnValue = ConvertedID;
 8014018:	68bb      	ldr	r3, [r7, #8]
 801401a:	60fb      	str	r3, [r7, #12]

  return (returnValue);
 801401c:	68fb      	ldr	r3, [r7, #12]
}
 801401e:	4618      	mov	r0, r3
 8014020:	3714      	adds	r7, #20
 8014022:	46bd      	mov	sp, r7
 8014024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014028:	4770      	bx	lr

0801402a <readMsg>:
    tempPassedInID = tempPassedInID >> 8;
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
  }
}

PUBLIC uint32_t readMsg(iCommsMessage_t *msg) {
 801402a:	b480      	push	{r7}
 801402c:	b085      	sub	sp, #20
 801402e:	af00      	add	r7, sp, #0
 8014030:	6078      	str	r0, [r7, #4]
	int32_t value = msg->data[msg->dataLength - 1];
 8014032:	687b      	ldr	r3, [r7, #4]
 8014034:	789b      	ldrb	r3, [r3, #2]
 8014036:	3b01      	subs	r3, #1
 8014038:	687a      	ldr	r2, [r7, #4]
 801403a:	4413      	add	r3, r2
 801403c:	78db      	ldrb	r3, [r3, #3]
 801403e:	60fb      	str	r3, [r7, #12]

	for (int i = msg->dataLength - 1; i > 0; i--) {
 8014040:	687b      	ldr	r3, [r7, #4]
 8014042:	789b      	ldrb	r3, [r3, #2]
 8014044:	3b01      	subs	r3, #1
 8014046:	60bb      	str	r3, [r7, #8]
 8014048:	e00e      	b.n	8014068 <readMsg+0x3e>
		value <<= 8;
 801404a:	68fb      	ldr	r3, [r7, #12]
 801404c:	021b      	lsls	r3, r3, #8
 801404e:	60fb      	str	r3, [r7, #12]
		value |= msg->data[i -1];
 8014050:	68bb      	ldr	r3, [r7, #8]
 8014052:	3b01      	subs	r3, #1
 8014054:	687a      	ldr	r2, [r7, #4]
 8014056:	4413      	add	r3, r2
 8014058:	78db      	ldrb	r3, [r3, #3]
 801405a:	461a      	mov	r2, r3
 801405c:	68fb      	ldr	r3, [r7, #12]
 801405e:	4313      	orrs	r3, r2
 8014060:	60fb      	str	r3, [r7, #12]
	for (int i = msg->dataLength - 1; i > 0; i--) {
 8014062:	68bb      	ldr	r3, [r7, #8]
 8014064:	3b01      	subs	r3, #1
 8014066:	60bb      	str	r3, [r7, #8]
 8014068:	68bb      	ldr	r3, [r7, #8]
 801406a:	2b00      	cmp	r3, #0
 801406c:	dced      	bgt.n	801404a <readMsg+0x20>
	}

	return value;
 801406e:	68fb      	ldr	r3, [r7, #12]
}
 8014070:	4618      	mov	r0, r3
 8014072:	3714      	adds	r7, #20
 8014074:	46bd      	mov	sp, r7
 8014076:	f85d 7b04 	ldr.w	r7, [sp], #4
 801407a:	4770      	bx	lr

0801407c <MCP2515_Initialize>:
static uint8_t SPI_Rx(void);
static void SPI_RxBuffer(uint8_t *buffer, uint8_t length);

/* MCP2515 초기화 */
bool MCP2515_Initialize(void)
{
 801407c:	b580      	push	{r7, lr}
 801407e:	b082      	sub	sp, #8
 8014080:	af00      	add	r7, sp, #0
  MCP2515_CS_HIGH();
 8014082:	2201      	movs	r2, #1
 8014084:	f44f 7180 	mov.w	r1, #256	; 0x100
 8014088:	4810      	ldr	r0, [pc, #64]	; (80140cc <MCP2515_Initialize+0x50>)
 801408a:	f7f0 fdff 	bl	8004c8c <HAL_GPIO_WritePin>

  DebugPrint("Initialized MCP2515");
 801408e:	4810      	ldr	r0, [pc, #64]	; (80140d0 <MCP2515_Initialize+0x54>)
 8014090:	f000 f982 	bl	8014398 <SerialPrintln>

  uint8_t loop = 10;
 8014094:	230a      	movs	r3, #10
 8014096:	71fb      	strb	r3, [r7, #7]

  do {
    /* SPI Ready 확인 */
    if(HAL_SPI_GetState(SPI_CAN) == HAL_SPI_STATE_READY) {
 8014098:	480e      	ldr	r0, [pc, #56]	; (80140d4 <MCP2515_Initialize+0x58>)
 801409a:	f7f5 fe9a 	bl	8009dd2 <HAL_SPI_GetState>
 801409e:	4603      	mov	r3, r0
 80140a0:	2b01      	cmp	r3, #1
 80140a2:	d104      	bne.n	80140ae <MCP2515_Initialize+0x32>
    	  DebugPrint("Succeeded to init MCP");
 80140a4:	480c      	ldr	r0, [pc, #48]	; (80140d8 <MCP2515_Initialize+0x5c>)
 80140a6:	f000 f977 	bl	8014398 <SerialPrintln>
    	return true;
 80140aa:	2301      	movs	r3, #1
 80140ac:	e009      	b.n	80140c2 <MCP2515_Initialize+0x46>
    }
    loop--;
 80140ae:	79fb      	ldrb	r3, [r7, #7]
 80140b0:	3b01      	subs	r3, #1
 80140b2:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 80140b4:	79fb      	ldrb	r3, [r7, #7]
 80140b6:	2b00      	cmp	r3, #0
 80140b8:	d1ee      	bne.n	8014098 <MCP2515_Initialize+0x1c>

  DebugPrint("Failed to init MCP");
 80140ba:	4808      	ldr	r0, [pc, #32]	; (80140dc <MCP2515_Initialize+0x60>)
 80140bc:	f000 f96c 	bl	8014398 <SerialPrintln>
  return false;
 80140c0:	2300      	movs	r3, #0
}
 80140c2:	4618      	mov	r0, r3
 80140c4:	3708      	adds	r7, #8
 80140c6:	46bd      	mov	sp, r7
 80140c8:	bd80      	pop	{r7, pc}
 80140ca:	bf00      	nop
 80140cc:	40020400 	.word	0x40020400
 80140d0:	0801d7e8 	.word	0x0801d7e8
 80140d4:	200099b0 	.word	0x200099b0
 80140d8:	0801d7fc 	.word	0x0801d7fc
 80140dc:	0801d814 	.word	0x0801d814

080140e0 <MCP2515_SetConfigMode>:

/* MCP2515 를 설정모드로 전환 */
bool MCP2515_SetConfigMode(void)
{
 80140e0:	b580      	push	{r7, lr}
 80140e2:	b082      	sub	sp, #8
 80140e4:	af00      	add	r7, sp, #0
  /* CANCTRL Register Configuration 모드 설정 */
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x80);
 80140e6:	2180      	movs	r1, #128	; 0x80
 80140e8:	200f      	movs	r0, #15
 80140ea:	f000 f87d 	bl	80141e8 <MCP2515_WriteByte>

  uint8_t loop = 10;
 80140ee:	230a      	movs	r3, #10
 80140f0:	71fb      	strb	r3, [r7, #7]

  do {
    /* 모드전환 확인 */
    if((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x80)
 80140f2:	200e      	movs	r0, #14
 80140f4:	f000 f830 	bl	8014158 <MCP2515_ReadByte>
 80140f8:	4603      	mov	r3, r0
 80140fa:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80140fe:	2b80      	cmp	r3, #128	; 0x80
 8014100:	d101      	bne.n	8014106 <MCP2515_SetConfigMode+0x26>
      return true;
 8014102:	2301      	movs	r3, #1
 8014104:	e006      	b.n	8014114 <MCP2515_SetConfigMode+0x34>

    loop--;
 8014106:	79fb      	ldrb	r3, [r7, #7]
 8014108:	3b01      	subs	r3, #1
 801410a:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 801410c:	79fb      	ldrb	r3, [r7, #7]
 801410e:	2b00      	cmp	r3, #0
 8014110:	d1ef      	bne.n	80140f2 <MCP2515_SetConfigMode+0x12>

  return false;
 8014112:	2300      	movs	r3, #0
}
 8014114:	4618      	mov	r0, r3
 8014116:	3708      	adds	r7, #8
 8014118:	46bd      	mov	sp, r7
 801411a:	bd80      	pop	{r7, pc}

0801411c <MCP2515_SetNormalMode>:

/* MCP2515 를 Normal모드로 전환 */
bool MCP2515_SetNormalMode(void)
{
 801411c:	b580      	push	{r7, lr}
 801411e:	b082      	sub	sp, #8
 8014120:	af00      	add	r7, sp, #0
  /* CANCTRL Register Normal 모드 설정 */
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x00);
 8014122:	2100      	movs	r1, #0
 8014124:	200f      	movs	r0, #15
 8014126:	f000 f85f 	bl	80141e8 <MCP2515_WriteByte>

  uint8_t loop = 10;
 801412a:	230a      	movs	r3, #10
 801412c:	71fb      	strb	r3, [r7, #7]

  do {
    /* 모드전환 확인 */
    if((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x00)
 801412e:	200e      	movs	r0, #14
 8014130:	f000 f812 	bl	8014158 <MCP2515_ReadByte>
 8014134:	4603      	mov	r3, r0
 8014136:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 801413a:	2b00      	cmp	r3, #0
 801413c:	d101      	bne.n	8014142 <MCP2515_SetNormalMode+0x26>
      return true;
 801413e:	2301      	movs	r3, #1
 8014140:	e006      	b.n	8014150 <MCP2515_SetNormalMode+0x34>

    loop--;
 8014142:	79fb      	ldrb	r3, [r7, #7]
 8014144:	3b01      	subs	r3, #1
 8014146:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 8014148:	79fb      	ldrb	r3, [r7, #7]
 801414a:	2b00      	cmp	r3, #0
 801414c:	d1ef      	bne.n	801412e <MCP2515_SetNormalMode+0x12>

  return false;
 801414e:	2300      	movs	r3, #0
}
 8014150:	4618      	mov	r0, r3
 8014152:	3708      	adds	r7, #8
 8014154:	46bd      	mov	sp, r7
 8014156:	bd80      	pop	{r7, pc}

08014158 <MCP2515_ReadByte>:
  MCP2515_CS_HIGH();
}

/* 1바이트 읽기 */
uint8_t MCP2515_ReadByte (uint8_t address)
{
 8014158:	b580      	push	{r7, lr}
 801415a:	b084      	sub	sp, #16
 801415c:	af00      	add	r7, sp, #0
 801415e:	4603      	mov	r3, r0
 8014160:	71fb      	strb	r3, [r7, #7]
  uint8_t retVal;

  MCP2515_CS_LOW();
 8014162:	2200      	movs	r2, #0
 8014164:	f44f 7180 	mov.w	r1, #256	; 0x100
 8014168:	480c      	ldr	r0, [pc, #48]	; (801419c <MCP2515_ReadByte+0x44>)
 801416a:	f7f0 fd8f 	bl	8004c8c <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_READ);
 801416e:	2003      	movs	r0, #3
 8014170:	f000 f8c8 	bl	8014304 <SPI_Tx>
  SPI_Tx(address);
 8014174:	79fb      	ldrb	r3, [r7, #7]
 8014176:	4618      	mov	r0, r3
 8014178:	f000 f8c4 	bl	8014304 <SPI_Tx>
  retVal = SPI_Rx();
 801417c:	f000 f8e8 	bl	8014350 <SPI_Rx>
 8014180:	4603      	mov	r3, r0
 8014182:	73fb      	strb	r3, [r7, #15]

  MCP2515_CS_HIGH();
 8014184:	2201      	movs	r2, #1
 8014186:	f44f 7180 	mov.w	r1, #256	; 0x100
 801418a:	4804      	ldr	r0, [pc, #16]	; (801419c <MCP2515_ReadByte+0x44>)
 801418c:	f7f0 fd7e 	bl	8004c8c <HAL_GPIO_WritePin>

  return retVal;
 8014190:	7bfb      	ldrb	r3, [r7, #15]
}
 8014192:	4618      	mov	r0, r3
 8014194:	3710      	adds	r7, #16
 8014196:	46bd      	mov	sp, r7
 8014198:	bd80      	pop	{r7, pc}
 801419a:	bf00      	nop
 801419c:	40020400 	.word	0x40020400

080141a0 <MCP2515_ReadRxSequence>:

/* Sequential Bytes 읽기 */
void MCP2515_ReadRxSequence(uint8_t instruction, uint8_t *data, uint8_t length)
{
 80141a0:	b580      	push	{r7, lr}
 80141a2:	b082      	sub	sp, #8
 80141a4:	af00      	add	r7, sp, #0
 80141a6:	4603      	mov	r3, r0
 80141a8:	6039      	str	r1, [r7, #0]
 80141aa:	71fb      	strb	r3, [r7, #7]
 80141ac:	4613      	mov	r3, r2
 80141ae:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 80141b0:	2200      	movs	r2, #0
 80141b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80141b6:	480b      	ldr	r0, [pc, #44]	; (80141e4 <MCP2515_ReadRxSequence+0x44>)
 80141b8:	f7f0 fd68 	bl	8004c8c <HAL_GPIO_WritePin>

  SPI_Tx(instruction);
 80141bc:	79fb      	ldrb	r3, [r7, #7]
 80141be:	4618      	mov	r0, r3
 80141c0:	f000 f8a0 	bl	8014304 <SPI_Tx>
  SPI_RxBuffer(data, length);
 80141c4:	79bb      	ldrb	r3, [r7, #6]
 80141c6:	4619      	mov	r1, r3
 80141c8:	6838      	ldr	r0, [r7, #0]
 80141ca:	f000 f8d1 	bl	8014370 <SPI_RxBuffer>

  MCP2515_CS_HIGH();
 80141ce:	2201      	movs	r2, #1
 80141d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80141d4:	4803      	ldr	r0, [pc, #12]	; (80141e4 <MCP2515_ReadRxSequence+0x44>)
 80141d6:	f7f0 fd59 	bl	8004c8c <HAL_GPIO_WritePin>
}
 80141da:	bf00      	nop
 80141dc:	3708      	adds	r7, #8
 80141de:	46bd      	mov	sp, r7
 80141e0:	bd80      	pop	{r7, pc}
 80141e2:	bf00      	nop
 80141e4:	40020400 	.word	0x40020400

080141e8 <MCP2515_WriteByte>:

/* 1바이트 쓰기 */
void MCP2515_WriteByte(uint8_t address, uint8_t data)
{
 80141e8:	b580      	push	{r7, lr}
 80141ea:	b082      	sub	sp, #8
 80141ec:	af00      	add	r7, sp, #0
 80141ee:	4603      	mov	r3, r0
 80141f0:	460a      	mov	r2, r1
 80141f2:	71fb      	strb	r3, [r7, #7]
 80141f4:	4613      	mov	r3, r2
 80141f6:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 80141f8:	2200      	movs	r2, #0
 80141fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80141fe:	480c      	ldr	r0, [pc, #48]	; (8014230 <MCP2515_WriteByte+0x48>)
 8014200:	f7f0 fd44 	bl	8004c8c <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_WRITE);
 8014204:	2002      	movs	r0, #2
 8014206:	f000 f87d 	bl	8014304 <SPI_Tx>
  SPI_Tx(address);
 801420a:	79fb      	ldrb	r3, [r7, #7]
 801420c:	4618      	mov	r0, r3
 801420e:	f000 f879 	bl	8014304 <SPI_Tx>
  SPI_Tx(data);
 8014212:	79bb      	ldrb	r3, [r7, #6]
 8014214:	4618      	mov	r0, r3
 8014216:	f000 f875 	bl	8014304 <SPI_Tx>

  MCP2515_CS_HIGH();
 801421a:	2201      	movs	r2, #1
 801421c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8014220:	4803      	ldr	r0, [pc, #12]	; (8014230 <MCP2515_WriteByte+0x48>)
 8014222:	f7f0 fd33 	bl	8004c8c <HAL_GPIO_WritePin>
}
 8014226:	bf00      	nop
 8014228:	3708      	adds	r7, #8
 801422a:	46bd      	mov	sp, r7
 801422c:	bd80      	pop	{r7, pc}
 801422e:	bf00      	nop
 8014230:	40020400 	.word	0x40020400

08014234 <MCP2515_WriteByteSequence>:

/* Sequential Bytes 쓰기 */
void MCP2515_WriteByteSequence(uint8_t startAddress, uint8_t endAddress, uint8_t *data)
{
 8014234:	b580      	push	{r7, lr}
 8014236:	b082      	sub	sp, #8
 8014238:	af00      	add	r7, sp, #0
 801423a:	4603      	mov	r3, r0
 801423c:	603a      	str	r2, [r7, #0]
 801423e:	71fb      	strb	r3, [r7, #7]
 8014240:	460b      	mov	r3, r1
 8014242:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 8014244:	2200      	movs	r2, #0
 8014246:	f44f 7180 	mov.w	r1, #256	; 0x100
 801424a:	480f      	ldr	r0, [pc, #60]	; (8014288 <MCP2515_WriteByteSequence+0x54>)
 801424c:	f7f0 fd1e 	bl	8004c8c <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_WRITE);
 8014250:	2002      	movs	r0, #2
 8014252:	f000 f857 	bl	8014304 <SPI_Tx>
  SPI_Tx(startAddress);
 8014256:	79fb      	ldrb	r3, [r7, #7]
 8014258:	4618      	mov	r0, r3
 801425a:	f000 f853 	bl	8014304 <SPI_Tx>
  SPI_TxBuffer(data, (endAddress - startAddress + 1));
 801425e:	79ba      	ldrb	r2, [r7, #6]
 8014260:	79fb      	ldrb	r3, [r7, #7]
 8014262:	1ad3      	subs	r3, r2, r3
 8014264:	b2db      	uxtb	r3, r3
 8014266:	3301      	adds	r3, #1
 8014268:	b2db      	uxtb	r3, r3
 801426a:	4619      	mov	r1, r3
 801426c:	6838      	ldr	r0, [r7, #0]
 801426e:	f000 f85b 	bl	8014328 <SPI_TxBuffer>

  MCP2515_CS_HIGH();
 8014272:	2201      	movs	r2, #1
 8014274:	f44f 7180 	mov.w	r1, #256	; 0x100
 8014278:	4803      	ldr	r0, [pc, #12]	; (8014288 <MCP2515_WriteByteSequence+0x54>)
 801427a:	f7f0 fd07 	bl	8004c8c <HAL_GPIO_WritePin>
}
 801427e:	bf00      	nop
 8014280:	3708      	adds	r7, #8
 8014282:	46bd      	mov	sp, r7
 8014284:	bd80      	pop	{r7, pc}
 8014286:	bf00      	nop
 8014288:	40020400 	.word	0x40020400

0801428c <MCP2515_ReadStatus>:
  MCP2515_CS_HIGH();
}

/* MCP2515 Status 확인 */
uint8_t MCP2515_ReadStatus(void)
{
 801428c:	b580      	push	{r7, lr}
 801428e:	b082      	sub	sp, #8
 8014290:	af00      	add	r7, sp, #0
  uint8_t retVal;

  MCP2515_CS_LOW();
 8014292:	2200      	movs	r2, #0
 8014294:	f44f 7180 	mov.w	r1, #256	; 0x100
 8014298:	480a      	ldr	r0, [pc, #40]	; (80142c4 <MCP2515_ReadStatus+0x38>)
 801429a:	f7f0 fcf7 	bl	8004c8c <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_READ_STATUS);
 801429e:	20a0      	movs	r0, #160	; 0xa0
 80142a0:	f000 f830 	bl	8014304 <SPI_Tx>
  retVal = SPI_Rx();
 80142a4:	f000 f854 	bl	8014350 <SPI_Rx>
 80142a8:	4603      	mov	r3, r0
 80142aa:	71fb      	strb	r3, [r7, #7]

  MCP2515_CS_HIGH();
 80142ac:	2201      	movs	r2, #1
 80142ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80142b2:	4804      	ldr	r0, [pc, #16]	; (80142c4 <MCP2515_ReadStatus+0x38>)
 80142b4:	f7f0 fcea 	bl	8004c8c <HAL_GPIO_WritePin>

  return retVal;
 80142b8:	79fb      	ldrb	r3, [r7, #7]
}
 80142ba:	4618      	mov	r0, r3
 80142bc:	3708      	adds	r7, #8
 80142be:	46bd      	mov	sp, r7
 80142c0:	bd80      	pop	{r7, pc}
 80142c2:	bf00      	nop
 80142c4:	40020400 	.word	0x40020400

080142c8 <MCP2515_GetRxStatus>:

/* MCP2515 RxStatus 레지스터 확인 */
uint8_t MCP2515_GetRxStatus(void)
{
 80142c8:	b580      	push	{r7, lr}
 80142ca:	b082      	sub	sp, #8
 80142cc:	af00      	add	r7, sp, #0
  uint8_t retVal;

  MCP2515_CS_LOW();
 80142ce:	2200      	movs	r2, #0
 80142d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80142d4:	480a      	ldr	r0, [pc, #40]	; (8014300 <MCP2515_GetRxStatus+0x38>)
 80142d6:	f7f0 fcd9 	bl	8004c8c <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_RX_STATUS);
 80142da:	20b0      	movs	r0, #176	; 0xb0
 80142dc:	f000 f812 	bl	8014304 <SPI_Tx>
  retVal = SPI_Rx();
 80142e0:	f000 f836 	bl	8014350 <SPI_Rx>
 80142e4:	4603      	mov	r3, r0
 80142e6:	71fb      	strb	r3, [r7, #7]

  MCP2515_CS_HIGH();
 80142e8:	2201      	movs	r2, #1
 80142ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80142ee:	4804      	ldr	r0, [pc, #16]	; (8014300 <MCP2515_GetRxStatus+0x38>)
 80142f0:	f7f0 fccc 	bl	8004c8c <HAL_GPIO_WritePin>

  return retVal;
 80142f4:	79fb      	ldrb	r3, [r7, #7]
}
 80142f6:	4618      	mov	r0, r3
 80142f8:	3708      	adds	r7, #8
 80142fa:	46bd      	mov	sp, r7
 80142fc:	bd80      	pop	{r7, pc}
 80142fe:	bf00      	nop
 8014300:	40020400 	.word	0x40020400

08014304 <SPI_Tx>:
  MCP2515_CS_HIGH();
}

/* SPI Tx Wrapper 함수 */
static void SPI_Tx(uint8_t data)
{
 8014304:	b580      	push	{r7, lr}
 8014306:	b082      	sub	sp, #8
 8014308:	af00      	add	r7, sp, #0
 801430a:	4603      	mov	r3, r0
 801430c:	71fb      	strb	r3, [r7, #7]
  HAL_SPI_Transmit(SPI_CAN, &data, 1, SPI_TIMEOUT);
 801430e:	1df9      	adds	r1, r7, #7
 8014310:	230a      	movs	r3, #10
 8014312:	2201      	movs	r2, #1
 8014314:	4803      	ldr	r0, [pc, #12]	; (8014324 <SPI_Tx+0x20>)
 8014316:	f7f5 f8ab 	bl	8009470 <HAL_SPI_Transmit>
}
 801431a:	bf00      	nop
 801431c:	3708      	adds	r7, #8
 801431e:	46bd      	mov	sp, r7
 8014320:	bd80      	pop	{r7, pc}
 8014322:	bf00      	nop
 8014324:	200099b0 	.word	0x200099b0

08014328 <SPI_TxBuffer>:

/* SPI Tx Wrapper 함수 */
static void SPI_TxBuffer(uint8_t *buffer, uint8_t length)
{
 8014328:	b580      	push	{r7, lr}
 801432a:	b082      	sub	sp, #8
 801432c:	af00      	add	r7, sp, #0
 801432e:	6078      	str	r0, [r7, #4]
 8014330:	460b      	mov	r3, r1
 8014332:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Transmit(SPI_CAN, buffer, length, SPI_TIMEOUT);
 8014334:	78fb      	ldrb	r3, [r7, #3]
 8014336:	b29a      	uxth	r2, r3
 8014338:	230a      	movs	r3, #10
 801433a:	6879      	ldr	r1, [r7, #4]
 801433c:	4803      	ldr	r0, [pc, #12]	; (801434c <SPI_TxBuffer+0x24>)
 801433e:	f7f5 f897 	bl	8009470 <HAL_SPI_Transmit>
}
 8014342:	bf00      	nop
 8014344:	3708      	adds	r7, #8
 8014346:	46bd      	mov	sp, r7
 8014348:	bd80      	pop	{r7, pc}
 801434a:	bf00      	nop
 801434c:	200099b0 	.word	0x200099b0

08014350 <SPI_Rx>:

/* SPI Rx Wrapper 함수 */
static uint8_t SPI_Rx(void)
{
 8014350:	b580      	push	{r7, lr}
 8014352:	b082      	sub	sp, #8
 8014354:	af00      	add	r7, sp, #0
  uint8_t retVal;
  HAL_SPI_Receive(SPI_CAN, &retVal, 1, SPI_TIMEOUT);
 8014356:	1df9      	adds	r1, r7, #7
 8014358:	230a      	movs	r3, #10
 801435a:	2201      	movs	r2, #1
 801435c:	4803      	ldr	r0, [pc, #12]	; (801436c <SPI_Rx+0x1c>)
 801435e:	f7f5 f9f5 	bl	800974c <HAL_SPI_Receive>
  return retVal;
 8014362:	79fb      	ldrb	r3, [r7, #7]
}
 8014364:	4618      	mov	r0, r3
 8014366:	3708      	adds	r7, #8
 8014368:	46bd      	mov	sp, r7
 801436a:	bd80      	pop	{r7, pc}
 801436c:	200099b0 	.word	0x200099b0

08014370 <SPI_RxBuffer>:

/* SPI Rx Wrapper 함수 */
static void SPI_RxBuffer(uint8_t *buffer, uint8_t length)
{
 8014370:	b580      	push	{r7, lr}
 8014372:	b082      	sub	sp, #8
 8014374:	af00      	add	r7, sp, #0
 8014376:	6078      	str	r0, [r7, #4]
 8014378:	460b      	mov	r3, r1
 801437a:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Receive(SPI_CAN, buffer, length, SPI_TIMEOUT);
 801437c:	78fb      	ldrb	r3, [r7, #3]
 801437e:	b29a      	uxth	r2, r3
 8014380:	230a      	movs	r3, #10
 8014382:	6879      	ldr	r1, [r7, #4]
 8014384:	4803      	ldr	r0, [pc, #12]	; (8014394 <SPI_RxBuffer+0x24>)
 8014386:	f7f5 f9e1 	bl	800974c <HAL_SPI_Receive>
}
 801438a:	bf00      	nop
 801438c:	3708      	adds	r7, #8
 801438e:	46bd      	mov	sp, r7
 8014390:	bd80      	pop	{r7, pc}
 8014392:	bf00      	nop
 8014394:	200099b0 	.word	0x200099b0

08014398 <SerialPrintln>:
	HAL_UART_Transmit(&huart2, (uint8_t*)messageBuf, len, HAL_MAX_DELAY);
	va_end(args);
//#endif
}
void SerialPrintln(const char * message, ...)
{
 8014398:	b40f      	push	{r0, r1, r2, r3}
 801439a:	b580      	push	{r7, lr}
 801439c:	b082      	sub	sp, #8
 801439e:	af00      	add	r7, sp, #0
//#ifdef VERBOSE
	va_list args;
	va_start(args, message);
 80143a0:	f107 0314 	add.w	r3, r7, #20
 80143a4:	603b      	str	r3, [r7, #0]
	uint16_t len = vsprintf(messageBuf, message, args);
 80143a6:	683a      	ldr	r2, [r7, #0]
 80143a8:	6939      	ldr	r1, [r7, #16]
 80143aa:	480f      	ldr	r0, [pc, #60]	; (80143e8 <SerialPrintln+0x50>)
 80143ac:	f006 fd5a 	bl	801ae64 <vsiprintf>
 80143b0:	4603      	mov	r3, r0
 80143b2:	80fb      	strh	r3, [r7, #6]
	messageBuf[len] = '\n';
 80143b4:	88fb      	ldrh	r3, [r7, #6]
 80143b6:	4a0c      	ldr	r2, [pc, #48]	; (80143e8 <SerialPrintln+0x50>)
 80143b8:	210a      	movs	r1, #10
 80143ba:	54d1      	strb	r1, [r2, r3]
	messageBuf[len+1] = '\r';
 80143bc:	88fb      	ldrh	r3, [r7, #6]
 80143be:	3301      	adds	r3, #1
 80143c0:	4a09      	ldr	r2, [pc, #36]	; (80143e8 <SerialPrintln+0x50>)
 80143c2:	210d      	movs	r1, #13
 80143c4:	54d1      	strb	r1, [r2, r3]
	HAL_UART_Transmit(&huart2, (uint8_t*)messageBuf, len+2, HAL_MAX_DELAY);
 80143c6:	88fb      	ldrh	r3, [r7, #6]
 80143c8:	3302      	adds	r3, #2
 80143ca:	b29a      	uxth	r2, r3
 80143cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80143d0:	4905      	ldr	r1, [pc, #20]	; (80143e8 <SerialPrintln+0x50>)
 80143d2:	4806      	ldr	r0, [pc, #24]	; (80143ec <SerialPrintln+0x54>)
 80143d4:	f7f6 fa3e 	bl	800a854 <HAL_UART_Transmit>
	va_end(args);
//#endif
}
 80143d8:	bf00      	nop
 80143da:	3708      	adds	r7, #8
 80143dc:	46bd      	mov	sp, r7
 80143de:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80143e2:	b004      	add	sp, #16
 80143e4:	4770      	bx	lr
 80143e6:	bf00      	nop
 80143e8:	2002314c 	.word	0x2002314c
 80143ec:	20009a14 	.word	0x20009a14

080143f0 <ThrottleDataCallback>:
    {EVENT_DATA_ID, 0x0400, 2, &EventDataCallback},
    {ERROR_DATA_ID, 0x0401, 2, &ErrorDataCallback},
	{VOLTAGE_DATA_ID, 0x0004, 2, &VoltageDataCallback},
};

__weak void ThrottleDataCallback(iCommsMessage_t *msg) { DebugPrint("ThrottleDataCallback not implemented! %d", msg->standardMessageID); }
 80143f0:	b580      	push	{r7, lr}
 80143f2:	b082      	sub	sp, #8
 80143f4:	af00      	add	r7, sp, #0
 80143f6:	6078      	str	r0, [r7, #4]
 80143f8:	687b      	ldr	r3, [r7, #4]
 80143fa:	881b      	ldrh	r3, [r3, #0]
 80143fc:	4619      	mov	r1, r3
 80143fe:	4803      	ldr	r0, [pc, #12]	; (801440c <ThrottleDataCallback+0x1c>)
 8014400:	f7ff ffca 	bl	8014398 <SerialPrintln>
 8014404:	bf00      	nop
 8014406:	3708      	adds	r7, #8
 8014408:	46bd      	mov	sp, r7
 801440a:	bd80      	pop	{r7, pc}
 801440c:	0801d828 	.word	0x0801d828

08014410 <SpeedDataCallback>:
__weak void ErrorDataCallback(iCommsMessage_t *msg) { DebugPrint("ErrorDataCallback not implemented! %d", msg->standardMessageID); }
__weak void SpeedDataCallback(iCommsMessage_t *msg) { DebugPrint("SpeedDataCallback not implemented! %d", msg->standardMessageID); }
 8014410:	b580      	push	{r7, lr}
 8014412:	b082      	sub	sp, #8
 8014414:	af00      	add	r7, sp, #0
 8014416:	6078      	str	r0, [r7, #4]
 8014418:	687b      	ldr	r3, [r7, #4]
 801441a:	881b      	ldrh	r3, [r3, #0]
 801441c:	4619      	mov	r1, r3
 801441e:	4803      	ldr	r0, [pc, #12]	; (801442c <SpeedDataCallback+0x1c>)
 8014420:	f7ff ffba 	bl	8014398 <SerialPrintln>
 8014424:	bf00      	nop
 8014426:	3708      	adds	r7, #8
 8014428:	46bd      	mov	sp, r7
 801442a:	bd80      	pop	{r7, pc}
 801442c:	0801d87c 	.word	0x0801d87c

08014430 <IComms_Init>:
PRIVATE void Swap(HeapNode_t *a, HeapNode_t *b);
uint8_t Heap_GetHeapSize(Heap_t *h);

Heap_t canRxHeap;

PUBLIC result_t IComms_Init() {
 8014430:	b580      	push	{r7, lr}
 8014432:	b082      	sub	sp, #8
 8014434:	af00      	add	r7, sp, #0
    result_t ret = ICOMMS_DRIVER_INITIALIZE();
 8014436:	f7ff fc15 	bl	8013c64 <CANSPI_Initialize>
 801443a:	4603      	mov	r3, r0
 801443c:	71fb      	strb	r3, [r7, #7]
    Heap_InitHeap(&canRxHeap);
 801443e:	4804      	ldr	r0, [pc, #16]	; (8014450 <IComms_Init+0x20>)
 8014440:	f000 f90c 	bl	801465c <Heap_InitHeap>
    return ret;
 8014444:	79fb      	ldrb	r3, [r7, #7]
}
 8014446:	4618      	mov	r0, r3
 8014448:	3708      	adds	r7, #8
 801444a:	46bd      	mov	sp, r7
 801444c:	bd80      	pop	{r7, pc}
 801444e:	bf00      	nop
 8014450:	200231cc 	.word	0x200231cc

08014454 <IComms_ReceiveNextMessage>:

PUBLIC result_t IComms_Transmit(iCommsMessage_t *txMsg) {
    result_t ret = ICOMMS_DRIVER_TRANSMIT_MESSAGE(txMsg);
    return ret;
}
PUBLIC result_t IComms_ReceiveNextMessage(iCommsMessage_t *rxMsg) {
 8014454:	b580      	push	{r7, lr}
 8014456:	b086      	sub	sp, #24
 8014458:	af00      	add	r7, sp, #0
 801445a:	6078      	str	r0, [r7, #4]
    // if nothing to dequeue return fail
    if (Heap_GetHeapSize(&canRxHeap) == 0)
 801445c:	480d      	ldr	r0, [pc, #52]	; (8014494 <IComms_ReceiveNextMessage+0x40>)
 801445e:	f000 fa3e 	bl	80148de <Heap_GetHeapSize>
 8014462:	4603      	mov	r3, r0
 8014464:	2b00      	cmp	r3, #0
 8014466:	d101      	bne.n	801446c <IComms_ReceiveNextMessage+0x18>
        return RESULT_FAIL;
 8014468:	2300      	movs	r3, #0
 801446a:	e00e      	b.n	801448a <IComms_ReceiveNextMessage+0x36>
    // dequeue return ok
    HeapNode_t n = Heap_RemoveMin(&canRxHeap);
 801446c:	f107 0308 	add.w	r3, r7, #8
 8014470:	4908      	ldr	r1, [pc, #32]	; (8014494 <IComms_ReceiveNextMessage+0x40>)
 8014472:	4618      	mov	r0, r3
 8014474:	f000 f9da 	bl	801482c <Heap_RemoveMin>
    memcpy(rxMsg, &n.value, sizeof(iCommsMessage_t));
 8014478:	f107 0308 	add.w	r3, r7, #8
 801447c:	3302      	adds	r3, #2
 801447e:	220c      	movs	r2, #12
 8014480:	4619      	mov	r1, r3
 8014482:	6878      	ldr	r0, [r7, #4]
 8014484:	f006 f88c 	bl	801a5a0 <memcpy>
    return RESULT_OK;
 8014488:	2301      	movs	r3, #1
}
 801448a:	4618      	mov	r0, r3
 801448c:	3718      	adds	r7, #24
 801448e:	46bd      	mov	sp, r7
 8014490:	bd80      	pop	{r7, pc}
 8014492:	bf00      	nop
 8014494:	200231cc 	.word	0x200231cc

08014498 <IComms_HasRxMessage>:

PUBLIC uint8_t IComms_HasRxMessage() {
 8014498:	b580      	push	{r7, lr}
 801449a:	af00      	add	r7, sp, #0
    if (Heap_GetHeapSize(&canRxHeap) != 0)
 801449c:	4806      	ldr	r0, [pc, #24]	; (80144b8 <IComms_HasRxMessage+0x20>)
 801449e:	f000 fa1e 	bl	80148de <Heap_GetHeapSize>
 80144a2:	4603      	mov	r3, r0
 80144a4:	2b00      	cmp	r3, #0
 80144a6:	d001      	beq.n	80144ac <IComms_HasRxMessage+0x14>
        return 1;
 80144a8:	2301      	movs	r3, #1
 80144aa:	e003      	b.n	80144b4 <IComms_HasRxMessage+0x1c>

    DebugPrint("No Messages...");
 80144ac:	4803      	ldr	r0, [pc, #12]	; (80144bc <IComms_HasRxMessage+0x24>)
 80144ae:	f7ff ff73 	bl	8014398 <SerialPrintln>
    return 0;
 80144b2:	2300      	movs	r3, #0
}
 80144b4:	4618      	mov	r0, r3
 80144b6:	bd80      	pop	{r7, pc}
 80144b8:	200231cc 	.word	0x200231cc
 80144bc:	0801d928 	.word	0x0801d928

080144c0 <IComms_Update>:

// Since we are currently polling, the update function needs to be called.
// Alternatively this can be put into an interrupt
PUBLIC void IComms_Update() {
 80144c0:	b590      	push	{r4, r7, lr}
 80144c2:	b08f      	sub	sp, #60	; 0x3c
 80144c4:	af02      	add	r7, sp, #8
    while (ICOMMS_DRIVER_MESSAGE_AVAILABLE() != 0) {
 80144c6:	e04b      	b.n	8014560 <IComms_Update+0xa0>
        iCommsMessage_t rxMsg;
        result_t ret = ICOMMS_DRIVER_RECEIVE_MESSAGE(&rxMsg);
 80144c8:	f107 0320 	add.w	r3, r7, #32
 80144cc:	4618      	mov	r0, r3
 80144ce:	f7ff fc7f 	bl	8013dd0 <CANSPI_Receive>
 80144d2:	4603      	mov	r3, r0
 80144d4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        if (ret == RESULT_FAIL) {
 80144d8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80144dc:	2b00      	cmp	r3, #0
 80144de:	d103      	bne.n	80144e8 <IComms_Update+0x28>
            DebugPrint("#ICM: FAILED TO RETRIEVE ICOMMS MESSAGE FROM DRIVER");
 80144e0:	4824      	ldr	r0, [pc, #144]	; (8014574 <IComms_Update+0xb4>)
 80144e2:	f7ff ff59 	bl	8014398 <SerialPrintln>
 80144e6:	e03b      	b.n	8014560 <IComms_Update+0xa0>
        } else {
            DebugPrint("#ICM: MESSAGE RECIEVED, ADDING TO QUEUE");
 80144e8:	4823      	ldr	r0, [pc, #140]	; (8014578 <IComms_Update+0xb8>)
 80144ea:	f7ff ff55 	bl	8014398 <SerialPrintln>
            // enqueue
            HeapNode_t n = (HeapNode_t){rxMsg.standardMessageID, rxMsg};
 80144ee:	8c3b      	ldrh	r3, [r7, #32]
 80144f0:	823b      	strh	r3, [r7, #16]
 80144f2:	f107 0412 	add.w	r4, r7, #18
 80144f6:	f107 0320 	add.w	r3, r7, #32
 80144fa:	cb07      	ldmia	r3!, {r0, r1, r2}
 80144fc:	6020      	str	r0, [r4, #0]
 80144fe:	6061      	str	r1, [r4, #4]
 8014500:	60a2      	str	r2, [r4, #8]
            Heap_Add(&canRxHeap, n);
 8014502:	8bbb      	ldrh	r3, [r7, #28]
 8014504:	f8ad 3000 	strh.w	r3, [sp]
 8014508:	f107 0310 	add.w	r3, r7, #16
 801450c:	cb0e      	ldmia	r3, {r1, r2, r3}
 801450e:	481b      	ldr	r0, [pc, #108]	; (801457c <IComms_Update+0xbc>)
 8014510:	f000 f93b 	bl	801478a <Heap_Add>
            DebugPrint("#ICM: Standard ID: %d", rxMsg.standardMessageID);
 8014514:	8c3b      	ldrh	r3, [r7, #32]
 8014516:	4619      	mov	r1, r3
 8014518:	4819      	ldr	r0, [pc, #100]	; (8014580 <IComms_Update+0xc0>)
 801451a:	f7ff ff3d 	bl	8014398 <SerialPrintln>
            DebugPrint("#ICM: DLC: %d", rxMsg.dataLength);
 801451e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8014522:	4619      	mov	r1, r3
 8014524:	4817      	ldr	r0, [pc, #92]	; (8014584 <IComms_Update+0xc4>)
 8014526:	f7ff ff37 	bl	8014398 <SerialPrintln>
            for (uint8_t i = 0; i < rxMsg.dataLength; i++)
 801452a:	2300      	movs	r3, #0
 801452c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8014530:	e010      	b.n	8014554 <IComms_Update+0x94>
                DebugPrint("#ICM: Data[%d]: %d", i, rxMsg.data[i]);
 8014532:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8014536:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801453a:	3330      	adds	r3, #48	; 0x30
 801453c:	443b      	add	r3, r7
 801453e:	f813 3c0d 	ldrb.w	r3, [r3, #-13]
 8014542:	461a      	mov	r2, r3
 8014544:	4810      	ldr	r0, [pc, #64]	; (8014588 <IComms_Update+0xc8>)
 8014546:	f7ff ff27 	bl	8014398 <SerialPrintln>
            for (uint8_t i = 0; i < rxMsg.dataLength; i++)
 801454a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801454e:	3301      	adds	r3, #1
 8014550:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8014554:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8014558:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 801455c:	429a      	cmp	r2, r3
 801455e:	d3e8      	bcc.n	8014532 <IComms_Update+0x72>
    while (ICOMMS_DRIVER_MESSAGE_AVAILABLE() != 0) {
 8014560:	f7ff fce2 	bl	8013f28 <CANSPI_messagesInBuffer>
 8014564:	4603      	mov	r3, r0
 8014566:	2b00      	cmp	r3, #0
 8014568:	d1ae      	bne.n	80144c8 <IComms_Update+0x8>
        }
    }
}
 801456a:	bf00      	nop
 801456c:	bf00      	nop
 801456e:	3734      	adds	r7, #52	; 0x34
 8014570:	46bd      	mov	sp, r7
 8014572:	bd90      	pop	{r4, r7, pc}
 8014574:	0801d938 	.word	0x0801d938
 8014578:	0801d96c 	.word	0x0801d96c
 801457c:	200231cc 	.word	0x200231cc
 8014580:	0801d994 	.word	0x0801d994
 8014584:	0801d9ac 	.word	0x0801d9ac
 8014588:	0801d9bc 	.word	0x0801d9bc

0801458c <IComms_PeriodicReceive>:
    data[1] = code;

    return IComms_CreateMessage(standardMessageID, 2, data);
}

PUBLIC void IComms_PeriodicReceive() {
 801458c:	b580      	push	{r7, lr}
 801458e:	b084      	sub	sp, #16
 8014590:	af00      	add	r7, sp, #0
    IComms_Update();
 8014592:	f7ff ff95 	bl	80144c0 <IComms_Update>
    while (IComms_HasRxMessage()) {
 8014596:	e04a      	b.n	801462e <IComms_PeriodicReceive+0xa2>
        iCommsMessage_t rxMsg;
        result_t ret = IComms_ReceiveNextMessage(&rxMsg);
 8014598:	463b      	mov	r3, r7
 801459a:	4618      	mov	r0, r3
 801459c:	f7ff ff5a 	bl	8014454 <IComms_ReceiveNextMessage>
 80145a0:	4603      	mov	r3, r0
 80145a2:	737b      	strb	r3, [r7, #13]
        if (ret == RESULT_FAIL) {
 80145a4:	7b7b      	ldrb	r3, [r7, #13]
 80145a6:	2b00      	cmp	r3, #0
 80145a8:	d106      	bne.n	80145b8 <IComms_PeriodicReceive+0x2c>
            DebugPrint("%s Error Retrieving next message", ICM_TAG);
 80145aa:	4b26      	ldr	r3, [pc, #152]	; (8014644 <IComms_PeriodicReceive+0xb8>)
 80145ac:	681b      	ldr	r3, [r3, #0]
 80145ae:	4619      	mov	r1, r3
 80145b0:	4825      	ldr	r0, [pc, #148]	; (8014648 <IComms_PeriodicReceive+0xbc>)
 80145b2:	f7ff fef1 	bl	8014398 <SerialPrintln>
 80145b6:	e03a      	b.n	801462e <IComms_PeriodicReceive+0xa2>
        } else {
            DebugPrint("%s Standard ID: %d", ICM_TAG, rxMsg.standardMessageID);
 80145b8:	4b22      	ldr	r3, [pc, #136]	; (8014644 <IComms_PeriodicReceive+0xb8>)
 80145ba:	681b      	ldr	r3, [r3, #0]
 80145bc:	883a      	ldrh	r2, [r7, #0]
 80145be:	4619      	mov	r1, r3
 80145c0:	4822      	ldr	r0, [pc, #136]	; (801464c <IComms_PeriodicReceive+0xc0>)
 80145c2:	f7ff fee9 	bl	8014398 <SerialPrintln>
            DebugPrint("%s DLC: %d", ICM_TAG, rxMsg.dataLength);
 80145c6:	4b1f      	ldr	r3, [pc, #124]	; (8014644 <IComms_PeriodicReceive+0xb8>)
 80145c8:	681b      	ldr	r3, [r3, #0]
 80145ca:	78ba      	ldrb	r2, [r7, #2]
 80145cc:	4619      	mov	r1, r3
 80145ce:	4820      	ldr	r0, [pc, #128]	; (8014650 <IComms_PeriodicReceive+0xc4>)
 80145d0:	f7ff fee2 	bl	8014398 <SerialPrintln>

            // for(uint8_t i=0; i<rxMsg.dataLength; i++) DebugPrint("%s Data[%d]: %d", ICM_TAG, i, rxMsg.data[i]);

            uint16_t lookupTableIndex = 0;
 80145d4:	2300      	movs	r3, #0
 80145d6:	81fb      	strh	r3, [r7, #14]

            // NOTE: with the current polling, new messages incoming while processing this batch of messages will not be processed until the next cycle.
            // lookup can message in table
            // Exit if message found or if end of table reached
            while (rxMsg.standardMessageID != CANMessageLookUpTable[lookupTableIndex].messageID && lookupTableIndex < NUMBER_CAN_MESSAGE_IDS) {
 80145d8:	e002      	b.n	80145e0 <IComms_PeriodicReceive+0x54>
                // DebugPrint("%s msgId[%x] != [%x]", ICM_TAG, rxMsg.standardMessageID, CANMessageLookUpTable[lookupTableIndex].messageID);
                lookupTableIndex++;
 80145da:	89fb      	ldrh	r3, [r7, #14]
 80145dc:	3301      	adds	r3, #1
 80145de:	81fb      	strh	r3, [r7, #14]
            while (rxMsg.standardMessageID != CANMessageLookUpTable[lookupTableIndex].messageID && lookupTableIndex < NUMBER_CAN_MESSAGE_IDS) {
 80145e0:	8839      	ldrh	r1, [r7, #0]
 80145e2:	89fa      	ldrh	r2, [r7, #14]
 80145e4:	481b      	ldr	r0, [pc, #108]	; (8014654 <IComms_PeriodicReceive+0xc8>)
 80145e6:	4613      	mov	r3, r2
 80145e8:	005b      	lsls	r3, r3, #1
 80145ea:	4413      	add	r3, r2
 80145ec:	009b      	lsls	r3, r3, #2
 80145ee:	4403      	add	r3, r0
 80145f0:	3302      	adds	r3, #2
 80145f2:	881b      	ldrh	r3, [r3, #0]
 80145f4:	4299      	cmp	r1, r3
 80145f6:	d002      	beq.n	80145fe <IComms_PeriodicReceive+0x72>
 80145f8:	89fb      	ldrh	r3, [r7, #14]
 80145fa:	2b05      	cmp	r3, #5
 80145fc:	d9ed      	bls.n	80145da <IComms_PeriodicReceive+0x4e>
            }

            // handle the case where the message is no recognized by the look up table
            if (lookupTableIndex < NUMBER_CAN_MESSAGE_IDS) {
 80145fe:	89fb      	ldrh	r3, [r7, #14]
 8014600:	2b05      	cmp	r3, #5
 8014602:	d80c      	bhi.n	801461e <IComms_PeriodicReceive+0x92>
                // DebugPrint("%s Executing callback", ICM_TAG);
                CANMessageLookUpTable[lookupTableIndex].canMessageCallback(&rxMsg);
 8014604:	89fa      	ldrh	r2, [r7, #14]
 8014606:	4913      	ldr	r1, [pc, #76]	; (8014654 <IComms_PeriodicReceive+0xc8>)
 8014608:	4613      	mov	r3, r2
 801460a:	005b      	lsls	r3, r3, #1
 801460c:	4413      	add	r3, r2
 801460e:	009b      	lsls	r3, r3, #2
 8014610:	440b      	add	r3, r1
 8014612:	3308      	adds	r3, #8
 8014614:	681b      	ldr	r3, [r3, #0]
 8014616:	463a      	mov	r2, r7
 8014618:	4610      	mov	r0, r2
 801461a:	4798      	blx	r3
 801461c:	e007      	b.n	801462e <IComms_PeriodicReceive+0xa2>
            } else {
                DebugPrint("%s Unknown message id [%x], index [%d]", ICM_TAG, rxMsg.standardMessageID, lookupTableIndex);
 801461e:	4b09      	ldr	r3, [pc, #36]	; (8014644 <IComms_PeriodicReceive+0xb8>)
 8014620:	6819      	ldr	r1, [r3, #0]
 8014622:	883b      	ldrh	r3, [r7, #0]
 8014624:	461a      	mov	r2, r3
 8014626:	89fb      	ldrh	r3, [r7, #14]
 8014628:	480b      	ldr	r0, [pc, #44]	; (8014658 <IComms_PeriodicReceive+0xcc>)
 801462a:	f7ff feb5 	bl	8014398 <SerialPrintln>
    while (IComms_HasRxMessage()) {
 801462e:	f7ff ff33 	bl	8014498 <IComms_HasRxMessage>
 8014632:	4603      	mov	r3, r0
 8014634:	2b00      	cmp	r3, #0
 8014636:	d1af      	bne.n	8014598 <IComms_PeriodicReceive+0xc>
            }
        }
    }
}
 8014638:	bf00      	nop
 801463a:	bf00      	nop
 801463c:	3710      	adds	r7, #16
 801463e:	46bd      	mov	sp, r7
 8014640:	bd80      	pop	{r7, pc}
 8014642:	bf00      	nop
 8014644:	2000002c 	.word	0x2000002c
 8014648:	0801d9d0 	.word	0x0801d9d0
 801464c:	0801d9f4 	.word	0x0801d9f4
 8014650:	0801da08 	.word	0x0801da08
 8014654:	0801e650 	.word	0x0801e650
 8014658:	0801da14 	.word	0x0801da14

0801465c <Heap_InitHeap>:
/*********************************************************************************
 *
 * 		Heap for Priority Queue
 *
 **********************************************************************************/
void Heap_InitHeap(Heap_t *h) { h->heapsize = 0; }
 801465c:	b480      	push	{r7}
 801465e:	b083      	sub	sp, #12
 8014660:	af00      	add	r7, sp, #0
 8014662:	6078      	str	r0, [r7, #4]
 8014664:	687b      	ldr	r3, [r7, #4]
 8014666:	2200      	movs	r2, #0
 8014668:	701a      	strb	r2, [r3, #0]
 801466a:	bf00      	nop
 801466c:	370c      	adds	r7, #12
 801466e:	46bd      	mov	sp, r7
 8014670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014674:	4770      	bx	lr

08014676 <Swap>:

void Swap(HeapNode_t *a, HeapNode_t *b) {
 8014676:	b580      	push	{r7, lr}
 8014678:	b086      	sub	sp, #24
 801467a:	af00      	add	r7, sp, #0
 801467c:	6078      	str	r0, [r7, #4]
 801467e:	6039      	str	r1, [r7, #0]
    HeapNode_t temp;
    memcpy(&temp, b, sizeof(HeapNode_t));
 8014680:	f107 0308 	add.w	r3, r7, #8
 8014684:	220e      	movs	r2, #14
 8014686:	6839      	ldr	r1, [r7, #0]
 8014688:	4618      	mov	r0, r3
 801468a:	f005 ff89 	bl	801a5a0 <memcpy>
    memcpy(b, a, sizeof(HeapNode_t));
 801468e:	220e      	movs	r2, #14
 8014690:	6879      	ldr	r1, [r7, #4]
 8014692:	6838      	ldr	r0, [r7, #0]
 8014694:	f005 ff84 	bl	801a5a0 <memcpy>
    memcpy(a, &temp, sizeof(HeapNode_t));
 8014698:	f107 0308 	add.w	r3, r7, #8
 801469c:	220e      	movs	r2, #14
 801469e:	4619      	mov	r1, r3
 80146a0:	6878      	ldr	r0, [r7, #4]
 80146a2:	f005 ff7d 	bl	801a5a0 <memcpy>
}
 80146a6:	bf00      	nop
 80146a8:	3718      	adds	r7, #24
 80146aa:	46bd      	mov	sp, r7
 80146ac:	bd80      	pop	{r7, pc}

080146ae <HeapifyMin>:

void HeapifyMin(Heap_t *h, uint8_t parent) {
 80146ae:	b580      	push	{r7, lr}
 80146b0:	b086      	sub	sp, #24
 80146b2:	af00      	add	r7, sp, #0
 80146b4:	6078      	str	r0, [r7, #4]
 80146b6:	460b      	mov	r3, r1
 80146b8:	70fb      	strb	r3, [r7, #3]
    if (h->heapsize == 1)
 80146ba:	687b      	ldr	r3, [r7, #4]
 80146bc:	781b      	ldrb	r3, [r3, #0]
 80146be:	2b01      	cmp	r3, #1
 80146c0:	d05f      	beq.n	8014782 <HeapifyMin+0xd4>
        return;
    else {
        int smallest = parent;
 80146c2:	78fb      	ldrb	r3, [r7, #3]
 80146c4:	617b      	str	r3, [r7, #20]
        int l = 2 * parent + 1;
 80146c6:	78fb      	ldrb	r3, [r7, #3]
 80146c8:	005b      	lsls	r3, r3, #1
 80146ca:	3301      	adds	r3, #1
 80146cc:	613b      	str	r3, [r7, #16]
        int r = 2 * parent + 2;
 80146ce:	78fb      	ldrb	r3, [r7, #3]
 80146d0:	3301      	adds	r3, #1
 80146d2:	005b      	lsls	r3, r3, #1
 80146d4:	60fb      	str	r3, [r7, #12]
        if (l < h->heapsize && h->heapArray[l].key < h->heapArray[smallest].key)
 80146d6:	687b      	ldr	r3, [r7, #4]
 80146d8:	781b      	ldrb	r3, [r3, #0]
 80146da:	461a      	mov	r2, r3
 80146dc:	693b      	ldr	r3, [r7, #16]
 80146de:	4293      	cmp	r3, r2
 80146e0:	da15      	bge.n	801470e <HeapifyMin+0x60>
 80146e2:	6879      	ldr	r1, [r7, #4]
 80146e4:	693a      	ldr	r2, [r7, #16]
 80146e6:	4613      	mov	r3, r2
 80146e8:	00db      	lsls	r3, r3, #3
 80146ea:	1a9b      	subs	r3, r3, r2
 80146ec:	005b      	lsls	r3, r3, #1
 80146ee:	440b      	add	r3, r1
 80146f0:	3302      	adds	r3, #2
 80146f2:	8819      	ldrh	r1, [r3, #0]
 80146f4:	6878      	ldr	r0, [r7, #4]
 80146f6:	697a      	ldr	r2, [r7, #20]
 80146f8:	4613      	mov	r3, r2
 80146fa:	00db      	lsls	r3, r3, #3
 80146fc:	1a9b      	subs	r3, r3, r2
 80146fe:	005b      	lsls	r3, r3, #1
 8014700:	4403      	add	r3, r0
 8014702:	3302      	adds	r3, #2
 8014704:	881b      	ldrh	r3, [r3, #0]
 8014706:	4299      	cmp	r1, r3
 8014708:	d201      	bcs.n	801470e <HeapifyMin+0x60>
            smallest = l;
 801470a:	693b      	ldr	r3, [r7, #16]
 801470c:	617b      	str	r3, [r7, #20]
        if (r < h->heapsize && h->heapArray[r].key < h->heapArray[smallest].key)
 801470e:	687b      	ldr	r3, [r7, #4]
 8014710:	781b      	ldrb	r3, [r3, #0]
 8014712:	461a      	mov	r2, r3
 8014714:	68fb      	ldr	r3, [r7, #12]
 8014716:	4293      	cmp	r3, r2
 8014718:	da15      	bge.n	8014746 <HeapifyMin+0x98>
 801471a:	6879      	ldr	r1, [r7, #4]
 801471c:	68fa      	ldr	r2, [r7, #12]
 801471e:	4613      	mov	r3, r2
 8014720:	00db      	lsls	r3, r3, #3
 8014722:	1a9b      	subs	r3, r3, r2
 8014724:	005b      	lsls	r3, r3, #1
 8014726:	440b      	add	r3, r1
 8014728:	3302      	adds	r3, #2
 801472a:	8819      	ldrh	r1, [r3, #0]
 801472c:	6878      	ldr	r0, [r7, #4]
 801472e:	697a      	ldr	r2, [r7, #20]
 8014730:	4613      	mov	r3, r2
 8014732:	00db      	lsls	r3, r3, #3
 8014734:	1a9b      	subs	r3, r3, r2
 8014736:	005b      	lsls	r3, r3, #1
 8014738:	4403      	add	r3, r0
 801473a:	3302      	adds	r3, #2
 801473c:	881b      	ldrh	r3, [r3, #0]
 801473e:	4299      	cmp	r1, r3
 8014740:	d201      	bcs.n	8014746 <HeapifyMin+0x98>
            smallest = r;
 8014742:	68fb      	ldr	r3, [r7, #12]
 8014744:	617b      	str	r3, [r7, #20]
        if (smallest != parent) {
 8014746:	78fb      	ldrb	r3, [r7, #3]
 8014748:	697a      	ldr	r2, [r7, #20]
 801474a:	429a      	cmp	r2, r3
 801474c:	d01a      	beq.n	8014784 <HeapifyMin+0xd6>
            Swap(&(h->heapArray[parent]), &(h->heapArray[smallest]));
 801474e:	78fa      	ldrb	r2, [r7, #3]
 8014750:	4613      	mov	r3, r2
 8014752:	00db      	lsls	r3, r3, #3
 8014754:	1a9b      	subs	r3, r3, r2
 8014756:	005b      	lsls	r3, r3, #1
 8014758:	687a      	ldr	r2, [r7, #4]
 801475a:	4413      	add	r3, r2
 801475c:	1c98      	adds	r0, r3, #2
 801475e:	697a      	ldr	r2, [r7, #20]
 8014760:	4613      	mov	r3, r2
 8014762:	00db      	lsls	r3, r3, #3
 8014764:	1a9b      	subs	r3, r3, r2
 8014766:	005b      	lsls	r3, r3, #1
 8014768:	687a      	ldr	r2, [r7, #4]
 801476a:	4413      	add	r3, r2
 801476c:	3302      	adds	r3, #2
 801476e:	4619      	mov	r1, r3
 8014770:	f7ff ff81 	bl	8014676 <Swap>
            HeapifyMin(h, smallest);
 8014774:	697b      	ldr	r3, [r7, #20]
 8014776:	b2db      	uxtb	r3, r3
 8014778:	4619      	mov	r1, r3
 801477a:	6878      	ldr	r0, [r7, #4]
 801477c:	f7ff ff97 	bl	80146ae <HeapifyMin>
 8014780:	e000      	b.n	8014784 <HeapifyMin+0xd6>
        return;
 8014782:	bf00      	nop
        }
    }
}
 8014784:	3718      	adds	r7, #24
 8014786:	46bd      	mov	sp, r7
 8014788:	bd80      	pop	{r7, pc}

0801478a <Heap_Add>:
void Heap_Add(Heap_t *h, HeapNode_t n) {
 801478a:	b084      	sub	sp, #16
 801478c:	b580      	push	{r7, lr}
 801478e:	b084      	sub	sp, #16
 8014790:	af00      	add	r7, sp, #0
 8014792:	6078      	str	r0, [r7, #4]
 8014794:	f107 001c 	add.w	r0, r7, #28
 8014798:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    if (h->heapsize == MAX_HEAP_SIZE)
 801479c:	687b      	ldr	r3, [r7, #4]
 801479e:	781b      	ldrb	r3, [r3, #0]
 80147a0:	2b20      	cmp	r3, #32
 80147a2:	d03c      	beq.n	801481e <Heap_Add+0x94>
        return;
    if (h->heapsize == 0) {
 80147a4:	687b      	ldr	r3, [r7, #4]
 80147a6:	781b      	ldrb	r3, [r3, #0]
 80147a8:	2b00      	cmp	r3, #0
 80147aa:	d10e      	bne.n	80147ca <Heap_Add+0x40>
        memcpy(&(h->heapArray[0]), &n, sizeof(HeapNode_t));
 80147ac:	687b      	ldr	r3, [r7, #4]
 80147ae:	3302      	adds	r3, #2
 80147b0:	f107 011c 	add.w	r1, r7, #28
 80147b4:	220e      	movs	r2, #14
 80147b6:	4618      	mov	r0, r3
 80147b8:	f005 fef2 	bl	801a5a0 <memcpy>
        h->heapsize += 1;
 80147bc:	687b      	ldr	r3, [r7, #4]
 80147be:	781b      	ldrb	r3, [r3, #0]
 80147c0:	3301      	adds	r3, #1
 80147c2:	b2da      	uxtb	r2, r3
 80147c4:	687b      	ldr	r3, [r7, #4]
 80147c6:	701a      	strb	r2, [r3, #0]
 80147c8:	e02a      	b.n	8014820 <Heap_Add+0x96>
    } else {
        memcpy(&(h->heapArray[h->heapsize]), &n, sizeof(HeapNode_t));
 80147ca:	687b      	ldr	r3, [r7, #4]
 80147cc:	781b      	ldrb	r3, [r3, #0]
 80147ce:	461a      	mov	r2, r3
 80147d0:	4613      	mov	r3, r2
 80147d2:	00db      	lsls	r3, r3, #3
 80147d4:	1a9b      	subs	r3, r3, r2
 80147d6:	005b      	lsls	r3, r3, #1
 80147d8:	687a      	ldr	r2, [r7, #4]
 80147da:	4413      	add	r3, r2
 80147dc:	3302      	adds	r3, #2
 80147de:	f107 011c 	add.w	r1, r7, #28
 80147e2:	220e      	movs	r2, #14
 80147e4:	4618      	mov	r0, r3
 80147e6:	f005 fedb 	bl	801a5a0 <memcpy>
        h->heapsize += 1;
 80147ea:	687b      	ldr	r3, [r7, #4]
 80147ec:	781b      	ldrb	r3, [r3, #0]
 80147ee:	3301      	adds	r3, #1
 80147f0:	b2da      	uxtb	r2, r3
 80147f2:	687b      	ldr	r3, [r7, #4]
 80147f4:	701a      	strb	r2, [r3, #0]
        for (int i = h->heapsize / 2 - 1; i >= 0; i--) {
 80147f6:	687b      	ldr	r3, [r7, #4]
 80147f8:	781b      	ldrb	r3, [r3, #0]
 80147fa:	085b      	lsrs	r3, r3, #1
 80147fc:	b2db      	uxtb	r3, r3
 80147fe:	3b01      	subs	r3, #1
 8014800:	60fb      	str	r3, [r7, #12]
 8014802:	e008      	b.n	8014816 <Heap_Add+0x8c>
            HeapifyMin(h, i);
 8014804:	68fb      	ldr	r3, [r7, #12]
 8014806:	b2db      	uxtb	r3, r3
 8014808:	4619      	mov	r1, r3
 801480a:	6878      	ldr	r0, [r7, #4]
 801480c:	f7ff ff4f 	bl	80146ae <HeapifyMin>
        for (int i = h->heapsize / 2 - 1; i >= 0; i--) {
 8014810:	68fb      	ldr	r3, [r7, #12]
 8014812:	3b01      	subs	r3, #1
 8014814:	60fb      	str	r3, [r7, #12]
 8014816:	68fb      	ldr	r3, [r7, #12]
 8014818:	2b00      	cmp	r3, #0
 801481a:	daf3      	bge.n	8014804 <Heap_Add+0x7a>
 801481c:	e000      	b.n	8014820 <Heap_Add+0x96>
        return;
 801481e:	bf00      	nop
        }
    }
}
 8014820:	3710      	adds	r7, #16
 8014822:	46bd      	mov	sp, r7
 8014824:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8014828:	b004      	add	sp, #16
 801482a:	4770      	bx	lr

0801482c <Heap_RemoveMin>:
HeapNode_t Heap_RemoveMin(Heap_t *h) {
 801482c:	b590      	push	{r4, r7, lr}
 801482e:	b08f      	sub	sp, #60	; 0x3c
 8014830:	af00      	add	r7, sp, #0
 8014832:	6078      	str	r0, [r7, #4]
 8014834:	6039      	str	r1, [r7, #0]
    if (h->heapsize == 0)
 8014836:	683b      	ldr	r3, [r7, #0]
 8014838:	781b      	ldrb	r3, [r3, #0]
 801483a:	2b00      	cmp	r3, #0
 801483c:	d111      	bne.n	8014862 <Heap_RemoveMin+0x36>
        return (HeapNode_t){0xFFFF, (iCommsMessage_t){0xFFFF, 0xFF, NULL}};
 801483e:	687b      	ldr	r3, [r7, #4]
 8014840:	2200      	movs	r2, #0
 8014842:	601a      	str	r2, [r3, #0]
 8014844:	605a      	str	r2, [r3, #4]
 8014846:	609a      	str	r2, [r3, #8]
 8014848:	819a      	strh	r2, [r3, #12]
 801484a:	687b      	ldr	r3, [r7, #4]
 801484c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014850:	801a      	strh	r2, [r3, #0]
 8014852:	687b      	ldr	r3, [r7, #4]
 8014854:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014858:	805a      	strh	r2, [r3, #2]
 801485a:	687b      	ldr	r3, [r7, #4]
 801485c:	22ff      	movs	r2, #255	; 0xff
 801485e:	711a      	strb	r2, [r3, #4]
    h->heapsize -= 1;
    for (int i = h->heapsize / 2 - 1; i >= 0; i--) {
        HeapifyMin(h, i);
    }
    return min;
}
 8014860:	e039      	b.n	80148d6 <Heap_RemoveMin+0xaa>
    memcpy(&min, &(h->heapArray[0]), sizeof(HeapNode_t));
 8014862:	683b      	ldr	r3, [r7, #0]
 8014864:	1c99      	adds	r1, r3, #2
 8014866:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801486a:	220e      	movs	r2, #14
 801486c:	4618      	mov	r0, r3
 801486e:	f005 fe97 	bl	801a5a0 <memcpy>
    Swap(&(h->heapArray[0]), &(h->heapArray[h->heapsize - 1]));
 8014872:	683b      	ldr	r3, [r7, #0]
 8014874:	1c98      	adds	r0, r3, #2
 8014876:	683b      	ldr	r3, [r7, #0]
 8014878:	781b      	ldrb	r3, [r3, #0]
 801487a:	1e5a      	subs	r2, r3, #1
 801487c:	4613      	mov	r3, r2
 801487e:	00db      	lsls	r3, r3, #3
 8014880:	1a9b      	subs	r3, r3, r2
 8014882:	005b      	lsls	r3, r3, #1
 8014884:	683a      	ldr	r2, [r7, #0]
 8014886:	4413      	add	r3, r2
 8014888:	3302      	adds	r3, #2
 801488a:	4619      	mov	r1, r3
 801488c:	f7ff fef3 	bl	8014676 <Swap>
    h->heapsize -= 1;
 8014890:	683b      	ldr	r3, [r7, #0]
 8014892:	781b      	ldrb	r3, [r3, #0]
 8014894:	3b01      	subs	r3, #1
 8014896:	b2da      	uxtb	r2, r3
 8014898:	683b      	ldr	r3, [r7, #0]
 801489a:	701a      	strb	r2, [r3, #0]
    for (int i = h->heapsize / 2 - 1; i >= 0; i--) {
 801489c:	683b      	ldr	r3, [r7, #0]
 801489e:	781b      	ldrb	r3, [r3, #0]
 80148a0:	085b      	lsrs	r3, r3, #1
 80148a2:	b2db      	uxtb	r3, r3
 80148a4:	3b01      	subs	r3, #1
 80148a6:	637b      	str	r3, [r7, #52]	; 0x34
 80148a8:	e008      	b.n	80148bc <Heap_RemoveMin+0x90>
        HeapifyMin(h, i);
 80148aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80148ac:	b2db      	uxtb	r3, r3
 80148ae:	4619      	mov	r1, r3
 80148b0:	6838      	ldr	r0, [r7, #0]
 80148b2:	f7ff fefc 	bl	80146ae <HeapifyMin>
    for (int i = h->heapsize / 2 - 1; i >= 0; i--) {
 80148b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80148b8:	3b01      	subs	r3, #1
 80148ba:	637b      	str	r3, [r7, #52]	; 0x34
 80148bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80148be:	2b00      	cmp	r3, #0
 80148c0:	daf3      	bge.n	80148aa <Heap_RemoveMin+0x7e>
    return min;
 80148c2:	687b      	ldr	r3, [r7, #4]
 80148c4:	461c      	mov	r4, r3
 80148c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80148ca:	cb07      	ldmia	r3!, {r0, r1, r2}
 80148cc:	6020      	str	r0, [r4, #0]
 80148ce:	6061      	str	r1, [r4, #4]
 80148d0:	60a2      	str	r2, [r4, #8]
 80148d2:	881b      	ldrh	r3, [r3, #0]
 80148d4:	81a3      	strh	r3, [r4, #12]
}
 80148d6:	6878      	ldr	r0, [r7, #4]
 80148d8:	373c      	adds	r7, #60	; 0x3c
 80148da:	46bd      	mov	sp, r7
 80148dc:	bd90      	pop	{r4, r7, pc}

080148de <Heap_GetHeapSize>:

uint8_t Heap_GetHeapSize(Heap_t *h) { return h->heapsize; }
 80148de:	b480      	push	{r7}
 80148e0:	b083      	sub	sp, #12
 80148e2:	af00      	add	r7, sp, #0
 80148e4:	6078      	str	r0, [r7, #4]
 80148e6:	687b      	ldr	r3, [r7, #4]
 80148e8:	781b      	ldrb	r3, [r3, #0]
 80148ea:	4618      	mov	r0, r3
 80148ec:	370c      	adds	r7, #12
 80148ee:	46bd      	mov	sp, r7
 80148f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148f4:	4770      	bx	lr
	...

080148f8 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr420_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer, 
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
 80148f8:	b480      	push	{r7}
 80148fa:	b097      	sub	sp, #92	; 0x5c
 80148fc:	af00      	add	r7, sp, #0
 80148fe:	60f8      	str	r0, [r7, #12]
 8014900:	60b9      	str	r1, [r7, #8]
 8014902:	607a      	str	r2, [r7, #4]
 8014904:	603b      	str	r3, [r7, #0]
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr, *pOutAddr2;
  uint8_t *pChrom, *pLum;
  
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
 8014906:	683b      	ldr	r3, [r7, #0]
 8014908:	4a24      	ldr	r2, [pc, #144]	; (801499c <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xa4>)
 801490a:	fba2 2303 	umull	r2, r3, r2, r3
 801490e:	0a1b      	lsrs	r3, r3, #8
 8014910:	633b      	str	r3, [r7, #48]	; 0x30
  currentMCU = BlockIndex;
 8014912:	687b      	ldr	r3, [r7, #4]
 8014914:	64bb      	str	r3, [r7, #72]	; 0x48
  

  while(currentMCU < (numberMCU + BlockIndex))
 8014916:	e148      	b.n	8014baa <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2b2>
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
 8014918:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801491a:	011a      	lsls	r2, r3, #4
 801491c:	4b20      	ldr	r3, [pc, #128]	; (80149a0 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xa8>)
 801491e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014920:	fbb2 f3f3 	udiv	r3, r2, r3
 8014924:	011b      	lsls	r3, r3, #4
 8014926:	62fb      	str	r3, [r7, #44]	; 0x2c
    
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
 8014928:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801492a:	011b      	lsls	r3, r3, #4
 801492c:	4a1c      	ldr	r2, [pc, #112]	; (80149a0 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xa8>)
 801492e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8014930:	fbb3 f1f2 	udiv	r1, r3, r2
 8014934:	fb01 f202 	mul.w	r2, r1, r2
 8014938:	1a9b      	subs	r3, r3, r2
 801493a:	62bb      	str	r3, [r7, #40]	; 0x28
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 801493c:	4b18      	ldr	r3, [pc, #96]	; (80149a0 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xa8>)
 801493e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014940:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014942:	fb03 f202 	mul.w	r2, r3, r2
 8014946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014948:	005b      	lsls	r3, r3, #1
 801494a:	4413      	add	r3, r2
 801494c:	647b      	str	r3, [r7, #68]	; 0x44

    currentMCU++;
 801494e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014950:	3301      	adds	r3, #1
 8014952:	64bb      	str	r3, [r7, #72]	; 0x48
    
    pChrom = pInBuffer + 256; /* pChroma = pInBuffer + 4*64 */
 8014954:	68fb      	ldr	r3, [r7, #12]
 8014956:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801495a:	63bb      	str	r3, [r7, #56]	; 0x38
    
    pLum = pInBuffer;
 801495c:	68fb      	ldr	r3, [r7, #12]
 801495e:	637b      	str	r3, [r7, #52]	; 0x34
    
    for(i= 0; i <  16; i+=2)
 8014960:	2300      	movs	r3, #0
 8014962:	657b      	str	r3, [r7, #84]	; 0x54
 8014964:	e119      	b.n	8014b9a <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2a2>
    {
      if(i == 8)
 8014966:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014968:	2b08      	cmp	r3, #8
 801496a:	d102      	bne.n	8014972 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x7a>
      {
        pLum = pInBuffer + 128;
 801496c:	68fb      	ldr	r3, [r7, #12]
 801496e:	3380      	adds	r3, #128	; 0x80
 8014970:	637b      	str	r3, [r7, #52]	; 0x34
      }
      
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8014972:	4b0b      	ldr	r3, [pc, #44]	; (80149a0 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xa8>)
 8014974:	691b      	ldr	r3, [r3, #16]
 8014976:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014978:	429a      	cmp	r2, r3
 801497a:	f080 810b 	bcs.w	8014b94 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x29c>
      {
        pOutAddr = pOutBuffer + refline;
 801497e:	68ba      	ldr	r2, [r7, #8]
 8014980:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014982:	4413      	add	r3, r2
 8014984:	643b      	str	r3, [r7, #64]	; 0x40
        pOutAddr2 = pOutAddr + JPEG_ConvertorParams.ScaledWidth;
 8014986:	4b06      	ldr	r3, [pc, #24]	; (80149a0 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xa8>)
 8014988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801498a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801498c:	4413      	add	r3, r2
 801498e:	63fb      	str	r3, [r7, #60]	; 0x3c
        
        for(k= 0; k<2; k++)
 8014990:	2300      	movs	r3, #0
 8014992:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014994:	e0f1      	b.n	8014b7a <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x282>
        {
          for(j=0; j < 8; j+=2)
 8014996:	2300      	movs	r3, #0
 8014998:	653b      	str	r3, [r7, #80]	; 0x50
 801499a:	e0e4      	b.n	8014b66 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x26e>
 801499c:	aaaaaaab 	.word	0xaaaaaaab
 80149a0:	20023390 	.word	0x20023390
          {           
            cbcomp = (int32_t)(*(pChrom));
 80149a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149a6:	781b      	ldrb	r3, [r3, #0]
 80149a8:	627b      	str	r3, [r7, #36]	; 0x24
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 80149aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149ac:	009b      	lsls	r3, r3, #2
 80149ae:	4a86      	ldr	r2, [pc, #536]	; (8014bc8 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2d0>)
 80149b0:	4413      	add	r3, r2
 80149b2:	681b      	ldr	r3, [r3, #0]
 80149b4:	623b      	str	r3, [r7, #32]
            
            crcomp = (int32_t)(*(pChrom + 64));
 80149b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149b8:	3340      	adds	r3, #64	; 0x40
 80149ba:	781b      	ldrb	r3, [r3, #0]
 80149bc:	61fb      	str	r3, [r7, #28]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
 80149be:	69fb      	ldr	r3, [r7, #28]
 80149c0:	009b      	lsls	r3, r3, #2
 80149c2:	4a82      	ldr	r2, [pc, #520]	; (8014bcc <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2d4>)
 80149c4:	4413      	add	r3, r2
 80149c6:	681b      	ldr	r3, [r3, #0]
 80149c8:	61bb      	str	r3, [r7, #24]
            
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
 80149ca:	69fb      	ldr	r3, [r7, #28]
 80149cc:	009b      	lsls	r3, r3, #2
 80149ce:	4a80      	ldr	r2, [pc, #512]	; (8014bd0 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2d8>)
 80149d0:	4413      	add	r3, r2
 80149d2:	681a      	ldr	r2, [r3, #0]
 80149d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149d6:	009b      	lsls	r3, r3, #2
 80149d8:	497e      	ldr	r1, [pc, #504]	; (8014bd4 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2dc>)
 80149da:	440b      	add	r3, r1
 80149dc:	681b      	ldr	r3, [r3, #0]
 80149de:	4413      	add	r3, r2
 80149e0:	141b      	asrs	r3, r3, #16
 80149e2:	617b      	str	r3, [r7, #20]
            pOutAddr2[3 + JPEG_GREEN_OFFSET/8] = CLAMP(ycomp + c_green);
            pOutAddr2[3 + JPEG_BLUE_OFFSET/8] = CLAMP(ycomp + c_blue);
 
#elif (JPEG_RGB_FORMAT == JPEG_RGB565)
          
            ycomp = (int32_t)(*(pLum +j));
 80149e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80149e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80149e8:	4413      	add	r3, r2
 80149ea:	781b      	ldrb	r3, [r3, #0]
 80149ec:	613b      	str	r3, [r7, #16]
            
            *(__IO uint16_t *)pOutAddr = 
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 80149ee:	693a      	ldr	r2, [r7, #16]
 80149f0:	69bb      	ldr	r3, [r7, #24]
 80149f2:	4413      	add	r3, r2
 80149f4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80149f8:	4a77      	ldr	r2, [pc, #476]	; (8014bd8 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2e0>)
 80149fa:	5cd3      	ldrb	r3, [r2, r3]
 80149fc:	08db      	lsrs	r3, r3, #3
 80149fe:	b2db      	uxtb	r3, r3
 8014a00:	02db      	lsls	r3, r3, #11
 8014a02:	b21a      	sxth	r2, r3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8014a04:	6939      	ldr	r1, [r7, #16]
 8014a06:	697b      	ldr	r3, [r7, #20]
 8014a08:	440b      	add	r3, r1
 8014a0a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8014a0e:	4972      	ldr	r1, [pc, #456]	; (8014bd8 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2e0>)
 8014a10:	5ccb      	ldrb	r3, [r1, r3]
 8014a12:	089b      	lsrs	r3, r3, #2
 8014a14:	b2db      	uxtb	r3, r3
 8014a16:	015b      	lsls	r3, r3, #5
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8014a18:	b21b      	sxth	r3, r3
 8014a1a:	4313      	orrs	r3, r2
 8014a1c:	b21a      	sxth	r2, r3
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 8014a1e:	6939      	ldr	r1, [r7, #16]
 8014a20:	6a3b      	ldr	r3, [r7, #32]
 8014a22:	440b      	add	r3, r1
 8014a24:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8014a28:	496b      	ldr	r1, [pc, #428]	; (8014bd8 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2e0>)
 8014a2a:	5ccb      	ldrb	r3, [r1, r3]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8014a2c:	08db      	lsrs	r3, r3, #3
 8014a2e:	b2db      	uxtb	r3, r3
 8014a30:	b21b      	sxth	r3, r3
 8014a32:	4313      	orrs	r3, r2
 8014a34:	b21b      	sxth	r3, r3
 8014a36:	b29a      	uxth	r2, r3
            *(__IO uint16_t *)pOutAddr = 
 8014a38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014a3a:	801a      	strh	r2, [r3, #0]
            /**********/
            ycomp = (int32_t)(*(pLum +j +1));
 8014a3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014a3e:	3301      	adds	r3, #1
 8014a40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014a42:	4413      	add	r3, r2
 8014a44:	781b      	ldrb	r3, [r3, #0]
 8014a46:	613b      	str	r3, [r7, #16]
            
            *((__IO uint16_t *)(pOutAddr + 2)) = 
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8014a48:	693a      	ldr	r2, [r7, #16]
 8014a4a:	69bb      	ldr	r3, [r7, #24]
 8014a4c:	4413      	add	r3, r2
 8014a4e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8014a52:	4a61      	ldr	r2, [pc, #388]	; (8014bd8 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2e0>)
 8014a54:	5cd3      	ldrb	r3, [r2, r3]
 8014a56:	08db      	lsrs	r3, r3, #3
 8014a58:	b2db      	uxtb	r3, r3
 8014a5a:	02db      	lsls	r3, r3, #11
 8014a5c:	b21a      	sxth	r2, r3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8014a5e:	6939      	ldr	r1, [r7, #16]
 8014a60:	697b      	ldr	r3, [r7, #20]
 8014a62:	440b      	add	r3, r1
 8014a64:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8014a68:	495b      	ldr	r1, [pc, #364]	; (8014bd8 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2e0>)
 8014a6a:	5ccb      	ldrb	r3, [r1, r3]
 8014a6c:	089b      	lsrs	r3, r3, #2
 8014a6e:	b2db      	uxtb	r3, r3
 8014a70:	015b      	lsls	r3, r3, #5
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8014a72:	b21b      	sxth	r3, r3
 8014a74:	4313      	orrs	r3, r2
 8014a76:	b21a      	sxth	r2, r3
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 8014a78:	6939      	ldr	r1, [r7, #16]
 8014a7a:	6a3b      	ldr	r3, [r7, #32]
 8014a7c:	440b      	add	r3, r1
 8014a7e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8014a82:	4955      	ldr	r1, [pc, #340]	; (8014bd8 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2e0>)
 8014a84:	5ccb      	ldrb	r3, [r1, r3]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8014a86:	08db      	lsrs	r3, r3, #3
 8014a88:	b2db      	uxtb	r3, r3
 8014a8a:	b21b      	sxth	r3, r3
 8014a8c:	4313      	orrs	r3, r2
 8014a8e:	b21a      	sxth	r2, r3
            *((__IO uint16_t *)(pOutAddr + 2)) = 
 8014a90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014a92:	3302      	adds	r3, #2
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8014a94:	b292      	uxth	r2, r2
            *((__IO uint16_t *)(pOutAddr + 2)) = 
 8014a96:	801a      	strh	r2, [r3, #0]
            
            /**********/
            ycomp = (int32_t)(*(pLum +j +8));
 8014a98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014a9a:	3308      	adds	r3, #8
 8014a9c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014a9e:	4413      	add	r3, r2
 8014aa0:	781b      	ldrb	r3, [r3, #0]
 8014aa2:	613b      	str	r3, [r7, #16]
            
            *(__IO uint16_t *)pOutAddr2 = 
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8014aa4:	693a      	ldr	r2, [r7, #16]
 8014aa6:	69bb      	ldr	r3, [r7, #24]
 8014aa8:	4413      	add	r3, r2
 8014aaa:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8014aae:	4a4a      	ldr	r2, [pc, #296]	; (8014bd8 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2e0>)
 8014ab0:	5cd3      	ldrb	r3, [r2, r3]
 8014ab2:	08db      	lsrs	r3, r3, #3
 8014ab4:	b2db      	uxtb	r3, r3
 8014ab6:	02db      	lsls	r3, r3, #11
 8014ab8:	b21a      	sxth	r2, r3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8014aba:	6939      	ldr	r1, [r7, #16]
 8014abc:	697b      	ldr	r3, [r7, #20]
 8014abe:	440b      	add	r3, r1
 8014ac0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8014ac4:	4944      	ldr	r1, [pc, #272]	; (8014bd8 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2e0>)
 8014ac6:	5ccb      	ldrb	r3, [r1, r3]
 8014ac8:	089b      	lsrs	r3, r3, #2
 8014aca:	b2db      	uxtb	r3, r3
 8014acc:	015b      	lsls	r3, r3, #5
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8014ace:	b21b      	sxth	r3, r3
 8014ad0:	4313      	orrs	r3, r2
 8014ad2:	b21a      	sxth	r2, r3
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 8014ad4:	6939      	ldr	r1, [r7, #16]
 8014ad6:	6a3b      	ldr	r3, [r7, #32]
 8014ad8:	440b      	add	r3, r1
 8014ada:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8014ade:	493e      	ldr	r1, [pc, #248]	; (8014bd8 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2e0>)
 8014ae0:	5ccb      	ldrb	r3, [r1, r3]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8014ae2:	08db      	lsrs	r3, r3, #3
 8014ae4:	b2db      	uxtb	r3, r3
 8014ae6:	b21b      	sxth	r3, r3
 8014ae8:	4313      	orrs	r3, r2
 8014aea:	b21b      	sxth	r3, r3
 8014aec:	b29a      	uxth	r2, r3
            *(__IO uint16_t *)pOutAddr2 = 
 8014aee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014af0:	801a      	strh	r2, [r3, #0]
            
            /**********/
            ycomp = (int32_t)(*(pLum +j +8 +1));
 8014af2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014af4:	3309      	adds	r3, #9
 8014af6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014af8:	4413      	add	r3, r2
 8014afa:	781b      	ldrb	r3, [r3, #0]
 8014afc:	613b      	str	r3, [r7, #16]
            
            *((__IO uint16_t *)(pOutAddr2 +2)) = 
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8014afe:	693a      	ldr	r2, [r7, #16]
 8014b00:	69bb      	ldr	r3, [r7, #24]
 8014b02:	4413      	add	r3, r2
 8014b04:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8014b08:	4a33      	ldr	r2, [pc, #204]	; (8014bd8 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2e0>)
 8014b0a:	5cd3      	ldrb	r3, [r2, r3]
 8014b0c:	08db      	lsrs	r3, r3, #3
 8014b0e:	b2db      	uxtb	r3, r3
 8014b10:	02db      	lsls	r3, r3, #11
 8014b12:	b21a      	sxth	r2, r3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8014b14:	6939      	ldr	r1, [r7, #16]
 8014b16:	697b      	ldr	r3, [r7, #20]
 8014b18:	440b      	add	r3, r1
 8014b1a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8014b1e:	492e      	ldr	r1, [pc, #184]	; (8014bd8 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2e0>)
 8014b20:	5ccb      	ldrb	r3, [r1, r3]
 8014b22:	089b      	lsrs	r3, r3, #2
 8014b24:	b2db      	uxtb	r3, r3
 8014b26:	015b      	lsls	r3, r3, #5
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8014b28:	b21b      	sxth	r3, r3
 8014b2a:	4313      	orrs	r3, r2
 8014b2c:	b21a      	sxth	r2, r3
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);         
 8014b2e:	6939      	ldr	r1, [r7, #16]
 8014b30:	6a3b      	ldr	r3, [r7, #32]
 8014b32:	440b      	add	r3, r1
 8014b34:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8014b38:	4927      	ldr	r1, [pc, #156]	; (8014bd8 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2e0>)
 8014b3a:	5ccb      	ldrb	r3, [r1, r3]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8014b3c:	08db      	lsrs	r3, r3, #3
 8014b3e:	b2db      	uxtb	r3, r3
 8014b40:	b21b      	sxth	r3, r3
 8014b42:	4313      	orrs	r3, r2
 8014b44:	b21a      	sxth	r2, r3
            *((__IO uint16_t *)(pOutAddr2 +2)) = 
 8014b46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014b48:	3302      	adds	r3, #2
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8014b4a:	b292      	uxth	r2, r2
            *((__IO uint16_t *)(pOutAddr2 +2)) = 
 8014b4c:	801a      	strh	r2, [r3, #0]
#endif /* JPEG_RGB_FORMAT */          
          
            pOutAddr += JPEG_BYTES_PER_PIXEL * 2;
 8014b4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014b50:	3304      	adds	r3, #4
 8014b52:	643b      	str	r3, [r7, #64]	; 0x40
            pOutAddr2 += JPEG_BYTES_PER_PIXEL * 2;
 8014b54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014b56:	3304      	adds	r3, #4
 8014b58:	63fb      	str	r3, [r7, #60]	; 0x3c
          
            pChrom++;
 8014b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b5c:	3301      	adds	r3, #1
 8014b5e:	63bb      	str	r3, [r7, #56]	; 0x38
          for(j=0; j < 8; j+=2)
 8014b60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014b62:	3302      	adds	r3, #2
 8014b64:	653b      	str	r3, [r7, #80]	; 0x50
 8014b66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014b68:	2b07      	cmp	r3, #7
 8014b6a:	f67f af1b 	bls.w	80149a4 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xac>
          }
          pLum += 64;                      
 8014b6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014b70:	3340      	adds	r3, #64	; 0x40
 8014b72:	637b      	str	r3, [r7, #52]	; 0x34
        for(k= 0; k<2; k++)
 8014b74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014b76:	3301      	adds	r3, #1
 8014b78:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014b7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014b7c:	2b01      	cmp	r3, #1
 8014b7e:	f67f af0a 	bls.w	8014996 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x9e>
        }

        pLum = pLum - 128 + 16;
 8014b82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014b84:	3b70      	subs	r3, #112	; 0x70
 8014b86:	637b      	str	r3, [r7, #52]	; 0x34
        
        refline += 2*JPEG_ConvertorParams.ScaledWidth;          
 8014b88:	4b14      	ldr	r3, [pc, #80]	; (8014bdc <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2e4>)
 8014b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014b8c:	005b      	lsls	r3, r3, #1
 8014b8e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014b90:	4413      	add	r3, r2
 8014b92:	647b      	str	r3, [r7, #68]	; 0x44
    for(i= 0; i <  16; i+=2)
 8014b94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014b96:	3302      	adds	r3, #2
 8014b98:	657b      	str	r3, [r7, #84]	; 0x54
 8014b9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014b9c:	2b0f      	cmp	r3, #15
 8014b9e:	f67f aee2 	bls.w	8014966 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x6e>
      }
    }   
    
    pInBuffer +=  YCBCR_420_BLOCK_SIZE;
 8014ba2:	68fb      	ldr	r3, [r7, #12]
 8014ba4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8014ba8:	60fb      	str	r3, [r7, #12]
  while(currentMCU < (numberMCU + BlockIndex))
 8014baa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014bac:	687b      	ldr	r3, [r7, #4]
 8014bae:	4413      	add	r3, r2
 8014bb0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014bb2:	429a      	cmp	r2, r3
 8014bb4:	f4ff aeb0 	bcc.w	8014918 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x20>
  }
  return numberMCU;
 8014bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8014bba:	4618      	mov	r0, r3
 8014bbc:	375c      	adds	r7, #92	; 0x5c
 8014bbe:	46bd      	mov	sp, r7
 8014bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bc4:	4770      	bx	lr
 8014bc6:	bf00      	nop
 8014bc8:	200237d0 	.word	0x200237d0
 8014bcc:	200233d0 	.word	0x200233d0
 8014bd0:	20023bd0 	.word	0x20023bd0
 8014bd4:	20023fd0 	.word	0x20023fd0
 8014bd8:	0801e698 	.word	0x0801e698
 8014bdc:	20023390 	.word	0x20023390

08014be0 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr422_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
 8014be0:	b480      	push	{r7}
 8014be2:	b097      	sub	sp, #92	; 0x5c
 8014be4:	af00      	add	r7, sp, #0
 8014be6:	60f8      	str	r0, [r7, #12]
 8014be8:	60b9      	str	r1, [r7, #8]
 8014bea:	607a      	str	r2, [r7, #4]
 8014bec:	603b      	str	r3, [r7, #0]
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;
  
  numberMCU = DataCount / YCBCR_422_BLOCK_SIZE;
 8014bee:	683b      	ldr	r3, [r7, #0]
 8014bf0:	0a1b      	lsrs	r3, r3, #8
 8014bf2:	637b      	str	r3, [r7, #52]	; 0x34
  currentMCU = BlockIndex;
 8014bf4:	687b      	ldr	r3, [r7, #4]
 8014bf6:	64bb      	str	r3, [r7, #72]	; 0x48
  

  while(currentMCU < (numberMCU + BlockIndex))
 8014bf8:	e0d9      	b.n	8014dae <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1ce>
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
 8014bfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014bfc:	011a      	lsls	r2, r3, #4
 8014bfe:	4b73      	ldr	r3, [pc, #460]	; (8014dcc <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1ec>)
 8014c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014c02:	fbb2 f3f3 	udiv	r3, r2, r3
 8014c06:	00db      	lsls	r3, r3, #3
 8014c08:	633b      	str	r3, [r7, #48]	; 0x30
    
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
 8014c0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014c0c:	011b      	lsls	r3, r3, #4
 8014c0e:	4a6f      	ldr	r2, [pc, #444]	; (8014dcc <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1ec>)
 8014c10:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8014c12:	fbb3 f1f2 	udiv	r1, r3, r2
 8014c16:	fb01 f202 	mul.w	r2, r1, r2
 8014c1a:	1a9b      	subs	r3, r3, r2
 8014c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8014c1e:	4b6b      	ldr	r3, [pc, #428]	; (8014dcc <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1ec>)
 8014c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014c22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014c24:	fb03 f202 	mul.w	r2, r3, r2
 8014c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c2a:	005b      	lsls	r3, r3, #1
 8014c2c:	4413      	add	r3, r2
 8014c2e:	647b      	str	r3, [r7, #68]	; 0x44

    currentMCU++;
 8014c30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014c32:	3301      	adds	r3, #1
 8014c34:	64bb      	str	r3, [r7, #72]	; 0x48
    
    pChrom = pInBuffer + 128; /* pChroma = pInBuffer + 2*64 */
 8014c36:	68fb      	ldr	r3, [r7, #12]
 8014c38:	3380      	adds	r3, #128	; 0x80
 8014c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
    
    pLum = pInBuffer;
 8014c3c:	68fb      	ldr	r3, [r7, #12]
 8014c3e:	63bb      	str	r3, [r7, #56]	; 0x38
    
    for(i= 0; i <  8; i++)
 8014c40:	2300      	movs	r3, #0
 8014c42:	657b      	str	r3, [r7, #84]	; 0x54
 8014c44:	e0ab      	b.n	8014d9e <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1be>
    {
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8014c46:	4b61      	ldr	r3, [pc, #388]	; (8014dcc <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1ec>)
 8014c48:	691b      	ldr	r3, [r3, #16]
 8014c4a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014c4c:	429a      	cmp	r2, r3
 8014c4e:	f080 80a3 	bcs.w	8014d98 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1b8>
      {
        pOutAddr = pOutBuffer + refline;
 8014c52:	68ba      	ldr	r2, [r7, #8]
 8014c54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014c56:	4413      	add	r3, r2
 8014c58:	643b      	str	r3, [r7, #64]	; 0x40
        
        for(k= 0; k<2; k++)
 8014c5a:	2300      	movs	r3, #0
 8014c5c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014c5e:	e08f      	b.n	8014d80 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1a0>
        {
          for(j=0; j < 8; j+=2)
 8014c60:	2300      	movs	r3, #0
 8014c62:	653b      	str	r3, [r7, #80]	; 0x50
 8014c64:	e082      	b.n	8014d6c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x18c>
          {           
            cbcomp = (int32_t)(*(pChrom));
 8014c66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014c68:	781b      	ldrb	r3, [r3, #0]
 8014c6a:	62bb      	str	r3, [r7, #40]	; 0x28
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 8014c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c6e:	009b      	lsls	r3, r3, #2
 8014c70:	4a57      	ldr	r2, [pc, #348]	; (8014dd0 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1f0>)
 8014c72:	4413      	add	r3, r2
 8014c74:	681b      	ldr	r3, [r3, #0]
 8014c76:	627b      	str	r3, [r7, #36]	; 0x24
            
            crcomp = (int32_t)(*(pChrom + 64));
 8014c78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014c7a:	3340      	adds	r3, #64	; 0x40
 8014c7c:	781b      	ldrb	r3, [r3, #0]
 8014c7e:	623b      	str	r3, [r7, #32]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
 8014c80:	6a3b      	ldr	r3, [r7, #32]
 8014c82:	009b      	lsls	r3, r3, #2
 8014c84:	4a53      	ldr	r2, [pc, #332]	; (8014dd4 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1f4>)
 8014c86:	4413      	add	r3, r2
 8014c88:	681b      	ldr	r3, [r3, #0]
 8014c8a:	61fb      	str	r3, [r7, #28]
            
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
 8014c8c:	6a3b      	ldr	r3, [r7, #32]
 8014c8e:	009b      	lsls	r3, r3, #2
 8014c90:	4a51      	ldr	r2, [pc, #324]	; (8014dd8 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1f8>)
 8014c92:	4413      	add	r3, r2
 8014c94:	681a      	ldr	r2, [r3, #0]
 8014c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c98:	009b      	lsls	r3, r3, #2
 8014c9a:	4950      	ldr	r1, [pc, #320]	; (8014ddc <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1fc>)
 8014c9c:	440b      	add	r3, r1
 8014c9e:	681b      	ldr	r3, [r3, #0]
 8014ca0:	4413      	add	r3, r2
 8014ca2:	141b      	asrs	r3, r3, #16
 8014ca4:	61bb      	str	r3, [r7, #24]
            pOutAddr[3 + JPEG_GREEN_OFFSET/8] = CLAMP(ycomp + c_green);
            pOutAddr[3 + JPEG_BLUE_OFFSET/8] = CLAMP(ycomp + c_blue);

#elif (JPEG_RGB_FORMAT == JPEG_RGB565)  
          
            ycomp = (int32_t)(*(pLum +j));
 8014ca6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014ca8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014caa:	4413      	add	r3, r2
 8014cac:	781b      	ldrb	r3, [r3, #0]
 8014cae:	617b      	str	r3, [r7, #20]
            
            *(__IO uint16_t *)pOutAddr = 
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8014cb0:	697a      	ldr	r2, [r7, #20]
 8014cb2:	69fb      	ldr	r3, [r7, #28]
 8014cb4:	4413      	add	r3, r2
 8014cb6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8014cba:	4a49      	ldr	r2, [pc, #292]	; (8014de0 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x200>)
 8014cbc:	5cd3      	ldrb	r3, [r2, r3]
 8014cbe:	08db      	lsrs	r3, r3, #3
 8014cc0:	b2db      	uxtb	r3, r3
 8014cc2:	02db      	lsls	r3, r3, #11
 8014cc4:	b21a      	sxth	r2, r3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8014cc6:	6979      	ldr	r1, [r7, #20]
 8014cc8:	69bb      	ldr	r3, [r7, #24]
 8014cca:	440b      	add	r3, r1
 8014ccc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8014cd0:	4943      	ldr	r1, [pc, #268]	; (8014de0 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x200>)
 8014cd2:	5ccb      	ldrb	r3, [r1, r3]
 8014cd4:	089b      	lsrs	r3, r3, #2
 8014cd6:	b2db      	uxtb	r3, r3
 8014cd8:	015b      	lsls	r3, r3, #5
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8014cda:	b21b      	sxth	r3, r3
 8014cdc:	4313      	orrs	r3, r2
 8014cde:	b21a      	sxth	r2, r3
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 8014ce0:	6979      	ldr	r1, [r7, #20]
 8014ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ce4:	440b      	add	r3, r1
 8014ce6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8014cea:	493d      	ldr	r1, [pc, #244]	; (8014de0 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x200>)
 8014cec:	5ccb      	ldrb	r3, [r1, r3]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8014cee:	08db      	lsrs	r3, r3, #3
 8014cf0:	b2db      	uxtb	r3, r3
 8014cf2:	b21b      	sxth	r3, r3
 8014cf4:	4313      	orrs	r3, r2
 8014cf6:	b21b      	sxth	r3, r3
 8014cf8:	b29a      	uxth	r2, r3
            *(__IO uint16_t *)pOutAddr = 
 8014cfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014cfc:	801a      	strh	r2, [r3, #0]
            /**********/
            ycomp = (int32_t)(*(pLum +j +1));
 8014cfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014d00:	3301      	adds	r3, #1
 8014d02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014d04:	4413      	add	r3, r2
 8014d06:	781b      	ldrb	r3, [r3, #0]
 8014d08:	617b      	str	r3, [r7, #20]
            
            *((__IO uint16_t *)(pOutAddr + 2)) = 
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8014d0a:	697a      	ldr	r2, [r7, #20]
 8014d0c:	69fb      	ldr	r3, [r7, #28]
 8014d0e:	4413      	add	r3, r2
 8014d10:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8014d14:	4a32      	ldr	r2, [pc, #200]	; (8014de0 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x200>)
 8014d16:	5cd3      	ldrb	r3, [r2, r3]
 8014d18:	08db      	lsrs	r3, r3, #3
 8014d1a:	b2db      	uxtb	r3, r3
 8014d1c:	02db      	lsls	r3, r3, #11
 8014d1e:	b21a      	sxth	r2, r3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8014d20:	6979      	ldr	r1, [r7, #20]
 8014d22:	69bb      	ldr	r3, [r7, #24]
 8014d24:	440b      	add	r3, r1
 8014d26:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8014d2a:	492d      	ldr	r1, [pc, #180]	; (8014de0 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x200>)
 8014d2c:	5ccb      	ldrb	r3, [r1, r3]
 8014d2e:	089b      	lsrs	r3, r3, #2
 8014d30:	b2db      	uxtb	r3, r3
 8014d32:	015b      	lsls	r3, r3, #5
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8014d34:	b21b      	sxth	r3, r3
 8014d36:	4313      	orrs	r3, r2
 8014d38:	b21a      	sxth	r2, r3
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);         
 8014d3a:	6979      	ldr	r1, [r7, #20]
 8014d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d3e:	440b      	add	r3, r1
 8014d40:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8014d44:	4926      	ldr	r1, [pc, #152]	; (8014de0 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x200>)
 8014d46:	5ccb      	ldrb	r3, [r1, r3]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8014d48:	08db      	lsrs	r3, r3, #3
 8014d4a:	b2db      	uxtb	r3, r3
 8014d4c:	b21b      	sxth	r3, r3
 8014d4e:	4313      	orrs	r3, r2
 8014d50:	b21a      	sxth	r2, r3
            *((__IO uint16_t *)(pOutAddr + 2)) = 
 8014d52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014d54:	3302      	adds	r3, #2
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8014d56:	b292      	uxth	r2, r2
            *((__IO uint16_t *)(pOutAddr + 2)) = 
 8014d58:	801a      	strh	r2, [r3, #0]
          
#endif /* JPEG_RGB_FORMAT*/          
          
            pOutAddr += JPEG_BYTES_PER_PIXEL * 2;
 8014d5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014d5c:	3304      	adds	r3, #4
 8014d5e:	643b      	str	r3, [r7, #64]	; 0x40
          
            pChrom++;
 8014d60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014d62:	3301      	adds	r3, #1
 8014d64:	63fb      	str	r3, [r7, #60]	; 0x3c
          for(j=0; j < 8; j+=2)
 8014d66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014d68:	3302      	adds	r3, #2
 8014d6a:	653b      	str	r3, [r7, #80]	; 0x50
 8014d6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014d6e:	2b07      	cmp	r3, #7
 8014d70:	f67f af79 	bls.w	8014c66 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x86>
          }
          pLum += 64;                      
 8014d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d76:	3340      	adds	r3, #64	; 0x40
 8014d78:	63bb      	str	r3, [r7, #56]	; 0x38
        for(k= 0; k<2; k++)
 8014d7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014d7c:	3301      	adds	r3, #1
 8014d7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014d80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014d82:	2b01      	cmp	r3, #1
 8014d84:	f67f af6c 	bls.w	8014c60 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x80>
        }
        
        pLum = pLum - 128 + 8;
 8014d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d8a:	3b78      	subs	r3, #120	; 0x78
 8014d8c:	63bb      	str	r3, [r7, #56]	; 0x38
        
        refline += JPEG_ConvertorParams.ScaledWidth;          
 8014d8e:	4b0f      	ldr	r3, [pc, #60]	; (8014dcc <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1ec>)
 8014d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014d92:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014d94:	4413      	add	r3, r2
 8014d96:	647b      	str	r3, [r7, #68]	; 0x44
    for(i= 0; i <  8; i++)
 8014d98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014d9a:	3301      	adds	r3, #1
 8014d9c:	657b      	str	r3, [r7, #84]	; 0x54
 8014d9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014da0:	2b07      	cmp	r3, #7
 8014da2:	f67f af50 	bls.w	8014c46 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x66>
      }
    }   
    
    pInBuffer +=  YCBCR_422_BLOCK_SIZE;
 8014da6:	68fb      	ldr	r3, [r7, #12]
 8014da8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8014dac:	60fb      	str	r3, [r7, #12]
  while(currentMCU < (numberMCU + BlockIndex))
 8014dae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014db0:	687b      	ldr	r3, [r7, #4]
 8014db2:	4413      	add	r3, r2
 8014db4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014db6:	429a      	cmp	r2, r3
 8014db8:	f4ff af1f 	bcc.w	8014bfa <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1a>
  }
  return numberMCU;
 8014dbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8014dbe:	4618      	mov	r0, r3
 8014dc0:	375c      	adds	r7, #92	; 0x5c
 8014dc2:	46bd      	mov	sp, r7
 8014dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dc8:	4770      	bx	lr
 8014dca:	bf00      	nop
 8014dcc:	20023390 	.word	0x20023390
 8014dd0:	200237d0 	.word	0x200237d0
 8014dd4:	200233d0 	.word	0x200233d0
 8014dd8:	20023bd0 	.word	0x20023bd0
 8014ddc:	20023fd0 	.word	0x20023fd0
 8014de0:	0801e698 	.word	0x0801e698

08014de4 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr444_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
 8014de4:	b480      	push	{r7}
 8014de6:	b095      	sub	sp, #84	; 0x54
 8014de8:	af00      	add	r7, sp, #0
 8014dea:	60f8      	str	r0, [r7, #12]
 8014dec:	60b9      	str	r1, [r7, #8]
 8014dee:	607a      	str	r2, [r7, #4]
 8014df0:	603b      	str	r3, [r7, #0]
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;
  
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
 8014df2:	683b      	ldr	r3, [r7, #0]
 8014df4:	4a58      	ldr	r2, [pc, #352]	; (8014f58 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x174>)
 8014df6:	fba2 2303 	umull	r2, r3, r2, r3
 8014dfa:	09db      	lsrs	r3, r3, #7
 8014dfc:	633b      	str	r3, [r7, #48]	; 0x30
  currentMCU = BlockIndex;
 8014dfe:	687b      	ldr	r3, [r7, #4]
 8014e00:	647b      	str	r3, [r7, #68]	; 0x44
  

  while(currentMCU < (numberMCU + BlockIndex))
 8014e02:	e09a      	b.n	8014f3a <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x156>
  {

    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 8014e04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014e06:	00da      	lsls	r2, r3, #3
 8014e08:	4b54      	ldr	r3, [pc, #336]	; (8014f5c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x178>)
 8014e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014e0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8014e10:	00db      	lsls	r3, r3, #3
 8014e12:	62fb      	str	r3, [r7, #44]	; 0x2c
    
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 8014e14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014e16:	00db      	lsls	r3, r3, #3
 8014e18:	4a50      	ldr	r2, [pc, #320]	; (8014f5c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x178>)
 8014e1a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8014e1c:	fbb3 f1f2 	udiv	r1, r3, r2
 8014e20:	fb01 f202 	mul.w	r2, r1, r2
 8014e24:	1a9b      	subs	r3, r3, r2
 8014e26:	62bb      	str	r3, [r7, #40]	; 0x28
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8014e28:	4b4c      	ldr	r3, [pc, #304]	; (8014f5c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x178>)
 8014e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014e2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014e2e:	fb03 f202 	mul.w	r2, r3, r2
 8014e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e34:	005b      	lsls	r3, r3, #1
 8014e36:	4413      	add	r3, r2
 8014e38:	643b      	str	r3, [r7, #64]	; 0x40

    currentMCU++;   
 8014e3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014e3c:	3301      	adds	r3, #1
 8014e3e:	647b      	str	r3, [r7, #68]	; 0x44
    
    pChrom = pInBuffer + 64; /* pChroma = pInBuffer + 4*64 */
 8014e40:	68fb      	ldr	r3, [r7, #12]
 8014e42:	3340      	adds	r3, #64	; 0x40
 8014e44:	63bb      	str	r3, [r7, #56]	; 0x38
    
    pLum = pInBuffer;
 8014e46:	68fb      	ldr	r3, [r7, #12]
 8014e48:	637b      	str	r3, [r7, #52]	; 0x34
    
    for(i= 0; i <  8; i++)
 8014e4a:	2300      	movs	r3, #0
 8014e4c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014e4e:	e06e      	b.n	8014f2e <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x14a>
    {
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8014e50:	4b42      	ldr	r3, [pc, #264]	; (8014f5c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x178>)
 8014e52:	691b      	ldr	r3, [r3, #16]
 8014e54:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8014e56:	429a      	cmp	r2, r3
 8014e58:	d266      	bcs.n	8014f28 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x144>
      {
        pOutAddr = pOutBuffer+ refline;
 8014e5a:	68ba      	ldr	r2, [r7, #8]
 8014e5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014e5e:	4413      	add	r3, r2
 8014e60:	63fb      	str	r3, [r7, #60]	; 0x3c
        

          for(j=0; j < 8; j++)
 8014e62:	2300      	movs	r3, #0
 8014e64:	64bb      	str	r3, [r7, #72]	; 0x48
 8014e66:	e054      	b.n	8014f12 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x12e>
          {           
            cbcomp = (int32_t)(*pChrom);
 8014e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e6a:	781b      	ldrb	r3, [r3, #0]
 8014e6c:	627b      	str	r3, [r7, #36]	; 0x24
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 8014e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e70:	009b      	lsls	r3, r3, #2
 8014e72:	4a3b      	ldr	r2, [pc, #236]	; (8014f60 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x17c>)
 8014e74:	4413      	add	r3, r2
 8014e76:	681b      	ldr	r3, [r3, #0]
 8014e78:	623b      	str	r3, [r7, #32]
            
            crcomp = (int32_t)(*(pChrom + 64));
 8014e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e7c:	3340      	adds	r3, #64	; 0x40
 8014e7e:	781b      	ldrb	r3, [r3, #0]
 8014e80:	61fb      	str	r3, [r7, #28]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
 8014e82:	69fb      	ldr	r3, [r7, #28]
 8014e84:	009b      	lsls	r3, r3, #2
 8014e86:	4a37      	ldr	r2, [pc, #220]	; (8014f64 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x180>)
 8014e88:	4413      	add	r3, r2
 8014e8a:	681b      	ldr	r3, [r3, #0]
 8014e8c:	61bb      	str	r3, [r7, #24]
            
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
 8014e8e:	69fb      	ldr	r3, [r7, #28]
 8014e90:	009b      	lsls	r3, r3, #2
 8014e92:	4a35      	ldr	r2, [pc, #212]	; (8014f68 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x184>)
 8014e94:	4413      	add	r3, r2
 8014e96:	681a      	ldr	r2, [r3, #0]
 8014e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e9a:	009b      	lsls	r3, r3, #2
 8014e9c:	4933      	ldr	r1, [pc, #204]	; (8014f6c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x188>)
 8014e9e:	440b      	add	r3, r1
 8014ea0:	681b      	ldr	r3, [r3, #0]
 8014ea2:	4413      	add	r3, r2
 8014ea4:	141b      	asrs	r3, r3, #16
 8014ea6:	617b      	str	r3, [r7, #20]
            pOutAddr[JPEG_GREEN_OFFSET/8] = CLAMP(ycomp + c_green);
            pOutAddr[JPEG_BLUE_OFFSET/8] = CLAMP(ycomp + c_blue);        

#elif (JPEG_RGB_FORMAT == JPEG_RGB565)  
            
            ycomp = (int32_t)(*(pLum +j));
 8014ea8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014eaa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014eac:	4413      	add	r3, r2
 8014eae:	781b      	ldrb	r3, [r3, #0]
 8014eb0:	613b      	str	r3, [r7, #16]
          
            *(__IO uint16_t *)pOutAddr = 
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8014eb2:	693a      	ldr	r2, [r7, #16]
 8014eb4:	69bb      	ldr	r3, [r7, #24]
 8014eb6:	4413      	add	r3, r2
 8014eb8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8014ebc:	4a2c      	ldr	r2, [pc, #176]	; (8014f70 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x18c>)
 8014ebe:	5cd3      	ldrb	r3, [r2, r3]
 8014ec0:	08db      	lsrs	r3, r3, #3
 8014ec2:	b2db      	uxtb	r3, r3
 8014ec4:	02db      	lsls	r3, r3, #11
 8014ec6:	b21a      	sxth	r2, r3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8014ec8:	6939      	ldr	r1, [r7, #16]
 8014eca:	697b      	ldr	r3, [r7, #20]
 8014ecc:	440b      	add	r3, r1
 8014ece:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8014ed2:	4927      	ldr	r1, [pc, #156]	; (8014f70 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x18c>)
 8014ed4:	5ccb      	ldrb	r3, [r1, r3]
 8014ed6:	089b      	lsrs	r3, r3, #2
 8014ed8:	b2db      	uxtb	r3, r3
 8014eda:	015b      	lsls	r3, r3, #5
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8014edc:	b21b      	sxth	r3, r3
 8014ede:	4313      	orrs	r3, r2
 8014ee0:	b21a      	sxth	r2, r3
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
 8014ee2:	6939      	ldr	r1, [r7, #16]
 8014ee4:	6a3b      	ldr	r3, [r7, #32]
 8014ee6:	440b      	add	r3, r1
 8014ee8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8014eec:	4920      	ldr	r1, [pc, #128]	; (8014f70 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x18c>)
 8014eee:	5ccb      	ldrb	r3, [r1, r3]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8014ef0:	08db      	lsrs	r3, r3, #3
 8014ef2:	b2db      	uxtb	r3, r3
 8014ef4:	b21b      	sxth	r3, r3
 8014ef6:	4313      	orrs	r3, r2
 8014ef8:	b21b      	sxth	r3, r3
 8014efa:	b29a      	uxth	r2, r3
            *(__IO uint16_t *)pOutAddr = 
 8014efc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014efe:	801a      	strh	r2, [r3, #0]
            
#endif /* JPEG_RGB_FORMAT */          
          
            pOutAddr += JPEG_BYTES_PER_PIXEL;
 8014f00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014f02:	3302      	adds	r3, #2
 8014f04:	63fb      	str	r3, [r7, #60]	; 0x3c
          
            pChrom++;
 8014f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f08:	3301      	adds	r3, #1
 8014f0a:	63bb      	str	r3, [r7, #56]	; 0x38
          for(j=0; j < 8; j++)
 8014f0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014f0e:	3301      	adds	r3, #1
 8014f10:	64bb      	str	r3, [r7, #72]	; 0x48
 8014f12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014f14:	2b07      	cmp	r3, #7
 8014f16:	d9a7      	bls.n	8014e68 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x84>
          }
          pLum += 8;
 8014f18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014f1a:	3308      	adds	r3, #8
 8014f1c:	637b      	str	r3, [r7, #52]	; 0x34

        refline += JPEG_ConvertorParams.ScaledWidth;          
 8014f1e:	4b0f      	ldr	r3, [pc, #60]	; (8014f5c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x178>)
 8014f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014f22:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8014f24:	4413      	add	r3, r2
 8014f26:	643b      	str	r3, [r7, #64]	; 0x40
    for(i= 0; i <  8; i++)
 8014f28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014f2a:	3301      	adds	r3, #1
 8014f2c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014f2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014f30:	2b07      	cmp	r3, #7
 8014f32:	d98d      	bls.n	8014e50 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x6c>
      }
    }   
    
    pInBuffer +=  YCBCR_444_BLOCK_SIZE;
 8014f34:	68fb      	ldr	r3, [r7, #12]
 8014f36:	33c0      	adds	r3, #192	; 0xc0
 8014f38:	60fb      	str	r3, [r7, #12]
  while(currentMCU < (numberMCU + BlockIndex))
 8014f3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014f3c:	687b      	ldr	r3, [r7, #4]
 8014f3e:	4413      	add	r3, r2
 8014f40:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014f42:	429a      	cmp	r2, r3
 8014f44:	f4ff af5e 	bcc.w	8014e04 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x20>
  }
  return numberMCU;
 8014f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8014f4a:	4618      	mov	r0, r3
 8014f4c:	3754      	adds	r7, #84	; 0x54
 8014f4e:	46bd      	mov	sp, r7
 8014f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f54:	4770      	bx	lr
 8014f56:	bf00      	nop
 8014f58:	aaaaaaab 	.word	0xaaaaaaab
 8014f5c:	20023390 	.word	0x20023390
 8014f60:	200237d0 	.word	0x200237d0
 8014f64:	200233d0 	.word	0x200233d0
 8014f68:	20023bd0 	.word	0x20023bd0
 8014f6c:	20023fd0 	.word	0x20023fd0
 8014f70:	0801e698 	.word	0x0801e698

08014f74 <JPEG_MCU_Gray_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_Gray_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
 8014f74:	b480      	push	{r7}
 8014f76:	b08f      	sub	sp, #60	; 0x3c
 8014f78:	af00      	add	r7, sp, #0
 8014f7a:	60f8      	str	r0, [r7, #12]
 8014f7c:	60b9      	str	r1, [r7, #8]
 8014f7e:	607a      	str	r2, [r7, #4]
 8014f80:	603b      	str	r3, [r7, #0]

  uint32_t i,j, ySample;
  uint8_t *pOutAddr,  *pLum;

  
  numberMCU = DataCount / GRAY_444_BLOCK_SIZE;
 8014f82:	683b      	ldr	r3, [r7, #0]
 8014f84:	099b      	lsrs	r3, r3, #6
 8014f86:	61fb      	str	r3, [r7, #28]
  currentMCU = BlockIndex;
 8014f88:	687b      	ldr	r3, [r7, #4]
 8014f8a:	637b      	str	r3, [r7, #52]	; 0x34
  
  while(currentMCU < (numberMCU + BlockIndex))
 8014f8c:	e05e      	b.n	801504c <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xd8>
  {
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 8014f8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014f90:	00da      	lsls	r2, r3, #3
 8014f92:	4b35      	ldr	r3, [pc, #212]	; (8015068 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xf4>)
 8014f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014f96:	fbb2 f3f3 	udiv	r3, r2, r3
 8014f9a:	00db      	lsls	r3, r3, #3
 8014f9c:	61bb      	str	r3, [r7, #24]
    
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 8014f9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014fa0:	00db      	lsls	r3, r3, #3
 8014fa2:	4a31      	ldr	r2, [pc, #196]	; (8015068 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xf4>)
 8014fa4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8014fa6:	fbb3 f1f2 	udiv	r1, r3, r2
 8014faa:	fb01 f202 	mul.w	r2, r1, r2
 8014fae:	1a9b      	subs	r3, r3, r2
 8014fb0:	617b      	str	r3, [r7, #20]
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8014fb2:	4b2d      	ldr	r3, [pc, #180]	; (8015068 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xf4>)
 8014fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014fb6:	69ba      	ldr	r2, [r7, #24]
 8014fb8:	fb03 f202 	mul.w	r2, r3, r2
 8014fbc:	697b      	ldr	r3, [r7, #20]
 8014fbe:	005b      	lsls	r3, r3, #1
 8014fc0:	4413      	add	r3, r2
 8014fc2:	633b      	str	r3, [r7, #48]	; 0x30
    
    currentMCU++;
 8014fc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014fc6:	3301      	adds	r3, #1
 8014fc8:	637b      	str	r3, [r7, #52]	; 0x34
  
    pLum = pInBuffer;
 8014fca:	68fb      	ldr	r3, [r7, #12]
 8014fcc:	623b      	str	r3, [r7, #32]
    
    for(i= 0; i <  8; i++)
 8014fce:	2300      	movs	r3, #0
 8014fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014fd2:	e035      	b.n	8015040 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xcc>
    { 
      pOutAddr = pOutBuffer + refline;
 8014fd4:	68ba      	ldr	r2, [r7, #8]
 8014fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014fd8:	4413      	add	r3, r2
 8014fda:	627b      	str	r3, [r7, #36]	; 0x24
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8014fdc:	4b22      	ldr	r3, [pc, #136]	; (8015068 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xf4>)
 8014fde:	691b      	ldr	r3, [r3, #16]
 8014fe0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014fe2:	429a      	cmp	r2, r3
 8014fe4:	d229      	bcs.n	801503a <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xc6>
      {  
        for(j=0; j < 8; j++)
 8014fe6:	2300      	movs	r3, #0
 8014fe8:	62bb      	str	r3, [r7, #40]	; 0x28
 8014fea:	e01e      	b.n	801502a <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xb6>
        { 
          ySample =   (uint32_t)(*pLum);
 8014fec:	6a3b      	ldr	r3, [r7, #32]
 8014fee:	781b      	ldrb	r3, [r3, #0]
 8014ff0:	613b      	str	r3, [r7, #16]
          pOutAddr[1] =  ySample;
          pOutAddr[2] =  ySample;     
 
#elif (JPEG_RGB_FORMAT == JPEG_RGB565)
            
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);     
 8014ff2:	693b      	ldr	r3, [r7, #16]
 8014ff4:	08db      	lsrs	r3, r3, #3
 8014ff6:	b29b      	uxth	r3, r3
 8014ff8:	02db      	lsls	r3, r3, #11
 8014ffa:	b29a      	uxth	r2, r3
 8014ffc:	693b      	ldr	r3, [r7, #16]
 8014ffe:	089b      	lsrs	r3, r3, #2
 8015000:	b29b      	uxth	r3, r3
 8015002:	015b      	lsls	r3, r3, #5
 8015004:	b29b      	uxth	r3, r3
 8015006:	4313      	orrs	r3, r2
 8015008:	b29a      	uxth	r2, r3
 801500a:	693b      	ldr	r3, [r7, #16]
 801500c:	08db      	lsrs	r3, r3, #3
 801500e:	b29b      	uxth	r3, r3
 8015010:	4313      	orrs	r3, r2
 8015012:	b29a      	uxth	r2, r3
 8015014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015016:	801a      	strh	r2, [r3, #0]
          
#endif /* JPEG_RGB_FORMAT */          
          
          pOutAddr += JPEG_BYTES_PER_PIXEL;
 8015018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801501a:	3302      	adds	r3, #2
 801501c:	627b      	str	r3, [r7, #36]	; 0x24
          pLum++;
 801501e:	6a3b      	ldr	r3, [r7, #32]
 8015020:	3301      	adds	r3, #1
 8015022:	623b      	str	r3, [r7, #32]
        for(j=0; j < 8; j++)
 8015024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015026:	3301      	adds	r3, #1
 8015028:	62bb      	str	r3, [r7, #40]	; 0x28
 801502a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801502c:	2b07      	cmp	r3, #7
 801502e:	d9dd      	bls.n	8014fec <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x78>
        }

        refline += JPEG_ConvertorParams.ScaledWidth;        
 8015030:	4b0d      	ldr	r3, [pc, #52]	; (8015068 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xf4>)
 8015032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015034:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015036:	4413      	add	r3, r2
 8015038:	633b      	str	r3, [r7, #48]	; 0x30
    for(i= 0; i <  8; i++)
 801503a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801503c:	3301      	adds	r3, #1
 801503e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015042:	2b07      	cmp	r3, #7
 8015044:	d9c6      	bls.n	8014fd4 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x60>
      }
    }
    
    pInBuffer +=  GRAY_444_BLOCK_SIZE;    
 8015046:	68fb      	ldr	r3, [r7, #12]
 8015048:	3340      	adds	r3, #64	; 0x40
 801504a:	60fb      	str	r3, [r7, #12]
  while(currentMCU < (numberMCU + BlockIndex))
 801504c:	69fa      	ldr	r2, [r7, #28]
 801504e:	687b      	ldr	r3, [r7, #4]
 8015050:	4413      	add	r3, r2
 8015052:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015054:	429a      	cmp	r2, r3
 8015056:	d39a      	bcc.n	8014f8e <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x1a>
  }
  return numberMCU;
 8015058:	69fb      	ldr	r3, [r7, #28]
}
 801505a:	4618      	mov	r0, r3
 801505c:	373c      	adds	r7, #60	; 0x3c
 801505e:	46bd      	mov	sp, r7
 8015060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015064:	4770      	bx	lr
 8015066:	bf00      	nop
 8015068:	20023390 	.word	0x20023390

0801506c <JPEG_MCU_YCCK_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCCK_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer, 
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
 801506c:	b480      	push	{r7}
 801506e:	b093      	sub	sp, #76	; 0x4c
 8015070:	af00      	add	r7, sp, #0
 8015072:	60f8      	str	r0, [r7, #12]
 8015074:	60b9      	str	r1, [r7, #8]
 8015076:	607a      	str	r2, [r7, #4]
 8015078:	603b      	str	r3, [r7, #0]
  
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr, *pChrom;
  
  numberMCU = DataCount / CMYK_444_BLOCK_SIZE;
 801507a:	683b      	ldr	r3, [r7, #0]
 801507c:	0a1b      	lsrs	r3, r3, #8
 801507e:	62fb      	str	r3, [r7, #44]	; 0x2c
  currentMCU = BlockIndex;
 8015080:	687b      	ldr	r3, [r7, #4]
 8015082:	63fb      	str	r3, [r7, #60]	; 0x3c
  

  while(currentMCU < (numberMCU + BlockIndex))
 8015084:	e08b      	b.n	801519e <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x132>
  {

    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 8015086:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015088:	00da      	lsls	r2, r3, #3
 801508a:	4b4c      	ldr	r3, [pc, #304]	; (80151bc <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x150>)
 801508c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801508e:	fbb2 f3f3 	udiv	r3, r2, r3
 8015092:	00db      	lsls	r3, r3, #3
 8015094:	62bb      	str	r3, [r7, #40]	; 0x28
    
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 8015096:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015098:	00db      	lsls	r3, r3, #3
 801509a:	4a48      	ldr	r2, [pc, #288]	; (80151bc <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x150>)
 801509c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801509e:	fbb3 f1f2 	udiv	r1, r3, r2
 80150a2:	fb01 f202 	mul.w	r2, r1, r2
 80150a6:	1a9b      	subs	r3, r3, r2
 80150a8:	627b      	str	r3, [r7, #36]	; 0x24
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 80150aa:	4b44      	ldr	r3, [pc, #272]	; (80151bc <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x150>)
 80150ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80150ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80150b0:	fb03 f202 	mul.w	r2, r3, r2
 80150b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150b6:	005b      	lsls	r3, r3, #1
 80150b8:	4413      	add	r3, r2
 80150ba:	63bb      	str	r3, [r7, #56]	; 0x38

    currentMCU++;
 80150bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80150be:	3301      	adds	r3, #1
 80150c0:	63fb      	str	r3, [r7, #60]	; 0x3c
    
    pChrom = pInBuffer;
 80150c2:	68fb      	ldr	r3, [r7, #12]
 80150c4:	633b      	str	r3, [r7, #48]	; 0x30
    
    for(i= 0; i <  8; i++)
 80150c6:	2300      	movs	r3, #0
 80150c8:	647b      	str	r3, [r7, #68]	; 0x44
 80150ca:	e061      	b.n	8015190 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x124>
    {
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 80150cc:	4b3b      	ldr	r3, [pc, #236]	; (80151bc <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x150>)
 80150ce:	691b      	ldr	r3, [r3, #16]
 80150d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80150d2:	429a      	cmp	r2, r3
 80150d4:	d259      	bcs.n	801518a <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x11e>
      {
        pOutAddr = pOutBuffer+ refline;        
 80150d6:	68ba      	ldr	r2, [r7, #8]
 80150d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80150da:	4413      	add	r3, r2
 80150dc:	637b      	str	r3, [r7, #52]	; 0x34

          for(j=0; j < 8; j++)
 80150de:	2300      	movs	r3, #0
 80150e0:	643b      	str	r3, [r7, #64]	; 0x40
 80150e2:	e04a      	b.n	801517a <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x10e>
          {           
            color_k = (int32_t)(*(pChrom + 192));
 80150e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80150e6:	33c0      	adds	r3, #192	; 0xc0
 80150e8:	781b      	ldrb	r3, [r3, #0]
 80150ea:	623b      	str	r3, [r7, #32]
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
 80150ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80150ee:	781b      	ldrb	r3, [r3, #0]
 80150f0:	461a      	mov	r2, r3
 80150f2:	6a3b      	ldr	r3, [r7, #32]
 80150f4:	fb02 f303 	mul.w	r3, r2, r3
 80150f8:	4a31      	ldr	r2, [pc, #196]	; (80151c0 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x154>)
 80150fa:	fb82 1203 	smull	r1, r2, r2, r3
 80150fe:	441a      	add	r2, r3
 8015100:	11d2      	asrs	r2, r2, #7
 8015102:	17db      	asrs	r3, r3, #31
 8015104:	1ad3      	subs	r3, r2, r3
 8015106:	61fb      	str	r3, [r7, #28]
            
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
 8015108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801510a:	3340      	adds	r3, #64	; 0x40
 801510c:	781b      	ldrb	r3, [r3, #0]
 801510e:	461a      	mov	r2, r3
 8015110:	6a3b      	ldr	r3, [r7, #32]
 8015112:	fb02 f303 	mul.w	r3, r2, r3
 8015116:	4a2a      	ldr	r2, [pc, #168]	; (80151c0 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x154>)
 8015118:	fb82 1203 	smull	r1, r2, r2, r3
 801511c:	441a      	add	r2, r3
 801511e:	11d2      	asrs	r2, r2, #7
 8015120:	17db      	asrs	r3, r3, #31
 8015122:	1ad3      	subs	r3, r2, r3
 8015124:	61bb      	str	r3, [r7, #24]
            
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
 8015126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015128:	3380      	adds	r3, #128	; 0x80
 801512a:	781b      	ldrb	r3, [r3, #0]
 801512c:	461a      	mov	r2, r3
 801512e:	6a3b      	ldr	r3, [r7, #32]
 8015130:	fb02 f303 	mul.w	r3, r2, r3
 8015134:	4a22      	ldr	r2, [pc, #136]	; (80151c0 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x154>)
 8015136:	fb82 1203 	smull	r1, r2, r2, r3
 801513a:	441a      	add	r2, r3
 801513c:	11d2      	asrs	r2, r2, #7
 801513e:	17db      	asrs	r3, r3, #31
 8015140:	1ad3      	subs	r3, r2, r3
 8015142:	617b      	str	r3, [r7, #20]
          pOutAddr[JPEG_BLUE_OFFSET/8]  =  c_blue;
          
#elif (JPEG_RGB_FORMAT == JPEG_RGB565)
            
          *(__IO uint16_t *)pOutAddr = 
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
 8015144:	69fb      	ldr	r3, [r7, #28]
 8015146:	10db      	asrs	r3, r3, #3
 8015148:	02db      	lsls	r3, r3, #11
 801514a:	b21a      	sxth	r2, r3
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
 801514c:	69bb      	ldr	r3, [r7, #24]
 801514e:	109b      	asrs	r3, r3, #2
 8015150:	015b      	lsls	r3, r3, #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
 8015152:	b21b      	sxth	r3, r3
 8015154:	4313      	orrs	r3, r2
 8015156:	b21a      	sxth	r2, r3
            ((c_blue >> 3) << JPEG_BLUE_OFFSET);         
 8015158:	697b      	ldr	r3, [r7, #20]
 801515a:	10db      	asrs	r3, r3, #3
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
 801515c:	b21b      	sxth	r3, r3
 801515e:	4313      	orrs	r3, r2
 8015160:	b21b      	sxth	r3, r3
 8015162:	b29a      	uxth	r2, r3
          *(__IO uint16_t *)pOutAddr = 
 8015164:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015166:	801a      	strh	r2, [r3, #0]
            
#endif /* JPEG_RGB_FORMAT */          
          
            pOutAddr += JPEG_BYTES_PER_PIXEL;
 8015168:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801516a:	3302      	adds	r3, #2
 801516c:	637b      	str	r3, [r7, #52]	; 0x34
          
            pChrom++;
 801516e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015170:	3301      	adds	r3, #1
 8015172:	633b      	str	r3, [r7, #48]	; 0x30
          for(j=0; j < 8; j++)
 8015174:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015176:	3301      	adds	r3, #1
 8015178:	643b      	str	r3, [r7, #64]	; 0x40
 801517a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801517c:	2b07      	cmp	r3, #7
 801517e:	d9b1      	bls.n	80150e4 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x78>
          }

        refline += JPEG_ConvertorParams.ScaledWidth;          
 8015180:	4b0e      	ldr	r3, [pc, #56]	; (80151bc <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x150>)
 8015182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015184:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015186:	4413      	add	r3, r2
 8015188:	63bb      	str	r3, [r7, #56]	; 0x38
    for(i= 0; i <  8; i++)
 801518a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801518c:	3301      	adds	r3, #1
 801518e:	647b      	str	r3, [r7, #68]	; 0x44
 8015190:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015192:	2b07      	cmp	r3, #7
 8015194:	d99a      	bls.n	80150cc <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x60>
      }
    }   
    
    pInBuffer +=  CMYK_444_BLOCK_SIZE;
 8015196:	68fb      	ldr	r3, [r7, #12]
 8015198:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801519c:	60fb      	str	r3, [r7, #12]
  while(currentMCU < (numberMCU + BlockIndex))
 801519e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80151a0:	687b      	ldr	r3, [r7, #4]
 80151a2:	4413      	add	r3, r2
 80151a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80151a6:	429a      	cmp	r2, r3
 80151a8:	f4ff af6d 	bcc.w	8015086 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x1a>
  }
  return numberMCU;
 80151ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80151ae:	4618      	mov	r0, r3
 80151b0:	374c      	adds	r7, #76	; 0x4c
 80151b2:	46bd      	mov	sp, r7
 80151b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151b8:	4770      	bx	lr
 80151ba:	bf00      	nop
 80151bc:	20023390 	.word	0x20023390
 80151c0:	80808081 	.word	0x80808081

080151c4 <JPEG_GetDecodeColorConvertFunc>:
  *                      depending of the jpeg image color space and chroma sampling info. 
  * @param ImageNbMCUs : pointer to uint32_t, used to retrive the total number of MCU blocks in the jpeg image.  
  * @retval HAL status : HAL_OK or HAL_ERROR.
  */
HAL_StatusTypeDef JPEG_GetDecodeColorConvertFunc(JPEG_ConfTypeDef *pJpegInfo, JPEG_YCbCrToRGB_Convert_Function *pFunction, uint32_t *ImageNbMCUs)
{
 80151c4:	b480      	push	{r7}
 80151c6:	b087      	sub	sp, #28
 80151c8:	af00      	add	r7, sp, #0
 80151ca:	60f8      	str	r0, [r7, #12]
 80151cc:	60b9      	str	r1, [r7, #8]
 80151ce:	607a      	str	r2, [r7, #4]
  uint32_t hMCU, vMCU;

  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
 80151d0:	68fb      	ldr	r3, [r7, #12]
 80151d2:	681b      	ldr	r3, [r3, #0]
 80151d4:	4a7a      	ldr	r2, [pc, #488]	; (80153c0 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 80151d6:	6013      	str	r3, [r2, #0]
  JPEG_ConvertorParams.ImageWidth = pJpegInfo->ImageWidth;
 80151d8:	68fb      	ldr	r3, [r7, #12]
 80151da:	68db      	ldr	r3, [r3, #12]
 80151dc:	4a78      	ldr	r2, [pc, #480]	; (80153c0 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 80151de:	6093      	str	r3, [r2, #8]
  JPEG_ConvertorParams.ImageHeight = pJpegInfo->ImageHeight;
 80151e0:	68fb      	ldr	r3, [r7, #12]
 80151e2:	689b      	ldr	r3, [r3, #8]
 80151e4:	4a76      	ldr	r2, [pc, #472]	; (80153c0 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 80151e6:	60d3      	str	r3, [r2, #12]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
 80151e8:	68fb      	ldr	r3, [r7, #12]
 80151ea:	68db      	ldr	r3, [r3, #12]
 80151ec:	68fa      	ldr	r2, [r7, #12]
 80151ee:	6892      	ldr	r2, [r2, #8]
 80151f0:	fb02 f303 	mul.w	r3, r2, r3
 80151f4:	005b      	lsls	r3, r3, #1
 80151f6:	4a72      	ldr	r2, [pc, #456]	; (80153c0 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 80151f8:	6113      	str	r3, [r2, #16]
  
  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;  
 80151fa:	68fb      	ldr	r3, [r7, #12]
 80151fc:	685b      	ldr	r3, [r3, #4]
 80151fe:	4a70      	ldr	r2, [pc, #448]	; (80153c0 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8015200:	6053      	str	r3, [r2, #4]
  if(JPEG_ConvertorParams.ColorSpace == JPEG_YCBCR_COLORSPACE)
 8015202:	4b6f      	ldr	r3, [pc, #444]	; (80153c0 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8015204:	681b      	ldr	r3, [r3, #0]
 8015206:	2b10      	cmp	r3, #16
 8015208:	d155      	bne.n	80152b6 <JPEG_GetDecodeColorConvertFunc+0xf2>
  {
    if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_420_SUBSAMPLING)
 801520a:	4b6d      	ldr	r3, [pc, #436]	; (80153c0 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 801520c:	685b      	ldr	r3, [r3, #4]
 801520e:	2b01      	cmp	r3, #1
 8015210:	d119      	bne.n	8015246 <JPEG_GetDecodeColorConvertFunc+0x82>
    {
      *pFunction = JPEG_MCU_YCbCr420_ARGB_ConvertBlocks;
 8015212:	68bb      	ldr	r3, [r7, #8]
 8015214:	4a6b      	ldr	r2, [pc, #428]	; (80153c4 <JPEG_GetDecodeColorConvertFunc+0x200>)
 8015216:	601a      	str	r2, [r3, #0]

      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;
 8015218:	4b69      	ldr	r3, [pc, #420]	; (80153c0 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 801521a:	689b      	ldr	r3, [r3, #8]
 801521c:	f003 030f 	and.w	r3, r3, #15
 8015220:	4a67      	ldr	r2, [pc, #412]	; (80153c0 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8015222:	6153      	str	r3, [r2, #20]
      
      if(JPEG_ConvertorParams.LineOffset != 0)
 8015224:	4b66      	ldr	r3, [pc, #408]	; (80153c0 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8015226:	695b      	ldr	r3, [r3, #20]
 8015228:	2b00      	cmp	r3, #0
 801522a:	d005      	beq.n	8015238 <JPEG_GetDecodeColorConvertFunc+0x74>
      {
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;  
 801522c:	4b64      	ldr	r3, [pc, #400]	; (80153c0 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 801522e:	695b      	ldr	r3, [r3, #20]
 8015230:	f1c3 0310 	rsb	r3, r3, #16
 8015234:	4a62      	ldr	r2, [pc, #392]	; (80153c0 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8015236:	6153      	str	r3, [r2, #20]
      }
      JPEG_ConvertorParams.H_factor = 16;
 8015238:	4b61      	ldr	r3, [pc, #388]	; (80153c0 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 801523a:	2210      	movs	r2, #16
 801523c:	61da      	str	r2, [r3, #28]
      JPEG_ConvertorParams.V_factor  = 16;
 801523e:	4b60      	ldr	r3, [pc, #384]	; (80153c0 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8015240:	2210      	movs	r2, #16
 8015242:	621a      	str	r2, [r3, #32]
 8015244:	e075      	b.n	8015332 <JPEG_GetDecodeColorConvertFunc+0x16e>
    }
    else if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_422_SUBSAMPLING)
 8015246:	4b5e      	ldr	r3, [pc, #376]	; (80153c0 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8015248:	685b      	ldr	r3, [r3, #4]
 801524a:	2b02      	cmp	r3, #2
 801524c:	d119      	bne.n	8015282 <JPEG_GetDecodeColorConvertFunc+0xbe>
    {
      *pFunction =  JPEG_MCU_YCbCr422_ARGB_ConvertBlocks;
 801524e:	68bb      	ldr	r3, [r7, #8]
 8015250:	4a5d      	ldr	r2, [pc, #372]	; (80153c8 <JPEG_GetDecodeColorConvertFunc+0x204>)
 8015252:	601a      	str	r2, [r3, #0]

      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;
 8015254:	4b5a      	ldr	r3, [pc, #360]	; (80153c0 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8015256:	689b      	ldr	r3, [r3, #8]
 8015258:	f003 030f 	and.w	r3, r3, #15
 801525c:	4a58      	ldr	r2, [pc, #352]	; (80153c0 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 801525e:	6153      	str	r3, [r2, #20]
      
      if(JPEG_ConvertorParams.LineOffset != 0)
 8015260:	4b57      	ldr	r3, [pc, #348]	; (80153c0 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8015262:	695b      	ldr	r3, [r3, #20]
 8015264:	2b00      	cmp	r3, #0
 8015266:	d005      	beq.n	8015274 <JPEG_GetDecodeColorConvertFunc+0xb0>
      {
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;  
 8015268:	4b55      	ldr	r3, [pc, #340]	; (80153c0 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 801526a:	695b      	ldr	r3, [r3, #20]
 801526c:	f1c3 0310 	rsb	r3, r3, #16
 8015270:	4a53      	ldr	r2, [pc, #332]	; (80153c0 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8015272:	6153      	str	r3, [r2, #20]
      }
      JPEG_ConvertorParams.H_factor = 16;
 8015274:	4b52      	ldr	r3, [pc, #328]	; (80153c0 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8015276:	2210      	movs	r2, #16
 8015278:	61da      	str	r2, [r3, #28]
      JPEG_ConvertorParams.V_factor  = 8;
 801527a:	4b51      	ldr	r3, [pc, #324]	; (80153c0 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 801527c:	2208      	movs	r2, #8
 801527e:	621a      	str	r2, [r3, #32]
 8015280:	e057      	b.n	8015332 <JPEG_GetDecodeColorConvertFunc+0x16e>
    }
    else /*4:4:4*/
    {
      *pFunction =  JPEG_MCU_YCbCr444_ARGB_ConvertBlocks;
 8015282:	68bb      	ldr	r3, [r7, #8]
 8015284:	4a51      	ldr	r2, [pc, #324]	; (80153cc <JPEG_GetDecodeColorConvertFunc+0x208>)
 8015286:	601a      	str	r2, [r3, #0]

      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
 8015288:	4b4d      	ldr	r3, [pc, #308]	; (80153c0 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 801528a:	689b      	ldr	r3, [r3, #8]
 801528c:	f003 0307 	and.w	r3, r3, #7
 8015290:	4a4b      	ldr	r2, [pc, #300]	; (80153c0 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8015292:	6153      	str	r3, [r2, #20]
      
      if(JPEG_ConvertorParams.LineOffset != 0)
 8015294:	4b4a      	ldr	r3, [pc, #296]	; (80153c0 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8015296:	695b      	ldr	r3, [r3, #20]
 8015298:	2b00      	cmp	r3, #0
 801529a:	d005      	beq.n	80152a8 <JPEG_GetDecodeColorConvertFunc+0xe4>
      {
        JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;  
 801529c:	4b48      	ldr	r3, [pc, #288]	; (80153c0 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 801529e:	695b      	ldr	r3, [r3, #20]
 80152a0:	f1c3 0308 	rsb	r3, r3, #8
 80152a4:	4a46      	ldr	r2, [pc, #280]	; (80153c0 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 80152a6:	6153      	str	r3, [r2, #20]
      }
      JPEG_ConvertorParams.H_factor = 8;
 80152a8:	4b45      	ldr	r3, [pc, #276]	; (80153c0 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 80152aa:	2208      	movs	r2, #8
 80152ac:	61da      	str	r2, [r3, #28]
      JPEG_ConvertorParams.V_factor  = 8;
 80152ae:	4b44      	ldr	r3, [pc, #272]	; (80153c0 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 80152b0:	2208      	movs	r2, #8
 80152b2:	621a      	str	r2, [r3, #32]
 80152b4:	e03d      	b.n	8015332 <JPEG_GetDecodeColorConvertFunc+0x16e>
    }   
  }
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_GRAYSCALE_COLORSPACE)
 80152b6:	4b42      	ldr	r3, [pc, #264]	; (80153c0 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 80152b8:	681b      	ldr	r3, [r3, #0]
 80152ba:	2b00      	cmp	r3, #0
 80152bc:	d119      	bne.n	80152f2 <JPEG_GetDecodeColorConvertFunc+0x12e>
  {
    *pFunction =  JPEG_MCU_Gray_ARGB_ConvertBlocks;
 80152be:	68bb      	ldr	r3, [r7, #8]
 80152c0:	4a43      	ldr	r2, [pc, #268]	; (80153d0 <JPEG_GetDecodeColorConvertFunc+0x20c>)
 80152c2:	601a      	str	r2, [r3, #0]

    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
 80152c4:	4b3e      	ldr	r3, [pc, #248]	; (80153c0 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 80152c6:	689b      	ldr	r3, [r3, #8]
 80152c8:	f003 0307 	and.w	r3, r3, #7
 80152cc:	4a3c      	ldr	r2, [pc, #240]	; (80153c0 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 80152ce:	6153      	str	r3, [r2, #20]
      
    if(JPEG_ConvertorParams.LineOffset != 0)
 80152d0:	4b3b      	ldr	r3, [pc, #236]	; (80153c0 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 80152d2:	695b      	ldr	r3, [r3, #20]
 80152d4:	2b00      	cmp	r3, #0
 80152d6:	d005      	beq.n	80152e4 <JPEG_GetDecodeColorConvertFunc+0x120>
    {
      JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;  
 80152d8:	4b39      	ldr	r3, [pc, #228]	; (80153c0 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 80152da:	695b      	ldr	r3, [r3, #20]
 80152dc:	f1c3 0308 	rsb	r3, r3, #8
 80152e0:	4a37      	ldr	r2, [pc, #220]	; (80153c0 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 80152e2:	6153      	str	r3, [r2, #20]
    }
    JPEG_ConvertorParams.H_factor = 8;
 80152e4:	4b36      	ldr	r3, [pc, #216]	; (80153c0 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 80152e6:	2208      	movs	r2, #8
 80152e8:	61da      	str	r2, [r3, #28]
    JPEG_ConvertorParams.V_factor  = 8;
 80152ea:	4b35      	ldr	r3, [pc, #212]	; (80153c0 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 80152ec:	2208      	movs	r2, #8
 80152ee:	621a      	str	r2, [r3, #32]
 80152f0:	e01f      	b.n	8015332 <JPEG_GetDecodeColorConvertFunc+0x16e>
  }
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_CMYK_COLORSPACE)
 80152f2:	4b33      	ldr	r3, [pc, #204]	; (80153c0 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 80152f4:	681b      	ldr	r3, [r3, #0]
 80152f6:	2b30      	cmp	r3, #48	; 0x30
 80152f8:	d119      	bne.n	801532e <JPEG_GetDecodeColorConvertFunc+0x16a>
  {
    *pFunction =  JPEG_MCU_YCCK_ARGB_ConvertBlocks;
 80152fa:	68bb      	ldr	r3, [r7, #8]
 80152fc:	4a35      	ldr	r2, [pc, #212]	; (80153d4 <JPEG_GetDecodeColorConvertFunc+0x210>)
 80152fe:	601a      	str	r2, [r3, #0]

    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
 8015300:	4b2f      	ldr	r3, [pc, #188]	; (80153c0 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8015302:	689b      	ldr	r3, [r3, #8]
 8015304:	f003 0307 	and.w	r3, r3, #7
 8015308:	4a2d      	ldr	r2, [pc, #180]	; (80153c0 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 801530a:	6153      	str	r3, [r2, #20]
      
    if(JPEG_ConvertorParams.LineOffset != 0)
 801530c:	4b2c      	ldr	r3, [pc, #176]	; (80153c0 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 801530e:	695b      	ldr	r3, [r3, #20]
 8015310:	2b00      	cmp	r3, #0
 8015312:	d005      	beq.n	8015320 <JPEG_GetDecodeColorConvertFunc+0x15c>
    {
      JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;  
 8015314:	4b2a      	ldr	r3, [pc, #168]	; (80153c0 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8015316:	695b      	ldr	r3, [r3, #20]
 8015318:	f1c3 0308 	rsb	r3, r3, #8
 801531c:	4a28      	ldr	r2, [pc, #160]	; (80153c0 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 801531e:	6153      	str	r3, [r2, #20]
    }
    JPEG_ConvertorParams.H_factor = 8;
 8015320:	4b27      	ldr	r3, [pc, #156]	; (80153c0 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8015322:	2208      	movs	r2, #8
 8015324:	61da      	str	r2, [r3, #28]
    JPEG_ConvertorParams.V_factor  = 8;
 8015326:	4b26      	ldr	r3, [pc, #152]	; (80153c0 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8015328:	2208      	movs	r2, #8
 801532a:	621a      	str	r2, [r3, #32]
 801532c:	e001      	b.n	8015332 <JPEG_GetDecodeColorConvertFunc+0x16e>
  } 
  else
  {  
    return HAL_ERROR; /* Color space Not supported*/
 801532e:	2301      	movs	r3, #1
 8015330:	e040      	b.n	80153b4 <JPEG_GetDecodeColorConvertFunc+0x1f0>
  }
 
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
 8015332:	4b23      	ldr	r3, [pc, #140]	; (80153c0 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8015334:	689a      	ldr	r2, [r3, #8]
 8015336:	4b22      	ldr	r3, [pc, #136]	; (80153c0 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8015338:	695b      	ldr	r3, [r3, #20]
 801533a:	4413      	add	r3, r2
 801533c:	4a20      	ldr	r2, [pc, #128]	; (80153c0 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 801533e:	6253      	str	r3, [r2, #36]	; 0x24
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
 8015340:	4b1f      	ldr	r3, [pc, #124]	; (80153c0 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8015342:	689b      	ldr	r3, [r3, #8]
 8015344:	005b      	lsls	r3, r3, #1
 8015346:	4a1e      	ldr	r2, [pc, #120]	; (80153c0 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8015348:	6293      	str	r3, [r2, #40]	; 0x28
  
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
 801534a:	4b1d      	ldr	r3, [pc, #116]	; (80153c0 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 801534c:	689a      	ldr	r2, [r3, #8]
 801534e:	4b1c      	ldr	r3, [pc, #112]	; (80153c0 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8015350:	69db      	ldr	r3, [r3, #28]
 8015352:	fbb2 f3f3 	udiv	r3, r2, r3
 8015356:	617b      	str	r3, [r7, #20]
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
 8015358:	4b19      	ldr	r3, [pc, #100]	; (80153c0 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 801535a:	689b      	ldr	r3, [r3, #8]
 801535c:	4a18      	ldr	r2, [pc, #96]	; (80153c0 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 801535e:	69d2      	ldr	r2, [r2, #28]
 8015360:	fbb3 f1f2 	udiv	r1, r3, r2
 8015364:	fb01 f202 	mul.w	r2, r1, r2
 8015368:	1a9b      	subs	r3, r3, r2
 801536a:	2b00      	cmp	r3, #0
 801536c:	d002      	beq.n	8015374 <JPEG_GetDecodeColorConvertFunc+0x1b0>
  {
    hMCU++; /*+1 for horizenatl incomplete MCU */                
 801536e:	697b      	ldr	r3, [r7, #20]
 8015370:	3301      	adds	r3, #1
 8015372:	617b      	str	r3, [r7, #20]
  }

  vMCU = (JPEG_ConvertorParams.ImageHeight / JPEG_ConvertorParams.V_factor);
 8015374:	4b12      	ldr	r3, [pc, #72]	; (80153c0 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8015376:	68da      	ldr	r2, [r3, #12]
 8015378:	4b11      	ldr	r3, [pc, #68]	; (80153c0 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 801537a:	6a1b      	ldr	r3, [r3, #32]
 801537c:	fbb2 f3f3 	udiv	r3, r2, r3
 8015380:	613b      	str	r3, [r7, #16]
  if((JPEG_ConvertorParams.ImageHeight % JPEG_ConvertorParams.V_factor) != 0)
 8015382:	4b0f      	ldr	r3, [pc, #60]	; (80153c0 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8015384:	68db      	ldr	r3, [r3, #12]
 8015386:	4a0e      	ldr	r2, [pc, #56]	; (80153c0 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8015388:	6a12      	ldr	r2, [r2, #32]
 801538a:	fbb3 f1f2 	udiv	r1, r3, r2
 801538e:	fb01 f202 	mul.w	r2, r1, r2
 8015392:	1a9b      	subs	r3, r3, r2
 8015394:	2b00      	cmp	r3, #0
 8015396:	d002      	beq.n	801539e <JPEG_GetDecodeColorConvertFunc+0x1da>
  {
    vMCU++; /*+1 for vertical incomplete MCU */                
 8015398:	693b      	ldr	r3, [r7, #16]
 801539a:	3301      	adds	r3, #1
 801539c:	613b      	str	r3, [r7, #16]
  }
  JPEG_ConvertorParams.MCU_Total_Nb = (hMCU * vMCU);
 801539e:	697b      	ldr	r3, [r7, #20]
 80153a0:	693a      	ldr	r2, [r7, #16]
 80153a2:	fb02 f303 	mul.w	r3, r2, r3
 80153a6:	4a06      	ldr	r2, [pc, #24]	; (80153c0 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 80153a8:	62d3      	str	r3, [r2, #44]	; 0x2c
  *ImageNbMCUs = JPEG_ConvertorParams.MCU_Total_Nb;
 80153aa:	4b05      	ldr	r3, [pc, #20]	; (80153c0 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 80153ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80153ae:	687b      	ldr	r3, [r7, #4]
 80153b0:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80153b2:	2300      	movs	r3, #0
}
 80153b4:	4618      	mov	r0, r3
 80153b6:	371c      	adds	r7, #28
 80153b8:	46bd      	mov	sp, r7
 80153ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153be:	4770      	bx	lr
 80153c0:	20023390 	.word	0x20023390
 80153c4:	080148f9 	.word	0x080148f9
 80153c8:	08014be1 	.word	0x08014be1
 80153cc:	08014de5 	.word	0x08014de5
 80153d0:	08014f75 	.word	0x08014f75
 80153d4:	0801506d 	.word	0x0801506d

080153d8 <_ZN8touchgfx4RectaNERKS0_>:
 80153d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80153dc:	f9b1 7000 	ldrsh.w	r7, [r1]
 80153e0:	888c      	ldrh	r4, [r1, #4]
 80153e2:	f9b0 9000 	ldrsh.w	r9, [r0]
 80153e6:	443c      	add	r4, r7
 80153e8:	b2a4      	uxth	r4, r4
 80153ea:	fa0f f884 	sxth.w	r8, r4
 80153ee:	45c1      	cmp	r9, r8
 80153f0:	da2f      	bge.n	8015452 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80153f2:	8882      	ldrh	r2, [r0, #4]
 80153f4:	444a      	add	r2, r9
 80153f6:	b292      	uxth	r2, r2
 80153f8:	fa0f fe82 	sxth.w	lr, r2
 80153fc:	4577      	cmp	r7, lr
 80153fe:	da28      	bge.n	8015452 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8015400:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8015404:	88cb      	ldrh	r3, [r1, #6]
 8015406:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 801540a:	442b      	add	r3, r5
 801540c:	b21b      	sxth	r3, r3
 801540e:	429e      	cmp	r6, r3
 8015410:	da1f      	bge.n	8015452 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8015412:	88c3      	ldrh	r3, [r0, #6]
 8015414:	4433      	add	r3, r6
 8015416:	b29b      	uxth	r3, r3
 8015418:	fa0f fc83 	sxth.w	ip, r3
 801541c:	4565      	cmp	r5, ip
 801541e:	da18      	bge.n	8015452 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8015420:	454f      	cmp	r7, r9
 8015422:	bfb8      	it	lt
 8015424:	464f      	movlt	r7, r9
 8015426:	42b5      	cmp	r5, r6
 8015428:	bfb8      	it	lt
 801542a:	4635      	movlt	r5, r6
 801542c:	45f0      	cmp	r8, lr
 801542e:	bfd8      	it	le
 8015430:	4622      	movle	r2, r4
 8015432:	1bd2      	subs	r2, r2, r7
 8015434:	8082      	strh	r2, [r0, #4]
 8015436:	884a      	ldrh	r2, [r1, #2]
 8015438:	88c9      	ldrh	r1, [r1, #6]
 801543a:	8007      	strh	r7, [r0, #0]
 801543c:	440a      	add	r2, r1
 801543e:	8045      	strh	r5, [r0, #2]
 8015440:	b292      	uxth	r2, r2
 8015442:	b211      	sxth	r1, r2
 8015444:	458c      	cmp	ip, r1
 8015446:	bfa8      	it	ge
 8015448:	4613      	movge	r3, r2
 801544a:	1b5b      	subs	r3, r3, r5
 801544c:	80c3      	strh	r3, [r0, #6]
 801544e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015452:	2300      	movs	r3, #0
 8015454:	8003      	strh	r3, [r0, #0]
 8015456:	8043      	strh	r3, [r0, #2]
 8015458:	8083      	strh	r3, [r0, #4]
 801545a:	80c3      	strh	r3, [r0, #6]
 801545c:	e7f7      	b.n	801544e <_ZN8touchgfx4RectaNERKS0_+0x76>

0801545e <_ZNK8touchgfx4Rect7isEmptyEv>:
 801545e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8015462:	2b00      	cmp	r3, #0
 8015464:	dd06      	ble.n	8015474 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 8015466:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 801546a:	2800      	cmp	r0, #0
 801546c:	bfcc      	ite	gt
 801546e:	2000      	movgt	r0, #0
 8015470:	2001      	movle	r0, #1
 8015472:	4770      	bx	lr
 8015474:	2001      	movs	r0, #1
 8015476:	4770      	bx	lr

08015478 <_ZN8touchgfx3HAL15InvalidateCacheEv>:
 8015478:	4770      	bx	lr

0801547a <_ZN8touchgfx3HAL10FlushCacheEv>:
 801547a:	4770      	bx	lr

0801547c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 801547c:	6803      	ldr	r3, [r0, #0]
 801547e:	b513      	push	{r0, r1, r4, lr}
 8015480:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
 8015484:	2300      	movs	r3, #0
 8015486:	e9cd 3300 	strd	r3, r3, [sp]
 801548a:	466b      	mov	r3, sp
 801548c:	47a0      	blx	r4
 801548e:	b002      	add	sp, #8
 8015490:	bd10      	pop	{r4, pc}

08015492 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8015492:	2301      	movs	r3, #1
 8015494:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8015498:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 801549c:	4770      	bx	lr

0801549e <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 801549e:	2301      	movs	r3, #1
 80154a0:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 80154a4:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 80154a8:	4770      	bx	lr

080154aa <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 80154aa:	6843      	ldr	r3, [r0, #4]
 80154ac:	2201      	movs	r2, #1
 80154ae:	725a      	strb	r2, [r3, #9]
 80154b0:	6840      	ldr	r0, [r0, #4]
 80154b2:	6803      	ldr	r3, [r0, #0]
 80154b4:	691b      	ldr	r3, [r3, #16]
 80154b6:	4718      	bx	r3

080154b8 <_ZN8touchgfx3HAL8flushDMAEv>:
 80154b8:	6840      	ldr	r0, [r0, #4]
 80154ba:	6803      	ldr	r3, [r0, #0]
 80154bc:	689b      	ldr	r3, [r3, #8]
 80154be:	4718      	bx	r3

080154c0 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 80154c0:	b530      	push	{r4, r5, lr}
 80154c2:	b08b      	sub	sp, #44	; 0x2c
 80154c4:	6804      	ldr	r4, [r0, #0]
 80154c6:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 80154ca:	9509      	str	r5, [sp, #36]	; 0x24
 80154cc:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 80154d0:	9508      	str	r5, [sp, #32]
 80154d2:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 80154d6:	9507      	str	r5, [sp, #28]
 80154d8:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 80154dc:	9506      	str	r5, [sp, #24]
 80154de:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 80154e2:	9505      	str	r5, [sp, #20]
 80154e4:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 80154e8:	9504      	str	r5, [sp, #16]
 80154ea:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 80154ee:	9503      	str	r5, [sp, #12]
 80154f0:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 80154f4:	9502      	str	r5, [sp, #8]
 80154f6:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 80154fa:	e9cd 3500 	strd	r3, r5, [sp]
 80154fe:	4613      	mov	r3, r2
 8015500:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 8015502:	2200      	movs	r2, #0
 8015504:	47a0      	blx	r4
 8015506:	b00b      	add	sp, #44	; 0x2c
 8015508:	bd30      	pop	{r4, r5, pc}
	...

0801550c <_ZN8touchgfx3HAL10beginFrameEv>:
 801550c:	4b04      	ldr	r3, [pc, #16]	; (8015520 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 801550e:	781b      	ldrb	r3, [r3, #0]
 8015510:	b123      	cbz	r3, 801551c <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 8015512:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 8015516:	f080 0001 	eor.w	r0, r0, #1
 801551a:	4770      	bx	lr
 801551c:	2001      	movs	r0, #1
 801551e:	4770      	bx	lr
 8015520:	200243da 	.word	0x200243da

08015524 <_ZN8touchgfx3HAL8endFrameEv>:
 8015524:	b510      	push	{r4, lr}
 8015526:	4604      	mov	r4, r0
 8015528:	6840      	ldr	r0, [r0, #4]
 801552a:	6803      	ldr	r3, [r0, #0]
 801552c:	689b      	ldr	r3, [r3, #8]
 801552e:	4798      	blx	r3
 8015530:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 8015534:	b113      	cbz	r3, 801553c <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8015536:	2301      	movs	r3, #1
 8015538:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 801553c:	bd10      	pop	{r4, pc}

0801553e <_ZN8touchgfx3HAL10initializeEv>:
 801553e:	b510      	push	{r4, lr}
 8015540:	4604      	mov	r4, r0
 8015542:	f7fb ff13 	bl	801136c <_ZN8touchgfx10OSWrappers10initializeEv>
 8015546:	f7fa fb9d 	bl	800fc84 <_ZN8touchgfx4GPIO4initEv>
 801554a:	6860      	ldr	r0, [r4, #4]
 801554c:	6803      	ldr	r3, [r0, #0]
 801554e:	68db      	ldr	r3, [r3, #12]
 8015550:	4798      	blx	r3
 8015552:	68e0      	ldr	r0, [r4, #12]
 8015554:	6803      	ldr	r3, [r0, #0]
 8015556:	689b      	ldr	r3, [r3, #8]
 8015558:	4798      	blx	r3
 801555a:	6823      	ldr	r3, [r4, #0]
 801555c:	4620      	mov	r0, r4
 801555e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015560:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015564:	4718      	bx	r3

08015566 <_ZN8touchgfx3HAL9taskEntryEv>:
 8015566:	b508      	push	{r3, lr}
 8015568:	6803      	ldr	r3, [r0, #0]
 801556a:	4604      	mov	r4, r0
 801556c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015570:	4798      	blx	r3
 8015572:	6823      	ldr	r3, [r4, #0]
 8015574:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015576:	4620      	mov	r0, r4
 8015578:	4798      	blx	r3
 801557a:	f7fb ff5d 	bl	8011438 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 801557e:	6823      	ldr	r3, [r4, #0]
 8015580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015582:	e7f8      	b.n	8015576 <_ZN8touchgfx3HAL9taskEntryEv+0x10>

08015584 <_ZN8touchgfx3HAL4tickEv>:
 8015584:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8015586:	6803      	ldr	r3, [r0, #0]
 8015588:	4604      	mov	r4, r0
 801558a:	4d5b      	ldr	r5, [pc, #364]	; (80156f8 <_ZN8touchgfx3HAL4tickEv+0x174>)
 801558c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8015590:	4798      	blx	r3
 8015592:	2800      	cmp	r0, #0
 8015594:	f000 8095 	beq.w	80156c2 <_ZN8touchgfx3HAL4tickEv+0x13e>
 8015598:	2001      	movs	r0, #1
 801559a:	2600      	movs	r6, #0
 801559c:	f7fa fb7a 	bl	800fc94 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 80155a0:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 80155a4:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 80155a8:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 80155ac:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 80155b0:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 80155b4:	b133      	cbz	r3, 80155c4 <_ZN8touchgfx3HAL4tickEv+0x40>
 80155b6:	6823      	ldr	r3, [r4, #0]
 80155b8:	4620      	mov	r0, r4
 80155ba:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80155be:	4798      	blx	r3
 80155c0:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 80155c4:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 80155c8:	2601      	movs	r6, #1
 80155ca:	6862      	ldr	r2, [r4, #4]
 80155cc:	f083 0301 	eor.w	r3, r3, #1
 80155d0:	702e      	strb	r6, [r5, #0]
 80155d2:	7253      	strb	r3, [r2, #9]
 80155d4:	f001 fd06 	bl	8016fe4 <_ZN8touchgfx11Application11getInstanceEv>
 80155d8:	6803      	ldr	r3, [r0, #0]
 80155da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80155dc:	4798      	blx	r3
 80155de:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 80155e2:	b90b      	cbnz	r3, 80155e8 <_ZN8touchgfx3HAL4tickEv+0x64>
 80155e4:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 80155e8:	f001 fcfc 	bl	8016fe4 <_ZN8touchgfx11Application11getInstanceEv>
 80155ec:	6803      	ldr	r3, [r0, #0]
 80155ee:	695b      	ldr	r3, [r3, #20]
 80155f0:	4798      	blx	r3
 80155f2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80155f4:	6803      	ldr	r3, [r0, #0]
 80155f6:	691b      	ldr	r3, [r3, #16]
 80155f8:	4798      	blx	r3
 80155fa:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 80155fe:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 8015602:	3b01      	subs	r3, #1
 8015604:	b2db      	uxtb	r3, r3
 8015606:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 801560a:	b10a      	cbz	r2, 8015610 <_ZN8touchgfx3HAL4tickEv+0x8c>
 801560c:	2b00      	cmp	r3, #0
 801560e:	d1eb      	bne.n	80155e8 <_ZN8touchgfx3HAL4tickEv+0x64>
 8015610:	4a3a      	ldr	r2, [pc, #232]	; (80156fc <_ZN8touchgfx3HAL4tickEv+0x178>)
 8015612:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 8015616:	7813      	ldrb	r3, [r2, #0]
 8015618:	3301      	adds	r3, #1
 801561a:	b25b      	sxtb	r3, r3
 801561c:	4299      	cmp	r1, r3
 801561e:	7013      	strb	r3, [r2, #0]
 8015620:	dc10      	bgt.n	8015644 <_ZN8touchgfx3HAL4tickEv+0xc0>
 8015622:	2300      	movs	r3, #0
 8015624:	68e0      	ldr	r0, [r4, #12]
 8015626:	a902      	add	r1, sp, #8
 8015628:	7013      	strb	r3, [r2, #0]
 801562a:	aa03      	add	r2, sp, #12
 801562c:	6803      	ldr	r3, [r0, #0]
 801562e:	68db      	ldr	r3, [r3, #12]
 8015630:	4798      	blx	r3
 8015632:	6823      	ldr	r3, [r4, #0]
 8015634:	2800      	cmp	r0, #0
 8015636:	d050      	beq.n	80156da <_ZN8touchgfx3HAL4tickEv+0x156>
 8015638:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 801563c:	4620      	mov	r0, r4
 801563e:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8015642:	4798      	blx	r3
 8015644:	2300      	movs	r3, #0
 8015646:	6960      	ldr	r0, [r4, #20]
 8015648:	f88d 3007 	strb.w	r3, [sp, #7]
 801564c:	b158      	cbz	r0, 8015666 <_ZN8touchgfx3HAL4tickEv+0xe2>
 801564e:	6803      	ldr	r3, [r0, #0]
 8015650:	f10d 0107 	add.w	r1, sp, #7
 8015654:	68db      	ldr	r3, [r3, #12]
 8015656:	4798      	blx	r3
 8015658:	b128      	cbz	r0, 8015666 <_ZN8touchgfx3HAL4tickEv+0xe2>
 801565a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801565c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8015660:	6803      	ldr	r3, [r0, #0]
 8015662:	68db      	ldr	r3, [r3, #12]
 8015664:	4798      	blx	r3
 8015666:	f104 001c 	add.w	r0, r4, #28
 801566a:	f004 fe4b 	bl	801a304 <_ZN8touchgfx8Gestures4tickEv>
 801566e:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 8015672:	b30b      	cbz	r3, 80156b8 <_ZN8touchgfx3HAL4tickEv+0x134>
 8015674:	6920      	ldr	r0, [r4, #16]
 8015676:	6803      	ldr	r3, [r0, #0]
 8015678:	691b      	ldr	r3, [r3, #16]
 801567a:	4798      	blx	r3
 801567c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801567e:	4606      	mov	r6, r0
 8015680:	b903      	cbnz	r3, 8015684 <_ZN8touchgfx3HAL4tickEv+0x100>
 8015682:	6720      	str	r0, [r4, #112]	; 0x70
 8015684:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8015686:	4a1e      	ldr	r2, [pc, #120]	; (8015700 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8015688:	1af3      	subs	r3, r6, r3
 801568a:	4293      	cmp	r3, r2
 801568c:	d914      	bls.n	80156b8 <_ZN8touchgfx3HAL4tickEv+0x134>
 801568e:	6920      	ldr	r0, [r4, #16]
 8015690:	6803      	ldr	r3, [r0, #0]
 8015692:	699b      	ldr	r3, [r3, #24]
 8015694:	4798      	blx	r3
 8015696:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8015698:	2264      	movs	r2, #100	; 0x64
 801569a:	1af3      	subs	r3, r6, r3
 801569c:	fbb3 f3f2 	udiv	r3, r3, r2
 80156a0:	fbb0 f0f3 	udiv	r0, r0, r3
 80156a4:	2800      	cmp	r0, #0
 80156a6:	dc1d      	bgt.n	80156e4 <_ZN8touchgfx3HAL4tickEv+0x160>
 80156a8:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 80156ac:	6920      	ldr	r0, [r4, #16]
 80156ae:	2100      	movs	r1, #0
 80156b0:	6803      	ldr	r3, [r0, #0]
 80156b2:	69db      	ldr	r3, [r3, #28]
 80156b4:	4798      	blx	r3
 80156b6:	6726      	str	r6, [r4, #112]	; 0x70
 80156b8:	f001 fc94 	bl	8016fe4 <_ZN8touchgfx11Application11getInstanceEv>
 80156bc:	6803      	ldr	r3, [r0, #0]
 80156be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80156c0:	4798      	blx	r3
 80156c2:	6823      	ldr	r3, [r4, #0]
 80156c4:	4620      	mov	r0, r4
 80156c6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80156ca:	4798      	blx	r3
 80156cc:	2001      	movs	r0, #1
 80156ce:	f7fa fb17 	bl	800fd00 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 80156d2:	2300      	movs	r3, #0
 80156d4:	702b      	strb	r3, [r5, #0]
 80156d6:	b004      	add	sp, #16
 80156d8:	bd70      	pop	{r4, r5, r6, pc}
 80156da:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80156de:	4620      	mov	r0, r4
 80156e0:	4798      	blx	r3
 80156e2:	e7af      	b.n	8015644 <_ZN8touchgfx3HAL4tickEv+0xc0>
 80156e4:	2863      	cmp	r0, #99	; 0x63
 80156e6:	bfcb      	itete	gt
 80156e8:	2300      	movgt	r3, #0
 80156ea:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 80156ee:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 80156f2:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 80156f6:	e7d9      	b.n	80156ac <_ZN8touchgfx3HAL4tickEv+0x128>
 80156f8:	200243e0 	.word	0x200243e0
 80156fc:	200243e1 	.word	0x200243e1
 8015700:	05f5e100 	.word	0x05f5e100

08015704 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8015704:	f7fb be74 	b.w	80113f0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08015708 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8015708:	6581      	str	r1, [r0, #88]	; 0x58
 801570a:	301c      	adds	r0, #28
 801570c:	f004 bdf8 	b.w	801a300 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08015710 <_ZN8touchgfx3HAL5touchEll>:
 8015710:	b530      	push	{r4, r5, lr}
 8015712:	b087      	sub	sp, #28
 8015714:	4604      	mov	r4, r0
 8015716:	a804      	add	r0, sp, #16
 8015718:	e9cd 1204 	strd	r1, r2, [sp, #16]
 801571c:	f001 fbbc 	bl	8016e98 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8015720:	9b04      	ldr	r3, [sp, #16]
 8015722:	a906      	add	r1, sp, #24
 8015724:	a803      	add	r0, sp, #12
 8015726:	f8ad 300c 	strh.w	r3, [sp, #12]
 801572a:	9b05      	ldr	r3, [sp, #20]
 801572c:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8015730:	f001 fc04 	bl	8016f3c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8015734:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 8015738:	f104 001c 	add.w	r0, r4, #28
 801573c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8015740:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8015744:	b189      	cbz	r1, 801576a <_ZN8touchgfx3HAL5touchEll+0x5a>
 8015746:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 801574a:	9300      	str	r3, [sp, #0]
 801574c:	4613      	mov	r3, r2
 801574e:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8015752:	462a      	mov	r2, r5
 8015754:	f004 fde4 	bl	801a320 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8015758:	b128      	cbz	r0, 8015766 <_ZN8touchgfx3HAL5touchEll+0x56>
 801575a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801575e:	65e3      	str	r3, [r4, #92]	; 0x5c
 8015760:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8015764:	6623      	str	r3, [r4, #96]	; 0x60
 8015766:	b007      	add	sp, #28
 8015768:	bd30      	pop	{r4, r5, pc}
 801576a:	f004 fe19 	bl	801a3a0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 801576e:	2301      	movs	r3, #1
 8015770:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8015774:	e7f1      	b.n	801575a <_ZN8touchgfx3HAL5touchEll+0x4a>

08015776 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 8015776:	b510      	push	{r4, lr}
 8015778:	2b00      	cmp	r3, #0
 801577a:	d046      	beq.n	801580a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 801577c:	ea81 0002 	eor.w	r0, r1, r2
 8015780:	07c4      	lsls	r4, r0, #31
 8015782:	d508      	bpl.n	8015796 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8015784:	440b      	add	r3, r1
 8015786:	3a01      	subs	r2, #1
 8015788:	428b      	cmp	r3, r1
 801578a:	d93e      	bls.n	801580a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 801578c:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8015790:	f801 0b01 	strb.w	r0, [r1], #1
 8015794:	e7f8      	b.n	8015788 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 8015796:	07d0      	lsls	r0, r2, #31
 8015798:	bf42      	ittt	mi
 801579a:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 801579e:	f103 33ff 	addmi.w	r3, r3, #4294967295	; 0xffffffff
 80157a2:	f801 0b01 	strbmi.w	r0, [r1], #1
 80157a6:	2b01      	cmp	r3, #1
 80157a8:	d911      	bls.n	80157ce <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 80157aa:	ea81 0402 	eor.w	r4, r1, r2
 80157ae:	4610      	mov	r0, r2
 80157b0:	07a4      	lsls	r4, r4, #30
 80157b2:	d022      	beq.n	80157fa <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 80157b4:	f023 0401 	bic.w	r4, r3, #1
 80157b8:	440c      	add	r4, r1
 80157ba:	428c      	cmp	r4, r1
 80157bc:	4602      	mov	r2, r0
 80157be:	d904      	bls.n	80157ca <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 80157c0:	8812      	ldrh	r2, [r2, #0]
 80157c2:	3002      	adds	r0, #2
 80157c4:	f821 2b02 	strh.w	r2, [r1], #2
 80157c8:	e7f7      	b.n	80157ba <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 80157ca:	f003 0301 	and.w	r3, r3, #1
 80157ce:	f023 0003 	bic.w	r0, r3, #3
 80157d2:	4408      	add	r0, r1
 80157d4:	4288      	cmp	r0, r1
 80157d6:	4614      	mov	r4, r2
 80157d8:	d904      	bls.n	80157e4 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 80157da:	6824      	ldr	r4, [r4, #0]
 80157dc:	3204      	adds	r2, #4
 80157de:	f841 4b04 	str.w	r4, [r1], #4
 80157e2:	e7f7      	b.n	80157d4 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 80157e4:	f003 0303 	and.w	r3, r3, #3
 80157e8:	3a01      	subs	r2, #1
 80157ea:	440b      	add	r3, r1
 80157ec:	428b      	cmp	r3, r1
 80157ee:	d90c      	bls.n	801580a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 80157f0:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80157f4:	f801 0b01 	strb.w	r0, [r1], #1
 80157f8:	e7f8      	b.n	80157ec <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 80157fa:	0790      	lsls	r0, r2, #30
 80157fc:	d0e7      	beq.n	80157ce <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 80157fe:	f832 0b02 	ldrh.w	r0, [r2], #2
 8015802:	3b02      	subs	r3, #2
 8015804:	f821 0b02 	strh.w	r0, [r1], #2
 8015808:	e7e1      	b.n	80157ce <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 801580a:	2001      	movs	r0, #1
 801580c:	bd10      	pop	{r4, pc}

0801580e <_ZN8touchgfx3HAL7noTouchEv>:
 801580e:	b510      	push	{r4, lr}
 8015810:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 8015814:	4604      	mov	r4, r0
 8015816:	b153      	cbz	r3, 801582e <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8015818:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 801581c:	2101      	movs	r1, #1
 801581e:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 8015822:	301c      	adds	r0, #28
 8015824:	f004 fdbc 	bl	801a3a0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8015828:	2300      	movs	r3, #0
 801582a:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 801582e:	bd10      	pop	{r4, pc}

08015830 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8015830:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015834:	b085      	sub	sp, #20
 8015836:	4604      	mov	r4, r0
 8015838:	2000      	movs	r0, #0
 801583a:	4699      	mov	r9, r3
 801583c:	ad04      	add	r5, sp, #16
 801583e:	460f      	mov	r7, r1
 8015840:	4690      	mov	r8, r2
 8015842:	f845 0d04 	str.w	r0, [r5, #-4]!
 8015846:	69a0      	ldr	r0, [r4, #24]
 8015848:	6806      	ldr	r6, [r0, #0]
 801584a:	9501      	str	r5, [sp, #4]
 801584c:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 8015850:	9500      	str	r5, [sp, #0]
 8015852:	6835      	ldr	r5, [r6, #0]
 8015854:	47a8      	blx	r5
 8015856:	4d10      	ldr	r5, [pc, #64]	; (8015898 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 8015858:	4606      	mov	r6, r0
 801585a:	f8a5 9000 	strh.w	r9, [r5]
 801585e:	f7fa f829 	bl	800f8b4 <_ZN8touchgfx3HAL3lcdEv>
 8015862:	6803      	ldr	r3, [r0, #0]
 8015864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015866:	4798      	blx	r3
 8015868:	b128      	cbz	r0, 8015876 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 801586a:	2801      	cmp	r0, #1
 801586c:	d00b      	beq.n	8015886 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 801586e:	4630      	mov	r0, r6
 8015870:	b005      	add	sp, #20
 8015872:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015876:	882b      	ldrh	r3, [r5, #0]
 8015878:	fb08 7203 	mla	r2, r8, r3, r7
 801587c:	9b03      	ldr	r3, [sp, #12]
 801587e:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8015882:	63e3      	str	r3, [r4, #60]	; 0x3c
 8015884:	e7f3      	b.n	801586e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8015886:	882a      	ldrh	r2, [r5, #0]
 8015888:	9b03      	ldr	r3, [sp, #12]
 801588a:	fb08 7202 	mla	r2, r8, r2, r7
 801588e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8015892:	1a9a      	subs	r2, r3, r2
 8015894:	63e2      	str	r2, [r4, #60]	; 0x3c
 8015896:	e7ea      	b.n	801586e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8015898:	200243d6 	.word	0x200243d6

0801589c <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 801589c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801589e:	b08b      	sub	sp, #44	; 0x2c
 80158a0:	4617      	mov	r7, r2
 80158a2:	4604      	mov	r4, r0
 80158a4:	460e      	mov	r6, r1
 80158a6:	461d      	mov	r5, r3
 80158a8:	f7fa f804 	bl	800f8b4 <_ZN8touchgfx3HAL3lcdEv>
 80158ac:	6803      	ldr	r3, [r0, #0]
 80158ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80158b0:	4798      	blx	r3
 80158b2:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 80158b6:	9007      	str	r0, [sp, #28]
 80158b8:	4631      	mov	r1, r6
 80158ba:	6822      	ldr	r2, [r4, #0]
 80158bc:	e9cd 0308 	strd	r0, r3, [sp, #32]
 80158c0:	4b0c      	ldr	r3, [pc, #48]	; (80158f4 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 80158c2:	4620      	mov	r0, r4
 80158c4:	881b      	ldrh	r3, [r3, #0]
 80158c6:	9306      	str	r3, [sp, #24]
 80158c8:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 80158cc:	9305      	str	r3, [sp, #20]
 80158ce:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 80158d2:	9304      	str	r3, [sp, #16]
 80158d4:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80158d8:	9303      	str	r3, [sp, #12]
 80158da:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 80158de:	9302      	str	r3, [sp, #8]
 80158e0:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80158e4:	e9cd 5300 	strd	r5, r3, [sp]
 80158e8:	463b      	mov	r3, r7
 80158ea:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 80158ec:	2200      	movs	r2, #0
 80158ee:	47a8      	blx	r5
 80158f0:	b00b      	add	sp, #44	; 0x2c
 80158f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80158f4:	200243d6 	.word	0x200243d6

080158f8 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 80158f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80158fc:	4698      	mov	r8, r3
 80158fe:	6803      	ldr	r3, [r0, #0]
 8015900:	b08b      	sub	sp, #44	; 0x2c
 8015902:	4617      	mov	r7, r2
 8015904:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8015906:	460e      	mov	r6, r1
 8015908:	4b13      	ldr	r3, [pc, #76]	; (8015958 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 801590a:	4604      	mov	r4, r0
 801590c:	f8b3 9000 	ldrh.w	r9, [r3]
 8015910:	f7f9 ffd0 	bl	800f8b4 <_ZN8touchgfx3HAL3lcdEv>
 8015914:	6803      	ldr	r3, [r0, #0]
 8015916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015918:	4798      	blx	r3
 801591a:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 801591e:	2200      	movs	r2, #0
 8015920:	4631      	mov	r1, r6
 8015922:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8015926:	2302      	movs	r3, #2
 8015928:	4620      	mov	r0, r4
 801592a:	e9cd 9306 	strd	r9, r3, [sp, #24]
 801592e:	2301      	movs	r3, #1
 8015930:	9305      	str	r3, [sp, #20]
 8015932:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8015936:	9304      	str	r3, [sp, #16]
 8015938:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 801593c:	9303      	str	r3, [sp, #12]
 801593e:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8015942:	9302      	str	r3, [sp, #8]
 8015944:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8015948:	e9cd 8300 	strd	r8, r3, [sp]
 801594c:	463b      	mov	r3, r7
 801594e:	47a8      	blx	r5
 8015950:	b00b      	add	sp, #44	; 0x2c
 8015952:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015956:	bf00      	nop
 8015958:	200243d6 	.word	0x200243d6

0801595c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 801595c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015960:	4698      	mov	r8, r3
 8015962:	6803      	ldr	r3, [r0, #0]
 8015964:	b087      	sub	sp, #28
 8015966:	460e      	mov	r6, r1
 8015968:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 801596a:	4617      	mov	r7, r2
 801596c:	4b0f      	ldr	r3, [pc, #60]	; (80159ac <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 801596e:	4604      	mov	r4, r0
 8015970:	f8b3 9000 	ldrh.w	r9, [r3]
 8015974:	f7f9 ff9e 	bl	800f8b4 <_ZN8touchgfx3HAL3lcdEv>
 8015978:	6803      	ldr	r3, [r0, #0]
 801597a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801597c:	4798      	blx	r3
 801597e:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 8015982:	463a      	mov	r2, r7
 8015984:	4631      	mov	r1, r6
 8015986:	f8cd 900c 	str.w	r9, [sp, #12]
 801598a:	e9cd 0304 	strd	r0, r3, [sp, #16]
 801598e:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8015992:	4620      	mov	r0, r4
 8015994:	9302      	str	r3, [sp, #8]
 8015996:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 801599a:	9301      	str	r3, [sp, #4]
 801599c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80159a0:	9300      	str	r3, [sp, #0]
 80159a2:	4643      	mov	r3, r8
 80159a4:	47a8      	blx	r5
 80159a6:	b007      	add	sp, #28
 80159a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80159ac:	200243d6 	.word	0x200243d6

080159b0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 80159b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80159b4:	4604      	mov	r4, r0
 80159b6:	b08f      	sub	sp, #60	; 0x3c
 80159b8:	4610      	mov	r0, r2
 80159ba:	460d      	mov	r5, r1
 80159bc:	4691      	mov	r9, r2
 80159be:	461e      	mov	r6, r3
 80159c0:	f002 fc10 	bl	80181e4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 80159c4:	2800      	cmp	r0, #0
 80159c6:	f000 809d 	beq.w	8015b04 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 80159ca:	6823      	ldr	r3, [r4, #0]
 80159cc:	4620      	mov	r0, r4
 80159ce:	f8df b198 	ldr.w	fp, [pc, #408]	; 8015b68 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 80159d2:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 80159d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80159d8:	4798      	blx	r3
 80159da:	6823      	ldr	r3, [r4, #0]
 80159dc:	4620      	mov	r0, r4
 80159de:	f8df a18c 	ldr.w	sl, [pc, #396]	; 8015b6c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 80159e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80159e4:	4798      	blx	r3
 80159e6:	f8bb 3000 	ldrh.w	r3, [fp]
 80159ea:	4f5c      	ldr	r7, [pc, #368]	; (8015b5c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 80159ec:	9301      	str	r3, [sp, #4]
 80159ee:	f8ba 3000 	ldrh.w	r3, [sl]
 80159f2:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 80159f6:	4640      	mov	r0, r8
 80159f8:	9302      	str	r3, [sp, #8]
 80159fa:	883b      	ldrh	r3, [r7, #0]
 80159fc:	9303      	str	r3, [sp, #12]
 80159fe:	4b58      	ldr	r3, [pc, #352]	; (8015b60 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8015a00:	881a      	ldrh	r2, [r3, #0]
 8015a02:	9305      	str	r3, [sp, #20]
 8015a04:	9204      	str	r2, [sp, #16]
 8015a06:	f002 fbf9 	bl	80181fc <_ZNK8touchgfx6Bitmap8getWidthEv>
 8015a0a:	8038      	strh	r0, [r7, #0]
 8015a0c:	4640      	mov	r0, r8
 8015a0e:	f002 fc29 	bl	8018264 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8015a12:	9b05      	ldr	r3, [sp, #20]
 8015a14:	b280      	uxth	r0, r0
 8015a16:	8018      	strh	r0, [r3, #0]
 8015a18:	4b52      	ldr	r3, [pc, #328]	; (8015b64 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 8015a1a:	781b      	ldrb	r3, [r3, #0]
 8015a1c:	2b00      	cmp	r3, #0
 8015a1e:	d174      	bne.n	8015b0a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 8015a20:	883b      	ldrh	r3, [r7, #0]
 8015a22:	f8aa 0000 	strh.w	r0, [sl]
 8015a26:	f8ab 3000 	strh.w	r3, [fp]
 8015a2a:	4648      	mov	r0, r9
 8015a2c:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 8015a30:	f002 fbd8 	bl	80181e4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8015a34:	2200      	movs	r2, #0
 8015a36:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 8015a3a:	4611      	mov	r1, r2
 8015a3c:	4628      	mov	r0, r5
 8015a3e:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 8015a42:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 8015a46:	f7f9 ff68 	bl	800f91a <_ZN8touchgfx8Drawable5setXYEss>
 8015a4a:	2301      	movs	r3, #1
 8015a4c:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 8015a50:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 8015a54:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8015a58:	2b00      	cmp	r3, #0
 8015a5a:	dd5c      	ble.n	8015b16 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8015a5c:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8015a60:	2b00      	cmp	r3, #0
 8015a62:	dd58      	ble.n	8015b16 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8015a64:	462a      	mov	r2, r5
 8015a66:	ab0a      	add	r3, sp, #40	; 0x28
 8015a68:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8015a6c:	6851      	ldr	r1, [r2, #4]
 8015a6e:	c303      	stmia	r3!, {r0, r1}
 8015a70:	4631      	mov	r1, r6
 8015a72:	a80a      	add	r0, sp, #40	; 0x28
 8015a74:	f7ff fcb0 	bl	80153d8 <_ZN8touchgfx4RectaNERKS0_>
 8015a78:	4b38      	ldr	r3, [pc, #224]	; (8015b5c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8015a7a:	2100      	movs	r1, #0
 8015a7c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015a80:	4b37      	ldr	r3, [pc, #220]	; (8015b60 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8015a82:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8015a86:	aa0a      	add	r2, sp, #40	; 0x28
 8015a88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015a8c:	910c      	str	r1, [sp, #48]	; 0x30
 8015a8e:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8015a92:	ab08      	add	r3, sp, #32
 8015a94:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015a98:	e883 0003 	stmia.w	r3, {r0, r1}
 8015a9c:	4618      	mov	r0, r3
 8015a9e:	a90c      	add	r1, sp, #48	; 0x30
 8015aa0:	f7ff fc9a 	bl	80153d8 <_ZN8touchgfx4RectaNERKS0_>
 8015aa4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8015aa6:	2b00      	cmp	r3, #0
 8015aa8:	d13c      	bne.n	8015b24 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 8015aaa:	2000      	movs	r0, #0
 8015aac:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 8015ab0:	2600      	movs	r6, #0
 8015ab2:	696b      	ldr	r3, [r5, #20]
 8015ab4:	a908      	add	r1, sp, #32
 8015ab6:	682a      	ldr	r2, [r5, #0]
 8015ab8:	4628      	mov	r0, r5
 8015aba:	9305      	str	r3, [sp, #20]
 8015abc:	616e      	str	r6, [r5, #20]
 8015abe:	6892      	ldr	r2, [r2, #8]
 8015ac0:	4790      	blx	r2
 8015ac2:	9b05      	ldr	r3, [sp, #20]
 8015ac4:	4652      	mov	r2, sl
 8015ac6:	4649      	mov	r1, r9
 8015ac8:	616b      	str	r3, [r5, #20]
 8015aca:	4628      	mov	r0, r5
 8015acc:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 8015ad0:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 8015ad4:	f7f9 ff21 	bl	800f91a <_ZN8touchgfx8Drawable5setXYEss>
 8015ad8:	9a01      	ldr	r2, [sp, #4]
 8015ada:	4b23      	ldr	r3, [pc, #140]	; (8015b68 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 8015adc:	4620      	mov	r0, r4
 8015ade:	801a      	strh	r2, [r3, #0]
 8015ae0:	9a02      	ldr	r2, [sp, #8]
 8015ae2:	4b22      	ldr	r3, [pc, #136]	; (8015b6c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 8015ae4:	801a      	strh	r2, [r3, #0]
 8015ae6:	9a03      	ldr	r2, [sp, #12]
 8015ae8:	4b1c      	ldr	r3, [pc, #112]	; (8015b5c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8015aea:	801a      	strh	r2, [r3, #0]
 8015aec:	4b1c      	ldr	r3, [pc, #112]	; (8015b60 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8015aee:	9a04      	ldr	r2, [sp, #16]
 8015af0:	801a      	strh	r2, [r3, #0]
 8015af2:	6823      	ldr	r3, [r4, #0]
 8015af4:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 8015af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015afa:	4798      	blx	r3
 8015afc:	6823      	ldr	r3, [r4, #0]
 8015afe:	4620      	mov	r0, r4
 8015b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015b02:	4798      	blx	r3
 8015b04:	b00f      	add	sp, #60	; 0x3c
 8015b06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b0a:	883b      	ldrh	r3, [r7, #0]
 8015b0c:	f8ab 0000 	strh.w	r0, [fp]
 8015b10:	f8aa 3000 	strh.w	r3, [sl]
 8015b14:	e789      	b.n	8015a2a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 8015b16:	462a      	mov	r2, r5
 8015b18:	ab0a      	add	r3, sp, #40	; 0x28
 8015b1a:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8015b1e:	6851      	ldr	r1, [r2, #4]
 8015b20:	c303      	stmia	r3!, {r0, r1}
 8015b22:	e7a9      	b.n	8015a78 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 8015b24:	a807      	add	r0, sp, #28
 8015b26:	f002 fcd9 	bl	80184dc <_ZNK8touchgfx6Bitmap9getFormatEv>
 8015b2a:	4606      	mov	r6, r0
 8015b2c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8015b2e:	6803      	ldr	r3, [r0, #0]
 8015b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015b32:	4798      	blx	r3
 8015b34:	4286      	cmp	r6, r0
 8015b36:	d1b8      	bne.n	8015aaa <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 8015b38:	f7f9 febc 	bl	800f8b4 <_ZN8touchgfx3HAL3lcdEv>
 8015b3c:	6803      	ldr	r3, [r0, #0]
 8015b3e:	4606      	mov	r6, r0
 8015b40:	a807      	add	r0, sp, #28
 8015b42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015b44:	9305      	str	r3, [sp, #20]
 8015b46:	f002 fcc9 	bl	80184dc <_ZNK8touchgfx6Bitmap9getFormatEv>
 8015b4a:	9b05      	ldr	r3, [sp, #20]
 8015b4c:	4601      	mov	r1, r0
 8015b4e:	4630      	mov	r0, r6
 8015b50:	4798      	blx	r3
 8015b52:	f080 0001 	eor.w	r0, r0, #1
 8015b56:	b2c0      	uxtb	r0, r0
 8015b58:	e7a8      	b.n	8015aac <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 8015b5a:	bf00      	nop
 8015b5c:	200243d0 	.word	0x200243d0
 8015b60:	200243d2 	.word	0x200243d2
 8015b64:	200243d4 	.word	0x200243d4
 8015b68:	200243d6 	.word	0x200243d6
 8015b6c:	200243d8 	.word	0x200243d8

08015b70 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8015b70:	4b07      	ldr	r3, [pc, #28]	; (8015b90 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8015b72:	b510      	push	{r4, lr}
 8015b74:	781b      	ldrb	r3, [r3, #0]
 8015b76:	4604      	mov	r4, r0
 8015b78:	b13b      	cbz	r3, 8015b8a <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8015b7a:	6803      	ldr	r3, [r0, #0]
 8015b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015b7e:	4798      	blx	r3
 8015b80:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8015b82:	4283      	cmp	r3, r0
 8015b84:	d101      	bne.n	8015b8a <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8015b86:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8015b88:	bd10      	pop	{r4, pc}
 8015b8a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8015b8c:	e7fc      	b.n	8015b88 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 8015b8e:	bf00      	nop
 8015b90:	200243da 	.word	0x200243da

08015b94 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 8015b94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015b98:	461d      	mov	r5, r3
 8015b9a:	b08a      	sub	sp, #40	; 0x28
 8015b9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015ba0:	4690      	mov	r8, r2
 8015ba2:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 8015ba6:	2400      	movs	r4, #0
 8015ba8:	4607      	mov	r7, r0
 8015baa:	fb06 8505 	mla	r5, r6, r5, r8
 8015bae:	9404      	str	r4, [sp, #16]
 8015bb0:	f88d 4020 	strb.w	r4, [sp, #32]
 8015bb4:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8015bb8:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8015bbc:	f8ad 3018 	strh.w	r3, [sp, #24]
 8015bc0:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8015bc4:	f8ad 301a 	strh.w	r3, [sp, #26]
 8015bc8:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8015bcc:	f8ad 301c 	strh.w	r3, [sp, #28]
 8015bd0:	f7ff ffce 	bl	8015b70 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8015bd4:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8015bd8:	6878      	ldr	r0, [r7, #4]
 8015bda:	f8ad 601e 	strh.w	r6, [sp, #30]
 8015bde:	a901      	add	r1, sp, #4
 8015be0:	9505      	str	r5, [sp, #20]
 8015be2:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8015be6:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 8015bea:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 8015bee:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 8015bf2:	6803      	ldr	r3, [r0, #0]
 8015bf4:	685b      	ldr	r3, [r3, #4]
 8015bf6:	4798      	blx	r3
 8015bf8:	b00a      	add	sp, #40	; 0x28
 8015bfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015bfe <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 8015bfe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015c02:	b08b      	sub	sp, #44	; 0x2c
 8015c04:	2400      	movs	r4, #0
 8015c06:	4691      	mov	r9, r2
 8015c08:	461d      	mov	r5, r3
 8015c0a:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 8015c0e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015c12:	4688      	mov	r8, r1
 8015c14:	4607      	mov	r7, r0
 8015c16:	9404      	str	r4, [sp, #16]
 8015c18:	fb06 9505 	mla	r5, r6, r5, r9
 8015c1c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015c20:	f7ff ffa6 	bl	8015b70 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8015c24:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8015c28:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8015c2c:	6878      	ldr	r0, [r7, #4]
 8015c2e:	f8ad 3018 	strh.w	r3, [sp, #24]
 8015c32:	a901      	add	r1, sp, #4
 8015c34:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8015c38:	9505      	str	r5, [sp, #20]
 8015c3a:	f8ad 301a 	strh.w	r3, [sp, #26]
 8015c3e:	f8ad 401c 	strh.w	r4, [sp, #28]
 8015c42:	f8ad 601e 	strh.w	r6, [sp, #30]
 8015c46:	f8cd 8010 	str.w	r8, [sp, #16]
 8015c4a:	f8ad 4020 	strh.w	r4, [sp, #32]
 8015c4e:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8015c52:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 8015c56:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 8015c5a:	6803      	ldr	r3, [r0, #0]
 8015c5c:	685b      	ldr	r3, [r3, #4]
 8015c5e:	4798      	blx	r3
 8015c60:	b00b      	add	sp, #44	; 0x2c
 8015c62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08015c68 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 8015c68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015c6c:	b08a      	sub	sp, #40	; 0x28
 8015c6e:	4698      	mov	r8, r3
 8015c70:	2300      	movs	r3, #0
 8015c72:	4606      	mov	r6, r0
 8015c74:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 8015c78:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 8015c7c:	2d0b      	cmp	r5, #11
 8015c7e:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 8015c82:	f8bd 7058 	ldrh.w	r7, [sp, #88]	; 0x58
 8015c86:	f89d 4060 	ldrb.w	r4, [sp, #96]	; 0x60
 8015c8a:	9304      	str	r3, [sp, #16]
 8015c8c:	d137      	bne.n	8015cfe <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 8015c8e:	2380      	movs	r3, #128	; 0x80
 8015c90:	f88d 0020 	strb.w	r0, [sp, #32]
 8015c94:	4630      	mov	r0, r6
 8015c96:	9203      	str	r2, [sp, #12]
 8015c98:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8015c9c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8015ca0:	f8ad 3018 	strh.w	r3, [sp, #24]
 8015ca4:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8015ca8:	f8ad 301a 	strh.w	r3, [sp, #26]
 8015cac:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8015cb0:	f8ad 301c 	strh.w	r3, [sp, #28]
 8015cb4:	f7ff ff5c 	bl	8015b70 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8015cb8:	2c0b      	cmp	r4, #11
 8015cba:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8015cbe:	f8ad 701e 	strh.w	r7, [sp, #30]
 8015cc2:	bf94      	ite	ls
 8015cc4:	4b19      	ldrls	r3, [pc, #100]	; (8015d2c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 8015cc6:	2100      	movhi	r1, #0
 8015cc8:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 8015ccc:	bf98      	it	ls
 8015cce:	5d19      	ldrbls	r1, [r3, r4]
 8015cd0:	fb02 8307 	mla	r3, r2, r7, r8
 8015cd4:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8015cd8:	10c9      	asrs	r1, r1, #3
 8015cda:	fb01 0003 	mla	r0, r1, r3, r0
 8015cde:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8015ce2:	a901      	add	r1, sp, #4
 8015ce4:	9005      	str	r0, [sp, #20]
 8015ce6:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 8015cea:	2300      	movs	r3, #0
 8015cec:	6870      	ldr	r0, [r6, #4]
 8015cee:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8015cf2:	6803      	ldr	r3, [r0, #0]
 8015cf4:	685b      	ldr	r3, [r3, #4]
 8015cf6:	4798      	blx	r3
 8015cf8:	b00a      	add	sp, #40	; 0x28
 8015cfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015cfe:	2d02      	cmp	r5, #2
 8015d00:	d109      	bne.n	8015d16 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 8015d02:	28ff      	cmp	r0, #255	; 0xff
 8015d04:	d105      	bne.n	8015d12 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 8015d06:	f1bc 0f00 	cmp.w	ip, #0
 8015d0a:	bf14      	ite	ne
 8015d0c:	2340      	movne	r3, #64	; 0x40
 8015d0e:	2320      	moveq	r3, #32
 8015d10:	e7be      	b.n	8015c90 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8015d12:	2340      	movs	r3, #64	; 0x40
 8015d14:	e7bc      	b.n	8015c90 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8015d16:	28ff      	cmp	r0, #255	; 0xff
 8015d18:	d105      	bne.n	8015d26 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 8015d1a:	f1bc 0f00 	cmp.w	ip, #0
 8015d1e:	bf14      	ite	ne
 8015d20:	2304      	movne	r3, #4
 8015d22:	2301      	moveq	r3, #1
 8015d24:	e7b4      	b.n	8015c90 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8015d26:	2304      	movs	r3, #4
 8015d28:	e7b2      	b.n	8015c90 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8015d2a:	bf00      	nop
 8015d2c:	0801e998 	.word	0x0801e998

08015d30 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 8015d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d34:	b08b      	sub	sp, #44	; 0x2c
 8015d36:	461d      	mov	r5, r3
 8015d38:	2400      	movs	r4, #0
 8015d3a:	4688      	mov	r8, r1
 8015d3c:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
 8015d40:	4693      	mov	fp, r2
 8015d42:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
 8015d46:	4607      	mov	r7, r0
 8015d48:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8015d4c:	f8bd a05c 	ldrh.w	sl, [sp, #92]	; 0x5c
 8015d50:	9404      	str	r4, [sp, #16]
 8015d52:	bf14      	ite	ne
 8015d54:	2308      	movne	r3, #8
 8015d56:	2302      	moveq	r3, #2
 8015d58:	fb05 b50a 	mla	r5, r5, sl, fp
 8015d5c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015d60:	f7ff ff06 	bl	8015b70 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8015d64:	2e0b      	cmp	r6, #11
 8015d66:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8015d6a:	a901      	add	r1, sp, #4
 8015d6c:	bf98      	it	ls
 8015d6e:	4b13      	ldrls	r3, [pc, #76]	; (8015dbc <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 8015d70:	f8ad a01e 	strh.w	sl, [sp, #30]
 8015d74:	bf98      	it	ls
 8015d76:	5d9c      	ldrbls	r4, [r3, r6]
 8015d78:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8015d7c:	10e4      	asrs	r4, r4, #3
 8015d7e:	f8cd 8010 	str.w	r8, [sp, #16]
 8015d82:	f8ad 3018 	strh.w	r3, [sp, #24]
 8015d86:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8015d8a:	fb04 0405 	mla	r4, r4, r5, r0
 8015d8e:	6878      	ldr	r0, [r7, #4]
 8015d90:	f8ad 301a 	strh.w	r3, [sp, #26]
 8015d94:	2300      	movs	r3, #0
 8015d96:	9405      	str	r4, [sp, #20]
 8015d98:	f8ad 301c 	strh.w	r3, [sp, #28]
 8015d9c:	f88d 9020 	strb.w	r9, [sp, #32]
 8015da0:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
 8015da4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8015da8:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
 8015dac:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
 8015db0:	6803      	ldr	r3, [r0, #0]
 8015db2:	685b      	ldr	r3, [r3, #4]
 8015db4:	4798      	blx	r3
 8015db6:	b00b      	add	sp, #44	; 0x2c
 8015db8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015dbc:	0801e998 	.word	0x0801e998

08015dc0 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8015dc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015dc4:	461e      	mov	r6, r3
 8015dc6:	4b0a      	ldr	r3, [pc, #40]	; (8015df0 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 8015dc8:	460f      	mov	r7, r1
 8015dca:	4690      	mov	r8, r2
 8015dcc:	881d      	ldrh	r5, [r3, #0]
 8015dce:	f7f9 fd71 	bl	800f8b4 <_ZN8touchgfx3HAL3lcdEv>
 8015dd2:	6803      	ldr	r3, [r0, #0]
 8015dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015dd6:	4798      	blx	r3
 8015dd8:	280b      	cmp	r0, #11
 8015dda:	bf96      	itet	ls
 8015ddc:	4b05      	ldrls	r3, [pc, #20]	; (8015df4 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8015dde:	2400      	movhi	r4, #0
 8015de0:	5c1c      	ldrbls	r4, [r3, r0]
 8015de2:	fb08 7005 	mla	r0, r8, r5, r7
 8015de6:	10e4      	asrs	r4, r4, #3
 8015de8:	fb04 6000 	mla	r0, r4, r0, r6
 8015dec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015df0:	200243d6 	.word	0x200243d6
 8015df4:	0801e998 	.word	0x0801e998

08015df8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 8015df8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015dfa:	b08b      	sub	sp, #44	; 0x2c
 8015dfc:	461f      	mov	r7, r3
 8015dfe:	4604      	mov	r4, r0
 8015e00:	4616      	mov	r6, r2
 8015e02:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8015e06:	2500      	movs	r5, #0
 8015e08:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8015e0c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8015e10:	9504      	str	r5, [sp, #16]
 8015e12:	f8ad 3018 	strh.w	r3, [sp, #24]
 8015e16:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8015e1a:	f8ad 301a 	strh.w	r3, [sp, #26]
 8015e1e:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8015e22:	f8ad 301c 	strh.w	r3, [sp, #28]
 8015e26:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8015e2a:	f88d 3020 	strb.w	r3, [sp, #32]
 8015e2e:	f7ff fe9f 	bl	8015b70 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8015e32:	463a      	mov	r2, r7
 8015e34:	4631      	mov	r1, r6
 8015e36:	4603      	mov	r3, r0
 8015e38:	4620      	mov	r0, r4
 8015e3a:	f7ff ffc1 	bl	8015dc0 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8015e3e:	4b0e      	ldr	r3, [pc, #56]	; (8015e78 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 8015e40:	9005      	str	r0, [sp, #20]
 8015e42:	881b      	ldrh	r3, [r3, #0]
 8015e44:	f8ad 301e 	strh.w	r3, [sp, #30]
 8015e48:	f7f9 fd34 	bl	800f8b4 <_ZN8touchgfx3HAL3lcdEv>
 8015e4c:	6803      	ldr	r3, [r0, #0]
 8015e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015e50:	4798      	blx	r3
 8015e52:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015e54:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 8015e58:	a901      	add	r1, sp, #4
 8015e5a:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 8015e5e:	9304      	str	r3, [sp, #16]
 8015e60:	6860      	ldr	r0, [r4, #4]
 8015e62:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8015e66:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 8015e6a:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 8015e6e:	6803      	ldr	r3, [r0, #0]
 8015e70:	685b      	ldr	r3, [r3, #4]
 8015e72:	4798      	blx	r3
 8015e74:	b00b      	add	sp, #44	; 0x2c
 8015e76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015e78:	200243d6 	.word	0x200243d6

08015e7c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8015e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015e7e:	b08d      	sub	sp, #52	; 0x34
 8015e80:	2501      	movs	r5, #1
 8015e82:	4604      	mov	r4, r0
 8015e84:	466b      	mov	r3, sp
 8015e86:	9503      	str	r5, [sp, #12]
 8015e88:	e883 0006 	stmia.w	r3, {r1, r2}
 8015e8c:	2300      	movs	r3, #0
 8015e8e:	f8bd 6000 	ldrh.w	r6, [sp]
 8015e92:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8015e96:	9306      	str	r3, [sp, #24]
 8015e98:	6803      	ldr	r3, [r0, #0]
 8015e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015e9c:	4798      	blx	r3
 8015e9e:	463a      	mov	r2, r7
 8015ea0:	4631      	mov	r1, r6
 8015ea2:	4603      	mov	r3, r0
 8015ea4:	4620      	mov	r0, r4
 8015ea6:	f7ff ff8b 	bl	8015dc0 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8015eaa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8015eac:	9004      	str	r0, [sp, #16]
 8015eae:	9307      	str	r3, [sp, #28]
 8015eb0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8015eb4:	f8ad 3020 	strh.w	r3, [sp, #32]
 8015eb8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8015ebc:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8015ec0:	4b0e      	ldr	r3, [pc, #56]	; (8015efc <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 8015ec2:	881b      	ldrh	r3, [r3, #0]
 8015ec4:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8015ec8:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8015ecc:	f7f9 fcf2 	bl	800f8b4 <_ZN8touchgfx3HAL3lcdEv>
 8015ed0:	6803      	ldr	r3, [r0, #0]
 8015ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015ed4:	4798      	blx	r3
 8015ed6:	23ff      	movs	r3, #255	; 0xff
 8015ed8:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 8015edc:	a903      	add	r1, sp, #12
 8015ede:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 8015ee2:	6860      	ldr	r0, [r4, #4]
 8015ee4:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8015ee8:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8015eec:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 8015ef0:	6803      	ldr	r3, [r0, #0]
 8015ef2:	685b      	ldr	r3, [r3, #4]
 8015ef4:	4798      	blx	r3
 8015ef6:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8015ef8:	b00d      	add	sp, #52	; 0x34
 8015efa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015efc:	200243d6 	.word	0x200243d6

08015f00 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8015f00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015f04:	b08c      	sub	sp, #48	; 0x30
 8015f06:	461e      	mov	r6, r3
 8015f08:	2300      	movs	r3, #0
 8015f0a:	4604      	mov	r4, r0
 8015f0c:	466d      	mov	r5, sp
 8015f0e:	9306      	str	r3, [sp, #24]
 8015f10:	6803      	ldr	r3, [r0, #0]
 8015f12:	e885 0006 	stmia.w	r5, {r1, r2}
 8015f16:	2501      	movs	r5, #1
 8015f18:	f8bd 7000 	ldrh.w	r7, [sp]
 8015f1c:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 8015f20:	9503      	str	r5, [sp, #12]
 8015f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015f24:	4798      	blx	r3
 8015f26:	4642      	mov	r2, r8
 8015f28:	4639      	mov	r1, r7
 8015f2a:	4603      	mov	r3, r0
 8015f2c:	4620      	mov	r0, r4
 8015f2e:	f7ff ff47 	bl	8015dc0 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8015f32:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8015f36:	9004      	str	r0, [sp, #16]
 8015f38:	f8ad 3020 	strh.w	r3, [sp, #32]
 8015f3c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8015f40:	9607      	str	r6, [sp, #28]
 8015f42:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8015f46:	4b10      	ldr	r3, [pc, #64]	; (8015f88 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 8015f48:	881b      	ldrh	r3, [r3, #0]
 8015f4a:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8015f4e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015f50:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8015f54:	f7f9 fcae 	bl	800f8b4 <_ZN8touchgfx3HAL3lcdEv>
 8015f58:	6803      	ldr	r3, [r0, #0]
 8015f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015f5c:	4798      	blx	r3
 8015f5e:	23ff      	movs	r3, #255	; 0xff
 8015f60:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 8015f64:	a903      	add	r1, sp, #12
 8015f66:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 8015f6a:	6860      	ldr	r0, [r4, #4]
 8015f6c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8015f70:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8015f74:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 8015f78:	6803      	ldr	r3, [r0, #0]
 8015f7a:	685b      	ldr	r3, [r3, #4]
 8015f7c:	4798      	blx	r3
 8015f7e:	4630      	mov	r0, r6
 8015f80:	b00c      	add	sp, #48	; 0x30
 8015f82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015f86:	bf00      	nop
 8015f88:	200243d6 	.word	0x200243d6

08015f8c <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 8015f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015f8e:	b085      	sub	sp, #20
 8015f90:	4605      	mov	r5, r0
 8015f92:	ac02      	add	r4, sp, #8
 8015f94:	e884 0006 	stmia.w	r4, {r1, r2}
 8015f98:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 8015f9c:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 8015fa0:	f7ff fde6 	bl	8015b70 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8015fa4:	4631      	mov	r1, r6
 8015fa6:	4603      	mov	r3, r0
 8015fa8:	463a      	mov	r2, r7
 8015faa:	4628      	mov	r0, r5
 8015fac:	f7ff ff08 	bl	8015dc0 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8015fb0:	4a05      	ldr	r2, [pc, #20]	; (8015fc8 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 8015fb2:	682b      	ldr	r3, [r5, #0]
 8015fb4:	8812      	ldrh	r2, [r2, #0]
 8015fb6:	9200      	str	r2, [sp, #0]
 8015fb8:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 8015fba:	4603      	mov	r3, r0
 8015fbc:	4628      	mov	r0, r5
 8015fbe:	e894 0006 	ldmia.w	r4, {r1, r2}
 8015fc2:	47b0      	blx	r6
 8015fc4:	b005      	add	sp, #20
 8015fc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015fc8:	200243d6 	.word	0x200243d6

08015fcc <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8015fcc:	b570      	push	{r4, r5, r6, lr}
 8015fce:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8015fd2:	4604      	mov	r4, r0
 8015fd4:	b19b      	cbz	r3, 8015ffe <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8015fd6:	2002      	movs	r0, #2
 8015fd8:	f7f9 fec8 	bl	800fd6c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8015fdc:	2300      	movs	r3, #0
 8015fde:	4620      	mov	r0, r4
 8015fe0:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8015fe4:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 8015fe8:	6823      	ldr	r3, [r4, #0]
 8015fea:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
 8015fee:	f7ff fdbf 	bl	8015b70 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8015ff2:	4601      	mov	r1, r0
 8015ff4:	4620      	mov	r0, r4
 8015ff6:	462b      	mov	r3, r5
 8015ff8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015ffc:	4718      	bx	r3
 8015ffe:	bd70      	pop	{r4, r5, r6, pc}

08016000 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 8016000:	b538      	push	{r3, r4, r5, lr}
 8016002:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
 8016006:	4604      	mov	r4, r0
 8016008:	460d      	mov	r5, r1
 801600a:	428b      	cmp	r3, r1
 801600c:	d006      	beq.n	801601c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 801600e:	6803      	ldr	r3, [r0, #0]
 8016010:	b929      	cbnz	r1, 801601e <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 8016012:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8016016:	4798      	blx	r3
 8016018:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 801601c:	bd38      	pop	{r3, r4, r5, pc}
 801601e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8016022:	e7f8      	b.n	8016016 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

08016024 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8016024:	4b0d      	ldr	r3, [pc, #52]	; (801605c <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 8016026:	b510      	push	{r4, lr}
 8016028:	781b      	ldrb	r3, [r3, #0]
 801602a:	4604      	mov	r4, r0
 801602c:	b95b      	cbnz	r3, 8016046 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801602e:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 8016032:	2b02      	cmp	r3, #2
 8016034:	d007      	beq.n	8016046 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8016036:	6840      	ldr	r0, [r0, #4]
 8016038:	f000 f90e 	bl	8016258 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 801603c:	b118      	cbz	r0, 8016046 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801603e:	6862      	ldr	r2, [r4, #4]
 8016040:	7a53      	ldrb	r3, [r2, #9]
 8016042:	2b00      	cmp	r3, #0
 8016044:	d0fc      	beq.n	8016040 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8016046:	f7fb f9c5 	bl	80113d4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801604a:	4620      	mov	r0, r4
 801604c:	2100      	movs	r1, #0
 801604e:	f7ff ffd7 	bl	8016000 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8016052:	4620      	mov	r0, r4
 8016054:	f7ff fd8c 	bl	8015b70 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8016058:	bd10      	pop	{r4, pc}
 801605a:	bf00      	nop
 801605c:	200243da 	.word	0x200243da

08016060 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 8016060:	4770      	bx	lr

08016062 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
 8016062:	2000      	movs	r0, #0
 8016064:	4770      	bx	lr

08016066 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8016066:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 801606a:	1a13      	subs	r3, r2, r0
 801606c:	4258      	negs	r0, r3
 801606e:	4158      	adcs	r0, r3
 8016070:	4770      	bx	lr

08016072 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8016072:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8016076:	1a9b      	subs	r3, r3, r2
 8016078:	2b00      	cmp	r3, #0
 801607a:	bfdc      	itt	le
 801607c:	6882      	ldrle	r2, [r0, #8]
 801607e:	189b      	addle	r3, r3, r2
 8016080:	2b01      	cmp	r3, #1
 8016082:	bfcc      	ite	gt
 8016084:	2000      	movgt	r0, #0
 8016086:	2001      	movle	r0, #1
 8016088:	4770      	bx	lr

0801608a <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 801608a:	6902      	ldr	r2, [r0, #16]
 801608c:	6843      	ldr	r3, [r0, #4]
 801608e:	2024      	movs	r0, #36	; 0x24
 8016090:	fb00 3002 	mla	r0, r0, r2, r3
 8016094:	4770      	bx	lr

08016096 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8016096:	6803      	ldr	r3, [r0, #0]
 8016098:	691b      	ldr	r3, [r3, #16]
 801609a:	4718      	bx	r3

0801609c <_ZN8touchgfx13DMA_Interface7executeEv>:
 801609c:	2301      	movs	r3, #1
 801609e:	b570      	push	{r4, r5, r6, lr}
 80160a0:	7203      	strb	r3, [r0, #8]
 80160a2:	4604      	mov	r4, r0
 80160a4:	6840      	ldr	r0, [r0, #4]
 80160a6:	6803      	ldr	r3, [r0, #0]
 80160a8:	699b      	ldr	r3, [r3, #24]
 80160aa:	4798      	blx	r3
 80160ac:	6803      	ldr	r3, [r0, #0]
 80160ae:	4605      	mov	r5, r0
 80160b0:	2b40      	cmp	r3, #64	; 0x40
 80160b2:	d00c      	beq.n	80160ce <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80160b4:	d810      	bhi.n	80160d8 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 80160b6:	2b04      	cmp	r3, #4
 80160b8:	d01d      	beq.n	80160f6 <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 80160ba:	d804      	bhi.n	80160c6 <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 80160bc:	2b01      	cmp	r3, #1
 80160be:	d006      	beq.n	80160ce <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80160c0:	2b02      	cmp	r3, #2
 80160c2:	d02c      	beq.n	801611e <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 80160c4:	bd70      	pop	{r4, r5, r6, pc}
 80160c6:	2b08      	cmp	r3, #8
 80160c8:	d01d      	beq.n	8016106 <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 80160ca:	2b20      	cmp	r3, #32
 80160cc:	d1fa      	bne.n	80160c4 <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 80160ce:	6823      	ldr	r3, [r4, #0]
 80160d0:	4620      	mov	r0, r4
 80160d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80160d4:	4798      	blx	r3
 80160d6:	e013      	b.n	8016100 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 80160d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80160dc:	d0f7      	beq.n	80160ce <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80160de:	d804      	bhi.n	80160ea <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 80160e0:	2b80      	cmp	r3, #128	; 0x80
 80160e2:	d0f4      	beq.n	80160ce <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80160e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80160e8:	e7f0      	b.n	80160cc <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 80160ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80160ee:	d0ee      	beq.n	80160ce <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80160f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80160f4:	e7e5      	b.n	80160c2 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 80160f6:	6823      	ldr	r3, [r4, #0]
 80160f8:	7f01      	ldrb	r1, [r0, #28]
 80160fa:	4620      	mov	r0, r4
 80160fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80160fe:	4798      	blx	r3
 8016100:	6823      	ldr	r3, [r4, #0]
 8016102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016104:	e006      	b.n	8016114 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8016106:	6823      	ldr	r3, [r4, #0]
 8016108:	7f01      	ldrb	r1, [r0, #28]
 801610a:	4620      	mov	r0, r4
 801610c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801610e:	4798      	blx	r3
 8016110:	6823      	ldr	r3, [r4, #0]
 8016112:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016114:	4629      	mov	r1, r5
 8016116:	4620      	mov	r0, r4
 8016118:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801611c:	4718      	bx	r3
 801611e:	6823      	ldr	r3, [r4, #0]
 8016120:	4620      	mov	r0, r4
 8016122:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016124:	4798      	blx	r3
 8016126:	e7f3      	b.n	8016110 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

08016128 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8016128:	4770      	bx	lr

0801612a <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 801612a:	4770      	bx	lr

0801612c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 801612c:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 8016130:	b510      	push	{r4, lr}
 8016132:	1ad2      	subs	r2, r2, r3
 8016134:	2a00      	cmp	r2, #0
 8016136:	bfdc      	itt	le
 8016138:	6884      	ldrle	r4, [r0, #8]
 801613a:	1912      	addle	r2, r2, r4
 801613c:	2a01      	cmp	r2, #1
 801613e:	dd16      	ble.n	801616e <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 8016140:	6842      	ldr	r2, [r0, #4]
 8016142:	2424      	movs	r4, #36	; 0x24
 8016144:	fb04 2303 	mla	r3, r4, r3, r2
 8016148:	f101 0220 	add.w	r2, r1, #32
 801614c:	f851 4b04 	ldr.w	r4, [r1], #4
 8016150:	4291      	cmp	r1, r2
 8016152:	f843 4b04 	str.w	r4, [r3], #4
 8016156:	d1f9      	bne.n	801614c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 8016158:	780a      	ldrb	r2, [r1, #0]
 801615a:	701a      	strb	r2, [r3, #0]
 801615c:	68c3      	ldr	r3, [r0, #12]
 801615e:	6882      	ldr	r2, [r0, #8]
 8016160:	f3bf 8f5b 	dmb	ish
 8016164:	3301      	adds	r3, #1
 8016166:	429a      	cmp	r2, r3
 8016168:	bfd8      	it	le
 801616a:	1a9b      	suble	r3, r3, r2
 801616c:	60c3      	str	r3, [r0, #12]
 801616e:	bd10      	pop	{r4, pc}

08016170 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8016170:	6903      	ldr	r3, [r0, #16]
 8016172:	6882      	ldr	r2, [r0, #8]
 8016174:	f3bf 8f5b 	dmb	ish
 8016178:	3301      	adds	r3, #1
 801617a:	429a      	cmp	r2, r3
 801617c:	bfd8      	it	le
 801617e:	1a9b      	suble	r3, r3, r2
 8016180:	6103      	str	r3, [r0, #16]
 8016182:	4770      	bx	lr

08016184 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8016184:	b570      	push	{r4, r5, r6, lr}
 8016186:	4604      	mov	r4, r0
 8016188:	460e      	mov	r6, r1
 801618a:	6860      	ldr	r0, [r4, #4]
 801618c:	6803      	ldr	r3, [r0, #0]
 801618e:	685b      	ldr	r3, [r3, #4]
 8016190:	4798      	blx	r3
 8016192:	2800      	cmp	r0, #0
 8016194:	d1f9      	bne.n	801618a <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 8016196:	4d0d      	ldr	r5, [pc, #52]	; (80161cc <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 8016198:	6828      	ldr	r0, [r5, #0]
 801619a:	6803      	ldr	r3, [r0, #0]
 801619c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801619e:	4798      	blx	r3
 80161a0:	f7fb f932 	bl	8011408 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 80161a4:	6828      	ldr	r0, [r5, #0]
 80161a6:	2101      	movs	r1, #1
 80161a8:	f7ff ff2a 	bl	8016000 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 80161ac:	6860      	ldr	r0, [r4, #4]
 80161ae:	4631      	mov	r1, r6
 80161b0:	6803      	ldr	r3, [r0, #0]
 80161b2:	689b      	ldr	r3, [r3, #8]
 80161b4:	4798      	blx	r3
 80161b6:	6823      	ldr	r3, [r4, #0]
 80161b8:	4620      	mov	r0, r4
 80161ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80161bc:	4798      	blx	r3
 80161be:	6828      	ldr	r0, [r5, #0]
 80161c0:	6803      	ldr	r3, [r0, #0]
 80161c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80161c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80161c8:	4718      	bx	r3
 80161ca:	bf00      	nop
 80161cc:	200243dc 	.word	0x200243dc

080161d0 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 80161d0:	b508      	push	{r3, lr}
 80161d2:	f7fb f8ff 	bl	80113d4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 80161d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80161da:	f7fb b909 	b.w	80113f0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

080161de <_ZN8touchgfx13DMA_Interface5startEv>:
 80161de:	b510      	push	{r4, lr}
 80161e0:	4604      	mov	r4, r0
 80161e2:	6840      	ldr	r0, [r0, #4]
 80161e4:	6803      	ldr	r3, [r0, #0]
 80161e6:	681b      	ldr	r3, [r3, #0]
 80161e8:	4798      	blx	r3
 80161ea:	b948      	cbnz	r0, 8016200 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 80161ec:	7a63      	ldrb	r3, [r4, #9]
 80161ee:	b13b      	cbz	r3, 8016200 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 80161f0:	7a23      	ldrb	r3, [r4, #8]
 80161f2:	b92b      	cbnz	r3, 8016200 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 80161f4:	6823      	ldr	r3, [r4, #0]
 80161f6:	4620      	mov	r0, r4
 80161f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80161fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80161fe:	4718      	bx	r3
 8016200:	bd10      	pop	{r4, pc}

08016202 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8016202:	b570      	push	{r4, r5, r6, lr}
 8016204:	4604      	mov	r4, r0
 8016206:	6840      	ldr	r0, [r0, #4]
 8016208:	6803      	ldr	r3, [r0, #0]
 801620a:	681b      	ldr	r3, [r3, #0]
 801620c:	4798      	blx	r3
 801620e:	4605      	mov	r5, r0
 8016210:	b930      	cbnz	r0, 8016220 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8016212:	7a23      	ldrb	r3, [r4, #8]
 8016214:	b123      	cbz	r3, 8016220 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8016216:	6860      	ldr	r0, [r4, #4]
 8016218:	6803      	ldr	r3, [r0, #0]
 801621a:	695b      	ldr	r3, [r3, #20]
 801621c:	4798      	blx	r3
 801621e:	7225      	strb	r5, [r4, #8]
 8016220:	6860      	ldr	r0, [r4, #4]
 8016222:	6803      	ldr	r3, [r0, #0]
 8016224:	681b      	ldr	r3, [r3, #0]
 8016226:	4798      	blx	r3
 8016228:	b928      	cbnz	r0, 8016236 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 801622a:	6823      	ldr	r3, [r4, #0]
 801622c:	4620      	mov	r0, r4
 801622e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016230:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016234:	4718      	bx	r3
 8016236:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801623a:	f7fb b8f1 	b.w	8011420 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>
	...

08016240 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8016240:	b510      	push	{r4, lr}
 8016242:	6082      	str	r2, [r0, #8]
 8016244:	2200      	movs	r2, #0
 8016246:	4c03      	ldr	r4, [pc, #12]	; (8016254 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8016248:	e9c0 2203 	strd	r2, r2, [r0, #12]
 801624c:	e9c0 4100 	strd	r4, r1, [r0]
 8016250:	bd10      	pop	{r4, pc}
 8016252:	bf00      	nop
 8016254:	0801ead4 	.word	0x0801ead4

08016258 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8016258:	6840      	ldr	r0, [r0, #4]
 801625a:	6803      	ldr	r3, [r0, #0]
 801625c:	681b      	ldr	r3, [r3, #0]
 801625e:	4718      	bx	r3

08016260 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 8016260:	b510      	push	{r4, lr}
 8016262:	6803      	ldr	r3, [r0, #0]
 8016264:	460c      	mov	r4, r1
 8016266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016268:	4798      	blx	r3
 801626a:	1b03      	subs	r3, r0, r4
 801626c:	4258      	negs	r0, r3
 801626e:	4158      	adcs	r0, r3
 8016270:	bd10      	pop	{r4, pc}
	...

08016274 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 8016274:	4b01      	ldr	r3, [pc, #4]	; (801627c <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 8016276:	6019      	str	r1, [r3, #0]
 8016278:	4770      	bx	lr
 801627a:	bf00      	nop
 801627c:	200243e4 	.word	0x200243e4

08016280 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8016280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016284:	4696      	mov	lr, r2
 8016286:	b097      	sub	sp, #92	; 0x5c
 8016288:	4605      	mov	r5, r0
 801628a:	4614      	mov	r4, r2
 801628c:	460e      	mov	r6, r1
 801628e:	461f      	mov	r7, r3
 8016290:	f10d 0c1c 	add.w	ip, sp, #28
 8016294:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 8016298:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 801629c:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 80162a0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80162a4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80162a8:	f8de 3000 	ldr.w	r3, [lr]
 80162ac:	f104 0e14 	add.w	lr, r4, #20
 80162b0:	f8cc 3000 	str.w	r3, [ip]
 80162b4:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 80162b8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80162bc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80162c0:	f8de 3000 	ldr.w	r3, [lr]
 80162c4:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 80162c8:	f8cc 3000 	str.w	r3, [ip]
 80162cc:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 80162d0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80162d4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80162d8:	f8de 3000 	ldr.w	r3, [lr]
 80162dc:	4631      	mov	r1, r6
 80162de:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80162e0:	4628      	mov	r0, r5
 80162e2:	f8cc 3000 	str.w	r3, [ip]
 80162e6:	682b      	ldr	r3, [r5, #0]
 80162e8:	9201      	str	r2, [sp, #4]
 80162ea:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80162ec:	f8cd 8008 	str.w	r8, [sp, #8]
 80162f0:	9200      	str	r2, [sp, #0]
 80162f2:	aa07      	add	r2, sp, #28
 80162f4:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 80162f8:	f8d3 b03c 	ldr.w	fp, [r3, #60]	; 0x3c
 80162fc:	463b      	mov	r3, r7
 80162fe:	47d8      	blx	fp
 8016300:	46a6      	mov	lr, r4
 8016302:	f10d 0c1c 	add.w	ip, sp, #28
 8016306:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801630a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801630e:	f8de 3000 	ldr.w	r3, [lr]
 8016312:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8016316:	343c      	adds	r4, #60	; 0x3c
 8016318:	f8cc 3000 	str.w	r3, [ip]
 801631c:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8016320:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016324:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016328:	f8de 3000 	ldr.w	r3, [lr]
 801632c:	f8cc 3000 	str.w	r3, [ip]
 8016330:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8016334:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016336:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801633a:	6823      	ldr	r3, [r4, #0]
 801633c:	4631      	mov	r1, r6
 801633e:	4628      	mov	r0, r5
 8016340:	f8cc 3000 	str.w	r3, [ip]
 8016344:	682b      	ldr	r3, [r5, #0]
 8016346:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801634a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801634c:	f8cd 8008 	str.w	r8, [sp, #8]
 8016350:	9201      	str	r2, [sp, #4]
 8016352:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8016354:	9200      	str	r2, [sp, #0]
 8016356:	aa07      	add	r2, sp, #28
 8016358:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 801635a:	463b      	mov	r3, r7
 801635c:	47a0      	blx	r4
 801635e:	b017      	add	sp, #92	; 0x5c
 8016360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016364 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8016364:	2000      	movs	r0, #0
 8016366:	4770      	bx	lr

08016368 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8016368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801636c:	b08d      	sub	sp, #52	; 0x34
 801636e:	4688      	mov	r8, r1
 8016370:	f8d3 c000 	ldr.w	ip, [r3]
 8016374:	9916      	ldr	r1, [sp, #88]	; 0x58
 8016376:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 801637a:	680f      	ldr	r7, [r1, #0]
 801637c:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 8016380:	eba7 070c 	sub.w	r7, r7, ip
 8016384:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 8016388:	edd3 6a07 	vldr	s13, [r3, #28]
 801638c:	42bc      	cmp	r4, r7
 801638e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8016390:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 8016394:	bfa8      	it	ge
 8016396:	463c      	movge	r4, r7
 8016398:	f9b1 9000 	ldrsh.w	r9, [r1]
 801639c:	f9ba 1000 	ldrsh.w	r1, [sl]
 80163a0:	ee07 4a90 	vmov	s15, r4
 80163a4:	eb09 0e0c 	add.w	lr, r9, ip
 80163a8:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 80163ac:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 80163b0:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 80163b4:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 80163b8:	4571      	cmp	r1, lr
 80163ba:	ee25 4a04 	vmul.f32	s8, s10, s8
 80163be:	ee65 4a24 	vmul.f32	s9, s10, s9
 80163c2:	ee25 5a27 	vmul.f32	s10, s10, s15
 80163c6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80163ca:	ee71 0aa4 	vadd.f32	s1, s3, s9
 80163ce:	ee32 1a05 	vadd.f32	s2, s4, s10
 80163d2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80163d6:	ee36 0a84 	vadd.f32	s0, s13, s8
 80163da:	ee61 1a87 	vmul.f32	s3, s3, s14
 80163de:	ee22 2a07 	vmul.f32	s4, s4, s14
 80163e2:	f340 808c 	ble.w	80164fe <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 80163e6:	eba1 060e 	sub.w	r6, r1, lr
 80163ea:	fb96 f5f4 	sdiv	r5, r6, r4
 80163ee:	ee07 5a10 	vmov	s14, r5
 80163f2:	2d00      	cmp	r5, #0
 80163f4:	fb04 6615 	mls	r6, r4, r5, r6
 80163f8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80163fc:	eea7 0a04 	vfma.f32	s0, s14, s8
 8016400:	eee7 0a24 	vfma.f32	s1, s14, s9
 8016404:	eea7 1a05 	vfma.f32	s2, s14, s10
 8016408:	dd12      	ble.n	8016430 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 801640a:	ee70 6a44 	vsub.f32	s13, s0, s8
 801640e:	ee70 1ae4 	vsub.f32	s3, s1, s9
 8016412:	ee31 2a45 	vsub.f32	s4, s2, s10
 8016416:	eef5 6a40 	vcmp.f32	s13, #0.0
 801641a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801641e:	bf14      	ite	ne
 8016420:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8016424:	eeb0 7a67 	vmoveq.f32	s14, s15
 8016428:	ee61 1a87 	vmul.f32	s3, s3, s14
 801642c:	ee22 2a07 	vmul.f32	s4, s4, s14
 8016430:	fb05 f204 	mul.w	r2, r5, r4
 8016434:	1abf      	subs	r7, r7, r2
 8016436:	4494      	add	ip, r2
 8016438:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 801643c:	4411      	add	r1, r2
 801643e:	eb09 020c 	add.w	r2, r9, ip
 8016442:	b209      	sxth	r1, r1
 8016444:	443a      	add	r2, r7
 8016446:	428a      	cmp	r2, r1
 8016448:	bfc4      	itt	gt
 801644a:	eba1 0209 	subgt.w	r2, r1, r9
 801644e:	eba2 070c 	subgt.w	r7, r2, ip
 8016452:	2f00      	cmp	r7, #0
 8016454:	dd50      	ble.n	80164f8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 8016456:	fb97 f1f4 	sdiv	r1, r7, r4
 801645a:	fb04 7211 	mls	r2, r4, r1, r7
 801645e:	b90a      	cbnz	r2, 8016464 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 8016460:	3901      	subs	r1, #1
 8016462:	4622      	mov	r2, r4
 8016464:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8016468:	6840      	ldr	r0, [r0, #4]
 801646a:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 801646e:	44b6      	add	lr, r6
 8016470:	f8d0 a000 	ldr.w	sl, [r0]
 8016474:	2900      	cmp	r1, #0
 8016476:	bfcc      	ite	gt
 8016478:	46a1      	movgt	r9, r4
 801647a:	4691      	movle	r9, r2
 801647c:	900b      	str	r0, [sp, #44]	; 0x2c
 801647e:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8016480:	fb04 e505 	mla	r5, r4, r5, lr
 8016484:	eef0 6a42 	vmov.f32	s13, s4
 8016488:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 801648c:	9008      	str	r0, [sp, #32]
 801648e:	eeb0 7a61 	vmov.f32	s14, s3
 8016492:	9818      	ldr	r0, [sp, #96]	; 0x60
 8016494:	695b      	ldr	r3, [r3, #20]
 8016496:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801649a:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 801649e:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 80164a2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80164a4:	445b      	add	r3, fp
 80164a6:	9307      	str	r3, [sp, #28]
 80164a8:	ee16 3a90 	vmov	r3, s13
 80164ac:	e9cd 8505 	strd	r8, r5, [sp, #20]
 80164b0:	ee60 2aa3 	vmul.f32	s5, s1, s7
 80164b4:	ee21 3a23 	vmul.f32	s6, s2, s7
 80164b8:	ee72 7ae1 	vsub.f32	s15, s5, s3
 80164bc:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 80164c0:	ee17 7a90 	vmov	r7, s15
 80164c4:	ee73 7a42 	vsub.f32	s15, s6, s4
 80164c8:	fb97 f7f4 	sdiv	r7, r7, r4
 80164cc:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 80164d0:	ee17 ca90 	vmov	ip, s15
 80164d4:	fb9c fcf4 	sdiv	ip, ip, r4
 80164d8:	fb0c 3306 	mla	r3, ip, r6, r3
 80164dc:	9302      	str	r3, [sp, #8]
 80164de:	ee17 3a10 	vmov	r3, s14
 80164e2:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 80164e6:	fb07 3706 	mla	r7, r7, r6, r3
 80164ea:	eba9 0306 	sub.w	r3, r9, r6
 80164ee:	e9cd 4700 	strd	r4, r7, [sp]
 80164f2:	f8da 4008 	ldr.w	r4, [sl, #8]
 80164f6:	47a0      	blx	r4
 80164f8:	b00d      	add	sp, #52	; 0x34
 80164fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80164fe:	2500      	movs	r5, #0
 8016500:	462e      	mov	r6, r5
 8016502:	e799      	b.n	8016438 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

08016504 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8016504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016508:	b0db      	sub	sp, #364	; 0x16c
 801650a:	461d      	mov	r5, r3
 801650c:	4614      	mov	r4, r2
 801650e:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 8016512:	910f      	str	r1, [sp, #60]	; 0x3c
 8016514:	4629      	mov	r1, r5
 8016516:	930a      	str	r3, [sp, #40]	; 0x28
 8016518:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 801651c:	9009      	str	r0, [sp, #36]	; 0x24
 801651e:	930b      	str	r3, [sp, #44]	; 0x2c
 8016520:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 8016524:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 8016528:	9310      	str	r3, [sp, #64]	; 0x40
 801652a:	6803      	ldr	r3, [r0, #0]
 801652c:	6c5f      	ldr	r7, [r3, #68]	; 0x44
 801652e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8016532:	47b8      	blx	r7
 8016534:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016536:	6058      	str	r0, [r3, #4]
 8016538:	2800      	cmp	r0, #0
 801653a:	f000 83a1 	beq.w	8016c80 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801653e:	682b      	ldr	r3, [r5, #0]
 8016540:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8016544:	ed94 7a02 	vldr	s14, [r4, #8]
 8016548:	9314      	str	r3, [sp, #80]	; 0x50
 801654a:	686b      	ldr	r3, [r5, #4]
 801654c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016550:	9315      	str	r3, [sp, #84]	; 0x54
 8016552:	4bc1      	ldr	r3, [pc, #772]	; (8016858 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 8016554:	7819      	ldrb	r1, [r3, #0]
 8016556:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 801655a:	2900      	cmp	r1, #0
 801655c:	bf16      	itet	ne
 801655e:	4619      	movne	r1, r3
 8016560:	4611      	moveq	r1, r2
 8016562:	4613      	movne	r3, r2
 8016564:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016568:	9116      	str	r1, [sp, #88]	; 0x58
 801656a:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 801656e:	f240 8387 	bls.w	8016c80 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016572:	ed94 7a07 	vldr	s14, [r4, #28]
 8016576:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801657a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801657e:	f240 837f 	bls.w	8016c80 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016582:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 8016586:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801658a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801658e:	f240 8377 	bls.w	8016c80 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016592:	6822      	ldr	r2, [r4, #0]
 8016594:	4bb1      	ldr	r3, [pc, #708]	; (801685c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 8016596:	429a      	cmp	r2, r3
 8016598:	f2c0 8372 	blt.w	8016c80 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801659c:	49b0      	ldr	r1, [pc, #704]	; (8016860 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 801659e:	6963      	ldr	r3, [r4, #20]
 80165a0:	428a      	cmp	r2, r1
 80165a2:	f300 836d 	bgt.w	8016c80 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80165a6:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 80165aa:	48ae      	ldr	r0, [pc, #696]	; (8016864 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 80165ac:	33ff      	adds	r3, #255	; 0xff
 80165ae:	4283      	cmp	r3, r0
 80165b0:	f200 8366 	bhi.w	8016c80 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80165b4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80165b6:	4dac      	ldr	r5, [pc, #688]	; (8016868 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 80165b8:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 80165bc:	33ff      	adds	r3, #255	; 0xff
 80165be:	42ab      	cmp	r3, r5
 80165c0:	f200 835e 	bhi.w	8016c80 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80165c4:	6862      	ldr	r2, [r4, #4]
 80165c6:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 80165ca:	33ff      	adds	r3, #255	; 0xff
 80165cc:	4283      	cmp	r3, r0
 80165ce:	f200 8357 	bhi.w	8016c80 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80165d2:	69a1      	ldr	r1, [r4, #24]
 80165d4:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 80165d8:	33ff      	adds	r3, #255	; 0xff
 80165da:	4283      	cmp	r3, r0
 80165dc:	f200 8350 	bhi.w	8016c80 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80165e0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80165e2:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 80165e6:	30ff      	adds	r0, #255	; 0xff
 80165e8:	42a8      	cmp	r0, r5
 80165ea:	f200 8349 	bhi.w	8016c80 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80165ee:	428a      	cmp	r2, r1
 80165f0:	f280 8110 	bge.w	8016814 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 80165f4:	429a      	cmp	r2, r3
 80165f6:	f300 8119 	bgt.w	801682c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 80165fa:	4299      	cmp	r1, r3
 80165fc:	f280 811d 	bge.w	801683a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 8016600:	2502      	movs	r5, #2
 8016602:	2701      	movs	r7, #1
 8016604:	46a9      	mov	r9, r5
 8016606:	46b8      	mov	r8, r7
 8016608:	f04f 0a00 	mov.w	sl, #0
 801660c:	4621      	mov	r1, r4
 801660e:	a849      	add	r0, sp, #292	; 0x124
 8016610:	f001 fbba 	bl	8017d88 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 8016614:	4622      	mov	r2, r4
 8016616:	4653      	mov	r3, sl
 8016618:	a949      	add	r1, sp, #292	; 0x124
 801661a:	f8cd 9000 	str.w	r9, [sp]
 801661e:	a819      	add	r0, sp, #100	; 0x64
 8016620:	f001 fce2 	bl	8017fe8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8016624:	4622      	mov	r2, r4
 8016626:	4653      	mov	r3, sl
 8016628:	a949      	add	r1, sp, #292	; 0x124
 801662a:	f8cd 8000 	str.w	r8, [sp]
 801662e:	a829      	add	r0, sp, #164	; 0xa4
 8016630:	f001 fcda 	bl	8017fe8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8016634:	4643      	mov	r3, r8
 8016636:	4622      	mov	r2, r4
 8016638:	a949      	add	r1, sp, #292	; 0x124
 801663a:	f8cd 9000 	str.w	r9, [sp]
 801663e:	a839      	add	r0, sp, #228	; 0xe4
 8016640:	f001 fcd2 	bl	8017fe8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8016644:	42af      	cmp	r7, r5
 8016646:	af12      	add	r7, sp, #72	; 0x48
 8016648:	bfb7      	itett	lt
 801664a:	2300      	movlt	r3, #0
 801664c:	2301      	movge	r3, #1
 801664e:	ad29      	addlt	r5, sp, #164	; 0xa4
 8016650:	ac19      	addlt	r4, sp, #100	; 0x64
 8016652:	bfb1      	iteee	lt
 8016654:	930e      	strlt	r3, [sp, #56]	; 0x38
 8016656:	ad19      	addge	r5, sp, #100	; 0x64
 8016658:	930e      	strge	r3, [sp, #56]	; 0x38
 801665a:	ac29      	addge	r4, sp, #164	; 0xa4
 801665c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801665e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016662:	e887 0003 	stmia.w	r7, {r0, r1}
 8016666:	b928      	cbnz	r0, 8016674 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 8016668:	4b80      	ldr	r3, [pc, #512]	; (801686c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 801666a:	6818      	ldr	r0, [r3, #0]
 801666c:	6803      	ldr	r3, [r0, #0]
 801666e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016670:	4798      	blx	r3
 8016672:	6038      	str	r0, [r7, #0]
 8016674:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8016676:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801667a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801667e:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8016680:	930c      	str	r3, [sp, #48]	; 0x30
 8016682:	990c      	ldr	r1, [sp, #48]	; 0x30
 8016684:	6963      	ldr	r3, [r4, #20]
 8016686:	440b      	add	r3, r1
 8016688:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801668c:	4408      	add	r0, r1
 801668e:	b200      	sxth	r0, r0
 8016690:	4283      	cmp	r3, r0
 8016692:	900d      	str	r0, [sp, #52]	; 0x34
 8016694:	f280 80dd 	bge.w	8016852 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 8016698:	428b      	cmp	r3, r1
 801669a:	da08      	bge.n	80166ae <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801669c:	2a00      	cmp	r2, #0
 801669e:	dd06      	ble.n	80166ae <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 80166a0:	1acb      	subs	r3, r1, r3
 80166a2:	429a      	cmp	r2, r3
 80166a4:	f2c0 80e4 	blt.w	8016870 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 80166a8:	2b00      	cmp	r3, #0
 80166aa:	f300 80e2 	bgt.w	8016872 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 80166ae:	6967      	ldr	r7, [r4, #20]
 80166b0:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 80166b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80166b6:	443b      	add	r3, r7
 80166b8:	461f      	mov	r7, r3
 80166ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80166bc:	1bdf      	subs	r7, r3, r7
 80166be:	4297      	cmp	r7, r2
 80166c0:	bfa8      	it	ge
 80166c2:	4617      	movge	r7, r2
 80166c4:	2f00      	cmp	r7, #0
 80166c6:	f340 8166 	ble.w	8016996 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 80166ca:	9b64      	ldr	r3, [sp, #400]	; 0x190
 80166cc:	6829      	ldr	r1, [r5, #0]
 80166ce:	f9b3 2000 	ldrsh.w	r2, [r3]
 80166d2:	f9bb 3000 	ldrsh.w	r3, [fp]
 80166d6:	4411      	add	r1, r2
 80166d8:	6820      	ldr	r0, [r4, #0]
 80166da:	4299      	cmp	r1, r3
 80166dc:	dd1a      	ble.n	8016714 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 80166de:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 80166e2:	4402      	add	r2, r0
 80166e4:	440b      	add	r3, r1
 80166e6:	b21b      	sxth	r3, r3
 80166e8:	429a      	cmp	r2, r3
 80166ea:	dc13      	bgt.n	8016714 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 80166ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80166ee:	a912      	add	r1, sp, #72	; 0x48
 80166f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80166f2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80166f4:	681b      	ldr	r3, [r3, #0]
 80166f6:	9206      	str	r2, [sp, #24]
 80166f8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80166fa:	9500      	str	r5, [sp, #0]
 80166fc:	9205      	str	r2, [sp, #20]
 80166fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016700:	e9cd b203 	strd	fp, r2, [sp, #12]
 8016704:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8016706:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801670a:	aa49      	add	r2, sp, #292	; 0x124
 801670c:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 8016710:	4623      	mov	r3, r4
 8016712:	47c8      	blx	r9
 8016714:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8016718:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 801671c:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8016720:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016724:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8016728:	68a1      	ldr	r1, [r4, #8]
 801672a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801672e:	ed94 6a08 	vldr	s12, [r4, #32]
 8016732:	edd4 6a07 	vldr	s13, [r4, #28]
 8016736:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801673a:	ee76 6a86 	vadd.f32	s13, s13, s12
 801673e:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8016742:	e9d4 2300 	ldrd	r2, r3, [r4]
 8016746:	edc4 6a07 	vstr	s13, [r4, #28]
 801674a:	441a      	add	r2, r3
 801674c:	6963      	ldr	r3, [r4, #20]
 801674e:	3301      	adds	r3, #1
 8016750:	6022      	str	r2, [r4, #0]
 8016752:	6163      	str	r3, [r4, #20]
 8016754:	69a3      	ldr	r3, [r4, #24]
 8016756:	3b01      	subs	r3, #1
 8016758:	61a3      	str	r3, [r4, #24]
 801675a:	6923      	ldr	r3, [r4, #16]
 801675c:	440b      	add	r3, r1
 801675e:	68e1      	ldr	r1, [r4, #12]
 8016760:	428b      	cmp	r3, r1
 8016762:	6123      	str	r3, [r4, #16]
 8016764:	db15      	blt.n	8016792 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 8016766:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 801676a:	3201      	adds	r2, #1
 801676c:	1a5b      	subs	r3, r3, r1
 801676e:	ee76 6a26 	vadd.f32	s13, s12, s13
 8016772:	6022      	str	r2, [r4, #0]
 8016774:	6123      	str	r3, [r4, #16]
 8016776:	edc4 6a07 	vstr	s13, [r4, #28]
 801677a:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 801677e:	ee36 7a87 	vadd.f32	s14, s13, s14
 8016782:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8016786:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 801678a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801678e:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8016792:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8016796:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 801679a:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 801679e:	ee37 7a27 	vadd.f32	s14, s14, s15
 80167a2:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 80167a6:	68a9      	ldr	r1, [r5, #8]
 80167a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80167ac:	ed95 6a08 	vldr	s12, [r5, #32]
 80167b0:	edd5 6a07 	vldr	s13, [r5, #28]
 80167b4:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 80167b8:	ee76 6a86 	vadd.f32	s13, s13, s12
 80167bc:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 80167c0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80167c4:	edc5 6a07 	vstr	s13, [r5, #28]
 80167c8:	441a      	add	r2, r3
 80167ca:	696b      	ldr	r3, [r5, #20]
 80167cc:	3301      	adds	r3, #1
 80167ce:	602a      	str	r2, [r5, #0]
 80167d0:	616b      	str	r3, [r5, #20]
 80167d2:	69ab      	ldr	r3, [r5, #24]
 80167d4:	3b01      	subs	r3, #1
 80167d6:	61ab      	str	r3, [r5, #24]
 80167d8:	692b      	ldr	r3, [r5, #16]
 80167da:	440b      	add	r3, r1
 80167dc:	68e9      	ldr	r1, [r5, #12]
 80167de:	428b      	cmp	r3, r1
 80167e0:	612b      	str	r3, [r5, #16]
 80167e2:	db15      	blt.n	8016810 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 80167e4:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 80167e8:	3201      	adds	r2, #1
 80167ea:	1a5b      	subs	r3, r3, r1
 80167ec:	ee76 6a26 	vadd.f32	s13, s12, s13
 80167f0:	602a      	str	r2, [r5, #0]
 80167f2:	612b      	str	r3, [r5, #16]
 80167f4:	edc5 6a07 	vstr	s13, [r5, #28]
 80167f8:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 80167fc:	ee36 7a87 	vadd.f32	s14, s13, s14
 8016800:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8016804:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8016808:	ee77 7a27 	vadd.f32	s15, s14, s15
 801680c:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8016810:	3f01      	subs	r7, #1
 8016812:	e757      	b.n	80166c4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 8016814:	4299      	cmp	r1, r3
 8016816:	dc13      	bgt.n	8016840 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 8016818:	429a      	cmp	r2, r3
 801681a:	da14      	bge.n	8016846 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 801681c:	2502      	movs	r5, #2
 801681e:	2703      	movs	r7, #3
 8016820:	f04f 0800 	mov.w	r8, #0
 8016824:	46a9      	mov	r9, r5
 8016826:	f04f 0a01 	mov.w	sl, #1
 801682a:	e6ef      	b.n	801660c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 801682c:	2501      	movs	r5, #1
 801682e:	2700      	movs	r7, #0
 8016830:	46a9      	mov	r9, r5
 8016832:	46b8      	mov	r8, r7
 8016834:	f04f 0a02 	mov.w	sl, #2
 8016838:	e6e8      	b.n	801660c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 801683a:	2501      	movs	r5, #1
 801683c:	2702      	movs	r7, #2
 801683e:	e6e1      	b.n	8016604 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 8016840:	2500      	movs	r5, #0
 8016842:	2701      	movs	r7, #1
 8016844:	e7f4      	b.n	8016830 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 8016846:	2702      	movs	r7, #2
 8016848:	2503      	movs	r5, #3
 801684a:	f04f 0900 	mov.w	r9, #0
 801684e:	46b8      	mov	r8, r7
 8016850:	e7e9      	b.n	8016826 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 8016852:	4613      	mov	r3, r2
 8016854:	e728      	b.n	80166a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 8016856:	bf00      	nop
 8016858:	200243d4 	.word	0x200243d4
 801685c:	fffd8f01 	.word	0xfffd8f01
 8016860:	00027100 	.word	0x00027100
 8016864:	0004e1ff 	.word	0x0004e1ff
 8016868:	0004e1fe 	.word	0x0004e1fe
 801686c:	200243dc 	.word	0x200243dc
 8016870:	4613      	mov	r3, r2
 8016872:	992b      	ldr	r1, [sp, #172]	; 0xac
 8016874:	469e      	mov	lr, r3
 8016876:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 8016878:	469c      	mov	ip, r3
 801687a:	9111      	str	r1, [sp, #68]	; 0x44
 801687c:	f04f 0900 	mov.w	r9, #0
 8016880:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 8016884:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 8016888:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 801688c:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 8016890:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 8016894:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8016898:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 801689c:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 80168a0:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 80168a4:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 80168a8:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 80168ac:	f1bc 0f00 	cmp.w	ip, #0
 80168b0:	d147      	bne.n	8016942 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 80168b2:	eb03 0c07 	add.w	ip, r3, r7
 80168b6:	1ad7      	subs	r7, r2, r3
 80168b8:	f1b9 0f00 	cmp.w	r9, #0
 80168bc:	d009      	beq.n	80168d2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 80168be:	9029      	str	r0, [sp, #164]	; 0xa4
 80168c0:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 80168c4:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 80168c8:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 80168cc:	912d      	str	r1, [sp, #180]	; 0xb4
 80168ce:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 80168d2:	991b      	ldr	r1, [sp, #108]	; 0x6c
 80168d4:	f04f 0800 	mov.w	r8, #0
 80168d8:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 80168dc:	9111      	str	r1, [sp, #68]	; 0x44
 80168de:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 80168e2:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 80168e6:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 80168ea:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 80168ee:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 80168f2:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 80168f6:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 80168fa:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 80168fe:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8016902:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8016906:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 801690a:	f1be 0f00 	cmp.w	lr, #0
 801690e:	d031      	beq.n	8016974 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 8016910:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8016912:	4450      	add	r0, sl
 8016914:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8016918:	4431      	add	r1, r6
 801691a:	ee37 7a04 	vadd.f32	s14, s14, s8
 801691e:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8016922:	4549      	cmp	r1, r9
 8016924:	db08      	blt.n	8016938 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 8016926:	ee77 7a85 	vadd.f32	s15, s15, s10
 801692a:	3001      	adds	r0, #1
 801692c:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8016930:	eba1 0109 	sub.w	r1, r1, r9
 8016934:	ee37 7a06 	vadd.f32	s14, s14, s12
 8016938:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 801693c:	f04f 0801 	mov.w	r8, #1
 8016940:	e7e3      	b.n	801690a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 8016942:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8016944:	4450      	add	r0, sl
 8016946:	ee37 7a24 	vadd.f32	s14, s14, s9
 801694a:	4431      	add	r1, r6
 801694c:	ee77 7a84 	vadd.f32	s15, s15, s8
 8016950:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8016954:	4541      	cmp	r1, r8
 8016956:	db08      	blt.n	801696a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 8016958:	ee76 6a85 	vadd.f32	s13, s13, s10
 801695c:	3001      	adds	r0, #1
 801695e:	ee37 7a25 	vadd.f32	s14, s14, s11
 8016962:	eba1 0108 	sub.w	r1, r1, r8
 8016966:	ee77 7a86 	vadd.f32	s15, s15, s12
 801696a:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 801696e:	f04f 0901 	mov.w	r9, #1
 8016972:	e79b      	b.n	80168ac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 8016974:	449c      	add	ip, r3
 8016976:	1aff      	subs	r7, r7, r3
 8016978:	f1b8 0f00 	cmp.w	r8, #0
 801697c:	d009      	beq.n	8016992 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 801697e:	9019      	str	r0, [sp, #100]	; 0x64
 8016980:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8016984:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8016988:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 801698c:	911d      	str	r1, [sp, #116]	; 0x74
 801698e:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8016992:	1ad2      	subs	r2, r2, r3
 8016994:	e68b      	b.n	80166ae <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8016996:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016998:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 801699a:	2b00      	cmp	r3, #0
 801699c:	f000 80d1 	beq.w	8016b42 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 80169a0:	ad19      	add	r5, sp, #100	; 0x64
 80169a2:	ac39      	add	r4, sp, #228	; 0xe4
 80169a4:	9b64      	ldr	r3, [sp, #400]	; 0x190
 80169a6:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 80169aa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80169ae:	930c      	str	r3, [sp, #48]	; 0x30
 80169b0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80169b2:	6963      	ldr	r3, [r4, #20]
 80169b4:	440b      	add	r3, r1
 80169b6:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 80169ba:	4408      	add	r0, r1
 80169bc:	b200      	sxth	r0, r0
 80169be:	4283      	cmp	r3, r0
 80169c0:	900d      	str	r0, [sp, #52]	; 0x34
 80169c2:	f280 80c1 	bge.w	8016b48 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 80169c6:	428b      	cmp	r3, r1
 80169c8:	da08      	bge.n	80169dc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 80169ca:	2a00      	cmp	r2, #0
 80169cc:	dd06      	ble.n	80169dc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 80169ce:	1acb      	subs	r3, r1, r3
 80169d0:	429a      	cmp	r2, r3
 80169d2:	f2c0 80bb 	blt.w	8016b4c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 80169d6:	2b00      	cmp	r3, #0
 80169d8:	f300 80b9 	bgt.w	8016b4e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 80169dc:	6967      	ldr	r7, [r4, #20]
 80169de:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 80169e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80169e4:	443b      	add	r3, r7
 80169e6:	461f      	mov	r7, r3
 80169e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80169ea:	1bdf      	subs	r7, r3, r7
 80169ec:	4297      	cmp	r7, r2
 80169ee:	bfa8      	it	ge
 80169f0:	4617      	movge	r7, r2
 80169f2:	2f00      	cmp	r7, #0
 80169f4:	f340 813c 	ble.w	8016c70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 80169f8:	9b64      	ldr	r3, [sp, #400]	; 0x190
 80169fa:	6829      	ldr	r1, [r5, #0]
 80169fc:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016a00:	f9bb 3000 	ldrsh.w	r3, [fp]
 8016a04:	4411      	add	r1, r2
 8016a06:	6820      	ldr	r0, [r4, #0]
 8016a08:	4299      	cmp	r1, r3
 8016a0a:	dd1a      	ble.n	8016a42 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8016a0c:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8016a10:	4402      	add	r2, r0
 8016a12:	440b      	add	r3, r1
 8016a14:	b21b      	sxth	r3, r3
 8016a16:	429a      	cmp	r2, r3
 8016a18:	dc13      	bgt.n	8016a42 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8016a1a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016a1c:	a912      	add	r1, sp, #72	; 0x48
 8016a1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016a20:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016a22:	681b      	ldr	r3, [r3, #0]
 8016a24:	9206      	str	r2, [sp, #24]
 8016a26:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016a28:	9500      	str	r5, [sp, #0]
 8016a2a:	9205      	str	r2, [sp, #20]
 8016a2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016a2e:	e9cd b203 	strd	fp, r2, [sp, #12]
 8016a32:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8016a34:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8016a38:	aa49      	add	r2, sp, #292	; 0x124
 8016a3a:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 8016a3e:	4623      	mov	r3, r4
 8016a40:	47c8      	blx	r9
 8016a42:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8016a46:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8016a4a:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8016a4e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016a52:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8016a56:	68a1      	ldr	r1, [r4, #8]
 8016a58:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016a5c:	ed94 6a08 	vldr	s12, [r4, #32]
 8016a60:	edd4 6a07 	vldr	s13, [r4, #28]
 8016a64:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8016a68:	ee76 6a86 	vadd.f32	s13, s13, s12
 8016a6c:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8016a70:	e9d4 2300 	ldrd	r2, r3, [r4]
 8016a74:	edc4 6a07 	vstr	s13, [r4, #28]
 8016a78:	441a      	add	r2, r3
 8016a7a:	6963      	ldr	r3, [r4, #20]
 8016a7c:	3301      	adds	r3, #1
 8016a7e:	6022      	str	r2, [r4, #0]
 8016a80:	6163      	str	r3, [r4, #20]
 8016a82:	69a3      	ldr	r3, [r4, #24]
 8016a84:	3b01      	subs	r3, #1
 8016a86:	61a3      	str	r3, [r4, #24]
 8016a88:	6923      	ldr	r3, [r4, #16]
 8016a8a:	440b      	add	r3, r1
 8016a8c:	68e1      	ldr	r1, [r4, #12]
 8016a8e:	428b      	cmp	r3, r1
 8016a90:	6123      	str	r3, [r4, #16]
 8016a92:	db15      	blt.n	8016ac0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 8016a94:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8016a98:	3201      	adds	r2, #1
 8016a9a:	1a5b      	subs	r3, r3, r1
 8016a9c:	ee76 6a26 	vadd.f32	s13, s12, s13
 8016aa0:	6022      	str	r2, [r4, #0]
 8016aa2:	6123      	str	r3, [r4, #16]
 8016aa4:	edc4 6a07 	vstr	s13, [r4, #28]
 8016aa8:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8016aac:	ee36 7a87 	vadd.f32	s14, s13, s14
 8016ab0:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8016ab4:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8016ab8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016abc:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8016ac0:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8016ac4:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8016ac8:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8016acc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016ad0:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8016ad4:	68a9      	ldr	r1, [r5, #8]
 8016ad6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016ada:	ed95 6a08 	vldr	s12, [r5, #32]
 8016ade:	edd5 6a07 	vldr	s13, [r5, #28]
 8016ae2:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8016ae6:	ee76 6a86 	vadd.f32	s13, s13, s12
 8016aea:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8016aee:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016af2:	edc5 6a07 	vstr	s13, [r5, #28]
 8016af6:	441a      	add	r2, r3
 8016af8:	696b      	ldr	r3, [r5, #20]
 8016afa:	3301      	adds	r3, #1
 8016afc:	602a      	str	r2, [r5, #0]
 8016afe:	616b      	str	r3, [r5, #20]
 8016b00:	69ab      	ldr	r3, [r5, #24]
 8016b02:	3b01      	subs	r3, #1
 8016b04:	61ab      	str	r3, [r5, #24]
 8016b06:	692b      	ldr	r3, [r5, #16]
 8016b08:	440b      	add	r3, r1
 8016b0a:	68e9      	ldr	r1, [r5, #12]
 8016b0c:	428b      	cmp	r3, r1
 8016b0e:	612b      	str	r3, [r5, #16]
 8016b10:	db15      	blt.n	8016b3e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 8016b12:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8016b16:	3201      	adds	r2, #1
 8016b18:	1a5b      	subs	r3, r3, r1
 8016b1a:	ee76 6a26 	vadd.f32	s13, s12, s13
 8016b1e:	602a      	str	r2, [r5, #0]
 8016b20:	612b      	str	r3, [r5, #16]
 8016b22:	edc5 6a07 	vstr	s13, [r5, #28]
 8016b26:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8016b2a:	ee36 7a87 	vadd.f32	s14, s13, s14
 8016b2e:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8016b32:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8016b36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016b3a:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8016b3e:	3f01      	subs	r7, #1
 8016b40:	e757      	b.n	80169f2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 8016b42:	ad39      	add	r5, sp, #228	; 0xe4
 8016b44:	ac19      	add	r4, sp, #100	; 0x64
 8016b46:	e72d      	b.n	80169a4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 8016b48:	4613      	mov	r3, r2
 8016b4a:	e744      	b.n	80169d6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 8016b4c:	4613      	mov	r3, r2
 8016b4e:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 8016b50:	469e      	mov	lr, r3
 8016b52:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 8016b56:	461f      	mov	r7, r3
 8016b58:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 8016b5c:	f04f 0900 	mov.w	r9, #0
 8016b60:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 8016b64:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 8016b68:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 8016b6c:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 8016b70:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 8016b74:	993d      	ldr	r1, [sp, #244]	; 0xf4
 8016b76:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 8016b7a:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 8016b7e:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 8016b82:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 8016b86:	960e      	str	r6, [sp, #56]	; 0x38
 8016b88:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 8016b8c:	2f00      	cmp	r7, #0
 8016b8e:	d146      	bne.n	8016c1e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 8016b90:	449c      	add	ip, r3
 8016b92:	1ad7      	subs	r7, r2, r3
 8016b94:	f1b9 0f00 	cmp.w	r9, #0
 8016b98:	d009      	beq.n	8016bae <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 8016b9a:	9039      	str	r0, [sp, #228]	; 0xe4
 8016b9c:	913d      	str	r1, [sp, #244]	; 0xf4
 8016b9e:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 8016ba2:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 8016ba6:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 8016baa:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 8016bae:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8016bb0:	f04f 0800 	mov.w	r8, #0
 8016bb4:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8016bb8:	910e      	str	r1, [sp, #56]	; 0x38
 8016bba:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8016bbe:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8016bc2:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8016bc6:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8016bca:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8016bce:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8016bd2:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 8016bd6:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 8016bda:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8016bde:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8016be2:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 8016be6:	f1be 0f00 	cmp.w	lr, #0
 8016bea:	d030      	beq.n	8016c4e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 8016bec:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8016bee:	4450      	add	r0, sl
 8016bf0:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8016bf4:	4431      	add	r1, r6
 8016bf6:	ee37 7a04 	vadd.f32	s14, s14, s8
 8016bfa:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8016bfe:	4549      	cmp	r1, r9
 8016c00:	db08      	blt.n	8016c14 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 8016c02:	ee77 7a85 	vadd.f32	s15, s15, s10
 8016c06:	3001      	adds	r0, #1
 8016c08:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8016c0c:	eba1 0109 	sub.w	r1, r1, r9
 8016c10:	ee37 7a06 	vadd.f32	s14, s14, s12
 8016c14:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 8016c18:	f04f 0801 	mov.w	r8, #1
 8016c1c:	e7e3      	b.n	8016be6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 8016c1e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8016c20:	4450      	add	r0, sl
 8016c22:	ee37 7a24 	vadd.f32	s14, s14, s9
 8016c26:	4431      	add	r1, r6
 8016c28:	ee77 7a84 	vadd.f32	s15, s15, s8
 8016c2c:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8016c30:	4541      	cmp	r1, r8
 8016c32:	db08      	blt.n	8016c46 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 8016c34:	ee76 6a85 	vadd.f32	s13, s13, s10
 8016c38:	3001      	adds	r0, #1
 8016c3a:	ee37 7a25 	vadd.f32	s14, s14, s11
 8016c3e:	eba1 0108 	sub.w	r1, r1, r8
 8016c42:	ee77 7a86 	vadd.f32	s15, s15, s12
 8016c46:	3f01      	subs	r7, #1
 8016c48:	f04f 0901 	mov.w	r9, #1
 8016c4c:	e79e      	b.n	8016b8c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 8016c4e:	449c      	add	ip, r3
 8016c50:	1aff      	subs	r7, r7, r3
 8016c52:	f1b8 0f00 	cmp.w	r8, #0
 8016c56:	d009      	beq.n	8016c6c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 8016c58:	9019      	str	r0, [sp, #100]	; 0x64
 8016c5a:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8016c5e:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8016c62:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8016c66:	911d      	str	r1, [sp, #116]	; 0x74
 8016c68:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8016c6c:	1ad2      	subs	r2, r2, r3
 8016c6e:	e6b5      	b.n	80169dc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8016c70:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016c72:	681b      	ldr	r3, [r3, #0]
 8016c74:	b923      	cbnz	r3, 8016c80 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016c76:	4b04      	ldr	r3, [pc, #16]	; (8016c88 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 8016c78:	6818      	ldr	r0, [r3, #0]
 8016c7a:	6803      	ldr	r3, [r0, #0]
 8016c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016c7e:	4798      	blx	r3
 8016c80:	b05b      	add	sp, #364	; 0x16c
 8016c82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c86:	bf00      	nop
 8016c88:	200243dc 	.word	0x200243dc

08016c8c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 8016c8c:	2b03      	cmp	r3, #3
 8016c8e:	d818      	bhi.n	8016cc2 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 8016c90:	e8df f003 	tbb	[pc, r3]
 8016c94:	130d0602 	.word	0x130d0602
 8016c98:	f9b0 2000 	ldrsh.w	r2, [r0]
 8016c9c:	1850      	adds	r0, r2, r1
 8016c9e:	4770      	bx	lr
 8016ca0:	8803      	ldrh	r3, [r0, #0]
 8016ca2:	8880      	ldrh	r0, [r0, #4]
 8016ca4:	4418      	add	r0, r3
 8016ca6:	b200      	sxth	r0, r0
 8016ca8:	1a80      	subs	r0, r0, r2
 8016caa:	3801      	subs	r0, #1
 8016cac:	4770      	bx	lr
 8016cae:	8803      	ldrh	r3, [r0, #0]
 8016cb0:	8880      	ldrh	r0, [r0, #4]
 8016cb2:	4418      	add	r0, r3
 8016cb4:	b200      	sxth	r0, r0
 8016cb6:	1a40      	subs	r0, r0, r1
 8016cb8:	e7f7      	b.n	8016caa <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 8016cba:	f9b0 0000 	ldrsh.w	r0, [r0]
 8016cbe:	4410      	add	r0, r2
 8016cc0:	4770      	bx	lr
 8016cc2:	2000      	movs	r0, #0
 8016cc4:	4770      	bx	lr

08016cc6 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 8016cc6:	2b03      	cmp	r3, #3
 8016cc8:	d817      	bhi.n	8016cfa <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 8016cca:	e8df f003 	tbb	[pc, r3]
 8016cce:	0602      	.short	0x0602
 8016cd0:	1009      	.short	0x1009
 8016cd2:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8016cd6:	1850      	adds	r0, r2, r1
 8016cd8:	4770      	bx	lr
 8016cda:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8016cde:	e7fa      	b.n	8016cd6 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 8016ce0:	8843      	ldrh	r3, [r0, #2]
 8016ce2:	88c0      	ldrh	r0, [r0, #6]
 8016ce4:	4418      	add	r0, r3
 8016ce6:	b200      	sxth	r0, r0
 8016ce8:	1a80      	subs	r0, r0, r2
 8016cea:	3801      	subs	r0, #1
 8016cec:	4770      	bx	lr
 8016cee:	8843      	ldrh	r3, [r0, #2]
 8016cf0:	88c0      	ldrh	r0, [r0, #6]
 8016cf2:	4418      	add	r0, r3
 8016cf4:	b200      	sxth	r0, r0
 8016cf6:	1a40      	subs	r0, r0, r1
 8016cf8:	e7f7      	b.n	8016cea <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 8016cfa:	2000      	movs	r0, #0
 8016cfc:	4770      	bx	lr
	...

08016d00 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 8016d00:	4b01      	ldr	r3, [pc, #4]	; (8016d08 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 8016d02:	2200      	movs	r2, #0
 8016d04:	601a      	str	r2, [r3, #0]
 8016d06:	4770      	bx	lr
 8016d08:	200243e4 	.word	0x200243e4

08016d0c <_ZN8touchgfx16TouchCalibration4clzuEm>:
 8016d0c:	4603      	mov	r3, r0
 8016d0e:	b1c8      	cbz	r0, 8016d44 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 8016d10:	0c02      	lsrs	r2, r0, #16
 8016d12:	0412      	lsls	r2, r2, #16
 8016d14:	b9a2      	cbnz	r2, 8016d40 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 8016d16:	0403      	lsls	r3, r0, #16
 8016d18:	2010      	movs	r0, #16
 8016d1a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8016d1e:	bf04      	itt	eq
 8016d20:	021b      	lsleq	r3, r3, #8
 8016d22:	3008      	addeq	r0, #8
 8016d24:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8016d28:	bf04      	itt	eq
 8016d2a:	011b      	lsleq	r3, r3, #4
 8016d2c:	3004      	addeq	r0, #4
 8016d2e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8016d32:	bf04      	itt	eq
 8016d34:	009b      	lsleq	r3, r3, #2
 8016d36:	3002      	addeq	r0, #2
 8016d38:	2b00      	cmp	r3, #0
 8016d3a:	db04      	blt.n	8016d46 <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 8016d3c:	3001      	adds	r0, #1
 8016d3e:	4770      	bx	lr
 8016d40:	2000      	movs	r0, #0
 8016d42:	e7ea      	b.n	8016d1a <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 8016d44:	2020      	movs	r0, #32
 8016d46:	4770      	bx	lr

08016d48 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 8016d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d4c:	b087      	sub	sp, #28
 8016d4e:	4681      	mov	r9, r0
 8016d50:	4698      	mov	r8, r3
 8016d52:	4610      	mov	r0, r2
 8016d54:	460d      	mov	r5, r1
 8016d56:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 8016d5a:	b981      	cbnz	r1, 8016d7e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 8016d5c:	b14b      	cbz	r3, 8016d72 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 8016d5e:	460b      	mov	r3, r1
 8016d60:	464a      	mov	r2, r9
 8016d62:	4641      	mov	r1, r8
 8016d64:	e9cd 4700 	strd	r4, r7, [sp]
 8016d68:	f7ff ffee 	bl	8016d48 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8016d6c:	b007      	add	sp, #28
 8016d6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016d72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016d76:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8016d7a:	603b      	str	r3, [r7, #0]
 8016d7c:	e7f6      	b.n	8016d6c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 8016d7e:	fa32 fa01 	lsrs.w	sl, r2, r1
 8016d82:	d107      	bne.n	8016d94 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 8016d84:	fb09 f602 	mul.w	r6, r9, r2
 8016d88:	fbb6 f0f4 	udiv	r0, r6, r4
 8016d8c:	fb04 6610 	mls	r6, r4, r0, r6
 8016d90:	603e      	str	r6, [r7, #0]
 8016d92:	e7eb      	b.n	8016d6c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 8016d94:	2601      	movs	r6, #1
 8016d96:	fa09 fb01 	lsl.w	fp, r9, r1
 8016d9a:	408e      	lsls	r6, r1
 8016d9c:	fbbb f3f4 	udiv	r3, fp, r4
 8016da0:	3e01      	subs	r6, #1
 8016da2:	9302      	str	r3, [sp, #8]
 8016da4:	fb0a f303 	mul.w	r3, sl, r3
 8016da8:	4016      	ands	r6, r2
 8016daa:	9303      	str	r3, [sp, #12]
 8016dac:	4630      	mov	r0, r6
 8016dae:	f7ff ffad 	bl	8016d0c <_ZN8touchgfx16TouchCalibration4clzuEm>
 8016db2:	464a      	mov	r2, r9
 8016db4:	460b      	mov	r3, r1
 8016db6:	4601      	mov	r1, r0
 8016db8:	4630      	mov	r0, r6
 8016dba:	e9cd 4700 	strd	r4, r7, [sp]
 8016dbe:	f7ff ffc3 	bl	8016d48 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8016dc2:	9b02      	ldr	r3, [sp, #8]
 8016dc4:	4606      	mov	r6, r0
 8016dc6:	eb05 0108 	add.w	r1, r5, r8
 8016dca:	fb04 bb13 	mls	fp, r4, r3, fp
 8016dce:	4658      	mov	r0, fp
 8016dd0:	f7ff ff9c 	bl	8016d0c <_ZN8touchgfx16TouchCalibration4clzuEm>
 8016dd4:	ab05      	add	r3, sp, #20
 8016dd6:	465a      	mov	r2, fp
 8016dd8:	e9cd 4300 	strd	r4, r3, [sp]
 8016ddc:	4603      	mov	r3, r0
 8016dde:	4650      	mov	r0, sl
 8016de0:	f7ff ffb2 	bl	8016d48 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8016de4:	6839      	ldr	r1, [r7, #0]
 8016de6:	9a05      	ldr	r2, [sp, #20]
 8016de8:	9b03      	ldr	r3, [sp, #12]
 8016dea:	4411      	add	r1, r2
 8016dec:	fbb1 f2f4 	udiv	r2, r1, r4
 8016df0:	18d3      	adds	r3, r2, r3
 8016df2:	fb04 1412 	mls	r4, r4, r2, r1
 8016df6:	441e      	add	r6, r3
 8016df8:	603c      	str	r4, [r7, #0]
 8016dfa:	4430      	add	r0, r6
 8016dfc:	e7b6      	b.n	8016d6c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

08016dfe <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 8016dfe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016e02:	b085      	sub	sp, #20
 8016e04:	f1b0 0900 	subs.w	r9, r0, #0
 8016e08:	461d      	mov	r5, r3
 8016e0a:	4617      	mov	r7, r2
 8016e0c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8016e0e:	bfbb      	ittet	lt
 8016e10:	f1c9 0900 	rsblt	r9, r9, #0
 8016e14:	f04f 36ff 	movlt.w	r6, #4294967295	; 0xffffffff
 8016e18:	2601      	movge	r6, #1
 8016e1a:	6823      	ldrlt	r3, [r4, #0]
 8016e1c:	bfbc      	itt	lt
 8016e1e:	425b      	neglt	r3, r3
 8016e20:	6023      	strlt	r3, [r4, #0]
 8016e22:	2a00      	cmp	r2, #0
 8016e24:	da04      	bge.n	8016e30 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 8016e26:	6823      	ldr	r3, [r4, #0]
 8016e28:	4257      	negs	r7, r2
 8016e2a:	4276      	negs	r6, r6
 8016e2c:	425b      	negs	r3, r3
 8016e2e:	6023      	str	r3, [r4, #0]
 8016e30:	2d00      	cmp	r5, #0
 8016e32:	4638      	mov	r0, r7
 8016e34:	bfba      	itte	lt
 8016e36:	426d      	neglt	r5, r5
 8016e38:	f04f 38ff 	movlt.w	r8, #4294967295	; 0xffffffff
 8016e3c:	f04f 0801 	movge.w	r8, #1
 8016e40:	f7ff ff64 	bl	8016d0c <_ZN8touchgfx16TouchCalibration4clzuEm>
 8016e44:	ab03      	add	r3, sp, #12
 8016e46:	463a      	mov	r2, r7
 8016e48:	e9cd 5300 	strd	r5, r3, [sp]
 8016e4c:	4603      	mov	r3, r0
 8016e4e:	4648      	mov	r0, r9
 8016e50:	f7ff ff7a 	bl	8016d48 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8016e54:	6823      	ldr	r3, [r4, #0]
 8016e56:	9a03      	ldr	r2, [sp, #12]
 8016e58:	4546      	cmp	r6, r8
 8016e5a:	441a      	add	r2, r3
 8016e5c:	fb92 f3f5 	sdiv	r3, r2, r5
 8016e60:	4418      	add	r0, r3
 8016e62:	fb05 2313 	mls	r3, r5, r3, r2
 8016e66:	bf18      	it	ne
 8016e68:	4240      	negne	r0, r0
 8016e6a:	1c72      	adds	r2, r6, #1
 8016e6c:	6023      	str	r3, [r4, #0]
 8016e6e:	d105      	bne.n	8016e7c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 8016e70:	2b00      	cmp	r3, #0
 8016e72:	f1c3 0200 	rsb	r2, r3, #0
 8016e76:	db0b      	blt.n	8016e90 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 8016e78:	6022      	str	r2, [r4, #0]
 8016e7a:	e006      	b.n	8016e8a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8016e7c:	2e01      	cmp	r6, #1
 8016e7e:	d104      	bne.n	8016e8a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8016e80:	2b00      	cmp	r3, #0
 8016e82:	da02      	bge.n	8016e8a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8016e84:	442b      	add	r3, r5
 8016e86:	3801      	subs	r0, #1
 8016e88:	6023      	str	r3, [r4, #0]
 8016e8a:	b005      	add	sp, #20
 8016e8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016e90:	3801      	subs	r0, #1
 8016e92:	1b52      	subs	r2, r2, r5
 8016e94:	e7f0      	b.n	8016e78 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

08016e98 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 8016e98:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8016e9c:	4c1c      	ldr	r4, [pc, #112]	; (8016f10 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 8016e9e:	4605      	mov	r5, r0
 8016ea0:	6807      	ldr	r7, [r0, #0]
 8016ea2:	69a3      	ldr	r3, [r4, #24]
 8016ea4:	b92b      	cbnz	r3, 8016eb2 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 8016ea6:	6840      	ldr	r0, [r0, #4]
 8016ea8:	e9c5 7000 	strd	r7, r0, [r5]
 8016eac:	b004      	add	sp, #16
 8016eae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016eb2:	f04f 0802 	mov.w	r8, #2
 8016eb6:	68a2      	ldr	r2, [r4, #8]
 8016eb8:	ae04      	add	r6, sp, #16
 8016eba:	6820      	ldr	r0, [r4, #0]
 8016ebc:	fb93 f1f8 	sdiv	r1, r3, r8
 8016ec0:	440a      	add	r2, r1
 8016ec2:	69e1      	ldr	r1, [r4, #28]
 8016ec4:	f846 2d04 	str.w	r2, [r6, #-4]!
 8016ec8:	463a      	mov	r2, r7
 8016eca:	9600      	str	r6, [sp, #0]
 8016ecc:	f7ff ff97 	bl	8016dfe <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8016ed0:	69a3      	ldr	r3, [r4, #24]
 8016ed2:	4607      	mov	r7, r0
 8016ed4:	686a      	ldr	r2, [r5, #4]
 8016ed6:	6a21      	ldr	r1, [r4, #32]
 8016ed8:	9600      	str	r6, [sp, #0]
 8016eda:	6860      	ldr	r0, [r4, #4]
 8016edc:	f7ff ff8f 	bl	8016dfe <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8016ee0:	69a3      	ldr	r3, [r4, #24]
 8016ee2:	6962      	ldr	r2, [r4, #20]
 8016ee4:	4407      	add	r7, r0
 8016ee6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8016ee8:	9600      	str	r6, [sp, #0]
 8016eea:	68e0      	ldr	r0, [r4, #12]
 8016eec:	fb93 f8f8 	sdiv	r8, r3, r8
 8016ef0:	4442      	add	r2, r8
 8016ef2:	9203      	str	r2, [sp, #12]
 8016ef4:	682a      	ldr	r2, [r5, #0]
 8016ef6:	f7ff ff82 	bl	8016dfe <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8016efa:	4680      	mov	r8, r0
 8016efc:	9600      	str	r6, [sp, #0]
 8016efe:	69a3      	ldr	r3, [r4, #24]
 8016f00:	686a      	ldr	r2, [r5, #4]
 8016f02:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8016f04:	6920      	ldr	r0, [r4, #16]
 8016f06:	f7ff ff7a 	bl	8016dfe <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8016f0a:	4440      	add	r0, r8
 8016f0c:	e7cc      	b.n	8016ea8 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 8016f0e:	bf00      	nop
 8016f10:	200243e8 	.word	0x200243e8

08016f14 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8016f14:	4b07      	ldr	r3, [pc, #28]	; (8016f34 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 8016f16:	781b      	ldrb	r3, [r3, #0]
 8016f18:	2b01      	cmp	r3, #1
 8016f1a:	d109      	bne.n	8016f30 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 8016f1c:	f9b1 3000 	ldrsh.w	r3, [r1]
 8016f20:	f9b0 2000 	ldrsh.w	r2, [r0]
 8016f24:	8003      	strh	r3, [r0, #0]
 8016f26:	4b04      	ldr	r3, [pc, #16]	; (8016f38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 8016f28:	881b      	ldrh	r3, [r3, #0]
 8016f2a:	3b01      	subs	r3, #1
 8016f2c:	1a9b      	subs	r3, r3, r2
 8016f2e:	800b      	strh	r3, [r1, #0]
 8016f30:	4770      	bx	lr
 8016f32:	bf00      	nop
 8016f34:	200243d4 	.word	0x200243d4
 8016f38:	200243d0 	.word	0x200243d0

08016f3c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 8016f3c:	4b07      	ldr	r3, [pc, #28]	; (8016f5c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 8016f3e:	b510      	push	{r4, lr}
 8016f40:	781b      	ldrb	r3, [r3, #0]
 8016f42:	2b01      	cmp	r3, #1
 8016f44:	d108      	bne.n	8016f58 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 8016f46:	4b06      	ldr	r3, [pc, #24]	; (8016f60 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 8016f48:	880c      	ldrh	r4, [r1, #0]
 8016f4a:	881b      	ldrh	r3, [r3, #0]
 8016f4c:	f9b0 2000 	ldrsh.w	r2, [r0]
 8016f50:	3b01      	subs	r3, #1
 8016f52:	1b1b      	subs	r3, r3, r4
 8016f54:	8003      	strh	r3, [r0, #0]
 8016f56:	800a      	strh	r2, [r1, #0]
 8016f58:	bd10      	pop	{r4, pc}
 8016f5a:	bf00      	nop
 8016f5c:	200243d4 	.word	0x200243d4
 8016f60:	200243d0 	.word	0x200243d0

08016f64 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 8016f64:	4b08      	ldr	r3, [pc, #32]	; (8016f88 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 8016f66:	781b      	ldrb	r3, [r3, #0]
 8016f68:	2b01      	cmp	r3, #1
 8016f6a:	d10c      	bne.n	8016f86 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 8016f6c:	8803      	ldrh	r3, [r0, #0]
 8016f6e:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 8016f72:	8842      	ldrh	r2, [r0, #2]
 8016f74:	8002      	strh	r2, [r0, #0]
 8016f76:	185a      	adds	r2, r3, r1
 8016f78:	4b04      	ldr	r3, [pc, #16]	; (8016f8c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 8016f7a:	881b      	ldrh	r3, [r3, #0]
 8016f7c:	1a9b      	subs	r3, r3, r2
 8016f7e:	8043      	strh	r3, [r0, #2]
 8016f80:	88c3      	ldrh	r3, [r0, #6]
 8016f82:	80c1      	strh	r1, [r0, #6]
 8016f84:	8083      	strh	r3, [r0, #4]
 8016f86:	4770      	bx	lr
 8016f88:	200243d4 	.word	0x200243d4
 8016f8c:	200243d0 	.word	0x200243d0

08016f90 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8016f90:	4b07      	ldr	r3, [pc, #28]	; (8016fb0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 8016f92:	b510      	push	{r4, lr}
 8016f94:	781b      	ldrb	r3, [r3, #0]
 8016f96:	2b01      	cmp	r3, #1
 8016f98:	d108      	bne.n	8016fac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 8016f9a:	f9b1 3000 	ldrsh.w	r3, [r1]
 8016f9e:	f9b0 4000 	ldrsh.w	r4, [r0]
 8016fa2:	8003      	strh	r3, [r0, #0]
 8016fa4:	8893      	ldrh	r3, [r2, #4]
 8016fa6:	3b01      	subs	r3, #1
 8016fa8:	1b1b      	subs	r3, r3, r4
 8016faa:	800b      	strh	r3, [r1, #0]
 8016fac:	bd10      	pop	{r4, pc}
 8016fae:	bf00      	nop
 8016fb0:	200243d4 	.word	0x200243d4

08016fb4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 8016fb4:	4b0a      	ldr	r3, [pc, #40]	; (8016fe0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 8016fb6:	460a      	mov	r2, r1
 8016fb8:	b510      	push	{r4, lr}
 8016fba:	781b      	ldrb	r3, [r3, #0]
 8016fbc:	2b01      	cmp	r3, #1
 8016fbe:	d10d      	bne.n	8016fdc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8016fc0:	8881      	ldrh	r1, [r0, #4]
 8016fc2:	8803      	ldrh	r3, [r0, #0]
 8016fc4:	440b      	add	r3, r1
 8016fc6:	4601      	mov	r1, r0
 8016fc8:	3b01      	subs	r3, #1
 8016fca:	f821 3b02 	strh.w	r3, [r1], #2
 8016fce:	f7ff ffdf 	bl	8016f90 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8016fd2:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8016fd6:	88c2      	ldrh	r2, [r0, #6]
 8016fd8:	80c3      	strh	r3, [r0, #6]
 8016fda:	8082      	strh	r2, [r0, #4]
 8016fdc:	bd10      	pop	{r4, pc}
 8016fde:	bf00      	nop
 8016fe0:	200243d4 	.word	0x200243d4

08016fe4 <_ZN8touchgfx11Application11getInstanceEv>:
 8016fe4:	4b01      	ldr	r3, [pc, #4]	; (8016fec <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 8016fe6:	6818      	ldr	r0, [r3, #0]
 8016fe8:	4770      	bx	lr
 8016fea:	bf00      	nop
 8016fec:	2002441c 	.word	0x2002441c

08016ff0 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8016ff0:	4b03      	ldr	r3, [pc, #12]	; (8017000 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 8016ff2:	2200      	movs	r2, #0
 8016ff4:	801a      	strh	r2, [r3, #0]
 8016ff6:	805a      	strh	r2, [r3, #2]
 8016ff8:	809a      	strh	r2, [r3, #4]
 8016ffa:	80da      	strh	r2, [r3, #6]
 8016ffc:	4770      	bx	lr
 8016ffe:	bf00      	nop
 8017000:	20024414 	.word	0x20024414

08017004 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8017004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017008:	b09d      	sub	sp, #116	; 0x74
 801700a:	4606      	mov	r6, r0
 801700c:	4614      	mov	r4, r2
 801700e:	468a      	mov	sl, r1
 8017010:	a803      	add	r0, sp, #12
 8017012:	461d      	mov	r5, r3
 8017014:	f000 f9d2 	bl	80173bc <_ZN8touchgfx12TextProviderC1Ev>
 8017018:	6833      	ldr	r3, [r6, #0]
 801701a:	4630      	mov	r0, r6
 801701c:	f242 0b0b 	movw	fp, #8203	; 0x200b
 8017020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017022:	4798      	blx	r3
 8017024:	6833      	ldr	r3, [r6, #0]
 8017026:	4607      	mov	r7, r0
 8017028:	4630      	mov	r0, r6
 801702a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801702c:	4798      	blx	r3
 801702e:	462a      	mov	r2, r5
 8017030:	2500      	movs	r5, #0
 8017032:	4621      	mov	r1, r4
 8017034:	9000      	str	r0, [sp, #0]
 8017036:	463b      	mov	r3, r7
 8017038:	462c      	mov	r4, r5
 801703a:	46a9      	mov	r9, r5
 801703c:	46a8      	mov	r8, r5
 801703e:	a803      	add	r0, sp, #12
 8017040:	f000 fa0f 	bl	8017462 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8017044:	2300      	movs	r3, #0
 8017046:	9302      	str	r3, [sp, #8]
 8017048:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801704c:	429c      	cmp	r4, r3
 801704e:	d002      	beq.n	8017056 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 8017050:	455c      	cmp	r4, fp
 8017052:	bf18      	it	ne
 8017054:	4625      	movne	r5, r4
 8017056:	ab02      	add	r3, sp, #8
 8017058:	4632      	mov	r2, r6
 801705a:	4651      	mov	r1, sl
 801705c:	a803      	add	r0, sp, #12
 801705e:	f000 fcf5 	bl	8017a4c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8017062:	4604      	mov	r4, r0
 8017064:	b108      	cbz	r0, 801706a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 8017066:	280a      	cmp	r0, #10
 8017068:	d10a      	bne.n	8017080 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 801706a:	45c1      	cmp	r9, r8
 801706c:	bf38      	it	cc
 801706e:	46c1      	movcc	r9, r8
 8017070:	f04f 0800 	mov.w	r8, #0
 8017074:	2c00      	cmp	r4, #0
 8017076:	d1e5      	bne.n	8017044 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8017078:	4648      	mov	r0, r9
 801707a:	b01d      	add	sp, #116	; 0x74
 801707c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017080:	9a02      	ldr	r2, [sp, #8]
 8017082:	2a00      	cmp	r2, #0
 8017084:	d0de      	beq.n	8017044 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8017086:	7b57      	ldrb	r7, [r2, #13]
 8017088:	4629      	mov	r1, r5
 801708a:	6833      	ldr	r3, [r6, #0]
 801708c:	007f      	lsls	r7, r7, #1
 801708e:	8894      	ldrh	r4, [r2, #4]
 8017090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017092:	f407 7080 	and.w	r0, r7, #256	; 0x100
 8017096:	7a97      	ldrb	r7, [r2, #10]
 8017098:	4307      	orrs	r7, r0
 801709a:	4630      	mov	r0, r6
 801709c:	4798      	blx	r3
 801709e:	4438      	add	r0, r7
 80170a0:	4480      	add	r8, r0
 80170a2:	fa1f f888 	uxth.w	r8, r8
 80170a6:	e7e5      	b.n	8017074 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

080170a8 <_ZNK8touchgfx4Font12getCharWidthEt>:
 80170a8:	b508      	push	{r3, lr}
 80170aa:	6803      	ldr	r3, [r0, #0]
 80170ac:	68db      	ldr	r3, [r3, #12]
 80170ae:	4798      	blx	r3
 80170b0:	b128      	cbz	r0, 80170be <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 80170b2:	7b43      	ldrb	r3, [r0, #13]
 80170b4:	7a80      	ldrb	r0, [r0, #10]
 80170b6:	005b      	lsls	r3, r3, #1
 80170b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80170bc:	4318      	orrs	r0, r3
 80170be:	bd08      	pop	{r3, pc}

080170c0 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 80170c0:	b40e      	push	{r1, r2, r3}
 80170c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80170c4:	b09e      	sub	sp, #120	; 0x78
 80170c6:	4605      	mov	r5, r0
 80170c8:	ab23      	add	r3, sp, #140	; 0x8c
 80170ca:	a805      	add	r0, sp, #20
 80170cc:	f853 4b04 	ldr.w	r4, [r3], #4
 80170d0:	9303      	str	r3, [sp, #12]
 80170d2:	f000 f973 	bl	80173bc <_ZN8touchgfx12TextProviderC1Ev>
 80170d6:	682b      	ldr	r3, [r5, #0]
 80170d8:	4628      	mov	r0, r5
 80170da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80170dc:	4798      	blx	r3
 80170de:	682b      	ldr	r3, [r5, #0]
 80170e0:	4606      	mov	r6, r0
 80170e2:	4628      	mov	r0, r5
 80170e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80170e6:	4798      	blx	r3
 80170e8:	4633      	mov	r3, r6
 80170ea:	4621      	mov	r1, r4
 80170ec:	ae1e      	add	r6, sp, #120	; 0x78
 80170ee:	2400      	movs	r4, #0
 80170f0:	9000      	str	r0, [sp, #0]
 80170f2:	9a03      	ldr	r2, [sp, #12]
 80170f4:	a805      	add	r0, sp, #20
 80170f6:	f000 f9b4 	bl	8017462 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80170fa:	f846 4d68 	str.w	r4, [r6, #-104]!
 80170fe:	462a      	mov	r2, r5
 8017100:	4633      	mov	r3, r6
 8017102:	4621      	mov	r1, r4
 8017104:	a805      	add	r0, sp, #20
 8017106:	f000 fca1 	bl	8017a4c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801710a:	b300      	cbz	r0, 801714e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 801710c:	280a      	cmp	r0, #10
 801710e:	d01a      	beq.n	8017146 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8017110:	9f04      	ldr	r7, [sp, #16]
 8017112:	b1c7      	cbz	r7, 8017146 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8017114:	7b78      	ldrb	r0, [r7, #13]
 8017116:	7a3b      	ldrb	r3, [r7, #8]
 8017118:	00c1      	lsls	r1, r0, #3
 801711a:	88ea      	ldrh	r2, [r5, #6]
 801711c:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8017120:	4319      	orrs	r1, r3
 8017122:	0643      	lsls	r3, r0, #25
 8017124:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8017128:	bf48      	it	mi
 801712a:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 801712e:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8017132:	bf48      	it	mi
 8017134:	b219      	sxthmi	r1, r3
 8017136:	79fb      	ldrb	r3, [r7, #7]
 8017138:	4303      	orrs	r3, r0
 801713a:	4413      	add	r3, r2
 801713c:	1a5b      	subs	r3, r3, r1
 801713e:	b21b      	sxth	r3, r3
 8017140:	429c      	cmp	r4, r3
 8017142:	bfb8      	it	lt
 8017144:	461c      	movlt	r4, r3
 8017146:	4633      	mov	r3, r6
 8017148:	462a      	mov	r2, r5
 801714a:	2100      	movs	r1, #0
 801714c:	e7da      	b.n	8017104 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 801714e:	b2a0      	uxth	r0, r4
 8017150:	b01e      	add	sp, #120	; 0x78
 8017152:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8017156:	b003      	add	sp, #12
 8017158:	4770      	bx	lr

0801715a <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 801715a:	7a43      	ldrb	r3, [r0, #9]
 801715c:	8880      	ldrh	r0, [r0, #4]
 801715e:	4418      	add	r0, r3
 8017160:	b280      	uxth	r0, r0
 8017162:	4770      	bx	lr

08017164 <_ZNK8touchgfx4Font13getFontHeightEv>:
 8017164:	6803      	ldr	r3, [r0, #0]
 8017166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017168:	4718      	bx	r3

0801716a <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801716a:	b40e      	push	{r1, r2, r3}
 801716c:	b570      	push	{r4, r5, r6, lr}
 801716e:	b09d      	sub	sp, #116	; 0x74
 8017170:	4604      	mov	r4, r0
 8017172:	ab21      	add	r3, sp, #132	; 0x84
 8017174:	a803      	add	r0, sp, #12
 8017176:	f853 5b04 	ldr.w	r5, [r3], #4
 801717a:	9302      	str	r3, [sp, #8]
 801717c:	f000 f91e 	bl	80173bc <_ZN8touchgfx12TextProviderC1Ev>
 8017180:	6823      	ldr	r3, [r4, #0]
 8017182:	4620      	mov	r0, r4
 8017184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017186:	4798      	blx	r3
 8017188:	6823      	ldr	r3, [r4, #0]
 801718a:	4606      	mov	r6, r0
 801718c:	4620      	mov	r0, r4
 801718e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017190:	2401      	movs	r4, #1
 8017192:	4798      	blx	r3
 8017194:	4633      	mov	r3, r6
 8017196:	9000      	str	r0, [sp, #0]
 8017198:	4629      	mov	r1, r5
 801719a:	9a02      	ldr	r2, [sp, #8]
 801719c:	a803      	add	r0, sp, #12
 801719e:	f000 f960 	bl	8017462 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80171a2:	a803      	add	r0, sp, #12
 80171a4:	f000 fcd2 	bl	8017b4c <_ZN8touchgfx12TextProvider11getNextCharEv>
 80171a8:	b2a3      	uxth	r3, r4
 80171aa:	b138      	cbz	r0, 80171bc <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 80171ac:	280a      	cmp	r0, #10
 80171ae:	a803      	add	r0, sp, #12
 80171b0:	bf04      	itt	eq
 80171b2:	3301      	addeq	r3, #1
 80171b4:	b21c      	sxtheq	r4, r3
 80171b6:	f000 fcc9 	bl	8017b4c <_ZN8touchgfx12TextProvider11getNextCharEv>
 80171ba:	e7f5      	b.n	80171a8 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 80171bc:	4618      	mov	r0, r3
 80171be:	b01d      	add	sp, #116	; 0x74
 80171c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80171c4:	b003      	add	sp, #12
 80171c6:	4770      	bx	lr

080171c8 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 80171c8:	b40e      	push	{r1, r2, r3}
 80171ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80171cc:	b09e      	sub	sp, #120	; 0x78
 80171ce:	4604      	mov	r4, r0
 80171d0:	ab23      	add	r3, sp, #140	; 0x8c
 80171d2:	a805      	add	r0, sp, #20
 80171d4:	f853 5b04 	ldr.w	r5, [r3], #4
 80171d8:	9303      	str	r3, [sp, #12]
 80171da:	f000 f8ef 	bl	80173bc <_ZN8touchgfx12TextProviderC1Ev>
 80171de:	6823      	ldr	r3, [r4, #0]
 80171e0:	4620      	mov	r0, r4
 80171e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80171e4:	4798      	blx	r3
 80171e6:	6823      	ldr	r3, [r4, #0]
 80171e8:	4606      	mov	r6, r0
 80171ea:	4620      	mov	r0, r4
 80171ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80171ee:	4798      	blx	r3
 80171f0:	4633      	mov	r3, r6
 80171f2:	4629      	mov	r1, r5
 80171f4:	9000      	str	r0, [sp, #0]
 80171f6:	9a03      	ldr	r2, [sp, #12]
 80171f8:	a805      	add	r0, sp, #20
 80171fa:	f000 f932 	bl	8017462 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80171fe:	ad1e      	add	r5, sp, #120	; 0x78
 8017200:	2100      	movs	r1, #0
 8017202:	f647 76ff 	movw	r6, #32767	; 0x7fff
 8017206:	4622      	mov	r2, r4
 8017208:	a805      	add	r0, sp, #20
 801720a:	f845 1d68 	str.w	r1, [r5, #-104]!
 801720e:	462b      	mov	r3, r5
 8017210:	f000 fc1c 	bl	8017a4c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8017214:	b1d8      	cbz	r0, 801724e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 8017216:	280a      	cmp	r0, #10
 8017218:	d012      	beq.n	8017240 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 801721a:	9804      	ldr	r0, [sp, #16]
 801721c:	b180      	cbz	r0, 8017240 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 801721e:	7b47      	ldrb	r7, [r0, #13]
 8017220:	88e2      	ldrh	r2, [r4, #6]
 8017222:	00fb      	lsls	r3, r7, #3
 8017224:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8017228:	7a03      	ldrb	r3, [r0, #8]
 801722a:	430b      	orrs	r3, r1
 801722c:	0679      	lsls	r1, r7, #25
 801722e:	bf44      	itt	mi
 8017230:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8017234:	b21b      	sxthmi	r3, r3
 8017236:	1ad3      	subs	r3, r2, r3
 8017238:	b21b      	sxth	r3, r3
 801723a:	429e      	cmp	r6, r3
 801723c:	bfa8      	it	ge
 801723e:	461e      	movge	r6, r3
 8017240:	462b      	mov	r3, r5
 8017242:	4622      	mov	r2, r4
 8017244:	2100      	movs	r1, #0
 8017246:	a805      	add	r0, sp, #20
 8017248:	f000 fc00 	bl	8017a4c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801724c:	e7e2      	b.n	8017214 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 801724e:	4630      	mov	r0, r6
 8017250:	b01e      	add	sp, #120	; 0x78
 8017252:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8017256:	b003      	add	sp, #12
 8017258:	4770      	bx	lr
	...

0801725c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 801725c:	b530      	push	{r4, r5, lr}
 801725e:	8083      	strh	r3, [r0, #4]
 8017260:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8017264:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8017268:	80c3      	strh	r3, [r0, #6]
 801726a:	f89d 3010 	ldrb.w	r3, [sp, #16]
 801726e:	6141      	str	r1, [r0, #20]
 8017270:	7203      	strb	r3, [r0, #8]
 8017272:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8017276:	8302      	strh	r2, [r0, #24]
 8017278:	7243      	strb	r3, [r0, #9]
 801727a:	7a83      	ldrb	r3, [r0, #10]
 801727c:	f365 0306 	bfi	r3, r5, #0, #7
 8017280:	f89d 501c 	ldrb.w	r5, [sp, #28]
 8017284:	f365 13c7 	bfi	r3, r5, #7, #1
 8017288:	7283      	strb	r3, [r0, #10]
 801728a:	f89d 3020 	ldrb.w	r3, [sp, #32]
 801728e:	72c3      	strb	r3, [r0, #11]
 8017290:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8017294:	7303      	strb	r3, [r0, #12]
 8017296:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 801729a:	81c3      	strh	r3, [r0, #14]
 801729c:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 80172a0:	8203      	strh	r3, [r0, #16]
 80172a2:	4b01      	ldr	r3, [pc, #4]	; (80172a8 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 80172a4:	6003      	str	r3, [r0, #0]
 80172a6:	bd30      	pop	{r4, r5, pc}
 80172a8:	0801eb50 	.word	0x0801eb50

080172ac <_ZNK8touchgfx9ConstFont4findEt>:
 80172ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80172ae:	6944      	ldr	r4, [r0, #20]
 80172b0:	b3bc      	cbz	r4, 8017322 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80172b2:	88a3      	ldrh	r3, [r4, #4]
 80172b4:	8b02      	ldrh	r2, [r0, #24]
 80172b6:	1acb      	subs	r3, r1, r3
 80172b8:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 80172bc:	d431      	bmi.n	8017322 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80172be:	4293      	cmp	r3, r2
 80172c0:	dd0c      	ble.n	80172dc <_ZNK8touchgfx9ConstFont4findEt+0x30>
 80172c2:	230e      	movs	r3, #14
 80172c4:	fb03 4302 	mla	r3, r3, r2, r4
 80172c8:	889b      	ldrh	r3, [r3, #4]
 80172ca:	1a5b      	subs	r3, r3, r1
 80172cc:	1ad3      	subs	r3, r2, r3
 80172ce:	429a      	cmp	r2, r3
 80172d0:	db27      	blt.n	8017322 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80172d2:	2b00      	cmp	r3, #0
 80172d4:	bfbc      	itt	lt
 80172d6:	2302      	movlt	r3, #2
 80172d8:	fb92 f3f3 	sdivlt	r3, r2, r3
 80172dc:	2500      	movs	r5, #0
 80172de:	260e      	movs	r6, #14
 80172e0:	4295      	cmp	r5, r2
 80172e2:	dc1e      	bgt.n	8017322 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80172e4:	fb06 4003 	mla	r0, r6, r3, r4
 80172e8:	8887      	ldrh	r7, [r0, #4]
 80172ea:	42b9      	cmp	r1, r7
 80172ec:	d01a      	beq.n	8017324 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 80172ee:	d20d      	bcs.n	801730c <_ZNK8touchgfx9ConstFont4findEt+0x60>
 80172f0:	1e5a      	subs	r2, r3, #1
 80172f2:	4295      	cmp	r5, r2
 80172f4:	dc15      	bgt.n	8017322 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80172f6:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 80172fa:	1a5b      	subs	r3, r3, r1
 80172fc:	1ad3      	subs	r3, r2, r3
 80172fe:	429a      	cmp	r2, r3
 8017300:	db0f      	blt.n	8017322 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8017302:	429d      	cmp	r5, r3
 8017304:	ddec      	ble.n	80172e0 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8017306:	1953      	adds	r3, r2, r5
 8017308:	105b      	asrs	r3, r3, #1
 801730a:	e7e9      	b.n	80172e0 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801730c:	1c5d      	adds	r5, r3, #1
 801730e:	42aa      	cmp	r2, r5
 8017310:	db07      	blt.n	8017322 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8017312:	8a43      	ldrh	r3, [r0, #18]
 8017314:	1acb      	subs	r3, r1, r3
 8017316:	442b      	add	r3, r5
 8017318:	429d      	cmp	r5, r3
 801731a:	dc02      	bgt.n	8017322 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801731c:	429a      	cmp	r2, r3
 801731e:	dadf      	bge.n	80172e0 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8017320:	e7f1      	b.n	8017306 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 8017322:	2000      	movs	r0, #0
 8017324:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017326 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 8017326:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017328:	4604      	mov	r4, r0
 801732a:	4617      	mov	r7, r2
 801732c:	461e      	mov	r6, r3
 801732e:	b911      	cbnz	r1, 8017336 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8017330:	2500      	movs	r5, #0
 8017332:	4628      	mov	r0, r5
 8017334:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017336:	290a      	cmp	r1, #10
 8017338:	d0fa      	beq.n	8017330 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801733a:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801733e:	4291      	cmp	r1, r2
 8017340:	d0f6      	beq.n	8017330 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8017342:	f242 020b 	movw	r2, #8203	; 0x200b
 8017346:	4291      	cmp	r1, r2
 8017348:	d0f2      	beq.n	8017330 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801734a:	f7ff ffaf 	bl	80172ac <_ZNK8touchgfx9ConstFont4findEt>
 801734e:	4605      	mov	r5, r0
 8017350:	b950      	cbnz	r0, 8017368 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 8017352:	6823      	ldr	r3, [r4, #0]
 8017354:	4620      	mov	r0, r4
 8017356:	691b      	ldr	r3, [r3, #16]
 8017358:	4798      	blx	r3
 801735a:	4601      	mov	r1, r0
 801735c:	4620      	mov	r0, r4
 801735e:	f7ff ffa5 	bl	80172ac <_ZNK8touchgfx9ConstFont4findEt>
 8017362:	4605      	mov	r5, r0
 8017364:	2800      	cmp	r0, #0
 8017366:	d0e3      	beq.n	8017330 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8017368:	6823      	ldr	r3, [r4, #0]
 801736a:	4629      	mov	r1, r5
 801736c:	4620      	mov	r0, r4
 801736e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017370:	4798      	blx	r3
 8017372:	6038      	str	r0, [r7, #0]
 8017374:	6823      	ldr	r3, [r4, #0]
 8017376:	4620      	mov	r0, r4
 8017378:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801737a:	4798      	blx	r3
 801737c:	7030      	strb	r0, [r6, #0]
 801737e:	e7d8      	b.n	8017332 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

08017380 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 8017380:	2000      	movs	r0, #0
 8017382:	4770      	bx	lr

08017384 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 8017384:	2001      	movs	r0, #1
 8017386:	4770      	bx	lr

08017388 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 8017388:	2002      	movs	r0, #2
 801738a:	4770      	bx	lr

0801738c <_ZN8touchgfx12GestureEventD1Ev>:
 801738c:	4770      	bx	lr

0801738e <_ZN8touchgfx9DragEventD1Ev>:
 801738e:	4770      	bx	lr

08017390 <_ZN8touchgfx10ClickEventD1Ev>:
 8017390:	4770      	bx	lr

08017392 <_ZN8touchgfx10ClickEventD0Ev>:
 8017392:	b510      	push	{r4, lr}
 8017394:	4604      	mov	r4, r0
 8017396:	210c      	movs	r1, #12
 8017398:	f003 f864 	bl	801a464 <_ZdlPvj>
 801739c:	4620      	mov	r0, r4
 801739e:	bd10      	pop	{r4, pc}

080173a0 <_ZN8touchgfx9DragEventD0Ev>:
 80173a0:	b510      	push	{r4, lr}
 80173a2:	4604      	mov	r4, r0
 80173a4:	2110      	movs	r1, #16
 80173a6:	f003 f85d 	bl	801a464 <_ZdlPvj>
 80173aa:	4620      	mov	r0, r4
 80173ac:	bd10      	pop	{r4, pc}

080173ae <_ZN8touchgfx12GestureEventD0Ev>:
 80173ae:	b510      	push	{r4, lr}
 80173b0:	4604      	mov	r4, r0
 80173b2:	210c      	movs	r1, #12
 80173b4:	f003 f856 	bl	801a464 <_ZdlPvj>
 80173b8:	4620      	mov	r0, r4
 80173ba:	bd10      	pop	{r4, pc}

080173bc <_ZN8touchgfx12TextProviderC1Ev>:
 80173bc:	b538      	push	{r3, r4, r5, lr}
 80173be:	2500      	movs	r5, #0
 80173c0:	2302      	movs	r3, #2
 80173c2:	4604      	mov	r4, r0
 80173c4:	220e      	movs	r2, #14
 80173c6:	7403      	strb	r3, [r0, #16]
 80173c8:	4629      	mov	r1, r5
 80173ca:	6145      	str	r5, [r0, #20]
 80173cc:	7605      	strb	r5, [r0, #24]
 80173ce:	83c5      	strh	r5, [r0, #30]
 80173d0:	8405      	strh	r5, [r0, #32]
 80173d2:	86c5      	strh	r5, [r0, #54]	; 0x36
 80173d4:	8705      	strh	r5, [r0, #56]	; 0x38
 80173d6:	87c5      	strh	r5, [r0, #62]	; 0x3e
 80173d8:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 80173dc:	e9c0 5500 	strd	r5, r5, [r0]
 80173e0:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 80173e4:	304c      	adds	r0, #76	; 0x4c
 80173e6:	f003 f8e9 	bl	801a5bc <memset>
 80173ea:	2301      	movs	r3, #1
 80173ec:	4620      	mov	r0, r4
 80173ee:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 80173f2:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 80173f6:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 80173fa:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 80173fe:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 8017402:	f7f8 fba5 	bl	800fb50 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 8017406:	4620      	mov	r0, r4
 8017408:	bd38      	pop	{r3, r4, r5, pc}

0801740a <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801740a:	b530      	push	{r4, r5, lr}
 801740c:	2500      	movs	r5, #0
 801740e:	2401      	movs	r4, #1
 8017410:	6843      	ldr	r3, [r0, #4]
 8017412:	b913      	cbnz	r3, 801741a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 8017414:	6803      	ldr	r3, [r0, #0]
 8017416:	b313      	cbz	r3, 801745e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8017418:	6043      	str	r3, [r0, #4]
 801741a:	7e03      	ldrb	r3, [r0, #24]
 801741c:	b143      	cbz	r3, 8017430 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801741e:	6943      	ldr	r3, [r0, #20]
 8017420:	b12b      	cbz	r3, 801742e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8017422:	881a      	ldrh	r2, [r3, #0]
 8017424:	b11a      	cbz	r2, 801742e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8017426:	1c9a      	adds	r2, r3, #2
 8017428:	6142      	str	r2, [r0, #20]
 801742a:	8818      	ldrh	r0, [r3, #0]
 801742c:	bd30      	pop	{r4, r5, pc}
 801742e:	7605      	strb	r5, [r0, #24]
 8017430:	6843      	ldr	r3, [r0, #4]
 8017432:	8819      	ldrh	r1, [r3, #0]
 8017434:	b199      	cbz	r1, 801745e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8017436:	1c9a      	adds	r2, r3, #2
 8017438:	2902      	cmp	r1, #2
 801743a:	6042      	str	r2, [r0, #4]
 801743c:	d1f5      	bne.n	801742a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801743e:	7c03      	ldrb	r3, [r0, #16]
 8017440:	2b01      	cmp	r3, #1
 8017442:	d8e5      	bhi.n	8017410 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8017444:	1c5a      	adds	r2, r3, #1
 8017446:	3302      	adds	r3, #2
 8017448:	7402      	strb	r2, [r0, #16]
 801744a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801744e:	6143      	str	r3, [r0, #20]
 8017450:	2b00      	cmp	r3, #0
 8017452:	d0dd      	beq.n	8017410 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8017454:	881b      	ldrh	r3, [r3, #0]
 8017456:	2b00      	cmp	r3, #0
 8017458:	d0da      	beq.n	8017410 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801745a:	7604      	strb	r4, [r0, #24]
 801745c:	e7d8      	b.n	8017410 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801745e:	2000      	movs	r0, #0
 8017460:	e7e4      	b.n	801742c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

08017462 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 8017462:	6001      	str	r1, [r0, #0]
 8017464:	2100      	movs	r1, #0
 8017466:	b430      	push	{r4, r5}
 8017468:	6041      	str	r1, [r0, #4]
 801746a:	6815      	ldr	r5, [r2, #0]
 801746c:	6085      	str	r5, [r0, #8]
 801746e:	6852      	ldr	r2, [r2, #4]
 8017470:	6443      	str	r3, [r0, #68]	; 0x44
 8017472:	9b02      	ldr	r3, [sp, #8]
 8017474:	60c2      	str	r2, [r0, #12]
 8017476:	7401      	strb	r1, [r0, #16]
 8017478:	6141      	str	r1, [r0, #20]
 801747a:	7601      	strb	r1, [r0, #24]
 801747c:	8701      	strh	r1, [r0, #56]	; 0x38
 801747e:	8401      	strh	r1, [r0, #32]
 8017480:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 8017484:	6483      	str	r3, [r0, #72]	; 0x48
 8017486:	bc30      	pop	{r4, r5}
 8017488:	f7f8 bb62 	b.w	800fb50 <_ZN8touchgfx12TextProvider18initializeInternalEv>

0801748c <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801748c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801748e:	4605      	mov	r5, r0
 8017490:	4608      	mov	r0, r1
 8017492:	b1f1      	cbz	r1, 80174d2 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 8017494:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 8017498:	460b      	mov	r3, r1
 801749a:	f101 0708 	add.w	r7, r1, #8
 801749e:	4622      	mov	r2, r4
 80174a0:	6818      	ldr	r0, [r3, #0]
 80174a2:	3308      	adds	r3, #8
 80174a4:	f853 1c04 	ldr.w	r1, [r3, #-4]
 80174a8:	4626      	mov	r6, r4
 80174aa:	42bb      	cmp	r3, r7
 80174ac:	c603      	stmia	r6!, {r0, r1}
 80174ae:	4634      	mov	r4, r6
 80174b0:	d1f6      	bne.n	80174a0 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 80174b2:	6818      	ldr	r0, [r3, #0]
 80174b4:	6030      	str	r0, [r6, #0]
 80174b6:	4610      	mov	r0, r2
 80174b8:	889b      	ldrh	r3, [r3, #4]
 80174ba:	80b3      	strh	r3, [r6, #4]
 80174bc:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 80174c0:	015b      	lsls	r3, r3, #5
 80174c2:	f403 7180 	and.w	r1, r3, #256	; 0x100
 80174c6:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 80174ca:	430b      	orrs	r3, r1
 80174cc:	425b      	negs	r3, r3
 80174ce:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 80174d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080174d4 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 80174d4:	b538      	push	{r3, r4, r5, lr}
 80174d6:	460c      	mov	r4, r1
 80174d8:	6811      	ldr	r1, [r2, #0]
 80174da:	4610      	mov	r0, r2
 80174dc:	68cd      	ldr	r5, [r1, #12]
 80174de:	4619      	mov	r1, r3
 80174e0:	47a8      	blx	r5
 80174e2:	2800      	cmp	r0, #0
 80174e4:	bf08      	it	eq
 80174e6:	4620      	moveq	r0, r4
 80174e8:	bd38      	pop	{r3, r4, r5, pc}
	...

080174ec <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 80174ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80174ee:	4604      	mov	r4, r0
 80174f0:	4615      	mov	r5, r2
 80174f2:	4608      	mov	r0, r1
 80174f4:	b93a      	cbnz	r2, 8017506 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 80174f6:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 80174fa:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 80174fe:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 8017502:	4628      	mov	r0, r5
 8017504:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017506:	f892 c00d 	ldrb.w	ip, [r2, #13]
 801750a:	f46f 6763 	mvn.w	r7, #3632	; 0xe30
 801750e:	8893      	ldrh	r3, [r2, #4]
 8017510:	ea4f 160c 	mov.w	r6, ip, lsl #4
 8017514:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8017518:	79ee      	ldrb	r6, [r5, #7]
 801751a:	4316      	orrs	r6, r2
 801751c:	19da      	adds	r2, r3, r7
 801751e:	b291      	uxth	r1, r2
 8017520:	b2b7      	uxth	r7, r6
 8017522:	291d      	cmp	r1, #29
 8017524:	d87b      	bhi.n	801761e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 8017526:	2201      	movs	r2, #1
 8017528:	10f6      	asrs	r6, r6, #3
 801752a:	408a      	lsls	r2, r1
 801752c:	4974      	ldr	r1, [pc, #464]	; (8017700 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
 801752e:	420a      	tst	r2, r1
 8017530:	d12e      	bne.n	8017590 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 8017532:	f412 7f60 	tst.w	r2, #896	; 0x380
 8017536:	d072      	beq.n	801761e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 8017538:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 801753c:	462b      	mov	r3, r5
 801753e:	f105 0e08 	add.w	lr, r5, #8
 8017542:	4615      	mov	r5, r2
 8017544:	6818      	ldr	r0, [r3, #0]
 8017546:	3308      	adds	r3, #8
 8017548:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801754c:	4694      	mov	ip, r2
 801754e:	4573      	cmp	r3, lr
 8017550:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8017554:	4662      	mov	r2, ip
 8017556:	d1f5      	bne.n	8017544 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 8017558:	6818      	ldr	r0, [r3, #0]
 801755a:	f8cc 0000 	str.w	r0, [ip]
 801755e:	889b      	ldrh	r3, [r3, #4]
 8017560:	f8ac 3004 	strh.w	r3, [ip, #4]
 8017564:	b2b3      	uxth	r3, r6
 8017566:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 801756a:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 801756e:	1aca      	subs	r2, r1, r3
 8017570:	1bcf      	subs	r7, r1, r7
 8017572:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 8017576:	b292      	uxth	r2, r2
 8017578:	1afb      	subs	r3, r7, r3
 801757a:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 801757e:	10d2      	asrs	r2, r2, #3
 8017580:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8017584:	4302      	orrs	r2, r0
 8017586:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 801758a:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 801758e:	e7b8      	b.n	8017502 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 8017590:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8017592:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8017596:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 8017598:	f640 6333 	movw	r3, #3635	; 0xe33
 801759c:	4299      	cmp	r1, r3
 801759e:	d110      	bne.n	80175c2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd6>
 80175a0:	6803      	ldr	r3, [r0, #0]
 80175a2:	68db      	ldr	r3, [r3, #12]
 80175a4:	4798      	blx	r3
 80175a6:	7b41      	ldrb	r1, [r0, #13]
 80175a8:	00cb      	lsls	r3, r1, #3
 80175aa:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80175ae:	7a03      	ldrb	r3, [r0, #8]
 80175b0:	0648      	lsls	r0, r1, #25
 80175b2:	ea43 0302 	orr.w	r3, r3, r2
 80175b6:	bf44      	itt	mi
 80175b8:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80175bc:	b21b      	sxthmi	r3, r3
 80175be:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 80175c2:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 80175c6:	462a      	mov	r2, r5
 80175c8:	f105 0c08 	add.w	ip, r5, #8
 80175cc:	443b      	add	r3, r7
 80175ce:	4433      	add	r3, r6
 80175d0:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 80175d4:	b29b      	uxth	r3, r3
 80175d6:	4635      	mov	r5, r6
 80175d8:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 80175dc:	6810      	ldr	r0, [r2, #0]
 80175de:	3208      	adds	r2, #8
 80175e0:	f852 1c04 	ldr.w	r1, [r2, #-4]
 80175e4:	4637      	mov	r7, r6
 80175e6:	4562      	cmp	r2, ip
 80175e8:	c703      	stmia	r7!, {r0, r1}
 80175ea:	463e      	mov	r6, r7
 80175ec:	d1f6      	bne.n	80175dc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf0>
 80175ee:	6810      	ldr	r0, [r2, #0]
 80175f0:	6038      	str	r0, [r7, #0]
 80175f2:	8892      	ldrh	r2, [r2, #4]
 80175f4:	80ba      	strh	r2, [r7, #4]
 80175f6:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 80175fa:	10db      	asrs	r3, r3, #3
 80175fc:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8017600:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8017604:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8017608:	4313      	orrs	r3, r2
 801760a:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 801760e:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8017612:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 8017616:	1a9b      	subs	r3, r3, r2
 8017618:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 801761c:	e771      	b.n	8017502 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801761e:	f023 0204 	bic.w	r2, r3, #4
 8017622:	f640 611b 	movw	r1, #3611	; 0xe1b
 8017626:	428a      	cmp	r2, r1
 8017628:	d003      	beq.n	8017632 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x146>
 801762a:	f640 621d 	movw	r2, #3613	; 0xe1d
 801762e:	4293      	cmp	r3, r2
 8017630:	d120      	bne.n	8017674 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x188>
 8017632:	3b01      	subs	r3, #1
 8017634:	4602      	mov	r2, r0
 8017636:	4629      	mov	r1, r5
 8017638:	4620      	mov	r0, r4
 801763a:	b29b      	uxth	r3, r3
 801763c:	f7ff ff4a 	bl	80174d4 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8017640:	7b41      	ldrb	r1, [r0, #13]
 8017642:	00cb      	lsls	r3, r1, #3
 8017644:	0649      	lsls	r1, r1, #25
 8017646:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801764a:	7a03      	ldrb	r3, [r0, #8]
 801764c:	ea43 0302 	orr.w	r3, r3, r2
 8017650:	bf44      	itt	mi
 8017652:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8017656:	b21b      	sxthmi	r3, r3
 8017658:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801765c:	7b6b      	ldrb	r3, [r5, #13]
 801765e:	7aaa      	ldrb	r2, [r5, #10]
 8017660:	005b      	lsls	r3, r3, #1
 8017662:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017666:	4313      	orrs	r3, r2
 8017668:	115a      	asrs	r2, r3, #5
 801766a:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801766e:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 8017672:	e035      	b.n	80176e0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f4>
 8017674:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 8017678:	f01c 0f40 	tst.w	ip, #64	; 0x40
 801767c:	f402 7180 	and.w	r1, r2, #256	; 0x100
 8017680:	7a2a      	ldrb	r2, [r5, #8]
 8017682:	ea42 0201 	orr.w	r2, r2, r1
 8017686:	f640 6109 	movw	r1, #3593	; 0xe09
 801768a:	bf1c      	itt	ne
 801768c:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 8017690:	b212      	sxthne	r2, r2
 8017692:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 8017696:	f023 0210 	bic.w	r2, r3, #16
 801769a:	428a      	cmp	r2, r1
 801769c:	d003      	beq.n	80176a6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
 801769e:	f640 6213 	movw	r2, #3603	; 0xe13
 80176a2:	4293      	cmp	r3, r2
 80176a4:	d129      	bne.n	80176fa <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20e>
 80176a6:	7b6e      	ldrb	r6, [r5, #13]
 80176a8:	4629      	mov	r1, r5
 80176aa:	0076      	lsls	r6, r6, #1
 80176ac:	f406 7280 	and.w	r2, r6, #256	; 0x100
 80176b0:	7aae      	ldrb	r6, [r5, #10]
 80176b2:	4316      	orrs	r6, r2
 80176b4:	f640 6213 	movw	r2, #3603	; 0xe13
 80176b8:	4293      	cmp	r3, r2
 80176ba:	4602      	mov	r2, r0
 80176bc:	4620      	mov	r0, r4
 80176be:	bf16      	itet	ne
 80176c0:	f103 33ff 	addne.w	r3, r3, #4294967295	; 0xffffffff
 80176c4:	f640 630c 	movweq	r3, #3596	; 0xe0c
 80176c8:	b29b      	uxthne	r3, r3
 80176ca:	f7ff ff03 	bl	80174d4 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 80176ce:	7b43      	ldrb	r3, [r0, #13]
 80176d0:	7a82      	ldrb	r2, [r0, #10]
 80176d2:	005b      	lsls	r3, r3, #1
 80176d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80176d8:	4313      	orrs	r3, r2
 80176da:	1af6      	subs	r6, r6, r3
 80176dc:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 80176e0:	7b69      	ldrb	r1, [r5, #13]
 80176e2:	00cb      	lsls	r3, r1, #3
 80176e4:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80176e8:	7a2b      	ldrb	r3, [r5, #8]
 80176ea:	4313      	orrs	r3, r2
 80176ec:	064a      	lsls	r2, r1, #25
 80176ee:	bf44      	itt	mi
 80176f0:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80176f4:	b21b      	sxthmi	r3, r3
 80176f6:	1bdb      	subs	r3, r3, r7
 80176f8:	e747      	b.n	801758a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 80176fa:	2300      	movs	r3, #0
 80176fc:	e7b7      	b.n	801766e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x182>
 80176fe:	bf00      	nop
 8017700:	3fc00079 	.word	0x3fc00079

08017704 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 8017704:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017708:	4604      	mov	r4, r0
 801770a:	b942      	cbnz	r2, 801771e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 801770c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8017710:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 8017714:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8017718:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 801771c:	e047      	b.n	80177ae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801771e:	7b51      	ldrb	r1, [r2, #13]
 8017720:	8893      	ldrh	r3, [r2, #4]
 8017722:	010d      	lsls	r5, r1, #4
 8017724:	f405 7080 	and.w	r0, r5, #256	; 0x100
 8017728:	79d5      	ldrb	r5, [r2, #7]
 801772a:	4305      	orrs	r5, r0
 801772c:	2d04      	cmp	r5, #4
 801772e:	bfcc      	ite	gt
 8017730:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 8017734:	f04f 0e01 	movle.w	lr, #1
 8017738:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 801773c:	f200 80ab 	bhi.w	8017896 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 8017740:	f240 60e7 	movw	r0, #1767	; 0x6e7
 8017744:	4283      	cmp	r3, r0
 8017746:	d216      	bcs.n	8017776 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8017748:	f240 605b 	movw	r0, #1627	; 0x65b
 801774c:	4283      	cmp	r3, r0
 801774e:	d859      	bhi.n	8017804 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 8017750:	f240 6057 	movw	r0, #1623	; 0x657
 8017754:	4283      	cmp	r3, r0
 8017756:	d20e      	bcs.n	8017776 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8017758:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801775c:	d24a      	bcs.n	80177f4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 801775e:	f240 604e 	movw	r0, #1614	; 0x64e
 8017762:	4283      	cmp	r3, r0
 8017764:	d207      	bcs.n	8017776 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8017766:	f240 601a 	movw	r0, #1562	; 0x61a
 801776a:	4283      	cmp	r3, r0
 801776c:	d02a      	beq.n	80177c4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801776e:	d821      	bhi.n	80177b4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 8017770:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 8017774:	d35b      	bcc.n	801782e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8017776:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 801777a:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801777e:	f040 80d0 	bne.w	8017922 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 8017782:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 8017786:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801778a:	f040 80ca 	bne.w	8017922 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801778e:	00cb      	lsls	r3, r1, #3
 8017790:	0649      	lsls	r1, r1, #25
 8017792:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8017796:	7a13      	ldrb	r3, [r2, #8]
 8017798:	ea43 0300 	orr.w	r3, r3, r0
 801779c:	bf44      	itt	mi
 801779e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80177a2:	b21b      	sxthmi	r3, r3
 80177a4:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 80177a8:	1b5d      	subs	r5, r3, r5
 80177aa:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 80177ae:	4610      	mov	r0, r2
 80177b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80177b4:	f240 604b 	movw	r0, #1611	; 0x64b
 80177b8:	4283      	cmp	r3, r0
 80177ba:	d338      	bcc.n	801782e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 80177bc:	f240 604c 	movw	r0, #1612	; 0x64c
 80177c0:	4283      	cmp	r3, r0
 80177c2:	d9d8      	bls.n	8017776 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80177c4:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 80177c8:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 80177cc:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 80177d0:	f040 80f3 	bne.w	80179ba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 80177d4:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80177d8:	f040 80ef 	bne.w	80179ba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 80177dc:	00cb      	lsls	r3, r1, #3
 80177de:	064e      	lsls	r6, r1, #25
 80177e0:	f403 7080 	and.w	r0, r3, #256	; 0x100
 80177e4:	7a13      	ldrb	r3, [r2, #8]
 80177e6:	ea43 0300 	orr.w	r3, r3, r0
 80177ea:	bf44      	itt	mi
 80177ec:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80177f0:	b21b      	sxthmi	r3, r3
 80177f2:	e7d9      	b.n	80177a8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 80177f4:	f240 6054 	movw	r0, #1620	; 0x654
 80177f8:	4283      	cmp	r3, r0
 80177fa:	d8e3      	bhi.n	80177c4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80177fc:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 8017800:	d9e0      	bls.n	80177c4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8017802:	e7b8      	b.n	8017776 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8017804:	f240 6074 	movw	r0, #1652	; 0x674
 8017808:	4283      	cmp	r3, r0
 801780a:	d0b4      	beq.n	8017776 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801780c:	d82d      	bhi.n	801786a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 801780e:	f240 605e 	movw	r0, #1630	; 0x65e
 8017812:	4283      	cmp	r3, r0
 8017814:	d804      	bhi.n	8017820 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 8017816:	f240 605d 	movw	r0, #1629	; 0x65d
 801781a:	4283      	cmp	r3, r0
 801781c:	d3d2      	bcc.n	80177c4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801781e:	e7aa      	b.n	8017776 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8017820:	f240 605f 	movw	r0, #1631	; 0x65f
 8017824:	4283      	cmp	r3, r0
 8017826:	d0cd      	beq.n	80177c4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8017828:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 801782c:	d0a3      	beq.n	8017776 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801782e:	00cb      	lsls	r3, r1, #3
 8017830:	0649      	lsls	r1, r1, #25
 8017832:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8017836:	7a13      	ldrb	r3, [r2, #8]
 8017838:	ea43 0300 	orr.w	r3, r3, r0
 801783c:	bf44      	itt	mi
 801783e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8017842:	b21b      	sxthmi	r3, r3
 8017844:	1b5d      	subs	r5, r3, r5
 8017846:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801784a:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801784e:	7b53      	ldrb	r3, [r2, #13]
 8017850:	015b      	lsls	r3, r3, #5
 8017852:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8017856:	7993      	ldrb	r3, [r2, #6]
 8017858:	430b      	orrs	r3, r1
 801785a:	2105      	movs	r1, #5
 801785c:	005b      	lsls	r3, r3, #1
 801785e:	fb93 f3f1 	sdiv	r3, r3, r1
 8017862:	f992 1009 	ldrsb.w	r1, [r2, #9]
 8017866:	440b      	add	r3, r1
 8017868:	e756      	b.n	8017718 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 801786a:	f240 60e2 	movw	r0, #1762	; 0x6e2
 801786e:	4283      	cmp	r3, r0
 8017870:	d809      	bhi.n	8017886 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 8017872:	f240 60df 	movw	r0, #1759	; 0x6df
 8017876:	4283      	cmp	r3, r0
 8017878:	f4bf af7d 	bcs.w	8017776 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801787c:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 8017880:	2b05      	cmp	r3, #5
 8017882:	d8d4      	bhi.n	801782e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8017884:	e777      	b.n	8017776 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8017886:	f240 60e3 	movw	r0, #1763	; 0x6e3
 801788a:	4283      	cmp	r3, r0
 801788c:	d09a      	beq.n	80177c4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801788e:	f240 60e4 	movw	r0, #1764	; 0x6e4
 8017892:	4283      	cmp	r3, r0
 8017894:	e7ca      	b.n	801782c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8017896:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 801789a:	d22b      	bcs.n	80178f4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 801789c:	f640 00ed 	movw	r0, #2285	; 0x8ed
 80178a0:	4283      	cmp	r3, r0
 80178a2:	d28f      	bcs.n	80177c4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80178a4:	f640 00e5 	movw	r0, #2277	; 0x8e5
 80178a8:	4283      	cmp	r3, r0
 80178aa:	d816      	bhi.n	80178da <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 80178ac:	f640 00e4 	movw	r0, #2276	; 0x8e4
 80178b0:	4283      	cmp	r3, r0
 80178b2:	f4bf af60 	bcs.w	8017776 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80178b6:	f240 60ec 	movw	r0, #1772	; 0x6ec
 80178ba:	4283      	cmp	r3, r0
 80178bc:	d80a      	bhi.n	80178d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 80178be:	f240 60eb 	movw	r0, #1771	; 0x6eb
 80178c2:	4283      	cmp	r3, r0
 80178c4:	f4bf af57 	bcs.w	8017776 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80178c8:	f240 60ea 	movw	r0, #1770	; 0x6ea
 80178cc:	4283      	cmp	r3, r0
 80178ce:	f43f af79 	beq.w	80177c4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80178d2:	e7ac      	b.n	801782e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 80178d4:	f240 60ed 	movw	r0, #1773	; 0x6ed
 80178d8:	e7f8      	b.n	80178cc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 80178da:	f640 00e8 	movw	r0, #2280	; 0x8e8
 80178de:	4283      	cmp	r3, r0
 80178e0:	d802      	bhi.n	80178e8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 80178e2:	f640 00e7 	movw	r0, #2279	; 0x8e7
 80178e6:	e798      	b.n	801781a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 80178e8:	f640 00e9 	movw	r0, #2281	; 0x8e9
 80178ec:	4283      	cmp	r3, r0
 80178ee:	f47f af42 	bne.w	8017776 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80178f2:	e767      	b.n	80177c4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80178f4:	f640 00f6 	movw	r0, #2294	; 0x8f6
 80178f8:	4283      	cmp	r3, r0
 80178fa:	f43f af63 	beq.w	80177c4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80178fe:	d802      	bhi.n	8017906 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 8017900:	f640 00f2 	movw	r0, #2290	; 0x8f2
 8017904:	e7f2      	b.n	80178ec <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 8017906:	f640 00fa 	movw	r0, #2298	; 0x8fa
 801790a:	4283      	cmp	r3, r0
 801790c:	d805      	bhi.n	801791a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 801790e:	f640 00f9 	movw	r0, #2297	; 0x8f9
 8017912:	4283      	cmp	r3, r0
 8017914:	f4ff af2f 	bcc.w	8017776 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8017918:	e754      	b.n	80177c4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801791a:	f640 00fe 	movw	r0, #2302	; 0x8fe
 801791e:	4283      	cmp	r3, r0
 8017920:	e7af      	b.n	8017882 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 8017922:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 8017926:	4617      	mov	r7, r2
 8017928:	f102 0808 	add.w	r8, r2, #8
 801792c:	4666      	mov	r6, ip
 801792e:	6838      	ldr	r0, [r7, #0]
 8017930:	3708      	adds	r7, #8
 8017932:	f857 1c04 	ldr.w	r1, [r7, #-4]
 8017936:	46e6      	mov	lr, ip
 8017938:	4547      	cmp	r7, r8
 801793a:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801793e:	46f4      	mov	ip, lr
 8017940:	d1f5      	bne.n	801792e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 8017942:	6838      	ldr	r0, [r7, #0]
 8017944:	f8ce 0000 	str.w	r0, [lr]
 8017948:	88b9      	ldrh	r1, [r7, #4]
 801794a:	f8ae 1004 	strh.w	r1, [lr, #4]
 801794e:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 8017952:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8017956:	d009      	beq.n	801796c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
 8017958:	7b51      	ldrb	r1, [r2, #13]
 801795a:	7992      	ldrb	r2, [r2, #6]
 801795c:	0149      	lsls	r1, r1, #5
 801795e:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8017962:	4311      	orrs	r1, r2
 8017964:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8017968:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 801796c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8017970:	b2ad      	uxth	r5, r5
 8017972:	d00d      	beq.n	8017990 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
 8017974:	442b      	add	r3, r5
 8017976:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801797a:	b29b      	uxth	r3, r3
 801797c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8017980:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8017984:	10db      	asrs	r3, r3, #3
 8017986:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801798a:	4313      	orrs	r3, r2
 801798c:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8017990:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 8017994:	00cb      	lsls	r3, r1, #3
 8017996:	064f      	lsls	r7, r1, #25
 8017998:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801799c:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 80179a0:	ea43 0302 	orr.w	r3, r3, r2
 80179a4:	bf44      	itt	mi
 80179a6:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80179aa:	b21b      	sxthmi	r3, r3
 80179ac:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 80179b0:	1b5b      	subs	r3, r3, r5
 80179b2:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 80179b6:	4632      	mov	r2, r6
 80179b8:	e6f9      	b.n	80177ae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 80179ba:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 80179be:	4617      	mov	r7, r2
 80179c0:	f102 0908 	add.w	r9, r2, #8
 80179c4:	4666      	mov	r6, ip
 80179c6:	6838      	ldr	r0, [r7, #0]
 80179c8:	3708      	adds	r7, #8
 80179ca:	f857 1c04 	ldr.w	r1, [r7, #-4]
 80179ce:	46e0      	mov	r8, ip
 80179d0:	454f      	cmp	r7, r9
 80179d2:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 80179d6:	46c4      	mov	ip, r8
 80179d8:	d1f5      	bne.n	80179c6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
 80179da:	6838      	ldr	r0, [r7, #0]
 80179dc:	f8c8 0000 	str.w	r0, [r8]
 80179e0:	88b9      	ldrh	r1, [r7, #4]
 80179e2:	f8a8 1004 	strh.w	r1, [r8, #4]
 80179e6:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 80179ea:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 80179ee:	d009      	beq.n	8017a04 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
 80179f0:	7b51      	ldrb	r1, [r2, #13]
 80179f2:	7992      	ldrb	r2, [r2, #6]
 80179f4:	0149      	lsls	r1, r1, #5
 80179f6:	f401 7180 	and.w	r1, r1, #256	; 0x100
 80179fa:	4311      	orrs	r1, r2
 80179fc:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8017a00:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 8017a04:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8017a08:	d00e      	beq.n	8017a28 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 8017a0a:	eba3 030e 	sub.w	r3, r3, lr
 8017a0e:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8017a12:	b29b      	uxth	r3, r3
 8017a14:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8017a18:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8017a1c:	10db      	asrs	r3, r3, #3
 8017a1e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8017a22:	4313      	orrs	r3, r2
 8017a24:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8017a28:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 8017a2c:	00cb      	lsls	r3, r1, #3
 8017a2e:	0648      	lsls	r0, r1, #25
 8017a30:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8017a34:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 8017a38:	ea43 0302 	orr.w	r3, r3, r2
 8017a3c:	bf44      	itt	mi
 8017a3e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8017a42:	b21b      	sxthmi	r3, r3
 8017a44:	1b5d      	subs	r5, r3, r5
 8017a46:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8017a4a:	e7b4      	b.n	80179b6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

08017a4c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 8017a4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017a50:	461e      	mov	r6, r3
 8017a52:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8017a54:	4604      	mov	r4, r0
 8017a56:	4617      	mov	r7, r2
 8017a58:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8017a5c:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 8017a60:	f7f7 ffd0 	bl	800fa04 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8017a64:	4605      	mov	r5, r0
 8017a66:	b918      	cbnz	r0, 8017a70 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 8017a68:	6030      	str	r0, [r6, #0]
 8017a6a:	4628      	mov	r0, r5
 8017a6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017a70:	683b      	ldr	r3, [r7, #0]
 8017a72:	4601      	mov	r1, r0
 8017a74:	4638      	mov	r0, r7
 8017a76:	68db      	ldr	r3, [r3, #12]
 8017a78:	4798      	blx	r3
 8017a7a:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 8017a7e:	4602      	mov	r2, r0
 8017a80:	6030      	str	r0, [r6, #0]
 8017a82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8017a86:	d213      	bcs.n	8017ab0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 8017a88:	4643      	mov	r3, r8
 8017a8a:	4639      	mov	r1, r7
 8017a8c:	4620      	mov	r0, r4
 8017a8e:	f7ff fe39 	bl	8017704 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8017a92:	6030      	str	r0, [r6, #0]
 8017a94:	6833      	ldr	r3, [r6, #0]
 8017a96:	b143      	cbz	r3, 8017aaa <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 8017a98:	7b5a      	ldrb	r2, [r3, #13]
 8017a9a:	7a9b      	ldrb	r3, [r3, #10]
 8017a9c:	0052      	lsls	r2, r2, #1
 8017a9e:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8017aa2:	4313      	orrs	r3, r2
 8017aa4:	bf0c      	ite	eq
 8017aa6:	2301      	moveq	r3, #1
 8017aa8:	2300      	movne	r3, #0
 8017aaa:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 8017aae:	e7dc      	b.n	8017a6a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 8017ab0:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 8017ab4:	b29b      	uxth	r3, r3
 8017ab6:	2b7f      	cmp	r3, #127	; 0x7f
 8017ab8:	d804      	bhi.n	8017ac4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 8017aba:	4639      	mov	r1, r7
 8017abc:	4620      	mov	r0, r4
 8017abe:	f7ff fd15 	bl	80174ec <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8017ac2:	e7e6      	b.n	8017a92 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 8017ac4:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 8017ac8:	2b00      	cmp	r3, #0
 8017aca:	d0e3      	beq.n	8017a94 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8017acc:	f640 1302 	movw	r3, #2306	; 0x902
 8017ad0:	429d      	cmp	r5, r3
 8017ad2:	d1df      	bne.n	8017a94 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8017ad4:	4601      	mov	r1, r0
 8017ad6:	4620      	mov	r0, r4
 8017ad8:	f7ff fcd8 	bl	801748c <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8017adc:	e7d9      	b.n	8017a92 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

08017ade <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 8017ade:	b510      	push	{r4, lr}
 8017ae0:	4604      	mov	r4, r0
 8017ae2:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 8017ae6:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8017ae8:	b1e1      	cbz	r1, 8017b24 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 8017aea:	2b0a      	cmp	r3, #10
 8017aec:	d02d      	beq.n	8017b4a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 8017aee:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8017af0:	3901      	subs	r1, #1
 8017af2:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 8017af6:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 8017af8:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 8017afc:	1c51      	adds	r1, r2, #1
 8017afe:	b289      	uxth	r1, r1
 8017b00:	2901      	cmp	r1, #1
 8017b02:	bf8a      	itet	hi
 8017b04:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 8017b08:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 8017b0a:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 8017b0c:	1c5a      	adds	r2, r3, #1
 8017b0e:	8722      	strh	r2, [r4, #56]	; 0x38
 8017b10:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8017b12:	4413      	add	r3, r2
 8017b14:	b29b      	uxth	r3, r3
 8017b16:	2b09      	cmp	r3, #9
 8017b18:	bf88      	it	hi
 8017b1a:	3b0a      	subhi	r3, #10
 8017b1c:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8017b20:	8458      	strh	r0, [r3, #34]	; 0x22
 8017b22:	e7de      	b.n	8017ae2 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 8017b24:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8017b26:	2b0a      	cmp	r3, #10
 8017b28:	d00f      	beq.n	8017b4a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 8017b2a:	4620      	mov	r0, r4
 8017b2c:	f7ff fc6d 	bl	801740a <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 8017b30:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8017b32:	1c5a      	adds	r2, r3, #1
 8017b34:	8722      	strh	r2, [r4, #56]	; 0x38
 8017b36:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8017b38:	4413      	add	r3, r2
 8017b3a:	b29b      	uxth	r3, r3
 8017b3c:	2b09      	cmp	r3, #9
 8017b3e:	bf88      	it	hi
 8017b40:	3b0a      	subhi	r3, #10
 8017b42:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8017b46:	8458      	strh	r0, [r3, #34]	; 0x22
 8017b48:	e7ec      	b.n	8017b24 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 8017b4a:	bd10      	pop	{r4, pc}

08017b4c <_ZN8touchgfx12TextProvider11getNextCharEv>:
 8017b4c:	b538      	push	{r3, r4, r5, lr}
 8017b4e:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8017b50:	4604      	mov	r4, r0
 8017b52:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 8017b56:	8c55      	ldrh	r5, [r2, #34]	; 0x22
 8017b58:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 8017b5a:	3a01      	subs	r2, #1
 8017b5c:	8702      	strh	r2, [r0, #56]	; 0x38
 8017b5e:	1c5a      	adds	r2, r3, #1
 8017b60:	b292      	uxth	r2, r2
 8017b62:	2a09      	cmp	r2, #9
 8017b64:	bf8a      	itet	hi
 8017b66:	3b09      	subhi	r3, #9
 8017b68:	86c2      	strhls	r2, [r0, #54]	; 0x36
 8017b6a:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 8017b6c:	f7ff ffb7 	bl	8017ade <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8017b70:	8c23      	ldrh	r3, [r4, #32]
 8017b72:	2b01      	cmp	r3, #1
 8017b74:	bf9c      	itt	ls
 8017b76:	3301      	addls	r3, #1
 8017b78:	8423      	strhls	r3, [r4, #32]
 8017b7a:	8be3      	ldrh	r3, [r4, #30]
 8017b7c:	b90b      	cbnz	r3, 8017b82 <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 8017b7e:	2302      	movs	r3, #2
 8017b80:	83e3      	strh	r3, [r4, #30]
 8017b82:	8be3      	ldrh	r3, [r4, #30]
 8017b84:	4628      	mov	r0, r5
 8017b86:	3b01      	subs	r3, #1
 8017b88:	b29b      	uxth	r3, r3
 8017b8a:	83e3      	strh	r3, [r4, #30]
 8017b8c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8017b90:	8365      	strh	r5, [r4, #26]
 8017b92:	bd38      	pop	{r3, r4, r5, pc}

08017b94 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 8017b94:	428a      	cmp	r2, r1
 8017b96:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017b9a:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
 8017b9c:	d932      	bls.n	8017c04 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
 8017b9e:	8f05      	ldrh	r5, [r0, #56]	; 0x38
 8017ba0:	1a54      	subs	r4, r2, r1
 8017ba2:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
 8017ba6:	19ee      	adds	r6, r5, r7
 8017ba8:	fa1f fe84 	uxth.w	lr, r4
 8017bac:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	; 0x3e
 8017bb0:	3e01      	subs	r6, #1
 8017bb2:	b2b4      	uxth	r4, r6
 8017bb4:	eba4 090e 	sub.w	r9, r4, lr
 8017bb8:	fa1f f989 	uxth.w	r9, r9
 8017bbc:	2c09      	cmp	r4, #9
 8017bbe:	4626      	mov	r6, r4
 8017bc0:	bf88      	it	hi
 8017bc2:	f1a4 060a 	subhi.w	r6, r4, #10
 8017bc6:	f1bc 0f00 	cmp.w	ip, #0
 8017bca:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8017bce:	bf08      	it	eq
 8017bd0:	f04f 0c02 	moveq.w	ip, #2
 8017bd4:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8017bd8:	b2a4      	uxth	r4, r4
 8017bda:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8017bde:	f8b6 a022 	ldrh.w	sl, [r6, #34]	; 0x22
 8017be2:	454c      	cmp	r4, r9
 8017be4:	fa1f fc8c 	uxth.w	ip, ip
 8017be8:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 8017bec:	f8a6 a03a 	strh.w	sl, [r6, #58]	; 0x3a
 8017bf0:	d1e4      	bne.n	8017bbc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 8017bf2:	eba5 050e 	sub.w	r5, r5, lr
 8017bf6:	eb0e 0408 	add.w	r4, lr, r8
 8017bfa:	f8a0 c03e 	strh.w	ip, [r0, #62]	; 0x3e
 8017bfe:	8705      	strh	r5, [r0, #56]	; 0x38
 8017c00:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
 8017c04:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 8017c06:	250a      	movs	r5, #10
 8017c08:	1a64      	subs	r4, r4, r1
 8017c0a:	4439      	add	r1, r7
 8017c0c:	b289      	uxth	r1, r1
 8017c0e:	8704      	strh	r4, [r0, #56]	; 0x38
 8017c10:	2909      	cmp	r1, #9
 8017c12:	bf88      	it	hi
 8017c14:	390a      	subhi	r1, #10
 8017c16:	86c1      	strh	r1, [r0, #54]	; 0x36
 8017c18:	b18a      	cbz	r2, 8017c3e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 8017c1a:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 8017c1c:	3a01      	subs	r2, #1
 8017c1e:	3101      	adds	r1, #1
 8017c20:	b292      	uxth	r2, r2
 8017c22:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 8017c26:	8701      	strh	r1, [r0, #56]	; 0x38
 8017c28:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 8017c2a:	b901      	cbnz	r1, 8017c2e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
 8017c2c:	86c5      	strh	r5, [r0, #54]	; 0x36
 8017c2e:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 8017c30:	3901      	subs	r1, #1
 8017c32:	b289      	uxth	r1, r1
 8017c34:	86c1      	strh	r1, [r0, #54]	; 0x36
 8017c36:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8017c3a:	844c      	strh	r4, [r1, #34]	; 0x22
 8017c3c:	e7ec      	b.n	8017c18 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
 8017c3e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017c42:	f7ff bf4c 	b.w	8017ade <_ZN8touchgfx12TextProvider15fillInputBufferEv>

08017c46 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 8017c46:	b570      	push	{r4, r5, r6, lr}
 8017c48:	2500      	movs	r5, #0
 8017c4a:	4295      	cmp	r5, r2
 8017c4c:	d011      	beq.n	8017c72 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 8017c4e:	8bc4      	ldrh	r4, [r0, #30]
 8017c50:	f831 6b02 	ldrh.w	r6, [r1], #2
 8017c54:	4414      	add	r4, r2
 8017c56:	3c01      	subs	r4, #1
 8017c58:	1b64      	subs	r4, r4, r5
 8017c5a:	b2a4      	uxth	r4, r4
 8017c5c:	2c01      	cmp	r4, #1
 8017c5e:	bf88      	it	hi
 8017c60:	3c02      	subhi	r4, #2
 8017c62:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8017c66:	8b64      	ldrh	r4, [r4, #26]
 8017c68:	42b4      	cmp	r4, r6
 8017c6a:	d117      	bne.n	8017c9c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 8017c6c:	3501      	adds	r5, #1
 8017c6e:	b2ad      	uxth	r5, r5
 8017c70:	e7eb      	b.n	8017c4a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 8017c72:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8017c76:	2400      	movs	r4, #0
 8017c78:	4413      	add	r3, r2
 8017c7a:	b2a2      	uxth	r2, r4
 8017c7c:	429a      	cmp	r2, r3
 8017c7e:	da0f      	bge.n	8017ca0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 8017c80:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 8017c82:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 8017c86:	3401      	adds	r4, #1
 8017c88:	4432      	add	r2, r6
 8017c8a:	b292      	uxth	r2, r2
 8017c8c:	2a09      	cmp	r2, #9
 8017c8e:	bf88      	it	hi
 8017c90:	3a0a      	subhi	r2, #10
 8017c92:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8017c96:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 8017c98:	42aa      	cmp	r2, r5
 8017c9a:	d0ee      	beq.n	8017c7a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 8017c9c:	2000      	movs	r0, #0
 8017c9e:	bd70      	pop	{r4, r5, r6, pc}
 8017ca0:	2001      	movs	r0, #1
 8017ca2:	e7fc      	b.n	8017c9e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

08017ca4 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 8017ca4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ca8:	4605      	mov	r5, r0
 8017caa:	4616      	mov	r6, r2
 8017cac:	1c8c      	adds	r4, r1, #2
 8017cae:	8809      	ldrh	r1, [r1, #0]
 8017cb0:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 8017cb4:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 8017cb8:	42b3      	cmp	r3, r6
 8017cba:	d124      	bne.n	8017d06 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 8017cbc:	f3c1 2903 	ubfx	r9, r1, #8, #4
 8017cc0:	f3c1 1803 	ubfx	r8, r1, #4, #4
 8017cc4:	f001 070f 	and.w	r7, r1, #15
 8017cc8:	4652      	mov	r2, sl
 8017cca:	f8cd 8000 	str.w	r8, [sp]
 8017cce:	464b      	mov	r3, r9
 8017cd0:	4621      	mov	r1, r4
 8017cd2:	4628      	mov	r0, r5
 8017cd4:	f7ff ffb7 	bl	8017c46 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 8017cd8:	4683      	mov	fp, r0
 8017cda:	b168      	cbz	r0, 8017cf8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 8017cdc:	eb0a 0109 	add.w	r1, sl, r9
 8017ce0:	463a      	mov	r2, r7
 8017ce2:	4628      	mov	r0, r5
 8017ce4:	4441      	add	r1, r8
 8017ce6:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 8017cea:	4649      	mov	r1, r9
 8017cec:	f7ff ff52 	bl	8017b94 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 8017cf0:	4658      	mov	r0, fp
 8017cf2:	b003      	add	sp, #12
 8017cf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017cf8:	eb07 010a 	add.w	r1, r7, sl
 8017cfc:	4449      	add	r1, r9
 8017cfe:	4441      	add	r1, r8
 8017d00:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8017d04:	e7d2      	b.n	8017cac <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 8017d06:	f04f 0b00 	mov.w	fp, #0
 8017d0a:	e7f1      	b.n	8017cf0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

08017d0c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 8017d0c:	b570      	push	{r4, r5, r6, lr}
 8017d0e:	8810      	ldrh	r0, [r2, #0]
 8017d10:	4298      	cmp	r0, r3
 8017d12:	d817      	bhi.n	8017d44 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8017d14:	1e48      	subs	r0, r1, #1
 8017d16:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 8017d1a:	4298      	cmp	r0, r3
 8017d1c:	d312      	bcc.n	8017d44 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8017d1e:	2400      	movs	r4, #0
 8017d20:	428c      	cmp	r4, r1
 8017d22:	d20f      	bcs.n	8017d44 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8017d24:	1860      	adds	r0, r4, r1
 8017d26:	1040      	asrs	r0, r0, #1
 8017d28:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 8017d2c:	0085      	lsls	r5, r0, #2
 8017d2e:	42b3      	cmp	r3, r6
 8017d30:	d902      	bls.n	8017d38 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 8017d32:	3001      	adds	r0, #1
 8017d34:	b284      	uxth	r4, r0
 8017d36:	e7f3      	b.n	8017d20 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8017d38:	d201      	bcs.n	8017d3e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 8017d3a:	b281      	uxth	r1, r0
 8017d3c:	e7f0      	b.n	8017d20 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8017d3e:	442a      	add	r2, r5
 8017d40:	8850      	ldrh	r0, [r2, #2]
 8017d42:	bd70      	pop	{r4, r5, r6, pc}
 8017d44:	2000      	movs	r0, #0
 8017d46:	e7fc      	b.n	8017d42 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

08017d48 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 8017d48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017d4c:	6c45      	ldr	r5, [r0, #68]	; 0x44
 8017d4e:	4604      	mov	r4, r0
 8017d50:	260b      	movs	r6, #11
 8017d52:	886f      	ldrh	r7, [r5, #2]
 8017d54:	087f      	lsrs	r7, r7, #1
 8017d56:	3e01      	subs	r6, #1
 8017d58:	d013      	beq.n	8017d82 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 8017d5a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8017d5c:	462a      	mov	r2, r5
 8017d5e:	4639      	mov	r1, r7
 8017d60:	4620      	mov	r0, r4
 8017d62:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8017d66:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 8017d6a:	4643      	mov	r3, r8
 8017d6c:	f7ff ffce 	bl	8017d0c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 8017d70:	b138      	cbz	r0, 8017d82 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 8017d72:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 8017d76:	4642      	mov	r2, r8
 8017d78:	4620      	mov	r0, r4
 8017d7a:	f7ff ff93 	bl	8017ca4 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 8017d7e:	2800      	cmp	r0, #0
 8017d80:	d1e9      	bne.n	8017d56 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 8017d82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08017d88 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 8017d88:	b570      	push	{r4, r5, r6, lr}
 8017d8a:	694a      	ldr	r2, [r1, #20]
 8017d8c:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8017d8e:	684b      	ldr	r3, [r1, #4]
 8017d90:	1b54      	subs	r4, r2, r5
 8017d92:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 8017d94:	f000 8106 	beq.w	8017fa4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 8017d98:	1b9b      	subs	r3, r3, r6
 8017d9a:	d003      	beq.n	8017da4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8017d9c:	4363      	muls	r3, r4
 8017d9e:	2210      	movs	r2, #16
 8017da0:	fb93 f3f2 	sdiv	r3, r3, r2
 8017da4:	680c      	ldr	r4, [r1, #0]
 8017da6:	698a      	ldr	r2, [r1, #24]
 8017da8:	1b65      	subs	r5, r4, r5
 8017daa:	f000 80fd 	beq.w	8017fa8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 8017dae:	1b92      	subs	r2, r2, r6
 8017db0:	d003      	beq.n	8017dba <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8017db2:	436a      	muls	r2, r5
 8017db4:	2410      	movs	r4, #16
 8017db6:	fb92 f2f4 	sdiv	r2, r2, r4
 8017dba:	1a9b      	subs	r3, r3, r2
 8017dbc:	ed9f 4a89 	vldr	s8, [pc, #548]	; 8017fe4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 8017dc0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8017dc4:	460a      	mov	r2, r1
 8017dc6:	ee07 3a90 	vmov	s15, r3
 8017dca:	f100 040c 	add.w	r4, r0, #12
 8017dce:	4603      	mov	r3, r0
 8017dd0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017dd4:	ee67 7a84 	vmul.f32	s15, s15, s8
 8017dd8:	ee87 3a27 	vdiv.f32	s6, s14, s15
 8017ddc:	eeb1 6a43 	vneg.f32	s12, s6
 8017de0:	edd2 7a02 	vldr	s15, [r2, #8]
 8017de4:	3214      	adds	r2, #20
 8017de6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8017dea:	ece3 6a01 	vstmia	r3!, {s13}
 8017dee:	429c      	cmp	r4, r3
 8017df0:	ed52 7a02 	vldr	s15, [r2, #-8]
 8017df4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8017df8:	edc3 7a02 	vstr	s15, [r3, #8]
 8017dfc:	ed52 7a01 	vldr	s15, [r2, #-4]
 8017e00:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8017e04:	edc3 7a05 	vstr	s15, [r3, #20]
 8017e08:	d1ea      	bne.n	8017de0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 8017e0a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8017e0c:	698b      	ldr	r3, [r1, #24]
 8017e0e:	edd0 4a02 	vldr	s9, [r0, #8]
 8017e12:	1a9b      	subs	r3, r3, r2
 8017e14:	edd0 3a00 	vldr	s7, [r0]
 8017e18:	edd0 6a01 	vldr	s13, [r0, #4]
 8017e1c:	ee07 3a90 	vmov	s15, r3
 8017e20:	684b      	ldr	r3, [r1, #4]
 8017e22:	ee76 6ae4 	vsub.f32	s13, s13, s9
 8017e26:	ed90 5a05 	vldr	s10, [r0, #20]
 8017e2a:	1a9b      	subs	r3, r3, r2
 8017e2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017e30:	ee73 4ae4 	vsub.f32	s9, s7, s9
 8017e34:	ed90 2a03 	vldr	s4, [r0, #12]
 8017e38:	ee07 3a10 	vmov	s14, r3
 8017e3c:	edd0 5a04 	vldr	s11, [r0, #16]
 8017e40:	ee67 7a84 	vmul.f32	s15, s15, s8
 8017e44:	ed90 1a07 	vldr	s2, [r0, #28]
 8017e48:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017e4c:	edd0 2a06 	vldr	s5, [r0, #24]
 8017e50:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8017e54:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 8017e58:	ee27 7a04 	vmul.f32	s14, s14, s8
 8017e5c:	ee32 5a45 	vsub.f32	s10, s4, s10
 8017e60:	eee6 7a87 	vfma.f32	s15, s13, s14
 8017e64:	ee67 7a83 	vmul.f32	s15, s15, s6
 8017e68:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 8017e6c:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8017e6e:	694a      	ldr	r2, [r1, #20]
 8017e70:	1b13      	subs	r3, r2, r4
 8017e72:	ee07 3a10 	vmov	s14, r3
 8017e76:	680b      	ldr	r3, [r1, #0]
 8017e78:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017e7c:	1b1b      	subs	r3, r3, r4
 8017e7e:	ee27 7a04 	vmul.f32	s14, s14, s8
 8017e82:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 8017e86:	ee07 3a10 	vmov	s14, r3
 8017e8a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017e8e:	ee27 7a04 	vmul.f32	s14, s14, s8
 8017e92:	eee6 4a87 	vfma.f32	s9, s13, s14
 8017e96:	ee64 4a86 	vmul.f32	s9, s9, s12
 8017e9a:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 8017e9e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8017ea0:	698b      	ldr	r3, [r1, #24]
 8017ea2:	1a9b      	subs	r3, r3, r2
 8017ea4:	ee06 3a90 	vmov	s13, r3
 8017ea8:	684b      	ldr	r3, [r1, #4]
 8017eaa:	1a9b      	subs	r3, r3, r2
 8017eac:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8017eb0:	ee07 3a10 	vmov	s14, r3
 8017eb4:	ee66 6a84 	vmul.f32	s13, s13, s8
 8017eb8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017ebc:	ee65 6a66 	vnmul.f32	s13, s10, s13
 8017ec0:	ee27 7a04 	vmul.f32	s14, s14, s8
 8017ec4:	eee5 6a87 	vfma.f32	s13, s11, s14
 8017ec8:	ee66 6a83 	vmul.f32	s13, s13, s6
 8017ecc:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 8017ed0:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8017ed2:	694a      	ldr	r2, [r1, #20]
 8017ed4:	1b13      	subs	r3, r2, r4
 8017ed6:	ee07 3a10 	vmov	s14, r3
 8017eda:	680b      	ldr	r3, [r1, #0]
 8017edc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017ee0:	1b1b      	subs	r3, r3, r4
 8017ee2:	ee27 7a04 	vmul.f32	s14, s14, s8
 8017ee6:	ee25 5a47 	vnmul.f32	s10, s10, s14
 8017eea:	ee07 3a10 	vmov	s14, r3
 8017eee:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017ef2:	ee27 7a04 	vmul.f32	s14, s14, s8
 8017ef6:	eea5 5a87 	vfma.f32	s10, s11, s14
 8017efa:	edd0 5a08 	vldr	s11, [r0, #32]
 8017efe:	ee31 1a65 	vsub.f32	s2, s2, s11
 8017f02:	ee72 5ae5 	vsub.f32	s11, s5, s11
 8017f06:	ee25 5a06 	vmul.f32	s10, s10, s12
 8017f0a:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 8017f0e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8017f10:	698b      	ldr	r3, [r1, #24]
 8017f12:	1a9b      	subs	r3, r3, r2
 8017f14:	ee07 3a10 	vmov	s14, r3
 8017f18:	684b      	ldr	r3, [r1, #4]
 8017f1a:	1a9b      	subs	r3, r3, r2
 8017f1c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017f20:	ee01 3a90 	vmov	s3, r3
 8017f24:	ee27 7a04 	vmul.f32	s14, s14, s8
 8017f28:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8017f2c:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 8017f30:	ee61 1a84 	vmul.f32	s3, s3, s8
 8017f34:	eea1 7a21 	vfma.f32	s14, s2, s3
 8017f38:	ee27 7a03 	vmul.f32	s14, s14, s6
 8017f3c:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 8017f40:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8017f42:	694a      	ldr	r2, [r1, #20]
 8017f44:	1b13      	subs	r3, r2, r4
 8017f46:	ee03 3a10 	vmov	s6, r3
 8017f4a:	680b      	ldr	r3, [r1, #0]
 8017f4c:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8017f50:	1b1b      	subs	r3, r3, r4
 8017f52:	ee23 3a04 	vmul.f32	s6, s6, s8
 8017f56:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 8017f5a:	ee03 3a10 	vmov	s6, r3
 8017f5e:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8017f62:	ee23 4a04 	vmul.f32	s8, s6, s8
 8017f66:	eee1 5a04 	vfma.f32	s11, s2, s8
 8017f6a:	ee25 6a86 	vmul.f32	s12, s11, s12
 8017f6e:	ee62 5a67 	vnmul.f32	s11, s4, s15
 8017f72:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 8017f76:	eee3 5aa6 	vfma.f32	s11, s7, s13
 8017f7a:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 8017f7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017f82:	dd13      	ble.n	8017fac <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 8017f84:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8017f88:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 8017f8c:	63c3      	str	r3, [r0, #60]	; 0x3c
 8017f8e:	eee3 7a87 	vfma.f32	s15, s7, s14
 8017f92:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8017f96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017f9a:	dd15      	ble.n	8017fc8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 8017f9c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8017fa0:	6403      	str	r3, [r0, #64]	; 0x40
 8017fa2:	bd70      	pop	{r4, r5, r6, pc}
 8017fa4:	4623      	mov	r3, r4
 8017fa6:	e6fd      	b.n	8017da4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8017fa8:	462a      	mov	r2, r5
 8017faa:	e706      	b.n	8017dba <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8017fac:	d502      	bpl.n	8017fb4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 8017fae:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8017fb2:	e7e9      	b.n	8017f88 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 8017fb4:	ee22 2a64 	vnmul.f32	s4, s4, s9
 8017fb8:	eea3 2a85 	vfma.f32	s4, s7, s10
 8017fbc:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 8017fc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017fc4:	dade      	bge.n	8017f84 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 8017fc6:	e7f2      	b.n	8017fae <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 8017fc8:	d502      	bpl.n	8017fd0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 8017fca:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8017fce:	e7e7      	b.n	8017fa0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 8017fd0:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 8017fd4:	eee3 4a86 	vfma.f32	s9, s7, s12
 8017fd8:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 8017fdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017fe0:	dadc      	bge.n	8017f9c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 8017fe2:	e7f2      	b.n	8017fca <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 8017fe4:	3d800000 	.word	0x3d800000

08017fe8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 8017fe8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017fec:	2714      	movs	r7, #20
 8017fee:	435f      	muls	r7, r3
 8017ff0:	eb02 0c07 	add.w	ip, r2, r7
 8017ff4:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8017ff8:	f115 0e0f 	adds.w	lr, r5, #15
 8017ffc:	f100 80a2 	bmi.w	8018144 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 8018000:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 8018004:	9c08      	ldr	r4, [sp, #32]
 8018006:	2614      	movs	r6, #20
 8018008:	f8c0 e014 	str.w	lr, [r0, #20]
 801800c:	4366      	muls	r6, r4
 801800e:	eb02 0806 	add.w	r8, r2, r6
 8018012:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8018016:	f115 040f 	adds.w	r4, r5, #15
 801801a:	f100 809f 	bmi.w	801815c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 801801e:	1124      	asrs	r4, r4, #4
 8018020:	eba4 040e 	sub.w	r4, r4, lr
 8018024:	6184      	str	r4, [r0, #24]
 8018026:	2c00      	cmp	r4, #0
 8018028:	f000 808a 	beq.w	8018140 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 801802c:	f8dc 9004 	ldr.w	r9, [ip, #4]
 8018030:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8018034:	5995      	ldr	r5, [r2, r6]
 8018036:	eba4 0809 	sub.w	r8, r4, r9
 801803a:	59d4      	ldr	r4, [r2, r7]
 801803c:	eba5 0a04 	sub.w	sl, r5, r4
 8018040:	ea4f 1608 	mov.w	r6, r8, lsl #4
 8018044:	ea4f 150a 	mov.w	r5, sl, lsl #4
 8018048:	fb0e fe05 	mul.w	lr, lr, r5
 801804c:	fb0a ee19 	mls	lr, sl, r9, lr
 8018050:	fb08 e404 	mla	r4, r8, r4, lr
 8018054:	3c01      	subs	r4, #1
 8018056:	19a4      	adds	r4, r4, r6
 8018058:	f100 808c 	bmi.w	8018174 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 801805c:	fb94 fef6 	sdiv	lr, r4, r6
 8018060:	fb06 441e 	mls	r4, r6, lr, r4
 8018064:	f8c0 e000 	str.w	lr, [r0]
 8018068:	6104      	str	r4, [r0, #16]
 801806a:	2d00      	cmp	r5, #0
 801806c:	f2c0 8095 	blt.w	801819a <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 8018070:	fb95 f4f6 	sdiv	r4, r5, r6
 8018074:	fb06 5514 	mls	r5, r6, r4, r5
 8018078:	6044      	str	r4, [r0, #4]
 801807a:	6085      	str	r5, [r0, #8]
 801807c:	60c6      	str	r6, [r0, #12]
 801807e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8018082:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8018086:	6945      	ldr	r5, [r0, #20]
 8018088:	59d2      	ldr	r2, [r2, r7]
 801808a:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 801808e:	eddf 6a4b 	vldr	s13, [pc, #300]	; 80181bc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 8018092:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 8018096:	ee07 4a10 	vmov	s14, r4
 801809a:	6804      	ldr	r4, [r0, #0]
 801809c:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 80180a0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80180a4:	ee07 2a90 	vmov	s15, r2
 80180a8:	ee27 7a26 	vmul.f32	s14, s14, s13
 80180ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80180b0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80180b4:	edd3 6a00 	vldr	s13, [r3]
 80180b8:	eee6 6a07 	vfma.f32	s13, s12, s14
 80180bc:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 80180c0:	eee6 6a27 	vfma.f32	s13, s12, s15
 80180c4:	edc0 6a07 	vstr	s13, [r0, #28]
 80180c8:	edd0 6a01 	vldr	s13, [r0, #4]
 80180cc:	edd1 5a09 	vldr	s11, [r1, #36]	; 0x24
 80180d0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80180d4:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 80180d8:	eea6 6aa5 	vfma.f32	s12, s13, s11
 80180dc:	ed80 6a08 	vstr	s12, [r0, #32]
 80180e0:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 80180e2:	6242      	str	r2, [r0, #36]	; 0x24
 80180e4:	edd1 5a0c 	vldr	s11, [r1, #48]	; 0x30
 80180e8:	ed93 6a03 	vldr	s12, [r3, #12]
 80180ec:	eea5 6a87 	vfma.f32	s12, s11, s14
 80180f0:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 80180f4:	eea5 6aa7 	vfma.f32	s12, s11, s15
 80180f8:	ed80 6a0a 	vstr	s12, [r0, #40]	; 0x28
 80180fc:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 8018100:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 8018104:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8018108:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
 801810c:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801810e:	6302      	str	r2, [r0, #48]	; 0x30
 8018110:	ed93 6a06 	vldr	s12, [r3, #24]
 8018114:	edd1 5a0e 	vldr	s11, [r1, #56]	; 0x38
 8018118:	eea5 6a87 	vfma.f32	s12, s11, s14
 801811c:	eeb0 7a46 	vmov.f32	s14, s12
 8018120:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 8018124:	eea6 7a27 	vfma.f32	s14, s12, s15
 8018128:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801812c:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 8018130:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
 8018134:	eee6 7a87 	vfma.f32	s15, s13, s14
 8018138:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
 801813c:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 801813e:	63c3      	str	r3, [r0, #60]	; 0x3c
 8018140:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018144:	2410      	movs	r4, #16
 8018146:	f1c5 0501 	rsb	r5, r5, #1
 801814a:	fb9e fef4 	sdiv	lr, lr, r4
 801814e:	f015 050f 	ands.w	r5, r5, #15
 8018152:	bf18      	it	ne
 8018154:	2501      	movne	r5, #1
 8018156:	ebae 0e05 	sub.w	lr, lr, r5
 801815a:	e753      	b.n	8018004 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 801815c:	f04f 0910 	mov.w	r9, #16
 8018160:	f1c5 0501 	rsb	r5, r5, #1
 8018164:	fb94 f4f9 	sdiv	r4, r4, r9
 8018168:	f015 050f 	ands.w	r5, r5, #15
 801816c:	bf18      	it	ne
 801816e:	2501      	movne	r5, #1
 8018170:	1b64      	subs	r4, r4, r5
 8018172:	e755      	b.n	8018020 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 8018174:	4264      	negs	r4, r4
 8018176:	fb94 fef6 	sdiv	lr, r4, r6
 801817a:	f1ce 0800 	rsb	r8, lr, #0
 801817e:	fb06 441e 	mls	r4, r6, lr, r4
 8018182:	f8c0 8000 	str.w	r8, [r0]
 8018186:	6104      	str	r4, [r0, #16]
 8018188:	2c00      	cmp	r4, #0
 801818a:	f43f af6e 	beq.w	801806a <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 801818e:	ea6f 0e0e 	mvn.w	lr, lr
 8018192:	1b34      	subs	r4, r6, r4
 8018194:	f8c0 e000 	str.w	lr, [r0]
 8018198:	e766      	b.n	8018068 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 801819a:	426d      	negs	r5, r5
 801819c:	fb95 f4f6 	sdiv	r4, r5, r6
 80181a0:	f1c4 0e00 	rsb	lr, r4, #0
 80181a4:	fb06 5514 	mls	r5, r6, r4, r5
 80181a8:	f8c0 e004 	str.w	lr, [r0, #4]
 80181ac:	6085      	str	r5, [r0, #8]
 80181ae:	2d00      	cmp	r5, #0
 80181b0:	f43f af64 	beq.w	801807c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 80181b4:	43e4      	mvns	r4, r4
 80181b6:	1b75      	subs	r5, r6, r5
 80181b8:	6044      	str	r4, [r0, #4]
 80181ba:	e75e      	b.n	801807a <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 80181bc:	3d800000 	.word	0x3d800000

080181c0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 80181c0:	4b06      	ldr	r3, [pc, #24]	; (80181dc <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 80181c2:	881a      	ldrh	r2, [r3, #0]
 80181c4:	4282      	cmp	r2, r0
 80181c6:	d807      	bhi.n	80181d8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 80181c8:	4b05      	ldr	r3, [pc, #20]	; (80181e0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 80181ca:	881b      	ldrh	r3, [r3, #0]
 80181cc:	4413      	add	r3, r2
 80181ce:	4298      	cmp	r0, r3
 80181d0:	bfac      	ite	ge
 80181d2:	2000      	movge	r0, #0
 80181d4:	2001      	movlt	r0, #1
 80181d6:	4770      	bx	lr
 80181d8:	2000      	movs	r0, #0
 80181da:	4770      	bx	lr
 80181dc:	20024428 	.word	0x20024428
 80181e0:	2002442a 	.word	0x2002442a

080181e4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 80181e4:	b508      	push	{r3, lr}
 80181e6:	4601      	mov	r1, r0
 80181e8:	f7ff ffea 	bl	80181c0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 80181ec:	b118      	cbz	r0, 80181f6 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 80181ee:	4b02      	ldr	r3, [pc, #8]	; (80181f8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 80181f0:	681b      	ldr	r3, [r3, #0]
 80181f2:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 80181f6:	bd08      	pop	{r3, pc}
 80181f8:	20024420 	.word	0x20024420

080181fc <_ZNK8touchgfx6Bitmap8getWidthEv>:
 80181fc:	4a12      	ldr	r2, [pc, #72]	; (8018248 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 80181fe:	8803      	ldrh	r3, [r0, #0]
 8018200:	8812      	ldrh	r2, [r2, #0]
 8018202:	4293      	cmp	r3, r2
 8018204:	d207      	bcs.n	8018216 <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 8018206:	4a11      	ldr	r2, [pc, #68]	; (801824c <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 8018208:	2114      	movs	r1, #20
 801820a:	6812      	ldr	r2, [r2, #0]
 801820c:	fb01 2303 	mla	r3, r1, r3, r2
 8018210:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8018214:	4770      	bx	lr
 8018216:	490e      	ldr	r1, [pc, #56]	; (8018250 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 8018218:	8809      	ldrh	r1, [r1, #0]
 801821a:	4411      	add	r1, r2
 801821c:	428b      	cmp	r3, r1
 801821e:	da04      	bge.n	801822a <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 8018220:	1a9b      	subs	r3, r3, r2
 8018222:	4a0c      	ldr	r2, [pc, #48]	; (8018254 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 8018224:	210e      	movs	r1, #14
 8018226:	6812      	ldr	r2, [r2, #0]
 8018228:	e7f0      	b.n	801820c <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 801822a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801822e:	4293      	cmp	r3, r2
 8018230:	d108      	bne.n	8018244 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 8018232:	4b09      	ldr	r3, [pc, #36]	; (8018258 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 8018234:	781b      	ldrb	r3, [r3, #0]
 8018236:	b91b      	cbnz	r3, 8018240 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 8018238:	4b08      	ldr	r3, [pc, #32]	; (801825c <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801823a:	f9b3 0000 	ldrsh.w	r0, [r3]
 801823e:	4770      	bx	lr
 8018240:	4b07      	ldr	r3, [pc, #28]	; (8018260 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 8018242:	e7fa      	b.n	801823a <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 8018244:	2000      	movs	r0, #0
 8018246:	4770      	bx	lr
 8018248:	20024428 	.word	0x20024428
 801824c:	2002442c 	.word	0x2002442c
 8018250:	2002442a 	.word	0x2002442a
 8018254:	20024424 	.word	0x20024424
 8018258:	200243d4 	.word	0x200243d4
 801825c:	200243d6 	.word	0x200243d6
 8018260:	200243d8 	.word	0x200243d8

08018264 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 8018264:	4a12      	ldr	r2, [pc, #72]	; (80182b0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 8018266:	8803      	ldrh	r3, [r0, #0]
 8018268:	8812      	ldrh	r2, [r2, #0]
 801826a:	4293      	cmp	r3, r2
 801826c:	d207      	bcs.n	801827e <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 801826e:	4a11      	ldr	r2, [pc, #68]	; (80182b4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 8018270:	2114      	movs	r1, #20
 8018272:	6812      	ldr	r2, [r2, #0]
 8018274:	fb01 2303 	mla	r3, r1, r3, r2
 8018278:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 801827c:	4770      	bx	lr
 801827e:	490e      	ldr	r1, [pc, #56]	; (80182b8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 8018280:	8809      	ldrh	r1, [r1, #0]
 8018282:	4411      	add	r1, r2
 8018284:	428b      	cmp	r3, r1
 8018286:	da04      	bge.n	8018292 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 8018288:	1a9b      	subs	r3, r3, r2
 801828a:	4a0c      	ldr	r2, [pc, #48]	; (80182bc <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801828c:	210e      	movs	r1, #14
 801828e:	6812      	ldr	r2, [r2, #0]
 8018290:	e7f0      	b.n	8018274 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 8018292:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8018296:	4293      	cmp	r3, r2
 8018298:	d108      	bne.n	80182ac <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 801829a:	4b09      	ldr	r3, [pc, #36]	; (80182c0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801829c:	781b      	ldrb	r3, [r3, #0]
 801829e:	b91b      	cbnz	r3, 80182a8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 80182a0:	4b08      	ldr	r3, [pc, #32]	; (80182c4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 80182a2:	f9b3 0000 	ldrsh.w	r0, [r3]
 80182a6:	4770      	bx	lr
 80182a8:	4b07      	ldr	r3, [pc, #28]	; (80182c8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 80182aa:	e7fa      	b.n	80182a2 <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 80182ac:	2000      	movs	r0, #0
 80182ae:	4770      	bx	lr
 80182b0:	20024428 	.word	0x20024428
 80182b4:	2002442c 	.word	0x2002442c
 80182b8:	2002442a 	.word	0x2002442a
 80182bc:	20024424 	.word	0x20024424
 80182c0:	200243d4 	.word	0x200243d4
 80182c4:	200243d8 	.word	0x200243d8
 80182c8:	200243d6 	.word	0x200243d6

080182cc <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 80182cc:	4a1f      	ldr	r2, [pc, #124]	; (801834c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>)
 80182ce:	b510      	push	{r4, lr}
 80182d0:	880b      	ldrh	r3, [r1, #0]
 80182d2:	8812      	ldrh	r2, [r2, #0]
 80182d4:	4293      	cmp	r3, r2
 80182d6:	d213      	bcs.n	8018300 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 80182d8:	4a1d      	ldr	r2, [pc, #116]	; (8018350 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>)
 80182da:	2114      	movs	r1, #20
 80182dc:	6812      	ldr	r2, [r2, #0]
 80182de:	fb01 2303 	mla	r3, r1, r3, r2
 80182e2:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 80182e6:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 80182ea:	8a1a      	ldrh	r2, [r3, #16]
 80182ec:	8a5b      	ldrh	r3, [r3, #18]
 80182ee:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80182f2:	8004      	strh	r4, [r0, #0]
 80182f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80182f8:	8041      	strh	r1, [r0, #2]
 80182fa:	8082      	strh	r2, [r0, #4]
 80182fc:	80c3      	strh	r3, [r0, #6]
 80182fe:	e00e      	b.n	801831e <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 8018300:	4914      	ldr	r1, [pc, #80]	; (8018354 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x88>)
 8018302:	8809      	ldrh	r1, [r1, #0]
 8018304:	4411      	add	r1, r2
 8018306:	428b      	cmp	r3, r1
 8018308:	da0a      	bge.n	8018320 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x54>
 801830a:	1a9b      	subs	r3, r3, r2
 801830c:	4a12      	ldr	r2, [pc, #72]	; (8018358 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 801830e:	210e      	movs	r1, #14
 8018310:	6812      	ldr	r2, [r2, #0]
 8018312:	fb01 2303 	mla	r3, r1, r3, r2
 8018316:	681a      	ldr	r2, [r3, #0]
 8018318:	6002      	str	r2, [r0, #0]
 801831a:	685a      	ldr	r2, [r3, #4]
 801831c:	6042      	str	r2, [r0, #4]
 801831e:	bd10      	pop	{r4, pc}
 8018320:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8018324:	4293      	cmp	r3, r2
 8018326:	d10b      	bne.n	8018340 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x74>
 8018328:	4b0c      	ldr	r3, [pc, #48]	; (801835c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801832a:	f9b3 1000 	ldrsh.w	r1, [r3]
 801832e:	4b0c      	ldr	r3, [pc, #48]	; (8018360 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 8018330:	8081      	strh	r1, [r0, #4]
 8018332:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018336:	2300      	movs	r3, #0
 8018338:	80c2      	strh	r2, [r0, #6]
 801833a:	8003      	strh	r3, [r0, #0]
 801833c:	8043      	strh	r3, [r0, #2]
 801833e:	e7ee      	b.n	801831e <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 8018340:	2300      	movs	r3, #0
 8018342:	8003      	strh	r3, [r0, #0]
 8018344:	8043      	strh	r3, [r0, #2]
 8018346:	8083      	strh	r3, [r0, #4]
 8018348:	e7d8      	b.n	80182fc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 801834a:	bf00      	nop
 801834c:	20024428 	.word	0x20024428
 8018350:	2002442c 	.word	0x2002442c
 8018354:	2002442a 	.word	0x2002442a
 8018358:	20024424 	.word	0x20024424
 801835c:	200243d0 	.word	0x200243d0
 8018360:	200243d2 	.word	0x200243d2

08018364 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 8018364:	4a17      	ldr	r2, [pc, #92]	; (80183c4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
 8018366:	8803      	ldrh	r3, [r0, #0]
 8018368:	8812      	ldrh	r2, [r2, #0]
 801836a:	4293      	cmp	r3, r2
 801836c:	d213      	bcs.n	8018396 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x32>
 801836e:	4a16      	ldr	r2, [pc, #88]	; (80183c8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 8018370:	2114      	movs	r1, #20
 8018372:	6812      	ldr	r2, [r2, #0]
 8018374:	fb01 2303 	mla	r3, r1, r3, r2
 8018378:	8a1a      	ldrh	r2, [r3, #16]
 801837a:	8919      	ldrh	r1, [r3, #8]
 801837c:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8018380:	428a      	cmp	r2, r1
 8018382:	db1d      	blt.n	80183c0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 8018384:	8a58      	ldrh	r0, [r3, #18]
 8018386:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801838a:	895b      	ldrh	r3, [r3, #10]
 801838c:	4298      	cmp	r0, r3
 801838e:	bfac      	ite	ge
 8018390:	2000      	movge	r0, #0
 8018392:	2001      	movlt	r0, #1
 8018394:	4770      	bx	lr
 8018396:	490d      	ldr	r1, [pc, #52]	; (80183cc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 8018398:	8809      	ldrh	r1, [r1, #0]
 801839a:	4411      	add	r1, r2
 801839c:	428b      	cmp	r3, r1
 801839e:	da0d      	bge.n	80183bc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 80183a0:	1a9b      	subs	r3, r3, r2
 80183a2:	4a0b      	ldr	r2, [pc, #44]	; (80183d0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 80183a4:	210e      	movs	r1, #14
 80183a6:	6812      	ldr	r2, [r2, #0]
 80183a8:	fb01 2303 	mla	r3, r1, r3, r2
 80183ac:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 80183b0:	891a      	ldrh	r2, [r3, #8]
 80183b2:	4291      	cmp	r1, r2
 80183b4:	db04      	blt.n	80183c0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 80183b6:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 80183ba:	e7e6      	b.n	801838a <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x26>
 80183bc:	2000      	movs	r0, #0
 80183be:	4770      	bx	lr
 80183c0:	2001      	movs	r0, #1
 80183c2:	4770      	bx	lr
 80183c4:	20024428 	.word	0x20024428
 80183c8:	2002442c 	.word	0x2002442c
 80183cc:	2002442a 	.word	0x2002442a
 80183d0:	20024424 	.word	0x20024424

080183d4 <_ZNK8touchgfx6Bitmap7getDataEv>:
 80183d4:	4a12      	ldr	r2, [pc, #72]	; (8018420 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 80183d6:	8803      	ldrh	r3, [r0, #0]
 80183d8:	8811      	ldrh	r1, [r2, #0]
 80183da:	428b      	cmp	r3, r1
 80183dc:	d20b      	bcs.n	80183f6 <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 80183de:	4a11      	ldr	r2, [pc, #68]	; (8018424 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 80183e0:	6812      	ldr	r2, [r2, #0]
 80183e2:	b112      	cbz	r2, 80183ea <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 80183e4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80183e8:	b9c0      	cbnz	r0, 801841c <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 80183ea:	4a0f      	ldr	r2, [pc, #60]	; (8018428 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 80183ec:	6811      	ldr	r1, [r2, #0]
 80183ee:	2214      	movs	r2, #20
 80183f0:	4353      	muls	r3, r2
 80183f2:	58c8      	ldr	r0, [r1, r3]
 80183f4:	4770      	bx	lr
 80183f6:	4a0d      	ldr	r2, [pc, #52]	; (801842c <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 80183f8:	8812      	ldrh	r2, [r2, #0]
 80183fa:	440a      	add	r2, r1
 80183fc:	4293      	cmp	r3, r2
 80183fe:	da04      	bge.n	801840a <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 8018400:	4a08      	ldr	r2, [pc, #32]	; (8018424 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8018402:	6812      	ldr	r2, [r2, #0]
 8018404:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8018408:	4770      	bx	lr
 801840a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801840e:	4293      	cmp	r3, r2
 8018410:	d103      	bne.n	801841a <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 8018412:	4b07      	ldr	r3, [pc, #28]	; (8018430 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 8018414:	681b      	ldr	r3, [r3, #0]
 8018416:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8018418:	4770      	bx	lr
 801841a:	2000      	movs	r0, #0
 801841c:	4770      	bx	lr
 801841e:	bf00      	nop
 8018420:	20024428 	.word	0x20024428
 8018424:	20024420 	.word	0x20024420
 8018428:	2002442c 	.word	0x2002442c
 801842c:	2002442a 	.word	0x2002442a
 8018430:	200243dc 	.word	0x200243dc

08018434 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 8018434:	4b24      	ldr	r3, [pc, #144]	; (80184c8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 8018436:	8802      	ldrh	r2, [r0, #0]
 8018438:	8818      	ldrh	r0, [r3, #0]
 801843a:	4282      	cmp	r2, r0
 801843c:	d221      	bcs.n	8018482 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 801843e:	4b23      	ldr	r3, [pc, #140]	; (80184cc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 8018440:	6819      	ldr	r1, [r3, #0]
 8018442:	2314      	movs	r3, #20
 8018444:	fb03 1302 	mla	r3, r3, r2, r1
 8018448:	6858      	ldr	r0, [r3, #4]
 801844a:	2800      	cmp	r0, #0
 801844c:	d03a      	beq.n	80184c4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801844e:	4920      	ldr	r1, [pc, #128]	; (80184d0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8018450:	6809      	ldr	r1, [r1, #0]
 8018452:	2900      	cmp	r1, #0
 8018454:	d036      	beq.n	80184c4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8018456:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801845a:	2900      	cmp	r1, #0
 801845c:	d032      	beq.n	80184c4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801845e:	891a      	ldrh	r2, [r3, #8]
 8018460:	8958      	ldrh	r0, [r3, #10]
 8018462:	4350      	muls	r0, r2
 8018464:	7c5a      	ldrb	r2, [r3, #17]
 8018466:	7cdb      	ldrb	r3, [r3, #19]
 8018468:	0952      	lsrs	r2, r2, #5
 801846a:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801846e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8018472:	2b0b      	cmp	r3, #11
 8018474:	bf18      	it	ne
 8018476:	0040      	lslne	r0, r0, #1
 8018478:	3003      	adds	r0, #3
 801847a:	f020 0003 	bic.w	r0, r0, #3
 801847e:	4408      	add	r0, r1
 8018480:	4770      	bx	lr
 8018482:	4b14      	ldr	r3, [pc, #80]	; (80184d4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 8018484:	881b      	ldrh	r3, [r3, #0]
 8018486:	4403      	add	r3, r0
 8018488:	429a      	cmp	r2, r3
 801848a:	da1a      	bge.n	80184c2 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801848c:	4b12      	ldr	r3, [pc, #72]	; (80184d8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801848e:	1a10      	subs	r0, r2, r0
 8018490:	210e      	movs	r1, #14
 8018492:	681b      	ldr	r3, [r3, #0]
 8018494:	fb01 3000 	mla	r0, r1, r0, r3
 8018498:	7b03      	ldrb	r3, [r0, #12]
 801849a:	f003 031f 	and.w	r3, r3, #31
 801849e:	2b0b      	cmp	r3, #11
 80184a0:	d10b      	bne.n	80184ba <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 80184a2:	8903      	ldrh	r3, [r0, #8]
 80184a4:	8940      	ldrh	r0, [r0, #10]
 80184a6:	4358      	muls	r0, r3
 80184a8:	4b09      	ldr	r3, [pc, #36]	; (80184d0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 80184aa:	3003      	adds	r0, #3
 80184ac:	6819      	ldr	r1, [r3, #0]
 80184ae:	f020 0303 	bic.w	r3, r0, #3
 80184b2:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 80184b6:	4418      	add	r0, r3
 80184b8:	4770      	bx	lr
 80184ba:	2b0d      	cmp	r3, #13
 80184bc:	d101      	bne.n	80184c2 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 80184be:	300d      	adds	r0, #13
 80184c0:	4770      	bx	lr
 80184c2:	2000      	movs	r0, #0
 80184c4:	4770      	bx	lr
 80184c6:	bf00      	nop
 80184c8:	20024428 	.word	0x20024428
 80184cc:	2002442c 	.word	0x2002442c
 80184d0:	20024420 	.word	0x20024420
 80184d4:	2002442a 	.word	0x2002442a
 80184d8:	20024424 	.word	0x20024424

080184dc <_ZNK8touchgfx6Bitmap9getFormatEv>:
 80184dc:	4a17      	ldr	r2, [pc, #92]	; (801853c <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 80184de:	b510      	push	{r4, lr}
 80184e0:	8803      	ldrh	r3, [r0, #0]
 80184e2:	8812      	ldrh	r2, [r2, #0]
 80184e4:	4293      	cmp	r3, r2
 80184e6:	d20c      	bcs.n	8018502 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 80184e8:	4a15      	ldr	r2, [pc, #84]	; (8018540 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 80184ea:	2114      	movs	r1, #20
 80184ec:	6812      	ldr	r2, [r2, #0]
 80184ee:	fb01 2303 	mla	r3, r1, r3, r2
 80184f2:	7c58      	ldrb	r0, [r3, #17]
 80184f4:	0942      	lsrs	r2, r0, #5
 80184f6:	7cd8      	ldrb	r0, [r3, #19]
 80184f8:	f3c0 1042 	ubfx	r0, r0, #5, #3
 80184fc:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 8018500:	bd10      	pop	{r4, pc}
 8018502:	4910      	ldr	r1, [pc, #64]	; (8018544 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 8018504:	8809      	ldrh	r1, [r1, #0]
 8018506:	4411      	add	r1, r2
 8018508:	428b      	cmp	r3, r1
 801850a:	da09      	bge.n	8018520 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801850c:	1a9b      	subs	r3, r3, r2
 801850e:	4a0e      	ldr	r2, [pc, #56]	; (8018548 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 8018510:	210e      	movs	r1, #14
 8018512:	6812      	ldr	r2, [r2, #0]
 8018514:	fb01 2303 	mla	r3, r1, r3, r2
 8018518:	7b18      	ldrb	r0, [r3, #12]
 801851a:	f000 001f 	and.w	r0, r0, #31
 801851e:	e7ef      	b.n	8018500 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 8018520:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8018524:	4293      	cmp	r3, r2
 8018526:	d106      	bne.n	8018536 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 8018528:	f7f7 f9c4 	bl	800f8b4 <_ZN8touchgfx3HAL3lcdEv>
 801852c:	6803      	ldr	r3, [r0, #0]
 801852e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018534:	4718      	bx	r3
 8018536:	2000      	movs	r0, #0
 8018538:	e7e2      	b.n	8018500 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 801853a:	bf00      	nop
 801853c:	20024428 	.word	0x20024428
 8018540:	2002442c 	.word	0x2002442c
 8018544:	2002442a 	.word	0x2002442a
 8018548:	20024424 	.word	0x20024424

0801854c <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 801854c:	2010      	movs	r0, #16
 801854e:	4770      	bx	lr

08018550 <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 8018550:	2000      	movs	r0, #0
 8018552:	4770      	bx	lr

08018554 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 8018554:	4b02      	ldr	r3, [pc, #8]	; (8018560 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0xc>)
 8018556:	8818      	ldrh	r0, [r3, #0]
 8018558:	0040      	lsls	r0, r0, #1
 801855a:	b280      	uxth	r0, r0
 801855c:	4770      	bx	lr
 801855e:	bf00      	nop
 8018560:	200243d6 	.word	0x200243d6

08018564 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8018564:	2bff      	cmp	r3, #255	; 0xff
 8018566:	d050      	beq.n	801860a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 8018568:	2a0b      	cmp	r2, #11
 801856a:	d04a      	beq.n	8018602 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801856c:	d80e      	bhi.n	801858c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 801856e:	2a03      	cmp	r2, #3
 8018570:	d03f      	beq.n	80185f2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 8018572:	d804      	bhi.n	801857e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8018574:	2a01      	cmp	r2, #1
 8018576:	d03e      	beq.n	80185f6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 8018578:	d93f      	bls.n	80185fa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801857a:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801857c:	4770      	bx	lr
 801857e:	2a09      	cmp	r2, #9
 8018580:	d03f      	beq.n	8018602 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 8018582:	d83c      	bhi.n	80185fe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 8018584:	2a08      	cmp	r2, #8
 8018586:	d03a      	beq.n	80185fe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 8018588:	2000      	movs	r0, #0
 801858a:	4770      	bx	lr
 801858c:	2a2f      	cmp	r2, #47	; 0x2f
 801858e:	d024      	beq.n	80185da <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 8018590:	d80d      	bhi.n	80185ae <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 8018592:	2a2d      	cmp	r2, #45	; 0x2d
 8018594:	d014      	beq.n	80185c0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5c>
 8018596:	d826      	bhi.n	80185e6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 8018598:	2a2c      	cmp	r2, #44	; 0x2c
 801859a:	d1f5      	bne.n	8018588 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801859c:	684b      	ldr	r3, [r1, #4]
 801859e:	781b      	ldrb	r3, [r3, #0]
 80185a0:	2b01      	cmp	r3, #1
 80185a2:	d018      	beq.n	80185d6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 80185a4:	d323      	bcc.n	80185ee <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 80185a6:	2b02      	cmp	r3, #2
 80185a8:	d1ee      	bne.n	8018588 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80185aa:	6880      	ldr	r0, [r0, #8]
 80185ac:	4770      	bx	lr
 80185ae:	2a31      	cmp	r2, #49	; 0x31
 80185b0:	d004      	beq.n	80185bc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x58>
 80185b2:	d328      	bcc.n	8018606 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 80185b4:	2a32      	cmp	r2, #50	; 0x32
 80185b6:	d026      	beq.n	8018606 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 80185b8:	2a33      	cmp	r2, #51	; 0x33
 80185ba:	d1e5      	bne.n	8018588 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80185bc:	6f00      	ldr	r0, [r0, #112]	; 0x70
 80185be:	4770      	bx	lr
 80185c0:	684b      	ldr	r3, [r1, #4]
 80185c2:	781b      	ldrb	r3, [r3, #0]
 80185c4:	2b01      	cmp	r3, #1
 80185c6:	d004      	beq.n	80185d2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80185c8:	d30b      	bcc.n	80185e2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80185ca:	2b02      	cmp	r3, #2
 80185cc:	d1dc      	bne.n	8018588 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80185ce:	6900      	ldr	r0, [r0, #16]
 80185d0:	4770      	bx	lr
 80185d2:	6a00      	ldr	r0, [r0, #32]
 80185d4:	4770      	bx	lr
 80185d6:	6980      	ldr	r0, [r0, #24]
 80185d8:	4770      	bx	lr
 80185da:	684b      	ldr	r3, [r1, #4]
 80185dc:	781b      	ldrb	r3, [r3, #0]
 80185de:	2b00      	cmp	r3, #0
 80185e0:	d1d2      	bne.n	8018588 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80185e2:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80185e4:	4770      	bx	lr
 80185e6:	684b      	ldr	r3, [r1, #4]
 80185e8:	781b      	ldrb	r3, [r3, #0]
 80185ea:	2b00      	cmp	r3, #0
 80185ec:	d1cc      	bne.n	8018588 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80185ee:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80185f0:	4770      	bx	lr
 80185f2:	6c80      	ldr	r0, [r0, #72]	; 0x48
 80185f4:	4770      	bx	lr
 80185f6:	6d00      	ldr	r0, [r0, #80]	; 0x50
 80185f8:	4770      	bx	lr
 80185fa:	6c00      	ldr	r0, [r0, #64]	; 0x40
 80185fc:	4770      	bx	lr
 80185fe:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8018600:	4770      	bx	lr
 8018602:	6e00      	ldr	r0, [r0, #96]	; 0x60
 8018604:	4770      	bx	lr
 8018606:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8018608:	4770      	bx	lr
 801860a:	2a0b      	cmp	r2, #11
 801860c:	d049      	beq.n	80186a2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801860e:	d80e      	bhi.n	801862e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xca>
 8018610:	2a03      	cmp	r2, #3
 8018612:	d040      	beq.n	8018696 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 8018614:	d804      	bhi.n	8018620 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbc>
 8018616:	2a01      	cmp	r2, #1
 8018618:	d03f      	beq.n	801869a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 801861a:	d940      	bls.n	801869e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801861c:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801861e:	4770      	bx	lr
 8018620:	2a09      	cmp	r2, #9
 8018622:	d03e      	beq.n	80186a2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 8018624:	d801      	bhi.n	801862a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc6>
 8018626:	2a08      	cmp	r2, #8
 8018628:	d1ae      	bne.n	8018588 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801862a:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 801862c:	4770      	bx	lr
 801862e:	2a2f      	cmp	r2, #47	; 0x2f
 8018630:	d024      	beq.n	801867c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 8018632:	d80d      	bhi.n	8018650 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 8018634:	2a2d      	cmp	r2, #45	; 0x2d
 8018636:	d014      	beq.n	8018662 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfe>
 8018638:	d826      	bhi.n	8018688 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x124>
 801863a:	2a2c      	cmp	r2, #44	; 0x2c
 801863c:	d1a4      	bne.n	8018588 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801863e:	684b      	ldr	r3, [r1, #4]
 8018640:	781b      	ldrb	r3, [r3, #0]
 8018642:	2b01      	cmp	r3, #1
 8018644:	d018      	beq.n	8018678 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x114>
 8018646:	d324      	bcc.n	8018692 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 8018648:	2b02      	cmp	r3, #2
 801864a:	d19d      	bne.n	8018588 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801864c:	68c0      	ldr	r0, [r0, #12]
 801864e:	4770      	bx	lr
 8018650:	2a31      	cmp	r2, #49	; 0x31
 8018652:	d004      	beq.n	801865e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfa>
 8018654:	d327      	bcc.n	80186a6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 8018656:	2a32      	cmp	r2, #50	; 0x32
 8018658:	d025      	beq.n	80186a6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 801865a:	2a33      	cmp	r2, #51	; 0x33
 801865c:	d194      	bne.n	8018588 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801865e:	6f40      	ldr	r0, [r0, #116]	; 0x74
 8018660:	4770      	bx	lr
 8018662:	684b      	ldr	r3, [r1, #4]
 8018664:	781b      	ldrb	r3, [r3, #0]
 8018666:	2b01      	cmp	r3, #1
 8018668:	d004      	beq.n	8018674 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 801866a:	d30b      	bcc.n	8018684 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x120>
 801866c:	2b02      	cmp	r3, #2
 801866e:	d18b      	bne.n	8018588 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8018670:	6940      	ldr	r0, [r0, #20]
 8018672:	4770      	bx	lr
 8018674:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8018676:	4770      	bx	lr
 8018678:	69c0      	ldr	r0, [r0, #28]
 801867a:	4770      	bx	lr
 801867c:	684b      	ldr	r3, [r1, #4]
 801867e:	781b      	ldrb	r3, [r3, #0]
 8018680:	2b00      	cmp	r3, #0
 8018682:	d181      	bne.n	8018588 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8018684:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8018686:	4770      	bx	lr
 8018688:	684b      	ldr	r3, [r1, #4]
 801868a:	781b      	ldrb	r3, [r3, #0]
 801868c:	2b00      	cmp	r3, #0
 801868e:	f47f af7b 	bne.w	8018588 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8018692:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8018694:	4770      	bx	lr
 8018696:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8018698:	4770      	bx	lr
 801869a:	6d40      	ldr	r0, [r0, #84]	; 0x54
 801869c:	4770      	bx	lr
 801869e:	6c40      	ldr	r0, [r0, #68]	; 0x44
 80186a0:	4770      	bx	lr
 80186a2:	6e40      	ldr	r0, [r0, #100]	; 0x64
 80186a4:	4770      	bx	lr
 80186a6:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 80186a8:	4770      	bx	lr

080186aa <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 80186aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80186ae:	b088      	sub	sp, #32
 80186b0:	4606      	mov	r6, r0
 80186b2:	4688      	mov	r8, r1
 80186b4:	4691      	mov	r9, r2
 80186b6:	ac08      	add	r4, sp, #32
 80186b8:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 80186bc:	4620      	mov	r0, r4
 80186be:	f7ff fe89 	bl	80183d4 <_ZNK8touchgfx6Bitmap7getDataEv>
 80186c2:	6833      	ldr	r3, [r6, #0]
 80186c4:	4605      	mov	r5, r0
 80186c6:	4620      	mov	r0, r4
 80186c8:	699f      	ldr	r7, [r3, #24]
 80186ca:	f7ff fd97 	bl	80181fc <_ZNK8touchgfx6Bitmap8getWidthEv>
 80186ce:	4682      	mov	sl, r0
 80186d0:	4620      	mov	r0, r4
 80186d2:	f7ff fdc7 	bl	8018264 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80186d6:	9500      	str	r5, [sp, #0]
 80186d8:	464b      	mov	r3, r9
 80186da:	4642      	mov	r2, r8
 80186dc:	4631      	mov	r1, r6
 80186de:	e9cd a001 	strd	sl, r0, [sp, #4]
 80186e2:	a806      	add	r0, sp, #24
 80186e4:	47b8      	blx	r7
 80186e6:	4628      	mov	r0, r5
 80186e8:	b008      	add	sp, #32
 80186ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

080186f0 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 80186f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80186f4:	2300      	movs	r3, #0
 80186f6:	9300      	str	r3, [sp, #0]
 80186f8:	4b3d      	ldr	r3, [pc, #244]	; (80187f0 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x100>)
 80186fa:	781b      	ldrb	r3, [r3, #0]
 80186fc:	2b00      	cmp	r3, #0
 80186fe:	d137      	bne.n	8018770 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x80>
 8018700:	4a3c      	ldr	r2, [pc, #240]	; (80187f4 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 8018702:	f9b2 2000 	ldrsh.w	r2, [r2]
 8018706:	f8ad 2004 	strh.w	r2, [sp, #4]
 801870a:	2b00      	cmp	r3, #0
 801870c:	d132      	bne.n	8018774 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x84>
 801870e:	4b3a      	ldr	r3, [pc, #232]	; (80187f8 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 8018710:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018714:	ac02      	add	r4, sp, #8
 8018716:	6808      	ldr	r0, [r1, #0]
 8018718:	f8ad 3006 	strh.w	r3, [sp, #6]
 801871c:	ab02      	add	r3, sp, #8
 801871e:	6849      	ldr	r1, [r1, #4]
 8018720:	4d36      	ldr	r5, [pc, #216]	; (80187fc <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x10c>)
 8018722:	c303      	stmia	r3!, {r0, r1}
 8018724:	4669      	mov	r1, sp
 8018726:	4620      	mov	r0, r4
 8018728:	f7fe fc44 	bl	8016fb4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801872c:	4668      	mov	r0, sp
 801872e:	f7fe fc19 	bl	8016f64 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8018732:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8018736:	f8bd 2000 	ldrh.w	r2, [sp]
 801873a:	462f      	mov	r7, r5
 801873c:	6828      	ldr	r0, [r5, #0]
 801873e:	4413      	add	r3, r2
 8018740:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8018744:	f8ad 3008 	strh.w	r3, [sp, #8]
 8018748:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801874c:	4413      	add	r3, r2
 801874e:	f8ad 300a 	strh.w	r3, [sp, #10]
 8018752:	6803      	ldr	r3, [r0, #0]
 8018754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018756:	4798      	blx	r3
 8018758:	f010 0f01 	tst.w	r0, #1
 801875c:	d00c      	beq.n	8018778 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x88>
 801875e:	6828      	ldr	r0, [r5, #0]
 8018760:	6803      	ldr	r3, [r0, #0]
 8018762:	e894 0006 	ldmia.w	r4, {r1, r2}
 8018766:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018768:	4798      	blx	r3
 801876a:	b004      	add	sp, #16
 801876c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018770:	4a21      	ldr	r2, [pc, #132]	; (80187f8 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 8018772:	e7c6      	b.n	8018702 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 8018774:	4b1f      	ldr	r3, [pc, #124]	; (80187f4 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 8018776:	e7cb      	b.n	8018710 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 8018778:	6838      	ldr	r0, [r7, #0]
 801877a:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 801877e:	6803      	ldr	r3, [r0, #0]
 8018780:	f9bd 500e 	ldrsh.w	r5, [sp, #14]
 8018784:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8018788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801878a:	4798      	blx	r3
 801878c:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8018790:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8018794:	f8bd 6004 	ldrh.w	r6, [sp, #4]
 8018798:	fb16 3602 	smlabb	r6, r6, r2, r3
 801879c:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 80187a0:	6838      	ldr	r0, [r7, #0]
 80187a2:	6803      	ldr	r3, [r0, #0]
 80187a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80187a6:	4798      	blx	r3
 80187a8:	4a12      	ldr	r2, [pc, #72]	; (80187f4 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 80187aa:	f9bd 400a 	ldrsh.w	r4, [sp, #10]
 80187ae:	8813      	ldrh	r3, [r2, #0]
 80187b0:	4691      	mov	r9, r2
 80187b2:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 80187b6:	435d      	muls	r5, r3
 80187b8:	fb03 1404 	mla	r4, r3, r4, r1
 80187bc:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 80187c0:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 80187c4:	6838      	ldr	r0, [r7, #0]
 80187c6:	42ac      	cmp	r4, r5
 80187c8:	6803      	ldr	r3, [r0, #0]
 80187ca:	d20e      	bcs.n	80187ea <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xfa>
 80187cc:	f8d3 a034 	ldr.w	sl, [r3, #52]	; 0x34
 80187d0:	4632      	mov	r2, r6
 80187d2:	4643      	mov	r3, r8
 80187d4:	4621      	mov	r1, r4
 80187d6:	47d0      	blx	sl
 80187d8:	f8b9 3000 	ldrh.w	r3, [r9]
 80187dc:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80187e0:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80187e4:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 80187e8:	e7ec      	b.n	80187c4 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd4>
 80187ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80187ec:	4798      	blx	r3
 80187ee:	e7bc      	b.n	801876a <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 80187f0:	200243d4 	.word	0x200243d4
 80187f4:	200243d6 	.word	0x200243d6
 80187f8:	200243d8 	.word	0x200243d8
 80187fc:	200243dc 	.word	0x200243dc

08018800 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 8018800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018804:	b08b      	sub	sp, #44	; 0x2c
 8018806:	460f      	mov	r7, r1
 8018808:	4616      	mov	r6, r2
 801880a:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
 801880e:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 8018812:	f1bb 0f00 	cmp.w	fp, #0
 8018816:	d049      	beq.n	80188ac <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 8018818:	6810      	ldr	r0, [r2, #0]
 801881a:	ad06      	add	r5, sp, #24
 801881c:	6851      	ldr	r1, [r2, #4]
 801881e:	c503      	stmia	r5!, {r0, r1}
 8018820:	6818      	ldr	r0, [r3, #0]
 8018822:	ad08      	add	r5, sp, #32
 8018824:	6859      	ldr	r1, [r3, #4]
 8018826:	c503      	stmia	r5!, {r0, r1}
 8018828:	a806      	add	r0, sp, #24
 801882a:	f7fe fb9b 	bl	8016f64 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801882e:	4631      	mov	r1, r6
 8018830:	a808      	add	r0, sp, #32
 8018832:	f7fe fbbf 	bl	8016fb4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8018836:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801883a:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801883e:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 8018842:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 8018846:	fb16 2103 	smlabb	r1, r6, r3, r2
 801884a:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 801884e:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 8018852:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8018856:	4f5f      	ldr	r7, [pc, #380]	; (80189d4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 8018858:	440a      	add	r2, r1
 801885a:	6838      	ldr	r0, [r7, #0]
 801885c:	46b9      	mov	r9, r7
 801885e:	f8ad 2020 	strh.w	r2, [sp, #32]
 8018862:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8018866:	4413      	add	r3, r2
 8018868:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801886c:	6803      	ldr	r3, [r0, #0]
 801886e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018870:	4798      	blx	r3
 8018872:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8018876:	d01c      	beq.n	80188b2 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 8018878:	f010 0f04 	tst.w	r0, #4
 801887c:	d01d      	beq.n	80188ba <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 801887e:	f8d9 0000 	ldr.w	r0, [r9]
 8018882:	2700      	movs	r7, #0
 8018884:	b2ad      	uxth	r5, r5
 8018886:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801888a:	6801      	ldr	r1, [r0, #0]
 801888c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8018890:	f8cd b00c 	str.w	fp, [sp, #12]
 8018894:	9501      	str	r5, [sp, #4]
 8018896:	e9cd 4704 	strd	r4, r7, [sp, #16]
 801889a:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 801889e:	9402      	str	r4, [sp, #8]
 80188a0:	fa1f f488 	uxth.w	r4, r8
 80188a4:	9400      	str	r4, [sp, #0]
 80188a6:	6c4c      	ldr	r4, [r1, #68]	; 0x44
 80188a8:	4631      	mov	r1, r6
 80188aa:	47a0      	blx	r4
 80188ac:	b00b      	add	sp, #44	; 0x2c
 80188ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80188b2:	b914      	cbnz	r4, 80188ba <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 80188b4:	f010 0f01 	tst.w	r0, #1
 80188b8:	e7e0      	b.n	801887c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7c>
 80188ba:	f8d9 0000 	ldr.w	r0, [r9]
 80188be:	ea4f 0748 	mov.w	r7, r8, lsl #1
 80188c2:	6803      	ldr	r3, [r0, #0]
 80188c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80188c6:	4798      	blx	r3
 80188c8:	4b43      	ldr	r3, [pc, #268]	; (80189d8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d8>)
 80188ca:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 80188ce:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 80188d2:	881a      	ldrh	r2, [r3, #0]
 80188d4:	469a      	mov	sl, r3
 80188d6:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 80188da:	fb05 f502 	mul.w	r5, r5, r2
 80188de:	fb02 1404 	mla	r4, r2, r4, r1
 80188e2:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 80188e6:	d059      	beq.n	801899c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>
 80188e8:	f1cb 09ff 	rsb	r9, fp, #255	; 0xff
 80188ec:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 80188f0:	fa1f f28b 	uxth.w	r2, fp
 80188f4:	469e      	mov	lr, r3
 80188f6:	fa1f f989 	uxth.w	r9, r9
 80188fa:	42ac      	cmp	r4, r5
 80188fc:	d264      	bcs.n	80189c8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 80188fe:	eb04 0a07 	add.w	sl, r4, r7
 8018902:	4554      	cmp	r4, sl
 8018904:	d23d      	bcs.n	8018982 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x182>
 8018906:	8821      	ldrh	r1, [r4, #0]
 8018908:	f836 3b02 	ldrh.w	r3, [r6], #2
 801890c:	1208      	asrs	r0, r1, #8
 801890e:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8018912:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8018916:	ea4f 0be1 	mov.w	fp, r1, asr #3
 801891a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801891e:	00c9      	lsls	r1, r1, #3
 8018920:	fb10 f009 	smulbb	r0, r0, r9
 8018924:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 8018928:	b2c9      	uxtb	r1, r1
 801892a:	fb0c 0c02 	mla	ip, ip, r2, r0
 801892e:	10d8      	asrs	r0, r3, #3
 8018930:	fb1b fb09 	smulbb	fp, fp, r9
 8018934:	00db      	lsls	r3, r3, #3
 8018936:	fa1f fc8c 	uxth.w	ip, ip
 801893a:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801893e:	fb11 f109 	smulbb	r1, r1, r9
 8018942:	b2db      	uxtb	r3, r3
 8018944:	fb00 b002 	mla	r0, r0, r2, fp
 8018948:	f10c 0b01 	add.w	fp, ip, #1
 801894c:	fb03 1302 	mla	r3, r3, r2, r1
 8018950:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 8018954:	b29b      	uxth	r3, r3
 8018956:	b280      	uxth	r0, r0
 8018958:	f40c 4b78 	and.w	fp, ip, #63488	; 0xf800
 801895c:	f103 0c01 	add.w	ip, r3, #1
 8018960:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8018964:	1c43      	adds	r3, r0, #1
 8018966:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801896a:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801896e:	0940      	lsrs	r0, r0, #5
 8018970:	ea4c 0c0b 	orr.w	ip, ip, fp
 8018974:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8018978:	ea4c 0c00 	orr.w	ip, ip, r0
 801897c:	f824 cb02 	strh.w	ip, [r4], #2
 8018980:	e7bf      	b.n	8018902 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x102>
 8018982:	f8be 3000 	ldrh.w	r3, [lr]
 8018986:	eba3 0308 	sub.w	r3, r3, r8
 801898a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801898e:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8018992:	eba3 0308 	sub.w	r3, r3, r8
 8018996:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801899a:	e7ae      	b.n	80188fa <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfa>
 801899c:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 80189a0:	f8d9 0000 	ldr.w	r0, [r9]
 80189a4:	42ac      	cmp	r4, r5
 80189a6:	6803      	ldr	r3, [r0, #0]
 80189a8:	d20e      	bcs.n	80189c8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 80189aa:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
 80189ae:	4632      	mov	r2, r6
 80189b0:	463b      	mov	r3, r7
 80189b2:	4621      	mov	r1, r4
 80189b4:	47c0      	blx	r8
 80189b6:	f8ba 3000 	ldrh.w	r3, [sl]
 80189ba:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80189be:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80189c2:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 80189c6:	e7eb      	b.n	80189a0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
 80189c8:	4b02      	ldr	r3, [pc, #8]	; (80189d4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 80189ca:	6818      	ldr	r0, [r3, #0]
 80189cc:	6803      	ldr	r3, [r0, #0]
 80189ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80189d0:	4798      	blx	r3
 80189d2:	e76b      	b.n	80188ac <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 80189d4:	200243dc 	.word	0x200243dc
 80189d8:	200243d6 	.word	0x200243d6

080189dc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 80189dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80189e0:	b091      	sub	sp, #68	; 0x44
 80189e2:	469b      	mov	fp, r3
 80189e4:	4616      	mov	r6, r2
 80189e6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80189ea:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 80189ee:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80189f2:	f9bd 906c 	ldrsh.w	r9, [sp, #108]	; 0x6c
 80189f6:	4604      	mov	r4, r0
 80189f8:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	; 0x70
 80189fc:	4640      	mov	r0, r8
 80189fe:	460d      	mov	r5, r1
 8018a00:	4659      	mov	r1, fp
 8018a02:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8018a06:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8018a0a:	f8ad 902c 	strh.w	r9, [sp, #44]	; 0x2c
 8018a0e:	f8ad 702e 	strh.w	r7, [sp, #46]	; 0x2e
 8018a12:	f7fc fce1 	bl	80153d8 <_ZN8touchgfx4RectaNERKS0_>
 8018a16:	4631      	mov	r1, r6
 8018a18:	4640      	mov	r0, r8
 8018a1a:	f7fc fcdd 	bl	80153d8 <_ZN8touchgfx4RectaNERKS0_>
 8018a1e:	4b74      	ldr	r3, [pc, #464]	; (8018bf0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x214>)
 8018a20:	8818      	ldrh	r0, [r3, #0]
 8018a22:	4b74      	ldr	r3, [pc, #464]	; (8018bf4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x218>)
 8018a24:	b202      	sxth	r2, r0
 8018a26:	8819      	ldrh	r1, [r3, #0]
 8018a28:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 8018a2c:	b20e      	sxth	r6, r1
 8018a2e:	2b00      	cmp	r3, #0
 8018a30:	da07      	bge.n	8018a42 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x66>
 8018a32:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 8018a36:	4463      	add	r3, ip
 8018a38:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 8018a3c:	2300      	movs	r3, #0
 8018a3e:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 8018a42:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 8018a46:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 8018a4a:	1ad2      	subs	r2, r2, r3
 8018a4c:	4594      	cmp	ip, r2
 8018a4e:	bfc4      	itt	gt
 8018a50:	1ac2      	subgt	r2, r0, r3
 8018a52:	f8ad 202c 	strhgt.w	r2, [sp, #44]	; 0x2c
 8018a56:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 8018a5a:	2a00      	cmp	r2, #0
 8018a5c:	da07      	bge.n	8018a6e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x92>
 8018a5e:	f8bd c02e 	ldrh.w	ip, [sp, #46]	; 0x2e
 8018a62:	4462      	add	r2, ip
 8018a64:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 8018a68:	2200      	movs	r2, #0
 8018a6a:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 8018a6e:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	; 0x2a
 8018a72:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 8018a76:	eba6 060a 	sub.w	r6, r6, sl
 8018a7a:	42b2      	cmp	r2, r6
 8018a7c:	bfc4      	itt	gt
 8018a7e:	eba1 020a 	subgt.w	r2, r1, sl
 8018a82:	f8ad 202e 	strhgt.w	r2, [sp, #46]	; 0x2e
 8018a86:	4a5c      	ldr	r2, [pc, #368]	; (8018bf8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x21c>)
 8018a88:	7812      	ldrb	r2, [r2, #0]
 8018a8a:	b9a2      	cbnz	r2, 8018ab6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xda>
 8018a8c:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 8018a90:	4286      	cmp	r6, r0
 8018a92:	4640      	mov	r0, r8
 8018a94:	9303      	str	r3, [sp, #12]
 8018a96:	bf14      	ite	ne
 8018a98:	2600      	movne	r6, #0
 8018a9a:	2601      	moveq	r6, #1
 8018a9c:	f7fc fcdf 	bl	801545e <_ZNK8touchgfx4Rect7isEmptyEv>
 8018aa0:	9b03      	ldr	r3, [sp, #12]
 8018aa2:	b160      	cbz	r0, 8018abe <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xe2>
 8018aa4:	2300      	movs	r3, #0
 8018aa6:	8023      	strh	r3, [r4, #0]
 8018aa8:	8063      	strh	r3, [r4, #2]
 8018aaa:	80a3      	strh	r3, [r4, #4]
 8018aac:	4620      	mov	r0, r4
 8018aae:	80e3      	strh	r3, [r4, #6]
 8018ab0:	b011      	add	sp, #68	; 0x44
 8018ab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018ab6:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 8018aba:	428e      	cmp	r6, r1
 8018abc:	e7e9      	b.n	8018a92 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb6>
 8018abe:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 8018ac2:	a90e      	add	r1, sp, #56	; 0x38
 8018ac4:	900e      	str	r0, [sp, #56]	; 0x38
 8018ac6:	a80c      	add	r0, sp, #48	; 0x30
 8018ac8:	9205      	str	r2, [sp, #20]
 8018aca:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 8018ace:	f8ad 903c 	strh.w	r9, [sp, #60]	; 0x3c
 8018ad2:	9206      	str	r2, [sp, #24]
 8018ad4:	f8bb 2000 	ldrh.w	r2, [fp]
 8018ad8:	f8ad 703e 	strh.w	r7, [sp, #62]	; 0x3e
 8018adc:	1a9b      	subs	r3, r3, r2
 8018ade:	b21b      	sxth	r3, r3
 8018ae0:	9303      	str	r3, [sp, #12]
 8018ae2:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8018ae6:	f8df b118 	ldr.w	fp, [pc, #280]	; 8018c00 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 8018aea:	ebaa 0a03 	sub.w	sl, sl, r3
 8018aee:	fa0f f38a 	sxth.w	r3, sl
 8018af2:	9304      	str	r3, [sp, #16]
 8018af4:	9b03      	ldr	r3, [sp, #12]
 8018af6:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 8018afa:	9b04      	ldr	r3, [sp, #16]
 8018afc:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8018b00:	9b05      	ldr	r3, [sp, #20]
 8018b02:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8018b06:	9b06      	ldr	r3, [sp, #24]
 8018b08:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8018b0c:	f7fe fa52 	bl	8016fb4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8018b10:	4640      	mov	r0, r8
 8018b12:	f7fe fa27 	bl	8016f64 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8018b16:	a80e      	add	r0, sp, #56	; 0x38
 8018b18:	f7fe fa24 	bl	8016f64 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8018b1c:	4b37      	ldr	r3, [pc, #220]	; (8018bfc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 8018b1e:	4628      	mov	r0, r5
 8018b20:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 8018b24:	881b      	ldrh	r3, [r3, #0]
 8018b26:	9307      	str	r3, [sp, #28]
 8018b28:	682b      	ldr	r3, [r5, #0]
 8018b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018b2c:	4798      	blx	r3
 8018b2e:	f8bd 5032 	ldrh.w	r5, [sp, #50]	; 0x32
 8018b32:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8018b36:	4681      	mov	r9, r0
 8018b38:	f8db 0000 	ldr.w	r0, [fp]
 8018b3c:	fb1a 3305 	smlabb	r3, sl, r5, r3
 8018b40:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8018b42:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 8018b46:	6803      	ldr	r3, [r0, #0]
 8018b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018b4a:	4798      	blx	r3
 8018b4c:	4607      	mov	r7, r0
 8018b4e:	f8db 0000 	ldr.w	r0, [fp]
 8018b52:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 8018b56:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 8018b5a:	6803      	ldr	r3, [r0, #0]
 8018b5c:	9109      	str	r1, [sp, #36]	; 0x24
 8018b5e:	9208      	str	r2, [sp, #32]
 8018b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018b62:	4798      	blx	r3
 8018b64:	f010 0f01 	tst.w	r0, #1
 8018b68:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8018b6c:	d012      	beq.n	8018b94 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b8>
 8018b6e:	f8db 0000 	ldr.w	r0, [fp]
 8018b72:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 8018b76:	6803      	ldr	r3, [r0, #0]
 8018b78:	9200      	str	r2, [sp, #0]
 8018b7a:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 8018b7c:	462b      	mov	r3, r5
 8018b7e:	e898 0006 	ldmia.w	r8, {r1, r2}
 8018b82:	47b0      	blx	r6
 8018b84:	9b03      	ldr	r3, [sp, #12]
 8018b86:	8023      	strh	r3, [r4, #0]
 8018b88:	9b04      	ldr	r3, [sp, #16]
 8018b8a:	8063      	strh	r3, [r4, #2]
 8018b8c:	9b05      	ldr	r3, [sp, #20]
 8018b8e:	80a3      	strh	r3, [r4, #4]
 8018b90:	9b06      	ldr	r3, [sp, #24]
 8018b92:	e78b      	b.n	8018aac <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xd0>
 8018b94:	fb09 f202 	mul.w	r2, r9, r2
 8018b98:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 8018b9c:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8018ba0:	440f      	add	r7, r1
 8018ba2:	b166      	cbz	r6, 8018bbe <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 8018ba4:	9a07      	ldr	r2, [sp, #28]
 8018ba6:	4592      	cmp	sl, r2
 8018ba8:	d109      	bne.n	8018bbe <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 8018baa:	f8db 0000 	ldr.w	r0, [fp]
 8018bae:	fb09 f303 	mul.w	r3, r9, r3
 8018bb2:	4629      	mov	r1, r5
 8018bb4:	6802      	ldr	r2, [r0, #0]
 8018bb6:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8018bb8:	463a      	mov	r2, r7
 8018bba:	47b0      	blx	r6
 8018bbc:	e7e2      	b.n	8018b84 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 8018bbe:	fb0a f303 	mul.w	r3, sl, r3
 8018bc2:	ea4f 064a 	mov.w	r6, sl, lsl #1
 8018bc6:	f8df b038 	ldr.w	fp, [pc, #56]	; 8018c00 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 8018bca:	eb05 0843 	add.w	r8, r5, r3, lsl #1
 8018bce:	4545      	cmp	r5, r8
 8018bd0:	d2d8      	bcs.n	8018b84 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 8018bd2:	f8db 0000 	ldr.w	r0, [fp]
 8018bd6:	4629      	mov	r1, r5
 8018bd8:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8018bdc:	4435      	add	r5, r6
 8018bde:	6802      	ldr	r2, [r0, #0]
 8018be0:	005b      	lsls	r3, r3, #1
 8018be2:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 8018be6:	463a      	mov	r2, r7
 8018be8:	47d0      	blx	sl
 8018bea:	444f      	add	r7, r9
 8018bec:	e7ef      	b.n	8018bce <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f2>
 8018bee:	bf00      	nop
 8018bf0:	200243d0 	.word	0x200243d0
 8018bf4:	200243d2 	.word	0x200243d2
 8018bf8:	200243d4 	.word	0x200243d4
 8018bfc:	200243d6 	.word	0x200243d6
 8018c00:	200243dc 	.word	0x200243dc

08018c04 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 8018c04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018c06:	4606      	mov	r6, r0
 8018c08:	b087      	sub	sp, #28
 8018c0a:	460c      	mov	r4, r1
 8018c0c:	4617      	mov	r7, r2
 8018c0e:	461d      	mov	r5, r3
 8018c10:	b333      	cbz	r3, 8018c60 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8018c12:	4608      	mov	r0, r1
 8018c14:	f7fc fc23 	bl	801545e <_ZNK8touchgfx4Rect7isEmptyEv>
 8018c18:	bb10      	cbnz	r0, 8018c60 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8018c1a:	6820      	ldr	r0, [r4, #0]
 8018c1c:	ab04      	add	r3, sp, #16
 8018c1e:	6861      	ldr	r1, [r4, #4]
 8018c20:	4c1b      	ldr	r4, [pc, #108]	; (8018c90 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
 8018c22:	c303      	stmia	r3!, {r0, r1}
 8018c24:	a804      	add	r0, sp, #16
 8018c26:	f7fe f99d 	bl	8016f64 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8018c2a:	6820      	ldr	r0, [r4, #0]
 8018c2c:	6803      	ldr	r3, [r0, #0]
 8018c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018c30:	4798      	blx	r3
 8018c32:	2dff      	cmp	r5, #255	; 0xff
 8018c34:	d016      	beq.n	8018c64 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 8018c36:	f010 0f08 	tst.w	r0, #8
 8018c3a:	6820      	ldr	r0, [r4, #0]
 8018c3c:	d015      	beq.n	8018c6a <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 8018c3e:	2400      	movs	r4, #0
 8018c40:	6801      	ldr	r1, [r0, #0]
 8018c42:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8018c46:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8018c4a:	e9cd 5402 	strd	r5, r4, [sp, #8]
 8018c4e:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 8018c52:	9401      	str	r4, [sp, #4]
 8018c54:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 8018c58:	9400      	str	r4, [sp, #0]
 8018c5a:	6e0c      	ldr	r4, [r1, #96]	; 0x60
 8018c5c:	4639      	mov	r1, r7
 8018c5e:	47a0      	blx	r4
 8018c60:	b007      	add	sp, #28
 8018c62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018c64:	f010 0f02 	tst.w	r0, #2
 8018c68:	e7e7      	b.n	8018c3a <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
 8018c6a:	6803      	ldr	r3, [r0, #0]
 8018c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018c6e:	4798      	blx	r3
 8018c70:	4b08      	ldr	r3, [pc, #32]	; (8018c94 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 8018c72:	4601      	mov	r1, r0
 8018c74:	4630      	mov	r0, r6
 8018c76:	881a      	ldrh	r2, [r3, #0]
 8018c78:	6833      	ldr	r3, [r6, #0]
 8018c7a:	e9cd 7500 	strd	r7, r5, [sp]
 8018c7e:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8018c80:	ab04      	add	r3, sp, #16
 8018c82:	47a8      	blx	r5
 8018c84:	6820      	ldr	r0, [r4, #0]
 8018c86:	6803      	ldr	r3, [r0, #0]
 8018c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018c8a:	4798      	blx	r3
 8018c8c:	e7e8      	b.n	8018c60 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8018c8e:	bf00      	nop
 8018c90:	200243dc 	.word	0x200243dc
 8018c94:	200243d6 	.word	0x200243d6

08018c98 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 8018c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018c9c:	f89d 7024 	ldrb.w	r7, [sp, #36]	; 0x24
 8018ca0:	4688      	mov	r8, r1
 8018ca2:	4614      	mov	r4, r2
 8018ca4:	461d      	mov	r5, r3
 8018ca6:	9e08      	ldr	r6, [sp, #32]
 8018ca8:	2f00      	cmp	r7, #0
 8018caa:	f000 80ab 	beq.w	8018e04 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 8018cae:	4618      	mov	r0, r3
 8018cb0:	f7fc fbd5 	bl	801545e <_ZNK8touchgfx4Rect7isEmptyEv>
 8018cb4:	2800      	cmp	r0, #0
 8018cb6:	f040 80a5 	bne.w	8018e04 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 8018cba:	f9b5 1000 	ldrsh.w	r1, [r5]
 8018cbe:	2fff      	cmp	r7, #255	; 0xff
 8018cc0:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8018cc4:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
 8018cc8:	fb04 1303 	mla	r3, r4, r3, r1
 8018ccc:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
 8018cd0:	eba4 0200 	sub.w	r2, r4, r0
 8018cd4:	eb08 0143 	add.w	r1, r8, r3, lsl #1
 8018cd8:	fb04 f505 	mul.w	r5, r4, r5
 8018cdc:	ea4f 2816 	mov.w	r8, r6, lsr #8
 8018ce0:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 8018ce4:	d04a      	beq.n	8018d7c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe4>
 8018ce6:	b2bc      	uxth	r4, r7
 8018ce8:	f1c7 0cff 	rsb	ip, r7, #255	; 0xff
 8018cec:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 8018cf0:	fa5f f788 	uxtb.w	r7, r8
 8018cf4:	b2f3      	uxtb	r3, r6
 8018cf6:	0040      	lsls	r0, r0, #1
 8018cf8:	fb0e fe04 	mul.w	lr, lr, r4
 8018cfc:	4367      	muls	r7, r4
 8018cfe:	ea4f 0842 	mov.w	r8, r2, lsl #1
 8018d02:	4363      	muls	r3, r4
 8018d04:	fa1f fc8c 	uxth.w	ip, ip
 8018d08:	42a9      	cmp	r1, r5
 8018d0a:	d27b      	bcs.n	8018e04 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 8018d0c:	eb01 0900 	add.w	r9, r1, r0
 8018d10:	4549      	cmp	r1, r9
 8018d12:	d231      	bcs.n	8018d78 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe0>
 8018d14:	880a      	ldrh	r2, [r1, #0]
 8018d16:	1214      	asrs	r4, r2, #8
 8018d18:	10d6      	asrs	r6, r2, #3
 8018d1a:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8018d1e:	00d2      	lsls	r2, r2, #3
 8018d20:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8018d24:	b2d2      	uxtb	r2, r2
 8018d26:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8018d2a:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8018d2e:	fb14 f40c 	smulbb	r4, r4, ip
 8018d32:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 8018d36:	fb12 f20c 	smulbb	r2, r2, ip
 8018d3a:	fb16 f60c 	smulbb	r6, r6, ip
 8018d3e:	4474      	add	r4, lr
 8018d40:	441a      	add	r2, r3
 8018d42:	b2a4      	uxth	r4, r4
 8018d44:	443e      	add	r6, r7
 8018d46:	b292      	uxth	r2, r2
 8018d48:	f104 0a01 	add.w	sl, r4, #1
 8018d4c:	b2b6      	uxth	r6, r6
 8018d4e:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 8018d52:	f102 0a01 	add.w	sl, r2, #1
 8018d56:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
 8018d5a:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8018d5e:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8018d62:	4322      	orrs	r2, r4
 8018d64:	1c74      	adds	r4, r6, #1
 8018d66:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 8018d6a:	0976      	lsrs	r6, r6, #5
 8018d6c:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8018d70:	4332      	orrs	r2, r6
 8018d72:	f821 2b02 	strh.w	r2, [r1], #2
 8018d76:	e7cb      	b.n	8018d10 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x78>
 8018d78:	4441      	add	r1, r8
 8018d7a:	e7c5      	b.n	8018d08 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x70>
 8018d7c:	0973      	lsrs	r3, r6, #5
 8018d7e:	4f22      	ldr	r7, [pc, #136]	; (8018e08 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x170>)
 8018d80:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 8018d84:	ea08 0707 	and.w	r7, r8, r7
 8018d88:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8018d8c:	433b      	orrs	r3, r7
 8018d8e:	07e7      	lsls	r7, r4, #31
 8018d90:	ea43 0306 	orr.w	r3, r3, r6
 8018d94:	b29b      	uxth	r3, r3
 8018d96:	d50b      	bpl.n	8018db0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x118>
 8018d98:	0040      	lsls	r0, r0, #1
 8018d9a:	0052      	lsls	r2, r2, #1
 8018d9c:	42a9      	cmp	r1, r5
 8018d9e:	d231      	bcs.n	8018e04 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 8018da0:	180c      	adds	r4, r1, r0
 8018da2:	42a1      	cmp	r1, r4
 8018da4:	d202      	bcs.n	8018dac <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x114>
 8018da6:	f821 3b02 	strh.w	r3, [r1], #2
 8018daa:	e7fa      	b.n	8018da2 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x10a>
 8018dac:	4411      	add	r1, r2
 8018dae:	e7f5      	b.n	8018d9c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x104>
 8018db0:	078e      	lsls	r6, r1, #30
 8018db2:	d008      	beq.n	8018dc6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12e>
 8018db4:	0066      	lsls	r6, r4, #1
 8018db6:	460a      	mov	r2, r1
 8018db8:	42aa      	cmp	r2, r5
 8018dba:	d202      	bcs.n	8018dc2 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12a>
 8018dbc:	8013      	strh	r3, [r2, #0]
 8018dbe:	4432      	add	r2, r6
 8018dc0:	e7fa      	b.n	8018db8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x120>
 8018dc2:	3102      	adds	r1, #2
 8018dc4:	3801      	subs	r0, #1
 8018dc6:	07c2      	lsls	r2, r0, #31
 8018dc8:	d50b      	bpl.n	8018de2 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x14a>
 8018dca:	f100 4200 	add.w	r2, r0, #2147483648	; 0x80000000
 8018dce:	0066      	lsls	r6, r4, #1
 8018dd0:	3a01      	subs	r2, #1
 8018dd2:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8018dd6:	42aa      	cmp	r2, r5
 8018dd8:	d202      	bcs.n	8018de0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x148>
 8018dda:	8013      	strh	r3, [r2, #0]
 8018ddc:	4432      	add	r2, r6
 8018dde:	e7fa      	b.n	8018dd6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x13e>
 8018de0:	3801      	subs	r0, #1
 8018de2:	b178      	cbz	r0, 8018e04 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 8018de4:	1040      	asrs	r0, r0, #1
 8018de6:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
 8018dea:	0080      	lsls	r0, r0, #2
 8018dec:	0064      	lsls	r4, r4, #1
 8018dee:	42a9      	cmp	r1, r5
 8018df0:	d208      	bcs.n	8018e04 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 8018df2:	180e      	adds	r6, r1, r0
 8018df4:	460a      	mov	r2, r1
 8018df6:	42b2      	cmp	r2, r6
 8018df8:	d202      	bcs.n	8018e00 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8018dfa:	f842 3b04 	str.w	r3, [r2], #4
 8018dfe:	e7fa      	b.n	8018df6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x15e>
 8018e00:	4421      	add	r1, r4
 8018e02:	e7f4      	b.n	8018dee <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x156>
 8018e04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018e08:	00fff800 	.word	0x00fff800

08018e0c <_ZN8touchgfx8LCD16bppC1Ev>:
 8018e0c:	2200      	movs	r2, #0
 8018e0e:	4910      	ldr	r1, [pc, #64]	; (8018e50 <_ZN8touchgfx8LCD16bppC1Ev+0x44>)
 8018e10:	6042      	str	r2, [r0, #4]
 8018e12:	6001      	str	r1, [r0, #0]
 8018e14:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8018e18:	e9c0 2204 	strd	r2, r2, [r0, #16]
 8018e1c:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8018e20:	e9c0 2208 	strd	r2, r2, [r0, #32]
 8018e24:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 8018e28:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 8018e2c:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 8018e30:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 8018e34:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 8018e38:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 8018e3c:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 8018e40:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 8018e44:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
 8018e48:	e9c0 221c 	strd	r2, r2, [r0, #112]	; 0x70
 8018e4c:	4770      	bx	lr
 8018e4e:	bf00      	nop
 8018e50:	0801ebec 	.word	0x0801ebec

08018e54 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 8018e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e58:	b08d      	sub	sp, #52	; 0x34
 8018e5a:	460d      	mov	r5, r1
 8018e5c:	4604      	mov	r4, r0
 8018e5e:	4699      	mov	r9, r3
 8018e60:	6808      	ldr	r0, [r1, #0]
 8018e62:	ab08      	add	r3, sp, #32
 8018e64:	6849      	ldr	r1, [r1, #4]
 8018e66:	c303      	stmia	r3!, {r0, r1}
 8018e68:	6810      	ldr	r0, [r2, #0]
 8018e6a:	ab0a      	add	r3, sp, #40	; 0x28
 8018e6c:	6851      	ldr	r1, [r2, #4]
 8018e6e:	c303      	stmia	r3!, {r0, r1}
 8018e70:	a808      	add	r0, sp, #32
 8018e72:	f7fe f877 	bl	8016f64 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8018e76:	4629      	mov	r1, r5
 8018e78:	a80a      	add	r0, sp, #40	; 0x28
 8018e7a:	4d67      	ldr	r5, [pc, #412]	; (8019018 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 8018e7c:	f7fe f89a 	bl	8016fb4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8018e80:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 8018e84:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 8018e88:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8018e8c:	6828      	ldr	r0, [r5, #0]
 8018e8e:	fb11 2103 	smlabb	r1, r1, r3, r2
 8018e92:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	; 0x2c
 8018e96:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 8018e9a:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8018e9e:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 8018ea2:	440a      	add	r2, r1
 8018ea4:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8018ea8:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 8018eac:	4413      	add	r3, r2
 8018eae:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8018eb2:	6803      	ldr	r3, [r0, #0]
 8018eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018eb6:	4798      	blx	r3
 8018eb8:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8018ebc:	d119      	bne.n	8018ef2 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 8018ebe:	f010 0f20 	tst.w	r0, #32
 8018ec2:	6828      	ldr	r0, [r5, #0]
 8018ec4:	d018      	beq.n	8018ef8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
 8018ec6:	2500      	movs	r5, #0
 8018ec8:	6801      	ldr	r1, [r0, #0]
 8018eca:	b2b6      	uxth	r6, r6
 8018ecc:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 8018ed0:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8018ed4:	9601      	str	r6, [sp, #4]
 8018ed6:	e9cd 9503 	strd	r9, r5, [sp, #12]
 8018eda:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 8018ede:	9502      	str	r5, [sp, #8]
 8018ee0:	fa1f f588 	uxth.w	r5, r8
 8018ee4:	9500      	str	r5, [sp, #0]
 8018ee6:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 8018ee8:	4621      	mov	r1, r4
 8018eea:	47a8      	blx	r5
 8018eec:	b00d      	add	sp, #52	; 0x34
 8018eee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018ef2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8018ef6:	e7e4      	b.n	8018ec2 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 8018ef8:	6803      	ldr	r3, [r0, #0]
 8018efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018efc:	4798      	blx	r3
 8018efe:	4947      	ldr	r1, [pc, #284]	; (801901c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c8>)
 8018f00:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 8018f04:	880b      	ldrh	r3, [r1, #0]
 8018f06:	468a      	mov	sl, r1
 8018f08:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
 8018f0c:	fb03 5202 	mla	r2, r3, r2, r5
 8018f10:	4373      	muls	r3, r6
 8018f12:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8018f16:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8018f1a:	9307      	str	r3, [sp, #28]
 8018f1c:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8018f20:	9306      	str	r3, [sp, #24]
 8018f22:	9b07      	ldr	r3, [sp, #28]
 8018f24:	4298      	cmp	r0, r3
 8018f26:	d270      	bcs.n	801900a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b6>
 8018f28:	9b06      	ldr	r3, [sp, #24]
 8018f2a:	4621      	mov	r1, r4
 8018f2c:	eb00 0b03 	add.w	fp, r0, r3
 8018f30:	4558      	cmp	r0, fp
 8018f32:	d25d      	bcs.n	8018ff0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x19c>
 8018f34:	f851 4b04 	ldr.w	r4, [r1], #4
 8018f38:	0e23      	lsrs	r3, r4, #24
 8018f3a:	d014      	beq.n	8018f66 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 8018f3c:	2bff      	cmp	r3, #255	; 0xff
 8018f3e:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 8018f42:	d112      	bne.n	8018f6a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 8018f44:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8018f48:	d10f      	bne.n	8018f6a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 8018f4a:	0963      	lsrs	r3, r4, #5
 8018f4c:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 8018f50:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 8018f54:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8018f58:	f02c 0c07 	bic.w	ip, ip, #7
 8018f5c:	ea43 0c0c 	orr.w	ip, r3, ip
 8018f60:	ea4c 0404 	orr.w	r4, ip, r4
 8018f64:	8004      	strh	r4, [r0, #0]
 8018f66:	3002      	adds	r0, #2
 8018f68:	e7e2      	b.n	8018f30 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xdc>
 8018f6a:	fb09 f303 	mul.w	r3, r9, r3
 8018f6e:	8807      	ldrh	r7, [r0, #0]
 8018f70:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 8018f74:	fa5f fc8c 	uxtb.w	ip, ip
 8018f78:	1c5a      	adds	r2, r3, #1
 8018f7a:	123e      	asrs	r6, r7, #8
 8018f7c:	10fd      	asrs	r5, r7, #3
 8018f7e:	eb02 2223 	add.w	r2, r2, r3, asr #8
 8018f82:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8018f86:	00ff      	lsls	r7, r7, #3
 8018f88:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8018f8c:	1212      	asrs	r2, r2, #8
 8018f8e:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8018f92:	b293      	uxth	r3, r2
 8018f94:	43d2      	mvns	r2, r2
 8018f96:	b2ff      	uxtb	r7, r7
 8018f98:	fb1e fe03 	smulbb	lr, lr, r3
 8018f9c:	b2d2      	uxtb	r2, r2
 8018f9e:	fb1c fc03 	smulbb	ip, ip, r3
 8018fa2:	b2e4      	uxtb	r4, r4
 8018fa4:	fb06 e602 	mla	r6, r6, r2, lr
 8018fa8:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 8018fac:	fb14 f403 	smulbb	r4, r4, r3
 8018fb0:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 8018fb4:	b2b6      	uxth	r6, r6
 8018fb6:	fb05 c502 	mla	r5, r5, r2, ip
 8018fba:	fb07 4702 	mla	r7, r7, r2, r4
 8018fbe:	f106 0e01 	add.w	lr, r6, #1
 8018fc2:	b2ad      	uxth	r5, r5
 8018fc4:	b2bf      	uxth	r7, r7
 8018fc6:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 8018fca:	f105 0c01 	add.w	ip, r5, #1
 8018fce:	f406 4e78 	and.w	lr, r6, #63488	; 0xf800
 8018fd2:	1c7e      	adds	r6, r7, #1
 8018fd4:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8018fd8:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 8018fdc:	096d      	lsrs	r5, r5, #5
 8018fde:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8018fe2:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8018fe6:	ea46 060e 	orr.w	r6, r6, lr
 8018fea:	432e      	orrs	r6, r5
 8018fec:	8006      	strh	r6, [r0, #0]
 8018fee:	e7ba      	b.n	8018f66 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 8018ff0:	f8ba 3000 	ldrh.w	r3, [sl]
 8018ff4:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	; 0x24
 8018ff8:	eba3 0308 	sub.w	r3, r3, r8
 8018ffc:	eba4 0408 	sub.w	r4, r4, r8
 8019000:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8019004:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 8019008:	e78b      	b.n	8018f22 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
 801900a:	4b03      	ldr	r3, [pc, #12]	; (8019018 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 801900c:	6818      	ldr	r0, [r3, #0]
 801900e:	6803      	ldr	r3, [r0, #0]
 8019010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019012:	4798      	blx	r3
 8019014:	e76a      	b.n	8018eec <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 8019016:	bf00      	nop
 8019018:	200243dc 	.word	0x200243dc
 801901c:	200243d6 	.word	0x200243d6

08019020 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>:
 8019020:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019024:	b085      	sub	sp, #20
 8019026:	6810      	ldr	r0, [r2, #0]
 8019028:	460c      	mov	r4, r1
 801902a:	6851      	ldr	r1, [r2, #4]
 801902c:	466d      	mov	r5, sp
 801902e:	4616      	mov	r6, r2
 8019030:	c503      	stmia	r5!, {r0, r1}
 8019032:	6818      	ldr	r0, [r3, #0]
 8019034:	6859      	ldr	r1, [r3, #4]
 8019036:	c503      	stmia	r5!, {r0, r1}
 8019038:	4668      	mov	r0, sp
 801903a:	4d2e      	ldr	r5, [pc, #184]	; (80190f4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd4>)
 801903c:	f7fd ff92 	bl	8016f64 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8019040:	4631      	mov	r1, r6
 8019042:	a802      	add	r0, sp, #8
 8019044:	4e2c      	ldr	r6, [pc, #176]	; (80190f8 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd8>)
 8019046:	f7fd ffb5 	bl	8016fb4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801904a:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 801904e:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8019052:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8019056:	6828      	ldr	r0, [r5, #0]
 8019058:	fb11 2103 	smlabb	r1, r1, r3, r2
 801905c:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 8019060:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
 8019064:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8019068:	f8bd 1000 	ldrh.w	r1, [sp]
 801906c:	440a      	add	r2, r1
 801906e:	f8ad 2008 	strh.w	r2, [sp, #8]
 8019072:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8019076:	4413      	add	r3, r2
 8019078:	f8ad 300a 	strh.w	r3, [sp, #10]
 801907c:	6803      	ldr	r3, [r0, #0]
 801907e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019080:	4798      	blx	r3
 8019082:	8833      	ldrh	r3, [r6, #0]
 8019084:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 8019088:	ea4f 0c47 	mov.w	ip, r7, lsl #1
 801908c:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 8019090:	f8df e068 	ldr.w	lr, [pc, #104]	; 80190fc <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xdc>
 8019094:	fb03 1202 	mla	r2, r3, r2, r1
 8019098:	fb08 f303 	mul.w	r3, r8, r3
 801909c:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80190a0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80190a4:	4298      	cmp	r0, r3
 80190a6:	d21d      	bcs.n	80190e4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xc4>
 80190a8:	eb00 080c 	add.w	r8, r0, ip
 80190ac:	4540      	cmp	r0, r8
 80190ae:	d20f      	bcs.n	80190d0 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xb0>
 80190b0:	f854 1b04 	ldr.w	r1, [r4], #4
 80190b4:	ea4f 1951 	mov.w	r9, r1, lsr #5
 80190b8:	ea0e 2211 	and.w	r2, lr, r1, lsr #8
 80190bc:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 80190c0:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80190c4:	ea42 0209 	orr.w	r2, r2, r9
 80190c8:	430a      	orrs	r2, r1
 80190ca:	f820 2b02 	strh.w	r2, [r0], #2
 80190ce:	e7ed      	b.n	80190ac <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x8c>
 80190d0:	8832      	ldrh	r2, [r6, #0]
 80190d2:	1bd2      	subs	r2, r2, r7
 80190d4:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80190d8:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 80190dc:	1bd2      	subs	r2, r2, r7
 80190de:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 80190e2:	e7df      	b.n	80190a4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x84>
 80190e4:	6828      	ldr	r0, [r5, #0]
 80190e6:	6803      	ldr	r3, [r0, #0]
 80190e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80190ea:	4798      	blx	r3
 80190ec:	b005      	add	sp, #20
 80190ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80190f2:	bf00      	nop
 80190f4:	200243dc 	.word	0x200243dc
 80190f8:	200243d6 	.word	0x200243d6
 80190fc:	fffff800 	.word	0xfffff800

08019100 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>:
 8019100:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019104:	b08e      	sub	sp, #56	; 0x38
 8019106:	460e      	mov	r6, r1
 8019108:	4604      	mov	r4, r0
 801910a:	461d      	mov	r5, r3
 801910c:	6808      	ldr	r0, [r1, #0]
 801910e:	ab0a      	add	r3, sp, #40	; 0x28
 8019110:	6849      	ldr	r1, [r1, #4]
 8019112:	f8df 81d4 	ldr.w	r8, [pc, #468]	; 80192e8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>
 8019116:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 80192ec <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1ec>
 801911a:	c303      	stmia	r3!, {r0, r1}
 801911c:	6810      	ldr	r0, [r2, #0]
 801911e:	ab0c      	add	r3, sp, #48	; 0x30
 8019120:	6851      	ldr	r1, [r2, #4]
 8019122:	c303      	stmia	r3!, {r0, r1}
 8019124:	a80a      	add	r0, sp, #40	; 0x28
 8019126:	f7fd ff1d 	bl	8016f64 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801912a:	4631      	mov	r1, r6
 801912c:	a80c      	add	r0, sp, #48	; 0x30
 801912e:	f7fd ff41 	bl	8016fb4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8019132:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 8019136:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801913a:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801913e:	f8d8 0000 	ldr.w	r0, [r8]
 8019142:	fb11 2103 	smlabb	r1, r1, r3, r2
 8019146:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
 801914a:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	; 0x36
 801914e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8019152:	440c      	add	r4, r1
 8019154:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 8019158:	440a      	add	r2, r1
 801915a:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 801915e:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 8019162:	4413      	add	r3, r2
 8019164:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8019168:	6803      	ldr	r3, [r0, #0]
 801916a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801916c:	4798      	blx	r3
 801916e:	2dff      	cmp	r5, #255	; 0xff
 8019170:	d124      	bne.n	80191bc <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xbc>
 8019172:	f010 0f01 	tst.w	r0, #1
 8019176:	f8d8 0000 	ldr.w	r0, [r8]
 801917a:	d022      	beq.n	80191c2 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xc2>
 801917c:	2100      	movs	r1, #0
 801917e:	f04f 0e01 	mov.w	lr, #1
 8019182:	f8d0 c000 	ldr.w	ip, [r0]
 8019186:	b2b6      	uxth	r6, r6
 8019188:	f8cd e018 	str.w	lr, [sp, #24]
 801918c:	b2bf      	uxth	r7, r7
 801918e:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 8019192:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 8019196:	e9cd 1107 	strd	r1, r1, [sp, #28]
 801919a:	f8b9 e000 	ldrh.w	lr, [r9]
 801919e:	9503      	str	r5, [sp, #12]
 80191a0:	9601      	str	r6, [sp, #4]
 80191a2:	9700      	str	r7, [sp, #0]
 80191a4:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 80191a8:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 80191ac:	9102      	str	r1, [sp, #8]
 80191ae:	4621      	mov	r1, r4
 80191b0:	f8dc 5040 	ldr.w	r5, [ip, #64]	; 0x40
 80191b4:	47a8      	blx	r5
 80191b6:	b00e      	add	sp, #56	; 0x38
 80191b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80191bc:	f010 0f04 	tst.w	r0, #4
 80191c0:	e7d9      	b.n	8019176 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x76>
 80191c2:	6803      	ldr	r3, [r0, #0]
 80191c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80191c6:	4798      	blx	r3
 80191c8:	f8b9 3000 	ldrh.w	r3, [r9]
 80191cc:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 80191d0:	ea4f 0e47 	mov.w	lr, r7, lsl #1
 80191d4:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 80191d8:	435e      	muls	r6, r3
 80191da:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 80191de:	2dff      	cmp	r5, #255	; 0xff
 80191e0:	fb03 1202 	mla	r2, r3, r2, r1
 80191e4:	ebac 0c07 	sub.w	ip, ip, r7
 80191e8:	eba3 0707 	sub.w	r7, r3, r7
 80191ec:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80191f0:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80191f4:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 80191f8:	ea4f 0747 	mov.w	r7, r7, lsl #1
 80191fc:	d049      	beq.n	8019292 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x192>
 80191fe:	43eb      	mvns	r3, r5
 8019200:	fa1f f985 	uxth.w	r9, r5
 8019204:	b2db      	uxtb	r3, r3
 8019206:	42b0      	cmp	r0, r6
 8019208:	d266      	bcs.n	80192d8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 801920a:	eb00 0a0e 	add.w	sl, r0, lr
 801920e:	4550      	cmp	r0, sl
 8019210:	4621      	mov	r1, r4
 8019212:	f104 0403 	add.w	r4, r4, #3
 8019216:	d25b      	bcs.n	80192d0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d0>
 8019218:	8802      	ldrh	r2, [r0, #0]
 801921a:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 801921e:	ea4f 2822 	mov.w	r8, r2, asr #8
 8019222:	fb11 f109 	smulbb	r1, r1, r9
 8019226:	10d5      	asrs	r5, r2, #3
 8019228:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
 801922c:	00d2      	lsls	r2, r2, #3
 801922e:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8019232:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 8019236:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 801923a:	fb08 1803 	mla	r8, r8, r3, r1
 801923e:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 8019242:	b2d2      	uxtb	r2, r2
 8019244:	fb11 f109 	smulbb	r1, r1, r9
 8019248:	fa1f f888 	uxth.w	r8, r8
 801924c:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8019250:	fb05 1503 	mla	r5, r5, r3, r1
 8019254:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 8019258:	fb11 f109 	smulbb	r1, r1, r9
 801925c:	b2ad      	uxth	r5, r5
 801925e:	fb02 1203 	mla	r2, r2, r3, r1
 8019262:	f108 0101 	add.w	r1, r8, #1
 8019266:	b292      	uxth	r2, r2
 8019268:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 801926c:	1c51      	adds	r1, r2, #1
 801926e:	f408 4878 	and.w	r8, r8, #63488	; 0xf800
 8019272:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8019276:	1c69      	adds	r1, r5, #1
 8019278:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 801927c:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8019280:	096d      	lsrs	r5, r5, #5
 8019282:	ea42 0208 	orr.w	r2, r2, r8
 8019286:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801928a:	432a      	orrs	r2, r5
 801928c:	f820 2b02 	strh.w	r2, [r0], #2
 8019290:	e7bd      	b.n	801920e <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x10e>
 8019292:	4a14      	ldr	r2, [pc, #80]	; (80192e4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e4>)
 8019294:	42b0      	cmp	r0, r6
 8019296:	d21f      	bcs.n	80192d8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 8019298:	eb00 050e 	add.w	r5, r0, lr
 801929c:	42a8      	cmp	r0, r5
 801929e:	4621      	mov	r1, r4
 80192a0:	f104 0403 	add.w	r4, r4, #3
 80192a4:	d210      	bcs.n	80192c8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1c8>
 80192a6:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 80192aa:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 80192ae:	00db      	lsls	r3, r3, #3
 80192b0:	ea02 2101 	and.w	r1, r2, r1, lsl #8
 80192b4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80192b8:	430b      	orrs	r3, r1
 80192ba:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 80192be:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
 80192c2:	f820 3b02 	strh.w	r3, [r0], #2
 80192c6:	e7e9      	b.n	801929c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x19c>
 80192c8:	4438      	add	r0, r7
 80192ca:	eb01 040c 	add.w	r4, r1, ip
 80192ce:	e7e1      	b.n	8019294 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x194>
 80192d0:	4438      	add	r0, r7
 80192d2:	eb01 040c 	add.w	r4, r1, ip
 80192d6:	e796      	b.n	8019206 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x106>
 80192d8:	4b03      	ldr	r3, [pc, #12]	; (80192e8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>)
 80192da:	6818      	ldr	r0, [r3, #0]
 80192dc:	6803      	ldr	r3, [r0, #0]
 80192de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80192e0:	4798      	blx	r3
 80192e2:	e768      	b.n	80191b6 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xb6>
 80192e4:	fffff800 	.word	0xfffff800
 80192e8:	200243dc 	.word	0x200243dc
 80192ec:	200243d6 	.word	0x200243d6

080192f0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 80192f0:	b4f0      	push	{r4, r5, r6, r7}
 80192f2:	4616      	mov	r6, r2
 80192f4:	461c      	mov	r4, r3
 80192f6:	460d      	mov	r5, r1
 80192f8:	9a04      	ldr	r2, [sp, #16]
 80192fa:	2e01      	cmp	r6, #1
 80192fc:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8019300:	f89d 7018 	ldrb.w	r7, [sp, #24]
 8019304:	d012      	beq.n	801932c <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x3c>
 8019306:	d303      	bcc.n	8019310 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x20>
 8019308:	2e02      	cmp	r6, #2
 801930a:	d00a      	beq.n	8019322 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x32>
 801930c:	bcf0      	pop	{r4, r5, r6, r7}
 801930e:	4770      	bx	lr
 8019310:	6805      	ldr	r5, [r0, #0]
 8019312:	e9cd 3704 	strd	r3, r7, [sp, #16]
 8019316:	68ed      	ldr	r5, [r5, #12]
 8019318:	4613      	mov	r3, r2
 801931a:	4622      	mov	r2, r4
 801931c:	46ac      	mov	ip, r5
 801931e:	bcf0      	pop	{r4, r5, r6, r7}
 8019320:	4760      	bx	ip
 8019322:	4621      	mov	r1, r4
 8019324:	4628      	mov	r0, r5
 8019326:	bcf0      	pop	{r4, r5, r6, r7}
 8019328:	f7ff bd94 	b.w	8018e54 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801932c:	4621      	mov	r1, r4
 801932e:	4628      	mov	r0, r5
 8019330:	bcf0      	pop	{r4, r5, r6, r7}
 8019332:	f7ff bee5 	b.w	8019100 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
	...

08019338 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 8019338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801933c:	b093      	sub	sp, #76	; 0x4c
 801933e:	4681      	mov	r9, r0
 8019340:	4688      	mov	r8, r1
 8019342:	6810      	ldr	r0, [r2, #0]
 8019344:	6851      	ldr	r1, [r2, #4]
 8019346:	ac0e      	add	r4, sp, #56	; 0x38
 8019348:	4616      	mov	r6, r2
 801934a:	f89d a070 	ldrb.w	sl, [sp, #112]	; 0x70
 801934e:	4f6b      	ldr	r7, [pc, #428]	; (80194fc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 8019350:	c403      	stmia	r4!, {r0, r1}
 8019352:	6818      	ldr	r0, [r3, #0]
 8019354:	ac10      	add	r4, sp, #64	; 0x40
 8019356:	6859      	ldr	r1, [r3, #4]
 8019358:	c403      	stmia	r4!, {r0, r1}
 801935a:	a80e      	add	r0, sp, #56	; 0x38
 801935c:	f7fd fe02 	bl	8016f64 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8019360:	4631      	mov	r1, r6
 8019362:	a810      	add	r0, sp, #64	; 0x40
 8019364:	4e66      	ldr	r6, [pc, #408]	; (8019500 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 8019366:	f7fd fe25 	bl	8016fb4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801936a:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801936e:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 8019372:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 8019376:	6830      	ldr	r0, [r6, #0]
 8019378:	fb11 2103 	smlabb	r1, r1, r3, r2
 801937c:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	; 0x44
 8019380:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	; 0x46
 8019384:	4489      	add	r9, r1
 8019386:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 801938a:	440a      	add	r2, r1
 801938c:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8019390:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8019394:	4413      	add	r3, r2
 8019396:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801939a:	6803      	ldr	r3, [r0, #0]
 801939c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801939e:	4798      	blx	r3
 80193a0:	f010 0f80 	tst.w	r0, #128	; 0x80
 80193a4:	6830      	ldr	r0, [r6, #0]
 80193a6:	d01d      	beq.n	80193e4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 80193a8:	2200      	movs	r2, #0
 80193aa:	6801      	ldr	r1, [r0, #0]
 80193ac:	b2a4      	uxth	r4, r4
 80193ae:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80193b2:	b2ad      	uxth	r5, r5
 80193b4:	e9cd 2208 	strd	r2, r2, [sp, #32]
 80193b8:	220b      	movs	r2, #11
 80193ba:	9207      	str	r2, [sp, #28]
 80193bc:	883a      	ldrh	r2, [r7, #0]
 80193be:	9502      	str	r5, [sp, #8]
 80193c0:	9206      	str	r2, [sp, #24]
 80193c2:	2201      	movs	r2, #1
 80193c4:	9401      	str	r4, [sp, #4]
 80193c6:	e9cd a204 	strd	sl, r2, [sp, #16]
 80193ca:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 80193ce:	9203      	str	r2, [sp, #12]
 80193d0:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 80193d4:	9200      	str	r2, [sp, #0]
 80193d6:	4642      	mov	r2, r8
 80193d8:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 80193da:	4649      	mov	r1, r9
 80193dc:	47a0      	blx	r4
 80193de:	b013      	add	sp, #76	; 0x4c
 80193e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80193e4:	6803      	ldr	r3, [r0, #0]
 80193e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80193e8:	4798      	blx	r3
 80193ea:	883b      	ldrh	r3, [r7, #0]
 80193ec:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 80193f0:	f04f 0e04 	mov.w	lr, #4
 80193f4:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
 80193f8:	435d      	muls	r5, r3
 80193fa:	fb03 1202 	mla	r2, r3, r2, r1
 80193fe:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8019402:	eb00 0245 	add.w	r2, r0, r5, lsl #1
 8019406:	920c      	str	r2, [sp, #48]	; 0x30
 8019408:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 801940c:	1b12      	subs	r2, r2, r4
 801940e:	920d      	str	r2, [sp, #52]	; 0x34
 8019410:	0062      	lsls	r2, r4, #1
 8019412:	1b1c      	subs	r4, r3, r4
 8019414:	920a      	str	r2, [sp, #40]	; 0x28
 8019416:	0063      	lsls	r3, r4, #1
 8019418:	930b      	str	r3, [sp, #44]	; 0x2c
 801941a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801941c:	4298      	cmp	r0, r3
 801941e:	d266      	bcs.n	80194ee <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b6>
 8019420:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019422:	eb00 0b03 	add.w	fp, r0, r3
 8019426:	4558      	cmp	r0, fp
 8019428:	d25c      	bcs.n	80194e4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 801942a:	f819 3b01 	ldrb.w	r3, [r9], #1
 801942e:	fb1e e303 	smlabb	r3, lr, r3, lr
 8019432:	f858 2003 	ldr.w	r2, [r8, r3]
 8019436:	0e11      	lsrs	r1, r2, #24
 8019438:	d012      	beq.n	8019460 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801943a:	29ff      	cmp	r1, #255	; 0xff
 801943c:	ea4f 2712 	mov.w	r7, r2, lsr #8
 8019440:	d110      	bne.n	8019464 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 8019442:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8019446:	d10d      	bne.n	8019464 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 8019448:	0953      	lsrs	r3, r2, #5
 801944a:	f427 67ff 	bic.w	r7, r7, #2040	; 0x7f8
 801944e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8019452:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8019456:	f027 0707 	bic.w	r7, r7, #7
 801945a:	431f      	orrs	r7, r3
 801945c:	433a      	orrs	r2, r7
 801945e:	8002      	strh	r2, [r0, #0]
 8019460:	3002      	adds	r0, #2
 8019462:	e7e0      	b.n	8019426 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xee>
 8019464:	fb0a f101 	mul.w	r1, sl, r1
 8019468:	8806      	ldrh	r6, [r0, #0]
 801946a:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 801946e:	b2d2      	uxtb	r2, r2
 8019470:	1c4b      	adds	r3, r1, #1
 8019472:	1235      	asrs	r5, r6, #8
 8019474:	10f4      	asrs	r4, r6, #3
 8019476:	eb03 2321 	add.w	r3, r3, r1, asr #8
 801947a:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801947e:	00f6      	lsls	r6, r6, #3
 8019480:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 8019484:	121b      	asrs	r3, r3, #8
 8019486:	b2f6      	uxtb	r6, r6
 8019488:	b299      	uxth	r1, r3
 801948a:	43db      	mvns	r3, r3
 801948c:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 8019490:	fb1c fc01 	smulbb	ip, ip, r1
 8019494:	b2db      	uxtb	r3, r3
 8019496:	fb12 f201 	smulbb	r2, r2, r1
 801949a:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801949e:	fb05 c503 	mla	r5, r5, r3, ip
 80194a2:	b2ff      	uxtb	r7, r7
 80194a4:	fb06 2203 	mla	r2, r6, r3, r2
 80194a8:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 80194ac:	fb17 f701 	smulbb	r7, r7, r1
 80194b0:	b2ad      	uxth	r5, r5
 80194b2:	b292      	uxth	r2, r2
 80194b4:	fb04 7403 	mla	r4, r4, r3, r7
 80194b8:	f105 0c01 	add.w	ip, r5, #1
 80194bc:	1c57      	adds	r7, r2, #1
 80194be:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 80194c2:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 80194c6:	b2a4      	uxth	r4, r4
 80194c8:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 80194cc:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 80194d0:	433d      	orrs	r5, r7
 80194d2:	1c67      	adds	r7, r4, #1
 80194d4:	eb07 2414 	add.w	r4, r7, r4, lsr #8
 80194d8:	0964      	lsrs	r4, r4, #5
 80194da:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 80194de:	4325      	orrs	r5, r4
 80194e0:	8005      	strh	r5, [r0, #0]
 80194e2:	e7bd      	b.n	8019460 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 80194e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80194e6:	4418      	add	r0, r3
 80194e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80194ea:	4499      	add	r9, r3
 80194ec:	e795      	b.n	801941a <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xe2>
 80194ee:	4b04      	ldr	r3, [pc, #16]	; (8019500 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 80194f0:	6818      	ldr	r0, [r3, #0]
 80194f2:	6803      	ldr	r3, [r0, #0]
 80194f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80194f6:	4798      	blx	r3
 80194f8:	e771      	b.n	80193de <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xa6>
 80194fa:	bf00      	nop
 80194fc:	200243d6 	.word	0x200243d6
 8019500:	200243dc 	.word	0x200243dc

08019504 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 8019504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019508:	b087      	sub	sp, #28
 801950a:	4680      	mov	r8, r0
 801950c:	460d      	mov	r5, r1
 801950e:	4614      	mov	r4, r2
 8019510:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
 8019514:	2e00      	cmp	r6, #0
 8019516:	f000 80b9 	beq.w	801968c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x188>
 801951a:	6810      	ldr	r0, [r2, #0]
 801951c:	af02      	add	r7, sp, #8
 801951e:	6851      	ldr	r1, [r2, #4]
 8019520:	c703      	stmia	r7!, {r0, r1}
 8019522:	6818      	ldr	r0, [r3, #0]
 8019524:	af04      	add	r7, sp, #16
 8019526:	6859      	ldr	r1, [r3, #4]
 8019528:	c703      	stmia	r7!, {r0, r1}
 801952a:	a802      	add	r0, sp, #8
 801952c:	f7fd fd1a 	bl	8016f64 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8019530:	4621      	mov	r1, r4
 8019532:	a804      	add	r0, sp, #16
 8019534:	f7fd fd3e 	bl	8016fb4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8019538:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801953c:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8019540:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 8019544:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 8019548:	fb14 2103 	smlabb	r1, r4, r3, r2
 801954c:	eb08 0401 	add.w	r4, r8, r1
 8019550:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8019554:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 8019558:	440a      	add	r2, r1
 801955a:	ea4f 0a48 	mov.w	sl, r8, lsl #1
 801955e:	f8ad 2010 	strh.w	r2, [sp, #16]
 8019562:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8019566:	4413      	add	r3, r2
 8019568:	f8ad 3012 	strh.w	r3, [sp, #18]
 801956c:	4b49      	ldr	r3, [pc, #292]	; (8019694 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 801956e:	6818      	ldr	r0, [r3, #0]
 8019570:	6803      	ldr	r3, [r0, #0]
 8019572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019574:	4798      	blx	r3
 8019576:	4b48      	ldr	r3, [pc, #288]	; (8019698 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x194>)
 8019578:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 801957c:	2eff      	cmp	r6, #255	; 0xff
 801957e:	881a      	ldrh	r2, [r3, #0]
 8019580:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 8019584:	fb02 c101 	mla	r1, r2, r1, ip
 8019588:	fb02 f207 	mul.w	r2, r2, r7
 801958c:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8019590:	f105 0104 	add.w	r1, r5, #4
 8019594:	461d      	mov	r5, r3
 8019596:	d05a      	beq.n	801964e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14a>
 8019598:	f1c6 0eff 	rsb	lr, r6, #255	; 0xff
 801959c:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 80195a0:	b2b6      	uxth	r6, r6
 80195a2:	9301      	str	r3, [sp, #4]
 80195a4:	fa1f fe8e 	uxth.w	lr, lr
 80195a8:	4282      	cmp	r2, r0
 80195aa:	d96a      	bls.n	8019682 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 80195ac:	eb00 0b0a 	add.w	fp, r0, sl
 80195b0:	4583      	cmp	fp, r0
 80195b2:	d940      	bls.n	8019636 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x132>
 80195b4:	8805      	ldrh	r5, [r0, #0]
 80195b6:	f814 3b01 	ldrb.w	r3, [r4], #1
 80195ba:	122f      	asrs	r7, r5, #8
 80195bc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80195c0:	ea4f 09e5 	mov.w	r9, r5, asr #3
 80195c4:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80195c8:	00ed      	lsls	r5, r5, #3
 80195ca:	ea4f 2c23 	mov.w	ip, r3, asr #8
 80195ce:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 80195d2:	fb17 f70e 	smulbb	r7, r7, lr
 80195d6:	b2ed      	uxtb	r5, r5
 80195d8:	fb19 f90e 	smulbb	r9, r9, lr
 80195dc:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80195e0:	fb15 f50e 	smulbb	r5, r5, lr
 80195e4:	fb0c 7c06 	mla	ip, ip, r6, r7
 80195e8:	10df      	asrs	r7, r3, #3
 80195ea:	00db      	lsls	r3, r3, #3
 80195ec:	fa1f fc8c 	uxth.w	ip, ip
 80195f0:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80195f4:	b2db      	uxtb	r3, r3
 80195f6:	fb07 9706 	mla	r7, r7, r6, r9
 80195fa:	f10c 0901 	add.w	r9, ip, #1
 80195fe:	fb03 5306 	mla	r3, r3, r6, r5
 8019602:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 8019606:	b29b      	uxth	r3, r3
 8019608:	f40c 4978 	and.w	r9, ip, #63488	; 0xf800
 801960c:	b2bf      	uxth	r7, r7
 801960e:	f103 0c01 	add.w	ip, r3, #1
 8019612:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8019616:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801961a:	ea4c 0c09 	orr.w	ip, ip, r9
 801961e:	f107 0901 	add.w	r9, r7, #1
 8019622:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 8019626:	097f      	lsrs	r7, r7, #5
 8019628:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801962c:	ea4c 0c07 	orr.w	ip, ip, r7
 8019630:	f820 cb02 	strh.w	ip, [r0], #2
 8019634:	e7bc      	b.n	80195b0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xac>
 8019636:	9b01      	ldr	r3, [sp, #4]
 8019638:	881b      	ldrh	r3, [r3, #0]
 801963a:	eba3 0308 	sub.w	r3, r3, r8
 801963e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8019642:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8019646:	eba3 0308 	sub.w	r3, r3, r8
 801964a:	441c      	add	r4, r3
 801964c:	e7ac      	b.n	80195a8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xa4>
 801964e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8019652:	4282      	cmp	r2, r0
 8019654:	d915      	bls.n	8019682 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 8019656:	eb00 060a 	add.w	r6, r0, sl
 801965a:	4286      	cmp	r6, r0
 801965c:	d906      	bls.n	801966c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x168>
 801965e:	f814 3b01 	ldrb.w	r3, [r4], #1
 8019662:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8019666:	f820 3b02 	strh.w	r3, [r0], #2
 801966a:	e7f6      	b.n	801965a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x156>
 801966c:	882b      	ldrh	r3, [r5, #0]
 801966e:	eba3 0308 	sub.w	r3, r3, r8
 8019672:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8019676:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801967a:	eba3 0308 	sub.w	r3, r3, r8
 801967e:	441c      	add	r4, r3
 8019680:	e7e7      	b.n	8019652 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14e>
 8019682:	4b04      	ldr	r3, [pc, #16]	; (8019694 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 8019684:	6818      	ldr	r0, [r3, #0]
 8019686:	6803      	ldr	r3, [r0, #0]
 8019688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801968a:	4798      	blx	r3
 801968c:	b007      	add	sp, #28
 801968e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019692:	bf00      	nop
 8019694:	200243dc 	.word	0x200243dc
 8019698:	200243d6 	.word	0x200243d6

0801969c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 801969c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80196a0:	b091      	sub	sp, #68	; 0x44
 80196a2:	4680      	mov	r8, r0
 80196a4:	460f      	mov	r7, r1
 80196a6:	4614      	mov	r4, r2
 80196a8:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
 80196ac:	2d00      	cmp	r5, #0
 80196ae:	d051      	beq.n	8019754 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 80196b0:	6810      	ldr	r0, [r2, #0]
 80196b2:	ae0c      	add	r6, sp, #48	; 0x30
 80196b4:	6851      	ldr	r1, [r2, #4]
 80196b6:	f8df 9200 	ldr.w	r9, [pc, #512]	; 80198b8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>
 80196ba:	c603      	stmia	r6!, {r0, r1}
 80196bc:	6818      	ldr	r0, [r3, #0]
 80196be:	ae0e      	add	r6, sp, #56	; 0x38
 80196c0:	6859      	ldr	r1, [r3, #4]
 80196c2:	c603      	stmia	r6!, {r0, r1}
 80196c4:	a80c      	add	r0, sp, #48	; 0x30
 80196c6:	f7fd fc4d 	bl	8016f64 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80196ca:	4621      	mov	r1, r4
 80196cc:	a80e      	add	r0, sp, #56	; 0x38
 80196ce:	f7fd fc71 	bl	8016fb4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80196d2:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 80196d6:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 80196da:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 80196de:	f8d9 0000 	ldr.w	r0, [r9]
 80196e2:	fb11 2103 	smlabb	r1, r1, r3, r2
 80196e6:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	; 0x3c
 80196ea:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
 80196ee:	eb08 0401 	add.w	r4, r8, r1
 80196f2:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 80196f6:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 80198bc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x220>
 80196fa:	440a      	add	r2, r1
 80196fc:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8019700:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8019704:	4413      	add	r3, r2
 8019706:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801970a:	6803      	ldr	r3, [r0, #0]
 801970c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801970e:	4798      	blx	r3
 8019710:	f010 0f80 	tst.w	r0, #128	; 0x80
 8019714:	f8d9 0000 	ldr.w	r0, [r9]
 8019718:	d01f      	beq.n	801975a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xbe>
 801971a:	2200      	movs	r2, #0
 801971c:	6801      	ldr	r1, [r0, #0]
 801971e:	b2b6      	uxth	r6, r6
 8019720:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8019724:	e9cd 2208 	strd	r2, r2, [sp, #32]
 8019728:	220b      	movs	r2, #11
 801972a:	9207      	str	r2, [sp, #28]
 801972c:	f8b8 2000 	ldrh.w	r2, [r8]
 8019730:	9601      	str	r6, [sp, #4]
 8019732:	9206      	str	r2, [sp, #24]
 8019734:	2201      	movs	r2, #1
 8019736:	e9cd 5204 	strd	r5, r2, [sp, #16]
 801973a:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801973e:	9203      	str	r2, [sp, #12]
 8019740:	fa1f f28a 	uxth.w	r2, sl
 8019744:	9202      	str	r2, [sp, #8]
 8019746:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801974a:	9200      	str	r2, [sp, #0]
 801974c:	463a      	mov	r2, r7
 801974e:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 8019750:	4621      	mov	r1, r4
 8019752:	47a8      	blx	r5
 8019754:	b011      	add	sp, #68	; 0x44
 8019756:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801975a:	6803      	ldr	r3, [r0, #0]
 801975c:	ea4f 0946 	mov.w	r9, r6, lsl #1
 8019760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019762:	4798      	blx	r3
 8019764:	f8b8 2000 	ldrh.w	r2, [r8]
 8019768:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801976c:	2dff      	cmp	r5, #255	; 0xff
 801976e:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 8019772:	fb0a fa02 	mul.w	sl, sl, r2
 8019776:	fb02 1303 	mla	r3, r2, r3, r1
 801977a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801977e:	d062      	beq.n	8019846 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
 8019780:	ea6f 0c05 	mvn.w	ip, r5
 8019784:	eb00 034a 	add.w	r3, r0, sl, lsl #1
 8019788:	b2ad      	uxth	r5, r5
 801978a:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 801978e:	fa5f fc8c 	uxtb.w	ip, ip
 8019792:	930a      	str	r3, [sp, #40]	; 0x28
 8019794:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019796:	4298      	cmp	r0, r3
 8019798:	f080 8085 	bcs.w	80198a6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 801979c:	eb00 0b09 	add.w	fp, r0, r9
 80197a0:	4558      	cmp	r0, fp
 80197a2:	d246      	bcs.n	8019832 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x196>
 80197a4:	f814 eb01 	ldrb.w	lr, [r4], #1
 80197a8:	2303      	movs	r3, #3
 80197aa:	2204      	movs	r2, #4
 80197ac:	fb13 2e0e 	smlabb	lr, r3, lr, r2
 80197b0:	8803      	ldrh	r3, [r0, #0]
 80197b2:	eb07 0a0e 	add.w	sl, r7, lr
 80197b6:	1219      	asrs	r1, r3, #8
 80197b8:	10da      	asrs	r2, r3, #3
 80197ba:	f817 e00e 	ldrb.w	lr, [r7, lr]
 80197be:	f89a 8002 	ldrb.w	r8, [sl, #2]
 80197c2:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 80197c6:	00db      	lsls	r3, r3, #3
 80197c8:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80197cc:	fb18 f805 	smulbb	r8, r8, r5
 80197d0:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 80197d4:	fb1e fe05 	smulbb	lr, lr, r5
 80197d8:	b2db      	uxtb	r3, r3
 80197da:	fb01 810c 	mla	r1, r1, ip, r8
 80197de:	f89a 8001 	ldrb.w	r8, [sl, #1]
 80197e2:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 80197e6:	fb18 f805 	smulbb	r8, r8, r5
 80197ea:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 80197ee:	b289      	uxth	r1, r1
 80197f0:	fb02 820c 	mla	r2, r2, ip, r8
 80197f4:	fb03 e30c 	mla	r3, r3, ip, lr
 80197f8:	f101 0801 	add.w	r8, r1, #1
 80197fc:	b292      	uxth	r2, r2
 80197fe:	b29b      	uxth	r3, r3
 8019800:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8019804:	f102 0801 	add.w	r8, r2, #1
 8019808:	f103 0e01 	add.w	lr, r3, #1
 801980c:	eb08 2812 	add.w	r8, r8, r2, lsr #8
 8019810:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 8019814:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 8019818:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801981c:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 8019820:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8019824:	ea4e 0101 	orr.w	r1, lr, r1
 8019828:	ea41 0108 	orr.w	r1, r1, r8
 801982c:	f820 1b02 	strh.w	r1, [r0], #2
 8019830:	e7b6      	b.n	80197a0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x104>
 8019832:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019834:	881b      	ldrh	r3, [r3, #0]
 8019836:	1b9b      	subs	r3, r3, r6
 8019838:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801983c:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8019840:	1b9b      	subs	r3, r3, r6
 8019842:	441c      	add	r4, r3
 8019844:	e7a6      	b.n	8019794 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xf8>
 8019846:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
 801984a:	2203      	movs	r2, #3
 801984c:	2504      	movs	r5, #4
 801984e:	4919      	ldr	r1, [pc, #100]	; (80198b4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x218>)
 8019850:	4550      	cmp	r0, sl
 8019852:	d228      	bcs.n	80198a6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 8019854:	eb00 0c09 	add.w	ip, r0, r9
 8019858:	4560      	cmp	r0, ip
 801985a:	4623      	mov	r3, r4
 801985c:	d219      	bcs.n	8019892 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1f6>
 801985e:	f893 e000 	ldrb.w	lr, [r3]
 8019862:	3401      	adds	r4, #1
 8019864:	fb12 5e0e 	smlabb	lr, r2, lr, r5
 8019868:	eb07 0b0e 	add.w	fp, r7, lr
 801986c:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8019870:	f89b 3002 	ldrb.w	r3, [fp, #2]
 8019874:	f89b b001 	ldrb.w	fp, [fp, #1]
 8019878:	ea01 2303 	and.w	r3, r1, r3, lsl #8
 801987c:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8019880:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8019884:	ea43 030b 	orr.w	r3, r3, fp
 8019888:	ea43 03de 	orr.w	r3, r3, lr, lsr #3
 801988c:	f820 3b02 	strh.w	r3, [r0], #2
 8019890:	e7e2      	b.n	8019858 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1bc>
 8019892:	f8b8 3000 	ldrh.w	r3, [r8]
 8019896:	1b9b      	subs	r3, r3, r6
 8019898:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801989c:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 80198a0:	1b9b      	subs	r3, r3, r6
 80198a2:	441c      	add	r4, r3
 80198a4:	e7d4      	b.n	8019850 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 80198a6:	4b04      	ldr	r3, [pc, #16]	; (80198b8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>)
 80198a8:	6818      	ldr	r0, [r3, #0]
 80198aa:	6803      	ldr	r3, [r0, #0]
 80198ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80198ae:	4798      	blx	r3
 80198b0:	e750      	b.n	8019754 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 80198b2:	bf00      	nop
 80198b4:	fffff800 	.word	0xfffff800
 80198b8:	200243dc 	.word	0x200243dc
 80198bc:	200243d6 	.word	0x200243d6

080198c0 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 80198c0:	b430      	push	{r4, r5}
 80198c2:	780d      	ldrb	r5, [r1, #0]
 80198c4:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80198c8:	2d01      	cmp	r5, #1
 80198ca:	d00a      	beq.n	80198e2 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x22>
 80198cc:	d305      	bcc.n	80198da <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 80198ce:	2d02      	cmp	r5, #2
 80198d0:	d10b      	bne.n	80198ea <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x2a>
 80198d2:	9402      	str	r4, [sp, #8]
 80198d4:	bc30      	pop	{r4, r5}
 80198d6:	f7ff be15 	b.w	8019504 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 80198da:	9402      	str	r4, [sp, #8]
 80198dc:	bc30      	pop	{r4, r5}
 80198de:	f7ff bd2b 	b.w	8019338 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 80198e2:	9402      	str	r4, [sp, #8]
 80198e4:	bc30      	pop	{r4, r5}
 80198e6:	f7ff bed9 	b.w	801969c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 80198ea:	bc30      	pop	{r4, r5}
 80198ec:	4770      	bx	lr
	...

080198f0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 80198f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80198f4:	b087      	sub	sp, #28
 80198f6:	4604      	mov	r4, r0
 80198f8:	460e      	mov	r6, r1
 80198fa:	6810      	ldr	r0, [r2, #0]
 80198fc:	6851      	ldr	r1, [r2, #4]
 80198fe:	ad02      	add	r5, sp, #8
 8019900:	4617      	mov	r7, r2
 8019902:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 8019906:	f8df 9230 	ldr.w	r9, [pc, #560]	; 8019b38 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
 801990a:	c503      	stmia	r5!, {r0, r1}
 801990c:	6818      	ldr	r0, [r3, #0]
 801990e:	ad04      	add	r5, sp, #16
 8019910:	6859      	ldr	r1, [r3, #4]
 8019912:	c503      	stmia	r5!, {r0, r1}
 8019914:	a802      	add	r0, sp, #8
 8019916:	f7fd fb25 	bl	8016f64 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801991a:	4639      	mov	r1, r7
 801991c:	a804      	add	r0, sp, #16
 801991e:	f7fd fb49 	bl	8016fb4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8019922:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8019926:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801992a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801992e:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 8019932:	fb11 2103 	smlabb	r1, r1, r3, r2
 8019936:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 801993a:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 801993e:	440e      	add	r6, r1
 8019940:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8019944:	440a      	add	r2, r1
 8019946:	f8ad 2010 	strh.w	r2, [sp, #16]
 801994a:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801994e:	4413      	add	r3, r2
 8019950:	f8ad 3012 	strh.w	r3, [sp, #18]
 8019954:	4b77      	ldr	r3, [pc, #476]	; (8019b34 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 8019956:	6818      	ldr	r0, [r3, #0]
 8019958:	6803      	ldr	r3, [r0, #0]
 801995a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801995c:	4798      	blx	r3
 801995e:	f8b9 b000 	ldrh.w	fp, [r9]
 8019962:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8019966:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801996a:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801996e:	fb05 f50b 	mul.w	r5, r5, fp
 8019972:	fb0b 2303 	mla	r3, fp, r3, r2
 8019976:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801997a:	ea4f 0348 	mov.w	r3, r8, lsl #1
 801997e:	9300      	str	r3, [sp, #0]
 8019980:	d069      	beq.n	8019a56 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x166>
 8019982:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
 8019986:	4558      	cmp	r0, fp
 8019988:	f080 80cc 	bcs.w	8019b24 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 801998c:	9b00      	ldr	r3, [sp, #0]
 801998e:	4631      	mov	r1, r6
 8019990:	18c3      	adds	r3, r0, r3
 8019992:	9301      	str	r3, [sp, #4]
 8019994:	9b01      	ldr	r3, [sp, #4]
 8019996:	4298      	cmp	r0, r3
 8019998:	d24f      	bcs.n	8019a3a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14a>
 801999a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801999e:	2a00      	cmp	r2, #0
 80199a0:	d048      	beq.n	8019a34 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 80199a2:	fb0a f202 	mul.w	r2, sl, r2
 80199a6:	1c53      	adds	r3, r2, #1
 80199a8:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80199ac:	121b      	asrs	r3, r3, #8
 80199ae:	d041      	beq.n	8019a34 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 80199b0:	8802      	ldrh	r2, [r0, #0]
 80199b2:	b29e      	uxth	r6, r3
 80199b4:	f8b4 c000 	ldrh.w	ip, [r4]
 80199b8:	43db      	mvns	r3, r3
 80199ba:	1215      	asrs	r5, r2, #8
 80199bc:	b2db      	uxtb	r3, r3
 80199be:	ea4f 272c 	mov.w	r7, ip, asr #8
 80199c2:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 80199c6:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 80199ca:	fb15 f503 	smulbb	r5, r5, r3
 80199ce:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80199d2:	00d2      	lsls	r2, r2, #3
 80199d4:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 80199d8:	fb07 5706 	mla	r7, r7, r6, r5
 80199dc:	ea4f 05ec 	mov.w	r5, ip, asr #3
 80199e0:	b2d2      	uxtb	r2, r2
 80199e2:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80199e6:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 80199ea:	fb1e fe03 	smulbb	lr, lr, r3
 80199ee:	b2bf      	uxth	r7, r7
 80199f0:	fb12 f203 	smulbb	r2, r2, r3
 80199f4:	fa5f fc8c 	uxtb.w	ip, ip
 80199f8:	fb05 e506 	mla	r5, r5, r6, lr
 80199fc:	f107 0e01 	add.w	lr, r7, #1
 8019a00:	fb0c 2c06 	mla	ip, ip, r6, r2
 8019a04:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8019a08:	fa1f fc8c 	uxth.w	ip, ip
 8019a0c:	f407 4e78 	and.w	lr, r7, #63488	; 0xf800
 8019a10:	b2ad      	uxth	r5, r5
 8019a12:	f10c 0701 	add.w	r7, ip, #1
 8019a16:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8019a1a:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8019a1e:	ea47 070e 	orr.w	r7, r7, lr
 8019a22:	f105 0e01 	add.w	lr, r5, #1
 8019a26:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 8019a2a:	096d      	lsrs	r5, r5, #5
 8019a2c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8019a30:	432f      	orrs	r7, r5
 8019a32:	8007      	strh	r7, [r0, #0]
 8019a34:	3002      	adds	r0, #2
 8019a36:	3402      	adds	r4, #2
 8019a38:	e7ac      	b.n	8019994 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
 8019a3a:	f8b9 3000 	ldrh.w	r3, [r9]
 8019a3e:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 8019a42:	eba3 0308 	sub.w	r3, r3, r8
 8019a46:	eba6 0608 	sub.w	r6, r6, r8
 8019a4a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8019a4e:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8019a52:	440e      	add	r6, r1
 8019a54:	e797      	b.n	8019986 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
 8019a56:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8019a5a:	42a8      	cmp	r0, r5
 8019a5c:	d262      	bcs.n	8019b24 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 8019a5e:	9b00      	ldr	r3, [sp, #0]
 8019a60:	4631      	mov	r1, r6
 8019a62:	eb00 0b03 	add.w	fp, r0, r3
 8019a66:	4558      	cmp	r0, fp
 8019a68:	d24e      	bcs.n	8019b08 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
 8019a6a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019a6e:	b12b      	cbz	r3, 8019a7c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 8019a70:	2bff      	cmp	r3, #255	; 0xff
 8019a72:	f8b4 e000 	ldrh.w	lr, [r4]
 8019a76:	d104      	bne.n	8019a82 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x192>
 8019a78:	f8a0 e000 	strh.w	lr, [r0]
 8019a7c:	3002      	adds	r0, #2
 8019a7e:	3402      	adds	r4, #2
 8019a80:	e7f1      	b.n	8019a66 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x176>
 8019a82:	8802      	ldrh	r2, [r0, #0]
 8019a84:	b29f      	uxth	r7, r3
 8019a86:	43db      	mvns	r3, r3
 8019a88:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8019a8c:	1216      	asrs	r6, r2, #8
 8019a8e:	b2db      	uxtb	r3, r3
 8019a90:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8019a94:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8019a98:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 8019a9c:	00d2      	lsls	r2, r2, #3
 8019a9e:	fb16 f603 	smulbb	r6, r6, r3
 8019aa2:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8019aa6:	b2d2      	uxtb	r2, r2
 8019aa8:	fb0c 6c07 	mla	ip, ip, r7, r6
 8019aac:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8019ab0:	fb1a fa03 	smulbb	sl, sl, r3
 8019ab4:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8019ab8:	fa1f fc8c 	uxth.w	ip, ip
 8019abc:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8019ac0:	fb12 f303 	smulbb	r3, r2, r3
 8019ac4:	fa5f fe8e 	uxtb.w	lr, lr
 8019ac8:	fb06 a607 	mla	r6, r6, r7, sl
 8019acc:	f10c 0201 	add.w	r2, ip, #1
 8019ad0:	fb0e 3307 	mla	r3, lr, r7, r3
 8019ad4:	b2b6      	uxth	r6, r6
 8019ad6:	b29b      	uxth	r3, r3
 8019ad8:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8019adc:	f106 0a01 	add.w	sl, r6, #1
 8019ae0:	f40c 4278 	and.w	r2, ip, #63488	; 0xf800
 8019ae4:	f103 0c01 	add.w	ip, r3, #1
 8019ae8:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 8019aec:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8019af0:	0976      	lsrs	r6, r6, #5
 8019af2:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8019af6:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8019afa:	ea4c 0c02 	orr.w	ip, ip, r2
 8019afe:	ea4c 0c06 	orr.w	ip, ip, r6
 8019b02:	f8a0 c000 	strh.w	ip, [r0]
 8019b06:	e7b9      	b.n	8019a7c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 8019b08:	f8b9 3000 	ldrh.w	r3, [r9]
 8019b0c:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 8019b10:	eba3 0308 	sub.w	r3, r3, r8
 8019b14:	eba6 0608 	sub.w	r6, r6, r8
 8019b18:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8019b1c:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8019b20:	440e      	add	r6, r1
 8019b22:	e79a      	b.n	8019a5a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x16a>
 8019b24:	4b03      	ldr	r3, [pc, #12]	; (8019b34 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 8019b26:	6818      	ldr	r0, [r3, #0]
 8019b28:	6803      	ldr	r3, [r0, #0]
 8019b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019b2c:	4798      	blx	r3
 8019b2e:	b007      	add	sp, #28
 8019b30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019b34:	200243dc 	.word	0x200243dc
 8019b38:	200243d6 	.word	0x200243d6

08019b3c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 8019b3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019b40:	b089      	sub	sp, #36	; 0x24
 8019b42:	4682      	mov	sl, r0
 8019b44:	460f      	mov	r7, r1
 8019b46:	4691      	mov	r9, r2
 8019b48:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
 8019b4c:	4698      	mov	r8, r3
 8019b4e:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8019b50:	2e00      	cmp	r6, #0
 8019b52:	d036      	beq.n	8019bc2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 8019b54:	4608      	mov	r0, r1
 8019b56:	f7fe fb51 	bl	80181fc <_ZNK8touchgfx6Bitmap8getWidthEv>
 8019b5a:	4605      	mov	r5, r0
 8019b5c:	4638      	mov	r0, r7
 8019b5e:	f7fe fb81 	bl	8018264 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8019b62:	f8ad 000e 	strh.w	r0, [sp, #14]
 8019b66:	4638      	mov	r0, r7
 8019b68:	f8ad 9008 	strh.w	r9, [sp, #8]
 8019b6c:	f8ad 500c 	strh.w	r5, [sp, #12]
 8019b70:	f8ad 800a 	strh.w	r8, [sp, #10]
 8019b74:	f7fe fc2e 	bl	80183d4 <_ZNK8touchgfx6Bitmap7getDataEv>
 8019b78:	4605      	mov	r5, r0
 8019b7a:	4638      	mov	r0, r7
 8019b7c:	f7fe fc5a 	bl	8018434 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8019b80:	4681      	mov	r9, r0
 8019b82:	4638      	mov	r0, r7
 8019b84:	f7fe fcaa 	bl	80184dc <_ZNK8touchgfx6Bitmap9getFormatEv>
 8019b88:	280b      	cmp	r0, #11
 8019b8a:	d81a      	bhi.n	8019bc2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 8019b8c:	e8df f000 	tbb	[pc, r0]
 8019b90:	1906aebd 	.word	0x1906aebd
 8019b94:	19191919 	.word	0x19191919
 8019b98:	b5191919 	.word	0xb5191919
 8019b9c:	4bb0      	ldr	r3, [pc, #704]	; (8019e60 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x324>)
 8019b9e:	6818      	ldr	r0, [r3, #0]
 8019ba0:	6803      	ldr	r3, [r0, #0]
 8019ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019ba4:	4798      	blx	r3
 8019ba6:	2eff      	cmp	r6, #255	; 0xff
 8019ba8:	d121      	bne.n	8019bee <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb2>
 8019baa:	0683      	lsls	r3, r0, #26
 8019bac:	d41f      	bmi.n	8019bee <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb2>
 8019bae:	4638      	mov	r0, r7
 8019bb0:	f7fe fbd8 	bl	8018364 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8019bb4:	b940      	cbnz	r0, 8019bc8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x8c>
 8019bb6:	4623      	mov	r3, r4
 8019bb8:	aa02      	add	r2, sp, #8
 8019bba:	4629      	mov	r1, r5
 8019bbc:	4650      	mov	r0, sl
 8019bbe:	f7ff fa2f 	bl	8019020 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 8019bc2:	b009      	add	sp, #36	; 0x24
 8019bc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019bc8:	f10d 0818 	add.w	r8, sp, #24
 8019bcc:	4639      	mov	r1, r7
 8019bce:	af04      	add	r7, sp, #16
 8019bd0:	4640      	mov	r0, r8
 8019bd2:	f7fe fb7b 	bl	80182cc <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8019bd6:	e898 0003 	ldmia.w	r8, {r0, r1}
 8019bda:	e887 0003 	stmia.w	r7, {r0, r1}
 8019bde:	4638      	mov	r0, r7
 8019be0:	4621      	mov	r1, r4
 8019be2:	f7fb fbf9 	bl	80153d8 <_ZN8touchgfx4RectaNERKS0_>
 8019be6:	4638      	mov	r0, r7
 8019be8:	f7fb fc39 	bl	801545e <_ZNK8touchgfx4Rect7isEmptyEv>
 8019bec:	b130      	cbz	r0, 8019bfc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
 8019bee:	4633      	mov	r3, r6
 8019bf0:	4622      	mov	r2, r4
 8019bf2:	a902      	add	r1, sp, #8
 8019bf4:	4628      	mov	r0, r5
 8019bf6:	f7ff f92d 	bl	8018e54 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8019bfa:	e7e2      	b.n	8019bc2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 8019bfc:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8019c00:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8019c04:	4293      	cmp	r3, r2
 8019c06:	dd12      	ble.n	8019c2e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xf2>
 8019c08:	1a9b      	subs	r3, r3, r2
 8019c0a:	f9b4 0000 	ldrsh.w	r0, [r4]
 8019c0e:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8019c12:	f8ad 0018 	strh.w	r0, [sp, #24]
 8019c16:	4628      	mov	r0, r5
 8019c18:	f8ad 201a 	strh.w	r2, [sp, #26]
 8019c1c:	4642      	mov	r2, r8
 8019c1e:	f8ad 101c 	strh.w	r1, [sp, #28]
 8019c22:	a902      	add	r1, sp, #8
 8019c24:	f8ad 301e 	strh.w	r3, [sp, #30]
 8019c28:	4633      	mov	r3, r6
 8019c2a:	f7ff f913 	bl	8018e54 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8019c2e:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8019c32:	f9b4 2000 	ldrsh.w	r2, [r4]
 8019c36:	4293      	cmp	r3, r2
 8019c38:	dd12      	ble.n	8019c60 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x124>
 8019c3a:	1a9b      	subs	r3, r3, r2
 8019c3c:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8019c40:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8019c44:	f8ad 2018 	strh.w	r2, [sp, #24]
 8019c48:	4642      	mov	r2, r8
 8019c4a:	f8ad 001a 	strh.w	r0, [sp, #26]
 8019c4e:	4628      	mov	r0, r5
 8019c50:	f8ad 301c 	strh.w	r3, [sp, #28]
 8019c54:	23ff      	movs	r3, #255	; 0xff
 8019c56:	f8ad 101e 	strh.w	r1, [sp, #30]
 8019c5a:	a902      	add	r1, sp, #8
 8019c5c:	f7ff f8fa 	bl	8018e54 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8019c60:	463b      	mov	r3, r7
 8019c62:	aa02      	add	r2, sp, #8
 8019c64:	4629      	mov	r1, r5
 8019c66:	4650      	mov	r0, sl
 8019c68:	f7ff f9da 	bl	8019020 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 8019c6c:	88a2      	ldrh	r2, [r4, #4]
 8019c6e:	8823      	ldrh	r3, [r4, #0]
 8019c70:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8019c74:	4413      	add	r3, r2
 8019c76:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8019c7a:	440a      	add	r2, r1
 8019c7c:	b29b      	uxth	r3, r3
 8019c7e:	b292      	uxth	r2, r2
 8019c80:	b218      	sxth	r0, r3
 8019c82:	b211      	sxth	r1, r2
 8019c84:	4288      	cmp	r0, r1
 8019c86:	dd12      	ble.n	8019cae <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x172>
 8019c88:	1a9b      	subs	r3, r3, r2
 8019c8a:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 8019c8e:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
 8019c92:	4642      	mov	r2, r8
 8019c94:	f8ad 1018 	strh.w	r1, [sp, #24]
 8019c98:	a902      	add	r1, sp, #8
 8019c9a:	f8ad 301c 	strh.w	r3, [sp, #28]
 8019c9e:	23ff      	movs	r3, #255	; 0xff
 8019ca0:	f8ad 001e 	strh.w	r0, [sp, #30]
 8019ca4:	4628      	mov	r0, r5
 8019ca6:	f8ad 601a 	strh.w	r6, [sp, #26]
 8019caa:	f7ff f8d3 	bl	8018e54 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8019cae:	88e2      	ldrh	r2, [r4, #6]
 8019cb0:	8863      	ldrh	r3, [r4, #2]
 8019cb2:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8019cb6:	4413      	add	r3, r2
 8019cb8:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8019cbc:	440a      	add	r2, r1
 8019cbe:	b29b      	uxth	r3, r3
 8019cc0:	b292      	uxth	r2, r2
 8019cc2:	b218      	sxth	r0, r3
 8019cc4:	b211      	sxth	r1, r2
 8019cc6:	4288      	cmp	r0, r1
 8019cc8:	f77f af7b 	ble.w	8019bc2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 8019ccc:	1a9b      	subs	r3, r3, r2
 8019cce:	f9b4 6000 	ldrsh.w	r6, [r4]
 8019cd2:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8019cd6:	4642      	mov	r2, r8
 8019cd8:	f8ad 301e 	strh.w	r3, [sp, #30]
 8019cdc:	23ff      	movs	r3, #255	; 0xff
 8019cde:	f8ad 6018 	strh.w	r6, [sp, #24]
 8019ce2:	f8ad 101a 	strh.w	r1, [sp, #26]
 8019ce6:	f8ad 001c 	strh.w	r0, [sp, #28]
 8019cea:	e782      	b.n	8019bf2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb6>
 8019cec:	4633      	mov	r3, r6
 8019cee:	4622      	mov	r2, r4
 8019cf0:	a902      	add	r1, sp, #8
 8019cf2:	4628      	mov	r0, r5
 8019cf4:	f7ff fa04 	bl	8019100 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 8019cf8:	e763      	b.n	8019bc2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 8019cfa:	9600      	str	r6, [sp, #0]
 8019cfc:	4623      	mov	r3, r4
 8019cfe:	aa02      	add	r2, sp, #8
 8019d00:	4649      	mov	r1, r9
 8019d02:	4628      	mov	r0, r5
 8019d04:	f7ff fddc 	bl	80198c0 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 8019d08:	e75b      	b.n	8019bc2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 8019d0a:	4638      	mov	r0, r7
 8019d0c:	f7fe fb2a 	bl	8018364 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8019d10:	b950      	cbnz	r0, 8019d28 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1ec>
 8019d12:	f8da 3000 	ldr.w	r3, [sl]
 8019d16:	aa02      	add	r2, sp, #8
 8019d18:	4629      	mov	r1, r5
 8019d1a:	e9cd 6000 	strd	r6, r0, [sp]
 8019d1e:	4650      	mov	r0, sl
 8019d20:	68de      	ldr	r6, [r3, #12]
 8019d22:	4623      	mov	r3, r4
 8019d24:	47b0      	blx	r6
 8019d26:	e74c      	b.n	8019bc2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 8019d28:	f10d 0818 	add.w	r8, sp, #24
 8019d2c:	4639      	mov	r1, r7
 8019d2e:	af04      	add	r7, sp, #16
 8019d30:	4640      	mov	r0, r8
 8019d32:	f7fe facb 	bl	80182cc <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8019d36:	e898 0003 	ldmia.w	r8, {r0, r1}
 8019d3a:	e887 0003 	stmia.w	r7, {r0, r1}
 8019d3e:	4638      	mov	r0, r7
 8019d40:	4621      	mov	r1, r4
 8019d42:	f7fb fb49 	bl	80153d8 <_ZN8touchgfx4RectaNERKS0_>
 8019d46:	4638      	mov	r0, r7
 8019d48:	f7fb fb89 	bl	801545e <_ZNK8touchgfx4Rect7isEmptyEv>
 8019d4c:	b138      	cbz	r0, 8019d5e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x222>
 8019d4e:	4623      	mov	r3, r4
 8019d50:	9600      	str	r6, [sp, #0]
 8019d52:	aa02      	add	r2, sp, #8
 8019d54:	4649      	mov	r1, r9
 8019d56:	4628      	mov	r0, r5
 8019d58:	f7ff fdca 	bl	80198f0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8019d5c:	e731      	b.n	8019bc2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 8019d5e:	f8da 3000 	ldr.w	r3, [sl]
 8019d62:	aa02      	add	r2, sp, #8
 8019d64:	4629      	mov	r1, r5
 8019d66:	e9cd 6000 	strd	r6, r0, [sp]
 8019d6a:	4650      	mov	r0, sl
 8019d6c:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 8019d70:	463b      	mov	r3, r7
 8019d72:	47d8      	blx	fp
 8019d74:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8019d78:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8019d7c:	4293      	cmp	r3, r2
 8019d7e:	dd13      	ble.n	8019da8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x26c>
 8019d80:	f9b4 0000 	ldrsh.w	r0, [r4]
 8019d84:	1a9b      	subs	r3, r3, r2
 8019d86:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8019d8a:	f8ad 0018 	strh.w	r0, [sp, #24]
 8019d8e:	4628      	mov	r0, r5
 8019d90:	f8ad 201a 	strh.w	r2, [sp, #26]
 8019d94:	aa02      	add	r2, sp, #8
 8019d96:	f8ad 101c 	strh.w	r1, [sp, #28]
 8019d9a:	4649      	mov	r1, r9
 8019d9c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8019da0:	4643      	mov	r3, r8
 8019da2:	9600      	str	r6, [sp, #0]
 8019da4:	f7ff fda4 	bl	80198f0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8019da8:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8019dac:	f9b4 2000 	ldrsh.w	r2, [r4]
 8019db0:	4293      	cmp	r3, r2
 8019db2:	dd13      	ble.n	8019ddc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2a0>
 8019db4:	1a9b      	subs	r3, r3, r2
 8019db6:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8019dba:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8019dbe:	f8ad 2018 	strh.w	r2, [sp, #24]
 8019dc2:	aa02      	add	r2, sp, #8
 8019dc4:	f8ad 001a 	strh.w	r0, [sp, #26]
 8019dc8:	4628      	mov	r0, r5
 8019dca:	f8ad 301c 	strh.w	r3, [sp, #28]
 8019dce:	4643      	mov	r3, r8
 8019dd0:	f8ad 101e 	strh.w	r1, [sp, #30]
 8019dd4:	4649      	mov	r1, r9
 8019dd6:	9600      	str	r6, [sp, #0]
 8019dd8:	f7ff fd8a 	bl	80198f0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8019ddc:	88a2      	ldrh	r2, [r4, #4]
 8019dde:	8823      	ldrh	r3, [r4, #0]
 8019de0:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8019de4:	4413      	add	r3, r2
 8019de6:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8019dea:	440a      	add	r2, r1
 8019dec:	b29b      	uxth	r3, r3
 8019dee:	b292      	uxth	r2, r2
 8019df0:	b218      	sxth	r0, r3
 8019df2:	b211      	sxth	r1, r2
 8019df4:	4288      	cmp	r0, r1
 8019df6:	dd13      	ble.n	8019e20 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2e4>
 8019df8:	1a9b      	subs	r3, r3, r2
 8019dfa:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 8019dfe:	f9bd 7012 	ldrsh.w	r7, [sp, #18]
 8019e02:	aa02      	add	r2, sp, #8
 8019e04:	f8ad 1018 	strh.w	r1, [sp, #24]
 8019e08:	4649      	mov	r1, r9
 8019e0a:	f8ad 301c 	strh.w	r3, [sp, #28]
 8019e0e:	4643      	mov	r3, r8
 8019e10:	f8ad 001e 	strh.w	r0, [sp, #30]
 8019e14:	4628      	mov	r0, r5
 8019e16:	9600      	str	r6, [sp, #0]
 8019e18:	f8ad 701a 	strh.w	r7, [sp, #26]
 8019e1c:	f7ff fd68 	bl	80198f0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8019e20:	88e2      	ldrh	r2, [r4, #6]
 8019e22:	8863      	ldrh	r3, [r4, #2]
 8019e24:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8019e28:	4413      	add	r3, r2
 8019e2a:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8019e2e:	440a      	add	r2, r1
 8019e30:	b29b      	uxth	r3, r3
 8019e32:	b292      	uxth	r2, r2
 8019e34:	b218      	sxth	r0, r3
 8019e36:	b211      	sxth	r1, r2
 8019e38:	4288      	cmp	r0, r1
 8019e3a:	f77f aec2 	ble.w	8019bc2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 8019e3e:	f9b4 7000 	ldrsh.w	r7, [r4]
 8019e42:	1a9b      	subs	r3, r3, r2
 8019e44:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8019e48:	f8ad 301e 	strh.w	r3, [sp, #30]
 8019e4c:	4643      	mov	r3, r8
 8019e4e:	f8ad 7018 	strh.w	r7, [sp, #24]
 8019e52:	f8ad 101a 	strh.w	r1, [sp, #26]
 8019e56:	f8ad 001c 	strh.w	r0, [sp, #28]
 8019e5a:	9600      	str	r6, [sp, #0]
 8019e5c:	e779      	b.n	8019d52 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x216>
 8019e5e:	bf00      	nop
 8019e60:	200243dc 	.word	0x200243dc

08019e64 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 8019e64:	b180      	cbz	r0, 8019e88 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x24>
 8019e66:	2903      	cmp	r1, #3
 8019e68:	d81c      	bhi.n	8019ea4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 8019e6a:	e8df f001 	tbb	[pc, r1]
 8019e6e:	1d02      	.short	0x1d02
 8019e70:	1f08      	.short	0x1f08
 8019e72:	4b10      	ldr	r3, [pc, #64]	; (8019eb4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8019e74:	8818      	ldrh	r0, [r3, #0]
 8019e76:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8019e7a:	4240      	negs	r0, r0
 8019e7c:	4770      	bx	lr
 8019e7e:	4b0d      	ldr	r3, [pc, #52]	; (8019eb4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8019e80:	8818      	ldrh	r0, [r3, #0]
 8019e82:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8019e86:	4770      	bx	lr
 8019e88:	2903      	cmp	r1, #3
 8019e8a:	d80b      	bhi.n	8019ea4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 8019e8c:	a301      	add	r3, pc, #4	; (adr r3, 8019e94 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x30>)
 8019e8e:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8019e92:	bf00      	nop
 8019e94:	08019ea9 	.word	0x08019ea9
 8019e98:	08019e7f 	.word	0x08019e7f
 8019e9c:	08019ead 	.word	0x08019ead
 8019ea0:	08019e73 	.word	0x08019e73
 8019ea4:	2000      	movs	r0, #0
 8019ea6:	4770      	bx	lr
 8019ea8:	2001      	movs	r0, #1
 8019eaa:	4770      	bx	lr
 8019eac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019eb0:	4770      	bx	lr
 8019eb2:	bf00      	nop
 8019eb4:	200243d6 	.word	0x200243d6

08019eb8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 8019eb8:	b180      	cbz	r0, 8019edc <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x24>
 8019eba:	2903      	cmp	r1, #3
 8019ebc:	d81c      	bhi.n	8019ef8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 8019ebe:	e8df f001 	tbb	[pc, r1]
 8019ec2:	021d      	.short	0x021d
 8019ec4:	071f      	.short	0x071f
 8019ec6:	4b10      	ldr	r3, [pc, #64]	; (8019f08 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 8019ec8:	8818      	ldrh	r0, [r3, #0]
 8019eca:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8019ece:	4770      	bx	lr
 8019ed0:	4b0d      	ldr	r3, [pc, #52]	; (8019f08 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 8019ed2:	8818      	ldrh	r0, [r3, #0]
 8019ed4:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8019ed8:	4240      	negs	r0, r0
 8019eda:	4770      	bx	lr
 8019edc:	2903      	cmp	r1, #3
 8019ede:	d80b      	bhi.n	8019ef8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 8019ee0:	a301      	add	r3, pc, #4	; (adr r3, 8019ee8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x30>)
 8019ee2:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8019ee6:	bf00      	nop
 8019ee8:	08019ec7 	.word	0x08019ec7
 8019eec:	08019f01 	.word	0x08019f01
 8019ef0:	08019ed1 	.word	0x08019ed1
 8019ef4:	08019efd 	.word	0x08019efd
 8019ef8:	2000      	movs	r0, #0
 8019efa:	4770      	bx	lr
 8019efc:	2001      	movs	r0, #1
 8019efe:	4770      	bx	lr
 8019f00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019f04:	4770      	bx	lr
 8019f06:	bf00      	nop
 8019f08:	200243d6 	.word	0x200243d6

08019f0c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 8019f0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019f10:	b099      	sub	sp, #100	; 0x64
 8019f12:	910b      	str	r1, [sp, #44]	; 0x2c
 8019f14:	a914      	add	r1, sp, #80	; 0x50
 8019f16:	f9bd 4088 	ldrsh.w	r4, [sp, #136]	; 0x88
 8019f1a:	f8bd 5090 	ldrh.w	r5, [sp, #144]	; 0x90
 8019f1e:	f8bd 6094 	ldrh.w	r6, [sp, #148]	; 0x94
 8019f22:	f89d 80ac 	ldrb.w	r8, [sp, #172]	; 0xac
 8019f26:	f89d a0b4 	ldrb.w	sl, [sp, #180]	; 0xb4
 8019f2a:	e881 000c 	stmia.w	r1, {r2, r3}
 8019f2e:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
 8019f32:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	; 0x98
 8019f36:	9309      	str	r3, [sp, #36]	; 0x24
 8019f38:	f891 900d 	ldrb.w	r9, [r1, #13]
 8019f3c:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 8019f40:	ea4f 1749 	mov.w	r7, r9, lsl #5
 8019f44:	9310      	str	r3, [sp, #64]	; 0x40
 8019f46:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
 8019f4a:	930c      	str	r3, [sp, #48]	; 0x30
 8019f4c:	f407 7380 	and.w	r3, r7, #256	; 0x100
 8019f50:	798f      	ldrb	r7, [r1, #6]
 8019f52:	431f      	orrs	r7, r3
 8019f54:	f000 8195 	beq.w	801a282 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 8019f58:	ea4f 1909 	mov.w	r9, r9, lsl #4
 8019f5c:	f409 7380 	and.w	r3, r9, #256	; 0x100
 8019f60:	f891 9007 	ldrb.w	r9, [r1, #7]
 8019f64:	ea59 0903 	orrs.w	r9, r9, r3
 8019f68:	f000 818b 	beq.w	801a282 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 8019f6c:	f991 3009 	ldrsb.w	r3, [r1, #9]
 8019f70:	b29b      	uxth	r3, r3
 8019f72:	2d00      	cmp	r5, #0
 8019f74:	f000 812e 	beq.w	801a1d4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c8>
 8019f78:	1aed      	subs	r5, r5, r3
 8019f7a:	b2ad      	uxth	r5, r5
 8019f7c:	042b      	lsls	r3, r5, #16
 8019f7e:	d502      	bpl.n	8019f86 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 8019f80:	1b64      	subs	r4, r4, r5
 8019f82:	2500      	movs	r5, #0
 8019f84:	b224      	sxth	r4, r4
 8019f86:	f9b2 1000 	ldrsh.w	r1, [r2]
 8019f8a:	a814      	add	r0, sp, #80	; 0x50
 8019f8c:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 8019f90:	428c      	cmp	r4, r1
 8019f92:	b28b      	uxth	r3, r1
 8019f94:	bfbf      	itttt	lt
 8019f96:	18ed      	addlt	r5, r5, r3
 8019f98:	1b2c      	sublt	r4, r5, r4
 8019f9a:	b2a5      	uxthlt	r5, r4
 8019f9c:	460c      	movlt	r4, r1
 8019f9e:	8891      	ldrh	r1, [r2, #4]
 8019fa0:	440b      	add	r3, r1
 8019fa2:	4621      	mov	r1, r4
 8019fa4:	b21b      	sxth	r3, r3
 8019fa6:	930f      	str	r3, [sp, #60]	; 0x3c
 8019fa8:	88d3      	ldrh	r3, [r2, #6]
 8019faa:	8852      	ldrh	r2, [r2, #2]
 8019fac:	4413      	add	r3, r2
 8019fae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019fb0:	b21b      	sxth	r3, r3
 8019fb2:	930d      	str	r3, [sp, #52]	; 0x34
 8019fb4:	4bbd      	ldr	r3, [pc, #756]	; (801a2ac <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>)
 8019fb6:	f893 b000 	ldrb.w	fp, [r3]
 8019fba:	f10b 3cff 	add.w	ip, fp, #4294967295	; 0xffffffff
 8019fbe:	f1dc 0300 	rsbs	r3, ip, #0
 8019fc2:	eb43 030c 	adc.w	r3, r3, ip
 8019fc6:	930e      	str	r3, [sp, #56]	; 0x38
 8019fc8:	4653      	mov	r3, sl
 8019fca:	f7fc fe5f 	bl	8016c8c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 8019fce:	4621      	mov	r1, r4
 8019fd0:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
 8019fd4:	4653      	mov	r3, sl
 8019fd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019fd8:	a814      	add	r0, sp, #80	; 0x50
 8019fda:	f7fc fe74 	bl	8016cc6 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 8019fde:	a918      	add	r1, sp, #96	; 0x60
 8019fe0:	f821 0d02 	strh.w	r0, [r1, #-2]!
 8019fe4:	a817      	add	r0, sp, #92	; 0x5c
 8019fe6:	f7fc ff95 	bl	8016f14 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 8019fea:	f1ba 0f00 	cmp.w	sl, #0
 8019fee:	f040 80f4 	bne.w	801a1da <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
 8019ff2:	f1bb 0f01 	cmp.w	fp, #1
 8019ff6:	f040 80f8 	bne.w	801a1ea <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2de>
 8019ffa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019ffc:	2b00      	cmp	r3, #0
 8019ffe:	f040 8145 	bne.w	801a28c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>
 801a002:	b2ba      	uxth	r2, r7
 801a004:	b905      	cbnz	r5, 801a008 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xfc>
 801a006:	b16e      	cbz	r6, 801a024 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x118>
 801a008:	fb06 5302 	mla	r3, r6, r2, r5
 801a00c:	9828      	ldr	r0, [sp, #160]	; 0xa0
 801a00e:	4631      	mov	r1, r6
 801a010:	fb08 f303 	mul.w	r3, r8, r3
 801a014:	f003 0607 	and.w	r6, r3, #7
 801a018:	eb00 03d3 	add.w	r3, r0, r3, lsr #3
 801a01c:	9328      	str	r3, [sp, #160]	; 0xa0
 801a01e:	eba9 0301 	sub.w	r3, r9, r1
 801a022:	930a      	str	r3, [sp, #40]	; 0x28
 801a024:	4651      	mov	r1, sl
 801a026:	980e      	ldr	r0, [sp, #56]	; 0x38
 801a028:	f7ff ff1c 	bl	8019e64 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 801a02c:	4681      	mov	r9, r0
 801a02e:	980e      	ldr	r0, [sp, #56]	; 0x38
 801a030:	f7ff ff42 	bl	8019eb8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 801a034:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a036:	9909      	ldr	r1, [sp, #36]	; 0x24
 801a038:	4683      	mov	fp, r0
 801a03a:	eba3 0a01 	sub.w	sl, r3, r1
 801a03e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a040:	459a      	cmp	sl, r3
 801a042:	bfa8      	it	ge
 801a044:	469a      	movge	sl, r3
 801a046:	f1ba 0f00 	cmp.w	sl, #0
 801a04a:	f340 811a 	ble.w	801a282 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801a04e:	1b64      	subs	r4, r4, r5
 801a050:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a052:	1b1c      	subs	r4, r3, r4
 801a054:	42bc      	cmp	r4, r7
 801a056:	bfd4      	ite	le
 801a058:	ebc5 0504 	rsble	r5, r5, r4
 801a05c:	ebc5 0507 	rsbgt	r5, r5, r7
 801a060:	2d00      	cmp	r5, #0
 801a062:	f340 810e 	ble.w	801a282 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801a066:	1b52      	subs	r2, r2, r5
 801a068:	fb08 f302 	mul.w	r3, r8, r2
 801a06c:	930f      	str	r3, [sp, #60]	; 0x3c
 801a06e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a070:	2b00      	cmp	r3, #0
 801a072:	f040 8116 	bne.w	801a2a2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x396>
 801a076:	4b8e      	ldr	r3, [pc, #568]	; (801a2b0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>)
 801a078:	6818      	ldr	r0, [r3, #0]
 801a07a:	6803      	ldr	r3, [r0, #0]
 801a07c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a07e:	4798      	blx	r3
 801a080:	2301      	movs	r3, #1
 801a082:	4a8c      	ldr	r2, [pc, #560]	; (801a2b4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
 801a084:	fa03 f308 	lsl.w	r3, r3, r8
 801a088:	8811      	ldrh	r1, [r2, #0]
 801a08a:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801a08e:	3b01      	subs	r3, #1
 801a090:	b2db      	uxtb	r3, r3
 801a092:	930e      	str	r3, [sp, #56]	; 0x38
 801a094:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 801a098:	fb01 2303 	mla	r3, r1, r3, r2
 801a09c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801a0a0:	930a      	str	r3, [sp, #40]	; 0x28
 801a0a2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801a0a4:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801a0a8:	9313      	str	r3, [sp, #76]	; 0x4c
 801a0aa:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801a0ac:	0a19      	lsrs	r1, r3, #8
 801a0ae:	b2cb      	uxtb	r3, r1
 801a0b0:	9312      	str	r3, [sp, #72]	; 0x48
 801a0b2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801a0b4:	b2db      	uxtb	r3, r3
 801a0b6:	9311      	str	r3, [sp, #68]	; 0x44
 801a0b8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801a0ba:	095a      	lsrs	r2, r3, #5
 801a0bc:	4b7e      	ldr	r3, [pc, #504]	; (801a2b8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 801a0be:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801a0c2:	400b      	ands	r3, r1
 801a0c4:	4313      	orrs	r3, r2
 801a0c6:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801a0c8:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801a0cc:	4313      	orrs	r3, r2
 801a0ce:	b29b      	uxth	r3, r3
 801a0d0:	9310      	str	r3, [sp, #64]	; 0x40
 801a0d2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801a0d4:	781a      	ldrb	r2, [r3, #0]
 801a0d6:	ea4f 0349 	mov.w	r3, r9, lsl #1
 801a0da:	fb05 b919 	mls	r9, r5, r9, fp
 801a0de:	4132      	asrs	r2, r6
 801a0e0:	fb03 fb05 	mul.w	fp, r3, r5
 801a0e4:	930d      	str	r3, [sp, #52]	; 0x34
 801a0e6:	b2d2      	uxtb	r2, r2
 801a0e8:	eb0b 0b49 	add.w	fp, fp, r9, lsl #1
 801a0ec:	f11a 3aff 	adds.w	sl, sl, #4294967295	; 0xffffffff
 801a0f0:	f0c0 80f5 	bcc.w	801a2de <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3d2>
 801a0f4:	46ae      	mov	lr, r5
 801a0f6:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 801a0fa:	f11e 3eff 	adds.w	lr, lr, #4294967295	; 0xffffffff
 801a0fe:	f0c0 80dd 	bcc.w	801a2bc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b0>
 801a102:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a104:	4013      	ands	r3, r2
 801a106:	d055      	beq.n	801a1b4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 801a108:	20ff      	movs	r0, #255	; 0xff
 801a10a:	990e      	ldr	r1, [sp, #56]	; 0x38
 801a10c:	fb90 f1f1 	sdiv	r1, r0, r1
 801a110:	434b      	muls	r3, r1
 801a112:	2bfe      	cmp	r3, #254	; 0xfe
 801a114:	dd03      	ble.n	801a11e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x212>
 801a116:	990c      	ldr	r1, [sp, #48]	; 0x30
 801a118:	4281      	cmp	r1, r0
 801a11a:	f000 80c4 	beq.w	801a2a6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39a>
 801a11e:	990c      	ldr	r1, [sp, #48]	; 0x30
 801a120:	f8bc 4000 	ldrh.w	r4, [ip]
 801a124:	fb11 f303 	smulbb	r3, r1, r3
 801a128:	1220      	asrs	r0, r4, #8
 801a12a:	b29b      	uxth	r3, r3
 801a12c:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801a130:	1c59      	adds	r1, r3, #1
 801a132:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 801a136:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801a13a:	10e1      	asrs	r1, r4, #3
 801a13c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801a140:	00e4      	lsls	r4, r4, #3
 801a142:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801a146:	b29f      	uxth	r7, r3
 801a148:	43db      	mvns	r3, r3
 801a14a:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 801a14e:	b2db      	uxtb	r3, r3
 801a150:	b2e4      	uxtb	r4, r4
 801a152:	9309      	str	r3, [sp, #36]	; 0x24
 801a154:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801a156:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 801a15a:	fb13 f907 	smulbb	r9, r3, r7
 801a15e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a160:	fb00 9003 	mla	r0, r0, r3, r9
 801a164:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801a166:	fb13 f907 	smulbb	r9, r3, r7
 801a16a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a16c:	b280      	uxth	r0, r0
 801a16e:	fb01 9103 	mla	r1, r1, r3, r9
 801a172:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801a174:	fb13 f707 	smulbb	r7, r3, r7
 801a178:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a17a:	b289      	uxth	r1, r1
 801a17c:	fb04 7403 	mla	r4, r4, r3, r7
 801a180:	1c43      	adds	r3, r0, #1
 801a182:	b2a4      	uxth	r4, r4
 801a184:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801a188:	f104 0901 	add.w	r9, r4, #1
 801a18c:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801a190:	eb09 2914 	add.w	r9, r9, r4, lsr #8
 801a194:	f3c9 29c4 	ubfx	r9, r9, #11, #5
 801a198:	ea49 0000 	orr.w	r0, r9, r0
 801a19c:	f101 0901 	add.w	r9, r1, #1
 801a1a0:	eb09 2911 	add.w	r9, r9, r1, lsr #8
 801a1a4:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801a1a8:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801a1ac:	ea40 0009 	orr.w	r0, r0, r9
 801a1b0:	f8ac 0000 	strh.w	r0, [ip]
 801a1b4:	4446      	add	r6, r8
 801a1b6:	b2b6      	uxth	r6, r6
 801a1b8:	2e07      	cmp	r6, #7
 801a1ba:	bf89      	itett	hi
 801a1bc:	9b28      	ldrhi	r3, [sp, #160]	; 0xa0
 801a1be:	fa42 f208 	asrls.w	r2, r2, r8
 801a1c2:	2600      	movhi	r6, #0
 801a1c4:	785a      	ldrbhi	r2, [r3, #1]
 801a1c6:	bf8a      	itet	hi
 801a1c8:	3301      	addhi	r3, #1
 801a1ca:	b2d2      	uxtbls	r2, r2
 801a1cc:	9328      	strhi	r3, [sp, #160]	; 0xa0
 801a1ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a1d0:	449c      	add	ip, r3
 801a1d2:	e792      	b.n	801a0fa <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ee>
 801a1d4:	441c      	add	r4, r3
 801a1d6:	b224      	sxth	r4, r4
 801a1d8:	e6d5      	b.n	8019f86 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 801a1da:	f1ba 0f01 	cmp.w	sl, #1
 801a1de:	f47f af0c 	bne.w	8019ffa <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801a1e2:	f1bb 0f01 	cmp.w	fp, #1
 801a1e6:	f47f af08 	bne.w	8019ffa <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801a1ea:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 801a2b0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>
 801a1ee:	f8db 0000 	ldr.w	r0, [fp]
 801a1f2:	6803      	ldr	r3, [r0, #0]
 801a1f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a1f6:	4798      	blx	r3
 801a1f8:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 801a1fc:	465a      	mov	r2, fp
 801a1fe:	d006      	beq.n	801a20e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
 801a200:	f1b8 0f04 	cmp.w	r8, #4
 801a204:	d140      	bne.n	801a288 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>
 801a206:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a208:	3300      	adds	r3, #0
 801a20a:	bf18      	it	ne
 801a20c:	2301      	movne	r3, #1
 801a20e:	0580      	lsls	r0, r0, #22
 801a210:	d56e      	bpl.n	801a2f0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
 801a212:	f1b8 0f08 	cmp.w	r8, #8
 801a216:	d16b      	bne.n	801a2f0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
 801a218:	2b00      	cmp	r3, #0
 801a21a:	bf0c      	ite	eq
 801a21c:	f44f 7100 	moveq.w	r1, #512	; 0x200
 801a220:	f44f 7180 	movne.w	r1, #256	; 0x100
 801a224:	2d00      	cmp	r5, #0
 801a226:	f47f aee8 	bne.w	8019ffa <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801a22a:	2e00      	cmp	r6, #0
 801a22c:	f47f aee5 	bne.w	8019ffa <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801a230:	19e3      	adds	r3, r4, r7
 801a232:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801a234:	4283      	cmp	r3, r0
 801a236:	f73f aee0 	bgt.w	8019ffa <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801a23a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a23c:	980d      	ldr	r0, [sp, #52]	; 0x34
 801a23e:	444b      	add	r3, r9
 801a240:	4283      	cmp	r3, r0
 801a242:	f73f aeda 	bgt.w	8019ffa <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801a246:	b2bf      	uxth	r7, r7
 801a248:	f1b8 0f08 	cmp.w	r8, #8
 801a24c:	6810      	ldr	r0, [r2, #0]
 801a24e:	f04f 0500 	mov.w	r5, #0
 801a252:	bf18      	it	ne
 801a254:	3701      	addne	r7, #1
 801a256:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
 801a25a:	6804      	ldr	r4, [r0, #0]
 801a25c:	bf18      	it	ne
 801a25e:	f027 0701 	bicne.w	r7, r7, #1
 801a262:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 801a266:	e9cd 1505 	strd	r1, r5, [sp, #20]
 801a26a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801a26c:	bf18      	it	ne
 801a26e:	b2bf      	uxthne	r7, r7
 801a270:	9104      	str	r1, [sp, #16]
 801a272:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801a274:	e9cd 7900 	strd	r7, r9, [sp]
 801a278:	e9cd 7102 	strd	r7, r1, [sp, #8]
 801a27c:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801a27e:	6d64      	ldr	r4, [r4, #84]	; 0x54
 801a280:	47a0      	blx	r4
 801a282:	b019      	add	sp, #100	; 0x64
 801a284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a288:	2300      	movs	r3, #0
 801a28a:	e7c0      	b.n	801a20e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
 801a28c:	2208      	movs	r2, #8
 801a28e:	fb92 f3f8 	sdiv	r3, r2, r8
 801a292:	1e5a      	subs	r2, r3, #1
 801a294:	443a      	add	r2, r7
 801a296:	fb92 f2f3 	sdiv	r2, r2, r3
 801a29a:	fb12 f203 	smulbb	r2, r2, r3
 801a29e:	b292      	uxth	r2, r2
 801a2a0:	e6b0      	b.n	801a004 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf8>
 801a2a2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801a2a4:	e6ec      	b.n	801a080 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x174>
 801a2a6:	9810      	ldr	r0, [sp, #64]	; 0x40
 801a2a8:	e782      	b.n	801a1b0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a4>
 801a2aa:	bf00      	nop
 801a2ac:	200243d4 	.word	0x200243d4
 801a2b0:	200243dc 	.word	0x200243dc
 801a2b4:	200243d6 	.word	0x200243d6
 801a2b8:	00fff800 	.word	0x00fff800
 801a2bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a2be:	b153      	cbz	r3, 801a2d6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ca>
 801a2c0:	441e      	add	r6, r3
 801a2c2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801a2c4:	b2b6      	uxth	r6, r6
 801a2c6:	eb03 03d6 	add.w	r3, r3, r6, lsr #3
 801a2ca:	f006 0607 	and.w	r6, r6, #7
 801a2ce:	781a      	ldrb	r2, [r3, #0]
 801a2d0:	9328      	str	r3, [sp, #160]	; 0xa0
 801a2d2:	4132      	asrs	r2, r6
 801a2d4:	b2d2      	uxtb	r2, r2
 801a2d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a2d8:	445b      	add	r3, fp
 801a2da:	930a      	str	r3, [sp, #40]	; 0x28
 801a2dc:	e706      	b.n	801a0ec <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e0>
 801a2de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a2e0:	2b00      	cmp	r3, #0
 801a2e2:	d1ce      	bne.n	801a282 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801a2e4:	4b05      	ldr	r3, [pc, #20]	; (801a2fc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f0>)
 801a2e6:	6818      	ldr	r0, [r3, #0]
 801a2e8:	6803      	ldr	r3, [r0, #0]
 801a2ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a2ec:	4798      	blx	r3
 801a2ee:	e7c8      	b.n	801a282 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801a2f0:	2b00      	cmp	r3, #0
 801a2f2:	f43f ae82 	beq.w	8019ffa <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801a2f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 801a2fa:	e793      	b.n	801a224 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x318>
 801a2fc:	200243dc 	.word	0x200243dc

0801a300 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 801a300:	6101      	str	r1, [r0, #16]
 801a302:	4770      	bx	lr

0801a304 <_ZN8touchgfx8Gestures4tickEv>:
 801a304:	7b83      	ldrb	r3, [r0, #14]
 801a306:	b14b      	cbz	r3, 801a31c <_ZN8touchgfx8Gestures4tickEv+0x18>
 801a308:	8903      	ldrh	r3, [r0, #8]
 801a30a:	3301      	adds	r3, #1
 801a30c:	b29b      	uxth	r3, r3
 801a30e:	2b07      	cmp	r3, #7
 801a310:	8103      	strh	r3, [r0, #8]
 801a312:	bf81      	itttt	hi
 801a314:	2300      	movhi	r3, #0
 801a316:	8143      	strhhi	r3, [r0, #10]
 801a318:	8183      	strhhi	r3, [r0, #12]
 801a31a:	7383      	strbhi	r3, [r0, #14]
 801a31c:	4770      	bx	lr
	...

0801a320 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 801a320:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801a324:	4698      	mov	r8, r3
 801a326:	8883      	ldrh	r3, [r0, #4]
 801a328:	4604      	mov	r4, r0
 801a32a:	4617      	mov	r7, r2
 801a32c:	f8ad 3006 	strh.w	r3, [sp, #6]
 801a330:	eba8 0303 	sub.w	r3, r8, r3
 801a334:	4a19      	ldr	r2, [pc, #100]	; (801a39c <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 801a336:	460e      	mov	r6, r1
 801a338:	b21b      	sxth	r3, r3
 801a33a:	88c1      	ldrh	r1, [r0, #6]
 801a33c:	9200      	str	r2, [sp, #0]
 801a33e:	2000      	movs	r0, #0
 801a340:	2b00      	cmp	r3, #0
 801a342:	8aa2      	ldrh	r2, [r4, #20]
 801a344:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 801a348:	bfb8      	it	lt
 801a34a:	425b      	neglt	r3, r3
 801a34c:	f88d 0004 	strb.w	r0, [sp, #4]
 801a350:	f8ad 1008 	strh.w	r1, [sp, #8]
 801a354:	b21b      	sxth	r3, r3
 801a356:	f8ad 800a 	strh.w	r8, [sp, #10]
 801a35a:	f8ad 500c 	strh.w	r5, [sp, #12]
 801a35e:	4293      	cmp	r3, r2
 801a360:	dc07      	bgt.n	801a372 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 801a362:	1a69      	subs	r1, r5, r1
 801a364:	b209      	sxth	r1, r1
 801a366:	2900      	cmp	r1, #0
 801a368:	bfb8      	it	lt
 801a36a:	4249      	neglt	r1, r1
 801a36c:	b209      	sxth	r1, r1
 801a36e:	428a      	cmp	r2, r1
 801a370:	da10      	bge.n	801a394 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 801a372:	6920      	ldr	r0, [r4, #16]
 801a374:	4669      	mov	r1, sp
 801a376:	eba8 0606 	sub.w	r6, r8, r6
 801a37a:	1bef      	subs	r7, r5, r7
 801a37c:	6803      	ldr	r3, [r0, #0]
 801a37e:	685b      	ldr	r3, [r3, #4]
 801a380:	4798      	blx	r3
 801a382:	2300      	movs	r3, #0
 801a384:	2001      	movs	r0, #1
 801a386:	8166      	strh	r6, [r4, #10]
 801a388:	8123      	strh	r3, [r4, #8]
 801a38a:	81a7      	strh	r7, [r4, #12]
 801a38c:	f8a4 8004 	strh.w	r8, [r4, #4]
 801a390:	80e5      	strh	r5, [r4, #6]
 801a392:	73a0      	strb	r0, [r4, #14]
 801a394:	b004      	add	sp, #16
 801a396:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a39a:	bf00      	nop
 801a39c:	0801ebc4 	.word	0x0801ebc4

0801a3a0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 801a3a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a3a2:	461e      	mov	r6, r3
 801a3a4:	1e4b      	subs	r3, r1, #1
 801a3a6:	b085      	sub	sp, #20
 801a3a8:	4604      	mov	r4, r0
 801a3aa:	2b01      	cmp	r3, #1
 801a3ac:	460d      	mov	r5, r1
 801a3ae:	4617      	mov	r7, r2
 801a3b0:	d84b      	bhi.n	801a44a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 801a3b2:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801a3b6:	1cd3      	adds	r3, r2, #3
 801a3b8:	b29b      	uxth	r3, r3
 801a3ba:	2b06      	cmp	r3, #6
 801a3bc:	d916      	bls.n	801a3ec <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 801a3be:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 801a460 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 801a3c2:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801a3c6:	f8cd c004 	str.w	ip, [sp, #4]
 801a3ca:	f04f 0c00 	mov.w	ip, #0
 801a3ce:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801a3d2:	6900      	ldr	r0, [r0, #16]
 801a3d4:	f8ad 100c 	strh.w	r1, [sp, #12]
 801a3d8:	a901      	add	r1, sp, #4
 801a3da:	f88d c008 	strb.w	ip, [sp, #8]
 801a3de:	f8ad 200a 	strh.w	r2, [sp, #10]
 801a3e2:	f8ad 300e 	strh.w	r3, [sp, #14]
 801a3e6:	6803      	ldr	r3, [r0, #0]
 801a3e8:	689b      	ldr	r3, [r3, #8]
 801a3ea:	4798      	blx	r3
 801a3ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a3f0:	1cd3      	adds	r3, r2, #3
 801a3f2:	b29b      	uxth	r3, r3
 801a3f4:	2b06      	cmp	r3, #6
 801a3f6:	d916      	bls.n	801a426 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801a3f8:	f8df c064 	ldr.w	ip, [pc, #100]	; 801a460 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 801a3fc:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801a400:	f8cd c004 	str.w	ip, [sp, #4]
 801a404:	f04f 0c01 	mov.w	ip, #1
 801a408:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801a40c:	6920      	ldr	r0, [r4, #16]
 801a40e:	f8ad 100c 	strh.w	r1, [sp, #12]
 801a412:	a901      	add	r1, sp, #4
 801a414:	f88d c008 	strb.w	ip, [sp, #8]
 801a418:	f8ad 200a 	strh.w	r2, [sp, #10]
 801a41c:	f8ad 300e 	strh.w	r3, [sp, #14]
 801a420:	6803      	ldr	r3, [r0, #0]
 801a422:	689b      	ldr	r3, [r3, #8]
 801a424:	4798      	blx	r3
 801a426:	4b0d      	ldr	r3, [pc, #52]	; (801a45c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 801a428:	a901      	add	r1, sp, #4
 801a42a:	6920      	ldr	r0, [r4, #16]
 801a42c:	9301      	str	r3, [sp, #4]
 801a42e:	2300      	movs	r3, #0
 801a430:	f88d 5008 	strb.w	r5, [sp, #8]
 801a434:	f8ad 700a 	strh.w	r7, [sp, #10]
 801a438:	f8ad 600c 	strh.w	r6, [sp, #12]
 801a43c:	f8ad 300e 	strh.w	r3, [sp, #14]
 801a440:	6803      	ldr	r3, [r0, #0]
 801a442:	681b      	ldr	r3, [r3, #0]
 801a444:	4798      	blx	r3
 801a446:	b005      	add	sp, #20
 801a448:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a44a:	2900      	cmp	r1, #0
 801a44c:	d1eb      	bne.n	801a426 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801a44e:	80a2      	strh	r2, [r4, #4]
 801a450:	80c6      	strh	r6, [r0, #6]
 801a452:	60a1      	str	r1, [r4, #8]
 801a454:	81a1      	strh	r1, [r4, #12]
 801a456:	73a1      	strb	r1, [r4, #14]
 801a458:	e7e5      	b.n	801a426 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801a45a:	bf00      	nop
 801a45c:	0801ebb0 	.word	0x0801ebb0
 801a460:	0801ebd8 	.word	0x0801ebd8

0801a464 <_ZdlPvj>:
 801a464:	f000 b812 	b.w	801a48c <_ZdlPv>

0801a468 <__cxa_guard_acquire>:
 801a468:	6803      	ldr	r3, [r0, #0]
 801a46a:	07db      	lsls	r3, r3, #31
 801a46c:	d406      	bmi.n	801a47c <__cxa_guard_acquire+0x14>
 801a46e:	7843      	ldrb	r3, [r0, #1]
 801a470:	b103      	cbz	r3, 801a474 <__cxa_guard_acquire+0xc>
 801a472:	deff      	udf	#255	; 0xff
 801a474:	2301      	movs	r3, #1
 801a476:	7043      	strb	r3, [r0, #1]
 801a478:	4618      	mov	r0, r3
 801a47a:	4770      	bx	lr
 801a47c:	2000      	movs	r0, #0
 801a47e:	4770      	bx	lr

0801a480 <__cxa_guard_release>:
 801a480:	2301      	movs	r3, #1
 801a482:	6003      	str	r3, [r0, #0]
 801a484:	4770      	bx	lr

0801a486 <__cxa_pure_virtual>:
 801a486:	b508      	push	{r3, lr}
 801a488:	f000 f80e 	bl	801a4a8 <_ZSt9terminatev>

0801a48c <_ZdlPv>:
 801a48c:	f000 b880 	b.w	801a590 <free>

0801a490 <_ZN10__cxxabiv111__terminateEPFvvE>:
 801a490:	b508      	push	{r3, lr}
 801a492:	4780      	blx	r0
 801a494:	f000 f80d 	bl	801a4b2 <abort>

0801a498 <_ZSt13get_terminatev>:
 801a498:	4b02      	ldr	r3, [pc, #8]	; (801a4a4 <_ZSt13get_terminatev+0xc>)
 801a49a:	6818      	ldr	r0, [r3, #0]
 801a49c:	f3bf 8f5b 	dmb	ish
 801a4a0:	4770      	bx	lr
 801a4a2:	bf00      	nop
 801a4a4:	20000030 	.word	0x20000030

0801a4a8 <_ZSt9terminatev>:
 801a4a8:	b508      	push	{r3, lr}
 801a4aa:	f7ff fff5 	bl	801a498 <_ZSt13get_terminatev>
 801a4ae:	f7ff ffef 	bl	801a490 <_ZN10__cxxabiv111__terminateEPFvvE>

0801a4b2 <abort>:
 801a4b2:	b508      	push	{r3, lr}
 801a4b4:	2006      	movs	r0, #6
 801a4b6:	f000 fc8f 	bl	801add8 <raise>
 801a4ba:	2001      	movs	r0, #1
 801a4bc:	f7e8 f830 	bl	8002520 <_exit>

0801a4c0 <__assert_func>:
 801a4c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a4c2:	4614      	mov	r4, r2
 801a4c4:	461a      	mov	r2, r3
 801a4c6:	4b09      	ldr	r3, [pc, #36]	; (801a4ec <__assert_func+0x2c>)
 801a4c8:	681b      	ldr	r3, [r3, #0]
 801a4ca:	4605      	mov	r5, r0
 801a4cc:	68d8      	ldr	r0, [r3, #12]
 801a4ce:	b14c      	cbz	r4, 801a4e4 <__assert_func+0x24>
 801a4d0:	4b07      	ldr	r3, [pc, #28]	; (801a4f0 <__assert_func+0x30>)
 801a4d2:	9100      	str	r1, [sp, #0]
 801a4d4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801a4d8:	4906      	ldr	r1, [pc, #24]	; (801a4f4 <__assert_func+0x34>)
 801a4da:	462b      	mov	r3, r5
 801a4dc:	f000 f81a 	bl	801a514 <fiprintf>
 801a4e0:	f7ff ffe7 	bl	801a4b2 <abort>
 801a4e4:	4b04      	ldr	r3, [pc, #16]	; (801a4f8 <__assert_func+0x38>)
 801a4e6:	461c      	mov	r4, r3
 801a4e8:	e7f3      	b.n	801a4d2 <__assert_func+0x12>
 801a4ea:	bf00      	nop
 801a4ec:	20000034 	.word	0x20000034
 801a4f0:	0801ec3c 	.word	0x0801ec3c
 801a4f4:	0801ec49 	.word	0x0801ec49
 801a4f8:	0801ec77 	.word	0x0801ec77

0801a4fc <atexit>:
 801a4fc:	2300      	movs	r3, #0
 801a4fe:	4601      	mov	r1, r0
 801a500:	461a      	mov	r2, r3
 801a502:	4618      	mov	r0, r3
 801a504:	f000 bd78 	b.w	801aff8 <__register_exitproc>

0801a508 <__errno>:
 801a508:	4b01      	ldr	r3, [pc, #4]	; (801a510 <__errno+0x8>)
 801a50a:	6818      	ldr	r0, [r3, #0]
 801a50c:	4770      	bx	lr
 801a50e:	bf00      	nop
 801a510:	20000034 	.word	0x20000034

0801a514 <fiprintf>:
 801a514:	b40e      	push	{r1, r2, r3}
 801a516:	b503      	push	{r0, r1, lr}
 801a518:	4601      	mov	r1, r0
 801a51a:	ab03      	add	r3, sp, #12
 801a51c:	4805      	ldr	r0, [pc, #20]	; (801a534 <fiprintf+0x20>)
 801a51e:	f853 2b04 	ldr.w	r2, [r3], #4
 801a522:	6800      	ldr	r0, [r0, #0]
 801a524:	9301      	str	r3, [sp, #4]
 801a526:	f000 f95b 	bl	801a7e0 <_vfiprintf_r>
 801a52a:	b002      	add	sp, #8
 801a52c:	f85d eb04 	ldr.w	lr, [sp], #4
 801a530:	b003      	add	sp, #12
 801a532:	4770      	bx	lr
 801a534:	20000034 	.word	0x20000034

0801a538 <__libc_init_array>:
 801a538:	b570      	push	{r4, r5, r6, lr}
 801a53a:	4d0d      	ldr	r5, [pc, #52]	; (801a570 <__libc_init_array+0x38>)
 801a53c:	4c0d      	ldr	r4, [pc, #52]	; (801a574 <__libc_init_array+0x3c>)
 801a53e:	1b64      	subs	r4, r4, r5
 801a540:	10a4      	asrs	r4, r4, #2
 801a542:	2600      	movs	r6, #0
 801a544:	42a6      	cmp	r6, r4
 801a546:	d109      	bne.n	801a55c <__libc_init_array+0x24>
 801a548:	4d0b      	ldr	r5, [pc, #44]	; (801a578 <__libc_init_array+0x40>)
 801a54a:	4c0c      	ldr	r4, [pc, #48]	; (801a57c <__libc_init_array+0x44>)
 801a54c:	f001 fa3a 	bl	801b9c4 <_init>
 801a550:	1b64      	subs	r4, r4, r5
 801a552:	10a4      	asrs	r4, r4, #2
 801a554:	2600      	movs	r6, #0
 801a556:	42a6      	cmp	r6, r4
 801a558:	d105      	bne.n	801a566 <__libc_init_array+0x2e>
 801a55a:	bd70      	pop	{r4, r5, r6, pc}
 801a55c:	f855 3b04 	ldr.w	r3, [r5], #4
 801a560:	4798      	blx	r3
 801a562:	3601      	adds	r6, #1
 801a564:	e7ee      	b.n	801a544 <__libc_init_array+0xc>
 801a566:	f855 3b04 	ldr.w	r3, [r5], #4
 801a56a:	4798      	blx	r3
 801a56c:	3601      	adds	r6, #1
 801a56e:	e7f2      	b.n	801a556 <__libc_init_array+0x1e>
 801a570:	0801ed48 	.word	0x0801ed48
 801a574:	0801ed48 	.word	0x0801ed48
 801a578:	0801ed48 	.word	0x0801ed48
 801a57c:	0801ed60 	.word	0x0801ed60

0801a580 <malloc>:
 801a580:	4b02      	ldr	r3, [pc, #8]	; (801a58c <malloc+0xc>)
 801a582:	4601      	mov	r1, r0
 801a584:	6818      	ldr	r0, [r3, #0]
 801a586:	f000 b88d 	b.w	801a6a4 <_malloc_r>
 801a58a:	bf00      	nop
 801a58c:	20000034 	.word	0x20000034

0801a590 <free>:
 801a590:	4b02      	ldr	r3, [pc, #8]	; (801a59c <free+0xc>)
 801a592:	4601      	mov	r1, r0
 801a594:	6818      	ldr	r0, [r3, #0]
 801a596:	f000 b819 	b.w	801a5cc <_free_r>
 801a59a:	bf00      	nop
 801a59c:	20000034 	.word	0x20000034

0801a5a0 <memcpy>:
 801a5a0:	440a      	add	r2, r1
 801a5a2:	4291      	cmp	r1, r2
 801a5a4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801a5a8:	d100      	bne.n	801a5ac <memcpy+0xc>
 801a5aa:	4770      	bx	lr
 801a5ac:	b510      	push	{r4, lr}
 801a5ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a5b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a5b6:	4291      	cmp	r1, r2
 801a5b8:	d1f9      	bne.n	801a5ae <memcpy+0xe>
 801a5ba:	bd10      	pop	{r4, pc}

0801a5bc <memset>:
 801a5bc:	4402      	add	r2, r0
 801a5be:	4603      	mov	r3, r0
 801a5c0:	4293      	cmp	r3, r2
 801a5c2:	d100      	bne.n	801a5c6 <memset+0xa>
 801a5c4:	4770      	bx	lr
 801a5c6:	f803 1b01 	strb.w	r1, [r3], #1
 801a5ca:	e7f9      	b.n	801a5c0 <memset+0x4>

0801a5cc <_free_r>:
 801a5cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a5ce:	2900      	cmp	r1, #0
 801a5d0:	d044      	beq.n	801a65c <_free_r+0x90>
 801a5d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a5d6:	9001      	str	r0, [sp, #4]
 801a5d8:	2b00      	cmp	r3, #0
 801a5da:	f1a1 0404 	sub.w	r4, r1, #4
 801a5de:	bfb8      	it	lt
 801a5e0:	18e4      	addlt	r4, r4, r3
 801a5e2:	f000 ffa5 	bl	801b530 <__malloc_lock>
 801a5e6:	4a1e      	ldr	r2, [pc, #120]	; (801a660 <_free_r+0x94>)
 801a5e8:	9801      	ldr	r0, [sp, #4]
 801a5ea:	6813      	ldr	r3, [r2, #0]
 801a5ec:	b933      	cbnz	r3, 801a5fc <_free_r+0x30>
 801a5ee:	6063      	str	r3, [r4, #4]
 801a5f0:	6014      	str	r4, [r2, #0]
 801a5f2:	b003      	add	sp, #12
 801a5f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a5f8:	f000 bfa0 	b.w	801b53c <__malloc_unlock>
 801a5fc:	42a3      	cmp	r3, r4
 801a5fe:	d908      	bls.n	801a612 <_free_r+0x46>
 801a600:	6825      	ldr	r5, [r4, #0]
 801a602:	1961      	adds	r1, r4, r5
 801a604:	428b      	cmp	r3, r1
 801a606:	bf01      	itttt	eq
 801a608:	6819      	ldreq	r1, [r3, #0]
 801a60a:	685b      	ldreq	r3, [r3, #4]
 801a60c:	1949      	addeq	r1, r1, r5
 801a60e:	6021      	streq	r1, [r4, #0]
 801a610:	e7ed      	b.n	801a5ee <_free_r+0x22>
 801a612:	461a      	mov	r2, r3
 801a614:	685b      	ldr	r3, [r3, #4]
 801a616:	b10b      	cbz	r3, 801a61c <_free_r+0x50>
 801a618:	42a3      	cmp	r3, r4
 801a61a:	d9fa      	bls.n	801a612 <_free_r+0x46>
 801a61c:	6811      	ldr	r1, [r2, #0]
 801a61e:	1855      	adds	r5, r2, r1
 801a620:	42a5      	cmp	r5, r4
 801a622:	d10b      	bne.n	801a63c <_free_r+0x70>
 801a624:	6824      	ldr	r4, [r4, #0]
 801a626:	4421      	add	r1, r4
 801a628:	1854      	adds	r4, r2, r1
 801a62a:	42a3      	cmp	r3, r4
 801a62c:	6011      	str	r1, [r2, #0]
 801a62e:	d1e0      	bne.n	801a5f2 <_free_r+0x26>
 801a630:	681c      	ldr	r4, [r3, #0]
 801a632:	685b      	ldr	r3, [r3, #4]
 801a634:	6053      	str	r3, [r2, #4]
 801a636:	4421      	add	r1, r4
 801a638:	6011      	str	r1, [r2, #0]
 801a63a:	e7da      	b.n	801a5f2 <_free_r+0x26>
 801a63c:	d902      	bls.n	801a644 <_free_r+0x78>
 801a63e:	230c      	movs	r3, #12
 801a640:	6003      	str	r3, [r0, #0]
 801a642:	e7d6      	b.n	801a5f2 <_free_r+0x26>
 801a644:	6825      	ldr	r5, [r4, #0]
 801a646:	1961      	adds	r1, r4, r5
 801a648:	428b      	cmp	r3, r1
 801a64a:	bf04      	itt	eq
 801a64c:	6819      	ldreq	r1, [r3, #0]
 801a64e:	685b      	ldreq	r3, [r3, #4]
 801a650:	6063      	str	r3, [r4, #4]
 801a652:	bf04      	itt	eq
 801a654:	1949      	addeq	r1, r1, r5
 801a656:	6021      	streq	r1, [r4, #0]
 801a658:	6054      	str	r4, [r2, #4]
 801a65a:	e7ca      	b.n	801a5f2 <_free_r+0x26>
 801a65c:	b003      	add	sp, #12
 801a65e:	bd30      	pop	{r4, r5, pc}
 801a660:	20024430 	.word	0x20024430

0801a664 <sbrk_aligned>:
 801a664:	b570      	push	{r4, r5, r6, lr}
 801a666:	4e0e      	ldr	r6, [pc, #56]	; (801a6a0 <sbrk_aligned+0x3c>)
 801a668:	460c      	mov	r4, r1
 801a66a:	6831      	ldr	r1, [r6, #0]
 801a66c:	4605      	mov	r5, r0
 801a66e:	b911      	cbnz	r1, 801a676 <sbrk_aligned+0x12>
 801a670:	f000 fb7a 	bl	801ad68 <_sbrk_r>
 801a674:	6030      	str	r0, [r6, #0]
 801a676:	4621      	mov	r1, r4
 801a678:	4628      	mov	r0, r5
 801a67a:	f000 fb75 	bl	801ad68 <_sbrk_r>
 801a67e:	1c43      	adds	r3, r0, #1
 801a680:	d00a      	beq.n	801a698 <sbrk_aligned+0x34>
 801a682:	1cc4      	adds	r4, r0, #3
 801a684:	f024 0403 	bic.w	r4, r4, #3
 801a688:	42a0      	cmp	r0, r4
 801a68a:	d007      	beq.n	801a69c <sbrk_aligned+0x38>
 801a68c:	1a21      	subs	r1, r4, r0
 801a68e:	4628      	mov	r0, r5
 801a690:	f000 fb6a 	bl	801ad68 <_sbrk_r>
 801a694:	3001      	adds	r0, #1
 801a696:	d101      	bne.n	801a69c <sbrk_aligned+0x38>
 801a698:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801a69c:	4620      	mov	r0, r4
 801a69e:	bd70      	pop	{r4, r5, r6, pc}
 801a6a0:	20024434 	.word	0x20024434

0801a6a4 <_malloc_r>:
 801a6a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a6a8:	1ccd      	adds	r5, r1, #3
 801a6aa:	f025 0503 	bic.w	r5, r5, #3
 801a6ae:	3508      	adds	r5, #8
 801a6b0:	2d0c      	cmp	r5, #12
 801a6b2:	bf38      	it	cc
 801a6b4:	250c      	movcc	r5, #12
 801a6b6:	2d00      	cmp	r5, #0
 801a6b8:	4607      	mov	r7, r0
 801a6ba:	db01      	blt.n	801a6c0 <_malloc_r+0x1c>
 801a6bc:	42a9      	cmp	r1, r5
 801a6be:	d905      	bls.n	801a6cc <_malloc_r+0x28>
 801a6c0:	230c      	movs	r3, #12
 801a6c2:	603b      	str	r3, [r7, #0]
 801a6c4:	2600      	movs	r6, #0
 801a6c6:	4630      	mov	r0, r6
 801a6c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a6cc:	4e2e      	ldr	r6, [pc, #184]	; (801a788 <_malloc_r+0xe4>)
 801a6ce:	f000 ff2f 	bl	801b530 <__malloc_lock>
 801a6d2:	6833      	ldr	r3, [r6, #0]
 801a6d4:	461c      	mov	r4, r3
 801a6d6:	bb34      	cbnz	r4, 801a726 <_malloc_r+0x82>
 801a6d8:	4629      	mov	r1, r5
 801a6da:	4638      	mov	r0, r7
 801a6dc:	f7ff ffc2 	bl	801a664 <sbrk_aligned>
 801a6e0:	1c43      	adds	r3, r0, #1
 801a6e2:	4604      	mov	r4, r0
 801a6e4:	d14d      	bne.n	801a782 <_malloc_r+0xde>
 801a6e6:	6834      	ldr	r4, [r6, #0]
 801a6e8:	4626      	mov	r6, r4
 801a6ea:	2e00      	cmp	r6, #0
 801a6ec:	d140      	bne.n	801a770 <_malloc_r+0xcc>
 801a6ee:	6823      	ldr	r3, [r4, #0]
 801a6f0:	4631      	mov	r1, r6
 801a6f2:	4638      	mov	r0, r7
 801a6f4:	eb04 0803 	add.w	r8, r4, r3
 801a6f8:	f000 fb36 	bl	801ad68 <_sbrk_r>
 801a6fc:	4580      	cmp	r8, r0
 801a6fe:	d13a      	bne.n	801a776 <_malloc_r+0xd2>
 801a700:	6821      	ldr	r1, [r4, #0]
 801a702:	3503      	adds	r5, #3
 801a704:	1a6d      	subs	r5, r5, r1
 801a706:	f025 0503 	bic.w	r5, r5, #3
 801a70a:	3508      	adds	r5, #8
 801a70c:	2d0c      	cmp	r5, #12
 801a70e:	bf38      	it	cc
 801a710:	250c      	movcc	r5, #12
 801a712:	4629      	mov	r1, r5
 801a714:	4638      	mov	r0, r7
 801a716:	f7ff ffa5 	bl	801a664 <sbrk_aligned>
 801a71a:	3001      	adds	r0, #1
 801a71c:	d02b      	beq.n	801a776 <_malloc_r+0xd2>
 801a71e:	6823      	ldr	r3, [r4, #0]
 801a720:	442b      	add	r3, r5
 801a722:	6023      	str	r3, [r4, #0]
 801a724:	e00e      	b.n	801a744 <_malloc_r+0xa0>
 801a726:	6822      	ldr	r2, [r4, #0]
 801a728:	1b52      	subs	r2, r2, r5
 801a72a:	d41e      	bmi.n	801a76a <_malloc_r+0xc6>
 801a72c:	2a0b      	cmp	r2, #11
 801a72e:	d916      	bls.n	801a75e <_malloc_r+0xba>
 801a730:	1961      	adds	r1, r4, r5
 801a732:	42a3      	cmp	r3, r4
 801a734:	6025      	str	r5, [r4, #0]
 801a736:	bf18      	it	ne
 801a738:	6059      	strne	r1, [r3, #4]
 801a73a:	6863      	ldr	r3, [r4, #4]
 801a73c:	bf08      	it	eq
 801a73e:	6031      	streq	r1, [r6, #0]
 801a740:	5162      	str	r2, [r4, r5]
 801a742:	604b      	str	r3, [r1, #4]
 801a744:	4638      	mov	r0, r7
 801a746:	f104 060b 	add.w	r6, r4, #11
 801a74a:	f000 fef7 	bl	801b53c <__malloc_unlock>
 801a74e:	f026 0607 	bic.w	r6, r6, #7
 801a752:	1d23      	adds	r3, r4, #4
 801a754:	1af2      	subs	r2, r6, r3
 801a756:	d0b6      	beq.n	801a6c6 <_malloc_r+0x22>
 801a758:	1b9b      	subs	r3, r3, r6
 801a75a:	50a3      	str	r3, [r4, r2]
 801a75c:	e7b3      	b.n	801a6c6 <_malloc_r+0x22>
 801a75e:	6862      	ldr	r2, [r4, #4]
 801a760:	42a3      	cmp	r3, r4
 801a762:	bf0c      	ite	eq
 801a764:	6032      	streq	r2, [r6, #0]
 801a766:	605a      	strne	r2, [r3, #4]
 801a768:	e7ec      	b.n	801a744 <_malloc_r+0xa0>
 801a76a:	4623      	mov	r3, r4
 801a76c:	6864      	ldr	r4, [r4, #4]
 801a76e:	e7b2      	b.n	801a6d6 <_malloc_r+0x32>
 801a770:	4634      	mov	r4, r6
 801a772:	6876      	ldr	r6, [r6, #4]
 801a774:	e7b9      	b.n	801a6ea <_malloc_r+0x46>
 801a776:	230c      	movs	r3, #12
 801a778:	603b      	str	r3, [r7, #0]
 801a77a:	4638      	mov	r0, r7
 801a77c:	f000 fede 	bl	801b53c <__malloc_unlock>
 801a780:	e7a1      	b.n	801a6c6 <_malloc_r+0x22>
 801a782:	6025      	str	r5, [r4, #0]
 801a784:	e7de      	b.n	801a744 <_malloc_r+0xa0>
 801a786:	bf00      	nop
 801a788:	20024430 	.word	0x20024430

0801a78c <__sfputc_r>:
 801a78c:	6893      	ldr	r3, [r2, #8]
 801a78e:	3b01      	subs	r3, #1
 801a790:	2b00      	cmp	r3, #0
 801a792:	b410      	push	{r4}
 801a794:	6093      	str	r3, [r2, #8]
 801a796:	da08      	bge.n	801a7aa <__sfputc_r+0x1e>
 801a798:	6994      	ldr	r4, [r2, #24]
 801a79a:	42a3      	cmp	r3, r4
 801a79c:	db01      	blt.n	801a7a2 <__sfputc_r+0x16>
 801a79e:	290a      	cmp	r1, #10
 801a7a0:	d103      	bne.n	801a7aa <__sfputc_r+0x1e>
 801a7a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a7a6:	f000 bb67 	b.w	801ae78 <__swbuf_r>
 801a7aa:	6813      	ldr	r3, [r2, #0]
 801a7ac:	1c58      	adds	r0, r3, #1
 801a7ae:	6010      	str	r0, [r2, #0]
 801a7b0:	7019      	strb	r1, [r3, #0]
 801a7b2:	4608      	mov	r0, r1
 801a7b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a7b8:	4770      	bx	lr

0801a7ba <__sfputs_r>:
 801a7ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a7bc:	4606      	mov	r6, r0
 801a7be:	460f      	mov	r7, r1
 801a7c0:	4614      	mov	r4, r2
 801a7c2:	18d5      	adds	r5, r2, r3
 801a7c4:	42ac      	cmp	r4, r5
 801a7c6:	d101      	bne.n	801a7cc <__sfputs_r+0x12>
 801a7c8:	2000      	movs	r0, #0
 801a7ca:	e007      	b.n	801a7dc <__sfputs_r+0x22>
 801a7cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a7d0:	463a      	mov	r2, r7
 801a7d2:	4630      	mov	r0, r6
 801a7d4:	f7ff ffda 	bl	801a78c <__sfputc_r>
 801a7d8:	1c43      	adds	r3, r0, #1
 801a7da:	d1f3      	bne.n	801a7c4 <__sfputs_r+0xa>
 801a7dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801a7e0 <_vfiprintf_r>:
 801a7e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a7e4:	460d      	mov	r5, r1
 801a7e6:	b09d      	sub	sp, #116	; 0x74
 801a7e8:	4614      	mov	r4, r2
 801a7ea:	4698      	mov	r8, r3
 801a7ec:	4606      	mov	r6, r0
 801a7ee:	b118      	cbz	r0, 801a7f8 <_vfiprintf_r+0x18>
 801a7f0:	6983      	ldr	r3, [r0, #24]
 801a7f2:	b90b      	cbnz	r3, 801a7f8 <_vfiprintf_r+0x18>
 801a7f4:	f000 fd7c 	bl	801b2f0 <__sinit>
 801a7f8:	4b89      	ldr	r3, [pc, #548]	; (801aa20 <_vfiprintf_r+0x240>)
 801a7fa:	429d      	cmp	r5, r3
 801a7fc:	d11b      	bne.n	801a836 <_vfiprintf_r+0x56>
 801a7fe:	6875      	ldr	r5, [r6, #4]
 801a800:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a802:	07d9      	lsls	r1, r3, #31
 801a804:	d405      	bmi.n	801a812 <_vfiprintf_r+0x32>
 801a806:	89ab      	ldrh	r3, [r5, #12]
 801a808:	059a      	lsls	r2, r3, #22
 801a80a:	d402      	bmi.n	801a812 <_vfiprintf_r+0x32>
 801a80c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a80e:	f000 fe0d 	bl	801b42c <__retarget_lock_acquire_recursive>
 801a812:	89ab      	ldrh	r3, [r5, #12]
 801a814:	071b      	lsls	r3, r3, #28
 801a816:	d501      	bpl.n	801a81c <_vfiprintf_r+0x3c>
 801a818:	692b      	ldr	r3, [r5, #16]
 801a81a:	b9eb      	cbnz	r3, 801a858 <_vfiprintf_r+0x78>
 801a81c:	4629      	mov	r1, r5
 801a81e:	4630      	mov	r0, r6
 801a820:	f000 fb7c 	bl	801af1c <__swsetup_r>
 801a824:	b1c0      	cbz	r0, 801a858 <_vfiprintf_r+0x78>
 801a826:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a828:	07dc      	lsls	r4, r3, #31
 801a82a:	d50e      	bpl.n	801a84a <_vfiprintf_r+0x6a>
 801a82c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a830:	b01d      	add	sp, #116	; 0x74
 801a832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a836:	4b7b      	ldr	r3, [pc, #492]	; (801aa24 <_vfiprintf_r+0x244>)
 801a838:	429d      	cmp	r5, r3
 801a83a:	d101      	bne.n	801a840 <_vfiprintf_r+0x60>
 801a83c:	68b5      	ldr	r5, [r6, #8]
 801a83e:	e7df      	b.n	801a800 <_vfiprintf_r+0x20>
 801a840:	4b79      	ldr	r3, [pc, #484]	; (801aa28 <_vfiprintf_r+0x248>)
 801a842:	429d      	cmp	r5, r3
 801a844:	bf08      	it	eq
 801a846:	68f5      	ldreq	r5, [r6, #12]
 801a848:	e7da      	b.n	801a800 <_vfiprintf_r+0x20>
 801a84a:	89ab      	ldrh	r3, [r5, #12]
 801a84c:	0598      	lsls	r0, r3, #22
 801a84e:	d4ed      	bmi.n	801a82c <_vfiprintf_r+0x4c>
 801a850:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a852:	f000 fded 	bl	801b430 <__retarget_lock_release_recursive>
 801a856:	e7e9      	b.n	801a82c <_vfiprintf_r+0x4c>
 801a858:	2300      	movs	r3, #0
 801a85a:	9309      	str	r3, [sp, #36]	; 0x24
 801a85c:	2320      	movs	r3, #32
 801a85e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a862:	f8cd 800c 	str.w	r8, [sp, #12]
 801a866:	2330      	movs	r3, #48	; 0x30
 801a868:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801aa2c <_vfiprintf_r+0x24c>
 801a86c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a870:	f04f 0901 	mov.w	r9, #1
 801a874:	4623      	mov	r3, r4
 801a876:	469a      	mov	sl, r3
 801a878:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a87c:	b10a      	cbz	r2, 801a882 <_vfiprintf_r+0xa2>
 801a87e:	2a25      	cmp	r2, #37	; 0x25
 801a880:	d1f9      	bne.n	801a876 <_vfiprintf_r+0x96>
 801a882:	ebba 0b04 	subs.w	fp, sl, r4
 801a886:	d00b      	beq.n	801a8a0 <_vfiprintf_r+0xc0>
 801a888:	465b      	mov	r3, fp
 801a88a:	4622      	mov	r2, r4
 801a88c:	4629      	mov	r1, r5
 801a88e:	4630      	mov	r0, r6
 801a890:	f7ff ff93 	bl	801a7ba <__sfputs_r>
 801a894:	3001      	adds	r0, #1
 801a896:	f000 80aa 	beq.w	801a9ee <_vfiprintf_r+0x20e>
 801a89a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a89c:	445a      	add	r2, fp
 801a89e:	9209      	str	r2, [sp, #36]	; 0x24
 801a8a0:	f89a 3000 	ldrb.w	r3, [sl]
 801a8a4:	2b00      	cmp	r3, #0
 801a8a6:	f000 80a2 	beq.w	801a9ee <_vfiprintf_r+0x20e>
 801a8aa:	2300      	movs	r3, #0
 801a8ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801a8b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a8b4:	f10a 0a01 	add.w	sl, sl, #1
 801a8b8:	9304      	str	r3, [sp, #16]
 801a8ba:	9307      	str	r3, [sp, #28]
 801a8bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a8c0:	931a      	str	r3, [sp, #104]	; 0x68
 801a8c2:	4654      	mov	r4, sl
 801a8c4:	2205      	movs	r2, #5
 801a8c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a8ca:	4858      	ldr	r0, [pc, #352]	; (801aa2c <_vfiprintf_r+0x24c>)
 801a8cc:	f7e5 fcb8 	bl	8000240 <memchr>
 801a8d0:	9a04      	ldr	r2, [sp, #16]
 801a8d2:	b9d8      	cbnz	r0, 801a90c <_vfiprintf_r+0x12c>
 801a8d4:	06d1      	lsls	r1, r2, #27
 801a8d6:	bf44      	itt	mi
 801a8d8:	2320      	movmi	r3, #32
 801a8da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a8de:	0713      	lsls	r3, r2, #28
 801a8e0:	bf44      	itt	mi
 801a8e2:	232b      	movmi	r3, #43	; 0x2b
 801a8e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a8e8:	f89a 3000 	ldrb.w	r3, [sl]
 801a8ec:	2b2a      	cmp	r3, #42	; 0x2a
 801a8ee:	d015      	beq.n	801a91c <_vfiprintf_r+0x13c>
 801a8f0:	9a07      	ldr	r2, [sp, #28]
 801a8f2:	4654      	mov	r4, sl
 801a8f4:	2000      	movs	r0, #0
 801a8f6:	f04f 0c0a 	mov.w	ip, #10
 801a8fa:	4621      	mov	r1, r4
 801a8fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a900:	3b30      	subs	r3, #48	; 0x30
 801a902:	2b09      	cmp	r3, #9
 801a904:	d94e      	bls.n	801a9a4 <_vfiprintf_r+0x1c4>
 801a906:	b1b0      	cbz	r0, 801a936 <_vfiprintf_r+0x156>
 801a908:	9207      	str	r2, [sp, #28]
 801a90a:	e014      	b.n	801a936 <_vfiprintf_r+0x156>
 801a90c:	eba0 0308 	sub.w	r3, r0, r8
 801a910:	fa09 f303 	lsl.w	r3, r9, r3
 801a914:	4313      	orrs	r3, r2
 801a916:	9304      	str	r3, [sp, #16]
 801a918:	46a2      	mov	sl, r4
 801a91a:	e7d2      	b.n	801a8c2 <_vfiprintf_r+0xe2>
 801a91c:	9b03      	ldr	r3, [sp, #12]
 801a91e:	1d19      	adds	r1, r3, #4
 801a920:	681b      	ldr	r3, [r3, #0]
 801a922:	9103      	str	r1, [sp, #12]
 801a924:	2b00      	cmp	r3, #0
 801a926:	bfbb      	ittet	lt
 801a928:	425b      	neglt	r3, r3
 801a92a:	f042 0202 	orrlt.w	r2, r2, #2
 801a92e:	9307      	strge	r3, [sp, #28]
 801a930:	9307      	strlt	r3, [sp, #28]
 801a932:	bfb8      	it	lt
 801a934:	9204      	strlt	r2, [sp, #16]
 801a936:	7823      	ldrb	r3, [r4, #0]
 801a938:	2b2e      	cmp	r3, #46	; 0x2e
 801a93a:	d10c      	bne.n	801a956 <_vfiprintf_r+0x176>
 801a93c:	7863      	ldrb	r3, [r4, #1]
 801a93e:	2b2a      	cmp	r3, #42	; 0x2a
 801a940:	d135      	bne.n	801a9ae <_vfiprintf_r+0x1ce>
 801a942:	9b03      	ldr	r3, [sp, #12]
 801a944:	1d1a      	adds	r2, r3, #4
 801a946:	681b      	ldr	r3, [r3, #0]
 801a948:	9203      	str	r2, [sp, #12]
 801a94a:	2b00      	cmp	r3, #0
 801a94c:	bfb8      	it	lt
 801a94e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801a952:	3402      	adds	r4, #2
 801a954:	9305      	str	r3, [sp, #20]
 801a956:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801aa3c <_vfiprintf_r+0x25c>
 801a95a:	7821      	ldrb	r1, [r4, #0]
 801a95c:	2203      	movs	r2, #3
 801a95e:	4650      	mov	r0, sl
 801a960:	f7e5 fc6e 	bl	8000240 <memchr>
 801a964:	b140      	cbz	r0, 801a978 <_vfiprintf_r+0x198>
 801a966:	2340      	movs	r3, #64	; 0x40
 801a968:	eba0 000a 	sub.w	r0, r0, sl
 801a96c:	fa03 f000 	lsl.w	r0, r3, r0
 801a970:	9b04      	ldr	r3, [sp, #16]
 801a972:	4303      	orrs	r3, r0
 801a974:	3401      	adds	r4, #1
 801a976:	9304      	str	r3, [sp, #16]
 801a978:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a97c:	482c      	ldr	r0, [pc, #176]	; (801aa30 <_vfiprintf_r+0x250>)
 801a97e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a982:	2206      	movs	r2, #6
 801a984:	f7e5 fc5c 	bl	8000240 <memchr>
 801a988:	2800      	cmp	r0, #0
 801a98a:	d03f      	beq.n	801aa0c <_vfiprintf_r+0x22c>
 801a98c:	4b29      	ldr	r3, [pc, #164]	; (801aa34 <_vfiprintf_r+0x254>)
 801a98e:	bb1b      	cbnz	r3, 801a9d8 <_vfiprintf_r+0x1f8>
 801a990:	9b03      	ldr	r3, [sp, #12]
 801a992:	3307      	adds	r3, #7
 801a994:	f023 0307 	bic.w	r3, r3, #7
 801a998:	3308      	adds	r3, #8
 801a99a:	9303      	str	r3, [sp, #12]
 801a99c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a99e:	443b      	add	r3, r7
 801a9a0:	9309      	str	r3, [sp, #36]	; 0x24
 801a9a2:	e767      	b.n	801a874 <_vfiprintf_r+0x94>
 801a9a4:	fb0c 3202 	mla	r2, ip, r2, r3
 801a9a8:	460c      	mov	r4, r1
 801a9aa:	2001      	movs	r0, #1
 801a9ac:	e7a5      	b.n	801a8fa <_vfiprintf_r+0x11a>
 801a9ae:	2300      	movs	r3, #0
 801a9b0:	3401      	adds	r4, #1
 801a9b2:	9305      	str	r3, [sp, #20]
 801a9b4:	4619      	mov	r1, r3
 801a9b6:	f04f 0c0a 	mov.w	ip, #10
 801a9ba:	4620      	mov	r0, r4
 801a9bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a9c0:	3a30      	subs	r2, #48	; 0x30
 801a9c2:	2a09      	cmp	r2, #9
 801a9c4:	d903      	bls.n	801a9ce <_vfiprintf_r+0x1ee>
 801a9c6:	2b00      	cmp	r3, #0
 801a9c8:	d0c5      	beq.n	801a956 <_vfiprintf_r+0x176>
 801a9ca:	9105      	str	r1, [sp, #20]
 801a9cc:	e7c3      	b.n	801a956 <_vfiprintf_r+0x176>
 801a9ce:	fb0c 2101 	mla	r1, ip, r1, r2
 801a9d2:	4604      	mov	r4, r0
 801a9d4:	2301      	movs	r3, #1
 801a9d6:	e7f0      	b.n	801a9ba <_vfiprintf_r+0x1da>
 801a9d8:	ab03      	add	r3, sp, #12
 801a9da:	9300      	str	r3, [sp, #0]
 801a9dc:	462a      	mov	r2, r5
 801a9de:	4b16      	ldr	r3, [pc, #88]	; (801aa38 <_vfiprintf_r+0x258>)
 801a9e0:	a904      	add	r1, sp, #16
 801a9e2:	4630      	mov	r0, r6
 801a9e4:	f3af 8000 	nop.w
 801a9e8:	4607      	mov	r7, r0
 801a9ea:	1c78      	adds	r0, r7, #1
 801a9ec:	d1d6      	bne.n	801a99c <_vfiprintf_r+0x1bc>
 801a9ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a9f0:	07d9      	lsls	r1, r3, #31
 801a9f2:	d405      	bmi.n	801aa00 <_vfiprintf_r+0x220>
 801a9f4:	89ab      	ldrh	r3, [r5, #12]
 801a9f6:	059a      	lsls	r2, r3, #22
 801a9f8:	d402      	bmi.n	801aa00 <_vfiprintf_r+0x220>
 801a9fa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a9fc:	f000 fd18 	bl	801b430 <__retarget_lock_release_recursive>
 801aa00:	89ab      	ldrh	r3, [r5, #12]
 801aa02:	065b      	lsls	r3, r3, #25
 801aa04:	f53f af12 	bmi.w	801a82c <_vfiprintf_r+0x4c>
 801aa08:	9809      	ldr	r0, [sp, #36]	; 0x24
 801aa0a:	e711      	b.n	801a830 <_vfiprintf_r+0x50>
 801aa0c:	ab03      	add	r3, sp, #12
 801aa0e:	9300      	str	r3, [sp, #0]
 801aa10:	462a      	mov	r2, r5
 801aa12:	4b09      	ldr	r3, [pc, #36]	; (801aa38 <_vfiprintf_r+0x258>)
 801aa14:	a904      	add	r1, sp, #16
 801aa16:	4630      	mov	r0, r6
 801aa18:	f000 f880 	bl	801ab1c <_printf_i>
 801aa1c:	e7e4      	b.n	801a9e8 <_vfiprintf_r+0x208>
 801aa1e:	bf00      	nop
 801aa20:	0801ecd4 	.word	0x0801ecd4
 801aa24:	0801ecf4 	.word	0x0801ecf4
 801aa28:	0801ecb4 	.word	0x0801ecb4
 801aa2c:	0801ec7c 	.word	0x0801ec7c
 801aa30:	0801ec86 	.word	0x0801ec86
 801aa34:	00000000 	.word	0x00000000
 801aa38:	0801a7bb 	.word	0x0801a7bb
 801aa3c:	0801ec82 	.word	0x0801ec82

0801aa40 <_printf_common>:
 801aa40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801aa44:	4616      	mov	r6, r2
 801aa46:	4699      	mov	r9, r3
 801aa48:	688a      	ldr	r2, [r1, #8]
 801aa4a:	690b      	ldr	r3, [r1, #16]
 801aa4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801aa50:	4293      	cmp	r3, r2
 801aa52:	bfb8      	it	lt
 801aa54:	4613      	movlt	r3, r2
 801aa56:	6033      	str	r3, [r6, #0]
 801aa58:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801aa5c:	4607      	mov	r7, r0
 801aa5e:	460c      	mov	r4, r1
 801aa60:	b10a      	cbz	r2, 801aa66 <_printf_common+0x26>
 801aa62:	3301      	adds	r3, #1
 801aa64:	6033      	str	r3, [r6, #0]
 801aa66:	6823      	ldr	r3, [r4, #0]
 801aa68:	0699      	lsls	r1, r3, #26
 801aa6a:	bf42      	ittt	mi
 801aa6c:	6833      	ldrmi	r3, [r6, #0]
 801aa6e:	3302      	addmi	r3, #2
 801aa70:	6033      	strmi	r3, [r6, #0]
 801aa72:	6825      	ldr	r5, [r4, #0]
 801aa74:	f015 0506 	ands.w	r5, r5, #6
 801aa78:	d106      	bne.n	801aa88 <_printf_common+0x48>
 801aa7a:	f104 0a19 	add.w	sl, r4, #25
 801aa7e:	68e3      	ldr	r3, [r4, #12]
 801aa80:	6832      	ldr	r2, [r6, #0]
 801aa82:	1a9b      	subs	r3, r3, r2
 801aa84:	42ab      	cmp	r3, r5
 801aa86:	dc26      	bgt.n	801aad6 <_printf_common+0x96>
 801aa88:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801aa8c:	1e13      	subs	r3, r2, #0
 801aa8e:	6822      	ldr	r2, [r4, #0]
 801aa90:	bf18      	it	ne
 801aa92:	2301      	movne	r3, #1
 801aa94:	0692      	lsls	r2, r2, #26
 801aa96:	d42b      	bmi.n	801aaf0 <_printf_common+0xb0>
 801aa98:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801aa9c:	4649      	mov	r1, r9
 801aa9e:	4638      	mov	r0, r7
 801aaa0:	47c0      	blx	r8
 801aaa2:	3001      	adds	r0, #1
 801aaa4:	d01e      	beq.n	801aae4 <_printf_common+0xa4>
 801aaa6:	6823      	ldr	r3, [r4, #0]
 801aaa8:	68e5      	ldr	r5, [r4, #12]
 801aaaa:	6832      	ldr	r2, [r6, #0]
 801aaac:	f003 0306 	and.w	r3, r3, #6
 801aab0:	2b04      	cmp	r3, #4
 801aab2:	bf08      	it	eq
 801aab4:	1aad      	subeq	r5, r5, r2
 801aab6:	68a3      	ldr	r3, [r4, #8]
 801aab8:	6922      	ldr	r2, [r4, #16]
 801aaba:	bf0c      	ite	eq
 801aabc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801aac0:	2500      	movne	r5, #0
 801aac2:	4293      	cmp	r3, r2
 801aac4:	bfc4      	itt	gt
 801aac6:	1a9b      	subgt	r3, r3, r2
 801aac8:	18ed      	addgt	r5, r5, r3
 801aaca:	2600      	movs	r6, #0
 801aacc:	341a      	adds	r4, #26
 801aace:	42b5      	cmp	r5, r6
 801aad0:	d11a      	bne.n	801ab08 <_printf_common+0xc8>
 801aad2:	2000      	movs	r0, #0
 801aad4:	e008      	b.n	801aae8 <_printf_common+0xa8>
 801aad6:	2301      	movs	r3, #1
 801aad8:	4652      	mov	r2, sl
 801aada:	4649      	mov	r1, r9
 801aadc:	4638      	mov	r0, r7
 801aade:	47c0      	blx	r8
 801aae0:	3001      	adds	r0, #1
 801aae2:	d103      	bne.n	801aaec <_printf_common+0xac>
 801aae4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801aae8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801aaec:	3501      	adds	r5, #1
 801aaee:	e7c6      	b.n	801aa7e <_printf_common+0x3e>
 801aaf0:	18e1      	adds	r1, r4, r3
 801aaf2:	1c5a      	adds	r2, r3, #1
 801aaf4:	2030      	movs	r0, #48	; 0x30
 801aaf6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801aafa:	4422      	add	r2, r4
 801aafc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801ab00:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801ab04:	3302      	adds	r3, #2
 801ab06:	e7c7      	b.n	801aa98 <_printf_common+0x58>
 801ab08:	2301      	movs	r3, #1
 801ab0a:	4622      	mov	r2, r4
 801ab0c:	4649      	mov	r1, r9
 801ab0e:	4638      	mov	r0, r7
 801ab10:	47c0      	blx	r8
 801ab12:	3001      	adds	r0, #1
 801ab14:	d0e6      	beq.n	801aae4 <_printf_common+0xa4>
 801ab16:	3601      	adds	r6, #1
 801ab18:	e7d9      	b.n	801aace <_printf_common+0x8e>
	...

0801ab1c <_printf_i>:
 801ab1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801ab20:	7e0f      	ldrb	r7, [r1, #24]
 801ab22:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801ab24:	2f78      	cmp	r7, #120	; 0x78
 801ab26:	4691      	mov	r9, r2
 801ab28:	4680      	mov	r8, r0
 801ab2a:	460c      	mov	r4, r1
 801ab2c:	469a      	mov	sl, r3
 801ab2e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801ab32:	d807      	bhi.n	801ab44 <_printf_i+0x28>
 801ab34:	2f62      	cmp	r7, #98	; 0x62
 801ab36:	d80a      	bhi.n	801ab4e <_printf_i+0x32>
 801ab38:	2f00      	cmp	r7, #0
 801ab3a:	f000 80d8 	beq.w	801acee <_printf_i+0x1d2>
 801ab3e:	2f58      	cmp	r7, #88	; 0x58
 801ab40:	f000 80a3 	beq.w	801ac8a <_printf_i+0x16e>
 801ab44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801ab48:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801ab4c:	e03a      	b.n	801abc4 <_printf_i+0xa8>
 801ab4e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801ab52:	2b15      	cmp	r3, #21
 801ab54:	d8f6      	bhi.n	801ab44 <_printf_i+0x28>
 801ab56:	a101      	add	r1, pc, #4	; (adr r1, 801ab5c <_printf_i+0x40>)
 801ab58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801ab5c:	0801abb5 	.word	0x0801abb5
 801ab60:	0801abc9 	.word	0x0801abc9
 801ab64:	0801ab45 	.word	0x0801ab45
 801ab68:	0801ab45 	.word	0x0801ab45
 801ab6c:	0801ab45 	.word	0x0801ab45
 801ab70:	0801ab45 	.word	0x0801ab45
 801ab74:	0801abc9 	.word	0x0801abc9
 801ab78:	0801ab45 	.word	0x0801ab45
 801ab7c:	0801ab45 	.word	0x0801ab45
 801ab80:	0801ab45 	.word	0x0801ab45
 801ab84:	0801ab45 	.word	0x0801ab45
 801ab88:	0801acd5 	.word	0x0801acd5
 801ab8c:	0801abf9 	.word	0x0801abf9
 801ab90:	0801acb7 	.word	0x0801acb7
 801ab94:	0801ab45 	.word	0x0801ab45
 801ab98:	0801ab45 	.word	0x0801ab45
 801ab9c:	0801acf7 	.word	0x0801acf7
 801aba0:	0801ab45 	.word	0x0801ab45
 801aba4:	0801abf9 	.word	0x0801abf9
 801aba8:	0801ab45 	.word	0x0801ab45
 801abac:	0801ab45 	.word	0x0801ab45
 801abb0:	0801acbf 	.word	0x0801acbf
 801abb4:	682b      	ldr	r3, [r5, #0]
 801abb6:	1d1a      	adds	r2, r3, #4
 801abb8:	681b      	ldr	r3, [r3, #0]
 801abba:	602a      	str	r2, [r5, #0]
 801abbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801abc0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801abc4:	2301      	movs	r3, #1
 801abc6:	e0a3      	b.n	801ad10 <_printf_i+0x1f4>
 801abc8:	6820      	ldr	r0, [r4, #0]
 801abca:	6829      	ldr	r1, [r5, #0]
 801abcc:	0606      	lsls	r6, r0, #24
 801abce:	f101 0304 	add.w	r3, r1, #4
 801abd2:	d50a      	bpl.n	801abea <_printf_i+0xce>
 801abd4:	680e      	ldr	r6, [r1, #0]
 801abd6:	602b      	str	r3, [r5, #0]
 801abd8:	2e00      	cmp	r6, #0
 801abda:	da03      	bge.n	801abe4 <_printf_i+0xc8>
 801abdc:	232d      	movs	r3, #45	; 0x2d
 801abde:	4276      	negs	r6, r6
 801abe0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801abe4:	485e      	ldr	r0, [pc, #376]	; (801ad60 <_printf_i+0x244>)
 801abe6:	230a      	movs	r3, #10
 801abe8:	e019      	b.n	801ac1e <_printf_i+0x102>
 801abea:	680e      	ldr	r6, [r1, #0]
 801abec:	602b      	str	r3, [r5, #0]
 801abee:	f010 0f40 	tst.w	r0, #64	; 0x40
 801abf2:	bf18      	it	ne
 801abf4:	b236      	sxthne	r6, r6
 801abf6:	e7ef      	b.n	801abd8 <_printf_i+0xbc>
 801abf8:	682b      	ldr	r3, [r5, #0]
 801abfa:	6820      	ldr	r0, [r4, #0]
 801abfc:	1d19      	adds	r1, r3, #4
 801abfe:	6029      	str	r1, [r5, #0]
 801ac00:	0601      	lsls	r1, r0, #24
 801ac02:	d501      	bpl.n	801ac08 <_printf_i+0xec>
 801ac04:	681e      	ldr	r6, [r3, #0]
 801ac06:	e002      	b.n	801ac0e <_printf_i+0xf2>
 801ac08:	0646      	lsls	r6, r0, #25
 801ac0a:	d5fb      	bpl.n	801ac04 <_printf_i+0xe8>
 801ac0c:	881e      	ldrh	r6, [r3, #0]
 801ac0e:	4854      	ldr	r0, [pc, #336]	; (801ad60 <_printf_i+0x244>)
 801ac10:	2f6f      	cmp	r7, #111	; 0x6f
 801ac12:	bf0c      	ite	eq
 801ac14:	2308      	moveq	r3, #8
 801ac16:	230a      	movne	r3, #10
 801ac18:	2100      	movs	r1, #0
 801ac1a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801ac1e:	6865      	ldr	r5, [r4, #4]
 801ac20:	60a5      	str	r5, [r4, #8]
 801ac22:	2d00      	cmp	r5, #0
 801ac24:	bfa2      	ittt	ge
 801ac26:	6821      	ldrge	r1, [r4, #0]
 801ac28:	f021 0104 	bicge.w	r1, r1, #4
 801ac2c:	6021      	strge	r1, [r4, #0]
 801ac2e:	b90e      	cbnz	r6, 801ac34 <_printf_i+0x118>
 801ac30:	2d00      	cmp	r5, #0
 801ac32:	d04d      	beq.n	801acd0 <_printf_i+0x1b4>
 801ac34:	4615      	mov	r5, r2
 801ac36:	fbb6 f1f3 	udiv	r1, r6, r3
 801ac3a:	fb03 6711 	mls	r7, r3, r1, r6
 801ac3e:	5dc7      	ldrb	r7, [r0, r7]
 801ac40:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801ac44:	4637      	mov	r7, r6
 801ac46:	42bb      	cmp	r3, r7
 801ac48:	460e      	mov	r6, r1
 801ac4a:	d9f4      	bls.n	801ac36 <_printf_i+0x11a>
 801ac4c:	2b08      	cmp	r3, #8
 801ac4e:	d10b      	bne.n	801ac68 <_printf_i+0x14c>
 801ac50:	6823      	ldr	r3, [r4, #0]
 801ac52:	07de      	lsls	r6, r3, #31
 801ac54:	d508      	bpl.n	801ac68 <_printf_i+0x14c>
 801ac56:	6923      	ldr	r3, [r4, #16]
 801ac58:	6861      	ldr	r1, [r4, #4]
 801ac5a:	4299      	cmp	r1, r3
 801ac5c:	bfde      	ittt	le
 801ac5e:	2330      	movle	r3, #48	; 0x30
 801ac60:	f805 3c01 	strble.w	r3, [r5, #-1]
 801ac64:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801ac68:	1b52      	subs	r2, r2, r5
 801ac6a:	6122      	str	r2, [r4, #16]
 801ac6c:	f8cd a000 	str.w	sl, [sp]
 801ac70:	464b      	mov	r3, r9
 801ac72:	aa03      	add	r2, sp, #12
 801ac74:	4621      	mov	r1, r4
 801ac76:	4640      	mov	r0, r8
 801ac78:	f7ff fee2 	bl	801aa40 <_printf_common>
 801ac7c:	3001      	adds	r0, #1
 801ac7e:	d14c      	bne.n	801ad1a <_printf_i+0x1fe>
 801ac80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801ac84:	b004      	add	sp, #16
 801ac86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ac8a:	4835      	ldr	r0, [pc, #212]	; (801ad60 <_printf_i+0x244>)
 801ac8c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801ac90:	6829      	ldr	r1, [r5, #0]
 801ac92:	6823      	ldr	r3, [r4, #0]
 801ac94:	f851 6b04 	ldr.w	r6, [r1], #4
 801ac98:	6029      	str	r1, [r5, #0]
 801ac9a:	061d      	lsls	r5, r3, #24
 801ac9c:	d514      	bpl.n	801acc8 <_printf_i+0x1ac>
 801ac9e:	07df      	lsls	r7, r3, #31
 801aca0:	bf44      	itt	mi
 801aca2:	f043 0320 	orrmi.w	r3, r3, #32
 801aca6:	6023      	strmi	r3, [r4, #0]
 801aca8:	b91e      	cbnz	r6, 801acb2 <_printf_i+0x196>
 801acaa:	6823      	ldr	r3, [r4, #0]
 801acac:	f023 0320 	bic.w	r3, r3, #32
 801acb0:	6023      	str	r3, [r4, #0]
 801acb2:	2310      	movs	r3, #16
 801acb4:	e7b0      	b.n	801ac18 <_printf_i+0xfc>
 801acb6:	6823      	ldr	r3, [r4, #0]
 801acb8:	f043 0320 	orr.w	r3, r3, #32
 801acbc:	6023      	str	r3, [r4, #0]
 801acbe:	2378      	movs	r3, #120	; 0x78
 801acc0:	4828      	ldr	r0, [pc, #160]	; (801ad64 <_printf_i+0x248>)
 801acc2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801acc6:	e7e3      	b.n	801ac90 <_printf_i+0x174>
 801acc8:	0659      	lsls	r1, r3, #25
 801acca:	bf48      	it	mi
 801accc:	b2b6      	uxthmi	r6, r6
 801acce:	e7e6      	b.n	801ac9e <_printf_i+0x182>
 801acd0:	4615      	mov	r5, r2
 801acd2:	e7bb      	b.n	801ac4c <_printf_i+0x130>
 801acd4:	682b      	ldr	r3, [r5, #0]
 801acd6:	6826      	ldr	r6, [r4, #0]
 801acd8:	6961      	ldr	r1, [r4, #20]
 801acda:	1d18      	adds	r0, r3, #4
 801acdc:	6028      	str	r0, [r5, #0]
 801acde:	0635      	lsls	r5, r6, #24
 801ace0:	681b      	ldr	r3, [r3, #0]
 801ace2:	d501      	bpl.n	801ace8 <_printf_i+0x1cc>
 801ace4:	6019      	str	r1, [r3, #0]
 801ace6:	e002      	b.n	801acee <_printf_i+0x1d2>
 801ace8:	0670      	lsls	r0, r6, #25
 801acea:	d5fb      	bpl.n	801ace4 <_printf_i+0x1c8>
 801acec:	8019      	strh	r1, [r3, #0]
 801acee:	2300      	movs	r3, #0
 801acf0:	6123      	str	r3, [r4, #16]
 801acf2:	4615      	mov	r5, r2
 801acf4:	e7ba      	b.n	801ac6c <_printf_i+0x150>
 801acf6:	682b      	ldr	r3, [r5, #0]
 801acf8:	1d1a      	adds	r2, r3, #4
 801acfa:	602a      	str	r2, [r5, #0]
 801acfc:	681d      	ldr	r5, [r3, #0]
 801acfe:	6862      	ldr	r2, [r4, #4]
 801ad00:	2100      	movs	r1, #0
 801ad02:	4628      	mov	r0, r5
 801ad04:	f7e5 fa9c 	bl	8000240 <memchr>
 801ad08:	b108      	cbz	r0, 801ad0e <_printf_i+0x1f2>
 801ad0a:	1b40      	subs	r0, r0, r5
 801ad0c:	6060      	str	r0, [r4, #4]
 801ad0e:	6863      	ldr	r3, [r4, #4]
 801ad10:	6123      	str	r3, [r4, #16]
 801ad12:	2300      	movs	r3, #0
 801ad14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801ad18:	e7a8      	b.n	801ac6c <_printf_i+0x150>
 801ad1a:	6923      	ldr	r3, [r4, #16]
 801ad1c:	462a      	mov	r2, r5
 801ad1e:	4649      	mov	r1, r9
 801ad20:	4640      	mov	r0, r8
 801ad22:	47d0      	blx	sl
 801ad24:	3001      	adds	r0, #1
 801ad26:	d0ab      	beq.n	801ac80 <_printf_i+0x164>
 801ad28:	6823      	ldr	r3, [r4, #0]
 801ad2a:	079b      	lsls	r3, r3, #30
 801ad2c:	d413      	bmi.n	801ad56 <_printf_i+0x23a>
 801ad2e:	68e0      	ldr	r0, [r4, #12]
 801ad30:	9b03      	ldr	r3, [sp, #12]
 801ad32:	4298      	cmp	r0, r3
 801ad34:	bfb8      	it	lt
 801ad36:	4618      	movlt	r0, r3
 801ad38:	e7a4      	b.n	801ac84 <_printf_i+0x168>
 801ad3a:	2301      	movs	r3, #1
 801ad3c:	4632      	mov	r2, r6
 801ad3e:	4649      	mov	r1, r9
 801ad40:	4640      	mov	r0, r8
 801ad42:	47d0      	blx	sl
 801ad44:	3001      	adds	r0, #1
 801ad46:	d09b      	beq.n	801ac80 <_printf_i+0x164>
 801ad48:	3501      	adds	r5, #1
 801ad4a:	68e3      	ldr	r3, [r4, #12]
 801ad4c:	9903      	ldr	r1, [sp, #12]
 801ad4e:	1a5b      	subs	r3, r3, r1
 801ad50:	42ab      	cmp	r3, r5
 801ad52:	dcf2      	bgt.n	801ad3a <_printf_i+0x21e>
 801ad54:	e7eb      	b.n	801ad2e <_printf_i+0x212>
 801ad56:	2500      	movs	r5, #0
 801ad58:	f104 0619 	add.w	r6, r4, #25
 801ad5c:	e7f5      	b.n	801ad4a <_printf_i+0x22e>
 801ad5e:	bf00      	nop
 801ad60:	0801ec8d 	.word	0x0801ec8d
 801ad64:	0801ec9e 	.word	0x0801ec9e

0801ad68 <_sbrk_r>:
 801ad68:	b538      	push	{r3, r4, r5, lr}
 801ad6a:	4d06      	ldr	r5, [pc, #24]	; (801ad84 <_sbrk_r+0x1c>)
 801ad6c:	2300      	movs	r3, #0
 801ad6e:	4604      	mov	r4, r0
 801ad70:	4608      	mov	r0, r1
 801ad72:	602b      	str	r3, [r5, #0]
 801ad74:	f7e7 fc4c 	bl	8002610 <_sbrk>
 801ad78:	1c43      	adds	r3, r0, #1
 801ad7a:	d102      	bne.n	801ad82 <_sbrk_r+0x1a>
 801ad7c:	682b      	ldr	r3, [r5, #0]
 801ad7e:	b103      	cbz	r3, 801ad82 <_sbrk_r+0x1a>
 801ad80:	6023      	str	r3, [r4, #0]
 801ad82:	bd38      	pop	{r3, r4, r5, pc}
 801ad84:	200245d4 	.word	0x200245d4

0801ad88 <_raise_r>:
 801ad88:	291f      	cmp	r1, #31
 801ad8a:	b538      	push	{r3, r4, r5, lr}
 801ad8c:	4604      	mov	r4, r0
 801ad8e:	460d      	mov	r5, r1
 801ad90:	d904      	bls.n	801ad9c <_raise_r+0x14>
 801ad92:	2316      	movs	r3, #22
 801ad94:	6003      	str	r3, [r0, #0]
 801ad96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801ad9a:	bd38      	pop	{r3, r4, r5, pc}
 801ad9c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801ad9e:	b112      	cbz	r2, 801ada6 <_raise_r+0x1e>
 801ada0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801ada4:	b94b      	cbnz	r3, 801adba <_raise_r+0x32>
 801ada6:	4620      	mov	r0, r4
 801ada8:	f000 f830 	bl	801ae0c <_getpid_r>
 801adac:	462a      	mov	r2, r5
 801adae:	4601      	mov	r1, r0
 801adb0:	4620      	mov	r0, r4
 801adb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801adb6:	f000 b817 	b.w	801ade8 <_kill_r>
 801adba:	2b01      	cmp	r3, #1
 801adbc:	d00a      	beq.n	801add4 <_raise_r+0x4c>
 801adbe:	1c59      	adds	r1, r3, #1
 801adc0:	d103      	bne.n	801adca <_raise_r+0x42>
 801adc2:	2316      	movs	r3, #22
 801adc4:	6003      	str	r3, [r0, #0]
 801adc6:	2001      	movs	r0, #1
 801adc8:	e7e7      	b.n	801ad9a <_raise_r+0x12>
 801adca:	2400      	movs	r4, #0
 801adcc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801add0:	4628      	mov	r0, r5
 801add2:	4798      	blx	r3
 801add4:	2000      	movs	r0, #0
 801add6:	e7e0      	b.n	801ad9a <_raise_r+0x12>

0801add8 <raise>:
 801add8:	4b02      	ldr	r3, [pc, #8]	; (801ade4 <raise+0xc>)
 801adda:	4601      	mov	r1, r0
 801addc:	6818      	ldr	r0, [r3, #0]
 801adde:	f7ff bfd3 	b.w	801ad88 <_raise_r>
 801ade2:	bf00      	nop
 801ade4:	20000034 	.word	0x20000034

0801ade8 <_kill_r>:
 801ade8:	b538      	push	{r3, r4, r5, lr}
 801adea:	4d07      	ldr	r5, [pc, #28]	; (801ae08 <_kill_r+0x20>)
 801adec:	2300      	movs	r3, #0
 801adee:	4604      	mov	r4, r0
 801adf0:	4608      	mov	r0, r1
 801adf2:	4611      	mov	r1, r2
 801adf4:	602b      	str	r3, [r5, #0]
 801adf6:	f7e7 fb83 	bl	8002500 <_kill>
 801adfa:	1c43      	adds	r3, r0, #1
 801adfc:	d102      	bne.n	801ae04 <_kill_r+0x1c>
 801adfe:	682b      	ldr	r3, [r5, #0]
 801ae00:	b103      	cbz	r3, 801ae04 <_kill_r+0x1c>
 801ae02:	6023      	str	r3, [r4, #0]
 801ae04:	bd38      	pop	{r3, r4, r5, pc}
 801ae06:	bf00      	nop
 801ae08:	200245d4 	.word	0x200245d4

0801ae0c <_getpid_r>:
 801ae0c:	f7e7 bb70 	b.w	80024f0 <_getpid>

0801ae10 <strncmp>:
 801ae10:	b510      	push	{r4, lr}
 801ae12:	b17a      	cbz	r2, 801ae34 <strncmp+0x24>
 801ae14:	4603      	mov	r3, r0
 801ae16:	3901      	subs	r1, #1
 801ae18:	1884      	adds	r4, r0, r2
 801ae1a:	f813 0b01 	ldrb.w	r0, [r3], #1
 801ae1e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801ae22:	4290      	cmp	r0, r2
 801ae24:	d101      	bne.n	801ae2a <strncmp+0x1a>
 801ae26:	42a3      	cmp	r3, r4
 801ae28:	d101      	bne.n	801ae2e <strncmp+0x1e>
 801ae2a:	1a80      	subs	r0, r0, r2
 801ae2c:	bd10      	pop	{r4, pc}
 801ae2e:	2800      	cmp	r0, #0
 801ae30:	d1f3      	bne.n	801ae1a <strncmp+0xa>
 801ae32:	e7fa      	b.n	801ae2a <strncmp+0x1a>
 801ae34:	4610      	mov	r0, r2
 801ae36:	e7f9      	b.n	801ae2c <strncmp+0x1c>

0801ae38 <_vsiprintf_r>:
 801ae38:	b500      	push	{lr}
 801ae3a:	b09b      	sub	sp, #108	; 0x6c
 801ae3c:	9100      	str	r1, [sp, #0]
 801ae3e:	9104      	str	r1, [sp, #16]
 801ae40:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801ae44:	9105      	str	r1, [sp, #20]
 801ae46:	9102      	str	r1, [sp, #8]
 801ae48:	4905      	ldr	r1, [pc, #20]	; (801ae60 <_vsiprintf_r+0x28>)
 801ae4a:	9103      	str	r1, [sp, #12]
 801ae4c:	4669      	mov	r1, sp
 801ae4e:	f000 fc05 	bl	801b65c <_svfiprintf_r>
 801ae52:	9b00      	ldr	r3, [sp, #0]
 801ae54:	2200      	movs	r2, #0
 801ae56:	701a      	strb	r2, [r3, #0]
 801ae58:	b01b      	add	sp, #108	; 0x6c
 801ae5a:	f85d fb04 	ldr.w	pc, [sp], #4
 801ae5e:	bf00      	nop
 801ae60:	ffff0208 	.word	0xffff0208

0801ae64 <vsiprintf>:
 801ae64:	4613      	mov	r3, r2
 801ae66:	460a      	mov	r2, r1
 801ae68:	4601      	mov	r1, r0
 801ae6a:	4802      	ldr	r0, [pc, #8]	; (801ae74 <vsiprintf+0x10>)
 801ae6c:	6800      	ldr	r0, [r0, #0]
 801ae6e:	f7ff bfe3 	b.w	801ae38 <_vsiprintf_r>
 801ae72:	bf00      	nop
 801ae74:	20000034 	.word	0x20000034

0801ae78 <__swbuf_r>:
 801ae78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ae7a:	460e      	mov	r6, r1
 801ae7c:	4614      	mov	r4, r2
 801ae7e:	4605      	mov	r5, r0
 801ae80:	b118      	cbz	r0, 801ae8a <__swbuf_r+0x12>
 801ae82:	6983      	ldr	r3, [r0, #24]
 801ae84:	b90b      	cbnz	r3, 801ae8a <__swbuf_r+0x12>
 801ae86:	f000 fa33 	bl	801b2f0 <__sinit>
 801ae8a:	4b21      	ldr	r3, [pc, #132]	; (801af10 <__swbuf_r+0x98>)
 801ae8c:	429c      	cmp	r4, r3
 801ae8e:	d12b      	bne.n	801aee8 <__swbuf_r+0x70>
 801ae90:	686c      	ldr	r4, [r5, #4]
 801ae92:	69a3      	ldr	r3, [r4, #24]
 801ae94:	60a3      	str	r3, [r4, #8]
 801ae96:	89a3      	ldrh	r3, [r4, #12]
 801ae98:	071a      	lsls	r2, r3, #28
 801ae9a:	d52f      	bpl.n	801aefc <__swbuf_r+0x84>
 801ae9c:	6923      	ldr	r3, [r4, #16]
 801ae9e:	b36b      	cbz	r3, 801aefc <__swbuf_r+0x84>
 801aea0:	6923      	ldr	r3, [r4, #16]
 801aea2:	6820      	ldr	r0, [r4, #0]
 801aea4:	1ac0      	subs	r0, r0, r3
 801aea6:	6963      	ldr	r3, [r4, #20]
 801aea8:	b2f6      	uxtb	r6, r6
 801aeaa:	4283      	cmp	r3, r0
 801aeac:	4637      	mov	r7, r6
 801aeae:	dc04      	bgt.n	801aeba <__swbuf_r+0x42>
 801aeb0:	4621      	mov	r1, r4
 801aeb2:	4628      	mov	r0, r5
 801aeb4:	f000 f988 	bl	801b1c8 <_fflush_r>
 801aeb8:	bb30      	cbnz	r0, 801af08 <__swbuf_r+0x90>
 801aeba:	68a3      	ldr	r3, [r4, #8]
 801aebc:	3b01      	subs	r3, #1
 801aebe:	60a3      	str	r3, [r4, #8]
 801aec0:	6823      	ldr	r3, [r4, #0]
 801aec2:	1c5a      	adds	r2, r3, #1
 801aec4:	6022      	str	r2, [r4, #0]
 801aec6:	701e      	strb	r6, [r3, #0]
 801aec8:	6963      	ldr	r3, [r4, #20]
 801aeca:	3001      	adds	r0, #1
 801aecc:	4283      	cmp	r3, r0
 801aece:	d004      	beq.n	801aeda <__swbuf_r+0x62>
 801aed0:	89a3      	ldrh	r3, [r4, #12]
 801aed2:	07db      	lsls	r3, r3, #31
 801aed4:	d506      	bpl.n	801aee4 <__swbuf_r+0x6c>
 801aed6:	2e0a      	cmp	r6, #10
 801aed8:	d104      	bne.n	801aee4 <__swbuf_r+0x6c>
 801aeda:	4621      	mov	r1, r4
 801aedc:	4628      	mov	r0, r5
 801aede:	f000 f973 	bl	801b1c8 <_fflush_r>
 801aee2:	b988      	cbnz	r0, 801af08 <__swbuf_r+0x90>
 801aee4:	4638      	mov	r0, r7
 801aee6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801aee8:	4b0a      	ldr	r3, [pc, #40]	; (801af14 <__swbuf_r+0x9c>)
 801aeea:	429c      	cmp	r4, r3
 801aeec:	d101      	bne.n	801aef2 <__swbuf_r+0x7a>
 801aeee:	68ac      	ldr	r4, [r5, #8]
 801aef0:	e7cf      	b.n	801ae92 <__swbuf_r+0x1a>
 801aef2:	4b09      	ldr	r3, [pc, #36]	; (801af18 <__swbuf_r+0xa0>)
 801aef4:	429c      	cmp	r4, r3
 801aef6:	bf08      	it	eq
 801aef8:	68ec      	ldreq	r4, [r5, #12]
 801aefa:	e7ca      	b.n	801ae92 <__swbuf_r+0x1a>
 801aefc:	4621      	mov	r1, r4
 801aefe:	4628      	mov	r0, r5
 801af00:	f000 f80c 	bl	801af1c <__swsetup_r>
 801af04:	2800      	cmp	r0, #0
 801af06:	d0cb      	beq.n	801aea0 <__swbuf_r+0x28>
 801af08:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801af0c:	e7ea      	b.n	801aee4 <__swbuf_r+0x6c>
 801af0e:	bf00      	nop
 801af10:	0801ecd4 	.word	0x0801ecd4
 801af14:	0801ecf4 	.word	0x0801ecf4
 801af18:	0801ecb4 	.word	0x0801ecb4

0801af1c <__swsetup_r>:
 801af1c:	4b32      	ldr	r3, [pc, #200]	; (801afe8 <__swsetup_r+0xcc>)
 801af1e:	b570      	push	{r4, r5, r6, lr}
 801af20:	681d      	ldr	r5, [r3, #0]
 801af22:	4606      	mov	r6, r0
 801af24:	460c      	mov	r4, r1
 801af26:	b125      	cbz	r5, 801af32 <__swsetup_r+0x16>
 801af28:	69ab      	ldr	r3, [r5, #24]
 801af2a:	b913      	cbnz	r3, 801af32 <__swsetup_r+0x16>
 801af2c:	4628      	mov	r0, r5
 801af2e:	f000 f9df 	bl	801b2f0 <__sinit>
 801af32:	4b2e      	ldr	r3, [pc, #184]	; (801afec <__swsetup_r+0xd0>)
 801af34:	429c      	cmp	r4, r3
 801af36:	d10f      	bne.n	801af58 <__swsetup_r+0x3c>
 801af38:	686c      	ldr	r4, [r5, #4]
 801af3a:	89a3      	ldrh	r3, [r4, #12]
 801af3c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801af40:	0719      	lsls	r1, r3, #28
 801af42:	d42c      	bmi.n	801af9e <__swsetup_r+0x82>
 801af44:	06dd      	lsls	r5, r3, #27
 801af46:	d411      	bmi.n	801af6c <__swsetup_r+0x50>
 801af48:	2309      	movs	r3, #9
 801af4a:	6033      	str	r3, [r6, #0]
 801af4c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801af50:	81a3      	strh	r3, [r4, #12]
 801af52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801af56:	e03e      	b.n	801afd6 <__swsetup_r+0xba>
 801af58:	4b25      	ldr	r3, [pc, #148]	; (801aff0 <__swsetup_r+0xd4>)
 801af5a:	429c      	cmp	r4, r3
 801af5c:	d101      	bne.n	801af62 <__swsetup_r+0x46>
 801af5e:	68ac      	ldr	r4, [r5, #8]
 801af60:	e7eb      	b.n	801af3a <__swsetup_r+0x1e>
 801af62:	4b24      	ldr	r3, [pc, #144]	; (801aff4 <__swsetup_r+0xd8>)
 801af64:	429c      	cmp	r4, r3
 801af66:	bf08      	it	eq
 801af68:	68ec      	ldreq	r4, [r5, #12]
 801af6a:	e7e6      	b.n	801af3a <__swsetup_r+0x1e>
 801af6c:	0758      	lsls	r0, r3, #29
 801af6e:	d512      	bpl.n	801af96 <__swsetup_r+0x7a>
 801af70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801af72:	b141      	cbz	r1, 801af86 <__swsetup_r+0x6a>
 801af74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801af78:	4299      	cmp	r1, r3
 801af7a:	d002      	beq.n	801af82 <__swsetup_r+0x66>
 801af7c:	4630      	mov	r0, r6
 801af7e:	f7ff fb25 	bl	801a5cc <_free_r>
 801af82:	2300      	movs	r3, #0
 801af84:	6363      	str	r3, [r4, #52]	; 0x34
 801af86:	89a3      	ldrh	r3, [r4, #12]
 801af88:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801af8c:	81a3      	strh	r3, [r4, #12]
 801af8e:	2300      	movs	r3, #0
 801af90:	6063      	str	r3, [r4, #4]
 801af92:	6923      	ldr	r3, [r4, #16]
 801af94:	6023      	str	r3, [r4, #0]
 801af96:	89a3      	ldrh	r3, [r4, #12]
 801af98:	f043 0308 	orr.w	r3, r3, #8
 801af9c:	81a3      	strh	r3, [r4, #12]
 801af9e:	6923      	ldr	r3, [r4, #16]
 801afa0:	b94b      	cbnz	r3, 801afb6 <__swsetup_r+0x9a>
 801afa2:	89a3      	ldrh	r3, [r4, #12]
 801afa4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801afa8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801afac:	d003      	beq.n	801afb6 <__swsetup_r+0x9a>
 801afae:	4621      	mov	r1, r4
 801afb0:	4630      	mov	r0, r6
 801afb2:	f000 fa63 	bl	801b47c <__smakebuf_r>
 801afb6:	89a0      	ldrh	r0, [r4, #12]
 801afb8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801afbc:	f010 0301 	ands.w	r3, r0, #1
 801afc0:	d00a      	beq.n	801afd8 <__swsetup_r+0xbc>
 801afc2:	2300      	movs	r3, #0
 801afc4:	60a3      	str	r3, [r4, #8]
 801afc6:	6963      	ldr	r3, [r4, #20]
 801afc8:	425b      	negs	r3, r3
 801afca:	61a3      	str	r3, [r4, #24]
 801afcc:	6923      	ldr	r3, [r4, #16]
 801afce:	b943      	cbnz	r3, 801afe2 <__swsetup_r+0xc6>
 801afd0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801afd4:	d1ba      	bne.n	801af4c <__swsetup_r+0x30>
 801afd6:	bd70      	pop	{r4, r5, r6, pc}
 801afd8:	0781      	lsls	r1, r0, #30
 801afda:	bf58      	it	pl
 801afdc:	6963      	ldrpl	r3, [r4, #20]
 801afde:	60a3      	str	r3, [r4, #8]
 801afe0:	e7f4      	b.n	801afcc <__swsetup_r+0xb0>
 801afe2:	2000      	movs	r0, #0
 801afe4:	e7f7      	b.n	801afd6 <__swsetup_r+0xba>
 801afe6:	bf00      	nop
 801afe8:	20000034 	.word	0x20000034
 801afec:	0801ecd4 	.word	0x0801ecd4
 801aff0:	0801ecf4 	.word	0x0801ecf4
 801aff4:	0801ecb4 	.word	0x0801ecb4

0801aff8 <__register_exitproc>:
 801aff8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801affc:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 801b0b8 <__register_exitproc+0xc0>
 801b000:	4606      	mov	r6, r0
 801b002:	f8d8 0000 	ldr.w	r0, [r8]
 801b006:	461f      	mov	r7, r3
 801b008:	460d      	mov	r5, r1
 801b00a:	4691      	mov	r9, r2
 801b00c:	f000 fa0e 	bl	801b42c <__retarget_lock_acquire_recursive>
 801b010:	4b25      	ldr	r3, [pc, #148]	; (801b0a8 <__register_exitproc+0xb0>)
 801b012:	681c      	ldr	r4, [r3, #0]
 801b014:	b934      	cbnz	r4, 801b024 <__register_exitproc+0x2c>
 801b016:	4c25      	ldr	r4, [pc, #148]	; (801b0ac <__register_exitproc+0xb4>)
 801b018:	601c      	str	r4, [r3, #0]
 801b01a:	4b25      	ldr	r3, [pc, #148]	; (801b0b0 <__register_exitproc+0xb8>)
 801b01c:	b113      	cbz	r3, 801b024 <__register_exitproc+0x2c>
 801b01e:	681b      	ldr	r3, [r3, #0]
 801b020:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 801b024:	6863      	ldr	r3, [r4, #4]
 801b026:	2b1f      	cmp	r3, #31
 801b028:	dd07      	ble.n	801b03a <__register_exitproc+0x42>
 801b02a:	f8d8 0000 	ldr.w	r0, [r8]
 801b02e:	f000 f9ff 	bl	801b430 <__retarget_lock_release_recursive>
 801b032:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b036:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b03a:	b34e      	cbz	r6, 801b090 <__register_exitproc+0x98>
 801b03c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 801b040:	b988      	cbnz	r0, 801b066 <__register_exitproc+0x6e>
 801b042:	4b1c      	ldr	r3, [pc, #112]	; (801b0b4 <__register_exitproc+0xbc>)
 801b044:	b923      	cbnz	r3, 801b050 <__register_exitproc+0x58>
 801b046:	f8d8 0000 	ldr.w	r0, [r8]
 801b04a:	f000 f9f0 	bl	801b42e <__retarget_lock_release>
 801b04e:	e7f0      	b.n	801b032 <__register_exitproc+0x3a>
 801b050:	f44f 7084 	mov.w	r0, #264	; 0x108
 801b054:	f7ff fa94 	bl	801a580 <malloc>
 801b058:	2800      	cmp	r0, #0
 801b05a:	d0f4      	beq.n	801b046 <__register_exitproc+0x4e>
 801b05c:	2300      	movs	r3, #0
 801b05e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 801b062:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 801b066:	6863      	ldr	r3, [r4, #4]
 801b068:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 801b06c:	2201      	movs	r2, #1
 801b06e:	409a      	lsls	r2, r3
 801b070:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 801b074:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 801b078:	4313      	orrs	r3, r2
 801b07a:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 801b07e:	2e02      	cmp	r6, #2
 801b080:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 801b084:	bf02      	ittt	eq
 801b086:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 801b08a:	4313      	orreq	r3, r2
 801b08c:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 801b090:	6863      	ldr	r3, [r4, #4]
 801b092:	f8d8 0000 	ldr.w	r0, [r8]
 801b096:	1c5a      	adds	r2, r3, #1
 801b098:	3302      	adds	r3, #2
 801b09a:	6062      	str	r2, [r4, #4]
 801b09c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 801b0a0:	f000 f9c6 	bl	801b430 <__retarget_lock_release_recursive>
 801b0a4:	2000      	movs	r0, #0
 801b0a6:	e7c6      	b.n	801b036 <__register_exitproc+0x3e>
 801b0a8:	200245cc 	.word	0x200245cc
 801b0ac:	20024540 	.word	0x20024540
 801b0b0:	0801ecb0 	.word	0x0801ecb0
 801b0b4:	0801a581 	.word	0x0801a581
 801b0b8:	20000098 	.word	0x20000098

0801b0bc <__sflush_r>:
 801b0bc:	898a      	ldrh	r2, [r1, #12]
 801b0be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b0c2:	4605      	mov	r5, r0
 801b0c4:	0710      	lsls	r0, r2, #28
 801b0c6:	460c      	mov	r4, r1
 801b0c8:	d458      	bmi.n	801b17c <__sflush_r+0xc0>
 801b0ca:	684b      	ldr	r3, [r1, #4]
 801b0cc:	2b00      	cmp	r3, #0
 801b0ce:	dc05      	bgt.n	801b0dc <__sflush_r+0x20>
 801b0d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801b0d2:	2b00      	cmp	r3, #0
 801b0d4:	dc02      	bgt.n	801b0dc <__sflush_r+0x20>
 801b0d6:	2000      	movs	r0, #0
 801b0d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b0dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801b0de:	2e00      	cmp	r6, #0
 801b0e0:	d0f9      	beq.n	801b0d6 <__sflush_r+0x1a>
 801b0e2:	2300      	movs	r3, #0
 801b0e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801b0e8:	682f      	ldr	r7, [r5, #0]
 801b0ea:	602b      	str	r3, [r5, #0]
 801b0ec:	d032      	beq.n	801b154 <__sflush_r+0x98>
 801b0ee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801b0f0:	89a3      	ldrh	r3, [r4, #12]
 801b0f2:	075a      	lsls	r2, r3, #29
 801b0f4:	d505      	bpl.n	801b102 <__sflush_r+0x46>
 801b0f6:	6863      	ldr	r3, [r4, #4]
 801b0f8:	1ac0      	subs	r0, r0, r3
 801b0fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801b0fc:	b10b      	cbz	r3, 801b102 <__sflush_r+0x46>
 801b0fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801b100:	1ac0      	subs	r0, r0, r3
 801b102:	2300      	movs	r3, #0
 801b104:	4602      	mov	r2, r0
 801b106:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801b108:	6a21      	ldr	r1, [r4, #32]
 801b10a:	4628      	mov	r0, r5
 801b10c:	47b0      	blx	r6
 801b10e:	1c43      	adds	r3, r0, #1
 801b110:	89a3      	ldrh	r3, [r4, #12]
 801b112:	d106      	bne.n	801b122 <__sflush_r+0x66>
 801b114:	6829      	ldr	r1, [r5, #0]
 801b116:	291d      	cmp	r1, #29
 801b118:	d82c      	bhi.n	801b174 <__sflush_r+0xb8>
 801b11a:	4a2a      	ldr	r2, [pc, #168]	; (801b1c4 <__sflush_r+0x108>)
 801b11c:	40ca      	lsrs	r2, r1
 801b11e:	07d6      	lsls	r6, r2, #31
 801b120:	d528      	bpl.n	801b174 <__sflush_r+0xb8>
 801b122:	2200      	movs	r2, #0
 801b124:	6062      	str	r2, [r4, #4]
 801b126:	04d9      	lsls	r1, r3, #19
 801b128:	6922      	ldr	r2, [r4, #16]
 801b12a:	6022      	str	r2, [r4, #0]
 801b12c:	d504      	bpl.n	801b138 <__sflush_r+0x7c>
 801b12e:	1c42      	adds	r2, r0, #1
 801b130:	d101      	bne.n	801b136 <__sflush_r+0x7a>
 801b132:	682b      	ldr	r3, [r5, #0]
 801b134:	b903      	cbnz	r3, 801b138 <__sflush_r+0x7c>
 801b136:	6560      	str	r0, [r4, #84]	; 0x54
 801b138:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b13a:	602f      	str	r7, [r5, #0]
 801b13c:	2900      	cmp	r1, #0
 801b13e:	d0ca      	beq.n	801b0d6 <__sflush_r+0x1a>
 801b140:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b144:	4299      	cmp	r1, r3
 801b146:	d002      	beq.n	801b14e <__sflush_r+0x92>
 801b148:	4628      	mov	r0, r5
 801b14a:	f7ff fa3f 	bl	801a5cc <_free_r>
 801b14e:	2000      	movs	r0, #0
 801b150:	6360      	str	r0, [r4, #52]	; 0x34
 801b152:	e7c1      	b.n	801b0d8 <__sflush_r+0x1c>
 801b154:	6a21      	ldr	r1, [r4, #32]
 801b156:	2301      	movs	r3, #1
 801b158:	4628      	mov	r0, r5
 801b15a:	47b0      	blx	r6
 801b15c:	1c41      	adds	r1, r0, #1
 801b15e:	d1c7      	bne.n	801b0f0 <__sflush_r+0x34>
 801b160:	682b      	ldr	r3, [r5, #0]
 801b162:	2b00      	cmp	r3, #0
 801b164:	d0c4      	beq.n	801b0f0 <__sflush_r+0x34>
 801b166:	2b1d      	cmp	r3, #29
 801b168:	d001      	beq.n	801b16e <__sflush_r+0xb2>
 801b16a:	2b16      	cmp	r3, #22
 801b16c:	d101      	bne.n	801b172 <__sflush_r+0xb6>
 801b16e:	602f      	str	r7, [r5, #0]
 801b170:	e7b1      	b.n	801b0d6 <__sflush_r+0x1a>
 801b172:	89a3      	ldrh	r3, [r4, #12]
 801b174:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b178:	81a3      	strh	r3, [r4, #12]
 801b17a:	e7ad      	b.n	801b0d8 <__sflush_r+0x1c>
 801b17c:	690f      	ldr	r7, [r1, #16]
 801b17e:	2f00      	cmp	r7, #0
 801b180:	d0a9      	beq.n	801b0d6 <__sflush_r+0x1a>
 801b182:	0793      	lsls	r3, r2, #30
 801b184:	680e      	ldr	r6, [r1, #0]
 801b186:	bf08      	it	eq
 801b188:	694b      	ldreq	r3, [r1, #20]
 801b18a:	600f      	str	r7, [r1, #0]
 801b18c:	bf18      	it	ne
 801b18e:	2300      	movne	r3, #0
 801b190:	eba6 0807 	sub.w	r8, r6, r7
 801b194:	608b      	str	r3, [r1, #8]
 801b196:	f1b8 0f00 	cmp.w	r8, #0
 801b19a:	dd9c      	ble.n	801b0d6 <__sflush_r+0x1a>
 801b19c:	6a21      	ldr	r1, [r4, #32]
 801b19e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801b1a0:	4643      	mov	r3, r8
 801b1a2:	463a      	mov	r2, r7
 801b1a4:	4628      	mov	r0, r5
 801b1a6:	47b0      	blx	r6
 801b1a8:	2800      	cmp	r0, #0
 801b1aa:	dc06      	bgt.n	801b1ba <__sflush_r+0xfe>
 801b1ac:	89a3      	ldrh	r3, [r4, #12]
 801b1ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b1b2:	81a3      	strh	r3, [r4, #12]
 801b1b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b1b8:	e78e      	b.n	801b0d8 <__sflush_r+0x1c>
 801b1ba:	4407      	add	r7, r0
 801b1bc:	eba8 0800 	sub.w	r8, r8, r0
 801b1c0:	e7e9      	b.n	801b196 <__sflush_r+0xda>
 801b1c2:	bf00      	nop
 801b1c4:	20400001 	.word	0x20400001

0801b1c8 <_fflush_r>:
 801b1c8:	b538      	push	{r3, r4, r5, lr}
 801b1ca:	690b      	ldr	r3, [r1, #16]
 801b1cc:	4605      	mov	r5, r0
 801b1ce:	460c      	mov	r4, r1
 801b1d0:	b913      	cbnz	r3, 801b1d8 <_fflush_r+0x10>
 801b1d2:	2500      	movs	r5, #0
 801b1d4:	4628      	mov	r0, r5
 801b1d6:	bd38      	pop	{r3, r4, r5, pc}
 801b1d8:	b118      	cbz	r0, 801b1e2 <_fflush_r+0x1a>
 801b1da:	6983      	ldr	r3, [r0, #24]
 801b1dc:	b90b      	cbnz	r3, 801b1e2 <_fflush_r+0x1a>
 801b1de:	f000 f887 	bl	801b2f0 <__sinit>
 801b1e2:	4b14      	ldr	r3, [pc, #80]	; (801b234 <_fflush_r+0x6c>)
 801b1e4:	429c      	cmp	r4, r3
 801b1e6:	d11b      	bne.n	801b220 <_fflush_r+0x58>
 801b1e8:	686c      	ldr	r4, [r5, #4]
 801b1ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b1ee:	2b00      	cmp	r3, #0
 801b1f0:	d0ef      	beq.n	801b1d2 <_fflush_r+0xa>
 801b1f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801b1f4:	07d0      	lsls	r0, r2, #31
 801b1f6:	d404      	bmi.n	801b202 <_fflush_r+0x3a>
 801b1f8:	0599      	lsls	r1, r3, #22
 801b1fa:	d402      	bmi.n	801b202 <_fflush_r+0x3a>
 801b1fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b1fe:	f000 f915 	bl	801b42c <__retarget_lock_acquire_recursive>
 801b202:	4628      	mov	r0, r5
 801b204:	4621      	mov	r1, r4
 801b206:	f7ff ff59 	bl	801b0bc <__sflush_r>
 801b20a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b20c:	07da      	lsls	r2, r3, #31
 801b20e:	4605      	mov	r5, r0
 801b210:	d4e0      	bmi.n	801b1d4 <_fflush_r+0xc>
 801b212:	89a3      	ldrh	r3, [r4, #12]
 801b214:	059b      	lsls	r3, r3, #22
 801b216:	d4dd      	bmi.n	801b1d4 <_fflush_r+0xc>
 801b218:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b21a:	f000 f909 	bl	801b430 <__retarget_lock_release_recursive>
 801b21e:	e7d9      	b.n	801b1d4 <_fflush_r+0xc>
 801b220:	4b05      	ldr	r3, [pc, #20]	; (801b238 <_fflush_r+0x70>)
 801b222:	429c      	cmp	r4, r3
 801b224:	d101      	bne.n	801b22a <_fflush_r+0x62>
 801b226:	68ac      	ldr	r4, [r5, #8]
 801b228:	e7df      	b.n	801b1ea <_fflush_r+0x22>
 801b22a:	4b04      	ldr	r3, [pc, #16]	; (801b23c <_fflush_r+0x74>)
 801b22c:	429c      	cmp	r4, r3
 801b22e:	bf08      	it	eq
 801b230:	68ec      	ldreq	r4, [r5, #12]
 801b232:	e7da      	b.n	801b1ea <_fflush_r+0x22>
 801b234:	0801ecd4 	.word	0x0801ecd4
 801b238:	0801ecf4 	.word	0x0801ecf4
 801b23c:	0801ecb4 	.word	0x0801ecb4

0801b240 <std>:
 801b240:	2300      	movs	r3, #0
 801b242:	b510      	push	{r4, lr}
 801b244:	4604      	mov	r4, r0
 801b246:	e9c0 3300 	strd	r3, r3, [r0]
 801b24a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801b24e:	6083      	str	r3, [r0, #8]
 801b250:	8181      	strh	r1, [r0, #12]
 801b252:	6643      	str	r3, [r0, #100]	; 0x64
 801b254:	81c2      	strh	r2, [r0, #14]
 801b256:	6183      	str	r3, [r0, #24]
 801b258:	4619      	mov	r1, r3
 801b25a:	2208      	movs	r2, #8
 801b25c:	305c      	adds	r0, #92	; 0x5c
 801b25e:	f7ff f9ad 	bl	801a5bc <memset>
 801b262:	4b05      	ldr	r3, [pc, #20]	; (801b278 <std+0x38>)
 801b264:	6263      	str	r3, [r4, #36]	; 0x24
 801b266:	4b05      	ldr	r3, [pc, #20]	; (801b27c <std+0x3c>)
 801b268:	62a3      	str	r3, [r4, #40]	; 0x28
 801b26a:	4b05      	ldr	r3, [pc, #20]	; (801b280 <std+0x40>)
 801b26c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801b26e:	4b05      	ldr	r3, [pc, #20]	; (801b284 <std+0x44>)
 801b270:	6224      	str	r4, [r4, #32]
 801b272:	6323      	str	r3, [r4, #48]	; 0x30
 801b274:	bd10      	pop	{r4, pc}
 801b276:	bf00      	nop
 801b278:	0801b85d 	.word	0x0801b85d
 801b27c:	0801b87f 	.word	0x0801b87f
 801b280:	0801b8b7 	.word	0x0801b8b7
 801b284:	0801b8db 	.word	0x0801b8db

0801b288 <_cleanup_r>:
 801b288:	4901      	ldr	r1, [pc, #4]	; (801b290 <_cleanup_r+0x8>)
 801b28a:	f000 b8af 	b.w	801b3ec <_fwalk_reent>
 801b28e:	bf00      	nop
 801b290:	0801b1c9 	.word	0x0801b1c9

0801b294 <__sfmoreglue>:
 801b294:	b570      	push	{r4, r5, r6, lr}
 801b296:	2268      	movs	r2, #104	; 0x68
 801b298:	1e4d      	subs	r5, r1, #1
 801b29a:	4355      	muls	r5, r2
 801b29c:	460e      	mov	r6, r1
 801b29e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801b2a2:	f7ff f9ff 	bl	801a6a4 <_malloc_r>
 801b2a6:	4604      	mov	r4, r0
 801b2a8:	b140      	cbz	r0, 801b2bc <__sfmoreglue+0x28>
 801b2aa:	2100      	movs	r1, #0
 801b2ac:	e9c0 1600 	strd	r1, r6, [r0]
 801b2b0:	300c      	adds	r0, #12
 801b2b2:	60a0      	str	r0, [r4, #8]
 801b2b4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801b2b8:	f7ff f980 	bl	801a5bc <memset>
 801b2bc:	4620      	mov	r0, r4
 801b2be:	bd70      	pop	{r4, r5, r6, pc}

0801b2c0 <__sfp_lock_acquire>:
 801b2c0:	4801      	ldr	r0, [pc, #4]	; (801b2c8 <__sfp_lock_acquire+0x8>)
 801b2c2:	f000 b8b3 	b.w	801b42c <__retarget_lock_acquire_recursive>
 801b2c6:	bf00      	nop
 801b2c8:	200245d2 	.word	0x200245d2

0801b2cc <__sfp_lock_release>:
 801b2cc:	4801      	ldr	r0, [pc, #4]	; (801b2d4 <__sfp_lock_release+0x8>)
 801b2ce:	f000 b8af 	b.w	801b430 <__retarget_lock_release_recursive>
 801b2d2:	bf00      	nop
 801b2d4:	200245d2 	.word	0x200245d2

0801b2d8 <__sinit_lock_acquire>:
 801b2d8:	4801      	ldr	r0, [pc, #4]	; (801b2e0 <__sinit_lock_acquire+0x8>)
 801b2da:	f000 b8a7 	b.w	801b42c <__retarget_lock_acquire_recursive>
 801b2de:	bf00      	nop
 801b2e0:	200245d3 	.word	0x200245d3

0801b2e4 <__sinit_lock_release>:
 801b2e4:	4801      	ldr	r0, [pc, #4]	; (801b2ec <__sinit_lock_release+0x8>)
 801b2e6:	f000 b8a3 	b.w	801b430 <__retarget_lock_release_recursive>
 801b2ea:	bf00      	nop
 801b2ec:	200245d3 	.word	0x200245d3

0801b2f0 <__sinit>:
 801b2f0:	b510      	push	{r4, lr}
 801b2f2:	4604      	mov	r4, r0
 801b2f4:	f7ff fff0 	bl	801b2d8 <__sinit_lock_acquire>
 801b2f8:	69a3      	ldr	r3, [r4, #24]
 801b2fa:	b11b      	cbz	r3, 801b304 <__sinit+0x14>
 801b2fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b300:	f7ff bff0 	b.w	801b2e4 <__sinit_lock_release>
 801b304:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801b308:	6523      	str	r3, [r4, #80]	; 0x50
 801b30a:	4b13      	ldr	r3, [pc, #76]	; (801b358 <__sinit+0x68>)
 801b30c:	4a13      	ldr	r2, [pc, #76]	; (801b35c <__sinit+0x6c>)
 801b30e:	681b      	ldr	r3, [r3, #0]
 801b310:	62a2      	str	r2, [r4, #40]	; 0x28
 801b312:	42a3      	cmp	r3, r4
 801b314:	bf04      	itt	eq
 801b316:	2301      	moveq	r3, #1
 801b318:	61a3      	streq	r3, [r4, #24]
 801b31a:	4620      	mov	r0, r4
 801b31c:	f000 f820 	bl	801b360 <__sfp>
 801b320:	6060      	str	r0, [r4, #4]
 801b322:	4620      	mov	r0, r4
 801b324:	f000 f81c 	bl	801b360 <__sfp>
 801b328:	60a0      	str	r0, [r4, #8]
 801b32a:	4620      	mov	r0, r4
 801b32c:	f000 f818 	bl	801b360 <__sfp>
 801b330:	2200      	movs	r2, #0
 801b332:	60e0      	str	r0, [r4, #12]
 801b334:	2104      	movs	r1, #4
 801b336:	6860      	ldr	r0, [r4, #4]
 801b338:	f7ff ff82 	bl	801b240 <std>
 801b33c:	68a0      	ldr	r0, [r4, #8]
 801b33e:	2201      	movs	r2, #1
 801b340:	2109      	movs	r1, #9
 801b342:	f7ff ff7d 	bl	801b240 <std>
 801b346:	68e0      	ldr	r0, [r4, #12]
 801b348:	2202      	movs	r2, #2
 801b34a:	2112      	movs	r1, #18
 801b34c:	f7ff ff78 	bl	801b240 <std>
 801b350:	2301      	movs	r3, #1
 801b352:	61a3      	str	r3, [r4, #24]
 801b354:	e7d2      	b.n	801b2fc <__sinit+0xc>
 801b356:	bf00      	nop
 801b358:	0801ec78 	.word	0x0801ec78
 801b35c:	0801b289 	.word	0x0801b289

0801b360 <__sfp>:
 801b360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b362:	4607      	mov	r7, r0
 801b364:	f7ff ffac 	bl	801b2c0 <__sfp_lock_acquire>
 801b368:	4b1e      	ldr	r3, [pc, #120]	; (801b3e4 <__sfp+0x84>)
 801b36a:	681e      	ldr	r6, [r3, #0]
 801b36c:	69b3      	ldr	r3, [r6, #24]
 801b36e:	b913      	cbnz	r3, 801b376 <__sfp+0x16>
 801b370:	4630      	mov	r0, r6
 801b372:	f7ff ffbd 	bl	801b2f0 <__sinit>
 801b376:	3648      	adds	r6, #72	; 0x48
 801b378:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801b37c:	3b01      	subs	r3, #1
 801b37e:	d503      	bpl.n	801b388 <__sfp+0x28>
 801b380:	6833      	ldr	r3, [r6, #0]
 801b382:	b30b      	cbz	r3, 801b3c8 <__sfp+0x68>
 801b384:	6836      	ldr	r6, [r6, #0]
 801b386:	e7f7      	b.n	801b378 <__sfp+0x18>
 801b388:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801b38c:	b9d5      	cbnz	r5, 801b3c4 <__sfp+0x64>
 801b38e:	4b16      	ldr	r3, [pc, #88]	; (801b3e8 <__sfp+0x88>)
 801b390:	60e3      	str	r3, [r4, #12]
 801b392:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801b396:	6665      	str	r5, [r4, #100]	; 0x64
 801b398:	f000 f847 	bl	801b42a <__retarget_lock_init_recursive>
 801b39c:	f7ff ff96 	bl	801b2cc <__sfp_lock_release>
 801b3a0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801b3a4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801b3a8:	6025      	str	r5, [r4, #0]
 801b3aa:	61a5      	str	r5, [r4, #24]
 801b3ac:	2208      	movs	r2, #8
 801b3ae:	4629      	mov	r1, r5
 801b3b0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801b3b4:	f7ff f902 	bl	801a5bc <memset>
 801b3b8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801b3bc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801b3c0:	4620      	mov	r0, r4
 801b3c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b3c4:	3468      	adds	r4, #104	; 0x68
 801b3c6:	e7d9      	b.n	801b37c <__sfp+0x1c>
 801b3c8:	2104      	movs	r1, #4
 801b3ca:	4638      	mov	r0, r7
 801b3cc:	f7ff ff62 	bl	801b294 <__sfmoreglue>
 801b3d0:	4604      	mov	r4, r0
 801b3d2:	6030      	str	r0, [r6, #0]
 801b3d4:	2800      	cmp	r0, #0
 801b3d6:	d1d5      	bne.n	801b384 <__sfp+0x24>
 801b3d8:	f7ff ff78 	bl	801b2cc <__sfp_lock_release>
 801b3dc:	230c      	movs	r3, #12
 801b3de:	603b      	str	r3, [r7, #0]
 801b3e0:	e7ee      	b.n	801b3c0 <__sfp+0x60>
 801b3e2:	bf00      	nop
 801b3e4:	0801ec78 	.word	0x0801ec78
 801b3e8:	ffff0001 	.word	0xffff0001

0801b3ec <_fwalk_reent>:
 801b3ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b3f0:	4606      	mov	r6, r0
 801b3f2:	4688      	mov	r8, r1
 801b3f4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801b3f8:	2700      	movs	r7, #0
 801b3fa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801b3fe:	f1b9 0901 	subs.w	r9, r9, #1
 801b402:	d505      	bpl.n	801b410 <_fwalk_reent+0x24>
 801b404:	6824      	ldr	r4, [r4, #0]
 801b406:	2c00      	cmp	r4, #0
 801b408:	d1f7      	bne.n	801b3fa <_fwalk_reent+0xe>
 801b40a:	4638      	mov	r0, r7
 801b40c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b410:	89ab      	ldrh	r3, [r5, #12]
 801b412:	2b01      	cmp	r3, #1
 801b414:	d907      	bls.n	801b426 <_fwalk_reent+0x3a>
 801b416:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801b41a:	3301      	adds	r3, #1
 801b41c:	d003      	beq.n	801b426 <_fwalk_reent+0x3a>
 801b41e:	4629      	mov	r1, r5
 801b420:	4630      	mov	r0, r6
 801b422:	47c0      	blx	r8
 801b424:	4307      	orrs	r7, r0
 801b426:	3568      	adds	r5, #104	; 0x68
 801b428:	e7e9      	b.n	801b3fe <_fwalk_reent+0x12>

0801b42a <__retarget_lock_init_recursive>:
 801b42a:	4770      	bx	lr

0801b42c <__retarget_lock_acquire_recursive>:
 801b42c:	4770      	bx	lr

0801b42e <__retarget_lock_release>:
 801b42e:	4770      	bx	lr

0801b430 <__retarget_lock_release_recursive>:
 801b430:	4770      	bx	lr

0801b432 <__swhatbuf_r>:
 801b432:	b570      	push	{r4, r5, r6, lr}
 801b434:	460e      	mov	r6, r1
 801b436:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b43a:	2900      	cmp	r1, #0
 801b43c:	b096      	sub	sp, #88	; 0x58
 801b43e:	4614      	mov	r4, r2
 801b440:	461d      	mov	r5, r3
 801b442:	da08      	bge.n	801b456 <__swhatbuf_r+0x24>
 801b444:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801b448:	2200      	movs	r2, #0
 801b44a:	602a      	str	r2, [r5, #0]
 801b44c:	061a      	lsls	r2, r3, #24
 801b44e:	d410      	bmi.n	801b472 <__swhatbuf_r+0x40>
 801b450:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801b454:	e00e      	b.n	801b474 <__swhatbuf_r+0x42>
 801b456:	466a      	mov	r2, sp
 801b458:	f000 fa66 	bl	801b928 <_fstat_r>
 801b45c:	2800      	cmp	r0, #0
 801b45e:	dbf1      	blt.n	801b444 <__swhatbuf_r+0x12>
 801b460:	9a01      	ldr	r2, [sp, #4]
 801b462:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801b466:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801b46a:	425a      	negs	r2, r3
 801b46c:	415a      	adcs	r2, r3
 801b46e:	602a      	str	r2, [r5, #0]
 801b470:	e7ee      	b.n	801b450 <__swhatbuf_r+0x1e>
 801b472:	2340      	movs	r3, #64	; 0x40
 801b474:	2000      	movs	r0, #0
 801b476:	6023      	str	r3, [r4, #0]
 801b478:	b016      	add	sp, #88	; 0x58
 801b47a:	bd70      	pop	{r4, r5, r6, pc}

0801b47c <__smakebuf_r>:
 801b47c:	898b      	ldrh	r3, [r1, #12]
 801b47e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801b480:	079d      	lsls	r5, r3, #30
 801b482:	4606      	mov	r6, r0
 801b484:	460c      	mov	r4, r1
 801b486:	d507      	bpl.n	801b498 <__smakebuf_r+0x1c>
 801b488:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801b48c:	6023      	str	r3, [r4, #0]
 801b48e:	6123      	str	r3, [r4, #16]
 801b490:	2301      	movs	r3, #1
 801b492:	6163      	str	r3, [r4, #20]
 801b494:	b002      	add	sp, #8
 801b496:	bd70      	pop	{r4, r5, r6, pc}
 801b498:	ab01      	add	r3, sp, #4
 801b49a:	466a      	mov	r2, sp
 801b49c:	f7ff ffc9 	bl	801b432 <__swhatbuf_r>
 801b4a0:	9900      	ldr	r1, [sp, #0]
 801b4a2:	4605      	mov	r5, r0
 801b4a4:	4630      	mov	r0, r6
 801b4a6:	f7ff f8fd 	bl	801a6a4 <_malloc_r>
 801b4aa:	b948      	cbnz	r0, 801b4c0 <__smakebuf_r+0x44>
 801b4ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b4b0:	059a      	lsls	r2, r3, #22
 801b4b2:	d4ef      	bmi.n	801b494 <__smakebuf_r+0x18>
 801b4b4:	f023 0303 	bic.w	r3, r3, #3
 801b4b8:	f043 0302 	orr.w	r3, r3, #2
 801b4bc:	81a3      	strh	r3, [r4, #12]
 801b4be:	e7e3      	b.n	801b488 <__smakebuf_r+0xc>
 801b4c0:	4b0d      	ldr	r3, [pc, #52]	; (801b4f8 <__smakebuf_r+0x7c>)
 801b4c2:	62b3      	str	r3, [r6, #40]	; 0x28
 801b4c4:	89a3      	ldrh	r3, [r4, #12]
 801b4c6:	6020      	str	r0, [r4, #0]
 801b4c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b4cc:	81a3      	strh	r3, [r4, #12]
 801b4ce:	9b00      	ldr	r3, [sp, #0]
 801b4d0:	6163      	str	r3, [r4, #20]
 801b4d2:	9b01      	ldr	r3, [sp, #4]
 801b4d4:	6120      	str	r0, [r4, #16]
 801b4d6:	b15b      	cbz	r3, 801b4f0 <__smakebuf_r+0x74>
 801b4d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b4dc:	4630      	mov	r0, r6
 801b4de:	f000 fa35 	bl	801b94c <_isatty_r>
 801b4e2:	b128      	cbz	r0, 801b4f0 <__smakebuf_r+0x74>
 801b4e4:	89a3      	ldrh	r3, [r4, #12]
 801b4e6:	f023 0303 	bic.w	r3, r3, #3
 801b4ea:	f043 0301 	orr.w	r3, r3, #1
 801b4ee:	81a3      	strh	r3, [r4, #12]
 801b4f0:	89a0      	ldrh	r0, [r4, #12]
 801b4f2:	4305      	orrs	r5, r0
 801b4f4:	81a5      	strh	r5, [r4, #12]
 801b4f6:	e7cd      	b.n	801b494 <__smakebuf_r+0x18>
 801b4f8:	0801b289 	.word	0x0801b289

0801b4fc <memmove>:
 801b4fc:	4288      	cmp	r0, r1
 801b4fe:	b510      	push	{r4, lr}
 801b500:	eb01 0402 	add.w	r4, r1, r2
 801b504:	d902      	bls.n	801b50c <memmove+0x10>
 801b506:	4284      	cmp	r4, r0
 801b508:	4623      	mov	r3, r4
 801b50a:	d807      	bhi.n	801b51c <memmove+0x20>
 801b50c:	1e43      	subs	r3, r0, #1
 801b50e:	42a1      	cmp	r1, r4
 801b510:	d008      	beq.n	801b524 <memmove+0x28>
 801b512:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b516:	f803 2f01 	strb.w	r2, [r3, #1]!
 801b51a:	e7f8      	b.n	801b50e <memmove+0x12>
 801b51c:	4402      	add	r2, r0
 801b51e:	4601      	mov	r1, r0
 801b520:	428a      	cmp	r2, r1
 801b522:	d100      	bne.n	801b526 <memmove+0x2a>
 801b524:	bd10      	pop	{r4, pc}
 801b526:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801b52a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801b52e:	e7f7      	b.n	801b520 <memmove+0x24>

0801b530 <__malloc_lock>:
 801b530:	4801      	ldr	r0, [pc, #4]	; (801b538 <__malloc_lock+0x8>)
 801b532:	f7ff bf7b 	b.w	801b42c <__retarget_lock_acquire_recursive>
 801b536:	bf00      	nop
 801b538:	200245d1 	.word	0x200245d1

0801b53c <__malloc_unlock>:
 801b53c:	4801      	ldr	r0, [pc, #4]	; (801b544 <__malloc_unlock+0x8>)
 801b53e:	f7ff bf77 	b.w	801b430 <__retarget_lock_release_recursive>
 801b542:	bf00      	nop
 801b544:	200245d1 	.word	0x200245d1

0801b548 <_realloc_r>:
 801b548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b54c:	4680      	mov	r8, r0
 801b54e:	4614      	mov	r4, r2
 801b550:	460e      	mov	r6, r1
 801b552:	b921      	cbnz	r1, 801b55e <_realloc_r+0x16>
 801b554:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b558:	4611      	mov	r1, r2
 801b55a:	f7ff b8a3 	b.w	801a6a4 <_malloc_r>
 801b55e:	b92a      	cbnz	r2, 801b56c <_realloc_r+0x24>
 801b560:	f7ff f834 	bl	801a5cc <_free_r>
 801b564:	4625      	mov	r5, r4
 801b566:	4628      	mov	r0, r5
 801b568:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b56c:	f000 fa10 	bl	801b990 <_malloc_usable_size_r>
 801b570:	4284      	cmp	r4, r0
 801b572:	4607      	mov	r7, r0
 801b574:	d802      	bhi.n	801b57c <_realloc_r+0x34>
 801b576:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801b57a:	d812      	bhi.n	801b5a2 <_realloc_r+0x5a>
 801b57c:	4621      	mov	r1, r4
 801b57e:	4640      	mov	r0, r8
 801b580:	f7ff f890 	bl	801a6a4 <_malloc_r>
 801b584:	4605      	mov	r5, r0
 801b586:	2800      	cmp	r0, #0
 801b588:	d0ed      	beq.n	801b566 <_realloc_r+0x1e>
 801b58a:	42bc      	cmp	r4, r7
 801b58c:	4622      	mov	r2, r4
 801b58e:	4631      	mov	r1, r6
 801b590:	bf28      	it	cs
 801b592:	463a      	movcs	r2, r7
 801b594:	f7ff f804 	bl	801a5a0 <memcpy>
 801b598:	4631      	mov	r1, r6
 801b59a:	4640      	mov	r0, r8
 801b59c:	f7ff f816 	bl	801a5cc <_free_r>
 801b5a0:	e7e1      	b.n	801b566 <_realloc_r+0x1e>
 801b5a2:	4635      	mov	r5, r6
 801b5a4:	e7df      	b.n	801b566 <_realloc_r+0x1e>

0801b5a6 <__ssputs_r>:
 801b5a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b5aa:	688e      	ldr	r6, [r1, #8]
 801b5ac:	429e      	cmp	r6, r3
 801b5ae:	4682      	mov	sl, r0
 801b5b0:	460c      	mov	r4, r1
 801b5b2:	4690      	mov	r8, r2
 801b5b4:	461f      	mov	r7, r3
 801b5b6:	d838      	bhi.n	801b62a <__ssputs_r+0x84>
 801b5b8:	898a      	ldrh	r2, [r1, #12]
 801b5ba:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801b5be:	d032      	beq.n	801b626 <__ssputs_r+0x80>
 801b5c0:	6825      	ldr	r5, [r4, #0]
 801b5c2:	6909      	ldr	r1, [r1, #16]
 801b5c4:	eba5 0901 	sub.w	r9, r5, r1
 801b5c8:	6965      	ldr	r5, [r4, #20]
 801b5ca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b5ce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801b5d2:	3301      	adds	r3, #1
 801b5d4:	444b      	add	r3, r9
 801b5d6:	106d      	asrs	r5, r5, #1
 801b5d8:	429d      	cmp	r5, r3
 801b5da:	bf38      	it	cc
 801b5dc:	461d      	movcc	r5, r3
 801b5de:	0553      	lsls	r3, r2, #21
 801b5e0:	d531      	bpl.n	801b646 <__ssputs_r+0xa0>
 801b5e2:	4629      	mov	r1, r5
 801b5e4:	f7ff f85e 	bl	801a6a4 <_malloc_r>
 801b5e8:	4606      	mov	r6, r0
 801b5ea:	b950      	cbnz	r0, 801b602 <__ssputs_r+0x5c>
 801b5ec:	230c      	movs	r3, #12
 801b5ee:	f8ca 3000 	str.w	r3, [sl]
 801b5f2:	89a3      	ldrh	r3, [r4, #12]
 801b5f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b5f8:	81a3      	strh	r3, [r4, #12]
 801b5fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b5fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b602:	6921      	ldr	r1, [r4, #16]
 801b604:	464a      	mov	r2, r9
 801b606:	f7fe ffcb 	bl	801a5a0 <memcpy>
 801b60a:	89a3      	ldrh	r3, [r4, #12]
 801b60c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801b610:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b614:	81a3      	strh	r3, [r4, #12]
 801b616:	6126      	str	r6, [r4, #16]
 801b618:	6165      	str	r5, [r4, #20]
 801b61a:	444e      	add	r6, r9
 801b61c:	eba5 0509 	sub.w	r5, r5, r9
 801b620:	6026      	str	r6, [r4, #0]
 801b622:	60a5      	str	r5, [r4, #8]
 801b624:	463e      	mov	r6, r7
 801b626:	42be      	cmp	r6, r7
 801b628:	d900      	bls.n	801b62c <__ssputs_r+0x86>
 801b62a:	463e      	mov	r6, r7
 801b62c:	6820      	ldr	r0, [r4, #0]
 801b62e:	4632      	mov	r2, r6
 801b630:	4641      	mov	r1, r8
 801b632:	f7ff ff63 	bl	801b4fc <memmove>
 801b636:	68a3      	ldr	r3, [r4, #8]
 801b638:	1b9b      	subs	r3, r3, r6
 801b63a:	60a3      	str	r3, [r4, #8]
 801b63c:	6823      	ldr	r3, [r4, #0]
 801b63e:	4433      	add	r3, r6
 801b640:	6023      	str	r3, [r4, #0]
 801b642:	2000      	movs	r0, #0
 801b644:	e7db      	b.n	801b5fe <__ssputs_r+0x58>
 801b646:	462a      	mov	r2, r5
 801b648:	f7ff ff7e 	bl	801b548 <_realloc_r>
 801b64c:	4606      	mov	r6, r0
 801b64e:	2800      	cmp	r0, #0
 801b650:	d1e1      	bne.n	801b616 <__ssputs_r+0x70>
 801b652:	6921      	ldr	r1, [r4, #16]
 801b654:	4650      	mov	r0, sl
 801b656:	f7fe ffb9 	bl	801a5cc <_free_r>
 801b65a:	e7c7      	b.n	801b5ec <__ssputs_r+0x46>

0801b65c <_svfiprintf_r>:
 801b65c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b660:	4698      	mov	r8, r3
 801b662:	898b      	ldrh	r3, [r1, #12]
 801b664:	061b      	lsls	r3, r3, #24
 801b666:	b09d      	sub	sp, #116	; 0x74
 801b668:	4607      	mov	r7, r0
 801b66a:	460d      	mov	r5, r1
 801b66c:	4614      	mov	r4, r2
 801b66e:	d50e      	bpl.n	801b68e <_svfiprintf_r+0x32>
 801b670:	690b      	ldr	r3, [r1, #16]
 801b672:	b963      	cbnz	r3, 801b68e <_svfiprintf_r+0x32>
 801b674:	2140      	movs	r1, #64	; 0x40
 801b676:	f7ff f815 	bl	801a6a4 <_malloc_r>
 801b67a:	6028      	str	r0, [r5, #0]
 801b67c:	6128      	str	r0, [r5, #16]
 801b67e:	b920      	cbnz	r0, 801b68a <_svfiprintf_r+0x2e>
 801b680:	230c      	movs	r3, #12
 801b682:	603b      	str	r3, [r7, #0]
 801b684:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b688:	e0d1      	b.n	801b82e <_svfiprintf_r+0x1d2>
 801b68a:	2340      	movs	r3, #64	; 0x40
 801b68c:	616b      	str	r3, [r5, #20]
 801b68e:	2300      	movs	r3, #0
 801b690:	9309      	str	r3, [sp, #36]	; 0x24
 801b692:	2320      	movs	r3, #32
 801b694:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801b698:	f8cd 800c 	str.w	r8, [sp, #12]
 801b69c:	2330      	movs	r3, #48	; 0x30
 801b69e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801b848 <_svfiprintf_r+0x1ec>
 801b6a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801b6a6:	f04f 0901 	mov.w	r9, #1
 801b6aa:	4623      	mov	r3, r4
 801b6ac:	469a      	mov	sl, r3
 801b6ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b6b2:	b10a      	cbz	r2, 801b6b8 <_svfiprintf_r+0x5c>
 801b6b4:	2a25      	cmp	r2, #37	; 0x25
 801b6b6:	d1f9      	bne.n	801b6ac <_svfiprintf_r+0x50>
 801b6b8:	ebba 0b04 	subs.w	fp, sl, r4
 801b6bc:	d00b      	beq.n	801b6d6 <_svfiprintf_r+0x7a>
 801b6be:	465b      	mov	r3, fp
 801b6c0:	4622      	mov	r2, r4
 801b6c2:	4629      	mov	r1, r5
 801b6c4:	4638      	mov	r0, r7
 801b6c6:	f7ff ff6e 	bl	801b5a6 <__ssputs_r>
 801b6ca:	3001      	adds	r0, #1
 801b6cc:	f000 80aa 	beq.w	801b824 <_svfiprintf_r+0x1c8>
 801b6d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b6d2:	445a      	add	r2, fp
 801b6d4:	9209      	str	r2, [sp, #36]	; 0x24
 801b6d6:	f89a 3000 	ldrb.w	r3, [sl]
 801b6da:	2b00      	cmp	r3, #0
 801b6dc:	f000 80a2 	beq.w	801b824 <_svfiprintf_r+0x1c8>
 801b6e0:	2300      	movs	r3, #0
 801b6e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801b6e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b6ea:	f10a 0a01 	add.w	sl, sl, #1
 801b6ee:	9304      	str	r3, [sp, #16]
 801b6f0:	9307      	str	r3, [sp, #28]
 801b6f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801b6f6:	931a      	str	r3, [sp, #104]	; 0x68
 801b6f8:	4654      	mov	r4, sl
 801b6fa:	2205      	movs	r2, #5
 801b6fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b700:	4851      	ldr	r0, [pc, #324]	; (801b848 <_svfiprintf_r+0x1ec>)
 801b702:	f7e4 fd9d 	bl	8000240 <memchr>
 801b706:	9a04      	ldr	r2, [sp, #16]
 801b708:	b9d8      	cbnz	r0, 801b742 <_svfiprintf_r+0xe6>
 801b70a:	06d0      	lsls	r0, r2, #27
 801b70c:	bf44      	itt	mi
 801b70e:	2320      	movmi	r3, #32
 801b710:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b714:	0711      	lsls	r1, r2, #28
 801b716:	bf44      	itt	mi
 801b718:	232b      	movmi	r3, #43	; 0x2b
 801b71a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b71e:	f89a 3000 	ldrb.w	r3, [sl]
 801b722:	2b2a      	cmp	r3, #42	; 0x2a
 801b724:	d015      	beq.n	801b752 <_svfiprintf_r+0xf6>
 801b726:	9a07      	ldr	r2, [sp, #28]
 801b728:	4654      	mov	r4, sl
 801b72a:	2000      	movs	r0, #0
 801b72c:	f04f 0c0a 	mov.w	ip, #10
 801b730:	4621      	mov	r1, r4
 801b732:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b736:	3b30      	subs	r3, #48	; 0x30
 801b738:	2b09      	cmp	r3, #9
 801b73a:	d94e      	bls.n	801b7da <_svfiprintf_r+0x17e>
 801b73c:	b1b0      	cbz	r0, 801b76c <_svfiprintf_r+0x110>
 801b73e:	9207      	str	r2, [sp, #28]
 801b740:	e014      	b.n	801b76c <_svfiprintf_r+0x110>
 801b742:	eba0 0308 	sub.w	r3, r0, r8
 801b746:	fa09 f303 	lsl.w	r3, r9, r3
 801b74a:	4313      	orrs	r3, r2
 801b74c:	9304      	str	r3, [sp, #16]
 801b74e:	46a2      	mov	sl, r4
 801b750:	e7d2      	b.n	801b6f8 <_svfiprintf_r+0x9c>
 801b752:	9b03      	ldr	r3, [sp, #12]
 801b754:	1d19      	adds	r1, r3, #4
 801b756:	681b      	ldr	r3, [r3, #0]
 801b758:	9103      	str	r1, [sp, #12]
 801b75a:	2b00      	cmp	r3, #0
 801b75c:	bfbb      	ittet	lt
 801b75e:	425b      	neglt	r3, r3
 801b760:	f042 0202 	orrlt.w	r2, r2, #2
 801b764:	9307      	strge	r3, [sp, #28]
 801b766:	9307      	strlt	r3, [sp, #28]
 801b768:	bfb8      	it	lt
 801b76a:	9204      	strlt	r2, [sp, #16]
 801b76c:	7823      	ldrb	r3, [r4, #0]
 801b76e:	2b2e      	cmp	r3, #46	; 0x2e
 801b770:	d10c      	bne.n	801b78c <_svfiprintf_r+0x130>
 801b772:	7863      	ldrb	r3, [r4, #1]
 801b774:	2b2a      	cmp	r3, #42	; 0x2a
 801b776:	d135      	bne.n	801b7e4 <_svfiprintf_r+0x188>
 801b778:	9b03      	ldr	r3, [sp, #12]
 801b77a:	1d1a      	adds	r2, r3, #4
 801b77c:	681b      	ldr	r3, [r3, #0]
 801b77e:	9203      	str	r2, [sp, #12]
 801b780:	2b00      	cmp	r3, #0
 801b782:	bfb8      	it	lt
 801b784:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801b788:	3402      	adds	r4, #2
 801b78a:	9305      	str	r3, [sp, #20]
 801b78c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801b858 <_svfiprintf_r+0x1fc>
 801b790:	7821      	ldrb	r1, [r4, #0]
 801b792:	2203      	movs	r2, #3
 801b794:	4650      	mov	r0, sl
 801b796:	f7e4 fd53 	bl	8000240 <memchr>
 801b79a:	b140      	cbz	r0, 801b7ae <_svfiprintf_r+0x152>
 801b79c:	2340      	movs	r3, #64	; 0x40
 801b79e:	eba0 000a 	sub.w	r0, r0, sl
 801b7a2:	fa03 f000 	lsl.w	r0, r3, r0
 801b7a6:	9b04      	ldr	r3, [sp, #16]
 801b7a8:	4303      	orrs	r3, r0
 801b7aa:	3401      	adds	r4, #1
 801b7ac:	9304      	str	r3, [sp, #16]
 801b7ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b7b2:	4826      	ldr	r0, [pc, #152]	; (801b84c <_svfiprintf_r+0x1f0>)
 801b7b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801b7b8:	2206      	movs	r2, #6
 801b7ba:	f7e4 fd41 	bl	8000240 <memchr>
 801b7be:	2800      	cmp	r0, #0
 801b7c0:	d038      	beq.n	801b834 <_svfiprintf_r+0x1d8>
 801b7c2:	4b23      	ldr	r3, [pc, #140]	; (801b850 <_svfiprintf_r+0x1f4>)
 801b7c4:	bb1b      	cbnz	r3, 801b80e <_svfiprintf_r+0x1b2>
 801b7c6:	9b03      	ldr	r3, [sp, #12]
 801b7c8:	3307      	adds	r3, #7
 801b7ca:	f023 0307 	bic.w	r3, r3, #7
 801b7ce:	3308      	adds	r3, #8
 801b7d0:	9303      	str	r3, [sp, #12]
 801b7d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b7d4:	4433      	add	r3, r6
 801b7d6:	9309      	str	r3, [sp, #36]	; 0x24
 801b7d8:	e767      	b.n	801b6aa <_svfiprintf_r+0x4e>
 801b7da:	fb0c 3202 	mla	r2, ip, r2, r3
 801b7de:	460c      	mov	r4, r1
 801b7e0:	2001      	movs	r0, #1
 801b7e2:	e7a5      	b.n	801b730 <_svfiprintf_r+0xd4>
 801b7e4:	2300      	movs	r3, #0
 801b7e6:	3401      	adds	r4, #1
 801b7e8:	9305      	str	r3, [sp, #20]
 801b7ea:	4619      	mov	r1, r3
 801b7ec:	f04f 0c0a 	mov.w	ip, #10
 801b7f0:	4620      	mov	r0, r4
 801b7f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b7f6:	3a30      	subs	r2, #48	; 0x30
 801b7f8:	2a09      	cmp	r2, #9
 801b7fa:	d903      	bls.n	801b804 <_svfiprintf_r+0x1a8>
 801b7fc:	2b00      	cmp	r3, #0
 801b7fe:	d0c5      	beq.n	801b78c <_svfiprintf_r+0x130>
 801b800:	9105      	str	r1, [sp, #20]
 801b802:	e7c3      	b.n	801b78c <_svfiprintf_r+0x130>
 801b804:	fb0c 2101 	mla	r1, ip, r1, r2
 801b808:	4604      	mov	r4, r0
 801b80a:	2301      	movs	r3, #1
 801b80c:	e7f0      	b.n	801b7f0 <_svfiprintf_r+0x194>
 801b80e:	ab03      	add	r3, sp, #12
 801b810:	9300      	str	r3, [sp, #0]
 801b812:	462a      	mov	r2, r5
 801b814:	4b0f      	ldr	r3, [pc, #60]	; (801b854 <_svfiprintf_r+0x1f8>)
 801b816:	a904      	add	r1, sp, #16
 801b818:	4638      	mov	r0, r7
 801b81a:	f3af 8000 	nop.w
 801b81e:	1c42      	adds	r2, r0, #1
 801b820:	4606      	mov	r6, r0
 801b822:	d1d6      	bne.n	801b7d2 <_svfiprintf_r+0x176>
 801b824:	89ab      	ldrh	r3, [r5, #12]
 801b826:	065b      	lsls	r3, r3, #25
 801b828:	f53f af2c 	bmi.w	801b684 <_svfiprintf_r+0x28>
 801b82c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b82e:	b01d      	add	sp, #116	; 0x74
 801b830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b834:	ab03      	add	r3, sp, #12
 801b836:	9300      	str	r3, [sp, #0]
 801b838:	462a      	mov	r2, r5
 801b83a:	4b06      	ldr	r3, [pc, #24]	; (801b854 <_svfiprintf_r+0x1f8>)
 801b83c:	a904      	add	r1, sp, #16
 801b83e:	4638      	mov	r0, r7
 801b840:	f7ff f96c 	bl	801ab1c <_printf_i>
 801b844:	e7eb      	b.n	801b81e <_svfiprintf_r+0x1c2>
 801b846:	bf00      	nop
 801b848:	0801ec7c 	.word	0x0801ec7c
 801b84c:	0801ec86 	.word	0x0801ec86
 801b850:	00000000 	.word	0x00000000
 801b854:	0801b5a7 	.word	0x0801b5a7
 801b858:	0801ec82 	.word	0x0801ec82

0801b85c <__sread>:
 801b85c:	b510      	push	{r4, lr}
 801b85e:	460c      	mov	r4, r1
 801b860:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b864:	f000 f89c 	bl	801b9a0 <_read_r>
 801b868:	2800      	cmp	r0, #0
 801b86a:	bfab      	itete	ge
 801b86c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801b86e:	89a3      	ldrhlt	r3, [r4, #12]
 801b870:	181b      	addge	r3, r3, r0
 801b872:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801b876:	bfac      	ite	ge
 801b878:	6563      	strge	r3, [r4, #84]	; 0x54
 801b87a:	81a3      	strhlt	r3, [r4, #12]
 801b87c:	bd10      	pop	{r4, pc}

0801b87e <__swrite>:
 801b87e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b882:	461f      	mov	r7, r3
 801b884:	898b      	ldrh	r3, [r1, #12]
 801b886:	05db      	lsls	r3, r3, #23
 801b888:	4605      	mov	r5, r0
 801b88a:	460c      	mov	r4, r1
 801b88c:	4616      	mov	r6, r2
 801b88e:	d505      	bpl.n	801b89c <__swrite+0x1e>
 801b890:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b894:	2302      	movs	r3, #2
 801b896:	2200      	movs	r2, #0
 801b898:	f000 f868 	bl	801b96c <_lseek_r>
 801b89c:	89a3      	ldrh	r3, [r4, #12]
 801b89e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b8a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801b8a6:	81a3      	strh	r3, [r4, #12]
 801b8a8:	4632      	mov	r2, r6
 801b8aa:	463b      	mov	r3, r7
 801b8ac:	4628      	mov	r0, r5
 801b8ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b8b2:	f000 b817 	b.w	801b8e4 <_write_r>

0801b8b6 <__sseek>:
 801b8b6:	b510      	push	{r4, lr}
 801b8b8:	460c      	mov	r4, r1
 801b8ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b8be:	f000 f855 	bl	801b96c <_lseek_r>
 801b8c2:	1c43      	adds	r3, r0, #1
 801b8c4:	89a3      	ldrh	r3, [r4, #12]
 801b8c6:	bf15      	itete	ne
 801b8c8:	6560      	strne	r0, [r4, #84]	; 0x54
 801b8ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801b8ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801b8d2:	81a3      	strheq	r3, [r4, #12]
 801b8d4:	bf18      	it	ne
 801b8d6:	81a3      	strhne	r3, [r4, #12]
 801b8d8:	bd10      	pop	{r4, pc}

0801b8da <__sclose>:
 801b8da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b8de:	f000 b813 	b.w	801b908 <_close_r>
	...

0801b8e4 <_write_r>:
 801b8e4:	b538      	push	{r3, r4, r5, lr}
 801b8e6:	4d07      	ldr	r5, [pc, #28]	; (801b904 <_write_r+0x20>)
 801b8e8:	4604      	mov	r4, r0
 801b8ea:	4608      	mov	r0, r1
 801b8ec:	4611      	mov	r1, r2
 801b8ee:	2200      	movs	r2, #0
 801b8f0:	602a      	str	r2, [r5, #0]
 801b8f2:	461a      	mov	r2, r3
 801b8f4:	f7e6 fe3b 	bl	800256e <_write>
 801b8f8:	1c43      	adds	r3, r0, #1
 801b8fa:	d102      	bne.n	801b902 <_write_r+0x1e>
 801b8fc:	682b      	ldr	r3, [r5, #0]
 801b8fe:	b103      	cbz	r3, 801b902 <_write_r+0x1e>
 801b900:	6023      	str	r3, [r4, #0]
 801b902:	bd38      	pop	{r3, r4, r5, pc}
 801b904:	200245d4 	.word	0x200245d4

0801b908 <_close_r>:
 801b908:	b538      	push	{r3, r4, r5, lr}
 801b90a:	4d06      	ldr	r5, [pc, #24]	; (801b924 <_close_r+0x1c>)
 801b90c:	2300      	movs	r3, #0
 801b90e:	4604      	mov	r4, r0
 801b910:	4608      	mov	r0, r1
 801b912:	602b      	str	r3, [r5, #0]
 801b914:	f7e6 fe47 	bl	80025a6 <_close>
 801b918:	1c43      	adds	r3, r0, #1
 801b91a:	d102      	bne.n	801b922 <_close_r+0x1a>
 801b91c:	682b      	ldr	r3, [r5, #0]
 801b91e:	b103      	cbz	r3, 801b922 <_close_r+0x1a>
 801b920:	6023      	str	r3, [r4, #0]
 801b922:	bd38      	pop	{r3, r4, r5, pc}
 801b924:	200245d4 	.word	0x200245d4

0801b928 <_fstat_r>:
 801b928:	b538      	push	{r3, r4, r5, lr}
 801b92a:	4d07      	ldr	r5, [pc, #28]	; (801b948 <_fstat_r+0x20>)
 801b92c:	2300      	movs	r3, #0
 801b92e:	4604      	mov	r4, r0
 801b930:	4608      	mov	r0, r1
 801b932:	4611      	mov	r1, r2
 801b934:	602b      	str	r3, [r5, #0]
 801b936:	f7e6 fe42 	bl	80025be <_fstat>
 801b93a:	1c43      	adds	r3, r0, #1
 801b93c:	d102      	bne.n	801b944 <_fstat_r+0x1c>
 801b93e:	682b      	ldr	r3, [r5, #0]
 801b940:	b103      	cbz	r3, 801b944 <_fstat_r+0x1c>
 801b942:	6023      	str	r3, [r4, #0]
 801b944:	bd38      	pop	{r3, r4, r5, pc}
 801b946:	bf00      	nop
 801b948:	200245d4 	.word	0x200245d4

0801b94c <_isatty_r>:
 801b94c:	b538      	push	{r3, r4, r5, lr}
 801b94e:	4d06      	ldr	r5, [pc, #24]	; (801b968 <_isatty_r+0x1c>)
 801b950:	2300      	movs	r3, #0
 801b952:	4604      	mov	r4, r0
 801b954:	4608      	mov	r0, r1
 801b956:	602b      	str	r3, [r5, #0]
 801b958:	f7e6 fe41 	bl	80025de <_isatty>
 801b95c:	1c43      	adds	r3, r0, #1
 801b95e:	d102      	bne.n	801b966 <_isatty_r+0x1a>
 801b960:	682b      	ldr	r3, [r5, #0]
 801b962:	b103      	cbz	r3, 801b966 <_isatty_r+0x1a>
 801b964:	6023      	str	r3, [r4, #0]
 801b966:	bd38      	pop	{r3, r4, r5, pc}
 801b968:	200245d4 	.word	0x200245d4

0801b96c <_lseek_r>:
 801b96c:	b538      	push	{r3, r4, r5, lr}
 801b96e:	4d07      	ldr	r5, [pc, #28]	; (801b98c <_lseek_r+0x20>)
 801b970:	4604      	mov	r4, r0
 801b972:	4608      	mov	r0, r1
 801b974:	4611      	mov	r1, r2
 801b976:	2200      	movs	r2, #0
 801b978:	602a      	str	r2, [r5, #0]
 801b97a:	461a      	mov	r2, r3
 801b97c:	f7e6 fe3a 	bl	80025f4 <_lseek>
 801b980:	1c43      	adds	r3, r0, #1
 801b982:	d102      	bne.n	801b98a <_lseek_r+0x1e>
 801b984:	682b      	ldr	r3, [r5, #0]
 801b986:	b103      	cbz	r3, 801b98a <_lseek_r+0x1e>
 801b988:	6023      	str	r3, [r4, #0]
 801b98a:	bd38      	pop	{r3, r4, r5, pc}
 801b98c:	200245d4 	.word	0x200245d4

0801b990 <_malloc_usable_size_r>:
 801b990:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b994:	1f18      	subs	r0, r3, #4
 801b996:	2b00      	cmp	r3, #0
 801b998:	bfbc      	itt	lt
 801b99a:	580b      	ldrlt	r3, [r1, r0]
 801b99c:	18c0      	addlt	r0, r0, r3
 801b99e:	4770      	bx	lr

0801b9a0 <_read_r>:
 801b9a0:	b538      	push	{r3, r4, r5, lr}
 801b9a2:	4d07      	ldr	r5, [pc, #28]	; (801b9c0 <_read_r+0x20>)
 801b9a4:	4604      	mov	r4, r0
 801b9a6:	4608      	mov	r0, r1
 801b9a8:	4611      	mov	r1, r2
 801b9aa:	2200      	movs	r2, #0
 801b9ac:	602a      	str	r2, [r5, #0]
 801b9ae:	461a      	mov	r2, r3
 801b9b0:	f7e6 fdc0 	bl	8002534 <_read>
 801b9b4:	1c43      	adds	r3, r0, #1
 801b9b6:	d102      	bne.n	801b9be <_read_r+0x1e>
 801b9b8:	682b      	ldr	r3, [r5, #0]
 801b9ba:	b103      	cbz	r3, 801b9be <_read_r+0x1e>
 801b9bc:	6023      	str	r3, [r4, #0]
 801b9be:	bd38      	pop	{r3, r4, r5, pc}
 801b9c0:	200245d4 	.word	0x200245d4

0801b9c4 <_init>:
 801b9c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b9c6:	bf00      	nop
 801b9c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b9ca:	bc08      	pop	{r3}
 801b9cc:	469e      	mov	lr, r3
 801b9ce:	4770      	bx	lr

0801b9d0 <_fini>:
 801b9d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b9d2:	bf00      	nop
 801b9d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b9d6:	bc08      	pop	{r3}
 801b9d8:	469e      	mov	lr, r3
 801b9da:	4770      	bx	lr
